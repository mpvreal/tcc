Args: /home/mpvreal/Downloads/llvm-16.0.6/llvm-debug-install/bin/llc -march=thumb --regalloc=basic -debug foo.ll 
Number of GV that must be kept:  0

Features:+thumb-mode,+v4t,+thumb-mode,+v4t
CPU:generic
TuneCPU:generic

G_ADD (opcode 46): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SUB (opcode 47): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MUL (opcode 48): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIV (opcode 49): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIV (opcode 50): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SREM (opcode 51): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UREM (opcode 52): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIVREM (opcode 53): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIVREM (opcode 54): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_AND (opcode 55): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_OR (opcode 56): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_XOR (opcode 57): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 58): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PHI (opcode 59): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 60): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 61): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 62): 2 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 63): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT (opcode 64): 2 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 65): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 66): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 67): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 68): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 69): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTTOPTR (opcode 70): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BITCAST (opcode 71): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FREEZE (opcode 72): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_FPTRUNC_ROUND (opcode 73): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 74): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 75): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_LRINT (opcode 76): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUNDEVEN (opcode 77): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READCYCLECOUNTER (opcode 78): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LOAD (opcode 79): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 80): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 81): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_LOAD (opcode 82): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_SEXTLOAD (opcode 83): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_ZEXTLOAD (opcode 84): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STORE (opcode 85): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_STORE (opcode 86): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 87): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 88): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 89): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 90): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 91): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 92): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 93): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 94): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 95): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 96): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 97): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 98): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 99): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FADD (opcode 100): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FSUB (opcode 101): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FMAX (opcode 102): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FMIN (opcode 103): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UINC_WRAP (opcode 104): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UDEC_WRAP (opcode 105): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FENCE (opcode 106): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 107): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 108): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INVOKE_REGION_START (opcode 109): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 110): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 111): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 112): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 113): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 114): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 115): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VASTART (opcode 116): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VAARG (opcode 117): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT (opcode 118): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT_INREG (opcode 119): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ZEXT (opcode 120): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHL (opcode 121): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LSHR (opcode 122): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ASHR (opcode 123): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSHL (opcode 124): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSHR (opcode 125): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ROTR (opcode 126): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ROTL (opcode 127): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ICMP (opcode 128): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCMP (opcode 129): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SELECT (opcode 130): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDO (opcode 131): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDE (opcode 132): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBO (opcode 133): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBE (opcode 134): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDO (opcode 135): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDE (opcode 136): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 137): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 138): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULO (opcode 139): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULO (opcode 140): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULH (opcode 141): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULH (opcode 142): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDSAT (opcode 143): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDSAT (opcode 144): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBSAT (opcode 145): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBSAT (opcode 146): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USHLSAT (opcode 147): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSHLSAT (opcode 148): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULFIX (opcode 149): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULFIX (opcode 150): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULFIXSAT (opcode 151): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULFIXSAT (opcode 152): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIVFIX (opcode 153): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIVFIX (opcode 154): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIVFIXSAT (opcode 155): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIVFIXSAT (opcode 156): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FADD (opcode 157): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSUB (opcode 158): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMUL (opcode 159): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMA (opcode 160): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAD (opcode 161): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FDIV (opcode 162): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FREM (opcode 163): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPOW (opcode 164): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPOWI (opcode 165): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP (opcode 166): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 167): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG (opcode 168): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 169): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 170): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEG (opcode 171): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 172): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 173): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 174): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTOUI (opcode 175): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 176): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UITOFP (opcode 177): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FABS (opcode 178): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 179): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_IS_FPCLASS (opcode 180): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 181): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM (opcode 182): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM (opcode 183): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM_IEEE (opcode 184): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM_IEEE (opcode 185): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINIMUM (opcode 186): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXIMUM (opcode 187): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTR_ADD (opcode 188): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTRMASK (opcode 189): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMIN (opcode 190): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMAX (opcode 191): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMIN (opcode 192): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMAX (opcode 193): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ABS (opcode 194): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LROUND (opcode 195): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LLROUND (opcode 196): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BR (opcode 197): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRJT (opcode 198): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 199): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 200): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 201): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 202): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 203): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 204): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 205): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 206): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 207): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BITREVERSE (opcode 208): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 209): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOS (opcode 210): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSIN (opcode 211): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 212): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 213): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRINT (opcode 214): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 215): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 216): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 217): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 218): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_DYN_STACKALLOC (opcode 219): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FADD (opcode 220): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FSUB (opcode 221): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FMUL (opcode 222): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FDIV (opcode 223): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FREM (opcode 224): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FMA (opcode 225): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FSQRT (opcode 226): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READ_REGISTER (opcode 227): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_WRITE_REGISTER (opcode 228): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMCPY (opcode 229): 3 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMCPY_INLINE (opcode 230): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMMOVE (opcode 231): 3 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMSET (opcode 232): 3 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BZERO (opcode 233): 2 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SEQ_FADD (opcode 234): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SEQ_FMUL (opcode 235): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FADD (opcode 236): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FMUL (opcode 237): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FMAX (opcode 238): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FMIN (opcode 239): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_ADD (opcode 240): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_MUL (opcode 241): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_AND (opcode 242): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_OR (opcode 243): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_XOR (opcode 244): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SMAX (opcode 245): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SMIN (opcode 246): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_UMAX (opcode 247): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_UMIN (opcode 248): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SBFX (opcode 249): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UBFX (opcode 250): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
'x86-64' is not a recognized processor for this target (ignoring processor)
'+cx8' is not a recognized feature for this target (ignoring feature)
'+fxsr' is not a recognized feature for this target (ignoring feature)
'+mmx' is not a recognized feature for this target (ignoring feature)
'+sse' is not a recognized feature for this target (ignoring feature)
'+sse2' is not a recognized feature for this target (ignoring feature)
'+x87' is not a recognized feature for this target (ignoring feature)
'x86-64' is not a recognized processor for this target (ignoring processor)

Features:+thumb-mode,+v4t,+cx8,+fxsr,+mmx,+sse,+sse2,+x87
CPU:x86-64
TuneCPU:x86-64

'x86-64' is not a recognized processor for this target (ignoring processor)
'+cx8' is not a recognized feature for this target (ignoring feature)
'+fxsr' is not a recognized feature for this target (ignoring feature)
'+mmx' is not a recognized feature for this target (ignoring feature)
'+sse' is not a recognized feature for this target (ignoring feature)
'+sse2' is not a recognized feature for this target (ignoring feature)
'+x87' is not a recognized feature for this target (ignoring feature)
'x86-64' is not a recognized processor for this target (ignoring processor)
'x86-64' is not a recognized processor for this target (ignoring processor)
'x86-64' is not a recognized processor for this target (ignoring processor)
G_ADD (opcode 46): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SUB (opcode 47): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MUL (opcode 48): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIV (opcode 49): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIV (opcode 50): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SREM (opcode 51): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UREM (opcode 52): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIVREM (opcode 53): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIVREM (opcode 54): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_AND (opcode 55): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_OR (opcode 56): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_XOR (opcode 57): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 58): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PHI (opcode 59): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 60): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 61): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 62): 2 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 63): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT (opcode 64): 2 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 65): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 66): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 67): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 68): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 69): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTTOPTR (opcode 70): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BITCAST (opcode 71): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FREEZE (opcode 72): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_FPTRUNC_ROUND (opcode 73): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 74): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 75): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_LRINT (opcode 76): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUNDEVEN (opcode 77): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READCYCLECOUNTER (opcode 78): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LOAD (opcode 79): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 80): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 81): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_LOAD (opcode 82): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_SEXTLOAD (opcode 83): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_ZEXTLOAD (opcode 84): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STORE (opcode 85): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_STORE (opcode 86): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 87): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 88): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 89): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 90): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 91): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 92): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 93): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 94): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 95): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 96): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 97): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 98): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 99): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FADD (opcode 100): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FSUB (opcode 101): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FMAX (opcode 102): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FMIN (opcode 103): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UINC_WRAP (opcode 104): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UDEC_WRAP (opcode 105): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FENCE (opcode 106): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 107): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 108): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INVOKE_REGION_START (opcode 109): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 110): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 111): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 112): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 113): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 114): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 115): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VASTART (opcode 116): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VAARG (opcode 117): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT (opcode 118): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT_INREG (opcode 119): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ZEXT (opcode 120): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHL (opcode 121): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LSHR (opcode 122): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ASHR (opcode 123): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSHL (opcode 124): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSHR (opcode 125): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ROTR (opcode 126): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ROTL (opcode 127): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ICMP (opcode 128): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCMP (opcode 129): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SELECT (opcode 130): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDO (opcode 131): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDE (opcode 132): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBO (opcode 133): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBE (opcode 134): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDO (opcode 135): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDE (opcode 136): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 137): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 138): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULO (opcode 139): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULO (opcode 140): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULH (opcode 141): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULH (opcode 142): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDSAT (opcode 143): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDSAT (opcode 144): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBSAT (opcode 145): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBSAT (opcode 146): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USHLSAT (opcode 147): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSHLSAT (opcode 148): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULFIX (opcode 149): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULFIX (opcode 150): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULFIXSAT (opcode 151): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULFIXSAT (opcode 152): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIVFIX (opcode 153): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIVFIX (opcode 154): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIVFIXSAT (opcode 155): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UDIVFIXSAT (opcode 156): 1 type index, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FADD (opcode 157): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSUB (opcode 158): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMUL (opcode 159): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMA (opcode 160): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAD (opcode 161): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FDIV (opcode 162): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FREM (opcode 163): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPOW (opcode 164): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPOWI (opcode 165): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP (opcode 166): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 167): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG (opcode 168): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 169): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 170): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEG (opcode 171): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 172): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 173): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 174): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTOUI (opcode 175): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 176): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UITOFP (opcode 177): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FABS (opcode 178): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 179): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_IS_FPCLASS (opcode 180): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 181): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM (opcode 182): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM (opcode 183): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM_IEEE (opcode 184): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM_IEEE (opcode 185): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINIMUM (opcode 186): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXIMUM (opcode 187): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTR_ADD (opcode 188): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTRMASK (opcode 189): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMIN (opcode 190): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMAX (opcode 191): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMIN (opcode 192): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMAX (opcode 193): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ABS (opcode 194): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LROUND (opcode 195): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LLROUND (opcode 196): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BR (opcode 197): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRJT (opcode 198): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 199): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 200): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 201): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 202): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 203): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 204): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 205): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 206): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 207): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BITREVERSE (opcode 208): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 209): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOS (opcode 210): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSIN (opcode 211): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 212): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 213): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRINT (opcode 214): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 215): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 216): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 217): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 218): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_DYN_STACKALLOC (opcode 219): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FADD (opcode 220): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FSUB (opcode 221): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FMUL (opcode 222): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FDIV (opcode 223): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FREM (opcode 224): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FMA (opcode 225): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STRICT_FSQRT (opcode 226): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READ_REGISTER (opcode 227): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_WRITE_REGISTER (opcode 228): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMCPY (opcode 229): 3 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMCPY_INLINE (opcode 230): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMMOVE (opcode 231): 3 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MEMSET (opcode 232): 3 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BZERO (opcode 233): 2 type indices, 1 imm index
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SEQ_FADD (opcode 234): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SEQ_FMUL (opcode 235): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FADD (opcode 236): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FMUL (opcode 237): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FMAX (opcode 238): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_FMIN (opcode 239): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_ADD (opcode 240): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_MUL (opcode 241): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_AND (opcode 242): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_OR (opcode 243): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_XOR (opcode 244): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SMAX (opcode 245): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_SMIN (opcode 246): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_UMAX (opcode 247): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VECREDUCE_UMIN (opcode 248): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SBFX (opcode 249): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UBFX (opcode 250): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
Skipping pass 'Simplify the CFG' on function moreThan20Variables
Skipping pass 'Merge contiguous icmps into a memcmp' on function moreThan20Variables
Skipping pass 'Expand memcmp() to load/stores' on function moreThan20Variables
		Looking for trivial roots
Found a new trivial root: %3
Last visited node: %3
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %3
Found roots: %3 
---- Branch Probability Info : moreThan20Variables ----

Computing probabilities for 

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - : float = 1.0, int = 8

Skipping pass 'Constant Hoisting' on function moreThan20Variables
Skipping pass 'Partially inline calls to library functions' on function moreThan20Variables
Skipping pass 'TLS Variable Hoist' on function moreThan20Variables
Complex deinterleaving has been disabled, target does not support lowering of complex number operations.
*** Interleaved Access Pass: moreThan20Variables
Skipping pass 'Type Promotion' on function moreThan20Variables
Skipping pass 'CodeGen Prepare' on function moreThan20Variables
Skipping pass 'Hardware Loop Insertion' on function moreThan20Variables
Skipping pass 'Simplify the CFG' on function main
Skipping pass 'Merge contiguous icmps into a memcmp' on function main
Skipping pass 'Expand memcmp() to load/stores' on function main
		Looking for trivial roots
Found a new trivial root: %0
Last visited node: %0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %0
Found roots: %0 
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

Skipping pass 'Constant Hoisting' on function main
Skipping pass 'Partially inline calls to library functions' on function main
Skipping pass 'TLS Variable Hoist' on function main
Complex deinterleaving has been disabled, target does not support lowering of complex number operations.
*** Interleaved Access Pass: main
Skipping pass 'Type Promotion' on function main
Skipping pass 'CodeGen Prepare' on function main
Skipping pass 'Hardware Loop Insertion' on function main
[SafeStack] Function: moreThan20Variables
[SafeStack]     safestack is not requested for this function
		Looking for trivial roots
Found a new trivial root: %3
Last visited node: %3
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %3
Found roots: %3 
---- Branch Probability Info : moreThan20Variables ----

Computing probabilities for 
Skipping pass 'ARM Instruction Selection' on function moreThan20Variables

Changing optimization level for Function moreThan20Variables
	Before: -O2 ; After: -O0
	FastISel is enabled



=== moreThan20Variables
Enabling fast-isel
Found argument copy elision candidate:   %4 = alloca i32, align 4
Found argument copy elision candidate:   %5 = alloca i32, align 4
Found argument copy elision candidate:   %6 = alloca i32, align 4
Creating new node: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Creating new node: t4: i32,ch = CopyFromReg t0, Register:i32 %1
Creating new node: t6: i32,ch = CopyFromReg t0, Register:i32 %2
Creating constant: t8: i32 = Constant<0>
Creating new node: t9: i32 = undef
Creating new node: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
Creating new node: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
Creating new node: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
Creating new node: t15: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Creating constant: t16: i32 = Constant<1>
Creating new node: t17: i32 = mul nsw t15, Constant:i32<1>
Creating new node: t18: i64 = sign_extend t17
Creating constant: t19: i64 = Constant<-1>
Creating new node: t20: i64 = mul nsw t18, Constant:i64<-1>
Creating new node: t22: ch = store<(store (s64) into %ir.7)> t15:1, t20, FrameIndex:i32<3>, undef:i32
Creating new node: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t22, FrameIndex:i32<2>, undef:i32
Creating constant: t24: i32 = Constant<2>
Creating new node: t25: i32 = mul nsw t23, Constant:i32<2>
Creating new node: t26: i64 = sign_extend t25
Creating new node: t27: i64 = mul nsw t26, Constant:i64<-1>
Creating new node: t29: ch = store<(store (s64) into %ir.8)> t23:1, t27, FrameIndex:i32<4>, undef:i32
Creating new node: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t29, FrameIndex:i32<2>, undef:i32
Creating constant: t31: i32 = Constant<3>
Creating new node: t32: i32 = mul nsw t30, Constant:i32<3>
Creating new node: t33: i64 = sign_extend t32
Creating new node: t34: i64 = mul nsw t33, Constant:i64<-1>
Creating new node: t36: ch = store<(store (s64) into %ir.9)> t30:1, t34, FrameIndex:i32<5>, undef:i32
Creating new node: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t36, FrameIndex:i32<2>, undef:i32
Creating constant: t38: i32 = Constant<4>
Creating new node: t39: i32 = mul nsw t37, Constant:i32<4>
Creating new node: t40: i64 = sign_extend t39
Creating new node: t41: i64 = mul nsw t40, Constant:i64<-1>
Creating new node: t43: ch = store<(store (s64) into %ir.10)> t37:1, t41, FrameIndex:i32<6>, undef:i32
Creating new node: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t43, FrameIndex:i32<2>, undef:i32
Creating constant: t45: i32 = Constant<5>
Creating new node: t46: i32 = mul nsw t44, Constant:i32<5>
Creating new node: t47: i64 = sign_extend t46
Creating new node: t48: i64 = mul nsw t47, Constant:i64<-1>
Creating new node: t50: ch = store<(store (s64) into %ir.11)> t44:1, t48, FrameIndex:i32<7>, undef:i32
Creating new node: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t50, FrameIndex:i32<2>, undef:i32
Creating constant: t52: i32 = Constant<6>
Creating new node: t53: i32 = mul nsw t51, Constant:i32<6>
Creating new node: t54: i64 = sign_extend t53
Creating new node: t55: i64 = mul nsw t54, Constant:i64<-1>
Creating new node: t57: ch = store<(store (s64) into %ir.12)> t51:1, t55, FrameIndex:i32<8>, undef:i32
Creating new node: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t57, FrameIndex:i32<2>, undef:i32
Creating constant: t59: i32 = Constant<7>
Creating new node: t60: i32 = mul nsw t58, Constant:i32<7>
Creating new node: t61: i64 = sign_extend t60
Creating new node: t62: i64 = mul nsw t61, Constant:i64<-1>
Creating new node: t64: ch = store<(store (s64) into %ir.13)> t58:1, t62, FrameIndex:i32<9>, undef:i32
Creating new node: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t64, FrameIndex:i32<2>, undef:i32
Creating constant: t66: i32 = Constant<8>
Creating new node: t67: i32 = mul nsw t65, Constant:i32<8>
Creating new node: t68: i64 = sign_extend t67
Creating new node: t69: i64 = mul nsw t68, Constant:i64<-1>
Creating new node: t71: ch = store<(store (s64) into %ir.14)> t65:1, t69, FrameIndex:i32<10>, undef:i32
Creating new node: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t71, FrameIndex:i32<2>, undef:i32
Creating constant: t73: i32 = Constant<9>
Creating new node: t74: i32 = mul nsw t72, Constant:i32<9>
Creating new node: t75: i64 = sign_extend t74
Creating new node: t76: i64 = mul nsw t75, Constant:i64<-1>
Creating new node: t78: ch = store<(store (s64) into %ir.15)> t72:1, t76, FrameIndex:i32<11>, undef:i32
Creating new node: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t78, FrameIndex:i32<2>, undef:i32
Creating constant: t80: i32 = Constant<10>
Creating new node: t81: i32 = mul nsw t79, Constant:i32<10>
Creating new node: t82: i64 = sign_extend t81
Creating new node: t83: i64 = mul nsw t82, Constant:i64<-1>
Creating new node: t85: ch = store<(store (s64) into %ir.16)> t79:1, t83, FrameIndex:i32<12>, undef:i32
Creating new node: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t85, FrameIndex:i32<2>, undef:i32
Creating constant: t87: i32 = Constant<11>
Creating new node: t88: i32 = mul nsw t86, Constant:i32<11>
Creating new node: t89: i64 = sign_extend t88
Creating new node: t90: i64 = mul nsw t89, Constant:i64<-1>
Creating new node: t92: ch = store<(store (s64) into %ir.17)> t86:1, t90, FrameIndex:i32<13>, undef:i32
Creating new node: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t92, FrameIndex:i32<2>, undef:i32
Creating constant: t94: i32 = Constant<12>
Creating new node: t95: i32 = mul nsw t93, Constant:i32<12>
Creating new node: t96: i64 = sign_extend t95
Creating new node: t97: i64 = mul nsw t96, Constant:i64<-1>
Creating new node: t99: ch = store<(store (s64) into %ir.18)> t93:1, t97, FrameIndex:i32<14>, undef:i32
Creating new node: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t99, FrameIndex:i32<2>, undef:i32
Creating constant: t101: i32 = Constant<13>
Creating new node: t102: i32 = mul nsw t100, Constant:i32<13>
Creating new node: t103: i64 = sign_extend t102
Creating new node: t104: i64 = mul nsw t103, Constant:i64<-1>
Creating new node: t106: ch = store<(store (s64) into %ir.19)> t100:1, t104, FrameIndex:i32<15>, undef:i32
Creating new node: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t106, FrameIndex:i32<2>, undef:i32
Creating constant: t108: i32 = Constant<14>
Creating new node: t109: i32 = mul nsw t107, Constant:i32<14>
Creating new node: t110: i64 = sign_extend t109
Creating new node: t111: i64 = mul nsw t110, Constant:i64<-1>
Creating new node: t113: ch = store<(store (s64) into %ir.20)> t107:1, t111, FrameIndex:i32<16>, undef:i32
Creating new node: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t113, FrameIndex:i32<2>, undef:i32
Creating constant: t115: i32 = Constant<15>
Creating new node: t116: i32 = mul nsw t114, Constant:i32<15>
Creating new node: t117: i64 = sign_extend t116
Creating new node: t118: i64 = mul nsw t117, Constant:i64<-1>
Creating new node: t120: ch = store<(store (s64) into %ir.21)> t114:1, t118, FrameIndex:i32<17>, undef:i32
Creating new node: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t120, FrameIndex:i32<2>, undef:i32
Creating constant: t122: i32 = Constant<16>
Creating new node: t123: i32 = mul nsw t121, Constant:i32<16>
Creating new node: t124: i64 = sign_extend t123
Creating new node: t125: i64 = mul nsw t124, Constant:i64<-1>
Creating new node: t127: ch = store<(store (s64) into %ir.22)> t121:1, t125, FrameIndex:i32<18>, undef:i32
Creating new node: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t127, FrameIndex:i32<2>, undef:i32
Creating constant: t129: i32 = Constant<17>
Creating new node: t130: i32 = mul nsw t128, Constant:i32<17>
Creating new node: t131: i64 = sign_extend t130
Creating new node: t132: i64 = mul nsw t131, Constant:i64<-1>
Creating new node: t134: ch = store<(store (s64) into %ir.23)> t128:1, t132, FrameIndex:i32<19>, undef:i32
Creating new node: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t134, FrameIndex:i32<2>, undef:i32
Creating constant: t136: i32 = Constant<18>
Creating new node: t137: i32 = mul nsw t135, Constant:i32<18>
Creating new node: t138: i64 = sign_extend t137
Creating new node: t139: i64 = mul nsw t138, Constant:i64<-1>
Creating new node: t141: ch = store<(store (s64) into %ir.24)> t135:1, t139, FrameIndex:i32<20>, undef:i32
Creating new node: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t141, FrameIndex:i32<2>, undef:i32
Creating constant: t143: i32 = Constant<19>
Creating new node: t144: i32 = mul nsw t142, Constant:i32<19>
Creating new node: t145: i64 = sign_extend t144
Creating new node: t146: i64 = mul nsw t145, Constant:i64<-1>
Creating new node: t148: ch = store<(store (s64) into %ir.25)> t142:1, t146, FrameIndex:i32<21>, undef:i32
Creating new node: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t148, FrameIndex:i32<2>, undef:i32
Creating constant: t150: i32 = Constant<20>
Creating new node: t151: i32 = mul nsw t149, Constant:i32<20>
Creating new node: t152: i64 = sign_extend t151
Creating new node: t153: i64 = mul nsw t152, Constant:i64<-1>
Creating new node: t155: ch = store<(store (s64) into %ir.26)> t149:1, t153, FrameIndex:i32<22>, undef:i32
Creating new node: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t155, FrameIndex:i32<2>, undef:i32
Creating constant: t157: i32 = Constant<21>
Creating new node: t158: i32 = mul nsw t156, Constant:i32<21>
Creating new node: t159: i64 = sign_extend t158
Creating new node: t160: i64 = mul nsw t159, Constant:i64<-1>
Creating new node: t162: ch = store<(store (s64) into %ir.27)> t156:1, t160, FrameIndex:i32<23>, undef:i32
Creating new node: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t162, FrameIndex:i32<0>, undef:i32
Creating new node: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t162, FrameIndex:i32<1>, undef:i32
Creating new node: t165: i32 = add nsw t163, t164
Creating new node: t166: i64 = sign_extend t165
Creating new node: t167: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t162, FrameIndex:i32<3>, undef:i32
Creating new node: t168: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t162, FrameIndex:i32<4>, undef:i32
Creating new node: t169: i64 = and t167, t168
Creating new node: t170: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t162, FrameIndex:i32<5>, undef:i32
Creating new node: t171: i64 = or t169, t170
Creating new node: t172: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t162, FrameIndex:i32<6>, undef:i32
Creating new node: t173: i64 = or t171, t172
Creating new node: t174: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t162, FrameIndex:i32<7>, undef:i32
Creating new node: t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t162, FrameIndex:i32<8>, undef:i32
Creating new node: t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t162, FrameIndex:i32<9>, undef:i32
Creating new node: t177: i64 = sdiv t175, t176
Creating new node: t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t162, FrameIndex:i32<10>, undef:i32
Creating new node: t179: i64 = srem t177, t178
Creating new node: t180: i64 = add nsw t174, t179
Creating new node: t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t162, FrameIndex:i32<11>, undef:i32
Creating new node: t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t162, FrameIndex:i32<12>, undef:i32
Creating new node: t183: i64 = srem t181, t182
Creating new node: t184: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t162, FrameIndex:i32<13>, undef:i32
Creating new node: t185: i64 = add nsw t183, t184
Creating new node: t186: i64 = and t180, t185
Creating new node: t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t162, FrameIndex:i32<14>, undef:i32
Creating new node: t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t162, FrameIndex:i32<15>, undef:i32
Creating new node: t189: i64 = mul nsw t187, t188
Creating new node: t190: i64 = and t186, t189
Creating new node: t191: i64 = or t173, t190
Creating new node: t192: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t162, FrameIndex:i32<16>, undef:i32
Creating new node: t193: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t162, FrameIndex:i32<17>, undef:i32
Creating new node: t194: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t162, FrameIndex:i32<18>, undef:i32
Creating new node: t195: i64 = sub nsw t193, t194
Creating new node: t196: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t162, FrameIndex:i32<19>, undef:i32
Creating new node: t197: i64 = sub nsw t195, t196
Creating new node: t198: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t162, FrameIndex:i32<20>, undef:i32
Creating new node: t199: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t162, FrameIndex:i32<21>, undef:i32
Creating new node: t200: i64 = add nsw t198, t199
Creating new node: t201: i64 = and t197, t200
Creating new node: t202: i64 = xor t192, t201
Creating new node: t203: i64 = or t191, t202
Creating new node: t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t162, FrameIndex:i32<22>, undef:i32
Creating new node: t205: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t162, FrameIndex:i32<23>, undef:i32
Creating new node: t206: i64 = xor t205, Constant:i64<-1>
Creating new node: t207: i64 = srem t204, t206
Creating new node: t208: i64 = or t203, t207
Creating new node: t209: i64 = mul nsw t166, t208
Creating new node: t210: i32 = truncate t209
Creating new node: t212: ch = TokenFactor t163:1, t164:1, t167:1, t168:1, t170:1, t172:1, t174:1, t175:1, t176:1, t178:1, t181:1, t182:1, t184:1, t187:1, t188:1, t192:1, t193:1, t194:1, t196:1, t198:1, t199:1, t204:1, t205:1
Creating new node: t213: ch = store<(store (s32) into %ir.28)> t212, t210, FrameIndex:i32<24>, undef:i32
Creating new node: t214: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t213, FrameIndex:i32<3>, undef:i32
Creating constant: t215: i64 = Constant<1>
Creating new node: t216: i64 = add nsw t214, Constant:i64<1>
Creating new node: t217: ch = store<(store (s64) into %ir.7)> t214:1, t216, FrameIndex:i32<3>, undef:i32
Creating new node: t220: i32 = extract_element t216, Constant:i32<1>
Creating new node: t221: i32 = extract_element t216, Constant:i32<0>
Creating constant: t222: i32 = TargetConstant<0>
Creating new node: t223: ch,glue = callseq_start t217, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t225: i32,ch = CopyFromReg t223, Register:i32 $sp
Creating new node: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t221, t227:1
Creating new node: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t220, t229:1
Creating new node: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
Creating constant: t235: i32 = TargetConstant<-1>
Creating new node: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
Creating new node: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
Creating new node: t238: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t237:1, FrameIndex:i32<4>, undef:i32
Creating new node: t239: i64 = add nsw t238, Constant:i64<1>
Creating new node: t240: ch = store<(store (s64) into %ir.8)> t238:1, t239, FrameIndex:i32<4>, undef:i32
Creating new node: t241: i32 = extract_element t239, Constant:i32<1>
Creating new node: t242: i32 = extract_element t239, Constant:i32<0>
Creating new node: t243: ch,glue = callseq_start t240, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t244: i32,ch = CopyFromReg t243, Register:i32 $sp
Creating new node: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t242, t245:1
Creating new node: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t241, t246:1
Creating new node: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
Creating new node: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
Creating new node: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
Creating new node: t251: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t250:1, FrameIndex:i32<5>, undef:i32
Creating new node: t252: i64 = add nsw t251, Constant:i64<1>
Creating new node: t253: ch = store<(store (s64) into %ir.9)> t251:1, t252, FrameIndex:i32<5>, undef:i32
Creating new node: t254: i32 = extract_element t252, Constant:i32<1>
Creating new node: t255: i32 = extract_element t252, Constant:i32<0>
Creating new node: t256: ch,glue = callseq_start t253, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t257: i32,ch = CopyFromReg t256, Register:i32 $sp
Creating new node: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t255, t258:1
Creating new node: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t254, t259:1
Creating new node: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
Creating new node: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
Creating new node: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
Creating new node: t264: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t263:1, FrameIndex:i32<6>, undef:i32
Creating new node: t265: i64 = add nsw t264, Constant:i64<1>
Creating new node: t266: ch = store<(store (s64) into %ir.10)> t264:1, t265, FrameIndex:i32<6>, undef:i32
Creating new node: t267: i32 = extract_element t265, Constant:i32<1>
Creating new node: t268: i32 = extract_element t265, Constant:i32<0>
Creating new node: t269: ch,glue = callseq_start t266, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t270: i32,ch = CopyFromReg t269, Register:i32 $sp
Creating new node: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t268, t271:1
Creating new node: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t267, t272:1
Creating new node: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
Creating new node: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
Creating new node: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
Creating new node: t277: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t276:1, FrameIndex:i32<7>, undef:i32
Creating new node: t278: i64 = add nsw t277, Constant:i64<1>
Creating new node: t279: ch = store<(store (s64) into %ir.11)> t277:1, t278, FrameIndex:i32<7>, undef:i32
Creating new node: t280: i32 = extract_element t278, Constant:i32<1>
Creating new node: t281: i32 = extract_element t278, Constant:i32<0>
Creating new node: t282: ch,glue = callseq_start t279, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t283: i32,ch = CopyFromReg t282, Register:i32 $sp
Creating new node: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t281, t284:1
Creating new node: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t280, t285:1
Creating new node: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
Creating new node: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
Creating new node: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
Creating new node: t290: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t289:1, FrameIndex:i32<8>, undef:i32
Creating new node: t291: i64 = add nsw t290, Constant:i64<1>
Creating new node: t292: ch = store<(store (s64) into %ir.12)> t290:1, t291, FrameIndex:i32<8>, undef:i32
Creating new node: t293: i32 = extract_element t291, Constant:i32<1>
Creating new node: t294: i32 = extract_element t291, Constant:i32<0>
Creating new node: t295: ch,glue = callseq_start t292, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t296: i32,ch = CopyFromReg t295, Register:i32 $sp
Creating new node: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t294, t297:1
Creating new node: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t293, t298:1
Creating new node: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
Creating new node: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
Creating new node: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
Creating new node: t303: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t302:1, FrameIndex:i32<9>, undef:i32
Creating new node: t304: i64 = add nsw t303, Constant:i64<1>
Creating new node: t305: ch = store<(store (s64) into %ir.13)> t303:1, t304, FrameIndex:i32<9>, undef:i32
Creating new node: t306: i32 = extract_element t304, Constant:i32<1>
Creating new node: t307: i32 = extract_element t304, Constant:i32<0>
Creating new node: t308: ch,glue = callseq_start t305, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t309: i32,ch = CopyFromReg t308, Register:i32 $sp
Creating new node: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t307, t310:1
Creating new node: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t306, t311:1
Creating new node: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
Creating new node: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
Creating new node: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
Creating new node: t316: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t315:1, FrameIndex:i32<10>, undef:i32
Creating new node: t317: i64 = add nsw t316, Constant:i64<1>
Creating new node: t318: ch = store<(store (s64) into %ir.14)> t316:1, t317, FrameIndex:i32<10>, undef:i32
Creating new node: t319: i32 = extract_element t317, Constant:i32<1>
Creating new node: t320: i32 = extract_element t317, Constant:i32<0>
Creating new node: t321: ch,glue = callseq_start t318, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t322: i32,ch = CopyFromReg t321, Register:i32 $sp
Creating new node: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t320, t323:1
Creating new node: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t319, t324:1
Creating new node: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
Creating new node: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
Creating new node: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
Creating new node: t329: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t328:1, FrameIndex:i32<11>, undef:i32
Creating new node: t330: i64 = add nsw t329, Constant:i64<1>
Creating new node: t331: ch = store<(store (s64) into %ir.15)> t329:1, t330, FrameIndex:i32<11>, undef:i32
Creating new node: t332: i32 = extract_element t330, Constant:i32<1>
Creating new node: t333: i32 = extract_element t330, Constant:i32<0>
Creating new node: t334: ch,glue = callseq_start t331, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t335: i32,ch = CopyFromReg t334, Register:i32 $sp
Creating new node: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t333, t336:1
Creating new node: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t332, t337:1
Creating new node: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
Creating new node: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
Creating new node: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
Creating new node: t342: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t341:1, FrameIndex:i32<12>, undef:i32
Creating new node: t343: i64 = add nsw t342, Constant:i64<1>
Creating new node: t344: ch = store<(store (s64) into %ir.16)> t342:1, t343, FrameIndex:i32<12>, undef:i32
Creating new node: t345: i32 = extract_element t343, Constant:i32<1>
Creating new node: t346: i32 = extract_element t343, Constant:i32<0>
Creating new node: t347: ch,glue = callseq_start t344, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t348: i32,ch = CopyFromReg t347, Register:i32 $sp
Creating new node: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t346, t349:1
Creating new node: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t345, t350:1
Creating new node: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
Creating new node: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
Creating new node: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
Creating new node: t355: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t354:1, FrameIndex:i32<13>, undef:i32
Creating new node: t356: i64 = add nsw t355, Constant:i64<1>
Creating new node: t357: ch = store<(store (s64) into %ir.17)> t355:1, t356, FrameIndex:i32<13>, undef:i32
Creating new node: t358: i32 = extract_element t356, Constant:i32<1>
Creating new node: t359: i32 = extract_element t356, Constant:i32<0>
Creating new node: t360: ch,glue = callseq_start t357, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t361: i32,ch = CopyFromReg t360, Register:i32 $sp
Creating new node: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t359, t362:1
Creating new node: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t358, t363:1
Creating new node: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
Creating new node: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
Creating new node: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
Creating new node: t368: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t367:1, FrameIndex:i32<14>, undef:i32
Creating new node: t369: i64 = add nsw t368, Constant:i64<1>
Creating new node: t370: ch = store<(store (s64) into %ir.18)> t368:1, t369, FrameIndex:i32<14>, undef:i32
Creating new node: t371: i32 = extract_element t369, Constant:i32<1>
Creating new node: t372: i32 = extract_element t369, Constant:i32<0>
Creating new node: t373: ch,glue = callseq_start t370, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t374: i32,ch = CopyFromReg t373, Register:i32 $sp
Creating new node: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t372, t375:1
Creating new node: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t371, t376:1
Creating new node: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
Creating new node: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
Creating new node: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
Creating new node: t381: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t380:1, FrameIndex:i32<15>, undef:i32
Creating new node: t382: i64 = add nsw t381, Constant:i64<1>
Creating new node: t383: ch = store<(store (s64) into %ir.19)> t381:1, t382, FrameIndex:i32<15>, undef:i32
Creating new node: t384: i32 = extract_element t382, Constant:i32<1>
Creating new node: t385: i32 = extract_element t382, Constant:i32<0>
Creating new node: t386: ch,glue = callseq_start t383, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t387: i32,ch = CopyFromReg t386, Register:i32 $sp
Creating new node: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t385, t388:1
Creating new node: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t384, t389:1
Creating new node: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
Creating new node: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
Creating new node: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
Creating new node: t394: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t393:1, FrameIndex:i32<16>, undef:i32
Creating new node: t395: i64 = add nsw t394, Constant:i64<1>
Creating new node: t396: ch = store<(store (s64) into %ir.20)> t394:1, t395, FrameIndex:i32<16>, undef:i32
Creating new node: t397: i32 = extract_element t395, Constant:i32<1>
Creating new node: t398: i32 = extract_element t395, Constant:i32<0>
Creating new node: t399: ch,glue = callseq_start t396, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t400: i32,ch = CopyFromReg t399, Register:i32 $sp
Creating new node: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t398, t401:1
Creating new node: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t397, t402:1
Creating new node: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
Creating new node: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
Creating new node: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
Creating new node: t407: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t406:1, FrameIndex:i32<17>, undef:i32
Creating new node: t408: i64 = add nsw t407, Constant:i64<1>
Creating new node: t409: ch = store<(store (s64) into %ir.21)> t407:1, t408, FrameIndex:i32<17>, undef:i32
Creating new node: t410: i32 = extract_element t408, Constant:i32<1>
Creating new node: t411: i32 = extract_element t408, Constant:i32<0>
Creating new node: t412: ch,glue = callseq_start t409, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t413: i32,ch = CopyFromReg t412, Register:i32 $sp
Creating new node: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t411, t414:1
Creating new node: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t410, t415:1
Creating new node: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
Creating new node: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
Creating new node: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
Creating new node: t420: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t419:1, FrameIndex:i32<18>, undef:i32
Creating new node: t421: i64 = add nsw t420, Constant:i64<1>
Creating new node: t422: ch = store<(store (s64) into %ir.22)> t420:1, t421, FrameIndex:i32<18>, undef:i32
Creating new node: t423: i32 = extract_element t421, Constant:i32<1>
Creating new node: t424: i32 = extract_element t421, Constant:i32<0>
Creating new node: t425: ch,glue = callseq_start t422, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t426: i32,ch = CopyFromReg t425, Register:i32 $sp
Creating new node: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t424, t427:1
Creating new node: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t423, t428:1
Creating new node: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
Creating new node: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
Creating new node: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
Creating new node: t433: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t432:1, FrameIndex:i32<19>, undef:i32
Creating new node: t434: i64 = add nsw t433, Constant:i64<1>
Creating new node: t435: ch = store<(store (s64) into %ir.23)> t433:1, t434, FrameIndex:i32<19>, undef:i32
Creating new node: t436: i32 = extract_element t434, Constant:i32<1>
Creating new node: t437: i32 = extract_element t434, Constant:i32<0>
Creating new node: t438: ch,glue = callseq_start t435, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t439: i32,ch = CopyFromReg t438, Register:i32 $sp
Creating new node: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t437, t440:1
Creating new node: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t436, t441:1
Creating new node: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
Creating new node: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
Creating new node: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
Creating new node: t446: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t445:1, FrameIndex:i32<20>, undef:i32
Creating new node: t447: i64 = add nsw t446, Constant:i64<1>
Creating new node: t448: ch = store<(store (s64) into %ir.24)> t446:1, t447, FrameIndex:i32<20>, undef:i32
Creating new node: t449: i32 = extract_element t447, Constant:i32<1>
Creating new node: t450: i32 = extract_element t447, Constant:i32<0>
Creating new node: t451: ch,glue = callseq_start t448, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t452: i32,ch = CopyFromReg t451, Register:i32 $sp
Creating new node: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t450, t453:1
Creating new node: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t449, t454:1
Creating new node: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
Creating new node: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
Creating new node: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
Creating new node: t459: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t458:1, FrameIndex:i32<21>, undef:i32
Creating new node: t460: i64 = add nsw t459, Constant:i64<1>
Creating new node: t461: ch = store<(store (s64) into %ir.25)> t459:1, t460, FrameIndex:i32<21>, undef:i32
Creating new node: t462: i32 = extract_element t460, Constant:i32<1>
Creating new node: t463: i32 = extract_element t460, Constant:i32<0>
Creating new node: t464: ch,glue = callseq_start t461, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t465: i32,ch = CopyFromReg t464, Register:i32 $sp
Creating new node: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t463, t466:1
Creating new node: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t462, t467:1
Creating new node: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
Creating new node: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
Creating new node: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
Creating new node: t472: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t471:1, FrameIndex:i32<22>, undef:i32
Creating new node: t473: i64 = add nsw t472, Constant:i64<1>
Creating new node: t474: ch = store<(store (s64) into %ir.26)> t472:1, t473, FrameIndex:i32<22>, undef:i32
Creating new node: t475: i32 = extract_element t473, Constant:i32<1>
Creating new node: t476: i32 = extract_element t473, Constant:i32<0>
Creating new node: t477: ch,glue = callseq_start t474, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t478: i32,ch = CopyFromReg t477, Register:i32 $sp
Creating new node: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t476, t479:1
Creating new node: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t475, t480:1
Creating new node: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
Creating new node: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
Creating new node: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
Creating new node: t485: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t484:1, FrameIndex:i32<23>, undef:i32
Creating new node: t486: i64 = add nsw t485, Constant:i64<1>
Creating new node: t487: ch = store<(store (s64) into %ir.27)> t485:1, t486, FrameIndex:i32<23>, undef:i32
Creating new node: t488: i32 = extract_element t486, Constant:i32<1>
Creating new node: t489: i32 = extract_element t486, Constant:i32<0>
Creating new node: t490: ch,glue = callseq_start t487, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t491: i32,ch = CopyFromReg t490, Register:i32 $sp
Creating new node: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Creating new node: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t489, t492:1
Creating new node: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t488, t493:1
Creating new node: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
Creating new node: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
Creating new node: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
Creating new node: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
Creating new node: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
Creating new node: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1
Initial selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 501 nodes:
  t0: ch,glue = EntryToken
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
  t15: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
          t17: i32 = mul nsw t15, Constant:i32<1>
        t18: i64 = sign_extend t17
      t20: i64 = mul nsw t18, Constant:i64<-1>
    t22: ch = store<(store (s64) into %ir.7)> t15:1, t20, FrameIndex:i32<3>, undef:i32
  t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t22, FrameIndex:i32<2>, undef:i32
          t25: i32 = mul nsw t23, Constant:i32<2>
        t26: i64 = sign_extend t25
      t27: i64 = mul nsw t26, Constant:i64<-1>
    t29: ch = store<(store (s64) into %ir.8)> t23:1, t27, FrameIndex:i32<4>, undef:i32
  t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t29, FrameIndex:i32<2>, undef:i32
          t32: i32 = mul nsw t30, Constant:i32<3>
        t33: i64 = sign_extend t32
      t34: i64 = mul nsw t33, Constant:i64<-1>
    t36: ch = store<(store (s64) into %ir.9)> t30:1, t34, FrameIndex:i32<5>, undef:i32
  t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t36, FrameIndex:i32<2>, undef:i32
          t39: i32 = mul nsw t37, Constant:i32<4>
        t40: i64 = sign_extend t39
      t41: i64 = mul nsw t40, Constant:i64<-1>
    t43: ch = store<(store (s64) into %ir.10)> t37:1, t41, FrameIndex:i32<6>, undef:i32
  t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t43, FrameIndex:i32<2>, undef:i32
          t46: i32 = mul nsw t44, Constant:i32<5>
        t47: i64 = sign_extend t46
      t48: i64 = mul nsw t47, Constant:i64<-1>
    t50: ch = store<(store (s64) into %ir.11)> t44:1, t48, FrameIndex:i32<7>, undef:i32
  t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t50, FrameIndex:i32<2>, undef:i32
          t53: i32 = mul nsw t51, Constant:i32<6>
        t54: i64 = sign_extend t53
      t55: i64 = mul nsw t54, Constant:i64<-1>
    t57: ch = store<(store (s64) into %ir.12)> t51:1, t55, FrameIndex:i32<8>, undef:i32
  t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t57, FrameIndex:i32<2>, undef:i32
          t60: i32 = mul nsw t58, Constant:i32<7>
        t61: i64 = sign_extend t60
      t62: i64 = mul nsw t61, Constant:i64<-1>
    t64: ch = store<(store (s64) into %ir.13)> t58:1, t62, FrameIndex:i32<9>, undef:i32
  t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t64, FrameIndex:i32<2>, undef:i32
          t67: i32 = mul nsw t65, Constant:i32<8>
        t68: i64 = sign_extend t67
      t69: i64 = mul nsw t68, Constant:i64<-1>
    t71: ch = store<(store (s64) into %ir.14)> t65:1, t69, FrameIndex:i32<10>, undef:i32
  t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t71, FrameIndex:i32<2>, undef:i32
          t74: i32 = mul nsw t72, Constant:i32<9>
        t75: i64 = sign_extend t74
      t76: i64 = mul nsw t75, Constant:i64<-1>
    t78: ch = store<(store (s64) into %ir.15)> t72:1, t76, FrameIndex:i32<11>, undef:i32
  t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t78, FrameIndex:i32<2>, undef:i32
          t81: i32 = mul nsw t79, Constant:i32<10>
        t82: i64 = sign_extend t81
      t83: i64 = mul nsw t82, Constant:i64<-1>
    t85: ch = store<(store (s64) into %ir.16)> t79:1, t83, FrameIndex:i32<12>, undef:i32
  t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t85, FrameIndex:i32<2>, undef:i32
          t88: i32 = mul nsw t86, Constant:i32<11>
        t89: i64 = sign_extend t88
      t90: i64 = mul nsw t89, Constant:i64<-1>
    t92: ch = store<(store (s64) into %ir.17)> t86:1, t90, FrameIndex:i32<13>, undef:i32
  t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t92, FrameIndex:i32<2>, undef:i32
          t95: i32 = mul nsw t93, Constant:i32<12>
        t96: i64 = sign_extend t95
      t97: i64 = mul nsw t96, Constant:i64<-1>
    t99: ch = store<(store (s64) into %ir.18)> t93:1, t97, FrameIndex:i32<14>, undef:i32
  t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t99, FrameIndex:i32<2>, undef:i32
          t102: i32 = mul nsw t100, Constant:i32<13>
        t103: i64 = sign_extend t102
      t104: i64 = mul nsw t103, Constant:i64<-1>
    t106: ch = store<(store (s64) into %ir.19)> t100:1, t104, FrameIndex:i32<15>, undef:i32
  t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t106, FrameIndex:i32<2>, undef:i32
          t109: i32 = mul nsw t107, Constant:i32<14>
        t110: i64 = sign_extend t109
      t111: i64 = mul nsw t110, Constant:i64<-1>
    t113: ch = store<(store (s64) into %ir.20)> t107:1, t111, FrameIndex:i32<16>, undef:i32
  t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t113, FrameIndex:i32<2>, undef:i32
          t116: i32 = mul nsw t114, Constant:i32<15>
        t117: i64 = sign_extend t116
      t118: i64 = mul nsw t117, Constant:i64<-1>
    t120: ch = store<(store (s64) into %ir.21)> t114:1, t118, FrameIndex:i32<17>, undef:i32
  t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t120, FrameIndex:i32<2>, undef:i32
          t123: i32 = mul nsw t121, Constant:i32<16>
        t124: i64 = sign_extend t123
      t125: i64 = mul nsw t124, Constant:i64<-1>
    t127: ch = store<(store (s64) into %ir.22)> t121:1, t125, FrameIndex:i32<18>, undef:i32
  t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t127, FrameIndex:i32<2>, undef:i32
          t130: i32 = mul nsw t128, Constant:i32<17>
        t131: i64 = sign_extend t130
      t132: i64 = mul nsw t131, Constant:i64<-1>
    t134: ch = store<(store (s64) into %ir.23)> t128:1, t132, FrameIndex:i32<19>, undef:i32
  t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t134, FrameIndex:i32<2>, undef:i32
          t137: i32 = mul nsw t135, Constant:i32<18>
        t138: i64 = sign_extend t137
      t139: i64 = mul nsw t138, Constant:i64<-1>
    t141: ch = store<(store (s64) into %ir.24)> t135:1, t139, FrameIndex:i32<20>, undef:i32
  t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t141, FrameIndex:i32<2>, undef:i32
          t144: i32 = mul nsw t142, Constant:i32<19>
        t145: i64 = sign_extend t144
      t146: i64 = mul nsw t145, Constant:i64<-1>
    t148: ch = store<(store (s64) into %ir.25)> t142:1, t146, FrameIndex:i32<21>, undef:i32
  t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t148, FrameIndex:i32<2>, undef:i32
          t151: i32 = mul nsw t149, Constant:i32<20>
        t152: i64 = sign_extend t151
      t153: i64 = mul nsw t152, Constant:i64<-1>
    t155: ch = store<(store (s64) into %ir.26)> t149:1, t153, FrameIndex:i32<22>, undef:i32
  t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t155, FrameIndex:i32<2>, undef:i32
        t158: i32 = mul nsw t156, Constant:i32<21>
      t159: i64 = sign_extend t158
    t160: i64 = mul nsw t159, Constant:i64<-1>
  t162: ch = store<(store (s64) into %ir.27)> t156:1, t160, FrameIndex:i32<23>, undef:i32
  t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t162, FrameIndex:i32<0>, undef:i32
  t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t162, FrameIndex:i32<1>, undef:i32
  t167: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t162, FrameIndex:i32<3>, undef:i32
  t168: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t162, FrameIndex:i32<4>, undef:i32
  t170: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t162, FrameIndex:i32<5>, undef:i32
  t172: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t162, FrameIndex:i32<6>, undef:i32
  t174: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t162, FrameIndex:i32<7>, undef:i32
  t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t162, FrameIndex:i32<8>, undef:i32
  t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t162, FrameIndex:i32<9>, undef:i32
  t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t162, FrameIndex:i32<10>, undef:i32
  t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t162, FrameIndex:i32<11>, undef:i32
  t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t162, FrameIndex:i32<12>, undef:i32
  t184: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t162, FrameIndex:i32<13>, undef:i32
  t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t162, FrameIndex:i32<14>, undef:i32
  t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t162, FrameIndex:i32<15>, undef:i32
  t192: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t162, FrameIndex:i32<16>, undef:i32
  t193: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t162, FrameIndex:i32<17>, undef:i32
  t194: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t162, FrameIndex:i32<18>, undef:i32
  t196: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t162, FrameIndex:i32<19>, undef:i32
  t198: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t162, FrameIndex:i32<20>, undef:i32
  t199: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t162, FrameIndex:i32<21>, undef:i32
  t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t162, FrameIndex:i32<22>, undef:i32
  t205: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t162, FrameIndex:i32<23>, undef:i32
      t212: ch = TokenFactor t163:1, t164:1, t167:1, t168:1, t170:1, t172:1, t174:1, t175:1, t176:1, t178:1, t181:1, t182:1, t184:1, t187:1, t188:1, t192:1, t193:1, t194:1, t196:1, t198:1, t199:1, t204:1, t205:1
            t165: i32 = add nsw t163, t164
          t166: i64 = sign_extend t165
                    t169: i64 = and t167, t168
                  t171: i64 = or t169, t170
                t173: i64 = or t171, t172
                        t177: i64 = sdiv t175, t176
                      t179: i64 = srem t177, t178
                    t180: i64 = add nsw t174, t179
                      t183: i64 = srem t181, t182
                    t185: i64 = add nsw t183, t184
                  t186: i64 = and t180, t185
                  t189: i64 = mul nsw t187, t188
                t190: i64 = and t186, t189
              t191: i64 = or t173, t190
                    t195: i64 = sub nsw t193, t194
                  t197: i64 = sub nsw t195, t196
                  t200: i64 = add nsw t198, t199
                t201: i64 = and t197, t200
              t202: i64 = xor t192, t201
            t203: i64 = or t191, t202
              t206: i64 = xor t205, Constant:i64<-1>
            t207: i64 = srem t204, t206
          t208: i64 = or t203, t207
        t209: i64 = mul nsw t166, t208
      t210: i32 = truncate t209
    t213: ch = store<(store (s32) into %ir.28)> t212, t210, FrameIndex:i32<24>, undef:i32
  t214: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t213, FrameIndex:i32<3>, undef:i32
  t216: i64 = add nsw t214, Constant:i64<1>
  t218: i32 = GlobalAddress<ptr @printf> 0
    t217: ch = store<(store (s64) into %ir.7)> t214:1, t216, FrameIndex:i32<3>, undef:i32
  t223: ch,glue = callseq_start t217, TargetConstant:i32<0>, TargetConstant:i32<0>
  t225: i32,ch = CopyFromReg t223, Register:i32 $sp
  t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t221: i32 = extract_element t216, Constant:i32<0>
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t221, t227:1
    t220: i32 = extract_element t216, Constant:i32<1>
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t220, t229:1
  t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
  t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
    t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
  t238: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t237:1, FrameIndex:i32<4>, undef:i32
  t239: i64 = add nsw t238, Constant:i64<1>
    t240: ch = store<(store (s64) into %ir.8)> t238:1, t239, FrameIndex:i32<4>, undef:i32
  t243: ch,glue = callseq_start t240, TargetConstant:i32<0>, TargetConstant:i32<0>
  t244: i32,ch = CopyFromReg t243, Register:i32 $sp
  t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t242: i32 = extract_element t239, Constant:i32<0>
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t242, t245:1
    t241: i32 = extract_element t239, Constant:i32<1>
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t241, t246:1
  t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
  t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
    t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
  t251: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t250:1, FrameIndex:i32<5>, undef:i32
  t252: i64 = add nsw t251, Constant:i64<1>
    t253: ch = store<(store (s64) into %ir.9)> t251:1, t252, FrameIndex:i32<5>, undef:i32
  t256: ch,glue = callseq_start t253, TargetConstant:i32<0>, TargetConstant:i32<0>
  t257: i32,ch = CopyFromReg t256, Register:i32 $sp
  t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t255: i32 = extract_element t252, Constant:i32<0>
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t255, t258:1
    t254: i32 = extract_element t252, Constant:i32<1>
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t254, t259:1
  t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
  t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
    t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
  t264: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t263:1, FrameIndex:i32<6>, undef:i32
  t265: i64 = add nsw t264, Constant:i64<1>
    t266: ch = store<(store (s64) into %ir.10)> t264:1, t265, FrameIndex:i32<6>, undef:i32
  t269: ch,glue = callseq_start t266, TargetConstant:i32<0>, TargetConstant:i32<0>
  t270: i32,ch = CopyFromReg t269, Register:i32 $sp
  t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t268: i32 = extract_element t265, Constant:i32<0>
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t268, t271:1
    t267: i32 = extract_element t265, Constant:i32<1>
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t267, t272:1
  t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
  t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
    t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
  t277: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t276:1, FrameIndex:i32<7>, undef:i32
  t278: i64 = add nsw t277, Constant:i64<1>
    t279: ch = store<(store (s64) into %ir.11)> t277:1, t278, FrameIndex:i32<7>, undef:i32
  t282: ch,glue = callseq_start t279, TargetConstant:i32<0>, TargetConstant:i32<0>
  t283: i32,ch = CopyFromReg t282, Register:i32 $sp
  t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t281: i32 = extract_element t278, Constant:i32<0>
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t281, t284:1
    t280: i32 = extract_element t278, Constant:i32<1>
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t280, t285:1
  t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
  t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
    t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
  t290: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t289:1, FrameIndex:i32<8>, undef:i32
  t291: i64 = add nsw t290, Constant:i64<1>
    t292: ch = store<(store (s64) into %ir.12)> t290:1, t291, FrameIndex:i32<8>, undef:i32
  t295: ch,glue = callseq_start t292, TargetConstant:i32<0>, TargetConstant:i32<0>
  t296: i32,ch = CopyFromReg t295, Register:i32 $sp
  t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t294: i32 = extract_element t291, Constant:i32<0>
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t294, t297:1
    t293: i32 = extract_element t291, Constant:i32<1>
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t293, t298:1
  t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
  t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
    t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
  t303: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t302:1, FrameIndex:i32<9>, undef:i32
  t304: i64 = add nsw t303, Constant:i64<1>
    t305: ch = store<(store (s64) into %ir.13)> t303:1, t304, FrameIndex:i32<9>, undef:i32
  t308: ch,glue = callseq_start t305, TargetConstant:i32<0>, TargetConstant:i32<0>
  t309: i32,ch = CopyFromReg t308, Register:i32 $sp
  t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t307: i32 = extract_element t304, Constant:i32<0>
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t307, t310:1
    t306: i32 = extract_element t304, Constant:i32<1>
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t306, t311:1
  t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
  t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
    t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
  t316: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t315:1, FrameIndex:i32<10>, undef:i32
  t317: i64 = add nsw t316, Constant:i64<1>
    t318: ch = store<(store (s64) into %ir.14)> t316:1, t317, FrameIndex:i32<10>, undef:i32
  t321: ch,glue = callseq_start t318, TargetConstant:i32<0>, TargetConstant:i32<0>
  t322: i32,ch = CopyFromReg t321, Register:i32 $sp
  t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t320: i32 = extract_element t317, Constant:i32<0>
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t320, t323:1
    t319: i32 = extract_element t317, Constant:i32<1>
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t319, t324:1
  t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
  t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
    t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
  t329: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t328:1, FrameIndex:i32<11>, undef:i32
  t330: i64 = add nsw t329, Constant:i64<1>
    t331: ch = store<(store (s64) into %ir.15)> t329:1, t330, FrameIndex:i32<11>, undef:i32
  t334: ch,glue = callseq_start t331, TargetConstant:i32<0>, TargetConstant:i32<0>
  t335: i32,ch = CopyFromReg t334, Register:i32 $sp
  t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t333: i32 = extract_element t330, Constant:i32<0>
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t333, t336:1
    t332: i32 = extract_element t330, Constant:i32<1>
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t332, t337:1
  t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
  t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
    t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
  t342: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t341:1, FrameIndex:i32<12>, undef:i32
  t343: i64 = add nsw t342, Constant:i64<1>
    t344: ch = store<(store (s64) into %ir.16)> t342:1, t343, FrameIndex:i32<12>, undef:i32
  t347: ch,glue = callseq_start t344, TargetConstant:i32<0>, TargetConstant:i32<0>
  t348: i32,ch = CopyFromReg t347, Register:i32 $sp
  t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t346: i32 = extract_element t343, Constant:i32<0>
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t346, t349:1
    t345: i32 = extract_element t343, Constant:i32<1>
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t345, t350:1
  t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
  t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
    t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
  t355: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t354:1, FrameIndex:i32<13>, undef:i32
  t356: i64 = add nsw t355, Constant:i64<1>
    t357: ch = store<(store (s64) into %ir.17)> t355:1, t356, FrameIndex:i32<13>, undef:i32
  t360: ch,glue = callseq_start t357, TargetConstant:i32<0>, TargetConstant:i32<0>
  t361: i32,ch = CopyFromReg t360, Register:i32 $sp
  t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t359: i32 = extract_element t356, Constant:i32<0>
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t359, t362:1
    t358: i32 = extract_element t356, Constant:i32<1>
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t358, t363:1
  t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
  t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
    t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
  t368: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t367:1, FrameIndex:i32<14>, undef:i32
  t369: i64 = add nsw t368, Constant:i64<1>
    t370: ch = store<(store (s64) into %ir.18)> t368:1, t369, FrameIndex:i32<14>, undef:i32
  t373: ch,glue = callseq_start t370, TargetConstant:i32<0>, TargetConstant:i32<0>
  t374: i32,ch = CopyFromReg t373, Register:i32 $sp
  t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t372: i32 = extract_element t369, Constant:i32<0>
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t372, t375:1
    t371: i32 = extract_element t369, Constant:i32<1>
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t371, t376:1
  t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
  t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
    t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
  t381: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t380:1, FrameIndex:i32<15>, undef:i32
  t382: i64 = add nsw t381, Constant:i64<1>
    t383: ch = store<(store (s64) into %ir.19)> t381:1, t382, FrameIndex:i32<15>, undef:i32
  t386: ch,glue = callseq_start t383, TargetConstant:i32<0>, TargetConstant:i32<0>
  t387: i32,ch = CopyFromReg t386, Register:i32 $sp
  t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t385: i32 = extract_element t382, Constant:i32<0>
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t385, t388:1
    t384: i32 = extract_element t382, Constant:i32<1>
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t384, t389:1
  t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
  t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
    t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
  t394: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t393:1, FrameIndex:i32<16>, undef:i32
  t395: i64 = add nsw t394, Constant:i64<1>
    t396: ch = store<(store (s64) into %ir.20)> t394:1, t395, FrameIndex:i32<16>, undef:i32
  t399: ch,glue = callseq_start t396, TargetConstant:i32<0>, TargetConstant:i32<0>
  t400: i32,ch = CopyFromReg t399, Register:i32 $sp
  t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t398: i32 = extract_element t395, Constant:i32<0>
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t398, t401:1
    t397: i32 = extract_element t395, Constant:i32<1>
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t397, t402:1
  t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
  t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
    t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
  t407: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t406:1, FrameIndex:i32<17>, undef:i32
  t408: i64 = add nsw t407, Constant:i64<1>
    t409: ch = store<(store (s64) into %ir.21)> t407:1, t408, FrameIndex:i32<17>, undef:i32
  t412: ch,glue = callseq_start t409, TargetConstant:i32<0>, TargetConstant:i32<0>
  t413: i32,ch = CopyFromReg t412, Register:i32 $sp
  t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t411: i32 = extract_element t408, Constant:i32<0>
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t411, t414:1
    t410: i32 = extract_element t408, Constant:i32<1>
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t410, t415:1
  t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
  t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
    t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
  t420: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t419:1, FrameIndex:i32<18>, undef:i32
  t421: i64 = add nsw t420, Constant:i64<1>
    t422: ch = store<(store (s64) into %ir.22)> t420:1, t421, FrameIndex:i32<18>, undef:i32
  t425: ch,glue = callseq_start t422, TargetConstant:i32<0>, TargetConstant:i32<0>
  t426: i32,ch = CopyFromReg t425, Register:i32 $sp
  t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t424: i32 = extract_element t421, Constant:i32<0>
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t424, t427:1
    t423: i32 = extract_element t421, Constant:i32<1>
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t423, t428:1
  t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
  t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
    t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
  t433: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t432:1, FrameIndex:i32<19>, undef:i32
  t434: i64 = add nsw t433, Constant:i64<1>
    t435: ch = store<(store (s64) into %ir.23)> t433:1, t434, FrameIndex:i32<19>, undef:i32
  t438: ch,glue = callseq_start t435, TargetConstant:i32<0>, TargetConstant:i32<0>
  t439: i32,ch = CopyFromReg t438, Register:i32 $sp
  t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t437: i32 = extract_element t434, Constant:i32<0>
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t437, t440:1
    t436: i32 = extract_element t434, Constant:i32<1>
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t436, t441:1
  t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
  t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
    t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
  t446: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t445:1, FrameIndex:i32<20>, undef:i32
  t447: i64 = add nsw t446, Constant:i64<1>
    t448: ch = store<(store (s64) into %ir.24)> t446:1, t447, FrameIndex:i32<20>, undef:i32
  t451: ch,glue = callseq_start t448, TargetConstant:i32<0>, TargetConstant:i32<0>
  t452: i32,ch = CopyFromReg t451, Register:i32 $sp
  t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t450: i32 = extract_element t447, Constant:i32<0>
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t450, t453:1
    t449: i32 = extract_element t447, Constant:i32<1>
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t449, t454:1
  t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
  t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
    t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
  t459: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t458:1, FrameIndex:i32<21>, undef:i32
  t460: i64 = add nsw t459, Constant:i64<1>
    t461: ch = store<(store (s64) into %ir.25)> t459:1, t460, FrameIndex:i32<21>, undef:i32
  t464: ch,glue = callseq_start t461, TargetConstant:i32<0>, TargetConstant:i32<0>
  t465: i32,ch = CopyFromReg t464, Register:i32 $sp
  t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t463: i32 = extract_element t460, Constant:i32<0>
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t463, t466:1
    t462: i32 = extract_element t460, Constant:i32<1>
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t462, t467:1
  t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
  t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
    t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
  t472: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t471:1, FrameIndex:i32<22>, undef:i32
  t473: i64 = add nsw t472, Constant:i64<1>
    t474: ch = store<(store (s64) into %ir.26)> t472:1, t473, FrameIndex:i32<22>, undef:i32
  t477: ch,glue = callseq_start t474, TargetConstant:i32<0>, TargetConstant:i32<0>
  t478: i32,ch = CopyFromReg t477, Register:i32 $sp
  t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t476: i32 = extract_element t473, Constant:i32<0>
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t476, t479:1
    t475: i32 = extract_element t473, Constant:i32<1>
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t475, t480:1
  t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
  t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
    t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
  t485: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t484:1, FrameIndex:i32<23>, undef:i32
  t486: i64 = add nsw t485, Constant:i64<1>
    t487: ch = store<(store (s64) into %ir.27)> t485:1, t486, FrameIndex:i32<23>, undef:i32
  t490: ch,glue = callseq_start t487, TargetConstant:i32<0>, TargetConstant:i32<0>
  t491: i32,ch = CopyFromReg t490, Register:i32 $sp
  t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t489: i32 = extract_element t486, Constant:i32<0>
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t489, t492:1
    t488: i32 = extract_element t486, Constant:i32<1>
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t488, t493:1
  t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
  t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
  t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
    t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
  t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1



Combining: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1

Combining: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498

Combining: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32

Combining: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1

Combining: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1

Combining: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1

Combining: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t488, t493:1

Combining: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t489, t492:1

Combining: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t490: ch,glue = callseq_start t487, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t489: i32 = extract_element t486, Constant:i32<0>

Combining: t488: i32 = extract_element t486, Constant:i32<1>

Combining: t487: ch = store<(store (s64) into %ir.27)> t485:1, t486, FrameIndex:i32<23>, undef:i32

Combining: t486: i64 = add nsw t485, Constant:i64<1>

Combining: t485: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t484:1, FrameIndex:i32<23>, undef:i32

Combining: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1

Combining: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1

Combining: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1

Combining: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t475, t480:1

Combining: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t476, t479:1

Combining: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t477: ch,glue = callseq_start t474, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t476: i32 = extract_element t473, Constant:i32<0>

Combining: t475: i32 = extract_element t473, Constant:i32<1>

Combining: t474: ch = store<(store (s64) into %ir.26)> t472:1, t473, FrameIndex:i32<22>, undef:i32

Combining: t473: i64 = add nsw t472, Constant:i64<1>

Combining: t472: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t471:1, FrameIndex:i32<22>, undef:i32

Combining: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1

Combining: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1

Combining: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1

Combining: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t462, t467:1

Combining: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t463, t466:1

Combining: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t464: ch,glue = callseq_start t461, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t463: i32 = extract_element t460, Constant:i32<0>

Combining: t462: i32 = extract_element t460, Constant:i32<1>

Combining: t461: ch = store<(store (s64) into %ir.25)> t459:1, t460, FrameIndex:i32<21>, undef:i32

Combining: t460: i64 = add nsw t459, Constant:i64<1>

Combining: t459: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t458:1, FrameIndex:i32<21>, undef:i32

Combining: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1

Combining: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1

Combining: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1

Combining: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t449, t454:1

Combining: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t450, t453:1

Combining: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t451: ch,glue = callseq_start t448, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t450: i32 = extract_element t447, Constant:i32<0>

Combining: t449: i32 = extract_element t447, Constant:i32<1>

Combining: t448: ch = store<(store (s64) into %ir.24)> t446:1, t447, FrameIndex:i32<20>, undef:i32

Combining: t447: i64 = add nsw t446, Constant:i64<1>

Combining: t446: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t445:1, FrameIndex:i32<20>, undef:i32

Combining: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1

Combining: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1

Combining: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1

Combining: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t436, t441:1

Combining: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t437, t440:1

Combining: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t438: ch,glue = callseq_start t435, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t437: i32 = extract_element t434, Constant:i32<0>

Combining: t436: i32 = extract_element t434, Constant:i32<1>

Combining: t435: ch = store<(store (s64) into %ir.23)> t433:1, t434, FrameIndex:i32<19>, undef:i32

Combining: t434: i64 = add nsw t433, Constant:i64<1>

Combining: t433: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t432:1, FrameIndex:i32<19>, undef:i32

Combining: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1

Combining: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1

Combining: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1

Combining: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t423, t428:1

Combining: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t424, t427:1

Combining: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t425: ch,glue = callseq_start t422, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t424: i32 = extract_element t421, Constant:i32<0>

Combining: t423: i32 = extract_element t421, Constant:i32<1>

Combining: t422: ch = store<(store (s64) into %ir.22)> t420:1, t421, FrameIndex:i32<18>, undef:i32

Combining: t421: i64 = add nsw t420, Constant:i64<1>

Combining: t420: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t419:1, FrameIndex:i32<18>, undef:i32

Combining: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1

Combining: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1

Combining: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1

Combining: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t410, t415:1

Combining: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t411, t414:1

Combining: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t412: ch,glue = callseq_start t409, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t411: i32 = extract_element t408, Constant:i32<0>

Combining: t410: i32 = extract_element t408, Constant:i32<1>

Combining: t409: ch = store<(store (s64) into %ir.21)> t407:1, t408, FrameIndex:i32<17>, undef:i32

Combining: t408: i64 = add nsw t407, Constant:i64<1>

Combining: t407: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t406:1, FrameIndex:i32<17>, undef:i32

Combining: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1

Combining: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1

Combining: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1

Combining: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t397, t402:1

Combining: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t398, t401:1

Combining: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t399: ch,glue = callseq_start t396, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t398: i32 = extract_element t395, Constant:i32<0>

Combining: t397: i32 = extract_element t395, Constant:i32<1>

Combining: t396: ch = store<(store (s64) into %ir.20)> t394:1, t395, FrameIndex:i32<16>, undef:i32

Combining: t395: i64 = add nsw t394, Constant:i64<1>

Combining: t394: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t393:1, FrameIndex:i32<16>, undef:i32

Combining: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1

Combining: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1

Combining: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1

Combining: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t384, t389:1

Combining: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t385, t388:1

Combining: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t386: ch,glue = callseq_start t383, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t385: i32 = extract_element t382, Constant:i32<0>

Combining: t384: i32 = extract_element t382, Constant:i32<1>

Combining: t383: ch = store<(store (s64) into %ir.19)> t381:1, t382, FrameIndex:i32<15>, undef:i32

Combining: t382: i64 = add nsw t381, Constant:i64<1>

Combining: t381: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t380:1, FrameIndex:i32<15>, undef:i32

Combining: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1

Combining: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1

Combining: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1

Combining: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t371, t376:1

Combining: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t372, t375:1

Combining: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t373: ch,glue = callseq_start t370, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t372: i32 = extract_element t369, Constant:i32<0>

Combining: t371: i32 = extract_element t369, Constant:i32<1>

Combining: t370: ch = store<(store (s64) into %ir.18)> t368:1, t369, FrameIndex:i32<14>, undef:i32

Combining: t369: i64 = add nsw t368, Constant:i64<1>

Combining: t368: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t367:1, FrameIndex:i32<14>, undef:i32

Combining: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1

Combining: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1

Combining: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1

Combining: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t358, t363:1

Combining: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t359, t362:1

Combining: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t360: ch,glue = callseq_start t357, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t359: i32 = extract_element t356, Constant:i32<0>

Combining: t358: i32 = extract_element t356, Constant:i32<1>

Combining: t357: ch = store<(store (s64) into %ir.17)> t355:1, t356, FrameIndex:i32<13>, undef:i32

Combining: t356: i64 = add nsw t355, Constant:i64<1>

Combining: t355: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t354:1, FrameIndex:i32<13>, undef:i32

Combining: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1

Combining: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1

Combining: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1

Combining: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t345, t350:1

Combining: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t346, t349:1

Combining: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t347: ch,glue = callseq_start t344, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t346: i32 = extract_element t343, Constant:i32<0>

Combining: t345: i32 = extract_element t343, Constant:i32<1>

Combining: t344: ch = store<(store (s64) into %ir.16)> t342:1, t343, FrameIndex:i32<12>, undef:i32

Combining: t343: i64 = add nsw t342, Constant:i64<1>

Combining: t342: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t341:1, FrameIndex:i32<12>, undef:i32

Combining: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1

Combining: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1

Combining: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1

Combining: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t332, t337:1

Combining: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t333, t336:1

Combining: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t334: ch,glue = callseq_start t331, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t333: i32 = extract_element t330, Constant:i32<0>

Combining: t332: i32 = extract_element t330, Constant:i32<1>

Combining: t331: ch = store<(store (s64) into %ir.15)> t329:1, t330, FrameIndex:i32<11>, undef:i32

Combining: t330: i64 = add nsw t329, Constant:i64<1>

Combining: t329: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t328:1, FrameIndex:i32<11>, undef:i32

Combining: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1

Combining: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1

Combining: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1

Combining: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t319, t324:1

Combining: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t320, t323:1

Combining: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t321: ch,glue = callseq_start t318, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t320: i32 = extract_element t317, Constant:i32<0>

Combining: t319: i32 = extract_element t317, Constant:i32<1>

Combining: t318: ch = store<(store (s64) into %ir.14)> t316:1, t317, FrameIndex:i32<10>, undef:i32

Combining: t317: i64 = add nsw t316, Constant:i64<1>

Combining: t316: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t315:1, FrameIndex:i32<10>, undef:i32

Combining: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1

Combining: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1

Combining: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1

Combining: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t306, t311:1

Combining: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t307, t310:1

Combining: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t308: ch,glue = callseq_start t305, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t307: i32 = extract_element t304, Constant:i32<0>

Combining: t306: i32 = extract_element t304, Constant:i32<1>

Combining: t305: ch = store<(store (s64) into %ir.13)> t303:1, t304, FrameIndex:i32<9>, undef:i32

Combining: t304: i64 = add nsw t303, Constant:i64<1>

Combining: t303: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t302:1, FrameIndex:i32<9>, undef:i32

Combining: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1

Combining: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1

Combining: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1

Combining: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t293, t298:1

Combining: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t294, t297:1

Combining: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t295: ch,glue = callseq_start t292, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t294: i32 = extract_element t291, Constant:i32<0>

Combining: t293: i32 = extract_element t291, Constant:i32<1>

Combining: t292: ch = store<(store (s64) into %ir.12)> t290:1, t291, FrameIndex:i32<8>, undef:i32

Combining: t291: i64 = add nsw t290, Constant:i64<1>

Combining: t290: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t289:1, FrameIndex:i32<8>, undef:i32

Combining: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1

Combining: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1

Combining: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1

Combining: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t280, t285:1

Combining: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t281, t284:1

Combining: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t282: ch,glue = callseq_start t279, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t281: i32 = extract_element t278, Constant:i32<0>

Combining: t280: i32 = extract_element t278, Constant:i32<1>

Combining: t279: ch = store<(store (s64) into %ir.11)> t277:1, t278, FrameIndex:i32<7>, undef:i32

Combining: t278: i64 = add nsw t277, Constant:i64<1>

Combining: t277: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t276:1, FrameIndex:i32<7>, undef:i32

Combining: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1

Combining: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1

Combining: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1

Combining: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t267, t272:1

Combining: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t268, t271:1

Combining: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t269: ch,glue = callseq_start t266, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t268: i32 = extract_element t265, Constant:i32<0>

Combining: t267: i32 = extract_element t265, Constant:i32<1>

Combining: t266: ch = store<(store (s64) into %ir.10)> t264:1, t265, FrameIndex:i32<6>, undef:i32

Combining: t265: i64 = add nsw t264, Constant:i64<1>

Combining: t264: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t263:1, FrameIndex:i32<6>, undef:i32

Combining: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1

Combining: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1

Combining: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1

Combining: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t254, t259:1

Combining: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t255, t258:1

Combining: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t256: ch,glue = callseq_start t253, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t255: i32 = extract_element t252, Constant:i32<0>

Combining: t254: i32 = extract_element t252, Constant:i32<1>

Combining: t253: ch = store<(store (s64) into %ir.9)> t251:1, t252, FrameIndex:i32<5>, undef:i32

Combining: t252: i64 = add nsw t251, Constant:i64<1>

Combining: t251: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t250:1, FrameIndex:i32<5>, undef:i32

Combining: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1

Combining: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1

Combining: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1

Combining: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t241, t246:1

Combining: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t242, t245:1

Combining: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t243: ch,glue = callseq_start t240, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t242: i32 = extract_element t239, Constant:i32<0>

Combining: t241: i32 = extract_element t239, Constant:i32<1>

Combining: t240: ch = store<(store (s64) into %ir.8)> t238:1, t239, FrameIndex:i32<4>, undef:i32

Combining: t239: i64 = add nsw t238, Constant:i64<1>

Combining: t238: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t237:1, FrameIndex:i32<4>, undef:i32

Combining: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1

Combining: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1

Combining: t235: i32 = TargetConstant<-1>

Combining: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1

Combining: t233: Untyped = RegisterMask

Combining: t232: i32 = TargetGlobalAddress<ptr @printf> 0

Combining: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t220, t229:1

Combining: t230: i32 = Register $r3

Combining: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t221, t227:1

Combining: t228: i32 = Register $r2

Combining: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t226: i32 = Register $r0

Combining: t223: ch,glue = callseq_start t217, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t222: i32 = TargetConstant<0>

Combining: t221: i32 = extract_element t216, Constant:i32<0>

Combining: t220: i32 = extract_element t216, Constant:i32<1>

Combining: t219: i32 = GlobalAddress<ptr @.str> 0

Combining: t217: ch = store<(store (s64) into %ir.7)> t214:1, t216, FrameIndex:i32<3>, undef:i32

Combining: t216: i64 = add nsw t214, Constant:i64<1>

Combining: t215: i64 = Constant<1>

Combining: t214: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t213, FrameIndex:i32<3>, undef:i32

Combining: t213: ch = store<(store (s32) into %ir.28)> t212, t210, FrameIndex:i32<24>, undef:i32

Combining: t212: ch = TokenFactor t163:1, t164:1, t167:1, t168:1, t170:1, t172:1, t174:1, t175:1, t176:1, t178:1, t181:1, t182:1, t184:1, t187:1, t188:1, t192:1, t193:1, t194:1, t196:1, t198:1, t199:1, t204:1, t205:1

Combining: t211: i32 = FrameIndex<24>

Combining: t210: i32 = truncate t209
Creating new node: t501: i64 = any_extend t165

Replacing.2 t166: i64 = sign_extend t165

With: t501: i64 = any_extend t165


Combining: t501: i64 = any_extend t165

Combining: t210: i32 = truncate t209

Combining: t209: i64 = mul t501, t208

Combining: t208: i64 = or t203, t207

Combining: t207: i64 = srem t204, t206

Combining: t206: i64 = xor t205, Constant:i64<-1>

Combining: t205: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t162, FrameIndex:i32<23>, undef:i32

Combining: t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t162, FrameIndex:i32<22>, undef:i32

Combining: t203: i64 = or t191, t202

Combining: t202: i64 = xor t192, t201

Combining: t201: i64 = and t197, t200

Combining: t200: i64 = add nsw t198, t199

Combining: t199: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t162, FrameIndex:i32<21>, undef:i32

Combining: t198: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t162, FrameIndex:i32<20>, undef:i32

Combining: t197: i64 = sub nsw t195, t196

Combining: t196: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t162, FrameIndex:i32<19>, undef:i32

Combining: t195: i64 = sub nsw t193, t194

Combining: t194: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t162, FrameIndex:i32<18>, undef:i32

Combining: t193: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t162, FrameIndex:i32<17>, undef:i32

Combining: t192: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t162, FrameIndex:i32<16>, undef:i32

Combining: t191: i64 = or t173, t190

Combining: t190: i64 = and t186, t189

Combining: t189: i64 = mul nsw t187, t188

Combining: t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t162, FrameIndex:i32<15>, undef:i32

Combining: t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t162, FrameIndex:i32<14>, undef:i32

Combining: t186: i64 = and t180, t185

Combining: t185: i64 = add nsw t183, t184

Combining: t184: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t162, FrameIndex:i32<13>, undef:i32

Combining: t183: i64 = srem t181, t182

Combining: t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t162, FrameIndex:i32<12>, undef:i32

Combining: t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t162, FrameIndex:i32<11>, undef:i32

Combining: t180: i64 = add nsw t174, t179

Combining: t179: i64 = srem t177, t178

Combining: t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t162, FrameIndex:i32<10>, undef:i32

Combining: t177: i64 = sdiv t175, t176

Combining: t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t162, FrameIndex:i32<9>, undef:i32

Combining: t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t162, FrameIndex:i32<8>, undef:i32

Combining: t174: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t162, FrameIndex:i32<7>, undef:i32

Combining: t173: i64 = or t171, t172

Combining: t172: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t162, FrameIndex:i32<6>, undef:i32

Combining: t171: i64 = or t169, t170

Combining: t170: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t162, FrameIndex:i32<5>, undef:i32

Combining: t169: i64 = and t167, t168

Combining: t168: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t162, FrameIndex:i32<4>, undef:i32

Combining: t167: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t162, FrameIndex:i32<3>, undef:i32

Combining: t165: i32 = add nsw t163, t164

Combining: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t162, FrameIndex:i32<1>, undef:i32

Combining: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t162, FrameIndex:i32<0>, undef:i32

Combining: t162: ch = store<(store (s64) into %ir.27)> t156:1, t160, FrameIndex:i32<23>, undef:i32

Combining: t161: i32 = FrameIndex<23>

Combining: t160: i64 = mul nsw t159, Constant:i64<-1>
Creating constant: t502: i64 = Constant<0>
Creating new node: t503: i64 = sub Constant:i64<0>, t159
 ... into: t503: i64 = sub Constant:i64<0>, t159

Combining: t162: ch = store<(store (s64) into %ir.27)> t156:1, t503, FrameIndex:i32<23>, undef:i32

Combining: t503: i64 = sub Constant:i64<0>, t159

Combining: t502: i64 = Constant<0>

Combining: t159: i64 = sign_extend t158

Combining: t158: i32 = mul nsw t156, Constant:i32<21>

Combining: t157: i32 = Constant<21>

Combining: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t155, FrameIndex:i32<2>, undef:i32

Combining: t155: ch = store<(store (s64) into %ir.26)> t149:1, t153, FrameIndex:i32<22>, undef:i32

Combining: t154: i32 = FrameIndex<22>

Combining: t153: i64 = mul nsw t152, Constant:i64<-1>
Creating new node: t504: i64 = sub Constant:i64<0>, t152
 ... into: t504: i64 = sub Constant:i64<0>, t152

Combining: t155: ch = store<(store (s64) into %ir.26)> t149:1, t504, FrameIndex:i32<22>, undef:i32

Combining: t504: i64 = sub Constant:i64<0>, t152

Combining: t152: i64 = sign_extend t151

Combining: t151: i32 = mul nsw t149, Constant:i32<20>

Combining: t150: i32 = Constant<20>

Combining: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t148, FrameIndex:i32<2>, undef:i32

Combining: t148: ch = store<(store (s64) into %ir.25)> t142:1, t146, FrameIndex:i32<21>, undef:i32

Combining: t147: i32 = FrameIndex<21>

Combining: t146: i64 = mul nsw t145, Constant:i64<-1>
Creating new node: t505: i64 = sub Constant:i64<0>, t145
 ... into: t505: i64 = sub Constant:i64<0>, t145

Combining: t148: ch = store<(store (s64) into %ir.25)> t142:1, t505, FrameIndex:i32<21>, undef:i32

Combining: t505: i64 = sub Constant:i64<0>, t145

Combining: t145: i64 = sign_extend t144

Combining: t144: i32 = mul nsw t142, Constant:i32<19>

Combining: t143: i32 = Constant<19>

Combining: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t141, FrameIndex:i32<2>, undef:i32

Combining: t141: ch = store<(store (s64) into %ir.24)> t135:1, t139, FrameIndex:i32<20>, undef:i32

Combining: t140: i32 = FrameIndex<20>

Combining: t139: i64 = mul nsw t138, Constant:i64<-1>
Creating new node: t506: i64 = sub Constant:i64<0>, t138
 ... into: t506: i64 = sub Constant:i64<0>, t138

Combining: t141: ch = store<(store (s64) into %ir.24)> t135:1, t506, FrameIndex:i32<20>, undef:i32

Combining: t506: i64 = sub Constant:i64<0>, t138

Combining: t138: i64 = sign_extend t137

Combining: t137: i32 = mul nsw t135, Constant:i32<18>

Combining: t136: i32 = Constant<18>

Combining: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t134, FrameIndex:i32<2>, undef:i32

Combining: t134: ch = store<(store (s64) into %ir.23)> t128:1, t132, FrameIndex:i32<19>, undef:i32

Combining: t133: i32 = FrameIndex<19>

Combining: t132: i64 = mul nsw t131, Constant:i64<-1>
Creating new node: t507: i64 = sub Constant:i64<0>, t131
 ... into: t507: i64 = sub Constant:i64<0>, t131

Combining: t134: ch = store<(store (s64) into %ir.23)> t128:1, t507, FrameIndex:i32<19>, undef:i32

Combining: t507: i64 = sub Constant:i64<0>, t131

Combining: t131: i64 = sign_extend t130

Combining: t130: i32 = mul nsw t128, Constant:i32<17>

Combining: t129: i32 = Constant<17>

Combining: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t127, FrameIndex:i32<2>, undef:i32

Combining: t127: ch = store<(store (s64) into %ir.22)> t121:1, t125, FrameIndex:i32<18>, undef:i32

Combining: t126: i32 = FrameIndex<18>

Combining: t125: i64 = mul nsw t124, Constant:i64<-1>
Creating new node: t508: i64 = sub Constant:i64<0>, t124
 ... into: t508: i64 = sub Constant:i64<0>, t124

Combining: t127: ch = store<(store (s64) into %ir.22)> t121:1, t508, FrameIndex:i32<18>, undef:i32

Combining: t508: i64 = sub Constant:i64<0>, t124

Combining: t124: i64 = sign_extend t123

Combining: t123: i32 = mul nsw t121, Constant:i32<16>
Creating constant: t509: i32 = Constant<27>
Creating constant: t510: i32 = Constant<31>
Creating new node: t511: i32 = shl t121, Constant:i32<4>
 ... into: t511: i32 = shl t121, Constant:i32<4>

Combining: t124: i64 = sign_extend t511

Combining: t511: i32 = shl t121, Constant:i32<4>

Combining: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t120, FrameIndex:i32<2>, undef:i32

Combining: t120: ch = store<(store (s64) into %ir.21)> t114:1, t118, FrameIndex:i32<17>, undef:i32

Combining: t119: i32 = FrameIndex<17>

Combining: t118: i64 = mul nsw t117, Constant:i64<-1>
Creating new node: t512: i64 = sub Constant:i64<0>, t117
 ... into: t512: i64 = sub Constant:i64<0>, t117

Combining: t120: ch = store<(store (s64) into %ir.21)> t114:1, t512, FrameIndex:i32<17>, undef:i32

Combining: t512: i64 = sub Constant:i64<0>, t117

Combining: t117: i64 = sign_extend t116

Combining: t116: i32 = mul nsw t114, Constant:i32<15>

Combining: t115: i32 = Constant<15>

Combining: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t113, FrameIndex:i32<2>, undef:i32

Combining: t113: ch = store<(store (s64) into %ir.20)> t107:1, t111, FrameIndex:i32<16>, undef:i32

Combining: t112: i32 = FrameIndex<16>

Combining: t111: i64 = mul nsw t110, Constant:i64<-1>
Creating new node: t513: i64 = sub Constant:i64<0>, t110
 ... into: t513: i64 = sub Constant:i64<0>, t110

Combining: t113: ch = store<(store (s64) into %ir.20)> t107:1, t513, FrameIndex:i32<16>, undef:i32

Combining: t513: i64 = sub Constant:i64<0>, t110

Combining: t110: i64 = sign_extend t109

Combining: t109: i32 = mul nsw t107, Constant:i32<14>

Combining: t108: i32 = Constant<14>

Combining: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t106, FrameIndex:i32<2>, undef:i32

Combining: t106: ch = store<(store (s64) into %ir.19)> t100:1, t104, FrameIndex:i32<15>, undef:i32

Combining: t105: i32 = FrameIndex<15>

Combining: t104: i64 = mul nsw t103, Constant:i64<-1>
Creating new node: t514: i64 = sub Constant:i64<0>, t103
 ... into: t514: i64 = sub Constant:i64<0>, t103

Combining: t106: ch = store<(store (s64) into %ir.19)> t100:1, t514, FrameIndex:i32<15>, undef:i32

Combining: t514: i64 = sub Constant:i64<0>, t103

Combining: t103: i64 = sign_extend t102

Combining: t102: i32 = mul nsw t100, Constant:i32<13>

Combining: t101: i32 = Constant<13>

Combining: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t99, FrameIndex:i32<2>, undef:i32

Combining: t99: ch = store<(store (s64) into %ir.18)> t93:1, t97, FrameIndex:i32<14>, undef:i32

Combining: t98: i32 = FrameIndex<14>

Combining: t97: i64 = mul nsw t96, Constant:i64<-1>
Creating new node: t515: i64 = sub Constant:i64<0>, t96
 ... into: t515: i64 = sub Constant:i64<0>, t96

Combining: t99: ch = store<(store (s64) into %ir.18)> t93:1, t515, FrameIndex:i32<14>, undef:i32

Combining: t515: i64 = sub Constant:i64<0>, t96

Combining: t96: i64 = sign_extend t95

Combining: t95: i32 = mul nsw t93, Constant:i32<12>

Combining: t94: i32 = Constant<12>

Combining: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t92, FrameIndex:i32<2>, undef:i32

Combining: t92: ch = store<(store (s64) into %ir.17)> t86:1, t90, FrameIndex:i32<13>, undef:i32

Combining: t91: i32 = FrameIndex<13>

Combining: t90: i64 = mul nsw t89, Constant:i64<-1>
Creating new node: t516: i64 = sub Constant:i64<0>, t89
 ... into: t516: i64 = sub Constant:i64<0>, t89

Combining: t92: ch = store<(store (s64) into %ir.17)> t86:1, t516, FrameIndex:i32<13>, undef:i32

Combining: t516: i64 = sub Constant:i64<0>, t89

Combining: t89: i64 = sign_extend t88

Combining: t88: i32 = mul nsw t86, Constant:i32<11>

Combining: t87: i32 = Constant<11>

Combining: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t85, FrameIndex:i32<2>, undef:i32

Combining: t85: ch = store<(store (s64) into %ir.16)> t79:1, t83, FrameIndex:i32<12>, undef:i32

Combining: t84: i32 = FrameIndex<12>

Combining: t83: i64 = mul nsw t82, Constant:i64<-1>
Creating new node: t517: i64 = sub Constant:i64<0>, t82
 ... into: t517: i64 = sub Constant:i64<0>, t82

Combining: t85: ch = store<(store (s64) into %ir.16)> t79:1, t517, FrameIndex:i32<12>, undef:i32

Combining: t517: i64 = sub Constant:i64<0>, t82

Combining: t82: i64 = sign_extend t81

Combining: t81: i32 = mul nsw t79, Constant:i32<10>

Combining: t80: i32 = Constant<10>

Combining: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t78, FrameIndex:i32<2>, undef:i32

Combining: t78: ch = store<(store (s64) into %ir.15)> t72:1, t76, FrameIndex:i32<11>, undef:i32

Combining: t77: i32 = FrameIndex<11>

Combining: t76: i64 = mul nsw t75, Constant:i64<-1>
Creating new node: t518: i64 = sub Constant:i64<0>, t75
 ... into: t518: i64 = sub Constant:i64<0>, t75

Combining: t78: ch = store<(store (s64) into %ir.15)> t72:1, t518, FrameIndex:i32<11>, undef:i32

Combining: t518: i64 = sub Constant:i64<0>, t75

Combining: t75: i64 = sign_extend t74

Combining: t74: i32 = mul nsw t72, Constant:i32<9>

Combining: t73: i32 = Constant<9>

Combining: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t71, FrameIndex:i32<2>, undef:i32

Combining: t71: ch = store<(store (s64) into %ir.14)> t65:1, t69, FrameIndex:i32<10>, undef:i32

Combining: t70: i32 = FrameIndex<10>

Combining: t69: i64 = mul nsw t68, Constant:i64<-1>
Creating new node: t519: i64 = sub Constant:i64<0>, t68
 ... into: t519: i64 = sub Constant:i64<0>, t68

Combining: t71: ch = store<(store (s64) into %ir.14)> t65:1, t519, FrameIndex:i32<10>, undef:i32

Combining: t519: i64 = sub Constant:i64<0>, t68

Combining: t68: i64 = sign_extend t67

Combining: t67: i32 = mul nsw t65, Constant:i32<8>
Creating constant: t520: i32 = Constant<28>
Creating constant: t521: i32 = Constant<31>
Creating new node: t522: i32 = shl t65, Constant:i32<3>
 ... into: t522: i32 = shl t65, Constant:i32<3>

Combining: t68: i64 = sign_extend t522

Combining: t522: i32 = shl t65, Constant:i32<3>

Combining: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t64, FrameIndex:i32<2>, undef:i32

Combining: t64: ch = store<(store (s64) into %ir.13)> t58:1, t62, FrameIndex:i32<9>, undef:i32

Combining: t63: i32 = FrameIndex<9>

Combining: t62: i64 = mul nsw t61, Constant:i64<-1>
Creating new node: t523: i64 = sub Constant:i64<0>, t61
 ... into: t523: i64 = sub Constant:i64<0>, t61

Combining: t64: ch = store<(store (s64) into %ir.13)> t58:1, t523, FrameIndex:i32<9>, undef:i32

Combining: t523: i64 = sub Constant:i64<0>, t61

Combining: t61: i64 = sign_extend t60

Combining: t60: i32 = mul nsw t58, Constant:i32<7>

Combining: t59: i32 = Constant<7>

Combining: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t57, FrameIndex:i32<2>, undef:i32

Combining: t57: ch = store<(store (s64) into %ir.12)> t51:1, t55, FrameIndex:i32<8>, undef:i32

Combining: t56: i32 = FrameIndex<8>

Combining: t55: i64 = mul nsw t54, Constant:i64<-1>
Creating new node: t524: i64 = sub Constant:i64<0>, t54
 ... into: t524: i64 = sub Constant:i64<0>, t54

Combining: t57: ch = store<(store (s64) into %ir.12)> t51:1, t524, FrameIndex:i32<8>, undef:i32

Combining: t524: i64 = sub Constant:i64<0>, t54

Combining: t54: i64 = sign_extend t53

Combining: t53: i32 = mul nsw t51, Constant:i32<6>

Combining: t52: i32 = Constant<6>

Combining: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t50, FrameIndex:i32<2>, undef:i32

Combining: t50: ch = store<(store (s64) into %ir.11)> t44:1, t48, FrameIndex:i32<7>, undef:i32

Combining: t49: i32 = FrameIndex<7>

Combining: t48: i64 = mul nsw t47, Constant:i64<-1>
Creating new node: t525: i64 = sub Constant:i64<0>, t47
 ... into: t525: i64 = sub Constant:i64<0>, t47

Combining: t50: ch = store<(store (s64) into %ir.11)> t44:1, t525, FrameIndex:i32<7>, undef:i32

Combining: t525: i64 = sub Constant:i64<0>, t47

Combining: t47: i64 = sign_extend t46

Combining: t46: i32 = mul nsw t44, Constant:i32<5>

Combining: t45: i32 = Constant<5>

Combining: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t43, FrameIndex:i32<2>, undef:i32

Combining: t43: ch = store<(store (s64) into %ir.10)> t37:1, t41, FrameIndex:i32<6>, undef:i32

Combining: t42: i32 = FrameIndex<6>

Combining: t41: i64 = mul nsw t40, Constant:i64<-1>
Creating new node: t526: i64 = sub Constant:i64<0>, t40
 ... into: t526: i64 = sub Constant:i64<0>, t40

Combining: t43: ch = store<(store (s64) into %ir.10)> t37:1, t526, FrameIndex:i32<6>, undef:i32

Combining: t526: i64 = sub Constant:i64<0>, t40

Combining: t40: i64 = sign_extend t39

Combining: t39: i32 = mul nsw t37, Constant:i32<4>
Creating constant: t527: i32 = Constant<29>
Creating constant: t528: i32 = Constant<31>
Creating new node: t529: i32 = shl t37, Constant:i32<2>
 ... into: t529: i32 = shl t37, Constant:i32<2>

Combining: t40: i64 = sign_extend t529

Combining: t529: i32 = shl t37, Constant:i32<2>

Combining: t38: i32 = Constant<4>

Combining: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t36, FrameIndex:i32<2>, undef:i32

Combining: t36: ch = store<(store (s64) into %ir.9)> t30:1, t34, FrameIndex:i32<5>, undef:i32

Combining: t35: i32 = FrameIndex<5>

Combining: t34: i64 = mul nsw t33, Constant:i64<-1>
Creating new node: t530: i64 = sub Constant:i64<0>, t33
 ... into: t530: i64 = sub Constant:i64<0>, t33

Combining: t36: ch = store<(store (s64) into %ir.9)> t30:1, t530, FrameIndex:i32<5>, undef:i32

Combining: t530: i64 = sub Constant:i64<0>, t33

Combining: t33: i64 = sign_extend t32

Combining: t32: i32 = mul nsw t30, Constant:i32<3>

Combining: t31: i32 = Constant<3>

Combining: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t29, FrameIndex:i32<2>, undef:i32

Combining: t29: ch = store<(store (s64) into %ir.8)> t23:1, t27, FrameIndex:i32<4>, undef:i32

Combining: t28: i32 = FrameIndex<4>

Combining: t27: i64 = mul nsw t26, Constant:i64<-1>
Creating new node: t531: i64 = sub Constant:i64<0>, t26
 ... into: t531: i64 = sub Constant:i64<0>, t26

Combining: t29: ch = store<(store (s64) into %ir.8)> t23:1, t531, FrameIndex:i32<4>, undef:i32

Combining: t531: i64 = sub Constant:i64<0>, t26

Combining: t26: i64 = sign_extend t25

Combining: t25: i32 = mul nsw t23, Constant:i32<2>
Creating constant: t532: i32 = Constant<30>
Creating constant: t533: i32 = Constant<31>
Creating new node: t534: i32 = shl t23, Constant:i32<1>
 ... into: t534: i32 = shl t23, Constant:i32<1>

Combining: t26: i64 = sign_extend t534

Combining: t534: i32 = shl t23, Constant:i32<1>

Combining: t24: i32 = Constant<2>

Combining: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t22, FrameIndex:i32<2>, undef:i32

Combining: t22: ch = store<(store (s64) into %ir.7)> t15:1, t20, FrameIndex:i32<3>, undef:i32

Combining: t21: i32 = FrameIndex<3>

Combining: t20: i64 = mul nsw t18, Constant:i64<-1>
Creating new node: t535: i64 = sub Constant:i64<0>, t18
 ... into: t535: i64 = sub Constant:i64<0>, t18

Combining: t22: ch = store<(store (s64) into %ir.7)> t15:1, t535, FrameIndex:i32<3>, undef:i32

Combining: t535: i64 = sub Constant:i64<0>, t18

Combining: t19: i64 = Constant<-1>

Combining: t18: i64 = sign_extend t17

Combining: t17: i32 = mul nsw t15, Constant:i32<1>
 ... into: t15: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32

Combining: t22: ch = store<(store (s64) into %ir.7)> t15:1, t535, FrameIndex:i32<3>, undef:i32

Combining: t18: i64 = sign_extend t15
Creating new node: t536: i64,ch = load<(dereferenceable load (s32) from %ir.6), sext from i32> t14, FrameIndex:i32<2>, undef:i32

Replacing.1 t18: i64 = sign_extend t15

With: t536: i64,ch = load<(dereferenceable load (s32) from %ir.6), sext from i32> t14, FrameIndex:i32<2>, undef:i32
 and 0 other values

Combining: t536: i64,ch = load<(dereferenceable load (s32) from %ir.6), sext from i32> t14, FrameIndex:i32<2>, undef:i32

Combining: t535: i64 = sub Constant:i64<0>, t536

Combining: t16: i32 = Constant<1>

Combining: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32

Combining: t13: i32 = FrameIndex<2>

Combining: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32

Combining: t11: i32 = FrameIndex<1>

Combining: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32

Combining: t9: i32 = undef

Combining: t8: i32 = Constant<0>

Combining: t7: i32 = FrameIndex<0>

Combining: t6: i32,ch = CopyFromReg t0, Register:i32 %2

Combining: t5: i32 = Register %2

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %1

Combining: t3: i32 = Register %1

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %0

Combining: t1: i32 = Register %0

Combining: t0: ch,glue = EntryToken
Optimized lowered selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 475 nodes:
  t0: ch,glue = EntryToken
      t535: i64 = sub Constant:i64<0>, t536
    t22: ch = store<(store (s64) into %ir.7)> t536:1, t535, FrameIndex:i32<3>, undef:i32
  t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t22, FrameIndex:i32<2>, undef:i32
          t534: i32 = shl t23, Constant:i32<1>
        t26: i64 = sign_extend t534
      t531: i64 = sub Constant:i64<0>, t26
    t29: ch = store<(store (s64) into %ir.8)> t23:1, t531, FrameIndex:i32<4>, undef:i32
  t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t29, FrameIndex:i32<2>, undef:i32
          t32: i32 = mul nsw t30, Constant:i32<3>
        t33: i64 = sign_extend t32
      t530: i64 = sub Constant:i64<0>, t33
    t36: ch = store<(store (s64) into %ir.9)> t30:1, t530, FrameIndex:i32<5>, undef:i32
  t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t36, FrameIndex:i32<2>, undef:i32
          t529: i32 = shl t37, Constant:i32<2>
        t40: i64 = sign_extend t529
      t526: i64 = sub Constant:i64<0>, t40
    t43: ch = store<(store (s64) into %ir.10)> t37:1, t526, FrameIndex:i32<6>, undef:i32
  t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t43, FrameIndex:i32<2>, undef:i32
          t46: i32 = mul nsw t44, Constant:i32<5>
        t47: i64 = sign_extend t46
      t525: i64 = sub Constant:i64<0>, t47
    t50: ch = store<(store (s64) into %ir.11)> t44:1, t525, FrameIndex:i32<7>, undef:i32
  t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t50, FrameIndex:i32<2>, undef:i32
          t53: i32 = mul nsw t51, Constant:i32<6>
        t54: i64 = sign_extend t53
      t524: i64 = sub Constant:i64<0>, t54
    t57: ch = store<(store (s64) into %ir.12)> t51:1, t524, FrameIndex:i32<8>, undef:i32
  t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t57, FrameIndex:i32<2>, undef:i32
          t60: i32 = mul nsw t58, Constant:i32<7>
        t61: i64 = sign_extend t60
      t523: i64 = sub Constant:i64<0>, t61
    t64: ch = store<(store (s64) into %ir.13)> t58:1, t523, FrameIndex:i32<9>, undef:i32
  t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t64, FrameIndex:i32<2>, undef:i32
          t522: i32 = shl t65, Constant:i32<3>
        t68: i64 = sign_extend t522
      t519: i64 = sub Constant:i64<0>, t68
    t71: ch = store<(store (s64) into %ir.14)> t65:1, t519, FrameIndex:i32<10>, undef:i32
  t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t71, FrameIndex:i32<2>, undef:i32
          t74: i32 = mul nsw t72, Constant:i32<9>
        t75: i64 = sign_extend t74
      t518: i64 = sub Constant:i64<0>, t75
    t78: ch = store<(store (s64) into %ir.15)> t72:1, t518, FrameIndex:i32<11>, undef:i32
  t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t78, FrameIndex:i32<2>, undef:i32
          t81: i32 = mul nsw t79, Constant:i32<10>
        t82: i64 = sign_extend t81
      t517: i64 = sub Constant:i64<0>, t82
    t85: ch = store<(store (s64) into %ir.16)> t79:1, t517, FrameIndex:i32<12>, undef:i32
  t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t85, FrameIndex:i32<2>, undef:i32
          t88: i32 = mul nsw t86, Constant:i32<11>
        t89: i64 = sign_extend t88
      t516: i64 = sub Constant:i64<0>, t89
    t92: ch = store<(store (s64) into %ir.17)> t86:1, t516, FrameIndex:i32<13>, undef:i32
  t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t92, FrameIndex:i32<2>, undef:i32
          t95: i32 = mul nsw t93, Constant:i32<12>
        t96: i64 = sign_extend t95
      t515: i64 = sub Constant:i64<0>, t96
    t99: ch = store<(store (s64) into %ir.18)> t93:1, t515, FrameIndex:i32<14>, undef:i32
  t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t99, FrameIndex:i32<2>, undef:i32
          t102: i32 = mul nsw t100, Constant:i32<13>
        t103: i64 = sign_extend t102
      t514: i64 = sub Constant:i64<0>, t103
    t106: ch = store<(store (s64) into %ir.19)> t100:1, t514, FrameIndex:i32<15>, undef:i32
  t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t106, FrameIndex:i32<2>, undef:i32
          t109: i32 = mul nsw t107, Constant:i32<14>
        t110: i64 = sign_extend t109
      t513: i64 = sub Constant:i64<0>, t110
    t113: ch = store<(store (s64) into %ir.20)> t107:1, t513, FrameIndex:i32<16>, undef:i32
  t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t113, FrameIndex:i32<2>, undef:i32
          t116: i32 = mul nsw t114, Constant:i32<15>
        t117: i64 = sign_extend t116
      t512: i64 = sub Constant:i64<0>, t117
    t120: ch = store<(store (s64) into %ir.21)> t114:1, t512, FrameIndex:i32<17>, undef:i32
  t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t120, FrameIndex:i32<2>, undef:i32
          t511: i32 = shl t121, Constant:i32<4>
        t124: i64 = sign_extend t511
      t508: i64 = sub Constant:i64<0>, t124
    t127: ch = store<(store (s64) into %ir.22)> t121:1, t508, FrameIndex:i32<18>, undef:i32
  t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t127, FrameIndex:i32<2>, undef:i32
          t130: i32 = mul nsw t128, Constant:i32<17>
        t131: i64 = sign_extend t130
      t507: i64 = sub Constant:i64<0>, t131
    t134: ch = store<(store (s64) into %ir.23)> t128:1, t507, FrameIndex:i32<19>, undef:i32
  t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t134, FrameIndex:i32<2>, undef:i32
          t137: i32 = mul nsw t135, Constant:i32<18>
        t138: i64 = sign_extend t137
      t506: i64 = sub Constant:i64<0>, t138
    t141: ch = store<(store (s64) into %ir.24)> t135:1, t506, FrameIndex:i32<20>, undef:i32
  t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t141, FrameIndex:i32<2>, undef:i32
          t144: i32 = mul nsw t142, Constant:i32<19>
        t145: i64 = sign_extend t144
      t505: i64 = sub Constant:i64<0>, t145
    t148: ch = store<(store (s64) into %ir.25)> t142:1, t505, FrameIndex:i32<21>, undef:i32
  t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t148, FrameIndex:i32<2>, undef:i32
          t151: i32 = mul nsw t149, Constant:i32<20>
        t152: i64 = sign_extend t151
      t504: i64 = sub Constant:i64<0>, t152
    t155: ch = store<(store (s64) into %ir.26)> t149:1, t504, FrameIndex:i32<22>, undef:i32
  t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t155, FrameIndex:i32<2>, undef:i32
        t158: i32 = mul nsw t156, Constant:i32<21>
      t159: i64 = sign_extend t158
    t503: i64 = sub Constant:i64<0>, t159
  t162: ch = store<(store (s64) into %ir.27)> t156:1, t503, FrameIndex:i32<23>, undef:i32
  t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t162, FrameIndex:i32<0>, undef:i32
  t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t162, FrameIndex:i32<1>, undef:i32
  t167: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t162, FrameIndex:i32<3>, undef:i32
  t168: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t162, FrameIndex:i32<4>, undef:i32
  t170: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t162, FrameIndex:i32<5>, undef:i32
  t172: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t162, FrameIndex:i32<6>, undef:i32
  t174: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t162, FrameIndex:i32<7>, undef:i32
  t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t162, FrameIndex:i32<8>, undef:i32
  t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t162, FrameIndex:i32<9>, undef:i32
  t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t162, FrameIndex:i32<10>, undef:i32
  t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t162, FrameIndex:i32<11>, undef:i32
  t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t162, FrameIndex:i32<12>, undef:i32
  t184: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t162, FrameIndex:i32<13>, undef:i32
  t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t162, FrameIndex:i32<14>, undef:i32
  t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t162, FrameIndex:i32<15>, undef:i32
  t192: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t162, FrameIndex:i32<16>, undef:i32
  t193: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t162, FrameIndex:i32<17>, undef:i32
  t194: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t162, FrameIndex:i32<18>, undef:i32
  t196: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t162, FrameIndex:i32<19>, undef:i32
  t198: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t162, FrameIndex:i32<20>, undef:i32
  t199: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t162, FrameIndex:i32<21>, undef:i32
  t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t162, FrameIndex:i32<22>, undef:i32
  t205: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t162, FrameIndex:i32<23>, undef:i32
      t212: ch = TokenFactor t163:1, t164:1, t167:1, t168:1, t170:1, t172:1, t174:1, t175:1, t176:1, t178:1, t181:1, t182:1, t184:1, t187:1, t188:1, t192:1, t193:1, t194:1, t196:1, t198:1, t199:1, t204:1, t205:1
            t165: i32 = add nsw t163, t164
          t501: i64 = any_extend t165
                    t169: i64 = and t167, t168
                  t171: i64 = or t169, t170
                t173: i64 = or t171, t172
                        t177: i64 = sdiv t175, t176
                      t179: i64 = srem t177, t178
                    t180: i64 = add nsw t174, t179
                      t183: i64 = srem t181, t182
                    t185: i64 = add nsw t183, t184
                  t186: i64 = and t180, t185
                  t189: i64 = mul nsw t187, t188
                t190: i64 = and t186, t189
              t191: i64 = or t173, t190
                    t195: i64 = sub nsw t193, t194
                  t197: i64 = sub nsw t195, t196
                  t200: i64 = add nsw t198, t199
                t201: i64 = and t197, t200
              t202: i64 = xor t192, t201
            t203: i64 = or t191, t202
              t206: i64 = xor t205, Constant:i64<-1>
            t207: i64 = srem t204, t206
          t208: i64 = or t203, t207
        t209: i64 = mul t501, t208
      t210: i32 = truncate t209
    t213: ch = store<(store (s32) into %ir.28)> t212, t210, FrameIndex:i32<24>, undef:i32
  t214: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t213, FrameIndex:i32<3>, undef:i32
  t216: i64 = add nsw t214, Constant:i64<1>
      t217: ch = store<(store (s64) into %ir.7)> t214:1, t216, FrameIndex:i32<3>, undef:i32
    t223: ch,glue = callseq_start t217, TargetConstant:i32<0>, TargetConstant:i32<0>
  t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t221: i32 = extract_element t216, Constant:i32<0>
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t221, t227:1
    t220: i32 = extract_element t216, Constant:i32<1>
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t220, t229:1
  t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
  t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
    t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
  t238: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t237:1, FrameIndex:i32<4>, undef:i32
  t239: i64 = add nsw t238, Constant:i64<1>
      t240: ch = store<(store (s64) into %ir.8)> t238:1, t239, FrameIndex:i32<4>, undef:i32
    t243: ch,glue = callseq_start t240, TargetConstant:i32<0>, TargetConstant:i32<0>
  t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t242: i32 = extract_element t239, Constant:i32<0>
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t242, t245:1
    t241: i32 = extract_element t239, Constant:i32<1>
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t241, t246:1
  t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
  t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
    t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
  t251: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t250:1, FrameIndex:i32<5>, undef:i32
  t252: i64 = add nsw t251, Constant:i64<1>
      t253: ch = store<(store (s64) into %ir.9)> t251:1, t252, FrameIndex:i32<5>, undef:i32
    t256: ch,glue = callseq_start t253, TargetConstant:i32<0>, TargetConstant:i32<0>
  t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t255: i32 = extract_element t252, Constant:i32<0>
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t255, t258:1
    t254: i32 = extract_element t252, Constant:i32<1>
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t254, t259:1
  t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
  t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
    t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
  t264: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t263:1, FrameIndex:i32<6>, undef:i32
  t265: i64 = add nsw t264, Constant:i64<1>
      t266: ch = store<(store (s64) into %ir.10)> t264:1, t265, FrameIndex:i32<6>, undef:i32
    t269: ch,glue = callseq_start t266, TargetConstant:i32<0>, TargetConstant:i32<0>
  t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t268: i32 = extract_element t265, Constant:i32<0>
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t268, t271:1
    t267: i32 = extract_element t265, Constant:i32<1>
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t267, t272:1
  t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
  t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
    t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
  t277: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t276:1, FrameIndex:i32<7>, undef:i32
  t278: i64 = add nsw t277, Constant:i64<1>
      t279: ch = store<(store (s64) into %ir.11)> t277:1, t278, FrameIndex:i32<7>, undef:i32
    t282: ch,glue = callseq_start t279, TargetConstant:i32<0>, TargetConstant:i32<0>
  t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t281: i32 = extract_element t278, Constant:i32<0>
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t281, t284:1
    t280: i32 = extract_element t278, Constant:i32<1>
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t280, t285:1
  t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
  t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
    t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
  t290: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t289:1, FrameIndex:i32<8>, undef:i32
  t291: i64 = add nsw t290, Constant:i64<1>
      t292: ch = store<(store (s64) into %ir.12)> t290:1, t291, FrameIndex:i32<8>, undef:i32
    t295: ch,glue = callseq_start t292, TargetConstant:i32<0>, TargetConstant:i32<0>
  t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t294: i32 = extract_element t291, Constant:i32<0>
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t294, t297:1
    t293: i32 = extract_element t291, Constant:i32<1>
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t293, t298:1
  t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
  t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
    t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
  t303: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t302:1, FrameIndex:i32<9>, undef:i32
  t304: i64 = add nsw t303, Constant:i64<1>
      t305: ch = store<(store (s64) into %ir.13)> t303:1, t304, FrameIndex:i32<9>, undef:i32
    t308: ch,glue = callseq_start t305, TargetConstant:i32<0>, TargetConstant:i32<0>
  t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t307: i32 = extract_element t304, Constant:i32<0>
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t307, t310:1
    t306: i32 = extract_element t304, Constant:i32<1>
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t306, t311:1
  t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
  t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
    t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
  t316: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t315:1, FrameIndex:i32<10>, undef:i32
  t317: i64 = add nsw t316, Constant:i64<1>
      t318: ch = store<(store (s64) into %ir.14)> t316:1, t317, FrameIndex:i32<10>, undef:i32
    t321: ch,glue = callseq_start t318, TargetConstant:i32<0>, TargetConstant:i32<0>
  t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t320: i32 = extract_element t317, Constant:i32<0>
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t320, t323:1
    t319: i32 = extract_element t317, Constant:i32<1>
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t319, t324:1
  t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
  t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
    t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
  t329: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t328:1, FrameIndex:i32<11>, undef:i32
  t330: i64 = add nsw t329, Constant:i64<1>
      t331: ch = store<(store (s64) into %ir.15)> t329:1, t330, FrameIndex:i32<11>, undef:i32
    t334: ch,glue = callseq_start t331, TargetConstant:i32<0>, TargetConstant:i32<0>
  t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t333: i32 = extract_element t330, Constant:i32<0>
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t333, t336:1
    t332: i32 = extract_element t330, Constant:i32<1>
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t332, t337:1
  t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
  t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
    t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
  t342: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t341:1, FrameIndex:i32<12>, undef:i32
  t343: i64 = add nsw t342, Constant:i64<1>
      t344: ch = store<(store (s64) into %ir.16)> t342:1, t343, FrameIndex:i32<12>, undef:i32
    t347: ch,glue = callseq_start t344, TargetConstant:i32<0>, TargetConstant:i32<0>
  t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t346: i32 = extract_element t343, Constant:i32<0>
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t346, t349:1
    t345: i32 = extract_element t343, Constant:i32<1>
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t345, t350:1
  t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
  t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
    t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
  t355: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t354:1, FrameIndex:i32<13>, undef:i32
  t356: i64 = add nsw t355, Constant:i64<1>
      t357: ch = store<(store (s64) into %ir.17)> t355:1, t356, FrameIndex:i32<13>, undef:i32
    t360: ch,glue = callseq_start t357, TargetConstant:i32<0>, TargetConstant:i32<0>
  t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t359: i32 = extract_element t356, Constant:i32<0>
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t359, t362:1
    t358: i32 = extract_element t356, Constant:i32<1>
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t358, t363:1
  t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
  t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
    t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
  t368: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t367:1, FrameIndex:i32<14>, undef:i32
  t369: i64 = add nsw t368, Constant:i64<1>
      t370: ch = store<(store (s64) into %ir.18)> t368:1, t369, FrameIndex:i32<14>, undef:i32
    t373: ch,glue = callseq_start t370, TargetConstant:i32<0>, TargetConstant:i32<0>
  t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t372: i32 = extract_element t369, Constant:i32<0>
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t372, t375:1
    t371: i32 = extract_element t369, Constant:i32<1>
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t371, t376:1
  t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
  t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
    t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
  t381: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t380:1, FrameIndex:i32<15>, undef:i32
  t382: i64 = add nsw t381, Constant:i64<1>
      t383: ch = store<(store (s64) into %ir.19)> t381:1, t382, FrameIndex:i32<15>, undef:i32
    t386: ch,glue = callseq_start t383, TargetConstant:i32<0>, TargetConstant:i32<0>
  t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t385: i32 = extract_element t382, Constant:i32<0>
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t385, t388:1
    t384: i32 = extract_element t382, Constant:i32<1>
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t384, t389:1
  t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
  t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
    t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
  t394: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t393:1, FrameIndex:i32<16>, undef:i32
  t395: i64 = add nsw t394, Constant:i64<1>
      t396: ch = store<(store (s64) into %ir.20)> t394:1, t395, FrameIndex:i32<16>, undef:i32
    t399: ch,glue = callseq_start t396, TargetConstant:i32<0>, TargetConstant:i32<0>
  t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t398: i32 = extract_element t395, Constant:i32<0>
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t398, t401:1
    t397: i32 = extract_element t395, Constant:i32<1>
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t397, t402:1
  t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
  t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
    t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
  t407: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t406:1, FrameIndex:i32<17>, undef:i32
  t408: i64 = add nsw t407, Constant:i64<1>
      t409: ch = store<(store (s64) into %ir.21)> t407:1, t408, FrameIndex:i32<17>, undef:i32
    t412: ch,glue = callseq_start t409, TargetConstant:i32<0>, TargetConstant:i32<0>
  t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t411: i32 = extract_element t408, Constant:i32<0>
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t411, t414:1
    t410: i32 = extract_element t408, Constant:i32<1>
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t410, t415:1
  t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
  t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
    t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
  t420: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t419:1, FrameIndex:i32<18>, undef:i32
  t421: i64 = add nsw t420, Constant:i64<1>
      t422: ch = store<(store (s64) into %ir.22)> t420:1, t421, FrameIndex:i32<18>, undef:i32
    t425: ch,glue = callseq_start t422, TargetConstant:i32<0>, TargetConstant:i32<0>
  t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t424: i32 = extract_element t421, Constant:i32<0>
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t424, t427:1
    t423: i32 = extract_element t421, Constant:i32<1>
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t423, t428:1
  t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
  t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
    t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
  t433: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t432:1, FrameIndex:i32<19>, undef:i32
  t434: i64 = add nsw t433, Constant:i64<1>
      t435: ch = store<(store (s64) into %ir.23)> t433:1, t434, FrameIndex:i32<19>, undef:i32
    t438: ch,glue = callseq_start t435, TargetConstant:i32<0>, TargetConstant:i32<0>
  t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t437: i32 = extract_element t434, Constant:i32<0>
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t437, t440:1
    t436: i32 = extract_element t434, Constant:i32<1>
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t436, t441:1
  t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
  t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
    t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
  t446: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t445:1, FrameIndex:i32<20>, undef:i32
  t447: i64 = add nsw t446, Constant:i64<1>
      t448: ch = store<(store (s64) into %ir.24)> t446:1, t447, FrameIndex:i32<20>, undef:i32
    t451: ch,glue = callseq_start t448, TargetConstant:i32<0>, TargetConstant:i32<0>
  t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t450: i32 = extract_element t447, Constant:i32<0>
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t450, t453:1
    t449: i32 = extract_element t447, Constant:i32<1>
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t449, t454:1
  t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
  t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
    t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
  t459: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t458:1, FrameIndex:i32<21>, undef:i32
  t460: i64 = add nsw t459, Constant:i64<1>
      t461: ch = store<(store (s64) into %ir.25)> t459:1, t460, FrameIndex:i32<21>, undef:i32
    t464: ch,glue = callseq_start t461, TargetConstant:i32<0>, TargetConstant:i32<0>
  t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t463: i32 = extract_element t460, Constant:i32<0>
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t463, t466:1
    t462: i32 = extract_element t460, Constant:i32<1>
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t462, t467:1
  t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
  t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
    t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
  t472: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t471:1, FrameIndex:i32<22>, undef:i32
  t473: i64 = add nsw t472, Constant:i64<1>
      t474: ch = store<(store (s64) into %ir.26)> t472:1, t473, FrameIndex:i32<22>, undef:i32
    t477: ch,glue = callseq_start t474, TargetConstant:i32<0>, TargetConstant:i32<0>
  t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t476: i32 = extract_element t473, Constant:i32<0>
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t476, t479:1
    t475: i32 = extract_element t473, Constant:i32<1>
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t475, t480:1
  t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
  t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
    t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
  t485: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t484:1, FrameIndex:i32<23>, undef:i32
  t486: i64 = add nsw t485, Constant:i64<1>
      t487: ch = store<(store (s64) into %ir.27)> t485:1, t486, FrameIndex:i32<23>, undef:i32
    t490: ch,glue = callseq_start t487, TargetConstant:i32<0>, TargetConstant:i32<0>
  t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
    t489: i32 = extract_element t486, Constant:i32<0>
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t489, t492:1
    t488: i32 = extract_element t486, Constant:i32<1>
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t488, t493:1
  t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
  t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
  t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
    t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
  t536: i64,ch = load<(dereferenceable load (s32) from %ir.6), sext from i32> t14, FrameIndex:i32<2>, undef:i32
  t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1


Legalizing node: t502: i64 = Constant<0>
Analyzing result type: i64
Expand integer result: t502: i64 = Constant<0>

Legalizing node: t235: i32 = TargetConstant<-1>
Ignoring node results
Legally typed node: t235: i32 = TargetConstant<-1>

Legalizing node: t233: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t233: Untyped = RegisterMask

Legalizing node: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Analyzing result type: i32
Legal result type
Legally typed node: t232: i32 = TargetGlobalAddress<ptr @printf> 0

Legalizing node: t230: i32 = Register $r3
Ignoring node results
Legally typed node: t230: i32 = Register $r3

Legalizing node: t228: i32 = Register $r2
Ignoring node results
Legally typed node: t228: i32 = Register $r2

Legalizing node: t226: i32 = Register $r0
Ignoring node results
Legally typed node: t226: i32 = Register $r0

Legalizing node: t222: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t222: i32 = TargetConstant<0>

Legalizing node: t219: i32 = GlobalAddress<ptr @.str> 0
Analyzing result type: i32
Legal result type
Legally typed node: t219: i32 = GlobalAddress<ptr @.str> 0

Legalizing node: t215: i64 = Constant<1>
Analyzing result type: i64
Expand integer result: t215: i64 = Constant<1>

Legalizing node: t211: i32 = FrameIndex<24>
Analyzing result type: i32
Legal result type
Legally typed node: t211: i32 = FrameIndex<24>

Legalizing node: t161: i32 = FrameIndex<23>
Analyzing result type: i32
Legal result type
Legally typed node: t161: i32 = FrameIndex<23>

Legalizing node: t157: i32 = Constant<21>
Analyzing result type: i32
Legal result type
Legally typed node: t157: i32 = Constant<21>

Legalizing node: t154: i32 = FrameIndex<22>
Analyzing result type: i32
Legal result type
Legally typed node: t154: i32 = FrameIndex<22>

Legalizing node: t150: i32 = Constant<20>
Analyzing result type: i32
Legal result type
Legally typed node: t150: i32 = Constant<20>

Legalizing node: t147: i32 = FrameIndex<21>
Analyzing result type: i32
Legal result type
Legally typed node: t147: i32 = FrameIndex<21>

Legalizing node: t143: i32 = Constant<19>
Analyzing result type: i32
Legal result type
Legally typed node: t143: i32 = Constant<19>

Legalizing node: t140: i32 = FrameIndex<20>
Analyzing result type: i32
Legal result type
Legally typed node: t140: i32 = FrameIndex<20>

Legalizing node: t136: i32 = Constant<18>
Analyzing result type: i32
Legal result type
Legally typed node: t136: i32 = Constant<18>

Legalizing node: t133: i32 = FrameIndex<19>
Analyzing result type: i32
Legal result type
Legally typed node: t133: i32 = FrameIndex<19>

Legalizing node: t129: i32 = Constant<17>
Analyzing result type: i32
Legal result type
Legally typed node: t129: i32 = Constant<17>

Legalizing node: t126: i32 = FrameIndex<18>
Analyzing result type: i32
Legal result type
Legally typed node: t126: i32 = FrameIndex<18>

Legalizing node: t119: i32 = FrameIndex<17>
Analyzing result type: i32
Legal result type
Legally typed node: t119: i32 = FrameIndex<17>

Legalizing node: t115: i32 = Constant<15>
Analyzing result type: i32
Legal result type
Legally typed node: t115: i32 = Constant<15>

Legalizing node: t112: i32 = FrameIndex<16>
Analyzing result type: i32
Legal result type
Legally typed node: t112: i32 = FrameIndex<16>

Legalizing node: t108: i32 = Constant<14>
Analyzing result type: i32
Legal result type
Legally typed node: t108: i32 = Constant<14>

Legalizing node: t105: i32 = FrameIndex<15>
Analyzing result type: i32
Legal result type
Legally typed node: t105: i32 = FrameIndex<15>

Legalizing node: t101: i32 = Constant<13>
Analyzing result type: i32
Legal result type
Legally typed node: t101: i32 = Constant<13>

Legalizing node: t98: i32 = FrameIndex<14>
Analyzing result type: i32
Legal result type
Legally typed node: t98: i32 = FrameIndex<14>

Legalizing node: t94: i32 = Constant<12>
Analyzing result type: i32
Legal result type
Legally typed node: t94: i32 = Constant<12>

Legalizing node: t91: i32 = FrameIndex<13>
Analyzing result type: i32
Legal result type
Legally typed node: t91: i32 = FrameIndex<13>

Legalizing node: t87: i32 = Constant<11>
Analyzing result type: i32
Legal result type
Legally typed node: t87: i32 = Constant<11>

Legalizing node: t84: i32 = FrameIndex<12>
Analyzing result type: i32
Legal result type
Legally typed node: t84: i32 = FrameIndex<12>

Legalizing node: t80: i32 = Constant<10>
Analyzing result type: i32
Legal result type
Legally typed node: t80: i32 = Constant<10>

Legalizing node: t77: i32 = FrameIndex<11>
Analyzing result type: i32
Legal result type
Legally typed node: t77: i32 = FrameIndex<11>

Legalizing node: t73: i32 = Constant<9>
Analyzing result type: i32
Legal result type
Legally typed node: t73: i32 = Constant<9>

Legalizing node: t70: i32 = FrameIndex<10>
Analyzing result type: i32
Legal result type
Legally typed node: t70: i32 = FrameIndex<10>

Legalizing node: t63: i32 = FrameIndex<9>
Analyzing result type: i32
Legal result type
Legally typed node: t63: i32 = FrameIndex<9>

Legalizing node: t59: i32 = Constant<7>
Analyzing result type: i32
Legal result type
Legally typed node: t59: i32 = Constant<7>

Legalizing node: t56: i32 = FrameIndex<8>
Analyzing result type: i32
Legal result type
Legally typed node: t56: i32 = FrameIndex<8>

Legalizing node: t52: i32 = Constant<6>
Analyzing result type: i32
Legal result type
Legally typed node: t52: i32 = Constant<6>

Legalizing node: t49: i32 = FrameIndex<7>
Analyzing result type: i32
Legal result type
Legally typed node: t49: i32 = FrameIndex<7>

Legalizing node: t45: i32 = Constant<5>
Analyzing result type: i32
Legal result type
Legally typed node: t45: i32 = Constant<5>

Legalizing node: t42: i32 = FrameIndex<6>
Analyzing result type: i32
Legal result type
Legally typed node: t42: i32 = FrameIndex<6>

Legalizing node: t38: i32 = Constant<4>
Analyzing result type: i32
Legal result type
Legally typed node: t38: i32 = Constant<4>

Legalizing node: t35: i32 = FrameIndex<5>
Analyzing result type: i32
Legal result type
Legally typed node: t35: i32 = FrameIndex<5>

Legalizing node: t31: i32 = Constant<3>
Analyzing result type: i32
Legal result type
Legally typed node: t31: i32 = Constant<3>

Legalizing node: t28: i32 = FrameIndex<4>
Analyzing result type: i32
Legal result type
Legally typed node: t28: i32 = FrameIndex<4>

Legalizing node: t24: i32 = Constant<2>
Analyzing result type: i32
Legal result type
Legally typed node: t24: i32 = Constant<2>

Legalizing node: t21: i32 = FrameIndex<3>
Analyzing result type: i32
Legal result type
Legally typed node: t21: i32 = FrameIndex<3>

Legalizing node: t19: i64 = Constant<-1>
Analyzing result type: i64
Expand integer result: t19: i64 = Constant<-1>

Creating constant: t537: i32 = Constant<-1>
Legalizing node: t537: i32 = Constant<-1>
Analyzing result type: i32
Legal result type
Legally typed node: t537: i32 = Constant<-1>

Legalizing node: t16: i32 = Constant<1>
Analyzing result type: i32
Legal result type
Legally typed node: t16: i32 = Constant<1>

Legalizing node: t13: i32 = FrameIndex<2>
Analyzing result type: i32
Legal result type
Legally typed node: t13: i32 = FrameIndex<2>

Legalizing node: t11: i32 = FrameIndex<1>
Analyzing result type: i32
Legal result type
Legally typed node: t11: i32 = FrameIndex<1>

Legalizing node: t9: i32 = undef
Analyzing result type: i32
Legal result type
Legally typed node: t9: i32 = undef

Legalizing node: t8: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t8: i32 = Constant<0>

Legalizing node: t7: i32 = FrameIndex<0>
Analyzing result type: i32
Legal result type
Legally typed node: t7: i32 = FrameIndex<0>

Legalizing node: t5: i32 = Register %2
Ignoring node results
Legally typed node: t5: i32 = Register %2

Legalizing node: t3: i32 = Register %1
Ignoring node results
Legally typed node: t3: i32 = Register %1

Legalizing node: t1: i32 = Register %0
Ignoring node results
Legally typed node: t1: i32 = Register %0

Legalizing node: t0: ch,glue = EntryToken
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Legally typed node: t0: ch,glue = EntryToken

Legalizing node: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %0

Legalizing node: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Analyzing operand: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Legal operand
Analyzing operand: t7: i32 = FrameIndex<0>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32

Legalizing node: t4: i32,ch = CopyFromReg t0, Register:i32 %1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t4: i32,ch = CopyFromReg t0, Register:i32 %1

Legalizing node: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
Legal operand
Analyzing operand: t4: i32,ch = CopyFromReg t0, Register:i32 %1
Legal operand
Analyzing operand: t11: i32 = FrameIndex<1>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32

Legalizing node: t6: i32,ch = CopyFromReg t0, Register:i32 %2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t6: i32,ch = CopyFromReg t0, Register:i32 %2

Legalizing node: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
Legal operand
Analyzing operand: t6: i32,ch = CopyFromReg t0, Register:i32 %2
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32

Legalizing node: t536: i64,ch = load<(dereferenceable load (s32) from %ir.6), sext from i32> t14, FrameIndex:i32<2>, undef:i32
Analyzing result type: i64
Expand integer result: t536: i64,ch = load<(dereferenceable load (s32) from %ir.6), sext from i32> t14, FrameIndex:i32<2>, undef:i32

Creating new node: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Creating constant: t539: i32 = Constant<31>
Creating new node: t540: i32 = sra t538, Constant:i32<31>
Legalizing node: t535: i64 = sub Constant:i64<0>, t536
Analyzing result type: i64
Expand integer result: t535: i64 = sub Constant:i64<0>, t536

Creating new node: t541: i32,i32 = usubo Constant:i32<0>, t538
Creating new node: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
Legalizing node: t539: i32 = Constant<31>
Analyzing result type: i32
Legal result type
Legally typed node: t539: i32 = Constant<31>

Legalizing node: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32

Legalizing node: t540: i32 = sra t538, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t540: i32 = sra t538, Constant:i32<31>

Legalizing node: t22: ch = store<(store (s64) into %ir.7)> t538:1, t535, FrameIndex:i32<3>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t535: i64 = sub Constant:i64<0>, t536
Expand integer operand: t22: ch = store<(store (s64) into %ir.7)> t538:1, t535, FrameIndex:i32<3>, undef:i32

Lowering node: t22: ch = store<(store (s64) into %ir.<badref>)> t538:1, t535, FrameIndex:i32<3>, undef:i32
Creating new node: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32
Creating new node: t544: i32 = add nuw FrameIndex:i32<3>, Constant:i32<4>
Creating new node: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t544, undef:i32
Creating new node: t546: ch = TokenFactor t543, t545
Legalizing node: t544: i32 = add nuw FrameIndex:i32<3>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t21: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t544: i32 = add nuw FrameIndex:i32<3>, Constant:i32<4>

Legalizing node: t541: i32,i32 = usubo Constant:i32<0>, t538
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legal operand
Legally typed node: t541: i32,i32 = usubo Constant:i32<0>, t538

Legalizing node: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t540: i32 = sra t538, Constant:i32<31>
Legal operand
Analyzing operand: t541: i32,i32 = usubo Constant:i32<0>, t538
Legal operand
Legally typed node: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1

Legalizing node: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t544, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
Legal operand
Analyzing operand: t544: i32 = add nuw FrameIndex:i32<3>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t544, undef:i32

Legalizing node: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t541: i32,i32 = usubo Constant:i32<0>, t538
Legal operand
Analyzing operand: t21: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32

Legalizing node: t546: ch = TokenFactor t543, t545
Analyzing result type: ch
Legal result type
Analyzing operand: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t544, undef:i32
Legal operand
Legally typed node: t546: ch = TokenFactor t543, t545

Legalizing node: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t546: ch = TokenFactor t543, t545
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32

Legalizing node: t534: i32 = shl t23, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t534: i32 = shl t23, Constant:i32<1>

Legalizing node: t26: i64 = sign_extend t534
Analyzing result type: i64
Expand integer result: t26: i64 = sign_extend t534

Creating new node: t547: i32 = sra t534, Constant:i32<31>
Legalizing node: t531: i64 = sub Constant:i64<0>, t26
Analyzing result type: i64
Expand integer result: t531: i64 = sub Constant:i64<0>, t26

Creating new node: t548: i32,i32 = usubo Constant:i32<0>, t534
Creating new node: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
Legalizing node: t29: ch = store<(store (s64) into %ir.8)> t23:1, t531, FrameIndex:i32<4>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t531: i64 = sub Constant:i64<0>, t26
Expand integer operand: t29: ch = store<(store (s64) into %ir.8)> t23:1, t531, FrameIndex:i32<4>, undef:i32

Lowering node: t29: ch = store<(store (s64) into %ir.<badref>)> t23:1, t531, FrameIndex:i32<4>, undef:i32
Creating new node: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32
Creating new node: t551: i32 = add nuw FrameIndex:i32<4>, Constant:i32<4>
Creating new node: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t551, undef:i32
Creating new node: t553: ch = TokenFactor t550, t552
Legalizing node: t551: i32 = add nuw FrameIndex:i32<4>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t28: i32 = FrameIndex<4>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t551: i32 = add nuw FrameIndex:i32<4>, Constant:i32<4>

Legalizing node: t548: i32,i32 = usubo Constant:i32<0>, t534
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t534: i32 = shl t23, Constant:i32<1>
Legal operand
Legally typed node: t548: i32,i32 = usubo Constant:i32<0>, t534

Legalizing node: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t548: i32,i32 = usubo Constant:i32<0>, t534
Legal operand
Analyzing operand: t28: i32 = FrameIndex<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32

Legalizing node: t547: i32 = sra t534, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t534: i32 = shl t23, Constant:i32<1>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t547: i32 = sra t534, Constant:i32<31>

Legalizing node: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t547: i32 = sra t534, Constant:i32<31>
Legal operand
Analyzing operand: t548: i32,i32 = usubo Constant:i32<0>, t534
Legal operand
Legally typed node: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1

Legalizing node: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t551, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
Legal operand
Analyzing operand: t551: i32 = add nuw FrameIndex:i32<4>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t551, undef:i32

Legalizing node: t553: ch = TokenFactor t550, t552
Analyzing result type: ch
Legal result type
Analyzing operand: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32
Legal operand
Analyzing operand: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t551, undef:i32
Legal operand
Legally typed node: t553: ch = TokenFactor t550, t552

Legalizing node: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t553: ch = TokenFactor t550, t552
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32

Legalizing node: t32: i32 = mul nsw t30, Constant:i32<3>
Analyzing result type: i32
Legal result type
Analyzing operand: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t31: i32 = Constant<3>
Legal operand
Legally typed node: t32: i32 = mul nsw t30, Constant:i32<3>

Legalizing node: t33: i64 = sign_extend t32
Analyzing result type: i64
Expand integer result: t33: i64 = sign_extend t32

Creating new node: t554: i32 = sra t32, Constant:i32<31>
Legalizing node: t530: i64 = sub Constant:i64<0>, t33
Analyzing result type: i64
Expand integer result: t530: i64 = sub Constant:i64<0>, t33

Creating new node: t555: i32,i32 = usubo Constant:i32<0>, t32
Creating new node: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
Legalizing node: t36: ch = store<(store (s64) into %ir.9)> t30:1, t530, FrameIndex:i32<5>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t530: i64 = sub Constant:i64<0>, t33
Expand integer operand: t36: ch = store<(store (s64) into %ir.9)> t30:1, t530, FrameIndex:i32<5>, undef:i32

Lowering node: t36: ch = store<(store (s64) into %ir.<badref>)> t30:1, t530, FrameIndex:i32<5>, undef:i32
Creating new node: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32
Creating new node: t558: i32 = add nuw FrameIndex:i32<5>, Constant:i32<4>
Creating new node: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t558, undef:i32
Creating new node: t560: ch = TokenFactor t557, t559
Legalizing node: t558: i32 = add nuw FrameIndex:i32<5>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t35: i32 = FrameIndex<5>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t558: i32 = add nuw FrameIndex:i32<5>, Constant:i32<4>

Legalizing node: t555: i32,i32 = usubo Constant:i32<0>, t32
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t32: i32 = mul nsw t30, Constant:i32<3>
Legal operand
Legally typed node: t555: i32,i32 = usubo Constant:i32<0>, t32

Legalizing node: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t555: i32,i32 = usubo Constant:i32<0>, t32
Legal operand
Analyzing operand: t35: i32 = FrameIndex<5>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32

Legalizing node: t554: i32 = sra t32, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t32: i32 = mul nsw t30, Constant:i32<3>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t554: i32 = sra t32, Constant:i32<31>

Legalizing node: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t554: i32 = sra t32, Constant:i32<31>
Legal operand
Analyzing operand: t555: i32,i32 = usubo Constant:i32<0>, t32
Legal operand
Legally typed node: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1

Legalizing node: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t558, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
Legal operand
Analyzing operand: t558: i32 = add nuw FrameIndex:i32<5>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t558, undef:i32

Legalizing node: t560: ch = TokenFactor t557, t559
Analyzing result type: ch
Legal result type
Analyzing operand: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32
Legal operand
Analyzing operand: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t558, undef:i32
Legal operand
Legally typed node: t560: ch = TokenFactor t557, t559

Legalizing node: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t560: ch = TokenFactor t557, t559
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32

Legalizing node: t529: i32 = shl t37, Constant:i32<2>
Analyzing result type: i32
Legal result type
Analyzing operand: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t24: i32 = Constant<2>
Legal operand
Legally typed node: t529: i32 = shl t37, Constant:i32<2>

Legalizing node: t40: i64 = sign_extend t529
Analyzing result type: i64
Expand integer result: t40: i64 = sign_extend t529

Creating new node: t561: i32 = sra t529, Constant:i32<31>
Legalizing node: t526: i64 = sub Constant:i64<0>, t40
Analyzing result type: i64
Expand integer result: t526: i64 = sub Constant:i64<0>, t40

Creating new node: t562: i32,i32 = usubo Constant:i32<0>, t529
Creating new node: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
Legalizing node: t43: ch = store<(store (s64) into %ir.10)> t37:1, t526, FrameIndex:i32<6>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t526: i64 = sub Constant:i64<0>, t40
Expand integer operand: t43: ch = store<(store (s64) into %ir.10)> t37:1, t526, FrameIndex:i32<6>, undef:i32

Lowering node: t43: ch = store<(store (s64) into %ir.<badref>)> t37:1, t526, FrameIndex:i32<6>, undef:i32
Creating new node: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32
Creating new node: t565: i32 = add nuw FrameIndex:i32<6>, Constant:i32<4>
Creating new node: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t565, undef:i32
Creating new node: t567: ch = TokenFactor t564, t566
Legalizing node: t565: i32 = add nuw FrameIndex:i32<6>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t42: i32 = FrameIndex<6>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t565: i32 = add nuw FrameIndex:i32<6>, Constant:i32<4>

Legalizing node: t562: i32,i32 = usubo Constant:i32<0>, t529
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t529: i32 = shl t37, Constant:i32<2>
Legal operand
Legally typed node: t562: i32,i32 = usubo Constant:i32<0>, t529

Legalizing node: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t562: i32,i32 = usubo Constant:i32<0>, t529
Legal operand
Analyzing operand: t42: i32 = FrameIndex<6>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32

Legalizing node: t561: i32 = sra t529, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t529: i32 = shl t37, Constant:i32<2>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t561: i32 = sra t529, Constant:i32<31>

Legalizing node: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t561: i32 = sra t529, Constant:i32<31>
Legal operand
Analyzing operand: t562: i32,i32 = usubo Constant:i32<0>, t529
Legal operand
Legally typed node: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1

Legalizing node: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t565, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
Legal operand
Analyzing operand: t565: i32 = add nuw FrameIndex:i32<6>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t565, undef:i32

Legalizing node: t567: ch = TokenFactor t564, t566
Analyzing result type: ch
Legal result type
Analyzing operand: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32
Legal operand
Analyzing operand: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t565, undef:i32
Legal operand
Legally typed node: t567: ch = TokenFactor t564, t566

Legalizing node: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t567: ch = TokenFactor t564, t566
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32

Legalizing node: t46: i32 = mul nsw t44, Constant:i32<5>
Analyzing result type: i32
Legal result type
Analyzing operand: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t45: i32 = Constant<5>
Legal operand
Legally typed node: t46: i32 = mul nsw t44, Constant:i32<5>

Legalizing node: t47: i64 = sign_extend t46
Analyzing result type: i64
Expand integer result: t47: i64 = sign_extend t46

Creating new node: t568: i32 = sra t46, Constant:i32<31>
Legalizing node: t525: i64 = sub Constant:i64<0>, t47
Analyzing result type: i64
Expand integer result: t525: i64 = sub Constant:i64<0>, t47

Creating new node: t569: i32,i32 = usubo Constant:i32<0>, t46
Creating new node: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
Legalizing node: t50: ch = store<(store (s64) into %ir.11)> t44:1, t525, FrameIndex:i32<7>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t525: i64 = sub Constant:i64<0>, t47
Expand integer operand: t50: ch = store<(store (s64) into %ir.11)> t44:1, t525, FrameIndex:i32<7>, undef:i32

Lowering node: t50: ch = store<(store (s64) into %ir.<badref>)> t44:1, t525, FrameIndex:i32<7>, undef:i32
Creating new node: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32
Creating new node: t572: i32 = add nuw FrameIndex:i32<7>, Constant:i32<4>
Creating new node: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t572, undef:i32
Creating new node: t574: ch = TokenFactor t571, t573
Legalizing node: t572: i32 = add nuw FrameIndex:i32<7>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t49: i32 = FrameIndex<7>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t572: i32 = add nuw FrameIndex:i32<7>, Constant:i32<4>

Legalizing node: t569: i32,i32 = usubo Constant:i32<0>, t46
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t46: i32 = mul nsw t44, Constant:i32<5>
Legal operand
Legally typed node: t569: i32,i32 = usubo Constant:i32<0>, t46

Legalizing node: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t569: i32,i32 = usubo Constant:i32<0>, t46
Legal operand
Analyzing operand: t49: i32 = FrameIndex<7>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32

Legalizing node: t568: i32 = sra t46, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t46: i32 = mul nsw t44, Constant:i32<5>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t568: i32 = sra t46, Constant:i32<31>

Legalizing node: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t568: i32 = sra t46, Constant:i32<31>
Legal operand
Analyzing operand: t569: i32,i32 = usubo Constant:i32<0>, t46
Legal operand
Legally typed node: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1

Legalizing node: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t572, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
Legal operand
Analyzing operand: t572: i32 = add nuw FrameIndex:i32<7>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t572, undef:i32

Legalizing node: t574: ch = TokenFactor t571, t573
Analyzing result type: ch
Legal result type
Analyzing operand: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32
Legal operand
Analyzing operand: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t572, undef:i32
Legal operand
Legally typed node: t574: ch = TokenFactor t571, t573

Legalizing node: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t574: ch = TokenFactor t571, t573
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32

Legalizing node: t53: i32 = mul nsw t51, Constant:i32<6>
Analyzing result type: i32
Legal result type
Analyzing operand: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t52: i32 = Constant<6>
Legal operand
Legally typed node: t53: i32 = mul nsw t51, Constant:i32<6>

Legalizing node: t54: i64 = sign_extend t53
Analyzing result type: i64
Expand integer result: t54: i64 = sign_extend t53

Creating new node: t575: i32 = sra t53, Constant:i32<31>
Legalizing node: t524: i64 = sub Constant:i64<0>, t54
Analyzing result type: i64
Expand integer result: t524: i64 = sub Constant:i64<0>, t54

Creating new node: t576: i32,i32 = usubo Constant:i32<0>, t53
Creating new node: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
Legalizing node: t57: ch = store<(store (s64) into %ir.12)> t51:1, t524, FrameIndex:i32<8>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t524: i64 = sub Constant:i64<0>, t54
Expand integer operand: t57: ch = store<(store (s64) into %ir.12)> t51:1, t524, FrameIndex:i32<8>, undef:i32

Lowering node: t57: ch = store<(store (s64) into %ir.<badref>)> t51:1, t524, FrameIndex:i32<8>, undef:i32
Creating new node: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32
Creating new node: t579: i32 = add nuw FrameIndex:i32<8>, Constant:i32<4>
Creating new node: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t579, undef:i32
Creating new node: t581: ch = TokenFactor t578, t580
Legalizing node: t579: i32 = add nuw FrameIndex:i32<8>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t56: i32 = FrameIndex<8>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t579: i32 = add nuw FrameIndex:i32<8>, Constant:i32<4>

Legalizing node: t576: i32,i32 = usubo Constant:i32<0>, t53
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t53: i32 = mul nsw t51, Constant:i32<6>
Legal operand
Legally typed node: t576: i32,i32 = usubo Constant:i32<0>, t53

Legalizing node: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t576: i32,i32 = usubo Constant:i32<0>, t53
Legal operand
Analyzing operand: t56: i32 = FrameIndex<8>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32

Legalizing node: t575: i32 = sra t53, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t53: i32 = mul nsw t51, Constant:i32<6>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t575: i32 = sra t53, Constant:i32<31>

Legalizing node: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t575: i32 = sra t53, Constant:i32<31>
Legal operand
Analyzing operand: t576: i32,i32 = usubo Constant:i32<0>, t53
Legal operand
Legally typed node: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1

Legalizing node: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t579, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
Legal operand
Analyzing operand: t579: i32 = add nuw FrameIndex:i32<8>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t579, undef:i32

Legalizing node: t581: ch = TokenFactor t578, t580
Analyzing result type: ch
Legal result type
Analyzing operand: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32
Legal operand
Analyzing operand: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t579, undef:i32
Legal operand
Legally typed node: t581: ch = TokenFactor t578, t580

Legalizing node: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t581: ch = TokenFactor t578, t580
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32

Legalizing node: t60: i32 = mul nsw t58, Constant:i32<7>
Analyzing result type: i32
Legal result type
Analyzing operand: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t59: i32 = Constant<7>
Legal operand
Legally typed node: t60: i32 = mul nsw t58, Constant:i32<7>

Legalizing node: t61: i64 = sign_extend t60
Analyzing result type: i64
Expand integer result: t61: i64 = sign_extend t60

Creating new node: t582: i32 = sra t60, Constant:i32<31>
Legalizing node: t523: i64 = sub Constant:i64<0>, t61
Analyzing result type: i64
Expand integer result: t523: i64 = sub Constant:i64<0>, t61

Creating new node: t583: i32,i32 = usubo Constant:i32<0>, t60
Creating new node: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
Legalizing node: t64: ch = store<(store (s64) into %ir.13)> t58:1, t523, FrameIndex:i32<9>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t523: i64 = sub Constant:i64<0>, t61
Expand integer operand: t64: ch = store<(store (s64) into %ir.13)> t58:1, t523, FrameIndex:i32<9>, undef:i32

Lowering node: t64: ch = store<(store (s64) into %ir.<badref>)> t58:1, t523, FrameIndex:i32<9>, undef:i32
Creating new node: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32
Creating new node: t586: i32 = add nuw FrameIndex:i32<9>, Constant:i32<4>
Creating new node: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t586, undef:i32
Creating new node: t588: ch = TokenFactor t585, t587
Legalizing node: t586: i32 = add nuw FrameIndex:i32<9>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t63: i32 = FrameIndex<9>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t586: i32 = add nuw FrameIndex:i32<9>, Constant:i32<4>

Legalizing node: t583: i32,i32 = usubo Constant:i32<0>, t60
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t60: i32 = mul nsw t58, Constant:i32<7>
Legal operand
Legally typed node: t583: i32,i32 = usubo Constant:i32<0>, t60

Legalizing node: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t583: i32,i32 = usubo Constant:i32<0>, t60
Legal operand
Analyzing operand: t63: i32 = FrameIndex<9>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32

Legalizing node: t582: i32 = sra t60, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t60: i32 = mul nsw t58, Constant:i32<7>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t582: i32 = sra t60, Constant:i32<31>

Legalizing node: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t582: i32 = sra t60, Constant:i32<31>
Legal operand
Analyzing operand: t583: i32,i32 = usubo Constant:i32<0>, t60
Legal operand
Legally typed node: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1

Legalizing node: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t586, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
Legal operand
Analyzing operand: t586: i32 = add nuw FrameIndex:i32<9>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t586, undef:i32

Legalizing node: t588: ch = TokenFactor t585, t587
Analyzing result type: ch
Legal result type
Analyzing operand: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32
Legal operand
Analyzing operand: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t586, undef:i32
Legal operand
Legally typed node: t588: ch = TokenFactor t585, t587

Legalizing node: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t588: ch = TokenFactor t585, t587
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32

Legalizing node: t522: i32 = shl t65, Constant:i32<3>
Analyzing result type: i32
Legal result type
Analyzing operand: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t31: i32 = Constant<3>
Legal operand
Legally typed node: t522: i32 = shl t65, Constant:i32<3>

Legalizing node: t68: i64 = sign_extend t522
Analyzing result type: i64
Expand integer result: t68: i64 = sign_extend t522

Creating new node: t589: i32 = sra t522, Constant:i32<31>
Legalizing node: t519: i64 = sub Constant:i64<0>, t68
Analyzing result type: i64
Expand integer result: t519: i64 = sub Constant:i64<0>, t68

Creating new node: t590: i32,i32 = usubo Constant:i32<0>, t522
Creating new node: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
Legalizing node: t71: ch = store<(store (s64) into %ir.14)> t65:1, t519, FrameIndex:i32<10>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t519: i64 = sub Constant:i64<0>, t68
Expand integer operand: t71: ch = store<(store (s64) into %ir.14)> t65:1, t519, FrameIndex:i32<10>, undef:i32

Lowering node: t71: ch = store<(store (s64) into %ir.<badref>)> t65:1, t519, FrameIndex:i32<10>, undef:i32
Creating new node: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32
Creating new node: t593: i32 = add nuw FrameIndex:i32<10>, Constant:i32<4>
Creating new node: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t593, undef:i32
Creating new node: t595: ch = TokenFactor t592, t594
Legalizing node: t593: i32 = add nuw FrameIndex:i32<10>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t70: i32 = FrameIndex<10>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t593: i32 = add nuw FrameIndex:i32<10>, Constant:i32<4>

Legalizing node: t590: i32,i32 = usubo Constant:i32<0>, t522
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t522: i32 = shl t65, Constant:i32<3>
Legal operand
Legally typed node: t590: i32,i32 = usubo Constant:i32<0>, t522

Legalizing node: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t590: i32,i32 = usubo Constant:i32<0>, t522
Legal operand
Analyzing operand: t70: i32 = FrameIndex<10>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32

Legalizing node: t589: i32 = sra t522, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t522: i32 = shl t65, Constant:i32<3>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t589: i32 = sra t522, Constant:i32<31>

Legalizing node: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t589: i32 = sra t522, Constant:i32<31>
Legal operand
Analyzing operand: t590: i32,i32 = usubo Constant:i32<0>, t522
Legal operand
Legally typed node: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1

Legalizing node: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t593, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
Legal operand
Analyzing operand: t593: i32 = add nuw FrameIndex:i32<10>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t593, undef:i32

Legalizing node: t595: ch = TokenFactor t592, t594
Analyzing result type: ch
Legal result type
Analyzing operand: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32
Legal operand
Analyzing operand: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t593, undef:i32
Legal operand
Legally typed node: t595: ch = TokenFactor t592, t594

Legalizing node: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t595: ch = TokenFactor t592, t594
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32

Legalizing node: t74: i32 = mul nsw t72, Constant:i32<9>
Analyzing result type: i32
Legal result type
Analyzing operand: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t73: i32 = Constant<9>
Legal operand
Legally typed node: t74: i32 = mul nsw t72, Constant:i32<9>

Legalizing node: t75: i64 = sign_extend t74
Analyzing result type: i64
Expand integer result: t75: i64 = sign_extend t74

Creating new node: t596: i32 = sra t74, Constant:i32<31>
Legalizing node: t518: i64 = sub Constant:i64<0>, t75
Analyzing result type: i64
Expand integer result: t518: i64 = sub Constant:i64<0>, t75

Creating new node: t597: i32,i32 = usubo Constant:i32<0>, t74
Creating new node: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
Legalizing node: t78: ch = store<(store (s64) into %ir.15)> t72:1, t518, FrameIndex:i32<11>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t518: i64 = sub Constant:i64<0>, t75
Expand integer operand: t78: ch = store<(store (s64) into %ir.15)> t72:1, t518, FrameIndex:i32<11>, undef:i32

Lowering node: t78: ch = store<(store (s64) into %ir.<badref>)> t72:1, t518, FrameIndex:i32<11>, undef:i32
Creating new node: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32
Creating new node: t600: i32 = add nuw FrameIndex:i32<11>, Constant:i32<4>
Creating new node: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t600, undef:i32
Creating new node: t602: ch = TokenFactor t599, t601
Legalizing node: t600: i32 = add nuw FrameIndex:i32<11>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t77: i32 = FrameIndex<11>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t600: i32 = add nuw FrameIndex:i32<11>, Constant:i32<4>

Legalizing node: t597: i32,i32 = usubo Constant:i32<0>, t74
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t74: i32 = mul nsw t72, Constant:i32<9>
Legal operand
Legally typed node: t597: i32,i32 = usubo Constant:i32<0>, t74

Legalizing node: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t597: i32,i32 = usubo Constant:i32<0>, t74
Legal operand
Analyzing operand: t77: i32 = FrameIndex<11>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32

Legalizing node: t596: i32 = sra t74, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t74: i32 = mul nsw t72, Constant:i32<9>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t596: i32 = sra t74, Constant:i32<31>

Legalizing node: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t596: i32 = sra t74, Constant:i32<31>
Legal operand
Analyzing operand: t597: i32,i32 = usubo Constant:i32<0>, t74
Legal operand
Legally typed node: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1

Legalizing node: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t600, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
Legal operand
Analyzing operand: t600: i32 = add nuw FrameIndex:i32<11>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t600, undef:i32

Legalizing node: t602: ch = TokenFactor t599, t601
Analyzing result type: ch
Legal result type
Analyzing operand: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32
Legal operand
Analyzing operand: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t600, undef:i32
Legal operand
Legally typed node: t602: ch = TokenFactor t599, t601

Legalizing node: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t602: ch = TokenFactor t599, t601
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32

Legalizing node: t81: i32 = mul nsw t79, Constant:i32<10>
Analyzing result type: i32
Legal result type
Analyzing operand: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t80: i32 = Constant<10>
Legal operand
Legally typed node: t81: i32 = mul nsw t79, Constant:i32<10>

Legalizing node: t82: i64 = sign_extend t81
Analyzing result type: i64
Expand integer result: t82: i64 = sign_extend t81

Creating new node: t603: i32 = sra t81, Constant:i32<31>
Legalizing node: t517: i64 = sub Constant:i64<0>, t82
Analyzing result type: i64
Expand integer result: t517: i64 = sub Constant:i64<0>, t82

Creating new node: t604: i32,i32 = usubo Constant:i32<0>, t81
Creating new node: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
Legalizing node: t85: ch = store<(store (s64) into %ir.16)> t79:1, t517, FrameIndex:i32<12>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t517: i64 = sub Constant:i64<0>, t82
Expand integer operand: t85: ch = store<(store (s64) into %ir.16)> t79:1, t517, FrameIndex:i32<12>, undef:i32

Lowering node: t85: ch = store<(store (s64) into %ir.<badref>)> t79:1, t517, FrameIndex:i32<12>, undef:i32
Creating new node: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32
Creating new node: t607: i32 = add nuw FrameIndex:i32<12>, Constant:i32<4>
Creating new node: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t607, undef:i32
Creating new node: t609: ch = TokenFactor t606, t608
Legalizing node: t607: i32 = add nuw FrameIndex:i32<12>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t84: i32 = FrameIndex<12>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t607: i32 = add nuw FrameIndex:i32<12>, Constant:i32<4>

Legalizing node: t604: i32,i32 = usubo Constant:i32<0>, t81
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t81: i32 = mul nsw t79, Constant:i32<10>
Legal operand
Legally typed node: t604: i32,i32 = usubo Constant:i32<0>, t81

Legalizing node: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t604: i32,i32 = usubo Constant:i32<0>, t81
Legal operand
Analyzing operand: t84: i32 = FrameIndex<12>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32

Legalizing node: t603: i32 = sra t81, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t81: i32 = mul nsw t79, Constant:i32<10>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t603: i32 = sra t81, Constant:i32<31>

Legalizing node: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t603: i32 = sra t81, Constant:i32<31>
Legal operand
Analyzing operand: t604: i32,i32 = usubo Constant:i32<0>, t81
Legal operand
Legally typed node: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1

Legalizing node: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t607, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
Legal operand
Analyzing operand: t607: i32 = add nuw FrameIndex:i32<12>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t607, undef:i32

Legalizing node: t609: ch = TokenFactor t606, t608
Analyzing result type: ch
Legal result type
Analyzing operand: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32
Legal operand
Analyzing operand: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t607, undef:i32
Legal operand
Legally typed node: t609: ch = TokenFactor t606, t608

Legalizing node: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t609: ch = TokenFactor t606, t608
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32

Legalizing node: t88: i32 = mul nsw t86, Constant:i32<11>
Analyzing result type: i32
Legal result type
Analyzing operand: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t87: i32 = Constant<11>
Legal operand
Legally typed node: t88: i32 = mul nsw t86, Constant:i32<11>

Legalizing node: t89: i64 = sign_extend t88
Analyzing result type: i64
Expand integer result: t89: i64 = sign_extend t88

Creating new node: t610: i32 = sra t88, Constant:i32<31>
Legalizing node: t516: i64 = sub Constant:i64<0>, t89
Analyzing result type: i64
Expand integer result: t516: i64 = sub Constant:i64<0>, t89

Creating new node: t611: i32,i32 = usubo Constant:i32<0>, t88
Creating new node: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
Legalizing node: t92: ch = store<(store (s64) into %ir.17)> t86:1, t516, FrameIndex:i32<13>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t516: i64 = sub Constant:i64<0>, t89
Expand integer operand: t92: ch = store<(store (s64) into %ir.17)> t86:1, t516, FrameIndex:i32<13>, undef:i32

Lowering node: t92: ch = store<(store (s64) into %ir.<badref>)> t86:1, t516, FrameIndex:i32<13>, undef:i32
Creating new node: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32
Creating new node: t614: i32 = add nuw FrameIndex:i32<13>, Constant:i32<4>
Creating new node: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t614, undef:i32
Creating new node: t616: ch = TokenFactor t613, t615
Legalizing node: t614: i32 = add nuw FrameIndex:i32<13>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t91: i32 = FrameIndex<13>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t614: i32 = add nuw FrameIndex:i32<13>, Constant:i32<4>

Legalizing node: t611: i32,i32 = usubo Constant:i32<0>, t88
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t88: i32 = mul nsw t86, Constant:i32<11>
Legal operand
Legally typed node: t611: i32,i32 = usubo Constant:i32<0>, t88

Legalizing node: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t611: i32,i32 = usubo Constant:i32<0>, t88
Legal operand
Analyzing operand: t91: i32 = FrameIndex<13>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32

Legalizing node: t610: i32 = sra t88, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t88: i32 = mul nsw t86, Constant:i32<11>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t610: i32 = sra t88, Constant:i32<31>

Legalizing node: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t610: i32 = sra t88, Constant:i32<31>
Legal operand
Analyzing operand: t611: i32,i32 = usubo Constant:i32<0>, t88
Legal operand
Legally typed node: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1

Legalizing node: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t614, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
Legal operand
Analyzing operand: t614: i32 = add nuw FrameIndex:i32<13>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t614, undef:i32

Legalizing node: t616: ch = TokenFactor t613, t615
Analyzing result type: ch
Legal result type
Analyzing operand: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32
Legal operand
Analyzing operand: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t614, undef:i32
Legal operand
Legally typed node: t616: ch = TokenFactor t613, t615

Legalizing node: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t616: ch = TokenFactor t613, t615
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32

Legalizing node: t95: i32 = mul nsw t93, Constant:i32<12>
Analyzing result type: i32
Legal result type
Analyzing operand: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t94: i32 = Constant<12>
Legal operand
Legally typed node: t95: i32 = mul nsw t93, Constant:i32<12>

Legalizing node: t96: i64 = sign_extend t95
Analyzing result type: i64
Expand integer result: t96: i64 = sign_extend t95

Creating new node: t617: i32 = sra t95, Constant:i32<31>
Legalizing node: t515: i64 = sub Constant:i64<0>, t96
Analyzing result type: i64
Expand integer result: t515: i64 = sub Constant:i64<0>, t96

Creating new node: t618: i32,i32 = usubo Constant:i32<0>, t95
Creating new node: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
Legalizing node: t99: ch = store<(store (s64) into %ir.18)> t93:1, t515, FrameIndex:i32<14>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t515: i64 = sub Constant:i64<0>, t96
Expand integer operand: t99: ch = store<(store (s64) into %ir.18)> t93:1, t515, FrameIndex:i32<14>, undef:i32

Lowering node: t99: ch = store<(store (s64) into %ir.<badref>)> t93:1, t515, FrameIndex:i32<14>, undef:i32
Creating new node: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32
Creating new node: t621: i32 = add nuw FrameIndex:i32<14>, Constant:i32<4>
Creating new node: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t621, undef:i32
Creating new node: t623: ch = TokenFactor t620, t622
Legalizing node: t621: i32 = add nuw FrameIndex:i32<14>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t98: i32 = FrameIndex<14>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t621: i32 = add nuw FrameIndex:i32<14>, Constant:i32<4>

Legalizing node: t618: i32,i32 = usubo Constant:i32<0>, t95
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t95: i32 = mul nsw t93, Constant:i32<12>
Legal operand
Legally typed node: t618: i32,i32 = usubo Constant:i32<0>, t95

Legalizing node: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t618: i32,i32 = usubo Constant:i32<0>, t95
Legal operand
Analyzing operand: t98: i32 = FrameIndex<14>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32

Legalizing node: t617: i32 = sra t95, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t95: i32 = mul nsw t93, Constant:i32<12>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t617: i32 = sra t95, Constant:i32<31>

Legalizing node: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t617: i32 = sra t95, Constant:i32<31>
Legal operand
Analyzing operand: t618: i32,i32 = usubo Constant:i32<0>, t95
Legal operand
Legally typed node: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1

Legalizing node: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t621, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
Legal operand
Analyzing operand: t621: i32 = add nuw FrameIndex:i32<14>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t621, undef:i32

Legalizing node: t623: ch = TokenFactor t620, t622
Analyzing result type: ch
Legal result type
Analyzing operand: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32
Legal operand
Analyzing operand: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t621, undef:i32
Legal operand
Legally typed node: t623: ch = TokenFactor t620, t622

Legalizing node: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t623: ch = TokenFactor t620, t622
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32

Legalizing node: t102: i32 = mul nsw t100, Constant:i32<13>
Analyzing result type: i32
Legal result type
Analyzing operand: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t101: i32 = Constant<13>
Legal operand
Legally typed node: t102: i32 = mul nsw t100, Constant:i32<13>

Legalizing node: t103: i64 = sign_extend t102
Analyzing result type: i64
Expand integer result: t103: i64 = sign_extend t102

Creating new node: t624: i32 = sra t102, Constant:i32<31>
Legalizing node: t514: i64 = sub Constant:i64<0>, t103
Analyzing result type: i64
Expand integer result: t514: i64 = sub Constant:i64<0>, t103

Creating new node: t625: i32,i32 = usubo Constant:i32<0>, t102
Creating new node: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
Legalizing node: t106: ch = store<(store (s64) into %ir.19)> t100:1, t514, FrameIndex:i32<15>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t514: i64 = sub Constant:i64<0>, t103
Expand integer operand: t106: ch = store<(store (s64) into %ir.19)> t100:1, t514, FrameIndex:i32<15>, undef:i32

Lowering node: t106: ch = store<(store (s64) into %ir.<badref>)> t100:1, t514, FrameIndex:i32<15>, undef:i32
Creating new node: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32
Creating new node: t628: i32 = add nuw FrameIndex:i32<15>, Constant:i32<4>
Creating new node: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t628, undef:i32
Creating new node: t630: ch = TokenFactor t627, t629
Legalizing node: t628: i32 = add nuw FrameIndex:i32<15>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t105: i32 = FrameIndex<15>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t628: i32 = add nuw FrameIndex:i32<15>, Constant:i32<4>

Legalizing node: t625: i32,i32 = usubo Constant:i32<0>, t102
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t102: i32 = mul nsw t100, Constant:i32<13>
Legal operand
Legally typed node: t625: i32,i32 = usubo Constant:i32<0>, t102

Legalizing node: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t625: i32,i32 = usubo Constant:i32<0>, t102
Legal operand
Analyzing operand: t105: i32 = FrameIndex<15>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32

Legalizing node: t624: i32 = sra t102, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t102: i32 = mul nsw t100, Constant:i32<13>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t624: i32 = sra t102, Constant:i32<31>

Legalizing node: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t624: i32 = sra t102, Constant:i32<31>
Legal operand
Analyzing operand: t625: i32,i32 = usubo Constant:i32<0>, t102
Legal operand
Legally typed node: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1

Legalizing node: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t628, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
Legal operand
Analyzing operand: t628: i32 = add nuw FrameIndex:i32<15>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t628, undef:i32

Legalizing node: t630: ch = TokenFactor t627, t629
Analyzing result type: ch
Legal result type
Analyzing operand: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32
Legal operand
Analyzing operand: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t628, undef:i32
Legal operand
Legally typed node: t630: ch = TokenFactor t627, t629

Legalizing node: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t630: ch = TokenFactor t627, t629
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32

Legalizing node: t109: i32 = mul nsw t107, Constant:i32<14>
Analyzing result type: i32
Legal result type
Analyzing operand: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t108: i32 = Constant<14>
Legal operand
Legally typed node: t109: i32 = mul nsw t107, Constant:i32<14>

Legalizing node: t110: i64 = sign_extend t109
Analyzing result type: i64
Expand integer result: t110: i64 = sign_extend t109

Creating new node: t631: i32 = sra t109, Constant:i32<31>
Legalizing node: t513: i64 = sub Constant:i64<0>, t110
Analyzing result type: i64
Expand integer result: t513: i64 = sub Constant:i64<0>, t110

Creating new node: t632: i32,i32 = usubo Constant:i32<0>, t109
Creating new node: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
Legalizing node: t113: ch = store<(store (s64) into %ir.20)> t107:1, t513, FrameIndex:i32<16>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t513: i64 = sub Constant:i64<0>, t110
Expand integer operand: t113: ch = store<(store (s64) into %ir.20)> t107:1, t513, FrameIndex:i32<16>, undef:i32

Lowering node: t113: ch = store<(store (s64) into %ir.<badref>)> t107:1, t513, FrameIndex:i32<16>, undef:i32
Creating new node: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32
Creating new node: t635: i32 = add nuw FrameIndex:i32<16>, Constant:i32<4>
Creating new node: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t635, undef:i32
Creating new node: t637: ch = TokenFactor t634, t636
Legalizing node: t635: i32 = add nuw FrameIndex:i32<16>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t112: i32 = FrameIndex<16>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t635: i32 = add nuw FrameIndex:i32<16>, Constant:i32<4>

Legalizing node: t632: i32,i32 = usubo Constant:i32<0>, t109
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t109: i32 = mul nsw t107, Constant:i32<14>
Legal operand
Legally typed node: t632: i32,i32 = usubo Constant:i32<0>, t109

Legalizing node: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t632: i32,i32 = usubo Constant:i32<0>, t109
Legal operand
Analyzing operand: t112: i32 = FrameIndex<16>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32

Legalizing node: t631: i32 = sra t109, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t109: i32 = mul nsw t107, Constant:i32<14>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t631: i32 = sra t109, Constant:i32<31>

Legalizing node: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t631: i32 = sra t109, Constant:i32<31>
Legal operand
Analyzing operand: t632: i32,i32 = usubo Constant:i32<0>, t109
Legal operand
Legally typed node: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1

Legalizing node: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t635, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
Legal operand
Analyzing operand: t635: i32 = add nuw FrameIndex:i32<16>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t635, undef:i32

Legalizing node: t637: ch = TokenFactor t634, t636
Analyzing result type: ch
Legal result type
Analyzing operand: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32
Legal operand
Analyzing operand: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t635, undef:i32
Legal operand
Legally typed node: t637: ch = TokenFactor t634, t636

Legalizing node: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t637: ch = TokenFactor t634, t636
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32

Legalizing node: t116: i32 = mul nsw t114, Constant:i32<15>
Analyzing result type: i32
Legal result type
Analyzing operand: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t115: i32 = Constant<15>
Legal operand
Legally typed node: t116: i32 = mul nsw t114, Constant:i32<15>

Legalizing node: t117: i64 = sign_extend t116
Analyzing result type: i64
Expand integer result: t117: i64 = sign_extend t116

Creating new node: t638: i32 = sra t116, Constant:i32<31>
Legalizing node: t512: i64 = sub Constant:i64<0>, t117
Analyzing result type: i64
Expand integer result: t512: i64 = sub Constant:i64<0>, t117

Creating new node: t639: i32,i32 = usubo Constant:i32<0>, t116
Creating new node: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
Legalizing node: t120: ch = store<(store (s64) into %ir.21)> t114:1, t512, FrameIndex:i32<17>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t512: i64 = sub Constant:i64<0>, t117
Expand integer operand: t120: ch = store<(store (s64) into %ir.21)> t114:1, t512, FrameIndex:i32<17>, undef:i32

Lowering node: t120: ch = store<(store (s64) into %ir.<badref>)> t114:1, t512, FrameIndex:i32<17>, undef:i32
Creating new node: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32
Creating new node: t642: i32 = add nuw FrameIndex:i32<17>, Constant:i32<4>
Creating new node: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t642, undef:i32
Creating new node: t644: ch = TokenFactor t641, t643
Legalizing node: t642: i32 = add nuw FrameIndex:i32<17>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t119: i32 = FrameIndex<17>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t642: i32 = add nuw FrameIndex:i32<17>, Constant:i32<4>

Legalizing node: t639: i32,i32 = usubo Constant:i32<0>, t116
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t116: i32 = mul nsw t114, Constant:i32<15>
Legal operand
Legally typed node: t639: i32,i32 = usubo Constant:i32<0>, t116

Legalizing node: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t639: i32,i32 = usubo Constant:i32<0>, t116
Legal operand
Analyzing operand: t119: i32 = FrameIndex<17>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32

Legalizing node: t638: i32 = sra t116, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t116: i32 = mul nsw t114, Constant:i32<15>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t638: i32 = sra t116, Constant:i32<31>

Legalizing node: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t638: i32 = sra t116, Constant:i32<31>
Legal operand
Analyzing operand: t639: i32,i32 = usubo Constant:i32<0>, t116
Legal operand
Legally typed node: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1

Legalizing node: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t642, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
Legal operand
Analyzing operand: t642: i32 = add nuw FrameIndex:i32<17>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t642, undef:i32

Legalizing node: t644: ch = TokenFactor t641, t643
Analyzing result type: ch
Legal result type
Analyzing operand: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32
Legal operand
Analyzing operand: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t642, undef:i32
Legal operand
Legally typed node: t644: ch = TokenFactor t641, t643

Legalizing node: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t644: ch = TokenFactor t641, t643
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32

Legalizing node: t511: i32 = shl t121, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t511: i32 = shl t121, Constant:i32<4>

Legalizing node: t124: i64 = sign_extend t511
Analyzing result type: i64
Expand integer result: t124: i64 = sign_extend t511

Creating new node: t645: i32 = sra t511, Constant:i32<31>
Legalizing node: t508: i64 = sub Constant:i64<0>, t124
Analyzing result type: i64
Expand integer result: t508: i64 = sub Constant:i64<0>, t124

Creating new node: t646: i32,i32 = usubo Constant:i32<0>, t511
Creating new node: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
Legalizing node: t127: ch = store<(store (s64) into %ir.22)> t121:1, t508, FrameIndex:i32<18>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t508: i64 = sub Constant:i64<0>, t124
Expand integer operand: t127: ch = store<(store (s64) into %ir.22)> t121:1, t508, FrameIndex:i32<18>, undef:i32

Lowering node: t127: ch = store<(store (s64) into %ir.<badref>)> t121:1, t508, FrameIndex:i32<18>, undef:i32
Creating new node: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32
Creating new node: t649: i32 = add nuw FrameIndex:i32<18>, Constant:i32<4>
Creating new node: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t649, undef:i32
Creating new node: t651: ch = TokenFactor t648, t650
Legalizing node: t649: i32 = add nuw FrameIndex:i32<18>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t126: i32 = FrameIndex<18>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t649: i32 = add nuw FrameIndex:i32<18>, Constant:i32<4>

Legalizing node: t646: i32,i32 = usubo Constant:i32<0>, t511
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t511: i32 = shl t121, Constant:i32<4>
Legal operand
Legally typed node: t646: i32,i32 = usubo Constant:i32<0>, t511

Legalizing node: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t646: i32,i32 = usubo Constant:i32<0>, t511
Legal operand
Analyzing operand: t126: i32 = FrameIndex<18>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32

Legalizing node: t645: i32 = sra t511, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t511: i32 = shl t121, Constant:i32<4>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t645: i32 = sra t511, Constant:i32<31>

Legalizing node: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t645: i32 = sra t511, Constant:i32<31>
Legal operand
Analyzing operand: t646: i32,i32 = usubo Constant:i32<0>, t511
Legal operand
Legally typed node: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1

Legalizing node: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t649, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
Legal operand
Analyzing operand: t649: i32 = add nuw FrameIndex:i32<18>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t649, undef:i32

Legalizing node: t651: ch = TokenFactor t648, t650
Analyzing result type: ch
Legal result type
Analyzing operand: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32
Legal operand
Analyzing operand: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t649, undef:i32
Legal operand
Legally typed node: t651: ch = TokenFactor t648, t650

Legalizing node: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t651: ch = TokenFactor t648, t650
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32

Legalizing node: t130: i32 = mul nsw t128, Constant:i32<17>
Analyzing result type: i32
Legal result type
Analyzing operand: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t129: i32 = Constant<17>
Legal operand
Legally typed node: t130: i32 = mul nsw t128, Constant:i32<17>

Legalizing node: t131: i64 = sign_extend t130
Analyzing result type: i64
Expand integer result: t131: i64 = sign_extend t130

Creating new node: t652: i32 = sra t130, Constant:i32<31>
Legalizing node: t507: i64 = sub Constant:i64<0>, t131
Analyzing result type: i64
Expand integer result: t507: i64 = sub Constant:i64<0>, t131

Creating new node: t653: i32,i32 = usubo Constant:i32<0>, t130
Creating new node: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
Legalizing node: t134: ch = store<(store (s64) into %ir.23)> t128:1, t507, FrameIndex:i32<19>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t507: i64 = sub Constant:i64<0>, t131
Expand integer operand: t134: ch = store<(store (s64) into %ir.23)> t128:1, t507, FrameIndex:i32<19>, undef:i32

Lowering node: t134: ch = store<(store (s64) into %ir.<badref>)> t128:1, t507, FrameIndex:i32<19>, undef:i32
Creating new node: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32
Creating new node: t656: i32 = add nuw FrameIndex:i32<19>, Constant:i32<4>
Creating new node: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t656, undef:i32
Creating new node: t658: ch = TokenFactor t655, t657
Legalizing node: t656: i32 = add nuw FrameIndex:i32<19>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t133: i32 = FrameIndex<19>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t656: i32 = add nuw FrameIndex:i32<19>, Constant:i32<4>

Legalizing node: t653: i32,i32 = usubo Constant:i32<0>, t130
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t130: i32 = mul nsw t128, Constant:i32<17>
Legal operand
Legally typed node: t653: i32,i32 = usubo Constant:i32<0>, t130

Legalizing node: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t653: i32,i32 = usubo Constant:i32<0>, t130
Legal operand
Analyzing operand: t133: i32 = FrameIndex<19>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32

Legalizing node: t652: i32 = sra t130, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t130: i32 = mul nsw t128, Constant:i32<17>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t652: i32 = sra t130, Constant:i32<31>

Legalizing node: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t652: i32 = sra t130, Constant:i32<31>
Legal operand
Analyzing operand: t653: i32,i32 = usubo Constant:i32<0>, t130
Legal operand
Legally typed node: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1

Legalizing node: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t656, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
Legal operand
Analyzing operand: t656: i32 = add nuw FrameIndex:i32<19>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t656, undef:i32

Legalizing node: t658: ch = TokenFactor t655, t657
Analyzing result type: ch
Legal result type
Analyzing operand: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32
Legal operand
Analyzing operand: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t656, undef:i32
Legal operand
Legally typed node: t658: ch = TokenFactor t655, t657

Legalizing node: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t658: ch = TokenFactor t655, t657
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32

Legalizing node: t137: i32 = mul nsw t135, Constant:i32<18>
Analyzing result type: i32
Legal result type
Analyzing operand: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t136: i32 = Constant<18>
Legal operand
Legally typed node: t137: i32 = mul nsw t135, Constant:i32<18>

Legalizing node: t138: i64 = sign_extend t137
Analyzing result type: i64
Expand integer result: t138: i64 = sign_extend t137

Creating new node: t659: i32 = sra t137, Constant:i32<31>
Legalizing node: t506: i64 = sub Constant:i64<0>, t138
Analyzing result type: i64
Expand integer result: t506: i64 = sub Constant:i64<0>, t138

Creating new node: t660: i32,i32 = usubo Constant:i32<0>, t137
Creating new node: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
Legalizing node: t141: ch = store<(store (s64) into %ir.24)> t135:1, t506, FrameIndex:i32<20>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t506: i64 = sub Constant:i64<0>, t138
Expand integer operand: t141: ch = store<(store (s64) into %ir.24)> t135:1, t506, FrameIndex:i32<20>, undef:i32

Lowering node: t141: ch = store<(store (s64) into %ir.<badref>)> t135:1, t506, FrameIndex:i32<20>, undef:i32
Creating new node: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32
Creating new node: t663: i32 = add nuw FrameIndex:i32<20>, Constant:i32<4>
Creating new node: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t663, undef:i32
Creating new node: t665: ch = TokenFactor t662, t664
Legalizing node: t663: i32 = add nuw FrameIndex:i32<20>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t140: i32 = FrameIndex<20>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t663: i32 = add nuw FrameIndex:i32<20>, Constant:i32<4>

Legalizing node: t660: i32,i32 = usubo Constant:i32<0>, t137
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t137: i32 = mul nsw t135, Constant:i32<18>
Legal operand
Legally typed node: t660: i32,i32 = usubo Constant:i32<0>, t137

Legalizing node: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t660: i32,i32 = usubo Constant:i32<0>, t137
Legal operand
Analyzing operand: t140: i32 = FrameIndex<20>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32

Legalizing node: t659: i32 = sra t137, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t137: i32 = mul nsw t135, Constant:i32<18>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t659: i32 = sra t137, Constant:i32<31>

Legalizing node: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t659: i32 = sra t137, Constant:i32<31>
Legal operand
Analyzing operand: t660: i32,i32 = usubo Constant:i32<0>, t137
Legal operand
Legally typed node: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1

Legalizing node: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t663, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
Legal operand
Analyzing operand: t663: i32 = add nuw FrameIndex:i32<20>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t663, undef:i32

Legalizing node: t665: ch = TokenFactor t662, t664
Analyzing result type: ch
Legal result type
Analyzing operand: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32
Legal operand
Analyzing operand: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t663, undef:i32
Legal operand
Legally typed node: t665: ch = TokenFactor t662, t664

Legalizing node: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t665: ch = TokenFactor t662, t664
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32

Legalizing node: t144: i32 = mul nsw t142, Constant:i32<19>
Analyzing result type: i32
Legal result type
Analyzing operand: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t143: i32 = Constant<19>
Legal operand
Legally typed node: t144: i32 = mul nsw t142, Constant:i32<19>

Legalizing node: t145: i64 = sign_extend t144
Analyzing result type: i64
Expand integer result: t145: i64 = sign_extend t144

Creating new node: t666: i32 = sra t144, Constant:i32<31>
Legalizing node: t505: i64 = sub Constant:i64<0>, t145
Analyzing result type: i64
Expand integer result: t505: i64 = sub Constant:i64<0>, t145

Creating new node: t667: i32,i32 = usubo Constant:i32<0>, t144
Creating new node: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
Legalizing node: t148: ch = store<(store (s64) into %ir.25)> t142:1, t505, FrameIndex:i32<21>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t505: i64 = sub Constant:i64<0>, t145
Expand integer operand: t148: ch = store<(store (s64) into %ir.25)> t142:1, t505, FrameIndex:i32<21>, undef:i32

Lowering node: t148: ch = store<(store (s64) into %ir.<badref>)> t142:1, t505, FrameIndex:i32<21>, undef:i32
Creating new node: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32
Creating new node: t670: i32 = add nuw FrameIndex:i32<21>, Constant:i32<4>
Creating new node: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t670, undef:i32
Creating new node: t672: ch = TokenFactor t669, t671
Legalizing node: t670: i32 = add nuw FrameIndex:i32<21>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t147: i32 = FrameIndex<21>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t670: i32 = add nuw FrameIndex:i32<21>, Constant:i32<4>

Legalizing node: t667: i32,i32 = usubo Constant:i32<0>, t144
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t144: i32 = mul nsw t142, Constant:i32<19>
Legal operand
Legally typed node: t667: i32,i32 = usubo Constant:i32<0>, t144

Legalizing node: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t667: i32,i32 = usubo Constant:i32<0>, t144
Legal operand
Analyzing operand: t147: i32 = FrameIndex<21>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32

Legalizing node: t666: i32 = sra t144, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t144: i32 = mul nsw t142, Constant:i32<19>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t666: i32 = sra t144, Constant:i32<31>

Legalizing node: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t666: i32 = sra t144, Constant:i32<31>
Legal operand
Analyzing operand: t667: i32,i32 = usubo Constant:i32<0>, t144
Legal operand
Legally typed node: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1

Legalizing node: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t670, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
Legal operand
Analyzing operand: t670: i32 = add nuw FrameIndex:i32<21>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t670, undef:i32

Legalizing node: t672: ch = TokenFactor t669, t671
Analyzing result type: ch
Legal result type
Analyzing operand: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32
Legal operand
Analyzing operand: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t670, undef:i32
Legal operand
Legally typed node: t672: ch = TokenFactor t669, t671

Legalizing node: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t672: ch = TokenFactor t669, t671
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32

Legalizing node: t151: i32 = mul nsw t149, Constant:i32<20>
Analyzing result type: i32
Legal result type
Analyzing operand: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t150: i32 = Constant<20>
Legal operand
Legally typed node: t151: i32 = mul nsw t149, Constant:i32<20>

Legalizing node: t152: i64 = sign_extend t151
Analyzing result type: i64
Expand integer result: t152: i64 = sign_extend t151

Creating new node: t673: i32 = sra t151, Constant:i32<31>
Legalizing node: t504: i64 = sub Constant:i64<0>, t152
Analyzing result type: i64
Expand integer result: t504: i64 = sub Constant:i64<0>, t152

Creating new node: t674: i32,i32 = usubo Constant:i32<0>, t151
Creating new node: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
Legalizing node: t155: ch = store<(store (s64) into %ir.26)> t149:1, t504, FrameIndex:i32<22>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t504: i64 = sub Constant:i64<0>, t152
Expand integer operand: t155: ch = store<(store (s64) into %ir.26)> t149:1, t504, FrameIndex:i32<22>, undef:i32

Lowering node: t155: ch = store<(store (s64) into %ir.<badref>)> t149:1, t504, FrameIndex:i32<22>, undef:i32
Creating new node: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32
Creating new node: t677: i32 = add nuw FrameIndex:i32<22>, Constant:i32<4>
Creating new node: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t677, undef:i32
Creating new node: t679: ch = TokenFactor t676, t678
Legalizing node: t677: i32 = add nuw FrameIndex:i32<22>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t154: i32 = FrameIndex<22>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t677: i32 = add nuw FrameIndex:i32<22>, Constant:i32<4>

Legalizing node: t674: i32,i32 = usubo Constant:i32<0>, t151
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t151: i32 = mul nsw t149, Constant:i32<20>
Legal operand
Legally typed node: t674: i32,i32 = usubo Constant:i32<0>, t151

Legalizing node: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t674: i32,i32 = usubo Constant:i32<0>, t151
Legal operand
Analyzing operand: t154: i32 = FrameIndex<22>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32

Legalizing node: t673: i32 = sra t151, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t151: i32 = mul nsw t149, Constant:i32<20>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t673: i32 = sra t151, Constant:i32<31>

Legalizing node: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t673: i32 = sra t151, Constant:i32<31>
Legal operand
Analyzing operand: t674: i32,i32 = usubo Constant:i32<0>, t151
Legal operand
Legally typed node: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1

Legalizing node: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t677, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
Legal operand
Analyzing operand: t677: i32 = add nuw FrameIndex:i32<22>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t677, undef:i32

Legalizing node: t679: ch = TokenFactor t676, t678
Analyzing result type: ch
Legal result type
Analyzing operand: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32
Legal operand
Analyzing operand: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t677, undef:i32
Legal operand
Legally typed node: t679: ch = TokenFactor t676, t678

Legalizing node: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t679: ch = TokenFactor t676, t678
Legal operand
Analyzing operand: t13: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32

Legalizing node: t158: i32 = mul nsw t156, Constant:i32<21>
Analyzing result type: i32
Legal result type
Analyzing operand: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t157: i32 = Constant<21>
Legal operand
Legally typed node: t158: i32 = mul nsw t156, Constant:i32<21>

Legalizing node: t159: i64 = sign_extend t158
Analyzing result type: i64
Expand integer result: t159: i64 = sign_extend t158

Creating new node: t680: i32 = sra t158, Constant:i32<31>
Legalizing node: t503: i64 = sub Constant:i64<0>, t159
Analyzing result type: i64
Expand integer result: t503: i64 = sub Constant:i64<0>, t159

Creating new node: t681: i32,i32 = usubo Constant:i32<0>, t158
Creating new node: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
Legalizing node: t162: ch = store<(store (s64) into %ir.27)> t156:1, t503, FrameIndex:i32<23>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t503: i64 = sub Constant:i64<0>, t159
Expand integer operand: t162: ch = store<(store (s64) into %ir.27)> t156:1, t503, FrameIndex:i32<23>, undef:i32

Lowering node: t162: ch = store<(store (s64) into %ir.<badref>)> t156:1, t503, FrameIndex:i32<23>, undef:i32
Creating new node: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32
Creating new node: t684: i32 = add nuw FrameIndex:i32<23>, Constant:i32<4>
Creating new node: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t684, undef:i32
Creating new node: t686: ch = TokenFactor t683, t685
Legalizing node: t684: i32 = add nuw FrameIndex:i32<23>, Constant:i32<4>
Analyzing result type: i32
Legal result type
Analyzing operand: t161: i32 = FrameIndex<23>
Legal operand
Analyzing operand: t38: i32 = Constant<4>
Legal operand
Legally typed node: t684: i32 = add nuw FrameIndex:i32<23>, Constant:i32<4>

Legalizing node: t681: i32,i32 = usubo Constant:i32<0>, t158
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t158: i32 = mul nsw t156, Constant:i32<21>
Legal operand
Legally typed node: t681: i32,i32 = usubo Constant:i32<0>, t158

Legalizing node: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t681: i32,i32 = usubo Constant:i32<0>, t158
Legal operand
Analyzing operand: t161: i32 = FrameIndex<23>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32

Legalizing node: t680: i32 = sra t158, Constant:i32<31>
Analyzing result type: i32
Legal result type
Analyzing operand: t158: i32 = mul nsw t156, Constant:i32<21>
Legal operand
Analyzing operand: t539: i32 = Constant<31>
Legal operand
Legally typed node: t680: i32 = sra t158, Constant:i32<31>

Legalizing node: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t680: i32 = sra t158, Constant:i32<31>
Legal operand
Analyzing operand: t681: i32,i32 = usubo Constant:i32<0>, t158
Legal operand
Legally typed node: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1

Legalizing node: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t684, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
Legal operand
Analyzing operand: t684: i32 = add nuw FrameIndex:i32<23>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t684, undef:i32

Legalizing node: t686: ch = TokenFactor t683, t685
Analyzing result type: ch
Legal result type
Analyzing operand: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32
Legal operand
Analyzing operand: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t684, undef:i32
Legal operand
Legally typed node: t686: ch = TokenFactor t683, t685

Legalizing node: t205: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t686, FrameIndex:i32<23>, undef:i32
Analyzing result type: i64
Expand integer result: t205: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t686, FrameIndex:i32<23>, undef:i32

Creating new node: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
Creating new node: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32
Creating new node: t689: ch = TokenFactor t687:1, t688:1
Legalizing node: t206: i64 = xor t205, Constant:i64<-1>
Analyzing result type: i64
Expand integer result: t206: i64 = xor t205, Constant:i64<-1>

Creating new node: t690: i32 = xor t687, Constant:i32<-1>
Creating new node: t691: i32 = xor t688, Constant:i32<-1>
Legalizing node: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t684: i32 = add FrameIndex:i32<23>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32

Legalizing node: t691: i32 = xor t688, Constant:i32<-1>
Analyzing result type: i32
Legal result type
Analyzing operand: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32
Legal operand
Analyzing operand: t537: i32 = Constant<-1>
Legal operand
Legally typed node: t691: i32 = xor t688, Constant:i32<-1>

Legalizing node: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t161: i32 = FrameIndex<23>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32

Legalizing node: t689: ch = TokenFactor t687:1, t688:1
Analyzing result type: ch
Legal result type
Analyzing operand: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
Legal operand
Analyzing operand: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32
Legal operand
Legally typed node: t689: ch = TokenFactor t687:1, t688:1

Legalizing node: t690: i32 = xor t687, Constant:i32<-1>
Analyzing result type: i32
Legal result type
Analyzing operand: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
Legal operand
Analyzing operand: t537: i32 = Constant<-1>
Legal operand
Legally typed node: t690: i32 = xor t687, Constant:i32<-1>

Legalizing node: t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t686, FrameIndex:i32<22>, undef:i32
Analyzing result type: i64
Expand integer result: t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t686, FrameIndex:i32<22>, undef:i32

Creating new node: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
Creating new node: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32
Creating new node: t694: ch = TokenFactor t692:1, t693:1
Legalizing node: t207: i64 = srem t204, t206
Analyzing result type: i64
Expand integer result: t207: i64 = srem t204, t206

Creating new node: t696: i32 = extract_element t204, Constant:i32<1>
Creating new node: t697: i32 = extract_element t204, Constant:i32<0>
Creating new node: t698: i32 = extract_element t206, Constant:i32<1>
Creating new node: t699: i32 = extract_element t206, Constant:i32<0>
Creating new node: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t702: i32,ch = CopyFromReg t700, Register:i32 $sp
Creating new node: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t697
Creating new node: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t696, t703:1
Creating new node: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t699, t705:1
Creating new node: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t698, t706:1
Creating new node: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
Creating new node: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
Creating new node: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Creating new node: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
Creating new node: t713: i64 = build_pair t711, t712
Creating new node: t714: i32 = truncate t713
Creating constant: t715: i32 = Constant<32>
Creating new node: t716: i64 = srl t713, Constant:i32<32>
Creating new node: t717: i32 = truncate t716
Legalizing node: t715: i32 = Constant<32>
Analyzing result type: i32
Legal result type
Legally typed node: t715: i32 = Constant<32>

Legalizing node: t708: i32 = TargetExternalSymbol'__moddi3'
Analyzing result type: i32
Legal result type
Legally typed node: t708: i32 = TargetExternalSymbol'__moddi3'

Legalizing node: t698: i32 = extract_element t206, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t206: i64 = xor t205, Constant:i64<-1>
Expand integer operand: t698: i32 = extract_element t206, Constant:i32<1>

Legalizing node: t699: i32 = extract_element t206, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t206: i64 = xor t205, Constant:i64<-1>
Expand integer operand: t699: i32 = extract_element t206, Constant:i32<0>

Legalizing node: t696: i32 = extract_element t204, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t686, FrameIndex:i32<22>, undef:i32
Expand integer operand: t696: i32 = extract_element t204, Constant:i32<1>

Legalizing node: t704: i32 = Register $r1
Ignoring node results
Legally typed node: t704: i32 = Register $r1

Legalizing node: t697: i32 = extract_element t204, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t204: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t686, FrameIndex:i32<22>, undef:i32
Expand integer operand: t697: i32 = extract_element t204, Constant:i32<0>

Legalizing node: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t677: i32 = add FrameIndex:i32<22>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32

Legalizing node: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t154: i32 = FrameIndex<22>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32

Legalizing node: t694: ch = TokenFactor t692:1, t693:1
Analyzing result type: ch
Legal result type
Analyzing operand: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
Legal operand
Analyzing operand: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32
Legal operand
Legally typed node: t694: ch = TokenFactor t692:1, t693:1

Legalizing node: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
Legal operand
Legally typed node: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692

Legalizing node: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
Legal operand
Analyzing operand: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32
Legal operand
Analyzing operand: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
Legal operand
Legally typed node: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

Legalizing node: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
Legal operand
Analyzing operand: t690: i32 = xor t687, Constant:i32<-1>
Legal operand
Analyzing operand: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
Legal operand
Legally typed node: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

Legalizing node: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
Legal operand
Analyzing operand: t691: i32 = xor t688, Constant:i32<-1>
Legal operand
Analyzing operand: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
Legal operand
Legally typed node: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

Legalizing node: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
Legal operand
Analyzing operand: t708: i32 = TargetExternalSymbol'__moddi3'
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
Legal operand
Legally typed node: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1

Legalizing node: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
Legal operand
Analyzing operand: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
Legal operand
Legally typed node: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1

Legalizing node: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
Legal operand
Analyzing operand: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
Legal operand
Legally typed node: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1

Legalizing node: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Legal operand
Analyzing operand: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Legal operand
Legally typed node: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

Legalizing node: t713: i64 = build_pair t711, t712
Analyzing result type: i64
Expand integer result: t713: i64 = build_pair t711, t712

Legalizing node: t714: i32 = truncate t713
Analyzing result type: i32
Legal result type
Analyzing operand: t713: i64 = build_pair t711, t712
Expand integer operand: t714: i32 = truncate t713

Legalizing node: t716: i64 = srl t713, Constant:i32<32>
Analyzing result type: i64
Expand integer result: t716: i64 = srl t713, Constant:i32<32>

Legalizing node: t717: i32 = truncate t716
Analyzing result type: i32
Legal result type
Analyzing operand: t716: i64 = srl t713, Constant:i32<32>
Expand integer operand: t717: i32 = truncate t716

Legalizing node: t199: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t686, FrameIndex:i32<21>, undef:i32
Analyzing result type: i64
Expand integer result: t199: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t686, FrameIndex:i32<21>, undef:i32

Creating new node: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
Creating new node: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32
Creating new node: t720: ch = TokenFactor t718:1, t719:1
Legalizing node: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t670: i32 = add FrameIndex:i32<21>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32

Legalizing node: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t147: i32 = FrameIndex<21>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32

Legalizing node: t720: ch = TokenFactor t718:1, t719:1
Analyzing result type: ch
Legal result type
Analyzing operand: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
Legal operand
Analyzing operand: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32
Legal operand
Legally typed node: t720: ch = TokenFactor t718:1, t719:1

Legalizing node: t198: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t686, FrameIndex:i32<20>, undef:i32
Analyzing result type: i64
Expand integer result: t198: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t686, FrameIndex:i32<20>, undef:i32

Creating new node: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
Creating new node: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32
Creating new node: t723: ch = TokenFactor t721:1, t722:1
Legalizing node: t200: i64 = add nsw t198, t199
Analyzing result type: i64
Expand integer result: t200: i64 = add nsw t198, t199

Creating new node: t724: i32,i32 = uaddo t721, t718
Creating new node: t725: i32,i32 = addcarry t722, t719, t724:1
Legalizing node: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t663: i32 = add FrameIndex:i32<20>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32

Legalizing node: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t140: i32 = FrameIndex<20>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32

Legalizing node: t723: ch = TokenFactor t721:1, t722:1
Analyzing result type: ch
Legal result type
Analyzing operand: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
Legal operand
Analyzing operand: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32
Legal operand
Legally typed node: t723: ch = TokenFactor t721:1, t722:1

Legalizing node: t724: i32,i32 = uaddo t721, t718
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
Legal operand
Analyzing operand: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
Legal operand
Legally typed node: t724: i32,i32 = uaddo t721, t718

Legalizing node: t725: i32,i32 = addcarry t722, t719, t724:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32
Legal operand
Analyzing operand: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32
Legal operand
Analyzing operand: t724: i32,i32 = uaddo t721, t718
Legal operand
Legally typed node: t725: i32,i32 = addcarry t722, t719, t724:1

Legalizing node: t196: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t686, FrameIndex:i32<19>, undef:i32
Analyzing result type: i64
Expand integer result: t196: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t686, FrameIndex:i32<19>, undef:i32

Creating new node: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
Creating new node: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32
Creating new node: t728: ch = TokenFactor t726:1, t727:1
Legalizing node: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t656: i32 = add FrameIndex:i32<19>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32

Legalizing node: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t133: i32 = FrameIndex<19>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32

Legalizing node: t728: ch = TokenFactor t726:1, t727:1
Analyzing result type: ch
Legal result type
Analyzing operand: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
Legal operand
Analyzing operand: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32
Legal operand
Legally typed node: t728: ch = TokenFactor t726:1, t727:1

Legalizing node: t194: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t686, FrameIndex:i32<18>, undef:i32
Analyzing result type: i64
Expand integer result: t194: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t686, FrameIndex:i32<18>, undef:i32

Creating new node: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
Creating new node: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32
Creating new node: t731: ch = TokenFactor t729:1, t730:1
Legalizing node: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t649: i32 = add FrameIndex:i32<18>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32

Legalizing node: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t126: i32 = FrameIndex<18>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32

Legalizing node: t731: ch = TokenFactor t729:1, t730:1
Analyzing result type: ch
Legal result type
Analyzing operand: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
Legal operand
Analyzing operand: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32
Legal operand
Legally typed node: t731: ch = TokenFactor t729:1, t730:1

Legalizing node: t193: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t686, FrameIndex:i32<17>, undef:i32
Analyzing result type: i64
Expand integer result: t193: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t686, FrameIndex:i32<17>, undef:i32

Creating new node: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
Creating new node: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32
Creating new node: t734: ch = TokenFactor t732:1, t733:1
Legalizing node: t195: i64 = sub nsw t193, t194
Analyzing result type: i64
Expand integer result: t195: i64 = sub nsw t193, t194

Creating new node: t735: i32,i32 = usubo t732, t729
Creating new node: t736: i32,i32 = subcarry t733, t730, t735:1
Legalizing node: t197: i64 = sub nsw t195, t196
Analyzing result type: i64
Expand integer result: t197: i64 = sub nsw t195, t196

Creating new node: t737: i32,i32 = usubo t735, t726
Creating new node: t738: i32,i32 = subcarry t736, t727, t737:1
Legalizing node: t201: i64 = and t197, t200
Analyzing result type: i64
Expand integer result: t201: i64 = and t197, t200

Creating new node: t739: i32 = and t737, t724
Creating new node: t740: i32 = and t738, t725
Legalizing node: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t642: i32 = add FrameIndex:i32<17>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32

Legalizing node: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t119: i32 = FrameIndex<17>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32

Legalizing node: t734: ch = TokenFactor t732:1, t733:1
Analyzing result type: ch
Legal result type
Analyzing operand: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
Legal operand
Analyzing operand: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32
Legal operand
Legally typed node: t734: ch = TokenFactor t732:1, t733:1

Legalizing node: t735: i32,i32 = usubo t732, t729
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
Legal operand
Analyzing operand: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
Legal operand
Legally typed node: t735: i32,i32 = usubo t732, t729

Legalizing node: t736: i32,i32 = subcarry t733, t730, t735:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32
Legal operand
Analyzing operand: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32
Legal operand
Analyzing operand: t735: i32,i32 = usubo t732, t729
Legal operand
Legally typed node: t736: i32,i32 = subcarry t733, t730, t735:1

Legalizing node: t737: i32,i32 = usubo t735, t726
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t735: i32,i32 = usubo t732, t729
Legal operand
Analyzing operand: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
Legal operand
Legally typed node: t737: i32,i32 = usubo t735, t726

Legalizing node: t738: i32,i32 = subcarry t736, t727, t737:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t736: i32,i32 = subcarry t733, t730, t735:1
Legal operand
Analyzing operand: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32
Legal operand
Analyzing operand: t737: i32,i32 = usubo t735, t726
Legal operand
Legally typed node: t738: i32,i32 = subcarry t736, t727, t737:1

Legalizing node: t740: i32 = and t738, t725
Analyzing result type: i32
Legal result type
Analyzing operand: t738: i32,i32 = subcarry t736, t727, t737:1
Legal operand
Analyzing operand: t725: i32,i32 = addcarry t722, t719, t724:1
Legal operand
Legally typed node: t740: i32 = and t738, t725

Legalizing node: t739: i32 = and t737, t724
Analyzing result type: i32
Legal result type
Analyzing operand: t737: i32,i32 = usubo t735, t726
Legal operand
Analyzing operand: t724: i32,i32 = uaddo t721, t718
Legal operand
Legally typed node: t739: i32 = and t737, t724

Legalizing node: t192: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t686, FrameIndex:i32<16>, undef:i32
Analyzing result type: i64
Expand integer result: t192: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t686, FrameIndex:i32<16>, undef:i32

Creating new node: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
Creating new node: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32
Creating new node: t743: ch = TokenFactor t741:1, t742:1
Legalizing node: t202: i64 = xor t192, t201
Analyzing result type: i64
Expand integer result: t202: i64 = xor t192, t201

Creating new node: t744: i32 = xor t741, t739
Creating new node: t745: i32 = xor t742, t740
Legalizing node: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t635: i32 = add FrameIndex:i32<16>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32

Legalizing node: t745: i32 = xor t742, t740
Analyzing result type: i32
Legal result type
Analyzing operand: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32
Legal operand
Analyzing operand: t740: i32 = and t738, t725
Legal operand
Legally typed node: t745: i32 = xor t742, t740

Legalizing node: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t112: i32 = FrameIndex<16>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32

Legalizing node: t743: ch = TokenFactor t741:1, t742:1
Analyzing result type: ch
Legal result type
Analyzing operand: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
Legal operand
Analyzing operand: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32
Legal operand
Legally typed node: t743: ch = TokenFactor t741:1, t742:1

Legalizing node: t744: i32 = xor t741, t739
Analyzing result type: i32
Legal result type
Analyzing operand: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
Legal operand
Analyzing operand: t739: i32 = and t737, t724
Legal operand
Legally typed node: t744: i32 = xor t741, t739

Legalizing node: t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t686, FrameIndex:i32<15>, undef:i32
Analyzing result type: i64
Expand integer result: t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t686, FrameIndex:i32<15>, undef:i32

Creating new node: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
Creating new node: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32
Creating new node: t748: ch = TokenFactor t746:1, t747:1
Legalizing node: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t628: i32 = add FrameIndex:i32<15>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32

Legalizing node: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t105: i32 = FrameIndex<15>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32

Legalizing node: t748: ch = TokenFactor t746:1, t747:1
Analyzing result type: ch
Legal result type
Analyzing operand: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
Legal operand
Analyzing operand: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32
Legal operand
Legally typed node: t748: ch = TokenFactor t746:1, t747:1

Legalizing node: t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t686, FrameIndex:i32<14>, undef:i32
Analyzing result type: i64
Expand integer result: t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t686, FrameIndex:i32<14>, undef:i32

Creating new node: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
Creating new node: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32
Creating new node: t751: ch = TokenFactor t749:1, t750:1
Legalizing node: t189: i64 = mul nsw t187, t188
Analyzing result type: i64
Expand integer result: t189: i64 = mul nsw t187, t188

Creating new node: t753: i32 = extract_element t187, Constant:i32<1>
Creating new node: t754: i32 = extract_element t187, Constant:i32<0>
Creating new node: t755: i32 = extract_element t188, Constant:i32<1>
Creating new node: t756: i32 = extract_element t188, Constant:i32<0>
Creating new node: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t758: i32,ch = CopyFromReg t757, Register:i32 $sp
Creating new node: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t754
Creating new node: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t753, t759:1
Creating new node: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t756, t760:1
Creating new node: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t755, t761:1
Creating new node: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
Creating new node: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
Creating new node: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Creating new node: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
Creating new node: t768: i64 = build_pair t766, t767
Creating new node: t769: i32 = truncate t768
Creating new node: t770: i64 = srl t768, Constant:i32<32>
Creating new node: t771: i32 = truncate t770
Legalizing node: t763: i32 = TargetExternalSymbol'__muldi3'
Analyzing result type: i32
Legal result type
Legally typed node: t763: i32 = TargetExternalSymbol'__muldi3'

Legalizing node: t755: i32 = extract_element t188, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t686, FrameIndex:i32<15>, undef:i32
Expand integer operand: t755: i32 = extract_element t188, Constant:i32<1>

Legalizing node: t756: i32 = extract_element t188, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t188: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t686, FrameIndex:i32<15>, undef:i32
Expand integer operand: t756: i32 = extract_element t188, Constant:i32<0>

Legalizing node: t753: i32 = extract_element t187, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t686, FrameIndex:i32<14>, undef:i32
Expand integer operand: t753: i32 = extract_element t187, Constant:i32<1>

Legalizing node: t754: i32 = extract_element t187, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t187: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t686, FrameIndex:i32<14>, undef:i32
Expand integer operand: t754: i32 = extract_element t187, Constant:i32<0>

Legalizing node: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t621: i32 = add FrameIndex:i32<14>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32

Legalizing node: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t98: i32 = FrameIndex<14>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32

Legalizing node: t751: ch = TokenFactor t749:1, t750:1
Analyzing result type: ch
Legal result type
Analyzing operand: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
Legal operand
Analyzing operand: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32
Legal operand
Legally typed node: t751: ch = TokenFactor t749:1, t750:1

Legalizing node: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
Legal operand
Legally typed node: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749

Legalizing node: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
Legal operand
Analyzing operand: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32
Legal operand
Analyzing operand: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
Legal operand
Legally typed node: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

Legalizing node: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
Legal operand
Analyzing operand: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
Legal operand
Analyzing operand: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
Legal operand
Legally typed node: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

Legalizing node: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
Legal operand
Analyzing operand: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32
Legal operand
Analyzing operand: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
Legal operand
Legally typed node: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

Legalizing node: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
Legal operand
Analyzing operand: t763: i32 = TargetExternalSymbol'__muldi3'
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
Legal operand
Legally typed node: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1

Legalizing node: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
Legal operand
Analyzing operand: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
Legal operand
Legally typed node: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1

Legalizing node: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
Legal operand
Analyzing operand: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
Legal operand
Legally typed node: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1

Legalizing node: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Legal operand
Analyzing operand: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Legal operand
Legally typed node: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

Legalizing node: t768: i64 = build_pair t766, t767
Analyzing result type: i64
Expand integer result: t768: i64 = build_pair t766, t767

Legalizing node: t769: i32 = truncate t768
Analyzing result type: i32
Legal result type
Analyzing operand: t768: i64 = build_pair t766, t767
Expand integer operand: t769: i32 = truncate t768

Legalizing node: t770: i64 = srl t768, Constant:i32<32>
Analyzing result type: i64
Expand integer result: t770: i64 = srl t768, Constant:i32<32>

Legalizing node: t771: i32 = truncate t770
Analyzing result type: i32
Legal result type
Analyzing operand: t770: i64 = srl t768, Constant:i32<32>
Expand integer operand: t771: i32 = truncate t770

Legalizing node: t184: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t686, FrameIndex:i32<13>, undef:i32
Analyzing result type: i64
Expand integer result: t184: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t686, FrameIndex:i32<13>, undef:i32

Creating new node: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
Creating new node: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32
Creating new node: t774: ch = TokenFactor t772:1, t773:1
Legalizing node: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t614: i32 = add FrameIndex:i32<13>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32

Legalizing node: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t91: i32 = FrameIndex<13>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32

Legalizing node: t774: ch = TokenFactor t772:1, t773:1
Analyzing result type: ch
Legal result type
Analyzing operand: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
Legal operand
Analyzing operand: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32
Legal operand
Legally typed node: t774: ch = TokenFactor t772:1, t773:1

Legalizing node: t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t686, FrameIndex:i32<12>, undef:i32
Analyzing result type: i64
Expand integer result: t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t686, FrameIndex:i32<12>, undef:i32

Creating new node: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
Creating new node: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32
Creating new node: t777: ch = TokenFactor t775:1, t776:1
Legalizing node: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t607: i32 = add FrameIndex:i32<12>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32

Legalizing node: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t84: i32 = FrameIndex<12>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32

Legalizing node: t777: ch = TokenFactor t775:1, t776:1
Analyzing result type: ch
Legal result type
Analyzing operand: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
Legal operand
Analyzing operand: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32
Legal operand
Legally typed node: t777: ch = TokenFactor t775:1, t776:1

Legalizing node: t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t686, FrameIndex:i32<11>, undef:i32
Analyzing result type: i64
Expand integer result: t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t686, FrameIndex:i32<11>, undef:i32

Creating new node: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
Creating new node: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32
Creating new node: t780: ch = TokenFactor t778:1, t779:1
Legalizing node: t183: i64 = srem t181, t182
Analyzing result type: i64
Expand integer result: t183: i64 = srem t181, t182

Creating new node: t781: i32 = extract_element t181, Constant:i32<1>
Creating new node: t782: i32 = extract_element t181, Constant:i32<0>
Creating new node: t783: i32 = extract_element t182, Constant:i32<1>
Creating new node: t784: i32 = extract_element t182, Constant:i32<0>
Creating new node: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t786: i32,ch = CopyFromReg t785, Register:i32 $sp
Creating new node: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t782
Creating new node: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t781, t787:1
Creating new node: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t784, t788:1
Creating new node: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t783, t789:1
Creating new node: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
Creating new node: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
Creating new node: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Creating new node: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
Creating new node: t795: i64 = build_pair t793, t794
Creating new node: t796: i32 = truncate t795
Creating new node: t797: i64 = srl t795, Constant:i32<32>
Creating new node: t798: i32 = truncate t797
Legalizing node: t185: i64 = add nsw t183, t184
Analyzing result type: i64
Expand integer result: t185: i64 = add nsw t183, t184

Creating new node: t799: i32,i32 = uaddo t796, t772
Creating new node: t800: i32,i32 = addcarry t798, t773, t799:1
Legalizing node: t783: i32 = extract_element t182, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t686, FrameIndex:i32<12>, undef:i32
Expand integer operand: t783: i32 = extract_element t182, Constant:i32<1>

Legalizing node: t784: i32 = extract_element t182, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t182: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t686, FrameIndex:i32<12>, undef:i32
Expand integer operand: t784: i32 = extract_element t182, Constant:i32<0>

Legalizing node: t781: i32 = extract_element t181, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t686, FrameIndex:i32<11>, undef:i32
Expand integer operand: t781: i32 = extract_element t181, Constant:i32<1>

Legalizing node: t782: i32 = extract_element t181, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t181: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t686, FrameIndex:i32<11>, undef:i32
Expand integer operand: t782: i32 = extract_element t181, Constant:i32<0>

Legalizing node: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t600: i32 = add FrameIndex:i32<11>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32

Legalizing node: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t77: i32 = FrameIndex<11>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32

Legalizing node: t780: ch = TokenFactor t778:1, t779:1
Analyzing result type: ch
Legal result type
Analyzing operand: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
Legal operand
Analyzing operand: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32
Legal operand
Legally typed node: t780: ch = TokenFactor t778:1, t779:1

Legalizing node: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
Legal operand
Legally typed node: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778

Legalizing node: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
Legal operand
Analyzing operand: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32
Legal operand
Analyzing operand: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
Legal operand
Legally typed node: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

Legalizing node: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
Legal operand
Analyzing operand: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
Legal operand
Analyzing operand: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
Legal operand
Legally typed node: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

Legalizing node: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
Legal operand
Analyzing operand: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32
Legal operand
Analyzing operand: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
Legal operand
Legally typed node: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

Legalizing node: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
Legal operand
Analyzing operand: t708: i32 = TargetExternalSymbol'__moddi3'
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
Legal operand
Legally typed node: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1

Legalizing node: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
Legal operand
Analyzing operand: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
Legal operand
Legally typed node: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1

Legalizing node: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
Legal operand
Analyzing operand: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
Legal operand
Legally typed node: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1

Legalizing node: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Legal operand
Analyzing operand: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Legal operand
Legally typed node: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

Legalizing node: t795: i64 = build_pair t793, t794
Analyzing result type: i64
Expand integer result: t795: i64 = build_pair t793, t794

Legalizing node: t796: i32 = truncate t795
Analyzing result type: i32
Legal result type
Analyzing operand: t795: i64 = build_pair t793, t794
Expand integer operand: t796: i32 = truncate t795

Legalizing node: t799: i32,i32 = uaddo t793, t772
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Legal operand
Analyzing operand: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
Legal operand
Legally typed node: t799: i32,i32 = uaddo t793, t772

Legalizing node: t797: i64 = srl t795, Constant:i32<32>
Analyzing result type: i64
Expand integer result: t797: i64 = srl t795, Constant:i32<32>

Legalizing node: t798: i32 = truncate t797
Analyzing result type: i32
Legal result type
Analyzing operand: t797: i64 = srl t795, Constant:i32<32>
Expand integer operand: t798: i32 = truncate t797

Legalizing node: t800: i32,i32 = addcarry t794, t773, t799:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
Legal operand
Analyzing operand: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32
Legal operand
Analyzing operand: t799: i32,i32 = uaddo t793, t772
Legal operand
Legally typed node: t800: i32,i32 = addcarry t794, t773, t799:1

Legalizing node: t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t686, FrameIndex:i32<10>, undef:i32
Analyzing result type: i64
Expand integer result: t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t686, FrameIndex:i32<10>, undef:i32

Creating new node: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
Creating new node: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32
Creating new node: t803: ch = TokenFactor t801:1, t802:1
Legalizing node: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t593: i32 = add FrameIndex:i32<10>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32

Legalizing node: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t70: i32 = FrameIndex<10>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32

Legalizing node: t803: ch = TokenFactor t801:1, t802:1
Analyzing result type: ch
Legal result type
Analyzing operand: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
Legal operand
Analyzing operand: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32
Legal operand
Legally typed node: t803: ch = TokenFactor t801:1, t802:1

Legalizing node: t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t686, FrameIndex:i32<9>, undef:i32
Analyzing result type: i64
Expand integer result: t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t686, FrameIndex:i32<9>, undef:i32

Creating new node: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
Creating new node: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32
Creating new node: t806: ch = TokenFactor t804:1, t805:1
Legalizing node: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t586: i32 = add FrameIndex:i32<9>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32

Legalizing node: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t63: i32 = FrameIndex<9>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32

Legalizing node: t806: ch = TokenFactor t804:1, t805:1
Analyzing result type: ch
Legal result type
Analyzing operand: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
Legal operand
Analyzing operand: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32
Legal operand
Legally typed node: t806: ch = TokenFactor t804:1, t805:1

Legalizing node: t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t686, FrameIndex:i32<8>, undef:i32
Analyzing result type: i64
Expand integer result: t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t686, FrameIndex:i32<8>, undef:i32

Creating new node: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
Creating new node: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32
Creating new node: t809: ch = TokenFactor t807:1, t808:1
Legalizing node: t177: i64 = sdiv t175, t176
Analyzing result type: i64
Expand integer result: t177: i64 = sdiv t175, t176

Creating new node: t811: i32 = extract_element t175, Constant:i32<1>
Creating new node: t812: i32 = extract_element t175, Constant:i32<0>
Creating new node: t813: i32 = extract_element t176, Constant:i32<1>
Creating new node: t814: i32 = extract_element t176, Constant:i32<0>
Creating new node: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t816: i32,ch = CopyFromReg t815, Register:i32 $sp
Creating new node: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t812
Creating new node: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t811, t817:1
Creating new node: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t814, t818:1
Creating new node: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t813, t819:1
Creating new node: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
Creating new node: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
Creating new node: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Creating new node: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
Creating new node: t826: i64 = build_pair t824, t825
Creating new node: t827: i32 = truncate t826
Creating new node: t828: i64 = srl t826, Constant:i32<32>
Creating new node: t829: i32 = truncate t828
Legalizing node: t179: i64 = srem t177, t178
Analyzing result type: i64
Expand integer result: t179: i64 = srem t177, t178

Creating new node: t830: i32 = extract_element t177, Constant:i32<1>
Creating new node: t831: i32 = extract_element t177, Constant:i32<0>
Creating new node: t832: i32 = extract_element t178, Constant:i32<1>
Creating new node: t833: i32 = extract_element t178, Constant:i32<0>
Creating new node: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t835: i32,ch = CopyFromReg t834, Register:i32 $sp
Creating new node: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t831
Creating new node: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t830, t836:1
Creating new node: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t833, t837:1
Creating new node: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t832, t838:1
Creating new node: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
Creating new node: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
Creating new node: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Creating new node: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
Creating new node: t844: i64 = build_pair t842, t843
Creating new node: t845: i32 = truncate t844
Creating new node: t846: i64 = srl t844, Constant:i32<32>
Creating new node: t847: i32 = truncate t846
Legalizing node: t832: i32 = extract_element t178, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t686, FrameIndex:i32<10>, undef:i32
Expand integer operand: t832: i32 = extract_element t178, Constant:i32<1>

Legalizing node: t833: i32 = extract_element t178, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t178: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t686, FrameIndex:i32<10>, undef:i32
Expand integer operand: t833: i32 = extract_element t178, Constant:i32<0>

Legalizing node: t830: i32 = extract_element t177, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t177: i64 = sdiv t175, t176
Expand integer operand: t830: i32 = extract_element t177, Constant:i32<1>

Legalizing node: t831: i32 = extract_element t177, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t177: i64 = sdiv t175, t176
Expand integer operand: t831: i32 = extract_element t177, Constant:i32<0>

Legalizing node: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t821: i32 = TargetExternalSymbol'__divdi3'
Analyzing result type: i32
Legal result type
Legally typed node: t821: i32 = TargetExternalSymbol'__divdi3'

Legalizing node: t813: i32 = extract_element t176, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t686, FrameIndex:i32<9>, undef:i32
Expand integer operand: t813: i32 = extract_element t176, Constant:i32<1>

Legalizing node: t814: i32 = extract_element t176, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t176: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t686, FrameIndex:i32<9>, undef:i32
Expand integer operand: t814: i32 = extract_element t176, Constant:i32<0>

Legalizing node: t811: i32 = extract_element t175, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t686, FrameIndex:i32<8>, undef:i32
Expand integer operand: t811: i32 = extract_element t175, Constant:i32<1>

Legalizing node: t812: i32 = extract_element t175, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t175: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t686, FrameIndex:i32<8>, undef:i32
Expand integer operand: t812: i32 = extract_element t175, Constant:i32<0>

Legalizing node: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t579: i32 = add FrameIndex:i32<8>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32

Legalizing node: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t56: i32 = FrameIndex<8>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32

Legalizing node: t809: ch = TokenFactor t807:1, t808:1
Analyzing result type: ch
Legal result type
Analyzing operand: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
Legal operand
Analyzing operand: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32
Legal operand
Legally typed node: t809: ch = TokenFactor t807:1, t808:1

Legalizing node: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
Legal operand
Legally typed node: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807

Legalizing node: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
Legal operand
Analyzing operand: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32
Legal operand
Analyzing operand: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
Legal operand
Legally typed node: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

Legalizing node: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
Legal operand
Analyzing operand: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
Legal operand
Analyzing operand: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
Legal operand
Legally typed node: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

Legalizing node: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
Legal operand
Analyzing operand: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32
Legal operand
Analyzing operand: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
Legal operand
Legally typed node: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

Legalizing node: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
Legal operand
Analyzing operand: t821: i32 = TargetExternalSymbol'__divdi3'
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
Legal operand
Legally typed node: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1

Legalizing node: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
Legal operand
Analyzing operand: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
Legal operand
Legally typed node: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1

Legalizing node: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
Legal operand
Analyzing operand: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
Legal operand
Legally typed node: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1

Legalizing node: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Legal operand
Analyzing operand: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Legal operand
Legally typed node: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

Legalizing node: t826: i64 = build_pair t824, t825
Analyzing result type: i64
Expand integer result: t826: i64 = build_pair t824, t825

Legalizing node: t827: i32 = truncate t826
Analyzing result type: i32
Legal result type
Analyzing operand: t826: i64 = build_pair t824, t825
Expand integer operand: t827: i32 = truncate t826

Legalizing node: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Legal operand
Legally typed node: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824

Legalizing node: t828: i64 = srl t826, Constant:i32<32>
Analyzing result type: i64
Expand integer result: t828: i64 = srl t826, Constant:i32<32>

Legalizing node: t829: i32 = truncate t828
Analyzing result type: i32
Legal result type
Analyzing operand: t828: i64 = srl t826, Constant:i32<32>
Expand integer operand: t829: i32 = truncate t828

Legalizing node: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
Legal operand
Analyzing operand: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
Legal operand
Analyzing operand: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
Legal operand
Legally typed node: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

Legalizing node: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
Legal operand
Analyzing operand: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
Legal operand
Analyzing operand: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
Legal operand
Legally typed node: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

Legalizing node: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
Legal operand
Analyzing operand: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32
Legal operand
Analyzing operand: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
Legal operand
Legally typed node: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

Legalizing node: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
Legal operand
Analyzing operand: t708: i32 = TargetExternalSymbol'__moddi3'
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
Legal operand
Legally typed node: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1

Legalizing node: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
Legal operand
Analyzing operand: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
Legal operand
Legally typed node: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1

Legalizing node: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
Legal operand
Analyzing operand: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
Legal operand
Legally typed node: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1

Legalizing node: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Legal operand
Analyzing operand: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Legal operand
Legally typed node: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

Legalizing node: t844: i64 = build_pair t842, t843
Analyzing result type: i64
Expand integer result: t844: i64 = build_pair t842, t843

Legalizing node: t845: i32 = truncate t844
Analyzing result type: i32
Legal result type
Analyzing operand: t844: i64 = build_pair t842, t843
Expand integer operand: t845: i32 = truncate t844

Legalizing node: t846: i64 = srl t844, Constant:i32<32>
Analyzing result type: i64
Expand integer result: t846: i64 = srl t844, Constant:i32<32>

Legalizing node: t847: i32 = truncate t846
Analyzing result type: i32
Legal result type
Analyzing operand: t846: i64 = srl t844, Constant:i32<32>
Expand integer operand: t847: i32 = truncate t846

Legalizing node: t174: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t686, FrameIndex:i32<7>, undef:i32
Analyzing result type: i64
Expand integer result: t174: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t686, FrameIndex:i32<7>, undef:i32

Creating new node: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
Creating new node: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32
Creating new node: t850: ch = TokenFactor t848:1, t849:1
Legalizing node: t180: i64 = add nsw t174, t179
Analyzing result type: i64
Expand integer result: t180: i64 = add nsw t174, t179

Creating new node: t851: i32,i32 = uaddo t848, t842
Creating new node: t852: i32,i32 = addcarry t849, t843, t851:1
Legalizing node: t186: i64 = and t180, t185
Analyzing result type: i64
Expand integer result: t186: i64 = and t180, t185

Creating new node: t853: i32 = and t851, t799
Creating new node: t854: i32 = and t852, t800
Legalizing node: t190: i64 = and t186, t189
Analyzing result type: i64
Expand integer result: t190: i64 = and t186, t189

Creating new node: t855: i32 = and t853, t766
Creating new node: t856: i32 = and t854, t767
Legalizing node: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t572: i32 = add FrameIndex:i32<7>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32

Legalizing node: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t49: i32 = FrameIndex<7>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32

Legalizing node: t850: ch = TokenFactor t848:1, t849:1
Analyzing result type: ch
Legal result type
Analyzing operand: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
Legal operand
Analyzing operand: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32
Legal operand
Legally typed node: t850: ch = TokenFactor t848:1, t849:1

Legalizing node: t851: i32,i32 = uaddo t848, t842
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
Legal operand
Analyzing operand: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Legal operand
Legally typed node: t851: i32,i32 = uaddo t848, t842

Legalizing node: t852: i32,i32 = addcarry t849, t843, t851:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32
Legal operand
Analyzing operand: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
Legal operand
Analyzing operand: t851: i32,i32 = uaddo t848, t842
Legal operand
Legally typed node: t852: i32,i32 = addcarry t849, t843, t851:1

Legalizing node: t854: i32 = and t852, t800
Analyzing result type: i32
Legal result type
Analyzing operand: t852: i32,i32 = addcarry t849, t843, t851:1
Legal operand
Analyzing operand: t800: i32,i32 = addcarry t794, t773, t799:1
Legal operand
Legally typed node: t854: i32 = and t852, t800

Legalizing node: t856: i32 = and t854, t767
Analyzing result type: i32
Legal result type
Analyzing operand: t854: i32 = and t852, t800
Legal operand
Analyzing operand: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
Legal operand
Legally typed node: t856: i32 = and t854, t767

Legalizing node: t853: i32 = and t851, t799
Analyzing result type: i32
Legal result type
Analyzing operand: t851: i32,i32 = uaddo t848, t842
Legal operand
Analyzing operand: t799: i32,i32 = uaddo t793, t772
Legal operand
Legally typed node: t853: i32 = and t851, t799

Legalizing node: t855: i32 = and t853, t766
Analyzing result type: i32
Legal result type
Analyzing operand: t853: i32 = and t851, t799
Legal operand
Analyzing operand: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Legal operand
Legally typed node: t855: i32 = and t853, t766

Legalizing node: t172: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t686, FrameIndex:i32<6>, undef:i32
Analyzing result type: i64
Expand integer result: t172: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t686, FrameIndex:i32<6>, undef:i32

Creating new node: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
Creating new node: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32
Creating new node: t859: ch = TokenFactor t857:1, t858:1
Legalizing node: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t565: i32 = add FrameIndex:i32<6>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32

Legalizing node: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t42: i32 = FrameIndex<6>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32

Legalizing node: t859: ch = TokenFactor t857:1, t858:1
Analyzing result type: ch
Legal result type
Analyzing operand: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
Legal operand
Analyzing operand: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32
Legal operand
Legally typed node: t859: ch = TokenFactor t857:1, t858:1

Legalizing node: t170: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t686, FrameIndex:i32<5>, undef:i32
Analyzing result type: i64
Expand integer result: t170: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t686, FrameIndex:i32<5>, undef:i32

Creating new node: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
Creating new node: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32
Creating new node: t862: ch = TokenFactor t860:1, t861:1
Legalizing node: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t558: i32 = add FrameIndex:i32<5>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32

Legalizing node: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t35: i32 = FrameIndex<5>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32

Legalizing node: t862: ch = TokenFactor t860:1, t861:1
Analyzing result type: ch
Legal result type
Analyzing operand: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
Legal operand
Analyzing operand: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32
Legal operand
Legally typed node: t862: ch = TokenFactor t860:1, t861:1

Legalizing node: t168: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t686, FrameIndex:i32<4>, undef:i32
Analyzing result type: i64
Expand integer result: t168: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t686, FrameIndex:i32<4>, undef:i32

Creating new node: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
Creating new node: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32
Creating new node: t865: ch = TokenFactor t863:1, t864:1
Legalizing node: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t551: i32 = add FrameIndex:i32<4>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32

Legalizing node: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t28: i32 = FrameIndex<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32

Legalizing node: t865: ch = TokenFactor t863:1, t864:1
Analyzing result type: ch
Legal result type
Analyzing operand: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
Legal operand
Analyzing operand: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32
Legal operand
Legally typed node: t865: ch = TokenFactor t863:1, t864:1

Legalizing node: t167: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t686, FrameIndex:i32<3>, undef:i32
Analyzing result type: i64
Expand integer result: t167: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t686, FrameIndex:i32<3>, undef:i32

Creating new node: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
Creating new node: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32
Creating new node: t868: ch = TokenFactor t866:1, t867:1
Legalizing node: t169: i64 = and t167, t168
Analyzing result type: i64
Expand integer result: t169: i64 = and t167, t168

Creating new node: t869: i32 = and t866, t863
Creating new node: t870: i32 = and t867, t864
Legalizing node: t171: i64 = or t169, t170
Analyzing result type: i64
Expand integer result: t171: i64 = or t169, t170

Creating new node: t871: i32 = or t869, t860
Creating new node: t872: i32 = or t870, t861
Legalizing node: t173: i64 = or t171, t172
Analyzing result type: i64
Expand integer result: t173: i64 = or t171, t172

Creating new node: t873: i32 = or t871, t857
Creating new node: t874: i32 = or t872, t858
Legalizing node: t191: i64 = or t173, t190
Analyzing result type: i64
Expand integer result: t191: i64 = or t173, t190

Creating new node: t875: i32 = or t873, t855
Creating new node: t876: i32 = or t874, t856
Legalizing node: t203: i64 = or t191, t202
Analyzing result type: i64
Expand integer result: t203: i64 = or t191, t202

Creating new node: t877: i32 = or t875, t744
Creating new node: t878: i32 = or t876, t745
Legalizing node: t208: i64 = or t203, t207
Analyzing result type: i64
Expand integer result: t208: i64 = or t203, t207

Creating new node: t879: i32 = or t877, t711
Creating new node: t880: i32 = or t878, t712
Legalizing node: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t544: i32 = add FrameIndex:i32<3>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32

Legalizing node: t870: i32 = and t867, t864
Analyzing result type: i32
Legal result type
Analyzing operand: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32
Legal operand
Analyzing operand: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32
Legal operand
Legally typed node: t870: i32 = and t867, t864

Legalizing node: t872: i32 = or t870, t861
Analyzing result type: i32
Legal result type
Analyzing operand: t870: i32 = and t867, t864
Legal operand
Analyzing operand: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32
Legal operand
Legally typed node: t872: i32 = or t870, t861

Legalizing node: t874: i32 = or t872, t858
Analyzing result type: i32
Legal result type
Analyzing operand: t872: i32 = or t870, t861
Legal operand
Analyzing operand: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32
Legal operand
Legally typed node: t874: i32 = or t872, t858

Legalizing node: t876: i32 = or t874, t856
Analyzing result type: i32
Legal result type
Analyzing operand: t874: i32 = or t872, t858
Legal operand
Analyzing operand: t856: i32 = and t854, t767
Legal operand
Legally typed node: t876: i32 = or t874, t856

Legalizing node: t878: i32 = or t876, t745
Analyzing result type: i32
Legal result type
Analyzing operand: t876: i32 = or t874, t856
Legal operand
Analyzing operand: t745: i32 = xor t742, t740
Legal operand
Legally typed node: t878: i32 = or t876, t745

Legalizing node: t880: i32 = or t878, t712
Analyzing result type: i32
Legal result type
Analyzing operand: t878: i32 = or t876, t745
Legal operand
Analyzing operand: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
Legal operand
Legally typed node: t880: i32 = or t878, t712

Legalizing node: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t21: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32

Legalizing node: t868: ch = TokenFactor t866:1, t867:1
Analyzing result type: ch
Legal result type
Analyzing operand: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32
Legal operand
Legally typed node: t868: ch = TokenFactor t866:1, t867:1

Legalizing node: t869: i32 = and t866, t863
Analyzing result type: i32
Legal result type
Analyzing operand: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
Legal operand
Legally typed node: t869: i32 = and t866, t863

Legalizing node: t871: i32 = or t869, t860
Analyzing result type: i32
Legal result type
Analyzing operand: t869: i32 = and t866, t863
Legal operand
Analyzing operand: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
Legal operand
Legally typed node: t871: i32 = or t869, t860

Legalizing node: t873: i32 = or t871, t857
Analyzing result type: i32
Legal result type
Analyzing operand: t871: i32 = or t869, t860
Legal operand
Analyzing operand: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
Legal operand
Legally typed node: t873: i32 = or t871, t857

Legalizing node: t875: i32 = or t873, t855
Analyzing result type: i32
Legal result type
Analyzing operand: t873: i32 = or t871, t857
Legal operand
Analyzing operand: t855: i32 = and t853, t766
Legal operand
Legally typed node: t875: i32 = or t873, t855

Legalizing node: t877: i32 = or t875, t744
Analyzing result type: i32
Legal result type
Analyzing operand: t875: i32 = or t873, t855
Legal operand
Analyzing operand: t744: i32 = xor t741, t739
Legal operand
Legally typed node: t877: i32 = or t875, t744

Legalizing node: t879: i32 = or t877, t711
Analyzing result type: i32
Legal result type
Analyzing operand: t877: i32 = or t875, t744
Legal operand
Analyzing operand: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Legal operand
Legally typed node: t879: i32 = or t877, t711

Legalizing node: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t11: i32 = FrameIndex<1>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32

Legalizing node: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t686: ch = TokenFactor t683, t685
Legal operand
Analyzing operand: t7: i32 = FrameIndex<0>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32

Legalizing node: t165: i32 = add nsw t163, t164
Analyzing result type: i32
Legal result type
Analyzing operand: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
Legal operand
Analyzing operand: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
Legal operand
Legally typed node: t165: i32 = add nsw t163, t164

Legalizing node: t501: i64 = any_extend t165
Analyzing result type: i64
Expand integer result: t501: i64 = any_extend t165

Legalizing node: t209: i64 = mul t501, t208
Analyzing result type: i64
Expand integer result: t209: i64 = mul t501, t208

Creating new node: t881: i32 = extract_element t501, Constant:i32<1>
Creating new node: t882: i32 = extract_element t501, Constant:i32<0>
Creating new node: t883: i32 = extract_element t208, Constant:i32<1>
Creating new node: t884: i32 = extract_element t208, Constant:i32<0>
Creating new node: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t886: i32,ch = CopyFromReg t885, Register:i32 $sp
Creating new node: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t882
Creating new node: t888: ch,glue = CopyToReg t887, Register:i32 $r1, t881, t887:1
Creating new node: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t884, t888:1
Creating new node: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t883, t889:1
Creating new node: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
Creating new node: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
Creating new node: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Creating new node: t894: i32,ch,glue = CopyFromReg t893:1, Register:i32 $r1, t893:2
Creating new node: t895: i64 = build_pair t893, t894
Creating new node: t896: i32 = truncate t895
Creating new node: t897: i64 = srl t895, Constant:i32<32>
Creating new node: t898: i32 = truncate t897
Legalizing node: t210: i32 = truncate t209
Analyzing result type: i32
Legal result type
Analyzing operand: t209: i64 = mul t501, t208
Expand integer operand: t210: i32 = truncate t209

Legalizing node: t883: i32 = extract_element t208, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t208: i64 = or t203, t207
Expand integer operand: t883: i32 = extract_element t208, Constant:i32<1>

Legalizing node: t884: i32 = extract_element t208, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t208: i64 = or t203, t207
Expand integer operand: t884: i32 = extract_element t208, Constant:i32<0>

Legalizing node: t881: i32 = extract_element t501, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t501: i64 = any_extend t165
Expand integer operand: t881: i32 = extract_element t501, Constant:i32<1>

Legalizing node: t882: i32 = extract_element t501, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t501: i64 = any_extend t165
Expand integer operand: t882: i32 = extract_element t501, Constant:i32<0>

Legalizing node: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Legally typed node: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t165: i32 = add nsw t163, t164
Legal operand
Legally typed node: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165

Legalizing node: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Analyzing operand: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
Legal operand
Legally typed node: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1

Legalizing node: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
Legal operand
Analyzing operand: t879: i32 = or t877, t711
Legal operand
Analyzing operand: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
Legal operand
Legally typed node: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

Legalizing node: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
Legal operand
Analyzing operand: t880: i32 = or t878, t712
Legal operand
Analyzing operand: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
Legal operand
Legally typed node: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

Legalizing node: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
Legal operand
Analyzing operand: t763: i32 = TargetExternalSymbol'__muldi3'
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
Legal operand
Legally typed node: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1

Legalizing node: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
Legal operand
Analyzing operand: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
Legal operand
Legally typed node: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1

Legalizing node: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
Legal operand
Analyzing operand: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
Legal operand
Legally typed node: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1

Legalizing node: t894: i32,ch,glue = CopyFromReg t893:1, Register:i32 $r1, t893:2
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Legal operand
Analyzing operand: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Legal operand
Legally typed node: t894: i32,ch,glue = CopyFromReg t893:1, Register:i32 $r1, t893:2

Legalizing node: t895: i64 = build_pair t893, t894
Analyzing result type: i64
Expand integer result: t895: i64 = build_pair t893, t894

Legalizing node: t896: i32 = truncate t895
Analyzing result type: i32
Legal result type
Analyzing operand: t895: i64 = build_pair t893, t894
Expand integer operand: t896: i32 = truncate t895

Legalizing node: t897: i64 = srl t895, Constant:i32<32>
Analyzing result type: i64
Expand integer result: t897: i64 = srl t895, Constant:i32<32>

Legalizing node: t898: i32 = truncate t897
Analyzing result type: i32
Legal result type
Analyzing operand: t897: i64 = srl t895, Constant:i32<32>
Expand integer operand: t898: i32 = truncate t897

Legalizing node: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
Analyzing result type: ch
Legal result type
Analyzing operand: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
Legal operand
Analyzing operand: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
Legal operand
Analyzing operand: t868: ch = TokenFactor t866:1, t867:1
Legal operand
Analyzing operand: t865: ch = TokenFactor t863:1, t864:1
Legal operand
Analyzing operand: t862: ch = TokenFactor t860:1, t861:1
Legal operand
Analyzing operand: t859: ch = TokenFactor t857:1, t858:1
Legal operand
Analyzing operand: t850: ch = TokenFactor t848:1, t849:1
Legal operand
Analyzing operand: t809: ch = TokenFactor t807:1, t808:1
Legal operand
Analyzing operand: t806: ch = TokenFactor t804:1, t805:1
Legal operand
Analyzing operand: t803: ch = TokenFactor t801:1, t802:1
Legal operand
Analyzing operand: t780: ch = TokenFactor t778:1, t779:1
Legal operand
Analyzing operand: t777: ch = TokenFactor t775:1, t776:1
Legal operand
Analyzing operand: t774: ch = TokenFactor t772:1, t773:1
Legal operand
Analyzing operand: t751: ch = TokenFactor t749:1, t750:1
Legal operand
Analyzing operand: t748: ch = TokenFactor t746:1, t747:1
Legal operand
Analyzing operand: t743: ch = TokenFactor t741:1, t742:1
Legal operand
Analyzing operand: t734: ch = TokenFactor t732:1, t733:1
Legal operand
Analyzing operand: t731: ch = TokenFactor t729:1, t730:1
Legal operand
Analyzing operand: t728: ch = TokenFactor t726:1, t727:1
Legal operand
Analyzing operand: t723: ch = TokenFactor t721:1, t722:1
Legal operand
Analyzing operand: t720: ch = TokenFactor t718:1, t719:1
Legal operand
Analyzing operand: t694: ch = TokenFactor t692:1, t693:1
Legal operand
Analyzing operand: t689: ch = TokenFactor t687:1, t688:1
Legal operand
Legally typed node: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

Legalizing node: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
Legal operand
Analyzing operand: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Legal operand
Analyzing operand: t211: i32 = FrameIndex<24>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32

Legalizing node: t214: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t213, FrameIndex:i32<3>, undef:i32
Analyzing result type: i64
Expand integer result: t214: i64,ch = load<(dereferenceable load (s64) from %ir.7)> t213, FrameIndex:i32<3>, undef:i32

Creating new node: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
Creating new node: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32
Creating new node: t901: ch = TokenFactor t899:1, t900:1
Legalizing node: t216: i64 = add nsw t214, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t216: i64 = add nsw t214, Constant:i64<1>

Creating new node: t902: i32,i32 = uaddo t899, Constant:i32<1>
Creating new node: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
Legalizing node: t220: i32 = extract_element t216, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t216: i64 = add nsw t214, Constant:i64<1>
Expand integer operand: t220: i32 = extract_element t216, Constant:i32<1>

Legalizing node: t221: i32 = extract_element t216, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t216: i64 = add nsw t214, Constant:i64<1>
Expand integer operand: t221: i32 = extract_element t216, Constant:i32<0>

Legalizing node: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
Legal operand
Analyzing operand: t544: i32 = add FrameIndex:i32<3>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32

Legalizing node: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
Legal operand
Analyzing operand: t21: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32

Legalizing node: t901: ch = TokenFactor t899:1, t900:1
Analyzing result type: ch
Legal result type
Analyzing operand: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32
Legal operand
Legally typed node: t901: ch = TokenFactor t899:1, t900:1

Legalizing node: t217: ch = store<(store (s64) into %ir.7)> t901, t216, FrameIndex:i32<3>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t901: ch = TokenFactor t899:1, t900:1
Legal operand
Analyzing operand: t216: i64 = add nsw t214, Constant:i64<1>
Expand integer operand: t217: ch = store<(store (s64) into %ir.7)> t901, t216, FrameIndex:i32<3>, undef:i32

Lowering node: t217: ch = store<(store (s64) into %ir.<badref>)> t901, t216, FrameIndex:i32<3>, undef:i32
Creating new node: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32
Creating new node: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t544, undef:i32
Creating new node: t906: ch = TokenFactor t904, t905
Legalizing node: t902: i32,i32 = uaddo t899, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t902: i32,i32 = uaddo t899, Constant:i32<1>

Legalizing node: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t902: i32,i32 = uaddo t899, Constant:i32<1>
Legal operand
Legally typed node: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1

Legalizing node: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t544, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t901: ch = TokenFactor t899:1, t900:1
Legal operand
Analyzing operand: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
Legal operand
Analyzing operand: t544: i32 = add FrameIndex:i32<3>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t544, undef:i32

Legalizing node: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t901: ch = TokenFactor t899:1, t900:1
Legal operand
Analyzing operand: t902: i32,i32 = uaddo t899, Constant:i32<1>
Legal operand
Analyzing operand: t21: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32

Legalizing node: t906: ch = TokenFactor t904, t905
Analyzing result type: ch
Legal result type
Analyzing operand: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t544, undef:i32
Legal operand
Legally typed node: t906: ch = TokenFactor t904, t905

Legalizing node: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t906: ch = TokenFactor t904, t905
Legal operand
Legally typed node: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t902: i32,i32 = uaddo t899, Constant:i32<1>
Legal operand
Analyzing operand: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1

Legalizing node: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1
Legal operand
Analyzing operand: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
Legal operand
Analyzing operand: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1
Legal operand
Legally typed node: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1

Legalizing node: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1
Legal operand
Legally typed node: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1

Legalizing node: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
Legal operand
Analyzing operand: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
Legal operand
Legally typed node: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1

Legalizing node: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
Legal operand
Analyzing operand: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
Legal operand
Legally typed node: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1

Legalizing node: t238: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t237:1, FrameIndex:i32<4>, undef:i32
Analyzing result type: i64
Expand integer result: t238: i64,ch = load<(dereferenceable load (s64) from %ir.8)> t237:1, FrameIndex:i32<4>, undef:i32

Creating new node: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
Creating new node: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32
Creating new node: t909: ch = TokenFactor t907:1, t908:1
Legalizing node: t239: i64 = add nsw t238, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t239: i64 = add nsw t238, Constant:i64<1>

Creating new node: t910: i32,i32 = uaddo t907, Constant:i32<1>
Creating new node: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
Legalizing node: t241: i32 = extract_element t239, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t239: i64 = add nsw t238, Constant:i64<1>
Expand integer operand: t241: i32 = extract_element t239, Constant:i32<1>

Legalizing node: t242: i32 = extract_element t239, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t239: i64 = add nsw t238, Constant:i64<1>
Expand integer operand: t242: i32 = extract_element t239, Constant:i32<0>

Legalizing node: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
Legal operand
Analyzing operand: t551: i32 = add FrameIndex:i32<4>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32

Legalizing node: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
Legal operand
Analyzing operand: t28: i32 = FrameIndex<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32

Legalizing node: t909: ch = TokenFactor t907:1, t908:1
Analyzing result type: ch
Legal result type
Analyzing operand: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
Legal operand
Analyzing operand: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32
Legal operand
Legally typed node: t909: ch = TokenFactor t907:1, t908:1

Legalizing node: t240: ch = store<(store (s64) into %ir.8)> t909, t239, FrameIndex:i32<4>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t909: ch = TokenFactor t907:1, t908:1
Legal operand
Analyzing operand: t239: i64 = add nsw t238, Constant:i64<1>
Expand integer operand: t240: ch = store<(store (s64) into %ir.8)> t909, t239, FrameIndex:i32<4>, undef:i32

Lowering node: t240: ch = store<(store (s64) into %ir.<badref>)> t909, t239, FrameIndex:i32<4>, undef:i32
Creating new node: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32
Creating new node: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t551, undef:i32
Creating new node: t914: ch = TokenFactor t912, t913
Legalizing node: t910: i32,i32 = uaddo t907, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t910: i32,i32 = uaddo t907, Constant:i32<1>

Legalizing node: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t910: i32,i32 = uaddo t907, Constant:i32<1>
Legal operand
Legally typed node: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1

Legalizing node: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t551, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t909: ch = TokenFactor t907:1, t908:1
Legal operand
Analyzing operand: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
Legal operand
Analyzing operand: t551: i32 = add FrameIndex:i32<4>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t551, undef:i32

Legalizing node: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t909: ch = TokenFactor t907:1, t908:1
Legal operand
Analyzing operand: t910: i32,i32 = uaddo t907, Constant:i32<1>
Legal operand
Analyzing operand: t28: i32 = FrameIndex<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32

Legalizing node: t914: ch = TokenFactor t912, t913
Analyzing result type: ch
Legal result type
Analyzing operand: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32
Legal operand
Analyzing operand: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t551, undef:i32
Legal operand
Legally typed node: t914: ch = TokenFactor t912, t913

Legalizing node: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t914: ch = TokenFactor t912, t913
Legal operand
Legally typed node: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t910: i32,i32 = uaddo t907, Constant:i32<1>
Legal operand
Analyzing operand: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1

Legalizing node: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1
Legal operand
Analyzing operand: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
Legal operand
Analyzing operand: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1
Legal operand
Legally typed node: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1

Legalizing node: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1
Legal operand
Legally typed node: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1

Legalizing node: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
Legal operand
Analyzing operand: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
Legal operand
Legally typed node: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1

Legalizing node: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
Legal operand
Analyzing operand: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
Legal operand
Legally typed node: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1

Legalizing node: t251: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t250:1, FrameIndex:i32<5>, undef:i32
Analyzing result type: i64
Expand integer result: t251: i64,ch = load<(dereferenceable load (s64) from %ir.9)> t250:1, FrameIndex:i32<5>, undef:i32

Creating new node: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
Creating new node: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32
Creating new node: t917: ch = TokenFactor t915:1, t916:1
Legalizing node: t252: i64 = add nsw t251, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t252: i64 = add nsw t251, Constant:i64<1>

Creating new node: t918: i32,i32 = uaddo t915, Constant:i32<1>
Creating new node: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
Legalizing node: t254: i32 = extract_element t252, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t252: i64 = add nsw t251, Constant:i64<1>
Expand integer operand: t254: i32 = extract_element t252, Constant:i32<1>

Legalizing node: t255: i32 = extract_element t252, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t252: i64 = add nsw t251, Constant:i64<1>
Expand integer operand: t255: i32 = extract_element t252, Constant:i32<0>

Legalizing node: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
Legal operand
Analyzing operand: t558: i32 = add FrameIndex:i32<5>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32

Legalizing node: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
Legal operand
Analyzing operand: t35: i32 = FrameIndex<5>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32

Legalizing node: t917: ch = TokenFactor t915:1, t916:1
Analyzing result type: ch
Legal result type
Analyzing operand: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
Legal operand
Analyzing operand: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32
Legal operand
Legally typed node: t917: ch = TokenFactor t915:1, t916:1

Legalizing node: t253: ch = store<(store (s64) into %ir.9)> t917, t252, FrameIndex:i32<5>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t917: ch = TokenFactor t915:1, t916:1
Legal operand
Analyzing operand: t252: i64 = add nsw t251, Constant:i64<1>
Expand integer operand: t253: ch = store<(store (s64) into %ir.9)> t917, t252, FrameIndex:i32<5>, undef:i32

Lowering node: t253: ch = store<(store (s64) into %ir.<badref>)> t917, t252, FrameIndex:i32<5>, undef:i32
Creating new node: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32
Creating new node: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t558, undef:i32
Creating new node: t922: ch = TokenFactor t920, t921
Legalizing node: t918: i32,i32 = uaddo t915, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t918: i32,i32 = uaddo t915, Constant:i32<1>

Legalizing node: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t918: i32,i32 = uaddo t915, Constant:i32<1>
Legal operand
Legally typed node: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1

Legalizing node: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t558, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t917: ch = TokenFactor t915:1, t916:1
Legal operand
Analyzing operand: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
Legal operand
Analyzing operand: t558: i32 = add FrameIndex:i32<5>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t558, undef:i32

Legalizing node: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t917: ch = TokenFactor t915:1, t916:1
Legal operand
Analyzing operand: t918: i32,i32 = uaddo t915, Constant:i32<1>
Legal operand
Analyzing operand: t35: i32 = FrameIndex<5>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32

Legalizing node: t922: ch = TokenFactor t920, t921
Analyzing result type: ch
Legal result type
Analyzing operand: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32
Legal operand
Analyzing operand: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t558, undef:i32
Legal operand
Legally typed node: t922: ch = TokenFactor t920, t921

Legalizing node: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t922: ch = TokenFactor t920, t921
Legal operand
Legally typed node: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t918: i32,i32 = uaddo t915, Constant:i32<1>
Legal operand
Analyzing operand: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1

Legalizing node: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1
Legal operand
Analyzing operand: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
Legal operand
Analyzing operand: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1
Legal operand
Legally typed node: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1

Legalizing node: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1
Legal operand
Legally typed node: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1

Legalizing node: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
Legal operand
Analyzing operand: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
Legal operand
Legally typed node: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1

Legalizing node: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
Legal operand
Analyzing operand: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
Legal operand
Legally typed node: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1

Legalizing node: t264: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t263:1, FrameIndex:i32<6>, undef:i32
Analyzing result type: i64
Expand integer result: t264: i64,ch = load<(dereferenceable load (s64) from %ir.10)> t263:1, FrameIndex:i32<6>, undef:i32

Creating new node: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
Creating new node: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32
Creating new node: t925: ch = TokenFactor t923:1, t924:1
Legalizing node: t265: i64 = add nsw t264, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t265: i64 = add nsw t264, Constant:i64<1>

Creating new node: t926: i32,i32 = uaddo t923, Constant:i32<1>
Creating new node: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
Legalizing node: t267: i32 = extract_element t265, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t265: i64 = add nsw t264, Constant:i64<1>
Expand integer operand: t267: i32 = extract_element t265, Constant:i32<1>

Legalizing node: t268: i32 = extract_element t265, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t265: i64 = add nsw t264, Constant:i64<1>
Expand integer operand: t268: i32 = extract_element t265, Constant:i32<0>

Legalizing node: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
Legal operand
Analyzing operand: t565: i32 = add FrameIndex:i32<6>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32

Legalizing node: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
Legal operand
Analyzing operand: t42: i32 = FrameIndex<6>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32

Legalizing node: t925: ch = TokenFactor t923:1, t924:1
Analyzing result type: ch
Legal result type
Analyzing operand: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
Legal operand
Analyzing operand: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32
Legal operand
Legally typed node: t925: ch = TokenFactor t923:1, t924:1

Legalizing node: t266: ch = store<(store (s64) into %ir.10)> t925, t265, FrameIndex:i32<6>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t925: ch = TokenFactor t923:1, t924:1
Legal operand
Analyzing operand: t265: i64 = add nsw t264, Constant:i64<1>
Expand integer operand: t266: ch = store<(store (s64) into %ir.10)> t925, t265, FrameIndex:i32<6>, undef:i32

Lowering node: t266: ch = store<(store (s64) into %ir.<badref>)> t925, t265, FrameIndex:i32<6>, undef:i32
Creating new node: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32
Creating new node: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t565, undef:i32
Creating new node: t930: ch = TokenFactor t928, t929
Legalizing node: t926: i32,i32 = uaddo t923, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t926: i32,i32 = uaddo t923, Constant:i32<1>

Legalizing node: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t926: i32,i32 = uaddo t923, Constant:i32<1>
Legal operand
Legally typed node: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1

Legalizing node: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t565, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t925: ch = TokenFactor t923:1, t924:1
Legal operand
Analyzing operand: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
Legal operand
Analyzing operand: t565: i32 = add FrameIndex:i32<6>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t565, undef:i32

Legalizing node: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t925: ch = TokenFactor t923:1, t924:1
Legal operand
Analyzing operand: t926: i32,i32 = uaddo t923, Constant:i32<1>
Legal operand
Analyzing operand: t42: i32 = FrameIndex<6>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32

Legalizing node: t930: ch = TokenFactor t928, t929
Analyzing result type: ch
Legal result type
Analyzing operand: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32
Legal operand
Analyzing operand: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t565, undef:i32
Legal operand
Legally typed node: t930: ch = TokenFactor t928, t929

Legalizing node: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t930: ch = TokenFactor t928, t929
Legal operand
Legally typed node: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t926: i32,i32 = uaddo t923, Constant:i32<1>
Legal operand
Analyzing operand: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1

Legalizing node: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1
Legal operand
Analyzing operand: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
Legal operand
Analyzing operand: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1
Legal operand
Legally typed node: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1

Legalizing node: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1
Legal operand
Legally typed node: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1

Legalizing node: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
Legal operand
Analyzing operand: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
Legal operand
Legally typed node: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1

Legalizing node: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
Legal operand
Analyzing operand: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
Legal operand
Legally typed node: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1

Legalizing node: t277: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t276:1, FrameIndex:i32<7>, undef:i32
Analyzing result type: i64
Expand integer result: t277: i64,ch = load<(dereferenceable load (s64) from %ir.11)> t276:1, FrameIndex:i32<7>, undef:i32

Creating new node: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
Creating new node: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32
Creating new node: t933: ch = TokenFactor t931:1, t932:1
Legalizing node: t278: i64 = add nsw t277, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t278: i64 = add nsw t277, Constant:i64<1>

Creating new node: t934: i32,i32 = uaddo t931, Constant:i32<1>
Creating new node: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
Legalizing node: t280: i32 = extract_element t278, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t278: i64 = add nsw t277, Constant:i64<1>
Expand integer operand: t280: i32 = extract_element t278, Constant:i32<1>

Legalizing node: t281: i32 = extract_element t278, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t278: i64 = add nsw t277, Constant:i64<1>
Expand integer operand: t281: i32 = extract_element t278, Constant:i32<0>

Legalizing node: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
Legal operand
Analyzing operand: t572: i32 = add FrameIndex:i32<7>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32

Legalizing node: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
Legal operand
Analyzing operand: t49: i32 = FrameIndex<7>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32

Legalizing node: t933: ch = TokenFactor t931:1, t932:1
Analyzing result type: ch
Legal result type
Analyzing operand: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
Legal operand
Analyzing operand: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32
Legal operand
Legally typed node: t933: ch = TokenFactor t931:1, t932:1

Legalizing node: t279: ch = store<(store (s64) into %ir.11)> t933, t278, FrameIndex:i32<7>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t933: ch = TokenFactor t931:1, t932:1
Legal operand
Analyzing operand: t278: i64 = add nsw t277, Constant:i64<1>
Expand integer operand: t279: ch = store<(store (s64) into %ir.11)> t933, t278, FrameIndex:i32<7>, undef:i32

Lowering node: t279: ch = store<(store (s64) into %ir.<badref>)> t933, t278, FrameIndex:i32<7>, undef:i32
Creating new node: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32
Creating new node: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t572, undef:i32
Creating new node: t938: ch = TokenFactor t936, t937
Legalizing node: t934: i32,i32 = uaddo t931, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t934: i32,i32 = uaddo t931, Constant:i32<1>

Legalizing node: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t934: i32,i32 = uaddo t931, Constant:i32<1>
Legal operand
Legally typed node: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1

Legalizing node: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t572, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t933: ch = TokenFactor t931:1, t932:1
Legal operand
Analyzing operand: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
Legal operand
Analyzing operand: t572: i32 = add FrameIndex:i32<7>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t572, undef:i32

Legalizing node: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t933: ch = TokenFactor t931:1, t932:1
Legal operand
Analyzing operand: t934: i32,i32 = uaddo t931, Constant:i32<1>
Legal operand
Analyzing operand: t49: i32 = FrameIndex<7>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32

Legalizing node: t938: ch = TokenFactor t936, t937
Analyzing result type: ch
Legal result type
Analyzing operand: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32
Legal operand
Analyzing operand: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t572, undef:i32
Legal operand
Legally typed node: t938: ch = TokenFactor t936, t937

Legalizing node: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t938: ch = TokenFactor t936, t937
Legal operand
Legally typed node: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t934: i32,i32 = uaddo t931, Constant:i32<1>
Legal operand
Analyzing operand: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1

Legalizing node: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1
Legal operand
Analyzing operand: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
Legal operand
Analyzing operand: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1
Legal operand
Legally typed node: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1

Legalizing node: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1
Legal operand
Legally typed node: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1

Legalizing node: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
Legal operand
Analyzing operand: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
Legal operand
Legally typed node: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1

Legalizing node: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
Legal operand
Analyzing operand: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
Legal operand
Legally typed node: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1

Legalizing node: t290: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t289:1, FrameIndex:i32<8>, undef:i32
Analyzing result type: i64
Expand integer result: t290: i64,ch = load<(dereferenceable load (s64) from %ir.12)> t289:1, FrameIndex:i32<8>, undef:i32

Creating new node: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
Creating new node: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32
Creating new node: t941: ch = TokenFactor t939:1, t940:1
Legalizing node: t291: i64 = add nsw t290, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t291: i64 = add nsw t290, Constant:i64<1>

Creating new node: t942: i32,i32 = uaddo t939, Constant:i32<1>
Creating new node: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
Legalizing node: t293: i32 = extract_element t291, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t291: i64 = add nsw t290, Constant:i64<1>
Expand integer operand: t293: i32 = extract_element t291, Constant:i32<1>

Legalizing node: t294: i32 = extract_element t291, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t291: i64 = add nsw t290, Constant:i64<1>
Expand integer operand: t294: i32 = extract_element t291, Constant:i32<0>

Legalizing node: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
Legal operand
Analyzing operand: t579: i32 = add FrameIndex:i32<8>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32

Legalizing node: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
Legal operand
Analyzing operand: t56: i32 = FrameIndex<8>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32

Legalizing node: t941: ch = TokenFactor t939:1, t940:1
Analyzing result type: ch
Legal result type
Analyzing operand: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
Legal operand
Analyzing operand: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32
Legal operand
Legally typed node: t941: ch = TokenFactor t939:1, t940:1

Legalizing node: t292: ch = store<(store (s64) into %ir.12)> t941, t291, FrameIndex:i32<8>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t941: ch = TokenFactor t939:1, t940:1
Legal operand
Analyzing operand: t291: i64 = add nsw t290, Constant:i64<1>
Expand integer operand: t292: ch = store<(store (s64) into %ir.12)> t941, t291, FrameIndex:i32<8>, undef:i32

Lowering node: t292: ch = store<(store (s64) into %ir.<badref>)> t941, t291, FrameIndex:i32<8>, undef:i32
Creating new node: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32
Creating new node: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t579, undef:i32
Creating new node: t946: ch = TokenFactor t944, t945
Legalizing node: t942: i32,i32 = uaddo t939, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t942: i32,i32 = uaddo t939, Constant:i32<1>

Legalizing node: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t942: i32,i32 = uaddo t939, Constant:i32<1>
Legal operand
Legally typed node: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1

Legalizing node: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t579, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t941: ch = TokenFactor t939:1, t940:1
Legal operand
Analyzing operand: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
Legal operand
Analyzing operand: t579: i32 = add FrameIndex:i32<8>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t579, undef:i32

Legalizing node: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t941: ch = TokenFactor t939:1, t940:1
Legal operand
Analyzing operand: t942: i32,i32 = uaddo t939, Constant:i32<1>
Legal operand
Analyzing operand: t56: i32 = FrameIndex<8>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32

Legalizing node: t946: ch = TokenFactor t944, t945
Analyzing result type: ch
Legal result type
Analyzing operand: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32
Legal operand
Analyzing operand: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t579, undef:i32
Legal operand
Legally typed node: t946: ch = TokenFactor t944, t945

Legalizing node: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t946: ch = TokenFactor t944, t945
Legal operand
Legally typed node: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t942: i32,i32 = uaddo t939, Constant:i32<1>
Legal operand
Analyzing operand: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1

Legalizing node: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1
Legal operand
Analyzing operand: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
Legal operand
Analyzing operand: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1
Legal operand
Legally typed node: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1

Legalizing node: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1
Legal operand
Legally typed node: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1

Legalizing node: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
Legal operand
Analyzing operand: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
Legal operand
Legally typed node: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1

Legalizing node: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
Legal operand
Analyzing operand: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
Legal operand
Legally typed node: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1

Legalizing node: t303: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t302:1, FrameIndex:i32<9>, undef:i32
Analyzing result type: i64
Expand integer result: t303: i64,ch = load<(dereferenceable load (s64) from %ir.13)> t302:1, FrameIndex:i32<9>, undef:i32

Creating new node: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
Creating new node: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32
Creating new node: t949: ch = TokenFactor t947:1, t948:1
Legalizing node: t304: i64 = add nsw t303, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t304: i64 = add nsw t303, Constant:i64<1>

Creating new node: t950: i32,i32 = uaddo t947, Constant:i32<1>
Creating new node: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
Legalizing node: t306: i32 = extract_element t304, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t304: i64 = add nsw t303, Constant:i64<1>
Expand integer operand: t306: i32 = extract_element t304, Constant:i32<1>

Legalizing node: t307: i32 = extract_element t304, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t304: i64 = add nsw t303, Constant:i64<1>
Expand integer operand: t307: i32 = extract_element t304, Constant:i32<0>

Legalizing node: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
Legal operand
Analyzing operand: t586: i32 = add FrameIndex:i32<9>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32

Legalizing node: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
Legal operand
Analyzing operand: t63: i32 = FrameIndex<9>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32

Legalizing node: t949: ch = TokenFactor t947:1, t948:1
Analyzing result type: ch
Legal result type
Analyzing operand: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
Legal operand
Analyzing operand: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32
Legal operand
Legally typed node: t949: ch = TokenFactor t947:1, t948:1

Legalizing node: t305: ch = store<(store (s64) into %ir.13)> t949, t304, FrameIndex:i32<9>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t949: ch = TokenFactor t947:1, t948:1
Legal operand
Analyzing operand: t304: i64 = add nsw t303, Constant:i64<1>
Expand integer operand: t305: ch = store<(store (s64) into %ir.13)> t949, t304, FrameIndex:i32<9>, undef:i32

Lowering node: t305: ch = store<(store (s64) into %ir.<badref>)> t949, t304, FrameIndex:i32<9>, undef:i32
Creating new node: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32
Creating new node: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t586, undef:i32
Creating new node: t954: ch = TokenFactor t952, t953
Legalizing node: t950: i32,i32 = uaddo t947, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t950: i32,i32 = uaddo t947, Constant:i32<1>

Legalizing node: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t950: i32,i32 = uaddo t947, Constant:i32<1>
Legal operand
Legally typed node: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1

Legalizing node: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t586, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t949: ch = TokenFactor t947:1, t948:1
Legal operand
Analyzing operand: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
Legal operand
Analyzing operand: t586: i32 = add FrameIndex:i32<9>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t586, undef:i32

Legalizing node: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t949: ch = TokenFactor t947:1, t948:1
Legal operand
Analyzing operand: t950: i32,i32 = uaddo t947, Constant:i32<1>
Legal operand
Analyzing operand: t63: i32 = FrameIndex<9>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32

Legalizing node: t954: ch = TokenFactor t952, t953
Analyzing result type: ch
Legal result type
Analyzing operand: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32
Legal operand
Analyzing operand: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t586, undef:i32
Legal operand
Legally typed node: t954: ch = TokenFactor t952, t953

Legalizing node: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t954: ch = TokenFactor t952, t953
Legal operand
Legally typed node: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t950: i32,i32 = uaddo t947, Constant:i32<1>
Legal operand
Analyzing operand: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1

Legalizing node: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1
Legal operand
Analyzing operand: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
Legal operand
Analyzing operand: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1
Legal operand
Legally typed node: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1

Legalizing node: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1
Legal operand
Legally typed node: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1

Legalizing node: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
Legal operand
Analyzing operand: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
Legal operand
Legally typed node: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1

Legalizing node: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
Legal operand
Analyzing operand: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
Legal operand
Legally typed node: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1

Legalizing node: t316: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t315:1, FrameIndex:i32<10>, undef:i32
Analyzing result type: i64
Expand integer result: t316: i64,ch = load<(dereferenceable load (s64) from %ir.14)> t315:1, FrameIndex:i32<10>, undef:i32

Creating new node: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
Creating new node: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32
Creating new node: t957: ch = TokenFactor t955:1, t956:1
Legalizing node: t317: i64 = add nsw t316, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t317: i64 = add nsw t316, Constant:i64<1>

Creating new node: t958: i32,i32 = uaddo t955, Constant:i32<1>
Creating new node: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
Legalizing node: t319: i32 = extract_element t317, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t317: i64 = add nsw t316, Constant:i64<1>
Expand integer operand: t319: i32 = extract_element t317, Constant:i32<1>

Legalizing node: t320: i32 = extract_element t317, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t317: i64 = add nsw t316, Constant:i64<1>
Expand integer operand: t320: i32 = extract_element t317, Constant:i32<0>

Legalizing node: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
Legal operand
Analyzing operand: t593: i32 = add FrameIndex:i32<10>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32

Legalizing node: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
Legal operand
Analyzing operand: t70: i32 = FrameIndex<10>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32

Legalizing node: t957: ch = TokenFactor t955:1, t956:1
Analyzing result type: ch
Legal result type
Analyzing operand: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
Legal operand
Analyzing operand: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32
Legal operand
Legally typed node: t957: ch = TokenFactor t955:1, t956:1

Legalizing node: t318: ch = store<(store (s64) into %ir.14)> t957, t317, FrameIndex:i32<10>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t957: ch = TokenFactor t955:1, t956:1
Legal operand
Analyzing operand: t317: i64 = add nsw t316, Constant:i64<1>
Expand integer operand: t318: ch = store<(store (s64) into %ir.14)> t957, t317, FrameIndex:i32<10>, undef:i32

Lowering node: t318: ch = store<(store (s64) into %ir.<badref>)> t957, t317, FrameIndex:i32<10>, undef:i32
Creating new node: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32
Creating new node: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t593, undef:i32
Creating new node: t962: ch = TokenFactor t960, t961
Legalizing node: t958: i32,i32 = uaddo t955, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t958: i32,i32 = uaddo t955, Constant:i32<1>

Legalizing node: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t958: i32,i32 = uaddo t955, Constant:i32<1>
Legal operand
Legally typed node: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1

Legalizing node: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t593, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t957: ch = TokenFactor t955:1, t956:1
Legal operand
Analyzing operand: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
Legal operand
Analyzing operand: t593: i32 = add FrameIndex:i32<10>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t593, undef:i32

Legalizing node: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t957: ch = TokenFactor t955:1, t956:1
Legal operand
Analyzing operand: t958: i32,i32 = uaddo t955, Constant:i32<1>
Legal operand
Analyzing operand: t70: i32 = FrameIndex<10>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32

Legalizing node: t962: ch = TokenFactor t960, t961
Analyzing result type: ch
Legal result type
Analyzing operand: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32
Legal operand
Analyzing operand: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t593, undef:i32
Legal operand
Legally typed node: t962: ch = TokenFactor t960, t961

Legalizing node: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t962: ch = TokenFactor t960, t961
Legal operand
Legally typed node: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t958: i32,i32 = uaddo t955, Constant:i32<1>
Legal operand
Analyzing operand: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1

Legalizing node: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1
Legal operand
Analyzing operand: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
Legal operand
Analyzing operand: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1
Legal operand
Legally typed node: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1

Legalizing node: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1
Legal operand
Legally typed node: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1

Legalizing node: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
Legal operand
Analyzing operand: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
Legal operand
Legally typed node: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1

Legalizing node: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
Legal operand
Analyzing operand: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
Legal operand
Legally typed node: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1

Legalizing node: t329: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t328:1, FrameIndex:i32<11>, undef:i32
Analyzing result type: i64
Expand integer result: t329: i64,ch = load<(dereferenceable load (s64) from %ir.15)> t328:1, FrameIndex:i32<11>, undef:i32

Creating new node: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
Creating new node: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32
Creating new node: t965: ch = TokenFactor t963:1, t964:1
Legalizing node: t330: i64 = add nsw t329, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t330: i64 = add nsw t329, Constant:i64<1>

Creating new node: t966: i32,i32 = uaddo t963, Constant:i32<1>
Creating new node: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
Legalizing node: t332: i32 = extract_element t330, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t330: i64 = add nsw t329, Constant:i64<1>
Expand integer operand: t332: i32 = extract_element t330, Constant:i32<1>

Legalizing node: t333: i32 = extract_element t330, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t330: i64 = add nsw t329, Constant:i64<1>
Expand integer operand: t333: i32 = extract_element t330, Constant:i32<0>

Legalizing node: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
Legal operand
Analyzing operand: t600: i32 = add FrameIndex:i32<11>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32

Legalizing node: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
Legal operand
Analyzing operand: t77: i32 = FrameIndex<11>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32

Legalizing node: t965: ch = TokenFactor t963:1, t964:1
Analyzing result type: ch
Legal result type
Analyzing operand: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
Legal operand
Analyzing operand: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32
Legal operand
Legally typed node: t965: ch = TokenFactor t963:1, t964:1

Legalizing node: t331: ch = store<(store (s64) into %ir.15)> t965, t330, FrameIndex:i32<11>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t965: ch = TokenFactor t963:1, t964:1
Legal operand
Analyzing operand: t330: i64 = add nsw t329, Constant:i64<1>
Expand integer operand: t331: ch = store<(store (s64) into %ir.15)> t965, t330, FrameIndex:i32<11>, undef:i32

Lowering node: t331: ch = store<(store (s64) into %ir.<badref>)> t965, t330, FrameIndex:i32<11>, undef:i32
Creating new node: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32
Creating new node: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t600, undef:i32
Creating new node: t970: ch = TokenFactor t968, t969
Legalizing node: t966: i32,i32 = uaddo t963, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t966: i32,i32 = uaddo t963, Constant:i32<1>

Legalizing node: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t966: i32,i32 = uaddo t963, Constant:i32<1>
Legal operand
Legally typed node: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1

Legalizing node: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t600, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t965: ch = TokenFactor t963:1, t964:1
Legal operand
Analyzing operand: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
Legal operand
Analyzing operand: t600: i32 = add FrameIndex:i32<11>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t600, undef:i32

Legalizing node: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t965: ch = TokenFactor t963:1, t964:1
Legal operand
Analyzing operand: t966: i32,i32 = uaddo t963, Constant:i32<1>
Legal operand
Analyzing operand: t77: i32 = FrameIndex<11>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32

Legalizing node: t970: ch = TokenFactor t968, t969
Analyzing result type: ch
Legal result type
Analyzing operand: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32
Legal operand
Analyzing operand: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t600, undef:i32
Legal operand
Legally typed node: t970: ch = TokenFactor t968, t969

Legalizing node: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t970: ch = TokenFactor t968, t969
Legal operand
Legally typed node: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t966: i32,i32 = uaddo t963, Constant:i32<1>
Legal operand
Analyzing operand: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1

Legalizing node: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1
Legal operand
Analyzing operand: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
Legal operand
Analyzing operand: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1
Legal operand
Legally typed node: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1

Legalizing node: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1
Legal operand
Legally typed node: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1

Legalizing node: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
Legal operand
Analyzing operand: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
Legal operand
Legally typed node: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1

Legalizing node: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
Legal operand
Analyzing operand: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
Legal operand
Legally typed node: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1

Legalizing node: t342: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t341:1, FrameIndex:i32<12>, undef:i32
Analyzing result type: i64
Expand integer result: t342: i64,ch = load<(dereferenceable load (s64) from %ir.16)> t341:1, FrameIndex:i32<12>, undef:i32

Creating new node: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
Creating new node: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32
Creating new node: t973: ch = TokenFactor t971:1, t972:1
Legalizing node: t343: i64 = add nsw t342, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t343: i64 = add nsw t342, Constant:i64<1>

Creating new node: t974: i32,i32 = uaddo t971, Constant:i32<1>
Creating new node: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
Legalizing node: t345: i32 = extract_element t343, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t343: i64 = add nsw t342, Constant:i64<1>
Expand integer operand: t345: i32 = extract_element t343, Constant:i32<1>

Legalizing node: t346: i32 = extract_element t343, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t343: i64 = add nsw t342, Constant:i64<1>
Expand integer operand: t346: i32 = extract_element t343, Constant:i32<0>

Legalizing node: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
Legal operand
Analyzing operand: t607: i32 = add FrameIndex:i32<12>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32

Legalizing node: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
Legal operand
Analyzing operand: t84: i32 = FrameIndex<12>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32

Legalizing node: t973: ch = TokenFactor t971:1, t972:1
Analyzing result type: ch
Legal result type
Analyzing operand: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
Legal operand
Analyzing operand: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32
Legal operand
Legally typed node: t973: ch = TokenFactor t971:1, t972:1

Legalizing node: t344: ch = store<(store (s64) into %ir.16)> t973, t343, FrameIndex:i32<12>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t973: ch = TokenFactor t971:1, t972:1
Legal operand
Analyzing operand: t343: i64 = add nsw t342, Constant:i64<1>
Expand integer operand: t344: ch = store<(store (s64) into %ir.16)> t973, t343, FrameIndex:i32<12>, undef:i32

Lowering node: t344: ch = store<(store (s64) into %ir.<badref>)> t973, t343, FrameIndex:i32<12>, undef:i32
Creating new node: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32
Creating new node: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t607, undef:i32
Creating new node: t978: ch = TokenFactor t976, t977
Legalizing node: t974: i32,i32 = uaddo t971, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t974: i32,i32 = uaddo t971, Constant:i32<1>

Legalizing node: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t974: i32,i32 = uaddo t971, Constant:i32<1>
Legal operand
Legally typed node: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1

Legalizing node: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t607, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t973: ch = TokenFactor t971:1, t972:1
Legal operand
Analyzing operand: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
Legal operand
Analyzing operand: t607: i32 = add FrameIndex:i32<12>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t607, undef:i32

Legalizing node: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t973: ch = TokenFactor t971:1, t972:1
Legal operand
Analyzing operand: t974: i32,i32 = uaddo t971, Constant:i32<1>
Legal operand
Analyzing operand: t84: i32 = FrameIndex<12>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32

Legalizing node: t978: ch = TokenFactor t976, t977
Analyzing result type: ch
Legal result type
Analyzing operand: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32
Legal operand
Analyzing operand: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t607, undef:i32
Legal operand
Legally typed node: t978: ch = TokenFactor t976, t977

Legalizing node: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t978: ch = TokenFactor t976, t977
Legal operand
Legally typed node: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t974: i32,i32 = uaddo t971, Constant:i32<1>
Legal operand
Analyzing operand: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1

Legalizing node: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1
Legal operand
Analyzing operand: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
Legal operand
Analyzing operand: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1
Legal operand
Legally typed node: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1

Legalizing node: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1
Legal operand
Legally typed node: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1

Legalizing node: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
Legal operand
Analyzing operand: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
Legal operand
Legally typed node: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1

Legalizing node: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
Legal operand
Analyzing operand: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
Legal operand
Legally typed node: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1

Legalizing node: t355: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t354:1, FrameIndex:i32<13>, undef:i32
Analyzing result type: i64
Expand integer result: t355: i64,ch = load<(dereferenceable load (s64) from %ir.17)> t354:1, FrameIndex:i32<13>, undef:i32

Creating new node: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
Creating new node: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32
Creating new node: t981: ch = TokenFactor t979:1, t980:1
Legalizing node: t356: i64 = add nsw t355, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t356: i64 = add nsw t355, Constant:i64<1>

Creating new node: t982: i32,i32 = uaddo t979, Constant:i32<1>
Creating new node: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
Legalizing node: t358: i32 = extract_element t356, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t356: i64 = add nsw t355, Constant:i64<1>
Expand integer operand: t358: i32 = extract_element t356, Constant:i32<1>

Legalizing node: t359: i32 = extract_element t356, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t356: i64 = add nsw t355, Constant:i64<1>
Expand integer operand: t359: i32 = extract_element t356, Constant:i32<0>

Legalizing node: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
Legal operand
Analyzing operand: t614: i32 = add FrameIndex:i32<13>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32

Legalizing node: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
Legal operand
Analyzing operand: t91: i32 = FrameIndex<13>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32

Legalizing node: t981: ch = TokenFactor t979:1, t980:1
Analyzing result type: ch
Legal result type
Analyzing operand: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
Legal operand
Analyzing operand: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32
Legal operand
Legally typed node: t981: ch = TokenFactor t979:1, t980:1

Legalizing node: t357: ch = store<(store (s64) into %ir.17)> t981, t356, FrameIndex:i32<13>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t981: ch = TokenFactor t979:1, t980:1
Legal operand
Analyzing operand: t356: i64 = add nsw t355, Constant:i64<1>
Expand integer operand: t357: ch = store<(store (s64) into %ir.17)> t981, t356, FrameIndex:i32<13>, undef:i32

Lowering node: t357: ch = store<(store (s64) into %ir.<badref>)> t981, t356, FrameIndex:i32<13>, undef:i32
Creating new node: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32
Creating new node: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t614, undef:i32
Creating new node: t986: ch = TokenFactor t984, t985
Legalizing node: t982: i32,i32 = uaddo t979, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t982: i32,i32 = uaddo t979, Constant:i32<1>

Legalizing node: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t982: i32,i32 = uaddo t979, Constant:i32<1>
Legal operand
Legally typed node: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1

Legalizing node: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t614, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t981: ch = TokenFactor t979:1, t980:1
Legal operand
Analyzing operand: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
Legal operand
Analyzing operand: t614: i32 = add FrameIndex:i32<13>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t614, undef:i32

Legalizing node: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t981: ch = TokenFactor t979:1, t980:1
Legal operand
Analyzing operand: t982: i32,i32 = uaddo t979, Constant:i32<1>
Legal operand
Analyzing operand: t91: i32 = FrameIndex<13>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32

Legalizing node: t986: ch = TokenFactor t984, t985
Analyzing result type: ch
Legal result type
Analyzing operand: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32
Legal operand
Analyzing operand: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t614, undef:i32
Legal operand
Legally typed node: t986: ch = TokenFactor t984, t985

Legalizing node: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t986: ch = TokenFactor t984, t985
Legal operand
Legally typed node: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t982: i32,i32 = uaddo t979, Constant:i32<1>
Legal operand
Analyzing operand: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1

Legalizing node: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1
Legal operand
Analyzing operand: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
Legal operand
Analyzing operand: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1
Legal operand
Legally typed node: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1

Legalizing node: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1
Legal operand
Legally typed node: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1

Legalizing node: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
Legal operand
Analyzing operand: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
Legal operand
Legally typed node: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1

Legalizing node: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
Legal operand
Analyzing operand: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
Legal operand
Legally typed node: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1

Legalizing node: t368: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t367:1, FrameIndex:i32<14>, undef:i32
Analyzing result type: i64
Expand integer result: t368: i64,ch = load<(dereferenceable load (s64) from %ir.18)> t367:1, FrameIndex:i32<14>, undef:i32

Creating new node: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
Creating new node: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32
Creating new node: t989: ch = TokenFactor t987:1, t988:1
Legalizing node: t369: i64 = add nsw t368, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t369: i64 = add nsw t368, Constant:i64<1>

Creating new node: t990: i32,i32 = uaddo t987, Constant:i32<1>
Creating new node: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
Legalizing node: t371: i32 = extract_element t369, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t369: i64 = add nsw t368, Constant:i64<1>
Expand integer operand: t371: i32 = extract_element t369, Constant:i32<1>

Legalizing node: t372: i32 = extract_element t369, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t369: i64 = add nsw t368, Constant:i64<1>
Expand integer operand: t372: i32 = extract_element t369, Constant:i32<0>

Legalizing node: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
Legal operand
Analyzing operand: t621: i32 = add FrameIndex:i32<14>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32

Legalizing node: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
Legal operand
Analyzing operand: t98: i32 = FrameIndex<14>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32

Legalizing node: t989: ch = TokenFactor t987:1, t988:1
Analyzing result type: ch
Legal result type
Analyzing operand: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
Legal operand
Analyzing operand: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32
Legal operand
Legally typed node: t989: ch = TokenFactor t987:1, t988:1

Legalizing node: t370: ch = store<(store (s64) into %ir.18)> t989, t369, FrameIndex:i32<14>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t989: ch = TokenFactor t987:1, t988:1
Legal operand
Analyzing operand: t369: i64 = add nsw t368, Constant:i64<1>
Expand integer operand: t370: ch = store<(store (s64) into %ir.18)> t989, t369, FrameIndex:i32<14>, undef:i32

Lowering node: t370: ch = store<(store (s64) into %ir.<badref>)> t989, t369, FrameIndex:i32<14>, undef:i32
Creating new node: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32
Creating new node: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t621, undef:i32
Creating new node: t994: ch = TokenFactor t992, t993
Legalizing node: t990: i32,i32 = uaddo t987, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t990: i32,i32 = uaddo t987, Constant:i32<1>

Legalizing node: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t990: i32,i32 = uaddo t987, Constant:i32<1>
Legal operand
Legally typed node: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1

Legalizing node: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t621, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t989: ch = TokenFactor t987:1, t988:1
Legal operand
Analyzing operand: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
Legal operand
Analyzing operand: t621: i32 = add FrameIndex:i32<14>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t621, undef:i32

Legalizing node: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t989: ch = TokenFactor t987:1, t988:1
Legal operand
Analyzing operand: t990: i32,i32 = uaddo t987, Constant:i32<1>
Legal operand
Analyzing operand: t98: i32 = FrameIndex<14>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32

Legalizing node: t994: ch = TokenFactor t992, t993
Analyzing result type: ch
Legal result type
Analyzing operand: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32
Legal operand
Analyzing operand: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t621, undef:i32
Legal operand
Legally typed node: t994: ch = TokenFactor t992, t993

Legalizing node: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t994: ch = TokenFactor t992, t993
Legal operand
Legally typed node: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t990: i32,i32 = uaddo t987, Constant:i32<1>
Legal operand
Analyzing operand: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1

Legalizing node: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1
Legal operand
Analyzing operand: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
Legal operand
Analyzing operand: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1
Legal operand
Legally typed node: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1

Legalizing node: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1
Legal operand
Legally typed node: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1

Legalizing node: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
Legal operand
Analyzing operand: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
Legal operand
Legally typed node: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1

Legalizing node: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
Legal operand
Analyzing operand: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
Legal operand
Legally typed node: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1

Legalizing node: t381: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t380:1, FrameIndex:i32<15>, undef:i32
Analyzing result type: i64
Expand integer result: t381: i64,ch = load<(dereferenceable load (s64) from %ir.19)> t380:1, FrameIndex:i32<15>, undef:i32

Creating new node: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
Creating new node: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32
Creating new node: t997: ch = TokenFactor t995:1, t996:1
Legalizing node: t382: i64 = add nsw t381, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t382: i64 = add nsw t381, Constant:i64<1>

Creating new node: t998: i32,i32 = uaddo t995, Constant:i32<1>
Creating new node: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
Legalizing node: t384: i32 = extract_element t382, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t382: i64 = add nsw t381, Constant:i64<1>
Expand integer operand: t384: i32 = extract_element t382, Constant:i32<1>

Legalizing node: t385: i32 = extract_element t382, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t382: i64 = add nsw t381, Constant:i64<1>
Expand integer operand: t385: i32 = extract_element t382, Constant:i32<0>

Legalizing node: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
Legal operand
Analyzing operand: t628: i32 = add FrameIndex:i32<15>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32

Legalizing node: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
Legal operand
Analyzing operand: t105: i32 = FrameIndex<15>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32

Legalizing node: t997: ch = TokenFactor t995:1, t996:1
Analyzing result type: ch
Legal result type
Analyzing operand: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
Legal operand
Analyzing operand: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32
Legal operand
Legally typed node: t997: ch = TokenFactor t995:1, t996:1

Legalizing node: t383: ch = store<(store (s64) into %ir.19)> t997, t382, FrameIndex:i32<15>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t997: ch = TokenFactor t995:1, t996:1
Legal operand
Analyzing operand: t382: i64 = add nsw t381, Constant:i64<1>
Expand integer operand: t383: ch = store<(store (s64) into %ir.19)> t997, t382, FrameIndex:i32<15>, undef:i32

Lowering node: t383: ch = store<(store (s64) into %ir.<badref>)> t997, t382, FrameIndex:i32<15>, undef:i32
Creating new node: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32
Creating new node: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t628, undef:i32
Creating new node: t1002: ch = TokenFactor t1000, t1001
Legalizing node: t998: i32,i32 = uaddo t995, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t998: i32,i32 = uaddo t995, Constant:i32<1>

Legalizing node: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t998: i32,i32 = uaddo t995, Constant:i32<1>
Legal operand
Legally typed node: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1

Legalizing node: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t628, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t997: ch = TokenFactor t995:1, t996:1
Legal operand
Analyzing operand: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
Legal operand
Analyzing operand: t628: i32 = add FrameIndex:i32<15>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t628, undef:i32

Legalizing node: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t997: ch = TokenFactor t995:1, t996:1
Legal operand
Analyzing operand: t998: i32,i32 = uaddo t995, Constant:i32<1>
Legal operand
Analyzing operand: t105: i32 = FrameIndex<15>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32

Legalizing node: t1002: ch = TokenFactor t1000, t1001
Analyzing result type: ch
Legal result type
Analyzing operand: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32
Legal operand
Analyzing operand: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t628, undef:i32
Legal operand
Legally typed node: t1002: ch = TokenFactor t1000, t1001

Legalizing node: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1002: ch = TokenFactor t1000, t1001
Legal operand
Legally typed node: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t998: i32,i32 = uaddo t995, Constant:i32<1>
Legal operand
Analyzing operand: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1

Legalizing node: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1
Legal operand
Analyzing operand: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
Legal operand
Analyzing operand: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1
Legal operand
Legally typed node: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1

Legalizing node: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1
Legal operand
Legally typed node: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1

Legalizing node: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
Legal operand
Analyzing operand: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
Legal operand
Legally typed node: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1

Legalizing node: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
Legal operand
Analyzing operand: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
Legal operand
Legally typed node: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1

Legalizing node: t394: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t393:1, FrameIndex:i32<16>, undef:i32
Analyzing result type: i64
Expand integer result: t394: i64,ch = load<(dereferenceable load (s64) from %ir.20)> t393:1, FrameIndex:i32<16>, undef:i32

Creating new node: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
Creating new node: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32
Creating new node: t1005: ch = TokenFactor t1003:1, t1004:1
Legalizing node: t395: i64 = add nsw t394, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t395: i64 = add nsw t394, Constant:i64<1>

Creating new node: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Creating new node: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
Legalizing node: t397: i32 = extract_element t395, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t395: i64 = add nsw t394, Constant:i64<1>
Expand integer operand: t397: i32 = extract_element t395, Constant:i32<1>

Legalizing node: t398: i32 = extract_element t395, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t395: i64 = add nsw t394, Constant:i64<1>
Expand integer operand: t398: i32 = extract_element t395, Constant:i32<0>

Legalizing node: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
Legal operand
Analyzing operand: t635: i32 = add FrameIndex:i32<16>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32

Legalizing node: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
Legal operand
Analyzing operand: t112: i32 = FrameIndex<16>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32

Legalizing node: t1005: ch = TokenFactor t1003:1, t1004:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
Legal operand
Analyzing operand: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32
Legal operand
Legally typed node: t1005: ch = TokenFactor t1003:1, t1004:1

Legalizing node: t396: ch = store<(store (s64) into %ir.20)> t1005, t395, FrameIndex:i32<16>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1005: ch = TokenFactor t1003:1, t1004:1
Legal operand
Analyzing operand: t395: i64 = add nsw t394, Constant:i64<1>
Expand integer operand: t396: ch = store<(store (s64) into %ir.20)> t1005, t395, FrameIndex:i32<16>, undef:i32

Lowering node: t396: ch = store<(store (s64) into %ir.<badref>)> t1005, t395, FrameIndex:i32<16>, undef:i32
Creating new node: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32
Creating new node: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t635, undef:i32
Creating new node: t1010: ch = TokenFactor t1008, t1009
Legalizing node: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1006: i32,i32 = uaddo t1003, Constant:i32<1>

Legalizing node: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Legal operand
Legally typed node: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1

Legalizing node: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t635, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1005: ch = TokenFactor t1003:1, t1004:1
Legal operand
Analyzing operand: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
Legal operand
Analyzing operand: t635: i32 = add FrameIndex:i32<16>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t635, undef:i32

Legalizing node: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1005: ch = TokenFactor t1003:1, t1004:1
Legal operand
Analyzing operand: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Legal operand
Analyzing operand: t112: i32 = FrameIndex<16>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32

Legalizing node: t1010: ch = TokenFactor t1008, t1009
Analyzing result type: ch
Legal result type
Analyzing operand: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32
Legal operand
Analyzing operand: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t635, undef:i32
Legal operand
Legally typed node: t1010: ch = TokenFactor t1008, t1009

Legalizing node: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1010: ch = TokenFactor t1008, t1009
Legal operand
Legally typed node: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Legal operand
Analyzing operand: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1

Legalizing node: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1
Legal operand
Analyzing operand: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
Legal operand
Analyzing operand: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1
Legal operand
Legally typed node: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1

Legalizing node: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1
Legal operand
Legally typed node: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1

Legalizing node: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
Legal operand
Analyzing operand: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
Legal operand
Legally typed node: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1

Legalizing node: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
Legal operand
Analyzing operand: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
Legal operand
Legally typed node: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1

Legalizing node: t407: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t406:1, FrameIndex:i32<17>, undef:i32
Analyzing result type: i64
Expand integer result: t407: i64,ch = load<(dereferenceable load (s64) from %ir.21)> t406:1, FrameIndex:i32<17>, undef:i32

Creating new node: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
Creating new node: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32
Creating new node: t1013: ch = TokenFactor t1011:1, t1012:1
Legalizing node: t408: i64 = add nsw t407, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t408: i64 = add nsw t407, Constant:i64<1>

Creating new node: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Creating new node: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
Legalizing node: t410: i32 = extract_element t408, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t408: i64 = add nsw t407, Constant:i64<1>
Expand integer operand: t410: i32 = extract_element t408, Constant:i32<1>

Legalizing node: t411: i32 = extract_element t408, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t408: i64 = add nsw t407, Constant:i64<1>
Expand integer operand: t411: i32 = extract_element t408, Constant:i32<0>

Legalizing node: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
Legal operand
Analyzing operand: t642: i32 = add FrameIndex:i32<17>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32

Legalizing node: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
Legal operand
Analyzing operand: t119: i32 = FrameIndex<17>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32

Legalizing node: t1013: ch = TokenFactor t1011:1, t1012:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
Legal operand
Analyzing operand: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32
Legal operand
Legally typed node: t1013: ch = TokenFactor t1011:1, t1012:1

Legalizing node: t409: ch = store<(store (s64) into %ir.21)> t1013, t408, FrameIndex:i32<17>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1013: ch = TokenFactor t1011:1, t1012:1
Legal operand
Analyzing operand: t408: i64 = add nsw t407, Constant:i64<1>
Expand integer operand: t409: ch = store<(store (s64) into %ir.21)> t1013, t408, FrameIndex:i32<17>, undef:i32

Lowering node: t409: ch = store<(store (s64) into %ir.<badref>)> t1013, t408, FrameIndex:i32<17>, undef:i32
Creating new node: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32
Creating new node: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t642, undef:i32
Creating new node: t1018: ch = TokenFactor t1016, t1017
Legalizing node: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1014: i32,i32 = uaddo t1011, Constant:i32<1>

Legalizing node: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Legal operand
Legally typed node: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1

Legalizing node: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t642, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1013: ch = TokenFactor t1011:1, t1012:1
Legal operand
Analyzing operand: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
Legal operand
Analyzing operand: t642: i32 = add FrameIndex:i32<17>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t642, undef:i32

Legalizing node: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1013: ch = TokenFactor t1011:1, t1012:1
Legal operand
Analyzing operand: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Legal operand
Analyzing operand: t119: i32 = FrameIndex<17>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32

Legalizing node: t1018: ch = TokenFactor t1016, t1017
Analyzing result type: ch
Legal result type
Analyzing operand: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32
Legal operand
Analyzing operand: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t642, undef:i32
Legal operand
Legally typed node: t1018: ch = TokenFactor t1016, t1017

Legalizing node: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1018: ch = TokenFactor t1016, t1017
Legal operand
Legally typed node: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Legal operand
Analyzing operand: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1

Legalizing node: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1
Legal operand
Analyzing operand: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
Legal operand
Analyzing operand: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1
Legal operand
Legally typed node: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1

Legalizing node: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1
Legal operand
Legally typed node: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1

Legalizing node: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
Legal operand
Analyzing operand: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
Legal operand
Legally typed node: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1

Legalizing node: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
Legal operand
Analyzing operand: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
Legal operand
Legally typed node: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1

Legalizing node: t420: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t419:1, FrameIndex:i32<18>, undef:i32
Analyzing result type: i64
Expand integer result: t420: i64,ch = load<(dereferenceable load (s64) from %ir.22)> t419:1, FrameIndex:i32<18>, undef:i32

Creating new node: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
Creating new node: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32
Creating new node: t1021: ch = TokenFactor t1019:1, t1020:1
Legalizing node: t421: i64 = add nsw t420, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t421: i64 = add nsw t420, Constant:i64<1>

Creating new node: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Creating new node: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
Legalizing node: t423: i32 = extract_element t421, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t421: i64 = add nsw t420, Constant:i64<1>
Expand integer operand: t423: i32 = extract_element t421, Constant:i32<1>

Legalizing node: t424: i32 = extract_element t421, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t421: i64 = add nsw t420, Constant:i64<1>
Expand integer operand: t424: i32 = extract_element t421, Constant:i32<0>

Legalizing node: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
Legal operand
Analyzing operand: t649: i32 = add FrameIndex:i32<18>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32

Legalizing node: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
Legal operand
Analyzing operand: t126: i32 = FrameIndex<18>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32

Legalizing node: t1021: ch = TokenFactor t1019:1, t1020:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
Legal operand
Analyzing operand: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32
Legal operand
Legally typed node: t1021: ch = TokenFactor t1019:1, t1020:1

Legalizing node: t422: ch = store<(store (s64) into %ir.22)> t1021, t421, FrameIndex:i32<18>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1021: ch = TokenFactor t1019:1, t1020:1
Legal operand
Analyzing operand: t421: i64 = add nsw t420, Constant:i64<1>
Expand integer operand: t422: ch = store<(store (s64) into %ir.22)> t1021, t421, FrameIndex:i32<18>, undef:i32

Lowering node: t422: ch = store<(store (s64) into %ir.<badref>)> t1021, t421, FrameIndex:i32<18>, undef:i32
Creating new node: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32
Creating new node: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t649, undef:i32
Creating new node: t1026: ch = TokenFactor t1024, t1025
Legalizing node: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1022: i32,i32 = uaddo t1019, Constant:i32<1>

Legalizing node: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Legal operand
Legally typed node: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1

Legalizing node: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t649, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1021: ch = TokenFactor t1019:1, t1020:1
Legal operand
Analyzing operand: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
Legal operand
Analyzing operand: t649: i32 = add FrameIndex:i32<18>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t649, undef:i32

Legalizing node: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1021: ch = TokenFactor t1019:1, t1020:1
Legal operand
Analyzing operand: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Legal operand
Analyzing operand: t126: i32 = FrameIndex<18>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32

Legalizing node: t1026: ch = TokenFactor t1024, t1025
Analyzing result type: ch
Legal result type
Analyzing operand: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32
Legal operand
Analyzing operand: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t649, undef:i32
Legal operand
Legally typed node: t1026: ch = TokenFactor t1024, t1025

Legalizing node: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1026: ch = TokenFactor t1024, t1025
Legal operand
Legally typed node: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Legal operand
Analyzing operand: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1

Legalizing node: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1
Legal operand
Analyzing operand: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
Legal operand
Analyzing operand: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1
Legal operand
Legally typed node: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1

Legalizing node: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1
Legal operand
Legally typed node: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1

Legalizing node: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
Legal operand
Analyzing operand: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
Legal operand
Legally typed node: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1

Legalizing node: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
Legal operand
Analyzing operand: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
Legal operand
Legally typed node: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1

Legalizing node: t433: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t432:1, FrameIndex:i32<19>, undef:i32
Analyzing result type: i64
Expand integer result: t433: i64,ch = load<(dereferenceable load (s64) from %ir.23)> t432:1, FrameIndex:i32<19>, undef:i32

Creating new node: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
Creating new node: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32
Creating new node: t1029: ch = TokenFactor t1027:1, t1028:1
Legalizing node: t434: i64 = add nsw t433, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t434: i64 = add nsw t433, Constant:i64<1>

Creating new node: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Creating new node: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
Legalizing node: t436: i32 = extract_element t434, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t434: i64 = add nsw t433, Constant:i64<1>
Expand integer operand: t436: i32 = extract_element t434, Constant:i32<1>

Legalizing node: t437: i32 = extract_element t434, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t434: i64 = add nsw t433, Constant:i64<1>
Expand integer operand: t437: i32 = extract_element t434, Constant:i32<0>

Legalizing node: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
Legal operand
Analyzing operand: t656: i32 = add FrameIndex:i32<19>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32

Legalizing node: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
Legal operand
Analyzing operand: t133: i32 = FrameIndex<19>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32

Legalizing node: t1029: ch = TokenFactor t1027:1, t1028:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
Legal operand
Analyzing operand: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32
Legal operand
Legally typed node: t1029: ch = TokenFactor t1027:1, t1028:1

Legalizing node: t435: ch = store<(store (s64) into %ir.23)> t1029, t434, FrameIndex:i32<19>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1029: ch = TokenFactor t1027:1, t1028:1
Legal operand
Analyzing operand: t434: i64 = add nsw t433, Constant:i64<1>
Expand integer operand: t435: ch = store<(store (s64) into %ir.23)> t1029, t434, FrameIndex:i32<19>, undef:i32

Lowering node: t435: ch = store<(store (s64) into %ir.<badref>)> t1029, t434, FrameIndex:i32<19>, undef:i32
Creating new node: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32
Creating new node: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t656, undef:i32
Creating new node: t1034: ch = TokenFactor t1032, t1033
Legalizing node: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1030: i32,i32 = uaddo t1027, Constant:i32<1>

Legalizing node: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Legal operand
Legally typed node: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1

Legalizing node: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t656, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1029: ch = TokenFactor t1027:1, t1028:1
Legal operand
Analyzing operand: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
Legal operand
Analyzing operand: t656: i32 = add FrameIndex:i32<19>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t656, undef:i32

Legalizing node: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1029: ch = TokenFactor t1027:1, t1028:1
Legal operand
Analyzing operand: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Legal operand
Analyzing operand: t133: i32 = FrameIndex<19>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32

Legalizing node: t1034: ch = TokenFactor t1032, t1033
Analyzing result type: ch
Legal result type
Analyzing operand: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32
Legal operand
Analyzing operand: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t656, undef:i32
Legal operand
Legally typed node: t1034: ch = TokenFactor t1032, t1033

Legalizing node: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1034: ch = TokenFactor t1032, t1033
Legal operand
Legally typed node: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Legal operand
Analyzing operand: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1

Legalizing node: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1
Legal operand
Analyzing operand: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
Legal operand
Analyzing operand: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1
Legal operand
Legally typed node: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1

Legalizing node: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1
Legal operand
Legally typed node: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1

Legalizing node: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
Legal operand
Analyzing operand: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
Legal operand
Legally typed node: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1

Legalizing node: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
Legal operand
Analyzing operand: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
Legal operand
Legally typed node: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1

Legalizing node: t446: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t445:1, FrameIndex:i32<20>, undef:i32
Analyzing result type: i64
Expand integer result: t446: i64,ch = load<(dereferenceable load (s64) from %ir.24)> t445:1, FrameIndex:i32<20>, undef:i32

Creating new node: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
Creating new node: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32
Creating new node: t1037: ch = TokenFactor t1035:1, t1036:1
Legalizing node: t447: i64 = add nsw t446, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t447: i64 = add nsw t446, Constant:i64<1>

Creating new node: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Creating new node: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
Legalizing node: t449: i32 = extract_element t447, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t447: i64 = add nsw t446, Constant:i64<1>
Expand integer operand: t449: i32 = extract_element t447, Constant:i32<1>

Legalizing node: t450: i32 = extract_element t447, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t447: i64 = add nsw t446, Constant:i64<1>
Expand integer operand: t450: i32 = extract_element t447, Constant:i32<0>

Legalizing node: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
Legal operand
Analyzing operand: t663: i32 = add FrameIndex:i32<20>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32

Legalizing node: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
Legal operand
Analyzing operand: t140: i32 = FrameIndex<20>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32

Legalizing node: t1037: ch = TokenFactor t1035:1, t1036:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
Legal operand
Analyzing operand: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32
Legal operand
Legally typed node: t1037: ch = TokenFactor t1035:1, t1036:1

Legalizing node: t448: ch = store<(store (s64) into %ir.24)> t1037, t447, FrameIndex:i32<20>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1037: ch = TokenFactor t1035:1, t1036:1
Legal operand
Analyzing operand: t447: i64 = add nsw t446, Constant:i64<1>
Expand integer operand: t448: ch = store<(store (s64) into %ir.24)> t1037, t447, FrameIndex:i32<20>, undef:i32

Lowering node: t448: ch = store<(store (s64) into %ir.<badref>)> t1037, t447, FrameIndex:i32<20>, undef:i32
Creating new node: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32
Creating new node: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t663, undef:i32
Creating new node: t1042: ch = TokenFactor t1040, t1041
Legalizing node: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1038: i32,i32 = uaddo t1035, Constant:i32<1>

Legalizing node: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Legal operand
Legally typed node: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1

Legalizing node: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t663, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1037: ch = TokenFactor t1035:1, t1036:1
Legal operand
Analyzing operand: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
Legal operand
Analyzing operand: t663: i32 = add FrameIndex:i32<20>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t663, undef:i32

Legalizing node: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1037: ch = TokenFactor t1035:1, t1036:1
Legal operand
Analyzing operand: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Legal operand
Analyzing operand: t140: i32 = FrameIndex<20>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32

Legalizing node: t1042: ch = TokenFactor t1040, t1041
Analyzing result type: ch
Legal result type
Analyzing operand: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32
Legal operand
Analyzing operand: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t663, undef:i32
Legal operand
Legally typed node: t1042: ch = TokenFactor t1040, t1041

Legalizing node: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1042: ch = TokenFactor t1040, t1041
Legal operand
Legally typed node: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Legal operand
Analyzing operand: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1

Legalizing node: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1
Legal operand
Analyzing operand: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
Legal operand
Analyzing operand: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1
Legal operand
Legally typed node: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1

Legalizing node: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1
Legal operand
Legally typed node: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1

Legalizing node: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
Legal operand
Analyzing operand: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
Legal operand
Legally typed node: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1

Legalizing node: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
Legal operand
Analyzing operand: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
Legal operand
Legally typed node: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1

Legalizing node: t459: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t458:1, FrameIndex:i32<21>, undef:i32
Analyzing result type: i64
Expand integer result: t459: i64,ch = load<(dereferenceable load (s64) from %ir.25)> t458:1, FrameIndex:i32<21>, undef:i32

Creating new node: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
Creating new node: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32
Creating new node: t1045: ch = TokenFactor t1043:1, t1044:1
Legalizing node: t460: i64 = add nsw t459, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t460: i64 = add nsw t459, Constant:i64<1>

Creating new node: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Creating new node: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
Legalizing node: t462: i32 = extract_element t460, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t460: i64 = add nsw t459, Constant:i64<1>
Expand integer operand: t462: i32 = extract_element t460, Constant:i32<1>

Legalizing node: t463: i32 = extract_element t460, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t460: i64 = add nsw t459, Constant:i64<1>
Expand integer operand: t463: i32 = extract_element t460, Constant:i32<0>

Legalizing node: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
Legal operand
Analyzing operand: t670: i32 = add FrameIndex:i32<21>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32

Legalizing node: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
Legal operand
Analyzing operand: t147: i32 = FrameIndex<21>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32

Legalizing node: t1045: ch = TokenFactor t1043:1, t1044:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
Legal operand
Analyzing operand: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32
Legal operand
Legally typed node: t1045: ch = TokenFactor t1043:1, t1044:1

Legalizing node: t461: ch = store<(store (s64) into %ir.25)> t1045, t460, FrameIndex:i32<21>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1045: ch = TokenFactor t1043:1, t1044:1
Legal operand
Analyzing operand: t460: i64 = add nsw t459, Constant:i64<1>
Expand integer operand: t461: ch = store<(store (s64) into %ir.25)> t1045, t460, FrameIndex:i32<21>, undef:i32

Lowering node: t461: ch = store<(store (s64) into %ir.<badref>)> t1045, t460, FrameIndex:i32<21>, undef:i32
Creating new node: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32
Creating new node: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t670, undef:i32
Creating new node: t1050: ch = TokenFactor t1048, t1049
Legalizing node: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1046: i32,i32 = uaddo t1043, Constant:i32<1>

Legalizing node: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Legal operand
Legally typed node: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1

Legalizing node: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t670, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1045: ch = TokenFactor t1043:1, t1044:1
Legal operand
Analyzing operand: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
Legal operand
Analyzing operand: t670: i32 = add FrameIndex:i32<21>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t670, undef:i32

Legalizing node: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1045: ch = TokenFactor t1043:1, t1044:1
Legal operand
Analyzing operand: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Legal operand
Analyzing operand: t147: i32 = FrameIndex<21>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32

Legalizing node: t1050: ch = TokenFactor t1048, t1049
Analyzing result type: ch
Legal result type
Analyzing operand: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32
Legal operand
Analyzing operand: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t670, undef:i32
Legal operand
Legally typed node: t1050: ch = TokenFactor t1048, t1049

Legalizing node: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1050: ch = TokenFactor t1048, t1049
Legal operand
Legally typed node: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Legal operand
Analyzing operand: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1

Legalizing node: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1
Legal operand
Analyzing operand: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
Legal operand
Analyzing operand: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1
Legal operand
Legally typed node: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1

Legalizing node: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1
Legal operand
Legally typed node: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1

Legalizing node: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
Legal operand
Analyzing operand: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
Legal operand
Legally typed node: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1

Legalizing node: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
Legal operand
Analyzing operand: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
Legal operand
Legally typed node: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1

Legalizing node: t472: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t471:1, FrameIndex:i32<22>, undef:i32
Analyzing result type: i64
Expand integer result: t472: i64,ch = load<(dereferenceable load (s64) from %ir.26)> t471:1, FrameIndex:i32<22>, undef:i32

Creating new node: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
Creating new node: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32
Creating new node: t1053: ch = TokenFactor t1051:1, t1052:1
Legalizing node: t473: i64 = add nsw t472, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t473: i64 = add nsw t472, Constant:i64<1>

Creating new node: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Creating new node: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
Legalizing node: t475: i32 = extract_element t473, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t473: i64 = add nsw t472, Constant:i64<1>
Expand integer operand: t475: i32 = extract_element t473, Constant:i32<1>

Legalizing node: t476: i32 = extract_element t473, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t473: i64 = add nsw t472, Constant:i64<1>
Expand integer operand: t476: i32 = extract_element t473, Constant:i32<0>

Legalizing node: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
Legal operand
Analyzing operand: t677: i32 = add FrameIndex:i32<22>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32

Legalizing node: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
Legal operand
Analyzing operand: t154: i32 = FrameIndex<22>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32

Legalizing node: t1053: ch = TokenFactor t1051:1, t1052:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
Legal operand
Analyzing operand: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32
Legal operand
Legally typed node: t1053: ch = TokenFactor t1051:1, t1052:1

Legalizing node: t474: ch = store<(store (s64) into %ir.26)> t1053, t473, FrameIndex:i32<22>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1053: ch = TokenFactor t1051:1, t1052:1
Legal operand
Analyzing operand: t473: i64 = add nsw t472, Constant:i64<1>
Expand integer operand: t474: ch = store<(store (s64) into %ir.26)> t1053, t473, FrameIndex:i32<22>, undef:i32

Lowering node: t474: ch = store<(store (s64) into %ir.<badref>)> t1053, t473, FrameIndex:i32<22>, undef:i32
Creating new node: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32
Creating new node: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t677, undef:i32
Creating new node: t1058: ch = TokenFactor t1056, t1057
Legalizing node: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1054: i32,i32 = uaddo t1051, Constant:i32<1>

Legalizing node: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Legal operand
Legally typed node: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1

Legalizing node: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t677, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1053: ch = TokenFactor t1051:1, t1052:1
Legal operand
Analyzing operand: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
Legal operand
Analyzing operand: t677: i32 = add FrameIndex:i32<22>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t677, undef:i32

Legalizing node: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1053: ch = TokenFactor t1051:1, t1052:1
Legal operand
Analyzing operand: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Legal operand
Analyzing operand: t154: i32 = FrameIndex<22>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32

Legalizing node: t1058: ch = TokenFactor t1056, t1057
Analyzing result type: ch
Legal result type
Analyzing operand: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32
Legal operand
Analyzing operand: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t677, undef:i32
Legal operand
Legally typed node: t1058: ch = TokenFactor t1056, t1057

Legalizing node: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1058: ch = TokenFactor t1056, t1057
Legal operand
Legally typed node: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Legal operand
Analyzing operand: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1

Legalizing node: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1
Legal operand
Analyzing operand: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
Legal operand
Analyzing operand: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1
Legal operand
Legally typed node: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1

Legalizing node: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1
Legal operand
Legally typed node: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1

Legalizing node: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
Legal operand
Analyzing operand: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
Legal operand
Legally typed node: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1

Legalizing node: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
Legal operand
Analyzing operand: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
Legal operand
Legally typed node: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1

Legalizing node: t485: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t484:1, FrameIndex:i32<23>, undef:i32
Analyzing result type: i64
Expand integer result: t485: i64,ch = load<(dereferenceable load (s64) from %ir.27)> t484:1, FrameIndex:i32<23>, undef:i32

Creating new node: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
Creating new node: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32
Creating new node: t1061: ch = TokenFactor t1059:1, t1060:1
Legalizing node: t486: i64 = add nsw t485, Constant:i64<1>
Analyzing result type: i64
Expand integer result: t486: i64 = add nsw t485, Constant:i64<1>

Creating new node: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Creating new node: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
Legalizing node: t488: i32 = extract_element t486, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing operand: t486: i64 = add nsw t485, Constant:i64<1>
Expand integer operand: t488: i32 = extract_element t486, Constant:i32<1>

Legalizing node: t489: i32 = extract_element t486, Constant:i32<0>
Analyzing result type: i32
Legal result type
Analyzing operand: t486: i64 = add nsw t485, Constant:i64<1>
Expand integer operand: t489: i32 = extract_element t486, Constant:i32<0>

Legalizing node: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
Legal operand
Analyzing operand: t684: i32 = add FrameIndex:i32<23>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32

Legalizing node: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
Legal operand
Analyzing operand: t161: i32 = FrameIndex<23>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32

Legalizing node: t1061: ch = TokenFactor t1059:1, t1060:1
Analyzing result type: ch
Legal result type
Analyzing operand: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
Legal operand
Analyzing operand: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32
Legal operand
Legally typed node: t1061: ch = TokenFactor t1059:1, t1060:1

Legalizing node: t487: ch = store<(store (s64) into %ir.27)> t1061, t486, FrameIndex:i32<23>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1061: ch = TokenFactor t1059:1, t1060:1
Legal operand
Analyzing operand: t486: i64 = add nsw t485, Constant:i64<1>
Expand integer operand: t487: ch = store<(store (s64) into %ir.27)> t1061, t486, FrameIndex:i32<23>, undef:i32

Lowering node: t487: ch = store<(store (s64) into %ir.<badref>)> t1061, t486, FrameIndex:i32<23>, undef:i32
Creating new node: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32
Creating new node: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t684, undef:i32
Creating new node: t1066: ch = TokenFactor t1064, t1065
Legalizing node: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
Legal operand
Analyzing operand: t16: i32 = Constant<1>
Legal operand
Legally typed node: t1062: i32,i32 = uaddo t1059, Constant:i32<1>

Legalizing node: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
Analyzing result type: i32
Legal result type
Analyzing result type: i32
Legal result type
Analyzing operand: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32
Legal operand
Analyzing operand: t8: i32 = Constant<0>
Legal operand
Analyzing operand: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Legal operand
Legally typed node: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1

Legalizing node: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t684, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1061: ch = TokenFactor t1059:1, t1060:1
Legal operand
Analyzing operand: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
Legal operand
Analyzing operand: t684: i32 = add FrameIndex:i32<23>, Constant:i32<4>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t684, undef:i32

Legalizing node: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t1061: ch = TokenFactor t1059:1, t1060:1
Legal operand
Analyzing operand: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Legal operand
Analyzing operand: t161: i32 = FrameIndex<23>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32

Legalizing node: t1066: ch = TokenFactor t1064, t1065
Analyzing result type: ch
Legal result type
Analyzing operand: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32
Legal operand
Analyzing operand: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t684, undef:i32
Legal operand
Legally typed node: t1066: ch = TokenFactor t1064, t1065

Legalizing node: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t1066: ch = TokenFactor t1064, t1065
Legal operand
Legally typed node: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t219: i32 = GlobalAddress<ptr @.str> 0
Legal operand
Legally typed node: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Legalizing node: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Analyzing operand: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Legal operand
Analyzing operand: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal operand
Legally typed node: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1

Legalizing node: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1
Legal operand
Analyzing operand: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
Legal operand
Analyzing operand: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1
Legal operand
Legally typed node: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1

Legalizing node: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1
Legal operand
Analyzing operand: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t233: Untyped = RegisterMask
Legal operand
Analyzing operand: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1
Legal operand
Legally typed node: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1

Legalizing node: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
Legal operand
Analyzing operand: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
Legal operand
Legally typed node: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1

Legalizing node: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
Legal operand
Analyzing operand: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
Legal operand
Legally typed node: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1

Legalizing node: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
Legal operand
Analyzing operand: t211: i32 = FrameIndex<24>
Legal operand
Analyzing operand: t9: i32 = undef
Legal operand
Legally typed node: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32

Legalizing node: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
Legal operand
Analyzing operand: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
Legal operand
Legally typed node: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498

Legalizing node: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1
Analyzing result type: ch
Legal result type
Analyzing operand: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
Legal operand
Analyzing operand: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
Legal operand
Legally typed node: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1

Legalizing node: t65535: ch = handlenode t500
Analyzing result type: ch
Legal result type
Analyzing operand: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1
Legal operand
Legally typed node: t65535: ch = handlenode t500

Type-legalized selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 729 nodes:
  t0: ch,glue = EntryToken
      t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32
          t540: i32 = sra t538, Constant:i32<31>
        t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
      t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t544, undef:i32
    t546: ch = TokenFactor t543, t545
  t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
      t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32
          t547: i32 = sra t534, Constant:i32<31>
        t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
      t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t551, undef:i32
    t553: ch = TokenFactor t550, t552
  t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
  t32: i32 = mul nsw t30, Constant:i32<3>
      t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32
          t554: i32 = sra t32, Constant:i32<31>
        t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
      t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t558, undef:i32
    t560: ch = TokenFactor t557, t559
  t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
      t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32
          t561: i32 = sra t529, Constant:i32<31>
        t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
      t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t565, undef:i32
    t567: ch = TokenFactor t564, t566
  t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
  t46: i32 = mul nsw t44, Constant:i32<5>
      t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32
          t568: i32 = sra t46, Constant:i32<31>
        t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
      t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t572, undef:i32
    t574: ch = TokenFactor t571, t573
  t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
  t53: i32 = mul nsw t51, Constant:i32<6>
      t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32
          t575: i32 = sra t53, Constant:i32<31>
        t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
      t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t579, undef:i32
    t581: ch = TokenFactor t578, t580
  t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
  t60: i32 = mul nsw t58, Constant:i32<7>
      t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32
          t582: i32 = sra t60, Constant:i32<31>
        t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
      t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t586, undef:i32
    t588: ch = TokenFactor t585, t587
  t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
      t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32
          t589: i32 = sra t522, Constant:i32<31>
        t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
      t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t593, undef:i32
    t595: ch = TokenFactor t592, t594
  t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
  t74: i32 = mul nsw t72, Constant:i32<9>
      t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32
          t596: i32 = sra t74, Constant:i32<31>
        t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
      t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t600, undef:i32
    t602: ch = TokenFactor t599, t601
  t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
  t81: i32 = mul nsw t79, Constant:i32<10>
      t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32
          t603: i32 = sra t81, Constant:i32<31>
        t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
      t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t607, undef:i32
    t609: ch = TokenFactor t606, t608
  t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
  t88: i32 = mul nsw t86, Constant:i32<11>
      t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32
          t610: i32 = sra t88, Constant:i32<31>
        t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
      t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t614, undef:i32
    t616: ch = TokenFactor t613, t615
  t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
  t95: i32 = mul nsw t93, Constant:i32<12>
      t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32
          t617: i32 = sra t95, Constant:i32<31>
        t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
      t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t621, undef:i32
    t623: ch = TokenFactor t620, t622
  t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
  t102: i32 = mul nsw t100, Constant:i32<13>
      t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32
          t624: i32 = sra t102, Constant:i32<31>
        t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
      t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t628, undef:i32
    t630: ch = TokenFactor t627, t629
  t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
  t109: i32 = mul nsw t107, Constant:i32<14>
      t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32
          t631: i32 = sra t109, Constant:i32<31>
        t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
      t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t635, undef:i32
    t637: ch = TokenFactor t634, t636
  t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
  t116: i32 = mul nsw t114, Constant:i32<15>
      t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32
          t638: i32 = sra t116, Constant:i32<31>
        t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
      t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t642, undef:i32
    t644: ch = TokenFactor t641, t643
  t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
      t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32
          t645: i32 = sra t511, Constant:i32<31>
        t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
      t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t649, undef:i32
    t651: ch = TokenFactor t648, t650
  t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
  t130: i32 = mul nsw t128, Constant:i32<17>
      t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32
          t652: i32 = sra t130, Constant:i32<31>
        t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
      t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t656, undef:i32
    t658: ch = TokenFactor t655, t657
  t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
  t137: i32 = mul nsw t135, Constant:i32<18>
      t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32
          t659: i32 = sra t137, Constant:i32<31>
        t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
      t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t663, undef:i32
    t665: ch = TokenFactor t662, t664
  t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
  t144: i32 = mul nsw t142, Constant:i32<19>
      t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32
          t666: i32 = sra t144, Constant:i32<31>
        t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
      t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t670, undef:i32
    t672: ch = TokenFactor t669, t671
  t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
  t151: i32 = mul nsw t149, Constant:i32<20>
      t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32
          t673: i32 = sra t151, Constant:i32<31>
        t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
      t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t677, undef:i32
    t679: ch = TokenFactor t676, t678
  t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
  t158: i32 = mul nsw t156, Constant:i32<21>
  t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
  t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
      t868: ch = TokenFactor t866:1, t867:1
      t865: ch = TokenFactor t863:1, t864:1
      t862: ch = TokenFactor t860:1, t861:1
      t859: ch = TokenFactor t857:1, t858:1
      t850: ch = TokenFactor t848:1, t849:1
      t809: ch = TokenFactor t807:1, t808:1
      t806: ch = TokenFactor t804:1, t805:1
      t803: ch = TokenFactor t801:1, t802:1
      t780: ch = TokenFactor t778:1, t779:1
      t777: ch = TokenFactor t775:1, t776:1
      t774: ch = TokenFactor t772:1, t773:1
      t751: ch = TokenFactor t749:1, t750:1
      t748: ch = TokenFactor t746:1, t747:1
      t743: ch = TokenFactor t741:1, t742:1
      t734: ch = TokenFactor t732:1, t733:1
      t731: ch = TokenFactor t729:1, t730:1
      t728: ch = TokenFactor t726:1, t727:1
      t723: ch = TokenFactor t721:1, t722:1
      t720: ch = TokenFactor t718:1, t719:1
      t694: ch = TokenFactor t692:1, t693:1
      t689: ch = TokenFactor t687:1, t688:1
    t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
    t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
  t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
        t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32
        t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t544, undef:i32
      t906: ch = TokenFactor t904, t905
    t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
  t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1
  t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
  t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
  t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
        t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32
        t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t551, undef:i32
      t914: ch = TokenFactor t912, t913
    t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
  t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1
  t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
  t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
  t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
        t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32
        t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t558, undef:i32
      t922: ch = TokenFactor t920, t921
    t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
  t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1
  t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
  t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
  t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
        t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32
        t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t565, undef:i32
      t930: ch = TokenFactor t928, t929
    t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
  t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1
  t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
  t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
  t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
        t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32
        t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t572, undef:i32
      t938: ch = TokenFactor t936, t937
    t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
  t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1
  t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
  t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
  t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
        t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32
        t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t579, undef:i32
      t946: ch = TokenFactor t944, t945
    t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
  t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1
  t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
  t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
  t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
        t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32
        t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t586, undef:i32
      t954: ch = TokenFactor t952, t953
    t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
  t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1
  t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
  t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
  t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
        t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32
        t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t593, undef:i32
      t962: ch = TokenFactor t960, t961
    t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
  t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1
  t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
  t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
  t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
        t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32
        t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t600, undef:i32
      t970: ch = TokenFactor t968, t969
    t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
  t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1
  t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
  t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
  t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
        t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32
        t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t607, undef:i32
      t978: ch = TokenFactor t976, t977
    t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
  t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1
  t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
  t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
  t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
        t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32
        t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t614, undef:i32
      t986: ch = TokenFactor t984, t985
    t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
  t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1
  t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
  t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
  t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
        t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32
        t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t621, undef:i32
      t994: ch = TokenFactor t992, t993
    t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
  t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1
  t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
  t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
  t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
        t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32
        t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t628, undef:i32
      t1002: ch = TokenFactor t1000, t1001
    t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
  t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1
  t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
  t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
  t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
        t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32
        t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t635, undef:i32
      t1010: ch = TokenFactor t1008, t1009
    t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
  t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1
  t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
  t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
  t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
        t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32
        t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t642, undef:i32
      t1018: ch = TokenFactor t1016, t1017
    t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
  t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1
  t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
  t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
  t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
        t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32
        t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t649, undef:i32
      t1026: ch = TokenFactor t1024, t1025
    t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
  t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1
  t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
  t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
  t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
        t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32
        t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t656, undef:i32
      t1034: ch = TokenFactor t1032, t1033
    t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
  t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1
  t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
  t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
  t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
        t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32
        t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t663, undef:i32
      t1042: ch = TokenFactor t1040, t1041
    t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
  t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1
  t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
  t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
  t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
        t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32
        t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t670, undef:i32
      t1050: ch = TokenFactor t1048, t1049
    t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
  t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1
  t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
  t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
  t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
        t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32
        t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t677, undef:i32
      t1058: ch = TokenFactor t1056, t1057
    t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
  t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1
  t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
  t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
  t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
        t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32
        t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t684, undef:i32
      t1066: ch = TokenFactor t1064, t1065
    t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
  t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1
  t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
  t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
  t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
    t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
  t511: i32 = shl t121, Constant:i32<4>
  t522: i32 = shl t65, Constant:i32<3>
  t529: i32 = shl t37, Constant:i32<2>
  t534: i32 = shl t23, Constant:i32<1>
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
  t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
  t541: i32,i32 = usubo Constant:i32<0>, t538
  t544: i32 = add FrameIndex:i32<3>, Constant:i32<4>
  t548: i32,i32 = usubo Constant:i32<0>, t534
  t551: i32 = add FrameIndex:i32<4>, Constant:i32<4>
  t555: i32,i32 = usubo Constant:i32<0>, t32
  t558: i32 = add FrameIndex:i32<5>, Constant:i32<4>
  t562: i32,i32 = usubo Constant:i32<0>, t529
  t565: i32 = add FrameIndex:i32<6>, Constant:i32<4>
  t569: i32,i32 = usubo Constant:i32<0>, t46
  t572: i32 = add FrameIndex:i32<7>, Constant:i32<4>
  t576: i32,i32 = usubo Constant:i32<0>, t53
  t579: i32 = add FrameIndex:i32<8>, Constant:i32<4>
  t583: i32,i32 = usubo Constant:i32<0>, t60
  t586: i32 = add FrameIndex:i32<9>, Constant:i32<4>
  t590: i32,i32 = usubo Constant:i32<0>, t522
  t593: i32 = add FrameIndex:i32<10>, Constant:i32<4>
  t597: i32,i32 = usubo Constant:i32<0>, t74
  t600: i32 = add FrameIndex:i32<11>, Constant:i32<4>
  t604: i32,i32 = usubo Constant:i32<0>, t81
  t607: i32 = add FrameIndex:i32<12>, Constant:i32<4>
  t611: i32,i32 = usubo Constant:i32<0>, t88
  t614: i32 = add FrameIndex:i32<13>, Constant:i32<4>
  t618: i32,i32 = usubo Constant:i32<0>, t95
  t621: i32 = add FrameIndex:i32<14>, Constant:i32<4>
  t625: i32,i32 = usubo Constant:i32<0>, t102
  t628: i32 = add FrameIndex:i32<15>, Constant:i32<4>
  t632: i32,i32 = usubo Constant:i32<0>, t109
  t635: i32 = add FrameIndex:i32<16>, Constant:i32<4>
  t639: i32,i32 = usubo Constant:i32<0>, t116
  t642: i32 = add FrameIndex:i32<17>, Constant:i32<4>
  t646: i32,i32 = usubo Constant:i32<0>, t511
  t649: i32 = add FrameIndex:i32<18>, Constant:i32<4>
  t653: i32,i32 = usubo Constant:i32<0>, t130
  t656: i32 = add FrameIndex:i32<19>, Constant:i32<4>
  t660: i32,i32 = usubo Constant:i32<0>, t137
  t663: i32 = add FrameIndex:i32<20>, Constant:i32<4>
  t667: i32,i32 = usubo Constant:i32<0>, t144
  t670: i32 = add FrameIndex:i32<21>, Constant:i32<4>
  t674: i32,i32 = usubo Constant:i32<0>, t151
  t677: i32 = add FrameIndex:i32<22>, Constant:i32<4>
  t681: i32,i32 = usubo Constant:i32<0>, t158
  t684: i32 = add FrameIndex:i32<23>, Constant:i32<4>
    t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32
        t680: i32 = sra t158, Constant:i32<31>
      t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
    t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t684, undef:i32
  t686: ch = TokenFactor t683, t685
  t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
  t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32
  t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
  t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32
    t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
  t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
    t690: i32 = xor t687, Constant:i32<-1>
  t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
    t691: i32 = xor t688, Constant:i32<-1>
  t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
  t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
  t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
  t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
  t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
  t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32
  t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
  t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32
  t724: i32,i32 = uaddo t721, t718
  t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
  t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32
  t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
  t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32
  t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
  t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32
  t735: i32,i32 = usubo t732, t729
  t737: i32,i32 = usubo t735, t726
  t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
  t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32
  t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
  t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32
  t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
  t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32
    t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
  t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
  t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
  t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
  t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
  t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
  t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
  t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
  t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32
  t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
  t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32
  t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
  t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32
    t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
  t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
  t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
  t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
  t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
  t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
  t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
  t799: i32,i32 = uaddo t793, t772
  t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
  t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32
  t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
  t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32
  t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
  t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32
    t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
  t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
  t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
  t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
  t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
  t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
  t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
    t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
    t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
  t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
  t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
  t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
  t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
  t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
  t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
  t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
  t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32
  t851: i32,i32 = uaddo t848, t842
  t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
  t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32
  t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
  t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32
  t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
  t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32
  t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
  t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32
    t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
    t165: i32 = add nsw t163, t164
  t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
  t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
              t869: i32 = and t866, t863
            t871: i32 = or t869, t860
          t873: i32 = or t871, t857
            t853: i32 = and t851, t799
          t855: i32 = and t853, t766
        t875: i32 = or t873, t855
          t739: i32 = and t737, t724
        t744: i32 = xor t741, t739
      t877: i32 = or t875, t744
    t879: i32 = or t877, t711
  t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
              t870: i32 = and t867, t864
            t872: i32 = or t870, t861
          t874: i32 = or t872, t858
                t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
              t852: i32,i32 = addcarry t849, t843, t851:1
                t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
              t800: i32,i32 = addcarry t794, t773, t799:1
            t854: i32 = and t852, t800
            t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
          t856: i32 = and t854, t767
        t876: i32 = or t874, t856
              t736: i32,i32 = subcarry t733, t730, t735:1
            t738: i32,i32 = subcarry t736, t727, t737:1
            t725: i32,i32 = addcarry t722, t719, t724:1
          t740: i32 = and t738, t725
        t745: i32 = xor t742, t740
      t878: i32 = or t876, t745
      t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
    t880: i32 = or t878, t712
  t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
  t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
  t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
  t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
  t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32
  t901: ch = TokenFactor t899:1, t900:1
  t902: i32,i32 = uaddo t899, Constant:i32<1>
  t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
  t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
  t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32
  t909: ch = TokenFactor t907:1, t908:1
  t910: i32,i32 = uaddo t907, Constant:i32<1>
  t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
  t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
  t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32
  t917: ch = TokenFactor t915:1, t916:1
  t918: i32,i32 = uaddo t915, Constant:i32<1>
  t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
  t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
  t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32
  t925: ch = TokenFactor t923:1, t924:1
  t926: i32,i32 = uaddo t923, Constant:i32<1>
  t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
  t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
  t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32
  t933: ch = TokenFactor t931:1, t932:1
  t934: i32,i32 = uaddo t931, Constant:i32<1>
  t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
  t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
  t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32
  t941: ch = TokenFactor t939:1, t940:1
  t942: i32,i32 = uaddo t939, Constant:i32<1>
  t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
  t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
  t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32
  t949: ch = TokenFactor t947:1, t948:1
  t950: i32,i32 = uaddo t947, Constant:i32<1>
  t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
  t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
  t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32
  t957: ch = TokenFactor t955:1, t956:1
  t958: i32,i32 = uaddo t955, Constant:i32<1>
  t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
  t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
  t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32
  t965: ch = TokenFactor t963:1, t964:1
  t966: i32,i32 = uaddo t963, Constant:i32<1>
  t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
  t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
  t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32
  t973: ch = TokenFactor t971:1, t972:1
  t974: i32,i32 = uaddo t971, Constant:i32<1>
  t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
  t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
  t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32
  t981: ch = TokenFactor t979:1, t980:1
  t982: i32,i32 = uaddo t979, Constant:i32<1>
  t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
  t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
  t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32
  t989: ch = TokenFactor t987:1, t988:1
  t990: i32,i32 = uaddo t987, Constant:i32<1>
  t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
  t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
  t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32
  t997: ch = TokenFactor t995:1, t996:1
  t998: i32,i32 = uaddo t995, Constant:i32<1>
  t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
  t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
  t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32
  t1005: ch = TokenFactor t1003:1, t1004:1
  t1006: i32,i32 = uaddo t1003, Constant:i32<1>
  t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
  t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
  t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32
  t1013: ch = TokenFactor t1011:1, t1012:1
  t1014: i32,i32 = uaddo t1011, Constant:i32<1>
  t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
  t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
  t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32
  t1021: ch = TokenFactor t1019:1, t1020:1
  t1022: i32,i32 = uaddo t1019, Constant:i32<1>
  t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
  t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
  t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32
  t1029: ch = TokenFactor t1027:1, t1028:1
  t1030: i32,i32 = uaddo t1027, Constant:i32<1>
  t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
  t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
  t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32
  t1037: ch = TokenFactor t1035:1, t1036:1
  t1038: i32,i32 = uaddo t1035, Constant:i32<1>
  t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
  t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
  t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32
  t1045: ch = TokenFactor t1043:1, t1044:1
  t1046: i32,i32 = uaddo t1043, Constant:i32<1>
  t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
  t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
  t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32
  t1053: ch = TokenFactor t1051:1, t1052:1
  t1054: i32,i32 = uaddo t1051, Constant:i32<1>
  t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
  t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
  t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32
  t1061: ch = TokenFactor t1059:1, t1060:1
  t1062: i32,i32 = uaddo t1059, Constant:i32<1>
  t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
  t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1



Combining: t1066: ch = TokenFactor t1064, t1065

Combining: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t684, undef:i32

Combining: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32

Combining: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1

Combining: t1062: i32,i32 = uaddo t1059, Constant:i32<1>

Combining: t1061: ch = TokenFactor t1059:1, t1060:1

Combining: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t684, undef:i32

Combining: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32

Combining: t1058: ch = TokenFactor t1056, t1057

Combining: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t677, undef:i32

Combining: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32

Combining: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1

Combining: t1054: i32,i32 = uaddo t1051, Constant:i32<1>

Combining: t1053: ch = TokenFactor t1051:1, t1052:1

Combining: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t677, undef:i32

Combining: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32

Combining: t1050: ch = TokenFactor t1048, t1049

Combining: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t670, undef:i32

Combining: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32

Combining: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1

Combining: t1046: i32,i32 = uaddo t1043, Constant:i32<1>

Combining: t1045: ch = TokenFactor t1043:1, t1044:1

Combining: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t670, undef:i32

Combining: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32

Combining: t1042: ch = TokenFactor t1040, t1041

Combining: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t663, undef:i32

Combining: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32

Combining: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1

Combining: t1038: i32,i32 = uaddo t1035, Constant:i32<1>

Combining: t1037: ch = TokenFactor t1035:1, t1036:1

Combining: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t663, undef:i32

Combining: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32

Combining: t1034: ch = TokenFactor t1032, t1033

Combining: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t656, undef:i32

Combining: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32

Combining: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1

Combining: t1030: i32,i32 = uaddo t1027, Constant:i32<1>

Combining: t1029: ch = TokenFactor t1027:1, t1028:1

Combining: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t656, undef:i32

Combining: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32

Combining: t1026: ch = TokenFactor t1024, t1025

Combining: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t649, undef:i32

Combining: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32

Combining: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1

Combining: t1022: i32,i32 = uaddo t1019, Constant:i32<1>

Combining: t1021: ch = TokenFactor t1019:1, t1020:1

Combining: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t649, undef:i32

Combining: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32

Combining: t1018: ch = TokenFactor t1016, t1017

Combining: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t642, undef:i32

Combining: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32

Combining: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1

Combining: t1014: i32,i32 = uaddo t1011, Constant:i32<1>

Combining: t1013: ch = TokenFactor t1011:1, t1012:1

Combining: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t642, undef:i32

Combining: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32

Combining: t1010: ch = TokenFactor t1008, t1009

Combining: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t635, undef:i32

Combining: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32

Combining: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1

Combining: t1006: i32,i32 = uaddo t1003, Constant:i32<1>

Combining: t1005: ch = TokenFactor t1003:1, t1004:1

Combining: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t635, undef:i32

Combining: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32

Combining: t1002: ch = TokenFactor t1000, t1001

Combining: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t628, undef:i32

Combining: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32

Combining: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1

Combining: t998: i32,i32 = uaddo t995, Constant:i32<1>

Combining: t997: ch = TokenFactor t995:1, t996:1

Combining: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t628, undef:i32

Combining: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32

Combining: t994: ch = TokenFactor t992, t993

Combining: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t621, undef:i32

Combining: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32

Combining: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1

Combining: t990: i32,i32 = uaddo t987, Constant:i32<1>

Combining: t989: ch = TokenFactor t987:1, t988:1

Combining: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t621, undef:i32

Combining: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32

Combining: t986: ch = TokenFactor t984, t985

Combining: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t614, undef:i32

Combining: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32

Combining: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1

Combining: t982: i32,i32 = uaddo t979, Constant:i32<1>

Combining: t981: ch = TokenFactor t979:1, t980:1

Combining: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t614, undef:i32

Combining: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32

Combining: t978: ch = TokenFactor t976, t977

Combining: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t607, undef:i32

Combining: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32

Combining: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1

Combining: t974: i32,i32 = uaddo t971, Constant:i32<1>

Combining: t973: ch = TokenFactor t971:1, t972:1

Combining: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t607, undef:i32

Combining: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32

Combining: t970: ch = TokenFactor t968, t969

Combining: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t600, undef:i32

Combining: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32

Combining: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1

Combining: t966: i32,i32 = uaddo t963, Constant:i32<1>

Combining: t965: ch = TokenFactor t963:1, t964:1

Combining: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t600, undef:i32

Combining: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32

Combining: t962: ch = TokenFactor t960, t961

Combining: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t593, undef:i32

Combining: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32

Combining: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1

Combining: t958: i32,i32 = uaddo t955, Constant:i32<1>

Combining: t957: ch = TokenFactor t955:1, t956:1

Combining: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t593, undef:i32

Combining: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32

Combining: t954: ch = TokenFactor t952, t953

Combining: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t586, undef:i32

Combining: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32

Combining: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1

Combining: t950: i32,i32 = uaddo t947, Constant:i32<1>

Combining: t949: ch = TokenFactor t947:1, t948:1

Combining: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t586, undef:i32

Combining: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32

Combining: t946: ch = TokenFactor t944, t945

Combining: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t579, undef:i32

Combining: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32

Combining: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1

Combining: t942: i32,i32 = uaddo t939, Constant:i32<1>

Combining: t941: ch = TokenFactor t939:1, t940:1

Combining: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t579, undef:i32

Combining: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32

Combining: t938: ch = TokenFactor t936, t937

Combining: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t572, undef:i32

Combining: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32

Combining: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1

Combining: t934: i32,i32 = uaddo t931, Constant:i32<1>

Combining: t933: ch = TokenFactor t931:1, t932:1

Combining: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t572, undef:i32

Combining: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32

Combining: t930: ch = TokenFactor t928, t929

Combining: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t565, undef:i32

Combining: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32

Combining: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1

Combining: t926: i32,i32 = uaddo t923, Constant:i32<1>

Combining: t925: ch = TokenFactor t923:1, t924:1

Combining: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t565, undef:i32

Combining: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32

Combining: t922: ch = TokenFactor t920, t921

Combining: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t558, undef:i32

Combining: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32

Combining: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1

Combining: t918: i32,i32 = uaddo t915, Constant:i32<1>

Combining: t917: ch = TokenFactor t915:1, t916:1

Combining: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t558, undef:i32

Combining: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32

Combining: t914: ch = TokenFactor t912, t913

Combining: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t551, undef:i32

Combining: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32

Combining: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1

Combining: t910: i32,i32 = uaddo t907, Constant:i32<1>

Combining: t909: ch = TokenFactor t907:1, t908:1

Combining: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t551, undef:i32

Combining: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32

Combining: t906: ch = TokenFactor t904, t905

Combining: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t544, undef:i32

Combining: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32

Combining: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1

Combining: t902: i32,i32 = uaddo t899, Constant:i32<1>

Combining: t901: ch = TokenFactor t899:1, t900:1

Combining: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t544, undef:i32

Combining: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32

Combining: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1

Combining: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1

Combining: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1

Combining: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

Combining: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

Combining: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1

Combining: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165

Combining: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t880: i32 = or t878, t712

Combining: t879: i32 = or t877, t711

Combining: t878: i32 = or t876, t745

Combining: t877: i32 = or t875, t744

Combining: t876: i32 = or t874, t856

Combining: t875: i32 = or t873, t855

Combining: t874: i32 = or t872, t858

Combining: t873: i32 = or t871, t857

Combining: t872: i32 = or t870, t861

Combining: t871: i32 = or t869, t860

Combining: t870: i32 = and t867, t864

Combining: t869: i32 = and t866, t863

Combining: t868: ch = TokenFactor t866:1, t867:1

Combining: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t544, undef:i32

Combining: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32

Combining: t865: ch = TokenFactor t863:1, t864:1

Combining: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t551, undef:i32

Combining: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32

Combining: t862: ch = TokenFactor t860:1, t861:1

Combining: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t558, undef:i32

Combining: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32

Combining: t859: ch = TokenFactor t857:1, t858:1

Combining: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t565, undef:i32

Combining: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32

Combining: t856: i32 = and t854, t767

Combining: t855: i32 = and t853, t766

Combining: t854: i32 = and t852, t800

Combining: t853: i32 = and t851, t799

Combining: t852: i32,i32 = addcarry t849, t843, t851:1

Combining: t851: i32,i32 = uaddo t848, t842

Combining: t850: ch = TokenFactor t848:1, t849:1

Combining: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t572, undef:i32

Combining: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32

Combining: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

Combining: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1

Combining: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1

Combining: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1

Combining: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

Combining: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

Combining: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

Combining: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824

Combining: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

Combining: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1

Combining: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1

Combining: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1

Combining: t821: i32 = TargetExternalSymbol'__divdi3'

Combining: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

Combining: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

Combining: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

Combining: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807

Combining: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t809: ch = TokenFactor t807:1, t808:1

Combining: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t579, undef:i32

Combining: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32

Combining: t806: ch = TokenFactor t804:1, t805:1

Combining: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t586, undef:i32

Combining: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32

Combining: t803: ch = TokenFactor t801:1, t802:1

Combining: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t593, undef:i32

Combining: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32

Combining: t800: i32,i32 = addcarry t794, t773, t799:1

Combining: t799: i32,i32 = uaddo t793, t772

Combining: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

Combining: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1

Combining: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1

Combining: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1

Combining: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

Combining: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

Combining: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

Combining: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778

Combining: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t780: ch = TokenFactor t778:1, t779:1

Combining: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t600, undef:i32

Combining: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32

Combining: t777: ch = TokenFactor t775:1, t776:1

Combining: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t607, undef:i32

Combining: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32

Combining: t774: ch = TokenFactor t772:1, t773:1

Combining: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t614, undef:i32

Combining: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32

Combining: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

Combining: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1

Combining: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1

Combining: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1

Combining: t763: i32 = TargetExternalSymbol'__muldi3'

Combining: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

Combining: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

Combining: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

Combining: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749

Combining: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t751: ch = TokenFactor t749:1, t750:1

Combining: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t621, undef:i32

Combining: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32

Combining: t748: ch = TokenFactor t746:1, t747:1

Combining: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t628, undef:i32

Combining: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32

Combining: t745: i32 = xor t742, t740

Combining: t744: i32 = xor t741, t739

Combining: t743: ch = TokenFactor t741:1, t742:1

Combining: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t635, undef:i32

Combining: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32

Combining: t740: i32 = and t738, t725

Combining: t739: i32 = and t737, t724

Combining: t738: i32,i32 = subcarry t736, t727, t737:1

Combining: t737: i32,i32 = usubo t735, t726

Combining: t736: i32,i32 = subcarry t733, t730, t735:1

Combining: t735: i32,i32 = usubo t732, t729

Combining: t734: ch = TokenFactor t732:1, t733:1

Combining: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t642, undef:i32

Combining: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32

Combining: t731: ch = TokenFactor t729:1, t730:1

Combining: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t649, undef:i32

Combining: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32

Combining: t728: ch = TokenFactor t726:1, t727:1

Combining: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t656, undef:i32

Combining: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32

Combining: t725: i32,i32 = addcarry t722, t719, t724:1

Combining: t724: i32,i32 = uaddo t721, t718

Combining: t723: ch = TokenFactor t721:1, t722:1

Combining: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t663, undef:i32

Combining: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32

Combining: t720: ch = TokenFactor t718:1, t719:1

Combining: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t670, undef:i32

Combining: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32

Combining: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

Combining: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1

Combining: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1

Combining: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1

Combining: t708: i32 = TargetExternalSymbol'__moddi3'

Combining: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

Combining: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

Combining: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

Combining: t704: i32 = Register $r1

Combining: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692

Combining: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t694: ch = TokenFactor t692:1, t693:1

Combining: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t677, undef:i32

Combining: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32

Combining: t691: i32 = xor t688, Constant:i32<-1>

Combining: t690: i32 = xor t687, Constant:i32<-1>

Combining: t689: ch = TokenFactor t687:1, t688:1

Combining: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t684, undef:i32

Combining: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32

Combining: t686: ch = TokenFactor t683, t685

Combining: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t684, undef:i32

Combining: t684: i32 = add FrameIndex:i32<23>, Constant:i32<4>
Creating new node: t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>
 ... into: t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>

Combining: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t1067, undef:i32

Combining: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32

Combining: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32

Combining: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t1067, undef:i32

Combining: t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>

Combining: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32

Combining: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1

Combining: t681: i32,i32 = usubo Constant:i32<0>, t158

Combining: t680: i32 = sra t158, Constant:i32<31>

Combining: t679: ch = TokenFactor t676, t678

Combining: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t677, undef:i32

Combining: t677: i32 = add FrameIndex:i32<22>, Constant:i32<4>
Creating new node: t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>
 ... into: t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>

Combining: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t1068, undef:i32

Combining: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32

Combining: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32

Combining: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t1068, undef:i32

Combining: t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>

Combining: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32

Combining: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1

Combining: t674: i32,i32 = usubo Constant:i32<0>, t151

Combining: t673: i32 = sra t151, Constant:i32<31>

Combining: t672: ch = TokenFactor t669, t671

Combining: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t670, undef:i32

Combining: t670: i32 = add FrameIndex:i32<21>, Constant:i32<4>
Creating new node: t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>
 ... into: t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>

Combining: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t1069, undef:i32

Combining: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32

Combining: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32

Combining: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t1069, undef:i32

Combining: t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>

Combining: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32

Combining: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1

Combining: t667: i32,i32 = usubo Constant:i32<0>, t144

Combining: t666: i32 = sra t144, Constant:i32<31>

Combining: t665: ch = TokenFactor t662, t664

Combining: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t663, undef:i32

Combining: t663: i32 = add FrameIndex:i32<20>, Constant:i32<4>
Creating new node: t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>
 ... into: t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>

Combining: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t1070, undef:i32

Combining: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32

Combining: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32

Combining: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t1070, undef:i32

Combining: t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>

Combining: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32

Combining: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1

Combining: t660: i32,i32 = usubo Constant:i32<0>, t137

Combining: t659: i32 = sra t137, Constant:i32<31>

Combining: t658: ch = TokenFactor t655, t657

Combining: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t656, undef:i32

Combining: t656: i32 = add FrameIndex:i32<19>, Constant:i32<4>
Creating new node: t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>
 ... into: t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>

Combining: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t1071, undef:i32

Combining: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32

Combining: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32

Combining: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t1071, undef:i32

Combining: t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>

Combining: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32

Combining: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1

Combining: t653: i32,i32 = usubo Constant:i32<0>, t130

Combining: t652: i32 = sra t130, Constant:i32<31>

Combining: t651: ch = TokenFactor t648, t650

Combining: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t649, undef:i32

Combining: t649: i32 = add FrameIndex:i32<18>, Constant:i32<4>
Creating new node: t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>
 ... into: t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>

Combining: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t1072, undef:i32

Combining: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32

Combining: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32

Combining: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t1072, undef:i32

Combining: t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>

Combining: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32

Combining: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1

Combining: t646: i32,i32 = usubo Constant:i32<0>, t511

Combining: t645: i32 = sra t511, Constant:i32<31>

Combining: t644: ch = TokenFactor t641, t643

Combining: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t642, undef:i32

Combining: t642: i32 = add FrameIndex:i32<17>, Constant:i32<4>
Creating new node: t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>
 ... into: t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>

Combining: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t1073, undef:i32

Combining: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32

Combining: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32

Combining: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t1073, undef:i32

Combining: t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>

Combining: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32

Combining: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1

Combining: t639: i32,i32 = usubo Constant:i32<0>, t116

Combining: t638: i32 = sra t116, Constant:i32<31>

Combining: t637: ch = TokenFactor t634, t636

Combining: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t635, undef:i32

Combining: t635: i32 = add FrameIndex:i32<16>, Constant:i32<4>
Creating new node: t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>
 ... into: t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>

Combining: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t1074, undef:i32

Combining: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32

Combining: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32

Combining: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t1074, undef:i32

Combining: t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>

Combining: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32

Combining: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1

Combining: t632: i32,i32 = usubo Constant:i32<0>, t109

Combining: t631: i32 = sra t109, Constant:i32<31>

Combining: t630: ch = TokenFactor t627, t629

Combining: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t628, undef:i32

Combining: t628: i32 = add FrameIndex:i32<15>, Constant:i32<4>
Creating new node: t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>
 ... into: t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>

Combining: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t1075, undef:i32

Combining: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32

Combining: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32

Combining: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t1075, undef:i32

Combining: t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>

Combining: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32

Combining: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1

Combining: t625: i32,i32 = usubo Constant:i32<0>, t102

Combining: t624: i32 = sra t102, Constant:i32<31>

Combining: t623: ch = TokenFactor t620, t622

Combining: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t621, undef:i32

Combining: t621: i32 = add FrameIndex:i32<14>, Constant:i32<4>
Creating new node: t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>
 ... into: t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>

Combining: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t1076, undef:i32

Combining: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32

Combining: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32

Combining: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t1076, undef:i32

Combining: t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>

Combining: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32

Combining: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1

Combining: t618: i32,i32 = usubo Constant:i32<0>, t95

Combining: t617: i32 = sra t95, Constant:i32<31>

Combining: t616: ch = TokenFactor t613, t615

Combining: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t614, undef:i32

Combining: t614: i32 = add FrameIndex:i32<13>, Constant:i32<4>
Creating new node: t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>
 ... into: t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>

Combining: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t1077, undef:i32

Combining: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32

Combining: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32

Combining: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t1077, undef:i32

Combining: t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>

Combining: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32

Combining: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1

Combining: t611: i32,i32 = usubo Constant:i32<0>, t88

Combining: t610: i32 = sra t88, Constant:i32<31>

Combining: t609: ch = TokenFactor t606, t608

Combining: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t607, undef:i32

Combining: t607: i32 = add FrameIndex:i32<12>, Constant:i32<4>
Creating new node: t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>
 ... into: t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>

Combining: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t1078, undef:i32

Combining: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32

Combining: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32

Combining: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t1078, undef:i32

Combining: t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>

Combining: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32

Combining: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1

Combining: t604: i32,i32 = usubo Constant:i32<0>, t81

Combining: t603: i32 = sra t81, Constant:i32<31>

Combining: t602: ch = TokenFactor t599, t601

Combining: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t600, undef:i32

Combining: t600: i32 = add FrameIndex:i32<11>, Constant:i32<4>
Creating new node: t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>
 ... into: t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>

Combining: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t1079, undef:i32

Combining: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32

Combining: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32

Combining: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t1079, undef:i32

Combining: t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>

Combining: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32

Combining: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1

Combining: t597: i32,i32 = usubo Constant:i32<0>, t74

Combining: t596: i32 = sra t74, Constant:i32<31>

Combining: t595: ch = TokenFactor t592, t594

Combining: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t593, undef:i32

Combining: t593: i32 = add FrameIndex:i32<10>, Constant:i32<4>
Creating new node: t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>
 ... into: t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>

Combining: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t1080, undef:i32

Combining: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32

Combining: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32

Combining: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t1080, undef:i32

Combining: t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>

Combining: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32

Combining: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1

Combining: t590: i32,i32 = usubo Constant:i32<0>, t522

Combining: t589: i32 = sra t522, Constant:i32<31>

Combining: t588: ch = TokenFactor t585, t587

Combining: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t586, undef:i32

Combining: t586: i32 = add FrameIndex:i32<9>, Constant:i32<4>
Creating new node: t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>
 ... into: t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>

Combining: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t1081, undef:i32

Combining: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32

Combining: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32

Combining: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t1081, undef:i32

Combining: t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>

Combining: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32

Combining: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1

Combining: t583: i32,i32 = usubo Constant:i32<0>, t60

Combining: t582: i32 = sra t60, Constant:i32<31>

Combining: t581: ch = TokenFactor t578, t580

Combining: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t579, undef:i32

Combining: t579: i32 = add FrameIndex:i32<8>, Constant:i32<4>
Creating new node: t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>
 ... into: t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>

Combining: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t1082, undef:i32

Combining: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32

Combining: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32

Combining: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t1082, undef:i32

Combining: t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>

Combining: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32

Combining: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1

Combining: t576: i32,i32 = usubo Constant:i32<0>, t53

Combining: t575: i32 = sra t53, Constant:i32<31>

Combining: t574: ch = TokenFactor t571, t573

Combining: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t572, undef:i32

Combining: t572: i32 = add FrameIndex:i32<7>, Constant:i32<4>
Creating new node: t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>
 ... into: t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>

Combining: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t1083, undef:i32

Combining: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32

Combining: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32

Combining: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t1083, undef:i32

Combining: t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>

Combining: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32

Combining: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1

Combining: t569: i32,i32 = usubo Constant:i32<0>, t46

Combining: t568: i32 = sra t46, Constant:i32<31>

Combining: t567: ch = TokenFactor t564, t566

Combining: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t565, undef:i32

Combining: t565: i32 = add FrameIndex:i32<6>, Constant:i32<4>
Creating new node: t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>
 ... into: t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>

Combining: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t1084, undef:i32

Combining: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32

Combining: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32

Combining: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t1084, undef:i32

Combining: t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>

Combining: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32

Combining: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1

Combining: t562: i32,i32 = usubo Constant:i32<0>, t529

Combining: t561: i32 = sra t529, Constant:i32<31>

Combining: t560: ch = TokenFactor t557, t559

Combining: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t558, undef:i32

Combining: t558: i32 = add FrameIndex:i32<5>, Constant:i32<4>
Creating new node: t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>
 ... into: t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>

Combining: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t1085, undef:i32

Combining: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32

Combining: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32

Combining: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t1085, undef:i32

Combining: t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>

Combining: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32

Combining: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1

Combining: t555: i32,i32 = usubo Constant:i32<0>, t32

Combining: t554: i32 = sra t32, Constant:i32<31>

Combining: t553: ch = TokenFactor t550, t552

Combining: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t551, undef:i32

Combining: t551: i32 = add FrameIndex:i32<4>, Constant:i32<4>
Creating new node: t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>
 ... into: t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>

Combining: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t1086, undef:i32

Combining: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32

Combining: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32

Combining: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t1086, undef:i32

Combining: t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>

Combining: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32

Combining: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1

Combining: t548: i32,i32 = usubo Constant:i32<0>, t534

Combining: t547: i32 = sra t534, Constant:i32<31>

Combining: t546: ch = TokenFactor t543, t545

Combining: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t544, undef:i32

Combining: t544: i32 = add FrameIndex:i32<3>, Constant:i32<4>
Creating new node: t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>
 ... into: t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>

Combining: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t1087, undef:i32

Combining: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32

Combining: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32

Combining: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t1087, undef:i32

Combining: t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>

Combining: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32

Combining: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1

Combining: t541: i32,i32 = usubo Constant:i32<0>, t538

Combining: t540: i32 = sra t538, Constant:i32<31>

Combining: t539: i32 = Constant<31>

Combining: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32

Combining: t537: i32 = Constant<-1>

Combining: t534: i32 = shl t23, Constant:i32<1>

Combining: t529: i32 = shl t37, Constant:i32<2>

Combining: t522: i32 = shl t65, Constant:i32<3>

Combining: t511: i32 = shl t121, Constant:i32<4>

Combining: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1

Combining: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498

Combining: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32

Combining: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1

Combining: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1

Combining: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1

Combining: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1

Combining: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1

Combining: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1

Combining: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1

Combining: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1

Combining: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1

Combining: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1

Combining: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1

Combining: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1

Combining: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1

Combining: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1

Combining: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1

Combining: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1

Combining: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1

Combining: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1

Combining: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1

Combining: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1

Combining: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1

Combining: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1

Combining: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1

Combining: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1

Combining: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1

Combining: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1

Combining: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1

Combining: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1

Combining: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1

Combining: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1

Combining: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1

Combining: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1

Combining: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1

Combining: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1

Combining: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1

Combining: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1

Combining: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1

Combining: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1

Combining: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1

Combining: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1

Combining: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1

Combining: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1

Combining: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1

Combining: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1

Combining: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1

Combining: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1

Combining: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1

Combining: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1

Combining: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1

Combining: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1

Combining: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1

Combining: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1

Combining: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1

Combining: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1

Combining: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1

Combining: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1

Combining: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1

Combining: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1

Combining: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1

Combining: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1

Combining: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1

Combining: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1

Combining: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1

Combining: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1

Combining: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1

Combining: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1

Combining: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1

Combining: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1

Combining: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1

Combining: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1

Combining: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1

Combining: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1

Combining: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1

Combining: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1

Combining: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1

Combining: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1

Combining: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1

Combining: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1

Combining: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1

Combining: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1

Combining: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1

Combining: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1

Combining: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1

Combining: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1

Combining: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1

Combining: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1

Combining: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1

Combining: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1

Combining: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1

Combining: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1

Combining: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1

Combining: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1

Combining: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1

Combining: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1

Combining: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1

Combining: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1

Combining: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1

Combining: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1

Combining: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1

Combining: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1

Combining: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1

Combining: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1

Combining: t235: i32 = TargetConstant<-1>

Combining: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1

Combining: t233: Untyped = RegisterMask

Combining: t232: i32 = TargetGlobalAddress<ptr @printf> 0

Combining: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1

Combining: t230: i32 = Register $r3

Combining: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1

Combining: t228: i32 = Register $r2

Combining: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0

Combining: t226: i32 = Register $r0

Combining: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t222: i32 = TargetConstant<0>

Combining: t219: i32 = GlobalAddress<ptr @.str> 0

Combining: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32

Combining: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

Combining: t211: i32 = FrameIndex<24>

Combining: t165: i32 = add nsw t163, t164

Combining: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32

Combining: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32

Combining: t161: i32 = FrameIndex<23>

Combining: t158: i32 = mul nsw t156, Constant:i32<21>

Combining: t157: i32 = Constant<21>

Combining: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32

Combining: t154: i32 = FrameIndex<22>

Combining: t151: i32 = mul nsw t149, Constant:i32<20>

Combining: t150: i32 = Constant<20>

Combining: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32

Combining: t147: i32 = FrameIndex<21>

Combining: t144: i32 = mul nsw t142, Constant:i32<19>

Combining: t143: i32 = Constant<19>

Combining: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32

Combining: t140: i32 = FrameIndex<20>

Combining: t137: i32 = mul nsw t135, Constant:i32<18>

Combining: t136: i32 = Constant<18>

Combining: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32

Combining: t133: i32 = FrameIndex<19>

Combining: t130: i32 = mul nsw t128, Constant:i32<17>

Combining: t129: i32 = Constant<17>

Combining: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32

Combining: t126: i32 = FrameIndex<18>

Combining: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32

Combining: t119: i32 = FrameIndex<17>

Combining: t116: i32 = mul nsw t114, Constant:i32<15>

Combining: t115: i32 = Constant<15>

Combining: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32

Combining: t112: i32 = FrameIndex<16>

Combining: t109: i32 = mul nsw t107, Constant:i32<14>

Combining: t108: i32 = Constant<14>

Combining: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32

Combining: t105: i32 = FrameIndex<15>

Combining: t102: i32 = mul nsw t100, Constant:i32<13>

Combining: t101: i32 = Constant<13>

Combining: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32

Combining: t98: i32 = FrameIndex<14>

Combining: t95: i32 = mul nsw t93, Constant:i32<12>

Combining: t94: i32 = Constant<12>

Combining: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32

Combining: t91: i32 = FrameIndex<13>

Combining: t88: i32 = mul nsw t86, Constant:i32<11>

Combining: t87: i32 = Constant<11>

Combining: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32

Combining: t84: i32 = FrameIndex<12>

Combining: t81: i32 = mul nsw t79, Constant:i32<10>

Combining: t80: i32 = Constant<10>

Combining: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32

Combining: t77: i32 = FrameIndex<11>

Combining: t74: i32 = mul nsw t72, Constant:i32<9>

Combining: t73: i32 = Constant<9>

Combining: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32

Combining: t70: i32 = FrameIndex<10>

Combining: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32

Combining: t63: i32 = FrameIndex<9>

Combining: t60: i32 = mul nsw t58, Constant:i32<7>

Combining: t59: i32 = Constant<7>

Combining: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32

Combining: t56: i32 = FrameIndex<8>

Combining: t53: i32 = mul nsw t51, Constant:i32<6>

Combining: t52: i32 = Constant<6>

Combining: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32

Combining: t49: i32 = FrameIndex<7>

Combining: t46: i32 = mul nsw t44, Constant:i32<5>

Combining: t45: i32 = Constant<5>

Combining: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32

Combining: t42: i32 = FrameIndex<6>

Combining: t38: i32 = Constant<4>

Combining: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32

Combining: t35: i32 = FrameIndex<5>

Combining: t32: i32 = mul nsw t30, Constant:i32<3>

Combining: t31: i32 = Constant<3>

Combining: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32

Combining: t28: i32 = FrameIndex<4>

Combining: t24: i32 = Constant<2>

Combining: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32

Combining: t21: i32 = FrameIndex<3>

Combining: t16: i32 = Constant<1>

Combining: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32

Combining: t13: i32 = FrameIndex<2>

Combining: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32

Combining: t11: i32 = FrameIndex<1>

Combining: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32

Combining: t9: i32 = undef

Combining: t8: i32 = Constant<0>

Combining: t7: i32 = FrameIndex<0>

Combining: t6: i32,ch = CopyFromReg t0, Register:i32 %2

Combining: t5: i32 = Register %2

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %1

Combining: t3: i32 = Register %1

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %0

Combining: t1: i32 = Register %0

Combining: t0: ch,glue = EntryToken
Optimized type-legalized selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 729 nodes:
  t0: ch,glue = EntryToken
      t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32
          t540: i32 = sra t538, Constant:i32<31>
        t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
      t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t1087, undef:i32
    t546: ch = TokenFactor t543, t545
  t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
      t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32
          t547: i32 = sra t534, Constant:i32<31>
        t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
      t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t1086, undef:i32
    t553: ch = TokenFactor t550, t552
  t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
  t32: i32 = mul nsw t30, Constant:i32<3>
      t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32
          t554: i32 = sra t32, Constant:i32<31>
        t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
      t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t1085, undef:i32
    t560: ch = TokenFactor t557, t559
  t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
      t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32
          t561: i32 = sra t529, Constant:i32<31>
        t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
      t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t1084, undef:i32
    t567: ch = TokenFactor t564, t566
  t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
  t46: i32 = mul nsw t44, Constant:i32<5>
      t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32
          t568: i32 = sra t46, Constant:i32<31>
        t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
      t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t1083, undef:i32
    t574: ch = TokenFactor t571, t573
  t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
  t53: i32 = mul nsw t51, Constant:i32<6>
      t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32
          t575: i32 = sra t53, Constant:i32<31>
        t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
      t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t1082, undef:i32
    t581: ch = TokenFactor t578, t580
  t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
  t60: i32 = mul nsw t58, Constant:i32<7>
      t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32
          t582: i32 = sra t60, Constant:i32<31>
        t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
      t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t1081, undef:i32
    t588: ch = TokenFactor t585, t587
  t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
      t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32
          t589: i32 = sra t522, Constant:i32<31>
        t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
      t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t1080, undef:i32
    t595: ch = TokenFactor t592, t594
  t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
  t74: i32 = mul nsw t72, Constant:i32<9>
      t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32
          t596: i32 = sra t74, Constant:i32<31>
        t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
      t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t1079, undef:i32
    t602: ch = TokenFactor t599, t601
  t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
  t81: i32 = mul nsw t79, Constant:i32<10>
      t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32
          t603: i32 = sra t81, Constant:i32<31>
        t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
      t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t1078, undef:i32
    t609: ch = TokenFactor t606, t608
  t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
  t88: i32 = mul nsw t86, Constant:i32<11>
      t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32
          t610: i32 = sra t88, Constant:i32<31>
        t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
      t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t1077, undef:i32
    t616: ch = TokenFactor t613, t615
  t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
  t95: i32 = mul nsw t93, Constant:i32<12>
      t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32
          t617: i32 = sra t95, Constant:i32<31>
        t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
      t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t1076, undef:i32
    t623: ch = TokenFactor t620, t622
  t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
  t102: i32 = mul nsw t100, Constant:i32<13>
      t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32
          t624: i32 = sra t102, Constant:i32<31>
        t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
      t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t1075, undef:i32
    t630: ch = TokenFactor t627, t629
  t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
  t109: i32 = mul nsw t107, Constant:i32<14>
      t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32
          t631: i32 = sra t109, Constant:i32<31>
        t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
      t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t1074, undef:i32
    t637: ch = TokenFactor t634, t636
  t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
  t116: i32 = mul nsw t114, Constant:i32<15>
      t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32
          t638: i32 = sra t116, Constant:i32<31>
        t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
      t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t1073, undef:i32
    t644: ch = TokenFactor t641, t643
  t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
      t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32
          t645: i32 = sra t511, Constant:i32<31>
        t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
      t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t1072, undef:i32
    t651: ch = TokenFactor t648, t650
  t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
  t130: i32 = mul nsw t128, Constant:i32<17>
      t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32
          t652: i32 = sra t130, Constant:i32<31>
        t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
      t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t1071, undef:i32
    t658: ch = TokenFactor t655, t657
  t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
  t137: i32 = mul nsw t135, Constant:i32<18>
      t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32
          t659: i32 = sra t137, Constant:i32<31>
        t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
      t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t1070, undef:i32
    t665: ch = TokenFactor t662, t664
  t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
  t144: i32 = mul nsw t142, Constant:i32<19>
      t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32
          t666: i32 = sra t144, Constant:i32<31>
        t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
      t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t1069, undef:i32
    t672: ch = TokenFactor t669, t671
  t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
  t151: i32 = mul nsw t149, Constant:i32<20>
      t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32
          t673: i32 = sra t151, Constant:i32<31>
        t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
      t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t1068, undef:i32
    t679: ch = TokenFactor t676, t678
  t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
  t158: i32 = mul nsw t156, Constant:i32<21>
  t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
  t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
      t868: ch = TokenFactor t866:1, t867:1
      t865: ch = TokenFactor t863:1, t864:1
      t862: ch = TokenFactor t860:1, t861:1
      t859: ch = TokenFactor t857:1, t858:1
      t850: ch = TokenFactor t848:1, t849:1
      t809: ch = TokenFactor t807:1, t808:1
      t806: ch = TokenFactor t804:1, t805:1
      t803: ch = TokenFactor t801:1, t802:1
      t780: ch = TokenFactor t778:1, t779:1
      t777: ch = TokenFactor t775:1, t776:1
      t774: ch = TokenFactor t772:1, t773:1
      t751: ch = TokenFactor t749:1, t750:1
      t748: ch = TokenFactor t746:1, t747:1
      t743: ch = TokenFactor t741:1, t742:1
      t734: ch = TokenFactor t732:1, t733:1
      t731: ch = TokenFactor t729:1, t730:1
      t728: ch = TokenFactor t726:1, t727:1
      t723: ch = TokenFactor t721:1, t722:1
      t720: ch = TokenFactor t718:1, t719:1
      t694: ch = TokenFactor t692:1, t693:1
      t689: ch = TokenFactor t687:1, t688:1
    t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
    t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
  t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
        t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32
        t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t1087, undef:i32
      t906: ch = TokenFactor t904, t905
    t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
  t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1
  t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
  t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
  t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
        t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32
        t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t1086, undef:i32
      t914: ch = TokenFactor t912, t913
    t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
  t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1
  t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
  t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
  t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
        t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32
        t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t1085, undef:i32
      t922: ch = TokenFactor t920, t921
    t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
  t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1
  t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
  t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
  t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
        t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32
        t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t1084, undef:i32
      t930: ch = TokenFactor t928, t929
    t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
  t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1
  t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
  t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
  t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
        t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32
        t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t1083, undef:i32
      t938: ch = TokenFactor t936, t937
    t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
  t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1
  t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
  t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
  t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
        t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32
        t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t1082, undef:i32
      t946: ch = TokenFactor t944, t945
    t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
  t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1
  t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
  t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
  t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
        t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32
        t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t1081, undef:i32
      t954: ch = TokenFactor t952, t953
    t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
  t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1
  t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
  t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
  t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
        t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32
        t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t1080, undef:i32
      t962: ch = TokenFactor t960, t961
    t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
  t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1
  t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
  t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
  t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
        t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32
        t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t1079, undef:i32
      t970: ch = TokenFactor t968, t969
    t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
  t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1
  t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
  t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
  t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
        t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32
        t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t1078, undef:i32
      t978: ch = TokenFactor t976, t977
    t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
  t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1
  t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
  t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
  t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
        t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32
        t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t1077, undef:i32
      t986: ch = TokenFactor t984, t985
    t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
  t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1
  t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
  t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
  t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
        t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32
        t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t1076, undef:i32
      t994: ch = TokenFactor t992, t993
    t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
  t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1
  t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
  t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
  t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
        t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32
        t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t1075, undef:i32
      t1002: ch = TokenFactor t1000, t1001
    t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
  t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1
  t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
  t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
  t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
        t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32
        t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t1074, undef:i32
      t1010: ch = TokenFactor t1008, t1009
    t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
  t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1
  t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
  t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
  t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
        t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32
        t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t1073, undef:i32
      t1018: ch = TokenFactor t1016, t1017
    t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
  t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1
  t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
  t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
  t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
        t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32
        t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t1072, undef:i32
      t1026: ch = TokenFactor t1024, t1025
    t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
  t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1
  t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
  t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
  t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
        t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32
        t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t1071, undef:i32
      t1034: ch = TokenFactor t1032, t1033
    t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
  t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1
  t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
  t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
  t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
        t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32
        t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t1070, undef:i32
      t1042: ch = TokenFactor t1040, t1041
    t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
  t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1
  t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
  t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
  t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
        t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32
        t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t1069, undef:i32
      t1050: ch = TokenFactor t1048, t1049
    t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
  t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1
  t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
  t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
  t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
        t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32
        t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t1068, undef:i32
      t1058: ch = TokenFactor t1056, t1057
    t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
  t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1
  t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
  t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
  t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
        t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32
        t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t1067, undef:i32
      t1066: ch = TokenFactor t1064, t1065
    t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
  t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1
  t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
  t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
  t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
    t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
  t511: i32 = shl t121, Constant:i32<4>
  t522: i32 = shl t65, Constant:i32<3>
  t529: i32 = shl t37, Constant:i32<2>
  t534: i32 = shl t23, Constant:i32<1>
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
  t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
  t541: i32,i32 = usubo Constant:i32<0>, t538
  t548: i32,i32 = usubo Constant:i32<0>, t534
  t555: i32,i32 = usubo Constant:i32<0>, t32
  t562: i32,i32 = usubo Constant:i32<0>, t529
  t569: i32,i32 = usubo Constant:i32<0>, t46
  t576: i32,i32 = usubo Constant:i32<0>, t53
  t583: i32,i32 = usubo Constant:i32<0>, t60
  t590: i32,i32 = usubo Constant:i32<0>, t522
  t597: i32,i32 = usubo Constant:i32<0>, t74
  t604: i32,i32 = usubo Constant:i32<0>, t81
  t611: i32,i32 = usubo Constant:i32<0>, t88
  t618: i32,i32 = usubo Constant:i32<0>, t95
  t625: i32,i32 = usubo Constant:i32<0>, t102
  t632: i32,i32 = usubo Constant:i32<0>, t109
  t639: i32,i32 = usubo Constant:i32<0>, t116
  t646: i32,i32 = usubo Constant:i32<0>, t511
  t653: i32,i32 = usubo Constant:i32<0>, t130
  t660: i32,i32 = usubo Constant:i32<0>, t137
  t667: i32,i32 = usubo Constant:i32<0>, t144
  t674: i32,i32 = usubo Constant:i32<0>, t151
  t681: i32,i32 = usubo Constant:i32<0>, t158
    t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32
        t680: i32 = sra t158, Constant:i32<31>
      t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
    t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t1067, undef:i32
  t686: ch = TokenFactor t683, t685
  t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
  t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32
  t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
  t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32
    t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
  t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
    t690: i32 = xor t687, Constant:i32<-1>
  t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
    t691: i32 = xor t688, Constant:i32<-1>
  t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
  t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
  t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
  t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
  t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
  t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32
  t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
  t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32
  t724: i32,i32 = uaddo t721, t718
  t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
  t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32
  t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
  t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32
  t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
  t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32
  t735: i32,i32 = usubo t732, t729
  t737: i32,i32 = usubo t735, t726
  t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
  t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32
  t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
  t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32
  t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
  t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32
    t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
  t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
  t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
  t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
  t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
  t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
  t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
  t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
  t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32
  t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
  t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32
  t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
  t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32
    t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
  t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
  t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
  t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
  t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
  t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
  t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
  t799: i32,i32 = uaddo t793, t772
  t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
  t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32
  t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
  t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32
  t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
  t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32
    t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
  t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
  t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
  t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
  t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
  t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
  t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
    t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
    t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
  t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
  t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
  t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
  t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
  t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
  t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
  t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
  t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32
  t851: i32,i32 = uaddo t848, t842
  t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
  t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32
  t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
  t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32
  t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
  t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32
  t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
  t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32
    t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
    t165: i32 = add nsw t163, t164
  t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
  t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
              t869: i32 = and t866, t863
            t871: i32 = or t869, t860
          t873: i32 = or t871, t857
            t853: i32 = and t851, t799
          t855: i32 = and t853, t766
        t875: i32 = or t873, t855
          t739: i32 = and t737, t724
        t744: i32 = xor t741, t739
      t877: i32 = or t875, t744
    t879: i32 = or t877, t711
  t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
              t870: i32 = and t867, t864
            t872: i32 = or t870, t861
          t874: i32 = or t872, t858
                t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
              t852: i32,i32 = addcarry t849, t843, t851:1
                t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
              t800: i32,i32 = addcarry t794, t773, t799:1
            t854: i32 = and t852, t800
            t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
          t856: i32 = and t854, t767
        t876: i32 = or t874, t856
              t736: i32,i32 = subcarry t733, t730, t735:1
            t738: i32,i32 = subcarry t736, t727, t737:1
            t725: i32,i32 = addcarry t722, t719, t724:1
          t740: i32 = and t738, t725
        t745: i32 = xor t742, t740
      t878: i32 = or t876, t745
      t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
    t880: i32 = or t878, t712
  t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
  t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
  t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
  t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
  t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32
  t901: ch = TokenFactor t899:1, t900:1
  t902: i32,i32 = uaddo t899, Constant:i32<1>
  t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
  t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
  t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32
  t909: ch = TokenFactor t907:1, t908:1
  t910: i32,i32 = uaddo t907, Constant:i32<1>
  t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
  t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
  t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32
  t917: ch = TokenFactor t915:1, t916:1
  t918: i32,i32 = uaddo t915, Constant:i32<1>
  t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
  t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
  t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32
  t925: ch = TokenFactor t923:1, t924:1
  t926: i32,i32 = uaddo t923, Constant:i32<1>
  t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
  t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
  t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32
  t933: ch = TokenFactor t931:1, t932:1
  t934: i32,i32 = uaddo t931, Constant:i32<1>
  t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
  t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
  t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32
  t941: ch = TokenFactor t939:1, t940:1
  t942: i32,i32 = uaddo t939, Constant:i32<1>
  t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
  t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
  t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32
  t949: ch = TokenFactor t947:1, t948:1
  t950: i32,i32 = uaddo t947, Constant:i32<1>
  t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
  t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
  t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32
  t957: ch = TokenFactor t955:1, t956:1
  t958: i32,i32 = uaddo t955, Constant:i32<1>
  t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
  t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
  t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32
  t965: ch = TokenFactor t963:1, t964:1
  t966: i32,i32 = uaddo t963, Constant:i32<1>
  t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
  t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
  t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32
  t973: ch = TokenFactor t971:1, t972:1
  t974: i32,i32 = uaddo t971, Constant:i32<1>
  t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
  t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
  t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32
  t981: ch = TokenFactor t979:1, t980:1
  t982: i32,i32 = uaddo t979, Constant:i32<1>
  t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
  t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
  t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32
  t989: ch = TokenFactor t987:1, t988:1
  t990: i32,i32 = uaddo t987, Constant:i32<1>
  t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
  t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
  t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32
  t997: ch = TokenFactor t995:1, t996:1
  t998: i32,i32 = uaddo t995, Constant:i32<1>
  t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
  t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
  t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32
  t1005: ch = TokenFactor t1003:1, t1004:1
  t1006: i32,i32 = uaddo t1003, Constant:i32<1>
  t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
  t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
  t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32
  t1013: ch = TokenFactor t1011:1, t1012:1
  t1014: i32,i32 = uaddo t1011, Constant:i32<1>
  t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
  t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
  t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32
  t1021: ch = TokenFactor t1019:1, t1020:1
  t1022: i32,i32 = uaddo t1019, Constant:i32<1>
  t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
  t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
  t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32
  t1029: ch = TokenFactor t1027:1, t1028:1
  t1030: i32,i32 = uaddo t1027, Constant:i32<1>
  t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
  t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
  t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32
  t1037: ch = TokenFactor t1035:1, t1036:1
  t1038: i32,i32 = uaddo t1035, Constant:i32<1>
  t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
  t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
  t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32
  t1045: ch = TokenFactor t1043:1, t1044:1
  t1046: i32,i32 = uaddo t1043, Constant:i32<1>
  t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
  t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
  t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32
  t1053: ch = TokenFactor t1051:1, t1052:1
  t1054: i32,i32 = uaddo t1051, Constant:i32<1>
  t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
  t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
  t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32
  t1061: ch = TokenFactor t1059:1, t1060:1
  t1062: i32,i32 = uaddo t1059, Constant:i32<1>
  t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
  t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>
  t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>
  t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>
  t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>
  t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>
  t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>
  t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>
  t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>
  t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>
  t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>
  t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>
  t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>
  t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>
  t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>
  t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>
  t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>
  t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>
  t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>
  t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>
  t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>
  t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>
  t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1



Legalizing: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1
Legal node: nothing to do

Legalizing: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
Legal node: nothing to do

Legalizing: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
Legalizing non-extending load operation

Legalizing: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
Legal node: nothing to do

Legalizing: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1

Legalizing: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
Legal node: nothing to do

Legalizing: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1063, t493:1
Legal node: nothing to do

Legalizing: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1062, t492:1
Legal node: nothing to do

Legalizing: t492: ch,glue = CopyToReg t490, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1066: ch = TokenFactor t1064, t1065
Legal node: nothing to do

Legalizing: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1063, t1067, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1062, FrameIndex:i32<23>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
Trying custom legalization
Lowering node: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
Creating new node: t1088: i32,i32 = ARMISD::SUBC t1062:1, Constant:i32<1>
Creating new node: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1088:1
Creating new node: t1090: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1089:1
Creating new node: t1091: i32,i32 = merge_values t1089, t1090
Successfully custom legalized node
 ... replacing: t1063: i32,i32 = addcarry t1060, Constant:i32<0>, t1062:1
     with:      t1091: i32,i32 = merge_values t1089, t1090
      and:      t1091: i32,i32 = merge_values t1089, t1090

Legalizing: t1061: ch = TokenFactor t1059:1, t1060:1
Legal node: nothing to do

Legalizing: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Trying custom legalization
Lowering node: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
Creating new node: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
Creating new node: t1093: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1092:1
Creating new node: t1094: i32,i32 = merge_values t1092, t1093
Successfully custom legalized node
 ... replacing: t1062: i32,i32 = uaddo t1059, Constant:i32<1>
     with:      t1094: i32,i32 = merge_values t1092, t1093
      and:      t1094: i32,i32 = merge_values t1092, t1093

Legalizing: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
Legalizing non-extending load operation

Legalizing: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32
Legalizing non-extending load operation

Legalizing: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
Legal node: nothing to do

Legalizing: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1

Legalizing: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
Legal node: nothing to do

Legalizing: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1055, t480:1
Legal node: nothing to do

Legalizing: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1054, t479:1
Legal node: nothing to do

Legalizing: t479: ch,glue = CopyToReg t477, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1058: ch = TokenFactor t1056, t1057
Legal node: nothing to do

Legalizing: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1055, t1068, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1054, FrameIndex:i32<22>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
Trying custom legalization
Lowering node: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
Creating new node: t1095: i32,i32 = ARMISD::SUBC t1054:1, Constant:i32<1>
Creating new node: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1095:1
Creating new node: t1097: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1096:1
Creating new node: t1098: i32,i32 = merge_values t1096, t1097
Successfully custom legalized node
 ... replacing: t1055: i32,i32 = addcarry t1052, Constant:i32<0>, t1054:1
     with:      t1098: i32,i32 = merge_values t1096, t1097
      and:      t1098: i32,i32 = merge_values t1096, t1097

Legalizing: t1053: ch = TokenFactor t1051:1, t1052:1
Legal node: nothing to do

Legalizing: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Trying custom legalization
Lowering node: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
Creating new node: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
Creating new node: t1100: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1099:1
Creating new node: t1101: i32,i32 = merge_values t1099, t1100
Successfully custom legalized node
 ... replacing: t1054: i32,i32 = uaddo t1051, Constant:i32<1>
     with:      t1101: i32,i32 = merge_values t1099, t1100
      and:      t1101: i32,i32 = merge_values t1099, t1100

Legalizing: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
Legalizing non-extending load operation

Legalizing: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32
Legalizing non-extending load operation

Legalizing: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
Legal node: nothing to do

Legalizing: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1

Legalizing: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
Legal node: nothing to do

Legalizing: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1047, t467:1
Legal node: nothing to do

Legalizing: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1046, t466:1
Legal node: nothing to do

Legalizing: t466: ch,glue = CopyToReg t464, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1050: ch = TokenFactor t1048, t1049
Legal node: nothing to do

Legalizing: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1047, t1069, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1046, FrameIndex:i32<21>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
Trying custom legalization
Lowering node: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
Creating new node: t1102: i32,i32 = ARMISD::SUBC t1046:1, Constant:i32<1>
Creating new node: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1102:1
Creating new node: t1104: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1103:1
Creating new node: t1105: i32,i32 = merge_values t1103, t1104
Successfully custom legalized node
 ... replacing: t1047: i32,i32 = addcarry t1044, Constant:i32<0>, t1046:1
     with:      t1105: i32,i32 = merge_values t1103, t1104
      and:      t1105: i32,i32 = merge_values t1103, t1104

Legalizing: t1045: ch = TokenFactor t1043:1, t1044:1
Legal node: nothing to do

Legalizing: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Trying custom legalization
Lowering node: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
Creating new node: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
Creating new node: t1107: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1106:1
Creating new node: t1108: i32,i32 = merge_values t1106, t1107
Successfully custom legalized node
 ... replacing: t1046: i32,i32 = uaddo t1043, Constant:i32<1>
     with:      t1108: i32,i32 = merge_values t1106, t1107
      and:      t1108: i32,i32 = merge_values t1106, t1107

Legalizing: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
Legalizing non-extending load operation

Legalizing: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32
Legalizing non-extending load operation

Legalizing: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
Legal node: nothing to do

Legalizing: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1

Legalizing: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
Legal node: nothing to do

Legalizing: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1039, t454:1
Legal node: nothing to do

Legalizing: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1038, t453:1
Legal node: nothing to do

Legalizing: t453: ch,glue = CopyToReg t451, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1042: ch = TokenFactor t1040, t1041
Legal node: nothing to do

Legalizing: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1039, t1070, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1038, FrameIndex:i32<20>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
Trying custom legalization
Lowering node: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
Creating new node: t1109: i32,i32 = ARMISD::SUBC t1038:1, Constant:i32<1>
Creating new node: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1109:1
Creating new node: t1111: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1110:1
Creating new node: t1112: i32,i32 = merge_values t1110, t1111
Successfully custom legalized node
 ... replacing: t1039: i32,i32 = addcarry t1036, Constant:i32<0>, t1038:1
     with:      t1112: i32,i32 = merge_values t1110, t1111
      and:      t1112: i32,i32 = merge_values t1110, t1111

Legalizing: t1037: ch = TokenFactor t1035:1, t1036:1
Legal node: nothing to do

Legalizing: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Trying custom legalization
Lowering node: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
Creating new node: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
Creating new node: t1114: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1113:1
Creating new node: t1115: i32,i32 = merge_values t1113, t1114
Successfully custom legalized node
 ... replacing: t1038: i32,i32 = uaddo t1035, Constant:i32<1>
     with:      t1115: i32,i32 = merge_values t1113, t1114
      and:      t1115: i32,i32 = merge_values t1113, t1114

Legalizing: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
Legalizing non-extending load operation

Legalizing: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32
Legalizing non-extending load operation

Legalizing: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
Legal node: nothing to do

Legalizing: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1

Legalizing: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
Legal node: nothing to do

Legalizing: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1031, t441:1
Legal node: nothing to do

Legalizing: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1030, t440:1
Legal node: nothing to do

Legalizing: t440: ch,glue = CopyToReg t438, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1034: ch = TokenFactor t1032, t1033
Legal node: nothing to do

Legalizing: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1031, t1071, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1030, FrameIndex:i32<19>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
Trying custom legalization
Lowering node: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
Creating new node: t1116: i32,i32 = ARMISD::SUBC t1030:1, Constant:i32<1>
Creating new node: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1116:1
Creating new node: t1118: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1117:1
Creating new node: t1119: i32,i32 = merge_values t1117, t1118
Successfully custom legalized node
 ... replacing: t1031: i32,i32 = addcarry t1028, Constant:i32<0>, t1030:1
     with:      t1119: i32,i32 = merge_values t1117, t1118
      and:      t1119: i32,i32 = merge_values t1117, t1118

Legalizing: t1029: ch = TokenFactor t1027:1, t1028:1
Legal node: nothing to do

Legalizing: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Trying custom legalization
Lowering node: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
Creating new node: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
Creating new node: t1121: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1120:1
Creating new node: t1122: i32,i32 = merge_values t1120, t1121
Successfully custom legalized node
 ... replacing: t1030: i32,i32 = uaddo t1027, Constant:i32<1>
     with:      t1122: i32,i32 = merge_values t1120, t1121
      and:      t1122: i32,i32 = merge_values t1120, t1121

Legalizing: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
Legalizing non-extending load operation

Legalizing: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32
Legalizing non-extending load operation

Legalizing: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
Legal node: nothing to do

Legalizing: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1

Legalizing: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
Legal node: nothing to do

Legalizing: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1023, t428:1
Legal node: nothing to do

Legalizing: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1022, t427:1
Legal node: nothing to do

Legalizing: t427: ch,glue = CopyToReg t425, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1026: ch = TokenFactor t1024, t1025
Legal node: nothing to do

Legalizing: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1023, t1072, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1022, FrameIndex:i32<18>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
Trying custom legalization
Lowering node: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
Creating new node: t1123: i32,i32 = ARMISD::SUBC t1022:1, Constant:i32<1>
Creating new node: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1123:1
Creating new node: t1125: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1124:1
Creating new node: t1126: i32,i32 = merge_values t1124, t1125
Successfully custom legalized node
 ... replacing: t1023: i32,i32 = addcarry t1020, Constant:i32<0>, t1022:1
     with:      t1126: i32,i32 = merge_values t1124, t1125
      and:      t1126: i32,i32 = merge_values t1124, t1125

Legalizing: t1021: ch = TokenFactor t1019:1, t1020:1
Legal node: nothing to do

Legalizing: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Trying custom legalization
Lowering node: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
Creating new node: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
Creating new node: t1128: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1127:1
Creating new node: t1129: i32,i32 = merge_values t1127, t1128
Successfully custom legalized node
 ... replacing: t1022: i32,i32 = uaddo t1019, Constant:i32<1>
     with:      t1129: i32,i32 = merge_values t1127, t1128
      and:      t1129: i32,i32 = merge_values t1127, t1128

Legalizing: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
Legalizing non-extending load operation

Legalizing: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32
Legalizing non-extending load operation

Legalizing: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
Legal node: nothing to do

Legalizing: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1

Legalizing: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
Legal node: nothing to do

Legalizing: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1015, t415:1
Legal node: nothing to do

Legalizing: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1014, t414:1
Legal node: nothing to do

Legalizing: t414: ch,glue = CopyToReg t412, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1018: ch = TokenFactor t1016, t1017
Legal node: nothing to do

Legalizing: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1015, t1073, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1014, FrameIndex:i32<17>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
Trying custom legalization
Lowering node: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
Creating new node: t1130: i32,i32 = ARMISD::SUBC t1014:1, Constant:i32<1>
Creating new node: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1130:1
Creating new node: t1132: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1131:1
Creating new node: t1133: i32,i32 = merge_values t1131, t1132
Successfully custom legalized node
 ... replacing: t1015: i32,i32 = addcarry t1012, Constant:i32<0>, t1014:1
     with:      t1133: i32,i32 = merge_values t1131, t1132
      and:      t1133: i32,i32 = merge_values t1131, t1132

Legalizing: t1013: ch = TokenFactor t1011:1, t1012:1
Legal node: nothing to do

Legalizing: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Trying custom legalization
Lowering node: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
Creating new node: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
Creating new node: t1135: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1134:1
Creating new node: t1136: i32,i32 = merge_values t1134, t1135
Successfully custom legalized node
 ... replacing: t1014: i32,i32 = uaddo t1011, Constant:i32<1>
     with:      t1136: i32,i32 = merge_values t1134, t1135
      and:      t1136: i32,i32 = merge_values t1134, t1135

Legalizing: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
Legalizing non-extending load operation

Legalizing: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32
Legalizing non-extending load operation

Legalizing: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
Legal node: nothing to do

Legalizing: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1

Legalizing: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
Legal node: nothing to do

Legalizing: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1007, t402:1
Legal node: nothing to do

Legalizing: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1006, t401:1
Legal node: nothing to do

Legalizing: t401: ch,glue = CopyToReg t399, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1010: ch = TokenFactor t1008, t1009
Legal node: nothing to do

Legalizing: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1007, t1074, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1006, FrameIndex:i32<16>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
Trying custom legalization
Lowering node: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
Creating new node: t1137: i32,i32 = ARMISD::SUBC t1006:1, Constant:i32<1>
Creating new node: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1137:1
Creating new node: t1139: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1138:1
Creating new node: t1140: i32,i32 = merge_values t1138, t1139
Successfully custom legalized node
 ... replacing: t1007: i32,i32 = addcarry t1004, Constant:i32<0>, t1006:1
     with:      t1140: i32,i32 = merge_values t1138, t1139
      and:      t1140: i32,i32 = merge_values t1138, t1139

Legalizing: t1005: ch = TokenFactor t1003:1, t1004:1
Legal node: nothing to do

Legalizing: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Trying custom legalization
Lowering node: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
Creating new node: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
Creating new node: t1142: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1141:1
Creating new node: t1143: i32,i32 = merge_values t1141, t1142
Successfully custom legalized node
 ... replacing: t1006: i32,i32 = uaddo t1003, Constant:i32<1>
     with:      t1143: i32,i32 = merge_values t1141, t1142
      and:      t1143: i32,i32 = merge_values t1141, t1142

Legalizing: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
Legalizing non-extending load operation

Legalizing: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32
Legalizing non-extending load operation

Legalizing: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
Legal node: nothing to do

Legalizing: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1

Legalizing: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
Legal node: nothing to do

Legalizing: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t999, t389:1
Legal node: nothing to do

Legalizing: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t998, t388:1
Legal node: nothing to do

Legalizing: t388: ch,glue = CopyToReg t386, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1002: ch = TokenFactor t1000, t1001
Legal node: nothing to do

Legalizing: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t999, t1075, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t998, FrameIndex:i32<15>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
Trying custom legalization
Lowering node: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
Creating new node: t1144: i32,i32 = ARMISD::SUBC t998:1, Constant:i32<1>
Creating new node: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1144:1
Creating new node: t1146: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1145:1
Creating new node: t1147: i32,i32 = merge_values t1145, t1146
Successfully custom legalized node
 ... replacing: t999: i32,i32 = addcarry t996, Constant:i32<0>, t998:1
     with:      t1147: i32,i32 = merge_values t1145, t1146
      and:      t1147: i32,i32 = merge_values t1145, t1146

Legalizing: t997: ch = TokenFactor t995:1, t996:1
Legal node: nothing to do

Legalizing: t998: i32,i32 = uaddo t995, Constant:i32<1>
Trying custom legalization
Lowering node: t998: i32,i32 = uaddo t995, Constant:i32<1>
Creating new node: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
Creating new node: t1149: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1148:1
Creating new node: t1150: i32,i32 = merge_values t1148, t1149
Successfully custom legalized node
 ... replacing: t998: i32,i32 = uaddo t995, Constant:i32<1>
     with:      t1150: i32,i32 = merge_values t1148, t1149
      and:      t1150: i32,i32 = merge_values t1148, t1149

Legalizing: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
Legalizing non-extending load operation

Legalizing: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32
Legalizing non-extending load operation

Legalizing: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
Legal node: nothing to do

Legalizing: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1

Legalizing: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
Legal node: nothing to do

Legalizing: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t991, t376:1
Legal node: nothing to do

Legalizing: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t990, t375:1
Legal node: nothing to do

Legalizing: t375: ch,glue = CopyToReg t373, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t994: ch = TokenFactor t992, t993
Legal node: nothing to do

Legalizing: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t991, t1076, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t990, FrameIndex:i32<14>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
Trying custom legalization
Lowering node: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
Creating new node: t1151: i32,i32 = ARMISD::SUBC t990:1, Constant:i32<1>
Creating new node: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1151:1
Creating new node: t1153: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1152:1
Creating new node: t1154: i32,i32 = merge_values t1152, t1153
Successfully custom legalized node
 ... replacing: t991: i32,i32 = addcarry t988, Constant:i32<0>, t990:1
     with:      t1154: i32,i32 = merge_values t1152, t1153
      and:      t1154: i32,i32 = merge_values t1152, t1153

Legalizing: t989: ch = TokenFactor t987:1, t988:1
Legal node: nothing to do

Legalizing: t990: i32,i32 = uaddo t987, Constant:i32<1>
Trying custom legalization
Lowering node: t990: i32,i32 = uaddo t987, Constant:i32<1>
Creating new node: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
Creating new node: t1156: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1155:1
Creating new node: t1157: i32,i32 = merge_values t1155, t1156
Successfully custom legalized node
 ... replacing: t990: i32,i32 = uaddo t987, Constant:i32<1>
     with:      t1157: i32,i32 = merge_values t1155, t1156
      and:      t1157: i32,i32 = merge_values t1155, t1156

Legalizing: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
Legalizing non-extending load operation

Legalizing: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32
Legalizing non-extending load operation

Legalizing: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
Legal node: nothing to do

Legalizing: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1

Legalizing: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
Legal node: nothing to do

Legalizing: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t983, t363:1
Legal node: nothing to do

Legalizing: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t982, t362:1
Legal node: nothing to do

Legalizing: t362: ch,glue = CopyToReg t360, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t986: ch = TokenFactor t984, t985
Legal node: nothing to do

Legalizing: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t983, t1077, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t982, FrameIndex:i32<13>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
Trying custom legalization
Lowering node: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
Creating new node: t1158: i32,i32 = ARMISD::SUBC t982:1, Constant:i32<1>
Creating new node: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1158:1
Creating new node: t1160: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1159:1
Creating new node: t1161: i32,i32 = merge_values t1159, t1160
Successfully custom legalized node
 ... replacing: t983: i32,i32 = addcarry t980, Constant:i32<0>, t982:1
     with:      t1161: i32,i32 = merge_values t1159, t1160
      and:      t1161: i32,i32 = merge_values t1159, t1160

Legalizing: t981: ch = TokenFactor t979:1, t980:1
Legal node: nothing to do

Legalizing: t982: i32,i32 = uaddo t979, Constant:i32<1>
Trying custom legalization
Lowering node: t982: i32,i32 = uaddo t979, Constant:i32<1>
Creating new node: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
Creating new node: t1163: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1162:1
Creating new node: t1164: i32,i32 = merge_values t1162, t1163
Successfully custom legalized node
 ... replacing: t982: i32,i32 = uaddo t979, Constant:i32<1>
     with:      t1164: i32,i32 = merge_values t1162, t1163
      and:      t1164: i32,i32 = merge_values t1162, t1163

Legalizing: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
Legalizing non-extending load operation

Legalizing: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32
Legalizing non-extending load operation

Legalizing: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
Legal node: nothing to do

Legalizing: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1

Legalizing: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
Legal node: nothing to do

Legalizing: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t975, t350:1
Legal node: nothing to do

Legalizing: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t974, t349:1
Legal node: nothing to do

Legalizing: t349: ch,glue = CopyToReg t347, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t978: ch = TokenFactor t976, t977
Legal node: nothing to do

Legalizing: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t975, t1078, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t974, FrameIndex:i32<12>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
Trying custom legalization
Lowering node: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
Creating new node: t1165: i32,i32 = ARMISD::SUBC t974:1, Constant:i32<1>
Creating new node: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1165:1
Creating new node: t1167: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1166:1
Creating new node: t1168: i32,i32 = merge_values t1166, t1167
Successfully custom legalized node
 ... replacing: t975: i32,i32 = addcarry t972, Constant:i32<0>, t974:1
     with:      t1168: i32,i32 = merge_values t1166, t1167
      and:      t1168: i32,i32 = merge_values t1166, t1167

Legalizing: t973: ch = TokenFactor t971:1, t972:1
Legal node: nothing to do

Legalizing: t974: i32,i32 = uaddo t971, Constant:i32<1>
Trying custom legalization
Lowering node: t974: i32,i32 = uaddo t971, Constant:i32<1>
Creating new node: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
Creating new node: t1170: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1169:1
Creating new node: t1171: i32,i32 = merge_values t1169, t1170
Successfully custom legalized node
 ... replacing: t974: i32,i32 = uaddo t971, Constant:i32<1>
     with:      t1171: i32,i32 = merge_values t1169, t1170
      and:      t1171: i32,i32 = merge_values t1169, t1170

Legalizing: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
Legalizing non-extending load operation

Legalizing: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32
Legalizing non-extending load operation

Legalizing: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
Legal node: nothing to do

Legalizing: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1

Legalizing: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
Legal node: nothing to do

Legalizing: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t967, t337:1
Legal node: nothing to do

Legalizing: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t966, t336:1
Legal node: nothing to do

Legalizing: t336: ch,glue = CopyToReg t334, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t970: ch = TokenFactor t968, t969
Legal node: nothing to do

Legalizing: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t967, t1079, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t966, FrameIndex:i32<11>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
Trying custom legalization
Lowering node: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
Creating new node: t1172: i32,i32 = ARMISD::SUBC t966:1, Constant:i32<1>
Creating new node: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1172:1
Creating new node: t1174: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1173:1
Creating new node: t1175: i32,i32 = merge_values t1173, t1174
Successfully custom legalized node
 ... replacing: t967: i32,i32 = addcarry t964, Constant:i32<0>, t966:1
     with:      t1175: i32,i32 = merge_values t1173, t1174
      and:      t1175: i32,i32 = merge_values t1173, t1174

Legalizing: t965: ch = TokenFactor t963:1, t964:1
Legal node: nothing to do

Legalizing: t966: i32,i32 = uaddo t963, Constant:i32<1>
Trying custom legalization
Lowering node: t966: i32,i32 = uaddo t963, Constant:i32<1>
Creating new node: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
Creating new node: t1177: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1176:1
Creating new node: t1178: i32,i32 = merge_values t1176, t1177
Successfully custom legalized node
 ... replacing: t966: i32,i32 = uaddo t963, Constant:i32<1>
     with:      t1178: i32,i32 = merge_values t1176, t1177
      and:      t1178: i32,i32 = merge_values t1176, t1177

Legalizing: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
Legalizing non-extending load operation

Legalizing: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32
Legalizing non-extending load operation

Legalizing: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
Legal node: nothing to do

Legalizing: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1

Legalizing: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
Legal node: nothing to do

Legalizing: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t959, t324:1
Legal node: nothing to do

Legalizing: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t958, t323:1
Legal node: nothing to do

Legalizing: t323: ch,glue = CopyToReg t321, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t962: ch = TokenFactor t960, t961
Legal node: nothing to do

Legalizing: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t959, t1080, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t958, FrameIndex:i32<10>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
Trying custom legalization
Lowering node: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
Creating new node: t1179: i32,i32 = ARMISD::SUBC t958:1, Constant:i32<1>
Creating new node: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1179:1
Creating new node: t1181: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1180:1
Creating new node: t1182: i32,i32 = merge_values t1180, t1181
Successfully custom legalized node
 ... replacing: t959: i32,i32 = addcarry t956, Constant:i32<0>, t958:1
     with:      t1182: i32,i32 = merge_values t1180, t1181
      and:      t1182: i32,i32 = merge_values t1180, t1181

Legalizing: t957: ch = TokenFactor t955:1, t956:1
Legal node: nothing to do

Legalizing: t958: i32,i32 = uaddo t955, Constant:i32<1>
Trying custom legalization
Lowering node: t958: i32,i32 = uaddo t955, Constant:i32<1>
Creating new node: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
Creating new node: t1184: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1183:1
Creating new node: t1185: i32,i32 = merge_values t1183, t1184
Successfully custom legalized node
 ... replacing: t958: i32,i32 = uaddo t955, Constant:i32<1>
     with:      t1185: i32,i32 = merge_values t1183, t1184
      and:      t1185: i32,i32 = merge_values t1183, t1184

Legalizing: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
Legalizing non-extending load operation

Legalizing: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32
Legalizing non-extending load operation

Legalizing: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
Legal node: nothing to do

Legalizing: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1

Legalizing: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
Legal node: nothing to do

Legalizing: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t951, t311:1
Legal node: nothing to do

Legalizing: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t950, t310:1
Legal node: nothing to do

Legalizing: t310: ch,glue = CopyToReg t308, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t954: ch = TokenFactor t952, t953
Legal node: nothing to do

Legalizing: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t951, t1081, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t950, FrameIndex:i32<9>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
Trying custom legalization
Lowering node: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
Creating new node: t1186: i32,i32 = ARMISD::SUBC t950:1, Constant:i32<1>
Creating new node: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1186:1
Creating new node: t1188: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1187:1
Creating new node: t1189: i32,i32 = merge_values t1187, t1188
Successfully custom legalized node
 ... replacing: t951: i32,i32 = addcarry t948, Constant:i32<0>, t950:1
     with:      t1189: i32,i32 = merge_values t1187, t1188
      and:      t1189: i32,i32 = merge_values t1187, t1188

Legalizing: t949: ch = TokenFactor t947:1, t948:1
Legal node: nothing to do

Legalizing: t950: i32,i32 = uaddo t947, Constant:i32<1>
Trying custom legalization
Lowering node: t950: i32,i32 = uaddo t947, Constant:i32<1>
Creating new node: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
Creating new node: t1191: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1190:1
Creating new node: t1192: i32,i32 = merge_values t1190, t1191
Successfully custom legalized node
 ... replacing: t950: i32,i32 = uaddo t947, Constant:i32<1>
     with:      t1192: i32,i32 = merge_values t1190, t1191
      and:      t1192: i32,i32 = merge_values t1190, t1191

Legalizing: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
Legalizing non-extending load operation

Legalizing: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32
Legalizing non-extending load operation

Legalizing: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
Legal node: nothing to do

Legalizing: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1

Legalizing: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
Legal node: nothing to do

Legalizing: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t943, t298:1
Legal node: nothing to do

Legalizing: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t942, t297:1
Legal node: nothing to do

Legalizing: t297: ch,glue = CopyToReg t295, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t946: ch = TokenFactor t944, t945
Legal node: nothing to do

Legalizing: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t943, t1082, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t942, FrameIndex:i32<8>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
Trying custom legalization
Lowering node: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
Creating new node: t1193: i32,i32 = ARMISD::SUBC t942:1, Constant:i32<1>
Creating new node: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1193:1
Creating new node: t1195: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1194:1
Creating new node: t1196: i32,i32 = merge_values t1194, t1195
Successfully custom legalized node
 ... replacing: t943: i32,i32 = addcarry t940, Constant:i32<0>, t942:1
     with:      t1196: i32,i32 = merge_values t1194, t1195
      and:      t1196: i32,i32 = merge_values t1194, t1195

Legalizing: t941: ch = TokenFactor t939:1, t940:1
Legal node: nothing to do

Legalizing: t942: i32,i32 = uaddo t939, Constant:i32<1>
Trying custom legalization
Lowering node: t942: i32,i32 = uaddo t939, Constant:i32<1>
Creating new node: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
Creating new node: t1198: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1197:1
Creating new node: t1199: i32,i32 = merge_values t1197, t1198
Successfully custom legalized node
 ... replacing: t942: i32,i32 = uaddo t939, Constant:i32<1>
     with:      t1199: i32,i32 = merge_values t1197, t1198
      and:      t1199: i32,i32 = merge_values t1197, t1198

Legalizing: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
Legalizing non-extending load operation

Legalizing: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32
Legalizing non-extending load operation

Legalizing: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
Legal node: nothing to do

Legalizing: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1

Legalizing: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
Legal node: nothing to do

Legalizing: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t935, t285:1
Legal node: nothing to do

Legalizing: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t934, t284:1
Legal node: nothing to do

Legalizing: t284: ch,glue = CopyToReg t282, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t938: ch = TokenFactor t936, t937
Legal node: nothing to do

Legalizing: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t935, t1083, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t934, FrameIndex:i32<7>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
Trying custom legalization
Lowering node: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
Creating new node: t1200: i32,i32 = ARMISD::SUBC t934:1, Constant:i32<1>
Creating new node: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1200:1
Creating new node: t1202: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1201:1
Creating new node: t1203: i32,i32 = merge_values t1201, t1202
Successfully custom legalized node
 ... replacing: t935: i32,i32 = addcarry t932, Constant:i32<0>, t934:1
     with:      t1203: i32,i32 = merge_values t1201, t1202
      and:      t1203: i32,i32 = merge_values t1201, t1202

Legalizing: t933: ch = TokenFactor t931:1, t932:1
Legal node: nothing to do

Legalizing: t934: i32,i32 = uaddo t931, Constant:i32<1>
Trying custom legalization
Lowering node: t934: i32,i32 = uaddo t931, Constant:i32<1>
Creating new node: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
Creating new node: t1205: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1204:1
Creating new node: t1206: i32,i32 = merge_values t1204, t1205
Successfully custom legalized node
 ... replacing: t934: i32,i32 = uaddo t931, Constant:i32<1>
     with:      t1206: i32,i32 = merge_values t1204, t1205
      and:      t1206: i32,i32 = merge_values t1204, t1205

Legalizing: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
Legalizing non-extending load operation

Legalizing: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32
Legalizing non-extending load operation

Legalizing: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
Legal node: nothing to do

Legalizing: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1

Legalizing: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
Legal node: nothing to do

Legalizing: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t927, t272:1
Legal node: nothing to do

Legalizing: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t926, t271:1
Legal node: nothing to do

Legalizing: t271: ch,glue = CopyToReg t269, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t930: ch = TokenFactor t928, t929
Legal node: nothing to do

Legalizing: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t927, t1084, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t926, FrameIndex:i32<6>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
Trying custom legalization
Lowering node: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
Creating new node: t1207: i32,i32 = ARMISD::SUBC t926:1, Constant:i32<1>
Creating new node: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1207:1
Creating new node: t1209: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1208:1
Creating new node: t1210: i32,i32 = merge_values t1208, t1209
Successfully custom legalized node
 ... replacing: t927: i32,i32 = addcarry t924, Constant:i32<0>, t926:1
     with:      t1210: i32,i32 = merge_values t1208, t1209
      and:      t1210: i32,i32 = merge_values t1208, t1209

Legalizing: t925: ch = TokenFactor t923:1, t924:1
Legal node: nothing to do

Legalizing: t926: i32,i32 = uaddo t923, Constant:i32<1>
Trying custom legalization
Lowering node: t926: i32,i32 = uaddo t923, Constant:i32<1>
Creating new node: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
Creating new node: t1212: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1211:1
Creating new node: t1213: i32,i32 = merge_values t1211, t1212
Successfully custom legalized node
 ... replacing: t926: i32,i32 = uaddo t923, Constant:i32<1>
     with:      t1213: i32,i32 = merge_values t1211, t1212
      and:      t1213: i32,i32 = merge_values t1211, t1212

Legalizing: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
Legalizing non-extending load operation

Legalizing: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32
Legalizing non-extending load operation

Legalizing: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
Legal node: nothing to do

Legalizing: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1

Legalizing: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
Legal node: nothing to do

Legalizing: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t919, t259:1
Legal node: nothing to do

Legalizing: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t918, t258:1
Legal node: nothing to do

Legalizing: t258: ch,glue = CopyToReg t256, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t922: ch = TokenFactor t920, t921
Legal node: nothing to do

Legalizing: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t919, t1085, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t918, FrameIndex:i32<5>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
Trying custom legalization
Lowering node: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
Creating new node: t1214: i32,i32 = ARMISD::SUBC t918:1, Constant:i32<1>
Creating new node: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1214:1
Creating new node: t1216: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1215:1
Creating new node: t1217: i32,i32 = merge_values t1215, t1216
Successfully custom legalized node
 ... replacing: t919: i32,i32 = addcarry t916, Constant:i32<0>, t918:1
     with:      t1217: i32,i32 = merge_values t1215, t1216
      and:      t1217: i32,i32 = merge_values t1215, t1216

Legalizing: t917: ch = TokenFactor t915:1, t916:1
Legal node: nothing to do

Legalizing: t918: i32,i32 = uaddo t915, Constant:i32<1>
Trying custom legalization
Lowering node: t918: i32,i32 = uaddo t915, Constant:i32<1>
Creating new node: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
Creating new node: t1219: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1218:1
Creating new node: t1220: i32,i32 = merge_values t1218, t1219
Successfully custom legalized node
 ... replacing: t918: i32,i32 = uaddo t915, Constant:i32<1>
     with:      t1220: i32,i32 = merge_values t1218, t1219
      and:      t1220: i32,i32 = merge_values t1218, t1219

Legalizing: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
Legalizing non-extending load operation

Legalizing: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32
Legalizing non-extending load operation

Legalizing: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
Legal node: nothing to do

Legalizing: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1

Legalizing: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
Legal node: nothing to do

Legalizing: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t911, t246:1
Legal node: nothing to do

Legalizing: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t910, t245:1
Legal node: nothing to do

Legalizing: t245: ch,glue = CopyToReg t243, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t914: ch = TokenFactor t912, t913
Legal node: nothing to do

Legalizing: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t911, t1086, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t910, FrameIndex:i32<4>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
Trying custom legalization
Lowering node: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
Creating new node: t1221: i32,i32 = ARMISD::SUBC t910:1, Constant:i32<1>
Creating new node: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1221:1
Creating new node: t1223: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1222:1
Creating new node: t1224: i32,i32 = merge_values t1222, t1223
Successfully custom legalized node
 ... replacing: t911: i32,i32 = addcarry t908, Constant:i32<0>, t910:1
     with:      t1224: i32,i32 = merge_values t1222, t1223
      and:      t1224: i32,i32 = merge_values t1222, t1223

Legalizing: t909: ch = TokenFactor t907:1, t908:1
Legal node: nothing to do

Legalizing: t910: i32,i32 = uaddo t907, Constant:i32<1>
Trying custom legalization
Lowering node: t910: i32,i32 = uaddo t907, Constant:i32<1>
Creating new node: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
Creating new node: t1226: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1225:1
Creating new node: t1227: i32,i32 = merge_values t1225, t1226
Successfully custom legalized node
 ... replacing: t910: i32,i32 = uaddo t907, Constant:i32<1>
     with:      t1227: i32,i32 = merge_values t1225, t1226
      and:      t1227: i32,i32 = merge_values t1225, t1226

Legalizing: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
Legalizing non-extending load operation

Legalizing: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32
Legalizing non-extending load operation

Legalizing: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
Legal node: nothing to do

Legalizing: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1

Legalizing: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
Legal node: nothing to do

Legalizing: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t903, t229:1
Legal node: nothing to do

Legalizing: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t902, t227:1
Legal node: nothing to do

Legalizing: t227: ch,glue = CopyToReg t223, Register:i32 $r0, GlobalAddress:i32<ptr @.str> 0
Legal node: nothing to do

Legalizing: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t906: ch = TokenFactor t904, t905
Legal node: nothing to do

Legalizing: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t903, t1087, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t902, FrameIndex:i32<3>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
Trying custom legalization
Lowering node: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
Creating new node: t1228: i32,i32 = ARMISD::SUBC t902:1, Constant:i32<1>
Creating new node: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1228:1
Creating new node: t1230: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1229:1
Creating new node: t1231: i32,i32 = merge_values t1229, t1230
Successfully custom legalized node
 ... replacing: t903: i32,i32 = addcarry t900, Constant:i32<0>, t902:1
     with:      t1231: i32,i32 = merge_values t1229, t1230
      and:      t1231: i32,i32 = merge_values t1229, t1230

Legalizing: t901: ch = TokenFactor t899:1, t900:1
Legal node: nothing to do

Legalizing: t902: i32,i32 = uaddo t899, Constant:i32<1>
Trying custom legalization
Lowering node: t902: i32,i32 = uaddo t899, Constant:i32<1>
Creating new node: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
Creating new node: t1233: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1232:1
Creating new node: t1234: i32,i32 = merge_values t1232, t1233
Successfully custom legalized node
 ... replacing: t902: i32,i32 = uaddo t899, Constant:i32<1>
     with:      t1234: i32,i32 = merge_values t1232, t1233
      and:      t1234: i32,i32 = merge_values t1232, t1233

Legalizing: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
Legalizing non-extending load operation

Legalizing: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32
Legalizing non-extending load operation

Legalizing: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Legal node: nothing to do

Legalizing: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1

Legalizing: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
Legal node: nothing to do

Legalizing: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
Legal node: nothing to do

Legalizing: t880: i32 = or t878, t712
Legal node: nothing to do

Legalizing: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
Legal node: nothing to do

Legalizing: t878: i32 = or t876, t745
Legal node: nothing to do

Legalizing: t879: i32 = or t877, t711
Legal node: nothing to do

Legalizing: t876: i32 = or t874, t856
Legal node: nothing to do

Legalizing: t877: i32 = or t875, t744
Legal node: nothing to do

Legalizing: t856: i32 = and t854, t767
Legal node: nothing to do

Legalizing: t875: i32 = or t873, t855
Legal node: nothing to do

Legalizing: t854: i32 = and t852, t800
Legal node: nothing to do

Legalizing: t855: i32 = and t853, t766
Legal node: nothing to do

Legalizing: t852: i32,i32 = addcarry t849, t843, t851:1
Trying custom legalization
Lowering node: t852: i32,i32 = addcarry t849, t843, t851:1
Creating new node: t1235: i32,i32 = ARMISD::SUBC t851:1, Constant:i32<1>
Creating new node: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1235:1
Creating new node: t1237: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1236:1
Creating new node: t1238: i32,i32 = merge_values t1236, t1237
Successfully custom legalized node
 ... replacing: t852: i32,i32 = addcarry t849, t843, t851:1
     with:      t1238: i32,i32 = merge_values t1236, t1237
      and:      t1238: i32,i32 = merge_values t1236, t1237

Legalizing: t853: i32 = and t851, t799
Legal node: nothing to do

Legalizing: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
Legal node: nothing to do

Legalizing: t851: i32,i32 = uaddo t848, t842
Trying custom legalization
Lowering node: t851: i32,i32 = uaddo t848, t842
Creating new node: t1239: i32,i32 = ARMISD::ADDC t848, t842
Creating new node: t1240: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1239:1
Creating new node: t1241: i32,i32 = merge_values t1239, t1240
Successfully custom legalized node
 ... replacing: t851: i32,i32 = uaddo t848, t842
     with:      t1241: i32,i32 = merge_values t1239, t1240
      and:      t1241: i32,i32 = merge_values t1239, t1240

Legalizing: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Legal node: nothing to do

Legalizing: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1

Legalizing: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
Legal node: nothing to do

Legalizing: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
Legal node: nothing to do

Legalizing: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
Legal node: nothing to do

Legalizing: t800: i32,i32 = addcarry t794, t773, t799:1
Trying custom legalization
Lowering node: t800: i32,i32 = addcarry t794, t773, t799:1
Creating new node: t1242: i32,i32 = ARMISD::SUBC t799:1, Constant:i32<1>
Creating new node: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1242:1
Creating new node: t1244: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1243:1
Creating new node: t1245: i32,i32 = merge_values t1243, t1244
Successfully custom legalized node
 ... replacing: t800: i32,i32 = addcarry t794, t773, t799:1
     with:      t1245: i32,i32 = merge_values t1243, t1244
      and:      t1245: i32,i32 = merge_values t1243, t1244

Legalizing: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
Legal node: nothing to do

Legalizing: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
Legal node: nothing to do

Legalizing: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
Legal node: nothing to do

Legalizing: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
Legal node: nothing to do

Legalizing: t799: i32,i32 = uaddo t793, t772
Trying custom legalization
Lowering node: t799: i32,i32 = uaddo t793, t772
Creating new node: t1246: i32,i32 = ARMISD::ADDC t793, t772
Creating new node: t1247: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1246:1
Creating new node: t1248: i32,i32 = merge_values t1246, t1247
Successfully custom legalized node
 ... replacing: t799: i32,i32 = uaddo t793, t772
     with:      t1248: i32,i32 = merge_values t1246, t1247
      and:      t1248: i32,i32 = merge_values t1246, t1247

Legalizing: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
Legal node: nothing to do

Legalizing: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
Legal node: nothing to do

Legalizing: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Legal node: nothing to do

Legalizing: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Legal node: nothing to do

Legalizing: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Legal node: nothing to do

Legalizing: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Legal node: nothing to do

Legalizing: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1

Legalizing: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1

Legalizing: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1

Legalizing: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1

Legalizing: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
Legal node: nothing to do

Legalizing: t745: i32 = xor t742, t740
Legal node: nothing to do

Legalizing: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
Legal node: nothing to do

Legalizing: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
Legal node: nothing to do

Legalizing: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
Legal node: nothing to do

Legalizing: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
Legal node: nothing to do

Legalizing: t740: i32 = and t738, t725
Legal node: nothing to do

Legalizing: t744: i32 = xor t741, t739
Legal node: nothing to do

Legalizing: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
Legal node: nothing to do

Legalizing: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
Legal node: nothing to do

Legalizing: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
Legal node: nothing to do

Legalizing: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
Legal node: nothing to do

Legalizing: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
Legal node: nothing to do

Legalizing: t738: i32,i32 = subcarry t736, t727, t737:1
Trying custom legalization
Lowering node: t738: i32,i32 = subcarry t736, t727, t737:1
Creating new node: t1249: i32 = sub Constant:i32<1>, t737:1
Creating new node: t1250: i32,i32 = ARMISD::SUBC t1249, Constant:i32<1>
Creating new node: t1251: i32,i32 = ARMISD::SUBE t736, t727, t1250:1
Creating new node: t1252: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1251:1
Creating new node: t1253: i32 = sub Constant:i32<1>, t1252
Creating new node: t1254: i32,i32 = merge_values t1251, t1253
Successfully custom legalized node
 ... replacing: t738: i32,i32 = subcarry t736, t727, t737:1
     with:      t1254: i32,i32 = merge_values t1251, t1253
      and:      t1254: i32,i32 = merge_values t1251, t1253

Legalizing: t739: i32 = and t737, t724
Legal node: nothing to do

Legalizing: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
Legal node: nothing to do

Legalizing: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
Legal node: nothing to do

Legalizing: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
Legal node: nothing to do

Legalizing: t873: i32 = or t871, t857
Legal node: nothing to do

Legalizing: t874: i32 = or t872, t858
Legal node: nothing to do

Legalizing: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
Legal node: nothing to do

Legalizing: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
Legal node: nothing to do

Legalizing: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
Legal node: nothing to do

Legalizing: t725: i32,i32 = addcarry t722, t719, t724:1
Trying custom legalization
Lowering node: t725: i32,i32 = addcarry t722, t719, t724:1
Creating new node: t1255: i32,i32 = ARMISD::SUBC t724:1, Constant:i32<1>
Creating new node: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1255:1
Creating new node: t1257: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1256:1
Creating new node: t1258: i32,i32 = merge_values t1256, t1257
Successfully custom legalized node
 ... replacing: t725: i32,i32 = addcarry t722, t719, t724:1
     with:      t1258: i32,i32 = merge_values t1256, t1257
      and:      t1258: i32,i32 = merge_values t1256, t1257

Legalizing: t736: i32,i32 = subcarry t733, t730, t735:1
Trying custom legalization
Lowering node: t736: i32,i32 = subcarry t733, t730, t735:1
Creating new node: t1259: i32 = sub Constant:i32<1>, t735:1
Creating new node: t1260: i32,i32 = ARMISD::SUBC t1259, Constant:i32<1>
Creating new node: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1260:1
Creating new node: t1262: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1261:1
Creating new node: t1263: i32 = sub Constant:i32<1>, t1262
Creating new node: t1264: i32,i32 = merge_values t1261, t1263
Successfully custom legalized node
 ... replacing: t736: i32,i32 = subcarry t733, t730, t735:1
     with:      t1264: i32,i32 = merge_values t1261, t1263
      and:      t1264: i32,i32 = merge_values t1261, t1263

Legalizing: t737: i32,i32 = usubo t735, t726
Trying custom legalization
Lowering node: t737: i32,i32 = usubo t735, t726
Creating new node: t1265: i32,i32 = ARMISD::SUBC t735, t726
Creating new node: t1266: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1265:1
Creating new node: t1267: i32 = sub Constant:i32<1>, t1266
Creating new node: t1268: i32,i32 = merge_values t1265, t1267
Successfully custom legalized node
 ... replacing: t737: i32,i32 = usubo t735, t726
     with:      t1268: i32,i32 = merge_values t1265, t1267
      and:      t1268: i32,i32 = merge_values t1265, t1267

Legalizing: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
Legal node: nothing to do

Legalizing: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
Legal node: nothing to do

Legalizing: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
Legal node: nothing to do

Legalizing: t871: i32 = or t869, t860
Legal node: nothing to do

Legalizing: t872: i32 = or t870, t861
Legal node: nothing to do

Legalizing: t165: i32 = add nsw t163, t164
Legal node: nothing to do

Legalizing: t689: ch = TokenFactor t687:1, t688:1
Legal node: nothing to do

Legalizing: t690: i32 = xor t687, Constant:i32<-1>
Legal node: nothing to do

Legalizing: t691: i32 = xor t688, Constant:i32<-1>
Legal node: nothing to do

Legalizing: t694: ch = TokenFactor t692:1, t693:1
Legal node: nothing to do

Legalizing: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
Legal node: nothing to do

Legalizing: t720: ch = TokenFactor t718:1, t719:1
Legal node: nothing to do

Legalizing: t724: i32,i32 = uaddo t721, t718
Trying custom legalization
Lowering node: t724: i32,i32 = uaddo t721, t718
Creating new node: t1269: i32,i32 = ARMISD::ADDC t721, t718
Creating new node: t1270: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1269:1
Creating new node: t1271: i32,i32 = merge_values t1269, t1270
Successfully custom legalized node
 ... replacing: t724: i32,i32 = uaddo t721, t718
     with:      t1271: i32,i32 = merge_values t1269, t1270
      and:      t1271: i32,i32 = merge_values t1269, t1270

Legalizing: t723: ch = TokenFactor t721:1, t722:1
Legal node: nothing to do

Legalizing: t728: ch = TokenFactor t726:1, t727:1
Legal node: nothing to do

Legalizing: t731: ch = TokenFactor t729:1, t730:1
Legal node: nothing to do

Legalizing: t735: i32,i32 = usubo t732, t729
Trying custom legalization
Lowering node: t735: i32,i32 = usubo t732, t729
Creating new node: t1272: i32,i32 = ARMISD::SUBC t732, t729
Creating new node: t1273: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1272:1
Creating new node: t1274: i32 = sub Constant:i32<1>, t1273
Creating new node: t1275: i32,i32 = merge_values t1272, t1274
Successfully custom legalized node
 ... replacing: t735: i32,i32 = usubo t732, t729
     with:      t1275: i32,i32 = merge_values t1272, t1274
      and:      t1275: i32,i32 = merge_values t1272, t1274

Legalizing: t734: ch = TokenFactor t732:1, t733:1
Legal node: nothing to do

Legalizing: t743: ch = TokenFactor t741:1, t742:1
Legal node: nothing to do

Legalizing: t748: ch = TokenFactor t746:1, t747:1
Legal node: nothing to do

Legalizing: t751: ch = TokenFactor t749:1, t750:1
Legal node: nothing to do

Legalizing: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
Legal node: nothing to do

Legalizing: t774: ch = TokenFactor t772:1, t773:1
Legal node: nothing to do

Legalizing: t777: ch = TokenFactor t775:1, t776:1
Legal node: nothing to do

Legalizing: t780: ch = TokenFactor t778:1, t779:1
Legal node: nothing to do

Legalizing: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
Legal node: nothing to do

Legalizing: t803: ch = TokenFactor t801:1, t802:1
Legal node: nothing to do

Legalizing: t806: ch = TokenFactor t804:1, t805:1
Legal node: nothing to do

Legalizing: t809: ch = TokenFactor t807:1, t808:1
Legal node: nothing to do

Legalizing: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
Legal node: nothing to do

Legalizing: t850: ch = TokenFactor t848:1, t849:1
Legal node: nothing to do

Legalizing: t859: ch = TokenFactor t857:1, t858:1
Legal node: nothing to do

Legalizing: t862: ch = TokenFactor t860:1, t861:1
Legal node: nothing to do

Legalizing: t865: ch = TokenFactor t863:1, t864:1
Legal node: nothing to do

Legalizing: t869: i32 = and t866, t863
Legal node: nothing to do

Legalizing: t870: i32 = and t867, t864
Legal node: nothing to do

Legalizing: t868: ch = TokenFactor t866:1, t867:1
Legal node: nothing to do

Legalizing: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
Legalizing non-extending load operation

Legalizing: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
Legalizing non-extending load operation

Legalizing: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
Legalizing non-extending load operation

Legalizing: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32
Legalizing non-extending load operation

Legalizing: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
Legalizing non-extending load operation

Legalizing: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32
Legalizing non-extending load operation

Legalizing: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
Legalizing non-extending load operation

Legalizing: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32
Legalizing non-extending load operation

Legalizing: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
Legalizing non-extending load operation

Legalizing: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32
Legalizing non-extending load operation

Legalizing: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
Legalizing non-extending load operation

Legalizing: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32
Legalizing non-extending load operation

Legalizing: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
Legalizing non-extending load operation

Legalizing: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32
Legalizing non-extending load operation

Legalizing: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
Legalizing non-extending load operation

Legalizing: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32
Legalizing non-extending load operation

Legalizing: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
Legalizing non-extending load operation

Legalizing: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32
Legalizing non-extending load operation

Legalizing: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
Legalizing non-extending load operation

Legalizing: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32
Legalizing non-extending load operation

Legalizing: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
Legalizing non-extending load operation

Legalizing: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32
Legalizing non-extending load operation

Legalizing: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
Legalizing non-extending load operation

Legalizing: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32
Legalizing non-extending load operation

Legalizing: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
Legalizing non-extending load operation

Legalizing: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32
Legalizing non-extending load operation

Legalizing: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
Legalizing non-extending load operation

Legalizing: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32
Legalizing non-extending load operation

Legalizing: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
Legalizing non-extending load operation

Legalizing: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32
Legalizing non-extending load operation

Legalizing: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
Legalizing non-extending load operation

Legalizing: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32
Legalizing non-extending load operation

Legalizing: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
Legalizing non-extending load operation

Legalizing: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32
Legalizing non-extending load operation

Legalizing: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
Legalizing non-extending load operation

Legalizing: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32
Legalizing non-extending load operation

Legalizing: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
Legalizing non-extending load operation

Legalizing: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32
Legalizing non-extending load operation

Legalizing: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
Legalizing non-extending load operation

Legalizing: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32
Legalizing non-extending load operation

Legalizing: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
Legalizing non-extending load operation

Legalizing: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32
Legalizing non-extending load operation

Legalizing: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
Legalizing non-extending load operation

Legalizing: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32
Legalizing non-extending load operation

Legalizing: t686: ch = TokenFactor t683, t685
Legal node: nothing to do

Legalizing: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t682, t1067, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
Trying custom legalization
Lowering node: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
Creating new node: t1276: i32 = sub Constant:i32<1>, t681:1
Creating new node: t1277: i32,i32 = ARMISD::SUBC t1276, Constant:i32<1>
Creating new node: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1277:1
Creating new node: t1279: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1278:1
Creating new node: t1280: i32 = sub Constant:i32<1>, t1279
Creating new node: t1281: i32,i32 = merge_values t1278, t1280
Successfully custom legalized node
 ... replacing: t682: i32,i32 = subcarry Constant:i32<0>, t680, t681:1
     with:      t1281: i32,i32 = merge_values t1278, t1280
      and:      t1281: i32,i32 = merge_values t1278, t1280

Legalizing: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t681, FrameIndex:i32<23>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t680: i32 = sra t158, Constant:i32<31>
Legal node: nothing to do

Legalizing: t681: i32,i32 = usubo Constant:i32<0>, t158
Trying custom legalization
Lowering node: t681: i32,i32 = usubo Constant:i32<0>, t158
Creating new node: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
Creating new node: t1283: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1282:1
Creating new node: t1284: i32 = sub Constant:i32<1>, t1283
Creating new node: t1285: i32,i32 = merge_values t1282, t1284
Successfully custom legalized node
 ... replacing: t681: i32,i32 = usubo Constant:i32<0>, t158
     with:      t1285: i32,i32 = merge_values t1282, t1284
      and:      t1285: i32,i32 = merge_values t1282, t1284

Legalizing: t158: i32 = mul nsw t156, Constant:i32<21>
Legal node: nothing to do

Legalizing: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t679: ch = TokenFactor t676, t678
Legal node: nothing to do

Legalizing: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t675, t1068, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
Trying custom legalization
Lowering node: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
Creating new node: t1286: i32 = sub Constant:i32<1>, t674:1
Creating new node: t1287: i32,i32 = ARMISD::SUBC t1286, Constant:i32<1>
Creating new node: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1287:1
Creating new node: t1289: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1288:1
Creating new node: t1290: i32 = sub Constant:i32<1>, t1289
Creating new node: t1291: i32,i32 = merge_values t1288, t1290
Successfully custom legalized node
 ... replacing: t675: i32,i32 = subcarry Constant:i32<0>, t673, t674:1
     with:      t1291: i32,i32 = merge_values t1288, t1290
      and:      t1291: i32,i32 = merge_values t1288, t1290

Legalizing: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t674, FrameIndex:i32<22>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t673: i32 = sra t151, Constant:i32<31>
Legal node: nothing to do

Legalizing: t674: i32,i32 = usubo Constant:i32<0>, t151
Trying custom legalization
Lowering node: t674: i32,i32 = usubo Constant:i32<0>, t151
Creating new node: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
Creating new node: t1293: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1292:1
Creating new node: t1294: i32 = sub Constant:i32<1>, t1293
Creating new node: t1295: i32,i32 = merge_values t1292, t1294
Successfully custom legalized node
 ... replacing: t674: i32,i32 = usubo Constant:i32<0>, t151
     with:      t1295: i32,i32 = merge_values t1292, t1294
      and:      t1295: i32,i32 = merge_values t1292, t1294

Legalizing: t151: i32 = mul nsw t149, Constant:i32<20>
Legal node: nothing to do

Legalizing: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t672: ch = TokenFactor t669, t671
Legal node: nothing to do

Legalizing: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t668, t1069, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
Trying custom legalization
Lowering node: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
Creating new node: t1296: i32 = sub Constant:i32<1>, t667:1
Creating new node: t1297: i32,i32 = ARMISD::SUBC t1296, Constant:i32<1>
Creating new node: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1297:1
Creating new node: t1299: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1298:1
Creating new node: t1300: i32 = sub Constant:i32<1>, t1299
Creating new node: t1301: i32,i32 = merge_values t1298, t1300
Successfully custom legalized node
 ... replacing: t668: i32,i32 = subcarry Constant:i32<0>, t666, t667:1
     with:      t1301: i32,i32 = merge_values t1298, t1300
      and:      t1301: i32,i32 = merge_values t1298, t1300

Legalizing: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t667, FrameIndex:i32<21>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t666: i32 = sra t144, Constant:i32<31>
Legal node: nothing to do

Legalizing: t667: i32,i32 = usubo Constant:i32<0>, t144
Trying custom legalization
Lowering node: t667: i32,i32 = usubo Constant:i32<0>, t144
Creating new node: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
Creating new node: t1303: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1302:1
Creating new node: t1304: i32 = sub Constant:i32<1>, t1303
Creating new node: t1305: i32,i32 = merge_values t1302, t1304
Successfully custom legalized node
 ... replacing: t667: i32,i32 = usubo Constant:i32<0>, t144
     with:      t1305: i32,i32 = merge_values t1302, t1304
      and:      t1305: i32,i32 = merge_values t1302, t1304

Legalizing: t144: i32 = mul nsw t142, Constant:i32<19>
Legal node: nothing to do

Legalizing: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t665: ch = TokenFactor t662, t664
Legal node: nothing to do

Legalizing: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t661, t1070, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
Trying custom legalization
Lowering node: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
Creating new node: t1306: i32 = sub Constant:i32<1>, t660:1
Creating new node: t1307: i32,i32 = ARMISD::SUBC t1306, Constant:i32<1>
Creating new node: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1307:1
Creating new node: t1309: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1308:1
Creating new node: t1310: i32 = sub Constant:i32<1>, t1309
Creating new node: t1311: i32,i32 = merge_values t1308, t1310
Successfully custom legalized node
 ... replacing: t661: i32,i32 = subcarry Constant:i32<0>, t659, t660:1
     with:      t1311: i32,i32 = merge_values t1308, t1310
      and:      t1311: i32,i32 = merge_values t1308, t1310

Legalizing: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t660, FrameIndex:i32<20>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t659: i32 = sra t137, Constant:i32<31>
Legal node: nothing to do

Legalizing: t660: i32,i32 = usubo Constant:i32<0>, t137
Trying custom legalization
Lowering node: t660: i32,i32 = usubo Constant:i32<0>, t137
Creating new node: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
Creating new node: t1313: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1312:1
Creating new node: t1314: i32 = sub Constant:i32<1>, t1313
Creating new node: t1315: i32,i32 = merge_values t1312, t1314
Successfully custom legalized node
 ... replacing: t660: i32,i32 = usubo Constant:i32<0>, t137
     with:      t1315: i32,i32 = merge_values t1312, t1314
      and:      t1315: i32,i32 = merge_values t1312, t1314

Legalizing: t137: i32 = mul nsw t135, Constant:i32<18>
Legal node: nothing to do

Legalizing: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t658: ch = TokenFactor t655, t657
Legal node: nothing to do

Legalizing: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t654, t1071, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
Trying custom legalization
Lowering node: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
Creating new node: t1316: i32 = sub Constant:i32<1>, t653:1
Creating new node: t1317: i32,i32 = ARMISD::SUBC t1316, Constant:i32<1>
Creating new node: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1317:1
Creating new node: t1319: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1318:1
Creating new node: t1320: i32 = sub Constant:i32<1>, t1319
Creating new node: t1321: i32,i32 = merge_values t1318, t1320
Successfully custom legalized node
 ... replacing: t654: i32,i32 = subcarry Constant:i32<0>, t652, t653:1
     with:      t1321: i32,i32 = merge_values t1318, t1320
      and:      t1321: i32,i32 = merge_values t1318, t1320

Legalizing: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t653, FrameIndex:i32<19>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t652: i32 = sra t130, Constant:i32<31>
Legal node: nothing to do

Legalizing: t653: i32,i32 = usubo Constant:i32<0>, t130
Trying custom legalization
Lowering node: t653: i32,i32 = usubo Constant:i32<0>, t130
Creating new node: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
Creating new node: t1323: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1322:1
Creating new node: t1324: i32 = sub Constant:i32<1>, t1323
Creating new node: t1325: i32,i32 = merge_values t1322, t1324
Successfully custom legalized node
 ... replacing: t653: i32,i32 = usubo Constant:i32<0>, t130
     with:      t1325: i32,i32 = merge_values t1322, t1324
      and:      t1325: i32,i32 = merge_values t1322, t1324

Legalizing: t130: i32 = mul nsw t128, Constant:i32<17>
Legal node: nothing to do

Legalizing: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t651: ch = TokenFactor t648, t650
Legal node: nothing to do

Legalizing: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t647, t1072, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
Trying custom legalization
Lowering node: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
Creating new node: t1326: i32 = sub Constant:i32<1>, t646:1
Creating new node: t1327: i32,i32 = ARMISD::SUBC t1326, Constant:i32<1>
Creating new node: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1327:1
Creating new node: t1329: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1328:1
Creating new node: t1330: i32 = sub Constant:i32<1>, t1329
Creating new node: t1331: i32,i32 = merge_values t1328, t1330
Successfully custom legalized node
 ... replacing: t647: i32,i32 = subcarry Constant:i32<0>, t645, t646:1
     with:      t1331: i32,i32 = merge_values t1328, t1330
      and:      t1331: i32,i32 = merge_values t1328, t1330

Legalizing: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t646, FrameIndex:i32<18>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t645: i32 = sra t511, Constant:i32<31>
Legal node: nothing to do

Legalizing: t646: i32,i32 = usubo Constant:i32<0>, t511
Trying custom legalization
Lowering node: t646: i32,i32 = usubo Constant:i32<0>, t511
Creating new node: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
Creating new node: t1333: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1332:1
Creating new node: t1334: i32 = sub Constant:i32<1>, t1333
Creating new node: t1335: i32,i32 = merge_values t1332, t1334
Successfully custom legalized node
 ... replacing: t646: i32,i32 = usubo Constant:i32<0>, t511
     with:      t1335: i32,i32 = merge_values t1332, t1334
      and:      t1335: i32,i32 = merge_values t1332, t1334

Legalizing: t511: i32 = shl t121, Constant:i32<4>
Legal node: nothing to do

Legalizing: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t644: ch = TokenFactor t641, t643
Legal node: nothing to do

Legalizing: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t640, t1073, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
Trying custom legalization
Lowering node: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
Creating new node: t1336: i32 = sub Constant:i32<1>, t639:1
Creating new node: t1337: i32,i32 = ARMISD::SUBC t1336, Constant:i32<1>
Creating new node: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1337:1
Creating new node: t1339: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1338:1
Creating new node: t1340: i32 = sub Constant:i32<1>, t1339
Creating new node: t1341: i32,i32 = merge_values t1338, t1340
Successfully custom legalized node
 ... replacing: t640: i32,i32 = subcarry Constant:i32<0>, t638, t639:1
     with:      t1341: i32,i32 = merge_values t1338, t1340
      and:      t1341: i32,i32 = merge_values t1338, t1340

Legalizing: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t639, FrameIndex:i32<17>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t638: i32 = sra t116, Constant:i32<31>
Legal node: nothing to do

Legalizing: t639: i32,i32 = usubo Constant:i32<0>, t116
Trying custom legalization
Lowering node: t639: i32,i32 = usubo Constant:i32<0>, t116
Creating new node: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
Creating new node: t1343: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1342:1
Creating new node: t1344: i32 = sub Constant:i32<1>, t1343
Creating new node: t1345: i32,i32 = merge_values t1342, t1344
Successfully custom legalized node
 ... replacing: t639: i32,i32 = usubo Constant:i32<0>, t116
     with:      t1345: i32,i32 = merge_values t1342, t1344
      and:      t1345: i32,i32 = merge_values t1342, t1344

Legalizing: t116: i32 = mul nsw t114, Constant:i32<15>
Legal node: nothing to do

Legalizing: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t637: ch = TokenFactor t634, t636
Legal node: nothing to do

Legalizing: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t633, t1074, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
Trying custom legalization
Lowering node: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
Creating new node: t1346: i32 = sub Constant:i32<1>, t632:1
Creating new node: t1347: i32,i32 = ARMISD::SUBC t1346, Constant:i32<1>
Creating new node: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1347:1
Creating new node: t1349: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1348:1
Creating new node: t1350: i32 = sub Constant:i32<1>, t1349
Creating new node: t1351: i32,i32 = merge_values t1348, t1350
Successfully custom legalized node
 ... replacing: t633: i32,i32 = subcarry Constant:i32<0>, t631, t632:1
     with:      t1351: i32,i32 = merge_values t1348, t1350
      and:      t1351: i32,i32 = merge_values t1348, t1350

Legalizing: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t632, FrameIndex:i32<16>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t631: i32 = sra t109, Constant:i32<31>
Legal node: nothing to do

Legalizing: t632: i32,i32 = usubo Constant:i32<0>, t109
Trying custom legalization
Lowering node: t632: i32,i32 = usubo Constant:i32<0>, t109
Creating new node: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
Creating new node: t1353: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1352:1
Creating new node: t1354: i32 = sub Constant:i32<1>, t1353
Creating new node: t1355: i32,i32 = merge_values t1352, t1354
Successfully custom legalized node
 ... replacing: t632: i32,i32 = usubo Constant:i32<0>, t109
     with:      t1355: i32,i32 = merge_values t1352, t1354
      and:      t1355: i32,i32 = merge_values t1352, t1354

Legalizing: t109: i32 = mul nsw t107, Constant:i32<14>
Legal node: nothing to do

Legalizing: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t630: ch = TokenFactor t627, t629
Legal node: nothing to do

Legalizing: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t626, t1075, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
Trying custom legalization
Lowering node: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
Creating new node: t1356: i32 = sub Constant:i32<1>, t625:1
Creating new node: t1357: i32,i32 = ARMISD::SUBC t1356, Constant:i32<1>
Creating new node: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1357:1
Creating new node: t1359: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1358:1
Creating new node: t1360: i32 = sub Constant:i32<1>, t1359
Creating new node: t1361: i32,i32 = merge_values t1358, t1360
Successfully custom legalized node
 ... replacing: t626: i32,i32 = subcarry Constant:i32<0>, t624, t625:1
     with:      t1361: i32,i32 = merge_values t1358, t1360
      and:      t1361: i32,i32 = merge_values t1358, t1360

Legalizing: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t625, FrameIndex:i32<15>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t624: i32 = sra t102, Constant:i32<31>
Legal node: nothing to do

Legalizing: t625: i32,i32 = usubo Constant:i32<0>, t102
Trying custom legalization
Lowering node: t625: i32,i32 = usubo Constant:i32<0>, t102
Creating new node: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
Creating new node: t1363: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1362:1
Creating new node: t1364: i32 = sub Constant:i32<1>, t1363
Creating new node: t1365: i32,i32 = merge_values t1362, t1364
Successfully custom legalized node
 ... replacing: t625: i32,i32 = usubo Constant:i32<0>, t102
     with:      t1365: i32,i32 = merge_values t1362, t1364
      and:      t1365: i32,i32 = merge_values t1362, t1364

Legalizing: t102: i32 = mul nsw t100, Constant:i32<13>
Legal node: nothing to do

Legalizing: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t623: ch = TokenFactor t620, t622
Legal node: nothing to do

Legalizing: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t619, t1076, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
Trying custom legalization
Lowering node: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
Creating new node: t1366: i32 = sub Constant:i32<1>, t618:1
Creating new node: t1367: i32,i32 = ARMISD::SUBC t1366, Constant:i32<1>
Creating new node: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1367:1
Creating new node: t1369: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1368:1
Creating new node: t1370: i32 = sub Constant:i32<1>, t1369
Creating new node: t1371: i32,i32 = merge_values t1368, t1370
Successfully custom legalized node
 ... replacing: t619: i32,i32 = subcarry Constant:i32<0>, t617, t618:1
     with:      t1371: i32,i32 = merge_values t1368, t1370
      and:      t1371: i32,i32 = merge_values t1368, t1370

Legalizing: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t618, FrameIndex:i32<14>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t617: i32 = sra t95, Constant:i32<31>
Legal node: nothing to do

Legalizing: t618: i32,i32 = usubo Constant:i32<0>, t95
Trying custom legalization
Lowering node: t618: i32,i32 = usubo Constant:i32<0>, t95
Creating new node: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
Creating new node: t1373: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1372:1
Creating new node: t1374: i32 = sub Constant:i32<1>, t1373
Creating new node: t1375: i32,i32 = merge_values t1372, t1374
Successfully custom legalized node
 ... replacing: t618: i32,i32 = usubo Constant:i32<0>, t95
     with:      t1375: i32,i32 = merge_values t1372, t1374
      and:      t1375: i32,i32 = merge_values t1372, t1374

Legalizing: t95: i32 = mul nsw t93, Constant:i32<12>
Legal node: nothing to do

Legalizing: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t616: ch = TokenFactor t613, t615
Legal node: nothing to do

Legalizing: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t612, t1077, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
Trying custom legalization
Lowering node: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
Creating new node: t1376: i32 = sub Constant:i32<1>, t611:1
Creating new node: t1377: i32,i32 = ARMISD::SUBC t1376, Constant:i32<1>
Creating new node: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1377:1
Creating new node: t1379: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1378:1
Creating new node: t1380: i32 = sub Constant:i32<1>, t1379
Creating new node: t1381: i32,i32 = merge_values t1378, t1380
Successfully custom legalized node
 ... replacing: t612: i32,i32 = subcarry Constant:i32<0>, t610, t611:1
     with:      t1381: i32,i32 = merge_values t1378, t1380
      and:      t1381: i32,i32 = merge_values t1378, t1380

Legalizing: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t611, FrameIndex:i32<13>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t610: i32 = sra t88, Constant:i32<31>
Legal node: nothing to do

Legalizing: t611: i32,i32 = usubo Constant:i32<0>, t88
Trying custom legalization
Lowering node: t611: i32,i32 = usubo Constant:i32<0>, t88
Creating new node: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
Creating new node: t1383: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1382:1
Creating new node: t1384: i32 = sub Constant:i32<1>, t1383
Creating new node: t1385: i32,i32 = merge_values t1382, t1384
Successfully custom legalized node
 ... replacing: t611: i32,i32 = usubo Constant:i32<0>, t88
     with:      t1385: i32,i32 = merge_values t1382, t1384
      and:      t1385: i32,i32 = merge_values t1382, t1384

Legalizing: t88: i32 = mul nsw t86, Constant:i32<11>
Legal node: nothing to do

Legalizing: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t609: ch = TokenFactor t606, t608
Legal node: nothing to do

Legalizing: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t605, t1078, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
Trying custom legalization
Lowering node: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
Creating new node: t1386: i32 = sub Constant:i32<1>, t604:1
Creating new node: t1387: i32,i32 = ARMISD::SUBC t1386, Constant:i32<1>
Creating new node: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1387:1
Creating new node: t1389: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1388:1
Creating new node: t1390: i32 = sub Constant:i32<1>, t1389
Creating new node: t1391: i32,i32 = merge_values t1388, t1390
Successfully custom legalized node
 ... replacing: t605: i32,i32 = subcarry Constant:i32<0>, t603, t604:1
     with:      t1391: i32,i32 = merge_values t1388, t1390
      and:      t1391: i32,i32 = merge_values t1388, t1390

Legalizing: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t604, FrameIndex:i32<12>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t603: i32 = sra t81, Constant:i32<31>
Legal node: nothing to do

Legalizing: t604: i32,i32 = usubo Constant:i32<0>, t81
Trying custom legalization
Lowering node: t604: i32,i32 = usubo Constant:i32<0>, t81
Creating new node: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
Creating new node: t1393: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1392:1
Creating new node: t1394: i32 = sub Constant:i32<1>, t1393
Creating new node: t1395: i32,i32 = merge_values t1392, t1394
Successfully custom legalized node
 ... replacing: t604: i32,i32 = usubo Constant:i32<0>, t81
     with:      t1395: i32,i32 = merge_values t1392, t1394
      and:      t1395: i32,i32 = merge_values t1392, t1394

Legalizing: t81: i32 = mul nsw t79, Constant:i32<10>
Legal node: nothing to do

Legalizing: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t602: ch = TokenFactor t599, t601
Legal node: nothing to do

Legalizing: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t598, t1079, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
Trying custom legalization
Lowering node: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
Creating new node: t1396: i32 = sub Constant:i32<1>, t597:1
Creating new node: t1397: i32,i32 = ARMISD::SUBC t1396, Constant:i32<1>
Creating new node: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1397:1
Creating new node: t1399: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1398:1
Creating new node: t1400: i32 = sub Constant:i32<1>, t1399
Creating new node: t1401: i32,i32 = merge_values t1398, t1400
Successfully custom legalized node
 ... replacing: t598: i32,i32 = subcarry Constant:i32<0>, t596, t597:1
     with:      t1401: i32,i32 = merge_values t1398, t1400
      and:      t1401: i32,i32 = merge_values t1398, t1400

Legalizing: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t597, FrameIndex:i32<11>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t596: i32 = sra t74, Constant:i32<31>
Legal node: nothing to do

Legalizing: t597: i32,i32 = usubo Constant:i32<0>, t74
Trying custom legalization
Lowering node: t597: i32,i32 = usubo Constant:i32<0>, t74
Creating new node: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
Creating new node: t1403: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1402:1
Creating new node: t1404: i32 = sub Constant:i32<1>, t1403
Creating new node: t1405: i32,i32 = merge_values t1402, t1404
Successfully custom legalized node
 ... replacing: t597: i32,i32 = usubo Constant:i32<0>, t74
     with:      t1405: i32,i32 = merge_values t1402, t1404
      and:      t1405: i32,i32 = merge_values t1402, t1404

Legalizing: t74: i32 = mul nsw t72, Constant:i32<9>
Legal node: nothing to do

Legalizing: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t595: ch = TokenFactor t592, t594
Legal node: nothing to do

Legalizing: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t591, t1080, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
Trying custom legalization
Lowering node: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
Creating new node: t1406: i32 = sub Constant:i32<1>, t590:1
Creating new node: t1407: i32,i32 = ARMISD::SUBC t1406, Constant:i32<1>
Creating new node: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1407:1
Creating new node: t1409: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1408:1
Creating new node: t1410: i32 = sub Constant:i32<1>, t1409
Creating new node: t1411: i32,i32 = merge_values t1408, t1410
Successfully custom legalized node
 ... replacing: t591: i32,i32 = subcarry Constant:i32<0>, t589, t590:1
     with:      t1411: i32,i32 = merge_values t1408, t1410
      and:      t1411: i32,i32 = merge_values t1408, t1410

Legalizing: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t590, FrameIndex:i32<10>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t589: i32 = sra t522, Constant:i32<31>
Legal node: nothing to do

Legalizing: t590: i32,i32 = usubo Constant:i32<0>, t522
Trying custom legalization
Lowering node: t590: i32,i32 = usubo Constant:i32<0>, t522
Creating new node: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
Creating new node: t1413: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1412:1
Creating new node: t1414: i32 = sub Constant:i32<1>, t1413
Creating new node: t1415: i32,i32 = merge_values t1412, t1414
Successfully custom legalized node
 ... replacing: t590: i32,i32 = usubo Constant:i32<0>, t522
     with:      t1415: i32,i32 = merge_values t1412, t1414
      and:      t1415: i32,i32 = merge_values t1412, t1414

Legalizing: t522: i32 = shl t65, Constant:i32<3>
Legal node: nothing to do

Legalizing: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t588: ch = TokenFactor t585, t587
Legal node: nothing to do

Legalizing: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t584, t1081, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
Trying custom legalization
Lowering node: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
Creating new node: t1416: i32 = sub Constant:i32<1>, t583:1
Creating new node: t1417: i32,i32 = ARMISD::SUBC t1416, Constant:i32<1>
Creating new node: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1417:1
Creating new node: t1419: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1418:1
Creating new node: t1420: i32 = sub Constant:i32<1>, t1419
Creating new node: t1421: i32,i32 = merge_values t1418, t1420
Successfully custom legalized node
 ... replacing: t584: i32,i32 = subcarry Constant:i32<0>, t582, t583:1
     with:      t1421: i32,i32 = merge_values t1418, t1420
      and:      t1421: i32,i32 = merge_values t1418, t1420

Legalizing: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t583, FrameIndex:i32<9>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t582: i32 = sra t60, Constant:i32<31>
Legal node: nothing to do

Legalizing: t583: i32,i32 = usubo Constant:i32<0>, t60
Trying custom legalization
Lowering node: t583: i32,i32 = usubo Constant:i32<0>, t60
Creating new node: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
Creating new node: t1423: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1422:1
Creating new node: t1424: i32 = sub Constant:i32<1>, t1423
Creating new node: t1425: i32,i32 = merge_values t1422, t1424
Successfully custom legalized node
 ... replacing: t583: i32,i32 = usubo Constant:i32<0>, t60
     with:      t1425: i32,i32 = merge_values t1422, t1424
      and:      t1425: i32,i32 = merge_values t1422, t1424

Legalizing: t60: i32 = mul nsw t58, Constant:i32<7>
Legal node: nothing to do

Legalizing: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t581: ch = TokenFactor t578, t580
Legal node: nothing to do

Legalizing: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t577, t1082, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
Trying custom legalization
Lowering node: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
Creating new node: t1426: i32 = sub Constant:i32<1>, t576:1
Creating new node: t1427: i32,i32 = ARMISD::SUBC t1426, Constant:i32<1>
Creating new node: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1427:1
Creating new node: t1429: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1428:1
Creating new node: t1430: i32 = sub Constant:i32<1>, t1429
Creating new node: t1431: i32,i32 = merge_values t1428, t1430
Successfully custom legalized node
 ... replacing: t577: i32,i32 = subcarry Constant:i32<0>, t575, t576:1
     with:      t1431: i32,i32 = merge_values t1428, t1430
      and:      t1431: i32,i32 = merge_values t1428, t1430

Legalizing: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t576, FrameIndex:i32<8>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t575: i32 = sra t53, Constant:i32<31>
Legal node: nothing to do

Legalizing: t576: i32,i32 = usubo Constant:i32<0>, t53
Trying custom legalization
Lowering node: t576: i32,i32 = usubo Constant:i32<0>, t53
Creating new node: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
Creating new node: t1433: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1432:1
Creating new node: t1434: i32 = sub Constant:i32<1>, t1433
Creating new node: t1435: i32,i32 = merge_values t1432, t1434
Successfully custom legalized node
 ... replacing: t576: i32,i32 = usubo Constant:i32<0>, t53
     with:      t1435: i32,i32 = merge_values t1432, t1434
      and:      t1435: i32,i32 = merge_values t1432, t1434

Legalizing: t53: i32 = mul nsw t51, Constant:i32<6>
Legal node: nothing to do

Legalizing: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t574: ch = TokenFactor t571, t573
Legal node: nothing to do

Legalizing: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t570, t1083, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
Trying custom legalization
Lowering node: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
Creating new node: t1436: i32 = sub Constant:i32<1>, t569:1
Creating new node: t1437: i32,i32 = ARMISD::SUBC t1436, Constant:i32<1>
Creating new node: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1437:1
Creating new node: t1439: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1438:1
Creating new node: t1440: i32 = sub Constant:i32<1>, t1439
Creating new node: t1441: i32,i32 = merge_values t1438, t1440
Successfully custom legalized node
 ... replacing: t570: i32,i32 = subcarry Constant:i32<0>, t568, t569:1
     with:      t1441: i32,i32 = merge_values t1438, t1440
      and:      t1441: i32,i32 = merge_values t1438, t1440

Legalizing: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t569, FrameIndex:i32<7>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t568: i32 = sra t46, Constant:i32<31>
Legal node: nothing to do

Legalizing: t569: i32,i32 = usubo Constant:i32<0>, t46
Trying custom legalization
Lowering node: t569: i32,i32 = usubo Constant:i32<0>, t46
Creating new node: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
Creating new node: t1443: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1442:1
Creating new node: t1444: i32 = sub Constant:i32<1>, t1443
Creating new node: t1445: i32,i32 = merge_values t1442, t1444
Successfully custom legalized node
 ... replacing: t569: i32,i32 = usubo Constant:i32<0>, t46
     with:      t1445: i32,i32 = merge_values t1442, t1444
      and:      t1445: i32,i32 = merge_values t1442, t1444

Legalizing: t46: i32 = mul nsw t44, Constant:i32<5>
Legal node: nothing to do

Legalizing: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t567: ch = TokenFactor t564, t566
Legal node: nothing to do

Legalizing: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t563, t1084, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
Trying custom legalization
Lowering node: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
Creating new node: t1446: i32 = sub Constant:i32<1>, t562:1
Creating new node: t1447: i32,i32 = ARMISD::SUBC t1446, Constant:i32<1>
Creating new node: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1447:1
Creating new node: t1449: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1448:1
Creating new node: t1450: i32 = sub Constant:i32<1>, t1449
Creating new node: t1451: i32,i32 = merge_values t1448, t1450
Successfully custom legalized node
 ... replacing: t563: i32,i32 = subcarry Constant:i32<0>, t561, t562:1
     with:      t1451: i32,i32 = merge_values t1448, t1450
      and:      t1451: i32,i32 = merge_values t1448, t1450

Legalizing: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t562, FrameIndex:i32<6>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t561: i32 = sra t529, Constant:i32<31>
Legal node: nothing to do

Legalizing: t562: i32,i32 = usubo Constant:i32<0>, t529
Trying custom legalization
Lowering node: t562: i32,i32 = usubo Constant:i32<0>, t529
Creating new node: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
Creating new node: t1453: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1452:1
Creating new node: t1454: i32 = sub Constant:i32<1>, t1453
Creating new node: t1455: i32,i32 = merge_values t1452, t1454
Successfully custom legalized node
 ... replacing: t562: i32,i32 = usubo Constant:i32<0>, t529
     with:      t1455: i32,i32 = merge_values t1452, t1454
      and:      t1455: i32,i32 = merge_values t1452, t1454

Legalizing: t529: i32 = shl t37, Constant:i32<2>
Legal node: nothing to do

Legalizing: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t560: ch = TokenFactor t557, t559
Legal node: nothing to do

Legalizing: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t556, t1085, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
Trying custom legalization
Lowering node: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
Creating new node: t1456: i32 = sub Constant:i32<1>, t555:1
Creating new node: t1457: i32,i32 = ARMISD::SUBC t1456, Constant:i32<1>
Creating new node: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1457:1
Creating new node: t1459: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1458:1
Creating new node: t1460: i32 = sub Constant:i32<1>, t1459
Creating new node: t1461: i32,i32 = merge_values t1458, t1460
Successfully custom legalized node
 ... replacing: t556: i32,i32 = subcarry Constant:i32<0>, t554, t555:1
     with:      t1461: i32,i32 = merge_values t1458, t1460
      and:      t1461: i32,i32 = merge_values t1458, t1460

Legalizing: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t555, FrameIndex:i32<5>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t554: i32 = sra t32, Constant:i32<31>
Legal node: nothing to do

Legalizing: t555: i32,i32 = usubo Constant:i32<0>, t32
Trying custom legalization
Lowering node: t555: i32,i32 = usubo Constant:i32<0>, t32
Creating new node: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
Creating new node: t1463: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1462:1
Creating new node: t1464: i32 = sub Constant:i32<1>, t1463
Creating new node: t1465: i32,i32 = merge_values t1462, t1464
Successfully custom legalized node
 ... replacing: t555: i32,i32 = usubo Constant:i32<0>, t32
     with:      t1465: i32,i32 = merge_values t1462, t1464
      and:      t1465: i32,i32 = merge_values t1462, t1464

Legalizing: t32: i32 = mul nsw t30, Constant:i32<3>
Legal node: nothing to do

Legalizing: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t553: ch = TokenFactor t550, t552
Legal node: nothing to do

Legalizing: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t549, t1086, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
Trying custom legalization
Lowering node: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
Creating new node: t1466: i32 = sub Constant:i32<1>, t548:1
Creating new node: t1467: i32,i32 = ARMISD::SUBC t1466, Constant:i32<1>
Creating new node: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1467:1
Creating new node: t1469: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1468:1
Creating new node: t1470: i32 = sub Constant:i32<1>, t1469
Creating new node: t1471: i32,i32 = merge_values t1468, t1470
Successfully custom legalized node
 ... replacing: t549: i32,i32 = subcarry Constant:i32<0>, t547, t548:1
     with:      t1471: i32,i32 = merge_values t1468, t1470
      and:      t1471: i32,i32 = merge_values t1468, t1470

Legalizing: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t548, FrameIndex:i32<4>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t547: i32 = sra t534, Constant:i32<31>
Legal node: nothing to do

Legalizing: t548: i32,i32 = usubo Constant:i32<0>, t534
Trying custom legalization
Lowering node: t548: i32,i32 = usubo Constant:i32<0>, t534
Creating new node: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
Creating new node: t1473: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1472:1
Creating new node: t1474: i32 = sub Constant:i32<1>, t1473
Creating new node: t1475: i32,i32 = merge_values t1472, t1474
Successfully custom legalized node
 ... replacing: t548: i32,i32 = usubo Constant:i32<0>, t534
     with:      t1475: i32,i32 = merge_values t1472, t1474
      and:      t1475: i32,i32 = merge_values t1472, t1474

Legalizing: t534: i32 = shl t23, Constant:i32<1>
Legal node: nothing to do

Legalizing: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t546: ch = TokenFactor t543, t545
Legal node: nothing to do

Legalizing: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t542, t1087, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
Trying custom legalization
Lowering node: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
Creating new node: t1476: i32 = sub Constant:i32<1>, t541:1
Creating new node: t1477: i32,i32 = ARMISD::SUBC t1476, Constant:i32<1>
Creating new node: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1477:1
Creating new node: t1479: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1478:1
Creating new node: t1480: i32 = sub Constant:i32<1>, t1479
Creating new node: t1481: i32,i32 = merge_values t1478, t1480
Successfully custom legalized node
 ... replacing: t542: i32,i32 = subcarry Constant:i32<0>, t540, t541:1
     with:      t1481: i32,i32 = merge_values t1478, t1480
      and:      t1481: i32,i32 = merge_values t1478, t1480

Legalizing: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t541, FrameIndex:i32<3>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t540: i32 = sra t538, Constant:i32<31>
Legal node: nothing to do

Legalizing: t541: i32,i32 = usubo Constant:i32<0>, t538
Trying custom legalization
Lowering node: t541: i32,i32 = usubo Constant:i32<0>, t538
Creating new node: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
Creating new node: t1483: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1482:1
Creating new node: t1484: i32 = sub Constant:i32<1>, t1483
Creating new node: t1485: i32,i32 = merge_values t1482, t1484
Successfully custom legalized node
 ... replacing: t541: i32,i32 = usubo Constant:i32<0>, t538
     with:      t1485: i32,i32 = merge_values t1482, t1484
      and:      t1485: i32,i32 = merge_values t1482, t1484

Legalizing: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>
Legal node: nothing to do

Legalizing: t6: i32,ch = CopyFromReg t0, Register:i32 %2
Legal node: nothing to do

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %1
Legal node: nothing to do

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Legal node: nothing to do

Legalizing: t821: i32 = TargetExternalSymbol'__divdi3'
Legal node: nothing to do

Legalizing: t763: i32 = TargetExternalSymbol'__muldi3'
Legal node: nothing to do

Legalizing: t708: i32 = TargetExternalSymbol'__moddi3'
Legal node: nothing to do

Legalizing: t704: i32 = Register $r1

Legalizing: t539: i32 = Constant<31>
Legal node: nothing to do

Legalizing: t537: i32 = Constant<-1>
Legal node: nothing to do

Legalizing: t235: i32 = TargetConstant<-1>

Legalizing: t233: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal node: nothing to do

Legalizing: t230: i32 = Register $r3

Legalizing: t228: i32 = Register $r2

Legalizing: t226: i32 = Register $r0

Legalizing: t222: i32 = TargetConstant<0>

Legalizing: t219: i32 = GlobalAddress<ptr @.str> 0
Trying custom legalization
Lowering node: t219: i32 = GlobalAddress<ptr @.str> 0
Creating new constant pool: t1486: i32 = TargetConstantPool<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
Creating new node: t1487: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
Creating new node: t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32
Successfully custom legalized node
 ... replacing: t219: i32 = GlobalAddress<ptr @.str> 0
     with:      t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32

Legalizing: t211: i32 = FrameIndex<24>
Legal node: nothing to do

Legalizing: t161: i32 = FrameIndex<23>
Legal node: nothing to do

Legalizing: t157: i32 = Constant<21>
Legal node: nothing to do

Legalizing: t154: i32 = FrameIndex<22>
Legal node: nothing to do

Legalizing: t150: i32 = Constant<20>
Legal node: nothing to do

Legalizing: t147: i32 = FrameIndex<21>
Legal node: nothing to do

Legalizing: t143: i32 = Constant<19>
Legal node: nothing to do

Legalizing: t140: i32 = FrameIndex<20>
Legal node: nothing to do

Legalizing: t136: i32 = Constant<18>
Legal node: nothing to do

Legalizing: t133: i32 = FrameIndex<19>
Legal node: nothing to do

Legalizing: t129: i32 = Constant<17>
Legal node: nothing to do

Legalizing: t126: i32 = FrameIndex<18>
Legal node: nothing to do

Legalizing: t119: i32 = FrameIndex<17>
Legal node: nothing to do

Legalizing: t115: i32 = Constant<15>
Legal node: nothing to do

Legalizing: t112: i32 = FrameIndex<16>
Legal node: nothing to do

Legalizing: t108: i32 = Constant<14>
Legal node: nothing to do

Legalizing: t105: i32 = FrameIndex<15>
Legal node: nothing to do

Legalizing: t101: i32 = Constant<13>
Legal node: nothing to do

Legalizing: t98: i32 = FrameIndex<14>
Legal node: nothing to do

Legalizing: t94: i32 = Constant<12>
Legal node: nothing to do

Legalizing: t91: i32 = FrameIndex<13>
Legal node: nothing to do

Legalizing: t87: i32 = Constant<11>
Legal node: nothing to do

Legalizing: t84: i32 = FrameIndex<12>
Legal node: nothing to do

Legalizing: t80: i32 = Constant<10>
Legal node: nothing to do

Legalizing: t77: i32 = FrameIndex<11>
Legal node: nothing to do

Legalizing: t73: i32 = Constant<9>
Legal node: nothing to do

Legalizing: t70: i32 = FrameIndex<10>
Legal node: nothing to do

Legalizing: t63: i32 = FrameIndex<9>
Legal node: nothing to do

Legalizing: t59: i32 = Constant<7>
Legal node: nothing to do

Legalizing: t56: i32 = FrameIndex<8>
Legal node: nothing to do

Legalizing: t52: i32 = Constant<6>
Legal node: nothing to do

Legalizing: t49: i32 = FrameIndex<7>
Legal node: nothing to do

Legalizing: t45: i32 = Constant<5>
Legal node: nothing to do

Legalizing: t42: i32 = FrameIndex<6>
Legal node: nothing to do

Legalizing: t38: i32 = Constant<4>
Legal node: nothing to do

Legalizing: t35: i32 = FrameIndex<5>
Legal node: nothing to do

Legalizing: t31: i32 = Constant<3>
Legal node: nothing to do

Legalizing: t28: i32 = FrameIndex<4>
Legal node: nothing to do

Legalizing: t24: i32 = Constant<2>
Legal node: nothing to do

Legalizing: t21: i32 = FrameIndex<3>
Legal node: nothing to do

Legalizing: t16: i32 = Constant<1>
Legal node: nothing to do

Legalizing: t13: i32 = FrameIndex<2>
Legal node: nothing to do

Legalizing: t11: i32 = FrameIndex<1>
Legal node: nothing to do

Legalizing: t9: i32 = undef
Legal node: nothing to do

Legalizing: t8: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t7: i32 = FrameIndex<0>
Legal node: nothing to do

Legalizing: t5: i32 = Register %2

Legalizing: t3: i32 = Register %1

Legalizing: t1: i32 = Register %0

Legalizing: t0: ch,glue = EntryToken
Legal node: nothing to do

Legalizing: t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32
Legalizing non-extending load operation

Legalizing: t1487: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
Legal node: nothing to do

Legalizing: t1486: i32 = TargetConstantPool<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
Legal node: nothing to do

Legalizing: t1485: i32,i32 = merge_values t1482, t1484
Trying to expand node
Successfully expanded node
 ... replacing: t1485: i32,i32 = merge_values t1482, t1484
     with:      t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
      and:      t1484: i32 = sub Constant:i32<1>, t1483

Legalizing: t1484: i32 = sub Constant:i32<1>, t1483
Legal node: nothing to do

Legalizing: t1483: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1482:1
Legal node: nothing to do

Legalizing: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
Legal node: nothing to do

Legalizing: t1481: i32,i32 = merge_values t1478, t1480
Trying to expand node
Successfully expanded node
 ... replacing: t1481: i32,i32 = merge_values t1478, t1480
     with:      t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1477:1
      and:      t1480: i32 = sub Constant:i32<1>, t1479

Legalizing: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1477:1
Legal node: nothing to do

Legalizing: t1477: i32,i32 = ARMISD::SUBC t1476, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1476: i32 = sub Constant:i32<1>, t1484
Legal node: nothing to do

Legalizing: t1475: i32,i32 = merge_values t1472, t1474
Trying to expand node
Successfully expanded node
 ... replacing: t1475: i32,i32 = merge_values t1472, t1474
     with:      t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
      and:      t1474: i32 = sub Constant:i32<1>, t1473

Legalizing: t1474: i32 = sub Constant:i32<1>, t1473
Legal node: nothing to do

Legalizing: t1473: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1472:1
Legal node: nothing to do

Legalizing: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
Legal node: nothing to do

Legalizing: t1471: i32,i32 = merge_values t1468, t1470
Trying to expand node
Successfully expanded node
 ... replacing: t1471: i32,i32 = merge_values t1468, t1470
     with:      t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1467:1
      and:      t1470: i32 = sub Constant:i32<1>, t1469

Legalizing: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1467:1
Legal node: nothing to do

Legalizing: t1467: i32,i32 = ARMISD::SUBC t1466, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1466: i32 = sub Constant:i32<1>, t1474
Legal node: nothing to do

Legalizing: t1465: i32,i32 = merge_values t1462, t1464
Trying to expand node
Successfully expanded node
 ... replacing: t1465: i32,i32 = merge_values t1462, t1464
     with:      t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
      and:      t1464: i32 = sub Constant:i32<1>, t1463

Legalizing: t1464: i32 = sub Constant:i32<1>, t1463
Legal node: nothing to do

Legalizing: t1463: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1462:1
Legal node: nothing to do

Legalizing: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
Legal node: nothing to do

Legalizing: t1461: i32,i32 = merge_values t1458, t1460
Trying to expand node
Successfully expanded node
 ... replacing: t1461: i32,i32 = merge_values t1458, t1460
     with:      t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1457:1
      and:      t1460: i32 = sub Constant:i32<1>, t1459

Legalizing: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1457:1
Legal node: nothing to do

Legalizing: t1457: i32,i32 = ARMISD::SUBC t1456, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1456: i32 = sub Constant:i32<1>, t1464
Legal node: nothing to do

Legalizing: t1455: i32,i32 = merge_values t1452, t1454
Trying to expand node
Successfully expanded node
 ... replacing: t1455: i32,i32 = merge_values t1452, t1454
     with:      t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
      and:      t1454: i32 = sub Constant:i32<1>, t1453

Legalizing: t1454: i32 = sub Constant:i32<1>, t1453
Legal node: nothing to do

Legalizing: t1453: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1452:1
Legal node: nothing to do

Legalizing: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
Legal node: nothing to do

Legalizing: t1451: i32,i32 = merge_values t1448, t1450
Trying to expand node
Successfully expanded node
 ... replacing: t1451: i32,i32 = merge_values t1448, t1450
     with:      t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1447:1
      and:      t1450: i32 = sub Constant:i32<1>, t1449

Legalizing: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1447:1
Legal node: nothing to do

Legalizing: t1447: i32,i32 = ARMISD::SUBC t1446, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1446: i32 = sub Constant:i32<1>, t1454
Legal node: nothing to do

Legalizing: t1445: i32,i32 = merge_values t1442, t1444
Trying to expand node
Successfully expanded node
 ... replacing: t1445: i32,i32 = merge_values t1442, t1444
     with:      t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
      and:      t1444: i32 = sub Constant:i32<1>, t1443

Legalizing: t1444: i32 = sub Constant:i32<1>, t1443
Legal node: nothing to do

Legalizing: t1443: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1442:1
Legal node: nothing to do

Legalizing: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
Legal node: nothing to do

Legalizing: t1441: i32,i32 = merge_values t1438, t1440
Trying to expand node
Successfully expanded node
 ... replacing: t1441: i32,i32 = merge_values t1438, t1440
     with:      t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1437:1
      and:      t1440: i32 = sub Constant:i32<1>, t1439

Legalizing: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1437:1
Legal node: nothing to do

Legalizing: t1437: i32,i32 = ARMISD::SUBC t1436, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1436: i32 = sub Constant:i32<1>, t1444
Legal node: nothing to do

Legalizing: t1435: i32,i32 = merge_values t1432, t1434
Trying to expand node
Successfully expanded node
 ... replacing: t1435: i32,i32 = merge_values t1432, t1434
     with:      t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
      and:      t1434: i32 = sub Constant:i32<1>, t1433

Legalizing: t1434: i32 = sub Constant:i32<1>, t1433
Legal node: nothing to do

Legalizing: t1433: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1432:1
Legal node: nothing to do

Legalizing: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
Legal node: nothing to do

Legalizing: t1431: i32,i32 = merge_values t1428, t1430
Trying to expand node
Successfully expanded node
 ... replacing: t1431: i32,i32 = merge_values t1428, t1430
     with:      t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1427:1
      and:      t1430: i32 = sub Constant:i32<1>, t1429

Legalizing: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1427:1
Legal node: nothing to do

Legalizing: t1427: i32,i32 = ARMISD::SUBC t1426, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1426: i32 = sub Constant:i32<1>, t1434
Legal node: nothing to do

Legalizing: t1425: i32,i32 = merge_values t1422, t1424
Trying to expand node
Successfully expanded node
 ... replacing: t1425: i32,i32 = merge_values t1422, t1424
     with:      t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
      and:      t1424: i32 = sub Constant:i32<1>, t1423

Legalizing: t1424: i32 = sub Constant:i32<1>, t1423
Legal node: nothing to do

Legalizing: t1423: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1422:1
Legal node: nothing to do

Legalizing: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
Legal node: nothing to do

Legalizing: t1421: i32,i32 = merge_values t1418, t1420
Trying to expand node
Successfully expanded node
 ... replacing: t1421: i32,i32 = merge_values t1418, t1420
     with:      t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1417:1
      and:      t1420: i32 = sub Constant:i32<1>, t1419

Legalizing: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1417:1
Legal node: nothing to do

Legalizing: t1417: i32,i32 = ARMISD::SUBC t1416, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1416: i32 = sub Constant:i32<1>, t1424
Legal node: nothing to do

Legalizing: t1415: i32,i32 = merge_values t1412, t1414
Trying to expand node
Successfully expanded node
 ... replacing: t1415: i32,i32 = merge_values t1412, t1414
     with:      t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
      and:      t1414: i32 = sub Constant:i32<1>, t1413

Legalizing: t1414: i32 = sub Constant:i32<1>, t1413
Legal node: nothing to do

Legalizing: t1413: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1412:1
Legal node: nothing to do

Legalizing: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
Legal node: nothing to do

Legalizing: t1411: i32,i32 = merge_values t1408, t1410
Trying to expand node
Successfully expanded node
 ... replacing: t1411: i32,i32 = merge_values t1408, t1410
     with:      t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1407:1
      and:      t1410: i32 = sub Constant:i32<1>, t1409

Legalizing: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1407:1
Legal node: nothing to do

Legalizing: t1407: i32,i32 = ARMISD::SUBC t1406, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1406: i32 = sub Constant:i32<1>, t1414
Legal node: nothing to do

Legalizing: t1405: i32,i32 = merge_values t1402, t1404
Trying to expand node
Successfully expanded node
 ... replacing: t1405: i32,i32 = merge_values t1402, t1404
     with:      t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
      and:      t1404: i32 = sub Constant:i32<1>, t1403

Legalizing: t1404: i32 = sub Constant:i32<1>, t1403
Legal node: nothing to do

Legalizing: t1403: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1402:1
Legal node: nothing to do

Legalizing: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
Legal node: nothing to do

Legalizing: t1401: i32,i32 = merge_values t1398, t1400
Trying to expand node
Successfully expanded node
 ... replacing: t1401: i32,i32 = merge_values t1398, t1400
     with:      t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1397:1
      and:      t1400: i32 = sub Constant:i32<1>, t1399

Legalizing: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1397:1
Legal node: nothing to do

Legalizing: t1397: i32,i32 = ARMISD::SUBC t1396, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1396: i32 = sub Constant:i32<1>, t1404
Legal node: nothing to do

Legalizing: t1395: i32,i32 = merge_values t1392, t1394
Trying to expand node
Successfully expanded node
 ... replacing: t1395: i32,i32 = merge_values t1392, t1394
     with:      t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
      and:      t1394: i32 = sub Constant:i32<1>, t1393

Legalizing: t1394: i32 = sub Constant:i32<1>, t1393
Legal node: nothing to do

Legalizing: t1393: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1392:1
Legal node: nothing to do

Legalizing: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
Legal node: nothing to do

Legalizing: t1391: i32,i32 = merge_values t1388, t1390
Trying to expand node
Successfully expanded node
 ... replacing: t1391: i32,i32 = merge_values t1388, t1390
     with:      t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1387:1
      and:      t1390: i32 = sub Constant:i32<1>, t1389

Legalizing: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1387:1
Legal node: nothing to do

Legalizing: t1387: i32,i32 = ARMISD::SUBC t1386, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1386: i32 = sub Constant:i32<1>, t1394
Legal node: nothing to do

Legalizing: t1385: i32,i32 = merge_values t1382, t1384
Trying to expand node
Successfully expanded node
 ... replacing: t1385: i32,i32 = merge_values t1382, t1384
     with:      t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
      and:      t1384: i32 = sub Constant:i32<1>, t1383

Legalizing: t1384: i32 = sub Constant:i32<1>, t1383
Legal node: nothing to do

Legalizing: t1383: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1382:1
Legal node: nothing to do

Legalizing: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
Legal node: nothing to do

Legalizing: t1381: i32,i32 = merge_values t1378, t1380
Trying to expand node
Successfully expanded node
 ... replacing: t1381: i32,i32 = merge_values t1378, t1380
     with:      t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1377:1
      and:      t1380: i32 = sub Constant:i32<1>, t1379

Legalizing: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1377:1
Legal node: nothing to do

Legalizing: t1377: i32,i32 = ARMISD::SUBC t1376, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1376: i32 = sub Constant:i32<1>, t1384
Legal node: nothing to do

Legalizing: t1375: i32,i32 = merge_values t1372, t1374
Trying to expand node
Successfully expanded node
 ... replacing: t1375: i32,i32 = merge_values t1372, t1374
     with:      t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
      and:      t1374: i32 = sub Constant:i32<1>, t1373

Legalizing: t1374: i32 = sub Constant:i32<1>, t1373
Legal node: nothing to do

Legalizing: t1373: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1372:1
Legal node: nothing to do

Legalizing: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
Legal node: nothing to do

Legalizing: t1371: i32,i32 = merge_values t1368, t1370
Trying to expand node
Successfully expanded node
 ... replacing: t1371: i32,i32 = merge_values t1368, t1370
     with:      t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1367:1
      and:      t1370: i32 = sub Constant:i32<1>, t1369

Legalizing: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1367:1
Legal node: nothing to do

Legalizing: t1367: i32,i32 = ARMISD::SUBC t1366, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1366: i32 = sub Constant:i32<1>, t1374
Legal node: nothing to do

Legalizing: t1365: i32,i32 = merge_values t1362, t1364
Trying to expand node
Successfully expanded node
 ... replacing: t1365: i32,i32 = merge_values t1362, t1364
     with:      t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
      and:      t1364: i32 = sub Constant:i32<1>, t1363

Legalizing: t1364: i32 = sub Constant:i32<1>, t1363
Legal node: nothing to do

Legalizing: t1363: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1362:1
Legal node: nothing to do

Legalizing: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
Legal node: nothing to do

Legalizing: t1361: i32,i32 = merge_values t1358, t1360
Trying to expand node
Successfully expanded node
 ... replacing: t1361: i32,i32 = merge_values t1358, t1360
     with:      t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1357:1
      and:      t1360: i32 = sub Constant:i32<1>, t1359

Legalizing: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1357:1
Legal node: nothing to do

Legalizing: t1357: i32,i32 = ARMISD::SUBC t1356, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1356: i32 = sub Constant:i32<1>, t1364
Legal node: nothing to do

Legalizing: t1355: i32,i32 = merge_values t1352, t1354
Trying to expand node
Successfully expanded node
 ... replacing: t1355: i32,i32 = merge_values t1352, t1354
     with:      t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
      and:      t1354: i32 = sub Constant:i32<1>, t1353

Legalizing: t1354: i32 = sub Constant:i32<1>, t1353
Legal node: nothing to do

Legalizing: t1353: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1352:1
Legal node: nothing to do

Legalizing: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
Legal node: nothing to do

Legalizing: t1351: i32,i32 = merge_values t1348, t1350
Trying to expand node
Successfully expanded node
 ... replacing: t1351: i32,i32 = merge_values t1348, t1350
     with:      t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1347:1
      and:      t1350: i32 = sub Constant:i32<1>, t1349

Legalizing: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1347:1
Legal node: nothing to do

Legalizing: t1347: i32,i32 = ARMISD::SUBC t1346, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1346: i32 = sub Constant:i32<1>, t1354
Legal node: nothing to do

Legalizing: t1345: i32,i32 = merge_values t1342, t1344
Trying to expand node
Successfully expanded node
 ... replacing: t1345: i32,i32 = merge_values t1342, t1344
     with:      t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
      and:      t1344: i32 = sub Constant:i32<1>, t1343

Legalizing: t1344: i32 = sub Constant:i32<1>, t1343
Legal node: nothing to do

Legalizing: t1343: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1342:1
Legal node: nothing to do

Legalizing: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
Legal node: nothing to do

Legalizing: t1341: i32,i32 = merge_values t1338, t1340
Trying to expand node
Successfully expanded node
 ... replacing: t1341: i32,i32 = merge_values t1338, t1340
     with:      t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1337:1
      and:      t1340: i32 = sub Constant:i32<1>, t1339

Legalizing: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1337:1
Legal node: nothing to do

Legalizing: t1337: i32,i32 = ARMISD::SUBC t1336, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1336: i32 = sub Constant:i32<1>, t1344
Legal node: nothing to do

Legalizing: t1335: i32,i32 = merge_values t1332, t1334
Trying to expand node
Successfully expanded node
 ... replacing: t1335: i32,i32 = merge_values t1332, t1334
     with:      t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
      and:      t1334: i32 = sub Constant:i32<1>, t1333

Legalizing: t1334: i32 = sub Constant:i32<1>, t1333
Legal node: nothing to do

Legalizing: t1333: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1332:1
Legal node: nothing to do

Legalizing: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
Legal node: nothing to do

Legalizing: t1331: i32,i32 = merge_values t1328, t1330
Trying to expand node
Successfully expanded node
 ... replacing: t1331: i32,i32 = merge_values t1328, t1330
     with:      t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1327:1
      and:      t1330: i32 = sub Constant:i32<1>, t1329

Legalizing: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1327:1
Legal node: nothing to do

Legalizing: t1327: i32,i32 = ARMISD::SUBC t1326, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1326: i32 = sub Constant:i32<1>, t1334
Legal node: nothing to do

Legalizing: t1325: i32,i32 = merge_values t1322, t1324
Trying to expand node
Successfully expanded node
 ... replacing: t1325: i32,i32 = merge_values t1322, t1324
     with:      t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
      and:      t1324: i32 = sub Constant:i32<1>, t1323

Legalizing: t1324: i32 = sub Constant:i32<1>, t1323
Legal node: nothing to do

Legalizing: t1323: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1322:1
Legal node: nothing to do

Legalizing: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
Legal node: nothing to do

Legalizing: t1321: i32,i32 = merge_values t1318, t1320
Trying to expand node
Successfully expanded node
 ... replacing: t1321: i32,i32 = merge_values t1318, t1320
     with:      t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1317:1
      and:      t1320: i32 = sub Constant:i32<1>, t1319

Legalizing: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1317:1
Legal node: nothing to do

Legalizing: t1317: i32,i32 = ARMISD::SUBC t1316, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1316: i32 = sub Constant:i32<1>, t1324
Legal node: nothing to do

Legalizing: t1315: i32,i32 = merge_values t1312, t1314
Trying to expand node
Successfully expanded node
 ... replacing: t1315: i32,i32 = merge_values t1312, t1314
     with:      t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
      and:      t1314: i32 = sub Constant:i32<1>, t1313

Legalizing: t1314: i32 = sub Constant:i32<1>, t1313
Legal node: nothing to do

Legalizing: t1313: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1312:1
Legal node: nothing to do

Legalizing: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
Legal node: nothing to do

Legalizing: t1311: i32,i32 = merge_values t1308, t1310
Trying to expand node
Successfully expanded node
 ... replacing: t1311: i32,i32 = merge_values t1308, t1310
     with:      t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1307:1
      and:      t1310: i32 = sub Constant:i32<1>, t1309

Legalizing: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1307:1
Legal node: nothing to do

Legalizing: t1307: i32,i32 = ARMISD::SUBC t1306, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1306: i32 = sub Constant:i32<1>, t1314
Legal node: nothing to do

Legalizing: t1305: i32,i32 = merge_values t1302, t1304
Trying to expand node
Successfully expanded node
 ... replacing: t1305: i32,i32 = merge_values t1302, t1304
     with:      t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
      and:      t1304: i32 = sub Constant:i32<1>, t1303

Legalizing: t1304: i32 = sub Constant:i32<1>, t1303
Legal node: nothing to do

Legalizing: t1303: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1302:1
Legal node: nothing to do

Legalizing: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
Legal node: nothing to do

Legalizing: t1301: i32,i32 = merge_values t1298, t1300
Trying to expand node
Successfully expanded node
 ... replacing: t1301: i32,i32 = merge_values t1298, t1300
     with:      t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1297:1
      and:      t1300: i32 = sub Constant:i32<1>, t1299

Legalizing: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1297:1
Legal node: nothing to do

Legalizing: t1297: i32,i32 = ARMISD::SUBC t1296, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1296: i32 = sub Constant:i32<1>, t1304
Legal node: nothing to do

Legalizing: t1295: i32,i32 = merge_values t1292, t1294
Trying to expand node
Successfully expanded node
 ... replacing: t1295: i32,i32 = merge_values t1292, t1294
     with:      t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
      and:      t1294: i32 = sub Constant:i32<1>, t1293

Legalizing: t1294: i32 = sub Constant:i32<1>, t1293
Legal node: nothing to do

Legalizing: t1293: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1292:1
Legal node: nothing to do

Legalizing: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
Legal node: nothing to do

Legalizing: t1291: i32,i32 = merge_values t1288, t1290
Trying to expand node
Successfully expanded node
 ... replacing: t1291: i32,i32 = merge_values t1288, t1290
     with:      t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1287:1
      and:      t1290: i32 = sub Constant:i32<1>, t1289

Legalizing: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1287:1
Legal node: nothing to do

Legalizing: t1287: i32,i32 = ARMISD::SUBC t1286, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1286: i32 = sub Constant:i32<1>, t1294
Legal node: nothing to do

Legalizing: t1285: i32,i32 = merge_values t1282, t1284
Trying to expand node
Successfully expanded node
 ... replacing: t1285: i32,i32 = merge_values t1282, t1284
     with:      t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
      and:      t1284: i32 = sub Constant:i32<1>, t1283

Legalizing: t1284: i32 = sub Constant:i32<1>, t1283
Legal node: nothing to do

Legalizing: t1283: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1282:1
Legal node: nothing to do

Legalizing: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
Legal node: nothing to do

Legalizing: t1281: i32,i32 = merge_values t1278, t1280
Trying to expand node
Successfully expanded node
 ... replacing: t1281: i32,i32 = merge_values t1278, t1280
     with:      t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1277:1
      and:      t1280: i32 = sub Constant:i32<1>, t1279

Legalizing: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1277:1
Legal node: nothing to do

Legalizing: t1277: i32,i32 = ARMISD::SUBC t1276, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1276: i32 = sub Constant:i32<1>, t1284
Legal node: nothing to do

Legalizing: t1275: i32,i32 = merge_values t1272, t1274
Trying to expand node
Successfully expanded node
 ... replacing: t1275: i32,i32 = merge_values t1272, t1274
     with:      t1272: i32,i32 = ARMISD::SUBC t732, t729
      and:      t1274: i32 = sub Constant:i32<1>, t1273

Legalizing: t1274: i32 = sub Constant:i32<1>, t1273
Legal node: nothing to do

Legalizing: t1273: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1272:1
Legal node: nothing to do

Legalizing: t1272: i32,i32 = ARMISD::SUBC t732, t729
Legal node: nothing to do

Legalizing: t1271: i32,i32 = merge_values t1269, t1270
Trying to expand node
Successfully expanded node
 ... replacing: t1271: i32,i32 = merge_values t1269, t1270
     with:      t1269: i32,i32 = ARMISD::ADDC t721, t718
      and:      t1270: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1269:1

Legalizing: t1270: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1269:1
Legal node: nothing to do

Legalizing: t1269: i32,i32 = ARMISD::ADDC t721, t718
Legal node: nothing to do

Legalizing: t1268: i32,i32 = merge_values t1265, t1267
Trying to expand node
Successfully expanded node
 ... replacing: t1268: i32,i32 = merge_values t1265, t1267
     with:      t1265: i32,i32 = ARMISD::SUBC t1272, t726
      and:      t1267: i32 = sub Constant:i32<1>, t1266

Legalizing: t1267: i32 = sub Constant:i32<1>, t1266
Legal node: nothing to do

Legalizing: t1266: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1265:1
Legal node: nothing to do

Legalizing: t1265: i32,i32 = ARMISD::SUBC t1272, t726
Legal node: nothing to do

Legalizing: t1264: i32,i32 = merge_values t1261, t1263
Trying to expand node
Successfully expanded node
 ... replacing: t1264: i32,i32 = merge_values t1261, t1263
     with:      t1261: i32,i32 = ARMISD::SUBE t733, t730, t1260:1
      and:      t1263: i32 = sub Constant:i32<1>, t1262

Legalizing: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1260:1
Legal node: nothing to do

Legalizing: t1260: i32,i32 = ARMISD::SUBC t1259, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1259: i32 = sub Constant:i32<1>, t1274
Legal node: nothing to do

Legalizing: t1258: i32,i32 = merge_values t1256, t1257
Trying to expand node
Successfully expanded node
 ... replacing: t1258: i32,i32 = merge_values t1256, t1257
     with:      t1256: i32,i32 = ARMISD::ADDE t722, t719, t1255:1
      and:      t1257: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1256:1

Legalizing: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1255:1
Legal node: nothing to do

Legalizing: t1255: i32,i32 = ARMISD::SUBC t1270, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1254: i32,i32 = merge_values t1251, t1253
Trying to expand node
Successfully expanded node
 ... replacing: t1254: i32,i32 = merge_values t1251, t1253
     with:      t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1250:1
      and:      t1253: i32 = sub Constant:i32<1>, t1252

Legalizing: t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1250:1
Legal node: nothing to do

Legalizing: t1250: i32,i32 = ARMISD::SUBC t1249, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1249: i32 = sub Constant:i32<1>, t1267
Legal node: nothing to do

Legalizing: t1248: i32,i32 = merge_values t1246, t1247
Trying to expand node
Successfully expanded node
 ... replacing: t1248: i32,i32 = merge_values t1246, t1247
     with:      t1246: i32,i32 = ARMISD::ADDC t793, t772
      and:      t1247: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1246:1

Legalizing: t1247: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1246:1
Legal node: nothing to do

Legalizing: t1246: i32,i32 = ARMISD::ADDC t793, t772
Legal node: nothing to do

Legalizing: t1245: i32,i32 = merge_values t1243, t1244
Trying to expand node
Successfully expanded node
 ... replacing: t1245: i32,i32 = merge_values t1243, t1244
     with:      t1243: i32,i32 = ARMISD::ADDE t794, t773, t1242:1
      and:      t1244: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1243:1

Legalizing: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1242:1
Legal node: nothing to do

Legalizing: t1242: i32,i32 = ARMISD::SUBC t1247, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1241: i32,i32 = merge_values t1239, t1240
Trying to expand node
Successfully expanded node
 ... replacing: t1241: i32,i32 = merge_values t1239, t1240
     with:      t1239: i32,i32 = ARMISD::ADDC t848, t842
      and:      t1240: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1239:1

Legalizing: t1240: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1239:1
Legal node: nothing to do

Legalizing: t1239: i32,i32 = ARMISD::ADDC t848, t842
Legal node: nothing to do

Legalizing: t1238: i32,i32 = merge_values t1236, t1237
Trying to expand node
Successfully expanded node
 ... replacing: t1238: i32,i32 = merge_values t1236, t1237
     with:      t1236: i32,i32 = ARMISD::ADDE t849, t843, t1235:1
      and:      t1237: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1236:1

Legalizing: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1235:1
Legal node: nothing to do

Legalizing: t1235: i32,i32 = ARMISD::SUBC t1240, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1234: i32,i32 = merge_values t1232, t1233
Trying to expand node
Successfully expanded node
 ... replacing: t1234: i32,i32 = merge_values t1232, t1233
     with:      t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
      and:      t1233: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1232:1

Legalizing: t1233: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1232:1
Legal node: nothing to do

Legalizing: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1231: i32,i32 = merge_values t1229, t1230
Trying to expand node
Successfully expanded node
 ... replacing: t1231: i32,i32 = merge_values t1229, t1230
     with:      t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1228:1
      and:      t1230: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1229:1

Legalizing: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1228:1
Legal node: nothing to do

Legalizing: t1228: i32,i32 = ARMISD::SUBC t1233, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1227: i32,i32 = merge_values t1225, t1226
Trying to expand node
Successfully expanded node
 ... replacing: t1227: i32,i32 = merge_values t1225, t1226
     with:      t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
      and:      t1226: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1225:1

Legalizing: t1226: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1225:1
Legal node: nothing to do

Legalizing: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1224: i32,i32 = merge_values t1222, t1223
Trying to expand node
Successfully expanded node
 ... replacing: t1224: i32,i32 = merge_values t1222, t1223
     with:      t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1221:1
      and:      t1223: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1222:1

Legalizing: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1221:1
Legal node: nothing to do

Legalizing: t1221: i32,i32 = ARMISD::SUBC t1226, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1220: i32,i32 = merge_values t1218, t1219
Trying to expand node
Successfully expanded node
 ... replacing: t1220: i32,i32 = merge_values t1218, t1219
     with:      t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
      and:      t1219: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1218:1

Legalizing: t1219: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1218:1
Legal node: nothing to do

Legalizing: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1217: i32,i32 = merge_values t1215, t1216
Trying to expand node
Successfully expanded node
 ... replacing: t1217: i32,i32 = merge_values t1215, t1216
     with:      t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1214:1
      and:      t1216: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1215:1

Legalizing: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1214:1
Legal node: nothing to do

Legalizing: t1214: i32,i32 = ARMISD::SUBC t1219, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1213: i32,i32 = merge_values t1211, t1212
Trying to expand node
Successfully expanded node
 ... replacing: t1213: i32,i32 = merge_values t1211, t1212
     with:      t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
      and:      t1212: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1211:1

Legalizing: t1212: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1211:1
Legal node: nothing to do

Legalizing: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1210: i32,i32 = merge_values t1208, t1209
Trying to expand node
Successfully expanded node
 ... replacing: t1210: i32,i32 = merge_values t1208, t1209
     with:      t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1207:1
      and:      t1209: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1208:1

Legalizing: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1207:1
Legal node: nothing to do

Legalizing: t1207: i32,i32 = ARMISD::SUBC t1212, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1206: i32,i32 = merge_values t1204, t1205
Trying to expand node
Successfully expanded node
 ... replacing: t1206: i32,i32 = merge_values t1204, t1205
     with:      t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
      and:      t1205: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1204:1

Legalizing: t1205: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1204:1
Legal node: nothing to do

Legalizing: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1203: i32,i32 = merge_values t1201, t1202
Trying to expand node
Successfully expanded node
 ... replacing: t1203: i32,i32 = merge_values t1201, t1202
     with:      t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1200:1
      and:      t1202: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1201:1

Legalizing: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1200:1
Legal node: nothing to do

Legalizing: t1200: i32,i32 = ARMISD::SUBC t1205, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1199: i32,i32 = merge_values t1197, t1198
Trying to expand node
Successfully expanded node
 ... replacing: t1199: i32,i32 = merge_values t1197, t1198
     with:      t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
      and:      t1198: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1197:1

Legalizing: t1198: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1197:1
Legal node: nothing to do

Legalizing: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1196: i32,i32 = merge_values t1194, t1195
Trying to expand node
Successfully expanded node
 ... replacing: t1196: i32,i32 = merge_values t1194, t1195
     with:      t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1193:1
      and:      t1195: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1194:1

Legalizing: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1193:1
Legal node: nothing to do

Legalizing: t1193: i32,i32 = ARMISD::SUBC t1198, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1192: i32,i32 = merge_values t1190, t1191
Trying to expand node
Successfully expanded node
 ... replacing: t1192: i32,i32 = merge_values t1190, t1191
     with:      t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
      and:      t1191: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1190:1

Legalizing: t1191: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1190:1
Legal node: nothing to do

Legalizing: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1189: i32,i32 = merge_values t1187, t1188
Trying to expand node
Successfully expanded node
 ... replacing: t1189: i32,i32 = merge_values t1187, t1188
     with:      t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1186:1
      and:      t1188: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1187:1

Legalizing: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1186:1
Legal node: nothing to do

Legalizing: t1186: i32,i32 = ARMISD::SUBC t1191, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1185: i32,i32 = merge_values t1183, t1184
Trying to expand node
Successfully expanded node
 ... replacing: t1185: i32,i32 = merge_values t1183, t1184
     with:      t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
      and:      t1184: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1183:1

Legalizing: t1184: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1183:1
Legal node: nothing to do

Legalizing: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1182: i32,i32 = merge_values t1180, t1181
Trying to expand node
Successfully expanded node
 ... replacing: t1182: i32,i32 = merge_values t1180, t1181
     with:      t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1179:1
      and:      t1181: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1180:1

Legalizing: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1179:1
Legal node: nothing to do

Legalizing: t1179: i32,i32 = ARMISD::SUBC t1184, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1178: i32,i32 = merge_values t1176, t1177
Trying to expand node
Successfully expanded node
 ... replacing: t1178: i32,i32 = merge_values t1176, t1177
     with:      t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
      and:      t1177: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1176:1

Legalizing: t1177: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1176:1
Legal node: nothing to do

Legalizing: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1175: i32,i32 = merge_values t1173, t1174
Trying to expand node
Successfully expanded node
 ... replacing: t1175: i32,i32 = merge_values t1173, t1174
     with:      t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1172:1
      and:      t1174: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1173:1

Legalizing: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1172:1
Legal node: nothing to do

Legalizing: t1172: i32,i32 = ARMISD::SUBC t1177, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1171: i32,i32 = merge_values t1169, t1170
Trying to expand node
Successfully expanded node
 ... replacing: t1171: i32,i32 = merge_values t1169, t1170
     with:      t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
      and:      t1170: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1169:1

Legalizing: t1170: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1169:1
Legal node: nothing to do

Legalizing: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1168: i32,i32 = merge_values t1166, t1167
Trying to expand node
Successfully expanded node
 ... replacing: t1168: i32,i32 = merge_values t1166, t1167
     with:      t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1165:1
      and:      t1167: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1166:1

Legalizing: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1165:1
Legal node: nothing to do

Legalizing: t1165: i32,i32 = ARMISD::SUBC t1170, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1164: i32,i32 = merge_values t1162, t1163
Trying to expand node
Successfully expanded node
 ... replacing: t1164: i32,i32 = merge_values t1162, t1163
     with:      t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
      and:      t1163: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1162:1

Legalizing: t1163: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1162:1
Legal node: nothing to do

Legalizing: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1161: i32,i32 = merge_values t1159, t1160
Trying to expand node
Successfully expanded node
 ... replacing: t1161: i32,i32 = merge_values t1159, t1160
     with:      t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1158:1
      and:      t1160: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1159:1

Legalizing: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1158:1
Legal node: nothing to do

Legalizing: t1158: i32,i32 = ARMISD::SUBC t1163, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1157: i32,i32 = merge_values t1155, t1156
Trying to expand node
Successfully expanded node
 ... replacing: t1157: i32,i32 = merge_values t1155, t1156
     with:      t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
      and:      t1156: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1155:1

Legalizing: t1156: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1155:1
Legal node: nothing to do

Legalizing: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1154: i32,i32 = merge_values t1152, t1153
Trying to expand node
Successfully expanded node
 ... replacing: t1154: i32,i32 = merge_values t1152, t1153
     with:      t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1151:1
      and:      t1153: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1152:1

Legalizing: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1151:1
Legal node: nothing to do

Legalizing: t1151: i32,i32 = ARMISD::SUBC t1156, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1150: i32,i32 = merge_values t1148, t1149
Trying to expand node
Successfully expanded node
 ... replacing: t1150: i32,i32 = merge_values t1148, t1149
     with:      t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
      and:      t1149: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1148:1

Legalizing: t1149: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1148:1
Legal node: nothing to do

Legalizing: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1147: i32,i32 = merge_values t1145, t1146
Trying to expand node
Successfully expanded node
 ... replacing: t1147: i32,i32 = merge_values t1145, t1146
     with:      t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1144:1
      and:      t1146: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1145:1

Legalizing: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1144:1
Legal node: nothing to do

Legalizing: t1144: i32,i32 = ARMISD::SUBC t1149, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1143: i32,i32 = merge_values t1141, t1142
Trying to expand node
Successfully expanded node
 ... replacing: t1143: i32,i32 = merge_values t1141, t1142
     with:      t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
      and:      t1142: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1141:1

Legalizing: t1142: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1141:1
Legal node: nothing to do

Legalizing: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1140: i32,i32 = merge_values t1138, t1139
Trying to expand node
Successfully expanded node
 ... replacing: t1140: i32,i32 = merge_values t1138, t1139
     with:      t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1137:1
      and:      t1139: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1138:1

Legalizing: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1137:1
Legal node: nothing to do

Legalizing: t1137: i32,i32 = ARMISD::SUBC t1142, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1136: i32,i32 = merge_values t1134, t1135
Trying to expand node
Successfully expanded node
 ... replacing: t1136: i32,i32 = merge_values t1134, t1135
     with:      t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
      and:      t1135: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1134:1

Legalizing: t1135: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1134:1
Legal node: nothing to do

Legalizing: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1133: i32,i32 = merge_values t1131, t1132
Trying to expand node
Successfully expanded node
 ... replacing: t1133: i32,i32 = merge_values t1131, t1132
     with:      t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1130:1
      and:      t1132: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1131:1

Legalizing: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1130:1
Legal node: nothing to do

Legalizing: t1130: i32,i32 = ARMISD::SUBC t1135, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1129: i32,i32 = merge_values t1127, t1128
Trying to expand node
Successfully expanded node
 ... replacing: t1129: i32,i32 = merge_values t1127, t1128
     with:      t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
      and:      t1128: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1127:1

Legalizing: t1128: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1127:1
Legal node: nothing to do

Legalizing: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1126: i32,i32 = merge_values t1124, t1125
Trying to expand node
Successfully expanded node
 ... replacing: t1126: i32,i32 = merge_values t1124, t1125
     with:      t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1123:1
      and:      t1125: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1124:1

Legalizing: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1123:1
Legal node: nothing to do

Legalizing: t1123: i32,i32 = ARMISD::SUBC t1128, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1122: i32,i32 = merge_values t1120, t1121
Trying to expand node
Successfully expanded node
 ... replacing: t1122: i32,i32 = merge_values t1120, t1121
     with:      t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
      and:      t1121: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1120:1

Legalizing: t1121: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1120:1
Legal node: nothing to do

Legalizing: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1119: i32,i32 = merge_values t1117, t1118
Trying to expand node
Successfully expanded node
 ... replacing: t1119: i32,i32 = merge_values t1117, t1118
     with:      t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1116:1
      and:      t1118: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1117:1

Legalizing: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1116:1
Legal node: nothing to do

Legalizing: t1116: i32,i32 = ARMISD::SUBC t1121, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1115: i32,i32 = merge_values t1113, t1114
Trying to expand node
Successfully expanded node
 ... replacing: t1115: i32,i32 = merge_values t1113, t1114
     with:      t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
      and:      t1114: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1113:1

Legalizing: t1114: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1113:1
Legal node: nothing to do

Legalizing: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1112: i32,i32 = merge_values t1110, t1111
Trying to expand node
Successfully expanded node
 ... replacing: t1112: i32,i32 = merge_values t1110, t1111
     with:      t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1109:1
      and:      t1111: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1110:1

Legalizing: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1109:1
Legal node: nothing to do

Legalizing: t1109: i32,i32 = ARMISD::SUBC t1114, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1108: i32,i32 = merge_values t1106, t1107
Trying to expand node
Successfully expanded node
 ... replacing: t1108: i32,i32 = merge_values t1106, t1107
     with:      t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
      and:      t1107: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1106:1

Legalizing: t1107: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1106:1
Legal node: nothing to do

Legalizing: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1105: i32,i32 = merge_values t1103, t1104
Trying to expand node
Successfully expanded node
 ... replacing: t1105: i32,i32 = merge_values t1103, t1104
     with:      t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1102:1
      and:      t1104: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1103:1

Legalizing: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1102:1
Legal node: nothing to do

Legalizing: t1102: i32,i32 = ARMISD::SUBC t1107, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1101: i32,i32 = merge_values t1099, t1100
Trying to expand node
Successfully expanded node
 ... replacing: t1101: i32,i32 = merge_values t1099, t1100
     with:      t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
      and:      t1100: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1099:1

Legalizing: t1100: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1099:1
Legal node: nothing to do

Legalizing: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1098: i32,i32 = merge_values t1096, t1097
Trying to expand node
Successfully expanded node
 ... replacing: t1098: i32,i32 = merge_values t1096, t1097
     with:      t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1095:1
      and:      t1097: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1096:1

Legalizing: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1095:1
Legal node: nothing to do

Legalizing: t1095: i32,i32 = ARMISD::SUBC t1100, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1094: i32,i32 = merge_values t1092, t1093
Trying to expand node
Successfully expanded node
 ... replacing: t1094: i32,i32 = merge_values t1092, t1093
     with:      t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
      and:      t1093: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1092:1

Legalizing: t1093: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1092:1
Legal node: nothing to do

Legalizing: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
Legal node: nothing to do

Legalizing: t1091: i32,i32 = merge_values t1089, t1090
Trying to expand node
Successfully expanded node
 ... replacing: t1091: i32,i32 = merge_values t1089, t1090
     with:      t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1088:1
      and:      t1090: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1089:1

Legalizing: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1088:1
Legal node: nothing to do

Legalizing: t1088: i32,i32 = ARMISD::SUBC t1093, Constant:i32<1>
Legal node: nothing to do
Legalized selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 871 nodes:
  t0: ch,glue = EntryToken
  t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>
  t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>
  t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>
  t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>
  t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>
  t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>
  t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>
  t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>
  t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>
  t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>
  t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>
  t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>
  t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>
  t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>
  t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>
  t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>
  t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>
  t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>
  t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>
  t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>
  t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
  t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
      t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t1482, FrameIndex:i32<3>, undef:i32
          t540: i32 = sra t538, Constant:i32<31>
                t1483: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1482:1
              t1484: i32 = sub Constant:i32<1>, t1483
            t1476: i32 = sub Constant:i32<1>, t1484
          t1477: i32,i32 = ARMISD::SUBC t1476, Constant:i32<1>
        t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1477:1
      t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t1478, t1087, undef:i32
    t546: ch = TokenFactor t543, t545
  t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
  t534: i32 = shl t23, Constant:i32<1>
      t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t1472, FrameIndex:i32<4>, undef:i32
          t547: i32 = sra t534, Constant:i32<31>
                t1473: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1472:1
              t1474: i32 = sub Constant:i32<1>, t1473
            t1466: i32 = sub Constant:i32<1>, t1474
          t1467: i32,i32 = ARMISD::SUBC t1466, Constant:i32<1>
        t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1467:1
      t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t1468, t1086, undef:i32
    t553: ch = TokenFactor t550, t552
  t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
  t32: i32 = mul nsw t30, Constant:i32<3>
      t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t1462, FrameIndex:i32<5>, undef:i32
          t554: i32 = sra t32, Constant:i32<31>
                t1463: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1462:1
              t1464: i32 = sub Constant:i32<1>, t1463
            t1456: i32 = sub Constant:i32<1>, t1464
          t1457: i32,i32 = ARMISD::SUBC t1456, Constant:i32<1>
        t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1457:1
      t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t1458, t1085, undef:i32
    t560: ch = TokenFactor t557, t559
  t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
  t529: i32 = shl t37, Constant:i32<2>
      t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t1452, FrameIndex:i32<6>, undef:i32
          t561: i32 = sra t529, Constant:i32<31>
                t1453: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1452:1
              t1454: i32 = sub Constant:i32<1>, t1453
            t1446: i32 = sub Constant:i32<1>, t1454
          t1447: i32,i32 = ARMISD::SUBC t1446, Constant:i32<1>
        t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1447:1
      t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t1448, t1084, undef:i32
    t567: ch = TokenFactor t564, t566
  t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
  t46: i32 = mul nsw t44, Constant:i32<5>
      t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t1442, FrameIndex:i32<7>, undef:i32
          t568: i32 = sra t46, Constant:i32<31>
                t1443: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1442:1
              t1444: i32 = sub Constant:i32<1>, t1443
            t1436: i32 = sub Constant:i32<1>, t1444
          t1437: i32,i32 = ARMISD::SUBC t1436, Constant:i32<1>
        t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1437:1
      t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t1438, t1083, undef:i32
    t574: ch = TokenFactor t571, t573
  t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
  t53: i32 = mul nsw t51, Constant:i32<6>
      t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t1432, FrameIndex:i32<8>, undef:i32
          t575: i32 = sra t53, Constant:i32<31>
                t1433: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1432:1
              t1434: i32 = sub Constant:i32<1>, t1433
            t1426: i32 = sub Constant:i32<1>, t1434
          t1427: i32,i32 = ARMISD::SUBC t1426, Constant:i32<1>
        t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1427:1
      t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t1428, t1082, undef:i32
    t581: ch = TokenFactor t578, t580
  t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
  t60: i32 = mul nsw t58, Constant:i32<7>
      t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t1422, FrameIndex:i32<9>, undef:i32
          t582: i32 = sra t60, Constant:i32<31>
                t1423: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1422:1
              t1424: i32 = sub Constant:i32<1>, t1423
            t1416: i32 = sub Constant:i32<1>, t1424
          t1417: i32,i32 = ARMISD::SUBC t1416, Constant:i32<1>
        t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1417:1
      t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t1418, t1081, undef:i32
    t588: ch = TokenFactor t585, t587
  t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
  t522: i32 = shl t65, Constant:i32<3>
      t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t1412, FrameIndex:i32<10>, undef:i32
          t589: i32 = sra t522, Constant:i32<31>
                t1413: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1412:1
              t1414: i32 = sub Constant:i32<1>, t1413
            t1406: i32 = sub Constant:i32<1>, t1414
          t1407: i32,i32 = ARMISD::SUBC t1406, Constant:i32<1>
        t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1407:1
      t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t1408, t1080, undef:i32
    t595: ch = TokenFactor t592, t594
  t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
  t74: i32 = mul nsw t72, Constant:i32<9>
      t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t1402, FrameIndex:i32<11>, undef:i32
          t596: i32 = sra t74, Constant:i32<31>
                t1403: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1402:1
              t1404: i32 = sub Constant:i32<1>, t1403
            t1396: i32 = sub Constant:i32<1>, t1404
          t1397: i32,i32 = ARMISD::SUBC t1396, Constant:i32<1>
        t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1397:1
      t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t1398, t1079, undef:i32
    t602: ch = TokenFactor t599, t601
  t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
  t81: i32 = mul nsw t79, Constant:i32<10>
      t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t1392, FrameIndex:i32<12>, undef:i32
          t603: i32 = sra t81, Constant:i32<31>
                t1393: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1392:1
              t1394: i32 = sub Constant:i32<1>, t1393
            t1386: i32 = sub Constant:i32<1>, t1394
          t1387: i32,i32 = ARMISD::SUBC t1386, Constant:i32<1>
        t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1387:1
      t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t1388, t1078, undef:i32
    t609: ch = TokenFactor t606, t608
  t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
  t88: i32 = mul nsw t86, Constant:i32<11>
      t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t1382, FrameIndex:i32<13>, undef:i32
          t610: i32 = sra t88, Constant:i32<31>
                t1383: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1382:1
              t1384: i32 = sub Constant:i32<1>, t1383
            t1376: i32 = sub Constant:i32<1>, t1384
          t1377: i32,i32 = ARMISD::SUBC t1376, Constant:i32<1>
        t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1377:1
      t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t1378, t1077, undef:i32
    t616: ch = TokenFactor t613, t615
  t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
  t95: i32 = mul nsw t93, Constant:i32<12>
      t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t1372, FrameIndex:i32<14>, undef:i32
          t617: i32 = sra t95, Constant:i32<31>
                t1373: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1372:1
              t1374: i32 = sub Constant:i32<1>, t1373
            t1366: i32 = sub Constant:i32<1>, t1374
          t1367: i32,i32 = ARMISD::SUBC t1366, Constant:i32<1>
        t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1367:1
      t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t1368, t1076, undef:i32
    t623: ch = TokenFactor t620, t622
  t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
  t102: i32 = mul nsw t100, Constant:i32<13>
      t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t1362, FrameIndex:i32<15>, undef:i32
          t624: i32 = sra t102, Constant:i32<31>
                t1363: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1362:1
              t1364: i32 = sub Constant:i32<1>, t1363
            t1356: i32 = sub Constant:i32<1>, t1364
          t1357: i32,i32 = ARMISD::SUBC t1356, Constant:i32<1>
        t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1357:1
      t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t1358, t1075, undef:i32
    t630: ch = TokenFactor t627, t629
  t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
  t109: i32 = mul nsw t107, Constant:i32<14>
      t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t1352, FrameIndex:i32<16>, undef:i32
          t631: i32 = sra t109, Constant:i32<31>
                t1353: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1352:1
              t1354: i32 = sub Constant:i32<1>, t1353
            t1346: i32 = sub Constant:i32<1>, t1354
          t1347: i32,i32 = ARMISD::SUBC t1346, Constant:i32<1>
        t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1347:1
      t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t1348, t1074, undef:i32
    t637: ch = TokenFactor t634, t636
  t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
  t116: i32 = mul nsw t114, Constant:i32<15>
      t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t1342, FrameIndex:i32<17>, undef:i32
          t638: i32 = sra t116, Constant:i32<31>
                t1343: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1342:1
              t1344: i32 = sub Constant:i32<1>, t1343
            t1336: i32 = sub Constant:i32<1>, t1344
          t1337: i32,i32 = ARMISD::SUBC t1336, Constant:i32<1>
        t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1337:1
      t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t1338, t1073, undef:i32
    t644: ch = TokenFactor t641, t643
  t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
  t511: i32 = shl t121, Constant:i32<4>
      t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t1332, FrameIndex:i32<18>, undef:i32
          t645: i32 = sra t511, Constant:i32<31>
                t1333: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1332:1
              t1334: i32 = sub Constant:i32<1>, t1333
            t1326: i32 = sub Constant:i32<1>, t1334
          t1327: i32,i32 = ARMISD::SUBC t1326, Constant:i32<1>
        t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1327:1
      t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t1328, t1072, undef:i32
    t651: ch = TokenFactor t648, t650
  t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
  t130: i32 = mul nsw t128, Constant:i32<17>
      t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t1322, FrameIndex:i32<19>, undef:i32
          t652: i32 = sra t130, Constant:i32<31>
                t1323: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1322:1
              t1324: i32 = sub Constant:i32<1>, t1323
            t1316: i32 = sub Constant:i32<1>, t1324
          t1317: i32,i32 = ARMISD::SUBC t1316, Constant:i32<1>
        t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1317:1
      t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t1318, t1071, undef:i32
    t658: ch = TokenFactor t655, t657
  t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
  t137: i32 = mul nsw t135, Constant:i32<18>
      t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t1312, FrameIndex:i32<20>, undef:i32
          t659: i32 = sra t137, Constant:i32<31>
                t1313: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1312:1
              t1314: i32 = sub Constant:i32<1>, t1313
            t1306: i32 = sub Constant:i32<1>, t1314
          t1307: i32,i32 = ARMISD::SUBC t1306, Constant:i32<1>
        t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1307:1
      t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t1308, t1070, undef:i32
    t665: ch = TokenFactor t662, t664
  t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
  t144: i32 = mul nsw t142, Constant:i32<19>
      t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t1302, FrameIndex:i32<21>, undef:i32
          t666: i32 = sra t144, Constant:i32<31>
                t1303: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1302:1
              t1304: i32 = sub Constant:i32<1>, t1303
            t1296: i32 = sub Constant:i32<1>, t1304
          t1297: i32,i32 = ARMISD::SUBC t1296, Constant:i32<1>
        t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1297:1
      t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t1298, t1069, undef:i32
    t672: ch = TokenFactor t669, t671
  t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
  t151: i32 = mul nsw t149, Constant:i32<20>
      t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t1292, FrameIndex:i32<22>, undef:i32
          t673: i32 = sra t151, Constant:i32<31>
                t1293: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1292:1
              t1294: i32 = sub Constant:i32<1>, t1293
            t1286: i32 = sub Constant:i32<1>, t1294
          t1287: i32,i32 = ARMISD::SUBC t1286, Constant:i32<1>
        t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1287:1
      t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t1288, t1068, undef:i32
    t679: ch = TokenFactor t676, t678
  t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
  t158: i32 = mul nsw t156, Constant:i32<21>
    t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t1282, FrameIndex:i32<23>, undef:i32
        t680: i32 = sra t158, Constant:i32<31>
              t1283: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1282:1
            t1284: i32 = sub Constant:i32<1>, t1283
          t1276: i32 = sub Constant:i32<1>, t1284
        t1277: i32,i32 = ARMISD::SUBC t1276, Constant:i32<1>
      t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1277:1
    t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t1278, t1067, undef:i32
  t686: ch = TokenFactor t683, t685
  t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32
  t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
  t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32
  t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
  t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32
  t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
  t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32
  t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
  t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32
  t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
  t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32
  t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
  t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32
  t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
  t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32
  t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
  t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32
  t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
  t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32
  t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
  t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32
  t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
  t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32
  t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
  t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32
  t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
  t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32
  t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
  t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32
  t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
  t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32
  t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
  t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32
  t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
  t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32
  t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
  t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32
  t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
  t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32
  t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
  t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32
  t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
  t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
  t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
    t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
    t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
    t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
    t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
  t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
  t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
  t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
  t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
    t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
    t165: i32 = add nsw t163, t164
  t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
  t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
  t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
  t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
    t690: i32 = xor t687, Constant:i32<-1>
  t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
  t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
  t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
  t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
  t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
    t691: i32 = xor t688, Constant:i32<-1>
  t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
  t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
  t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
  t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
  t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
  t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
  t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
  t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
  t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
  t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
  t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
  t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
  t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
    t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
    t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
  t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
  t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
  t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
  t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
  t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
  t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
              t869: i32 = and t866, t863
            t871: i32 = or t869, t860
          t873: i32 = or t871, t857
            t853: i32 = and t1239, t1246
          t855: i32 = and t853, t766
        t875: i32 = or t873, t855
          t739: i32 = and t1265, t1269
        t744: i32 = xor t741, t739
      t877: i32 = or t875, t744
    t879: i32 = or t877, t711
  t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
              t870: i32 = and t867, t864
            t872: i32 = or t870, t861
          t874: i32 = or t872, t858
                t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
                  t1240: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1239:1
                t1235: i32,i32 = ARMISD::SUBC t1240, Constant:i32<1>
              t1236: i32,i32 = ARMISD::ADDE t849, t843, t1235:1
                t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
                  t1247: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1246:1
                t1242: i32,i32 = ARMISD::SUBC t1247, Constant:i32<1>
              t1243: i32,i32 = ARMISD::ADDE t794, t773, t1242:1
            t854: i32 = and t1236, t1243
            t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
          t856: i32 = and t854, t767
        t876: i32 = or t874, t856
                      t1273: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1272:1
                    t1274: i32 = sub Constant:i32<1>, t1273
                  t1259: i32 = sub Constant:i32<1>, t1274
                t1260: i32,i32 = ARMISD::SUBC t1259, Constant:i32<1>
              t1261: i32,i32 = ARMISD::SUBE t733, t730, t1260:1
                    t1266: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1265:1
                  t1267: i32 = sub Constant:i32<1>, t1266
                t1249: i32 = sub Constant:i32<1>, t1267
              t1250: i32,i32 = ARMISD::SUBC t1249, Constant:i32<1>
            t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1250:1
                t1270: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1269:1
              t1255: i32,i32 = ARMISD::SUBC t1270, Constant:i32<1>
            t1256: i32,i32 = ARMISD::ADDE t722, t719, t1255:1
          t740: i32 = and t1251, t1256
        t745: i32 = xor t742, t740
      t878: i32 = or t876, t745
      t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
    t880: i32 = or t878, t712
  t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
  t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
  t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
      t868: ch = TokenFactor t866:1, t867:1
      t865: ch = TokenFactor t863:1, t864:1
      t862: ch = TokenFactor t860:1, t861:1
      t859: ch = TokenFactor t857:1, t858:1
      t850: ch = TokenFactor t848:1, t849:1
      t809: ch = TokenFactor t807:1, t808:1
      t806: ch = TokenFactor t804:1, t805:1
      t803: ch = TokenFactor t801:1, t802:1
      t780: ch = TokenFactor t778:1, t779:1
      t777: ch = TokenFactor t775:1, t776:1
      t774: ch = TokenFactor t772:1, t773:1
      t751: ch = TokenFactor t749:1, t750:1
      t748: ch = TokenFactor t746:1, t747:1
      t743: ch = TokenFactor t741:1, t742:1
      t734: ch = TokenFactor t732:1, t733:1
      t731: ch = TokenFactor t729:1, t730:1
      t728: ch = TokenFactor t726:1, t727:1
      t723: ch = TokenFactor t721:1, t722:1
      t720: ch = TokenFactor t718:1, t719:1
      t694: ch = TokenFactor t692:1, t693:1
      t689: ch = TokenFactor t687:1, t688:1
    t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
    t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
  t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
  t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32
  t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
  t901: ch = TokenFactor t899:1, t900:1
        t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t1232, FrameIndex:i32<3>, undef:i32
        t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t1229, t1087, undef:i32
      t906: ch = TokenFactor t904, t905
    t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
  t227: ch,glue = CopyToReg t223, Register:i32 $r0, t1488
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1
  t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
  t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
  t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
  t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32
  t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
  t909: ch = TokenFactor t907:1, t908:1
        t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t1225, FrameIndex:i32<4>, undef:i32
        t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t1222, t1086, undef:i32
      t914: ch = TokenFactor t912, t913
    t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
  t245: ch,glue = CopyToReg t243, Register:i32 $r0, t1488
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1
  t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
  t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
  t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
  t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32
  t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
  t917: ch = TokenFactor t915:1, t916:1
        t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t1218, FrameIndex:i32<5>, undef:i32
        t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t1215, t1085, undef:i32
      t922: ch = TokenFactor t920, t921
    t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
  t258: ch,glue = CopyToReg t256, Register:i32 $r0, t1488
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1
  t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
  t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
  t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
  t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32
  t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
  t925: ch = TokenFactor t923:1, t924:1
        t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t1211, FrameIndex:i32<6>, undef:i32
        t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t1208, t1084, undef:i32
      t930: ch = TokenFactor t928, t929
    t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
  t271: ch,glue = CopyToReg t269, Register:i32 $r0, t1488
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1
  t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
  t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
  t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
  t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32
  t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
  t933: ch = TokenFactor t931:1, t932:1
        t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t1204, FrameIndex:i32<7>, undef:i32
        t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t1201, t1083, undef:i32
      t938: ch = TokenFactor t936, t937
    t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
  t284: ch,glue = CopyToReg t282, Register:i32 $r0, t1488
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1
  t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
  t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
  t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
  t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32
  t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
  t941: ch = TokenFactor t939:1, t940:1
        t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t1197, FrameIndex:i32<8>, undef:i32
        t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t1194, t1082, undef:i32
      t946: ch = TokenFactor t944, t945
    t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
  t297: ch,glue = CopyToReg t295, Register:i32 $r0, t1488
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1
  t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
  t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
  t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
  t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32
  t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
  t949: ch = TokenFactor t947:1, t948:1
        t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t1190, FrameIndex:i32<9>, undef:i32
        t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t1187, t1081, undef:i32
      t954: ch = TokenFactor t952, t953
    t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
  t310: ch,glue = CopyToReg t308, Register:i32 $r0, t1488
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1
  t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
  t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
  t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
  t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32
  t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
  t957: ch = TokenFactor t955:1, t956:1
        t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t1183, FrameIndex:i32<10>, undef:i32
        t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t1180, t1080, undef:i32
      t962: ch = TokenFactor t960, t961
    t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
  t323: ch,glue = CopyToReg t321, Register:i32 $r0, t1488
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1
  t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
  t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
  t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
  t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32
  t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
  t965: ch = TokenFactor t963:1, t964:1
        t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t1176, FrameIndex:i32<11>, undef:i32
        t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t1173, t1079, undef:i32
      t970: ch = TokenFactor t968, t969
    t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
  t336: ch,glue = CopyToReg t334, Register:i32 $r0, t1488
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1
  t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
  t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
  t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
  t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32
  t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
  t973: ch = TokenFactor t971:1, t972:1
        t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t1169, FrameIndex:i32<12>, undef:i32
        t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t1166, t1078, undef:i32
      t978: ch = TokenFactor t976, t977
    t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
  t349: ch,glue = CopyToReg t347, Register:i32 $r0, t1488
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1
  t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
  t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
  t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
  t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32
  t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
  t981: ch = TokenFactor t979:1, t980:1
        t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t1162, FrameIndex:i32<13>, undef:i32
        t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t1159, t1077, undef:i32
      t986: ch = TokenFactor t984, t985
    t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
  t362: ch,glue = CopyToReg t360, Register:i32 $r0, t1488
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1
  t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
  t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
  t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
  t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32
  t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
  t989: ch = TokenFactor t987:1, t988:1
        t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t1155, FrameIndex:i32<14>, undef:i32
        t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t1152, t1076, undef:i32
      t994: ch = TokenFactor t992, t993
    t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
  t375: ch,glue = CopyToReg t373, Register:i32 $r0, t1488
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1
  t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
  t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
  t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
  t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32
  t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
  t997: ch = TokenFactor t995:1, t996:1
        t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t1148, FrameIndex:i32<15>, undef:i32
        t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t1145, t1075, undef:i32
      t1002: ch = TokenFactor t1000, t1001
    t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
  t388: ch,glue = CopyToReg t386, Register:i32 $r0, t1488
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1
  t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
  t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
  t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
  t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32
  t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
  t1005: ch = TokenFactor t1003:1, t1004:1
        t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1141, FrameIndex:i32<16>, undef:i32
        t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1138, t1074, undef:i32
      t1010: ch = TokenFactor t1008, t1009
    t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
  t401: ch,glue = CopyToReg t399, Register:i32 $r0, t1488
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1
  t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
  t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
  t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
  t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32
  t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
  t1013: ch = TokenFactor t1011:1, t1012:1
        t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1134, FrameIndex:i32<17>, undef:i32
        t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1131, t1073, undef:i32
      t1018: ch = TokenFactor t1016, t1017
    t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
  t414: ch,glue = CopyToReg t412, Register:i32 $r0, t1488
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1
  t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
  t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
  t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
  t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32
  t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
  t1021: ch = TokenFactor t1019:1, t1020:1
        t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1127, FrameIndex:i32<18>, undef:i32
        t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1124, t1072, undef:i32
      t1026: ch = TokenFactor t1024, t1025
    t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
  t427: ch,glue = CopyToReg t425, Register:i32 $r0, t1488
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1
  t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
  t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
  t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
  t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32
  t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
  t1029: ch = TokenFactor t1027:1, t1028:1
        t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1120, FrameIndex:i32<19>, undef:i32
        t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1117, t1071, undef:i32
      t1034: ch = TokenFactor t1032, t1033
    t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
  t440: ch,glue = CopyToReg t438, Register:i32 $r0, t1488
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1
  t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
  t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
  t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
  t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32
  t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
  t1037: ch = TokenFactor t1035:1, t1036:1
        t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1113, FrameIndex:i32<20>, undef:i32
        t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1110, t1070, undef:i32
      t1042: ch = TokenFactor t1040, t1041
    t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
  t453: ch,glue = CopyToReg t451, Register:i32 $r0, t1488
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1
  t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
  t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
  t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
  t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32
  t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
  t1045: ch = TokenFactor t1043:1, t1044:1
        t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1106, FrameIndex:i32<21>, undef:i32
        t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1103, t1069, undef:i32
      t1050: ch = TokenFactor t1048, t1049
    t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
  t466: ch,glue = CopyToReg t464, Register:i32 $r0, t1488
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1
  t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
  t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
  t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
  t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32
  t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
  t1053: ch = TokenFactor t1051:1, t1052:1
        t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1099, FrameIndex:i32<22>, undef:i32
        t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1096, t1068, undef:i32
      t1058: ch = TokenFactor t1056, t1057
    t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
  t479: ch,glue = CopyToReg t477, Register:i32 $r0, t1488
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1
  t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
  t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
  t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
  t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32
  t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
  t1061: ch = TokenFactor t1059:1, t1060:1
        t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1092, FrameIndex:i32<23>, undef:i32
        t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1089, t1067, undef:i32
      t1066: ch = TokenFactor t1064, t1065
    t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
  t492: ch,glue = CopyToReg t490, Register:i32 $r0, t1488
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1
  t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
  t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
  t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
    t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
      t1093: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1092:1
    t1088: i32,i32 = ARMISD::SUBC t1093, Constant:i32<1>
  t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1088:1
  t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
      t1100: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1099:1
    t1095: i32,i32 = ARMISD::SUBC t1100, Constant:i32<1>
  t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1095:1
  t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
      t1107: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1106:1
    t1102: i32,i32 = ARMISD::SUBC t1107, Constant:i32<1>
  t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1102:1
  t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
      t1114: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1113:1
    t1109: i32,i32 = ARMISD::SUBC t1114, Constant:i32<1>
  t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1109:1
  t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
      t1121: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1120:1
    t1116: i32,i32 = ARMISD::SUBC t1121, Constant:i32<1>
  t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1116:1
  t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
      t1128: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1127:1
    t1123: i32,i32 = ARMISD::SUBC t1128, Constant:i32<1>
  t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1123:1
  t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
      t1135: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1134:1
    t1130: i32,i32 = ARMISD::SUBC t1135, Constant:i32<1>
  t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1130:1
  t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
      t1142: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1141:1
    t1137: i32,i32 = ARMISD::SUBC t1142, Constant:i32<1>
  t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1137:1
  t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
      t1149: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1148:1
    t1144: i32,i32 = ARMISD::SUBC t1149, Constant:i32<1>
  t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1144:1
  t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
      t1156: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1155:1
    t1151: i32,i32 = ARMISD::SUBC t1156, Constant:i32<1>
  t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1151:1
  t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
      t1163: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1162:1
    t1158: i32,i32 = ARMISD::SUBC t1163, Constant:i32<1>
  t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1158:1
  t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
      t1170: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1169:1
    t1165: i32,i32 = ARMISD::SUBC t1170, Constant:i32<1>
  t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1165:1
  t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
      t1177: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1176:1
    t1172: i32,i32 = ARMISD::SUBC t1177, Constant:i32<1>
  t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1172:1
  t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
      t1184: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1183:1
    t1179: i32,i32 = ARMISD::SUBC t1184, Constant:i32<1>
  t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1179:1
  t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
      t1191: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1190:1
    t1186: i32,i32 = ARMISD::SUBC t1191, Constant:i32<1>
  t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1186:1
  t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
      t1198: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1197:1
    t1193: i32,i32 = ARMISD::SUBC t1198, Constant:i32<1>
  t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1193:1
  t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
      t1205: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1204:1
    t1200: i32,i32 = ARMISD::SUBC t1205, Constant:i32<1>
  t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1200:1
  t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
      t1212: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1211:1
    t1207: i32,i32 = ARMISD::SUBC t1212, Constant:i32<1>
  t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1207:1
  t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
      t1219: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1218:1
    t1214: i32,i32 = ARMISD::SUBC t1219, Constant:i32<1>
  t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1214:1
  t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
      t1226: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1225:1
    t1221: i32,i32 = ARMISD::SUBC t1226, Constant:i32<1>
  t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1221:1
  t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
      t1233: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1232:1
    t1228: i32,i32 = ARMISD::SUBC t1233, Constant:i32<1>
  t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1228:1
  t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
  t1239: i32,i32 = ARMISD::ADDC t848, t842
  t1246: i32,i32 = ARMISD::ADDC t793, t772
  t1265: i32,i32 = ARMISD::SUBC t1272, t726
  t1269: i32,i32 = ARMISD::ADDC t721, t718
  t1272: i32,i32 = ARMISD::SUBC t732, t729
  t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
  t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
  t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
  t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
  t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
  t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
  t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
  t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
  t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
  t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
  t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
  t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
  t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
  t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
  t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
  t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
  t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
  t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
  t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
  t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
  t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
    t1487: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
  t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32
  t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1



Legalizing: t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32
Legalizing non-extending load operation

Combining: t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32

Legalizing: t1487: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
Legal node: nothing to do

Combining: t1487: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0

Legalizing: t1486: i32 = TargetConstantPool<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
Legal node: nothing to do

Combining: t1486: i32 = TargetConstantPool<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0

Legalizing: t1484: i32 = sub Constant:i32<1>, t1483
Legal node: nothing to do

Combining: t1484: i32 = sub Constant:i32<1>, t1483
Creating new node: t1489: i32 = xor t1483, Constant:i32<1>
 ... into: t1489: i32 = xor t1483, Constant:i32<1>

Legalizing: t1489: i32 = xor t1483, Constant:i32<1>
Legal node: nothing to do

Combining: t1489: i32 = xor t1483, Constant:i32<1>

Legalizing: t1483: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1482:1
Legal node: nothing to do

Combining: t1483: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1482:1

Legalizing: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
Legal node: nothing to do

Combining: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538

Legalizing: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1477:1
Legal node: nothing to do

Combining: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1477:1

Legalizing: t1477: i32,i32 = ARMISD::SUBC t1476, Constant:i32<1>
Legal node: nothing to do

Combining: t1477: i32,i32 = ARMISD::SUBC t1476, Constant:i32<1>

Legalizing: t1476: i32 = sub Constant:i32<1>, t1489
Legal node: nothing to do

Combining: t1476: i32 = sub Constant:i32<1>, t1489
Creating new node: t1490: i32 = xor t1489, Constant:i32<1>
 ... into: t1490: i32 = xor t1489, Constant:i32<1>

Legalizing: t1489: i32 = xor t1483, Constant:i32<1>
Legal node: nothing to do

Combining: t1489: i32 = xor t1483, Constant:i32<1>

Legalizing: t1477: i32,i32 = ARMISD::SUBC t1490, Constant:i32<1>
Legal node: nothing to do

Combining: t1477: i32,i32 = ARMISD::SUBC t1490, Constant:i32<1>

Legalizing: t1490: i32 = xor t1489, Constant:i32<1>
Legal node: nothing to do

Combining: t1490: i32 = xor t1489, Constant:i32<1>
 ... into: t1483: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1482:1

Legalizing: t1477: i32,i32 = ARMISD::SUBC t1483, Constant:i32<1>
Legal node: nothing to do

Combining: t1477: i32,i32 = ARMISD::SUBC t1483, Constant:i32<1>

Replacing.1 t1477: i32,i32 = ARMISD::SUBC t1483, Constant:i32<1>

With: t1477: i32,i32 = ARMISD::SUBC t1483, Constant:i32<1>
 and 1 other values

Legalizing: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
Legal node: nothing to do

Combining: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538

Legalizing: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1482:1
Legal node: nothing to do

Combining: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1482:1

Legalizing: t1474: i32 = sub Constant:i32<1>, t1473
Legal node: nothing to do

Combining: t1474: i32 = sub Constant:i32<1>, t1473
Creating new node: t1491: i32 = xor t1473, Constant:i32<1>
 ... into: t1491: i32 = xor t1473, Constant:i32<1>

Legalizing: t1491: i32 = xor t1473, Constant:i32<1>
Legal node: nothing to do

Combining: t1491: i32 = xor t1473, Constant:i32<1>

Legalizing: t1473: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1472:1
Legal node: nothing to do

Combining: t1473: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1472:1

Legalizing: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
Legal node: nothing to do

Combining: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534

Legalizing: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1467:1
Legal node: nothing to do

Combining: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1467:1

Legalizing: t1467: i32,i32 = ARMISD::SUBC t1466, Constant:i32<1>
Legal node: nothing to do

Combining: t1467: i32,i32 = ARMISD::SUBC t1466, Constant:i32<1>

Legalizing: t1466: i32 = sub Constant:i32<1>, t1491
Legal node: nothing to do

Combining: t1466: i32 = sub Constant:i32<1>, t1491
Creating new node: t1492: i32 = xor t1491, Constant:i32<1>
 ... into: t1492: i32 = xor t1491, Constant:i32<1>

Legalizing: t1491: i32 = xor t1473, Constant:i32<1>
Legal node: nothing to do

Combining: t1491: i32 = xor t1473, Constant:i32<1>

Legalizing: t1467: i32,i32 = ARMISD::SUBC t1492, Constant:i32<1>
Legal node: nothing to do

Combining: t1467: i32,i32 = ARMISD::SUBC t1492, Constant:i32<1>

Legalizing: t1492: i32 = xor t1491, Constant:i32<1>
Legal node: nothing to do

Combining: t1492: i32 = xor t1491, Constant:i32<1>
 ... into: t1473: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1472:1

Legalizing: t1467: i32,i32 = ARMISD::SUBC t1473, Constant:i32<1>
Legal node: nothing to do

Combining: t1467: i32,i32 = ARMISD::SUBC t1473, Constant:i32<1>

Replacing.1 t1467: i32,i32 = ARMISD::SUBC t1473, Constant:i32<1>

With: t1467: i32,i32 = ARMISD::SUBC t1473, Constant:i32<1>
 and 1 other values

Legalizing: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
Legal node: nothing to do

Combining: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534

Legalizing: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1472:1
Legal node: nothing to do

Combining: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1472:1

Legalizing: t1464: i32 = sub Constant:i32<1>, t1463
Legal node: nothing to do

Combining: t1464: i32 = sub Constant:i32<1>, t1463
Creating new node: t1493: i32 = xor t1463, Constant:i32<1>
 ... into: t1493: i32 = xor t1463, Constant:i32<1>

Legalizing: t1493: i32 = xor t1463, Constant:i32<1>
Legal node: nothing to do

Combining: t1493: i32 = xor t1463, Constant:i32<1>

Legalizing: t1463: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1462:1
Legal node: nothing to do

Combining: t1463: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1462:1

Legalizing: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
Legal node: nothing to do

Combining: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32

Legalizing: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1457:1
Legal node: nothing to do

Combining: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1457:1

Legalizing: t1457: i32,i32 = ARMISD::SUBC t1456, Constant:i32<1>
Legal node: nothing to do

Combining: t1457: i32,i32 = ARMISD::SUBC t1456, Constant:i32<1>

Legalizing: t1456: i32 = sub Constant:i32<1>, t1493
Legal node: nothing to do

Combining: t1456: i32 = sub Constant:i32<1>, t1493
Creating new node: t1494: i32 = xor t1493, Constant:i32<1>
 ... into: t1494: i32 = xor t1493, Constant:i32<1>

Legalizing: t1493: i32 = xor t1463, Constant:i32<1>
Legal node: nothing to do

Combining: t1493: i32 = xor t1463, Constant:i32<1>

Legalizing: t1457: i32,i32 = ARMISD::SUBC t1494, Constant:i32<1>
Legal node: nothing to do

Combining: t1457: i32,i32 = ARMISD::SUBC t1494, Constant:i32<1>

Legalizing: t1494: i32 = xor t1493, Constant:i32<1>
Legal node: nothing to do

Combining: t1494: i32 = xor t1493, Constant:i32<1>
 ... into: t1463: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1462:1

Legalizing: t1457: i32,i32 = ARMISD::SUBC t1463, Constant:i32<1>
Legal node: nothing to do

Combining: t1457: i32,i32 = ARMISD::SUBC t1463, Constant:i32<1>

Replacing.1 t1457: i32,i32 = ARMISD::SUBC t1463, Constant:i32<1>

With: t1457: i32,i32 = ARMISD::SUBC t1463, Constant:i32<1>
 and 1 other values

Legalizing: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
Legal node: nothing to do

Combining: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32

Legalizing: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1462:1
Legal node: nothing to do

Combining: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1462:1

Legalizing: t1454: i32 = sub Constant:i32<1>, t1453
Legal node: nothing to do

Combining: t1454: i32 = sub Constant:i32<1>, t1453
Creating new node: t1495: i32 = xor t1453, Constant:i32<1>
 ... into: t1495: i32 = xor t1453, Constant:i32<1>

Legalizing: t1495: i32 = xor t1453, Constant:i32<1>
Legal node: nothing to do

Combining: t1495: i32 = xor t1453, Constant:i32<1>

Legalizing: t1453: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1452:1
Legal node: nothing to do

Combining: t1453: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1452:1

Legalizing: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
Legal node: nothing to do

Combining: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529

Legalizing: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1447:1
Legal node: nothing to do

Combining: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1447:1

Legalizing: t1447: i32,i32 = ARMISD::SUBC t1446, Constant:i32<1>
Legal node: nothing to do

Combining: t1447: i32,i32 = ARMISD::SUBC t1446, Constant:i32<1>

Legalizing: t1446: i32 = sub Constant:i32<1>, t1495
Legal node: nothing to do

Combining: t1446: i32 = sub Constant:i32<1>, t1495
Creating new node: t1496: i32 = xor t1495, Constant:i32<1>
 ... into: t1496: i32 = xor t1495, Constant:i32<1>

Legalizing: t1495: i32 = xor t1453, Constant:i32<1>
Legal node: nothing to do

Combining: t1495: i32 = xor t1453, Constant:i32<1>

Legalizing: t1447: i32,i32 = ARMISD::SUBC t1496, Constant:i32<1>
Legal node: nothing to do

Combining: t1447: i32,i32 = ARMISD::SUBC t1496, Constant:i32<1>

Legalizing: t1496: i32 = xor t1495, Constant:i32<1>
Legal node: nothing to do

Combining: t1496: i32 = xor t1495, Constant:i32<1>
 ... into: t1453: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1452:1

Legalizing: t1447: i32,i32 = ARMISD::SUBC t1453, Constant:i32<1>
Legal node: nothing to do

Combining: t1447: i32,i32 = ARMISD::SUBC t1453, Constant:i32<1>

Replacing.1 t1447: i32,i32 = ARMISD::SUBC t1453, Constant:i32<1>

With: t1447: i32,i32 = ARMISD::SUBC t1453, Constant:i32<1>
 and 1 other values

Legalizing: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
Legal node: nothing to do

Combining: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529

Legalizing: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1452:1
Legal node: nothing to do

Combining: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1452:1

Legalizing: t1444: i32 = sub Constant:i32<1>, t1443
Legal node: nothing to do

Combining: t1444: i32 = sub Constant:i32<1>, t1443
Creating new node: t1497: i32 = xor t1443, Constant:i32<1>
 ... into: t1497: i32 = xor t1443, Constant:i32<1>

Legalizing: t1497: i32 = xor t1443, Constant:i32<1>
Legal node: nothing to do

Combining: t1497: i32 = xor t1443, Constant:i32<1>

Legalizing: t1443: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1442:1
Legal node: nothing to do

Combining: t1443: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1442:1

Legalizing: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
Legal node: nothing to do

Combining: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46

Legalizing: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1437:1
Legal node: nothing to do

Combining: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1437:1

Legalizing: t1437: i32,i32 = ARMISD::SUBC t1436, Constant:i32<1>
Legal node: nothing to do

Combining: t1437: i32,i32 = ARMISD::SUBC t1436, Constant:i32<1>

Legalizing: t1436: i32 = sub Constant:i32<1>, t1497
Legal node: nothing to do

Combining: t1436: i32 = sub Constant:i32<1>, t1497
Creating new node: t1498: i32 = xor t1497, Constant:i32<1>
 ... into: t1498: i32 = xor t1497, Constant:i32<1>

Legalizing: t1497: i32 = xor t1443, Constant:i32<1>
Legal node: nothing to do

Combining: t1497: i32 = xor t1443, Constant:i32<1>

Legalizing: t1437: i32,i32 = ARMISD::SUBC t1498, Constant:i32<1>
Legal node: nothing to do

Combining: t1437: i32,i32 = ARMISD::SUBC t1498, Constant:i32<1>

Legalizing: t1498: i32 = xor t1497, Constant:i32<1>
Legal node: nothing to do

Combining: t1498: i32 = xor t1497, Constant:i32<1>
 ... into: t1443: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1442:1

Legalizing: t1437: i32,i32 = ARMISD::SUBC t1443, Constant:i32<1>
Legal node: nothing to do

Combining: t1437: i32,i32 = ARMISD::SUBC t1443, Constant:i32<1>

Replacing.1 t1437: i32,i32 = ARMISD::SUBC t1443, Constant:i32<1>

With: t1437: i32,i32 = ARMISD::SUBC t1443, Constant:i32<1>
 and 1 other values

Legalizing: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
Legal node: nothing to do

Combining: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46

Legalizing: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1442:1
Legal node: nothing to do

Combining: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1442:1

Legalizing: t1434: i32 = sub Constant:i32<1>, t1433
Legal node: nothing to do

Combining: t1434: i32 = sub Constant:i32<1>, t1433
Creating new node: t1499: i32 = xor t1433, Constant:i32<1>
 ... into: t1499: i32 = xor t1433, Constant:i32<1>

Legalizing: t1499: i32 = xor t1433, Constant:i32<1>
Legal node: nothing to do

Combining: t1499: i32 = xor t1433, Constant:i32<1>

Legalizing: t1433: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1432:1
Legal node: nothing to do

Combining: t1433: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1432:1

Legalizing: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
Legal node: nothing to do

Combining: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53

Legalizing: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1427:1
Legal node: nothing to do

Combining: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1427:1

Legalizing: t1427: i32,i32 = ARMISD::SUBC t1426, Constant:i32<1>
Legal node: nothing to do

Combining: t1427: i32,i32 = ARMISD::SUBC t1426, Constant:i32<1>

Legalizing: t1426: i32 = sub Constant:i32<1>, t1499
Legal node: nothing to do

Combining: t1426: i32 = sub Constant:i32<1>, t1499
Creating new node: t1500: i32 = xor t1499, Constant:i32<1>
 ... into: t1500: i32 = xor t1499, Constant:i32<1>

Legalizing: t1499: i32 = xor t1433, Constant:i32<1>
Legal node: nothing to do

Combining: t1499: i32 = xor t1433, Constant:i32<1>

Legalizing: t1427: i32,i32 = ARMISD::SUBC t1500, Constant:i32<1>
Legal node: nothing to do

Combining: t1427: i32,i32 = ARMISD::SUBC t1500, Constant:i32<1>

Legalizing: t1500: i32 = xor t1499, Constant:i32<1>
Legal node: nothing to do

Combining: t1500: i32 = xor t1499, Constant:i32<1>
 ... into: t1433: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1432:1

Legalizing: t1427: i32,i32 = ARMISD::SUBC t1433, Constant:i32<1>
Legal node: nothing to do

Combining: t1427: i32,i32 = ARMISD::SUBC t1433, Constant:i32<1>

Replacing.1 t1427: i32,i32 = ARMISD::SUBC t1433, Constant:i32<1>

With: t1427: i32,i32 = ARMISD::SUBC t1433, Constant:i32<1>
 and 1 other values

Legalizing: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
Legal node: nothing to do

Combining: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53

Legalizing: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1432:1
Legal node: nothing to do

Combining: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1432:1

Legalizing: t1424: i32 = sub Constant:i32<1>, t1423
Legal node: nothing to do

Combining: t1424: i32 = sub Constant:i32<1>, t1423
Creating new node: t1501: i32 = xor t1423, Constant:i32<1>
 ... into: t1501: i32 = xor t1423, Constant:i32<1>

Legalizing: t1501: i32 = xor t1423, Constant:i32<1>
Legal node: nothing to do

Combining: t1501: i32 = xor t1423, Constant:i32<1>

Legalizing: t1423: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1422:1
Legal node: nothing to do

Combining: t1423: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1422:1

Legalizing: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
Legal node: nothing to do

Combining: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60

Legalizing: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1417:1
Legal node: nothing to do

Combining: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1417:1

Legalizing: t1417: i32,i32 = ARMISD::SUBC t1416, Constant:i32<1>
Legal node: nothing to do

Combining: t1417: i32,i32 = ARMISD::SUBC t1416, Constant:i32<1>

Legalizing: t1416: i32 = sub Constant:i32<1>, t1501
Legal node: nothing to do

Combining: t1416: i32 = sub Constant:i32<1>, t1501
Creating new node: t1502: i32 = xor t1501, Constant:i32<1>
 ... into: t1502: i32 = xor t1501, Constant:i32<1>

Legalizing: t1501: i32 = xor t1423, Constant:i32<1>
Legal node: nothing to do

Combining: t1501: i32 = xor t1423, Constant:i32<1>

Legalizing: t1417: i32,i32 = ARMISD::SUBC t1502, Constant:i32<1>
Legal node: nothing to do

Combining: t1417: i32,i32 = ARMISD::SUBC t1502, Constant:i32<1>

Legalizing: t1502: i32 = xor t1501, Constant:i32<1>
Legal node: nothing to do

Combining: t1502: i32 = xor t1501, Constant:i32<1>
 ... into: t1423: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1422:1

Legalizing: t1417: i32,i32 = ARMISD::SUBC t1423, Constant:i32<1>
Legal node: nothing to do

Combining: t1417: i32,i32 = ARMISD::SUBC t1423, Constant:i32<1>

Replacing.1 t1417: i32,i32 = ARMISD::SUBC t1423, Constant:i32<1>

With: t1417: i32,i32 = ARMISD::SUBC t1423, Constant:i32<1>
 and 1 other values

Legalizing: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
Legal node: nothing to do

Combining: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60

Legalizing: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1422:1
Legal node: nothing to do

Combining: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1422:1

Legalizing: t1414: i32 = sub Constant:i32<1>, t1413
Legal node: nothing to do

Combining: t1414: i32 = sub Constant:i32<1>, t1413
Creating new node: t1503: i32 = xor t1413, Constant:i32<1>
 ... into: t1503: i32 = xor t1413, Constant:i32<1>

Legalizing: t1503: i32 = xor t1413, Constant:i32<1>
Legal node: nothing to do

Combining: t1503: i32 = xor t1413, Constant:i32<1>

Legalizing: t1413: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1412:1
Legal node: nothing to do

Combining: t1413: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1412:1

Legalizing: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
Legal node: nothing to do

Combining: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522

Legalizing: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1407:1
Legal node: nothing to do

Combining: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1407:1

Legalizing: t1407: i32,i32 = ARMISD::SUBC t1406, Constant:i32<1>
Legal node: nothing to do

Combining: t1407: i32,i32 = ARMISD::SUBC t1406, Constant:i32<1>

Legalizing: t1406: i32 = sub Constant:i32<1>, t1503
Legal node: nothing to do

Combining: t1406: i32 = sub Constant:i32<1>, t1503
Creating new node: t1504: i32 = xor t1503, Constant:i32<1>
 ... into: t1504: i32 = xor t1503, Constant:i32<1>

Legalizing: t1503: i32 = xor t1413, Constant:i32<1>
Legal node: nothing to do

Combining: t1503: i32 = xor t1413, Constant:i32<1>

Legalizing: t1407: i32,i32 = ARMISD::SUBC t1504, Constant:i32<1>
Legal node: nothing to do

Combining: t1407: i32,i32 = ARMISD::SUBC t1504, Constant:i32<1>

Legalizing: t1504: i32 = xor t1503, Constant:i32<1>
Legal node: nothing to do

Combining: t1504: i32 = xor t1503, Constant:i32<1>
 ... into: t1413: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1412:1

Legalizing: t1407: i32,i32 = ARMISD::SUBC t1413, Constant:i32<1>
Legal node: nothing to do

Combining: t1407: i32,i32 = ARMISD::SUBC t1413, Constant:i32<1>

Replacing.1 t1407: i32,i32 = ARMISD::SUBC t1413, Constant:i32<1>

With: t1407: i32,i32 = ARMISD::SUBC t1413, Constant:i32<1>
 and 1 other values

Legalizing: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
Legal node: nothing to do

Combining: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522

Legalizing: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1412:1
Legal node: nothing to do

Combining: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1412:1

Legalizing: t1404: i32 = sub Constant:i32<1>, t1403
Legal node: nothing to do

Combining: t1404: i32 = sub Constant:i32<1>, t1403
Creating new node: t1505: i32 = xor t1403, Constant:i32<1>
 ... into: t1505: i32 = xor t1403, Constant:i32<1>

Legalizing: t1505: i32 = xor t1403, Constant:i32<1>
Legal node: nothing to do

Combining: t1505: i32 = xor t1403, Constant:i32<1>

Legalizing: t1403: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1402:1
Legal node: nothing to do

Combining: t1403: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1402:1

Legalizing: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
Legal node: nothing to do

Combining: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74

Legalizing: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1397:1
Legal node: nothing to do

Combining: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1397:1

Legalizing: t1397: i32,i32 = ARMISD::SUBC t1396, Constant:i32<1>
Legal node: nothing to do

Combining: t1397: i32,i32 = ARMISD::SUBC t1396, Constant:i32<1>

Legalizing: t1396: i32 = sub Constant:i32<1>, t1505
Legal node: nothing to do

Combining: t1396: i32 = sub Constant:i32<1>, t1505
Creating new node: t1506: i32 = xor t1505, Constant:i32<1>
 ... into: t1506: i32 = xor t1505, Constant:i32<1>

Legalizing: t1505: i32 = xor t1403, Constant:i32<1>
Legal node: nothing to do

Combining: t1505: i32 = xor t1403, Constant:i32<1>

Legalizing: t1397: i32,i32 = ARMISD::SUBC t1506, Constant:i32<1>
Legal node: nothing to do

Combining: t1397: i32,i32 = ARMISD::SUBC t1506, Constant:i32<1>

Legalizing: t1506: i32 = xor t1505, Constant:i32<1>
Legal node: nothing to do

Combining: t1506: i32 = xor t1505, Constant:i32<1>
 ... into: t1403: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1402:1

Legalizing: t1397: i32,i32 = ARMISD::SUBC t1403, Constant:i32<1>
Legal node: nothing to do

Combining: t1397: i32,i32 = ARMISD::SUBC t1403, Constant:i32<1>

Replacing.1 t1397: i32,i32 = ARMISD::SUBC t1403, Constant:i32<1>

With: t1397: i32,i32 = ARMISD::SUBC t1403, Constant:i32<1>
 and 1 other values

Legalizing: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
Legal node: nothing to do

Combining: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74

Legalizing: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1402:1
Legal node: nothing to do

Combining: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1402:1

Legalizing: t1394: i32 = sub Constant:i32<1>, t1393
Legal node: nothing to do

Combining: t1394: i32 = sub Constant:i32<1>, t1393
Creating new node: t1507: i32 = xor t1393, Constant:i32<1>
 ... into: t1507: i32 = xor t1393, Constant:i32<1>

Legalizing: t1507: i32 = xor t1393, Constant:i32<1>
Legal node: nothing to do

Combining: t1507: i32 = xor t1393, Constant:i32<1>

Legalizing: t1393: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1392:1
Legal node: nothing to do

Combining: t1393: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1392:1

Legalizing: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
Legal node: nothing to do

Combining: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81

Legalizing: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1387:1
Legal node: nothing to do

Combining: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1387:1

Legalizing: t1387: i32,i32 = ARMISD::SUBC t1386, Constant:i32<1>
Legal node: nothing to do

Combining: t1387: i32,i32 = ARMISD::SUBC t1386, Constant:i32<1>

Legalizing: t1386: i32 = sub Constant:i32<1>, t1507
Legal node: nothing to do

Combining: t1386: i32 = sub Constant:i32<1>, t1507
Creating new node: t1508: i32 = xor t1507, Constant:i32<1>
 ... into: t1508: i32 = xor t1507, Constant:i32<1>

Legalizing: t1507: i32 = xor t1393, Constant:i32<1>
Legal node: nothing to do

Combining: t1507: i32 = xor t1393, Constant:i32<1>

Legalizing: t1387: i32,i32 = ARMISD::SUBC t1508, Constant:i32<1>
Legal node: nothing to do

Combining: t1387: i32,i32 = ARMISD::SUBC t1508, Constant:i32<1>

Legalizing: t1508: i32 = xor t1507, Constant:i32<1>
Legal node: nothing to do

Combining: t1508: i32 = xor t1507, Constant:i32<1>
 ... into: t1393: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1392:1

Legalizing: t1387: i32,i32 = ARMISD::SUBC t1393, Constant:i32<1>
Legal node: nothing to do

Combining: t1387: i32,i32 = ARMISD::SUBC t1393, Constant:i32<1>

Replacing.1 t1387: i32,i32 = ARMISD::SUBC t1393, Constant:i32<1>

With: t1387: i32,i32 = ARMISD::SUBC t1393, Constant:i32<1>
 and 1 other values

Legalizing: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
Legal node: nothing to do

Combining: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81

Legalizing: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1392:1
Legal node: nothing to do

Combining: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1392:1

Legalizing: t1384: i32 = sub Constant:i32<1>, t1383
Legal node: nothing to do

Combining: t1384: i32 = sub Constant:i32<1>, t1383
Creating new node: t1509: i32 = xor t1383, Constant:i32<1>
 ... into: t1509: i32 = xor t1383, Constant:i32<1>

Legalizing: t1509: i32 = xor t1383, Constant:i32<1>
Legal node: nothing to do

Combining: t1509: i32 = xor t1383, Constant:i32<1>

Legalizing: t1383: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1382:1
Legal node: nothing to do

Combining: t1383: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1382:1

Legalizing: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
Legal node: nothing to do

Combining: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88

Legalizing: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1377:1
Legal node: nothing to do

Combining: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1377:1

Legalizing: t1377: i32,i32 = ARMISD::SUBC t1376, Constant:i32<1>
Legal node: nothing to do

Combining: t1377: i32,i32 = ARMISD::SUBC t1376, Constant:i32<1>

Legalizing: t1376: i32 = sub Constant:i32<1>, t1509
Legal node: nothing to do

Combining: t1376: i32 = sub Constant:i32<1>, t1509
Creating new node: t1510: i32 = xor t1509, Constant:i32<1>
 ... into: t1510: i32 = xor t1509, Constant:i32<1>

Legalizing: t1509: i32 = xor t1383, Constant:i32<1>
Legal node: nothing to do

Combining: t1509: i32 = xor t1383, Constant:i32<1>

Legalizing: t1377: i32,i32 = ARMISD::SUBC t1510, Constant:i32<1>
Legal node: nothing to do

Combining: t1377: i32,i32 = ARMISD::SUBC t1510, Constant:i32<1>

Legalizing: t1510: i32 = xor t1509, Constant:i32<1>
Legal node: nothing to do

Combining: t1510: i32 = xor t1509, Constant:i32<1>
 ... into: t1383: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1382:1

Legalizing: t1377: i32,i32 = ARMISD::SUBC t1383, Constant:i32<1>
Legal node: nothing to do

Combining: t1377: i32,i32 = ARMISD::SUBC t1383, Constant:i32<1>

Replacing.1 t1377: i32,i32 = ARMISD::SUBC t1383, Constant:i32<1>

With: t1377: i32,i32 = ARMISD::SUBC t1383, Constant:i32<1>
 and 1 other values

Legalizing: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
Legal node: nothing to do

Combining: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88

Legalizing: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1382:1
Legal node: nothing to do

Combining: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1382:1

Legalizing: t1374: i32 = sub Constant:i32<1>, t1373
Legal node: nothing to do

Combining: t1374: i32 = sub Constant:i32<1>, t1373
Creating new node: t1511: i32 = xor t1373, Constant:i32<1>
 ... into: t1511: i32 = xor t1373, Constant:i32<1>

Legalizing: t1511: i32 = xor t1373, Constant:i32<1>
Legal node: nothing to do

Combining: t1511: i32 = xor t1373, Constant:i32<1>

Legalizing: t1373: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1372:1
Legal node: nothing to do

Combining: t1373: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1372:1

Legalizing: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
Legal node: nothing to do

Combining: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95

Legalizing: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1367:1
Legal node: nothing to do

Combining: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1367:1

Legalizing: t1367: i32,i32 = ARMISD::SUBC t1366, Constant:i32<1>
Legal node: nothing to do

Combining: t1367: i32,i32 = ARMISD::SUBC t1366, Constant:i32<1>

Legalizing: t1366: i32 = sub Constant:i32<1>, t1511
Legal node: nothing to do

Combining: t1366: i32 = sub Constant:i32<1>, t1511
Creating new node: t1512: i32 = xor t1511, Constant:i32<1>
 ... into: t1512: i32 = xor t1511, Constant:i32<1>

Legalizing: t1511: i32 = xor t1373, Constant:i32<1>
Legal node: nothing to do

Combining: t1511: i32 = xor t1373, Constant:i32<1>

Legalizing: t1367: i32,i32 = ARMISD::SUBC t1512, Constant:i32<1>
Legal node: nothing to do

Combining: t1367: i32,i32 = ARMISD::SUBC t1512, Constant:i32<1>

Legalizing: t1512: i32 = xor t1511, Constant:i32<1>
Legal node: nothing to do

Combining: t1512: i32 = xor t1511, Constant:i32<1>
 ... into: t1373: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1372:1

Legalizing: t1367: i32,i32 = ARMISD::SUBC t1373, Constant:i32<1>
Legal node: nothing to do

Combining: t1367: i32,i32 = ARMISD::SUBC t1373, Constant:i32<1>

Replacing.1 t1367: i32,i32 = ARMISD::SUBC t1373, Constant:i32<1>

With: t1367: i32,i32 = ARMISD::SUBC t1373, Constant:i32<1>
 and 1 other values

Legalizing: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
Legal node: nothing to do

Combining: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95

Legalizing: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1372:1
Legal node: nothing to do

Combining: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1372:1

Legalizing: t1364: i32 = sub Constant:i32<1>, t1363
Legal node: nothing to do

Combining: t1364: i32 = sub Constant:i32<1>, t1363
Creating new node: t1513: i32 = xor t1363, Constant:i32<1>
 ... into: t1513: i32 = xor t1363, Constant:i32<1>

Legalizing: t1513: i32 = xor t1363, Constant:i32<1>
Legal node: nothing to do

Combining: t1513: i32 = xor t1363, Constant:i32<1>

Legalizing: t1363: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1362:1
Legal node: nothing to do

Combining: t1363: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1362:1

Legalizing: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
Legal node: nothing to do

Combining: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102

Legalizing: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1357:1
Legal node: nothing to do

Combining: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1357:1

Legalizing: t1357: i32,i32 = ARMISD::SUBC t1356, Constant:i32<1>
Legal node: nothing to do

Combining: t1357: i32,i32 = ARMISD::SUBC t1356, Constant:i32<1>

Legalizing: t1356: i32 = sub Constant:i32<1>, t1513
Legal node: nothing to do

Combining: t1356: i32 = sub Constant:i32<1>, t1513
Creating new node: t1514: i32 = xor t1513, Constant:i32<1>
 ... into: t1514: i32 = xor t1513, Constant:i32<1>

Legalizing: t1513: i32 = xor t1363, Constant:i32<1>
Legal node: nothing to do

Combining: t1513: i32 = xor t1363, Constant:i32<1>

Legalizing: t1357: i32,i32 = ARMISD::SUBC t1514, Constant:i32<1>
Legal node: nothing to do

Combining: t1357: i32,i32 = ARMISD::SUBC t1514, Constant:i32<1>

Legalizing: t1514: i32 = xor t1513, Constant:i32<1>
Legal node: nothing to do

Combining: t1514: i32 = xor t1513, Constant:i32<1>
 ... into: t1363: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1362:1

Legalizing: t1357: i32,i32 = ARMISD::SUBC t1363, Constant:i32<1>
Legal node: nothing to do

Combining: t1357: i32,i32 = ARMISD::SUBC t1363, Constant:i32<1>

Replacing.1 t1357: i32,i32 = ARMISD::SUBC t1363, Constant:i32<1>

With: t1357: i32,i32 = ARMISD::SUBC t1363, Constant:i32<1>
 and 1 other values

Legalizing: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
Legal node: nothing to do

Combining: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102

Legalizing: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1362:1
Legal node: nothing to do

Combining: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1362:1

Legalizing: t1354: i32 = sub Constant:i32<1>, t1353
Legal node: nothing to do

Combining: t1354: i32 = sub Constant:i32<1>, t1353
Creating new node: t1515: i32 = xor t1353, Constant:i32<1>
 ... into: t1515: i32 = xor t1353, Constant:i32<1>

Legalizing: t1515: i32 = xor t1353, Constant:i32<1>
Legal node: nothing to do

Combining: t1515: i32 = xor t1353, Constant:i32<1>

Legalizing: t1353: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1352:1
Legal node: nothing to do

Combining: t1353: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1352:1

Legalizing: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
Legal node: nothing to do

Combining: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109

Legalizing: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1347:1
Legal node: nothing to do

Combining: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1347:1

Legalizing: t1347: i32,i32 = ARMISD::SUBC t1346, Constant:i32<1>
Legal node: nothing to do

Combining: t1347: i32,i32 = ARMISD::SUBC t1346, Constant:i32<1>

Legalizing: t1346: i32 = sub Constant:i32<1>, t1515
Legal node: nothing to do

Combining: t1346: i32 = sub Constant:i32<1>, t1515
Creating new node: t1516: i32 = xor t1515, Constant:i32<1>
 ... into: t1516: i32 = xor t1515, Constant:i32<1>

Legalizing: t1515: i32 = xor t1353, Constant:i32<1>
Legal node: nothing to do

Combining: t1515: i32 = xor t1353, Constant:i32<1>

Legalizing: t1347: i32,i32 = ARMISD::SUBC t1516, Constant:i32<1>
Legal node: nothing to do

Combining: t1347: i32,i32 = ARMISD::SUBC t1516, Constant:i32<1>

Legalizing: t1516: i32 = xor t1515, Constant:i32<1>
Legal node: nothing to do

Combining: t1516: i32 = xor t1515, Constant:i32<1>
 ... into: t1353: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1352:1

Legalizing: t1347: i32,i32 = ARMISD::SUBC t1353, Constant:i32<1>
Legal node: nothing to do

Combining: t1347: i32,i32 = ARMISD::SUBC t1353, Constant:i32<1>

Replacing.1 t1347: i32,i32 = ARMISD::SUBC t1353, Constant:i32<1>

With: t1347: i32,i32 = ARMISD::SUBC t1353, Constant:i32<1>
 and 1 other values

Legalizing: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
Legal node: nothing to do

Combining: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109

Legalizing: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1352:1
Legal node: nothing to do

Combining: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1352:1

Legalizing: t1344: i32 = sub Constant:i32<1>, t1343
Legal node: nothing to do

Combining: t1344: i32 = sub Constant:i32<1>, t1343
Creating new node: t1517: i32 = xor t1343, Constant:i32<1>
 ... into: t1517: i32 = xor t1343, Constant:i32<1>

Legalizing: t1517: i32 = xor t1343, Constant:i32<1>
Legal node: nothing to do

Combining: t1517: i32 = xor t1343, Constant:i32<1>

Legalizing: t1343: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1342:1
Legal node: nothing to do

Combining: t1343: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1342:1

Legalizing: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
Legal node: nothing to do

Combining: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116

Legalizing: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1337:1
Legal node: nothing to do

Combining: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1337:1

Legalizing: t1337: i32,i32 = ARMISD::SUBC t1336, Constant:i32<1>
Legal node: nothing to do

Combining: t1337: i32,i32 = ARMISD::SUBC t1336, Constant:i32<1>

Legalizing: t1336: i32 = sub Constant:i32<1>, t1517
Legal node: nothing to do

Combining: t1336: i32 = sub Constant:i32<1>, t1517
Creating new node: t1518: i32 = xor t1517, Constant:i32<1>
 ... into: t1518: i32 = xor t1517, Constant:i32<1>

Legalizing: t1517: i32 = xor t1343, Constant:i32<1>
Legal node: nothing to do

Combining: t1517: i32 = xor t1343, Constant:i32<1>

Legalizing: t1337: i32,i32 = ARMISD::SUBC t1518, Constant:i32<1>
Legal node: nothing to do

Combining: t1337: i32,i32 = ARMISD::SUBC t1518, Constant:i32<1>

Legalizing: t1518: i32 = xor t1517, Constant:i32<1>
Legal node: nothing to do

Combining: t1518: i32 = xor t1517, Constant:i32<1>
 ... into: t1343: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1342:1

Legalizing: t1337: i32,i32 = ARMISD::SUBC t1343, Constant:i32<1>
Legal node: nothing to do

Combining: t1337: i32,i32 = ARMISD::SUBC t1343, Constant:i32<1>

Replacing.1 t1337: i32,i32 = ARMISD::SUBC t1343, Constant:i32<1>

With: t1337: i32,i32 = ARMISD::SUBC t1343, Constant:i32<1>
 and 1 other values

Legalizing: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
Legal node: nothing to do

Combining: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116

Legalizing: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1342:1
Legal node: nothing to do

Combining: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1342:1

Legalizing: t1334: i32 = sub Constant:i32<1>, t1333
Legal node: nothing to do

Combining: t1334: i32 = sub Constant:i32<1>, t1333
Creating new node: t1519: i32 = xor t1333, Constant:i32<1>
 ... into: t1519: i32 = xor t1333, Constant:i32<1>

Legalizing: t1519: i32 = xor t1333, Constant:i32<1>
Legal node: nothing to do

Combining: t1519: i32 = xor t1333, Constant:i32<1>

Legalizing: t1333: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1332:1
Legal node: nothing to do

Combining: t1333: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1332:1

Legalizing: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
Legal node: nothing to do

Combining: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511

Legalizing: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1327:1
Legal node: nothing to do

Combining: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1327:1

Legalizing: t1327: i32,i32 = ARMISD::SUBC t1326, Constant:i32<1>
Legal node: nothing to do

Combining: t1327: i32,i32 = ARMISD::SUBC t1326, Constant:i32<1>

Legalizing: t1326: i32 = sub Constant:i32<1>, t1519
Legal node: nothing to do

Combining: t1326: i32 = sub Constant:i32<1>, t1519
Creating new node: t1520: i32 = xor t1519, Constant:i32<1>
 ... into: t1520: i32 = xor t1519, Constant:i32<1>

Legalizing: t1519: i32 = xor t1333, Constant:i32<1>
Legal node: nothing to do

Combining: t1519: i32 = xor t1333, Constant:i32<1>

Legalizing: t1327: i32,i32 = ARMISD::SUBC t1520, Constant:i32<1>
Legal node: nothing to do

Combining: t1327: i32,i32 = ARMISD::SUBC t1520, Constant:i32<1>

Legalizing: t1520: i32 = xor t1519, Constant:i32<1>
Legal node: nothing to do

Combining: t1520: i32 = xor t1519, Constant:i32<1>
 ... into: t1333: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1332:1

Legalizing: t1327: i32,i32 = ARMISD::SUBC t1333, Constant:i32<1>
Legal node: nothing to do

Combining: t1327: i32,i32 = ARMISD::SUBC t1333, Constant:i32<1>

Replacing.1 t1327: i32,i32 = ARMISD::SUBC t1333, Constant:i32<1>

With: t1327: i32,i32 = ARMISD::SUBC t1333, Constant:i32<1>
 and 1 other values

Legalizing: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
Legal node: nothing to do

Combining: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511

Legalizing: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1332:1
Legal node: nothing to do

Combining: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1332:1

Legalizing: t1324: i32 = sub Constant:i32<1>, t1323
Legal node: nothing to do

Combining: t1324: i32 = sub Constant:i32<1>, t1323
Creating new node: t1521: i32 = xor t1323, Constant:i32<1>
 ... into: t1521: i32 = xor t1323, Constant:i32<1>

Legalizing: t1521: i32 = xor t1323, Constant:i32<1>
Legal node: nothing to do

Combining: t1521: i32 = xor t1323, Constant:i32<1>

Legalizing: t1323: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1322:1
Legal node: nothing to do

Combining: t1323: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1322:1

Legalizing: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
Legal node: nothing to do

Combining: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130

Legalizing: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1317:1
Legal node: nothing to do

Combining: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1317:1

Legalizing: t1317: i32,i32 = ARMISD::SUBC t1316, Constant:i32<1>
Legal node: nothing to do

Combining: t1317: i32,i32 = ARMISD::SUBC t1316, Constant:i32<1>

Legalizing: t1316: i32 = sub Constant:i32<1>, t1521
Legal node: nothing to do

Combining: t1316: i32 = sub Constant:i32<1>, t1521
Creating new node: t1522: i32 = xor t1521, Constant:i32<1>
 ... into: t1522: i32 = xor t1521, Constant:i32<1>

Legalizing: t1521: i32 = xor t1323, Constant:i32<1>
Legal node: nothing to do

Combining: t1521: i32 = xor t1323, Constant:i32<1>

Legalizing: t1317: i32,i32 = ARMISD::SUBC t1522, Constant:i32<1>
Legal node: nothing to do

Combining: t1317: i32,i32 = ARMISD::SUBC t1522, Constant:i32<1>

Legalizing: t1522: i32 = xor t1521, Constant:i32<1>
Legal node: nothing to do

Combining: t1522: i32 = xor t1521, Constant:i32<1>
 ... into: t1323: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1322:1

Legalizing: t1317: i32,i32 = ARMISD::SUBC t1323, Constant:i32<1>
Legal node: nothing to do

Combining: t1317: i32,i32 = ARMISD::SUBC t1323, Constant:i32<1>

Replacing.1 t1317: i32,i32 = ARMISD::SUBC t1323, Constant:i32<1>

With: t1317: i32,i32 = ARMISD::SUBC t1323, Constant:i32<1>
 and 1 other values

Legalizing: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
Legal node: nothing to do

Combining: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130

Legalizing: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1322:1
Legal node: nothing to do

Combining: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1322:1

Legalizing: t1314: i32 = sub Constant:i32<1>, t1313
Legal node: nothing to do

Combining: t1314: i32 = sub Constant:i32<1>, t1313
Creating new node: t1523: i32 = xor t1313, Constant:i32<1>
 ... into: t1523: i32 = xor t1313, Constant:i32<1>

Legalizing: t1523: i32 = xor t1313, Constant:i32<1>
Legal node: nothing to do

Combining: t1523: i32 = xor t1313, Constant:i32<1>

Legalizing: t1313: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1312:1
Legal node: nothing to do

Combining: t1313: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1312:1

Legalizing: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
Legal node: nothing to do

Combining: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137

Legalizing: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1307:1
Legal node: nothing to do

Combining: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1307:1

Legalizing: t1307: i32,i32 = ARMISD::SUBC t1306, Constant:i32<1>
Legal node: nothing to do

Combining: t1307: i32,i32 = ARMISD::SUBC t1306, Constant:i32<1>

Legalizing: t1306: i32 = sub Constant:i32<1>, t1523
Legal node: nothing to do

Combining: t1306: i32 = sub Constant:i32<1>, t1523
Creating new node: t1524: i32 = xor t1523, Constant:i32<1>
 ... into: t1524: i32 = xor t1523, Constant:i32<1>

Legalizing: t1523: i32 = xor t1313, Constant:i32<1>
Legal node: nothing to do

Combining: t1523: i32 = xor t1313, Constant:i32<1>

Legalizing: t1307: i32,i32 = ARMISD::SUBC t1524, Constant:i32<1>
Legal node: nothing to do

Combining: t1307: i32,i32 = ARMISD::SUBC t1524, Constant:i32<1>

Legalizing: t1524: i32 = xor t1523, Constant:i32<1>
Legal node: nothing to do

Combining: t1524: i32 = xor t1523, Constant:i32<1>
 ... into: t1313: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1312:1

Legalizing: t1307: i32,i32 = ARMISD::SUBC t1313, Constant:i32<1>
Legal node: nothing to do

Combining: t1307: i32,i32 = ARMISD::SUBC t1313, Constant:i32<1>

Replacing.1 t1307: i32,i32 = ARMISD::SUBC t1313, Constant:i32<1>

With: t1307: i32,i32 = ARMISD::SUBC t1313, Constant:i32<1>
 and 1 other values

Legalizing: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
Legal node: nothing to do

Combining: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137

Legalizing: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1312:1
Legal node: nothing to do

Combining: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1312:1

Legalizing: t1304: i32 = sub Constant:i32<1>, t1303
Legal node: nothing to do

Combining: t1304: i32 = sub Constant:i32<1>, t1303
Creating new node: t1525: i32 = xor t1303, Constant:i32<1>
 ... into: t1525: i32 = xor t1303, Constant:i32<1>

Legalizing: t1525: i32 = xor t1303, Constant:i32<1>
Legal node: nothing to do

Combining: t1525: i32 = xor t1303, Constant:i32<1>

Legalizing: t1303: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1302:1
Legal node: nothing to do

Combining: t1303: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1302:1

Legalizing: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
Legal node: nothing to do

Combining: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144

Legalizing: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1297:1
Legal node: nothing to do

Combining: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1297:1

Legalizing: t1297: i32,i32 = ARMISD::SUBC t1296, Constant:i32<1>
Legal node: nothing to do

Combining: t1297: i32,i32 = ARMISD::SUBC t1296, Constant:i32<1>

Legalizing: t1296: i32 = sub Constant:i32<1>, t1525
Legal node: nothing to do

Combining: t1296: i32 = sub Constant:i32<1>, t1525
Creating new node: t1526: i32 = xor t1525, Constant:i32<1>
 ... into: t1526: i32 = xor t1525, Constant:i32<1>

Legalizing: t1525: i32 = xor t1303, Constant:i32<1>
Legal node: nothing to do

Combining: t1525: i32 = xor t1303, Constant:i32<1>

Legalizing: t1297: i32,i32 = ARMISD::SUBC t1526, Constant:i32<1>
Legal node: nothing to do

Combining: t1297: i32,i32 = ARMISD::SUBC t1526, Constant:i32<1>

Legalizing: t1526: i32 = xor t1525, Constant:i32<1>
Legal node: nothing to do

Combining: t1526: i32 = xor t1525, Constant:i32<1>
 ... into: t1303: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1302:1

Legalizing: t1297: i32,i32 = ARMISD::SUBC t1303, Constant:i32<1>
Legal node: nothing to do

Combining: t1297: i32,i32 = ARMISD::SUBC t1303, Constant:i32<1>

Replacing.1 t1297: i32,i32 = ARMISD::SUBC t1303, Constant:i32<1>

With: t1297: i32,i32 = ARMISD::SUBC t1303, Constant:i32<1>
 and 1 other values

Legalizing: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
Legal node: nothing to do

Combining: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144

Legalizing: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1302:1
Legal node: nothing to do

Combining: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1302:1

Legalizing: t1294: i32 = sub Constant:i32<1>, t1293
Legal node: nothing to do

Combining: t1294: i32 = sub Constant:i32<1>, t1293
Creating new node: t1527: i32 = xor t1293, Constant:i32<1>
 ... into: t1527: i32 = xor t1293, Constant:i32<1>

Legalizing: t1527: i32 = xor t1293, Constant:i32<1>
Legal node: nothing to do

Combining: t1527: i32 = xor t1293, Constant:i32<1>

Legalizing: t1293: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1292:1
Legal node: nothing to do

Combining: t1293: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1292:1

Legalizing: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
Legal node: nothing to do

Combining: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151

Legalizing: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1287:1
Legal node: nothing to do

Combining: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1287:1

Legalizing: t1287: i32,i32 = ARMISD::SUBC t1286, Constant:i32<1>
Legal node: nothing to do

Combining: t1287: i32,i32 = ARMISD::SUBC t1286, Constant:i32<1>

Legalizing: t1286: i32 = sub Constant:i32<1>, t1527
Legal node: nothing to do

Combining: t1286: i32 = sub Constant:i32<1>, t1527
Creating new node: t1528: i32 = xor t1527, Constant:i32<1>
 ... into: t1528: i32 = xor t1527, Constant:i32<1>

Legalizing: t1527: i32 = xor t1293, Constant:i32<1>
Legal node: nothing to do

Combining: t1527: i32 = xor t1293, Constant:i32<1>

Legalizing: t1287: i32,i32 = ARMISD::SUBC t1528, Constant:i32<1>
Legal node: nothing to do

Combining: t1287: i32,i32 = ARMISD::SUBC t1528, Constant:i32<1>

Legalizing: t1528: i32 = xor t1527, Constant:i32<1>
Legal node: nothing to do

Combining: t1528: i32 = xor t1527, Constant:i32<1>
 ... into: t1293: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1292:1

Legalizing: t1287: i32,i32 = ARMISD::SUBC t1293, Constant:i32<1>
Legal node: nothing to do

Combining: t1287: i32,i32 = ARMISD::SUBC t1293, Constant:i32<1>

Replacing.1 t1287: i32,i32 = ARMISD::SUBC t1293, Constant:i32<1>

With: t1287: i32,i32 = ARMISD::SUBC t1293, Constant:i32<1>
 and 1 other values

Legalizing: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
Legal node: nothing to do

Combining: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151

Legalizing: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1292:1
Legal node: nothing to do

Combining: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1292:1

Legalizing: t1284: i32 = sub Constant:i32<1>, t1283
Legal node: nothing to do

Combining: t1284: i32 = sub Constant:i32<1>, t1283
Creating new node: t1529: i32 = xor t1283, Constant:i32<1>
 ... into: t1529: i32 = xor t1283, Constant:i32<1>

Legalizing: t1529: i32 = xor t1283, Constant:i32<1>
Legal node: nothing to do

Combining: t1529: i32 = xor t1283, Constant:i32<1>

Legalizing: t1283: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1282:1
Legal node: nothing to do

Combining: t1283: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1282:1

Legalizing: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
Legal node: nothing to do

Combining: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158

Legalizing: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1277:1
Legal node: nothing to do

Combining: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1277:1

Legalizing: t1277: i32,i32 = ARMISD::SUBC t1276, Constant:i32<1>
Legal node: nothing to do

Combining: t1277: i32,i32 = ARMISD::SUBC t1276, Constant:i32<1>

Legalizing: t1276: i32 = sub Constant:i32<1>, t1529
Legal node: nothing to do

Combining: t1276: i32 = sub Constant:i32<1>, t1529
Creating new node: t1530: i32 = xor t1529, Constant:i32<1>
 ... into: t1530: i32 = xor t1529, Constant:i32<1>

Legalizing: t1529: i32 = xor t1283, Constant:i32<1>
Legal node: nothing to do

Combining: t1529: i32 = xor t1283, Constant:i32<1>

Legalizing: t1277: i32,i32 = ARMISD::SUBC t1530, Constant:i32<1>
Legal node: nothing to do

Combining: t1277: i32,i32 = ARMISD::SUBC t1530, Constant:i32<1>

Legalizing: t1530: i32 = xor t1529, Constant:i32<1>
Legal node: nothing to do

Combining: t1530: i32 = xor t1529, Constant:i32<1>
 ... into: t1283: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1282:1

Legalizing: t1277: i32,i32 = ARMISD::SUBC t1283, Constant:i32<1>
Legal node: nothing to do

Combining: t1277: i32,i32 = ARMISD::SUBC t1283, Constant:i32<1>

Replacing.1 t1277: i32,i32 = ARMISD::SUBC t1283, Constant:i32<1>

With: t1277: i32,i32 = ARMISD::SUBC t1283, Constant:i32<1>
 and 1 other values

Legalizing: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
Legal node: nothing to do

Combining: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158

Legalizing: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1282:1
Legal node: nothing to do

Combining: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1282:1

Legalizing: t1274: i32 = sub Constant:i32<1>, t1273
Legal node: nothing to do

Combining: t1274: i32 = sub Constant:i32<1>, t1273
Creating new node: t1531: i32 = xor t1273, Constant:i32<1>
 ... into: t1531: i32 = xor t1273, Constant:i32<1>

Legalizing: t1531: i32 = xor t1273, Constant:i32<1>
Legal node: nothing to do

Combining: t1531: i32 = xor t1273, Constant:i32<1>

Legalizing: t1273: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1272:1
Legal node: nothing to do

Combining: t1273: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1272:1

Legalizing: t1272: i32,i32 = ARMISD::SUBC t732, t729
Legal node: nothing to do

Combining: t1272: i32,i32 = ARMISD::SUBC t732, t729

Legalizing: t1270: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1269:1
Legal node: nothing to do

Combining: t1270: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1269:1

Legalizing: t1269: i32,i32 = ARMISD::ADDC t721, t718
Legal node: nothing to do

Combining: t1269: i32,i32 = ARMISD::ADDC t721, t718

Legalizing: t1267: i32 = sub Constant:i32<1>, t1266
Legal node: nothing to do

Combining: t1267: i32 = sub Constant:i32<1>, t1266
Creating new node: t1532: i32 = xor t1266, Constant:i32<1>
 ... into: t1532: i32 = xor t1266, Constant:i32<1>

Legalizing: t1532: i32 = xor t1266, Constant:i32<1>
Legal node: nothing to do

Combining: t1532: i32 = xor t1266, Constant:i32<1>

Legalizing: t1266: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1265:1
Legal node: nothing to do

Combining: t1266: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1265:1

Legalizing: t1265: i32,i32 = ARMISD::SUBC t1272, t726
Legal node: nothing to do

Combining: t1265: i32,i32 = ARMISD::SUBC t1272, t726

Legalizing: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1260:1
Legal node: nothing to do

Combining: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1260:1

Legalizing: t1260: i32,i32 = ARMISD::SUBC t1259, Constant:i32<1>
Legal node: nothing to do

Combining: t1260: i32,i32 = ARMISD::SUBC t1259, Constant:i32<1>

Legalizing: t1259: i32 = sub Constant:i32<1>, t1531
Legal node: nothing to do

Combining: t1259: i32 = sub Constant:i32<1>, t1531
Creating new node: t1533: i32 = xor t1531, Constant:i32<1>
 ... into: t1533: i32 = xor t1531, Constant:i32<1>

Legalizing: t1531: i32 = xor t1273, Constant:i32<1>
Legal node: nothing to do

Combining: t1531: i32 = xor t1273, Constant:i32<1>

Legalizing: t1260: i32,i32 = ARMISD::SUBC t1533, Constant:i32<1>
Legal node: nothing to do

Combining: t1260: i32,i32 = ARMISD::SUBC t1533, Constant:i32<1>

Legalizing: t1533: i32 = xor t1531, Constant:i32<1>
Legal node: nothing to do

Combining: t1533: i32 = xor t1531, Constant:i32<1>
 ... into: t1273: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1272:1

Legalizing: t1260: i32,i32 = ARMISD::SUBC t1273, Constant:i32<1>
Legal node: nothing to do

Combining: t1260: i32,i32 = ARMISD::SUBC t1273, Constant:i32<1>

Replacing.1 t1260: i32,i32 = ARMISD::SUBC t1273, Constant:i32<1>

With: t1260: i32,i32 = ARMISD::SUBC t1273, Constant:i32<1>
 and 1 other values

Legalizing: t1272: i32,i32 = ARMISD::SUBC t732, t729
Legal node: nothing to do

Combining: t1272: i32,i32 = ARMISD::SUBC t732, t729

Legalizing: t1265: i32,i32 = ARMISD::SUBC t1272, t726
Legal node: nothing to do

Combining: t1265: i32,i32 = ARMISD::SUBC t1272, t726

Legalizing: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1272:1
Legal node: nothing to do

Combining: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1272:1

Legalizing: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1255:1
Legal node: nothing to do

Combining: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1255:1

Legalizing: t1255: i32,i32 = ARMISD::SUBC t1270, Constant:i32<1>
Legal node: nothing to do

Combining: t1255: i32,i32 = ARMISD::SUBC t1270, Constant:i32<1>

Replacing.1 t1255: i32,i32 = ARMISD::SUBC t1270, Constant:i32<1>

With: t1255: i32,i32 = ARMISD::SUBC t1270, Constant:i32<1>
 and 1 other values

Legalizing: t1269: i32,i32 = ARMISD::ADDC t721, t718
Legal node: nothing to do

Combining: t1269: i32,i32 = ARMISD::ADDC t721, t718

Legalizing: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1269:1
Legal node: nothing to do

Combining: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1269:1

Legalizing: t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1250:1
Legal node: nothing to do

Combining: t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1250:1

Legalizing: t1250: i32,i32 = ARMISD::SUBC t1249, Constant:i32<1>
Legal node: nothing to do

Combining: t1250: i32,i32 = ARMISD::SUBC t1249, Constant:i32<1>

Legalizing: t1249: i32 = sub Constant:i32<1>, t1532
Legal node: nothing to do

Combining: t1249: i32 = sub Constant:i32<1>, t1532
Creating new node: t1534: i32 = xor t1532, Constant:i32<1>
 ... into: t1534: i32 = xor t1532, Constant:i32<1>

Legalizing: t1532: i32 = xor t1266, Constant:i32<1>
Legal node: nothing to do

Combining: t1532: i32 = xor t1266, Constant:i32<1>

Legalizing: t1250: i32,i32 = ARMISD::SUBC t1534, Constant:i32<1>
Legal node: nothing to do

Combining: t1250: i32,i32 = ARMISD::SUBC t1534, Constant:i32<1>

Legalizing: t1534: i32 = xor t1532, Constant:i32<1>
Legal node: nothing to do

Combining: t1534: i32 = xor t1532, Constant:i32<1>
 ... into: t1266: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1265:1

Legalizing: t1250: i32,i32 = ARMISD::SUBC t1266, Constant:i32<1>
Legal node: nothing to do

Combining: t1250: i32,i32 = ARMISD::SUBC t1266, Constant:i32<1>

Replacing.1 t1250: i32,i32 = ARMISD::SUBC t1266, Constant:i32<1>

With: t1250: i32,i32 = ARMISD::SUBC t1266, Constant:i32<1>
 and 1 other values

Legalizing: t1265: i32,i32 = ARMISD::SUBC t1272, t726
Legal node: nothing to do

Combining: t1265: i32,i32 = ARMISD::SUBC t1272, t726

Legalizing: t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1265:1
Legal node: nothing to do

Combining: t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1265:1

Legalizing: t1247: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1246:1
Legal node: nothing to do

Combining: t1247: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1246:1

Legalizing: t1246: i32,i32 = ARMISD::ADDC t793, t772
Legal node: nothing to do

Combining: t1246: i32,i32 = ARMISD::ADDC t793, t772

Legalizing: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1242:1
Legal node: nothing to do

Combining: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1242:1

Legalizing: t1242: i32,i32 = ARMISD::SUBC t1247, Constant:i32<1>
Legal node: nothing to do

Combining: t1242: i32,i32 = ARMISD::SUBC t1247, Constant:i32<1>

Replacing.1 t1242: i32,i32 = ARMISD::SUBC t1247, Constant:i32<1>

With: t1242: i32,i32 = ARMISD::SUBC t1247, Constant:i32<1>
 and 1 other values

Legalizing: t1246: i32,i32 = ARMISD::ADDC t793, t772
Legal node: nothing to do

Combining: t1246: i32,i32 = ARMISD::ADDC t793, t772

Legalizing: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1246:1
Legal node: nothing to do

Combining: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1246:1

Legalizing: t1240: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1239:1
Legal node: nothing to do

Combining: t1240: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1239:1

Legalizing: t1239: i32,i32 = ARMISD::ADDC t848, t842
Legal node: nothing to do

Combining: t1239: i32,i32 = ARMISD::ADDC t848, t842

Legalizing: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1235:1
Legal node: nothing to do

Combining: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1235:1

Legalizing: t1235: i32,i32 = ARMISD::SUBC t1240, Constant:i32<1>
Legal node: nothing to do

Combining: t1235: i32,i32 = ARMISD::SUBC t1240, Constant:i32<1>

Replacing.1 t1235: i32,i32 = ARMISD::SUBC t1240, Constant:i32<1>

With: t1235: i32,i32 = ARMISD::SUBC t1240, Constant:i32<1>
 and 1 other values

Legalizing: t1239: i32,i32 = ARMISD::ADDC t848, t842
Legal node: nothing to do

Combining: t1239: i32,i32 = ARMISD::ADDC t848, t842

Legalizing: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1239:1
Legal node: nothing to do

Combining: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1239:1

Legalizing: t1233: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1232:1
Legal node: nothing to do

Combining: t1233: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1232:1

Legalizing: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
Legal node: nothing to do

Combining: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>

Legalizing: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1228:1
Legal node: nothing to do

Combining: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1228:1

Legalizing: t1228: i32,i32 = ARMISD::SUBC t1233, Constant:i32<1>
Legal node: nothing to do

Combining: t1228: i32,i32 = ARMISD::SUBC t1233, Constant:i32<1>

Replacing.1 t1228: i32,i32 = ARMISD::SUBC t1233, Constant:i32<1>

With: t1228: i32,i32 = ARMISD::SUBC t1233, Constant:i32<1>
 and 1 other values

Legalizing: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
Legal node: nothing to do

Combining: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>

Legalizing: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1232:1
Legal node: nothing to do

Combining: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1232:1

Legalizing: t1226: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1225:1
Legal node: nothing to do

Combining: t1226: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1225:1

Legalizing: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
Legal node: nothing to do

Combining: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>

Legalizing: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1221:1
Legal node: nothing to do

Combining: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1221:1

Legalizing: t1221: i32,i32 = ARMISD::SUBC t1226, Constant:i32<1>
Legal node: nothing to do

Combining: t1221: i32,i32 = ARMISD::SUBC t1226, Constant:i32<1>

Replacing.1 t1221: i32,i32 = ARMISD::SUBC t1226, Constant:i32<1>

With: t1221: i32,i32 = ARMISD::SUBC t1226, Constant:i32<1>
 and 1 other values

Legalizing: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
Legal node: nothing to do

Combining: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>

Legalizing: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1225:1
Legal node: nothing to do

Combining: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1225:1

Legalizing: t1219: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1218:1
Legal node: nothing to do

Combining: t1219: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1218:1

Legalizing: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
Legal node: nothing to do

Combining: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>

Legalizing: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1214:1
Legal node: nothing to do

Combining: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1214:1

Legalizing: t1214: i32,i32 = ARMISD::SUBC t1219, Constant:i32<1>
Legal node: nothing to do

Combining: t1214: i32,i32 = ARMISD::SUBC t1219, Constant:i32<1>

Replacing.1 t1214: i32,i32 = ARMISD::SUBC t1219, Constant:i32<1>

With: t1214: i32,i32 = ARMISD::SUBC t1219, Constant:i32<1>
 and 1 other values

Legalizing: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
Legal node: nothing to do

Combining: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>

Legalizing: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1218:1
Legal node: nothing to do

Combining: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1218:1

Legalizing: t1212: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1211:1
Legal node: nothing to do

Combining: t1212: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1211:1

Legalizing: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
Legal node: nothing to do

Combining: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>

Legalizing: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1207:1
Legal node: nothing to do

Combining: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1207:1

Legalizing: t1207: i32,i32 = ARMISD::SUBC t1212, Constant:i32<1>
Legal node: nothing to do

Combining: t1207: i32,i32 = ARMISD::SUBC t1212, Constant:i32<1>

Replacing.1 t1207: i32,i32 = ARMISD::SUBC t1212, Constant:i32<1>

With: t1207: i32,i32 = ARMISD::SUBC t1212, Constant:i32<1>
 and 1 other values

Legalizing: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
Legal node: nothing to do

Combining: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>

Legalizing: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1211:1
Legal node: nothing to do

Combining: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1211:1

Legalizing: t1205: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1204:1
Legal node: nothing to do

Combining: t1205: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1204:1

Legalizing: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
Legal node: nothing to do

Combining: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>

Legalizing: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1200:1
Legal node: nothing to do

Combining: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1200:1

Legalizing: t1200: i32,i32 = ARMISD::SUBC t1205, Constant:i32<1>
Legal node: nothing to do

Combining: t1200: i32,i32 = ARMISD::SUBC t1205, Constant:i32<1>

Replacing.1 t1200: i32,i32 = ARMISD::SUBC t1205, Constant:i32<1>

With: t1200: i32,i32 = ARMISD::SUBC t1205, Constant:i32<1>
 and 1 other values

Legalizing: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
Legal node: nothing to do

Combining: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>

Legalizing: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1204:1
Legal node: nothing to do

Combining: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1204:1

Legalizing: t1198: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1197:1
Legal node: nothing to do

Combining: t1198: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1197:1

Legalizing: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
Legal node: nothing to do

Combining: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>

Legalizing: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1193:1
Legal node: nothing to do

Combining: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1193:1

Legalizing: t1193: i32,i32 = ARMISD::SUBC t1198, Constant:i32<1>
Legal node: nothing to do

Combining: t1193: i32,i32 = ARMISD::SUBC t1198, Constant:i32<1>

Replacing.1 t1193: i32,i32 = ARMISD::SUBC t1198, Constant:i32<1>

With: t1193: i32,i32 = ARMISD::SUBC t1198, Constant:i32<1>
 and 1 other values

Legalizing: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
Legal node: nothing to do

Combining: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>

Legalizing: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1197:1
Legal node: nothing to do

Combining: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1197:1

Legalizing: t1191: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1190:1
Legal node: nothing to do

Combining: t1191: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1190:1

Legalizing: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
Legal node: nothing to do

Combining: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>

Legalizing: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1186:1
Legal node: nothing to do

Combining: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1186:1

Legalizing: t1186: i32,i32 = ARMISD::SUBC t1191, Constant:i32<1>
Legal node: nothing to do

Combining: t1186: i32,i32 = ARMISD::SUBC t1191, Constant:i32<1>

Replacing.1 t1186: i32,i32 = ARMISD::SUBC t1191, Constant:i32<1>

With: t1186: i32,i32 = ARMISD::SUBC t1191, Constant:i32<1>
 and 1 other values

Legalizing: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
Legal node: nothing to do

Combining: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>

Legalizing: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1190:1
Legal node: nothing to do

Combining: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1190:1

Legalizing: t1184: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1183:1
Legal node: nothing to do

Combining: t1184: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1183:1

Legalizing: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
Legal node: nothing to do

Combining: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>

Legalizing: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1179:1
Legal node: nothing to do

Combining: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1179:1

Legalizing: t1179: i32,i32 = ARMISD::SUBC t1184, Constant:i32<1>
Legal node: nothing to do

Combining: t1179: i32,i32 = ARMISD::SUBC t1184, Constant:i32<1>

Replacing.1 t1179: i32,i32 = ARMISD::SUBC t1184, Constant:i32<1>

With: t1179: i32,i32 = ARMISD::SUBC t1184, Constant:i32<1>
 and 1 other values

Legalizing: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
Legal node: nothing to do

Combining: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>

Legalizing: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1183:1
Legal node: nothing to do

Combining: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1183:1

Legalizing: t1177: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1176:1
Legal node: nothing to do

Combining: t1177: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1176:1

Legalizing: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
Legal node: nothing to do

Combining: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>

Legalizing: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1172:1
Legal node: nothing to do

Combining: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1172:1

Legalizing: t1172: i32,i32 = ARMISD::SUBC t1177, Constant:i32<1>
Legal node: nothing to do

Combining: t1172: i32,i32 = ARMISD::SUBC t1177, Constant:i32<1>

Replacing.1 t1172: i32,i32 = ARMISD::SUBC t1177, Constant:i32<1>

With: t1172: i32,i32 = ARMISD::SUBC t1177, Constant:i32<1>
 and 1 other values

Legalizing: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
Legal node: nothing to do

Combining: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>

Legalizing: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1176:1
Legal node: nothing to do

Combining: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1176:1

Legalizing: t1170: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1169:1
Legal node: nothing to do

Combining: t1170: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1169:1

Legalizing: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
Legal node: nothing to do

Combining: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>

Legalizing: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1165:1
Legal node: nothing to do

Combining: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1165:1

Legalizing: t1165: i32,i32 = ARMISD::SUBC t1170, Constant:i32<1>
Legal node: nothing to do

Combining: t1165: i32,i32 = ARMISD::SUBC t1170, Constant:i32<1>

Replacing.1 t1165: i32,i32 = ARMISD::SUBC t1170, Constant:i32<1>

With: t1165: i32,i32 = ARMISD::SUBC t1170, Constant:i32<1>
 and 1 other values

Legalizing: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
Legal node: nothing to do

Combining: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>

Legalizing: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1169:1
Legal node: nothing to do

Combining: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1169:1

Legalizing: t1163: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1162:1
Legal node: nothing to do

Combining: t1163: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1162:1

Legalizing: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
Legal node: nothing to do

Combining: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>

Legalizing: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1158:1
Legal node: nothing to do

Combining: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1158:1

Legalizing: t1158: i32,i32 = ARMISD::SUBC t1163, Constant:i32<1>
Legal node: nothing to do

Combining: t1158: i32,i32 = ARMISD::SUBC t1163, Constant:i32<1>

Replacing.1 t1158: i32,i32 = ARMISD::SUBC t1163, Constant:i32<1>

With: t1158: i32,i32 = ARMISD::SUBC t1163, Constant:i32<1>
 and 1 other values

Legalizing: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
Legal node: nothing to do

Combining: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>

Legalizing: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1162:1
Legal node: nothing to do

Combining: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1162:1

Legalizing: t1156: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1155:1
Legal node: nothing to do

Combining: t1156: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1155:1

Legalizing: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
Legal node: nothing to do

Combining: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>

Legalizing: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1151:1
Legal node: nothing to do

Combining: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1151:1

Legalizing: t1151: i32,i32 = ARMISD::SUBC t1156, Constant:i32<1>
Legal node: nothing to do

Combining: t1151: i32,i32 = ARMISD::SUBC t1156, Constant:i32<1>

Replacing.1 t1151: i32,i32 = ARMISD::SUBC t1156, Constant:i32<1>

With: t1151: i32,i32 = ARMISD::SUBC t1156, Constant:i32<1>
 and 1 other values

Legalizing: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
Legal node: nothing to do

Combining: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>

Legalizing: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1155:1
Legal node: nothing to do

Combining: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1155:1

Legalizing: t1149: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1148:1
Legal node: nothing to do

Combining: t1149: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1148:1

Legalizing: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
Legal node: nothing to do

Combining: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>

Legalizing: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1144:1
Legal node: nothing to do

Combining: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1144:1

Legalizing: t1144: i32,i32 = ARMISD::SUBC t1149, Constant:i32<1>
Legal node: nothing to do

Combining: t1144: i32,i32 = ARMISD::SUBC t1149, Constant:i32<1>

Replacing.1 t1144: i32,i32 = ARMISD::SUBC t1149, Constant:i32<1>

With: t1144: i32,i32 = ARMISD::SUBC t1149, Constant:i32<1>
 and 1 other values

Legalizing: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
Legal node: nothing to do

Combining: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>

Legalizing: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1148:1
Legal node: nothing to do

Combining: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1148:1

Legalizing: t1142: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1141:1
Legal node: nothing to do

Combining: t1142: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1141:1

Legalizing: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
Legal node: nothing to do

Combining: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>

Legalizing: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1137:1
Legal node: nothing to do

Combining: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1137:1

Legalizing: t1137: i32,i32 = ARMISD::SUBC t1142, Constant:i32<1>
Legal node: nothing to do

Combining: t1137: i32,i32 = ARMISD::SUBC t1142, Constant:i32<1>

Replacing.1 t1137: i32,i32 = ARMISD::SUBC t1142, Constant:i32<1>

With: t1137: i32,i32 = ARMISD::SUBC t1142, Constant:i32<1>
 and 1 other values

Legalizing: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
Legal node: nothing to do

Combining: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>

Legalizing: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1141:1
Legal node: nothing to do

Combining: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1141:1

Legalizing: t1135: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1134:1
Legal node: nothing to do

Combining: t1135: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1134:1

Legalizing: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
Legal node: nothing to do

Combining: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>

Legalizing: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1130:1
Legal node: nothing to do

Combining: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1130:1

Legalizing: t1130: i32,i32 = ARMISD::SUBC t1135, Constant:i32<1>
Legal node: nothing to do

Combining: t1130: i32,i32 = ARMISD::SUBC t1135, Constant:i32<1>

Replacing.1 t1130: i32,i32 = ARMISD::SUBC t1135, Constant:i32<1>

With: t1130: i32,i32 = ARMISD::SUBC t1135, Constant:i32<1>
 and 1 other values

Legalizing: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
Legal node: nothing to do

Combining: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>

Legalizing: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1134:1
Legal node: nothing to do

Combining: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1134:1

Legalizing: t1128: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1127:1
Legal node: nothing to do

Combining: t1128: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1127:1

Legalizing: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
Legal node: nothing to do

Combining: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>

Legalizing: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1123:1
Legal node: nothing to do

Combining: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1123:1

Legalizing: t1123: i32,i32 = ARMISD::SUBC t1128, Constant:i32<1>
Legal node: nothing to do

Combining: t1123: i32,i32 = ARMISD::SUBC t1128, Constant:i32<1>

Replacing.1 t1123: i32,i32 = ARMISD::SUBC t1128, Constant:i32<1>

With: t1123: i32,i32 = ARMISD::SUBC t1128, Constant:i32<1>
 and 1 other values

Legalizing: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
Legal node: nothing to do

Combining: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>

Legalizing: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1127:1
Legal node: nothing to do

Combining: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1127:1

Legalizing: t1121: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1120:1
Legal node: nothing to do

Combining: t1121: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1120:1

Legalizing: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
Legal node: nothing to do

Combining: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>

Legalizing: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1116:1
Legal node: nothing to do

Combining: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1116:1

Legalizing: t1116: i32,i32 = ARMISD::SUBC t1121, Constant:i32<1>
Legal node: nothing to do

Combining: t1116: i32,i32 = ARMISD::SUBC t1121, Constant:i32<1>

Replacing.1 t1116: i32,i32 = ARMISD::SUBC t1121, Constant:i32<1>

With: t1116: i32,i32 = ARMISD::SUBC t1121, Constant:i32<1>
 and 1 other values

Legalizing: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
Legal node: nothing to do

Combining: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>

Legalizing: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1120:1
Legal node: nothing to do

Combining: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1120:1

Legalizing: t1114: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1113:1
Legal node: nothing to do

Combining: t1114: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1113:1

Legalizing: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
Legal node: nothing to do

Combining: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>

Legalizing: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1109:1
Legal node: nothing to do

Combining: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1109:1

Legalizing: t1109: i32,i32 = ARMISD::SUBC t1114, Constant:i32<1>
Legal node: nothing to do

Combining: t1109: i32,i32 = ARMISD::SUBC t1114, Constant:i32<1>

Replacing.1 t1109: i32,i32 = ARMISD::SUBC t1114, Constant:i32<1>

With: t1109: i32,i32 = ARMISD::SUBC t1114, Constant:i32<1>
 and 1 other values

Legalizing: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
Legal node: nothing to do

Combining: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>

Legalizing: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1113:1
Legal node: nothing to do

Combining: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1113:1

Legalizing: t1107: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1106:1
Legal node: nothing to do

Combining: t1107: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1106:1

Legalizing: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
Legal node: nothing to do

Combining: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>

Legalizing: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1102:1
Legal node: nothing to do

Combining: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1102:1

Legalizing: t1102: i32,i32 = ARMISD::SUBC t1107, Constant:i32<1>
Legal node: nothing to do

Combining: t1102: i32,i32 = ARMISD::SUBC t1107, Constant:i32<1>

Replacing.1 t1102: i32,i32 = ARMISD::SUBC t1107, Constant:i32<1>

With: t1102: i32,i32 = ARMISD::SUBC t1107, Constant:i32<1>
 and 1 other values

Legalizing: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
Legal node: nothing to do

Combining: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>

Legalizing: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1106:1
Legal node: nothing to do

Combining: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1106:1

Legalizing: t1100: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1099:1
Legal node: nothing to do

Combining: t1100: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1099:1

Legalizing: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
Legal node: nothing to do

Combining: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>

Legalizing: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1095:1
Legal node: nothing to do

Combining: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1095:1

Legalizing: t1095: i32,i32 = ARMISD::SUBC t1100, Constant:i32<1>
Legal node: nothing to do

Combining: t1095: i32,i32 = ARMISD::SUBC t1100, Constant:i32<1>

Replacing.1 t1095: i32,i32 = ARMISD::SUBC t1100, Constant:i32<1>

With: t1095: i32,i32 = ARMISD::SUBC t1100, Constant:i32<1>
 and 1 other values

Legalizing: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
Legal node: nothing to do

Combining: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>

Legalizing: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1099:1
Legal node: nothing to do

Combining: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1099:1

Legalizing: t1093: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1092:1
Legal node: nothing to do

Combining: t1093: i32,i32 = ARMISD::ADDE Constant:i32<0>, Constant:i32<0>, t1092:1

Legalizing: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
Legal node: nothing to do

Combining: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>

Legalizing: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1088:1
Legal node: nothing to do

Combining: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1088:1

Legalizing: t1088: i32,i32 = ARMISD::SUBC t1093, Constant:i32<1>
Legal node: nothing to do

Combining: t1088: i32,i32 = ARMISD::SUBC t1093, Constant:i32<1>

Replacing.1 t1088: i32,i32 = ARMISD::SUBC t1093, Constant:i32<1>

With: t1088: i32,i32 = ARMISD::SUBC t1093, Constant:i32<1>
 and 1 other values

Legalizing: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
Legal node: nothing to do

Combining: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>

Legalizing: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1092:1
Legal node: nothing to do

Combining: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1092:1

Legalizing: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1
Legal node: nothing to do

Combining: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1

Legalizing: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
Legal node: nothing to do

Combining: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498

Legalizing: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
Legalizing non-extending load operation

Combining: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32

Legalizing: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
Legal node: nothing to do

Combining: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1

Legalizing: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1

Combining: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1

Legalizing: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
Legal node: nothing to do

Combining: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1

Legalizing: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1
Legal node: nothing to do

Combining: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1

Legalizing: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1
Legal node: nothing to do

Combining: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1

Legalizing: t492: ch,glue = CopyToReg t490, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t492: ch,glue = CopyToReg t490, Register:i32 $r0, t1488

Legalizing: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1066: ch = TokenFactor t1064, t1065
Legal node: nothing to do

Combining: t1066: ch = TokenFactor t1064, t1065

Legalizing: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1089, t1067, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1089, t1067, undef:i32

Legalizing: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1092, FrameIndex:i32<23>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1092, FrameIndex:i32<23>, undef:i32

Legalizing: t1061: ch = TokenFactor t1059:1, t1060:1
Legal node: nothing to do

Combining: t1061: ch = TokenFactor t1059:1, t1060:1

Legalizing: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
Legalizing non-extending load operation

Combining: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32

Legalizing: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32
Legalizing non-extending load operation

Combining: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32

Legalizing: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
Legal node: nothing to do

Combining: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1

Legalizing: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1

Combining: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1

Legalizing: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
Legal node: nothing to do

Combining: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1

Legalizing: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1
Legal node: nothing to do

Combining: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1

Legalizing: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1
Legal node: nothing to do

Combining: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1

Legalizing: t479: ch,glue = CopyToReg t477, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t479: ch,glue = CopyToReg t477, Register:i32 $r0, t1488

Legalizing: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1058: ch = TokenFactor t1056, t1057
Legal node: nothing to do

Combining: t1058: ch = TokenFactor t1056, t1057

Legalizing: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1096, t1068, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1096, t1068, undef:i32

Legalizing: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1099, FrameIndex:i32<22>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1099, FrameIndex:i32<22>, undef:i32

Legalizing: t1053: ch = TokenFactor t1051:1, t1052:1
Legal node: nothing to do

Combining: t1053: ch = TokenFactor t1051:1, t1052:1

Legalizing: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
Legalizing non-extending load operation

Combining: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32

Legalizing: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32
Legalizing non-extending load operation

Combining: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32

Legalizing: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
Legal node: nothing to do

Combining: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1

Legalizing: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1

Combining: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1

Legalizing: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
Legal node: nothing to do

Combining: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1

Legalizing: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1
Legal node: nothing to do

Combining: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1

Legalizing: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1
Legal node: nothing to do

Combining: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1

Legalizing: t466: ch,glue = CopyToReg t464, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t466: ch,glue = CopyToReg t464, Register:i32 $r0, t1488

Legalizing: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1050: ch = TokenFactor t1048, t1049
Legal node: nothing to do

Combining: t1050: ch = TokenFactor t1048, t1049

Legalizing: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1103, t1069, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1103, t1069, undef:i32

Legalizing: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1106, FrameIndex:i32<21>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1106, FrameIndex:i32<21>, undef:i32

Legalizing: t1045: ch = TokenFactor t1043:1, t1044:1
Legal node: nothing to do

Combining: t1045: ch = TokenFactor t1043:1, t1044:1

Legalizing: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
Legalizing non-extending load operation

Combining: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32

Legalizing: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32
Legalizing non-extending load operation

Combining: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32

Legalizing: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
Legal node: nothing to do

Combining: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1

Legalizing: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1

Combining: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1

Legalizing: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
Legal node: nothing to do

Combining: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1

Legalizing: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1
Legal node: nothing to do

Combining: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1

Legalizing: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1
Legal node: nothing to do

Combining: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1

Legalizing: t453: ch,glue = CopyToReg t451, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t453: ch,glue = CopyToReg t451, Register:i32 $r0, t1488

Legalizing: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1042: ch = TokenFactor t1040, t1041
Legal node: nothing to do

Combining: t1042: ch = TokenFactor t1040, t1041

Legalizing: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1110, t1070, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1110, t1070, undef:i32

Legalizing: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1113, FrameIndex:i32<20>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1113, FrameIndex:i32<20>, undef:i32

Legalizing: t1037: ch = TokenFactor t1035:1, t1036:1
Legal node: nothing to do

Combining: t1037: ch = TokenFactor t1035:1, t1036:1

Legalizing: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
Legalizing non-extending load operation

Combining: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32

Legalizing: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32
Legalizing non-extending load operation

Combining: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32

Legalizing: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
Legal node: nothing to do

Combining: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1

Legalizing: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1

Combining: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1

Legalizing: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
Legal node: nothing to do

Combining: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1

Legalizing: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1
Legal node: nothing to do

Combining: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1

Legalizing: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1
Legal node: nothing to do

Combining: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1

Legalizing: t440: ch,glue = CopyToReg t438, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t440: ch,glue = CopyToReg t438, Register:i32 $r0, t1488

Legalizing: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1034: ch = TokenFactor t1032, t1033
Legal node: nothing to do

Combining: t1034: ch = TokenFactor t1032, t1033

Legalizing: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1117, t1071, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1117, t1071, undef:i32

Legalizing: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1120, FrameIndex:i32<19>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1120, FrameIndex:i32<19>, undef:i32

Legalizing: t1029: ch = TokenFactor t1027:1, t1028:1
Legal node: nothing to do

Combining: t1029: ch = TokenFactor t1027:1, t1028:1

Legalizing: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
Legalizing non-extending load operation

Combining: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32

Legalizing: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32
Legalizing non-extending load operation

Combining: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32

Legalizing: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
Legal node: nothing to do

Combining: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1

Legalizing: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1

Combining: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1

Legalizing: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
Legal node: nothing to do

Combining: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1

Legalizing: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1
Legal node: nothing to do

Combining: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1

Legalizing: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1
Legal node: nothing to do

Combining: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1

Legalizing: t427: ch,glue = CopyToReg t425, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t427: ch,glue = CopyToReg t425, Register:i32 $r0, t1488

Legalizing: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1026: ch = TokenFactor t1024, t1025
Legal node: nothing to do

Combining: t1026: ch = TokenFactor t1024, t1025

Legalizing: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1124, t1072, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1124, t1072, undef:i32

Legalizing: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1127, FrameIndex:i32<18>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1127, FrameIndex:i32<18>, undef:i32

Legalizing: t1021: ch = TokenFactor t1019:1, t1020:1
Legal node: nothing to do

Combining: t1021: ch = TokenFactor t1019:1, t1020:1

Legalizing: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
Legalizing non-extending load operation

Combining: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32

Legalizing: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32
Legalizing non-extending load operation

Combining: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32

Legalizing: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
Legal node: nothing to do

Combining: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1

Legalizing: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1

Combining: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1

Legalizing: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
Legal node: nothing to do

Combining: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1

Legalizing: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1
Legal node: nothing to do

Combining: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1

Legalizing: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1
Legal node: nothing to do

Combining: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1

Legalizing: t414: ch,glue = CopyToReg t412, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t414: ch,glue = CopyToReg t412, Register:i32 $r0, t1488

Legalizing: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1018: ch = TokenFactor t1016, t1017
Legal node: nothing to do

Combining: t1018: ch = TokenFactor t1016, t1017

Legalizing: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1131, t1073, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1131, t1073, undef:i32

Legalizing: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1134, FrameIndex:i32<17>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1134, FrameIndex:i32<17>, undef:i32

Legalizing: t1013: ch = TokenFactor t1011:1, t1012:1
Legal node: nothing to do

Combining: t1013: ch = TokenFactor t1011:1, t1012:1

Legalizing: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
Legalizing non-extending load operation

Combining: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32

Legalizing: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32
Legalizing non-extending load operation

Combining: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32

Legalizing: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
Legal node: nothing to do

Combining: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1

Legalizing: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1

Combining: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1

Legalizing: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
Legal node: nothing to do

Combining: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1

Legalizing: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1
Legal node: nothing to do

Combining: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1

Legalizing: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1
Legal node: nothing to do

Combining: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1

Legalizing: t401: ch,glue = CopyToReg t399, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t401: ch,glue = CopyToReg t399, Register:i32 $r0, t1488

Legalizing: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1010: ch = TokenFactor t1008, t1009
Legal node: nothing to do

Combining: t1010: ch = TokenFactor t1008, t1009

Legalizing: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1138, t1074, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1138, t1074, undef:i32

Legalizing: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1141, FrameIndex:i32<16>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1141, FrameIndex:i32<16>, undef:i32

Legalizing: t1005: ch = TokenFactor t1003:1, t1004:1
Legal node: nothing to do

Combining: t1005: ch = TokenFactor t1003:1, t1004:1

Legalizing: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
Legalizing non-extending load operation

Combining: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32

Legalizing: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32
Legalizing non-extending load operation

Combining: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32

Legalizing: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
Legal node: nothing to do

Combining: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1

Legalizing: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1

Combining: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1

Legalizing: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
Legal node: nothing to do

Combining: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1

Legalizing: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1
Legal node: nothing to do

Combining: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1

Legalizing: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1
Legal node: nothing to do

Combining: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1

Legalizing: t388: ch,glue = CopyToReg t386, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t388: ch,glue = CopyToReg t386, Register:i32 $r0, t1488

Legalizing: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1002: ch = TokenFactor t1000, t1001
Legal node: nothing to do

Combining: t1002: ch = TokenFactor t1000, t1001

Legalizing: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t1145, t1075, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t1145, t1075, undef:i32

Legalizing: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t1148, FrameIndex:i32<15>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t1148, FrameIndex:i32<15>, undef:i32

Legalizing: t997: ch = TokenFactor t995:1, t996:1
Legal node: nothing to do

Combining: t997: ch = TokenFactor t995:1, t996:1

Legalizing: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
Legalizing non-extending load operation

Combining: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32

Legalizing: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32
Legalizing non-extending load operation

Combining: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32

Legalizing: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
Legal node: nothing to do

Combining: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1

Legalizing: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1

Combining: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1

Legalizing: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
Legal node: nothing to do

Combining: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1

Legalizing: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1
Legal node: nothing to do

Combining: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1

Legalizing: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1
Legal node: nothing to do

Combining: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1

Legalizing: t375: ch,glue = CopyToReg t373, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t375: ch,glue = CopyToReg t373, Register:i32 $r0, t1488

Legalizing: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t994: ch = TokenFactor t992, t993
Legal node: nothing to do

Combining: t994: ch = TokenFactor t992, t993

Legalizing: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t1152, t1076, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t1152, t1076, undef:i32

Legalizing: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t1155, FrameIndex:i32<14>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t1155, FrameIndex:i32<14>, undef:i32

Legalizing: t989: ch = TokenFactor t987:1, t988:1
Legal node: nothing to do

Combining: t989: ch = TokenFactor t987:1, t988:1

Legalizing: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
Legalizing non-extending load operation

Combining: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32

Legalizing: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32
Legalizing non-extending load operation

Combining: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32

Legalizing: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
Legal node: nothing to do

Combining: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1

Legalizing: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1

Combining: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1

Legalizing: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
Legal node: nothing to do

Combining: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1

Legalizing: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1
Legal node: nothing to do

Combining: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1

Legalizing: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1
Legal node: nothing to do

Combining: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1

Legalizing: t362: ch,glue = CopyToReg t360, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t362: ch,glue = CopyToReg t360, Register:i32 $r0, t1488

Legalizing: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t986: ch = TokenFactor t984, t985
Legal node: nothing to do

Combining: t986: ch = TokenFactor t984, t985

Legalizing: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t1159, t1077, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t1159, t1077, undef:i32

Legalizing: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t1162, FrameIndex:i32<13>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t1162, FrameIndex:i32<13>, undef:i32

Legalizing: t981: ch = TokenFactor t979:1, t980:1
Legal node: nothing to do

Combining: t981: ch = TokenFactor t979:1, t980:1

Legalizing: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
Legalizing non-extending load operation

Combining: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32

Legalizing: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32
Legalizing non-extending load operation

Combining: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32

Legalizing: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
Legal node: nothing to do

Combining: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1

Legalizing: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1

Combining: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1

Legalizing: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
Legal node: nothing to do

Combining: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1

Legalizing: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1
Legal node: nothing to do

Combining: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1

Legalizing: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1
Legal node: nothing to do

Combining: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1

Legalizing: t349: ch,glue = CopyToReg t347, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t349: ch,glue = CopyToReg t347, Register:i32 $r0, t1488

Legalizing: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t978: ch = TokenFactor t976, t977
Legal node: nothing to do

Combining: t978: ch = TokenFactor t976, t977

Legalizing: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t1166, t1078, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t1166, t1078, undef:i32

Legalizing: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t1169, FrameIndex:i32<12>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t1169, FrameIndex:i32<12>, undef:i32

Legalizing: t973: ch = TokenFactor t971:1, t972:1
Legal node: nothing to do

Combining: t973: ch = TokenFactor t971:1, t972:1

Legalizing: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
Legalizing non-extending load operation

Combining: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32

Legalizing: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32
Legalizing non-extending load operation

Combining: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32

Legalizing: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
Legal node: nothing to do

Combining: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1

Legalizing: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1

Combining: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1

Legalizing: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
Legal node: nothing to do

Combining: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1

Legalizing: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1
Legal node: nothing to do

Combining: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1

Legalizing: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1
Legal node: nothing to do

Combining: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1

Legalizing: t336: ch,glue = CopyToReg t334, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t336: ch,glue = CopyToReg t334, Register:i32 $r0, t1488

Legalizing: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t970: ch = TokenFactor t968, t969
Legal node: nothing to do

Combining: t970: ch = TokenFactor t968, t969

Legalizing: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t1173, t1079, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t1173, t1079, undef:i32

Legalizing: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t1176, FrameIndex:i32<11>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t1176, FrameIndex:i32<11>, undef:i32

Legalizing: t965: ch = TokenFactor t963:1, t964:1
Legal node: nothing to do

Combining: t965: ch = TokenFactor t963:1, t964:1

Legalizing: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
Legalizing non-extending load operation

Combining: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32

Legalizing: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32
Legalizing non-extending load operation

Combining: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32

Legalizing: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
Legal node: nothing to do

Combining: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1

Legalizing: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1

Combining: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1

Legalizing: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
Legal node: nothing to do

Combining: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1

Legalizing: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1
Legal node: nothing to do

Combining: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1

Legalizing: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1
Legal node: nothing to do

Combining: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1

Legalizing: t323: ch,glue = CopyToReg t321, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t323: ch,glue = CopyToReg t321, Register:i32 $r0, t1488

Legalizing: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t962: ch = TokenFactor t960, t961
Legal node: nothing to do

Combining: t962: ch = TokenFactor t960, t961

Legalizing: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t1180, t1080, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t1180, t1080, undef:i32

Legalizing: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t1183, FrameIndex:i32<10>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t1183, FrameIndex:i32<10>, undef:i32

Legalizing: t957: ch = TokenFactor t955:1, t956:1
Legal node: nothing to do

Combining: t957: ch = TokenFactor t955:1, t956:1

Legalizing: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
Legalizing non-extending load operation

Combining: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32

Legalizing: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32
Legalizing non-extending load operation

Combining: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32

Legalizing: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
Legal node: nothing to do

Combining: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1

Legalizing: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1

Combining: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1

Legalizing: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
Legal node: nothing to do

Combining: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1

Legalizing: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1
Legal node: nothing to do

Combining: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1

Legalizing: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1
Legal node: nothing to do

Combining: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1

Legalizing: t310: ch,glue = CopyToReg t308, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t310: ch,glue = CopyToReg t308, Register:i32 $r0, t1488

Legalizing: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t954: ch = TokenFactor t952, t953
Legal node: nothing to do

Combining: t954: ch = TokenFactor t952, t953

Legalizing: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t1187, t1081, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t1187, t1081, undef:i32

Legalizing: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t1190, FrameIndex:i32<9>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t1190, FrameIndex:i32<9>, undef:i32

Legalizing: t949: ch = TokenFactor t947:1, t948:1
Legal node: nothing to do

Combining: t949: ch = TokenFactor t947:1, t948:1

Legalizing: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
Legalizing non-extending load operation

Combining: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32

Legalizing: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32
Legalizing non-extending load operation

Combining: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32

Legalizing: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
Legal node: nothing to do

Combining: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1

Legalizing: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1

Combining: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1

Legalizing: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
Legal node: nothing to do

Combining: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1

Legalizing: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1
Legal node: nothing to do

Combining: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1

Legalizing: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1
Legal node: nothing to do

Combining: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1

Legalizing: t297: ch,glue = CopyToReg t295, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t297: ch,glue = CopyToReg t295, Register:i32 $r0, t1488

Legalizing: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t946: ch = TokenFactor t944, t945
Legal node: nothing to do

Combining: t946: ch = TokenFactor t944, t945

Legalizing: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t1194, t1082, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t1194, t1082, undef:i32

Legalizing: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t1197, FrameIndex:i32<8>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t1197, FrameIndex:i32<8>, undef:i32

Legalizing: t941: ch = TokenFactor t939:1, t940:1
Legal node: nothing to do

Combining: t941: ch = TokenFactor t939:1, t940:1

Legalizing: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
Legalizing non-extending load operation

Combining: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32

Legalizing: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32
Legalizing non-extending load operation

Combining: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32

Legalizing: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
Legal node: nothing to do

Combining: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1

Legalizing: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1

Combining: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1

Legalizing: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
Legal node: nothing to do

Combining: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1

Legalizing: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1
Legal node: nothing to do

Combining: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1

Legalizing: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1
Legal node: nothing to do

Combining: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1

Legalizing: t284: ch,glue = CopyToReg t282, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t284: ch,glue = CopyToReg t282, Register:i32 $r0, t1488

Legalizing: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t938: ch = TokenFactor t936, t937
Legal node: nothing to do

Combining: t938: ch = TokenFactor t936, t937

Legalizing: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t1201, t1083, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t1201, t1083, undef:i32

Legalizing: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t1204, FrameIndex:i32<7>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t1204, FrameIndex:i32<7>, undef:i32

Legalizing: t933: ch = TokenFactor t931:1, t932:1
Legal node: nothing to do

Combining: t933: ch = TokenFactor t931:1, t932:1

Legalizing: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
Legalizing non-extending load operation

Combining: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32

Legalizing: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32
Legalizing non-extending load operation

Combining: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32

Legalizing: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
Legal node: nothing to do

Combining: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1

Legalizing: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1

Combining: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1

Legalizing: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
Legal node: nothing to do

Combining: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1

Legalizing: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1
Legal node: nothing to do

Combining: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1

Legalizing: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1
Legal node: nothing to do

Combining: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1

Legalizing: t271: ch,glue = CopyToReg t269, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t271: ch,glue = CopyToReg t269, Register:i32 $r0, t1488

Legalizing: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t930: ch = TokenFactor t928, t929
Legal node: nothing to do

Combining: t930: ch = TokenFactor t928, t929

Legalizing: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t1208, t1084, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t1208, t1084, undef:i32

Legalizing: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t1211, FrameIndex:i32<6>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t1211, FrameIndex:i32<6>, undef:i32

Legalizing: t925: ch = TokenFactor t923:1, t924:1
Legal node: nothing to do

Combining: t925: ch = TokenFactor t923:1, t924:1

Legalizing: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
Legalizing non-extending load operation

Combining: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32

Legalizing: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32
Legalizing non-extending load operation

Combining: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32

Legalizing: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
Legal node: nothing to do

Combining: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1

Legalizing: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1

Combining: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1

Legalizing: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
Legal node: nothing to do

Combining: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1

Legalizing: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1
Legal node: nothing to do

Combining: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1

Legalizing: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1
Legal node: nothing to do

Combining: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1

Legalizing: t258: ch,glue = CopyToReg t256, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t258: ch,glue = CopyToReg t256, Register:i32 $r0, t1488

Legalizing: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t922: ch = TokenFactor t920, t921
Legal node: nothing to do

Combining: t922: ch = TokenFactor t920, t921

Legalizing: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t1215, t1085, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t1215, t1085, undef:i32

Legalizing: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t1218, FrameIndex:i32<5>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t1218, FrameIndex:i32<5>, undef:i32

Legalizing: t917: ch = TokenFactor t915:1, t916:1
Legal node: nothing to do

Combining: t917: ch = TokenFactor t915:1, t916:1

Legalizing: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
Legalizing non-extending load operation

Combining: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32

Legalizing: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32
Legalizing non-extending load operation

Combining: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32

Legalizing: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
Legal node: nothing to do

Combining: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1

Legalizing: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1

Combining: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1

Legalizing: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
Legal node: nothing to do

Combining: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1

Legalizing: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1
Legal node: nothing to do

Combining: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1

Legalizing: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1
Legal node: nothing to do

Combining: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1

Legalizing: t245: ch,glue = CopyToReg t243, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t245: ch,glue = CopyToReg t243, Register:i32 $r0, t1488

Legalizing: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t914: ch = TokenFactor t912, t913
Legal node: nothing to do

Combining: t914: ch = TokenFactor t912, t913

Legalizing: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t1222, t1086, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t1222, t1086, undef:i32

Legalizing: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t1225, FrameIndex:i32<4>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t1225, FrameIndex:i32<4>, undef:i32

Legalizing: t909: ch = TokenFactor t907:1, t908:1
Legal node: nothing to do

Combining: t909: ch = TokenFactor t907:1, t908:1

Legalizing: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
Legalizing non-extending load operation

Combining: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32

Legalizing: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32
Legalizing non-extending load operation

Combining: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32

Legalizing: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
Legal node: nothing to do

Combining: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1

Legalizing: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1

Combining: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1

Legalizing: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
Legal node: nothing to do

Combining: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1

Legalizing: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1
Legal node: nothing to do

Combining: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1

Legalizing: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1
Legal node: nothing to do

Combining: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1

Legalizing: t227: ch,glue = CopyToReg t223, Register:i32 $r0, t1488
Legal node: nothing to do

Combining: t227: ch,glue = CopyToReg t223, Register:i32 $r0, t1488

Legalizing: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t906: ch = TokenFactor t904, t905
Legal node: nothing to do

Combining: t906: ch = TokenFactor t904, t905

Legalizing: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t1229, t1087, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t1229, t1087, undef:i32

Legalizing: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t1232, FrameIndex:i32<3>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t1232, FrameIndex:i32<3>, undef:i32

Legalizing: t901: ch = TokenFactor t899:1, t900:1
Legal node: nothing to do

Combining: t901: ch = TokenFactor t899:1, t900:1

Legalizing: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
Legalizing non-extending load operation

Combining: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32

Legalizing: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32
Legalizing non-extending load operation

Combining: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32

Legalizing: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32

Legalizing: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
Legal node: nothing to do

Combining: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1

Legalizing: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1

Combining: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1

Legalizing: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
Legal node: nothing to do

Combining: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1

Legalizing: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
Legal node: nothing to do

Combining: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

Legalizing: t880: i32 = or t878, t712
Legal node: nothing to do

Combining: t880: i32 = or t878, t712

Legalizing: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
Legal node: nothing to do

Combining: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

Legalizing: t878: i32 = or t876, t745
Legal node: nothing to do

Combining: t878: i32 = or t876, t745

Legalizing: t879: i32 = or t877, t711
Legal node: nothing to do

Combining: t879: i32 = or t877, t711

Legalizing: t876: i32 = or t874, t856
Legal node: nothing to do

Combining: t876: i32 = or t874, t856

Legalizing: t877: i32 = or t875, t744
Legal node: nothing to do

Combining: t877: i32 = or t875, t744

Legalizing: t856: i32 = and t854, t767
Legal node: nothing to do

Combining: t856: i32 = and t854, t767

Legalizing: t875: i32 = or t873, t855
Legal node: nothing to do

Combining: t875: i32 = or t873, t855

Legalizing: t854: i32 = and t1236, t1243
Legal node: nothing to do

Combining: t854: i32 = and t1236, t1243

Legalizing: t855: i32 = and t853, t766
Legal node: nothing to do

Combining: t855: i32 = and t853, t766

Legalizing: t853: i32 = and t1239, t1246
Legal node: nothing to do

Combining: t853: i32 = and t1239, t1246

Legalizing: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
Legal node: nothing to do

Combining: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

Legalizing: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
Legal node: nothing to do

Combining: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1

Legalizing: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1

Combining: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1

Legalizing: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
Legal node: nothing to do

Combining: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1

Legalizing: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
Legal node: nothing to do

Combining: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

Legalizing: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
Legal node: nothing to do

Combining: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

Legalizing: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
Legal node: nothing to do

Combining: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

Legalizing: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
Legal node: nothing to do

Combining: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

Legalizing: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
Legal node: nothing to do

Combining: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

Legalizing: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
Legal node: nothing to do

Combining: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

Legalizing: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
Legal node: nothing to do

Combining: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

Legalizing: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
Legal node: nothing to do

Combining: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824

Legalizing: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
Legal node: nothing to do

Combining: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1

Legalizing: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
Legal node: nothing to do

Combining: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1

Legalizing: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
Legal node: nothing to do

Combining: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1

Legalizing: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
Legal node: nothing to do

Combining: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1

Legalizing: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1

Combining: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1

Legalizing: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1

Combining: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1

Legalizing: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1

Combining: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1

Legalizing: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1

Combining: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1

Legalizing: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
Legal node: nothing to do

Combining: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1

Legalizing: t745: i32 = xor t742, t740
Legal node: nothing to do

Combining: t745: i32 = xor t742, t740

Legalizing: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
Legal node: nothing to do

Combining: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1

Legalizing: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
Legal node: nothing to do

Combining: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1

Legalizing: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
Legal node: nothing to do

Combining: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1

Legalizing: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
Legal node: nothing to do

Combining: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

Legalizing: t740: i32 = and t1251, t1256
Legal node: nothing to do

Combining: t740: i32 = and t1251, t1256

Legalizing: t744: i32 = xor t741, t739
Legal node: nothing to do

Combining: t744: i32 = xor t741, t739

Legalizing: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
Legal node: nothing to do

Combining: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

Legalizing: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
Legal node: nothing to do

Combining: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

Legalizing: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
Legal node: nothing to do

Combining: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

Legalizing: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
Legal node: nothing to do

Combining: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1

Legalizing: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
Legal node: nothing to do

Combining: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

Legalizing: t739: i32 = and t1265, t1269
Legal node: nothing to do

Combining: t739: i32 = and t1265, t1269

Legalizing: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
Legal node: nothing to do

Combining: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

Legalizing: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
Legal node: nothing to do

Combining: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

Legalizing: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
Legal node: nothing to do

Combining: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

Legalizing: t873: i32 = or t871, t857
Legal node: nothing to do

Combining: t873: i32 = or t871, t857

Legalizing: t874: i32 = or t872, t858
Legal node: nothing to do

Combining: t874: i32 = or t872, t858

Legalizing: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
Legal node: nothing to do

Combining: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165

Legalizing: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
Legal node: nothing to do

Combining: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

Legalizing: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
Legal node: nothing to do

Combining: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

Legalizing: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
Legal node: nothing to do

Combining: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

Legalizing: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
Legal node: nothing to do

Combining: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

Legalizing: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
Legal node: nothing to do

Combining: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

Legalizing: t871: i32 = or t869, t860
Legal node: nothing to do

Combining: t871: i32 = or t869, t860

Legalizing: t872: i32 = or t870, t861
Legal node: nothing to do

Combining: t872: i32 = or t870, t861

Legalizing: t165: i32 = add nsw t163, t164
Legal node: nothing to do

Combining: t165: i32 = add nsw t163, t164

Legalizing: t689: ch = TokenFactor t687:1, t688:1
Legal node: nothing to do

Combining: t689: ch = TokenFactor t687:1, t688:1

Legalizing: t690: i32 = xor t687, Constant:i32<-1>
Legal node: nothing to do

Combining: t690: i32 = xor t687, Constant:i32<-1>

Legalizing: t691: i32 = xor t688, Constant:i32<-1>
Legal node: nothing to do

Combining: t691: i32 = xor t688, Constant:i32<-1>

Legalizing: t694: ch = TokenFactor t692:1, t693:1
Legal node: nothing to do

Combining: t694: ch = TokenFactor t692:1, t693:1

Legalizing: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
Legal node: nothing to do

Combining: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692

Legalizing: t720: ch = TokenFactor t718:1, t719:1
Legal node: nothing to do

Combining: t720: ch = TokenFactor t718:1, t719:1

Legalizing: t723: ch = TokenFactor t721:1, t722:1
Legal node: nothing to do

Combining: t723: ch = TokenFactor t721:1, t722:1

Legalizing: t728: ch = TokenFactor t726:1, t727:1
Legal node: nothing to do

Combining: t728: ch = TokenFactor t726:1, t727:1

Legalizing: t731: ch = TokenFactor t729:1, t730:1
Legal node: nothing to do

Combining: t731: ch = TokenFactor t729:1, t730:1

Legalizing: t734: ch = TokenFactor t732:1, t733:1
Legal node: nothing to do

Combining: t734: ch = TokenFactor t732:1, t733:1

Legalizing: t743: ch = TokenFactor t741:1, t742:1
Legal node: nothing to do

Combining: t743: ch = TokenFactor t741:1, t742:1

Legalizing: t748: ch = TokenFactor t746:1, t747:1
Legal node: nothing to do

Combining: t748: ch = TokenFactor t746:1, t747:1

Legalizing: t751: ch = TokenFactor t749:1, t750:1
Legal node: nothing to do

Combining: t751: ch = TokenFactor t749:1, t750:1

Legalizing: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
Legal node: nothing to do

Combining: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749

Legalizing: t774: ch = TokenFactor t772:1, t773:1
Legal node: nothing to do

Combining: t774: ch = TokenFactor t772:1, t773:1

Legalizing: t777: ch = TokenFactor t775:1, t776:1
Legal node: nothing to do

Combining: t777: ch = TokenFactor t775:1, t776:1

Legalizing: t780: ch = TokenFactor t778:1, t779:1
Legal node: nothing to do

Combining: t780: ch = TokenFactor t778:1, t779:1

Legalizing: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
Legal node: nothing to do

Combining: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778

Legalizing: t803: ch = TokenFactor t801:1, t802:1
Legal node: nothing to do

Combining: t803: ch = TokenFactor t801:1, t802:1

Legalizing: t806: ch = TokenFactor t804:1, t805:1
Legal node: nothing to do

Combining: t806: ch = TokenFactor t804:1, t805:1

Legalizing: t809: ch = TokenFactor t807:1, t808:1
Legal node: nothing to do

Combining: t809: ch = TokenFactor t807:1, t808:1

Legalizing: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
Legal node: nothing to do

Combining: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807

Legalizing: t850: ch = TokenFactor t848:1, t849:1
Legal node: nothing to do

Combining: t850: ch = TokenFactor t848:1, t849:1

Legalizing: t859: ch = TokenFactor t857:1, t858:1
Legal node: nothing to do

Combining: t859: ch = TokenFactor t857:1, t858:1

Legalizing: t862: ch = TokenFactor t860:1, t861:1
Legal node: nothing to do

Combining: t862: ch = TokenFactor t860:1, t861:1

Legalizing: t865: ch = TokenFactor t863:1, t864:1
Legal node: nothing to do

Combining: t865: ch = TokenFactor t863:1, t864:1

Legalizing: t869: i32 = and t866, t863
Legal node: nothing to do

Combining: t869: i32 = and t866, t863

Legalizing: t870: i32 = and t867, t864
Legal node: nothing to do

Combining: t870: i32 = and t867, t864

Legalizing: t868: ch = TokenFactor t866:1, t867:1
Legal node: nothing to do

Combining: t868: ch = TokenFactor t866:1, t867:1

Legalizing: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
Legalizing non-extending load operation

Combining: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32

Legalizing: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
Legalizing non-extending load operation

Combining: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32

Legalizing: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
Legalizing non-extending load operation

Combining: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32

Legalizing: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32
Legalizing non-extending load operation

Combining: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32

Legalizing: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
Legalizing non-extending load operation

Combining: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32

Legalizing: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32
Legalizing non-extending load operation

Combining: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32

Legalizing: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
Legalizing non-extending load operation

Combining: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32

Legalizing: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32
Legalizing non-extending load operation

Combining: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32

Legalizing: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
Legalizing non-extending load operation

Combining: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32

Legalizing: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32
Legalizing non-extending load operation

Combining: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32

Legalizing: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
Legalizing non-extending load operation

Combining: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32

Legalizing: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32
Legalizing non-extending load operation

Combining: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32

Legalizing: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
Legalizing non-extending load operation

Combining: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32

Legalizing: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32
Legalizing non-extending load operation

Combining: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32

Legalizing: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
Legalizing non-extending load operation

Combining: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32

Legalizing: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32
Legalizing non-extending load operation

Combining: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32

Legalizing: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
Legalizing non-extending load operation

Combining: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32

Legalizing: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32
Legalizing non-extending load operation

Combining: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32

Legalizing: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
Legalizing non-extending load operation

Combining: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32

Legalizing: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32
Legalizing non-extending load operation

Combining: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32

Legalizing: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
Legalizing non-extending load operation

Combining: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32

Legalizing: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32
Legalizing non-extending load operation

Combining: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32

Legalizing: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
Legalizing non-extending load operation

Combining: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32

Legalizing: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32
Legalizing non-extending load operation

Combining: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32

Legalizing: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
Legalizing non-extending load operation

Combining: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32

Legalizing: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32
Legalizing non-extending load operation

Combining: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32

Legalizing: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
Legalizing non-extending load operation

Combining: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32

Legalizing: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32
Legalizing non-extending load operation

Combining: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32

Legalizing: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
Legalizing non-extending load operation

Combining: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32

Legalizing: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32
Legalizing non-extending load operation

Combining: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32

Legalizing: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
Legalizing non-extending load operation

Combining: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32

Legalizing: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32
Legalizing non-extending load operation

Combining: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32

Legalizing: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
Legalizing non-extending load operation

Combining: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32

Legalizing: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32
Legalizing non-extending load operation

Combining: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32

Legalizing: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
Legalizing non-extending load operation

Combining: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32

Legalizing: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32
Legalizing non-extending load operation

Combining: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32

Legalizing: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
Legalizing non-extending load operation

Combining: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32

Legalizing: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32
Legalizing non-extending load operation

Combining: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32

Legalizing: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
Legalizing non-extending load operation

Combining: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32

Legalizing: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32
Legalizing non-extending load operation

Combining: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32

Legalizing: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
Legalizing non-extending load operation

Combining: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32

Legalizing: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32
Legalizing non-extending load operation

Combining: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32

Legalizing: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
Legalizing non-extending load operation

Combining: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32

Legalizing: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32
Legalizing non-extending load operation

Combining: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32

Legalizing: t686: ch = TokenFactor t683, t685
Legal node: nothing to do

Combining: t686: ch = TokenFactor t683, t685

Legalizing: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t1278, t1067, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t1278, t1067, undef:i32

Legalizing: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t1282, FrameIndex:i32<23>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t1282, FrameIndex:i32<23>, undef:i32

Legalizing: t680: i32 = sra t158, Constant:i32<31>
Legal node: nothing to do

Combining: t680: i32 = sra t158, Constant:i32<31>

Legalizing: t158: i32 = mul nsw t156, Constant:i32<21>
Legal node: nothing to do

Combining: t158: i32 = mul nsw t156, Constant:i32<21>

Legalizing: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32

Legalizing: t679: ch = TokenFactor t676, t678
Legal node: nothing to do

Combining: t679: ch = TokenFactor t676, t678

Legalizing: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t1288, t1068, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t1288, t1068, undef:i32

Legalizing: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t1292, FrameIndex:i32<22>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t1292, FrameIndex:i32<22>, undef:i32

Legalizing: t673: i32 = sra t151, Constant:i32<31>
Legal node: nothing to do

Combining: t673: i32 = sra t151, Constant:i32<31>

Legalizing: t151: i32 = mul nsw t149, Constant:i32<20>
Legal node: nothing to do

Combining: t151: i32 = mul nsw t149, Constant:i32<20>

Legalizing: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32

Legalizing: t672: ch = TokenFactor t669, t671
Legal node: nothing to do

Combining: t672: ch = TokenFactor t669, t671

Legalizing: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t1298, t1069, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t1298, t1069, undef:i32

Legalizing: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t1302, FrameIndex:i32<21>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t1302, FrameIndex:i32<21>, undef:i32

Legalizing: t666: i32 = sra t144, Constant:i32<31>
Legal node: nothing to do

Combining: t666: i32 = sra t144, Constant:i32<31>

Legalizing: t144: i32 = mul nsw t142, Constant:i32<19>
Legal node: nothing to do

Combining: t144: i32 = mul nsw t142, Constant:i32<19>

Legalizing: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32

Legalizing: t665: ch = TokenFactor t662, t664
Legal node: nothing to do

Combining: t665: ch = TokenFactor t662, t664

Legalizing: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t1308, t1070, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t1308, t1070, undef:i32

Legalizing: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t1312, FrameIndex:i32<20>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t1312, FrameIndex:i32<20>, undef:i32

Legalizing: t659: i32 = sra t137, Constant:i32<31>
Legal node: nothing to do

Combining: t659: i32 = sra t137, Constant:i32<31>

Legalizing: t137: i32 = mul nsw t135, Constant:i32<18>
Legal node: nothing to do

Combining: t137: i32 = mul nsw t135, Constant:i32<18>

Legalizing: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32

Legalizing: t658: ch = TokenFactor t655, t657
Legal node: nothing to do

Combining: t658: ch = TokenFactor t655, t657

Legalizing: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t1318, t1071, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t1318, t1071, undef:i32

Legalizing: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t1322, FrameIndex:i32<19>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t1322, FrameIndex:i32<19>, undef:i32

Legalizing: t652: i32 = sra t130, Constant:i32<31>
Legal node: nothing to do

Combining: t652: i32 = sra t130, Constant:i32<31>

Legalizing: t130: i32 = mul nsw t128, Constant:i32<17>
Legal node: nothing to do

Combining: t130: i32 = mul nsw t128, Constant:i32<17>

Legalizing: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32

Legalizing: t651: ch = TokenFactor t648, t650
Legal node: nothing to do

Combining: t651: ch = TokenFactor t648, t650

Legalizing: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t1328, t1072, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t1328, t1072, undef:i32

Legalizing: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t1332, FrameIndex:i32<18>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t1332, FrameIndex:i32<18>, undef:i32

Legalizing: t645: i32 = sra t511, Constant:i32<31>
Legal node: nothing to do

Combining: t645: i32 = sra t511, Constant:i32<31>

Legalizing: t511: i32 = shl t121, Constant:i32<4>
Legal node: nothing to do

Combining: t511: i32 = shl t121, Constant:i32<4>

Legalizing: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32

Legalizing: t644: ch = TokenFactor t641, t643
Legal node: nothing to do

Combining: t644: ch = TokenFactor t641, t643

Legalizing: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t1338, t1073, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t1338, t1073, undef:i32

Legalizing: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t1342, FrameIndex:i32<17>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t1342, FrameIndex:i32<17>, undef:i32

Legalizing: t638: i32 = sra t116, Constant:i32<31>
Legal node: nothing to do

Combining: t638: i32 = sra t116, Constant:i32<31>

Legalizing: t116: i32 = mul nsw t114, Constant:i32<15>
Legal node: nothing to do

Combining: t116: i32 = mul nsw t114, Constant:i32<15>

Legalizing: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32

Legalizing: t637: ch = TokenFactor t634, t636
Legal node: nothing to do

Combining: t637: ch = TokenFactor t634, t636

Legalizing: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t1348, t1074, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t1348, t1074, undef:i32

Legalizing: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t1352, FrameIndex:i32<16>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t1352, FrameIndex:i32<16>, undef:i32

Legalizing: t631: i32 = sra t109, Constant:i32<31>
Legal node: nothing to do

Combining: t631: i32 = sra t109, Constant:i32<31>

Legalizing: t109: i32 = mul nsw t107, Constant:i32<14>
Legal node: nothing to do

Combining: t109: i32 = mul nsw t107, Constant:i32<14>

Legalizing: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32

Legalizing: t630: ch = TokenFactor t627, t629
Legal node: nothing to do

Combining: t630: ch = TokenFactor t627, t629

Legalizing: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t1358, t1075, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t1358, t1075, undef:i32

Legalizing: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t1362, FrameIndex:i32<15>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t1362, FrameIndex:i32<15>, undef:i32

Legalizing: t624: i32 = sra t102, Constant:i32<31>
Legal node: nothing to do

Combining: t624: i32 = sra t102, Constant:i32<31>

Legalizing: t102: i32 = mul nsw t100, Constant:i32<13>
Legal node: nothing to do

Combining: t102: i32 = mul nsw t100, Constant:i32<13>

Legalizing: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32

Legalizing: t623: ch = TokenFactor t620, t622
Legal node: nothing to do

Combining: t623: ch = TokenFactor t620, t622

Legalizing: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t1368, t1076, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t1368, t1076, undef:i32

Legalizing: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t1372, FrameIndex:i32<14>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t1372, FrameIndex:i32<14>, undef:i32

Legalizing: t617: i32 = sra t95, Constant:i32<31>
Legal node: nothing to do

Combining: t617: i32 = sra t95, Constant:i32<31>

Legalizing: t95: i32 = mul nsw t93, Constant:i32<12>
Legal node: nothing to do

Combining: t95: i32 = mul nsw t93, Constant:i32<12>

Legalizing: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32

Legalizing: t616: ch = TokenFactor t613, t615
Legal node: nothing to do

Combining: t616: ch = TokenFactor t613, t615

Legalizing: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t1378, t1077, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t1378, t1077, undef:i32

Legalizing: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t1382, FrameIndex:i32<13>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t1382, FrameIndex:i32<13>, undef:i32

Legalizing: t610: i32 = sra t88, Constant:i32<31>
Legal node: nothing to do

Combining: t610: i32 = sra t88, Constant:i32<31>

Legalizing: t88: i32 = mul nsw t86, Constant:i32<11>
Legal node: nothing to do

Combining: t88: i32 = mul nsw t86, Constant:i32<11>

Legalizing: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32

Legalizing: t609: ch = TokenFactor t606, t608
Legal node: nothing to do

Combining: t609: ch = TokenFactor t606, t608

Legalizing: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t1388, t1078, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t1388, t1078, undef:i32

Legalizing: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t1392, FrameIndex:i32<12>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t1392, FrameIndex:i32<12>, undef:i32

Legalizing: t603: i32 = sra t81, Constant:i32<31>
Legal node: nothing to do

Combining: t603: i32 = sra t81, Constant:i32<31>

Legalizing: t81: i32 = mul nsw t79, Constant:i32<10>
Legal node: nothing to do

Combining: t81: i32 = mul nsw t79, Constant:i32<10>

Legalizing: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32

Legalizing: t602: ch = TokenFactor t599, t601
Legal node: nothing to do

Combining: t602: ch = TokenFactor t599, t601

Legalizing: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t1398, t1079, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t1398, t1079, undef:i32

Legalizing: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t1402, FrameIndex:i32<11>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t1402, FrameIndex:i32<11>, undef:i32

Legalizing: t596: i32 = sra t74, Constant:i32<31>
Legal node: nothing to do

Combining: t596: i32 = sra t74, Constant:i32<31>

Legalizing: t74: i32 = mul nsw t72, Constant:i32<9>
Legal node: nothing to do

Combining: t74: i32 = mul nsw t72, Constant:i32<9>

Legalizing: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32

Legalizing: t595: ch = TokenFactor t592, t594
Legal node: nothing to do

Combining: t595: ch = TokenFactor t592, t594

Legalizing: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t1408, t1080, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t1408, t1080, undef:i32

Legalizing: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t1412, FrameIndex:i32<10>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t1412, FrameIndex:i32<10>, undef:i32

Legalizing: t589: i32 = sra t522, Constant:i32<31>
Legal node: nothing to do

Combining: t589: i32 = sra t522, Constant:i32<31>

Legalizing: t522: i32 = shl t65, Constant:i32<3>
Legal node: nothing to do

Combining: t522: i32 = shl t65, Constant:i32<3>

Legalizing: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32

Legalizing: t588: ch = TokenFactor t585, t587
Legal node: nothing to do

Combining: t588: ch = TokenFactor t585, t587

Legalizing: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t1418, t1081, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t1418, t1081, undef:i32

Legalizing: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t1422, FrameIndex:i32<9>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t1422, FrameIndex:i32<9>, undef:i32

Legalizing: t582: i32 = sra t60, Constant:i32<31>
Legal node: nothing to do

Combining: t582: i32 = sra t60, Constant:i32<31>

Legalizing: t60: i32 = mul nsw t58, Constant:i32<7>
Legal node: nothing to do

Combining: t60: i32 = mul nsw t58, Constant:i32<7>

Legalizing: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32

Legalizing: t581: ch = TokenFactor t578, t580
Legal node: nothing to do

Combining: t581: ch = TokenFactor t578, t580

Legalizing: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t1428, t1082, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t1428, t1082, undef:i32

Legalizing: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t1432, FrameIndex:i32<8>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t1432, FrameIndex:i32<8>, undef:i32

Legalizing: t575: i32 = sra t53, Constant:i32<31>
Legal node: nothing to do

Combining: t575: i32 = sra t53, Constant:i32<31>

Legalizing: t53: i32 = mul nsw t51, Constant:i32<6>
Legal node: nothing to do

Combining: t53: i32 = mul nsw t51, Constant:i32<6>

Legalizing: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32

Legalizing: t574: ch = TokenFactor t571, t573
Legal node: nothing to do

Combining: t574: ch = TokenFactor t571, t573

Legalizing: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t1438, t1083, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t1438, t1083, undef:i32

Legalizing: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t1442, FrameIndex:i32<7>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t1442, FrameIndex:i32<7>, undef:i32

Legalizing: t568: i32 = sra t46, Constant:i32<31>
Legal node: nothing to do

Combining: t568: i32 = sra t46, Constant:i32<31>

Legalizing: t46: i32 = mul nsw t44, Constant:i32<5>
Legal node: nothing to do

Combining: t46: i32 = mul nsw t44, Constant:i32<5>

Legalizing: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32

Legalizing: t567: ch = TokenFactor t564, t566
Legal node: nothing to do

Combining: t567: ch = TokenFactor t564, t566

Legalizing: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t1448, t1084, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t1448, t1084, undef:i32

Legalizing: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t1452, FrameIndex:i32<6>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t1452, FrameIndex:i32<6>, undef:i32

Legalizing: t561: i32 = sra t529, Constant:i32<31>
Legal node: nothing to do

Combining: t561: i32 = sra t529, Constant:i32<31>

Legalizing: t529: i32 = shl t37, Constant:i32<2>
Legal node: nothing to do

Combining: t529: i32 = shl t37, Constant:i32<2>

Legalizing: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32

Legalizing: t560: ch = TokenFactor t557, t559
Legal node: nothing to do

Combining: t560: ch = TokenFactor t557, t559

Legalizing: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t1458, t1085, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t1458, t1085, undef:i32

Legalizing: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t1462, FrameIndex:i32<5>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t1462, FrameIndex:i32<5>, undef:i32

Legalizing: t554: i32 = sra t32, Constant:i32<31>
Legal node: nothing to do

Combining: t554: i32 = sra t32, Constant:i32<31>

Legalizing: t32: i32 = mul nsw t30, Constant:i32<3>
Legal node: nothing to do

Combining: t32: i32 = mul nsw t30, Constant:i32<3>

Legalizing: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32

Legalizing: t553: ch = TokenFactor t550, t552
Legal node: nothing to do

Combining: t553: ch = TokenFactor t550, t552

Legalizing: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t1468, t1086, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t1468, t1086, undef:i32

Legalizing: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t1472, FrameIndex:i32<4>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t1472, FrameIndex:i32<4>, undef:i32

Legalizing: t547: i32 = sra t534, Constant:i32<31>
Legal node: nothing to do

Combining: t547: i32 = sra t534, Constant:i32<31>

Legalizing: t534: i32 = shl t23, Constant:i32<1>
Legal node: nothing to do

Combining: t534: i32 = shl t23, Constant:i32<1>

Legalizing: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32

Legalizing: t546: ch = TokenFactor t543, t545
Legal node: nothing to do

Combining: t546: ch = TokenFactor t543, t545

Legalizing: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t1478, t1087, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t1478, t1087, undef:i32

Legalizing: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t1482, FrameIndex:i32<3>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t1482, FrameIndex:i32<3>, undef:i32

Legalizing: t540: i32 = sra t538, Constant:i32<31>
Legal node: nothing to do

Combining: t540: i32 = sra t538, Constant:i32<31>

Legalizing: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32

Legalizing: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32

Legalizing: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32

Legalizing: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32

Legalizing: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>
Legal node: nothing to do

Combining: t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>

Legalizing: t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>
Legal node: nothing to do

Combining: t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>

Legalizing: t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>
Legal node: nothing to do

Combining: t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>

Legalizing: t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>
Legal node: nothing to do

Combining: t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>

Legalizing: t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>
Legal node: nothing to do

Combining: t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>

Legalizing: t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>
Legal node: nothing to do

Combining: t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>

Legalizing: t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>
Legal node: nothing to do

Combining: t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>

Legalizing: t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>
Legal node: nothing to do

Combining: t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>

Legalizing: t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>
Legal node: nothing to do

Combining: t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>

Legalizing: t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>
Legal node: nothing to do

Combining: t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>

Legalizing: t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>
Legal node: nothing to do

Combining: t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>

Legalizing: t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>
Legal node: nothing to do

Combining: t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>

Legalizing: t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>
Legal node: nothing to do

Combining: t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>

Legalizing: t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>
Legal node: nothing to do

Combining: t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>

Legalizing: t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>
Legal node: nothing to do

Combining: t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>

Legalizing: t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>
Legal node: nothing to do

Combining: t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>

Legalizing: t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>
Legal node: nothing to do

Combining: t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>

Legalizing: t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>
Legal node: nothing to do

Combining: t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>

Legalizing: t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>
Legal node: nothing to do

Combining: t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>

Legalizing: t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>
Legal node: nothing to do

Combining: t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>

Legalizing: t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>
Legal node: nothing to do

Combining: t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>

Legalizing: t6: i32,ch = CopyFromReg t0, Register:i32 %2
Legal node: nothing to do

Combining: t6: i32,ch = CopyFromReg t0, Register:i32 %2

Legalizing: t4: i32,ch = CopyFromReg t0, Register:i32 %1
Legal node: nothing to do

Combining: t4: i32,ch = CopyFromReg t0, Register:i32 %1

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Legal node: nothing to do

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %0

Legalizing: t821: i32 = TargetExternalSymbol'__divdi3'
Legal node: nothing to do

Combining: t821: i32 = TargetExternalSymbol'__divdi3'

Legalizing: t763: i32 = TargetExternalSymbol'__muldi3'
Legal node: nothing to do

Combining: t763: i32 = TargetExternalSymbol'__muldi3'

Legalizing: t708: i32 = TargetExternalSymbol'__moddi3'
Legal node: nothing to do

Combining: t708: i32 = TargetExternalSymbol'__moddi3'

Legalizing: t704: i32 = Register $r1

Combining: t704: i32 = Register $r1

Legalizing: t539: i32 = Constant<31>
Legal node: nothing to do

Combining: t539: i32 = Constant<31>

Legalizing: t537: i32 = Constant<-1>
Legal node: nothing to do

Combining: t537: i32 = Constant<-1>

Legalizing: t235: i32 = TargetConstant<-1>

Combining: t235: i32 = TargetConstant<-1>

Legalizing: t233: Untyped = RegisterMask
Legal node: nothing to do

Combining: t233: Untyped = RegisterMask

Legalizing: t232: i32 = TargetGlobalAddress<ptr @printf> 0
Legal node: nothing to do

Combining: t232: i32 = TargetGlobalAddress<ptr @printf> 0

Legalizing: t230: i32 = Register $r3

Combining: t230: i32 = Register $r3

Legalizing: t228: i32 = Register $r2

Combining: t228: i32 = Register $r2

Legalizing: t226: i32 = Register $r0

Combining: t226: i32 = Register $r0

Legalizing: t222: i32 = TargetConstant<0>

Combining: t222: i32 = TargetConstant<0>

Legalizing: t211: i32 = FrameIndex<24>
Legal node: nothing to do

Combining: t211: i32 = FrameIndex<24>

Legalizing: t161: i32 = FrameIndex<23>
Legal node: nothing to do

Combining: t161: i32 = FrameIndex<23>

Legalizing: t157: i32 = Constant<21>
Legal node: nothing to do

Combining: t157: i32 = Constant<21>

Legalizing: t154: i32 = FrameIndex<22>
Legal node: nothing to do

Combining: t154: i32 = FrameIndex<22>

Legalizing: t150: i32 = Constant<20>
Legal node: nothing to do

Combining: t150: i32 = Constant<20>

Legalizing: t147: i32 = FrameIndex<21>
Legal node: nothing to do

Combining: t147: i32 = FrameIndex<21>

Legalizing: t143: i32 = Constant<19>
Legal node: nothing to do

Combining: t143: i32 = Constant<19>

Legalizing: t140: i32 = FrameIndex<20>
Legal node: nothing to do

Combining: t140: i32 = FrameIndex<20>

Legalizing: t136: i32 = Constant<18>
Legal node: nothing to do

Combining: t136: i32 = Constant<18>

Legalizing: t133: i32 = FrameIndex<19>
Legal node: nothing to do

Combining: t133: i32 = FrameIndex<19>

Legalizing: t129: i32 = Constant<17>
Legal node: nothing to do

Combining: t129: i32 = Constant<17>

Legalizing: t126: i32 = FrameIndex<18>
Legal node: nothing to do

Combining: t126: i32 = FrameIndex<18>

Legalizing: t119: i32 = FrameIndex<17>
Legal node: nothing to do

Combining: t119: i32 = FrameIndex<17>

Legalizing: t115: i32 = Constant<15>
Legal node: nothing to do

Combining: t115: i32 = Constant<15>

Legalizing: t112: i32 = FrameIndex<16>
Legal node: nothing to do

Combining: t112: i32 = FrameIndex<16>

Legalizing: t108: i32 = Constant<14>
Legal node: nothing to do

Combining: t108: i32 = Constant<14>

Legalizing: t105: i32 = FrameIndex<15>
Legal node: nothing to do

Combining: t105: i32 = FrameIndex<15>

Legalizing: t101: i32 = Constant<13>
Legal node: nothing to do

Combining: t101: i32 = Constant<13>

Legalizing: t98: i32 = FrameIndex<14>
Legal node: nothing to do

Combining: t98: i32 = FrameIndex<14>

Legalizing: t94: i32 = Constant<12>
Legal node: nothing to do

Combining: t94: i32 = Constant<12>

Legalizing: t91: i32 = FrameIndex<13>
Legal node: nothing to do

Combining: t91: i32 = FrameIndex<13>

Legalizing: t87: i32 = Constant<11>
Legal node: nothing to do

Combining: t87: i32 = Constant<11>

Legalizing: t84: i32 = FrameIndex<12>
Legal node: nothing to do

Combining: t84: i32 = FrameIndex<12>

Legalizing: t80: i32 = Constant<10>
Legal node: nothing to do

Combining: t80: i32 = Constant<10>

Legalizing: t77: i32 = FrameIndex<11>
Legal node: nothing to do

Combining: t77: i32 = FrameIndex<11>

Legalizing: t73: i32 = Constant<9>
Legal node: nothing to do

Combining: t73: i32 = Constant<9>

Legalizing: t70: i32 = FrameIndex<10>
Legal node: nothing to do

Combining: t70: i32 = FrameIndex<10>

Legalizing: t63: i32 = FrameIndex<9>
Legal node: nothing to do

Combining: t63: i32 = FrameIndex<9>

Legalizing: t59: i32 = Constant<7>
Legal node: nothing to do

Combining: t59: i32 = Constant<7>

Legalizing: t56: i32 = FrameIndex<8>
Legal node: nothing to do

Combining: t56: i32 = FrameIndex<8>

Legalizing: t52: i32 = Constant<6>
Legal node: nothing to do

Combining: t52: i32 = Constant<6>

Legalizing: t49: i32 = FrameIndex<7>
Legal node: nothing to do

Combining: t49: i32 = FrameIndex<7>

Legalizing: t45: i32 = Constant<5>
Legal node: nothing to do

Combining: t45: i32 = Constant<5>

Legalizing: t42: i32 = FrameIndex<6>
Legal node: nothing to do

Combining: t42: i32 = FrameIndex<6>

Legalizing: t38: i32 = Constant<4>
Legal node: nothing to do

Combining: t38: i32 = Constant<4>

Legalizing: t35: i32 = FrameIndex<5>
Legal node: nothing to do

Combining: t35: i32 = FrameIndex<5>

Legalizing: t31: i32 = Constant<3>
Legal node: nothing to do

Combining: t31: i32 = Constant<3>

Legalizing: t28: i32 = FrameIndex<4>
Legal node: nothing to do

Combining: t28: i32 = FrameIndex<4>

Legalizing: t24: i32 = Constant<2>
Legal node: nothing to do

Combining: t24: i32 = Constant<2>

Legalizing: t21: i32 = FrameIndex<3>
Legal node: nothing to do

Combining: t21: i32 = FrameIndex<3>

Legalizing: t16: i32 = Constant<1>
Legal node: nothing to do

Combining: t16: i32 = Constant<1>

Legalizing: t13: i32 = FrameIndex<2>
Legal node: nothing to do

Combining: t13: i32 = FrameIndex<2>

Legalizing: t11: i32 = FrameIndex<1>
Legal node: nothing to do

Combining: t11: i32 = FrameIndex<1>

Legalizing: t9: i32 = undef
Legal node: nothing to do

Combining: t9: i32 = undef

Legalizing: t8: i32 = Constant<0>
Legal node: nothing to do

Combining: t8: i32 = Constant<0>

Legalizing: t7: i32 = FrameIndex<0>
Legal node: nothing to do

Combining: t7: i32 = FrameIndex<0>

Legalizing: t5: i32 = Register %2

Combining: t5: i32 = Register %2

Legalizing: t3: i32 = Register %1

Combining: t3: i32 = Register %1

Legalizing: t1: i32 = Register %0

Combining: t1: i32 = Register %0

Legalizing: t0: ch,glue = EntryToken
Legal node: nothing to do

Combining: t0: ch,glue = EntryToken
Optimized legalized selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 731 nodes:
  t0: ch,glue = EntryToken
  t1087: i32 = or FrameIndex:i32<3>, Constant:i32<4>
  t1086: i32 = or FrameIndex:i32<4>, Constant:i32<4>
  t1085: i32 = or FrameIndex:i32<5>, Constant:i32<4>
  t1084: i32 = or FrameIndex:i32<6>, Constant:i32<4>
  t1083: i32 = or FrameIndex:i32<7>, Constant:i32<4>
  t1082: i32 = or FrameIndex:i32<8>, Constant:i32<4>
  t1081: i32 = or FrameIndex:i32<9>, Constant:i32<4>
  t1080: i32 = or FrameIndex:i32<10>, Constant:i32<4>
  t1079: i32 = or FrameIndex:i32<11>, Constant:i32<4>
  t1078: i32 = or FrameIndex:i32<12>, Constant:i32<4>
  t1077: i32 = or FrameIndex:i32<13>, Constant:i32<4>
  t1076: i32 = or FrameIndex:i32<14>, Constant:i32<4>
  t1075: i32 = or FrameIndex:i32<15>, Constant:i32<4>
  t1074: i32 = or FrameIndex:i32<16>, Constant:i32<4>
  t1073: i32 = or FrameIndex:i32<17>, Constant:i32<4>
  t1072: i32 = or FrameIndex:i32<18>, Constant:i32<4>
  t1071: i32 = or FrameIndex:i32<19>, Constant:i32<4>
  t1070: i32 = or FrameIndex:i32<20>, Constant:i32<4>
  t1069: i32 = or FrameIndex:i32<21>, Constant:i32<4>
  t1068: i32 = or FrameIndex:i32<22>, Constant:i32<4>
  t1067: i32 = or FrameIndex:i32<23>, Constant:i32<4>
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
      t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
  t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
      t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t1482, FrameIndex:i32<3>, undef:i32
          t540: i32 = sra t538, Constant:i32<31>
        t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1482:1
      t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t1478, t1087, undef:i32
    t546: ch = TokenFactor t543, t545
  t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
  t534: i32 = shl t23, Constant:i32<1>
      t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t1472, FrameIndex:i32<4>, undef:i32
          t547: i32 = sra t534, Constant:i32<31>
        t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1472:1
      t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t1468, t1086, undef:i32
    t553: ch = TokenFactor t550, t552
  t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
  t32: i32 = mul nsw t30, Constant:i32<3>
      t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t1462, FrameIndex:i32<5>, undef:i32
          t554: i32 = sra t32, Constant:i32<31>
        t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1462:1
      t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t1458, t1085, undef:i32
    t560: ch = TokenFactor t557, t559
  t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
  t529: i32 = shl t37, Constant:i32<2>
      t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t1452, FrameIndex:i32<6>, undef:i32
          t561: i32 = sra t529, Constant:i32<31>
        t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1452:1
      t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t1448, t1084, undef:i32
    t567: ch = TokenFactor t564, t566
  t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
  t46: i32 = mul nsw t44, Constant:i32<5>
      t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t1442, FrameIndex:i32<7>, undef:i32
          t568: i32 = sra t46, Constant:i32<31>
        t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1442:1
      t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t1438, t1083, undef:i32
    t574: ch = TokenFactor t571, t573
  t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
  t53: i32 = mul nsw t51, Constant:i32<6>
      t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t1432, FrameIndex:i32<8>, undef:i32
          t575: i32 = sra t53, Constant:i32<31>
        t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1432:1
      t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t1428, t1082, undef:i32
    t581: ch = TokenFactor t578, t580
  t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
  t60: i32 = mul nsw t58, Constant:i32<7>
      t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t1422, FrameIndex:i32<9>, undef:i32
          t582: i32 = sra t60, Constant:i32<31>
        t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1422:1
      t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t1418, t1081, undef:i32
    t588: ch = TokenFactor t585, t587
  t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
  t522: i32 = shl t65, Constant:i32<3>
      t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t1412, FrameIndex:i32<10>, undef:i32
          t589: i32 = sra t522, Constant:i32<31>
        t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1412:1
      t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t1408, t1080, undef:i32
    t595: ch = TokenFactor t592, t594
  t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
  t74: i32 = mul nsw t72, Constant:i32<9>
      t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t1402, FrameIndex:i32<11>, undef:i32
          t596: i32 = sra t74, Constant:i32<31>
        t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1402:1
      t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t1398, t1079, undef:i32
    t602: ch = TokenFactor t599, t601
  t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
  t81: i32 = mul nsw t79, Constant:i32<10>
      t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t1392, FrameIndex:i32<12>, undef:i32
          t603: i32 = sra t81, Constant:i32<31>
        t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1392:1
      t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t1388, t1078, undef:i32
    t609: ch = TokenFactor t606, t608
  t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
  t88: i32 = mul nsw t86, Constant:i32<11>
      t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t1382, FrameIndex:i32<13>, undef:i32
          t610: i32 = sra t88, Constant:i32<31>
        t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1382:1
      t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t1378, t1077, undef:i32
    t616: ch = TokenFactor t613, t615
  t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
  t95: i32 = mul nsw t93, Constant:i32<12>
      t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t1372, FrameIndex:i32<14>, undef:i32
          t617: i32 = sra t95, Constant:i32<31>
        t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1372:1
      t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t1368, t1076, undef:i32
    t623: ch = TokenFactor t620, t622
  t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
  t102: i32 = mul nsw t100, Constant:i32<13>
      t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t1362, FrameIndex:i32<15>, undef:i32
          t624: i32 = sra t102, Constant:i32<31>
        t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1362:1
      t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t1358, t1075, undef:i32
    t630: ch = TokenFactor t627, t629
  t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
  t109: i32 = mul nsw t107, Constant:i32<14>
      t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t1352, FrameIndex:i32<16>, undef:i32
          t631: i32 = sra t109, Constant:i32<31>
        t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1352:1
      t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t1348, t1074, undef:i32
    t637: ch = TokenFactor t634, t636
  t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
  t116: i32 = mul nsw t114, Constant:i32<15>
      t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t1342, FrameIndex:i32<17>, undef:i32
          t638: i32 = sra t116, Constant:i32<31>
        t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1342:1
      t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t1338, t1073, undef:i32
    t644: ch = TokenFactor t641, t643
  t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
  t511: i32 = shl t121, Constant:i32<4>
      t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t1332, FrameIndex:i32<18>, undef:i32
          t645: i32 = sra t511, Constant:i32<31>
        t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1332:1
      t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t1328, t1072, undef:i32
    t651: ch = TokenFactor t648, t650
  t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
  t130: i32 = mul nsw t128, Constant:i32<17>
      t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t1322, FrameIndex:i32<19>, undef:i32
          t652: i32 = sra t130, Constant:i32<31>
        t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1322:1
      t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t1318, t1071, undef:i32
    t658: ch = TokenFactor t655, t657
  t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
  t137: i32 = mul nsw t135, Constant:i32<18>
      t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t1312, FrameIndex:i32<20>, undef:i32
          t659: i32 = sra t137, Constant:i32<31>
        t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1312:1
      t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t1308, t1070, undef:i32
    t665: ch = TokenFactor t662, t664
  t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
  t144: i32 = mul nsw t142, Constant:i32<19>
      t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t1302, FrameIndex:i32<21>, undef:i32
          t666: i32 = sra t144, Constant:i32<31>
        t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1302:1
      t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t1298, t1069, undef:i32
    t672: ch = TokenFactor t669, t671
  t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
  t151: i32 = mul nsw t149, Constant:i32<20>
      t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t1292, FrameIndex:i32<22>, undef:i32
          t673: i32 = sra t151, Constant:i32<31>
        t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1292:1
      t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t1288, t1068, undef:i32
    t679: ch = TokenFactor t676, t678
  t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
  t158: i32 = mul nsw t156, Constant:i32<21>
    t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t1282, FrameIndex:i32<23>, undef:i32
        t680: i32 = sra t158, Constant:i32<31>
      t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1282:1
    t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t1278, t1067, undef:i32
  t686: ch = TokenFactor t683, t685
  t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32
  t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
  t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32
  t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
  t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32
  t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
  t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32
  t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
  t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32
  t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
  t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32
  t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
  t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32
  t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
  t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32
  t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
  t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32
  t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
  t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32
  t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
  t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32
  t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
  t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32
  t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
  t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32
  t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
  t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32
  t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
  t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32
  t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
  t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32
  t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
  t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32
  t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
  t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32
  t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
  t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32
  t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
  t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32
  t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
  t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32
  t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
  t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
  t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
    t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807
    t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778
    t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749
    t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692
  t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
  t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
  t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
  t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
    t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
    t165: i32 = add nsw t163, t164
  t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165
  t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
  t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
  t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
    t690: i32 = xor t687, Constant:i32<-1>
  t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
  t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1
  t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
  t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
  t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
    t691: i32 = xor t688, Constant:i32<-1>
  t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
  t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
  t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
  t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
  t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
  t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
  t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
  t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
  t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
  t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1
  t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1
  t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1
  t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1
    t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
  t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824
    t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
  t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
  t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
  t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
  t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
  t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
  t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1
              t869: i32 = and t866, t863
            t871: i32 = or t869, t860
          t873: i32 = or t871, t857
            t853: i32 = and t1239, t1246
          t855: i32 = and t853, t766
        t875: i32 = or t873, t855
          t739: i32 = and t1265, t1269
        t744: i32 = xor t741, t739
      t877: i32 = or t875, t744
    t879: i32 = or t877, t711
  t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
              t870: i32 = and t867, t864
            t872: i32 = or t870, t861
          t874: i32 = or t872, t858
                t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
              t1236: i32,i32 = ARMISD::ADDE t849, t843, t1239:1
                t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
              t1243: i32,i32 = ARMISD::ADDE t794, t773, t1246:1
            t854: i32 = and t1236, t1243
            t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
          t856: i32 = and t854, t767
        t876: i32 = or t874, t856
              t1261: i32,i32 = ARMISD::SUBE t733, t730, t1272:1
            t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1265:1
            t1256: i32,i32 = ARMISD::ADDE t722, t719, t1269:1
          t740: i32 = and t1251, t1256
        t745: i32 = xor t742, t740
      t878: i32 = or t876, t745
      t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
    t880: i32 = or t878, t712
  t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
  t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
  t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
      t868: ch = TokenFactor t866:1, t867:1
      t865: ch = TokenFactor t863:1, t864:1
      t862: ch = TokenFactor t860:1, t861:1
      t859: ch = TokenFactor t857:1, t858:1
      t850: ch = TokenFactor t848:1, t849:1
      t809: ch = TokenFactor t807:1, t808:1
      t806: ch = TokenFactor t804:1, t805:1
      t803: ch = TokenFactor t801:1, t802:1
      t780: ch = TokenFactor t778:1, t779:1
      t777: ch = TokenFactor t775:1, t776:1
      t774: ch = TokenFactor t772:1, t773:1
      t751: ch = TokenFactor t749:1, t750:1
      t748: ch = TokenFactor t746:1, t747:1
      t743: ch = TokenFactor t741:1, t742:1
      t734: ch = TokenFactor t732:1, t733:1
      t731: ch = TokenFactor t729:1, t730:1
      t728: ch = TokenFactor t726:1, t727:1
      t723: ch = TokenFactor t721:1, t722:1
      t720: ch = TokenFactor t718:1, t719:1
      t694: ch = TokenFactor t692:1, t693:1
      t689: ch = TokenFactor t687:1, t688:1
    t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
    t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1
  t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
  t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32
  t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
  t901: ch = TokenFactor t899:1, t900:1
        t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t1232, FrameIndex:i32<3>, undef:i32
        t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t1229, t1087, undef:i32
      t906: ch = TokenFactor t904, t905
    t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
  t227: ch,glue = CopyToReg t223, Register:i32 $r0, t1488
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1
  t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
  t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
  t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1
  t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32
  t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
  t909: ch = TokenFactor t907:1, t908:1
        t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t1225, FrameIndex:i32<4>, undef:i32
        t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t1222, t1086, undef:i32
      t914: ch = TokenFactor t912, t913
    t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
  t245: ch,glue = CopyToReg t243, Register:i32 $r0, t1488
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1
  t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
  t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
  t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1
  t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32
  t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
  t917: ch = TokenFactor t915:1, t916:1
        t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t1218, FrameIndex:i32<5>, undef:i32
        t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t1215, t1085, undef:i32
      t922: ch = TokenFactor t920, t921
    t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
  t258: ch,glue = CopyToReg t256, Register:i32 $r0, t1488
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1
  t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
  t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
  t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1
  t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32
  t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
  t925: ch = TokenFactor t923:1, t924:1
        t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t1211, FrameIndex:i32<6>, undef:i32
        t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t1208, t1084, undef:i32
      t930: ch = TokenFactor t928, t929
    t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
  t271: ch,glue = CopyToReg t269, Register:i32 $r0, t1488
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1
  t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
  t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
  t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1
  t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32
  t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
  t933: ch = TokenFactor t931:1, t932:1
        t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t1204, FrameIndex:i32<7>, undef:i32
        t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t1201, t1083, undef:i32
      t938: ch = TokenFactor t936, t937
    t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
  t284: ch,glue = CopyToReg t282, Register:i32 $r0, t1488
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1
  t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
  t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
  t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1
  t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32
  t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
  t941: ch = TokenFactor t939:1, t940:1
        t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t1197, FrameIndex:i32<8>, undef:i32
        t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t1194, t1082, undef:i32
      t946: ch = TokenFactor t944, t945
    t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
  t297: ch,glue = CopyToReg t295, Register:i32 $r0, t1488
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1
  t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
  t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
  t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1
  t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32
  t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
  t949: ch = TokenFactor t947:1, t948:1
        t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t1190, FrameIndex:i32<9>, undef:i32
        t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t1187, t1081, undef:i32
      t954: ch = TokenFactor t952, t953
    t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
  t310: ch,glue = CopyToReg t308, Register:i32 $r0, t1488
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1
  t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
  t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
  t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1
  t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32
  t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
  t957: ch = TokenFactor t955:1, t956:1
        t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t1183, FrameIndex:i32<10>, undef:i32
        t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t1180, t1080, undef:i32
      t962: ch = TokenFactor t960, t961
    t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
  t323: ch,glue = CopyToReg t321, Register:i32 $r0, t1488
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1
  t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
  t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
  t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1
  t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32
  t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
  t965: ch = TokenFactor t963:1, t964:1
        t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t1176, FrameIndex:i32<11>, undef:i32
        t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t1173, t1079, undef:i32
      t970: ch = TokenFactor t968, t969
    t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
  t336: ch,glue = CopyToReg t334, Register:i32 $r0, t1488
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1
  t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
  t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
  t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1
  t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32
  t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
  t973: ch = TokenFactor t971:1, t972:1
        t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t1169, FrameIndex:i32<12>, undef:i32
        t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t1166, t1078, undef:i32
      t978: ch = TokenFactor t976, t977
    t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
  t349: ch,glue = CopyToReg t347, Register:i32 $r0, t1488
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1
  t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
  t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
  t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1
  t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32
  t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
  t981: ch = TokenFactor t979:1, t980:1
        t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t1162, FrameIndex:i32<13>, undef:i32
        t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t1159, t1077, undef:i32
      t986: ch = TokenFactor t984, t985
    t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
  t362: ch,glue = CopyToReg t360, Register:i32 $r0, t1488
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1
  t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
  t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
  t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1
  t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32
  t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
  t989: ch = TokenFactor t987:1, t988:1
        t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t1155, FrameIndex:i32<14>, undef:i32
        t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t1152, t1076, undef:i32
      t994: ch = TokenFactor t992, t993
    t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
  t375: ch,glue = CopyToReg t373, Register:i32 $r0, t1488
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1
  t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
  t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
  t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1
  t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32
  t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
  t997: ch = TokenFactor t995:1, t996:1
        t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t1148, FrameIndex:i32<15>, undef:i32
        t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t1145, t1075, undef:i32
      t1002: ch = TokenFactor t1000, t1001
    t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
  t388: ch,glue = CopyToReg t386, Register:i32 $r0, t1488
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1
  t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
  t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
  t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1
  t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32
  t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
  t1005: ch = TokenFactor t1003:1, t1004:1
        t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1141, FrameIndex:i32<16>, undef:i32
        t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1138, t1074, undef:i32
      t1010: ch = TokenFactor t1008, t1009
    t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
  t401: ch,glue = CopyToReg t399, Register:i32 $r0, t1488
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1
  t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
  t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
  t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1
  t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32
  t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
  t1013: ch = TokenFactor t1011:1, t1012:1
        t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1134, FrameIndex:i32<17>, undef:i32
        t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1131, t1073, undef:i32
      t1018: ch = TokenFactor t1016, t1017
    t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
  t414: ch,glue = CopyToReg t412, Register:i32 $r0, t1488
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1
  t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
  t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
  t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1
  t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32
  t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
  t1021: ch = TokenFactor t1019:1, t1020:1
        t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1127, FrameIndex:i32<18>, undef:i32
        t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1124, t1072, undef:i32
      t1026: ch = TokenFactor t1024, t1025
    t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
  t427: ch,glue = CopyToReg t425, Register:i32 $r0, t1488
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1
  t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
  t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
  t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1
  t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32
  t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
  t1029: ch = TokenFactor t1027:1, t1028:1
        t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1120, FrameIndex:i32<19>, undef:i32
        t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1117, t1071, undef:i32
      t1034: ch = TokenFactor t1032, t1033
    t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
  t440: ch,glue = CopyToReg t438, Register:i32 $r0, t1488
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1
  t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
  t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
  t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1
  t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32
  t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
  t1037: ch = TokenFactor t1035:1, t1036:1
        t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1113, FrameIndex:i32<20>, undef:i32
        t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1110, t1070, undef:i32
      t1042: ch = TokenFactor t1040, t1041
    t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
  t453: ch,glue = CopyToReg t451, Register:i32 $r0, t1488
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1
  t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
  t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
  t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1
  t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32
  t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
  t1045: ch = TokenFactor t1043:1, t1044:1
        t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1106, FrameIndex:i32<21>, undef:i32
        t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1103, t1069, undef:i32
      t1050: ch = TokenFactor t1048, t1049
    t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
  t466: ch,glue = CopyToReg t464, Register:i32 $r0, t1488
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1
  t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
  t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
  t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1
  t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32
  t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
  t1053: ch = TokenFactor t1051:1, t1052:1
        t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1099, FrameIndex:i32<22>, undef:i32
        t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1096, t1068, undef:i32
      t1058: ch = TokenFactor t1056, t1057
    t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
  t479: ch,glue = CopyToReg t477, Register:i32 $r0, t1488
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1
  t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
  t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
  t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1
  t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32
  t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
  t1061: ch = TokenFactor t1059:1, t1060:1
        t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1092, FrameIndex:i32<23>, undef:i32
        t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1089, t1067, undef:i32
      t1066: ch = TokenFactor t1064, t1065
    t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
  t492: ch,glue = CopyToReg t490, Register:i32 $r0, t1488
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1
  t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
  t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
  t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1
    t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
  t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1092:1
  t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
  t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1099:1
  t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
  t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1106:1
  t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
  t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1113:1
  t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
  t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1120:1
  t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
  t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1127:1
  t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
  t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1134:1
  t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
  t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1141:1
  t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
  t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1148:1
  t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
  t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1155:1
  t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
  t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1162:1
  t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
  t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1169:1
  t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
  t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1176:1
  t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
  t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1183:1
  t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
  t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1190:1
  t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
  t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1197:1
  t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
  t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1204:1
  t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
  t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1211:1
  t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
  t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1218:1
  t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
  t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1225:1
  t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
  t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1232:1
  t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
  t1239: i32,i32 = ARMISD::ADDC t848, t842
  t1246: i32,i32 = ARMISD::ADDC t793, t772
  t1265: i32,i32 = ARMISD::SUBC t1272, t726
  t1269: i32,i32 = ARMISD::ADDC t721, t718
  t1272: i32,i32 = ARMISD::SUBC t732, t729
  t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
  t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
  t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
  t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
  t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
  t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
  t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
  t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
  t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
  t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
  t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
  t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
  t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
  t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
  t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
  t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
  t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
  t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
  t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
  t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
  t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
    t1487: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0
  t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32
  t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t500: ch = ARMISD::RET_FLAG t499, Register:i32 $r0, t499:1
ISEL: Starting pattern match
  Skipped scope entry (due to false predicate) at index 141395, continuing at 141411
  Skipped scope entry (due to false predicate) at index 141412, continuing at 141428
Creating constant: t1535: i32 = TargetConstant<14>
  Morphed node: t500: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t499, t499:1
ISEL: Match complete!

ISEL: Starting selection on root node: t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498

ISEL: Starting selection on root node: t498: i32,ch = load<(dereferenceable load (s32) from %ir.28)> t497:1, FrameIndex:i32<24>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t498: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.28)> TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t497:1
ISEL: Match complete!

ISEL: Starting selection on root node: t497: i32,ch,glue = CopyFromReg t496, Register:i32 $r0, t496:1

ISEL: Starting selection on root node: t496: ch,glue = callseq_end t495, TargetConstant:i32<0>, TargetConstant:i32<-1>, t495:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t496: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t495, t495:1
ISEL: Match complete!

ISEL: Starting selection on root node: t495: ch,glue = ARMISD::CALL t494, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t495: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494, t494:1
ISEL: Match complete!

ISEL: Starting selection on root node: t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1

ISEL: Starting selection on root node: t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1

ISEL: Starting selection on root node: t492: ch,glue = CopyToReg t490, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t490: ch,glue = callseq_start t1066, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t490: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1066
ISEL: Match complete!

ISEL: Starting selection on root node: t1066: ch = TokenFactor t1064, t1065

ISEL: Starting selection on root node: t1065: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t1061, t1089, t1067, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
Creating constant: t1539: i32 = TargetConstant<1>
  Morphed node: t1065: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1089, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1061
ISEL: Match complete!

ISEL: Starting selection on root node: t1064: ch = store<(store (s32) into %ir.27, align 8)> t1061, t1092, FrameIndex:i32<23>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061
ISEL: Match complete!

ISEL: Starting selection on root node: t1089: i32,i32 = ARMISD::ADDE t1060, Constant:i32<0>, t1092:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1
  Morphed node: t1089: i32,i32 = tADCS t1060, Constant:i32<0>, t1541:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1061: ch = TokenFactor t1059:1, t1060:1

ISEL: Starting selection on root node: t1092: i32,i32 = ARMISD::ADDC t1059, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1092: i32,i32 = tADDSi3 t1059, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1059: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t484:1, FrameIndex:i32<23>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1059: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1060: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t484:1, t1067, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1
ISEL: Match complete!

ISEL: Starting selection on root node: t484: i32,ch,glue = CopyFromReg t483, Register:i32 $r0, t483:1

ISEL: Starting selection on root node: t483: ch,glue = callseq_end t482, TargetConstant:i32<0>, TargetConstant:i32<-1>, t482:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t483: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t482, t482:1
ISEL: Match complete!

ISEL: Starting selection on root node: t482: ch,glue = ARMISD::CALL t481, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t482: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481, t481:1
ISEL: Match complete!

ISEL: Starting selection on root node: t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1

ISEL: Starting selection on root node: t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1

ISEL: Starting selection on root node: t479: ch,glue = CopyToReg t477, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t477: ch,glue = callseq_start t1058, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t477: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1058
ISEL: Match complete!

ISEL: Starting selection on root node: t1058: ch = TokenFactor t1056, t1057

ISEL: Starting selection on root node: t1057: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t1053, t1096, t1068, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1057: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1096, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1053
ISEL: Match complete!

ISEL: Starting selection on root node: t1056: ch = store<(store (s32) into %ir.26, align 8)> t1053, t1099, FrameIndex:i32<22>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053
ISEL: Match complete!

ISEL: Starting selection on root node: t1096: i32,i32 = ARMISD::ADDE t1052, Constant:i32<0>, t1099:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1
  Morphed node: t1096: i32,i32 = tADCS t1052, Constant:i32<0>, t1543:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1053: ch = TokenFactor t1051:1, t1052:1

ISEL: Starting selection on root node: t1099: i32,i32 = ARMISD::ADDC t1051, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1099: i32,i32 = tADDSi3 t1051, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1051: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t471:1, FrameIndex:i32<22>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1051: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1052: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t471:1, t1068, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1
ISEL: Match complete!

ISEL: Starting selection on root node: t471: i32,ch,glue = CopyFromReg t470, Register:i32 $r0, t470:1

ISEL: Starting selection on root node: t470: ch,glue = callseq_end t469, TargetConstant:i32<0>, TargetConstant:i32<-1>, t469:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t470: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t469, t469:1
ISEL: Match complete!

ISEL: Starting selection on root node: t469: ch,glue = ARMISD::CALL t468, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t469: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468, t468:1
ISEL: Match complete!

ISEL: Starting selection on root node: t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1

ISEL: Starting selection on root node: t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1

ISEL: Starting selection on root node: t466: ch,glue = CopyToReg t464, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t464: ch,glue = callseq_start t1050, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t464: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1050
ISEL: Match complete!

ISEL: Starting selection on root node: t1050: ch = TokenFactor t1048, t1049

ISEL: Starting selection on root node: t1049: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t1045, t1103, t1069, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1049: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1103, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1045
ISEL: Match complete!

ISEL: Starting selection on root node: t1048: ch = store<(store (s32) into %ir.25, align 8)> t1045, t1106, FrameIndex:i32<21>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045
ISEL: Match complete!

ISEL: Starting selection on root node: t1103: i32,i32 = ARMISD::ADDE t1044, Constant:i32<0>, t1106:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1
  Morphed node: t1103: i32,i32 = tADCS t1044, Constant:i32<0>, t1545:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1045: ch = TokenFactor t1043:1, t1044:1

ISEL: Starting selection on root node: t1106: i32,i32 = ARMISD::ADDC t1043, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1106: i32,i32 = tADDSi3 t1043, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1043: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t458:1, FrameIndex:i32<21>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1043: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1044: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t458:1, t1069, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1
ISEL: Match complete!

ISEL: Starting selection on root node: t458: i32,ch,glue = CopyFromReg t457, Register:i32 $r0, t457:1

ISEL: Starting selection on root node: t457: ch,glue = callseq_end t456, TargetConstant:i32<0>, TargetConstant:i32<-1>, t456:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t457: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t456, t456:1
ISEL: Match complete!

ISEL: Starting selection on root node: t456: ch,glue = ARMISD::CALL t455, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t456: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455, t455:1
ISEL: Match complete!

ISEL: Starting selection on root node: t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1

ISEL: Starting selection on root node: t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1

ISEL: Starting selection on root node: t453: ch,glue = CopyToReg t451, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t451: ch,glue = callseq_start t1042, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t451: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1042
ISEL: Match complete!

ISEL: Starting selection on root node: t1042: ch = TokenFactor t1040, t1041

ISEL: Starting selection on root node: t1041: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t1037, t1110, t1070, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1041: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1110, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1037
ISEL: Match complete!

ISEL: Starting selection on root node: t1040: ch = store<(store (s32) into %ir.24, align 8)> t1037, t1113, FrameIndex:i32<20>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037
ISEL: Match complete!

ISEL: Starting selection on root node: t1110: i32,i32 = ARMISD::ADDE t1036, Constant:i32<0>, t1113:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1
  Morphed node: t1110: i32,i32 = tADCS t1036, Constant:i32<0>, t1547:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1037: ch = TokenFactor t1035:1, t1036:1

ISEL: Starting selection on root node: t1113: i32,i32 = ARMISD::ADDC t1035, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1113: i32,i32 = tADDSi3 t1035, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1035: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t445:1, FrameIndex:i32<20>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1035: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1036: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t445:1, t1070, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1
ISEL: Match complete!

ISEL: Starting selection on root node: t445: i32,ch,glue = CopyFromReg t444, Register:i32 $r0, t444:1

ISEL: Starting selection on root node: t444: ch,glue = callseq_end t443, TargetConstant:i32<0>, TargetConstant:i32<-1>, t443:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t444: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t443, t443:1
ISEL: Match complete!

ISEL: Starting selection on root node: t443: ch,glue = ARMISD::CALL t442, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t443: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442, t442:1
ISEL: Match complete!

ISEL: Starting selection on root node: t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1

ISEL: Starting selection on root node: t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1

ISEL: Starting selection on root node: t440: ch,glue = CopyToReg t438, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t438: ch,glue = callseq_start t1034, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t438: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1034
ISEL: Match complete!

ISEL: Starting selection on root node: t1034: ch = TokenFactor t1032, t1033

ISEL: Starting selection on root node: t1033: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t1029, t1117, t1071, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1033: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1117, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1029
ISEL: Match complete!

ISEL: Starting selection on root node: t1032: ch = store<(store (s32) into %ir.23, align 8)> t1029, t1120, FrameIndex:i32<19>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029
ISEL: Match complete!

ISEL: Starting selection on root node: t1117: i32,i32 = ARMISD::ADDE t1028, Constant:i32<0>, t1120:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1
  Morphed node: t1117: i32,i32 = tADCS t1028, Constant:i32<0>, t1549:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1029: ch = TokenFactor t1027:1, t1028:1

ISEL: Starting selection on root node: t1120: i32,i32 = ARMISD::ADDC t1027, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1120: i32,i32 = tADDSi3 t1027, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1027: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t432:1, FrameIndex:i32<19>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1027: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1028: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t432:1, t1071, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1
ISEL: Match complete!

ISEL: Starting selection on root node: t432: i32,ch,glue = CopyFromReg t431, Register:i32 $r0, t431:1

ISEL: Starting selection on root node: t431: ch,glue = callseq_end t430, TargetConstant:i32<0>, TargetConstant:i32<-1>, t430:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t431: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t430, t430:1
ISEL: Match complete!

ISEL: Starting selection on root node: t430: ch,glue = ARMISD::CALL t429, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t430: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429, t429:1
ISEL: Match complete!

ISEL: Starting selection on root node: t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1

ISEL: Starting selection on root node: t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1

ISEL: Starting selection on root node: t427: ch,glue = CopyToReg t425, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t425: ch,glue = callseq_start t1026, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t425: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1026
ISEL: Match complete!

ISEL: Starting selection on root node: t1026: ch = TokenFactor t1024, t1025

ISEL: Starting selection on root node: t1025: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t1021, t1124, t1072, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1025: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1124, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1021
ISEL: Match complete!

ISEL: Starting selection on root node: t1024: ch = store<(store (s32) into %ir.22, align 8)> t1021, t1127, FrameIndex:i32<18>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021
ISEL: Match complete!

ISEL: Starting selection on root node: t1124: i32,i32 = ARMISD::ADDE t1020, Constant:i32<0>, t1127:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1
  Morphed node: t1124: i32,i32 = tADCS t1020, Constant:i32<0>, t1551:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1021: ch = TokenFactor t1019:1, t1020:1

ISEL: Starting selection on root node: t1127: i32,i32 = ARMISD::ADDC t1019, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1127: i32,i32 = tADDSi3 t1019, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1019: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t419:1, FrameIndex:i32<18>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1019: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1020: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t419:1, t1072, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1
ISEL: Match complete!

ISEL: Starting selection on root node: t419: i32,ch,glue = CopyFromReg t418, Register:i32 $r0, t418:1

ISEL: Starting selection on root node: t418: ch,glue = callseq_end t417, TargetConstant:i32<0>, TargetConstant:i32<-1>, t417:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t418: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t417, t417:1
ISEL: Match complete!

ISEL: Starting selection on root node: t417: ch,glue = ARMISD::CALL t416, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t417: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416, t416:1
ISEL: Match complete!

ISEL: Starting selection on root node: t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1

ISEL: Starting selection on root node: t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1

ISEL: Starting selection on root node: t414: ch,glue = CopyToReg t412, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t412: ch,glue = callseq_start t1018, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t412: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1018
ISEL: Match complete!

ISEL: Starting selection on root node: t1018: ch = TokenFactor t1016, t1017

ISEL: Starting selection on root node: t1017: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t1013, t1131, t1073, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1017: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1131, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1013
ISEL: Match complete!

ISEL: Starting selection on root node: t1016: ch = store<(store (s32) into %ir.21, align 8)> t1013, t1134, FrameIndex:i32<17>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013
ISEL: Match complete!

ISEL: Starting selection on root node: t1131: i32,i32 = ARMISD::ADDE t1012, Constant:i32<0>, t1134:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1
  Morphed node: t1131: i32,i32 = tADCS t1012, Constant:i32<0>, t1553:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1013: ch = TokenFactor t1011:1, t1012:1

ISEL: Starting selection on root node: t1134: i32,i32 = ARMISD::ADDC t1011, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1134: i32,i32 = tADDSi3 t1011, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1011: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t406:1, FrameIndex:i32<17>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1011: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1012: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t406:1, t1073, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1
ISEL: Match complete!

ISEL: Starting selection on root node: t406: i32,ch,glue = CopyFromReg t405, Register:i32 $r0, t405:1

ISEL: Starting selection on root node: t405: ch,glue = callseq_end t404, TargetConstant:i32<0>, TargetConstant:i32<-1>, t404:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t405: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t404, t404:1
ISEL: Match complete!

ISEL: Starting selection on root node: t404: ch,glue = ARMISD::CALL t403, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t404: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403, t403:1
ISEL: Match complete!

ISEL: Starting selection on root node: t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1

ISEL: Starting selection on root node: t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1

ISEL: Starting selection on root node: t401: ch,glue = CopyToReg t399, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t399: ch,glue = callseq_start t1010, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t399: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1010
ISEL: Match complete!

ISEL: Starting selection on root node: t1010: ch = TokenFactor t1008, t1009

ISEL: Starting selection on root node: t1009: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t1005, t1138, t1074, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1009: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1138, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1005
ISEL: Match complete!

ISEL: Starting selection on root node: t1008: ch = store<(store (s32) into %ir.20, align 8)> t1005, t1141, FrameIndex:i32<16>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005
ISEL: Match complete!

ISEL: Starting selection on root node: t1138: i32,i32 = ARMISD::ADDE t1004, Constant:i32<0>, t1141:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1
  Morphed node: t1138: i32,i32 = tADCS t1004, Constant:i32<0>, t1555:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1005: ch = TokenFactor t1003:1, t1004:1

ISEL: Starting selection on root node: t1141: i32,i32 = ARMISD::ADDC t1003, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1141: i32,i32 = tADDSi3 t1003, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t1003: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t393:1, FrameIndex:i32<16>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1003: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1004: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t393:1, t1074, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1
ISEL: Match complete!

ISEL: Starting selection on root node: t393: i32,ch,glue = CopyFromReg t392, Register:i32 $r0, t392:1

ISEL: Starting selection on root node: t392: ch,glue = callseq_end t391, TargetConstant:i32<0>, TargetConstant:i32<-1>, t391:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t392: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t391, t391:1
ISEL: Match complete!

ISEL: Starting selection on root node: t391: ch,glue = ARMISD::CALL t390, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t391: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390, t390:1
ISEL: Match complete!

ISEL: Starting selection on root node: t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1

ISEL: Starting selection on root node: t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1

ISEL: Starting selection on root node: t388: ch,glue = CopyToReg t386, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t386: ch,glue = callseq_start t1002, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t386: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1002
ISEL: Match complete!

ISEL: Starting selection on root node: t1002: ch = TokenFactor t1000, t1001

ISEL: Starting selection on root node: t1001: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t997, t1145, t1075, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1001: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1145, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t997
ISEL: Match complete!

ISEL: Starting selection on root node: t1000: ch = store<(store (s32) into %ir.19, align 8)> t997, t1148, FrameIndex:i32<15>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997
ISEL: Match complete!

ISEL: Starting selection on root node: t1145: i32,i32 = ARMISD::ADDE t996, Constant:i32<0>, t1148:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1
  Morphed node: t1145: i32,i32 = tADCS t996, Constant:i32<0>, t1557:1
ISEL: Match complete!

ISEL: Starting selection on root node: t997: ch = TokenFactor t995:1, t996:1

ISEL: Starting selection on root node: t1148: i32,i32 = ARMISD::ADDC t995, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1148: i32,i32 = tADDSi3 t995, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t995: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t380:1, FrameIndex:i32<15>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t995: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1
ISEL: Match complete!

ISEL: Starting selection on root node: t996: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t380:1, t1075, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1
ISEL: Match complete!

ISEL: Starting selection on root node: t380: i32,ch,glue = CopyFromReg t379, Register:i32 $r0, t379:1

ISEL: Starting selection on root node: t379: ch,glue = callseq_end t378, TargetConstant:i32<0>, TargetConstant:i32<-1>, t378:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t379: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t378, t378:1
ISEL: Match complete!

ISEL: Starting selection on root node: t378: ch,glue = ARMISD::CALL t377, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t378: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377, t377:1
ISEL: Match complete!

ISEL: Starting selection on root node: t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1

ISEL: Starting selection on root node: t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1

ISEL: Starting selection on root node: t375: ch,glue = CopyToReg t373, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t373: ch,glue = callseq_start t994, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t373: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t994
ISEL: Match complete!

ISEL: Starting selection on root node: t994: ch = TokenFactor t992, t993

ISEL: Starting selection on root node: t993: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t989, t1152, t1076, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t993: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1152, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t989
ISEL: Match complete!

ISEL: Starting selection on root node: t992: ch = store<(store (s32) into %ir.18, align 8)> t989, t1155, FrameIndex:i32<14>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989
ISEL: Match complete!

ISEL: Starting selection on root node: t1152: i32,i32 = ARMISD::ADDE t988, Constant:i32<0>, t1155:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1
  Morphed node: t1152: i32,i32 = tADCS t988, Constant:i32<0>, t1559:1
ISEL: Match complete!

ISEL: Starting selection on root node: t989: ch = TokenFactor t987:1, t988:1

ISEL: Starting selection on root node: t1155: i32,i32 = ARMISD::ADDC t987, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1155: i32,i32 = tADDSi3 t987, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t987: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t367:1, FrameIndex:i32<14>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t987: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1
ISEL: Match complete!

ISEL: Starting selection on root node: t988: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t367:1, t1076, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1
ISEL: Match complete!

ISEL: Starting selection on root node: t367: i32,ch,glue = CopyFromReg t366, Register:i32 $r0, t366:1

ISEL: Starting selection on root node: t366: ch,glue = callseq_end t365, TargetConstant:i32<0>, TargetConstant:i32<-1>, t365:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t366: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t365, t365:1
ISEL: Match complete!

ISEL: Starting selection on root node: t365: ch,glue = ARMISD::CALL t364, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t365: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364, t364:1
ISEL: Match complete!

ISEL: Starting selection on root node: t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1

ISEL: Starting selection on root node: t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1

ISEL: Starting selection on root node: t362: ch,glue = CopyToReg t360, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t360: ch,glue = callseq_start t986, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t360: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t986
ISEL: Match complete!

ISEL: Starting selection on root node: t986: ch = TokenFactor t984, t985

ISEL: Starting selection on root node: t985: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t981, t1159, t1077, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t985: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1159, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t981
ISEL: Match complete!

ISEL: Starting selection on root node: t984: ch = store<(store (s32) into %ir.17, align 8)> t981, t1162, FrameIndex:i32<13>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981
ISEL: Match complete!

ISEL: Starting selection on root node: t1159: i32,i32 = ARMISD::ADDE t980, Constant:i32<0>, t1162:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1
  Morphed node: t1159: i32,i32 = tADCS t980, Constant:i32<0>, t1561:1
ISEL: Match complete!

ISEL: Starting selection on root node: t981: ch = TokenFactor t979:1, t980:1

ISEL: Starting selection on root node: t1162: i32,i32 = ARMISD::ADDC t979, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1162: i32,i32 = tADDSi3 t979, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t979: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t354:1, FrameIndex:i32<13>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t979: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1
ISEL: Match complete!

ISEL: Starting selection on root node: t980: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t354:1, t1077, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1
ISEL: Match complete!

ISEL: Starting selection on root node: t354: i32,ch,glue = CopyFromReg t353, Register:i32 $r0, t353:1

ISEL: Starting selection on root node: t353: ch,glue = callseq_end t352, TargetConstant:i32<0>, TargetConstant:i32<-1>, t352:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t353: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t352, t352:1
ISEL: Match complete!

ISEL: Starting selection on root node: t352: ch,glue = ARMISD::CALL t351, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t352: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351, t351:1
ISEL: Match complete!

ISEL: Starting selection on root node: t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1

ISEL: Starting selection on root node: t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1

ISEL: Starting selection on root node: t349: ch,glue = CopyToReg t347, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t347: ch,glue = callseq_start t978, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t347: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t978
ISEL: Match complete!

ISEL: Starting selection on root node: t978: ch = TokenFactor t976, t977

ISEL: Starting selection on root node: t977: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t973, t1166, t1078, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t977: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1166, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t973
ISEL: Match complete!

ISEL: Starting selection on root node: t976: ch = store<(store (s32) into %ir.16, align 8)> t973, t1169, FrameIndex:i32<12>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973
ISEL: Match complete!

ISEL: Starting selection on root node: t1166: i32,i32 = ARMISD::ADDE t972, Constant:i32<0>, t1169:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1
  Morphed node: t1166: i32,i32 = tADCS t972, Constant:i32<0>, t1563:1
ISEL: Match complete!

ISEL: Starting selection on root node: t973: ch = TokenFactor t971:1, t972:1

ISEL: Starting selection on root node: t1169: i32,i32 = ARMISD::ADDC t971, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1169: i32,i32 = tADDSi3 t971, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t971: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t341:1, FrameIndex:i32<12>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t971: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1
ISEL: Match complete!

ISEL: Starting selection on root node: t972: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t341:1, t1078, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1
ISEL: Match complete!

ISEL: Starting selection on root node: t341: i32,ch,glue = CopyFromReg t340, Register:i32 $r0, t340:1

ISEL: Starting selection on root node: t340: ch,glue = callseq_end t339, TargetConstant:i32<0>, TargetConstant:i32<-1>, t339:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t340: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t339, t339:1
ISEL: Match complete!

ISEL: Starting selection on root node: t339: ch,glue = ARMISD::CALL t338, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t339: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338, t338:1
ISEL: Match complete!

ISEL: Starting selection on root node: t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1

ISEL: Starting selection on root node: t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1

ISEL: Starting selection on root node: t336: ch,glue = CopyToReg t334, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t334: ch,glue = callseq_start t970, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t334: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t970
ISEL: Match complete!

ISEL: Starting selection on root node: t970: ch = TokenFactor t968, t969

ISEL: Starting selection on root node: t969: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t965, t1173, t1079, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t969: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1173, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t965
ISEL: Match complete!

ISEL: Starting selection on root node: t968: ch = store<(store (s32) into %ir.15, align 8)> t965, t1176, FrameIndex:i32<11>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965
ISEL: Match complete!

ISEL: Starting selection on root node: t1173: i32,i32 = ARMISD::ADDE t964, Constant:i32<0>, t1176:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1
  Morphed node: t1173: i32,i32 = tADCS t964, Constant:i32<0>, t1565:1
ISEL: Match complete!

ISEL: Starting selection on root node: t965: ch = TokenFactor t963:1, t964:1

ISEL: Starting selection on root node: t1176: i32,i32 = ARMISD::ADDC t963, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1176: i32,i32 = tADDSi3 t963, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t963: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t328:1, FrameIndex:i32<11>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t963: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1
ISEL: Match complete!

ISEL: Starting selection on root node: t964: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t328:1, t1079, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1
ISEL: Match complete!

ISEL: Starting selection on root node: t328: i32,ch,glue = CopyFromReg t327, Register:i32 $r0, t327:1

ISEL: Starting selection on root node: t327: ch,glue = callseq_end t326, TargetConstant:i32<0>, TargetConstant:i32<-1>, t326:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t327: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t326, t326:1
ISEL: Match complete!

ISEL: Starting selection on root node: t326: ch,glue = ARMISD::CALL t325, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t326: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325, t325:1
ISEL: Match complete!

ISEL: Starting selection on root node: t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1

ISEL: Starting selection on root node: t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1

ISEL: Starting selection on root node: t323: ch,glue = CopyToReg t321, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t321: ch,glue = callseq_start t962, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t321: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t962
ISEL: Match complete!

ISEL: Starting selection on root node: t962: ch = TokenFactor t960, t961

ISEL: Starting selection on root node: t961: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t957, t1180, t1080, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t961: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1180, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t957
ISEL: Match complete!

ISEL: Starting selection on root node: t960: ch = store<(store (s32) into %ir.14, align 8)> t957, t1183, FrameIndex:i32<10>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957
ISEL: Match complete!

ISEL: Starting selection on root node: t1180: i32,i32 = ARMISD::ADDE t956, Constant:i32<0>, t1183:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1
  Morphed node: t1180: i32,i32 = tADCS t956, Constant:i32<0>, t1567:1
ISEL: Match complete!

ISEL: Starting selection on root node: t957: ch = TokenFactor t955:1, t956:1

ISEL: Starting selection on root node: t1183: i32,i32 = ARMISD::ADDC t955, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1183: i32,i32 = tADDSi3 t955, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t955: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t315:1, FrameIndex:i32<10>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t955: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1
ISEL: Match complete!

ISEL: Starting selection on root node: t956: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t315:1, t1080, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1
ISEL: Match complete!

ISEL: Starting selection on root node: t315: i32,ch,glue = CopyFromReg t314, Register:i32 $r0, t314:1

ISEL: Starting selection on root node: t314: ch,glue = callseq_end t313, TargetConstant:i32<0>, TargetConstant:i32<-1>, t313:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t314: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t313, t313:1
ISEL: Match complete!

ISEL: Starting selection on root node: t313: ch,glue = ARMISD::CALL t312, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t313: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312, t312:1
ISEL: Match complete!

ISEL: Starting selection on root node: t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1

ISEL: Starting selection on root node: t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1

ISEL: Starting selection on root node: t310: ch,glue = CopyToReg t308, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t308: ch,glue = callseq_start t954, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t308: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t954
ISEL: Match complete!

ISEL: Starting selection on root node: t954: ch = TokenFactor t952, t953

ISEL: Starting selection on root node: t953: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t949, t1187, t1081, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t953: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1187, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t949
ISEL: Match complete!

ISEL: Starting selection on root node: t952: ch = store<(store (s32) into %ir.13, align 8)> t949, t1190, FrameIndex:i32<9>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949
ISEL: Match complete!

ISEL: Starting selection on root node: t1187: i32,i32 = ARMISD::ADDE t948, Constant:i32<0>, t1190:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1
  Morphed node: t1187: i32,i32 = tADCS t948, Constant:i32<0>, t1569:1
ISEL: Match complete!

ISEL: Starting selection on root node: t949: ch = TokenFactor t947:1, t948:1

ISEL: Starting selection on root node: t1190: i32,i32 = ARMISD::ADDC t947, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1190: i32,i32 = tADDSi3 t947, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t947: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t302:1, FrameIndex:i32<9>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t947: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1
ISEL: Match complete!

ISEL: Starting selection on root node: t948: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t302:1, t1081, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1
ISEL: Match complete!

ISEL: Starting selection on root node: t302: i32,ch,glue = CopyFromReg t301, Register:i32 $r0, t301:1

ISEL: Starting selection on root node: t301: ch,glue = callseq_end t300, TargetConstant:i32<0>, TargetConstant:i32<-1>, t300:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t301: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t300, t300:1
ISEL: Match complete!

ISEL: Starting selection on root node: t300: ch,glue = ARMISD::CALL t299, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t300: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299, t299:1
ISEL: Match complete!

ISEL: Starting selection on root node: t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1

ISEL: Starting selection on root node: t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1

ISEL: Starting selection on root node: t297: ch,glue = CopyToReg t295, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t295: ch,glue = callseq_start t946, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t295: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t946
ISEL: Match complete!

ISEL: Starting selection on root node: t946: ch = TokenFactor t944, t945

ISEL: Starting selection on root node: t945: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t941, t1194, t1082, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t945: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1194, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t941
ISEL: Match complete!

ISEL: Starting selection on root node: t944: ch = store<(store (s32) into %ir.12, align 8)> t941, t1197, FrameIndex:i32<8>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941
ISEL: Match complete!

ISEL: Starting selection on root node: t1194: i32,i32 = ARMISD::ADDE t940, Constant:i32<0>, t1197:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1
  Morphed node: t1194: i32,i32 = tADCS t940, Constant:i32<0>, t1571:1
ISEL: Match complete!

ISEL: Starting selection on root node: t941: ch = TokenFactor t939:1, t940:1

ISEL: Starting selection on root node: t1197: i32,i32 = ARMISD::ADDC t939, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1197: i32,i32 = tADDSi3 t939, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t939: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t289:1, FrameIndex:i32<8>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t939: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1
ISEL: Match complete!

ISEL: Starting selection on root node: t940: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t289:1, t1082, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1
ISEL: Match complete!

ISEL: Starting selection on root node: t289: i32,ch,glue = CopyFromReg t288, Register:i32 $r0, t288:1

ISEL: Starting selection on root node: t288: ch,glue = callseq_end t287, TargetConstant:i32<0>, TargetConstant:i32<-1>, t287:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t288: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t287, t287:1
ISEL: Match complete!

ISEL: Starting selection on root node: t287: ch,glue = ARMISD::CALL t286, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t287: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286, t286:1
ISEL: Match complete!

ISEL: Starting selection on root node: t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1

ISEL: Starting selection on root node: t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1

ISEL: Starting selection on root node: t284: ch,glue = CopyToReg t282, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t282: ch,glue = callseq_start t938, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t282: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t938
ISEL: Match complete!

ISEL: Starting selection on root node: t938: ch = TokenFactor t936, t937

ISEL: Starting selection on root node: t937: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t933, t1201, t1083, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t937: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1201, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t933
ISEL: Match complete!

ISEL: Starting selection on root node: t936: ch = store<(store (s32) into %ir.11, align 8)> t933, t1204, FrameIndex:i32<7>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933
ISEL: Match complete!

ISEL: Starting selection on root node: t1201: i32,i32 = ARMISD::ADDE t932, Constant:i32<0>, t1204:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1
  Morphed node: t1201: i32,i32 = tADCS t932, Constant:i32<0>, t1573:1
ISEL: Match complete!

ISEL: Starting selection on root node: t933: ch = TokenFactor t931:1, t932:1

ISEL: Starting selection on root node: t1204: i32,i32 = ARMISD::ADDC t931, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1204: i32,i32 = tADDSi3 t931, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t931: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t276:1, FrameIndex:i32<7>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t931: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1
ISEL: Match complete!

ISEL: Starting selection on root node: t932: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t276:1, t1083, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1
ISEL: Match complete!

ISEL: Starting selection on root node: t276: i32,ch,glue = CopyFromReg t275, Register:i32 $r0, t275:1

ISEL: Starting selection on root node: t275: ch,glue = callseq_end t274, TargetConstant:i32<0>, TargetConstant:i32<-1>, t274:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t275: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t274, t274:1
ISEL: Match complete!

ISEL: Starting selection on root node: t274: ch,glue = ARMISD::CALL t273, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t274: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273, t273:1
ISEL: Match complete!

ISEL: Starting selection on root node: t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1

ISEL: Starting selection on root node: t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1

ISEL: Starting selection on root node: t271: ch,glue = CopyToReg t269, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t269: ch,glue = callseq_start t930, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t269: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t930
ISEL: Match complete!

ISEL: Starting selection on root node: t930: ch = TokenFactor t928, t929

ISEL: Starting selection on root node: t929: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t925, t1208, t1084, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t929: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1208, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t925
ISEL: Match complete!

ISEL: Starting selection on root node: t928: ch = store<(store (s32) into %ir.10, align 8)> t925, t1211, FrameIndex:i32<6>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925
ISEL: Match complete!

ISEL: Starting selection on root node: t1208: i32,i32 = ARMISD::ADDE t924, Constant:i32<0>, t1211:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1
  Morphed node: t1208: i32,i32 = tADCS t924, Constant:i32<0>, t1575:1
ISEL: Match complete!

ISEL: Starting selection on root node: t925: ch = TokenFactor t923:1, t924:1

ISEL: Starting selection on root node: t1211: i32,i32 = ARMISD::ADDC t923, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1211: i32,i32 = tADDSi3 t923, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t923: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t263:1, FrameIndex:i32<6>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t923: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1
ISEL: Match complete!

ISEL: Starting selection on root node: t924: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t263:1, t1084, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1
ISEL: Match complete!

ISEL: Starting selection on root node: t263: i32,ch,glue = CopyFromReg t262, Register:i32 $r0, t262:1

ISEL: Starting selection on root node: t262: ch,glue = callseq_end t261, TargetConstant:i32<0>, TargetConstant:i32<-1>, t261:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t262: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t261, t261:1
ISEL: Match complete!

ISEL: Starting selection on root node: t261: ch,glue = ARMISD::CALL t260, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t261: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260, t260:1
ISEL: Match complete!

ISEL: Starting selection on root node: t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1

ISEL: Starting selection on root node: t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1

ISEL: Starting selection on root node: t258: ch,glue = CopyToReg t256, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t256: ch,glue = callseq_start t922, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t256: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t922
ISEL: Match complete!

ISEL: Starting selection on root node: t922: ch = TokenFactor t920, t921

ISEL: Starting selection on root node: t921: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t917, t1215, t1085, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t921: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1215, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t917
ISEL: Match complete!

ISEL: Starting selection on root node: t920: ch = store<(store (s32) into %ir.9, align 8)> t917, t1218, FrameIndex:i32<5>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917
ISEL: Match complete!

ISEL: Starting selection on root node: t1215: i32,i32 = ARMISD::ADDE t916, Constant:i32<0>, t1218:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1
  Morphed node: t1215: i32,i32 = tADCS t916, Constant:i32<0>, t1577:1
ISEL: Match complete!

ISEL: Starting selection on root node: t917: ch = TokenFactor t915:1, t916:1

ISEL: Starting selection on root node: t1218: i32,i32 = ARMISD::ADDC t915, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1218: i32,i32 = tADDSi3 t915, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t915: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t250:1, FrameIndex:i32<5>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t915: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1
ISEL: Match complete!

ISEL: Starting selection on root node: t916: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t250:1, t1085, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1
ISEL: Match complete!

ISEL: Starting selection on root node: t250: i32,ch,glue = CopyFromReg t249, Register:i32 $r0, t249:1

ISEL: Starting selection on root node: t249: ch,glue = callseq_end t248, TargetConstant:i32<0>, TargetConstant:i32<-1>, t248:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t249: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t248, t248:1
ISEL: Match complete!

ISEL: Starting selection on root node: t248: ch,glue = ARMISD::CALL t247, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t248: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247, t247:1
ISEL: Match complete!

ISEL: Starting selection on root node: t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1

ISEL: Starting selection on root node: t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1

ISEL: Starting selection on root node: t245: ch,glue = CopyToReg t243, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t243: ch,glue = callseq_start t914, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t243: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t914
ISEL: Match complete!

ISEL: Starting selection on root node: t914: ch = TokenFactor t912, t913

ISEL: Starting selection on root node: t913: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t909, t1222, t1086, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t913: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1222, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t909
ISEL: Match complete!

ISEL: Starting selection on root node: t912: ch = store<(store (s32) into %ir.8, align 8)> t909, t1225, FrameIndex:i32<4>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909
ISEL: Match complete!

ISEL: Starting selection on root node: t1222: i32,i32 = ARMISD::ADDE t908, Constant:i32<0>, t1225:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1
  Morphed node: t1222: i32,i32 = tADCS t908, Constant:i32<0>, t1579:1
ISEL: Match complete!

ISEL: Starting selection on root node: t909: ch = TokenFactor t907:1, t908:1

ISEL: Starting selection on root node: t1225: i32,i32 = ARMISD::ADDC t907, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1225: i32,i32 = tADDSi3 t907, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t907: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t237:1, FrameIndex:i32<4>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t907: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1
ISEL: Match complete!

ISEL: Starting selection on root node: t908: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t237:1, t1086, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1
ISEL: Match complete!

ISEL: Starting selection on root node: t237: i32,ch,glue = CopyFromReg t236, Register:i32 $r0, t236:1

ISEL: Starting selection on root node: t236: ch,glue = callseq_end t234, TargetConstant:i32<0>, TargetConstant:i32<-1>, t234:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t236: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t234, t234:1
ISEL: Match complete!

ISEL: Starting selection on root node: t234: ch,glue = ARMISD::CALL t231, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t234: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231, t231:1
ISEL: Match complete!

ISEL: Starting selection on root node: t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1

ISEL: Starting selection on root node: t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1

ISEL: Starting selection on root node: t227: ch,glue = CopyToReg t223, Register:i32 $r0, t1488

ISEL: Starting selection on root node: t223: ch,glue = callseq_start t906, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906
ISEL: Match complete!

ISEL: Starting selection on root node: t906: ch = TokenFactor t904, t905

ISEL: Starting selection on root node: t905: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t901, t1229, t1087, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t905: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1229, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t901
ISEL: Match complete!

ISEL: Starting selection on root node: t904: ch = store<(store (s32) into %ir.7, align 8)> t901, t1232, FrameIndex:i32<3>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901
ISEL: Match complete!

ISEL: Starting selection on root node: t1229: i32,i32 = ARMISD::ADDE t900, Constant:i32<0>, t1232:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Skipped scope entry (due to false predicate) at index 131126, continuing at 131163
  Match failed at index 131170
  Continuing at 131198
  Match failed at index 131199
  Continuing at 131236
  Match failed at index 131243
  Continuing at 131271
  Match failed at index 131278
  Continuing at 131309
  Skipped scope entry (due to false predicate) at index 131318, continuing at 131364
  Skipped scope entry (due to false predicate) at index 131365, continuing at 131411
  Match failed at index 131316
  Continuing at 131412
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1
  Morphed node: t1229: i32,i32 = tADCS t900, Constant:i32<0>, t1581:1
ISEL: Match complete!

ISEL: Starting selection on root node: t901: ch = TokenFactor t899:1, t900:1

ISEL: Starting selection on root node: t1232: i32,i32 = ARMISD::ADDC t899, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Skipped scope entry (due to false predicate) at index 130018, continuing at 130047
  Match failed at index 130053
  Continuing at 130074
  Match failed at index 130075
  Continuing at 130104
  Morphed node: t1232: i32,i32 = tADDSi3 t899, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t899: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t213, FrameIndex:i32<3>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t899: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t213
ISEL: Match complete!

ISEL: Starting selection on root node: t900: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t213, t1087, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213
ISEL: Match complete!

ISEL: Starting selection on root node: t213: ch = store<(store (s32) into %ir.28)> t212, t893, FrameIndex:i32<24>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t213: ch = tSTRspi<Mem:(store (s32) into %ir.28)> t893, TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t212
ISEL: Match complete!

ISEL: Starting selection on root node: t893: i32,ch,glue = CopyFromReg t892, Register:i32 $r0, t892:1

ISEL: Starting selection on root node: t892: ch,glue = callseq_end t891, TargetConstant:i32<0>, TargetConstant:i32<-1>, t891:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891, t891:1
ISEL: Match complete!

ISEL: Starting selection on root node: t891: ch,glue = ARMISD::CALL t890, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135624
  Skipped scope entry (due to false predicate) at index 135627, continuing at 135637
  Morphed node: t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1
ISEL: Match complete!

ISEL: Starting selection on root node: t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

ISEL: Starting selection on root node: t880: i32 = or t878, t712
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

ISEL: Starting selection on root node: t878: i32 = or t876, t745
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 756
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1569
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1640
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2027
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t879: i32 = or t877, t711
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t876: i32 = or t874, t856
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t877: i32 = or t875, t744
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 756
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1569
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1640
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2027
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t856: i32 = and t854, t767
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t875: i32 = or t873, t855
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t854: i32 = and t1236, t1243
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t855: i32 = and t853, t766
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1236: i32,i32 = ARMISD::ADDE t849, t843, t1239:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Match failed at index 131121
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1
  Morphed node: t1236: i32,i32 = tADCS t849, t843, t1582:1
ISEL: Match complete!

ISEL: Starting selection on root node: t853: i32 = and t1239, t1246
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

ISEL: Starting selection on root node: t1239: i32,i32 = ARMISD::ADDC t848, t842
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Match failed at index 130013
  Continuing at 130288
  Skipped scope entry (due to false predicate) at index 130293, continuing at 130312
  Morphed node: t1239: i32,i32 = tADDSrr t848, t842
ISEL: Match complete!

ISEL: Starting selection on root node: t842: i32,ch,glue = CopyFromReg t841, Register:i32 $r0, t841:1

ISEL: Starting selection on root node: t841: ch,glue = callseq_end t840, TargetConstant:i32<0>, TargetConstant:i32<-1>, t840:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t841: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t840, t840:1
ISEL: Match complete!

ISEL: Starting selection on root node: t840: ch,glue = ARMISD::CALL t839, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135624
  Skipped scope entry (due to false predicate) at index 135627, continuing at 135637
  Morphed node: t840: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839, t839:1
ISEL: Match complete!

ISEL: Starting selection on root node: t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

ISEL: Starting selection on root node: t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

ISEL: Starting selection on root node: t1243: i32,i32 = ARMISD::ADDE t794, t773, t1246:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Match failed at index 131121
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1583: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1246:1
  Morphed node: t1243: i32,i32 = tADCS t794, t773, t1583:1
ISEL: Match complete!

ISEL: Starting selection on root node: t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

ISEL: Starting selection on root node: t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

ISEL: Starting selection on root node: t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

ISEL: Starting selection on root node: t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

ISEL: Starting selection on root node: t1246: i32,i32 = ARMISD::ADDC t793, t772
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Match failed at index 130013
  Continuing at 130288
  Skipped scope entry (due to false predicate) at index 130293, continuing at 130312
  Morphed node: t1246: i32,i32 = tADDSrr t793, t772
ISEL: Match complete!

ISEL: Starting selection on root node: t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

ISEL: Starting selection on root node: t836: ch,glue = CopyToReg t834, Register:i32 $r0, t824

ISEL: Starting selection on root node: t711: i32,ch,glue = CopyFromReg t710, Register:i32 $r0, t710:1

ISEL: Starting selection on root node: t766: i32,ch,glue = CopyFromReg t765, Register:i32 $r0, t765:1

ISEL: Starting selection on root node: t793: i32,ch,glue = CopyFromReg t792, Register:i32 $r0, t792:1

ISEL: Starting selection on root node: t824: i32,ch,glue = CopyFromReg t823, Register:i32 $r0, t823:1

ISEL: Starting selection on root node: t710: ch,glue = callseq_end t709, TargetConstant:i32<0>, TargetConstant:i32<-1>, t709:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t710: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t709, t709:1
ISEL: Match complete!

ISEL: Starting selection on root node: t765: ch,glue = callseq_end t764, TargetConstant:i32<0>, TargetConstant:i32<-1>, t764:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t765: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t764, t764:1
ISEL: Match complete!

ISEL: Starting selection on root node: t792: ch,glue = callseq_end t791, TargetConstant:i32<0>, TargetConstant:i32<-1>, t791:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791, t791:1
ISEL: Match complete!

ISEL: Starting selection on root node: t823: ch,glue = callseq_end t822, TargetConstant:i32<0>, TargetConstant:i32<-1>, t822:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822, t822:1
ISEL: Match complete!

ISEL: Starting selection on root node: t709: ch,glue = ARMISD::CALL t707, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135624
  Skipped scope entry (due to false predicate) at index 135627, continuing at 135637
  Morphed node: t709: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707, t707:1
ISEL: Match complete!

ISEL: Starting selection on root node: t745: i32 = xor t742, t740
ISEL: Starting pattern match
  Initial Opcode index to 116274
  Skipped scope entry (due to false predicate) at index 116280, continuing at 116365
  Match failed at index 116369
  Continuing at 116425
  Match failed at index 116427
  Continuing at 116460
  Continuing at 116461
  Match failed at index 116462
  Continuing at 116497
  Skipped scope entry (due to false predicate) at index 116507, continuing at 116533
  Skipped scope entry (due to false predicate) at index 116534, continuing at 116560
  Skipped scope entry (due to false predicate) at index 116561, continuing at 116587
  Skipped scope entry (due to false predicate) at index 116588, continuing at 116614
  Match failed at index 116505
  Continuing at 116615
  Match failed at index 116616
  Continuing at 116688
  Match failed at index 116694
  Continuing at 116759
  Skipped scope entry (due to false predicate) at index 116764, continuing at 116786
  Morphed node: t745: i32 = tEOR Register:i32 $cpsr, t742, t740, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t764: ch,glue = ARMISD::CALL t762, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135624
  Skipped scope entry (due to false predicate) at index 135627, continuing at 135637
  Morphed node: t764: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762, t762:1
ISEL: Match complete!

ISEL: Starting selection on root node: t791: ch,glue = ARMISD::CALL t790, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135624
  Skipped scope entry (due to false predicate) at index 135627, continuing at 135637
  Morphed node: t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1
ISEL: Match complete!

ISEL: Starting selection on root node: t822: ch,glue = ARMISD::CALL t820, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135624
  Skipped scope entry (due to false predicate) at index 135627, continuing at 135637
  Morphed node: t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1
ISEL: Match complete!

ISEL: Starting selection on root node: t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

ISEL: Starting selection on root node: t744: i32 = xor t741, t739
ISEL: Starting pattern match
  Initial Opcode index to 116274
  Skipped scope entry (due to false predicate) at index 116280, continuing at 116365
  Match failed at index 116369
  Continuing at 116425
  Match failed at index 116427
  Continuing at 116460
  Continuing at 116461
  Match failed at index 116462
  Continuing at 116497
  Skipped scope entry (due to false predicate) at index 116507, continuing at 116533
  Skipped scope entry (due to false predicate) at index 116534, continuing at 116560
  Skipped scope entry (due to false predicate) at index 116561, continuing at 116587
  Skipped scope entry (due to false predicate) at index 116588, continuing at 116614
  Match failed at index 116505
  Continuing at 116615
  Match failed at index 116616
  Continuing at 116688
  Match failed at index 116694
  Continuing at 116759
  Skipped scope entry (due to false predicate) at index 116764, continuing at 116786
  Morphed node: t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t740: i32 = and t1251, t1256
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

ISEL: Starting selection on root node: t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

ISEL: Starting selection on root node: t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

ISEL: Starting selection on root node: t888: ch,glue = CopyToReg t887, Register:i32 $r1, undef:i32, t887:1

ISEL: Starting selection on root node: t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

ISEL: Starting selection on root node: t739: i32 = and t1265, t1269
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t739: i32 = tAND Register:i32 $cpsr, t1265, t1269, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1251: i32,i32 = ARMISD::SUBE t1261, t727, t1265:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131702
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1
  Morphed node: t1251: i32,i32 = tSBCS t1261, t727, t1584:1
ISEL: Match complete!

ISEL: Starting selection on root node: t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

ISEL: Starting selection on root node: t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

ISEL: Starting selection on root node: t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

ISEL: Starting selection on root node: t873: i32 = or t871, t857
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t874: i32 = or t872, t858
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t887: ch,glue = CopyToReg t885, Register:i32 $r0, t165

ISEL: Starting selection on root node: t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

ISEL: Starting selection on root node: t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

ISEL: Starting selection on root node: t1256: i32,i32 = ARMISD::ADDE t722, t719, t1269:1
ISEL: Starting pattern match
  Initial Opcode index to 131014
  Skipped scope entry (due to false predicate) at index 131023, continuing at 131086
  Skipped scope entry (due to false predicate) at index 131087, continuing at 131117
  Match failed at index 131021
  Continuing at 131118
  Match failed at index 131121
  Continuing at 131413
  Skipped scope entry (due to false predicate) at index 131419, continuing at 131445
Creating new node: t1585: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1269:1
  Morphed node: t1256: i32,i32 = tADCS t722, t719, t1585:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1265: i32,i32 = ARMISD::SUBC t1272, t726
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Match failed at index 130519
  Continuing at 130534
  Match failed at index 130541
  Continuing at 130570
  Match failed at index 130572
  Continuing at 130602
  Match failed at index 130605
  Continuing at 130675
  Match failed at index 130677
  Continuing at 130707
  Skipped scope entry (due to false predicate) at index 130713, continuing at 130732
  Morphed node: t1265: i32,i32 = tSUBSrr t1272, t726
ISEL: Match complete!

ISEL: Starting selection on root node: t1261: i32,i32 = ARMISD::SUBE t733, t730, t1272:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131702
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1
  Morphed node: t1261: i32,i32 = tSBCS t733, t730, t1586:1
ISEL: Match complete!

ISEL: Starting selection on root node: t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

ISEL: Starting selection on root node: t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

ISEL: Starting selection on root node: t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

ISEL: Starting selection on root node: t871: i32 = or t869, t860
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t872: i32 = or t870, t861
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 11, continuing at 85
  Skipped scope entry (due to false predicate) at index 86, continuing at 160
  Skipped scope entry (due to false predicate) at index 161, continuing at 214
  Skipped scope entry (due to false predicate) at index 215, continuing at 309
  Skipped scope entry (due to false predicate) at index 310, continuing at 363
  Skipped scope entry (due to false predicate) at index 365, continuing at 510
  Skipped scope entry (due to false predicate) at index 511, continuing at 564
  Skipped scope entry (due to false predicate) at index 565, continuing at 618
  Skipped scope entry (due to false predicate) at index 620, continuing at 748
  Match failed at index 9
  Continuing at 749
  Match failed at index 752
  Continuing at 787
  Skipped scope entry (due to false predicate) at index 792, continuing at 828
  Skipped scope entry (due to false predicate) at index 829, continuing at 894
  Skipped scope entry (due to false predicate) at index 895, continuing at 960
  Skipped scope entry (due to false predicate) at index 961, continuing at 1006
  Skipped scope entry (due to false predicate) at index 1007, continuing at 1094
  Skipped scope entry (due to false predicate) at index 1095, continuing at 1140
  Skipped scope entry (due to false predicate) at index 1141, continuing at 1228
  Skipped scope entry (due to false predicate) at index 1229, continuing at 1299
  Skipped scope entry (due to false predicate) at index 1300, continuing at 1372
  Skipped scope entry (due to false predicate) at index 1373, continuing at 1445
  Skipped scope entry (due to false predicate) at index 1446, continuing at 1485
  Match failed at index 790
  Continuing at 1486
  Match failed at index 1491
  Continuing at 1518
  Match failed at index 1520
  Continuing at 1559
  Match failed at index 1564
  Continuing at 1604
  Match failed at index 1608
  Continuing at 1635
  Match failed at index 1637
  Continuing at 1677
  Continuing at 1678
  Match failed at index 1680
  Continuing at 1763
  Match failed at index 1774
  Continuing at 1907
  Skipped scope entry (due to false predicate) at index 1912, continuing at 1938
  Skipped scope entry (due to false predicate) at index 1939, continuing at 1965
  Skipped scope entry (due to false predicate) at index 1966, continuing at 1992
  Skipped scope entry (due to false predicate) at index 1993, continuing at 2019
  Match failed at index 1910
  Continuing at 2020
  Continuing at 2021
  Match failed at index 2023
  Continuing at 2054
  Continuing at 2055
  Match failed at index 2057
  Continuing at 2089
  Match failed at index 2100
  Continuing at 2125
  Match failed at index 2133
  Continuing at 2158
  Match failed at index 2166
  Continuing at 2189
  Match failed at index 2190
  Continuing at 2213
  Continuing at 2214
  Continuing at 2215
  Match failed at index 2216
  Continuing at 2275
  Match failed at index 2282
  Continuing at 2380
  Skipped scope entry (due to false predicate) at index 2385, continuing at 2407
  Morphed node: t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t165: i32 = add nsw t163, t164
ISEL: Starting pattern match
  Initial Opcode index to 10547
  Skipped scope entry (due to false predicate) at index 10554, continuing at 10600
  Skipped scope entry (due to false predicate) at index 10601, continuing at 10648
  Skipped scope entry (due to false predicate) at index 10649, continuing at 10695
  Skipped scope entry (due to false predicate) at index 10696, continuing at 10743
  Skipped scope entry (due to false predicate) at index 10744, continuing at 10790
  Skipped scope entry (due to false predicate) at index 10791, continuing at 10838
  Skipped scope entry (due to false predicate) at index 10839, continuing at 10885
  Skipped scope entry (due to false predicate) at index 10886, continuing at 10933
  Match failed at index 10552
  Continuing at 10934
  Skipped scope entry (due to false predicate) at index 10939, continuing at 10986
  Skipped scope entry (due to false predicate) at index 10987, continuing at 11035
  Skipped scope entry (due to false predicate) at index 11036, continuing at 11083
  Skipped scope entry (due to false predicate) at index 11084, continuing at 11132
  Skipped scope entry (due to false predicate) at index 11133, continuing at 11180
  Skipped scope entry (due to false predicate) at index 11181, continuing at 11229
  Skipped scope entry (due to false predicate) at index 11230, continuing at 11277
  Skipped scope entry (due to false predicate) at index 11278, continuing at 11326
  Match failed at index 10937
  Continuing at 11327
  Skipped scope entry (due to false predicate) at index 11332, continuing at 11361
  Skipped scope entry (due to false predicate) at index 11362, continuing at 11392
  Skipped scope entry (due to false predicate) at index 11393, continuing at 11422
  Skipped scope entry (due to false predicate) at index 11423, continuing at 11453
  Match failed at index 11330
  Continuing at 11454
  Skipped scope entry (due to false predicate) at index 11459, continuing at 11489
  Skipped scope entry (due to false predicate) at index 11490, continuing at 11521
  Skipped scope entry (due to false predicate) at index 11522, continuing at 11552
  Skipped scope entry (due to false predicate) at index 11553, continuing at 11584
  Match failed at index 11457
  Continuing at 11585
  Match failed at index 11588
  Continuing at 11694
  Match failed at index 11697
  Continuing at 11919
  Match failed at index 11923
  Continuing at 12103
  Match failed at index 12106
  Continuing at 12320
  Match failed at index 12324
  Continuing at 12596
  Match failed at index 12599
  Continuing at 12778
  Match failed at index 12781
  Continuing at 12824
  Match failed at index 12827
  Continuing at 13013
  Match failed at index 13020
  Continuing at 13200
  Match failed at index 13204
  Continuing at 13231
  Match failed at index 13234
  Continuing at 13391
  Match failed at index 13395
  Continuing at 13422
  Continuing at 13423
  Match failed at index 13426
  Continuing at 13587
  Match failed at index 13590
  Continuing at 13630
  Match failed at index 13632
  Continuing at 13673
  Match failed at index 13677
  Continuing at 13966
  Match failed at index 13969
  Continuing at 14264
  Match failed at index 14272
  Continuing at 14298
  Match failed at index 14300
  Continuing at 14343
  Match failed at index 14347
  Continuing at 14373
  Match failed at index 14375
  Continuing at 14418
  Match failed at index 14422
  Continuing at 14448
  Continuing at 14449
  Match failed at index 14451
  Continuing at 14495
  Match failed at index 14500
  Continuing at 14526
  Match failed at index 14528
  Continuing at 14572
  Match failed at index 14575
  Continuing at 14675
  Match failed at index 14677
  Continuing at 14756
  Match failed at index 14759
  Continuing at 14797
  Match failed at index 14800
  Continuing at 14982
  Match failed at index 14989
  Continuing at 15124
  Match failed at index 15127
  Continuing at 15162
  Match failed at index 15164
  Continuing at 15199
  Continuing at 15200
  Match failed at index 15202
  Continuing at 15261
  Match failed at index 15266
  Continuing at 15716
  Match failed at index 15718
  Continuing at 15807
  Match failed at index 15810
  Continuing at 15927
  Match failed at index 15929
  Continuing at 15987
  Match failed at index 15990
  Continuing at 16107
  Match failed at index 16110
  Continuing at 16865
  Match failed at index 16868
  Continuing at 16955
  Match failed at index 16957
  Continuing at 17015
  Match failed at index 17018
  Continuing at 17074
  Match failed at index 17077
  Continuing at 17250
  Match failed at index 17257
  Continuing at 17989
  Skipped scope entry (due to false predicate) at index 17995, continuing at 18017
  Morphed node: t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t689: ch = TokenFactor t687:1, t688:1

ISEL: Starting selection on root node: t690: i32 = xor t687, Constant:i32<-1>
ISEL: Starting pattern match
  Initial Opcode index to 116274
  Skipped scope entry (due to false predicate) at index 116286, continuing at 116312
  Skipped scope entry (due to false predicate) at index 116313, continuing at 116338
  Skipped scope entry (due to false predicate) at index 116339, continuing at 116364
  Match failed at index 116284
  Continuing at 116365
  Match failed at index 116369
  Continuing at 116425
  Match failed at index 116427
  Continuing at 116460
  Continuing at 116461
  Match failed at index 116462
  Continuing at 116497
  Skipped scope entry (due to false predicate) at index 116507, continuing at 116533
  Skipped scope entry (due to false predicate) at index 116534, continuing at 116560
  Skipped scope entry (due to false predicate) at index 116561, continuing at 116587
  Skipped scope entry (due to false predicate) at index 116588, continuing at 116614
  Match failed at index 116505
  Continuing at 116615
  Skipped scope entry (due to false predicate) at index 116622, continuing at 116643
  Skipped scope entry (due to false predicate) at index 116644, continuing at 116665
  Morphed node: t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t691: i32 = xor t688, Constant:i32<-1>
ISEL: Starting pattern match
  Initial Opcode index to 116274
  Skipped scope entry (due to false predicate) at index 116286, continuing at 116312
  Skipped scope entry (due to false predicate) at index 116313, continuing at 116338
  Skipped scope entry (due to false predicate) at index 116339, continuing at 116364
  Match failed at index 116284
  Continuing at 116365
  Match failed at index 116369
  Continuing at 116425
  Match failed at index 116427
  Continuing at 116460
  Continuing at 116461
  Match failed at index 116462
  Continuing at 116497
  Skipped scope entry (due to false predicate) at index 116507, continuing at 116533
  Skipped scope entry (due to false predicate) at index 116534, continuing at 116560
  Skipped scope entry (due to false predicate) at index 116561, continuing at 116587
  Skipped scope entry (due to false predicate) at index 116588, continuing at 116614
  Match failed at index 116505
  Continuing at 116615
  Skipped scope entry (due to false predicate) at index 116622, continuing at 116643
  Skipped scope entry (due to false predicate) at index 116644, continuing at 116665
  Morphed node: t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t694: ch = TokenFactor t692:1, t693:1

ISEL: Starting selection on root node: t703: ch,glue = CopyToReg t700, Register:i32 $r0, t692

ISEL: Starting selection on root node: t720: ch = TokenFactor t718:1, t719:1

ISEL: Starting selection on root node: t1269: i32,i32 = ARMISD::ADDC t721, t718
ISEL: Starting pattern match
  Initial Opcode index to 129856
  Skipped scope entry (due to false predicate) at index 129865, continuing at 129937
  Skipped scope entry (due to false predicate) at index 129938, continuing at 129961
  Skipped scope entry (due to false predicate) at index 129962, continuing at 129985
  Skipped scope entry (due to false predicate) at index 129986, continuing at 130009
  Match failed at index 129863
  Continuing at 130010
  Match failed at index 130013
  Continuing at 130288
  Skipped scope entry (due to false predicate) at index 130293, continuing at 130312
  Morphed node: t1269: i32,i32 = tADDSrr t721, t718
ISEL: Match complete!

ISEL: Starting selection on root node: t723: ch = TokenFactor t721:1, t722:1

ISEL: Starting selection on root node: t728: ch = TokenFactor t726:1, t727:1

ISEL: Starting selection on root node: t731: ch = TokenFactor t729:1, t730:1

ISEL: Starting selection on root node: t1272: i32,i32 = ARMISD::SUBC t732, t729
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Match failed at index 130519
  Continuing at 130534
  Match failed at index 130541
  Continuing at 130570
  Match failed at index 130572
  Continuing at 130602
  Match failed at index 130605
  Continuing at 130675
  Match failed at index 130677
  Continuing at 130707
  Skipped scope entry (due to false predicate) at index 130713, continuing at 130732
  Morphed node: t1272: i32,i32 = tSUBSrr t732, t729
ISEL: Match complete!

ISEL: Starting selection on root node: t734: ch = TokenFactor t732:1, t733:1

ISEL: Starting selection on root node: t743: ch = TokenFactor t741:1, t742:1

ISEL: Starting selection on root node: t748: ch = TokenFactor t746:1, t747:1

ISEL: Starting selection on root node: t751: ch = TokenFactor t749:1, t750:1

ISEL: Starting selection on root node: t759: ch,glue = CopyToReg t757, Register:i32 $r0, t749

ISEL: Starting selection on root node: t774: ch = TokenFactor t772:1, t773:1

ISEL: Starting selection on root node: t777: ch = TokenFactor t775:1, t776:1

ISEL: Starting selection on root node: t780: ch = TokenFactor t778:1, t779:1

ISEL: Starting selection on root node: t787: ch,glue = CopyToReg t785, Register:i32 $r0, t778

ISEL: Starting selection on root node: t803: ch = TokenFactor t801:1, t802:1

ISEL: Starting selection on root node: t806: ch = TokenFactor t804:1, t805:1

ISEL: Starting selection on root node: t809: ch = TokenFactor t807:1, t808:1

ISEL: Starting selection on root node: t817: ch,glue = CopyToReg t815, Register:i32 $r0, t807

ISEL: Starting selection on root node: t850: ch = TokenFactor t848:1, t849:1

ISEL: Starting selection on root node: t859: ch = TokenFactor t857:1, t858:1

ISEL: Starting selection on root node: t862: ch = TokenFactor t860:1, t861:1

ISEL: Starting selection on root node: t865: ch = TokenFactor t863:1, t864:1

ISEL: Starting selection on root node: t869: i32 = and t866, t863
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t870: i32 = and t867, t864
ISEL: Starting pattern match
  Initial Opcode index to 25643
  Skipped scope entry (due to false predicate) at index 25645, continuing at 25708
  Skipped scope entry (due to false predicate) at index 25709, continuing at 25753
  Skipped scope entry (due to false predicate) at index 25754, continuing at 25799
  Skipped scope entry (due to false predicate) at index 25800, continuing at 25846
  Skipped scope entry (due to false predicate) at index 25847, continuing at 25891
  Skipped scope entry (due to false predicate) at index 25892, continuing at 25937
  Skipped scope entry (due to false predicate) at index 25938, continuing at 25984
  Match failed at index 25987
  Continuing at 26022
  Match failed at index 26024
  Continuing at 26060
  Match failed at index 26061
  Continuing at 26088
  Match failed at index 26089
  Continuing at 26117
  Match failed at index 26118
  Continuing at 26147
  Match failed at index 26148
  Continuing at 26175
  Match failed at index 26176
  Continuing at 26204
  Match failed at index 26205
  Continuing at 26234
  Match failed at index 26237
  Continuing at 26273
  Match failed at index 26274
  Continuing at 26313
  Match failed at index 26314
  Continuing at 26354
  Match failed at index 26355
  Continuing at 26394
  Match failed at index 26395
  Continuing at 26435
  Match failed at index 26437
  Continuing at 26474
  Match failed at index 26477
  Continuing at 26542
  Match failed at index 26544
  Continuing at 26610
  Match failed at index 26618
  Continuing at 26645
  Match failed at index 26647
  Continuing at 26723
  Match failed at index 26727
  Continuing at 26754
  Match failed at index 26756
  Continuing at 26796
  Continuing at 26797
  Match failed at index 26799
  Continuing at 26882
  Match failed at index 26885
  Continuing at 26925
  Match failed at index 26927
  Continuing at 27010
  Skipped scope entry (due to false predicate) at index 27020, continuing at 27046
  Skipped scope entry (due to false predicate) at index 27047, continuing at 27073
  Skipped scope entry (due to false predicate) at index 27074, continuing at 27100
  Skipped scope entry (due to false predicate) at index 27101, continuing at 27127
  Match failed at index 27018
  Continuing at 27128
  Match failed at index 27130
  Continuing at 27210
  Continuing at 27211
  Match failed at index 27213
  Continuing at 27294
  Match failed at index 27298
  Continuing at 27333
  Match failed at index 27334
  Continuing at 27357
  Match failed at index 27358
  Continuing at 27382
  Match failed at index 27389
  Continuing at 27424
  Match failed at index 27426
  Continuing at 27466
  Match failed at index 27472
  Continuing at 27589
  Skipped scope entry (due to false predicate) at index 27594, continuing at 27616
  Morphed node: t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t868: ch = TokenFactor t866:1, t867:1

ISEL: Starting selection on root node: t164: i32,ch = load<(dereferenceable load (s32) from %ir.5)> t686, FrameIndex:i32<1>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t164: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t163: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t686, FrameIndex:i32<0>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t687: i32,ch = load<(dereferenceable load (s32) from %ir.27, align 8)> t686, FrameIndex:i32<23>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t687: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t688: i32,ch = load<(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> t686, t1067, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t692: i32,ch = load<(dereferenceable load (s32) from %ir.26, align 8)> t686, FrameIndex:i32<22>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t693: i32,ch = load<(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> t686, t1068, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t718: i32,ch = load<(dereferenceable load (s32) from %ir.25, align 8)> t686, FrameIndex:i32<21>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t718: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t719: i32,ch = load<(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> t686, t1069, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t721: i32,ch = load<(dereferenceable load (s32) from %ir.24, align 8)> t686, FrameIndex:i32<20>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t722: i32,ch = load<(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> t686, t1070, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t726: i32,ch = load<(dereferenceable load (s32) from %ir.23, align 8)> t686, FrameIndex:i32<19>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t726: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t727: i32,ch = load<(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> t686, t1071, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t729: i32,ch = load<(dereferenceable load (s32) from %ir.22, align 8)> t686, FrameIndex:i32<18>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t729: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t730: i32,ch = load<(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> t686, t1072, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t732: i32,ch = load<(dereferenceable load (s32) from %ir.21, align 8)> t686, FrameIndex:i32<17>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t733: i32,ch = load<(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> t686, t1073, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t741: i32,ch = load<(dereferenceable load (s32) from %ir.20, align 8)> t686, FrameIndex:i32<16>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t742: i32,ch = load<(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> t686, t1074, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t746: i32,ch = load<(dereferenceable load (s32) from %ir.19, align 8)> t686, FrameIndex:i32<15>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t747: i32,ch = load<(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> t686, t1075, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t749: i32,ch = load<(dereferenceable load (s32) from %ir.18, align 8)> t686, FrameIndex:i32<14>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t750: i32,ch = load<(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> t686, t1076, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t772: i32,ch = load<(dereferenceable load (s32) from %ir.17, align 8)> t686, FrameIndex:i32<13>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t772: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t773: i32,ch = load<(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> t686, t1077, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t775: i32,ch = load<(dereferenceable load (s32) from %ir.16, align 8)> t686, FrameIndex:i32<12>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t776: i32,ch = load<(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> t686, t1078, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t778: i32,ch = load<(dereferenceable load (s32) from %ir.15, align 8)> t686, FrameIndex:i32<11>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t779: i32,ch = load<(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> t686, t1079, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t801: i32,ch = load<(dereferenceable load (s32) from %ir.14, align 8)> t686, FrameIndex:i32<10>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t802: i32,ch = load<(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> t686, t1080, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t804: i32,ch = load<(dereferenceable load (s32) from %ir.13, align 8)> t686, FrameIndex:i32<9>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t805: i32,ch = load<(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> t686, t1081, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t807: i32,ch = load<(dereferenceable load (s32) from %ir.12, align 8)> t686, FrameIndex:i32<8>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t808: i32,ch = load<(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> t686, t1082, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t848: i32,ch = load<(dereferenceable load (s32) from %ir.11, align 8)> t686, FrameIndex:i32<7>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t849: i32,ch = load<(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> t686, t1083, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t857: i32,ch = load<(dereferenceable load (s32) from %ir.10, align 8)> t686, FrameIndex:i32<6>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t857: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t858: i32,ch = load<(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> t686, t1084, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t860: i32,ch = load<(dereferenceable load (s32) from %ir.9, align 8)> t686, FrameIndex:i32<5>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t861: i32,ch = load<(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> t686, t1085, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t861: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t863: i32,ch = load<(dereferenceable load (s32) from %ir.8, align 8)> t686, FrameIndex:i32<4>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t863: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t864: i32,ch = load<(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> t686, t1086, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t866: i32,ch = load<(dereferenceable load (s32) from %ir.7, align 8)> t686, FrameIndex:i32<3>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t867: i32,ch = load<(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> t686, t1087, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
ISEL: Match complete!

ISEL: Starting selection on root node: t686: ch = TokenFactor t683, t685

ISEL: Starting selection on root node: t685: ch = store<(store (s32) into %ir.27 + 4, basealign 8)> t156:1, t1278, t1067, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t685: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1278, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1278: i32,i32 = ARMISD::SUBE Constant:i32<0>, t680, t1282:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1
  Morphed node: t1278: i32,i32 = tSBCS Constant:i32<0>, t680, t1589:1
ISEL: Match complete!

ISEL: Starting selection on root node: t683: ch = store<(store (s32) into %ir.27, align 8)> t156:1, t1282, FrameIndex:i32<23>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1
ISEL: Match complete!

ISEL: Starting selection on root node: t680: i32 = sra t158, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
Creating constant: t1590: i32 = TargetConstant<31>
  Morphed node: t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1282: i32,i32 = ARMISD::SUBC Constant:i32<0>, t158
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1282: i32,i32 = tRSBS t158
ISEL: Match complete!

ISEL: Starting selection on root node: t158: i32 = mul nsw t156, Constant:i32<21>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t158: i32 = tMUL nsw Register:i32 $cpsr, t156, Constant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t156: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t679, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679
ISEL: Match complete!

ISEL: Starting selection on root node: t679: ch = TokenFactor t676, t678

ISEL: Starting selection on root node: t678: ch = store<(store (s32) into %ir.26 + 4, basealign 8)> t149:1, t1288, t1068, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t678: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1288, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1288: i32,i32 = ARMISD::SUBE Constant:i32<0>, t673, t1292:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1
  Morphed node: t1288: i32,i32 = tSBCS Constant:i32<0>, t673, t1592:1
ISEL: Match complete!

ISEL: Starting selection on root node: t676: ch = store<(store (s32) into %ir.26, align 8)> t149:1, t1292, FrameIndex:i32<22>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1
ISEL: Match complete!

ISEL: Starting selection on root node: t673: i32 = sra t151, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1292: i32,i32 = ARMISD::SUBC Constant:i32<0>, t151
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1292: i32,i32 = tRSBS t151
ISEL: Match complete!

ISEL: Starting selection on root node: t151: i32 = mul nsw t149, Constant:i32<20>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t151: i32 = tMUL nsw Register:i32 $cpsr, t149, Constant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t149: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t672, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672
ISEL: Match complete!

ISEL: Starting selection on root node: t672: ch = TokenFactor t669, t671

ISEL: Starting selection on root node: t671: ch = store<(store (s32) into %ir.25 + 4, basealign 8)> t142:1, t1298, t1069, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t671: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1298, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1298: i32,i32 = ARMISD::SUBE Constant:i32<0>, t666, t1302:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1
  Morphed node: t1298: i32,i32 = tSBCS Constant:i32<0>, t666, t1593:1
ISEL: Match complete!

ISEL: Starting selection on root node: t669: ch = store<(store (s32) into %ir.25, align 8)> t142:1, t1302, FrameIndex:i32<21>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1
ISEL: Match complete!

ISEL: Starting selection on root node: t666: i32 = sra t144, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1302: i32,i32 = ARMISD::SUBC Constant:i32<0>, t144
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1302: i32,i32 = tRSBS t144
ISEL: Match complete!

ISEL: Starting selection on root node: t144: i32 = mul nsw t142, Constant:i32<19>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t144: i32 = tMUL nsw Register:i32 $cpsr, t142, Constant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t142: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t665, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665
ISEL: Match complete!

ISEL: Starting selection on root node: t665: ch = TokenFactor t662, t664

ISEL: Starting selection on root node: t664: ch = store<(store (s32) into %ir.24 + 4, basealign 8)> t135:1, t1308, t1070, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t664: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1308, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1308: i32,i32 = ARMISD::SUBE Constant:i32<0>, t659, t1312:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1
  Morphed node: t1308: i32,i32 = tSBCS Constant:i32<0>, t659, t1594:1
ISEL: Match complete!

ISEL: Starting selection on root node: t662: ch = store<(store (s32) into %ir.24, align 8)> t135:1, t1312, FrameIndex:i32<20>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1
ISEL: Match complete!

ISEL: Starting selection on root node: t659: i32 = sra t137, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1312: i32,i32 = ARMISD::SUBC Constant:i32<0>, t137
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1312: i32,i32 = tRSBS t137
ISEL: Match complete!

ISEL: Starting selection on root node: t137: i32 = mul nsw t135, Constant:i32<18>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t137: i32 = tMUL nsw Register:i32 $cpsr, t135, Constant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t135: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t658, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658
ISEL: Match complete!

ISEL: Starting selection on root node: t658: ch = TokenFactor t655, t657

ISEL: Starting selection on root node: t657: ch = store<(store (s32) into %ir.23 + 4, basealign 8)> t128:1, t1318, t1071, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t657: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1318, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1318: i32,i32 = ARMISD::SUBE Constant:i32<0>, t652, t1322:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1
  Morphed node: t1318: i32,i32 = tSBCS Constant:i32<0>, t652, t1595:1
ISEL: Match complete!

ISEL: Starting selection on root node: t655: ch = store<(store (s32) into %ir.23, align 8)> t128:1, t1322, FrameIndex:i32<19>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1
ISEL: Match complete!

ISEL: Starting selection on root node: t652: i32 = sra t130, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1322: i32,i32 = ARMISD::SUBC Constant:i32<0>, t130
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1322: i32,i32 = tRSBS t130
ISEL: Match complete!

ISEL: Starting selection on root node: t130: i32 = mul nsw t128, Constant:i32<17>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t130: i32 = tMUL nsw Register:i32 $cpsr, t128, Constant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t128: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t651, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651
ISEL: Match complete!

ISEL: Starting selection on root node: t651: ch = TokenFactor t648, t650

ISEL: Starting selection on root node: t650: ch = store<(store (s32) into %ir.22 + 4, basealign 8)> t121:1, t1328, t1072, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t650: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1328, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1328: i32,i32 = ARMISD::SUBE Constant:i32<0>, t645, t1332:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1
  Morphed node: t1328: i32,i32 = tSBCS Constant:i32<0>, t645, t1596:1
ISEL: Match complete!

ISEL: Starting selection on root node: t648: ch = store<(store (s32) into %ir.22, align 8)> t121:1, t1332, FrameIndex:i32<18>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1
ISEL: Match complete!

ISEL: Starting selection on root node: t645: i32 = sra t511, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1332: i32,i32 = ARMISD::SUBC Constant:i32<0>, t511
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1332: i32,i32 = tRSBS t511
ISEL: Match complete!

ISEL: Starting selection on root node: t511: i32 = shl t121, Constant:i32<4>
ISEL: Starting pattern match
  Initial Opcode index to 134066
  Match failed at index 134071
  Continuing at 134124
  Match failed at index 134142
  Continuing at 134166
Creating constant: t1597: i32 = TargetConstant<4>
  Morphed node: t511: i32 = tLSLri Register:i32 $cpsr, t121, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t121: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t644, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t121: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t644
ISEL: Match complete!

ISEL: Starting selection on root node: t644: ch = TokenFactor t641, t643

ISEL: Starting selection on root node: t643: ch = store<(store (s32) into %ir.21 + 4, basealign 8)> t114:1, t1338, t1073, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t643: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1338, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1338: i32,i32 = ARMISD::SUBE Constant:i32<0>, t638, t1342:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1
  Morphed node: t1338: i32,i32 = tSBCS Constant:i32<0>, t638, t1598:1
ISEL: Match complete!

ISEL: Starting selection on root node: t641: ch = store<(store (s32) into %ir.21, align 8)> t114:1, t1342, FrameIndex:i32<17>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1
ISEL: Match complete!

ISEL: Starting selection on root node: t638: i32 = sra t116, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1342: i32,i32 = ARMISD::SUBC Constant:i32<0>, t116
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1342: i32,i32 = tRSBS t116
ISEL: Match complete!

ISEL: Starting selection on root node: t116: i32 = mul nsw t114, Constant:i32<15>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t116: i32 = tMUL nsw Register:i32 $cpsr, t114, Constant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t114: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t637, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637
ISEL: Match complete!

ISEL: Starting selection on root node: t637: ch = TokenFactor t634, t636

ISEL: Starting selection on root node: t636: ch = store<(store (s32) into %ir.20 + 4, basealign 8)> t107:1, t1348, t1074, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t636: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1348, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1348: i32,i32 = ARMISD::SUBE Constant:i32<0>, t631, t1352:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1
  Morphed node: t1348: i32,i32 = tSBCS Constant:i32<0>, t631, t1599:1
ISEL: Match complete!

ISEL: Starting selection on root node: t634: ch = store<(store (s32) into %ir.20, align 8)> t107:1, t1352, FrameIndex:i32<16>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1
ISEL: Match complete!

ISEL: Starting selection on root node: t631: i32 = sra t109, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1352: i32,i32 = ARMISD::SUBC Constant:i32<0>, t109
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1352: i32,i32 = tRSBS t109
ISEL: Match complete!

ISEL: Starting selection on root node: t109: i32 = mul nsw t107, Constant:i32<14>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t109: i32 = tMUL nsw Register:i32 $cpsr, t107, Constant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t107: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t630, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630
ISEL: Match complete!

ISEL: Starting selection on root node: t630: ch = TokenFactor t627, t629

ISEL: Starting selection on root node: t629: ch = store<(store (s32) into %ir.19 + 4, basealign 8)> t100:1, t1358, t1075, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t629: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1358, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1358: i32,i32 = ARMISD::SUBE Constant:i32<0>, t624, t1362:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1
  Morphed node: t1358: i32,i32 = tSBCS Constant:i32<0>, t624, t1600:1
ISEL: Match complete!

ISEL: Starting selection on root node: t627: ch = store<(store (s32) into %ir.19, align 8)> t100:1, t1362, FrameIndex:i32<15>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1
ISEL: Match complete!

ISEL: Starting selection on root node: t624: i32 = sra t102, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1362: i32,i32 = ARMISD::SUBC Constant:i32<0>, t102
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1362: i32,i32 = tRSBS t102
ISEL: Match complete!

ISEL: Starting selection on root node: t102: i32 = mul nsw t100, Constant:i32<13>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t102: i32 = tMUL nsw Register:i32 $cpsr, t100, Constant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t100: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t623, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623
ISEL: Match complete!

ISEL: Starting selection on root node: t623: ch = TokenFactor t620, t622

ISEL: Starting selection on root node: t622: ch = store<(store (s32) into %ir.18 + 4, basealign 8)> t93:1, t1368, t1076, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t622: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1368, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1368: i32,i32 = ARMISD::SUBE Constant:i32<0>, t617, t1372:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1
  Morphed node: t1368: i32,i32 = tSBCS Constant:i32<0>, t617, t1601:1
ISEL: Match complete!

ISEL: Starting selection on root node: t620: ch = store<(store (s32) into %ir.18, align 8)> t93:1, t1372, FrameIndex:i32<14>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1
ISEL: Match complete!

ISEL: Starting selection on root node: t617: i32 = sra t95, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1372: i32,i32 = ARMISD::SUBC Constant:i32<0>, t95
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1372: i32,i32 = tRSBS t95
ISEL: Match complete!

ISEL: Starting selection on root node: t95: i32 = mul nsw t93, Constant:i32<12>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t95: i32 = tMUL nsw Register:i32 $cpsr, t93, Constant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t93: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t616, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616
ISEL: Match complete!

ISEL: Starting selection on root node: t616: ch = TokenFactor t613, t615

ISEL: Starting selection on root node: t615: ch = store<(store (s32) into %ir.17 + 4, basealign 8)> t86:1, t1378, t1077, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t615: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1378, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1378: i32,i32 = ARMISD::SUBE Constant:i32<0>, t610, t1382:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1
  Morphed node: t1378: i32,i32 = tSBCS Constant:i32<0>, t610, t1602:1
ISEL: Match complete!

ISEL: Starting selection on root node: t613: ch = store<(store (s32) into %ir.17, align 8)> t86:1, t1382, FrameIndex:i32<13>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1
ISEL: Match complete!

ISEL: Starting selection on root node: t610: i32 = sra t88, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1382: i32,i32 = ARMISD::SUBC Constant:i32<0>, t88
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1382: i32,i32 = tRSBS t88
ISEL: Match complete!

ISEL: Starting selection on root node: t88: i32 = mul nsw t86, Constant:i32<11>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t88: i32 = tMUL nsw Register:i32 $cpsr, t86, Constant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t86: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t609, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609
ISEL: Match complete!

ISEL: Starting selection on root node: t609: ch = TokenFactor t606, t608

ISEL: Starting selection on root node: t608: ch = store<(store (s32) into %ir.16 + 4, basealign 8)> t79:1, t1388, t1078, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t608: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1388, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1388: i32,i32 = ARMISD::SUBE Constant:i32<0>, t603, t1392:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1
  Morphed node: t1388: i32,i32 = tSBCS Constant:i32<0>, t603, t1603:1
ISEL: Match complete!

ISEL: Starting selection on root node: t606: ch = store<(store (s32) into %ir.16, align 8)> t79:1, t1392, FrameIndex:i32<12>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1
ISEL: Match complete!

ISEL: Starting selection on root node: t603: i32 = sra t81, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1392: i32,i32 = ARMISD::SUBC Constant:i32<0>, t81
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1392: i32,i32 = tRSBS t81
ISEL: Match complete!

ISEL: Starting selection on root node: t81: i32 = mul nsw t79, Constant:i32<10>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t81: i32 = tMUL nsw Register:i32 $cpsr, t79, Constant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t79: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t602, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602
ISEL: Match complete!

ISEL: Starting selection on root node: t602: ch = TokenFactor t599, t601

ISEL: Starting selection on root node: t601: ch = store<(store (s32) into %ir.15 + 4, basealign 8)> t72:1, t1398, t1079, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t601: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1398, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1398: i32,i32 = ARMISD::SUBE Constant:i32<0>, t596, t1402:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1
  Morphed node: t1398: i32,i32 = tSBCS Constant:i32<0>, t596, t1604:1
ISEL: Match complete!

ISEL: Starting selection on root node: t599: ch = store<(store (s32) into %ir.15, align 8)> t72:1, t1402, FrameIndex:i32<11>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1
ISEL: Match complete!

ISEL: Starting selection on root node: t596: i32 = sra t74, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1402: i32,i32 = ARMISD::SUBC Constant:i32<0>, t74
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1402: i32,i32 = tRSBS t74
ISEL: Match complete!

ISEL: Starting selection on root node: t74: i32 = mul nsw t72, Constant:i32<9>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t74: i32 = tMUL nsw Register:i32 $cpsr, t72, Constant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t72: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t595, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595
ISEL: Match complete!

ISEL: Starting selection on root node: t595: ch = TokenFactor t592, t594

ISEL: Starting selection on root node: t594: ch = store<(store (s32) into %ir.14 + 4, basealign 8)> t65:1, t1408, t1080, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t594: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1408, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1408: i32,i32 = ARMISD::SUBE Constant:i32<0>, t589, t1412:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1
  Morphed node: t1408: i32,i32 = tSBCS Constant:i32<0>, t589, t1605:1
ISEL: Match complete!

ISEL: Starting selection on root node: t592: ch = store<(store (s32) into %ir.14, align 8)> t65:1, t1412, FrameIndex:i32<10>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1
ISEL: Match complete!

ISEL: Starting selection on root node: t589: i32 = sra t522, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1412: i32,i32 = ARMISD::SUBC Constant:i32<0>, t522
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1412: i32,i32 = tRSBS t522
ISEL: Match complete!

ISEL: Starting selection on root node: t522: i32 = shl t65, Constant:i32<3>
ISEL: Starting pattern match
  Initial Opcode index to 134066
  Match failed at index 134071
  Continuing at 134124
  Match failed at index 134142
  Continuing at 134166
Creating constant: t1606: i32 = TargetConstant<3>
  Morphed node: t522: i32 = tLSLri Register:i32 $cpsr, t65, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t65: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t588, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t65: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t588
ISEL: Match complete!

ISEL: Starting selection on root node: t588: ch = TokenFactor t585, t587

ISEL: Starting selection on root node: t587: ch = store<(store (s32) into %ir.13 + 4, basealign 8)> t58:1, t1418, t1081, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t587: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1418, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1418: i32,i32 = ARMISD::SUBE Constant:i32<0>, t582, t1422:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1
  Morphed node: t1418: i32,i32 = tSBCS Constant:i32<0>, t582, t1607:1
ISEL: Match complete!

ISEL: Starting selection on root node: t585: ch = store<(store (s32) into %ir.13, align 8)> t58:1, t1422, FrameIndex:i32<9>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1
ISEL: Match complete!

ISEL: Starting selection on root node: t582: i32 = sra t60, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1422: i32,i32 = ARMISD::SUBC Constant:i32<0>, t60
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1422: i32,i32 = tRSBS t60
ISEL: Match complete!

ISEL: Starting selection on root node: t60: i32 = mul nsw t58, Constant:i32<7>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t60: i32 = tMUL nsw Register:i32 $cpsr, t58, Constant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t58: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t581, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581
ISEL: Match complete!

ISEL: Starting selection on root node: t581: ch = TokenFactor t578, t580

ISEL: Starting selection on root node: t580: ch = store<(store (s32) into %ir.12 + 4, basealign 8)> t51:1, t1428, t1082, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t580: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1428, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1428: i32,i32 = ARMISD::SUBE Constant:i32<0>, t575, t1432:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1
  Morphed node: t1428: i32,i32 = tSBCS Constant:i32<0>, t575, t1608:1
ISEL: Match complete!

ISEL: Starting selection on root node: t578: ch = store<(store (s32) into %ir.12, align 8)> t51:1, t1432, FrameIndex:i32<8>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1
ISEL: Match complete!

ISEL: Starting selection on root node: t575: i32 = sra t53, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1432: i32,i32 = ARMISD::SUBC Constant:i32<0>, t53
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1432: i32,i32 = tRSBS t53
ISEL: Match complete!

ISEL: Starting selection on root node: t53: i32 = mul nsw t51, Constant:i32<6>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t53: i32 = tMUL nsw Register:i32 $cpsr, t51, Constant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t51: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t574, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574
ISEL: Match complete!

ISEL: Starting selection on root node: t574: ch = TokenFactor t571, t573

ISEL: Starting selection on root node: t573: ch = store<(store (s32) into %ir.11 + 4, basealign 8)> t44:1, t1438, t1083, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t573: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1438, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1438: i32,i32 = ARMISD::SUBE Constant:i32<0>, t568, t1442:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1
  Morphed node: t1438: i32,i32 = tSBCS Constant:i32<0>, t568, t1609:1
ISEL: Match complete!

ISEL: Starting selection on root node: t571: ch = store<(store (s32) into %ir.11, align 8)> t44:1, t1442, FrameIndex:i32<7>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1
ISEL: Match complete!

ISEL: Starting selection on root node: t568: i32 = sra t46, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1442: i32,i32 = ARMISD::SUBC Constant:i32<0>, t46
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1442: i32,i32 = tRSBS t46
ISEL: Match complete!

ISEL: Starting selection on root node: t46: i32 = mul nsw t44, Constant:i32<5>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t46: i32 = tMUL nsw Register:i32 $cpsr, t44, Constant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t44: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t567, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567
ISEL: Match complete!

ISEL: Starting selection on root node: t567: ch = TokenFactor t564, t566

ISEL: Starting selection on root node: t566: ch = store<(store (s32) into %ir.10 + 4, basealign 8)> t37:1, t1448, t1084, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t566: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1448, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1448: i32,i32 = ARMISD::SUBE Constant:i32<0>, t561, t1452:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1
  Morphed node: t1448: i32,i32 = tSBCS Constant:i32<0>, t561, t1610:1
ISEL: Match complete!

ISEL: Starting selection on root node: t564: ch = store<(store (s32) into %ir.10, align 8)> t37:1, t1452, FrameIndex:i32<6>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1
ISEL: Match complete!

ISEL: Starting selection on root node: t561: i32 = sra t529, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1452: i32,i32 = ARMISD::SUBC Constant:i32<0>, t529
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1452: i32,i32 = tRSBS t529
ISEL: Match complete!

ISEL: Starting selection on root node: t529: i32 = shl t37, Constant:i32<2>
ISEL: Starting pattern match
  Initial Opcode index to 134066
  Match failed at index 134071
  Continuing at 134124
  Match failed at index 134142
  Continuing at 134166
Creating constant: t1611: i32 = TargetConstant<2>
  Morphed node: t529: i32 = tLSLri Register:i32 $cpsr, t37, TargetConstant:i32<2>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t37: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t560, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t37: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t560
ISEL: Match complete!

ISEL: Starting selection on root node: t560: ch = TokenFactor t557, t559

ISEL: Starting selection on root node: t559: ch = store<(store (s32) into %ir.9 + 4, basealign 8)> t30:1, t1458, t1085, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t559: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1458, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1458: i32,i32 = ARMISD::SUBE Constant:i32<0>, t554, t1462:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1
  Morphed node: t1458: i32,i32 = tSBCS Constant:i32<0>, t554, t1612:1
ISEL: Match complete!

ISEL: Starting selection on root node: t557: ch = store<(store (s32) into %ir.9, align 8)> t30:1, t1462, FrameIndex:i32<5>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1
ISEL: Match complete!

ISEL: Starting selection on root node: t554: i32 = sra t32, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1462: i32,i32 = ARMISD::SUBC Constant:i32<0>, t32
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1462: i32,i32 = tRSBS t32
ISEL: Match complete!

ISEL: Starting selection on root node: t32: i32 = mul nsw t30, Constant:i32<3>
ISEL: Starting pattern match
  Initial Opcode index to 119291
  Match failed at index 119295
  Continuing at 119468
  Match failed at index 119471
  Continuing at 119504
  Match failed at index 119506
  Continuing at 119540
  Match failed at index 119543
  Continuing at 119576
  Match failed at index 119578
  Continuing at 119673
  Match failed at index 119676
  Continuing at 119729
  Match failed at index 119731
  Continuing at 119785
  Match failed at index 119790
  Continuing at 119818
  Skipped scope entry (due to false predicate) at index 119824, continuing at 119846
  Skipped scope entry (due to false predicate) at index 119847, continuing at 119869
  Morphed node: t32: i32 = tMUL nsw Register:i32 $cpsr, t30, Constant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t30: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t553, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553
ISEL: Match complete!

ISEL: Starting selection on root node: t553: ch = TokenFactor t550, t552

ISEL: Starting selection on root node: t552: ch = store<(store (s32) into %ir.8 + 4, basealign 8)> t23:1, t1468, t1086, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t552: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1468, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1468: i32,i32 = ARMISD::SUBE Constant:i32<0>, t547, t1472:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1
  Morphed node: t1468: i32,i32 = tSBCS Constant:i32<0>, t547, t1613:1
ISEL: Match complete!

ISEL: Starting selection on root node: t550: ch = store<(store (s32) into %ir.8, align 8)> t23:1, t1472, FrameIndex:i32<4>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1
ISEL: Match complete!

ISEL: Starting selection on root node: t547: i32 = sra t534, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1472: i32,i32 = ARMISD::SUBC Constant:i32<0>, t534
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1472: i32,i32 = tRSBS t534
ISEL: Match complete!

ISEL: Starting selection on root node: t534: i32 = shl t23, Constant:i32<1>
ISEL: Starting pattern match
  Initial Opcode index to 134066
  Match failed at index 134071
  Continuing at 134124
  Match failed at index 134142
  Continuing at 134166
  Morphed node: t534: i32 = tLSLri Register:i32 $cpsr, t23, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t23: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t546, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t23: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t546
ISEL: Match complete!

ISEL: Starting selection on root node: t546: ch = TokenFactor t543, t545

ISEL: Starting selection on root node: t545: ch = store<(store (s32) into %ir.7 + 4, basealign 8)> t538:1, t1478, t1087, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t545: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1478, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1
ISEL: Match complete!

ISEL: Starting selection on root node: t1478: i32,i32 = ARMISD::SUBE Constant:i32<0>, t540, t1482:1
ISEL: Starting pattern match
  Initial Opcode index to 131493
  Skipped scope entry (due to false predicate) at index 131506, continuing at 131628
  Skipped scope entry (due to false predicate) at index 131629, continuing at 131659
  Match failed at index 131504
  Continuing at 131660
  Match failed at index 131662
  Continuing at 131699
  Continuing at 131700
  Match failed at index 131712
  Continuing at 131740
  Match failed at index 131745
  Continuing at 131782
  Skipped scope entry (due to false predicate) at index 131788, continuing at 131814
Creating new node: t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1
  Morphed node: t1478: i32,i32 = tSBCS Constant:i32<0>, t540, t1614:1
ISEL: Match complete!

ISEL: Starting selection on root node: t543: ch = store<(store (s32) into %ir.7, align 8)> t538:1, t1482, FrameIndex:i32<3>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1
ISEL: Match complete!

ISEL: Starting selection on root node: t540: i32 = sra t538, Constant:i32<31>
ISEL: Starting pattern match
  Initial Opcode index to 125469
  Match failed at index 125472
  Continuing at 125500
  Match failed at index 125504
  Continuing at 125530
  Match failed at index 125532
  Continuing at 125581
  Match failed at index 125585
  Continuing at 125610
  Morphed node: t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1482: i32,i32 = ARMISD::SUBC Constant:i32<0>, t538
ISEL: Starting pattern match
  Initial Opcode index to 130365
  Skipped scope entry (due to false predicate) at index 130374, continuing at 130468
  Skipped scope entry (due to false predicate) at index 130469, continuing at 130517
  Match failed at index 130372
  Continuing at 130518
  Morphed node: t1482: i32,i32 = tRSBS t538
ISEL: Match complete!

ISEL: Starting selection on root node: t538: i32,ch = load<(dereferenceable load (s32) from %ir.6)> t14, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t538: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t14
ISEL: Match complete!

ISEL: Starting selection on root node: t14: ch = store<(store (s32) into %ir.6)> t12, t6, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t14: ch = tSTRspi<Mem:(store (s32) into %ir.6)> t6, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t12
ISEL: Match complete!

ISEL: Starting selection on root node: t12: ch = store<(store (s32) into %ir.5)> t10, t4, FrameIndex:i32<1>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t12: ch = tSTRspi<Mem:(store (s32) into %ir.5)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t10
ISEL: Match complete!

ISEL: Starting selection on root node: t1488: i32,ch = load<(load (s32) from constant-pool)> t0, t1487, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  OpcodeSwitch from 104021 to 104088
  Morphed node: t1488: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t10: ch = store<(store (s32) into %ir.4)> t0, t2, FrameIndex:i32<0>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t10: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t700: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t700: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t757: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t757: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t785: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t785: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t815: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t815: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t834: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t834: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t885: ch,glue = callseq_start t0, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t6: i32,ch = CopyFromReg t0, Register:i32 %2

ISEL: Starting selection on root node: t4: i32,ch = CopyFromReg t0, Register:i32 %1

ISEL: Starting selection on root node: t2: i32,ch = CopyFromReg t0, Register:i32 %0

ISEL: Starting selection on root node: t1486: i32 = TargetConstantPool<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0

ISEL: Starting selection on root node: t821: i32 = TargetExternalSymbol'__divdi3'

ISEL: Starting selection on root node: t763: i32 = TargetExternalSymbol'__muldi3'

ISEL: Starting selection on root node: t708: i32 = TargetExternalSymbol'__moddi3'

ISEL: Starting selection on root node: t704: i32 = Register $r1

ISEL: Starting selection on root node: t235: i32 = TargetConstant<-1>

ISEL: Starting selection on root node: t233: Untyped = RegisterMask

ISEL: Starting selection on root node: t232: i32 = TargetGlobalAddress<ptr @printf> 0

ISEL: Starting selection on root node: t230: i32 = Register $r3

ISEL: Starting selection on root node: t228: i32 = Register $r2

ISEL: Starting selection on root node: t226: i32 = Register $r0

ISEL: Starting selection on root node: t222: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t157: i32 = Constant<21>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1615: i32 = TargetConstant<21>
  Morphed node: t157: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t150: i32 = Constant<20>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1616: i32 = TargetConstant<20>
  Morphed node: t150: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t143: i32 = Constant<19>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1617: i32 = TargetConstant<19>
  Morphed node: t143: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t136: i32 = Constant<18>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1618: i32 = TargetConstant<18>
  Morphed node: t136: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t129: i32 = Constant<17>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1619: i32 = TargetConstant<17>
  Morphed node: t129: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t115: i32 = Constant<15>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1620: i32 = TargetConstant<15>
  Morphed node: t115: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t108: i32 = Constant<14>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
  Morphed node: t108: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t101: i32 = Constant<13>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1621: i32 = TargetConstant<13>
  Morphed node: t101: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t94: i32 = Constant<12>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1622: i32 = TargetConstant<12>
  Morphed node: t94: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t87: i32 = Constant<11>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1623: i32 = TargetConstant<11>
  Morphed node: t87: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t80: i32 = Constant<10>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1624: i32 = TargetConstant<10>
  Morphed node: t80: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t73: i32 = Constant<9>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1625: i32 = TargetConstant<9>
  Morphed node: t73: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t59: i32 = Constant<7>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1626: i32 = TargetConstant<7>
  Morphed node: t59: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t52: i32 = Constant<6>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1627: i32 = TargetConstant<6>
  Morphed node: t52: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t45: i32 = Constant<5>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t1628: i32 = TargetConstant<5>
  Morphed node: t45: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t31: i32 = Constant<3>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
  Morphed node: t31: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t9: i32 = undef

ISEL: Starting selection on root node: t8: i32 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
  Morphed node: t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t5: i32 = Register %2

ISEL: Starting selection on root node: t3: i32 = Register %1

ISEL: Starting selection on root node: t1: i32 = Register %0

ISEL: Starting selection on root node: t0: ch,glue = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 'moreThan20Variables:'
SelectionDAG has 773 nodes:
  t0: ch,glue = EntryToken
  t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg
  t1488: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
        t4: i32,ch = CopyFromReg t0, Register:i32 %1
          t2: i32,ch = CopyFromReg t0, Register:i32 %0
        t10: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
      t12: ch = tSTRspi<Mem:(store (s32) into %ir.5)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t10
    t14: ch = tSTRspi<Mem:(store (s32) into %ir.6)> t6, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t12
  t538: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t14
  t1482: i32,i32 = tRSBS t538
      t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1
          t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1
        t1478: i32,i32 = tSBCS t8, t540, t1614:1
      t545: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1478, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1
    t546: ch = TokenFactor t543, t545
  t23: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t546
  t534: i32 = tLSLri Register:i32 $cpsr, t23, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg
  t1472: i32,i32 = tRSBS t534
      t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1
          t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1
        t1468: i32,i32 = tSBCS t8, t547, t1613:1
      t552: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1468, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1
    t553: ch = TokenFactor t550, t552
  t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553
    t31: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg
  t32: i32 = tMUL nsw Register:i32 $cpsr, t30, t31, TargetConstant:i32<14>, Register:i32 $noreg
  t1462: i32,i32 = tRSBS t32
      t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1
          t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1
        t1458: i32,i32 = tSBCS t8, t554, t1612:1
      t559: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1458, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1
    t560: ch = TokenFactor t557, t559
  t37: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t560
  t529: i32 = tLSLri Register:i32 $cpsr, t37, TargetConstant:i32<2>, TargetConstant:i32<14>, Register:i32 $noreg
  t1452: i32,i32 = tRSBS t529
      t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1
          t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1
        t1448: i32,i32 = tSBCS t8, t561, t1610:1
      t566: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1448, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1
    t567: ch = TokenFactor t564, t566
  t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567
    t45: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg
  t46: i32 = tMUL nsw Register:i32 $cpsr, t44, t45, TargetConstant:i32<14>, Register:i32 $noreg
  t1442: i32,i32 = tRSBS t46
      t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1
          t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1
        t1438: i32,i32 = tSBCS t8, t568, t1609:1
      t573: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1438, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1
    t574: ch = TokenFactor t571, t573
  t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574
    t52: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg
  t53: i32 = tMUL nsw Register:i32 $cpsr, t51, t52, TargetConstant:i32<14>, Register:i32 $noreg
  t1432: i32,i32 = tRSBS t53
      t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1
          t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1
        t1428: i32,i32 = tSBCS t8, t575, t1608:1
      t580: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1428, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1
    t581: ch = TokenFactor t578, t580
  t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581
    t59: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg
  t60: i32 = tMUL nsw Register:i32 $cpsr, t58, t59, TargetConstant:i32<14>, Register:i32 $noreg
  t1422: i32,i32 = tRSBS t60
      t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1
          t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1
        t1418: i32,i32 = tSBCS t8, t582, t1607:1
      t587: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1418, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1
    t588: ch = TokenFactor t585, t587
  t65: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t588
  t522: i32 = tLSLri Register:i32 $cpsr, t65, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg
  t1412: i32,i32 = tRSBS t522
      t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1
          t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1
        t1408: i32,i32 = tSBCS t8, t589, t1605:1
      t594: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1408, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1
    t595: ch = TokenFactor t592, t594
  t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595
    t73: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg
  t74: i32 = tMUL nsw Register:i32 $cpsr, t72, t73, TargetConstant:i32<14>, Register:i32 $noreg
  t1402: i32,i32 = tRSBS t74
      t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1
          t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1
        t1398: i32,i32 = tSBCS t8, t596, t1604:1
      t601: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1398, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1
    t602: ch = TokenFactor t599, t601
  t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602
    t80: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg
  t81: i32 = tMUL nsw Register:i32 $cpsr, t79, t80, TargetConstant:i32<14>, Register:i32 $noreg
  t1392: i32,i32 = tRSBS t81
      t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1
          t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1
        t1388: i32,i32 = tSBCS t8, t603, t1603:1
      t608: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1388, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1
    t609: ch = TokenFactor t606, t608
  t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609
    t87: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg
  t88: i32 = tMUL nsw Register:i32 $cpsr, t86, t87, TargetConstant:i32<14>, Register:i32 $noreg
  t1382: i32,i32 = tRSBS t88
      t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1
          t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1
        t1378: i32,i32 = tSBCS t8, t610, t1602:1
      t615: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1378, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1
    t616: ch = TokenFactor t613, t615
  t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616
    t94: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg
  t95: i32 = tMUL nsw Register:i32 $cpsr, t93, t94, TargetConstant:i32<14>, Register:i32 $noreg
  t1372: i32,i32 = tRSBS t95
      t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1
          t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1
        t1368: i32,i32 = tSBCS t8, t617, t1601:1
      t622: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1368, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1
    t623: ch = TokenFactor t620, t622
  t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623
    t101: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg
  t102: i32 = tMUL nsw Register:i32 $cpsr, t100, t101, TargetConstant:i32<14>, Register:i32 $noreg
  t1362: i32,i32 = tRSBS t102
      t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1
          t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1
        t1358: i32,i32 = tSBCS t8, t624, t1600:1
      t629: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1358, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1
    t630: ch = TokenFactor t627, t629
  t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630
    t108: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg
  t109: i32 = tMUL nsw Register:i32 $cpsr, t107, t108, TargetConstant:i32<14>, Register:i32 $noreg
  t1352: i32,i32 = tRSBS t109
      t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1
          t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1
        t1348: i32,i32 = tSBCS t8, t631, t1599:1
      t636: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1348, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1
    t637: ch = TokenFactor t634, t636
  t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637
    t115: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg
  t116: i32 = tMUL nsw Register:i32 $cpsr, t114, t115, TargetConstant:i32<14>, Register:i32 $noreg
  t1342: i32,i32 = tRSBS t116
      t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1
          t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1
        t1338: i32,i32 = tSBCS t8, t638, t1598:1
      t643: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1338, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1
    t644: ch = TokenFactor t641, t643
  t121: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t644
  t511: i32 = tLSLri Register:i32 $cpsr, t121, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg
  t1332: i32,i32 = tRSBS t511
      t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1
          t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1
        t1328: i32,i32 = tSBCS t8, t645, t1596:1
      t650: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1328, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1
    t651: ch = TokenFactor t648, t650
  t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651
    t129: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg
  t130: i32 = tMUL nsw Register:i32 $cpsr, t128, t129, TargetConstant:i32<14>, Register:i32 $noreg
  t1322: i32,i32 = tRSBS t130
      t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1
          t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1
        t1318: i32,i32 = tSBCS t8, t652, t1595:1
      t657: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1318, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1
    t658: ch = TokenFactor t655, t657
  t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658
    t136: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg
  t137: i32 = tMUL nsw Register:i32 $cpsr, t135, t136, TargetConstant:i32<14>, Register:i32 $noreg
  t1312: i32,i32 = tRSBS t137
      t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1
          t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1
        t1308: i32,i32 = tSBCS t8, t659, t1594:1
      t664: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1308, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1
    t665: ch = TokenFactor t662, t664
  t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665
    t143: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg
  t144: i32 = tMUL nsw Register:i32 $cpsr, t142, t143, TargetConstant:i32<14>, Register:i32 $noreg
  t1302: i32,i32 = tRSBS t144
      t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1
          t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1
        t1298: i32,i32 = tSBCS t8, t666, t1593:1
      t671: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1298, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1
    t672: ch = TokenFactor t669, t671
  t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672
    t150: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg
  t151: i32 = tMUL nsw Register:i32 $cpsr, t149, t150, TargetConstant:i32<14>, Register:i32 $noreg
  t1292: i32,i32 = tRSBS t151
      t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1
          t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
          t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1
        t1288: i32,i32 = tSBCS t8, t673, t1592:1
      t678: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1288, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1
    t679: ch = TokenFactor t676, t678
  t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679
    t157: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg
  t158: i32 = tMUL nsw Register:i32 $cpsr, t156, t157, TargetConstant:i32<14>, Register:i32 $noreg
  t1282: i32,i32 = tRSBS t158
    t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1
        t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg
        t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1
      t1278: i32,i32 = tSBCS t8, t680, t1589:1
    t685: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1278, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1
  t686: ch = TokenFactor t683, t685
  t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t863: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t861: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t857: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t772: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t729: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t726: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t718: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t687: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
  t164: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686
    t815: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807
    t785: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778
    t757: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t759: ch,glue = CopyToReg t757:1, Register:i32 $r0, t749
  t1272: i32,i32 = tSUBSrr t732, t729
  t1269: i32,i32 = tADDSrr t721, t718
    t700: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t703: ch,glue = CopyToReg t700:1, Register:i32 $r0, t692
  t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1
  t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1
  t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1
  t1265: i32,i32 = tSUBSrr t1272, t726
  t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1
    t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
    t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg
  t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165
  t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1
  t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1
  t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1
    t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg
  t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1
  t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1
  t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1
  t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1
  t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1
    t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg
  t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1
  t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1
  t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1
  t764: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762, t762:1
  t709: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707, t707:1
  t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2
  t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2
  t765: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t764:1, t764:2
  t710: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t709:1, t709:2
  t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2
  t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2
  t766: i32,ch,glue = CopyFromReg t765:1, Register:i32 $r0, t765:2
  t711: i32,ch,glue = CopyFromReg t710:1, Register:i32 $r0, t710:2
    t834: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t836: ch,glue = CopyToReg t834:1, Register:i32 $r0, t824
  t1246: i32,i32 = tADDSrr t793, t772
    t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2
  t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1
  t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1
  t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1
  t840: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839, t839:1
  t841: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t840:1, t840:2
  t842: i32,ch,glue = CopyFromReg t841:1, Register:i32 $r0, t841:2
  t1239: i32,i32 = tADDSrr t848, t842
              t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg
            t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg
          t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg
            t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg
          t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg
        t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg
          t739: i32 = tAND Register:i32 $cpsr, t1265, t1269, TargetConstant:i32<14>, Register:i32 $noreg
        t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg
      t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg
    t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg
  t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1
              t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg
            t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg
          t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg
                t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2
                t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1
              t1236: i32,i32 = tADCS t849, t843, t1582:1
                t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2
                t1583: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1246:1
              t1243: i32,i32 = tADCS t794, t773, t1583:1
            t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg
            t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2
          t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg
        t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg
                t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1
              t1261: i32,i32 = tSBCS t733, t730, t1586:1
              t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1
            t1251: i32,i32 = tSBCS t1261, t727, t1584:1
              t1585: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1269:1
            t1256: i32,i32 = tADCS t722, t719, t1585:1
          t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg
        t745: i32 = tEOR Register:i32 $cpsr, t742, t740, TargetConstant:i32<14>, Register:i32 $noreg
      t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg
      t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2
    t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg
  t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1
  t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1
  t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2
    t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2
      t868: ch = TokenFactor t866:1, t867:1
      t865: ch = TokenFactor t863:1, t864:1
      t862: ch = TokenFactor t860:1, t861:1
      t859: ch = TokenFactor t857:1, t858:1
      t850: ch = TokenFactor t848:1, t849:1
      t809: ch = TokenFactor t807:1, t808:1
      t806: ch = TokenFactor t804:1, t805:1
      t803: ch = TokenFactor t801:1, t802:1
      t780: ch = TokenFactor t778:1, t779:1
      t777: ch = TokenFactor t775:1, t776:1
      t774: ch = TokenFactor t772:1, t773:1
      t751: ch = TokenFactor t749:1, t750:1
      t748: ch = TokenFactor t746:1, t747:1
      t743: ch = TokenFactor t741:1, t742:1
      t734: ch = TokenFactor t732:1, t733:1
      t731: ch = TokenFactor t729:1, t730:1
      t728: ch = TokenFactor t726:1, t727:1
      t723: ch = TokenFactor t721:1, t722:1
      t720: ch = TokenFactor t718:1, t719:1
      t694: ch = TokenFactor t692:1, t693:1
      t689: ch = TokenFactor t687:1, t688:1
    t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689
  t213: ch = tSTRspi<Mem:(store (s32) into %ir.28)> t893, TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t212
  t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213
  t899: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t213
  t1232: i32,i32 = tADDSi3 t899, TargetConstant:i32<1>
  t901: ch = TokenFactor t899:1, t900:1
    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1
  t1229: i32,i32 = tADCS t900, t8, t1581:1
        t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901
        t905: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1229, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t901
      t906: ch = TokenFactor t904, t905
    t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906
  t227: ch,glue = CopyToReg t223:1, Register:i32 $r0, t1488
  t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1
  t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1
  t234: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231, t231:1
  t236: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t234:1, t234:2
  t237: i32,ch,glue = CopyFromReg t236:1, Register:i32 $r0, t236:2
  t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1
  t907: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1
  t1225: i32,i32 = tADDSi3 t907, TargetConstant:i32<1>
  t909: ch = TokenFactor t907:1, t908:1
    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1
  t1222: i32,i32 = tADCS t908, t8, t1579:1
        t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909
        t913: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1222, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t909
      t914: ch = TokenFactor t912, t913
    t243: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t914
  t245: ch,glue = CopyToReg t243:1, Register:i32 $r0, t1488
  t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1
  t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1
  t248: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247, t247:1
  t249: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t248:1, t248:2
  t250: i32,ch,glue = CopyFromReg t249:1, Register:i32 $r0, t249:2
  t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1
  t915: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1
  t1218: i32,i32 = tADDSi3 t915, TargetConstant:i32<1>
  t917: ch = TokenFactor t915:1, t916:1
    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1
  t1215: i32,i32 = tADCS t916, t8, t1577:1
        t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917
        t921: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1215, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t917
      t922: ch = TokenFactor t920, t921
    t256: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t922
  t258: ch,glue = CopyToReg t256:1, Register:i32 $r0, t1488
  t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1
  t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1
  t261: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260, t260:1
  t262: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t261:1, t261:2
  t263: i32,ch,glue = CopyFromReg t262:1, Register:i32 $r0, t262:2
  t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1
  t923: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1
  t1211: i32,i32 = tADDSi3 t923, TargetConstant:i32<1>
  t925: ch = TokenFactor t923:1, t924:1
    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1
  t1208: i32,i32 = tADCS t924, t8, t1575:1
        t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925
        t929: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1208, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t925
      t930: ch = TokenFactor t928, t929
    t269: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t930
  t271: ch,glue = CopyToReg t269:1, Register:i32 $r0, t1488
  t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1
  t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1
  t274: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273, t273:1
  t275: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t274:1, t274:2
  t276: i32,ch,glue = CopyFromReg t275:1, Register:i32 $r0, t275:2
  t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1
  t931: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1
  t1204: i32,i32 = tADDSi3 t931, TargetConstant:i32<1>
  t933: ch = TokenFactor t931:1, t932:1
    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1
  t1201: i32,i32 = tADCS t932, t8, t1573:1
        t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933
        t937: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1201, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t933
      t938: ch = TokenFactor t936, t937
    t282: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t938
  t284: ch,glue = CopyToReg t282:1, Register:i32 $r0, t1488
  t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1
  t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1
  t287: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286, t286:1
  t288: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t287:1, t287:2
  t289: i32,ch,glue = CopyFromReg t288:1, Register:i32 $r0, t288:2
  t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1
  t939: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1
  t1197: i32,i32 = tADDSi3 t939, TargetConstant:i32<1>
  t941: ch = TokenFactor t939:1, t940:1
    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1
  t1194: i32,i32 = tADCS t940, t8, t1571:1
        t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941
        t945: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1194, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t941
      t946: ch = TokenFactor t944, t945
    t295: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t946
  t297: ch,glue = CopyToReg t295:1, Register:i32 $r0, t1488
  t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1
  t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1
  t300: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299, t299:1
  t301: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t300:1, t300:2
  t302: i32,ch,glue = CopyFromReg t301:1, Register:i32 $r0, t301:2
  t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1
  t947: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1
  t1190: i32,i32 = tADDSi3 t947, TargetConstant:i32<1>
  t949: ch = TokenFactor t947:1, t948:1
    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1
  t1187: i32,i32 = tADCS t948, t8, t1569:1
        t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949
        t953: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1187, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t949
      t954: ch = TokenFactor t952, t953
    t308: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t954
  t310: ch,glue = CopyToReg t308:1, Register:i32 $r0, t1488
  t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1
  t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1
  t313: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312, t312:1
  t314: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t313:1, t313:2
  t315: i32,ch,glue = CopyFromReg t314:1, Register:i32 $r0, t314:2
  t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1
  t955: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1
  t1183: i32,i32 = tADDSi3 t955, TargetConstant:i32<1>
  t957: ch = TokenFactor t955:1, t956:1
    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1
  t1180: i32,i32 = tADCS t956, t8, t1567:1
        t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957
        t961: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1180, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t957
      t962: ch = TokenFactor t960, t961
    t321: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t962
  t323: ch,glue = CopyToReg t321:1, Register:i32 $r0, t1488
  t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1
  t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1
  t326: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325, t325:1
  t327: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t326:1, t326:2
  t328: i32,ch,glue = CopyFromReg t327:1, Register:i32 $r0, t327:2
  t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1
  t963: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1
  t1176: i32,i32 = tADDSi3 t963, TargetConstant:i32<1>
  t965: ch = TokenFactor t963:1, t964:1
    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1
  t1173: i32,i32 = tADCS t964, t8, t1565:1
        t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965
        t969: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1173, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t965
      t970: ch = TokenFactor t968, t969
    t334: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t970
  t336: ch,glue = CopyToReg t334:1, Register:i32 $r0, t1488
  t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1
  t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1
  t339: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338, t338:1
  t340: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t339:1, t339:2
  t341: i32,ch,glue = CopyFromReg t340:1, Register:i32 $r0, t340:2
  t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1
  t971: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1
  t1169: i32,i32 = tADDSi3 t971, TargetConstant:i32<1>
  t973: ch = TokenFactor t971:1, t972:1
    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1
  t1166: i32,i32 = tADCS t972, t8, t1563:1
        t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973
        t977: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1166, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t973
      t978: ch = TokenFactor t976, t977
    t347: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t978
  t349: ch,glue = CopyToReg t347:1, Register:i32 $r0, t1488
  t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1
  t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1
  t352: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351, t351:1
  t353: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t352:1, t352:2
  t354: i32,ch,glue = CopyFromReg t353:1, Register:i32 $r0, t353:2
  t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1
  t979: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1
  t1162: i32,i32 = tADDSi3 t979, TargetConstant:i32<1>
  t981: ch = TokenFactor t979:1, t980:1
    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1
  t1159: i32,i32 = tADCS t980, t8, t1561:1
        t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981
        t985: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1159, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t981
      t986: ch = TokenFactor t984, t985
    t360: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t986
  t362: ch,glue = CopyToReg t360:1, Register:i32 $r0, t1488
  t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1
  t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1
  t365: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364, t364:1
  t366: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t365:1, t365:2
  t367: i32,ch,glue = CopyFromReg t366:1, Register:i32 $r0, t366:2
  t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1
  t987: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1
  t1155: i32,i32 = tADDSi3 t987, TargetConstant:i32<1>
  t989: ch = TokenFactor t987:1, t988:1
    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1
  t1152: i32,i32 = tADCS t988, t8, t1559:1
        t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989
        t993: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1152, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t989
      t994: ch = TokenFactor t992, t993
    t373: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t994
  t375: ch,glue = CopyToReg t373:1, Register:i32 $r0, t1488
  t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1
  t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1
  t378: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377, t377:1
  t379: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t378:1, t378:2
  t380: i32,ch,glue = CopyFromReg t379:1, Register:i32 $r0, t379:2
  t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1
  t995: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1
  t1148: i32,i32 = tADDSi3 t995, TargetConstant:i32<1>
  t997: ch = TokenFactor t995:1, t996:1
    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1
  t1145: i32,i32 = tADCS t996, t8, t1557:1
        t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997
        t1001: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1145, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t997
      t1002: ch = TokenFactor t1000, t1001
    t386: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1002
  t388: ch,glue = CopyToReg t386:1, Register:i32 $r0, t1488
  t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1
  t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1
  t391: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390, t390:1
  t392: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t391:1, t391:2
  t393: i32,ch,glue = CopyFromReg t392:1, Register:i32 $r0, t392:2
  t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1
  t1003: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1
  t1141: i32,i32 = tADDSi3 t1003, TargetConstant:i32<1>
  t1005: ch = TokenFactor t1003:1, t1004:1
    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1
  t1138: i32,i32 = tADCS t1004, t8, t1555:1
        t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005
        t1009: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1138, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1005
      t1010: ch = TokenFactor t1008, t1009
    t399: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1010
  t401: ch,glue = CopyToReg t399:1, Register:i32 $r0, t1488
  t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1
  t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1
  t404: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403, t403:1
  t405: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t404:1, t404:2
  t406: i32,ch,glue = CopyFromReg t405:1, Register:i32 $r0, t405:2
  t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1
  t1011: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1
  t1134: i32,i32 = tADDSi3 t1011, TargetConstant:i32<1>
  t1013: ch = TokenFactor t1011:1, t1012:1
    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1
  t1131: i32,i32 = tADCS t1012, t8, t1553:1
        t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013
        t1017: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1131, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1013
      t1018: ch = TokenFactor t1016, t1017
    t412: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1018
  t414: ch,glue = CopyToReg t412:1, Register:i32 $r0, t1488
  t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1
  t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1
  t417: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416, t416:1
  t418: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t417:1, t417:2
  t419: i32,ch,glue = CopyFromReg t418:1, Register:i32 $r0, t418:2
  t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1
  t1019: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1
  t1127: i32,i32 = tADDSi3 t1019, TargetConstant:i32<1>
  t1021: ch = TokenFactor t1019:1, t1020:1
    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1
  t1124: i32,i32 = tADCS t1020, t8, t1551:1
        t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021
        t1025: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1124, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1021
      t1026: ch = TokenFactor t1024, t1025
    t425: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1026
  t427: ch,glue = CopyToReg t425:1, Register:i32 $r0, t1488
  t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1
  t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1
  t430: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429, t429:1
  t431: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t430:1, t430:2
  t432: i32,ch,glue = CopyFromReg t431:1, Register:i32 $r0, t431:2
  t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1
  t1027: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1
  t1120: i32,i32 = tADDSi3 t1027, TargetConstant:i32<1>
  t1029: ch = TokenFactor t1027:1, t1028:1
    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1
  t1117: i32,i32 = tADCS t1028, t8, t1549:1
        t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029
        t1033: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1117, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1029
      t1034: ch = TokenFactor t1032, t1033
    t438: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1034
  t440: ch,glue = CopyToReg t438:1, Register:i32 $r0, t1488
  t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1
  t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1
  t443: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442, t442:1
  t444: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t443:1, t443:2
  t445: i32,ch,glue = CopyFromReg t444:1, Register:i32 $r0, t444:2
  t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1
  t1035: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1
  t1113: i32,i32 = tADDSi3 t1035, TargetConstant:i32<1>
  t1037: ch = TokenFactor t1035:1, t1036:1
    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1
  t1110: i32,i32 = tADCS t1036, t8, t1547:1
        t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037
        t1041: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1110, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1037
      t1042: ch = TokenFactor t1040, t1041
    t451: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1042
  t453: ch,glue = CopyToReg t451:1, Register:i32 $r0, t1488
  t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1
  t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1
  t456: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455, t455:1
  t457: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t456:1, t456:2
  t458: i32,ch,glue = CopyFromReg t457:1, Register:i32 $r0, t457:2
  t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1
  t1043: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1
  t1106: i32,i32 = tADDSi3 t1043, TargetConstant:i32<1>
  t1045: ch = TokenFactor t1043:1, t1044:1
    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1
  t1103: i32,i32 = tADCS t1044, t8, t1545:1
        t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045
        t1049: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1103, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1045
      t1050: ch = TokenFactor t1048, t1049
    t464: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1050
  t466: ch,glue = CopyToReg t464:1, Register:i32 $r0, t1488
  t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1
  t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1
  t469: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468, t468:1
  t470: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t469:1, t469:2
  t471: i32,ch,glue = CopyFromReg t470:1, Register:i32 $r0, t470:2
  t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1
  t1051: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1
  t1099: i32,i32 = tADDSi3 t1051, TargetConstant:i32<1>
  t1053: ch = TokenFactor t1051:1, t1052:1
    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1
  t1096: i32,i32 = tADCS t1052, t8, t1543:1
        t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053
        t1057: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1096, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1053
      t1058: ch = TokenFactor t1056, t1057
    t477: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1058
  t479: ch,glue = CopyToReg t477:1, Register:i32 $r0, t1488
  t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1
  t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1
  t482: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481, t481:1
  t483: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t482:1, t482:2
  t484: i32,ch,glue = CopyFromReg t483:1, Register:i32 $r0, t483:2
  t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1
  t1059: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1
  t1092: i32,i32 = tADDSi3 t1059, TargetConstant:i32<1>
  t1061: ch = TokenFactor t1059:1, t1060:1
    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1
  t1089: i32,i32 = tADCS t1060, t8, t1541:1
        t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061
        t1065: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1089, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1061
      t1066: ch = TokenFactor t1064, t1065
    t490: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1066
  t492: ch,glue = CopyToReg t490:1, Register:i32 $r0, t1488
  t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1
  t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1
  t495: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494, t494:1
  t496: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t495:1, t495:2
  t497: i32,ch,glue = CopyFromReg t496:1, Register:i32 $r0, t496:2
    t498: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.28)> TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t497:1
  t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498
  t500: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t499, t499:1


********** List Scheduling %bb.0 '' **********
SU(0): t500: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t499, t499:1

    t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 247
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Barrier
    SU(1): Data Latency=1
SU(1): t498: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.28)> TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t497:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 246
  Height             : 1
  Predecessors:
    SU(2): Ord  Latency=1 Barrier
  Successors:
    SU(0): Data Latency=1
SU(2): t497: i32,ch,glue = CopyFromReg t496:1, Register:i32 $r0, t496:2

    t492: ch,glue = CopyToReg t490:1, Register:i32 $r0, t1488

    t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1

    t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1

    t495: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494, t494:1

    t496: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t495:1, t495:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 245
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
    SU(4): Data Latency=1
    SU(511): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
    SU(1): Ord  Latency=1 Barrier
SU(3): t1089: i32,i32 = tADCS t1060, t8, t1541:1

    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 242
  Height             : 5
  Predecessors:
    SU(510): Data Latency=1
    SU(509): Data Latency=1
    SU(4): Data Latency=1 Reg=$cpsr
  Successors:
    SU(2): Data Latency=1
    SU(513): Data Latency=1
SU(4): t1092: i32,i32 = tADDSi3 t1059, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 241
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1
  Successors:
    SU(2): Data Latency=1
    SU(3): Data Latency=1 Reg=$cpsr
    SU(515): Data Latency=1
SU(5): t1059: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 240
  Height             : 7
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
  Successors:
    SU(4): Data Latency=1
    SU(514): Ord  Latency=1 Barrier
SU(6): t484: i32,ch,glue = CopyFromReg t483:1, Register:i32 $r0, t483:2

    t479: ch,glue = CopyToReg t477:1, Register:i32 $r0, t1488

    t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1

    t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1

    t482: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481, t481:1

    t483: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t482:1, t482:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 239
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1
    SU(8): Data Latency=1
    SU(504): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(5): Ord  Latency=1 Barrier
    SU(510): Ord  Latency=1 Barrier
SU(7): t1096: i32,i32 = tADCS t1052, t8, t1543:1

    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 236
  Height             : 11
  Predecessors:
    SU(503): Data Latency=1
    SU(509): Data Latency=1
    SU(8): Data Latency=1 Reg=$cpsr
  Successors:
    SU(6): Data Latency=1
    SU(506): Data Latency=1
SU(8): t1099: i32,i32 = tADDSi3 t1051, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 235
  Height             : 12
  Predecessors:
    SU(9): Data Latency=1
  Successors:
    SU(6): Data Latency=1
    SU(7): Data Latency=1 Reg=$cpsr
    SU(508): Data Latency=1
SU(9): t1051: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 234
  Height             : 13
  Predecessors:
    SU(10): Ord  Latency=1 Barrier
  Successors:
    SU(8): Data Latency=1
    SU(507): Ord  Latency=1 Barrier
SU(10): t471: i32,ch,glue = CopyFromReg t470:1, Register:i32 $r0, t470:2

    t466: ch,glue = CopyToReg t464:1, Register:i32 $r0, t1488

    t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1

    t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1

    t469: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468, t468:1

    t470: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t469:1, t469:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 233
  Height             : 14
  Predecessors:
    SU(11): Data Latency=1
    SU(12): Data Latency=1
    SU(498): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(9): Ord  Latency=1 Barrier
    SU(503): Ord  Latency=1 Barrier
SU(11): t1103: i32,i32 = tADCS t1044, t8, t1545:1

    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 230
  Height             : 17
  Predecessors:
    SU(497): Data Latency=1
    SU(509): Data Latency=1
    SU(12): Data Latency=1 Reg=$cpsr
  Successors:
    SU(10): Data Latency=1
    SU(500): Data Latency=1
SU(12): t1106: i32,i32 = tADDSi3 t1043, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 229
  Height             : 18
  Predecessors:
    SU(13): Data Latency=1
  Successors:
    SU(10): Data Latency=1
    SU(11): Data Latency=1 Reg=$cpsr
    SU(502): Data Latency=1
SU(13): t1043: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 228
  Height             : 19
  Predecessors:
    SU(14): Ord  Latency=1 Barrier
  Successors:
    SU(12): Data Latency=1
    SU(501): Ord  Latency=1 Barrier
SU(14): t458: i32,ch,glue = CopyFromReg t457:1, Register:i32 $r0, t457:2

    t453: ch,glue = CopyToReg t451:1, Register:i32 $r0, t1488

    t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1

    t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1

    t456: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455, t455:1

    t457: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t456:1, t456:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 227
  Height             : 20
  Predecessors:
    SU(15): Data Latency=1
    SU(16): Data Latency=1
    SU(492): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(13): Ord  Latency=1 Barrier
    SU(497): Ord  Latency=1 Barrier
SU(15): t1110: i32,i32 = tADCS t1036, t8, t1547:1

    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 224
  Height             : 23
  Predecessors:
    SU(491): Data Latency=1
    SU(509): Data Latency=1
    SU(16): Data Latency=1 Reg=$cpsr
  Successors:
    SU(14): Data Latency=1
    SU(494): Data Latency=1
SU(16): t1113: i32,i32 = tADDSi3 t1035, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 223
  Height             : 24
  Predecessors:
    SU(17): Data Latency=1
  Successors:
    SU(14): Data Latency=1
    SU(15): Data Latency=1 Reg=$cpsr
    SU(496): Data Latency=1
SU(17): t1035: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 222
  Height             : 25
  Predecessors:
    SU(18): Ord  Latency=1 Barrier
  Successors:
    SU(16): Data Latency=1
    SU(495): Ord  Latency=1 Barrier
SU(18): t445: i32,ch,glue = CopyFromReg t444:1, Register:i32 $r0, t444:2

    t440: ch,glue = CopyToReg t438:1, Register:i32 $r0, t1488

    t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1

    t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1

    t443: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442, t442:1

    t444: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t443:1, t443:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 221
  Height             : 26
  Predecessors:
    SU(19): Data Latency=1
    SU(20): Data Latency=1
    SU(486): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(17): Ord  Latency=1 Barrier
    SU(491): Ord  Latency=1 Barrier
SU(19): t1117: i32,i32 = tADCS t1028, t8, t1549:1

    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 218
  Height             : 29
  Predecessors:
    SU(485): Data Latency=1
    SU(509): Data Latency=1
    SU(20): Data Latency=1 Reg=$cpsr
  Successors:
    SU(18): Data Latency=1
    SU(488): Data Latency=1
SU(20): t1120: i32,i32 = tADDSi3 t1027, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 217
  Height             : 30
  Predecessors:
    SU(21): Data Latency=1
  Successors:
    SU(18): Data Latency=1
    SU(19): Data Latency=1 Reg=$cpsr
    SU(490): Data Latency=1
SU(21): t1027: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 216
  Height             : 31
  Predecessors:
    SU(22): Ord  Latency=1 Barrier
  Successors:
    SU(20): Data Latency=1
    SU(489): Ord  Latency=1 Barrier
SU(22): t432: i32,ch,glue = CopyFromReg t431:1, Register:i32 $r0, t431:2

    t427: ch,glue = CopyToReg t425:1, Register:i32 $r0, t1488

    t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1

    t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1

    t430: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429, t429:1

    t431: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t430:1, t430:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 215
  Height             : 32
  Predecessors:
    SU(23): Data Latency=1
    SU(24): Data Latency=1
    SU(480): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(21): Ord  Latency=1 Barrier
    SU(485): Ord  Latency=1 Barrier
SU(23): t1124: i32,i32 = tADCS t1020, t8, t1551:1

    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 212
  Height             : 35
  Predecessors:
    SU(479): Data Latency=1
    SU(509): Data Latency=1
    SU(24): Data Latency=1 Reg=$cpsr
  Successors:
    SU(22): Data Latency=1
    SU(482): Data Latency=1
SU(24): t1127: i32,i32 = tADDSi3 t1019, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 211
  Height             : 36
  Predecessors:
    SU(25): Data Latency=1
  Successors:
    SU(22): Data Latency=1
    SU(23): Data Latency=1 Reg=$cpsr
    SU(484): Data Latency=1
SU(25): t1019: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 210
  Height             : 37
  Predecessors:
    SU(26): Ord  Latency=1 Barrier
  Successors:
    SU(24): Data Latency=1
    SU(483): Ord  Latency=1 Barrier
SU(26): t419: i32,ch,glue = CopyFromReg t418:1, Register:i32 $r0, t418:2

    t414: ch,glue = CopyToReg t412:1, Register:i32 $r0, t1488

    t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1

    t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1

    t417: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416, t416:1

    t418: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t417:1, t417:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 209
  Height             : 38
  Predecessors:
    SU(27): Data Latency=1
    SU(28): Data Latency=1
    SU(474): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(25): Ord  Latency=1 Barrier
    SU(479): Ord  Latency=1 Barrier
SU(27): t1131: i32,i32 = tADCS t1012, t8, t1553:1

    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 206
  Height             : 41
  Predecessors:
    SU(473): Data Latency=1
    SU(509): Data Latency=1
    SU(28): Data Latency=1 Reg=$cpsr
  Successors:
    SU(26): Data Latency=1
    SU(476): Data Latency=1
SU(28): t1134: i32,i32 = tADDSi3 t1011, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 205
  Height             : 42
  Predecessors:
    SU(29): Data Latency=1
  Successors:
    SU(26): Data Latency=1
    SU(27): Data Latency=1 Reg=$cpsr
    SU(478): Data Latency=1
SU(29): t1011: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 204
  Height             : 43
  Predecessors:
    SU(30): Ord  Latency=1 Barrier
  Successors:
    SU(28): Data Latency=1
    SU(477): Ord  Latency=1 Barrier
SU(30): t406: i32,ch,glue = CopyFromReg t405:1, Register:i32 $r0, t405:2

    t401: ch,glue = CopyToReg t399:1, Register:i32 $r0, t1488

    t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1

    t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1

    t404: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403, t403:1

    t405: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t404:1, t404:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 203
  Height             : 44
  Predecessors:
    SU(31): Data Latency=1
    SU(32): Data Latency=1
    SU(468): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(29): Ord  Latency=1 Barrier
    SU(473): Ord  Latency=1 Barrier
SU(31): t1138: i32,i32 = tADCS t1004, t8, t1555:1

    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 200
  Height             : 47
  Predecessors:
    SU(467): Data Latency=1
    SU(509): Data Latency=1
    SU(32): Data Latency=1 Reg=$cpsr
  Successors:
    SU(30): Data Latency=1
    SU(470): Data Latency=1
SU(32): t1141: i32,i32 = tADDSi3 t1003, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 199
  Height             : 48
  Predecessors:
    SU(33): Data Latency=1
  Successors:
    SU(30): Data Latency=1
    SU(31): Data Latency=1 Reg=$cpsr
    SU(472): Data Latency=1
SU(33): t1003: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 198
  Height             : 49
  Predecessors:
    SU(34): Ord  Latency=1 Barrier
  Successors:
    SU(32): Data Latency=1
    SU(471): Ord  Latency=1 Barrier
SU(34): t393: i32,ch,glue = CopyFromReg t392:1, Register:i32 $r0, t392:2

    t388: ch,glue = CopyToReg t386:1, Register:i32 $r0, t1488

    t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1

    t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1

    t391: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390, t390:1

    t392: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t391:1, t391:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 197
  Height             : 50
  Predecessors:
    SU(35): Data Latency=1
    SU(36): Data Latency=1
    SU(462): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(33): Ord  Latency=1 Barrier
    SU(467): Ord  Latency=1 Barrier
SU(35): t1145: i32,i32 = tADCS t996, t8, t1557:1

    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 194
  Height             : 53
  Predecessors:
    SU(461): Data Latency=1
    SU(509): Data Latency=1
    SU(36): Data Latency=1 Reg=$cpsr
  Successors:
    SU(34): Data Latency=1
    SU(464): Data Latency=1
SU(36): t1148: i32,i32 = tADDSi3 t995, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 193
  Height             : 54
  Predecessors:
    SU(37): Data Latency=1
  Successors:
    SU(34): Data Latency=1
    SU(35): Data Latency=1 Reg=$cpsr
    SU(466): Data Latency=1
SU(37): t995: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 192
  Height             : 55
  Predecessors:
    SU(38): Ord  Latency=1 Barrier
  Successors:
    SU(36): Data Latency=1
    SU(465): Ord  Latency=1 Barrier
SU(38): t380: i32,ch,glue = CopyFromReg t379:1, Register:i32 $r0, t379:2

    t375: ch,glue = CopyToReg t373:1, Register:i32 $r0, t1488

    t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1

    t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1

    t378: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377, t377:1

    t379: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t378:1, t378:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 191
  Height             : 56
  Predecessors:
    SU(39): Data Latency=1
    SU(40): Data Latency=1
    SU(456): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(37): Ord  Latency=1 Barrier
    SU(461): Ord  Latency=1 Barrier
SU(39): t1152: i32,i32 = tADCS t988, t8, t1559:1

    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 188
  Height             : 59
  Predecessors:
    SU(455): Data Latency=1
    SU(509): Data Latency=1
    SU(40): Data Latency=1 Reg=$cpsr
  Successors:
    SU(38): Data Latency=1
    SU(458): Data Latency=1
SU(40): t1155: i32,i32 = tADDSi3 t987, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 187
  Height             : 60
  Predecessors:
    SU(41): Data Latency=1
  Successors:
    SU(38): Data Latency=1
    SU(39): Data Latency=1 Reg=$cpsr
    SU(460): Data Latency=1
SU(41): t987: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 186
  Height             : 61
  Predecessors:
    SU(42): Ord  Latency=1 Barrier
  Successors:
    SU(40): Data Latency=1
    SU(459): Ord  Latency=1 Barrier
SU(42): t367: i32,ch,glue = CopyFromReg t366:1, Register:i32 $r0, t366:2

    t362: ch,glue = CopyToReg t360:1, Register:i32 $r0, t1488

    t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1

    t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1

    t365: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364, t364:1

    t366: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t365:1, t365:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 185
  Height             : 62
  Predecessors:
    SU(43): Data Latency=1
    SU(44): Data Latency=1
    SU(450): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(41): Ord  Latency=1 Barrier
    SU(455): Ord  Latency=1 Barrier
SU(43): t1159: i32,i32 = tADCS t980, t8, t1561:1

    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 182
  Height             : 65
  Predecessors:
    SU(449): Data Latency=1
    SU(509): Data Latency=1
    SU(44): Data Latency=1 Reg=$cpsr
  Successors:
    SU(42): Data Latency=1
    SU(452): Data Latency=1
SU(44): t1162: i32,i32 = tADDSi3 t979, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 181
  Height             : 66
  Predecessors:
    SU(45): Data Latency=1
  Successors:
    SU(42): Data Latency=1
    SU(43): Data Latency=1 Reg=$cpsr
    SU(454): Data Latency=1
SU(45): t979: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 180
  Height             : 67
  Predecessors:
    SU(46): Ord  Latency=1 Barrier
  Successors:
    SU(44): Data Latency=1
    SU(453): Ord  Latency=1 Barrier
SU(46): t354: i32,ch,glue = CopyFromReg t353:1, Register:i32 $r0, t353:2

    t349: ch,glue = CopyToReg t347:1, Register:i32 $r0, t1488

    t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1

    t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1

    t352: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351, t351:1

    t353: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t352:1, t352:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 179
  Height             : 68
  Predecessors:
    SU(47): Data Latency=1
    SU(48): Data Latency=1
    SU(444): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(45): Ord  Latency=1 Barrier
    SU(449): Ord  Latency=1 Barrier
SU(47): t1166: i32,i32 = tADCS t972, t8, t1563:1

    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 176
  Height             : 71
  Predecessors:
    SU(443): Data Latency=1
    SU(509): Data Latency=1
    SU(48): Data Latency=1 Reg=$cpsr
  Successors:
    SU(46): Data Latency=1
    SU(446): Data Latency=1
SU(48): t1169: i32,i32 = tADDSi3 t971, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 175
  Height             : 72
  Predecessors:
    SU(49): Data Latency=1
  Successors:
    SU(46): Data Latency=1
    SU(47): Data Latency=1 Reg=$cpsr
    SU(448): Data Latency=1
SU(49): t971: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 174
  Height             : 73
  Predecessors:
    SU(50): Ord  Latency=1 Barrier
  Successors:
    SU(48): Data Latency=1
    SU(447): Ord  Latency=1 Barrier
SU(50): t341: i32,ch,glue = CopyFromReg t340:1, Register:i32 $r0, t340:2

    t336: ch,glue = CopyToReg t334:1, Register:i32 $r0, t1488

    t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1

    t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1

    t339: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338, t338:1

    t340: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t339:1, t339:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 173
  Height             : 74
  Predecessors:
    SU(51): Data Latency=1
    SU(52): Data Latency=1
    SU(438): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(49): Ord  Latency=1 Barrier
    SU(443): Ord  Latency=1 Barrier
SU(51): t1173: i32,i32 = tADCS t964, t8, t1565:1

    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 170
  Height             : 77
  Predecessors:
    SU(437): Data Latency=1
    SU(509): Data Latency=1
    SU(52): Data Latency=1 Reg=$cpsr
  Successors:
    SU(50): Data Latency=1
    SU(440): Data Latency=1
SU(52): t1176: i32,i32 = tADDSi3 t963, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 169
  Height             : 78
  Predecessors:
    SU(53): Data Latency=1
  Successors:
    SU(50): Data Latency=1
    SU(51): Data Latency=1 Reg=$cpsr
    SU(442): Data Latency=1
SU(53): t963: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 168
  Height             : 79
  Predecessors:
    SU(54): Ord  Latency=1 Barrier
  Successors:
    SU(52): Data Latency=1
    SU(441): Ord  Latency=1 Barrier
SU(54): t328: i32,ch,glue = CopyFromReg t327:1, Register:i32 $r0, t327:2

    t323: ch,glue = CopyToReg t321:1, Register:i32 $r0, t1488

    t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1

    t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1

    t326: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325, t325:1

    t327: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t326:1, t326:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 167
  Height             : 80
  Predecessors:
    SU(55): Data Latency=1
    SU(56): Data Latency=1
    SU(432): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(53): Ord  Latency=1 Barrier
    SU(437): Ord  Latency=1 Barrier
SU(55): t1180: i32,i32 = tADCS t956, t8, t1567:1

    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 164
  Height             : 83
  Predecessors:
    SU(431): Data Latency=1
    SU(509): Data Latency=1
    SU(56): Data Latency=1 Reg=$cpsr
  Successors:
    SU(54): Data Latency=1
    SU(434): Data Latency=1
SU(56): t1183: i32,i32 = tADDSi3 t955, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 163
  Height             : 84
  Predecessors:
    SU(57): Data Latency=1
  Successors:
    SU(54): Data Latency=1
    SU(55): Data Latency=1 Reg=$cpsr
    SU(436): Data Latency=1
SU(57): t955: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 162
  Height             : 85
  Predecessors:
    SU(58): Ord  Latency=1 Barrier
  Successors:
    SU(56): Data Latency=1
    SU(435): Ord  Latency=1 Barrier
SU(58): t315: i32,ch,glue = CopyFromReg t314:1, Register:i32 $r0, t314:2

    t310: ch,glue = CopyToReg t308:1, Register:i32 $r0, t1488

    t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1

    t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1

    t313: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312, t312:1

    t314: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t313:1, t313:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 161
  Height             : 86
  Predecessors:
    SU(59): Data Latency=1
    SU(60): Data Latency=1
    SU(426): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(57): Ord  Latency=1 Barrier
    SU(431): Ord  Latency=1 Barrier
SU(59): t1187: i32,i32 = tADCS t948, t8, t1569:1

    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 158
  Height             : 89
  Predecessors:
    SU(425): Data Latency=1
    SU(509): Data Latency=1
    SU(60): Data Latency=1 Reg=$cpsr
  Successors:
    SU(58): Data Latency=1
    SU(428): Data Latency=1
SU(60): t1190: i32,i32 = tADDSi3 t947, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 157
  Height             : 90
  Predecessors:
    SU(61): Data Latency=1
  Successors:
    SU(58): Data Latency=1
    SU(59): Data Latency=1 Reg=$cpsr
    SU(430): Data Latency=1
SU(61): t947: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 156
  Height             : 91
  Predecessors:
    SU(62): Ord  Latency=1 Barrier
  Successors:
    SU(60): Data Latency=1
    SU(429): Ord  Latency=1 Barrier
SU(62): t302: i32,ch,glue = CopyFromReg t301:1, Register:i32 $r0, t301:2

    t297: ch,glue = CopyToReg t295:1, Register:i32 $r0, t1488

    t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1

    t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1

    t300: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299, t299:1

    t301: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t300:1, t300:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 155
  Height             : 92
  Predecessors:
    SU(63): Data Latency=1
    SU(64): Data Latency=1
    SU(420): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(61): Ord  Latency=1 Barrier
    SU(425): Ord  Latency=1 Barrier
SU(63): t1194: i32,i32 = tADCS t940, t8, t1571:1

    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 152
  Height             : 95
  Predecessors:
    SU(419): Data Latency=1
    SU(509): Data Latency=1
    SU(64): Data Latency=1 Reg=$cpsr
  Successors:
    SU(62): Data Latency=1
    SU(422): Data Latency=1
SU(64): t1197: i32,i32 = tADDSi3 t939, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 151
  Height             : 96
  Predecessors:
    SU(65): Data Latency=1
  Successors:
    SU(62): Data Latency=1
    SU(63): Data Latency=1 Reg=$cpsr
    SU(424): Data Latency=1
SU(65): t939: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 150
  Height             : 97
  Predecessors:
    SU(66): Ord  Latency=1 Barrier
  Successors:
    SU(64): Data Latency=1
    SU(423): Ord  Latency=1 Barrier
SU(66): t289: i32,ch,glue = CopyFromReg t288:1, Register:i32 $r0, t288:2

    t284: ch,glue = CopyToReg t282:1, Register:i32 $r0, t1488

    t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1

    t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1

    t287: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286, t286:1

    t288: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t287:1, t287:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 149
  Height             : 98
  Predecessors:
    SU(67): Data Latency=1
    SU(68): Data Latency=1
    SU(414): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(65): Ord  Latency=1 Barrier
    SU(419): Ord  Latency=1 Barrier
SU(67): t1201: i32,i32 = tADCS t932, t8, t1573:1

    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 146
  Height             : 101
  Predecessors:
    SU(413): Data Latency=1
    SU(509): Data Latency=1
    SU(68): Data Latency=1 Reg=$cpsr
  Successors:
    SU(66): Data Latency=1
    SU(416): Data Latency=1
SU(68): t1204: i32,i32 = tADDSi3 t931, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 145
  Height             : 102
  Predecessors:
    SU(69): Data Latency=1
  Successors:
    SU(66): Data Latency=1
    SU(67): Data Latency=1 Reg=$cpsr
    SU(418): Data Latency=1
SU(69): t931: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 144
  Height             : 103
  Predecessors:
    SU(70): Ord  Latency=1 Barrier
  Successors:
    SU(68): Data Latency=1
    SU(417): Ord  Latency=1 Barrier
SU(70): t276: i32,ch,glue = CopyFromReg t275:1, Register:i32 $r0, t275:2

    t271: ch,glue = CopyToReg t269:1, Register:i32 $r0, t1488

    t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1

    t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1

    t274: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273, t273:1

    t275: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t274:1, t274:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 143
  Height             : 104
  Predecessors:
    SU(71): Data Latency=1
    SU(72): Data Latency=1
    SU(408): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(69): Ord  Latency=1 Barrier
    SU(413): Ord  Latency=1 Barrier
SU(71): t1208: i32,i32 = tADCS t924, t8, t1575:1

    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 140
  Height             : 107
  Predecessors:
    SU(407): Data Latency=1
    SU(509): Data Latency=1
    SU(72): Data Latency=1 Reg=$cpsr
  Successors:
    SU(70): Data Latency=1
    SU(410): Data Latency=1
SU(72): t1211: i32,i32 = tADDSi3 t923, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 139
  Height             : 108
  Predecessors:
    SU(73): Data Latency=1
  Successors:
    SU(70): Data Latency=1
    SU(71): Data Latency=1 Reg=$cpsr
    SU(412): Data Latency=1
SU(73): t923: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 138
  Height             : 109
  Predecessors:
    SU(74): Ord  Latency=1 Barrier
  Successors:
    SU(72): Data Latency=1
    SU(411): Ord  Latency=1 Barrier
SU(74): t263: i32,ch,glue = CopyFromReg t262:1, Register:i32 $r0, t262:2

    t258: ch,glue = CopyToReg t256:1, Register:i32 $r0, t1488

    t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1

    t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1

    t261: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260, t260:1

    t262: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t261:1, t261:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 137
  Height             : 110
  Predecessors:
    SU(75): Data Latency=1
    SU(76): Data Latency=1
    SU(402): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(73): Ord  Latency=1 Barrier
    SU(407): Ord  Latency=1 Barrier
SU(75): t1215: i32,i32 = tADCS t916, t8, t1577:1

    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 134
  Height             : 113
  Predecessors:
    SU(401): Data Latency=1
    SU(509): Data Latency=1
    SU(76): Data Latency=1 Reg=$cpsr
  Successors:
    SU(74): Data Latency=1
    SU(404): Data Latency=1
SU(76): t1218: i32,i32 = tADDSi3 t915, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 133
  Height             : 114
  Predecessors:
    SU(77): Data Latency=1
  Successors:
    SU(74): Data Latency=1
    SU(75): Data Latency=1 Reg=$cpsr
    SU(406): Data Latency=1
SU(77): t915: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 132
  Height             : 115
  Predecessors:
    SU(78): Ord  Latency=1 Barrier
  Successors:
    SU(76): Data Latency=1
    SU(405): Ord  Latency=1 Barrier
SU(78): t250: i32,ch,glue = CopyFromReg t249:1, Register:i32 $r0, t249:2

    t245: ch,glue = CopyToReg t243:1, Register:i32 $r0, t1488

    t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1

    t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1

    t248: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247, t247:1

    t249: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t248:1, t248:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 131
  Height             : 116
  Predecessors:
    SU(79): Data Latency=1
    SU(80): Data Latency=1
    SU(396): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(77): Ord  Latency=1 Barrier
    SU(401): Ord  Latency=1 Barrier
SU(79): t1222: i32,i32 = tADCS t908, t8, t1579:1

    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 128
  Height             : 119
  Predecessors:
    SU(395): Data Latency=1
    SU(509): Data Latency=1
    SU(80): Data Latency=1 Reg=$cpsr
  Successors:
    SU(78): Data Latency=1
    SU(398): Data Latency=1
SU(80): t1225: i32,i32 = tADDSi3 t907, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 127
  Height             : 120
  Predecessors:
    SU(81): Data Latency=1
  Successors:
    SU(78): Data Latency=1
    SU(79): Data Latency=1 Reg=$cpsr
    SU(400): Data Latency=1
SU(81): t907: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 126
  Height             : 121
  Predecessors:
    SU(82): Ord  Latency=1 Barrier
  Successors:
    SU(80): Data Latency=1
    SU(399): Ord  Latency=1 Barrier
SU(82): t237: i32,ch,glue = CopyFromReg t236:1, Register:i32 $r0, t236:2

    t227: ch,glue = CopyToReg t223:1, Register:i32 $r0, t1488

    t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1

    t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1

    t234: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231, t231:1

    t236: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t234:1, t234:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 125
  Height             : 122
  Predecessors:
    SU(83): Data Latency=1
    SU(84): Data Latency=1
    SU(390): Ord  Latency=1 Barrier
    SU(389): Data Latency=1
  Successors:
    SU(81): Ord  Latency=1 Barrier
    SU(395): Ord  Latency=1 Barrier
SU(83): t1229: i32,i32 = tADCS t900, t8, t1581:1

    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 122
  Height             : 125
  Predecessors:
    SU(388): Data Latency=1
    SU(509): Data Latency=1
    SU(84): Data Latency=1 Reg=$cpsr
  Successors:
    SU(82): Data Latency=1
    SU(392): Data Latency=1
SU(84): t1232: i32,i32 = tADDSi3 t899, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 121
  Height             : 126
  Predecessors:
    SU(85): Data Latency=1
  Successors:
    SU(82): Data Latency=1
    SU(83): Data Latency=1 Reg=$cpsr
    SU(394): Data Latency=1
SU(85): t899: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t213

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 120
  Height             : 127
  Predecessors:
    SU(86): Ord  Latency=1 Barrier
  Successors:
    SU(84): Data Latency=1
    SU(393): Ord  Latency=1 Barrier
SU(86): t213: ch = tSTRspi<Mem:(store (s32) into %ir.28)> t893, TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t212

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 119
  Height             : 128
  Predecessors:
    SU(342): Data Latency=1
    SU(87): Ord  Latency=0 Barrier
  Successors:
    SU(85): Ord  Latency=1 Barrier
    SU(388): Ord  Latency=1 Barrier
SU(87): t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

  # preds left       : 23
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(341): Ord  Latency=1 Barrier
    SU(340): Ord  Latency=1 Barrier
    SU(337): Ord  Latency=0 Barrier
    SU(334): Ord  Latency=0 Barrier
    SU(331): Ord  Latency=0 Barrier
    SU(328): Ord  Latency=0 Barrier
    SU(325): Ord  Latency=0 Barrier
    SU(322): Ord  Latency=0 Barrier
    SU(319): Ord  Latency=0 Barrier
    SU(316): Ord  Latency=0 Barrier
    SU(313): Ord  Latency=0 Barrier
    SU(310): Ord  Latency=0 Barrier
    SU(307): Ord  Latency=0 Barrier
    SU(304): Ord  Latency=0 Barrier
    SU(301): Ord  Latency=0 Barrier
    SU(298): Ord  Latency=0 Barrier
    SU(295): Ord  Latency=0 Barrier
    SU(292): Ord  Latency=0 Barrier
    SU(289): Ord  Latency=0 Barrier
    SU(286): Ord  Latency=0 Barrier
    SU(283): Ord  Latency=0 Barrier
    SU(280): Ord  Latency=0 Barrier
    SU(88): Ord  Latency=0 Barrier
  Successors:
    SU(86): Ord  Latency=0 Barrier
SU(88): t689: ch = TokenFactor t687:1, t688:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(279): Ord  Latency=1 Barrier
    SU(89): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(89): t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 133
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(88): Ord  Latency=1 Barrier
    SU(345): Data Latency=1
SU(90): t686: ch = TokenFactor t683, t685

  # preds left       : 2
  # succs left       : 44
  # rdefs left       : 0
  Latency            : 0
  Depth              : 108
  Height             : 139
  Predecessors:
    SU(278): Ord  Latency=1 Barrier
    SU(91): Ord  Latency=1 Barrier
  Successors:
    SU(89): Ord  Latency=0 Barrier
    SU(279): Ord  Latency=0 Barrier
    SU(281): Ord  Latency=0 Barrier
    SU(282): Ord  Latency=0 Barrier
    SU(284): Ord  Latency=0 Barrier
    SU(285): Ord  Latency=0 Barrier
    SU(287): Ord  Latency=0 Barrier
    SU(288): Ord  Latency=0 Barrier
    SU(290): Ord  Latency=0 Barrier
    SU(291): Ord  Latency=0 Barrier
    SU(293): Ord  Latency=0 Barrier
    SU(294): Ord  Latency=0 Barrier
    SU(296): Ord  Latency=0 Barrier
    SU(297): Ord  Latency=0 Barrier
    SU(299): Ord  Latency=0 Barrier
    SU(300): Ord  Latency=0 Barrier
    SU(302): Ord  Latency=0 Barrier
    SU(303): Ord  Latency=0 Barrier
    SU(305): Ord  Latency=0 Barrier
    SU(306): Ord  Latency=0 Barrier
    SU(308): Ord  Latency=0 Barrier
    SU(309): Ord  Latency=0 Barrier
    SU(311): Ord  Latency=0 Barrier
    SU(312): Ord  Latency=0 Barrier
    SU(314): Ord  Latency=0 Barrier
    SU(315): Ord  Latency=0 Barrier
    SU(317): Ord  Latency=0 Barrier
    SU(318): Ord  Latency=0 Barrier
    SU(320): Ord  Latency=0 Barrier
    SU(321): Ord  Latency=0 Barrier
    SU(323): Ord  Latency=0 Barrier
    SU(324): Ord  Latency=0 Barrier
    SU(326): Ord  Latency=0 Barrier
    SU(327): Ord  Latency=0 Barrier
    SU(329): Ord  Latency=0 Barrier
    SU(330): Ord  Latency=0 Barrier
    SU(332): Ord  Latency=0 Barrier
    SU(333): Ord  Latency=0 Barrier
    SU(335): Ord  Latency=0 Barrier
    SU(336): Ord  Latency=0 Barrier
    SU(338): Ord  Latency=0 Barrier
    SU(339): Ord  Latency=0 Barrier
    SU(340): Ord  Latency=0 Barrier
    SU(341): Ord  Latency=0 Barrier
SU(91): t685: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1278, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 107
  Height             : 140
  Predecessors:
    SU(273): Data Latency=1
    SU(92): Ord  Latency=1 Barrier
  Successors:
    SU(90): Ord  Latency=1 Barrier
SU(92): t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 103
  Height             : 144
  Predecessors:
    SU(93): Ord  Latency=0 Barrier
  Successors:
    SU(91): Ord  Latency=1 Barrier
    SU(275): Data Latency=1
    SU(278): Ord  Latency=1 Barrier
SU(93): t679: ch = TokenFactor t676, t678

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 103
  Height             : 144
  Predecessors:
    SU(272): Ord  Latency=1 Barrier
    SU(94): Ord  Latency=1 Barrier
  Successors:
    SU(92): Ord  Latency=0 Barrier
SU(94): t678: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1288, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 102
  Height             : 145
  Predecessors:
    SU(267): Data Latency=1
    SU(95): Ord  Latency=1 Barrier
  Successors:
    SU(93): Ord  Latency=1 Barrier
SU(95): t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 98
  Height             : 149
  Predecessors:
    SU(96): Ord  Latency=0 Barrier
  Successors:
    SU(94): Ord  Latency=1 Barrier
    SU(269): Data Latency=1
    SU(272): Ord  Latency=1 Barrier
SU(96): t672: ch = TokenFactor t669, t671

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 98
  Height             : 149
  Predecessors:
    SU(266): Ord  Latency=1 Barrier
    SU(97): Ord  Latency=1 Barrier
  Successors:
    SU(95): Ord  Latency=0 Barrier
SU(97): t671: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1298, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 97
  Height             : 150
  Predecessors:
    SU(261): Data Latency=1
    SU(98): Ord  Latency=1 Barrier
  Successors:
    SU(96): Ord  Latency=1 Barrier
SU(98): t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 93
  Height             : 154
  Predecessors:
    SU(99): Ord  Latency=0 Barrier
  Successors:
    SU(97): Ord  Latency=1 Barrier
    SU(263): Data Latency=1
    SU(266): Ord  Latency=1 Barrier
SU(99): t665: ch = TokenFactor t662, t664

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 93
  Height             : 154
  Predecessors:
    SU(260): Ord  Latency=1 Barrier
    SU(100): Ord  Latency=1 Barrier
  Successors:
    SU(98): Ord  Latency=0 Barrier
SU(100): t664: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1308, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 92
  Height             : 155
  Predecessors:
    SU(255): Data Latency=1
    SU(101): Ord  Latency=1 Barrier
  Successors:
    SU(99): Ord  Latency=1 Barrier
SU(101): t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 88
  Height             : 159
  Predecessors:
    SU(102): Ord  Latency=0 Barrier
  Successors:
    SU(100): Ord  Latency=1 Barrier
    SU(257): Data Latency=1
    SU(260): Ord  Latency=1 Barrier
SU(102): t658: ch = TokenFactor t655, t657

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 88
  Height             : 159
  Predecessors:
    SU(254): Ord  Latency=1 Barrier
    SU(103): Ord  Latency=1 Barrier
  Successors:
    SU(101): Ord  Latency=0 Barrier
SU(103): t657: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1318, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 87
  Height             : 160
  Predecessors:
    SU(249): Data Latency=1
    SU(104): Ord  Latency=1 Barrier
  Successors:
    SU(102): Ord  Latency=1 Barrier
SU(104): t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 83
  Height             : 164
  Predecessors:
    SU(105): Ord  Latency=0 Barrier
  Successors:
    SU(103): Ord  Latency=1 Barrier
    SU(251): Data Latency=1
    SU(254): Ord  Latency=1 Barrier
SU(105): t651: ch = TokenFactor t648, t650

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 83
  Height             : 164
  Predecessors:
    SU(248): Ord  Latency=1 Barrier
    SU(106): Ord  Latency=1 Barrier
  Successors:
    SU(104): Ord  Latency=0 Barrier
SU(106): t650: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1328, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 82
  Height             : 165
  Predecessors:
    SU(244): Data Latency=1
    SU(107): Ord  Latency=1 Barrier
  Successors:
    SU(105): Ord  Latency=1 Barrier
SU(107): t121: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t644

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 78
  Height             : 169
  Predecessors:
    SU(108): Ord  Latency=0 Barrier
  Successors:
    SU(106): Ord  Latency=1 Barrier
    SU(246): Data Latency=1
    SU(248): Ord  Latency=1 Barrier
SU(108): t644: ch = TokenFactor t641, t643

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 78
  Height             : 169
  Predecessors:
    SU(243): Ord  Latency=1 Barrier
    SU(109): Ord  Latency=1 Barrier
  Successors:
    SU(107): Ord  Latency=0 Barrier
SU(109): t643: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1338, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 77
  Height             : 170
  Predecessors:
    SU(238): Data Latency=1
    SU(110): Ord  Latency=1 Barrier
  Successors:
    SU(108): Ord  Latency=1 Barrier
SU(110): t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 73
  Height             : 174
  Predecessors:
    SU(111): Ord  Latency=0 Barrier
  Successors:
    SU(109): Ord  Latency=1 Barrier
    SU(240): Data Latency=1
    SU(243): Ord  Latency=1 Barrier
SU(111): t637: ch = TokenFactor t634, t636

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 73
  Height             : 174
  Predecessors:
    SU(237): Ord  Latency=1 Barrier
    SU(112): Ord  Latency=1 Barrier
  Successors:
    SU(110): Ord  Latency=0 Barrier
SU(112): t636: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1348, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 72
  Height             : 175
  Predecessors:
    SU(232): Data Latency=1
    SU(113): Ord  Latency=1 Barrier
  Successors:
    SU(111): Ord  Latency=1 Barrier
SU(113): t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 68
  Height             : 179
  Predecessors:
    SU(114): Ord  Latency=0 Barrier
  Successors:
    SU(112): Ord  Latency=1 Barrier
    SU(234): Data Latency=1
    SU(237): Ord  Latency=1 Barrier
SU(114): t630: ch = TokenFactor t627, t629

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 68
  Height             : 179
  Predecessors:
    SU(231): Ord  Latency=1 Barrier
    SU(115): Ord  Latency=1 Barrier
  Successors:
    SU(113): Ord  Latency=0 Barrier
SU(115): t629: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1358, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 67
  Height             : 180
  Predecessors:
    SU(226): Data Latency=1
    SU(116): Ord  Latency=1 Barrier
  Successors:
    SU(114): Ord  Latency=1 Barrier
SU(116): t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 63
  Height             : 184
  Predecessors:
    SU(117): Ord  Latency=0 Barrier
  Successors:
    SU(115): Ord  Latency=1 Barrier
    SU(228): Data Latency=1
    SU(231): Ord  Latency=1 Barrier
SU(117): t623: ch = TokenFactor t620, t622

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 63
  Height             : 184
  Predecessors:
    SU(225): Ord  Latency=1 Barrier
    SU(118): Ord  Latency=1 Barrier
  Successors:
    SU(116): Ord  Latency=0 Barrier
SU(118): t622: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1368, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 62
  Height             : 185
  Predecessors:
    SU(220): Data Latency=1
    SU(119): Ord  Latency=1 Barrier
  Successors:
    SU(117): Ord  Latency=1 Barrier
SU(119): t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 58
  Height             : 189
  Predecessors:
    SU(120): Ord  Latency=0 Barrier
  Successors:
    SU(118): Ord  Latency=1 Barrier
    SU(222): Data Latency=1
    SU(225): Ord  Latency=1 Barrier
SU(120): t616: ch = TokenFactor t613, t615

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 58
  Height             : 189
  Predecessors:
    SU(219): Ord  Latency=1 Barrier
    SU(121): Ord  Latency=1 Barrier
  Successors:
    SU(119): Ord  Latency=0 Barrier
SU(121): t615: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1378, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 57
  Height             : 190
  Predecessors:
    SU(214): Data Latency=1
    SU(122): Ord  Latency=1 Barrier
  Successors:
    SU(120): Ord  Latency=1 Barrier
SU(122): t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 53
  Height             : 194
  Predecessors:
    SU(123): Ord  Latency=0 Barrier
  Successors:
    SU(121): Ord  Latency=1 Barrier
    SU(216): Data Latency=1
    SU(219): Ord  Latency=1 Barrier
SU(123): t609: ch = TokenFactor t606, t608

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 53
  Height             : 194
  Predecessors:
    SU(213): Ord  Latency=1 Barrier
    SU(124): Ord  Latency=1 Barrier
  Successors:
    SU(122): Ord  Latency=0 Barrier
SU(124): t608: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1388, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 52
  Height             : 195
  Predecessors:
    SU(208): Data Latency=1
    SU(125): Ord  Latency=1 Barrier
  Successors:
    SU(123): Ord  Latency=1 Barrier
SU(125): t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 48
  Height             : 199
  Predecessors:
    SU(126): Ord  Latency=0 Barrier
  Successors:
    SU(124): Ord  Latency=1 Barrier
    SU(210): Data Latency=1
    SU(213): Ord  Latency=1 Barrier
SU(126): t602: ch = TokenFactor t599, t601

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 48
  Height             : 199
  Predecessors:
    SU(207): Ord  Latency=1 Barrier
    SU(127): Ord  Latency=1 Barrier
  Successors:
    SU(125): Ord  Latency=0 Barrier
SU(127): t601: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1398, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 200
  Predecessors:
    SU(202): Data Latency=1
    SU(128): Ord  Latency=1 Barrier
  Successors:
    SU(126): Ord  Latency=1 Barrier
SU(128): t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 43
  Height             : 204
  Predecessors:
    SU(129): Ord  Latency=0 Barrier
  Successors:
    SU(127): Ord  Latency=1 Barrier
    SU(204): Data Latency=1
    SU(207): Ord  Latency=1 Barrier
SU(129): t595: ch = TokenFactor t592, t594

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 43
  Height             : 204
  Predecessors:
    SU(201): Ord  Latency=1 Barrier
    SU(130): Ord  Latency=1 Barrier
  Successors:
    SU(128): Ord  Latency=0 Barrier
SU(130): t594: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1408, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 205
  Predecessors:
    SU(197): Data Latency=1
    SU(131): Ord  Latency=1 Barrier
  Successors:
    SU(129): Ord  Latency=1 Barrier
SU(131): t65: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t588

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 38
  Height             : 209
  Predecessors:
    SU(132): Ord  Latency=0 Barrier
  Successors:
    SU(130): Ord  Latency=1 Barrier
    SU(199): Data Latency=1
    SU(201): Ord  Latency=1 Barrier
SU(132): t588: ch = TokenFactor t585, t587

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 38
  Height             : 209
  Predecessors:
    SU(196): Ord  Latency=1 Barrier
    SU(133): Ord  Latency=1 Barrier
  Successors:
    SU(131): Ord  Latency=0 Barrier
SU(133): t587: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1418, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 210
  Predecessors:
    SU(191): Data Latency=1
    SU(134): Ord  Latency=1 Barrier
  Successors:
    SU(132): Ord  Latency=1 Barrier
SU(134): t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 33
  Height             : 214
  Predecessors:
    SU(135): Ord  Latency=0 Barrier
  Successors:
    SU(133): Ord  Latency=1 Barrier
    SU(193): Data Latency=1
    SU(196): Ord  Latency=1 Barrier
SU(135): t581: ch = TokenFactor t578, t580

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 33
  Height             : 214
  Predecessors:
    SU(190): Ord  Latency=1 Barrier
    SU(136): Ord  Latency=1 Barrier
  Successors:
    SU(134): Ord  Latency=0 Barrier
SU(136): t580: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1428, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 215
  Predecessors:
    SU(185): Data Latency=1
    SU(137): Ord  Latency=1 Barrier
  Successors:
    SU(135): Ord  Latency=1 Barrier
SU(137): t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 28
  Height             : 219
  Predecessors:
    SU(138): Ord  Latency=0 Barrier
  Successors:
    SU(136): Ord  Latency=1 Barrier
    SU(187): Data Latency=1
    SU(190): Ord  Latency=1 Barrier
SU(138): t574: ch = TokenFactor t571, t573

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 28
  Height             : 219
  Predecessors:
    SU(184): Ord  Latency=1 Barrier
    SU(139): Ord  Latency=1 Barrier
  Successors:
    SU(137): Ord  Latency=0 Barrier
SU(139): t573: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1438, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 220
  Predecessors:
    SU(179): Data Latency=1
    SU(140): Ord  Latency=1 Barrier
  Successors:
    SU(138): Ord  Latency=1 Barrier
SU(140): t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 23
  Height             : 224
  Predecessors:
    SU(141): Ord  Latency=0 Barrier
  Successors:
    SU(139): Ord  Latency=1 Barrier
    SU(181): Data Latency=1
    SU(184): Ord  Latency=1 Barrier
SU(141): t567: ch = TokenFactor t564, t566

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 23
  Height             : 224
  Predecessors:
    SU(178): Ord  Latency=1 Barrier
    SU(142): Ord  Latency=1 Barrier
  Successors:
    SU(140): Ord  Latency=0 Barrier
SU(142): t566: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1448, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 225
  Predecessors:
    SU(174): Data Latency=1
    SU(143): Ord  Latency=1 Barrier
  Successors:
    SU(141): Ord  Latency=1 Barrier
SU(143): t37: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t560

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 18
  Height             : 229
  Predecessors:
    SU(144): Ord  Latency=0 Barrier
  Successors:
    SU(142): Ord  Latency=1 Barrier
    SU(176): Data Latency=1
    SU(178): Ord  Latency=1 Barrier
SU(144): t560: ch = TokenFactor t557, t559

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 229
  Predecessors:
    SU(173): Ord  Latency=1 Barrier
    SU(145): Ord  Latency=1 Barrier
  Successors:
    SU(143): Ord  Latency=0 Barrier
SU(145): t559: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1458, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 230
  Predecessors:
    SU(168): Data Latency=1
    SU(146): Ord  Latency=1 Barrier
  Successors:
    SU(144): Ord  Latency=1 Barrier
SU(146): t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 13
  Height             : 234
  Predecessors:
    SU(147): Ord  Latency=0 Barrier
  Successors:
    SU(145): Ord  Latency=1 Barrier
    SU(170): Data Latency=1
    SU(173): Ord  Latency=1 Barrier
SU(147): t553: ch = TokenFactor t550, t552

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 234
  Predecessors:
    SU(167): Ord  Latency=1 Barrier
    SU(148): Ord  Latency=1 Barrier
  Successors:
    SU(146): Ord  Latency=0 Barrier
SU(148): t552: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1468, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 235
  Predecessors:
    SU(163): Data Latency=1
    SU(149): Ord  Latency=1 Barrier
  Successors:
    SU(147): Ord  Latency=1 Barrier
SU(149): t23: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t546

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 239
  Predecessors:
    SU(150): Ord  Latency=0 Barrier
  Successors:
    SU(148): Ord  Latency=1 Barrier
    SU(165): Data Latency=1
    SU(167): Ord  Latency=1 Barrier
SU(150): t546: ch = TokenFactor t543, t545

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 239
  Predecessors:
    SU(162): Ord  Latency=1 Barrier
    SU(151): Ord  Latency=1 Barrier
  Successors:
    SU(149): Ord  Latency=0 Barrier
SU(151): t545: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1478, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 240
  Predecessors:
    SU(159): Data Latency=1
    SU(152): Ord  Latency=1 Barrier
  Successors:
    SU(150): Ord  Latency=1 Barrier
SU(152): t538: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t14

  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 243
  Predecessors:
    SU(153): Ord  Latency=1 Barrier
  Successors:
    SU(151): Ord  Latency=1 Barrier
    SU(160): Data Latency=1
    SU(161): Data Latency=1
    SU(162): Ord  Latency=1 Barrier
SU(153): t14: ch = tSTRspi<Mem:(store (s32) into %ir.6)> t6, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t12

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 244
  Predecessors:
    SU(158): Data Latency=1
    SU(154): Ord  Latency=1 Barrier
  Successors:
    SU(152): Ord  Latency=1 Barrier
SU(154): t12: ch = tSTRspi<Mem:(store (s32) into %ir.5)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t10

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 245
  Predecessors:
    SU(157): Data Latency=1
    SU(155): Ord  Latency=1 Barrier
  Successors:
    SU(153): Ord  Latency=1 Barrier
SU(155): t10: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 246
  Predecessors:
    SU(156): Data Latency=1
  Successors:
    SU(154): Ord  Latency=1 Barrier
SU(156): t2: i32,ch = CopyFromReg t0, Register:i32 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 247
  Successors:
    SU(155): Data Latency=1
SU(157): t4: i32,ch = CopyFromReg t0, Register:i32 %1

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 246
  Successors:
    SU(154): Data Latency=1
SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 245
  Successors:
    SU(153): Data Latency=1
SU(159): t1478: i32,i32 = tSBCS t8, t540, t1614:1

    t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 241
  Predecessors:
    SU(509): Data Latency=1
    SU(161): Data Latency=1
    SU(160): Data Latency=1 Reg=$cpsr
  Successors:
    SU(151): Data Latency=1
SU(160): t1482: i32,i32 = tRSBS t538

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 242
  Predecessors:
    SU(152): Data Latency=1
  Successors:
    SU(159): Data Latency=1 Reg=$cpsr
    SU(162): Data Latency=1
SU(161): t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 242
  Predecessors:
    SU(152): Data Latency=1
  Successors:
    SU(159): Data Latency=1
SU(162): t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 240
  Predecessors:
    SU(160): Data Latency=1
    SU(152): Ord  Latency=1 Barrier
  Successors:
    SU(150): Ord  Latency=1 Barrier
SU(163): t1468: i32,i32 = tSBCS t8, t547, t1613:1

    t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 11
  Height             : 236
  Predecessors:
    SU(509): Data Latency=1
    SU(166): Data Latency=1
    SU(164): Data Latency=1 Reg=$cpsr
  Successors:
    SU(148): Data Latency=1
SU(164): t1472: i32,i32 = tRSBS t534

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 237
  Predecessors:
    SU(165): Data Latency=1
  Successors:
    SU(163): Data Latency=1 Reg=$cpsr
    SU(167): Data Latency=1
SU(165): t534: i32 = tLSLri Register:i32 $cpsr, t23, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 238
  Predecessors:
    SU(149): Data Latency=1
  Successors:
    SU(164): Data Latency=1
    SU(166): Data Latency=1
SU(166): t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 237
  Predecessors:
    SU(165): Data Latency=1
  Successors:
    SU(163): Data Latency=1
SU(167): t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 235
  Predecessors:
    SU(164): Data Latency=1
    SU(149): Ord  Latency=1 Barrier
  Successors:
    SU(147): Ord  Latency=1 Barrier
SU(168): t1458: i32,i32 = tSBCS t8, t554, t1612:1

    t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 16
  Height             : 231
  Predecessors:
    SU(509): Data Latency=1
    SU(172): Data Latency=1
    SU(169): Data Latency=1 Reg=$cpsr
  Successors:
    SU(145): Data Latency=1
SU(169): t1462: i32,i32 = tRSBS t32

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 15
  Height             : 232
  Predecessors:
    SU(170): Data Latency=1
  Successors:
    SU(168): Data Latency=1 Reg=$cpsr
    SU(173): Data Latency=1
SU(170): t32: i32 = tMUL nsw Register:i32 $cpsr, t30, t31, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 14
  Height             : 233
  Predecessors:
    SU(146): Data Latency=1
    SU(171): Data Latency=1
  Successors:
    SU(169): Data Latency=1
    SU(172): Data Latency=1
SU(171): t31: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 234
  Successors:
    SU(170): Data Latency=1
SU(172): t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 15
  Height             : 232
  Predecessors:
    SU(170): Data Latency=1
  Successors:
    SU(168): Data Latency=1
SU(173): t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 230
  Predecessors:
    SU(169): Data Latency=1
    SU(146): Ord  Latency=1 Barrier
  Successors:
    SU(144): Ord  Latency=1 Barrier
SU(174): t1448: i32,i32 = tSBCS t8, t561, t1610:1

    t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 21
  Height             : 226
  Predecessors:
    SU(509): Data Latency=1
    SU(177): Data Latency=1
    SU(175): Data Latency=1 Reg=$cpsr
  Successors:
    SU(142): Data Latency=1
SU(175): t1452: i32,i32 = tRSBS t529

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 20
  Height             : 227
  Predecessors:
    SU(176): Data Latency=1
  Successors:
    SU(174): Data Latency=1 Reg=$cpsr
    SU(178): Data Latency=1
SU(176): t529: i32 = tLSLri Register:i32 $cpsr, t37, TargetConstant:i32<2>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 19
  Height             : 228
  Predecessors:
    SU(143): Data Latency=1
  Successors:
    SU(175): Data Latency=1
    SU(177): Data Latency=1
SU(177): t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 20
  Height             : 227
  Predecessors:
    SU(176): Data Latency=1
  Successors:
    SU(174): Data Latency=1
SU(178): t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 225
  Predecessors:
    SU(175): Data Latency=1
    SU(143): Ord  Latency=1 Barrier
  Successors:
    SU(141): Ord  Latency=1 Barrier
SU(179): t1438: i32,i32 = tSBCS t8, t568, t1609:1

    t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 26
  Height             : 221
  Predecessors:
    SU(509): Data Latency=1
    SU(183): Data Latency=1
    SU(180): Data Latency=1 Reg=$cpsr
  Successors:
    SU(139): Data Latency=1
SU(180): t1442: i32,i32 = tRSBS t46

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 25
  Height             : 222
  Predecessors:
    SU(181): Data Latency=1
  Successors:
    SU(179): Data Latency=1 Reg=$cpsr
    SU(184): Data Latency=1
SU(181): t46: i32 = tMUL nsw Register:i32 $cpsr, t44, t45, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 24
  Height             : 223
  Predecessors:
    SU(140): Data Latency=1
    SU(182): Data Latency=1
  Successors:
    SU(180): Data Latency=1
    SU(183): Data Latency=1
SU(182): t45: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 224
  Successors:
    SU(181): Data Latency=1
SU(183): t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 25
  Height             : 222
  Predecessors:
    SU(181): Data Latency=1
  Successors:
    SU(179): Data Latency=1
SU(184): t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 220
  Predecessors:
    SU(180): Data Latency=1
    SU(140): Ord  Latency=1 Barrier
  Successors:
    SU(138): Ord  Latency=1 Barrier
SU(185): t1428: i32,i32 = tSBCS t8, t575, t1608:1

    t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 31
  Height             : 216
  Predecessors:
    SU(509): Data Latency=1
    SU(189): Data Latency=1
    SU(186): Data Latency=1 Reg=$cpsr
  Successors:
    SU(136): Data Latency=1
SU(186): t1432: i32,i32 = tRSBS t53

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 30
  Height             : 217
  Predecessors:
    SU(187): Data Latency=1
  Successors:
    SU(185): Data Latency=1 Reg=$cpsr
    SU(190): Data Latency=1
SU(187): t53: i32 = tMUL nsw Register:i32 $cpsr, t51, t52, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 29
  Height             : 218
  Predecessors:
    SU(137): Data Latency=1
    SU(188): Data Latency=1
  Successors:
    SU(186): Data Latency=1
    SU(189): Data Latency=1
SU(188): t52: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 219
  Successors:
    SU(187): Data Latency=1
SU(189): t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 30
  Height             : 217
  Predecessors:
    SU(187): Data Latency=1
  Successors:
    SU(185): Data Latency=1
SU(190): t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 215
  Predecessors:
    SU(186): Data Latency=1
    SU(137): Ord  Latency=1 Barrier
  Successors:
    SU(135): Ord  Latency=1 Barrier
SU(191): t1418: i32,i32 = tSBCS t8, t582, t1607:1

    t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 36
  Height             : 211
  Predecessors:
    SU(509): Data Latency=1
    SU(195): Data Latency=1
    SU(192): Data Latency=1 Reg=$cpsr
  Successors:
    SU(133): Data Latency=1
SU(192): t1422: i32,i32 = tRSBS t60

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 35
  Height             : 212
  Predecessors:
    SU(193): Data Latency=1
  Successors:
    SU(191): Data Latency=1 Reg=$cpsr
    SU(196): Data Latency=1
SU(193): t60: i32 = tMUL nsw Register:i32 $cpsr, t58, t59, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 34
  Height             : 213
  Predecessors:
    SU(134): Data Latency=1
    SU(194): Data Latency=1
  Successors:
    SU(192): Data Latency=1
    SU(195): Data Latency=1
SU(194): t59: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 214
  Successors:
    SU(193): Data Latency=1
SU(195): t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 35
  Height             : 212
  Predecessors:
    SU(193): Data Latency=1
  Successors:
    SU(191): Data Latency=1
SU(196): t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 210
  Predecessors:
    SU(192): Data Latency=1
    SU(134): Ord  Latency=1 Barrier
  Successors:
    SU(132): Ord  Latency=1 Barrier
SU(197): t1408: i32,i32 = tSBCS t8, t589, t1605:1

    t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 41
  Height             : 206
  Predecessors:
    SU(509): Data Latency=1
    SU(200): Data Latency=1
    SU(198): Data Latency=1 Reg=$cpsr
  Successors:
    SU(130): Data Latency=1
SU(198): t1412: i32,i32 = tRSBS t522

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 40
  Height             : 207
  Predecessors:
    SU(199): Data Latency=1
  Successors:
    SU(197): Data Latency=1 Reg=$cpsr
    SU(201): Data Latency=1
SU(199): t522: i32 = tLSLri Register:i32 $cpsr, t65, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 39
  Height             : 208
  Predecessors:
    SU(131): Data Latency=1
  Successors:
    SU(198): Data Latency=1
    SU(200): Data Latency=1
SU(200): t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 40
  Height             : 207
  Predecessors:
    SU(199): Data Latency=1
  Successors:
    SU(197): Data Latency=1
SU(201): t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 41
  Height             : 205
  Predecessors:
    SU(198): Data Latency=1
    SU(131): Ord  Latency=1 Barrier
  Successors:
    SU(129): Ord  Latency=1 Barrier
SU(202): t1398: i32,i32 = tSBCS t8, t596, t1604:1

    t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 46
  Height             : 201
  Predecessors:
    SU(509): Data Latency=1
    SU(206): Data Latency=1
    SU(203): Data Latency=1 Reg=$cpsr
  Successors:
    SU(127): Data Latency=1
SU(203): t1402: i32,i32 = tRSBS t74

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 45
  Height             : 202
  Predecessors:
    SU(204): Data Latency=1
  Successors:
    SU(202): Data Latency=1 Reg=$cpsr
    SU(207): Data Latency=1
SU(204): t74: i32 = tMUL nsw Register:i32 $cpsr, t72, t73, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 44
  Height             : 203
  Predecessors:
    SU(128): Data Latency=1
    SU(205): Data Latency=1
  Successors:
    SU(203): Data Latency=1
    SU(206): Data Latency=1
SU(205): t73: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 204
  Successors:
    SU(204): Data Latency=1
SU(206): t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 45
  Height             : 202
  Predecessors:
    SU(204): Data Latency=1
  Successors:
    SU(202): Data Latency=1
SU(207): t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 46
  Height             : 200
  Predecessors:
    SU(203): Data Latency=1
    SU(128): Ord  Latency=1 Barrier
  Successors:
    SU(126): Ord  Latency=1 Barrier
SU(208): t1388: i32,i32 = tSBCS t8, t603, t1603:1

    t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 51
  Height             : 196
  Predecessors:
    SU(509): Data Latency=1
    SU(212): Data Latency=1
    SU(209): Data Latency=1 Reg=$cpsr
  Successors:
    SU(124): Data Latency=1
SU(209): t1392: i32,i32 = tRSBS t81

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 50
  Height             : 197
  Predecessors:
    SU(210): Data Latency=1
  Successors:
    SU(208): Data Latency=1 Reg=$cpsr
    SU(213): Data Latency=1
SU(210): t81: i32 = tMUL nsw Register:i32 $cpsr, t79, t80, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 49
  Height             : 198
  Predecessors:
    SU(125): Data Latency=1
    SU(211): Data Latency=1
  Successors:
    SU(209): Data Latency=1
    SU(212): Data Latency=1
SU(211): t80: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 199
  Successors:
    SU(210): Data Latency=1
SU(212): t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 50
  Height             : 197
  Predecessors:
    SU(210): Data Latency=1
  Successors:
    SU(208): Data Latency=1
SU(213): t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 51
  Height             : 195
  Predecessors:
    SU(209): Data Latency=1
    SU(125): Ord  Latency=1 Barrier
  Successors:
    SU(123): Ord  Latency=1 Barrier
SU(214): t1378: i32,i32 = tSBCS t8, t610, t1602:1

    t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 56
  Height             : 191
  Predecessors:
    SU(509): Data Latency=1
    SU(218): Data Latency=1
    SU(215): Data Latency=1 Reg=$cpsr
  Successors:
    SU(121): Data Latency=1
SU(215): t1382: i32,i32 = tRSBS t88

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 55
  Height             : 192
  Predecessors:
    SU(216): Data Latency=1
  Successors:
    SU(214): Data Latency=1 Reg=$cpsr
    SU(219): Data Latency=1
SU(216): t88: i32 = tMUL nsw Register:i32 $cpsr, t86, t87, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 54
  Height             : 193
  Predecessors:
    SU(122): Data Latency=1
    SU(217): Data Latency=1
  Successors:
    SU(215): Data Latency=1
    SU(218): Data Latency=1
SU(217): t87: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 194
  Successors:
    SU(216): Data Latency=1
SU(218): t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 55
  Height             : 192
  Predecessors:
    SU(216): Data Latency=1
  Successors:
    SU(214): Data Latency=1
SU(219): t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 56
  Height             : 190
  Predecessors:
    SU(215): Data Latency=1
    SU(122): Ord  Latency=1 Barrier
  Successors:
    SU(120): Ord  Latency=1 Barrier
SU(220): t1368: i32,i32 = tSBCS t8, t617, t1601:1

    t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 61
  Height             : 186
  Predecessors:
    SU(509): Data Latency=1
    SU(224): Data Latency=1
    SU(221): Data Latency=1 Reg=$cpsr
  Successors:
    SU(118): Data Latency=1
SU(221): t1372: i32,i32 = tRSBS t95

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 60
  Height             : 187
  Predecessors:
    SU(222): Data Latency=1
  Successors:
    SU(220): Data Latency=1 Reg=$cpsr
    SU(225): Data Latency=1
SU(222): t95: i32 = tMUL nsw Register:i32 $cpsr, t93, t94, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 59
  Height             : 188
  Predecessors:
    SU(119): Data Latency=1
    SU(223): Data Latency=1
  Successors:
    SU(221): Data Latency=1
    SU(224): Data Latency=1
SU(223): t94: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 189
  Successors:
    SU(222): Data Latency=1
SU(224): t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 60
  Height             : 187
  Predecessors:
    SU(222): Data Latency=1
  Successors:
    SU(220): Data Latency=1
SU(225): t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 61
  Height             : 185
  Predecessors:
    SU(221): Data Latency=1
    SU(119): Ord  Latency=1 Barrier
  Successors:
    SU(117): Ord  Latency=1 Barrier
SU(226): t1358: i32,i32 = tSBCS t8, t624, t1600:1

    t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 66
  Height             : 181
  Predecessors:
    SU(509): Data Latency=1
    SU(230): Data Latency=1
    SU(227): Data Latency=1 Reg=$cpsr
  Successors:
    SU(115): Data Latency=1
SU(227): t1362: i32,i32 = tRSBS t102

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 65
  Height             : 182
  Predecessors:
    SU(228): Data Latency=1
  Successors:
    SU(226): Data Latency=1 Reg=$cpsr
    SU(231): Data Latency=1
SU(228): t102: i32 = tMUL nsw Register:i32 $cpsr, t100, t101, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 64
  Height             : 183
  Predecessors:
    SU(116): Data Latency=1
    SU(229): Data Latency=1
  Successors:
    SU(227): Data Latency=1
    SU(230): Data Latency=1
SU(229): t101: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 184
  Successors:
    SU(228): Data Latency=1
SU(230): t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 65
  Height             : 182
  Predecessors:
    SU(228): Data Latency=1
  Successors:
    SU(226): Data Latency=1
SU(231): t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 66
  Height             : 180
  Predecessors:
    SU(227): Data Latency=1
    SU(116): Ord  Latency=1 Barrier
  Successors:
    SU(114): Ord  Latency=1 Barrier
SU(232): t1348: i32,i32 = tSBCS t8, t631, t1599:1

    t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 71
  Height             : 176
  Predecessors:
    SU(509): Data Latency=1
    SU(236): Data Latency=1
    SU(233): Data Latency=1 Reg=$cpsr
  Successors:
    SU(112): Data Latency=1
SU(233): t1352: i32,i32 = tRSBS t109

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 70
  Height             : 177
  Predecessors:
    SU(234): Data Latency=1
  Successors:
    SU(232): Data Latency=1 Reg=$cpsr
    SU(237): Data Latency=1
SU(234): t109: i32 = tMUL nsw Register:i32 $cpsr, t107, t108, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 69
  Height             : 178
  Predecessors:
    SU(113): Data Latency=1
    SU(235): Data Latency=1
  Successors:
    SU(233): Data Latency=1
    SU(236): Data Latency=1
SU(235): t108: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 179
  Successors:
    SU(234): Data Latency=1
SU(236): t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 70
  Height             : 177
  Predecessors:
    SU(234): Data Latency=1
  Successors:
    SU(232): Data Latency=1
SU(237): t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 71
  Height             : 175
  Predecessors:
    SU(233): Data Latency=1
    SU(113): Ord  Latency=1 Barrier
  Successors:
    SU(111): Ord  Latency=1 Barrier
SU(238): t1338: i32,i32 = tSBCS t8, t638, t1598:1

    t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 76
  Height             : 171
  Predecessors:
    SU(509): Data Latency=1
    SU(242): Data Latency=1
    SU(239): Data Latency=1 Reg=$cpsr
  Successors:
    SU(109): Data Latency=1
SU(239): t1342: i32,i32 = tRSBS t116

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 75
  Height             : 172
  Predecessors:
    SU(240): Data Latency=1
  Successors:
    SU(238): Data Latency=1 Reg=$cpsr
    SU(243): Data Latency=1
SU(240): t116: i32 = tMUL nsw Register:i32 $cpsr, t114, t115, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 74
  Height             : 173
  Predecessors:
    SU(110): Data Latency=1
    SU(241): Data Latency=1
  Successors:
    SU(239): Data Latency=1
    SU(242): Data Latency=1
SU(241): t115: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 174
  Successors:
    SU(240): Data Latency=1
SU(242): t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 75
  Height             : 172
  Predecessors:
    SU(240): Data Latency=1
  Successors:
    SU(238): Data Latency=1
SU(243): t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 76
  Height             : 170
  Predecessors:
    SU(239): Data Latency=1
    SU(110): Ord  Latency=1 Barrier
  Successors:
    SU(108): Ord  Latency=1 Barrier
SU(244): t1328: i32,i32 = tSBCS t8, t645, t1596:1

    t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 81
  Height             : 166
  Predecessors:
    SU(509): Data Latency=1
    SU(247): Data Latency=1
    SU(245): Data Latency=1 Reg=$cpsr
  Successors:
    SU(106): Data Latency=1
SU(245): t1332: i32,i32 = tRSBS t511

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 80
  Height             : 167
  Predecessors:
    SU(246): Data Latency=1
  Successors:
    SU(244): Data Latency=1 Reg=$cpsr
    SU(248): Data Latency=1
SU(246): t511: i32 = tLSLri Register:i32 $cpsr, t121, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 79
  Height             : 168
  Predecessors:
    SU(107): Data Latency=1
  Successors:
    SU(245): Data Latency=1
    SU(247): Data Latency=1
SU(247): t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 80
  Height             : 167
  Predecessors:
    SU(246): Data Latency=1
  Successors:
    SU(244): Data Latency=1
SU(248): t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 81
  Height             : 165
  Predecessors:
    SU(245): Data Latency=1
    SU(107): Ord  Latency=1 Barrier
  Successors:
    SU(105): Ord  Latency=1 Barrier
SU(249): t1318: i32,i32 = tSBCS t8, t652, t1595:1

    t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 86
  Height             : 161
  Predecessors:
    SU(509): Data Latency=1
    SU(253): Data Latency=1
    SU(250): Data Latency=1 Reg=$cpsr
  Successors:
    SU(103): Data Latency=1
SU(250): t1322: i32,i32 = tRSBS t130

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 85
  Height             : 162
  Predecessors:
    SU(251): Data Latency=1
  Successors:
    SU(249): Data Latency=1 Reg=$cpsr
    SU(254): Data Latency=1
SU(251): t130: i32 = tMUL nsw Register:i32 $cpsr, t128, t129, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 84
  Height             : 163
  Predecessors:
    SU(104): Data Latency=1
    SU(252): Data Latency=1
  Successors:
    SU(250): Data Latency=1
    SU(253): Data Latency=1
SU(252): t129: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 164
  Successors:
    SU(251): Data Latency=1
SU(253): t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 85
  Height             : 162
  Predecessors:
    SU(251): Data Latency=1
  Successors:
    SU(249): Data Latency=1
SU(254): t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 86
  Height             : 160
  Predecessors:
    SU(250): Data Latency=1
    SU(104): Ord  Latency=1 Barrier
  Successors:
    SU(102): Ord  Latency=1 Barrier
SU(255): t1308: i32,i32 = tSBCS t8, t659, t1594:1

    t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 91
  Height             : 156
  Predecessors:
    SU(509): Data Latency=1
    SU(259): Data Latency=1
    SU(256): Data Latency=1 Reg=$cpsr
  Successors:
    SU(100): Data Latency=1
SU(256): t1312: i32,i32 = tRSBS t137

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 90
  Height             : 157
  Predecessors:
    SU(257): Data Latency=1
  Successors:
    SU(255): Data Latency=1 Reg=$cpsr
    SU(260): Data Latency=1
SU(257): t137: i32 = tMUL nsw Register:i32 $cpsr, t135, t136, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 89
  Height             : 158
  Predecessors:
    SU(101): Data Latency=1
    SU(258): Data Latency=1
  Successors:
    SU(256): Data Latency=1
    SU(259): Data Latency=1
SU(258): t136: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 159
  Successors:
    SU(257): Data Latency=1
SU(259): t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 90
  Height             : 157
  Predecessors:
    SU(257): Data Latency=1
  Successors:
    SU(255): Data Latency=1
SU(260): t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 91
  Height             : 155
  Predecessors:
    SU(256): Data Latency=1
    SU(101): Ord  Latency=1 Barrier
  Successors:
    SU(99): Ord  Latency=1 Barrier
SU(261): t1298: i32,i32 = tSBCS t8, t666, t1593:1

    t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 96
  Height             : 151
  Predecessors:
    SU(509): Data Latency=1
    SU(265): Data Latency=1
    SU(262): Data Latency=1 Reg=$cpsr
  Successors:
    SU(97): Data Latency=1
SU(262): t1302: i32,i32 = tRSBS t144

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 95
  Height             : 152
  Predecessors:
    SU(263): Data Latency=1
  Successors:
    SU(261): Data Latency=1 Reg=$cpsr
    SU(266): Data Latency=1
SU(263): t144: i32 = tMUL nsw Register:i32 $cpsr, t142, t143, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 94
  Height             : 153
  Predecessors:
    SU(98): Data Latency=1
    SU(264): Data Latency=1
  Successors:
    SU(262): Data Latency=1
    SU(265): Data Latency=1
SU(264): t143: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 154
  Successors:
    SU(263): Data Latency=1
SU(265): t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 95
  Height             : 152
  Predecessors:
    SU(263): Data Latency=1
  Successors:
    SU(261): Data Latency=1
SU(266): t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 96
  Height             : 150
  Predecessors:
    SU(262): Data Latency=1
    SU(98): Ord  Latency=1 Barrier
  Successors:
    SU(96): Ord  Latency=1 Barrier
SU(267): t1288: i32,i32 = tSBCS t8, t673, t1592:1

    t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 101
  Height             : 146
  Predecessors:
    SU(509): Data Latency=1
    SU(271): Data Latency=1
    SU(268): Data Latency=1 Reg=$cpsr
  Successors:
    SU(94): Data Latency=1
SU(268): t1292: i32,i32 = tRSBS t151

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 100
  Height             : 147
  Predecessors:
    SU(269): Data Latency=1
  Successors:
    SU(267): Data Latency=1 Reg=$cpsr
    SU(272): Data Latency=1
SU(269): t151: i32 = tMUL nsw Register:i32 $cpsr, t149, t150, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 99
  Height             : 148
  Predecessors:
    SU(95): Data Latency=1
    SU(270): Data Latency=1
  Successors:
    SU(268): Data Latency=1
    SU(271): Data Latency=1
SU(270): t150: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 149
  Successors:
    SU(269): Data Latency=1
SU(271): t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 100
  Height             : 147
  Predecessors:
    SU(269): Data Latency=1
  Successors:
    SU(267): Data Latency=1
SU(272): t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 101
  Height             : 145
  Predecessors:
    SU(268): Data Latency=1
    SU(95): Ord  Latency=1 Barrier
  Successors:
    SU(93): Ord  Latency=1 Barrier
SU(273): t1278: i32,i32 = tSBCS t8, t680, t1589:1

    t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 106
  Height             : 141
  Predecessors:
    SU(509): Data Latency=1
    SU(277): Data Latency=1
    SU(274): Data Latency=1 Reg=$cpsr
  Successors:
    SU(91): Data Latency=1
SU(274): t1282: i32,i32 = tRSBS t158

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 105
  Height             : 142
  Predecessors:
    SU(275): Data Latency=1
  Successors:
    SU(273): Data Latency=1 Reg=$cpsr
    SU(278): Data Latency=1
SU(275): t158: i32 = tMUL nsw Register:i32 $cpsr, t156, t157, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 104
  Height             : 143
  Predecessors:
    SU(92): Data Latency=1
    SU(276): Data Latency=1
  Successors:
    SU(274): Data Latency=1
    SU(277): Data Latency=1
SU(276): t157: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 144
  Successors:
    SU(275): Data Latency=1
SU(277): t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 105
  Height             : 142
  Predecessors:
    SU(275): Data Latency=1
  Successors:
    SU(273): Data Latency=1
SU(278): t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 106
  Height             : 140
  Predecessors:
    SU(274): Data Latency=1
    SU(92): Ord  Latency=1 Barrier
  Successors:
    SU(90): Ord  Latency=1 Barrier
SU(279): t687: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 133
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(88): Ord  Latency=1 Barrier
    SU(346): Data Latency=1
SU(280): t694: ch = TokenFactor t692:1, t693:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(282): Ord  Latency=1 Barrier
    SU(281): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 132
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(280): Ord  Latency=1 Barrier
    SU(344): Data Latency=1
SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 132
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(280): Ord  Latency=1 Barrier
    SU(344): Data Latency=1
SU(283): t720: ch = TokenFactor t718:1, t719:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(285): Ord  Latency=1 Barrier
    SU(284): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(284): t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(283): Ord  Latency=1 Barrier
    SU(351): Data Latency=1
SU(285): t718: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(283): Ord  Latency=1 Barrier
    SU(352): Data Latency=1
SU(286): t723: ch = TokenFactor t721:1, t722:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(288): Ord  Latency=1 Barrier
    SU(287): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(286): Ord  Latency=1 Barrier
    SU(351): Data Latency=1
SU(288): t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(286): Ord  Latency=1 Barrier
    SU(352): Data Latency=1
SU(289): t728: ch = TokenFactor t726:1, t727:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(291): Ord  Latency=1 Barrier
    SU(290): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(290): t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(289): Ord  Latency=1 Barrier
    SU(353): Data Latency=1
SU(291): t726: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(289): Ord  Latency=1 Barrier
    SU(354): Data Latency=1
SU(292): t731: ch = TokenFactor t729:1, t730:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(294): Ord  Latency=1 Barrier
    SU(293): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(293): t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(292): Ord  Latency=1 Barrier
    SU(356): Data Latency=1
SU(294): t729: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 137
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(292): Ord  Latency=1 Barrier
    SU(355): Data Latency=1
SU(295): t734: ch = TokenFactor t732:1, t733:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(297): Ord  Latency=1 Barrier
    SU(296): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(295): Ord  Latency=1 Barrier
    SU(356): Data Latency=1
SU(297): t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 137
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(295): Ord  Latency=1 Barrier
    SU(355): Data Latency=1
SU(298): t743: ch = TokenFactor t741:1, t742:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(300): Ord  Latency=1 Barrier
    SU(299): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 133
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(298): Ord  Latency=1 Barrier
    SU(349): Data Latency=1
SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 133
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(298): Ord  Latency=1 Barrier
    SU(377): Data Latency=1
SU(301): t748: ch = TokenFactor t746:1, t747:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(303): Ord  Latency=1 Barrier
    SU(302): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(302): t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(301): Ord  Latency=1 Barrier
    SU(359): Data Latency=1
SU(303): t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(301): Ord  Latency=1 Barrier
    SU(359): Data Latency=1
SU(304): t751: ch = TokenFactor t749:1, t750:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(306): Ord  Latency=1 Barrier
    SU(305): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(304): Ord  Latency=1 Barrier
    SU(359): Data Latency=1
SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(304): Ord  Latency=1 Barrier
    SU(359): Data Latency=1
SU(307): t774: ch = TokenFactor t772:1, t773:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(309): Ord  Latency=1 Barrier
    SU(308): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(308): t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(307): Ord  Latency=1 Barrier
    SU(362): Data Latency=1
SU(309): t772: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 137
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(307): Ord  Latency=1 Barrier
    SU(363): Data Latency=1
SU(310): t777: ch = TokenFactor t775:1, t776:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(312): Ord  Latency=1 Barrier
    SU(311): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(311): t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 138
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(310): Ord  Latency=1 Barrier
    SU(364): Data Latency=1
SU(312): t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 138
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(310): Ord  Latency=1 Barrier
    SU(364): Data Latency=1
SU(313): t780: ch = TokenFactor t778:1, t779:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(315): Ord  Latency=1 Barrier
    SU(314): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 138
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(313): Ord  Latency=1 Barrier
    SU(364): Data Latency=1
SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 138
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(313): Ord  Latency=1 Barrier
    SU(364): Data Latency=1
SU(316): t803: ch = TokenFactor t801:1, t802:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(318): Ord  Latency=1 Barrier
    SU(317): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(317): t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 138
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(316): Ord  Latency=1 Barrier
    SU(368): Data Latency=1
SU(318): t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 138
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(316): Ord  Latency=1 Barrier
    SU(368): Data Latency=1
SU(319): t806: ch = TokenFactor t804:1, t805:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(321): Ord  Latency=1 Barrier
    SU(320): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(320): t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 139
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(319): Ord  Latency=1 Barrier
    SU(369): Data Latency=1
SU(321): t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 139
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(319): Ord  Latency=1 Barrier
    SU(369): Data Latency=1
SU(322): t809: ch = TokenFactor t807:1, t808:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(324): Ord  Latency=1 Barrier
    SU(323): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 139
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(322): Ord  Latency=1 Barrier
    SU(369): Data Latency=1
SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 139
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(322): Ord  Latency=1 Barrier
    SU(369): Data Latency=1
SU(325): t850: ch = TokenFactor t848:1, t849:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(327): Ord  Latency=1 Barrier
    SU(326): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(325): Ord  Latency=1 Barrier
    SU(366): Data Latency=1
SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 137
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(325): Ord  Latency=1 Barrier
    SU(367): Data Latency=1
SU(328): t859: ch = TokenFactor t857:1, t858:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(330): Ord  Latency=1 Barrier
    SU(329): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(329): t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 134
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(328): Ord  Latency=1 Barrier
    SU(372): Data Latency=1
SU(330): t857: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 134
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(328): Ord  Latency=1 Barrier
    SU(382): Data Latency=1
SU(331): t862: ch = TokenFactor t860:1, t861:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(333): Ord  Latency=1 Barrier
    SU(332): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(332): t861: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(331): Ord  Latency=1 Barrier
    SU(373): Data Latency=1
SU(333): t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 135
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(331): Ord  Latency=1 Barrier
    SU(383): Data Latency=1
SU(334): t865: ch = TokenFactor t863:1, t864:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(336): Ord  Latency=1 Barrier
    SU(335): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(335): t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(334): Ord  Latency=1 Barrier
    SU(374): Data Latency=1
SU(336): t863: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(334): Ord  Latency=1 Barrier
    SU(384): Data Latency=1
SU(337): t868: ch = TokenFactor t866:1, t867:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 109
  Height             : 128
  Predecessors:
    SU(339): Ord  Latency=1 Barrier
    SU(338): Ord  Latency=1 Barrier
  Successors:
    SU(87): Ord  Latency=0 Barrier
SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(337): Ord  Latency=1 Barrier
    SU(374): Data Latency=1
SU(339): t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 136
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(337): Ord  Latency=1 Barrier
    SU(384): Data Latency=1
SU(340): t164: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 131
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(87): Ord  Latency=1 Barrier
    SU(386): Data Latency=1
SU(341): t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 108
  Height             : 131
  Predecessors:
    SU(90): Ord  Latency=0 Barrier
  Successors:
    SU(87): Ord  Latency=1 Barrier
    SU(386): Data Latency=1
SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2

  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 118
  Height             : 129
  Predecessors:
    SU(343): Data Latency=1
    SU(375): Data Latency=1
    SU(385): Data Latency=1
    SU(387): Ord  Latency=1 Barrier
    SU(386): Data Latency=1
  Successors:
    SU(86): Data Latency=1
SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 117
  Height             : 130
  Predecessors:
    SU(348): Data Latency=1
    SU(344): Data Latency=1
  Successors:
    SU(342): Data Latency=1
SU(344): t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

    t703: ch,glue = CopyToReg t700:1, Register:i32 $r0, t692

    t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

    t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

    t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

    t709: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707, t707:1

    t710: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t709:1, t709:2

    t711: i32,ch,glue = CopyFromReg t710:1, Register:i32 $r0, t710:2

  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 131
  Predecessors:
    SU(345): Data Latency=1
    SU(346): Data Latency=1
    SU(281): Data Latency=1
    SU(347): Ord  Latency=1 Barrier
    SU(282): Data Latency=1
  Successors:
    SU(343): Data Latency=1
    SU(375): Data Latency=1
SU(345): t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 132
  Predecessors:
    SU(89): Data Latency=1
  Successors:
    SU(344): Data Latency=1
SU(346): t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 132
  Predecessors:
    SU(279): Data Latency=1
  Successors:
    SU(344): Data Latency=1
SU(347): t700: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 132
  Successors:
    SU(344): Ord  Latency=1 Barrier
SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 116
  Height             : 131
  Predecessors:
    SU(357): Data Latency=1
    SU(349): Data Latency=1
  Successors:
    SU(343): Data Latency=1
SU(349): t745: i32 = tEOR Register:i32 $cpsr, t742, t740, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 113
  Height             : 132
  Predecessors:
    SU(299): Data Latency=1
    SU(350): Data Latency=1
  Successors:
    SU(348): Data Latency=1
SU(350): t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 112
  Height             : 133
  Predecessors:
    SU(353): Data Latency=1
    SU(351): Data Latency=1
  Successors:
    SU(349): Data Latency=1
SU(351): t1256: i32,i32 = tADCS t722, t719, t1585:1

    t1585: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1269:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 134
  Predecessors:
    SU(287): Data Latency=1
    SU(284): Data Latency=1
    SU(352): Data Latency=1 Reg=$cpsr
  Successors:
    SU(350): Data Latency=1
SU(352): t1269: i32,i32 = tADDSrr t721, t718

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 135
  Predecessors:
    SU(288): Data Latency=1
    SU(285): Data Latency=1
  Successors:
    SU(351): Data Latency=1 Reg=$cpsr
    SU(378): Data Latency=1
SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 111
  Height             : 134
  Predecessors:
    SU(356): Data Latency=1
    SU(290): Data Latency=1
    SU(354): Data Latency=1 Reg=$cpsr
  Successors:
    SU(350): Data Latency=1
SU(354): t1265: i32,i32 = tSUBSrr t1272, t726

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 135
  Predecessors:
    SU(355): Data Latency=1
    SU(291): Data Latency=1
  Successors:
    SU(353): Data Latency=1 Reg=$cpsr
    SU(378): Data Latency=1
SU(355): t1272: i32,i32 = tSUBSrr t732, t729

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 136
  Predecessors:
    SU(297): Data Latency=1
    SU(294): Data Latency=1
  Successors:
    SU(354): Data Latency=1
    SU(356): Data Latency=1 Reg=$cpsr
SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 135
  Predecessors:
    SU(296): Data Latency=1
    SU(293): Data Latency=1
    SU(355): Data Latency=1 Reg=$cpsr
  Successors:
    SU(353): Data Latency=1
SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 115
  Height             : 132
  Predecessors:
    SU(372): Data Latency=1
    SU(358): Data Latency=1
  Successors:
    SU(348): Data Latency=1
SU(358): t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 114
  Height             : 133
  Predecessors:
    SU(361): Data Latency=1
    SU(359): Data Latency=1
  Successors:
    SU(357): Data Latency=1
SU(359): t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

    t759: ch,glue = CopyToReg t757:1, Register:i32 $r0, t749

    t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

    t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

    t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

    t764: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762, t762:1

    t765: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t764:1, t764:2

    t766: i32,ch,glue = CopyFromReg t765:1, Register:i32 $r0, t765:2

  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 134
  Predecessors:
    SU(302): Data Latency=1
    SU(303): Data Latency=1
    SU(305): Data Latency=1
    SU(360): Ord  Latency=1 Barrier
    SU(306): Data Latency=1
  Successors:
    SU(358): Data Latency=1
    SU(380): Data Latency=1
SU(360): t757: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 135
  Successors:
    SU(359): Ord  Latency=1 Barrier
SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 113
  Height             : 134
  Predecessors:
    SU(366): Data Latency=1
    SU(362): Data Latency=1
  Successors:
    SU(358): Data Latency=1
SU(362): t1243: i32,i32 = tADCS t794, t773, t1583:1

    t1583: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1246:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 111
  Height             : 135
  Predecessors:
    SU(364): Data Latency=1
    SU(308): Data Latency=1
    SU(363): Data Latency=1 Reg=$cpsr
  Successors:
    SU(361): Data Latency=1
SU(363): t1246: i32,i32 = tADDSrr t793, t772

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 136
  Predecessors:
    SU(364): Data Latency=1
    SU(309): Data Latency=1
  Successors:
    SU(362): Data Latency=1 Reg=$cpsr
    SU(381): Data Latency=1
SU(364): t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

    t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778

    t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

    t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

    t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

    t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1

    t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2

    t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2

  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 137
  Predecessors:
    SU(311): Data Latency=1
    SU(312): Data Latency=1
    SU(314): Data Latency=1
    SU(365): Ord  Latency=1 Barrier
    SU(315): Data Latency=1
  Successors:
    SU(362): Data Latency=1
    SU(363): Data Latency=1
SU(365): t785: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 138
  Successors:
    SU(364): Ord  Latency=1 Barrier
SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 112
  Height             : 135
  Predecessors:
    SU(326): Data Latency=1
    SU(368): Data Latency=1
    SU(367): Data Latency=1 Reg=$cpsr
  Successors:
    SU(361): Data Latency=1
SU(367): t1239: i32,i32 = tADDSrr t848, t842

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 111
  Height             : 136
  Predecessors:
    SU(327): Data Latency=1
    SU(368): Data Latency=1
  Successors:
    SU(366): Data Latency=1 Reg=$cpsr
    SU(381): Data Latency=1
SU(368): t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

    t836: ch,glue = CopyToReg t834:1, Register:i32 $r0, t824

    t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

    t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

    t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

    t840: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839, t839:1

    t841: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t840:1, t840:2

    t842: i32,ch,glue = CopyFromReg t841:1, Register:i32 $r0, t841:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 137
  Predecessors:
    SU(317): Data Latency=1
    SU(318): Data Latency=1
    SU(369): Data Latency=1
    SU(371): Ord  Latency=1 Barrier
  Successors:
    SU(366): Data Latency=1
    SU(367): Data Latency=1
SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2

  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 138
  Predecessors:
    SU(320): Data Latency=1
    SU(321): Data Latency=1
    SU(323): Data Latency=1
    SU(370): Ord  Latency=1 Barrier
    SU(324): Data Latency=1
  Successors:
    SU(368): Data Latency=1
SU(370): t815: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 139
  Successors:
    SU(369): Ord  Latency=1 Barrier
SU(371): t834: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 138
  Successors:
    SU(368): Ord  Latency=1 Barrier
SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 111
  Height             : 133
  Predecessors:
    SU(373): Data Latency=1
    SU(329): Data Latency=1
  Successors:
    SU(357): Data Latency=1
SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 134
  Predecessors:
    SU(374): Data Latency=1
    SU(332): Data Latency=1
  Successors:
    SU(372): Data Latency=1
SU(374): t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 135
  Predecessors:
    SU(338): Data Latency=1
    SU(335): Data Latency=1
  Successors:
    SU(373): Data Latency=1
SU(375): t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 116
  Height             : 130
  Predecessors:
    SU(376): Data Latency=1
    SU(344): Data Latency=1
  Successors:
    SU(342): Data Latency=1
SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 115
  Height             : 131
  Predecessors:
    SU(379): Data Latency=1
    SU(377): Data Latency=1
  Successors:
    SU(375): Data Latency=1
SU(377): t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 112
  Height             : 132
  Predecessors:
    SU(300): Data Latency=1
    SU(378): Data Latency=1
  Successors:
    SU(376): Data Latency=1
SU(378): t739: i32 = tAND Register:i32 $cpsr, t1265, t1269, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 111
  Height             : 133
  Predecessors:
    SU(354): Data Latency=1
    SU(352): Data Latency=1
  Successors:
    SU(377): Data Latency=1
SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 114
  Height             : 132
  Predecessors:
    SU(382): Data Latency=1
    SU(380): Data Latency=1
  Successors:
    SU(376): Data Latency=1
SU(380): t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 113
  Height             : 133
  Predecessors:
    SU(381): Data Latency=1
    SU(359): Data Latency=1
  Successors:
    SU(379): Data Latency=1
SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 112
  Height             : 134
  Predecessors:
    SU(367): Data Latency=1
    SU(363): Data Latency=1
  Successors:
    SU(380): Data Latency=1
SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 111
  Height             : 133
  Predecessors:
    SU(383): Data Latency=1
    SU(330): Data Latency=1
  Successors:
    SU(379): Data Latency=1
SU(383): t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 110
  Height             : 134
  Predecessors:
    SU(384): Data Latency=1
    SU(333): Data Latency=1
  Successors:
    SU(382): Data Latency=1
SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 135
  Predecessors:
    SU(339): Data Latency=1
    SU(336): Data Latency=1
  Successors:
    SU(383): Data Latency=1
SU(385): t9: i32 = IMPLICIT_DEF

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 130
  Successors:
    SU(342): Data Latency=1
SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 109
  Height             : 130
  Predecessors:
    SU(341): Data Latency=1
    SU(340): Data Latency=1
  Successors:
    SU(342): Data Latency=1
SU(387): t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 130
  Successors:
    SU(342): Ord  Latency=1 Barrier
SU(388): t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 120
  Height             : 126
  Predecessors:
    SU(86): Ord  Latency=1 Barrier
  Successors:
    SU(83): Data Latency=1
    SU(393): Ord  Latency=1 Barrier
SU(389): t1488: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 21
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 123
  Successors:
    SU(2): Data Latency=1
    SU(6): Data Latency=1
    SU(10): Data Latency=1
    SU(14): Data Latency=1
    SU(18): Data Latency=1
    SU(22): Data Latency=1
    SU(26): Data Latency=1
    SU(30): Data Latency=1
    SU(34): Data Latency=1
    SU(38): Data Latency=1
    SU(42): Data Latency=1
    SU(46): Data Latency=1
    SU(50): Data Latency=1
    SU(54): Data Latency=1
    SU(58): Data Latency=1
    SU(62): Data Latency=1
    SU(66): Data Latency=1
    SU(70): Data Latency=1
    SU(74): Data Latency=1
    SU(78): Data Latency=1
    SU(82): Data Latency=1
SU(390): t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 124
  Height             : 123
  Predecessors:
    SU(391): Ord  Latency=0 Barrier
  Successors:
    SU(82): Ord  Latency=1 Barrier
SU(391): t906: ch = TokenFactor t904, t905

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 124
  Height             : 123
  Predecessors:
    SU(394): Ord  Latency=1 Barrier
    SU(392): Ord  Latency=1 Barrier
  Successors:
    SU(390): Ord  Latency=0 Barrier
SU(392): t905: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1229, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t901

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 123
  Height             : 124
  Predecessors:
    SU(83): Data Latency=1
    SU(393): Ord  Latency=0 Barrier
  Successors:
    SU(391): Ord  Latency=1 Barrier
SU(393): t901: ch = TokenFactor t899:1, t900:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 121
  Height             : 124
  Predecessors:
    SU(85): Ord  Latency=1 Barrier
    SU(388): Ord  Latency=1 Barrier
  Successors:
    SU(392): Ord  Latency=0 Barrier
    SU(394): Ord  Latency=0 Barrier
SU(394): t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 122
  Height             : 124
  Predecessors:
    SU(84): Data Latency=1
    SU(393): Ord  Latency=0 Barrier
  Successors:
    SU(391): Ord  Latency=1 Barrier
SU(395): t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 126
  Height             : 120
  Predecessors:
    SU(82): Ord  Latency=1 Barrier
  Successors:
    SU(79): Data Latency=1
    SU(399): Ord  Latency=1 Barrier
SU(396): t243: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t914

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 130
  Height             : 117
  Predecessors:
    SU(397): Ord  Latency=0 Barrier
  Successors:
    SU(78): Ord  Latency=1 Barrier
SU(397): t914: ch = TokenFactor t912, t913

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 130
  Height             : 117
  Predecessors:
    SU(400): Ord  Latency=1 Barrier
    SU(398): Ord  Latency=1 Barrier
  Successors:
    SU(396): Ord  Latency=0 Barrier
SU(398): t913: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1222, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t909

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 129
  Height             : 118
  Predecessors:
    SU(79): Data Latency=1
    SU(399): Ord  Latency=0 Barrier
  Successors:
    SU(397): Ord  Latency=1 Barrier
SU(399): t909: ch = TokenFactor t907:1, t908:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 127
  Height             : 118
  Predecessors:
    SU(81): Ord  Latency=1 Barrier
    SU(395): Ord  Latency=1 Barrier
  Successors:
    SU(398): Ord  Latency=0 Barrier
    SU(400): Ord  Latency=0 Barrier
SU(400): t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 128
  Height             : 118
  Predecessors:
    SU(80): Data Latency=1
    SU(399): Ord  Latency=0 Barrier
  Successors:
    SU(397): Ord  Latency=1 Barrier
SU(401): t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 132
  Height             : 114
  Predecessors:
    SU(78): Ord  Latency=1 Barrier
  Successors:
    SU(75): Data Latency=1
    SU(405): Ord  Latency=1 Barrier
SU(402): t256: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t922

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 136
  Height             : 111
  Predecessors:
    SU(403): Ord  Latency=0 Barrier
  Successors:
    SU(74): Ord  Latency=1 Barrier
SU(403): t922: ch = TokenFactor t920, t921

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 136
  Height             : 111
  Predecessors:
    SU(406): Ord  Latency=1 Barrier
    SU(404): Ord  Latency=1 Barrier
  Successors:
    SU(402): Ord  Latency=0 Barrier
SU(404): t921: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1215, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t917

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 135
  Height             : 112
  Predecessors:
    SU(75): Data Latency=1
    SU(405): Ord  Latency=0 Barrier
  Successors:
    SU(403): Ord  Latency=1 Barrier
SU(405): t917: ch = TokenFactor t915:1, t916:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 133
  Height             : 112
  Predecessors:
    SU(77): Ord  Latency=1 Barrier
    SU(401): Ord  Latency=1 Barrier
  Successors:
    SU(404): Ord  Latency=0 Barrier
    SU(406): Ord  Latency=0 Barrier
SU(406): t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 134
  Height             : 112
  Predecessors:
    SU(76): Data Latency=1
    SU(405): Ord  Latency=0 Barrier
  Successors:
    SU(403): Ord  Latency=1 Barrier
SU(407): t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 138
  Height             : 108
  Predecessors:
    SU(74): Ord  Latency=1 Barrier
  Successors:
    SU(71): Data Latency=1
    SU(411): Ord  Latency=1 Barrier
SU(408): t269: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t930

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 142
  Height             : 105
  Predecessors:
    SU(409): Ord  Latency=0 Barrier
  Successors:
    SU(70): Ord  Latency=1 Barrier
SU(409): t930: ch = TokenFactor t928, t929

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 142
  Height             : 105
  Predecessors:
    SU(412): Ord  Latency=1 Barrier
    SU(410): Ord  Latency=1 Barrier
  Successors:
    SU(408): Ord  Latency=0 Barrier
SU(410): t929: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1208, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t925

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 141
  Height             : 106
  Predecessors:
    SU(71): Data Latency=1
    SU(411): Ord  Latency=0 Barrier
  Successors:
    SU(409): Ord  Latency=1 Barrier
SU(411): t925: ch = TokenFactor t923:1, t924:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 139
  Height             : 106
  Predecessors:
    SU(73): Ord  Latency=1 Barrier
    SU(407): Ord  Latency=1 Barrier
  Successors:
    SU(410): Ord  Latency=0 Barrier
    SU(412): Ord  Latency=0 Barrier
SU(412): t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 140
  Height             : 106
  Predecessors:
    SU(72): Data Latency=1
    SU(411): Ord  Latency=0 Barrier
  Successors:
    SU(409): Ord  Latency=1 Barrier
SU(413): t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 144
  Height             : 102
  Predecessors:
    SU(70): Ord  Latency=1 Barrier
  Successors:
    SU(67): Data Latency=1
    SU(417): Ord  Latency=1 Barrier
SU(414): t282: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t938

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 148
  Height             : 99
  Predecessors:
    SU(415): Ord  Latency=0 Barrier
  Successors:
    SU(66): Ord  Latency=1 Barrier
SU(415): t938: ch = TokenFactor t936, t937

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 148
  Height             : 99
  Predecessors:
    SU(418): Ord  Latency=1 Barrier
    SU(416): Ord  Latency=1 Barrier
  Successors:
    SU(414): Ord  Latency=0 Barrier
SU(416): t937: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1201, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t933

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 147
  Height             : 100
  Predecessors:
    SU(67): Data Latency=1
    SU(417): Ord  Latency=0 Barrier
  Successors:
    SU(415): Ord  Latency=1 Barrier
SU(417): t933: ch = TokenFactor t931:1, t932:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 145
  Height             : 100
  Predecessors:
    SU(69): Ord  Latency=1 Barrier
    SU(413): Ord  Latency=1 Barrier
  Successors:
    SU(416): Ord  Latency=0 Barrier
    SU(418): Ord  Latency=0 Barrier
SU(418): t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 146
  Height             : 100
  Predecessors:
    SU(68): Data Latency=1
    SU(417): Ord  Latency=0 Barrier
  Successors:
    SU(415): Ord  Latency=1 Barrier
SU(419): t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 150
  Height             : 96
  Predecessors:
    SU(66): Ord  Latency=1 Barrier
  Successors:
    SU(63): Data Latency=1
    SU(423): Ord  Latency=1 Barrier
SU(420): t295: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t946

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 154
  Height             : 93
  Predecessors:
    SU(421): Ord  Latency=0 Barrier
  Successors:
    SU(62): Ord  Latency=1 Barrier
SU(421): t946: ch = TokenFactor t944, t945

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 154
  Height             : 93
  Predecessors:
    SU(424): Ord  Latency=1 Barrier
    SU(422): Ord  Latency=1 Barrier
  Successors:
    SU(420): Ord  Latency=0 Barrier
SU(422): t945: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1194, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t941

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 153
  Height             : 94
  Predecessors:
    SU(63): Data Latency=1
    SU(423): Ord  Latency=0 Barrier
  Successors:
    SU(421): Ord  Latency=1 Barrier
SU(423): t941: ch = TokenFactor t939:1, t940:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 151
  Height             : 94
  Predecessors:
    SU(65): Ord  Latency=1 Barrier
    SU(419): Ord  Latency=1 Barrier
  Successors:
    SU(422): Ord  Latency=0 Barrier
    SU(424): Ord  Latency=0 Barrier
SU(424): t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 152
  Height             : 94
  Predecessors:
    SU(64): Data Latency=1
    SU(423): Ord  Latency=0 Barrier
  Successors:
    SU(421): Ord  Latency=1 Barrier
SU(425): t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 156
  Height             : 90
  Predecessors:
    SU(62): Ord  Latency=1 Barrier
  Successors:
    SU(59): Data Latency=1
    SU(429): Ord  Latency=1 Barrier
SU(426): t308: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t954

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 160
  Height             : 87
  Predecessors:
    SU(427): Ord  Latency=0 Barrier
  Successors:
    SU(58): Ord  Latency=1 Barrier
SU(427): t954: ch = TokenFactor t952, t953

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 160
  Height             : 87
  Predecessors:
    SU(430): Ord  Latency=1 Barrier
    SU(428): Ord  Latency=1 Barrier
  Successors:
    SU(426): Ord  Latency=0 Barrier
SU(428): t953: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1187, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t949

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 159
  Height             : 88
  Predecessors:
    SU(59): Data Latency=1
    SU(429): Ord  Latency=0 Barrier
  Successors:
    SU(427): Ord  Latency=1 Barrier
SU(429): t949: ch = TokenFactor t947:1, t948:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 157
  Height             : 88
  Predecessors:
    SU(61): Ord  Latency=1 Barrier
    SU(425): Ord  Latency=1 Barrier
  Successors:
    SU(428): Ord  Latency=0 Barrier
    SU(430): Ord  Latency=0 Barrier
SU(430): t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 158
  Height             : 88
  Predecessors:
    SU(60): Data Latency=1
    SU(429): Ord  Latency=0 Barrier
  Successors:
    SU(427): Ord  Latency=1 Barrier
SU(431): t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 162
  Height             : 84
  Predecessors:
    SU(58): Ord  Latency=1 Barrier
  Successors:
    SU(55): Data Latency=1
    SU(435): Ord  Latency=1 Barrier
SU(432): t321: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t962

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 166
  Height             : 81
  Predecessors:
    SU(433): Ord  Latency=0 Barrier
  Successors:
    SU(54): Ord  Latency=1 Barrier
SU(433): t962: ch = TokenFactor t960, t961

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 166
  Height             : 81
  Predecessors:
    SU(436): Ord  Latency=1 Barrier
    SU(434): Ord  Latency=1 Barrier
  Successors:
    SU(432): Ord  Latency=0 Barrier
SU(434): t961: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1180, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t957

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 165
  Height             : 82
  Predecessors:
    SU(55): Data Latency=1
    SU(435): Ord  Latency=0 Barrier
  Successors:
    SU(433): Ord  Latency=1 Barrier
SU(435): t957: ch = TokenFactor t955:1, t956:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 163
  Height             : 82
  Predecessors:
    SU(57): Ord  Latency=1 Barrier
    SU(431): Ord  Latency=1 Barrier
  Successors:
    SU(434): Ord  Latency=0 Barrier
    SU(436): Ord  Latency=0 Barrier
SU(436): t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 164
  Height             : 82
  Predecessors:
    SU(56): Data Latency=1
    SU(435): Ord  Latency=0 Barrier
  Successors:
    SU(433): Ord  Latency=1 Barrier
SU(437): t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 168
  Height             : 78
  Predecessors:
    SU(54): Ord  Latency=1 Barrier
  Successors:
    SU(51): Data Latency=1
    SU(441): Ord  Latency=1 Barrier
SU(438): t334: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t970

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 172
  Height             : 75
  Predecessors:
    SU(439): Ord  Latency=0 Barrier
  Successors:
    SU(50): Ord  Latency=1 Barrier
SU(439): t970: ch = TokenFactor t968, t969

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 172
  Height             : 75
  Predecessors:
    SU(442): Ord  Latency=1 Barrier
    SU(440): Ord  Latency=1 Barrier
  Successors:
    SU(438): Ord  Latency=0 Barrier
SU(440): t969: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1173, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t965

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 171
  Height             : 76
  Predecessors:
    SU(51): Data Latency=1
    SU(441): Ord  Latency=0 Barrier
  Successors:
    SU(439): Ord  Latency=1 Barrier
SU(441): t965: ch = TokenFactor t963:1, t964:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 169
  Height             : 76
  Predecessors:
    SU(53): Ord  Latency=1 Barrier
    SU(437): Ord  Latency=1 Barrier
  Successors:
    SU(440): Ord  Latency=0 Barrier
    SU(442): Ord  Latency=0 Barrier
SU(442): t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 170
  Height             : 76
  Predecessors:
    SU(52): Data Latency=1
    SU(441): Ord  Latency=0 Barrier
  Successors:
    SU(439): Ord  Latency=1 Barrier
SU(443): t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 174
  Height             : 72
  Predecessors:
    SU(50): Ord  Latency=1 Barrier
  Successors:
    SU(47): Data Latency=1
    SU(447): Ord  Latency=1 Barrier
SU(444): t347: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t978

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 178
  Height             : 69
  Predecessors:
    SU(445): Ord  Latency=0 Barrier
  Successors:
    SU(46): Ord  Latency=1 Barrier
SU(445): t978: ch = TokenFactor t976, t977

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 178
  Height             : 69
  Predecessors:
    SU(448): Ord  Latency=1 Barrier
    SU(446): Ord  Latency=1 Barrier
  Successors:
    SU(444): Ord  Latency=0 Barrier
SU(446): t977: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1166, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t973

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 177
  Height             : 70
  Predecessors:
    SU(47): Data Latency=1
    SU(447): Ord  Latency=0 Barrier
  Successors:
    SU(445): Ord  Latency=1 Barrier
SU(447): t973: ch = TokenFactor t971:1, t972:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 175
  Height             : 70
  Predecessors:
    SU(49): Ord  Latency=1 Barrier
    SU(443): Ord  Latency=1 Barrier
  Successors:
    SU(446): Ord  Latency=0 Barrier
    SU(448): Ord  Latency=0 Barrier
SU(448): t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 176
  Height             : 70
  Predecessors:
    SU(48): Data Latency=1
    SU(447): Ord  Latency=0 Barrier
  Successors:
    SU(445): Ord  Latency=1 Barrier
SU(449): t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 180
  Height             : 66
  Predecessors:
    SU(46): Ord  Latency=1 Barrier
  Successors:
    SU(43): Data Latency=1
    SU(453): Ord  Latency=1 Barrier
SU(450): t360: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t986

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 184
  Height             : 63
  Predecessors:
    SU(451): Ord  Latency=0 Barrier
  Successors:
    SU(42): Ord  Latency=1 Barrier
SU(451): t986: ch = TokenFactor t984, t985

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 184
  Height             : 63
  Predecessors:
    SU(454): Ord  Latency=1 Barrier
    SU(452): Ord  Latency=1 Barrier
  Successors:
    SU(450): Ord  Latency=0 Barrier
SU(452): t985: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1159, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t981

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 183
  Height             : 64
  Predecessors:
    SU(43): Data Latency=1
    SU(453): Ord  Latency=0 Barrier
  Successors:
    SU(451): Ord  Latency=1 Barrier
SU(453): t981: ch = TokenFactor t979:1, t980:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 181
  Height             : 64
  Predecessors:
    SU(45): Ord  Latency=1 Barrier
    SU(449): Ord  Latency=1 Barrier
  Successors:
    SU(452): Ord  Latency=0 Barrier
    SU(454): Ord  Latency=0 Barrier
SU(454): t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 182
  Height             : 64
  Predecessors:
    SU(44): Data Latency=1
    SU(453): Ord  Latency=0 Barrier
  Successors:
    SU(451): Ord  Latency=1 Barrier
SU(455): t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 186
  Height             : 60
  Predecessors:
    SU(42): Ord  Latency=1 Barrier
  Successors:
    SU(39): Data Latency=1
    SU(459): Ord  Latency=1 Barrier
SU(456): t373: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t994

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 190
  Height             : 57
  Predecessors:
    SU(457): Ord  Latency=0 Barrier
  Successors:
    SU(38): Ord  Latency=1 Barrier
SU(457): t994: ch = TokenFactor t992, t993

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 190
  Height             : 57
  Predecessors:
    SU(460): Ord  Latency=1 Barrier
    SU(458): Ord  Latency=1 Barrier
  Successors:
    SU(456): Ord  Latency=0 Barrier
SU(458): t993: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1152, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t989

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 189
  Height             : 58
  Predecessors:
    SU(39): Data Latency=1
    SU(459): Ord  Latency=0 Barrier
  Successors:
    SU(457): Ord  Latency=1 Barrier
SU(459): t989: ch = TokenFactor t987:1, t988:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 187
  Height             : 58
  Predecessors:
    SU(41): Ord  Latency=1 Barrier
    SU(455): Ord  Latency=1 Barrier
  Successors:
    SU(458): Ord  Latency=0 Barrier
    SU(460): Ord  Latency=0 Barrier
SU(460): t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 188
  Height             : 58
  Predecessors:
    SU(40): Data Latency=1
    SU(459): Ord  Latency=0 Barrier
  Successors:
    SU(457): Ord  Latency=1 Barrier
SU(461): t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 192
  Height             : 54
  Predecessors:
    SU(38): Ord  Latency=1 Barrier
  Successors:
    SU(35): Data Latency=1
    SU(465): Ord  Latency=1 Barrier
SU(462): t386: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1002

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 196
  Height             : 51
  Predecessors:
    SU(463): Ord  Latency=0 Barrier
  Successors:
    SU(34): Ord  Latency=1 Barrier
SU(463): t1002: ch = TokenFactor t1000, t1001

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 196
  Height             : 51
  Predecessors:
    SU(466): Ord  Latency=1 Barrier
    SU(464): Ord  Latency=1 Barrier
  Successors:
    SU(462): Ord  Latency=0 Barrier
SU(464): t1001: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1145, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t997

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 195
  Height             : 52
  Predecessors:
    SU(35): Data Latency=1
    SU(465): Ord  Latency=0 Barrier
  Successors:
    SU(463): Ord  Latency=1 Barrier
SU(465): t997: ch = TokenFactor t995:1, t996:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 193
  Height             : 52
  Predecessors:
    SU(37): Ord  Latency=1 Barrier
    SU(461): Ord  Latency=1 Barrier
  Successors:
    SU(464): Ord  Latency=0 Barrier
    SU(466): Ord  Latency=0 Barrier
SU(466): t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 194
  Height             : 52
  Predecessors:
    SU(36): Data Latency=1
    SU(465): Ord  Latency=0 Barrier
  Successors:
    SU(463): Ord  Latency=1 Barrier
SU(467): t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 198
  Height             : 48
  Predecessors:
    SU(34): Ord  Latency=1 Barrier
  Successors:
    SU(31): Data Latency=1
    SU(471): Ord  Latency=1 Barrier
SU(468): t399: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1010

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 202
  Height             : 45
  Predecessors:
    SU(469): Ord  Latency=0 Barrier
  Successors:
    SU(30): Ord  Latency=1 Barrier
SU(469): t1010: ch = TokenFactor t1008, t1009

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 202
  Height             : 45
  Predecessors:
    SU(472): Ord  Latency=1 Barrier
    SU(470): Ord  Latency=1 Barrier
  Successors:
    SU(468): Ord  Latency=0 Barrier
SU(470): t1009: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1138, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 201
  Height             : 46
  Predecessors:
    SU(31): Data Latency=1
    SU(471): Ord  Latency=0 Barrier
  Successors:
    SU(469): Ord  Latency=1 Barrier
SU(471): t1005: ch = TokenFactor t1003:1, t1004:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 199
  Height             : 46
  Predecessors:
    SU(33): Ord  Latency=1 Barrier
    SU(467): Ord  Latency=1 Barrier
  Successors:
    SU(470): Ord  Latency=0 Barrier
    SU(472): Ord  Latency=0 Barrier
SU(472): t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 200
  Height             : 46
  Predecessors:
    SU(32): Data Latency=1
    SU(471): Ord  Latency=0 Barrier
  Successors:
    SU(469): Ord  Latency=1 Barrier
SU(473): t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 204
  Height             : 42
  Predecessors:
    SU(30): Ord  Latency=1 Barrier
  Successors:
    SU(27): Data Latency=1
    SU(477): Ord  Latency=1 Barrier
SU(474): t412: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1018

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 208
  Height             : 39
  Predecessors:
    SU(475): Ord  Latency=0 Barrier
  Successors:
    SU(26): Ord  Latency=1 Barrier
SU(475): t1018: ch = TokenFactor t1016, t1017

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 208
  Height             : 39
  Predecessors:
    SU(478): Ord  Latency=1 Barrier
    SU(476): Ord  Latency=1 Barrier
  Successors:
    SU(474): Ord  Latency=0 Barrier
SU(476): t1017: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1131, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 207
  Height             : 40
  Predecessors:
    SU(27): Data Latency=1
    SU(477): Ord  Latency=0 Barrier
  Successors:
    SU(475): Ord  Latency=1 Barrier
SU(477): t1013: ch = TokenFactor t1011:1, t1012:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 205
  Height             : 40
  Predecessors:
    SU(29): Ord  Latency=1 Barrier
    SU(473): Ord  Latency=1 Barrier
  Successors:
    SU(476): Ord  Latency=0 Barrier
    SU(478): Ord  Latency=0 Barrier
SU(478): t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 206
  Height             : 40
  Predecessors:
    SU(28): Data Latency=1
    SU(477): Ord  Latency=0 Barrier
  Successors:
    SU(475): Ord  Latency=1 Barrier
SU(479): t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 210
  Height             : 36
  Predecessors:
    SU(26): Ord  Latency=1 Barrier
  Successors:
    SU(23): Data Latency=1
    SU(483): Ord  Latency=1 Barrier
SU(480): t425: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1026

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 214
  Height             : 33
  Predecessors:
    SU(481): Ord  Latency=0 Barrier
  Successors:
    SU(22): Ord  Latency=1 Barrier
SU(481): t1026: ch = TokenFactor t1024, t1025

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 214
  Height             : 33
  Predecessors:
    SU(484): Ord  Latency=1 Barrier
    SU(482): Ord  Latency=1 Barrier
  Successors:
    SU(480): Ord  Latency=0 Barrier
SU(482): t1025: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1124, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 213
  Height             : 34
  Predecessors:
    SU(23): Data Latency=1
    SU(483): Ord  Latency=0 Barrier
  Successors:
    SU(481): Ord  Latency=1 Barrier
SU(483): t1021: ch = TokenFactor t1019:1, t1020:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 211
  Height             : 34
  Predecessors:
    SU(25): Ord  Latency=1 Barrier
    SU(479): Ord  Latency=1 Barrier
  Successors:
    SU(482): Ord  Latency=0 Barrier
    SU(484): Ord  Latency=0 Barrier
SU(484): t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 212
  Height             : 34
  Predecessors:
    SU(24): Data Latency=1
    SU(483): Ord  Latency=0 Barrier
  Successors:
    SU(481): Ord  Latency=1 Barrier
SU(485): t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 216
  Height             : 30
  Predecessors:
    SU(22): Ord  Latency=1 Barrier
  Successors:
    SU(19): Data Latency=1
    SU(489): Ord  Latency=1 Barrier
SU(486): t438: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1034

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 220
  Height             : 27
  Predecessors:
    SU(487): Ord  Latency=0 Barrier
  Successors:
    SU(18): Ord  Latency=1 Barrier
SU(487): t1034: ch = TokenFactor t1032, t1033

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 220
  Height             : 27
  Predecessors:
    SU(490): Ord  Latency=1 Barrier
    SU(488): Ord  Latency=1 Barrier
  Successors:
    SU(486): Ord  Latency=0 Barrier
SU(488): t1033: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1117, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 219
  Height             : 28
  Predecessors:
    SU(19): Data Latency=1
    SU(489): Ord  Latency=0 Barrier
  Successors:
    SU(487): Ord  Latency=1 Barrier
SU(489): t1029: ch = TokenFactor t1027:1, t1028:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 217
  Height             : 28
  Predecessors:
    SU(21): Ord  Latency=1 Barrier
    SU(485): Ord  Latency=1 Barrier
  Successors:
    SU(488): Ord  Latency=0 Barrier
    SU(490): Ord  Latency=0 Barrier
SU(490): t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 218
  Height             : 28
  Predecessors:
    SU(20): Data Latency=1
    SU(489): Ord  Latency=0 Barrier
  Successors:
    SU(487): Ord  Latency=1 Barrier
SU(491): t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 222
  Height             : 24
  Predecessors:
    SU(18): Ord  Latency=1 Barrier
  Successors:
    SU(15): Data Latency=1
    SU(495): Ord  Latency=1 Barrier
SU(492): t451: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1042

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 226
  Height             : 21
  Predecessors:
    SU(493): Ord  Latency=0 Barrier
  Successors:
    SU(14): Ord  Latency=1 Barrier
SU(493): t1042: ch = TokenFactor t1040, t1041

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 226
  Height             : 21
  Predecessors:
    SU(496): Ord  Latency=1 Barrier
    SU(494): Ord  Latency=1 Barrier
  Successors:
    SU(492): Ord  Latency=0 Barrier
SU(494): t1041: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1110, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 225
  Height             : 22
  Predecessors:
    SU(15): Data Latency=1
    SU(495): Ord  Latency=0 Barrier
  Successors:
    SU(493): Ord  Latency=1 Barrier
SU(495): t1037: ch = TokenFactor t1035:1, t1036:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 223
  Height             : 22
  Predecessors:
    SU(17): Ord  Latency=1 Barrier
    SU(491): Ord  Latency=1 Barrier
  Successors:
    SU(494): Ord  Latency=0 Barrier
    SU(496): Ord  Latency=0 Barrier
SU(496): t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 224
  Height             : 22
  Predecessors:
    SU(16): Data Latency=1
    SU(495): Ord  Latency=0 Barrier
  Successors:
    SU(493): Ord  Latency=1 Barrier
SU(497): t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 228
  Height             : 18
  Predecessors:
    SU(14): Ord  Latency=1 Barrier
  Successors:
    SU(11): Data Latency=1
    SU(501): Ord  Latency=1 Barrier
SU(498): t464: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1050

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 232
  Height             : 15
  Predecessors:
    SU(499): Ord  Latency=0 Barrier
  Successors:
    SU(10): Ord  Latency=1 Barrier
SU(499): t1050: ch = TokenFactor t1048, t1049

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 232
  Height             : 15
  Predecessors:
    SU(502): Ord  Latency=1 Barrier
    SU(500): Ord  Latency=1 Barrier
  Successors:
    SU(498): Ord  Latency=0 Barrier
SU(500): t1049: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1103, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 231
  Height             : 16
  Predecessors:
    SU(11): Data Latency=1
    SU(501): Ord  Latency=0 Barrier
  Successors:
    SU(499): Ord  Latency=1 Barrier
SU(501): t1045: ch = TokenFactor t1043:1, t1044:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 229
  Height             : 16
  Predecessors:
    SU(13): Ord  Latency=1 Barrier
    SU(497): Ord  Latency=1 Barrier
  Successors:
    SU(500): Ord  Latency=0 Barrier
    SU(502): Ord  Latency=0 Barrier
SU(502): t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 230
  Height             : 16
  Predecessors:
    SU(12): Data Latency=1
    SU(501): Ord  Latency=0 Barrier
  Successors:
    SU(499): Ord  Latency=1 Barrier
SU(503): t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 234
  Height             : 12
  Predecessors:
    SU(10): Ord  Latency=1 Barrier
  Successors:
    SU(7): Data Latency=1
    SU(507): Ord  Latency=1 Barrier
SU(504): t477: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1058

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 238
  Height             : 9
  Predecessors:
    SU(505): Ord  Latency=0 Barrier
  Successors:
    SU(6): Ord  Latency=1 Barrier
SU(505): t1058: ch = TokenFactor t1056, t1057

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 238
  Height             : 9
  Predecessors:
    SU(508): Ord  Latency=1 Barrier
    SU(506): Ord  Latency=1 Barrier
  Successors:
    SU(504): Ord  Latency=0 Barrier
SU(506): t1057: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1096, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 237
  Height             : 10
  Predecessors:
    SU(7): Data Latency=1
    SU(507): Ord  Latency=0 Barrier
  Successors:
    SU(505): Ord  Latency=1 Barrier
SU(507): t1053: ch = TokenFactor t1051:1, t1052:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 235
  Height             : 10
  Predecessors:
    SU(9): Ord  Latency=1 Barrier
    SU(503): Ord  Latency=1 Barrier
  Successors:
    SU(506): Ord  Latency=0 Barrier
    SU(508): Ord  Latency=0 Barrier
SU(508): t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 236
  Height             : 10
  Predecessors:
    SU(8): Data Latency=1
    SU(507): Ord  Latency=0 Barrier
  Successors:
    SU(505): Ord  Latency=1 Barrier
SU(509): t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 42
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 242
  Successors:
    SU(3): Data Latency=1
    SU(7): Data Latency=1
    SU(11): Data Latency=1
    SU(15): Data Latency=1
    SU(19): Data Latency=1
    SU(23): Data Latency=1
    SU(27): Data Latency=1
    SU(31): Data Latency=1
    SU(35): Data Latency=1
    SU(39): Data Latency=1
    SU(43): Data Latency=1
    SU(47): Data Latency=1
    SU(51): Data Latency=1
    SU(55): Data Latency=1
    SU(59): Data Latency=1
    SU(63): Data Latency=1
    SU(67): Data Latency=1
    SU(71): Data Latency=1
    SU(75): Data Latency=1
    SU(79): Data Latency=1
    SU(83): Data Latency=1
    SU(159): Data Latency=1
    SU(163): Data Latency=1
    SU(168): Data Latency=1
    SU(174): Data Latency=1
    SU(179): Data Latency=1
    SU(185): Data Latency=1
    SU(191): Data Latency=1
    SU(197): Data Latency=1
    SU(202): Data Latency=1
    SU(208): Data Latency=1
    SU(214): Data Latency=1
    SU(220): Data Latency=1
    SU(226): Data Latency=1
    SU(232): Data Latency=1
    SU(238): Data Latency=1
    SU(244): Data Latency=1
    SU(249): Data Latency=1
    SU(255): Data Latency=1
    SU(261): Data Latency=1
    SU(267): Data Latency=1
    SU(273): Data Latency=1
SU(510): t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 240
  Height             : 6
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
  Successors:
    SU(3): Data Latency=1
    SU(514): Ord  Latency=1 Barrier
SU(511): t490: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1066

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 244
  Height             : 3
  Predecessors:
    SU(512): Ord  Latency=0 Barrier
  Successors:
    SU(2): Ord  Latency=1 Barrier
SU(512): t1066: ch = TokenFactor t1064, t1065

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 244
  Height             : 3
  Predecessors:
    SU(515): Ord  Latency=1 Barrier
    SU(513): Ord  Latency=1 Barrier
  Successors:
    SU(511): Ord  Latency=0 Barrier
SU(513): t1065: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1089, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 243
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1
    SU(514): Ord  Latency=0 Barrier
  Successors:
    SU(512): Ord  Latency=1 Barrier
SU(514): t1061: ch = TokenFactor t1059:1, t1060:1

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 241
  Height             : 4
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(510): Ord  Latency=1 Barrier
  Successors:
    SU(513): Ord  Latency=0 Barrier
    SU(515): Ord  Latency=0 Barrier
SU(515): t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 242
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1
    SU(514): Ord  Latency=0 Barrier
  Successors:
    SU(512): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t500: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t499, t499:1

    t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498


*** Scheduling [0]: SU(0): t500: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t499, t499:1

    t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498


Examining Available:
Height 1: SU(1): t498: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.28)> TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t497:1


*** Scheduling [1]: SU(1): t498: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.28)> TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t497:1


Examining Available:
Height 2: SU(2): t497: i32,ch,glue = CopyFromReg t496:1, Register:i32 $r0, t496:2

    t492: ch,glue = CopyToReg t490:1, Register:i32 $r0, t1488

    t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1

    t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1

    t495: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494, t494:1

    t496: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t495:1, t495:2


*** Scheduling [2]: SU(2): t497: i32,ch,glue = CopyFromReg t496:1, Register:i32 $r0, t496:2

    t492: ch,glue = CopyToReg t490:1, Register:i32 $r0, t1488

    t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1

    t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1

    t495: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494, t494:1

    t496: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t495:1, t495:2


Examining Available:
Height 3: SU(511): t490: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1066


*** Scheduling [3]: SU(511): t490: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1066


Examining Available:
Height 3: SU(512): t1066: ch = TokenFactor t1064, t1065


*** Scheduling [4]: SU(512): t1066: ch = TokenFactor t1064, t1065


Examining Available:
  Comparing latency of SU (515) depth 242 vs SU (513) depth 243
Height 5: SU(513): t1065: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1089, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

Height 5: SU(515): t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

  Comparing latency of SU (515) depth 242 vs SU (513) depth 243

*** Scheduling [5]: SU(513): t1065: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1089, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1061


Examining Available:
Height 5: SU(515): t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

Height 6: SU(3): t1089: i32,i32 = tADCS t1060, t8, t1541:1

    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1


*** Scheduling [6]: SU(515): t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061


Examining Available:
Height 6: SU(514): t1061: ch = TokenFactor t1059:1, t1060:1

Height 6: SU(3): t1089: i32,i32 = tADCS t1060, t8, t1541:1

    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1


*** Scheduling [7]: SU(514): t1061: ch = TokenFactor t1059:1, t1060:1


Examining Available:
Height 6: SU(3): t1089: i32,i32 = tADCS t1060, t8, t1541:1

    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1


*** Scheduling [8]: SU(3): t1089: i32,i32 = tADCS t1060, t8, t1541:1

    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1


Examining Available:
Height 9: SU(4): t1092: i32,i32 = tADDSi3 t1059, TargetConstant:i32<1>

Height 9: SU(510): t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1


*** Scheduling [9]: SU(4): t1092: i32,i32 = tADDSi3 t1059, TargetConstant:i32<1>


Examining Available:
Height 10: SU(5): t1059: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1

Height 9: SU(510): t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1


*** Scheduling [10]: SU(5): t1059: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1


Examining Available:
Height 9: SU(510): t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1


*** Scheduling [11]: SU(510): t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1


Examining Available:
Height 12: SU(6): t484: i32,ch,glue = CopyFromReg t483:1, Register:i32 $r0, t483:2

    t479: ch,glue = CopyToReg t477:1, Register:i32 $r0, t1488

    t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1

    t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1

    t482: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481, t481:1

    t483: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t482:1, t482:2


*** Scheduling [12]: SU(6): t484: i32,ch,glue = CopyFromReg t483:1, Register:i32 $r0, t483:2

    t479: ch,glue = CopyToReg t477:1, Register:i32 $r0, t1488

    t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1

    t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1

    t482: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481, t481:1

    t483: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t482:1, t482:2


Examining Available:
Height 13: SU(504): t477: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1058


*** Scheduling [13]: SU(504): t477: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1058


Examining Available:
Height 13: SU(505): t1058: ch = TokenFactor t1056, t1057


*** Scheduling [14]: SU(505): t1058: ch = TokenFactor t1056, t1057


Examining Available:
  Comparing latency of SU (508) depth 236 vs SU (506) depth 237
Height 15: SU(506): t1057: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1096, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

Height 15: SU(508): t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

  Comparing latency of SU (508) depth 236 vs SU (506) depth 237

*** Scheduling [15]: SU(506): t1057: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1096, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1053


Examining Available:
Height 15: SU(508): t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

Height 16: SU(7): t1096: i32,i32 = tADCS t1052, t8, t1543:1

    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1


*** Scheduling [16]: SU(508): t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053


Examining Available:
Height 16: SU(507): t1053: ch = TokenFactor t1051:1, t1052:1

Height 16: SU(7): t1096: i32,i32 = tADCS t1052, t8, t1543:1

    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1


*** Scheduling [17]: SU(507): t1053: ch = TokenFactor t1051:1, t1052:1


Examining Available:
Height 16: SU(7): t1096: i32,i32 = tADCS t1052, t8, t1543:1

    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1


*** Scheduling [18]: SU(7): t1096: i32,i32 = tADCS t1052, t8, t1543:1

    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1


Examining Available:
Height 19: SU(8): t1099: i32,i32 = tADDSi3 t1051, TargetConstant:i32<1>

Height 19: SU(503): t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1


*** Scheduling [19]: SU(8): t1099: i32,i32 = tADDSi3 t1051, TargetConstant:i32<1>


Examining Available:
Height 20: SU(9): t1051: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1

Height 19: SU(503): t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1


*** Scheduling [20]: SU(9): t1051: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1


Examining Available:
Height 19: SU(503): t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1


*** Scheduling [21]: SU(503): t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1


Examining Available:
Height 22: SU(10): t471: i32,ch,glue = CopyFromReg t470:1, Register:i32 $r0, t470:2

    t466: ch,glue = CopyToReg t464:1, Register:i32 $r0, t1488

    t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1

    t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1

    t469: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468, t468:1

    t470: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t469:1, t469:2


*** Scheduling [22]: SU(10): t471: i32,ch,glue = CopyFromReg t470:1, Register:i32 $r0, t470:2

    t466: ch,glue = CopyToReg t464:1, Register:i32 $r0, t1488

    t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1

    t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1

    t469: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468, t468:1

    t470: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t469:1, t469:2


Examining Available:
Height 23: SU(498): t464: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1050


*** Scheduling [23]: SU(498): t464: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1050


Examining Available:
Height 23: SU(499): t1050: ch = TokenFactor t1048, t1049


*** Scheduling [24]: SU(499): t1050: ch = TokenFactor t1048, t1049


Examining Available:
  Comparing latency of SU (502) depth 230 vs SU (500) depth 231
Height 25: SU(500): t1049: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1103, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

Height 25: SU(502): t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

  Comparing latency of SU (502) depth 230 vs SU (500) depth 231

*** Scheduling [25]: SU(500): t1049: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1103, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1045


Examining Available:
Height 25: SU(502): t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

Height 26: SU(11): t1103: i32,i32 = tADCS t1044, t8, t1545:1

    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1


*** Scheduling [26]: SU(502): t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045


Examining Available:
Height 26: SU(501): t1045: ch = TokenFactor t1043:1, t1044:1

Height 26: SU(11): t1103: i32,i32 = tADCS t1044, t8, t1545:1

    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1


*** Scheduling [27]: SU(501): t1045: ch = TokenFactor t1043:1, t1044:1


Examining Available:
Height 26: SU(11): t1103: i32,i32 = tADCS t1044, t8, t1545:1

    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1


*** Scheduling [28]: SU(11): t1103: i32,i32 = tADCS t1044, t8, t1545:1

    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1


Examining Available:
Height 29: SU(12): t1106: i32,i32 = tADDSi3 t1043, TargetConstant:i32<1>

Height 29: SU(497): t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1


*** Scheduling [29]: SU(12): t1106: i32,i32 = tADDSi3 t1043, TargetConstant:i32<1>


Examining Available:
Height 30: SU(13): t1043: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1

Height 29: SU(497): t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1


*** Scheduling [30]: SU(13): t1043: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1


Examining Available:
Height 29: SU(497): t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1


*** Scheduling [31]: SU(497): t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1


Examining Available:
Height 32: SU(14): t458: i32,ch,glue = CopyFromReg t457:1, Register:i32 $r0, t457:2

    t453: ch,glue = CopyToReg t451:1, Register:i32 $r0, t1488

    t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1

    t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1

    t456: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455, t455:1

    t457: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t456:1, t456:2


*** Scheduling [32]: SU(14): t458: i32,ch,glue = CopyFromReg t457:1, Register:i32 $r0, t457:2

    t453: ch,glue = CopyToReg t451:1, Register:i32 $r0, t1488

    t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1

    t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1

    t456: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455, t455:1

    t457: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t456:1, t456:2


Examining Available:
Height 33: SU(492): t451: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1042


*** Scheduling [33]: SU(492): t451: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1042


Examining Available:
Height 33: SU(493): t1042: ch = TokenFactor t1040, t1041


*** Scheduling [34]: SU(493): t1042: ch = TokenFactor t1040, t1041


Examining Available:
  Comparing latency of SU (496) depth 224 vs SU (494) depth 225
Height 35: SU(494): t1041: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1110, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

Height 35: SU(496): t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

  Comparing latency of SU (496) depth 224 vs SU (494) depth 225

*** Scheduling [35]: SU(494): t1041: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1110, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1037


Examining Available:
Height 35: SU(496): t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

Height 36: SU(15): t1110: i32,i32 = tADCS t1036, t8, t1547:1

    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1


*** Scheduling [36]: SU(496): t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037


Examining Available:
Height 36: SU(495): t1037: ch = TokenFactor t1035:1, t1036:1

Height 36: SU(15): t1110: i32,i32 = tADCS t1036, t8, t1547:1

    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1


*** Scheduling [37]: SU(495): t1037: ch = TokenFactor t1035:1, t1036:1


Examining Available:
Height 36: SU(15): t1110: i32,i32 = tADCS t1036, t8, t1547:1

    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1


*** Scheduling [38]: SU(15): t1110: i32,i32 = tADCS t1036, t8, t1547:1

    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1


Examining Available:
Height 39: SU(16): t1113: i32,i32 = tADDSi3 t1035, TargetConstant:i32<1>

Height 39: SU(491): t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1


*** Scheduling [39]: SU(16): t1113: i32,i32 = tADDSi3 t1035, TargetConstant:i32<1>


Examining Available:
Height 40: SU(17): t1035: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1

Height 39: SU(491): t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1


*** Scheduling [40]: SU(17): t1035: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1


Examining Available:
Height 39: SU(491): t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1


*** Scheduling [41]: SU(491): t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1


Examining Available:
Height 42: SU(18): t445: i32,ch,glue = CopyFromReg t444:1, Register:i32 $r0, t444:2

    t440: ch,glue = CopyToReg t438:1, Register:i32 $r0, t1488

    t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1

    t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1

    t443: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442, t442:1

    t444: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t443:1, t443:2


*** Scheduling [42]: SU(18): t445: i32,ch,glue = CopyFromReg t444:1, Register:i32 $r0, t444:2

    t440: ch,glue = CopyToReg t438:1, Register:i32 $r0, t1488

    t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1

    t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1

    t443: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442, t442:1

    t444: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t443:1, t443:2


Examining Available:
Height 43: SU(486): t438: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1034


*** Scheduling [43]: SU(486): t438: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1034


Examining Available:
Height 43: SU(487): t1034: ch = TokenFactor t1032, t1033


*** Scheduling [44]: SU(487): t1034: ch = TokenFactor t1032, t1033


Examining Available:
  Comparing latency of SU (490) depth 218 vs SU (488) depth 219
Height 45: SU(488): t1033: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1117, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

Height 45: SU(490): t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

  Comparing latency of SU (490) depth 218 vs SU (488) depth 219

*** Scheduling [45]: SU(488): t1033: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1117, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1029


Examining Available:
Height 45: SU(490): t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

Height 46: SU(19): t1117: i32,i32 = tADCS t1028, t8, t1549:1

    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1


*** Scheduling [46]: SU(490): t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029


Examining Available:
Height 46: SU(489): t1029: ch = TokenFactor t1027:1, t1028:1

Height 46: SU(19): t1117: i32,i32 = tADCS t1028, t8, t1549:1

    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1


*** Scheduling [47]: SU(489): t1029: ch = TokenFactor t1027:1, t1028:1


Examining Available:
Height 46: SU(19): t1117: i32,i32 = tADCS t1028, t8, t1549:1

    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1


*** Scheduling [48]: SU(19): t1117: i32,i32 = tADCS t1028, t8, t1549:1

    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1


Examining Available:
Height 49: SU(20): t1120: i32,i32 = tADDSi3 t1027, TargetConstant:i32<1>

Height 49: SU(485): t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1


*** Scheduling [49]: SU(20): t1120: i32,i32 = tADDSi3 t1027, TargetConstant:i32<1>


Examining Available:
Height 50: SU(21): t1027: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1

Height 49: SU(485): t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1


*** Scheduling [50]: SU(21): t1027: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1


Examining Available:
Height 49: SU(485): t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1


*** Scheduling [51]: SU(485): t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1


Examining Available:
Height 52: SU(22): t432: i32,ch,glue = CopyFromReg t431:1, Register:i32 $r0, t431:2

    t427: ch,glue = CopyToReg t425:1, Register:i32 $r0, t1488

    t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1

    t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1

    t430: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429, t429:1

    t431: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t430:1, t430:2


*** Scheduling [52]: SU(22): t432: i32,ch,glue = CopyFromReg t431:1, Register:i32 $r0, t431:2

    t427: ch,glue = CopyToReg t425:1, Register:i32 $r0, t1488

    t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1

    t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1

    t430: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429, t429:1

    t431: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t430:1, t430:2


Examining Available:
Height 53: SU(480): t425: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1026


*** Scheduling [53]: SU(480): t425: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1026


Examining Available:
Height 53: SU(481): t1026: ch = TokenFactor t1024, t1025


*** Scheduling [54]: SU(481): t1026: ch = TokenFactor t1024, t1025


Examining Available:
  Comparing latency of SU (484) depth 212 vs SU (482) depth 213
Height 55: SU(482): t1025: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1124, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

Height 55: SU(484): t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

  Comparing latency of SU (484) depth 212 vs SU (482) depth 213

*** Scheduling [55]: SU(482): t1025: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1124, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1021


Examining Available:
Height 55: SU(484): t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

Height 56: SU(23): t1124: i32,i32 = tADCS t1020, t8, t1551:1

    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1


*** Scheduling [56]: SU(484): t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021


Examining Available:
Height 56: SU(483): t1021: ch = TokenFactor t1019:1, t1020:1

Height 56: SU(23): t1124: i32,i32 = tADCS t1020, t8, t1551:1

    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1


*** Scheduling [57]: SU(483): t1021: ch = TokenFactor t1019:1, t1020:1


Examining Available:
Height 56: SU(23): t1124: i32,i32 = tADCS t1020, t8, t1551:1

    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1


*** Scheduling [58]: SU(23): t1124: i32,i32 = tADCS t1020, t8, t1551:1

    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1


Examining Available:
Height 59: SU(24): t1127: i32,i32 = tADDSi3 t1019, TargetConstant:i32<1>

Height 59: SU(479): t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1


*** Scheduling [59]: SU(24): t1127: i32,i32 = tADDSi3 t1019, TargetConstant:i32<1>


Examining Available:
Height 60: SU(25): t1019: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1

Height 59: SU(479): t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1


*** Scheduling [60]: SU(25): t1019: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1


Examining Available:
Height 59: SU(479): t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1


*** Scheduling [61]: SU(479): t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1


Examining Available:
Height 62: SU(26): t419: i32,ch,glue = CopyFromReg t418:1, Register:i32 $r0, t418:2

    t414: ch,glue = CopyToReg t412:1, Register:i32 $r0, t1488

    t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1

    t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1

    t417: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416, t416:1

    t418: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t417:1, t417:2


*** Scheduling [62]: SU(26): t419: i32,ch,glue = CopyFromReg t418:1, Register:i32 $r0, t418:2

    t414: ch,glue = CopyToReg t412:1, Register:i32 $r0, t1488

    t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1

    t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1

    t417: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416, t416:1

    t418: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t417:1, t417:2


Examining Available:
Height 63: SU(474): t412: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1018


*** Scheduling [63]: SU(474): t412: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1018


Examining Available:
Height 63: SU(475): t1018: ch = TokenFactor t1016, t1017


*** Scheduling [64]: SU(475): t1018: ch = TokenFactor t1016, t1017


Examining Available:
  Comparing latency of SU (478) depth 206 vs SU (476) depth 207
Height 65: SU(476): t1017: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1131, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

Height 65: SU(478): t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

  Comparing latency of SU (478) depth 206 vs SU (476) depth 207

*** Scheduling [65]: SU(476): t1017: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1131, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1013


Examining Available:
Height 65: SU(478): t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

Height 66: SU(27): t1131: i32,i32 = tADCS t1012, t8, t1553:1

    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1


*** Scheduling [66]: SU(478): t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013


Examining Available:
Height 66: SU(477): t1013: ch = TokenFactor t1011:1, t1012:1

Height 66: SU(27): t1131: i32,i32 = tADCS t1012, t8, t1553:1

    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1


*** Scheduling [67]: SU(477): t1013: ch = TokenFactor t1011:1, t1012:1


Examining Available:
Height 66: SU(27): t1131: i32,i32 = tADCS t1012, t8, t1553:1

    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1


*** Scheduling [68]: SU(27): t1131: i32,i32 = tADCS t1012, t8, t1553:1

    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1


Examining Available:
Height 69: SU(28): t1134: i32,i32 = tADDSi3 t1011, TargetConstant:i32<1>

Height 69: SU(473): t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1


*** Scheduling [69]: SU(28): t1134: i32,i32 = tADDSi3 t1011, TargetConstant:i32<1>


Examining Available:
Height 70: SU(29): t1011: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1

Height 69: SU(473): t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1


*** Scheduling [70]: SU(29): t1011: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1


Examining Available:
Height 69: SU(473): t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1


*** Scheduling [71]: SU(473): t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1


Examining Available:
Height 72: SU(30): t406: i32,ch,glue = CopyFromReg t405:1, Register:i32 $r0, t405:2

    t401: ch,glue = CopyToReg t399:1, Register:i32 $r0, t1488

    t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1

    t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1

    t404: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403, t403:1

    t405: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t404:1, t404:2


*** Scheduling [72]: SU(30): t406: i32,ch,glue = CopyFromReg t405:1, Register:i32 $r0, t405:2

    t401: ch,glue = CopyToReg t399:1, Register:i32 $r0, t1488

    t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1

    t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1

    t404: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403, t403:1

    t405: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t404:1, t404:2


Examining Available:
Height 73: SU(468): t399: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1010


*** Scheduling [73]: SU(468): t399: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1010


Examining Available:
Height 73: SU(469): t1010: ch = TokenFactor t1008, t1009


*** Scheduling [74]: SU(469): t1010: ch = TokenFactor t1008, t1009


Examining Available:
  Comparing latency of SU (472) depth 200 vs SU (470) depth 201
Height 75: SU(470): t1009: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1138, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

Height 75: SU(472): t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

  Comparing latency of SU (472) depth 200 vs SU (470) depth 201

*** Scheduling [75]: SU(470): t1009: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1138, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1005


Examining Available:
Height 75: SU(472): t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

Height 76: SU(31): t1138: i32,i32 = tADCS t1004, t8, t1555:1

    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1


*** Scheduling [76]: SU(472): t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005


Examining Available:
Height 76: SU(471): t1005: ch = TokenFactor t1003:1, t1004:1

Height 76: SU(31): t1138: i32,i32 = tADCS t1004, t8, t1555:1

    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1


*** Scheduling [77]: SU(471): t1005: ch = TokenFactor t1003:1, t1004:1


Examining Available:
Height 76: SU(31): t1138: i32,i32 = tADCS t1004, t8, t1555:1

    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1


*** Scheduling [78]: SU(31): t1138: i32,i32 = tADCS t1004, t8, t1555:1

    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1


Examining Available:
Height 79: SU(32): t1141: i32,i32 = tADDSi3 t1003, TargetConstant:i32<1>

Height 79: SU(467): t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1


*** Scheduling [79]: SU(32): t1141: i32,i32 = tADDSi3 t1003, TargetConstant:i32<1>


Examining Available:
Height 80: SU(33): t1003: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1

Height 79: SU(467): t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1


*** Scheduling [80]: SU(33): t1003: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1


Examining Available:
Height 79: SU(467): t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1


*** Scheduling [81]: SU(467): t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1


Examining Available:
Height 82: SU(34): t393: i32,ch,glue = CopyFromReg t392:1, Register:i32 $r0, t392:2

    t388: ch,glue = CopyToReg t386:1, Register:i32 $r0, t1488

    t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1

    t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1

    t391: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390, t390:1

    t392: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t391:1, t391:2


*** Scheduling [82]: SU(34): t393: i32,ch,glue = CopyFromReg t392:1, Register:i32 $r0, t392:2

    t388: ch,glue = CopyToReg t386:1, Register:i32 $r0, t1488

    t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1

    t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1

    t391: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390, t390:1

    t392: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t391:1, t391:2


Examining Available:
Height 83: SU(462): t386: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1002


*** Scheduling [83]: SU(462): t386: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1002


Examining Available:
Height 83: SU(463): t1002: ch = TokenFactor t1000, t1001


*** Scheduling [84]: SU(463): t1002: ch = TokenFactor t1000, t1001


Examining Available:
  Comparing latency of SU (466) depth 194 vs SU (464) depth 195
Height 85: SU(464): t1001: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1145, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t997

Height 85: SU(466): t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997

  Comparing latency of SU (466) depth 194 vs SU (464) depth 195

*** Scheduling [85]: SU(464): t1001: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1145, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t997


Examining Available:
Height 85: SU(466): t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997

Height 86: SU(35): t1145: i32,i32 = tADCS t996, t8, t1557:1

    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1


*** Scheduling [86]: SU(466): t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997


Examining Available:
Height 86: SU(465): t997: ch = TokenFactor t995:1, t996:1

Height 86: SU(35): t1145: i32,i32 = tADCS t996, t8, t1557:1

    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1


*** Scheduling [87]: SU(465): t997: ch = TokenFactor t995:1, t996:1


Examining Available:
Height 86: SU(35): t1145: i32,i32 = tADCS t996, t8, t1557:1

    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1


*** Scheduling [88]: SU(35): t1145: i32,i32 = tADCS t996, t8, t1557:1

    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1


Examining Available:
Height 89: SU(36): t1148: i32,i32 = tADDSi3 t995, TargetConstant:i32<1>

Height 89: SU(461): t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1


*** Scheduling [89]: SU(36): t1148: i32,i32 = tADDSi3 t995, TargetConstant:i32<1>


Examining Available:
Height 90: SU(37): t995: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1

Height 89: SU(461): t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1


*** Scheduling [90]: SU(37): t995: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1


Examining Available:
Height 89: SU(461): t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1


*** Scheduling [91]: SU(461): t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1


Examining Available:
Height 92: SU(38): t380: i32,ch,glue = CopyFromReg t379:1, Register:i32 $r0, t379:2

    t375: ch,glue = CopyToReg t373:1, Register:i32 $r0, t1488

    t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1

    t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1

    t378: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377, t377:1

    t379: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t378:1, t378:2


*** Scheduling [92]: SU(38): t380: i32,ch,glue = CopyFromReg t379:1, Register:i32 $r0, t379:2

    t375: ch,glue = CopyToReg t373:1, Register:i32 $r0, t1488

    t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1

    t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1

    t378: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377, t377:1

    t379: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t378:1, t378:2


Examining Available:
Height 93: SU(456): t373: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t994


*** Scheduling [93]: SU(456): t373: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t994


Examining Available:
Height 93: SU(457): t994: ch = TokenFactor t992, t993


*** Scheduling [94]: SU(457): t994: ch = TokenFactor t992, t993


Examining Available:
  Comparing latency of SU (460) depth 188 vs SU (458) depth 189
Height 95: SU(458): t993: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1152, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t989

Height 95: SU(460): t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989

  Comparing latency of SU (460) depth 188 vs SU (458) depth 189

*** Scheduling [95]: SU(458): t993: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1152, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t989


Examining Available:
Height 95: SU(460): t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989

Height 96: SU(39): t1152: i32,i32 = tADCS t988, t8, t1559:1

    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1


*** Scheduling [96]: SU(460): t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989


Examining Available:
Height 96: SU(459): t989: ch = TokenFactor t987:1, t988:1

Height 96: SU(39): t1152: i32,i32 = tADCS t988, t8, t1559:1

    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1


*** Scheduling [97]: SU(459): t989: ch = TokenFactor t987:1, t988:1


Examining Available:
Height 96: SU(39): t1152: i32,i32 = tADCS t988, t8, t1559:1

    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1


*** Scheduling [98]: SU(39): t1152: i32,i32 = tADCS t988, t8, t1559:1

    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1


Examining Available:
Height 99: SU(40): t1155: i32,i32 = tADDSi3 t987, TargetConstant:i32<1>

Height 99: SU(455): t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1


*** Scheduling [99]: SU(40): t1155: i32,i32 = tADDSi3 t987, TargetConstant:i32<1>


Examining Available:
Height 100: SU(41): t987: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1

Height 99: SU(455): t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1


*** Scheduling [100]: SU(41): t987: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1


Examining Available:
Height 99: SU(455): t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1


*** Scheduling [101]: SU(455): t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1


Examining Available:
Height 102: SU(42): t367: i32,ch,glue = CopyFromReg t366:1, Register:i32 $r0, t366:2

    t362: ch,glue = CopyToReg t360:1, Register:i32 $r0, t1488

    t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1

    t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1

    t365: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364, t364:1

    t366: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t365:1, t365:2


*** Scheduling [102]: SU(42): t367: i32,ch,glue = CopyFromReg t366:1, Register:i32 $r0, t366:2

    t362: ch,glue = CopyToReg t360:1, Register:i32 $r0, t1488

    t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1

    t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1

    t365: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364, t364:1

    t366: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t365:1, t365:2


Examining Available:
Height 103: SU(450): t360: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t986


*** Scheduling [103]: SU(450): t360: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t986


Examining Available:
Height 103: SU(451): t986: ch = TokenFactor t984, t985


*** Scheduling [104]: SU(451): t986: ch = TokenFactor t984, t985


Examining Available:
  Comparing latency of SU (454) depth 182 vs SU (452) depth 183
Height 105: SU(452): t985: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1159, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t981

Height 105: SU(454): t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981

  Comparing latency of SU (454) depth 182 vs SU (452) depth 183

*** Scheduling [105]: SU(452): t985: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1159, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t981


Examining Available:
Height 105: SU(454): t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981

Height 106: SU(43): t1159: i32,i32 = tADCS t980, t8, t1561:1

    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1


*** Scheduling [106]: SU(454): t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981


Examining Available:
Height 106: SU(453): t981: ch = TokenFactor t979:1, t980:1

Height 106: SU(43): t1159: i32,i32 = tADCS t980, t8, t1561:1

    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1


*** Scheduling [107]: SU(453): t981: ch = TokenFactor t979:1, t980:1


Examining Available:
Height 106: SU(43): t1159: i32,i32 = tADCS t980, t8, t1561:1

    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1


*** Scheduling [108]: SU(43): t1159: i32,i32 = tADCS t980, t8, t1561:1

    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1


Examining Available:
Height 109: SU(44): t1162: i32,i32 = tADDSi3 t979, TargetConstant:i32<1>

Height 109: SU(449): t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1


*** Scheduling [109]: SU(44): t1162: i32,i32 = tADDSi3 t979, TargetConstant:i32<1>


Examining Available:
Height 110: SU(45): t979: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1

Height 109: SU(449): t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1


*** Scheduling [110]: SU(45): t979: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1


Examining Available:
Height 109: SU(449): t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1


*** Scheduling [111]: SU(449): t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1


Examining Available:
Height 112: SU(46): t354: i32,ch,glue = CopyFromReg t353:1, Register:i32 $r0, t353:2

    t349: ch,glue = CopyToReg t347:1, Register:i32 $r0, t1488

    t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1

    t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1

    t352: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351, t351:1

    t353: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t352:1, t352:2


*** Scheduling [112]: SU(46): t354: i32,ch,glue = CopyFromReg t353:1, Register:i32 $r0, t353:2

    t349: ch,glue = CopyToReg t347:1, Register:i32 $r0, t1488

    t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1

    t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1

    t352: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351, t351:1

    t353: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t352:1, t352:2


Examining Available:
Height 113: SU(444): t347: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t978


*** Scheduling [113]: SU(444): t347: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t978


Examining Available:
Height 113: SU(445): t978: ch = TokenFactor t976, t977


*** Scheduling [114]: SU(445): t978: ch = TokenFactor t976, t977


Examining Available:
  Comparing latency of SU (448) depth 176 vs SU (446) depth 177
Height 115: SU(446): t977: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1166, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t973

Height 115: SU(448): t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973

  Comparing latency of SU (448) depth 176 vs SU (446) depth 177

*** Scheduling [115]: SU(446): t977: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1166, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t973


Examining Available:
Height 115: SU(448): t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973

Height 116: SU(47): t1166: i32,i32 = tADCS t972, t8, t1563:1

    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1


*** Scheduling [116]: SU(448): t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973


Examining Available:
Height 116: SU(447): t973: ch = TokenFactor t971:1, t972:1

Height 116: SU(47): t1166: i32,i32 = tADCS t972, t8, t1563:1

    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1


*** Scheduling [117]: SU(447): t973: ch = TokenFactor t971:1, t972:1


Examining Available:
Height 116: SU(47): t1166: i32,i32 = tADCS t972, t8, t1563:1

    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1


*** Scheduling [118]: SU(47): t1166: i32,i32 = tADCS t972, t8, t1563:1

    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1


Examining Available:
Height 119: SU(48): t1169: i32,i32 = tADDSi3 t971, TargetConstant:i32<1>

Height 119: SU(443): t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1


*** Scheduling [119]: SU(48): t1169: i32,i32 = tADDSi3 t971, TargetConstant:i32<1>


Examining Available:
Height 120: SU(49): t971: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1

Height 119: SU(443): t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1


*** Scheduling [120]: SU(49): t971: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1


Examining Available:
Height 119: SU(443): t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1


*** Scheduling [121]: SU(443): t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1


Examining Available:
Height 122: SU(50): t341: i32,ch,glue = CopyFromReg t340:1, Register:i32 $r0, t340:2

    t336: ch,glue = CopyToReg t334:1, Register:i32 $r0, t1488

    t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1

    t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1

    t339: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338, t338:1

    t340: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t339:1, t339:2


*** Scheduling [122]: SU(50): t341: i32,ch,glue = CopyFromReg t340:1, Register:i32 $r0, t340:2

    t336: ch,glue = CopyToReg t334:1, Register:i32 $r0, t1488

    t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1

    t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1

    t339: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338, t338:1

    t340: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t339:1, t339:2


Examining Available:
Height 123: SU(438): t334: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t970


*** Scheduling [123]: SU(438): t334: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t970


Examining Available:
Height 123: SU(439): t970: ch = TokenFactor t968, t969


*** Scheduling [124]: SU(439): t970: ch = TokenFactor t968, t969


Examining Available:
  Comparing latency of SU (442) depth 170 vs SU (440) depth 171
Height 125: SU(440): t969: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1173, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t965

Height 125: SU(442): t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965

  Comparing latency of SU (442) depth 170 vs SU (440) depth 171

*** Scheduling [125]: SU(440): t969: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1173, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t965


Examining Available:
Height 125: SU(442): t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965

Height 126: SU(51): t1173: i32,i32 = tADCS t964, t8, t1565:1

    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1


*** Scheduling [126]: SU(442): t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965


Examining Available:
Height 126: SU(441): t965: ch = TokenFactor t963:1, t964:1

Height 126: SU(51): t1173: i32,i32 = tADCS t964, t8, t1565:1

    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1


*** Scheduling [127]: SU(441): t965: ch = TokenFactor t963:1, t964:1


Examining Available:
Height 126: SU(51): t1173: i32,i32 = tADCS t964, t8, t1565:1

    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1


*** Scheduling [128]: SU(51): t1173: i32,i32 = tADCS t964, t8, t1565:1

    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1


Examining Available:
Height 129: SU(52): t1176: i32,i32 = tADDSi3 t963, TargetConstant:i32<1>

Height 129: SU(437): t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1


*** Scheduling [129]: SU(52): t1176: i32,i32 = tADDSi3 t963, TargetConstant:i32<1>


Examining Available:
Height 130: SU(53): t963: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1

Height 129: SU(437): t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1


*** Scheduling [130]: SU(53): t963: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1


Examining Available:
Height 129: SU(437): t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1


*** Scheduling [131]: SU(437): t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1


Examining Available:
Height 132: SU(54): t328: i32,ch,glue = CopyFromReg t327:1, Register:i32 $r0, t327:2

    t323: ch,glue = CopyToReg t321:1, Register:i32 $r0, t1488

    t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1

    t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1

    t326: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325, t325:1

    t327: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t326:1, t326:2


*** Scheduling [132]: SU(54): t328: i32,ch,glue = CopyFromReg t327:1, Register:i32 $r0, t327:2

    t323: ch,glue = CopyToReg t321:1, Register:i32 $r0, t1488

    t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1

    t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1

    t326: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325, t325:1

    t327: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t326:1, t326:2


Examining Available:
Height 133: SU(432): t321: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t962


*** Scheduling [133]: SU(432): t321: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t962


Examining Available:
Height 133: SU(433): t962: ch = TokenFactor t960, t961


*** Scheduling [134]: SU(433): t962: ch = TokenFactor t960, t961


Examining Available:
  Comparing latency of SU (436) depth 164 vs SU (434) depth 165
Height 135: SU(434): t961: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1180, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t957

Height 135: SU(436): t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957

  Comparing latency of SU (436) depth 164 vs SU (434) depth 165

*** Scheduling [135]: SU(434): t961: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1180, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t957


Examining Available:
Height 135: SU(436): t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957

Height 136: SU(55): t1180: i32,i32 = tADCS t956, t8, t1567:1

    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1


*** Scheduling [136]: SU(436): t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957


Examining Available:
Height 136: SU(435): t957: ch = TokenFactor t955:1, t956:1

Height 136: SU(55): t1180: i32,i32 = tADCS t956, t8, t1567:1

    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1


*** Scheduling [137]: SU(435): t957: ch = TokenFactor t955:1, t956:1


Examining Available:
Height 136: SU(55): t1180: i32,i32 = tADCS t956, t8, t1567:1

    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1


*** Scheduling [138]: SU(55): t1180: i32,i32 = tADCS t956, t8, t1567:1

    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1


Examining Available:
Height 139: SU(56): t1183: i32,i32 = tADDSi3 t955, TargetConstant:i32<1>

Height 139: SU(431): t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1


*** Scheduling [139]: SU(56): t1183: i32,i32 = tADDSi3 t955, TargetConstant:i32<1>


Examining Available:
Height 140: SU(57): t955: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1

Height 139: SU(431): t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1


*** Scheduling [140]: SU(57): t955: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1


Examining Available:
Height 139: SU(431): t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1


*** Scheduling [141]: SU(431): t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1


Examining Available:
Height 142: SU(58): t315: i32,ch,glue = CopyFromReg t314:1, Register:i32 $r0, t314:2

    t310: ch,glue = CopyToReg t308:1, Register:i32 $r0, t1488

    t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1

    t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1

    t313: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312, t312:1

    t314: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t313:1, t313:2


*** Scheduling [142]: SU(58): t315: i32,ch,glue = CopyFromReg t314:1, Register:i32 $r0, t314:2

    t310: ch,glue = CopyToReg t308:1, Register:i32 $r0, t1488

    t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1

    t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1

    t313: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312, t312:1

    t314: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t313:1, t313:2


Examining Available:
Height 143: SU(426): t308: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t954


*** Scheduling [143]: SU(426): t308: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t954


Examining Available:
Height 143: SU(427): t954: ch = TokenFactor t952, t953


*** Scheduling [144]: SU(427): t954: ch = TokenFactor t952, t953


Examining Available:
  Comparing latency of SU (430) depth 158 vs SU (428) depth 159
Height 145: SU(428): t953: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1187, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t949

Height 145: SU(430): t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949

  Comparing latency of SU (430) depth 158 vs SU (428) depth 159

*** Scheduling [145]: SU(428): t953: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1187, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t949


Examining Available:
Height 145: SU(430): t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949

Height 146: SU(59): t1187: i32,i32 = tADCS t948, t8, t1569:1

    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1


*** Scheduling [146]: SU(430): t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949


Examining Available:
Height 146: SU(429): t949: ch = TokenFactor t947:1, t948:1

Height 146: SU(59): t1187: i32,i32 = tADCS t948, t8, t1569:1

    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1


*** Scheduling [147]: SU(429): t949: ch = TokenFactor t947:1, t948:1


Examining Available:
Height 146: SU(59): t1187: i32,i32 = tADCS t948, t8, t1569:1

    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1


*** Scheduling [148]: SU(59): t1187: i32,i32 = tADCS t948, t8, t1569:1

    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1


Examining Available:
Height 149: SU(60): t1190: i32,i32 = tADDSi3 t947, TargetConstant:i32<1>

Height 149: SU(425): t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1


*** Scheduling [149]: SU(60): t1190: i32,i32 = tADDSi3 t947, TargetConstant:i32<1>


Examining Available:
Height 150: SU(61): t947: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1

Height 149: SU(425): t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1


*** Scheduling [150]: SU(61): t947: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1


Examining Available:
Height 149: SU(425): t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1


*** Scheduling [151]: SU(425): t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1


Examining Available:
Height 152: SU(62): t302: i32,ch,glue = CopyFromReg t301:1, Register:i32 $r0, t301:2

    t297: ch,glue = CopyToReg t295:1, Register:i32 $r0, t1488

    t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1

    t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1

    t300: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299, t299:1

    t301: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t300:1, t300:2


*** Scheduling [152]: SU(62): t302: i32,ch,glue = CopyFromReg t301:1, Register:i32 $r0, t301:2

    t297: ch,glue = CopyToReg t295:1, Register:i32 $r0, t1488

    t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1

    t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1

    t300: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299, t299:1

    t301: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t300:1, t300:2


Examining Available:
Height 153: SU(420): t295: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t946


*** Scheduling [153]: SU(420): t295: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t946


Examining Available:
Height 153: SU(421): t946: ch = TokenFactor t944, t945


*** Scheduling [154]: SU(421): t946: ch = TokenFactor t944, t945


Examining Available:
  Comparing latency of SU (424) depth 152 vs SU (422) depth 153
Height 155: SU(422): t945: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1194, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t941

Height 155: SU(424): t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941

  Comparing latency of SU (424) depth 152 vs SU (422) depth 153

*** Scheduling [155]: SU(422): t945: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1194, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t941


Examining Available:
Height 155: SU(424): t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941

Height 156: SU(63): t1194: i32,i32 = tADCS t940, t8, t1571:1

    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1


*** Scheduling [156]: SU(424): t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941


Examining Available:
Height 156: SU(423): t941: ch = TokenFactor t939:1, t940:1

Height 156: SU(63): t1194: i32,i32 = tADCS t940, t8, t1571:1

    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1


*** Scheduling [157]: SU(423): t941: ch = TokenFactor t939:1, t940:1


Examining Available:
Height 156: SU(63): t1194: i32,i32 = tADCS t940, t8, t1571:1

    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1


*** Scheduling [158]: SU(63): t1194: i32,i32 = tADCS t940, t8, t1571:1

    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1


Examining Available:
Height 159: SU(64): t1197: i32,i32 = tADDSi3 t939, TargetConstant:i32<1>

Height 159: SU(419): t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1


*** Scheduling [159]: SU(64): t1197: i32,i32 = tADDSi3 t939, TargetConstant:i32<1>


Examining Available:
Height 160: SU(65): t939: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1

Height 159: SU(419): t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1


*** Scheduling [160]: SU(65): t939: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1


Examining Available:
Height 159: SU(419): t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1


*** Scheduling [161]: SU(419): t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1


Examining Available:
Height 162: SU(66): t289: i32,ch,glue = CopyFromReg t288:1, Register:i32 $r0, t288:2

    t284: ch,glue = CopyToReg t282:1, Register:i32 $r0, t1488

    t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1

    t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1

    t287: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286, t286:1

    t288: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t287:1, t287:2


*** Scheduling [162]: SU(66): t289: i32,ch,glue = CopyFromReg t288:1, Register:i32 $r0, t288:2

    t284: ch,glue = CopyToReg t282:1, Register:i32 $r0, t1488

    t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1

    t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1

    t287: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286, t286:1

    t288: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t287:1, t287:2


Examining Available:
Height 163: SU(414): t282: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t938


*** Scheduling [163]: SU(414): t282: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t938


Examining Available:
Height 163: SU(415): t938: ch = TokenFactor t936, t937


*** Scheduling [164]: SU(415): t938: ch = TokenFactor t936, t937


Examining Available:
  Comparing latency of SU (418) depth 146 vs SU (416) depth 147
Height 165: SU(416): t937: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1201, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t933

Height 165: SU(418): t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933

  Comparing latency of SU (418) depth 146 vs SU (416) depth 147

*** Scheduling [165]: SU(416): t937: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1201, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t933


Examining Available:
Height 165: SU(418): t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933

Height 166: SU(67): t1201: i32,i32 = tADCS t932, t8, t1573:1

    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1


*** Scheduling [166]: SU(418): t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933


Examining Available:
Height 166: SU(417): t933: ch = TokenFactor t931:1, t932:1

Height 166: SU(67): t1201: i32,i32 = tADCS t932, t8, t1573:1

    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1


*** Scheduling [167]: SU(417): t933: ch = TokenFactor t931:1, t932:1


Examining Available:
Height 166: SU(67): t1201: i32,i32 = tADCS t932, t8, t1573:1

    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1


*** Scheduling [168]: SU(67): t1201: i32,i32 = tADCS t932, t8, t1573:1

    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1


Examining Available:
Height 169: SU(68): t1204: i32,i32 = tADDSi3 t931, TargetConstant:i32<1>

Height 169: SU(413): t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1


*** Scheduling [169]: SU(68): t1204: i32,i32 = tADDSi3 t931, TargetConstant:i32<1>


Examining Available:
Height 170: SU(69): t931: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1

Height 169: SU(413): t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1


*** Scheduling [170]: SU(69): t931: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1


Examining Available:
Height 169: SU(413): t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1


*** Scheduling [171]: SU(413): t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1


Examining Available:
Height 172: SU(70): t276: i32,ch,glue = CopyFromReg t275:1, Register:i32 $r0, t275:2

    t271: ch,glue = CopyToReg t269:1, Register:i32 $r0, t1488

    t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1

    t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1

    t274: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273, t273:1

    t275: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t274:1, t274:2


*** Scheduling [172]: SU(70): t276: i32,ch,glue = CopyFromReg t275:1, Register:i32 $r0, t275:2

    t271: ch,glue = CopyToReg t269:1, Register:i32 $r0, t1488

    t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1

    t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1

    t274: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273, t273:1

    t275: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t274:1, t274:2


Examining Available:
Height 173: SU(408): t269: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t930


*** Scheduling [173]: SU(408): t269: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t930


Examining Available:
Height 173: SU(409): t930: ch = TokenFactor t928, t929


*** Scheduling [174]: SU(409): t930: ch = TokenFactor t928, t929


Examining Available:
  Comparing latency of SU (412) depth 140 vs SU (410) depth 141
Height 175: SU(410): t929: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1208, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t925

Height 175: SU(412): t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925

  Comparing latency of SU (412) depth 140 vs SU (410) depth 141

*** Scheduling [175]: SU(410): t929: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1208, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t925


Examining Available:
Height 175: SU(412): t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925

Height 176: SU(71): t1208: i32,i32 = tADCS t924, t8, t1575:1

    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1


*** Scheduling [176]: SU(412): t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925


Examining Available:
Height 176: SU(411): t925: ch = TokenFactor t923:1, t924:1

Height 176: SU(71): t1208: i32,i32 = tADCS t924, t8, t1575:1

    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1


*** Scheduling [177]: SU(411): t925: ch = TokenFactor t923:1, t924:1


Examining Available:
Height 176: SU(71): t1208: i32,i32 = tADCS t924, t8, t1575:1

    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1


*** Scheduling [178]: SU(71): t1208: i32,i32 = tADCS t924, t8, t1575:1

    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1


Examining Available:
Height 179: SU(72): t1211: i32,i32 = tADDSi3 t923, TargetConstant:i32<1>

Height 179: SU(407): t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1


*** Scheduling [179]: SU(72): t1211: i32,i32 = tADDSi3 t923, TargetConstant:i32<1>


Examining Available:
Height 180: SU(73): t923: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1

Height 179: SU(407): t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1


*** Scheduling [180]: SU(73): t923: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1


Examining Available:
Height 179: SU(407): t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1


*** Scheduling [181]: SU(407): t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1


Examining Available:
Height 182: SU(74): t263: i32,ch,glue = CopyFromReg t262:1, Register:i32 $r0, t262:2

    t258: ch,glue = CopyToReg t256:1, Register:i32 $r0, t1488

    t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1

    t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1

    t261: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260, t260:1

    t262: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t261:1, t261:2


*** Scheduling [182]: SU(74): t263: i32,ch,glue = CopyFromReg t262:1, Register:i32 $r0, t262:2

    t258: ch,glue = CopyToReg t256:1, Register:i32 $r0, t1488

    t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1

    t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1

    t261: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260, t260:1

    t262: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t261:1, t261:2


Examining Available:
Height 183: SU(402): t256: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t922


*** Scheduling [183]: SU(402): t256: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t922


Examining Available:
Height 183: SU(403): t922: ch = TokenFactor t920, t921


*** Scheduling [184]: SU(403): t922: ch = TokenFactor t920, t921


Examining Available:
  Comparing latency of SU (406) depth 134 vs SU (404) depth 135
Height 185: SU(404): t921: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1215, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t917

Height 185: SU(406): t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917

  Comparing latency of SU (406) depth 134 vs SU (404) depth 135

*** Scheduling [185]: SU(404): t921: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1215, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t917


Examining Available:
Height 185: SU(406): t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917

Height 186: SU(75): t1215: i32,i32 = tADCS t916, t8, t1577:1

    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1


*** Scheduling [186]: SU(406): t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917


Examining Available:
Height 186: SU(405): t917: ch = TokenFactor t915:1, t916:1

Height 186: SU(75): t1215: i32,i32 = tADCS t916, t8, t1577:1

    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1


*** Scheduling [187]: SU(405): t917: ch = TokenFactor t915:1, t916:1


Examining Available:
Height 186: SU(75): t1215: i32,i32 = tADCS t916, t8, t1577:1

    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1


*** Scheduling [188]: SU(75): t1215: i32,i32 = tADCS t916, t8, t1577:1

    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1


Examining Available:
Height 189: SU(76): t1218: i32,i32 = tADDSi3 t915, TargetConstant:i32<1>

Height 189: SU(401): t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1


*** Scheduling [189]: SU(76): t1218: i32,i32 = tADDSi3 t915, TargetConstant:i32<1>


Examining Available:
Height 190: SU(77): t915: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1

Height 189: SU(401): t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1


*** Scheduling [190]: SU(77): t915: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1


Examining Available:
Height 189: SU(401): t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1


*** Scheduling [191]: SU(401): t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1


Examining Available:
Height 192: SU(78): t250: i32,ch,glue = CopyFromReg t249:1, Register:i32 $r0, t249:2

    t245: ch,glue = CopyToReg t243:1, Register:i32 $r0, t1488

    t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1

    t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1

    t248: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247, t247:1

    t249: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t248:1, t248:2


*** Scheduling [192]: SU(78): t250: i32,ch,glue = CopyFromReg t249:1, Register:i32 $r0, t249:2

    t245: ch,glue = CopyToReg t243:1, Register:i32 $r0, t1488

    t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1

    t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1

    t248: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247, t247:1

    t249: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t248:1, t248:2


Examining Available:
Height 193: SU(396): t243: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t914


*** Scheduling [193]: SU(396): t243: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t914


Examining Available:
Height 193: SU(397): t914: ch = TokenFactor t912, t913


*** Scheduling [194]: SU(397): t914: ch = TokenFactor t912, t913


Examining Available:
  Comparing latency of SU (400) depth 128 vs SU (398) depth 129
Height 195: SU(398): t913: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1222, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t909

Height 195: SU(400): t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909

  Comparing latency of SU (400) depth 128 vs SU (398) depth 129

*** Scheduling [195]: SU(398): t913: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1222, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t909


Examining Available:
Height 195: SU(400): t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909

Height 196: SU(79): t1222: i32,i32 = tADCS t908, t8, t1579:1

    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1


*** Scheduling [196]: SU(400): t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909


Examining Available:
Height 196: SU(399): t909: ch = TokenFactor t907:1, t908:1

Height 196: SU(79): t1222: i32,i32 = tADCS t908, t8, t1579:1

    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1


*** Scheduling [197]: SU(399): t909: ch = TokenFactor t907:1, t908:1


Examining Available:
Height 196: SU(79): t1222: i32,i32 = tADCS t908, t8, t1579:1

    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1


*** Scheduling [198]: SU(79): t1222: i32,i32 = tADCS t908, t8, t1579:1

    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1


Examining Available:
Height 199: SU(80): t1225: i32,i32 = tADDSi3 t907, TargetConstant:i32<1>

Height 199: SU(395): t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1


*** Scheduling [199]: SU(80): t1225: i32,i32 = tADDSi3 t907, TargetConstant:i32<1>


Examining Available:
Height 200: SU(81): t907: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1

Height 199: SU(395): t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1


*** Scheduling [200]: SU(81): t907: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1


Examining Available:
Height 199: SU(395): t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1


*** Scheduling [201]: SU(395): t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1


Examining Available:
Height 202: SU(82): t237: i32,ch,glue = CopyFromReg t236:1, Register:i32 $r0, t236:2

    t227: ch,glue = CopyToReg t223:1, Register:i32 $r0, t1488

    t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1

    t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1

    t234: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231, t231:1

    t236: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t234:1, t234:2


*** Scheduling [202]: SU(82): t237: i32,ch,glue = CopyFromReg t236:1, Register:i32 $r0, t236:2

    t227: ch,glue = CopyToReg t223:1, Register:i32 $r0, t1488

    t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1

    t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1

    t234: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231, t231:1

    t236: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t234:1, t234:2


Examining Available:
Height 203: SU(389): t1488: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 203: SU(390): t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906


*** Scheduling [203]: SU(389): t1488: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 203: SU(390): t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906


*** Scheduling [204]: SU(390): t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906


Examining Available:
Height 204: SU(391): t906: ch = TokenFactor t904, t905


*** Scheduling [205]: SU(391): t906: ch = TokenFactor t904, t905


Examining Available:
  Comparing latency of SU (394) depth 122 vs SU (392) depth 123
Height 206: SU(392): t905: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1229, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t901

Height 206: SU(394): t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901

  Comparing latency of SU (394) depth 122 vs SU (392) depth 123

*** Scheduling [206]: SU(392): t905: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1229, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t901


Examining Available:
Height 206: SU(394): t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901

Height 207: SU(83): t1229: i32,i32 = tADCS t900, t8, t1581:1

    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1


*** Scheduling [207]: SU(394): t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901


Examining Available:
Height 207: SU(393): t901: ch = TokenFactor t899:1, t900:1

Height 207: SU(83): t1229: i32,i32 = tADCS t900, t8, t1581:1

    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1


*** Scheduling [208]: SU(393): t901: ch = TokenFactor t899:1, t900:1


Examining Available:
Height 207: SU(83): t1229: i32,i32 = tADCS t900, t8, t1581:1

    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1


*** Scheduling [209]: SU(83): t1229: i32,i32 = tADCS t900, t8, t1581:1

    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1


Examining Available:
Height 210: SU(84): t1232: i32,i32 = tADDSi3 t899, TargetConstant:i32<1>

Height 210: SU(388): t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213


*** Scheduling [210]: SU(84): t1232: i32,i32 = tADDSi3 t899, TargetConstant:i32<1>


Examining Available:
Height 211: SU(85): t899: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t213

Height 210: SU(388): t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213


*** Scheduling [211]: SU(85): t899: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t213


Examining Available:
Height 210: SU(388): t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213


*** Scheduling [212]: SU(388): t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213


Examining Available:
Height 213: SU(86): t213: ch = tSTRspi<Mem:(store (s32) into %ir.28)> t893, TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t212


*** Scheduling [213]: SU(86): t213: ch = tSTRspi<Mem:(store (s32) into %ir.28)> t893, TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t212


Examining Available:
Height 213: SU(87): t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [214]: SU(87): t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689


Examining Available:
Height 214: SU(88): t689: ch = TokenFactor t687:1, t688:1

Height 214: SU(280): t694: ch = TokenFactor t692:1, t693:1

Height 214: SU(283): t720: ch = TokenFactor t718:1, t719:1

Height 214: SU(286): t723: ch = TokenFactor t721:1, t722:1

Height 214: SU(289): t728: ch = TokenFactor t726:1, t727:1

Height 214: SU(292): t731: ch = TokenFactor t729:1, t730:1

Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [215]: SU(88): t689: ch = TokenFactor t687:1, t688:1


Examining Available:
Height 214: SU(280): t694: ch = TokenFactor t692:1, t693:1

Height 214: SU(283): t720: ch = TokenFactor t718:1, t719:1

Height 214: SU(286): t723: ch = TokenFactor t721:1, t722:1

Height 214: SU(289): t728: ch = TokenFactor t726:1, t727:1

Height 214: SU(292): t731: ch = TokenFactor t729:1, t730:1

Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [216]: SU(280): t694: ch = TokenFactor t692:1, t693:1


Examining Available:
Height 214: SU(283): t720: ch = TokenFactor t718:1, t719:1

Height 214: SU(286): t723: ch = TokenFactor t721:1, t722:1

Height 214: SU(289): t728: ch = TokenFactor t726:1, t727:1

Height 214: SU(292): t731: ch = TokenFactor t729:1, t730:1

Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [217]: SU(283): t720: ch = TokenFactor t718:1, t719:1


Examining Available:
Height 214: SU(286): t723: ch = TokenFactor t721:1, t722:1

Height 214: SU(289): t728: ch = TokenFactor t726:1, t727:1

Height 214: SU(292): t731: ch = TokenFactor t729:1, t730:1

Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [218]: SU(286): t723: ch = TokenFactor t721:1, t722:1


Examining Available:
Height 214: SU(289): t728: ch = TokenFactor t726:1, t727:1

Height 214: SU(292): t731: ch = TokenFactor t729:1, t730:1

Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [219]: SU(289): t728: ch = TokenFactor t726:1, t727:1


Examining Available:
Height 214: SU(292): t731: ch = TokenFactor t729:1, t730:1

Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [220]: SU(292): t731: ch = TokenFactor t729:1, t730:1


Examining Available:
Height 214: SU(295): t734: ch = TokenFactor t732:1, t733:1

Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [221]: SU(295): t734: ch = TokenFactor t732:1, t733:1


Examining Available:
Height 214: SU(298): t743: ch = TokenFactor t741:1, t742:1

Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [222]: SU(298): t743: ch = TokenFactor t741:1, t742:1


Examining Available:
Height 214: SU(301): t748: ch = TokenFactor t746:1, t747:1

Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [223]: SU(301): t748: ch = TokenFactor t746:1, t747:1


Examining Available:
Height 214: SU(304): t751: ch = TokenFactor t749:1, t750:1

Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [224]: SU(304): t751: ch = TokenFactor t749:1, t750:1


Examining Available:
Height 214: SU(307): t774: ch = TokenFactor t772:1, t773:1

Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [225]: SU(307): t774: ch = TokenFactor t772:1, t773:1


Examining Available:
Height 214: SU(310): t777: ch = TokenFactor t775:1, t776:1

Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [226]: SU(310): t777: ch = TokenFactor t775:1, t776:1


Examining Available:
Height 214: SU(313): t780: ch = TokenFactor t778:1, t779:1

Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [227]: SU(313): t780: ch = TokenFactor t778:1, t779:1


Examining Available:
Height 214: SU(316): t803: ch = TokenFactor t801:1, t802:1

Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [228]: SU(316): t803: ch = TokenFactor t801:1, t802:1


Examining Available:
Height 214: SU(319): t806: ch = TokenFactor t804:1, t805:1

Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [229]: SU(319): t806: ch = TokenFactor t804:1, t805:1


Examining Available:
Height 214: SU(322): t809: ch = TokenFactor t807:1, t808:1

Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [230]: SU(322): t809: ch = TokenFactor t807:1, t808:1


Examining Available:
Height 214: SU(325): t850: ch = TokenFactor t848:1, t849:1

Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [231]: SU(325): t850: ch = TokenFactor t848:1, t849:1


Examining Available:
Height 214: SU(328): t859: ch = TokenFactor t857:1, t858:1

Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [232]: SU(328): t859: ch = TokenFactor t857:1, t858:1


Examining Available:
Height 214: SU(331): t862: ch = TokenFactor t860:1, t861:1

Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [233]: SU(331): t862: ch = TokenFactor t860:1, t861:1


Examining Available:
Height 214: SU(334): t865: ch = TokenFactor t863:1, t864:1

Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [234]: SU(334): t865: ch = TokenFactor t863:1, t864:1


Examining Available:
Height 214: SU(337): t868: ch = TokenFactor t866:1, t867:1

Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [235]: SU(337): t868: ch = TokenFactor t866:1, t867:1


Examining Available:
Height 214: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


*** Scheduling [236]: SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2


Examining Available:
Height 237: SU(385): t9: i32 = IMPLICIT_DEF

Height 237: SU(387): t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 237: SU(375): t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [237]: SU(385): t9: i32 = IMPLICIT_DEF


Examining Available:
Height 237: SU(387): t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 237: SU(375): t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [238]: SU(387): t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 237: SU(375): t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [239]: SU(375): t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 237: SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [240]: SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 241: SU(344): t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

    t703: ch,glue = CopyToReg t700:1, Register:i32 $r0, t692

    t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

    t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

    t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

    t709: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707, t707:1

    t710: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t709:1, t709:2

    t711: i32,ch,glue = CopyFromReg t710:1, Register:i32 $r0, t710:2

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [241]: SU(344): t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

    t703: ch,glue = CopyToReg t700:1, Register:i32 $r0, t692

    t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

    t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

    t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

    t709: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707, t707:1

    t710: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t709:1, t709:2

    t711: i32,ch,glue = CopyFromReg t710:1, Register:i32 $r0, t710:2


Examining Available:
Height 242: SU(347): t700: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 242: SU(345): t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg

Height 242: SU(346): t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg

Height 242: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [242]: SU(347): t700: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 242: SU(345): t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg

Height 242: SU(346): t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg

Height 242: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [243]: SU(345): t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 242: SU(346): t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg

Height 244: SU(89): t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [244]: SU(346): t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 245: SU(279): t687: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 244: SU(89): t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [245]: SU(279): t687: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 244: SU(89): t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [246]: SU(89): t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 242: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [247]: SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 242: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [248]: SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 240: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [249]: SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 241: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

Height 250: SU(377): t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [250]: SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 251: SU(349): t745: i32 = tEOR Register:i32 $cpsr, t742, t740, TargetConstant:i32<14>, Register:i32 $noreg

Height 250: SU(377): t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [251]: SU(349): t745: i32 = tEOR Register:i32 $cpsr, t742, t740, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 250: SU(377): t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg

Height 252: SU(350): t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [252]: SU(377): t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 253: SU(378): t739: i32 = tAND Register:i32 $cpsr, t1265, t1269, TargetConstant:i32<14>, Register:i32 $noreg

Height 252: SU(350): t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [253]: SU(378): t739: i32 = tAND Register:i32 $cpsr, t1265, t1269, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 252: SU(350): t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [254]: SU(350): t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 255: SU(351): t1256: i32,i32 = tADCS t722, t719, t1585:1

    t1585: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1269:1

Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [255]: SU(351): t1256: i32,i32 = tADCS t722, t719, t1585:1

    t1585: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1269:1


Examining Available:
Height 256: SU(352): t1269: i32,i32 = tADDSrr t721, t718

Height 256: SU(284): t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 256: SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [256]: SU(352): t1269: i32,i32 = tADDSrr t721, t718


Examining Available:
Height 257: SU(285): t718: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 256: SU(284): t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 257: SU(288): t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 256: SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [257]: SU(285): t718: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 256: SU(284): t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 257: SU(288): t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 256: SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [258]: SU(284): t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 257: SU(288): t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 256: SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [259]: SU(288): t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 256: SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [260]: SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 255: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [261]: SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1


Examining Available:
Height 262: SU(354): t1265: i32,i32 = tSUBSrr t1272, t726

Height 262: SU(290): t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 262: SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [262]: SU(354): t1265: i32,i32 = tSUBSrr t1272, t726


Examining Available:
Height 263: SU(291): t726: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 262: SU(290): t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 262: SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [263]: SU(291): t726: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 262: SU(290): t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 262: SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [264]: SU(290): t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 262: SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [265]: SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1


Examining Available:
Height 266: SU(355): t1272: i32,i32 = tSUBSrr t732, t729

Height 266: SU(293): t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 266: SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [266]: SU(355): t1272: i32,i32 = tSUBSrr t732, t729


Examining Available:
Height 267: SU(294): t729: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 266: SU(293): t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 267: SU(297): t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 266: SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [267]: SU(294): t729: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 266: SU(293): t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 267: SU(297): t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 266: SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [268]: SU(293): t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 267: SU(297): t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 266: SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [269]: SU(297): t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 266: SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [270]: SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 253: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [271]: SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 252: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [272]: SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 250: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [273]: SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 251: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(380): t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [274]: SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 274: SU(380): t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(358): t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [275]: SU(380): t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 275: SU(358): t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [276]: SU(358): t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 277: SU(359): t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

    t759: ch,glue = CopyToReg t757:1, Register:i32 $r0, t749

    t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

    t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

    t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

    t764: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762, t762:1

    t765: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t764:1, t764:2

    t766: i32,ch,glue = CopyFromReg t765:1, Register:i32 $r0, t765:2

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [277]: SU(359): t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

    t759: ch,glue = CopyToReg t757:1, Register:i32 $r0, t749

    t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

    t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

    t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

    t764: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762, t762:1

    t765: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t764:1, t764:2

    t766: i32,ch,glue = CopyFromReg t765:1, Register:i32 $r0, t765:2


Examining Available:
Height 278: SU(360): t757: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 278: SU(302): t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(303): t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [278]: SU(360): t757: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 278: SU(302): t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(303): t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [279]: SU(302): t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 278: SU(303): t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [280]: SU(303): t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 278: SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 278: SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [281]: SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 278: SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [282]: SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 276: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [283]: SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 277: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [284]: SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 285: SU(362): t1243: i32,i32 = tADCS t794, t773, t1583:1

    t1583: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1246:1

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [285]: SU(362): t1243: i32,i32 = tADCS t794, t773, t1583:1

    t1583: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1246:1


Examining Available:
Height 286: SU(363): t1246: i32,i32 = tADDSrr t793, t772

Height 286: SU(308): t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [286]: SU(363): t1246: i32,i32 = tADDSrr t793, t772


Examining Available:
Height 287: SU(309): t772: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 286: SU(308): t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 287: SU(364): t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

    t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778

    t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

    t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

    t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

    t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1

    t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2

    t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [287]: SU(309): t772: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 286: SU(308): t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 287: SU(364): t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

    t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778

    t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

    t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

    t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

    t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1

    t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2

    t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [288]: SU(308): t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 287: SU(364): t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

    t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778

    t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

    t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

    t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

    t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1

    t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2

    t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [289]: SU(364): t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

    t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778

    t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

    t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

    t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

    t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1

    t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2

    t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2


Examining Available:
Height 290: SU(365): t785: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 290: SU(311): t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(312): t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [290]: SU(365): t785: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 290: SU(311): t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(312): t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [291]: SU(311): t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 290: SU(312): t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [292]: SU(312): t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 290: SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 290: SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [293]: SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 290: SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [294]: SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 285: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [295]: SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1


Examining Available:
Height 296: SU(367): t1239: i32,i32 = tADDSrr t848, t842

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [296]: SU(367): t1239: i32,i32 = tADDSrr t848, t842


Examining Available:
Height 297: SU(368): t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

    t836: ch,glue = CopyToReg t834:1, Register:i32 $r0, t824

    t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

    t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

    t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

    t840: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839, t839:1

    t841: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t840:1, t840:2

    t842: i32,ch,glue = CopyFromReg t841:1, Register:i32 $r0, t841:2

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [297]: SU(368): t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

    t836: ch,glue = CopyToReg t834:1, Register:i32 $r0, t824

    t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

    t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

    t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

    t840: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839, t839:1

    t841: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t840:1, t840:2

    t842: i32,ch,glue = CopyFromReg t841:1, Register:i32 $r0, t841:2


Examining Available:
Height 298: SU(371): t834: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 298: SU(317): t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 298: SU(318): t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 298: SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [298]: SU(371): t834: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 298: SU(317): t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 298: SU(318): t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 298: SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [299]: SU(317): t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 298: SU(318): t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 298: SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [300]: SU(318): t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 298: SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [301]: SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2


Examining Available:
Height 302: SU(370): t815: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 302: SU(320): t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(321): t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [302]: SU(370): t815: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 302: SU(320): t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(321): t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [303]: SU(320): t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 302: SU(321): t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [304]: SU(321): t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 302: SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 302: SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [305]: SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 302: SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [306]: SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 297: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [307]: SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 296: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [308]: SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 275: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [309]: SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 274: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

Height 310: SU(329): t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 310: SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [310]: SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 311: SU(330): t857: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 310: SU(329): t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 311: SU(383): t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg

Height 310: SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [311]: SU(330): t857: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 310: SU(329): t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 311: SU(383): t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg

Height 310: SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [312]: SU(329): t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 311: SU(383): t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg

Height 310: SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [313]: SU(383): t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 310: SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

Height 314: SU(333): t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 314: SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [314]: SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 315: SU(332): t861: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 314: SU(333): t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 315: SU(374): t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg

Height 314: SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [315]: SU(332): t861: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 314: SU(333): t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 315: SU(374): t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg

Height 314: SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [316]: SU(333): t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 315: SU(374): t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg

Height 314: SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [317]: SU(374): t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 314: SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

Height 318: SU(335): t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 318: SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [318]: SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 319: SU(336): t863: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 318: SU(335): t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 319: SU(339): t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 318: SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [319]: SU(336): t863: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 318: SU(335): t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 319: SU(339): t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 318: SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [320]: SU(335): t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 319: SU(339): t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 318: SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [321]: SU(339): t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 318: SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [322]: SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 237: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [323]: SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 324: SU(340): t164: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

Height 324: SU(341): t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


*** Scheduling [324]: SU(340): t164: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 324: SU(341): t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


*** Scheduling [325]: SU(341): t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686


Examining Available:
Height 325: SU(90): t686: ch = TokenFactor t683, t685


*** Scheduling [326]: SU(90): t686: ch = TokenFactor t683, t685


Examining Available:
  Comparing latency of SU (278) depth 106 vs SU (91) depth 107
Height 327: SU(91): t685: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1278, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

Height 327: SU(278): t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

  Comparing latency of SU (278) depth 106 vs SU (91) depth 107

*** Scheduling [327]: SU(91): t685: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1278, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1


Examining Available:
Height 327: SU(278): t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

Height 328: SU(273): t1278: i32,i32 = tSBCS t8, t680, t1589:1

    t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1


*** Scheduling [328]: SU(278): t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1


Examining Available:
Height 328: SU(273): t1278: i32,i32 = tSBCS t8, t680, t1589:1

    t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1


*** Scheduling [329]: SU(273): t1278: i32,i32 = tSBCS t8, t680, t1589:1

    t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1


Examining Available:
Height 330: SU(274): t1282: i32,i32 = tRSBS t158

Height 330: SU(277): t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [330]: SU(274): t1282: i32,i32 = tRSBS t158


Examining Available:
Height 330: SU(277): t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [331]: SU(277): t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 332: SU(275): t158: i32 = tMUL nsw Register:i32 $cpsr, t156, t157, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [332]: SU(275): t158: i32 = tMUL nsw Register:i32 $cpsr, t156, t157, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 333: SU(276): t157: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg

Height 333: SU(92): t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679


*** Scheduling [333]: SU(276): t157: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 333: SU(92): t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679


*** Scheduling [334]: SU(92): t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679


Examining Available:
Height 334: SU(93): t679: ch = TokenFactor t676, t678


*** Scheduling [335]: SU(93): t679: ch = TokenFactor t676, t678


Examining Available:
  Comparing latency of SU (272) depth 101 vs SU (94) depth 102
Height 336: SU(94): t678: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1288, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

Height 336: SU(272): t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

  Comparing latency of SU (272) depth 101 vs SU (94) depth 102

*** Scheduling [336]: SU(94): t678: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1288, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1


Examining Available:
Height 336: SU(272): t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

Height 337: SU(267): t1288: i32,i32 = tSBCS t8, t673, t1592:1

    t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1


*** Scheduling [337]: SU(272): t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1


Examining Available:
Height 337: SU(267): t1288: i32,i32 = tSBCS t8, t673, t1592:1

    t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1


*** Scheduling [338]: SU(267): t1288: i32,i32 = tSBCS t8, t673, t1592:1

    t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1


Examining Available:
Height 339: SU(268): t1292: i32,i32 = tRSBS t151

Height 339: SU(271): t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [339]: SU(268): t1292: i32,i32 = tRSBS t151


Examining Available:
Height 339: SU(271): t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [340]: SU(271): t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 341: SU(269): t151: i32 = tMUL nsw Register:i32 $cpsr, t149, t150, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [341]: SU(269): t151: i32 = tMUL nsw Register:i32 $cpsr, t149, t150, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 342: SU(270): t150: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg

Height 342: SU(95): t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672


*** Scheduling [342]: SU(270): t150: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 342: SU(95): t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672


*** Scheduling [343]: SU(95): t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672


Examining Available:
Height 343: SU(96): t672: ch = TokenFactor t669, t671


*** Scheduling [344]: SU(96): t672: ch = TokenFactor t669, t671


Examining Available:
  Comparing latency of SU (266) depth 96 vs SU (97) depth 97
Height 345: SU(97): t671: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1298, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

Height 345: SU(266): t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

  Comparing latency of SU (266) depth 96 vs SU (97) depth 97

*** Scheduling [345]: SU(97): t671: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1298, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1


Examining Available:
Height 345: SU(266): t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

Height 346: SU(261): t1298: i32,i32 = tSBCS t8, t666, t1593:1

    t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1


*** Scheduling [346]: SU(266): t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1


Examining Available:
Height 346: SU(261): t1298: i32,i32 = tSBCS t8, t666, t1593:1

    t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1


*** Scheduling [347]: SU(261): t1298: i32,i32 = tSBCS t8, t666, t1593:1

    t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1


Examining Available:
Height 348: SU(262): t1302: i32,i32 = tRSBS t144

Height 348: SU(265): t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [348]: SU(262): t1302: i32,i32 = tRSBS t144


Examining Available:
Height 348: SU(265): t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [349]: SU(265): t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 350: SU(263): t144: i32 = tMUL nsw Register:i32 $cpsr, t142, t143, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [350]: SU(263): t144: i32 = tMUL nsw Register:i32 $cpsr, t142, t143, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 351: SU(264): t143: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg

Height 351: SU(98): t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665


*** Scheduling [351]: SU(264): t143: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 351: SU(98): t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665


*** Scheduling [352]: SU(98): t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665


Examining Available:
Height 352: SU(99): t665: ch = TokenFactor t662, t664


*** Scheduling [353]: SU(99): t665: ch = TokenFactor t662, t664


Examining Available:
  Comparing latency of SU (260) depth 91 vs SU (100) depth 92
Height 354: SU(100): t664: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1308, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

Height 354: SU(260): t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

  Comparing latency of SU (260) depth 91 vs SU (100) depth 92

*** Scheduling [354]: SU(100): t664: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1308, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1


Examining Available:
Height 354: SU(260): t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

Height 355: SU(255): t1308: i32,i32 = tSBCS t8, t659, t1594:1

    t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1


*** Scheduling [355]: SU(260): t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1


Examining Available:
Height 355: SU(255): t1308: i32,i32 = tSBCS t8, t659, t1594:1

    t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1


*** Scheduling [356]: SU(255): t1308: i32,i32 = tSBCS t8, t659, t1594:1

    t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1


Examining Available:
Height 357: SU(256): t1312: i32,i32 = tRSBS t137

Height 357: SU(259): t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [357]: SU(256): t1312: i32,i32 = tRSBS t137


Examining Available:
Height 357: SU(259): t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [358]: SU(259): t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 359: SU(257): t137: i32 = tMUL nsw Register:i32 $cpsr, t135, t136, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [359]: SU(257): t137: i32 = tMUL nsw Register:i32 $cpsr, t135, t136, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 360: SU(258): t136: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg

Height 360: SU(101): t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658


*** Scheduling [360]: SU(258): t136: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 360: SU(101): t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658


*** Scheduling [361]: SU(101): t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658


Examining Available:
Height 361: SU(102): t658: ch = TokenFactor t655, t657


*** Scheduling [362]: SU(102): t658: ch = TokenFactor t655, t657


Examining Available:
  Comparing latency of SU (254) depth 86 vs SU (103) depth 87
Height 363: SU(103): t657: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1318, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

Height 363: SU(254): t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

  Comparing latency of SU (254) depth 86 vs SU (103) depth 87

*** Scheduling [363]: SU(103): t657: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1318, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1


Examining Available:
Height 363: SU(254): t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

Height 364: SU(249): t1318: i32,i32 = tSBCS t8, t652, t1595:1

    t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1


*** Scheduling [364]: SU(254): t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1


Examining Available:
Height 364: SU(249): t1318: i32,i32 = tSBCS t8, t652, t1595:1

    t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1


*** Scheduling [365]: SU(249): t1318: i32,i32 = tSBCS t8, t652, t1595:1

    t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1


Examining Available:
Height 366: SU(250): t1322: i32,i32 = tRSBS t130

Height 366: SU(253): t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [366]: SU(250): t1322: i32,i32 = tRSBS t130


Examining Available:
Height 366: SU(253): t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [367]: SU(253): t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 368: SU(251): t130: i32 = tMUL nsw Register:i32 $cpsr, t128, t129, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [368]: SU(251): t130: i32 = tMUL nsw Register:i32 $cpsr, t128, t129, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 369: SU(252): t129: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg

Height 369: SU(104): t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651


*** Scheduling [369]: SU(252): t129: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 369: SU(104): t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651


*** Scheduling [370]: SU(104): t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651


Examining Available:
Height 370: SU(105): t651: ch = TokenFactor t648, t650


*** Scheduling [371]: SU(105): t651: ch = TokenFactor t648, t650


Examining Available:
  Comparing latency of SU (248) depth 81 vs SU (106) depth 82
Height 372: SU(106): t650: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1328, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

Height 372: SU(248): t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

  Comparing latency of SU (248) depth 81 vs SU (106) depth 82

*** Scheduling [372]: SU(106): t650: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1328, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1


Examining Available:
Height 372: SU(248): t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

Height 373: SU(244): t1328: i32,i32 = tSBCS t8, t645, t1596:1

    t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1


*** Scheduling [373]: SU(248): t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1


Examining Available:
Height 373: SU(244): t1328: i32,i32 = tSBCS t8, t645, t1596:1

    t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1


*** Scheduling [374]: SU(244): t1328: i32,i32 = tSBCS t8, t645, t1596:1

    t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1


Examining Available:
Height 375: SU(245): t1332: i32,i32 = tRSBS t511

Height 375: SU(247): t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [375]: SU(245): t1332: i32,i32 = tRSBS t511


Examining Available:
Height 375: SU(247): t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [376]: SU(247): t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 377: SU(246): t511: i32 = tLSLri Register:i32 $cpsr, t121, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [377]: SU(246): t511: i32 = tLSLri Register:i32 $cpsr, t121, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 378: SU(107): t121: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t644


*** Scheduling [378]: SU(107): t121: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t644


Examining Available:
Height 378: SU(108): t644: ch = TokenFactor t641, t643


*** Scheduling [379]: SU(108): t644: ch = TokenFactor t641, t643


Examining Available:
  Comparing latency of SU (243) depth 76 vs SU (109) depth 77
Height 380: SU(109): t643: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1338, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

Height 380: SU(243): t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

  Comparing latency of SU (243) depth 76 vs SU (109) depth 77

*** Scheduling [380]: SU(109): t643: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1338, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1


Examining Available:
Height 380: SU(243): t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

Height 381: SU(238): t1338: i32,i32 = tSBCS t8, t638, t1598:1

    t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1


*** Scheduling [381]: SU(243): t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1


Examining Available:
Height 381: SU(238): t1338: i32,i32 = tSBCS t8, t638, t1598:1

    t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1


*** Scheduling [382]: SU(238): t1338: i32,i32 = tSBCS t8, t638, t1598:1

    t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1


Examining Available:
Height 383: SU(239): t1342: i32,i32 = tRSBS t116

Height 383: SU(242): t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [383]: SU(239): t1342: i32,i32 = tRSBS t116


Examining Available:
Height 383: SU(242): t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [384]: SU(242): t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 385: SU(240): t116: i32 = tMUL nsw Register:i32 $cpsr, t114, t115, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [385]: SU(240): t116: i32 = tMUL nsw Register:i32 $cpsr, t114, t115, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 386: SU(241): t115: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg

Height 386: SU(110): t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637


*** Scheduling [386]: SU(241): t115: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 386: SU(110): t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637


*** Scheduling [387]: SU(110): t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637


Examining Available:
Height 387: SU(111): t637: ch = TokenFactor t634, t636


*** Scheduling [388]: SU(111): t637: ch = TokenFactor t634, t636


Examining Available:
  Comparing latency of SU (237) depth 71 vs SU (112) depth 72
Height 389: SU(112): t636: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1348, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

Height 389: SU(237): t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

  Comparing latency of SU (237) depth 71 vs SU (112) depth 72

*** Scheduling [389]: SU(112): t636: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1348, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1


Examining Available:
Height 389: SU(237): t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

Height 390: SU(232): t1348: i32,i32 = tSBCS t8, t631, t1599:1

    t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1


*** Scheduling [390]: SU(237): t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1


Examining Available:
Height 390: SU(232): t1348: i32,i32 = tSBCS t8, t631, t1599:1

    t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1


*** Scheduling [391]: SU(232): t1348: i32,i32 = tSBCS t8, t631, t1599:1

    t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1


Examining Available:
Height 392: SU(233): t1352: i32,i32 = tRSBS t109

Height 392: SU(236): t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [392]: SU(233): t1352: i32,i32 = tRSBS t109


Examining Available:
Height 392: SU(236): t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [393]: SU(236): t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 394: SU(234): t109: i32 = tMUL nsw Register:i32 $cpsr, t107, t108, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [394]: SU(234): t109: i32 = tMUL nsw Register:i32 $cpsr, t107, t108, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 395: SU(235): t108: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg

Height 395: SU(113): t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630


*** Scheduling [395]: SU(235): t108: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 395: SU(113): t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630


*** Scheduling [396]: SU(113): t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630


Examining Available:
Height 396: SU(114): t630: ch = TokenFactor t627, t629


*** Scheduling [397]: SU(114): t630: ch = TokenFactor t627, t629


Examining Available:
  Comparing latency of SU (231) depth 66 vs SU (115) depth 67
Height 398: SU(115): t629: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1358, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

Height 398: SU(231): t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

  Comparing latency of SU (231) depth 66 vs SU (115) depth 67

*** Scheduling [398]: SU(115): t629: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1358, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1


Examining Available:
Height 398: SU(231): t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

Height 399: SU(226): t1358: i32,i32 = tSBCS t8, t624, t1600:1

    t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1


*** Scheduling [399]: SU(231): t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1


Examining Available:
Height 399: SU(226): t1358: i32,i32 = tSBCS t8, t624, t1600:1

    t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1


*** Scheduling [400]: SU(226): t1358: i32,i32 = tSBCS t8, t624, t1600:1

    t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1


Examining Available:
Height 401: SU(227): t1362: i32,i32 = tRSBS t102

Height 401: SU(230): t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [401]: SU(227): t1362: i32,i32 = tRSBS t102


Examining Available:
Height 401: SU(230): t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [402]: SU(230): t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 403: SU(228): t102: i32 = tMUL nsw Register:i32 $cpsr, t100, t101, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [403]: SU(228): t102: i32 = tMUL nsw Register:i32 $cpsr, t100, t101, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 404: SU(229): t101: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg

Height 404: SU(116): t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623


*** Scheduling [404]: SU(229): t101: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 404: SU(116): t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623


*** Scheduling [405]: SU(116): t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623


Examining Available:
Height 405: SU(117): t623: ch = TokenFactor t620, t622


*** Scheduling [406]: SU(117): t623: ch = TokenFactor t620, t622


Examining Available:
  Comparing latency of SU (225) depth 61 vs SU (118) depth 62
Height 407: SU(118): t622: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1368, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

Height 407: SU(225): t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

  Comparing latency of SU (225) depth 61 vs SU (118) depth 62

*** Scheduling [407]: SU(118): t622: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1368, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1


Examining Available:
Height 407: SU(225): t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

Height 408: SU(220): t1368: i32,i32 = tSBCS t8, t617, t1601:1

    t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1


*** Scheduling [408]: SU(225): t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1


Examining Available:
Height 408: SU(220): t1368: i32,i32 = tSBCS t8, t617, t1601:1

    t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1


*** Scheduling [409]: SU(220): t1368: i32,i32 = tSBCS t8, t617, t1601:1

    t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1


Examining Available:
Height 410: SU(221): t1372: i32,i32 = tRSBS t95

Height 410: SU(224): t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [410]: SU(221): t1372: i32,i32 = tRSBS t95


Examining Available:
Height 410: SU(224): t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [411]: SU(224): t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 412: SU(222): t95: i32 = tMUL nsw Register:i32 $cpsr, t93, t94, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [412]: SU(222): t95: i32 = tMUL nsw Register:i32 $cpsr, t93, t94, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 413: SU(223): t94: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg

Height 413: SU(119): t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616


*** Scheduling [413]: SU(223): t94: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 413: SU(119): t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616


*** Scheduling [414]: SU(119): t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616


Examining Available:
Height 414: SU(120): t616: ch = TokenFactor t613, t615


*** Scheduling [415]: SU(120): t616: ch = TokenFactor t613, t615


Examining Available:
  Comparing latency of SU (219) depth 56 vs SU (121) depth 57
Height 416: SU(121): t615: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1378, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

Height 416: SU(219): t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

  Comparing latency of SU (219) depth 56 vs SU (121) depth 57

*** Scheduling [416]: SU(121): t615: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1378, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1


Examining Available:
Height 416: SU(219): t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

Height 417: SU(214): t1378: i32,i32 = tSBCS t8, t610, t1602:1

    t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1


*** Scheduling [417]: SU(219): t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1


Examining Available:
Height 417: SU(214): t1378: i32,i32 = tSBCS t8, t610, t1602:1

    t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1


*** Scheduling [418]: SU(214): t1378: i32,i32 = tSBCS t8, t610, t1602:1

    t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1


Examining Available:
Height 419: SU(215): t1382: i32,i32 = tRSBS t88

Height 419: SU(218): t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [419]: SU(215): t1382: i32,i32 = tRSBS t88


Examining Available:
Height 419: SU(218): t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [420]: SU(218): t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 421: SU(216): t88: i32 = tMUL nsw Register:i32 $cpsr, t86, t87, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [421]: SU(216): t88: i32 = tMUL nsw Register:i32 $cpsr, t86, t87, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 422: SU(217): t87: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg

Height 422: SU(122): t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609


*** Scheduling [422]: SU(217): t87: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 422: SU(122): t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609


*** Scheduling [423]: SU(122): t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609


Examining Available:
Height 423: SU(123): t609: ch = TokenFactor t606, t608


*** Scheduling [424]: SU(123): t609: ch = TokenFactor t606, t608


Examining Available:
  Comparing latency of SU (213) depth 51 vs SU (124) depth 52
Height 425: SU(124): t608: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1388, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

Height 425: SU(213): t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

  Comparing latency of SU (213) depth 51 vs SU (124) depth 52

*** Scheduling [425]: SU(124): t608: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1388, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1


Examining Available:
Height 425: SU(213): t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

Height 426: SU(208): t1388: i32,i32 = tSBCS t8, t603, t1603:1

    t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1


*** Scheduling [426]: SU(213): t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1


Examining Available:
Height 426: SU(208): t1388: i32,i32 = tSBCS t8, t603, t1603:1

    t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1


*** Scheduling [427]: SU(208): t1388: i32,i32 = tSBCS t8, t603, t1603:1

    t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1


Examining Available:
Height 428: SU(209): t1392: i32,i32 = tRSBS t81

Height 428: SU(212): t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [428]: SU(209): t1392: i32,i32 = tRSBS t81


Examining Available:
Height 428: SU(212): t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [429]: SU(212): t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 430: SU(210): t81: i32 = tMUL nsw Register:i32 $cpsr, t79, t80, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [430]: SU(210): t81: i32 = tMUL nsw Register:i32 $cpsr, t79, t80, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 431: SU(211): t80: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg

Height 431: SU(125): t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602


*** Scheduling [431]: SU(211): t80: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 431: SU(125): t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602


*** Scheduling [432]: SU(125): t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602


Examining Available:
Height 432: SU(126): t602: ch = TokenFactor t599, t601


*** Scheduling [433]: SU(126): t602: ch = TokenFactor t599, t601


Examining Available:
  Comparing latency of SU (207) depth 46 vs SU (127) depth 47
Height 434: SU(127): t601: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1398, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

Height 434: SU(207): t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

  Comparing latency of SU (207) depth 46 vs SU (127) depth 47

*** Scheduling [434]: SU(127): t601: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1398, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1


Examining Available:
Height 434: SU(207): t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

Height 435: SU(202): t1398: i32,i32 = tSBCS t8, t596, t1604:1

    t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1


*** Scheduling [435]: SU(207): t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1


Examining Available:
Height 435: SU(202): t1398: i32,i32 = tSBCS t8, t596, t1604:1

    t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1


*** Scheduling [436]: SU(202): t1398: i32,i32 = tSBCS t8, t596, t1604:1

    t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1


Examining Available:
Height 437: SU(203): t1402: i32,i32 = tRSBS t74

Height 437: SU(206): t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [437]: SU(203): t1402: i32,i32 = tRSBS t74


Examining Available:
Height 437: SU(206): t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [438]: SU(206): t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 439: SU(204): t74: i32 = tMUL nsw Register:i32 $cpsr, t72, t73, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [439]: SU(204): t74: i32 = tMUL nsw Register:i32 $cpsr, t72, t73, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 440: SU(205): t73: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg

Height 440: SU(128): t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595


*** Scheduling [440]: SU(205): t73: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 440: SU(128): t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595


*** Scheduling [441]: SU(128): t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595


Examining Available:
Height 441: SU(129): t595: ch = TokenFactor t592, t594


*** Scheduling [442]: SU(129): t595: ch = TokenFactor t592, t594


Examining Available:
  Comparing latency of SU (201) depth 41 vs SU (130) depth 42
Height 443: SU(130): t594: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1408, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

Height 443: SU(201): t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

  Comparing latency of SU (201) depth 41 vs SU (130) depth 42

*** Scheduling [443]: SU(130): t594: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1408, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1


Examining Available:
Height 443: SU(201): t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

Height 444: SU(197): t1408: i32,i32 = tSBCS t8, t589, t1605:1

    t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1


*** Scheduling [444]: SU(201): t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1


Examining Available:
Height 444: SU(197): t1408: i32,i32 = tSBCS t8, t589, t1605:1

    t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1


*** Scheduling [445]: SU(197): t1408: i32,i32 = tSBCS t8, t589, t1605:1

    t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1


Examining Available:
Height 446: SU(198): t1412: i32,i32 = tRSBS t522

Height 446: SU(200): t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [446]: SU(198): t1412: i32,i32 = tRSBS t522


Examining Available:
Height 446: SU(200): t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [447]: SU(200): t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 448: SU(199): t522: i32 = tLSLri Register:i32 $cpsr, t65, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [448]: SU(199): t522: i32 = tLSLri Register:i32 $cpsr, t65, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 449: SU(131): t65: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t588


*** Scheduling [449]: SU(131): t65: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t588


Examining Available:
Height 449: SU(132): t588: ch = TokenFactor t585, t587


*** Scheduling [450]: SU(132): t588: ch = TokenFactor t585, t587


Examining Available:
  Comparing latency of SU (196) depth 36 vs SU (133) depth 37
Height 451: SU(133): t587: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1418, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

Height 451: SU(196): t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

  Comparing latency of SU (196) depth 36 vs SU (133) depth 37

*** Scheduling [451]: SU(133): t587: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1418, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1


Examining Available:
Height 451: SU(196): t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

Height 452: SU(191): t1418: i32,i32 = tSBCS t8, t582, t1607:1

    t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1


*** Scheduling [452]: SU(196): t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1


Examining Available:
Height 452: SU(191): t1418: i32,i32 = tSBCS t8, t582, t1607:1

    t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1


*** Scheduling [453]: SU(191): t1418: i32,i32 = tSBCS t8, t582, t1607:1

    t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1


Examining Available:
Height 454: SU(192): t1422: i32,i32 = tRSBS t60

Height 454: SU(195): t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [454]: SU(192): t1422: i32,i32 = tRSBS t60


Examining Available:
Height 454: SU(195): t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [455]: SU(195): t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 456: SU(193): t60: i32 = tMUL nsw Register:i32 $cpsr, t58, t59, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [456]: SU(193): t60: i32 = tMUL nsw Register:i32 $cpsr, t58, t59, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 457: SU(194): t59: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg

Height 457: SU(134): t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581


*** Scheduling [457]: SU(194): t59: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 457: SU(134): t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581


*** Scheduling [458]: SU(134): t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581


Examining Available:
Height 458: SU(135): t581: ch = TokenFactor t578, t580


*** Scheduling [459]: SU(135): t581: ch = TokenFactor t578, t580


Examining Available:
  Comparing latency of SU (190) depth 31 vs SU (136) depth 32
Height 460: SU(136): t580: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1428, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

Height 460: SU(190): t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

  Comparing latency of SU (190) depth 31 vs SU (136) depth 32

*** Scheduling [460]: SU(136): t580: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1428, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1


Examining Available:
Height 460: SU(190): t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

Height 461: SU(185): t1428: i32,i32 = tSBCS t8, t575, t1608:1

    t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1


*** Scheduling [461]: SU(190): t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1


Examining Available:
Height 461: SU(185): t1428: i32,i32 = tSBCS t8, t575, t1608:1

    t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1


*** Scheduling [462]: SU(185): t1428: i32,i32 = tSBCS t8, t575, t1608:1

    t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1


Examining Available:
Height 463: SU(186): t1432: i32,i32 = tRSBS t53

Height 463: SU(189): t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [463]: SU(186): t1432: i32,i32 = tRSBS t53


Examining Available:
Height 463: SU(189): t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [464]: SU(189): t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 465: SU(187): t53: i32 = tMUL nsw Register:i32 $cpsr, t51, t52, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [465]: SU(187): t53: i32 = tMUL nsw Register:i32 $cpsr, t51, t52, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 466: SU(188): t52: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg

Height 466: SU(137): t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574


*** Scheduling [466]: SU(188): t52: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 466: SU(137): t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574


*** Scheduling [467]: SU(137): t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574


Examining Available:
Height 467: SU(138): t574: ch = TokenFactor t571, t573


*** Scheduling [468]: SU(138): t574: ch = TokenFactor t571, t573


Examining Available:
  Comparing latency of SU (184) depth 26 vs SU (139) depth 27
Height 469: SU(139): t573: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1438, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

Height 469: SU(184): t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

  Comparing latency of SU (184) depth 26 vs SU (139) depth 27

*** Scheduling [469]: SU(139): t573: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1438, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1


Examining Available:
Height 469: SU(184): t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

Height 470: SU(179): t1438: i32,i32 = tSBCS t8, t568, t1609:1

    t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1


*** Scheduling [470]: SU(184): t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1


Examining Available:
Height 470: SU(179): t1438: i32,i32 = tSBCS t8, t568, t1609:1

    t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1


*** Scheduling [471]: SU(179): t1438: i32,i32 = tSBCS t8, t568, t1609:1

    t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1


Examining Available:
Height 472: SU(180): t1442: i32,i32 = tRSBS t46

Height 472: SU(183): t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [472]: SU(180): t1442: i32,i32 = tRSBS t46


Examining Available:
Height 472: SU(183): t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [473]: SU(183): t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 474: SU(181): t46: i32 = tMUL nsw Register:i32 $cpsr, t44, t45, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [474]: SU(181): t46: i32 = tMUL nsw Register:i32 $cpsr, t44, t45, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 475: SU(182): t45: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg

Height 475: SU(140): t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567


*** Scheduling [475]: SU(182): t45: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 475: SU(140): t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567


*** Scheduling [476]: SU(140): t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567


Examining Available:
Height 476: SU(141): t567: ch = TokenFactor t564, t566


*** Scheduling [477]: SU(141): t567: ch = TokenFactor t564, t566


Examining Available:
  Comparing latency of SU (178) depth 21 vs SU (142) depth 22
Height 478: SU(142): t566: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1448, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

Height 478: SU(178): t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

  Comparing latency of SU (178) depth 21 vs SU (142) depth 22

*** Scheduling [478]: SU(142): t566: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1448, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1


Examining Available:
Height 478: SU(178): t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

Height 479: SU(174): t1448: i32,i32 = tSBCS t8, t561, t1610:1

    t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1


*** Scheduling [479]: SU(178): t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1


Examining Available:
Height 479: SU(174): t1448: i32,i32 = tSBCS t8, t561, t1610:1

    t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1


*** Scheduling [480]: SU(174): t1448: i32,i32 = tSBCS t8, t561, t1610:1

    t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1


Examining Available:
Height 481: SU(175): t1452: i32,i32 = tRSBS t529

Height 481: SU(177): t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [481]: SU(175): t1452: i32,i32 = tRSBS t529


Examining Available:
Height 481: SU(177): t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [482]: SU(177): t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 483: SU(176): t529: i32 = tLSLri Register:i32 $cpsr, t37, TargetConstant:i32<2>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [483]: SU(176): t529: i32 = tLSLri Register:i32 $cpsr, t37, TargetConstant:i32<2>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 484: SU(143): t37: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t560


*** Scheduling [484]: SU(143): t37: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t560


Examining Available:
Height 484: SU(144): t560: ch = TokenFactor t557, t559


*** Scheduling [485]: SU(144): t560: ch = TokenFactor t557, t559


Examining Available:
  Comparing latency of SU (173) depth 16 vs SU (145) depth 17
Height 486: SU(145): t559: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1458, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

Height 486: SU(173): t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

  Comparing latency of SU (173) depth 16 vs SU (145) depth 17

*** Scheduling [486]: SU(145): t559: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1458, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1


Examining Available:
Height 486: SU(173): t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

Height 487: SU(168): t1458: i32,i32 = tSBCS t8, t554, t1612:1

    t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1


*** Scheduling [487]: SU(173): t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1


Examining Available:
Height 487: SU(168): t1458: i32,i32 = tSBCS t8, t554, t1612:1

    t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1


*** Scheduling [488]: SU(168): t1458: i32,i32 = tSBCS t8, t554, t1612:1

    t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1


Examining Available:
Height 489: SU(169): t1462: i32,i32 = tRSBS t32

Height 489: SU(172): t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [489]: SU(169): t1462: i32,i32 = tRSBS t32


Examining Available:
Height 489: SU(172): t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [490]: SU(172): t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 491: SU(170): t32: i32 = tMUL nsw Register:i32 $cpsr, t30, t31, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [491]: SU(170): t32: i32 = tMUL nsw Register:i32 $cpsr, t30, t31, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 492: SU(171): t31: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg

Height 492: SU(146): t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553


*** Scheduling [492]: SU(171): t31: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 492: SU(146): t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553


*** Scheduling [493]: SU(146): t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553


Examining Available:
Height 493: SU(147): t553: ch = TokenFactor t550, t552


*** Scheduling [494]: SU(147): t553: ch = TokenFactor t550, t552


Examining Available:
  Comparing latency of SU (167) depth 11 vs SU (148) depth 12
Height 495: SU(148): t552: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1468, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

Height 495: SU(167): t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

  Comparing latency of SU (167) depth 11 vs SU (148) depth 12

*** Scheduling [495]: SU(148): t552: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1468, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1


Examining Available:
Height 495: SU(167): t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

Height 496: SU(163): t1468: i32,i32 = tSBCS t8, t547, t1613:1

    t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1


*** Scheduling [496]: SU(167): t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1


Examining Available:
Height 496: SU(163): t1468: i32,i32 = tSBCS t8, t547, t1613:1

    t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1


*** Scheduling [497]: SU(163): t1468: i32,i32 = tSBCS t8, t547, t1613:1

    t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1


Examining Available:
Height 498: SU(164): t1472: i32,i32 = tRSBS t534

Height 498: SU(166): t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [498]: SU(164): t1472: i32,i32 = tRSBS t534


Examining Available:
Height 498: SU(166): t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [499]: SU(166): t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 500: SU(165): t534: i32 = tLSLri Register:i32 $cpsr, t23, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [500]: SU(165): t534: i32 = tLSLri Register:i32 $cpsr, t23, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 501: SU(149): t23: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t546


*** Scheduling [501]: SU(149): t23: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t546


Examining Available:
Height 501: SU(150): t546: ch = TokenFactor t543, t545


*** Scheduling [502]: SU(150): t546: ch = TokenFactor t543, t545


Examining Available:
  Comparing latency of SU (162) depth 6 vs SU (151) depth 7
Height 503: SU(151): t545: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1478, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

Height 503: SU(162): t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

  Comparing latency of SU (162) depth 6 vs SU (151) depth 7

*** Scheduling [503]: SU(151): t545: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1478, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1


Examining Available:
Height 503: SU(162): t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

Height 504: SU(159): t1478: i32,i32 = tSBCS t8, t540, t1614:1

    t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1


*** Scheduling [504]: SU(162): t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1


Examining Available:
Height 504: SU(159): t1478: i32,i32 = tSBCS t8, t540, t1614:1

    t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1


*** Scheduling [505]: SU(159): t1478: i32,i32 = tSBCS t8, t540, t1614:1

    t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1


Examining Available:
Height 506: SU(509): t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

Height 506: SU(160): t1482: i32,i32 = tRSBS t538

Height 506: SU(161): t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

    Interfering reg $cpsr SU #509

*** Scheduling [506]: SU(160): t1482: i32,i32 = tRSBS t538

    Repushing SU #509

Examining Available:
Height 506: SU(509): t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

Height 506: SU(161): t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [507]: SU(509): t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 506: SU(161): t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [508]: SU(161): t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 509: SU(152): t538: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t14


*** Scheduling [509]: SU(152): t538: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t14


Examining Available:
Height 510: SU(153): t14: ch = tSTRspi<Mem:(store (s32) into %ir.6)> t6, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t12


*** Scheduling [510]: SU(153): t14: ch = tSTRspi<Mem:(store (s32) into %ir.6)> t6, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t12


Examining Available:
Height 511: SU(154): t12: ch = tSTRspi<Mem:(store (s32) into %ir.5)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t10

Height 511: SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2


*** Scheduling [511]: SU(154): t12: ch = tSTRspi<Mem:(store (s32) into %ir.5)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t10


Examining Available:
Height 512: SU(155): t10: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 512: SU(157): t4: i32,ch = CopyFromReg t0, Register:i32 %1

Height 511: SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2


*** Scheduling [512]: SU(155): t10: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 513: SU(156): t2: i32,ch = CopyFromReg t0, Register:i32 %0

Height 512: SU(157): t4: i32,ch = CopyFromReg t0, Register:i32 %1

Height 511: SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2


*** Scheduling [513]: SU(156): t2: i32,ch = CopyFromReg t0, Register:i32 %0


Examining Available:
Height 512: SU(157): t4: i32,ch = CopyFromReg t0, Register:i32 %1

Height 511: SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2


*** Scheduling [514]: SU(157): t4: i32,ch = CopyFromReg t0, Register:i32 %1


Examining Available:
Height 511: SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2


*** Scheduling [515]: SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2

*** Final schedule ***
SU(158): t6: i32,ch = CopyFromReg t0, Register:i32 %2

SU(157): t4: i32,ch = CopyFromReg t0, Register:i32 %1

SU(156): t2: i32,ch = CopyFromReg t0, Register:i32 %0

SU(155): t10: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t2, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(154): t12: ch = tSTRspi<Mem:(store (s32) into %ir.5)> t4, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t10

SU(153): t14: ch = tSTRspi<Mem:(store (s32) into %ir.6)> t6, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t12

SU(152): t538: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t14

SU(161): t540: i32 = tASRri Register:i32 $cpsr, t538, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(509): t8: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

SU(160): t1482: i32,i32 = tRSBS t538

SU(159): t1478: i32,i32 = tSBCS t8, t540, t1614:1

    t1614: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1482:1

SU(162): t543: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1482, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

SU(151): t545: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1478, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t538:1

SU(150): t546: ch = TokenFactor t543, t545

SU(149): t23: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t546

SU(165): t534: i32 = tLSLri Register:i32 $cpsr, t23, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg

SU(166): t547: i32 = tASRri Register:i32 $cpsr, t534, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(164): t1472: i32,i32 = tRSBS t534

SU(163): t1468: i32,i32 = tSBCS t8, t547, t1613:1

    t1613: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1472:1

SU(167): t550: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1472, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

SU(148): t552: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1468, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t23:1

SU(147): t553: ch = TokenFactor t550, t552

SU(146): t30: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t553

SU(171): t31: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg

SU(170): t32: i32 = tMUL nsw Register:i32 $cpsr, t30, t31, TargetConstant:i32<14>, Register:i32 $noreg

SU(172): t554: i32 = tASRri Register:i32 $cpsr, t32, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(169): t1462: i32,i32 = tRSBS t32

SU(168): t1458: i32,i32 = tSBCS t8, t554, t1612:1

    t1612: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1462:1

SU(173): t557: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1462, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

SU(145): t559: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1458, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t30:1

SU(144): t560: ch = TokenFactor t557, t559

SU(143): t37: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t560

SU(176): t529: i32 = tLSLri Register:i32 $cpsr, t37, TargetConstant:i32<2>, TargetConstant:i32<14>, Register:i32 $noreg

SU(177): t561: i32 = tASRri Register:i32 $cpsr, t529, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(175): t1452: i32,i32 = tRSBS t529

SU(174): t1448: i32,i32 = tSBCS t8, t561, t1610:1

    t1610: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1452:1

SU(178): t564: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1452, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

SU(142): t566: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1448, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t37:1

SU(141): t567: ch = TokenFactor t564, t566

SU(140): t44: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t567

SU(182): t45: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg

SU(181): t46: i32 = tMUL nsw Register:i32 $cpsr, t44, t45, TargetConstant:i32<14>, Register:i32 $noreg

SU(183): t568: i32 = tASRri Register:i32 $cpsr, t46, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(180): t1442: i32,i32 = tRSBS t46

SU(179): t1438: i32,i32 = tSBCS t8, t568, t1609:1

    t1609: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1442:1

SU(184): t571: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1442, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

SU(139): t573: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1438, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t44:1

SU(138): t574: ch = TokenFactor t571, t573

SU(137): t51: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t574

SU(188): t52: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<6>, TargetConstant:i32<14>, Register:i32 $noreg

SU(187): t53: i32 = tMUL nsw Register:i32 $cpsr, t51, t52, TargetConstant:i32<14>, Register:i32 $noreg

SU(189): t575: i32 = tASRri Register:i32 $cpsr, t53, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(186): t1432: i32,i32 = tRSBS t53

SU(185): t1428: i32,i32 = tSBCS t8, t575, t1608:1

    t1608: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1432:1

SU(190): t578: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1432, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

SU(136): t580: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1428, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

SU(135): t581: ch = TokenFactor t578, t580

SU(134): t58: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t581

SU(194): t59: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<7>, TargetConstant:i32<14>, Register:i32 $noreg

SU(193): t60: i32 = tMUL nsw Register:i32 $cpsr, t58, t59, TargetConstant:i32<14>, Register:i32 $noreg

SU(195): t582: i32 = tASRri Register:i32 $cpsr, t60, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(192): t1422: i32,i32 = tRSBS t60

SU(191): t1418: i32,i32 = tSBCS t8, t582, t1607:1

    t1607: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1422:1

SU(196): t585: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1422, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

SU(133): t587: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1418, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t58:1

SU(132): t588: ch = TokenFactor t585, t587

SU(131): t65: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t588

SU(199): t522: i32 = tLSLri Register:i32 $cpsr, t65, TargetConstant:i32<3>, TargetConstant:i32<14>, Register:i32 $noreg

SU(200): t589: i32 = tASRri Register:i32 $cpsr, t522, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(198): t1412: i32,i32 = tRSBS t522

SU(197): t1408: i32,i32 = tSBCS t8, t589, t1605:1

    t1605: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1412:1

SU(201): t592: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1412, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

SU(130): t594: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1408, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t65:1

SU(129): t595: ch = TokenFactor t592, t594

SU(128): t72: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t595

SU(205): t73: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<9>, TargetConstant:i32<14>, Register:i32 $noreg

SU(204): t74: i32 = tMUL nsw Register:i32 $cpsr, t72, t73, TargetConstant:i32<14>, Register:i32 $noreg

SU(206): t596: i32 = tASRri Register:i32 $cpsr, t74, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(203): t1402: i32,i32 = tRSBS t74

SU(202): t1398: i32,i32 = tSBCS t8, t596, t1604:1

    t1604: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1402:1

SU(207): t599: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1402, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

SU(127): t601: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1398, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t72:1

SU(126): t602: ch = TokenFactor t599, t601

SU(125): t79: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t602

SU(211): t80: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg

SU(210): t81: i32 = tMUL nsw Register:i32 $cpsr, t79, t80, TargetConstant:i32<14>, Register:i32 $noreg

SU(212): t603: i32 = tASRri Register:i32 $cpsr, t81, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(209): t1392: i32,i32 = tRSBS t81

SU(208): t1388: i32,i32 = tSBCS t8, t603, t1603:1

    t1603: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1392:1

SU(213): t606: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1392, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

SU(124): t608: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1388, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t79:1

SU(123): t609: ch = TokenFactor t606, t608

SU(122): t86: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t609

SU(217): t87: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<11>, TargetConstant:i32<14>, Register:i32 $noreg

SU(216): t88: i32 = tMUL nsw Register:i32 $cpsr, t86, t87, TargetConstant:i32<14>, Register:i32 $noreg

SU(218): t610: i32 = tASRri Register:i32 $cpsr, t88, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(215): t1382: i32,i32 = tRSBS t88

SU(214): t1378: i32,i32 = tSBCS t8, t610, t1602:1

    t1602: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1382:1

SU(219): t613: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1382, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

SU(121): t615: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1378, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t86:1

SU(120): t616: ch = TokenFactor t613, t615

SU(119): t93: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t616

SU(223): t94: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<12>, TargetConstant:i32<14>, Register:i32 $noreg

SU(222): t95: i32 = tMUL nsw Register:i32 $cpsr, t93, t94, TargetConstant:i32<14>, Register:i32 $noreg

SU(224): t617: i32 = tASRri Register:i32 $cpsr, t95, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(221): t1372: i32,i32 = tRSBS t95

SU(220): t1368: i32,i32 = tSBCS t8, t617, t1601:1

    t1601: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1372:1

SU(225): t620: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1372, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

SU(118): t622: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1368, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t93:1

SU(117): t623: ch = TokenFactor t620, t622

SU(116): t100: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t623

SU(229): t101: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<13>, TargetConstant:i32<14>, Register:i32 $noreg

SU(228): t102: i32 = tMUL nsw Register:i32 $cpsr, t100, t101, TargetConstant:i32<14>, Register:i32 $noreg

SU(230): t624: i32 = tASRri Register:i32 $cpsr, t102, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(227): t1362: i32,i32 = tRSBS t102

SU(226): t1358: i32,i32 = tSBCS t8, t624, t1600:1

    t1600: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1362:1

SU(231): t627: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1362, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

SU(115): t629: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1358, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t100:1

SU(114): t630: ch = TokenFactor t627, t629

SU(113): t107: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t630

SU(235): t108: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<14>, TargetConstant:i32<14>, Register:i32 $noreg

SU(234): t109: i32 = tMUL nsw Register:i32 $cpsr, t107, t108, TargetConstant:i32<14>, Register:i32 $noreg

SU(236): t631: i32 = tASRri Register:i32 $cpsr, t109, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(233): t1352: i32,i32 = tRSBS t109

SU(232): t1348: i32,i32 = tSBCS t8, t631, t1599:1

    t1599: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1352:1

SU(237): t634: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1352, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

SU(112): t636: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1348, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t107:1

SU(111): t637: ch = TokenFactor t634, t636

SU(110): t114: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t637

SU(241): t115: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<15>, TargetConstant:i32<14>, Register:i32 $noreg

SU(240): t116: i32 = tMUL nsw Register:i32 $cpsr, t114, t115, TargetConstant:i32<14>, Register:i32 $noreg

SU(242): t638: i32 = tASRri Register:i32 $cpsr, t116, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(239): t1342: i32,i32 = tRSBS t116

SU(238): t1338: i32,i32 = tSBCS t8, t638, t1598:1

    t1598: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1342:1

SU(243): t641: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1342, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

SU(109): t643: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1338, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t114:1

SU(108): t644: ch = TokenFactor t641, t643

SU(107): t121: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t644

SU(246): t511: i32 = tLSLri Register:i32 $cpsr, t121, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg

SU(247): t645: i32 = tASRri Register:i32 $cpsr, t511, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(245): t1332: i32,i32 = tRSBS t511

SU(244): t1328: i32,i32 = tSBCS t8, t645, t1596:1

    t1596: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1332:1

SU(248): t648: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1332, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

SU(106): t650: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1328, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t121:1

SU(105): t651: ch = TokenFactor t648, t650

SU(104): t128: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t651

SU(252): t129: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<17>, TargetConstant:i32<14>, Register:i32 $noreg

SU(251): t130: i32 = tMUL nsw Register:i32 $cpsr, t128, t129, TargetConstant:i32<14>, Register:i32 $noreg

SU(253): t652: i32 = tASRri Register:i32 $cpsr, t130, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(250): t1322: i32,i32 = tRSBS t130

SU(249): t1318: i32,i32 = tSBCS t8, t652, t1595:1

    t1595: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1322:1

SU(254): t655: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1322, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

SU(103): t657: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1318, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t128:1

SU(102): t658: ch = TokenFactor t655, t657

SU(101): t135: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t658

SU(258): t136: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<18>, TargetConstant:i32<14>, Register:i32 $noreg

SU(257): t137: i32 = tMUL nsw Register:i32 $cpsr, t135, t136, TargetConstant:i32<14>, Register:i32 $noreg

SU(259): t659: i32 = tASRri Register:i32 $cpsr, t137, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(256): t1312: i32,i32 = tRSBS t137

SU(255): t1308: i32,i32 = tSBCS t8, t659, t1594:1

    t1594: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1312:1

SU(260): t662: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1312, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

SU(100): t664: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1308, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t135:1

SU(99): t665: ch = TokenFactor t662, t664

SU(98): t142: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t665

SU(264): t143: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<19>, TargetConstant:i32<14>, Register:i32 $noreg

SU(263): t144: i32 = tMUL nsw Register:i32 $cpsr, t142, t143, TargetConstant:i32<14>, Register:i32 $noreg

SU(265): t666: i32 = tASRri Register:i32 $cpsr, t144, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(262): t1302: i32,i32 = tRSBS t144

SU(261): t1298: i32,i32 = tSBCS t8, t666, t1593:1

    t1593: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1302:1

SU(266): t669: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1302, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

SU(97): t671: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1298, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t142:1

SU(96): t672: ch = TokenFactor t669, t671

SU(95): t149: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t672

SU(270): t150: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<20>, TargetConstant:i32<14>, Register:i32 $noreg

SU(269): t151: i32 = tMUL nsw Register:i32 $cpsr, t149, t150, TargetConstant:i32<14>, Register:i32 $noreg

SU(271): t673: i32 = tASRri Register:i32 $cpsr, t151, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(268): t1292: i32,i32 = tRSBS t151

SU(267): t1288: i32,i32 = tSBCS t8, t673, t1592:1

    t1592: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1292:1

SU(272): t676: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1292, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

SU(94): t678: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1288, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t149:1

SU(93): t679: ch = TokenFactor t676, t678

SU(92): t156: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.6)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t679

SU(276): t157: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<21>, TargetConstant:i32<14>, Register:i32 $noreg

SU(275): t158: i32 = tMUL nsw Register:i32 $cpsr, t156, t157, TargetConstant:i32<14>, Register:i32 $noreg

SU(277): t680: i32 = tASRri Register:i32 $cpsr, t158, TargetConstant:i32<31>, TargetConstant:i32<14>, Register:i32 $noreg

SU(274): t1282: i32,i32 = tRSBS t158

SU(273): t1278: i32,i32 = tSBCS t8, t680, t1589:1

    t1589: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1282:1

SU(278): t683: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1282, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

SU(91): t685: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1278, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t156:1

SU(90): t686: ch = TokenFactor t683, t685

SU(341): t163: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(340): t164: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.5)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(386): t165: i32 = tADDrr nsw Register:i32 $cpsr, t163, t164, TargetConstant:i32<14>, Register:i32 $noreg

SU(338): t867: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(339): t866: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(335): t864: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(336): t863: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(384): t869: i32 = tAND Register:i32 $cpsr, t866, t863, TargetConstant:i32<14>, Register:i32 $noreg

SU(374): t870: i32 = tAND Register:i32 $cpsr, t867, t864, TargetConstant:i32<14>, Register:i32 $noreg

SU(333): t860: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(332): t861: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(373): t872: i32 = tORR Register:i32 $cpsr, t870, t861, TargetConstant:i32<14>, Register:i32 $noreg

SU(383): t871: i32 = tORR Register:i32 $cpsr, t869, t860, TargetConstant:i32<14>, Register:i32 $noreg

SU(329): t858: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(330): t857: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(382): t873: i32 = tORR Register:i32 $cpsr, t871, t857, TargetConstant:i32<14>, Register:i32 $noreg

SU(372): t874: i32 = tORR Register:i32 $cpsr, t872, t858, TargetConstant:i32<14>, Register:i32 $noreg

SU(326): t849: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(327): t848: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(324): t807: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(323): t808: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(321): t804: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(320): t805: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(370): t815: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(369): t825: i32,ch,glue = CopyFromReg t824:1, Register:i32 $r1, t824:2

    t817: ch,glue = CopyToReg t815:1, Register:i32 $r0, t807

    t818: ch,glue = CopyToReg t817, Register:i32 $r1, t808, t817:1

    t819: ch,glue = CopyToReg t818, Register:i32 $r2, t804, t818:1

    t820: ch,glue = CopyToReg t819, Register:i32 $r3, t805, t819:1

    t822: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__divdi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t820, t820:1

    t823: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t822:1, t822:2

    t824: i32,ch,glue = CopyFromReg t823:1, Register:i32 $r0, t823:2

SU(318): t801: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(317): t802: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(371): t834: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(368): t843: i32,ch,glue = CopyFromReg t842:1, Register:i32 $r1, t842:2

    t836: ch,glue = CopyToReg t834:1, Register:i32 $r0, t824

    t837: ch,glue = CopyToReg t836, Register:i32 $r1, t825, t836:1

    t838: ch,glue = CopyToReg t837, Register:i32 $r2, t801, t837:1

    t839: ch,glue = CopyToReg t838, Register:i32 $r3, t802, t838:1

    t840: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t839, t839:1

    t841: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t840:1, t840:2

    t842: i32,ch,glue = CopyFromReg t841:1, Register:i32 $r0, t841:2

SU(367): t1239: i32,i32 = tADDSrr t848, t842

SU(366): t1236: i32,i32 = tADCS t849, t843, t1582:1

    t1582: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1239:1

SU(315): t778: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(314): t779: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(312): t775: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(311): t776: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(365): t785: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(364): t794: i32,ch,glue = CopyFromReg t793:1, Register:i32 $r1, t793:2

    t787: ch,glue = CopyToReg t785:1, Register:i32 $r0, t778

    t788: ch,glue = CopyToReg t787, Register:i32 $r1, t779, t787:1

    t789: ch,glue = CopyToReg t788, Register:i32 $r2, t775, t788:1

    t790: ch,glue = CopyToReg t789, Register:i32 $r3, t776, t789:1

    t791: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t790, t790:1

    t792: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t791:1, t791:2

    t793: i32,ch,glue = CopyFromReg t792:1, Register:i32 $r0, t792:2

SU(308): t773: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(309): t772: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(363): t1246: i32,i32 = tADDSrr t793, t772

SU(362): t1243: i32,i32 = tADCS t794, t773, t1583:1

    t1583: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1246:1

SU(361): t854: i32 = tAND Register:i32 $cpsr, t1236, t1243, TargetConstant:i32<14>, Register:i32 $noreg

SU(381): t853: i32 = tAND Register:i32 $cpsr, t1239, t1246, TargetConstant:i32<14>, Register:i32 $noreg

SU(306): t749: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(305): t750: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(303): t746: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(302): t747: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(360): t757: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(359): t767: i32,ch,glue = CopyFromReg t766:1, Register:i32 $r1, t766:2

    t759: ch,glue = CopyToReg t757:1, Register:i32 $r0, t749

    t760: ch,glue = CopyToReg t759, Register:i32 $r1, t750, t759:1

    t761: ch,glue = CopyToReg t760, Register:i32 $r2, t746, t760:1

    t762: ch,glue = CopyToReg t761, Register:i32 $r3, t747, t761:1

    t764: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t762, t762:1

    t765: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t764:1, t764:2

    t766: i32,ch,glue = CopyFromReg t765:1, Register:i32 $r0, t765:2

SU(358): t856: i32 = tAND Register:i32 $cpsr, t854, t767, TargetConstant:i32<14>, Register:i32 $noreg

SU(380): t855: i32 = tAND Register:i32 $cpsr, t853, t766, TargetConstant:i32<14>, Register:i32 $noreg

SU(357): t876: i32 = tORR Register:i32 $cpsr, t874, t856, TargetConstant:i32<14>, Register:i32 $noreg

SU(379): t875: i32 = tORR Register:i32 $cpsr, t873, t855, TargetConstant:i32<14>, Register:i32 $noreg

SU(299): t742: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(300): t741: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(296): t733: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(297): t732: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(293): t730: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(294): t729: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(355): t1272: i32,i32 = tSUBSrr t732, t729

SU(356): t1261: i32,i32 = tSBCS t733, t730, t1586:1

    t1586: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1272:1

SU(290): t727: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(291): t726: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(354): t1265: i32,i32 = tSUBSrr t1272, t726

SU(353): t1251: i32,i32 = tSBCS t1261, t727, t1584:1

    t1584: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1265:1

SU(287): t722: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(288): t721: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(284): t719: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(285): t718: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(352): t1269: i32,i32 = tADDSrr t721, t718

SU(351): t1256: i32,i32 = tADCS t722, t719, t1585:1

    t1585: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1269:1

SU(350): t740: i32 = tAND Register:i32 $cpsr, t1251, t1256, TargetConstant:i32<14>, Register:i32 $noreg

SU(378): t739: i32 = tAND Register:i32 $cpsr, t1265, t1269, TargetConstant:i32<14>, Register:i32 $noreg

SU(377): t744: i32 = tEOR Register:i32 $cpsr, t741, t739, TargetConstant:i32<14>, Register:i32 $noreg

SU(349): t745: i32 = tEOR Register:i32 $cpsr, t742, t740, TargetConstant:i32<14>, Register:i32 $noreg

SU(348): t878: i32 = tORR Register:i32 $cpsr, t876, t745, TargetConstant:i32<14>, Register:i32 $noreg

SU(376): t877: i32 = tORR Register:i32 $cpsr, t875, t744, TargetConstant:i32<14>, Register:i32 $noreg

SU(282): t692: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(281): t693: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(89): t688: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(279): t687: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t686

SU(346): t690: i32 = tMVN Register:i32 $cpsr, t687, TargetConstant:i32<14>, Register:i32 $noreg

SU(345): t691: i32 = tMVN Register:i32 $cpsr, t688, TargetConstant:i32<14>, Register:i32 $noreg

SU(347): t700: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(344): t712: i32,ch,glue = CopyFromReg t711:1, Register:i32 $r1, t711:2

    t703: ch,glue = CopyToReg t700:1, Register:i32 $r0, t692

    t705: ch,glue = CopyToReg t703, Register:i32 $r1, t693, t703:1

    t706: ch,glue = CopyToReg t705, Register:i32 $r2, t690, t705:1

    t707: ch,glue = CopyToReg t706, Register:i32 $r3, t691, t706:1

    t709: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__moddi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t707, t707:1

    t710: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t709:1, t709:2

    t711: i32,ch,glue = CopyFromReg t710:1, Register:i32 $r0, t710:2

SU(343): t880: i32 = tORR Register:i32 $cpsr, t878, t712, TargetConstant:i32<14>, Register:i32 $noreg

SU(375): t879: i32 = tORR Register:i32 $cpsr, t877, t711, TargetConstant:i32<14>, Register:i32 $noreg

SU(387): t885: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(385): t9: i32 = IMPLICIT_DEF

SU(342): t893: i32,ch,glue = CopyFromReg t892:1, Register:i32 $r0, t892:2

    t887: ch,glue = CopyToReg t885:1, Register:i32 $r0, t165

    t888: ch,glue = CopyToReg t887, Register:i32 $r1, IMPLICIT_DEF:i32, t887:1

    t889: ch,glue = CopyToReg t888, Register:i32 $r2, t879, t888:1

    t890: ch,glue = CopyToReg t889, Register:i32 $r3, t880, t889:1

    t891: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetExternalSymbol:i32'__muldi3', Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t890, t890:1

    t892: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t891:1, t891:2

SU(337): t868: ch = TokenFactor t866:1, t867:1

SU(334): t865: ch = TokenFactor t863:1, t864:1

SU(331): t862: ch = TokenFactor t860:1, t861:1

SU(328): t859: ch = TokenFactor t857:1, t858:1

SU(325): t850: ch = TokenFactor t848:1, t849:1

SU(322): t809: ch = TokenFactor t807:1, t808:1

SU(319): t806: ch = TokenFactor t804:1, t805:1

SU(316): t803: ch = TokenFactor t801:1, t802:1

SU(313): t780: ch = TokenFactor t778:1, t779:1

SU(310): t777: ch = TokenFactor t775:1, t776:1

SU(307): t774: ch = TokenFactor t772:1, t773:1

SU(304): t751: ch = TokenFactor t749:1, t750:1

SU(301): t748: ch = TokenFactor t746:1, t747:1

SU(298): t743: ch = TokenFactor t741:1, t742:1

SU(295): t734: ch = TokenFactor t732:1, t733:1

SU(292): t731: ch = TokenFactor t729:1, t730:1

SU(289): t728: ch = TokenFactor t726:1, t727:1

SU(286): t723: ch = TokenFactor t721:1, t722:1

SU(283): t720: ch = TokenFactor t718:1, t719:1

SU(280): t694: ch = TokenFactor t692:1, t693:1

SU(88): t689: ch = TokenFactor t687:1, t688:1

SU(87): t212: ch = TokenFactor t163:1, t164:1, t868, t865, t862, t859, t850, t809, t806, t803, t780, t777, t774, t751, t748, t743, t734, t731, t728, t723, t720, t694, t689

SU(86): t213: ch = tSTRspi<Mem:(store (s32) into %ir.28)> t893, TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t212

SU(388): t900: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7 + 4, basealign 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t213

SU(85): t899: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.7, align 8)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t213

SU(84): t1232: i32,i32 = tADDSi3 t899, TargetConstant:i32<1>

SU(83): t1229: i32,i32 = tADCS t900, t8, t1581:1

    t1581: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1232:1

SU(393): t901: ch = TokenFactor t899:1, t900:1

SU(394): t904: ch = tSTRspi<Mem:(store (s32) into %ir.7, align 8)> t1232, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t901

SU(392): t905: ch = tSTRspi<Mem:(store (s32) into %ir.7 + 4, basealign 8)> t1229, TargetFrameIndex:i32<3>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t901

SU(391): t906: ch = TokenFactor t904, t905

SU(390): t223: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t906

SU(389): t1488: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(82): t237: i32,ch,glue = CopyFromReg t236:1, Register:i32 $r0, t236:2

    t227: ch,glue = CopyToReg t223:1, Register:i32 $r0, t1488

    t229: ch,glue = CopyToReg t227, Register:i32 $r2, t1232, t227:1

    t231: ch,glue = CopyToReg t229, Register:i32 $r3, t1229, t229:1

    t234: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t231, t231:1

    t236: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t234:1, t234:2

SU(395): t908: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8 + 4, basealign 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1

SU(81): t907: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.8, align 8)> TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t237:1

SU(80): t1225: i32,i32 = tADDSi3 t907, TargetConstant:i32<1>

SU(79): t1222: i32,i32 = tADCS t908, t8, t1579:1

    t1579: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1225:1

SU(399): t909: ch = TokenFactor t907:1, t908:1

SU(400): t912: ch = tSTRspi<Mem:(store (s32) into %ir.8, align 8)> t1225, TargetFrameIndex:i32<4>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t909

SU(398): t913: ch = tSTRspi<Mem:(store (s32) into %ir.8 + 4, basealign 8)> t1222, TargetFrameIndex:i32<4>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t909

SU(397): t914: ch = TokenFactor t912, t913

SU(396): t243: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t914

SU(78): t250: i32,ch,glue = CopyFromReg t249:1, Register:i32 $r0, t249:2

    t245: ch,glue = CopyToReg t243:1, Register:i32 $r0, t1488

    t246: ch,glue = CopyToReg t245, Register:i32 $r2, t1225, t245:1

    t247: ch,glue = CopyToReg t246, Register:i32 $r3, t1222, t246:1

    t248: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t247, t247:1

    t249: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t248:1, t248:2

SU(401): t916: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9 + 4, basealign 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1

SU(77): t915: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.9, align 8)> TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t250:1

SU(76): t1218: i32,i32 = tADDSi3 t915, TargetConstant:i32<1>

SU(75): t1215: i32,i32 = tADCS t916, t8, t1577:1

    t1577: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1218:1

SU(405): t917: ch = TokenFactor t915:1, t916:1

SU(406): t920: ch = tSTRspi<Mem:(store (s32) into %ir.9, align 8)> t1218, TargetFrameIndex:i32<5>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t917

SU(404): t921: ch = tSTRspi<Mem:(store (s32) into %ir.9 + 4, basealign 8)> t1215, TargetFrameIndex:i32<5>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t917

SU(403): t922: ch = TokenFactor t920, t921

SU(402): t256: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t922

SU(74): t263: i32,ch,glue = CopyFromReg t262:1, Register:i32 $r0, t262:2

    t258: ch,glue = CopyToReg t256:1, Register:i32 $r0, t1488

    t259: ch,glue = CopyToReg t258, Register:i32 $r2, t1218, t258:1

    t260: ch,glue = CopyToReg t259, Register:i32 $r3, t1215, t259:1

    t261: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t260, t260:1

    t262: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t261:1, t261:2

SU(407): t924: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10 + 4, basealign 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1

SU(73): t923: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.10, align 8)> TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t263:1

SU(72): t1211: i32,i32 = tADDSi3 t923, TargetConstant:i32<1>

SU(71): t1208: i32,i32 = tADCS t924, t8, t1575:1

    t1575: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1211:1

SU(411): t925: ch = TokenFactor t923:1, t924:1

SU(412): t928: ch = tSTRspi<Mem:(store (s32) into %ir.10, align 8)> t1211, TargetFrameIndex:i32<6>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t925

SU(410): t929: ch = tSTRspi<Mem:(store (s32) into %ir.10 + 4, basealign 8)> t1208, TargetFrameIndex:i32<6>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t925

SU(409): t930: ch = TokenFactor t928, t929

SU(408): t269: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t930

SU(70): t276: i32,ch,glue = CopyFromReg t275:1, Register:i32 $r0, t275:2

    t271: ch,glue = CopyToReg t269:1, Register:i32 $r0, t1488

    t272: ch,glue = CopyToReg t271, Register:i32 $r2, t1211, t271:1

    t273: ch,glue = CopyToReg t272, Register:i32 $r3, t1208, t272:1

    t274: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t273, t273:1

    t275: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t274:1, t274:2

SU(413): t932: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11 + 4, basealign 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1

SU(69): t931: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.11, align 8)> TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t276:1

SU(68): t1204: i32,i32 = tADDSi3 t931, TargetConstant:i32<1>

SU(67): t1201: i32,i32 = tADCS t932, t8, t1573:1

    t1573: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1204:1

SU(417): t933: ch = TokenFactor t931:1, t932:1

SU(418): t936: ch = tSTRspi<Mem:(store (s32) into %ir.11, align 8)> t1204, TargetFrameIndex:i32<7>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t933

SU(416): t937: ch = tSTRspi<Mem:(store (s32) into %ir.11 + 4, basealign 8)> t1201, TargetFrameIndex:i32<7>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t933

SU(415): t938: ch = TokenFactor t936, t937

SU(414): t282: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t938

SU(66): t289: i32,ch,glue = CopyFromReg t288:1, Register:i32 $r0, t288:2

    t284: ch,glue = CopyToReg t282:1, Register:i32 $r0, t1488

    t285: ch,glue = CopyToReg t284, Register:i32 $r2, t1204, t284:1

    t286: ch,glue = CopyToReg t285, Register:i32 $r3, t1201, t285:1

    t287: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t286, t286:1

    t288: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t287:1, t287:2

SU(419): t940: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12 + 4, basealign 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1

SU(65): t939: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.12, align 8)> TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t289:1

SU(64): t1197: i32,i32 = tADDSi3 t939, TargetConstant:i32<1>

SU(63): t1194: i32,i32 = tADCS t940, t8, t1571:1

    t1571: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1197:1

SU(423): t941: ch = TokenFactor t939:1, t940:1

SU(424): t944: ch = tSTRspi<Mem:(store (s32) into %ir.12, align 8)> t1197, TargetFrameIndex:i32<8>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t941

SU(422): t945: ch = tSTRspi<Mem:(store (s32) into %ir.12 + 4, basealign 8)> t1194, TargetFrameIndex:i32<8>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t941

SU(421): t946: ch = TokenFactor t944, t945

SU(420): t295: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t946

SU(62): t302: i32,ch,glue = CopyFromReg t301:1, Register:i32 $r0, t301:2

    t297: ch,glue = CopyToReg t295:1, Register:i32 $r0, t1488

    t298: ch,glue = CopyToReg t297, Register:i32 $r2, t1197, t297:1

    t299: ch,glue = CopyToReg t298, Register:i32 $r3, t1194, t298:1

    t300: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t299, t299:1

    t301: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t300:1, t300:2

SU(425): t948: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13 + 4, basealign 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1

SU(61): t947: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.13, align 8)> TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t302:1

SU(60): t1190: i32,i32 = tADDSi3 t947, TargetConstant:i32<1>

SU(59): t1187: i32,i32 = tADCS t948, t8, t1569:1

    t1569: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1190:1

SU(429): t949: ch = TokenFactor t947:1, t948:1

SU(430): t952: ch = tSTRspi<Mem:(store (s32) into %ir.13, align 8)> t1190, TargetFrameIndex:i32<9>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t949

SU(428): t953: ch = tSTRspi<Mem:(store (s32) into %ir.13 + 4, basealign 8)> t1187, TargetFrameIndex:i32<9>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t949

SU(427): t954: ch = TokenFactor t952, t953

SU(426): t308: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t954

SU(58): t315: i32,ch,glue = CopyFromReg t314:1, Register:i32 $r0, t314:2

    t310: ch,glue = CopyToReg t308:1, Register:i32 $r0, t1488

    t311: ch,glue = CopyToReg t310, Register:i32 $r2, t1190, t310:1

    t312: ch,glue = CopyToReg t311, Register:i32 $r3, t1187, t311:1

    t313: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t312, t312:1

    t314: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t313:1, t313:2

SU(431): t956: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14 + 4, basealign 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1

SU(57): t955: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.14, align 8)> TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t315:1

SU(56): t1183: i32,i32 = tADDSi3 t955, TargetConstant:i32<1>

SU(55): t1180: i32,i32 = tADCS t956, t8, t1567:1

    t1567: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1183:1

SU(435): t957: ch = TokenFactor t955:1, t956:1

SU(436): t960: ch = tSTRspi<Mem:(store (s32) into %ir.14, align 8)> t1183, TargetFrameIndex:i32<10>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t957

SU(434): t961: ch = tSTRspi<Mem:(store (s32) into %ir.14 + 4, basealign 8)> t1180, TargetFrameIndex:i32<10>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t957

SU(433): t962: ch = TokenFactor t960, t961

SU(432): t321: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t962

SU(54): t328: i32,ch,glue = CopyFromReg t327:1, Register:i32 $r0, t327:2

    t323: ch,glue = CopyToReg t321:1, Register:i32 $r0, t1488

    t324: ch,glue = CopyToReg t323, Register:i32 $r2, t1183, t323:1

    t325: ch,glue = CopyToReg t324, Register:i32 $r3, t1180, t324:1

    t326: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t325, t325:1

    t327: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t326:1, t326:2

SU(437): t964: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15 + 4, basealign 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1

SU(53): t963: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.15, align 8)> TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t328:1

SU(52): t1176: i32,i32 = tADDSi3 t963, TargetConstant:i32<1>

SU(51): t1173: i32,i32 = tADCS t964, t8, t1565:1

    t1565: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1176:1

SU(441): t965: ch = TokenFactor t963:1, t964:1

SU(442): t968: ch = tSTRspi<Mem:(store (s32) into %ir.15, align 8)> t1176, TargetFrameIndex:i32<11>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t965

SU(440): t969: ch = tSTRspi<Mem:(store (s32) into %ir.15 + 4, basealign 8)> t1173, TargetFrameIndex:i32<11>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t965

SU(439): t970: ch = TokenFactor t968, t969

SU(438): t334: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t970

SU(50): t341: i32,ch,glue = CopyFromReg t340:1, Register:i32 $r0, t340:2

    t336: ch,glue = CopyToReg t334:1, Register:i32 $r0, t1488

    t337: ch,glue = CopyToReg t336, Register:i32 $r2, t1176, t336:1

    t338: ch,glue = CopyToReg t337, Register:i32 $r3, t1173, t337:1

    t339: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t338, t338:1

    t340: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t339:1, t339:2

SU(443): t972: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16 + 4, basealign 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1

SU(49): t971: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.16, align 8)> TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t341:1

SU(48): t1169: i32,i32 = tADDSi3 t971, TargetConstant:i32<1>

SU(47): t1166: i32,i32 = tADCS t972, t8, t1563:1

    t1563: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1169:1

SU(447): t973: ch = TokenFactor t971:1, t972:1

SU(448): t976: ch = tSTRspi<Mem:(store (s32) into %ir.16, align 8)> t1169, TargetFrameIndex:i32<12>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t973

SU(446): t977: ch = tSTRspi<Mem:(store (s32) into %ir.16 + 4, basealign 8)> t1166, TargetFrameIndex:i32<12>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t973

SU(445): t978: ch = TokenFactor t976, t977

SU(444): t347: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t978

SU(46): t354: i32,ch,glue = CopyFromReg t353:1, Register:i32 $r0, t353:2

    t349: ch,glue = CopyToReg t347:1, Register:i32 $r0, t1488

    t350: ch,glue = CopyToReg t349, Register:i32 $r2, t1169, t349:1

    t351: ch,glue = CopyToReg t350, Register:i32 $r3, t1166, t350:1

    t352: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t351, t351:1

    t353: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t352:1, t352:2

SU(449): t980: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17 + 4, basealign 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1

SU(45): t979: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.17, align 8)> TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t354:1

SU(44): t1162: i32,i32 = tADDSi3 t979, TargetConstant:i32<1>

SU(43): t1159: i32,i32 = tADCS t980, t8, t1561:1

    t1561: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1162:1

SU(453): t981: ch = TokenFactor t979:1, t980:1

SU(454): t984: ch = tSTRspi<Mem:(store (s32) into %ir.17, align 8)> t1162, TargetFrameIndex:i32<13>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t981

SU(452): t985: ch = tSTRspi<Mem:(store (s32) into %ir.17 + 4, basealign 8)> t1159, TargetFrameIndex:i32<13>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t981

SU(451): t986: ch = TokenFactor t984, t985

SU(450): t360: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t986

SU(42): t367: i32,ch,glue = CopyFromReg t366:1, Register:i32 $r0, t366:2

    t362: ch,glue = CopyToReg t360:1, Register:i32 $r0, t1488

    t363: ch,glue = CopyToReg t362, Register:i32 $r2, t1162, t362:1

    t364: ch,glue = CopyToReg t363, Register:i32 $r3, t1159, t363:1

    t365: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t364, t364:1

    t366: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t365:1, t365:2

SU(455): t988: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18 + 4, basealign 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1

SU(41): t987: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.18, align 8)> TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t367:1

SU(40): t1155: i32,i32 = tADDSi3 t987, TargetConstant:i32<1>

SU(39): t1152: i32,i32 = tADCS t988, t8, t1559:1

    t1559: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1155:1

SU(459): t989: ch = TokenFactor t987:1, t988:1

SU(460): t992: ch = tSTRspi<Mem:(store (s32) into %ir.18, align 8)> t1155, TargetFrameIndex:i32<14>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t989

SU(458): t993: ch = tSTRspi<Mem:(store (s32) into %ir.18 + 4, basealign 8)> t1152, TargetFrameIndex:i32<14>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t989

SU(457): t994: ch = TokenFactor t992, t993

SU(456): t373: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t994

SU(38): t380: i32,ch,glue = CopyFromReg t379:1, Register:i32 $r0, t379:2

    t375: ch,glue = CopyToReg t373:1, Register:i32 $r0, t1488

    t376: ch,glue = CopyToReg t375, Register:i32 $r2, t1155, t375:1

    t377: ch,glue = CopyToReg t376, Register:i32 $r3, t1152, t376:1

    t378: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t377, t377:1

    t379: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t378:1, t378:2

SU(461): t996: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19 + 4, basealign 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1

SU(37): t995: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.19, align 8)> TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t380:1

SU(36): t1148: i32,i32 = tADDSi3 t995, TargetConstant:i32<1>

SU(35): t1145: i32,i32 = tADCS t996, t8, t1557:1

    t1557: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1148:1

SU(465): t997: ch = TokenFactor t995:1, t996:1

SU(466): t1000: ch = tSTRspi<Mem:(store (s32) into %ir.19, align 8)> t1148, TargetFrameIndex:i32<15>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t997

SU(464): t1001: ch = tSTRspi<Mem:(store (s32) into %ir.19 + 4, basealign 8)> t1145, TargetFrameIndex:i32<15>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t997

SU(463): t1002: ch = TokenFactor t1000, t1001

SU(462): t386: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1002

SU(34): t393: i32,ch,glue = CopyFromReg t392:1, Register:i32 $r0, t392:2

    t388: ch,glue = CopyToReg t386:1, Register:i32 $r0, t1488

    t389: ch,glue = CopyToReg t388, Register:i32 $r2, t1148, t388:1

    t390: ch,glue = CopyToReg t389, Register:i32 $r3, t1145, t389:1

    t391: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t390, t390:1

    t392: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t391:1, t391:2

SU(467): t1004: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20 + 4, basealign 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1

SU(33): t1003: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.20, align 8)> TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t393:1

SU(32): t1141: i32,i32 = tADDSi3 t1003, TargetConstant:i32<1>

SU(31): t1138: i32,i32 = tADCS t1004, t8, t1555:1

    t1555: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1141:1

SU(471): t1005: ch = TokenFactor t1003:1, t1004:1

SU(472): t1008: ch = tSTRspi<Mem:(store (s32) into %ir.20, align 8)> t1141, TargetFrameIndex:i32<16>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

SU(470): t1009: ch = tSTRspi<Mem:(store (s32) into %ir.20 + 4, basealign 8)> t1138, TargetFrameIndex:i32<16>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1005

SU(469): t1010: ch = TokenFactor t1008, t1009

SU(468): t399: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1010

SU(30): t406: i32,ch,glue = CopyFromReg t405:1, Register:i32 $r0, t405:2

    t401: ch,glue = CopyToReg t399:1, Register:i32 $r0, t1488

    t402: ch,glue = CopyToReg t401, Register:i32 $r2, t1141, t401:1

    t403: ch,glue = CopyToReg t402, Register:i32 $r3, t1138, t402:1

    t404: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t403, t403:1

    t405: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t404:1, t404:2

SU(473): t1012: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21 + 4, basealign 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1

SU(29): t1011: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.21, align 8)> TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t406:1

SU(28): t1134: i32,i32 = tADDSi3 t1011, TargetConstant:i32<1>

SU(27): t1131: i32,i32 = tADCS t1012, t8, t1553:1

    t1553: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1134:1

SU(477): t1013: ch = TokenFactor t1011:1, t1012:1

SU(478): t1016: ch = tSTRspi<Mem:(store (s32) into %ir.21, align 8)> t1134, TargetFrameIndex:i32<17>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

SU(476): t1017: ch = tSTRspi<Mem:(store (s32) into %ir.21 + 4, basealign 8)> t1131, TargetFrameIndex:i32<17>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1013

SU(475): t1018: ch = TokenFactor t1016, t1017

SU(474): t412: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1018

SU(26): t419: i32,ch,glue = CopyFromReg t418:1, Register:i32 $r0, t418:2

    t414: ch,glue = CopyToReg t412:1, Register:i32 $r0, t1488

    t415: ch,glue = CopyToReg t414, Register:i32 $r2, t1134, t414:1

    t416: ch,glue = CopyToReg t415, Register:i32 $r3, t1131, t415:1

    t417: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t416, t416:1

    t418: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t417:1, t417:2

SU(479): t1020: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22 + 4, basealign 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1

SU(25): t1019: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.22, align 8)> TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t419:1

SU(24): t1127: i32,i32 = tADDSi3 t1019, TargetConstant:i32<1>

SU(23): t1124: i32,i32 = tADCS t1020, t8, t1551:1

    t1551: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1127:1

SU(483): t1021: ch = TokenFactor t1019:1, t1020:1

SU(484): t1024: ch = tSTRspi<Mem:(store (s32) into %ir.22, align 8)> t1127, TargetFrameIndex:i32<18>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

SU(482): t1025: ch = tSTRspi<Mem:(store (s32) into %ir.22 + 4, basealign 8)> t1124, TargetFrameIndex:i32<18>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1021

SU(481): t1026: ch = TokenFactor t1024, t1025

SU(480): t425: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1026

SU(22): t432: i32,ch,glue = CopyFromReg t431:1, Register:i32 $r0, t431:2

    t427: ch,glue = CopyToReg t425:1, Register:i32 $r0, t1488

    t428: ch,glue = CopyToReg t427, Register:i32 $r2, t1127, t427:1

    t429: ch,glue = CopyToReg t428, Register:i32 $r3, t1124, t428:1

    t430: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t429, t429:1

    t431: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t430:1, t430:2

SU(485): t1028: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23 + 4, basealign 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1

SU(21): t1027: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.23, align 8)> TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t432:1

SU(20): t1120: i32,i32 = tADDSi3 t1027, TargetConstant:i32<1>

SU(19): t1117: i32,i32 = tADCS t1028, t8, t1549:1

    t1549: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1120:1

SU(489): t1029: ch = TokenFactor t1027:1, t1028:1

SU(490): t1032: ch = tSTRspi<Mem:(store (s32) into %ir.23, align 8)> t1120, TargetFrameIndex:i32<19>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

SU(488): t1033: ch = tSTRspi<Mem:(store (s32) into %ir.23 + 4, basealign 8)> t1117, TargetFrameIndex:i32<19>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1029

SU(487): t1034: ch = TokenFactor t1032, t1033

SU(486): t438: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1034

SU(18): t445: i32,ch,glue = CopyFromReg t444:1, Register:i32 $r0, t444:2

    t440: ch,glue = CopyToReg t438:1, Register:i32 $r0, t1488

    t441: ch,glue = CopyToReg t440, Register:i32 $r2, t1120, t440:1

    t442: ch,glue = CopyToReg t441, Register:i32 $r3, t1117, t441:1

    t443: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t442, t442:1

    t444: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t443:1, t443:2

SU(491): t1036: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24 + 4, basealign 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1

SU(17): t1035: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.24, align 8)> TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t445:1

SU(16): t1113: i32,i32 = tADDSi3 t1035, TargetConstant:i32<1>

SU(15): t1110: i32,i32 = tADCS t1036, t8, t1547:1

    t1547: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1113:1

SU(495): t1037: ch = TokenFactor t1035:1, t1036:1

SU(496): t1040: ch = tSTRspi<Mem:(store (s32) into %ir.24, align 8)> t1113, TargetFrameIndex:i32<20>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

SU(494): t1041: ch = tSTRspi<Mem:(store (s32) into %ir.24 + 4, basealign 8)> t1110, TargetFrameIndex:i32<20>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1037

SU(493): t1042: ch = TokenFactor t1040, t1041

SU(492): t451: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1042

SU(14): t458: i32,ch,glue = CopyFromReg t457:1, Register:i32 $r0, t457:2

    t453: ch,glue = CopyToReg t451:1, Register:i32 $r0, t1488

    t454: ch,glue = CopyToReg t453, Register:i32 $r2, t1113, t453:1

    t455: ch,glue = CopyToReg t454, Register:i32 $r3, t1110, t454:1

    t456: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t455, t455:1

    t457: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t456:1, t456:2

SU(497): t1044: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25 + 4, basealign 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1

SU(13): t1043: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.25, align 8)> TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t458:1

SU(12): t1106: i32,i32 = tADDSi3 t1043, TargetConstant:i32<1>

SU(11): t1103: i32,i32 = tADCS t1044, t8, t1545:1

    t1545: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1106:1

SU(501): t1045: ch = TokenFactor t1043:1, t1044:1

SU(502): t1048: ch = tSTRspi<Mem:(store (s32) into %ir.25, align 8)> t1106, TargetFrameIndex:i32<21>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

SU(500): t1049: ch = tSTRspi<Mem:(store (s32) into %ir.25 + 4, basealign 8)> t1103, TargetFrameIndex:i32<21>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1045

SU(499): t1050: ch = TokenFactor t1048, t1049

SU(498): t464: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1050

SU(10): t471: i32,ch,glue = CopyFromReg t470:1, Register:i32 $r0, t470:2

    t466: ch,glue = CopyToReg t464:1, Register:i32 $r0, t1488

    t467: ch,glue = CopyToReg t466, Register:i32 $r2, t1106, t466:1

    t468: ch,glue = CopyToReg t467, Register:i32 $r3, t1103, t467:1

    t469: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t468, t468:1

    t470: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t469:1, t469:2

SU(503): t1052: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26 + 4, basealign 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1

SU(9): t1051: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.26, align 8)> TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t471:1

SU(8): t1099: i32,i32 = tADDSi3 t1051, TargetConstant:i32<1>

SU(7): t1096: i32,i32 = tADCS t1052, t8, t1543:1

    t1543: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1099:1

SU(507): t1053: ch = TokenFactor t1051:1, t1052:1

SU(508): t1056: ch = tSTRspi<Mem:(store (s32) into %ir.26, align 8)> t1099, TargetFrameIndex:i32<22>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

SU(506): t1057: ch = tSTRspi<Mem:(store (s32) into %ir.26 + 4, basealign 8)> t1096, TargetFrameIndex:i32<22>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1053

SU(505): t1058: ch = TokenFactor t1056, t1057

SU(504): t477: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1058

SU(6): t484: i32,ch,glue = CopyFromReg t483:1, Register:i32 $r0, t483:2

    t479: ch,glue = CopyToReg t477:1, Register:i32 $r0, t1488

    t480: ch,glue = CopyToReg t479, Register:i32 $r2, t1099, t479:1

    t481: ch,glue = CopyToReg t480, Register:i32 $r3, t1096, t480:1

    t482: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t481, t481:1

    t483: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t482:1, t482:2

SU(510): t1060: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27 + 4, basealign 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1

SU(5): t1059: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.27, align 8)> TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t484:1

SU(4): t1092: i32,i32 = tADDSi3 t1059, TargetConstant:i32<1>

SU(3): t1089: i32,i32 = tADCS t1060, t8, t1541:1

    t1541: ch,glue = CopyToReg t0, Register:i32 $cpsr, t1092:1

SU(514): t1061: ch = TokenFactor t1059:1, t1060:1

SU(515): t1064: ch = tSTRspi<Mem:(store (s32) into %ir.27, align 8)> t1092, TargetFrameIndex:i32<23>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

SU(513): t1065: ch = tSTRspi<Mem:(store (s32) into %ir.27 + 4, basealign 8)> t1089, TargetFrameIndex:i32<23>, TargetConstant:i32<1>, TargetConstant:i32<14>, Register:i32 $noreg, t1061

SU(512): t1066: ch = TokenFactor t1064, t1065

SU(511): t490: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t1066

SU(2): t497: i32,ch,glue = CopyFromReg t496:1, Register:i32 $r0, t496:2

    t492: ch,glue = CopyToReg t490:1, Register:i32 $r0, t1488

    t493: ch,glue = CopyToReg t492, Register:i32 $r2, t1092, t492:1

    t494: ch,glue = CopyToReg t493, Register:i32 $r3, t1089, t493:1

    t495: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r2, Register:i32 $r3, RegisterMask:Untyped, t494, t494:1

    t496: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t495:1, t495:2

SU(1): t498: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.28)> TargetFrameIndex:i32<24>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t497:1

SU(0): t500: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t499, t499:1

    t499: ch,glue = CopyToReg t497:1, Register:i32 $r0, t498


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function moreThan20Variables: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=8, align=8, at location [SP]
  fi#20: size=8, align=8, at location [SP]
  fi#21: size=8, align=8, at location [SP]
  fi#22: size=8, align=8, at location [SP]
  fi#23: size=8, align=8, at location [SP]
  fi#24: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

bb.0 (%ir-block.3):
  liveins: $r0, $r1, $r2
  %2:tgpr = COPY $r2
  %1:tgpr = COPY $r1
  %0:tgpr = COPY $r0
  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
  tSTRspi %1:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
  tSTRspi %2:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
  %3:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %4:tgpr, dead $cpsr = tASRri %3:tgpr, 31, 14, $noreg
  %5:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
  %6:tgpr, $cpsr = tRSB %3:tgpr, 14, $noreg
  %7:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %4:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %6:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
  tSTRspi killed %7:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
  %8:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %9:tgpr, dead $cpsr = tLSLri killed %8:tgpr, 1, 14, $noreg
  %10:tgpr, dead $cpsr = tASRri %9:tgpr, 31, 14, $noreg
  %11:tgpr, $cpsr = tRSB %9:tgpr, 14, $noreg
  %12:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %10:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %11:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
  tSTRspi killed %12:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
  %13:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %14:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
  %15:tgpr, dead $cpsr = nsw tMUL killed %13:tgpr, %14:tgpr(tied-def 0), 14, $noreg
  %16:tgpr, dead $cpsr = tASRri %15:tgpr, 31, 14, $noreg
  %17:tgpr, $cpsr = tRSB %15:tgpr, 14, $noreg
  %18:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %16:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %17:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
  tSTRspi killed %18:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
  %19:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %20:tgpr, dead $cpsr = tLSLri killed %19:tgpr, 2, 14, $noreg
  %21:tgpr, dead $cpsr = tASRri %20:tgpr, 31, 14, $noreg
  %22:tgpr, $cpsr = tRSB %20:tgpr, 14, $noreg
  %23:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %21:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %22:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
  tSTRspi killed %23:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
  %24:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %25:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
  %26:tgpr, dead $cpsr = nsw tMUL killed %24:tgpr, %25:tgpr(tied-def 0), 14, $noreg
  %27:tgpr, dead $cpsr = tASRri %26:tgpr, 31, 14, $noreg
  %28:tgpr, $cpsr = tRSB %26:tgpr, 14, $noreg
  %29:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %27:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %28:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
  tSTRspi killed %29:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
  %30:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %31:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
  %32:tgpr, dead $cpsr = nsw tMUL killed %30:tgpr, %31:tgpr(tied-def 0), 14, $noreg
  %33:tgpr, dead $cpsr = tASRri %32:tgpr, 31, 14, $noreg
  %34:tgpr, $cpsr = tRSB %32:tgpr, 14, $noreg
  %35:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %33:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %34:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
  tSTRspi killed %35:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
  %36:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %37:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
  %38:tgpr, dead $cpsr = nsw tMUL killed %36:tgpr, %37:tgpr(tied-def 0), 14, $noreg
  %39:tgpr, dead $cpsr = tASRri %38:tgpr, 31, 14, $noreg
  %40:tgpr, $cpsr = tRSB %38:tgpr, 14, $noreg
  %41:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %39:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %40:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
  tSTRspi killed %41:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
  %42:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %43:tgpr, dead $cpsr = tLSLri killed %42:tgpr, 3, 14, $noreg
  %44:tgpr, dead $cpsr = tASRri %43:tgpr, 31, 14, $noreg
  %45:tgpr, $cpsr = tRSB %43:tgpr, 14, $noreg
  %46:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %44:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %45:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
  tSTRspi killed %46:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
  %47:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %48:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
  %49:tgpr, dead $cpsr = nsw tMUL killed %47:tgpr, %48:tgpr(tied-def 0), 14, $noreg
  %50:tgpr, dead $cpsr = tASRri %49:tgpr, 31, 14, $noreg
  %51:tgpr, $cpsr = tRSB %49:tgpr, 14, $noreg
  %52:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %50:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %51:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
  tSTRspi killed %52:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
  %53:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %54:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
  %55:tgpr, dead $cpsr = nsw tMUL killed %53:tgpr, %54:tgpr(tied-def 0), 14, $noreg
  %56:tgpr, dead $cpsr = tASRri %55:tgpr, 31, 14, $noreg
  %57:tgpr, $cpsr = tRSB %55:tgpr, 14, $noreg
  %58:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %56:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %57:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
  tSTRspi killed %58:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
  %59:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %60:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
  %61:tgpr, dead $cpsr = nsw tMUL killed %59:tgpr, %60:tgpr(tied-def 0), 14, $noreg
  %62:tgpr, dead $cpsr = tASRri %61:tgpr, 31, 14, $noreg
  %63:tgpr, $cpsr = tRSB %61:tgpr, 14, $noreg
  %64:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %62:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %63:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
  tSTRspi killed %64:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
  %65:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %66:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
  %67:tgpr, dead $cpsr = nsw tMUL killed %65:tgpr, %66:tgpr(tied-def 0), 14, $noreg
  %68:tgpr, dead $cpsr = tASRri %67:tgpr, 31, 14, $noreg
  %69:tgpr, $cpsr = tRSB %67:tgpr, 14, $noreg
  %70:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %68:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %69:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
  tSTRspi killed %70:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
  %71:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %72:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
  %73:tgpr, dead $cpsr = nsw tMUL killed %71:tgpr, %72:tgpr(tied-def 0), 14, $noreg
  %74:tgpr, dead $cpsr = tASRri %73:tgpr, 31, 14, $noreg
  %75:tgpr, $cpsr = tRSB %73:tgpr, 14, $noreg
  %76:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %74:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %75:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
  tSTRspi killed %76:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
  %77:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %78:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
  %79:tgpr, dead $cpsr = nsw tMUL killed %77:tgpr, %78:tgpr(tied-def 0), 14, $noreg
  %80:tgpr, dead $cpsr = tASRri %79:tgpr, 31, 14, $noreg
  %81:tgpr, $cpsr = tRSB %79:tgpr, 14, $noreg
  %82:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %80:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %81:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
  tSTRspi killed %82:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
  %83:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %84:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
  %85:tgpr, dead $cpsr = nsw tMUL killed %83:tgpr, %84:tgpr(tied-def 0), 14, $noreg
  %86:tgpr, dead $cpsr = tASRri %85:tgpr, 31, 14, $noreg
  %87:tgpr, $cpsr = tRSB %85:tgpr, 14, $noreg
  %88:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %86:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %87:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
  tSTRspi killed %88:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
  %89:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %90:tgpr, dead $cpsr = tLSLri killed %89:tgpr, 4, 14, $noreg
  %91:tgpr, dead $cpsr = tASRri %90:tgpr, 31, 14, $noreg
  %92:tgpr, $cpsr = tRSB %90:tgpr, 14, $noreg
  %93:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %91:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %92:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
  tSTRspi killed %93:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
  %94:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %95:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
  %96:tgpr, dead $cpsr = nsw tMUL killed %94:tgpr, %95:tgpr(tied-def 0), 14, $noreg
  %97:tgpr, dead $cpsr = tASRri %96:tgpr, 31, 14, $noreg
  %98:tgpr, $cpsr = tRSB %96:tgpr, 14, $noreg
  %99:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %97:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %98:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
  tSTRspi killed %99:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
  %100:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %101:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
  %102:tgpr, dead $cpsr = nsw tMUL killed %100:tgpr, %101:tgpr(tied-def 0), 14, $noreg
  %103:tgpr, dead $cpsr = tASRri %102:tgpr, 31, 14, $noreg
  %104:tgpr, $cpsr = tRSB %102:tgpr, 14, $noreg
  %105:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %103:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %104:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
  tSTRspi killed %105:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
  %106:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %107:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
  %108:tgpr, dead $cpsr = nsw tMUL killed %106:tgpr, %107:tgpr(tied-def 0), 14, $noreg
  %109:tgpr, dead $cpsr = tASRri %108:tgpr, 31, 14, $noreg
  %110:tgpr, $cpsr = tRSB %108:tgpr, 14, $noreg
  %111:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %109:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %110:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
  tSTRspi killed %111:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
  %112:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %113:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
  %114:tgpr, dead $cpsr = nsw tMUL killed %112:tgpr, %113:tgpr(tied-def 0), 14, $noreg
  %115:tgpr, dead $cpsr = tASRri %114:tgpr, 31, 14, $noreg
  %116:tgpr, $cpsr = tRSB %114:tgpr, 14, $noreg
  %117:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %115:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %116:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
  tSTRspi killed %117:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
  %118:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
  %119:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
  %120:tgpr, dead $cpsr = nsw tMUL killed %118:tgpr, %119:tgpr(tied-def 0), 14, $noreg
  %121:tgpr, dead $cpsr = tASRri %120:tgpr, 31, 14, $noreg
  %122:tgpr, $cpsr = tRSB %120:tgpr, 14, $noreg
  %123:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %121:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi killed %122:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
  tSTRspi killed %123:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
  %124:tgpr = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  %125:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
  %126:tgpr, dead $cpsr = nsw tADDrr killed %124:tgpr, killed %125:tgpr, 14, $noreg
  %127:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
  %128:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
  %129:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
  %130:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
  %131:tgpr, dead $cpsr = tAND %128:tgpr(tied-def 0), killed %130:tgpr, 14, $noreg
  %132:tgpr, dead $cpsr = tAND %127:tgpr(tied-def 0), killed %129:tgpr, 14, $noreg
  %133:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
  %134:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
  %135:tgpr, dead $cpsr = tORR %132:tgpr(tied-def 0), killed %134:tgpr, 14, $noreg
  %136:tgpr, dead $cpsr = tORR %131:tgpr(tied-def 0), killed %133:tgpr, 14, $noreg
  %137:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
  %138:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
  %139:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), killed %138:tgpr, 14, $noreg
  %140:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), killed %137:tgpr, 14, $noreg
  %141:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
  %142:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
  %143:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
  %144:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
  %145:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
  %146:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %143:tgpr
  $r1 = COPY %144:tgpr
  $r2 = COPY %145:tgpr
  $r3 = COPY %146:tgpr
  tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %147:tgpr = COPY $r0
  %148:tgpr = COPY $r1
  %149:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
  %150:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %147:tgpr
  $r1 = COPY %148:tgpr
  $r2 = COPY %149:tgpr
  $r3 = COPY %150:tgpr
  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %151:tgpr = COPY $r0
  %152:tgpr = COPY $r1
  %153:tgpr, $cpsr = tADDrr killed %142:tgpr, %151:tgpr, 14, $noreg
  %154:tgpr, $cpsr = tADC killed %141:tgpr(tied-def 0), %152:tgpr, 14, $noreg, implicit $cpsr
  %155:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
  %156:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
  %157:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
  %158:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %155:tgpr
  $r1 = COPY %156:tgpr
  $r2 = COPY %157:tgpr
  $r3 = COPY %158:tgpr
  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %159:tgpr = COPY $r0
  %160:tgpr = COPY $r1
  %161:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
  %162:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
  %163:tgpr, $cpsr = tADDrr %159:tgpr, killed %162:tgpr, 14, $noreg
  %164:tgpr, $cpsr = tADC %160:tgpr(tied-def 0), killed %161:tgpr, 14, $noreg, implicit $cpsr
  %165:tgpr, dead $cpsr = tAND %154:tgpr(tied-def 0), killed %164:tgpr, 14, $noreg
  %166:tgpr, dead $cpsr = tAND %153:tgpr(tied-def 0), killed %163:tgpr, 14, $noreg
  %167:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
  %168:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
  %169:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
  %170:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %167:tgpr
  $r1 = COPY %168:tgpr
  $r2 = COPY %169:tgpr
  $r3 = COPY %170:tgpr
  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %171:tgpr = COPY $r0
  %172:tgpr = COPY $r1
  %173:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), %172:tgpr, 14, $noreg
  %174:tgpr, dead $cpsr = tAND %166:tgpr(tied-def 0), %171:tgpr, 14, $noreg
  %175:tgpr, dead $cpsr = tORR %140:tgpr(tied-def 0), killed %173:tgpr, 14, $noreg
  %176:tgpr, dead $cpsr = tORR %139:tgpr(tied-def 0), killed %174:tgpr, 14, $noreg
  %177:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
  %178:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
  %179:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
  %180:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
  %181:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
  %182:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
  %183:tgpr, $cpsr = tSUBrr killed %180:tgpr, killed %182:tgpr, 14, $noreg
  %184:tgpr, $cpsr = tSBC killed %179:tgpr(tied-def 0), killed %181:tgpr, 14, $noreg, implicit $cpsr
  %185:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
  %186:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
  %187:tgpr, $cpsr = tSUBrr killed %183:tgpr, killed %186:tgpr, 14, $noreg
  %188:tgpr, $cpsr = tSBC killed %184:tgpr(tied-def 0), killed %185:tgpr, 14, $noreg, implicit $cpsr
  %189:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
  %190:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
  %191:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
  %192:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
  %193:tgpr, $cpsr = tADDrr killed %190:tgpr, killed %192:tgpr, 14, $noreg
  %194:tgpr, $cpsr = tADC killed %189:tgpr(tied-def 0), killed %191:tgpr, 14, $noreg, implicit $cpsr
  %195:tgpr, dead $cpsr = tAND %188:tgpr(tied-def 0), killed %194:tgpr, 14, $noreg
  %196:tgpr, dead $cpsr = tAND %187:tgpr(tied-def 0), killed %193:tgpr, 14, $noreg
  %197:tgpr, dead $cpsr = tEOR %178:tgpr(tied-def 0), killed %196:tgpr, 14, $noreg
  %198:tgpr, dead $cpsr = tEOR %177:tgpr(tied-def 0), killed %195:tgpr, 14, $noreg
  %199:tgpr, dead $cpsr = tORR %175:tgpr(tied-def 0), killed %198:tgpr, 14, $noreg
  %200:tgpr, dead $cpsr = tORR %176:tgpr(tied-def 0), killed %197:tgpr, 14, $noreg
  %201:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
  %202:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
  %203:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
  %204:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
  %205:tgpr, dead $cpsr = tMVN killed %204:tgpr, 14, $noreg
  %206:tgpr, dead $cpsr = tMVN killed %203:tgpr, 14, $noreg
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %201:tgpr
  $r1 = COPY %202:tgpr
  $r2 = COPY %205:tgpr
  $r3 = COPY %206:tgpr
  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %207:tgpr = COPY $r0
  %208:tgpr = COPY $r1
  %209:tgpr, dead $cpsr = tORR %199:tgpr(tied-def 0), %208:tgpr, 14, $noreg
  %210:tgpr, dead $cpsr = tORR %200:tgpr(tied-def 0), %207:tgpr, 14, $noreg
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %126:tgpr
  %211:tgpr = IMPLICIT_DEF
  $r1 = COPY %211:tgpr
  $r2 = COPY %210:tgpr
  $r3 = COPY %209:tgpr
  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %212:tgpr = COPY $r0
  tSTRspi %212:tgpr, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
  %213:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
  %214:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
  %215:tgpr, $cpsr = tADDi3 killed %214:tgpr, 1, 14, $noreg
  %216:tgpr, $cpsr = tADC killed %213:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %215:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
  tSTRspi %216:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %217:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %217:tgpr
  $r2 = COPY %215:tgpr
  $r3 = COPY %216:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %218:tgpr = COPY $r0
  %219:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
  %220:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
  %221:tgpr, $cpsr = tADDi3 killed %220:tgpr, 1, 14, $noreg
  %222:tgpr, $cpsr = tADC killed %219:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %221:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
  tSTRspi %222:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %221:tgpr
  $r3 = COPY %222:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %223:tgpr = COPY $r0
  %224:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
  %225:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
  %226:tgpr, $cpsr = tADDi3 killed %225:tgpr, 1, 14, $noreg
  %227:tgpr, $cpsr = tADC killed %224:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %226:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
  tSTRspi %227:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %226:tgpr
  $r3 = COPY %227:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %228:tgpr = COPY $r0
  %229:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
  %230:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
  %231:tgpr, $cpsr = tADDi3 killed %230:tgpr, 1, 14, $noreg
  %232:tgpr, $cpsr = tADC killed %229:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %231:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
  tSTRspi %232:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %231:tgpr
  $r3 = COPY %232:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %233:tgpr = COPY $r0
  %234:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
  %235:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
  %236:tgpr, $cpsr = tADDi3 killed %235:tgpr, 1, 14, $noreg
  %237:tgpr, $cpsr = tADC killed %234:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %236:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
  tSTRspi %237:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %236:tgpr
  $r3 = COPY %237:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %238:tgpr = COPY $r0
  %239:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
  %240:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
  %241:tgpr, $cpsr = tADDi3 killed %240:tgpr, 1, 14, $noreg
  %242:tgpr, $cpsr = tADC killed %239:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %241:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
  tSTRspi %242:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %241:tgpr
  $r3 = COPY %242:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %243:tgpr = COPY $r0
  %244:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
  %245:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
  %246:tgpr, $cpsr = tADDi3 killed %245:tgpr, 1, 14, $noreg
  %247:tgpr, $cpsr = tADC killed %244:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %246:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
  tSTRspi %247:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %246:tgpr
  $r3 = COPY %247:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %248:tgpr = COPY $r0
  %249:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
  %250:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
  %251:tgpr, $cpsr = tADDi3 killed %250:tgpr, 1, 14, $noreg
  %252:tgpr, $cpsr = tADC killed %249:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %251:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
  tSTRspi %252:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %251:tgpr
  $r3 = COPY %252:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %253:tgpr = COPY $r0
  %254:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
  %255:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
  %256:tgpr, $cpsr = tADDi3 killed %255:tgpr, 1, 14, $noreg
  %257:tgpr, $cpsr = tADC killed %254:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %256:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
  tSTRspi %257:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %256:tgpr
  $r3 = COPY %257:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %258:tgpr = COPY $r0
  %259:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
  %260:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
  %261:tgpr, $cpsr = tADDi3 killed %260:tgpr, 1, 14, $noreg
  %262:tgpr, $cpsr = tADC killed %259:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %261:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
  tSTRspi %262:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %261:tgpr
  $r3 = COPY %262:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %263:tgpr = COPY $r0
  %264:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
  %265:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
  %266:tgpr, $cpsr = tADDi3 killed %265:tgpr, 1, 14, $noreg
  %267:tgpr, $cpsr = tADC killed %264:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %266:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
  tSTRspi %267:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %266:tgpr
  $r3 = COPY %267:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %268:tgpr = COPY $r0
  %269:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
  %270:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
  %271:tgpr, $cpsr = tADDi3 killed %270:tgpr, 1, 14, $noreg
  %272:tgpr, $cpsr = tADC killed %269:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %271:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
  tSTRspi %272:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %271:tgpr
  $r3 = COPY %272:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %273:tgpr = COPY $r0
  %274:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
  %275:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
  %276:tgpr, $cpsr = tADDi3 killed %275:tgpr, 1, 14, $noreg
  %277:tgpr, $cpsr = tADC killed %274:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %276:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
  tSTRspi %277:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %276:tgpr
  $r3 = COPY %277:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %278:tgpr = COPY $r0
  %279:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
  %280:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
  %281:tgpr, $cpsr = tADDi3 killed %280:tgpr, 1, 14, $noreg
  %282:tgpr, $cpsr = tADC killed %279:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %281:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
  tSTRspi %282:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %281:tgpr
  $r3 = COPY %282:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %283:tgpr = COPY $r0
  %284:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
  %285:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
  %286:tgpr, $cpsr = tADDi3 killed %285:tgpr, 1, 14, $noreg
  %287:tgpr, $cpsr = tADC killed %284:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %286:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
  tSTRspi %287:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %286:tgpr
  $r3 = COPY %287:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %288:tgpr = COPY $r0
  %289:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
  %290:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
  %291:tgpr, $cpsr = tADDi3 killed %290:tgpr, 1, 14, $noreg
  %292:tgpr, $cpsr = tADC killed %289:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %291:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
  tSTRspi %292:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %291:tgpr
  $r3 = COPY %292:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %293:tgpr = COPY $r0
  %294:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
  %295:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
  %296:tgpr, $cpsr = tADDi3 killed %295:tgpr, 1, 14, $noreg
  %297:tgpr, $cpsr = tADC killed %294:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %296:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
  tSTRspi %297:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %296:tgpr
  $r3 = COPY %297:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %298:tgpr = COPY $r0
  %299:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
  %300:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
  %301:tgpr, $cpsr = tADDi3 killed %300:tgpr, 1, 14, $noreg
  %302:tgpr, $cpsr = tADC killed %299:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %301:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
  tSTRspi %302:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %301:tgpr
  $r3 = COPY %302:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %303:tgpr = COPY $r0
  %304:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
  %305:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
  %306:tgpr, $cpsr = tADDi3 killed %305:tgpr, 1, 14, $noreg
  %307:tgpr, $cpsr = tADC killed %304:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %306:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
  tSTRspi %307:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %306:tgpr
  $r3 = COPY %307:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %308:tgpr = COPY $r0
  %309:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
  %310:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
  %311:tgpr, $cpsr = tADDi3 killed %310:tgpr, 1, 14, $noreg
  %312:tgpr, $cpsr = tADC killed %309:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %311:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
  tSTRspi %312:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %311:tgpr
  $r3 = COPY %312:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %313:tgpr = COPY $r0
  %314:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
  %315:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
  %316:tgpr, $cpsr = tADDi3 killed %315:tgpr, 1, 14, $noreg
  %317:tgpr, $cpsr = tADC killed %314:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
  tSTRspi %316:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
  tSTRspi %317:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  $r0 = COPY %217:tgpr
  $r2 = COPY %316:tgpr
  $r3 = COPY %317:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %318:tgpr = COPY $r0
  %319:tgpr = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
  $r0 = COPY %319:tgpr
  tBX_RET 14, $noreg, implicit $r0

# End machine code for function moreThan20Variables.


Restoring optimization level for Function moreThan20Variables
	Before: -O0 ; After: -O2
Skipping pass 'Early Tail Duplication' on function moreThan20Variables
Skipping pass 'Optimize machine instruction PHIs' on function moreThan20Variables
# Machine code for function moreThan20Variables: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=8, align=8, at location [SP]
  fi#20: size=8, align=8, at location [SP]
  fi#21: size=8, align=8, at location [SP]
  fi#22: size=8, align=8, at location [SP]
  fi#23: size=8, align=8, at location [SP]
  fi#24: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

0B	bb.0 (%ir-block.3):
	  liveins: $r0, $r1, $r2
16B	  %2:tgpr = COPY $r2
32B	  %1:tgpr = COPY $r1
48B	  %0:tgpr = COPY $r0
64B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
80B	  tSTRspi %1:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
96B	  tSTRspi %2:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
112B	  %3:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
128B	  %4:tgpr, dead $cpsr = tASRri %3:tgpr, 31, 14, $noreg
144B	  %5:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
160B	  %6:tgpr, $cpsr = tRSB %3:tgpr, 14, $noreg
176B	  %7:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %4:tgpr, 14, $noreg, implicit $cpsr
192B	  tSTRspi killed %6:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
208B	  tSTRspi killed %7:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
224B	  %8:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
240B	  %9:tgpr, dead $cpsr = tLSLri killed %8:tgpr, 1, 14, $noreg
256B	  %10:tgpr, dead $cpsr = tASRri %9:tgpr, 31, 14, $noreg
272B	  %11:tgpr, $cpsr = tRSB %9:tgpr, 14, $noreg
288B	  %12:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %10:tgpr, 14, $noreg, implicit $cpsr
304B	  tSTRspi killed %11:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
320B	  tSTRspi killed %12:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
336B	  %13:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
352B	  %14:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
368B	  %15:tgpr, dead $cpsr = nsw tMUL killed %13:tgpr, %14:tgpr(tied-def 0), 14, $noreg
384B	  %16:tgpr, dead $cpsr = tASRri %15:tgpr, 31, 14, $noreg
400B	  %17:tgpr, $cpsr = tRSB %15:tgpr, 14, $noreg
416B	  %18:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %16:tgpr, 14, $noreg, implicit $cpsr
432B	  tSTRspi killed %17:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
448B	  tSTRspi killed %18:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
464B	  %19:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
480B	  %20:tgpr, dead $cpsr = tLSLri killed %19:tgpr, 2, 14, $noreg
496B	  %21:tgpr, dead $cpsr = tASRri %20:tgpr, 31, 14, $noreg
512B	  %22:tgpr, $cpsr = tRSB %20:tgpr, 14, $noreg
528B	  %23:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %21:tgpr, 14, $noreg, implicit $cpsr
544B	  tSTRspi killed %22:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
560B	  tSTRspi killed %23:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
576B	  %24:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
592B	  %25:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
608B	  %26:tgpr, dead $cpsr = nsw tMUL killed %24:tgpr, %25:tgpr(tied-def 0), 14, $noreg
624B	  %27:tgpr, dead $cpsr = tASRri %26:tgpr, 31, 14, $noreg
640B	  %28:tgpr, $cpsr = tRSB %26:tgpr, 14, $noreg
656B	  %29:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %27:tgpr, 14, $noreg, implicit $cpsr
672B	  tSTRspi killed %28:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
688B	  tSTRspi killed %29:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
704B	  %30:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
720B	  %31:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
736B	  %32:tgpr, dead $cpsr = nsw tMUL killed %30:tgpr, %31:tgpr(tied-def 0), 14, $noreg
752B	  %33:tgpr, dead $cpsr = tASRri %32:tgpr, 31, 14, $noreg
768B	  %34:tgpr, $cpsr = tRSB %32:tgpr, 14, $noreg
784B	  %35:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %33:tgpr, 14, $noreg, implicit $cpsr
800B	  tSTRspi killed %34:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
816B	  tSTRspi killed %35:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
832B	  %36:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
848B	  %37:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
864B	  %38:tgpr, dead $cpsr = nsw tMUL killed %36:tgpr, %37:tgpr(tied-def 0), 14, $noreg
880B	  %39:tgpr, dead $cpsr = tASRri %38:tgpr, 31, 14, $noreg
896B	  %40:tgpr, $cpsr = tRSB %38:tgpr, 14, $noreg
912B	  %41:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %39:tgpr, 14, $noreg, implicit $cpsr
928B	  tSTRspi killed %40:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
944B	  tSTRspi killed %41:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
960B	  %42:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
976B	  %43:tgpr, dead $cpsr = tLSLri killed %42:tgpr, 3, 14, $noreg
992B	  %44:tgpr, dead $cpsr = tASRri %43:tgpr, 31, 14, $noreg
1008B	  %45:tgpr, $cpsr = tRSB %43:tgpr, 14, $noreg
1024B	  %46:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %44:tgpr, 14, $noreg, implicit $cpsr
1040B	  tSTRspi killed %45:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
1056B	  tSTRspi killed %46:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
1072B	  %47:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1088B	  %48:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
1104B	  %49:tgpr, dead $cpsr = nsw tMUL killed %47:tgpr, %48:tgpr(tied-def 0), 14, $noreg
1120B	  %50:tgpr, dead $cpsr = tASRri %49:tgpr, 31, 14, $noreg
1136B	  %51:tgpr, $cpsr = tRSB %49:tgpr, 14, $noreg
1152B	  %52:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %50:tgpr, 14, $noreg, implicit $cpsr
1168B	  tSTRspi killed %51:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
1184B	  tSTRspi killed %52:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
1200B	  %53:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1216B	  %54:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
1232B	  %55:tgpr, dead $cpsr = nsw tMUL killed %53:tgpr, %54:tgpr(tied-def 0), 14, $noreg
1248B	  %56:tgpr, dead $cpsr = tASRri %55:tgpr, 31, 14, $noreg
1264B	  %57:tgpr, $cpsr = tRSB %55:tgpr, 14, $noreg
1280B	  %58:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %56:tgpr, 14, $noreg, implicit $cpsr
1296B	  tSTRspi killed %57:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
1312B	  tSTRspi killed %58:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
1328B	  %59:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1344B	  %60:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
1360B	  %61:tgpr, dead $cpsr = nsw tMUL killed %59:tgpr, %60:tgpr(tied-def 0), 14, $noreg
1376B	  %62:tgpr, dead $cpsr = tASRri %61:tgpr, 31, 14, $noreg
1392B	  %63:tgpr, $cpsr = tRSB %61:tgpr, 14, $noreg
1408B	  %64:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %62:tgpr, 14, $noreg, implicit $cpsr
1424B	  tSTRspi killed %63:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
1440B	  tSTRspi killed %64:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
1456B	  %65:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1472B	  %66:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
1488B	  %67:tgpr, dead $cpsr = nsw tMUL killed %65:tgpr, %66:tgpr(tied-def 0), 14, $noreg
1504B	  %68:tgpr, dead $cpsr = tASRri %67:tgpr, 31, 14, $noreg
1520B	  %69:tgpr, $cpsr = tRSB %67:tgpr, 14, $noreg
1536B	  %70:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %68:tgpr, 14, $noreg, implicit $cpsr
1552B	  tSTRspi killed %69:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
1568B	  tSTRspi killed %70:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
1584B	  %71:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1600B	  %72:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
1616B	  %73:tgpr, dead $cpsr = nsw tMUL killed %71:tgpr, %72:tgpr(tied-def 0), 14, $noreg
1632B	  %74:tgpr, dead $cpsr = tASRri %73:tgpr, 31, 14, $noreg
1648B	  %75:tgpr, $cpsr = tRSB %73:tgpr, 14, $noreg
1664B	  %76:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %74:tgpr, 14, $noreg, implicit $cpsr
1680B	  tSTRspi killed %75:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
1696B	  tSTRspi killed %76:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
1712B	  %77:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1728B	  %78:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
1744B	  %79:tgpr, dead $cpsr = nsw tMUL killed %77:tgpr, %78:tgpr(tied-def 0), 14, $noreg
1760B	  %80:tgpr, dead $cpsr = tASRri %79:tgpr, 31, 14, $noreg
1776B	  %81:tgpr, $cpsr = tRSB %79:tgpr, 14, $noreg
1792B	  %82:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %80:tgpr, 14, $noreg, implicit $cpsr
1808B	  tSTRspi killed %81:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
1824B	  tSTRspi killed %82:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
1840B	  %83:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1856B	  %84:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
1872B	  %85:tgpr, dead $cpsr = nsw tMUL killed %83:tgpr, %84:tgpr(tied-def 0), 14, $noreg
1888B	  %86:tgpr, dead $cpsr = tASRri %85:tgpr, 31, 14, $noreg
1904B	  %87:tgpr, $cpsr = tRSB %85:tgpr, 14, $noreg
1920B	  %88:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %86:tgpr, 14, $noreg, implicit $cpsr
1936B	  tSTRspi killed %87:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
1952B	  tSTRspi killed %88:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
1968B	  %89:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1984B	  %90:tgpr, dead $cpsr = tLSLri killed %89:tgpr, 4, 14, $noreg
2000B	  %91:tgpr, dead $cpsr = tASRri %90:tgpr, 31, 14, $noreg
2016B	  %92:tgpr, $cpsr = tRSB %90:tgpr, 14, $noreg
2032B	  %93:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %91:tgpr, 14, $noreg, implicit $cpsr
2048B	  tSTRspi killed %92:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
2064B	  tSTRspi killed %93:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
2080B	  %94:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2096B	  %95:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
2112B	  %96:tgpr, dead $cpsr = nsw tMUL killed %94:tgpr, %95:tgpr(tied-def 0), 14, $noreg
2128B	  %97:tgpr, dead $cpsr = tASRri %96:tgpr, 31, 14, $noreg
2144B	  %98:tgpr, $cpsr = tRSB %96:tgpr, 14, $noreg
2160B	  %99:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %97:tgpr, 14, $noreg, implicit $cpsr
2176B	  tSTRspi killed %98:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
2192B	  tSTRspi killed %99:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
2208B	  %100:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2224B	  %101:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
2240B	  %102:tgpr, dead $cpsr = nsw tMUL killed %100:tgpr, %101:tgpr(tied-def 0), 14, $noreg
2256B	  %103:tgpr, dead $cpsr = tASRri %102:tgpr, 31, 14, $noreg
2272B	  %104:tgpr, $cpsr = tRSB %102:tgpr, 14, $noreg
2288B	  %105:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %103:tgpr, 14, $noreg, implicit $cpsr
2304B	  tSTRspi killed %104:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
2320B	  tSTRspi killed %105:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
2336B	  %106:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2352B	  %107:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
2368B	  %108:tgpr, dead $cpsr = nsw tMUL killed %106:tgpr, %107:tgpr(tied-def 0), 14, $noreg
2384B	  %109:tgpr, dead $cpsr = tASRri %108:tgpr, 31, 14, $noreg
2400B	  %110:tgpr, $cpsr = tRSB %108:tgpr, 14, $noreg
2416B	  %111:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %109:tgpr, 14, $noreg, implicit $cpsr
2432B	  tSTRspi killed %110:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
2448B	  tSTRspi killed %111:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
2464B	  %112:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2480B	  %113:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
2496B	  %114:tgpr, dead $cpsr = nsw tMUL killed %112:tgpr, %113:tgpr(tied-def 0), 14, $noreg
2512B	  %115:tgpr, dead $cpsr = tASRri %114:tgpr, 31, 14, $noreg
2528B	  %116:tgpr, $cpsr = tRSB %114:tgpr, 14, $noreg
2544B	  %117:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %115:tgpr, 14, $noreg, implicit $cpsr
2560B	  tSTRspi killed %116:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
2576B	  tSTRspi killed %117:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
2592B	  %118:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2608B	  %119:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
2624B	  %120:tgpr, dead $cpsr = nsw tMUL killed %118:tgpr, %119:tgpr(tied-def 0), 14, $noreg
2640B	  %121:tgpr, dead $cpsr = tASRri %120:tgpr, 31, 14, $noreg
2656B	  %122:tgpr, $cpsr = tRSB %120:tgpr, 14, $noreg
2672B	  %123:tgpr, $cpsr = tSBC %5:tgpr(tied-def 0), killed %121:tgpr, 14, $noreg, implicit $cpsr
2688B	  tSTRspi killed %122:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
2704B	  tSTRspi killed %123:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
2720B	  %124:tgpr = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
2736B	  %125:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
2752B	  %126:tgpr, dead $cpsr = nsw tADDrr killed %124:tgpr, killed %125:tgpr, 14, $noreg
2768B	  %127:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
2784B	  %128:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
2800B	  %129:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
2816B	  %130:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
2832B	  %131:tgpr, dead $cpsr = tAND %128:tgpr(tied-def 0), killed %130:tgpr, 14, $noreg
2848B	  %132:tgpr, dead $cpsr = tAND %127:tgpr(tied-def 0), killed %129:tgpr, 14, $noreg
2864B	  %133:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
2880B	  %134:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
2896B	  %135:tgpr, dead $cpsr = tORR %132:tgpr(tied-def 0), killed %134:tgpr, 14, $noreg
2912B	  %136:tgpr, dead $cpsr = tORR %131:tgpr(tied-def 0), killed %133:tgpr, 14, $noreg
2928B	  %137:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
2944B	  %138:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
2960B	  %139:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), killed %138:tgpr, 14, $noreg
2976B	  %140:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), killed %137:tgpr, 14, $noreg
2992B	  %141:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
3008B	  %142:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
3024B	  %143:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
3040B	  %144:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
3056B	  %145:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
3072B	  %146:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
3088B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3104B	  $r0 = COPY %143:tgpr
3120B	  $r1 = COPY %144:tgpr
3136B	  $r2 = COPY %145:tgpr
3152B	  $r3 = COPY %146:tgpr
3168B	  tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3184B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3200B	  %147:tgpr = COPY $r0
3216B	  %148:tgpr = COPY $r1
3232B	  %149:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
3248B	  %150:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
3264B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3280B	  $r0 = COPY %147:tgpr
3296B	  $r1 = COPY %148:tgpr
3312B	  $r2 = COPY %149:tgpr
3328B	  $r3 = COPY %150:tgpr
3344B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3360B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3376B	  %151:tgpr = COPY $r0
3392B	  %152:tgpr = COPY $r1
3408B	  %153:tgpr, $cpsr = tADDrr killed %142:tgpr, %151:tgpr, 14, $noreg
3424B	  %154:tgpr, $cpsr = tADC killed %141:tgpr(tied-def 0), %152:tgpr, 14, $noreg, implicit $cpsr
3440B	  %155:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
3456B	  %156:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
3472B	  %157:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
3488B	  %158:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
3504B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3520B	  $r0 = COPY %155:tgpr
3536B	  $r1 = COPY %156:tgpr
3552B	  $r2 = COPY %157:tgpr
3568B	  $r3 = COPY %158:tgpr
3584B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3600B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3616B	  %159:tgpr = COPY $r0
3632B	  %160:tgpr = COPY $r1
3648B	  %161:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
3664B	  %162:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
3680B	  %163:tgpr, $cpsr = tADDrr %159:tgpr, killed %162:tgpr, 14, $noreg
3696B	  %164:tgpr, $cpsr = tADC %160:tgpr(tied-def 0), killed %161:tgpr, 14, $noreg, implicit $cpsr
3712B	  %165:tgpr, dead $cpsr = tAND %154:tgpr(tied-def 0), killed %164:tgpr, 14, $noreg
3728B	  %166:tgpr, dead $cpsr = tAND %153:tgpr(tied-def 0), killed %163:tgpr, 14, $noreg
3744B	  %167:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
3760B	  %168:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
3776B	  %169:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
3792B	  %170:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
3808B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3824B	  $r0 = COPY %167:tgpr
3840B	  $r1 = COPY %168:tgpr
3856B	  $r2 = COPY %169:tgpr
3872B	  $r3 = COPY %170:tgpr
3888B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3904B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3920B	  %171:tgpr = COPY $r0
3936B	  %172:tgpr = COPY $r1
3952B	  %173:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), %172:tgpr, 14, $noreg
3968B	  %174:tgpr, dead $cpsr = tAND %166:tgpr(tied-def 0), %171:tgpr, 14, $noreg
3984B	  %175:tgpr, dead $cpsr = tORR %140:tgpr(tied-def 0), killed %173:tgpr, 14, $noreg
4000B	  %176:tgpr, dead $cpsr = tORR %139:tgpr(tied-def 0), killed %174:tgpr, 14, $noreg
4016B	  %177:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
4032B	  %178:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
4048B	  %179:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
4064B	  %180:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
4080B	  %181:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
4096B	  %182:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
4112B	  %183:tgpr, $cpsr = tSUBrr killed %180:tgpr, killed %182:tgpr, 14, $noreg
4128B	  %184:tgpr, $cpsr = tSBC killed %179:tgpr(tied-def 0), killed %181:tgpr, 14, $noreg, implicit $cpsr
4144B	  %185:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
4160B	  %186:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
4176B	  %187:tgpr, $cpsr = tSUBrr killed %183:tgpr, killed %186:tgpr, 14, $noreg
4192B	  %188:tgpr, $cpsr = tSBC killed %184:tgpr(tied-def 0), killed %185:tgpr, 14, $noreg, implicit $cpsr
4208B	  %189:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
4224B	  %190:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
4240B	  %191:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
4256B	  %192:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
4272B	  %193:tgpr, $cpsr = tADDrr killed %190:tgpr, killed %192:tgpr, 14, $noreg
4288B	  %194:tgpr, $cpsr = tADC killed %189:tgpr(tied-def 0), killed %191:tgpr, 14, $noreg, implicit $cpsr
4304B	  %195:tgpr, dead $cpsr = tAND %188:tgpr(tied-def 0), killed %194:tgpr, 14, $noreg
4320B	  %196:tgpr, dead $cpsr = tAND %187:tgpr(tied-def 0), killed %193:tgpr, 14, $noreg
4336B	  %197:tgpr, dead $cpsr = tEOR %178:tgpr(tied-def 0), killed %196:tgpr, 14, $noreg
4352B	  %198:tgpr, dead $cpsr = tEOR %177:tgpr(tied-def 0), killed %195:tgpr, 14, $noreg
4368B	  %199:tgpr, dead $cpsr = tORR %175:tgpr(tied-def 0), killed %198:tgpr, 14, $noreg
4384B	  %200:tgpr, dead $cpsr = tORR %176:tgpr(tied-def 0), killed %197:tgpr, 14, $noreg
4400B	  %201:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
4416B	  %202:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
4432B	  %203:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
4448B	  %204:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
4464B	  %205:tgpr, dead $cpsr = tMVN killed %204:tgpr, 14, $noreg
4480B	  %206:tgpr, dead $cpsr = tMVN killed %203:tgpr, 14, $noreg
4496B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4512B	  $r0 = COPY %201:tgpr
4528B	  $r1 = COPY %202:tgpr
4544B	  $r2 = COPY %205:tgpr
4560B	  $r3 = COPY %206:tgpr
4576B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4592B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4608B	  %207:tgpr = COPY $r0
4624B	  %208:tgpr = COPY $r1
4640B	  %209:tgpr, dead $cpsr = tORR %199:tgpr(tied-def 0), %208:tgpr, 14, $noreg
4656B	  %210:tgpr, dead $cpsr = tORR %200:tgpr(tied-def 0), %207:tgpr, 14, $noreg
4672B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4688B	  $r0 = COPY %126:tgpr
4704B	  %211:tgpr = IMPLICIT_DEF
4720B	  $r1 = COPY %211:tgpr
4736B	  $r2 = COPY %210:tgpr
4752B	  $r3 = COPY %209:tgpr
4768B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
4784B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4800B	  %212:tgpr = COPY $r0
4816B	  tSTRspi %212:tgpr, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
4832B	  %213:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
4848B	  %214:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
4864B	  %215:tgpr, $cpsr = tADDi3 killed %214:tgpr, 1, 14, $noreg
4880B	  %216:tgpr, $cpsr = tADC killed %213:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
4896B	  tSTRspi %215:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
4912B	  tSTRspi %216:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
4928B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4944B	  %217:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
4960B	  $r0 = COPY %217:tgpr
4976B	  $r2 = COPY %215:tgpr
4992B	  $r3 = COPY %216:tgpr
5008B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
5024B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5040B	  %218:tgpr = COPY $r0
5056B	  %219:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
5072B	  %220:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
5088B	  %221:tgpr, $cpsr = tADDi3 killed %220:tgpr, 1, 14, $noreg
5104B	  %222:tgpr, $cpsr = tADC killed %219:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
5120B	  tSTRspi %221:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
5136B	  tSTRspi %222:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
5152B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5168B	  $r0 = COPY %217:tgpr
5184B	  $r2 = COPY %221:tgpr
5200B	  $r3 = COPY %222:tgpr
5216B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
5232B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5248B	  %223:tgpr = COPY $r0
5264B	  %224:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
5280B	  %225:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
5296B	  %226:tgpr, $cpsr = tADDi3 killed %225:tgpr, 1, 14, $noreg
5312B	  %227:tgpr, $cpsr = tADC killed %224:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
5328B	  tSTRspi %226:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
5344B	  tSTRspi %227:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
5360B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5376B	  $r0 = COPY %217:tgpr
5392B	  $r2 = COPY %226:tgpr
5408B	  $r3 = COPY %227:tgpr
5424B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
5440B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5456B	  %228:tgpr = COPY $r0
5472B	  %229:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
5488B	  %230:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
5504B	  %231:tgpr, $cpsr = tADDi3 killed %230:tgpr, 1, 14, $noreg
5520B	  %232:tgpr, $cpsr = tADC killed %229:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
5536B	  tSTRspi %231:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
5552B	  tSTRspi %232:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
5568B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5584B	  $r0 = COPY %217:tgpr
5600B	  $r2 = COPY %231:tgpr
5616B	  $r3 = COPY %232:tgpr
5632B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
5648B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5664B	  %233:tgpr = COPY $r0
5680B	  %234:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
5696B	  %235:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
5712B	  %236:tgpr, $cpsr = tADDi3 killed %235:tgpr, 1, 14, $noreg
5728B	  %237:tgpr, $cpsr = tADC killed %234:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
5744B	  tSTRspi %236:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
5760B	  tSTRspi %237:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
5776B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5792B	  $r0 = COPY %217:tgpr
5808B	  $r2 = COPY %236:tgpr
5824B	  $r3 = COPY %237:tgpr
5840B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
5856B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5872B	  %238:tgpr = COPY $r0
5888B	  %239:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
5904B	  %240:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
5920B	  %241:tgpr, $cpsr = tADDi3 killed %240:tgpr, 1, 14, $noreg
5936B	  %242:tgpr, $cpsr = tADC killed %239:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
5952B	  tSTRspi %241:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
5968B	  tSTRspi %242:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
5984B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6000B	  $r0 = COPY %217:tgpr
6016B	  $r2 = COPY %241:tgpr
6032B	  $r3 = COPY %242:tgpr
6048B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6064B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6080B	  %243:tgpr = COPY $r0
6096B	  %244:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
6112B	  %245:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
6128B	  %246:tgpr, $cpsr = tADDi3 killed %245:tgpr, 1, 14, $noreg
6144B	  %247:tgpr, $cpsr = tADC killed %244:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
6160B	  tSTRspi %246:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
6176B	  tSTRspi %247:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
6192B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6208B	  $r0 = COPY %217:tgpr
6224B	  $r2 = COPY %246:tgpr
6240B	  $r3 = COPY %247:tgpr
6256B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6272B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6288B	  %248:tgpr = COPY $r0
6304B	  %249:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
6320B	  %250:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
6336B	  %251:tgpr, $cpsr = tADDi3 killed %250:tgpr, 1, 14, $noreg
6352B	  %252:tgpr, $cpsr = tADC killed %249:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
6368B	  tSTRspi %251:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
6384B	  tSTRspi %252:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
6400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6416B	  $r0 = COPY %217:tgpr
6432B	  $r2 = COPY %251:tgpr
6448B	  $r3 = COPY %252:tgpr
6464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6496B	  %253:tgpr = COPY $r0
6512B	  %254:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
6528B	  %255:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
6544B	  %256:tgpr, $cpsr = tADDi3 killed %255:tgpr, 1, 14, $noreg
6560B	  %257:tgpr, $cpsr = tADC killed %254:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
6576B	  tSTRspi %256:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
6592B	  tSTRspi %257:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
6608B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6624B	  $r0 = COPY %217:tgpr
6640B	  $r2 = COPY %256:tgpr
6656B	  $r3 = COPY %257:tgpr
6672B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6688B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6704B	  %258:tgpr = COPY $r0
6720B	  %259:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
6736B	  %260:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
6752B	  %261:tgpr, $cpsr = tADDi3 killed %260:tgpr, 1, 14, $noreg
6768B	  %262:tgpr, $cpsr = tADC killed %259:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
6784B	  tSTRspi %261:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
6800B	  tSTRspi %262:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
6816B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6832B	  $r0 = COPY %217:tgpr
6848B	  $r2 = COPY %261:tgpr
6864B	  $r3 = COPY %262:tgpr
6880B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6896B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6912B	  %263:tgpr = COPY $r0
6928B	  %264:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
6944B	  %265:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
6960B	  %266:tgpr, $cpsr = tADDi3 killed %265:tgpr, 1, 14, $noreg
6976B	  %267:tgpr, $cpsr = tADC killed %264:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
6992B	  tSTRspi %266:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
7008B	  tSTRspi %267:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
7024B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7040B	  $r0 = COPY %217:tgpr
7056B	  $r2 = COPY %266:tgpr
7072B	  $r3 = COPY %267:tgpr
7088B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7104B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7120B	  %268:tgpr = COPY $r0
7136B	  %269:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
7152B	  %270:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
7168B	  %271:tgpr, $cpsr = tADDi3 killed %270:tgpr, 1, 14, $noreg
7184B	  %272:tgpr, $cpsr = tADC killed %269:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
7200B	  tSTRspi %271:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
7216B	  tSTRspi %272:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
7232B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7248B	  $r0 = COPY %217:tgpr
7264B	  $r2 = COPY %271:tgpr
7280B	  $r3 = COPY %272:tgpr
7296B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7312B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7328B	  %273:tgpr = COPY $r0
7344B	  %274:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
7360B	  %275:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
7376B	  %276:tgpr, $cpsr = tADDi3 killed %275:tgpr, 1, 14, $noreg
7392B	  %277:tgpr, $cpsr = tADC killed %274:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
7408B	  tSTRspi %276:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
7424B	  tSTRspi %277:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
7440B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7456B	  $r0 = COPY %217:tgpr
7472B	  $r2 = COPY %276:tgpr
7488B	  $r3 = COPY %277:tgpr
7504B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7520B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7536B	  %278:tgpr = COPY $r0
7552B	  %279:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
7568B	  %280:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
7584B	  %281:tgpr, $cpsr = tADDi3 killed %280:tgpr, 1, 14, $noreg
7600B	  %282:tgpr, $cpsr = tADC killed %279:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
7616B	  tSTRspi %281:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
7632B	  tSTRspi %282:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
7648B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7664B	  $r0 = COPY %217:tgpr
7680B	  $r2 = COPY %281:tgpr
7696B	  $r3 = COPY %282:tgpr
7712B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7728B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7744B	  %283:tgpr = COPY $r0
7760B	  %284:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
7776B	  %285:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
7792B	  %286:tgpr, $cpsr = tADDi3 killed %285:tgpr, 1, 14, $noreg
7808B	  %287:tgpr, $cpsr = tADC killed %284:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
7824B	  tSTRspi %286:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
7840B	  tSTRspi %287:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
7856B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7872B	  $r0 = COPY %217:tgpr
7888B	  $r2 = COPY %286:tgpr
7904B	  $r3 = COPY %287:tgpr
7920B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7936B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7952B	  %288:tgpr = COPY $r0
7968B	  %289:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
7984B	  %290:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
8000B	  %291:tgpr, $cpsr = tADDi3 killed %290:tgpr, 1, 14, $noreg
8016B	  %292:tgpr, $cpsr = tADC killed %289:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
8032B	  tSTRspi %291:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
8048B	  tSTRspi %292:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
8064B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8080B	  $r0 = COPY %217:tgpr
8096B	  $r2 = COPY %291:tgpr
8112B	  $r3 = COPY %292:tgpr
8128B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8144B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8160B	  %293:tgpr = COPY $r0
8176B	  %294:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
8192B	  %295:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
8208B	  %296:tgpr, $cpsr = tADDi3 killed %295:tgpr, 1, 14, $noreg
8224B	  %297:tgpr, $cpsr = tADC killed %294:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
8240B	  tSTRspi %296:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
8256B	  tSTRspi %297:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
8272B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8288B	  $r0 = COPY %217:tgpr
8304B	  $r2 = COPY %296:tgpr
8320B	  $r3 = COPY %297:tgpr
8336B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8352B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8368B	  %298:tgpr = COPY $r0
8384B	  %299:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
8400B	  %300:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
8416B	  %301:tgpr, $cpsr = tADDi3 killed %300:tgpr, 1, 14, $noreg
8432B	  %302:tgpr, $cpsr = tADC killed %299:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
8448B	  tSTRspi %301:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
8464B	  tSTRspi %302:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
8480B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8496B	  $r0 = COPY %217:tgpr
8512B	  $r2 = COPY %301:tgpr
8528B	  $r3 = COPY %302:tgpr
8544B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8560B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8576B	  %303:tgpr = COPY $r0
8592B	  %304:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
8608B	  %305:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
8624B	  %306:tgpr, $cpsr = tADDi3 killed %305:tgpr, 1, 14, $noreg
8640B	  %307:tgpr, $cpsr = tADC killed %304:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
8656B	  tSTRspi %306:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
8672B	  tSTRspi %307:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
8688B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8704B	  $r0 = COPY %217:tgpr
8720B	  $r2 = COPY %306:tgpr
8736B	  $r3 = COPY %307:tgpr
8752B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8768B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8784B	  %308:tgpr = COPY $r0
8800B	  %309:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
8816B	  %310:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
8832B	  %311:tgpr, $cpsr = tADDi3 killed %310:tgpr, 1, 14, $noreg
8848B	  %312:tgpr, $cpsr = tADC killed %309:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
8864B	  tSTRspi %311:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
8880B	  tSTRspi %312:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
8896B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8912B	  $r0 = COPY %217:tgpr
8928B	  $r2 = COPY %311:tgpr
8944B	  $r3 = COPY %312:tgpr
8960B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8976B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8992B	  %313:tgpr = COPY $r0
9008B	  %314:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
9024B	  %315:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
9040B	  %316:tgpr, $cpsr = tADDi3 killed %315:tgpr, 1, 14, $noreg
9056B	  %317:tgpr, $cpsr = tADC killed %314:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit $cpsr
9072B	  tSTRspi %316:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
9088B	  tSTRspi %317:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
9104B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9120B	  $r0 = COPY %217:tgpr
9136B	  $r2 = COPY %316:tgpr
9152B	  $r3 = COPY %317:tgpr
9168B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
9184B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9200B	  %318:tgpr = COPY $r0
9216B	  %319:tgpr = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
9232B	  $r0 = COPY %319:tgpr
9248B	  tBX_RET 14, $noreg, implicit $r0

# End machine code for function moreThan20Variables.

********** Stack Coloring **********
********** Function: moreThan20Variables
Found 0 markers and 25 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 8 bytes.
Slot #4 - 8 bytes.
Slot #5 - 8 bytes.
Slot #6 - 8 bytes.
Slot #7 - 8 bytes.
Slot #8 - 8 bytes.
Slot #9 - 8 bytes.
Slot #10 - 8 bytes.
Slot #11 - 8 bytes.
Slot #12 - 8 bytes.
Slot #13 - 8 bytes.
Slot #14 - 8 bytes.
Slot #15 - 8 bytes.
Slot #16 - 8 bytes.
Slot #17 - 8 bytes.
Slot #18 - 8 bytes.
Slot #19 - 8 bytes.
Slot #20 - 8 bytes.
Slot #21 - 8 bytes.
Slot #22 - 8 bytes.
Slot #23 - 8 bytes.
Slot #24 - 4 bytes.
Total Stack size: 184 bytes

Will not try to merge slots.
Removed 0 markers.
Allocate FI(0) to local offset -4
Allocate FI(1) to local offset -8
Allocate FI(2) to local offset -12
Allocate FI(3) to local offset -24
Allocate FI(4) to local offset -32
Allocate FI(5) to local offset -40
Allocate FI(6) to local offset -48
Allocate FI(7) to local offset -56
Allocate FI(8) to local offset -64
Allocate FI(9) to local offset -72
Allocate FI(10) to local offset -80
Allocate FI(11) to local offset -88
Allocate FI(12) to local offset -96
Allocate FI(13) to local offset -104
Allocate FI(14) to local offset -112
Allocate FI(15) to local offset -120
Allocate FI(16) to local offset -128
Allocate FI(17) to local offset -136
Allocate FI(18) to local offset -144
Allocate FI(19) to local offset -152
Allocate FI(20) to local offset -160
Allocate FI(21) to local offset -168
Allocate FI(22) to local offset -176
Allocate FI(23) to local offset -184
Allocate FI(24) to local offset -188
Skipping pass 'Remove dead machine instructions' on function moreThan20Variables

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - BB0[]: float = 1.0, int = 8

Skipping pass 'Early Machine Loop Invariant Code Motion' on function moreThan20Variables

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - BB0[]: float = 1.0, int = 8

Skipping pass 'Machine Common Subexpression Elimination' on function moreThan20Variables
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
Computing cycles for function: moreThan20Variables
Entry block: bb.0 (%ir-block.3)
DFS visiting block: bb.0 (%ir-block.3)
  first encountered at depth 1
  preorder number: 1
DFS visiting block: bb.0 (%ir-block.3)
  ended at 1
Preorder:
  bb.0 (%ir-block.3): 0
Skipping pass 'Machine code sinking' on function moreThan20Variables
Skipping pass 'Peephole Optimizations' on function moreThan20Variables
Skipping pass 'Remove dead machine instructions' on function moreThan20Variables
Skipping pass 'ARM MLA / MLS expansion pass' on function moreThan20Variables
Skipping pass 'ARM pre- register allocation load / store optimization pass' on function moreThan20Variables
Skipping pass 'ARM A15 S->D optimizer' on function moreThan20Variables
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: moreThan20Variables
%bb.0 has 1 implicit defs.
Processing %211:tgpr = IMPLICIT_DEF
Converting to IMPLICIT_DEF: $r1 = COPY undef %211:tgpr
Processing $r1 = IMPLICIT_DEF undef %211:tgpr
Physreg user: tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
Skipping pass 'Two-Address instruction pass' on function moreThan20Variables
********** REWRITING TWO-ADDR INSTRS **********
********** Function: moreThan20Variables
	%7:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %4:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%7:tgpr = COPY %5:tgpr
		rewrite to:	%7:tgpr, dead $cpsr = tSBC %7:tgpr(tied-def 0), killed %4:tgpr, 14, $noreg, implicit killed $cpsr
	%12:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %10:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%12:tgpr = COPY %5:tgpr
		rewrite to:	%12:tgpr, dead $cpsr = tSBC %12:tgpr(tied-def 0), killed %10:tgpr, 14, $noreg, implicit killed $cpsr
	%15:tgpr, dead $cpsr = nsw tMUL killed %13:tgpr, killed %14:tgpr(tied-def 0), 14, $noreg
		prepend:	%15:tgpr = COPY %14:tgpr
		rewrite to:	%15:tgpr, dead $cpsr = nsw tMUL killed %13:tgpr, %15:tgpr(tied-def 0), 14, $noreg
	%18:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %16:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%18:tgpr = COPY %5:tgpr
		rewrite to:	%18:tgpr, dead $cpsr = tSBC %18:tgpr(tied-def 0), killed %16:tgpr, 14, $noreg, implicit killed $cpsr
	%23:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %21:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%23:tgpr = COPY %5:tgpr
		rewrite to:	%23:tgpr, dead $cpsr = tSBC %23:tgpr(tied-def 0), killed %21:tgpr, 14, $noreg, implicit killed $cpsr
	%26:tgpr, dead $cpsr = nsw tMUL killed %24:tgpr, killed %25:tgpr(tied-def 0), 14, $noreg
		prepend:	%26:tgpr = COPY %25:tgpr
		rewrite to:	%26:tgpr, dead $cpsr = nsw tMUL killed %24:tgpr, %26:tgpr(tied-def 0), 14, $noreg
	%29:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %27:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%29:tgpr = COPY %5:tgpr
		rewrite to:	%29:tgpr, dead $cpsr = tSBC %29:tgpr(tied-def 0), killed %27:tgpr, 14, $noreg, implicit killed $cpsr
	%32:tgpr, dead $cpsr = nsw tMUL killed %30:tgpr, killed %31:tgpr(tied-def 0), 14, $noreg
		prepend:	%32:tgpr = COPY %31:tgpr
		rewrite to:	%32:tgpr, dead $cpsr = nsw tMUL killed %30:tgpr, %32:tgpr(tied-def 0), 14, $noreg
	%35:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %33:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%35:tgpr = COPY %5:tgpr
		rewrite to:	%35:tgpr, dead $cpsr = tSBC %35:tgpr(tied-def 0), killed %33:tgpr, 14, $noreg, implicit killed $cpsr
	%38:tgpr, dead $cpsr = nsw tMUL killed %36:tgpr, killed %37:tgpr(tied-def 0), 14, $noreg
		prepend:	%38:tgpr = COPY %37:tgpr
		rewrite to:	%38:tgpr, dead $cpsr = nsw tMUL killed %36:tgpr, %38:tgpr(tied-def 0), 14, $noreg
	%41:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %39:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%41:tgpr = COPY %5:tgpr
		rewrite to:	%41:tgpr, dead $cpsr = tSBC %41:tgpr(tied-def 0), killed %39:tgpr, 14, $noreg, implicit killed $cpsr
	%46:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %44:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%46:tgpr = COPY %5:tgpr
		rewrite to:	%46:tgpr, dead $cpsr = tSBC %46:tgpr(tied-def 0), killed %44:tgpr, 14, $noreg, implicit killed $cpsr
	%49:tgpr, dead $cpsr = nsw tMUL killed %47:tgpr, killed %48:tgpr(tied-def 0), 14, $noreg
		prepend:	%49:tgpr = COPY %48:tgpr
		rewrite to:	%49:tgpr, dead $cpsr = nsw tMUL killed %47:tgpr, %49:tgpr(tied-def 0), 14, $noreg
	%52:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %50:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%52:tgpr = COPY %5:tgpr
		rewrite to:	%52:tgpr, dead $cpsr = tSBC %52:tgpr(tied-def 0), killed %50:tgpr, 14, $noreg, implicit killed $cpsr
	%55:tgpr, dead $cpsr = nsw tMUL killed %53:tgpr, killed %54:tgpr(tied-def 0), 14, $noreg
		prepend:	%55:tgpr = COPY %54:tgpr
		rewrite to:	%55:tgpr, dead $cpsr = nsw tMUL killed %53:tgpr, %55:tgpr(tied-def 0), 14, $noreg
	%58:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %56:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%58:tgpr = COPY %5:tgpr
		rewrite to:	%58:tgpr, dead $cpsr = tSBC %58:tgpr(tied-def 0), killed %56:tgpr, 14, $noreg, implicit killed $cpsr
	%61:tgpr, dead $cpsr = nsw tMUL killed %59:tgpr, killed %60:tgpr(tied-def 0), 14, $noreg
		prepend:	%61:tgpr = COPY %60:tgpr
		rewrite to:	%61:tgpr, dead $cpsr = nsw tMUL killed %59:tgpr, %61:tgpr(tied-def 0), 14, $noreg
	%64:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %62:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%64:tgpr = COPY %5:tgpr
		rewrite to:	%64:tgpr, dead $cpsr = tSBC %64:tgpr(tied-def 0), killed %62:tgpr, 14, $noreg, implicit killed $cpsr
	%67:tgpr, dead $cpsr = nsw tMUL killed %65:tgpr, killed %66:tgpr(tied-def 0), 14, $noreg
		prepend:	%67:tgpr = COPY %66:tgpr
		rewrite to:	%67:tgpr, dead $cpsr = nsw tMUL killed %65:tgpr, %67:tgpr(tied-def 0), 14, $noreg
	%70:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %68:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%70:tgpr = COPY %5:tgpr
		rewrite to:	%70:tgpr, dead $cpsr = tSBC %70:tgpr(tied-def 0), killed %68:tgpr, 14, $noreg, implicit killed $cpsr
	%73:tgpr, dead $cpsr = nsw tMUL killed %71:tgpr, killed %72:tgpr(tied-def 0), 14, $noreg
		prepend:	%73:tgpr = COPY %72:tgpr
		rewrite to:	%73:tgpr, dead $cpsr = nsw tMUL killed %71:tgpr, %73:tgpr(tied-def 0), 14, $noreg
	%76:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %74:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%76:tgpr = COPY %5:tgpr
		rewrite to:	%76:tgpr, dead $cpsr = tSBC %76:tgpr(tied-def 0), killed %74:tgpr, 14, $noreg, implicit killed $cpsr
	%79:tgpr, dead $cpsr = nsw tMUL killed %77:tgpr, killed %78:tgpr(tied-def 0), 14, $noreg
		prepend:	%79:tgpr = COPY %78:tgpr
		rewrite to:	%79:tgpr, dead $cpsr = nsw tMUL killed %77:tgpr, %79:tgpr(tied-def 0), 14, $noreg
	%82:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %80:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%82:tgpr = COPY %5:tgpr
		rewrite to:	%82:tgpr, dead $cpsr = tSBC %82:tgpr(tied-def 0), killed %80:tgpr, 14, $noreg, implicit killed $cpsr
	%85:tgpr, dead $cpsr = nsw tMUL killed %83:tgpr, killed %84:tgpr(tied-def 0), 14, $noreg
		prepend:	%85:tgpr = COPY %84:tgpr
		rewrite to:	%85:tgpr, dead $cpsr = nsw tMUL killed %83:tgpr, %85:tgpr(tied-def 0), 14, $noreg
	%88:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %86:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%88:tgpr = COPY %5:tgpr
		rewrite to:	%88:tgpr, dead $cpsr = tSBC %88:tgpr(tied-def 0), killed %86:tgpr, 14, $noreg, implicit killed $cpsr
	%93:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %91:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%93:tgpr = COPY %5:tgpr
		rewrite to:	%93:tgpr, dead $cpsr = tSBC %93:tgpr(tied-def 0), killed %91:tgpr, 14, $noreg, implicit killed $cpsr
	%96:tgpr, dead $cpsr = nsw tMUL killed %94:tgpr, killed %95:tgpr(tied-def 0), 14, $noreg
		prepend:	%96:tgpr = COPY %95:tgpr
		rewrite to:	%96:tgpr, dead $cpsr = nsw tMUL killed %94:tgpr, %96:tgpr(tied-def 0), 14, $noreg
	%99:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %97:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%99:tgpr = COPY %5:tgpr
		rewrite to:	%99:tgpr, dead $cpsr = tSBC %99:tgpr(tied-def 0), killed %97:tgpr, 14, $noreg, implicit killed $cpsr
	%102:tgpr, dead $cpsr = nsw tMUL killed %100:tgpr, killed %101:tgpr(tied-def 0), 14, $noreg
		prepend:	%102:tgpr = COPY %101:tgpr
		rewrite to:	%102:tgpr, dead $cpsr = nsw tMUL killed %100:tgpr, %102:tgpr(tied-def 0), 14, $noreg
	%105:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %103:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%105:tgpr = COPY %5:tgpr
		rewrite to:	%105:tgpr, dead $cpsr = tSBC %105:tgpr(tied-def 0), killed %103:tgpr, 14, $noreg, implicit killed $cpsr
	%108:tgpr, dead $cpsr = nsw tMUL killed %106:tgpr, killed %107:tgpr(tied-def 0), 14, $noreg
		prepend:	%108:tgpr = COPY %107:tgpr
		rewrite to:	%108:tgpr, dead $cpsr = nsw tMUL killed %106:tgpr, %108:tgpr(tied-def 0), 14, $noreg
	%111:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %109:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%111:tgpr = COPY %5:tgpr
		rewrite to:	%111:tgpr, dead $cpsr = tSBC %111:tgpr(tied-def 0), killed %109:tgpr, 14, $noreg, implicit killed $cpsr
	%114:tgpr, dead $cpsr = nsw tMUL killed %112:tgpr, killed %113:tgpr(tied-def 0), 14, $noreg
		prepend:	%114:tgpr = COPY %113:tgpr
		rewrite to:	%114:tgpr, dead $cpsr = nsw tMUL killed %112:tgpr, %114:tgpr(tied-def 0), 14, $noreg
	%117:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %115:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%117:tgpr = COPY %5:tgpr
		rewrite to:	%117:tgpr, dead $cpsr = tSBC %117:tgpr(tied-def 0), killed %115:tgpr, 14, $noreg, implicit killed $cpsr
	%120:tgpr, dead $cpsr = nsw tMUL killed %118:tgpr, killed %119:tgpr(tied-def 0), 14, $noreg
		prepend:	%120:tgpr = COPY %119:tgpr
		rewrite to:	%120:tgpr, dead $cpsr = nsw tMUL killed %118:tgpr, %120:tgpr(tied-def 0), 14, $noreg
	%123:tgpr, dead $cpsr = tSBC %5:tgpr(tied-def 0), killed %121:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%123:tgpr = COPY %5:tgpr
		rewrite to:	%123:tgpr, dead $cpsr = tSBC %123:tgpr(tied-def 0), killed %121:tgpr, 14, $noreg, implicit killed $cpsr
	%131:tgpr, dead $cpsr = tAND killed %128:tgpr(tied-def 0), killed %130:tgpr, 14, $noreg
		prepend:	%131:tgpr = COPY %128:tgpr
		rewrite to:	%131:tgpr, dead $cpsr = tAND %131:tgpr(tied-def 0), killed %130:tgpr, 14, $noreg
	%132:tgpr, dead $cpsr = tAND killed %127:tgpr(tied-def 0), killed %129:tgpr, 14, $noreg
		prepend:	%132:tgpr = COPY %127:tgpr
		rewrite to:	%132:tgpr, dead $cpsr = tAND %132:tgpr(tied-def 0), killed %129:tgpr, 14, $noreg
	%135:tgpr, dead $cpsr = tORR killed %132:tgpr(tied-def 0), killed %134:tgpr, 14, $noreg
		prepend:	%135:tgpr = COPY %132:tgpr
		rewrite to:	%135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), killed %134:tgpr, 14, $noreg
	%136:tgpr, dead $cpsr = tORR killed %131:tgpr(tied-def 0), killed %133:tgpr, 14, $noreg
		prepend:	%136:tgpr = COPY %131:tgpr
		rewrite to:	%136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), killed %133:tgpr, 14, $noreg
	%139:tgpr, dead $cpsr = tORR killed %136:tgpr(tied-def 0), killed %138:tgpr, 14, $noreg
		prepend:	%139:tgpr = COPY %136:tgpr
		rewrite to:	%139:tgpr, dead $cpsr = tORR %139:tgpr(tied-def 0), killed %138:tgpr, 14, $noreg
	%140:tgpr, dead $cpsr = tORR killed %135:tgpr(tied-def 0), killed %137:tgpr, 14, $noreg
		prepend:	%140:tgpr = COPY %135:tgpr
		rewrite to:	%140:tgpr, dead $cpsr = tORR %140:tgpr(tied-def 0), killed %137:tgpr, 14, $noreg
	%154:tgpr, dead $cpsr = tADC killed %141:tgpr(tied-def 0), killed %152:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%154:tgpr = COPY %141:tgpr
		rewrite to:	%154:tgpr, dead $cpsr = tADC %154:tgpr(tied-def 0), killed %152:tgpr, 14, $noreg, implicit killed $cpsr
	%164:tgpr, dead $cpsr = tADC killed %160:tgpr(tied-def 0), killed %161:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%164:tgpr = COPY %160:tgpr
		rewrite to:	%164:tgpr, dead $cpsr = tADC %164:tgpr(tied-def 0), killed %161:tgpr, 14, $noreg, implicit killed $cpsr
	%165:tgpr, dead $cpsr = tAND killed %154:tgpr(tied-def 0), killed %164:tgpr, 14, $noreg
		prepend:	%165:tgpr = COPY %154:tgpr
		rewrite to:	%165:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), killed %164:tgpr, 14, $noreg
	%166:tgpr, dead $cpsr = tAND killed %153:tgpr(tied-def 0), killed %163:tgpr, 14, $noreg
		prepend:	%166:tgpr = COPY %153:tgpr
		rewrite to:	%166:tgpr, dead $cpsr = tAND %166:tgpr(tied-def 0), killed %163:tgpr, 14, $noreg
	%173:tgpr, dead $cpsr = tAND killed %165:tgpr(tied-def 0), killed %172:tgpr, 14, $noreg
		prepend:	%173:tgpr = COPY %165:tgpr
		rewrite to:	%173:tgpr, dead $cpsr = tAND %173:tgpr(tied-def 0), killed %172:tgpr, 14, $noreg
	%174:tgpr, dead $cpsr = tAND killed %166:tgpr(tied-def 0), killed %171:tgpr, 14, $noreg
		prepend:	%174:tgpr = COPY %166:tgpr
		rewrite to:	%174:tgpr, dead $cpsr = tAND %174:tgpr(tied-def 0), killed %171:tgpr, 14, $noreg
	%175:tgpr, dead $cpsr = tORR killed %140:tgpr(tied-def 0), killed %173:tgpr, 14, $noreg
		prepend:	%175:tgpr = COPY %140:tgpr
		rewrite to:	%175:tgpr, dead $cpsr = tORR %175:tgpr(tied-def 0), killed %173:tgpr, 14, $noreg
	%176:tgpr, dead $cpsr = tORR killed %139:tgpr(tied-def 0), killed %174:tgpr, 14, $noreg
		prepend:	%176:tgpr = COPY %139:tgpr
		rewrite to:	%176:tgpr, dead $cpsr = tORR %176:tgpr(tied-def 0), killed %174:tgpr, 14, $noreg
	%184:tgpr, dead $cpsr = tSBC killed %179:tgpr(tied-def 0), killed %181:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%184:tgpr = COPY %179:tgpr
		rewrite to:	%184:tgpr, dead $cpsr = tSBC %184:tgpr(tied-def 0), killed %181:tgpr, 14, $noreg, implicit killed $cpsr
	%188:tgpr, dead $cpsr = tSBC killed %184:tgpr(tied-def 0), killed %185:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%188:tgpr = COPY %184:tgpr
		rewrite to:	%188:tgpr, dead $cpsr = tSBC %188:tgpr(tied-def 0), killed %185:tgpr, 14, $noreg, implicit killed $cpsr
	%194:tgpr, dead $cpsr = tADC killed %189:tgpr(tied-def 0), killed %191:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%194:tgpr = COPY %189:tgpr
		rewrite to:	%194:tgpr, dead $cpsr = tADC %194:tgpr(tied-def 0), killed %191:tgpr, 14, $noreg, implicit killed $cpsr
	%195:tgpr, dead $cpsr = tAND killed %188:tgpr(tied-def 0), killed %194:tgpr, 14, $noreg
		prepend:	%195:tgpr = COPY %188:tgpr
		rewrite to:	%195:tgpr, dead $cpsr = tAND %195:tgpr(tied-def 0), killed %194:tgpr, 14, $noreg
	%196:tgpr, dead $cpsr = tAND killed %187:tgpr(tied-def 0), killed %193:tgpr, 14, $noreg
		prepend:	%196:tgpr = COPY %187:tgpr
		rewrite to:	%196:tgpr, dead $cpsr = tAND %196:tgpr(tied-def 0), killed %193:tgpr, 14, $noreg
	%197:tgpr, dead $cpsr = tEOR killed %178:tgpr(tied-def 0), killed %196:tgpr, 14, $noreg
		prepend:	%197:tgpr = COPY %178:tgpr
		rewrite to:	%197:tgpr, dead $cpsr = tEOR %197:tgpr(tied-def 0), killed %196:tgpr, 14, $noreg
	%198:tgpr, dead $cpsr = tEOR killed %177:tgpr(tied-def 0), killed %195:tgpr, 14, $noreg
		prepend:	%198:tgpr = COPY %177:tgpr
		rewrite to:	%198:tgpr, dead $cpsr = tEOR %198:tgpr(tied-def 0), killed %195:tgpr, 14, $noreg
	%199:tgpr, dead $cpsr = tORR killed %175:tgpr(tied-def 0), killed %198:tgpr, 14, $noreg
		prepend:	%199:tgpr = COPY %175:tgpr
		rewrite to:	%199:tgpr, dead $cpsr = tORR %199:tgpr(tied-def 0), killed %198:tgpr, 14, $noreg
	%200:tgpr, dead $cpsr = tORR killed %176:tgpr(tied-def 0), killed %197:tgpr, 14, $noreg
		prepend:	%200:tgpr = COPY %176:tgpr
		rewrite to:	%200:tgpr, dead $cpsr = tORR %200:tgpr(tied-def 0), killed %197:tgpr, 14, $noreg
	%209:tgpr, dead $cpsr = tORR killed %199:tgpr(tied-def 0), killed %208:tgpr, 14, $noreg
		prepend:	%209:tgpr = COPY %199:tgpr
		rewrite to:	%209:tgpr, dead $cpsr = tORR %209:tgpr(tied-def 0), killed %208:tgpr, 14, $noreg
	%210:tgpr, dead $cpsr = tORR killed %200:tgpr(tied-def 0), killed %207:tgpr, 14, $noreg
		prepend:	%210:tgpr = COPY %200:tgpr
		rewrite to:	%210:tgpr, dead $cpsr = tORR %210:tgpr(tied-def 0), killed %207:tgpr, 14, $noreg
	%216:tgpr, dead $cpsr = tADC killed %213:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%216:tgpr = COPY %213:tgpr
		rewrite to:	%216:tgpr, dead $cpsr = tADC %216:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%222:tgpr, dead $cpsr = tADC killed %219:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%222:tgpr = COPY %219:tgpr
		rewrite to:	%222:tgpr, dead $cpsr = tADC %222:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%227:tgpr, dead $cpsr = tADC killed %224:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%227:tgpr = COPY %224:tgpr
		rewrite to:	%227:tgpr, dead $cpsr = tADC %227:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%232:tgpr, dead $cpsr = tADC killed %229:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%232:tgpr = COPY %229:tgpr
		rewrite to:	%232:tgpr, dead $cpsr = tADC %232:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%237:tgpr, dead $cpsr = tADC killed %234:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%237:tgpr = COPY %234:tgpr
		rewrite to:	%237:tgpr, dead $cpsr = tADC %237:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%242:tgpr, dead $cpsr = tADC killed %239:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%242:tgpr = COPY %239:tgpr
		rewrite to:	%242:tgpr, dead $cpsr = tADC %242:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%247:tgpr, dead $cpsr = tADC killed %244:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%247:tgpr = COPY %244:tgpr
		rewrite to:	%247:tgpr, dead $cpsr = tADC %247:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%252:tgpr, dead $cpsr = tADC killed %249:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%252:tgpr = COPY %249:tgpr
		rewrite to:	%252:tgpr, dead $cpsr = tADC %252:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%257:tgpr, dead $cpsr = tADC killed %254:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%257:tgpr = COPY %254:tgpr
		rewrite to:	%257:tgpr, dead $cpsr = tADC %257:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%262:tgpr, dead $cpsr = tADC killed %259:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%262:tgpr = COPY %259:tgpr
		rewrite to:	%262:tgpr, dead $cpsr = tADC %262:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%267:tgpr, dead $cpsr = tADC killed %264:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%267:tgpr = COPY %264:tgpr
		rewrite to:	%267:tgpr, dead $cpsr = tADC %267:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%272:tgpr, dead $cpsr = tADC killed %269:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%272:tgpr = COPY %269:tgpr
		rewrite to:	%272:tgpr, dead $cpsr = tADC %272:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%277:tgpr, dead $cpsr = tADC killed %274:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%277:tgpr = COPY %274:tgpr
		rewrite to:	%277:tgpr, dead $cpsr = tADC %277:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%282:tgpr, dead $cpsr = tADC killed %279:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%282:tgpr = COPY %279:tgpr
		rewrite to:	%282:tgpr, dead $cpsr = tADC %282:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%287:tgpr, dead $cpsr = tADC killed %284:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%287:tgpr = COPY %284:tgpr
		rewrite to:	%287:tgpr, dead $cpsr = tADC %287:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%292:tgpr, dead $cpsr = tADC killed %289:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%292:tgpr = COPY %289:tgpr
		rewrite to:	%292:tgpr, dead $cpsr = tADC %292:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%297:tgpr, dead $cpsr = tADC killed %294:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%297:tgpr = COPY %294:tgpr
		rewrite to:	%297:tgpr, dead $cpsr = tADC %297:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%302:tgpr, dead $cpsr = tADC killed %299:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%302:tgpr = COPY %299:tgpr
		rewrite to:	%302:tgpr, dead $cpsr = tADC %302:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%307:tgpr, dead $cpsr = tADC killed %304:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%307:tgpr = COPY %304:tgpr
		rewrite to:	%307:tgpr, dead $cpsr = tADC %307:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%312:tgpr, dead $cpsr = tADC killed %309:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%312:tgpr = COPY %309:tgpr
		rewrite to:	%312:tgpr, dead $cpsr = tADC %312:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
	%317:tgpr, dead $cpsr = tADC killed %314:tgpr(tied-def 0), killed %5:tgpr, 14, $noreg, implicit killed $cpsr
		prepend:	%317:tgpr = COPY %314:tgpr
		rewrite to:	%317:tgpr, dead $cpsr = tADC %317:tgpr(tied-def 0), killed %5:tgpr, 14, $noreg, implicit killed $cpsr
# Machine code for function moreThan20Variables: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=8, align=8, at location [SP]
  fi#20: size=8, align=8, at location [SP]
  fi#21: size=8, align=8, at location [SP]
  fi#22: size=8, align=8, at location [SP]
  fi#23: size=8, align=8, at location [SP]
  fi#24: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

0B	bb.0 (%ir-block.3):
	  liveins: $r0, $r1, $r2
16B	  %2:tgpr = COPY killed $r2
32B	  %1:tgpr = COPY killed $r1
48B	  %0:tgpr = COPY killed $r0
64B	  tSTRspi killed %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
80B	  tSTRspi killed %1:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
96B	  tSTRspi killed %2:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
112B	  %3:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
128B	  %4:tgpr, dead $cpsr = tASRri %3:tgpr, 31, 14, $noreg
144B	  %5:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
160B	  %6:tgpr, $cpsr = tRSB killed %3:tgpr, 14, $noreg
176B	  %7:tgpr = COPY %5:tgpr
192B	  %7:tgpr, dead $cpsr = tSBC %7:tgpr(tied-def 0), killed %4:tgpr, 14, $noreg, implicit killed $cpsr
208B	  tSTRspi killed %6:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
224B	  tSTRspi killed %7:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
240B	  %8:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
256B	  %9:tgpr, dead $cpsr = tLSLri killed %8:tgpr, 1, 14, $noreg
272B	  %10:tgpr, dead $cpsr = tASRri %9:tgpr, 31, 14, $noreg
288B	  %11:tgpr, $cpsr = tRSB killed %9:tgpr, 14, $noreg
304B	  %12:tgpr = COPY %5:tgpr
320B	  %12:tgpr, dead $cpsr = tSBC %12:tgpr(tied-def 0), killed %10:tgpr, 14, $noreg, implicit killed $cpsr
336B	  tSTRspi killed %11:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
352B	  tSTRspi killed %12:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
368B	  %13:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
384B	  %14:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
400B	  %15:tgpr = COPY killed %14:tgpr
416B	  %15:tgpr, dead $cpsr = nsw tMUL killed %13:tgpr, %15:tgpr(tied-def 0), 14, $noreg
432B	  %16:tgpr, dead $cpsr = tASRri %15:tgpr, 31, 14, $noreg
448B	  %17:tgpr, $cpsr = tRSB killed %15:tgpr, 14, $noreg
464B	  %18:tgpr = COPY %5:tgpr
480B	  %18:tgpr, dead $cpsr = tSBC %18:tgpr(tied-def 0), killed %16:tgpr, 14, $noreg, implicit killed $cpsr
496B	  tSTRspi killed %17:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
512B	  tSTRspi killed %18:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
528B	  %19:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  %20:tgpr, dead $cpsr = tLSLri killed %19:tgpr, 2, 14, $noreg
560B	  %21:tgpr, dead $cpsr = tASRri %20:tgpr, 31, 14, $noreg
576B	  %22:tgpr, $cpsr = tRSB killed %20:tgpr, 14, $noreg
592B	  %23:tgpr = COPY %5:tgpr
608B	  %23:tgpr, dead $cpsr = tSBC %23:tgpr(tied-def 0), killed %21:tgpr, 14, $noreg, implicit killed $cpsr
624B	  tSTRspi killed %22:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
640B	  tSTRspi killed %23:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
656B	  %24:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
672B	  %25:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
688B	  %26:tgpr = COPY killed %25:tgpr
704B	  %26:tgpr, dead $cpsr = nsw tMUL killed %24:tgpr, %26:tgpr(tied-def 0), 14, $noreg
720B	  %27:tgpr, dead $cpsr = tASRri %26:tgpr, 31, 14, $noreg
736B	  %28:tgpr, $cpsr = tRSB killed %26:tgpr, 14, $noreg
752B	  %29:tgpr = COPY %5:tgpr
768B	  %29:tgpr, dead $cpsr = tSBC %29:tgpr(tied-def 0), killed %27:tgpr, 14, $noreg, implicit killed $cpsr
784B	  tSTRspi killed %28:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
800B	  tSTRspi killed %29:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
816B	  %30:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
832B	  %31:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
848B	  %32:tgpr = COPY killed %31:tgpr
864B	  %32:tgpr, dead $cpsr = nsw tMUL killed %30:tgpr, %32:tgpr(tied-def 0), 14, $noreg
880B	  %33:tgpr, dead $cpsr = tASRri %32:tgpr, 31, 14, $noreg
896B	  %34:tgpr, $cpsr = tRSB killed %32:tgpr, 14, $noreg
912B	  %35:tgpr = COPY %5:tgpr
928B	  %35:tgpr, dead $cpsr = tSBC %35:tgpr(tied-def 0), killed %33:tgpr, 14, $noreg, implicit killed $cpsr
944B	  tSTRspi killed %34:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
960B	  tSTRspi killed %35:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
976B	  %36:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
992B	  %37:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
1008B	  %38:tgpr = COPY killed %37:tgpr
1024B	  %38:tgpr, dead $cpsr = nsw tMUL killed %36:tgpr, %38:tgpr(tied-def 0), 14, $noreg
1040B	  %39:tgpr, dead $cpsr = tASRri %38:tgpr, 31, 14, $noreg
1056B	  %40:tgpr, $cpsr = tRSB killed %38:tgpr, 14, $noreg
1072B	  %41:tgpr = COPY %5:tgpr
1088B	  %41:tgpr, dead $cpsr = tSBC %41:tgpr(tied-def 0), killed %39:tgpr, 14, $noreg, implicit killed $cpsr
1104B	  tSTRspi killed %40:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
1120B	  tSTRspi killed %41:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
1136B	  %42:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1152B	  %43:tgpr, dead $cpsr = tLSLri killed %42:tgpr, 3, 14, $noreg
1168B	  %44:tgpr, dead $cpsr = tASRri %43:tgpr, 31, 14, $noreg
1184B	  %45:tgpr, $cpsr = tRSB killed %43:tgpr, 14, $noreg
1200B	  %46:tgpr = COPY %5:tgpr
1216B	  %46:tgpr, dead $cpsr = tSBC %46:tgpr(tied-def 0), killed %44:tgpr, 14, $noreg, implicit killed $cpsr
1232B	  tSTRspi killed %45:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
1248B	  tSTRspi killed %46:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
1264B	  %47:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1280B	  %48:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
1296B	  %49:tgpr = COPY killed %48:tgpr
1312B	  %49:tgpr, dead $cpsr = nsw tMUL killed %47:tgpr, %49:tgpr(tied-def 0), 14, $noreg
1328B	  %50:tgpr, dead $cpsr = tASRri %49:tgpr, 31, 14, $noreg
1344B	  %51:tgpr, $cpsr = tRSB killed %49:tgpr, 14, $noreg
1360B	  %52:tgpr = COPY %5:tgpr
1376B	  %52:tgpr, dead $cpsr = tSBC %52:tgpr(tied-def 0), killed %50:tgpr, 14, $noreg, implicit killed $cpsr
1392B	  tSTRspi killed %51:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
1408B	  tSTRspi killed %52:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
1424B	  %53:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1440B	  %54:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
1456B	  %55:tgpr = COPY killed %54:tgpr
1472B	  %55:tgpr, dead $cpsr = nsw tMUL killed %53:tgpr, %55:tgpr(tied-def 0), 14, $noreg
1488B	  %56:tgpr, dead $cpsr = tASRri %55:tgpr, 31, 14, $noreg
1504B	  %57:tgpr, $cpsr = tRSB killed %55:tgpr, 14, $noreg
1520B	  %58:tgpr = COPY %5:tgpr
1536B	  %58:tgpr, dead $cpsr = tSBC %58:tgpr(tied-def 0), killed %56:tgpr, 14, $noreg, implicit killed $cpsr
1552B	  tSTRspi killed %57:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
1568B	  tSTRspi killed %58:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
1584B	  %59:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1600B	  %60:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
1616B	  %61:tgpr = COPY killed %60:tgpr
1632B	  %61:tgpr, dead $cpsr = nsw tMUL killed %59:tgpr, %61:tgpr(tied-def 0), 14, $noreg
1648B	  %62:tgpr, dead $cpsr = tASRri %61:tgpr, 31, 14, $noreg
1664B	  %63:tgpr, $cpsr = tRSB killed %61:tgpr, 14, $noreg
1680B	  %64:tgpr = COPY %5:tgpr
1696B	  %64:tgpr, dead $cpsr = tSBC %64:tgpr(tied-def 0), killed %62:tgpr, 14, $noreg, implicit killed $cpsr
1712B	  tSTRspi killed %63:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
1728B	  tSTRspi killed %64:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
1744B	  %65:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1760B	  %66:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
1776B	  %67:tgpr = COPY killed %66:tgpr
1792B	  %67:tgpr, dead $cpsr = nsw tMUL killed %65:tgpr, %67:tgpr(tied-def 0), 14, $noreg
1808B	  %68:tgpr, dead $cpsr = tASRri %67:tgpr, 31, 14, $noreg
1824B	  %69:tgpr, $cpsr = tRSB killed %67:tgpr, 14, $noreg
1840B	  %70:tgpr = COPY %5:tgpr
1856B	  %70:tgpr, dead $cpsr = tSBC %70:tgpr(tied-def 0), killed %68:tgpr, 14, $noreg, implicit killed $cpsr
1872B	  tSTRspi killed %69:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
1888B	  tSTRspi killed %70:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
1904B	  %71:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1920B	  %72:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
1936B	  %73:tgpr = COPY killed %72:tgpr
1952B	  %73:tgpr, dead $cpsr = nsw tMUL killed %71:tgpr, %73:tgpr(tied-def 0), 14, $noreg
1968B	  %74:tgpr, dead $cpsr = tASRri %73:tgpr, 31, 14, $noreg
1984B	  %75:tgpr, $cpsr = tRSB killed %73:tgpr, 14, $noreg
2000B	  %76:tgpr = COPY %5:tgpr
2016B	  %76:tgpr, dead $cpsr = tSBC %76:tgpr(tied-def 0), killed %74:tgpr, 14, $noreg, implicit killed $cpsr
2032B	  tSTRspi killed %75:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
2048B	  tSTRspi killed %76:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
2064B	  %77:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2080B	  %78:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
2096B	  %79:tgpr = COPY killed %78:tgpr
2112B	  %79:tgpr, dead $cpsr = nsw tMUL killed %77:tgpr, %79:tgpr(tied-def 0), 14, $noreg
2128B	  %80:tgpr, dead $cpsr = tASRri %79:tgpr, 31, 14, $noreg
2144B	  %81:tgpr, $cpsr = tRSB killed %79:tgpr, 14, $noreg
2160B	  %82:tgpr = COPY %5:tgpr
2176B	  %82:tgpr, dead $cpsr = tSBC %82:tgpr(tied-def 0), killed %80:tgpr, 14, $noreg, implicit killed $cpsr
2192B	  tSTRspi killed %81:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
2208B	  tSTRspi killed %82:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
2224B	  %83:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2240B	  %84:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
2256B	  %85:tgpr = COPY killed %84:tgpr
2272B	  %85:tgpr, dead $cpsr = nsw tMUL killed %83:tgpr, %85:tgpr(tied-def 0), 14, $noreg
2288B	  %86:tgpr, dead $cpsr = tASRri %85:tgpr, 31, 14, $noreg
2304B	  %87:tgpr, $cpsr = tRSB killed %85:tgpr, 14, $noreg
2320B	  %88:tgpr = COPY %5:tgpr
2336B	  %88:tgpr, dead $cpsr = tSBC %88:tgpr(tied-def 0), killed %86:tgpr, 14, $noreg, implicit killed $cpsr
2352B	  tSTRspi killed %87:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
2368B	  tSTRspi killed %88:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
2384B	  %89:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2400B	  %90:tgpr, dead $cpsr = tLSLri killed %89:tgpr, 4, 14, $noreg
2416B	  %91:tgpr, dead $cpsr = tASRri %90:tgpr, 31, 14, $noreg
2432B	  %92:tgpr, $cpsr = tRSB killed %90:tgpr, 14, $noreg
2448B	  %93:tgpr = COPY %5:tgpr
2464B	  %93:tgpr, dead $cpsr = tSBC %93:tgpr(tied-def 0), killed %91:tgpr, 14, $noreg, implicit killed $cpsr
2480B	  tSTRspi killed %92:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
2496B	  tSTRspi killed %93:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
2512B	  %94:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2528B	  %95:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
2544B	  %96:tgpr = COPY killed %95:tgpr
2560B	  %96:tgpr, dead $cpsr = nsw tMUL killed %94:tgpr, %96:tgpr(tied-def 0), 14, $noreg
2576B	  %97:tgpr, dead $cpsr = tASRri %96:tgpr, 31, 14, $noreg
2592B	  %98:tgpr, $cpsr = tRSB killed %96:tgpr, 14, $noreg
2608B	  %99:tgpr = COPY %5:tgpr
2624B	  %99:tgpr, dead $cpsr = tSBC %99:tgpr(tied-def 0), killed %97:tgpr, 14, $noreg, implicit killed $cpsr
2640B	  tSTRspi killed %98:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
2656B	  tSTRspi killed %99:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
2672B	  %100:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2688B	  %101:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
2704B	  %102:tgpr = COPY killed %101:tgpr
2720B	  %102:tgpr, dead $cpsr = nsw tMUL killed %100:tgpr, %102:tgpr(tied-def 0), 14, $noreg
2736B	  %103:tgpr, dead $cpsr = tASRri %102:tgpr, 31, 14, $noreg
2752B	  %104:tgpr, $cpsr = tRSB killed %102:tgpr, 14, $noreg
2768B	  %105:tgpr = COPY %5:tgpr
2784B	  %105:tgpr, dead $cpsr = tSBC %105:tgpr(tied-def 0), killed %103:tgpr, 14, $noreg, implicit killed $cpsr
2800B	  tSTRspi killed %104:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
2816B	  tSTRspi killed %105:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
2832B	  %106:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2848B	  %107:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
2864B	  %108:tgpr = COPY killed %107:tgpr
2880B	  %108:tgpr, dead $cpsr = nsw tMUL killed %106:tgpr, %108:tgpr(tied-def 0), 14, $noreg
2896B	  %109:tgpr, dead $cpsr = tASRri %108:tgpr, 31, 14, $noreg
2912B	  %110:tgpr, $cpsr = tRSB killed %108:tgpr, 14, $noreg
2928B	  %111:tgpr = COPY %5:tgpr
2944B	  %111:tgpr, dead $cpsr = tSBC %111:tgpr(tied-def 0), killed %109:tgpr, 14, $noreg, implicit killed $cpsr
2960B	  tSTRspi killed %110:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
2976B	  tSTRspi killed %111:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
2992B	  %112:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3008B	  %113:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
3024B	  %114:tgpr = COPY killed %113:tgpr
3040B	  %114:tgpr, dead $cpsr = nsw tMUL killed %112:tgpr, %114:tgpr(tied-def 0), 14, $noreg
3056B	  %115:tgpr, dead $cpsr = tASRri %114:tgpr, 31, 14, $noreg
3072B	  %116:tgpr, $cpsr = tRSB killed %114:tgpr, 14, $noreg
3088B	  %117:tgpr = COPY %5:tgpr
3104B	  %117:tgpr, dead $cpsr = tSBC %117:tgpr(tied-def 0), killed %115:tgpr, 14, $noreg, implicit killed $cpsr
3120B	  tSTRspi killed %116:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
3136B	  tSTRspi killed %117:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
3152B	  %118:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3168B	  %119:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
3184B	  %120:tgpr = COPY killed %119:tgpr
3200B	  %120:tgpr, dead $cpsr = nsw tMUL killed %118:tgpr, %120:tgpr(tied-def 0), 14, $noreg
3216B	  %121:tgpr, dead $cpsr = tASRri %120:tgpr, 31, 14, $noreg
3232B	  %122:tgpr, $cpsr = tRSB killed %120:tgpr, 14, $noreg
3248B	  %123:tgpr = COPY %5:tgpr
3264B	  %123:tgpr, dead $cpsr = tSBC %123:tgpr(tied-def 0), killed %121:tgpr, 14, $noreg, implicit killed $cpsr
3280B	  tSTRspi killed %122:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
3296B	  tSTRspi killed %123:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
3312B	  %124:tgpr = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
3328B	  %125:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
3344B	  %126:tgpr, dead $cpsr = nsw tADDrr killed %124:tgpr, killed %125:tgpr, 14, $noreg
3360B	  %127:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
3376B	  %128:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
3392B	  %129:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
3408B	  %130:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
3424B	  %131:tgpr = COPY killed %128:tgpr
3440B	  %131:tgpr, dead $cpsr = tAND %131:tgpr(tied-def 0), killed %130:tgpr, 14, $noreg
3456B	  %132:tgpr = COPY killed %127:tgpr
3472B	  %132:tgpr, dead $cpsr = tAND %132:tgpr(tied-def 0), killed %129:tgpr, 14, $noreg
3488B	  %133:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
3504B	  %134:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
3520B	  %135:tgpr = COPY killed %132:tgpr
3536B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), killed %134:tgpr, 14, $noreg
3552B	  %136:tgpr = COPY killed %131:tgpr
3568B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), killed %133:tgpr, 14, $noreg
3584B	  %137:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
3600B	  %138:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
3616B	  %139:tgpr = COPY killed %136:tgpr
3632B	  %139:tgpr, dead $cpsr = tORR %139:tgpr(tied-def 0), killed %138:tgpr, 14, $noreg
3648B	  %140:tgpr = COPY killed %135:tgpr
3664B	  %140:tgpr, dead $cpsr = tORR %140:tgpr(tied-def 0), killed %137:tgpr, 14, $noreg
3680B	  %141:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
3696B	  %142:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
3712B	  %143:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
3728B	  %144:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
3744B	  %145:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
3760B	  %146:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
3776B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3792B	  $r0 = COPY killed %143:tgpr
3808B	  $r1 = COPY killed %144:tgpr
3824B	  $r2 = COPY killed %145:tgpr
3840B	  $r3 = COPY killed %146:tgpr
3856B	  tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3872B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3888B	  %147:tgpr = COPY killed $r0
3904B	  %148:tgpr = COPY killed $r1
3920B	  %149:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
3936B	  %150:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
3952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3968B	  $r0 = COPY killed %147:tgpr
3984B	  $r1 = COPY killed %148:tgpr
4000B	  $r2 = COPY killed %149:tgpr
4016B	  $r3 = COPY killed %150:tgpr
4032B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4048B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4064B	  %151:tgpr = COPY killed $r0
4080B	  %152:tgpr = COPY killed $r1
4096B	  %153:tgpr, $cpsr = tADDrr killed %142:tgpr, killed %151:tgpr, 14, $noreg
4112B	  %154:tgpr = COPY killed %141:tgpr
4128B	  %154:tgpr, dead $cpsr = tADC %154:tgpr(tied-def 0), killed %152:tgpr, 14, $noreg, implicit killed $cpsr
4144B	  %155:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
4160B	  %156:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
4176B	  %157:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
4192B	  %158:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
4208B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4224B	  $r0 = COPY killed %155:tgpr
4240B	  $r1 = COPY killed %156:tgpr
4256B	  $r2 = COPY killed %157:tgpr
4272B	  $r3 = COPY killed %158:tgpr
4288B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4304B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4320B	  %159:tgpr = COPY killed $r0
4336B	  %160:tgpr = COPY killed $r1
4352B	  %161:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
4368B	  %162:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
4384B	  %163:tgpr, $cpsr = tADDrr killed %159:tgpr, killed %162:tgpr, 14, $noreg
4400B	  %164:tgpr = COPY killed %160:tgpr
4416B	  %164:tgpr, dead $cpsr = tADC %164:tgpr(tied-def 0), killed %161:tgpr, 14, $noreg, implicit killed $cpsr
4432B	  %165:tgpr = COPY killed %154:tgpr
4448B	  %165:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), killed %164:tgpr, 14, $noreg
4464B	  %166:tgpr = COPY killed %153:tgpr
4480B	  %166:tgpr, dead $cpsr = tAND %166:tgpr(tied-def 0), killed %163:tgpr, 14, $noreg
4496B	  %167:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
4512B	  %168:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
4528B	  %169:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
4544B	  %170:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
4560B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4576B	  $r0 = COPY killed %167:tgpr
4592B	  $r1 = COPY killed %168:tgpr
4608B	  $r2 = COPY killed %169:tgpr
4624B	  $r3 = COPY killed %170:tgpr
4640B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4656B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4672B	  %171:tgpr = COPY killed $r0
4688B	  %172:tgpr = COPY killed $r1
4704B	  %173:tgpr = COPY killed %165:tgpr
4720B	  %173:tgpr, dead $cpsr = tAND %173:tgpr(tied-def 0), killed %172:tgpr, 14, $noreg
4736B	  %174:tgpr = COPY killed %166:tgpr
4752B	  %174:tgpr, dead $cpsr = tAND %174:tgpr(tied-def 0), killed %171:tgpr, 14, $noreg
4768B	  %175:tgpr = COPY killed %140:tgpr
4784B	  %175:tgpr, dead $cpsr = tORR %175:tgpr(tied-def 0), killed %173:tgpr, 14, $noreg
4800B	  %176:tgpr = COPY killed %139:tgpr
4816B	  %176:tgpr, dead $cpsr = tORR %176:tgpr(tied-def 0), killed %174:tgpr, 14, $noreg
4832B	  %177:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
4848B	  %178:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
4864B	  %179:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
4880B	  %180:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
4896B	  %181:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
4912B	  %182:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
4928B	  %183:tgpr, $cpsr = tSUBrr killed %180:tgpr, killed %182:tgpr, 14, $noreg
4944B	  %184:tgpr = COPY killed %179:tgpr
4960B	  %184:tgpr, dead $cpsr = tSBC %184:tgpr(tied-def 0), killed %181:tgpr, 14, $noreg, implicit killed $cpsr
4976B	  %185:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
4992B	  %186:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
5008B	  %187:tgpr, $cpsr = tSUBrr killed %183:tgpr, killed %186:tgpr, 14, $noreg
5024B	  %188:tgpr = COPY killed %184:tgpr
5040B	  %188:tgpr, dead $cpsr = tSBC %188:tgpr(tied-def 0), killed %185:tgpr, 14, $noreg, implicit killed $cpsr
5056B	  %189:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
5072B	  %190:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
5088B	  %191:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
5104B	  %192:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
5120B	  %193:tgpr, $cpsr = tADDrr killed %190:tgpr, killed %192:tgpr, 14, $noreg
5136B	  %194:tgpr = COPY killed %189:tgpr
5152B	  %194:tgpr, dead $cpsr = tADC %194:tgpr(tied-def 0), killed %191:tgpr, 14, $noreg, implicit killed $cpsr
5168B	  %195:tgpr = COPY killed %188:tgpr
5184B	  %195:tgpr, dead $cpsr = tAND %195:tgpr(tied-def 0), killed %194:tgpr, 14, $noreg
5200B	  %196:tgpr = COPY killed %187:tgpr
5216B	  %196:tgpr, dead $cpsr = tAND %196:tgpr(tied-def 0), killed %193:tgpr, 14, $noreg
5232B	  %197:tgpr = COPY killed %178:tgpr
5248B	  %197:tgpr, dead $cpsr = tEOR %197:tgpr(tied-def 0), killed %196:tgpr, 14, $noreg
5264B	  %198:tgpr = COPY killed %177:tgpr
5280B	  %198:tgpr, dead $cpsr = tEOR %198:tgpr(tied-def 0), killed %195:tgpr, 14, $noreg
5296B	  %199:tgpr = COPY killed %175:tgpr
5312B	  %199:tgpr, dead $cpsr = tORR %199:tgpr(tied-def 0), killed %198:tgpr, 14, $noreg
5328B	  %200:tgpr = COPY killed %176:tgpr
5344B	  %200:tgpr, dead $cpsr = tORR %200:tgpr(tied-def 0), killed %197:tgpr, 14, $noreg
5360B	  %201:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
5376B	  %202:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
5392B	  %203:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
5408B	  %204:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
5424B	  %205:tgpr, dead $cpsr = tMVN killed %204:tgpr, 14, $noreg
5440B	  %206:tgpr, dead $cpsr = tMVN killed %203:tgpr, 14, $noreg
5456B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5472B	  $r0 = COPY killed %201:tgpr
5488B	  $r1 = COPY killed %202:tgpr
5504B	  $r2 = COPY killed %205:tgpr
5520B	  $r3 = COPY killed %206:tgpr
5536B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
5552B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5568B	  %207:tgpr = COPY killed $r0
5584B	  %208:tgpr = COPY killed $r1
5600B	  %209:tgpr = COPY killed %199:tgpr
5616B	  %209:tgpr, dead $cpsr = tORR %209:tgpr(tied-def 0), killed %208:tgpr, 14, $noreg
5632B	  %210:tgpr = COPY killed %200:tgpr
5648B	  %210:tgpr, dead $cpsr = tORR %210:tgpr(tied-def 0), killed %207:tgpr, 14, $noreg
5664B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5680B	  $r0 = COPY killed %126:tgpr
5696B	  $r2 = COPY killed %210:tgpr
5712B	  $r3 = COPY killed %209:tgpr
5728B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit undef $r1, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
5744B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5760B	  %212:tgpr = COPY killed $r0
5776B	  tSTRspi killed %212:tgpr, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
5792B	  %213:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
5808B	  %214:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
5824B	  %215:tgpr, $cpsr = tADDi3 killed %214:tgpr, 1, 14, $noreg
5840B	  %216:tgpr = COPY killed %213:tgpr
5856B	  %216:tgpr, dead $cpsr = tADC %216:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
5872B	  tSTRspi %215:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
5888B	  tSTRspi %216:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
5904B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5920B	  %217:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
5936B	  $r0 = COPY %217:tgpr
5952B	  $r2 = COPY killed %215:tgpr
5968B	  $r3 = COPY killed %216:tgpr
5984B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6000B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6016B	  dead %218:tgpr = COPY killed $r0
6032B	  %219:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
6048B	  %220:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
6064B	  %221:tgpr, $cpsr = tADDi3 killed %220:tgpr, 1, 14, $noreg
6080B	  %222:tgpr = COPY killed %219:tgpr
6096B	  %222:tgpr, dead $cpsr = tADC %222:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6112B	  tSTRspi %221:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
6128B	  tSTRspi %222:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
6144B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6160B	  $r0 = COPY %217:tgpr
6176B	  $r2 = COPY killed %221:tgpr
6192B	  $r3 = COPY killed %222:tgpr
6208B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6224B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6240B	  dead %223:tgpr = COPY killed $r0
6256B	  %224:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
6272B	  %225:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
6288B	  %226:tgpr, $cpsr = tADDi3 killed %225:tgpr, 1, 14, $noreg
6304B	  %227:tgpr = COPY killed %224:tgpr
6320B	  %227:tgpr, dead $cpsr = tADC %227:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6336B	  tSTRspi %226:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
6352B	  tSTRspi %227:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
6368B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6384B	  $r0 = COPY %217:tgpr
6400B	  $r2 = COPY killed %226:tgpr
6416B	  $r3 = COPY killed %227:tgpr
6432B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6464B	  dead %228:tgpr = COPY killed $r0
6480B	  %229:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
6496B	  %230:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
6512B	  %231:tgpr, $cpsr = tADDi3 killed %230:tgpr, 1, 14, $noreg
6528B	  %232:tgpr = COPY killed %229:tgpr
6544B	  %232:tgpr, dead $cpsr = tADC %232:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6560B	  tSTRspi %231:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
6576B	  tSTRspi %232:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
6592B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6608B	  $r0 = COPY %217:tgpr
6624B	  $r2 = COPY killed %231:tgpr
6640B	  $r3 = COPY killed %232:tgpr
6656B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6672B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6688B	  dead %233:tgpr = COPY killed $r0
6704B	  %234:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
6720B	  %235:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
6736B	  %236:tgpr, $cpsr = tADDi3 killed %235:tgpr, 1, 14, $noreg
6752B	  %237:tgpr = COPY killed %234:tgpr
6768B	  %237:tgpr, dead $cpsr = tADC %237:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6784B	  tSTRspi %236:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
6800B	  tSTRspi %237:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
6816B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6832B	  $r0 = COPY %217:tgpr
6848B	  $r2 = COPY killed %236:tgpr
6864B	  $r3 = COPY killed %237:tgpr
6880B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6896B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6912B	  dead %238:tgpr = COPY killed $r0
6928B	  %239:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
6944B	  %240:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
6960B	  %241:tgpr, $cpsr = tADDi3 killed %240:tgpr, 1, 14, $noreg
6976B	  %242:tgpr = COPY killed %239:tgpr
6992B	  %242:tgpr, dead $cpsr = tADC %242:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7008B	  tSTRspi %241:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
7024B	  tSTRspi %242:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
7040B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7056B	  $r0 = COPY %217:tgpr
7072B	  $r2 = COPY killed %241:tgpr
7088B	  $r3 = COPY killed %242:tgpr
7104B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7120B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7136B	  dead %243:tgpr = COPY killed $r0
7152B	  %244:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
7168B	  %245:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
7184B	  %246:tgpr, $cpsr = tADDi3 killed %245:tgpr, 1, 14, $noreg
7200B	  %247:tgpr = COPY killed %244:tgpr
7216B	  %247:tgpr, dead $cpsr = tADC %247:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7232B	  tSTRspi %246:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
7248B	  tSTRspi %247:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
7264B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7280B	  $r0 = COPY %217:tgpr
7296B	  $r2 = COPY killed %246:tgpr
7312B	  $r3 = COPY killed %247:tgpr
7328B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7344B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7360B	  dead %248:tgpr = COPY killed $r0
7376B	  %249:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
7392B	  %250:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
7408B	  %251:tgpr, $cpsr = tADDi3 killed %250:tgpr, 1, 14, $noreg
7424B	  %252:tgpr = COPY killed %249:tgpr
7440B	  %252:tgpr, dead $cpsr = tADC %252:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7456B	  tSTRspi %251:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
7472B	  tSTRspi %252:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
7488B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7504B	  $r0 = COPY %217:tgpr
7520B	  $r2 = COPY killed %251:tgpr
7536B	  $r3 = COPY killed %252:tgpr
7552B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7568B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7584B	  dead %253:tgpr = COPY killed $r0
7600B	  %254:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
7616B	  %255:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
7632B	  %256:tgpr, $cpsr = tADDi3 killed %255:tgpr, 1, 14, $noreg
7648B	  %257:tgpr = COPY killed %254:tgpr
7664B	  %257:tgpr, dead $cpsr = tADC %257:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7680B	  tSTRspi %256:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
7696B	  tSTRspi %257:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
7712B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7728B	  $r0 = COPY %217:tgpr
7744B	  $r2 = COPY killed %256:tgpr
7760B	  $r3 = COPY killed %257:tgpr
7776B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7792B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7808B	  dead %258:tgpr = COPY killed $r0
7824B	  %259:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
7840B	  %260:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
7856B	  %261:tgpr, $cpsr = tADDi3 killed %260:tgpr, 1, 14, $noreg
7872B	  %262:tgpr = COPY killed %259:tgpr
7888B	  %262:tgpr, dead $cpsr = tADC %262:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7904B	  tSTRspi %261:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
7920B	  tSTRspi %262:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
7936B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7952B	  $r0 = COPY %217:tgpr
7968B	  $r2 = COPY killed %261:tgpr
7984B	  $r3 = COPY killed %262:tgpr
8000B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8016B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8032B	  dead %263:tgpr = COPY killed $r0
8048B	  %264:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
8064B	  %265:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
8080B	  %266:tgpr, $cpsr = tADDi3 killed %265:tgpr, 1, 14, $noreg
8096B	  %267:tgpr = COPY killed %264:tgpr
8112B	  %267:tgpr, dead $cpsr = tADC %267:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8128B	  tSTRspi %266:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
8144B	  tSTRspi %267:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
8160B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8176B	  $r0 = COPY %217:tgpr
8192B	  $r2 = COPY killed %266:tgpr
8208B	  $r3 = COPY killed %267:tgpr
8224B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8240B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8256B	  dead %268:tgpr = COPY killed $r0
8272B	  %269:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
8288B	  %270:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
8304B	  %271:tgpr, $cpsr = tADDi3 killed %270:tgpr, 1, 14, $noreg
8320B	  %272:tgpr = COPY killed %269:tgpr
8336B	  %272:tgpr, dead $cpsr = tADC %272:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8352B	  tSTRspi %271:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
8368B	  tSTRspi %272:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
8384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8400B	  $r0 = COPY %217:tgpr
8416B	  $r2 = COPY killed %271:tgpr
8432B	  $r3 = COPY killed %272:tgpr
8448B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8464B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8480B	  dead %273:tgpr = COPY killed $r0
8496B	  %274:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
8512B	  %275:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
8528B	  %276:tgpr, $cpsr = tADDi3 killed %275:tgpr, 1, 14, $noreg
8544B	  %277:tgpr = COPY killed %274:tgpr
8560B	  %277:tgpr, dead $cpsr = tADC %277:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8576B	  tSTRspi %276:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
8592B	  tSTRspi %277:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
8608B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8624B	  $r0 = COPY %217:tgpr
8640B	  $r2 = COPY killed %276:tgpr
8656B	  $r3 = COPY killed %277:tgpr
8672B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8688B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8704B	  dead %278:tgpr = COPY killed $r0
8720B	  %279:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
8736B	  %280:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
8752B	  %281:tgpr, $cpsr = tADDi3 killed %280:tgpr, 1, 14, $noreg
8768B	  %282:tgpr = COPY killed %279:tgpr
8784B	  %282:tgpr, dead $cpsr = tADC %282:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8800B	  tSTRspi %281:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
8816B	  tSTRspi %282:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
8832B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8848B	  $r0 = COPY %217:tgpr
8864B	  $r2 = COPY killed %281:tgpr
8880B	  $r3 = COPY killed %282:tgpr
8896B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8912B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8928B	  dead %283:tgpr = COPY killed $r0
8944B	  %284:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
8960B	  %285:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
8976B	  %286:tgpr, $cpsr = tADDi3 killed %285:tgpr, 1, 14, $noreg
8992B	  %287:tgpr = COPY killed %284:tgpr
9008B	  %287:tgpr, dead $cpsr = tADC %287:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9024B	  tSTRspi %286:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
9040B	  tSTRspi %287:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
9056B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9072B	  $r0 = COPY %217:tgpr
9088B	  $r2 = COPY killed %286:tgpr
9104B	  $r3 = COPY killed %287:tgpr
9120B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9136B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9152B	  dead %288:tgpr = COPY killed $r0
9168B	  %289:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
9184B	  %290:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
9200B	  %291:tgpr, $cpsr = tADDi3 killed %290:tgpr, 1, 14, $noreg
9216B	  %292:tgpr = COPY killed %289:tgpr
9232B	  %292:tgpr, dead $cpsr = tADC %292:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9248B	  tSTRspi %291:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
9264B	  tSTRspi %292:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
9280B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9296B	  $r0 = COPY %217:tgpr
9312B	  $r2 = COPY killed %291:tgpr
9328B	  $r3 = COPY killed %292:tgpr
9344B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9360B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9376B	  dead %293:tgpr = COPY killed $r0
9392B	  %294:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
9408B	  %295:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
9424B	  %296:tgpr, $cpsr = tADDi3 killed %295:tgpr, 1, 14, $noreg
9440B	  %297:tgpr = COPY killed %294:tgpr
9456B	  %297:tgpr, dead $cpsr = tADC %297:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9472B	  tSTRspi %296:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
9488B	  tSTRspi %297:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
9504B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9520B	  $r0 = COPY %217:tgpr
9536B	  $r2 = COPY killed %296:tgpr
9552B	  $r3 = COPY killed %297:tgpr
9568B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9584B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9600B	  dead %298:tgpr = COPY killed $r0
9616B	  %299:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
9632B	  %300:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
9648B	  %301:tgpr, $cpsr = tADDi3 killed %300:tgpr, 1, 14, $noreg
9664B	  %302:tgpr = COPY killed %299:tgpr
9680B	  %302:tgpr, dead $cpsr = tADC %302:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9696B	  tSTRspi %301:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
9712B	  tSTRspi %302:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
9728B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9744B	  $r0 = COPY %217:tgpr
9760B	  $r2 = COPY killed %301:tgpr
9776B	  $r3 = COPY killed %302:tgpr
9792B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9808B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9824B	  dead %303:tgpr = COPY killed $r0
9840B	  %304:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
9856B	  %305:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
9872B	  %306:tgpr, $cpsr = tADDi3 killed %305:tgpr, 1, 14, $noreg
9888B	  %307:tgpr = COPY killed %304:tgpr
9904B	  %307:tgpr, dead $cpsr = tADC %307:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9920B	  tSTRspi %306:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
9936B	  tSTRspi %307:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
9952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9968B	  $r0 = COPY %217:tgpr
9984B	  $r2 = COPY killed %306:tgpr
10000B	  $r3 = COPY killed %307:tgpr
10016B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10032B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10048B	  dead %308:tgpr = COPY killed $r0
10064B	  %309:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
10080B	  %310:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
10096B	  %311:tgpr, $cpsr = tADDi3 killed %310:tgpr, 1, 14, $noreg
10112B	  %312:tgpr = COPY killed %309:tgpr
10128B	  %312:tgpr, dead $cpsr = tADC %312:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
10144B	  tSTRspi %311:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
10160B	  tSTRspi %312:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
10176B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10192B	  $r0 = COPY %217:tgpr
10208B	  $r2 = COPY killed %311:tgpr
10224B	  $r3 = COPY killed %312:tgpr
10240B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10256B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10272B	  dead %313:tgpr = COPY killed $r0
10288B	  %314:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
10304B	  %315:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
10320B	  %316:tgpr, $cpsr = tADDi3 killed %315:tgpr, 1, 14, $noreg
10336B	  %317:tgpr = COPY killed %314:tgpr
10352B	  %317:tgpr, dead $cpsr = tADC %317:tgpr(tied-def 0), killed %5:tgpr, 14, $noreg, implicit killed $cpsr
10368B	  tSTRspi %316:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
10384B	  tSTRspi %317:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
10400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10416B	  $r0 = COPY killed %217:tgpr
10432B	  $r2 = COPY killed %316:tgpr
10448B	  $r3 = COPY killed %317:tgpr
10464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10496B	  dead %318:tgpr = COPY killed $r0
10512B	  %319:tgpr = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
10528B	  $r0 = COPY killed %319:tgpr
10544B	  tBX_RET 14, $noreg, implicit killed $r0

# End machine code for function moreThan20Variables.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R0#0 R1#0 R2#0
Created 3 new intervals.
********** INTERVALS **********
R0 [0B,48r:0)[3792r,3856r:55)[3856r,3888r:54)[3968r,4032r:53)[4032r,4064r:52)[4224r,4288r:51)[4288r,4320r:50)[4576r,4640r:49)[4640r,4672r:48)[5472r,5536r:47)[5536r,5568r:46)[5680r,5728r:45)[5728r,5760r:44)[5936r,5984r:43)[5984r,6016r:42)[6160r,6208r:41)[6208r,6240r:40)[6384r,6432r:39)[6432r,6464r:38)[6608r,6656r:37)[6656r,6688r:36)[6832r,6880r:35)[6880r,6912r:34)[7056r,7104r:33)[7104r,7136r:32)[7280r,7328r:31)[7328r,7360r:30)[7504r,7552r:29)[7552r,7584r:28)[7728r,7776r:27)[7776r,7808r:26)[7952r,8000r:25)[8000r,8032r:24)[8176r,8224r:23)[8224r,8256r:22)[8400r,8448r:21)[8448r,8480r:20)[8624r,8672r:19)[8672r,8704r:18)[8848r,8896r:17)[8896r,8928r:16)[9072r,9120r:15)[9120r,9152r:14)[9296r,9344r:13)[9344r,9376r:12)[9520r,9568r:11)[9568r,9600r:10)[9744r,9792r:9)[9792r,9824r:8)[9968r,10016r:7)[10016r,10048r:6)[10192r,10240r:5)[10240r,10272r:4)[10416r,10464r:3)[10464r,10496r:2)[10528r,10544r:1) 0@0B-phi 1@10528r 2@10464r 3@10416r 4@10240r 5@10192r 6@10016r 7@9968r 8@9792r 9@9744r 10@9568r 11@9520r 12@9344r 13@9296r 14@9120r 15@9072r 16@8896r 17@8848r 18@8672r 19@8624r 20@8448r 21@8400r 22@8224r 23@8176r 24@8000r 25@7952r 26@7776r 27@7728r 28@7552r 29@7504r 30@7328r 31@7280r 32@7104r 33@7056r 34@6880r 35@6832r 36@6656r 37@6608r 38@6432r 39@6384r 40@6208r 41@6160r 42@5984r 43@5936r 44@5728r 45@5680r 46@5536r 47@5472r 48@4640r 49@4576r 50@4288r 51@4224r 52@4032r 53@3968r 54@3856r 55@3792r
R1 [0B,32r:0)[3808r,3856r:10)[3856r,3904r:9)[3984r,4032r:8)[4032r,4080r:7)[4240r,4288r:6)[4288r,4336r:5)[4592r,4640r:4)[4640r,4688r:3)[5488r,5536r:2)[5536r,5584r:1) 0@0B-phi 1@5536r 2@5488r 3@4640r 4@4592r 5@4288r 6@4240r 7@4032r 8@3984r 9@3856r 10@3808r
R2 [0B,16r:0)[3824r,3856r:27)[4000r,4032r:26)[4256r,4288r:25)[4608r,4640r:24)[5504r,5536r:23)[5696r,5728r:22)[5952r,5984r:21)[6176r,6208r:20)[6400r,6432r:19)[6624r,6656r:18)[6848r,6880r:17)[7072r,7104r:16)[7296r,7328r:15)[7520r,7552r:14)[7744r,7776r:13)[7968r,8000r:12)[8192r,8224r:11)[8416r,8448r:10)[8640r,8672r:9)[8864r,8896r:8)[9088r,9120r:7)[9312r,9344r:6)[9536r,9568r:5)[9760r,9792r:4)[9984r,10016r:3)[10208r,10240r:2)[10432r,10464r:1) 0@0B-phi 1@10432r 2@10208r 3@9984r 4@9760r 5@9536r 6@9312r 7@9088r 8@8864r 9@8640r 10@8416r 11@8192r 12@7968r 13@7744r 14@7520r 15@7296r 16@7072r 17@6848r 18@6624r 19@6400r 20@6176r 21@5952r 22@5696r 23@5504r 24@4608r 25@4256r 26@4000r 27@3824r
%0 [48r,64r:0) 0@48r  weight:0.000000e+00
%1 [32r,80r:0) 0@32r  weight:0.000000e+00
%2 [16r,96r:0) 0@16r  weight:0.000000e+00
%3 [112r,160r:0) 0@112r  weight:0.000000e+00
%4 [128r,192r:0) 0@128r  weight:0.000000e+00
%5 [144r,10352r:0) 0@144r  weight:0.000000e+00
%6 [160r,208r:0) 0@160r  weight:0.000000e+00
%7 [176r,192r:0)[192r,224r:1) 0@176r 1@192r  weight:0.000000e+00
%8 [240r,256r:0) 0@240r  weight:0.000000e+00
%9 [256r,288r:0) 0@256r  weight:0.000000e+00
%10 [272r,320r:0) 0@272r  weight:0.000000e+00
%11 [288r,336r:0) 0@288r  weight:0.000000e+00
%12 [304r,320r:0)[320r,352r:1) 0@304r 1@320r  weight:0.000000e+00
%13 [368r,416r:0) 0@368r  weight:0.000000e+00
%14 [384r,400r:0) 0@384r  weight:0.000000e+00
%15 [400r,416r:0)[416r,448r:1) 0@400r 1@416r  weight:0.000000e+00
%16 [432r,480r:0) 0@432r  weight:0.000000e+00
%17 [448r,496r:0) 0@448r  weight:0.000000e+00
%18 [464r,480r:0)[480r,512r:1) 0@464r 1@480r  weight:0.000000e+00
%19 [528r,544r:0) 0@528r  weight:0.000000e+00
%20 [544r,576r:0) 0@544r  weight:0.000000e+00
%21 [560r,608r:0) 0@560r  weight:0.000000e+00
%22 [576r,624r:0) 0@576r  weight:0.000000e+00
%23 [592r,608r:0)[608r,640r:1) 0@592r 1@608r  weight:0.000000e+00
%24 [656r,704r:0) 0@656r  weight:0.000000e+00
%25 [672r,688r:0) 0@672r  weight:0.000000e+00
%26 [688r,704r:0)[704r,736r:1) 0@688r 1@704r  weight:0.000000e+00
%27 [720r,768r:0) 0@720r  weight:0.000000e+00
%28 [736r,784r:0) 0@736r  weight:0.000000e+00
%29 [752r,768r:0)[768r,800r:1) 0@752r 1@768r  weight:0.000000e+00
%30 [816r,864r:0) 0@816r  weight:0.000000e+00
%31 [832r,848r:0) 0@832r  weight:0.000000e+00
%32 [848r,864r:0)[864r,896r:1) 0@848r 1@864r  weight:0.000000e+00
%33 [880r,928r:0) 0@880r  weight:0.000000e+00
%34 [896r,944r:0) 0@896r  weight:0.000000e+00
%35 [912r,928r:0)[928r,960r:1) 0@912r 1@928r  weight:0.000000e+00
%36 [976r,1024r:0) 0@976r  weight:0.000000e+00
%37 [992r,1008r:0) 0@992r  weight:0.000000e+00
%38 [1008r,1024r:0)[1024r,1056r:1) 0@1008r 1@1024r  weight:0.000000e+00
%39 [1040r,1088r:0) 0@1040r  weight:0.000000e+00
%40 [1056r,1104r:0) 0@1056r  weight:0.000000e+00
%41 [1072r,1088r:0)[1088r,1120r:1) 0@1072r 1@1088r  weight:0.000000e+00
%42 [1136r,1152r:0) 0@1136r  weight:0.000000e+00
%43 [1152r,1184r:0) 0@1152r  weight:0.000000e+00
%44 [1168r,1216r:0) 0@1168r  weight:0.000000e+00
%45 [1184r,1232r:0) 0@1184r  weight:0.000000e+00
%46 [1200r,1216r:0)[1216r,1248r:1) 0@1200r 1@1216r  weight:0.000000e+00
%47 [1264r,1312r:0) 0@1264r  weight:0.000000e+00
%48 [1280r,1296r:0) 0@1280r  weight:0.000000e+00
%49 [1296r,1312r:0)[1312r,1344r:1) 0@1296r 1@1312r  weight:0.000000e+00
%50 [1328r,1376r:0) 0@1328r  weight:0.000000e+00
%51 [1344r,1392r:0) 0@1344r  weight:0.000000e+00
%52 [1360r,1376r:0)[1376r,1408r:1) 0@1360r 1@1376r  weight:0.000000e+00
%53 [1424r,1472r:0) 0@1424r  weight:0.000000e+00
%54 [1440r,1456r:0) 0@1440r  weight:0.000000e+00
%55 [1456r,1472r:0)[1472r,1504r:1) 0@1456r 1@1472r  weight:0.000000e+00
%56 [1488r,1536r:0) 0@1488r  weight:0.000000e+00
%57 [1504r,1552r:0) 0@1504r  weight:0.000000e+00
%58 [1520r,1536r:0)[1536r,1568r:1) 0@1520r 1@1536r  weight:0.000000e+00
%59 [1584r,1632r:0) 0@1584r  weight:0.000000e+00
%60 [1600r,1616r:0) 0@1600r  weight:0.000000e+00
%61 [1616r,1632r:0)[1632r,1664r:1) 0@1616r 1@1632r  weight:0.000000e+00
%62 [1648r,1696r:0) 0@1648r  weight:0.000000e+00
%63 [1664r,1712r:0) 0@1664r  weight:0.000000e+00
%64 [1680r,1696r:0)[1696r,1728r:1) 0@1680r 1@1696r  weight:0.000000e+00
%65 [1744r,1792r:0) 0@1744r  weight:0.000000e+00
%66 [1760r,1776r:0) 0@1760r  weight:0.000000e+00
%67 [1776r,1792r:0)[1792r,1824r:1) 0@1776r 1@1792r  weight:0.000000e+00
%68 [1808r,1856r:0) 0@1808r  weight:0.000000e+00
%69 [1824r,1872r:0) 0@1824r  weight:0.000000e+00
%70 [1840r,1856r:0)[1856r,1888r:1) 0@1840r 1@1856r  weight:0.000000e+00
%71 [1904r,1952r:0) 0@1904r  weight:0.000000e+00
%72 [1920r,1936r:0) 0@1920r  weight:0.000000e+00
%73 [1936r,1952r:0)[1952r,1984r:1) 0@1936r 1@1952r  weight:0.000000e+00
%74 [1968r,2016r:0) 0@1968r  weight:0.000000e+00
%75 [1984r,2032r:0) 0@1984r  weight:0.000000e+00
%76 [2000r,2016r:0)[2016r,2048r:1) 0@2000r 1@2016r  weight:0.000000e+00
%77 [2064r,2112r:0) 0@2064r  weight:0.000000e+00
%78 [2080r,2096r:0) 0@2080r  weight:0.000000e+00
%79 [2096r,2112r:0)[2112r,2144r:1) 0@2096r 1@2112r  weight:0.000000e+00
%80 [2128r,2176r:0) 0@2128r  weight:0.000000e+00
%81 [2144r,2192r:0) 0@2144r  weight:0.000000e+00
%82 [2160r,2176r:0)[2176r,2208r:1) 0@2160r 1@2176r  weight:0.000000e+00
%83 [2224r,2272r:0) 0@2224r  weight:0.000000e+00
%84 [2240r,2256r:0) 0@2240r  weight:0.000000e+00
%85 [2256r,2272r:0)[2272r,2304r:1) 0@2256r 1@2272r  weight:0.000000e+00
%86 [2288r,2336r:0) 0@2288r  weight:0.000000e+00
%87 [2304r,2352r:0) 0@2304r  weight:0.000000e+00
%88 [2320r,2336r:0)[2336r,2368r:1) 0@2320r 1@2336r  weight:0.000000e+00
%89 [2384r,2400r:0) 0@2384r  weight:0.000000e+00
%90 [2400r,2432r:0) 0@2400r  weight:0.000000e+00
%91 [2416r,2464r:0) 0@2416r  weight:0.000000e+00
%92 [2432r,2480r:0) 0@2432r  weight:0.000000e+00
%93 [2448r,2464r:0)[2464r,2496r:1) 0@2448r 1@2464r  weight:0.000000e+00
%94 [2512r,2560r:0) 0@2512r  weight:0.000000e+00
%95 [2528r,2544r:0) 0@2528r  weight:0.000000e+00
%96 [2544r,2560r:0)[2560r,2592r:1) 0@2544r 1@2560r  weight:0.000000e+00
%97 [2576r,2624r:0) 0@2576r  weight:0.000000e+00
%98 [2592r,2640r:0) 0@2592r  weight:0.000000e+00
%99 [2608r,2624r:0)[2624r,2656r:1) 0@2608r 1@2624r  weight:0.000000e+00
%100 [2672r,2720r:0) 0@2672r  weight:0.000000e+00
%101 [2688r,2704r:0) 0@2688r  weight:0.000000e+00
%102 [2704r,2720r:0)[2720r,2752r:1) 0@2704r 1@2720r  weight:0.000000e+00
%103 [2736r,2784r:0) 0@2736r  weight:0.000000e+00
%104 [2752r,2800r:0) 0@2752r  weight:0.000000e+00
%105 [2768r,2784r:0)[2784r,2816r:1) 0@2768r 1@2784r  weight:0.000000e+00
%106 [2832r,2880r:0) 0@2832r  weight:0.000000e+00
%107 [2848r,2864r:0) 0@2848r  weight:0.000000e+00
%108 [2864r,2880r:0)[2880r,2912r:1) 0@2864r 1@2880r  weight:0.000000e+00
%109 [2896r,2944r:0) 0@2896r  weight:0.000000e+00
%110 [2912r,2960r:0) 0@2912r  weight:0.000000e+00
%111 [2928r,2944r:0)[2944r,2976r:1) 0@2928r 1@2944r  weight:0.000000e+00
%112 [2992r,3040r:0) 0@2992r  weight:0.000000e+00
%113 [3008r,3024r:0) 0@3008r  weight:0.000000e+00
%114 [3024r,3040r:0)[3040r,3072r:1) 0@3024r 1@3040r  weight:0.000000e+00
%115 [3056r,3104r:0) 0@3056r  weight:0.000000e+00
%116 [3072r,3120r:0) 0@3072r  weight:0.000000e+00
%117 [3088r,3104r:0)[3104r,3136r:1) 0@3088r 1@3104r  weight:0.000000e+00
%118 [3152r,3200r:0) 0@3152r  weight:0.000000e+00
%119 [3168r,3184r:0) 0@3168r  weight:0.000000e+00
%120 [3184r,3200r:0)[3200r,3232r:1) 0@3184r 1@3200r  weight:0.000000e+00
%121 [3216r,3264r:0) 0@3216r  weight:0.000000e+00
%122 [3232r,3280r:0) 0@3232r  weight:0.000000e+00
%123 [3248r,3264r:0)[3264r,3296r:1) 0@3248r 1@3264r  weight:0.000000e+00
%124 [3312r,3344r:0) 0@3312r  weight:0.000000e+00
%125 [3328r,3344r:0) 0@3328r  weight:0.000000e+00
%126 [3344r,5680r:0) 0@3344r  weight:0.000000e+00
%127 [3360r,3456r:0) 0@3360r  weight:0.000000e+00
%128 [3376r,3424r:0) 0@3376r  weight:0.000000e+00
%129 [3392r,3472r:0) 0@3392r  weight:0.000000e+00
%130 [3408r,3440r:0) 0@3408r  weight:0.000000e+00
%131 [3424r,3440r:0)[3440r,3552r:1) 0@3424r 1@3440r  weight:0.000000e+00
%132 [3456r,3472r:0)[3472r,3520r:1) 0@3456r 1@3472r  weight:0.000000e+00
%133 [3488r,3568r:0) 0@3488r  weight:0.000000e+00
%134 [3504r,3536r:0) 0@3504r  weight:0.000000e+00
%135 [3520r,3536r:0)[3536r,3648r:1) 0@3520r 1@3536r  weight:0.000000e+00
%136 [3552r,3568r:0)[3568r,3616r:1) 0@3552r 1@3568r  weight:0.000000e+00
%137 [3584r,3664r:0) 0@3584r  weight:0.000000e+00
%138 [3600r,3632r:0) 0@3600r  weight:0.000000e+00
%139 [3616r,3632r:0)[3632r,4800r:1) 0@3616r 1@3632r  weight:0.000000e+00
%140 [3648r,3664r:0)[3664r,4768r:1) 0@3648r 1@3664r  weight:0.000000e+00
%141 [3680r,4112r:0) 0@3680r  weight:0.000000e+00
%142 [3696r,4096r:0) 0@3696r  weight:0.000000e+00
%143 [3712r,3792r:0) 0@3712r  weight:0.000000e+00
%144 [3728r,3808r:0) 0@3728r  weight:0.000000e+00
%145 [3744r,3824r:0) 0@3744r  weight:0.000000e+00
%146 [3760r,3840r:0) 0@3760r  weight:0.000000e+00
%147 [3888r,3968r:0) 0@3888r  weight:0.000000e+00
%148 [3904r,3984r:0) 0@3904r  weight:0.000000e+00
%149 [3920r,4000r:0) 0@3920r  weight:0.000000e+00
%150 [3936r,4016r:0) 0@3936r  weight:0.000000e+00
%151 [4064r,4096r:0) 0@4064r  weight:0.000000e+00
%152 [4080r,4128r:0) 0@4080r  weight:0.000000e+00
%153 [4096r,4464r:0) 0@4096r  weight:0.000000e+00
%154 [4112r,4128r:0)[4128r,4432r:1) 0@4112r 1@4128r  weight:0.000000e+00
%155 [4144r,4224r:0) 0@4144r  weight:0.000000e+00
%156 [4160r,4240r:0) 0@4160r  weight:0.000000e+00
%157 [4176r,4256r:0) 0@4176r  weight:0.000000e+00
%158 [4192r,4272r:0) 0@4192r  weight:0.000000e+00
%159 [4320r,4384r:0) 0@4320r  weight:0.000000e+00
%160 [4336r,4400r:0) 0@4336r  weight:0.000000e+00
%161 [4352r,4416r:0) 0@4352r  weight:0.000000e+00
%162 [4368r,4384r:0) 0@4368r  weight:0.000000e+00
%163 [4384r,4480r:0) 0@4384r  weight:0.000000e+00
%164 [4400r,4416r:0)[4416r,4448r:1) 0@4400r 1@4416r  weight:0.000000e+00
%165 [4432r,4448r:0)[4448r,4704r:1) 0@4432r 1@4448r  weight:0.000000e+00
%166 [4464r,4480r:0)[4480r,4736r:1) 0@4464r 1@4480r  weight:0.000000e+00
%167 [4496r,4576r:0) 0@4496r  weight:0.000000e+00
%168 [4512r,4592r:0) 0@4512r  weight:0.000000e+00
%169 [4528r,4608r:0) 0@4528r  weight:0.000000e+00
%170 [4544r,4624r:0) 0@4544r  weight:0.000000e+00
%171 [4672r,4752r:0) 0@4672r  weight:0.000000e+00
%172 [4688r,4720r:0) 0@4688r  weight:0.000000e+00
%173 [4704r,4720r:0)[4720r,4784r:1) 0@4704r 1@4720r  weight:0.000000e+00
%174 [4736r,4752r:0)[4752r,4816r:1) 0@4736r 1@4752r  weight:0.000000e+00
%175 [4768r,4784r:0)[4784r,5296r:1) 0@4768r 1@4784r  weight:0.000000e+00
%176 [4800r,4816r:0)[4816r,5328r:1) 0@4800r 1@4816r  weight:0.000000e+00
%177 [4832r,5264r:0) 0@4832r  weight:0.000000e+00
%178 [4848r,5232r:0) 0@4848r  weight:0.000000e+00
%179 [4864r,4944r:0) 0@4864r  weight:0.000000e+00
%180 [4880r,4928r:0) 0@4880r  weight:0.000000e+00
%181 [4896r,4960r:0) 0@4896r  weight:0.000000e+00
%182 [4912r,4928r:0) 0@4912r  weight:0.000000e+00
%183 [4928r,5008r:0) 0@4928r  weight:0.000000e+00
%184 [4944r,4960r:0)[4960r,5024r:1) 0@4944r 1@4960r  weight:0.000000e+00
%185 [4976r,5040r:0) 0@4976r  weight:0.000000e+00
%186 [4992r,5008r:0) 0@4992r  weight:0.000000e+00
%187 [5008r,5200r:0) 0@5008r  weight:0.000000e+00
%188 [5024r,5040r:0)[5040r,5168r:1) 0@5024r 1@5040r  weight:0.000000e+00
%189 [5056r,5136r:0) 0@5056r  weight:0.000000e+00
%190 [5072r,5120r:0) 0@5072r  weight:0.000000e+00
%191 [5088r,5152r:0) 0@5088r  weight:0.000000e+00
%192 [5104r,5120r:0) 0@5104r  weight:0.000000e+00
%193 [5120r,5216r:0) 0@5120r  weight:0.000000e+00
%194 [5136r,5152r:0)[5152r,5184r:1) 0@5136r 1@5152r  weight:0.000000e+00
%195 [5168r,5184r:0)[5184r,5280r:1) 0@5168r 1@5184r  weight:0.000000e+00
%196 [5200r,5216r:0)[5216r,5248r:1) 0@5200r 1@5216r  weight:0.000000e+00
%197 [5232r,5248r:0)[5248r,5344r:1) 0@5232r 1@5248r  weight:0.000000e+00
%198 [5264r,5280r:0)[5280r,5312r:1) 0@5264r 1@5280r  weight:0.000000e+00
%199 [5296r,5312r:0)[5312r,5600r:1) 0@5296r 1@5312r  weight:0.000000e+00
%200 [5328r,5344r:0)[5344r,5632r:1) 0@5328r 1@5344r  weight:0.000000e+00
%201 [5360r,5472r:0) 0@5360r  weight:0.000000e+00
%202 [5376r,5488r:0) 0@5376r  weight:0.000000e+00
%203 [5392r,5440r:0) 0@5392r  weight:0.000000e+00
%204 [5408r,5424r:0) 0@5408r  weight:0.000000e+00
%205 [5424r,5504r:0) 0@5424r  weight:0.000000e+00
%206 [5440r,5520r:0) 0@5440r  weight:0.000000e+00
%207 [5568r,5648r:0) 0@5568r  weight:0.000000e+00
%208 [5584r,5616r:0) 0@5584r  weight:0.000000e+00
%209 [5600r,5616r:0)[5616r,5712r:1) 0@5600r 1@5616r  weight:0.000000e+00
%210 [5632r,5648r:0)[5648r,5696r:1) 0@5632r 1@5648r  weight:0.000000e+00
%212 [5760r,5776r:0) 0@5760r  weight:0.000000e+00
%213 [5792r,5840r:0) 0@5792r  weight:0.000000e+00
%214 [5808r,5824r:0) 0@5808r  weight:0.000000e+00
%215 [5824r,5952r:0) 0@5824r  weight:0.000000e+00
%216 [5840r,5856r:0)[5856r,5968r:1) 0@5840r 1@5856r  weight:0.000000e+00
%217 [5920r,10416r:0) 0@5920r  weight:0.000000e+00
%218 [6016r,6016d:0) 0@6016r  weight:0.000000e+00
%219 [6032r,6080r:0) 0@6032r  weight:0.000000e+00
%220 [6048r,6064r:0) 0@6048r  weight:0.000000e+00
%221 [6064r,6176r:0) 0@6064r  weight:0.000000e+00
%222 [6080r,6096r:0)[6096r,6192r:1) 0@6080r 1@6096r  weight:0.000000e+00
%223 [6240r,6240d:0) 0@6240r  weight:0.000000e+00
%224 [6256r,6304r:0) 0@6256r  weight:0.000000e+00
%225 [6272r,6288r:0) 0@6272r  weight:0.000000e+00
%226 [6288r,6400r:0) 0@6288r  weight:0.000000e+00
%227 [6304r,6320r:0)[6320r,6416r:1) 0@6304r 1@6320r  weight:0.000000e+00
%228 [6464r,6464d:0) 0@6464r  weight:0.000000e+00
%229 [6480r,6528r:0) 0@6480r  weight:0.000000e+00
%230 [6496r,6512r:0) 0@6496r  weight:0.000000e+00
%231 [6512r,6624r:0) 0@6512r  weight:0.000000e+00
%232 [6528r,6544r:0)[6544r,6640r:1) 0@6528r 1@6544r  weight:0.000000e+00
%233 [6688r,6688d:0) 0@6688r  weight:0.000000e+00
%234 [6704r,6752r:0) 0@6704r  weight:0.000000e+00
%235 [6720r,6736r:0) 0@6720r  weight:0.000000e+00
%236 [6736r,6848r:0) 0@6736r  weight:0.000000e+00
%237 [6752r,6768r:0)[6768r,6864r:1) 0@6752r 1@6768r  weight:0.000000e+00
%238 [6912r,6912d:0) 0@6912r  weight:0.000000e+00
%239 [6928r,6976r:0) 0@6928r  weight:0.000000e+00
%240 [6944r,6960r:0) 0@6944r  weight:0.000000e+00
%241 [6960r,7072r:0) 0@6960r  weight:0.000000e+00
%242 [6976r,6992r:0)[6992r,7088r:1) 0@6976r 1@6992r  weight:0.000000e+00
%243 [7136r,7136d:0) 0@7136r  weight:0.000000e+00
%244 [7152r,7200r:0) 0@7152r  weight:0.000000e+00
%245 [7168r,7184r:0) 0@7168r  weight:0.000000e+00
%246 [7184r,7296r:0) 0@7184r  weight:0.000000e+00
%247 [7200r,7216r:0)[7216r,7312r:1) 0@7200r 1@7216r  weight:0.000000e+00
%248 [7360r,7360d:0) 0@7360r  weight:0.000000e+00
%249 [7376r,7424r:0) 0@7376r  weight:0.000000e+00
%250 [7392r,7408r:0) 0@7392r  weight:0.000000e+00
%251 [7408r,7520r:0) 0@7408r  weight:0.000000e+00
%252 [7424r,7440r:0)[7440r,7536r:1) 0@7424r 1@7440r  weight:0.000000e+00
%253 [7584r,7584d:0) 0@7584r  weight:0.000000e+00
%254 [7600r,7648r:0) 0@7600r  weight:0.000000e+00
%255 [7616r,7632r:0) 0@7616r  weight:0.000000e+00
%256 [7632r,7744r:0) 0@7632r  weight:0.000000e+00
%257 [7648r,7664r:0)[7664r,7760r:1) 0@7648r 1@7664r  weight:0.000000e+00
%258 [7808r,7808d:0) 0@7808r  weight:0.000000e+00
%259 [7824r,7872r:0) 0@7824r  weight:0.000000e+00
%260 [7840r,7856r:0) 0@7840r  weight:0.000000e+00
%261 [7856r,7968r:0) 0@7856r  weight:0.000000e+00
%262 [7872r,7888r:0)[7888r,7984r:1) 0@7872r 1@7888r  weight:0.000000e+00
%263 [8032r,8032d:0) 0@8032r  weight:0.000000e+00
%264 [8048r,8096r:0) 0@8048r  weight:0.000000e+00
%265 [8064r,8080r:0) 0@8064r  weight:0.000000e+00
%266 [8080r,8192r:0) 0@8080r  weight:0.000000e+00
%267 [8096r,8112r:0)[8112r,8208r:1) 0@8096r 1@8112r  weight:0.000000e+00
%268 [8256r,8256d:0) 0@8256r  weight:0.000000e+00
%269 [8272r,8320r:0) 0@8272r  weight:0.000000e+00
%270 [8288r,8304r:0) 0@8288r  weight:0.000000e+00
%271 [8304r,8416r:0) 0@8304r  weight:0.000000e+00
%272 [8320r,8336r:0)[8336r,8432r:1) 0@8320r 1@8336r  weight:0.000000e+00
%273 [8480r,8480d:0) 0@8480r  weight:0.000000e+00
%274 [8496r,8544r:0) 0@8496r  weight:0.000000e+00
%275 [8512r,8528r:0) 0@8512r  weight:0.000000e+00
%276 [8528r,8640r:0) 0@8528r  weight:0.000000e+00
%277 [8544r,8560r:0)[8560r,8656r:1) 0@8544r 1@8560r  weight:0.000000e+00
%278 [8704r,8704d:0) 0@8704r  weight:0.000000e+00
%279 [8720r,8768r:0) 0@8720r  weight:0.000000e+00
%280 [8736r,8752r:0) 0@8736r  weight:0.000000e+00
%281 [8752r,8864r:0) 0@8752r  weight:0.000000e+00
%282 [8768r,8784r:0)[8784r,8880r:1) 0@8768r 1@8784r  weight:0.000000e+00
%283 [8928r,8928d:0) 0@8928r  weight:0.000000e+00
%284 [8944r,8992r:0) 0@8944r  weight:0.000000e+00
%285 [8960r,8976r:0) 0@8960r  weight:0.000000e+00
%286 [8976r,9088r:0) 0@8976r  weight:0.000000e+00
%287 [8992r,9008r:0)[9008r,9104r:1) 0@8992r 1@9008r  weight:0.000000e+00
%288 [9152r,9152d:0) 0@9152r  weight:0.000000e+00
%289 [9168r,9216r:0) 0@9168r  weight:0.000000e+00
%290 [9184r,9200r:0) 0@9184r  weight:0.000000e+00
%291 [9200r,9312r:0) 0@9200r  weight:0.000000e+00
%292 [9216r,9232r:0)[9232r,9328r:1) 0@9216r 1@9232r  weight:0.000000e+00
%293 [9376r,9376d:0) 0@9376r  weight:0.000000e+00
%294 [9392r,9440r:0) 0@9392r  weight:0.000000e+00
%295 [9408r,9424r:0) 0@9408r  weight:0.000000e+00
%296 [9424r,9536r:0) 0@9424r  weight:0.000000e+00
%297 [9440r,9456r:0)[9456r,9552r:1) 0@9440r 1@9456r  weight:0.000000e+00
%298 [9600r,9600d:0) 0@9600r  weight:0.000000e+00
%299 [9616r,9664r:0) 0@9616r  weight:0.000000e+00
%300 [9632r,9648r:0) 0@9632r  weight:0.000000e+00
%301 [9648r,9760r:0) 0@9648r  weight:0.000000e+00
%302 [9664r,9680r:0)[9680r,9776r:1) 0@9664r 1@9680r  weight:0.000000e+00
%303 [9824r,9824d:0) 0@9824r  weight:0.000000e+00
%304 [9840r,9888r:0) 0@9840r  weight:0.000000e+00
%305 [9856r,9872r:0) 0@9856r  weight:0.000000e+00
%306 [9872r,9984r:0) 0@9872r  weight:0.000000e+00
%307 [9888r,9904r:0)[9904r,10000r:1) 0@9888r 1@9904r  weight:0.000000e+00
%308 [10048r,10048d:0) 0@10048r  weight:0.000000e+00
%309 [10064r,10112r:0) 0@10064r  weight:0.000000e+00
%310 [10080r,10096r:0) 0@10080r  weight:0.000000e+00
%311 [10096r,10208r:0) 0@10096r  weight:0.000000e+00
%312 [10112r,10128r:0)[10128r,10224r:1) 0@10112r 1@10128r  weight:0.000000e+00
%313 [10272r,10272d:0) 0@10272r  weight:0.000000e+00
%314 [10288r,10336r:0) 0@10288r  weight:0.000000e+00
%315 [10304r,10320r:0) 0@10304r  weight:0.000000e+00
%316 [10320r,10432r:0) 0@10320r  weight:0.000000e+00
%317 [10336r,10352r:0)[10352r,10448r:1) 0@10336r 1@10352r  weight:0.000000e+00
%318 [10496r,10496d:0) 0@10496r  weight:0.000000e+00
%319 [10512r,10528r:0) 0@10512r  weight:0.000000e+00
RegMasks: 3856r 4032r 4288r 4640r 5536r 5728r 5984r 6208r 6432r 6656r 6880r 7104r 7328r 7552r 7776r 8000r 8224r 8448r 8672r 8896r 9120r 9344r 9568r 9792r 10016r 10240r 10464r
********** MACHINEINSTRS **********
# Machine code for function moreThan20Variables: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=8, align=8, at location [SP]
  fi#20: size=8, align=8, at location [SP]
  fi#21: size=8, align=8, at location [SP]
  fi#22: size=8, align=8, at location [SP]
  fi#23: size=8, align=8, at location [SP]
  fi#24: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

0B	bb.0 (%ir-block.3):
	  liveins: $r0, $r1, $r2
16B	  %2:tgpr = COPY $r2
32B	  %1:tgpr = COPY $r1
48B	  %0:tgpr = COPY $r0
64B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
80B	  tSTRspi %1:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
96B	  tSTRspi %2:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
112B	  %3:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
128B	  %4:tgpr, dead $cpsr = tASRri %3:tgpr, 31, 14, $noreg
144B	  %5:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
160B	  %6:tgpr, $cpsr = tRSB %3:tgpr, 14, $noreg
176B	  %7:tgpr = COPY %5:tgpr
192B	  %7:tgpr, dead $cpsr = tSBC %7:tgpr(tied-def 0), %4:tgpr, 14, $noreg, implicit killed $cpsr
208B	  tSTRspi %6:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
224B	  tSTRspi %7:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
240B	  %8:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
256B	  %9:tgpr, dead $cpsr = tLSLri %8:tgpr, 1, 14, $noreg
272B	  %10:tgpr, dead $cpsr = tASRri %9:tgpr, 31, 14, $noreg
288B	  %11:tgpr, $cpsr = tRSB %9:tgpr, 14, $noreg
304B	  %12:tgpr = COPY %5:tgpr
320B	  %12:tgpr, dead $cpsr = tSBC %12:tgpr(tied-def 0), %10:tgpr, 14, $noreg, implicit killed $cpsr
336B	  tSTRspi %11:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
352B	  tSTRspi %12:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
368B	  %13:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
384B	  %14:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
400B	  %15:tgpr = COPY %14:tgpr
416B	  %15:tgpr, dead $cpsr = nsw tMUL %13:tgpr, %15:tgpr(tied-def 0), 14, $noreg
432B	  %16:tgpr, dead $cpsr = tASRri %15:tgpr, 31, 14, $noreg
448B	  %17:tgpr, $cpsr = tRSB %15:tgpr, 14, $noreg
464B	  %18:tgpr = COPY %5:tgpr
480B	  %18:tgpr, dead $cpsr = tSBC %18:tgpr(tied-def 0), %16:tgpr, 14, $noreg, implicit killed $cpsr
496B	  tSTRspi %17:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
512B	  tSTRspi %18:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
528B	  %19:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  %20:tgpr, dead $cpsr = tLSLri %19:tgpr, 2, 14, $noreg
560B	  %21:tgpr, dead $cpsr = tASRri %20:tgpr, 31, 14, $noreg
576B	  %22:tgpr, $cpsr = tRSB %20:tgpr, 14, $noreg
592B	  %23:tgpr = COPY %5:tgpr
608B	  %23:tgpr, dead $cpsr = tSBC %23:tgpr(tied-def 0), %21:tgpr, 14, $noreg, implicit killed $cpsr
624B	  tSTRspi %22:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
640B	  tSTRspi %23:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
656B	  %24:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
672B	  %25:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
688B	  %26:tgpr = COPY %25:tgpr
704B	  %26:tgpr, dead $cpsr = nsw tMUL %24:tgpr, %26:tgpr(tied-def 0), 14, $noreg
720B	  %27:tgpr, dead $cpsr = tASRri %26:tgpr, 31, 14, $noreg
736B	  %28:tgpr, $cpsr = tRSB %26:tgpr, 14, $noreg
752B	  %29:tgpr = COPY %5:tgpr
768B	  %29:tgpr, dead $cpsr = tSBC %29:tgpr(tied-def 0), %27:tgpr, 14, $noreg, implicit killed $cpsr
784B	  tSTRspi %28:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
800B	  tSTRspi %29:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
816B	  %30:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
832B	  %31:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
848B	  %32:tgpr = COPY %31:tgpr
864B	  %32:tgpr, dead $cpsr = nsw tMUL %30:tgpr, %32:tgpr(tied-def 0), 14, $noreg
880B	  %33:tgpr, dead $cpsr = tASRri %32:tgpr, 31, 14, $noreg
896B	  %34:tgpr, $cpsr = tRSB %32:tgpr, 14, $noreg
912B	  %35:tgpr = COPY %5:tgpr
928B	  %35:tgpr, dead $cpsr = tSBC %35:tgpr(tied-def 0), %33:tgpr, 14, $noreg, implicit killed $cpsr
944B	  tSTRspi %34:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
960B	  tSTRspi %35:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
976B	  %36:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
992B	  %37:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
1008B	  %38:tgpr = COPY %37:tgpr
1024B	  %38:tgpr, dead $cpsr = nsw tMUL %36:tgpr, %38:tgpr(tied-def 0), 14, $noreg
1040B	  %39:tgpr, dead $cpsr = tASRri %38:tgpr, 31, 14, $noreg
1056B	  %40:tgpr, $cpsr = tRSB %38:tgpr, 14, $noreg
1072B	  %41:tgpr = COPY %5:tgpr
1088B	  %41:tgpr, dead $cpsr = tSBC %41:tgpr(tied-def 0), %39:tgpr, 14, $noreg, implicit killed $cpsr
1104B	  tSTRspi %40:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
1120B	  tSTRspi %41:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
1136B	  %42:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1152B	  %43:tgpr, dead $cpsr = tLSLri %42:tgpr, 3, 14, $noreg
1168B	  %44:tgpr, dead $cpsr = tASRri %43:tgpr, 31, 14, $noreg
1184B	  %45:tgpr, $cpsr = tRSB %43:tgpr, 14, $noreg
1200B	  %46:tgpr = COPY %5:tgpr
1216B	  %46:tgpr, dead $cpsr = tSBC %46:tgpr(tied-def 0), %44:tgpr, 14, $noreg, implicit killed $cpsr
1232B	  tSTRspi %45:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
1248B	  tSTRspi %46:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
1264B	  %47:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1280B	  %48:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
1296B	  %49:tgpr = COPY %48:tgpr
1312B	  %49:tgpr, dead $cpsr = nsw tMUL %47:tgpr, %49:tgpr(tied-def 0), 14, $noreg
1328B	  %50:tgpr, dead $cpsr = tASRri %49:tgpr, 31, 14, $noreg
1344B	  %51:tgpr, $cpsr = tRSB %49:tgpr, 14, $noreg
1360B	  %52:tgpr = COPY %5:tgpr
1376B	  %52:tgpr, dead $cpsr = tSBC %52:tgpr(tied-def 0), %50:tgpr, 14, $noreg, implicit killed $cpsr
1392B	  tSTRspi %51:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
1408B	  tSTRspi %52:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
1424B	  %53:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1440B	  %54:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
1456B	  %55:tgpr = COPY %54:tgpr
1472B	  %55:tgpr, dead $cpsr = nsw tMUL %53:tgpr, %55:tgpr(tied-def 0), 14, $noreg
1488B	  %56:tgpr, dead $cpsr = tASRri %55:tgpr, 31, 14, $noreg
1504B	  %57:tgpr, $cpsr = tRSB %55:tgpr, 14, $noreg
1520B	  %58:tgpr = COPY %5:tgpr
1536B	  %58:tgpr, dead $cpsr = tSBC %58:tgpr(tied-def 0), %56:tgpr, 14, $noreg, implicit killed $cpsr
1552B	  tSTRspi %57:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
1568B	  tSTRspi %58:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
1584B	  %59:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1600B	  %60:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
1616B	  %61:tgpr = COPY %60:tgpr
1632B	  %61:tgpr, dead $cpsr = nsw tMUL %59:tgpr, %61:tgpr(tied-def 0), 14, $noreg
1648B	  %62:tgpr, dead $cpsr = tASRri %61:tgpr, 31, 14, $noreg
1664B	  %63:tgpr, $cpsr = tRSB %61:tgpr, 14, $noreg
1680B	  %64:tgpr = COPY %5:tgpr
1696B	  %64:tgpr, dead $cpsr = tSBC %64:tgpr(tied-def 0), %62:tgpr, 14, $noreg, implicit killed $cpsr
1712B	  tSTRspi %63:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
1728B	  tSTRspi %64:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
1744B	  %65:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1760B	  %66:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
1776B	  %67:tgpr = COPY %66:tgpr
1792B	  %67:tgpr, dead $cpsr = nsw tMUL %65:tgpr, %67:tgpr(tied-def 0), 14, $noreg
1808B	  %68:tgpr, dead $cpsr = tASRri %67:tgpr, 31, 14, $noreg
1824B	  %69:tgpr, $cpsr = tRSB %67:tgpr, 14, $noreg
1840B	  %70:tgpr = COPY %5:tgpr
1856B	  %70:tgpr, dead $cpsr = tSBC %70:tgpr(tied-def 0), %68:tgpr, 14, $noreg, implicit killed $cpsr
1872B	  tSTRspi %69:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
1888B	  tSTRspi %70:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
1904B	  %71:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1920B	  %72:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
1936B	  %73:tgpr = COPY %72:tgpr
1952B	  %73:tgpr, dead $cpsr = nsw tMUL %71:tgpr, %73:tgpr(tied-def 0), 14, $noreg
1968B	  %74:tgpr, dead $cpsr = tASRri %73:tgpr, 31, 14, $noreg
1984B	  %75:tgpr, $cpsr = tRSB %73:tgpr, 14, $noreg
2000B	  %76:tgpr = COPY %5:tgpr
2016B	  %76:tgpr, dead $cpsr = tSBC %76:tgpr(tied-def 0), %74:tgpr, 14, $noreg, implicit killed $cpsr
2032B	  tSTRspi %75:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
2048B	  tSTRspi %76:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
2064B	  %77:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2080B	  %78:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
2096B	  %79:tgpr = COPY %78:tgpr
2112B	  %79:tgpr, dead $cpsr = nsw tMUL %77:tgpr, %79:tgpr(tied-def 0), 14, $noreg
2128B	  %80:tgpr, dead $cpsr = tASRri %79:tgpr, 31, 14, $noreg
2144B	  %81:tgpr, $cpsr = tRSB %79:tgpr, 14, $noreg
2160B	  %82:tgpr = COPY %5:tgpr
2176B	  %82:tgpr, dead $cpsr = tSBC %82:tgpr(tied-def 0), %80:tgpr, 14, $noreg, implicit killed $cpsr
2192B	  tSTRspi %81:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
2208B	  tSTRspi %82:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
2224B	  %83:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2240B	  %84:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
2256B	  %85:tgpr = COPY %84:tgpr
2272B	  %85:tgpr, dead $cpsr = nsw tMUL %83:tgpr, %85:tgpr(tied-def 0), 14, $noreg
2288B	  %86:tgpr, dead $cpsr = tASRri %85:tgpr, 31, 14, $noreg
2304B	  %87:tgpr, $cpsr = tRSB %85:tgpr, 14, $noreg
2320B	  %88:tgpr = COPY %5:tgpr
2336B	  %88:tgpr, dead $cpsr = tSBC %88:tgpr(tied-def 0), %86:tgpr, 14, $noreg, implicit killed $cpsr
2352B	  tSTRspi %87:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
2368B	  tSTRspi %88:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
2384B	  %89:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2400B	  %90:tgpr, dead $cpsr = tLSLri %89:tgpr, 4, 14, $noreg
2416B	  %91:tgpr, dead $cpsr = tASRri %90:tgpr, 31, 14, $noreg
2432B	  %92:tgpr, $cpsr = tRSB %90:tgpr, 14, $noreg
2448B	  %93:tgpr = COPY %5:tgpr
2464B	  %93:tgpr, dead $cpsr = tSBC %93:tgpr(tied-def 0), %91:tgpr, 14, $noreg, implicit killed $cpsr
2480B	  tSTRspi %92:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
2496B	  tSTRspi %93:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
2512B	  %94:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2528B	  %95:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
2544B	  %96:tgpr = COPY %95:tgpr
2560B	  %96:tgpr, dead $cpsr = nsw tMUL %94:tgpr, %96:tgpr(tied-def 0), 14, $noreg
2576B	  %97:tgpr, dead $cpsr = tASRri %96:tgpr, 31, 14, $noreg
2592B	  %98:tgpr, $cpsr = tRSB %96:tgpr, 14, $noreg
2608B	  %99:tgpr = COPY %5:tgpr
2624B	  %99:tgpr, dead $cpsr = tSBC %99:tgpr(tied-def 0), %97:tgpr, 14, $noreg, implicit killed $cpsr
2640B	  tSTRspi %98:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
2656B	  tSTRspi %99:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
2672B	  %100:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2688B	  %101:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
2704B	  %102:tgpr = COPY %101:tgpr
2720B	  %102:tgpr, dead $cpsr = nsw tMUL %100:tgpr, %102:tgpr(tied-def 0), 14, $noreg
2736B	  %103:tgpr, dead $cpsr = tASRri %102:tgpr, 31, 14, $noreg
2752B	  %104:tgpr, $cpsr = tRSB %102:tgpr, 14, $noreg
2768B	  %105:tgpr = COPY %5:tgpr
2784B	  %105:tgpr, dead $cpsr = tSBC %105:tgpr(tied-def 0), %103:tgpr, 14, $noreg, implicit killed $cpsr
2800B	  tSTRspi %104:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
2816B	  tSTRspi %105:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
2832B	  %106:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2848B	  %107:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
2864B	  %108:tgpr = COPY %107:tgpr
2880B	  %108:tgpr, dead $cpsr = nsw tMUL %106:tgpr, %108:tgpr(tied-def 0), 14, $noreg
2896B	  %109:tgpr, dead $cpsr = tASRri %108:tgpr, 31, 14, $noreg
2912B	  %110:tgpr, $cpsr = tRSB %108:tgpr, 14, $noreg
2928B	  %111:tgpr = COPY %5:tgpr
2944B	  %111:tgpr, dead $cpsr = tSBC %111:tgpr(tied-def 0), %109:tgpr, 14, $noreg, implicit killed $cpsr
2960B	  tSTRspi %110:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
2976B	  tSTRspi %111:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
2992B	  %112:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3008B	  %113:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
3024B	  %114:tgpr = COPY %113:tgpr
3040B	  %114:tgpr, dead $cpsr = nsw tMUL %112:tgpr, %114:tgpr(tied-def 0), 14, $noreg
3056B	  %115:tgpr, dead $cpsr = tASRri %114:tgpr, 31, 14, $noreg
3072B	  %116:tgpr, $cpsr = tRSB %114:tgpr, 14, $noreg
3088B	  %117:tgpr = COPY %5:tgpr
3104B	  %117:tgpr, dead $cpsr = tSBC %117:tgpr(tied-def 0), %115:tgpr, 14, $noreg, implicit killed $cpsr
3120B	  tSTRspi %116:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
3136B	  tSTRspi %117:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
3152B	  %118:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3168B	  %119:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
3184B	  %120:tgpr = COPY %119:tgpr
3200B	  %120:tgpr, dead $cpsr = nsw tMUL %118:tgpr, %120:tgpr(tied-def 0), 14, $noreg
3216B	  %121:tgpr, dead $cpsr = tASRri %120:tgpr, 31, 14, $noreg
3232B	  %122:tgpr, $cpsr = tRSB %120:tgpr, 14, $noreg
3248B	  %123:tgpr = COPY %5:tgpr
3264B	  %123:tgpr, dead $cpsr = tSBC %123:tgpr(tied-def 0), %121:tgpr, 14, $noreg, implicit killed $cpsr
3280B	  tSTRspi %122:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
3296B	  tSTRspi %123:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
3312B	  %124:tgpr = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
3328B	  %125:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
3344B	  %126:tgpr, dead $cpsr = nsw tADDrr %124:tgpr, %125:tgpr, 14, $noreg
3360B	  %127:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
3376B	  %128:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
3392B	  %129:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
3408B	  %130:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
3424B	  %131:tgpr = COPY %128:tgpr
3440B	  %131:tgpr, dead $cpsr = tAND %131:tgpr(tied-def 0), %130:tgpr, 14, $noreg
3456B	  %132:tgpr = COPY %127:tgpr
3472B	  %132:tgpr, dead $cpsr = tAND %132:tgpr(tied-def 0), %129:tgpr, 14, $noreg
3488B	  %133:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
3504B	  %134:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
3520B	  %135:tgpr = COPY %132:tgpr
3536B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %134:tgpr, 14, $noreg
3552B	  %136:tgpr = COPY %131:tgpr
3568B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %133:tgpr, 14, $noreg
3584B	  %137:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
3600B	  %138:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
3616B	  %139:tgpr = COPY %136:tgpr
3632B	  %139:tgpr, dead $cpsr = tORR %139:tgpr(tied-def 0), %138:tgpr, 14, $noreg
3648B	  %140:tgpr = COPY %135:tgpr
3664B	  %140:tgpr, dead $cpsr = tORR %140:tgpr(tied-def 0), %137:tgpr, 14, $noreg
3680B	  %141:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
3696B	  %142:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
3712B	  %143:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
3728B	  %144:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
3744B	  %145:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
3760B	  %146:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
3776B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3792B	  $r0 = COPY %143:tgpr
3808B	  $r1 = COPY %144:tgpr
3824B	  $r2 = COPY %145:tgpr
3840B	  $r3 = COPY %146:tgpr
3856B	  tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3872B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3888B	  %147:tgpr = COPY $r0
3904B	  %148:tgpr = COPY $r1
3920B	  %149:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
3936B	  %150:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
3952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3968B	  $r0 = COPY %147:tgpr
3984B	  $r1 = COPY %148:tgpr
4000B	  $r2 = COPY %149:tgpr
4016B	  $r3 = COPY %150:tgpr
4032B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4048B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4064B	  %151:tgpr = COPY $r0
4080B	  %152:tgpr = COPY $r1
4096B	  %153:tgpr, $cpsr = tADDrr %142:tgpr, %151:tgpr, 14, $noreg
4112B	  %154:tgpr = COPY %141:tgpr
4128B	  %154:tgpr, dead $cpsr = tADC %154:tgpr(tied-def 0), %152:tgpr, 14, $noreg, implicit killed $cpsr
4144B	  %155:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
4160B	  %156:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
4176B	  %157:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
4192B	  %158:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
4208B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4224B	  $r0 = COPY %155:tgpr
4240B	  $r1 = COPY %156:tgpr
4256B	  $r2 = COPY %157:tgpr
4272B	  $r3 = COPY %158:tgpr
4288B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4304B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4320B	  %159:tgpr = COPY $r0
4336B	  %160:tgpr = COPY $r1
4352B	  %161:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
4368B	  %162:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
4384B	  %163:tgpr, $cpsr = tADDrr %159:tgpr, %162:tgpr, 14, $noreg
4400B	  %164:tgpr = COPY %160:tgpr
4416B	  %164:tgpr, dead $cpsr = tADC %164:tgpr(tied-def 0), %161:tgpr, 14, $noreg, implicit killed $cpsr
4432B	  %165:tgpr = COPY %154:tgpr
4448B	  %165:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), %164:tgpr, 14, $noreg
4464B	  %166:tgpr = COPY %153:tgpr
4480B	  %166:tgpr, dead $cpsr = tAND %166:tgpr(tied-def 0), %163:tgpr, 14, $noreg
4496B	  %167:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
4512B	  %168:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
4528B	  %169:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
4544B	  %170:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
4560B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4576B	  $r0 = COPY %167:tgpr
4592B	  $r1 = COPY %168:tgpr
4608B	  $r2 = COPY %169:tgpr
4624B	  $r3 = COPY %170:tgpr
4640B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4656B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4672B	  %171:tgpr = COPY $r0
4688B	  %172:tgpr = COPY $r1
4704B	  %173:tgpr = COPY %165:tgpr
4720B	  %173:tgpr, dead $cpsr = tAND %173:tgpr(tied-def 0), %172:tgpr, 14, $noreg
4736B	  %174:tgpr = COPY %166:tgpr
4752B	  %174:tgpr, dead $cpsr = tAND %174:tgpr(tied-def 0), %171:tgpr, 14, $noreg
4768B	  %175:tgpr = COPY %140:tgpr
4784B	  %175:tgpr, dead $cpsr = tORR %175:tgpr(tied-def 0), %173:tgpr, 14, $noreg
4800B	  %176:tgpr = COPY %139:tgpr
4816B	  %176:tgpr, dead $cpsr = tORR %176:tgpr(tied-def 0), %174:tgpr, 14, $noreg
4832B	  %177:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
4848B	  %178:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
4864B	  %179:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
4880B	  %180:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
4896B	  %181:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
4912B	  %182:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
4928B	  %183:tgpr, $cpsr = tSUBrr %180:tgpr, %182:tgpr, 14, $noreg
4944B	  %184:tgpr = COPY %179:tgpr
4960B	  %184:tgpr, dead $cpsr = tSBC %184:tgpr(tied-def 0), %181:tgpr, 14, $noreg, implicit killed $cpsr
4976B	  %185:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
4992B	  %186:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
5008B	  %187:tgpr, $cpsr = tSUBrr %183:tgpr, %186:tgpr, 14, $noreg
5024B	  %188:tgpr = COPY %184:tgpr
5040B	  %188:tgpr, dead $cpsr = tSBC %188:tgpr(tied-def 0), %185:tgpr, 14, $noreg, implicit killed $cpsr
5056B	  %189:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
5072B	  %190:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
5088B	  %191:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
5104B	  %192:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
5120B	  %193:tgpr, $cpsr = tADDrr %190:tgpr, %192:tgpr, 14, $noreg
5136B	  %194:tgpr = COPY %189:tgpr
5152B	  %194:tgpr, dead $cpsr = tADC %194:tgpr(tied-def 0), %191:tgpr, 14, $noreg, implicit killed $cpsr
5168B	  %195:tgpr = COPY %188:tgpr
5184B	  %195:tgpr, dead $cpsr = tAND %195:tgpr(tied-def 0), %194:tgpr, 14, $noreg
5200B	  %196:tgpr = COPY %187:tgpr
5216B	  %196:tgpr, dead $cpsr = tAND %196:tgpr(tied-def 0), %193:tgpr, 14, $noreg
5232B	  %197:tgpr = COPY %178:tgpr
5248B	  %197:tgpr, dead $cpsr = tEOR %197:tgpr(tied-def 0), %196:tgpr, 14, $noreg
5264B	  %198:tgpr = COPY %177:tgpr
5280B	  %198:tgpr, dead $cpsr = tEOR %198:tgpr(tied-def 0), %195:tgpr, 14, $noreg
5296B	  %199:tgpr = COPY %175:tgpr
5312B	  %199:tgpr, dead $cpsr = tORR %199:tgpr(tied-def 0), %198:tgpr, 14, $noreg
5328B	  %200:tgpr = COPY %176:tgpr
5344B	  %200:tgpr, dead $cpsr = tORR %200:tgpr(tied-def 0), %197:tgpr, 14, $noreg
5360B	  %201:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
5376B	  %202:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
5392B	  %203:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
5408B	  %204:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
5424B	  %205:tgpr, dead $cpsr = tMVN %204:tgpr, 14, $noreg
5440B	  %206:tgpr, dead $cpsr = tMVN %203:tgpr, 14, $noreg
5456B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5472B	  $r0 = COPY %201:tgpr
5488B	  $r1 = COPY %202:tgpr
5504B	  $r2 = COPY %205:tgpr
5520B	  $r3 = COPY %206:tgpr
5536B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
5552B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5568B	  %207:tgpr = COPY $r0
5584B	  %208:tgpr = COPY $r1
5600B	  %209:tgpr = COPY %199:tgpr
5616B	  %209:tgpr, dead $cpsr = tORR %209:tgpr(tied-def 0), %208:tgpr, 14, $noreg
5632B	  %210:tgpr = COPY %200:tgpr
5648B	  %210:tgpr, dead $cpsr = tORR %210:tgpr(tied-def 0), %207:tgpr, 14, $noreg
5664B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5680B	  $r0 = COPY %126:tgpr
5696B	  $r2 = COPY %210:tgpr
5712B	  $r3 = COPY %209:tgpr
5728B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
5744B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5760B	  %212:tgpr = COPY $r0
5776B	  tSTRspi %212:tgpr, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
5792B	  %213:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
5808B	  %214:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
5824B	  %215:tgpr, $cpsr = tADDi3 %214:tgpr, 1, 14, $noreg
5840B	  %216:tgpr = COPY %213:tgpr
5856B	  %216:tgpr, dead $cpsr = tADC %216:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
5872B	  tSTRspi %215:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
5888B	  tSTRspi %216:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
5904B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5920B	  %217:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
5936B	  $r0 = COPY %217:tgpr
5952B	  $r2 = COPY %215:tgpr
5968B	  $r3 = COPY %216:tgpr
5984B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6000B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6016B	  dead %218:tgpr = COPY $r0
6032B	  %219:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
6048B	  %220:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
6064B	  %221:tgpr, $cpsr = tADDi3 %220:tgpr, 1, 14, $noreg
6080B	  %222:tgpr = COPY %219:tgpr
6096B	  %222:tgpr, dead $cpsr = tADC %222:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6112B	  tSTRspi %221:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
6128B	  tSTRspi %222:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
6144B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6160B	  $r0 = COPY %217:tgpr
6176B	  $r2 = COPY %221:tgpr
6192B	  $r3 = COPY %222:tgpr
6208B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6224B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6240B	  dead %223:tgpr = COPY $r0
6256B	  %224:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
6272B	  %225:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
6288B	  %226:tgpr, $cpsr = tADDi3 %225:tgpr, 1, 14, $noreg
6304B	  %227:tgpr = COPY %224:tgpr
6320B	  %227:tgpr, dead $cpsr = tADC %227:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6336B	  tSTRspi %226:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
6352B	  tSTRspi %227:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
6368B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6384B	  $r0 = COPY %217:tgpr
6400B	  $r2 = COPY %226:tgpr
6416B	  $r3 = COPY %227:tgpr
6432B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6464B	  dead %228:tgpr = COPY $r0
6480B	  %229:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
6496B	  %230:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
6512B	  %231:tgpr, $cpsr = tADDi3 %230:tgpr, 1, 14, $noreg
6528B	  %232:tgpr = COPY %229:tgpr
6544B	  %232:tgpr, dead $cpsr = tADC %232:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6560B	  tSTRspi %231:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
6576B	  tSTRspi %232:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
6592B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6608B	  $r0 = COPY %217:tgpr
6624B	  $r2 = COPY %231:tgpr
6640B	  $r3 = COPY %232:tgpr
6656B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6672B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6688B	  dead %233:tgpr = COPY $r0
6704B	  %234:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
6720B	  %235:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
6736B	  %236:tgpr, $cpsr = tADDi3 %235:tgpr, 1, 14, $noreg
6752B	  %237:tgpr = COPY %234:tgpr
6768B	  %237:tgpr, dead $cpsr = tADC %237:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6784B	  tSTRspi %236:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
6800B	  tSTRspi %237:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
6816B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6832B	  $r0 = COPY %217:tgpr
6848B	  $r2 = COPY %236:tgpr
6864B	  $r3 = COPY %237:tgpr
6880B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6896B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6912B	  dead %238:tgpr = COPY $r0
6928B	  %239:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
6944B	  %240:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
6960B	  %241:tgpr, $cpsr = tADDi3 %240:tgpr, 1, 14, $noreg
6976B	  %242:tgpr = COPY %239:tgpr
6992B	  %242:tgpr, dead $cpsr = tADC %242:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7008B	  tSTRspi %241:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
7024B	  tSTRspi %242:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
7040B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7056B	  $r0 = COPY %217:tgpr
7072B	  $r2 = COPY %241:tgpr
7088B	  $r3 = COPY %242:tgpr
7104B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7120B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7136B	  dead %243:tgpr = COPY $r0
7152B	  %244:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
7168B	  %245:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
7184B	  %246:tgpr, $cpsr = tADDi3 %245:tgpr, 1, 14, $noreg
7200B	  %247:tgpr = COPY %244:tgpr
7216B	  %247:tgpr, dead $cpsr = tADC %247:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7232B	  tSTRspi %246:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
7248B	  tSTRspi %247:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
7264B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7280B	  $r0 = COPY %217:tgpr
7296B	  $r2 = COPY %246:tgpr
7312B	  $r3 = COPY %247:tgpr
7328B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7344B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7360B	  dead %248:tgpr = COPY $r0
7376B	  %249:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
7392B	  %250:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
7408B	  %251:tgpr, $cpsr = tADDi3 %250:tgpr, 1, 14, $noreg
7424B	  %252:tgpr = COPY %249:tgpr
7440B	  %252:tgpr, dead $cpsr = tADC %252:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7456B	  tSTRspi %251:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
7472B	  tSTRspi %252:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
7488B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7504B	  $r0 = COPY %217:tgpr
7520B	  $r2 = COPY %251:tgpr
7536B	  $r3 = COPY %252:tgpr
7552B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7568B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7584B	  dead %253:tgpr = COPY $r0
7600B	  %254:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
7616B	  %255:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
7632B	  %256:tgpr, $cpsr = tADDi3 %255:tgpr, 1, 14, $noreg
7648B	  %257:tgpr = COPY %254:tgpr
7664B	  %257:tgpr, dead $cpsr = tADC %257:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7680B	  tSTRspi %256:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
7696B	  tSTRspi %257:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
7712B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7728B	  $r0 = COPY %217:tgpr
7744B	  $r2 = COPY %256:tgpr
7760B	  $r3 = COPY %257:tgpr
7776B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7792B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7808B	  dead %258:tgpr = COPY $r0
7824B	  %259:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
7840B	  %260:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
7856B	  %261:tgpr, $cpsr = tADDi3 %260:tgpr, 1, 14, $noreg
7872B	  %262:tgpr = COPY %259:tgpr
7888B	  %262:tgpr, dead $cpsr = tADC %262:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7904B	  tSTRspi %261:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
7920B	  tSTRspi %262:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
7936B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7952B	  $r0 = COPY %217:tgpr
7968B	  $r2 = COPY %261:tgpr
7984B	  $r3 = COPY %262:tgpr
8000B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8016B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8032B	  dead %263:tgpr = COPY $r0
8048B	  %264:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
8064B	  %265:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
8080B	  %266:tgpr, $cpsr = tADDi3 %265:tgpr, 1, 14, $noreg
8096B	  %267:tgpr = COPY %264:tgpr
8112B	  %267:tgpr, dead $cpsr = tADC %267:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8128B	  tSTRspi %266:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
8144B	  tSTRspi %267:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
8160B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8176B	  $r0 = COPY %217:tgpr
8192B	  $r2 = COPY %266:tgpr
8208B	  $r3 = COPY %267:tgpr
8224B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8240B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8256B	  dead %268:tgpr = COPY $r0
8272B	  %269:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
8288B	  %270:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
8304B	  %271:tgpr, $cpsr = tADDi3 %270:tgpr, 1, 14, $noreg
8320B	  %272:tgpr = COPY %269:tgpr
8336B	  %272:tgpr, dead $cpsr = tADC %272:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8352B	  tSTRspi %271:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
8368B	  tSTRspi %272:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
8384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8400B	  $r0 = COPY %217:tgpr
8416B	  $r2 = COPY %271:tgpr
8432B	  $r3 = COPY %272:tgpr
8448B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8464B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8480B	  dead %273:tgpr = COPY $r0
8496B	  %274:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
8512B	  %275:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
8528B	  %276:tgpr, $cpsr = tADDi3 %275:tgpr, 1, 14, $noreg
8544B	  %277:tgpr = COPY %274:tgpr
8560B	  %277:tgpr, dead $cpsr = tADC %277:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8576B	  tSTRspi %276:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
8592B	  tSTRspi %277:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
8608B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8624B	  $r0 = COPY %217:tgpr
8640B	  $r2 = COPY %276:tgpr
8656B	  $r3 = COPY %277:tgpr
8672B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8688B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8704B	  dead %278:tgpr = COPY $r0
8720B	  %279:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
8736B	  %280:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
8752B	  %281:tgpr, $cpsr = tADDi3 %280:tgpr, 1, 14, $noreg
8768B	  %282:tgpr = COPY %279:tgpr
8784B	  %282:tgpr, dead $cpsr = tADC %282:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8800B	  tSTRspi %281:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
8816B	  tSTRspi %282:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
8832B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8848B	  $r0 = COPY %217:tgpr
8864B	  $r2 = COPY %281:tgpr
8880B	  $r3 = COPY %282:tgpr
8896B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8912B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8928B	  dead %283:tgpr = COPY $r0
8944B	  %284:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
8960B	  %285:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
8976B	  %286:tgpr, $cpsr = tADDi3 %285:tgpr, 1, 14, $noreg
8992B	  %287:tgpr = COPY %284:tgpr
9008B	  %287:tgpr, dead $cpsr = tADC %287:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9024B	  tSTRspi %286:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
9040B	  tSTRspi %287:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
9056B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9072B	  $r0 = COPY %217:tgpr
9088B	  $r2 = COPY %286:tgpr
9104B	  $r3 = COPY %287:tgpr
9120B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9136B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9152B	  dead %288:tgpr = COPY $r0
9168B	  %289:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
9184B	  %290:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
9200B	  %291:tgpr, $cpsr = tADDi3 %290:tgpr, 1, 14, $noreg
9216B	  %292:tgpr = COPY %289:tgpr
9232B	  %292:tgpr, dead $cpsr = tADC %292:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9248B	  tSTRspi %291:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
9264B	  tSTRspi %292:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
9280B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9296B	  $r0 = COPY %217:tgpr
9312B	  $r2 = COPY %291:tgpr
9328B	  $r3 = COPY %292:tgpr
9344B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9360B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9376B	  dead %293:tgpr = COPY $r0
9392B	  %294:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
9408B	  %295:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
9424B	  %296:tgpr, $cpsr = tADDi3 %295:tgpr, 1, 14, $noreg
9440B	  %297:tgpr = COPY %294:tgpr
9456B	  %297:tgpr, dead $cpsr = tADC %297:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9472B	  tSTRspi %296:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
9488B	  tSTRspi %297:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
9504B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9520B	  $r0 = COPY %217:tgpr
9536B	  $r2 = COPY %296:tgpr
9552B	  $r3 = COPY %297:tgpr
9568B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9584B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9600B	  dead %298:tgpr = COPY $r0
9616B	  %299:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
9632B	  %300:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
9648B	  %301:tgpr, $cpsr = tADDi3 %300:tgpr, 1, 14, $noreg
9664B	  %302:tgpr = COPY %299:tgpr
9680B	  %302:tgpr, dead $cpsr = tADC %302:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9696B	  tSTRspi %301:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
9712B	  tSTRspi %302:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
9728B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9744B	  $r0 = COPY %217:tgpr
9760B	  $r2 = COPY %301:tgpr
9776B	  $r3 = COPY %302:tgpr
9792B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9808B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9824B	  dead %303:tgpr = COPY $r0
9840B	  %304:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
9856B	  %305:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
9872B	  %306:tgpr, $cpsr = tADDi3 %305:tgpr, 1, 14, $noreg
9888B	  %307:tgpr = COPY %304:tgpr
9904B	  %307:tgpr, dead $cpsr = tADC %307:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9920B	  tSTRspi %306:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
9936B	  tSTRspi %307:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
9952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9968B	  $r0 = COPY %217:tgpr
9984B	  $r2 = COPY %306:tgpr
10000B	  $r3 = COPY %307:tgpr
10016B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10032B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10048B	  dead %308:tgpr = COPY $r0
10064B	  %309:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
10080B	  %310:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
10096B	  %311:tgpr, $cpsr = tADDi3 %310:tgpr, 1, 14, $noreg
10112B	  %312:tgpr = COPY %309:tgpr
10128B	  %312:tgpr, dead $cpsr = tADC %312:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
10144B	  tSTRspi %311:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
10160B	  tSTRspi %312:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
10176B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10192B	  $r0 = COPY %217:tgpr
10208B	  $r2 = COPY %311:tgpr
10224B	  $r3 = COPY %312:tgpr
10240B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10256B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10272B	  dead %313:tgpr = COPY $r0
10288B	  %314:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
10304B	  %315:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
10320B	  %316:tgpr, $cpsr = tADDi3 %315:tgpr, 1, 14, $noreg
10336B	  %317:tgpr = COPY %314:tgpr
10352B	  %317:tgpr, dead $cpsr = tADC %317:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
10368B	  tSTRspi %316:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
10384B	  tSTRspi %317:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
10400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10416B	  $r0 = COPY %217:tgpr
10432B	  $r2 = COPY %316:tgpr
10448B	  $r3 = COPY %317:tgpr
10464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10496B	  dead %318:tgpr = COPY $r0
10512B	  %319:tgpr = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
10528B	  $r0 = COPY %319:tgpr
10544B	  tBX_RET 14, $noreg, implicit $r0

# End machine code for function moreThan20Variables.

********** SIMPLE REGISTER COALESCING **********
********** Function: moreThan20Variables
********** JOINING INTERVALS ***********
:
16B	%2:tgpr = COPY $r2
	Considering merging %2 with $r2
	Can only merge into reserved registers.
32B	%1:tgpr = COPY $r1
	Considering merging %1 with $r1
	Can only merge into reserved registers.
48B	%0:tgpr = COPY $r0
	Considering merging %0 with $r0
	Can only merge into reserved registers.
176B	%7:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %7
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %7 [176r,192r:0)[192r,224r:1) 0@176r 1@192r  weight:0.000000e+00
		merge %7:0@176r into %5:0@144r --> @144r
		interference at %7:1@192r
	Interference!
304B	%12:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %12
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %12 [304r,320r:0)[320r,352r:1) 0@304r 1@320r  weight:0.000000e+00
		merge %12:0@304r into %5:0@144r --> @144r
		interference at %12:1@320r
	Interference!
400B	%15:tgpr = COPY %14:tgpr
	Considering merging to tGPR with %14 in %15
		RHS = %14 [384r,400r:0) 0@384r  weight:0.000000e+00
		LHS = %15 [400r,416r:0)[416r,448r:1) 0@400r 1@416r  weight:0.000000e+00
		merge %15:0@400r into %14:0@384r --> @384r
		erased:	400r	%15:tgpr = COPY %14:tgpr
AllocationOrder(tGPR) = [ $r0 $r1 $r2 $r3 $r4 $r5 $r6 ]
		updated: 384B	%15:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
	Success: %14 -> %15
	Result = %15 [384r,416r:0)[416r,448r:1) 0@384r 1@416r  weight:0.000000e+00
464B	%18:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %18
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %18 [464r,480r:0)[480r,512r:1) 0@464r 1@480r  weight:0.000000e+00
		merge %18:0@464r into %5:0@144r --> @144r
		interference at %18:1@480r
	Interference!
592B	%23:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %23
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %23 [592r,608r:0)[608r,640r:1) 0@592r 1@608r  weight:0.000000e+00
		merge %23:0@592r into %5:0@144r --> @144r
		interference at %23:1@608r
	Interference!
688B	%26:tgpr = COPY %25:tgpr
	Considering merging to tGPR with %25 in %26
		RHS = %25 [672r,688r:0) 0@672r  weight:0.000000e+00
		LHS = %26 [688r,704r:0)[704r,736r:1) 0@688r 1@704r  weight:0.000000e+00
		merge %26:0@688r into %25:0@672r --> @672r
		erased:	688r	%26:tgpr = COPY %25:tgpr
		updated: 672B	%26:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
	Success: %25 -> %26
	Result = %26 [672r,704r:0)[704r,736r:1) 0@672r 1@704r  weight:0.000000e+00
752B	%29:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %29
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %29 [752r,768r:0)[768r,800r:1) 0@752r 1@768r  weight:0.000000e+00
		merge %29:0@752r into %5:0@144r --> @144r
		interference at %29:1@768r
	Interference!
848B	%32:tgpr = COPY %31:tgpr
	Considering merging to tGPR with %31 in %32
		RHS = %31 [832r,848r:0) 0@832r  weight:0.000000e+00
		LHS = %32 [848r,864r:0)[864r,896r:1) 0@848r 1@864r  weight:0.000000e+00
		merge %32:0@848r into %31:0@832r --> @832r
		erased:	848r	%32:tgpr = COPY %31:tgpr
		updated: 832B	%32:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
	Success: %31 -> %32
	Result = %32 [832r,864r:0)[864r,896r:1) 0@832r 1@864r  weight:0.000000e+00
912B	%35:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %35
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %35 [912r,928r:0)[928r,960r:1) 0@912r 1@928r  weight:0.000000e+00
		merge %35:0@912r into %5:0@144r --> @144r
		interference at %35:1@928r
	Interference!
1008B	%38:tgpr = COPY %37:tgpr
	Considering merging to tGPR with %37 in %38
		RHS = %37 [992r,1008r:0) 0@992r  weight:0.000000e+00
		LHS = %38 [1008r,1024r:0)[1024r,1056r:1) 0@1008r 1@1024r  weight:0.000000e+00
		merge %38:0@1008r into %37:0@992r --> @992r
		erased:	1008r	%38:tgpr = COPY %37:tgpr
		updated: 992B	%38:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
	Success: %37 -> %38
	Result = %38 [992r,1024r:0)[1024r,1056r:1) 0@992r 1@1024r  weight:0.000000e+00
1072B	%41:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %41
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %41 [1072r,1088r:0)[1088r,1120r:1) 0@1072r 1@1088r  weight:0.000000e+00
		merge %41:0@1072r into %5:0@144r --> @144r
		interference at %41:1@1088r
	Interference!
1200B	%46:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %46
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %46 [1200r,1216r:0)[1216r,1248r:1) 0@1200r 1@1216r  weight:0.000000e+00
		merge %46:0@1200r into %5:0@144r --> @144r
		interference at %46:1@1216r
	Interference!
1296B	%49:tgpr = COPY %48:tgpr
	Considering merging to tGPR with %48 in %49
		RHS = %48 [1280r,1296r:0) 0@1280r  weight:0.000000e+00
		LHS = %49 [1296r,1312r:0)[1312r,1344r:1) 0@1296r 1@1312r  weight:0.000000e+00
		merge %49:0@1296r into %48:0@1280r --> @1280r
		erased:	1296r	%49:tgpr = COPY %48:tgpr
		updated: 1280B	%49:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
	Success: %48 -> %49
	Result = %49 [1280r,1312r:0)[1312r,1344r:1) 0@1280r 1@1312r  weight:0.000000e+00
1360B	%52:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %52
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %52 [1360r,1376r:0)[1376r,1408r:1) 0@1360r 1@1376r  weight:0.000000e+00
		merge %52:0@1360r into %5:0@144r --> @144r
		interference at %52:1@1376r
	Interference!
1456B	%55:tgpr = COPY %54:tgpr
	Considering merging to tGPR with %54 in %55
		RHS = %54 [1440r,1456r:0) 0@1440r  weight:0.000000e+00
		LHS = %55 [1456r,1472r:0)[1472r,1504r:1) 0@1456r 1@1472r  weight:0.000000e+00
		merge %55:0@1456r into %54:0@1440r --> @1440r
		erased:	1456r	%55:tgpr = COPY %54:tgpr
		updated: 1440B	%55:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
	Success: %54 -> %55
	Result = %55 [1440r,1472r:0)[1472r,1504r:1) 0@1440r 1@1472r  weight:0.000000e+00
1520B	%58:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %58
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %58 [1520r,1536r:0)[1536r,1568r:1) 0@1520r 1@1536r  weight:0.000000e+00
		merge %58:0@1520r into %5:0@144r --> @144r
		interference at %58:1@1536r
	Interference!
1616B	%61:tgpr = COPY %60:tgpr
	Considering merging to tGPR with %60 in %61
		RHS = %60 [1600r,1616r:0) 0@1600r  weight:0.000000e+00
		LHS = %61 [1616r,1632r:0)[1632r,1664r:1) 0@1616r 1@1632r  weight:0.000000e+00
		merge %61:0@1616r into %60:0@1600r --> @1600r
		erased:	1616r	%61:tgpr = COPY %60:tgpr
		updated: 1600B	%61:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
	Success: %60 -> %61
	Result = %61 [1600r,1632r:0)[1632r,1664r:1) 0@1600r 1@1632r  weight:0.000000e+00
1680B	%64:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %64
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %64 [1680r,1696r:0)[1696r,1728r:1) 0@1680r 1@1696r  weight:0.000000e+00
		merge %64:0@1680r into %5:0@144r --> @144r
		interference at %64:1@1696r
	Interference!
1776B	%67:tgpr = COPY %66:tgpr
	Considering merging to tGPR with %66 in %67
		RHS = %66 [1760r,1776r:0) 0@1760r  weight:0.000000e+00
		LHS = %67 [1776r,1792r:0)[1792r,1824r:1) 0@1776r 1@1792r  weight:0.000000e+00
		merge %67:0@1776r into %66:0@1760r --> @1760r
		erased:	1776r	%67:tgpr = COPY %66:tgpr
		updated: 1760B	%67:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
	Success: %66 -> %67
	Result = %67 [1760r,1792r:0)[1792r,1824r:1) 0@1760r 1@1792r  weight:0.000000e+00
1840B	%70:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %70
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %70 [1840r,1856r:0)[1856r,1888r:1) 0@1840r 1@1856r  weight:0.000000e+00
		merge %70:0@1840r into %5:0@144r --> @144r
		interference at %70:1@1856r
	Interference!
1936B	%73:tgpr = COPY %72:tgpr
	Considering merging to tGPR with %72 in %73
		RHS = %72 [1920r,1936r:0) 0@1920r  weight:0.000000e+00
		LHS = %73 [1936r,1952r:0)[1952r,1984r:1) 0@1936r 1@1952r  weight:0.000000e+00
		merge %73:0@1936r into %72:0@1920r --> @1920r
		erased:	1936r	%73:tgpr = COPY %72:tgpr
		updated: 1920B	%73:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
	Success: %72 -> %73
	Result = %73 [1920r,1952r:0)[1952r,1984r:1) 0@1920r 1@1952r  weight:0.000000e+00
2000B	%76:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %76
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %76 [2000r,2016r:0)[2016r,2048r:1) 0@2000r 1@2016r  weight:0.000000e+00
		merge %76:0@2000r into %5:0@144r --> @144r
		interference at %76:1@2016r
	Interference!
2096B	%79:tgpr = COPY %78:tgpr
	Considering merging to tGPR with %78 in %79
		RHS = %78 [2080r,2096r:0) 0@2080r  weight:0.000000e+00
		LHS = %79 [2096r,2112r:0)[2112r,2144r:1) 0@2096r 1@2112r  weight:0.000000e+00
		merge %79:0@2096r into %78:0@2080r --> @2080r
		erased:	2096r	%79:tgpr = COPY %78:tgpr
		updated: 2080B	%79:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
	Success: %78 -> %79
	Result = %79 [2080r,2112r:0)[2112r,2144r:1) 0@2080r 1@2112r  weight:0.000000e+00
2160B	%82:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %82
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %82 [2160r,2176r:0)[2176r,2208r:1) 0@2160r 1@2176r  weight:0.000000e+00
		merge %82:0@2160r into %5:0@144r --> @144r
		interference at %82:1@2176r
	Interference!
2256B	%85:tgpr = COPY %84:tgpr
	Considering merging to tGPR with %84 in %85
		RHS = %84 [2240r,2256r:0) 0@2240r  weight:0.000000e+00
		LHS = %85 [2256r,2272r:0)[2272r,2304r:1) 0@2256r 1@2272r  weight:0.000000e+00
		merge %85:0@2256r into %84:0@2240r --> @2240r
		erased:	2256r	%85:tgpr = COPY %84:tgpr
		updated: 2240B	%85:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
	Success: %84 -> %85
	Result = %85 [2240r,2272r:0)[2272r,2304r:1) 0@2240r 1@2272r  weight:0.000000e+00
2320B	%88:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %88
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %88 [2320r,2336r:0)[2336r,2368r:1) 0@2320r 1@2336r  weight:0.000000e+00
		merge %88:0@2320r into %5:0@144r --> @144r
		interference at %88:1@2336r
	Interference!
2448B	%93:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %93
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %93 [2448r,2464r:0)[2464r,2496r:1) 0@2448r 1@2464r  weight:0.000000e+00
		merge %93:0@2448r into %5:0@144r --> @144r
		interference at %93:1@2464r
	Interference!
2544B	%96:tgpr = COPY %95:tgpr
	Considering merging to tGPR with %95 in %96
		RHS = %95 [2528r,2544r:0) 0@2528r  weight:0.000000e+00
		LHS = %96 [2544r,2560r:0)[2560r,2592r:1) 0@2544r 1@2560r  weight:0.000000e+00
		merge %96:0@2544r into %95:0@2528r --> @2528r
		erased:	2544r	%96:tgpr = COPY %95:tgpr
		updated: 2528B	%96:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
	Success: %95 -> %96
	Result = %96 [2528r,2560r:0)[2560r,2592r:1) 0@2528r 1@2560r  weight:0.000000e+00
2608B	%99:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %99
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %99 [2608r,2624r:0)[2624r,2656r:1) 0@2608r 1@2624r  weight:0.000000e+00
		merge %99:0@2608r into %5:0@144r --> @144r
		interference at %99:1@2624r
	Interference!
2704B	%102:tgpr = COPY %101:tgpr
	Considering merging to tGPR with %101 in %102
		RHS = %101 [2688r,2704r:0) 0@2688r  weight:0.000000e+00
		LHS = %102 [2704r,2720r:0)[2720r,2752r:1) 0@2704r 1@2720r  weight:0.000000e+00
		merge %102:0@2704r into %101:0@2688r --> @2688r
		erased:	2704r	%102:tgpr = COPY %101:tgpr
		updated: 2688B	%102:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
	Success: %101 -> %102
	Result = %102 [2688r,2720r:0)[2720r,2752r:1) 0@2688r 1@2720r  weight:0.000000e+00
2768B	%105:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %105
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %105 [2768r,2784r:0)[2784r,2816r:1) 0@2768r 1@2784r  weight:0.000000e+00
		merge %105:0@2768r into %5:0@144r --> @144r
		interference at %105:1@2784r
	Interference!
2864B	%108:tgpr = COPY %107:tgpr
	Considering merging to tGPR with %107 in %108
		RHS = %107 [2848r,2864r:0) 0@2848r  weight:0.000000e+00
		LHS = %108 [2864r,2880r:0)[2880r,2912r:1) 0@2864r 1@2880r  weight:0.000000e+00
		merge %108:0@2864r into %107:0@2848r --> @2848r
		erased:	2864r	%108:tgpr = COPY %107:tgpr
		updated: 2848B	%108:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
	Success: %107 -> %108
	Result = %108 [2848r,2880r:0)[2880r,2912r:1) 0@2848r 1@2880r  weight:0.000000e+00
2928B	%111:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %111
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %111 [2928r,2944r:0)[2944r,2976r:1) 0@2928r 1@2944r  weight:0.000000e+00
		merge %111:0@2928r into %5:0@144r --> @144r
		interference at %111:1@2944r
	Interference!
3024B	%114:tgpr = COPY %113:tgpr
	Considering merging to tGPR with %113 in %114
		RHS = %113 [3008r,3024r:0) 0@3008r  weight:0.000000e+00
		LHS = %114 [3024r,3040r:0)[3040r,3072r:1) 0@3024r 1@3040r  weight:0.000000e+00
		merge %114:0@3024r into %113:0@3008r --> @3008r
		erased:	3024r	%114:tgpr = COPY %113:tgpr
		updated: 3008B	%114:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
	Success: %113 -> %114
	Result = %114 [3008r,3040r:0)[3040r,3072r:1) 0@3008r 1@3040r  weight:0.000000e+00
3088B	%117:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %117
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %117 [3088r,3104r:0)[3104r,3136r:1) 0@3088r 1@3104r  weight:0.000000e+00
		merge %117:0@3088r into %5:0@144r --> @144r
		interference at %117:1@3104r
	Interference!
3184B	%120:tgpr = COPY %119:tgpr
	Considering merging to tGPR with %119 in %120
		RHS = %119 [3168r,3184r:0) 0@3168r  weight:0.000000e+00
		LHS = %120 [3184r,3200r:0)[3200r,3232r:1) 0@3184r 1@3200r  weight:0.000000e+00
		merge %120:0@3184r into %119:0@3168r --> @3168r
		erased:	3184r	%120:tgpr = COPY %119:tgpr
		updated: 3168B	%120:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
	Success: %119 -> %120
	Result = %120 [3168r,3200r:0)[3200r,3232r:1) 0@3168r 1@3200r  weight:0.000000e+00
3248B	%123:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %123
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %123 [3248r,3264r:0)[3264r,3296r:1) 0@3248r 1@3264r  weight:0.000000e+00
		merge %123:0@3248r into %5:0@144r --> @144r
		interference at %123:1@3264r
	Interference!
3424B	%131:tgpr = COPY %128:tgpr
	Considering merging to tGPR with %128 in %131
		RHS = %128 [3376r,3424r:0) 0@3376r  weight:0.000000e+00
		LHS = %131 [3424r,3440r:0)[3440r,3552r:1) 0@3424r 1@3440r  weight:0.000000e+00
		merge %131:0@3424r into %128:0@3376r --> @3376r
		erased:	3424r	%131:tgpr = COPY %128:tgpr
		updated: 3376B	%131:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
	Success: %128 -> %131
	Result = %131 [3376r,3440r:0)[3440r,3552r:1) 0@3376r 1@3440r  weight:0.000000e+00
3456B	%132:tgpr = COPY %127:tgpr
	Considering merging to tGPR with %127 in %132
		RHS = %127 [3360r,3456r:0) 0@3360r  weight:0.000000e+00
		LHS = %132 [3456r,3472r:0)[3472r,3520r:1) 0@3456r 1@3472r  weight:0.000000e+00
		merge %132:0@3456r into %127:0@3360r --> @3360r
		erased:	3456r	%132:tgpr = COPY %127:tgpr
		updated: 3360B	%132:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
	Success: %127 -> %132
	Result = %132 [3360r,3472r:0)[3472r,3520r:1) 0@3360r 1@3472r  weight:0.000000e+00
3520B	%135:tgpr = COPY %132:tgpr
	Considering merging to tGPR with %132 in %135
		RHS = %132 [3360r,3472r:0)[3472r,3520r:1) 0@3360r 1@3472r  weight:0.000000e+00
		LHS = %135 [3520r,3536r:0)[3536r,3648r:1) 0@3520r 1@3536r  weight:0.000000e+00
		merge %135:0@3520r into %132:1@3472r --> @3472r
		erased:	3520r	%135:tgpr = COPY %132:tgpr
		updated: 3360B	%135:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
		updated: 3472B	%135:tgpr, dead $cpsr = tAND %135:tgpr(tied-def 0), %129:tgpr, 14, $noreg
	Success: %132 -> %135
	Result = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3648r:1) 0@3472r 1@3536r 2@3360r  weight:0.000000e+00
3552B	%136:tgpr = COPY %131:tgpr
	Considering merging to tGPR with %131 in %136
		RHS = %131 [3376r,3440r:0)[3440r,3552r:1) 0@3376r 1@3440r  weight:0.000000e+00
		LHS = %136 [3552r,3568r:0)[3568r,3616r:1) 0@3552r 1@3568r  weight:0.000000e+00
		merge %136:0@3552r into %131:1@3440r --> @3440r
		erased:	3552r	%136:tgpr = COPY %131:tgpr
		updated: 3376B	%136:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
		updated: 3440B	%136:tgpr, dead $cpsr = tAND %136:tgpr(tied-def 0), %130:tgpr, 14, $noreg
	Success: %131 -> %136
	Result = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3616r:1) 0@3440r 1@3568r 2@3376r  weight:0.000000e+00
3616B	%139:tgpr = COPY %136:tgpr
	Considering merging to tGPR with %139 in %136
		RHS = %139 [3616r,3632r:0)[3632r,4800r:1) 0@3616r 1@3632r  weight:0.000000e+00
		LHS = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3616r:1) 0@3440r 1@3568r 2@3376r  weight:0.000000e+00
		merge %139:0@3616r into %136:1@3568r --> @3568r
		erased:	3616r	%139:tgpr = COPY %136:tgpr
		updated: 3632B	%136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %138:tgpr, 14, $noreg
		updated: 4800B	%176:tgpr = COPY %136:tgpr
	Success: %139 -> %136
	Result = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4800r:3) 0@3440r 1@3568r 2@3376r 3@3632r  weight:0.000000e+00
3648B	%140:tgpr = COPY %135:tgpr
	Considering merging to tGPR with %140 in %135
		RHS = %140 [3648r,3664r:0)[3664r,4768r:1) 0@3648r 1@3664r  weight:0.000000e+00
		LHS = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3648r:1) 0@3472r 1@3536r 2@3360r  weight:0.000000e+00
		merge %140:0@3648r into %135:1@3536r --> @3536r
		erased:	3648r	%140:tgpr = COPY %135:tgpr
		updated: 3664B	%135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %137:tgpr, 14, $noreg
		updated: 4768B	%175:tgpr = COPY %135:tgpr
	Success: %140 -> %135
	Result = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4768r:3) 0@3472r 1@3536r 2@3360r 3@3664r  weight:0.000000e+00
3792B	$r0 = COPY %143:tgpr
	Considering merging %143 with $r0
	Can only merge into reserved registers.
3808B	$r1 = COPY %144:tgpr
	Considering merging %144 with $r1
	Can only merge into reserved registers.
3824B	$r2 = COPY %145:tgpr
	Considering merging %145 with $r2
	Can only merge into reserved registers.
3840B	$r3 = COPY %146:tgpr
	Considering merging %146 with $r3
	Can only merge into reserved registers.
3888B	%147:tgpr = COPY $r0
	Considering merging %147 with $r0
	Can only merge into reserved registers.
3904B	%148:tgpr = COPY $r1
	Considering merging %148 with $r1
	Can only merge into reserved registers.
3968B	$r0 = COPY %147:tgpr
	Considering merging %147 with $r0
	Can only merge into reserved registers.
3984B	$r1 = COPY %148:tgpr
	Considering merging %148 with $r1
	Can only merge into reserved registers.
4000B	$r2 = COPY %149:tgpr
	Considering merging %149 with $r2
	Can only merge into reserved registers.
4016B	$r3 = COPY %150:tgpr
	Considering merging %150 with $r3
	Can only merge into reserved registers.
4064B	%151:tgpr = COPY $r0
	Considering merging %151 with $r0
	Can only merge into reserved registers.
4080B	%152:tgpr = COPY $r1
	Considering merging %152 with $r1
	Can only merge into reserved registers.
4112B	%154:tgpr = COPY %141:tgpr
	Considering merging to tGPR with %141 in %154
		RHS = %141 [3680r,4112r:0) 0@3680r  weight:0.000000e+00
		LHS = %154 [4112r,4128r:0)[4128r,4432r:1) 0@4112r 1@4128r  weight:0.000000e+00
		merge %154:0@4112r into %141:0@3680r --> @3680r
		erased:	4112r	%154:tgpr = COPY %141:tgpr
		updated: 3680B	%154:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
	Success: %141 -> %154
	Result = %154 [3680r,4128r:0)[4128r,4432r:1) 0@3680r 1@4128r  weight:0.000000e+00
4224B	$r0 = COPY %155:tgpr
	Considering merging %155 with $r0
	Can only merge into reserved registers.
4240B	$r1 = COPY %156:tgpr
	Considering merging %156 with $r1
	Can only merge into reserved registers.
4256B	$r2 = COPY %157:tgpr
	Considering merging %157 with $r2
	Can only merge into reserved registers.
4272B	$r3 = COPY %158:tgpr
	Considering merging %158 with $r3
	Can only merge into reserved registers.
4320B	%159:tgpr = COPY $r0
	Considering merging %159 with $r0
	Can only merge into reserved registers.
4336B	%160:tgpr = COPY $r1
	Considering merging %160 with $r1
	Can only merge into reserved registers.
4400B	%164:tgpr = COPY %160:tgpr
	Considering merging to tGPR with %160 in %164
		RHS = %160 [4336r,4400r:0) 0@4336r  weight:0.000000e+00
		LHS = %164 [4400r,4416r:0)[4416r,4448r:1) 0@4400r 1@4416r  weight:0.000000e+00
		merge %164:0@4400r into %160:0@4336r --> @4336r
		erased:	4400r	%164:tgpr = COPY %160:tgpr
		updated: 4336B	%164:tgpr = COPY $r1
	Success: %160 -> %164
	Result = %164 [4336r,4416r:0)[4416r,4448r:1) 0@4336r 1@4416r  weight:0.000000e+00
4432B	%165:tgpr = COPY %154:tgpr
	Considering merging to tGPR with %154 in %165
		RHS = %154 [3680r,4128r:0)[4128r,4432r:1) 0@3680r 1@4128r  weight:0.000000e+00
		LHS = %165 [4432r,4448r:0)[4448r,4704r:1) 0@4432r 1@4448r  weight:0.000000e+00
		merge %165:0@4432r into %154:1@4128r --> @4128r
		erased:	4432r	%165:tgpr = COPY %154:tgpr
		updated: 3680B	%165:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
		updated: 4128B	%165:tgpr, dead $cpsr = tADC %165:tgpr(tied-def 0), %152:tgpr, 14, $noreg, implicit killed $cpsr
	Success: %154 -> %165
	Result = %165 [3680r,4128r:2)[4128r,4448r:0)[4448r,4704r:1) 0@4128r 1@4448r 2@3680r  weight:0.000000e+00
4464B	%166:tgpr = COPY %153:tgpr
	Considering merging to tGPR with %153 in %166
		RHS = %153 [4096r,4464r:0) 0@4096r  weight:0.000000e+00
		LHS = %166 [4464r,4480r:0)[4480r,4736r:1) 0@4464r 1@4480r  weight:0.000000e+00
		merge %166:0@4464r into %153:0@4096r --> @4096r
		erased:	4464r	%166:tgpr = COPY %153:tgpr
		updated: 4096B	%166:tgpr, $cpsr = tADDrr %142:tgpr, %151:tgpr, 14, $noreg
	Success: %153 -> %166
	Result = %166 [4096r,4480r:0)[4480r,4736r:1) 0@4096r 1@4480r  weight:0.000000e+00
4576B	$r0 = COPY %167:tgpr
	Considering merging %167 with $r0
	Can only merge into reserved registers.
4592B	$r1 = COPY %168:tgpr
	Considering merging %168 with $r1
	Can only merge into reserved registers.
4608B	$r2 = COPY %169:tgpr
	Considering merging %169 with $r2
	Can only merge into reserved registers.
4624B	$r3 = COPY %170:tgpr
	Considering merging %170 with $r3
	Can only merge into reserved registers.
4672B	%171:tgpr = COPY $r0
	Considering merging %171 with $r0
	Can only merge into reserved registers.
4688B	%172:tgpr = COPY $r1
	Considering merging %172 with $r1
	Can only merge into reserved registers.
4704B	%173:tgpr = COPY %165:tgpr
	Considering merging to tGPR with %173 in %165
		RHS = %173 [4704r,4720r:0)[4720r,4784r:1) 0@4704r 1@4720r  weight:0.000000e+00
		LHS = %165 [3680r,4128r:2)[4128r,4448r:0)[4448r,4704r:1) 0@4128r 1@4448r 2@3680r  weight:0.000000e+00
		merge %173:0@4704r into %165:1@4448r --> @4448r
		erased:	4704r	%173:tgpr = COPY %165:tgpr
		updated: 4720B	%165:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), %172:tgpr, 14, $noreg
		updated: 4784B	%175:tgpr, dead $cpsr = tORR %175:tgpr(tied-def 0), %165:tgpr, 14, $noreg
	Success: %173 -> %165
	Result = %165 [3680r,4128r:2)[4128r,4448r:0)[4448r,4720r:1)[4720r,4784r:3) 0@4128r 1@4448r 2@3680r 3@4720r  weight:0.000000e+00
4736B	%174:tgpr = COPY %166:tgpr
	Considering merging to tGPR with %166 in %174
		RHS = %166 [4096r,4480r:0)[4480r,4736r:1) 0@4096r 1@4480r  weight:0.000000e+00
		LHS = %174 [4736r,4752r:0)[4752r,4816r:1) 0@4736r 1@4752r  weight:0.000000e+00
		merge %174:0@4736r into %166:1@4480r --> @4480r
		erased:	4736r	%174:tgpr = COPY %166:tgpr
		updated: 4096B	%174:tgpr, $cpsr = tADDrr %142:tgpr, %151:tgpr, 14, $noreg
		updated: 4480B	%174:tgpr, dead $cpsr = tAND %174:tgpr(tied-def 0), %163:tgpr, 14, $noreg
	Success: %166 -> %174
	Result = %174 [4096r,4480r:2)[4480r,4752r:0)[4752r,4816r:1) 0@4480r 1@4752r 2@4096r  weight:0.000000e+00
4768B	%175:tgpr = COPY %135:tgpr
	Considering merging to tGPR with %175 in %135
		RHS = %175 [4768r,4784r:0)[4784r,5296r:1) 0@4768r 1@4784r  weight:0.000000e+00
		LHS = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4768r:3) 0@3472r 1@3536r 2@3360r 3@3664r  weight:0.000000e+00
		merge %175:0@4768r into %135:3@3664r --> @3664r
		erased:	4768r	%175:tgpr = COPY %135:tgpr
		updated: 4784B	%135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %165:tgpr, 14, $noreg
		updated: 5296B	%199:tgpr = COPY %135:tgpr
	Success: %175 -> %135
	Result = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5296r:4) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r  weight:0.000000e+00
4800B	%176:tgpr = COPY %136:tgpr
	Considering merging to tGPR with %176 in %136
		RHS = %176 [4800r,4816r:0)[4816r,5328r:1) 0@4800r 1@4816r  weight:0.000000e+00
		LHS = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4800r:3) 0@3440r 1@3568r 2@3376r 3@3632r  weight:0.000000e+00
		merge %176:0@4800r into %136:3@3632r --> @3632r
		erased:	4800r	%176:tgpr = COPY %136:tgpr
		updated: 4816B	%136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %174:tgpr, 14, $noreg
		updated: 5328B	%200:tgpr = COPY %136:tgpr
	Success: %176 -> %136
	Result = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5328r:4) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r  weight:0.000000e+00
4944B	%184:tgpr = COPY %179:tgpr
	Considering merging to tGPR with %179 in %184
		RHS = %179 [4864r,4944r:0) 0@4864r  weight:0.000000e+00
		LHS = %184 [4944r,4960r:0)[4960r,5024r:1) 0@4944r 1@4960r  weight:0.000000e+00
		merge %184:0@4944r into %179:0@4864r --> @4864r
		erased:	4944r	%184:tgpr = COPY %179:tgpr
		updated: 4864B	%184:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
	Success: %179 -> %184
	Result = %184 [4864r,4960r:0)[4960r,5024r:1) 0@4864r 1@4960r  weight:0.000000e+00
5024B	%188:tgpr = COPY %184:tgpr
	Considering merging to tGPR with %184 in %188
		RHS = %184 [4864r,4960r:0)[4960r,5024r:1) 0@4864r 1@4960r  weight:0.000000e+00
		LHS = %188 [5024r,5040r:0)[5040r,5168r:1) 0@5024r 1@5040r  weight:0.000000e+00
		merge %188:0@5024r into %184:1@4960r --> @4960r
		erased:	5024r	%188:tgpr = COPY %184:tgpr
		updated: 4864B	%188:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
		updated: 4960B	%188:tgpr, dead $cpsr = tSBC %188:tgpr(tied-def 0), %181:tgpr, 14, $noreg, implicit killed $cpsr
	Success: %184 -> %188
	Result = %188 [4864r,4960r:2)[4960r,5040r:0)[5040r,5168r:1) 0@4960r 1@5040r 2@4864r  weight:0.000000e+00
5136B	%194:tgpr = COPY %189:tgpr
	Considering merging to tGPR with %189 in %194
		RHS = %189 [5056r,5136r:0) 0@5056r  weight:0.000000e+00
		LHS = %194 [5136r,5152r:0)[5152r,5184r:1) 0@5136r 1@5152r  weight:0.000000e+00
		merge %194:0@5136r into %189:0@5056r --> @5056r
		erased:	5136r	%194:tgpr = COPY %189:tgpr
		updated: 5056B	%194:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
	Success: %189 -> %194
	Result = %194 [5056r,5152r:0)[5152r,5184r:1) 0@5056r 1@5152r  weight:0.000000e+00
5168B	%195:tgpr = COPY %188:tgpr
	Considering merging to tGPR with %195 in %188
		RHS = %195 [5168r,5184r:0)[5184r,5280r:1) 0@5168r 1@5184r  weight:0.000000e+00
		LHS = %188 [4864r,4960r:2)[4960r,5040r:0)[5040r,5168r:1) 0@4960r 1@5040r 2@4864r  weight:0.000000e+00
		merge %195:0@5168r into %188:1@5040r --> @5040r
		erased:	5168r	%195:tgpr = COPY %188:tgpr
		updated: 5184B	%188:tgpr, dead $cpsr = tAND %188:tgpr(tied-def 0), %194:tgpr, 14, $noreg
		updated: 5280B	%198:tgpr, dead $cpsr = tEOR %198:tgpr(tied-def 0), %188:tgpr, 14, $noreg
	Success: %195 -> %188
	Result = %188 [4864r,4960r:2)[4960r,5040r:0)[5040r,5184r:1)[5184r,5280r:3) 0@4960r 1@5040r 2@4864r 3@5184r  weight:0.000000e+00
5200B	%196:tgpr = COPY %187:tgpr
	Considering merging to tGPR with %187 in %196
		RHS = %187 [5008r,5200r:0) 0@5008r  weight:0.000000e+00
		LHS = %196 [5200r,5216r:0)[5216r,5248r:1) 0@5200r 1@5216r  weight:0.000000e+00
		merge %196:0@5200r into %187:0@5008r --> @5008r
		erased:	5200r	%196:tgpr = COPY %187:tgpr
		updated: 5008B	%196:tgpr, $cpsr = tSUBrr %183:tgpr, %186:tgpr, 14, $noreg
	Success: %187 -> %196
	Result = %196 [5008r,5216r:0)[5216r,5248r:1) 0@5008r 1@5216r  weight:0.000000e+00
5232B	%197:tgpr = COPY %178:tgpr
	Considering merging to tGPR with %178 in %197
		RHS = %178 [4848r,5232r:0) 0@4848r  weight:0.000000e+00
		LHS = %197 [5232r,5248r:0)[5248r,5344r:1) 0@5232r 1@5248r  weight:0.000000e+00
		merge %197:0@5232r into %178:0@4848r --> @4848r
		erased:	5232r	%197:tgpr = COPY %178:tgpr
		updated: 4848B	%197:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
	Success: %178 -> %197
	Result = %197 [4848r,5248r:0)[5248r,5344r:1) 0@4848r 1@5248r  weight:0.000000e+00
5264B	%198:tgpr = COPY %177:tgpr
	Considering merging to tGPR with %177 in %198
		RHS = %177 [4832r,5264r:0) 0@4832r  weight:0.000000e+00
		LHS = %198 [5264r,5280r:0)[5280r,5312r:1) 0@5264r 1@5280r  weight:0.000000e+00
		merge %198:0@5264r into %177:0@4832r --> @4832r
		erased:	5264r	%198:tgpr = COPY %177:tgpr
		updated: 4832B	%198:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
	Success: %177 -> %198
	Result = %198 [4832r,5280r:0)[5280r,5312r:1) 0@4832r 1@5280r  weight:0.000000e+00
5296B	%199:tgpr = COPY %135:tgpr
	Considering merging to tGPR with %199 in %135
		RHS = %199 [5296r,5312r:0)[5312r,5600r:1) 0@5296r 1@5312r  weight:0.000000e+00
		LHS = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5296r:4) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r  weight:0.000000e+00
		merge %199:0@5296r into %135:4@4784r --> @4784r
		erased:	5296r	%199:tgpr = COPY %135:tgpr
		updated: 5312B	%135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %198:tgpr, 14, $noreg
		updated: 5600B	%209:tgpr = COPY %135:tgpr
	Success: %199 -> %135
	Result = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5600r:5) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r  weight:0.000000e+00
5328B	%200:tgpr = COPY %136:tgpr
	Considering merging to tGPR with %200 in %136
		RHS = %200 [5328r,5344r:0)[5344r,5632r:1) 0@5328r 1@5344r  weight:0.000000e+00
		LHS = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5328r:4) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r  weight:0.000000e+00
		merge %200:0@5328r into %136:4@4816r --> @4816r
		erased:	5328r	%200:tgpr = COPY %136:tgpr
		updated: 5344B	%136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %197:tgpr, 14, $noreg
		updated: 5632B	%210:tgpr = COPY %136:tgpr
	Success: %200 -> %136
	Result = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5344r:4)[5344r,5632r:5) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r 5@5344r  weight:0.000000e+00
5472B	$r0 = COPY %201:tgpr
	Considering merging %201 with $r0
	Can only merge into reserved registers.
5488B	$r1 = COPY %202:tgpr
	Considering merging %202 with $r1
	Can only merge into reserved registers.
5504B	$r2 = COPY %205:tgpr
	Considering merging %205 with $r2
	Can only merge into reserved registers.
5520B	$r3 = COPY %206:tgpr
	Considering merging %206 with $r3
	Can only merge into reserved registers.
5568B	%207:tgpr = COPY $r0
	Considering merging %207 with $r0
	Can only merge into reserved registers.
5584B	%208:tgpr = COPY $r1
	Considering merging %208 with $r1
	Can only merge into reserved registers.
5600B	%209:tgpr = COPY %135:tgpr
	Considering merging to tGPR with %209 in %135
		RHS = %209 [5600r,5616r:0)[5616r,5712r:1) 0@5600r 1@5616r  weight:0.000000e+00
		LHS = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5600r:5) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r  weight:0.000000e+00
		merge %209:0@5600r into %135:5@5312r --> @5312r
		erased:	5600r	%209:tgpr = COPY %135:tgpr
		updated: 5616B	%135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %208:tgpr, 14, $noreg
		updated: 5712B	$r3 = COPY %135:tgpr
	Success: %209 -> %135
	Result = %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5616r:5)[5616r,5712r:6) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r 6@5616r  weight:0.000000e+00
5632B	%210:tgpr = COPY %136:tgpr
	Considering merging to tGPR with %210 in %136
		RHS = %210 [5632r,5648r:0)[5648r,5696r:1) 0@5632r 1@5648r  weight:0.000000e+00
		LHS = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5344r:4)[5344r,5632r:5) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r 5@5344r  weight:0.000000e+00
		merge %210:0@5632r into %136:5@5344r --> @5344r
		erased:	5632r	%210:tgpr = COPY %136:tgpr
		updated: 5648B	%136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %207:tgpr, 14, $noreg
		updated: 5696B	$r2 = COPY %136:tgpr
	Success: %210 -> %136
	Result = %136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5344r:4)[5344r,5648r:5)[5648r,5696r:6) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r 5@5344r 6@5648r  weight:0.000000e+00
5680B	$r0 = COPY %126:tgpr
	Considering merging %126 with $r0
	Can only merge into reserved registers.
5696B	$r2 = COPY %136:tgpr
	Considering merging %136 with $r2
	Can only merge into reserved registers.
5712B	$r3 = COPY %135:tgpr
	Considering merging %135 with $r3
	Can only merge into reserved registers.
5760B	%212:tgpr = COPY $r0
	Considering merging %212 with $r0
	Can only merge into reserved registers.
5840B	%216:tgpr = COPY %213:tgpr
	Considering merging to tGPR with %213 in %216
		RHS = %213 [5792r,5840r:0) 0@5792r  weight:0.000000e+00
		LHS = %216 [5840r,5856r:0)[5856r,5968r:1) 0@5840r 1@5856r  weight:0.000000e+00
		merge %216:0@5840r into %213:0@5792r --> @5792r
		erased:	5840r	%216:tgpr = COPY %213:tgpr
		updated: 5792B	%216:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
	Success: %213 -> %216
	Result = %216 [5792r,5856r:0)[5856r,5968r:1) 0@5792r 1@5856r  weight:0.000000e+00
5936B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
5952B	$r2 = COPY %215:tgpr
	Considering merging %215 with $r2
	Can only merge into reserved registers.
5968B	$r3 = COPY %216:tgpr
	Considering merging %216 with $r3
	Can only merge into reserved registers.
6016B	dead %218:tgpr = COPY $r0
	Considering merging %218 with $r0
	Can only merge into reserved registers.
6080B	%222:tgpr = COPY %219:tgpr
	Considering merging to tGPR with %219 in %222
		RHS = %219 [6032r,6080r:0) 0@6032r  weight:0.000000e+00
		LHS = %222 [6080r,6096r:0)[6096r,6192r:1) 0@6080r 1@6096r  weight:0.000000e+00
		merge %222:0@6080r into %219:0@6032r --> @6032r
		erased:	6080r	%222:tgpr = COPY %219:tgpr
		updated: 6032B	%222:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
	Success: %219 -> %222
	Result = %222 [6032r,6096r:0)[6096r,6192r:1) 0@6032r 1@6096r  weight:0.000000e+00
6160B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
6176B	$r2 = COPY %221:tgpr
	Considering merging %221 with $r2
	Can only merge into reserved registers.
6192B	$r3 = COPY %222:tgpr
	Considering merging %222 with $r3
	Can only merge into reserved registers.
6240B	dead %223:tgpr = COPY $r0
	Considering merging %223 with $r0
	Can only merge into reserved registers.
6304B	%227:tgpr = COPY %224:tgpr
	Considering merging to tGPR with %224 in %227
		RHS = %224 [6256r,6304r:0) 0@6256r  weight:0.000000e+00
		LHS = %227 [6304r,6320r:0)[6320r,6416r:1) 0@6304r 1@6320r  weight:0.000000e+00
		merge %227:0@6304r into %224:0@6256r --> @6256r
		erased:	6304r	%227:tgpr = COPY %224:tgpr
		updated: 6256B	%227:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
	Success: %224 -> %227
	Result = %227 [6256r,6320r:0)[6320r,6416r:1) 0@6256r 1@6320r  weight:0.000000e+00
6384B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
6400B	$r2 = COPY %226:tgpr
	Considering merging %226 with $r2
	Can only merge into reserved registers.
6416B	$r3 = COPY %227:tgpr
	Considering merging %227 with $r3
	Can only merge into reserved registers.
6464B	dead %228:tgpr = COPY $r0
	Considering merging %228 with $r0
	Can only merge into reserved registers.
6528B	%232:tgpr = COPY %229:tgpr
	Considering merging to tGPR with %229 in %232
		RHS = %229 [6480r,6528r:0) 0@6480r  weight:0.000000e+00
		LHS = %232 [6528r,6544r:0)[6544r,6640r:1) 0@6528r 1@6544r  weight:0.000000e+00
		merge %232:0@6528r into %229:0@6480r --> @6480r
		erased:	6528r	%232:tgpr = COPY %229:tgpr
		updated: 6480B	%232:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
	Success: %229 -> %232
	Result = %232 [6480r,6544r:0)[6544r,6640r:1) 0@6480r 1@6544r  weight:0.000000e+00
6608B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
6624B	$r2 = COPY %231:tgpr
	Considering merging %231 with $r2
	Can only merge into reserved registers.
6640B	$r3 = COPY %232:tgpr
	Considering merging %232 with $r3
	Can only merge into reserved registers.
6688B	dead %233:tgpr = COPY $r0
	Considering merging %233 with $r0
	Can only merge into reserved registers.
6752B	%237:tgpr = COPY %234:tgpr
	Considering merging to tGPR with %234 in %237
		RHS = %234 [6704r,6752r:0) 0@6704r  weight:0.000000e+00
		LHS = %237 [6752r,6768r:0)[6768r,6864r:1) 0@6752r 1@6768r  weight:0.000000e+00
		merge %237:0@6752r into %234:0@6704r --> @6704r
		erased:	6752r	%237:tgpr = COPY %234:tgpr
		updated: 6704B	%237:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
	Success: %234 -> %237
	Result = %237 [6704r,6768r:0)[6768r,6864r:1) 0@6704r 1@6768r  weight:0.000000e+00
6832B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
6848B	$r2 = COPY %236:tgpr
	Considering merging %236 with $r2
	Can only merge into reserved registers.
6864B	$r3 = COPY %237:tgpr
	Considering merging %237 with $r3
	Can only merge into reserved registers.
6912B	dead %238:tgpr = COPY $r0
	Considering merging %238 with $r0
	Can only merge into reserved registers.
6976B	%242:tgpr = COPY %239:tgpr
	Considering merging to tGPR with %239 in %242
		RHS = %239 [6928r,6976r:0) 0@6928r  weight:0.000000e+00
		LHS = %242 [6976r,6992r:0)[6992r,7088r:1) 0@6976r 1@6992r  weight:0.000000e+00
		merge %242:0@6976r into %239:0@6928r --> @6928r
		erased:	6976r	%242:tgpr = COPY %239:tgpr
		updated: 6928B	%242:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
	Success: %239 -> %242
	Result = %242 [6928r,6992r:0)[6992r,7088r:1) 0@6928r 1@6992r  weight:0.000000e+00
7056B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
7072B	$r2 = COPY %241:tgpr
	Considering merging %241 with $r2
	Can only merge into reserved registers.
7088B	$r3 = COPY %242:tgpr
	Considering merging %242 with $r3
	Can only merge into reserved registers.
7136B	dead %243:tgpr = COPY $r0
	Considering merging %243 with $r0
	Can only merge into reserved registers.
7200B	%247:tgpr = COPY %244:tgpr
	Considering merging to tGPR with %244 in %247
		RHS = %244 [7152r,7200r:0) 0@7152r  weight:0.000000e+00
		LHS = %247 [7200r,7216r:0)[7216r,7312r:1) 0@7200r 1@7216r  weight:0.000000e+00
		merge %247:0@7200r into %244:0@7152r --> @7152r
		erased:	7200r	%247:tgpr = COPY %244:tgpr
		updated: 7152B	%247:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
	Success: %244 -> %247
	Result = %247 [7152r,7216r:0)[7216r,7312r:1) 0@7152r 1@7216r  weight:0.000000e+00
7280B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
7296B	$r2 = COPY %246:tgpr
	Considering merging %246 with $r2
	Can only merge into reserved registers.
7312B	$r3 = COPY %247:tgpr
	Considering merging %247 with $r3
	Can only merge into reserved registers.
7360B	dead %248:tgpr = COPY $r0
	Considering merging %248 with $r0
	Can only merge into reserved registers.
7424B	%252:tgpr = COPY %249:tgpr
	Considering merging to tGPR with %249 in %252
		RHS = %249 [7376r,7424r:0) 0@7376r  weight:0.000000e+00
		LHS = %252 [7424r,7440r:0)[7440r,7536r:1) 0@7424r 1@7440r  weight:0.000000e+00
		merge %252:0@7424r into %249:0@7376r --> @7376r
		erased:	7424r	%252:tgpr = COPY %249:tgpr
		updated: 7376B	%252:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
	Success: %249 -> %252
	Result = %252 [7376r,7440r:0)[7440r,7536r:1) 0@7376r 1@7440r  weight:0.000000e+00
7504B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
7520B	$r2 = COPY %251:tgpr
	Considering merging %251 with $r2
	Can only merge into reserved registers.
7536B	$r3 = COPY %252:tgpr
	Considering merging %252 with $r3
	Can only merge into reserved registers.
7584B	dead %253:tgpr = COPY $r0
	Considering merging %253 with $r0
	Can only merge into reserved registers.
7648B	%257:tgpr = COPY %254:tgpr
	Considering merging to tGPR with %254 in %257
		RHS = %254 [7600r,7648r:0) 0@7600r  weight:0.000000e+00
		LHS = %257 [7648r,7664r:0)[7664r,7760r:1) 0@7648r 1@7664r  weight:0.000000e+00
		merge %257:0@7648r into %254:0@7600r --> @7600r
		erased:	7648r	%257:tgpr = COPY %254:tgpr
		updated: 7600B	%257:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
	Success: %254 -> %257
	Result = %257 [7600r,7664r:0)[7664r,7760r:1) 0@7600r 1@7664r  weight:0.000000e+00
7728B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
7744B	$r2 = COPY %256:tgpr
	Considering merging %256 with $r2
	Can only merge into reserved registers.
7760B	$r3 = COPY %257:tgpr
	Considering merging %257 with $r3
	Can only merge into reserved registers.
7808B	dead %258:tgpr = COPY $r0
	Considering merging %258 with $r0
	Can only merge into reserved registers.
7872B	%262:tgpr = COPY %259:tgpr
	Considering merging to tGPR with %259 in %262
		RHS = %259 [7824r,7872r:0) 0@7824r  weight:0.000000e+00
		LHS = %262 [7872r,7888r:0)[7888r,7984r:1) 0@7872r 1@7888r  weight:0.000000e+00
		merge %262:0@7872r into %259:0@7824r --> @7824r
		erased:	7872r	%262:tgpr = COPY %259:tgpr
		updated: 7824B	%262:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
	Success: %259 -> %262
	Result = %262 [7824r,7888r:0)[7888r,7984r:1) 0@7824r 1@7888r  weight:0.000000e+00
7952B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
7968B	$r2 = COPY %261:tgpr
	Considering merging %261 with $r2
	Can only merge into reserved registers.
7984B	$r3 = COPY %262:tgpr
	Considering merging %262 with $r3
	Can only merge into reserved registers.
8032B	dead %263:tgpr = COPY $r0
	Considering merging %263 with $r0
	Can only merge into reserved registers.
8096B	%267:tgpr = COPY %264:tgpr
	Considering merging to tGPR with %264 in %267
		RHS = %264 [8048r,8096r:0) 0@8048r  weight:0.000000e+00
		LHS = %267 [8096r,8112r:0)[8112r,8208r:1) 0@8096r 1@8112r  weight:0.000000e+00
		merge %267:0@8096r into %264:0@8048r --> @8048r
		erased:	8096r	%267:tgpr = COPY %264:tgpr
		updated: 8048B	%267:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
	Success: %264 -> %267
	Result = %267 [8048r,8112r:0)[8112r,8208r:1) 0@8048r 1@8112r  weight:0.000000e+00
8176B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
8192B	$r2 = COPY %266:tgpr
	Considering merging %266 with $r2
	Can only merge into reserved registers.
8208B	$r3 = COPY %267:tgpr
	Considering merging %267 with $r3
	Can only merge into reserved registers.
8256B	dead %268:tgpr = COPY $r0
	Considering merging %268 with $r0
	Can only merge into reserved registers.
8320B	%272:tgpr = COPY %269:tgpr
	Considering merging to tGPR with %269 in %272
		RHS = %269 [8272r,8320r:0) 0@8272r  weight:0.000000e+00
		LHS = %272 [8320r,8336r:0)[8336r,8432r:1) 0@8320r 1@8336r  weight:0.000000e+00
		merge %272:0@8320r into %269:0@8272r --> @8272r
		erased:	8320r	%272:tgpr = COPY %269:tgpr
		updated: 8272B	%272:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
	Success: %269 -> %272
	Result = %272 [8272r,8336r:0)[8336r,8432r:1) 0@8272r 1@8336r  weight:0.000000e+00
8400B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
8416B	$r2 = COPY %271:tgpr
	Considering merging %271 with $r2
	Can only merge into reserved registers.
8432B	$r3 = COPY %272:tgpr
	Considering merging %272 with $r3
	Can only merge into reserved registers.
8480B	dead %273:tgpr = COPY $r0
	Considering merging %273 with $r0
	Can only merge into reserved registers.
8544B	%277:tgpr = COPY %274:tgpr
	Considering merging to tGPR with %274 in %277
		RHS = %274 [8496r,8544r:0) 0@8496r  weight:0.000000e+00
		LHS = %277 [8544r,8560r:0)[8560r,8656r:1) 0@8544r 1@8560r  weight:0.000000e+00
		merge %277:0@8544r into %274:0@8496r --> @8496r
		erased:	8544r	%277:tgpr = COPY %274:tgpr
		updated: 8496B	%277:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
	Success: %274 -> %277
	Result = %277 [8496r,8560r:0)[8560r,8656r:1) 0@8496r 1@8560r  weight:0.000000e+00
8624B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
8640B	$r2 = COPY %276:tgpr
	Considering merging %276 with $r2
	Can only merge into reserved registers.
8656B	$r3 = COPY %277:tgpr
	Considering merging %277 with $r3
	Can only merge into reserved registers.
8704B	dead %278:tgpr = COPY $r0
	Considering merging %278 with $r0
	Can only merge into reserved registers.
8768B	%282:tgpr = COPY %279:tgpr
	Considering merging to tGPR with %279 in %282
		RHS = %279 [8720r,8768r:0) 0@8720r  weight:0.000000e+00
		LHS = %282 [8768r,8784r:0)[8784r,8880r:1) 0@8768r 1@8784r  weight:0.000000e+00
		merge %282:0@8768r into %279:0@8720r --> @8720r
		erased:	8768r	%282:tgpr = COPY %279:tgpr
		updated: 8720B	%282:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
	Success: %279 -> %282
	Result = %282 [8720r,8784r:0)[8784r,8880r:1) 0@8720r 1@8784r  weight:0.000000e+00
8848B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
8864B	$r2 = COPY %281:tgpr
	Considering merging %281 with $r2
	Can only merge into reserved registers.
8880B	$r3 = COPY %282:tgpr
	Considering merging %282 with $r3
	Can only merge into reserved registers.
8928B	dead %283:tgpr = COPY $r0
	Considering merging %283 with $r0
	Can only merge into reserved registers.
8992B	%287:tgpr = COPY %284:tgpr
	Considering merging to tGPR with %284 in %287
		RHS = %284 [8944r,8992r:0) 0@8944r  weight:0.000000e+00
		LHS = %287 [8992r,9008r:0)[9008r,9104r:1) 0@8992r 1@9008r  weight:0.000000e+00
		merge %287:0@8992r into %284:0@8944r --> @8944r
		erased:	8992r	%287:tgpr = COPY %284:tgpr
		updated: 8944B	%287:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
	Success: %284 -> %287
	Result = %287 [8944r,9008r:0)[9008r,9104r:1) 0@8944r 1@9008r  weight:0.000000e+00
9072B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
9088B	$r2 = COPY %286:tgpr
	Considering merging %286 with $r2
	Can only merge into reserved registers.
9104B	$r3 = COPY %287:tgpr
	Considering merging %287 with $r3
	Can only merge into reserved registers.
9152B	dead %288:tgpr = COPY $r0
	Considering merging %288 with $r0
	Can only merge into reserved registers.
9216B	%292:tgpr = COPY %289:tgpr
	Considering merging to tGPR with %289 in %292
		RHS = %289 [9168r,9216r:0) 0@9168r  weight:0.000000e+00
		LHS = %292 [9216r,9232r:0)[9232r,9328r:1) 0@9216r 1@9232r  weight:0.000000e+00
		merge %292:0@9216r into %289:0@9168r --> @9168r
		erased:	9216r	%292:tgpr = COPY %289:tgpr
		updated: 9168B	%292:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
	Success: %289 -> %292
	Result = %292 [9168r,9232r:0)[9232r,9328r:1) 0@9168r 1@9232r  weight:0.000000e+00
9296B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
9312B	$r2 = COPY %291:tgpr
	Considering merging %291 with $r2
	Can only merge into reserved registers.
9328B	$r3 = COPY %292:tgpr
	Considering merging %292 with $r3
	Can only merge into reserved registers.
9376B	dead %293:tgpr = COPY $r0
	Considering merging %293 with $r0
	Can only merge into reserved registers.
9440B	%297:tgpr = COPY %294:tgpr
	Considering merging to tGPR with %294 in %297
		RHS = %294 [9392r,9440r:0) 0@9392r  weight:0.000000e+00
		LHS = %297 [9440r,9456r:0)[9456r,9552r:1) 0@9440r 1@9456r  weight:0.000000e+00
		merge %297:0@9440r into %294:0@9392r --> @9392r
		erased:	9440r	%297:tgpr = COPY %294:tgpr
		updated: 9392B	%297:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
	Success: %294 -> %297
	Result = %297 [9392r,9456r:0)[9456r,9552r:1) 0@9392r 1@9456r  weight:0.000000e+00
9520B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
9536B	$r2 = COPY %296:tgpr
	Considering merging %296 with $r2
	Can only merge into reserved registers.
9552B	$r3 = COPY %297:tgpr
	Considering merging %297 with $r3
	Can only merge into reserved registers.
9600B	dead %298:tgpr = COPY $r0
	Considering merging %298 with $r0
	Can only merge into reserved registers.
9664B	%302:tgpr = COPY %299:tgpr
	Considering merging to tGPR with %299 in %302
		RHS = %299 [9616r,9664r:0) 0@9616r  weight:0.000000e+00
		LHS = %302 [9664r,9680r:0)[9680r,9776r:1) 0@9664r 1@9680r  weight:0.000000e+00
		merge %302:0@9664r into %299:0@9616r --> @9616r
		erased:	9664r	%302:tgpr = COPY %299:tgpr
		updated: 9616B	%302:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
	Success: %299 -> %302
	Result = %302 [9616r,9680r:0)[9680r,9776r:1) 0@9616r 1@9680r  weight:0.000000e+00
9744B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
9760B	$r2 = COPY %301:tgpr
	Considering merging %301 with $r2
	Can only merge into reserved registers.
9776B	$r3 = COPY %302:tgpr
	Considering merging %302 with $r3
	Can only merge into reserved registers.
9824B	dead %303:tgpr = COPY $r0
	Considering merging %303 with $r0
	Can only merge into reserved registers.
9888B	%307:tgpr = COPY %304:tgpr
	Considering merging to tGPR with %304 in %307
		RHS = %304 [9840r,9888r:0) 0@9840r  weight:0.000000e+00
		LHS = %307 [9888r,9904r:0)[9904r,10000r:1) 0@9888r 1@9904r  weight:0.000000e+00
		merge %307:0@9888r into %304:0@9840r --> @9840r
		erased:	9888r	%307:tgpr = COPY %304:tgpr
		updated: 9840B	%307:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
	Success: %304 -> %307
	Result = %307 [9840r,9904r:0)[9904r,10000r:1) 0@9840r 1@9904r  weight:0.000000e+00
9968B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
9984B	$r2 = COPY %306:tgpr
	Considering merging %306 with $r2
	Can only merge into reserved registers.
10000B	$r3 = COPY %307:tgpr
	Considering merging %307 with $r3
	Can only merge into reserved registers.
10048B	dead %308:tgpr = COPY $r0
	Considering merging %308 with $r0
	Can only merge into reserved registers.
10112B	%312:tgpr = COPY %309:tgpr
	Considering merging to tGPR with %309 in %312
		RHS = %309 [10064r,10112r:0) 0@10064r  weight:0.000000e+00
		LHS = %312 [10112r,10128r:0)[10128r,10224r:1) 0@10112r 1@10128r  weight:0.000000e+00
		merge %312:0@10112r into %309:0@10064r --> @10064r
		erased:	10112r	%312:tgpr = COPY %309:tgpr
		updated: 10064B	%312:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
	Success: %309 -> %312
	Result = %312 [10064r,10128r:0)[10128r,10224r:1) 0@10064r 1@10128r  weight:0.000000e+00
10192B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
10208B	$r2 = COPY %311:tgpr
	Considering merging %311 with $r2
	Can only merge into reserved registers.
10224B	$r3 = COPY %312:tgpr
	Considering merging %312 with $r3
	Can only merge into reserved registers.
10272B	dead %313:tgpr = COPY $r0
	Considering merging %313 with $r0
	Can only merge into reserved registers.
10336B	%317:tgpr = COPY %314:tgpr
	Considering merging to tGPR with %314 in %317
		RHS = %314 [10288r,10336r:0) 0@10288r  weight:0.000000e+00
		LHS = %317 [10336r,10352r:0)[10352r,10448r:1) 0@10336r 1@10352r  weight:0.000000e+00
		merge %317:0@10336r into %314:0@10288r --> @10288r
		erased:	10336r	%317:tgpr = COPY %314:tgpr
		updated: 10288B	%317:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
	Success: %314 -> %317
	Result = %317 [10288r,10352r:0)[10352r,10448r:1) 0@10288r 1@10352r  weight:0.000000e+00
10416B	$r0 = COPY %217:tgpr
	Considering merging %217 with $r0
	Can only merge into reserved registers.
10432B	$r2 = COPY %316:tgpr
	Considering merging %316 with $r2
	Can only merge into reserved registers.
10448B	$r3 = COPY %317:tgpr
	Considering merging %317 with $r3
	Can only merge into reserved registers.
10496B	dead %318:tgpr = COPY $r0
	Considering merging %318 with $r0
	Can only merge into reserved registers.
10528B	$r0 = COPY %319:tgpr
	Considering merging %319 with $r0
	Can only merge into reserved registers.
176B	%7:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %7
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %7 [176r,192r:0)[192r,224r:1) 0@176r 1@192r  weight:0.000000e+00
		merge %7:0@176r into %5:0@144r --> @144r
		interference at %7:1@192r
	Interference!
304B	%12:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %12
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %12 [304r,320r:0)[320r,352r:1) 0@304r 1@320r  weight:0.000000e+00
		merge %12:0@304r into %5:0@144r --> @144r
		interference at %12:1@320r
	Interference!
464B	%18:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %18
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %18 [464r,480r:0)[480r,512r:1) 0@464r 1@480r  weight:0.000000e+00
		merge %18:0@464r into %5:0@144r --> @144r
		interference at %18:1@480r
	Interference!
592B	%23:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %23
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %23 [592r,608r:0)[608r,640r:1) 0@592r 1@608r  weight:0.000000e+00
		merge %23:0@592r into %5:0@144r --> @144r
		interference at %23:1@608r
	Interference!
752B	%29:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %29
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %29 [752r,768r:0)[768r,800r:1) 0@752r 1@768r  weight:0.000000e+00
		merge %29:0@752r into %5:0@144r --> @144r
		interference at %29:1@768r
	Interference!
912B	%35:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %35
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %35 [912r,928r:0)[928r,960r:1) 0@912r 1@928r  weight:0.000000e+00
		merge %35:0@912r into %5:0@144r --> @144r
		interference at %35:1@928r
	Interference!
1072B	%41:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %41
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %41 [1072r,1088r:0)[1088r,1120r:1) 0@1072r 1@1088r  weight:0.000000e+00
		merge %41:0@1072r into %5:0@144r --> @144r
		interference at %41:1@1088r
	Interference!
1200B	%46:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %46
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %46 [1200r,1216r:0)[1216r,1248r:1) 0@1200r 1@1216r  weight:0.000000e+00
		merge %46:0@1200r into %5:0@144r --> @144r
		interference at %46:1@1216r
	Interference!
1360B	%52:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %52
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %52 [1360r,1376r:0)[1376r,1408r:1) 0@1360r 1@1376r  weight:0.000000e+00
		merge %52:0@1360r into %5:0@144r --> @144r
		interference at %52:1@1376r
	Interference!
1520B	%58:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %58
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %58 [1520r,1536r:0)[1536r,1568r:1) 0@1520r 1@1536r  weight:0.000000e+00
		merge %58:0@1520r into %5:0@144r --> @144r
		interference at %58:1@1536r
	Interference!
1680B	%64:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %64
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %64 [1680r,1696r:0)[1696r,1728r:1) 0@1680r 1@1696r  weight:0.000000e+00
		merge %64:0@1680r into %5:0@144r --> @144r
		interference at %64:1@1696r
	Interference!
1840B	%70:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %70
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %70 [1840r,1856r:0)[1856r,1888r:1) 0@1840r 1@1856r  weight:0.000000e+00
		merge %70:0@1840r into %5:0@144r --> @144r
		interference at %70:1@1856r
	Interference!
2000B	%76:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %76
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %76 [2000r,2016r:0)[2016r,2048r:1) 0@2000r 1@2016r  weight:0.000000e+00
		merge %76:0@2000r into %5:0@144r --> @144r
		interference at %76:1@2016r
	Interference!
2160B	%82:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %82
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %82 [2160r,2176r:0)[2176r,2208r:1) 0@2160r 1@2176r  weight:0.000000e+00
		merge %82:0@2160r into %5:0@144r --> @144r
		interference at %82:1@2176r
	Interference!
2320B	%88:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %88
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %88 [2320r,2336r:0)[2336r,2368r:1) 0@2320r 1@2336r  weight:0.000000e+00
		merge %88:0@2320r into %5:0@144r --> @144r
		interference at %88:1@2336r
	Interference!
2448B	%93:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %93
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %93 [2448r,2464r:0)[2464r,2496r:1) 0@2448r 1@2464r  weight:0.000000e+00
		merge %93:0@2448r into %5:0@144r --> @144r
		interference at %93:1@2464r
	Interference!
2608B	%99:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %99
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %99 [2608r,2624r:0)[2624r,2656r:1) 0@2608r 1@2624r  weight:0.000000e+00
		merge %99:0@2608r into %5:0@144r --> @144r
		interference at %99:1@2624r
	Interference!
2768B	%105:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %105
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %105 [2768r,2784r:0)[2784r,2816r:1) 0@2768r 1@2784r  weight:0.000000e+00
		merge %105:0@2768r into %5:0@144r --> @144r
		interference at %105:1@2784r
	Interference!
2928B	%111:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %111
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %111 [2928r,2944r:0)[2944r,2976r:1) 0@2928r 1@2944r  weight:0.000000e+00
		merge %111:0@2928r into %5:0@144r --> @144r
		interference at %111:1@2944r
	Interference!
3088B	%117:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %117
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %117 [3088r,3104r:0)[3104r,3136r:1) 0@3088r 1@3104r  weight:0.000000e+00
		merge %117:0@3088r into %5:0@144r --> @144r
		interference at %117:1@3104r
	Interference!
3248B	%123:tgpr = COPY %5:tgpr
	Considering merging to tGPR with %5 in %123
		RHS = %5 [144r,10352r:0) 0@144r  weight:0.000000e+00
		LHS = %123 [3248r,3264r:0)[3264r,3296r:1) 0@3248r 1@3264r  weight:0.000000e+00
		merge %123:0@3248r into %5:0@144r --> @144r
		interference at %123:1@3264r
	Interference!
3968B	$r0 = COPY %147:tgpr
	Considering merging %147 with $r0
	Can only merge into reserved registers.
3984B	$r1 = COPY %148:tgpr
	Considering merging %148 with $r1
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R0 [0B,48r:0)[3792r,3856r:55)[3856r,3888r:54)[3968r,4032r:53)[4032r,4064r:52)[4224r,4288r:51)[4288r,4320r:50)[4576r,4640r:49)[4640r,4672r:48)[5472r,5536r:47)[5536r,5568r:46)[5680r,5728r:45)[5728r,5760r:44)[5936r,5984r:43)[5984r,6016r:42)[6160r,6208r:41)[6208r,6240r:40)[6384r,6432r:39)[6432r,6464r:38)[6608r,6656r:37)[6656r,6688r:36)[6832r,6880r:35)[6880r,6912r:34)[7056r,7104r:33)[7104r,7136r:32)[7280r,7328r:31)[7328r,7360r:30)[7504r,7552r:29)[7552r,7584r:28)[7728r,7776r:27)[7776r,7808r:26)[7952r,8000r:25)[8000r,8032r:24)[8176r,8224r:23)[8224r,8256r:22)[8400r,8448r:21)[8448r,8480r:20)[8624r,8672r:19)[8672r,8704r:18)[8848r,8896r:17)[8896r,8928r:16)[9072r,9120r:15)[9120r,9152r:14)[9296r,9344r:13)[9344r,9376r:12)[9520r,9568r:11)[9568r,9600r:10)[9744r,9792r:9)[9792r,9824r:8)[9968r,10016r:7)[10016r,10048r:6)[10192r,10240r:5)[10240r,10272r:4)[10416r,10464r:3)[10464r,10496r:2)[10528r,10544r:1) 0@0B-phi 1@10528r 2@10464r 3@10416r 4@10240r 5@10192r 6@10016r 7@9968r 8@9792r 9@9744r 10@9568r 11@9520r 12@9344r 13@9296r 14@9120r 15@9072r 16@8896r 17@8848r 18@8672r 19@8624r 20@8448r 21@8400r 22@8224r 23@8176r 24@8000r 25@7952r 26@7776r 27@7728r 28@7552r 29@7504r 30@7328r 31@7280r 32@7104r 33@7056r 34@6880r 35@6832r 36@6656r 37@6608r 38@6432r 39@6384r 40@6208r 41@6160r 42@5984r 43@5936r 44@5728r 45@5680r 46@5536r 47@5472r 48@4640r 49@4576r 50@4288r 51@4224r 52@4032r 53@3968r 54@3856r 55@3792r
R1 [0B,32r:0)[3808r,3856r:10)[3856r,3904r:9)[3984r,4032r:8)[4032r,4080r:7)[4240r,4288r:6)[4288r,4336r:5)[4592r,4640r:4)[4640r,4688r:3)[5488r,5536r:2)[5536r,5584r:1) 0@0B-phi 1@5536r 2@5488r 3@4640r 4@4592r 5@4288r 6@4240r 7@4032r 8@3984r 9@3856r 10@3808r
R2 [0B,16r:0)[3824r,3856r:27)[4000r,4032r:26)[4256r,4288r:25)[4608r,4640r:24)[5504r,5536r:23)[5696r,5728r:22)[5952r,5984r:21)[6176r,6208r:20)[6400r,6432r:19)[6624r,6656r:18)[6848r,6880r:17)[7072r,7104r:16)[7296r,7328r:15)[7520r,7552r:14)[7744r,7776r:13)[7968r,8000r:12)[8192r,8224r:11)[8416r,8448r:10)[8640r,8672r:9)[8864r,8896r:8)[9088r,9120r:7)[9312r,9344r:6)[9536r,9568r:5)[9760r,9792r:4)[9984r,10016r:3)[10208r,10240r:2)[10432r,10464r:1) 0@0B-phi 1@10432r 2@10208r 3@9984r 4@9760r 5@9536r 6@9312r 7@9088r 8@8864r 9@8640r 10@8416r 11@8192r 12@7968r 13@7744r 14@7520r 15@7296r 16@7072r 17@6848r 18@6624r 19@6400r 20@6176r 21@5952r 22@5696r 23@5504r 24@4608r 25@4256r 26@4000r 27@3824r
%0 [48r,64r:0) 0@48r  weight:0.000000e+00
%1 [32r,80r:0) 0@32r  weight:0.000000e+00
%2 [16r,96r:0) 0@16r  weight:0.000000e+00
%3 [112r,160r:0) 0@112r  weight:0.000000e+00
%4 [128r,192r:0) 0@128r  weight:0.000000e+00
%5 [144r,10352r:0) 0@144r  weight:0.000000e+00
%6 [160r,208r:0) 0@160r  weight:0.000000e+00
%7 [176r,192r:0)[192r,224r:1) 0@176r 1@192r  weight:0.000000e+00
%8 [240r,256r:0) 0@240r  weight:0.000000e+00
%9 [256r,288r:0) 0@256r  weight:0.000000e+00
%10 [272r,320r:0) 0@272r  weight:0.000000e+00
%11 [288r,336r:0) 0@288r  weight:0.000000e+00
%12 [304r,320r:0)[320r,352r:1) 0@304r 1@320r  weight:0.000000e+00
%13 [368r,416r:0) 0@368r  weight:0.000000e+00
%15 [384r,416r:0)[416r,448r:1) 0@384r 1@416r  weight:0.000000e+00
%16 [432r,480r:0) 0@432r  weight:0.000000e+00
%17 [448r,496r:0) 0@448r  weight:0.000000e+00
%18 [464r,480r:0)[480r,512r:1) 0@464r 1@480r  weight:0.000000e+00
%19 [528r,544r:0) 0@528r  weight:0.000000e+00
%20 [544r,576r:0) 0@544r  weight:0.000000e+00
%21 [560r,608r:0) 0@560r  weight:0.000000e+00
%22 [576r,624r:0) 0@576r  weight:0.000000e+00
%23 [592r,608r:0)[608r,640r:1) 0@592r 1@608r  weight:0.000000e+00
%24 [656r,704r:0) 0@656r  weight:0.000000e+00
%26 [672r,704r:0)[704r,736r:1) 0@672r 1@704r  weight:0.000000e+00
%27 [720r,768r:0) 0@720r  weight:0.000000e+00
%28 [736r,784r:0) 0@736r  weight:0.000000e+00
%29 [752r,768r:0)[768r,800r:1) 0@752r 1@768r  weight:0.000000e+00
%30 [816r,864r:0) 0@816r  weight:0.000000e+00
%32 [832r,864r:0)[864r,896r:1) 0@832r 1@864r  weight:0.000000e+00
%33 [880r,928r:0) 0@880r  weight:0.000000e+00
%34 [896r,944r:0) 0@896r  weight:0.000000e+00
%35 [912r,928r:0)[928r,960r:1) 0@912r 1@928r  weight:0.000000e+00
%36 [976r,1024r:0) 0@976r  weight:0.000000e+00
%38 [992r,1024r:0)[1024r,1056r:1) 0@992r 1@1024r  weight:0.000000e+00
%39 [1040r,1088r:0) 0@1040r  weight:0.000000e+00
%40 [1056r,1104r:0) 0@1056r  weight:0.000000e+00
%41 [1072r,1088r:0)[1088r,1120r:1) 0@1072r 1@1088r  weight:0.000000e+00
%42 [1136r,1152r:0) 0@1136r  weight:0.000000e+00
%43 [1152r,1184r:0) 0@1152r  weight:0.000000e+00
%44 [1168r,1216r:0) 0@1168r  weight:0.000000e+00
%45 [1184r,1232r:0) 0@1184r  weight:0.000000e+00
%46 [1200r,1216r:0)[1216r,1248r:1) 0@1200r 1@1216r  weight:0.000000e+00
%47 [1264r,1312r:0) 0@1264r  weight:0.000000e+00
%49 [1280r,1312r:0)[1312r,1344r:1) 0@1280r 1@1312r  weight:0.000000e+00
%50 [1328r,1376r:0) 0@1328r  weight:0.000000e+00
%51 [1344r,1392r:0) 0@1344r  weight:0.000000e+00
%52 [1360r,1376r:0)[1376r,1408r:1) 0@1360r 1@1376r  weight:0.000000e+00
%53 [1424r,1472r:0) 0@1424r  weight:0.000000e+00
%55 [1440r,1472r:0)[1472r,1504r:1) 0@1440r 1@1472r  weight:0.000000e+00
%56 [1488r,1536r:0) 0@1488r  weight:0.000000e+00
%57 [1504r,1552r:0) 0@1504r  weight:0.000000e+00
%58 [1520r,1536r:0)[1536r,1568r:1) 0@1520r 1@1536r  weight:0.000000e+00
%59 [1584r,1632r:0) 0@1584r  weight:0.000000e+00
%61 [1600r,1632r:0)[1632r,1664r:1) 0@1600r 1@1632r  weight:0.000000e+00
%62 [1648r,1696r:0) 0@1648r  weight:0.000000e+00
%63 [1664r,1712r:0) 0@1664r  weight:0.000000e+00
%64 [1680r,1696r:0)[1696r,1728r:1) 0@1680r 1@1696r  weight:0.000000e+00
%65 [1744r,1792r:0) 0@1744r  weight:0.000000e+00
%67 [1760r,1792r:0)[1792r,1824r:1) 0@1760r 1@1792r  weight:0.000000e+00
%68 [1808r,1856r:0) 0@1808r  weight:0.000000e+00
%69 [1824r,1872r:0) 0@1824r  weight:0.000000e+00
%70 [1840r,1856r:0)[1856r,1888r:1) 0@1840r 1@1856r  weight:0.000000e+00
%71 [1904r,1952r:0) 0@1904r  weight:0.000000e+00
%73 [1920r,1952r:0)[1952r,1984r:1) 0@1920r 1@1952r  weight:0.000000e+00
%74 [1968r,2016r:0) 0@1968r  weight:0.000000e+00
%75 [1984r,2032r:0) 0@1984r  weight:0.000000e+00
%76 [2000r,2016r:0)[2016r,2048r:1) 0@2000r 1@2016r  weight:0.000000e+00
%77 [2064r,2112r:0) 0@2064r  weight:0.000000e+00
%79 [2080r,2112r:0)[2112r,2144r:1) 0@2080r 1@2112r  weight:0.000000e+00
%80 [2128r,2176r:0) 0@2128r  weight:0.000000e+00
%81 [2144r,2192r:0) 0@2144r  weight:0.000000e+00
%82 [2160r,2176r:0)[2176r,2208r:1) 0@2160r 1@2176r  weight:0.000000e+00
%83 [2224r,2272r:0) 0@2224r  weight:0.000000e+00
%85 [2240r,2272r:0)[2272r,2304r:1) 0@2240r 1@2272r  weight:0.000000e+00
%86 [2288r,2336r:0) 0@2288r  weight:0.000000e+00
%87 [2304r,2352r:0) 0@2304r  weight:0.000000e+00
%88 [2320r,2336r:0)[2336r,2368r:1) 0@2320r 1@2336r  weight:0.000000e+00
%89 [2384r,2400r:0) 0@2384r  weight:0.000000e+00
%90 [2400r,2432r:0) 0@2400r  weight:0.000000e+00
%91 [2416r,2464r:0) 0@2416r  weight:0.000000e+00
%92 [2432r,2480r:0) 0@2432r  weight:0.000000e+00
%93 [2448r,2464r:0)[2464r,2496r:1) 0@2448r 1@2464r  weight:0.000000e+00
%94 [2512r,2560r:0) 0@2512r  weight:0.000000e+00
%96 [2528r,2560r:0)[2560r,2592r:1) 0@2528r 1@2560r  weight:0.000000e+00
%97 [2576r,2624r:0) 0@2576r  weight:0.000000e+00
%98 [2592r,2640r:0) 0@2592r  weight:0.000000e+00
%99 [2608r,2624r:0)[2624r,2656r:1) 0@2608r 1@2624r  weight:0.000000e+00
%100 [2672r,2720r:0) 0@2672r  weight:0.000000e+00
%102 [2688r,2720r:0)[2720r,2752r:1) 0@2688r 1@2720r  weight:0.000000e+00
%103 [2736r,2784r:0) 0@2736r  weight:0.000000e+00
%104 [2752r,2800r:0) 0@2752r  weight:0.000000e+00
%105 [2768r,2784r:0)[2784r,2816r:1) 0@2768r 1@2784r  weight:0.000000e+00
%106 [2832r,2880r:0) 0@2832r  weight:0.000000e+00
%108 [2848r,2880r:0)[2880r,2912r:1) 0@2848r 1@2880r  weight:0.000000e+00
%109 [2896r,2944r:0) 0@2896r  weight:0.000000e+00
%110 [2912r,2960r:0) 0@2912r  weight:0.000000e+00
%111 [2928r,2944r:0)[2944r,2976r:1) 0@2928r 1@2944r  weight:0.000000e+00
%112 [2992r,3040r:0) 0@2992r  weight:0.000000e+00
%114 [3008r,3040r:0)[3040r,3072r:1) 0@3008r 1@3040r  weight:0.000000e+00
%115 [3056r,3104r:0) 0@3056r  weight:0.000000e+00
%116 [3072r,3120r:0) 0@3072r  weight:0.000000e+00
%117 [3088r,3104r:0)[3104r,3136r:1) 0@3088r 1@3104r  weight:0.000000e+00
%118 [3152r,3200r:0) 0@3152r  weight:0.000000e+00
%120 [3168r,3200r:0)[3200r,3232r:1) 0@3168r 1@3200r  weight:0.000000e+00
%121 [3216r,3264r:0) 0@3216r  weight:0.000000e+00
%122 [3232r,3280r:0) 0@3232r  weight:0.000000e+00
%123 [3248r,3264r:0)[3264r,3296r:1) 0@3248r 1@3264r  weight:0.000000e+00
%124 [3312r,3344r:0) 0@3312r  weight:0.000000e+00
%125 [3328r,3344r:0) 0@3328r  weight:0.000000e+00
%126 [3344r,5680r:0) 0@3344r  weight:0.000000e+00
%129 [3392r,3472r:0) 0@3392r  weight:0.000000e+00
%130 [3408r,3440r:0) 0@3408r  weight:0.000000e+00
%133 [3488r,3568r:0) 0@3488r  weight:0.000000e+00
%134 [3504r,3536r:0) 0@3504r  weight:0.000000e+00
%135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5616r:5)[5616r,5712r:6) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r 6@5616r  weight:0.000000e+00
%136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5344r:4)[5344r,5648r:5)[5648r,5696r:6) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r 5@5344r 6@5648r  weight:0.000000e+00
%137 [3584r,3664r:0) 0@3584r  weight:0.000000e+00
%138 [3600r,3632r:0) 0@3600r  weight:0.000000e+00
%142 [3696r,4096r:0) 0@3696r  weight:0.000000e+00
%143 [3712r,3792r:0) 0@3712r  weight:0.000000e+00
%144 [3728r,3808r:0) 0@3728r  weight:0.000000e+00
%145 [3744r,3824r:0) 0@3744r  weight:0.000000e+00
%146 [3760r,3840r:0) 0@3760r  weight:0.000000e+00
%147 [3888r,3968r:0) 0@3888r  weight:0.000000e+00
%148 [3904r,3984r:0) 0@3904r  weight:0.000000e+00
%149 [3920r,4000r:0) 0@3920r  weight:0.000000e+00
%150 [3936r,4016r:0) 0@3936r  weight:0.000000e+00
%151 [4064r,4096r:0) 0@4064r  weight:0.000000e+00
%152 [4080r,4128r:0) 0@4080r  weight:0.000000e+00
%155 [4144r,4224r:0) 0@4144r  weight:0.000000e+00
%156 [4160r,4240r:0) 0@4160r  weight:0.000000e+00
%157 [4176r,4256r:0) 0@4176r  weight:0.000000e+00
%158 [4192r,4272r:0) 0@4192r  weight:0.000000e+00
%159 [4320r,4384r:0) 0@4320r  weight:0.000000e+00
%161 [4352r,4416r:0) 0@4352r  weight:0.000000e+00
%162 [4368r,4384r:0) 0@4368r  weight:0.000000e+00
%163 [4384r,4480r:0) 0@4384r  weight:0.000000e+00
%164 [4336r,4416r:0)[4416r,4448r:1) 0@4336r 1@4416r  weight:0.000000e+00
%165 [3680r,4128r:2)[4128r,4448r:0)[4448r,4720r:1)[4720r,4784r:3) 0@4128r 1@4448r 2@3680r 3@4720r  weight:0.000000e+00
%167 [4496r,4576r:0) 0@4496r  weight:0.000000e+00
%168 [4512r,4592r:0) 0@4512r  weight:0.000000e+00
%169 [4528r,4608r:0) 0@4528r  weight:0.000000e+00
%170 [4544r,4624r:0) 0@4544r  weight:0.000000e+00
%171 [4672r,4752r:0) 0@4672r  weight:0.000000e+00
%172 [4688r,4720r:0) 0@4688r  weight:0.000000e+00
%174 [4096r,4480r:2)[4480r,4752r:0)[4752r,4816r:1) 0@4480r 1@4752r 2@4096r  weight:0.000000e+00
%180 [4880r,4928r:0) 0@4880r  weight:0.000000e+00
%181 [4896r,4960r:0) 0@4896r  weight:0.000000e+00
%182 [4912r,4928r:0) 0@4912r  weight:0.000000e+00
%183 [4928r,5008r:0) 0@4928r  weight:0.000000e+00
%185 [4976r,5040r:0) 0@4976r  weight:0.000000e+00
%186 [4992r,5008r:0) 0@4992r  weight:0.000000e+00
%188 [4864r,4960r:2)[4960r,5040r:0)[5040r,5184r:1)[5184r,5280r:3) 0@4960r 1@5040r 2@4864r 3@5184r  weight:0.000000e+00
%190 [5072r,5120r:0) 0@5072r  weight:0.000000e+00
%191 [5088r,5152r:0) 0@5088r  weight:0.000000e+00
%192 [5104r,5120r:0) 0@5104r  weight:0.000000e+00
%193 [5120r,5216r:0) 0@5120r  weight:0.000000e+00
%194 [5056r,5152r:0)[5152r,5184r:1) 0@5056r 1@5152r  weight:0.000000e+00
%196 [5008r,5216r:0)[5216r,5248r:1) 0@5008r 1@5216r  weight:0.000000e+00
%197 [4848r,5248r:0)[5248r,5344r:1) 0@4848r 1@5248r  weight:0.000000e+00
%198 [4832r,5280r:0)[5280r,5312r:1) 0@4832r 1@5280r  weight:0.000000e+00
%201 [5360r,5472r:0) 0@5360r  weight:0.000000e+00
%202 [5376r,5488r:0) 0@5376r  weight:0.000000e+00
%203 [5392r,5440r:0) 0@5392r  weight:0.000000e+00
%204 [5408r,5424r:0) 0@5408r  weight:0.000000e+00
%205 [5424r,5504r:0) 0@5424r  weight:0.000000e+00
%206 [5440r,5520r:0) 0@5440r  weight:0.000000e+00
%207 [5568r,5648r:0) 0@5568r  weight:0.000000e+00
%208 [5584r,5616r:0) 0@5584r  weight:0.000000e+00
%212 [5760r,5776r:0) 0@5760r  weight:0.000000e+00
%214 [5808r,5824r:0) 0@5808r  weight:0.000000e+00
%215 [5824r,5952r:0) 0@5824r  weight:0.000000e+00
%216 [5792r,5856r:0)[5856r,5968r:1) 0@5792r 1@5856r  weight:0.000000e+00
%217 [5920r,10416r:0) 0@5920r  weight:0.000000e+00
%218 [6016r,6016d:0) 0@6016r  weight:0.000000e+00
%220 [6048r,6064r:0) 0@6048r  weight:0.000000e+00
%221 [6064r,6176r:0) 0@6064r  weight:0.000000e+00
%222 [6032r,6096r:0)[6096r,6192r:1) 0@6032r 1@6096r  weight:0.000000e+00
%223 [6240r,6240d:0) 0@6240r  weight:0.000000e+00
%225 [6272r,6288r:0) 0@6272r  weight:0.000000e+00
%226 [6288r,6400r:0) 0@6288r  weight:0.000000e+00
%227 [6256r,6320r:0)[6320r,6416r:1) 0@6256r 1@6320r  weight:0.000000e+00
%228 [6464r,6464d:0) 0@6464r  weight:0.000000e+00
%230 [6496r,6512r:0) 0@6496r  weight:0.000000e+00
%231 [6512r,6624r:0) 0@6512r  weight:0.000000e+00
%232 [6480r,6544r:0)[6544r,6640r:1) 0@6480r 1@6544r  weight:0.000000e+00
%233 [6688r,6688d:0) 0@6688r  weight:0.000000e+00
%235 [6720r,6736r:0) 0@6720r  weight:0.000000e+00
%236 [6736r,6848r:0) 0@6736r  weight:0.000000e+00
%237 [6704r,6768r:0)[6768r,6864r:1) 0@6704r 1@6768r  weight:0.000000e+00
%238 [6912r,6912d:0) 0@6912r  weight:0.000000e+00
%240 [6944r,6960r:0) 0@6944r  weight:0.000000e+00
%241 [6960r,7072r:0) 0@6960r  weight:0.000000e+00
%242 [6928r,6992r:0)[6992r,7088r:1) 0@6928r 1@6992r  weight:0.000000e+00
%243 [7136r,7136d:0) 0@7136r  weight:0.000000e+00
%245 [7168r,7184r:0) 0@7168r  weight:0.000000e+00
%246 [7184r,7296r:0) 0@7184r  weight:0.000000e+00
%247 [7152r,7216r:0)[7216r,7312r:1) 0@7152r 1@7216r  weight:0.000000e+00
%248 [7360r,7360d:0) 0@7360r  weight:0.000000e+00
%250 [7392r,7408r:0) 0@7392r  weight:0.000000e+00
%251 [7408r,7520r:0) 0@7408r  weight:0.000000e+00
%252 [7376r,7440r:0)[7440r,7536r:1) 0@7376r 1@7440r  weight:0.000000e+00
%253 [7584r,7584d:0) 0@7584r  weight:0.000000e+00
%255 [7616r,7632r:0) 0@7616r  weight:0.000000e+00
%256 [7632r,7744r:0) 0@7632r  weight:0.000000e+00
%257 [7600r,7664r:0)[7664r,7760r:1) 0@7600r 1@7664r  weight:0.000000e+00
%258 [7808r,7808d:0) 0@7808r  weight:0.000000e+00
%260 [7840r,7856r:0) 0@7840r  weight:0.000000e+00
%261 [7856r,7968r:0) 0@7856r  weight:0.000000e+00
%262 [7824r,7888r:0)[7888r,7984r:1) 0@7824r 1@7888r  weight:0.000000e+00
%263 [8032r,8032d:0) 0@8032r  weight:0.000000e+00
%265 [8064r,8080r:0) 0@8064r  weight:0.000000e+00
%266 [8080r,8192r:0) 0@8080r  weight:0.000000e+00
%267 [8048r,8112r:0)[8112r,8208r:1) 0@8048r 1@8112r  weight:0.000000e+00
%268 [8256r,8256d:0) 0@8256r  weight:0.000000e+00
%270 [8288r,8304r:0) 0@8288r  weight:0.000000e+00
%271 [8304r,8416r:0) 0@8304r  weight:0.000000e+00
%272 [8272r,8336r:0)[8336r,8432r:1) 0@8272r 1@8336r  weight:0.000000e+00
%273 [8480r,8480d:0) 0@8480r  weight:0.000000e+00
%275 [8512r,8528r:0) 0@8512r  weight:0.000000e+00
%276 [8528r,8640r:0) 0@8528r  weight:0.000000e+00
%277 [8496r,8560r:0)[8560r,8656r:1) 0@8496r 1@8560r  weight:0.000000e+00
%278 [8704r,8704d:0) 0@8704r  weight:0.000000e+00
%280 [8736r,8752r:0) 0@8736r  weight:0.000000e+00
%281 [8752r,8864r:0) 0@8752r  weight:0.000000e+00
%282 [8720r,8784r:0)[8784r,8880r:1) 0@8720r 1@8784r  weight:0.000000e+00
%283 [8928r,8928d:0) 0@8928r  weight:0.000000e+00
%285 [8960r,8976r:0) 0@8960r  weight:0.000000e+00
%286 [8976r,9088r:0) 0@8976r  weight:0.000000e+00
%287 [8944r,9008r:0)[9008r,9104r:1) 0@8944r 1@9008r  weight:0.000000e+00
%288 [9152r,9152d:0) 0@9152r  weight:0.000000e+00
%290 [9184r,9200r:0) 0@9184r  weight:0.000000e+00
%291 [9200r,9312r:0) 0@9200r  weight:0.000000e+00
%292 [9168r,9232r:0)[9232r,9328r:1) 0@9168r 1@9232r  weight:0.000000e+00
%293 [9376r,9376d:0) 0@9376r  weight:0.000000e+00
%295 [9408r,9424r:0) 0@9408r  weight:0.000000e+00
%296 [9424r,9536r:0) 0@9424r  weight:0.000000e+00
%297 [9392r,9456r:0)[9456r,9552r:1) 0@9392r 1@9456r  weight:0.000000e+00
%298 [9600r,9600d:0) 0@9600r  weight:0.000000e+00
%300 [9632r,9648r:0) 0@9632r  weight:0.000000e+00
%301 [9648r,9760r:0) 0@9648r  weight:0.000000e+00
%302 [9616r,9680r:0)[9680r,9776r:1) 0@9616r 1@9680r  weight:0.000000e+00
%303 [9824r,9824d:0) 0@9824r  weight:0.000000e+00
%305 [9856r,9872r:0) 0@9856r  weight:0.000000e+00
%306 [9872r,9984r:0) 0@9872r  weight:0.000000e+00
%307 [9840r,9904r:0)[9904r,10000r:1) 0@9840r 1@9904r  weight:0.000000e+00
%308 [10048r,10048d:0) 0@10048r  weight:0.000000e+00
%310 [10080r,10096r:0) 0@10080r  weight:0.000000e+00
%311 [10096r,10208r:0) 0@10096r  weight:0.000000e+00
%312 [10064r,10128r:0)[10128r,10224r:1) 0@10064r 1@10128r  weight:0.000000e+00
%313 [10272r,10272d:0) 0@10272r  weight:0.000000e+00
%315 [10304r,10320r:0) 0@10304r  weight:0.000000e+00
%316 [10320r,10432r:0) 0@10320r  weight:0.000000e+00
%317 [10288r,10352r:0)[10352r,10448r:1) 0@10288r 1@10352r  weight:0.000000e+00
%318 [10496r,10496d:0) 0@10496r  weight:0.000000e+00
%319 [10512r,10528r:0) 0@10512r  weight:0.000000e+00
RegMasks: 3856r 4032r 4288r 4640r 5536r 5728r 5984r 6208r 6432r 6656r 6880r 7104r 7328r 7552r 7776r 8000r 8224r 8448r 8672r 8896r 9120r 9344r 9568r 9792r 10016r 10240r 10464r
********** MACHINEINSTRS **********
# Machine code for function moreThan20Variables: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=8, align=8, at location [SP]
  fi#20: size=8, align=8, at location [SP]
  fi#21: size=8, align=8, at location [SP]
  fi#22: size=8, align=8, at location [SP]
  fi#23: size=8, align=8, at location [SP]
  fi#24: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str, align=4
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

0B	bb.0 (%ir-block.3):
	  liveins: $r0, $r1, $r2
16B	  %2:tgpr = COPY $r2
32B	  %1:tgpr = COPY $r1
48B	  %0:tgpr = COPY $r0
64B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
80B	  tSTRspi %1:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
96B	  tSTRspi %2:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
112B	  %3:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
128B	  %4:tgpr, dead $cpsr = tASRri %3:tgpr, 31, 14, $noreg
144B	  %5:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
160B	  %6:tgpr, $cpsr = tRSB %3:tgpr, 14, $noreg
176B	  %7:tgpr = COPY %5:tgpr
192B	  %7:tgpr, dead $cpsr = tSBC %7:tgpr(tied-def 0), %4:tgpr, 14, $noreg, implicit killed $cpsr
208B	  tSTRspi %6:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
224B	  tSTRspi %7:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
240B	  %8:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
256B	  %9:tgpr, dead $cpsr = tLSLri %8:tgpr, 1, 14, $noreg
272B	  %10:tgpr, dead $cpsr = tASRri %9:tgpr, 31, 14, $noreg
288B	  %11:tgpr, $cpsr = tRSB %9:tgpr, 14, $noreg
304B	  %12:tgpr = COPY %5:tgpr
320B	  %12:tgpr, dead $cpsr = tSBC %12:tgpr(tied-def 0), %10:tgpr, 14, $noreg, implicit killed $cpsr
336B	  tSTRspi %11:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
352B	  tSTRspi %12:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
368B	  %13:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
384B	  %15:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
416B	  %15:tgpr, dead $cpsr = nsw tMUL %13:tgpr, %15:tgpr(tied-def 0), 14, $noreg
432B	  %16:tgpr, dead $cpsr = tASRri %15:tgpr, 31, 14, $noreg
448B	  %17:tgpr, $cpsr = tRSB %15:tgpr, 14, $noreg
464B	  %18:tgpr = COPY %5:tgpr
480B	  %18:tgpr, dead $cpsr = tSBC %18:tgpr(tied-def 0), %16:tgpr, 14, $noreg, implicit killed $cpsr
496B	  tSTRspi %17:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
512B	  tSTRspi %18:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
528B	  %19:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  %20:tgpr, dead $cpsr = tLSLri %19:tgpr, 2, 14, $noreg
560B	  %21:tgpr, dead $cpsr = tASRri %20:tgpr, 31, 14, $noreg
576B	  %22:tgpr, $cpsr = tRSB %20:tgpr, 14, $noreg
592B	  %23:tgpr = COPY %5:tgpr
608B	  %23:tgpr, dead $cpsr = tSBC %23:tgpr(tied-def 0), %21:tgpr, 14, $noreg, implicit killed $cpsr
624B	  tSTRspi %22:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
640B	  tSTRspi %23:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
656B	  %24:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
672B	  %26:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
704B	  %26:tgpr, dead $cpsr = nsw tMUL %24:tgpr, %26:tgpr(tied-def 0), 14, $noreg
720B	  %27:tgpr, dead $cpsr = tASRri %26:tgpr, 31, 14, $noreg
736B	  %28:tgpr, $cpsr = tRSB %26:tgpr, 14, $noreg
752B	  %29:tgpr = COPY %5:tgpr
768B	  %29:tgpr, dead $cpsr = tSBC %29:tgpr(tied-def 0), %27:tgpr, 14, $noreg, implicit killed $cpsr
784B	  tSTRspi %28:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
800B	  tSTRspi %29:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
816B	  %30:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
832B	  %32:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
864B	  %32:tgpr, dead $cpsr = nsw tMUL %30:tgpr, %32:tgpr(tied-def 0), 14, $noreg
880B	  %33:tgpr, dead $cpsr = tASRri %32:tgpr, 31, 14, $noreg
896B	  %34:tgpr, $cpsr = tRSB %32:tgpr, 14, $noreg
912B	  %35:tgpr = COPY %5:tgpr
928B	  %35:tgpr, dead $cpsr = tSBC %35:tgpr(tied-def 0), %33:tgpr, 14, $noreg, implicit killed $cpsr
944B	  tSTRspi %34:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
960B	  tSTRspi %35:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
976B	  %36:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
992B	  %38:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
1024B	  %38:tgpr, dead $cpsr = nsw tMUL %36:tgpr, %38:tgpr(tied-def 0), 14, $noreg
1040B	  %39:tgpr, dead $cpsr = tASRri %38:tgpr, 31, 14, $noreg
1056B	  %40:tgpr, $cpsr = tRSB %38:tgpr, 14, $noreg
1072B	  %41:tgpr = COPY %5:tgpr
1088B	  %41:tgpr, dead $cpsr = tSBC %41:tgpr(tied-def 0), %39:tgpr, 14, $noreg, implicit killed $cpsr
1104B	  tSTRspi %40:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
1120B	  tSTRspi %41:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
1136B	  %42:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1152B	  %43:tgpr, dead $cpsr = tLSLri %42:tgpr, 3, 14, $noreg
1168B	  %44:tgpr, dead $cpsr = tASRri %43:tgpr, 31, 14, $noreg
1184B	  %45:tgpr, $cpsr = tRSB %43:tgpr, 14, $noreg
1200B	  %46:tgpr = COPY %5:tgpr
1216B	  %46:tgpr, dead $cpsr = tSBC %46:tgpr(tied-def 0), %44:tgpr, 14, $noreg, implicit killed $cpsr
1232B	  tSTRspi %45:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
1248B	  tSTRspi %46:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
1264B	  %47:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1280B	  %49:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
1312B	  %49:tgpr, dead $cpsr = nsw tMUL %47:tgpr, %49:tgpr(tied-def 0), 14, $noreg
1328B	  %50:tgpr, dead $cpsr = tASRri %49:tgpr, 31, 14, $noreg
1344B	  %51:tgpr, $cpsr = tRSB %49:tgpr, 14, $noreg
1360B	  %52:tgpr = COPY %5:tgpr
1376B	  %52:tgpr, dead $cpsr = tSBC %52:tgpr(tied-def 0), %50:tgpr, 14, $noreg, implicit killed $cpsr
1392B	  tSTRspi %51:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
1408B	  tSTRspi %52:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
1424B	  %53:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1440B	  %55:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
1472B	  %55:tgpr, dead $cpsr = nsw tMUL %53:tgpr, %55:tgpr(tied-def 0), 14, $noreg
1488B	  %56:tgpr, dead $cpsr = tASRri %55:tgpr, 31, 14, $noreg
1504B	  %57:tgpr, $cpsr = tRSB %55:tgpr, 14, $noreg
1520B	  %58:tgpr = COPY %5:tgpr
1536B	  %58:tgpr, dead $cpsr = tSBC %58:tgpr(tied-def 0), %56:tgpr, 14, $noreg, implicit killed $cpsr
1552B	  tSTRspi %57:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
1568B	  tSTRspi %58:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
1584B	  %59:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1600B	  %61:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
1632B	  %61:tgpr, dead $cpsr = nsw tMUL %59:tgpr, %61:tgpr(tied-def 0), 14, $noreg
1648B	  %62:tgpr, dead $cpsr = tASRri %61:tgpr, 31, 14, $noreg
1664B	  %63:tgpr, $cpsr = tRSB %61:tgpr, 14, $noreg
1680B	  %64:tgpr = COPY %5:tgpr
1696B	  %64:tgpr, dead $cpsr = tSBC %64:tgpr(tied-def 0), %62:tgpr, 14, $noreg, implicit killed $cpsr
1712B	  tSTRspi %63:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
1728B	  tSTRspi %64:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
1744B	  %65:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1760B	  %67:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
1792B	  %67:tgpr, dead $cpsr = nsw tMUL %65:tgpr, %67:tgpr(tied-def 0), 14, $noreg
1808B	  %68:tgpr, dead $cpsr = tASRri %67:tgpr, 31, 14, $noreg
1824B	  %69:tgpr, $cpsr = tRSB %67:tgpr, 14, $noreg
1840B	  %70:tgpr = COPY %5:tgpr
1856B	  %70:tgpr, dead $cpsr = tSBC %70:tgpr(tied-def 0), %68:tgpr, 14, $noreg, implicit killed $cpsr
1872B	  tSTRspi %69:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
1888B	  tSTRspi %70:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
1904B	  %71:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1920B	  %73:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
1952B	  %73:tgpr, dead $cpsr = nsw tMUL %71:tgpr, %73:tgpr(tied-def 0), 14, $noreg
1968B	  %74:tgpr, dead $cpsr = tASRri %73:tgpr, 31, 14, $noreg
1984B	  %75:tgpr, $cpsr = tRSB %73:tgpr, 14, $noreg
2000B	  %76:tgpr = COPY %5:tgpr
2016B	  %76:tgpr, dead $cpsr = tSBC %76:tgpr(tied-def 0), %74:tgpr, 14, $noreg, implicit killed $cpsr
2032B	  tSTRspi %75:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
2048B	  tSTRspi %76:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
2064B	  %77:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2080B	  %79:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
2112B	  %79:tgpr, dead $cpsr = nsw tMUL %77:tgpr, %79:tgpr(tied-def 0), 14, $noreg
2128B	  %80:tgpr, dead $cpsr = tASRri %79:tgpr, 31, 14, $noreg
2144B	  %81:tgpr, $cpsr = tRSB %79:tgpr, 14, $noreg
2160B	  %82:tgpr = COPY %5:tgpr
2176B	  %82:tgpr, dead $cpsr = tSBC %82:tgpr(tied-def 0), %80:tgpr, 14, $noreg, implicit killed $cpsr
2192B	  tSTRspi %81:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
2208B	  tSTRspi %82:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
2224B	  %83:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2240B	  %85:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
2272B	  %85:tgpr, dead $cpsr = nsw tMUL %83:tgpr, %85:tgpr(tied-def 0), 14, $noreg
2288B	  %86:tgpr, dead $cpsr = tASRri %85:tgpr, 31, 14, $noreg
2304B	  %87:tgpr, $cpsr = tRSB %85:tgpr, 14, $noreg
2320B	  %88:tgpr = COPY %5:tgpr
2336B	  %88:tgpr, dead $cpsr = tSBC %88:tgpr(tied-def 0), %86:tgpr, 14, $noreg, implicit killed $cpsr
2352B	  tSTRspi %87:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
2368B	  tSTRspi %88:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
2384B	  %89:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2400B	  %90:tgpr, dead $cpsr = tLSLri %89:tgpr, 4, 14, $noreg
2416B	  %91:tgpr, dead $cpsr = tASRri %90:tgpr, 31, 14, $noreg
2432B	  %92:tgpr, $cpsr = tRSB %90:tgpr, 14, $noreg
2448B	  %93:tgpr = COPY %5:tgpr
2464B	  %93:tgpr, dead $cpsr = tSBC %93:tgpr(tied-def 0), %91:tgpr, 14, $noreg, implicit killed $cpsr
2480B	  tSTRspi %92:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
2496B	  tSTRspi %93:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
2512B	  %94:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2528B	  %96:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
2560B	  %96:tgpr, dead $cpsr = nsw tMUL %94:tgpr, %96:tgpr(tied-def 0), 14, $noreg
2576B	  %97:tgpr, dead $cpsr = tASRri %96:tgpr, 31, 14, $noreg
2592B	  %98:tgpr, $cpsr = tRSB %96:tgpr, 14, $noreg
2608B	  %99:tgpr = COPY %5:tgpr
2624B	  %99:tgpr, dead $cpsr = tSBC %99:tgpr(tied-def 0), %97:tgpr, 14, $noreg, implicit killed $cpsr
2640B	  tSTRspi %98:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
2656B	  tSTRspi %99:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
2672B	  %100:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2688B	  %102:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
2720B	  %102:tgpr, dead $cpsr = nsw tMUL %100:tgpr, %102:tgpr(tied-def 0), 14, $noreg
2736B	  %103:tgpr, dead $cpsr = tASRri %102:tgpr, 31, 14, $noreg
2752B	  %104:tgpr, $cpsr = tRSB %102:tgpr, 14, $noreg
2768B	  %105:tgpr = COPY %5:tgpr
2784B	  %105:tgpr, dead $cpsr = tSBC %105:tgpr(tied-def 0), %103:tgpr, 14, $noreg, implicit killed $cpsr
2800B	  tSTRspi %104:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
2816B	  tSTRspi %105:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
2832B	  %106:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2848B	  %108:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
2880B	  %108:tgpr, dead $cpsr = nsw tMUL %106:tgpr, %108:tgpr(tied-def 0), 14, $noreg
2896B	  %109:tgpr, dead $cpsr = tASRri %108:tgpr, 31, 14, $noreg
2912B	  %110:tgpr, $cpsr = tRSB %108:tgpr, 14, $noreg
2928B	  %111:tgpr = COPY %5:tgpr
2944B	  %111:tgpr, dead $cpsr = tSBC %111:tgpr(tied-def 0), %109:tgpr, 14, $noreg, implicit killed $cpsr
2960B	  tSTRspi %110:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
2976B	  tSTRspi %111:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
2992B	  %112:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3008B	  %114:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
3040B	  %114:tgpr, dead $cpsr = nsw tMUL %112:tgpr, %114:tgpr(tied-def 0), 14, $noreg
3056B	  %115:tgpr, dead $cpsr = tASRri %114:tgpr, 31, 14, $noreg
3072B	  %116:tgpr, $cpsr = tRSB %114:tgpr, 14, $noreg
3088B	  %117:tgpr = COPY %5:tgpr
3104B	  %117:tgpr, dead $cpsr = tSBC %117:tgpr(tied-def 0), %115:tgpr, 14, $noreg, implicit killed $cpsr
3120B	  tSTRspi %116:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
3136B	  tSTRspi %117:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
3152B	  %118:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3168B	  %120:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
3200B	  %120:tgpr, dead $cpsr = nsw tMUL %118:tgpr, %120:tgpr(tied-def 0), 14, $noreg
3216B	  %121:tgpr, dead $cpsr = tASRri %120:tgpr, 31, 14, $noreg
3232B	  %122:tgpr, $cpsr = tRSB %120:tgpr, 14, $noreg
3248B	  %123:tgpr = COPY %5:tgpr
3264B	  %123:tgpr, dead $cpsr = tSBC %123:tgpr(tied-def 0), %121:tgpr, 14, $noreg, implicit killed $cpsr
3280B	  tSTRspi %122:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
3296B	  tSTRspi %123:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
3312B	  %124:tgpr = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
3328B	  %125:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
3344B	  %126:tgpr, dead $cpsr = nsw tADDrr %124:tgpr, %125:tgpr, 14, $noreg
3360B	  %135:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
3376B	  %136:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
3392B	  %129:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
3408B	  %130:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
3440B	  %136:tgpr, dead $cpsr = tAND %136:tgpr(tied-def 0), %130:tgpr, 14, $noreg
3472B	  %135:tgpr, dead $cpsr = tAND %135:tgpr(tied-def 0), %129:tgpr, 14, $noreg
3488B	  %133:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
3504B	  %134:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
3536B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %134:tgpr, 14, $noreg
3568B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %133:tgpr, 14, $noreg
3584B	  %137:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
3600B	  %138:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
3632B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %138:tgpr, 14, $noreg
3664B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %137:tgpr, 14, $noreg
3680B	  %165:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
3696B	  %142:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
3712B	  %143:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
3728B	  %144:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
3744B	  %145:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
3760B	  %146:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
3776B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3792B	  $r0 = COPY %143:tgpr
3808B	  $r1 = COPY %144:tgpr
3824B	  $r2 = COPY %145:tgpr
3840B	  $r3 = COPY %146:tgpr
3856B	  tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3872B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3888B	  %147:tgpr = COPY $r0
3904B	  %148:tgpr = COPY $r1
3920B	  %149:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
3936B	  %150:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
3952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3968B	  $r0 = COPY %147:tgpr
3984B	  $r1 = COPY %148:tgpr
4000B	  $r2 = COPY %149:tgpr
4016B	  $r3 = COPY %150:tgpr
4032B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4048B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4064B	  %151:tgpr = COPY $r0
4080B	  %152:tgpr = COPY $r1
4096B	  %174:tgpr, $cpsr = tADDrr %142:tgpr, %151:tgpr, 14, $noreg
4128B	  %165:tgpr, dead $cpsr = tADC %165:tgpr(tied-def 0), %152:tgpr, 14, $noreg, implicit killed $cpsr
4144B	  %155:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
4160B	  %156:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
4176B	  %157:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
4192B	  %158:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
4208B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4224B	  $r0 = COPY %155:tgpr
4240B	  $r1 = COPY %156:tgpr
4256B	  $r2 = COPY %157:tgpr
4272B	  $r3 = COPY %158:tgpr
4288B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4304B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4320B	  %159:tgpr = COPY $r0
4336B	  %164:tgpr = COPY $r1
4352B	  %161:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
4368B	  %162:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
4384B	  %163:tgpr, $cpsr = tADDrr %159:tgpr, %162:tgpr, 14, $noreg
4416B	  %164:tgpr, dead $cpsr = tADC %164:tgpr(tied-def 0), %161:tgpr, 14, $noreg, implicit killed $cpsr
4448B	  %165:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), %164:tgpr, 14, $noreg
4480B	  %174:tgpr, dead $cpsr = tAND %174:tgpr(tied-def 0), %163:tgpr, 14, $noreg
4496B	  %167:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
4512B	  %168:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
4528B	  %169:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
4544B	  %170:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
4560B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4576B	  $r0 = COPY %167:tgpr
4592B	  $r1 = COPY %168:tgpr
4608B	  $r2 = COPY %169:tgpr
4624B	  $r3 = COPY %170:tgpr
4640B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4656B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4672B	  %171:tgpr = COPY $r0
4688B	  %172:tgpr = COPY $r1
4720B	  %165:tgpr, dead $cpsr = tAND %165:tgpr(tied-def 0), %172:tgpr, 14, $noreg
4752B	  %174:tgpr, dead $cpsr = tAND %174:tgpr(tied-def 0), %171:tgpr, 14, $noreg
4784B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %165:tgpr, 14, $noreg
4816B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %174:tgpr, 14, $noreg
4832B	  %198:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
4848B	  %197:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
4864B	  %188:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
4880B	  %180:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
4896B	  %181:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
4912B	  %182:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
4928B	  %183:tgpr, $cpsr = tSUBrr %180:tgpr, %182:tgpr, 14, $noreg
4960B	  %188:tgpr, dead $cpsr = tSBC %188:tgpr(tied-def 0), %181:tgpr, 14, $noreg, implicit killed $cpsr
4976B	  %185:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
4992B	  %186:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
5008B	  %196:tgpr, $cpsr = tSUBrr %183:tgpr, %186:tgpr, 14, $noreg
5040B	  %188:tgpr, dead $cpsr = tSBC %188:tgpr(tied-def 0), %185:tgpr, 14, $noreg, implicit killed $cpsr
5056B	  %194:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
5072B	  %190:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
5088B	  %191:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
5104B	  %192:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
5120B	  %193:tgpr, $cpsr = tADDrr %190:tgpr, %192:tgpr, 14, $noreg
5152B	  %194:tgpr, dead $cpsr = tADC %194:tgpr(tied-def 0), %191:tgpr, 14, $noreg, implicit killed $cpsr
5184B	  %188:tgpr, dead $cpsr = tAND %188:tgpr(tied-def 0), %194:tgpr, 14, $noreg
5216B	  %196:tgpr, dead $cpsr = tAND %196:tgpr(tied-def 0), %193:tgpr, 14, $noreg
5248B	  %197:tgpr, dead $cpsr = tEOR %197:tgpr(tied-def 0), %196:tgpr, 14, $noreg
5280B	  %198:tgpr, dead $cpsr = tEOR %198:tgpr(tied-def 0), %188:tgpr, 14, $noreg
5312B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %198:tgpr, 14, $noreg
5344B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %197:tgpr, 14, $noreg
5360B	  %201:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
5376B	  %202:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
5392B	  %203:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
5408B	  %204:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
5424B	  %205:tgpr, dead $cpsr = tMVN %204:tgpr, 14, $noreg
5440B	  %206:tgpr, dead $cpsr = tMVN %203:tgpr, 14, $noreg
5456B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5472B	  $r0 = COPY %201:tgpr
5488B	  $r1 = COPY %202:tgpr
5504B	  $r2 = COPY %205:tgpr
5520B	  $r3 = COPY %206:tgpr
5536B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
5552B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5568B	  %207:tgpr = COPY $r0
5584B	  %208:tgpr = COPY $r1
5616B	  %135:tgpr, dead $cpsr = tORR %135:tgpr(tied-def 0), %208:tgpr, 14, $noreg
5648B	  %136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), %207:tgpr, 14, $noreg
5664B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5680B	  $r0 = COPY %126:tgpr
5696B	  $r2 = COPY %136:tgpr
5712B	  $r3 = COPY %135:tgpr
5728B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
5744B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5760B	  %212:tgpr = COPY $r0
5776B	  tSTRspi %212:tgpr, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
5792B	  %216:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
5808B	  %214:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
5824B	  %215:tgpr, $cpsr = tADDi3 %214:tgpr, 1, 14, $noreg
5856B	  %216:tgpr, dead $cpsr = tADC %216:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
5872B	  tSTRspi %215:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
5888B	  tSTRspi %216:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
5904B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5920B	  %217:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
5936B	  $r0 = COPY %217:tgpr
5952B	  $r2 = COPY %215:tgpr
5968B	  $r3 = COPY %216:tgpr
5984B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6000B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6016B	  dead %218:tgpr = COPY $r0
6032B	  %222:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
6048B	  %220:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
6064B	  %221:tgpr, $cpsr = tADDi3 %220:tgpr, 1, 14, $noreg
6096B	  %222:tgpr, dead $cpsr = tADC %222:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6112B	  tSTRspi %221:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
6128B	  tSTRspi %222:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
6144B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6160B	  $r0 = COPY %217:tgpr
6176B	  $r2 = COPY %221:tgpr
6192B	  $r3 = COPY %222:tgpr
6208B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6224B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6240B	  dead %223:tgpr = COPY $r0
6256B	  %227:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
6272B	  %225:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
6288B	  %226:tgpr, $cpsr = tADDi3 %225:tgpr, 1, 14, $noreg
6320B	  %227:tgpr, dead $cpsr = tADC %227:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6336B	  tSTRspi %226:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
6352B	  tSTRspi %227:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
6368B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6384B	  $r0 = COPY %217:tgpr
6400B	  $r2 = COPY %226:tgpr
6416B	  $r3 = COPY %227:tgpr
6432B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6464B	  dead %228:tgpr = COPY $r0
6480B	  %232:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
6496B	  %230:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
6512B	  %231:tgpr, $cpsr = tADDi3 %230:tgpr, 1, 14, $noreg
6544B	  %232:tgpr, dead $cpsr = tADC %232:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6560B	  tSTRspi %231:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
6576B	  tSTRspi %232:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
6592B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6608B	  $r0 = COPY %217:tgpr
6624B	  $r2 = COPY %231:tgpr
6640B	  $r3 = COPY %232:tgpr
6656B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6672B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6688B	  dead %233:tgpr = COPY $r0
6704B	  %237:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
6720B	  %235:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
6736B	  %236:tgpr, $cpsr = tADDi3 %235:tgpr, 1, 14, $noreg
6768B	  %237:tgpr, dead $cpsr = tADC %237:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
6784B	  tSTRspi %236:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
6800B	  tSTRspi %237:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
6816B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6832B	  $r0 = COPY %217:tgpr
6848B	  $r2 = COPY %236:tgpr
6864B	  $r3 = COPY %237:tgpr
6880B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
6896B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6912B	  dead %238:tgpr = COPY $r0
6928B	  %242:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
6944B	  %240:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
6960B	  %241:tgpr, $cpsr = tADDi3 %240:tgpr, 1, 14, $noreg
6992B	  %242:tgpr, dead $cpsr = tADC %242:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7008B	  tSTRspi %241:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
7024B	  tSTRspi %242:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
7040B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7056B	  $r0 = COPY %217:tgpr
7072B	  $r2 = COPY %241:tgpr
7088B	  $r3 = COPY %242:tgpr
7104B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7120B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7136B	  dead %243:tgpr = COPY $r0
7152B	  %247:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
7168B	  %245:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
7184B	  %246:tgpr, $cpsr = tADDi3 %245:tgpr, 1, 14, $noreg
7216B	  %247:tgpr, dead $cpsr = tADC %247:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7232B	  tSTRspi %246:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
7248B	  tSTRspi %247:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
7264B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7280B	  $r0 = COPY %217:tgpr
7296B	  $r2 = COPY %246:tgpr
7312B	  $r3 = COPY %247:tgpr
7328B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7344B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7360B	  dead %248:tgpr = COPY $r0
7376B	  %252:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
7392B	  %250:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
7408B	  %251:tgpr, $cpsr = tADDi3 %250:tgpr, 1, 14, $noreg
7440B	  %252:tgpr, dead $cpsr = tADC %252:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7456B	  tSTRspi %251:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
7472B	  tSTRspi %252:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
7488B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7504B	  $r0 = COPY %217:tgpr
7520B	  $r2 = COPY %251:tgpr
7536B	  $r3 = COPY %252:tgpr
7552B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7568B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7584B	  dead %253:tgpr = COPY $r0
7600B	  %257:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
7616B	  %255:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
7632B	  %256:tgpr, $cpsr = tADDi3 %255:tgpr, 1, 14, $noreg
7664B	  %257:tgpr, dead $cpsr = tADC %257:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7680B	  tSTRspi %256:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
7696B	  tSTRspi %257:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
7712B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7728B	  $r0 = COPY %217:tgpr
7744B	  $r2 = COPY %256:tgpr
7760B	  $r3 = COPY %257:tgpr
7776B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
7792B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7808B	  dead %258:tgpr = COPY $r0
7824B	  %262:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
7840B	  %260:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
7856B	  %261:tgpr, $cpsr = tADDi3 %260:tgpr, 1, 14, $noreg
7888B	  %262:tgpr, dead $cpsr = tADC %262:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
7904B	  tSTRspi %261:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
7920B	  tSTRspi %262:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
7936B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7952B	  $r0 = COPY %217:tgpr
7968B	  $r2 = COPY %261:tgpr
7984B	  $r3 = COPY %262:tgpr
8000B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8016B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8032B	  dead %263:tgpr = COPY $r0
8048B	  %267:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
8064B	  %265:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
8080B	  %266:tgpr, $cpsr = tADDi3 %265:tgpr, 1, 14, $noreg
8112B	  %267:tgpr, dead $cpsr = tADC %267:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8128B	  tSTRspi %266:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
8144B	  tSTRspi %267:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
8160B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8176B	  $r0 = COPY %217:tgpr
8192B	  $r2 = COPY %266:tgpr
8208B	  $r3 = COPY %267:tgpr
8224B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8240B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8256B	  dead %268:tgpr = COPY $r0
8272B	  %272:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
8288B	  %270:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
8304B	  %271:tgpr, $cpsr = tADDi3 %270:tgpr, 1, 14, $noreg
8336B	  %272:tgpr, dead $cpsr = tADC %272:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8352B	  tSTRspi %271:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
8368B	  tSTRspi %272:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
8384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8400B	  $r0 = COPY %217:tgpr
8416B	  $r2 = COPY %271:tgpr
8432B	  $r3 = COPY %272:tgpr
8448B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8464B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8480B	  dead %273:tgpr = COPY $r0
8496B	  %277:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
8512B	  %275:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
8528B	  %276:tgpr, $cpsr = tADDi3 %275:tgpr, 1, 14, $noreg
8560B	  %277:tgpr, dead $cpsr = tADC %277:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8576B	  tSTRspi %276:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
8592B	  tSTRspi %277:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
8608B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8624B	  $r0 = COPY %217:tgpr
8640B	  $r2 = COPY %276:tgpr
8656B	  $r3 = COPY %277:tgpr
8672B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8688B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8704B	  dead %278:tgpr = COPY $r0
8720B	  %282:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
8736B	  %280:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
8752B	  %281:tgpr, $cpsr = tADDi3 %280:tgpr, 1, 14, $noreg
8784B	  %282:tgpr, dead $cpsr = tADC %282:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
8800B	  tSTRspi %281:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
8816B	  tSTRspi %282:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
8832B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8848B	  $r0 = COPY %217:tgpr
8864B	  $r2 = COPY %281:tgpr
8880B	  $r3 = COPY %282:tgpr
8896B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
8912B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8928B	  dead %283:tgpr = COPY $r0
8944B	  %287:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
8960B	  %285:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
8976B	  %286:tgpr, $cpsr = tADDi3 %285:tgpr, 1, 14, $noreg
9008B	  %287:tgpr, dead $cpsr = tADC %287:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9024B	  tSTRspi %286:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
9040B	  tSTRspi %287:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
9056B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9072B	  $r0 = COPY %217:tgpr
9088B	  $r2 = COPY %286:tgpr
9104B	  $r3 = COPY %287:tgpr
9120B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9136B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9152B	  dead %288:tgpr = COPY $r0
9168B	  %292:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
9184B	  %290:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
9200B	  %291:tgpr, $cpsr = tADDi3 %290:tgpr, 1, 14, $noreg
9232B	  %292:tgpr, dead $cpsr = tADC %292:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9248B	  tSTRspi %291:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
9264B	  tSTRspi %292:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
9280B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9296B	  $r0 = COPY %217:tgpr
9312B	  $r2 = COPY %291:tgpr
9328B	  $r3 = COPY %292:tgpr
9344B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9360B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9376B	  dead %293:tgpr = COPY $r0
9392B	  %297:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
9408B	  %295:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
9424B	  %296:tgpr, $cpsr = tADDi3 %295:tgpr, 1, 14, $noreg
9456B	  %297:tgpr, dead $cpsr = tADC %297:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9472B	  tSTRspi %296:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
9488B	  tSTRspi %297:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
9504B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9520B	  $r0 = COPY %217:tgpr
9536B	  $r2 = COPY %296:tgpr
9552B	  $r3 = COPY %297:tgpr
9568B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9584B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9600B	  dead %298:tgpr = COPY $r0
9616B	  %302:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
9632B	  %300:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
9648B	  %301:tgpr, $cpsr = tADDi3 %300:tgpr, 1, 14, $noreg
9680B	  %302:tgpr, dead $cpsr = tADC %302:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9696B	  tSTRspi %301:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
9712B	  tSTRspi %302:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
9728B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9744B	  $r0 = COPY %217:tgpr
9760B	  $r2 = COPY %301:tgpr
9776B	  $r3 = COPY %302:tgpr
9792B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
9808B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9824B	  dead %303:tgpr = COPY $r0
9840B	  %307:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
9856B	  %305:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
9872B	  %306:tgpr, $cpsr = tADDi3 %305:tgpr, 1, 14, $noreg
9904B	  %307:tgpr, dead $cpsr = tADC %307:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
9920B	  tSTRspi %306:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
9936B	  tSTRspi %307:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
9952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9968B	  $r0 = COPY %217:tgpr
9984B	  $r2 = COPY %306:tgpr
10000B	  $r3 = COPY %307:tgpr
10016B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10032B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10048B	  dead %308:tgpr = COPY $r0
10064B	  %312:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
10080B	  %310:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
10096B	  %311:tgpr, $cpsr = tADDi3 %310:tgpr, 1, 14, $noreg
10128B	  %312:tgpr, dead $cpsr = tADC %312:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
10144B	  tSTRspi %311:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
10160B	  tSTRspi %312:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
10176B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10192B	  $r0 = COPY %217:tgpr
10208B	  $r2 = COPY %311:tgpr
10224B	  $r3 = COPY %312:tgpr
10240B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10256B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10272B	  dead %313:tgpr = COPY $r0
10288B	  %317:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
10304B	  %315:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
10320B	  %316:tgpr, $cpsr = tADDi3 %315:tgpr, 1, 14, $noreg
10352B	  %317:tgpr, dead $cpsr = tADC %317:tgpr(tied-def 0), %5:tgpr, 14, $noreg, implicit killed $cpsr
10368B	  tSTRspi %316:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
10384B	  tSTRspi %317:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
10400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10416B	  $r0 = COPY %217:tgpr
10432B	  $r2 = COPY %316:tgpr
10448B	  $r3 = COPY %317:tgpr
10464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit killed $r3, implicit-def $sp, implicit-def $r0
10480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10496B	  dead %318:tgpr = COPY $r0
10512B	  %319:tgpr = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
10528B	  $r0 = COPY %319:tgpr
10544B	  tBX_RET 14, $noreg, implicit $r0

# End machine code for function moreThan20Variables.

Skipping pass 'Machine Instruction Scheduler' on function moreThan20Variables

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - BB0[]: float = 1.0, int = 8

********** BASIC REGISTER ALLOCATION **********
********** Function: moreThan20Variables
********** Compute Spill Weights **********
********** Function: moreThan20Variables
Enqueuing %0
Enqueuing %1
Enqueuing %2
Enqueuing %3
Enqueuing %4
Enqueuing %5
Enqueuing %6
Enqueuing %7
Enqueuing %8
Enqueuing %9
Enqueuing %10
Enqueuing %11
Enqueuing %12
Enqueuing %13
Enqueuing %15
Enqueuing %16
Enqueuing %17
Enqueuing %18
Enqueuing %19
Enqueuing %20
Enqueuing %21
Enqueuing %22
Enqueuing %23
Enqueuing %24
Enqueuing %26
Enqueuing %27
Enqueuing %28
Enqueuing %29
Enqueuing %30
Enqueuing %32
Enqueuing %33
Enqueuing %34
Enqueuing %35
Enqueuing %36
Enqueuing %38
Enqueuing %39
Enqueuing %40
Enqueuing %41
Enqueuing %42
Enqueuing %43
Enqueuing %44
Enqueuing %45
Enqueuing %46
Enqueuing %47
Enqueuing %49
Enqueuing %50
Enqueuing %51
Enqueuing %52
Enqueuing %53
Enqueuing %55
Enqueuing %56
Enqueuing %57
Enqueuing %58
Enqueuing %59
Enqueuing %61
Enqueuing %62
Enqueuing %63
Enqueuing %64
Enqueuing %65
Enqueuing %67
Enqueuing %68
Enqueuing %69
Enqueuing %70
Enqueuing %71
Enqueuing %73
Enqueuing %74
Enqueuing %75
Enqueuing %76
Enqueuing %77
Enqueuing %79
Enqueuing %80
Enqueuing %81
Enqueuing %82
Enqueuing %83
Enqueuing %85
Enqueuing %86
Enqueuing %87
Enqueuing %88
Enqueuing %89
Enqueuing %90
Enqueuing %91
Enqueuing %92
Enqueuing %93
Enqueuing %94
Enqueuing %96
Enqueuing %97
Enqueuing %98
Enqueuing %99
Enqueuing %100
Enqueuing %102
Enqueuing %103
Enqueuing %104
Enqueuing %105
Enqueuing %106
Enqueuing %108
Enqueuing %109
Enqueuing %110
Enqueuing %111
Enqueuing %112
Enqueuing %114
Enqueuing %115
Enqueuing %116
Enqueuing %117
Enqueuing %118
Enqueuing %120
Enqueuing %121
Enqueuing %122
Enqueuing %123
Enqueuing %124
Enqueuing %125
Enqueuing %126
Enqueuing %129
Enqueuing %130
Enqueuing %133
Enqueuing %134
Enqueuing %135
Enqueuing %136
Enqueuing %137
Enqueuing %138
Enqueuing %142
Enqueuing %143
Enqueuing %144
Enqueuing %145
Enqueuing %146
Enqueuing %147
Enqueuing %148
Enqueuing %149
Enqueuing %150
Enqueuing %151
Enqueuing %152
Enqueuing %155
Enqueuing %156
Enqueuing %157
Enqueuing %158
Enqueuing %159
Enqueuing %161
Enqueuing %162
Enqueuing %163
Enqueuing %164
Enqueuing %165
Enqueuing %167
Enqueuing %168
Enqueuing %169
Enqueuing %170
Enqueuing %171
Enqueuing %172
Enqueuing %174
Enqueuing %180
Enqueuing %181
Enqueuing %182
Enqueuing %183
Enqueuing %185
Enqueuing %186
Enqueuing %188
Enqueuing %190
Enqueuing %191
Enqueuing %192
Enqueuing %193
Enqueuing %194
Enqueuing %196
Enqueuing %197
Enqueuing %198
Enqueuing %201
Enqueuing %202
Enqueuing %203
Enqueuing %204
Enqueuing %205
Enqueuing %206
Enqueuing %207
Enqueuing %208
Enqueuing %212
Enqueuing %214
Enqueuing %215
Enqueuing %216
Enqueuing %217
Enqueuing %218
Enqueuing %220
Enqueuing %221
Enqueuing %222
Enqueuing %223
Enqueuing %225
Enqueuing %226
Enqueuing %227
Enqueuing %228
Enqueuing %230
Enqueuing %231
Enqueuing %232
Enqueuing %233
Enqueuing %235
Enqueuing %236
Enqueuing %237
Enqueuing %238
Enqueuing %240
Enqueuing %241
Enqueuing %242
Enqueuing %243
Enqueuing %245
Enqueuing %246
Enqueuing %247
Enqueuing %248
Enqueuing %250
Enqueuing %251
Enqueuing %252
Enqueuing %253
Enqueuing %255
Enqueuing %256
Enqueuing %257
Enqueuing %258
Enqueuing %260
Enqueuing %261
Enqueuing %262
Enqueuing %263
Enqueuing %265
Enqueuing %266
Enqueuing %267
Enqueuing %268
Enqueuing %270
Enqueuing %271
Enqueuing %272
Enqueuing %273
Enqueuing %275
Enqueuing %276
Enqueuing %277
Enqueuing %278
Enqueuing %280
Enqueuing %281
Enqueuing %282
Enqueuing %283
Enqueuing %285
Enqueuing %286
Enqueuing %287
Enqueuing %288
Enqueuing %290
Enqueuing %291
Enqueuing %292
Enqueuing %293
Enqueuing %295
Enqueuing %296
Enqueuing %297
Enqueuing %298
Enqueuing %300
Enqueuing %301
Enqueuing %302
Enqueuing %303
Enqueuing %305
Enqueuing %306
Enqueuing %307
Enqueuing %308
Enqueuing %310
Enqueuing %311
Enqueuing %312
Enqueuing %313
Enqueuing %315
Enqueuing %316
Enqueuing %317
Enqueuing %318
Enqueuing %319

selectOrSplit tGPR:%0 [48r,64r:0) 0@48r  weight:INF w=INF
AllocationOrder(tGPR) = [ $r0 $r1 $r2 $r3 $r4 $r5 $r6 ]
hints: $r0
assigning %0 to $r0: R0 [48r,64r:0) 0@48r

selectOrSplit tGPR:%125 [3328r,3344r:0) 0@3328r  weight:INF w=INF
assigning %125 to $r0: R0 [3328r,3344r:0) 0@3328r

selectOrSplit tGPR:%130 [3408r,3440r:0) 0@3408r  weight:INF w=INF
assigning %130 to $r0: R0 [3408r,3440r:0) 0@3408r

selectOrSplit tGPR:%298 [9600r,9600d:0) 0@9600r  weight:INF w=INF
hints: $r0
assigning %298 to $r0: R0 [9600r,9600d:0) 0@9600r

selectOrSplit tGPR:%308 [10048r,10048d:0) 0@10048r  weight:INF w=INF
hints: $r0
assigning %308 to $r0: R0 [10048r,10048d:0) 0@10048r

selectOrSplit tGPR:%313 [10272r,10272d:0) 0@10272r  weight:INF w=INF
hints: $r0
assigning %313 to $r0: R0 [10272r,10272d:0) 0@10272r

selectOrSplit tGPR:%315 [10304r,10320r:0) 0@10304r  weight:INF w=INF
assigning %315 to $r0: R0 [10304r,10320r:0) 0@10304r

selectOrSplit tGPR:%310 [10080r,10096r:0) 0@10080r  weight:INF w=INF
assigning %310 to $r0: R0 [10080r,10096r:0) 0@10080r

selectOrSplit tGPR:%300 [9632r,9648r:0) 0@9632r  weight:INF w=INF
assigning %300 to $r0: R0 [9632r,9648r:0) 0@9632r

selectOrSplit tGPR:%303 [9824r,9824d:0) 0@9824r  weight:INF w=INF
hints: $r0
assigning %303 to $r0: R0 [9824r,9824d:0) 0@9824r

selectOrSplit tGPR:%305 [9856r,9872r:0) 0@9856r  weight:INF w=INF
assigning %305 to $r0: R0 [9856r,9872r:0) 0@9856r

selectOrSplit tGPR:%134 [3504r,3536r:0) 0@3504r  weight:INF w=INF
assigning %134 to $r0: R0 [3504r,3536r:0) 0@3504r

selectOrSplit tGPR:%138 [3600r,3632r:0) 0@3600r  weight:INF w=INF
assigning %138 to $r0: R0 [3600r,3632r:0) 0@3600r

selectOrSplit tGPR:%293 [9376r,9376d:0) 0@9376r  weight:INF w=INF
hints: $r0
assigning %293 to $r0: R0 [9376r,9376d:0) 0@9376r

selectOrSplit tGPR:%295 [9408r,9424r:0) 0@9408r  weight:INF w=INF
assigning %295 to $r0: R0 [9408r,9424r:0) 0@9408r

selectOrSplit tGPR:%288 [9152r,9152d:0) 0@9152r  weight:INF w=INF
hints: $r0
assigning %288 to $r0: R0 [9152r,9152d:0) 0@9152r

selectOrSplit tGPR:%290 [9184r,9200r:0) 0@9184r  weight:INF w=INF
assigning %290 to $r0: R0 [9184r,9200r:0) 0@9184r

selectOrSplit tGPR:%278 [8704r,8704d:0) 0@8704r  weight:INF w=INF
hints: $r0
assigning %278 to $r0: R0 [8704r,8704d:0) 0@8704r

selectOrSplit tGPR:%283 [8928r,8928d:0) 0@8928r  weight:INF w=INF
hints: $r0
assigning %283 to $r0: R0 [8928r,8928d:0) 0@8928r

selectOrSplit tGPR:%285 [8960r,8976r:0) 0@8960r  weight:INF w=INF
assigning %285 to $r0: R0 [8960r,8976r:0) 0@8960r

selectOrSplit tGPR:%280 [8736r,8752r:0) 0@8736r  weight:INF w=INF
assigning %280 to $r0: R0 [8736r,8752r:0) 0@8736r

selectOrSplit tGPR:%238 [6912r,6912d:0) 0@6912r  weight:INF w=INF
hints: $r0
assigning %238 to $r0: R0 [6912r,6912d:0) 0@6912r

selectOrSplit tGPR:%258 [7808r,7808d:0) 0@7808r  weight:INF w=INF
hints: $r0
assigning %258 to $r0: R0 [7808r,7808d:0) 0@7808r

selectOrSplit tGPR:%268 [8256r,8256d:0) 0@8256r  weight:INF w=INF
hints: $r0
assigning %268 to $r0: R0 [8256r,8256d:0) 0@8256r

selectOrSplit tGPR:%273 [8480r,8480d:0) 0@8480r  weight:INF w=INF
hints: $r0
assigning %273 to $r0: R0 [8480r,8480d:0) 0@8480r

selectOrSplit tGPR:%275 [8512r,8528r:0) 0@8512r  weight:INF w=INF
assigning %275 to $r0: R0 [8512r,8528r:0) 0@8512r

selectOrSplit tGPR:%270 [8288r,8304r:0) 0@8288r  weight:INF w=INF
assigning %270 to $r0: R0 [8288r,8304r:0) 0@8288r

selectOrSplit tGPR:%260 [7840r,7856r:0) 0@7840r  weight:INF w=INF
assigning %260 to $r0: R0 [7840r,7856r:0) 0@7840r

selectOrSplit tGPR:%263 [8032r,8032d:0) 0@8032r  weight:INF w=INF
hints: $r0
assigning %263 to $r0: R0 [8032r,8032d:0) 0@8032r

selectOrSplit tGPR:%265 [8064r,8080r:0) 0@8064r  weight:INF w=INF
assigning %265 to $r0: R0 [8064r,8080r:0) 0@8064r

selectOrSplit tGPR:%240 [6944r,6960r:0) 0@6944r  weight:INF w=INF
assigning %240 to $r0: R0 [6944r,6960r:0) 0@6944r

selectOrSplit tGPR:%248 [7360r,7360d:0) 0@7360r  weight:INF w=INF
hints: $r0
assigning %248 to $r0: R0 [7360r,7360d:0) 0@7360r

selectOrSplit tGPR:%253 [7584r,7584d:0) 0@7584r  weight:INF w=INF
hints: $r0
assigning %253 to $r0: R0 [7584r,7584d:0) 0@7584r

selectOrSplit tGPR:%255 [7616r,7632r:0) 0@7616r  weight:INF w=INF
assigning %255 to $r0: R0 [7616r,7632r:0) 0@7616r

selectOrSplit tGPR:%250 [7392r,7408r:0) 0@7392r  weight:INF w=INF
assigning %250 to $r0: R0 [7392r,7408r:0) 0@7392r

selectOrSplit tGPR:%243 [7136r,7136d:0) 0@7136r  weight:INF w=INF
hints: $r0
assigning %243 to $r0: R0 [7136r,7136d:0) 0@7136r

selectOrSplit tGPR:%245 [7168r,7184r:0) 0@7168r  weight:INF w=INF
assigning %245 to $r0: R0 [7168r,7184r:0) 0@7168r

selectOrSplit tGPR:%8 [240r,256r:0) 0@240r  weight:INF w=INF
assigning %8 to $r0: R0 [240r,256r:0) 0@240r

selectOrSplit tGPR:%204 [5408r,5424r:0) 0@5408r  weight:INF w=INF
assigning %204 to $r0: R0 [5408r,5424r:0) 0@5408r

selectOrSplit tGPR:%218 [6016r,6016d:0) 0@6016r  weight:INF w=INF
hints: $r0
assigning %218 to $r0: R0 [6016r,6016d:0) 0@6016r

selectOrSplit tGPR:%228 [6464r,6464d:0) 0@6464r  weight:INF w=INF
hints: $r0
assigning %228 to $r0: R0 [6464r,6464d:0) 0@6464r

selectOrSplit tGPR:%233 [6688r,6688d:0) 0@6688r  weight:INF w=INF
hints: $r0
assigning %233 to $r0: R0 [6688r,6688d:0) 0@6688r

selectOrSplit tGPR:%235 [6720r,6736r:0) 0@6720r  weight:INF w=INF
assigning %235 to $r0: R0 [6720r,6736r:0) 0@6720r

selectOrSplit tGPR:%230 [6496r,6512r:0) 0@6496r  weight:INF w=INF
assigning %230 to $r0: R0 [6496r,6512r:0) 0@6496r

selectOrSplit tGPR:%220 [6048r,6064r:0) 0@6048r  weight:INF w=INF
assigning %220 to $r0: R0 [6048r,6064r:0) 0@6048r

selectOrSplit tGPR:%223 [6240r,6240d:0) 0@6240r  weight:INF w=INF
hints: $r0
assigning %223 to $r0: R0 [6240r,6240d:0) 0@6240r

selectOrSplit tGPR:%225 [6272r,6288r:0) 0@6272r  weight:INF w=INF
assigning %225 to $r0: R0 [6272r,6288r:0) 0@6272r

selectOrSplit tGPR:%208 [5584r,5616r:0) 0@5584r  weight:INF w=INF
hints: $r1
assigning %208 to $r1: R1 [5584r,5616r:0) 0@5584r

selectOrSplit tGPR:%212 [5760r,5776r:0) 0@5760r  weight:INF w=INF
hints: $r0
assigning %212 to $r0: R0 [5760r,5776r:0) 0@5760r

selectOrSplit tGPR:%214 [5808r,5824r:0) 0@5808r  weight:INF w=INF
assigning %214 to $r0: R0 [5808r,5824r:0) 0@5808r

selectOrSplit tGPR:%19 [528r,544r:0) 0@528r  weight:INF w=INF
assigning %19 to $r0: R0 [528r,544r:0) 0@528r

selectOrSplit tGPR:%42 [1136r,1152r:0) 0@1136r  weight:INF w=INF
assigning %42 to $r0: R0 [1136r,1152r:0) 0@1136r

selectOrSplit tGPR:%89 [2384r,2400r:0) 0@2384r  weight:INF w=INF
assigning %89 to $r0: R0 [2384r,2400r:0) 0@2384r

selectOrSplit tGPR:%192 [5104r,5120r:0) 0@5104r  weight:INF w=INF
assigning %192 to $r0: R0 [5104r,5120r:0) 0@5104r

selectOrSplit tGPR:%186 [4992r,5008r:0) 0@4992r  weight:INF w=INF
assigning %186 to $r0: R0 [4992r,5008r:0) 0@4992r

selectOrSplit tGPR:%172 [4688r,4720r:0) 0@4688r  weight:INF w=INF
hints: $r1
assigning %172 to $r1: R1 [4688r,4720r:0) 0@4688r

selectOrSplit tGPR:%182 [4912r,4928r:0) 0@4912r  weight:INF w=INF
assigning %182 to $r0: R0 [4912r,4928r:0) 0@4912r

selectOrSplit tGPR:%162 [4368r,4384r:0) 0@4368r  weight:INF w=INF
assigning %162 to $r0: R0 [4368r,4384r:0) 0@4368r

selectOrSplit tGPR:%318 [10496r,10496d:0) 0@10496r  weight:INF w=INF
hints: $r0
assigning %318 to $r0: R0 [10496r,10496d:0) 0@10496r

selectOrSplit tGPR:%319 [10512r,10528r:0) 0@10512r  weight:INF w=INF
hints: $r0
assigning %319 to $r0: R0 [10512r,10528r:0) 0@10512r

selectOrSplit tGPR:%67 [1760r,1792r:0)[1792r,1824r:1) 0@1760r 1@1792r  weight:1.077586e-02 w=1.077586e-02
assigning %67 to $r0: R0 [1760r,1792r:0)[1792r,1824r:1) 0@1760r 1@1792r

selectOrSplit tGPR:%32 [832r,864r:0)[864r,896r:1) 0@832r 1@864r  weight:1.077586e-02 w=1.077586e-02
assigning %32 to $r0: R0 [832r,864r:0)[864r,896r:1) 0@832r 1@864r

selectOrSplit tGPR:%61 [1600r,1632r:0)[1632r,1664r:1) 0@1600r 1@1632r  weight:1.077586e-02 w=1.077586e-02
assigning %61 to $r0: R0 [1600r,1632r:0)[1632r,1664r:1) 0@1600r 1@1632r

selectOrSplit tGPR:%26 [672r,704r:0)[704r,736r:1) 0@672r 1@704r  weight:1.077586e-02 w=1.077586e-02
assigning %26 to $r0: R0 [672r,704r:0)[704r,736r:1) 0@672r 1@704r

selectOrSplit tGPR:%120 [3168r,3200r:0)[3200r,3232r:1) 0@3168r 1@3200r  weight:1.077586e-02 w=1.077586e-02
assigning %120 to $r0: R0 [3168r,3200r:0)[3200r,3232r:1) 0@3168r 1@3200r

selectOrSplit tGPR:%114 [3008r,3040r:0)[3040r,3072r:1) 0@3008r 1@3040r  weight:1.077586e-02 w=1.077586e-02
assigning %114 to $r0: R0 [3008r,3040r:0)[3040r,3072r:1) 0@3008r 1@3040r

selectOrSplit tGPR:%15 [384r,416r:0)[416r,448r:1) 0@384r 1@416r  weight:1.077586e-02 w=1.077586e-02
assigning %15 to $r0: R0 [384r,416r:0)[416r,448r:1) 0@384r 1@416r

selectOrSplit tGPR:%55 [1440r,1472r:0)[1472r,1504r:1) 0@1440r 1@1472r  weight:1.077586e-02 w=1.077586e-02
assigning %55 to $r0: R0 [1440r,1472r:0)[1472r,1504r:1) 0@1440r 1@1472r

selectOrSplit tGPR:%108 [2848r,2880r:0)[2880r,2912r:1) 0@2848r 1@2880r  weight:1.077586e-02 w=1.077586e-02
assigning %108 to $r0: R0 [2848r,2880r:0)[2880r,2912r:1) 0@2848r 1@2880r

selectOrSplit tGPR:%102 [2688r,2720r:0)[2720r,2752r:1) 0@2688r 1@2720r  weight:1.077586e-02 w=1.077586e-02
assigning %102 to $r0: R0 [2688r,2720r:0)[2720r,2752r:1) 0@2688r 1@2720r

selectOrSplit tGPR:%49 [1280r,1312r:0)[1312r,1344r:1) 0@1280r 1@1312r  weight:1.077586e-02 w=1.077586e-02
assigning %49 to $r0: R0 [1280r,1312r:0)[1312r,1344r:1) 0@1280r 1@1312r

selectOrSplit tGPR:%96 [2528r,2560r:0)[2560r,2592r:1) 0@2528r 1@2560r  weight:1.077586e-02 w=1.077586e-02
assigning %96 to $r0: R0 [2528r,2560r:0)[2560r,2592r:1) 0@2528r 1@2560r

selectOrSplit tGPR:%85 [2240r,2272r:0)[2272r,2304r:1) 0@2240r 1@2272r  weight:1.077586e-02 w=1.077586e-02
assigning %85 to $r0: R0 [2240r,2272r:0)[2272r,2304r:1) 0@2240r 1@2272r

selectOrSplit tGPR:%38 [992r,1024r:0)[1024r,1056r:1) 0@992r 1@1024r  weight:1.077586e-02 w=1.077586e-02
assigning %38 to $r0: R0 [992r,1024r:0)[1024r,1056r:1) 0@992r 1@1024r

selectOrSplit tGPR:%79 [2080r,2112r:0)[2112r,2144r:1) 0@2080r 1@2112r  weight:1.077586e-02 w=1.077586e-02
assigning %79 to $r0: R0 [2080r,2112r:0)[2112r,2144r:1) 0@2080r 1@2112r

selectOrSplit tGPR:%73 [1920r,1952r:0)[1952r,1984r:1) 0@1920r 1@1952r  weight:1.077586e-02 w=1.077586e-02
assigning %73 to $r0: R0 [1920r,1952r:0)[1952r,1984r:1) 0@1920r 1@1952r

selectOrSplit tGPR:%188 [4864r,4960r:2)[4960r,5040r:0)[5040r,5184r:1)[5184r,5280r:3) 0@4960r 1@5040r 2@4864r 3@5184r  weight:9.803922e-03 w=9.803922e-03
assigning %188 to $r1: R1 [4864r,4960r:2)[4960r,5040r:0)[5040r,5184r:1)[5184r,5280r:3) 0@4960r 1@5040r 2@4864r 3@5184r

selectOrSplit tGPR:%317 [10288r,10352r:0)[10352r,10448r:1) 0@10288r 1@10352r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %317 to $r3: R3 [10288r,10352r:0)[10352r,10448r:1) 0@10288r 1@10352r

selectOrSplit tGPR:%312 [10064r,10128r:0)[10128r,10224r:1) 0@10064r 1@10128r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %312 to $r3: R3 [10064r,10128r:0)[10128r,10224r:1) 0@10064r 1@10128r

selectOrSplit tGPR:%307 [9840r,9904r:0)[9904r,10000r:1) 0@9840r 1@9904r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %307 to $r3: R3 [9840r,9904r:0)[9904r,10000r:1) 0@9840r 1@9904r

selectOrSplit tGPR:%302 [9616r,9680r:0)[9680r,9776r:1) 0@9616r 1@9680r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %302 to $r3: R3 [9616r,9680r:0)[9680r,9776r:1) 0@9616r 1@9680r

selectOrSplit tGPR:%297 [9392r,9456r:0)[9456r,9552r:1) 0@9392r 1@9456r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %297 to $r3: R3 [9392r,9456r:0)[9456r,9552r:1) 0@9392r 1@9456r

selectOrSplit tGPR:%292 [9168r,9232r:0)[9232r,9328r:1) 0@9168r 1@9232r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %292 to $r3: R3 [9168r,9232r:0)[9232r,9328r:1) 0@9168r 1@9232r

selectOrSplit tGPR:%287 [8944r,9008r:0)[9008r,9104r:1) 0@8944r 1@9008r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %287 to $r3: R3 [8944r,9008r:0)[9008r,9104r:1) 0@8944r 1@9008r

selectOrSplit tGPR:%282 [8720r,8784r:0)[8784r,8880r:1) 0@8720r 1@8784r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %282 to $r3: R3 [8720r,8784r:0)[8784r,8880r:1) 0@8720r 1@8784r

selectOrSplit tGPR:%277 [8496r,8560r:0)[8560r,8656r:1) 0@8496r 1@8560r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %277 to $r3: R3 [8496r,8560r:0)[8560r,8656r:1) 0@8496r 1@8560r

selectOrSplit tGPR:%272 [8272r,8336r:0)[8336r,8432r:1) 0@8272r 1@8336r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %272 to $r3: R3 [8272r,8336r:0)[8336r,8432r:1) 0@8272r 1@8336r

selectOrSplit tGPR:%267 [8048r,8112r:0)[8112r,8208r:1) 0@8048r 1@8112r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %267 to $r3: R3 [8048r,8112r:0)[8112r,8208r:1) 0@8048r 1@8112r

selectOrSplit tGPR:%262 [7824r,7888r:0)[7888r,7984r:1) 0@7824r 1@7888r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %262 to $r3: R3 [7824r,7888r:0)[7888r,7984r:1) 0@7824r 1@7888r

selectOrSplit tGPR:%257 [7600r,7664r:0)[7664r,7760r:1) 0@7600r 1@7664r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %257 to $r3: R3 [7600r,7664r:0)[7664r,7760r:1) 0@7600r 1@7664r

selectOrSplit tGPR:%252 [7376r,7440r:0)[7440r,7536r:1) 0@7376r 1@7440r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %252 to $r3: R3 [7376r,7440r:0)[7440r,7536r:1) 0@7376r 1@7440r

selectOrSplit tGPR:%247 [7152r,7216r:0)[7216r,7312r:1) 0@7152r 1@7216r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %247 to $r3: R3 [7152r,7216r:0)[7216r,7312r:1) 0@7152r 1@7216r

selectOrSplit tGPR:%242 [6928r,6992r:0)[6992r,7088r:1) 0@6928r 1@6992r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %242 to $r3: R3 [6928r,6992r:0)[6992r,7088r:1) 0@6928r 1@6992r

selectOrSplit tGPR:%237 [6704r,6768r:0)[6768r,6864r:1) 0@6704r 1@6768r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %237 to $r3: R3 [6704r,6768r:0)[6768r,6864r:1) 0@6704r 1@6768r

selectOrSplit tGPR:%232 [6480r,6544r:0)[6544r,6640r:1) 0@6480r 1@6544r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %232 to $r3: R3 [6480r,6544r:0)[6544r,6640r:1) 0@6480r 1@6544r

selectOrSplit tGPR:%227 [6256r,6320r:0)[6320r,6416r:1) 0@6256r 1@6320r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %227 to $r3: R3 [6256r,6320r:0)[6320r,6416r:1) 0@6256r 1@6320r

selectOrSplit tGPR:%222 [6032r,6096r:0)[6096r,6192r:1) 0@6032r 1@6096r  weight:9.017858e-03 w=9.017858e-03
hints: $r3
assigning %222 to $r3: R3 [6032r,6096r:0)[6096r,6192r:1) 0@6032r 1@6096r

selectOrSplit tGPR:%70 [1840r,1856r:0)[1856r,1888r:1) 0@1840r 1@1856r  weight:9.017857e-03 w=9.017857e-03
assigning %70 to $r0: R0 [1840r,1856r:0)[1856r,1888r:1) 0@1840r 1@1856r

selectOrSplit tGPR:%12 [304r,320r:0)[320r,352r:1) 0@304r 1@320r  weight:9.017857e-03 w=9.017857e-03
assigning %12 to $r0: R0 [304r,320r:0)[320r,352r:1) 0@304r 1@320r

selectOrSplit tGPR:%64 [1680r,1696r:0)[1696r,1728r:1) 0@1680r 1@1696r  weight:9.017857e-03 w=9.017857e-03
assigning %64 to $r0: R0 [1680r,1696r:0)[1696r,1728r:1) 0@1680r 1@1696r

selectOrSplit tGPR:%29 [752r,768r:0)[768r,800r:1) 0@752r 1@768r  weight:9.017857e-03 w=9.017857e-03
assigning %29 to $r0: R0 [752r,768r:0)[768r,800r:1) 0@752r 1@768r

selectOrSplit tGPR:%58 [1520r,1536r:0)[1536r,1568r:1) 0@1520r 1@1536r  weight:9.017857e-03 w=9.017857e-03
assigning %58 to $r0: R0 [1520r,1536r:0)[1536r,1568r:1) 0@1520r 1@1536r

selectOrSplit tGPR:%123 [3248r,3264r:0)[3264r,3296r:1) 0@3248r 1@3264r  weight:9.017857e-03 w=9.017857e-03
assigning %123 to $r0: R0 [3248r,3264r:0)[3264r,3296r:1) 0@3248r 1@3264r

selectOrSplit tGPR:%117 [3088r,3104r:0)[3104r,3136r:1) 0@3088r 1@3104r  weight:9.017857e-03 w=9.017857e-03
assigning %117 to $r0: R0 [3088r,3104r:0)[3104r,3136r:1) 0@3088r 1@3104r

selectOrSplit tGPR:%52 [1360r,1376r:0)[1376r,1408r:1) 0@1360r 1@1376r  weight:9.017857e-03 w=9.017857e-03
assigning %52 to $r0: R0 [1360r,1376r:0)[1376r,1408r:1) 0@1360r 1@1376r

selectOrSplit tGPR:%111 [2928r,2944r:0)[2944r,2976r:1) 0@2928r 1@2944r  weight:9.017857e-03 w=9.017857e-03
assigning %111 to $r0: R0 [2928r,2944r:0)[2944r,2976r:1) 0@2928r 1@2944r

selectOrSplit tGPR:%105 [2768r,2784r:0)[2784r,2816r:1) 0@2768r 1@2784r  weight:9.017857e-03 w=9.017857e-03
assigning %105 to $r0: R0 [2768r,2784r:0)[2784r,2816r:1) 0@2768r 1@2784r

selectOrSplit tGPR:%99 [2608r,2624r:0)[2624r,2656r:1) 0@2608r 1@2624r  weight:9.017857e-03 w=9.017857e-03
assigning %99 to $r0: R0 [2608r,2624r:0)[2624r,2656r:1) 0@2608r 1@2624r

selectOrSplit tGPR:%23 [592r,608r:0)[608r,640r:1) 0@592r 1@608r  weight:9.017857e-03 w=9.017857e-03
assigning %23 to $r0: R0 [592r,608r:0)[608r,640r:1) 0@592r 1@608r

selectOrSplit tGPR:%46 [1200r,1216r:0)[1216r,1248r:1) 0@1200r 1@1216r  weight:9.017857e-03 w=9.017857e-03
assigning %46 to $r0: R0 [1200r,1216r:0)[1216r,1248r:1) 0@1200r 1@1216r

selectOrSplit tGPR:%93 [2448r,2464r:0)[2464r,2496r:1) 0@2448r 1@2464r  weight:9.017857e-03 w=9.017857e-03
assigning %93 to $r0: R0 [2448r,2464r:0)[2464r,2496r:1) 0@2448r 1@2464r

selectOrSplit tGPR:%18 [464r,480r:0)[480r,512r:1) 0@464r 1@480r  weight:9.017857e-03 w=9.017857e-03
assigning %18 to $r0: R0 [464r,480r:0)[480r,512r:1) 0@464r 1@480r

selectOrSplit tGPR:%7 [176r,192r:0)[192r,224r:1) 0@176r 1@192r  weight:9.017857e-03 w=9.017857e-03
assigning %7 to $r0: R0 [176r,192r:0)[192r,224r:1) 0@176r 1@192r

selectOrSplit tGPR:%88 [2320r,2336r:0)[2336r,2368r:1) 0@2320r 1@2336r  weight:9.017857e-03 w=9.017857e-03
assigning %88 to $r0: R0 [2320r,2336r:0)[2336r,2368r:1) 0@2320r 1@2336r

selectOrSplit tGPR:%41 [1072r,1088r:0)[1088r,1120r:1) 0@1072r 1@1088r  weight:9.017857e-03 w=9.017857e-03
assigning %41 to $r0: R0 [1072r,1088r:0)[1088r,1120r:1) 0@1072r 1@1088r

selectOrSplit tGPR:%82 [2160r,2176r:0)[2176r,2208r:1) 0@2160r 1@2176r  weight:9.017857e-03 w=9.017857e-03
assigning %82 to $r0: R0 [2160r,2176r:0)[2176r,2208r:1) 0@2160r 1@2176r

selectOrSplit tGPR:%35 [912r,928r:0)[928r,960r:1) 0@912r 1@928r  weight:9.017857e-03 w=9.017857e-03
assigning %35 to $r0: R0 [912r,928r:0)[928r,960r:1) 0@912r 1@928r

selectOrSplit tGPR:%76 [2000r,2016r:0)[2016r,2048r:1) 0@2000r 1@2016r  weight:9.017857e-03 w=9.017857e-03
assigning %76 to $r0: R0 [2000r,2016r:0)[2016r,2048r:1) 0@2000r 1@2016r

selectOrSplit tGPR:%216 [5792r,5856r:0)[5856r,5968r:1) 0@5792r 1@5856r  weight:8.767362e-03 w=8.767362e-03
hints: $r3
assigning %216 to $r3: R3 [5792r,5856r:0)[5856r,5968r:1) 0@5792r 1@5856r

selectOrSplit tGPR:%164 [4336r,4416r:0)[4416r,4448r:1) 0@4336r 1@4416r  weight:7.890625e-03 w=7.890625e-03
hints: $r1
assigning %164 to $r1: R1 [4336r,4416r:0)[4416r,4448r:1) 0@4336r 1@4416r

selectOrSplit tGPR:%194 [5056r,5152r:0)[5152r,5184r:1) 0@5056r 1@5152r  weight:7.575758e-03 w=7.575758e-03
assigning %194 to $r2: R2 [5056r,5152r:0)[5152r,5184r:1) 0@5056r 1@5152r

selectOrSplit tGPR:%9 [256r,288r:0) 0@256r  weight:6.944444e-03 w=6.944444e-03
assigning %9 to $r0: R0 [256r,288r:0) 0@256r

selectOrSplit tGPR:%20 [544r,576r:0) 0@544r  weight:6.944444e-03 w=6.944444e-03
assigning %20 to $r0: R0 [544r,576r:0) 0@544r

selectOrSplit tGPR:%43 [1152r,1184r:0) 0@1152r  weight:6.944444e-03 w=6.944444e-03
assigning %43 to $r0: R0 [1152r,1184r:0) 0@1152r

selectOrSplit tGPR:%90 [2400r,2432r:0) 0@2400r  weight:6.944444e-03 w=6.944444e-03
assigning %90 to $r0: R0 [2400r,2432r:0) 0@2400r

selectOrSplit tGPR:%3 [112r,160r:0) 0@112r  weight:6.696429e-03 w=6.696429e-03
assigning %3 to $r0: R0 [112r,160r:0) 0@112r

selectOrSplit tGPR:%196 [5008r,5216r:0)[5216r,5248r:1) 0@5008r 1@5216r  weight:6.250000e-03 w=6.250000e-03
assigning %196 to $r3: R3 [5008r,5216r:0)[5216r,5248r:1) 0@5008r 1@5216r

selectOrSplit tGPR:%316 [10320r,10432r:0) 0@10320r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %316 to $r2: R2 [10320r,10432r:0) 0@10320r

selectOrSplit tGPR:%311 [10096r,10208r:0) 0@10096r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %311 to $r2: R2 [10096r,10208r:0) 0@10096r

selectOrSplit tGPR:%306 [9872r,9984r:0) 0@9872r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %306 to $r2: R2 [9872r,9984r:0) 0@9872r

selectOrSplit tGPR:%301 [9648r,9760r:0) 0@9648r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %301 to $r2: R2 [9648r,9760r:0) 0@9648r

selectOrSplit tGPR:%296 [9424r,9536r:0) 0@9424r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %296 to $r2: R2 [9424r,9536r:0) 0@9424r

selectOrSplit tGPR:%291 [9200r,9312r:0) 0@9200r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %291 to $r2: R2 [9200r,9312r:0) 0@9200r

selectOrSplit tGPR:%286 [8976r,9088r:0) 0@8976r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %286 to $r2: R2 [8976r,9088r:0) 0@8976r

selectOrSplit tGPR:%281 [8752r,8864r:0) 0@8752r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %281 to $r2: R2 [8752r,8864r:0) 0@8752r

selectOrSplit tGPR:%276 [8528r,8640r:0) 0@8528r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %276 to $r2: R2 [8528r,8640r:0) 0@8528r

selectOrSplit tGPR:%271 [8304r,8416r:0) 0@8304r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %271 to $r2: R2 [8304r,8416r:0) 0@8304r

selectOrSplit tGPR:%266 [8080r,8192r:0) 0@8080r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %266 to $r2: R2 [8080r,8192r:0) 0@8080r

selectOrSplit tGPR:%261 [7856r,7968r:0) 0@7856r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %261 to $r2: R2 [7856r,7968r:0) 0@7856r

selectOrSplit tGPR:%256 [7632r,7744r:0) 0@7632r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %256 to $r2: R2 [7632r,7744r:0) 0@7632r

selectOrSplit tGPR:%251 [7408r,7520r:0) 0@7408r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %251 to $r2: R2 [7408r,7520r:0) 0@7408r

selectOrSplit tGPR:%246 [7184r,7296r:0) 0@7184r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %246 to $r2: R2 [7184r,7296r:0) 0@7184r

selectOrSplit tGPR:%241 [6960r,7072r:0) 0@6960r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %241 to $r2: R2 [6960r,7072r:0) 0@6960r

selectOrSplit tGPR:%236 [6736r,6848r:0) 0@6736r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %236 to $r2: R2 [6736r,6848r:0) 0@6736r

selectOrSplit tGPR:%231 [6512r,6624r:0) 0@6512r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %231 to $r2: R2 [6512r,6624r:0) 0@6512r

selectOrSplit tGPR:%226 [6288r,6400r:0) 0@6288r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %226 to $r2: R2 [6288r,6400r:0) 0@6288r

selectOrSplit tGPR:%221 [6064r,6176r:0) 0@6064r  weight:5.917969e-03 w=5.917969e-03
hints: $r2
assigning %221 to $r2: R2 [6064r,6176r:0) 0@6064r

selectOrSplit tGPR:%215 [5824r,5952r:0) 0@5824r  weight:5.738636e-03 w=5.738636e-03
hints: $r2
assigning %215 to $r2: R2 [5824r,5952r:0) 0@5824r

selectOrSplit tGPR:%174 [4096r,4480r:2)[4480r,4752r:0)[4752r,4816r:1) 0@4480r 1@4752r 2@4096r  weight:5.357143e-03 w=5.357143e-03
assigning %174 to $r4: R4 [4096r,4480r:2)[4480r,4752r:0)[4752r,4816r:1) 0@4480r 1@4752r 2@4096r

selectOrSplit tGPR:%165 [3680r,4128r:2)[4128r,4448r:0)[4448r,4720r:1)[4720r,4784r:3) 0@4128r 1@4448r 2@3680r 3@4720r  weight:5.319149e-03 w=5.319149e-03
assigning %165 to $r5: R5 [3680r,4128r:2)[4128r,4448r:0)[4448r,4720r:1)[4720r,4784r:3) 0@4128r 1@4448r 2@3680r 3@4720r

selectOrSplit tGPR:%136 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5344r:4)[5344r,5648r:5)[5648r,5696r:6) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r 5@5344r 6@5648r  weight:5.198529e-03 w=5.198529e-03
hints: $r2
assigning %136 to $r6: R6 [3376r,3440r:2)[3440r,3568r:0)[3568r,3632r:1)[3632r,4816r:3)[4816r,5344r:4)[5344r,5648r:5)[5648r,5696r:6) 0@3440r 1@3568r 2@3376r 3@3632r 4@4816r 5@5344r 6@5648r

selectOrSplit tGPR:%135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5616r:5)[5616r,5712r:6) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r 6@5616r  weight:5.138081e-03 w=5.138081e-03
hints: $r3
spilling: %135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5616r:5)[5616r,5712r:6) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r 6@5616r  weight:5.138081e-03
Inline spilling tGPR:%135 [3360r,3472r:2)[3472r,3536r:0)[3536r,3664r:1)[3664r,4784r:3)[4784r,5312r:4)[5312r,5616r:5)[5616r,5712r:6) 0@3472r 1@3536r 2@3360r 3@3664r 4@4784r 5@5312r 6@5616r  weight:5.138081e-03
From original %135
Merged spilled regs: SS#25 [3360r,5712r:0) 0@x  weight:0.000000e+00
spillAroundUses %135
	reload:   5592r	%320:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
	rewrite: 5616r	%320:tgpr, dead $cpsr = tORR %320:tgpr(tied-def 0), %208:tgpr, 14, $noreg

	spill:   5624r	tSTRspi killed %320:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	reload:   5288r	%321:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
	rewrite: 5312r	%321:tgpr, dead $cpsr = tORR %321:tgpr(tied-def 0), %198:tgpr, 14, $noreg

	spill:   5320r	tSTRspi killed %321:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	reload:   4760r	%322:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
	rewrite: 4784r	%322:tgpr, dead $cpsr = tORR %322:tgpr(tied-def 0), %165:tgpr, 14, $noreg

	spill:   4792r	tSTRspi killed %322:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	reload:   3640r	%323:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
	rewrite: 3664r	%323:tgpr, dead $cpsr = tORR %323:tgpr(tied-def 0), %137:tgpr, 14, $noreg

	spill:   3672r	tSTRspi killed %323:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	reload:   3448r	%324:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
	rewrite: 3472r	%324:tgpr, dead $cpsr = tAND %324:tgpr(tied-def 0), %129:tgpr, 14, $noreg

	spill:   3480r	tSTRspi killed %324:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	rewrite: 3360r	%325:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)

	spill:   3368r	tSTRspi killed %325:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	reload:   3512r	%326:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
	rewrite: 3536r	%326:tgpr, dead $cpsr = tORR %326:tgpr(tied-def 0), %134:tgpr, 14, $noreg

	spill:   3544r	tSTRspi killed %326:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
	folded:   5712r	$r3 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
queuing new interval: %320 [5592r,5616r:1)[5616r,5624r:0) 0@5616r 1@5592r  weight:INF
Enqueuing %320
queuing new interval: %321 [5288r,5312r:1)[5312r,5320r:0) 0@5312r 1@5288r  weight:INF
Enqueuing %321
queuing new interval: %322 [4760r,4784r:1)[4784r,4792r:0) 0@4784r 1@4760r  weight:INF
Enqueuing %322
queuing new interval: %323 [3640r,3664r:1)[3664r,3672r:0) 0@3664r 1@3640r  weight:INF
Enqueuing %323
queuing new interval: %324 [3448r,3472r:1)[3472r,3480r:0) 0@3472r 1@3448r  weight:INF
Enqueuing %324
queuing new interval: %325 [3360r,3368r:0) 0@3360r  weight:INF
Enqueuing %325
queuing new interval: %326 [3512r,3536r:1)[3536r,3544r:0) 0@3536r 1@3512r  weight:INF
Enqueuing %326

selectOrSplit tGPR:%320 [5592r,5616r:1)[5616r,5624r:0) 0@5616r 1@5592r  weight:INF w=INF
assigning %320 to $r0: R0 [5592r,5616r:1)[5616r,5624r:0) 0@5616r 1@5592r

selectOrSplit tGPR:%321 [5288r,5312r:1)[5312r,5320r:0) 0@5312r 1@5288r  weight:INF w=INF
assigning %321 to $r0: R0 [5288r,5312r:1)[5312r,5320r:0) 0@5312r 1@5288r

selectOrSplit tGPR:%326 [3512r,3536r:1)[3536r,3544r:0) 0@3536r 1@3512r  weight:INF w=INF
assigning %326 to $r1: R1 [3512r,3536r:1)[3536r,3544r:0) 0@3536r 1@3512r

selectOrSplit tGPR:%322 [4760r,4784r:1)[4784r,4792r:0) 0@4784r 1@4760r  weight:INF w=INF
assigning %322 to $r0: R0 [4760r,4784r:1)[4784r,4792r:0) 0@4784r 1@4760r

selectOrSplit tGPR:%323 [3640r,3664r:1)[3664r,3672r:0) 0@3664r 1@3640r  weight:INF w=INF
assigning %323 to $r0: R0 [3640r,3664r:1)[3664r,3672r:0) 0@3664r 1@3640r

selectOrSplit tGPR:%324 [3448r,3472r:1)[3472r,3480r:0) 0@3472r 1@3448r  weight:INF w=INF
assigning %324 to $r0: R0 [3448r,3472r:1)[3472r,3480r:0) 0@3472r 1@3448r

selectOrSplit tGPR:%325 [3360r,3368r:0) 0@3360r  weight:INF w=INF
assigning %325 to $r0: R0 [3360r,3368r:0) 0@3360r

selectOrSplit tGPR:%151 [4064r,4096r:0) 0@4064r  weight:4.675926e-03 w=4.675926e-03
hints: $r0
assigning %151 to $r0: R0 [4064r,4096r:0) 0@4064r

selectOrSplit tGPR:%124 [3312r,3344r:0) 0@3312r  weight:4.629630e-03 w=4.629630e-03
assigning %124 to $r1: R1 [3312r,3344r:0) 0@3312r

selectOrSplit tGPR:%198 [4832r,5280r:0)[5280r,5312r:1) 0@4832r 1@5280r  weight:4.545454e-03 w=4.545454e-03
assigning %198 to $r4: R4 [4832r,5280r:0)[5280r,5312r:1) 0@4832r 1@5280r

selectOrSplit tGPR:%1 [32r,80r:0) 0@32r  weight:4.508928e-03 w=4.508928e-03
hints: $r1
assigning %1 to $r1: R1 [32r,80r:0) 0@32r

selectOrSplit tGPR:%152 [4080r,4128r:0) 0@4080r  weight:4.508928e-03 w=4.508928e-03
hints: $r1
assigning %152 to $r1: R1 [4080r,4128r:0) 0@4080r

selectOrSplit tGPR:%59 [1584r,1632r:0) 0@1584r  weight:4.464286e-03 w=4.464286e-03
assigning %59 to $r1: R1 [1584r,1632r:0) 0@1584r

selectOrSplit tGPR:%112 [2992r,3040r:0) 0@2992r  weight:4.464286e-03 w=4.464286e-03
assigning %112 to $r1: R1 [2992r,3040r:0) 0@2992r

selectOrSplit tGPR:%100 [2672r,2720r:0) 0@2672r  weight:4.464286e-03 w=4.464286e-03
assigning %100 to $r1: R1 [2672r,2720r:0) 0@2672r

selectOrSplit tGPR:%68 [1808r,1856r:0) 0@1808r  weight:4.464286e-03 w=4.464286e-03
assigning %68 to $r1: R1 [1808r,1856r:0) 0@1808r

selectOrSplit tGPR:%28 [736r,784r:0) 0@736r  weight:4.464286e-03 w=4.464286e-03
assigning %28 to $r1: R1 [736r,784r:0) 0@736r

selectOrSplit tGPR:%118 [3152r,3200r:0) 0@3152r  weight:4.464286e-03 w=4.464286e-03
assigning %118 to $r1: R1 [3152r,3200r:0) 0@3152r

selectOrSplit tGPR:%57 [1504r,1552r:0) 0@1504r  weight:4.464286e-03 w=4.464286e-03
assigning %57 to $r1: R1 [1504r,1552r:0) 0@1504r

selectOrSplit tGPR:%47 [1264r,1312r:0) 0@1264r  weight:4.464286e-03 w=4.464286e-03
assigning %47 to $r1: R1 [1264r,1312r:0) 0@1264r

selectOrSplit tGPR:%50 [1328r,1376r:0) 0@1328r  weight:4.464286e-03 w=4.464286e-03
assigning %50 to $r1: R1 [1328r,1376r:0) 0@1328r

selectOrSplit tGPR:%115 [3056r,3104r:0) 0@3056r  weight:4.464286e-03 w=4.464286e-03
assigning %115 to $r1: R1 [3056r,3104r:0) 0@3056r

selectOrSplit tGPR:%69 [1824r,1872r:0) 0@1824r  weight:4.464286e-03 w=4.464286e-03
assigning %69 to $r2: R2 [1824r,1872r:0) 0@1824r

selectOrSplit tGPR:%197 [4848r,5248r:0)[5248r,5344r:1) 0@4848r 1@5248r  weight:4.464286e-03 w=4.464286e-03
assigning %197 to $r5: R5 [4848r,5248r:0)[5248r,5344r:1) 0@4848r 1@5248r

selectOrSplit tGPR:%103 [2736r,2784r:0) 0@2736r  weight:4.464286e-03 w=4.464286e-03
assigning %103 to $r1: R1 [2736r,2784r:0) 0@2736r

selectOrSplit tGPR:%53 [1424r,1472r:0) 0@1424r  weight:4.464286e-03 w=4.464286e-03
assigning %53 to $r1: R1 [1424r,1472r:0) 0@1424r

selectOrSplit tGPR:%97 [2576r,2624r:0) 0@2576r  weight:4.464286e-03 w=4.464286e-03
assigning %97 to $r1: R1 [2576r,2624r:0) 0@2576r

selectOrSplit tGPR:%27 [720r,768r:0) 0@720r  weight:4.464286e-03 w=4.464286e-03
assigning %27 to $r2: R2 [720r,768r:0) 0@720r

selectOrSplit tGPR:%65 [1744r,1792r:0) 0@1744r  weight:4.464286e-03 w=4.464286e-03
assigning %65 to $r1: R1 [1744r,1792r:0) 0@1744r

selectOrSplit tGPR:%87 [2304r,2352r:0) 0@2304r  weight:4.464286e-03 w=4.464286e-03
assigning %87 to $r1: R1 [2304r,2352r:0) 0@2304r

selectOrSplit tGPR:%11 [288r,336r:0) 0@288r  weight:4.464286e-03 w=4.464286e-03
assigning %11 to $r1: R1 [288r,336r:0) 0@288r

selectOrSplit tGPR:%116 [3072r,3120r:0) 0@3072r  weight:4.464286e-03 w=4.464286e-03
assigning %116 to $r2: R2 [3072r,3120r:0) 0@3072r

selectOrSplit tGPR:%94 [2512r,2560r:0) 0@2512r  weight:4.464286e-03 w=4.464286e-03
assigning %94 to $r1: R1 [2512r,2560r:0) 0@2512r

selectOrSplit tGPR:%33 [880r,928r:0) 0@880r  weight:4.464286e-03 w=4.464286e-03
assigning %33 to $r1: R1 [880r,928r:0) 0@880r

selectOrSplit tGPR:%104 [2752r,2800r:0) 0@2752r  weight:4.464286e-03 w=4.464286e-03
assigning %104 to $r2: R2 [2752r,2800r:0) 0@2752r

selectOrSplit tGPR:%63 [1664r,1712r:0) 0@1664r  weight:4.464286e-03 w=4.464286e-03
assigning %63 to $r1: R1 [1664r,1712r:0) 0@1664r

selectOrSplit tGPR:%13 [368r,416r:0) 0@368r  weight:4.464286e-03 w=4.464286e-03
assigning %13 to $r1: R1 [368r,416r:0) 0@368r

selectOrSplit tGPR:%109 [2896r,2944r:0) 0@2896r  weight:4.464286e-03 w=4.464286e-03
assigning %109 to $r1: R1 [2896r,2944r:0) 0@2896r

selectOrSplit tGPR:%110 [2912r,2960r:0) 0@2912r  weight:4.464286e-03 w=4.464286e-03
assigning %110 to $r2: R2 [2912r,2960r:0) 0@2912r

selectOrSplit tGPR:%6 [160r,208r:0) 0@160r  weight:4.464286e-03 w=4.464286e-03
assigning %6 to $r1: R1 [160r,208r:0) 0@160r

selectOrSplit tGPR:%45 [1184r,1232r:0) 0@1184r  weight:4.464286e-03 w=4.464286e-03
assigning %45 to $r1: R1 [1184r,1232r:0) 0@1184r

selectOrSplit tGPR:%86 [2288r,2336r:0) 0@2288r  weight:4.464286e-03 w=4.464286e-03
assigning %86 to $r2: R2 [2288r,2336r:0) 0@2288r

selectOrSplit tGPR:%83 [2224r,2272r:0) 0@2224r  weight:4.464286e-03 w=4.464286e-03
assigning %83 to $r1: R1 [2224r,2272r:0) 0@2224r

selectOrSplit tGPR:%81 [2144r,2192r:0) 0@2144r  weight:4.464286e-03 w=4.464286e-03
assigning %81 to $r1: R1 [2144r,2192r:0) 0@2144r

selectOrSplit tGPR:%122 [3232r,3280r:0) 0@3232r  weight:4.464286e-03 w=4.464286e-03
assigning %122 to $r1: R1 [3232r,3280r:0) 0@3232r

selectOrSplit tGPR:%106 [2832r,2880r:0) 0@2832r  weight:4.464286e-03 w=4.464286e-03
assigning %106 to $r1: R1 [2832r,2880r:0) 0@2832r

selectOrSplit tGPR:%62 [1648r,1696r:0) 0@1648r  weight:4.464286e-03 w=4.464286e-03
assigning %62 to $r2: R2 [1648r,1696r:0) 0@1648r

selectOrSplit tGPR:%10 [272r,320r:0) 0@272r  weight:4.464286e-03 w=4.464286e-03
assigning %10 to $r2: R2 [272r,320r:0) 0@272r

selectOrSplit tGPR:%51 [1344r,1392r:0) 0@1344r  weight:4.464286e-03 w=4.464286e-03
assigning %51 to $r2: R2 [1344r,1392r:0) 0@1344r

selectOrSplit tGPR:%36 [976r,1024r:0) 0@976r  weight:4.464286e-03 w=4.464286e-03
assigning %36 to $r1: R1 [976r,1024r:0) 0@976r

selectOrSplit tGPR:%203 [5392r,5440r:0) 0@5392r  weight:4.464286e-03 w=4.464286e-03
assigning %203 to $r1: R1 [5392r,5440r:0) 0@5392r

selectOrSplit tGPR:%22 [576r,624r:0) 0@576r  weight:4.464286e-03 w=4.464286e-03
assigning %22 to $r1: R1 [576r,624r:0) 0@576r

selectOrSplit tGPR:%74 [1968r,2016r:0) 0@1968r  weight:4.464286e-03 w=4.464286e-03
assigning %74 to $r1: R1 [1968r,2016r:0) 0@1968r

selectOrSplit tGPR:%91 [2416r,2464r:0) 0@2416r  weight:4.464286e-03 w=4.464286e-03
assigning %91 to $r1: R1 [2416r,2464r:0) 0@2416r

selectOrSplit tGPR:%71 [1904r,1952r:0) 0@1904r  weight:4.464286e-03 w=4.464286e-03
assigning %71 to $r1: R1 [1904r,1952r:0) 0@1904r

selectOrSplit tGPR:%98 [2592r,2640r:0) 0@2592r  weight:4.464286e-03 w=4.464286e-03
assigning %98 to $r2: R2 [2592r,2640r:0) 0@2592r

selectOrSplit tGPR:%21 [560r,608r:0) 0@560r  weight:4.464286e-03 w=4.464286e-03
assigning %21 to $r2: R2 [560r,608r:0) 0@560r

selectOrSplit tGPR:%121 [3216r,3264r:0) 0@3216r  weight:4.464286e-03 w=4.464286e-03
assigning %121 to $r2: R2 [3216r,3264r:0) 0@3216r

selectOrSplit tGPR:%44 [1168r,1216r:0) 0@1168r  weight:4.464286e-03 w=4.464286e-03
assigning %44 to $r2: R2 [1168r,1216r:0) 0@1168r

selectOrSplit tGPR:%92 [2432r,2480r:0) 0@2432r  weight:4.464286e-03 w=4.464286e-03
assigning %92 to $r2: R2 [2432r,2480r:0) 0@2432r

selectOrSplit tGPR:%30 [816r,864r:0) 0@816r  weight:4.464286e-03 w=4.464286e-03
assigning %30 to $r1: R1 [816r,864r:0) 0@816r

selectOrSplit tGPR:%24 [656r,704r:0) 0@656r  weight:4.464286e-03 w=4.464286e-03
assigning %24 to $r1: R1 [656r,704r:0) 0@656r

selectOrSplit tGPR:%190 [5072r,5120r:0) 0@5072r  weight:4.464286e-03 w=4.464286e-03
spilling $r5 interferences with %190 [5072r,5120r:0) 0@5072r  weight:4.464286e-03
unassigning %197 from $r5: R5
Inline spilling tGPR:%197 [4848r,5248r:0)[5248r,5344r:1) 0@4848r 1@5248r  weight:4.464286e-03
From original %197
Merged spilled regs: SS#26 [4848r,5344r:0) 0@x  weight:0.000000e+00
spillAroundUses %197
	rewrite: 4848r	%327:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)

	spill:   4856r	tSTRspi killed %327:tgpr, %stack.26, 0, 14, $noreg :: (store (s32) into %stack.26)
	reload:   5224r	%328:tgpr = tLDRspi %stack.26, 0, 14, $noreg :: (load (s32) from %stack.26)
	rewrite: 5248r	%328:tgpr, dead $cpsr = tEOR %328:tgpr(tied-def 0), %196:tgpr, 14, $noreg

	spill:   5256r	tSTRspi killed %328:tgpr, %stack.26, 0, 14, $noreg :: (store (s32) into %stack.26)
	reload:   5324r	%329:tgpr = tLDRspi %stack.26, 0, 14, $noreg :: (load (s32) from %stack.26)
	rewrite: 5344r	%136:tgpr, dead $cpsr = tORR %136:tgpr(tied-def 0), killed %329:tgpr, 14, $noreg

assigning %190 to $r5: R5 [5072r,5120r:0) 0@5072r
queuing new interval: %327 [4848r,4856r:0) 0@4848r  weight:INF
Enqueuing %327
queuing new interval: %328 [5224r,5248r:1)[5248r,5256r:0) 0@5248r 1@5224r  weight:INF
Enqueuing %328
queuing new interval: %329 [5324r,5344r:0) 0@5324r  weight:INF
Enqueuing %329

selectOrSplit tGPR:%327 [4848r,4856r:0) 0@4848r  weight:INF w=INF
assigning %327 to $r0: R0 [4848r,4856r:0) 0@4848r

selectOrSplit tGPR:%328 [5224r,5248r:1)[5248r,5256r:0) 0@5248r 1@5224r  weight:INF w=INF
assigning %328 to $r0: R0 [5224r,5248r:1)[5248r,5256r:0) 0@5248r 1@5224r

selectOrSplit tGPR:%329 [5324r,5344r:0) 0@5324r  weight:INF w=INF
assigning %329 to $r0: R0 [5324r,5344r:0) 0@5324r

selectOrSplit tGPR:%180 [4880r,4928r:0) 0@4880r  weight:4.464286e-03 w=4.464286e-03
assigning %180 to $r2: R2 [4880r,4928r:0) 0@4880r

selectOrSplit tGPR:%40 [1056r,1104r:0) 0@1056r  weight:4.464286e-03 w=4.464286e-03
assigning %40 to $r1: R1 [1056r,1104r:0) 0@1056r

selectOrSplit tGPR:%56 [1488r,1536r:0) 0@1488r  weight:4.464286e-03 w=4.464286e-03
assigning %56 to $r2: R2 [1488r,1536r:0) 0@1488r

selectOrSplit tGPR:%39 [1040r,1088r:0) 0@1040r  weight:4.464286e-03 w=4.464286e-03
assigning %39 to $r2: R2 [1040r,1088r:0) 0@1040r

selectOrSplit tGPR:%80 [2128r,2176r:0) 0@2128r  weight:4.464286e-03 w=4.464286e-03
assigning %80 to $r2: R2 [2128r,2176r:0) 0@2128r

selectOrSplit tGPR:%17 [448r,496r:0) 0@448r  weight:4.464286e-03 w=4.464286e-03
assigning %17 to $r1: R1 [448r,496r:0) 0@448r

selectOrSplit tGPR:%77 [2064r,2112r:0) 0@2064r  weight:4.464286e-03 w=4.464286e-03
assigning %77 to $r1: R1 [2064r,2112r:0) 0@2064r

selectOrSplit tGPR:%16 [432r,480r:0) 0@432r  weight:4.464286e-03 w=4.464286e-03
assigning %16 to $r2: R2 [432r,480r:0) 0@432r

selectOrSplit tGPR:%75 [1984r,2032r:0) 0@1984r  weight:4.464286e-03 w=4.464286e-03
assigning %75 to $r2: R2 [1984r,2032r:0) 0@1984r

selectOrSplit tGPR:%34 [896r,944r:0) 0@896r  weight:4.464286e-03 w=4.464286e-03
assigning %34 to $r2: R2 [896r,944r:0) 0@896r

selectOrSplit tGPR:%159 [4320r,4384r:0) 0@4320r  weight:4.353448e-03 w=4.353448e-03
hints: $r0
assigning %159 to $r2: R2 [4320r,4384r:0) 0@4320r

selectOrSplit tGPR:%191 [5088r,5152r:0) 0@5088r  weight:4.310345e-03 w=4.310345e-03
spilling: %191 [5088r,5152r:0) 0@5088r  weight:4.310345e-03
Inline spilling tGPR:%191 [5088r,5152r:0) 0@5088r  weight:4.310345e-03
From original %191
Merged spilled regs: SS#27 [5088r,5152r:0) 0@x  weight:0.000000e+00
spillAroundUses %191
	rewrite: 5088r	%330:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)

	spill:   5096r	tSTRspi killed %330:tgpr, %stack.27, 0, 14, $noreg :: (store (s32) into %stack.27)
	reload:   5128r	%331:tgpr = tLDRspi %stack.27, 0, 14, $noreg :: (load (s32) from %stack.27)
	rewrite: 5152r	%194:tgpr, dead $cpsr = tADC %194:tgpr(tied-def 0), killed %331:tgpr, 14, $noreg, implicit killed $cpsr

queuing new interval: %330 [5088r,5096r:0) 0@5088r  weight:INF
Enqueuing %330
queuing new interval: %331 [5128r,5152r:0) 0@5128r  weight:INF
Enqueuing %331

selectOrSplit tGPR:%330 [5088r,5096r:0) 0@5088r  weight:INF w=INF
assigning %330 to $r0: R0 [5088r,5096r:0) 0@5088r

selectOrSplit tGPR:%331 [5128r,5152r:0) 0@5128r  weight:INF w=INF
assigning %331 to $r0: R0 [5128r,5152r:0) 0@5128r

selectOrSplit tGPR:%4 [128r,192r:0) 0@128r  weight:4.310345e-03 w=4.310345e-03
assigning %4 to $r2: R2 [128r,192r:0) 0@128r

selectOrSplit tGPR:%181 [4896r,4960r:0) 0@4896r  weight:4.310345e-03 w=4.310345e-03
assigning %181 to $r3: R3 [4896r,4960r:0) 0@4896r

selectOrSplit tGPR:%185 [4976r,5040r:0) 0@4976r  weight:4.310345e-03 w=4.310345e-03
assigning %185 to $r2: R2 [4976r,5040r:0) 0@4976r

selectOrSplit tGPR:%161 [4352r,4416r:0) 0@4352r  weight:4.310345e-03 w=4.310345e-03
assigning %161 to $r3: R3 [4352r,4416r:0) 0@4352r

selectOrSplit tGPR:%155 [4144r,4224r:0) 0@4144r  weight:4.208333e-03 w=4.208333e-03
hints: $r0
assigning %155 to $r0: R0 [4144r,4224r:0) 0@4144r

selectOrSplit tGPR:%147 [3888r,3968r:0) 0@3888r  weight:4.208333e-03 w=4.208333e-03
hints: $r0
assigning %147 to $r0: R0 [3888r,3968r:0) 0@3888r

selectOrSplit tGPR:%148 [3904r,3984r:0) 0@3904r  weight:4.208333e-03 w=4.208333e-03
hints: $r1
assigning %148 to $r1: R1 [3904r,3984r:0) 0@3904r

selectOrSplit tGPR:%207 [5568r,5648r:0) 0@5568r  weight:4.208333e-03 w=4.208333e-03
hints: $r0
assigning %207 to $r2: R2 [5568r,5648r:0) 0@5568r

selectOrSplit tGPR:%146 [3760r,3840r:0) 0@3760r  weight:4.208333e-03 w=4.208333e-03
hints: $r3
assigning %146 to $r3: R3 [3760r,3840r:0) 0@3760r

selectOrSplit tGPR:%156 [4160r,4240r:0) 0@4160r  weight:4.208333e-03 w=4.208333e-03
hints: $r1
assigning %156 to $r1: R1 [4160r,4240r:0) 0@4160r

selectOrSplit tGPR:%150 [3936r,4016r:0) 0@3936r  weight:4.208333e-03 w=4.208333e-03
hints: $r3
assigning %150 to $r3: R3 [3936r,4016r:0) 0@3936r

selectOrSplit tGPR:%2 [16r,96r:0) 0@16r  weight:4.208333e-03 w=4.208333e-03
hints: $r2
assigning %2 to $r2: R2 [16r,96r:0) 0@16r

selectOrSplit tGPR:%205 [5424r,5504r:0) 0@5424r  weight:4.208333e-03 w=4.208333e-03
hints: $r2
assigning %205 to $r2: R2 [5424r,5504r:0) 0@5424r

selectOrSplit tGPR:%158 [4192r,4272r:0) 0@4192r  weight:4.208333e-03 w=4.208333e-03
hints: $r3
assigning %158 to $r3: R3 [4192r,4272r:0) 0@4192r

selectOrSplit tGPR:%169 [4528r,4608r:0) 0@4528r  weight:4.208333e-03 w=4.208333e-03
hints: $r2
assigning %169 to $r2: R2 [4528r,4608r:0) 0@4528r

selectOrSplit tGPR:%170 [4544r,4624r:0) 0@4544r  weight:4.208333e-03 w=4.208333e-03
hints: $r3
assigning %170 to $r3: R3 [4544r,4624r:0) 0@4544r

selectOrSplit tGPR:%144 [3728r,3808r:0) 0@3728r  weight:4.208333e-03 w=4.208333e-03
hints: $r1
assigning %144 to $r1: R1 [3728r,3808r:0) 0@3728r

selectOrSplit tGPR:%145 [3744r,3824r:0) 0@3744r  weight:4.208333e-03 w=4.208333e-03
hints: $r2
assigning %145 to $r2: R2 [3744r,3824r:0) 0@3744r

selectOrSplit tGPR:%167 [4496r,4576r:0) 0@4496r  weight:4.208333e-03 w=4.208333e-03
hints: $r0
assigning %167 to $r0: R0 [4496r,4576r:0) 0@4496r

selectOrSplit tGPR:%206 [5440r,5520r:0) 0@5440r  weight:4.208333e-03 w=4.208333e-03
hints: $r3
assigning %206 to $r3: R3 [5440r,5520r:0) 0@5440r

selectOrSplit tGPR:%157 [4176r,4256r:0) 0@4176r  weight:4.208333e-03 w=4.208333e-03
hints: $r2
assigning %157 to $r2: R2 [4176r,4256r:0) 0@4176r

selectOrSplit tGPR:%171 [4672r,4752r:0) 0@4672r  weight:4.208333e-03 w=4.208333e-03
hints: $r0
assigning %171 to $r0: R0 [4672r,4752r:0) 0@4672r

selectOrSplit tGPR:%143 [3712r,3792r:0) 0@3712r  weight:4.208333e-03 w=4.208333e-03
hints: $r0
assigning %143 to $r0: R0 [3712r,3792r:0) 0@3712r

selectOrSplit tGPR:%168 [4512r,4592r:0) 0@4512r  weight:4.208333e-03 w=4.208333e-03
hints: $r1
assigning %168 to $r1: R1 [4512r,4592r:0) 0@4512r

selectOrSplit tGPR:%149 [3920r,4000r:0) 0@3920r  weight:4.208333e-03 w=4.208333e-03
hints: $r2
assigning %149 to $r2: R2 [3920r,4000r:0) 0@3920r

selectOrSplit tGPR:%133 [3488r,3568r:0) 0@3488r  weight:4.166667e-03 w=4.166667e-03
assigning %133 to $r2: R2 [3488r,3568r:0) 0@3488r

selectOrSplit tGPR:%137 [3584r,3664r:0) 0@3584r  weight:4.166667e-03 w=4.166667e-03
assigning %137 to $r1: R1 [3584r,3664r:0) 0@3584r

selectOrSplit tGPR:%129 [3392r,3472r:0) 0@3392r  weight:4.166667e-03 w=4.166667e-03
assigning %129 to $r1: R1 [3392r,3472r:0) 0@3392r

selectOrSplit tGPR:%183 [4928r,5008r:0) 0@4928r  weight:4.166667e-03 w=4.166667e-03
assigning %183 to $r5: R5 [4928r,5008r:0) 0@4928r

selectOrSplit tGPR:%5 [144r,10352r:0) 0@144r  weight:4.094080e-03 w=4.094080e-03
hints: $r0
spilling: %5 [144r,10352r:0) 0@144r  weight:4.094080e-03
Inline spilling tGPR:%5 [144r,10352r:0) 0@144r  weight:4.094080e-03
From original %5
Merged spilled regs: SS#28 [144r,10352r:0) 0@x  weight:0.000000e+00
spillAroundUses %5
	rewrite: 144r	%332:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg

	spill:   152r	tSTRspi killed %332:tgpr, %stack.28, 0, 14, $noreg :: (store (s32) into %stack.28)
	reload:   5832r	%333:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 5856r	%216:tgpr, dead $cpsr = tADC %216:tgpr(tied-def 0), killed %333:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   6072r	%334:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 6096r	%222:tgpr, dead $cpsr = tADC %222:tgpr(tied-def 0), killed %334:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   6296r	%335:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 6320r	%227:tgpr, dead $cpsr = tADC %227:tgpr(tied-def 0), killed %335:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   6520r	%336:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 6544r	%232:tgpr, dead $cpsr = tADC %232:tgpr(tied-def 0), killed %336:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   6744r	%337:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 6768r	%237:tgpr, dead $cpsr = tADC %237:tgpr(tied-def 0), killed %337:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   6968r	%338:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 6992r	%242:tgpr, dead $cpsr = tADC %242:tgpr(tied-def 0), killed %338:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   7192r	%339:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 7216r	%247:tgpr, dead $cpsr = tADC %247:tgpr(tied-def 0), killed %339:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   7416r	%340:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 7440r	%252:tgpr, dead $cpsr = tADC %252:tgpr(tied-def 0), killed %340:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   7640r	%341:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 7664r	%257:tgpr, dead $cpsr = tADC %257:tgpr(tied-def 0), killed %341:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   7864r	%342:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 7888r	%262:tgpr, dead $cpsr = tADC %262:tgpr(tied-def 0), killed %342:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   8088r	%343:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 8112r	%267:tgpr, dead $cpsr = tADC %267:tgpr(tied-def 0), killed %343:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   8312r	%344:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 8336r	%272:tgpr, dead $cpsr = tADC %272:tgpr(tied-def 0), killed %344:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   8536r	%345:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 8560r	%277:tgpr, dead $cpsr = tADC %277:tgpr(tied-def 0), killed %345:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   8760r	%346:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 8784r	%282:tgpr, dead $cpsr = tADC %282:tgpr(tied-def 0), killed %346:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   8984r	%347:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 9008r	%287:tgpr, dead $cpsr = tADC %287:tgpr(tied-def 0), killed %347:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   9208r	%348:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 9232r	%292:tgpr, dead $cpsr = tADC %292:tgpr(tied-def 0), killed %348:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   9432r	%349:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 9456r	%297:tgpr, dead $cpsr = tADC %297:tgpr(tied-def 0), killed %349:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   9656r	%350:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 9680r	%302:tgpr, dead $cpsr = tADC %302:tgpr(tied-def 0), killed %350:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   9880r	%351:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 9904r	%307:tgpr, dead $cpsr = tADC %307:tgpr(tied-def 0), killed %351:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   10104r	%352:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 10128r	%312:tgpr, dead $cpsr = tADC %312:tgpr(tied-def 0), killed %352:tgpr, 14, $noreg, implicit killed $cpsr

	reload:   10328r	%353:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	rewrite: 10352r	%317:tgpr, dead $cpsr = tADC %317:tgpr(tied-def 0), killed %353:tgpr, 14, $noreg, implicit killed $cpsr

	folded:   176r	%7:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   304r	%12:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   464r	%18:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   592r	%23:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   752r	%29:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   912r	%35:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   1072r	%41:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   1200r	%46:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   1360r	%52:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   1520r	%58:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   1680r	%64:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   1840r	%70:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2000r	%76:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2160r	%82:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2320r	%88:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2448r	%93:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2608r	%99:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2768r	%105:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   2928r	%111:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   3088r	%117:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
	folded:   3248r	%123:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
queuing new interval: %332 [144r,152r:0) 0@144r  weight:INF
Enqueuing %332
queuing new interval: %333 [5832r,5856r:0) 0@5832r  weight:INF
Enqueuing %333
queuing new interval: %334 [6072r,6096r:0) 0@6072r  weight:INF
Enqueuing %334
queuing new interval: %335 [6296r,6320r:0) 0@6296r  weight:INF
Enqueuing %335
queuing new interval: %336 [6520r,6544r:0) 0@6520r  weight:INF
Enqueuing %336
queuing new interval: %337 [6744r,6768r:0) 0@6744r  weight:INF
Enqueuing %337
queuing new interval: %338 [6968r,6992r:0) 0@6968r  weight:INF
Enqueuing %338
queuing new interval: %339 [7192r,7216r:0) 0@7192r  weight:INF
Enqueuing %339
queuing new interval: %340 [7416r,7440r:0) 0@7416r  weight:INF
Enqueuing %340
queuing new interval: %341 [7640r,7664r:0) 0@7640r  weight:INF
Enqueuing %341
queuing new interval: %342 [7864r,7888r:0) 0@7864r  weight:INF
Enqueuing %342
queuing new interval: %343 [8088r,8112r:0) 0@8088r  weight:INF
Enqueuing %343
queuing new interval: %344 [8312r,8336r:0) 0@8312r  weight:INF
Enqueuing %344
queuing new interval: %345 [8536r,8560r:0) 0@8536r  weight:INF
Enqueuing %345
queuing new interval: %346 [8760r,8784r:0) 0@8760r  weight:INF
Enqueuing %346
queuing new interval: %347 [8984r,9008r:0) 0@8984r  weight:INF
Enqueuing %347
queuing new interval: %348 [9208r,9232r:0) 0@9208r  weight:INF
Enqueuing %348
queuing new interval: %349 [9432r,9456r:0) 0@9432r  weight:INF
Enqueuing %349
queuing new interval: %350 [9656r,9680r:0) 0@9656r  weight:INF
Enqueuing %350
queuing new interval: %351 [9880r,9904r:0) 0@9880r  weight:INF
Enqueuing %351
queuing new interval: %352 [10104r,10128r:0) 0@10104r  weight:INF
Enqueuing %352
queuing new interval: %353 [10328r,10352r:0) 0@10328r  weight:INF
Enqueuing %353

selectOrSplit tGPR:%332 [144r,152r:0) 0@144r  weight:INF w=INF
assigning %332 to $r1: R1 [144r,152r:0) 0@144r

selectOrSplit tGPR:%336 [6520r,6544r:0) 0@6520r  weight:INF w=INF
assigning %336 to $r0: R0 [6520r,6544r:0) 0@6520r

selectOrSplit tGPR:%338 [6968r,6992r:0) 0@6968r  weight:INF w=INF
assigning %338 to $r0: R0 [6968r,6992r:0) 0@6968r

selectOrSplit tGPR:%339 [7192r,7216r:0) 0@7192r  weight:INF w=INF
assigning %339 to $r0: R0 [7192r,7216r:0) 0@7192r

selectOrSplit tGPR:%353 [10328r,10352r:0) 0@10328r  weight:INF w=INF
assigning %353 to $r0: R0 [10328r,10352r:0) 0@10328r

selectOrSplit tGPR:%352 [10104r,10128r:0) 0@10104r  weight:INF w=INF
assigning %352 to $r0: R0 [10104r,10128r:0) 0@10104r

selectOrSplit tGPR:%351 [9880r,9904r:0) 0@9880r  weight:INF w=INF
assigning %351 to $r0: R0 [9880r,9904r:0) 0@9880r

selectOrSplit tGPR:%349 [9432r,9456r:0) 0@9432r  weight:INF w=INF
assigning %349 to $r0: R0 [9432r,9456r:0) 0@9432r

selectOrSplit tGPR:%337 [6744r,6768r:0) 0@6744r  weight:INF w=INF
assigning %337 to $r0: R0 [6744r,6768r:0) 0@6744r

selectOrSplit tGPR:%350 [9656r,9680r:0) 0@9656r  weight:INF w=INF
assigning %350 to $r0: R0 [9656r,9680r:0) 0@9656r

selectOrSplit tGPR:%347 [8984r,9008r:0) 0@8984r  weight:INF w=INF
assigning %347 to $r0: R0 [8984r,9008r:0) 0@8984r

selectOrSplit tGPR:%346 [8760r,8784r:0) 0@8760r  weight:INF w=INF
assigning %346 to $r0: R0 [8760r,8784r:0) 0@8760r

selectOrSplit tGPR:%345 [8536r,8560r:0) 0@8536r  weight:INF w=INF
assigning %345 to $r0: R0 [8536r,8560r:0) 0@8536r

selectOrSplit tGPR:%348 [9208r,9232r:0) 0@9208r  weight:INF w=INF
assigning %348 to $r0: R0 [9208r,9232r:0) 0@9208r

selectOrSplit tGPR:%343 [8088r,8112r:0) 0@8088r  weight:INF w=INF
assigning %343 to $r0: R0 [8088r,8112r:0) 0@8088r

selectOrSplit tGPR:%333 [5832r,5856r:0) 0@5832r  weight:INF w=INF
assigning %333 to $r0: R0 [5832r,5856r:0) 0@5832r

selectOrSplit tGPR:%334 [6072r,6096r:0) 0@6072r  weight:INF w=INF
assigning %334 to $r0: R0 [6072r,6096r:0) 0@6072r

selectOrSplit tGPR:%335 [6296r,6320r:0) 0@6296r  weight:INF w=INF
assigning %335 to $r0: R0 [6296r,6320r:0) 0@6296r

selectOrSplit tGPR:%344 [8312r,8336r:0) 0@8312r  weight:INF w=INF
assigning %344 to $r0: R0 [8312r,8336r:0) 0@8312r

selectOrSplit tGPR:%340 [7416r,7440r:0) 0@7416r  weight:INF w=INF
assigning %340 to $r0: R0 [7416r,7440r:0) 0@7416r

selectOrSplit tGPR:%342 [7864r,7888r:0) 0@7864r  weight:INF w=INF
assigning %342 to $r0: R0 [7864r,7888r:0) 0@7864r

selectOrSplit tGPR:%341 [7640r,7664r:0) 0@7640r  weight:INF w=INF
assigning %341 to $r0: R0 [7640r,7664r:0) 0@7640r

selectOrSplit tGPR:%163 [4384r,4480r:0) 0@4384r  weight:4.032258e-03 w=4.032258e-03
assigning %163 to $r0: R0 [4384r,4480r:0) 0@4384r

selectOrSplit tGPR:%193 [5120r,5216r:0) 0@5120r  weight:4.032258e-03 w=4.032258e-03
assigning %193 to $r5: R5 [5120r,5216r:0) 0@5120r

selectOrSplit tGPR:%201 [5360r,5472r:0) 0@5360r  weight:3.945312e-03 w=3.945312e-03
hints: $r0
assigning %201 to $r4: R4 [5360r,5472r:0) 0@5360r

selectOrSplit tGPR:%202 [5376r,5488r:0) 0@5376r  weight:3.945312e-03 w=3.945312e-03
hints: $r1
assigning %202 to $r5: R5 [5376r,5488r:0) 0@5376r

selectOrSplit tGPR:%142 [3696r,4096r:0) 0@3696r  weight:2.500000e-03 w=2.500000e-03
assigning %142 to $r4: R4 [3696r,4096r:0) 0@3696r

selectOrSplit tGPR:%217 [5920r,10416r:0) 0@5920r  weight:2.269199e-03 w=2.269199e-03
hints: $r0
assigning %217 to $r4: R4 [5920r,10416r:0) 0@5920r

selectOrSplit tGPR:%126 [3344r,5680r:0) 0@3344r  weight:7.383041e-04 w=7.383041e-04
hints: $r0
spilling: %126 [3344r,5680r:0) 0@3344r  weight:7.383041e-04
Inline spilling tGPR:%126 [3344r,5680r:0) 0@3344r  weight:7.383041e-04
From original %126
Merged spilled regs: SS#29 [3344r,5680r:0) 0@x  weight:0.000000e+00
spillAroundUses %126
	rewrite: 3344r	%354:tgpr, dead $cpsr = nsw tADDrr %124:tgpr, %125:tgpr, 14, $noreg

	spill:   3352r	tSTRspi killed %354:tgpr, %stack.29, 0, 14, $noreg :: (store (s32) into %stack.29)
	folded:   5680r	$r0 = tLDRspi %stack.29, 0, 14, $noreg :: (load (s32) from %stack.29)
queuing new interval: %354 [3344r,3352r:0) 0@3344r  weight:INF
Enqueuing %354

selectOrSplit tGPR:%354 [3344r,3352r:0) 0@3344r  weight:INF w=INF
assigning %354 to $r0: R0 [3344r,3352r:0) 0@3344r

For Slot25 and VN6:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot25 and VN5:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot25 and VN4:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot25 and VN3:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot25 and VN0:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot25 and VN2:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot25 and VN1:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot26 and VN0:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot26 and VN1:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot27 and VN0:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot28 and VN0:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 

For Slot29 and VN0:
Equal spills in BB: 0 
Orders size is 1
BB0,
Finally inserted spills in BB: 
Finally removed spills in BB: 
Post alloc VirtRegMap:
********** REGISTER MAP **********
[%0 -> $r0] tGPR
[%1 -> $r1] tGPR
[%2 -> $r2] tGPR
[%3 -> $r0] tGPR
[%4 -> $r2] tGPR
[%6 -> $r1] tGPR
[%7 -> $r0] tGPR
[%8 -> $r0] tGPR
[%9 -> $r0] tGPR
[%10 -> $r2] tGPR
[%11 -> $r1] tGPR
[%12 -> $r0] tGPR
[%13 -> $r1] tGPR
[%15 -> $r0] tGPR
[%16 -> $r2] tGPR
[%17 -> $r1] tGPR
[%18 -> $r0] tGPR
[%19 -> $r0] tGPR
[%20 -> $r0] tGPR
[%21 -> $r2] tGPR
[%22 -> $r1] tGPR
[%23 -> $r0] tGPR
[%24 -> $r1] tGPR
[%26 -> $r0] tGPR
[%27 -> $r2] tGPR
[%28 -> $r1] tGPR
[%29 -> $r0] tGPR
[%30 -> $r1] tGPR
[%32 -> $r0] tGPR
[%33 -> $r1] tGPR
[%34 -> $r2] tGPR
[%35 -> $r0] tGPR
[%36 -> $r1] tGPR
[%38 -> $r0] tGPR
[%39 -> $r2] tGPR
[%40 -> $r1] tGPR
[%41 -> $r0] tGPR
[%42 -> $r0] tGPR
[%43 -> $r0] tGPR
[%44 -> $r2] tGPR
[%45 -> $r1] tGPR
[%46 -> $r0] tGPR
[%47 -> $r1] tGPR
[%49 -> $r0] tGPR
[%50 -> $r1] tGPR
[%51 -> $r2] tGPR
[%52 -> $r0] tGPR
[%53 -> $r1] tGPR
[%55 -> $r0] tGPR
[%56 -> $r2] tGPR
[%57 -> $r1] tGPR
[%58 -> $r0] tGPR
[%59 -> $r1] tGPR
[%61 -> $r0] tGPR
[%62 -> $r2] tGPR
[%63 -> $r1] tGPR
[%64 -> $r0] tGPR
[%65 -> $r1] tGPR
[%67 -> $r0] tGPR
[%68 -> $r1] tGPR
[%69 -> $r2] tGPR
[%70 -> $r0] tGPR
[%71 -> $r1] tGPR
[%73 -> $r0] tGPR
[%74 -> $r1] tGPR
[%75 -> $r2] tGPR
[%76 -> $r0] tGPR
[%77 -> $r1] tGPR
[%79 -> $r0] tGPR
[%80 -> $r2] tGPR
[%81 -> $r1] tGPR
[%82 -> $r0] tGPR
[%83 -> $r1] tGPR
[%85 -> $r0] tGPR
[%86 -> $r2] tGPR
[%87 -> $r1] tGPR
[%88 -> $r0] tGPR
[%89 -> $r0] tGPR
[%90 -> $r0] tGPR
[%91 -> $r1] tGPR
[%92 -> $r2] tGPR
[%93 -> $r0] tGPR
[%94 -> $r1] tGPR
[%96 -> $r0] tGPR
[%97 -> $r1] tGPR
[%98 -> $r2] tGPR
[%99 -> $r0] tGPR
[%100 -> $r1] tGPR
[%102 -> $r0] tGPR
[%103 -> $r1] tGPR
[%104 -> $r2] tGPR
[%105 -> $r0] tGPR
[%106 -> $r1] tGPR
[%108 -> $r0] tGPR
[%109 -> $r1] tGPR
[%110 -> $r2] tGPR
[%111 -> $r0] tGPR
[%112 -> $r1] tGPR
[%114 -> $r0] tGPR
[%115 -> $r1] tGPR
[%116 -> $r2] tGPR
[%117 -> $r0] tGPR
[%118 -> $r1] tGPR
[%120 -> $r0] tGPR
[%121 -> $r2] tGPR
[%122 -> $r1] tGPR
[%123 -> $r0] tGPR
[%124 -> $r1] tGPR
[%125 -> $r0] tGPR
[%129 -> $r1] tGPR
[%130 -> $r0] tGPR
[%133 -> $r2] tGPR
[%134 -> $r0] tGPR
[%136 -> $r6] tGPR
[%137 -> $r1] tGPR
[%138 -> $r0] tGPR
[%142 -> $r4] tGPR
[%143 -> $r0] tGPR
[%144 -> $r1] tGPR
[%145 -> $r2] tGPR
[%146 -> $r3] tGPR
[%147 -> $r0] tGPR
[%148 -> $r1] tGPR
[%149 -> $r2] tGPR
[%150 -> $r3] tGPR
[%151 -> $r0] tGPR
[%152 -> $r1] tGPR
[%155 -> $r0] tGPR
[%156 -> $r1] tGPR
[%157 -> $r2] tGPR
[%158 -> $r3] tGPR
[%159 -> $r2] tGPR
[%161 -> $r3] tGPR
[%162 -> $r0] tGPR
[%163 -> $r0] tGPR
[%164 -> $r1] tGPR
[%165 -> $r5] tGPR
[%167 -> $r0] tGPR
[%168 -> $r1] tGPR
[%169 -> $r2] tGPR
[%170 -> $r3] tGPR
[%171 -> $r0] tGPR
[%172 -> $r1] tGPR
[%174 -> $r4] tGPR
[%180 -> $r2] tGPR
[%181 -> $r3] tGPR
[%182 -> $r0] tGPR
[%183 -> $r5] tGPR
[%185 -> $r2] tGPR
[%186 -> $r0] tGPR
[%188 -> $r1] tGPR
[%190 -> $r5] tGPR
[%192 -> $r0] tGPR
[%193 -> $r5] tGPR
[%194 -> $r2] tGPR
[%196 -> $r3] tGPR
[%198 -> $r4] tGPR
[%201 -> $r4] tGPR
[%202 -> $r5] tGPR
[%203 -> $r1] tGPR
[%204 -> $r0] tGPR
[%205 -> $r2] tGPR
[%206 -> $r3] tGPR
[%207 -> $r2] tGPR
[%208 -> $r1] tGPR
[%212 -> $r0] tGPR
[%214 -> $r0] tGPR
[%215 -> $r2] tGPR
[%216 -> $r3] tGPR
[%217 -> $r4] tGPR
[%218 -> $r0] tGPR
[%220 -> $r0] tGPR
[%221 -> $r2] tGPR
[%222 -> $r3] tGPR
[%223 -> $r0] tGPR
[%225 -> $r0] tGPR
[%226 -> $r2] tGPR
[%227 -> $r3] tGPR
[%228 -> $r0] tGPR
[%230 -> $r0] tGPR
[%231 -> $r2] tGPR
[%232 -> $r3] tGPR
[%233 -> $r0] tGPR
[%235 -> $r0] tGPR
[%236 -> $r2] tGPR
[%237 -> $r3] tGPR
[%238 -> $r0] tGPR
[%240 -> $r0] tGPR
[%241 -> $r2] tGPR
[%242 -> $r3] tGPR
[%243 -> $r0] tGPR
[%245 -> $r0] tGPR
[%246 -> $r2] tGPR
[%247 -> $r3] tGPR
[%248 -> $r0] tGPR
[%250 -> $r0] tGPR
[%251 -> $r2] tGPR
[%252 -> $r3] tGPR
[%253 -> $r0] tGPR
[%255 -> $r0] tGPR
[%256 -> $r2] tGPR
[%257 -> $r3] tGPR
[%258 -> $r0] tGPR
[%260 -> $r0] tGPR
[%261 -> $r2] tGPR
[%262 -> $r3] tGPR
[%263 -> $r0] tGPR
[%265 -> $r0] tGPR
[%266 -> $r2] tGPR
[%267 -> $r3] tGPR
[%268 -> $r0] tGPR
[%270 -> $r0] tGPR
[%271 -> $r2] tGPR
[%272 -> $r3] tGPR
[%273 -> $r0] tGPR
[%275 -> $r0] tGPR
[%276 -> $r2] tGPR
[%277 -> $r3] tGPR
[%278 -> $r0] tGPR
[%280 -> $r0] tGPR
[%281 -> $r2] tGPR
[%282 -> $r3] tGPR
[%283 -> $r0] tGPR
[%285 -> $r0] tGPR
[%286 -> $r2] tGPR
[%287 -> $r3] tGPR
[%288 -> $r0] tGPR
[%290 -> $r0] tGPR
[%291 -> $r2] tGPR
[%292 -> $r3] tGPR
[%293 -> $r0] tGPR
[%295 -> $r0] tGPR
[%296 -> $r2] tGPR
[%297 -> $r3] tGPR
[%298 -> $r0] tGPR
[%300 -> $r0] tGPR
[%301 -> $r2] tGPR
[%302 -> $r3] tGPR
[%303 -> $r0] tGPR
[%305 -> $r0] tGPR
[%306 -> $r2] tGPR
[%307 -> $r3] tGPR
[%308 -> $r0] tGPR
[%310 -> $r0] tGPR
[%311 -> $r2] tGPR
[%312 -> $r3] tGPR
[%313 -> $r0] tGPR
[%315 -> $r0] tGPR
[%316 -> $r2] tGPR
[%317 -> $r3] tGPR
[%318 -> $r0] tGPR
[%319 -> $r0] tGPR
[%320 -> $r0] tGPR
[%321 -> $r0] tGPR
[%322 -> $r0] tGPR
[%323 -> $r0] tGPR
[%324 -> $r0] tGPR
[%325 -> $r0] tGPR
[%326 -> $r1] tGPR
[%327 -> $r0] tGPR
[%328 -> $r0] tGPR
[%329 -> $r0] tGPR
[%330 -> $r0] tGPR
[%331 -> $r0] tGPR
[%332 -> $r1] tGPR
[%333 -> $r0] tGPR
[%334 -> $r0] tGPR
[%335 -> $r0] tGPR
[%336 -> $r0] tGPR
[%337 -> $r0] tGPR
[%338 -> $r0] tGPR
[%339 -> $r0] tGPR
[%340 -> $r0] tGPR
[%341 -> $r0] tGPR
[%342 -> $r0] tGPR
[%343 -> $r0] tGPR
[%344 -> $r0] tGPR
[%345 -> $r0] tGPR
[%346 -> $r0] tGPR
[%347 -> $r0] tGPR
[%348 -> $r0] tGPR
[%349 -> $r0] tGPR
[%350 -> $r0] tGPR
[%351 -> $r0] tGPR
[%352 -> $r0] tGPR
[%353 -> $r0] tGPR
[%354 -> $r0] tGPR
[%5 -> fi#28] tGPR
[%126 -> fi#29] tGPR
[%135 -> fi#25] tGPR
[%191 -> fi#27] tGPR
[%197 -> fi#26] tGPR


********** REWRITE VIRTUAL REGISTERS **********
********** Function: moreThan20Variables
********** REGISTER MAP **********
[%0 -> $r0] tGPR
[%1 -> $r1] tGPR
[%2 -> $r2] tGPR
[%3 -> $r0] tGPR
[%4 -> $r2] tGPR
[%6 -> $r1] tGPR
[%7 -> $r0] tGPR
[%8 -> $r0] tGPR
[%9 -> $r0] tGPR
[%10 -> $r2] tGPR
[%11 -> $r1] tGPR
[%12 -> $r0] tGPR
[%13 -> $r1] tGPR
[%15 -> $r0] tGPR
[%16 -> $r2] tGPR
[%17 -> $r1] tGPR
[%18 -> $r0] tGPR
[%19 -> $r0] tGPR
[%20 -> $r0] tGPR
[%21 -> $r2] tGPR
[%22 -> $r1] tGPR
[%23 -> $r0] tGPR
[%24 -> $r1] tGPR
[%26 -> $r0] tGPR
[%27 -> $r2] tGPR
[%28 -> $r1] tGPR
[%29 -> $r0] tGPR
[%30 -> $r1] tGPR
[%32 -> $r0] tGPR
[%33 -> $r1] tGPR
[%34 -> $r2] tGPR
[%35 -> $r0] tGPR
[%36 -> $r1] tGPR
[%38 -> $r0] tGPR
[%39 -> $r2] tGPR
[%40 -> $r1] tGPR
[%41 -> $r0] tGPR
[%42 -> $r0] tGPR
[%43 -> $r0] tGPR
[%44 -> $r2] tGPR
[%45 -> $r1] tGPR
[%46 -> $r0] tGPR
[%47 -> $r1] tGPR
[%49 -> $r0] tGPR
[%50 -> $r1] tGPR
[%51 -> $r2] tGPR
[%52 -> $r0] tGPR
[%53 -> $r1] tGPR
[%55 -> $r0] tGPR
[%56 -> $r2] tGPR
[%57 -> $r1] tGPR
[%58 -> $r0] tGPR
[%59 -> $r1] tGPR
[%61 -> $r0] tGPR
[%62 -> $r2] tGPR
[%63 -> $r1] tGPR
[%64 -> $r0] tGPR
[%65 -> $r1] tGPR
[%67 -> $r0] tGPR
[%68 -> $r1] tGPR
[%69 -> $r2] tGPR
[%70 -> $r0] tGPR
[%71 -> $r1] tGPR
[%73 -> $r0] tGPR
[%74 -> $r1] tGPR
[%75 -> $r2] tGPR
[%76 -> $r0] tGPR
[%77 -> $r1] tGPR
[%79 -> $r0] tGPR
[%80 -> $r2] tGPR
[%81 -> $r1] tGPR
[%82 -> $r0] tGPR
[%83 -> $r1] tGPR
[%85 -> $r0] tGPR
[%86 -> $r2] tGPR
[%87 -> $r1] tGPR
[%88 -> $r0] tGPR
[%89 -> $r0] tGPR
[%90 -> $r0] tGPR
[%91 -> $r1] tGPR
[%92 -> $r2] tGPR
[%93 -> $r0] tGPR
[%94 -> $r1] tGPR
[%96 -> $r0] tGPR
[%97 -> $r1] tGPR
[%98 -> $r2] tGPR
[%99 -> $r0] tGPR
[%100 -> $r1] tGPR
[%102 -> $r0] tGPR
[%103 -> $r1] tGPR
[%104 -> $r2] tGPR
[%105 -> $r0] tGPR
[%106 -> $r1] tGPR
[%108 -> $r0] tGPR
[%109 -> $r1] tGPR
[%110 -> $r2] tGPR
[%111 -> $r0] tGPR
[%112 -> $r1] tGPR
[%114 -> $r0] tGPR
[%115 -> $r1] tGPR
[%116 -> $r2] tGPR
[%117 -> $r0] tGPR
[%118 -> $r1] tGPR
[%120 -> $r0] tGPR
[%121 -> $r2] tGPR
[%122 -> $r1] tGPR
[%123 -> $r0] tGPR
[%124 -> $r1] tGPR
[%125 -> $r0] tGPR
[%129 -> $r1] tGPR
[%130 -> $r0] tGPR
[%133 -> $r2] tGPR
[%134 -> $r0] tGPR
[%136 -> $r6] tGPR
[%137 -> $r1] tGPR
[%138 -> $r0] tGPR
[%142 -> $r4] tGPR
[%143 -> $r0] tGPR
[%144 -> $r1] tGPR
[%145 -> $r2] tGPR
[%146 -> $r3] tGPR
[%147 -> $r0] tGPR
[%148 -> $r1] tGPR
[%149 -> $r2] tGPR
[%150 -> $r3] tGPR
[%151 -> $r0] tGPR
[%152 -> $r1] tGPR
[%155 -> $r0] tGPR
[%156 -> $r1] tGPR
[%157 -> $r2] tGPR
[%158 -> $r3] tGPR
[%159 -> $r2] tGPR
[%161 -> $r3] tGPR
[%162 -> $r0] tGPR
[%163 -> $r0] tGPR
[%164 -> $r1] tGPR
[%165 -> $r5] tGPR
[%167 -> $r0] tGPR
[%168 -> $r1] tGPR
[%169 -> $r2] tGPR
[%170 -> $r3] tGPR
[%171 -> $r0] tGPR
[%172 -> $r1] tGPR
[%174 -> $r4] tGPR
[%180 -> $r2] tGPR
[%181 -> $r3] tGPR
[%182 -> $r0] tGPR
[%183 -> $r5] tGPR
[%185 -> $r2] tGPR
[%186 -> $r0] tGPR
[%188 -> $r1] tGPR
[%190 -> $r5] tGPR
[%192 -> $r0] tGPR
[%193 -> $r5] tGPR
[%194 -> $r2] tGPR
[%196 -> $r3] tGPR
[%198 -> $r4] tGPR
[%201 -> $r4] tGPR
[%202 -> $r5] tGPR
[%203 -> $r1] tGPR
[%204 -> $r0] tGPR
[%205 -> $r2] tGPR
[%206 -> $r3] tGPR
[%207 -> $r2] tGPR
[%208 -> $r1] tGPR
[%212 -> $r0] tGPR
[%214 -> $r0] tGPR
[%215 -> $r2] tGPR
[%216 -> $r3] tGPR
[%217 -> $r4] tGPR
[%218 -> $r0] tGPR
[%220 -> $r0] tGPR
[%221 -> $r2] tGPR
[%222 -> $r3] tGPR
[%223 -> $r0] tGPR
[%225 -> $r0] tGPR
[%226 -> $r2] tGPR
[%227 -> $r3] tGPR
[%228 -> $r0] tGPR
[%230 -> $r0] tGPR
[%231 -> $r2] tGPR
[%232 -> $r3] tGPR
[%233 -> $r0] tGPR
[%235 -> $r0] tGPR
[%236 -> $r2] tGPR
[%237 -> $r3] tGPR
[%238 -> $r0] tGPR
[%240 -> $r0] tGPR
[%241 -> $r2] tGPR
[%242 -> $r3] tGPR
[%243 -> $r0] tGPR
[%245 -> $r0] tGPR
[%246 -> $r2] tGPR
[%247 -> $r3] tGPR
[%248 -> $r0] tGPR
[%250 -> $r0] tGPR
[%251 -> $r2] tGPR
[%252 -> $r3] tGPR
[%253 -> $r0] tGPR
[%255 -> $r0] tGPR
[%256 -> $r2] tGPR
[%257 -> $r3] tGPR
[%258 -> $r0] tGPR
[%260 -> $r0] tGPR
[%261 -> $r2] tGPR
[%262 -> $r3] tGPR
[%263 -> $r0] tGPR
[%265 -> $r0] tGPR
[%266 -> $r2] tGPR
[%267 -> $r3] tGPR
[%268 -> $r0] tGPR
[%270 -> $r0] tGPR
[%271 -> $r2] tGPR
[%272 -> $r3] tGPR
[%273 -> $r0] tGPR
[%275 -> $r0] tGPR
[%276 -> $r2] tGPR
[%277 -> $r3] tGPR
[%278 -> $r0] tGPR
[%280 -> $r0] tGPR
[%281 -> $r2] tGPR
[%282 -> $r3] tGPR
[%283 -> $r0] tGPR
[%285 -> $r0] tGPR
[%286 -> $r2] tGPR
[%287 -> $r3] tGPR
[%288 -> $r0] tGPR
[%290 -> $r0] tGPR
[%291 -> $r2] tGPR
[%292 -> $r3] tGPR
[%293 -> $r0] tGPR
[%295 -> $r0] tGPR
[%296 -> $r2] tGPR
[%297 -> $r3] tGPR
[%298 -> $r0] tGPR
[%300 -> $r0] tGPR
[%301 -> $r2] tGPR
[%302 -> $r3] tGPR
[%303 -> $r0] tGPR
[%305 -> $r0] tGPR
[%306 -> $r2] tGPR
[%307 -> $r3] tGPR
[%308 -> $r0] tGPR
[%310 -> $r0] tGPR
[%311 -> $r2] tGPR
[%312 -> $r3] tGPR
[%313 -> $r0] tGPR
[%315 -> $r0] tGPR
[%316 -> $r2] tGPR
[%317 -> $r3] tGPR
[%318 -> $r0] tGPR
[%319 -> $r0] tGPR
[%320 -> $r0] tGPR
[%321 -> $r0] tGPR
[%322 -> $r0] tGPR
[%323 -> $r0] tGPR
[%324 -> $r0] tGPR
[%325 -> $r0] tGPR
[%326 -> $r1] tGPR
[%327 -> $r0] tGPR
[%328 -> $r0] tGPR
[%329 -> $r0] tGPR
[%330 -> $r0] tGPR
[%331 -> $r0] tGPR
[%332 -> $r1] tGPR
[%333 -> $r0] tGPR
[%334 -> $r0] tGPR
[%335 -> $r0] tGPR
[%336 -> $r0] tGPR
[%337 -> $r0] tGPR
[%338 -> $r0] tGPR
[%339 -> $r0] tGPR
[%340 -> $r0] tGPR
[%341 -> $r0] tGPR
[%342 -> $r0] tGPR
[%343 -> $r0] tGPR
[%344 -> $r0] tGPR
[%345 -> $r0] tGPR
[%346 -> $r0] tGPR
[%347 -> $r0] tGPR
[%348 -> $r0] tGPR
[%349 -> $r0] tGPR
[%350 -> $r0] tGPR
[%351 -> $r0] tGPR
[%352 -> $r0] tGPR
[%353 -> $r0] tGPR
[%354 -> $r0] tGPR
[%5 -> fi#28] tGPR
[%126 -> fi#29] tGPR
[%135 -> fi#25] tGPR
[%191 -> fi#27] tGPR
[%197 -> fi#26] tGPR

0B	bb.0 (%ir-block.3):
	  liveins: $r0, $r1, $r2
16B	  %2:tgpr = COPY $r2
32B	  %1:tgpr = COPY $r1
48B	  %0:tgpr = COPY $r0
64B	  tSTRspi killed %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
80B	  tSTRspi killed %1:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
96B	  tSTRspi killed %2:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
112B	  %3:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
128B	  %4:tgpr, dead $cpsr = tASRri %3:tgpr, 31, 14, $noreg
144B	  %332:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
152B	  tSTRspi killed %332:tgpr, %stack.28, 0, 14, $noreg :: (store (s32) into %stack.28)
160B	  %6:tgpr, $cpsr = tRSB killed %3:tgpr, 14, $noreg
176B	  %7:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
192B	  %7:tgpr, dead $cpsr = tSBC killed %7:tgpr(tied-def 0), killed %4:tgpr, 14, $noreg, implicit killed $cpsr
208B	  tSTRspi killed %6:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
224B	  tSTRspi killed %7:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
240B	  %8:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
256B	  %9:tgpr, dead $cpsr = tLSLri killed %8:tgpr, 1, 14, $noreg
272B	  %10:tgpr, dead $cpsr = tASRri %9:tgpr, 31, 14, $noreg
288B	  %11:tgpr, $cpsr = tRSB killed %9:tgpr, 14, $noreg
304B	  %12:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
320B	  %12:tgpr, dead $cpsr = tSBC killed %12:tgpr(tied-def 0), killed %10:tgpr, 14, $noreg, implicit killed $cpsr
336B	  tSTRspi killed %11:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
352B	  tSTRspi killed %12:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
368B	  %13:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
384B	  %15:tgpr, dead $cpsr = tMOVi8 3, 14, $noreg
416B	  %15:tgpr, dead $cpsr = nsw tMUL killed %13:tgpr, killed %15:tgpr(tied-def 0), 14, $noreg
432B	  %16:tgpr, dead $cpsr = tASRri %15:tgpr, 31, 14, $noreg
448B	  %17:tgpr, $cpsr = tRSB killed %15:tgpr, 14, $noreg
464B	  %18:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
480B	  %18:tgpr, dead $cpsr = tSBC killed %18:tgpr(tied-def 0), killed %16:tgpr, 14, $noreg, implicit killed $cpsr
496B	  tSTRspi killed %17:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
512B	  tSTRspi killed %18:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
528B	  %19:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
544B	  %20:tgpr, dead $cpsr = tLSLri killed %19:tgpr, 2, 14, $noreg
560B	  %21:tgpr, dead $cpsr = tASRri %20:tgpr, 31, 14, $noreg
576B	  %22:tgpr, $cpsr = tRSB killed %20:tgpr, 14, $noreg
592B	  %23:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
608B	  %23:tgpr, dead $cpsr = tSBC killed %23:tgpr(tied-def 0), killed %21:tgpr, 14, $noreg, implicit killed $cpsr
624B	  tSTRspi killed %22:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
640B	  tSTRspi killed %23:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
656B	  %24:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
672B	  %26:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
704B	  %26:tgpr, dead $cpsr = nsw tMUL killed %24:tgpr, killed %26:tgpr(tied-def 0), 14, $noreg
720B	  %27:tgpr, dead $cpsr = tASRri %26:tgpr, 31, 14, $noreg
736B	  %28:tgpr, $cpsr = tRSB killed %26:tgpr, 14, $noreg
752B	  %29:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
768B	  %29:tgpr, dead $cpsr = tSBC killed %29:tgpr(tied-def 0), killed %27:tgpr, 14, $noreg, implicit killed $cpsr
784B	  tSTRspi killed %28:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
800B	  tSTRspi killed %29:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
816B	  %30:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
832B	  %32:tgpr, dead $cpsr = tMOVi8 6, 14, $noreg
864B	  %32:tgpr, dead $cpsr = nsw tMUL killed %30:tgpr, killed %32:tgpr(tied-def 0), 14, $noreg
880B	  %33:tgpr, dead $cpsr = tASRri %32:tgpr, 31, 14, $noreg
896B	  %34:tgpr, $cpsr = tRSB killed %32:tgpr, 14, $noreg
912B	  %35:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
928B	  %35:tgpr, dead $cpsr = tSBC killed %35:tgpr(tied-def 0), killed %33:tgpr, 14, $noreg, implicit killed $cpsr
944B	  tSTRspi killed %34:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
960B	  tSTRspi killed %35:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
976B	  %36:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
992B	  %38:tgpr, dead $cpsr = tMOVi8 7, 14, $noreg
1024B	  %38:tgpr, dead $cpsr = nsw tMUL killed %36:tgpr, killed %38:tgpr(tied-def 0), 14, $noreg
1040B	  %39:tgpr, dead $cpsr = tASRri %38:tgpr, 31, 14, $noreg
1056B	  %40:tgpr, $cpsr = tRSB killed %38:tgpr, 14, $noreg
1072B	  %41:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
1088B	  %41:tgpr, dead $cpsr = tSBC killed %41:tgpr(tied-def 0), killed %39:tgpr, 14, $noreg, implicit killed $cpsr
1104B	  tSTRspi killed %40:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
1120B	  tSTRspi killed %41:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
1136B	  %42:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1152B	  %43:tgpr, dead $cpsr = tLSLri killed %42:tgpr, 3, 14, $noreg
1168B	  %44:tgpr, dead $cpsr = tASRri %43:tgpr, 31, 14, $noreg
1184B	  %45:tgpr, $cpsr = tRSB killed %43:tgpr, 14, $noreg
1200B	  %46:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
1216B	  %46:tgpr, dead $cpsr = tSBC killed %46:tgpr(tied-def 0), killed %44:tgpr, 14, $noreg, implicit killed $cpsr
1232B	  tSTRspi killed %45:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
1248B	  tSTRspi killed %46:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
1264B	  %47:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1280B	  %49:tgpr, dead $cpsr = tMOVi8 9, 14, $noreg
1312B	  %49:tgpr, dead $cpsr = nsw tMUL killed %47:tgpr, killed %49:tgpr(tied-def 0), 14, $noreg
1328B	  %50:tgpr, dead $cpsr = tASRri %49:tgpr, 31, 14, $noreg
1344B	  %51:tgpr, $cpsr = tRSB killed %49:tgpr, 14, $noreg
1360B	  %52:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
1376B	  %52:tgpr, dead $cpsr = tSBC killed %52:tgpr(tied-def 0), killed %50:tgpr, 14, $noreg, implicit killed $cpsr
1392B	  tSTRspi killed %51:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
1408B	  tSTRspi killed %52:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
1424B	  %53:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1440B	  %55:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
1472B	  %55:tgpr, dead $cpsr = nsw tMUL killed %53:tgpr, killed %55:tgpr(tied-def 0), 14, $noreg
1488B	  %56:tgpr, dead $cpsr = tASRri %55:tgpr, 31, 14, $noreg
1504B	  %57:tgpr, $cpsr = tRSB killed %55:tgpr, 14, $noreg
1520B	  %58:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
1536B	  %58:tgpr, dead $cpsr = tSBC killed %58:tgpr(tied-def 0), killed %56:tgpr, 14, $noreg, implicit killed $cpsr
1552B	  tSTRspi killed %57:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
1568B	  tSTRspi killed %58:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
1584B	  %59:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1600B	  %61:tgpr, dead $cpsr = tMOVi8 11, 14, $noreg
1632B	  %61:tgpr, dead $cpsr = nsw tMUL killed %59:tgpr, killed %61:tgpr(tied-def 0), 14, $noreg
1648B	  %62:tgpr, dead $cpsr = tASRri %61:tgpr, 31, 14, $noreg
1664B	  %63:tgpr, $cpsr = tRSB killed %61:tgpr, 14, $noreg
1680B	  %64:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
1696B	  %64:tgpr, dead $cpsr = tSBC killed %64:tgpr(tied-def 0), killed %62:tgpr, 14, $noreg, implicit killed $cpsr
1712B	  tSTRspi killed %63:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
1728B	  tSTRspi killed %64:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
1744B	  %65:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1760B	  %67:tgpr, dead $cpsr = tMOVi8 12, 14, $noreg
1792B	  %67:tgpr, dead $cpsr = nsw tMUL killed %65:tgpr, killed %67:tgpr(tied-def 0), 14, $noreg
1808B	  %68:tgpr, dead $cpsr = tASRri %67:tgpr, 31, 14, $noreg
1824B	  %69:tgpr, $cpsr = tRSB killed %67:tgpr, 14, $noreg
1840B	  %70:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
1856B	  %70:tgpr, dead $cpsr = tSBC killed %70:tgpr(tied-def 0), killed %68:tgpr, 14, $noreg, implicit killed $cpsr
1872B	  tSTRspi killed %69:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
1888B	  tSTRspi killed %70:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
1904B	  %71:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
1920B	  %73:tgpr, dead $cpsr = tMOVi8 13, 14, $noreg
1952B	  %73:tgpr, dead $cpsr = nsw tMUL killed %71:tgpr, killed %73:tgpr(tied-def 0), 14, $noreg
1968B	  %74:tgpr, dead $cpsr = tASRri %73:tgpr, 31, 14, $noreg
1984B	  %75:tgpr, $cpsr = tRSB killed %73:tgpr, 14, $noreg
2000B	  %76:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2016B	  %76:tgpr, dead $cpsr = tSBC killed %76:tgpr(tied-def 0), killed %74:tgpr, 14, $noreg, implicit killed $cpsr
2032B	  tSTRspi killed %75:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
2048B	  tSTRspi killed %76:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
2064B	  %77:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2080B	  %79:tgpr, dead $cpsr = tMOVi8 14, 14, $noreg
2112B	  %79:tgpr, dead $cpsr = nsw tMUL killed %77:tgpr, killed %79:tgpr(tied-def 0), 14, $noreg
2128B	  %80:tgpr, dead $cpsr = tASRri %79:tgpr, 31, 14, $noreg
2144B	  %81:tgpr, $cpsr = tRSB killed %79:tgpr, 14, $noreg
2160B	  %82:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2176B	  %82:tgpr, dead $cpsr = tSBC killed %82:tgpr(tied-def 0), killed %80:tgpr, 14, $noreg, implicit killed $cpsr
2192B	  tSTRspi killed %81:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
2208B	  tSTRspi killed %82:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
2224B	  %83:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2240B	  %85:tgpr, dead $cpsr = tMOVi8 15, 14, $noreg
2272B	  %85:tgpr, dead $cpsr = nsw tMUL killed %83:tgpr, killed %85:tgpr(tied-def 0), 14, $noreg
2288B	  %86:tgpr, dead $cpsr = tASRri %85:tgpr, 31, 14, $noreg
2304B	  %87:tgpr, $cpsr = tRSB killed %85:tgpr, 14, $noreg
2320B	  %88:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2336B	  %88:tgpr, dead $cpsr = tSBC killed %88:tgpr(tied-def 0), killed %86:tgpr, 14, $noreg, implicit killed $cpsr
2352B	  tSTRspi killed %87:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
2368B	  tSTRspi killed %88:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
2384B	  %89:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2400B	  %90:tgpr, dead $cpsr = tLSLri killed %89:tgpr, 4, 14, $noreg
2416B	  %91:tgpr, dead $cpsr = tASRri %90:tgpr, 31, 14, $noreg
2432B	  %92:tgpr, $cpsr = tRSB killed %90:tgpr, 14, $noreg
2448B	  %93:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2464B	  %93:tgpr, dead $cpsr = tSBC killed %93:tgpr(tied-def 0), killed %91:tgpr, 14, $noreg, implicit killed $cpsr
2480B	  tSTRspi killed %92:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
2496B	  tSTRspi killed %93:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
2512B	  %94:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2528B	  %96:tgpr, dead $cpsr = tMOVi8 17, 14, $noreg
2560B	  %96:tgpr, dead $cpsr = nsw tMUL killed %94:tgpr, killed %96:tgpr(tied-def 0), 14, $noreg
2576B	  %97:tgpr, dead $cpsr = tASRri %96:tgpr, 31, 14, $noreg
2592B	  %98:tgpr, $cpsr = tRSB killed %96:tgpr, 14, $noreg
2608B	  %99:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2624B	  %99:tgpr, dead $cpsr = tSBC killed %99:tgpr(tied-def 0), killed %97:tgpr, 14, $noreg, implicit killed $cpsr
2640B	  tSTRspi killed %98:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
2656B	  tSTRspi killed %99:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
2672B	  %100:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2688B	  %102:tgpr, dead $cpsr = tMOVi8 18, 14, $noreg
2720B	  %102:tgpr, dead $cpsr = nsw tMUL killed %100:tgpr, killed %102:tgpr(tied-def 0), 14, $noreg
2736B	  %103:tgpr, dead $cpsr = tASRri %102:tgpr, 31, 14, $noreg
2752B	  %104:tgpr, $cpsr = tRSB killed %102:tgpr, 14, $noreg
2768B	  %105:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2784B	  %105:tgpr, dead $cpsr = tSBC killed %105:tgpr(tied-def 0), killed %103:tgpr, 14, $noreg, implicit killed $cpsr
2800B	  tSTRspi killed %104:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
2816B	  tSTRspi killed %105:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
2832B	  %106:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
2848B	  %108:tgpr, dead $cpsr = tMOVi8 19, 14, $noreg
2880B	  %108:tgpr, dead $cpsr = nsw tMUL killed %106:tgpr, killed %108:tgpr(tied-def 0), 14, $noreg
2896B	  %109:tgpr, dead $cpsr = tASRri %108:tgpr, 31, 14, $noreg
2912B	  %110:tgpr, $cpsr = tRSB killed %108:tgpr, 14, $noreg
2928B	  %111:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
2944B	  %111:tgpr, dead $cpsr = tSBC killed %111:tgpr(tied-def 0), killed %109:tgpr, 14, $noreg, implicit killed $cpsr
2960B	  tSTRspi killed %110:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
2976B	  tSTRspi killed %111:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
2992B	  %112:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3008B	  %114:tgpr, dead $cpsr = tMOVi8 20, 14, $noreg
3040B	  %114:tgpr, dead $cpsr = nsw tMUL killed %112:tgpr, killed %114:tgpr(tied-def 0), 14, $noreg
3056B	  %115:tgpr, dead $cpsr = tASRri %114:tgpr, 31, 14, $noreg
3072B	  %116:tgpr, $cpsr = tRSB killed %114:tgpr, 14, $noreg
3088B	  %117:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
3104B	  %117:tgpr, dead $cpsr = tSBC killed %117:tgpr(tied-def 0), killed %115:tgpr, 14, $noreg, implicit killed $cpsr
3120B	  tSTRspi killed %116:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
3136B	  tSTRspi killed %117:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
3152B	  %118:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
3168B	  %120:tgpr, dead $cpsr = tMOVi8 21, 14, $noreg
3200B	  %120:tgpr, dead $cpsr = nsw tMUL killed %118:tgpr, killed %120:tgpr(tied-def 0), 14, $noreg
3216B	  %121:tgpr, dead $cpsr = tASRri %120:tgpr, 31, 14, $noreg
3232B	  %122:tgpr, $cpsr = tRSB killed %120:tgpr, 14, $noreg
3248B	  %123:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
3264B	  %123:tgpr, dead $cpsr = tSBC killed %123:tgpr(tied-def 0), killed %121:tgpr, 14, $noreg, implicit killed $cpsr
3280B	  tSTRspi killed %122:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
3296B	  tSTRspi killed %123:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
3312B	  %124:tgpr = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
3328B	  %125:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
3344B	  %354:tgpr, dead $cpsr = nsw tADDrr killed %124:tgpr, killed %125:tgpr, 14, $noreg
3352B	  tSTRspi killed %354:tgpr, %stack.29, 0, 14, $noreg :: (store (s32) into %stack.29)
3360B	  %325:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
3368B	  tSTRspi killed %325:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
3376B	  %136:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
3392B	  %129:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
3408B	  %130:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
3440B	  %136:tgpr, dead $cpsr = tAND killed %136:tgpr(tied-def 0), killed %130:tgpr, 14, $noreg
3448B	  %324:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
3472B	  %324:tgpr, dead $cpsr = tAND killed %324:tgpr(tied-def 0), killed %129:tgpr, 14, $noreg
3480B	  tSTRspi killed %324:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
3488B	  %133:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
3504B	  %134:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
3512B	  %326:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
3536B	  %326:tgpr, dead $cpsr = tORR killed %326:tgpr(tied-def 0), killed %134:tgpr, 14, $noreg
3544B	  tSTRspi killed %326:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
3568B	  %136:tgpr, dead $cpsr = tORR killed %136:tgpr(tied-def 0), killed %133:tgpr, 14, $noreg
3584B	  %137:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
3600B	  %138:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
3632B	  %136:tgpr, dead $cpsr = tORR killed %136:tgpr(tied-def 0), killed %138:tgpr, 14, $noreg
3640B	  %323:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
3664B	  %323:tgpr, dead $cpsr = tORR killed %323:tgpr(tied-def 0), killed %137:tgpr, 14, $noreg
3672B	  tSTRspi killed %323:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
3680B	  %165:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
3696B	  %142:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
3712B	  %143:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
3728B	  %144:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
3744B	  %145:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
3760B	  %146:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
3776B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3792B	  $r0 = COPY killed %143:tgpr
3808B	  $r1 = COPY killed %144:tgpr
3824B	  $r2 = COPY killed %145:tgpr
3840B	  $r3 = COPY killed %146:tgpr
3856B	  tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
3872B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
3888B	  %147:tgpr = COPY $r0
3904B	  %148:tgpr = COPY $r1
3920B	  %149:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
3936B	  %150:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
3952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
3968B	  $r0 = COPY killed %147:tgpr
3984B	  $r1 = COPY killed %148:tgpr
4000B	  $r2 = COPY killed %149:tgpr
4016B	  $r3 = COPY killed %150:tgpr
4032B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4048B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4064B	  %151:tgpr = COPY $r0
4080B	  %152:tgpr = COPY $r1
4096B	  %174:tgpr, $cpsr = tADDrr killed %142:tgpr, killed %151:tgpr, 14, $noreg
4128B	  %165:tgpr, dead $cpsr = tADC killed %165:tgpr(tied-def 0), killed %152:tgpr, 14, $noreg, implicit killed $cpsr
4144B	  %155:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
4160B	  %156:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
4176B	  %157:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
4192B	  %158:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
4208B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4224B	  $r0 = COPY killed %155:tgpr
4240B	  $r1 = COPY killed %156:tgpr
4256B	  $r2 = COPY killed %157:tgpr
4272B	  $r3 = COPY killed %158:tgpr
4288B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4304B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4320B	  %159:tgpr = COPY $r0
4336B	  %164:tgpr = COPY $r1
4352B	  %161:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
4368B	  %162:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
4384B	  %163:tgpr, $cpsr = tADDrr killed %159:tgpr, killed %162:tgpr, 14, $noreg
4416B	  %164:tgpr, dead $cpsr = tADC killed %164:tgpr(tied-def 0), killed %161:tgpr, 14, $noreg, implicit killed $cpsr
4448B	  %165:tgpr, dead $cpsr = tAND killed %165:tgpr(tied-def 0), killed %164:tgpr, 14, $noreg
4480B	  %174:tgpr, dead $cpsr = tAND killed %174:tgpr(tied-def 0), killed %163:tgpr, 14, $noreg
4496B	  %167:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
4512B	  %168:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
4528B	  %169:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
4544B	  %170:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
4560B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
4576B	  $r0 = COPY killed %167:tgpr
4592B	  $r1 = COPY killed %168:tgpr
4608B	  $r2 = COPY killed %169:tgpr
4624B	  $r3 = COPY killed %170:tgpr
4640B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
4656B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
4672B	  %171:tgpr = COPY $r0
4688B	  %172:tgpr = COPY $r1
4720B	  %165:tgpr, dead $cpsr = tAND killed %165:tgpr(tied-def 0), killed %172:tgpr, 14, $noreg
4752B	  %174:tgpr, dead $cpsr = tAND killed %174:tgpr(tied-def 0), killed %171:tgpr, 14, $noreg
4760B	  %322:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
4784B	  %322:tgpr, dead $cpsr = tORR killed %322:tgpr(tied-def 0), killed %165:tgpr, 14, $noreg
4792B	  tSTRspi killed %322:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
4816B	  %136:tgpr, dead $cpsr = tORR killed %136:tgpr(tied-def 0), killed %174:tgpr, 14, $noreg
4832B	  %198:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
4848B	  %327:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
4856B	  tSTRspi killed %327:tgpr, %stack.26, 0, 14, $noreg :: (store (s32) into %stack.26)
4864B	  %188:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
4880B	  %180:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
4896B	  %181:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
4912B	  %182:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
4928B	  %183:tgpr, $cpsr = tSUBrr killed %180:tgpr, killed %182:tgpr, 14, $noreg
4960B	  %188:tgpr, dead $cpsr = tSBC killed %188:tgpr(tied-def 0), killed %181:tgpr, 14, $noreg, implicit killed $cpsr
4976B	  %185:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
4992B	  %186:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
5008B	  %196:tgpr, $cpsr = tSUBrr killed %183:tgpr, killed %186:tgpr, 14, $noreg
5040B	  %188:tgpr, dead $cpsr = tSBC killed %188:tgpr(tied-def 0), killed %185:tgpr, 14, $noreg, implicit killed $cpsr
5056B	  %194:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
5072B	  %190:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
5088B	  %330:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
5096B	  tSTRspi killed %330:tgpr, %stack.27, 0, 14, $noreg :: (store (s32) into %stack.27)
5104B	  %192:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
5120B	  %193:tgpr, $cpsr = tADDrr killed %190:tgpr, killed %192:tgpr, 14, $noreg
5128B	  %331:tgpr = tLDRspi %stack.27, 0, 14, $noreg :: (load (s32) from %stack.27)
5152B	  %194:tgpr, dead $cpsr = tADC killed %194:tgpr(tied-def 0), killed %331:tgpr, 14, $noreg, implicit killed $cpsr
5184B	  %188:tgpr, dead $cpsr = tAND killed %188:tgpr(tied-def 0), killed %194:tgpr, 14, $noreg
5216B	  %196:tgpr, dead $cpsr = tAND killed %196:tgpr(tied-def 0), killed %193:tgpr, 14, $noreg
5224B	  %328:tgpr = tLDRspi %stack.26, 0, 14, $noreg :: (load (s32) from %stack.26)
5248B	  %328:tgpr, dead $cpsr = tEOR killed %328:tgpr(tied-def 0), killed %196:tgpr, 14, $noreg
5256B	  tSTRspi killed %328:tgpr, %stack.26, 0, 14, $noreg :: (store (s32) into %stack.26)
5280B	  %198:tgpr, dead $cpsr = tEOR killed %198:tgpr(tied-def 0), killed %188:tgpr, 14, $noreg
5288B	  %321:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
5312B	  %321:tgpr, dead $cpsr = tORR killed %321:tgpr(tied-def 0), killed %198:tgpr, 14, $noreg
5320B	  tSTRspi killed %321:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
5324B	  %329:tgpr = tLDRspi %stack.26, 0, 14, $noreg :: (load (s32) from %stack.26)
5344B	  %136:tgpr, dead $cpsr = tORR killed %136:tgpr(tied-def 0), killed %329:tgpr, 14, $noreg
5360B	  %201:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
5376B	  %202:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
5392B	  %203:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
5408B	  %204:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
5424B	  %205:tgpr, dead $cpsr = tMVN killed %204:tgpr, 14, $noreg
5440B	  %206:tgpr, dead $cpsr = tMVN killed %203:tgpr, 14, $noreg
5456B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5472B	  $r0 = COPY killed %201:tgpr
5488B	  $r1 = COPY killed %202:tgpr
5504B	  $r2 = COPY killed %205:tgpr
5520B	  $r3 = COPY killed %206:tgpr
5536B	  tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
5552B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5568B	  %207:tgpr = COPY $r0
5584B	  %208:tgpr = COPY $r1
5592B	  %320:tgpr = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
5616B	  %320:tgpr, dead $cpsr = tORR killed %320:tgpr(tied-def 0), killed %208:tgpr, 14, $noreg
5624B	  tSTRspi killed %320:tgpr, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
5648B	  %136:tgpr, dead $cpsr = tORR killed %136:tgpr(tied-def 0), killed %207:tgpr, 14, $noreg
5664B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5680B	  $r0 = tLDRspi %stack.29, 0, 14, $noreg :: (load (s32) from %stack.29)
5696B	  $r2 = COPY killed %136:tgpr
5712B	  $r3 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
5728B	  tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
5744B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
5760B	  %212:tgpr = COPY $r0
5776B	  tSTRspi killed %212:tgpr, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
5792B	  %216:tgpr = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
5808B	  %214:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
5824B	  %215:tgpr, $cpsr = tADDi3 killed %214:tgpr, 1, 14, $noreg
5832B	  %333:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
5856B	  %216:tgpr, dead $cpsr = tADC killed %216:tgpr(tied-def 0), killed %333:tgpr, 14, $noreg, implicit killed $cpsr
5872B	  tSTRspi %215:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
5888B	  tSTRspi %216:tgpr, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
5904B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
5920B	  %217:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
5936B	  $r0 = COPY %217:tgpr
5952B	  $r2 = COPY killed %215:tgpr
5968B	  $r3 = COPY killed %216:tgpr
5984B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6000B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6016B	  dead %218:tgpr = COPY $r0
6032B	  %222:tgpr = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
6048B	  %220:tgpr = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
6064B	  %221:tgpr, $cpsr = tADDi3 killed %220:tgpr, 1, 14, $noreg
6072B	  %334:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
6096B	  %222:tgpr, dead $cpsr = tADC killed %222:tgpr(tied-def 0), killed %334:tgpr, 14, $noreg, implicit killed $cpsr
6112B	  tSTRspi %221:tgpr, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
6128B	  tSTRspi %222:tgpr, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
6144B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6160B	  $r0 = COPY %217:tgpr
6176B	  $r2 = COPY killed %221:tgpr
6192B	  $r3 = COPY killed %222:tgpr
6208B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6224B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6240B	  dead %223:tgpr = COPY $r0
6256B	  %227:tgpr = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
6272B	  %225:tgpr = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
6288B	  %226:tgpr, $cpsr = tADDi3 killed %225:tgpr, 1, 14, $noreg
6296B	  %335:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
6320B	  %227:tgpr, dead $cpsr = tADC killed %227:tgpr(tied-def 0), killed %335:tgpr, 14, $noreg, implicit killed $cpsr
6336B	  tSTRspi %226:tgpr, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
6352B	  tSTRspi %227:tgpr, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
6368B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6384B	  $r0 = COPY %217:tgpr
6400B	  $r2 = COPY killed %226:tgpr
6416B	  $r3 = COPY killed %227:tgpr
6432B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6448B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6464B	  dead %228:tgpr = COPY $r0
6480B	  %232:tgpr = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
6496B	  %230:tgpr = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
6512B	  %231:tgpr, $cpsr = tADDi3 killed %230:tgpr, 1, 14, $noreg
6520B	  %336:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
6544B	  %232:tgpr, dead $cpsr = tADC killed %232:tgpr(tied-def 0), killed %336:tgpr, 14, $noreg, implicit killed $cpsr
6560B	  tSTRspi %231:tgpr, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
6576B	  tSTRspi %232:tgpr, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
6592B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6608B	  $r0 = COPY %217:tgpr
6624B	  $r2 = COPY killed %231:tgpr
6640B	  $r3 = COPY killed %232:tgpr
6656B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6672B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6688B	  dead %233:tgpr = COPY $r0
6704B	  %237:tgpr = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
6720B	  %235:tgpr = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
6736B	  %236:tgpr, $cpsr = tADDi3 killed %235:tgpr, 1, 14, $noreg
6744B	  %337:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
6768B	  %237:tgpr, dead $cpsr = tADC killed %237:tgpr(tied-def 0), killed %337:tgpr, 14, $noreg, implicit killed $cpsr
6784B	  tSTRspi %236:tgpr, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
6800B	  tSTRspi %237:tgpr, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
6816B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
6832B	  $r0 = COPY %217:tgpr
6848B	  $r2 = COPY killed %236:tgpr
6864B	  $r3 = COPY killed %237:tgpr
6880B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
6896B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
6912B	  dead %238:tgpr = COPY $r0
6928B	  %242:tgpr = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
6944B	  %240:tgpr = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
6960B	  %241:tgpr, $cpsr = tADDi3 killed %240:tgpr, 1, 14, $noreg
6968B	  %338:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
6992B	  %242:tgpr, dead $cpsr = tADC killed %242:tgpr(tied-def 0), killed %338:tgpr, 14, $noreg, implicit killed $cpsr
7008B	  tSTRspi %241:tgpr, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
7024B	  tSTRspi %242:tgpr, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
7040B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7056B	  $r0 = COPY %217:tgpr
7072B	  $r2 = COPY killed %241:tgpr
7088B	  $r3 = COPY killed %242:tgpr
7104B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7120B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7136B	  dead %243:tgpr = COPY $r0
7152B	  %247:tgpr = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
7168B	  %245:tgpr = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
7184B	  %246:tgpr, $cpsr = tADDi3 killed %245:tgpr, 1, 14, $noreg
7192B	  %339:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
7216B	  %247:tgpr, dead $cpsr = tADC killed %247:tgpr(tied-def 0), killed %339:tgpr, 14, $noreg, implicit killed $cpsr
7232B	  tSTRspi %246:tgpr, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
7248B	  tSTRspi %247:tgpr, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
7264B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7280B	  $r0 = COPY %217:tgpr
7296B	  $r2 = COPY killed %246:tgpr
7312B	  $r3 = COPY killed %247:tgpr
7328B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7344B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7360B	  dead %248:tgpr = COPY $r0
7376B	  %252:tgpr = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
7392B	  %250:tgpr = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
7408B	  %251:tgpr, $cpsr = tADDi3 killed %250:tgpr, 1, 14, $noreg
7416B	  %340:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
7440B	  %252:tgpr, dead $cpsr = tADC killed %252:tgpr(tied-def 0), killed %340:tgpr, 14, $noreg, implicit killed $cpsr
7456B	  tSTRspi %251:tgpr, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
7472B	  tSTRspi %252:tgpr, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
7488B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7504B	  $r0 = COPY %217:tgpr
7520B	  $r2 = COPY killed %251:tgpr
7536B	  $r3 = COPY killed %252:tgpr
7552B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7568B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7584B	  dead %253:tgpr = COPY $r0
7600B	  %257:tgpr = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
7616B	  %255:tgpr = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
7632B	  %256:tgpr, $cpsr = tADDi3 killed %255:tgpr, 1, 14, $noreg
7640B	  %341:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
7664B	  %257:tgpr, dead $cpsr = tADC killed %257:tgpr(tied-def 0), killed %341:tgpr, 14, $noreg, implicit killed $cpsr
7680B	  tSTRspi %256:tgpr, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
7696B	  tSTRspi %257:tgpr, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
7712B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7728B	  $r0 = COPY %217:tgpr
7744B	  $r2 = COPY killed %256:tgpr
7760B	  $r3 = COPY killed %257:tgpr
7776B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
7792B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
7808B	  dead %258:tgpr = COPY $r0
7824B	  %262:tgpr = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
7840B	  %260:tgpr = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
7856B	  %261:tgpr, $cpsr = tADDi3 killed %260:tgpr, 1, 14, $noreg
7864B	  %342:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
7888B	  %262:tgpr, dead $cpsr = tADC killed %262:tgpr(tied-def 0), killed %342:tgpr, 14, $noreg, implicit killed $cpsr
7904B	  tSTRspi %261:tgpr, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
7920B	  tSTRspi %262:tgpr, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
7936B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
7952B	  $r0 = COPY %217:tgpr
7968B	  $r2 = COPY killed %261:tgpr
7984B	  $r3 = COPY killed %262:tgpr
8000B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8016B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8032B	  dead %263:tgpr = COPY $r0
8048B	  %267:tgpr = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
8064B	  %265:tgpr = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
8080B	  %266:tgpr, $cpsr = tADDi3 killed %265:tgpr, 1, 14, $noreg
8088B	  %343:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
8112B	  %267:tgpr, dead $cpsr = tADC killed %267:tgpr(tied-def 0), killed %343:tgpr, 14, $noreg, implicit killed $cpsr
8128B	  tSTRspi %266:tgpr, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
8144B	  tSTRspi %267:tgpr, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
8160B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8176B	  $r0 = COPY %217:tgpr
8192B	  $r2 = COPY killed %266:tgpr
8208B	  $r3 = COPY killed %267:tgpr
8224B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8240B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8256B	  dead %268:tgpr = COPY $r0
8272B	  %272:tgpr = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
8288B	  %270:tgpr = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
8304B	  %271:tgpr, $cpsr = tADDi3 killed %270:tgpr, 1, 14, $noreg
8312B	  %344:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
8336B	  %272:tgpr, dead $cpsr = tADC killed %272:tgpr(tied-def 0), killed %344:tgpr, 14, $noreg, implicit killed $cpsr
8352B	  tSTRspi %271:tgpr, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
8368B	  tSTRspi %272:tgpr, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
8384B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8400B	  $r0 = COPY %217:tgpr
8416B	  $r2 = COPY killed %271:tgpr
8432B	  $r3 = COPY killed %272:tgpr
8448B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8464B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8480B	  dead %273:tgpr = COPY $r0
8496B	  %277:tgpr = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
8512B	  %275:tgpr = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
8528B	  %276:tgpr, $cpsr = tADDi3 killed %275:tgpr, 1, 14, $noreg
8536B	  %345:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
8560B	  %277:tgpr, dead $cpsr = tADC killed %277:tgpr(tied-def 0), killed %345:tgpr, 14, $noreg, implicit killed $cpsr
8576B	  tSTRspi %276:tgpr, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
8592B	  tSTRspi %277:tgpr, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
8608B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8624B	  $r0 = COPY %217:tgpr
8640B	  $r2 = COPY killed %276:tgpr
8656B	  $r3 = COPY killed %277:tgpr
8672B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8688B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8704B	  dead %278:tgpr = COPY $r0
8720B	  %282:tgpr = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
8736B	  %280:tgpr = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
8752B	  %281:tgpr, $cpsr = tADDi3 killed %280:tgpr, 1, 14, $noreg
8760B	  %346:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
8784B	  %282:tgpr, dead $cpsr = tADC killed %282:tgpr(tied-def 0), killed %346:tgpr, 14, $noreg, implicit killed $cpsr
8800B	  tSTRspi %281:tgpr, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
8816B	  tSTRspi %282:tgpr, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
8832B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
8848B	  $r0 = COPY %217:tgpr
8864B	  $r2 = COPY killed %281:tgpr
8880B	  $r3 = COPY killed %282:tgpr
8896B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
8912B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
8928B	  dead %283:tgpr = COPY $r0
8944B	  %287:tgpr = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
8960B	  %285:tgpr = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
8976B	  %286:tgpr, $cpsr = tADDi3 killed %285:tgpr, 1, 14, $noreg
8984B	  %347:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
9008B	  %287:tgpr, dead $cpsr = tADC killed %287:tgpr(tied-def 0), killed %347:tgpr, 14, $noreg, implicit killed $cpsr
9024B	  tSTRspi %286:tgpr, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
9040B	  tSTRspi %287:tgpr, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
9056B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9072B	  $r0 = COPY %217:tgpr
9088B	  $r2 = COPY killed %286:tgpr
9104B	  $r3 = COPY killed %287:tgpr
9120B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
9136B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9152B	  dead %288:tgpr = COPY $r0
9168B	  %292:tgpr = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
9184B	  %290:tgpr = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
9200B	  %291:tgpr, $cpsr = tADDi3 killed %290:tgpr, 1, 14, $noreg
9208B	  %348:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
9232B	  %292:tgpr, dead $cpsr = tADC killed %292:tgpr(tied-def 0), killed %348:tgpr, 14, $noreg, implicit killed $cpsr
9248B	  tSTRspi %291:tgpr, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
9264B	  tSTRspi %292:tgpr, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
9280B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9296B	  $r0 = COPY %217:tgpr
9312B	  $r2 = COPY killed %291:tgpr
9328B	  $r3 = COPY killed %292:tgpr
9344B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
9360B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9376B	  dead %293:tgpr = COPY $r0
9392B	  %297:tgpr = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
9408B	  %295:tgpr = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
9424B	  %296:tgpr, $cpsr = tADDi3 killed %295:tgpr, 1, 14, $noreg
9432B	  %349:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
9456B	  %297:tgpr, dead $cpsr = tADC killed %297:tgpr(tied-def 0), killed %349:tgpr, 14, $noreg, implicit killed $cpsr
9472B	  tSTRspi %296:tgpr, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
9488B	  tSTRspi %297:tgpr, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
9504B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9520B	  $r0 = COPY %217:tgpr
9536B	  $r2 = COPY killed %296:tgpr
9552B	  $r3 = COPY killed %297:tgpr
9568B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
9584B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9600B	  dead %298:tgpr = COPY $r0
9616B	  %302:tgpr = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
9632B	  %300:tgpr = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
9648B	  %301:tgpr, $cpsr = tADDi3 killed %300:tgpr, 1, 14, $noreg
9656B	  %350:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
9680B	  %302:tgpr, dead $cpsr = tADC killed %302:tgpr(tied-def 0), killed %350:tgpr, 14, $noreg, implicit killed $cpsr
9696B	  tSTRspi %301:tgpr, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
9712B	  tSTRspi %302:tgpr, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
9728B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9744B	  $r0 = COPY %217:tgpr
9760B	  $r2 = COPY killed %301:tgpr
9776B	  $r3 = COPY killed %302:tgpr
9792B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
9808B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
9824B	  dead %303:tgpr = COPY $r0
9840B	  %307:tgpr = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
9856B	  %305:tgpr = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
9872B	  %306:tgpr, $cpsr = tADDi3 killed %305:tgpr, 1, 14, $noreg
9880B	  %351:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
9904B	  %307:tgpr, dead $cpsr = tADC killed %307:tgpr(tied-def 0), killed %351:tgpr, 14, $noreg, implicit killed $cpsr
9920B	  tSTRspi %306:tgpr, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
9936B	  tSTRspi %307:tgpr, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
9952B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
9968B	  $r0 = COPY %217:tgpr
9984B	  $r2 = COPY killed %306:tgpr
10000B	  $r3 = COPY killed %307:tgpr
10016B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
10032B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10048B	  dead %308:tgpr = COPY $r0
10064B	  %312:tgpr = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
10080B	  %310:tgpr = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
10096B	  %311:tgpr, $cpsr = tADDi3 killed %310:tgpr, 1, 14, $noreg
10104B	  %352:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
10128B	  %312:tgpr, dead $cpsr = tADC killed %312:tgpr(tied-def 0), killed %352:tgpr, 14, $noreg, implicit killed $cpsr
10144B	  tSTRspi %311:tgpr, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
10160B	  tSTRspi %312:tgpr, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
10176B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10192B	  $r0 = COPY %217:tgpr
10208B	  $r2 = COPY killed %311:tgpr
10224B	  $r3 = COPY killed %312:tgpr
10240B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
10256B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10272B	  dead %313:tgpr = COPY $r0
10288B	  %317:tgpr = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
10304B	  %315:tgpr = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
10320B	  %316:tgpr, $cpsr = tADDi3 killed %315:tgpr, 1, 14, $noreg
10328B	  %353:tgpr = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
10352B	  %317:tgpr, dead $cpsr = tADC killed %317:tgpr(tied-def 0), killed %353:tgpr, 14, $noreg, implicit killed $cpsr
10368B	  tSTRspi %316:tgpr, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
10384B	  tSTRspi %317:tgpr, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
10400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
10416B	  $r0 = COPY killed %217:tgpr
10432B	  $r2 = COPY killed %316:tgpr
10448B	  $r3 = COPY killed %317:tgpr
10464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
10480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
10496B	  dead %318:tgpr = COPY $r0
10512B	  %319:tgpr = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
10528B	  $r0 = COPY killed %319:tgpr
10544B	  tBX_RET 14, $noreg, implicit $r0
> renamable $r2 = COPY $r2
Identity copy: renamable $r2 = COPY $r2
  deleted.
> renamable $r1 = COPY $r1
Identity copy: renamable $r1 = COPY $r1
  deleted.
> renamable $r0 = COPY $r0
Identity copy: renamable $r0 = COPY $r0
  deleted.
> tSTRspi killed renamable $r0, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.4)
> tSTRspi killed renamable $r1, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.5)
> tSTRspi killed renamable $r2, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.6)
> renamable $r0 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
> tSTRspi killed renamable $r1, %stack.28, 0, 14, $noreg :: (store (s32) into %stack.28)
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
> tSTRspi killed renamable $r0, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
> tSTRspi killed renamable $r0, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
> tSTRspi killed renamable $r0, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
> tSTRspi killed renamable $r0, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
> tSTRspi killed renamable $r0, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
> tSTRspi killed renamable $r0, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
> tSTRspi killed renamable $r0, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
> tSTRspi killed renamable $r0, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
> tSTRspi killed renamable $r0, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
> tSTRspi killed renamable $r0, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
> tSTRspi killed renamable $r0, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
> tSTRspi killed renamable $r0, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
> tSTRspi killed renamable $r0, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
> tSTRspi killed renamable $r0, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
> tSTRspi killed renamable $r0, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
> tSTRspi killed renamable $r0, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
> tSTRspi killed renamable $r0, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
> tSTRspi killed renamable $r0, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
> tSTRspi killed renamable $r0, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r2, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
> tSTRspi killed renamable $r0, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
> renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
> renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
> renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
> renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> tSTRspi killed renamable $r1, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
> tSTRspi killed renamable $r0, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.0, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
> renamable $r0 = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
> renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
> tSTRspi killed renamable $r0, %stack.29, 0, 14, $noreg :: (store (s32) into %stack.29)
> renamable $r0 = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
> tSTRspi killed renamable $r0, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r6 = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
> renamable $r1 = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
> renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
> tSTRspi killed renamable $r0, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r2 = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
> renamable $r0 = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
> tSTRspi killed renamable $r1, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
> renamable $r1 = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
> renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
> tSTRspi killed renamable $r0, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r5 = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
> renamable $r4 = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
> renamable $r0 = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
> renamable $r1 = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
> renamable $r2 = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
> renamable $r3 = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> $r1 = COPY killed renamable $r1
Identity copy: $r1 = COPY killed renamable $r1
  deleted.
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = COPY $r0
Identity copy: renamable $r0 = COPY $r0
  deleted.
> renamable $r1 = COPY $r1
Identity copy: renamable $r1 = COPY $r1
  deleted.
> renamable $r2 = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
> renamable $r3 = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> $r1 = COPY killed renamable $r1
Identity copy: $r1 = COPY killed renamable $r1
  deleted.
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = COPY $r0
Identity copy: renamable $r0 = COPY $r0
  deleted.
> renamable $r1 = COPY $r1
Identity copy: renamable $r1 = COPY $r1
  deleted.
> renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
> renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
> renamable $r0 = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
> renamable $r1 = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
> renamable $r2 = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
> renamable $r3 = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> $r1 = COPY killed renamable $r1
Identity copy: $r1 = COPY killed renamable $r1
  deleted.
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r2 = COPY $r0
> renamable $r1 = COPY $r1
Identity copy: renamable $r1 = COPY $r1
  deleted.
> renamable $r3 = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
> renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
> renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
> renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
> renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
> renamable $r1 = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
> renamable $r2 = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
> renamable $r3 = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> $r1 = COPY killed renamable $r1
Identity copy: $r1 = COPY killed renamable $r1
  deleted.
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = COPY $r0
Identity copy: renamable $r0 = COPY $r0
  deleted.
> renamable $r1 = COPY $r1
Identity copy: renamable $r1 = COPY $r1
  deleted.
> renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
> renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
> tSTRspi killed renamable $r0, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
> renamable $r4 = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
> tSTRspi killed renamable $r0, %stack.26, 0, 14, $noreg :: (store (s32) into %stack.26)
> renamable $r1 = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
> renamable $r2 = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
> renamable $r3 = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
> renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
> renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
> renamable $r2 = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
> renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
> renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
> renamable $r2 = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
> renamable $r5 = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
> renamable $r0 = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
> tSTRspi killed renamable $r0, %stack.27, 0, 14, $noreg :: (store (s32) into %stack.27)
> renamable $r0 = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
> renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
> renamable $r0 = tLDRspi %stack.27, 0, 14, $noreg :: (load (s32) from %stack.27)
> renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
> renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
> renamable $r0 = tLDRspi %stack.26, 0, 14, $noreg :: (load (s32) from %stack.26)
> renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
> tSTRspi killed renamable $r0, %stack.26, 0, 14, $noreg :: (store (s32) into %stack.26)
> renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
> renamable $r0 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
> tSTRspi killed renamable $r0, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r0 = tLDRspi %stack.26, 0, 14, $noreg :: (load (s32) from %stack.26)
> renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
> renamable $r4 = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
> renamable $r5 = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
> renamable $r1 = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
> renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
> renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY killed renamable $r4
> $r1 = COPY killed renamable $r5
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r2 = COPY $r0
> renamable $r1 = COPY $r1
Identity copy: renamable $r1 = COPY $r1
  deleted.
> renamable $r0 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
> tSTRspi killed renamable $r0, %stack.25, 0, 14, $noreg :: (store (s32) into %stack.25)
> renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = tLDRspi %stack.29, 0, 14, $noreg :: (load (s32) from %stack.29)
> $r2 = COPY killed renamable $r6
> $r3 = tLDRspi %stack.25, 0, 14, $noreg :: (load (s32) from %stack.25)
> tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = COPY $r0
Identity copy: renamable $r0 = COPY $r0
  deleted.
> tSTRspi killed renamable $r0, %stack.24, 0, 14, $noreg :: (store (s32) into %ir.28)
> renamable $r3 = tLDRspi %stack.3, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.7, align 8)
> tSTRspi renamable $r3, %stack.3, 1, 14, $noreg :: (store (s32) into %ir.7 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r4 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.4, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.4, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.4, 0, 14, $noreg :: (store (s32) into %ir.8, align 8)
> tSTRspi renamable $r3, %stack.4, 1, 14, $noreg :: (store (s32) into %ir.8 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.5, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.5, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.5, 0, 14, $noreg :: (store (s32) into %ir.9, align 8)
> tSTRspi renamable $r3, %stack.5, 1, 14, $noreg :: (store (s32) into %ir.9 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.6, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.6, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.6, 0, 14, $noreg :: (store (s32) into %ir.10, align 8)
> tSTRspi renamable $r3, %stack.6, 1, 14, $noreg :: (store (s32) into %ir.10 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.7, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.7, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.7, 0, 14, $noreg :: (store (s32) into %ir.11, align 8)
> tSTRspi renamable $r3, %stack.7, 1, 14, $noreg :: (store (s32) into %ir.11 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.8, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.8, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.8, 0, 14, $noreg :: (store (s32) into %ir.12, align 8)
> tSTRspi renamable $r3, %stack.8, 1, 14, $noreg :: (store (s32) into %ir.12 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.9, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.9, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.9, 0, 14, $noreg :: (store (s32) into %ir.13, align 8)
> tSTRspi renamable $r3, %stack.9, 1, 14, $noreg :: (store (s32) into %ir.13 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.10, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.10, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.10, 0, 14, $noreg :: (store (s32) into %ir.14, align 8)
> tSTRspi renamable $r3, %stack.10, 1, 14, $noreg :: (store (s32) into %ir.14 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.11, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.11, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.11, 0, 14, $noreg :: (store (s32) into %ir.15, align 8)
> tSTRspi renamable $r3, %stack.11, 1, 14, $noreg :: (store (s32) into %ir.15 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.12, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.12, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.12, 0, 14, $noreg :: (store (s32) into %ir.16, align 8)
> tSTRspi renamable $r3, %stack.12, 1, 14, $noreg :: (store (s32) into %ir.16 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.13, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.13, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.13, 0, 14, $noreg :: (store (s32) into %ir.17, align 8)
> tSTRspi renamable $r3, %stack.13, 1, 14, $noreg :: (store (s32) into %ir.17 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.14, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.14, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.14, 0, 14, $noreg :: (store (s32) into %ir.18, align 8)
> tSTRspi renamable $r3, %stack.14, 1, 14, $noreg :: (store (s32) into %ir.18 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.15, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.15, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.15, 0, 14, $noreg :: (store (s32) into %ir.19, align 8)
> tSTRspi renamable $r3, %stack.15, 1, 14, $noreg :: (store (s32) into %ir.19 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.16, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.16, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.16, 0, 14, $noreg :: (store (s32) into %ir.20, align 8)
> tSTRspi renamable $r3, %stack.16, 1, 14, $noreg :: (store (s32) into %ir.20 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.17, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.17, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.17, 0, 14, $noreg :: (store (s32) into %ir.21, align 8)
> tSTRspi renamable $r3, %stack.17, 1, 14, $noreg :: (store (s32) into %ir.21 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.18, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.18, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.18, 0, 14, $noreg :: (store (s32) into %ir.22, align 8)
> tSTRspi renamable $r3, %stack.18, 1, 14, $noreg :: (store (s32) into %ir.22 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.19, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.19, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.19, 0, 14, $noreg :: (store (s32) into %ir.23, align 8)
> tSTRspi renamable $r3, %stack.19, 1, 14, $noreg :: (store (s32) into %ir.23 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.20, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.20, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.20, 0, 14, $noreg :: (store (s32) into %ir.24, align 8)
> tSTRspi renamable $r3, %stack.20, 1, 14, $noreg :: (store (s32) into %ir.24 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.21, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.21, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.21, 0, 14, $noreg :: (store (s32) into %ir.25, align 8)
> tSTRspi renamable $r3, %stack.21, 1, 14, $noreg :: (store (s32) into %ir.25 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.22, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.22, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.22, 0, 14, $noreg :: (store (s32) into %ir.26, align 8)
> tSTRspi renamable $r3, %stack.22, 1, 14, $noreg :: (store (s32) into %ir.26 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r3 = tLDRspi %stack.23, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
> renamable $r0 = tLDRspi %stack.23, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
> renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
> renamable $r0 = tLDRspi %stack.28, 0, 14, $noreg :: (load (s32) from %stack.28)
> renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
> tSTRspi renamable $r2, %stack.23, 0, 14, $noreg :: (store (s32) into %ir.27, align 8)
> tSTRspi renamable $r3, %stack.23, 1, 14, $noreg :: (store (s32) into %ir.27 + 4, basealign 8)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> $r0 = COPY killed renamable $r4
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> $r3 = COPY killed renamable $r3
Identity copy: $r3 = COPY killed renamable $r3
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r0 = tLDRspi %stack.24, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> tBX_RET 14, $noreg, implicit $r0
********** Stack Slot Coloring **********
********** Function: moreThan20Variables
Skipping pass 'Stack Slot Coloring' on function moreThan20Variables
Skipping pass 'Machine Copy Propagation Pass' on function moreThan20Variables
Skipping pass 'Machine Loop Invariant Code Motion' on function moreThan20Variables
Skipping pass 'Fixup Statepoint Caller Saved' on function moreThan20Variables
Skipping pass 'PostRA Machine Sink' on function moreThan20Variables

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
Skipping pass 'Shrink Wrapping analysis' on function moreThan20Variables
EstimatedLimit: 1024; EstimatedStack: 240; EstimatedFPStack: 8; BigFrameOffsets: 0
$r3 is unused argument register, EntryRegDeficit = -1
1 return regs used, ExitRegDeficit = -3
RegDeficit = -1
$r4 is saved low register, RegDeficit = -2
$r5 is saved low register, RegDeficit = -3
$r6 is saved low register, RegDeficit = -4
%lr is saved register, RegDeficit = -5
Final RegDeficit = -5
After adding spills, RegDeficit = -5
NumGPRSpills = 5
alloc FI(30) at SP[-4]
alloc FI(31) at SP[-8]
alloc FI(32) at SP[-12]
alloc FI(33) at SP[-16]
alloc FI(34) at SP[-20]
alloc FI(0) at SP[-24]
alloc FI(1) at SP[-28]
alloc FI(2) at SP[-32]
alloc FI(3) at SP[-40]
alloc FI(4) at SP[-48]
alloc FI(5) at SP[-56]
alloc FI(6) at SP[-64]
alloc FI(7) at SP[-72]
alloc FI(8) at SP[-80]
alloc FI(9) at SP[-88]
alloc FI(10) at SP[-96]
alloc FI(11) at SP[-104]
alloc FI(12) at SP[-112]
alloc FI(13) at SP[-120]
alloc FI(14) at SP[-128]
alloc FI(15) at SP[-136]
alloc FI(16) at SP[-144]
alloc FI(17) at SP[-152]
alloc FI(18) at SP[-160]
alloc FI(19) at SP[-168]
alloc FI(20) at SP[-176]
alloc FI(21) at SP[-184]
alloc FI(22) at SP[-192]
alloc FI(23) at SP[-200]
alloc FI(24) at SP[-204]
alloc FI(25) at SP[-208]
alloc FI(26) at SP[-212]
alloc FI(27) at SP[-216]
alloc FI(28) at SP[-220]
alloc FI(29) at SP[-224]
Skipping pass 'Machine Late Instructions Cleanup Pass' on function moreThan20Variables
Skipping pass 'Control Flow Optimizer' on function moreThan20Variables
Skipping pass 'Tail Duplication' on function moreThan20Variables
Skipping pass 'Machine Copy Propagation Pass' on function moreThan20Variables
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: moreThan20Variables
real copy:   renamable $r2 = COPY $r0
replaced by: $r2 = tMOVSr $r0, implicit-def dead $cpsr
real copy:   $r0 = COPY killed renamable $r4
replaced by: $r0 = tMOVSr killed $r4, implicit-def dead $cpsr
real copy:   $r1 = COPY killed renamable $r5
replaced by: $r1 = tMOVSr killed $r5, implicit-def dead $cpsr
real copy:   renamable $r2 = COPY $r0
replaced by: $r2 = tMOVSr $r0, implicit-def dead $cpsr
real copy:   $r2 = COPY killed renamable $r6
replaced by: $r2 = tMOVSr killed $r6, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY renamable $r4
replaced by: $r0 = tMOVSr $r4, implicit-def dead $cpsr
real copy:   $r0 = COPY killed renamable $r4
replaced by: $r0 = tMOVSr killed $r4, implicit-def dead $cpsr
Skipping pass 'ARM load / store optimization pass' on function moreThan20Variables
********** REACHING DEFINITION ANALYSIS **********
%bb.0: all preds known
%bb.0: entry
SP:	0	frame-setup tPUSH 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $lr, implicit-def $sp, implicit $sp
R7:	7	$r7 = frame-setup tADDrSPi $sp, 3, 14, $noreg
SP:	9	$sp = frame-setup tSUBspi $sp(tied-def 0), 51, 14, $noreg
R0:	13	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R2:	14	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	14	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	15	renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
CPSR:	15	renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
R1:	17	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	17	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	18	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	19	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	19	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	22	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	23	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
CPSR:	23	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
R2:	24	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	24	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	25	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	25	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	26	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	27	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	27	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	30	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	31	renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
CPSR:	31	renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
R0:	32	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	32	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	33	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	33	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	34	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	34	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	35	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	36	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	36	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	39	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	40	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
CPSR:	40	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
R2:	41	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	41	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	42	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	42	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	43	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	44	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	44	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	47	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	48	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
CPSR:	48	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
R0:	49	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	49	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	50	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	50	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	51	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	51	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	52	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	53	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	53	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	56	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	57	renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
CPSR:	57	renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
R0:	58	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	58	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	59	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	59	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	60	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	60	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	61	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	62	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	62	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	65	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	66	renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
CPSR:	66	renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
R0:	67	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	67	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	68	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	68	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	69	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	69	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	70	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	71	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	71	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	74	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	75	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
CPSR:	75	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
R2:	76	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	76	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	77	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	77	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	78	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	79	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	79	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	82	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	83	renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
CPSR:	83	renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
R0:	84	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	84	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	85	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	85	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	86	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	86	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	87	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	88	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	88	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	91	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	92	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
CPSR:	92	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
R0:	93	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	93	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	94	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	94	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	95	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	95	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	96	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	97	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	97	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	100	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	101	renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
CPSR:	101	renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
R0:	102	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	102	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	103	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	103	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	104	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	104	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	105	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	106	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	106	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	109	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	110	renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
CPSR:	110	renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
R0:	111	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	111	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	112	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	112	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	113	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	113	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	114	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	115	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	115	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	118	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	119	renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
CPSR:	119	renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
R0:	120	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	120	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	121	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	121	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	122	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	122	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	123	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	124	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	124	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	127	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	128	renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
CPSR:	128	renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
R0:	129	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	129	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	130	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	130	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	131	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	131	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	132	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	133	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	133	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	136	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	137	renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
CPSR:	137	renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
R0:	138	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	138	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	139	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	139	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	140	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	140	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	141	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	142	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	142	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	145	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	146	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
CPSR:	146	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
R1:	147	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	147	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	148	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	148	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	149	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	150	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	150	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	153	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	154	renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
CPSR:	154	renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
R0:	155	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	155	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	156	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	156	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	157	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	157	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	158	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	159	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	159	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	162	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	163	renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
CPSR:	163	renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
R0:	164	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	164	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	165	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	165	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	166	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	166	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	167	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	168	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	168	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	171	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	172	renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
CPSR:	172	renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
R0:	173	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	173	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	174	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	174	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	175	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	175	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	176	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	177	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	177	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	180	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	181	renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
CPSR:	181	renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
R0:	182	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	182	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	183	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	183	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	184	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	184	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	185	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	186	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	186	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	189	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	190	renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
CPSR:	190	renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
R0:	191	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	191	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	192	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	192	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	193	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	193	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	194	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	195	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	195	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	198	renamable $r1 = tLDRspi $sp, 50, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
R0:	199	renamable $r0 = tLDRspi $sp, 49, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
R0:	200	renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
CPSR:	200	renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
R0:	202	renamable $r0 = tLDRspi $sp, 47, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
R6:	204	renamable $r6 = tLDRspi $sp, 46, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
R1:	205	renamable $r1 = tLDRspi $sp, 45, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
R0:	206	renamable $r0 = tLDRspi $sp, 44, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
R6:	207	renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	207	renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R0:	208	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	209	renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	209	renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R2:	211	renamable $r2 = tLDRspi $sp, 42, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
R0:	212	renamable $r0 = tLDRspi $sp, 43, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
R1:	213	renamable $r1 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R1:	214	renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	214	renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
R6:	216	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	216	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
R1:	217	renamable $r1 = tLDRspi $sp, 41, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
R0:	218	renamable $r0 = tLDRspi $sp, 40, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
R6:	219	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	219	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R0:	220	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	221	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	221	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R5:	223	renamable $r5 = tLDRspi $sp, 39, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
R4:	224	renamable $r4 = tLDRspi $sp, 38, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
R0:	225	renamable $r0 = tLDRspi $sp, 36, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
R1:	226	renamable $r1 = tLDRspi $sp, 37, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
R2:	227	renamable $r2 = tLDRspi $sp, 34, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
R3:	228	renamable $r3 = tLDRspi $sp, 35, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
LR:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	230	renamable $r2 = tLDRspi $sp, 32, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
R3:	231	renamable $r3 = tLDRspi $sp, 33, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
LR:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R4:	233	renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
CPSR:	233	renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
R5:	234	renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	234	renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R0:	235	renamable $r0 = tLDRspi $sp, 30, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
R1:	236	renamable $r1 = tLDRspi $sp, 31, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
R2:	237	renamable $r2 = tLDRspi $sp, 28, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
R3:	238	renamable $r3 = tLDRspi $sp, 29, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
LR:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	240	$r2 = tMOVSr $r0, implicit-def dead $cpsr
CPSR:	240	$r2 = tMOVSr $r0, implicit-def dead $cpsr
R3:	241	renamable $r3 = tLDRspi $sp, 27, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
R0:	242	renamable $r0 = tLDRspi $sp, 26, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
R0:	243	renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
CPSR:	243	renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
R1:	244	renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
CPSR:	244	renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
R5:	245	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	245	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
R4:	246	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	246	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
R0:	247	renamable $r0 = tLDRspi $sp, 24, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
R1:	248	renamable $r1 = tLDRspi $sp, 25, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
R2:	249	renamable $r2 = tLDRspi $sp, 22, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
R3:	250	renamable $r3 = tLDRspi $sp, 23, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
LR:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R5:	252	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	252	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
R4:	253	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	253	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
R0:	254	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	255	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
CPSR:	255	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
R6:	257	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
CPSR:	257	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
R4:	258	renamable $r4 = tLDRspi $sp, 21, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
R0:	259	renamable $r0 = tLDRspi $sp, 20, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
R1:	261	renamable $r1 = tLDRspi $sp, 19, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
R2:	262	renamable $r2 = tLDRspi $sp, 18, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
R3:	263	renamable $r3 = tLDRspi $sp, 17, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
R0:	264	renamable $r0 = tLDRspi $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
R5:	265	renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
CPSR:	265	renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
R1:	266	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
CPSR:	266	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
R2:	267	renamable $r2 = tLDRspi $sp, 15, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
R0:	268	renamable $r0 = tLDRspi $sp, 14, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
R3:	269	renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
CPSR:	269	renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
R1:	270	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	270	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R2:	271	renamable $r2 = tLDRspi $sp, 13, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
R5:	272	renamable $r5 = tLDRspi $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
R0:	273	renamable $r0 = tLDRspi $sp, 11, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
R0:	275	renamable $r0 = tLDRspi $sp, 10, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
R5:	276	renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
CPSR:	276	renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
R0:	277	renamable $r0 = tLDRspi $sp, 2, 14, $noreg :: (load (s32) from %stack.27)
R2:	278	renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	278	renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R1:	279	renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	279	renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
R3:	280	renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
CPSR:	280	renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
R0:	281	renamable $r0 = tLDRspi $sp, 3, 14, $noreg :: (load (s32) from %stack.26)
R0:	282	renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
CPSR:	282	renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
R4:	284	renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	284	renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
R0:	285	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	286	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
CPSR:	286	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
R0:	288	renamable $r0 = tLDRspi $sp, 3, 14, $noreg :: (load (s32) from %stack.26)
R6:	289	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	289	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R4:	290	renamable $r4 = tLDRspi $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
R5:	291	renamable $r5 = tLDRspi $sp, 9, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
R1:	292	renamable $r1 = tLDRspi $sp, 7, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
R0:	293	renamable $r0 = tLDRspi $sp, 6, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
R2:	294	renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
CPSR:	294	renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
R3:	295	renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
CPSR:	295	renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
R0:	296	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	296	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
R1:	297	$r1 = tMOVSr killed $r5, implicit-def dead $cpsr
CPSR:	297	$r1 = tMOVSr killed $r5, implicit-def dead $cpsr
LR:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	299	$r2 = tMOVSr $r0, implicit-def dead $cpsr
CPSR:	299	$r2 = tMOVSr $r0, implicit-def dead $cpsr
R0:	300	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	301	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	301	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R6:	303	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	303	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
R0:	304	$r0 = tLDRspi $sp, 0, 14, $noreg :: (load (s32) from %stack.29)
R2:	305	$r2 = tMOVSr killed $r6, implicit-def dead $cpsr
CPSR:	305	$r2 = tMOVSr killed $r6, implicit-def dead $cpsr
R3:	306	$r3 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
LR:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	309	renamable $r3 = tLDRspi $sp, 47, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
R0:	310	renamable $r0 = tLDRspi $sp, 46, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
R2:	311	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	311	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	312	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	313	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	313	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R4:	316	renamable $r4 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
R0:	317	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	317	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	319	renamable $r3 = tLDRspi $sp, 45, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
R0:	320	renamable $r0 = tLDRspi $sp, 44, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
R2:	321	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	321	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	322	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	323	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	323	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	326	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	326	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	328	renamable $r3 = tLDRspi $sp, 43, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
R0:	329	renamable $r0 = tLDRspi $sp, 42, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
R2:	330	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	330	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	331	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	332	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	332	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	335	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	335	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	337	renamable $r3 = tLDRspi $sp, 41, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
R0:	338	renamable $r0 = tLDRspi $sp, 40, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
R2:	339	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	339	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	340	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	341	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	341	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	344	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	344	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	346	renamable $r3 = tLDRspi $sp, 39, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
R0:	347	renamable $r0 = tLDRspi $sp, 38, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
R2:	348	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	348	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	349	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	350	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	350	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	353	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	353	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	355	renamable $r3 = tLDRspi $sp, 37, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
R0:	356	renamable $r0 = tLDRspi $sp, 36, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
R2:	357	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	357	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	358	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	359	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	359	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	362	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	362	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	364	renamable $r3 = tLDRspi $sp, 35, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
R0:	365	renamable $r0 = tLDRspi $sp, 34, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
R2:	366	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	366	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	367	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	368	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	368	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	371	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	371	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	373	renamable $r3 = tLDRspi $sp, 33, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
R0:	374	renamable $r0 = tLDRspi $sp, 32, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
R2:	375	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	375	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	376	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	377	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	377	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	380	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	380	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	382	renamable $r3 = tLDRspi $sp, 31, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
R0:	383	renamable $r0 = tLDRspi $sp, 30, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
R2:	384	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	384	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	385	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	386	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	386	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	389	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	389	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	391	renamable $r3 = tLDRspi $sp, 29, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
R0:	392	renamable $r0 = tLDRspi $sp, 28, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
R2:	393	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	393	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	394	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	395	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	395	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	398	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	398	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	400	renamable $r3 = tLDRspi $sp, 27, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
R0:	401	renamable $r0 = tLDRspi $sp, 26, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
R2:	402	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	402	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	403	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	404	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	404	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	407	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	407	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	409	renamable $r3 = tLDRspi $sp, 25, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
R0:	410	renamable $r0 = tLDRspi $sp, 24, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
R2:	411	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	411	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	412	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	413	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	413	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	416	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	416	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	418	renamable $r3 = tLDRspi $sp, 23, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
R0:	419	renamable $r0 = tLDRspi $sp, 22, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
R2:	420	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	420	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	421	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	422	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	422	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	425	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	425	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	427	renamable $r3 = tLDRspi $sp, 21, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
R0:	428	renamable $r0 = tLDRspi $sp, 20, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
R2:	429	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	429	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	430	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	431	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	431	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	434	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	434	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	436	renamable $r3 = tLDRspi $sp, 19, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
R0:	437	renamable $r0 = tLDRspi $sp, 18, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
R2:	438	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	438	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	439	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	440	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	440	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	443	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	443	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	445	renamable $r3 = tLDRspi $sp, 17, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
R0:	446	renamable $r0 = tLDRspi $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
R2:	447	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	447	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	448	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	449	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	449	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	452	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	452	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	454	renamable $r3 = tLDRspi $sp, 15, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
R0:	455	renamable $r0 = tLDRspi $sp, 14, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
R2:	456	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	456	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	457	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	458	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	458	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	461	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	461	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	463	renamable $r3 = tLDRspi $sp, 13, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
R0:	464	renamable $r0 = tLDRspi $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
R2:	465	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	465	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	466	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	467	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	467	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	470	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	470	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	472	renamable $r3 = tLDRspi $sp, 11, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
R0:	473	renamable $r0 = tLDRspi $sp, 10, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
R2:	474	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	474	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	475	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	476	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	476	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	479	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	479	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	481	renamable $r3 = tLDRspi $sp, 9, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
R0:	482	renamable $r0 = tLDRspi $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
R2:	483	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	483	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	484	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	485	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	485	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	488	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	488	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	490	renamable $r3 = tLDRspi $sp, 7, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
R0:	491	renamable $r0 = tLDRspi $sp, 6, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
R2:	492	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	492	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	493	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	494	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	494	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	497	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	497	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
LR:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	499	renamable $r0 = tLDRspi $sp, 5, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
SP:	500	$sp = frame-destroy tADDspi $sp(tied-def 0), 51, 14, $noreg
R4:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R5:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R6:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R7:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
SP:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R1:	502	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
SP:	502	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
LR:	503	$lr = frame-destroy tMOVr killed $r1, 14, $noreg
Skipping pass 'ARM Execution Domain Fix' on function moreThan20Variables
Skipping pass 'BreakFalseDeps' on function moreThan20Variables
********** ARM EXPAND PSEUDO INSTRUCTIONS **********
********** Function: moreThan20Variables
***************************************************

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - BB0[]: float = 1.0, int = 8

Skipping pass 'If Converter' on function moreThan20Variables
Skipping pass 'PostRA Machine Instruction Scheduler' on function moreThan20Variables
Skipping pass 'Post RA top-down list latency scheduler' on function moreThan20Variables
ARM Indirect Thunks

block-frequency: moreThan20Variables
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: moreThan20Variables
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
Skipping pass 'Branch Probability Basic Block Placement' on function moreThan20Variables
Skipping pass 'ARM block placement' on function moreThan20Variables
Skipping pass 'optimise barriers pass' on function moreThan20Variables
********** COMPUTING STACKMAP LIVENESS: moreThan20Variables **********

Debug Range Extension: moreThan20Variables
[SafeStack] Function: main
[SafeStack]     safestack is not requested for this function
		Looking for trivial roots
Found a new trivial root: %0
Last visited node: %0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %0
Found roots: %0 
---- Branch Probability Info : main ----

Computing probabilities for 
Skipping pass 'ARM Instruction Selection' on function main

Changing optimization level for Function main
	Before: -O2 ; After: -O0
	FastISel is enabled



=== main
Enabling fast-isel
Creating constant: t1: i32 = Constant<0>
Creating new node: t3: i32 = undef
Creating new node: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
Creating constant: t7: i32 = TargetConstant<0>
Creating new node: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t10: i32,ch = CopyFromReg t8, Register:i32 $sp
Creating new node: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
Creating new node: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
Creating constant: t16: i32 = TargetConstant<-1>
Creating new node: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
Creating new node: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
Creating constant: t19: i32 = Constant<5>
Creating new node: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
Creating constant: t22: i32 = Constant<10>
Creating new node: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
Creating new node: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
Creating new node: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
Creating constant: t28: i32 = Constant<4>
Creating new node: t29: ch = TokenFactor t25:1, t26:1
Creating new node: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t31: i32,ch = CopyFromReg t30, Register:i32 $sp
Creating new node: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
Creating new node: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
Creating new node: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
Creating new node: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
Creating new node: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
Creating new node: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
Creating new node: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
Creating new node: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
Creating new node: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t46: i32,ch = CopyFromReg t45, Register:i32 $sp
Creating new node: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
Creating new node: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
Creating new node: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
Creating new node: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
Creating new node: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
Creating new node: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
Creating new node: t54: i32,ch = CopyFromReg t53, Register:i32 $sp
Creating new node: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
Creating new node: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
Creating new node: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
Creating new node: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
Creating new node: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
Creating new node: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1
Initial selection DAG: %bb.0 'main:'
SelectionDAG has 61 nodes:
  t5: i32 = GlobalAddress<ptr @printf> 0
      t0: ch,glue = EntryToken
    t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
  t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
  t10: i32,ch = CopyFromReg t8, Register:i32 $sp
  t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
  t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
  t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
      t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
    t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
  t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
  t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
  t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
  t27: i32 = GlobalAddress<ptr @moreThan20Variables> 0
    t29: ch = TokenFactor t25:1, t26:1
  t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
  t31: i32,ch = CopyFromReg t30, Register:i32 $sp
  t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
  t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
  t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
  t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
  t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
  t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
    t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
  t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
  t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
  t46: i32,ch = CopyFromReg t45, Register:i32 $sp
  t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
  t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
  t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
  t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
    t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
  t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
  t54: i32,ch = CopyFromReg t53, Register:i32 $sp
  t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
  t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
  t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
    t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
  t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
  t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1



Combining: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1

Combining: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>

Combining: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1

Combining: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1

Combining: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1

Combining: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0

Combining: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t52: i32 = GlobalAddress<ptr @.str.3> 0

Combining: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1

Combining: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1

Combining: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1

Combining: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

Combining: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0

Combining: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t44: i32 = GlobalAddress<ptr @.str.2> 0

Combining: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32

Combining: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32

Combining: t41: i32 = FrameIndex<3>

Combining: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1

Combining: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1

Combining: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1

Combining: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0

Combining: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1

Combining: t35: i32 = Register $r2

Combining: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

Combining: t33: i32 = Register $r1

Combining: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25

Combining: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t29: ch = TokenFactor t25:1, t26:1

Combining: t28: i32 = Constant<4>

Combining: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32

Combining: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32

Combining: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32

Combining: t23: i32 = FrameIndex<2>

Combining: t22: i32 = Constant<10>

Combining: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32

Combining: t20: i32 = FrameIndex<1>

Combining: t19: i32 = Constant<5>

Combining: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1

Combining: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1

Combining: t16: i32 = TargetConstant<-1>

Combining: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1

Combining: t14: Untyped = RegisterMask

Combining: t13: i32 = TargetGlobalAddress<ptr @printf> 0

Combining: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0

Combining: t11: i32 = Register $r0

Combining: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t7: i32 = TargetConstant<0>

Combining: t6: i32 = GlobalAddress<ptr @.str.1> 0

Combining: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32

Combining: t3: i32 = undef

Combining: t2: i32 = FrameIndex<0>

Combining: t1: i32 = Constant<0>

Combining: t0: ch,glue = EntryToken
Optimized lowered selection DAG: %bb.0 'main:'
SelectionDAG has 54 nodes:
        t0: ch,glue = EntryToken
      t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
    t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
  t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
  t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
  t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
      t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
    t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
  t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
  t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
  t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
      t29: ch = TokenFactor t25:1, t26:1
    t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
  t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
  t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
  t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
  t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
  t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
  t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
    t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
  t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
    t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
  t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
  t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
  t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
  t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
      t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
    t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
  t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
  t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
  t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
    t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
  t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
  t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1


Legalizing node: t52: i32 = GlobalAddress<ptr @.str.3> 0
Analyzing result type: i32
Legal result type
Legally typed node: t52: i32 = GlobalAddress<ptr @.str.3> 0

Legalizing node: t44: i32 = GlobalAddress<ptr @.str.2> 0
Analyzing result type: i32
Legal result type
Legally typed node: t44: i32 = GlobalAddress<ptr @.str.2> 0

Legalizing node: t41: i32 = FrameIndex<3>
Analyzing result type: i32
Legal result type
Legally typed node: t41: i32 = FrameIndex<3>

Legalizing node: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0
Analyzing result type: i32
Legal result type
Legally typed node: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0

Legalizing node: t35: i32 = Register $r2
Ignoring node results
Legally typed node: t35: i32 = Register $r2

Legalizing node: t33: i32 = Register $r1
Ignoring node results
Legally typed node: t33: i32 = Register $r1

Legalizing node: t28: i32 = Constant<4>
Analyzing result type: i32
Legal result type
Legally typed node: t28: i32 = Constant<4>

Legalizing node: t23: i32 = FrameIndex<2>
Analyzing result type: i32
Legal result type
Legally typed node: t23: i32 = FrameIndex<2>

Legalizing node: t22: i32 = Constant<10>
Analyzing result type: i32
Legal result type
Legally typed node: t22: i32 = Constant<10>

Legalizing node: t20: i32 = FrameIndex<1>
Analyzing result type: i32
Legal result type
Legally typed node: t20: i32 = FrameIndex<1>

Legalizing node: t19: i32 = Constant<5>
Analyzing result type: i32
Legal result type
Legally typed node: t19: i32 = Constant<5>

Legalizing node: t16: i32 = TargetConstant<-1>
Ignoring node results
Legally typed node: t16: i32 = TargetConstant<-1>

Legalizing node: t14: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t14: Untyped = RegisterMask

Legalizing node: t13: i32 = TargetGlobalAddress<ptr @printf> 0
Analyzing result type: i32
Legal result type
Legally typed node: t13: i32 = TargetGlobalAddress<ptr @printf> 0

Legalizing node: t11: i32 = Register $r0
Ignoring node results
Legally typed node: t11: i32 = Register $r0

Legalizing node: t7: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t7: i32 = TargetConstant<0>

Legalizing node: t6: i32 = GlobalAddress<ptr @.str.1> 0
Analyzing result type: i32
Legal result type
Legally typed node: t6: i32 = GlobalAddress<ptr @.str.1> 0

Legalizing node: t3: i32 = undef
Analyzing result type: i32
Legal result type
Legally typed node: t3: i32 = undef

Legalizing node: t2: i32 = FrameIndex<0>
Analyzing result type: i32
Legal result type
Legally typed node: t2: i32 = FrameIndex<0>

Legalizing node: t1: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t1: i32 = Constant<0>

Legalizing node: t0: ch,glue = EntryToken
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Legally typed node: t0: ch,glue = EntryToken

Legalizing node: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch,glue = EntryToken
Legal operand
Analyzing operand: t1: i32 = Constant<0>
Legal operand
Analyzing operand: t2: i32 = FrameIndex<0>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32

Legalizing node: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
Legal operand
Legally typed node: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t6: i32 = GlobalAddress<ptr @.str.1> 0
Legal operand
Legally typed node: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0

Legalizing node: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
Legal operand
Analyzing operand: t13: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t14: Untyped = RegisterMask
Legal operand
Analyzing operand: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
Legal operand
Legally typed node: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1

Legalizing node: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
Legal operand
Analyzing operand: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
Legal operand
Legally typed node: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1

Legalizing node: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
Legal operand
Analyzing operand: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
Legal operand
Legally typed node: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1

Legalizing node: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
Legal operand
Analyzing operand: t19: i32 = Constant<5>
Legal operand
Analyzing operand: t20: i32 = FrameIndex<1>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32

Legalizing node: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
Legal operand
Analyzing operand: t22: i32 = Constant<10>
Legal operand
Analyzing operand: t23: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32

Legalizing node: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t20: i32 = FrameIndex<1>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32

Legalizing node: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t23: i32 = FrameIndex<2>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32

Legalizing node: t29: ch = TokenFactor t25:1, t26:1
Analyzing result type: ch
Legal result type
Analyzing operand: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
Legal operand
Analyzing operand: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
Legal operand
Legally typed node: t29: ch = TokenFactor t25:1, t26:1

Legalizing node: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t29: ch = TokenFactor t25:1, t26:1
Legal operand
Legally typed node: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
Legal operand
Legally typed node: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25

Legalizing node: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
Legal operand
Analyzing operand: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
Legal operand
Analyzing operand: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
Legal operand
Legally typed node: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

Legalizing node: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
Legal operand
Analyzing operand: t28: i32 = Constant<4>
Legal operand
Analyzing operand: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
Legal operand
Legally typed node: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1

Legalizing node: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
Legal operand
Analyzing operand: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0
Legal operand
Analyzing operand: t14: Untyped = RegisterMask
Legal operand
Analyzing operand: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
Legal operand
Legally typed node: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1

Legalizing node: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
Legal operand
Analyzing operand: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
Legal operand
Legally typed node: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1

Legalizing node: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
Legal operand
Analyzing operand: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
Legal operand
Legally typed node: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1

Legalizing node: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
Analyzing result type: ch
Legal result type
Analyzing operand: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
Legal operand
Analyzing operand: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
Legal operand
Analyzing operand: t41: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32

Legalizing node: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t41: i32 = FrameIndex<3>
Legal operand
Analyzing operand: t3: i32 = undef
Legal operand
Legally typed node: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32

Legalizing node: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
Legal operand
Legally typed node: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t44: i32 = GlobalAddress<ptr @.str.2> 0
Legal operand
Legally typed node: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0

Legalizing node: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
Legal operand
Analyzing operand: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
Legal operand
Analyzing operand: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
Legal operand
Legally typed node: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

Legalizing node: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
Legal operand
Analyzing operand: t13: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t14: Untyped = RegisterMask
Legal operand
Analyzing operand: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
Legal operand
Legally typed node: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1

Legalizing node: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
Legal operand
Analyzing operand: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
Legal operand
Legally typed node: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1

Legalizing node: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
Legal operand
Analyzing operand: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
Legal operand
Legally typed node: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1

Legalizing node: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
Legal operand
Legally typed node: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing node: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
Legal operand
Analyzing operand: t52: i32 = GlobalAddress<ptr @.str.3> 0
Legal operand
Legally typed node: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0

Legalizing node: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
Legal operand
Analyzing operand: t13: i32 = TargetGlobalAddress<ptr @printf> 0
Legal operand
Analyzing operand: t14: Untyped = RegisterMask
Legal operand
Analyzing operand: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
Legal operand
Legally typed node: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1

Legalizing node: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
Legal operand
Analyzing operand: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
Legal operand
Legally typed node: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1

Legalizing node: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
Legal operand
Analyzing operand: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
Legal operand
Legally typed node: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1

Legalizing node: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
Legal operand
Analyzing operand: t1: i32 = Constant<0>
Legal operand
Legally typed node: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>

Legalizing node: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1
Analyzing result type: ch
Legal result type
Analyzing operand: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
Legal operand
Analyzing operand: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
Legal operand
Legally typed node: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1

Legalizing node: t65535: ch = handlenode t60
Analyzing result type: ch
Legal result type
Analyzing operand: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1
Legal operand
Legally typed node: t65535: ch = handlenode t60

Type-legalized selection DAG: %bb.0 'main:'
SelectionDAG has 54 nodes:
        t0: ch,glue = EntryToken
      t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
    t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
  t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
  t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
  t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
      t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
    t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
  t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
  t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
  t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
      t29: ch = TokenFactor t25:1, t26:1
    t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
  t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
  t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
  t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
  t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
  t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
  t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
    t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
  t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
    t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
  t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
  t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
  t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
  t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
      t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
    t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
  t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
  t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
  t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
    t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
  t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
  t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1



Legalizing: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1
Legal node: nothing to do

Legalizing: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
Legal node: nothing to do

Legalizing: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
Legal node: nothing to do

Legalizing: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1

Legalizing: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
Legal node: nothing to do

Legalizing: t55: ch,glue = CopyToReg t53, Register:i32 $r0, GlobalAddress:i32<ptr @.str.3> 0
Legal node: nothing to do

Legalizing: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
Legal node: nothing to do

Legalizing: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1

Legalizing: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
Legal node: nothing to do

Legalizing: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
Legal node: nothing to do

Legalizing: t47: ch,glue = CopyToReg t45, Register:i32 $r0, GlobalAddress:i32<ptr @.str.2> 0
Legal node: nothing to do

Legalizing: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
Legalizing non-extending load operation

Legalizing: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
Legal node: nothing to do

Legalizing: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1

Legalizing: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
Legal node: nothing to do

Legalizing: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
Legal node: nothing to do

Legalizing: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
Legal node: nothing to do

Legalizing: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
Legal node: nothing to do

Legalizing: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t29: ch = TokenFactor t25:1, t26:1
Legal node: nothing to do

Legalizing: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
Legalizing non-extending load operation

Legalizing: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Legalizing: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
Legal node: nothing to do

Legalizing: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1

Legalizing: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
Legal node: nothing to do

Legalizing: t12: ch,glue = CopyToReg t8, Register:i32 $r0, GlobalAddress:i32<ptr @.str.1> 0
Legal node: nothing to do

Legalizing: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t52: i32 = GlobalAddress<ptr @.str.3> 0
Trying custom legalization
Lowering node: t52: i32 = GlobalAddress<ptr @.str.3> 0
Creating new constant pool: t61: i32 = TargetConstantPool<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
Creating new node: t62: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
Creating new node: t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32
Successfully custom legalized node
 ... replacing: t52: i32 = GlobalAddress<ptr @.str.3> 0
     with:      t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32

Legalizing: t44: i32 = GlobalAddress<ptr @.str.2> 0
Trying custom legalization
Lowering node: t44: i32 = GlobalAddress<ptr @.str.2> 0
Creating new constant pool: t64: i32 = TargetConstantPool<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
Creating new node: t65: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
Creating new node: t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32
Successfully custom legalized node
 ... replacing: t44: i32 = GlobalAddress<ptr @.str.2> 0
     with:      t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32

Legalizing: t41: i32 = FrameIndex<3>
Legal node: nothing to do

Legalizing: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0
Legal node: nothing to do

Legalizing: t35: i32 = Register $r2

Legalizing: t33: i32 = Register $r1

Legalizing: t28: i32 = Constant<4>
Legal node: nothing to do

Legalizing: t23: i32 = FrameIndex<2>
Legal node: nothing to do

Legalizing: t22: i32 = Constant<10>
Legal node: nothing to do

Legalizing: t20: i32 = FrameIndex<1>
Legal node: nothing to do

Legalizing: t19: i32 = Constant<5>
Legal node: nothing to do

Legalizing: t16: i32 = TargetConstant<-1>

Legalizing: t14: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t13: i32 = TargetGlobalAddress<ptr @printf> 0
Legal node: nothing to do

Legalizing: t11: i32 = Register $r0

Legalizing: t7: i32 = TargetConstant<0>

Legalizing: t6: i32 = GlobalAddress<ptr @.str.1> 0
Trying custom legalization
Lowering node: t6: i32 = GlobalAddress<ptr @.str.1> 0
Creating new constant pool: t67: i32 = TargetConstantPool<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
Creating new node: t68: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
Creating new node: t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32
Successfully custom legalized node
 ... replacing: t6: i32 = GlobalAddress<ptr @.str.1> 0
     with:      t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32

Legalizing: t3: i32 = undef
Legal node: nothing to do

Legalizing: t2: i32 = FrameIndex<0>
Legal node: nothing to do

Legalizing: t1: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t0: ch,glue = EntryToken
Legal node: nothing to do

Legalizing: t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32
Legalizing non-extending load operation

Legalizing: t68: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
Legal node: nothing to do

Legalizing: t67: i32 = TargetConstantPool<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
Legal node: nothing to do

Legalizing: t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32
Legalizing non-extending load operation

Legalizing: t65: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
Legal node: nothing to do

Legalizing: t64: i32 = TargetConstantPool<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
Legal node: nothing to do

Legalizing: t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32
Legalizing non-extending load operation

Legalizing: t62: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
Legal node: nothing to do

Legalizing: t61: i32 = TargetConstantPool<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
Legal node: nothing to do
Legalized selection DAG: %bb.0 'main:'
SelectionDAG has 60 nodes:
  t0: ch,glue = EntryToken
      t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
    t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
      t68: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
    t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32
  t12: ch,glue = CopyToReg t8, Register:i32 $r0, t69
  t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
  t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
      t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
    t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
  t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
  t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
  t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
      t29: ch = TokenFactor t25:1, t26:1
    t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
  t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
  t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
  t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
  t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
  t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
  t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
    t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
  t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
    t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
      t65: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
    t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32
  t47: ch,glue = CopyToReg t45, Register:i32 $r0, t66
  t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
  t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
  t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
      t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
    t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
      t62: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
    t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32
  t55: ch,glue = CopyToReg t53, Register:i32 $r0, t63
  t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
  t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
    t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
  t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
  t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1



Legalizing: t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32
Legalizing non-extending load operation

Combining: t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32

Legalizing: t68: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
Legal node: nothing to do

Combining: t68: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0

Legalizing: t67: i32 = TargetConstantPool<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
Legal node: nothing to do

Combining: t67: i32 = TargetConstantPool<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0

Legalizing: t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32
Legalizing non-extending load operation

Combining: t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32

Legalizing: t65: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
Legal node: nothing to do

Combining: t65: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0

Legalizing: t64: i32 = TargetConstantPool<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
Legal node: nothing to do

Combining: t64: i32 = TargetConstantPool<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0

Legalizing: t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32
Legalizing non-extending load operation

Combining: t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32

Legalizing: t62: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
Legal node: nothing to do

Combining: t62: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0

Legalizing: t61: i32 = TargetConstantPool<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
Legal node: nothing to do

Combining: t61: i32 = TargetConstantPool<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0

Legalizing: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1
Legal node: nothing to do

Combining: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1

Legalizing: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
Legal node: nothing to do

Combining: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>

Legalizing: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
Legal node: nothing to do

Combining: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1

Legalizing: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1

Combining: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1

Legalizing: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
Legal node: nothing to do

Combining: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1

Legalizing: t55: ch,glue = CopyToReg t53, Register:i32 $r0, t63
Legal node: nothing to do

Combining: t55: ch,glue = CopyToReg t53, Register:i32 $r0, t63

Legalizing: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
Legal node: nothing to do

Combining: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1

Legalizing: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1

Combining: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1

Legalizing: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
Legal node: nothing to do

Combining: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1

Legalizing: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
Legal node: nothing to do

Combining: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

Legalizing: t47: ch,glue = CopyToReg t45, Register:i32 $r0, t66
Legal node: nothing to do

Combining: t47: ch,glue = CopyToReg t45, Register:i32 $r0, t66

Legalizing: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
Legalizing non-extending load operation

Combining: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32

Legalizing: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32

Legalizing: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
Legal node: nothing to do

Combining: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1

Legalizing: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1

Combining: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1

Legalizing: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
Legal node: nothing to do

Combining: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1

Legalizing: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
Legal node: nothing to do

Combining: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1

Legalizing: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
Legal node: nothing to do

Combining: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

Legalizing: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
Legal node: nothing to do

Combining: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25

Legalizing: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t29: ch = TokenFactor t25:1, t26:1
Legal node: nothing to do

Combining: t29: ch = TokenFactor t25:1, t26:1

Legalizing: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
Legalizing non-extending load operation

Combining: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32

Legalizing: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
Legalizing non-extending load operation

Combining: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32

Legalizing: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32

Legalizing: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32

Legalizing: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
Legal node: nothing to do

Combining: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1

Legalizing: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1

Combining: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1

Legalizing: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
Legal node: nothing to do

Combining: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1

Legalizing: t12: ch,glue = CopyToReg t8, Register:i32 $r0, t69
Legal node: nothing to do

Combining: t12: ch,glue = CopyToReg t8, Register:i32 $r0, t69

Legalizing: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>

Combining: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>

Legalizing: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32

Legalizing: t41: i32 = FrameIndex<3>
Legal node: nothing to do

Combining: t41: i32 = FrameIndex<3>

Legalizing: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0
Legal node: nothing to do

Combining: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0

Legalizing: t35: i32 = Register $r2

Combining: t35: i32 = Register $r2

Legalizing: t33: i32 = Register $r1

Combining: t33: i32 = Register $r1

Legalizing: t28: i32 = Constant<4>
Legal node: nothing to do

Combining: t28: i32 = Constant<4>

Legalizing: t23: i32 = FrameIndex<2>
Legal node: nothing to do

Combining: t23: i32 = FrameIndex<2>

Legalizing: t22: i32 = Constant<10>
Legal node: nothing to do

Combining: t22: i32 = Constant<10>

Legalizing: t20: i32 = FrameIndex<1>
Legal node: nothing to do

Combining: t20: i32 = FrameIndex<1>

Legalizing: t19: i32 = Constant<5>
Legal node: nothing to do

Combining: t19: i32 = Constant<5>

Legalizing: t16: i32 = TargetConstant<-1>

Combining: t16: i32 = TargetConstant<-1>

Legalizing: t14: Untyped = RegisterMask
Legal node: nothing to do

Combining: t14: Untyped = RegisterMask

Legalizing: t13: i32 = TargetGlobalAddress<ptr @printf> 0
Legal node: nothing to do

Combining: t13: i32 = TargetGlobalAddress<ptr @printf> 0

Legalizing: t11: i32 = Register $r0

Combining: t11: i32 = Register $r0

Legalizing: t7: i32 = TargetConstant<0>

Combining: t7: i32 = TargetConstant<0>

Legalizing: t3: i32 = undef
Legal node: nothing to do

Combining: t3: i32 = undef

Legalizing: t2: i32 = FrameIndex<0>
Legal node: nothing to do

Combining: t2: i32 = FrameIndex<0>

Legalizing: t1: i32 = Constant<0>
Legal node: nothing to do

Combining: t1: i32 = Constant<0>

Legalizing: t0: ch,glue = EntryToken
Legal node: nothing to do

Combining: t0: ch,glue = EntryToken
Optimized legalized selection DAG: %bb.0 'main:'
SelectionDAG has 60 nodes:
  t0: ch,glue = EntryToken
      t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
    t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
      t68: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0
    t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32
  t12: ch,glue = CopyToReg t8, Register:i32 $r0, t69
  t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
  t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
      t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1
    t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
  t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
  t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
  t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
      t29: ch = TokenFactor t25:1, t26:1
    t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
  t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25
  t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
  t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1
  t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
  t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
  t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1
    t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
  t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
    t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
      t65: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0
    t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32
  t47: ch,glue = CopyToReg t45, Register:i32 $r0, t66
  t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
  t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
  t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
      t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1
    t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
      t62: i32 = ARMISD::Wrapper TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0
    t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32
  t55: ch,glue = CopyToReg t53, Register:i32 $r0, t63
  t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
  t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
    t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1
  t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>
  t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t60: ch = ARMISD::RET_FLAG t59, Register:i32 $r0, t59:1
ISEL: Starting pattern match
  Initial Opcode index to 141391
  Skipped scope entry (due to false predicate) at index 141395, continuing at 141411
  Skipped scope entry (due to false predicate) at index 141412, continuing at 141428
Creating constant: t70: i32 = TargetConstant<14>
  Morphed node: t60: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t59, t59:1
ISEL: Match complete!

ISEL: Starting selection on root node: t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, Constant:i32<0>

ISEL: Starting selection on root node: t58: i32,ch,glue = CopyFromReg t57, Register:i32 $r0, t57:1

ISEL: Starting selection on root node: t57: ch,glue = callseq_end t56, TargetConstant:i32<0>, TargetConstant:i32<-1>, t56:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t57: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t56, t56:1
ISEL: Match complete!

ISEL: Starting selection on root node: t56: ch,glue = ARMISD::CALL t55, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t56: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55, t55:1
ISEL: Match complete!

ISEL: Starting selection on root node: t55: ch,glue = CopyToReg t53, Register:i32 $r0, t63

ISEL: Starting selection on root node: t53: ch,glue = callseq_start t51:1, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1
ISEL: Match complete!

ISEL: Starting selection on root node: t51: i32,ch,glue = CopyFromReg t50, Register:i32 $r0, t50:1

ISEL: Starting selection on root node: t50: ch,glue = callseq_end t49, TargetConstant:i32<0>, TargetConstant:i32<-1>, t49:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t50: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t49, t49:1
ISEL: Match complete!

ISEL: Starting selection on root node: t49: ch,glue = ARMISD::CALL t48, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t49: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48, t48:1
ISEL: Match complete!

ISEL: Starting selection on root node: t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

ISEL: Starting selection on root node: t47: ch,glue = CopyToReg t45, Register:i32 $r0, t66

ISEL: Starting selection on root node: t45: ch,glue = callseq_start t43:1, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1
ISEL: Match complete!

ISEL: Starting selection on root node: t43: i32,ch = load<(dereferenceable load (s32) from %ir.4)> t42, FrameIndex:i32<3>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t43: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t42
ISEL: Match complete!

ISEL: Starting selection on root node: t42: ch = store<(store (s32) into %ir.4)> t40:1, t40, FrameIndex:i32<3>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t42: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t40, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t40:1
ISEL: Match complete!

ISEL: Starting selection on root node: t40: i32,ch,glue = CopyFromReg t39, Register:i32 $r0, t39:1

ISEL: Starting selection on root node: t39: ch,glue = callseq_end t38, TargetConstant:i32<0>, TargetConstant:i32<-1>, t38:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t39: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t38, t38:1
ISEL: Match complete!

ISEL: Starting selection on root node: t38: ch,glue = ARMISD::CALL t36, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t38: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36, t36:1
ISEL: Match complete!

ISEL: Starting selection on root node: t36: ch,glue = CopyToReg t34, Register:i32 $r2, Constant:i32<4>, t34:1

ISEL: Starting selection on root node: t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

ISEL: Starting selection on root node: t32: ch,glue = CopyToReg t30, Register:i32 $r0, t25

ISEL: Starting selection on root node: t30: ch,glue = callseq_start t29, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29
ISEL: Match complete!

ISEL: Starting selection on root node: t29: ch = TokenFactor t25:1, t26:1

ISEL: Starting selection on root node: t25: i32,ch = load<(dereferenceable load (s32) from %ir.2)> t24, FrameIndex:i32<1>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24
ISEL: Match complete!

ISEL: Starting selection on root node: t26: i32,ch = load<(dereferenceable load (s32) from %ir.3)> t24, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  Match failed at index 104021
  Continuing at 104120
  Match failed at index 104133
  Continuing at 104156
  Match failed at index 104157
  Continuing at 104213
  Match failed at index 104214
  Continuing at 104270
  Match failed at index 104271
  Continuing at 104298
  Match failed at index 104299
  Continuing at 104381
  Match failed at index 104384
  Continuing at 104407
  Match failed at index 104408
  Continuing at 104464
  Match failed at index 104465
  Continuing at 104521
  Match failed at index 104522
  Continuing at 104549
  Match failed at index 104550
  Continuing at 104632
  Match failed at index 104633
  Continuing at 104725
  Match failed at index 104728
  Continuing at 104750
  Match failed at index 104751
  Continuing at 104805
  Match failed at index 104806
  Continuing at 104909
  Morphed node: t26: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24
ISEL: Match complete!

ISEL: Starting selection on root node: t24: ch = store<(store (s32) into %ir.3)> t21, Constant:i32<10>, FrameIndex:i32<2>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t24: ch = tSTRspi<Mem:(store (s32) into %ir.3)> Constant:i32<10>, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t21
ISEL: Match complete!

ISEL: Starting selection on root node: t21: ch = store<(store (s32) into %ir.2)> t18:1, Constant:i32<5>, FrameIndex:i32<1>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> Constant:i32<5>, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1
ISEL: Match complete!

ISEL: Starting selection on root node: t18: i32,ch,glue = CopyFromReg t17, Register:i32 $r0, t17:1

ISEL: Starting selection on root node: t17: ch,glue = callseq_end t15, TargetConstant:i32<0>, TargetConstant:i32<-1>, t15:1
ISEL: Starting pattern match
  Initial Opcode index to 134937
  OpcodeSwitch from 134941 to 134945
  Morphed node: t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15, t15:1
ISEL: Match complete!

ISEL: Starting selection on root node: t15: ch,glue = ARMISD::CALL t12, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12:1
ISEL: Starting pattern match
  Initial Opcode index to 135578
  OpcodeSwitch from 135584 to 135588
  Skipped scope entry (due to false predicate) at index 135591, continuing at 135601
  Morphed node: t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1
ISEL: Match complete!

ISEL: Starting selection on root node: t12: ch,glue = CopyToReg t8, Register:i32 $r0, t69

ISEL: Starting selection on root node: t69: i32,ch = load<(load (s32) from constant-pool)> t0, t68, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  OpcodeSwitch from 104021 to 104088
  Morphed node: t69: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t66: i32,ch = load<(load (s32) from constant-pool)> t0, t65, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  OpcodeSwitch from 104021 to 104088
  Morphed node: t66: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t63: i32,ch = load<(load (s32) from constant-pool)> t0, t62, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 103819
  Match failed at index 103835
  Continuing at 103857
  Match failed at index 103858
  Continuing at 103912
  Match failed at index 103913
  Continuing at 104018
  Continuing at 104019
  OpcodeSwitch from 104021 to 104088
  Morphed node: t63: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t8: ch,glue = callseq_start t4, TargetConstant:i32<0>, TargetConstant:i32<0>
ISEL: Starting pattern match
  Initial Opcode index to 134998
  OpcodeSwitch from 135001 to 135005
  Morphed node: t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4
ISEL: Match complete!

ISEL: Starting selection on root node: t4: ch = store<(store (s32) into %ir.1)> t0, Constant:i32<0>, FrameIndex:i32<0>, undef:i32
ISEL: Starting pattern match
  Initial Opcode index to 90661
  Match failed at index 90667
  Continuing at 91138
  Match failed at index 91154
  Continuing at 91176
  Match failed at index 91177
  Continuing at 91231
  Continuing at 91232
  Match failed at index 91237
  Continuing at 91392
  Continuing at 91393
  Match failed at index 91396
  Continuing at 91852
  Match failed at index 91872
  Continuing at 91895
  Match failed at index 91896
  Continuing at 91952
  Match failed at index 91955
  Continuing at 91978
  Match failed at index 91979
  Continuing at 92035
  Continuing at 92036
  Match failed at index 92040
  Continuing at 92140
  Continuing at 92141
  Match failed at index 92142
  Continuing at 92187
  Continuing at 92188
  Match failed at index 92191
  Continuing at 92645
  Match failed at index 92665
  Continuing at 92687
  Match failed at index 92688
  Continuing at 92714
  Morphed node: t4: ch = tSTRspi<Mem:(store (s32) into %ir.1)> Constant:i32<0>, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t67: i32 = TargetConstantPool<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0

ISEL: Starting selection on root node: t64: i32 = TargetConstantPool<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0

ISEL: Starting selection on root node: t61: i32 = TargetConstantPool<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0

ISEL: Starting selection on root node: t37: i32 = TargetGlobalAddress<ptr @moreThan20Variables> 0

ISEL: Starting selection on root node: t35: i32 = Register $r2

ISEL: Starting selection on root node: t33: i32 = Register $r1

ISEL: Starting selection on root node: t28: i32 = Constant<4>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t77: i32 = TargetConstant<4>
  Morphed node: t28: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t22: i32 = Constant<10>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t78: i32 = TargetConstant<10>
  Morphed node: t22: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t19: i32 = Constant<5>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
Creating constant: t79: i32 = TargetConstant<5>
  Morphed node: t19: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t16: i32 = TargetConstant<-1>

ISEL: Starting selection on root node: t14: Untyped = RegisterMask

ISEL: Starting selection on root node: t13: i32 = TargetGlobalAddress<ptr @printf> 0

ISEL: Starting selection on root node: t11: i32 = Register $r0

ISEL: Starting selection on root node: t7: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t1: i32 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 140929
  Match failed at index 140936
  Continuing at 140959
  Match failed at index 140962
  Continuing at 140985
  Match failed at index 140988
  Continuing at 141007
  Match failed at index 141008
  Continuing at 141036
  Match failed at index 141037
  Continuing at 141050
  Morphed node: t1: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch,glue = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 'main:'
SelectionDAG has 62 nodes:
  t0: ch,glue = EntryToken
  t1: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg
      t4: ch = tSTRspi<Mem:(store (s32) into %ir.1)> t1, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0
    t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4
    t69: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t12: ch,glue = CopyToReg t8:1, Register:i32 $r0, t69
  t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1
  t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15:1, t15:2
    t22: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg
      t19: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg
      t18: i32,ch,glue = CopyFromReg t17:1, Register:i32 $r0, t17:2
    t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> t19, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1
  t24: ch = tSTRspi<Mem:(store (s32) into %ir.3)> t22, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t21
  t26: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24
  t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24
      t29: ch = TokenFactor t25:1, t26:1
    t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29
  t32: ch,glue = CopyToReg t30:1, Register:i32 $r0, t25
  t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1
    t28: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg
  t36: ch,glue = CopyToReg t34, Register:i32 $r2, t28, t34:1
  t38: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36, t36:1
  t39: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t38:1, t38:2
  t40: i32,ch,glue = CopyFromReg t39:1, Register:i32 $r0, t39:2
    t42: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t40, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t40:1
  t43: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t42
    t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1
    t66: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t47: ch,glue = CopyToReg t45:1, Register:i32 $r0, t66
  t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1
  t49: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48, t48:1
  t50: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t49:1, t49:2
      t51: i32,ch,glue = CopyFromReg t50:1, Register:i32 $r0, t50:2
    t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1
    t63: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0
  t55: ch,glue = CopyToReg t53:1, Register:i32 $r0, t63
  t56: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55, t55:1
  t57: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t56:1, t56:2
    t58: i32,ch,glue = CopyFromReg t57:1, Register:i32 $r0, t57:2
  t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, t1
  t60: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t59, t59:1


********** List Scheduling %bb.0 '' **********
SU(0): t60: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t59, t59:1

    t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, t1

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Barrier
    SU(1): Data Latency=1
SU(1): t1: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
    SU(0): Data Latency=1
    SU(16): Data Latency=1
SU(2): t58: i32,ch,glue = CopyFromReg t57:1, Register:i32 $r0, t57:2

    t55: ch,glue = CopyToReg t53:1, Register:i32 $r0, t63

    t56: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55, t55:1

    t57: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t56:1, t56:2

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(3): t63: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1
SU(4): t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
  Successors:
    SU(2): Ord  Latency=1 Barrier
SU(5): t51: i32,ch,glue = CopyFromReg t50:1, Register:i32 $r0, t50:2

    t47: ch,glue = CopyToReg t45:1, Register:i32 $r0, t66

    t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

    t49: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48, t48:1

    t50: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t49:1, t49:2

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1
    SU(23): Ord  Latency=1 Barrier
    SU(22): Data Latency=1
  Successors:
    SU(4): Ord  Latency=1 Barrier
SU(6): t43: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t42

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Barrier
  Successors:
    SU(5): Data Latency=1
    SU(23): Ord  Latency=1 Barrier
SU(7): t42: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t40, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t40:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(6): Ord  Latency=1 Barrier
SU(8): t40: i32,ch,glue = CopyFromReg t39:1, Register:i32 $r0, t39:2

    t32: ch,glue = CopyToReg t30:1, Register:i32 $r0, t25

    t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

    t36: ch,glue = CopyToReg t34, Register:i32 $r2, t28, t34:1

    t38: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36, t36:1

    t39: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t38:1, t38:2

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(9): Data Latency=1
    SU(10): Data Latency=1
    SU(20): Ord  Latency=1 Barrier
    SU(19): Data Latency=1
  Successors:
    SU(7): Data Latency=1
    SU(7): Ord  Latency=1 Barrier
SU(9): t28: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(8): Data Latency=1
SU(10): t26: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(11): Ord  Latency=1 Barrier
  Successors:
    SU(8): Data Latency=1
    SU(21): Ord  Latency=1 Barrier
SU(11): t24: ch = tSTRspi<Mem:(store (s32) into %ir.3)> t22, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t21

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(18): Data Latency=1
    SU(12): Ord  Latency=1 Barrier
  Successors:
    SU(10): Ord  Latency=1 Barrier
    SU(19): Ord  Latency=1 Barrier
SU(12): t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> t19, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(17): Data Latency=1
    SU(13): Ord  Latency=1 Barrier
  Successors:
    SU(11): Ord  Latency=1 Barrier
SU(13): t18: i32,ch,glue = CopyFromReg t17:1, Register:i32 $r0, t17:2

    t12: ch,glue = CopyToReg t8:1, Register:i32 $r0, t69

    t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1

    t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15:1, t15:2

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 12
  Predecessors:
    SU(15): Ord  Latency=1 Barrier
    SU(14): Data Latency=1
  Successors:
    SU(12): Ord  Latency=1 Barrier
SU(14): t69: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
    SU(13): Data Latency=1
SU(15): t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 13
  Predecessors:
    SU(16): Ord  Latency=1 Barrier
  Successors:
    SU(13): Ord  Latency=1 Barrier
SU(16): t4: ch = tSTRspi<Mem:(store (s32) into %ir.1)> t1, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1
  Successors:
    SU(15): Ord  Latency=1 Barrier
SU(17): t19: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(12): Data Latency=1
SU(18): t22: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(11): Data Latency=1
SU(19): t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(11): Ord  Latency=1 Barrier
  Successors:
    SU(8): Data Latency=1
    SU(21): Ord  Latency=1 Barrier
SU(20): t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(21): Ord  Latency=0 Barrier
  Successors:
    SU(8): Ord  Latency=1 Barrier
SU(21): t29: ch = TokenFactor t25:1, t26:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(19): Ord  Latency=1 Barrier
    SU(10): Ord  Latency=1 Barrier
  Successors:
    SU(20): Ord  Latency=0 Barrier
SU(22): t66: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1
SU(23): t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
  Successors:
    SU(5): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t60: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t59, t59:1

    t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, t1


*** Scheduling [0]: SU(0): t60: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t59, t59:1

    t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, t1


Examining Available:
Height 1: SU(2): t58: i32,ch,glue = CopyFromReg t57:1, Register:i32 $r0, t57:2

    t55: ch,glue = CopyToReg t53:1, Register:i32 $r0, t63

    t56: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55, t55:1

    t57: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t56:1, t56:2


*** Scheduling [1]: SU(2): t58: i32,ch,glue = CopyFromReg t57:1, Register:i32 $r0, t57:2

    t55: ch,glue = CopyToReg t53:1, Register:i32 $r0, t63

    t56: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55, t55:1

    t57: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t56:1, t56:2


Examining Available:
Height 2: SU(3): t63: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 2: SU(4): t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1


*** Scheduling [2]: SU(3): t63: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 2: SU(4): t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1


*** Scheduling [3]: SU(4): t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1


Examining Available:
Height 4: SU(5): t51: i32,ch,glue = CopyFromReg t50:1, Register:i32 $r0, t50:2

    t47: ch,glue = CopyToReg t45:1, Register:i32 $r0, t66

    t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

    t49: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48, t48:1

    t50: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t49:1, t49:2


*** Scheduling [4]: SU(5): t51: i32,ch,glue = CopyFromReg t50:1, Register:i32 $r0, t50:2

    t47: ch,glue = CopyToReg t45:1, Register:i32 $r0, t66

    t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

    t49: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48, t48:1

    t50: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t49:1, t49:2


Examining Available:
Height 5: SU(22): t66: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 5: SU(23): t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1


*** Scheduling [5]: SU(22): t66: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 5: SU(23): t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1


*** Scheduling [6]: SU(23): t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1


Examining Available:
Height 7: SU(6): t43: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t42


*** Scheduling [7]: SU(6): t43: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t42


Examining Available:
Height 8: SU(7): t42: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t40, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t40:1


*** Scheduling [8]: SU(7): t42: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t40, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t40:1


Examining Available:
Height 9: SU(8): t40: i32,ch,glue = CopyFromReg t39:1, Register:i32 $r0, t39:2

    t32: ch,glue = CopyToReg t30:1, Register:i32 $r0, t25

    t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

    t36: ch,glue = CopyToReg t34, Register:i32 $r2, t28, t34:1

    t38: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36, t36:1

    t39: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t38:1, t38:2


*** Scheduling [9]: SU(8): t40: i32,ch,glue = CopyFromReg t39:1, Register:i32 $r0, t39:2

    t32: ch,glue = CopyToReg t30:1, Register:i32 $r0, t25

    t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

    t36: ch,glue = CopyToReg t34, Register:i32 $r2, t28, t34:1

    t38: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36, t36:1

    t39: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t38:1, t38:2


Examining Available:
Height 10: SU(9): t28: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg

Height 10: SU(20): t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29


*** Scheduling [10]: SU(9): t28: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 10: SU(20): t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29


*** Scheduling [11]: SU(20): t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29


Examining Available:
Height 11: SU(21): t29: ch = TokenFactor t25:1, t26:1


*** Scheduling [12]: SU(21): t29: ch = TokenFactor t25:1, t26:1


Examining Available:
Height 13: SU(10): t26: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24

Height 13: SU(19): t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24


*** Scheduling [13]: SU(10): t26: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24


Examining Available:
Height 13: SU(19): t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24


*** Scheduling [14]: SU(19): t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24


Examining Available:
Height 15: SU(11): t24: ch = tSTRspi<Mem:(store (s32) into %ir.3)> t22, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t21


*** Scheduling [15]: SU(11): t24: ch = tSTRspi<Mem:(store (s32) into %ir.3)> t22, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t21


Examining Available:
Height 16: SU(18): t22: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg

Height 16: SU(12): t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> t19, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1


*** Scheduling [16]: SU(18): t22: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 16: SU(12): t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> t19, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1


*** Scheduling [17]: SU(12): t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> t19, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1


Examining Available:
Height 18: SU(17): t19: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg

Height 18: SU(13): t18: i32,ch,glue = CopyFromReg t17:1, Register:i32 $r0, t17:2

    t12: ch,glue = CopyToReg t8:1, Register:i32 $r0, t69

    t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1

    t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15:1, t15:2


*** Scheduling [18]: SU(17): t19: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg


Examining Available:
Height 18: SU(13): t18: i32,ch,glue = CopyFromReg t17:1, Register:i32 $r0, t17:2

    t12: ch,glue = CopyToReg t8:1, Register:i32 $r0, t69

    t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1

    t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15:1, t15:2


*** Scheduling [19]: SU(13): t18: i32,ch,glue = CopyFromReg t17:1, Register:i32 $r0, t17:2

    t12: ch,glue = CopyToReg t8:1, Register:i32 $r0, t69

    t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1

    t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15:1, t15:2


Examining Available:
Height 20: SU(14): t69: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

Height 20: SU(15): t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4


*** Scheduling [20]: SU(14): t69: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 20: SU(15): t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4


*** Scheduling [21]: SU(15): t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4


Examining Available:
Height 22: SU(16): t4: ch = tSTRspi<Mem:(store (s32) into %ir.1)> t1, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


*** Scheduling [22]: SU(16): t4: ch = tSTRspi<Mem:(store (s32) into %ir.1)> t1, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0


Examining Available:
Height 23: SU(1): t1: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg


*** Scheduling [23]: SU(1): t1: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

*** Final schedule ***
SU(1): t1: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg

SU(16): t4: ch = tSTRspi<Mem:(store (s32) into %ir.1)> t1, TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(15): t8: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t4

SU(14): t69: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.1 = private unnamed_addr constant [25 x i8] c"[INFO] Starting program.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(13): t18: i32,ch,glue = CopyFromReg t17:1, Register:i32 $r0, t17:2

    t12: ch,glue = CopyToReg t8:1, Register:i32 $r0, t69

    t15: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t12, t12:1

    t17: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t15:1, t15:2

SU(17): t19: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<5>, TargetConstant:i32<14>, Register:i32 $noreg

SU(12): t21: ch = tSTRspi<Mem:(store (s32) into %ir.2)> t19, TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t18:1

SU(18): t22: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<10>, TargetConstant:i32<14>, Register:i32 $noreg

SU(11): t24: ch = tSTRspi<Mem:(store (s32) into %ir.3)> t22, TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t21

SU(19): t25: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.2)> TargetFrameIndex:i32<1>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24

SU(10): t26: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.3)> TargetFrameIndex:i32<2>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t24

SU(21): t29: ch = TokenFactor t25:1, t26:1

SU(20): t30: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t29

SU(9): t28: i32 = tMOVi8 Register:i32 $cpsr, TargetConstant:i32<4>, TargetConstant:i32<14>, Register:i32 $noreg

SU(8): t40: i32,ch,glue = CopyFromReg t39:1, Register:i32 $r0, t39:2

    t32: ch,glue = CopyToReg t30:1, Register:i32 $r0, t25

    t34: ch,glue = CopyToReg t32, Register:i32 $r1, t26, t32:1

    t36: ch,glue = CopyToReg t34, Register:i32 $r2, t28, t34:1

    t38: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @moreThan20Variables> 0, Register:i32 $r0, Register:i32 $r1, Register:i32 $r2, RegisterMask:Untyped, t36, t36:1

    t39: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t38:1, t38:2

SU(7): t42: ch = tSTRspi<Mem:(store (s32) into %ir.4)> t40, TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t40:1

SU(6): t43: i32,ch = tLDRspi<Mem:(dereferenceable load (s32) from %ir.4)> TargetFrameIndex:i32<3>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t42

SU(23): t45: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t43:1

SU(22): t66: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.2 = private unnamed_addr constant [18 x i8] c"The result is: %d\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(5): t51: i32,ch,glue = CopyFromReg t50:1, Register:i32 $r0, t50:2

    t47: ch,glue = CopyToReg t45:1, Register:i32 $r0, t66

    t48: ch,glue = CopyToReg t47, Register:i32 $r1, t43, t47:1

    t49: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t48, t48:1

    t50: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t49:1, t49:2

SU(4): t53: i32,ch,glue = ADJCALLSTACKDOWN TargetConstant:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<14>, Register:i32 $noreg, t51:1

SU(3): t63: i32,ch = tLDRpci<Mem:(load (s32) from constant-pool)> TargetConstantPool:i32<@.str.3 = private unnamed_addr constant [25 x i8] c"[INFO] Program finished.\00", align 1> 0, TargetConstant:i32<14>, Register:i32 $noreg, t0

SU(2): t58: i32,ch,glue = CopyFromReg t57:1, Register:i32 $r0, t57:2

    t55: ch,glue = CopyToReg t53:1, Register:i32 $r0, t63

    t56: i32,ch,glue = tBL TargetConstant:i32<14>, Register:i32 $noreg, TargetGlobalAddress:i32<ptr @printf> 0, Register:i32 $r0, RegisterMask:Untyped, t55, t55:1

    t57: i32,ch,glue = ADJCALLSTACKUP TargetConstant:i32<0>, TargetConstant:i32<-1>, TargetConstant:i32<14>, Register:i32 $noreg, t56:1, t56:2

SU(0): t60: ch = tBX_RET TargetConstant:i32<14>, Register:i32 $noreg, Register:i32 $r0, t59, t59:1

    t59: ch,glue = CopyToReg t58:1, Register:i32 $r0, t1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @.str.2, align=4
  cp#2: @.str.3, align=4

bb.0 (%ir-block.0):
  %0:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %1:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %1:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %2:tgpr = COPY $r0
  %3:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
  tSTRspi killed %3:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
  %4:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
  tSTRspi killed %4:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
  %5:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
  %6:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %7:tgpr, dead $cpsr = tMOVi8 4, 14, $noreg
  $r0 = COPY %5:tgpr
  $r1 = COPY %6:tgpr
  $r2 = COPY %7:tgpr
  tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %8:tgpr = COPY $r0
  tSTRspi %8:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
  %9:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %10:tgpr = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %10:tgpr
  $r1 = COPY %9:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %11:tgpr = COPY $r0
  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
  %12:tgpr = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
  $r0 = COPY %12:tgpr
  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
  %13:tgpr = COPY $r0
  $r0 = COPY %0:tgpr
  tBX_RET 14, $noreg, implicit $r0

# End machine code for function main.


Restoring optimization level for Function main
	Before: -O0 ; After: -O2
Skipping pass 'Early Tail Duplication' on function main
Skipping pass 'Optimize machine instruction PHIs' on function main
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @.str.2, align=4
  cp#2: @.str.3, align=4

0B	bb.0 (%ir-block.0):
16B	  %0:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
32B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
64B	  %1:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
80B	  $r0 = COPY %1:tgpr
96B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
112B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  %2:tgpr = COPY $r0
144B	  %3:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
160B	  tSTRspi killed %3:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
176B	  %4:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
192B	  tSTRspi killed %4:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
208B	  %5:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
224B	  %6:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
240B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
256B	  %7:tgpr, dead $cpsr = tMOVi8 4, 14, $noreg
272B	  $r0 = COPY %5:tgpr
288B	  $r1 = COPY %6:tgpr
304B	  $r2 = COPY %7:tgpr
320B	  tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %8:tgpr = COPY $r0
368B	  tSTRspi %8:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
384B	  %9:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
416B	  %10:tgpr = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
432B	  $r0 = COPY %10:tgpr
448B	  $r1 = COPY %9:tgpr
464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
496B	  %11:tgpr = COPY $r0
512B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
528B	  %12:tgpr = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
544B	  $r0 = COPY %12:tgpr
560B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
576B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
592B	  %13:tgpr = COPY $r0
608B	  $r0 = COPY %0:tgpr
624B	  tBX_RET 14, $noreg, implicit $r0

# End machine code for function main.

********** Stack Coloring **********
********** Function: main
Found 0 markers and 4 slots
Slot structure:
Slot #0 - 4 bytes.
Slot #1 - 4 bytes.
Slot #2 - 4 bytes.
Slot #3 - 4 bytes.
Total Stack size: 16 bytes

Will not try to merge slots.
Removed 0 markers.
Allocate FI(0) to local offset -4
Allocate FI(1) to local offset -8
Allocate FI(2) to local offset -12
Allocate FI(3) to local offset -16
Skipping pass 'Remove dead machine instructions' on function main

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

Skipping pass 'Early Machine Loop Invariant Code Motion' on function main

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

Skipping pass 'Machine Common Subexpression Elimination' on function main
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
Computing cycles for function: main
Entry block: bb.0 (%ir-block.0)
DFS visiting block: bb.0 (%ir-block.0)
  first encountered at depth 1
  preorder number: 1
DFS visiting block: bb.0 (%ir-block.0)
  ended at 1
Preorder:
  bb.0 (%ir-block.0): 0
Skipping pass 'Machine code sinking' on function main
Skipping pass 'Peephole Optimizations' on function main
Skipping pass 'Remove dead machine instructions' on function main
Skipping pass 'ARM MLA / MLS expansion pass' on function main
Skipping pass 'ARM pre- register allocation load / store optimization pass' on function main
Skipping pass 'ARM A15 S->D optimizer' on function main
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: main
Skipping pass 'Two-Address instruction pass' on function main
********** REWRITING TWO-ADDR INSTRS **********
********** Function: main
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @.str.2, align=4
  cp#2: @.str.3, align=4

0B	bb.0 (%ir-block.0):
16B	  %0:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
32B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
64B	  %1:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
80B	  $r0 = COPY killed %1:tgpr
96B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0
112B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  dead %2:tgpr = COPY killed $r0
144B	  %3:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
160B	  tSTRspi killed %3:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
176B	  %4:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
192B	  tSTRspi killed %4:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
208B	  %5:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
224B	  %6:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
240B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
256B	  %7:tgpr, dead $cpsr = tMOVi8 4, 14, $noreg
272B	  $r0 = COPY killed %5:tgpr
288B	  $r1 = COPY killed %6:tgpr
304B	  $r2 = COPY killed %7:tgpr
320B	  tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %8:tgpr = COPY killed $r0
368B	  tSTRspi killed %8:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
384B	  %9:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
416B	  %10:tgpr = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
432B	  $r0 = COPY killed %10:tgpr
448B	  $r1 = COPY killed %9:tgpr
464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
496B	  dead %11:tgpr = COPY killed $r0
512B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
528B	  %12:tgpr = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
544B	  $r0 = COPY killed %12:tgpr
560B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0
576B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
592B	  dead %13:tgpr = COPY killed $r0
608B	  $r0 = COPY killed %0:tgpr
624B	  tBX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%0 [16r,608r:0) 0@16r  weight:0.000000e+00
%1 [64r,80r:0) 0@64r  weight:0.000000e+00
%2 [128r,128d:0) 0@128r  weight:0.000000e+00
%3 [144r,160r:0) 0@144r  weight:0.000000e+00
%4 [176r,192r:0) 0@176r  weight:0.000000e+00
%5 [208r,272r:0) 0@208r  weight:0.000000e+00
%6 [224r,288r:0) 0@224r  weight:0.000000e+00
%7 [256r,304r:0) 0@256r  weight:0.000000e+00
%8 [352r,368r:0) 0@352r  weight:0.000000e+00
%9 [384r,448r:0) 0@384r  weight:0.000000e+00
%10 [416r,432r:0) 0@416r  weight:0.000000e+00
%11 [496r,496d:0) 0@496r  weight:0.000000e+00
%12 [528r,544r:0) 0@528r  weight:0.000000e+00
%13 [592r,592d:0) 0@592r  weight:0.000000e+00
RegMasks: 96r 320r 464r 560r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @.str.2, align=4
  cp#2: @.str.3, align=4

0B	bb.0 (%ir-block.0):
16B	  %0:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
32B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
64B	  %1:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
80B	  $r0 = COPY %1:tgpr
96B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0
112B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  dead %2:tgpr = COPY killed $r0
144B	  %3:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
160B	  tSTRspi %3:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
176B	  %4:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
192B	  tSTRspi %4:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
208B	  %5:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
224B	  %6:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
240B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
256B	  %7:tgpr, dead $cpsr = tMOVi8 4, 14, $noreg
272B	  $r0 = COPY %5:tgpr
288B	  $r1 = COPY %6:tgpr
304B	  $r2 = COPY %7:tgpr
320B	  tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %8:tgpr = COPY killed $r0
368B	  tSTRspi %8:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
384B	  %9:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
416B	  %10:tgpr = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
432B	  $r0 = COPY %10:tgpr
448B	  $r1 = COPY %9:tgpr
464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
496B	  dead %11:tgpr = COPY killed $r0
512B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
528B	  %12:tgpr = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
544B	  $r0 = COPY %12:tgpr
560B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0
576B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
592B	  dead %13:tgpr = COPY killed $r0
608B	  $r0 = COPY %0:tgpr
624B	  tBX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

********** SIMPLE REGISTER COALESCING **********
********** Function: main
********** JOINING INTERVALS ***********
:
80B	$r0 = COPY %1:tgpr
	Considering merging %1 with $r0
	Can only merge into reserved registers.
128B	dead %2:tgpr = COPY killed $r0
	Considering merging %2 with $r0
	Can only merge into reserved registers.
272B	$r0 = COPY %5:tgpr
	Considering merging %5 with $r0
	Can only merge into reserved registers.
288B	$r1 = COPY %6:tgpr
	Considering merging %6 with $r1
	Can only merge into reserved registers.
304B	$r2 = COPY %7:tgpr
	Considering merging %7 with $r2
	Can only merge into reserved registers.
352B	%8:tgpr = COPY killed $r0
	Considering merging %8 with $r0
	Can only merge into reserved registers.
432B	$r0 = COPY %10:tgpr
	Considering merging %10 with $r0
	Can only merge into reserved registers.
448B	$r1 = COPY %9:tgpr
	Considering merging %9 with $r1
	Can only merge into reserved registers.
496B	dead %11:tgpr = COPY killed $r0
	Considering merging %11 with $r0
	Can only merge into reserved registers.
544B	$r0 = COPY %12:tgpr
	Considering merging %12 with $r0
	Can only merge into reserved registers.
592B	dead %13:tgpr = COPY killed $r0
	Considering merging %13 with $r0
	Can only merge into reserved registers.
608B	$r0 = COPY %0:tgpr
	Considering merging %0 with $r0
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
%0 [16r,608r:0) 0@16r  weight:0.000000e+00
%1 [64r,80r:0) 0@64r  weight:0.000000e+00
%2 [128r,128d:0) 0@128r  weight:0.000000e+00
%3 [144r,160r:0) 0@144r  weight:0.000000e+00
%4 [176r,192r:0) 0@176r  weight:0.000000e+00
%5 [208r,272r:0) 0@208r  weight:0.000000e+00
%6 [224r,288r:0) 0@224r  weight:0.000000e+00
%7 [256r,304r:0) 0@256r  weight:0.000000e+00
%8 [352r,368r:0) 0@352r  weight:0.000000e+00
%9 [384r,448r:0) 0@384r  weight:0.000000e+00
%10 [416r,432r:0) 0@416r  weight:0.000000e+00
%11 [496r,496d:0) 0@496r  weight:0.000000e+00
%12 [528r,544r:0) 0@528r  weight:0.000000e+00
%13 [592r,592d:0) 0@592r  weight:0.000000e+00
RegMasks: 96r 320r 464r 560r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: @.str.1, align=4
  cp#1: @.str.2, align=4
  cp#2: @.str.3, align=4

0B	bb.0 (%ir-block.0):
16B	  %0:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
32B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
64B	  %1:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
80B	  $r0 = COPY %1:tgpr
96B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0
112B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  dead %2:tgpr = COPY killed $r0
144B	  %3:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
160B	  tSTRspi %3:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
176B	  %4:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
192B	  tSTRspi %4:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
208B	  %5:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
224B	  %6:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
240B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
256B	  %7:tgpr, dead $cpsr = tMOVi8 4, 14, $noreg
272B	  $r0 = COPY %5:tgpr
288B	  $r1 = COPY %6:tgpr
304B	  $r2 = COPY %7:tgpr
320B	  tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit killed $r2, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %8:tgpr = COPY killed $r0
368B	  tSTRspi %8:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
384B	  %9:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
416B	  %10:tgpr = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
432B	  $r0 = COPY %10:tgpr
448B	  $r1 = COPY %9:tgpr
464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit killed $r1, implicit-def $sp, implicit-def $r0
480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
496B	  dead %11:tgpr = COPY killed $r0
512B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
528B	  %12:tgpr = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
544B	  $r0 = COPY %12:tgpr
560B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit killed $r0, implicit-def $sp, implicit-def $r0
576B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
592B	  dead %13:tgpr = COPY killed $r0
608B	  $r0 = COPY %0:tgpr
624B	  tBX_RET 14, $noreg, implicit killed $r0

# End machine code for function main.

Skipping pass 'Machine Instruction Scheduler' on function main

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

********** BASIC REGISTER ALLOCATION **********
********** Function: main
********** Compute Spill Weights **********
********** Function: main
Enqueuing %0
Enqueuing %1
Enqueuing %2
Enqueuing %3
Enqueuing %4
Enqueuing %5
Enqueuing %6
Enqueuing %7
Enqueuing %8
Enqueuing %9
Enqueuing %10
Enqueuing %11
Enqueuing %12
Enqueuing %13

selectOrSplit tGPR:%1 [64r,80r:0) 0@64r  weight:INF w=INF
hints: $r0
assigning %1 to $r0: R0 [64r,80r:0) 0@64r

selectOrSplit tGPR:%2 [128r,128d:0) 0@128r  weight:INF w=INF
hints: $r0
assigning %2 to $r0: R0 [128r,128d:0) 0@128r

selectOrSplit tGPR:%13 [592r,592d:0) 0@592r  weight:INF w=INF
hints: $r0
assigning %13 to $r0: R0 [592r,592d:0) 0@592r

selectOrSplit tGPR:%11 [496r,496d:0) 0@496r  weight:INF w=INF
hints: $r0
assigning %11 to $r0: R0 [496r,496d:0) 0@496r

selectOrSplit tGPR:%12 [528r,544r:0) 0@528r  weight:INF w=INF
hints: $r0
assigning %12 to $r0: R0 [528r,544r:0) 0@528r

selectOrSplit tGPR:%10 [416r,432r:0) 0@416r  weight:INF w=INF
hints: $r0
assigning %10 to $r0: R0 [416r,432r:0) 0@416r

selectOrSplit tGPR:%3 [144r,160r:0) 0@144r  weight:INF w=INF
assigning %3 to $r0: R0 [144r,160r:0) 0@144r

selectOrSplit tGPR:%4 [176r,192r:0) 0@176r  weight:INF w=INF
assigning %4 to $r0: R0 [176r,192r:0) 0@176r

selectOrSplit tGPR:%8 [352r,368r:0) 0@352r  weight:INF w=INF
hints: $r0
assigning %8 to $r0: R0 [352r,368r:0) 0@352r

selectOrSplit tGPR:%7 [256r,304r:0) 0@256r  weight:4.508928e-03 w=4.508928e-03
hints: $r2
assigning %7 to $r2: R2 [256r,304r:0) 0@256r

selectOrSplit tGPR:%6 [224r,288r:0) 0@224r  weight:4.353448e-03 w=4.353448e-03
hints: $r1
assigning %6 to $r1: R1 [224r,288r:0) 0@224r

selectOrSplit tGPR:%5 [208r,272r:0) 0@208r  weight:4.353448e-03 w=4.353448e-03
hints: $r0
assigning %5 to $r0: R0 [208r,272r:0) 0@208r

selectOrSplit tGPR:%9 [384r,448r:0) 0@384r  weight:4.353448e-03 w=4.353448e-03
hints: $r1
assigning %9 to $r1: R1 [384r,448r:0) 0@384r

selectOrSplit tGPR:%0 [16r,608r:0) 0@16r  weight:3.054435e-03 w=3.054435e-03
hints: $r0
assigning %0 to $r4: R4 [16r,608r:0) 0@16r
Post alloc VirtRegMap:
********** REGISTER MAP **********
[%0 -> $r4] tGPR
[%1 -> $r0] tGPR
[%2 -> $r0] tGPR
[%3 -> $r0] tGPR
[%4 -> $r0] tGPR
[%5 -> $r0] tGPR
[%6 -> $r1] tGPR
[%7 -> $r2] tGPR
[%8 -> $r0] tGPR
[%9 -> $r1] tGPR
[%10 -> $r0] tGPR
[%11 -> $r0] tGPR
[%12 -> $r0] tGPR
[%13 -> $r0] tGPR


********** REWRITE VIRTUAL REGISTERS **********
********** Function: main
********** REGISTER MAP **********
[%0 -> $r4] tGPR
[%1 -> $r0] tGPR
[%2 -> $r0] tGPR
[%3 -> $r0] tGPR
[%4 -> $r0] tGPR
[%5 -> $r0] tGPR
[%6 -> $r1] tGPR
[%7 -> $r2] tGPR
[%8 -> $r0] tGPR
[%9 -> $r1] tGPR
[%10 -> $r0] tGPR
[%11 -> $r0] tGPR
[%12 -> $r0] tGPR
[%13 -> $r0] tGPR

0B	bb.0 (%ir-block.0):
16B	  %0:tgpr, dead $cpsr = tMOVi8 0, 14, $noreg
32B	  tSTRspi %0:tgpr, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
48B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
64B	  %1:tgpr = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
80B	  $r0 = COPY killed %1:tgpr
96B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
112B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
128B	  dead %2:tgpr = COPY $r0
144B	  %3:tgpr, dead $cpsr = tMOVi8 5, 14, $noreg
160B	  tSTRspi killed %3:tgpr, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
176B	  %4:tgpr, dead $cpsr = tMOVi8 10, 14, $noreg
192B	  tSTRspi killed %4:tgpr, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
208B	  %5:tgpr = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
224B	  %6:tgpr = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
240B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
256B	  %7:tgpr, dead $cpsr = tMOVi8 4, 14, $noreg
272B	  $r0 = COPY killed %5:tgpr
288B	  $r1 = COPY killed %6:tgpr
304B	  $r2 = COPY killed %7:tgpr
320B	  tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
336B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
352B	  %8:tgpr = COPY $r0
368B	  tSTRspi killed %8:tgpr, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
384B	  %9:tgpr = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
400B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
416B	  %10:tgpr = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
432B	  $r0 = COPY killed %10:tgpr
448B	  $r1 = COPY killed %9:tgpr
464B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
480B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
496B	  dead %11:tgpr = COPY $r0
512B	  ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
528B	  %12:tgpr = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
544B	  $r0 = COPY killed %12:tgpr
560B	  tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
576B	  ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
592B	  dead %13:tgpr = COPY $r0
608B	  $r0 = COPY killed %0:tgpr
624B	  tBX_RET 14, $noreg, implicit $r0
> renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
> tSTRspi renamable $r4, %stack.0, 0, 14, $noreg :: (store (s32) into %ir.1)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
> tSTRspi killed renamable $r0, %stack.1, 0, 14, $noreg :: (store (s32) into %ir.2)
> renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
> tSTRspi killed renamable $r0, %stack.2, 0, 14, $noreg :: (store (s32) into %ir.3)
> renamable $r0 = tLDRspi %stack.1, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
> renamable $r1 = tLDRspi %stack.2, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> $r1 = COPY killed renamable $r1
Identity copy: $r1 = COPY killed renamable $r1
  deleted.
> $r2 = COPY killed renamable $r2
Identity copy: $r2 = COPY killed renamable $r2
  deleted.
> tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = COPY $r0
Identity copy: renamable $r0 = COPY $r0
  deleted.
> tSTRspi killed renamable $r0, %stack.3, 0, 14, $noreg :: (store (s32) into %ir.4)
> renamable $r1 = tLDRspi %stack.3, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> $r1 = COPY killed renamable $r1
Identity copy: $r1 = COPY killed renamable $r1
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> ADJCALLSTACKDOWN 0, 0, 14, $noreg, implicit-def dead $sp, implicit $sp
> renamable $r0 = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
> $r0 = COPY killed renamable $r0
Identity copy: $r0 = COPY killed renamable $r0
  deleted.
> tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
> ADJCALLSTACKUP 0, -1, 14, $noreg, implicit-def dead $sp, implicit $sp
> dead renamable $r0 = COPY $r0
Identity copy: dead renamable $r0 = COPY $r0
  deleted.
> $r0 = COPY killed renamable $r4
> tBX_RET 14, $noreg, implicit $r0
********** Stack Slot Coloring **********
********** Function: main
Skipping pass 'Stack Slot Coloring' on function main
Skipping pass 'Machine Copy Propagation Pass' on function main
Skipping pass 'Machine Loop Invariant Code Motion' on function main
Skipping pass 'Fixup Statepoint Caller Saved' on function main
Skipping pass 'PostRA Machine Sink' on function main

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
Skipping pass 'Shrink Wrapping analysis' on function main
EstimatedLimit: 1024; EstimatedStack: 40; EstimatedFPStack: 8; BigFrameOffsets: 0
$r0 is unused argument register, EntryRegDeficit = -1
$r1 is unused argument register, EntryRegDeficit = -2
$r2 is unused argument register, EntryRegDeficit = -3
$r3 is unused argument register, EntryRegDeficit = -4
1 return regs used, ExitRegDeficit = -3
RegDeficit = -3
$r4 is saved low register, RegDeficit = -4
$r5 is non-saved low register, adding to AvailableRegs
$r6 is non-saved low register, adding to AvailableRegs
Final RegDeficit = -4
After adding spills, RegDeficit = -4
NumGPRSpills = 3
Spilling $r6 to make up alignment
alloc FI(4) at SP[-4]
alloc FI(5) at SP[-8]
alloc FI(6) at SP[-12]
alloc FI(7) at SP[-16]
alloc FI(0) at SP[-20]
alloc FI(1) at SP[-24]
alloc FI(2) at SP[-28]
alloc FI(3) at SP[-32]
Skipping pass 'Machine Late Instructions Cleanup Pass' on function main
Skipping pass 'Control Flow Optimizer' on function main
Skipping pass 'Tail Duplication' on function main
Skipping pass 'Machine Copy Propagation Pass' on function main
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: main
real copy:   $r0 = COPY killed renamable $r4
replaced by: $r0 = tMOVSr killed $r4, implicit-def dead $cpsr
Skipping pass 'ARM load / store optimization pass' on function main
********** REACHING DEFINITION ANALYSIS **********
%bb.0: all preds known
%bb.0: entry
SP:	0	frame-setup tPUSH 14, $noreg, killed $r4, killed $r6, killed $r7, killed $lr, implicit-def $sp, implicit $sp
R7:	6	$r7 = frame-setup tADDrSPi $sp, 2, 14, $noreg
SP:	8	$sp = frame-setup tSUBspi $sp(tied-def 0), 4, 14, $noreg
R4:	9	renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
CPSR:	9	renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
R0:	11	renamable $r0 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
LR:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
SP:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	13	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
CPSR:	13	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
R0:	15	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
CPSR:	15	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
R0:	17	renamable $r0 = tLDRspi $sp, 2, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
R1:	18	renamable $r1 = tLDRspi $sp, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
R2:	19	renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
CPSR:	19	renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
LR:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
SP:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
R0:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
R1:	22	renamable $r1 = tLDRspi $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
R0:	23	renamable $r0 = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
LR:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
SP:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
R0:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
R0:	25	renamable $r0 = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
LR:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
SP:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	27	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	27	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
SP:	28	$sp = frame-destroy tADDspi $sp(tied-def 0), 4, 14, $noreg
R4:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R6:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R7:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
SP:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R1:	30	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
SP:	30	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
LR:	31	$lr = frame-destroy tMOVr killed $r1, 14, $noreg
Skipping pass 'ARM Execution Domain Fix' on function main
Skipping pass 'BreakFalseDeps' on function main
********** ARM EXPAND PSEUDO INSTRUCTIONS **********
********** Function: main
***************************************************

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

Skipping pass 'If Converter' on function main
Skipping pass 'PostRA Machine Instruction Scheduler' on function main
Skipping pass 'Post RA top-down list latency scheduler' on function main
ARM Indirect Thunks

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
Skipping pass 'Branch Probability Basic Block Placement' on function main
Skipping pass 'ARM block placement' on function main
Skipping pass 'optimise barriers pass' on function main
********** COMPUTING STACKMAP LIVENESS: main **********

Debug Range Extension: main
Machine Outliner: Running on target-default functions
OutlinedSomething = 0
Stopped outlining at iteration 0 because no changes were found.
********** REACHING DEFINITION ANALYSIS **********
%bb.0: all preds known
%bb.0: entry
SP:	0	frame-setup tPUSH 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $lr, implicit-def $sp, implicit $sp
R7:	7	$r7 = frame-setup tADDrSPi $sp, 3, 14, $noreg
SP:	9	$sp = frame-setup tSUBspi $sp(tied-def 0), 51, 14, $noreg
R0:	13	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R2:	14	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	14	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	15	renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
CPSR:	15	renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
R1:	17	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	17	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	18	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	19	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	19	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	22	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	23	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
CPSR:	23	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
R2:	24	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	24	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	25	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	25	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	26	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	27	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	27	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	30	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	31	renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
CPSR:	31	renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
R0:	32	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	32	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	33	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	33	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	34	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	34	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	35	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	36	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	36	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	39	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	40	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
CPSR:	40	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
R2:	41	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	41	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	42	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	42	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	43	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	44	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	44	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	47	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	48	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
CPSR:	48	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
R0:	49	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	49	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	50	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	50	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	51	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	51	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	52	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	53	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	53	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	56	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	57	renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
CPSR:	57	renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
R0:	58	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	58	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	59	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	59	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	60	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	60	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	61	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	62	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	62	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	65	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	66	renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
CPSR:	66	renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
R0:	67	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	67	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	68	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	68	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	69	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	69	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	70	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	71	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	71	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	74	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	75	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
CPSR:	75	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
R2:	76	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	76	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	77	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	77	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	78	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	79	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	79	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	82	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	83	renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
CPSR:	83	renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
R0:	84	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	84	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	85	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	85	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	86	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	86	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	87	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	88	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	88	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	91	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	92	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
CPSR:	92	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
R0:	93	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	93	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	94	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	94	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	95	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	95	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	96	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	97	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	97	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	100	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	101	renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
CPSR:	101	renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
R0:	102	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	102	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	103	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	103	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	104	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	104	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	105	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	106	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	106	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	109	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	110	renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
CPSR:	110	renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
R0:	111	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	111	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	112	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	112	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	113	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	113	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	114	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	115	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	115	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	118	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	119	renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
CPSR:	119	renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
R0:	120	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	120	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	121	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	121	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	122	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	122	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	123	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	124	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	124	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	127	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	128	renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
CPSR:	128	renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
R0:	129	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	129	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	130	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	130	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	131	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	131	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	132	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	133	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	133	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	136	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	137	renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
CPSR:	137	renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
R0:	138	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	138	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	139	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	139	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	140	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	140	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	141	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	142	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	142	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	145	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	146	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
CPSR:	146	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
R1:	147	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	147	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	148	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	148	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	149	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	150	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	150	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	153	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	154	renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
CPSR:	154	renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
R0:	155	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	155	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	156	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	156	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	157	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	157	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	158	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	159	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	159	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	162	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	163	renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
CPSR:	163	renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
R0:	164	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	164	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	165	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	165	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	166	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	166	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	167	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	168	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	168	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	171	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	172	renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
CPSR:	172	renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
R0:	173	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	173	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	174	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	174	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	175	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	175	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	176	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	177	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	177	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	180	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	181	renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
CPSR:	181	renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
R0:	182	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	182	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	183	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	183	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	184	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	184	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	185	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	186	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	186	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	189	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	190	renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
CPSR:	190	renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
R0:	191	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	191	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	192	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	192	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	193	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	193	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	194	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	195	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	195	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	198	renamable $r1 = tLDRspi $sp, 50, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
R0:	199	renamable $r0 = tLDRspi $sp, 49, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
R0:	200	renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
CPSR:	200	renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
R0:	202	renamable $r0 = tLDRspi $sp, 47, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
R6:	204	renamable $r6 = tLDRspi $sp, 46, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
R1:	205	renamable $r1 = tLDRspi $sp, 45, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
R0:	206	renamable $r0 = tLDRspi $sp, 44, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
R6:	207	renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	207	renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R0:	208	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	209	renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	209	renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R2:	211	renamable $r2 = tLDRspi $sp, 42, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
R0:	212	renamable $r0 = tLDRspi $sp, 43, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
R1:	213	renamable $r1 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R1:	214	renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	214	renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
R6:	216	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	216	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
R1:	217	renamable $r1 = tLDRspi $sp, 41, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
R0:	218	renamable $r0 = tLDRspi $sp, 40, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
R6:	219	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	219	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R0:	220	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	221	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	221	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R5:	223	renamable $r5 = tLDRspi $sp, 39, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
R4:	224	renamable $r4 = tLDRspi $sp, 38, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
R0:	225	renamable $r0 = tLDRspi $sp, 36, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
R1:	226	renamable $r1 = tLDRspi $sp, 37, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
R2:	227	renamable $r2 = tLDRspi $sp, 34, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
R3:	228	renamable $r3 = tLDRspi $sp, 35, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
LR:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	230	renamable $r2 = tLDRspi $sp, 32, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
R3:	231	renamable $r3 = tLDRspi $sp, 33, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
LR:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R4:	233	renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
CPSR:	233	renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
R5:	234	renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	234	renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R0:	235	renamable $r0 = tLDRspi $sp, 30, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
R1:	236	renamable $r1 = tLDRspi $sp, 31, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
R2:	237	renamable $r2 = tLDRspi $sp, 28, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
R3:	238	renamable $r3 = tLDRspi $sp, 29, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
LR:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	240	$r2 = tMOVSr $r0, implicit-def dead $cpsr
CPSR:	240	$r2 = tMOVSr $r0, implicit-def dead $cpsr
R3:	241	renamable $r3 = tLDRspi $sp, 27, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
R0:	242	renamable $r0 = tLDRspi $sp, 26, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
R0:	243	renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
CPSR:	243	renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
R1:	244	renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
CPSR:	244	renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
R5:	245	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	245	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
R4:	246	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	246	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
R0:	247	renamable $r0 = tLDRspi $sp, 24, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
R1:	248	renamable $r1 = tLDRspi $sp, 25, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
R2:	249	renamable $r2 = tLDRspi $sp, 22, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
R3:	250	renamable $r3 = tLDRspi $sp, 23, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
LR:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R5:	252	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	252	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
R4:	253	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	253	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
R0:	254	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	255	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
CPSR:	255	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
R6:	257	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
CPSR:	257	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
R4:	258	renamable $r4 = tLDRspi $sp, 21, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
R0:	259	renamable $r0 = tLDRspi $sp, 20, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
R1:	261	renamable $r1 = tLDRspi $sp, 19, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
R2:	262	renamable $r2 = tLDRspi $sp, 18, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
R3:	263	renamable $r3 = tLDRspi $sp, 17, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
R0:	264	renamable $r0 = tLDRspi $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
R5:	265	renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
CPSR:	265	renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
R1:	266	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
CPSR:	266	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
R2:	267	renamable $r2 = tLDRspi $sp, 15, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
R0:	268	renamable $r0 = tLDRspi $sp, 14, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
R3:	269	renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
CPSR:	269	renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
R1:	270	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	270	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R2:	271	renamable $r2 = tLDRspi $sp, 13, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
R5:	272	renamable $r5 = tLDRspi $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
R0:	273	renamable $r0 = tLDRspi $sp, 11, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
R0:	275	renamable $r0 = tLDRspi $sp, 10, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
R5:	276	renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
CPSR:	276	renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
R0:	277	renamable $r0 = tLDRspi $sp, 2, 14, $noreg :: (load (s32) from %stack.27)
R2:	278	renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	278	renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R1:	279	renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	279	renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
R3:	280	renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
CPSR:	280	renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
R0:	281	renamable $r0 = tLDRspi $sp, 3, 14, $noreg :: (load (s32) from %stack.26)
R0:	282	renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
CPSR:	282	renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
R4:	284	renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	284	renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
R0:	285	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	286	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
CPSR:	286	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
R0:	288	renamable $r0 = tLDRspi $sp, 3, 14, $noreg :: (load (s32) from %stack.26)
R6:	289	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	289	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R4:	290	renamable $r4 = tLDRspi $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
R5:	291	renamable $r5 = tLDRspi $sp, 9, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
R1:	292	renamable $r1 = tLDRspi $sp, 7, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
R0:	293	renamable $r0 = tLDRspi $sp, 6, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
R2:	294	renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
CPSR:	294	renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
R3:	295	renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
CPSR:	295	renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
R0:	296	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	296	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
R1:	297	$r1 = tMOVSr killed $r5, implicit-def dead $cpsr
CPSR:	297	$r1 = tMOVSr killed $r5, implicit-def dead $cpsr
LR:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	299	$r2 = tMOVSr $r0, implicit-def dead $cpsr
CPSR:	299	$r2 = tMOVSr $r0, implicit-def dead $cpsr
R0:	300	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	301	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	301	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R6:	303	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	303	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
R0:	304	$r0 = tLDRspi $sp, 0, 14, $noreg :: (load (s32) from %stack.29)
R2:	305	$r2 = tMOVSr killed $r6, implicit-def dead $cpsr
CPSR:	305	$r2 = tMOVSr killed $r6, implicit-def dead $cpsr
R3:	306	$r3 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
LR:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	309	renamable $r3 = tLDRspi $sp, 47, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
R0:	310	renamable $r0 = tLDRspi $sp, 46, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
R2:	311	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	311	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	312	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	313	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	313	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R4:	316	renamable $r4 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
R0:	317	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	317	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	319	renamable $r3 = tLDRspi $sp, 45, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
R0:	320	renamable $r0 = tLDRspi $sp, 44, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
R2:	321	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	321	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	322	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	323	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	323	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	326	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	326	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	328	renamable $r3 = tLDRspi $sp, 43, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
R0:	329	renamable $r0 = tLDRspi $sp, 42, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
R2:	330	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	330	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	331	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	332	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	332	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	335	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	335	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	337	renamable $r3 = tLDRspi $sp, 41, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
R0:	338	renamable $r0 = tLDRspi $sp, 40, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
R2:	339	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	339	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	340	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	341	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	341	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	344	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	344	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	346	renamable $r3 = tLDRspi $sp, 39, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
R0:	347	renamable $r0 = tLDRspi $sp, 38, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
R2:	348	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	348	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	349	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	350	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	350	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	353	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	353	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	355	renamable $r3 = tLDRspi $sp, 37, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
R0:	356	renamable $r0 = tLDRspi $sp, 36, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
R2:	357	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	357	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	358	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	359	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	359	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	362	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	362	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	364	renamable $r3 = tLDRspi $sp, 35, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
R0:	365	renamable $r0 = tLDRspi $sp, 34, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
R2:	366	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	366	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	367	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	368	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	368	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	371	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	371	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	373	renamable $r3 = tLDRspi $sp, 33, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
R0:	374	renamable $r0 = tLDRspi $sp, 32, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
R2:	375	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	375	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	376	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	377	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	377	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	380	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	380	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	382	renamable $r3 = tLDRspi $sp, 31, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
R0:	383	renamable $r0 = tLDRspi $sp, 30, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
R2:	384	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	384	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	385	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	386	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	386	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	389	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	389	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	391	renamable $r3 = tLDRspi $sp, 29, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
R0:	392	renamable $r0 = tLDRspi $sp, 28, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
R2:	393	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	393	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	394	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	395	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	395	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	398	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	398	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	400	renamable $r3 = tLDRspi $sp, 27, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
R0:	401	renamable $r0 = tLDRspi $sp, 26, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
R2:	402	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	402	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	403	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	404	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	404	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	407	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	407	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	409	renamable $r3 = tLDRspi $sp, 25, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
R0:	410	renamable $r0 = tLDRspi $sp, 24, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
R2:	411	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	411	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	412	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	413	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	413	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	416	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	416	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	418	renamable $r3 = tLDRspi $sp, 23, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
R0:	419	renamable $r0 = tLDRspi $sp, 22, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
R2:	420	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	420	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	421	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	422	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	422	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	425	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	425	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	427	renamable $r3 = tLDRspi $sp, 21, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
R0:	428	renamable $r0 = tLDRspi $sp, 20, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
R2:	429	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	429	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	430	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	431	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	431	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	434	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	434	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	436	renamable $r3 = tLDRspi $sp, 19, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
R0:	437	renamable $r0 = tLDRspi $sp, 18, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
R2:	438	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	438	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	439	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	440	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	440	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	443	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	443	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	445	renamable $r3 = tLDRspi $sp, 17, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
R0:	446	renamable $r0 = tLDRspi $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
R2:	447	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	447	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	448	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	449	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	449	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	452	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	452	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	454	renamable $r3 = tLDRspi $sp, 15, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
R0:	455	renamable $r0 = tLDRspi $sp, 14, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
R2:	456	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	456	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	457	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	458	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	458	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	461	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	461	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	463	renamable $r3 = tLDRspi $sp, 13, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
R0:	464	renamable $r0 = tLDRspi $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
R2:	465	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	465	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	466	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	467	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	467	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	470	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	470	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	472	renamable $r3 = tLDRspi $sp, 11, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
R0:	473	renamable $r0 = tLDRspi $sp, 10, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
R2:	474	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	474	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	475	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	476	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	476	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	479	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	479	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	481	renamable $r3 = tLDRspi $sp, 9, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
R0:	482	renamable $r0 = tLDRspi $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
R2:	483	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	483	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	484	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	485	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	485	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	488	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	488	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	490	renamable $r3 = tLDRspi $sp, 7, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
R0:	491	renamable $r0 = tLDRspi $sp, 6, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
R2:	492	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	492	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	493	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	494	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	494	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	497	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	497	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
LR:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	499	renamable $r0 = tLDRspi $sp, 5, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
SP:	500	$sp = frame-destroy tADDspi $sp(tied-def 0), 51, 14, $noreg
R4:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R5:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R6:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R7:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
SP:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R1:	502	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
SP:	502	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
LR:	503	$lr = frame-destroy tMOVr killed $r1, 14, $noreg
***** ARMFixCortexA57AES1742098 *****
***** ARMConstantIslands: 1 CP entries, aligned to 4 bytes *****
Moved CPI#0 to end of function, size = 4, align = 4
bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
computeBlockSize: 
computeBlockSize: 
Adjust block:
 - name: 
 - number: 0
 - function: moreThan20Variables
   - blocks: 2
00000000 0b.7	 kb=2 ua=0 pa=0 size=0x41a
0000041c 1b.0	 kb=2 ua=0 pa=0 size=0x4
Beginning CP iteration #0
User of CPE#0 max delta=1016 insn address=0x27a in %bb.0: 0-41a	renamable $r4 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x41c offset=+418: In range
00000000 0b.0	 kb=2 ua=0 pa=0 size=0x41a
0000041c 1b.0	 kb=2 ua=0 pa=0 size=0x4
Beginning BR iteration #0
00000000 0b.0	 kb=2 ua=0 pa=0 size=0x41a
0000041c 1b.0	 kb=2 ua=0 pa=0 size=0x4
Verifying 1 CP users.
User of CPE#0 max delta=1018 insn address=0x27a in %bb.0: 0-41a	renamable $r4 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x41c offset=+418: OK

00000000 0b.1	 kb=2 ua=0 pa=0 size=0x41a
0000041c 1b.0	 kb=2 ua=0 pa=0 size=0x4
********** REACHING DEFINITION ANALYSIS **********
%bb.0: all preds known
%bb.0: entry
SP:	0	frame-setup tPUSH 14, $noreg, killed $r4, killed $r5, killed $r6, killed $r7, killed $lr, implicit-def $sp, implicit $sp
R7:	7	$r7 = frame-setup tADDrSPi $sp, 3, 14, $noreg
SP:	9	$sp = frame-setup tSUBspi $sp(tied-def 0), 51, 14, $noreg
R0:	13	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R2:	14	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	14	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	15	renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
CPSR:	15	renamable $r1, dead $cpsr = tMOVi8 0, 14, $noreg
R1:	17	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	17	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	18	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	19	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	19	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	22	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	23	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
CPSR:	23	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 1, 14, $noreg
R2:	24	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	24	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	25	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	25	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	26	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	27	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	27	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	30	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	31	renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
CPSR:	31	renamable $r0, dead $cpsr = tMOVi8 3, 14, $noreg
R0:	32	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	32	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	33	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	33	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	34	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	34	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	35	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	36	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	36	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	39	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	40	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
CPSR:	40	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 2, 14, $noreg
R2:	41	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	41	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	42	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	42	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	43	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	44	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	44	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	47	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	48	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
CPSR:	48	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
R0:	49	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	49	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	50	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	50	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	51	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	51	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	52	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	53	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	53	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	56	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	57	renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
CPSR:	57	renamable $r0, dead $cpsr = tMOVi8 6, 14, $noreg
R0:	58	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	58	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	59	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	59	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	60	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	60	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	61	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	62	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	62	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	65	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	66	renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
CPSR:	66	renamable $r0, dead $cpsr = tMOVi8 7, 14, $noreg
R0:	67	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	67	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	68	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	68	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	69	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	69	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	70	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	71	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	71	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	74	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	75	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
CPSR:	75	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 3, 14, $noreg
R2:	76	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	76	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	77	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	77	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	78	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	79	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	79	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	82	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	83	renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
CPSR:	83	renamable $r0, dead $cpsr = tMOVi8 9, 14, $noreg
R0:	84	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	84	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	85	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	85	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	86	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	86	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	87	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	88	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	88	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	91	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	92	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
CPSR:	92	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
R0:	93	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	93	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	94	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	94	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	95	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	95	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	96	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	97	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	97	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	100	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	101	renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
CPSR:	101	renamable $r0, dead $cpsr = tMOVi8 11, 14, $noreg
R0:	102	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	102	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	103	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	103	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	104	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	104	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	105	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	106	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	106	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	109	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	110	renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
CPSR:	110	renamable $r0, dead $cpsr = tMOVi8 12, 14, $noreg
R0:	111	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	111	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	112	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	112	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	113	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	113	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	114	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	115	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	115	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	118	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	119	renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
CPSR:	119	renamable $r0, dead $cpsr = tMOVi8 13, 14, $noreg
R0:	120	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	120	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	121	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	121	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	122	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	122	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	123	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	124	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	124	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	127	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	128	renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
CPSR:	128	renamable $r0, dead $cpsr = tMOVi8 14, 14, $noreg
R0:	129	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	129	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	130	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	130	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	131	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	131	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	132	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	133	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	133	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	136	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	137	renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
CPSR:	137	renamable $r0, dead $cpsr = tMOVi8 15, 14, $noreg
R0:	138	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	138	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	139	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	139	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	140	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	140	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	141	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	142	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	142	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R0:	145	renamable $r0 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	146	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
CPSR:	146	renamable $r0, dead $cpsr = tLSLri killed renamable $r0, 4, 14, $noreg
R1:	147	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	147	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	148	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	148	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	149	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	150	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	150	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	153	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	154	renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
CPSR:	154	renamable $r0, dead $cpsr = tMOVi8 17, 14, $noreg
R0:	155	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	155	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	156	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	156	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	157	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	157	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	158	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	159	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	159	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	162	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	163	renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
CPSR:	163	renamable $r0, dead $cpsr = tMOVi8 18, 14, $noreg
R0:	164	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	164	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	165	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	165	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	166	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	166	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	167	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	168	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	168	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	171	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	172	renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
CPSR:	172	renamable $r0, dead $cpsr = tMOVi8 19, 14, $noreg
R0:	173	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	173	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	174	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	174	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	175	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	175	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	176	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	177	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	177	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	180	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	181	renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
CPSR:	181	renamable $r0, dead $cpsr = tMOVi8 20, 14, $noreg
R0:	182	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	182	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R1:	183	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	183	renamable $r1, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R2:	184	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	184	renamable $r2, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	185	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	186	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	186	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R1:	189	renamable $r1 = tLDRspi $sp, 48, 14, $noreg :: (dereferenceable load (s32) from %ir.6)
R0:	190	renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
CPSR:	190	renamable $r0, dead $cpsr = tMOVi8 21, 14, $noreg
R0:	191	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
CPSR:	191	renamable $r0, dead $cpsr = nsw tMUL killed renamable $r1, killed renamable $r0(tied-def 0), 14, $noreg
R2:	192	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
CPSR:	192	renamable $r2, dead $cpsr = tASRri renamable $r0, 31, 14, $noreg
R1:	193	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
CPSR:	193	renamable $r1, $cpsr = tRSB killed renamable $r0, 14, $noreg
R0:	194	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R0:	195	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	195	renamable $r0, dead $cpsr = tSBC killed renamable $r0(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R1:	198	renamable $r1 = tLDRspi $sp, 50, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
R0:	199	renamable $r0 = tLDRspi $sp, 49, 14, $noreg :: (dereferenceable load (s32) from %ir.5)
R0:	200	renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
CPSR:	200	renamable $r0, dead $cpsr = nsw tADDrr killed renamable $r1, killed renamable $r0, 14, $noreg
R0:	202	renamable $r0 = tLDRspi $sp, 47, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
R6:	204	renamable $r6 = tLDRspi $sp, 46, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
R1:	205	renamable $r1 = tLDRspi $sp, 45, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
R0:	206	renamable $r0 = tLDRspi $sp, 44, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
R6:	207	renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	207	renamable $r6, dead $cpsr = tAND killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R0:	208	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	209	renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	209	renamable $r0, dead $cpsr = tAND killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R2:	211	renamable $r2 = tLDRspi $sp, 42, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
R0:	212	renamable $r0 = tLDRspi $sp, 43, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
R1:	213	renamable $r1 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R1:	214	renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	214	renamable $r1, dead $cpsr = tORR killed renamable $r1(tied-def 0), killed renamable $r0, 14, $noreg
R6:	216	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	216	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
R1:	217	renamable $r1 = tLDRspi $sp, 41, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
R0:	218	renamable $r0 = tLDRspi $sp, 40, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
R6:	219	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	219	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R0:	220	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	221	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	221	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R5:	223	renamable $r5 = tLDRspi $sp, 39, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
R4:	224	renamable $r4 = tLDRspi $sp, 38, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
R0:	225	renamable $r0 = tLDRspi $sp, 36, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
R1:	226	renamable $r1 = tLDRspi $sp, 37, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
R2:	227	renamable $r2 = tLDRspi $sp, 34, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
R3:	228	renamable $r3 = tLDRspi $sp, 35, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
LR:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	229	tBL 14, $noreg, &__divdi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	230	renamable $r2 = tLDRspi $sp, 32, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
R3:	231	renamable $r3 = tLDRspi $sp, 33, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
LR:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	232	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R4:	233	renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
CPSR:	233	renamable $r4, $cpsr = tADDrr killed renamable $r4, killed renamable $r0, 14, $noreg
R5:	234	renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
CPSR:	234	renamable $r5, dead $cpsr = tADC killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg, implicit killed $cpsr
R0:	235	renamable $r0 = tLDRspi $sp, 30, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
R1:	236	renamable $r1 = tLDRspi $sp, 31, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
R2:	237	renamable $r2 = tLDRspi $sp, 28, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
R3:	238	renamable $r3 = tLDRspi $sp, 29, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
LR:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	239	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	240	$r2 = tMOVSr $r0, implicit-def dead $cpsr
CPSR:	240	$r2 = tMOVSr $r0, implicit-def dead $cpsr
R3:	241	renamable $r3 = tLDRspi $sp, 27, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
R0:	242	renamable $r0 = tLDRspi $sp, 26, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
R0:	243	renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
CPSR:	243	renamable $r0, $cpsr = tADDrr killed renamable $r2, killed renamable $r0, 14, $noreg
R1:	244	renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
CPSR:	244	renamable $r1, dead $cpsr = tADC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
R5:	245	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	245	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
R4:	246	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	246	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
R0:	247	renamable $r0 = tLDRspi $sp, 24, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
R1:	248	renamable $r1 = tLDRspi $sp, 25, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
R2:	249	renamable $r2 = tLDRspi $sp, 22, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
R3:	250	renamable $r3 = tLDRspi $sp, 23, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
LR:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	251	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R5:	252	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	252	renamable $r5, dead $cpsr = tAND killed renamable $r5(tied-def 0), killed renamable $r1, 14, $noreg
R4:	253	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	253	renamable $r4, dead $cpsr = tAND killed renamable $r4(tied-def 0), killed renamable $r0, 14, $noreg
R0:	254	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	255	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
CPSR:	255	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r5, 14, $noreg
R6:	257	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
CPSR:	257	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r4, 14, $noreg
R4:	258	renamable $r4 = tLDRspi $sp, 21, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
R0:	259	renamable $r0 = tLDRspi $sp, 20, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
R1:	261	renamable $r1 = tLDRspi $sp, 19, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
R2:	262	renamable $r2 = tLDRspi $sp, 18, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
R3:	263	renamable $r3 = tLDRspi $sp, 17, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
R0:	264	renamable $r0 = tLDRspi $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
R5:	265	renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
CPSR:	265	renamable $r5, $cpsr = tSUBrr killed renamable $r2, killed renamable $r0, 14, $noreg
R1:	266	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
CPSR:	266	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r3, 14, $noreg, implicit killed $cpsr
R2:	267	renamable $r2 = tLDRspi $sp, 15, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
R0:	268	renamable $r0 = tLDRspi $sp, 14, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
R3:	269	renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
CPSR:	269	renamable $r3, $cpsr = tSUBrr killed renamable $r5, killed renamable $r0, 14, $noreg
R1:	270	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
CPSR:	270	renamable $r1, dead $cpsr = tSBC killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg, implicit killed $cpsr
R2:	271	renamable $r2 = tLDRspi $sp, 13, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
R5:	272	renamable $r5 = tLDRspi $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
R0:	273	renamable $r0 = tLDRspi $sp, 11, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
R0:	275	renamable $r0 = tLDRspi $sp, 10, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
R5:	276	renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
CPSR:	276	renamable $r5, $cpsr = tADDrr killed renamable $r5, killed renamable $r0, 14, $noreg
R0:	277	renamable $r0 = tLDRspi $sp, 2, 14, $noreg :: (load (s32) from %stack.27)
R2:	278	renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	278	renamable $r2, dead $cpsr = tADC killed renamable $r2(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R1:	279	renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	279	renamable $r1, dead $cpsr = tAND killed renamable $r1(tied-def 0), killed renamable $r2, 14, $noreg
R3:	280	renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
CPSR:	280	renamable $r3, dead $cpsr = tAND killed renamable $r3(tied-def 0), killed renamable $r5, 14, $noreg
R0:	281	renamable $r0 = tLDRspi $sp, 3, 14, $noreg :: (load (s32) from %stack.26)
R0:	282	renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
CPSR:	282	renamable $r0, dead $cpsr = tEOR killed renamable $r0(tied-def 0), killed renamable $r3, 14, $noreg
R4:	284	renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	284	renamable $r4, dead $cpsr = tEOR killed renamable $r4(tied-def 0), killed renamable $r1, 14, $noreg
R0:	285	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	286	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
CPSR:	286	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r4, 14, $noreg
R0:	288	renamable $r0 = tLDRspi $sp, 3, 14, $noreg :: (load (s32) from %stack.26)
R6:	289	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
CPSR:	289	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r0, 14, $noreg
R4:	290	renamable $r4 = tLDRspi $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
R5:	291	renamable $r5 = tLDRspi $sp, 9, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
R1:	292	renamable $r1 = tLDRspi $sp, 7, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
R0:	293	renamable $r0 = tLDRspi $sp, 6, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
R2:	294	renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
CPSR:	294	renamable $r2, dead $cpsr = tMVN killed renamable $r0, 14, $noreg
R3:	295	renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
CPSR:	295	renamable $r3, dead $cpsr = tMVN killed renamable $r1, 14, $noreg
R0:	296	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	296	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
R1:	297	$r1 = tMOVSr killed $r5, implicit-def dead $cpsr
CPSR:	297	$r1 = tMOVSr killed $r5, implicit-def dead $cpsr
LR:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
SP:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R0:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R1:	298	tBL 14, $noreg, &__moddi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0, implicit-def $r1
R2:	299	$r2 = tMOVSr $r0, implicit-def dead $cpsr
CPSR:	299	$r2 = tMOVSr $r0, implicit-def dead $cpsr
R0:	300	renamable $r0 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
R0:	301	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
CPSR:	301	renamable $r0, dead $cpsr = tORR killed renamable $r0(tied-def 0), killed renamable $r1, 14, $noreg
R6:	303	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
CPSR:	303	renamable $r6, dead $cpsr = tORR killed renamable $r6(tied-def 0), killed renamable $r2, 14, $noreg
R0:	304	$r0 = tLDRspi $sp, 0, 14, $noreg :: (load (s32) from %stack.29)
R2:	305	$r2 = tMOVSr killed $r6, implicit-def dead $cpsr
CPSR:	305	$r2 = tMOVSr killed $r6, implicit-def dead $cpsr
R3:	306	$r3 = tLDRspi $sp, 4, 14, $noreg :: (load (s32) from %stack.25)
LR:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	307	tBL 14, $noreg, &__muldi3, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit undef $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	309	renamable $r3 = tLDRspi $sp, 47, 14, $noreg :: (dereferenceable load (s32) from %ir.7 + 4, basealign 8)
R0:	310	renamable $r0 = tLDRspi $sp, 46, 14, $noreg :: (dereferenceable load (s32) from %ir.7, align 8)
R2:	311	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	311	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	312	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	313	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	313	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R4:	316	renamable $r4 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
R0:	317	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	317	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	318	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	319	renamable $r3 = tLDRspi $sp, 45, 14, $noreg :: (dereferenceable load (s32) from %ir.8 + 4, basealign 8)
R0:	320	renamable $r0 = tLDRspi $sp, 44, 14, $noreg :: (dereferenceable load (s32) from %ir.8, align 8)
R2:	321	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	321	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	322	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	323	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	323	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	326	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	326	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	327	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	328	renamable $r3 = tLDRspi $sp, 43, 14, $noreg :: (dereferenceable load (s32) from %ir.9 + 4, basealign 8)
R0:	329	renamable $r0 = tLDRspi $sp, 42, 14, $noreg :: (dereferenceable load (s32) from %ir.9, align 8)
R2:	330	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	330	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	331	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	332	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	332	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	335	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	335	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	336	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	337	renamable $r3 = tLDRspi $sp, 41, 14, $noreg :: (dereferenceable load (s32) from %ir.10 + 4, basealign 8)
R0:	338	renamable $r0 = tLDRspi $sp, 40, 14, $noreg :: (dereferenceable load (s32) from %ir.10, align 8)
R2:	339	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	339	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	340	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	341	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	341	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	344	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	344	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	345	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	346	renamable $r3 = tLDRspi $sp, 39, 14, $noreg :: (dereferenceable load (s32) from %ir.11 + 4, basealign 8)
R0:	347	renamable $r0 = tLDRspi $sp, 38, 14, $noreg :: (dereferenceable load (s32) from %ir.11, align 8)
R2:	348	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	348	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	349	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	350	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	350	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	353	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	353	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	354	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	355	renamable $r3 = tLDRspi $sp, 37, 14, $noreg :: (dereferenceable load (s32) from %ir.12 + 4, basealign 8)
R0:	356	renamable $r0 = tLDRspi $sp, 36, 14, $noreg :: (dereferenceable load (s32) from %ir.12, align 8)
R2:	357	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	357	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	358	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	359	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	359	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	362	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	362	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	363	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	364	renamable $r3 = tLDRspi $sp, 35, 14, $noreg :: (dereferenceable load (s32) from %ir.13 + 4, basealign 8)
R0:	365	renamable $r0 = tLDRspi $sp, 34, 14, $noreg :: (dereferenceable load (s32) from %ir.13, align 8)
R2:	366	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	366	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	367	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	368	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	368	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	371	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	371	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	372	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	373	renamable $r3 = tLDRspi $sp, 33, 14, $noreg :: (dereferenceable load (s32) from %ir.14 + 4, basealign 8)
R0:	374	renamable $r0 = tLDRspi $sp, 32, 14, $noreg :: (dereferenceable load (s32) from %ir.14, align 8)
R2:	375	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	375	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	376	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	377	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	377	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	380	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	380	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	381	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	382	renamable $r3 = tLDRspi $sp, 31, 14, $noreg :: (dereferenceable load (s32) from %ir.15 + 4, basealign 8)
R0:	383	renamable $r0 = tLDRspi $sp, 30, 14, $noreg :: (dereferenceable load (s32) from %ir.15, align 8)
R2:	384	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	384	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	385	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	386	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	386	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	389	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	389	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	390	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	391	renamable $r3 = tLDRspi $sp, 29, 14, $noreg :: (dereferenceable load (s32) from %ir.16 + 4, basealign 8)
R0:	392	renamable $r0 = tLDRspi $sp, 28, 14, $noreg :: (dereferenceable load (s32) from %ir.16, align 8)
R2:	393	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	393	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	394	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	395	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	395	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	398	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	398	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	399	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	400	renamable $r3 = tLDRspi $sp, 27, 14, $noreg :: (dereferenceable load (s32) from %ir.17 + 4, basealign 8)
R0:	401	renamable $r0 = tLDRspi $sp, 26, 14, $noreg :: (dereferenceable load (s32) from %ir.17, align 8)
R2:	402	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	402	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	403	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	404	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	404	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	407	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	407	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	408	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	409	renamable $r3 = tLDRspi $sp, 25, 14, $noreg :: (dereferenceable load (s32) from %ir.18 + 4, basealign 8)
R0:	410	renamable $r0 = tLDRspi $sp, 24, 14, $noreg :: (dereferenceable load (s32) from %ir.18, align 8)
R2:	411	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	411	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	412	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	413	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	413	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	416	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	416	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	417	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	418	renamable $r3 = tLDRspi $sp, 23, 14, $noreg :: (dereferenceable load (s32) from %ir.19 + 4, basealign 8)
R0:	419	renamable $r0 = tLDRspi $sp, 22, 14, $noreg :: (dereferenceable load (s32) from %ir.19, align 8)
R2:	420	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	420	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	421	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	422	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	422	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	425	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	425	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	426	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	427	renamable $r3 = tLDRspi $sp, 21, 14, $noreg :: (dereferenceable load (s32) from %ir.20 + 4, basealign 8)
R0:	428	renamable $r0 = tLDRspi $sp, 20, 14, $noreg :: (dereferenceable load (s32) from %ir.20, align 8)
R2:	429	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	429	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	430	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	431	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	431	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	434	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	434	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	435	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	436	renamable $r3 = tLDRspi $sp, 19, 14, $noreg :: (dereferenceable load (s32) from %ir.21 + 4, basealign 8)
R0:	437	renamable $r0 = tLDRspi $sp, 18, 14, $noreg :: (dereferenceable load (s32) from %ir.21, align 8)
R2:	438	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	438	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	439	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	440	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	440	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	443	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	443	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	444	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	445	renamable $r3 = tLDRspi $sp, 17, 14, $noreg :: (dereferenceable load (s32) from %ir.22 + 4, basealign 8)
R0:	446	renamable $r0 = tLDRspi $sp, 16, 14, $noreg :: (dereferenceable load (s32) from %ir.22, align 8)
R2:	447	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	447	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	448	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	449	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	449	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	452	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	452	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	453	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	454	renamable $r3 = tLDRspi $sp, 15, 14, $noreg :: (dereferenceable load (s32) from %ir.23 + 4, basealign 8)
R0:	455	renamable $r0 = tLDRspi $sp, 14, 14, $noreg :: (dereferenceable load (s32) from %ir.23, align 8)
R2:	456	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	456	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	457	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	458	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	458	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	461	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	461	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	462	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	463	renamable $r3 = tLDRspi $sp, 13, 14, $noreg :: (dereferenceable load (s32) from %ir.24 + 4, basealign 8)
R0:	464	renamable $r0 = tLDRspi $sp, 12, 14, $noreg :: (dereferenceable load (s32) from %ir.24, align 8)
R2:	465	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	465	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	466	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	467	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	467	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	470	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	470	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	471	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	472	renamable $r3 = tLDRspi $sp, 11, 14, $noreg :: (dereferenceable load (s32) from %ir.25 + 4, basealign 8)
R0:	473	renamable $r0 = tLDRspi $sp, 10, 14, $noreg :: (dereferenceable load (s32) from %ir.25, align 8)
R2:	474	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	474	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	475	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	476	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	476	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	479	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	479	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	480	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	481	renamable $r3 = tLDRspi $sp, 9, 14, $noreg :: (dereferenceable load (s32) from %ir.26 + 4, basealign 8)
R0:	482	renamable $r0 = tLDRspi $sp, 8, 14, $noreg :: (dereferenceable load (s32) from %ir.26, align 8)
R2:	483	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	483	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	484	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	485	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	485	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	488	$r0 = tMOVSr $r4, implicit-def dead $cpsr
CPSR:	488	$r0 = tMOVSr $r4, implicit-def dead $cpsr
LR:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	489	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R3:	490	renamable $r3 = tLDRspi $sp, 7, 14, $noreg :: (dereferenceable load (s32) from %ir.27 + 4, basealign 8)
R0:	491	renamable $r0 = tLDRspi $sp, 6, 14, $noreg :: (dereferenceable load (s32) from %ir.27, align 8)
R2:	492	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
CPSR:	492	renamable $r2, $cpsr = tADDi3 killed renamable $r0, 1, 14, $noreg
R0:	493	renamable $r0 = tLDRspi $sp, 1, 14, $noreg :: (load (s32) from %stack.28)
R3:	494	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
CPSR:	494	renamable $r3, dead $cpsr = tADC killed renamable $r3(tied-def 0), killed renamable $r0, 14, $noreg, implicit killed $cpsr
R0:	497	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	497	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
LR:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
SP:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	498	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r0
R0:	499	renamable $r0 = tLDRspi $sp, 5, 14, $noreg :: (dereferenceable load (s32) from %ir.28)
SP:	500	$sp = frame-destroy tADDspi $sp(tied-def 0), 51, 14, $noreg
R4:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R5:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R6:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R7:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
SP:	501	frame-destroy tPOP 14, $noreg, def $r4, def $r5, def $r6, def $r7, implicit-def $sp, implicit $sp
R1:	502	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
SP:	502	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
LR:	503	$lr = frame-destroy tMOVr killed $r1, 14, $noreg
********** REACHING DEFINITION ANALYSIS **********
%bb.0: all preds known
%bb.0: entry
SP:	0	frame-setup tPUSH 14, $noreg, killed $r4, killed $r6, killed $r7, killed $lr, implicit-def $sp, implicit $sp
R7:	6	$r7 = frame-setup tADDrSPi $sp, 2, 14, $noreg
SP:	8	$sp = frame-setup tSUBspi $sp(tied-def 0), 4, 14, $noreg
R4:	9	renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
CPSR:	9	renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
R0:	11	renamable $r0 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
LR:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
SP:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	13	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
CPSR:	13	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
R0:	15	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
CPSR:	15	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
R0:	17	renamable $r0 = tLDRspi $sp, 2, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
R1:	18	renamable $r1 = tLDRspi $sp, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
R2:	19	renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
CPSR:	19	renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
LR:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
SP:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
R0:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
R1:	22	renamable $r1 = tLDRspi $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
R0:	23	renamable $r0 = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
LR:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
SP:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
R0:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
R0:	25	renamable $r0 = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
LR:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
SP:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	27	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	27	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
SP:	28	$sp = frame-destroy tADDspi $sp(tied-def 0), 4, 14, $noreg
R4:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R6:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R7:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
SP:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R1:	30	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
SP:	30	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
LR:	31	$lr = frame-destroy tMOVr killed $r1, 14, $noreg
***** ARMFixCortexA57AES1742098 *****
***** ARMConstantIslands: 3 CP entries, aligned to 4 bytes *****
Moved CPI#0 to end of function, size = 4, align = 4
Moved CPI#1 to end of function, size = 4, align = 4
Moved CPI#2 to end of function, size = 4, align = 4
bb.1 (align 4):
  CONSTPOOL_ENTRY 0, %const.0, 4
  CONSTPOOL_ENTRY 1, %const.1, 4
  CONSTPOOL_ENTRY 2, %const.2, 4
computeBlockSize: 
computeBlockSize: 
Adjust block:
 - name: 
 - number: 0
 - function: main
   - blocks: 2
00000000 0b.7	 kb=2 ua=0 pa=0 size=0x3e
00000040 1b.0	 kb=2 ua=0 pa=0 size=0xc
Beginning CP iteration #0
User of CPE#0 max delta=1016 insn address=0xe in %bb.0: 0-3e	renamable $r0 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x40 offset=+50: In range
User of CPE#1 max delta=1016 insn address=0x2a in %bb.0: 0-3e	renamable $r0 = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x44 offset=+26: In range
User of CPE#2 max delta=1016 insn address=0x30 in %bb.0: 0-3e	renamable $r0 = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x48 offset=+24: In range
00000000 0b.0	 kb=2 ua=0 pa=0 size=0x3e
00000040 1b.0	 kb=2 ua=0 pa=0 size=0xc
Beginning BR iteration #0
00000000 0b.0	 kb=2 ua=0 pa=0 size=0x3e
00000040 1b.0	 kb=2 ua=0 pa=0 size=0xc
Verifying 3 CP users.
User of CPE#0 max delta=1018 insn address=0xe in %bb.0: 0-3e	renamable $r0 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x40 offset=+50: OK
User of CPE#1 max delta=1018 insn address=0x2a in %bb.0: 0-3e	renamable $r0 = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x44 offset=+26: OK
User of CPE#2 max delta=1018 insn address=0x30 in %bb.0: 0-3e	renamable $r0 = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
CPE address=0x48 offset=+24: OK

00000000 0b.1	 kb=2 ua=0 pa=0 size=0x3e
00000040 1b.0	 kb=2 ua=0 pa=0 size=0xc
********** REACHING DEFINITION ANALYSIS **********
%bb.0: all preds known
%bb.0: entry
SP:	0	frame-setup tPUSH 14, $noreg, killed $r4, killed $r6, killed $r7, killed $lr, implicit-def $sp, implicit $sp
R7:	6	$r7 = frame-setup tADDrSPi $sp, 2, 14, $noreg
SP:	8	$sp = frame-setup tSUBspi $sp(tied-def 0), 4, 14, $noreg
R4:	9	renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
CPSR:	9	renamable $r4, dead $cpsr = tMOVi8 0, 14, $noreg
R0:	11	renamable $r0 = tLDRpci %const.0, 14, $noreg :: (load (s32) from constant-pool)
LR:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
SP:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	12	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	13	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
CPSR:	13	renamable $r0, dead $cpsr = tMOVi8 5, 14, $noreg
R0:	15	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
CPSR:	15	renamable $r0, dead $cpsr = tMOVi8 10, 14, $noreg
R0:	17	renamable $r0 = tLDRspi $sp, 2, 14, $noreg :: (dereferenceable load (s32) from %ir.2)
R1:	18	renamable $r1 = tLDRspi $sp, 1, 14, $noreg :: (dereferenceable load (s32) from %ir.3)
R2:	19	renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
CPSR:	19	renamable $r2, dead $cpsr = tMOVi8 4, 14, $noreg
LR:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
SP:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
R0:	20	tBL 14, $noreg, @moreThan20Variables, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r0
R1:	22	renamable $r1 = tLDRspi $sp, 0, 14, $noreg :: (dereferenceable load (s32) from %ir.4)
R0:	23	renamable $r0 = tLDRpci %const.1, 14, $noreg :: (load (s32) from constant-pool)
LR:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
SP:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
R0:	24	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp, implicit-def $r0
R0:	25	renamable $r0 = tLDRpci %const.2, 14, $noreg :: (load (s32) from constant-pool)
LR:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
SP:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	26	tBL 14, $noreg, @printf, <regmask $lr $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $q4 $q5 $q6 $q7 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11 $s16 $s17 $s18 $s19 $s20 $s21 $s22 $s23 $s24 $s25 $s26 $s27 and 35 more...>, implicit-def dead $lr, implicit $sp, implicit $r0, implicit-def $sp, implicit-def $r0
R0:	27	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
CPSR:	27	$r0 = tMOVSr killed $r4, implicit-def dead $cpsr
SP:	28	$sp = frame-destroy tADDspi $sp(tied-def 0), 4, 14, $noreg
R4:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R6:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R7:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
SP:	29	frame-destroy tPOP 14, $noreg, def $r4, def $r6, def $r7, implicit-def $sp, implicit $sp
R1:	30	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
SP:	30	frame-destroy tPOP 14, $noreg, def $r1, implicit-def $sp, implicit $sp
LR:	31	$lr = frame-destroy tMOVr killed $r1, 14, $noreg
