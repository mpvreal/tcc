; ModuleID = 'regexec.c'
source_filename = "regexec.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.sv = type { ptr, i32, i32, %union.anon.0 }
%union.anon.0 = type { ptr }
%struct.regmatch_info = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i8, i8, i8, i8 }
%struct.cop = type { ptr, ptr, ptr, i64, i16, i8, i8, i32, ptr, ptr, i32, i32, ptr, ptr }
%struct.regexp = type { ptr, %union._xmgu, i64, %union.anon, ptr, ptr, ptr, i32, i64, i64, i64, ptr, i32, i32, ptr, i32, i32, ptr, ptr, ptr, i64, i64, i64, i64, i16, ptr }
%union._xmgu = type { ptr }
%union.anon = type { i64 }
%struct.magic = type { ptr, ptr, i16, i8, i8, i64, ptr, ptr }
%struct.hv = type { ptr, i32, i32, %union.anon.20 }
%union.anon.20 = type { ptr }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, ptr, ptr, i64 }
%struct.regexp_internal = type { i32, %union.anon.3, ptr, ptr, ptr, i32, [1 x %struct.regnode] }
%union.anon.3 = type { ptr }
%struct.regnode = type { i8, i8, i16 }
%struct.p5rx = type { ptr, i32, i32, %union.anon.1 }
%union.anon.1 = type { ptr }
%struct.regmatch_slab = type { [33 x %struct.regmatch_state], ptr, ptr }
%struct.regmatch_state = type { i32, ptr, %union.anon.5 }
%union.anon.5 = type { %struct.anon.16 }
%struct.anon.16 = type { i32, i32, i32, i32, i32, i32, ptr, ptr, i32, i32, i32, ptr, ptr, [14 x i8], [14 x i8] }
%struct.regmatch_info_aux = type { ptr, ptr, ptr, ptr }
%struct.gv = type { ptr, i32, i32, %union.anon.23 }
%union.anon.23 = type { ptr }
%struct.xpvgv = type { ptr, %union._xmgu, i64, %union.anon.43, %union._xivu, %union._xnvu }
%union.anon.43 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%struct.regmatch_info_aux_eval = type { ptr, ptr, ptr, ptr, i64, i64, i64, ptr, i64, i8 }
%struct.pmop = type { ptr, ptr, ptr, i64, i16, i8, i8, ptr, ptr, ptr, i32, %union.anon.17, %union.anon.18, ptr }
%union.anon.17 = type { ptr }
%union.anon.18 = type { ptr }
%struct.xpv = type { ptr, %union._xmgu, i64, %union.anon.2 }
%union.anon.2 = type { i64 }
%struct.regnode_string = type { i8, i8, i16, [1 x i8] }
%struct.xpviv = type { ptr, %union._xmgu, i64, %union.anon.4, %union._xivu }
%union.anon.4 = type { i64 }
%struct.regnode_charclass = type { i8, i8, i16, i32, [32 x i8] }
%struct.regnode_1 = type { i8, i8, i16, i32 }
%struct.reg_data = type { i32, ptr, [1 x ptr] }
%struct._reg_ac_data = type { i32, i32, ptr, ptr }
%struct._reg_trie_data = type { i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, i16, i32, i64, i64, i32, i32, i32 }
%struct._reg_trie_state = type { i16, %union.anon.19 }
%union.anon.19 = type { ptr }
%struct.reg_trie_wordinfo = type { i16, i32, i32 }
%struct._reg_trie_trans = type { i32, i32 }
%struct.regnode_charclass_class = type { i8, i8, i16, i32, [32 x i8], i32 }
%struct.regnode_2L = type { i8, i8, i16, i32, i32 }
%struct.xpvcv = type { ptr, %union._xmgu, i64, %union.anon.24, ptr, %union.anon.25, %union.anon.26, %union.anon.27, ptr, %union.anon.28, ptr, i32, i32, i32 }
%union.anon.24 = type { i64 }
%union.anon.25 = type { ptr }
%union.anon.26 = type { ptr }
%union.anon.27 = type { ptr }
%union.anon.28 = type { ptr }
%struct.stackinfo = type { ptr, ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.context = type { %union.anon.30 }
%union.anon.30 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.block = type { i8, i8, i16, i32, ptr, i32, i32, ptr, %union.anon.31 }
%union.anon.31 = type { %struct.block_sub }
%struct.block_sub = type { ptr, ptr, ptr, ptr, i32, ptr }
%struct.op = type { ptr, ptr, ptr, i64, i16, i8, i8 }
%struct.jmpenv = type { [1 x %struct.__jmp_buf_tag], ptr, i32, i8 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.xpvav = type { ptr, %union._xmgu, i64, i64, ptr }
%struct.av = type { ptr, i32, i32, %union.anon.37 }
%union.anon.37 = type { ptr }
%struct.padlist = type { i64, ptr, i32, i32 }
%struct.unop = type { ptr, ptr, ptr, i64, i16, i8, i8, ptr }
%struct.xpvnv = type { ptr, %union._xmgu, i64, %union.anon.38, %union._xivu, %union._xnvu }
%union.anon.38 = type { i64 }
%struct.regexp_engine = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.regnode_2 = type { i8, i8, i16, i16, i16 }
%struct.gp = type { ptr, ptr, ptr, i32, i32, ptr, ptr, ptr, ptr, i32, ptr }
%struct.xpvio = type { ptr, %union._xmgu, i64, %union.anon.39, %union._xivu, ptr, %union.anon.40, i64, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%union.anon.39 = type { i64 }
%union.anon.40 = type { ptr }
%union.any = type { ptr }
%struct.xpvmg = type { ptr, %union._xmgu, i64, %union.anon.21, %union._xivu, %union._xnvu }
%union.anon.21 = type { i64 }
%struct.xpvuv = type { ptr, %union._xmgu, i64, %union.anon.42, %union._xivu }
%union.anon.42 = type { i64 }

@PL_regkind = external local_unnamed_addr constant [0 x i8], align 1
@PL_curcop = external local_unnamed_addr global ptr, align 8
@PL_savestack_ix = external local_unnamed_addr global i32, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"corrupted regexp program\00", align 1
@PL_regmatch_slab = external local_unnamed_addr global ptr, align 8
@PL_regmatch_state = external local_unnamed_addr global ptr, align 8
@PL_curpm = external local_unnamed_addr global ptr, align 8
@PL_utf8skip = external local_unnamed_addr constant [0 x i8], align 1
@PL_fold_latin1 = external local_unnamed_addr constant [0 x i8], align 1
@PL_fold = external local_unnamed_addr constant [0 x i8], align 1
@PL_in_utf8_CTYPE_locale = external local_unnamed_addr global i8, align 1
@PL_fold_locale = external local_unnamed_addr global [0 x i8], align 1
@.str.2 = private unnamed_addr constant [76 x i8] c"Use of \\b{} or \\B{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale\00", align 1
@PL_utf8_swash_ptrs = external local_unnamed_addr global [10 x ptr], align 16
@.str.3 = private unnamed_addr constant [5 x i8] c"utf8\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_sv_undef = external global %struct.sv, align 8
@PL_XPosix_ptrs = external local_unnamed_addr global [16 x ptr], align 16
@PL_charclass = external local_unnamed_addr constant [0 x i32], align 4
@Grapheme_Cluster_Break_invmap = internal unnamed_addr constant [1484 x i32] [i32 2, i32 6, i32 2, i32 1, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 5, i32 13, i32 12, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 2, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 4, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 5, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 0, i32 13, i32 0, i32 12, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 0, i32 11, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 2, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 10, i32 0, i32 2, i32 4, i32 2, i32 0], align 16
@PL_GCB_invlist = external local_unnamed_addr global ptr, align 8
@Sentence_Break_invmap = internal unnamed_addr constant [2835 x i32] [i32 0, i32 14, i32 7, i32 14, i32 2, i32 0, i32 14, i32 12, i32 3, i32 0, i32 3, i32 0, i32 11, i32 1, i32 0, i32 9, i32 11, i32 0, i32 12, i32 0, i32 15, i32 3, i32 0, i32 3, i32 0, i32 8, i32 3, i32 0, i32 3, i32 0, i32 13, i32 0, i32 14, i32 0, i32 8, i32 3, i32 0, i32 6, i32 0, i32 8, i32 0, i32 8, i32 3, i32 0, i32 15, i32 0, i32 15, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 15, i32 8, i32 10, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 8, i32 10, i32 8, i32 0, i32 10, i32 0, i32 8, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 15, i32 8, i32 15, i32 8, i32 10, i32 0, i32 15, i32 8, i32 0, i32 8, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 8, i32 15, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 5, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 10, i32 0, i32 11, i32 0, i32 8, i32 0, i32 12, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 11, i32 0, i32 5, i32 0, i32 6, i32 0, i32 12, i32 10, i32 5, i32 9, i32 0, i32 9, i32 0, i32 10, i32 5, i32 10, i32 12, i32 10, i32 5, i32 6, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 10, i32 9, i32 10, i32 0, i32 10, i32 12, i32 0, i32 6, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 5, i32 10, i32 0, i32 9, i32 10, i32 5, i32 10, i32 0, i32 11, i32 12, i32 10, i32 0, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 12, i32 9, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 9, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 10, i32 0, i32 5, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 10, i32 5, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 3, i32 5, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 5, i32 10, i32 9, i32 12, i32 0, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 9, i32 5, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 12, i32 0, i32 12, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 12, i32 10, i32 14, i32 10, i32 3, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 5, i32 12, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 11, i32 12, i32 0, i32 11, i32 12, i32 0, i32 5, i32 6, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 12, i32 9, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 9, i32 0, i32 9, i32 0, i32 10, i32 12, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 10, i32 0, i32 9, i32 12, i32 0, i32 12, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 10, i32 9, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 12, i32 0, i32 9, i32 0, i32 10, i32 9, i32 10, i32 12, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 0, i32 5, i32 0, i32 8, i32 5, i32 0, i32 5, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 8, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 8, i32 15, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 14, i32 6, i32 5, i32 6, i32 0, i32 11, i32 0, i32 3, i32 0, i32 1, i32 0, i32 13, i32 6, i32 14, i32 0, i32 3, i32 0, i32 12, i32 0, i32 3, i32 12, i32 0, i32 14, i32 6, i32 0, i32 6, i32 0, i32 8, i32 0, i32 3, i32 8, i32 0, i32 3, i32 0, i32 8, i32 0, i32 5, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 10, i32 8, i32 0, i32 8, i32 15, i32 0, i32 15, i32 8, i32 0, i32 8, i32 0, i32 15, i32 8, i32 10, i32 15, i32 8, i32 10, i32 0, i32 3, i32 0, i32 3, i32 0, i32 15, i32 8, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 15, i32 0, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 5, i32 15, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 12, i32 10, i32 0, i32 12, i32 0, i32 3, i32 0, i32 14, i32 11, i32 12, i32 0, i32 10, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 12, i32 10, i32 0, i32 12, i32 10, i32 9, i32 10, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 5, i32 0, i32 5, i32 0, i32 10, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 5, i32 10, i32 5, i32 0, i32 12, i32 0, i32 12, i32 0, i32 10, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 0, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 0, i32 15, i32 0, i32 10, i32 8, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 0, i32 12, i32 0, i32 5, i32 10, i32 5, i32 0, i32 12, i32 9, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 9, i32 10, i32 5, i32 0, i32 12, i32 10, i32 5, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 12, i32 0, i32 10, i32 9, i32 0, i32 10, i32 5, i32 10, i32 9, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 5, i32 10, i32 5, i32 0, i32 9, i32 0, i32 12, i32 10, i32 0, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 12, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 10, i32 5, i32 12, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 8, i32 0, i32 8, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 3, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 11, i32 0, i32 11, i32 0, i32 3, i32 0, i32 5, i32 0, i32 11, i32 0, i32 3, i32 0, i32 3, i32 0, i32 11, i32 1, i32 0, i32 11, i32 12, i32 11, i32 3, i32 0, i32 11, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 12, i32 0, i32 3, i32 0, i32 11, i32 1, i32 0, i32 11, i32 0, i32 12, i32 0, i32 15, i32 3, i32 0, i32 3, i32 0, i32 8, i32 3, i32 0, i32 3, i32 0, i32 3, i32 12, i32 3, i32 11, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 15, i32 8, i32 10, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 12, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 12, i32 0, i32 9, i32 0, i32 5, i32 10, i32 5, i32 0, i32 6, i32 12, i32 0, i32 10, i32 0, i32 9, i32 0, i32 5, i32 10, i32 5, i32 0, i32 9, i32 0, i32 12, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 10, i32 12, i32 0, i32 12, i32 0, i32 9, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 12, i32 0, i32 12, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 9, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 12, i32 0, i32 12, i32 0, i32 10, i32 5, i32 12, i32 0, i32 10, i32 0, i32 9, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 15, i32 8, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 9, i32 0, i32 12, i32 0, i32 10, i32 0, i32 5, i32 12, i32 0, i32 10, i32 5, i32 12, i32 0, i32 10, i32 12, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 12, i32 6, i32 0, i32 5, i32 0, i32 5, i32 6, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 8, i32 15, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 8, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 3, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 6, i32 0, i32 5, i32 0], align 16
@PL_SB_invlist = external local_unnamed_addr global ptr, align 8
@Word_Break_invmap = internal unnamed_addr constant [1480 x i32] [i32 0, i32 10, i32 14, i32 2, i32 0, i32 3, i32 0, i32 17, i32 0, i32 12, i32 0, i32 13, i32 0, i32 15, i32 11, i32 12, i32 0, i32 1, i32 0, i32 6, i32 0, i32 1, i32 0, i32 14, i32 0, i32 1, i32 0, i32 7, i32 0, i32 1, i32 0, i32 11, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 11, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 12, i32 1, i32 0, i32 1, i32 11, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 12, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 8, i32 0, i32 8, i32 1, i32 11, i32 0, i32 7, i32 0, i32 12, i32 0, i32 5, i32 0, i32 7, i32 0, i32 1, i32 5, i32 15, i32 0, i32 15, i32 12, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 5, i32 7, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 1, i32 15, i32 1, i32 0, i32 1, i32 0, i32 7, i32 1, i32 5, i32 1, i32 5, i32 0, i32 1, i32 5, i32 1, i32 0, i32 15, i32 1, i32 5, i32 1, i32 0, i32 12, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 15, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 7, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 15, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 1, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 1, i32 15, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 15, i32 1, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 7, i32 0, i32 13, i32 0, i32 13, i32 0, i32 11, i32 14, i32 7, i32 0, i32 6, i32 0, i32 12, i32 0, i32 6, i32 0, i32 7, i32 0, i32 7, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 9, i32 0, i32 1, i32 0, i32 5, i32 9, i32 0, i32 9, i32 0, i32 9, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 9, i32 0, i32 9, i32 0, i32 9, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 15, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 15, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 1, i32 15, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 8, i32 5, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 12, i32 0, i32 11, i32 12, i32 0, i32 5, i32 0, i32 6, i32 0, i32 6, i32 12, i32 0, i32 13, i32 0, i32 12, i32 11, i32 0, i32 1, i32 0, i32 1, i32 0, i32 7, i32 0, i32 13, i32 0, i32 12, i32 0, i32 13, i32 0, i32 11, i32 12, i32 0, i32 1, i32 0, i32 6, i32 0, i32 1, i32 0, i32 9, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 7, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 1, i32 5, i32 0, i32 7, i32 0, i32 1, i32 0, i32 15, i32 0, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 1, i32 0, i32 15, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 1, i32 0, i32 9, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 7, i32 0, i32 5, i32 0, i32 5, i32 7, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 16, i32 0, i32 7, i32 0, i32 7, i32 0, i32 5, i32 0], align 16
@PL_WB_invlist = external local_unnamed_addr global ptr, align 8
@.str.5 = private unnamed_addr constant [74 x i8] c"panic: find_byclass() node %d='%s' has an unexpected character class '%d'\00", align 1
@PL_reg_name = external local_unnamed_addr global [0 x ptr], align 8
@PL_tmps_floor = external global i64, align 8
@PL_tmps_ix = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [29 x i8] c"panic: unknown regstclass %d\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Malformed UTF-8 character (fatal)\00", align 1
@.str.8 = private unnamed_addr constant [85 x i8] c"Matched non-Unicode code point 0x%04lX against Unicode property; may not be portable\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"panic: isFOO_lc() has an unexpected character class '%d'\00", align 1
@PL_replgv = external local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [28 x i8] c"Infinite recursion in regex\00", align 1
@.str.11 = private unnamed_addr constant [70 x i8] c"Pattern subroutine nesting without pos change exceeded limit in regex\00", align 1
@.str.12 = private unnamed_addr constant [48 x i8] c"EVAL without pos change exceeded limit in regex\00", align 1
@PL_stack_sp = external local_unnamed_addr global ptr, align 8
@PL_op = external global ptr, align 8
@PL_comppad = external local_unnamed_addr global ptr, align 8
@PL_curstackinfo = external local_unnamed_addr global ptr, align 8
@PL_curpad = external local_unnamed_addr global ptr, align 8
@PL_top_env = external local_unnamed_addr global ptr, align 8
@PL_stack_base = external local_unnamed_addr global ptr, align 8
@PL_curstack = external local_unnamed_addr global ptr, align 8
@PL_stack_max = external local_unnamed_addr global ptr, align 8
@PL_markstack_ptr = external local_unnamed_addr global ptr, align 8
@PL_markstack = external local_unnamed_addr global ptr, align 8
@PL_scopestack_ix = external local_unnamed_addr global i32, align 4
@.str.13 = private unnamed_addr constant [8 x i8] c"REGMARK\00", align 1
@PL_runops = external local_unnamed_addr global ptr, align 8
@PL_reg_curpm = external local_unnamed_addr global ptr, align 8
@.str.14 = private unnamed_addr constant [60 x i8] c"Complex regular subexpression recursion limit (%d) exceeded\00", align 1
@PL_stderrgv = external local_unnamed_addr global ptr, align 8
@.str.15 = private unnamed_addr constant [8 x i8] c"%lx %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"regexp memory corruption\00", align 1
@.str.17 = private unnamed_addr constant [26 x i8] c"corrupted regexp pointers\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"REGERROR\00", align 1
@PL_sv_no = external global %struct.sv, align 8
@PL_sv_yes = external global %struct.sv, align 8
@.str.19 = private unnamed_addr constant [90 x i8] c"panic: paren_elems_to_push, %i < 0, maxopenparen: %i parenfloor: %i REGCP_PAREN_ELEMS: %u\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"panic: paren_elems_to_push offset %lu out of range (%lu-%ld)\00", align 1
@PL_savestack_max = external local_unnamed_addr global i32, align 4
@PL_savestack = external local_unnamed_addr global ptr, align 8
@PL_utf8_foldclosures = external local_unnamed_addr global ptr, align 8
@.str.21 = private unnamed_addr constant [46 x i8] c"panic: invalid PL_utf8_foldclosures structure\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"panic: Unexpected op %u\00", align 1
@.str.23 = private unnamed_addr constant [71 x i8] c"panic: regrepeat() node %d='%s' has an unexpected character class '%d'\00", align 1
@.str.24 = private unnamed_addr constant [62 x i8] c"panic: regrepeat() called with unrecognized node type %d='%s'\00", align 1
@PL_defgv = external local_unnamed_addr global ptr, align 8

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_pregexec(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %5, i32 noundef %6) local_unnamed_addr #0 {
  %8 = icmp eq i32 %6, 0
  %9 = zext i1 %8 to i32
  %10 = tail call i32 @Perl_regexec_flags(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %5, ptr poison, i32 noundef %9), !range !5
  ret i32 %10
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_regexec_flags(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %5, ptr nocapture readnone %6, i32 noundef %7) local_unnamed_addr #0 {
  %9 = alloca ptr, align 8
  %10 = alloca %struct.regmatch_info, align 8
  %11 = alloca i64, align 8
  %12 = getelementptr i8, ptr %0, i64 16
  %13 = load ptr, ptr %12, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  %14 = getelementptr inbounds %struct.sv, ptr %5, i64 0, i32 2
  %15 = load i32, ptr %14, align 4, !tbaa !9
  %16 = and i32 %15, 536870912
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %8
  %19 = load ptr, ptr @PL_curcop, align 8, !tbaa !13
  %20 = getelementptr inbounds %struct.cop, ptr %19, i64 0, i32 10
  %21 = load i32, ptr %20, align 8, !tbaa !14
  %22 = and i32 %21, 8
  %23 = icmp eq i32 %22, 0
  br label %24

24:                                               ; preds = %8, %18
  %25 = phi i1 [ false, %8 ], [ %23, %18 ]
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 14
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %10) #12
  %29 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 13
  %30 = load i32, ptr %29, align 4, !tbaa !19
  %31 = and i32 %30, 256
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %148, label %33

33:                                               ; preds = %24
  %34 = and i32 %7, 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %122

36:                                               ; preds = %33
  %37 = tail call ptr @Perl_mg_find_mglob(ptr noundef nonnull %5) #12
  %38 = icmp eq ptr %37, null
  br i1 %38, label %122, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.magic, ptr %37, i64 0, i32 5
  %41 = load i64, ptr %40, align 8, !tbaa !20
  %42 = icmp sgt i64 %41, -1
  br i1 %42, label %43, label %122

43:                                               ; preds = %39
  %44 = ptrtoint ptr %2 to i64
  %45 = ptrtoint ptr %3 to i64
  %46 = sub i64 %44, %45
  %47 = getelementptr inbounds %struct.magic, ptr %37, i64 0, i32 4
  %48 = load i8, ptr %47, align 1, !tbaa !23
  %49 = and i8 %48, 64
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %119

51:                                               ; preds = %43
  %52 = load i32, ptr %14, align 4, !tbaa !9
  %53 = and i32 %52, 536870912
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %119, label %55

55:                                               ; preds = %51
  %56 = load ptr, ptr @PL_curcop, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.cop, ptr %56, i64 0, i32 10
  %58 = load i32, ptr %57, align 8, !tbaa !14
  %59 = and i32 %58, 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %119

61:                                               ; preds = %55
  %62 = and i32 %52, 2097152
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %81

64:                                               ; preds = %61
  %65 = and i32 %52, 2048
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %84, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.sv, ptr %5, i64 0, i32 3
  %69 = load ptr, ptr %68, align 8, !tbaa !6
  %70 = getelementptr inbounds %struct.sv, ptr %69, i64 0, i32 2
  %71 = load i32, ptr %70, align 4, !tbaa !9
  %72 = and i32 %71, 1048576
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %67
  %75 = load ptr, ptr %69, align 8, !tbaa !24
  %76 = load ptr, ptr %75, align 8, !tbaa !25
  %77 = getelementptr inbounds %struct.hv, ptr %76, i64 0, i32 2
  %78 = load i32, ptr %77, align 4, !tbaa !27
  %79 = and i32 %78, 268435456
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %74, %61
  %82 = getelementptr inbounds i8, ptr %3, i64 %46
  %83 = tail call i64 @Perl_utf8_length(ptr noundef %3, ptr noundef %82) #12
  br label %86

84:                                               ; preds = %74, %67, %64
  %85 = tail call i64 @Perl_sv_len_utf8(ptr noundef nonnull %5) #12
  br label %86

86:                                               ; preds = %84, %81
  %87 = phi i64 [ %83, %81 ], [ %85, %84 ]
  %88 = icmp ugt i64 %41, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %86
  %90 = add i64 %46, 1
  br label %119

91:                                               ; preds = %86
  %92 = load i32, ptr %14, align 4, !tbaa !9
  %93 = and i32 %92, 2097152
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %112

95:                                               ; preds = %91
  %96 = and i32 %92, 2048
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %117, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %struct.sv, ptr %5, i64 0, i32 3
  %100 = load ptr, ptr %99, align 8, !tbaa !6
  %101 = getelementptr inbounds %struct.sv, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 4, !tbaa !9
  %103 = and i32 %102, 1048576
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %98
  %106 = load ptr, ptr %100, align 8, !tbaa !24
  %107 = load ptr, ptr %106, align 8, !tbaa !25
  %108 = getelementptr inbounds %struct.hv, ptr %107, i64 0, i32 2
  %109 = load i32, ptr %108, align 4, !tbaa !27
  %110 = and i32 %109, 268435456
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %117, label %112

112:                                              ; preds = %105, %91
  %113 = trunc i64 %41 to i32
  %114 = tail call ptr @Perl_utf8_hop(ptr noundef %3, i32 noundef %113) #12
  %115 = ptrtoint ptr %114 to i64
  %116 = sub i64 %115, %45
  br label %119

117:                                              ; preds = %105, %98, %95
  %118 = tail call i64 @Perl_sv_pos_u2b_flags(ptr noundef nonnull %5, i64 noundef %41, ptr noundef null, i32 noundef 32) #12
  br label %119

119:                                              ; preds = %43, %51, %55, %89, %112, %117
  %120 = phi i64 [ %90, %89 ], [ %116, %112 ], [ %118, %117 ], [ %41, %55 ], [ %41, %51 ], [ %41, %43 ]
  %121 = getelementptr inbounds i8, ptr %3, i64 %120
  br label %122

122:                                              ; preds = %36, %39, %33, %119
  %123 = phi ptr [ %121, %119 ], [ %1, %33 ], [ %3, %39 ], [ %3, %36 ]
  %124 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 5
  store ptr %123, ptr %124, align 8, !tbaa !29
  %125 = load i32, ptr %29, align 4, !tbaa !19
  %126 = and i32 %125, 4096
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 10
  %129 = load i64, ptr %128, align 8, !tbaa !32
  br i1 %127, label %137, label %130

130:                                              ; preds = %122
  %131 = sub i64 0, %129
  %132 = getelementptr inbounds i8, ptr %123, i64 %131
  %133 = and i32 %7, 128
  %134 = icmp eq i32 %133, 0
  %135 = select i1 %134, ptr %3, ptr %1
  %136 = icmp ult ptr %132, %135
  br i1 %136, label %1393, label %148

137:                                              ; preds = %122
  %138 = icmp eq i64 %129, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %137
  %140 = sub i64 0, %129
  %141 = getelementptr inbounds i8, ptr %1, i64 %140
  %142 = icmp ult ptr %141, %3
  %143 = select i1 %142, ptr %3, ptr %141
  br label %148

144:                                              ; preds = %137
  %145 = and i32 %125, 512
  %146 = icmp eq i32 %145, 0
  %147 = select i1 %146, ptr %1, ptr %3
  br label %148

148:                                              ; preds = %144, %139, %130, %24
  %149 = phi ptr [ %1, %24 ], [ %132, %130 ], [ %143, %139 ], [ %147, %144 ]
  %150 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 8
  %151 = load i64, ptr %150, align 8, !tbaa !33
  %152 = getelementptr inbounds i8, ptr %149, i64 %151
  %153 = icmp ugt ptr %152, %2
  %154 = icmp ult ptr %149, %3
  %155 = or i1 %154, %153
  br i1 %155, label %1393, label %156

156:                                              ; preds = %148
  %157 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store ptr %149, ptr %9, align 8, !tbaa !13
  %158 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 7
  %159 = load i32, ptr %158, align 8, !tbaa !35
  %160 = and i32 %159, 6291456
  %161 = icmp ne i32 %160, 0
  %162 = and i32 %7, 2
  %163 = icmp eq i32 %162, 0
  %164 = and i1 %163, %161
  br i1 %164, label %165, label %209

165:                                              ; preds = %156
  %166 = tail call ptr @Perl_re_intuit_start(ptr noundef nonnull %0, ptr noundef nonnull %5, ptr noundef %3, ptr noundef %149, ptr noundef %2, i32 poison, ptr poison)
  store ptr %166, ptr %9, align 8, !tbaa !13
  %167 = icmp eq ptr %166, null
  br i1 %167, label %1393, label %168

168:                                              ; preds = %165
  %169 = load i32, ptr %158, align 8, !tbaa !35
  %170 = and i32 %169, 524288
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %209, label %172

172:                                              ; preds = %168
  %173 = and i32 %7, 128
  %174 = icmp ne i32 %173, 0
  %175 = icmp ult ptr %166, %1
  %176 = and i1 %174, %175
  br i1 %176, label %1383, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 16
  store i32 0, ptr %178, align 4, !tbaa !36
  %179 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 15
  store i32 0, ptr %179, align 8, !tbaa !37
  %180 = load ptr, ptr %12, align 8, !tbaa !6
  %181 = getelementptr inbounds %struct.regexp, ptr %180, i64 0, i32 7
  %182 = load i32, ptr %181, align 8, !tbaa !35
  %183 = ptrtoint ptr %166 to i64
  %184 = ptrtoint ptr %3 to i64
  %185 = sub i64 %183, %184
  %186 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %187 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 9
  br i1 %25, label %188, label %197

188:                                              ; preds = %177
  %189 = or i32 %182, 1048576
  store i32 %189, ptr %181, align 8, !tbaa !35
  %190 = load ptr, ptr %186, align 8, !tbaa !38
  store i64 %185, ptr %190, align 8, !tbaa !39
  %191 = load i64, ptr %187, align 8, !tbaa !41
  %192 = trunc i64 %191 to i32
  %193 = tail call ptr @Perl_utf8_hop(ptr noundef nonnull %166, i32 noundef %192) #12
  %194 = ptrtoint ptr %193 to i64
  %195 = sub i64 %194, %184
  %196 = load ptr, ptr %186, align 8, !tbaa !38
  br label %202

197:                                              ; preds = %177
  %198 = and i32 %182, -1048577
  store i32 %198, ptr %181, align 8, !tbaa !35
  %199 = load ptr, ptr %186, align 8, !tbaa !38
  store i64 %185, ptr %199, align 8, !tbaa !39
  %200 = load i64, ptr %187, align 8, !tbaa !41
  %201 = add nsw i64 %200, %185
  br label %202

202:                                              ; preds = %197, %188
  %203 = phi ptr [ %196, %188 ], [ %199, %197 ]
  %204 = phi i64 [ %195, %188 ], [ %201, %197 ]
  %205 = getelementptr inbounds %struct.regexp_paren_pair, ptr %203, i64 0, i32 1
  store i64 %204, ptr %205, align 8, !tbaa !42
  %206 = and i32 %7, 16
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %1393

208:                                              ; preds = %202
  tail call fastcc void @S_reg_set_capture_string(ptr noundef nonnull %0, ptr noundef %3, ptr noundef %2, ptr noundef nonnull %5, i32 noundef %7)
  br label %1393

209:                                              ; preds = %168, %156
  %210 = phi ptr [ %166, %168 ], [ %149, %156 ]
  %211 = phi i32 [ %169, %168 ], [ %159, %156 ]
  %212 = and i32 %211, 1
  %213 = ptrtoint ptr %2 to i64
  %214 = ptrtoint ptr %210 to i64
  %215 = sub i64 %213, %214
  %216 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 11
  %217 = load ptr, ptr %216, align 8, !tbaa !43
  %218 = getelementptr inbounds %struct.reg_substr_data, ptr %217, i64 0, i32 1, i64 2
  %219 = load i64, ptr %218, align 8, !tbaa !44
  %220 = tail call i64 @llvm.smin.i64(i64 %219, i64 0)
  %221 = add nsw i64 %220, %151
  %222 = icmp slt i64 %215, %221
  br i1 %222, label %1383, label %223

223:                                              ; preds = %209
  %224 = getelementptr inbounds %struct.regexp_internal, ptr %28, i64 0, i32 6
  %225 = load i8, ptr %224, align 4, !tbaa !6
  %226 = icmp eq i8 %225, -100
  br i1 %226, label %228, label %227

227:                                              ; preds = %223
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.1) #12
  br label %228

228:                                              ; preds = %227, %223
  %229 = load ptr, ptr %12, align 8, !tbaa !6
  %230 = getelementptr inbounds %struct.regexp, ptr %229, i64 0, i32 7
  %231 = load i32, ptr %230, align 8, !tbaa !35
  %232 = and i32 %231, -67108865
  store i32 %232, ptr %230, align 8, !tbaa !35
  %233 = load ptr, ptr %12, align 8, !tbaa !6
  %234 = getelementptr inbounds %struct.regexp, ptr %233, i64 0, i32 7
  %235 = load i32, ptr %234, align 8, !tbaa !35
  %236 = and i32 %235, -1048577
  %237 = select i1 %25, i32 1048576, i32 0
  %238 = or i32 %236, %237
  store i32 %238, ptr %234, align 8, !tbaa !35
  store ptr %0, ptr %10, align 8, !tbaa !46
  %239 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 12
  store i8 0, ptr %239, align 8, !tbaa !47
  %240 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 14
  store i8 %26, ptr %240, align 2, !tbaa !48
  %241 = getelementptr inbounds %struct.p5rx, ptr %0, i64 0, i32 2
  %242 = load i32, ptr %241, align 4, !tbaa !49
  %243 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 13
  %244 = lshr i32 %242, 29
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  store i8 %246, ptr %243, align 1, !tbaa !51
  %247 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 15
  store i8 0, ptr %247, align 1, !tbaa !52
  %248 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 1
  store ptr %3, ptr %248, align 8, !tbaa !53
  %249 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 4
  store ptr %5, ptr %249, align 8, !tbaa !54
  %250 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 9
  store i32 0, ptr %250, align 8, !tbaa !55
  %251 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 2
  store ptr %2, ptr %251, align 8, !tbaa !56
  %252 = getelementptr inbounds i8, ptr %1, i64 %4
  %253 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 3
  store ptr %252, ptr %253, align 8, !tbaa !57
  %254 = load i32, ptr %158, align 8, !tbaa !35
  %255 = and i32 %254, 131072
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %268, label %257

257:                                              ; preds = %228
  %258 = load i32, ptr %14, align 4, !tbaa !9
  %259 = and i32 %258, 131072
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %268, label %261

261:                                              ; preds = %257
  %262 = tail call ptr @Perl_newSV(i64 noundef 0) #12
  store ptr %262, ptr %249, align 8, !tbaa !54
  %263 = icmp eq ptr %262, %5
  br i1 %263, label %265, label %264

264:                                              ; preds = %261
  tail call void @Perl_sv_setsv_flags(ptr noundef %262, ptr noundef nonnull %5, i32 noundef 1554) #12
  br label %265

265:                                              ; preds = %261, %264
  tail call void @Perl_save_pushptr(ptr noundef %262, i32 noundef 11) #12
  %266 = load i32, ptr %158, align 8, !tbaa !35
  %267 = and i32 %266, 131072
  br label %268

268:                                              ; preds = %265, %257, %228
  %269 = phi i32 [ %267, %265 ], [ 1, %257 ], [ 0, %228 ]
  %270 = phi ptr [ %262, %265 ], [ %5, %257 ], [ %5, %228 ]
  %271 = icmp eq i32 %269, 0
  %272 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %273 = icmp eq ptr %272, null
  br i1 %273, label %276, label %274

274:                                              ; preds = %268
  %275 = load ptr, ptr @PL_regmatch_state, align 8, !tbaa !13
  br label %279

276:                                              ; preds = %268
  %277 = tail call ptr @Perl_safesysmalloc(i64 noundef 3976) #12
  store ptr %277, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %278 = getelementptr inbounds %struct.regmatch_slab, ptr %277, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %278, i8 0, i64 16, i1 false)
  store ptr %277, ptr @PL_regmatch_state, align 8, !tbaa !13
  br label %279

279:                                              ; preds = %274, %276
  %280 = phi ptr [ %272, %274 ], [ %277, %276 ]
  %281 = phi ptr [ %275, %274 ], [ %277, %276 ]
  %282 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 7
  %283 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 8
  %284 = select i1 %271, i32 2, i32 3
  br label %285

285:                                              ; preds = %279, %317
  %286 = phi ptr [ undef, %279 ], [ %298, %317 ]
  %287 = phi ptr [ %280, %279 ], [ %318, %317 ]
  %288 = phi ptr [ %281, %279 ], [ %319, %317 ]
  %289 = phi ptr [ undef, %279 ], [ %301, %317 ]
  %290 = phi i32 [ 0, %279 ], [ %320, %317 ]
  switch i32 %290, label %297 [
    i32 1, label %291
    i32 2, label %293
  ]

291:                                              ; preds = %285
  %292 = getelementptr inbounds %struct.regmatch_state, ptr %288, i64 0, i32 2
  store ptr %292, ptr %282, align 8, !tbaa !58
  br label %297

293:                                              ; preds = %285
  %294 = getelementptr inbounds %struct.regmatch_state, ptr %288, i64 0, i32 2
  store ptr %294, ptr %289, align 8, !tbaa !59
  store ptr %294, ptr %283, align 8, !tbaa !61
  %295 = load ptr, ptr @PL_regmatch_state, align 8, !tbaa !13
  %296 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !13
  br label %297

297:                                              ; preds = %285, %293, %291
  %298 = phi ptr [ %286, %285 ], [ %294, %293 ], [ %286, %291 ]
  %299 = phi ptr [ %287, %285 ], [ %296, %293 ], [ %287, %291 ]
  %300 = phi ptr [ %288, %285 ], [ %295, %293 ], [ %288, %291 ]
  %301 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %292, %291 ]
  %302 = getelementptr inbounds %struct.regmatch_state, ptr %300, i64 1
  store ptr %302, ptr @PL_regmatch_state, align 8, !tbaa !13
  %303 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %299, i64 0, i64 32
  %304 = icmp ugt ptr %302, %303
  br i1 %304, label %305, label %317

305:                                              ; preds = %297
  %306 = getelementptr inbounds %struct.regmatch_slab, ptr %299, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !62
  %308 = icmp eq ptr %307, null
  br i1 %308, label %309, label %315

309:                                              ; preds = %305
  %310 = tail call ptr @Perl_safesysmalloc(i64 noundef 3976) #12
  %311 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %312 = getelementptr inbounds %struct.regmatch_slab, ptr %310, i64 0, i32 1
  store ptr %311, ptr %312, align 8, !tbaa !64
  %313 = getelementptr inbounds %struct.regmatch_slab, ptr %310, i64 0, i32 2
  store ptr null, ptr %313, align 8, !tbaa !62
  %314 = getelementptr inbounds %struct.regmatch_slab, ptr %311, i64 0, i32 2
  store ptr %310, ptr %314, align 8, !tbaa !62
  br label %315

315:                                              ; preds = %305, %309
  %316 = phi ptr [ %307, %305 ], [ %310, %309 ]
  store ptr %316, ptr @PL_regmatch_slab, align 8, !tbaa !13
  store ptr %316, ptr @PL_regmatch_state, align 8, !tbaa !13
  br label %317

317:                                              ; preds = %297, %315
  %318 = phi ptr [ %299, %297 ], [ %316, %315 ]
  %319 = phi ptr [ %302, %297 ], [ %316, %315 ]
  %320 = add nuw nsw i32 %290, 1
  %321 = icmp eq i32 %320, %284
  br i1 %321, label %322, label %285, !llvm.loop !65

322:                                              ; preds = %317
  %323 = getelementptr inbounds %struct.regmatch_info_aux, ptr %301, i64 0, i32 1
  store ptr %281, ptr %323, align 8, !tbaa !67
  %324 = getelementptr inbounds %struct.regmatch_info_aux, ptr %301, i64 0, i32 2
  store ptr %280, ptr %324, align 8, !tbaa !68
  %325 = getelementptr inbounds %struct.regmatch_info_aux, ptr %301, i64 0, i32 3
  store ptr null, ptr %325, align 8, !tbaa !69
  tail call void @Perl_save_destructor_x(ptr noundef nonnull @S_cleanup_regmatch_info_aux, ptr noundef %301) #12
  %326 = load i32, ptr %158, align 8, !tbaa !35
  %327 = and i32 %326, 131072
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %447, label %329

329:                                              ; preds = %322
  %330 = load ptr, ptr %12, align 8, !tbaa !6
  store ptr %330, ptr %298, align 8, !tbaa !70
  %331 = icmp eq ptr %270, null
  br i1 %331, label %394, label %332

332:                                              ; preds = %329
  %333 = load ptr, ptr @PL_defgv, align 8, !tbaa !13
  %334 = getelementptr inbounds %struct.gv, ptr %333, i64 0, i32 3
  %335 = load ptr, ptr %334, align 8, !tbaa !6
  %336 = load ptr, ptr %335, align 8, !tbaa !13
  %337 = icmp eq ptr %336, null
  br i1 %337, label %338, label %343

338:                                              ; preds = %332
  %339 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %333, i32 noundef 0) #12
  %340 = getelementptr inbounds %struct.gv, ptr %339, i64 0, i32 3
  %341 = load ptr, ptr %340, align 8, !tbaa !6
  %342 = load ptr, ptr %341, align 8, !tbaa !13
  br label %343

343:                                              ; preds = %338, %332
  %344 = phi ptr [ %342, %338 ], [ %336, %332 ]
  %345 = icmp eq ptr %270, %344
  br i1 %345, label %377, label %346

346:                                              ; preds = %343
  %347 = load ptr, ptr @PL_defgv, align 8, !tbaa !13
  tail call void @Perl_save_gp(ptr noundef %347, i32 noundef 0) #12
  %348 = load ptr, ptr @PL_defgv, align 8, !tbaa !13
  %349 = load ptr, ptr %348, align 8, !tbaa !72
  %350 = getelementptr inbounds %struct.xpvgv, ptr %349, i64 0, i32 2
  %351 = load i64, ptr %350, align 8, !tbaa !74
  %352 = and i64 %351, -2
  store i64 %352, ptr %350, align 8, !tbaa !74
  %353 = getelementptr inbounds %struct.gv, ptr %348, i64 0, i32 3
  %354 = load ptr, ptr %353, align 8, !tbaa !6
  tail call void @Perl_save_generic_svref(ptr noundef %354) #12
  %355 = load ptr, ptr @PL_defgv, align 8, !tbaa !13
  %356 = getelementptr inbounds %struct.gv, ptr %355, i64 0, i32 3
  %357 = load ptr, ptr %356, align 8, !tbaa !6
  store ptr null, ptr %357, align 8, !tbaa !76
  %358 = load ptr, ptr @PL_defgv, align 8, !tbaa !13
  %359 = getelementptr inbounds %struct.gv, ptr %358, i64 0, i32 3
  %360 = load ptr, ptr %359, align 8, !tbaa !6
  %361 = load ptr, ptr %360, align 8, !tbaa !76
  %362 = icmp eq ptr %361, null
  br i1 %362, label %370, label %363

363:                                              ; preds = %346
  %364 = getelementptr inbounds %struct.sv, ptr %361, i64 0, i32 1
  %365 = load i32, ptr %364, align 8, !tbaa !78
  %366 = icmp ugt i32 %365, 1
  br i1 %366, label %367, label %369

367:                                              ; preds = %363
  %368 = add i32 %365, -1
  store i32 %368, ptr %364, align 8, !tbaa !78
  br label %370

369:                                              ; preds = %363
  tail call void @Perl_sv_free2(ptr noundef nonnull %361, i32 noundef %365) #12
  br label %370

370:                                              ; preds = %369, %367, %346
  %371 = getelementptr inbounds %struct.sv, ptr %270, i64 0, i32 1
  %372 = load i32, ptr %371, align 8, !tbaa !78
  %373 = add i32 %372, 1
  store i32 %373, ptr %371, align 8, !tbaa !78
  %374 = load ptr, ptr @PL_defgv, align 8, !tbaa !13
  %375 = getelementptr inbounds %struct.gv, ptr %374, i64 0, i32 3
  %376 = load ptr, ptr %375, align 8, !tbaa !6
  store ptr %270, ptr %376, align 8, !tbaa !76
  br label %377

377:                                              ; preds = %343, %370
  %378 = tail call ptr @Perl_mg_find_mglob(ptr noundef nonnull %270) #12
  %379 = icmp eq ptr %378, null
  br i1 %379, label %383, label %380

380:                                              ; preds = %377
  %381 = getelementptr inbounds %struct.magic, ptr %378, i64 0, i32 5
  %382 = load i64, ptr %381, align 8, !tbaa !20
  br label %386

383:                                              ; preds = %377
  %384 = tail call ptr @Perl_sv_magicext_mglob(ptr noundef nonnull %270) #12
  %385 = getelementptr inbounds %struct.magic, ptr %384, i64 0, i32 5
  store i64 -1, ptr %385, align 8, !tbaa !20
  br label %386

386:                                              ; preds = %383, %380
  %387 = phi i64 [ %382, %380 ], [ -1, %383 ]
  %388 = phi ptr [ %378, %380 ], [ %384, %383 ]
  %389 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 7
  store ptr %388, ptr %389, align 8, !tbaa !79
  %390 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 8
  store i64 %387, ptr %390, align 8, !tbaa !80
  %391 = getelementptr inbounds %struct.magic, ptr %388, i64 0, i32 4
  %392 = load i8, ptr %391, align 1, !tbaa !23
  %393 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 9
  store i8 %392, ptr %393, align 8, !tbaa !81
  br label %396

394:                                              ; preds = %329
  %395 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 7
  store ptr null, ptr %395, align 8, !tbaa !79
  br label %396

396:                                              ; preds = %394, %386
  %397 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  %398 = icmp eq ptr %397, null
  br i1 %398, label %399, label %401

399:                                              ; preds = %396
  %400 = tail call ptr @Perl_safesyscalloc(i64 noundef 1, i64 noundef 96) #12
  store ptr %400, ptr @PL_reg_curpm, align 8, !tbaa !13
  br label %401

401:                                              ; preds = %396, %399
  %402 = phi ptr [ %400, %399 ], [ %397, %396 ]
  %403 = getelementptr inbounds %struct.sv, ptr %0, i64 0, i32 1
  %404 = load i32, ptr %403, align 8, !tbaa !78
  %405 = add i32 %404, 1
  store i32 %405, ptr %403, align 8, !tbaa !78
  %406 = getelementptr inbounds %struct.pmop, ptr %402, i64 0, i32 9
  %407 = load ptr, ptr %406, align 8, !tbaa !82
  %408 = icmp eq ptr %407, null
  br i1 %408, label %417, label %409

409:                                              ; preds = %401
  %410 = getelementptr inbounds %struct.sv, ptr %407, i64 0, i32 1
  %411 = load i32, ptr %410, align 8, !tbaa !78
  %412 = icmp ugt i32 %411, 1
  br i1 %412, label %413, label %415

413:                                              ; preds = %409
  %414 = add i32 %411, -1
  store i32 %414, ptr %410, align 8, !tbaa !78
  br label %417

415:                                              ; preds = %409
  tail call void @Perl_sv_free2(ptr noundef nonnull %407, i32 noundef %411) #12
  %416 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  br label %417

417:                                              ; preds = %401, %413, %415
  %418 = phi ptr [ %402, %401 ], [ %402, %413 ], [ %416, %415 ]
  %419 = getelementptr inbounds %struct.pmop, ptr %418, i64 0, i32 9
  store ptr %0, ptr %419, align 8, !tbaa !82
  %420 = load ptr, ptr @PL_curpm, align 8, !tbaa !13
  %421 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 1
  store ptr %420, ptr %421, align 8, !tbaa !84
  store ptr %418, ptr @PL_curpm, align 8, !tbaa !13
  %422 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 7
  %423 = load i32, ptr %422, align 8, !tbaa !35
  %424 = and i32 %423, 33554432
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %439, label %426

426:                                              ; preds = %417
  %427 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 18
  %428 = load ptr, ptr %427, align 8, !tbaa !85
  %429 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 20
  %430 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 4
  %431 = load <2 x i64>, ptr %429, align 8, !tbaa !86
  store <2 x i64> %431, ptr %430, align 8, !tbaa !86
  %432 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 22
  %433 = load i64, ptr %432, align 8, !tbaa !87
  %434 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 6
  store i64 %433, ptr %434, align 8, !tbaa !88
  %435 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 19
  %436 = load ptr, ptr %435, align 8, !tbaa !89
  %437 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 2
  store ptr %436, ptr %437, align 8, !tbaa !90
  %438 = and i32 %423, -33554433
  store i32 %438, ptr %422, align 8, !tbaa !35
  br label %439

439:                                              ; preds = %426, %417
  %440 = phi ptr [ %428, %426 ], [ null, %417 ]
  %441 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 3
  store ptr %440, ptr %441, align 8
  %442 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 18
  store ptr %3, ptr %442, align 8, !tbaa !85
  %443 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 21
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %443, i8 0, i64 16, i1 false)
  %444 = ptrtoint ptr %3 to i64
  %445 = sub i64 %213, %444
  %446 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 20
  store i64 %445, ptr %446, align 8, !tbaa !91
  br label %450

447:                                              ; preds = %322
  store ptr null, ptr %301, align 8, !tbaa !59
  store ptr null, ptr %283, align 8, !tbaa !61
  %448 = load ptr, ptr @PL_curpm, align 8, !tbaa !13
  %449 = icmp eq ptr %448, null
  br i1 %449, label %463, label %450

450:                                              ; preds = %439, %447
  %451 = phi ptr [ %418, %439 ], [ %448, %447 ]
  %452 = getelementptr inbounds %struct.pmop, ptr %451, i64 0, i32 9
  %453 = load ptr, ptr %452, align 8, !tbaa !82
  %454 = icmp eq ptr %453, %0
  br i1 %454, label %455, label %463

455:                                              ; preds = %450
  %456 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %457 = load ptr, ptr %456, align 8, !tbaa !38
  %458 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 12
  %459 = load i32, ptr %458, align 8, !tbaa !92
  %460 = add i32 %459, 1
  %461 = zext i32 %460 to i64
  %462 = tail call ptr @Perl_safesyscalloc(i64 noundef %461, i64 noundef 24) #12
  store ptr %462, ptr %456, align 8, !tbaa !38
  br label %463

463:                                              ; preds = %455, %450, %447
  %464 = phi ptr [ %457, %455 ], [ null, %450 ], [ null, %447 ]
  %465 = load i32, ptr %29, align 4, !tbaa !19
  %466 = and i32 %465, 3072
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %625, label %468

468:                                              ; preds = %463
  %469 = load ptr, ptr %12, align 8, !tbaa !6
  %470 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 14
  %471 = load ptr, ptr %470, align 8, !tbaa !17
  %472 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  store ptr null, ptr %472, align 8, !tbaa !93
  %473 = load ptr, ptr %9, align 8, !tbaa !13
  %474 = ptrtoint ptr %473 to i64
  %475 = ptrtoint ptr %3 to i64
  %476 = sub i64 %474, %475
  %477 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 17
  %478 = load ptr, ptr %477, align 8, !tbaa !38
  store i64 %476, ptr %478, align 8, !tbaa !39
  %479 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 15
  store i32 0, ptr %479, align 8, !tbaa !37
  %480 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 16
  store i32 0, ptr %480, align 4, !tbaa !36
  %481 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 12
  %482 = load i32, ptr %481, align 8, !tbaa !92
  %483 = icmp sgt i32 %482, 0
  br i1 %483, label %484, label %513

484:                                              ; preds = %468
  %485 = and i32 %482, 7
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %495, label %487

487:                                              ; preds = %484, %487
  %488 = phi i32 [ %492, %487 ], [ %482, %484 ]
  %489 = phi ptr [ %491, %487 ], [ %478, %484 ]
  %490 = phi i32 [ %493, %487 ], [ 0, %484 ]
  %491 = getelementptr inbounds %struct.regexp_paren_pair, ptr %489, i64 1
  %492 = add nsw i32 %488, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %491, i8 -1, i64 16, i1 false)
  %493 = add i32 %490, 1
  %494 = icmp eq i32 %493, %485
  br i1 %494, label %495, label %487, !llvm.loop !94

495:                                              ; preds = %487, %484
  %496 = phi i32 [ %482, %484 ], [ %492, %487 ]
  %497 = phi ptr [ %478, %484 ], [ %491, %487 ]
  %498 = icmp ult i32 %482, 8
  br i1 %498, label %513, label %499

499:                                              ; preds = %495, %499
  %500 = phi i32 [ %510, %499 ], [ %496, %495 ]
  %501 = phi ptr [ %509, %499 ], [ %497, %495 ]
  %502 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %502, i8 -1, i64 16, i1 false)
  %503 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %503, i8 -1, i64 16, i1 false)
  %504 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %504, i8 -1, i64 16, i1 false)
  %505 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %505, i8 -1, i64 16, i1 false)
  %506 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %506, i8 -1, i64 16, i1 false)
  %507 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %507, i8 -1, i64 16, i1 false)
  %508 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %508, i8 -1, i64 16, i1 false)
  %509 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 8
  %510 = add nsw i32 %500, -8
  %511 = add i32 %500, -9
  %512 = icmp ult i32 %511, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %509, i8 -1, i64 16, i1 false)
  br i1 %512, label %499, label %513, !llvm.loop !96

513:                                              ; preds = %495, %499, %468
  %514 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %515 = getelementptr inbounds %struct.regexp_internal, ptr %471, i64 1
  %516 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %473, ptr noundef nonnull %515)
  %517 = icmp eq i64 %516, -1
  br i1 %517, label %518, label %1352

518:                                              ; preds = %513
  %519 = load ptr, ptr %472, align 8, !tbaa !93
  %520 = icmp eq ptr %519, null
  br i1 %520, label %522, label %521

521:                                              ; preds = %518
  store ptr %519, ptr %9, align 8, !tbaa !13
  br label %522

522:                                              ; preds = %521, %518
  %523 = phi ptr [ %519, %521 ], [ %473, %518 ]
  %524 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %525 = icmp sgt i32 %524, %514
  br i1 %525, label %526, label %527

526:                                              ; preds = %522
  call void @Perl_leave_scope(i32 noundef %514) #12
  br label %527

527:                                              ; preds = %526, %522
  %528 = load i32, ptr %29, align 4, !tbaa !19
  %529 = and i32 %528, 1024
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %1383, label %531

531:                                              ; preds = %527
  %532 = call i64 @llvm.usub.sat.i64(i64 %151, i64 1)
  %533 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %534 = icmp eq i8 %533, 0
  %535 = sub nsw i64 0, %532
  br i1 %534, label %538, label %536

536:                                              ; preds = %531
  %537 = call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef %535, ptr noundef %3)
  br label %540

538:                                              ; preds = %531
  %539 = getelementptr inbounds i8, ptr %2, i64 %535
  br label %540

540:                                              ; preds = %538, %536
  %541 = phi ptr [ %537, %536 ], [ %539, %538 ]
  %542 = getelementptr inbounds i8, ptr %541, i64 -1
  %543 = icmp ugt ptr %523, %542
  br i1 %543, label %1383, label %544

544:                                              ; preds = %540, %549
  %545 = phi ptr [ %550, %549 ], [ %523, %540 ]
  %546 = getelementptr inbounds i8, ptr %545, i64 1
  %547 = load i8, ptr %545, align 1, !tbaa !6
  %548 = icmp eq i8 %547, 10
  br i1 %548, label %552, label %549

549:                                              ; preds = %624, %618, %544
  %550 = phi ptr [ %546, %544 ], [ %621, %618 ], [ %621, %624 ]
  %551 = icmp ugt ptr %550, %542
  br i1 %551, label %1383, label %544, !llvm.loop !99

552:                                              ; preds = %544
  %553 = load ptr, ptr %216, align 8, !tbaa !43
  %554 = getelementptr inbounds %struct.reg_substr_data, ptr %553, i64 0, i32 1, i64 2, i32 2
  %555 = load ptr, ptr %554, align 8, !tbaa !100
  %556 = icmp eq ptr %555, null
  br i1 %556, label %557, label %561

557:                                              ; preds = %552
  %558 = getelementptr inbounds %struct.reg_substr_data, ptr %553, i64 0, i32 1, i64 2, i32 3
  %559 = load ptr, ptr %558, align 8, !tbaa !101
  %560 = icmp eq ptr %559, null
  br i1 %560, label %564, label %561

561:                                              ; preds = %557, %552
  %562 = call ptr @Perl_re_intuit_start(ptr noundef %0, ptr noundef %5, ptr noundef %3, ptr noundef nonnull %546, ptr noundef %2, i32 poison, ptr poison)
  %563 = icmp eq ptr %562, null
  br i1 %563, label %1383, label %564

564:                                              ; preds = %561, %557
  %565 = phi ptr [ %562, %561 ], [ %546, %557 ]
  %566 = load ptr, ptr %10, align 8, !tbaa !46
  %567 = getelementptr i8, ptr %566, i64 16
  %568 = load ptr, ptr %567, align 8, !tbaa !6
  %569 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 14
  %570 = load ptr, ptr %569, align 8, !tbaa !17
  store ptr null, ptr %472, align 8, !tbaa !93
  %571 = load ptr, ptr %248, align 8, !tbaa !53
  %572 = ptrtoint ptr %565 to i64
  %573 = ptrtoint ptr %571 to i64
  %574 = sub i64 %572, %573
  %575 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 17
  %576 = load ptr, ptr %575, align 8, !tbaa !38
  store i64 %574, ptr %576, align 8, !tbaa !39
  %577 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 15
  store i32 0, ptr %577, align 8, !tbaa !37
  %578 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 16
  store i32 0, ptr %578, align 4, !tbaa !36
  %579 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 12
  %580 = load i32, ptr %579, align 8, !tbaa !92
  %581 = icmp sgt i32 %580, 0
  br i1 %581, label %582, label %611

582:                                              ; preds = %564
  %583 = and i32 %580, 7
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %593, label %585

585:                                              ; preds = %582, %585
  %586 = phi i32 [ %590, %585 ], [ %580, %582 ]
  %587 = phi ptr [ %589, %585 ], [ %576, %582 ]
  %588 = phi i32 [ %591, %585 ], [ 0, %582 ]
  %589 = getelementptr inbounds %struct.regexp_paren_pair, ptr %587, i64 1
  %590 = add nsw i32 %586, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %589, i8 -1, i64 16, i1 false)
  %591 = add i32 %588, 1
  %592 = icmp eq i32 %591, %583
  br i1 %592, label %593, label %585, !llvm.loop !102

593:                                              ; preds = %585, %582
  %594 = phi i32 [ %580, %582 ], [ %590, %585 ]
  %595 = phi ptr [ %576, %582 ], [ %589, %585 ]
  %596 = icmp ult i32 %580, 8
  br i1 %596, label %611, label %597

597:                                              ; preds = %593, %597
  %598 = phi i32 [ %608, %597 ], [ %594, %593 ]
  %599 = phi ptr [ %607, %597 ], [ %595, %593 ]
  %600 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %600, i8 -1, i64 16, i1 false)
  %601 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %601, i8 -1, i64 16, i1 false)
  %602 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %602, i8 -1, i64 16, i1 false)
  %603 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %603, i8 -1, i64 16, i1 false)
  %604 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %604, i8 -1, i64 16, i1 false)
  %605 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %605, i8 -1, i64 16, i1 false)
  %606 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %606, i8 -1, i64 16, i1 false)
  %607 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 8
  %608 = add nsw i32 %598, -8
  %609 = add i32 %598, -9
  %610 = icmp ult i32 %609, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %607, i8 -1, i64 16, i1 false)
  br i1 %610, label %597, label %611, !llvm.loop !96

611:                                              ; preds = %593, %597, %564
  %612 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %613 = getelementptr inbounds %struct.regexp_internal, ptr %570, i64 1
  %614 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %565, ptr noundef nonnull %613)
  %615 = icmp eq i64 %614, -1
  br i1 %615, label %618, label %616

616:                                              ; preds = %611
  %617 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 17
  br label %1352

618:                                              ; preds = %611
  %619 = load ptr, ptr %472, align 8, !tbaa !93
  %620 = icmp eq ptr %619, null
  %621 = select i1 %620, ptr %565, ptr %619
  %622 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %623 = icmp sgt i32 %622, %612
  br i1 %623, label %624, label %549

624:                                              ; preds = %618
  call void @Perl_leave_scope(i32 noundef %612) #12
  br label %549

625:                                              ; preds = %463
  %626 = and i32 %465, 4096
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %634, label %628

628:                                              ; preds = %625
  %629 = load ptr, ptr %9, align 8, !tbaa !13
  %630 = icmp eq ptr %629, %149
  br i1 %630, label %631, label %1383

631:                                              ; preds = %628
  %632 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !5
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %1383, label %1357

634:                                              ; preds = %625
  %635 = load ptr, ptr %216, align 8, !tbaa !43
  %636 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 2
  %637 = load ptr, ptr %636, align 8, !tbaa !100
  %638 = icmp eq ptr %637, null
  br i1 %638, label %639, label %646

639:                                              ; preds = %634
  %640 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 3
  %641 = load ptr, ptr %640, align 8, !tbaa !101
  %642 = icmp eq ptr %641, null
  %643 = and i32 %465, 1
  %644 = icmp eq i32 %643, 0
  %645 = or i1 %644, %642
  br i1 %645, label %846, label %649

646:                                              ; preds = %634
  %647 = and i32 %465, 1
  %648 = icmp eq i32 %647, 0
  br i1 %648, label %862, label %650

649:                                              ; preds = %639
  br i1 %25, label %659, label %755

650:                                              ; preds = %646
  br i1 %25, label %651, label %761

651:                                              ; preds = %650
  %652 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 3
  %653 = load ptr, ptr %652, align 8, !tbaa !101
  %654 = icmp eq ptr %653, null
  br i1 %654, label %655, label %659

655:                                              ; preds = %651
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %656 = load ptr, ptr %216, align 8, !tbaa !43
  %657 = getelementptr inbounds %struct.reg_substr_data, ptr %656, i64 0, i32 1, i64 0, i32 3
  %658 = load ptr, ptr %657, align 8, !tbaa !101
  br label %659

659:                                              ; preds = %649, %655, %651
  %660 = phi ptr [ %658, %655 ], [ %653, %651 ], [ %641, %649 ]
  %661 = getelementptr inbounds %struct.sv, ptr %660, i64 0, i32 3
  %662 = load ptr, ptr %661, align 8, !tbaa !6
  %663 = load i8, ptr %662, align 1, !tbaa !6
  %664 = load ptr, ptr %9, align 8, !tbaa !13
  %665 = icmp ult ptr %664, %2
  br i1 %665, label %666, label %1383

666:                                              ; preds = %659
  %667 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  %668 = zext i8 %663 to i64
  %669 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %668
  br label %670

670:                                              ; preds = %666, %751
  %671 = phi ptr [ %664, %666 ], [ %753, %751 ]
  %672 = load i8, ptr %671, align 1, !tbaa !6
  %673 = icmp eq i8 %672, %663
  br i1 %673, label %674, label %751

674:                                              ; preds = %670
  %675 = load ptr, ptr %10, align 8, !tbaa !46
  %676 = getelementptr i8, ptr %675, i64 16
  %677 = load ptr, ptr %676, align 8, !tbaa !6
  %678 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 14
  %679 = load ptr, ptr %678, align 8, !tbaa !17
  store ptr null, ptr %667, align 8, !tbaa !93
  %680 = load ptr, ptr %248, align 8, !tbaa !53
  %681 = ptrtoint ptr %671 to i64
  %682 = ptrtoint ptr %680 to i64
  %683 = sub i64 %681, %682
  %684 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 17
  %685 = load ptr, ptr %684, align 8, !tbaa !38
  store i64 %683, ptr %685, align 8, !tbaa !39
  %686 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 15
  store i32 0, ptr %686, align 8, !tbaa !37
  %687 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 16
  store i32 0, ptr %687, align 4, !tbaa !36
  %688 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 12
  %689 = load i32, ptr %688, align 8, !tbaa !92
  %690 = icmp sgt i32 %689, 0
  br i1 %690, label %691, label %720

691:                                              ; preds = %674
  %692 = and i32 %689, 7
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %702, label %694

694:                                              ; preds = %691, %694
  %695 = phi i32 [ %699, %694 ], [ %689, %691 ]
  %696 = phi ptr [ %698, %694 ], [ %685, %691 ]
  %697 = phi i32 [ %700, %694 ], [ 0, %691 ]
  %698 = getelementptr inbounds %struct.regexp_paren_pair, ptr %696, i64 1
  %699 = add nsw i32 %695, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %698, i8 -1, i64 16, i1 false)
  %700 = add i32 %697, 1
  %701 = icmp eq i32 %700, %692
  br i1 %701, label %702, label %694, !llvm.loop !103

702:                                              ; preds = %694, %691
  %703 = phi i32 [ %689, %691 ], [ %699, %694 ]
  %704 = phi ptr [ %685, %691 ], [ %698, %694 ]
  %705 = icmp ult i32 %689, 8
  br i1 %705, label %720, label %706

706:                                              ; preds = %702, %706
  %707 = phi i32 [ %717, %706 ], [ %703, %702 ]
  %708 = phi ptr [ %716, %706 ], [ %704, %702 ]
  %709 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %709, i8 -1, i64 16, i1 false)
  %710 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %710, i8 -1, i64 16, i1 false)
  %711 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %711, i8 -1, i64 16, i1 false)
  %712 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %712, i8 -1, i64 16, i1 false)
  %713 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %713, i8 -1, i64 16, i1 false)
  %714 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %714, i8 -1, i64 16, i1 false)
  %715 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %715, i8 -1, i64 16, i1 false)
  %716 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 8
  %717 = add nsw i32 %707, -8
  %718 = add i32 %707, -9
  %719 = icmp ult i32 %718, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %716, i8 -1, i64 16, i1 false)
  br i1 %719, label %706, label %720, !llvm.loop !96

720:                                              ; preds = %702, %706, %674
  %721 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %722 = getelementptr inbounds %struct.regexp_internal, ptr %679, i64 1
  %723 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef nonnull %671, ptr noundef nonnull %722)
  %724 = icmp eq i64 %723, -1
  br i1 %724, label %725, label %732

725:                                              ; preds = %720
  %726 = load ptr, ptr %667, align 8, !tbaa !93
  %727 = icmp eq ptr %726, null
  %728 = select i1 %727, ptr %671, ptr %726
  %729 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %730 = icmp sgt i32 %729, %721
  br i1 %730, label %731, label %734

731:                                              ; preds = %725
  call void @Perl_leave_scope(i32 noundef %721) #12
  br label %734

732:                                              ; preds = %720
  %733 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 17
  br label %1352

734:                                              ; preds = %731, %725
  %735 = load i8, ptr %728, align 1, !tbaa !6
  %736 = zext i8 %735 to i64
  %737 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %736
  %738 = load i8, ptr %737, align 1, !tbaa !6
  %739 = zext i8 %738 to i64
  %740 = getelementptr inbounds i8, ptr %728, i64 %739
  %741 = icmp ult ptr %740, %2
  br i1 %741, label %742, label %751

742:                                              ; preds = %734, %746
  %743 = phi ptr [ %749, %746 ], [ %740, %734 ]
  %744 = load i8, ptr %743, align 1, !tbaa !6
  %745 = icmp eq i8 %744, %663
  br i1 %745, label %746, label %751

746:                                              ; preds = %742
  %747 = load i8, ptr %669, align 1, !tbaa !6
  %748 = zext i8 %747 to i64
  %749 = getelementptr inbounds i8, ptr %743, i64 %748
  %750 = icmp ult ptr %749, %2
  br i1 %750, label %742, label %751, !llvm.loop !104

751:                                              ; preds = %746, %742, %734, %670
  %752 = phi ptr [ %671, %670 ], [ %740, %734 ], [ %749, %746 ], [ %743, %742 ]
  %753 = getelementptr inbounds i8, ptr %752, i64 1
  %754 = icmp ult ptr %753, %2
  br i1 %754, label %670, label %1383, !llvm.loop !105

755:                                              ; preds = %649
  %756 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %756, label %757, label %1383

757:                                              ; preds = %755
  %758 = load ptr, ptr %216, align 8, !tbaa !43
  %759 = getelementptr inbounds %struct.reg_substr_data, ptr %758, i64 0, i32 1, i64 0, i32 2
  %760 = load ptr, ptr %759, align 8, !tbaa !100
  br label %761

761:                                              ; preds = %757, %650
  %762 = phi ptr [ %760, %757 ], [ %637, %650 ]
  %763 = getelementptr inbounds %struct.sv, ptr %762, i64 0, i32 3
  %764 = load ptr, ptr %763, align 8, !tbaa !6
  %765 = load i8, ptr %764, align 1, !tbaa !6
  %766 = load ptr, ptr %9, align 8, !tbaa !13
  %767 = icmp ult ptr %766, %2
  br i1 %767, label %768, label %1383

768:                                              ; preds = %761
  %769 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  br label %770

770:                                              ; preds = %768, %842
  %771 = phi ptr [ %766, %768 ], [ %844, %842 ]
  %772 = load i8, ptr %771, align 1, !tbaa !6
  %773 = icmp eq i8 %772, %765
  br i1 %773, label %774, label %842

774:                                              ; preds = %770
  %775 = load ptr, ptr %10, align 8, !tbaa !46
  %776 = getelementptr i8, ptr %775, i64 16
  %777 = load ptr, ptr %776, align 8, !tbaa !6
  %778 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 14
  %779 = load ptr, ptr %778, align 8, !tbaa !17
  store ptr null, ptr %769, align 8, !tbaa !93
  %780 = load ptr, ptr %248, align 8, !tbaa !53
  %781 = ptrtoint ptr %771 to i64
  %782 = ptrtoint ptr %780 to i64
  %783 = sub i64 %781, %782
  %784 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 17
  %785 = load ptr, ptr %784, align 8, !tbaa !38
  store i64 %783, ptr %785, align 8, !tbaa !39
  %786 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 15
  store i32 0, ptr %786, align 8, !tbaa !37
  %787 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 16
  store i32 0, ptr %787, align 4, !tbaa !36
  %788 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 12
  %789 = load i32, ptr %788, align 8, !tbaa !92
  %790 = icmp sgt i32 %789, 0
  br i1 %790, label %791, label %820

791:                                              ; preds = %774
  %792 = and i32 %789, 7
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %802, label %794

794:                                              ; preds = %791, %794
  %795 = phi i32 [ %799, %794 ], [ %789, %791 ]
  %796 = phi ptr [ %798, %794 ], [ %785, %791 ]
  %797 = phi i32 [ %800, %794 ], [ 0, %791 ]
  %798 = getelementptr inbounds %struct.regexp_paren_pair, ptr %796, i64 1
  %799 = add nsw i32 %795, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %798, i8 -1, i64 16, i1 false)
  %800 = add i32 %797, 1
  %801 = icmp eq i32 %800, %792
  br i1 %801, label %802, label %794, !llvm.loop !106

802:                                              ; preds = %794, %791
  %803 = phi i32 [ %789, %791 ], [ %799, %794 ]
  %804 = phi ptr [ %785, %791 ], [ %798, %794 ]
  %805 = icmp ult i32 %789, 8
  br i1 %805, label %820, label %806

806:                                              ; preds = %802, %806
  %807 = phi i32 [ %817, %806 ], [ %803, %802 ]
  %808 = phi ptr [ %816, %806 ], [ %804, %802 ]
  %809 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %809, i8 -1, i64 16, i1 false)
  %810 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %810, i8 -1, i64 16, i1 false)
  %811 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %811, i8 -1, i64 16, i1 false)
  %812 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %812, i8 -1, i64 16, i1 false)
  %813 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %813, i8 -1, i64 16, i1 false)
  %814 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %814, i8 -1, i64 16, i1 false)
  %815 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %815, i8 -1, i64 16, i1 false)
  %816 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 8
  %817 = add nsw i32 %807, -8
  %818 = add i32 %807, -9
  %819 = icmp ult i32 %818, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %816, i8 -1, i64 16, i1 false)
  br i1 %819, label %806, label %820, !llvm.loop !96

820:                                              ; preds = %802, %806, %774
  %821 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %822 = getelementptr inbounds %struct.regexp_internal, ptr %779, i64 1
  %823 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef nonnull %771, ptr noundef nonnull %822)
  %824 = icmp eq i64 %823, -1
  br i1 %824, label %825, label %833

825:                                              ; preds = %820
  %826 = load ptr, ptr %769, align 8, !tbaa !93
  %827 = icmp eq ptr %826, null
  %828 = select i1 %827, ptr %771, ptr %826
  %829 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %830 = icmp sgt i32 %829, %821
  br i1 %830, label %832, label %831

831:                                              ; preds = %832, %825
  br label %835

832:                                              ; preds = %825
  call void @Perl_leave_scope(i32 noundef %821) #12
  br label %831

833:                                              ; preds = %820
  %834 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 17
  br label %1352

835:                                              ; preds = %831, %839
  %836 = phi ptr [ %837, %839 ], [ %828, %831 ]
  %837 = getelementptr inbounds i8, ptr %836, i64 1
  %838 = icmp ult ptr %837, %2
  br i1 %838, label %839, label %842

839:                                              ; preds = %835
  %840 = load i8, ptr %837, align 1, !tbaa !6
  %841 = icmp eq i8 %840, %765
  br i1 %841, label %835, label %842, !llvm.loop !107

842:                                              ; preds = %839, %835, %770
  %843 = phi ptr [ %771, %770 ], [ %837, %835 ], [ %837, %839 ]
  %844 = getelementptr inbounds i8, ptr %843, i64 1
  %845 = icmp ult ptr %844, %2
  br i1 %845, label %770, label %1383, !llvm.loop !108

846:                                              ; preds = %639
  br i1 %642, label %847, label %863

847:                                              ; preds = %846
  %848 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 2
  %849 = load ptr, ptr %848, align 8, !tbaa !100
  %850 = icmp eq ptr %849, null
  br i1 %850, label %851, label %855

851:                                              ; preds = %847
  %852 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %853 = load ptr, ptr %852, align 8, !tbaa !101
  %854 = icmp eq ptr %853, null
  br i1 %854, label %1209, label %855

855:                                              ; preds = %851, %847
  %856 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 1
  %857 = load i64, ptr %856, align 8, !tbaa !109
  %858 = load ptr, ptr %9, align 8, !tbaa !13
  %859 = ptrtoint ptr %858 to i64
  %860 = sub i64 %213, %859
  %861 = icmp slt i64 %857, %860
  br i1 %861, label %885, label %1205

862:                                              ; preds = %646
  br i1 %25, label %864, label %877

863:                                              ; preds = %846
  br i1 %25, label %870, label %873

864:                                              ; preds = %862
  %865 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 3
  %866 = load ptr, ptr %865, align 8, !tbaa !101
  %867 = icmp eq ptr %866, null
  br i1 %867, label %868, label %870

868:                                              ; preds = %864
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %869 = load ptr, ptr %216, align 8, !tbaa !43
  br label %870

870:                                              ; preds = %863, %868, %864
  %871 = phi ptr [ %869, %868 ], [ %635, %864 ], [ %635, %863 ]
  %872 = getelementptr inbounds %struct.reg_substr_data, ptr %871, i64 0, i32 1, i64 0, i32 3
  br label %880

873:                                              ; preds = %863
  %874 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %874, label %875, label %1383

875:                                              ; preds = %873
  %876 = load ptr, ptr %216, align 8, !tbaa !43
  br label %877

877:                                              ; preds = %862, %875
  %878 = phi ptr [ %876, %875 ], [ %635, %862 ]
  %879 = getelementptr inbounds %struct.reg_substr_data, ptr %878, i64 0, i32 1, i64 0, i32 2
  br label %880

880:                                              ; preds = %877, %870
  %881 = phi ptr [ %871, %870 ], [ %878, %877 ]
  %882 = phi ptr [ %872, %870 ], [ %879, %877 ]
  %883 = getelementptr inbounds %struct.reg_substr_data, ptr %881, i64 0, i32 1
  %884 = load i64, ptr %883, align 8, !tbaa !44
  br label %913

885:                                              ; preds = %855
  br i1 %25, label %886, label %895

886:                                              ; preds = %885
  %887 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %888 = load ptr, ptr %887, align 8, !tbaa !101
  %889 = icmp eq ptr %888, null
  br i1 %889, label %890, label %892

890:                                              ; preds = %886
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %891 = load ptr, ptr %216, align 8, !tbaa !43
  br label %892

892:                                              ; preds = %890, %886
  %893 = phi ptr [ %891, %890 ], [ %635, %886 ]
  %894 = getelementptr inbounds %struct.reg_substr_data, ptr %893, i64 0, i32 1, i64 1, i32 3
  br label %906

895:                                              ; preds = %885
  %896 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 2
  %897 = load ptr, ptr %896, align 8, !tbaa !100
  %898 = icmp eq ptr %897, null
  br i1 %898, label %899, label %903

899:                                              ; preds = %895
  %900 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %900, label %901, label %1383

901:                                              ; preds = %899
  %902 = load ptr, ptr %216, align 8, !tbaa !43
  br label %903

903:                                              ; preds = %901, %895
  %904 = phi ptr [ %902, %901 ], [ %635, %895 ]
  %905 = getelementptr inbounds %struct.reg_substr_data, ptr %904, i64 0, i32 1, i64 1, i32 2
  br label %906

906:                                              ; preds = %903, %892
  %907 = phi ptr [ %893, %892 ], [ %904, %903 ]
  %908 = phi ptr [ %894, %892 ], [ %905, %903 ]
  %909 = getelementptr inbounds %struct.reg_substr_data, ptr %907, i64 0, i32 1, i64 1
  %910 = getelementptr inbounds %struct.reg_substr_data, ptr %907, i64 0, i32 1, i64 1, i32 1
  %911 = load i64, ptr %910, align 8, !tbaa !109
  %912 = load i64, ptr %909, align 8, !tbaa !44
  br label %913

913:                                              ; preds = %906, %880
  %914 = phi ptr [ %882, %880 ], [ %908, %906 ]
  %915 = phi i64 [ %884, %880 ], [ %911, %906 ]
  %916 = phi i64 [ %884, %880 ], [ %912, %906 ]
  %917 = sub i64 0, %916
  %918 = load ptr, ptr %914, align 8, !tbaa !13
  %919 = icmp slt i64 %916, 0
  br i1 %919, label %955, label %920

920:                                              ; preds = %913
  %921 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %922 = icmp eq i8 %921, 0
  br i1 %922, label %939, label %923

923:                                              ; preds = %920
  br i1 %25, label %924, label %926

924:                                              ; preds = %923
  %925 = tail call i64 @Perl_sv_len_utf8(ptr noundef %918) #12
  br label %930

926:                                              ; preds = %923
  %927 = load ptr, ptr %918, align 8, !tbaa !24
  %928 = getelementptr inbounds %struct.xpv, ptr %927, i64 0, i32 2
  %929 = load i64, ptr %928, align 8, !tbaa !110
  br label %930

930:                                              ; preds = %926, %924
  %931 = phi i64 [ %925, %924 ], [ %929, %926 ]
  %932 = getelementptr inbounds %struct.sv, ptr %918, i64 0, i32 2
  %933 = load i32, ptr %932, align 4, !tbaa !9
  %934 = icmp ugt i32 %933, -1073741825
  %935 = zext i1 %934 to i64
  %936 = add i64 %931, %916
  %937 = sub i64 %935, %936
  %938 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef %937, ptr noundef %3)
  br label %955

939:                                              ; preds = %920
  br i1 %25, label %940, label %942

940:                                              ; preds = %939
  %941 = tail call i64 @Perl_sv_len_utf8(ptr noundef %918) #12
  br label %946

942:                                              ; preds = %939
  %943 = load ptr, ptr %918, align 8, !tbaa !24
  %944 = getelementptr inbounds %struct.xpv, ptr %943, i64 0, i32 2
  %945 = load i64, ptr %944, align 8, !tbaa !110
  br label %946

946:                                              ; preds = %942, %940
  %947 = phi i64 [ %941, %940 ], [ %945, %942 ]
  %948 = getelementptr inbounds %struct.sv, ptr %918, i64 0, i32 2
  %949 = load i32, ptr %948, align 4, !tbaa !9
  %950 = icmp ugt i32 %949, -1073741825
  %951 = zext i1 %950 to i64
  %952 = add i64 %947, %916
  %953 = sub i64 %951, %952
  %954 = getelementptr inbounds i8, ptr %2, i64 %953
  br label %955

955:                                              ; preds = %930, %946, %913
  %956 = phi ptr [ %2, %913 ], [ %938, %930 ], [ %954, %946 ]
  %957 = load ptr, ptr %9, align 8, !tbaa !13
  %958 = icmp ugt ptr %957, %3
  br i1 %958, label %959, label %966

959:                                              ; preds = %955
  %960 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %961 = icmp eq i8 %960, 0
  br i1 %961, label %964, label %962

962:                                              ; preds = %959
  %963 = tail call fastcc ptr @S_reghop3(ptr noundef nonnull %957, i64 noundef -1, ptr noundef %3)
  br label %968

964:                                              ; preds = %959
  %965 = getelementptr inbounds i8, ptr %957, i64 -1
  br label %968

966:                                              ; preds = %955
  %967 = getelementptr inbounds i8, ptr %957, i64 -1
  br label %968

968:                                              ; preds = %966, %962, %964
  %969 = phi ptr [ %965, %964 ], [ %963, %962 ], [ %967, %966 ]
  %970 = icmp ugt ptr %957, %956
  br i1 %970, label %1383, label %971

971:                                              ; preds = %968
  %972 = sub nsw i64 0, %915
  %973 = icmp slt i64 %915, 1
  %974 = icmp slt i64 %916, 1
  %975 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  br label %976

976:                                              ; preds = %971, %1202
  %977 = phi ptr [ %957, %971 ], [ %1203, %1202 ]
  %978 = phi ptr [ %969, %971 ], [ %1057, %1202 ]
  %979 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %980 = icmp eq i8 %979, 0
  br i1 %980, label %983, label %981

981:                                              ; preds = %976
  %982 = call fastcc ptr @S_reghop4(ptr noundef %977, i64 noundef %916, ptr noundef %3, ptr noundef %2)
  br label %985

983:                                              ; preds = %976
  %984 = getelementptr inbounds i8, ptr %977, i64 %916
  br label %985

985:                                              ; preds = %983, %981
  %986 = phi ptr [ %982, %981 ], [ %984, %983 ]
  %987 = call ptr @Perl_fbm_instr(ptr noundef %986, ptr noundef %2, ptr noundef %918, i32 noundef %212) #12
  store ptr %987, ptr %9, align 8, !tbaa !13
  %988 = icmp eq ptr %987, null
  br i1 %988, label %1383, label %989

989:                                              ; preds = %985
  %990 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %991 = icmp eq i8 %990, 0
  br i1 %991, label %997, label %992

992:                                              ; preds = %989
  %993 = load ptr, ptr %251, align 8
  %994 = load ptr, ptr %248, align 8
  %995 = select i1 %973, ptr %993, ptr %994
  %996 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %972, ptr noundef %995)
  br label %999

997:                                              ; preds = %989
  %998 = getelementptr inbounds i8, ptr %987, i64 %972
  br label %999

999:                                              ; preds = %997, %992
  %1000 = phi ptr [ %996, %992 ], [ %998, %997 ]
  %1001 = icmp ugt ptr %1000, %978
  br i1 %1001, label %1002, label %1022

1002:                                             ; preds = %999
  %1003 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %1004 = icmp eq i8 %1003, 0
  br i1 %1004, label %1005, label %1007

1005:                                             ; preds = %1002
  %1006 = getelementptr inbounds i8, ptr %987, i64 %917
  br label %1019

1007:                                             ; preds = %1002
  %1008 = load ptr, ptr %251, align 8
  %1009 = load ptr, ptr %248, align 8
  %1010 = select i1 %974, ptr %1008, ptr %1009
  %1011 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %917, ptr noundef %1010)
  %1012 = load i8, ptr %240, align 2, !tbaa !48
  %1013 = icmp eq i8 %1012, 0
  br i1 %1013, label %1019, label %1014

1014:                                             ; preds = %1007
  %1015 = load ptr, ptr %251, align 8
  %1016 = load ptr, ptr %248, align 8
  %1017 = select i1 %973, ptr %1015, ptr %1016
  %1018 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %972, ptr noundef %1017)
  br label %1055

1019:                                             ; preds = %1005, %1007
  %1020 = phi ptr [ %1006, %1005 ], [ %1011, %1007 ]
  %1021 = getelementptr inbounds i8, ptr %987, i64 %972
  br label %1055

1022:                                             ; preds = %999
  %1023 = load ptr, ptr %248, align 8
  %1024 = icmp ult ptr %978, %1023
  br i1 %1024, label %1040, label %1025

1025:                                             ; preds = %1022
  %1026 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %1027 = icmp eq i8 %1026, 0
  br i1 %1027, label %1038, label %1028

1028:                                             ; preds = %1025
  %1029 = load ptr, ptr %251, align 8
  %1030 = icmp ult ptr %978, %1029
  br i1 %1030, label %1031, label %1047

1031:                                             ; preds = %1028
  %1032 = load i8, ptr %978, align 1, !tbaa !6
  %1033 = zext i8 %1032 to i64
  %1034 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1033
  %1035 = load i8, ptr %1034, align 1, !tbaa !6
  %1036 = zext i8 %1035 to i64
  %1037 = getelementptr inbounds i8, ptr %978, i64 %1036
  br label %1044

1038:                                             ; preds = %1025
  %1039 = getelementptr inbounds i8, ptr %978, i64 1
  br label %1052

1040:                                             ; preds = %1022
  %1041 = getelementptr inbounds i8, ptr %978, i64 1
  %1042 = load i8, ptr %240, align 2, !tbaa !48
  %1043 = icmp eq i8 %1042, 0
  br i1 %1043, label %1052, label %1044

1044:                                             ; preds = %1031, %1040
  %1045 = phi ptr [ %1037, %1031 ], [ %1041, %1040 ]
  %1046 = load ptr, ptr %251, align 8
  br label %1047

1047:                                             ; preds = %1044, %1028
  %1048 = phi ptr [ %1046, %1044 ], [ %1029, %1028 ]
  %1049 = phi ptr [ %1045, %1044 ], [ %978, %1028 ]
  %1050 = select i1 %974, ptr %1048, ptr %1023
  %1051 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %917, ptr noundef %1050)
  br label %1055

1052:                                             ; preds = %1038, %1040
  %1053 = phi ptr [ %1039, %1038 ], [ %1041, %1040 ]
  %1054 = getelementptr inbounds i8, ptr %987, i64 %917
  br label %1055

1055:                                             ; preds = %1047, %1052, %1014, %1019
  %1056 = phi ptr [ %1018, %1014 ], [ %1021, %1019 ], [ %1053, %1052 ], [ %1049, %1047 ]
  %1057 = phi ptr [ %1011, %1014 ], [ %1020, %1019 ], [ %1054, %1052 ], [ %1051, %1047 ]
  store ptr %1056, ptr %9, align 8, !tbaa !13
  %1058 = icmp ugt ptr %1056, %1057
  br i1 %25, label %1060, label %1059

1059:                                             ; preds = %1055
  br i1 %1058, label %1200, label %1134

1060:                                             ; preds = %1055
  br i1 %1058, label %1198, label %1061

1061:                                             ; preds = %1060, %1126
  %1062 = phi ptr [ %1132, %1126 ], [ %1056, %1060 ]
  %1063 = load ptr, ptr %10, align 8, !tbaa !46
  %1064 = getelementptr i8, ptr %1063, i64 16
  %1065 = load ptr, ptr %1064, align 8, !tbaa !6
  %1066 = getelementptr inbounds %struct.regexp, ptr %1065, i64 0, i32 14
  %1067 = load ptr, ptr %1066, align 8, !tbaa !17
  store ptr null, ptr %975, align 8, !tbaa !93
  %1068 = load ptr, ptr %248, align 8, !tbaa !53
  %1069 = ptrtoint ptr %1062 to i64
  %1070 = ptrtoint ptr %1068 to i64
  %1071 = sub i64 %1069, %1070
  %1072 = getelementptr inbounds %struct.regexp, ptr %1065, i64 0, i32 17
  %1073 = load ptr, ptr %1072, align 8, !tbaa !38
  store i64 %1071, ptr %1073, align 8, !tbaa !39
  %1074 = getelementptr inbounds %struct.regexp, ptr %1065, i64 0, i32 15
  store i32 0, ptr %1074, align 8, !tbaa !37
  %1075 = getelementptr inbounds %struct.regexp, ptr %1065, i64 0, i32 16
  store i32 0, ptr %1075, align 4, !tbaa !36
  %1076 = getelementptr inbounds %struct.regexp, ptr %1065, i64 0, i32 12
  %1077 = load i32, ptr %1076, align 8, !tbaa !92
  %1078 = icmp sgt i32 %1077, 0
  br i1 %1078, label %1079, label %1108

1079:                                             ; preds = %1061
  %1080 = and i32 %1077, 7
  %1081 = icmp eq i32 %1080, 0
  br i1 %1081, label %1090, label %1082

1082:                                             ; preds = %1079, %1082
  %1083 = phi i32 [ %1087, %1082 ], [ %1077, %1079 ]
  %1084 = phi ptr [ %1086, %1082 ], [ %1073, %1079 ]
  %1085 = phi i32 [ %1088, %1082 ], [ 0, %1079 ]
  %1086 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1084, i64 1
  %1087 = add nsw i32 %1083, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1086, i8 -1, i64 16, i1 false)
  %1088 = add i32 %1085, 1
  %1089 = icmp eq i32 %1088, %1080
  br i1 %1089, label %1090, label %1082, !llvm.loop !112

1090:                                             ; preds = %1082, %1079
  %1091 = phi i32 [ %1077, %1079 ], [ %1087, %1082 ]
  %1092 = phi ptr [ %1073, %1079 ], [ %1086, %1082 ]
  %1093 = icmp ult i32 %1077, 8
  br i1 %1093, label %1108, label %1094

1094:                                             ; preds = %1090, %1094
  %1095 = phi i32 [ %1105, %1094 ], [ %1091, %1090 ]
  %1096 = phi ptr [ %1104, %1094 ], [ %1092, %1090 ]
  %1097 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1097, i8 -1, i64 16, i1 false)
  %1098 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1098, i8 -1, i64 16, i1 false)
  %1099 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1099, i8 -1, i64 16, i1 false)
  %1100 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1100, i8 -1, i64 16, i1 false)
  %1101 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1101, i8 -1, i64 16, i1 false)
  %1102 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1102, i8 -1, i64 16, i1 false)
  %1103 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1103, i8 -1, i64 16, i1 false)
  %1104 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1096, i64 8
  %1105 = add nsw i32 %1095, -8
  %1106 = add i32 %1095, -9
  %1107 = icmp ult i32 %1106, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1104, i8 -1, i64 16, i1 false)
  br i1 %1107, label %1094, label %1108, !llvm.loop !96

1108:                                             ; preds = %1090, %1094, %1061
  %1109 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1110 = getelementptr inbounds %struct.regexp_internal, ptr %1067, i64 1
  %1111 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %1062, ptr noundef nonnull %1110)
  %1112 = icmp eq i64 %1111, -1
  br i1 %1112, label %1113, label %1120

1113:                                             ; preds = %1108
  %1114 = load ptr, ptr %975, align 8, !tbaa !93
  %1115 = icmp eq ptr %1114, null
  %1116 = select i1 %1115, ptr %1062, ptr %1114
  %1117 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1118 = icmp sgt i32 %1117, %1109
  br i1 %1118, label %1119, label %1122

1119:                                             ; preds = %1113
  call void @Perl_leave_scope(i32 noundef %1109) #12
  br label %1122

1120:                                             ; preds = %1108
  %1121 = getelementptr inbounds %struct.regexp, ptr %1065, i64 0, i32 17
  br label %1352

1122:                                             ; preds = %1119, %1113
  %1123 = icmp ult ptr %1116, %1057
  br i1 %1123, label %1126, label %1124

1124:                                             ; preds = %1122
  %1125 = getelementptr inbounds i8, ptr %1116, i64 1
  store ptr %1125, ptr %9, align 8, !tbaa !13
  br label %1202

1126:                                             ; preds = %1122
  %1127 = load i8, ptr %1116, align 1, !tbaa !6
  %1128 = zext i8 %1127 to i64
  %1129 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1128
  %1130 = load i8, ptr %1129, align 1, !tbaa !6
  %1131 = zext i8 %1130 to i64
  %1132 = getelementptr inbounds i8, ptr %1116, i64 %1131
  %1133 = icmp ugt ptr %1132, %1057
  br i1 %1133, label %1198, label %1061, !llvm.loop !113

1134:                                             ; preds = %1059, %1195
  %1135 = phi ptr [ %1196, %1195 ], [ %1056, %1059 ]
  %1136 = load ptr, ptr %10, align 8, !tbaa !46
  %1137 = getelementptr i8, ptr %1136, i64 16
  %1138 = load ptr, ptr %1137, align 8, !tbaa !6
  %1139 = getelementptr inbounds %struct.regexp, ptr %1138, i64 0, i32 14
  %1140 = load ptr, ptr %1139, align 8, !tbaa !17
  store ptr null, ptr %975, align 8, !tbaa !93
  %1141 = load ptr, ptr %248, align 8, !tbaa !53
  %1142 = ptrtoint ptr %1135 to i64
  %1143 = ptrtoint ptr %1141 to i64
  %1144 = sub i64 %1142, %1143
  %1145 = getelementptr inbounds %struct.regexp, ptr %1138, i64 0, i32 17
  %1146 = load ptr, ptr %1145, align 8, !tbaa !38
  store i64 %1144, ptr %1146, align 8, !tbaa !39
  %1147 = getelementptr inbounds %struct.regexp, ptr %1138, i64 0, i32 15
  store i32 0, ptr %1147, align 8, !tbaa !37
  %1148 = getelementptr inbounds %struct.regexp, ptr %1138, i64 0, i32 16
  store i32 0, ptr %1148, align 4, !tbaa !36
  %1149 = getelementptr inbounds %struct.regexp, ptr %1138, i64 0, i32 12
  %1150 = load i32, ptr %1149, align 8, !tbaa !92
  %1151 = icmp sgt i32 %1150, 0
  br i1 %1151, label %1152, label %1181

1152:                                             ; preds = %1134
  %1153 = and i32 %1150, 7
  %1154 = icmp eq i32 %1153, 0
  br i1 %1154, label %1163, label %1155

1155:                                             ; preds = %1152, %1155
  %1156 = phi i32 [ %1160, %1155 ], [ %1150, %1152 ]
  %1157 = phi ptr [ %1159, %1155 ], [ %1146, %1152 ]
  %1158 = phi i32 [ %1161, %1155 ], [ 0, %1152 ]
  %1159 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1157, i64 1
  %1160 = add nsw i32 %1156, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1159, i8 -1, i64 16, i1 false)
  %1161 = add i32 %1158, 1
  %1162 = icmp eq i32 %1161, %1153
  br i1 %1162, label %1163, label %1155, !llvm.loop !114

1163:                                             ; preds = %1155, %1152
  %1164 = phi i32 [ %1150, %1152 ], [ %1160, %1155 ]
  %1165 = phi ptr [ %1146, %1152 ], [ %1159, %1155 ]
  %1166 = icmp ult i32 %1150, 8
  br i1 %1166, label %1181, label %1167

1167:                                             ; preds = %1163, %1167
  %1168 = phi i32 [ %1178, %1167 ], [ %1164, %1163 ]
  %1169 = phi ptr [ %1177, %1167 ], [ %1165, %1163 ]
  %1170 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1170, i8 -1, i64 16, i1 false)
  %1171 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1171, i8 -1, i64 16, i1 false)
  %1172 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1172, i8 -1, i64 16, i1 false)
  %1173 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1173, i8 -1, i64 16, i1 false)
  %1174 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1174, i8 -1, i64 16, i1 false)
  %1175 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1175, i8 -1, i64 16, i1 false)
  %1176 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1176, i8 -1, i64 16, i1 false)
  %1177 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1169, i64 8
  %1178 = add nsw i32 %1168, -8
  %1179 = add i32 %1168, -9
  %1180 = icmp ult i32 %1179, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1177, i8 -1, i64 16, i1 false)
  br i1 %1180, label %1167, label %1181, !llvm.loop !96

1181:                                             ; preds = %1163, %1167, %1134
  %1182 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1183 = getelementptr inbounds %struct.regexp_internal, ptr %1140, i64 1
  %1184 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %1135, ptr noundef nonnull %1183)
  %1185 = icmp eq i64 %1184, -1
  br i1 %1185, label %1186, label %1193

1186:                                             ; preds = %1181
  %1187 = load ptr, ptr %975, align 8, !tbaa !93
  %1188 = icmp eq ptr %1187, null
  %1189 = select i1 %1188, ptr %1135, ptr %1187
  %1190 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1191 = icmp sgt i32 %1190, %1182
  br i1 %1191, label %1192, label %1195

1192:                                             ; preds = %1186
  call void @Perl_leave_scope(i32 noundef %1182) #12
  br label %1195

1193:                                             ; preds = %1181
  %1194 = getelementptr inbounds %struct.regexp, ptr %1138, i64 0, i32 17
  br label %1352

1195:                                             ; preds = %1192, %1186
  %1196 = getelementptr inbounds i8, ptr %1189, i64 1
  %1197 = icmp ugt ptr %1196, %1057
  br i1 %1197, label %1200, label %1134, !llvm.loop !115

1198:                                             ; preds = %1126, %1060
  %1199 = phi ptr [ %1056, %1060 ], [ %1132, %1126 ]
  store ptr %1199, ptr %9, align 8, !tbaa !13
  br label %1202

1200:                                             ; preds = %1195, %1059
  %1201 = phi ptr [ %1056, %1059 ], [ %1196, %1195 ]
  store ptr %1201, ptr %9, align 8, !tbaa !13
  br label %1202

1202:                                             ; preds = %1200, %1198, %1124
  %1203 = phi ptr [ %1201, %1200 ], [ %1199, %1198 ], [ %1125, %1124 ]
  %1204 = icmp ugt ptr %1203, %956
  br i1 %1204, label %1383, label %976, !llvm.loop !116

1205:                                             ; preds = %855
  %1206 = getelementptr inbounds %struct.regexp_internal, ptr %28, i64 0, i32 2
  %1207 = load ptr, ptr %1206, align 8, !tbaa !117
  %1208 = icmp eq ptr %1207, null
  br i1 %1208, label %1242, label %1213

1209:                                             ; preds = %851
  %1210 = getelementptr inbounds %struct.regexp_internal, ptr %28, i64 0, i32 2
  %1211 = load ptr, ptr %1210, align 8, !tbaa !117
  %1212 = icmp eq ptr %1211, null
  br i1 %1212, label %1321, label %1213

1213:                                             ; preds = %1209, %1205
  %1214 = phi ptr [ %1211, %1209 ], [ %1207, %1205 ]
  %1215 = icmp eq i64 %151, 0
  br i1 %1215, label %1237, label %1216

1216:                                             ; preds = %1213
  %1217 = getelementptr inbounds %struct.regnode, ptr %1214, i64 0, i32 1
  %1218 = load i8, ptr %1217, align 1, !tbaa !119
  %1219 = freeze i8 %1218
  %1220 = icmp eq i8 %1219, 18
  br i1 %1220, label %1237, label %1221

1221:                                             ; preds = %1216
  %1222 = zext i8 %1219 to i64
  %1223 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %1222
  %1224 = load i8, ptr %1223, align 1, !tbaa !6
  switch i8 %1224, label %1225 [
    i8 72, label %1237
    i8 31, label %1237
  ]

1225:                                             ; preds = %1221
  %1226 = load i8, ptr %240, align 2, !tbaa !48, !range !97, !noundef !98
  %1227 = icmp eq i8 %1226, 0
  %1228 = sub nsw i64 1, %151
  br i1 %1227, label %1235, label %1229

1229:                                             ; preds = %1225
  %1230 = icmp slt i64 %151, 2
  %1231 = load ptr, ptr %251, align 8
  %1232 = load ptr, ptr %248, align 8
  %1233 = select i1 %1230, ptr %1231, ptr %1232
  %1234 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef %1228, ptr noundef %1233)
  br label %1237

1235:                                             ; preds = %1225
  %1236 = getelementptr inbounds i8, ptr %2, i64 %1228
  br label %1237

1237:                                             ; preds = %1221, %1221, %1216, %1235, %1229, %1213
  %1238 = phi ptr [ %2, %1213 ], [ %2, %1221 ], [ %1234, %1229 ], [ %1236, %1235 ], [ %2, %1216 ], [ %2, %1221 ]
  %1239 = load ptr, ptr %9, align 8, !tbaa !13
  %1240 = call fastcc ptr @S_find_byclass(ptr noundef nonnull %13, ptr noundef nonnull %1214, ptr noundef %1239, ptr noundef %1238, ptr noundef nonnull %10)
  %1241 = icmp eq ptr %1240, null
  br i1 %1241, label %1383, label %1357

1242:                                             ; preds = %1205
  br i1 %850, label %1243, label %1248

1243:                                             ; preds = %1242
  %1244 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %1245 = load ptr, ptr %1244, align 8, !tbaa !101
  %1246 = icmp eq ptr %1245, null
  br i1 %1246, label %1321, label %1247

1247:                                             ; preds = %1243
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #12
  br i1 %25, label %1255, label %1258

1248:                                             ; preds = %1242
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #12
  br i1 %25, label %1249, label %1262

1249:                                             ; preds = %1248
  %1250 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %1251 = load ptr, ptr %1250, align 8, !tbaa !101
  %1252 = icmp eq ptr %1251, null
  br i1 %1252, label %1253, label %1255

1253:                                             ; preds = %1249
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %1254 = load ptr, ptr %216, align 8, !tbaa !43
  br label %1255

1255:                                             ; preds = %1247, %1253, %1249
  %1256 = phi ptr [ %1254, %1253 ], [ %635, %1249 ], [ %635, %1247 ]
  %1257 = getelementptr inbounds %struct.reg_substr_data, ptr %1256, i64 0, i32 1, i64 1, i32 3
  br label %1265

1258:                                             ; preds = %1247
  %1259 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %1259, label %1260, label %1312

1260:                                             ; preds = %1258
  %1261 = load ptr, ptr %216, align 8, !tbaa !43
  br label %1262

1262:                                             ; preds = %1260, %1248
  %1263 = phi ptr [ %1261, %1260 ], [ %635, %1248 ]
  %1264 = getelementptr inbounds %struct.reg_substr_data, ptr %1263, i64 0, i32 1, i64 1, i32 2
  br label %1265

1265:                                             ; preds = %1262, %1255
  %1266 = phi ptr [ %1257, %1255 ], [ %1264, %1262 ]
  %1267 = load ptr, ptr %1266, align 8, !tbaa !13
  %1268 = getelementptr inbounds %struct.sv, ptr %1267, i64 0, i32 2
  %1269 = load i32, ptr %1268, align 4, !tbaa !9
  %1270 = and i32 %1269, 2098176
  %1271 = icmp eq i32 %1270, 1024
  br i1 %1271, label %1272, label %1278

1272:                                             ; preds = %1265
  %1273 = load ptr, ptr %1267, align 8, !tbaa !24
  %1274 = getelementptr inbounds %struct.xpv, ptr %1273, i64 0, i32 2
  %1275 = load i64, ptr %1274, align 8, !tbaa !110
  store i64 %1275, ptr %11, align 8, !tbaa !86
  %1276 = getelementptr inbounds %struct.sv, ptr %1267, i64 0, i32 3
  %1277 = load ptr, ptr %1276, align 8, !tbaa !6
  br label %1282

1278:                                             ; preds = %1265
  %1279 = call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %1267, ptr noundef nonnull %11, i32 noundef 34) #12
  %1280 = load i32, ptr %1268, align 4, !tbaa !9
  %1281 = load i64, ptr %11, align 8, !tbaa !86
  br label %1282

1282:                                             ; preds = %1278, %1272
  %1283 = phi i64 [ %1275, %1272 ], [ %1281, %1278 ]
  %1284 = phi i32 [ %1269, %1272 ], [ %1280, %1278 ]
  %1285 = phi ptr [ %1277, %1272 ], [ %1279, %1278 ]
  %1286 = icmp ugt i32 %1284, -1073741825
  br i1 %1286, label %1287, label %1303

1287:                                             ; preds = %1282
  %1288 = sub i64 0, %1283
  %1289 = getelementptr inbounds i8, ptr %2, i64 %1288
  %1290 = getelementptr inbounds i8, ptr %1289, i64 1
  %1291 = icmp ult ptr %1290, %3
  br i1 %1291, label %1312, label %1292

1292:                                             ; preds = %1287
  %1293 = add i64 %1283, -1
  %1294 = call i32 @bcmp(ptr nonnull %1290, ptr %1285, i64 %1293)
  %1295 = icmp eq i32 %1294, 0
  br i1 %1295, label %1313, label %1296

1296:                                             ; preds = %1292
  %1297 = icmp ult ptr %1289, %3
  br i1 %1297, label %1312, label %1298

1298:                                             ; preds = %1296
  %1299 = icmp eq i32 %212, 0
  br i1 %1299, label %1300, label %1303

1300:                                             ; preds = %1298
  %1301 = call i32 @bcmp(ptr %1289, ptr %1285, i64 %1283)
  %1302 = icmp eq i32 %1301, 0
  br i1 %1302, label %1309, label %1312

1303:                                             ; preds = %1298, %1282
  %1304 = icmp eq i64 %1283, 0
  br i1 %1304, label %1309, label %1305

1305:                                             ; preds = %1303
  %1306 = load ptr, ptr %9, align 8, !tbaa !13
  %1307 = getelementptr inbounds i8, ptr %1285, i64 %1283
  %1308 = call ptr @Perl_rninstr(ptr noundef %1306, ptr noundef %2, ptr noundef %1285, ptr noundef nonnull %1307) #12
  br label %1309

1309:                                             ; preds = %1300, %1303, %1305
  %1310 = phi ptr [ %1308, %1305 ], [ %2, %1303 ], [ %1289, %1300 ]
  %1311 = icmp eq ptr %1310, null
  br i1 %1311, label %1312, label %1313

1312:                                             ; preds = %1258, %1309, %1287, %1296, %1300
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #12
  br label %1383

1313:                                             ; preds = %1292, %1309
  %1314 = phi ptr [ %1310, %1309 ], [ %1290, %1292 ]
  %1315 = ptrtoint ptr %1314 to i64
  %1316 = sub i64 %213, %1315
  %1317 = load ptr, ptr %216, align 8, !tbaa !43
  %1318 = getelementptr inbounds %struct.reg_substr_data, ptr %1317, i64 0, i32 1, i64 1
  %1319 = load i64, ptr %1318, align 8, !tbaa !44
  %1320 = add nsw i64 %1316, %1319
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #12
  br label %1321

1321:                                             ; preds = %1209, %1313, %1243
  %1322 = phi i64 [ %1320, %1313 ], [ 0, %1243 ], [ 0, %1209 ]
  %1323 = icmp ne i64 %151, 0
  %1324 = icmp slt i64 %1322, %151
  %1325 = select i1 %1323, i1 %1324, i1 false
  %1326 = add nsw i64 %151, -1
  %1327 = select i1 %1325, i64 %1326, i64 %1322
  %1328 = sub i64 0, %1327
  %1329 = getelementptr inbounds i8, ptr %2, i64 %1328
  br i1 %25, label %1330, label %1345

1330:                                             ; preds = %1321
  %1331 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !5
  %1332 = icmp eq i32 %1331, 0
  br i1 %1332, label %1333, label %1357

1333:                                             ; preds = %1330, %1336
  %1334 = load ptr, ptr %9, align 8, !tbaa !13
  %1335 = icmp ult ptr %1334, %1329
  br i1 %1335, label %1336, label %1383

1336:                                             ; preds = %1333
  %1337 = load i8, ptr %1334, align 1, !tbaa !6
  %1338 = zext i8 %1337 to i64
  %1339 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1338
  %1340 = load i8, ptr %1339, align 1, !tbaa !6
  %1341 = zext i8 %1340 to i64
  %1342 = getelementptr inbounds i8, ptr %1334, i64 %1341
  store ptr %1342, ptr %9, align 8, !tbaa !13
  %1343 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !5
  %1344 = icmp eq i32 %1343, 0
  br i1 %1344, label %1333, label %1357

1345:                                             ; preds = %1321, %1348
  %1346 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !5
  %1347 = icmp eq i32 %1346, 0
  br i1 %1347, label %1348, label %1357

1348:                                             ; preds = %1345
  %1349 = load ptr, ptr %9, align 8, !tbaa !13
  %1350 = getelementptr inbounds i8, ptr %1349, i64 1
  store ptr %1350, ptr %9, align 8, !tbaa !13
  %1351 = icmp ult ptr %1349, %1329
  br i1 %1351, label %1345, label %1383, !llvm.loop !121

1352:                                             ; preds = %513, %616, %833, %732, %1193, %1120
  %1353 = phi ptr [ %1121, %1120 ], [ %1194, %1193 ], [ %733, %732 ], [ %834, %833 ], [ %617, %616 ], [ %477, %513 ]
  %1354 = phi i64 [ %1111, %1120 ], [ %1184, %1193 ], [ %723, %732 ], [ %823, %833 ], [ %614, %616 ], [ %516, %513 ]
  %1355 = load ptr, ptr %1353, align 8, !tbaa !38
  %1356 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1355, i64 0, i32 1
  store i64 %1354, ptr %1356, align 8, !tbaa !42
  br label %1357

1357:                                             ; preds = %1345, %1336, %1352, %1330, %1237, %631
  %1358 = and i32 %7, 128
  %1359 = icmp eq i32 %1358, 0
  br i1 %1359, label %1368, label %1360

1360:                                             ; preds = %1357
  %1361 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %1362 = load ptr, ptr %1361, align 8, !tbaa !38
  %1363 = load i64, ptr %1362, align 8, !tbaa !39
  %1364 = ptrtoint ptr %1 to i64
  %1365 = ptrtoint ptr %3 to i64
  %1366 = sub i64 %1364, %1365
  %1367 = icmp slt i64 %1363, %1366
  br i1 %1367, label %1383, label %1368

1368:                                             ; preds = %1360, %1357
  call void @Perl_safesysfree(ptr noundef %464) #12
  %1369 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1370 = icmp sgt i32 %1369, %157
  br i1 %1370, label %1371, label %1372

1371:                                             ; preds = %1368
  call void @Perl_leave_scope(i32 noundef %157) #12
  br label %1372

1372:                                             ; preds = %1371, %1368
  %1373 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 6
  %1374 = load ptr, ptr %1373, align 8, !tbaa !122
  %1375 = icmp eq ptr %1374, null
  br i1 %1375, label %1378, label %1376

1376:                                             ; preds = %1372
  %1377 = call i32 @Perl_hv_iterinit(ptr noundef nonnull %1374) #12
  br label %1378

1378:                                             ; preds = %1376, %1372
  %1379 = and i32 %7, 16
  %1380 = icmp eq i32 %1379, 0
  br i1 %1380, label %1381, label %1393

1381:                                             ; preds = %1378
  %1382 = load ptr, ptr %251, align 8, !tbaa !56
  call fastcc void @S_reg_set_capture_string(ptr noundef %0, ptr noundef %3, ptr noundef %1382, ptr noundef %5, i32 noundef %7)
  br label %1393

1383:                                             ; preds = %561, %549, %842, %751, %1202, %985, %1348, %1333, %540, %761, %659, %968, %899, %873, %755, %527, %1312, %172, %209, %631, %628, %1237, %1360
  %1384 = phi ptr [ null, %209 ], [ %464, %1360 ], [ %464, %631 ], [ %464, %628 ], [ %464, %1237 ], [ null, %172 ], [ %464, %1312 ], [ %464, %527 ], [ %464, %755 ], [ %464, %873 ], [ %464, %899 ], [ %464, %968 ], [ %464, %659 ], [ %464, %761 ], [ %464, %540 ], [ %464, %1333 ], [ %464, %1348 ], [ %464, %985 ], [ %464, %1202 ], [ %464, %751 ], [ %464, %842 ], [ %464, %549 ], [ %464, %561 ]
  %1385 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1386 = icmp sgt i32 %1385, %157
  br i1 %1386, label %1387, label %1388

1387:                                             ; preds = %1383
  call void @Perl_leave_scope(i32 noundef %157) #12
  br label %1388

1388:                                             ; preds = %1387, %1383
  %1389 = icmp eq ptr %1384, null
  br i1 %1389, label %1393, label %1390

1390:                                             ; preds = %1388
  %1391 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %1392 = load ptr, ptr %1391, align 8, !tbaa !38
  call void @Perl_safesysfree(ptr noundef %1392) #12
  store ptr %1384, ptr %1391, align 8, !tbaa !38
  br label %1393

1393:                                             ; preds = %130, %1388, %1390, %1378, %1381, %202, %208, %165, %148
  %1394 = phi i32 [ 0, %148 ], [ 0, %165 ], [ 1, %208 ], [ 1, %202 ], [ 1, %1381 ], [ 1, %1378 ], [ 0, %1390 ], [ 0, %1388 ], [ 0, %130 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %10) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  ret i32 %1394
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_re_intuit_start(ptr nocapture noundef readonly %0, ptr noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 %5, ptr nocapture readnone %6) local_unnamed_addr #0 {
  %8 = alloca %struct.regmatch_info, align 8
  %9 = getelementptr i8, ptr %0, i64 16
  %10 = load ptr, ptr %9, align 8, !tbaa !6
  %11 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 11
  %12 = load ptr, ptr %11, align 8, !tbaa !43
  %13 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2
  %14 = load i64, ptr %13, align 8, !tbaa !44
  %15 = icmp eq ptr %1, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.sv, ptr %1, i64 0, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !9
  %19 = and i32 %18, 536870912
  %20 = icmp ne i32 %19, 0
  br label %21

21:                                               ; preds = %16, %7
  %22 = phi i1 [ false, %7 ], [ %20, %16 ]
  %23 = load i8, ptr %12, align 8, !tbaa !123
  %24 = sub i8 1, %23
  %25 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 7
  %26 = load i32, ptr %25, align 8, !tbaa !35
  %27 = and i32 %26, 1
  %28 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 14
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %8) #12
  %30 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 8
  %31 = load i64, ptr %30, align 8, !tbaa !33
  %32 = ptrtoint ptr %4 to i64
  %33 = ptrtoint ptr %3 to i64
  %34 = sub i64 %32, %33
  %35 = icmp sgt i64 %31, %34
  br i1 %35, label %1533, label %36

36:                                               ; preds = %21
  %37 = zext i1 %22 to i8
  %38 = and i32 %26, -1048577
  %39 = select i1 %22, i32 1048576, i32 0
  %40 = or i32 %38, %39
  store i32 %40, ptr %25, align 8, !tbaa !35
  %41 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 14
  store i8 %37, ptr %41, align 2, !tbaa !48
  %42 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 7
  store ptr null, ptr %42, align 8, !tbaa !58
  %43 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 1
  store ptr %2, ptr %43, align 8, !tbaa !53
  %44 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 2
  store ptr %4, ptr %44, align 8, !tbaa !56
  %45 = getelementptr inbounds %struct.p5rx, ptr %0, i64 0, i32 2
  %46 = load i32, ptr %45, align 4, !tbaa !49
  %47 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 13
  %48 = lshr i32 %46, 29
  %49 = trunc i32 %48 to i8
  %50 = and i8 %49, 1
  store i8 %50, ptr %47, align 1, !tbaa !51
  %51 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 12
  store i8 1, ptr %51, align 8, !tbaa !47
  %52 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 9
  store i32 0, ptr %52, align 8, !tbaa !55
  br i1 %22, label %53, label %66

53:                                               ; preds = %36
  %54 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 3
  %55 = load ptr, ptr %54, align 8, !tbaa !101
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !100
  %60 = icmp eq ptr %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %10)
  %62 = load ptr, ptr %11, align 8, !tbaa !43
  br label %63

63:                                               ; preds = %61, %57, %53
  %64 = phi ptr [ %62, %61 ], [ %12, %57 ], [ %12, %53 ]
  %65 = getelementptr inbounds %struct.reg_substr_data, ptr %64, i64 0, i32 1, i64 2, i32 3
  br label %81

66:                                               ; preds = %36
  %67 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !100
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %78

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 3
  %72 = load ptr, ptr %71, align 8, !tbaa !101
  %73 = icmp eq ptr %72, null
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %10)
  br i1 %75, label %76, label %1533

76:                                               ; preds = %74
  %77 = load ptr, ptr %11, align 8, !tbaa !43
  br label %78

78:                                               ; preds = %76, %70, %66
  %79 = phi ptr [ %77, %76 ], [ %12, %70 ], [ %12, %66 ]
  %80 = getelementptr inbounds %struct.reg_substr_data, ptr %79, i64 0, i32 1, i64 2, i32 2
  br label %81

81:                                               ; preds = %78, %63
  %82 = phi ptr [ %64, %63 ], [ %79, %78 ]
  %83 = phi ptr [ %65, %63 ], [ %80, %78 ]
  %84 = load ptr, ptr %83, align 8, !tbaa !13
  %85 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 13
  %86 = load i32, ptr %85, align 4, !tbaa !19
  %87 = and i32 %86, 7168
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %154, label %89

89:                                               ; preds = %81
  %90 = and i32 %86, 2
  %91 = icmp ne i32 %90, 0
  %92 = and i32 %86, 1026
  %93 = icmp eq i32 %92, 1024
  %94 = or i1 %93, %91
  %95 = zext i1 %93 to i8
  br i1 %94, label %154, label %96

96:                                               ; preds = %89
  %97 = icmp eq ptr %3, %2
  %98 = and i32 %86, 2048
  %99 = icmp eq i32 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %1533

101:                                              ; preds = %96
  %102 = getelementptr inbounds %struct.reg_substr_data, ptr %82, i64 0, i32 1, i64 2
  %103 = load i64, ptr %102, align 8, !tbaa !44
  %104 = getelementptr inbounds %struct.reg_substr_data, ptr %82, i64 0, i32 1, i64 2, i32 1
  %105 = load i64, ptr %104, align 8, !tbaa !109
  %106 = icmp eq i64 %103, %105
  %107 = and i32 %86, 128
  %108 = icmp eq i32 %107, 0
  %109 = and i1 %108, %106
  br i1 %109, label %110, label %154

110:                                              ; preds = %101
  %111 = load ptr, ptr %84, align 8, !tbaa !24
  %112 = getelementptr inbounds %struct.xpv, ptr %111, i64 0, i32 2
  %113 = load i64, ptr %112, align 8, !tbaa !110
  br i1 %22, label %114, label %116

114:                                              ; preds = %110
  %115 = tail call fastcc ptr @S_reghop3(ptr noundef %3, i64 noundef %103, ptr noundef %4)
  br label %118

116:                                              ; preds = %110
  %117 = getelementptr inbounds i8, ptr %3, i64 %103
  br label %118

118:                                              ; preds = %116, %114
  %119 = phi ptr [ %115, %114 ], [ %117, %116 ]
  %120 = getelementptr inbounds %struct.sv, ptr %84, i64 0, i32 2
  %121 = load i32, ptr %120, align 4, !tbaa !9
  %122 = icmp ugt i32 %121, -1073741825
  br i1 %122, label %123, label %140

123:                                              ; preds = %118
  %124 = icmp eq i32 %27, 0
  br i1 %124, label %127, label %125

125:                                              ; preds = %123
  %126 = add nsw i64 %113, -1
  br label %140

127:                                              ; preds = %123
  %128 = ptrtoint ptr %119 to i64
  %129 = sub i64 %32, %128
  %130 = icmp sgt i64 %129, %113
  %131 = add nsw i64 %113, -1
  %132 = icmp slt i64 %129, %131
  %133 = select i1 %130, i1 true, i1 %132
  br i1 %133, label %1516, label %134

134:                                              ; preds = %127
  %135 = icmp eq i64 %129, %113
  br i1 %135, label %136, label %140

136:                                              ; preds = %134
  %137 = getelementptr inbounds i8, ptr %4, i64 -1
  %138 = load i8, ptr %137, align 1, !tbaa !6
  %139 = icmp eq i8 %138, 10
  br i1 %139, label %140, label %1516

140:                                              ; preds = %134, %136, %125, %118
  %141 = phi i64 [ %113, %118 ], [ %126, %125 ], [ %131, %136 ], [ %131, %134 ]
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %1124, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %struct.sv, ptr %84, i64 0, i32 3
  %145 = load ptr, ptr %144, align 8, !tbaa !6
  %146 = load i8, ptr %145, align 1, !tbaa !6
  %147 = load i8, ptr %119, align 1, !tbaa !6
  %148 = icmp eq i8 %146, %147
  br i1 %148, label %149, label %1516

149:                                              ; preds = %143
  %150 = icmp sgt i64 %141, 1
  br i1 %150, label %151, label %1124

151:                                              ; preds = %149
  %152 = tail call i32 @bcmp(ptr nonnull %145, ptr nonnull %119, i64 %141)
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %1124, label %1516

154:                                              ; preds = %89, %101, %81
  %155 = phi i8 [ %95, %89 ], [ 0, %101 ], [ 0, %81 ]
  %156 = getelementptr inbounds %struct.reg_substr_data, ptr %82, i64 0, i32 1, i64 2, i32 4
  %157 = load i64, ptr %156, align 8, !tbaa !125
  br label %158

158:                                              ; preds = %869, %827, %1111, %1043, %814, %874, %804, %822, %824, %807, %1430, %154
  %159 = phi ptr [ %3, %154 ], [ %1126, %1430 ], [ %802, %814 ], [ %802, %874 ], [ %805, %804 ], [ %817, %822 ], [ %817, %824 ], [ %805, %807 ], [ %960, %1043 ], [ %960, %1111 ], [ %817, %827 ], [ %817, %869 ]
  %160 = phi i8 [ %155, %154 ], [ %1127, %1430 ], [ %496, %814 ], [ %496, %874 ], [ %496, %804 ], [ %496, %822 ], [ %496, %824 ], [ %496, %807 ], [ %961, %1043 ], [ %961, %1111 ], [ %496, %827 ], [ %496, %869 ]
  %161 = phi ptr [ %3, %154 ], [ %1432, %1430 ], [ %815, %814 ], [ %877, %874 ], [ %497, %804 ], [ %705, %822 ], [ %705, %824 ], [ %813, %807 ], [ %1044, %1043 ], [ %1044, %1111 ], [ %836, %827 ], [ %870, %869 ]
  %162 = phi i64 [ %157, %154 ], [ %1129, %1430 ], [ %498, %814 ], [ %498, %874 ], [ %498, %804 ], [ %498, %822 ], [ %498, %824 ], [ %498, %807 ], [ %963, %1043 ], [ %963, %1111 ], [ %498, %827 ], [ %498, %869 ]
  %163 = load i32, ptr %85, align 4, !tbaa !19
  %164 = and i32 %163, 128
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %171, label %166

166:                                              ; preds = %158
  %167 = getelementptr inbounds i8, ptr %161, i64 %14
  %168 = sub i64 0, %162
  %169 = getelementptr inbounds i8, ptr %4, i64 %168
  %170 = icmp ugt ptr %167, %169
  br i1 %170, label %1516, label %307

171:                                              ; preds = %158
  %172 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %173 = icmp eq i8 %172, 0
  %174 = sub nsw i64 0, %162
  br i1 %173, label %231, label %175

175:                                              ; preds = %171
  %176 = ptrtoint ptr %2 to i64
  %177 = icmp slt i64 %162, 1
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = icmp ugt ptr %4, %2
  br i1 %179, label %197, label %236

180:                                              ; preds = %175
  %181 = icmp ne i64 %162, 0
  %182 = icmp ult ptr %4, %2
  %183 = and i1 %182, %181
  br i1 %183, label %184, label %236

184:                                              ; preds = %180, %184
  %185 = phi ptr [ %193, %184 ], [ %4, %180 ]
  %186 = phi i64 [ %187, %184 ], [ %174, %180 ]
  %187 = add nsw i64 %186, -1
  %188 = load i8, ptr %185, align 1, !tbaa !6
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %189
  %191 = load i8, ptr %190, align 1, !tbaa !6
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds i8, ptr %185, i64 %192
  %194 = icmp ne i64 %187, 0
  %195 = icmp ult ptr %193, %2
  %196 = select i1 %194, i1 %195, i1 false
  br i1 %196, label %184, label %236, !llvm.loop !126

197:                                              ; preds = %178, %226
  %198 = phi i64 [ %201, %226 ], [ %174, %178 ]
  %199 = phi ptr [ %227, %226 ], [ %4, %178 ]
  %200 = ptrtoint ptr %199 to i64
  %201 = add nsw i64 %198, 1
  %202 = getelementptr inbounds i8, ptr %199, i64 -1
  %203 = load i8, ptr %202, align 1, !tbaa !6
  %204 = icmp sgt i8 %203, -1
  br i1 %204, label %226, label %205

205:                                              ; preds = %197
  %206 = icmp ugt ptr %202, %2
  br i1 %206, label %207, label %221

207:                                              ; preds = %205
  %208 = getelementptr i8, ptr %199, i64 %176
  %209 = sub i64 0, %200
  %210 = getelementptr i8, ptr %208, i64 %209
  br label %211

211:                                              ; preds = %216, %207
  %212 = phi ptr [ %217, %216 ], [ %202, %207 ]
  %213 = load i8, ptr %212, align 1, !tbaa !6
  %214 = and i8 %213, -64
  %215 = icmp eq i8 %214, -128
  br i1 %215, label %216, label %221

216:                                              ; preds = %211
  %217 = getelementptr inbounds i8, ptr %212, i64 -1
  %218 = icmp ugt ptr %217, %2
  br i1 %218, label %211, label %219, !llvm.loop !127

219:                                              ; preds = %216
  %220 = load i8, ptr %210, align 1, !tbaa !6
  br label %221

221:                                              ; preds = %211, %219, %205
  %222 = phi ptr [ %202, %205 ], [ %210, %219 ], [ %212, %211 ]
  %223 = phi i8 [ %203, %205 ], [ %220, %219 ], [ %213, %211 ]
  %224 = icmp ugt i8 %223, -63
  br i1 %224, label %226, label %225

225:                                              ; preds = %221
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %226

226:                                              ; preds = %225, %221, %197
  %227 = phi ptr [ %222, %221 ], [ %222, %225 ], [ %202, %197 ]
  %228 = icmp ne i64 %201, 0
  %229 = icmp ugt ptr %227, %2
  %230 = and i1 %228, %229
  br i1 %230, label %197, label %233, !llvm.loop !128

231:                                              ; preds = %171
  %232 = getelementptr inbounds i8, ptr %4, i64 %174
  br label %299

233:                                              ; preds = %226
  %234 = load i8, ptr %41, align 2, !tbaa !48
  %235 = icmp eq i8 %234, 0
  br i1 %235, label %299, label %236

236:                                              ; preds = %184, %180, %178, %233
  %237 = phi ptr [ %227, %233 ], [ %4, %180 ], [ %4, %178 ], [ %193, %184 ]
  %238 = ptrtoint ptr %237 to i64
  %239 = icmp sgt i64 %14, -1
  br i1 %239, label %242, label %240

240:                                              ; preds = %236
  %241 = icmp ugt ptr %161, %237
  br i1 %241, label %263, label %1516

242:                                              ; preds = %236
  %243 = icmp ne i64 %14, 0
  %244 = icmp ult ptr %161, %237
  %245 = and i1 %243, %244
  br i1 %245, label %246, label %259

246:                                              ; preds = %242, %246
  %247 = phi i64 [ %249, %246 ], [ %14, %242 ]
  %248 = phi ptr [ %255, %246 ], [ %161, %242 ]
  %249 = add nsw i64 %247, -1
  %250 = load i8, ptr %248, align 1, !tbaa !6
  %251 = zext i8 %250 to i64
  %252 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %251
  %253 = load i8, ptr %252, align 1, !tbaa !6
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds i8, ptr %248, i64 %254
  %256 = icmp ne i64 %249, 0
  %257 = icmp ult ptr %255, %237
  %258 = select i1 %256, i1 %257, i1 false
  br i1 %258, label %246, label %259, !llvm.loop !129

259:                                              ; preds = %246, %242
  %260 = phi ptr [ %161, %242 ], [ %255, %246 ]
  %261 = phi i64 [ %14, %242 ], [ %249, %246 ]
  %262 = icmp sgt i64 %261, 0
  br i1 %262, label %1516, label %303

263:                                              ; preds = %240, %292
  %264 = phi i64 [ %267, %292 ], [ %14, %240 ]
  %265 = phi ptr [ %293, %292 ], [ %161, %240 ]
  %266 = ptrtoint ptr %265 to i64
  %267 = add nsw i64 %264, 1
  %268 = getelementptr inbounds i8, ptr %265, i64 -1
  %269 = load i8, ptr %268, align 1, !tbaa !6
  %270 = icmp sgt i8 %269, -1
  br i1 %270, label %292, label %271

271:                                              ; preds = %263
  %272 = icmp ugt ptr %268, %237
  br i1 %272, label %273, label %287

273:                                              ; preds = %271
  %274 = getelementptr i8, ptr %265, i64 %238
  %275 = sub i64 0, %266
  %276 = getelementptr i8, ptr %274, i64 %275
  br label %277

277:                                              ; preds = %282, %273
  %278 = phi ptr [ %283, %282 ], [ %268, %273 ]
  %279 = load i8, ptr %278, align 1, !tbaa !6
  %280 = and i8 %279, -64
  %281 = icmp eq i8 %280, -128
  br i1 %281, label %282, label %287

282:                                              ; preds = %277
  %283 = getelementptr inbounds i8, ptr %278, i64 -1
  %284 = icmp ugt ptr %283, %237
  br i1 %284, label %277, label %285, !llvm.loop !130

285:                                              ; preds = %282
  %286 = load i8, ptr %276, align 1, !tbaa !6
  br label %287

287:                                              ; preds = %277, %285, %271
  %288 = phi ptr [ %268, %271 ], [ %276, %285 ], [ %278, %277 ]
  %289 = phi i8 [ %269, %271 ], [ %286, %285 ], [ %279, %277 ]
  %290 = icmp ugt i8 %289, -63
  br i1 %290, label %292, label %291

291:                                              ; preds = %287
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %292

292:                                              ; preds = %291, %287, %263
  %293 = phi ptr [ %288, %287 ], [ %288, %291 ], [ %268, %263 ]
  %294 = icmp ne i64 %267, 0
  %295 = icmp ugt ptr %293, %237
  %296 = and i1 %294, %295
  br i1 %296, label %263, label %297, !llvm.loop !131

297:                                              ; preds = %292
  %298 = icmp slt i64 %264, -1
  br i1 %298, label %1516, label %303

299:                                              ; preds = %231, %233
  %300 = phi ptr [ %232, %231 ], [ %227, %233 ]
  %301 = getelementptr inbounds i8, ptr %161, i64 %14
  %302 = icmp ugt ptr %301, %300
  br i1 %302, label %1516, label %303

303:                                              ; preds = %259, %297, %299
  %304 = phi ptr [ %300, %299 ], [ %237, %297 ], [ %237, %259 ]
  %305 = phi ptr [ %301, %299 ], [ %293, %297 ], [ %260, %259 ]
  %306 = icmp eq ptr %305, null
  br i1 %306, label %1516, label %307

307:                                              ; preds = %303, %166
  %308 = phi ptr [ %169, %166 ], [ %304, %303 ]
  %309 = phi ptr [ %167, %166 ], [ %305, %303 ]
  %310 = and i8 %160, 1
  %311 = icmp eq i8 %310, 0
  br i1 %311, label %312, label %407

312:                                              ; preds = %307
  %313 = load i32, ptr %85, align 4, !tbaa !19
  %314 = and i32 %313, 7168
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %407, label %316

316:                                              ; preds = %312
  %317 = load ptr, ptr %11, align 8, !tbaa !43
  %318 = getelementptr inbounds %struct.reg_substr_data, ptr %317, i64 0, i32 1, i64 2, i32 1
  %319 = load i64, ptr %318, align 8, !tbaa !109
  %320 = icmp eq i64 %319, 9223372036854775807
  br i1 %320, label %407, label %321

321:                                              ; preds = %316
  %322 = load ptr, ptr %84, align 8, !tbaa !24
  %323 = getelementptr inbounds %struct.xpv, ptr %322, i64 0, i32 2
  %324 = load i64, ptr %323, align 8, !tbaa !110
  %325 = getelementptr inbounds %struct.sv, ptr %84, i64 0, i32 2
  %326 = load i32, ptr %325, align 4, !tbaa !9
  %327 = icmp ugt i32 %326, -1073741825
  %328 = sext i1 %327 to i64
  %329 = add i64 %324, %328
  %330 = and i32 %313, 4096
  %331 = icmp eq i32 %330, 0
  %332 = select i1 %331, ptr %2, ptr %3
  %333 = ptrtoint ptr %308 to i64
  %334 = ptrtoint ptr %332 to i64
  %335 = sub i64 %333, %334
  %336 = icmp sgt i64 %335, %319
  br i1 %336, label %337, label %407

337:                                              ; preds = %321
  %338 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %339 = icmp eq i8 %338, 0
  br i1 %339, label %398, label %340

340:                                              ; preds = %337
  %341 = sub i64 0, %329
  %342 = getelementptr inbounds i8, ptr %308, i64 %341
  %343 = ptrtoint ptr %342 to i64
  %344 = icmp sgt i64 %319, -1
  br i1 %344, label %347, label %345

345:                                              ; preds = %340
  %346 = icmp ugt ptr %332, %342
  br i1 %346, label %364, label %404

347:                                              ; preds = %340
  %348 = icmp ne i64 %319, 0
  %349 = icmp ult ptr %332, %342
  %350 = and i1 %348, %349
  br i1 %350, label %351, label %404

351:                                              ; preds = %347, %351
  %352 = phi ptr [ %360, %351 ], [ %332, %347 ]
  %353 = phi i64 [ %354, %351 ], [ %319, %347 ]
  %354 = add nsw i64 %353, -1
  %355 = load i8, ptr %352, align 1, !tbaa !6
  %356 = zext i8 %355 to i64
  %357 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %356
  %358 = load i8, ptr %357, align 1, !tbaa !6
  %359 = zext i8 %358 to i64
  %360 = getelementptr inbounds i8, ptr %352, i64 %359
  %361 = icmp ne i64 %354, 0
  %362 = icmp ult ptr %360, %342
  %363 = select i1 %361, i1 %362, i1 false
  br i1 %363, label %351, label %404, !llvm.loop !126

364:                                              ; preds = %345, %393
  %365 = phi i64 [ %368, %393 ], [ %319, %345 ]
  %366 = phi ptr [ %394, %393 ], [ %332, %345 ]
  %367 = ptrtoint ptr %366 to i64
  %368 = add nsw i64 %365, 1
  %369 = getelementptr inbounds i8, ptr %366, i64 -1
  %370 = load i8, ptr %369, align 1, !tbaa !6
  %371 = icmp sgt i8 %370, -1
  br i1 %371, label %393, label %372

372:                                              ; preds = %364
  %373 = icmp ugt ptr %369, %342
  br i1 %373, label %374, label %388

374:                                              ; preds = %372
  %375 = getelementptr i8, ptr %366, i64 %343
  %376 = sub i64 0, %367
  %377 = getelementptr i8, ptr %375, i64 %376
  br label %378

378:                                              ; preds = %383, %374
  %379 = phi ptr [ %384, %383 ], [ %369, %374 ]
  %380 = load i8, ptr %379, align 1, !tbaa !6
  %381 = and i8 %380, -64
  %382 = icmp eq i8 %381, -128
  br i1 %382, label %383, label %388

383:                                              ; preds = %378
  %384 = getelementptr inbounds i8, ptr %379, i64 -1
  %385 = icmp ugt ptr %384, %342
  br i1 %385, label %378, label %386, !llvm.loop !127

386:                                              ; preds = %383
  %387 = load i8, ptr %377, align 1, !tbaa !6
  br label %388

388:                                              ; preds = %378, %386, %372
  %389 = phi ptr [ %369, %372 ], [ %377, %386 ], [ %379, %378 ]
  %390 = phi i8 [ %370, %372 ], [ %387, %386 ], [ %380, %378 ]
  %391 = icmp ugt i8 %390, -63
  br i1 %391, label %393, label %392

392:                                              ; preds = %388
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %393

393:                                              ; preds = %392, %388, %364
  %394 = phi ptr [ %389, %388 ], [ %389, %392 ], [ %369, %364 ]
  %395 = icmp ne i64 %368, 0
  %396 = icmp ugt ptr %394, %342
  %397 = and i1 %395, %396
  br i1 %397, label %364, label %404, !llvm.loop !128

398:                                              ; preds = %337
  %399 = getelementptr inbounds i8, ptr %332, i64 %319
  %400 = sub i64 0, %329
  %401 = getelementptr inbounds i8, ptr %308, i64 %400
  %402 = icmp ugt ptr %399, %401
  %403 = select i1 %402, ptr %401, ptr %399
  br label %404

404:                                              ; preds = %393, %351, %347, %345, %398
  %405 = phi ptr [ %403, %398 ], [ %332, %347 ], [ %332, %345 ], [ %360, %351 ], [ %394, %393 ]
  %406 = getelementptr inbounds i8, ptr %405, i64 %329
  br label %407

407:                                              ; preds = %321, %404, %316, %312, %307
  %408 = phi ptr [ %308, %307 ], [ %308, %316 ], [ %308, %312 ], [ %406, %404 ], [ %308, %321 ]
  %409 = call ptr @Perl_fbm_instr(ptr noundef %309, ptr noundef %408, ptr noundef %84, i32 noundef %27) #12
  %410 = icmp eq ptr %409, null
  br i1 %410, label %1516, label %411

411:                                              ; preds = %407
  %412 = ptrtoint ptr %409 to i64
  %413 = ptrtoint ptr %161 to i64
  %414 = sub i64 %412, %413
  %415 = load ptr, ptr %11, align 8, !tbaa !43
  %416 = getelementptr inbounds %struct.reg_substr_data, ptr %415, i64 0, i32 1, i64 2, i32 1
  %417 = load i64, ptr %416, align 8, !tbaa !109
  %418 = icmp sgt i64 %414, %417
  br i1 %418, label %419, label %480

419:                                              ; preds = %411
  %420 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %421 = icmp eq i8 %420, 0
  %422 = sub nsw i64 0, %417
  br i1 %421, label %478, label %423

423:                                              ; preds = %419
  %424 = icmp slt i64 %417, 1
  br i1 %424, label %427, label %425

425:                                              ; preds = %423
  %426 = icmp ugt ptr %409, %161
  br i1 %426, label %444, label %480

427:                                              ; preds = %423
  %428 = icmp ne i64 %417, 0
  %429 = icmp ult ptr %409, %161
  %430 = and i1 %429, %428
  br i1 %430, label %431, label %480

431:                                              ; preds = %427, %431
  %432 = phi ptr [ %440, %431 ], [ %409, %427 ]
  %433 = phi i64 [ %434, %431 ], [ %422, %427 ]
  %434 = add nsw i64 %433, -1
  %435 = load i8, ptr %432, align 1, !tbaa !6
  %436 = zext i8 %435 to i64
  %437 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %436
  %438 = load i8, ptr %437, align 1, !tbaa !6
  %439 = zext i8 %438 to i64
  %440 = getelementptr inbounds i8, ptr %432, i64 %439
  %441 = icmp ne i64 %434, 0
  %442 = icmp ult ptr %440, %161
  %443 = select i1 %441, i1 %442, i1 false
  br i1 %443, label %431, label %480, !llvm.loop !126

444:                                              ; preds = %425, %473
  %445 = phi i64 [ %448, %473 ], [ %422, %425 ]
  %446 = phi ptr [ %474, %473 ], [ %409, %425 ]
  %447 = ptrtoint ptr %446 to i64
  %448 = add nsw i64 %445, 1
  %449 = getelementptr inbounds i8, ptr %446, i64 -1
  %450 = load i8, ptr %449, align 1, !tbaa !6
  %451 = icmp sgt i8 %450, -1
  br i1 %451, label %473, label %452

452:                                              ; preds = %444
  %453 = icmp ugt ptr %449, %161
  br i1 %453, label %454, label %468

454:                                              ; preds = %452
  %455 = getelementptr i8, ptr %446, i64 %413
  %456 = sub i64 0, %447
  %457 = getelementptr i8, ptr %455, i64 %456
  br label %458

458:                                              ; preds = %463, %454
  %459 = phi ptr [ %464, %463 ], [ %449, %454 ]
  %460 = load i8, ptr %459, align 1, !tbaa !6
  %461 = and i8 %460, -64
  %462 = icmp eq i8 %461, -128
  br i1 %462, label %463, label %468

463:                                              ; preds = %458
  %464 = getelementptr inbounds i8, ptr %459, i64 -1
  %465 = icmp ugt ptr %464, %161
  br i1 %465, label %458, label %466, !llvm.loop !127

466:                                              ; preds = %463
  %467 = load i8, ptr %457, align 1, !tbaa !6
  br label %468

468:                                              ; preds = %458, %466, %452
  %469 = phi ptr [ %449, %452 ], [ %457, %466 ], [ %459, %458 ]
  %470 = phi i8 [ %450, %452 ], [ %467, %466 ], [ %460, %458 ]
  %471 = icmp ugt i8 %470, -63
  br i1 %471, label %473, label %472

472:                                              ; preds = %468
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %473

473:                                              ; preds = %472, %468, %444
  %474 = phi ptr [ %469, %468 ], [ %469, %472 ], [ %449, %444 ]
  %475 = icmp ne i64 %448, 0
  %476 = icmp ugt ptr %474, %161
  %477 = and i1 %475, %476
  br i1 %477, label %444, label %480, !llvm.loop !128

478:                                              ; preds = %419
  %479 = getelementptr inbounds i8, ptr %409, i64 %422
  br label %480

480:                                              ; preds = %473, %431, %478, %411, %425, %427
  %481 = phi ptr [ %409, %425 ], [ %409, %427 ], [ %479, %478 ], [ %161, %411 ], [ %440, %431 ], [ %474, %473 ]
  %482 = load ptr, ptr %11, align 8, !tbaa !43
  %483 = zext i8 %24 to i64
  br i1 %22, label %484, label %488

484:                                              ; preds = %480
  %485 = getelementptr inbounds %struct.reg_substr_data, ptr %482, i64 0, i32 1, i64 %483, i32 3
  %486 = load ptr, ptr %485, align 8, !tbaa !101
  %487 = icmp eq ptr %486, null
  br i1 %487, label %958, label %492

488:                                              ; preds = %480
  %489 = getelementptr inbounds %struct.reg_substr_data, ptr %482, i64 0, i32 1, i64 %483, i32 2
  %490 = load ptr, ptr %489, align 8, !tbaa !100
  %491 = icmp eq ptr %490, null
  br i1 %491, label %958, label %492

492:                                              ; preds = %1392, %1116, %1120, %484, %488
  %493 = phi ptr [ %482, %488 ], [ %482, %484 ], [ %1115, %1120 ], [ %1115, %1116 ], [ %1384, %1392 ]
  %494 = phi ptr [ %409, %488 ], [ %409, %484 ], [ %959, %1120 ], [ %959, %1116 ], [ %1125, %1392 ]
  %495 = phi ptr [ %159, %488 ], [ %159, %484 ], [ %960, %1120 ], [ %960, %1116 ], [ %1126, %1392 ]
  %496 = phi i8 [ %160, %488 ], [ %160, %484 ], [ %961, %1120 ], [ %961, %1116 ], [ %1127, %1392 ]
  %497 = phi ptr [ %481, %488 ], [ %481, %484 ], [ %1044, %1120 ], [ %1044, %1116 ], [ %1128, %1392 ]
  %498 = phi i64 [ %162, %488 ], [ %162, %484 ], [ %963, %1120 ], [ %963, %1116 ], [ %1129, %1392 ]
  %499 = zext i8 %24 to i64
  %500 = getelementptr inbounds %struct.reg_substr_data, ptr %493, i64 0, i32 1, i64 %499
  %501 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %502 = icmp eq i8 %501, 0
  %503 = load i64, ptr %500, align 8, !tbaa !44
  br i1 %502, label %562, label %504

504:                                              ; preds = %492
  %505 = load i64, ptr %30, align 8, !tbaa !33
  %506 = sub nsw i64 %503, %505
  %507 = ptrtoint ptr %2 to i64
  %508 = icmp sgt i64 %506, -1
  br i1 %508, label %511, label %509

509:                                              ; preds = %504
  %510 = icmp ugt ptr %4, %2
  br i1 %510, label %528, label %567

511:                                              ; preds = %504
  %512 = icmp ne i64 %506, 0
  %513 = icmp ult ptr %4, %2
  %514 = and i1 %513, %512
  br i1 %514, label %515, label %567

515:                                              ; preds = %511, %515
  %516 = phi ptr [ %524, %515 ], [ %4, %511 ]
  %517 = phi i64 [ %518, %515 ], [ %506, %511 ]
  %518 = add nsw i64 %517, -1
  %519 = load i8, ptr %516, align 1, !tbaa !6
  %520 = zext i8 %519 to i64
  %521 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %520
  %522 = load i8, ptr %521, align 1, !tbaa !6
  %523 = zext i8 %522 to i64
  %524 = getelementptr inbounds i8, ptr %516, i64 %523
  %525 = icmp ne i64 %518, 0
  %526 = icmp ult ptr %524, %2
  %527 = select i1 %525, i1 %526, i1 false
  br i1 %527, label %515, label %567, !llvm.loop !126

528:                                              ; preds = %509, %557
  %529 = phi i64 [ %532, %557 ], [ %506, %509 ]
  %530 = phi ptr [ %558, %557 ], [ %4, %509 ]
  %531 = ptrtoint ptr %530 to i64
  %532 = add nsw i64 %529, 1
  %533 = getelementptr inbounds i8, ptr %530, i64 -1
  %534 = load i8, ptr %533, align 1, !tbaa !6
  %535 = icmp sgt i8 %534, -1
  br i1 %535, label %557, label %536

536:                                              ; preds = %528
  %537 = icmp ugt ptr %533, %2
  br i1 %537, label %538, label %552

538:                                              ; preds = %536
  %539 = getelementptr i8, ptr %530, i64 %507
  %540 = sub i64 0, %531
  %541 = getelementptr i8, ptr %539, i64 %540
  br label %542

542:                                              ; preds = %547, %538
  %543 = phi ptr [ %548, %547 ], [ %533, %538 ]
  %544 = load i8, ptr %543, align 1, !tbaa !6
  %545 = and i8 %544, -64
  %546 = icmp eq i8 %545, -128
  br i1 %546, label %547, label %552

547:                                              ; preds = %542
  %548 = getelementptr inbounds i8, ptr %543, i64 -1
  %549 = icmp ugt ptr %548, %2
  br i1 %549, label %542, label %550, !llvm.loop !127

550:                                              ; preds = %547
  %551 = load i8, ptr %541, align 1, !tbaa !6
  br label %552

552:                                              ; preds = %542, %550, %536
  %553 = phi ptr [ %533, %536 ], [ %541, %550 ], [ %543, %542 ]
  %554 = phi i8 [ %534, %536 ], [ %551, %550 ], [ %544, %542 ]
  %555 = icmp ugt i8 %554, -63
  br i1 %555, label %557, label %556

556:                                              ; preds = %552
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %557

557:                                              ; preds = %556, %552, %528
  %558 = phi ptr [ %553, %552 ], [ %553, %556 ], [ %533, %528 ]
  %559 = icmp ne i64 %532, 0
  %560 = icmp ugt ptr %558, %2
  %561 = and i1 %559, %560
  br i1 %561, label %528, label %567, !llvm.loop !128

562:                                              ; preds = %492
  %563 = getelementptr inbounds i8, ptr %4, i64 %503
  %564 = load i64, ptr %30, align 8, !tbaa !33
  %565 = sub i64 0, %564
  %566 = getelementptr inbounds i8, ptr %563, i64 %565
  br label %567

567:                                              ; preds = %557, %515, %511, %509, %562
  %568 = phi ptr [ %566, %562 ], [ %4, %511 ], [ %4, %509 ], [ %524, %515 ], [ %558, %557 ]
  %569 = icmp eq i8 %23, 1
  br i1 %569, label %639, label %570

570:                                              ; preds = %567
  %571 = ptrtoint ptr %568 to i64
  %572 = ptrtoint ptr %497 to i64
  %573 = sub i64 %571, %572
  %574 = getelementptr inbounds %struct.reg_substr_data, ptr %493, i64 0, i32 1, i64 %499, i32 1
  %575 = load i64, ptr %574, align 8, !tbaa !109
  %576 = icmp slt i64 %573, %575
  br i1 %576, label %704, label %577

577:                                              ; preds = %570
  %578 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %579 = icmp eq i8 %578, 0
  br i1 %579, label %635, label %580

580:                                              ; preds = %577
  %581 = icmp sgt i64 %575, -1
  br i1 %581, label %584, label %582

582:                                              ; preds = %580
  %583 = icmp ugt ptr %497, %568
  br i1 %583, label %601, label %704

584:                                              ; preds = %580
  %585 = icmp ne i64 %575, 0
  %586 = icmp ult ptr %497, %568
  %587 = and i1 %586, %585
  br i1 %587, label %588, label %704

588:                                              ; preds = %584, %588
  %589 = phi ptr [ %597, %588 ], [ %497, %584 ]
  %590 = phi i64 [ %591, %588 ], [ %575, %584 ]
  %591 = add nsw i64 %590, -1
  %592 = load i8, ptr %589, align 1, !tbaa !6
  %593 = zext i8 %592 to i64
  %594 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %593
  %595 = load i8, ptr %594, align 1, !tbaa !6
  %596 = zext i8 %595 to i64
  %597 = getelementptr inbounds i8, ptr %589, i64 %596
  %598 = icmp ne i64 %591, 0
  %599 = icmp ult ptr %597, %568
  %600 = select i1 %598, i1 %599, i1 false
  br i1 %600, label %588, label %704, !llvm.loop !126

601:                                              ; preds = %582, %630
  %602 = phi i64 [ %605, %630 ], [ %575, %582 ]
  %603 = phi ptr [ %631, %630 ], [ %497, %582 ]
  %604 = ptrtoint ptr %603 to i64
  %605 = add nsw i64 %602, 1
  %606 = getelementptr inbounds i8, ptr %603, i64 -1
  %607 = load i8, ptr %606, align 1, !tbaa !6
  %608 = icmp sgt i8 %607, -1
  br i1 %608, label %630, label %609

609:                                              ; preds = %601
  %610 = icmp ugt ptr %606, %568
  br i1 %610, label %611, label %625

611:                                              ; preds = %609
  %612 = getelementptr i8, ptr %603, i64 %571
  %613 = sub i64 0, %604
  %614 = getelementptr i8, ptr %612, i64 %613
  br label %615

615:                                              ; preds = %620, %611
  %616 = phi ptr [ %621, %620 ], [ %606, %611 ]
  %617 = load i8, ptr %616, align 1, !tbaa !6
  %618 = and i8 %617, -64
  %619 = icmp eq i8 %618, -128
  br i1 %619, label %620, label %625

620:                                              ; preds = %615
  %621 = getelementptr inbounds i8, ptr %616, i64 -1
  %622 = icmp ugt ptr %621, %568
  br i1 %622, label %615, label %623, !llvm.loop !127

623:                                              ; preds = %620
  %624 = load i8, ptr %614, align 1, !tbaa !6
  br label %625

625:                                              ; preds = %615, %623, %609
  %626 = phi ptr [ %606, %609 ], [ %614, %623 ], [ %616, %615 ]
  %627 = phi i8 [ %607, %609 ], [ %624, %623 ], [ %617, %615 ]
  %628 = icmp ugt i8 %627, -63
  br i1 %628, label %630, label %629

629:                                              ; preds = %625
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %630

630:                                              ; preds = %629, %625, %601
  %631 = phi ptr [ %626, %625 ], [ %626, %629 ], [ %606, %601 ]
  %632 = icmp ne i64 %605, 0
  %633 = icmp ugt ptr %631, %568
  %634 = and i1 %632, %633
  br i1 %634, label %601, label %704, !llvm.loop !128

635:                                              ; preds = %577
  %636 = getelementptr inbounds i8, ptr %497, i64 %575
  %637 = icmp ugt ptr %636, %568
  %638 = select i1 %637, ptr %568, ptr %636
  br label %704

639:                                              ; preds = %567
  %640 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %641 = icmp eq i8 %640, 0
  %642 = load i64, ptr %500, align 8, !tbaa !44
  br i1 %641, label %700, label %643

643:                                              ; preds = %639
  %644 = sub nsw i64 %642, %14
  %645 = ptrtoint ptr %2 to i64
  %646 = icmp sgt i64 %644, -1
  br i1 %646, label %649, label %647

647:                                              ; preds = %643
  %648 = icmp ugt ptr %494, %2
  br i1 %648, label %666, label %704

649:                                              ; preds = %643
  %650 = icmp ne i64 %644, 0
  %651 = icmp ult ptr %494, %4
  %652 = and i1 %651, %650
  br i1 %652, label %653, label %704

653:                                              ; preds = %649, %653
  %654 = phi ptr [ %662, %653 ], [ %494, %649 ]
  %655 = phi i64 [ %656, %653 ], [ %644, %649 ]
  %656 = add nsw i64 %655, -1
  %657 = load i8, ptr %654, align 1, !tbaa !6
  %658 = zext i8 %657 to i64
  %659 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %658
  %660 = load i8, ptr %659, align 1, !tbaa !6
  %661 = zext i8 %660 to i64
  %662 = getelementptr inbounds i8, ptr %654, i64 %661
  %663 = icmp ne i64 %656, 0
  %664 = icmp ult ptr %662, %4
  %665 = select i1 %663, i1 %664, i1 false
  br i1 %665, label %653, label %704, !llvm.loop !132

666:                                              ; preds = %647, %695
  %667 = phi i64 [ %670, %695 ], [ %644, %647 ]
  %668 = phi ptr [ %696, %695 ], [ %494, %647 ]
  %669 = ptrtoint ptr %668 to i64
  %670 = add nsw i64 %667, 1
  %671 = getelementptr inbounds i8, ptr %668, i64 -1
  %672 = load i8, ptr %671, align 1, !tbaa !6
  %673 = icmp sgt i8 %672, -1
  br i1 %673, label %695, label %674

674:                                              ; preds = %666
  %675 = icmp ugt ptr %671, %2
  br i1 %675, label %676, label %690

676:                                              ; preds = %674
  %677 = getelementptr i8, ptr %668, i64 %645
  %678 = sub i64 0, %669
  %679 = getelementptr i8, ptr %677, i64 %678
  br label %680

680:                                              ; preds = %685, %676
  %681 = phi ptr [ %686, %685 ], [ %671, %676 ]
  %682 = load i8, ptr %681, align 1, !tbaa !6
  %683 = and i8 %682, -64
  %684 = icmp eq i8 %683, -128
  br i1 %684, label %685, label %690

685:                                              ; preds = %680
  %686 = getelementptr inbounds i8, ptr %681, i64 -1
  %687 = icmp ugt ptr %686, %2
  br i1 %687, label %680, label %688, !llvm.loop !133

688:                                              ; preds = %685
  %689 = load i8, ptr %679, align 1, !tbaa !6
  br label %690

690:                                              ; preds = %680, %688, %674
  %691 = phi ptr [ %671, %674 ], [ %679, %688 ], [ %681, %680 ]
  %692 = phi i8 [ %672, %674 ], [ %689, %688 ], [ %682, %680 ]
  %693 = icmp ugt i8 %692, -63
  br i1 %693, label %695, label %694

694:                                              ; preds = %690
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %695

695:                                              ; preds = %694, %690, %666
  %696 = phi ptr [ %691, %690 ], [ %691, %694 ], [ %671, %666 ]
  %697 = icmp ne i64 %670, 0
  %698 = icmp ugt ptr %696, %2
  %699 = and i1 %697, %698
  br i1 %699, label %666, label %704, !llvm.loop !134

700:                                              ; preds = %639
  %701 = getelementptr inbounds i8, ptr %494, i64 %642
  %702 = sub i64 0, %14
  %703 = getelementptr inbounds i8, ptr %701, i64 %702
  br label %704

704:                                              ; preds = %630, %588, %695, %653, %649, %647, %584, %582, %700, %570, %635
  %705 = phi ptr [ %568, %570 ], [ %638, %635 ], [ %703, %700 ], [ %497, %584 ], [ %497, %582 ], [ %494, %649 ], [ %494, %647 ], [ %662, %653 ], [ %696, %695 ], [ %597, %588 ], [ %631, %630 ]
  %706 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %707 = icmp eq i8 %706, 0
  %708 = load i64, ptr %500, align 8, !tbaa !44
  br i1 %707, label %764, label %709

709:                                              ; preds = %704
  %710 = icmp sgt i64 %708, -1
  br i1 %710, label %713, label %711

711:                                              ; preds = %709
  %712 = icmp ugt ptr %497, %4
  br i1 %712, label %730, label %766

713:                                              ; preds = %709
  %714 = icmp ne i64 %708, 0
  %715 = icmp ult ptr %497, %4
  %716 = and i1 %715, %714
  br i1 %716, label %717, label %766

717:                                              ; preds = %713, %717
  %718 = phi ptr [ %726, %717 ], [ %497, %713 ]
  %719 = phi i64 [ %720, %717 ], [ %708, %713 ]
  %720 = add nsw i64 %719, -1
  %721 = load i8, ptr %718, align 1, !tbaa !6
  %722 = zext i8 %721 to i64
  %723 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %722
  %724 = load i8, ptr %723, align 1, !tbaa !6
  %725 = zext i8 %724 to i64
  %726 = getelementptr inbounds i8, ptr %718, i64 %725
  %727 = icmp ne i64 %720, 0
  %728 = icmp ult ptr %726, %4
  %729 = select i1 %727, i1 %728, i1 false
  br i1 %729, label %717, label %766, !llvm.loop !126

730:                                              ; preds = %711, %759
  %731 = phi i64 [ %734, %759 ], [ %708, %711 ]
  %732 = phi ptr [ %760, %759 ], [ %497, %711 ]
  %733 = ptrtoint ptr %732 to i64
  %734 = add nsw i64 %731, 1
  %735 = getelementptr inbounds i8, ptr %732, i64 -1
  %736 = load i8, ptr %735, align 1, !tbaa !6
  %737 = icmp sgt i8 %736, -1
  br i1 %737, label %759, label %738

738:                                              ; preds = %730
  %739 = icmp ugt ptr %735, %4
  br i1 %739, label %740, label %754

740:                                              ; preds = %738
  %741 = getelementptr i8, ptr %732, i64 %32
  %742 = sub i64 0, %733
  %743 = getelementptr i8, ptr %741, i64 %742
  br label %744

744:                                              ; preds = %749, %740
  %745 = phi ptr [ %750, %749 ], [ %735, %740 ]
  %746 = load i8, ptr %745, align 1, !tbaa !6
  %747 = and i8 %746, -64
  %748 = icmp eq i8 %747, -128
  br i1 %748, label %749, label %754

749:                                              ; preds = %744
  %750 = getelementptr inbounds i8, ptr %745, i64 -1
  %751 = icmp ugt ptr %750, %4
  br i1 %751, label %744, label %752, !llvm.loop !127

752:                                              ; preds = %749
  %753 = load i8, ptr %743, align 1, !tbaa !6
  br label %754

754:                                              ; preds = %744, %752, %738
  %755 = phi ptr [ %735, %738 ], [ %743, %752 ], [ %745, %744 ]
  %756 = phi i8 [ %736, %738 ], [ %753, %752 ], [ %746, %744 ]
  %757 = icmp ugt i8 %756, -63
  br i1 %757, label %759, label %758

758:                                              ; preds = %754
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %759

759:                                              ; preds = %758, %754, %730
  %760 = phi ptr [ %755, %754 ], [ %755, %758 ], [ %735, %730 ]
  %761 = icmp ne i64 %734, 0
  %762 = icmp ugt ptr %760, %4
  %763 = and i1 %761, %762
  br i1 %763, label %730, label %766, !llvm.loop !128

764:                                              ; preds = %704
  %765 = getelementptr inbounds i8, ptr %497, i64 %708
  br label %766

766:                                              ; preds = %759, %717, %713, %711, %764
  %767 = phi ptr [ %765, %764 ], [ %497, %713 ], [ %497, %711 ], [ %726, %717 ], [ %760, %759 ]
  %768 = icmp ult ptr %767, %495
  %769 = select i1 %768, ptr %495, ptr %767
  %770 = getelementptr inbounds %struct.reg_substr_data, ptr %493, i64 0, i32 1, i64 %499, i32 3
  %771 = getelementptr inbounds %struct.reg_substr_data, ptr %493, i64 0, i32 1, i64 %499, i32 2
  %772 = select i1 %22, ptr %770, ptr %771
  %773 = load ptr, ptr %772, align 8, !tbaa !13
  %774 = load ptr, ptr %773, align 8, !tbaa !24
  %775 = getelementptr inbounds %struct.xpv, ptr %774, i64 0, i32 2
  %776 = load i64, ptr %775, align 8, !tbaa !110
  %777 = getelementptr inbounds i8, ptr %705, i64 %776
  %778 = getelementptr inbounds %struct.sv, ptr %773, i64 0, i32 2
  %779 = load i32, ptr %778, align 4, !tbaa !9
  %780 = icmp ugt i32 %779, -1073741825
  %781 = sext i1 %780 to i64
  %782 = getelementptr inbounds i8, ptr %777, i64 %781
  %783 = icmp ugt ptr %769, %782
  br i1 %783, label %787, label %784

784:                                              ; preds = %766
  %785 = call ptr @Perl_fbm_instr(ptr noundef %769, ptr noundef %782, ptr noundef nonnull %773, i32 noundef %27) #12
  %786 = icmp eq ptr %785, null
  br i1 %786, label %787, label %878

787:                                              ; preds = %766, %784
  %788 = icmp ult ptr %705, %568
  br i1 %788, label %789, label %1516

789:                                              ; preds = %787
  %790 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %791 = icmp eq i8 %790, 0
  br i1 %791, label %801, label %792

792:                                              ; preds = %789
  %793 = icmp ult ptr %705, %4
  br i1 %793, label %794, label %803

794:                                              ; preds = %792
  %795 = load i8, ptr %705, align 1, !tbaa !6
  %796 = zext i8 %795 to i64
  %797 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %796
  %798 = load i8, ptr %797, align 1, !tbaa !6
  %799 = zext i8 %798 to i64
  %800 = getelementptr inbounds i8, ptr %705, i64 %799
  br i1 %569, label %816, label %804

801:                                              ; preds = %789
  %802 = getelementptr inbounds i8, ptr %705, i64 1
  br i1 %569, label %874, label %814

803:                                              ; preds = %792
  br i1 %569, label %816, label %804

804:                                              ; preds = %794, %803
  %805 = phi ptr [ %705, %803 ], [ %800, %794 ]
  %806 = icmp ult ptr %497, %4
  br i1 %806, label %807, label %158

807:                                              ; preds = %804
  %808 = load i8, ptr %497, align 1, !tbaa !6
  %809 = zext i8 %808 to i64
  %810 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %809
  %811 = load i8, ptr %810, align 1, !tbaa !6
  %812 = zext i8 %811 to i64
  %813 = getelementptr inbounds i8, ptr %497, i64 %812
  br label %158

814:                                              ; preds = %801
  %815 = getelementptr inbounds i8, ptr %497, i64 1
  br label %158

816:                                              ; preds = %794, %803
  %817 = phi ptr [ %705, %803 ], [ %800, %794 ]
  %818 = load i64, ptr %500, align 8, !tbaa !44
  %819 = sub nsw i64 1, %818
  %820 = ptrtoint ptr %2 to i64
  %821 = icmp slt i64 %818, 2
  br i1 %821, label %824, label %822

822:                                              ; preds = %816
  %823 = icmp ugt ptr %705, %2
  br i1 %823, label %840, label %158

824:                                              ; preds = %816
  %825 = icmp ne i64 %818, 1
  %826 = and i1 %793, %825
  br i1 %826, label %827, label %158

827:                                              ; preds = %824, %827
  %828 = phi ptr [ %836, %827 ], [ %705, %824 ]
  %829 = phi i64 [ %830, %827 ], [ %819, %824 ]
  %830 = add nsw i64 %829, -1
  %831 = load i8, ptr %828, align 1, !tbaa !6
  %832 = zext i8 %831 to i64
  %833 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %832
  %834 = load i8, ptr %833, align 1, !tbaa !6
  %835 = zext i8 %834 to i64
  %836 = getelementptr inbounds i8, ptr %828, i64 %835
  %837 = icmp ne i64 %830, 0
  %838 = icmp ult ptr %836, %4
  %839 = select i1 %837, i1 %838, i1 false
  br i1 %839, label %827, label %158, !llvm.loop !132

840:                                              ; preds = %822, %869
  %841 = phi i64 [ %844, %869 ], [ %819, %822 ]
  %842 = phi ptr [ %870, %869 ], [ %705, %822 ]
  %843 = ptrtoint ptr %842 to i64
  %844 = add nsw i64 %841, 1
  %845 = getelementptr inbounds i8, ptr %842, i64 -1
  %846 = load i8, ptr %845, align 1, !tbaa !6
  %847 = icmp sgt i8 %846, -1
  br i1 %847, label %869, label %848

848:                                              ; preds = %840
  %849 = icmp ugt ptr %845, %2
  br i1 %849, label %850, label %864

850:                                              ; preds = %848
  %851 = getelementptr i8, ptr %842, i64 %820
  %852 = sub i64 0, %843
  %853 = getelementptr i8, ptr %851, i64 %852
  br label %854

854:                                              ; preds = %859, %850
  %855 = phi ptr [ %860, %859 ], [ %845, %850 ]
  %856 = load i8, ptr %855, align 1, !tbaa !6
  %857 = and i8 %856, -64
  %858 = icmp eq i8 %857, -128
  br i1 %858, label %859, label %864

859:                                              ; preds = %854
  %860 = getelementptr inbounds i8, ptr %855, i64 -1
  %861 = icmp ugt ptr %860, %2
  br i1 %861, label %854, label %862, !llvm.loop !133

862:                                              ; preds = %859
  %863 = load i8, ptr %853, align 1, !tbaa !6
  br label %864

864:                                              ; preds = %854, %862, %848
  %865 = phi ptr [ %845, %848 ], [ %853, %862 ], [ %855, %854 ]
  %866 = phi i8 [ %846, %848 ], [ %863, %862 ], [ %856, %854 ]
  %867 = icmp ugt i8 %866, -63
  br i1 %867, label %869, label %868

868:                                              ; preds = %864
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %869

869:                                              ; preds = %868, %864, %840
  %870 = phi ptr [ %865, %864 ], [ %865, %868 ], [ %845, %840 ]
  %871 = icmp ne i64 %844, 0
  %872 = icmp ugt ptr %870, %2
  %873 = and i1 %871, %872
  br i1 %873, label %840, label %158, !llvm.loop !134

874:                                              ; preds = %801
  %875 = load i64, ptr %500, align 8, !tbaa !44
  %876 = sub i64 0, %875
  %877 = getelementptr inbounds i8, ptr %802, i64 %876
  br label %158

878:                                              ; preds = %784
  br i1 %569, label %879, label %958

879:                                              ; preds = %878
  %880 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %881 = icmp eq i8 %880, 0
  %882 = load i64, ptr %500, align 8, !tbaa !44
  %883 = sub nsw i64 0, %882
  br i1 %881, label %940, label %884

884:                                              ; preds = %879
  %885 = ptrtoint ptr %2 to i64
  %886 = icmp slt i64 %882, 1
  br i1 %886, label %889, label %887

887:                                              ; preds = %884
  %888 = icmp ugt ptr %785, %2
  br i1 %888, label %906, label %945

889:                                              ; preds = %884
  %890 = icmp ne i64 %882, 0
  %891 = icmp ult ptr %785, %2
  %892 = and i1 %891, %890
  br i1 %892, label %893, label %945

893:                                              ; preds = %889, %893
  %894 = phi ptr [ %902, %893 ], [ %785, %889 ]
  %895 = phi i64 [ %896, %893 ], [ %883, %889 ]
  %896 = add nsw i64 %895, -1
  %897 = load i8, ptr %894, align 1, !tbaa !6
  %898 = zext i8 %897 to i64
  %899 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %898
  %900 = load i8, ptr %899, align 1, !tbaa !6
  %901 = zext i8 %900 to i64
  %902 = getelementptr inbounds i8, ptr %894, i64 %901
  %903 = icmp ne i64 %896, 0
  %904 = icmp ult ptr %902, %2
  %905 = select i1 %903, i1 %904, i1 false
  br i1 %905, label %893, label %945, !llvm.loop !126

906:                                              ; preds = %887, %935
  %907 = phi i64 [ %910, %935 ], [ %883, %887 ]
  %908 = phi ptr [ %936, %935 ], [ %785, %887 ]
  %909 = ptrtoint ptr %908 to i64
  %910 = add nsw i64 %907, 1
  %911 = getelementptr inbounds i8, ptr %908, i64 -1
  %912 = load i8, ptr %911, align 1, !tbaa !6
  %913 = icmp sgt i8 %912, -1
  br i1 %913, label %935, label %914

914:                                              ; preds = %906
  %915 = icmp ugt ptr %911, %2
  br i1 %915, label %916, label %930

916:                                              ; preds = %914
  %917 = getelementptr i8, ptr %908, i64 %885
  %918 = sub i64 0, %909
  %919 = getelementptr i8, ptr %917, i64 %918
  br label %920

920:                                              ; preds = %925, %916
  %921 = phi ptr [ %926, %925 ], [ %911, %916 ]
  %922 = load i8, ptr %921, align 1, !tbaa !6
  %923 = and i8 %922, -64
  %924 = icmp eq i8 %923, -128
  br i1 %924, label %925, label %930

925:                                              ; preds = %920
  %926 = getelementptr inbounds i8, ptr %921, i64 -1
  %927 = icmp ugt ptr %926, %2
  br i1 %927, label %920, label %928, !llvm.loop !127

928:                                              ; preds = %925
  %929 = load i8, ptr %919, align 1, !tbaa !6
  br label %930

930:                                              ; preds = %920, %928, %914
  %931 = phi ptr [ %911, %914 ], [ %919, %928 ], [ %921, %920 ]
  %932 = phi i8 [ %912, %914 ], [ %929, %928 ], [ %922, %920 ]
  %933 = icmp ugt i8 %932, -63
  br i1 %933, label %935, label %934

934:                                              ; preds = %930
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %935

935:                                              ; preds = %934, %930, %906
  %936 = phi ptr [ %931, %930 ], [ %931, %934 ], [ %911, %906 ]
  %937 = icmp ne i64 %910, 0
  %938 = icmp ugt ptr %936, %2
  %939 = and i1 %937, %938
  br i1 %939, label %906, label %942, !llvm.loop !128

940:                                              ; preds = %879
  %941 = getelementptr inbounds i8, ptr %785, i64 %883
  br label %955

942:                                              ; preds = %935
  %943 = load i8, ptr %41, align 2, !tbaa !48, !range !97
  %944 = icmp eq i8 %943, 0
  br i1 %944, label %955, label %945

945:                                              ; preds = %893, %887, %889, %942
  %946 = phi ptr [ %936, %942 ], [ %785, %887 ], [ %785, %889 ], [ %902, %893 ]
  %947 = icmp ult ptr %785, %4
  br i1 %947, label %948, label %958

948:                                              ; preds = %945
  %949 = load i8, ptr %785, align 1, !tbaa !6
  %950 = zext i8 %949 to i64
  %951 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %950
  %952 = load i8, ptr %951, align 1, !tbaa !6
  %953 = zext i8 %952 to i64
  %954 = getelementptr inbounds i8, ptr %785, i64 %953
  br label %958

955:                                              ; preds = %940, %942
  %956 = phi ptr [ %941, %940 ], [ %936, %942 ]
  %957 = getelementptr inbounds i8, ptr %785, i64 1
  br label %958

958:                                              ; preds = %488, %484, %878, %948, %945, %955, %1430
  %959 = phi ptr [ %1125, %1430 ], [ %409, %484 ], [ %409, %488 ], [ %494, %878 ], [ %494, %948 ], [ %494, %945 ], [ %494, %955 ]
  %960 = phi ptr [ %1126, %1430 ], [ %159, %484 ], [ %159, %488 ], [ %785, %878 ], [ %954, %948 ], [ %785, %945 ], [ %957, %955 ]
  %961 = phi i8 [ %1127, %1430 ], [ %160, %484 ], [ %160, %488 ], [ %496, %878 ], [ %496, %948 ], [ %496, %945 ], [ %496, %955 ]
  %962 = phi ptr [ %1432, %1430 ], [ %481, %484 ], [ %481, %488 ], [ %497, %878 ], [ %946, %948 ], [ %946, %945 ], [ %956, %955 ]
  %963 = phi i64 [ %1129, %1430 ], [ %162, %484 ], [ %162, %488 ], [ %498, %878 ], [ %498, %948 ], [ %498, %945 ], [ %498, %955 ]
  %964 = and i8 %961, 1
  %965 = icmp eq i8 %964, 0
  %966 = icmp eq ptr %962, %2
  %967 = select i1 %965, i1 true, i1 %966
  br i1 %967, label %1124, label %968

968:                                              ; preds = %958
  %969 = getelementptr inbounds i8, ptr %962, i64 -1
  %970 = load i8, ptr %969, align 1, !tbaa !6
  %971 = icmp eq i8 %970, 10
  br i1 %971, label %1124, label %972

972:                                              ; preds = %968
  %973 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %974 = icmp eq i8 %973, 0
  %975 = load i64, ptr %30, align 8, !tbaa !33
  %976 = sub nsw i64 0, %975
  br i1 %974, label %1032, label %977

977:                                              ; preds = %972
  %978 = icmp slt i64 %975, 1
  br i1 %978, label %981, label %979

979:                                              ; preds = %977
  %980 = icmp ugt ptr %4, %3
  br i1 %980, label %998, label %1034

981:                                              ; preds = %977
  %982 = icmp ne i64 %975, 0
  %983 = icmp ult ptr %4, %3
  %984 = and i1 %983, %982
  br i1 %984, label %985, label %1034

985:                                              ; preds = %981, %985
  %986 = phi ptr [ %994, %985 ], [ %4, %981 ]
  %987 = phi i64 [ %988, %985 ], [ %976, %981 ]
  %988 = add nsw i64 %987, -1
  %989 = load i8, ptr %986, align 1, !tbaa !6
  %990 = zext i8 %989 to i64
  %991 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %990
  %992 = load i8, ptr %991, align 1, !tbaa !6
  %993 = zext i8 %992 to i64
  %994 = getelementptr inbounds i8, ptr %986, i64 %993
  %995 = icmp ne i64 %988, 0
  %996 = icmp ult ptr %994, %3
  %997 = select i1 %995, i1 %996, i1 false
  br i1 %997, label %985, label %1034, !llvm.loop !126

998:                                              ; preds = %979, %1027
  %999 = phi i64 [ %1002, %1027 ], [ %976, %979 ]
  %1000 = phi ptr [ %1028, %1027 ], [ %4, %979 ]
  %1001 = ptrtoint ptr %1000 to i64
  %1002 = add nsw i64 %999, 1
  %1003 = getelementptr inbounds i8, ptr %1000, i64 -1
  %1004 = load i8, ptr %1003, align 1, !tbaa !6
  %1005 = icmp sgt i8 %1004, -1
  br i1 %1005, label %1027, label %1006

1006:                                             ; preds = %998
  %1007 = icmp ugt ptr %1003, %3
  br i1 %1007, label %1008, label %1022

1008:                                             ; preds = %1006
  %1009 = getelementptr i8, ptr %1000, i64 %33
  %1010 = sub i64 0, %1001
  %1011 = getelementptr i8, ptr %1009, i64 %1010
  br label %1012

1012:                                             ; preds = %1017, %1008
  %1013 = phi ptr [ %1018, %1017 ], [ %1003, %1008 ]
  %1014 = load i8, ptr %1013, align 1, !tbaa !6
  %1015 = and i8 %1014, -64
  %1016 = icmp eq i8 %1015, -128
  br i1 %1016, label %1017, label %1022

1017:                                             ; preds = %1012
  %1018 = getelementptr inbounds i8, ptr %1013, i64 -1
  %1019 = icmp ugt ptr %1018, %3
  br i1 %1019, label %1012, label %1020, !llvm.loop !127

1020:                                             ; preds = %1017
  %1021 = load i8, ptr %1011, align 1, !tbaa !6
  br label %1022

1022:                                             ; preds = %1012, %1020, %1006
  %1023 = phi ptr [ %1003, %1006 ], [ %1011, %1020 ], [ %1013, %1012 ]
  %1024 = phi i8 [ %1004, %1006 ], [ %1021, %1020 ], [ %1014, %1012 ]
  %1025 = icmp ugt i8 %1024, -63
  br i1 %1025, label %1027, label %1026

1026:                                             ; preds = %1022
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1027

1027:                                             ; preds = %1026, %1022, %998
  %1028 = phi ptr [ %1023, %1022 ], [ %1023, %1026 ], [ %1003, %998 ]
  %1029 = icmp ne i64 %1002, 0
  %1030 = icmp ugt ptr %1028, %3
  %1031 = and i1 %1029, %1030
  br i1 %1031, label %998, label %1034, !llvm.loop !128

1032:                                             ; preds = %972
  %1033 = getelementptr inbounds i8, ptr %4, i64 %976
  br label %1034

1034:                                             ; preds = %1027, %985, %981, %979, %1032
  %1035 = phi ptr [ %1033, %1032 ], [ %4, %981 ], [ %4, %979 ], [ %994, %985 ], [ %1028, %1027 ]
  %1036 = icmp ugt ptr %1035, %962
  br i1 %1036, label %1037, label %1516

1037:                                             ; preds = %1034
  %1038 = ptrtoint ptr %1035 to i64
  %1039 = ptrtoint ptr %962 to i64
  %1040 = sub i64 %1038, %1039
  %1041 = call ptr @memchr(ptr noundef %962, i32 noundef 10, i64 noundef %1040) #13
  %1042 = icmp eq ptr %1041, null
  br i1 %1042, label %1516, label %1043

1043:                                             ; preds = %1037
  %1044 = getelementptr inbounds i8, ptr %1041, i64 1
  %1045 = load ptr, ptr %11, align 8, !tbaa !43
  %1046 = load i8, ptr %1045, align 8, !tbaa !123
  %1047 = icmp eq i8 %1046, 0
  br i1 %1047, label %158, label %1048

1048:                                             ; preds = %1043
  %1049 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %1050 = icmp eq i8 %1049, 0
  %1051 = getelementptr inbounds %struct.reg_substr_data, ptr %1045, i64 0, i32 1, i64 2
  %1052 = load i64, ptr %1051, align 8, !tbaa !44
  %1053 = sub nsw i64 0, %1052
  br i1 %1050, label %1109, label %1054

1054:                                             ; preds = %1048
  %1055 = icmp slt i64 %1052, 1
  br i1 %1055, label %1058, label %1056

1056:                                             ; preds = %1054
  %1057 = icmp ugt ptr %959, %3
  br i1 %1057, label %1075, label %1111

1058:                                             ; preds = %1054
  %1059 = icmp ne i64 %1052, 0
  %1060 = icmp ult ptr %959, %3
  %1061 = and i1 %1060, %1059
  br i1 %1061, label %1062, label %1111

1062:                                             ; preds = %1058, %1062
  %1063 = phi ptr [ %1071, %1062 ], [ %959, %1058 ]
  %1064 = phi i64 [ %1065, %1062 ], [ %1053, %1058 ]
  %1065 = add nsw i64 %1064, -1
  %1066 = load i8, ptr %1063, align 1, !tbaa !6
  %1067 = zext i8 %1066 to i64
  %1068 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1067
  %1069 = load i8, ptr %1068, align 1, !tbaa !6
  %1070 = zext i8 %1069 to i64
  %1071 = getelementptr inbounds i8, ptr %1063, i64 %1070
  %1072 = icmp ne i64 %1065, 0
  %1073 = icmp ult ptr %1071, %3
  %1074 = select i1 %1072, i1 %1073, i1 false
  br i1 %1074, label %1062, label %1111, !llvm.loop !126

1075:                                             ; preds = %1056, %1104
  %1076 = phi i64 [ %1079, %1104 ], [ %1053, %1056 ]
  %1077 = phi ptr [ %1105, %1104 ], [ %959, %1056 ]
  %1078 = ptrtoint ptr %1077 to i64
  %1079 = add nsw i64 %1076, 1
  %1080 = getelementptr inbounds i8, ptr %1077, i64 -1
  %1081 = load i8, ptr %1080, align 1, !tbaa !6
  %1082 = icmp sgt i8 %1081, -1
  br i1 %1082, label %1104, label %1083

1083:                                             ; preds = %1075
  %1084 = icmp ugt ptr %1080, %3
  br i1 %1084, label %1085, label %1099

1085:                                             ; preds = %1083
  %1086 = getelementptr i8, ptr %1077, i64 %33
  %1087 = sub i64 0, %1078
  %1088 = getelementptr i8, ptr %1086, i64 %1087
  br label %1089

1089:                                             ; preds = %1094, %1085
  %1090 = phi ptr [ %1095, %1094 ], [ %1080, %1085 ]
  %1091 = load i8, ptr %1090, align 1, !tbaa !6
  %1092 = and i8 %1091, -64
  %1093 = icmp eq i8 %1092, -128
  br i1 %1093, label %1094, label %1099

1094:                                             ; preds = %1089
  %1095 = getelementptr inbounds i8, ptr %1090, i64 -1
  %1096 = icmp ugt ptr %1095, %3
  br i1 %1096, label %1089, label %1097, !llvm.loop !127

1097:                                             ; preds = %1094
  %1098 = load i8, ptr %1088, align 1, !tbaa !6
  br label %1099

1099:                                             ; preds = %1089, %1097, %1083
  %1100 = phi ptr [ %1080, %1083 ], [ %1088, %1097 ], [ %1090, %1089 ]
  %1101 = phi i8 [ %1081, %1083 ], [ %1098, %1097 ], [ %1091, %1089 ]
  %1102 = icmp ugt i8 %1101, -63
  br i1 %1102, label %1104, label %1103

1103:                                             ; preds = %1099
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1104

1104:                                             ; preds = %1103, %1099, %1075
  %1105 = phi ptr [ %1100, %1099 ], [ %1100, %1103 ], [ %1080, %1075 ]
  %1106 = icmp ne i64 %1079, 0
  %1107 = icmp ugt ptr %1105, %3
  %1108 = and i1 %1106, %1107
  br i1 %1108, label %1075, label %1111, !llvm.loop !128

1109:                                             ; preds = %1048
  %1110 = getelementptr inbounds i8, ptr %959, i64 %1053
  br label %1111

1111:                                             ; preds = %1104, %1062, %1058, %1056, %1109
  %1112 = phi ptr [ %1110, %1109 ], [ %959, %1058 ], [ %959, %1056 ], [ %1071, %1062 ], [ %1105, %1104 ]
  %1113 = icmp ult ptr %1044, %1112
  br i1 %1113, label %1114, label %158

1114:                                             ; preds = %1111
  %1115 = load ptr, ptr %11, align 8, !tbaa !43
  br i1 %22, label %1116, label %1120

1116:                                             ; preds = %1114
  %1117 = getelementptr inbounds %struct.reg_substr_data, ptr %1115, i64 0, i32 1, i64 0, i32 3
  %1118 = load ptr, ptr %1117, align 8, !tbaa !101
  %1119 = icmp eq ptr %1118, null
  br i1 %1119, label %1124, label %492

1120:                                             ; preds = %1114
  %1121 = getelementptr inbounds %struct.reg_substr_data, ptr %1115, i64 0, i32 1, i64 0, i32 2
  %1122 = load ptr, ptr %1121, align 8, !tbaa !100
  %1123 = icmp eq ptr %1122, null
  br i1 %1123, label %1124, label %492

1124:                                             ; preds = %1120, %1116, %151, %149, %140, %968, %958
  %1125 = phi ptr [ %959, %968 ], [ %959, %958 ], [ %119, %140 ], [ %119, %149 ], [ %119, %151 ], [ %959, %1116 ], [ %959, %1120 ]
  %1126 = phi ptr [ %960, %968 ], [ %960, %958 ], [ %3, %140 ], [ %3, %149 ], [ %3, %151 ], [ %960, %1116 ], [ %960, %1120 ]
  %1127 = phi i8 [ %961, %968 ], [ %961, %958 ], [ 0, %140 ], [ 0, %149 ], [ 0, %151 ], [ %961, %1116 ], [ %961, %1120 ]
  %1128 = phi ptr [ %962, %968 ], [ %962, %958 ], [ %3, %140 ], [ %3, %149 ], [ %3, %151 ], [ %1044, %1116 ], [ %1044, %1120 ]
  %1129 = phi i64 [ %963, %968 ], [ %963, %958 ], [ 0, %140 ], [ 0, %149 ], [ 0, %151 ], [ %963, %1116 ], [ %963, %1120 ]
  %1130 = getelementptr inbounds %struct.regexp_internal, ptr %29, i64 0, i32 2
  %1131 = load ptr, ptr %1130, align 8, !tbaa !117
  %1132 = icmp eq ptr %1131, null
  br i1 %1132, label %1433, label %1133

1133:                                             ; preds = %1124
  %1134 = getelementptr inbounds %struct.regnode, ptr %1131, i64 0, i32 1
  %1135 = load i8, ptr %1134, align 1, !tbaa !119
  %1136 = zext i8 %1135 to i64
  %1137 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %1136
  %1138 = load i8, ptr %1137, align 1, !tbaa !6
  %1139 = icmp eq i8 %1138, 72
  br i1 %1139, label %1433, label %1140

1140:                                             ; preds = %1133
  %1141 = getelementptr inbounds %struct.regnode_string, ptr %1131, i64 0, i32 3
  %1142 = icmp eq i8 %1138, 31
  br i1 %1142, label %1143, label %1151

1143:                                             ; preds = %1140
  %1144 = load i8, ptr %47, align 1, !tbaa !51, !range !97, !noundef !98
  %1145 = icmp eq i8 %1144, 0
  %1146 = load i8, ptr %1131, align 2, !tbaa !135
  %1147 = zext i8 %1146 to i64
  br i1 %1145, label %1151, label %1148

1148:                                             ; preds = %1143
  %1149 = getelementptr inbounds i8, ptr %1141, i64 %1147
  %1150 = call i64 @Perl_utf8_distance(ptr noundef nonnull %1149, ptr noundef nonnull %1141) #12
  br label %1151

1151:                                             ; preds = %1143, %1140, %1148
  %1152 = phi i64 [ %1150, %1148 ], [ 1, %1140 ], [ %1147, %1143 ]
  %1153 = load ptr, ptr %11, align 8, !tbaa !43
  %1154 = getelementptr inbounds %struct.reg_substr_data, ptr %1153, i64 0, i32 1, i64 0, i32 2
  %1155 = load ptr, ptr %1154, align 8, !tbaa !100
  %1156 = icmp eq ptr %1155, null
  br i1 %1156, label %1157, label %1164

1157:                                             ; preds = %1151
  %1158 = getelementptr inbounds %struct.reg_substr_data, ptr %1153, i64 0, i32 1, i64 0, i32 3
  %1159 = load ptr, ptr %1158, align 8, !tbaa !101
  %1160 = icmp eq ptr %1159, null
  %1161 = and i8 %1127, 1
  %1162 = icmp eq i8 %1161, 0
  %1163 = and i1 %1162, %1160
  br i1 %1163, label %1229, label %1164

1164:                                             ; preds = %1157, %1151
  %1165 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %1166 = icmp eq i8 %1165, 0
  %1167 = load i64, ptr %30, align 8, !tbaa !33
  %1168 = icmp eq i64 %1167, 0
  %1169 = shl i64 %1152, 32
  %1170 = ashr exact i64 %1169, 32
  %1171 = select i1 %1168, i64 0, i64 %1170
  br i1 %1166, label %1227, label %1172

1172:                                             ; preds = %1164
  %1173 = icmp sgt i64 %1171, -1
  br i1 %1173, label %1176, label %1174

1174:                                             ; preds = %1172
  %1175 = icmp ugt ptr %1128, %4
  br i1 %1175, label %1193, label %1365

1176:                                             ; preds = %1172
  %1177 = icmp ne i64 %1171, 0
  %1178 = icmp ult ptr %1128, %4
  %1179 = and i1 %1178, %1177
  br i1 %1179, label %1180, label %1365

1180:                                             ; preds = %1176, %1180
  %1181 = phi ptr [ %1189, %1180 ], [ %1128, %1176 ]
  %1182 = phi i64 [ %1183, %1180 ], [ %1170, %1176 ]
  %1183 = add nsw i64 %1182, -1
  %1184 = load i8, ptr %1181, align 1, !tbaa !6
  %1185 = zext i8 %1184 to i64
  %1186 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1185
  %1187 = load i8, ptr %1186, align 1, !tbaa !6
  %1188 = zext i8 %1187 to i64
  %1189 = getelementptr inbounds i8, ptr %1181, i64 %1188
  %1190 = icmp ne i64 %1183, 0
  %1191 = icmp ult ptr %1189, %4
  %1192 = select i1 %1190, i1 %1191, i1 false
  br i1 %1192, label %1180, label %1365, !llvm.loop !126

1193:                                             ; preds = %1174, %1222
  %1194 = phi i64 [ %1197, %1222 ], [ %1170, %1174 ]
  %1195 = phi ptr [ %1223, %1222 ], [ %1128, %1174 ]
  %1196 = ptrtoint ptr %1195 to i64
  %1197 = add nsw i64 %1194, 1
  %1198 = getelementptr inbounds i8, ptr %1195, i64 -1
  %1199 = load i8, ptr %1198, align 1, !tbaa !6
  %1200 = icmp sgt i8 %1199, -1
  br i1 %1200, label %1222, label %1201

1201:                                             ; preds = %1193
  %1202 = icmp ugt ptr %1198, %4
  br i1 %1202, label %1203, label %1217

1203:                                             ; preds = %1201
  %1204 = getelementptr i8, ptr %1195, i64 %32
  %1205 = sub i64 0, %1196
  %1206 = getelementptr i8, ptr %1204, i64 %1205
  br label %1207

1207:                                             ; preds = %1212, %1203
  %1208 = phi ptr [ %1213, %1212 ], [ %1198, %1203 ]
  %1209 = load i8, ptr %1208, align 1, !tbaa !6
  %1210 = and i8 %1209, -64
  %1211 = icmp eq i8 %1210, -128
  br i1 %1211, label %1212, label %1217

1212:                                             ; preds = %1207
  %1213 = getelementptr inbounds i8, ptr %1208, i64 -1
  %1214 = icmp ugt ptr %1213, %4
  br i1 %1214, label %1207, label %1215, !llvm.loop !127

1215:                                             ; preds = %1212
  %1216 = load i8, ptr %1206, align 1, !tbaa !6
  br label %1217

1217:                                             ; preds = %1207, %1215, %1201
  %1218 = phi ptr [ %1198, %1201 ], [ %1206, %1215 ], [ %1208, %1207 ]
  %1219 = phi i8 [ %1199, %1201 ], [ %1216, %1215 ], [ %1209, %1207 ]
  %1220 = icmp ugt i8 %1219, -63
  br i1 %1220, label %1222, label %1221

1221:                                             ; preds = %1217
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1222

1222:                                             ; preds = %1221, %1217, %1193
  %1223 = phi ptr [ %1218, %1217 ], [ %1218, %1221 ], [ %1198, %1193 ]
  %1224 = icmp ne i64 %1197, 0
  %1225 = icmp ugt ptr %1223, %4
  %1226 = and i1 %1224, %1225
  br i1 %1226, label %1193, label %1365, !llvm.loop !128

1227:                                             ; preds = %1164
  %1228 = getelementptr inbounds i8, ptr %1128, i64 %1171
  br label %1365

1229:                                             ; preds = %1157
  %1230 = getelementptr inbounds %struct.reg_substr_data, ptr %1153, i64 0, i32 1, i64 1, i32 2
  %1231 = load ptr, ptr %1230, align 8, !tbaa !100
  %1232 = icmp eq ptr %1231, null
  br i1 %1232, label %1233, label %1237

1233:                                             ; preds = %1229
  %1234 = getelementptr inbounds %struct.reg_substr_data, ptr %1153, i64 0, i32 1, i64 1, i32 3
  %1235 = load ptr, ptr %1234, align 8, !tbaa !101
  %1236 = icmp eq ptr %1235, null
  br i1 %1236, label %1365, label %1237

1237:                                             ; preds = %1233, %1229
  %1238 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %1239 = icmp eq i8 %1238, 0
  %1240 = sub nsw i64 0, %14
  br i1 %1239, label %1297, label %1241

1241:                                             ; preds = %1237
  %1242 = ptrtoint ptr %2 to i64
  %1243 = icmp slt i64 %14, 1
  br i1 %1243, label %1246, label %1244

1244:                                             ; preds = %1241
  %1245 = icmp ugt ptr %1125, %2
  br i1 %1245, label %1263, label %1302

1246:                                             ; preds = %1241
  %1247 = icmp ne i64 %14, 0
  %1248 = icmp ult ptr %1125, %2
  %1249 = and i1 %1247, %1248
  br i1 %1249, label %1250, label %1302

1250:                                             ; preds = %1246, %1250
  %1251 = phi ptr [ %1259, %1250 ], [ %1125, %1246 ]
  %1252 = phi i64 [ %1253, %1250 ], [ %1240, %1246 ]
  %1253 = add nsw i64 %1252, -1
  %1254 = load i8, ptr %1251, align 1, !tbaa !6
  %1255 = zext i8 %1254 to i64
  %1256 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1255
  %1257 = load i8, ptr %1256, align 1, !tbaa !6
  %1258 = zext i8 %1257 to i64
  %1259 = getelementptr inbounds i8, ptr %1251, i64 %1258
  %1260 = icmp ne i64 %1253, 0
  %1261 = icmp ult ptr %1259, %2
  %1262 = select i1 %1260, i1 %1261, i1 false
  br i1 %1262, label %1250, label %1302, !llvm.loop !126

1263:                                             ; preds = %1244, %1292
  %1264 = phi i64 [ %1267, %1292 ], [ %1240, %1244 ]
  %1265 = phi ptr [ %1293, %1292 ], [ %1125, %1244 ]
  %1266 = ptrtoint ptr %1265 to i64
  %1267 = add nsw i64 %1264, 1
  %1268 = getelementptr inbounds i8, ptr %1265, i64 -1
  %1269 = load i8, ptr %1268, align 1, !tbaa !6
  %1270 = icmp sgt i8 %1269, -1
  br i1 %1270, label %1292, label %1271

1271:                                             ; preds = %1263
  %1272 = icmp ugt ptr %1268, %2
  br i1 %1272, label %1273, label %1287

1273:                                             ; preds = %1271
  %1274 = getelementptr i8, ptr %1265, i64 %1242
  %1275 = sub i64 0, %1266
  %1276 = getelementptr i8, ptr %1274, i64 %1275
  br label %1277

1277:                                             ; preds = %1282, %1273
  %1278 = phi ptr [ %1283, %1282 ], [ %1268, %1273 ]
  %1279 = load i8, ptr %1278, align 1, !tbaa !6
  %1280 = and i8 %1279, -64
  %1281 = icmp eq i8 %1280, -128
  br i1 %1281, label %1282, label %1287

1282:                                             ; preds = %1277
  %1283 = getelementptr inbounds i8, ptr %1278, i64 -1
  %1284 = icmp ugt ptr %1283, %2
  br i1 %1284, label %1277, label %1285, !llvm.loop !127

1285:                                             ; preds = %1282
  %1286 = load i8, ptr %1276, align 1, !tbaa !6
  br label %1287

1287:                                             ; preds = %1277, %1285, %1271
  %1288 = phi ptr [ %1268, %1271 ], [ %1276, %1285 ], [ %1278, %1277 ]
  %1289 = phi i8 [ %1269, %1271 ], [ %1286, %1285 ], [ %1279, %1277 ]
  %1290 = icmp ugt i8 %1289, -63
  br i1 %1290, label %1292, label %1291

1291:                                             ; preds = %1287
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1292

1292:                                             ; preds = %1291, %1287, %1263
  %1293 = phi ptr [ %1288, %1287 ], [ %1288, %1291 ], [ %1268, %1263 ]
  %1294 = icmp ne i64 %1267, 0
  %1295 = icmp ugt ptr %1293, %2
  %1296 = and i1 %1294, %1295
  br i1 %1296, label %1263, label %1299, !llvm.loop !128

1297:                                             ; preds = %1237
  %1298 = getelementptr inbounds i8, ptr %1125, i64 %1240
  br label %1360

1299:                                             ; preds = %1292
  %1300 = load i8, ptr %41, align 2, !tbaa !48
  %1301 = icmp eq i8 %1300, 0
  br i1 %1301, label %1360, label %1302

1302:                                             ; preds = %1250, %1246, %1244, %1299
  %1303 = phi ptr [ %1293, %1299 ], [ %1125, %1246 ], [ %1125, %1244 ], [ %1259, %1250 ]
  %1304 = shl i64 %1152, 32
  %1305 = ashr exact i64 %1304, 32
  %1306 = icmp sgt i64 %1304, -4294967296
  br i1 %1306, label %1309, label %1307

1307:                                             ; preds = %1302
  %1308 = icmp ugt ptr %1303, %4
  br i1 %1308, label %1326, label %1365

1309:                                             ; preds = %1302
  %1310 = icmp ne i64 %1304, 0
  %1311 = icmp ult ptr %1303, %4
  %1312 = and i1 %1310, %1311
  br i1 %1312, label %1313, label %1365

1313:                                             ; preds = %1309, %1313
  %1314 = phi ptr [ %1322, %1313 ], [ %1303, %1309 ]
  %1315 = phi i64 [ %1316, %1313 ], [ %1305, %1309 ]
  %1316 = add nsw i64 %1315, -1
  %1317 = load i8, ptr %1314, align 1, !tbaa !6
  %1318 = zext i8 %1317 to i64
  %1319 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1318
  %1320 = load i8, ptr %1319, align 1, !tbaa !6
  %1321 = zext i8 %1320 to i64
  %1322 = getelementptr inbounds i8, ptr %1314, i64 %1321
  %1323 = icmp ne i64 %1316, 0
  %1324 = icmp ult ptr %1322, %4
  %1325 = select i1 %1323, i1 %1324, i1 false
  br i1 %1325, label %1313, label %1365, !llvm.loop !126

1326:                                             ; preds = %1307, %1355
  %1327 = phi i64 [ %1330, %1355 ], [ %1305, %1307 ]
  %1328 = phi ptr [ %1356, %1355 ], [ %1303, %1307 ]
  %1329 = ptrtoint ptr %1328 to i64
  %1330 = add nsw i64 %1327, 1
  %1331 = getelementptr inbounds i8, ptr %1328, i64 -1
  %1332 = load i8, ptr %1331, align 1, !tbaa !6
  %1333 = icmp sgt i8 %1332, -1
  br i1 %1333, label %1355, label %1334

1334:                                             ; preds = %1326
  %1335 = icmp ugt ptr %1331, %4
  br i1 %1335, label %1336, label %1350

1336:                                             ; preds = %1334
  %1337 = getelementptr i8, ptr %1328, i64 %32
  %1338 = sub i64 0, %1329
  %1339 = getelementptr i8, ptr %1337, i64 %1338
  br label %1340

1340:                                             ; preds = %1345, %1336
  %1341 = phi ptr [ %1346, %1345 ], [ %1331, %1336 ]
  %1342 = load i8, ptr %1341, align 1, !tbaa !6
  %1343 = and i8 %1342, -64
  %1344 = icmp eq i8 %1343, -128
  br i1 %1344, label %1345, label %1350

1345:                                             ; preds = %1340
  %1346 = getelementptr inbounds i8, ptr %1341, i64 -1
  %1347 = icmp ugt ptr %1346, %4
  br i1 %1347, label %1340, label %1348, !llvm.loop !127

1348:                                             ; preds = %1345
  %1349 = load i8, ptr %1339, align 1, !tbaa !6
  br label %1350

1350:                                             ; preds = %1340, %1348, %1334
  %1351 = phi ptr [ %1331, %1334 ], [ %1339, %1348 ], [ %1341, %1340 ]
  %1352 = phi i8 [ %1332, %1334 ], [ %1349, %1348 ], [ %1342, %1340 ]
  %1353 = icmp ugt i8 %1352, -63
  br i1 %1353, label %1355, label %1354

1354:                                             ; preds = %1350
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1355

1355:                                             ; preds = %1354, %1350, %1326
  %1356 = phi ptr [ %1351, %1350 ], [ %1351, %1354 ], [ %1331, %1326 ]
  %1357 = icmp ne i64 %1330, 0
  %1358 = icmp ugt ptr %1356, %4
  %1359 = and i1 %1357, %1358
  br i1 %1359, label %1326, label %1365, !llvm.loop !128

1360:                                             ; preds = %1297, %1299
  %1361 = phi ptr [ %1298, %1297 ], [ %1293, %1299 ]
  %1362 = shl i64 %1152, 32
  %1363 = ashr exact i64 %1362, 32
  %1364 = getelementptr inbounds i8, ptr %1361, i64 %1363
  br label %1365

1365:                                             ; preds = %1222, %1180, %1355, %1313, %1309, %1307, %1176, %1174, %1233, %1360, %1227
  %1366 = phi ptr [ %1228, %1227 ], [ %1364, %1360 ], [ %4, %1233 ], [ %1128, %1176 ], [ %1128, %1174 ], [ %1303, %1309 ], [ %1303, %1307 ], [ %1322, %1313 ], [ %1356, %1355 ], [ %1189, %1180 ], [ %1223, %1222 ]
  %1367 = phi ptr [ null, %1227 ], [ %1361, %1360 ], [ null, %1233 ], [ null, %1176 ], [ null, %1174 ], [ %1303, %1309 ], [ %1303, %1307 ], [ %1303, %1313 ], [ %1303, %1355 ], [ null, %1180 ], [ null, %1222 ]
  %1368 = load ptr, ptr %1130, align 8, !tbaa !117
  %1369 = call fastcc ptr @S_find_byclass(ptr noundef %10, ptr noundef %1368, ptr noundef %1128, ptr noundef %1366, ptr noundef nonnull %8)
  %1370 = icmp eq ptr %1369, null
  br i1 %1370, label %1371, label %1433

1371:                                             ; preds = %1365
  %1372 = icmp eq ptr %1366, %4
  br i1 %1372, label %1533, label %1373

1373:                                             ; preds = %1371
  %1374 = load i32, ptr %85, align 4, !tbaa !19
  %1375 = and i32 %1374, 7168
  %1376 = icmp ne i32 %1375, 0
  %1377 = and i8 %1127, 1
  %1378 = icmp eq i8 %1377, 0
  %1379 = and i32 %1374, 2
  %1380 = icmp eq i32 %1379, 0
  %1381 = and i1 %1376, %1380
  %1382 = and i1 %1378, %1381
  br i1 %1382, label %1533, label %1383

1383:                                             ; preds = %1373
  %1384 = load ptr, ptr %11, align 8, !tbaa !43
  %1385 = getelementptr inbounds %struct.reg_substr_data, ptr %1384, i64 0, i32 1, i64 0, i32 2
  %1386 = load ptr, ptr %1385, align 8, !tbaa !100
  %1387 = icmp eq ptr %1386, null
  br i1 %1387, label %1388, label %1392

1388:                                             ; preds = %1383
  %1389 = getelementptr inbounds %struct.reg_substr_data, ptr %1384, i64 0, i32 1, i64 0, i32 3
  %1390 = load ptr, ptr %1389, align 8, !tbaa !101
  %1391 = icmp eq ptr %1390, null
  br i1 %1391, label %1398, label %1392

1392:                                             ; preds = %1388, %1383
  %1393 = load i8, ptr %1384, align 8, !tbaa !123
  %1394 = icmp ne i8 %1393, 1
  %1395 = getelementptr inbounds i8, ptr %1128, i64 %14
  %1396 = icmp eq ptr %1395, %1125
  %1397 = select i1 %1394, i1 true, i1 %1396
  br i1 %1397, label %1410, label %492

1398:                                             ; preds = %1388
  br i1 %1378, label %1401, label %1399

1399:                                             ; preds = %1398
  %1400 = getelementptr inbounds i8, ptr %1128, i64 1
  br label %1430

1401:                                             ; preds = %1398
  br i1 %22, label %1402, label %1406

1402:                                             ; preds = %1401
  %1403 = getelementptr inbounds %struct.reg_substr_data, ptr %1384, i64 0, i32 1, i64 1, i32 3
  %1404 = load ptr, ptr %1403, align 8, !tbaa !101
  %1405 = icmp eq ptr %1404, null
  br i1 %1405, label %1533, label %1410

1406:                                             ; preds = %1401
  %1407 = getelementptr inbounds %struct.reg_substr_data, ptr %1384, i64 0, i32 1, i64 1, i32 2
  %1408 = load ptr, ptr %1407, align 8, !tbaa !100
  %1409 = icmp eq ptr %1408, null
  br i1 %1409, label %1533, label %1410

1410:                                             ; preds = %1402, %1406, %1392
  %1411 = phi ptr [ %1128, %1392 ], [ %1367, %1406 ], [ %1367, %1402 ]
  %1412 = load i8, ptr %41, align 2, !tbaa !48, !range !97, !noundef !98
  %1413 = icmp eq i8 %1412, 0
  br i1 %1413, label %1423, label %1414

1414:                                             ; preds = %1410
  %1415 = icmp ult ptr %1411, %4
  br i1 %1415, label %1416, label %1425

1416:                                             ; preds = %1414
  %1417 = load i8, ptr %1411, align 1, !tbaa !6
  %1418 = zext i8 %1417 to i64
  %1419 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1418
  %1420 = load i8, ptr %1419, align 1, !tbaa !6
  %1421 = zext i8 %1420 to i64
  %1422 = getelementptr inbounds i8, ptr %1411, i64 %1421
  br label %1425

1423:                                             ; preds = %1410
  %1424 = getelementptr inbounds i8, ptr %1411, i64 1
  br label %1425

1425:                                             ; preds = %1416, %1414, %1423
  %1426 = phi ptr [ %1424, %1423 ], [ %1411, %1414 ], [ %1422, %1416 ]
  %1427 = getelementptr inbounds i8, ptr %1426, i64 %14
  %1428 = getelementptr inbounds i8, ptr %1427, i64 %1129
  %1429 = icmp ugt ptr %1428, %4
  br i1 %1429, label %1533, label %1430

1430:                                             ; preds = %1425, %1399
  %1431 = phi i32 [ 9, %1399 ], [ 7, %1425 ]
  %1432 = phi ptr [ %1400, %1399 ], [ %1426, %1425 ]
  switch i32 %1431, label %1533 [
    i32 7, label %158
    i32 9, label %958
  ]

1433:                                             ; preds = %1365, %1133, %1124
  %1434 = icmp eq ptr %1128, %3
  br i1 %1434, label %1445, label %1435

1435:                                             ; preds = %1433
  %1436 = load ptr, ptr %11, align 8, !tbaa !43
  %1437 = getelementptr inbounds %struct.reg_substr_data, ptr %1436, i64 0, i32 1, i64 2, i32 3
  %1438 = getelementptr inbounds %struct.reg_substr_data, ptr %1436, i64 0, i32 1, i64 2, i32 2
  %1439 = select i1 %22, ptr %1437, ptr %1438
  %1440 = load ptr, ptr %1439, align 8, !tbaa !13
  %1441 = load ptr, ptr %1440, align 8, !tbaa !24
  %1442 = getelementptr inbounds %struct.xpviv, ptr %1441, i64 0, i32 4
  %1443 = load i64, ptr %1442, align 8, !tbaa !6
  %1444 = add nsw i64 %1443, 1
  store i64 %1444, ptr %1442, align 8, !tbaa !6
  br label %1533

1445:                                             ; preds = %1433
  %1446 = load i32, ptr %85, align 4, !tbaa !19
  %1447 = and i32 %1446, 4
  %1448 = icmp eq i32 %1447, 0
  br i1 %1448, label %1449, label %1533

1449:                                             ; preds = %1445
  %1450 = load ptr, ptr %11, align 8, !tbaa !43
  br i1 %22, label %1451, label %1468

1451:                                             ; preds = %1449
  %1452 = getelementptr inbounds %struct.reg_substr_data, ptr %1450, i64 0, i32 1, i64 2, i32 3
  %1453 = load ptr, ptr %1452, align 8, !tbaa !101
  %1454 = icmp eq ptr %1453, null
  br i1 %1454, label %1533, label %1455

1455:                                             ; preds = %1451
  %1456 = load ptr, ptr %1453, align 8, !tbaa !24
  %1457 = getelementptr inbounds %struct.xpviv, ptr %1456, i64 0, i32 4
  %1458 = load i64, ptr %1457, align 8, !tbaa !6
  %1459 = add nsw i64 %1458, -1
  store i64 %1459, ptr %1457, align 8, !tbaa !6
  %1460 = icmp slt i64 %1458, 1
  br i1 %1460, label %1461, label %1533

1461:                                             ; preds = %1455
  %1462 = load ptr, ptr %11, align 8, !tbaa !43
  %1463 = getelementptr inbounds %struct.reg_substr_data, ptr %1462, i64 0, i32 1, i64 2, i32 3
  %1464 = load ptr, ptr %1463, align 8, !tbaa !13
  %1465 = getelementptr inbounds %struct.reg_substr_data, ptr %1462, i64 0, i32 1, i64 1, i32 3
  %1466 = load ptr, ptr %1465, align 8, !tbaa !101
  %1467 = icmp eq ptr %1464, %1466
  br i1 %1467, label %1485, label %1533

1468:                                             ; preds = %1449
  %1469 = getelementptr inbounds %struct.reg_substr_data, ptr %1450, i64 0, i32 1, i64 2, i32 2
  %1470 = load ptr, ptr %1469, align 8, !tbaa !100
  %1471 = icmp eq ptr %1470, null
  br i1 %1471, label %1533, label %1472

1472:                                             ; preds = %1468
  %1473 = load ptr, ptr %1470, align 8, !tbaa !24
  %1474 = getelementptr inbounds %struct.xpviv, ptr %1473, i64 0, i32 4
  %1475 = load i64, ptr %1474, align 8, !tbaa !6
  %1476 = add nsw i64 %1475, -1
  store i64 %1476, ptr %1474, align 8, !tbaa !6
  %1477 = icmp slt i64 %1475, 1
  br i1 %1477, label %1478, label %1533

1478:                                             ; preds = %1472
  %1479 = load ptr, ptr %11, align 8, !tbaa !43
  %1480 = getelementptr inbounds %struct.reg_substr_data, ptr %1479, i64 0, i32 1, i64 2, i32 2
  %1481 = load ptr, ptr %1480, align 8, !tbaa !13
  %1482 = getelementptr inbounds %struct.reg_substr_data, ptr %1479, i64 0, i32 1, i64 1, i32 2
  %1483 = load ptr, ptr %1482, align 8, !tbaa !100
  %1484 = icmp eq ptr %1481, %1483
  br i1 %1484, label %1485, label %1533

1485:                                             ; preds = %1478, %1461
  %1486 = phi ptr [ %1464, %1461 ], [ %1481, %1478 ]
  %1487 = icmp eq ptr %1486, null
  br i1 %1487, label %1495, label %1488

1488:                                             ; preds = %1485
  %1489 = getelementptr inbounds %struct.sv, ptr %1486, i64 0, i32 1
  %1490 = load i32, ptr %1489, align 8, !tbaa !78
  %1491 = icmp ugt i32 %1490, 1
  br i1 %1491, label %1492, label %1494

1492:                                             ; preds = %1488
  %1493 = add i32 %1490, -1
  store i32 %1493, ptr %1489, align 8, !tbaa !78
  br label %1495

1494:                                             ; preds = %1488
  call void @Perl_sv_free2(ptr noundef nonnull %1486, i32 noundef %1490) #12
  br label %1495

1495:                                             ; preds = %1485, %1492, %1494
  %1496 = load ptr, ptr %11, align 8, !tbaa !43
  %1497 = getelementptr inbounds %struct.reg_substr_data, ptr %1496, i64 0, i32 1, i64 2, i32 2
  %1498 = getelementptr inbounds %struct.reg_substr_data, ptr %1496, i64 0, i32 1, i64 2, i32 3
  %1499 = select i1 %22, ptr %1497, ptr %1498
  %1500 = load ptr, ptr %1499, align 8, !tbaa !13
  %1501 = icmp eq ptr %1500, null
  br i1 %1501, label %1510, label %1502

1502:                                             ; preds = %1495
  %1503 = getelementptr inbounds %struct.sv, ptr %1500, i64 0, i32 1
  %1504 = load i32, ptr %1503, align 8, !tbaa !78
  %1505 = icmp ugt i32 %1504, 1
  br i1 %1505, label %1506, label %1508

1506:                                             ; preds = %1502
  %1507 = add i32 %1504, -1
  store i32 %1507, ptr %1503, align 8, !tbaa !78
  br label %1510

1508:                                             ; preds = %1502
  call void @Perl_sv_free2(ptr noundef nonnull %1500, i32 noundef %1504) #12
  %1509 = load ptr, ptr %11, align 8, !tbaa !43
  br label %1510

1510:                                             ; preds = %1495, %1506, %1508
  %1511 = phi ptr [ %1496, %1495 ], [ %1496, %1506 ], [ %1509, %1508 ]
  %1512 = getelementptr inbounds %struct.reg_substr_data, ptr %1511, i64 0, i32 1, i64 2, i32 2
  %1513 = getelementptr inbounds %struct.reg_substr_data, ptr %1511, i64 0, i32 1, i64 1, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1513, i8 0, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1512, i8 0, i64 16, i1 false)
  %1514 = load i32, ptr %25, align 8, !tbaa !35
  %1515 = and i32 %1514, -6291457
  store i32 %1515, ptr %25, align 8, !tbaa !35
  br label %1533

1516:                                             ; preds = %1034, %1037, %299, %240, %297, %259, %143, %151, %127, %136, %166, %303, %407, %787
  %1517 = load ptr, ptr %11, align 8, !tbaa !43
  %1518 = getelementptr inbounds %struct.reg_substr_data, ptr %1517, i64 0, i32 1, i64 2, i32 2
  %1519 = load ptr, ptr %1518, align 8, !tbaa !100
  %1520 = icmp eq ptr %1519, null
  br i1 %1520, label %1521, label %1525

1521:                                             ; preds = %1516
  %1522 = getelementptr inbounds %struct.reg_substr_data, ptr %1517, i64 0, i32 1, i64 2, i32 3
  %1523 = load ptr, ptr %1522, align 8, !tbaa !101
  %1524 = icmp eq ptr %1523, null
  br i1 %1524, label %1533, label %1525

1525:                                             ; preds = %1521, %1516
  %1526 = getelementptr inbounds %struct.reg_substr_data, ptr %1517, i64 0, i32 1, i64 2, i32 3
  %1527 = select i1 %22, ptr %1526, ptr %1518
  %1528 = load ptr, ptr %1527, align 8, !tbaa !13
  %1529 = load ptr, ptr %1528, align 8, !tbaa !24
  %1530 = getelementptr inbounds %struct.xpviv, ptr %1529, i64 0, i32 4
  %1531 = load i64, ptr %1530, align 8, !tbaa !6
  %1532 = add nsw i64 %1531, 5
  store i64 %1532, ptr %1530, align 8, !tbaa !6
  br label %1533

1533:                                             ; preds = %1425, %1402, %1406, %1373, %1371, %21, %74, %1525, %1521, %96, %1435, %1510, %1478, %1472, %1468, %1461, %1455, %1451, %1445, %1430
  %1534 = phi ptr [ %3, %1445 ], [ %3, %1451 ], [ %3, %1455 ], [ %3, %1461 ], [ %3, %1468 ], [ %3, %1472 ], [ %3, %1478 ], [ %3, %1510 ], [ %1128, %1435 ], [ null, %96 ], [ null, %1521 ], [ null, %1525 ], [ null, %74 ], [ null, %21 ], [ null, %1430 ], [ null, %1371 ], [ null, %1373 ], [ null, %1406 ], [ null, %1402 ], [ null, %1425 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %8) #12
  ret ptr %1534
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_to_utf8_substr(ptr nocapture noundef readonly %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 11
  %3 = load ptr, ptr %2, align 8, !tbaa !43
  %4 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !100
  %6 = icmp eq ptr %5, null
  br i1 %6, label %43, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !101
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %43

11:                                               ; preds = %7
  %12 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %5) #12
  %13 = load ptr, ptr %2, align 8, !tbaa !43
  %14 = getelementptr inbounds %struct.reg_substr_data, ptr %13, i64 0, i32 1, i64 1, i32 3
  store ptr %12, ptr %14, align 8, !tbaa !101
  %15 = tail call i64 @Perl_sv_utf8_upgrade_flags_grow(ptr noundef %12, i32 noundef 2, i64 noundef 0) #12
  %16 = load ptr, ptr %2, align 8, !tbaa !43
  %17 = getelementptr inbounds %struct.reg_substr_data, ptr %16, i64 0, i32 1, i64 1, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !100
  %19 = getelementptr inbounds %struct.sv, ptr %18, i64 0, i32 2
  %20 = load i32, ptr %19, align 4, !tbaa !9
  %21 = and i32 %20, 1073741824
  %22 = icmp eq i32 %21, 0
  %23 = and i32 %20, 49152
  %24 = icmp eq i32 %23, 49152
  %25 = or i1 %22, %24
  br i1 %25, label %34, label %26

26:                                               ; preds = %11
  %27 = icmp ugt i32 %20, -1073741825
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = load ptr, ptr %12, align 8, !tbaa !24
  %30 = getelementptr inbounds %struct.xpv, ptr %29, i64 0, i32 2
  %31 = load i64, ptr %30, align 8, !tbaa !110
  %32 = add i64 %31, -1
  store i64 %32, ptr %30, align 8, !tbaa !110
  tail call void @Perl_fbm_compile(ptr noundef nonnull %12, i32 noundef 15) #12
  br label %34

33:                                               ; preds = %26
  tail call void @Perl_fbm_compile(ptr noundef %12, i32 noundef 0) #12
  br label %34

34:                                               ; preds = %28, %33, %11
  %35 = load ptr, ptr %2, align 8, !tbaa !43
  %36 = getelementptr inbounds %struct.reg_substr_data, ptr %35, i64 0, i32 1, i64 1, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !100
  %38 = getelementptr inbounds %struct.reg_substr_data, ptr %35, i64 0, i32 1, i64 2, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !100
  %40 = icmp eq ptr %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.reg_substr_data, ptr %35, i64 0, i32 1, i64 2, i32 3
  store ptr %12, ptr %42, align 8, !tbaa !101
  br label %43

43:                                               ; preds = %34, %41, %1, %7
  %44 = phi ptr [ %35, %34 ], [ %35, %41 ], [ %3, %1 ], [ %3, %7 ]
  %45 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !100
  %47 = icmp eq ptr %46, null
  br i1 %47, label %84, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !101
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %84

52:                                               ; preds = %48
  %53 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %46) #12
  %54 = load ptr, ptr %2, align 8, !tbaa !43
  %55 = getelementptr inbounds %struct.reg_substr_data, ptr %54, i64 0, i32 1, i64 0, i32 3
  store ptr %53, ptr %55, align 8, !tbaa !101
  %56 = tail call i64 @Perl_sv_utf8_upgrade_flags_grow(ptr noundef %53, i32 noundef 2, i64 noundef 0) #12
  %57 = load ptr, ptr %2, align 8, !tbaa !43
  %58 = getelementptr inbounds %struct.reg_substr_data, ptr %57, i64 0, i32 1, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !100
  %60 = getelementptr inbounds %struct.sv, ptr %59, i64 0, i32 2
  %61 = load i32, ptr %60, align 4, !tbaa !9
  %62 = and i32 %61, 1073741824
  %63 = icmp eq i32 %62, 0
  %64 = and i32 %61, 49152
  %65 = icmp eq i32 %64, 49152
  %66 = or i1 %63, %65
  br i1 %66, label %75, label %67

67:                                               ; preds = %52
  %68 = icmp ugt i32 %61, -1073741825
  br i1 %68, label %70, label %69

69:                                               ; preds = %67
  tail call void @Perl_fbm_compile(ptr noundef %53, i32 noundef 0) #12
  br label %75

70:                                               ; preds = %67
  %71 = load ptr, ptr %53, align 8, !tbaa !24
  %72 = getelementptr inbounds %struct.xpv, ptr %71, i64 0, i32 2
  %73 = load i64, ptr %72, align 8, !tbaa !110
  %74 = add i64 %73, -1
  store i64 %74, ptr %72, align 8, !tbaa !110
  tail call void @Perl_fbm_compile(ptr noundef nonnull %53, i32 noundef 15) #12
  br label %75

75:                                               ; preds = %70, %69, %52
  %76 = load ptr, ptr %2, align 8, !tbaa !43
  %77 = getelementptr inbounds %struct.reg_substr_data, ptr %76, i64 0, i32 1, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !100
  %79 = getelementptr inbounds %struct.reg_substr_data, ptr %76, i64 0, i32 1, i64 2, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !100
  %81 = icmp eq ptr %78, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %75
  %83 = getelementptr inbounds %struct.reg_substr_data, ptr %76, i64 0, i32 1, i64 2, i32 3
  store ptr %53, ptr %83, align 8, !tbaa !101
  br label %84

84:                                               ; preds = %82, %75, %48, %43
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_to_byte_substr(ptr nocapture noundef readonly %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 11
  %3 = load ptr, ptr %2, align 8, !tbaa !43
  %4 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !101
  %6 = icmp eq ptr %5, null
  br i1 %6, label %43, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !100
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %43

11:                                               ; preds = %7
  %12 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %5) #12
  %13 = tail call zeroext i1 @Perl_sv_utf8_downgrade(ptr noundef %12, i1 noundef zeroext true) #12
  br i1 %13, label %14, label %84

14:                                               ; preds = %11
  %15 = load ptr, ptr %2, align 8, !tbaa !43
  %16 = getelementptr inbounds %struct.reg_substr_data, ptr %15, i64 0, i32 1, i64 1, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !101
  %18 = getelementptr inbounds %struct.sv, ptr %17, i64 0, i32 2
  %19 = load i32, ptr %18, align 4, !tbaa !9
  %20 = and i32 %19, 1073741824
  %21 = icmp eq i32 %20, 0
  %22 = and i32 %19, 49152
  %23 = icmp eq i32 %22, 49152
  %24 = or i1 %21, %23
  br i1 %24, label %33, label %25

25:                                               ; preds = %14
  %26 = icmp ugt i32 %19, -1073741825
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = load ptr, ptr %12, align 8, !tbaa !24
  %29 = getelementptr inbounds %struct.xpv, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %29, align 8, !tbaa !110
  %31 = add i64 %30, -1
  store i64 %31, ptr %29, align 8, !tbaa !110
  tail call void @Perl_fbm_compile(ptr noundef nonnull %12, i32 noundef 15) #12
  br label %33

32:                                               ; preds = %25
  tail call void @Perl_fbm_compile(ptr noundef %12, i32 noundef 0) #12
  br label %33

33:                                               ; preds = %27, %32, %14
  %34 = load ptr, ptr %2, align 8, !tbaa !43
  %35 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 1, i32 2
  store ptr %12, ptr %35, align 8, !tbaa !100
  %36 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 1, i32 3
  %37 = load ptr, ptr %36, align 8, !tbaa !101
  %38 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 2, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !101
  %40 = icmp eq ptr %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %33
  %42 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 2, i32 2
  store ptr %12, ptr %42, align 8, !tbaa !100
  br label %43

43:                                               ; preds = %41, %33, %1, %7
  %44 = phi ptr [ %34, %41 ], [ %34, %33 ], [ %3, %1 ], [ %3, %7 ]
  %45 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 3
  %46 = load ptr, ptr %45, align 8, !tbaa !101
  %47 = icmp eq ptr %46, null
  br i1 %47, label %84, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !100
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %84

52:                                               ; preds = %48
  %53 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %46) #12
  %54 = tail call zeroext i1 @Perl_sv_utf8_downgrade(ptr noundef %53, i1 noundef zeroext true) #12
  br i1 %54, label %55, label %84

55:                                               ; preds = %52
  %56 = load ptr, ptr %2, align 8, !tbaa !43
  %57 = getelementptr inbounds %struct.reg_substr_data, ptr %56, i64 0, i32 1, i64 0, i32 3
  %58 = load ptr, ptr %57, align 8, !tbaa !101
  %59 = getelementptr inbounds %struct.sv, ptr %58, i64 0, i32 2
  %60 = load i32, ptr %59, align 4, !tbaa !9
  %61 = and i32 %60, 1073741824
  %62 = icmp eq i32 %61, 0
  %63 = and i32 %60, 49152
  %64 = icmp eq i32 %63, 49152
  %65 = or i1 %62, %64
  br i1 %65, label %74, label %66

66:                                               ; preds = %55
  %67 = icmp ugt i32 %60, -1073741825
  br i1 %67, label %69, label %68

68:                                               ; preds = %66
  tail call void @Perl_fbm_compile(ptr noundef %53, i32 noundef 0) #12
  br label %74

69:                                               ; preds = %66
  %70 = load ptr, ptr %53, align 8, !tbaa !24
  %71 = getelementptr inbounds %struct.xpv, ptr %70, i64 0, i32 2
  %72 = load i64, ptr %71, align 8, !tbaa !110
  %73 = add i64 %72, -1
  store i64 %73, ptr %71, align 8, !tbaa !110
  tail call void @Perl_fbm_compile(ptr noundef nonnull %53, i32 noundef 15) #12
  br label %74

74:                                               ; preds = %69, %68, %55
  %75 = load ptr, ptr %2, align 8, !tbaa !43
  %76 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 0, i32 2
  store ptr %53, ptr %76, align 8, !tbaa !100
  %77 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 0, i32 3
  %78 = load ptr, ptr %77, align 8, !tbaa !101
  %79 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 2, i32 3
  %80 = load ptr, ptr %79, align 8, !tbaa !101
  %81 = icmp eq ptr %78, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 2, i32 2
  store ptr %53, ptr %83, align 8, !tbaa !100
  br label %84

84:                                               ; preds = %43, %48, %74, %82, %52, %11
  %85 = phi i1 [ false, %11 ], [ false, %52 ], [ true, %82 ], [ true, %74 ], [ true, %48 ], [ true, %43 ]
  ret i1 %85
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @S_reghop3(ptr noundef %0, i64 noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = ptrtoint ptr %2 to i64
  %5 = icmp sgt i64 %1, -1
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = icmp ugt ptr %0, %2
  br i1 %7, label %25, label %59

8:                                                ; preds = %3
  %9 = icmp ne i64 %1, 0
  %10 = icmp ult ptr %0, %2
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %59

12:                                               ; preds = %8, %12
  %13 = phi ptr [ %21, %12 ], [ %0, %8 ]
  %14 = phi i64 [ %15, %12 ], [ %1, %8 ]
  %15 = add nsw i64 %14, -1
  %16 = load i8, ptr %13, align 1, !tbaa !6
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !6
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds i8, ptr %13, i64 %20
  %22 = icmp ne i64 %15, 0
  %23 = icmp ult ptr %21, %2
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %12, label %59, !llvm.loop !126

25:                                               ; preds = %6, %54
  %26 = phi i64 [ %29, %54 ], [ %1, %6 ]
  %27 = phi ptr [ %55, %54 ], [ %0, %6 ]
  %28 = ptrtoint ptr %27 to i64
  %29 = add nsw i64 %26, 1
  %30 = getelementptr inbounds i8, ptr %27, i64 -1
  %31 = load i8, ptr %30, align 1, !tbaa !6
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %54, label %33

33:                                               ; preds = %25
  %34 = icmp ugt ptr %30, %2
  br i1 %34, label %35, label %49

35:                                               ; preds = %33
  %36 = getelementptr i8, ptr %27, i64 %4
  %37 = sub i64 0, %28
  %38 = getelementptr i8, ptr %36, i64 %37
  br label %39

39:                                               ; preds = %35, %44
  %40 = phi ptr [ %45, %44 ], [ %30, %35 ]
  %41 = load i8, ptr %40, align 1, !tbaa !6
  %42 = and i8 %41, -64
  %43 = icmp eq i8 %42, -128
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds i8, ptr %40, i64 -1
  %46 = icmp ugt ptr %45, %2
  br i1 %46, label %39, label %47, !llvm.loop !127

47:                                               ; preds = %44
  %48 = load i8, ptr %38, align 1, !tbaa !6
  br label %49

49:                                               ; preds = %39, %33, %47
  %50 = phi ptr [ %30, %33 ], [ %38, %47 ], [ %40, %39 ]
  %51 = phi i8 [ %31, %33 ], [ %48, %47 ], [ %41, %39 ]
  %52 = icmp ugt i8 %51, -63
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %54

54:                                               ; preds = %49, %53, %25
  %55 = phi ptr [ %50, %49 ], [ %50, %53 ], [ %30, %25 ]
  %56 = icmp ne i64 %29, 0
  %57 = icmp ugt ptr %55, %2
  %58 = and i1 %56, %57
  br i1 %58, label %25, label %59, !llvm.loop !128

59:                                               ; preds = %54, %12, %6, %8
  %60 = phi ptr [ %0, %8 ], [ %0, %6 ], [ %21, %12 ], [ %55, %54 ]
  ret ptr %60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @S_reghopmaybe3(ptr noundef %0, i64 noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = ptrtoint ptr %2 to i64
  %5 = icmp sgt i64 %1, -1
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = icmp ugt ptr %0, %2
  br i1 %7, label %29, label %67

8:                                                ; preds = %3
  %9 = icmp ne i64 %1, 0
  %10 = icmp ult ptr %0, %2
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %25

12:                                               ; preds = %8, %12
  %13 = phi i64 [ %15, %12 ], [ %1, %8 ]
  %14 = phi ptr [ %21, %12 ], [ %0, %8 ]
  %15 = add nsw i64 %13, -1
  %16 = load i8, ptr %14, align 1, !tbaa !6
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !6
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds i8, ptr %14, i64 %20
  %22 = icmp ne i64 %15, 0
  %23 = icmp ult ptr %21, %2
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %12, label %25, !llvm.loop !129

25:                                               ; preds = %12, %8
  %26 = phi ptr [ %0, %8 ], [ %21, %12 ]
  %27 = phi i64 [ %1, %8 ], [ %15, %12 ]
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %67, label %65

29:                                               ; preds = %6, %58
  %30 = phi i64 [ %33, %58 ], [ %1, %6 ]
  %31 = phi ptr [ %59, %58 ], [ %0, %6 ]
  %32 = ptrtoint ptr %31 to i64
  %33 = add nsw i64 %30, 1
  %34 = getelementptr inbounds i8, ptr %31, i64 -1
  %35 = load i8, ptr %34, align 1, !tbaa !6
  %36 = icmp sgt i8 %35, -1
  br i1 %36, label %58, label %37

37:                                               ; preds = %29
  %38 = icmp ugt ptr %34, %2
  br i1 %38, label %39, label %53

39:                                               ; preds = %37
  %40 = getelementptr i8, ptr %31, i64 %4
  %41 = sub i64 0, %32
  %42 = getelementptr i8, ptr %40, i64 %41
  br label %43

43:                                               ; preds = %39, %48
  %44 = phi ptr [ %49, %48 ], [ %34, %39 ]
  %45 = load i8, ptr %44, align 1, !tbaa !6
  %46 = and i8 %45, -64
  %47 = icmp eq i8 %46, -128
  br i1 %47, label %48, label %53

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, ptr %44, i64 -1
  %50 = icmp ugt ptr %49, %2
  br i1 %50, label %43, label %51, !llvm.loop !130

51:                                               ; preds = %48
  %52 = load i8, ptr %42, align 1, !tbaa !6
  br label %53

53:                                               ; preds = %43, %37, %51
  %54 = phi ptr [ %34, %37 ], [ %42, %51 ], [ %44, %43 ]
  %55 = phi i8 [ %35, %37 ], [ %52, %51 ], [ %45, %43 ]
  %56 = icmp ugt i8 %55, -63
  br i1 %56, label %58, label %57

57:                                               ; preds = %53
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %58

58:                                               ; preds = %53, %57, %29
  %59 = phi ptr [ %54, %53 ], [ %54, %57 ], [ %34, %29 ]
  %60 = icmp ne i64 %33, 0
  %61 = icmp ugt ptr %59, %2
  %62 = and i1 %61, %60
  br i1 %62, label %29, label %63, !llvm.loop !131

63:                                               ; preds = %58
  %64 = icmp slt i64 %30, -1
  br i1 %64, label %67, label %65

65:                                               ; preds = %63, %25
  %66 = phi ptr [ %26, %25 ], [ %59, %63 ]
  br label %67

67:                                               ; preds = %6, %63, %25, %65
  %68 = phi ptr [ %66, %65 ], [ null, %25 ], [ null, %63 ], [ null, %6 ]
  ret ptr %68
}

declare ptr @Perl_fbm_instr(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @S_reghop4(ptr noundef %0, i64 noundef %1, ptr noundef %2, ptr noundef readnone %3) unnamed_addr #0 {
  %5 = ptrtoint ptr %2 to i64
  %6 = icmp sgt i64 %1, -1
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = icmp ugt ptr %0, %2
  br i1 %8, label %26, label %60

9:                                                ; preds = %4
  %10 = icmp ne i64 %1, 0
  %11 = icmp ult ptr %0, %3
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %60

13:                                               ; preds = %9, %13
  %14 = phi ptr [ %22, %13 ], [ %0, %9 ]
  %15 = phi i64 [ %16, %13 ], [ %1, %9 ]
  %16 = add nsw i64 %15, -1
  %17 = load i8, ptr %14, align 1, !tbaa !6
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !6
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds i8, ptr %14, i64 %21
  %23 = icmp ne i64 %16, 0
  %24 = icmp ult ptr %22, %3
  %25 = select i1 %23, i1 %24, i1 false
  br i1 %25, label %13, label %60, !llvm.loop !132

26:                                               ; preds = %7, %55
  %27 = phi i64 [ %30, %55 ], [ %1, %7 ]
  %28 = phi ptr [ %56, %55 ], [ %0, %7 ]
  %29 = ptrtoint ptr %28 to i64
  %30 = add nsw i64 %27, 1
  %31 = getelementptr inbounds i8, ptr %28, i64 -1
  %32 = load i8, ptr %31, align 1, !tbaa !6
  %33 = icmp sgt i8 %32, -1
  br i1 %33, label %55, label %34

34:                                               ; preds = %26
  %35 = icmp ugt ptr %31, %2
  br i1 %35, label %36, label %50

36:                                               ; preds = %34
  %37 = getelementptr i8, ptr %28, i64 %5
  %38 = sub i64 0, %29
  %39 = getelementptr i8, ptr %37, i64 %38
  br label %40

40:                                               ; preds = %36, %45
  %41 = phi ptr [ %46, %45 ], [ %31, %36 ]
  %42 = load i8, ptr %41, align 1, !tbaa !6
  %43 = and i8 %42, -64
  %44 = icmp eq i8 %43, -128
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = getelementptr inbounds i8, ptr %41, i64 -1
  %47 = icmp ugt ptr %46, %2
  br i1 %47, label %40, label %48, !llvm.loop !133

48:                                               ; preds = %45
  %49 = load i8, ptr %39, align 1, !tbaa !6
  br label %50

50:                                               ; preds = %40, %34, %48
  %51 = phi ptr [ %31, %34 ], [ %39, %48 ], [ %41, %40 ]
  %52 = phi i8 [ %32, %34 ], [ %49, %48 ], [ %42, %40 ]
  %53 = icmp ugt i8 %52, -63
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %55

55:                                               ; preds = %50, %54, %26
  %56 = phi ptr [ %51, %50 ], [ %51, %54 ], [ %31, %26 ]
  %57 = icmp ne i64 %30, 0
  %58 = icmp ugt ptr %56, %2
  %59 = and i1 %57, %58
  br i1 %59, label %26, label %60, !llvm.loop !134

60:                                               ; preds = %55, %13, %7, %9
  %61 = phi ptr [ %0, %9 ], [ %0, %7 ], [ %22, %13 ], [ %56, %55 ]
  ret ptr %61
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare ptr @memchr(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #3

declare i64 @Perl_utf8_distance(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @S_find_byclass(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #0 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca [14 x i8], align 1
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  store ptr %2, ptr %6, align 8, !tbaa !13
  %19 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 13
  %20 = load i32, ptr %19, align 4, !tbaa !19
  %21 = and i32 %20, 1
  %22 = xor i32 %21, 1
  %23 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 14
  %24 = load i8, ptr %23, align 2, !tbaa !48, !range !97, !noundef !98
  %25 = icmp ne i8 %24, 0
  %26 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 13
  %27 = load i8, ptr %26, align 1, !tbaa !51, !range !97, !noundef !98
  %28 = icmp ne i8 %27, 0
  %29 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 14
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = getelementptr inbounds %struct.regnode, ptr %1, i64 0, i32 1
  %32 = load i8, ptr %31, align 1, !tbaa !119
  switch i8 %32, label %5548 [
    i8 20, label %39
    i8 19, label %39
    i8 18, label %33
    i8 39, label %299
    i8 36, label %299
    i8 33, label %302
    i8 34, label %303
    i8 37, label %309
    i8 38, label %311
    i8 35, label %312
    i8 9, label %661
    i8 13, label %975
    i8 8, label %1290
    i8 11, label %1565
    i8 12, label %1789
    i8 15, label %2065
    i8 14, label %2290
    i8 10, label %2567
    i8 91, label %3451
    i8 26, label %3670
    i8 22, label %3671
    i8 25, label %3850
    i8 21, label %3851
    i8 28, label %3853
    i8 24, label %3954
    i8 27, label %4048
    i8 23, label %4049
    i8 75, label %5046
    i8 74, label %5046
  ]

33:                                               ; preds = %5
  %34 = icmp ult ptr %2, %3
  br i1 %34, label %35, label %5552

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %37 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %38 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %226

39:                                               ; preds = %5, %5
  %40 = icmp ult ptr %2, %3
  br i1 %25, label %46, label %41

41:                                               ; preds = %39
  br i1 %40, label %42, label %5552

42:                                               ; preds = %41
  %43 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %44 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %45 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %134

46:                                               ; preds = %39
  br i1 %40, label %47, label %5552

47:                                               ; preds = %46
  %48 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %49 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %50 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %51

51:                                               ; preds = %47, %124
  %52 = phi i32 [ 1, %47 ], [ %126, %124 ]
  %53 = phi ptr [ %2, %47 ], [ %132, %124 ]
  %54 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef %1, ptr noundef %53, ptr noundef nonnull %3, i1 noundef zeroext true)
  br i1 %54, label %55, label %124

55:                                               ; preds = %51
  %56 = icmp eq i32 %52, 0
  br i1 %56, label %124, label %57

57:                                               ; preds = %55
  %58 = load i8, ptr %48, align 8, !tbaa !47, !range !97, !noundef !98
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %5550

60:                                               ; preds = %57
  %61 = load ptr, ptr %4, align 8, !tbaa !46
  %62 = getelementptr i8, ptr %61, i64 16
  %63 = load ptr, ptr %62, align 8, !tbaa !6
  %64 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 14
  %65 = load ptr, ptr %64, align 8, !tbaa !17
  store ptr null, ptr %49, align 8, !tbaa !93
  %66 = load ptr, ptr %50, align 8, !tbaa !53
  %67 = ptrtoint ptr %53 to i64
  %68 = ptrtoint ptr %66 to i64
  %69 = sub i64 %67, %68
  %70 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 17
  %71 = load ptr, ptr %70, align 8, !tbaa !38
  store i64 %69, ptr %71, align 8, !tbaa !39
  %72 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 15
  store i32 0, ptr %72, align 8, !tbaa !37
  %73 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 16
  store i32 0, ptr %73, align 4, !tbaa !36
  %74 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 12
  %75 = load i32, ptr %74, align 8, !tbaa !92
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %77, label %106

77:                                               ; preds = %60
  %78 = and i32 %75, 7
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %88, label %80

80:                                               ; preds = %77, %80
  %81 = phi i32 [ %85, %80 ], [ %75, %77 ]
  %82 = phi ptr [ %84, %80 ], [ %71, %77 ]
  %83 = phi i32 [ %86, %80 ], [ 0, %77 ]
  %84 = getelementptr inbounds %struct.regexp_paren_pair, ptr %82, i64 1
  %85 = add nsw i32 %81, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %84, i8 -1, i64 16, i1 false)
  %86 = add i32 %83, 1
  %87 = icmp eq i32 %86, %78
  br i1 %87, label %88, label %80, !llvm.loop !137

88:                                               ; preds = %80, %77
  %89 = phi i32 [ %75, %77 ], [ %85, %80 ]
  %90 = phi ptr [ %71, %77 ], [ %84, %80 ]
  %91 = icmp ult i32 %75, 8
  br i1 %91, label %106, label %92

92:                                               ; preds = %88, %92
  %93 = phi i32 [ %103, %92 ], [ %89, %88 ]
  %94 = phi ptr [ %102, %92 ], [ %90, %88 ]
  %95 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %95, i8 -1, i64 16, i1 false)
  %96 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %96, i8 -1, i64 16, i1 false)
  %97 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %97, i8 -1, i64 16, i1 false)
  %98 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %98, i8 -1, i64 16, i1 false)
  %99 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %99, i8 -1, i64 16, i1 false)
  %100 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %100, i8 -1, i64 16, i1 false)
  %101 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %101, i8 -1, i64 16, i1 false)
  %102 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 8
  %103 = add nsw i32 %93, -8
  %104 = add i32 %93, -9
  %105 = icmp ult i32 %104, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %102, i8 -1, i64 16, i1 false)
  br i1 %105, label %92, label %106, !llvm.loop !96

106:                                              ; preds = %88, %92, %60
  %107 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %108 = getelementptr inbounds %struct.regexp_internal, ptr %65, i64 1
  %109 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %53, ptr noundef nonnull %108)
  %110 = icmp eq i64 %109, -1
  br i1 %110, label %111, label %120

111:                                              ; preds = %106
  %112 = load ptr, ptr %49, align 8, !tbaa !93
  %113 = icmp eq ptr %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %111
  store ptr %112, ptr %6, align 8, !tbaa !13
  br label %115

115:                                              ; preds = %114, %111
  %116 = phi ptr [ %112, %114 ], [ %53, %111 ]
  %117 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %118 = icmp sgt i32 %117, %107
  br i1 %118, label %119, label %124

119:                                              ; preds = %115
  tail call void @Perl_leave_scope(i32 noundef %107) #12
  br label %124

120:                                              ; preds = %106
  %121 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 17
  %122 = load ptr, ptr %121, align 8, !tbaa !38
  %123 = getelementptr inbounds %struct.regexp_paren_pair, ptr %122, i64 0, i32 1
  store i64 %109, ptr %123, align 8, !tbaa !42
  br label %5550

124:                                              ; preds = %115, %119, %51, %55
  %125 = phi ptr [ %53, %55 ], [ %53, %51 ], [ %116, %119 ], [ %116, %115 ]
  %126 = phi i32 [ %22, %55 ], [ 1, %51 ], [ %22, %119 ], [ %22, %115 ]
  %127 = load i8, ptr %125, align 1, !tbaa !6
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %128
  %130 = load i8, ptr %129, align 1, !tbaa !6
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds i8, ptr %125, i64 %131
  store ptr %132, ptr %6, align 8, !tbaa !13
  %133 = icmp ult ptr %132, %3
  br i1 %133, label %51, label %5552, !llvm.loop !138

134:                                              ; preds = %42, %221
  %135 = phi i32 [ 1, %42 ], [ %223, %221 ]
  %136 = phi ptr [ %2, %42 ], [ %224, %221 ]
  %137 = load i8, ptr %1, align 2, !tbaa !139
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %142, label %139

139:                                              ; preds = %134
  %140 = getelementptr inbounds i8, ptr %136, i64 1
  %141 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %136, ptr noundef nonnull %140, i1 noundef zeroext false)
  br i1 %141, label %154, label %221

142:                                              ; preds = %134
  %143 = load i8, ptr %136, align 1, !tbaa !6
  %144 = zext i8 %143 to i32
  %145 = lshr i32 %144, 3
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4, i64 %146
  %148 = load i8, ptr %147, align 1, !tbaa !6
  %149 = zext i8 %148 to i32
  %150 = and i32 %144, 7
  %151 = shl nuw nsw i32 1, %150
  %152 = and i32 %151, %149
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %221, label %154

154:                                              ; preds = %142, %139
  %155 = icmp eq i32 %135, 0
  br i1 %155, label %221, label %156

156:                                              ; preds = %154
  %157 = load i8, ptr %43, align 8, !tbaa !47, !range !97, !noundef !98
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %159, label %5550

159:                                              ; preds = %156
  %160 = load ptr, ptr %4, align 8, !tbaa !46
  %161 = getelementptr i8, ptr %160, i64 16
  %162 = load ptr, ptr %161, align 8, !tbaa !6
  %163 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 14
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  store ptr null, ptr %44, align 8, !tbaa !93
  %165 = load ptr, ptr %45, align 8, !tbaa !53
  %166 = ptrtoint ptr %136 to i64
  %167 = ptrtoint ptr %165 to i64
  %168 = sub i64 %166, %167
  %169 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 17
  %170 = load ptr, ptr %169, align 8, !tbaa !38
  store i64 %168, ptr %170, align 8, !tbaa !39
  %171 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 15
  store i32 0, ptr %171, align 8, !tbaa !37
  %172 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 16
  store i32 0, ptr %172, align 4, !tbaa !36
  %173 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 12
  %174 = load i32, ptr %173, align 8, !tbaa !92
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %205

176:                                              ; preds = %159
  %177 = and i32 %174, 7
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %176, %179
  %180 = phi i32 [ %184, %179 ], [ %174, %176 ]
  %181 = phi ptr [ %183, %179 ], [ %170, %176 ]
  %182 = phi i32 [ %185, %179 ], [ 0, %176 ]
  %183 = getelementptr inbounds %struct.regexp_paren_pair, ptr %181, i64 1
  %184 = add nsw i32 %180, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %183, i8 -1, i64 16, i1 false)
  %185 = add i32 %182, 1
  %186 = icmp eq i32 %185, %177
  br i1 %186, label %187, label %179, !llvm.loop !140

187:                                              ; preds = %179, %176
  %188 = phi i32 [ %174, %176 ], [ %184, %179 ]
  %189 = phi ptr [ %170, %176 ], [ %183, %179 ]
  %190 = icmp ult i32 %174, 8
  br i1 %190, label %205, label %191

191:                                              ; preds = %187, %191
  %192 = phi i32 [ %202, %191 ], [ %188, %187 ]
  %193 = phi ptr [ %201, %191 ], [ %189, %187 ]
  %194 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %194, i8 -1, i64 16, i1 false)
  %195 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %195, i8 -1, i64 16, i1 false)
  %196 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %196, i8 -1, i64 16, i1 false)
  %197 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %197, i8 -1, i64 16, i1 false)
  %198 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %198, i8 -1, i64 16, i1 false)
  %199 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %199, i8 -1, i64 16, i1 false)
  %200 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %200, i8 -1, i64 16, i1 false)
  %201 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 8
  %202 = add nsw i32 %192, -8
  %203 = add i32 %192, -9
  %204 = icmp ult i32 %203, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %201, i8 -1, i64 16, i1 false)
  br i1 %204, label %191, label %205, !llvm.loop !96

205:                                              ; preds = %187, %191, %159
  %206 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %207 = getelementptr inbounds %struct.regexp_internal, ptr %164, i64 1
  %208 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %136, ptr noundef nonnull %207)
  %209 = icmp eq i64 %208, -1
  br i1 %209, label %210, label %217

210:                                              ; preds = %205
  %211 = load ptr, ptr %44, align 8, !tbaa !93
  %212 = icmp eq ptr %211, null
  %213 = select i1 %212, ptr %136, ptr %211
  %214 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %215 = icmp sgt i32 %214, %206
  br i1 %215, label %216, label %221

216:                                              ; preds = %210
  tail call void @Perl_leave_scope(i32 noundef %206) #12
  br label %221

217:                                              ; preds = %205
  %218 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 17
  %219 = load ptr, ptr %218, align 8, !tbaa !38
  %220 = getelementptr inbounds %struct.regexp_paren_pair, ptr %219, i64 0, i32 1
  store i64 %208, ptr %220, align 8, !tbaa !42
  br label %5550

221:                                              ; preds = %210, %216, %139, %142, %154
  %222 = phi ptr [ %136, %154 ], [ %136, %142 ], [ %136, %139 ], [ %213, %216 ], [ %213, %210 ]
  %223 = phi i32 [ %22, %154 ], [ 1, %142 ], [ 1, %139 ], [ %22, %216 ], [ %22, %210 ]
  %224 = getelementptr inbounds i8, ptr %222, i64 1
  store ptr %224, ptr %6, align 8, !tbaa !13
  %225 = icmp ult ptr %224, %3
  br i1 %225, label %134, label %5552, !llvm.loop !141

226:                                              ; preds = %35, %295
  %227 = phi i32 [ 1, %35 ], [ %22, %295 ]
  %228 = phi ptr [ %2, %35 ], [ %297, %295 ]
  %229 = icmp eq i32 %227, 0
  br i1 %229, label %295, label %230

230:                                              ; preds = %226
  %231 = load i8, ptr %36, align 8, !tbaa !47, !range !97, !noundef !98
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %233, label %5550

233:                                              ; preds = %230
  %234 = load ptr, ptr %4, align 8, !tbaa !46
  %235 = getelementptr i8, ptr %234, i64 16
  %236 = load ptr, ptr %235, align 8, !tbaa !6
  %237 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 14
  %238 = load ptr, ptr %237, align 8, !tbaa !17
  store ptr null, ptr %37, align 8, !tbaa !93
  %239 = load ptr, ptr %38, align 8, !tbaa !53
  %240 = ptrtoint ptr %228 to i64
  %241 = ptrtoint ptr %239 to i64
  %242 = sub i64 %240, %241
  %243 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 17
  %244 = load ptr, ptr %243, align 8, !tbaa !38
  store i64 %242, ptr %244, align 8, !tbaa !39
  %245 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 15
  store i32 0, ptr %245, align 8, !tbaa !37
  %246 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 16
  store i32 0, ptr %246, align 4, !tbaa !36
  %247 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 12
  %248 = load i32, ptr %247, align 8, !tbaa !92
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %250, label %279

250:                                              ; preds = %233
  %251 = and i32 %248, 7
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %261, label %253

253:                                              ; preds = %250, %253
  %254 = phi i32 [ %258, %253 ], [ %248, %250 ]
  %255 = phi ptr [ %257, %253 ], [ %244, %250 ]
  %256 = phi i32 [ %259, %253 ], [ 0, %250 ]
  %257 = getelementptr inbounds %struct.regexp_paren_pair, ptr %255, i64 1
  %258 = add nsw i32 %254, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %257, i8 -1, i64 16, i1 false)
  %259 = add i32 %256, 1
  %260 = icmp eq i32 %259, %251
  br i1 %260, label %261, label %253, !llvm.loop !142

261:                                              ; preds = %253, %250
  %262 = phi i32 [ %248, %250 ], [ %258, %253 ]
  %263 = phi ptr [ %244, %250 ], [ %257, %253 ]
  %264 = icmp ult i32 %248, 8
  br i1 %264, label %279, label %265

265:                                              ; preds = %261, %265
  %266 = phi i32 [ %276, %265 ], [ %262, %261 ]
  %267 = phi ptr [ %275, %265 ], [ %263, %261 ]
  %268 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %268, i8 -1, i64 16, i1 false)
  %269 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %269, i8 -1, i64 16, i1 false)
  %270 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %270, i8 -1, i64 16, i1 false)
  %271 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %271, i8 -1, i64 16, i1 false)
  %272 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %272, i8 -1, i64 16, i1 false)
  %273 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %273, i8 -1, i64 16, i1 false)
  %274 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %274, i8 -1, i64 16, i1 false)
  %275 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 8
  %276 = add nsw i32 %266, -8
  %277 = add i32 %266, -9
  %278 = icmp ult i32 %277, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %275, i8 -1, i64 16, i1 false)
  br i1 %278, label %265, label %279, !llvm.loop !96

279:                                              ; preds = %261, %265, %233
  %280 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %281 = getelementptr inbounds %struct.regexp_internal, ptr %238, i64 1
  %282 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %228, ptr noundef nonnull %281)
  %283 = icmp eq i64 %282, -1
  br i1 %283, label %284, label %291

284:                                              ; preds = %279
  %285 = load ptr, ptr %37, align 8, !tbaa !93
  %286 = icmp eq ptr %285, null
  %287 = select i1 %286, ptr %228, ptr %285
  %288 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %289 = icmp sgt i32 %288, %280
  br i1 %289, label %290, label %295

290:                                              ; preds = %284
  tail call void @Perl_leave_scope(i32 noundef %280) #12
  br label %295

291:                                              ; preds = %279
  %292 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 17
  %293 = load ptr, ptr %292, align 8, !tbaa !38
  %294 = getelementptr inbounds %struct.regexp_paren_pair, ptr %293, i64 0, i32 1
  store i64 %282, ptr %294, align 8, !tbaa !42
  br label %5550

295:                                              ; preds = %284, %290, %226
  %296 = phi ptr [ %287, %284 ], [ %287, %290 ], [ %228, %226 ]
  %297 = getelementptr inbounds i8, ptr %296, i64 1
  store ptr %297, ptr %6, align 8, !tbaa !13
  %298 = icmp ult ptr %297, %3
  br i1 %298, label %226, label %5552, !llvm.loop !143

299:                                              ; preds = %5, %5
  %300 = or i8 %27, %24
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %316, label %504

302:                                              ; preds = %5
  br i1 %25, label %504, label %316

303:                                              ; preds = %5
  %304 = or i8 %27, %24
  %305 = icmp eq i8 %304, 0
  %306 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !97
  %307 = icmp eq i8 %306, 0
  %308 = select i1 %305, i1 %307, i1 false
  br i1 %308, label %316, label %504

309:                                              ; preds = %5
  %310 = select i1 %28, i32 8, i32 0
  br label %504

311:                                              ; preds = %5
  br i1 %25, label %504, label %5552

312:                                              ; preds = %5
  %313 = or i8 %27, %24
  %314 = icmp eq i8 %313, 0
  %315 = select i1 %28, i32 8, i32 0
  br i1 %314, label %316, label %504

316:                                              ; preds = %299, %302, %303, %312
  %317 = phi ptr [ @PL_fold_latin1, %299 ], [ @PL_fold, %302 ], [ @PL_fold_locale, %303 ], [ @PL_fold_latin1, %312 ]
  %318 = phi ptr [ @Perl_foldEQ_latin1, %299 ], [ @Perl_foldEQ, %302 ], [ @Perl_foldEQ_locale, %303 ], [ @Perl_foldEQ_latin1, %312 ]
  %319 = getelementptr inbounds %struct.regnode_string, ptr %1, i64 0, i32 3
  %320 = load i8, ptr %1, align 2, !tbaa !135
  %321 = zext i8 %320 to i64
  %322 = sub nsw i64 0, %321
  %323 = getelementptr inbounds i8, ptr %3, i64 %322
  %324 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %325 = load i8, ptr %324, align 8, !tbaa !47, !range !97, !noundef !98
  %326 = icmp eq i8 %325, 0
  %327 = icmp ult ptr %323, %2
  %328 = select i1 %327, ptr %2, ptr %323
  %329 = select i1 %326, ptr %323, ptr %328
  %330 = load i8, ptr %319, align 1, !tbaa !6
  %331 = zext i8 %330 to i64
  %332 = getelementptr inbounds i8, ptr %317, i64 %331
  %333 = load i8, ptr %332, align 1, !tbaa !6
  %334 = icmp eq i8 %330, %333
  %335 = icmp ult ptr %329, %2
  br i1 %334, label %342, label %336

336:                                              ; preds = %316
  br i1 %335, label %5552, label %337

337:                                              ; preds = %336
  %338 = icmp eq i8 %320, 1
  %339 = zext i8 %320 to i32
  %340 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %341 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %425

342:                                              ; preds = %316
  br i1 %335, label %5552, label %343

343:                                              ; preds = %342
  %344 = icmp eq i8 %320, 1
  %345 = zext i8 %320 to i32
  %346 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %347 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %348

348:                                              ; preds = %343, %421
  %349 = phi ptr [ %2, %343 ], [ %423, %421 ]
  %350 = load i8, ptr %349, align 1, !tbaa !6
  %351 = icmp eq i8 %350, %330
  br i1 %351, label %352, label %421

352:                                              ; preds = %348
  br i1 %344, label %356, label %353

353:                                              ; preds = %352
  %354 = tail call i32 %318(ptr noundef nonnull %349, ptr noundef nonnull %319, i32 noundef %345) #12, !callees !144
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %421, label %356

356:                                              ; preds = %353, %352
  %357 = load i8, ptr %324, align 8, !tbaa !47, !range !97, !noundef !98
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %359, label %5550

359:                                              ; preds = %356
  %360 = load ptr, ptr %4, align 8, !tbaa !46
  %361 = getelementptr i8, ptr %360, i64 16
  %362 = load ptr, ptr %361, align 8, !tbaa !6
  %363 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 14
  %364 = load ptr, ptr %363, align 8, !tbaa !17
  store ptr null, ptr %346, align 8, !tbaa !93
  %365 = load ptr, ptr %347, align 8, !tbaa !53
  %366 = ptrtoint ptr %349 to i64
  %367 = ptrtoint ptr %365 to i64
  %368 = sub i64 %366, %367
  %369 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 17
  %370 = load ptr, ptr %369, align 8, !tbaa !38
  store i64 %368, ptr %370, align 8, !tbaa !39
  %371 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 15
  store i32 0, ptr %371, align 8, !tbaa !37
  %372 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 16
  store i32 0, ptr %372, align 4, !tbaa !36
  %373 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 12
  %374 = load i32, ptr %373, align 8, !tbaa !92
  %375 = icmp sgt i32 %374, 0
  br i1 %375, label %376, label %405

376:                                              ; preds = %359
  %377 = and i32 %374, 7
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %387, label %379

379:                                              ; preds = %376, %379
  %380 = phi i32 [ %384, %379 ], [ %374, %376 ]
  %381 = phi ptr [ %383, %379 ], [ %370, %376 ]
  %382 = phi i32 [ %385, %379 ], [ 0, %376 ]
  %383 = getelementptr inbounds %struct.regexp_paren_pair, ptr %381, i64 1
  %384 = add nsw i32 %380, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %383, i8 -1, i64 16, i1 false)
  %385 = add i32 %382, 1
  %386 = icmp eq i32 %385, %377
  br i1 %386, label %387, label %379, !llvm.loop !145

387:                                              ; preds = %379, %376
  %388 = phi i32 [ %374, %376 ], [ %384, %379 ]
  %389 = phi ptr [ %370, %376 ], [ %383, %379 ]
  %390 = icmp ult i32 %374, 8
  br i1 %390, label %405, label %391

391:                                              ; preds = %387, %391
  %392 = phi i32 [ %402, %391 ], [ %388, %387 ]
  %393 = phi ptr [ %401, %391 ], [ %389, %387 ]
  %394 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %394, i8 -1, i64 16, i1 false)
  %395 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %395, i8 -1, i64 16, i1 false)
  %396 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %396, i8 -1, i64 16, i1 false)
  %397 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %397, i8 -1, i64 16, i1 false)
  %398 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %398, i8 -1, i64 16, i1 false)
  %399 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %399, i8 -1, i64 16, i1 false)
  %400 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %400, i8 -1, i64 16, i1 false)
  %401 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 8
  %402 = add nsw i32 %392, -8
  %403 = add i32 %392, -9
  %404 = icmp ult i32 %403, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %401, i8 -1, i64 16, i1 false)
  br i1 %404, label %391, label %405, !llvm.loop !96

405:                                              ; preds = %387, %391, %359
  %406 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %407 = getelementptr inbounds %struct.regexp_internal, ptr %364, i64 1
  %408 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %349, ptr noundef nonnull %407)
  %409 = icmp eq i64 %408, -1
  br i1 %409, label %410, label %417

410:                                              ; preds = %405
  %411 = load ptr, ptr %346, align 8, !tbaa !93
  %412 = icmp eq ptr %411, null
  %413 = select i1 %412, ptr %349, ptr %411
  %414 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %415 = icmp sgt i32 %414, %406
  br i1 %415, label %416, label %421

416:                                              ; preds = %410
  tail call void @Perl_leave_scope(i32 noundef %406) #12
  br label %421

417:                                              ; preds = %405
  %418 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 17
  %419 = load ptr, ptr %418, align 8, !tbaa !38
  %420 = getelementptr inbounds %struct.regexp_paren_pair, ptr %419, i64 0, i32 1
  store i64 %408, ptr %420, align 8, !tbaa !42
  br label %5550

421:                                              ; preds = %410, %416, %353, %348
  %422 = phi ptr [ %413, %410 ], [ %413, %416 ], [ %349, %353 ], [ %349, %348 ]
  %423 = getelementptr inbounds i8, ptr %422, i64 1
  store ptr %423, ptr %6, align 8, !tbaa !13
  %424 = icmp ugt ptr %423, %329
  br i1 %424, label %5552, label %348, !llvm.loop !146

425:                                              ; preds = %337, %500
  %426 = phi ptr [ %2, %337 ], [ %502, %500 ]
  %427 = load i8, ptr %426, align 1, !tbaa !6
  %428 = icmp eq i8 %427, %330
  %429 = icmp eq i8 %427, %333
  %430 = or i1 %428, %429
  br i1 %430, label %431, label %500

431:                                              ; preds = %425
  br i1 %338, label %435, label %432

432:                                              ; preds = %431
  %433 = tail call i32 %318(ptr noundef nonnull %426, ptr noundef nonnull %319, i32 noundef %339) #12, !callees !144
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %500, label %435

435:                                              ; preds = %432, %431
  %436 = load i8, ptr %324, align 8, !tbaa !47, !range !97, !noundef !98
  %437 = icmp eq i8 %436, 0
  br i1 %437, label %438, label %5550

438:                                              ; preds = %435
  %439 = load ptr, ptr %4, align 8, !tbaa !46
  %440 = getelementptr i8, ptr %439, i64 16
  %441 = load ptr, ptr %440, align 8, !tbaa !6
  %442 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 14
  %443 = load ptr, ptr %442, align 8, !tbaa !17
  store ptr null, ptr %340, align 8, !tbaa !93
  %444 = load ptr, ptr %341, align 8, !tbaa !53
  %445 = ptrtoint ptr %426 to i64
  %446 = ptrtoint ptr %444 to i64
  %447 = sub i64 %445, %446
  %448 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 17
  %449 = load ptr, ptr %448, align 8, !tbaa !38
  store i64 %447, ptr %449, align 8, !tbaa !39
  %450 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 15
  store i32 0, ptr %450, align 8, !tbaa !37
  %451 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 16
  store i32 0, ptr %451, align 4, !tbaa !36
  %452 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 12
  %453 = load i32, ptr %452, align 8, !tbaa !92
  %454 = icmp sgt i32 %453, 0
  br i1 %454, label %455, label %484

455:                                              ; preds = %438
  %456 = and i32 %453, 7
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %466, label %458

458:                                              ; preds = %455, %458
  %459 = phi i32 [ %463, %458 ], [ %453, %455 ]
  %460 = phi ptr [ %462, %458 ], [ %449, %455 ]
  %461 = phi i32 [ %464, %458 ], [ 0, %455 ]
  %462 = getelementptr inbounds %struct.regexp_paren_pair, ptr %460, i64 1
  %463 = add nsw i32 %459, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %462, i8 -1, i64 16, i1 false)
  %464 = add i32 %461, 1
  %465 = icmp eq i32 %464, %456
  br i1 %465, label %466, label %458, !llvm.loop !147

466:                                              ; preds = %458, %455
  %467 = phi i32 [ %453, %455 ], [ %463, %458 ]
  %468 = phi ptr [ %449, %455 ], [ %462, %458 ]
  %469 = icmp ult i32 %453, 8
  br i1 %469, label %484, label %470

470:                                              ; preds = %466, %470
  %471 = phi i32 [ %481, %470 ], [ %467, %466 ]
  %472 = phi ptr [ %480, %470 ], [ %468, %466 ]
  %473 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %473, i8 -1, i64 16, i1 false)
  %474 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %474, i8 -1, i64 16, i1 false)
  %475 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %475, i8 -1, i64 16, i1 false)
  %476 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %476, i8 -1, i64 16, i1 false)
  %477 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %477, i8 -1, i64 16, i1 false)
  %478 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %478, i8 -1, i64 16, i1 false)
  %479 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %479, i8 -1, i64 16, i1 false)
  %480 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 8
  %481 = add nsw i32 %471, -8
  %482 = add i32 %471, -9
  %483 = icmp ult i32 %482, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %480, i8 -1, i64 16, i1 false)
  br i1 %483, label %470, label %484, !llvm.loop !96

484:                                              ; preds = %466, %470, %438
  %485 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %486 = getelementptr inbounds %struct.regexp_internal, ptr %443, i64 1
  %487 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %426, ptr noundef nonnull %486)
  %488 = icmp eq i64 %487, -1
  br i1 %488, label %489, label %496

489:                                              ; preds = %484
  %490 = load ptr, ptr %340, align 8, !tbaa !93
  %491 = icmp eq ptr %490, null
  %492 = select i1 %491, ptr %426, ptr %490
  %493 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %494 = icmp sgt i32 %493, %485
  br i1 %494, label %495, label %500

495:                                              ; preds = %489
  tail call void @Perl_leave_scope(i32 noundef %485) #12
  br label %500

496:                                              ; preds = %484
  %497 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 17
  %498 = load ptr, ptr %497, align 8, !tbaa !38
  %499 = getelementptr inbounds %struct.regexp_paren_pair, ptr %498, i64 0, i32 1
  store i64 %487, ptr %499, align 8, !tbaa !42
  br label %5550

500:                                              ; preds = %489, %495, %425, %432
  %501 = phi ptr [ %492, %489 ], [ %492, %495 ], [ %426, %425 ], [ %426, %432 ]
  %502 = getelementptr inbounds i8, ptr %501, i64 1
  store ptr %502, ptr %6, align 8, !tbaa !13
  %503 = icmp ugt ptr %502, %329
  br i1 %503, label %5552, label %425, !llvm.loop !148

504:                                              ; preds = %309, %312, %311, %303, %302, %299
  %505 = phi i32 [ 1, %299 ], [ 0, %302 ], [ 2, %303 ], [ %310, %309 ], [ 42, %311 ], [ %315, %312 ]
  %506 = getelementptr inbounds %struct.regnode_string, ptr %1, i64 0, i32 3
  %507 = load i8, ptr %1, align 2, !tbaa !135
  %508 = zext i8 %507 to i64
  br i1 %28, label %509, label %513

509:                                              ; preds = %504
  %510 = getelementptr inbounds i8, ptr %506, i64 %508
  %511 = tail call i64 @Perl_utf8_length(ptr noundef nonnull %506, ptr noundef nonnull %510) #12
  %512 = load i8, ptr %23, align 2, !tbaa !48, !range !97
  br label %513

513:                                              ; preds = %504, %509
  %514 = phi i8 [ %512, %509 ], [ %24, %504 ]
  %515 = phi i64 [ %511, %509 ], [ %508, %504 ]
  %516 = select i1 %25, i64 3, i64 2
  %517 = add nsw i64 %516, -1
  %518 = add i64 %517, %515
  %519 = udiv i64 %518, %516
  %520 = icmp eq i8 %514, 0
  br i1 %520, label %562, label %521

521:                                              ; preds = %513
  %522 = ptrtoint ptr %2 to i64
  %523 = icmp ule i64 %516, %518
  %524 = icmp ult ptr %2, %3
  %525 = and i1 %523, %524
  br i1 %525, label %526, label %565

526:                                              ; preds = %521
  %527 = sub nsw i64 0, %519
  br label %528

528:                                              ; preds = %526, %557
  %529 = phi i64 [ %532, %557 ], [ %527, %526 ]
  %530 = phi ptr [ %558, %557 ], [ %3, %526 ]
  %531 = ptrtoint ptr %530 to i64
  %532 = add nsw i64 %529, 1
  %533 = getelementptr inbounds i8, ptr %530, i64 -1
  %534 = load i8, ptr %533, align 1, !tbaa !6
  %535 = icmp sgt i8 %534, -1
  br i1 %535, label %557, label %536

536:                                              ; preds = %528
  %537 = icmp ugt ptr %533, %2
  br i1 %537, label %538, label %552

538:                                              ; preds = %536
  %539 = getelementptr i8, ptr %530, i64 %522
  %540 = sub i64 0, %531
  %541 = getelementptr i8, ptr %539, i64 %540
  br label %542

542:                                              ; preds = %547, %538
  %543 = phi ptr [ %548, %547 ], [ %533, %538 ]
  %544 = load i8, ptr %543, align 1, !tbaa !6
  %545 = and i8 %544, -64
  %546 = icmp eq i8 %545, -128
  br i1 %546, label %547, label %552

547:                                              ; preds = %542
  %548 = getelementptr inbounds i8, ptr %543, i64 -1
  %549 = icmp ugt ptr %548, %2
  br i1 %549, label %542, label %550, !llvm.loop !127

550:                                              ; preds = %547
  %551 = load i8, ptr %541, align 1, !tbaa !6
  br label %552

552:                                              ; preds = %542, %550, %536
  %553 = phi ptr [ %533, %536 ], [ %541, %550 ], [ %543, %542 ]
  %554 = phi i8 [ %534, %536 ], [ %551, %550 ], [ %544, %542 ]
  %555 = icmp ugt i8 %554, -63
  br i1 %555, label %557, label %556

556:                                              ; preds = %552
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %557

557:                                              ; preds = %556, %552, %528
  %558 = phi ptr [ %553, %552 ], [ %553, %556 ], [ %533, %528 ]
  %559 = icmp ne i64 %532, 0
  %560 = icmp ugt ptr %558, %2
  %561 = and i1 %559, %560
  br i1 %561, label %528, label %565, !llvm.loop !128

562:                                              ; preds = %513
  %563 = sub nsw i64 0, %519
  %564 = getelementptr inbounds i8, ptr %3, i64 %563
  br label %565

565:                                              ; preds = %557, %521, %562
  %566 = phi ptr [ %564, %562 ], [ %3, %521 ], [ %558, %557 ]
  %567 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %568 = load i8, ptr %567, align 8, !tbaa !47, !range !97, !noundef !98
  %569 = icmp eq i8 %568, 0
  %570 = icmp ult ptr %566, %2
  %571 = select i1 %570, ptr %2, ptr %566
  %572 = select i1 %569, ptr %566, ptr %571
  %573 = icmp ult ptr %572, %2
  br i1 %573, label %5552, label %574

574:                                              ; preds = %565
  %575 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %576 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %577

577:                                              ; preds = %574, %657
  %578 = phi ptr [ %2, %574 ], [ %659, %657 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #12
  store ptr %3, ptr %7, align 8, !tbaa !13
  %579 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef %578, ptr noundef nonnull %7, i64 noundef 0, i1 noundef zeroext %25, ptr noundef nonnull %506, ptr noundef null, i64 noundef %508, i1 noundef zeroext %28, i32 noundef %505) #12
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %648, label %581

581:                                              ; preds = %577
  %582 = load i8, ptr %567, align 8, !tbaa !47, !range !97, !noundef !98
  %583 = icmp eq i8 %582, 0
  br i1 %583, label %584, label %656

584:                                              ; preds = %581
  %585 = load ptr, ptr %4, align 8, !tbaa !46
  %586 = getelementptr i8, ptr %585, i64 16
  %587 = load ptr, ptr %586, align 8, !tbaa !6
  %588 = getelementptr inbounds %struct.regexp, ptr %587, i64 0, i32 14
  %589 = load ptr, ptr %588, align 8, !tbaa !17
  store ptr null, ptr %575, align 8, !tbaa !93
  %590 = load ptr, ptr %6, align 8, !tbaa !13
  %591 = load ptr, ptr %576, align 8, !tbaa !53
  %592 = ptrtoint ptr %590 to i64
  %593 = ptrtoint ptr %591 to i64
  %594 = sub i64 %592, %593
  %595 = getelementptr inbounds %struct.regexp, ptr %587, i64 0, i32 17
  %596 = load ptr, ptr %595, align 8, !tbaa !38
  store i64 %594, ptr %596, align 8, !tbaa !39
  %597 = getelementptr inbounds %struct.regexp, ptr %587, i64 0, i32 15
  store i32 0, ptr %597, align 8, !tbaa !37
  %598 = getelementptr inbounds %struct.regexp, ptr %587, i64 0, i32 16
  store i32 0, ptr %598, align 4, !tbaa !36
  %599 = getelementptr inbounds %struct.regexp, ptr %587, i64 0, i32 12
  %600 = load i32, ptr %599, align 8, !tbaa !92
  %601 = icmp sgt i32 %600, 0
  br i1 %601, label %602, label %631

602:                                              ; preds = %584
  %603 = and i32 %600, 7
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %613, label %605

605:                                              ; preds = %602, %605
  %606 = phi i32 [ %610, %605 ], [ %600, %602 ]
  %607 = phi ptr [ %609, %605 ], [ %596, %602 ]
  %608 = phi i32 [ %611, %605 ], [ 0, %602 ]
  %609 = getelementptr inbounds %struct.regexp_paren_pair, ptr %607, i64 1
  %610 = add nsw i32 %606, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %609, i8 -1, i64 16, i1 false)
  %611 = add i32 %608, 1
  %612 = icmp eq i32 %611, %603
  br i1 %612, label %613, label %605, !llvm.loop !149

613:                                              ; preds = %605, %602
  %614 = phi i32 [ %600, %602 ], [ %610, %605 ]
  %615 = phi ptr [ %596, %602 ], [ %609, %605 ]
  %616 = icmp ult i32 %600, 8
  br i1 %616, label %631, label %617

617:                                              ; preds = %613, %617
  %618 = phi i32 [ %628, %617 ], [ %614, %613 ]
  %619 = phi ptr [ %627, %617 ], [ %615, %613 ]
  %620 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %620, i8 -1, i64 16, i1 false)
  %621 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %621, i8 -1, i64 16, i1 false)
  %622 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %622, i8 -1, i64 16, i1 false)
  %623 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %623, i8 -1, i64 16, i1 false)
  %624 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %624, i8 -1, i64 16, i1 false)
  %625 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %625, i8 -1, i64 16, i1 false)
  %626 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %626, i8 -1, i64 16, i1 false)
  %627 = getelementptr inbounds %struct.regexp_paren_pair, ptr %619, i64 8
  %628 = add nsw i32 %618, -8
  %629 = add i32 %618, -9
  %630 = icmp ult i32 %629, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %627, i8 -1, i64 16, i1 false)
  br i1 %630, label %617, label %631, !llvm.loop !96

631:                                              ; preds = %613, %617, %584
  %632 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %633 = getelementptr inbounds %struct.regexp_internal, ptr %589, i64 1
  %634 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %590, ptr noundef nonnull %633)
  %635 = icmp eq i64 %634, -1
  br i1 %635, label %636, label %644

636:                                              ; preds = %631
  %637 = load ptr, ptr %575, align 8, !tbaa !93
  %638 = icmp eq ptr %637, null
  br i1 %638, label %640, label %639

639:                                              ; preds = %636
  store ptr %637, ptr %6, align 8, !tbaa !13
  br label %640

640:                                              ; preds = %639, %636
  %641 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %642 = icmp sgt i32 %641, %632
  br i1 %642, label %643, label %648

643:                                              ; preds = %640
  call void @Perl_leave_scope(i32 noundef %632) #12
  br label %648

644:                                              ; preds = %631
  %645 = getelementptr inbounds %struct.regexp, ptr %587, i64 0, i32 17
  %646 = load ptr, ptr %645, align 8, !tbaa !38
  %647 = getelementptr inbounds %struct.regexp_paren_pair, ptr %646, i64 0, i32 1
  store i64 %634, ptr %647, align 8, !tbaa !42
  br label %656

648:                                              ; preds = %640, %643, %577
  %649 = load ptr, ptr %6, align 8, !tbaa !13
  br i1 %25, label %650, label %657

650:                                              ; preds = %648
  %651 = load i8, ptr %649, align 1, !tbaa !6
  %652 = zext i8 %651 to i64
  %653 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %652
  %654 = load i8, ptr %653, align 1, !tbaa !6
  %655 = zext i8 %654 to i64
  br label %657

656:                                              ; preds = %581, %644
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  br label %5550

657:                                              ; preds = %650, %648
  %658 = phi i64 [ %655, %650 ], [ 1, %648 ]
  %659 = getelementptr inbounds i8, ptr %649, i64 %658
  store ptr %659, ptr %6, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  %660 = icmp ugt ptr %659, %572
  br i1 %660, label %5552, label %577, !llvm.loop !150

661:                                              ; preds = %5
  %662 = load i8, ptr %1, align 2, !tbaa !139
  %663 = icmp eq i8 %662, 0
  br i1 %663, label %667, label %664

664:                                              ; preds = %661
  %665 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !151, !range !97, !noundef !98
  %666 = icmp eq i8 %665, 0
  br i1 %666, label %2565, label %2570

667:                                              ; preds = %661
  %668 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %669 = load ptr, ptr %668, align 8, !tbaa !53
  %670 = icmp eq ptr %669, %2
  br i1 %25, label %671, label %841

671:                                              ; preds = %667
  br i1 %670, label %687, label %672

672:                                              ; preds = %671
  %673 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %669)
  %674 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %675 = load ptr, ptr %674, align 8, !tbaa !56
  %676 = ptrtoint ptr %675 to i64
  %677 = ptrtoint ptr %673 to i64
  %678 = sub i64 %676, %677
  %679 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %680 = xor i1 %679, true
  %681 = zext i1 %680 to i32
  %682 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %673, i64 noundef %678, ptr noundef null, i32 noundef %681) #12
  %683 = trunc i64 %682 to i32
  %684 = icmp slt i32 %683, 256
  br i1 %684, label %685, label %698

685:                                              ; preds = %672
  %686 = icmp ult i32 %683, 128
  br i1 %686, label %687, label %701

687:                                              ; preds = %671, %685
  %688 = phi i32 [ %683, %685 ], [ 10, %671 ]
  %689 = tail call ptr @__ctype_b_loc() #14
  %690 = load ptr, ptr %689, align 8, !tbaa !13
  %691 = zext i32 %688 to i64
  %692 = getelementptr inbounds i16, ptr %690, i64 %691
  %693 = load i16, ptr %692, align 2, !tbaa !152
  %694 = and i16 %693, 8
  %695 = icmp ne i16 %694, 0
  %696 = icmp eq i32 %688, 95
  %697 = or i1 %696, %695
  br label %701

698:                                              ; preds = %672
  %699 = and i64 %682, 4294967295
  %700 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %699) #12
  br label %701

701:                                              ; preds = %685, %687, %698
  %702 = phi i1 [ %700, %698 ], [ false, %685 ], [ %697, %687 ]
  %703 = zext i1 %702 to i32
  %704 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  %705 = icmp eq ptr %704, null
  br i1 %705, label %706, label %710

706:                                              ; preds = %701
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #12
  store i8 4, ptr %8, align 1, !tbaa !6
  %707 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !13
  %708 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %707, ptr noundef nonnull %8) #12
  store ptr %708, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #12
  %709 = load ptr, ptr %6, align 8, !tbaa !13
  br label %710

710:                                              ; preds = %701, %706
  %711 = phi ptr [ %2, %701 ], [ %709, %706 ]
  %712 = icmp ult ptr %711, %3
  br i1 %712, label %713, label %958

713:                                              ; preds = %710
  %714 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %715 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %716

716:                                              ; preds = %713, %831
  %717 = phi ptr [ %711, %713 ], [ %839, %831 ]
  %718 = phi i32 [ %703, %713 ], [ %832, %831 ]
  %719 = load i8, ptr %717, align 1, !tbaa !6
  %720 = icmp sgt i8 %719, -1
  br i1 %720, label %721, label %731

721:                                              ; preds = %716
  %722 = tail call ptr @__ctype_b_loc() #14
  %723 = load ptr, ptr %722, align 8, !tbaa !13
  %724 = zext i8 %719 to i64
  %725 = getelementptr inbounds i16, ptr %723, i64 %724
  %726 = load i16, ptr %725, align 2, !tbaa !152
  %727 = and i16 %726, 8
  %728 = icmp ne i16 %727, 0
  %729 = icmp eq i8 %719, 95
  %730 = or i1 %729, %728
  br label %757

731:                                              ; preds = %716
  %732 = zext i8 %719 to i32
  %733 = and i32 %732, 254
  %734 = icmp eq i32 %733, 194
  br i1 %734, label %735, label %755

735:                                              ; preds = %731
  %736 = and i32 %732, 30
  %737 = icmp eq i32 %736, 0
  br i1 %737, label %738, label %757

738:                                              ; preds = %735
  %739 = shl nuw nsw i32 %732, 6
  %740 = and i32 %739, 1984
  %741 = getelementptr inbounds i8, ptr %717, i64 1
  %742 = load i8, ptr %741, align 1, !tbaa !6
  %743 = and i8 %742, 63
  %744 = zext i8 %743 to i32
  %745 = or i32 %740, %744
  %746 = tail call ptr @__ctype_b_loc() #14
  %747 = load ptr, ptr %746, align 8, !tbaa !13
  %748 = zext i32 %745 to i64
  %749 = getelementptr inbounds i16, ptr %747, i64 %748
  %750 = load i16, ptr %749, align 2, !tbaa !152
  %751 = and i16 %750, 8
  %752 = icmp ne i16 %751, 0
  %753 = icmp eq i32 %745, 95
  %754 = or i1 %753, %752
  br label %757

755:                                              ; preds = %731
  %756 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %717) #12
  br label %757

757:                                              ; preds = %738, %735, %755, %721
  %758 = phi i1 [ %730, %721 ], [ %756, %755 ], [ false, %735 ], [ %754, %738 ]
  %759 = xor i1 %758, true
  %760 = zext i1 %759 to i32
  %761 = icmp eq i32 %718, %760
  br i1 %761, label %762, label %831

762:                                              ; preds = %757
  %763 = load i8, ptr %714, align 8, !tbaa !47, !range !97, !noundef !98
  %764 = icmp eq i8 %763, 0
  br i1 %764, label %765, label %5550

765:                                              ; preds = %762
  %766 = icmp eq i32 %718, 0
  %767 = zext i1 %766 to i32
  %768 = load ptr, ptr %4, align 8, !tbaa !46
  %769 = getelementptr i8, ptr %768, i64 16
  %770 = load ptr, ptr %769, align 8, !tbaa !6
  %771 = getelementptr inbounds %struct.regexp, ptr %770, i64 0, i32 14
  %772 = load ptr, ptr %771, align 8, !tbaa !17
  store ptr null, ptr %715, align 8, !tbaa !93
  %773 = load ptr, ptr %6, align 8, !tbaa !13
  %774 = load ptr, ptr %668, align 8, !tbaa !53
  %775 = ptrtoint ptr %773 to i64
  %776 = ptrtoint ptr %774 to i64
  %777 = sub i64 %775, %776
  %778 = getelementptr inbounds %struct.regexp, ptr %770, i64 0, i32 17
  %779 = load ptr, ptr %778, align 8, !tbaa !38
  store i64 %777, ptr %779, align 8, !tbaa !39
  %780 = getelementptr inbounds %struct.regexp, ptr %770, i64 0, i32 15
  store i32 0, ptr %780, align 8, !tbaa !37
  %781 = getelementptr inbounds %struct.regexp, ptr %770, i64 0, i32 16
  store i32 0, ptr %781, align 4, !tbaa !36
  %782 = getelementptr inbounds %struct.regexp, ptr %770, i64 0, i32 12
  %783 = load i32, ptr %782, align 8, !tbaa !92
  %784 = icmp sgt i32 %783, 0
  br i1 %784, label %785, label %814

785:                                              ; preds = %765
  %786 = and i32 %783, 7
  %787 = icmp eq i32 %786, 0
  br i1 %787, label %796, label %788

788:                                              ; preds = %785, %788
  %789 = phi i32 [ %793, %788 ], [ %783, %785 ]
  %790 = phi ptr [ %792, %788 ], [ %779, %785 ]
  %791 = phi i32 [ %794, %788 ], [ 0, %785 ]
  %792 = getelementptr inbounds %struct.regexp_paren_pair, ptr %790, i64 1
  %793 = add nsw i32 %789, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %792, i8 -1, i64 16, i1 false)
  %794 = add i32 %791, 1
  %795 = icmp eq i32 %794, %786
  br i1 %795, label %796, label %788, !llvm.loop !153

796:                                              ; preds = %788, %785
  %797 = phi i32 [ %783, %785 ], [ %793, %788 ]
  %798 = phi ptr [ %779, %785 ], [ %792, %788 ]
  %799 = icmp ult i32 %783, 8
  br i1 %799, label %814, label %800

800:                                              ; preds = %796, %800
  %801 = phi i32 [ %811, %800 ], [ %797, %796 ]
  %802 = phi ptr [ %810, %800 ], [ %798, %796 ]
  %803 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %803, i8 -1, i64 16, i1 false)
  %804 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %804, i8 -1, i64 16, i1 false)
  %805 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %805, i8 -1, i64 16, i1 false)
  %806 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %806, i8 -1, i64 16, i1 false)
  %807 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %807, i8 -1, i64 16, i1 false)
  %808 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %808, i8 -1, i64 16, i1 false)
  %809 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %809, i8 -1, i64 16, i1 false)
  %810 = getelementptr inbounds %struct.regexp_paren_pair, ptr %802, i64 8
  %811 = add nsw i32 %801, -8
  %812 = add i32 %801, -9
  %813 = icmp ult i32 %812, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %810, i8 -1, i64 16, i1 false)
  br i1 %813, label %800, label %814, !llvm.loop !96

814:                                              ; preds = %796, %800, %765
  %815 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %816 = getelementptr inbounds %struct.regexp_internal, ptr %772, i64 1
  %817 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %773, ptr noundef nonnull %816)
  %818 = icmp eq i64 %817, -1
  br i1 %818, label %819, label %827

819:                                              ; preds = %814
  %820 = load ptr, ptr %715, align 8, !tbaa !93
  %821 = icmp eq ptr %820, null
  br i1 %821, label %823, label %822

822:                                              ; preds = %819
  store ptr %820, ptr %6, align 8, !tbaa !13
  br label %823

823:                                              ; preds = %822, %819
  %824 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %825 = icmp sgt i32 %824, %815
  br i1 %825, label %826, label %831

826:                                              ; preds = %823
  call void @Perl_leave_scope(i32 noundef %815) #12
  br label %831

827:                                              ; preds = %814
  %828 = getelementptr inbounds %struct.regexp, ptr %770, i64 0, i32 17
  %829 = load ptr, ptr %828, align 8, !tbaa !38
  %830 = getelementptr inbounds %struct.regexp_paren_pair, ptr %829, i64 0, i32 1
  store i64 %817, ptr %830, align 8, !tbaa !42
  br label %5550

831:                                              ; preds = %823, %826, %757
  %832 = phi i32 [ %718, %757 ], [ %767, %826 ], [ %767, %823 ]
  %833 = load ptr, ptr %6, align 8, !tbaa !13
  %834 = load i8, ptr %833, align 1, !tbaa !6
  %835 = zext i8 %834 to i64
  %836 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %835
  %837 = load i8, ptr %836, align 1, !tbaa !6
  %838 = zext i8 %837 to i64
  %839 = getelementptr inbounds i8, ptr %833, i64 %838
  store ptr %839, ptr %6, align 8, !tbaa !13
  %840 = icmp ult ptr %839, %3
  br i1 %840, label %716, label %958, !llvm.loop !154

841:                                              ; preds = %667
  br i1 %670, label %847, label %842

842:                                              ; preds = %841
  %843 = getelementptr inbounds i8, ptr %2, i64 -1
  %844 = load i8, ptr %843, align 1, !tbaa !6
  %845 = zext i8 %844 to i32
  %846 = icmp sgt i8 %844, -1
  br i1 %846, label %847, label %859

847:                                              ; preds = %841, %842
  %848 = phi i32 [ %845, %842 ], [ 10, %841 ]
  %849 = tail call ptr @__ctype_b_loc() #14
  %850 = load ptr, ptr %849, align 8, !tbaa !13
  %851 = zext i32 %848 to i64
  %852 = getelementptr inbounds i16, ptr %850, i64 %851
  %853 = load i16, ptr %852, align 2, !tbaa !152
  %854 = and i16 %853, 8
  %855 = icmp ne i16 %854, 0
  %856 = icmp eq i32 %848, 95
  %857 = or i1 %856, %855
  %858 = zext i1 %857 to i32
  br label %859

859:                                              ; preds = %847, %842
  %860 = phi i32 [ 0, %842 ], [ %858, %847 ]
  %861 = icmp ult ptr %2, %3
  br i1 %861, label %862, label %958

862:                                              ; preds = %859
  %863 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %864 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %865

865:                                              ; preds = %862, %953
  %866 = phi i32 [ %860, %862 ], [ %955, %953 ]
  %867 = phi ptr [ %2, %862 ], [ %956, %953 ]
  %868 = load i8, ptr %867, align 1, !tbaa !6
  %869 = icmp sgt i8 %868, -1
  br i1 %869, label %870, label %880

870:                                              ; preds = %865
  %871 = tail call ptr @__ctype_b_loc() #14
  %872 = load ptr, ptr %871, align 8, !tbaa !13
  %873 = zext i8 %868 to i64
  %874 = getelementptr inbounds i16, ptr %872, i64 %873
  %875 = load i16, ptr %874, align 2, !tbaa !152
  %876 = and i16 %875, 8
  %877 = icmp ne i16 %876, 0
  %878 = icmp eq i8 %868, 95
  %879 = or i1 %878, %877
  br label %880

880:                                              ; preds = %870, %865
  %881 = phi i1 [ false, %865 ], [ %879, %870 ]
  %882 = xor i1 %881, true
  %883 = zext i1 %882 to i32
  %884 = icmp eq i32 %866, %883
  br i1 %884, label %885, label %953

885:                                              ; preds = %880
  %886 = load i8, ptr %863, align 8, !tbaa !47, !range !97, !noundef !98
  %887 = icmp eq i8 %886, 0
  br i1 %887, label %888, label %5550

888:                                              ; preds = %885
  %889 = load ptr, ptr %4, align 8, !tbaa !46
  %890 = getelementptr i8, ptr %889, i64 16
  %891 = load ptr, ptr %890, align 8, !tbaa !6
  %892 = getelementptr inbounds %struct.regexp, ptr %891, i64 0, i32 14
  %893 = load ptr, ptr %892, align 8, !tbaa !17
  store ptr null, ptr %864, align 8, !tbaa !93
  %894 = load ptr, ptr %668, align 8, !tbaa !53
  %895 = ptrtoint ptr %867 to i64
  %896 = ptrtoint ptr %894 to i64
  %897 = sub i64 %895, %896
  %898 = getelementptr inbounds %struct.regexp, ptr %891, i64 0, i32 17
  %899 = load ptr, ptr %898, align 8, !tbaa !38
  store i64 %897, ptr %899, align 8, !tbaa !39
  %900 = getelementptr inbounds %struct.regexp, ptr %891, i64 0, i32 15
  store i32 0, ptr %900, align 8, !tbaa !37
  %901 = getelementptr inbounds %struct.regexp, ptr %891, i64 0, i32 16
  store i32 0, ptr %901, align 4, !tbaa !36
  %902 = getelementptr inbounds %struct.regexp, ptr %891, i64 0, i32 12
  %903 = load i32, ptr %902, align 8, !tbaa !92
  %904 = icmp sgt i32 %903, 0
  br i1 %904, label %905, label %934

905:                                              ; preds = %888
  %906 = and i32 %903, 7
  %907 = icmp eq i32 %906, 0
  br i1 %907, label %916, label %908

908:                                              ; preds = %905, %908
  %909 = phi i32 [ %913, %908 ], [ %903, %905 ]
  %910 = phi ptr [ %912, %908 ], [ %899, %905 ]
  %911 = phi i32 [ %914, %908 ], [ 0, %905 ]
  %912 = getelementptr inbounds %struct.regexp_paren_pair, ptr %910, i64 1
  %913 = add nsw i32 %909, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %912, i8 -1, i64 16, i1 false)
  %914 = add i32 %911, 1
  %915 = icmp eq i32 %914, %906
  br i1 %915, label %916, label %908, !llvm.loop !155

916:                                              ; preds = %908, %905
  %917 = phi i32 [ %903, %905 ], [ %913, %908 ]
  %918 = phi ptr [ %899, %905 ], [ %912, %908 ]
  %919 = icmp ult i32 %903, 8
  br i1 %919, label %934, label %920

920:                                              ; preds = %916, %920
  %921 = phi i32 [ %931, %920 ], [ %917, %916 ]
  %922 = phi ptr [ %930, %920 ], [ %918, %916 ]
  %923 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %923, i8 -1, i64 16, i1 false)
  %924 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %924, i8 -1, i64 16, i1 false)
  %925 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %925, i8 -1, i64 16, i1 false)
  %926 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %926, i8 -1, i64 16, i1 false)
  %927 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %927, i8 -1, i64 16, i1 false)
  %928 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %928, i8 -1, i64 16, i1 false)
  %929 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %929, i8 -1, i64 16, i1 false)
  %930 = getelementptr inbounds %struct.regexp_paren_pair, ptr %922, i64 8
  %931 = add nsw i32 %921, -8
  %932 = add i32 %921, -9
  %933 = icmp ult i32 %932, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %930, i8 -1, i64 16, i1 false)
  br i1 %933, label %920, label %934, !llvm.loop !96

934:                                              ; preds = %916, %920, %888
  %935 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %936 = getelementptr inbounds %struct.regexp_internal, ptr %893, i64 1
  %937 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %867, ptr noundef nonnull %936)
  %938 = icmp eq i64 %937, -1
  br i1 %938, label %939, label %946

939:                                              ; preds = %934
  %940 = load ptr, ptr %864, align 8, !tbaa !93
  %941 = icmp eq ptr %940, null
  %942 = select i1 %941, ptr %867, ptr %940
  %943 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %944 = icmp sgt i32 %943, %935
  br i1 %944, label %945, label %950

945:                                              ; preds = %939
  tail call void @Perl_leave_scope(i32 noundef %935) #12
  br label %950

946:                                              ; preds = %934
  %947 = getelementptr inbounds %struct.regexp, ptr %891, i64 0, i32 17
  %948 = load ptr, ptr %947, align 8, !tbaa !38
  %949 = getelementptr inbounds %struct.regexp_paren_pair, ptr %948, i64 0, i32 1
  store i64 %937, ptr %949, align 8, !tbaa !42
  br label %5550

950:                                              ; preds = %945, %939
  %951 = icmp eq i32 %866, 0
  %952 = zext i1 %951 to i32
  br label %953

953:                                              ; preds = %880, %950
  %954 = phi ptr [ %942, %950 ], [ %867, %880 ]
  %955 = phi i32 [ %952, %950 ], [ %866, %880 ]
  %956 = getelementptr inbounds i8, ptr %954, i64 1
  store ptr %956, ptr %6, align 8, !tbaa !13
  %957 = icmp ult ptr %956, %3
  br i1 %957, label %865, label %958, !llvm.loop !156

958:                                              ; preds = %953, %831, %859, %710
  %959 = phi i32 [ %703, %710 ], [ %860, %859 ], [ %832, %831 ], [ %955, %953 ]
  %960 = tail call ptr @__ctype_b_loc() #14
  %961 = load ptr, ptr %960, align 8, !tbaa !13
  %962 = getelementptr inbounds i16, ptr %961, i64 10
  %963 = load i16, ptr %962, align 2, !tbaa !152
  %964 = and i16 %963, 8
  %965 = icmp eq i16 %964, 0
  %966 = zext i1 %965 to i32
  %967 = icmp eq i32 %959, %966
  br i1 %967, label %968, label %5552

968:                                              ; preds = %958
  %969 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %970 = load i8, ptr %969, align 8, !tbaa !47, !range !97, !noundef !98
  %971 = icmp eq i8 %970, 0
  br i1 %971, label %972, label %5550

972:                                              ; preds = %968
  %973 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %5552, label %5550

975:                                              ; preds = %5
  %976 = load i8, ptr %1, align 2, !tbaa !139
  %977 = icmp eq i8 %976, 0
  br i1 %977, label %981, label %978

978:                                              ; preds = %975
  %979 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !151, !range !97, !noundef !98
  %980 = icmp eq i8 %979, 0
  br i1 %980, label %2565, label %2570

981:                                              ; preds = %975
  %982 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %983 = load ptr, ptr %982, align 8, !tbaa !53
  %984 = icmp eq ptr %983, %2
  br i1 %25, label %985, label %1156

985:                                              ; preds = %981
  br i1 %984, label %1001, label %986

986:                                              ; preds = %985
  %987 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %983)
  %988 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %989 = load ptr, ptr %988, align 8, !tbaa !56
  %990 = ptrtoint ptr %989 to i64
  %991 = ptrtoint ptr %987 to i64
  %992 = sub i64 %990, %991
  %993 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %994 = xor i1 %993, true
  %995 = zext i1 %994 to i32
  %996 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %987, i64 noundef %992, ptr noundef null, i32 noundef %995) #12
  %997 = trunc i64 %996 to i32
  %998 = icmp slt i32 %997, 256
  br i1 %998, label %999, label %1012

999:                                              ; preds = %986
  %1000 = icmp ult i32 %997, 128
  br i1 %1000, label %1001, label %1015

1001:                                             ; preds = %985, %999
  %1002 = phi i32 [ %997, %999 ], [ 10, %985 ]
  %1003 = tail call ptr @__ctype_b_loc() #14
  %1004 = load ptr, ptr %1003, align 8, !tbaa !13
  %1005 = zext i32 %1002 to i64
  %1006 = getelementptr inbounds i16, ptr %1004, i64 %1005
  %1007 = load i16, ptr %1006, align 2, !tbaa !152
  %1008 = and i16 %1007, 8
  %1009 = icmp ne i16 %1008, 0
  %1010 = icmp eq i32 %1002, 95
  %1011 = or i1 %1010, %1009
  br label %1015

1012:                                             ; preds = %986
  %1013 = and i64 %996, 4294967295
  %1014 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %1013) #12
  br label %1015

1015:                                             ; preds = %999, %1001, %1012
  %1016 = phi i1 [ %1014, %1012 ], [ false, %999 ], [ %1011, %1001 ]
  %1017 = zext i1 %1016 to i32
  %1018 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  %1019 = icmp eq ptr %1018, null
  br i1 %1019, label %1020, label %1024

1020:                                             ; preds = %1015
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9) #12
  store i8 4, ptr %9, align 1, !tbaa !6
  %1021 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !13
  %1022 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1021, ptr noundef nonnull %9) #12
  store ptr %1022, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9) #12
  %1023 = load ptr, ptr %6, align 8, !tbaa !13
  br label %1024

1024:                                             ; preds = %1015, %1020
  %1025 = phi ptr [ %2, %1015 ], [ %1023, %1020 ]
  %1026 = icmp ult ptr %1025, %3
  br i1 %1026, label %1027, label %1273

1027:                                             ; preds = %1024
  %1028 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1029 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1030

1030:                                             ; preds = %1027, %1146
  %1031 = phi ptr [ %1025, %1027 ], [ %1154, %1146 ]
  %1032 = phi i32 [ %1017, %1027 ], [ %1147, %1146 ]
  %1033 = load i8, ptr %1031, align 1, !tbaa !6
  %1034 = icmp sgt i8 %1033, -1
  br i1 %1034, label %1035, label %1045

1035:                                             ; preds = %1030
  %1036 = tail call ptr @__ctype_b_loc() #14
  %1037 = load ptr, ptr %1036, align 8, !tbaa !13
  %1038 = zext i8 %1033 to i64
  %1039 = getelementptr inbounds i16, ptr %1037, i64 %1038
  %1040 = load i16, ptr %1039, align 2, !tbaa !152
  %1041 = and i16 %1040, 8
  %1042 = icmp ne i16 %1041, 0
  %1043 = icmp eq i8 %1033, 95
  %1044 = or i1 %1043, %1042
  br label %1071

1045:                                             ; preds = %1030
  %1046 = zext i8 %1033 to i32
  %1047 = and i32 %1046, 254
  %1048 = icmp eq i32 %1047, 194
  br i1 %1048, label %1049, label %1069

1049:                                             ; preds = %1045
  %1050 = and i32 %1046, 30
  %1051 = icmp eq i32 %1050, 0
  br i1 %1051, label %1052, label %1071

1052:                                             ; preds = %1049
  %1053 = shl nuw nsw i32 %1046, 6
  %1054 = and i32 %1053, 1984
  %1055 = getelementptr inbounds i8, ptr %1031, i64 1
  %1056 = load i8, ptr %1055, align 1, !tbaa !6
  %1057 = and i8 %1056, 63
  %1058 = zext i8 %1057 to i32
  %1059 = or i32 %1054, %1058
  %1060 = tail call ptr @__ctype_b_loc() #14
  %1061 = load ptr, ptr %1060, align 8, !tbaa !13
  %1062 = zext i32 %1059 to i64
  %1063 = getelementptr inbounds i16, ptr %1061, i64 %1062
  %1064 = load i16, ptr %1063, align 2, !tbaa !152
  %1065 = and i16 %1064, 8
  %1066 = icmp ne i16 %1065, 0
  %1067 = icmp eq i32 %1059, 95
  %1068 = or i1 %1067, %1066
  br label %1071

1069:                                             ; preds = %1045
  %1070 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1031) #12
  br label %1071

1071:                                             ; preds = %1052, %1049, %1069, %1035
  %1072 = phi i1 [ %1044, %1035 ], [ %1070, %1069 ], [ false, %1049 ], [ %1068, %1052 ]
  %1073 = xor i1 %1072, true
  %1074 = zext i1 %1073 to i32
  %1075 = icmp eq i32 %1032, %1074
  br i1 %1075, label %1076, label %1079

1076:                                             ; preds = %1071
  %1077 = icmp eq i32 %1032, 0
  %1078 = zext i1 %1077 to i32
  br label %1146

1079:                                             ; preds = %1071
  %1080 = load i8, ptr %1028, align 8, !tbaa !47, !range !97, !noundef !98
  %1081 = icmp eq i8 %1080, 0
  br i1 %1081, label %1082, label %5550

1082:                                             ; preds = %1079
  %1083 = load ptr, ptr %4, align 8, !tbaa !46
  %1084 = getelementptr i8, ptr %1083, i64 16
  %1085 = load ptr, ptr %1084, align 8, !tbaa !6
  %1086 = getelementptr inbounds %struct.regexp, ptr %1085, i64 0, i32 14
  %1087 = load ptr, ptr %1086, align 8, !tbaa !17
  store ptr null, ptr %1029, align 8, !tbaa !93
  %1088 = load ptr, ptr %6, align 8, !tbaa !13
  %1089 = load ptr, ptr %982, align 8, !tbaa !53
  %1090 = ptrtoint ptr %1088 to i64
  %1091 = ptrtoint ptr %1089 to i64
  %1092 = sub i64 %1090, %1091
  %1093 = getelementptr inbounds %struct.regexp, ptr %1085, i64 0, i32 17
  %1094 = load ptr, ptr %1093, align 8, !tbaa !38
  store i64 %1092, ptr %1094, align 8, !tbaa !39
  %1095 = getelementptr inbounds %struct.regexp, ptr %1085, i64 0, i32 15
  store i32 0, ptr %1095, align 8, !tbaa !37
  %1096 = getelementptr inbounds %struct.regexp, ptr %1085, i64 0, i32 16
  store i32 0, ptr %1096, align 4, !tbaa !36
  %1097 = getelementptr inbounds %struct.regexp, ptr %1085, i64 0, i32 12
  %1098 = load i32, ptr %1097, align 8, !tbaa !92
  %1099 = icmp sgt i32 %1098, 0
  br i1 %1099, label %1100, label %1129

1100:                                             ; preds = %1082
  %1101 = and i32 %1098, 7
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1111, label %1103

1103:                                             ; preds = %1100, %1103
  %1104 = phi i32 [ %1108, %1103 ], [ %1098, %1100 ]
  %1105 = phi ptr [ %1107, %1103 ], [ %1094, %1100 ]
  %1106 = phi i32 [ %1109, %1103 ], [ 0, %1100 ]
  %1107 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1105, i64 1
  %1108 = add nsw i32 %1104, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1107, i8 -1, i64 16, i1 false)
  %1109 = add i32 %1106, 1
  %1110 = icmp eq i32 %1109, %1101
  br i1 %1110, label %1111, label %1103, !llvm.loop !157

1111:                                             ; preds = %1103, %1100
  %1112 = phi i32 [ %1098, %1100 ], [ %1108, %1103 ]
  %1113 = phi ptr [ %1094, %1100 ], [ %1107, %1103 ]
  %1114 = icmp ult i32 %1098, 8
  br i1 %1114, label %1129, label %1115

1115:                                             ; preds = %1111, %1115
  %1116 = phi i32 [ %1126, %1115 ], [ %1112, %1111 ]
  %1117 = phi ptr [ %1125, %1115 ], [ %1113, %1111 ]
  %1118 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1118, i8 -1, i64 16, i1 false)
  %1119 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1119, i8 -1, i64 16, i1 false)
  %1120 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1120, i8 -1, i64 16, i1 false)
  %1121 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1121, i8 -1, i64 16, i1 false)
  %1122 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1122, i8 -1, i64 16, i1 false)
  %1123 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1123, i8 -1, i64 16, i1 false)
  %1124 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1124, i8 -1, i64 16, i1 false)
  %1125 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1117, i64 8
  %1126 = add nsw i32 %1116, -8
  %1127 = add i32 %1116, -9
  %1128 = icmp ult i32 %1127, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1125, i8 -1, i64 16, i1 false)
  br i1 %1128, label %1115, label %1129, !llvm.loop !96

1129:                                             ; preds = %1111, %1115, %1082
  %1130 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1131 = getelementptr inbounds %struct.regexp_internal, ptr %1087, i64 1
  %1132 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %1088, ptr noundef nonnull %1131)
  %1133 = icmp eq i64 %1132, -1
  br i1 %1133, label %1134, label %1142

1134:                                             ; preds = %1129
  %1135 = load ptr, ptr %1029, align 8, !tbaa !93
  %1136 = icmp eq ptr %1135, null
  br i1 %1136, label %1138, label %1137

1137:                                             ; preds = %1134
  store ptr %1135, ptr %6, align 8, !tbaa !13
  br label %1138

1138:                                             ; preds = %1137, %1134
  %1139 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1140 = icmp sgt i32 %1139, %1130
  br i1 %1140, label %1141, label %1146

1141:                                             ; preds = %1138
  call void @Perl_leave_scope(i32 noundef %1130) #12
  br label %1146

1142:                                             ; preds = %1129
  %1143 = getelementptr inbounds %struct.regexp, ptr %1085, i64 0, i32 17
  %1144 = load ptr, ptr %1143, align 8, !tbaa !38
  %1145 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1144, i64 0, i32 1
  store i64 %1132, ptr %1145, align 8, !tbaa !42
  br label %5550

1146:                                             ; preds = %1138, %1141, %1076
  %1147 = phi i32 [ %1078, %1076 ], [ %1032, %1141 ], [ %1032, %1138 ]
  %1148 = load ptr, ptr %6, align 8, !tbaa !13
  %1149 = load i8, ptr %1148, align 1, !tbaa !6
  %1150 = zext i8 %1149 to i64
  %1151 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1150
  %1152 = load i8, ptr %1151, align 1, !tbaa !6
  %1153 = zext i8 %1152 to i64
  %1154 = getelementptr inbounds i8, ptr %1148, i64 %1153
  store ptr %1154, ptr %6, align 8, !tbaa !13
  %1155 = icmp ult ptr %1154, %3
  br i1 %1155, label %1030, label %1273, !llvm.loop !158

1156:                                             ; preds = %981
  br i1 %984, label %1162, label %1157

1157:                                             ; preds = %1156
  %1158 = getelementptr inbounds i8, ptr %2, i64 -1
  %1159 = load i8, ptr %1158, align 1, !tbaa !6
  %1160 = zext i8 %1159 to i32
  %1161 = icmp sgt i8 %1159, -1
  br i1 %1161, label %1162, label %1174

1162:                                             ; preds = %1156, %1157
  %1163 = phi i32 [ %1160, %1157 ], [ 10, %1156 ]
  %1164 = tail call ptr @__ctype_b_loc() #14
  %1165 = load ptr, ptr %1164, align 8, !tbaa !13
  %1166 = zext i32 %1163 to i64
  %1167 = getelementptr inbounds i16, ptr %1165, i64 %1166
  %1168 = load i16, ptr %1167, align 2, !tbaa !152
  %1169 = and i16 %1168, 8
  %1170 = icmp ne i16 %1169, 0
  %1171 = icmp eq i32 %1163, 95
  %1172 = or i1 %1171, %1170
  %1173 = zext i1 %1172 to i32
  br label %1174

1174:                                             ; preds = %1162, %1157
  %1175 = phi i32 [ 0, %1157 ], [ %1173, %1162 ]
  %1176 = icmp ult ptr %2, %3
  br i1 %1176, label %1177, label %1273

1177:                                             ; preds = %1174
  %1178 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1179 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1180

1180:                                             ; preds = %1177, %1268
  %1181 = phi i32 [ %1175, %1177 ], [ %1270, %1268 ]
  %1182 = phi ptr [ %2, %1177 ], [ %1271, %1268 ]
  %1183 = load i8, ptr %1182, align 1, !tbaa !6
  %1184 = icmp sgt i8 %1183, -1
  br i1 %1184, label %1185, label %1195

1185:                                             ; preds = %1180
  %1186 = tail call ptr @__ctype_b_loc() #14
  %1187 = load ptr, ptr %1186, align 8, !tbaa !13
  %1188 = zext i8 %1183 to i64
  %1189 = getelementptr inbounds i16, ptr %1187, i64 %1188
  %1190 = load i16, ptr %1189, align 2, !tbaa !152
  %1191 = and i16 %1190, 8
  %1192 = icmp ne i16 %1191, 0
  %1193 = icmp eq i8 %1183, 95
  %1194 = or i1 %1193, %1192
  br label %1195

1195:                                             ; preds = %1185, %1180
  %1196 = phi i1 [ false, %1180 ], [ %1194, %1185 ]
  %1197 = xor i1 %1196, true
  %1198 = zext i1 %1197 to i32
  %1199 = icmp eq i32 %1181, %1198
  br i1 %1199, label %1200, label %1203

1200:                                             ; preds = %1195
  %1201 = icmp eq i32 %1181, 0
  %1202 = zext i1 %1201 to i32
  br label %1268

1203:                                             ; preds = %1195
  %1204 = load i8, ptr %1178, align 8, !tbaa !47, !range !97, !noundef !98
  %1205 = icmp eq i8 %1204, 0
  br i1 %1205, label %1206, label %5550

1206:                                             ; preds = %1203
  %1207 = load ptr, ptr %4, align 8, !tbaa !46
  %1208 = getelementptr i8, ptr %1207, i64 16
  %1209 = load ptr, ptr %1208, align 8, !tbaa !6
  %1210 = getelementptr inbounds %struct.regexp, ptr %1209, i64 0, i32 14
  %1211 = load ptr, ptr %1210, align 8, !tbaa !17
  store ptr null, ptr %1179, align 8, !tbaa !93
  %1212 = load ptr, ptr %982, align 8, !tbaa !53
  %1213 = ptrtoint ptr %1182 to i64
  %1214 = ptrtoint ptr %1212 to i64
  %1215 = sub i64 %1213, %1214
  %1216 = getelementptr inbounds %struct.regexp, ptr %1209, i64 0, i32 17
  %1217 = load ptr, ptr %1216, align 8, !tbaa !38
  store i64 %1215, ptr %1217, align 8, !tbaa !39
  %1218 = getelementptr inbounds %struct.regexp, ptr %1209, i64 0, i32 15
  store i32 0, ptr %1218, align 8, !tbaa !37
  %1219 = getelementptr inbounds %struct.regexp, ptr %1209, i64 0, i32 16
  store i32 0, ptr %1219, align 4, !tbaa !36
  %1220 = getelementptr inbounds %struct.regexp, ptr %1209, i64 0, i32 12
  %1221 = load i32, ptr %1220, align 8, !tbaa !92
  %1222 = icmp sgt i32 %1221, 0
  br i1 %1222, label %1223, label %1252

1223:                                             ; preds = %1206
  %1224 = and i32 %1221, 7
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %1234, label %1226

1226:                                             ; preds = %1223, %1226
  %1227 = phi i32 [ %1231, %1226 ], [ %1221, %1223 ]
  %1228 = phi ptr [ %1230, %1226 ], [ %1217, %1223 ]
  %1229 = phi i32 [ %1232, %1226 ], [ 0, %1223 ]
  %1230 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1228, i64 1
  %1231 = add nsw i32 %1227, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1230, i8 -1, i64 16, i1 false)
  %1232 = add i32 %1229, 1
  %1233 = icmp eq i32 %1232, %1224
  br i1 %1233, label %1234, label %1226, !llvm.loop !159

1234:                                             ; preds = %1226, %1223
  %1235 = phi i32 [ %1221, %1223 ], [ %1231, %1226 ]
  %1236 = phi ptr [ %1217, %1223 ], [ %1230, %1226 ]
  %1237 = icmp ult i32 %1221, 8
  br i1 %1237, label %1252, label %1238

1238:                                             ; preds = %1234, %1238
  %1239 = phi i32 [ %1249, %1238 ], [ %1235, %1234 ]
  %1240 = phi ptr [ %1248, %1238 ], [ %1236, %1234 ]
  %1241 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1241, i8 -1, i64 16, i1 false)
  %1242 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1242, i8 -1, i64 16, i1 false)
  %1243 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1243, i8 -1, i64 16, i1 false)
  %1244 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1244, i8 -1, i64 16, i1 false)
  %1245 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1245, i8 -1, i64 16, i1 false)
  %1246 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1246, i8 -1, i64 16, i1 false)
  %1247 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1247, i8 -1, i64 16, i1 false)
  %1248 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1240, i64 8
  %1249 = add nsw i32 %1239, -8
  %1250 = add i32 %1239, -9
  %1251 = icmp ult i32 %1250, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1248, i8 -1, i64 16, i1 false)
  br i1 %1251, label %1238, label %1252, !llvm.loop !96

1252:                                             ; preds = %1234, %1238, %1206
  %1253 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1254 = getelementptr inbounds %struct.regexp_internal, ptr %1211, i64 1
  %1255 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1182, ptr noundef nonnull %1254)
  %1256 = icmp eq i64 %1255, -1
  br i1 %1256, label %1257, label %1264

1257:                                             ; preds = %1252
  %1258 = load ptr, ptr %1179, align 8, !tbaa !93
  %1259 = icmp eq ptr %1258, null
  %1260 = select i1 %1259, ptr %1182, ptr %1258
  %1261 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1262 = icmp sgt i32 %1261, %1253
  br i1 %1262, label %1263, label %1268

1263:                                             ; preds = %1257
  tail call void @Perl_leave_scope(i32 noundef %1253) #12
  br label %1268

1264:                                             ; preds = %1252
  %1265 = getelementptr inbounds %struct.regexp, ptr %1209, i64 0, i32 17
  %1266 = load ptr, ptr %1265, align 8, !tbaa !38
  %1267 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1266, i64 0, i32 1
  store i64 %1255, ptr %1267, align 8, !tbaa !42
  br label %5550

1268:                                             ; preds = %1257, %1263, %1200
  %1269 = phi ptr [ %1182, %1200 ], [ %1260, %1263 ], [ %1260, %1257 ]
  %1270 = phi i32 [ %1202, %1200 ], [ %1181, %1263 ], [ %1181, %1257 ]
  %1271 = getelementptr inbounds i8, ptr %1269, i64 1
  store ptr %1271, ptr %6, align 8, !tbaa !13
  %1272 = icmp ult ptr %1271, %3
  br i1 %1272, label %1180, label %1273, !llvm.loop !160

1273:                                             ; preds = %1268, %1146, %1174, %1024
  %1274 = phi i32 [ %1017, %1024 ], [ %1175, %1174 ], [ %1147, %1146 ], [ %1270, %1268 ]
  %1275 = tail call ptr @__ctype_b_loc() #14
  %1276 = load ptr, ptr %1275, align 8, !tbaa !13
  %1277 = getelementptr inbounds i16, ptr %1276, i64 10
  %1278 = load i16, ptr %1277, align 2, !tbaa !152
  %1279 = and i16 %1278, 8
  %1280 = icmp eq i16 %1279, 0
  %1281 = zext i1 %1280 to i32
  %1282 = icmp eq i32 %1274, %1281
  br i1 %1282, label %5552, label %1283

1283:                                             ; preds = %1273
  %1284 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1285 = load i8, ptr %1284, align 8, !tbaa !47, !range !97, !noundef !98
  %1286 = icmp eq i8 %1285, 0
  br i1 %1286, label %1287, label %5550

1287:                                             ; preds = %1283
  %1288 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %1289 = icmp eq i32 %1288, 0
  br i1 %1289, label %5552, label %5550

1290:                                             ; preds = %5
  %1291 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %1292 = load ptr, ptr %1291, align 8, !tbaa !53
  %1293 = icmp eq ptr %1292, %2
  br i1 %25, label %1294, label %1451

1294:                                             ; preds = %1290
  br i1 %1293, label %1310, label %1295

1295:                                             ; preds = %1294
  %1296 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %1292)
  %1297 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %1298 = load ptr, ptr %1297, align 8, !tbaa !56
  %1299 = ptrtoint ptr %1298 to i64
  %1300 = ptrtoint ptr %1296 to i64
  %1301 = sub i64 %1299, %1300
  %1302 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %1303 = xor i1 %1302, true
  %1304 = zext i1 %1303 to i32
  %1305 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %1296, i64 noundef %1301, ptr noundef null, i32 noundef %1304) #12
  %1306 = trunc i64 %1305 to i32
  %1307 = icmp slt i32 %1306, 256
  br i1 %1307, label %1308, label %1316

1308:                                             ; preds = %1295
  %1309 = icmp ult i32 %1306, 256
  br i1 %1309, label %1310, label %1320

1310:                                             ; preds = %1294, %1308
  %1311 = phi i64 [ %1305, %1308 ], [ 10, %1294 ]
  %1312 = and i64 %1311, 4294967295
  %1313 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1312
  %1314 = load i32, ptr %1313, align 4, !tbaa !34
  %1315 = and i32 %1314, 1
  br label %1320

1316:                                             ; preds = %1295
  %1317 = and i64 %1305, 4294967295
  %1318 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %1317) #12
  %1319 = zext i1 %1318 to i32
  br label %1320

1320:                                             ; preds = %1308, %1310, %1316
  %1321 = phi i32 [ %1319, %1316 ], [ 0, %1308 ], [ %1315, %1310 ]
  %1322 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  %1323 = icmp eq ptr %1322, null
  br i1 %1323, label %1324, label %1328

1324:                                             ; preds = %1320
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10) #12
  store i8 4, ptr %10, align 1, !tbaa !6
  %1325 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !13
  %1326 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1325, ptr noundef nonnull %10) #12
  store ptr %1326, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10) #12
  %1327 = load ptr, ptr %6, align 8, !tbaa !13
  br label %1328

1328:                                             ; preds = %1320, %1324
  %1329 = phi ptr [ %2, %1320 ], [ %1327, %1324 ]
  %1330 = icmp ult ptr %1329, %3
  br i1 %1330, label %1331, label %1551

1331:                                             ; preds = %1328
  %1332 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1333 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1334

1334:                                             ; preds = %1331, %1441
  %1335 = phi ptr [ %1329, %1331 ], [ %1449, %1441 ]
  %1336 = phi i32 [ %1321, %1331 ], [ %1442, %1441 ]
  %1337 = load i8, ptr %1335, align 1, !tbaa !6
  %1338 = icmp sgt i8 %1337, -1
  br i1 %1338, label %1339, label %1344

1339:                                             ; preds = %1334
  %1340 = zext i8 %1337 to i64
  %1341 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1340
  %1342 = load i32, ptr %1341, align 4, !tbaa !34
  %1343 = and i32 %1342, 1
  br label %1368

1344:                                             ; preds = %1334
  %1345 = zext i8 %1337 to i32
  %1346 = and i32 %1345, 254
  %1347 = icmp eq i32 %1346, 194
  br i1 %1347, label %1348, label %1365

1348:                                             ; preds = %1344
  %1349 = and i32 %1345, 28
  %1350 = icmp eq i32 %1349, 0
  br i1 %1350, label %1351, label %1362

1351:                                             ; preds = %1348
  %1352 = shl i8 %1337, 6
  %1353 = getelementptr inbounds i8, ptr %1335, i64 1
  %1354 = load i8, ptr %1353, align 1, !tbaa !6
  %1355 = and i8 %1354, 63
  %1356 = or i8 %1355, %1352
  %1357 = zext i8 %1356 to i64
  %1358 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1357
  %1359 = load i32, ptr %1358, align 4, !tbaa !34
  %1360 = and i32 %1359, 1
  %1361 = icmp ne i32 %1360, 0
  br label %1362

1362:                                             ; preds = %1351, %1348
  %1363 = phi i1 [ false, %1348 ], [ %1361, %1351 ]
  %1364 = zext i1 %1363 to i32
  br label %1368

1365:                                             ; preds = %1344
  %1366 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1335) #12
  %1367 = zext i1 %1366 to i32
  br label %1368

1368:                                             ; preds = %1362, %1365, %1339
  %1369 = phi i32 [ %1343, %1339 ], [ %1364, %1362 ], [ %1367, %1365 ]
  %1370 = xor i32 %1369, 1
  %1371 = icmp eq i32 %1336, %1370
  br i1 %1371, label %1372, label %1441

1372:                                             ; preds = %1368
  %1373 = load i8, ptr %1332, align 8, !tbaa !47, !range !97, !noundef !98
  %1374 = icmp eq i8 %1373, 0
  br i1 %1374, label %1375, label %5550

1375:                                             ; preds = %1372
  %1376 = icmp eq i32 %1336, 0
  %1377 = zext i1 %1376 to i32
  %1378 = load ptr, ptr %4, align 8, !tbaa !46
  %1379 = getelementptr i8, ptr %1378, i64 16
  %1380 = load ptr, ptr %1379, align 8, !tbaa !6
  %1381 = getelementptr inbounds %struct.regexp, ptr %1380, i64 0, i32 14
  %1382 = load ptr, ptr %1381, align 8, !tbaa !17
  store ptr null, ptr %1333, align 8, !tbaa !93
  %1383 = load ptr, ptr %6, align 8, !tbaa !13
  %1384 = load ptr, ptr %1291, align 8, !tbaa !53
  %1385 = ptrtoint ptr %1383 to i64
  %1386 = ptrtoint ptr %1384 to i64
  %1387 = sub i64 %1385, %1386
  %1388 = getelementptr inbounds %struct.regexp, ptr %1380, i64 0, i32 17
  %1389 = load ptr, ptr %1388, align 8, !tbaa !38
  store i64 %1387, ptr %1389, align 8, !tbaa !39
  %1390 = getelementptr inbounds %struct.regexp, ptr %1380, i64 0, i32 15
  store i32 0, ptr %1390, align 8, !tbaa !37
  %1391 = getelementptr inbounds %struct.regexp, ptr %1380, i64 0, i32 16
  store i32 0, ptr %1391, align 4, !tbaa !36
  %1392 = getelementptr inbounds %struct.regexp, ptr %1380, i64 0, i32 12
  %1393 = load i32, ptr %1392, align 8, !tbaa !92
  %1394 = icmp sgt i32 %1393, 0
  br i1 %1394, label %1395, label %1424

1395:                                             ; preds = %1375
  %1396 = and i32 %1393, 7
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1406, label %1398

1398:                                             ; preds = %1395, %1398
  %1399 = phi i32 [ %1403, %1398 ], [ %1393, %1395 ]
  %1400 = phi ptr [ %1402, %1398 ], [ %1389, %1395 ]
  %1401 = phi i32 [ %1404, %1398 ], [ 0, %1395 ]
  %1402 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1400, i64 1
  %1403 = add nsw i32 %1399, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1402, i8 -1, i64 16, i1 false)
  %1404 = add i32 %1401, 1
  %1405 = icmp eq i32 %1404, %1396
  br i1 %1405, label %1406, label %1398, !llvm.loop !161

1406:                                             ; preds = %1398, %1395
  %1407 = phi i32 [ %1393, %1395 ], [ %1403, %1398 ]
  %1408 = phi ptr [ %1389, %1395 ], [ %1402, %1398 ]
  %1409 = icmp ult i32 %1393, 8
  br i1 %1409, label %1424, label %1410

1410:                                             ; preds = %1406, %1410
  %1411 = phi i32 [ %1421, %1410 ], [ %1407, %1406 ]
  %1412 = phi ptr [ %1420, %1410 ], [ %1408, %1406 ]
  %1413 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1413, i8 -1, i64 16, i1 false)
  %1414 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1414, i8 -1, i64 16, i1 false)
  %1415 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1415, i8 -1, i64 16, i1 false)
  %1416 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1416, i8 -1, i64 16, i1 false)
  %1417 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1417, i8 -1, i64 16, i1 false)
  %1418 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1418, i8 -1, i64 16, i1 false)
  %1419 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1419, i8 -1, i64 16, i1 false)
  %1420 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1412, i64 8
  %1421 = add nsw i32 %1411, -8
  %1422 = add i32 %1411, -9
  %1423 = icmp ult i32 %1422, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1420, i8 -1, i64 16, i1 false)
  br i1 %1423, label %1410, label %1424, !llvm.loop !96

1424:                                             ; preds = %1406, %1410, %1375
  %1425 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1426 = getelementptr inbounds %struct.regexp_internal, ptr %1382, i64 1
  %1427 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %1383, ptr noundef nonnull %1426)
  %1428 = icmp eq i64 %1427, -1
  br i1 %1428, label %1429, label %1437

1429:                                             ; preds = %1424
  %1430 = load ptr, ptr %1333, align 8, !tbaa !93
  %1431 = icmp eq ptr %1430, null
  br i1 %1431, label %1433, label %1432

1432:                                             ; preds = %1429
  store ptr %1430, ptr %6, align 8, !tbaa !13
  br label %1433

1433:                                             ; preds = %1432, %1429
  %1434 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1435 = icmp sgt i32 %1434, %1425
  br i1 %1435, label %1436, label %1441

1436:                                             ; preds = %1433
  call void @Perl_leave_scope(i32 noundef %1425) #12
  br label %1441

1437:                                             ; preds = %1424
  %1438 = getelementptr inbounds %struct.regexp, ptr %1380, i64 0, i32 17
  %1439 = load ptr, ptr %1438, align 8, !tbaa !38
  %1440 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1439, i64 0, i32 1
  store i64 %1427, ptr %1440, align 8, !tbaa !42
  br label %5550

1441:                                             ; preds = %1433, %1436, %1368
  %1442 = phi i32 [ %1336, %1368 ], [ %1377, %1436 ], [ %1377, %1433 ]
  %1443 = load ptr, ptr %6, align 8, !tbaa !13
  %1444 = load i8, ptr %1443, align 1, !tbaa !6
  %1445 = zext i8 %1444 to i64
  %1446 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1445
  %1447 = load i8, ptr %1446, align 1, !tbaa !6
  %1448 = zext i8 %1447 to i64
  %1449 = getelementptr inbounds i8, ptr %1443, i64 %1448
  store ptr %1449, ptr %6, align 8, !tbaa !13
  %1450 = icmp ult ptr %1449, %3
  br i1 %1450, label %1334, label %1551, !llvm.loop !162

1451:                                             ; preds = %1290
  br i1 %1293, label %1456, label %1452

1452:                                             ; preds = %1451
  %1453 = getelementptr inbounds i8, ptr %2, i64 -1
  %1454 = load i8, ptr %1453, align 1, !tbaa !6
  %1455 = zext i8 %1454 to i64
  br label %1456

1456:                                             ; preds = %1451, %1452
  %1457 = phi i64 [ %1455, %1452 ], [ 10, %1451 ]
  %1458 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1457
  %1459 = load i32, ptr %1458, align 4, !tbaa !34
  %1460 = and i32 %1459, 16385
  %1461 = icmp eq i32 %1460, 16385
  %1462 = zext i1 %1461 to i32
  %1463 = icmp ult ptr %2, %3
  br i1 %1463, label %1464, label %1551

1464:                                             ; preds = %1456
  %1465 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1466 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1467

1467:                                             ; preds = %1464, %1546
  %1468 = phi i32 [ %1462, %1464 ], [ %1548, %1546 ]
  %1469 = phi ptr [ %2, %1464 ], [ %1549, %1546 ]
  %1470 = load i8, ptr %1469, align 1, !tbaa !6
  %1471 = zext i8 %1470 to i64
  %1472 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1471
  %1473 = load i32, ptr %1472, align 4, !tbaa !34
  %1474 = and i32 %1473, 16385
  %1475 = icmp ne i32 %1474, 16385
  %1476 = zext i1 %1475 to i32
  %1477 = icmp eq i32 %1468, %1476
  br i1 %1477, label %1478, label %1546

1478:                                             ; preds = %1467
  %1479 = load i8, ptr %1465, align 8, !tbaa !47, !range !97, !noundef !98
  %1480 = icmp eq i8 %1479, 0
  br i1 %1480, label %1481, label %5550

1481:                                             ; preds = %1478
  %1482 = load ptr, ptr %4, align 8, !tbaa !46
  %1483 = getelementptr i8, ptr %1482, i64 16
  %1484 = load ptr, ptr %1483, align 8, !tbaa !6
  %1485 = getelementptr inbounds %struct.regexp, ptr %1484, i64 0, i32 14
  %1486 = load ptr, ptr %1485, align 8, !tbaa !17
  store ptr null, ptr %1466, align 8, !tbaa !93
  %1487 = load ptr, ptr %1291, align 8, !tbaa !53
  %1488 = ptrtoint ptr %1469 to i64
  %1489 = ptrtoint ptr %1487 to i64
  %1490 = sub i64 %1488, %1489
  %1491 = getelementptr inbounds %struct.regexp, ptr %1484, i64 0, i32 17
  %1492 = load ptr, ptr %1491, align 8, !tbaa !38
  store i64 %1490, ptr %1492, align 8, !tbaa !39
  %1493 = getelementptr inbounds %struct.regexp, ptr %1484, i64 0, i32 15
  store i32 0, ptr %1493, align 8, !tbaa !37
  %1494 = getelementptr inbounds %struct.regexp, ptr %1484, i64 0, i32 16
  store i32 0, ptr %1494, align 4, !tbaa !36
  %1495 = getelementptr inbounds %struct.regexp, ptr %1484, i64 0, i32 12
  %1496 = load i32, ptr %1495, align 8, !tbaa !92
  %1497 = icmp sgt i32 %1496, 0
  br i1 %1497, label %1498, label %1527

1498:                                             ; preds = %1481
  %1499 = and i32 %1496, 7
  %1500 = icmp eq i32 %1499, 0
  br i1 %1500, label %1509, label %1501

1501:                                             ; preds = %1498, %1501
  %1502 = phi i32 [ %1506, %1501 ], [ %1496, %1498 ]
  %1503 = phi ptr [ %1505, %1501 ], [ %1492, %1498 ]
  %1504 = phi i32 [ %1507, %1501 ], [ 0, %1498 ]
  %1505 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1503, i64 1
  %1506 = add nsw i32 %1502, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1505, i8 -1, i64 16, i1 false)
  %1507 = add i32 %1504, 1
  %1508 = icmp eq i32 %1507, %1499
  br i1 %1508, label %1509, label %1501, !llvm.loop !163

1509:                                             ; preds = %1501, %1498
  %1510 = phi i32 [ %1496, %1498 ], [ %1506, %1501 ]
  %1511 = phi ptr [ %1492, %1498 ], [ %1505, %1501 ]
  %1512 = icmp ult i32 %1496, 8
  br i1 %1512, label %1527, label %1513

1513:                                             ; preds = %1509, %1513
  %1514 = phi i32 [ %1524, %1513 ], [ %1510, %1509 ]
  %1515 = phi ptr [ %1523, %1513 ], [ %1511, %1509 ]
  %1516 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1516, i8 -1, i64 16, i1 false)
  %1517 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1517, i8 -1, i64 16, i1 false)
  %1518 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1518, i8 -1, i64 16, i1 false)
  %1519 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1519, i8 -1, i64 16, i1 false)
  %1520 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1520, i8 -1, i64 16, i1 false)
  %1521 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1521, i8 -1, i64 16, i1 false)
  %1522 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1522, i8 -1, i64 16, i1 false)
  %1523 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1515, i64 8
  %1524 = add nsw i32 %1514, -8
  %1525 = add i32 %1514, -9
  %1526 = icmp ult i32 %1525, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1523, i8 -1, i64 16, i1 false)
  br i1 %1526, label %1513, label %1527, !llvm.loop !96

1527:                                             ; preds = %1509, %1513, %1481
  %1528 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1529 = getelementptr inbounds %struct.regexp_internal, ptr %1486, i64 1
  %1530 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1469, ptr noundef nonnull %1529)
  %1531 = icmp eq i64 %1530, -1
  br i1 %1531, label %1532, label %1539

1532:                                             ; preds = %1527
  %1533 = load ptr, ptr %1466, align 8, !tbaa !93
  %1534 = icmp eq ptr %1533, null
  %1535 = select i1 %1534, ptr %1469, ptr %1533
  %1536 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1537 = icmp sgt i32 %1536, %1528
  br i1 %1537, label %1538, label %1543

1538:                                             ; preds = %1532
  tail call void @Perl_leave_scope(i32 noundef %1528) #12
  br label %1543

1539:                                             ; preds = %1527
  %1540 = getelementptr inbounds %struct.regexp, ptr %1484, i64 0, i32 17
  %1541 = load ptr, ptr %1540, align 8, !tbaa !38
  %1542 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1541, i64 0, i32 1
  store i64 %1530, ptr %1542, align 8, !tbaa !42
  br label %5550

1543:                                             ; preds = %1538, %1532
  %1544 = icmp eq i32 %1468, 0
  %1545 = zext i1 %1544 to i32
  br label %1546

1546:                                             ; preds = %1467, %1543
  %1547 = phi ptr [ %1535, %1543 ], [ %1469, %1467 ]
  %1548 = phi i32 [ %1545, %1543 ], [ %1468, %1467 ]
  %1549 = getelementptr inbounds i8, ptr %1547, i64 1
  store ptr %1549, ptr %6, align 8, !tbaa !13
  %1550 = icmp ult ptr %1549, %3
  br i1 %1550, label %1467, label %1551, !llvm.loop !164

1551:                                             ; preds = %1546, %1441, %1456, %1328
  %1552 = phi i32 [ %1321, %1328 ], [ %1462, %1456 ], [ %1442, %1441 ], [ %1548, %1546 ]
  %1553 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !34
  %1554 = and i32 %1553, 16385
  %1555 = icmp ne i32 %1554, 16385
  %1556 = zext i1 %1555 to i32
  %1557 = icmp eq i32 %1552, %1556
  br i1 %1557, label %1558, label %5552

1558:                                             ; preds = %1551
  %1559 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1560 = load i8, ptr %1559, align 8, !tbaa !47, !range !97, !noundef !98
  %1561 = icmp eq i8 %1560, 0
  br i1 %1561, label %1562, label %5550

1562:                                             ; preds = %1558
  %1563 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %1564 = icmp eq i32 %1563, 0
  br i1 %1564, label %5552, label %5550

1565:                                             ; preds = %5
  %1566 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %1567 = load ptr, ptr %1566, align 8, !tbaa !53
  %1568 = icmp eq ptr %1567, %2
  br i1 %25, label %1569, label %1675

1569:                                             ; preds = %1565
  br i1 %1568, label %1574, label %1570

1570:                                             ; preds = %1569
  %1571 = getelementptr inbounds i8, ptr %2, i64 -1
  %1572 = load i8, ptr %1571, align 1, !tbaa !6
  %1573 = zext i8 %1572 to i64
  br label %1574

1574:                                             ; preds = %1569, %1570
  %1575 = phi i64 [ %1573, %1570 ], [ 10, %1569 ]
  %1576 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1575
  %1577 = load i32, ptr %1576, align 4, !tbaa !34
  %1578 = and i32 %1577, 16385
  %1579 = icmp eq i32 %1578, 16385
  %1580 = zext i1 %1579 to i32
  %1581 = icmp ult ptr %2, %3
  br i1 %1581, label %1582, label %1775

1582:                                             ; preds = %1574
  %1583 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1584 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1585

1585:                                             ; preds = %1582, %1665
  %1586 = phi i32 [ %1580, %1582 ], [ %1667, %1665 ]
  %1587 = phi ptr [ %2, %1582 ], [ %1673, %1665 ]
  %1588 = load i8, ptr %1587, align 1, !tbaa !6
  %1589 = zext i8 %1588 to i64
  %1590 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1589
  %1591 = load i32, ptr %1590, align 4, !tbaa !34
  %1592 = and i32 %1591, 16385
  %1593 = icmp ne i32 %1592, 16385
  %1594 = zext i1 %1593 to i32
  %1595 = icmp eq i32 %1586, %1594
  br i1 %1595, label %1596, label %1665

1596:                                             ; preds = %1585
  %1597 = load i8, ptr %1583, align 8, !tbaa !47, !range !97, !noundef !98
  %1598 = icmp eq i8 %1597, 0
  br i1 %1598, label %1599, label %5550

1599:                                             ; preds = %1596
  %1600 = icmp eq i32 %1586, 0
  %1601 = zext i1 %1600 to i32
  %1602 = load ptr, ptr %4, align 8, !tbaa !46
  %1603 = getelementptr i8, ptr %1602, i64 16
  %1604 = load ptr, ptr %1603, align 8, !tbaa !6
  %1605 = getelementptr inbounds %struct.regexp, ptr %1604, i64 0, i32 14
  %1606 = load ptr, ptr %1605, align 8, !tbaa !17
  store ptr null, ptr %1584, align 8, !tbaa !93
  %1607 = load ptr, ptr %1566, align 8, !tbaa !53
  %1608 = ptrtoint ptr %1587 to i64
  %1609 = ptrtoint ptr %1607 to i64
  %1610 = sub i64 %1608, %1609
  %1611 = getelementptr inbounds %struct.regexp, ptr %1604, i64 0, i32 17
  %1612 = load ptr, ptr %1611, align 8, !tbaa !38
  store i64 %1610, ptr %1612, align 8, !tbaa !39
  %1613 = getelementptr inbounds %struct.regexp, ptr %1604, i64 0, i32 15
  store i32 0, ptr %1613, align 8, !tbaa !37
  %1614 = getelementptr inbounds %struct.regexp, ptr %1604, i64 0, i32 16
  store i32 0, ptr %1614, align 4, !tbaa !36
  %1615 = getelementptr inbounds %struct.regexp, ptr %1604, i64 0, i32 12
  %1616 = load i32, ptr %1615, align 8, !tbaa !92
  %1617 = icmp sgt i32 %1616, 0
  br i1 %1617, label %1618, label %1647

1618:                                             ; preds = %1599
  %1619 = and i32 %1616, 7
  %1620 = icmp eq i32 %1619, 0
  br i1 %1620, label %1629, label %1621

1621:                                             ; preds = %1618, %1621
  %1622 = phi i32 [ %1626, %1621 ], [ %1616, %1618 ]
  %1623 = phi ptr [ %1625, %1621 ], [ %1612, %1618 ]
  %1624 = phi i32 [ %1627, %1621 ], [ 0, %1618 ]
  %1625 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1623, i64 1
  %1626 = add nsw i32 %1622, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1625, i8 -1, i64 16, i1 false)
  %1627 = add i32 %1624, 1
  %1628 = icmp eq i32 %1627, %1619
  br i1 %1628, label %1629, label %1621, !llvm.loop !165

1629:                                             ; preds = %1621, %1618
  %1630 = phi i32 [ %1616, %1618 ], [ %1626, %1621 ]
  %1631 = phi ptr [ %1612, %1618 ], [ %1625, %1621 ]
  %1632 = icmp ult i32 %1616, 8
  br i1 %1632, label %1647, label %1633

1633:                                             ; preds = %1629, %1633
  %1634 = phi i32 [ %1644, %1633 ], [ %1630, %1629 ]
  %1635 = phi ptr [ %1643, %1633 ], [ %1631, %1629 ]
  %1636 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1636, i8 -1, i64 16, i1 false)
  %1637 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1637, i8 -1, i64 16, i1 false)
  %1638 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1638, i8 -1, i64 16, i1 false)
  %1639 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1639, i8 -1, i64 16, i1 false)
  %1640 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1640, i8 -1, i64 16, i1 false)
  %1641 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1641, i8 -1, i64 16, i1 false)
  %1642 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1642, i8 -1, i64 16, i1 false)
  %1643 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1635, i64 8
  %1644 = add nsw i32 %1634, -8
  %1645 = add i32 %1634, -9
  %1646 = icmp ult i32 %1645, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1643, i8 -1, i64 16, i1 false)
  br i1 %1646, label %1633, label %1647, !llvm.loop !96

1647:                                             ; preds = %1629, %1633, %1599
  %1648 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1649 = getelementptr inbounds %struct.regexp_internal, ptr %1606, i64 1
  %1650 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1587, ptr noundef nonnull %1649)
  %1651 = icmp eq i64 %1650, -1
  br i1 %1651, label %1652, label %1661

1652:                                             ; preds = %1647
  %1653 = load ptr, ptr %1584, align 8, !tbaa !93
  %1654 = icmp eq ptr %1653, null
  br i1 %1654, label %1656, label %1655

1655:                                             ; preds = %1652
  store ptr %1653, ptr %6, align 8, !tbaa !13
  br label %1656

1656:                                             ; preds = %1655, %1652
  %1657 = phi ptr [ %1653, %1655 ], [ %1587, %1652 ]
  %1658 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1659 = icmp sgt i32 %1658, %1648
  br i1 %1659, label %1660, label %1665

1660:                                             ; preds = %1656
  tail call void @Perl_leave_scope(i32 noundef %1648) #12
  br label %1665

1661:                                             ; preds = %1647
  %1662 = getelementptr inbounds %struct.regexp, ptr %1604, i64 0, i32 17
  %1663 = load ptr, ptr %1662, align 8, !tbaa !38
  %1664 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1663, i64 0, i32 1
  store i64 %1650, ptr %1664, align 8, !tbaa !42
  br label %5550

1665:                                             ; preds = %1656, %1660, %1585
  %1666 = phi ptr [ %1587, %1585 ], [ %1657, %1660 ], [ %1657, %1656 ]
  %1667 = phi i32 [ %1586, %1585 ], [ %1601, %1660 ], [ %1601, %1656 ]
  %1668 = load i8, ptr %1666, align 1, !tbaa !6
  %1669 = zext i8 %1668 to i64
  %1670 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1669
  %1671 = load i8, ptr %1670, align 1, !tbaa !6
  %1672 = zext i8 %1671 to i64
  %1673 = getelementptr inbounds i8, ptr %1666, i64 %1672
  store ptr %1673, ptr %6, align 8, !tbaa !13
  %1674 = icmp ult ptr %1673, %3
  br i1 %1674, label %1585, label %1775, !llvm.loop !166

1675:                                             ; preds = %1565
  br i1 %1568, label %1680, label %1676

1676:                                             ; preds = %1675
  %1677 = getelementptr inbounds i8, ptr %2, i64 -1
  %1678 = load i8, ptr %1677, align 1, !tbaa !6
  %1679 = zext i8 %1678 to i64
  br label %1680

1680:                                             ; preds = %1675, %1676
  %1681 = phi i64 [ %1679, %1676 ], [ 10, %1675 ]
  %1682 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1681
  %1683 = load i32, ptr %1682, align 4, !tbaa !34
  %1684 = and i32 %1683, 16385
  %1685 = icmp eq i32 %1684, 16385
  %1686 = zext i1 %1685 to i32
  %1687 = icmp ult ptr %2, %3
  br i1 %1687, label %1688, label %1775

1688:                                             ; preds = %1680
  %1689 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1690 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1691

1691:                                             ; preds = %1688, %1770
  %1692 = phi i32 [ %1686, %1688 ], [ %1772, %1770 ]
  %1693 = phi ptr [ %2, %1688 ], [ %1773, %1770 ]
  %1694 = load i8, ptr %1693, align 1, !tbaa !6
  %1695 = zext i8 %1694 to i64
  %1696 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1695
  %1697 = load i32, ptr %1696, align 4, !tbaa !34
  %1698 = and i32 %1697, 16385
  %1699 = icmp ne i32 %1698, 16385
  %1700 = zext i1 %1699 to i32
  %1701 = icmp eq i32 %1692, %1700
  br i1 %1701, label %1702, label %1770

1702:                                             ; preds = %1691
  %1703 = load i8, ptr %1689, align 8, !tbaa !47, !range !97, !noundef !98
  %1704 = icmp eq i8 %1703, 0
  br i1 %1704, label %1705, label %5550

1705:                                             ; preds = %1702
  %1706 = load ptr, ptr %4, align 8, !tbaa !46
  %1707 = getelementptr i8, ptr %1706, i64 16
  %1708 = load ptr, ptr %1707, align 8, !tbaa !6
  %1709 = getelementptr inbounds %struct.regexp, ptr %1708, i64 0, i32 14
  %1710 = load ptr, ptr %1709, align 8, !tbaa !17
  store ptr null, ptr %1690, align 8, !tbaa !93
  %1711 = load ptr, ptr %1566, align 8, !tbaa !53
  %1712 = ptrtoint ptr %1693 to i64
  %1713 = ptrtoint ptr %1711 to i64
  %1714 = sub i64 %1712, %1713
  %1715 = getelementptr inbounds %struct.regexp, ptr %1708, i64 0, i32 17
  %1716 = load ptr, ptr %1715, align 8, !tbaa !38
  store i64 %1714, ptr %1716, align 8, !tbaa !39
  %1717 = getelementptr inbounds %struct.regexp, ptr %1708, i64 0, i32 15
  store i32 0, ptr %1717, align 8, !tbaa !37
  %1718 = getelementptr inbounds %struct.regexp, ptr %1708, i64 0, i32 16
  store i32 0, ptr %1718, align 4, !tbaa !36
  %1719 = getelementptr inbounds %struct.regexp, ptr %1708, i64 0, i32 12
  %1720 = load i32, ptr %1719, align 8, !tbaa !92
  %1721 = icmp sgt i32 %1720, 0
  br i1 %1721, label %1722, label %1751

1722:                                             ; preds = %1705
  %1723 = and i32 %1720, 7
  %1724 = icmp eq i32 %1723, 0
  br i1 %1724, label %1733, label %1725

1725:                                             ; preds = %1722, %1725
  %1726 = phi i32 [ %1730, %1725 ], [ %1720, %1722 ]
  %1727 = phi ptr [ %1729, %1725 ], [ %1716, %1722 ]
  %1728 = phi i32 [ %1731, %1725 ], [ 0, %1722 ]
  %1729 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1727, i64 1
  %1730 = add nsw i32 %1726, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1729, i8 -1, i64 16, i1 false)
  %1731 = add i32 %1728, 1
  %1732 = icmp eq i32 %1731, %1723
  br i1 %1732, label %1733, label %1725, !llvm.loop !167

1733:                                             ; preds = %1725, %1722
  %1734 = phi i32 [ %1720, %1722 ], [ %1730, %1725 ]
  %1735 = phi ptr [ %1716, %1722 ], [ %1729, %1725 ]
  %1736 = icmp ult i32 %1720, 8
  br i1 %1736, label %1751, label %1737

1737:                                             ; preds = %1733, %1737
  %1738 = phi i32 [ %1748, %1737 ], [ %1734, %1733 ]
  %1739 = phi ptr [ %1747, %1737 ], [ %1735, %1733 ]
  %1740 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1740, i8 -1, i64 16, i1 false)
  %1741 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1741, i8 -1, i64 16, i1 false)
  %1742 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1742, i8 -1, i64 16, i1 false)
  %1743 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1743, i8 -1, i64 16, i1 false)
  %1744 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1744, i8 -1, i64 16, i1 false)
  %1745 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1745, i8 -1, i64 16, i1 false)
  %1746 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1746, i8 -1, i64 16, i1 false)
  %1747 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1739, i64 8
  %1748 = add nsw i32 %1738, -8
  %1749 = add i32 %1738, -9
  %1750 = icmp ult i32 %1749, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1747, i8 -1, i64 16, i1 false)
  br i1 %1750, label %1737, label %1751, !llvm.loop !96

1751:                                             ; preds = %1733, %1737, %1705
  %1752 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1753 = getelementptr inbounds %struct.regexp_internal, ptr %1710, i64 1
  %1754 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1693, ptr noundef nonnull %1753)
  %1755 = icmp eq i64 %1754, -1
  br i1 %1755, label %1756, label %1763

1756:                                             ; preds = %1751
  %1757 = load ptr, ptr %1690, align 8, !tbaa !93
  %1758 = icmp eq ptr %1757, null
  %1759 = select i1 %1758, ptr %1693, ptr %1757
  %1760 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1761 = icmp sgt i32 %1760, %1752
  br i1 %1761, label %1762, label %1767

1762:                                             ; preds = %1756
  tail call void @Perl_leave_scope(i32 noundef %1752) #12
  br label %1767

1763:                                             ; preds = %1751
  %1764 = getelementptr inbounds %struct.regexp, ptr %1708, i64 0, i32 17
  %1765 = load ptr, ptr %1764, align 8, !tbaa !38
  %1766 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1765, i64 0, i32 1
  store i64 %1754, ptr %1766, align 8, !tbaa !42
  br label %5550

1767:                                             ; preds = %1762, %1756
  %1768 = icmp eq i32 %1692, 0
  %1769 = zext i1 %1768 to i32
  br label %1770

1770:                                             ; preds = %1691, %1767
  %1771 = phi ptr [ %1759, %1767 ], [ %1693, %1691 ]
  %1772 = phi i32 [ %1769, %1767 ], [ %1692, %1691 ]
  %1773 = getelementptr inbounds i8, ptr %1771, i64 1
  store ptr %1773, ptr %6, align 8, !tbaa !13
  %1774 = icmp ult ptr %1773, %3
  br i1 %1774, label %1691, label %1775, !llvm.loop !168

1775:                                             ; preds = %1770, %1665, %1680, %1574
  %1776 = phi i32 [ %1580, %1574 ], [ %1686, %1680 ], [ %1667, %1665 ], [ %1772, %1770 ]
  %1777 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !34
  %1778 = and i32 %1777, 16385
  %1779 = icmp ne i32 %1778, 16385
  %1780 = zext i1 %1779 to i32
  %1781 = icmp eq i32 %1776, %1780
  br i1 %1781, label %1782, label %5552

1782:                                             ; preds = %1775
  %1783 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1784 = load i8, ptr %1783, align 8, !tbaa !47, !range !97, !noundef !98
  %1785 = icmp eq i8 %1784, 0
  br i1 %1785, label %1786, label %5550

1786:                                             ; preds = %1782
  %1787 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %1788 = icmp eq i32 %1787, 0
  br i1 %1788, label %5552, label %5550

1789:                                             ; preds = %5
  %1790 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %1791 = load ptr, ptr %1790, align 8, !tbaa !53
  %1792 = icmp eq ptr %1791, %2
  br i1 %25, label %1793, label %1951

1793:                                             ; preds = %1789
  br i1 %1792, label %1809, label %1794

1794:                                             ; preds = %1793
  %1795 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %1791)
  %1796 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %1797 = load ptr, ptr %1796, align 8, !tbaa !56
  %1798 = ptrtoint ptr %1797 to i64
  %1799 = ptrtoint ptr %1795 to i64
  %1800 = sub i64 %1798, %1799
  %1801 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %1802 = xor i1 %1801, true
  %1803 = zext i1 %1802 to i32
  %1804 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %1795, i64 noundef %1800, ptr noundef null, i32 noundef %1803) #12
  %1805 = trunc i64 %1804 to i32
  %1806 = icmp slt i32 %1805, 256
  br i1 %1806, label %1807, label %1815

1807:                                             ; preds = %1794
  %1808 = icmp ult i32 %1805, 256
  br i1 %1808, label %1809, label %1819

1809:                                             ; preds = %1793, %1807
  %1810 = phi i64 [ %1804, %1807 ], [ 10, %1793 ]
  %1811 = and i64 %1810, 4294967295
  %1812 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1811
  %1813 = load i32, ptr %1812, align 4, !tbaa !34
  %1814 = and i32 %1813, 1
  br label %1819

1815:                                             ; preds = %1794
  %1816 = and i64 %1804, 4294967295
  %1817 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %1816) #12
  %1818 = zext i1 %1817 to i32
  br label %1819

1819:                                             ; preds = %1807, %1809, %1815
  %1820 = phi i32 [ %1818, %1815 ], [ 0, %1807 ], [ %1814, %1809 ]
  %1821 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  %1822 = icmp eq ptr %1821, null
  br i1 %1822, label %1823, label %1827

1823:                                             ; preds = %1819
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11) #12
  store i8 4, ptr %11, align 1, !tbaa !6
  %1824 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !13
  %1825 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1824, ptr noundef nonnull %11) #12
  store ptr %1825, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11) #12
  %1826 = load ptr, ptr %6, align 8, !tbaa !13
  br label %1827

1827:                                             ; preds = %1819, %1823
  %1828 = phi ptr [ %2, %1819 ], [ %1826, %1823 ]
  %1829 = icmp ult ptr %1828, %3
  br i1 %1829, label %1830, label %2051

1830:                                             ; preds = %1827
  %1831 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1832 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1833

1833:                                             ; preds = %1830, %1941
  %1834 = phi ptr [ %1828, %1830 ], [ %1949, %1941 ]
  %1835 = phi i32 [ %1820, %1830 ], [ %1942, %1941 ]
  %1836 = load i8, ptr %1834, align 1, !tbaa !6
  %1837 = icmp sgt i8 %1836, -1
  br i1 %1837, label %1838, label %1843

1838:                                             ; preds = %1833
  %1839 = zext i8 %1836 to i64
  %1840 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1839
  %1841 = load i32, ptr %1840, align 4, !tbaa !34
  %1842 = and i32 %1841, 1
  br label %1867

1843:                                             ; preds = %1833
  %1844 = zext i8 %1836 to i32
  %1845 = and i32 %1844, 254
  %1846 = icmp eq i32 %1845, 194
  br i1 %1846, label %1847, label %1864

1847:                                             ; preds = %1843
  %1848 = and i32 %1844, 28
  %1849 = icmp eq i32 %1848, 0
  br i1 %1849, label %1850, label %1861

1850:                                             ; preds = %1847
  %1851 = shl i8 %1836, 6
  %1852 = getelementptr inbounds i8, ptr %1834, i64 1
  %1853 = load i8, ptr %1852, align 1, !tbaa !6
  %1854 = and i8 %1853, 63
  %1855 = or i8 %1854, %1851
  %1856 = zext i8 %1855 to i64
  %1857 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1856
  %1858 = load i32, ptr %1857, align 4, !tbaa !34
  %1859 = and i32 %1858, 1
  %1860 = icmp ne i32 %1859, 0
  br label %1861

1861:                                             ; preds = %1850, %1847
  %1862 = phi i1 [ false, %1847 ], [ %1860, %1850 ]
  %1863 = zext i1 %1862 to i32
  br label %1867

1864:                                             ; preds = %1843
  %1865 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1834) #12
  %1866 = zext i1 %1865 to i32
  br label %1867

1867:                                             ; preds = %1861, %1864, %1838
  %1868 = phi i32 [ %1842, %1838 ], [ %1863, %1861 ], [ %1866, %1864 ]
  %1869 = xor i32 %1868, 1
  %1870 = icmp eq i32 %1835, %1869
  br i1 %1870, label %1871, label %1874

1871:                                             ; preds = %1867
  %1872 = icmp eq i32 %1835, 0
  %1873 = zext i1 %1872 to i32
  br label %1941

1874:                                             ; preds = %1867
  %1875 = load i8, ptr %1831, align 8, !tbaa !47, !range !97, !noundef !98
  %1876 = icmp eq i8 %1875, 0
  br i1 %1876, label %1877, label %5550

1877:                                             ; preds = %1874
  %1878 = load ptr, ptr %4, align 8, !tbaa !46
  %1879 = getelementptr i8, ptr %1878, i64 16
  %1880 = load ptr, ptr %1879, align 8, !tbaa !6
  %1881 = getelementptr inbounds %struct.regexp, ptr %1880, i64 0, i32 14
  %1882 = load ptr, ptr %1881, align 8, !tbaa !17
  store ptr null, ptr %1832, align 8, !tbaa !93
  %1883 = load ptr, ptr %6, align 8, !tbaa !13
  %1884 = load ptr, ptr %1790, align 8, !tbaa !53
  %1885 = ptrtoint ptr %1883 to i64
  %1886 = ptrtoint ptr %1884 to i64
  %1887 = sub i64 %1885, %1886
  %1888 = getelementptr inbounds %struct.regexp, ptr %1880, i64 0, i32 17
  %1889 = load ptr, ptr %1888, align 8, !tbaa !38
  store i64 %1887, ptr %1889, align 8, !tbaa !39
  %1890 = getelementptr inbounds %struct.regexp, ptr %1880, i64 0, i32 15
  store i32 0, ptr %1890, align 8, !tbaa !37
  %1891 = getelementptr inbounds %struct.regexp, ptr %1880, i64 0, i32 16
  store i32 0, ptr %1891, align 4, !tbaa !36
  %1892 = getelementptr inbounds %struct.regexp, ptr %1880, i64 0, i32 12
  %1893 = load i32, ptr %1892, align 8, !tbaa !92
  %1894 = icmp sgt i32 %1893, 0
  br i1 %1894, label %1895, label %1924

1895:                                             ; preds = %1877
  %1896 = and i32 %1893, 7
  %1897 = icmp eq i32 %1896, 0
  br i1 %1897, label %1906, label %1898

1898:                                             ; preds = %1895, %1898
  %1899 = phi i32 [ %1903, %1898 ], [ %1893, %1895 ]
  %1900 = phi ptr [ %1902, %1898 ], [ %1889, %1895 ]
  %1901 = phi i32 [ %1904, %1898 ], [ 0, %1895 ]
  %1902 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1900, i64 1
  %1903 = add nsw i32 %1899, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1902, i8 -1, i64 16, i1 false)
  %1904 = add i32 %1901, 1
  %1905 = icmp eq i32 %1904, %1896
  br i1 %1905, label %1906, label %1898, !llvm.loop !169

1906:                                             ; preds = %1898, %1895
  %1907 = phi i32 [ %1893, %1895 ], [ %1903, %1898 ]
  %1908 = phi ptr [ %1889, %1895 ], [ %1902, %1898 ]
  %1909 = icmp ult i32 %1893, 8
  br i1 %1909, label %1924, label %1910

1910:                                             ; preds = %1906, %1910
  %1911 = phi i32 [ %1921, %1910 ], [ %1907, %1906 ]
  %1912 = phi ptr [ %1920, %1910 ], [ %1908, %1906 ]
  %1913 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1913, i8 -1, i64 16, i1 false)
  %1914 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1914, i8 -1, i64 16, i1 false)
  %1915 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1915, i8 -1, i64 16, i1 false)
  %1916 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1916, i8 -1, i64 16, i1 false)
  %1917 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1917, i8 -1, i64 16, i1 false)
  %1918 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1918, i8 -1, i64 16, i1 false)
  %1919 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1919, i8 -1, i64 16, i1 false)
  %1920 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1912, i64 8
  %1921 = add nsw i32 %1911, -8
  %1922 = add i32 %1911, -9
  %1923 = icmp ult i32 %1922, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1920, i8 -1, i64 16, i1 false)
  br i1 %1923, label %1910, label %1924, !llvm.loop !96

1924:                                             ; preds = %1906, %1910, %1877
  %1925 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1926 = getelementptr inbounds %struct.regexp_internal, ptr %1882, i64 1
  %1927 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %1883, ptr noundef nonnull %1926)
  %1928 = icmp eq i64 %1927, -1
  br i1 %1928, label %1929, label %1937

1929:                                             ; preds = %1924
  %1930 = load ptr, ptr %1832, align 8, !tbaa !93
  %1931 = icmp eq ptr %1930, null
  br i1 %1931, label %1933, label %1932

1932:                                             ; preds = %1929
  store ptr %1930, ptr %6, align 8, !tbaa !13
  br label %1933

1933:                                             ; preds = %1932, %1929
  %1934 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %1935 = icmp sgt i32 %1934, %1925
  br i1 %1935, label %1936, label %1941

1936:                                             ; preds = %1933
  call void @Perl_leave_scope(i32 noundef %1925) #12
  br label %1941

1937:                                             ; preds = %1924
  %1938 = getelementptr inbounds %struct.regexp, ptr %1880, i64 0, i32 17
  %1939 = load ptr, ptr %1938, align 8, !tbaa !38
  %1940 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1939, i64 0, i32 1
  store i64 %1927, ptr %1940, align 8, !tbaa !42
  br label %5550

1941:                                             ; preds = %1933, %1936, %1871
  %1942 = phi i32 [ %1873, %1871 ], [ %1835, %1936 ], [ %1835, %1933 ]
  %1943 = load ptr, ptr %6, align 8, !tbaa !13
  %1944 = load i8, ptr %1943, align 1, !tbaa !6
  %1945 = zext i8 %1944 to i64
  %1946 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1945
  %1947 = load i8, ptr %1946, align 1, !tbaa !6
  %1948 = zext i8 %1947 to i64
  %1949 = getelementptr inbounds i8, ptr %1943, i64 %1948
  store ptr %1949, ptr %6, align 8, !tbaa !13
  %1950 = icmp ult ptr %1949, %3
  br i1 %1950, label %1833, label %2051, !llvm.loop !170

1951:                                             ; preds = %1789
  br i1 %1792, label %1956, label %1952

1952:                                             ; preds = %1951
  %1953 = getelementptr inbounds i8, ptr %2, i64 -1
  %1954 = load i8, ptr %1953, align 1, !tbaa !6
  %1955 = zext i8 %1954 to i64
  br label %1956

1956:                                             ; preds = %1951, %1952
  %1957 = phi i64 [ %1955, %1952 ], [ 10, %1951 ]
  %1958 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1957
  %1959 = load i32, ptr %1958, align 4, !tbaa !34
  %1960 = and i32 %1959, 16385
  %1961 = icmp eq i32 %1960, 16385
  %1962 = zext i1 %1961 to i32
  %1963 = icmp ult ptr %2, %3
  br i1 %1963, label %1964, label %2051

1964:                                             ; preds = %1956
  %1965 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1966 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1967

1967:                                             ; preds = %1964, %2046
  %1968 = phi i32 [ %1962, %1964 ], [ %2048, %2046 ]
  %1969 = phi ptr [ %2, %1964 ], [ %2049, %2046 ]
  %1970 = load i8, ptr %1969, align 1, !tbaa !6
  %1971 = zext i8 %1970 to i64
  %1972 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1971
  %1973 = load i32, ptr %1972, align 4, !tbaa !34
  %1974 = and i32 %1973, 16385
  %1975 = icmp ne i32 %1974, 16385
  %1976 = zext i1 %1975 to i32
  %1977 = icmp eq i32 %1968, %1976
  br i1 %1977, label %1978, label %1981

1978:                                             ; preds = %1967
  %1979 = icmp eq i32 %1968, 0
  %1980 = zext i1 %1979 to i32
  br label %2046

1981:                                             ; preds = %1967
  %1982 = load i8, ptr %1965, align 8, !tbaa !47, !range !97, !noundef !98
  %1983 = icmp eq i8 %1982, 0
  br i1 %1983, label %1984, label %5550

1984:                                             ; preds = %1981
  %1985 = load ptr, ptr %4, align 8, !tbaa !46
  %1986 = getelementptr i8, ptr %1985, i64 16
  %1987 = load ptr, ptr %1986, align 8, !tbaa !6
  %1988 = getelementptr inbounds %struct.regexp, ptr %1987, i64 0, i32 14
  %1989 = load ptr, ptr %1988, align 8, !tbaa !17
  store ptr null, ptr %1966, align 8, !tbaa !93
  %1990 = load ptr, ptr %1790, align 8, !tbaa !53
  %1991 = ptrtoint ptr %1969 to i64
  %1992 = ptrtoint ptr %1990 to i64
  %1993 = sub i64 %1991, %1992
  %1994 = getelementptr inbounds %struct.regexp, ptr %1987, i64 0, i32 17
  %1995 = load ptr, ptr %1994, align 8, !tbaa !38
  store i64 %1993, ptr %1995, align 8, !tbaa !39
  %1996 = getelementptr inbounds %struct.regexp, ptr %1987, i64 0, i32 15
  store i32 0, ptr %1996, align 8, !tbaa !37
  %1997 = getelementptr inbounds %struct.regexp, ptr %1987, i64 0, i32 16
  store i32 0, ptr %1997, align 4, !tbaa !36
  %1998 = getelementptr inbounds %struct.regexp, ptr %1987, i64 0, i32 12
  %1999 = load i32, ptr %1998, align 8, !tbaa !92
  %2000 = icmp sgt i32 %1999, 0
  br i1 %2000, label %2001, label %2030

2001:                                             ; preds = %1984
  %2002 = and i32 %1999, 7
  %2003 = icmp eq i32 %2002, 0
  br i1 %2003, label %2012, label %2004

2004:                                             ; preds = %2001, %2004
  %2005 = phi i32 [ %2009, %2004 ], [ %1999, %2001 ]
  %2006 = phi ptr [ %2008, %2004 ], [ %1995, %2001 ]
  %2007 = phi i32 [ %2010, %2004 ], [ 0, %2001 ]
  %2008 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2006, i64 1
  %2009 = add nsw i32 %2005, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2008, i8 -1, i64 16, i1 false)
  %2010 = add i32 %2007, 1
  %2011 = icmp eq i32 %2010, %2002
  br i1 %2011, label %2012, label %2004, !llvm.loop !171

2012:                                             ; preds = %2004, %2001
  %2013 = phi i32 [ %1999, %2001 ], [ %2009, %2004 ]
  %2014 = phi ptr [ %1995, %2001 ], [ %2008, %2004 ]
  %2015 = icmp ult i32 %1999, 8
  br i1 %2015, label %2030, label %2016

2016:                                             ; preds = %2012, %2016
  %2017 = phi i32 [ %2027, %2016 ], [ %2013, %2012 ]
  %2018 = phi ptr [ %2026, %2016 ], [ %2014, %2012 ]
  %2019 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2019, i8 -1, i64 16, i1 false)
  %2020 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2020, i8 -1, i64 16, i1 false)
  %2021 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2021, i8 -1, i64 16, i1 false)
  %2022 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2022, i8 -1, i64 16, i1 false)
  %2023 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2023, i8 -1, i64 16, i1 false)
  %2024 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2024, i8 -1, i64 16, i1 false)
  %2025 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2025, i8 -1, i64 16, i1 false)
  %2026 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2018, i64 8
  %2027 = add nsw i32 %2017, -8
  %2028 = add i32 %2017, -9
  %2029 = icmp ult i32 %2028, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2026, i8 -1, i64 16, i1 false)
  br i1 %2029, label %2016, label %2030, !llvm.loop !96

2030:                                             ; preds = %2012, %2016, %1984
  %2031 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2032 = getelementptr inbounds %struct.regexp_internal, ptr %1989, i64 1
  %2033 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1969, ptr noundef nonnull %2032)
  %2034 = icmp eq i64 %2033, -1
  br i1 %2034, label %2035, label %2042

2035:                                             ; preds = %2030
  %2036 = load ptr, ptr %1966, align 8, !tbaa !93
  %2037 = icmp eq ptr %2036, null
  %2038 = select i1 %2037, ptr %1969, ptr %2036
  %2039 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2040 = icmp sgt i32 %2039, %2031
  br i1 %2040, label %2041, label %2046

2041:                                             ; preds = %2035
  tail call void @Perl_leave_scope(i32 noundef %2031) #12
  br label %2046

2042:                                             ; preds = %2030
  %2043 = getelementptr inbounds %struct.regexp, ptr %1987, i64 0, i32 17
  %2044 = load ptr, ptr %2043, align 8, !tbaa !38
  %2045 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2044, i64 0, i32 1
  store i64 %2033, ptr %2045, align 8, !tbaa !42
  br label %5550

2046:                                             ; preds = %2035, %2041, %1978
  %2047 = phi ptr [ %1969, %1978 ], [ %2038, %2041 ], [ %2038, %2035 ]
  %2048 = phi i32 [ %1980, %1978 ], [ %1968, %2041 ], [ %1968, %2035 ]
  %2049 = getelementptr inbounds i8, ptr %2047, i64 1
  store ptr %2049, ptr %6, align 8, !tbaa !13
  %2050 = icmp ult ptr %2049, %3
  br i1 %2050, label %1967, label %2051, !llvm.loop !172

2051:                                             ; preds = %2046, %1941, %1956, %1827
  %2052 = phi i32 [ %1820, %1827 ], [ %1962, %1956 ], [ %1942, %1941 ], [ %2048, %2046 ]
  %2053 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !34
  %2054 = and i32 %2053, 16385
  %2055 = icmp ne i32 %2054, 16385
  %2056 = zext i1 %2055 to i32
  %2057 = icmp eq i32 %2052, %2056
  br i1 %2057, label %5552, label %2058

2058:                                             ; preds = %2051
  %2059 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2060 = load i8, ptr %2059, align 8, !tbaa !47, !range !97, !noundef !98
  %2061 = icmp eq i8 %2060, 0
  br i1 %2061, label %2062, label %5550

2062:                                             ; preds = %2058
  %2063 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %2064 = icmp eq i32 %2063, 0
  br i1 %2064, label %5552, label %5550

2065:                                             ; preds = %5
  %2066 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2067 = load ptr, ptr %2066, align 8, !tbaa !53
  %2068 = icmp eq ptr %2067, %2
  br i1 %25, label %2069, label %2176

2069:                                             ; preds = %2065
  br i1 %2068, label %2074, label %2070

2070:                                             ; preds = %2069
  %2071 = getelementptr inbounds i8, ptr %2, i64 -1
  %2072 = load i8, ptr %2071, align 1, !tbaa !6
  %2073 = zext i8 %2072 to i64
  br label %2074

2074:                                             ; preds = %2069, %2070
  %2075 = phi i64 [ %2073, %2070 ], [ 10, %2069 ]
  %2076 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2075
  %2077 = load i32, ptr %2076, align 4, !tbaa !34
  %2078 = and i32 %2077, 16385
  %2079 = icmp eq i32 %2078, 16385
  %2080 = zext i1 %2079 to i32
  %2081 = icmp ult ptr %2, %3
  br i1 %2081, label %2082, label %2276

2082:                                             ; preds = %2074
  %2083 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2084 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2085

2085:                                             ; preds = %2082, %2166
  %2086 = phi i32 [ %2080, %2082 ], [ %2168, %2166 ]
  %2087 = phi ptr [ %2, %2082 ], [ %2174, %2166 ]
  %2088 = load i8, ptr %2087, align 1, !tbaa !6
  %2089 = zext i8 %2088 to i64
  %2090 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2089
  %2091 = load i32, ptr %2090, align 4, !tbaa !34
  %2092 = and i32 %2091, 16385
  %2093 = icmp ne i32 %2092, 16385
  %2094 = zext i1 %2093 to i32
  %2095 = icmp eq i32 %2086, %2094
  br i1 %2095, label %2096, label %2099

2096:                                             ; preds = %2085
  %2097 = icmp eq i32 %2086, 0
  %2098 = zext i1 %2097 to i32
  br label %2166

2099:                                             ; preds = %2085
  %2100 = load i8, ptr %2083, align 8, !tbaa !47, !range !97, !noundef !98
  %2101 = icmp eq i8 %2100, 0
  br i1 %2101, label %2102, label %5550

2102:                                             ; preds = %2099
  %2103 = load ptr, ptr %4, align 8, !tbaa !46
  %2104 = getelementptr i8, ptr %2103, i64 16
  %2105 = load ptr, ptr %2104, align 8, !tbaa !6
  %2106 = getelementptr inbounds %struct.regexp, ptr %2105, i64 0, i32 14
  %2107 = load ptr, ptr %2106, align 8, !tbaa !17
  store ptr null, ptr %2084, align 8, !tbaa !93
  %2108 = load ptr, ptr %2066, align 8, !tbaa !53
  %2109 = ptrtoint ptr %2087 to i64
  %2110 = ptrtoint ptr %2108 to i64
  %2111 = sub i64 %2109, %2110
  %2112 = getelementptr inbounds %struct.regexp, ptr %2105, i64 0, i32 17
  %2113 = load ptr, ptr %2112, align 8, !tbaa !38
  store i64 %2111, ptr %2113, align 8, !tbaa !39
  %2114 = getelementptr inbounds %struct.regexp, ptr %2105, i64 0, i32 15
  store i32 0, ptr %2114, align 8, !tbaa !37
  %2115 = getelementptr inbounds %struct.regexp, ptr %2105, i64 0, i32 16
  store i32 0, ptr %2115, align 4, !tbaa !36
  %2116 = getelementptr inbounds %struct.regexp, ptr %2105, i64 0, i32 12
  %2117 = load i32, ptr %2116, align 8, !tbaa !92
  %2118 = icmp sgt i32 %2117, 0
  br i1 %2118, label %2119, label %2148

2119:                                             ; preds = %2102
  %2120 = and i32 %2117, 7
  %2121 = icmp eq i32 %2120, 0
  br i1 %2121, label %2130, label %2122

2122:                                             ; preds = %2119, %2122
  %2123 = phi i32 [ %2127, %2122 ], [ %2117, %2119 ]
  %2124 = phi ptr [ %2126, %2122 ], [ %2113, %2119 ]
  %2125 = phi i32 [ %2128, %2122 ], [ 0, %2119 ]
  %2126 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2124, i64 1
  %2127 = add nsw i32 %2123, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2126, i8 -1, i64 16, i1 false)
  %2128 = add i32 %2125, 1
  %2129 = icmp eq i32 %2128, %2120
  br i1 %2129, label %2130, label %2122, !llvm.loop !173

2130:                                             ; preds = %2122, %2119
  %2131 = phi i32 [ %2117, %2119 ], [ %2127, %2122 ]
  %2132 = phi ptr [ %2113, %2119 ], [ %2126, %2122 ]
  %2133 = icmp ult i32 %2117, 8
  br i1 %2133, label %2148, label %2134

2134:                                             ; preds = %2130, %2134
  %2135 = phi i32 [ %2145, %2134 ], [ %2131, %2130 ]
  %2136 = phi ptr [ %2144, %2134 ], [ %2132, %2130 ]
  %2137 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2137, i8 -1, i64 16, i1 false)
  %2138 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2138, i8 -1, i64 16, i1 false)
  %2139 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2139, i8 -1, i64 16, i1 false)
  %2140 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2140, i8 -1, i64 16, i1 false)
  %2141 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2141, i8 -1, i64 16, i1 false)
  %2142 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2142, i8 -1, i64 16, i1 false)
  %2143 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2143, i8 -1, i64 16, i1 false)
  %2144 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2136, i64 8
  %2145 = add nsw i32 %2135, -8
  %2146 = add i32 %2135, -9
  %2147 = icmp ult i32 %2146, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2144, i8 -1, i64 16, i1 false)
  br i1 %2147, label %2134, label %2148, !llvm.loop !96

2148:                                             ; preds = %2130, %2134, %2102
  %2149 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2150 = getelementptr inbounds %struct.regexp_internal, ptr %2107, i64 1
  %2151 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2087, ptr noundef nonnull %2150)
  %2152 = icmp eq i64 %2151, -1
  br i1 %2152, label %2153, label %2162

2153:                                             ; preds = %2148
  %2154 = load ptr, ptr %2084, align 8, !tbaa !93
  %2155 = icmp eq ptr %2154, null
  br i1 %2155, label %2157, label %2156

2156:                                             ; preds = %2153
  store ptr %2154, ptr %6, align 8, !tbaa !13
  br label %2157

2157:                                             ; preds = %2156, %2153
  %2158 = phi ptr [ %2154, %2156 ], [ %2087, %2153 ]
  %2159 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2160 = icmp sgt i32 %2159, %2149
  br i1 %2160, label %2161, label %2166

2161:                                             ; preds = %2157
  tail call void @Perl_leave_scope(i32 noundef %2149) #12
  br label %2166

2162:                                             ; preds = %2148
  %2163 = getelementptr inbounds %struct.regexp, ptr %2105, i64 0, i32 17
  %2164 = load ptr, ptr %2163, align 8, !tbaa !38
  %2165 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2164, i64 0, i32 1
  store i64 %2151, ptr %2165, align 8, !tbaa !42
  br label %5550

2166:                                             ; preds = %2157, %2161, %2096
  %2167 = phi ptr [ %2087, %2096 ], [ %2158, %2161 ], [ %2158, %2157 ]
  %2168 = phi i32 [ %2098, %2096 ], [ %2086, %2161 ], [ %2086, %2157 ]
  %2169 = load i8, ptr %2167, align 1, !tbaa !6
  %2170 = zext i8 %2169 to i64
  %2171 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2170
  %2172 = load i8, ptr %2171, align 1, !tbaa !6
  %2173 = zext i8 %2172 to i64
  %2174 = getelementptr inbounds i8, ptr %2167, i64 %2173
  store ptr %2174, ptr %6, align 8, !tbaa !13
  %2175 = icmp ult ptr %2174, %3
  br i1 %2175, label %2085, label %2276, !llvm.loop !174

2176:                                             ; preds = %2065
  br i1 %2068, label %2181, label %2177

2177:                                             ; preds = %2176
  %2178 = getelementptr inbounds i8, ptr %2, i64 -1
  %2179 = load i8, ptr %2178, align 1, !tbaa !6
  %2180 = zext i8 %2179 to i64
  br label %2181

2181:                                             ; preds = %2176, %2177
  %2182 = phi i64 [ %2180, %2177 ], [ 10, %2176 ]
  %2183 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2182
  %2184 = load i32, ptr %2183, align 4, !tbaa !34
  %2185 = and i32 %2184, 16385
  %2186 = icmp eq i32 %2185, 16385
  %2187 = zext i1 %2186 to i32
  %2188 = icmp ult ptr %2, %3
  br i1 %2188, label %2189, label %2276

2189:                                             ; preds = %2181
  %2190 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2191 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2192

2192:                                             ; preds = %2189, %2271
  %2193 = phi i32 [ %2187, %2189 ], [ %2273, %2271 ]
  %2194 = phi ptr [ %2, %2189 ], [ %2274, %2271 ]
  %2195 = load i8, ptr %2194, align 1, !tbaa !6
  %2196 = zext i8 %2195 to i64
  %2197 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2196
  %2198 = load i32, ptr %2197, align 4, !tbaa !34
  %2199 = and i32 %2198, 16385
  %2200 = icmp ne i32 %2199, 16385
  %2201 = zext i1 %2200 to i32
  %2202 = icmp eq i32 %2193, %2201
  br i1 %2202, label %2203, label %2206

2203:                                             ; preds = %2192
  %2204 = icmp eq i32 %2193, 0
  %2205 = zext i1 %2204 to i32
  br label %2271

2206:                                             ; preds = %2192
  %2207 = load i8, ptr %2190, align 8, !tbaa !47, !range !97, !noundef !98
  %2208 = icmp eq i8 %2207, 0
  br i1 %2208, label %2209, label %5550

2209:                                             ; preds = %2206
  %2210 = load ptr, ptr %4, align 8, !tbaa !46
  %2211 = getelementptr i8, ptr %2210, i64 16
  %2212 = load ptr, ptr %2211, align 8, !tbaa !6
  %2213 = getelementptr inbounds %struct.regexp, ptr %2212, i64 0, i32 14
  %2214 = load ptr, ptr %2213, align 8, !tbaa !17
  store ptr null, ptr %2191, align 8, !tbaa !93
  %2215 = load ptr, ptr %2066, align 8, !tbaa !53
  %2216 = ptrtoint ptr %2194 to i64
  %2217 = ptrtoint ptr %2215 to i64
  %2218 = sub i64 %2216, %2217
  %2219 = getelementptr inbounds %struct.regexp, ptr %2212, i64 0, i32 17
  %2220 = load ptr, ptr %2219, align 8, !tbaa !38
  store i64 %2218, ptr %2220, align 8, !tbaa !39
  %2221 = getelementptr inbounds %struct.regexp, ptr %2212, i64 0, i32 15
  store i32 0, ptr %2221, align 8, !tbaa !37
  %2222 = getelementptr inbounds %struct.regexp, ptr %2212, i64 0, i32 16
  store i32 0, ptr %2222, align 4, !tbaa !36
  %2223 = getelementptr inbounds %struct.regexp, ptr %2212, i64 0, i32 12
  %2224 = load i32, ptr %2223, align 8, !tbaa !92
  %2225 = icmp sgt i32 %2224, 0
  br i1 %2225, label %2226, label %2255

2226:                                             ; preds = %2209
  %2227 = and i32 %2224, 7
  %2228 = icmp eq i32 %2227, 0
  br i1 %2228, label %2237, label %2229

2229:                                             ; preds = %2226, %2229
  %2230 = phi i32 [ %2234, %2229 ], [ %2224, %2226 ]
  %2231 = phi ptr [ %2233, %2229 ], [ %2220, %2226 ]
  %2232 = phi i32 [ %2235, %2229 ], [ 0, %2226 ]
  %2233 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2231, i64 1
  %2234 = add nsw i32 %2230, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2233, i8 -1, i64 16, i1 false)
  %2235 = add i32 %2232, 1
  %2236 = icmp eq i32 %2235, %2227
  br i1 %2236, label %2237, label %2229, !llvm.loop !175

2237:                                             ; preds = %2229, %2226
  %2238 = phi i32 [ %2224, %2226 ], [ %2234, %2229 ]
  %2239 = phi ptr [ %2220, %2226 ], [ %2233, %2229 ]
  %2240 = icmp ult i32 %2224, 8
  br i1 %2240, label %2255, label %2241

2241:                                             ; preds = %2237, %2241
  %2242 = phi i32 [ %2252, %2241 ], [ %2238, %2237 ]
  %2243 = phi ptr [ %2251, %2241 ], [ %2239, %2237 ]
  %2244 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2244, i8 -1, i64 16, i1 false)
  %2245 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2245, i8 -1, i64 16, i1 false)
  %2246 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2246, i8 -1, i64 16, i1 false)
  %2247 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2247, i8 -1, i64 16, i1 false)
  %2248 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2248, i8 -1, i64 16, i1 false)
  %2249 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2249, i8 -1, i64 16, i1 false)
  %2250 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2250, i8 -1, i64 16, i1 false)
  %2251 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2243, i64 8
  %2252 = add nsw i32 %2242, -8
  %2253 = add i32 %2242, -9
  %2254 = icmp ult i32 %2253, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2251, i8 -1, i64 16, i1 false)
  br i1 %2254, label %2241, label %2255, !llvm.loop !96

2255:                                             ; preds = %2237, %2241, %2209
  %2256 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2257 = getelementptr inbounds %struct.regexp_internal, ptr %2214, i64 1
  %2258 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2194, ptr noundef nonnull %2257)
  %2259 = icmp eq i64 %2258, -1
  br i1 %2259, label %2260, label %2267

2260:                                             ; preds = %2255
  %2261 = load ptr, ptr %2191, align 8, !tbaa !93
  %2262 = icmp eq ptr %2261, null
  %2263 = select i1 %2262, ptr %2194, ptr %2261
  %2264 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2265 = icmp sgt i32 %2264, %2256
  br i1 %2265, label %2266, label %2271

2266:                                             ; preds = %2260
  tail call void @Perl_leave_scope(i32 noundef %2256) #12
  br label %2271

2267:                                             ; preds = %2255
  %2268 = getelementptr inbounds %struct.regexp, ptr %2212, i64 0, i32 17
  %2269 = load ptr, ptr %2268, align 8, !tbaa !38
  %2270 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2269, i64 0, i32 1
  store i64 %2258, ptr %2270, align 8, !tbaa !42
  br label %5550

2271:                                             ; preds = %2260, %2266, %2203
  %2272 = phi ptr [ %2194, %2203 ], [ %2263, %2266 ], [ %2263, %2260 ]
  %2273 = phi i32 [ %2205, %2203 ], [ %2193, %2266 ], [ %2193, %2260 ]
  %2274 = getelementptr inbounds i8, ptr %2272, i64 1
  store ptr %2274, ptr %6, align 8, !tbaa !13
  %2275 = icmp ult ptr %2274, %3
  br i1 %2275, label %2192, label %2276, !llvm.loop !176

2276:                                             ; preds = %2271, %2166, %2181, %2074
  %2277 = phi i32 [ %2080, %2074 ], [ %2187, %2181 ], [ %2168, %2166 ], [ %2273, %2271 ]
  %2278 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !34
  %2279 = and i32 %2278, 16385
  %2280 = icmp ne i32 %2279, 16385
  %2281 = zext i1 %2280 to i32
  %2282 = icmp eq i32 %2277, %2281
  br i1 %2282, label %5552, label %2283

2283:                                             ; preds = %2276
  %2284 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2285 = load i8, ptr %2284, align 8, !tbaa !47, !range !97, !noundef !98
  %2286 = icmp eq i8 %2285, 0
  br i1 %2286, label %2287, label %5550

2287:                                             ; preds = %2283
  %2288 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %2289 = icmp eq i32 %2288, 0
  br i1 %2289, label %5552, label %5550

2290:                                             ; preds = %5
  %2291 = load i8, ptr %1, align 2, !tbaa !139
  %2292 = icmp eq i8 %2291, 0
  br i1 %2292, label %2293, label %2570

2293:                                             ; preds = %2290
  %2294 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2295 = load ptr, ptr %2294, align 8, !tbaa !53
  %2296 = icmp eq ptr %2295, %2
  br i1 %25, label %2297, label %2455

2297:                                             ; preds = %2293
  br i1 %2296, label %2313, label %2298

2298:                                             ; preds = %2297
  %2299 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %2295)
  %2300 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2301 = load ptr, ptr %2300, align 8, !tbaa !56
  %2302 = ptrtoint ptr %2301 to i64
  %2303 = ptrtoint ptr %2299 to i64
  %2304 = sub i64 %2302, %2303
  %2305 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %2306 = xor i1 %2305, true
  %2307 = zext i1 %2306 to i32
  %2308 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2299, i64 noundef %2304, ptr noundef null, i32 noundef %2307) #12
  %2309 = trunc i64 %2308 to i32
  %2310 = icmp slt i32 %2309, 256
  br i1 %2310, label %2311, label %2319

2311:                                             ; preds = %2298
  %2312 = icmp ult i32 %2309, 256
  br i1 %2312, label %2313, label %2323

2313:                                             ; preds = %2297, %2311
  %2314 = phi i64 [ %2308, %2311 ], [ 10, %2297 ]
  %2315 = and i64 %2314, 4294967295
  %2316 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2315
  %2317 = load i32, ptr %2316, align 4, !tbaa !34
  %2318 = and i32 %2317, 1
  br label %2323

2319:                                             ; preds = %2298
  %2320 = and i64 %2308, 4294967295
  %2321 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %2320) #12
  %2322 = zext i1 %2321 to i32
  br label %2323

2323:                                             ; preds = %2311, %2313, %2319
  %2324 = phi i32 [ %2322, %2319 ], [ 0, %2311 ], [ %2318, %2313 ]
  %2325 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  %2326 = icmp eq ptr %2325, null
  br i1 %2326, label %2327, label %2331

2327:                                             ; preds = %2323
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %12) #12
  store i8 4, ptr %12, align 1, !tbaa !6
  %2328 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !13
  %2329 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %2328, ptr noundef nonnull %12) #12
  store ptr %2329, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %12) #12
  %2330 = load ptr, ptr %6, align 8, !tbaa !13
  br label %2331

2331:                                             ; preds = %2323, %2327
  %2332 = phi ptr [ %2, %2323 ], [ %2330, %2327 ]
  %2333 = icmp ult ptr %2332, %3
  br i1 %2333, label %2334, label %2552

2334:                                             ; preds = %2331
  %2335 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2336 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2337

2337:                                             ; preds = %2334, %2445
  %2338 = phi ptr [ %2332, %2334 ], [ %2453, %2445 ]
  %2339 = phi i32 [ %2324, %2334 ], [ %2446, %2445 ]
  %2340 = load i8, ptr %2338, align 1, !tbaa !6
  %2341 = icmp sgt i8 %2340, -1
  br i1 %2341, label %2342, label %2347

2342:                                             ; preds = %2337
  %2343 = zext i8 %2340 to i64
  %2344 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2343
  %2345 = load i32, ptr %2344, align 4, !tbaa !34
  %2346 = and i32 %2345, 1
  br label %2371

2347:                                             ; preds = %2337
  %2348 = zext i8 %2340 to i32
  %2349 = and i32 %2348, 254
  %2350 = icmp eq i32 %2349, 194
  br i1 %2350, label %2351, label %2368

2351:                                             ; preds = %2347
  %2352 = and i32 %2348, 28
  %2353 = icmp eq i32 %2352, 0
  br i1 %2353, label %2354, label %2365

2354:                                             ; preds = %2351
  %2355 = shl i8 %2340, 6
  %2356 = getelementptr inbounds i8, ptr %2338, i64 1
  %2357 = load i8, ptr %2356, align 1, !tbaa !6
  %2358 = and i8 %2357, 63
  %2359 = or i8 %2358, %2355
  %2360 = zext i8 %2359 to i64
  %2361 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2360
  %2362 = load i32, ptr %2361, align 4, !tbaa !34
  %2363 = and i32 %2362, 1
  %2364 = icmp ne i32 %2363, 0
  br label %2365

2365:                                             ; preds = %2354, %2351
  %2366 = phi i1 [ false, %2351 ], [ %2364, %2354 ]
  %2367 = zext i1 %2366 to i32
  br label %2371

2368:                                             ; preds = %2347
  %2369 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %2338) #12
  %2370 = zext i1 %2369 to i32
  br label %2371

2371:                                             ; preds = %2365, %2368, %2342
  %2372 = phi i32 [ %2346, %2342 ], [ %2367, %2365 ], [ %2370, %2368 ]
  %2373 = xor i32 %2372, 1
  %2374 = icmp eq i32 %2339, %2373
  br i1 %2374, label %2375, label %2378

2375:                                             ; preds = %2371
  %2376 = icmp eq i32 %2339, 0
  %2377 = zext i1 %2376 to i32
  br label %2445

2378:                                             ; preds = %2371
  %2379 = load i8, ptr %2335, align 8, !tbaa !47, !range !97, !noundef !98
  %2380 = icmp eq i8 %2379, 0
  br i1 %2380, label %2381, label %5550

2381:                                             ; preds = %2378
  %2382 = load ptr, ptr %4, align 8, !tbaa !46
  %2383 = getelementptr i8, ptr %2382, i64 16
  %2384 = load ptr, ptr %2383, align 8, !tbaa !6
  %2385 = getelementptr inbounds %struct.regexp, ptr %2384, i64 0, i32 14
  %2386 = load ptr, ptr %2385, align 8, !tbaa !17
  store ptr null, ptr %2336, align 8, !tbaa !93
  %2387 = load ptr, ptr %6, align 8, !tbaa !13
  %2388 = load ptr, ptr %2294, align 8, !tbaa !53
  %2389 = ptrtoint ptr %2387 to i64
  %2390 = ptrtoint ptr %2388 to i64
  %2391 = sub i64 %2389, %2390
  %2392 = getelementptr inbounds %struct.regexp, ptr %2384, i64 0, i32 17
  %2393 = load ptr, ptr %2392, align 8, !tbaa !38
  store i64 %2391, ptr %2393, align 8, !tbaa !39
  %2394 = getelementptr inbounds %struct.regexp, ptr %2384, i64 0, i32 15
  store i32 0, ptr %2394, align 8, !tbaa !37
  %2395 = getelementptr inbounds %struct.regexp, ptr %2384, i64 0, i32 16
  store i32 0, ptr %2395, align 4, !tbaa !36
  %2396 = getelementptr inbounds %struct.regexp, ptr %2384, i64 0, i32 12
  %2397 = load i32, ptr %2396, align 8, !tbaa !92
  %2398 = icmp sgt i32 %2397, 0
  br i1 %2398, label %2399, label %2428

2399:                                             ; preds = %2381
  %2400 = and i32 %2397, 7
  %2401 = icmp eq i32 %2400, 0
  br i1 %2401, label %2410, label %2402

2402:                                             ; preds = %2399, %2402
  %2403 = phi i32 [ %2407, %2402 ], [ %2397, %2399 ]
  %2404 = phi ptr [ %2406, %2402 ], [ %2393, %2399 ]
  %2405 = phi i32 [ %2408, %2402 ], [ 0, %2399 ]
  %2406 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2404, i64 1
  %2407 = add nsw i32 %2403, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2406, i8 -1, i64 16, i1 false)
  %2408 = add i32 %2405, 1
  %2409 = icmp eq i32 %2408, %2400
  br i1 %2409, label %2410, label %2402, !llvm.loop !177

2410:                                             ; preds = %2402, %2399
  %2411 = phi i32 [ %2397, %2399 ], [ %2407, %2402 ]
  %2412 = phi ptr [ %2393, %2399 ], [ %2406, %2402 ]
  %2413 = icmp ult i32 %2397, 8
  br i1 %2413, label %2428, label %2414

2414:                                             ; preds = %2410, %2414
  %2415 = phi i32 [ %2425, %2414 ], [ %2411, %2410 ]
  %2416 = phi ptr [ %2424, %2414 ], [ %2412, %2410 ]
  %2417 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2417, i8 -1, i64 16, i1 false)
  %2418 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2418, i8 -1, i64 16, i1 false)
  %2419 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2419, i8 -1, i64 16, i1 false)
  %2420 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2420, i8 -1, i64 16, i1 false)
  %2421 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2421, i8 -1, i64 16, i1 false)
  %2422 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2422, i8 -1, i64 16, i1 false)
  %2423 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2423, i8 -1, i64 16, i1 false)
  %2424 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2416, i64 8
  %2425 = add nsw i32 %2415, -8
  %2426 = add i32 %2415, -9
  %2427 = icmp ult i32 %2426, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2424, i8 -1, i64 16, i1 false)
  br i1 %2427, label %2414, label %2428, !llvm.loop !96

2428:                                             ; preds = %2410, %2414, %2381
  %2429 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2430 = getelementptr inbounds %struct.regexp_internal, ptr %2386, i64 1
  %2431 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2387, ptr noundef nonnull %2430)
  %2432 = icmp eq i64 %2431, -1
  br i1 %2432, label %2433, label %2441

2433:                                             ; preds = %2428
  %2434 = load ptr, ptr %2336, align 8, !tbaa !93
  %2435 = icmp eq ptr %2434, null
  br i1 %2435, label %2437, label %2436

2436:                                             ; preds = %2433
  store ptr %2434, ptr %6, align 8, !tbaa !13
  br label %2437

2437:                                             ; preds = %2436, %2433
  %2438 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2439 = icmp sgt i32 %2438, %2429
  br i1 %2439, label %2440, label %2445

2440:                                             ; preds = %2437
  call void @Perl_leave_scope(i32 noundef %2429) #12
  br label %2445

2441:                                             ; preds = %2428
  %2442 = getelementptr inbounds %struct.regexp, ptr %2384, i64 0, i32 17
  %2443 = load ptr, ptr %2442, align 8, !tbaa !38
  %2444 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2443, i64 0, i32 1
  store i64 %2431, ptr %2444, align 8, !tbaa !42
  br label %5550

2445:                                             ; preds = %2437, %2440, %2375
  %2446 = phi i32 [ %2377, %2375 ], [ %2339, %2440 ], [ %2339, %2437 ]
  %2447 = load ptr, ptr %6, align 8, !tbaa !13
  %2448 = load i8, ptr %2447, align 1, !tbaa !6
  %2449 = zext i8 %2448 to i64
  %2450 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2449
  %2451 = load i8, ptr %2450, align 1, !tbaa !6
  %2452 = zext i8 %2451 to i64
  %2453 = getelementptr inbounds i8, ptr %2447, i64 %2452
  store ptr %2453, ptr %6, align 8, !tbaa !13
  %2454 = icmp ult ptr %2453, %3
  br i1 %2454, label %2337, label %2552, !llvm.loop !178

2455:                                             ; preds = %2293
  br i1 %2296, label %2460, label %2456

2456:                                             ; preds = %2455
  %2457 = getelementptr inbounds i8, ptr %2, i64 -1
  %2458 = load i8, ptr %2457, align 1, !tbaa !6
  %2459 = zext i8 %2458 to i64
  br label %2460

2460:                                             ; preds = %2455, %2456
  %2461 = phi i64 [ %2459, %2456 ], [ 10, %2455 ]
  %2462 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2461
  %2463 = load i32, ptr %2462, align 4, !tbaa !34
  %2464 = and i32 %2463, 1
  %2465 = icmp ult ptr %2, %3
  br i1 %2465, label %2466, label %2552

2466:                                             ; preds = %2460
  %2467 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2468 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2469

2469:                                             ; preds = %2466, %2547
  %2470 = phi i32 [ %2464, %2466 ], [ %2549, %2547 ]
  %2471 = phi ptr [ %2, %2466 ], [ %2550, %2547 ]
  %2472 = load i8, ptr %2471, align 1, !tbaa !6
  %2473 = zext i8 %2472 to i64
  %2474 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2473
  %2475 = load i32, ptr %2474, align 4, !tbaa !34
  %2476 = and i32 %2475, 1
  %2477 = xor i32 %2476, 1
  %2478 = icmp eq i32 %2470, %2477
  br i1 %2478, label %2479, label %2482

2479:                                             ; preds = %2469
  %2480 = icmp eq i32 %2470, 0
  %2481 = zext i1 %2480 to i32
  br label %2547

2482:                                             ; preds = %2469
  %2483 = load i8, ptr %2467, align 8, !tbaa !47, !range !97, !noundef !98
  %2484 = icmp eq i8 %2483, 0
  br i1 %2484, label %2485, label %5550

2485:                                             ; preds = %2482
  %2486 = load ptr, ptr %4, align 8, !tbaa !46
  %2487 = getelementptr i8, ptr %2486, i64 16
  %2488 = load ptr, ptr %2487, align 8, !tbaa !6
  %2489 = getelementptr inbounds %struct.regexp, ptr %2488, i64 0, i32 14
  %2490 = load ptr, ptr %2489, align 8, !tbaa !17
  store ptr null, ptr %2468, align 8, !tbaa !93
  %2491 = load ptr, ptr %2294, align 8, !tbaa !53
  %2492 = ptrtoint ptr %2471 to i64
  %2493 = ptrtoint ptr %2491 to i64
  %2494 = sub i64 %2492, %2493
  %2495 = getelementptr inbounds %struct.regexp, ptr %2488, i64 0, i32 17
  %2496 = load ptr, ptr %2495, align 8, !tbaa !38
  store i64 %2494, ptr %2496, align 8, !tbaa !39
  %2497 = getelementptr inbounds %struct.regexp, ptr %2488, i64 0, i32 15
  store i32 0, ptr %2497, align 8, !tbaa !37
  %2498 = getelementptr inbounds %struct.regexp, ptr %2488, i64 0, i32 16
  store i32 0, ptr %2498, align 4, !tbaa !36
  %2499 = getelementptr inbounds %struct.regexp, ptr %2488, i64 0, i32 12
  %2500 = load i32, ptr %2499, align 8, !tbaa !92
  %2501 = icmp sgt i32 %2500, 0
  br i1 %2501, label %2502, label %2531

2502:                                             ; preds = %2485
  %2503 = and i32 %2500, 7
  %2504 = icmp eq i32 %2503, 0
  br i1 %2504, label %2513, label %2505

2505:                                             ; preds = %2502, %2505
  %2506 = phi i32 [ %2510, %2505 ], [ %2500, %2502 ]
  %2507 = phi ptr [ %2509, %2505 ], [ %2496, %2502 ]
  %2508 = phi i32 [ %2511, %2505 ], [ 0, %2502 ]
  %2509 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2507, i64 1
  %2510 = add nsw i32 %2506, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2509, i8 -1, i64 16, i1 false)
  %2511 = add i32 %2508, 1
  %2512 = icmp eq i32 %2511, %2503
  br i1 %2512, label %2513, label %2505, !llvm.loop !179

2513:                                             ; preds = %2505, %2502
  %2514 = phi i32 [ %2500, %2502 ], [ %2510, %2505 ]
  %2515 = phi ptr [ %2496, %2502 ], [ %2509, %2505 ]
  %2516 = icmp ult i32 %2500, 8
  br i1 %2516, label %2531, label %2517

2517:                                             ; preds = %2513, %2517
  %2518 = phi i32 [ %2528, %2517 ], [ %2514, %2513 ]
  %2519 = phi ptr [ %2527, %2517 ], [ %2515, %2513 ]
  %2520 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2520, i8 -1, i64 16, i1 false)
  %2521 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2521, i8 -1, i64 16, i1 false)
  %2522 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2522, i8 -1, i64 16, i1 false)
  %2523 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2523, i8 -1, i64 16, i1 false)
  %2524 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2524, i8 -1, i64 16, i1 false)
  %2525 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2525, i8 -1, i64 16, i1 false)
  %2526 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2526, i8 -1, i64 16, i1 false)
  %2527 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2519, i64 8
  %2528 = add nsw i32 %2518, -8
  %2529 = add i32 %2518, -9
  %2530 = icmp ult i32 %2529, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2527, i8 -1, i64 16, i1 false)
  br i1 %2530, label %2517, label %2531, !llvm.loop !96

2531:                                             ; preds = %2513, %2517, %2485
  %2532 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2533 = getelementptr inbounds %struct.regexp_internal, ptr %2490, i64 1
  %2534 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2471, ptr noundef nonnull %2533)
  %2535 = icmp eq i64 %2534, -1
  br i1 %2535, label %2536, label %2543

2536:                                             ; preds = %2531
  %2537 = load ptr, ptr %2468, align 8, !tbaa !93
  %2538 = icmp eq ptr %2537, null
  %2539 = select i1 %2538, ptr %2471, ptr %2537
  %2540 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2541 = icmp sgt i32 %2540, %2532
  br i1 %2541, label %2542, label %2547

2542:                                             ; preds = %2536
  tail call void @Perl_leave_scope(i32 noundef %2532) #12
  br label %2547

2543:                                             ; preds = %2531
  %2544 = getelementptr inbounds %struct.regexp, ptr %2488, i64 0, i32 17
  %2545 = load ptr, ptr %2544, align 8, !tbaa !38
  %2546 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2545, i64 0, i32 1
  store i64 %2534, ptr %2546, align 8, !tbaa !42
  br label %5550

2547:                                             ; preds = %2536, %2542, %2479
  %2548 = phi ptr [ %2471, %2479 ], [ %2539, %2542 ], [ %2539, %2536 ]
  %2549 = phi i32 [ %2481, %2479 ], [ %2470, %2542 ], [ %2470, %2536 ]
  %2550 = getelementptr inbounds i8, ptr %2548, i64 1
  store ptr %2550, ptr %6, align 8, !tbaa !13
  %2551 = icmp ult ptr %2550, %3
  br i1 %2551, label %2469, label %2552, !llvm.loop !180

2552:                                             ; preds = %2547, %2445, %2460, %2331
  %2553 = phi i32 [ %2324, %2331 ], [ %2464, %2460 ], [ %2446, %2445 ], [ %2549, %2547 ]
  %2554 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !34
  %2555 = and i32 %2554, 1
  %2556 = xor i32 %2555, 1
  %2557 = icmp eq i32 %2553, %2556
  br i1 %2557, label %5552, label %2558

2558:                                             ; preds = %2552
  %2559 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2560 = load i8, ptr %2559, align 8, !tbaa !47, !range !97, !noundef !98
  %2561 = icmp eq i8 %2560, 0
  br i1 %2561, label %2562, label %5550

2562:                                             ; preds = %2558
  %2563 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %2564 = icmp eq i32 %2563, 0
  br i1 %2564, label %5552, label %5550

2565:                                             ; preds = %978, %664
  %2566 = phi i32 [ 0, %664 ], [ 1, %978 ]
  tail call void (i32, ptr, ...) @Perl_ck_warner(i32 noundef 65, ptr noundef nonnull @.str.2) #12
  br label %2567

2567:                                             ; preds = %2565, %5
  %2568 = phi i32 [ 0, %5 ], [ %2566, %2565 ]
  %2569 = load i8, ptr %1, align 2, !tbaa !139
  br label %2570

2570:                                             ; preds = %2567, %978, %2290, %664
  %2571 = phi i8 [ %2569, %2567 ], [ %976, %978 ], [ %2291, %2290 ], [ %662, %664 ]
  %2572 = phi i32 [ %2568, %2567 ], [ 1, %978 ], [ 1, %2290 ], [ 0, %664 ]
  switch i8 %2571, label %5552 [
    i8 0, label %2573
    i8 1, label %2844
    i8 2, label %3077
    i8 3, label %3263
  ]

2573:                                             ; preds = %2570
  %2574 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2575 = load ptr, ptr %2574, align 8, !tbaa !53
  %2576 = icmp eq ptr %2575, %2
  br i1 %25, label %2577, label %2734

2577:                                             ; preds = %2573
  br i1 %2576, label %2593, label %2578

2578:                                             ; preds = %2577
  %2579 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %2575)
  %2580 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2581 = load ptr, ptr %2580, align 8, !tbaa !56
  %2582 = ptrtoint ptr %2581 to i64
  %2583 = ptrtoint ptr %2579 to i64
  %2584 = sub i64 %2582, %2583
  %2585 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %2586 = xor i1 %2585, true
  %2587 = zext i1 %2586 to i32
  %2588 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2579, i64 noundef %2584, ptr noundef null, i32 noundef %2587) #12
  %2589 = trunc i64 %2588 to i32
  %2590 = icmp slt i32 %2589, 256
  br i1 %2590, label %2591, label %2599

2591:                                             ; preds = %2578
  %2592 = icmp ult i32 %2589, 256
  br i1 %2592, label %2593, label %2603

2593:                                             ; preds = %2577, %2591
  %2594 = phi i64 [ %2588, %2591 ], [ 10, %2577 ]
  %2595 = and i64 %2594, 4294967295
  %2596 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2595
  %2597 = load i32, ptr %2596, align 4, !tbaa !34
  %2598 = and i32 %2597, 1
  br label %2603

2599:                                             ; preds = %2578
  %2600 = and i64 %2588, 4294967295
  %2601 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %2600) #12
  %2602 = zext i1 %2601 to i32
  br label %2603

2603:                                             ; preds = %2591, %2593, %2599
  %2604 = phi i32 [ %2602, %2599 ], [ 0, %2591 ], [ %2598, %2593 ]
  %2605 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  %2606 = icmp eq ptr %2605, null
  br i1 %2606, label %2607, label %2611

2607:                                             ; preds = %2603
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %13) #12
  store i8 4, ptr %13, align 1, !tbaa !6
  %2608 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !13
  %2609 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %2608, ptr noundef nonnull %13) #12
  store ptr %2609, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %13) #12
  %2610 = load ptr, ptr %6, align 8, !tbaa !13
  br label %2611

2611:                                             ; preds = %2603, %2607
  %2612 = phi ptr [ %2, %2603 ], [ %2610, %2607 ]
  %2613 = icmp ult ptr %2612, %3
  br i1 %2613, label %2614, label %2831

2614:                                             ; preds = %2611
  %2615 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2616 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2617

2617:                                             ; preds = %2614, %2724
  %2618 = phi ptr [ %2612, %2614 ], [ %2732, %2724 ]
  %2619 = phi i32 [ %2604, %2614 ], [ %2725, %2724 ]
  %2620 = load i8, ptr %2618, align 1, !tbaa !6
  %2621 = icmp sgt i8 %2620, -1
  br i1 %2621, label %2622, label %2627

2622:                                             ; preds = %2617
  %2623 = zext i8 %2620 to i64
  %2624 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2623
  %2625 = load i32, ptr %2624, align 4, !tbaa !34
  %2626 = and i32 %2625, 1
  br label %2651

2627:                                             ; preds = %2617
  %2628 = zext i8 %2620 to i32
  %2629 = and i32 %2628, 254
  %2630 = icmp eq i32 %2629, 194
  br i1 %2630, label %2631, label %2648

2631:                                             ; preds = %2627
  %2632 = and i32 %2628, 28
  %2633 = icmp eq i32 %2632, 0
  br i1 %2633, label %2634, label %2645

2634:                                             ; preds = %2631
  %2635 = shl i8 %2620, 6
  %2636 = getelementptr inbounds i8, ptr %2618, i64 1
  %2637 = load i8, ptr %2636, align 1, !tbaa !6
  %2638 = and i8 %2637, 63
  %2639 = or i8 %2638, %2635
  %2640 = zext i8 %2639 to i64
  %2641 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2640
  %2642 = load i32, ptr %2641, align 4, !tbaa !34
  %2643 = and i32 %2642, 1
  %2644 = icmp ne i32 %2643, 0
  br label %2645

2645:                                             ; preds = %2634, %2631
  %2646 = phi i1 [ false, %2631 ], [ %2644, %2634 ]
  %2647 = zext i1 %2646 to i32
  br label %2651

2648:                                             ; preds = %2627
  %2649 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %2618) #12
  %2650 = zext i1 %2649 to i32
  br label %2651

2651:                                             ; preds = %2645, %2648, %2622
  %2652 = phi i32 [ %2626, %2622 ], [ %2647, %2645 ], [ %2650, %2648 ]
  %2653 = xor i32 %2652, 1
  %2654 = icmp eq i32 %2619, %2653
  br i1 %2654, label %2655, label %2724

2655:                                             ; preds = %2651
  %2656 = load i8, ptr %2615, align 8, !tbaa !47, !range !97, !noundef !98
  %2657 = icmp eq i8 %2656, 0
  br i1 %2657, label %2658, label %5550

2658:                                             ; preds = %2655
  %2659 = icmp eq i32 %2619, 0
  %2660 = zext i1 %2659 to i32
  %2661 = load ptr, ptr %4, align 8, !tbaa !46
  %2662 = getelementptr i8, ptr %2661, i64 16
  %2663 = load ptr, ptr %2662, align 8, !tbaa !6
  %2664 = getelementptr inbounds %struct.regexp, ptr %2663, i64 0, i32 14
  %2665 = load ptr, ptr %2664, align 8, !tbaa !17
  store ptr null, ptr %2616, align 8, !tbaa !93
  %2666 = load ptr, ptr %6, align 8, !tbaa !13
  %2667 = load ptr, ptr %2574, align 8, !tbaa !53
  %2668 = ptrtoint ptr %2666 to i64
  %2669 = ptrtoint ptr %2667 to i64
  %2670 = sub i64 %2668, %2669
  %2671 = getelementptr inbounds %struct.regexp, ptr %2663, i64 0, i32 17
  %2672 = load ptr, ptr %2671, align 8, !tbaa !38
  store i64 %2670, ptr %2672, align 8, !tbaa !39
  %2673 = getelementptr inbounds %struct.regexp, ptr %2663, i64 0, i32 15
  store i32 0, ptr %2673, align 8, !tbaa !37
  %2674 = getelementptr inbounds %struct.regexp, ptr %2663, i64 0, i32 16
  store i32 0, ptr %2674, align 4, !tbaa !36
  %2675 = getelementptr inbounds %struct.regexp, ptr %2663, i64 0, i32 12
  %2676 = load i32, ptr %2675, align 8, !tbaa !92
  %2677 = icmp sgt i32 %2676, 0
  br i1 %2677, label %2678, label %2707

2678:                                             ; preds = %2658
  %2679 = and i32 %2676, 7
  %2680 = icmp eq i32 %2679, 0
  br i1 %2680, label %2689, label %2681

2681:                                             ; preds = %2678, %2681
  %2682 = phi i32 [ %2686, %2681 ], [ %2676, %2678 ]
  %2683 = phi ptr [ %2685, %2681 ], [ %2672, %2678 ]
  %2684 = phi i32 [ %2687, %2681 ], [ 0, %2678 ]
  %2685 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2683, i64 1
  %2686 = add nsw i32 %2682, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2685, i8 -1, i64 16, i1 false)
  %2687 = add i32 %2684, 1
  %2688 = icmp eq i32 %2687, %2679
  br i1 %2688, label %2689, label %2681, !llvm.loop !181

2689:                                             ; preds = %2681, %2678
  %2690 = phi i32 [ %2676, %2678 ], [ %2686, %2681 ]
  %2691 = phi ptr [ %2672, %2678 ], [ %2685, %2681 ]
  %2692 = icmp ult i32 %2676, 8
  br i1 %2692, label %2707, label %2693

2693:                                             ; preds = %2689, %2693
  %2694 = phi i32 [ %2704, %2693 ], [ %2690, %2689 ]
  %2695 = phi ptr [ %2703, %2693 ], [ %2691, %2689 ]
  %2696 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2696, i8 -1, i64 16, i1 false)
  %2697 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2697, i8 -1, i64 16, i1 false)
  %2698 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2698, i8 -1, i64 16, i1 false)
  %2699 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2699, i8 -1, i64 16, i1 false)
  %2700 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2700, i8 -1, i64 16, i1 false)
  %2701 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2701, i8 -1, i64 16, i1 false)
  %2702 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2702, i8 -1, i64 16, i1 false)
  %2703 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2695, i64 8
  %2704 = add nsw i32 %2694, -8
  %2705 = add i32 %2694, -9
  %2706 = icmp ult i32 %2705, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2703, i8 -1, i64 16, i1 false)
  br i1 %2706, label %2693, label %2707, !llvm.loop !96

2707:                                             ; preds = %2689, %2693, %2658
  %2708 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2709 = getelementptr inbounds %struct.regexp_internal, ptr %2665, i64 1
  %2710 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2666, ptr noundef nonnull %2709)
  %2711 = icmp eq i64 %2710, -1
  br i1 %2711, label %2712, label %2720

2712:                                             ; preds = %2707
  %2713 = load ptr, ptr %2616, align 8, !tbaa !93
  %2714 = icmp eq ptr %2713, null
  br i1 %2714, label %2716, label %2715

2715:                                             ; preds = %2712
  store ptr %2713, ptr %6, align 8, !tbaa !13
  br label %2716

2716:                                             ; preds = %2715, %2712
  %2717 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2718 = icmp sgt i32 %2717, %2708
  br i1 %2718, label %2719, label %2724

2719:                                             ; preds = %2716
  call void @Perl_leave_scope(i32 noundef %2708) #12
  br label %2724

2720:                                             ; preds = %2707
  %2721 = getelementptr inbounds %struct.regexp, ptr %2663, i64 0, i32 17
  %2722 = load ptr, ptr %2721, align 8, !tbaa !38
  %2723 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2722, i64 0, i32 1
  store i64 %2710, ptr %2723, align 8, !tbaa !42
  br label %5550

2724:                                             ; preds = %2716, %2719, %2651
  %2725 = phi i32 [ %2619, %2651 ], [ %2660, %2719 ], [ %2660, %2716 ]
  %2726 = load ptr, ptr %6, align 8, !tbaa !13
  %2727 = load i8, ptr %2726, align 1, !tbaa !6
  %2728 = zext i8 %2727 to i64
  %2729 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2728
  %2730 = load i8, ptr %2729, align 1, !tbaa !6
  %2731 = zext i8 %2730 to i64
  %2732 = getelementptr inbounds i8, ptr %2726, i64 %2731
  store ptr %2732, ptr %6, align 8, !tbaa !13
  %2733 = icmp ult ptr %2732, %3
  br i1 %2733, label %2617, label %2831, !llvm.loop !182

2734:                                             ; preds = %2573
  br i1 %2576, label %2739, label %2735

2735:                                             ; preds = %2734
  %2736 = getelementptr inbounds i8, ptr %2, i64 -1
  %2737 = load i8, ptr %2736, align 1, !tbaa !6
  %2738 = zext i8 %2737 to i64
  br label %2739

2739:                                             ; preds = %2734, %2735
  %2740 = phi i64 [ %2738, %2735 ], [ 10, %2734 ]
  %2741 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2740
  %2742 = load i32, ptr %2741, align 4, !tbaa !34
  %2743 = and i32 %2742, 1
  %2744 = icmp ult ptr %2, %3
  br i1 %2744, label %2745, label %2831

2745:                                             ; preds = %2739
  %2746 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2747 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2748

2748:                                             ; preds = %2745, %2826
  %2749 = phi i32 [ %2743, %2745 ], [ %2828, %2826 ]
  %2750 = phi ptr [ %2, %2745 ], [ %2829, %2826 ]
  %2751 = load i8, ptr %2750, align 1, !tbaa !6
  %2752 = zext i8 %2751 to i64
  %2753 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2752
  %2754 = load i32, ptr %2753, align 4, !tbaa !34
  %2755 = and i32 %2754, 1
  %2756 = xor i32 %2755, 1
  %2757 = icmp eq i32 %2749, %2756
  br i1 %2757, label %2758, label %2826

2758:                                             ; preds = %2748
  %2759 = load i8, ptr %2746, align 8, !tbaa !47, !range !97, !noundef !98
  %2760 = icmp eq i8 %2759, 0
  br i1 %2760, label %2761, label %5550

2761:                                             ; preds = %2758
  %2762 = load ptr, ptr %4, align 8, !tbaa !46
  %2763 = getelementptr i8, ptr %2762, i64 16
  %2764 = load ptr, ptr %2763, align 8, !tbaa !6
  %2765 = getelementptr inbounds %struct.regexp, ptr %2764, i64 0, i32 14
  %2766 = load ptr, ptr %2765, align 8, !tbaa !17
  store ptr null, ptr %2747, align 8, !tbaa !93
  %2767 = load ptr, ptr %2574, align 8, !tbaa !53
  %2768 = ptrtoint ptr %2750 to i64
  %2769 = ptrtoint ptr %2767 to i64
  %2770 = sub i64 %2768, %2769
  %2771 = getelementptr inbounds %struct.regexp, ptr %2764, i64 0, i32 17
  %2772 = load ptr, ptr %2771, align 8, !tbaa !38
  store i64 %2770, ptr %2772, align 8, !tbaa !39
  %2773 = getelementptr inbounds %struct.regexp, ptr %2764, i64 0, i32 15
  store i32 0, ptr %2773, align 8, !tbaa !37
  %2774 = getelementptr inbounds %struct.regexp, ptr %2764, i64 0, i32 16
  store i32 0, ptr %2774, align 4, !tbaa !36
  %2775 = getelementptr inbounds %struct.regexp, ptr %2764, i64 0, i32 12
  %2776 = load i32, ptr %2775, align 8, !tbaa !92
  %2777 = icmp sgt i32 %2776, 0
  br i1 %2777, label %2778, label %2807

2778:                                             ; preds = %2761
  %2779 = and i32 %2776, 7
  %2780 = icmp eq i32 %2779, 0
  br i1 %2780, label %2789, label %2781

2781:                                             ; preds = %2778, %2781
  %2782 = phi i32 [ %2786, %2781 ], [ %2776, %2778 ]
  %2783 = phi ptr [ %2785, %2781 ], [ %2772, %2778 ]
  %2784 = phi i32 [ %2787, %2781 ], [ 0, %2778 ]
  %2785 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2783, i64 1
  %2786 = add nsw i32 %2782, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2785, i8 -1, i64 16, i1 false)
  %2787 = add i32 %2784, 1
  %2788 = icmp eq i32 %2787, %2779
  br i1 %2788, label %2789, label %2781, !llvm.loop !183

2789:                                             ; preds = %2781, %2778
  %2790 = phi i32 [ %2776, %2778 ], [ %2786, %2781 ]
  %2791 = phi ptr [ %2772, %2778 ], [ %2785, %2781 ]
  %2792 = icmp ult i32 %2776, 8
  br i1 %2792, label %2807, label %2793

2793:                                             ; preds = %2789, %2793
  %2794 = phi i32 [ %2804, %2793 ], [ %2790, %2789 ]
  %2795 = phi ptr [ %2803, %2793 ], [ %2791, %2789 ]
  %2796 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2796, i8 -1, i64 16, i1 false)
  %2797 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2797, i8 -1, i64 16, i1 false)
  %2798 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2798, i8 -1, i64 16, i1 false)
  %2799 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2799, i8 -1, i64 16, i1 false)
  %2800 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2800, i8 -1, i64 16, i1 false)
  %2801 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2801, i8 -1, i64 16, i1 false)
  %2802 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2802, i8 -1, i64 16, i1 false)
  %2803 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2795, i64 8
  %2804 = add nsw i32 %2794, -8
  %2805 = add i32 %2794, -9
  %2806 = icmp ult i32 %2805, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2803, i8 -1, i64 16, i1 false)
  br i1 %2806, label %2793, label %2807, !llvm.loop !96

2807:                                             ; preds = %2789, %2793, %2761
  %2808 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2809 = getelementptr inbounds %struct.regexp_internal, ptr %2766, i64 1
  %2810 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2750, ptr noundef nonnull %2809)
  %2811 = icmp eq i64 %2810, -1
  br i1 %2811, label %2812, label %2819

2812:                                             ; preds = %2807
  %2813 = load ptr, ptr %2747, align 8, !tbaa !93
  %2814 = icmp eq ptr %2813, null
  %2815 = select i1 %2814, ptr %2750, ptr %2813
  %2816 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2817 = icmp sgt i32 %2816, %2808
  br i1 %2817, label %2818, label %2823

2818:                                             ; preds = %2812
  tail call void @Perl_leave_scope(i32 noundef %2808) #12
  br label %2823

2819:                                             ; preds = %2807
  %2820 = getelementptr inbounds %struct.regexp, ptr %2764, i64 0, i32 17
  %2821 = load ptr, ptr %2820, align 8, !tbaa !38
  %2822 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2821, i64 0, i32 1
  store i64 %2810, ptr %2822, align 8, !tbaa !42
  br label %5550

2823:                                             ; preds = %2818, %2812
  %2824 = icmp eq i32 %2749, 0
  %2825 = zext i1 %2824 to i32
  br label %2826

2826:                                             ; preds = %2748, %2823
  %2827 = phi ptr [ %2815, %2823 ], [ %2750, %2748 ]
  %2828 = phi i32 [ %2825, %2823 ], [ %2749, %2748 ]
  %2829 = getelementptr inbounds i8, ptr %2827, i64 1
  store ptr %2829, ptr %6, align 8, !tbaa !13
  %2830 = icmp ult ptr %2829, %3
  br i1 %2830, label %2748, label %2831, !llvm.loop !184

2831:                                             ; preds = %2826, %2724, %2739, %2611
  %2832 = phi i32 [ %2604, %2611 ], [ %2743, %2739 ], [ %2725, %2724 ], [ %2828, %2826 ]
  %2833 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !34
  %2834 = and i32 %2833, 1
  %2835 = xor i32 %2834, 1
  %2836 = icmp eq i32 %2832, %2835
  br i1 %2836, label %2837, label %5552

2837:                                             ; preds = %2831
  %2838 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2839 = load i8, ptr %2838, align 8, !tbaa !47, !range !97, !noundef !98
  %2840 = icmp eq i8 %2839, 0
  br i1 %2840, label %2841, label %5550

2841:                                             ; preds = %2837
  %2842 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %2843 = icmp eq i32 %2842, 0
  br i1 %2843, label %5552, label %5550

2844:                                             ; preds = %2570
  %2845 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2846 = load ptr, ptr %2845, align 8, !tbaa !53
  %2847 = icmp eq ptr %2846, %2
  br i1 %2847, label %2848, label %2869

2848:                                             ; preds = %2844
  %2849 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2850 = load i8, ptr %2849, align 8, !tbaa !47, !range !97, !noundef !98
  %2851 = icmp eq i8 %2850, 0
  br i1 %2851, label %2852, label %5550

2852:                                             ; preds = %2848
  %2853 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %2854 = icmp eq i32 %2853, 0
  br i1 %2854, label %2855, label %5550

2855:                                             ; preds = %2852
  %2856 = load ptr, ptr %6, align 8, !tbaa !13
  br i1 %25, label %2857, label %2863

2857:                                             ; preds = %2855
  %2858 = load i8, ptr %2856, align 1, !tbaa !6
  %2859 = zext i8 %2858 to i64
  %2860 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2859
  %2861 = load i8, ptr %2860, align 1, !tbaa !6
  %2862 = zext i8 %2861 to i64
  br label %2863

2863:                                             ; preds = %2855, %2857
  %2864 = phi i64 [ %2862, %2857 ], [ 1, %2855 ]
  %2865 = getelementptr inbounds i8, ptr %2856, i64 %2864
  store ptr %2865, ptr %6, align 8, !tbaa !13
  %2866 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2867 = load ptr, ptr %2866, align 8, !tbaa !56
  %2868 = icmp ult ptr %2865, %2867
  br i1 %2868, label %2869, label %5552

2869:                                             ; preds = %2863, %2844
  %2870 = phi ptr [ %2865, %2863 ], [ %2, %2844 ]
  br i1 %25, label %2876, label %2871

2871:                                             ; preds = %2869
  %2872 = icmp ult ptr %2870, %3
  br i1 %2872, label %2873, label %3070

2873:                                             ; preds = %2871
  %2874 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2875 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2989

2876:                                             ; preds = %2869
  %2877 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !13
  %2878 = load ptr, ptr %2845, align 8, !tbaa !53
  %2879 = tail call fastcc ptr @S_reghop3(ptr noundef %2870, i64 noundef -1, ptr noundef %2878)
  %2880 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2881 = load ptr, ptr %2880, align 8, !tbaa !56
  %2882 = load ptr, ptr %2845, align 8, !tbaa !53
  %2883 = tail call fastcc ptr @S_reghop3(ptr noundef %2870, i64 noundef -1, ptr noundef %2882)
  %2884 = ptrtoint ptr %2881 to i64
  %2885 = ptrtoint ptr %2883 to i64
  %2886 = sub i64 %2884, %2885
  %2887 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %2888 = select i1 %2887, i32 0, i32 -8161
  %2889 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2879, i64 noundef %2886, ptr noundef null, i32 noundef %2888) #12
  %2890 = tail call i64 @Perl__invlist_search(ptr noundef %2877, i64 noundef %2889) #12
  %2891 = icmp ult ptr %2870, %3
  br i1 %2891, label %2892, label %3070

2892:                                             ; preds = %2876
  %2893 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %2890
  %2894 = load i32, ptr %2893, align 4, !tbaa !6
  %2895 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2896 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2897

2897:                                             ; preds = %2892, %2980
  %2898 = phi i32 [ %2894, %2892 ], [ %2910, %2980 ]
  %2899 = phi ptr [ %2870, %2892 ], [ %2987, %2980 ]
  %2900 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !13
  %2901 = load ptr, ptr %2880, align 8, !tbaa !56
  %2902 = ptrtoint ptr %2901 to i64
  %2903 = ptrtoint ptr %2899 to i64
  %2904 = sub i64 %2902, %2903
  %2905 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %2906 = select i1 %2905, i32 0, i32 -8161
  %2907 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2899, i64 noundef %2904, ptr noundef null, i32 noundef %2906) #12
  %2908 = tail call i64 @Perl__invlist_search(ptr noundef %2900, i64 noundef %2907) #12
  %2909 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %2908
  %2910 = load i32, ptr %2909, align 4, !tbaa !6
  %2911 = tail call fastcc zeroext i1 @S_isGCB(i32 noundef %2898, i32 noundef %2910)
  %2912 = zext i1 %2911 to i32
  %2913 = icmp eq i32 %2572, %2912
  br i1 %2913, label %2980, label %2914

2914:                                             ; preds = %2897
  %2915 = load i8, ptr %2895, align 8, !tbaa !47, !range !97, !noundef !98
  %2916 = icmp eq i8 %2915, 0
  br i1 %2916, label %2917, label %5550

2917:                                             ; preds = %2914
  %2918 = load ptr, ptr %4, align 8, !tbaa !46
  %2919 = getelementptr i8, ptr %2918, i64 16
  %2920 = load ptr, ptr %2919, align 8, !tbaa !6
  %2921 = getelementptr inbounds %struct.regexp, ptr %2920, i64 0, i32 14
  %2922 = load ptr, ptr %2921, align 8, !tbaa !17
  store ptr null, ptr %2896, align 8, !tbaa !93
  %2923 = load ptr, ptr %2845, align 8, !tbaa !53
  %2924 = ptrtoint ptr %2923 to i64
  %2925 = sub i64 %2903, %2924
  %2926 = getelementptr inbounds %struct.regexp, ptr %2920, i64 0, i32 17
  %2927 = load ptr, ptr %2926, align 8, !tbaa !38
  store i64 %2925, ptr %2927, align 8, !tbaa !39
  %2928 = getelementptr inbounds %struct.regexp, ptr %2920, i64 0, i32 15
  store i32 0, ptr %2928, align 8, !tbaa !37
  %2929 = getelementptr inbounds %struct.regexp, ptr %2920, i64 0, i32 16
  store i32 0, ptr %2929, align 4, !tbaa !36
  %2930 = getelementptr inbounds %struct.regexp, ptr %2920, i64 0, i32 12
  %2931 = load i32, ptr %2930, align 8, !tbaa !92
  %2932 = icmp sgt i32 %2931, 0
  br i1 %2932, label %2933, label %2962

2933:                                             ; preds = %2917
  %2934 = and i32 %2931, 7
  %2935 = icmp eq i32 %2934, 0
  br i1 %2935, label %2944, label %2936

2936:                                             ; preds = %2933, %2936
  %2937 = phi i32 [ %2941, %2936 ], [ %2931, %2933 ]
  %2938 = phi ptr [ %2940, %2936 ], [ %2927, %2933 ]
  %2939 = phi i32 [ %2942, %2936 ], [ 0, %2933 ]
  %2940 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2938, i64 1
  %2941 = add nsw i32 %2937, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2940, i8 -1, i64 16, i1 false)
  %2942 = add i32 %2939, 1
  %2943 = icmp eq i32 %2942, %2934
  br i1 %2943, label %2944, label %2936, !llvm.loop !185

2944:                                             ; preds = %2936, %2933
  %2945 = phi i32 [ %2931, %2933 ], [ %2941, %2936 ]
  %2946 = phi ptr [ %2927, %2933 ], [ %2940, %2936 ]
  %2947 = icmp ult i32 %2931, 8
  br i1 %2947, label %2962, label %2948

2948:                                             ; preds = %2944, %2948
  %2949 = phi i32 [ %2959, %2948 ], [ %2945, %2944 ]
  %2950 = phi ptr [ %2958, %2948 ], [ %2946, %2944 ]
  %2951 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2951, i8 -1, i64 16, i1 false)
  %2952 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2952, i8 -1, i64 16, i1 false)
  %2953 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2953, i8 -1, i64 16, i1 false)
  %2954 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2954, i8 -1, i64 16, i1 false)
  %2955 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2955, i8 -1, i64 16, i1 false)
  %2956 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2956, i8 -1, i64 16, i1 false)
  %2957 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2957, i8 -1, i64 16, i1 false)
  %2958 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2950, i64 8
  %2959 = add nsw i32 %2949, -8
  %2960 = add i32 %2949, -9
  %2961 = icmp ult i32 %2960, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2958, i8 -1, i64 16, i1 false)
  br i1 %2961, label %2948, label %2962, !llvm.loop !96

2962:                                             ; preds = %2944, %2948, %2917
  %2963 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2964 = getelementptr inbounds %struct.regexp_internal, ptr %2922, i64 1
  %2965 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2899, ptr noundef nonnull %2964)
  %2966 = icmp eq i64 %2965, -1
  br i1 %2966, label %2967, label %2976

2967:                                             ; preds = %2962
  %2968 = load ptr, ptr %2896, align 8, !tbaa !93
  %2969 = icmp eq ptr %2968, null
  br i1 %2969, label %2971, label %2970

2970:                                             ; preds = %2967
  store ptr %2968, ptr %6, align 8, !tbaa !13
  br label %2971

2971:                                             ; preds = %2970, %2967
  %2972 = phi ptr [ %2968, %2970 ], [ %2899, %2967 ]
  %2973 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2974 = icmp sgt i32 %2973, %2963
  br i1 %2974, label %2975, label %2980

2975:                                             ; preds = %2971
  tail call void @Perl_leave_scope(i32 noundef %2963) #12
  br label %2980

2976:                                             ; preds = %2962
  %2977 = getelementptr inbounds %struct.regexp, ptr %2920, i64 0, i32 17
  %2978 = load ptr, ptr %2977, align 8, !tbaa !38
  %2979 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2978, i64 0, i32 1
  store i64 %2965, ptr %2979, align 8, !tbaa !42
  br label %5550

2980:                                             ; preds = %2971, %2975, %2897
  %2981 = phi ptr [ %2972, %2971 ], [ %2972, %2975 ], [ %2899, %2897 ]
  %2982 = load i8, ptr %2981, align 1, !tbaa !6
  %2983 = zext i8 %2982 to i64
  %2984 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2983
  %2985 = load i8, ptr %2984, align 1, !tbaa !6
  %2986 = zext i8 %2985 to i64
  %2987 = getelementptr inbounds i8, ptr %2981, i64 %2986
  store ptr %2987, ptr %6, align 8, !tbaa !13
  %2988 = icmp ult ptr %2987, %3
  br i1 %2988, label %2897, label %3070, !llvm.loop !186

2989:                                             ; preds = %2873, %3066
  %2990 = phi ptr [ %2870, %2873 ], [ %3068, %3066 ]
  %2991 = getelementptr inbounds i8, ptr %2990, i64 -1
  %2992 = load i8, ptr %2991, align 1, !tbaa !6
  %2993 = icmp eq i8 %2992, 13
  br i1 %2993, label %2994, label %2997

2994:                                             ; preds = %2989
  %2995 = load i8, ptr %2990, align 1, !tbaa !6
  %2996 = icmp ne i8 %2995, 10
  br label %2997

2997:                                             ; preds = %2994, %2989
  %2998 = phi i1 [ true, %2989 ], [ %2996, %2994 ]
  %2999 = zext i1 %2998 to i32
  %3000 = icmp eq i32 %2572, %2999
  br i1 %3000, label %3066, label %3001

3001:                                             ; preds = %2997
  %3002 = load i8, ptr %2874, align 8, !tbaa !47, !range !97, !noundef !98
  %3003 = icmp eq i8 %3002, 0
  br i1 %3003, label %3004, label %5550

3004:                                             ; preds = %3001
  %3005 = load ptr, ptr %4, align 8, !tbaa !46
  %3006 = getelementptr i8, ptr %3005, i64 16
  %3007 = load ptr, ptr %3006, align 8, !tbaa !6
  %3008 = getelementptr inbounds %struct.regexp, ptr %3007, i64 0, i32 14
  %3009 = load ptr, ptr %3008, align 8, !tbaa !17
  store ptr null, ptr %2875, align 8, !tbaa !93
  %3010 = load ptr, ptr %2845, align 8, !tbaa !53
  %3011 = ptrtoint ptr %2990 to i64
  %3012 = ptrtoint ptr %3010 to i64
  %3013 = sub i64 %3011, %3012
  %3014 = getelementptr inbounds %struct.regexp, ptr %3007, i64 0, i32 17
  %3015 = load ptr, ptr %3014, align 8, !tbaa !38
  store i64 %3013, ptr %3015, align 8, !tbaa !39
  %3016 = getelementptr inbounds %struct.regexp, ptr %3007, i64 0, i32 15
  store i32 0, ptr %3016, align 8, !tbaa !37
  %3017 = getelementptr inbounds %struct.regexp, ptr %3007, i64 0, i32 16
  store i32 0, ptr %3017, align 4, !tbaa !36
  %3018 = getelementptr inbounds %struct.regexp, ptr %3007, i64 0, i32 12
  %3019 = load i32, ptr %3018, align 8, !tbaa !92
  %3020 = icmp sgt i32 %3019, 0
  br i1 %3020, label %3021, label %3050

3021:                                             ; preds = %3004
  %3022 = and i32 %3019, 7
  %3023 = icmp eq i32 %3022, 0
  br i1 %3023, label %3032, label %3024

3024:                                             ; preds = %3021, %3024
  %3025 = phi i32 [ %3029, %3024 ], [ %3019, %3021 ]
  %3026 = phi ptr [ %3028, %3024 ], [ %3015, %3021 ]
  %3027 = phi i32 [ %3030, %3024 ], [ 0, %3021 ]
  %3028 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3026, i64 1
  %3029 = add nsw i32 %3025, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3028, i8 -1, i64 16, i1 false)
  %3030 = add i32 %3027, 1
  %3031 = icmp eq i32 %3030, %3022
  br i1 %3031, label %3032, label %3024, !llvm.loop !187

3032:                                             ; preds = %3024, %3021
  %3033 = phi i32 [ %3019, %3021 ], [ %3029, %3024 ]
  %3034 = phi ptr [ %3015, %3021 ], [ %3028, %3024 ]
  %3035 = icmp ult i32 %3019, 8
  br i1 %3035, label %3050, label %3036

3036:                                             ; preds = %3032, %3036
  %3037 = phi i32 [ %3047, %3036 ], [ %3033, %3032 ]
  %3038 = phi ptr [ %3046, %3036 ], [ %3034, %3032 ]
  %3039 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3039, i8 -1, i64 16, i1 false)
  %3040 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3040, i8 -1, i64 16, i1 false)
  %3041 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3041, i8 -1, i64 16, i1 false)
  %3042 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3042, i8 -1, i64 16, i1 false)
  %3043 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3043, i8 -1, i64 16, i1 false)
  %3044 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3044, i8 -1, i64 16, i1 false)
  %3045 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3045, i8 -1, i64 16, i1 false)
  %3046 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3038, i64 8
  %3047 = add nsw i32 %3037, -8
  %3048 = add i32 %3037, -9
  %3049 = icmp ult i32 %3048, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3046, i8 -1, i64 16, i1 false)
  br i1 %3049, label %3036, label %3050, !llvm.loop !96

3050:                                             ; preds = %3032, %3036, %3004
  %3051 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3052 = getelementptr inbounds %struct.regexp_internal, ptr %3009, i64 1
  %3053 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2990, ptr noundef nonnull %3052)
  %3054 = icmp eq i64 %3053, -1
  br i1 %3054, label %3055, label %3062

3055:                                             ; preds = %3050
  %3056 = load ptr, ptr %2875, align 8, !tbaa !93
  %3057 = icmp eq ptr %3056, null
  %3058 = select i1 %3057, ptr %2990, ptr %3056
  %3059 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3060 = icmp sgt i32 %3059, %3051
  br i1 %3060, label %3061, label %3066

3061:                                             ; preds = %3055
  tail call void @Perl_leave_scope(i32 noundef %3051) #12
  br label %3066

3062:                                             ; preds = %3050
  %3063 = getelementptr inbounds %struct.regexp, ptr %3007, i64 0, i32 17
  %3064 = load ptr, ptr %3063, align 8, !tbaa !38
  %3065 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3064, i64 0, i32 1
  store i64 %3053, ptr %3065, align 8, !tbaa !42
  br label %5550

3066:                                             ; preds = %3055, %3061, %2997
  %3067 = phi ptr [ %3058, %3055 ], [ %3058, %3061 ], [ %2990, %2997 ]
  %3068 = getelementptr inbounds i8, ptr %3067, i64 1
  store ptr %3068, ptr %6, align 8, !tbaa !13
  %3069 = icmp ult ptr %3068, %3
  br i1 %3069, label %2989, label %3070, !llvm.loop !188

3070:                                             ; preds = %3066, %2980, %2871, %2876
  %3071 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3072 = load i8, ptr %3071, align 8, !tbaa !47, !range !97, !noundef !98
  %3073 = icmp eq i8 %3072, 0
  br i1 %3073, label %3074, label %5550

3074:                                             ; preds = %3070
  %3075 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3076 = icmp eq i32 %3075, 0
  br i1 %3076, label %5552, label %5550

3077:                                             ; preds = %2570
  %3078 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %3079 = load ptr, ptr %3078, align 8, !tbaa !53
  %3080 = icmp eq ptr %3079, %2
  br i1 %3080, label %3081, label %3102

3081:                                             ; preds = %3077
  %3082 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3083 = load i8, ptr %3082, align 8, !tbaa !47, !range !97, !noundef !98
  %3084 = icmp eq i8 %3083, 0
  br i1 %3084, label %3085, label %5550

3085:                                             ; preds = %3081
  %3086 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3087 = icmp eq i32 %3086, 0
  br i1 %3087, label %3088, label %5550

3088:                                             ; preds = %3085
  %3089 = load ptr, ptr %6, align 8, !tbaa !13
  br i1 %25, label %3090, label %3096

3090:                                             ; preds = %3088
  %3091 = load i8, ptr %3089, align 1, !tbaa !6
  %3092 = zext i8 %3091 to i64
  %3093 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3092
  %3094 = load i8, ptr %3093, align 1, !tbaa !6
  %3095 = zext i8 %3094 to i64
  br label %3096

3096:                                             ; preds = %3088, %3090
  %3097 = phi i64 [ %3095, %3090 ], [ 1, %3088 ]
  %3098 = getelementptr inbounds i8, ptr %3089, i64 %3097
  store ptr %3098, ptr %6, align 8, !tbaa !13
  %3099 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3100 = load ptr, ptr %3099, align 8, !tbaa !56
  %3101 = icmp ult ptr %3098, %3100
  br i1 %3101, label %3102, label %5552

3102:                                             ; preds = %3096, %3077
  %3103 = phi ptr [ %3098, %3096 ], [ %2, %3077 ]
  %3104 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  br i1 %25, label %3105, label %3219

3105:                                             ; preds = %3102
  %3106 = load ptr, ptr %3078, align 8, !tbaa !53
  %3107 = tail call fastcc ptr @S_reghop3(ptr noundef %3103, i64 noundef -1, ptr noundef %3106)
  %3108 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3109 = load ptr, ptr %3108, align 8, !tbaa !56
  %3110 = load ptr, ptr %3078, align 8, !tbaa !53
  %3111 = tail call fastcc ptr @S_reghop3(ptr noundef %3103, i64 noundef -1, ptr noundef %3110)
  %3112 = ptrtoint ptr %3109 to i64
  %3113 = ptrtoint ptr %3111 to i64
  %3114 = sub i64 %3112, %3113
  %3115 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3116 = select i1 %3115, i32 0, i32 -8161
  %3117 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3107, i64 noundef %3114, ptr noundef null, i32 noundef %3116) #12
  %3118 = tail call i64 @Perl__invlist_search(ptr noundef %3104, i64 noundef %3117) #12
  %3119 = icmp ult ptr %3103, %3
  br i1 %3119, label %3120, label %3256

3120:                                             ; preds = %3105
  %3121 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3118
  %3122 = load i32, ptr %3121, align 4, !tbaa !6
  %3123 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3124 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %3125

3125:                                             ; preds = %3120, %3210
  %3126 = phi i32 [ %3122, %3120 ], [ %3138, %3210 ]
  %3127 = phi ptr [ %3103, %3120 ], [ %3217, %3210 ]
  %3128 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %3129 = load ptr, ptr %3108, align 8, !tbaa !56
  %3130 = ptrtoint ptr %3129 to i64
  %3131 = ptrtoint ptr %3127 to i64
  %3132 = sub i64 %3130, %3131
  %3133 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3134 = select i1 %3133, i32 0, i32 -8161
  %3135 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3127, i64 noundef %3132, ptr noundef null, i32 noundef %3134) #12
  %3136 = tail call i64 @Perl__invlist_search(ptr noundef %3128, i64 noundef %3135) #12
  %3137 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3136
  %3138 = load i32, ptr %3137, align 4, !tbaa !6
  %3139 = load ptr, ptr %3078, align 8, !tbaa !53
  %3140 = load ptr, ptr %3108, align 8, !tbaa !56
  %3141 = tail call fastcc zeroext i1 @S_isSB(i32 noundef %3126, i32 noundef %3138, ptr noundef %3139, ptr noundef %3127, ptr noundef %3140, i1 noundef zeroext true)
  %3142 = zext i1 %3141 to i32
  %3143 = icmp eq i32 %2572, %3142
  br i1 %3143, label %3210, label %3144

3144:                                             ; preds = %3125
  %3145 = load i8, ptr %3123, align 8, !tbaa !47, !range !97, !noundef !98
  %3146 = icmp eq i8 %3145, 0
  br i1 %3146, label %3147, label %5550

3147:                                             ; preds = %3144
  %3148 = load ptr, ptr %4, align 8, !tbaa !46
  %3149 = getelementptr i8, ptr %3148, i64 16
  %3150 = load ptr, ptr %3149, align 8, !tbaa !6
  %3151 = getelementptr inbounds %struct.regexp, ptr %3150, i64 0, i32 14
  %3152 = load ptr, ptr %3151, align 8, !tbaa !17
  store ptr null, ptr %3124, align 8, !tbaa !93
  %3153 = load ptr, ptr %3078, align 8, !tbaa !53
  %3154 = ptrtoint ptr %3153 to i64
  %3155 = sub i64 %3131, %3154
  %3156 = getelementptr inbounds %struct.regexp, ptr %3150, i64 0, i32 17
  %3157 = load ptr, ptr %3156, align 8, !tbaa !38
  store i64 %3155, ptr %3157, align 8, !tbaa !39
  %3158 = getelementptr inbounds %struct.regexp, ptr %3150, i64 0, i32 15
  store i32 0, ptr %3158, align 8, !tbaa !37
  %3159 = getelementptr inbounds %struct.regexp, ptr %3150, i64 0, i32 16
  store i32 0, ptr %3159, align 4, !tbaa !36
  %3160 = getelementptr inbounds %struct.regexp, ptr %3150, i64 0, i32 12
  %3161 = load i32, ptr %3160, align 8, !tbaa !92
  %3162 = icmp sgt i32 %3161, 0
  br i1 %3162, label %3163, label %3192

3163:                                             ; preds = %3147
  %3164 = and i32 %3161, 7
  %3165 = icmp eq i32 %3164, 0
  br i1 %3165, label %3174, label %3166

3166:                                             ; preds = %3163, %3166
  %3167 = phi i32 [ %3171, %3166 ], [ %3161, %3163 ]
  %3168 = phi ptr [ %3170, %3166 ], [ %3157, %3163 ]
  %3169 = phi i32 [ %3172, %3166 ], [ 0, %3163 ]
  %3170 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3168, i64 1
  %3171 = add nsw i32 %3167, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3170, i8 -1, i64 16, i1 false)
  %3172 = add i32 %3169, 1
  %3173 = icmp eq i32 %3172, %3164
  br i1 %3173, label %3174, label %3166, !llvm.loop !189

3174:                                             ; preds = %3166, %3163
  %3175 = phi i32 [ %3161, %3163 ], [ %3171, %3166 ]
  %3176 = phi ptr [ %3157, %3163 ], [ %3170, %3166 ]
  %3177 = icmp ult i32 %3161, 8
  br i1 %3177, label %3192, label %3178

3178:                                             ; preds = %3174, %3178
  %3179 = phi i32 [ %3189, %3178 ], [ %3175, %3174 ]
  %3180 = phi ptr [ %3188, %3178 ], [ %3176, %3174 ]
  %3181 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3181, i8 -1, i64 16, i1 false)
  %3182 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3182, i8 -1, i64 16, i1 false)
  %3183 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3183, i8 -1, i64 16, i1 false)
  %3184 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3184, i8 -1, i64 16, i1 false)
  %3185 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3185, i8 -1, i64 16, i1 false)
  %3186 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3186, i8 -1, i64 16, i1 false)
  %3187 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3187, i8 -1, i64 16, i1 false)
  %3188 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3180, i64 8
  %3189 = add nsw i32 %3179, -8
  %3190 = add i32 %3179, -9
  %3191 = icmp ult i32 %3190, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3188, i8 -1, i64 16, i1 false)
  br i1 %3191, label %3178, label %3192, !llvm.loop !96

3192:                                             ; preds = %3174, %3178, %3147
  %3193 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3194 = getelementptr inbounds %struct.regexp_internal, ptr %3152, i64 1
  %3195 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3127, ptr noundef nonnull %3194)
  %3196 = icmp eq i64 %3195, -1
  br i1 %3196, label %3197, label %3206

3197:                                             ; preds = %3192
  %3198 = load ptr, ptr %3124, align 8, !tbaa !93
  %3199 = icmp eq ptr %3198, null
  br i1 %3199, label %3201, label %3200

3200:                                             ; preds = %3197
  store ptr %3198, ptr %6, align 8, !tbaa !13
  br label %3201

3201:                                             ; preds = %3200, %3197
  %3202 = phi ptr [ %3198, %3200 ], [ %3127, %3197 ]
  %3203 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3204 = icmp sgt i32 %3203, %3193
  br i1 %3204, label %3205, label %3210

3205:                                             ; preds = %3201
  tail call void @Perl_leave_scope(i32 noundef %3193) #12
  br label %3210

3206:                                             ; preds = %3192
  %3207 = getelementptr inbounds %struct.regexp, ptr %3150, i64 0, i32 17
  %3208 = load ptr, ptr %3207, align 8, !tbaa !38
  %3209 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3208, i64 0, i32 1
  store i64 %3195, ptr %3209, align 8, !tbaa !42
  br label %5550

3210:                                             ; preds = %3201, %3205, %3125
  %3211 = phi ptr [ %3202, %3201 ], [ %3202, %3205 ], [ %3127, %3125 ]
  %3212 = load i8, ptr %3211, align 1, !tbaa !6
  %3213 = zext i8 %3212 to i64
  %3214 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3213
  %3215 = load i8, ptr %3214, align 1, !tbaa !6
  %3216 = zext i8 %3215 to i64
  %3217 = getelementptr inbounds i8, ptr %3211, i64 %3216
  store ptr %3217, ptr %6, align 8, !tbaa !13
  %3218 = icmp ult ptr %3217, %3
  br i1 %3218, label %3125, label %3256, !llvm.loop !190

3219:                                             ; preds = %3102
  %3220 = getelementptr inbounds i8, ptr %3103, i64 -1
  %3221 = load i8, ptr %3220, align 1, !tbaa !6
  %3222 = zext i8 %3221 to i64
  %3223 = tail call i64 @Perl__invlist_search(ptr noundef %3104, i64 noundef %3222) #12
  %3224 = icmp ult ptr %3103, %3
  br i1 %3224, label %3225, label %3256

3225:                                             ; preds = %3219
  %3226 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3223
  %3227 = load i32, ptr %3226, align 4, !tbaa !6
  %3228 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3229 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  br label %3230

3230:                                             ; preds = %3225, %3252
  %3231 = phi ptr [ %3103, %3225 ], [ %3254, %3252 ]
  %3232 = phi i32 [ %3227, %3225 ], [ %3238, %3252 ]
  %3233 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %3234 = load i8, ptr %3231, align 1, !tbaa !6
  %3235 = zext i8 %3234 to i64
  %3236 = tail call i64 @Perl__invlist_search(ptr noundef %3233, i64 noundef %3235) #12
  %3237 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3236
  %3238 = load i32, ptr %3237, align 4, !tbaa !6
  %3239 = load ptr, ptr %3078, align 8, !tbaa !53
  %3240 = load ptr, ptr %3228, align 8, !tbaa !56
  %3241 = tail call fastcc zeroext i1 @S_isSB(i32 noundef %3232, i32 noundef %3238, ptr noundef %3239, ptr noundef nonnull %3231, ptr noundef %3240, i1 noundef zeroext false)
  %3242 = zext i1 %3241 to i32
  %3243 = icmp eq i32 %2572, %3242
  br i1 %3243, label %3252, label %3244

3244:                                             ; preds = %3230
  %3245 = load i8, ptr %3229, align 8, !tbaa !47, !range !97, !noundef !98
  %3246 = icmp eq i8 %3245, 0
  br i1 %3246, label %3247, label %5550

3247:                                             ; preds = %3244
  %3248 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3249 = icmp eq i32 %3248, 0
  br i1 %3249, label %3250, label %5550

3250:                                             ; preds = %3247
  %3251 = load ptr, ptr %6, align 8, !tbaa !13
  br label %3252

3252:                                             ; preds = %3250, %3230
  %3253 = phi ptr [ %3251, %3250 ], [ %3231, %3230 ]
  %3254 = getelementptr inbounds i8, ptr %3253, i64 1
  store ptr %3254, ptr %6, align 8, !tbaa !13
  %3255 = icmp ult ptr %3254, %3
  br i1 %3255, label %3230, label %3256, !llvm.loop !191

3256:                                             ; preds = %3252, %3210, %3219, %3105
  %3257 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3258 = load i8, ptr %3257, align 8, !tbaa !47, !range !97, !noundef !98
  %3259 = icmp eq i8 %3258, 0
  br i1 %3259, label %3260, label %5550

3260:                                             ; preds = %3256
  %3261 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3262 = icmp eq i32 %3261, 0
  br i1 %3262, label %5552, label %5550

3263:                                             ; preds = %2570
  %3264 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %3265 = load ptr, ptr %3264, align 8, !tbaa !53
  %3266 = icmp eq ptr %3265, %2
  br i1 %3266, label %3267, label %3288

3267:                                             ; preds = %3263
  %3268 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3269 = load i8, ptr %3268, align 8, !tbaa !47, !range !97, !noundef !98
  %3270 = icmp eq i8 %3269, 0
  br i1 %3270, label %3271, label %5550

3271:                                             ; preds = %3267
  %3272 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3273 = icmp eq i32 %3272, 0
  br i1 %3273, label %3274, label %5550

3274:                                             ; preds = %3271
  %3275 = load ptr, ptr %6, align 8, !tbaa !13
  br i1 %25, label %3276, label %3282

3276:                                             ; preds = %3274
  %3277 = load i8, ptr %3275, align 1, !tbaa !6
  %3278 = zext i8 %3277 to i64
  %3279 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3278
  %3280 = load i8, ptr %3279, align 1, !tbaa !6
  %3281 = zext i8 %3280 to i64
  br label %3282

3282:                                             ; preds = %3274, %3276
  %3283 = phi i64 [ %3281, %3276 ], [ 1, %3274 ]
  %3284 = getelementptr inbounds i8, ptr %3275, i64 %3283
  store ptr %3284, ptr %6, align 8, !tbaa !13
  %3285 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3286 = load ptr, ptr %3285, align 8, !tbaa !56
  %3287 = icmp ult ptr %3284, %3286
  br i1 %3287, label %3288, label %5552

3288:                                             ; preds = %3282, %3263
  %3289 = phi ptr [ %3284, %3282 ], [ %2, %3263 ]
  %3290 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  br i1 %25, label %3291, label %3406

3291:                                             ; preds = %3288
  %3292 = load ptr, ptr %3264, align 8, !tbaa !53
  %3293 = tail call fastcc ptr @S_reghop3(ptr noundef %3289, i64 noundef -1, ptr noundef %3292)
  %3294 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3295 = load ptr, ptr %3294, align 8, !tbaa !56
  %3296 = load ptr, ptr %3264, align 8, !tbaa !53
  %3297 = tail call fastcc ptr @S_reghop3(ptr noundef %3289, i64 noundef -1, ptr noundef %3296)
  %3298 = ptrtoint ptr %3295 to i64
  %3299 = ptrtoint ptr %3297 to i64
  %3300 = sub i64 %3298, %3299
  %3301 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3302 = select i1 %3301, i32 0, i32 -8161
  %3303 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3293, i64 noundef %3300, ptr noundef null, i32 noundef %3302) #12
  %3304 = tail call i64 @Perl__invlist_search(ptr noundef %3290, i64 noundef %3303) #12
  %3305 = icmp ult ptr %3289, %3
  br i1 %3305, label %3306, label %3444

3306:                                             ; preds = %3291
  %3307 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3304
  %3308 = load i32, ptr %3307, align 4, !tbaa !6
  %3309 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3310 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %3311

3311:                                             ; preds = %3306, %3397
  %3312 = phi i32 [ 18, %3306 ], [ %3313, %3397 ]
  %3313 = phi i32 [ %3308, %3306 ], [ %3325, %3397 ]
  %3314 = phi ptr [ %3289, %3306 ], [ %3404, %3397 ]
  %3315 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %3316 = load ptr, ptr %3294, align 8, !tbaa !56
  %3317 = ptrtoint ptr %3316 to i64
  %3318 = ptrtoint ptr %3314 to i64
  %3319 = sub i64 %3317, %3318
  %3320 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3321 = select i1 %3320, i32 0, i32 -8161
  %3322 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3314, i64 noundef %3319, ptr noundef null, i32 noundef %3321) #12
  %3323 = tail call i64 @Perl__invlist_search(ptr noundef %3315, i64 noundef %3322) #12
  %3324 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3323
  %3325 = load i32, ptr %3324, align 4, !tbaa !6
  %3326 = load ptr, ptr %3264, align 8, !tbaa !53
  %3327 = load ptr, ptr %3294, align 8, !tbaa !56
  %3328 = tail call fastcc zeroext i1 @S_isWB(i32 noundef %3312, i32 noundef %3313, i32 noundef %3325, ptr noundef %3326, ptr noundef %3314, ptr noundef %3327, i1 noundef zeroext true)
  %3329 = zext i1 %3328 to i32
  %3330 = icmp eq i32 %2572, %3329
  br i1 %3330, label %3397, label %3331

3331:                                             ; preds = %3311
  %3332 = load i8, ptr %3309, align 8, !tbaa !47, !range !97, !noundef !98
  %3333 = icmp eq i8 %3332, 0
  br i1 %3333, label %3334, label %5550

3334:                                             ; preds = %3331
  %3335 = load ptr, ptr %4, align 8, !tbaa !46
  %3336 = getelementptr i8, ptr %3335, i64 16
  %3337 = load ptr, ptr %3336, align 8, !tbaa !6
  %3338 = getelementptr inbounds %struct.regexp, ptr %3337, i64 0, i32 14
  %3339 = load ptr, ptr %3338, align 8, !tbaa !17
  store ptr null, ptr %3310, align 8, !tbaa !93
  %3340 = load ptr, ptr %3264, align 8, !tbaa !53
  %3341 = ptrtoint ptr %3340 to i64
  %3342 = sub i64 %3318, %3341
  %3343 = getelementptr inbounds %struct.regexp, ptr %3337, i64 0, i32 17
  %3344 = load ptr, ptr %3343, align 8, !tbaa !38
  store i64 %3342, ptr %3344, align 8, !tbaa !39
  %3345 = getelementptr inbounds %struct.regexp, ptr %3337, i64 0, i32 15
  store i32 0, ptr %3345, align 8, !tbaa !37
  %3346 = getelementptr inbounds %struct.regexp, ptr %3337, i64 0, i32 16
  store i32 0, ptr %3346, align 4, !tbaa !36
  %3347 = getelementptr inbounds %struct.regexp, ptr %3337, i64 0, i32 12
  %3348 = load i32, ptr %3347, align 8, !tbaa !92
  %3349 = icmp sgt i32 %3348, 0
  br i1 %3349, label %3350, label %3379

3350:                                             ; preds = %3334
  %3351 = and i32 %3348, 7
  %3352 = icmp eq i32 %3351, 0
  br i1 %3352, label %3361, label %3353

3353:                                             ; preds = %3350, %3353
  %3354 = phi i32 [ %3358, %3353 ], [ %3348, %3350 ]
  %3355 = phi ptr [ %3357, %3353 ], [ %3344, %3350 ]
  %3356 = phi i32 [ %3359, %3353 ], [ 0, %3350 ]
  %3357 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3355, i64 1
  %3358 = add nsw i32 %3354, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3357, i8 -1, i64 16, i1 false)
  %3359 = add i32 %3356, 1
  %3360 = icmp eq i32 %3359, %3351
  br i1 %3360, label %3361, label %3353, !llvm.loop !192

3361:                                             ; preds = %3353, %3350
  %3362 = phi i32 [ %3348, %3350 ], [ %3358, %3353 ]
  %3363 = phi ptr [ %3344, %3350 ], [ %3357, %3353 ]
  %3364 = icmp ult i32 %3348, 8
  br i1 %3364, label %3379, label %3365

3365:                                             ; preds = %3361, %3365
  %3366 = phi i32 [ %3376, %3365 ], [ %3362, %3361 ]
  %3367 = phi ptr [ %3375, %3365 ], [ %3363, %3361 ]
  %3368 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3368, i8 -1, i64 16, i1 false)
  %3369 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3369, i8 -1, i64 16, i1 false)
  %3370 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3370, i8 -1, i64 16, i1 false)
  %3371 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3371, i8 -1, i64 16, i1 false)
  %3372 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3372, i8 -1, i64 16, i1 false)
  %3373 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3373, i8 -1, i64 16, i1 false)
  %3374 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3374, i8 -1, i64 16, i1 false)
  %3375 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3367, i64 8
  %3376 = add nsw i32 %3366, -8
  %3377 = add i32 %3366, -9
  %3378 = icmp ult i32 %3377, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3375, i8 -1, i64 16, i1 false)
  br i1 %3378, label %3365, label %3379, !llvm.loop !96

3379:                                             ; preds = %3361, %3365, %3334
  %3380 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3381 = getelementptr inbounds %struct.regexp_internal, ptr %3339, i64 1
  %3382 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3314, ptr noundef nonnull %3381)
  %3383 = icmp eq i64 %3382, -1
  br i1 %3383, label %3384, label %3393

3384:                                             ; preds = %3379
  %3385 = load ptr, ptr %3310, align 8, !tbaa !93
  %3386 = icmp eq ptr %3385, null
  br i1 %3386, label %3388, label %3387

3387:                                             ; preds = %3384
  store ptr %3385, ptr %6, align 8, !tbaa !13
  br label %3388

3388:                                             ; preds = %3387, %3384
  %3389 = phi ptr [ %3385, %3387 ], [ %3314, %3384 ]
  %3390 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3391 = icmp sgt i32 %3390, %3380
  br i1 %3391, label %3392, label %3397

3392:                                             ; preds = %3388
  tail call void @Perl_leave_scope(i32 noundef %3380) #12
  br label %3397

3393:                                             ; preds = %3379
  %3394 = getelementptr inbounds %struct.regexp, ptr %3337, i64 0, i32 17
  %3395 = load ptr, ptr %3394, align 8, !tbaa !38
  %3396 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3395, i64 0, i32 1
  store i64 %3382, ptr %3396, align 8, !tbaa !42
  br label %5550

3397:                                             ; preds = %3388, %3392, %3311
  %3398 = phi ptr [ %3389, %3388 ], [ %3389, %3392 ], [ %3314, %3311 ]
  %3399 = load i8, ptr %3398, align 1, !tbaa !6
  %3400 = zext i8 %3399 to i64
  %3401 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3400
  %3402 = load i8, ptr %3401, align 1, !tbaa !6
  %3403 = zext i8 %3402 to i64
  %3404 = getelementptr inbounds i8, ptr %3398, i64 %3403
  store ptr %3404, ptr %6, align 8, !tbaa !13
  %3405 = icmp ult ptr %3404, %3
  br i1 %3405, label %3311, label %3444, !llvm.loop !193

3406:                                             ; preds = %3288
  %3407 = getelementptr inbounds i8, ptr %3289, i64 -1
  %3408 = load i8, ptr %3407, align 1, !tbaa !6
  %3409 = zext i8 %3408 to i64
  %3410 = tail call i64 @Perl__invlist_search(ptr noundef %3290, i64 noundef %3409) #12
  %3411 = icmp ult ptr %3289, %3
  br i1 %3411, label %3412, label %3444

3412:                                             ; preds = %3406
  %3413 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3410
  %3414 = load i32, ptr %3413, align 4, !tbaa !6
  %3415 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3416 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  br label %3417

3417:                                             ; preds = %3412, %3440
  %3418 = phi ptr [ %3289, %3412 ], [ %3442, %3440 ]
  %3419 = phi i32 [ %3414, %3412 ], [ %3426, %3440 ]
  %3420 = phi i32 [ 18, %3412 ], [ %3419, %3440 ]
  %3421 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %3422 = load i8, ptr %3418, align 1, !tbaa !6
  %3423 = zext i8 %3422 to i64
  %3424 = tail call i64 @Perl__invlist_search(ptr noundef %3421, i64 noundef %3423) #12
  %3425 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3424
  %3426 = load i32, ptr %3425, align 4, !tbaa !6
  %3427 = load ptr, ptr %3264, align 8, !tbaa !53
  %3428 = load ptr, ptr %3415, align 8, !tbaa !56
  %3429 = tail call fastcc zeroext i1 @S_isWB(i32 noundef %3420, i32 noundef %3419, i32 noundef %3426, ptr noundef %3427, ptr noundef nonnull %3418, ptr noundef %3428, i1 noundef zeroext false)
  %3430 = zext i1 %3429 to i32
  %3431 = icmp eq i32 %2572, %3430
  br i1 %3431, label %3440, label %3432

3432:                                             ; preds = %3417
  %3433 = load i8, ptr %3416, align 8, !tbaa !47, !range !97, !noundef !98
  %3434 = icmp eq i8 %3433, 0
  br i1 %3434, label %3435, label %5550

3435:                                             ; preds = %3432
  %3436 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3437 = icmp eq i32 %3436, 0
  br i1 %3437, label %3438, label %5550

3438:                                             ; preds = %3435
  %3439 = load ptr, ptr %6, align 8, !tbaa !13
  br label %3440

3440:                                             ; preds = %3438, %3417
  %3441 = phi ptr [ %3439, %3438 ], [ %3418, %3417 ]
  %3442 = getelementptr inbounds i8, ptr %3441, i64 1
  store ptr %3442, ptr %6, align 8, !tbaa !13
  %3443 = icmp ult ptr %3442, %3
  br i1 %3443, label %3417, label %3444, !llvm.loop !194

3444:                                             ; preds = %3440, %3397, %3406, %3291
  %3445 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3446 = load i8, ptr %3445, align 8, !tbaa !47, !range !97, !noundef !98
  %3447 = icmp eq i8 %3446, 0
  br i1 %3447, label %3448, label %5550

3448:                                             ; preds = %3444
  %3449 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !5
  %3450 = icmp eq i32 %3449, 0
  br i1 %3450, label %5552, label %5550

3451:                                             ; preds = %5
  %3452 = icmp ult ptr %2, %3
  br i1 %25, label %3459, label %3453

3453:                                             ; preds = %3451
  br i1 %3452, label %3454, label %5552

3454:                                             ; preds = %3453
  %3455 = ptrtoint ptr %3 to i64
  %3456 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3457 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3458 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3584

3459:                                             ; preds = %3451
  br i1 %3452, label %3460, label %5552

3460:                                             ; preds = %3459
  %3461 = ptrtoint ptr %3 to i64
  %3462 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3463 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3464 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3465

3465:                                             ; preds = %3460, %3574
  %3466 = phi i32 [ 1, %3460 ], [ %3576, %3574 ]
  %3467 = phi ptr [ %2, %3460 ], [ %3582, %3574 ]
  %3468 = ptrtoint ptr %3467 to i64
  %3469 = sub i64 %3461, %3468
  %3470 = icmp sgt i64 %3469, 2
  br i1 %3470, label %3471, label %3489

3471:                                             ; preds = %3465
  %3472 = load i8, ptr %3467, align 1, !tbaa !6
  %3473 = add i8 %3472, -10
  %3474 = icmp ult i8 %3473, 3
  br i1 %3474, label %3506, label %3475

3475:                                             ; preds = %3471
  switch i8 %3472, label %3574 [
    i8 13, label %3506
    i8 -62, label %3476
    i8 -30, label %3480
  ]

3476:                                             ; preds = %3475
  %3477 = getelementptr inbounds i8, ptr %3467, i64 1
  %3478 = load i8, ptr %3477, align 1, !tbaa !6
  %3479 = icmp eq i8 %3478, -123
  br i1 %3479, label %3506, label %3574

3480:                                             ; preds = %3475
  %3481 = getelementptr inbounds i8, ptr %3467, i64 1
  %3482 = load i8, ptr %3481, align 1, !tbaa !6
  %3483 = icmp eq i8 %3482, -128
  br i1 %3483, label %3484, label %3574

3484:                                             ; preds = %3480
  %3485 = getelementptr inbounds i8, ptr %3467, i64 2
  %3486 = load i8, ptr %3485, align 1, !tbaa !6
  %3487 = and i8 %3486, -2
  %3488 = icmp eq i8 %3487, -88
  br i1 %3488, label %3506, label %3574

3489:                                             ; preds = %3465
  %3490 = icmp eq i64 %3469, 2
  br i1 %3490, label %3491, label %3500

3491:                                             ; preds = %3489
  %3492 = load i8, ptr %3467, align 1, !tbaa !6
  %3493 = add i8 %3492, -10
  %3494 = icmp ult i8 %3493, 3
  br i1 %3494, label %3506, label %3495

3495:                                             ; preds = %3491
  switch i8 %3492, label %3574 [
    i8 13, label %3506
    i8 -62, label %3496
  ]

3496:                                             ; preds = %3495
  %3497 = getelementptr inbounds i8, ptr %3467, i64 1
  %3498 = load i8, ptr %3497, align 1, !tbaa !6
  %3499 = icmp eq i8 %3498, -123
  br i1 %3499, label %3506, label %3574

3500:                                             ; preds = %3489
  %3501 = icmp sgt i64 %3469, 0
  br i1 %3501, label %3502, label %3574

3502:                                             ; preds = %3500
  %3503 = load i8, ptr %3467, align 1, !tbaa !6
  %3504 = add i8 %3503, -10
  %3505 = icmp ult i8 %3504, 4
  br i1 %3505, label %3506, label %3574

3506:                                             ; preds = %3502, %3495, %3491, %3475, %3471, %3496, %3484, %3476
  %3507 = icmp eq i32 %3466, 0
  br i1 %3507, label %3574, label %3508

3508:                                             ; preds = %3506
  %3509 = load i8, ptr %3462, align 8, !tbaa !47, !range !97, !noundef !98
  %3510 = icmp eq i8 %3509, 0
  br i1 %3510, label %3511, label %5550

3511:                                             ; preds = %3508
  %3512 = load ptr, ptr %4, align 8, !tbaa !46
  %3513 = getelementptr i8, ptr %3512, i64 16
  %3514 = load ptr, ptr %3513, align 8, !tbaa !6
  %3515 = getelementptr inbounds %struct.regexp, ptr %3514, i64 0, i32 14
  %3516 = load ptr, ptr %3515, align 8, !tbaa !17
  store ptr null, ptr %3463, align 8, !tbaa !93
  %3517 = load ptr, ptr %3464, align 8, !tbaa !53
  %3518 = ptrtoint ptr %3517 to i64
  %3519 = sub i64 %3468, %3518
  %3520 = getelementptr inbounds %struct.regexp, ptr %3514, i64 0, i32 17
  %3521 = load ptr, ptr %3520, align 8, !tbaa !38
  store i64 %3519, ptr %3521, align 8, !tbaa !39
  %3522 = getelementptr inbounds %struct.regexp, ptr %3514, i64 0, i32 15
  store i32 0, ptr %3522, align 8, !tbaa !37
  %3523 = getelementptr inbounds %struct.regexp, ptr %3514, i64 0, i32 16
  store i32 0, ptr %3523, align 4, !tbaa !36
  %3524 = getelementptr inbounds %struct.regexp, ptr %3514, i64 0, i32 12
  %3525 = load i32, ptr %3524, align 8, !tbaa !92
  %3526 = icmp sgt i32 %3525, 0
  br i1 %3526, label %3527, label %3556

3527:                                             ; preds = %3511
  %3528 = and i32 %3525, 7
  %3529 = icmp eq i32 %3528, 0
  br i1 %3529, label %3538, label %3530

3530:                                             ; preds = %3527, %3530
  %3531 = phi i32 [ %3535, %3530 ], [ %3525, %3527 ]
  %3532 = phi ptr [ %3534, %3530 ], [ %3521, %3527 ]
  %3533 = phi i32 [ %3536, %3530 ], [ 0, %3527 ]
  %3534 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3532, i64 1
  %3535 = add nsw i32 %3531, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3534, i8 -1, i64 16, i1 false)
  %3536 = add i32 %3533, 1
  %3537 = icmp eq i32 %3536, %3528
  br i1 %3537, label %3538, label %3530, !llvm.loop !195

3538:                                             ; preds = %3530, %3527
  %3539 = phi i32 [ %3525, %3527 ], [ %3535, %3530 ]
  %3540 = phi ptr [ %3521, %3527 ], [ %3534, %3530 ]
  %3541 = icmp ult i32 %3525, 8
  br i1 %3541, label %3556, label %3542

3542:                                             ; preds = %3538, %3542
  %3543 = phi i32 [ %3553, %3542 ], [ %3539, %3538 ]
  %3544 = phi ptr [ %3552, %3542 ], [ %3540, %3538 ]
  %3545 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3545, i8 -1, i64 16, i1 false)
  %3546 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3546, i8 -1, i64 16, i1 false)
  %3547 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3547, i8 -1, i64 16, i1 false)
  %3548 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3548, i8 -1, i64 16, i1 false)
  %3549 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3549, i8 -1, i64 16, i1 false)
  %3550 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3550, i8 -1, i64 16, i1 false)
  %3551 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3551, i8 -1, i64 16, i1 false)
  %3552 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3544, i64 8
  %3553 = add nsw i32 %3543, -8
  %3554 = add i32 %3543, -9
  %3555 = icmp ult i32 %3554, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3552, i8 -1, i64 16, i1 false)
  br i1 %3555, label %3542, label %3556, !llvm.loop !96

3556:                                             ; preds = %3538, %3542, %3511
  %3557 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3558 = getelementptr inbounds %struct.regexp_internal, ptr %3516, i64 1
  %3559 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3467, ptr noundef nonnull %3558)
  %3560 = icmp eq i64 %3559, -1
  br i1 %3560, label %3561, label %3570

3561:                                             ; preds = %3556
  %3562 = load ptr, ptr %3463, align 8, !tbaa !93
  %3563 = icmp eq ptr %3562, null
  br i1 %3563, label %3565, label %3564

3564:                                             ; preds = %3561
  store ptr %3562, ptr %6, align 8, !tbaa !13
  br label %3565

3565:                                             ; preds = %3564, %3561
  %3566 = phi ptr [ %3562, %3564 ], [ %3467, %3561 ]
  %3567 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3568 = icmp sgt i32 %3567, %3557
  br i1 %3568, label %3569, label %3574

3569:                                             ; preds = %3565
  tail call void @Perl_leave_scope(i32 noundef %3557) #12
  br label %3574

3570:                                             ; preds = %3556
  %3571 = getelementptr inbounds %struct.regexp, ptr %3514, i64 0, i32 17
  %3572 = load ptr, ptr %3571, align 8, !tbaa !38
  %3573 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3572, i64 0, i32 1
  store i64 %3559, ptr %3573, align 8, !tbaa !42
  br label %5550

3574:                                             ; preds = %3565, %3569, %3502, %3476, %3484, %3480, %3496, %3500, %3475, %3495, %3506
  %3575 = phi ptr [ %3467, %3506 ], [ %3467, %3495 ], [ %3467, %3475 ], [ %3467, %3500 ], [ %3467, %3496 ], [ %3467, %3480 ], [ %3467, %3484 ], [ %3467, %3476 ], [ %3467, %3502 ], [ %3566, %3569 ], [ %3566, %3565 ]
  %3576 = phi i32 [ %22, %3506 ], [ 1, %3495 ], [ 1, %3475 ], [ 1, %3500 ], [ 1, %3496 ], [ 1, %3480 ], [ 1, %3484 ], [ 1, %3476 ], [ 1, %3502 ], [ %22, %3569 ], [ %22, %3565 ]
  %3577 = load i8, ptr %3575, align 1, !tbaa !6
  %3578 = zext i8 %3577 to i64
  %3579 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3578
  %3580 = load i8, ptr %3579, align 1, !tbaa !6
  %3581 = zext i8 %3580 to i64
  %3582 = getelementptr inbounds i8, ptr %3575, i64 %3581
  store ptr %3582, ptr %6, align 8, !tbaa !13
  %3583 = icmp ult ptr %3582, %3
  br i1 %3583, label %3465, label %5552, !llvm.loop !196

3584:                                             ; preds = %3454, %3665
  %3585 = phi i32 [ 1, %3454 ], [ %3667, %3665 ]
  %3586 = phi ptr [ %2, %3454 ], [ %3668, %3665 ]
  %3587 = ptrtoint ptr %3586 to i64
  %3588 = sub i64 %3455, %3587
  %3589 = icmp sgt i64 %3588, 1
  br i1 %3589, label %3590, label %3595

3590:                                             ; preds = %3584
  %3591 = load i8, ptr %3586, align 1, !tbaa !6
  %3592 = add i8 %3591, -10
  %3593 = icmp ult i8 %3592, 3
  br i1 %3593, label %3599, label %3594

3594:                                             ; preds = %3590
  switch i8 %3591, label %3665 [
    i8 -123, label %3599
    i8 13, label %3599
  ]

3595:                                             ; preds = %3584
  %3596 = icmp eq i64 %3588, 1
  br i1 %3596, label %3597, label %3665

3597:                                             ; preds = %3595
  %3598 = load i8, ptr %3586, align 1, !tbaa !6
  switch i8 %3598, label %3665 [
    i8 -123, label %3599
    i8 13, label %3599
    i8 12, label %3599
    i8 11, label %3599
    i8 10, label %3599
  ]

3599:                                             ; preds = %3597, %3597, %3597, %3597, %3597, %3594, %3594, %3590
  %3600 = icmp eq i32 %3585, 0
  br i1 %3600, label %3665, label %3601

3601:                                             ; preds = %3599
  %3602 = load i8, ptr %3456, align 8, !tbaa !47, !range !97, !noundef !98
  %3603 = icmp eq i8 %3602, 0
  br i1 %3603, label %3604, label %5550

3604:                                             ; preds = %3601
  %3605 = load ptr, ptr %4, align 8, !tbaa !46
  %3606 = getelementptr i8, ptr %3605, i64 16
  %3607 = load ptr, ptr %3606, align 8, !tbaa !6
  %3608 = getelementptr inbounds %struct.regexp, ptr %3607, i64 0, i32 14
  %3609 = load ptr, ptr %3608, align 8, !tbaa !17
  store ptr null, ptr %3457, align 8, !tbaa !93
  %3610 = load ptr, ptr %3458, align 8, !tbaa !53
  %3611 = ptrtoint ptr %3610 to i64
  %3612 = sub i64 %3587, %3611
  %3613 = getelementptr inbounds %struct.regexp, ptr %3607, i64 0, i32 17
  %3614 = load ptr, ptr %3613, align 8, !tbaa !38
  store i64 %3612, ptr %3614, align 8, !tbaa !39
  %3615 = getelementptr inbounds %struct.regexp, ptr %3607, i64 0, i32 15
  store i32 0, ptr %3615, align 8, !tbaa !37
  %3616 = getelementptr inbounds %struct.regexp, ptr %3607, i64 0, i32 16
  store i32 0, ptr %3616, align 4, !tbaa !36
  %3617 = getelementptr inbounds %struct.regexp, ptr %3607, i64 0, i32 12
  %3618 = load i32, ptr %3617, align 8, !tbaa !92
  %3619 = icmp sgt i32 %3618, 0
  br i1 %3619, label %3620, label %3649

3620:                                             ; preds = %3604
  %3621 = and i32 %3618, 7
  %3622 = icmp eq i32 %3621, 0
  br i1 %3622, label %3631, label %3623

3623:                                             ; preds = %3620, %3623
  %3624 = phi i32 [ %3628, %3623 ], [ %3618, %3620 ]
  %3625 = phi ptr [ %3627, %3623 ], [ %3614, %3620 ]
  %3626 = phi i32 [ %3629, %3623 ], [ 0, %3620 ]
  %3627 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3625, i64 1
  %3628 = add nsw i32 %3624, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3627, i8 -1, i64 16, i1 false)
  %3629 = add i32 %3626, 1
  %3630 = icmp eq i32 %3629, %3621
  br i1 %3630, label %3631, label %3623, !llvm.loop !197

3631:                                             ; preds = %3623, %3620
  %3632 = phi i32 [ %3618, %3620 ], [ %3628, %3623 ]
  %3633 = phi ptr [ %3614, %3620 ], [ %3627, %3623 ]
  %3634 = icmp ult i32 %3618, 8
  br i1 %3634, label %3649, label %3635

3635:                                             ; preds = %3631, %3635
  %3636 = phi i32 [ %3646, %3635 ], [ %3632, %3631 ]
  %3637 = phi ptr [ %3645, %3635 ], [ %3633, %3631 ]
  %3638 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3638, i8 -1, i64 16, i1 false)
  %3639 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3639, i8 -1, i64 16, i1 false)
  %3640 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3640, i8 -1, i64 16, i1 false)
  %3641 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3641, i8 -1, i64 16, i1 false)
  %3642 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3642, i8 -1, i64 16, i1 false)
  %3643 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3643, i8 -1, i64 16, i1 false)
  %3644 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3644, i8 -1, i64 16, i1 false)
  %3645 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3637, i64 8
  %3646 = add nsw i32 %3636, -8
  %3647 = add i32 %3636, -9
  %3648 = icmp ult i32 %3647, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3645, i8 -1, i64 16, i1 false)
  br i1 %3648, label %3635, label %3649, !llvm.loop !96

3649:                                             ; preds = %3631, %3635, %3604
  %3650 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3651 = getelementptr inbounds %struct.regexp_internal, ptr %3609, i64 1
  %3652 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3586, ptr noundef nonnull %3651)
  %3653 = icmp eq i64 %3652, -1
  br i1 %3653, label %3654, label %3661

3654:                                             ; preds = %3649
  %3655 = load ptr, ptr %3457, align 8, !tbaa !93
  %3656 = icmp eq ptr %3655, null
  %3657 = select i1 %3656, ptr %3586, ptr %3655
  %3658 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3659 = icmp sgt i32 %3658, %3650
  br i1 %3659, label %3660, label %3665

3660:                                             ; preds = %3654
  tail call void @Perl_leave_scope(i32 noundef %3650) #12
  br label %3665

3661:                                             ; preds = %3649
  %3662 = getelementptr inbounds %struct.regexp, ptr %3607, i64 0, i32 17
  %3663 = load ptr, ptr %3662, align 8, !tbaa !38
  %3664 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3663, i64 0, i32 1
  store i64 %3652, ptr %3664, align 8, !tbaa !42
  br label %5550

3665:                                             ; preds = %3597, %3654, %3660, %3595, %3594, %3599
  %3666 = phi ptr [ %3586, %3599 ], [ %3586, %3594 ], [ %3586, %3595 ], [ %3657, %3660 ], [ %3657, %3654 ], [ %3586, %3597 ]
  %3667 = phi i32 [ %22, %3599 ], [ 1, %3594 ], [ 1, %3595 ], [ %22, %3660 ], [ %22, %3654 ], [ 1, %3597 ]
  %3668 = getelementptr inbounds i8, ptr %3666, i64 1
  store ptr %3668, ptr %6, align 8, !tbaa !13
  %3669 = icmp ult ptr %3668, %3
  br i1 %3669, label %3584, label %5552, !llvm.loop !198

3670:                                             ; preds = %5
  br label %3671

3671:                                             ; preds = %5, %3670
  %3672 = phi i32 [ 0, %5 ], [ 1, %3670 ]
  %3673 = icmp ult ptr %2, %3
  br i1 %25, label %3679, label %3674

3674:                                             ; preds = %3671
  br i1 %3673, label %3675, label %5552

3675:                                             ; preds = %3674
  %3676 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3677 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3678 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3770

3679:                                             ; preds = %3671
  br i1 %3673, label %3680, label %5552

3680:                                             ; preds = %3679
  %3681 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3682 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3683 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3684

3684:                                             ; preds = %3680, %3760
  %3685 = phi i32 [ 1, %3680 ], [ %3762, %3760 ]
  %3686 = phi ptr [ %2, %3680 ], [ %3768, %3760 ]
  %3687 = load i8, ptr %1, align 2, !tbaa !139
  %3688 = tail call fastcc zeroext i1 @S_isFOO_utf8_lc(i8 noundef zeroext %3687, ptr noundef %3686)
  %3689 = zext i1 %3688 to i32
  %3690 = icmp eq i32 %3672, %3689
  br i1 %3690, label %3760, label %3691

3691:                                             ; preds = %3684
  %3692 = icmp eq i32 %3685, 0
  br i1 %3692, label %3760, label %3693

3693:                                             ; preds = %3691
  %3694 = load i8, ptr %3681, align 8, !tbaa !47, !range !97, !noundef !98
  %3695 = icmp eq i8 %3694, 0
  br i1 %3695, label %3696, label %5550

3696:                                             ; preds = %3693
  %3697 = load ptr, ptr %4, align 8, !tbaa !46
  %3698 = getelementptr i8, ptr %3697, i64 16
  %3699 = load ptr, ptr %3698, align 8, !tbaa !6
  %3700 = getelementptr inbounds %struct.regexp, ptr %3699, i64 0, i32 14
  %3701 = load ptr, ptr %3700, align 8, !tbaa !17
  store ptr null, ptr %3682, align 8, !tbaa !93
  %3702 = load ptr, ptr %3683, align 8, !tbaa !53
  %3703 = ptrtoint ptr %3686 to i64
  %3704 = ptrtoint ptr %3702 to i64
  %3705 = sub i64 %3703, %3704
  %3706 = getelementptr inbounds %struct.regexp, ptr %3699, i64 0, i32 17
  %3707 = load ptr, ptr %3706, align 8, !tbaa !38
  store i64 %3705, ptr %3707, align 8, !tbaa !39
  %3708 = getelementptr inbounds %struct.regexp, ptr %3699, i64 0, i32 15
  store i32 0, ptr %3708, align 8, !tbaa !37
  %3709 = getelementptr inbounds %struct.regexp, ptr %3699, i64 0, i32 16
  store i32 0, ptr %3709, align 4, !tbaa !36
  %3710 = getelementptr inbounds %struct.regexp, ptr %3699, i64 0, i32 12
  %3711 = load i32, ptr %3710, align 8, !tbaa !92
  %3712 = icmp sgt i32 %3711, 0
  br i1 %3712, label %3713, label %3742

3713:                                             ; preds = %3696
  %3714 = and i32 %3711, 7
  %3715 = icmp eq i32 %3714, 0
  br i1 %3715, label %3724, label %3716

3716:                                             ; preds = %3713, %3716
  %3717 = phi i32 [ %3721, %3716 ], [ %3711, %3713 ]
  %3718 = phi ptr [ %3720, %3716 ], [ %3707, %3713 ]
  %3719 = phi i32 [ %3722, %3716 ], [ 0, %3713 ]
  %3720 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3718, i64 1
  %3721 = add nsw i32 %3717, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3720, i8 -1, i64 16, i1 false)
  %3722 = add i32 %3719, 1
  %3723 = icmp eq i32 %3722, %3714
  br i1 %3723, label %3724, label %3716, !llvm.loop !199

3724:                                             ; preds = %3716, %3713
  %3725 = phi i32 [ %3711, %3713 ], [ %3721, %3716 ]
  %3726 = phi ptr [ %3707, %3713 ], [ %3720, %3716 ]
  %3727 = icmp ult i32 %3711, 8
  br i1 %3727, label %3742, label %3728

3728:                                             ; preds = %3724, %3728
  %3729 = phi i32 [ %3739, %3728 ], [ %3725, %3724 ]
  %3730 = phi ptr [ %3738, %3728 ], [ %3726, %3724 ]
  %3731 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3731, i8 -1, i64 16, i1 false)
  %3732 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3732, i8 -1, i64 16, i1 false)
  %3733 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3733, i8 -1, i64 16, i1 false)
  %3734 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3734, i8 -1, i64 16, i1 false)
  %3735 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3735, i8 -1, i64 16, i1 false)
  %3736 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3736, i8 -1, i64 16, i1 false)
  %3737 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3737, i8 -1, i64 16, i1 false)
  %3738 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3730, i64 8
  %3739 = add nsw i32 %3729, -8
  %3740 = add i32 %3729, -9
  %3741 = icmp ult i32 %3740, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3738, i8 -1, i64 16, i1 false)
  br i1 %3741, label %3728, label %3742, !llvm.loop !96

3742:                                             ; preds = %3724, %3728, %3696
  %3743 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3744 = getelementptr inbounds %struct.regexp_internal, ptr %3701, i64 1
  %3745 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3686, ptr noundef nonnull %3744)
  %3746 = icmp eq i64 %3745, -1
  br i1 %3746, label %3747, label %3756

3747:                                             ; preds = %3742
  %3748 = load ptr, ptr %3682, align 8, !tbaa !93
  %3749 = icmp eq ptr %3748, null
  br i1 %3749, label %3751, label %3750

3750:                                             ; preds = %3747
  store ptr %3748, ptr %6, align 8, !tbaa !13
  br label %3751

3751:                                             ; preds = %3750, %3747
  %3752 = phi ptr [ %3748, %3750 ], [ %3686, %3747 ]
  %3753 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3754 = icmp sgt i32 %3753, %3743
  br i1 %3754, label %3755, label %3760

3755:                                             ; preds = %3751
  tail call void @Perl_leave_scope(i32 noundef %3743) #12
  br label %3760

3756:                                             ; preds = %3742
  %3757 = getelementptr inbounds %struct.regexp, ptr %3699, i64 0, i32 17
  %3758 = load ptr, ptr %3757, align 8, !tbaa !38
  %3759 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3758, i64 0, i32 1
  store i64 %3745, ptr %3759, align 8, !tbaa !42
  br label %5550

3760:                                             ; preds = %3751, %3755, %3684, %3691
  %3761 = phi ptr [ %3686, %3691 ], [ %3686, %3684 ], [ %3752, %3755 ], [ %3752, %3751 ]
  %3762 = phi i32 [ %22, %3691 ], [ 1, %3684 ], [ %22, %3755 ], [ %22, %3751 ]
  %3763 = load i8, ptr %3761, align 1, !tbaa !6
  %3764 = zext i8 %3763 to i64
  %3765 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3764
  %3766 = load i8, ptr %3765, align 1, !tbaa !6
  %3767 = zext i8 %3766 to i64
  %3768 = getelementptr inbounds i8, ptr %3761, i64 %3767
  store ptr %3768, ptr %6, align 8, !tbaa !13
  %3769 = icmp ult ptr %3768, %3
  br i1 %3769, label %3684, label %5552, !llvm.loop !200

3770:                                             ; preds = %3675, %3845
  %3771 = phi i32 [ 1, %3675 ], [ %3847, %3845 ]
  %3772 = phi ptr [ %2, %3675 ], [ %3848, %3845 ]
  %3773 = load i8, ptr %1, align 2, !tbaa !139
  %3774 = load i8, ptr %3772, align 1, !tbaa !6
  %3775 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %3773, i8 noundef zeroext %3774)
  %3776 = zext i1 %3775 to i32
  %3777 = icmp eq i32 %3672, %3776
  br i1 %3777, label %3845, label %3778

3778:                                             ; preds = %3770
  %3779 = icmp eq i32 %3771, 0
  br i1 %3779, label %3845, label %3780

3780:                                             ; preds = %3778
  %3781 = load i8, ptr %3676, align 8, !tbaa !47, !range !97, !noundef !98
  %3782 = icmp eq i8 %3781, 0
  br i1 %3782, label %3783, label %5550

3783:                                             ; preds = %3780
  %3784 = load ptr, ptr %4, align 8, !tbaa !46
  %3785 = getelementptr i8, ptr %3784, i64 16
  %3786 = load ptr, ptr %3785, align 8, !tbaa !6
  %3787 = getelementptr inbounds %struct.regexp, ptr %3786, i64 0, i32 14
  %3788 = load ptr, ptr %3787, align 8, !tbaa !17
  store ptr null, ptr %3677, align 8, !tbaa !93
  %3789 = load ptr, ptr %3678, align 8, !tbaa !53
  %3790 = ptrtoint ptr %3772 to i64
  %3791 = ptrtoint ptr %3789 to i64
  %3792 = sub i64 %3790, %3791
  %3793 = getelementptr inbounds %struct.regexp, ptr %3786, i64 0, i32 17
  %3794 = load ptr, ptr %3793, align 8, !tbaa !38
  store i64 %3792, ptr %3794, align 8, !tbaa !39
  %3795 = getelementptr inbounds %struct.regexp, ptr %3786, i64 0, i32 15
  store i32 0, ptr %3795, align 8, !tbaa !37
  %3796 = getelementptr inbounds %struct.regexp, ptr %3786, i64 0, i32 16
  store i32 0, ptr %3796, align 4, !tbaa !36
  %3797 = getelementptr inbounds %struct.regexp, ptr %3786, i64 0, i32 12
  %3798 = load i32, ptr %3797, align 8, !tbaa !92
  %3799 = icmp sgt i32 %3798, 0
  br i1 %3799, label %3800, label %3829

3800:                                             ; preds = %3783
  %3801 = and i32 %3798, 7
  %3802 = icmp eq i32 %3801, 0
  br i1 %3802, label %3811, label %3803

3803:                                             ; preds = %3800, %3803
  %3804 = phi i32 [ %3808, %3803 ], [ %3798, %3800 ]
  %3805 = phi ptr [ %3807, %3803 ], [ %3794, %3800 ]
  %3806 = phi i32 [ %3809, %3803 ], [ 0, %3800 ]
  %3807 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3805, i64 1
  %3808 = add nsw i32 %3804, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3807, i8 -1, i64 16, i1 false)
  %3809 = add i32 %3806, 1
  %3810 = icmp eq i32 %3809, %3801
  br i1 %3810, label %3811, label %3803, !llvm.loop !201

3811:                                             ; preds = %3803, %3800
  %3812 = phi i32 [ %3798, %3800 ], [ %3808, %3803 ]
  %3813 = phi ptr [ %3794, %3800 ], [ %3807, %3803 ]
  %3814 = icmp ult i32 %3798, 8
  br i1 %3814, label %3829, label %3815

3815:                                             ; preds = %3811, %3815
  %3816 = phi i32 [ %3826, %3815 ], [ %3812, %3811 ]
  %3817 = phi ptr [ %3825, %3815 ], [ %3813, %3811 ]
  %3818 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3818, i8 -1, i64 16, i1 false)
  %3819 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3819, i8 -1, i64 16, i1 false)
  %3820 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3820, i8 -1, i64 16, i1 false)
  %3821 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3821, i8 -1, i64 16, i1 false)
  %3822 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3822, i8 -1, i64 16, i1 false)
  %3823 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3823, i8 -1, i64 16, i1 false)
  %3824 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3824, i8 -1, i64 16, i1 false)
  %3825 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3817, i64 8
  %3826 = add nsw i32 %3816, -8
  %3827 = add i32 %3816, -9
  %3828 = icmp ult i32 %3827, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3825, i8 -1, i64 16, i1 false)
  br i1 %3828, label %3815, label %3829, !llvm.loop !96

3829:                                             ; preds = %3811, %3815, %3783
  %3830 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3831 = getelementptr inbounds %struct.regexp_internal, ptr %3788, i64 1
  %3832 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %3772, ptr noundef nonnull %3831)
  %3833 = icmp eq i64 %3832, -1
  br i1 %3833, label %3834, label %3841

3834:                                             ; preds = %3829
  %3835 = load ptr, ptr %3677, align 8, !tbaa !93
  %3836 = icmp eq ptr %3835, null
  %3837 = select i1 %3836, ptr %3772, ptr %3835
  %3838 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3839 = icmp sgt i32 %3838, %3830
  br i1 %3839, label %3840, label %3845

3840:                                             ; preds = %3834
  tail call void @Perl_leave_scope(i32 noundef %3830) #12
  br label %3845

3841:                                             ; preds = %3829
  %3842 = getelementptr inbounds %struct.regexp, ptr %3786, i64 0, i32 17
  %3843 = load ptr, ptr %3842, align 8, !tbaa !38
  %3844 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3843, i64 0, i32 1
  store i64 %3832, ptr %3844, align 8, !tbaa !42
  br label %5550

3845:                                             ; preds = %3834, %3840, %3770, %3778
  %3846 = phi ptr [ %3772, %3778 ], [ %3772, %3770 ], [ %3837, %3840 ], [ %3837, %3834 ]
  %3847 = phi i32 [ %22, %3778 ], [ 1, %3770 ], [ %22, %3840 ], [ %22, %3834 ]
  %3848 = getelementptr inbounds i8, ptr %3846, i64 1
  store ptr %3848, ptr %6, align 8, !tbaa !13
  %3849 = icmp ult ptr %3848, %3
  br i1 %3849, label %3770, label %5552, !llvm.loop !202

3850:                                             ; preds = %5
  br label %3851

3851:                                             ; preds = %5, %3850
  %3852 = phi i8 [ 0, %5 ], [ 1, %3850 ]
  br i1 %25, label %4142, label %3954

3853:                                             ; preds = %5
  br i1 %25, label %3854, label %3954

3854:                                             ; preds = %3853
  %3855 = icmp ult ptr %2, %3
  br i1 %3855, label %3856, label %5552

3856:                                             ; preds = %3854
  %3857 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3858 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3859 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3860

3860:                                             ; preds = %3856, %3944
  %3861 = phi i32 [ 1, %3856 ], [ %3946, %3944 ]
  %3862 = phi ptr [ %2, %3856 ], [ %3952, %3944 ]
  %3863 = load i8, ptr %3862, align 1, !tbaa !6
  %3864 = icmp sgt i8 %3863, -1
  br i1 %3864, label %3865, label %3875

3865:                                             ; preds = %3860
  %3866 = zext i8 %3863 to i64
  %3867 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %3866
  %3868 = load i32, ptr %3867, align 4, !tbaa !34
  %3869 = load i8, ptr %1, align 2, !tbaa !139
  %3870 = zext i8 %3869 to i32
  %3871 = shl nuw i32 1, %3870
  %3872 = or i32 %3871, 16384
  %3873 = and i32 %3872, %3868
  %3874 = icmp eq i32 %3873, %3872
  br i1 %3874, label %3944, label %3875

3875:                                             ; preds = %3865, %3860
  %3876 = icmp eq i32 %3861, 0
  br i1 %3876, label %3944, label %3877

3877:                                             ; preds = %3875
  %3878 = load i8, ptr %3857, align 8, !tbaa !47, !range !97, !noundef !98
  %3879 = icmp eq i8 %3878, 0
  br i1 %3879, label %3880, label %5550

3880:                                             ; preds = %3877
  %3881 = load ptr, ptr %4, align 8, !tbaa !46
  %3882 = getelementptr i8, ptr %3881, i64 16
  %3883 = load ptr, ptr %3882, align 8, !tbaa !6
  %3884 = getelementptr inbounds %struct.regexp, ptr %3883, i64 0, i32 14
  %3885 = load ptr, ptr %3884, align 8, !tbaa !17
  store ptr null, ptr %3858, align 8, !tbaa !93
  %3886 = load ptr, ptr %3859, align 8, !tbaa !53
  %3887 = ptrtoint ptr %3862 to i64
  %3888 = ptrtoint ptr %3886 to i64
  %3889 = sub i64 %3887, %3888
  %3890 = getelementptr inbounds %struct.regexp, ptr %3883, i64 0, i32 17
  %3891 = load ptr, ptr %3890, align 8, !tbaa !38
  store i64 %3889, ptr %3891, align 8, !tbaa !39
  %3892 = getelementptr inbounds %struct.regexp, ptr %3883, i64 0, i32 15
  store i32 0, ptr %3892, align 8, !tbaa !37
  %3893 = getelementptr inbounds %struct.regexp, ptr %3883, i64 0, i32 16
  store i32 0, ptr %3893, align 4, !tbaa !36
  %3894 = getelementptr inbounds %struct.regexp, ptr %3883, i64 0, i32 12
  %3895 = load i32, ptr %3894, align 8, !tbaa !92
  %3896 = icmp sgt i32 %3895, 0
  br i1 %3896, label %3897, label %3926

3897:                                             ; preds = %3880
  %3898 = and i32 %3895, 7
  %3899 = icmp eq i32 %3898, 0
  br i1 %3899, label %3908, label %3900

3900:                                             ; preds = %3897, %3900
  %3901 = phi i32 [ %3905, %3900 ], [ %3895, %3897 ]
  %3902 = phi ptr [ %3904, %3900 ], [ %3891, %3897 ]
  %3903 = phi i32 [ %3906, %3900 ], [ 0, %3897 ]
  %3904 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3902, i64 1
  %3905 = add nsw i32 %3901, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3904, i8 -1, i64 16, i1 false)
  %3906 = add i32 %3903, 1
  %3907 = icmp eq i32 %3906, %3898
  br i1 %3907, label %3908, label %3900, !llvm.loop !203

3908:                                             ; preds = %3900, %3897
  %3909 = phi i32 [ %3895, %3897 ], [ %3905, %3900 ]
  %3910 = phi ptr [ %3891, %3897 ], [ %3904, %3900 ]
  %3911 = icmp ult i32 %3895, 8
  br i1 %3911, label %3926, label %3912

3912:                                             ; preds = %3908, %3912
  %3913 = phi i32 [ %3923, %3912 ], [ %3909, %3908 ]
  %3914 = phi ptr [ %3922, %3912 ], [ %3910, %3908 ]
  %3915 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3915, i8 -1, i64 16, i1 false)
  %3916 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3916, i8 -1, i64 16, i1 false)
  %3917 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3917, i8 -1, i64 16, i1 false)
  %3918 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3918, i8 -1, i64 16, i1 false)
  %3919 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3919, i8 -1, i64 16, i1 false)
  %3920 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3920, i8 -1, i64 16, i1 false)
  %3921 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3921, i8 -1, i64 16, i1 false)
  %3922 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3914, i64 8
  %3923 = add nsw i32 %3913, -8
  %3924 = add i32 %3913, -9
  %3925 = icmp ult i32 %3924, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3922, i8 -1, i64 16, i1 false)
  br i1 %3925, label %3912, label %3926, !llvm.loop !96

3926:                                             ; preds = %3908, %3912, %3880
  %3927 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3928 = getelementptr inbounds %struct.regexp_internal, ptr %3885, i64 1
  %3929 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %3862, ptr noundef nonnull %3928)
  %3930 = icmp eq i64 %3929, -1
  br i1 %3930, label %3931, label %3940

3931:                                             ; preds = %3926
  %3932 = load ptr, ptr %3858, align 8, !tbaa !93
  %3933 = icmp eq ptr %3932, null
  br i1 %3933, label %3935, label %3934

3934:                                             ; preds = %3931
  store ptr %3932, ptr %6, align 8, !tbaa !13
  br label %3935

3935:                                             ; preds = %3934, %3931
  %3936 = phi ptr [ %3932, %3934 ], [ %3862, %3931 ]
  %3937 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3938 = icmp sgt i32 %3937, %3927
  br i1 %3938, label %3939, label %3944

3939:                                             ; preds = %3935
  tail call void @Perl_leave_scope(i32 noundef %3927) #12
  br label %3944

3940:                                             ; preds = %3926
  %3941 = getelementptr inbounds %struct.regexp, ptr %3883, i64 0, i32 17
  %3942 = load ptr, ptr %3941, align 8, !tbaa !38
  %3943 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3942, i64 0, i32 1
  store i64 %3929, ptr %3943, align 8, !tbaa !42
  br label %5550

3944:                                             ; preds = %3935, %3939, %3865, %3875
  %3945 = phi ptr [ %3862, %3875 ], [ %3862, %3865 ], [ %3936, %3939 ], [ %3936, %3935 ]
  %3946 = phi i32 [ %22, %3875 ], [ 1, %3865 ], [ %22, %3939 ], [ %22, %3935 ]
  %3947 = load i8, ptr %3945, align 1, !tbaa !6
  %3948 = zext i8 %3947 to i64
  %3949 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3948
  %3950 = load i8, ptr %3949, align 1, !tbaa !6
  %3951 = zext i8 %3950 to i64
  %3952 = getelementptr inbounds i8, ptr %3945, i64 %3951
  store ptr %3952, ptr %6, align 8, !tbaa !13
  %3953 = icmp ult ptr %3952, %3
  br i1 %3953, label %3860, label %5552, !llvm.loop !204

3954:                                             ; preds = %3853, %3851, %5
  %3955 = phi i8 [ 0, %5 ], [ %3852, %3851 ], [ 1, %3853 ]
  %3956 = icmp ult ptr %2, %3
  br i1 %3956, label %3957, label %5552

3957:                                             ; preds = %3954
  %3958 = icmp ne i8 %3955, 0
  %3959 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3960 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3961 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3962

3962:                                             ; preds = %3957, %4043
  %3963 = phi i32 [ 1, %3957 ], [ %4045, %4043 ]
  %3964 = phi ptr [ %2, %3957 ], [ %4046, %4043 ]
  %3965 = load i8, ptr %3964, align 1, !tbaa !6
  %3966 = zext i8 %3965 to i64
  %3967 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %3966
  %3968 = load i32, ptr %3967, align 4, !tbaa !34
  %3969 = load i8, ptr %1, align 2, !tbaa !139
  %3970 = zext i8 %3969 to i32
  %3971 = shl nuw i32 1, %3970
  %3972 = or i32 %3971, 16384
  %3973 = and i32 %3972, %3968
  %3974 = icmp ne i32 %3973, %3972
  %3975 = xor i1 %3958, %3974
  br i1 %3975, label %4043, label %3976

3976:                                             ; preds = %3962
  %3977 = icmp eq i32 %3963, 0
  br i1 %3977, label %4043, label %3978

3978:                                             ; preds = %3976
  %3979 = load i8, ptr %3959, align 8, !tbaa !47, !range !97, !noundef !98
  %3980 = icmp eq i8 %3979, 0
  br i1 %3980, label %3981, label %5550

3981:                                             ; preds = %3978
  %3982 = load ptr, ptr %4, align 8, !tbaa !46
  %3983 = getelementptr i8, ptr %3982, i64 16
  %3984 = load ptr, ptr %3983, align 8, !tbaa !6
  %3985 = getelementptr inbounds %struct.regexp, ptr %3984, i64 0, i32 14
  %3986 = load ptr, ptr %3985, align 8, !tbaa !17
  store ptr null, ptr %3960, align 8, !tbaa !93
  %3987 = load ptr, ptr %3961, align 8, !tbaa !53
  %3988 = ptrtoint ptr %3964 to i64
  %3989 = ptrtoint ptr %3987 to i64
  %3990 = sub i64 %3988, %3989
  %3991 = getelementptr inbounds %struct.regexp, ptr %3984, i64 0, i32 17
  %3992 = load ptr, ptr %3991, align 8, !tbaa !38
  store i64 %3990, ptr %3992, align 8, !tbaa !39
  %3993 = getelementptr inbounds %struct.regexp, ptr %3984, i64 0, i32 15
  store i32 0, ptr %3993, align 8, !tbaa !37
  %3994 = getelementptr inbounds %struct.regexp, ptr %3984, i64 0, i32 16
  store i32 0, ptr %3994, align 4, !tbaa !36
  %3995 = getelementptr inbounds %struct.regexp, ptr %3984, i64 0, i32 12
  %3996 = load i32, ptr %3995, align 8, !tbaa !92
  %3997 = icmp sgt i32 %3996, 0
  br i1 %3997, label %3998, label %4027

3998:                                             ; preds = %3981
  %3999 = and i32 %3996, 7
  %4000 = icmp eq i32 %3999, 0
  br i1 %4000, label %4009, label %4001

4001:                                             ; preds = %3998, %4001
  %4002 = phi i32 [ %4006, %4001 ], [ %3996, %3998 ]
  %4003 = phi ptr [ %4005, %4001 ], [ %3992, %3998 ]
  %4004 = phi i32 [ %4007, %4001 ], [ 0, %3998 ]
  %4005 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4003, i64 1
  %4006 = add nsw i32 %4002, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4005, i8 -1, i64 16, i1 false)
  %4007 = add i32 %4004, 1
  %4008 = icmp eq i32 %4007, %3999
  br i1 %4008, label %4009, label %4001, !llvm.loop !205

4009:                                             ; preds = %4001, %3998
  %4010 = phi i32 [ %3996, %3998 ], [ %4006, %4001 ]
  %4011 = phi ptr [ %3992, %3998 ], [ %4005, %4001 ]
  %4012 = icmp ult i32 %3996, 8
  br i1 %4012, label %4027, label %4013

4013:                                             ; preds = %4009, %4013
  %4014 = phi i32 [ %4024, %4013 ], [ %4010, %4009 ]
  %4015 = phi ptr [ %4023, %4013 ], [ %4011, %4009 ]
  %4016 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4016, i8 -1, i64 16, i1 false)
  %4017 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4017, i8 -1, i64 16, i1 false)
  %4018 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4018, i8 -1, i64 16, i1 false)
  %4019 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4019, i8 -1, i64 16, i1 false)
  %4020 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4020, i8 -1, i64 16, i1 false)
  %4021 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4021, i8 -1, i64 16, i1 false)
  %4022 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4022, i8 -1, i64 16, i1 false)
  %4023 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4015, i64 8
  %4024 = add nsw i32 %4014, -8
  %4025 = add i32 %4014, -9
  %4026 = icmp ult i32 %4025, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4023, i8 -1, i64 16, i1 false)
  br i1 %4026, label %4013, label %4027, !llvm.loop !96

4027:                                             ; preds = %4009, %4013, %3981
  %4028 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4029 = getelementptr inbounds %struct.regexp_internal, ptr %3986, i64 1
  %4030 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %3964, ptr noundef nonnull %4029)
  %4031 = icmp eq i64 %4030, -1
  br i1 %4031, label %4032, label %4039

4032:                                             ; preds = %4027
  %4033 = load ptr, ptr %3960, align 8, !tbaa !93
  %4034 = icmp eq ptr %4033, null
  %4035 = select i1 %4034, ptr %3964, ptr %4033
  %4036 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4037 = icmp sgt i32 %4036, %4028
  br i1 %4037, label %4038, label %4043

4038:                                             ; preds = %4032
  tail call void @Perl_leave_scope(i32 noundef %4028) #12
  br label %4043

4039:                                             ; preds = %4027
  %4040 = getelementptr inbounds %struct.regexp, ptr %3984, i64 0, i32 17
  %4041 = load ptr, ptr %4040, align 8, !tbaa !38
  %4042 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4041, i64 0, i32 1
  store i64 %4030, ptr %4042, align 8, !tbaa !42
  br label %5550

4043:                                             ; preds = %4032, %4038, %3962, %3976
  %4044 = phi ptr [ %3964, %3976 ], [ %3964, %3962 ], [ %4035, %4038 ], [ %4035, %4032 ]
  %4045 = phi i32 [ %22, %3976 ], [ 1, %3962 ], [ %22, %4038 ], [ %22, %4032 ]
  %4046 = getelementptr inbounds i8, ptr %4044, i64 1
  store ptr %4046, ptr %6, align 8, !tbaa !13
  %4047 = icmp ult ptr %4046, %3
  br i1 %4047, label %3962, label %5552, !llvm.loop !206

4048:                                             ; preds = %5
  br label %4049

4049:                                             ; preds = %5, %4048
  %4050 = phi i32 [ 0, %5 ], [ 1, %4048 ]
  %4051 = phi i8 [ 0, %5 ], [ 1, %4048 ]
  br i1 %25, label %4142, label %4052

4052:                                             ; preds = %4049
  %4053 = icmp ult ptr %2, %3
  br i1 %4053, label %4054, label %5552

4054:                                             ; preds = %4052
  %4055 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4056 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4057 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4058

4058:                                             ; preds = %4054, %4137
  %4059 = phi i32 [ 1, %4054 ], [ %4139, %4137 ]
  %4060 = phi ptr [ %2, %4054 ], [ %4140, %4137 ]
  %4061 = load i8, ptr %4060, align 1, !tbaa !6
  %4062 = zext i8 %4061 to i64
  %4063 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4062
  %4064 = load i32, ptr %4063, align 4, !tbaa !34
  %4065 = load i8, ptr %1, align 2, !tbaa !139
  %4066 = zext i8 %4065 to i32
  %4067 = lshr i32 %4064, %4066
  %4068 = and i32 %4067, 1
  %4069 = icmp eq i32 %4050, %4068
  br i1 %4069, label %4137, label %4070

4070:                                             ; preds = %4058
  %4071 = icmp eq i32 %4059, 0
  br i1 %4071, label %4137, label %4072

4072:                                             ; preds = %4070
  %4073 = load i8, ptr %4055, align 8, !tbaa !47, !range !97, !noundef !98
  %4074 = icmp eq i8 %4073, 0
  br i1 %4074, label %4075, label %5550

4075:                                             ; preds = %4072
  %4076 = load ptr, ptr %4, align 8, !tbaa !46
  %4077 = getelementptr i8, ptr %4076, i64 16
  %4078 = load ptr, ptr %4077, align 8, !tbaa !6
  %4079 = getelementptr inbounds %struct.regexp, ptr %4078, i64 0, i32 14
  %4080 = load ptr, ptr %4079, align 8, !tbaa !17
  store ptr null, ptr %4056, align 8, !tbaa !93
  %4081 = load ptr, ptr %4057, align 8, !tbaa !53
  %4082 = ptrtoint ptr %4060 to i64
  %4083 = ptrtoint ptr %4081 to i64
  %4084 = sub i64 %4082, %4083
  %4085 = getelementptr inbounds %struct.regexp, ptr %4078, i64 0, i32 17
  %4086 = load ptr, ptr %4085, align 8, !tbaa !38
  store i64 %4084, ptr %4086, align 8, !tbaa !39
  %4087 = getelementptr inbounds %struct.regexp, ptr %4078, i64 0, i32 15
  store i32 0, ptr %4087, align 8, !tbaa !37
  %4088 = getelementptr inbounds %struct.regexp, ptr %4078, i64 0, i32 16
  store i32 0, ptr %4088, align 4, !tbaa !36
  %4089 = getelementptr inbounds %struct.regexp, ptr %4078, i64 0, i32 12
  %4090 = load i32, ptr %4089, align 8, !tbaa !92
  %4091 = icmp sgt i32 %4090, 0
  br i1 %4091, label %4092, label %4121

4092:                                             ; preds = %4075
  %4093 = and i32 %4090, 7
  %4094 = icmp eq i32 %4093, 0
  br i1 %4094, label %4103, label %4095

4095:                                             ; preds = %4092, %4095
  %4096 = phi i32 [ %4100, %4095 ], [ %4090, %4092 ]
  %4097 = phi ptr [ %4099, %4095 ], [ %4086, %4092 ]
  %4098 = phi i32 [ %4101, %4095 ], [ 0, %4092 ]
  %4099 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4097, i64 1
  %4100 = add nsw i32 %4096, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4099, i8 -1, i64 16, i1 false)
  %4101 = add i32 %4098, 1
  %4102 = icmp eq i32 %4101, %4093
  br i1 %4102, label %4103, label %4095, !llvm.loop !207

4103:                                             ; preds = %4095, %4092
  %4104 = phi i32 [ %4090, %4092 ], [ %4100, %4095 ]
  %4105 = phi ptr [ %4086, %4092 ], [ %4099, %4095 ]
  %4106 = icmp ult i32 %4090, 8
  br i1 %4106, label %4121, label %4107

4107:                                             ; preds = %4103, %4107
  %4108 = phi i32 [ %4118, %4107 ], [ %4104, %4103 ]
  %4109 = phi ptr [ %4117, %4107 ], [ %4105, %4103 ]
  %4110 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4110, i8 -1, i64 16, i1 false)
  %4111 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4111, i8 -1, i64 16, i1 false)
  %4112 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4112, i8 -1, i64 16, i1 false)
  %4113 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4113, i8 -1, i64 16, i1 false)
  %4114 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4114, i8 -1, i64 16, i1 false)
  %4115 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4115, i8 -1, i64 16, i1 false)
  %4116 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4116, i8 -1, i64 16, i1 false)
  %4117 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4109, i64 8
  %4118 = add nsw i32 %4108, -8
  %4119 = add i32 %4108, -9
  %4120 = icmp ult i32 %4119, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4117, i8 -1, i64 16, i1 false)
  br i1 %4120, label %4107, label %4121, !llvm.loop !96

4121:                                             ; preds = %4103, %4107, %4075
  %4122 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4123 = getelementptr inbounds %struct.regexp_internal, ptr %4080, i64 1
  %4124 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4060, ptr noundef nonnull %4123)
  %4125 = icmp eq i64 %4124, -1
  br i1 %4125, label %4126, label %4133

4126:                                             ; preds = %4121
  %4127 = load ptr, ptr %4056, align 8, !tbaa !93
  %4128 = icmp eq ptr %4127, null
  %4129 = select i1 %4128, ptr %4060, ptr %4127
  %4130 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4131 = icmp sgt i32 %4130, %4122
  br i1 %4131, label %4132, label %4137

4132:                                             ; preds = %4126
  tail call void @Perl_leave_scope(i32 noundef %4122) #12
  br label %4137

4133:                                             ; preds = %4121
  %4134 = getelementptr inbounds %struct.regexp, ptr %4078, i64 0, i32 17
  %4135 = load ptr, ptr %4134, align 8, !tbaa !38
  %4136 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4135, i64 0, i32 1
  store i64 %4124, ptr %4136, align 8, !tbaa !42
  br label %5550

4137:                                             ; preds = %4126, %4132, %4058, %4070
  %4138 = phi ptr [ %4060, %4070 ], [ %4060, %4058 ], [ %4129, %4132 ], [ %4129, %4126 ]
  %4139 = phi i32 [ %22, %4070 ], [ 1, %4058 ], [ %22, %4132 ], [ %22, %4126 ]
  %4140 = getelementptr inbounds i8, ptr %4138, i64 1
  store ptr %4140, ptr %6, align 8, !tbaa !13
  %4141 = icmp ult ptr %4140, %3
  br i1 %4141, label %4058, label %5552, !llvm.loop !208

4142:                                             ; preds = %4049, %3851
  %4143 = phi i8 [ %4051, %4049 ], [ %3852, %3851 ]
  %4144 = load i8, ptr %1, align 2, !tbaa !139
  %4145 = zext i8 %4144 to i32
  %4146 = icmp ult i8 %4144, 10
  br i1 %4146, label %4147, label %4264

4147:                                             ; preds = %4142
  %4148 = icmp ult ptr %2, %3
  br i1 %4148, label %4149, label %5552

4149:                                             ; preds = %4147
  %4150 = zext i8 %4143 to i32
  %4151 = shl nuw i32 1, %4145
  %4152 = icmp eq i8 %4143, 0
  %4153 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4154 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4155 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4156

4156:                                             ; preds = %4149, %4254
  %4157 = phi i32 [ 1, %4149 ], [ %4256, %4254 ]
  %4158 = phi ptr [ %2, %4149 ], [ %4262, %4254 ]
  %4159 = load i8, ptr %4158, align 1, !tbaa !6
  %4160 = icmp ugt i8 %4159, -61
  br i1 %4160, label %4918, label %4161

4161:                                             ; preds = %4156
  %4162 = icmp sgt i8 %4159, -1
  br i1 %4162, label %4163, label %4170

4163:                                             ; preds = %4161
  %4164 = zext i8 %4159 to i64
  %4165 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4164
  %4166 = load i32, ptr %4165, align 4, !tbaa !34
  %4167 = lshr i32 %4166, %4145
  %4168 = and i32 %4167, 1
  %4169 = icmp eq i32 %4168, %4150
  br i1 %4169, label %4170, label %4185

4170:                                             ; preds = %4163, %4161
  %4171 = and i8 %4159, -2
  %4172 = icmp eq i8 %4171, -62
  br i1 %4172, label %4173, label %4254

4173:                                             ; preds = %4170
  %4174 = shl i8 %4159, 6
  %4175 = getelementptr inbounds i8, ptr %4158, i64 1
  %4176 = load i8, ptr %4175, align 1, !tbaa !6
  %4177 = and i8 %4176, 63
  %4178 = or i8 %4177, %4174
  %4179 = zext i8 %4178 to i64
  %4180 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4179
  %4181 = load i32, ptr %4180, align 4, !tbaa !34
  %4182 = and i32 %4181, %4151
  %4183 = icmp ne i32 %4182, 0
  %4184 = xor i1 %4152, %4183
  br i1 %4184, label %4254, label %4185

4185:                                             ; preds = %4173, %4163
  %4186 = icmp eq i32 %4157, 0
  br i1 %4186, label %4254, label %4187

4187:                                             ; preds = %4185
  %4188 = load i8, ptr %4153, align 8, !tbaa !47, !range !97, !noundef !98
  %4189 = icmp eq i8 %4188, 0
  br i1 %4189, label %4190, label %5550

4190:                                             ; preds = %4187
  %4191 = load ptr, ptr %4, align 8, !tbaa !46
  %4192 = getelementptr i8, ptr %4191, i64 16
  %4193 = load ptr, ptr %4192, align 8, !tbaa !6
  %4194 = getelementptr inbounds %struct.regexp, ptr %4193, i64 0, i32 14
  %4195 = load ptr, ptr %4194, align 8, !tbaa !17
  store ptr null, ptr %4154, align 8, !tbaa !93
  %4196 = load ptr, ptr %4155, align 8, !tbaa !53
  %4197 = ptrtoint ptr %4158 to i64
  %4198 = ptrtoint ptr %4196 to i64
  %4199 = sub i64 %4197, %4198
  %4200 = getelementptr inbounds %struct.regexp, ptr %4193, i64 0, i32 17
  %4201 = load ptr, ptr %4200, align 8, !tbaa !38
  store i64 %4199, ptr %4201, align 8, !tbaa !39
  %4202 = getelementptr inbounds %struct.regexp, ptr %4193, i64 0, i32 15
  store i32 0, ptr %4202, align 8, !tbaa !37
  %4203 = getelementptr inbounds %struct.regexp, ptr %4193, i64 0, i32 16
  store i32 0, ptr %4203, align 4, !tbaa !36
  %4204 = getelementptr inbounds %struct.regexp, ptr %4193, i64 0, i32 12
  %4205 = load i32, ptr %4204, align 8, !tbaa !92
  %4206 = icmp sgt i32 %4205, 0
  br i1 %4206, label %4207, label %4236

4207:                                             ; preds = %4190
  %4208 = and i32 %4205, 7
  %4209 = icmp eq i32 %4208, 0
  br i1 %4209, label %4218, label %4210

4210:                                             ; preds = %4207, %4210
  %4211 = phi i32 [ %4215, %4210 ], [ %4205, %4207 ]
  %4212 = phi ptr [ %4214, %4210 ], [ %4201, %4207 ]
  %4213 = phi i32 [ %4216, %4210 ], [ 0, %4207 ]
  %4214 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4212, i64 1
  %4215 = add nsw i32 %4211, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4214, i8 -1, i64 16, i1 false)
  %4216 = add i32 %4213, 1
  %4217 = icmp eq i32 %4216, %4208
  br i1 %4217, label %4218, label %4210, !llvm.loop !209

4218:                                             ; preds = %4210, %4207
  %4219 = phi i32 [ %4205, %4207 ], [ %4215, %4210 ]
  %4220 = phi ptr [ %4201, %4207 ], [ %4214, %4210 ]
  %4221 = icmp ult i32 %4205, 8
  br i1 %4221, label %4236, label %4222

4222:                                             ; preds = %4218, %4222
  %4223 = phi i32 [ %4233, %4222 ], [ %4219, %4218 ]
  %4224 = phi ptr [ %4232, %4222 ], [ %4220, %4218 ]
  %4225 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4225, i8 -1, i64 16, i1 false)
  %4226 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4226, i8 -1, i64 16, i1 false)
  %4227 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4227, i8 -1, i64 16, i1 false)
  %4228 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4228, i8 -1, i64 16, i1 false)
  %4229 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4229, i8 -1, i64 16, i1 false)
  %4230 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4230, i8 -1, i64 16, i1 false)
  %4231 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4231, i8 -1, i64 16, i1 false)
  %4232 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4224, i64 8
  %4233 = add nsw i32 %4223, -8
  %4234 = add i32 %4223, -9
  %4235 = icmp ult i32 %4234, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4232, i8 -1, i64 16, i1 false)
  br i1 %4235, label %4222, label %4236, !llvm.loop !96

4236:                                             ; preds = %4218, %4222, %4190
  %4237 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4238 = getelementptr inbounds %struct.regexp_internal, ptr %4195, i64 1
  %4239 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4158, ptr noundef nonnull %4238)
  %4240 = icmp eq i64 %4239, -1
  br i1 %4240, label %4241, label %4250

4241:                                             ; preds = %4236
  %4242 = load ptr, ptr %4154, align 8, !tbaa !93
  %4243 = icmp eq ptr %4242, null
  br i1 %4243, label %4245, label %4244

4244:                                             ; preds = %4241
  store ptr %4242, ptr %6, align 8, !tbaa !13
  br label %4245

4245:                                             ; preds = %4244, %4241
  %4246 = phi ptr [ %4242, %4244 ], [ %4158, %4241 ]
  %4247 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4248 = icmp sgt i32 %4247, %4237
  br i1 %4248, label %4249, label %4254

4249:                                             ; preds = %4245
  tail call void @Perl_leave_scope(i32 noundef %4237) #12
  br label %4254

4250:                                             ; preds = %4236
  %4251 = getelementptr inbounds %struct.regexp, ptr %4193, i64 0, i32 17
  %4252 = load ptr, ptr %4251, align 8, !tbaa !38
  %4253 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4252, i64 0, i32 1
  store i64 %4239, ptr %4253, align 8, !tbaa !42
  br label %5550

4254:                                             ; preds = %4245, %4249, %4170, %4173, %4185
  %4255 = phi ptr [ %4158, %4185 ], [ %4158, %4173 ], [ %4158, %4170 ], [ %4246, %4249 ], [ %4246, %4245 ]
  %4256 = phi i32 [ %22, %4185 ], [ 1, %4173 ], [ 1, %4170 ], [ %22, %4249 ], [ %22, %4245 ]
  %4257 = load i8, ptr %4255, align 1, !tbaa !6
  %4258 = zext i8 %4257 to i64
  %4259 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4258
  %4260 = load i8, ptr %4259, align 1, !tbaa !6
  %4261 = zext i8 %4260 to i64
  %4262 = getelementptr inbounds i8, ptr %4255, i64 %4261
  store ptr %4262, ptr %6, align 8, !tbaa !13
  %4263 = icmp ult ptr %4262, %3
  br i1 %4263, label %4156, label %5552, !llvm.loop !210

4264:                                             ; preds = %4142
  switch i8 %4144, label %4913 [
    i8 10, label %4293
    i8 11, label %4286
    i8 12, label %4279
    i8 15, label %4272
    i8 13, label %4265
  ]

4265:                                             ; preds = %4264
  %4266 = icmp ult ptr %2, %3
  br i1 %4266, label %4267, label %5552

4267:                                             ; preds = %4265
  %4268 = icmp eq i8 %4143, 0
  %4269 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4270 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4271 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4811

4272:                                             ; preds = %4264
  %4273 = icmp ult ptr %2, %3
  br i1 %4273, label %4274, label %5552

4274:                                             ; preds = %4272
  %4275 = icmp eq i8 %4143, 0
  %4276 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4277 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4278 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4692

4279:                                             ; preds = %4264
  %4280 = icmp ult ptr %2, %3
  br i1 %4280, label %4281, label %5552

4281:                                             ; preds = %4279
  %4282 = icmp eq i8 %4143, 0
  %4283 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4284 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4285 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4579

4286:                                             ; preds = %4264
  %4287 = icmp ult ptr %2, %3
  br i1 %4287, label %4288, label %5552

4288:                                             ; preds = %4286
  %4289 = icmp eq i8 %4143, 0
  %4290 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4291 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4292 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4441

4293:                                             ; preds = %4264
  %4294 = icmp ult ptr %2, %3
  br i1 %4294, label %4295, label %5552

4295:                                             ; preds = %4293
  %4296 = icmp eq i8 %4143, 0
  %4297 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4298 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4299 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4300

4300:                                             ; preds = %4295, %4431
  %4301 = phi i32 [ 1, %4295 ], [ %4433, %4431 ]
  %4302 = phi ptr [ %2, %4295 ], [ %4439, %4431 ]
  %4303 = load i8, ptr %4302, align 1, !tbaa !6
  %4304 = icmp sgt i8 %4303, -1
  br i1 %4304, label %4305, label %4311

4305:                                             ; preds = %4300
  %4306 = zext i8 %4303 to i64
  %4307 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4306
  %4308 = load i32, ptr %4307, align 4, !tbaa !34
  %4309 = and i32 %4308, 1024
  %4310 = icmp ne i32 %4309, 0
  br label %4359

4311:                                             ; preds = %4300
  %4312 = and i8 %4303, -2
  %4313 = icmp eq i8 %4312, -62
  br i1 %4313, label %4314, label %4325

4314:                                             ; preds = %4311
  %4315 = shl i8 %4303, 6
  %4316 = getelementptr inbounds i8, ptr %4302, i64 1
  %4317 = load i8, ptr %4316, align 1, !tbaa !6
  %4318 = and i8 %4317, 63
  %4319 = or i8 %4318, %4315
  %4320 = zext i8 %4319 to i64
  %4321 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4320
  %4322 = load i32, ptr %4321, align 4, !tbaa !34
  %4323 = and i32 %4322, 1024
  %4324 = icmp ne i32 %4323, 0
  br label %4359

4325:                                             ; preds = %4311
  switch i8 %4303, label %4358 [
    i8 -31, label %4326
    i8 -30, label %4334
    i8 -29, label %4350
  ]

4326:                                             ; preds = %4325
  %4327 = getelementptr inbounds i8, ptr %4302, i64 1
  %4328 = load i8, ptr %4327, align 1, !tbaa !6
  %4329 = icmp eq i8 %4328, -102
  br i1 %4329, label %4330, label %4358

4330:                                             ; preds = %4326
  %4331 = getelementptr inbounds i8, ptr %4302, i64 2
  %4332 = load i8, ptr %4331, align 1, !tbaa !6
  %4333 = icmp eq i8 %4332, -128
  br label %4359

4334:                                             ; preds = %4325
  %4335 = getelementptr inbounds i8, ptr %4302, i64 1
  %4336 = load i8, ptr %4335, align 1, !tbaa !6
  switch i8 %4336, label %4358 [
    i8 -128, label %4337
    i8 -127, label %4346
  ]

4337:                                             ; preds = %4334
  %4338 = getelementptr inbounds i8, ptr %4302, i64 2
  %4339 = load i8, ptr %4338, align 1, !tbaa !6
  %4340 = icmp ult i8 %4339, -117
  %4341 = and i8 %4339, -2
  %4342 = icmp eq i8 %4341, -88
  %4343 = or i1 %4340, %4342
  %4344 = icmp eq i8 %4339, -81
  %4345 = or i1 %4344, %4343
  br label %4359

4346:                                             ; preds = %4334
  %4347 = getelementptr inbounds i8, ptr %4302, i64 2
  %4348 = load i8, ptr %4347, align 1, !tbaa !6
  %4349 = icmp eq i8 %4348, -97
  br label %4359

4350:                                             ; preds = %4325
  %4351 = getelementptr inbounds i8, ptr %4302, i64 1
  %4352 = load i8, ptr %4351, align 1, !tbaa !6
  %4353 = icmp eq i8 %4352, -128
  br i1 %4353, label %4354, label %4358

4354:                                             ; preds = %4350
  %4355 = getelementptr inbounds i8, ptr %4302, i64 2
  %4356 = load i8, ptr %4355, align 1, !tbaa !6
  %4357 = icmp eq i8 %4356, -128
  br label %4359

4358:                                             ; preds = %4325, %4350, %4334, %4326
  br i1 %4296, label %4431, label %4362

4359:                                             ; preds = %4337, %4354, %4346, %4330, %4314, %4305
  %4360 = phi i1 [ %4310, %4305 ], [ %4324, %4314 ], [ %4333, %4330 ], [ %4349, %4346 ], [ %4357, %4354 ], [ %4345, %4337 ]
  %4361 = xor i1 %4296, %4360
  br i1 %4361, label %4431, label %4362

4362:                                             ; preds = %4358, %4359
  %4363 = icmp eq i32 %4301, 0
  br i1 %4363, label %4431, label %4364

4364:                                             ; preds = %4362
  %4365 = load i8, ptr %4297, align 8, !tbaa !47, !range !97, !noundef !98
  %4366 = icmp eq i8 %4365, 0
  br i1 %4366, label %4367, label %5550

4367:                                             ; preds = %4364
  %4368 = load ptr, ptr %4, align 8, !tbaa !46
  %4369 = getelementptr i8, ptr %4368, i64 16
  %4370 = load ptr, ptr %4369, align 8, !tbaa !6
  %4371 = getelementptr inbounds %struct.regexp, ptr %4370, i64 0, i32 14
  %4372 = load ptr, ptr %4371, align 8, !tbaa !17
  store ptr null, ptr %4298, align 8, !tbaa !93
  %4373 = load ptr, ptr %4299, align 8, !tbaa !53
  %4374 = ptrtoint ptr %4302 to i64
  %4375 = ptrtoint ptr %4373 to i64
  %4376 = sub i64 %4374, %4375
  %4377 = getelementptr inbounds %struct.regexp, ptr %4370, i64 0, i32 17
  %4378 = load ptr, ptr %4377, align 8, !tbaa !38
  store i64 %4376, ptr %4378, align 8, !tbaa !39
  %4379 = getelementptr inbounds %struct.regexp, ptr %4370, i64 0, i32 15
  store i32 0, ptr %4379, align 8, !tbaa !37
  %4380 = getelementptr inbounds %struct.regexp, ptr %4370, i64 0, i32 16
  store i32 0, ptr %4380, align 4, !tbaa !36
  %4381 = getelementptr inbounds %struct.regexp, ptr %4370, i64 0, i32 12
  %4382 = load i32, ptr %4381, align 8, !tbaa !92
  %4383 = icmp sgt i32 %4382, 0
  br i1 %4383, label %4384, label %4413

4384:                                             ; preds = %4367
  %4385 = and i32 %4382, 7
  %4386 = icmp eq i32 %4385, 0
  br i1 %4386, label %4395, label %4387

4387:                                             ; preds = %4384, %4387
  %4388 = phi i32 [ %4392, %4387 ], [ %4382, %4384 ]
  %4389 = phi ptr [ %4391, %4387 ], [ %4378, %4384 ]
  %4390 = phi i32 [ %4393, %4387 ], [ 0, %4384 ]
  %4391 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4389, i64 1
  %4392 = add nsw i32 %4388, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4391, i8 -1, i64 16, i1 false)
  %4393 = add i32 %4390, 1
  %4394 = icmp eq i32 %4393, %4385
  br i1 %4394, label %4395, label %4387, !llvm.loop !211

4395:                                             ; preds = %4387, %4384
  %4396 = phi i32 [ %4382, %4384 ], [ %4392, %4387 ]
  %4397 = phi ptr [ %4378, %4384 ], [ %4391, %4387 ]
  %4398 = icmp ult i32 %4382, 8
  br i1 %4398, label %4413, label %4399

4399:                                             ; preds = %4395, %4399
  %4400 = phi i32 [ %4410, %4399 ], [ %4396, %4395 ]
  %4401 = phi ptr [ %4409, %4399 ], [ %4397, %4395 ]
  %4402 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4402, i8 -1, i64 16, i1 false)
  %4403 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4403, i8 -1, i64 16, i1 false)
  %4404 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4404, i8 -1, i64 16, i1 false)
  %4405 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4405, i8 -1, i64 16, i1 false)
  %4406 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4406, i8 -1, i64 16, i1 false)
  %4407 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4407, i8 -1, i64 16, i1 false)
  %4408 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4408, i8 -1, i64 16, i1 false)
  %4409 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4401, i64 8
  %4410 = add nsw i32 %4400, -8
  %4411 = add i32 %4400, -9
  %4412 = icmp ult i32 %4411, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4409, i8 -1, i64 16, i1 false)
  br i1 %4412, label %4399, label %4413, !llvm.loop !96

4413:                                             ; preds = %4395, %4399, %4367
  %4414 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4415 = getelementptr inbounds %struct.regexp_internal, ptr %4372, i64 1
  %4416 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4302, ptr noundef nonnull %4415)
  %4417 = icmp eq i64 %4416, -1
  br i1 %4417, label %4418, label %4427

4418:                                             ; preds = %4413
  %4419 = load ptr, ptr %4298, align 8, !tbaa !93
  %4420 = icmp eq ptr %4419, null
  br i1 %4420, label %4422, label %4421

4421:                                             ; preds = %4418
  store ptr %4419, ptr %6, align 8, !tbaa !13
  br label %4422

4422:                                             ; preds = %4421, %4418
  %4423 = phi ptr [ %4419, %4421 ], [ %4302, %4418 ]
  %4424 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4425 = icmp sgt i32 %4424, %4414
  br i1 %4425, label %4426, label %4431

4426:                                             ; preds = %4422
  tail call void @Perl_leave_scope(i32 noundef %4414) #12
  br label %4431

4427:                                             ; preds = %4413
  %4428 = getelementptr inbounds %struct.regexp, ptr %4370, i64 0, i32 17
  %4429 = load ptr, ptr %4428, align 8, !tbaa !38
  %4430 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4429, i64 0, i32 1
  store i64 %4416, ptr %4430, align 8, !tbaa !42
  br label %5550

4431:                                             ; preds = %4422, %4426, %4358, %4359, %4362
  %4432 = phi ptr [ %4302, %4362 ], [ %4302, %4359 ], [ %4302, %4358 ], [ %4423, %4426 ], [ %4423, %4422 ]
  %4433 = phi i32 [ %22, %4362 ], [ 1, %4359 ], [ 1, %4358 ], [ %22, %4426 ], [ %22, %4422 ]
  %4434 = load i8, ptr %4432, align 1, !tbaa !6
  %4435 = zext i8 %4434 to i64
  %4436 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4435
  %4437 = load i8, ptr %4436, align 1, !tbaa !6
  %4438 = zext i8 %4437 to i64
  %4439 = getelementptr inbounds i8, ptr %4432, i64 %4438
  store ptr %4439, ptr %6, align 8, !tbaa !13
  %4440 = icmp ult ptr %4439, %3
  br i1 %4440, label %4300, label %5552, !llvm.loop !212

4441:                                             ; preds = %4288, %4569
  %4442 = phi i32 [ 1, %4288 ], [ %4571, %4569 ]
  %4443 = phi ptr [ %2, %4288 ], [ %4577, %4569 ]
  %4444 = load i8, ptr %4443, align 1, !tbaa !6
  %4445 = icmp sgt i8 %4444, -1
  br i1 %4445, label %4446, label %4452

4446:                                             ; preds = %4441
  %4447 = zext i8 %4444 to i64
  %4448 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4447
  %4449 = load i32, ptr %4448, align 4, !tbaa !34
  %4450 = and i32 %4449, 2048
  %4451 = icmp ne i32 %4450, 0
  br label %4497

4452:                                             ; preds = %4441
  %4453 = and i8 %4444, -2
  %4454 = icmp eq i8 %4453, -62
  br i1 %4454, label %4455, label %4466

4455:                                             ; preds = %4452
  %4456 = shl i8 %4444, 6
  %4457 = getelementptr inbounds i8, ptr %4443, i64 1
  %4458 = load i8, ptr %4457, align 1, !tbaa !6
  %4459 = and i8 %4458, 63
  %4460 = or i8 %4459, %4456
  %4461 = zext i8 %4460 to i64
  %4462 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4461
  %4463 = load i32, ptr %4462, align 4, !tbaa !34
  %4464 = and i32 %4463, 2048
  %4465 = icmp ne i32 %4464, 0
  br label %4497

4466:                                             ; preds = %4452
  switch i8 %4444, label %4496 [
    i8 -31, label %4467
    i8 -30, label %4475
    i8 -29, label %4488
  ]

4467:                                             ; preds = %4466
  %4468 = getelementptr inbounds i8, ptr %4443, i64 1
  %4469 = load i8, ptr %4468, align 1, !tbaa !6
  %4470 = icmp eq i8 %4469, -102
  br i1 %4470, label %4471, label %4496

4471:                                             ; preds = %4467
  %4472 = getelementptr inbounds i8, ptr %4443, i64 2
  %4473 = load i8, ptr %4472, align 1, !tbaa !6
  %4474 = icmp eq i8 %4473, -128
  br label %4497

4475:                                             ; preds = %4466
  %4476 = getelementptr inbounds i8, ptr %4443, i64 1
  %4477 = load i8, ptr %4476, align 1, !tbaa !6
  switch i8 %4477, label %4496 [
    i8 -128, label %4478
    i8 -127, label %4484
  ]

4478:                                             ; preds = %4475
  %4479 = getelementptr inbounds i8, ptr %4443, i64 2
  %4480 = load i8, ptr %4479, align 1, !tbaa !6
  %4481 = icmp ult i8 %4480, -117
  %4482 = icmp eq i8 %4480, -81
  %4483 = or i1 %4481, %4482
  br label %4497

4484:                                             ; preds = %4475
  %4485 = getelementptr inbounds i8, ptr %4443, i64 2
  %4486 = load i8, ptr %4485, align 1, !tbaa !6
  %4487 = icmp eq i8 %4486, -97
  br label %4497

4488:                                             ; preds = %4466
  %4489 = getelementptr inbounds i8, ptr %4443, i64 1
  %4490 = load i8, ptr %4489, align 1, !tbaa !6
  %4491 = icmp eq i8 %4490, -128
  br i1 %4491, label %4492, label %4496

4492:                                             ; preds = %4488
  %4493 = getelementptr inbounds i8, ptr %4443, i64 2
  %4494 = load i8, ptr %4493, align 1, !tbaa !6
  %4495 = icmp eq i8 %4494, -128
  br label %4497

4496:                                             ; preds = %4466, %4488, %4475, %4467
  br i1 %4289, label %4569, label %4500

4497:                                             ; preds = %4492, %4484, %4471, %4455, %4478, %4446
  %4498 = phi i1 [ %4451, %4446 ], [ %4483, %4478 ], [ %4465, %4455 ], [ %4474, %4471 ], [ %4487, %4484 ], [ %4495, %4492 ]
  %4499 = xor i1 %4289, %4498
  br i1 %4499, label %4569, label %4500

4500:                                             ; preds = %4496, %4497
  %4501 = icmp eq i32 %4442, 0
  br i1 %4501, label %4569, label %4502

4502:                                             ; preds = %4500
  %4503 = load i8, ptr %4290, align 8, !tbaa !47, !range !97, !noundef !98
  %4504 = icmp eq i8 %4503, 0
  br i1 %4504, label %4505, label %5550

4505:                                             ; preds = %4502
  %4506 = load ptr, ptr %4, align 8, !tbaa !46
  %4507 = getelementptr i8, ptr %4506, i64 16
  %4508 = load ptr, ptr %4507, align 8, !tbaa !6
  %4509 = getelementptr inbounds %struct.regexp, ptr %4508, i64 0, i32 14
  %4510 = load ptr, ptr %4509, align 8, !tbaa !17
  store ptr null, ptr %4291, align 8, !tbaa !93
  %4511 = load ptr, ptr %4292, align 8, !tbaa !53
  %4512 = ptrtoint ptr %4443 to i64
  %4513 = ptrtoint ptr %4511 to i64
  %4514 = sub i64 %4512, %4513
  %4515 = getelementptr inbounds %struct.regexp, ptr %4508, i64 0, i32 17
  %4516 = load ptr, ptr %4515, align 8, !tbaa !38
  store i64 %4514, ptr %4516, align 8, !tbaa !39
  %4517 = getelementptr inbounds %struct.regexp, ptr %4508, i64 0, i32 15
  store i32 0, ptr %4517, align 8, !tbaa !37
  %4518 = getelementptr inbounds %struct.regexp, ptr %4508, i64 0, i32 16
  store i32 0, ptr %4518, align 4, !tbaa !36
  %4519 = getelementptr inbounds %struct.regexp, ptr %4508, i64 0, i32 12
  %4520 = load i32, ptr %4519, align 8, !tbaa !92
  %4521 = icmp sgt i32 %4520, 0
  br i1 %4521, label %4522, label %4551

4522:                                             ; preds = %4505
  %4523 = and i32 %4520, 7
  %4524 = icmp eq i32 %4523, 0
  br i1 %4524, label %4533, label %4525

4525:                                             ; preds = %4522, %4525
  %4526 = phi i32 [ %4530, %4525 ], [ %4520, %4522 ]
  %4527 = phi ptr [ %4529, %4525 ], [ %4516, %4522 ]
  %4528 = phi i32 [ %4531, %4525 ], [ 0, %4522 ]
  %4529 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4527, i64 1
  %4530 = add nsw i32 %4526, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4529, i8 -1, i64 16, i1 false)
  %4531 = add i32 %4528, 1
  %4532 = icmp eq i32 %4531, %4523
  br i1 %4532, label %4533, label %4525, !llvm.loop !213

4533:                                             ; preds = %4525, %4522
  %4534 = phi i32 [ %4520, %4522 ], [ %4530, %4525 ]
  %4535 = phi ptr [ %4516, %4522 ], [ %4529, %4525 ]
  %4536 = icmp ult i32 %4520, 8
  br i1 %4536, label %4551, label %4537

4537:                                             ; preds = %4533, %4537
  %4538 = phi i32 [ %4548, %4537 ], [ %4534, %4533 ]
  %4539 = phi ptr [ %4547, %4537 ], [ %4535, %4533 ]
  %4540 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4540, i8 -1, i64 16, i1 false)
  %4541 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4541, i8 -1, i64 16, i1 false)
  %4542 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4542, i8 -1, i64 16, i1 false)
  %4543 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4543, i8 -1, i64 16, i1 false)
  %4544 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4544, i8 -1, i64 16, i1 false)
  %4545 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4545, i8 -1, i64 16, i1 false)
  %4546 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4546, i8 -1, i64 16, i1 false)
  %4547 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4539, i64 8
  %4548 = add nsw i32 %4538, -8
  %4549 = add i32 %4538, -9
  %4550 = icmp ult i32 %4549, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4547, i8 -1, i64 16, i1 false)
  br i1 %4550, label %4537, label %4551, !llvm.loop !96

4551:                                             ; preds = %4533, %4537, %4505
  %4552 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4553 = getelementptr inbounds %struct.regexp_internal, ptr %4510, i64 1
  %4554 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4443, ptr noundef nonnull %4553)
  %4555 = icmp eq i64 %4554, -1
  br i1 %4555, label %4556, label %4565

4556:                                             ; preds = %4551
  %4557 = load ptr, ptr %4291, align 8, !tbaa !93
  %4558 = icmp eq ptr %4557, null
  br i1 %4558, label %4560, label %4559

4559:                                             ; preds = %4556
  store ptr %4557, ptr %6, align 8, !tbaa !13
  br label %4560

4560:                                             ; preds = %4559, %4556
  %4561 = phi ptr [ %4557, %4559 ], [ %4443, %4556 ]
  %4562 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4563 = icmp sgt i32 %4562, %4552
  br i1 %4563, label %4564, label %4569

4564:                                             ; preds = %4560
  tail call void @Perl_leave_scope(i32 noundef %4552) #12
  br label %4569

4565:                                             ; preds = %4551
  %4566 = getelementptr inbounds %struct.regexp, ptr %4508, i64 0, i32 17
  %4567 = load ptr, ptr %4566, align 8, !tbaa !38
  %4568 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4567, i64 0, i32 1
  store i64 %4554, ptr %4568, align 8, !tbaa !42
  br label %5550

4569:                                             ; preds = %4560, %4564, %4496, %4497, %4500
  %4570 = phi ptr [ %4443, %4500 ], [ %4443, %4497 ], [ %4443, %4496 ], [ %4561, %4564 ], [ %4561, %4560 ]
  %4571 = phi i32 [ %22, %4500 ], [ 1, %4497 ], [ 1, %4496 ], [ %22, %4564 ], [ %22, %4560 ]
  %4572 = load i8, ptr %4570, align 1, !tbaa !6
  %4573 = zext i8 %4572 to i64
  %4574 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4573
  %4575 = load i8, ptr %4574, align 1, !tbaa !6
  %4576 = zext i8 %4575 to i64
  %4577 = getelementptr inbounds i8, ptr %4570, i64 %4576
  store ptr %4577, ptr %6, align 8, !tbaa !13
  %4578 = icmp ult ptr %4577, %3
  br i1 %4578, label %4441, label %5552, !llvm.loop !214

4579:                                             ; preds = %4281, %4682
  %4580 = phi i32 [ 1, %4281 ], [ %4684, %4682 ]
  %4581 = phi ptr [ %2, %4281 ], [ %4690, %4682 ]
  %4582 = load i8, ptr %4581, align 1, !tbaa !6
  %4583 = icmp sgt i8 %4582, -1
  br i1 %4583, label %4584, label %4590

4584:                                             ; preds = %4579
  %4585 = zext i8 %4582 to i64
  %4586 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4585
  %4587 = load i32, ptr %4586, align 4, !tbaa !34
  %4588 = and i32 %4587, 4096
  %4589 = icmp ne i32 %4588, 0
  br label %4610

4590:                                             ; preds = %4579
  %4591 = icmp eq i8 %4582, -17
  br i1 %4591, label %4592, label %4609

4592:                                             ; preds = %4590
  %4593 = getelementptr inbounds i8, ptr %4581, i64 1
  %4594 = load i8, ptr %4593, align 1, !tbaa !6
  switch i8 %4594, label %4609 [
    i8 -68, label %4595
    i8 -67, label %4604
  ]

4595:                                             ; preds = %4592
  %4596 = getelementptr inbounds i8, ptr %4581, i64 2
  %4597 = load i8, ptr %4596, align 1, !tbaa !6
  %4598 = add i8 %4597, 112
  %4599 = icmp ult i8 %4598, 10
  br i1 %4599, label %4600, label %4601

4600:                                             ; preds = %4595
  br i1 %4282, label %4613, label %4682

4601:                                             ; preds = %4595
  %4602 = add i8 %4597, 95
  %4603 = icmp ult i8 %4602, 6
  br label %4610

4604:                                             ; preds = %4592
  %4605 = getelementptr inbounds i8, ptr %4581, i64 2
  %4606 = load i8, ptr %4605, align 1, !tbaa !6
  %4607 = add i8 %4606, 127
  %4608 = icmp ult i8 %4607, 6
  br label %4610

4609:                                             ; preds = %4592, %4590
  br i1 %4282, label %4682, label %4613

4610:                                             ; preds = %4604, %4601, %4584
  %4611 = phi i1 [ %4589, %4584 ], [ %4603, %4601 ], [ %4608, %4604 ]
  %4612 = xor i1 %4282, %4611
  br i1 %4612, label %4682, label %4613

4613:                                             ; preds = %4600, %4609, %4610
  %4614 = icmp eq i32 %4580, 0
  br i1 %4614, label %4682, label %4615

4615:                                             ; preds = %4613
  %4616 = load i8, ptr %4283, align 8, !tbaa !47, !range !97, !noundef !98
  %4617 = icmp eq i8 %4616, 0
  br i1 %4617, label %4618, label %5550

4618:                                             ; preds = %4615
  %4619 = load ptr, ptr %4, align 8, !tbaa !46
  %4620 = getelementptr i8, ptr %4619, i64 16
  %4621 = load ptr, ptr %4620, align 8, !tbaa !6
  %4622 = getelementptr inbounds %struct.regexp, ptr %4621, i64 0, i32 14
  %4623 = load ptr, ptr %4622, align 8, !tbaa !17
  store ptr null, ptr %4284, align 8, !tbaa !93
  %4624 = load ptr, ptr %4285, align 8, !tbaa !53
  %4625 = ptrtoint ptr %4581 to i64
  %4626 = ptrtoint ptr %4624 to i64
  %4627 = sub i64 %4625, %4626
  %4628 = getelementptr inbounds %struct.regexp, ptr %4621, i64 0, i32 17
  %4629 = load ptr, ptr %4628, align 8, !tbaa !38
  store i64 %4627, ptr %4629, align 8, !tbaa !39
  %4630 = getelementptr inbounds %struct.regexp, ptr %4621, i64 0, i32 15
  store i32 0, ptr %4630, align 8, !tbaa !37
  %4631 = getelementptr inbounds %struct.regexp, ptr %4621, i64 0, i32 16
  store i32 0, ptr %4631, align 4, !tbaa !36
  %4632 = getelementptr inbounds %struct.regexp, ptr %4621, i64 0, i32 12
  %4633 = load i32, ptr %4632, align 8, !tbaa !92
  %4634 = icmp sgt i32 %4633, 0
  br i1 %4634, label %4635, label %4664

4635:                                             ; preds = %4618
  %4636 = and i32 %4633, 7
  %4637 = icmp eq i32 %4636, 0
  br i1 %4637, label %4646, label %4638

4638:                                             ; preds = %4635, %4638
  %4639 = phi i32 [ %4643, %4638 ], [ %4633, %4635 ]
  %4640 = phi ptr [ %4642, %4638 ], [ %4629, %4635 ]
  %4641 = phi i32 [ %4644, %4638 ], [ 0, %4635 ]
  %4642 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4640, i64 1
  %4643 = add nsw i32 %4639, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4642, i8 -1, i64 16, i1 false)
  %4644 = add i32 %4641, 1
  %4645 = icmp eq i32 %4644, %4636
  br i1 %4645, label %4646, label %4638, !llvm.loop !215

4646:                                             ; preds = %4638, %4635
  %4647 = phi i32 [ %4633, %4635 ], [ %4643, %4638 ]
  %4648 = phi ptr [ %4629, %4635 ], [ %4642, %4638 ]
  %4649 = icmp ult i32 %4633, 8
  br i1 %4649, label %4664, label %4650

4650:                                             ; preds = %4646, %4650
  %4651 = phi i32 [ %4661, %4650 ], [ %4647, %4646 ]
  %4652 = phi ptr [ %4660, %4650 ], [ %4648, %4646 ]
  %4653 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4653, i8 -1, i64 16, i1 false)
  %4654 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4654, i8 -1, i64 16, i1 false)
  %4655 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4655, i8 -1, i64 16, i1 false)
  %4656 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4656, i8 -1, i64 16, i1 false)
  %4657 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4657, i8 -1, i64 16, i1 false)
  %4658 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4658, i8 -1, i64 16, i1 false)
  %4659 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4659, i8 -1, i64 16, i1 false)
  %4660 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4652, i64 8
  %4661 = add nsw i32 %4651, -8
  %4662 = add i32 %4651, -9
  %4663 = icmp ult i32 %4662, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4660, i8 -1, i64 16, i1 false)
  br i1 %4663, label %4650, label %4664, !llvm.loop !96

4664:                                             ; preds = %4646, %4650, %4618
  %4665 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4666 = getelementptr inbounds %struct.regexp_internal, ptr %4623, i64 1
  %4667 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4581, ptr noundef nonnull %4666)
  %4668 = icmp eq i64 %4667, -1
  br i1 %4668, label %4669, label %4678

4669:                                             ; preds = %4664
  %4670 = load ptr, ptr %4284, align 8, !tbaa !93
  %4671 = icmp eq ptr %4670, null
  br i1 %4671, label %4673, label %4672

4672:                                             ; preds = %4669
  store ptr %4670, ptr %6, align 8, !tbaa !13
  br label %4673

4673:                                             ; preds = %4672, %4669
  %4674 = phi ptr [ %4670, %4672 ], [ %4581, %4669 ]
  %4675 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4676 = icmp sgt i32 %4675, %4665
  br i1 %4676, label %4677, label %4682

4677:                                             ; preds = %4673
  tail call void @Perl_leave_scope(i32 noundef %4665) #12
  br label %4682

4678:                                             ; preds = %4664
  %4679 = getelementptr inbounds %struct.regexp, ptr %4621, i64 0, i32 17
  %4680 = load ptr, ptr %4679, align 8, !tbaa !38
  %4681 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4680, i64 0, i32 1
  store i64 %4667, ptr %4681, align 8, !tbaa !42
  br label %5550

4682:                                             ; preds = %4673, %4677, %4600, %4609, %4610, %4613
  %4683 = phi ptr [ %4581, %4613 ], [ %4581, %4610 ], [ %4581, %4609 ], [ %4581, %4600 ], [ %4674, %4677 ], [ %4674, %4673 ]
  %4684 = phi i32 [ %22, %4613 ], [ 1, %4610 ], [ 1, %4609 ], [ 1, %4600 ], [ %22, %4677 ], [ %22, %4673 ]
  %4685 = load i8, ptr %4683, align 1, !tbaa !6
  %4686 = zext i8 %4685 to i64
  %4687 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4686
  %4688 = load i8, ptr %4687, align 1, !tbaa !6
  %4689 = zext i8 %4688 to i64
  %4690 = getelementptr inbounds i8, ptr %4683, i64 %4689
  store ptr %4690, ptr %6, align 8, !tbaa !13
  %4691 = icmp ult ptr %4690, %3
  br i1 %4691, label %4579, label %5552, !llvm.loop !216

4692:                                             ; preds = %4274, %4801
  %4693 = phi i32 [ 1, %4274 ], [ %4803, %4801 ]
  %4694 = phi ptr [ %2, %4274 ], [ %4809, %4801 ]
  %4695 = load i8, ptr %4694, align 1, !tbaa !6
  %4696 = icmp sgt i8 %4695, -1
  br i1 %4696, label %4697, label %4703

4697:                                             ; preds = %4692
  %4698 = zext i8 %4695 to i64
  %4699 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4698
  %4700 = load i32, ptr %4699, align 4, !tbaa !34
  %4701 = and i32 %4700, 32768
  %4702 = icmp ne i32 %4701, 0
  br label %4729

4703:                                             ; preds = %4692
  %4704 = and i8 %4695, -2
  %4705 = icmp eq i8 %4704, -62
  br i1 %4705, label %4706, label %4717

4706:                                             ; preds = %4703
  %4707 = shl i8 %4695, 6
  %4708 = getelementptr inbounds i8, ptr %4694, i64 1
  %4709 = load i8, ptr %4708, align 1, !tbaa !6
  %4710 = and i8 %4709, 63
  %4711 = or i8 %4710, %4707
  %4712 = zext i8 %4711 to i64
  %4713 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4712
  %4714 = load i32, ptr %4713, align 4, !tbaa !34
  %4715 = and i32 %4714, 32768
  %4716 = icmp ne i32 %4715, 0
  br label %4729

4717:                                             ; preds = %4703
  %4718 = icmp eq i8 %4695, -30
  br i1 %4718, label %4719, label %4728

4719:                                             ; preds = %4717
  %4720 = getelementptr inbounds i8, ptr %4694, i64 1
  %4721 = load i8, ptr %4720, align 1, !tbaa !6
  %4722 = icmp eq i8 %4721, -128
  br i1 %4722, label %4723, label %4728

4723:                                             ; preds = %4719
  %4724 = getelementptr inbounds i8, ptr %4694, i64 2
  %4725 = load i8, ptr %4724, align 1, !tbaa !6
  %4726 = and i8 %4725, -2
  %4727 = icmp eq i8 %4726, -88
  br label %4729

4728:                                             ; preds = %4717, %4719
  br i1 %4275, label %4801, label %4732

4729:                                             ; preds = %4723, %4706, %4697
  %4730 = phi i1 [ %4702, %4697 ], [ %4716, %4706 ], [ %4727, %4723 ]
  %4731 = xor i1 %4275, %4730
  br i1 %4731, label %4801, label %4732

4732:                                             ; preds = %4728, %4729
  %4733 = icmp eq i32 %4693, 0
  br i1 %4733, label %4801, label %4734

4734:                                             ; preds = %4732
  %4735 = load i8, ptr %4276, align 8, !tbaa !47, !range !97, !noundef !98
  %4736 = icmp eq i8 %4735, 0
  br i1 %4736, label %4737, label %5550

4737:                                             ; preds = %4734
  %4738 = load ptr, ptr %4, align 8, !tbaa !46
  %4739 = getelementptr i8, ptr %4738, i64 16
  %4740 = load ptr, ptr %4739, align 8, !tbaa !6
  %4741 = getelementptr inbounds %struct.regexp, ptr %4740, i64 0, i32 14
  %4742 = load ptr, ptr %4741, align 8, !tbaa !17
  store ptr null, ptr %4277, align 8, !tbaa !93
  %4743 = load ptr, ptr %4278, align 8, !tbaa !53
  %4744 = ptrtoint ptr %4694 to i64
  %4745 = ptrtoint ptr %4743 to i64
  %4746 = sub i64 %4744, %4745
  %4747 = getelementptr inbounds %struct.regexp, ptr %4740, i64 0, i32 17
  %4748 = load ptr, ptr %4747, align 8, !tbaa !38
  store i64 %4746, ptr %4748, align 8, !tbaa !39
  %4749 = getelementptr inbounds %struct.regexp, ptr %4740, i64 0, i32 15
  store i32 0, ptr %4749, align 8, !tbaa !37
  %4750 = getelementptr inbounds %struct.regexp, ptr %4740, i64 0, i32 16
  store i32 0, ptr %4750, align 4, !tbaa !36
  %4751 = getelementptr inbounds %struct.regexp, ptr %4740, i64 0, i32 12
  %4752 = load i32, ptr %4751, align 8, !tbaa !92
  %4753 = icmp sgt i32 %4752, 0
  br i1 %4753, label %4754, label %4783

4754:                                             ; preds = %4737
  %4755 = and i32 %4752, 7
  %4756 = icmp eq i32 %4755, 0
  br i1 %4756, label %4765, label %4757

4757:                                             ; preds = %4754, %4757
  %4758 = phi i32 [ %4762, %4757 ], [ %4752, %4754 ]
  %4759 = phi ptr [ %4761, %4757 ], [ %4748, %4754 ]
  %4760 = phi i32 [ %4763, %4757 ], [ 0, %4754 ]
  %4761 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4759, i64 1
  %4762 = add nsw i32 %4758, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4761, i8 -1, i64 16, i1 false)
  %4763 = add i32 %4760, 1
  %4764 = icmp eq i32 %4763, %4755
  br i1 %4764, label %4765, label %4757, !llvm.loop !217

4765:                                             ; preds = %4757, %4754
  %4766 = phi i32 [ %4752, %4754 ], [ %4762, %4757 ]
  %4767 = phi ptr [ %4748, %4754 ], [ %4761, %4757 ]
  %4768 = icmp ult i32 %4752, 8
  br i1 %4768, label %4783, label %4769

4769:                                             ; preds = %4765, %4769
  %4770 = phi i32 [ %4780, %4769 ], [ %4766, %4765 ]
  %4771 = phi ptr [ %4779, %4769 ], [ %4767, %4765 ]
  %4772 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4772, i8 -1, i64 16, i1 false)
  %4773 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4773, i8 -1, i64 16, i1 false)
  %4774 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4774, i8 -1, i64 16, i1 false)
  %4775 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4775, i8 -1, i64 16, i1 false)
  %4776 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4776, i8 -1, i64 16, i1 false)
  %4777 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4777, i8 -1, i64 16, i1 false)
  %4778 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4778, i8 -1, i64 16, i1 false)
  %4779 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4771, i64 8
  %4780 = add nsw i32 %4770, -8
  %4781 = add i32 %4770, -9
  %4782 = icmp ult i32 %4781, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4779, i8 -1, i64 16, i1 false)
  br i1 %4782, label %4769, label %4783, !llvm.loop !96

4783:                                             ; preds = %4765, %4769, %4737
  %4784 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4785 = getelementptr inbounds %struct.regexp_internal, ptr %4742, i64 1
  %4786 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4694, ptr noundef nonnull %4785)
  %4787 = icmp eq i64 %4786, -1
  br i1 %4787, label %4788, label %4797

4788:                                             ; preds = %4783
  %4789 = load ptr, ptr %4277, align 8, !tbaa !93
  %4790 = icmp eq ptr %4789, null
  br i1 %4790, label %4792, label %4791

4791:                                             ; preds = %4788
  store ptr %4789, ptr %6, align 8, !tbaa !13
  br label %4792

4792:                                             ; preds = %4791, %4788
  %4793 = phi ptr [ %4789, %4791 ], [ %4694, %4788 ]
  %4794 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4795 = icmp sgt i32 %4794, %4784
  br i1 %4795, label %4796, label %4801

4796:                                             ; preds = %4792
  tail call void @Perl_leave_scope(i32 noundef %4784) #12
  br label %4801

4797:                                             ; preds = %4783
  %4798 = getelementptr inbounds %struct.regexp, ptr %4740, i64 0, i32 17
  %4799 = load ptr, ptr %4798, align 8, !tbaa !38
  %4800 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4799, i64 0, i32 1
  store i64 %4786, ptr %4800, align 8, !tbaa !42
  br label %5550

4801:                                             ; preds = %4792, %4796, %4728, %4729, %4732
  %4802 = phi ptr [ %4694, %4732 ], [ %4694, %4729 ], [ %4694, %4728 ], [ %4793, %4796 ], [ %4793, %4792 ]
  %4803 = phi i32 [ %22, %4732 ], [ 1, %4729 ], [ 1, %4728 ], [ %22, %4796 ], [ %22, %4792 ]
  %4804 = load i8, ptr %4802, align 1, !tbaa !6
  %4805 = zext i8 %4804 to i64
  %4806 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4805
  %4807 = load i8, ptr %4806, align 1, !tbaa !6
  %4808 = zext i8 %4807 to i64
  %4809 = getelementptr inbounds i8, ptr %4802, i64 %4808
  store ptr %4809, ptr %6, align 8, !tbaa !13
  %4810 = icmp ult ptr %4809, %3
  br i1 %4810, label %4692, label %5552, !llvm.loop !218

4811:                                             ; preds = %4267, %4903
  %4812 = phi i32 [ 1, %4267 ], [ %4905, %4903 ]
  %4813 = phi ptr [ %2, %4267 ], [ %4911, %4903 ]
  %4814 = load i8, ptr %4813, align 1, !tbaa !6
  %4815 = icmp sgt i8 %4814, -1
  br i1 %4815, label %4826, label %4816

4816:                                             ; preds = %4811
  %4817 = and i8 %4814, -2
  %4818 = icmp eq i8 %4817, -62
  br i1 %4818, label %4820, label %4819

4819:                                             ; preds = %4816
  br i1 %4268, label %4903, label %4834

4820:                                             ; preds = %4816
  %4821 = shl i8 %4814, 6
  %4822 = getelementptr inbounds i8, ptr %4813, i64 1
  %4823 = load i8, ptr %4822, align 1, !tbaa !6
  %4824 = and i8 %4823, 63
  %4825 = or i8 %4824, %4821
  br label %4826

4826:                                             ; preds = %4811, %4820
  %4827 = phi i8 [ %4825, %4820 ], [ %4814, %4811 ]
  %4828 = zext i8 %4827 to i64
  %4829 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4828
  %4830 = load i32, ptr %4829, align 4, !tbaa !34
  %4831 = and i32 %4830, 8192
  %4832 = icmp ne i32 %4831, 0
  %4833 = xor i1 %4268, %4832
  br i1 %4833, label %4903, label %4834

4834:                                             ; preds = %4819, %4826
  %4835 = icmp eq i32 %4812, 0
  br i1 %4835, label %4903, label %4836

4836:                                             ; preds = %4834
  %4837 = load i8, ptr %4269, align 8, !tbaa !47, !range !97, !noundef !98
  %4838 = icmp eq i8 %4837, 0
  br i1 %4838, label %4839, label %5550

4839:                                             ; preds = %4836
  %4840 = load ptr, ptr %4, align 8, !tbaa !46
  %4841 = getelementptr i8, ptr %4840, i64 16
  %4842 = load ptr, ptr %4841, align 8, !tbaa !6
  %4843 = getelementptr inbounds %struct.regexp, ptr %4842, i64 0, i32 14
  %4844 = load ptr, ptr %4843, align 8, !tbaa !17
  store ptr null, ptr %4270, align 8, !tbaa !93
  %4845 = load ptr, ptr %4271, align 8, !tbaa !53
  %4846 = ptrtoint ptr %4813 to i64
  %4847 = ptrtoint ptr %4845 to i64
  %4848 = sub i64 %4846, %4847
  %4849 = getelementptr inbounds %struct.regexp, ptr %4842, i64 0, i32 17
  %4850 = load ptr, ptr %4849, align 8, !tbaa !38
  store i64 %4848, ptr %4850, align 8, !tbaa !39
  %4851 = getelementptr inbounds %struct.regexp, ptr %4842, i64 0, i32 15
  store i32 0, ptr %4851, align 8, !tbaa !37
  %4852 = getelementptr inbounds %struct.regexp, ptr %4842, i64 0, i32 16
  store i32 0, ptr %4852, align 4, !tbaa !36
  %4853 = getelementptr inbounds %struct.regexp, ptr %4842, i64 0, i32 12
  %4854 = load i32, ptr %4853, align 8, !tbaa !92
  %4855 = icmp sgt i32 %4854, 0
  br i1 %4855, label %4856, label %4885

4856:                                             ; preds = %4839
  %4857 = and i32 %4854, 7
  %4858 = icmp eq i32 %4857, 0
  br i1 %4858, label %4867, label %4859

4859:                                             ; preds = %4856, %4859
  %4860 = phi i32 [ %4864, %4859 ], [ %4854, %4856 ]
  %4861 = phi ptr [ %4863, %4859 ], [ %4850, %4856 ]
  %4862 = phi i32 [ %4865, %4859 ], [ 0, %4856 ]
  %4863 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4861, i64 1
  %4864 = add nsw i32 %4860, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4863, i8 -1, i64 16, i1 false)
  %4865 = add i32 %4862, 1
  %4866 = icmp eq i32 %4865, %4857
  br i1 %4866, label %4867, label %4859, !llvm.loop !219

4867:                                             ; preds = %4859, %4856
  %4868 = phi i32 [ %4854, %4856 ], [ %4864, %4859 ]
  %4869 = phi ptr [ %4850, %4856 ], [ %4863, %4859 ]
  %4870 = icmp ult i32 %4854, 8
  br i1 %4870, label %4885, label %4871

4871:                                             ; preds = %4867, %4871
  %4872 = phi i32 [ %4882, %4871 ], [ %4868, %4867 ]
  %4873 = phi ptr [ %4881, %4871 ], [ %4869, %4867 ]
  %4874 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4874, i8 -1, i64 16, i1 false)
  %4875 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4875, i8 -1, i64 16, i1 false)
  %4876 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4876, i8 -1, i64 16, i1 false)
  %4877 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4877, i8 -1, i64 16, i1 false)
  %4878 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4878, i8 -1, i64 16, i1 false)
  %4879 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4879, i8 -1, i64 16, i1 false)
  %4880 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4880, i8 -1, i64 16, i1 false)
  %4881 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4873, i64 8
  %4882 = add nsw i32 %4872, -8
  %4883 = add i32 %4872, -9
  %4884 = icmp ult i32 %4883, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4881, i8 -1, i64 16, i1 false)
  br i1 %4884, label %4871, label %4885, !llvm.loop !96

4885:                                             ; preds = %4867, %4871, %4839
  %4886 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4887 = getelementptr inbounds %struct.regexp_internal, ptr %4844, i64 1
  %4888 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4813, ptr noundef nonnull %4887)
  %4889 = icmp eq i64 %4888, -1
  br i1 %4889, label %4890, label %4899

4890:                                             ; preds = %4885
  %4891 = load ptr, ptr %4270, align 8, !tbaa !93
  %4892 = icmp eq ptr %4891, null
  br i1 %4892, label %4894, label %4893

4893:                                             ; preds = %4890
  store ptr %4891, ptr %6, align 8, !tbaa !13
  br label %4894

4894:                                             ; preds = %4893, %4890
  %4895 = phi ptr [ %4891, %4893 ], [ %4813, %4890 ]
  %4896 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4897 = icmp sgt i32 %4896, %4886
  br i1 %4897, label %4898, label %4903

4898:                                             ; preds = %4894
  tail call void @Perl_leave_scope(i32 noundef %4886) #12
  br label %4903

4899:                                             ; preds = %4885
  %4900 = getelementptr inbounds %struct.regexp, ptr %4842, i64 0, i32 17
  %4901 = load ptr, ptr %4900, align 8, !tbaa !38
  %4902 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4901, i64 0, i32 1
  store i64 %4888, ptr %4902, align 8, !tbaa !42
  br label %5550

4903:                                             ; preds = %4894, %4898, %4819, %4826, %4834
  %4904 = phi ptr [ %4813, %4834 ], [ %4813, %4826 ], [ %4813, %4819 ], [ %4895, %4898 ], [ %4895, %4894 ]
  %4905 = phi i32 [ %22, %4834 ], [ 1, %4826 ], [ 1, %4819 ], [ %22, %4898 ], [ %22, %4894 ]
  %4906 = load i8, ptr %4904, align 1, !tbaa !6
  %4907 = zext i8 %4906 to i64
  %4908 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4907
  %4909 = load i8, ptr %4908, align 1, !tbaa !6
  %4910 = zext i8 %4909 to i64
  %4911 = getelementptr inbounds i8, ptr %4904, i64 %4910
  store ptr %4911, ptr %6, align 8, !tbaa !13
  %4912 = icmp ult ptr %4911, %3
  br i1 %4912, label %4811, label %5552, !llvm.loop !220

4913:                                             ; preds = %4264
  %4914 = zext i8 %32 to i32
  %4915 = zext i8 %32 to i64
  %4916 = getelementptr inbounds [0 x ptr], ptr @PL_reg_name, i64 0, i64 %4915
  %4917 = load ptr, ptr %4916, align 8, !tbaa !13
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.5, i32 noundef %4914, ptr noundef %4917, i32 noundef %4145) #12
  br label %5552

4918:                                             ; preds = %4156
  %4919 = zext i8 %4144 to i64
  %4920 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %4919
  %4921 = load ptr, ptr %4920, align 8, !tbaa !13
  %4922 = icmp eq ptr %4921, null
  br i1 %4922, label %4923, label %4928

4923:                                             ; preds = %4918
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %14) #12
  store i8 4, ptr %14, align 1, !tbaa !6
  %4924 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %4919
  %4925 = load ptr, ptr %4924, align 8, !tbaa !13
  %4926 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %4925, ptr noundef nonnull %14) #12
  store ptr %4926, ptr %4920, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %14) #12
  %4927 = load ptr, ptr %6, align 8, !tbaa !13
  br label %4928

4928:                                             ; preds = %4918, %4923
  %4929 = phi ptr [ %4158, %4918 ], [ %4927, %4923 ]
  %4930 = icmp ult ptr %4929, %3
  br i1 %4930, label %4931, label %5552

4931:                                             ; preds = %4928
  %4932 = icmp ne i8 %4143, 0
  br label %4933

4933:                                             ; preds = %4931, %5036
  %4934 = phi ptr [ %4929, %4931 ], [ %5044, %5036 ]
  %4935 = phi i32 [ %4157, %4931 ], [ %5037, %5036 ]
  %4936 = load i8, ptr %4934, align 1, !tbaa !6
  %4937 = icmp sgt i8 %4936, -1
  br i1 %4937, label %4938, label %4945

4938:                                             ; preds = %4933
  %4939 = zext i8 %4936 to i64
  %4940 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4939
  %4941 = load i32, ptr %4940, align 4, !tbaa !34
  %4942 = lshr i32 %4941, %4145
  %4943 = and i32 %4942, 1
  %4944 = zext i32 %4943 to i64
  br label %4963

4945:                                             ; preds = %4933
  %4946 = and i8 %4936, -2
  %4947 = icmp eq i8 %4946, -62
  br i1 %4947, label %4948, label %4960

4948:                                             ; preds = %4945
  %4949 = shl i8 %4936, 6
  %4950 = getelementptr inbounds i8, ptr %4934, i64 1
  %4951 = load i8, ptr %4950, align 1, !tbaa !6
  %4952 = and i8 %4951, 63
  %4953 = or i8 %4952, %4949
  %4954 = zext i8 %4953 to i64
  %4955 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4954
  %4956 = load i32, ptr %4955, align 4, !tbaa !34
  %4957 = and i32 %4956, %4151
  %4958 = icmp ne i32 %4957, 0
  %4959 = zext i1 %4958 to i64
  br label %4963

4960:                                             ; preds = %4945
  %4961 = load ptr, ptr %4920, align 8, !tbaa !13
  %4962 = call i64 @Perl_swash_fetch(ptr noundef %4961, ptr noundef nonnull %4934, i1 noundef zeroext true) #12
  br label %4963

4963:                                             ; preds = %4948, %4960, %4938
  %4964 = phi i64 [ %4944, %4938 ], [ %4959, %4948 ], [ %4962, %4960 ]
  %4965 = icmp eq i64 %4964, 0
  %4966 = xor i1 %4932, %4965
  br i1 %4966, label %5036, label %4967

4967:                                             ; preds = %4963
  %4968 = icmp eq i32 %4935, 0
  br i1 %4968, label %5036, label %4969

4969:                                             ; preds = %4967
  %4970 = load i8, ptr %4153, align 8, !tbaa !47, !range !97, !noundef !98
  %4971 = icmp eq i8 %4970, 0
  br i1 %4971, label %4972, label %5550

4972:                                             ; preds = %4969
  %4973 = load ptr, ptr %4, align 8, !tbaa !46
  %4974 = getelementptr i8, ptr %4973, i64 16
  %4975 = load ptr, ptr %4974, align 8, !tbaa !6
  %4976 = getelementptr inbounds %struct.regexp, ptr %4975, i64 0, i32 14
  %4977 = load ptr, ptr %4976, align 8, !tbaa !17
  store ptr null, ptr %4154, align 8, !tbaa !93
  %4978 = load ptr, ptr %6, align 8, !tbaa !13
  %4979 = load ptr, ptr %4155, align 8, !tbaa !53
  %4980 = ptrtoint ptr %4978 to i64
  %4981 = ptrtoint ptr %4979 to i64
  %4982 = sub i64 %4980, %4981
  %4983 = getelementptr inbounds %struct.regexp, ptr %4975, i64 0, i32 17
  %4984 = load ptr, ptr %4983, align 8, !tbaa !38
  store i64 %4982, ptr %4984, align 8, !tbaa !39
  %4985 = getelementptr inbounds %struct.regexp, ptr %4975, i64 0, i32 15
  store i32 0, ptr %4985, align 8, !tbaa !37
  %4986 = getelementptr inbounds %struct.regexp, ptr %4975, i64 0, i32 16
  store i32 0, ptr %4986, align 4, !tbaa !36
  %4987 = getelementptr inbounds %struct.regexp, ptr %4975, i64 0, i32 12
  %4988 = load i32, ptr %4987, align 8, !tbaa !92
  %4989 = icmp sgt i32 %4988, 0
  br i1 %4989, label %4990, label %5019

4990:                                             ; preds = %4972
  %4991 = and i32 %4988, 7
  %4992 = icmp eq i32 %4991, 0
  br i1 %4992, label %5001, label %4993

4993:                                             ; preds = %4990, %4993
  %4994 = phi i32 [ %4998, %4993 ], [ %4988, %4990 ]
  %4995 = phi ptr [ %4997, %4993 ], [ %4984, %4990 ]
  %4996 = phi i32 [ %4999, %4993 ], [ 0, %4990 ]
  %4997 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4995, i64 1
  %4998 = add nsw i32 %4994, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4997, i8 -1, i64 16, i1 false)
  %4999 = add i32 %4996, 1
  %5000 = icmp eq i32 %4999, %4991
  br i1 %5000, label %5001, label %4993, !llvm.loop !221

5001:                                             ; preds = %4993, %4990
  %5002 = phi i32 [ %4988, %4990 ], [ %4998, %4993 ]
  %5003 = phi ptr [ %4984, %4990 ], [ %4997, %4993 ]
  %5004 = icmp ult i32 %4988, 8
  br i1 %5004, label %5019, label %5005

5005:                                             ; preds = %5001, %5005
  %5006 = phi i32 [ %5016, %5005 ], [ %5002, %5001 ]
  %5007 = phi ptr [ %5015, %5005 ], [ %5003, %5001 ]
  %5008 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5008, i8 -1, i64 16, i1 false)
  %5009 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5009, i8 -1, i64 16, i1 false)
  %5010 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5010, i8 -1, i64 16, i1 false)
  %5011 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5011, i8 -1, i64 16, i1 false)
  %5012 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5012, i8 -1, i64 16, i1 false)
  %5013 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5013, i8 -1, i64 16, i1 false)
  %5014 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5014, i8 -1, i64 16, i1 false)
  %5015 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5007, i64 8
  %5016 = add nsw i32 %5006, -8
  %5017 = add i32 %5006, -9
  %5018 = icmp ult i32 %5017, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5015, i8 -1, i64 16, i1 false)
  br i1 %5018, label %5005, label %5019, !llvm.loop !96

5019:                                             ; preds = %5001, %5005, %4972
  %5020 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %5021 = getelementptr inbounds %struct.regexp_internal, ptr %4977, i64 1
  %5022 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %4978, ptr noundef nonnull %5021)
  %5023 = icmp eq i64 %5022, -1
  br i1 %5023, label %5024, label %5032

5024:                                             ; preds = %5019
  %5025 = load ptr, ptr %4154, align 8, !tbaa !93
  %5026 = icmp eq ptr %5025, null
  br i1 %5026, label %5028, label %5027

5027:                                             ; preds = %5024
  store ptr %5025, ptr %6, align 8, !tbaa !13
  br label %5028

5028:                                             ; preds = %5027, %5024
  %5029 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %5030 = icmp sgt i32 %5029, %5020
  br i1 %5030, label %5031, label %5036

5031:                                             ; preds = %5028
  call void @Perl_leave_scope(i32 noundef %5020) #12
  br label %5036

5032:                                             ; preds = %5019
  %5033 = getelementptr inbounds %struct.regexp, ptr %4975, i64 0, i32 17
  %5034 = load ptr, ptr %5033, align 8, !tbaa !38
  %5035 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5034, i64 0, i32 1
  store i64 %5022, ptr %5035, align 8, !tbaa !42
  br label %5550

5036:                                             ; preds = %5028, %5031, %4963, %4967
  %5037 = phi i32 [ %22, %4967 ], [ 1, %4963 ], [ %22, %5031 ], [ %22, %5028 ]
  %5038 = load ptr, ptr %6, align 8, !tbaa !13
  %5039 = load i8, ptr %5038, align 1, !tbaa !6
  %5040 = zext i8 %5039 to i64
  %5041 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5040
  %5042 = load i8, ptr %5041, align 1, !tbaa !6
  %5043 = zext i8 %5042 to i64
  %5044 = getelementptr inbounds i8, ptr %5038, i64 %5043
  store ptr %5044, ptr %6, align 8, !tbaa !13
  %5045 = icmp ult ptr %5044, %3
  br i1 %5045, label %4933, label %5552, !llvm.loop !222

5046:                                             ; preds = %5, %5
  %5047 = load i8, ptr %1, align 2, !tbaa !139
  switch i8 %5047, label %5054 [
    i8 31, label %5048
    i8 32, label %5050
    i8 36, label %5052
    i8 38, label %5056
  ]

5048:                                             ; preds = %5046
  %5049 = zext i8 %24 to i32
  br label %5056

5050:                                             ; preds = %5046
  %5051 = select i1 %25, i32 6, i32 0
  br label %5056

5052:                                             ; preds = %5046
  %5053 = select i1 %25, i32 4, i32 5
  br label %5056

5054:                                             ; preds = %5046
  %5055 = select i1 %25, i32 2, i32 3
  br label %5056

5056:                                             ; preds = %5046, %5050, %5054, %5052, %5048
  %5057 = phi i32 [ %5049, %5048 ], [ %5051, %5050 ], [ %5053, %5052 ], [ %5055, %5054 ], [ 7, %5046 ]
  %5058 = getelementptr inbounds %struct.regexp_internal, ptr %30, i64 0, i32 3
  %5059 = load ptr, ptr %5058, align 8, !tbaa !223
  %5060 = getelementptr inbounds %struct.regnode_1, ptr %1, i64 0, i32 3
  %5061 = load i32, ptr %5060, align 4, !tbaa !224
  %5062 = zext i32 %5061 to i64
  %5063 = getelementptr inbounds %struct.reg_data, ptr %5059, i64 0, i32 2, i64 %5062
  %5064 = load ptr, ptr %5063, align 8, !tbaa !13
  %5065 = getelementptr inbounds %struct._reg_ac_data, ptr %5064, i64 0, i32 1
  %5066 = load i32, ptr %5065, align 4, !tbaa !226
  %5067 = zext i32 %5066 to i64
  %5068 = getelementptr inbounds %struct.reg_data, ptr %5059, i64 0, i32 2, i64 %5067
  %5069 = load ptr, ptr %5068, align 8, !tbaa !13
  %5070 = add i32 %5066, 1
  %5071 = zext i32 %5070 to i64
  %5072 = getelementptr inbounds %struct.reg_data, ptr %5059, i64 0, i32 2, i64 %5071
  %5073 = load ptr, ptr %5072, align 8, !tbaa !13
  %5074 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 10
  %5075 = load i64, ptr %5074, align 8, !tbaa !228
  %5076 = sub i64 0, %5075
  %5077 = getelementptr inbounds i8, ptr %3, i64 %5076
  %5078 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 11
  %5079 = load i64, ptr %5078, align 8, !tbaa !230
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %15) #12
  tail call void @Perl_push_scope() #12
  tail call void @Perl_save_strlen(ptr noundef nonnull @PL_tmps_floor) #12
  %5080 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !86
  store i64 %5080, ptr @PL_tmps_floor, align 8, !tbaa !86
  %5081 = shl i64 %5079, 3
  %5082 = tail call ptr @Perl_newSV(i64 noundef %5081) #12
  %5083 = load ptr, ptr %5082, align 8, !tbaa !24
  %5084 = getelementptr inbounds %struct.xpv, ptr %5083, i64 0, i32 2
  store i64 %5081, ptr %5084, align 8, !tbaa !110
  %5085 = getelementptr inbounds %struct.sv, ptr %5082, i64 0, i32 2
  %5086 = load i32, ptr %5085, align 4, !tbaa !9
  %5087 = or i32 %5086, 17408
  store i32 %5087, ptr %5085, align 4, !tbaa !9
  %5088 = tail call ptr @Perl_sv_2mortal(ptr noundef nonnull %5082) #12
  %5089 = load i32, ptr %5085, align 4, !tbaa !9
  %5090 = and i32 %5089, 2098176
  %5091 = icmp eq i32 %5090, 1024
  br i1 %5091, label %5092, label %5095

5092:                                             ; preds = %5056
  %5093 = getelementptr inbounds %struct.sv, ptr %5082, i64 0, i32 3
  %5094 = load ptr, ptr %5093, align 8, !tbaa !6
  br label %5097

5095:                                             ; preds = %5056
  %5096 = tail call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %5082, ptr noundef null, i32 noundef 2) #12
  br label %5097

5097:                                             ; preds = %5095, %5092
  %5098 = phi ptr [ %5094, %5092 ], [ %5096, %5095 ]
  %5099 = icmp eq i32 %5057, 2
  br i1 %5099, label %5110, label %5100

5100:                                             ; preds = %5097
  %5101 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 5
  %5102 = load ptr, ptr %5101, align 8, !tbaa !231
  %5103 = icmp eq ptr %5102, null
  br i1 %5103, label %5104, label %5107

5104:                                             ; preds = %5100
  %5105 = load i8, ptr %31, align 1, !tbaa !119
  %5106 = icmp eq i8 %5105, 75
  br i1 %5106, label %5107, label %5110

5107:                                             ; preds = %5104, %5100
  %5108 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4
  %5109 = select i1 %5103, ptr %5108, ptr %5102
  br label %5110

5110:                                             ; preds = %5107, %5104, %5097
  %5111 = phi ptr [ null, %5104 ], [ null, %5097 ], [ %5109, %5107 ]
  %5112 = icmp ult ptr %5077, %2
  br i1 %5112, label %5542, label %5113

5113:                                             ; preds = %5110
  %5114 = getelementptr inbounds %struct._reg_ac_data, ptr %5064, i64 0, i32 3
  %5115 = icmp eq ptr %5111, null
  %5116 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 7
  %5117 = trunc i32 %5057 to i8
  %5118 = icmp eq ptr %5073, null
  %5119 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 2
  %5120 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 8
  %5121 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 1
  %5122 = getelementptr inbounds %struct._reg_trie_data, ptr %5069, i64 0, i32 4
  %5123 = getelementptr inbounds %struct._reg_ac_data, ptr %5064, i64 0, i32 2
  %5124 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %5125 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %5126 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %5127 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  br label %5128

5128:                                             ; preds = %5113, %5539
  %5129 = call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %5130 = xor i1 %5129, true
  %5131 = zext i1 %5130 to i32
  %5132 = load ptr, ptr %6, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #12
  store i64 0, ptr %16, align 8, !tbaa !86
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #12
  store i64 0, ptr %17, align 8, !tbaa !86
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #12
  store i64 0, ptr %18, align 8, !tbaa !86
  %5133 = load ptr, ptr %5114, align 8, !tbaa !232
  %5134 = icmp ugt ptr %5132, %3
  br i1 %5134, label %5424, label %5135

5135:                                             ; preds = %5128, %5415
  %5136 = phi i32 [ %5213, %5415 ], [ 0, %5128 ]
  %5137 = phi ptr [ %5420, %5415 ], [ null, %5128 ]
  %5138 = phi ptr [ %5419, %5415 ], [ null, %5128 ]
  %5139 = phi i32 [ %5418, %5415 ], [ 1, %5128 ]
  %5140 = phi i32 [ %5417, %5415 ], [ 1, %5128 ]
  %5141 = phi ptr [ %5422, %5415 ], [ %5132, %5128 ]
  %5142 = phi ptr [ %5416, %5415 ], [ %5133, %5128 ]
  %5143 = zext i32 %5139 to i64
  %5144 = getelementptr inbounds %struct._reg_trie_state, ptr %5142, i64 %5143
  %5145 = load i16, ptr %5144, align 8, !tbaa !233
  %5146 = icmp eq i32 %5139, 1
  br i1 %5146, label %5147, label %5193

5147:                                             ; preds = %5135
  br i1 %5115, label %5190, label %5148

5148:                                             ; preds = %5147
  %5149 = icmp ugt ptr %5141, %5077
  br i1 %25, label %5151, label %5150

5150:                                             ; preds = %5148
  br i1 %5149, label %5188, label %5172

5151:                                             ; preds = %5148
  br i1 %5149, label %5188, label %5152

5152:                                             ; preds = %5151, %5165
  %5153 = phi ptr [ %5170, %5165 ], [ %5141, %5151 ]
  %5154 = load i8, ptr %5153, align 1, !tbaa !6
  %5155 = zext i8 %5154 to i32
  %5156 = lshr i32 %5155, 3
  %5157 = zext i32 %5156 to i64
  %5158 = getelementptr inbounds i8, ptr %5111, i64 %5157
  %5159 = load i8, ptr %5158, align 1, !tbaa !6
  %5160 = zext i8 %5159 to i32
  %5161 = and i32 %5155, 7
  %5162 = shl nuw nsw i32 1, %5161
  %5163 = and i32 %5162, %5160
  %5164 = icmp eq i32 %5163, 0
  br i1 %5164, label %5165, label %5188

5165:                                             ; preds = %5152
  %5166 = zext i8 %5154 to i64
  %5167 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5166
  %5168 = load i8, ptr %5167, align 1, !tbaa !6
  %5169 = zext i8 %5168 to i64
  %5170 = getelementptr inbounds i8, ptr %5153, i64 %5169
  %5171 = icmp ugt ptr %5170, %5077
  br i1 %5171, label %5188, label %5152, !llvm.loop !235

5172:                                             ; preds = %5150, %5185
  %5173 = phi ptr [ %5186, %5185 ], [ %5141, %5150 ]
  %5174 = load i8, ptr %5173, align 1, !tbaa !6
  %5175 = zext i8 %5174 to i32
  %5176 = lshr i32 %5175, 3
  %5177 = zext i32 %5176 to i64
  %5178 = getelementptr inbounds i8, ptr %5111, i64 %5177
  %5179 = load i8, ptr %5178, align 1, !tbaa !6
  %5180 = zext i8 %5179 to i32
  %5181 = and i32 %5175, 7
  %5182 = shl nuw nsw i32 1, %5181
  %5183 = and i32 %5182, %5180
  %5184 = icmp eq i32 %5183, 0
  br i1 %5184, label %5185, label %5188

5185:                                             ; preds = %5172
  %5186 = getelementptr inbounds i8, ptr %5173, i64 1
  %5187 = icmp ugt ptr %5186, %5077
  br i1 %5187, label %5188, label %5172, !llvm.loop !236

5188:                                             ; preds = %5185, %5172, %5165, %5152, %5150, %5151
  %5189 = phi ptr [ %5141, %5151 ], [ %5141, %5150 ], [ %5170, %5165 ], [ %5153, %5152 ], [ %5186, %5185 ], [ %5173, %5172 ]
  store ptr %5189, ptr %6, align 8, !tbaa !13
  br label %5190

5190:                                             ; preds = %5188, %5147
  %5191 = phi ptr [ %5189, %5188 ], [ %5141, %5147 ]
  %5192 = icmp ugt ptr %5191, %5077
  br i1 %5192, label %5424, label %5193

5193:                                             ; preds = %5190, %5135
  %5194 = phi ptr [ %5191, %5190 ], [ %5141, %5135 ]
  %5195 = icmp eq i16 %5145, 0
  br i1 %5195, label %5211, label %5196

5196:                                             ; preds = %5193
  %5197 = load ptr, ptr %5116, align 8, !tbaa !237
  %5198 = zext i16 %5145 to i64
  %5199 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %5197, i64 %5198, i32 1
  %5200 = load i32, ptr %5199, align 4, !tbaa !238
  %5201 = sub i32 %5136, %5200
  %5202 = zext i32 %5201 to i64
  %5203 = urem i64 %5202, %5079
  %5204 = getelementptr inbounds ptr, ptr %5098, i64 %5203
  %5205 = load ptr, ptr %5204, align 8, !tbaa !13
  %5206 = icmp eq ptr %5137, null
  %5207 = icmp ult ptr %5205, %5137
  %5208 = select i1 %5206, i1 true, i1 %5207
  %5209 = select i1 %5208, ptr %5205, ptr %5137
  %5210 = icmp eq i32 %5140, 0
  br i1 %5210, label %5424, label %5211

5211:                                             ; preds = %5196, %5193
  %5212 = phi ptr [ %5209, %5196 ], [ %5137, %5193 ]
  %5213 = add i32 %5136, 1
  %5214 = zext i32 %5136 to i64
  %5215 = urem i64 %5214, %5079
  %5216 = getelementptr inbounds ptr, ptr %5098, i64 %5215
  store ptr %5194, ptr %5216, align 8, !tbaa !13
  %5217 = load i64, ptr %18, align 8, !tbaa !86
  %5218 = icmp ne i64 %5217, 0
  %5219 = icmp ult ptr %5194, %3
  %5220 = or i1 %5219, %5218
  br i1 %5220, label %5221, label %5326

5221:                                             ; preds = %5211
  switch i8 %5117, label %5222 [
    i8 7, label %5225
    i8 4, label %5224
    i8 2, label %5225
    i8 5, label %5260
    i8 3, label %5261
    i8 6, label %5292
    i8 1, label %5292
    i8 0, label %5294
  ]

5222:                                             ; preds = %5221
  %5223 = load i64, ptr %16, align 8, !tbaa !86
  br label %5297

5224:                                             ; preds = %5221
  br label %5225

5225:                                             ; preds = %5221, %5224, %5221
  %5226 = phi i8 [ 6, %5224 ], [ 2, %5221 ], [ 2, %5221 ]
  %5227 = icmp eq i64 %5217, 0
  br i1 %5227, label %5234, label %5228

5228:                                             ; preds = %5225
  %5229 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %5138, i64 noundef 13, ptr noundef nonnull %17, i32 noundef %5131) #12
  store i64 %5229, ptr %16, align 8, !tbaa !86
  %5230 = load i64, ptr %17, align 8, !tbaa !86
  %5231 = load i64, ptr %18, align 8, !tbaa !86
  %5232 = sub i64 %5231, %5230
  store i64 %5232, ptr %18, align 8, !tbaa !86
  %5233 = getelementptr inbounds i8, ptr %5138, i64 %5230
  store i64 0, ptr %17, align 8, !tbaa !86
  br label %5297

5234:                                             ; preds = %5225
  %5235 = call i64 @Perl__to_utf8_fold_flags(ptr noundef %5194, ptr noundef nonnull %15, ptr noundef nonnull %18, i8 noundef zeroext %5226) #12
  store i64 %5235, ptr %16, align 8, !tbaa !86
  %5236 = load i8, ptr %5194, align 1, !tbaa !6
  %5237 = zext i8 %5236 to i64
  %5238 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5237
  %5239 = load i8, ptr %5238, align 1, !tbaa !6
  %5240 = zext i8 %5239 to i64
  store i64 %5240, ptr %17, align 8, !tbaa !86
  %5241 = icmp ult i64 %5235, 128
  br i1 %5241, label %5255, label %5242

5242:                                             ; preds = %5234
  %5243 = icmp ult i64 %5235, 2048
  br i1 %5243, label %5255, label %5244

5244:                                             ; preds = %5242
  %5245 = icmp ult i64 %5235, 65536
  br i1 %5245, label %5255, label %5246

5246:                                             ; preds = %5244
  %5247 = icmp ult i64 %5235, 2097152
  br i1 %5247, label %5255, label %5248

5248:                                             ; preds = %5246
  %5249 = icmp ult i64 %5235, 67108864
  br i1 %5249, label %5255, label %5250

5250:                                             ; preds = %5248
  %5251 = icmp ult i64 %5235, 2147483648
  br i1 %5251, label %5255, label %5252

5252:                                             ; preds = %5250
  %5253 = icmp ult i64 %5235, 68719476736
  %5254 = select i1 %5253, i64 7, i64 13
  br label %5255

5255:                                             ; preds = %5242, %5246, %5252, %5250, %5248, %5244, %5234
  %5256 = phi i64 [ 1, %5234 ], [ 2, %5242 ], [ 3, %5244 ], [ 4, %5246 ], [ 5, %5248 ], [ %5254, %5252 ], [ 6, %5250 ]
  %5257 = load i64, ptr %18, align 8, !tbaa !86
  %5258 = sub i64 %5257, %5256
  store i64 %5258, ptr %18, align 8, !tbaa !86
  %5259 = getelementptr inbounds i8, ptr %15, i64 %5256
  br label %5297

5260:                                             ; preds = %5221
  br label %5261

5261:                                             ; preds = %5221, %5260
  %5262 = phi i32 [ 2, %5221 ], [ 6, %5260 ]
  %5263 = icmp eq i64 %5217, 0
  br i1 %5263, label %5270, label %5264

5264:                                             ; preds = %5261
  %5265 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %5138, i64 noundef 13, ptr noundef nonnull %17, i32 noundef %5131) #12
  store i64 %5265, ptr %16, align 8, !tbaa !86
  %5266 = load i64, ptr %17, align 8, !tbaa !86
  %5267 = load i64, ptr %18, align 8, !tbaa !86
  %5268 = sub i64 %5267, %5266
  store i64 %5268, ptr %18, align 8, !tbaa !86
  %5269 = getelementptr inbounds i8, ptr %5138, i64 %5266
  store i64 0, ptr %17, align 8, !tbaa !86
  br label %5297

5270:                                             ; preds = %5261
  store i64 1, ptr %17, align 8, !tbaa !86
  %5271 = load i8, ptr %5194, align 1, !tbaa !6
  %5272 = call i64 @Perl__to_fold_latin1(i8 noundef zeroext %5271, ptr noundef nonnull %15, ptr noundef nonnull %18, i32 noundef %5262) #12
  store i64 %5272, ptr %16, align 8, !tbaa !86
  %5273 = icmp ult i64 %5272, 128
  br i1 %5273, label %5287, label %5274

5274:                                             ; preds = %5270
  %5275 = icmp ult i64 %5272, 2048
  br i1 %5275, label %5287, label %5276

5276:                                             ; preds = %5274
  %5277 = icmp ult i64 %5272, 65536
  br i1 %5277, label %5287, label %5278

5278:                                             ; preds = %5276
  %5279 = icmp ult i64 %5272, 2097152
  br i1 %5279, label %5287, label %5280

5280:                                             ; preds = %5278
  %5281 = icmp ult i64 %5272, 67108864
  br i1 %5281, label %5287, label %5282

5282:                                             ; preds = %5280
  %5283 = icmp ult i64 %5272, 2147483648
  br i1 %5283, label %5287, label %5284

5284:                                             ; preds = %5282
  %5285 = icmp ult i64 %5272, 68719476736
  %5286 = select i1 %5285, i64 7, i64 13
  br label %5287

5287:                                             ; preds = %5274, %5278, %5284, %5282, %5280, %5276, %5270
  %5288 = phi i64 [ 1, %5270 ], [ 2, %5274 ], [ 3, %5276 ], [ 4, %5278 ], [ 5, %5280 ], [ %5286, %5284 ], [ 6, %5282 ]
  %5289 = load i64, ptr %18, align 8, !tbaa !86
  %5290 = sub i64 %5289, %5288
  store i64 %5290, ptr %18, align 8, !tbaa !86
  %5291 = getelementptr inbounds i8, ptr %15, i64 %5288
  br label %5297

5292:                                             ; preds = %5221, %5221
  %5293 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %5194, i64 noundef 13, ptr noundef nonnull %17, i32 noundef %5131) #12
  store i64 %5293, ptr %16, align 8, !tbaa !86
  br label %5297

5294:                                             ; preds = %5221
  %5295 = load i8, ptr %5194, align 1, !tbaa !6
  %5296 = zext i8 %5295 to i64
  store i64 %5296, ptr %16, align 8, !tbaa !86
  store i64 1, ptr %17, align 8, !tbaa !86
  br label %5301

5297:                                             ; preds = %5264, %5287, %5228, %5255, %5222, %5292
  %5298 = phi i64 [ %5293, %5292 ], [ %5235, %5255 ], [ %5229, %5228 ], [ %5272, %5287 ], [ %5265, %5264 ], [ %5223, %5222 ]
  %5299 = phi ptr [ %5138, %5292 ], [ %5259, %5255 ], [ %5233, %5228 ], [ %5291, %5287 ], [ %5269, %5264 ], [ %5138, %5222 ]
  %5300 = icmp ult i64 %5298, 256
  br i1 %5300, label %5301, label %5307

5301:                                             ; preds = %5294, %5297
  %5302 = phi ptr [ %5138, %5294 ], [ %5299, %5297 ]
  %5303 = phi i64 [ %5296, %5294 ], [ %5298, %5297 ]
  %5304 = load ptr, ptr %5119, align 8, !tbaa !240
  %5305 = getelementptr inbounds i16, ptr %5304, i64 %5303
  %5306 = load i16, ptr %5305, align 2, !tbaa !152
  br label %5330

5307:                                             ; preds = %5297
  br i1 %5118, label %5327, label %5308

5308:                                             ; preds = %5307
  %5309 = call ptr @Perl_hv_common_key_len(ptr noundef nonnull %5073, ptr noundef nonnull %16, i32 noundef 8, i32 noundef 32, ptr noundef null, i32 noundef 0) #12
  %5310 = icmp eq ptr %5309, null
  br i1 %5310, label %5327, label %5311

5311:                                             ; preds = %5308
  %5312 = load ptr, ptr %5309, align 8, !tbaa !13
  %5313 = getelementptr inbounds %struct.sv, ptr %5312, i64 0, i32 2
  %5314 = load i32, ptr %5313, align 4, !tbaa !9
  %5315 = and i32 %5314, 2097408
  %5316 = icmp eq i32 %5315, 256
  br i1 %5316, label %5317, label %5321

5317:                                             ; preds = %5311
  %5318 = load ptr, ptr %5312, align 8, !tbaa !24
  %5319 = getelementptr inbounds %struct.xpviv, ptr %5318, i64 0, i32 4
  %5320 = load i64, ptr %5319, align 8, !tbaa !6
  br label %5323

5321:                                             ; preds = %5311
  %5322 = call i64 @Perl_sv_2iv_flags(ptr noundef nonnull %5312, i32 noundef 2) #12
  br label %5323

5323:                                             ; preds = %5321, %5317
  %5324 = phi i64 [ %5320, %5317 ], [ %5322, %5321 ]
  %5325 = trunc i64 %5324 to i16
  br label %5330

5326:                                             ; preds = %5211
  store i64 0, ptr %17, align 8, !tbaa !86
  br label %5327

5327:                                             ; preds = %5326, %5307, %5308
  %5328 = phi ptr [ %5299, %5308 ], [ %5299, %5307 ], [ %5138, %5326 ]
  %5329 = load ptr, ptr %5114, align 8, !tbaa !232
  br label %5366

5330:                                             ; preds = %5301, %5323
  %5331 = phi i16 [ %5306, %5301 ], [ %5325, %5323 ]
  %5332 = phi ptr [ %5302, %5301 ], [ %5299, %5323 ]
  %5333 = freeze i16 %5331
  %5334 = load ptr, ptr %5114, align 8, !tbaa !232
  %5335 = icmp eq i16 %5333, 0
  %5336 = zext i16 %5333 to i32
  br i1 %5335, label %5366, label %5337

5337:                                             ; preds = %5330
  %5338 = getelementptr inbounds %struct._reg_trie_state, ptr %5334, i64 %5143, i32 1
  %5339 = load i32, ptr %5338, align 8, !tbaa !6
  %5340 = icmp eq i32 %5339, 0
  br i1 %5340, label %5407, label %5341

5341:                                             ; preds = %5337
  %5342 = add i32 %5339, %5336
  %5343 = load i16, ptr %5120, align 8, !tbaa !241
  %5344 = zext i16 %5343 to i32
  %5345 = xor i32 %5344, -1
  %5346 = add i32 %5342, %5345
  %5347 = icmp sgt i32 %5346, -1
  br i1 %5347, label %5348, label %5361

5348:                                             ; preds = %5341
  %5349 = load i32, ptr %5121, align 4, !tbaa !242
  %5350 = icmp ult i32 %5346, %5349
  br i1 %5350, label %5351, label %5361

5351:                                             ; preds = %5348
  %5352 = load ptr, ptr %5122, align 8, !tbaa !243
  %5353 = zext i32 %5346 to i64
  %5354 = getelementptr inbounds %struct._reg_trie_trans, ptr %5352, i64 %5353, i32 1
  %5355 = load i32, ptr %5354, align 4, !tbaa !244
  %5356 = icmp eq i32 %5355, %5139
  br i1 %5356, label %5357, label %5361

5357:                                             ; preds = %5351
  %5358 = getelementptr inbounds %struct._reg_trie_trans, ptr %5352, i64 %5353
  %5359 = load i32, ptr %5358, align 4, !tbaa !246
  %5360 = icmp eq i32 %5359, 0
  br i1 %5360, label %5361, label %5415

5361:                                             ; preds = %5357, %5351, %5348, %5341
  %5362 = load ptr, ptr %5123, align 8, !tbaa !247
  %5363 = getelementptr inbounds i32, ptr %5362, i64 %5143
  %5364 = load i32, ptr %5363, align 4, !tbaa !34
  %5365 = icmp eq i32 %5364, 0
  br i1 %5365, label %5407, label %5380

5366:                                             ; preds = %5327, %5330
  %5367 = phi ptr [ %5329, %5327 ], [ %5334, %5330 ]
  %5368 = phi ptr [ %5328, %5327 ], [ %5332, %5330 ]
  br label %5369

5369:                                             ; preds = %5366, %5375
  %5370 = phi i32 [ %5378, %5375 ], [ %5139, %5366 ]
  %5371 = zext i32 %5370 to i64
  %5372 = getelementptr inbounds %struct._reg_trie_state, ptr %5367, i64 %5371, i32 1
  %5373 = load i32, ptr %5372, align 8, !tbaa !6
  %5374 = icmp eq i32 %5373, 0
  br i1 %5374, label %5407, label %5375

5375:                                             ; preds = %5369
  %5376 = load ptr, ptr %5123, align 8, !tbaa !247
  %5377 = getelementptr inbounds i32, ptr %5376, i64 %5371
  %5378 = load i32, ptr %5377, align 4, !tbaa !34
  %5379 = icmp eq i32 %5378, 0
  br i1 %5379, label %5407, label %5369, !llvm.loop !248

5380:                                             ; preds = %5361, %5403
  %5381 = phi i32 [ %5405, %5403 ], [ %5364, %5361 ]
  %5382 = zext i32 %5381 to i64
  %5383 = getelementptr inbounds %struct._reg_trie_state, ptr %5334, i64 %5382, i32 1
  %5384 = load i32, ptr %5383, align 8, !tbaa !6
  %5385 = icmp eq i32 %5384, 0
  br i1 %5385, label %5407, label %5386

5386:                                             ; preds = %5380
  %5387 = add i32 %5384, %5336
  %5388 = add i32 %5387, %5345
  %5389 = icmp sgt i32 %5388, -1
  br i1 %5389, label %5390, label %5403

5390:                                             ; preds = %5386
  %5391 = load i32, ptr %5121, align 4, !tbaa !242
  %5392 = icmp ult i32 %5388, %5391
  br i1 %5392, label %5393, label %5403

5393:                                             ; preds = %5390
  %5394 = load ptr, ptr %5122, align 8, !tbaa !243
  %5395 = zext i32 %5388 to i64
  %5396 = getelementptr inbounds %struct._reg_trie_trans, ptr %5394, i64 %5395, i32 1
  %5397 = load i32, ptr %5396, align 4, !tbaa !244
  %5398 = icmp eq i32 %5397, %5381
  br i1 %5398, label %5399, label %5403

5399:                                             ; preds = %5393
  %5400 = getelementptr inbounds %struct._reg_trie_trans, ptr %5394, i64 %5395
  %5401 = load i32, ptr %5400, align 4, !tbaa !246
  %5402 = icmp eq i32 %5401, 0
  br i1 %5402, label %5403, label %5407

5403:                                             ; preds = %5386, %5390, %5393, %5399
  %5404 = getelementptr inbounds i32, ptr %5362, i64 %5382
  %5405 = load i32, ptr %5404, align 4, !tbaa !34
  %5406 = icmp eq i32 %5405, 0
  br i1 %5406, label %5407, label %5380, !llvm.loop !249

5407:                                             ; preds = %5399, %5403, %5380, %5375, %5369, %5361, %5337
  %5408 = phi ptr [ %5334, %5337 ], [ %5334, %5361 ], [ %5367, %5369 ], [ %5367, %5375 ], [ %5334, %5380 ], [ %5334, %5403 ], [ %5334, %5399 ]
  %5409 = phi ptr [ %5332, %5337 ], [ %5332, %5361 ], [ %5368, %5369 ], [ %5368, %5375 ], [ %5332, %5380 ], [ %5332, %5403 ], [ %5332, %5399 ]
  %5410 = phi i32 [ 0, %5337 ], [ %5339, %5361 ], [ 0, %5369 ], [ %5373, %5375 ], [ %5384, %5399 ], [ 0, %5380 ], [ %5384, %5403 ]
  %5411 = phi i32 [ %5139, %5337 ], [ 0, %5361 ], [ %5370, %5369 ], [ 0, %5375 ], [ %5401, %5399 ], [ %5381, %5380 ], [ 0, %5403 ]
  %5412 = icmp eq ptr %5212, null
  br i1 %5412, label %5413, label %5424

5413:                                             ; preds = %5407
  %5414 = call i32 @llvm.umax.i32(i32 %5411, i32 1)
  br label %5415

5415:                                             ; preds = %5357, %5413
  %5416 = phi ptr [ %5408, %5413 ], [ %5334, %5357 ]
  %5417 = phi i32 [ %5410, %5413 ], [ %5339, %5357 ]
  %5418 = phi i32 [ %5414, %5413 ], [ %5359, %5357 ]
  %5419 = phi ptr [ %5409, %5413 ], [ %5332, %5357 ]
  %5420 = phi ptr [ null, %5413 ], [ %5212, %5357 ]
  %5421 = load i64, ptr %17, align 8, !tbaa !86
  %5422 = getelementptr inbounds i8, ptr %5194, i64 %5421
  %5423 = icmp ugt ptr %5422, %3
  br i1 %5423, label %5424, label %5135

5424:                                             ; preds = %5415, %5190, %5407, %5196, %5128
  %5425 = phi ptr [ %5133, %5128 ], [ %5416, %5415 ], [ %5142, %5190 ], [ %5408, %5407 ], [ %5142, %5196 ]
  %5426 = phi i32 [ 1, %5128 ], [ %5418, %5415 ], [ 1, %5190 ], [ %5411, %5407 ], [ %5139, %5196 ]
  %5427 = phi ptr [ null, %5128 ], [ %5420, %5415 ], [ %5137, %5190 ], [ %5212, %5407 ], [ %5209, %5196 ]
  %5428 = phi i32 [ 0, %5128 ], [ %5213, %5415 ], [ %5136, %5190 ], [ %5213, %5407 ], [ %5136, %5196 ]
  %5429 = zext i32 %5426 to i64
  %5430 = getelementptr inbounds %struct._reg_trie_state, ptr %5425, i64 %5429
  %5431 = load i16, ptr %5430, align 8, !tbaa !233
  %5432 = icmp eq i16 %5431, 0
  br i1 %5432, label %5447, label %5433

5433:                                             ; preds = %5424
  %5434 = load ptr, ptr %5116, align 8, !tbaa !237
  %5435 = zext i16 %5431 to i64
  %5436 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %5434, i64 %5435, i32 1
  %5437 = load i32, ptr %5436, align 4, !tbaa !238
  %5438 = sub i32 %5428, %5437
  %5439 = zext i32 %5438 to i64
  %5440 = urem i64 %5439, %5079
  %5441 = getelementptr inbounds ptr, ptr %5098, i64 %5440
  %5442 = load ptr, ptr %5441, align 8, !tbaa !13
  %5443 = icmp eq ptr %5427, null
  %5444 = icmp ult ptr %5442, %5427
  %5445 = select i1 %5443, i1 true, i1 %5444
  %5446 = select i1 %5445, ptr %5442, ptr %5427
  br label %5447

5447:                                             ; preds = %5433, %5424
  %5448 = phi ptr [ %5446, %5433 ], [ %5427, %5424 ]
  %5449 = icmp eq ptr %5448, null
  br i1 %5449, label %5450, label %5451

5450:                                             ; preds = %5447
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  br label %5542

5451:                                             ; preds = %5447
  store ptr %5448, ptr %6, align 8, !tbaa !13
  %5452 = load i8, ptr %5124, align 8, !tbaa !47, !range !97, !noundef !98
  %5453 = icmp eq i8 %5452, 0
  br i1 %5453, label %5454, label %5517

5454:                                             ; preds = %5451
  %5455 = load ptr, ptr %4, align 8, !tbaa !46
  %5456 = getelementptr i8, ptr %5455, i64 16
  %5457 = load ptr, ptr %5456, align 8, !tbaa !6
  %5458 = getelementptr inbounds %struct.regexp, ptr %5457, i64 0, i32 14
  %5459 = load ptr, ptr %5458, align 8, !tbaa !17
  store ptr null, ptr %5125, align 8, !tbaa !93
  %5460 = load ptr, ptr %5126, align 8, !tbaa !53
  %5461 = ptrtoint ptr %5448 to i64
  %5462 = ptrtoint ptr %5460 to i64
  %5463 = sub i64 %5461, %5462
  %5464 = getelementptr inbounds %struct.regexp, ptr %5457, i64 0, i32 17
  %5465 = load ptr, ptr %5464, align 8, !tbaa !38
  store i64 %5463, ptr %5465, align 8, !tbaa !39
  %5466 = getelementptr inbounds %struct.regexp, ptr %5457, i64 0, i32 15
  store i32 0, ptr %5466, align 8, !tbaa !37
  %5467 = getelementptr inbounds %struct.regexp, ptr %5457, i64 0, i32 16
  store i32 0, ptr %5467, align 4, !tbaa !36
  %5468 = getelementptr inbounds %struct.regexp, ptr %5457, i64 0, i32 12
  %5469 = load i32, ptr %5468, align 8, !tbaa !92
  %5470 = icmp sgt i32 %5469, 0
  br i1 %5470, label %5471, label %5500

5471:                                             ; preds = %5454
  %5472 = and i32 %5469, 7
  %5473 = icmp eq i32 %5472, 0
  br i1 %5473, label %5482, label %5474

5474:                                             ; preds = %5471, %5474
  %5475 = phi i32 [ %5479, %5474 ], [ %5469, %5471 ]
  %5476 = phi ptr [ %5478, %5474 ], [ %5465, %5471 ]
  %5477 = phi i32 [ %5480, %5474 ], [ 0, %5471 ]
  %5478 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5476, i64 1
  %5479 = add nsw i32 %5475, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5478, i8 -1, i64 16, i1 false)
  %5480 = add i32 %5477, 1
  %5481 = icmp eq i32 %5480, %5472
  br i1 %5481, label %5482, label %5474, !llvm.loop !251

5482:                                             ; preds = %5474, %5471
  %5483 = phi i32 [ %5469, %5471 ], [ %5479, %5474 ]
  %5484 = phi ptr [ %5465, %5471 ], [ %5478, %5474 ]
  %5485 = icmp ult i32 %5469, 8
  br i1 %5485, label %5500, label %5486

5486:                                             ; preds = %5482, %5486
  %5487 = phi i32 [ %5497, %5486 ], [ %5483, %5482 ]
  %5488 = phi ptr [ %5496, %5486 ], [ %5484, %5482 ]
  %5489 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5489, i8 -1, i64 16, i1 false)
  %5490 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5490, i8 -1, i64 16, i1 false)
  %5491 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5491, i8 -1, i64 16, i1 false)
  %5492 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5492, i8 -1, i64 16, i1 false)
  %5493 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5493, i8 -1, i64 16, i1 false)
  %5494 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5494, i8 -1, i64 16, i1 false)
  %5495 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5495, i8 -1, i64 16, i1 false)
  %5496 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5488, i64 8
  %5497 = add nsw i32 %5487, -8
  %5498 = add i32 %5487, -9
  %5499 = icmp ult i32 %5498, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5496, i8 -1, i64 16, i1 false)
  br i1 %5499, label %5486, label %5500, !llvm.loop !96

5500:                                             ; preds = %5482, %5486, %5454
  %5501 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %5502 = getelementptr inbounds %struct.regexp_internal, ptr %5459, i64 1
  %5503 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %5448, ptr noundef nonnull %5502)
  %5504 = icmp eq i64 %5503, -1
  br i1 %5504, label %5505, label %5513

5505:                                             ; preds = %5500
  %5506 = load ptr, ptr %5125, align 8, !tbaa !93
  %5507 = icmp eq ptr %5506, null
  br i1 %5507, label %5509, label %5508

5508:                                             ; preds = %5505
  store ptr %5506, ptr %6, align 8, !tbaa !13
  br label %5509

5509:                                             ; preds = %5508, %5505
  %5510 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %5511 = icmp sgt i32 %5510, %5501
  br i1 %5511, label %5512, label %5523

5512:                                             ; preds = %5509
  call void @Perl_leave_scope(i32 noundef %5501) #12
  br label %5523

5513:                                             ; preds = %5500
  %5514 = getelementptr inbounds %struct.regexp, ptr %5457, i64 0, i32 17
  %5515 = load ptr, ptr %5514, align 8, !tbaa !38
  %5516 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5515, i64 0, i32 1
  store i64 %5503, ptr %5516, align 8, !tbaa !42
  br label %5517

5517:                                             ; preds = %5451, %5513
  %5518 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !86
  %5519 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !86
  %5520 = icmp sgt i64 %5518, %5519
  br i1 %5520, label %5521, label %5522

5521:                                             ; preds = %5517
  call void @Perl_free_tmps() #12
  br label %5522

5522:                                             ; preds = %5521, %5517
  call void @Perl_pop_scope() #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %15) #12
  br label %5550

5523:                                             ; preds = %5512, %5509
  %5524 = load i8, ptr %23, align 2, !tbaa !48, !range !97, !noundef !98
  %5525 = icmp eq i8 %5524, 0
  %5526 = load ptr, ptr %6, align 8, !tbaa !13
  br i1 %5525, label %5537, label %5527

5527:                                             ; preds = %5523
  %5528 = load ptr, ptr %5127, align 8, !tbaa !56
  %5529 = icmp ult ptr %5526, %5528
  br i1 %5529, label %5530, label %5539

5530:                                             ; preds = %5527
  %5531 = load i8, ptr %5526, align 1, !tbaa !6
  %5532 = zext i8 %5531 to i64
  %5533 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5532
  %5534 = load i8, ptr %5533, align 1, !tbaa !6
  %5535 = zext i8 %5534 to i64
  %5536 = getelementptr inbounds i8, ptr %5526, i64 %5535
  br label %5539

5537:                                             ; preds = %5523
  %5538 = getelementptr inbounds i8, ptr %5526, i64 1
  br label %5539

5539:                                             ; preds = %5530, %5537, %5527
  %5540 = phi ptr [ %5538, %5537 ], [ %5526, %5527 ], [ %5536, %5530 ]
  store ptr %5540, ptr %6, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  %5541 = icmp ugt ptr %5540, %5077
  br i1 %5541, label %5542, label %5128

5542:                                             ; preds = %5539, %5110, %5450
  %5543 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !86
  %5544 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !86
  %5545 = icmp sgt i64 %5543, %5544
  br i1 %5545, label %5546, label %5547

5546:                                             ; preds = %5542
  call void @Perl_free_tmps() #12
  br label %5547

5547:                                             ; preds = %5542, %5546
  call void @Perl_pop_scope() #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %15) #12
  br label %5552

5548:                                             ; preds = %5
  %5549 = zext i8 %32 to i32
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.6, i32 noundef %5549) #12
  br label %5552

5550:                                             ; preds = %4072, %3877, %3978, %4836, %4734, %4615, %4502, %4364, %4187, %4969, %3780, %3693, %3601, %3508, %2482, %2378, %2206, %2099, %1981, %1874, %1702, %1596, %1478, %1372, %1203, %1079, %3432, %3435, %3331, %3244, %3247, %3144, %3001, %2914, %2758, %2655, %885, %762, %435, %356, %230, %156, %57, %5522, %5032, %4899, %4797, %4678, %4565, %4427, %4250, %4133, %4039, %3940, %3841, %3756, %3661, %3570, %3393, %3206, %3062, %2976, %2819, %2720, %2543, %2441, %2267, %2162, %2042, %1937, %1763, %1661, %1539, %1437, %1264, %1142, %946, %827, %656, %496, %417, %291, %217, %120, %3444, %3448, %3267, %3271, %3256, %3260, %3081, %3085, %3070, %3074, %2848, %2852, %2837, %2841, %2558, %2562, %2283, %2287, %2058, %2062, %1782, %1786, %1558, %1562, %1283, %1287, %968, %972
  %5551 = load ptr, ptr %6, align 8, !tbaa !13
  br label %5552

5552:                                             ; preds = %4137, %3944, %4043, %4903, %4801, %4682, %4569, %4431, %4254, %5036, %3845, %3760, %3665, %3574, %657, %500, %421, %295, %221, %124, %4052, %3854, %3954, %4265, %4272, %4279, %4286, %4293, %4147, %4928, %3674, %3679, %3453, %3459, %565, %336, %342, %33, %41, %46, %5547, %5548, %311, %958, %972, %1287, %1273, %1551, %1562, %1775, %1786, %2062, %2051, %2287, %2276, %2562, %2552, %3448, %3282, %3260, %3096, %3074, %2863, %2841, %2831, %2570, %4913, %5550
  %5553 = phi ptr [ %5551, %5550 ], [ null, %5547 ], [ null, %4913 ], [ null, %2570 ], [ null, %2831 ], [ null, %2841 ], [ null, %2863 ], [ null, %3074 ], [ null, %3096 ], [ null, %3260 ], [ null, %3282 ], [ null, %3448 ], [ null, %2552 ], [ null, %2562 ], [ null, %2276 ], [ null, %2287 ], [ null, %2051 ], [ null, %2062 ], [ null, %1786 ], [ null, %1775 ], [ null, %1562 ], [ null, %1551 ], [ null, %1273 ], [ null, %1287 ], [ null, %972 ], [ null, %958 ], [ null, %311 ], [ null, %5548 ], [ null, %46 ], [ null, %41 ], [ null, %33 ], [ null, %342 ], [ null, %336 ], [ null, %565 ], [ null, %3459 ], [ null, %3453 ], [ null, %3679 ], [ null, %3674 ], [ null, %4928 ], [ null, %4147 ], [ null, %4293 ], [ null, %4286 ], [ null, %4279 ], [ null, %4272 ], [ null, %4265 ], [ null, %3954 ], [ null, %3854 ], [ null, %4052 ], [ null, %124 ], [ null, %221 ], [ null, %295 ], [ null, %421 ], [ null, %500 ], [ null, %657 ], [ null, %3574 ], [ null, %3665 ], [ null, %3760 ], [ null, %3845 ], [ null, %5036 ], [ null, %4254 ], [ null, %4431 ], [ null, %4569 ], [ null, %4682 ], [ null, %4801 ], [ null, %4903 ], [ null, %4043 ], [ null, %3944 ], [ null, %4137 ]
  ret ptr %5553
}

declare void @Perl_croak(ptr noundef, ...) local_unnamed_addr #2

declare ptr @Perl_mg_find_mglob(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_utf8_hop(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_reg_set_capture_string(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4) unnamed_addr #0 {
  %6 = getelementptr i8, ptr %0, i64 16
  %7 = load ptr, ptr %6, align 8, !tbaa !6
  %8 = and i32 %4, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %130, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 2
  %12 = load i32, ptr %11, align 4, !tbaa !9
  %13 = and i32 %12, 268435456
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %10
  %16 = load ptr, ptr %3, align 8, !tbaa !24
  %17 = getelementptr inbounds %struct.xpv, ptr %16, i64 0, i32 3
  %18 = load i64, ptr %17, align 8, !tbaa !6
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %38, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !6
  %23 = getelementptr inbounds i8, ptr %22, i64 %18
  %24 = getelementptr inbounds i8, ptr %23, i64 -1
  %25 = load i8, ptr %24, align 1, !tbaa !6
  %26 = icmp eq i8 %25, -1
  br i1 %26, label %96, label %38

27:                                               ; preds = %10
  %28 = and i32 %12, 251743232
  %29 = icmp eq i32 %28, 17408
  br i1 %29, label %30, label %96

30:                                               ; preds = %27
  %31 = load ptr, ptr %3, align 8, !tbaa !24
  %32 = getelementptr inbounds %struct.xpv, ptr %31, i64 0, i32 2
  %33 = load i64, ptr %32, align 8, !tbaa !110
  %34 = add i64 %33, 1
  %35 = getelementptr inbounds %struct.xpv, ptr %31, i64 0, i32 3
  %36 = load i64, ptr %35, align 8, !tbaa !6
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %96

38:                                               ; preds = %15, %30, %20
  %39 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 19
  %40 = load ptr, ptr %39, align 8, !tbaa !89
  %41 = icmp eq ptr %40, null
  br i1 %41, label %70, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.sv, ptr %40, i64 0, i32 2
  %44 = load i32, ptr %43, align 4, !tbaa !9
  %45 = and i32 %12, %44
  %46 = and i32 %45, 268451840
  %47 = icmp eq i32 %46, 268451840
  br i1 %47, label %48, label %65

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !6
  %51 = getelementptr inbounds %struct.sv, ptr %40, i64 0, i32 3
  %52 = load ptr, ptr %51, align 8, !tbaa !6
  %53 = icmp eq ptr %50, %52
  br i1 %53, label %54, label %65

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 7
  %56 = load i32, ptr %55, align 8, !tbaa !35
  %57 = and i32 %56, 33554432
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %86, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  %61 = load ptr, ptr %60, align 8, !tbaa !85
  tail call void @Perl_safesysfree(ptr noundef %61) #12
  %62 = load i32, ptr %55, align 8, !tbaa !35
  %63 = and i32 %62, -33554433
  store i32 %63, ptr %55, align 8, !tbaa !35
  %64 = load ptr, ptr %39, align 8, !tbaa !89
  br label %86

65:                                               ; preds = %42, %48
  %66 = and i32 %44, 427886592
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  tail call void @Perl_sv_force_normal_flags(ptr noundef nonnull %40, i32 noundef 4) #12
  %69 = load ptr, ptr %6, align 8, !tbaa !6
  br label %70

70:                                               ; preds = %38, %65, %68
  %71 = phi ptr [ %7, %38 ], [ %7, %65 ], [ %69, %68 ]
  %72 = getelementptr inbounds %struct.regexp, ptr %71, i64 0, i32 7
  %73 = load i32, ptr %72, align 8, !tbaa !35
  %74 = and i32 %73, 33554432
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.regexp, ptr %71, i64 0, i32 18
  %78 = load ptr, ptr %77, align 8, !tbaa !85
  tail call void @Perl_safesysfree(ptr noundef %78) #12
  %79 = load ptr, ptr %6, align 8, !tbaa !6
  %80 = getelementptr inbounds %struct.regexp, ptr %79, i64 0, i32 7
  %81 = load i32, ptr %80, align 8, !tbaa !35
  %82 = and i32 %81, -33554433
  store i32 %82, ptr %80, align 8, !tbaa !35
  br label %83

83:                                               ; preds = %76, %70
  %84 = load ptr, ptr %39, align 8, !tbaa !89
  %85 = tail call ptr @Perl_sv_setsv_cow(ptr noundef %84, ptr noundef nonnull %3) #12
  store ptr %85, ptr %39, align 8, !tbaa !89
  br label %86

86:                                               ; preds = %54, %59, %83
  %87 = phi ptr [ %40, %54 ], [ %64, %59 ], [ %85, %83 ]
  %88 = getelementptr inbounds %struct.sv, ptr %87, i64 0, i32 3
  %89 = load ptr, ptr %88, align 8, !tbaa !6
  %90 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  store ptr %89, ptr %90, align 8, !tbaa !85
  %91 = ptrtoint ptr %2 to i64
  %92 = ptrtoint ptr %1 to i64
  %93 = sub i64 %91, %92
  %94 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  store i64 %93, ptr %94, align 8, !tbaa !91
  %95 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 21
  store i64 0, ptr %95, align 8
  br label %128

96:                                               ; preds = %30, %27, %20
  %97 = ptrtoint ptr %2 to i64
  %98 = ptrtoint ptr %1 to i64
  %99 = sub i64 %97, %98
  %100 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 7
  %101 = load i32, ptr %100, align 8, !tbaa !35
  %102 = and i32 %101, 33554432
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %113, label %104

104:                                              ; preds = %96
  %105 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  %106 = load i64, ptr %105, align 8, !tbaa !91
  %107 = icmp sgt i64 %99, %106
  %108 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  %109 = load ptr, ptr %108, align 8, !tbaa !85
  br i1 %107, label %110, label %117

110:                                              ; preds = %104
  %111 = add nsw i64 %99, 1
  %112 = tail call ptr @Perl_safesysrealloc(ptr noundef %109, i64 noundef %111) #12
  store ptr %112, ptr %108, align 8, !tbaa !85
  br label %117

113:                                              ; preds = %96
  %114 = add nsw i64 %99, 1
  %115 = tail call ptr @Perl_safesysmalloc(i64 noundef %114) #12
  %116 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  store ptr %115, ptr %116, align 8, !tbaa !85
  br label %117

117:                                              ; preds = %104, %110, %113
  %118 = phi ptr [ %112, %110 ], [ %115, %113 ], [ %109, %104 ]
  %119 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %118, ptr align 1 %1, i64 %99, i1 false)
  %120 = load ptr, ptr %119, align 8, !tbaa !85
  %121 = getelementptr inbounds i8, ptr %120, i64 %99
  store i8 0, ptr %121, align 1, !tbaa !6
  %122 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 21
  store i64 0, ptr %122, align 8, !tbaa !252
  %123 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  store i64 %99, ptr %123, align 8, !tbaa !91
  %124 = load ptr, ptr %6, align 8, !tbaa !6
  %125 = getelementptr inbounds %struct.regexp, ptr %124, i64 0, i32 7
  %126 = load i32, ptr %125, align 8, !tbaa !35
  %127 = or i32 %126, 33554432
  store i32 %127, ptr %125, align 8, !tbaa !35
  br label %128

128:                                              ; preds = %117, %86
  %129 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 22
  store i64 0, ptr %129, align 8, !tbaa !87
  br label %161

130:                                              ; preds = %5
  %131 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 19
  %132 = load ptr, ptr %131, align 8, !tbaa !89
  %133 = icmp eq ptr %132, null
  br i1 %133, label %141, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.sv, ptr %132, i64 0, i32 2
  %136 = load i32, ptr %135, align 4, !tbaa !9
  %137 = and i32 %136, 427886592
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  tail call void @Perl_sv_force_normal_flags(ptr noundef nonnull %132, i32 noundef 4) #12
  %140 = load ptr, ptr %6, align 8, !tbaa !6
  br label %141

141:                                              ; preds = %134, %139, %130
  %142 = phi ptr [ %7, %134 ], [ %140, %139 ], [ %7, %130 ]
  %143 = getelementptr inbounds %struct.regexp, ptr %142, i64 0, i32 7
  %144 = load i32, ptr %143, align 8, !tbaa !35
  %145 = and i32 %144, 33554432
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %struct.regexp, ptr %142, i64 0, i32 18
  %149 = load ptr, ptr %148, align 8, !tbaa !85
  tail call void @Perl_safesysfree(ptr noundef %149) #12
  %150 = load ptr, ptr %6, align 8, !tbaa !6
  %151 = getelementptr inbounds %struct.regexp, ptr %150, i64 0, i32 7
  %152 = load i32, ptr %151, align 8, !tbaa !35
  %153 = and i32 %152, -33554433
  store i32 %153, ptr %151, align 8, !tbaa !35
  br label %154

154:                                              ; preds = %147, %141
  %155 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  store ptr %1, ptr %155, align 8, !tbaa !85
  %156 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 21
  %157 = ptrtoint ptr %2 to i64
  %158 = ptrtoint ptr %1 to i64
  %159 = sub i64 %157, %158
  %160 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %156, i8 0, i64 16, i1 false)
  store i64 %159, ptr %160, align 8, !tbaa !91
  br label %161

161:                                              ; preds = %128, %154
  ret void
}

declare ptr @Perl_newSV(i64 noundef) local_unnamed_addr #2

declare void @Perl_sv_setsv_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_save_pushptr(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_safesysmalloc(i64 noundef) local_unnamed_addr #2

declare void @Perl_save_destructor_x(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal void @S_cleanup_regmatch_info_aux(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !59
  %3 = getelementptr inbounds %struct.regmatch_info_aux, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !69
  tail call void @Perl_safesysfree(ptr noundef %4) #12
  %5 = icmp eq ptr %2, null
  br i1 %5, label %43, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !253
  %9 = icmp eq ptr %8, null
  br i1 %9, label %25, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %2, align 8, !tbaa !70
  %12 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 18
  store ptr %8, ptr %12, align 8, !tbaa !85
  %13 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 4
  %14 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 20
  %15 = load <2 x i64>, ptr %13, align 8, !tbaa !86
  store <2 x i64> %15, ptr %14, align 8, !tbaa !86
  %16 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 6
  %17 = load i64, ptr %16, align 8, !tbaa !88
  %18 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 22
  store i64 %17, ptr %18, align 8, !tbaa !87
  %19 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !90
  %21 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 19
  store ptr %20, ptr %21, align 8, !tbaa !89
  %22 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 7
  %23 = load i32, ptr %22, align 8, !tbaa !35
  %24 = or i32 %23, 33554432
  store i32 %24, ptr %22, align 8, !tbaa !35
  br label %25

25:                                               ; preds = %10, %6
  %26 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 7
  %27 = load ptr, ptr %26, align 8, !tbaa !79
  %28 = icmp eq ptr %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 8
  %31 = load i64, ptr %30, align 8, !tbaa !80
  %32 = getelementptr inbounds %struct.magic, ptr %27, i64 0, i32 5
  store i64 %31, ptr %32, align 8, !tbaa !20
  %33 = getelementptr inbounds %struct.magic, ptr %27, i64 0, i32 4
  %34 = load i8, ptr %33, align 1, !tbaa !23
  %35 = and i8 %34, -65
  %36 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 9
  %37 = load i8, ptr %36, align 8, !tbaa !81
  %38 = and i8 %37, 64
  %39 = or i8 %38, %35
  store i8 %39, ptr %33, align 1, !tbaa !23
  br label %40

40:                                               ; preds = %29, %25
  %41 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !84
  store ptr %42, ptr @PL_curpm, align 8, !tbaa !13
  br label %43

43:                                               ; preds = %40, %1
  %44 = getelementptr inbounds %struct.regmatch_info_aux, ptr %0, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !67
  store ptr %45, ptr @PL_regmatch_state, align 8, !tbaa !13
  %46 = getelementptr inbounds %struct.regmatch_info_aux, ptr %0, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !68
  store ptr %47, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %48 = getelementptr inbounds %struct.regmatch_slab, ptr %47, i64 0, i32 2
  %49 = load ptr, ptr %48, align 8, !tbaa !62
  %50 = icmp eq ptr %49, null
  br i1 %50, label %57, label %51

51:                                               ; preds = %43
  store ptr null, ptr %48, align 8, !tbaa !62
  br label %52

52:                                               ; preds = %51, %52
  %53 = phi ptr [ %49, %51 ], [ %55, %52 ]
  %54 = getelementptr inbounds %struct.regmatch_slab, ptr %53, i64 0, i32 2
  %55 = load ptr, ptr %54, align 8, !tbaa !62
  tail call void @Perl_safesysfree(ptr noundef nonnull %53) #12
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %52, !llvm.loop !254

57:                                               ; preds = %52, %43
  ret void
}

declare ptr @Perl_safesyscalloc(i64 noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_regtry(ptr noundef %0, ptr nocapture noundef %1) unnamed_addr #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !46
  %4 = getelementptr i8, ptr %3, i64 16
  %5 = load ptr, ptr %4, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 14
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 6
  store ptr null, ptr %8, align 8, !tbaa !93
  %9 = load ptr, ptr %1, align 8, !tbaa !13
  %10 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !53
  %12 = ptrtoint ptr %9 to i64
  %13 = ptrtoint ptr %11 to i64
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 17
  %16 = load ptr, ptr %15, align 8, !tbaa !38
  store i64 %14, ptr %16, align 8, !tbaa !39
  %17 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 15
  store i32 0, ptr %17, align 8, !tbaa !37
  %18 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 16
  store i32 0, ptr %18, align 4, !tbaa !36
  %19 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 12
  %20 = load i32, ptr %19, align 8, !tbaa !92
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %51

22:                                               ; preds = %2
  %23 = and i32 %20, 7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %33, label %25

25:                                               ; preds = %22, %25
  %26 = phi i32 [ %30, %25 ], [ %20, %22 ]
  %27 = phi ptr [ %29, %25 ], [ %16, %22 ]
  %28 = phi i32 [ %31, %25 ], [ 0, %22 ]
  %29 = getelementptr inbounds %struct.regexp_paren_pair, ptr %27, i64 1
  %30 = add nsw i32 %26, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %29, i8 -1, i64 16, i1 false)
  %31 = add i32 %28, 1
  %32 = icmp eq i32 %31, %23
  br i1 %32, label %33, label %25, !llvm.loop !255

33:                                               ; preds = %25, %22
  %34 = phi i32 [ %20, %22 ], [ %30, %25 ]
  %35 = phi ptr [ %16, %22 ], [ %29, %25 ]
  %36 = icmp ult i32 %20, 8
  br i1 %36, label %51, label %37

37:                                               ; preds = %33, %37
  %38 = phi i32 [ %48, %37 ], [ %34, %33 ]
  %39 = phi ptr [ %47, %37 ], [ %35, %33 ]
  %40 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %40, i8 -1, i64 16, i1 false)
  %41 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %41, i8 -1, i64 16, i1 false)
  %42 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %42, i8 -1, i64 16, i1 false)
  %43 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %43, i8 -1, i64 16, i1 false)
  %44 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %44, i8 -1, i64 16, i1 false)
  %45 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %45, i8 -1, i64 16, i1 false)
  %46 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %46, i8 -1, i64 16, i1 false)
  %47 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 8
  %48 = add nsw i32 %38, -8
  %49 = add i32 %38, -9
  %50 = icmp ult i32 %49, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, i8 -1, i64 16, i1 false)
  br i1 %50, label %37, label %51, !llvm.loop !96

51:                                               ; preds = %33, %37, %2
  %52 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %53 = getelementptr inbounds %struct.regexp_internal, ptr %7, i64 1
  %54 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %0, ptr noundef %9, ptr noundef nonnull %53)
  %55 = icmp eq i64 %54, -1
  br i1 %55, label %59, label %56

56:                                               ; preds = %51
  %57 = load ptr, ptr %15, align 8, !tbaa !38
  %58 = getelementptr inbounds %struct.regexp_paren_pair, ptr %57, i64 0, i32 1
  store i64 %54, ptr %58, align 8, !tbaa !42
  br label %67

59:                                               ; preds = %51
  %60 = load ptr, ptr %8, align 8, !tbaa !93
  %61 = icmp eq ptr %60, null
  br i1 %61, label %63, label %62

62:                                               ; preds = %59
  store ptr %60, ptr %1, align 8, !tbaa !13
  br label %63

63:                                               ; preds = %59, %62
  %64 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %65 = icmp sgt i32 %64, %52
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @Perl_leave_scope(i32 noundef %52) #12
  br label %67

67:                                               ; preds = %63, %66, %56
  %68 = phi i32 [ 1, %56 ], [ 0, %66 ], [ 0, %63 ]
  ret i32 %68
}

declare i64 @Perl_sv_len_utf8(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_sv_2pv_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_rninstr(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @Perl_safesysfree(ptr noundef) local_unnamed_addr #2

declare void @Perl_leave_scope(i32 noundef) local_unnamed_addr #2

declare i32 @Perl_hv_iterinit(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_regclass_swash(ptr noundef %0, ptr noundef %1, i1 noundef zeroext %2, ptr noundef %3, ptr noundef writeonly %4) local_unnamed_addr #0 {
  %6 = icmp eq ptr %4, null
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  store ptr null, ptr %4, align 8, !tbaa !13
  br label %8

8:                                                ; preds = %7, %5
  %9 = tail call ptr @Perl__get_regclass_nonbitmap_data(ptr noundef %0, ptr noundef %1, i1 noundef zeroext %2, ptr noundef %3, ptr noundef null, ptr noundef null) #12
  %10 = tail call ptr @Perl_newSVsv(ptr noundef %9) #12
  ret ptr %10
}

declare ptr @Perl_newSVsv(ptr noundef) local_unnamed_addr #2

declare ptr @Perl__get_regclass_nonbitmap_data(ptr noundef, ptr noundef, i1 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @Perl_sv_free2(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i1 noundef zeroext %4) unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [2 x i8], align 1
  %9 = load i8, ptr %1, align 2, !tbaa !139
  %10 = load i8, ptr %2, align 1, !tbaa !6
  %11 = zext i8 %10 to i64
  %12 = icmp slt i8 %10, 0
  %13 = and i1 %12, %4
  br i1 %13, label %14, label %28

14:                                               ; preds = %5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #12
  store i64 0, ptr %6, align 8, !tbaa !86
  %15 = ptrtoint ptr %3 to i64
  %16 = ptrtoint ptr %2 to i64
  %17 = sub i64 %15, %16
  %18 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %19 = xor i1 %18, true
  %20 = zext i1 %19 to i32
  %21 = or i32 %20, 8192
  %22 = call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %2, i64 noundef %17, ptr noundef nonnull %6, i32 noundef %21) #12
  %23 = load i64, ptr %6, align 8, !tbaa !86
  %24 = icmp eq i64 %23, -1
  br i1 %24, label %25, label %26

25:                                               ; preds = %14
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %26

26:                                               ; preds = %14, %25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #12
  %27 = icmp ult i64 %22, 256
  br i1 %27, label %28, label %90

28:                                               ; preds = %5, %26
  %29 = phi i64 [ %22, %26 ], [ %11, %5 ]
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %29, 3
  %32 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !6
  %34 = zext i8 %33 to i32
  %35 = trunc i64 %29 to i32
  %36 = and i32 %35, 7
  %37 = shl nuw nsw i32 1, %36
  %38 = and i32 %37, %34
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %162

40:                                               ; preds = %28
  %41 = zext i8 %9 to i32
  %42 = icmp sgt i8 %9, -1
  %43 = icmp ult i64 %29, 128
  %44 = or i1 %42, %43
  %45 = or i1 %44, %4
  br i1 %45, label %46, label %162

46:                                               ; preds = %40
  %47 = and i32 %41, 12
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %98, label %49

49:                                               ; preds = %46
  %50 = and i32 %41, 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %65, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds [0 x i8], ptr @PL_fold_locale, i64 0, i64 %29
  %54 = load i8, ptr %53, align 1, !tbaa !6
  %55 = zext i8 %54 to i32
  %56 = lshr i32 %55, 3
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !6
  %60 = zext i8 %59 to i32
  %61 = and i32 %55, 7
  %62 = shl nuw nsw i32 1, %61
  %63 = and i32 %62, %60
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %162

65:                                               ; preds = %52, %49
  %66 = load i8, ptr %1, align 2, !tbaa !139
  %67 = and i8 %66, 8
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %98, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.regnode_charclass_class, ptr %1, i64 0, i32 5
  %71 = load i32, ptr %70, align 4, !tbaa !256
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %98, label %73

73:                                               ; preds = %69, %86
  %74 = phi i32 [ %88, %86 ], [ 0, %69 ]
  %75 = phi i32 [ %87, %86 ], [ 0, %69 ]
  %76 = load i32, ptr %70, align 4, !tbaa !256
  %77 = shl nuw nsw i32 1, %75
  %78 = and i32 %76, %77
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %86, label %80

80:                                               ; preds = %73
  %81 = lshr i32 %75, 1
  %82 = trunc i32 %81 to i8
  %83 = call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %82, i8 noundef zeroext %30)
  %84 = zext i1 %83 to i32
  %85 = icmp eq i32 %74, %84
  br i1 %85, label %86, label %162

86:                                               ; preds = %80, %73
  %87 = add nuw nsw i32 %75, 1
  %88 = xor i32 %74, 1
  %89 = icmp eq i32 %87, 30
  br i1 %89, label %90, label %73, !llvm.loop !258

90:                                               ; preds = %86, %26
  %91 = phi i64 [ %22, %26 ], [ %29, %86 ]
  %92 = icmp ult i64 %91, 256
  %93 = and i8 %9, 64
  %94 = icmp eq i8 %93, 0
  %95 = select i1 %92, i1 true, i1 %94
  br i1 %95, label %96, label %152

96:                                               ; preds = %90
  %97 = zext i8 %9 to i32
  br label %98

98:                                               ; preds = %96, %69, %65, %46
  %99 = phi i32 [ %97, %96 ], [ %41, %69 ], [ %41, %65 ], [ %41, %46 ]
  %100 = phi i64 [ %91, %96 ], [ %29, %69 ], [ %29, %65 ], [ %29, %46 ]
  %101 = and i32 %99, 32
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %117

103:                                              ; preds = %98
  %104 = and i32 %99, 2
  %105 = icmp ne i32 %104, 0
  %106 = and i1 %105, %4
  br i1 %106, label %117, label %107

107:                                              ; preds = %103
  %108 = and i32 %99, 4
  %109 = icmp eq i32 %108, 0
  %110 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !97
  %111 = icmp eq i8 %110, 0
  %112 = select i1 %109, i1 true, i1 %111
  br i1 %112, label %152, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %struct.regnode_1, ptr %1, i64 0, i32 3
  %115 = load i32, ptr %114, align 4, !tbaa !224
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %152, label %117

117:                                              ; preds = %103, %113, %98
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #12
  store ptr null, ptr %7, align 8, !tbaa !13
  %118 = call ptr @Perl__get_regclass_nonbitmap_data(ptr noundef %0, ptr noundef nonnull %1, i1 noundef zeroext true, ptr noundef null, ptr noundef nonnull %7, ptr noundef null) #12
  %119 = icmp eq ptr %118, null
  br i1 %119, label %136, label %120

120:                                              ; preds = %117
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %8) #12
  br i1 %4, label %131, label %121

121:                                              ; preds = %120
  %122 = load i8, ptr %2, align 1, !tbaa !6
  %123 = icmp sgt i8 %122, -1
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  store i8 %122, ptr %8, align 1, !tbaa !6
  br label %131

125:                                              ; preds = %121
  %126 = lshr i8 %122, 6
  %127 = or i8 %126, -64
  %128 = getelementptr inbounds i8, ptr %8, i64 1
  store i8 %127, ptr %8, align 1, !tbaa !6
  %129 = and i8 %122, 63
  %130 = or i8 %129, -128
  store i8 %130, ptr %128, align 1, !tbaa !6
  br label %131

131:                                              ; preds = %125, %124, %120
  %132 = phi ptr [ %2, %120 ], [ %8, %124 ], [ %8, %125 ]
  %133 = call i64 @Perl_swash_fetch(ptr noundef nonnull %118, ptr noundef nonnull %132, i1 noundef zeroext true) #12
  %134 = icmp ne i64 %133, 0
  %135 = zext i1 %134 to i8
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %8) #12
  br label %136

136:                                              ; preds = %131, %117
  %137 = phi i8 [ %135, %131 ], [ 0, %117 ]
  %138 = icmp ne i8 %137, 0
  %139 = load ptr, ptr %7, align 8
  %140 = icmp eq ptr %139, null
  %141 = select i1 %138, i1 true, i1 %140
  %142 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !97
  %143 = icmp eq i8 %142, 0
  %144 = select i1 %141, i1 true, i1 %143
  br i1 %144, label %150, label %145

145:                                              ; preds = %136
  %146 = call i64 @Perl__invlist_search(ptr noundef nonnull %139, i64 noundef %100) #12
  %147 = and i64 %146, -9223372036854775807
  %148 = icmp eq i64 %147, 0
  %149 = zext i1 %148 to i8
  br label %150

150:                                              ; preds = %145, %136
  %151 = phi i8 [ %149, %145 ], [ %137, %136 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  br label %152

152:                                              ; preds = %90, %107, %113, %150
  %153 = phi i64 [ %100, %150 ], [ %100, %113 ], [ %100, %107 ], [ %91, %90 ]
  %154 = phi i8 [ %151, %150 ], [ 0, %113 ], [ 0, %107 ], [ 1, %90 ]
  %155 = icmp ult i64 %153, 1114112
  %156 = and i8 %9, 16
  %157 = icmp eq i8 %156, 0
  %158 = select i1 %155, i1 true, i1 %157
  br i1 %158, label %162, label %159

159:                                              ; preds = %152
  %160 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 48) #12
  br i1 %160, label %161, label %162

161:                                              ; preds = %159
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 48, ptr noundef nonnull @.str.8, i64 noundef %153) #12
  br label %162

162:                                              ; preds = %80, %28, %40, %52, %152, %159, %161
  %163 = phi i8 [ %154, %161 ], [ %154, %159 ], [ %154, %152 ], [ 1, %52 ], [ 1, %40 ], [ 1, %28 ], [ 1, %80 ]
  %164 = xor i8 %163, %9
  %165 = and i8 %164, 1
  %166 = icmp ne i8 %165, 0
  ret i1 %166
}

declare i32 @Perl_foldEQ_latin1(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i32 @Perl_foldEQ(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i32 @Perl_foldEQ_locale(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i64 @Perl_utf8_length(ptr noundef, ptr noundef) local_unnamed_addr #2

declare i32 @Perl_foldEQ_utf8_flags(ptr noundef, ptr noundef, i64 noundef, i1 noundef zeroext, ptr noundef, ptr noundef, i64 noundef, i1 noundef zeroext, i32 noundef) local_unnamed_addr #2

declare void @Perl_ck_warner(i32 noundef, ptr noundef, ...) local_unnamed_addr #2

declare i64 @Perl_utf8n_to_uvchr(ptr noundef, i64 noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare zeroext i1 @Perl_ckwarn(i32 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #4

declare zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext, i64 noundef) local_unnamed_addr #2

declare ptr @Perl__core_swash_init(ptr noundef, ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext, ptr noundef) local_unnamed_addr #2

declare i64 @Perl__invlist_search(ptr noundef, i64 noundef) local_unnamed_addr #2

declare zeroext i1 @Perl_ckwarn_d(i32 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal fastcc zeroext i1 @S_isGCB(i32 noundef %0, i32 noundef %1) unnamed_addr #5 {
  %3 = mul i32 %0, 14
  %4 = add i32 %3, %1
  switch i32 %4, label %13 [
    i32 20, label %5
    i32 75, label %6
    i32 83, label %6
    i32 77, label %6
    i32 78, label %6
    i32 111, label %7
    i32 110, label %7
    i32 195, label %7
    i32 194, label %7
    i32 124, label %8
    i32 180, label %8
    i32 150, label %9
    i32 4, label %10
    i32 60, label %10
    i32 74, label %10
    i32 102, label %10
    i32 116, label %10
    i32 130, label %10
    i32 144, label %10
    i32 158, label %10
    i32 172, label %10
    i32 186, label %10
    i32 11, label %11
    i32 67, label %11
    i32 81, label %11
    i32 109, label %11
    i32 123, label %11
    i32 137, label %11
    i32 151, label %11
    i32 165, label %11
    i32 179, label %11
    i32 193, label %11
    i32 126, label %12
    i32 131, label %12
    i32 133, label %12
    i32 134, label %12
    i32 135, label %12
    i32 136, label %12
    i32 138, label %12
    i32 139, label %12
  ]

5:                                                ; preds = %2
  br label %13

6:                                                ; preds = %2, %2, %2, %2
  br label %13

7:                                                ; preds = %2, %2, %2, %2
  br label %13

8:                                                ; preds = %2, %2
  br label %13

9:                                                ; preds = %2
  br label %13

10:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2, %2, %2
  br label %13

11:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2, %2, %2
  br label %13

12:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  br label %13

13:                                               ; preds = %2, %12, %11, %10, %9, %8, %7, %6, %5
  %14 = phi i1 [ false, %12 ], [ false, %11 ], [ false, %10 ], [ false, %9 ], [ false, %8 ], [ false, %7 ], [ false, %6 ], [ false, %5 ], [ true, %2 ]
  ret i1 %14
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isSB(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i1 noundef zeroext %5) unnamed_addr #0 {
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #12
  store ptr %3, ptr %7, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #12
  %10 = icmp eq i32 %0, 4
  %11 = icmp eq i32 %1, 4
  %12 = or i1 %10, %11
  br i1 %12, label %97, label %13

13:                                               ; preds = %6
  %14 = icmp eq i32 %0, 2
  %15 = icmp eq i32 %1, 7
  %16 = and i1 %14, %15
  br i1 %16, label %97, label %17

17:                                               ; preds = %13
  switch i32 %0, label %18 [
    i32 13, label %97
    i32 7, label %97
    i32 2, label %97
  ]

18:                                               ; preds = %17
  %19 = add i32 %1, -5
  %20 = icmp ult i32 %19, 2
  br i1 %20, label %97, label %21

21:                                               ; preds = %18
  %22 = add i32 %0, -5
  %23 = icmp ult i32 %22, 2
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %7, i1 noundef zeroext %5)
  br label %26

26:                                               ; preds = %21, %24
  %27 = phi i32 [ %25, %24 ], [ %0, %21 ]
  %28 = icmp eq i32 %27, 1
  %29 = icmp eq i32 %1, 9
  %30 = and i1 %29, %28
  br i1 %30, label %97, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %1, 15
  %33 = and i1 %32, %28
  %34 = load ptr, ptr %7, align 8, !tbaa !13
  store ptr %34, ptr %8, align 8, !tbaa !13
  br i1 %33, label %35, label %38

35:                                               ; preds = %31
  %36 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  %37 = icmp eq i32 %36, 15
  br i1 %37, label %97, label %56

38:                                               ; preds = %31
  %39 = icmp eq i32 %27, 14
  br i1 %39, label %43, label %40

40:                                               ; preds = %43, %38
  %41 = phi i32 [ %27, %38 ], [ %44, %43 ]
  %42 = icmp eq i32 %41, 3
  br i1 %42, label %46, label %49

43:                                               ; preds = %38, %43
  %44 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  %45 = icmp eq i32 %44, 14
  br i1 %45, label %43, label %40, !llvm.loop !259

46:                                               ; preds = %40, %46
  %47 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  %48 = icmp eq i32 %47, 3
  br i1 %48, label %46, label %49, !llvm.loop !260

49:                                               ; preds = %46, %40
  %50 = phi i32 [ %41, %40 ], [ %47, %46 ]
  %51 = icmp eq i32 %50, 1
  switch i32 %50, label %63 [
    i32 12, label %52
    i32 1, label %52
  ]

52:                                               ; preds = %49, %49
  %53 = add i32 %1, -1
  %54 = icmp ult i32 %53, 14
  br i1 %54, label %86, label %55

55:                                               ; preds = %86, %52
  br i1 %51, label %56, label %63

56:                                               ; preds = %35, %55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  store ptr %3, ptr %9, align 8, !tbaa !13
  br label %57

57:                                               ; preds = %59, %56
  %58 = phi i32 [ %1, %56 ], [ %60, %59 ]
  switch i32 %58, label %59 [
    i32 15, label %61
    i32 13, label %61
    i32 12, label %61
    i32 10, label %61
    i32 8, label %61
    i32 7, label %61
    i32 4, label %61
    i32 2, label %61
    i32 1, label %61
  ]

59:                                               ; preds = %57
  %60 = call fastcc i32 @S_advance_one_SB(ptr noundef nonnull %9, ptr noundef %4, i1 noundef zeroext %5), !range !261
  br label %57, !llvm.loop !262

61:                                               ; preds = %57, %57, %57, %57, %57, %57, %57, %57, %57
  %62 = icmp eq i32 %58, 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  br i1 %62, label %97, label %63

63:                                               ; preds = %49, %61, %55
  store ptr %34, ptr %8, align 8, !tbaa !13
  br label %64

64:                                               ; preds = %66, %63
  %65 = phi i32 [ %27, %63 ], [ %67, %66 ]
  switch i32 %65, label %71 [
    i32 3, label %66
    i32 12, label %68
    i32 1, label %68
  ]

66:                                               ; preds = %64
  %67 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  br label %64, !llvm.loop !263

68:                                               ; preds = %64, %64
  %69 = add i32 %1, -2
  %70 = icmp ult i32 %69, 13
  br i1 %70, label %91, label %71

71:                                               ; preds = %64, %91, %68
  store ptr %34, ptr %8, align 8, !tbaa !13
  %72 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  switch i32 %72, label %75 [
    i32 13, label %73
    i32 7, label %73
    i32 2, label %73
  ]

73:                                               ; preds = %71, %71, %71
  %74 = load ptr, ptr %8, align 8, !tbaa !13
  store ptr %74, ptr %7, align 8, !tbaa !13
  br label %80

75:                                               ; preds = %71
  %76 = icmp eq i32 %27, 14
  br i1 %76, label %77, label %80

77:                                               ; preds = %75, %77
  %78 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %7, i1 noundef zeroext %5)
  %79 = icmp eq i32 %78, 14
  br i1 %79, label %77, label %80, !llvm.loop !264

80:                                               ; preds = %77, %73, %75
  %81 = phi i32 [ %72, %73 ], [ %27, %75 ], [ %78, %77 ]
  br label %82

82:                                               ; preds = %80, %84
  %83 = phi i32 [ %85, %84 ], [ %81, %80 ]
  switch i32 %83, label %97 [
    i32 3, label %84
    i32 12, label %96
    i32 1, label %96
  ]

84:                                               ; preds = %82
  %85 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %7, i1 noundef zeroext %5)
  br label %82, !llvm.loop !265

86:                                               ; preds = %52
  %87 = trunc i32 %53 to i16
  %88 = lshr i16 15427, %87
  %89 = and i16 %88, 1
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %55, label %97

91:                                               ; preds = %68
  %92 = trunc i32 %69 to i16
  %93 = lshr i16 6179, %92
  %94 = and i16 %93, 1
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %71, label %97

96:                                               ; preds = %82, %82
  br label %97

97:                                               ; preds = %82, %96, %91, %86, %35, %26, %18, %17, %17, %17, %13, %6, %61
  %98 = phi i1 [ false, %61 ], [ true, %6 ], [ false, %13 ], [ true, %17 ], [ true, %17 ], [ true, %17 ], [ false, %18 ], [ false, %26 ], [ false, %35 ], [ false, %86 ], [ false, %91 ], [ true, %96 ], [ false, %82 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  ret i1 %98
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isWB(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i1 noundef zeroext %6) unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  store i32 %0, ptr %8, align 4, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  store ptr %4, ptr %9, align 8, !tbaa !13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #12
  store ptr %4, ptr %10, align 8, !tbaa !13
  %11 = icmp eq i32 %1, 4
  %12 = icmp eq i32 %2, 4
  %13 = or i1 %11, %12
  br i1 %13, label %70, label %14

14:                                               ; preds = %7
  %15 = icmp eq i32 %1, 2
  %16 = icmp eq i32 %2, 10
  %17 = and i1 %15, %16
  br i1 %17, label %70, label %18

18:                                               ; preds = %14
  %19 = and i32 %1, -5
  %20 = icmp eq i32 %19, 10
  %21 = icmp eq i32 %2, 2
  %22 = or i1 %20, %21
  %23 = icmp eq i32 %2, 14
  %24 = or i1 %23, %22
  %25 = or i1 %15, %24
  %26 = or i1 %16, %25
  br i1 %26, label %70, label %27

27:                                               ; preds = %18
  %28 = and i32 %2, -3
  %29 = icmp eq i32 %28, 5
  br i1 %29, label %70, label %30

30:                                               ; preds = %27
  %31 = and i32 %1, -3
  %32 = icmp eq i32 %31, 5
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  br label %35

35:                                               ; preds = %30, %33
  %36 = phi i32 [ %34, %33 ], [ %1, %30 ]
  %37 = mul i32 %36, 19
  %38 = add i32 %37, %2
  switch i32 %38, label %70 [
    i32 20, label %39
    i32 27, label %39
    i32 153, label %39
    i32 160, label %39
    i32 30, label %40
    i32 32, label %40
    i32 36, label %40
    i32 163, label %40
    i32 165, label %40
    i32 210, label %45
    i32 217, label %45
    i32 248, label %45
    i32 255, label %45
    i32 324, label %45
    i32 331, label %45
    i32 169, label %50
    i32 155, label %51
    i32 65, label %54
    i32 300, label %57
    i32 34, label %58
    i32 167, label %58
    i32 286, label %59
    i32 293, label %59
    i32 243, label %60
    i32 262, label %60
    i32 338, label %60
    i32 297, label %63
    i32 298, label %63
    i32 302, label %63
    i32 180, label %66
    i32 25, label %67
    i32 158, label %67
    i32 291, label %67
    i32 177, label %67
    i32 120, label %67
    i32 115, label %68
    i32 122, label %68
    i32 129, label %68
    i32 123, label %68
    i32 320, label %69
  ]

39:                                               ; preds = %35, %35, %35, %35
  br label %70

40:                                               ; preds = %35, %35, %35, %35, %35
  %41 = call fastcc i32 @S_advance_one_WB(ptr noundef nonnull %10, ptr noundef %5, i1 noundef zeroext %6), !range !266
  %42 = icmp ne i32 %41, 1
  %43 = icmp ne i32 %41, 8
  %44 = and i1 %42, %43
  br label %70

45:                                               ; preds = %35, %35, %35, %35, %35, %35
  %46 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  %47 = icmp ne i32 %46, 1
  %48 = icmp ne i32 %46, 8
  %49 = and i1 %47, %48
  br label %70

50:                                               ; preds = %35
  br label %70

51:                                               ; preds = %35
  %52 = call fastcc i32 @S_advance_one_WB(ptr noundef nonnull %10, ptr noundef %5, i1 noundef zeroext %6), !range !266
  %53 = icmp ne i32 %52, 8
  br label %70

54:                                               ; preds = %35
  %55 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  %56 = icmp ne i32 %55, 8
  br label %70

57:                                               ; preds = %35
  br label %70

58:                                               ; preds = %35, %35
  br label %70

59:                                               ; preds = %35, %35
  br label %70

60:                                               ; preds = %35, %35, %35
  %61 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  %62 = icmp ne i32 %61, 15
  br label %70

63:                                               ; preds = %35, %35, %35
  %64 = call fastcc i32 @S_advance_one_WB(ptr noundef nonnull %10, ptr noundef %5, i1 noundef zeroext %6), !range !266
  %65 = icmp ne i32 %64, 15
  br label %70

66:                                               ; preds = %35
  br label %70

67:                                               ; preds = %35, %35, %35, %35, %35
  br label %70

68:                                               ; preds = %35, %35, %35, %35
  br label %70

69:                                               ; preds = %35
  br label %70

70:                                               ; preds = %35, %27, %18, %14, %7, %69, %68, %67, %66, %63, %60, %59, %58, %57, %54, %51, %50, %45, %40, %39
  %71 = phi i1 [ false, %69 ], [ false, %68 ], [ false, %67 ], [ false, %66 ], [ %65, %63 ], [ %62, %60 ], [ false, %59 ], [ false, %58 ], [ false, %57 ], [ %56, %54 ], [ %53, %51 ], [ false, %50 ], [ %49, %45 ], [ %44, %40 ], [ false, %39 ], [ true, %7 ], [ false, %14 ], [ true, %18 ], [ false, %27 ], [ true, %35 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  ret i1 %71
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isFOO_utf8_lc(i8 noundef zeroext %0, ptr noundef %1) unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = load i8, ptr %1, align 1, !tbaa !6
  %5 = icmp sgt i8 %4, -1
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %0, i8 noundef zeroext %4)
  br label %126

8:                                                ; preds = %2
  %9 = and i8 %4, -2
  %10 = icmp eq i8 %9, -62
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = shl i8 %4, 6
  %13 = getelementptr inbounds i8, ptr %1, i64 1
  %14 = load i8, ptr %13, align 1, !tbaa !6
  %15 = and i8 %14, 63
  %16 = or i8 %15, %12
  %17 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %0, i8 noundef zeroext %16)
  br label %126

18:                                               ; preds = %8
  %19 = icmp ult i8 %0, 10
  br i1 %19, label %20, label %33

20:                                               ; preds = %18
  %21 = zext i8 %0 to i64
  %22 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !13
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #12
  store i8 4, ptr %3, align 1, !tbaa !6
  %26 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %21
  %27 = load ptr, ptr %26, align 8, !tbaa !13
  %28 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %27, ptr noundef nonnull %3) #12
  store ptr %28, ptr %22, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #12
  br label %29

29:                                               ; preds = %25, %20
  %30 = phi ptr [ %28, %25 ], [ %23, %20 ]
  %31 = call i64 @Perl_swash_fetch(ptr noundef %30, ptr noundef nonnull %1, i1 noundef zeroext true) #12
  %32 = icmp ne i64 %31, 0
  br label %126

33:                                               ; preds = %18
  switch i8 %0, label %126 [
    i8 10, label %34
    i8 11, label %67
    i8 12, label %97
    i8 15, label %115
  ]

34:                                               ; preds = %33
  switch i8 %4, label %126 [
    i8 -31, label %35
    i8 -30, label %43
    i8 -29, label %59
  ]

35:                                               ; preds = %34
  %36 = getelementptr inbounds i8, ptr %1, i64 1
  %37 = load i8, ptr %36, align 1, !tbaa !6
  %38 = icmp eq i8 %37, -102
  br i1 %38, label %39, label %126

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, ptr %1, i64 2
  %41 = load i8, ptr %40, align 1, !tbaa !6
  %42 = icmp eq i8 %41, -128
  br label %126

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8, ptr %1, i64 1
  %45 = load i8, ptr %44, align 1, !tbaa !6
  switch i8 %45, label %126 [
    i8 -128, label %46
    i8 -127, label %55
  ]

46:                                               ; preds = %43
  %47 = getelementptr inbounds i8, ptr %1, i64 2
  %48 = load i8, ptr %47, align 1, !tbaa !6
  %49 = icmp ult i8 %48, -117
  %50 = and i8 %48, -2
  %51 = icmp eq i8 %50, -88
  %52 = or i1 %49, %51
  %53 = icmp eq i8 %48, -81
  %54 = or i1 %53, %52
  br label %126

55:                                               ; preds = %43
  %56 = getelementptr inbounds i8, ptr %1, i64 2
  %57 = load i8, ptr %56, align 1, !tbaa !6
  %58 = icmp eq i8 %57, -97
  br label %126

59:                                               ; preds = %34
  %60 = getelementptr inbounds i8, ptr %1, i64 1
  %61 = load i8, ptr %60, align 1, !tbaa !6
  %62 = icmp eq i8 %61, -128
  br i1 %62, label %63, label %126

63:                                               ; preds = %59
  %64 = getelementptr inbounds i8, ptr %1, i64 2
  %65 = load i8, ptr %64, align 1, !tbaa !6
  %66 = icmp eq i8 %65, -128
  br label %126

67:                                               ; preds = %33
  switch i8 %4, label %126 [
    i8 -31, label %68
    i8 -30, label %76
    i8 -29, label %89
  ]

68:                                               ; preds = %67
  %69 = getelementptr inbounds i8, ptr %1, i64 1
  %70 = load i8, ptr %69, align 1, !tbaa !6
  %71 = icmp eq i8 %70, -102
  br i1 %71, label %72, label %126

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, ptr %1, i64 2
  %74 = load i8, ptr %73, align 1, !tbaa !6
  %75 = icmp eq i8 %74, -128
  br label %126

76:                                               ; preds = %67
  %77 = getelementptr inbounds i8, ptr %1, i64 1
  %78 = load i8, ptr %77, align 1, !tbaa !6
  switch i8 %78, label %126 [
    i8 -128, label %79
    i8 -127, label %85
  ]

79:                                               ; preds = %76
  %80 = getelementptr inbounds i8, ptr %1, i64 2
  %81 = load i8, ptr %80, align 1, !tbaa !6
  %82 = icmp ult i8 %81, -117
  %83 = icmp eq i8 %81, -81
  %84 = or i1 %82, %83
  br label %126

85:                                               ; preds = %76
  %86 = getelementptr inbounds i8, ptr %1, i64 2
  %87 = load i8, ptr %86, align 1, !tbaa !6
  %88 = icmp eq i8 %87, -97
  br label %126

89:                                               ; preds = %67
  %90 = getelementptr inbounds i8, ptr %1, i64 1
  %91 = load i8, ptr %90, align 1, !tbaa !6
  %92 = icmp eq i8 %91, -128
  br i1 %92, label %93, label %126

93:                                               ; preds = %89
  %94 = getelementptr inbounds i8, ptr %1, i64 2
  %95 = load i8, ptr %94, align 1, !tbaa !6
  %96 = icmp eq i8 %95, -128
  br label %126

97:                                               ; preds = %33
  %98 = icmp eq i8 %4, -17
  br i1 %98, label %99, label %126

99:                                               ; preds = %97
  %100 = getelementptr inbounds i8, ptr %1, i64 1
  %101 = load i8, ptr %100, align 1, !tbaa !6
  switch i8 %101, label %126 [
    i8 -68, label %102
    i8 -67, label %110
  ]

102:                                              ; preds = %99
  %103 = getelementptr inbounds i8, ptr %1, i64 2
  %104 = load i8, ptr %103, align 1, !tbaa !6
  %105 = add i8 %104, 112
  %106 = icmp ult i8 %105, 10
  br i1 %106, label %126, label %107

107:                                              ; preds = %102
  %108 = add i8 %104, 95
  %109 = icmp ult i8 %108, 6
  br label %126

110:                                              ; preds = %99
  %111 = getelementptr inbounds i8, ptr %1, i64 2
  %112 = load i8, ptr %111, align 1, !tbaa !6
  %113 = add i8 %112, 127
  %114 = icmp ult i8 %113, 6
  br label %126

115:                                              ; preds = %33
  %116 = icmp eq i8 %4, -30
  br i1 %116, label %117, label %126

117:                                              ; preds = %115
  %118 = getelementptr inbounds i8, ptr %1, i64 1
  %119 = load i8, ptr %118, align 1, !tbaa !6
  %120 = icmp eq i8 %119, -128
  br i1 %120, label %121, label %126

121:                                              ; preds = %117
  %122 = getelementptr inbounds i8, ptr %1, i64 2
  %123 = load i8, ptr %122, align 1, !tbaa !6
  %124 = and i8 %123, -2
  %125 = icmp eq i8 %124, -88
  br label %126

126:                                              ; preds = %79, %72, %68, %76, %85, %67, %93, %89, %46, %39, %35, %43, %55, %34, %63, %59, %110, %107, %33, %115, %117, %121, %97, %102, %99, %29, %11, %6
  %127 = phi i1 [ %7, %6 ], [ %17, %11 ], [ %32, %29 ], [ false, %97 ], [ true, %102 ], [ %109, %107 ], [ false, %99 ], [ %114, %110 ], [ false, %117 ], [ false, %115 ], [ %125, %121 ], [ false, %33 ], [ %54, %46 ], [ false, %35 ], [ %42, %39 ], [ %58, %55 ], [ false, %43 ], [ false, %59 ], [ %66, %63 ], [ false, %34 ], [ %84, %79 ], [ false, %68 ], [ %75, %72 ], [ %88, %85 ], [ false, %76 ], [ false, %89 ], [ %96, %93 ], [ false, %67 ]
  ret i1 %127
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %0, i8 noundef zeroext %1) unnamed_addr #0 {
  switch i8 %0, label %151 [
    i8 7, label %3
    i8 2, label %13
    i8 14, label %23
    i8 11, label %25
    i8 9, label %37
    i8 13, label %50
    i8 1, label %60
    i8 8, label %70
    i8 3, label %79
    i8 6, label %89
    i8 5, label %99
    i8 10, label %109
    i8 4, label %119
    i8 0, label %129
    i8 12, label %141
  ]

3:                                                ; preds = %2
  %4 = icmp sgt i8 %1, -1
  br i1 %4, label %5, label %153

5:                                                ; preds = %3
  %6 = tail call ptr @__ctype_b_loc() #14
  %7 = load ptr, ptr %6, align 8, !tbaa !13
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds i16, ptr %7, i64 %8
  %10 = load i16, ptr %9, align 2, !tbaa !152
  %11 = and i16 %10, 8
  %12 = icmp ne i16 %11, 0
  br label %153

13:                                               ; preds = %2
  %14 = icmp sgt i8 %1, -1
  br i1 %14, label %15, label %153

15:                                               ; preds = %13
  %16 = tail call ptr @__ctype_b_loc() #14
  %17 = load ptr, ptr %16, align 8, !tbaa !13
  %18 = zext i8 %1 to i64
  %19 = getelementptr inbounds i16, ptr %17, i64 %18
  %20 = load i16, ptr %19, align 2, !tbaa !152
  %21 = and i16 %20, 1024
  %22 = icmp ne i16 %21, 0
  br label %153

23:                                               ; preds = %2
  %24 = icmp sgt i8 %1, -1
  br label %153

25:                                               ; preds = %2
  %26 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !151, !range !97, !noundef !98
  %27 = icmp eq i8 %26, 0
  %28 = zext i8 %1 to i64
  %29 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !34
  br i1 %27, label %34, label %31

31:                                               ; preds = %25
  %32 = and i32 %30, 2048
  %33 = icmp ne i32 %32, 0
  br label %153

34:                                               ; preds = %25
  %35 = and i32 %30, 18432
  %36 = icmp eq i32 %35, 18432
  br label %153

37:                                               ; preds = %2
  %38 = icmp sgt i8 %1, -1
  br i1 %38, label %39, label %153

39:                                               ; preds = %37
  %40 = tail call ptr @__ctype_b_loc() #14
  %41 = load ptr, ptr %40, align 8, !tbaa !13
  %42 = zext i8 %1 to i64
  %43 = getelementptr inbounds i16, ptr %41, i64 %42
  %44 = load i16, ptr %43, align 2, !tbaa !152
  %45 = and i16 %44, 512
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %47, label %153

47:                                               ; preds = %39
  %48 = and i16 %44, 256
  %49 = icmp ne i16 %48, 0
  br label %153

50:                                               ; preds = %2
  %51 = icmp sgt i8 %1, -1
  br i1 %51, label %52, label %153

52:                                               ; preds = %50
  %53 = tail call ptr @__ctype_b_loc() #14
  %54 = load ptr, ptr %53, align 8, !tbaa !13
  %55 = zext i8 %1 to i64
  %56 = getelementptr inbounds i16, ptr %54, i64 %55
  %57 = load i16, ptr %56, align 2, !tbaa !152
  %58 = and i16 %57, 2
  %59 = icmp ne i16 %58, 0
  br label %153

60:                                               ; preds = %2
  %61 = icmp sgt i8 %1, -1
  br i1 %61, label %62, label %153

62:                                               ; preds = %60
  %63 = tail call ptr @__ctype_b_loc() #14
  %64 = load ptr, ptr %63, align 8, !tbaa !13
  %65 = zext i8 %1 to i64
  %66 = getelementptr inbounds i16, ptr %64, i64 %65
  %67 = load i16, ptr %66, align 2, !tbaa !152
  %68 = and i16 %67, 2048
  %69 = icmp ne i16 %68, 0
  br label %153

70:                                               ; preds = %2
  %71 = icmp sgt i8 %1, -1
  br i1 %71, label %72, label %153

72:                                               ; preds = %70
  %73 = tail call ptr @__ctype_b_loc() #14
  %74 = load ptr, ptr %73, align 8, !tbaa !13
  %75 = zext i8 %1 to i64
  %76 = getelementptr inbounds i16, ptr %74, i64 %75
  %77 = load i16, ptr %76, align 2, !tbaa !152
  %78 = icmp slt i16 %77, 0
  br label %153

79:                                               ; preds = %2
  %80 = icmp sgt i8 %1, -1
  br i1 %80, label %81, label %153

81:                                               ; preds = %79
  %82 = tail call ptr @__ctype_b_loc() #14
  %83 = load ptr, ptr %82, align 8, !tbaa !13
  %84 = zext i8 %1 to i64
  %85 = getelementptr inbounds i16, ptr %83, i64 %84
  %86 = load i16, ptr %85, align 2, !tbaa !152
  %87 = and i16 %86, 512
  %88 = icmp ne i16 %87, 0
  br label %153

89:                                               ; preds = %2
  %90 = icmp sgt i8 %1, -1
  br i1 %90, label %91, label %153

91:                                               ; preds = %89
  %92 = tail call ptr @__ctype_b_loc() #14
  %93 = load ptr, ptr %92, align 8, !tbaa !13
  %94 = zext i8 %1 to i64
  %95 = getelementptr inbounds i16, ptr %93, i64 %94
  %96 = load i16, ptr %95, align 2, !tbaa !152
  %97 = and i16 %96, 16384
  %98 = icmp ne i16 %97, 0
  br label %153

99:                                               ; preds = %2
  %100 = icmp sgt i8 %1, -1
  br i1 %100, label %101, label %153

101:                                              ; preds = %99
  %102 = tail call ptr @__ctype_b_loc() #14
  %103 = load ptr, ptr %102, align 8, !tbaa !13
  %104 = zext i8 %1 to i64
  %105 = getelementptr inbounds i16, ptr %103, i64 %104
  %106 = load i16, ptr %105, align 2, !tbaa !152
  %107 = and i16 %106, 4
  %108 = icmp ne i16 %107, 0
  br label %153

109:                                              ; preds = %2
  %110 = icmp sgt i8 %1, -1
  br i1 %110, label %111, label %153

111:                                              ; preds = %109
  %112 = tail call ptr @__ctype_b_loc() #14
  %113 = load ptr, ptr %112, align 8, !tbaa !13
  %114 = zext i8 %1 to i64
  %115 = getelementptr inbounds i16, ptr %113, i64 %114
  %116 = load i16, ptr %115, align 2, !tbaa !152
  %117 = and i16 %116, 8192
  %118 = icmp ne i16 %117, 0
  br label %153

119:                                              ; preds = %2
  %120 = icmp sgt i8 %1, -1
  br i1 %120, label %121, label %153

121:                                              ; preds = %119
  %122 = tail call ptr @__ctype_b_loc() #14
  %123 = load ptr, ptr %122, align 8, !tbaa !13
  %124 = zext i8 %1 to i64
  %125 = getelementptr inbounds i16, ptr %123, i64 %124
  %126 = load i16, ptr %125, align 2, !tbaa !152
  %127 = and i16 %126, 256
  %128 = icmp ne i16 %127, 0
  br label %153

129:                                              ; preds = %2
  %130 = icmp sgt i8 %1, -1
  br i1 %130, label %131, label %153

131:                                              ; preds = %129
  %132 = tail call ptr @__ctype_b_loc() #14
  %133 = load ptr, ptr %132, align 8, !tbaa !13
  %134 = zext i8 %1 to i64
  %135 = getelementptr inbounds i16, ptr %133, i64 %134
  %136 = load i16, ptr %135, align 2, !tbaa !152
  %137 = and i16 %136, 8
  %138 = icmp ne i16 %137, 0
  %139 = icmp eq i8 %1, 95
  %140 = or i1 %139, %138
  br label %153

141:                                              ; preds = %2
  %142 = icmp sgt i8 %1, -1
  br i1 %142, label %143, label %153

143:                                              ; preds = %141
  %144 = tail call ptr @__ctype_b_loc() #14
  %145 = load ptr, ptr %144, align 8, !tbaa !13
  %146 = zext i8 %1 to i64
  %147 = getelementptr inbounds i16, ptr %145, i64 %146
  %148 = load i16, ptr %147, align 2, !tbaa !152
  %149 = and i16 %148, 4096
  %150 = icmp ne i16 %149, 0
  br label %153

151:                                              ; preds = %2
  %152 = zext i8 %0 to i32
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.9, i32 noundef %152) #12
  br label %153

153:                                              ; preds = %141, %143, %129, %131, %119, %121, %109, %111, %99, %101, %89, %91, %79, %81, %70, %72, %60, %62, %50, %52, %47, %39, %37, %31, %34, %13, %15, %3, %5, %151, %23
  %154 = phi i1 [ false, %151 ], [ %24, %23 ], [ false, %3 ], [ %12, %5 ], [ false, %13 ], [ %22, %15 ], [ %33, %31 ], [ %36, %34 ], [ true, %39 ], [ %49, %47 ], [ false, %37 ], [ false, %50 ], [ %59, %52 ], [ false, %60 ], [ %69, %62 ], [ false, %70 ], [ %78, %72 ], [ false, %79 ], [ %88, %81 ], [ false, %89 ], [ %98, %91 ], [ false, %99 ], [ %108, %101 ], [ false, %109 ], [ %118, %111 ], [ false, %119 ], [ %128, %121 ], [ false, %129 ], [ %140, %131 ], [ false, %141 ], [ %150, %143 ]
  ret i1 %154
}

declare i64 @Perl_swash_fetch(ptr noundef, ptr noundef, i1 noundef zeroext) local_unnamed_addr #2

declare void @Perl_push_scope() local_unnamed_addr #2

declare void @Perl_save_strlen(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_sv_2mortal(ptr noundef) local_unnamed_addr #2

declare i64 @Perl__to_utf8_fold_flags(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #2

declare i64 @Perl__to_fold_latin1(i8 noundef zeroext, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_hv_common_key_len(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i64 @Perl_sv_2iv_flags(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_free_tmps() local_unnamed_addr #2

declare void @Perl_pop_scope() local_unnamed_addr #2

declare void @Perl_warner(i32 noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_backup_one_SB(ptr noundef %0, ptr nocapture noundef %1, i1 noundef zeroext %2) unnamed_addr #0 {
  %4 = load ptr, ptr %1, align 8, !tbaa !13
  %5 = icmp ult ptr %4, %0
  br i1 %5, label %95, label %6

6:                                                ; preds = %3
  br i1 %2, label %7, label %80

7:                                                ; preds = %6
  %8 = ptrtoint ptr %0 to i64
  %9 = icmp ugt ptr %4, %0
  br i1 %9, label %10, label %95

10:                                               ; preds = %7
  %11 = ptrtoint ptr %4 to i64
  %12 = getelementptr inbounds i8, ptr %4, i64 -1
  %13 = load i8, ptr %12, align 1, !tbaa !6
  %14 = icmp sgt i8 %13, -1
  br i1 %14, label %36, label %15

15:                                               ; preds = %10
  %16 = icmp ugt ptr %12, %0
  br i1 %16, label %17, label %31

17:                                               ; preds = %15
  %18 = getelementptr i8, ptr %4, i64 %8
  %19 = sub i64 0, %11
  %20 = getelementptr i8, ptr %18, i64 %19
  br label %21

21:                                               ; preds = %26, %17
  %22 = phi ptr [ %27, %26 ], [ %12, %17 ]
  %23 = load i8, ptr %22, align 1, !tbaa !6
  %24 = and i8 %23, -64
  %25 = icmp eq i8 %24, -128
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = getelementptr inbounds i8, ptr %22, i64 -1
  %28 = icmp ugt ptr %27, %0
  br i1 %28, label %21, label %29, !llvm.loop !130

29:                                               ; preds = %26
  %30 = load i8, ptr %20, align 1, !tbaa !6
  br label %31

31:                                               ; preds = %21, %29, %15
  %32 = phi ptr [ %12, %15 ], [ %20, %29 ], [ %22, %21 ]
  %33 = phi i8 [ %13, %15 ], [ %30, %29 ], [ %23, %21 ]
  %34 = icmp ugt i8 %33, -63
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %36

36:                                               ; preds = %10, %31, %35
  %37 = phi ptr [ %12, %10 ], [ %32, %35 ], [ %32, %31 ]
  br label %38

38:                                               ; preds = %36, %67
  %39 = phi ptr [ %68, %67 ], [ %37, %36 ]
  %40 = icmp ugt ptr %39, %0
  br i1 %40, label %41, label %94

41:                                               ; preds = %38
  %42 = ptrtoint ptr %39 to i64
  %43 = getelementptr inbounds i8, ptr %39, i64 -1
  %44 = load i8, ptr %43, align 1, !tbaa !6
  %45 = icmp sgt i8 %44, -1
  br i1 %45, label %67, label %46

46:                                               ; preds = %41
  %47 = icmp ugt ptr %43, %0
  br i1 %47, label %48, label %62

48:                                               ; preds = %46
  %49 = getelementptr i8, ptr %39, i64 %8
  %50 = sub i64 0, %42
  %51 = getelementptr i8, ptr %49, i64 %50
  br label %52

52:                                               ; preds = %57, %48
  %53 = phi ptr [ %58, %57 ], [ %43, %48 ]
  %54 = load i8, ptr %53, align 1, !tbaa !6
  %55 = and i8 %54, -64
  %56 = icmp eq i8 %55, -128
  br i1 %56, label %57, label %62

57:                                               ; preds = %52
  %58 = getelementptr inbounds i8, ptr %53, i64 -1
  %59 = icmp ugt ptr %58, %0
  br i1 %59, label %52, label %60, !llvm.loop !130

60:                                               ; preds = %57
  %61 = load i8, ptr %51, align 1, !tbaa !6
  br label %62

62:                                               ; preds = %52, %60, %46
  %63 = phi ptr [ %43, %46 ], [ %51, %60 ], [ %53, %52 ]
  %64 = phi i8 [ %44, %46 ], [ %61, %60 ], [ %54, %52 ]
  %65 = icmp ugt i8 %64, -63
  br i1 %65, label %67, label %66

66:                                               ; preds = %62
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %67

67:                                               ; preds = %41, %62, %66
  %68 = phi ptr [ %63, %62 ], [ %63, %66 ], [ %43, %41 ]
  %69 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %70 = ptrtoint ptr %68 to i64
  %71 = sub i64 %42, %70
  %72 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %73 = select i1 %72, i32 0, i32 -8161
  %74 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %68, i64 noundef %71, ptr noundef null, i32 noundef %73) #12
  %75 = tail call i64 @Perl__invlist_search(ptr noundef %69, i64 noundef %74) #12
  %76 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !6
  store ptr %39, ptr %1, align 8, !tbaa !13
  %78 = add i32 %77, -5
  %79 = icmp ult i32 %78, 2
  br i1 %79, label %38, label %95, !llvm.loop !267

80:                                               ; preds = %6, %84
  %81 = load ptr, ptr %1, align 8, !tbaa !13
  %82 = getelementptr inbounds i8, ptr %81, i64 -2
  %83 = icmp ult ptr %82, %0
  br i1 %83, label %94, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, ptr %81, i64 -1
  store ptr %85, ptr %1, align 8, !tbaa !13
  %86 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %87 = load i8, ptr %82, align 1, !tbaa !6
  %88 = zext i8 %87 to i64
  %89 = tail call i64 @Perl__invlist_search(ptr noundef %86, i64 noundef %88) #12
  %90 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !6
  %92 = add i32 %91, -5
  %93 = icmp ult i32 %92, 2
  br i1 %93, label %80, label %95, !llvm.loop !268

94:                                               ; preds = %80, %38
  store ptr %0, ptr %1, align 8, !tbaa !13
  br label %95

95:                                               ; preds = %84, %67, %94, %7, %3
  %96 = phi i32 [ 4, %3 ], [ 4, %7 ], [ 4, %94 ], [ %77, %67 ], [ %91, %84 ]
  ret i32 %96
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_advance_one_SB(ptr nocapture noundef %0, ptr noundef %1, i1 noundef zeroext %2) unnamed_addr #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !13
  %5 = icmp ult ptr %4, %1
  br i1 %5, label %6, label %43

6:                                                ; preds = %3
  br i1 %2, label %7, label %30

7:                                                ; preds = %6
  %8 = ptrtoint ptr %1 to i64
  br label %9

9:                                                ; preds = %7, %18
  %10 = load ptr, ptr %0, align 8, !tbaa !13
  %11 = load i8, ptr %10, align 1, !tbaa !6
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !6
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, ptr %10, i64 %15
  store ptr %16, ptr %0, align 8, !tbaa !13
  %17 = icmp ult ptr %16, %1
  br i1 %17, label %18, label %43

18:                                               ; preds = %9
  %19 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %20 = ptrtoint ptr %16 to i64
  %21 = sub i64 %8, %20
  %22 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %23 = select i1 %22, i32 0, i32 -8161
  %24 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %16, i64 noundef %21, ptr noundef null, i32 noundef %23) #12
  %25 = tail call i64 @Perl__invlist_search(ptr noundef %19, i64 noundef %24) #12
  %26 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !6
  %28 = add i32 %27, -5
  %29 = icmp ult i32 %28, 2
  br i1 %29, label %9, label %43, !llvm.loop !269

30:                                               ; preds = %6, %34
  %31 = load ptr, ptr %0, align 8, !tbaa !13
  %32 = getelementptr inbounds i8, ptr %31, i64 1
  store ptr %32, ptr %0, align 8, !tbaa !13
  %33 = icmp ult ptr %32, %1
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %36 = load i8, ptr %32, align 1, !tbaa !6
  %37 = zext i8 %36 to i64
  %38 = tail call i64 @Perl__invlist_search(ptr noundef %35, i64 noundef %37) #12
  %39 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !6
  %41 = add i32 %40, -5
  %42 = icmp ult i32 %41, 2
  br i1 %42, label %30, label %43, !llvm.loop !270

43:                                               ; preds = %34, %30, %18, %9, %3
  %44 = phi i32 [ 4, %3 ], [ %27, %18 ], [ 4, %9 ], [ %40, %34 ], [ 4, %30 ]
  ret i32 %44
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_backup_one_WB(ptr nocapture noundef %0, ptr noundef %1, ptr nocapture noundef %2, i1 noundef zeroext %3) unnamed_addr #0 {
  %5 = load i32, ptr %0, align 4, !tbaa !6
  %6 = icmp eq i32 %5, 18
  br i1 %6, label %48, label %7

7:                                                ; preds = %4
  %8 = load ptr, ptr %2, align 8, !tbaa !13
  br i1 %3, label %9, label %41

9:                                                ; preds = %7
  %10 = ptrtoint ptr %1 to i64
  %11 = icmp ugt ptr %8, %1
  br i1 %11, label %12, label %38

12:                                               ; preds = %9
  %13 = ptrtoint ptr %8 to i64
  %14 = getelementptr inbounds i8, ptr %8, i64 -1
  %15 = load i8, ptr %14, align 1, !tbaa !6
  %16 = icmp sgt i8 %15, -1
  br i1 %16, label %39, label %17

17:                                               ; preds = %12
  %18 = icmp ugt ptr %14, %1
  br i1 %18, label %19, label %33

19:                                               ; preds = %17
  %20 = getelementptr i8, ptr %8, i64 %10
  %21 = sub i64 0, %13
  %22 = getelementptr i8, ptr %20, i64 %21
  br label %23

23:                                               ; preds = %28, %19
  %24 = phi ptr [ %29, %28 ], [ %14, %19 ]
  %25 = load i8, ptr %24, align 1, !tbaa !6
  %26 = and i8 %25, -64
  %27 = icmp eq i8 %26, -128
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = getelementptr inbounds i8, ptr %24, i64 -1
  %30 = icmp ugt ptr %29, %1
  br i1 %30, label %23, label %31, !llvm.loop !130

31:                                               ; preds = %28
  %32 = load i8, ptr %22, align 1, !tbaa !6
  br label %33

33:                                               ; preds = %23, %31, %17
  %34 = phi ptr [ %14, %17 ], [ %22, %31 ], [ %24, %23 ]
  %35 = phi i8 [ %15, %17 ], [ %32, %31 ], [ %25, %23 ]
  %36 = icmp ugt i8 %35, -63
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %39

38:                                               ; preds = %9
  store i32 4, ptr %0, align 4, !tbaa !6
  store ptr %1, ptr %2, align 8, !tbaa !13
  br label %45

39:                                               ; preds = %12, %33, %37
  %40 = phi ptr [ %34, %33 ], [ %34, %37 ], [ %14, %12 ]
  store ptr %40, ptr %2, align 8, !tbaa !13
  store i32 18, ptr %0, align 4, !tbaa !6
  br label %45

41:                                               ; preds = %7
  %42 = getelementptr inbounds i8, ptr %8, i64 -1
  store ptr %42, ptr %2, align 8, !tbaa !13
  %43 = icmp ugt ptr %42, %1
  %44 = select i1 %43, i32 18, i32 4
  store i32 %44, ptr %0, align 4, !tbaa !6
  br label %45

45:                                               ; preds = %38, %39, %41
  %46 = and i32 %5, -3
  %47 = icmp eq i32 %46, 5
  br i1 %47, label %48, label %140

48:                                               ; preds = %45, %4
  %49 = load ptr, ptr %2, align 8, !tbaa !13
  %50 = icmp ult ptr %49, %1
  br i1 %50, label %140, label %51

51:                                               ; preds = %48
  br i1 %3, label %52, label %125

52:                                               ; preds = %51
  %53 = ptrtoint ptr %1 to i64
  %54 = icmp ugt ptr %49, %1
  br i1 %54, label %55, label %140

55:                                               ; preds = %52
  %56 = ptrtoint ptr %49 to i64
  %57 = getelementptr inbounds i8, ptr %49, i64 -1
  %58 = load i8, ptr %57, align 1, !tbaa !6
  %59 = icmp sgt i8 %58, -1
  br i1 %59, label %81, label %60

60:                                               ; preds = %55
  %61 = icmp ugt ptr %57, %1
  br i1 %61, label %62, label %76

62:                                               ; preds = %60
  %63 = getelementptr i8, ptr %49, i64 %53
  %64 = sub i64 0, %56
  %65 = getelementptr i8, ptr %63, i64 %64
  br label %66

66:                                               ; preds = %71, %62
  %67 = phi ptr [ %72, %71 ], [ %57, %62 ]
  %68 = load i8, ptr %67, align 1, !tbaa !6
  %69 = and i8 %68, -64
  %70 = icmp eq i8 %69, -128
  br i1 %70, label %71, label %76

71:                                               ; preds = %66
  %72 = getelementptr inbounds i8, ptr %67, i64 -1
  %73 = icmp ugt ptr %72, %1
  br i1 %73, label %66, label %74, !llvm.loop !130

74:                                               ; preds = %71
  %75 = load i8, ptr %65, align 1, !tbaa !6
  br label %76

76:                                               ; preds = %66, %74, %60
  %77 = phi ptr [ %57, %60 ], [ %65, %74 ], [ %67, %66 ]
  %78 = phi i8 [ %58, %60 ], [ %75, %74 ], [ %68, %66 ]
  %79 = icmp ugt i8 %78, -63
  br i1 %79, label %81, label %80

80:                                               ; preds = %76
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %81

81:                                               ; preds = %55, %76, %80
  %82 = phi ptr [ %57, %55 ], [ %77, %80 ], [ %77, %76 ]
  br label %83

83:                                               ; preds = %81, %112
  %84 = phi ptr [ %113, %112 ], [ %82, %81 ]
  %85 = icmp ugt ptr %84, %1
  br i1 %85, label %86, label %139

86:                                               ; preds = %83
  %87 = ptrtoint ptr %84 to i64
  %88 = getelementptr inbounds i8, ptr %84, i64 -1
  %89 = load i8, ptr %88, align 1, !tbaa !6
  %90 = icmp sgt i8 %89, -1
  br i1 %90, label %112, label %91

91:                                               ; preds = %86
  %92 = icmp ugt ptr %88, %1
  br i1 %92, label %93, label %107

93:                                               ; preds = %91
  %94 = getelementptr i8, ptr %84, i64 %53
  %95 = sub i64 0, %87
  %96 = getelementptr i8, ptr %94, i64 %95
  br label %97

97:                                               ; preds = %102, %93
  %98 = phi ptr [ %103, %102 ], [ %88, %93 ]
  %99 = load i8, ptr %98, align 1, !tbaa !6
  %100 = and i8 %99, -64
  %101 = icmp eq i8 %100, -128
  br i1 %101, label %102, label %107

102:                                              ; preds = %97
  %103 = getelementptr inbounds i8, ptr %98, i64 -1
  %104 = icmp ugt ptr %103, %1
  br i1 %104, label %97, label %105, !llvm.loop !130

105:                                              ; preds = %102
  %106 = load i8, ptr %96, align 1, !tbaa !6
  br label %107

107:                                              ; preds = %97, %105, %91
  %108 = phi ptr [ %88, %91 ], [ %96, %105 ], [ %98, %97 ]
  %109 = phi i8 [ %89, %91 ], [ %106, %105 ], [ %99, %97 ]
  %110 = icmp ugt i8 %109, -63
  br i1 %110, label %112, label %111

111:                                              ; preds = %107
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %112

112:                                              ; preds = %86, %107, %111
  %113 = phi ptr [ %108, %107 ], [ %108, %111 ], [ %88, %86 ]
  %114 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %115 = ptrtoint ptr %113 to i64
  %116 = sub i64 %87, %115
  %117 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %118 = select i1 %117, i32 0, i32 -8161
  %119 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %113, i64 noundef %116, ptr noundef null, i32 noundef %118) #12
  %120 = tail call i64 @Perl__invlist_search(ptr noundef %114, i64 noundef %119) #12
  %121 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %120
  %122 = load i32, ptr %121, align 4, !tbaa !6
  store ptr %84, ptr %2, align 8, !tbaa !13
  %123 = and i32 %122, -3
  %124 = icmp eq i32 %123, 5
  br i1 %124, label %83, label %140, !llvm.loop !271

125:                                              ; preds = %51, %129
  %126 = load ptr, ptr %2, align 8, !tbaa !13
  %127 = getelementptr inbounds i8, ptr %126, i64 -2
  %128 = icmp ult ptr %127, %1
  br i1 %128, label %139, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds i8, ptr %126, i64 -1
  store ptr %130, ptr %2, align 8, !tbaa !13
  %131 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %132 = load i8, ptr %127, align 1, !tbaa !6
  %133 = zext i8 %132 to i64
  %134 = tail call i64 @Perl__invlist_search(ptr noundef %131, i64 noundef %133) #12
  %135 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !6
  %137 = and i32 %136, -3
  %138 = icmp eq i32 %137, 5
  br i1 %138, label %125, label %140, !llvm.loop !272

139:                                              ; preds = %125, %83
  store ptr %1, ptr %2, align 8, !tbaa !13
  br label %140

140:                                              ; preds = %129, %112, %139, %52, %48, %45
  %141 = phi i32 [ %5, %45 ], [ 4, %48 ], [ 4, %52 ], [ 4, %139 ], [ %122, %112 ], [ %136, %129 ]
  ret i32 %141
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_advance_one_WB(ptr nocapture noundef %0, ptr noundef %1, i1 noundef zeroext %2) unnamed_addr #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !13
  %5 = icmp ult ptr %4, %1
  br i1 %5, label %6, label %43

6:                                                ; preds = %3
  br i1 %2, label %7, label %30

7:                                                ; preds = %6
  %8 = ptrtoint ptr %1 to i64
  br label %9

9:                                                ; preds = %7, %18
  %10 = load ptr, ptr %0, align 8, !tbaa !13
  %11 = load i8, ptr %10, align 1, !tbaa !6
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !6
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, ptr %10, i64 %15
  store ptr %16, ptr %0, align 8, !tbaa !13
  %17 = icmp ult ptr %16, %1
  br i1 %17, label %18, label %43

18:                                               ; preds = %9
  %19 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %20 = ptrtoint ptr %16 to i64
  %21 = sub i64 %8, %20
  %22 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %23 = select i1 %22, i32 0, i32 -8161
  %24 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %16, i64 noundef %21, ptr noundef null, i32 noundef %23) #12
  %25 = tail call i64 @Perl__invlist_search(ptr noundef %19, i64 noundef %24) #12
  %26 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !6
  %28 = and i32 %27, -3
  %29 = icmp eq i32 %28, 5
  br i1 %29, label %9, label %43, !llvm.loop !273

30:                                               ; preds = %6, %34
  %31 = load ptr, ptr %0, align 8, !tbaa !13
  %32 = getelementptr inbounds i8, ptr %31, i64 1
  store ptr %32, ptr %0, align 8, !tbaa !13
  %33 = icmp ult ptr %32, %1
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %36 = load i8, ptr %32, align 1, !tbaa !6
  %37 = zext i8 %36 to i64
  %38 = tail call i64 @Perl__invlist_search(ptr noundef %35, i64 noundef %37) #12
  %39 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !6
  %41 = and i32 %40, -3
  %42 = icmp eq i32 %41, 5
  br i1 %42, label %30, label %43, !llvm.loop !274

43:                                               ; preds = %34, %30, %18, %9, %3
  %44 = phi i32 [ 4, %3 ], [ %27, %18 ], [ 4, %9 ], [ %40, %34 ], [ 4, %30 ]
  ret i32 %44
}

declare i64 @Perl_sv_pos_u2b_flags(ptr noundef, i64 noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_sv_force_normal_flags(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_sv_setsv_cow(ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @Perl_safesysrealloc(ptr noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @S_regmatch(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca [14 x i8], align 1
  %8 = alloca i64, align 8
  %9 = alloca [14 x i8], align 1
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i8, align 1
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = getelementptr %struct.regmatch_info, ptr %0, i64 0, i32 14
  %22 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %23 = icmp ne i8 %22, 0
  %24 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %25 = xor i1 %24, true
  %26 = zext i1 %25 to i32
  %27 = load ptr, ptr %0, align 8, !tbaa !46
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8, !tbaa !6
  %30 = getelementptr inbounds %struct.regexp, ptr %29, i64 0, i32 14
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = getelementptr inbounds %struct.regexp, ptr %29, i64 0, i32 12
  %33 = load i32, ptr %32, align 8, !tbaa !92
  %34 = mul i32 %33, 3
  %35 = tail call i32 @llvm.umax.i32(i32 %34, i32 1000)
  %36 = getelementptr inbounds %struct.regexp, ptr %29, i64 0, i32 13
  %37 = load i32, ptr %36, align 4, !tbaa !19
  %38 = and i32 %37, 16
  %39 = icmp ne i32 %38, 0
  %40 = load ptr, ptr @PL_replgv, align 8, !tbaa !13
  %41 = getelementptr inbounds %struct.gv, ptr %40, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !6
  %43 = load ptr, ptr %42, align 8, !tbaa !13
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %50

45:                                               ; preds = %3
  %46 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %40, i32 noundef 0) #12
  %47 = getelementptr inbounds %struct.gv, ptr %46, i64 0, i32 3
  %48 = load ptr, ptr %47, align 8, !tbaa !6
  %49 = load ptr, ptr %48, align 8, !tbaa !13
  br label %50

50:                                               ; preds = %3, %45
  %51 = phi ptr [ %49, %45 ], [ %43, %3 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #12
  store i32 0, ptr %4, align 4, !tbaa !34
  %52 = getelementptr %struct.regmatch_info, ptr %0, i64 0, i32 13
  %53 = load i8, ptr %52, align 1, !tbaa !51, !range !97, !noundef !98
  %54 = getelementptr inbounds %struct.sv, ptr %51, i64 0, i32 1
  %55 = load i32, ptr %54, align 8, !tbaa !78
  %56 = add i32 %55, 1
  store i32 %56, ptr %54, align 8, !tbaa !78
  tail call void @Perl_save_pushptr(ptr noundef %51, i32 noundef 11) #12
  %57 = load ptr, ptr @PL_regmatch_state, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 2
  %59 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 1
  %60 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 6
  %61 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 15
  %62 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 7
  %63 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 9
  %64 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 10
  %65 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 11
  %66 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 3
  %67 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 8
  %68 = select i1 %23, i8 4, i8 5
  %69 = select i1 %23, i8 6, i8 0
  %70 = select i1 %23, i8 2, i8 3
  %71 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 5
  %72 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 4
  br label %73

73:                                               ; preds = %50, %4876
  %74 = phi i8 [ 0, %50 ], [ %4879, %4876 ]
  %75 = phi i8 [ %53, %50 ], [ %169, %4876 ]
  %76 = phi ptr [ null, %50 ], [ %4880, %4876 ]
  %77 = phi ptr [ null, %50 ], [ %4881, %4876 ]
  %78 = phi i8 [ 0, %50 ], [ %4882, %4876 ]
  %79 = phi ptr [ null, %50 ], [ %4883, %4876 ]
  %80 = phi ptr [ null, %50 ], [ %4884, %4876 ]
  %81 = phi i32 [ 0, %50 ], [ %4885, %4876 ]
  %82 = phi i8 [ 0, %50 ], [ %4886, %4876 ]
  %83 = phi i8 [ 0, %50 ], [ %4887, %4876 ]
  %84 = phi i32 [ 0, %50 ], [ %4888, %4876 ]
  %85 = phi ptr [ null, %50 ], [ %173, %4876 ]
  %86 = phi ptr [ null, %50 ], [ %174, %4876 ]
  %87 = phi ptr [ null, %50 ], [ %175, %4876 ]
  %88 = phi i8 [ 0, %50 ], [ %176, %4876 ]
  %89 = phi i8 [ 0, %50 ], [ %177, %4876 ]
  %90 = phi ptr [ null, %50 ], [ %179, %4876 ]
  %91 = phi ptr [ null, %50 ], [ %4877, %4876 ]
  %92 = phi ptr [ null, %50 ], [ %4878, %4876 ]
  %93 = phi ptr [ null, %50 ], [ %182, %4876 ]
  %94 = phi i32 [ 0, %50 ], [ %4889, %4876 ]
  %95 = phi i32 [ 0, %50 ], [ %184, %4876 ]
  %96 = phi ptr [ %1, %50 ], [ %4890, %4876 ]
  %97 = phi ptr [ undef, %50 ], [ %4891, %4876 ]
  %98 = phi ptr [ %2, %50 ], [ %4891, %4876 ]
  %99 = phi ptr [ %57, %50 ], [ %188, %4876 ]
  %100 = phi ptr [ %31, %50 ], [ %189, %4876 ]
  %101 = phi ptr [ %29, %50 ], [ %190, %4876 ]
  %102 = phi ptr [ %27, %50 ], [ %191, %4876 ]
  br label %103

103:                                              ; preds = %73, %4983
  %104 = phi i8 [ %168, %4983 ], [ %74, %73 ]
  %105 = phi i8 [ %4941, %4983 ], [ %75, %73 ]
  %106 = phi ptr [ %4942, %4983 ], [ %76, %73 ]
  %107 = phi ptr [ %4943, %4983 ], [ %77, %73 ]
  %108 = phi i8 [ %4944, %4983 ], [ %78, %73 ]
  %109 = phi ptr [ %4945, %4983 ], [ %79, %73 ]
  %110 = phi ptr [ %4946, %4983 ], [ %80, %73 ]
  %111 = phi i32 [ %4947, %4983 ], [ %81, %73 ]
  %112 = phi i8 [ %4948, %4983 ], [ %82, %73 ]
  %113 = phi i8 [ %4949, %4983 ], [ %83, %73 ]
  %114 = phi ptr [ %4950, %4983 ], [ %85, %73 ]
  %115 = phi ptr [ %4951, %4983 ], [ %86, %73 ]
  %116 = phi ptr [ %175, %4983 ], [ %87, %73 ]
  %117 = phi i8 [ %4952, %4983 ], [ %88, %73 ]
  %118 = phi i8 [ %4953, %4983 ], [ %89, %73 ]
  %119 = phi ptr [ %4954, %4983 ], [ %90, %73 ]
  %120 = phi ptr [ %4955, %4983 ], [ %91, %73 ]
  %121 = phi ptr [ %4956, %4983 ], [ %92, %73 ]
  %122 = phi ptr [ %4957, %4983 ], [ %93, %73 ]
  %123 = phi i32 [ %4958, %4983 ], [ %94, %73 ]
  %124 = phi i32 [ %4966, %4983 ], [ %95, %73 ]
  %125 = phi ptr [ %4959, %4983 ], [ %96, %73 ]
  %126 = phi ptr [ %4961, %4983 ], [ %97, %73 ]
  %127 = phi ptr [ %4962, %4983 ], [ %98, %73 ]
  %128 = phi ptr [ %4984, %4983 ], [ %99, %73 ]
  %129 = phi ptr [ %4963, %4983 ], [ %100, %73 ]
  %130 = phi ptr [ %4964, %4983 ], [ %101, %73 ]
  %131 = phi ptr [ %4965, %4983 ], [ %102, %73 ]
  br label %132

132:                                              ; preds = %3369, %103
  %133 = phi i8 [ %104, %103 ], [ %168, %3369 ]
  %134 = phi i8 [ %105, %103 ], [ %169, %3369 ]
  %135 = phi i32 [ %111, %103 ], [ %170, %3369 ]
  %136 = phi i8 [ %112, %103 ], [ %212, %3369 ]
  %137 = phi i8 [ %113, %103 ], [ %3370, %3369 ]
  %138 = phi ptr [ %114, %103 ], [ %173, %3369 ]
  %139 = phi ptr [ %115, %103 ], [ %174, %3369 ]
  %140 = phi ptr [ %116, %103 ], [ %175, %3369 ]
  %141 = phi i8 [ %117, %103 ], [ %3371, %3369 ]
  %142 = phi i8 [ %118, %103 ], [ %3372, %3369 ]
  %143 = phi ptr [ %119, %103 ], [ %179, %3369 ]
  %144 = phi ptr [ %120, %103 ], [ %180, %3369 ]
  %145 = phi ptr [ %121, %103 ], [ %181, %3369 ]
  %146 = phi ptr [ %122, %103 ], [ %182, %3369 ]
  %147 = phi i32 [ %123, %103 ], [ %183, %3369 ]
  %148 = phi i32 [ %124, %103 ], [ %184, %3369 ]
  %149 = phi ptr [ %125, %103 ], [ %3373, %3369 ]
  %150 = phi ptr [ %126, %103 ], [ %186, %3369 ]
  %151 = phi ptr [ %127, %103 ], [ %3374, %3369 ]
  %152 = phi ptr [ %128, %103 ], [ %188, %3369 ]
  %153 = phi ptr [ %129, %103 ], [ %189, %3369 ]
  %154 = phi ptr [ %130, %103 ], [ %190, %3369 ]
  %155 = phi ptr [ %131, %103 ], [ %191, %3369 ]
  %156 = icmp eq ptr %151, null
  br i1 %156, label %4985, label %157

157:                                              ; preds = %132
  %158 = getelementptr inbounds %struct.regnode, ptr %151, i64 0, i32 2
  %159 = load i16, ptr %158, align 2, !tbaa !275
  %160 = zext i16 %159 to i64
  %161 = getelementptr inbounds %struct.regnode, ptr %151, i64 %160
  %162 = icmp eq i16 %159, 0
  %163 = select i1 %162, ptr null, ptr %161
  %164 = getelementptr inbounds %struct.regnode, ptr %151, i64 0, i32 1
  %165 = load i8, ptr %164, align 1, !tbaa !119
  %166 = zext i8 %165 to i32
  br label %167

167:                                              ; preds = %157, %5059, %5127
  %168 = phi i8 [ %5081, %5127 ], [ %5019, %5059 ], [ %133, %157 ]
  %169 = phi i8 [ %5082, %5127 ], [ %5018, %5059 ], [ %134, %157 ]
  %170 = phi i32 [ %5083, %5127 ], [ %5017, %5059 ], [ %135, %157 ]
  %171 = phi i8 [ %5084, %5127 ], [ %5016, %5059 ], [ %136, %157 ]
  %172 = phi i8 [ %5085, %5127 ], [ %5015, %5059 ], [ %137, %157 ]
  %173 = phi ptr [ %5086, %5127 ], [ %5014, %5059 ], [ %138, %157 ]
  %174 = phi ptr [ %5087, %5127 ], [ %5013, %5059 ], [ %139, %157 ]
  %175 = phi ptr [ %5088, %5127 ], [ %5012, %5059 ], [ %140, %157 ]
  %176 = phi i8 [ %5089, %5127 ], [ %5011, %5059 ], [ %141, %157 ]
  %177 = phi i8 [ %5090, %5127 ], [ %5010, %5059 ], [ %142, %157 ]
  %178 = phi i32 [ %5130, %5127 ], [ %5063, %5059 ], [ %166, %157 ]
  %179 = phi ptr [ %5091, %5127 ], [ %5009, %5059 ], [ %143, %157 ]
  %180 = phi ptr [ %5092, %5127 ], [ %5008, %5059 ], [ %144, %157 ]
  %181 = phi ptr [ %5093, %5127 ], [ %5007, %5059 ], [ %145, %157 ]
  %182 = phi ptr [ %5128, %5127 ], [ %5053, %5059 ], [ %146, %157 ]
  %183 = phi i32 [ %5095, %5127 ], [ %5005, %5059 ], [ %147, %157 ]
  %184 = phi i32 [ %5122, %5127 ], [ %5051, %5059 ], [ %148, %157 ]
  %185 = phi ptr [ %5121, %5127 ], [ %5060, %5059 ], [ %149, %157 ]
  %186 = phi ptr [ %5098, %5127 ], [ %5002, %5059 ], [ %163, %157 ]
  %187 = phi ptr [ %5099, %5127 ], [ %5001, %5059 ], [ %151, %157 ]
  %188 = phi ptr [ %5119, %5127 ], [ %5006, %5059 ], [ %152, %157 ]
  %189 = phi ptr [ %5101, %5127 ], [ %4999, %5059 ], [ %153, %157 ]
  %190 = phi ptr [ %5102, %5127 ], [ %4998, %5059 ], [ %154, %157 ]
  %191 = phi ptr [ %5103, %5127 ], [ %4997, %5059 ], [ %155, %157 ]
  %192 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 4
  %193 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 15
  %194 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 5
  %195 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 17
  %196 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 6
  %197 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 16
  %198 = getelementptr inbounds i8, ptr %188, i64 52
  %199 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 7
  %200 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 11
  %201 = getelementptr inbounds i8, ptr %188, i64 44
  %202 = icmp eq ptr %180, null
  %203 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 8
  %204 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 1
  %205 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 8
  %206 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 10
  %207 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 2
  %208 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 3
  %209 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 12
  %210 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13, i64 6
  br label %211

211:                                              ; preds = %3588, %167
  %212 = phi i8 [ %171, %167 ], [ %3490, %3588 ]
  %213 = phi i32 [ %178, %167 ], [ 115, %3588 ]
  %214 = phi ptr [ %185, %167 ], [ %3492, %3588 ]
  %215 = phi ptr [ %187, %167 ], [ %3493, %3588 ]
  %216 = load ptr, ptr %58, align 8, !tbaa !56
  %217 = icmp ult ptr %214, %216
  br i1 %217, label %218, label %221

218:                                              ; preds = %211
  %219 = load i8, ptr %214, align 1, !tbaa !6
  %220 = zext i8 %219 to i32
  br label %221

221:                                              ; preds = %211, %218
  %222 = phi i32 [ %220, %218 ], [ -10, %211 ]
  switch i32 %213, label %4835 [
    i32 2, label %223
    i32 3, label %226
    i32 7, label %235
    i32 90, label %238
    i32 133, label %248
    i32 5, label %253
    i32 4, label %257
    i32 6, label %266
    i32 17, label %268
    i32 18, label %270
    i32 16, label %274
    i32 73, label %278
    i32 72, label %290
    i32 95, label %548
    i32 32, label %760
    i32 31, label %760
    i32 34, label %854
    i32 38, label %845
    i32 37, label %850
    i32 35, label %850
    i32 39, label %855
    i32 36, label %855
    i32 33, label %856
    i32 13, label %912
    i32 9, label %911
    i32 12, label %1151
    i32 8, label %1150
    i32 15, label %1156
    i32 11, label %1155
    i32 14, label %1182
    i32 10, label %1181
    i32 20, label %1690
    i32 19, label %1690
    i32 26, label %1723
    i32 22, label %1722
    i32 25, label %1757
    i32 21, label %1756
    i32 28, label %1759
    i32 24, label %1763
    i32 27, label %1782
    i32 23, label %1781
    i32 29, label %1967
    i32 58, label %2028
    i32 60, label %2024
    i32 59, label %2025
    i32 57, label %2026
    i32 56, label %2027
    i32 53, label %2071
    i32 55, label %2067
    i32 54, label %2068
    i32 52, label %2069
    i32 51, label %2070
    i32 40, label %4874
    i32 41, label %4874
    i32 77, label %2137
    i32 76, label %2137
    i32 68, label %2172
    i32 96, label %2785
    i32 97, label %2849
    i32 49, label %2890
    i32 50, label %2902
    i32 83, label %2922
    i32 67, label %2961
    i32 78, label %2975
    i32 79, label %3011
    i32 80, label %4875
    i32 66, label %3022
    i32 70, label %3038
    i32 47, label %3041
    i32 98, label %3060
    i32 99, label %3062
    i32 48, label %3069
    i32 106, label %3194
    i32 108, label %3194
    i32 109, label %3196
    i32 103, label %3215
    i32 101, label %3215
    i32 105, label %3238
    i32 107, label %3259
    i32 62, label %3308
    i32 30, label %3315
    i32 89, label %3322
    i32 131, label %3335
    i32 110, label %4986
    i32 111, label %3339
    i32 69, label %4876
    i32 46, label %3375
    i32 112, label %3405
    i32 113, label %3466
    i32 115, label %3703
    i32 42, label %3816
    i32 43, label %3820
    i32 45, label %3824
    i32 44, label %3848
    i32 119, label %4035
    i32 121, label %4221
    i32 123, label %4432
    i32 0, label %4502
    i32 1, label %4986
    i32 65, label %4554
    i32 64, label %4555
    i32 63, label %4556
    i32 117, label %4630
    i32 116, label %4634
    i32 61, label %4659
    i32 88, label %4666
    i32 85, label %4667
    i32 125, label %5080
    i32 82, label %5076
    i32 86, label %4681
    i32 126, label %4689
    i32 127, label %4691
    i32 87, label %4723
    i32 129, label %4747
    i32 91, label %4771
  ]

223:                                              ; preds = %221
  %224 = load ptr, ptr %59, align 8, !tbaa !53
  %225 = icmp eq ptr %214, %224
  br i1 %225, label %4876, label %5080

226:                                              ; preds = %221
  %227 = load ptr, ptr %59, align 8, !tbaa !53
  %228 = icmp eq ptr %214, %227
  br i1 %228, label %4876, label %229

229:                                              ; preds = %226
  %230 = icmp slt i32 %222, 0
  br i1 %230, label %5080, label %231

231:                                              ; preds = %229
  %232 = getelementptr inbounds i8, ptr %214, i64 -1
  %233 = load i8, ptr %232, align 1, !tbaa !6
  %234 = icmp eq i8 %233, 10
  br i1 %234, label %4876, label %5080

235:                                              ; preds = %221
  %236 = load ptr, ptr %71, align 8, !tbaa !29
  %237 = icmp eq ptr %214, %236
  br i1 %237, label %4876, label %5080

238:                                              ; preds = %221
  %239 = load ptr, ptr %195, align 8, !tbaa !38
  %240 = load i64, ptr %239, align 8, !tbaa !39
  %241 = trunc i64 %240 to i32
  %242 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 %241, ptr %242, align 8, !tbaa !6
  %243 = load ptr, ptr %59, align 8, !tbaa !53
  %244 = ptrtoint ptr %214 to i64
  %245 = ptrtoint ptr %243 to i64
  %246 = sub i64 %244, %245
  %247 = load ptr, ptr %195, align 8, !tbaa !38
  store i64 %246, ptr %247, align 8, !tbaa !39
  store i32 132, ptr %188, align 8, !tbaa !276
  br label %4940

248:                                              ; preds = %221
  %249 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %250 = load i32, ptr %249, align 8, !tbaa !6
  %251 = sext i32 %250 to i64
  %252 = load ptr, ptr %195, align 8, !tbaa !38
  store i64 %251, ptr %252, align 8, !tbaa !39
  br label %5080

253:                                              ; preds = %221
  %254 = icmp sgt i32 %222, -1
  %255 = icmp ne i32 %222, 10
  %256 = and i1 %254, %255
  br i1 %256, label %5080, label %4876

257:                                              ; preds = %221
  %258 = icmp sgt i32 %222, -1
  %259 = icmp ne i32 %222, 10
  %260 = and i1 %258, %259
  %261 = ptrtoint ptr %216 to i64
  %262 = ptrtoint ptr %214 to i64
  %263 = sub i64 %261, %262
  %264 = icmp sgt i64 %263, 1
  %265 = or i1 %264, %260
  br i1 %265, label %5080, label %4876

266:                                              ; preds = %221
  %267 = icmp slt i32 %222, 0
  br i1 %267, label %4876, label %5080

268:                                              ; preds = %221
  %269 = icmp slt i32 %222, 0
  br i1 %269, label %5080, label %4863

270:                                              ; preds = %221
  %271 = icmp slt i32 %222, 0
  br i1 %271, label %5080, label %272

272:                                              ; preds = %270
  %273 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4876

274:                                              ; preds = %221
  %275 = icmp slt i32 %222, 0
  %276 = icmp eq i32 %222, 10
  %277 = or i1 %275, %276
  br i1 %277, label %5080, label %4863

278:                                              ; preds = %221
  %279 = icmp slt i32 %222, 0
  br i1 %279, label %290, label %280

280:                                              ; preds = %278
  %281 = lshr i32 %222, 3
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds %struct.regnode_charclass, ptr %215, i64 0, i32 4, i64 %282
  %284 = load i8, ptr %283, align 1, !tbaa !6
  %285 = zext i8 %284 to i32
  %286 = and i32 %222, 7
  %287 = shl nuw nsw i32 1, %286
  %288 = and i32 %287, %285
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %5080, label %290

290:                                              ; preds = %221, %278, %280
  %291 = load i8, ptr %215, align 2, !tbaa !139
  switch i8 %291, label %294 [
    i8 31, label %296
    i8 32, label %292
    i8 36, label %293
    i8 38, label %295
  ]

292:                                              ; preds = %290
  br label %296

293:                                              ; preds = %290
  br label %296

294:                                              ; preds = %290
  br label %296

295:                                              ; preds = %290
  br label %296

296:                                              ; preds = %290, %295, %292, %294, %293
  %297 = phi i8 [ %69, %292 ], [ %68, %293 ], [ %70, %294 ], [ %22, %290 ], [ 7, %295 ]
  %298 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %299 = load ptr, ptr %298, align 8, !tbaa !223
  %300 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %301 = load i32, ptr %300, align 4, !tbaa !224
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds %struct.reg_data, ptr %299, i64 0, i32 2, i64 %302
  %304 = load ptr, ptr %303, align 8, !tbaa !13
  %305 = add i32 %301, 1
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds %struct.reg_data, ptr %299, i64 0, i32 2, i64 %306
  %308 = load ptr, ptr %307, align 8, !tbaa !13
  %309 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 9
  %310 = load i32, ptr %309, align 4, !tbaa !278
  %311 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 5
  %312 = load ptr, ptr %311, align 8, !tbaa !231
  %313 = icmp eq ptr %312, null
  br i1 %313, label %337, label %314

314:                                              ; preds = %296
  %315 = icmp slt i32 %222, 0
  br i1 %315, label %326, label %316

316:                                              ; preds = %314
  %317 = lshr i32 %222, 3
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i8, ptr %312, i64 %318
  %320 = load i8, ptr %319, align 1, !tbaa !6
  %321 = zext i8 %320 to i32
  %322 = and i32 %222, 7
  %323 = shl nuw nsw i32 1, %322
  %324 = and i32 %323, %321
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %337

326:                                              ; preds = %316, %314
  %327 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 3
  %328 = load ptr, ptr %327, align 8, !tbaa !279
  %329 = zext i32 %310 to i64
  %330 = getelementptr inbounds %struct._reg_trie_state, ptr %328, i64 %329
  %331 = load i16, ptr %330, align 8, !tbaa !233
  %332 = icmp eq i16 %331, 0
  br i1 %332, label %546, label %333

333:                                              ; preds = %326
  %334 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 6
  %335 = load ptr, ptr %334, align 8, !tbaa !280
  %336 = icmp eq ptr %335, null
  br i1 %336, label %4876, label %337

337:                                              ; preds = %333, %316, %296
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #12
  store i64 0, ptr %5, align 8, !tbaa !86
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #12
  store i64 0, ptr %6, align 8, !tbaa !86
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %7) #12
  %338 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 6
  %339 = load ptr, ptr %338, align 8, !tbaa !280
  store ptr %339, ptr %199, align 8, !tbaa !6
  store ptr %215, ptr %205, align 8, !tbaa !6
  store ptr null, ptr %206, align 8, !tbaa !6
  store i8 0, ptr %196, align 8, !tbaa !6
  %340 = getelementptr inbounds i8, ptr %188, i64 76
  store i16 0, ptr %340, align 4, !tbaa !6
  %341 = icmp eq i32 %310, 0
  br i1 %341, label %544, label %342

342:                                              ; preds = %337
  %343 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 3
  %344 = getelementptr inbounds i8, ptr %188, i64 78
  %345 = icmp eq ptr %308, null
  %346 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 2
  %347 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 8
  %348 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 1
  %349 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 4
  br label %350

350:                                              ; preds = %342, %518
  %351 = phi i64 [ 0, %342 ], [ %494, %518 ]
  %352 = phi i32 [ %310, %342 ], [ %520, %518 ]
  %353 = phi ptr [ %214, %342 ], [ %522, %518 ]
  %354 = phi ptr [ null, %342 ], [ %491, %518 ]
  %355 = phi i32 [ 0, %342 ], [ %493, %518 ]
  %356 = phi i32 [ 0, %342 ], [ %381, %518 ]
  %357 = load ptr, ptr %58, align 8, !tbaa !56
  %358 = icmp ugt ptr %353, %357
  br i1 %358, label %524, label %359

359:                                              ; preds = %350
  %360 = load ptr, ptr %343, align 8, !tbaa !279
  %361 = zext i32 %352 to i64
  %362 = getelementptr inbounds %struct._reg_trie_state, ptr %360, i64 %361, i32 1
  %363 = load i32, ptr %362, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #12
  store i64 0, ptr %8, align 8, !tbaa !86
  %364 = getelementptr inbounds %struct._reg_trie_state, ptr %360, i64 %361
  %365 = load i16, ptr %364, align 8, !tbaa !233
  %366 = icmp eq i16 %365, 0
  br i1 %366, label %380, label %367

367:                                              ; preds = %359
  %368 = icmp eq i32 %356, 0
  br i1 %368, label %369, label %374

369:                                              ; preds = %367
  %370 = load i8, ptr %196, align 8, !tbaa !6, !range !97, !noundef !98
  %371 = icmp eq i8 %370, 0
  %372 = select i1 %371, ptr %353, ptr %214
  %373 = select i1 %371, i32 %355, i32 0
  store ptr %372, ptr %206, align 8, !tbaa !6
  store i32 %373, ptr %200, align 8, !tbaa !6
  br label %374

374:                                              ; preds = %369, %367
  %375 = load i16, ptr %340, align 4, !tbaa !6
  %376 = add i16 %375, -1
  %377 = icmp ult i16 %376, %365
  br i1 %377, label %379, label %378

378:                                              ; preds = %374
  store i16 %365, ptr %340, align 4, !tbaa !6
  br label %379

379:                                              ; preds = %374, %378
  store i16 %365, ptr %344, align 2, !tbaa !6
  br label %380

380:                                              ; preds = %379, %359
  %381 = phi i32 [ 1, %379 ], [ %356, %359 ]
  %382 = icmp eq i32 %363, 0
  br i1 %382, label %516, label %383

383:                                              ; preds = %380
  %384 = icmp eq i64 %351, 0
  br i1 %384, label %385, label %388

385:                                              ; preds = %383
  %386 = load ptr, ptr %58, align 8, !tbaa !56
  %387 = icmp ult ptr %353, %386
  br i1 %387, label %388, label %516

388:                                              ; preds = %385, %383
  switch i8 %297, label %460 [
    i8 7, label %390
    i8 4, label %389
    i8 2, label %390
    i8 5, label %424
    i8 3, label %425
    i8 6, label %455
    i8 1, label %455
    i8 0, label %457
  ]

389:                                              ; preds = %388
  br label %390

390:                                              ; preds = %388, %389, %388
  %391 = phi i8 [ 6, %389 ], [ 2, %388 ], [ 2, %388 ]
  br i1 %384, label %398, label %392

392:                                              ; preds = %390
  %393 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %354, i64 noundef 13, ptr noundef nonnull %5, i32 noundef %26) #12
  store i64 %393, ptr %8, align 8, !tbaa !86
  %394 = load i64, ptr %5, align 8, !tbaa !86
  %395 = load i64, ptr %6, align 8, !tbaa !86
  %396 = sub i64 %395, %394
  store i64 %396, ptr %6, align 8, !tbaa !86
  %397 = getelementptr inbounds i8, ptr %354, i64 %394
  store i64 0, ptr %5, align 8, !tbaa !86
  br label %461

398:                                              ; preds = %390
  %399 = call i64 @Perl__to_utf8_fold_flags(ptr noundef %353, ptr noundef nonnull %7, ptr noundef nonnull %6, i8 noundef zeroext %391) #12
  store i64 %399, ptr %8, align 8, !tbaa !86
  %400 = load i8, ptr %353, align 1, !tbaa !6
  %401 = zext i8 %400 to i64
  %402 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %401
  %403 = load i8, ptr %402, align 1, !tbaa !6
  %404 = zext i8 %403 to i64
  store i64 %404, ptr %5, align 8, !tbaa !86
  %405 = icmp ult i64 %399, 128
  br i1 %405, label %419, label %406

406:                                              ; preds = %398
  %407 = icmp ult i64 %399, 2048
  br i1 %407, label %419, label %408

408:                                              ; preds = %406
  %409 = icmp ult i64 %399, 65536
  br i1 %409, label %419, label %410

410:                                              ; preds = %408
  %411 = icmp ult i64 %399, 2097152
  br i1 %411, label %419, label %412

412:                                              ; preds = %410
  %413 = icmp ult i64 %399, 67108864
  br i1 %413, label %419, label %414

414:                                              ; preds = %412
  %415 = icmp ult i64 %399, 2147483648
  br i1 %415, label %419, label %416

416:                                              ; preds = %414
  %417 = icmp ult i64 %399, 68719476736
  %418 = select i1 %417, i64 7, i64 13
  br label %419

419:                                              ; preds = %406, %410, %416, %414, %412, %408, %398
  %420 = phi i64 [ 1, %398 ], [ 2, %406 ], [ 3, %408 ], [ 4, %410 ], [ 5, %412 ], [ %418, %416 ], [ 6, %414 ]
  %421 = load i64, ptr %6, align 8, !tbaa !86
  %422 = sub i64 %421, %420
  store i64 %422, ptr %6, align 8, !tbaa !86
  %423 = getelementptr inbounds i8, ptr %7, i64 %420
  br label %461

424:                                              ; preds = %388
  br label %425

425:                                              ; preds = %388, %424
  %426 = phi i32 [ 2, %388 ], [ 6, %424 ]
  br i1 %384, label %433, label %427

427:                                              ; preds = %425
  %428 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %354, i64 noundef 13, ptr noundef nonnull %5, i32 noundef %26) #12
  store i64 %428, ptr %8, align 8, !tbaa !86
  %429 = load i64, ptr %5, align 8, !tbaa !86
  %430 = load i64, ptr %6, align 8, !tbaa !86
  %431 = sub i64 %430, %429
  store i64 %431, ptr %6, align 8, !tbaa !86
  %432 = getelementptr inbounds i8, ptr %354, i64 %429
  store i64 0, ptr %5, align 8, !tbaa !86
  br label %461

433:                                              ; preds = %425
  store i64 1, ptr %5, align 8, !tbaa !86
  %434 = load i8, ptr %353, align 1, !tbaa !6
  %435 = call i64 @Perl__to_fold_latin1(i8 noundef zeroext %434, ptr noundef nonnull %7, ptr noundef nonnull %6, i32 noundef %426) #12
  store i64 %435, ptr %8, align 8, !tbaa !86
  %436 = icmp ult i64 %435, 128
  br i1 %436, label %450, label %437

437:                                              ; preds = %433
  %438 = icmp ult i64 %435, 2048
  br i1 %438, label %450, label %439

439:                                              ; preds = %437
  %440 = icmp ult i64 %435, 65536
  br i1 %440, label %450, label %441

441:                                              ; preds = %439
  %442 = icmp ult i64 %435, 2097152
  br i1 %442, label %450, label %443

443:                                              ; preds = %441
  %444 = icmp ult i64 %435, 67108864
  br i1 %444, label %450, label %445

445:                                              ; preds = %443
  %446 = icmp ult i64 %435, 2147483648
  br i1 %446, label %450, label %447

447:                                              ; preds = %445
  %448 = icmp ult i64 %435, 68719476736
  %449 = select i1 %448, i64 7, i64 13
  br label %450

450:                                              ; preds = %437, %441, %447, %445, %443, %439, %433
  %451 = phi i64 [ 1, %433 ], [ 2, %437 ], [ 3, %439 ], [ 4, %441 ], [ 5, %443 ], [ %449, %447 ], [ 6, %445 ]
  %452 = load i64, ptr %6, align 8, !tbaa !86
  %453 = sub i64 %452, %451
  store i64 %453, ptr %6, align 8, !tbaa !86
  %454 = getelementptr inbounds i8, ptr %7, i64 %451
  br label %461

455:                                              ; preds = %388, %388
  %456 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %353, i64 noundef 13, ptr noundef nonnull %5, i32 noundef %26) #12
  store i64 %456, ptr %8, align 8, !tbaa !86
  br label %461

457:                                              ; preds = %388
  %458 = load i8, ptr %353, align 1, !tbaa !6
  %459 = zext i8 %458 to i64
  store i64 %459, ptr %8, align 8, !tbaa !86
  store i64 1, ptr %5, align 8, !tbaa !86
  br label %465

460:                                              ; preds = %388
  unreachable

461:                                              ; preds = %427, %450, %392, %419, %455
  %462 = phi i64 [ %456, %455 ], [ %399, %419 ], [ %393, %392 ], [ %435, %450 ], [ %428, %427 ]
  %463 = phi ptr [ %354, %455 ], [ %423, %419 ], [ %397, %392 ], [ %454, %450 ], [ %432, %427 ]
  %464 = icmp ult i64 %462, 256
  br i1 %464, label %465, label %471

465:                                              ; preds = %457, %461
  %466 = phi ptr [ %354, %457 ], [ %463, %461 ]
  %467 = phi i64 [ %459, %457 ], [ %462, %461 ]
  %468 = load ptr, ptr %346, align 8, !tbaa !240
  %469 = getelementptr inbounds i16, ptr %468, i64 %467
  %470 = load i16, ptr %469, align 2, !tbaa !152
  br label %490

471:                                              ; preds = %461
  br i1 %345, label %490, label %472

472:                                              ; preds = %471
  %473 = call ptr @Perl_hv_common_key_len(ptr noundef nonnull %308, ptr noundef nonnull %8, i32 noundef 8, i32 noundef 32, ptr noundef null, i32 noundef 0) #12
  %474 = icmp eq ptr %473, null
  br i1 %474, label %490, label %475

475:                                              ; preds = %472
  %476 = load ptr, ptr %473, align 8, !tbaa !13
  %477 = getelementptr inbounds %struct.sv, ptr %476, i64 0, i32 2
  %478 = load i32, ptr %477, align 4, !tbaa !9
  %479 = and i32 %478, 2097408
  %480 = icmp eq i32 %479, 256
  br i1 %480, label %481, label %485

481:                                              ; preds = %475
  %482 = load ptr, ptr %476, align 8, !tbaa !24
  %483 = getelementptr inbounds %struct.xpviv, ptr %482, i64 0, i32 4
  %484 = load i64, ptr %483, align 8, !tbaa !6
  br label %487

485:                                              ; preds = %475
  %486 = call i64 @Perl_sv_2iv_flags(ptr noundef nonnull %476, i32 noundef 2) #12
  br label %487

487:                                              ; preds = %485, %481
  %488 = phi i64 [ %484, %481 ], [ %486, %485 ]
  %489 = trunc i64 %488 to i16
  br label %490

490:                                              ; preds = %472, %487, %471, %465
  %491 = phi ptr [ %466, %465 ], [ %463, %471 ], [ %463, %487 ], [ %463, %472 ]
  %492 = phi i16 [ %470, %465 ], [ 0, %471 ], [ %489, %487 ], [ 0, %472 ]
  %493 = add i32 %355, 1
  %494 = load i64, ptr %6, align 8, !tbaa !86
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %497, label %496

496:                                              ; preds = %490
  store i8 1, ptr %196, align 8, !tbaa !6
  br label %497

497:                                              ; preds = %496, %490
  %498 = icmp eq i16 %492, 0
  br i1 %498, label %517, label %499

499:                                              ; preds = %497
  %500 = zext i16 %492 to i32
  %501 = add i32 %363, %500
  %502 = load i16, ptr %347, align 8, !tbaa !241
  %503 = zext i16 %502 to i32
  %504 = xor i32 %503, -1
  %505 = add i32 %501, %504
  %506 = icmp sgt i32 %505, -1
  br i1 %506, label %507, label %517

507:                                              ; preds = %499
  %508 = load i32, ptr %348, align 4, !tbaa !242
  %509 = icmp ult i32 %505, %508
  br i1 %509, label %510, label %517

510:                                              ; preds = %507
  %511 = load ptr, ptr %349, align 8, !tbaa !243
  %512 = zext i32 %505 to i64
  %513 = getelementptr inbounds %struct._reg_trie_trans, ptr %511, i64 %512, i32 1
  %514 = load i32, ptr %513, align 4, !tbaa !244
  %515 = icmp eq i32 %514, %352
  br i1 %515, label %518, label %517

516:                                              ; preds = %385, %380
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  br label %524

517:                                              ; preds = %510, %507, %499, %497
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  br label %524

518:                                              ; preds = %510
  %519 = getelementptr inbounds %struct._reg_trie_trans, ptr %511, i64 %512
  %520 = load i32, ptr %519, align 4, !tbaa !246
  %521 = load i64, ptr %5, align 8, !tbaa !86
  %522 = getelementptr inbounds i8, ptr %353, i64 %521
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  %523 = icmp eq i32 %520, 0
  br i1 %523, label %524, label %350, !llvm.loop !281

524:                                              ; preds = %350, %518, %516, %517
  %525 = phi i32 [ %381, %516 ], [ %381, %517 ], [ %381, %518 ], [ %356, %350 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %544, label %527

527:                                              ; preds = %524
  %528 = getelementptr inbounds i8, ptr %188, i64 78
  %529 = load i16, ptr %528, align 2, !tbaa !6
  %530 = icmp eq i16 %529, 0
  br i1 %530, label %542, label %531

531:                                              ; preds = %527
  %532 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 7
  %533 = load ptr, ptr %532, align 8, !tbaa !237
  br label %534

534:                                              ; preds = %531, %534
  %535 = phi i16 [ %529, %531 ], [ %540, %534 ]
  %536 = phi i32 [ 0, %531 ], [ %539, %534 ]
  %537 = zext i16 %535 to i64
  %538 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %533, i64 %537
  %539 = add i32 %536, 1
  %540 = load i16, ptr %538, align 2, !tbaa !6
  %541 = icmp eq i16 %540, 0
  br i1 %541, label %542, label %534, !llvm.loop !282

542:                                              ; preds = %534, %527
  %543 = phi i32 [ 0, %527 ], [ %539, %534 ]
  store i32 %543, ptr %194, align 4, !tbaa !6
  br label %544

544:                                              ; preds = %337, %524, %542
  %545 = phi i32 [ 18, %542 ], [ 6, %524 ], [ 6, %337 ]
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %7) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #12
  br label %546

546:                                              ; preds = %326, %544
  %547 = phi i32 [ %545, %544 ], [ 8, %326 ]
  switch i32 %547, label %5230 [
    i32 8, label %5080
    i32 18, label %606
    i32 6, label %5080
  ]

548:                                              ; preds = %221
  %549 = load ptr, ptr %199, align 8, !tbaa !6
  %550 = icmp eq ptr %549, null
  br i1 %550, label %572, label %551

551:                                              ; preds = %548
  %552 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %553 = load i32, ptr %192, align 8, !tbaa !6
  %554 = icmp sgt i32 %552, %553
  br i1 %554, label %555, label %556

555:                                              ; preds = %551
  call void @Perl_leave_scope(i32 noundef %553) #12
  br label %556

556:                                              ; preds = %555, %551
  %557 = load i32, ptr %193, align 8, !tbaa !37
  %558 = load i32, ptr %207, align 8, !tbaa !6
  %559 = icmp ugt i32 %557, %558
  br i1 %559, label %560, label %569

560:                                              ; preds = %556
  %561 = load ptr, ptr %195, align 8, !tbaa !38
  br label %562

562:                                              ; preds = %560, %562
  %563 = phi i32 [ %557, %560 ], [ %566, %562 ]
  %564 = zext i32 %563 to i64
  %565 = getelementptr inbounds %struct.regexp_paren_pair, ptr %561, i64 %564, i32 1
  store i64 -1, ptr %565, align 8, !tbaa !42
  %566 = add i32 %563, -1
  %567 = load i32, ptr %207, align 8, !tbaa !6
  %568 = icmp ugt i32 %566, %567
  br i1 %568, label %562, label %569, !llvm.loop !283

569:                                              ; preds = %562, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %562 ]
  store i32 %570, ptr %193, align 8, !tbaa !37
  %571 = load i32, ptr %208, align 4, !tbaa !6
  store i32 %571, ptr %197, align 4, !tbaa !36
  br label %572

572:                                              ; preds = %569, %548
  %573 = load i32, ptr %194, align 4, !tbaa !6
  %574 = add i32 %573, -1
  store i32 %574, ptr %194, align 4, !tbaa !6
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %5080, label %576

576:                                              ; preds = %572
  %577 = getelementptr inbounds i8, ptr %188, i64 76
  %578 = load i16, ptr %577, align 4, !tbaa !6
  %579 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %580 = load ptr, ptr %579, align 8, !tbaa !223
  %581 = load ptr, ptr %205, align 8, !tbaa !6
  %582 = getelementptr inbounds %struct.regnode_1, ptr %581, i64 0, i32 3
  %583 = load i32, ptr %582, align 4, !tbaa !224
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds %struct.reg_data, ptr %580, i64 0, i32 2, i64 %584
  %586 = load ptr, ptr %585, align 8, !tbaa !13
  %587 = getelementptr inbounds %struct._reg_trie_data, ptr %586, i64 0, i32 7
  %588 = load ptr, ptr %587, align 8, !tbaa !237
  %589 = getelementptr inbounds i8, ptr %188, i64 78
  %590 = load i16, ptr %589, align 2, !tbaa !6
  %591 = icmp eq i16 %590, 0
  br i1 %591, label %604, label %592

592:                                              ; preds = %576, %592
  %593 = phi i16 [ %602, %592 ], [ %590, %576 ]
  %594 = phi i16 [ %599, %592 ], [ 0, %576 ]
  %595 = icmp ugt i16 %593, %578
  %596 = add i16 %594, -1
  %597 = icmp ult i16 %596, %593
  %598 = select i1 %597, i16 %594, i16 %593
  %599 = select i1 %595, i16 %598, i16 %594
  %600 = zext i16 %593 to i64
  %601 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %588, i64 %600
  %602 = load i16, ptr %601, align 2, !tbaa !6
  %603 = icmp eq i16 %602, 0
  br i1 %603, label %604, label %592, !llvm.loop !284

604:                                              ; preds = %592, %576
  %605 = phi i16 [ 0, %576 ], [ %599, %592 ]
  store i16 %605, ptr %577, align 4, !tbaa !6
  br label %606

606:                                              ; preds = %604, %546
  %607 = and i8 %176, 1
  %608 = icmp eq i8 %607, 0
  %609 = select i1 %608, i8 %176, i8 0
  %610 = select i1 %608, i8 %177, i8 0
  %611 = load ptr, ptr %199, align 8, !tbaa !6
  %612 = icmp eq ptr %611, null
  br i1 %612, label %617, label %613

613:                                              ; preds = %606
  %614 = load i32, ptr %193, align 8, !tbaa !37
  store i32 %614, ptr %207, align 8, !tbaa !6
  %615 = load i32, ptr %197, align 4, !tbaa !36
  store i32 %615, ptr %208, align 4, !tbaa !6
  %616 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %616, ptr %192, align 8, !tbaa !6
  br label %617

617:                                              ; preds = %613, %606
  %618 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %619 = load ptr, ptr %618, align 8, !tbaa !223
  %620 = load ptr, ptr %205, align 8, !tbaa !6
  %621 = getelementptr inbounds %struct.regnode_1, ptr %620, i64 0, i32 3
  %622 = load i32, ptr %621, align 4, !tbaa !224
  %623 = zext i32 %622 to i64
  %624 = getelementptr inbounds %struct.reg_data, ptr %619, i64 0, i32 2, i64 %623
  %625 = load ptr, ptr %624, align 8, !tbaa !13
  %626 = getelementptr inbounds %struct._reg_trie_data, ptr %625, i64 0, i32 7
  %627 = load ptr, ptr %626, align 8, !tbaa !237
  %628 = getelementptr inbounds i8, ptr %188, i64 76
  %629 = load i16, ptr %628, align 4, !tbaa !6
  %630 = zext i16 %629 to i64
  %631 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %627, i64 %630, i32 1
  %632 = load i32, ptr %631, align 4, !tbaa !238
  %633 = getelementptr inbounds %struct._reg_trie_data, ptr %625, i64 0, i32 12
  %634 = load i32, ptr %633, align 8, !tbaa !285
  %635 = load i32, ptr %200, align 8, !tbaa !6
  %636 = add i32 %634, %635
  %637 = sub i32 %632, %636
  %638 = load ptr, ptr %206, align 8, !tbaa !6
  %639 = load i8, ptr %196, align 8, !tbaa !6, !range !97, !noundef !98
  %640 = icmp eq i8 %639, 0
  br i1 %640, label %680, label %641

641:                                              ; preds = %617
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %9) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #12
  %642 = icmp eq i32 %637, 0
  br i1 %642, label %676, label %643

643:                                              ; preds = %641, %671
  %644 = phi i32 [ %672, %671 ], [ %637, %641 ]
  %645 = phi ptr [ %655, %671 ], [ %638, %641 ]
  br i1 %23, label %646, label %649

646:                                              ; preds = %643
  %647 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %645, i64 noundef 13, ptr noundef nonnull %11, i32 noundef %26) #12
  %648 = load i64, ptr %11, align 8, !tbaa !86
  br label %652

649:                                              ; preds = %643
  %650 = load i8, ptr %645, align 1, !tbaa !6
  %651 = zext i8 %650 to i64
  br label %652

652:                                              ; preds = %649, %646
  %653 = phi i64 [ 1, %649 ], [ %648, %646 ]
  %654 = phi i64 [ %651, %649 ], [ %647, %646 ]
  %655 = getelementptr inbounds i8, ptr %645, i64 %653
  %656 = call i64 @Perl__to_uni_fold_flags(i64 noundef %654, ptr noundef nonnull %9, ptr noundef nonnull %10, i8 noundef zeroext 2) #12
  %657 = load i64, ptr %10, align 8, !tbaa !86
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %671, label %659

659:                                              ; preds = %652, %664
  %660 = phi ptr [ %667, %664 ], [ %9, %652 ]
  %661 = phi i32 [ %662, %664 ], [ %644, %652 ]
  %662 = add i32 %661, -1
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %673, label %664

664:                                              ; preds = %659
  %665 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %660, i64 noundef 13, ptr noundef nonnull %11, i32 noundef %26) #12
  %666 = load i64, ptr %11, align 8, !tbaa !86
  %667 = getelementptr inbounds i8, ptr %660, i64 %666
  %668 = load i64, ptr %10, align 8, !tbaa !86
  %669 = sub i64 %668, %666
  store i64 %669, ptr %10, align 8, !tbaa !86
  %670 = icmp eq i64 %668, %666
  br i1 %670, label %671, label %659, !llvm.loop !286

671:                                              ; preds = %664, %652
  %672 = phi i32 [ %644, %652 ], [ %662, %664 ]
  br label %643, !llvm.loop !287

673:                                              ; preds = %659
  %674 = load ptr, ptr %205, align 8, !tbaa !6
  %675 = load ptr, ptr %199, align 8, !tbaa !6
  br label %676

676:                                              ; preds = %673, %641
  %677 = phi ptr [ %611, %641 ], [ %675, %673 ]
  %678 = phi ptr [ %620, %641 ], [ %674, %673 ]
  %679 = phi ptr [ %638, %641 ], [ %655, %673 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %9) #12
  br label %738

680:                                              ; preds = %617
  br i1 %23, label %681, label %735

681:                                              ; preds = %680
  %682 = icmp eq i32 %637, 0
  br i1 %682, label %738, label %683

683:                                              ; preds = %681
  %684 = xor i32 %636, -1
  %685 = add i32 %632, %684
  %686 = and i32 %637, 3
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %701, label %688

688:                                              ; preds = %683, %688
  %689 = phi i32 [ %692, %688 ], [ %637, %683 ]
  %690 = phi ptr [ %698, %688 ], [ %638, %683 ]
  %691 = phi i32 [ %699, %688 ], [ 0, %683 ]
  %692 = add i32 %689, -1
  %693 = load i8, ptr %690, align 1, !tbaa !6
  %694 = zext i8 %693 to i64
  %695 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %694
  %696 = load i8, ptr %695, align 1, !tbaa !6
  %697 = zext i8 %696 to i64
  %698 = getelementptr inbounds i8, ptr %690, i64 %697
  %699 = add i32 %691, 1
  %700 = icmp eq i32 %699, %686
  br i1 %700, label %701, label %688, !llvm.loop !288

701:                                              ; preds = %688, %683
  %702 = phi ptr [ undef, %683 ], [ %698, %688 ]
  %703 = phi i32 [ %637, %683 ], [ %692, %688 ]
  %704 = phi ptr [ %638, %683 ], [ %698, %688 ]
  %705 = icmp ult i32 %685, 3
  br i1 %705, label %738, label %706

706:                                              ; preds = %701, %706
  %707 = phi i32 [ %727, %706 ], [ %703, %701 ]
  %708 = phi ptr [ %733, %706 ], [ %704, %701 ]
  %709 = load i8, ptr %708, align 1, !tbaa !6
  %710 = zext i8 %709 to i64
  %711 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %710
  %712 = load i8, ptr %711, align 1, !tbaa !6
  %713 = zext i8 %712 to i64
  %714 = getelementptr inbounds i8, ptr %708, i64 %713
  %715 = load i8, ptr %714, align 1, !tbaa !6
  %716 = zext i8 %715 to i64
  %717 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %716
  %718 = load i8, ptr %717, align 1, !tbaa !6
  %719 = zext i8 %718 to i64
  %720 = getelementptr inbounds i8, ptr %714, i64 %719
  %721 = load i8, ptr %720, align 1, !tbaa !6
  %722 = zext i8 %721 to i64
  %723 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %722
  %724 = load i8, ptr %723, align 1, !tbaa !6
  %725 = zext i8 %724 to i64
  %726 = getelementptr inbounds i8, ptr %720, i64 %725
  %727 = add i32 %707, -4
  %728 = load i8, ptr %726, align 1, !tbaa !6
  %729 = zext i8 %728 to i64
  %730 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %729
  %731 = load i8, ptr %730, align 1, !tbaa !6
  %732 = zext i8 %731 to i64
  %733 = getelementptr inbounds i8, ptr %726, i64 %732
  %734 = icmp eq i32 %727, 0
  br i1 %734, label %738, label %706, !llvm.loop !289

735:                                              ; preds = %680
  %736 = zext i32 %637 to i64
  %737 = getelementptr inbounds i8, ptr %638, i64 %736
  br label %738

738:                                              ; preds = %701, %706, %681, %735, %676
  %739 = phi ptr [ %677, %676 ], [ %611, %735 ], [ %611, %681 ], [ %611, %706 ], [ %611, %701 ]
  %740 = phi ptr [ %678, %676 ], [ %620, %735 ], [ %620, %681 ], [ %620, %706 ], [ %620, %701 ]
  %741 = phi ptr [ %679, %676 ], [ %737, %735 ], [ %638, %681 ], [ %702, %701 ], [ %733, %706 ]
  %742 = icmp eq ptr %739, null
  br i1 %742, label %749, label %743

743:                                              ; preds = %738
  %744 = load i16, ptr %628, align 4, !tbaa !6
  %745 = zext i16 %744 to i64
  %746 = getelementptr inbounds i16, ptr %739, i64 %745
  %747 = load i16, ptr %746, align 2, !tbaa !152
  %748 = icmp eq i16 %747, 0
  br i1 %748, label %749, label %752

749:                                              ; preds = %743, %738
  %750 = getelementptr inbounds %struct.regnode, ptr %740, i64 0, i32 2
  %751 = load i16, ptr %750, align 2, !tbaa !275
  br label %752

752:                                              ; preds = %743, %749
  %753 = phi i16 [ %751, %749 ], [ %747, %743 ]
  %754 = zext i16 %753 to i64
  %755 = getelementptr inbounds %struct.regnode, ptr %740, i64 %754
  %756 = load i32, ptr %194, align 4, !tbaa !6
  %757 = icmp ugt i32 %756, 1
  %758 = select i1 %757, i1 true, i1 %39
  br i1 %758, label %759, label %3369

759:                                              ; preds = %752
  store i32 94, ptr %188, align 8, !tbaa !276
  br label %4940

760:                                              ; preds = %221, %221
  %761 = getelementptr inbounds %struct.regnode_string, ptr %215, i64 0, i32 3
  %762 = load i8, ptr %215, align 2, !tbaa !135
  %763 = zext i8 %762 to i64
  %764 = and i8 %169, 1
  %765 = icmp eq i8 %22, %764
  br i1 %765, label %829, label %766

766:                                              ; preds = %760
  %767 = getelementptr inbounds i8, ptr %761, i64 %763
  %768 = icmp eq i8 %762, 0
  br i1 %23, label %770, label %769

769:                                              ; preds = %766
  br i1 %768, label %4876, label %800

770:                                              ; preds = %766
  br i1 %768, label %4876, label %771

771:                                              ; preds = %770, %795
  %772 = phi ptr [ %797, %795 ], [ %214, %770 ]
  %773 = phi ptr [ %798, %795 ], [ %761, %770 ]
  %774 = icmp ult ptr %772, %216
  br i1 %774, label %775, label %5074

775:                                              ; preds = %771
  %776 = load i8, ptr %772, align 1, !tbaa !6
  %777 = icmp ugt i8 %776, -61
  br i1 %777, label %5074, label %778

778:                                              ; preds = %775
  %779 = icmp sgt i8 %776, -1
  br i1 %779, label %780, label %783

780:                                              ; preds = %778
  %781 = load i8, ptr %773, align 1, !tbaa !6
  %782 = icmp eq i8 %776, %781
  br i1 %782, label %795, label %5074

783:                                              ; preds = %778
  %784 = and i8 %776, 31
  %785 = zext i8 %784 to i32
  %786 = shl nuw nsw i32 %785, 6
  %787 = getelementptr inbounds i8, ptr %772, i64 1
  %788 = load i8, ptr %787, align 1, !tbaa !6
  %789 = and i8 %788, 63
  %790 = zext i8 %789 to i32
  %791 = or i32 %786, %790
  %792 = load i8, ptr %773, align 1, !tbaa !6
  %793 = zext i8 %792 to i32
  %794 = icmp eq i32 %791, %793
  br i1 %794, label %795, label %5074

795:                                              ; preds = %783, %780
  %796 = phi i64 [ 1, %780 ], [ 2, %783 ]
  %797 = getelementptr inbounds i8, ptr %772, i64 %796
  %798 = getelementptr inbounds i8, ptr %773, i64 1
  %799 = icmp ult ptr %798, %767
  br i1 %799, label %771, label %4876, !llvm.loop !290

800:                                              ; preds = %769, %824
  %801 = phi ptr [ %827, %824 ], [ %214, %769 ]
  %802 = phi ptr [ %826, %824 ], [ %761, %769 ]
  %803 = icmp ult ptr %801, %216
  br i1 %803, label %804, label %5075

804:                                              ; preds = %800
  %805 = load i8, ptr %802, align 1, !tbaa !6
  %806 = icmp ugt i8 %805, -61
  br i1 %806, label %5075, label %807

807:                                              ; preds = %804
  %808 = icmp sgt i8 %805, -1
  br i1 %808, label %809, label %812

809:                                              ; preds = %807
  %810 = load i8, ptr %801, align 1, !tbaa !6
  %811 = icmp eq i8 %805, %810
  br i1 %811, label %824, label %5075

812:                                              ; preds = %807
  %813 = and i8 %805, 31
  %814 = zext i8 %813 to i32
  %815 = shl nuw nsw i32 %814, 6
  %816 = getelementptr inbounds i8, ptr %802, i64 1
  %817 = load i8, ptr %816, align 1, !tbaa !6
  %818 = and i8 %817, 63
  %819 = zext i8 %818 to i32
  %820 = or i32 %815, %819
  %821 = load i8, ptr %801, align 1, !tbaa !6
  %822 = zext i8 %821 to i32
  %823 = icmp eq i32 %820, %822
  br i1 %823, label %824, label %5075

824:                                              ; preds = %812, %809
  %825 = phi i64 [ 1, %809 ], [ 2, %812 ]
  %826 = getelementptr inbounds i8, ptr %802, i64 %825
  %827 = getelementptr inbounds i8, ptr %801, i64 1
  %828 = icmp ult ptr %826, %767
  br i1 %828, label %800, label %4876, !llvm.loop !291

829:                                              ; preds = %760
  %830 = ptrtoint ptr %216 to i64
  %831 = ptrtoint ptr %214 to i64
  %832 = sub i64 %830, %831
  %833 = icmp slt i64 %832, %763
  br i1 %833, label %5080, label %834

834:                                              ; preds = %829
  %835 = load i8, ptr %761, align 1, !tbaa !6
  %836 = zext i8 %835 to i32
  %837 = icmp eq i32 %222, %836
  br i1 %837, label %838, label %5080

838:                                              ; preds = %834
  %839 = icmp ugt i8 %762, 1
  br i1 %839, label %840, label %843

840:                                              ; preds = %838
  %841 = call i32 @bcmp(ptr nonnull %761, ptr %214, i64 %763)
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %843, label %5080

843:                                              ; preds = %840, %838
  %844 = getelementptr inbounds i8, ptr %214, i64 %763
  br label %4876

845:                                              ; preds = %221
  br i1 %23, label %846, label %5080

846:                                              ; preds = %845
  %847 = getelementptr inbounds %struct.regnode_string, ptr %215, i64 0, i32 3
  %848 = load i8, ptr %215, align 2, !tbaa !135
  %849 = zext i8 %848 to i64
  br label %873

850:                                              ; preds = %221, %221
  %851 = shl i8 %169, 2
  %852 = and i8 %851, 4
  %853 = zext i8 %852 to i32
  br label %856

854:                                              ; preds = %221
  br label %856

855:                                              ; preds = %221, %221
  br label %856

856:                                              ; preds = %221, %855, %854, %850
  %857 = phi ptr [ @Perl_foldEQ_latin1, %850 ], [ @Perl_foldEQ_locale, %854 ], [ @Perl_foldEQ_latin1, %855 ], [ @Perl_foldEQ, %221 ]
  %858 = phi ptr [ @PL_fold_latin1, %850 ], [ @PL_fold_locale, %854 ], [ @PL_fold_latin1, %855 ], [ @PL_fold, %221 ]
  %859 = phi i32 [ %853, %850 ], [ 2, %854 ], [ 1, %855 ], [ 0, %221 ]
  %860 = getelementptr inbounds %struct.regnode_string, ptr %215, i64 0, i32 3
  %861 = load i8, ptr %215, align 2, !tbaa !135
  %862 = zext i8 %861 to i64
  br i1 %23, label %873, label %863

863:                                              ; preds = %856
  %864 = and i8 %169, 1
  %865 = icmp ne i8 %864, 0
  %866 = icmp eq i32 %213, 37
  %867 = select i1 %865, i1 true, i1 %866
  br i1 %867, label %873, label %868

868:                                              ; preds = %863
  %869 = icmp ne i32 %213, 34
  %870 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !97
  %871 = icmp eq i8 %870, 0
  %872 = select i1 %869, i1 true, i1 %871
  br i1 %872, label %882, label %873

873:                                              ; preds = %846, %868, %863, %856
  %874 = phi i64 [ %849, %846 ], [ %862, %868 ], [ %862, %863 ], [ %862, %856 ]
  %875 = phi ptr [ %847, %846 ], [ %860, %868 ], [ %860, %863 ], [ %860, %856 ]
  %876 = phi i32 [ 22, %846 ], [ %859, %868 ], [ %859, %863 ], [ %859, %856 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #12
  store ptr %216, ptr %12, align 8, !tbaa !13
  %877 = and i8 %169, 1
  %878 = icmp ne i8 %877, 0
  %879 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef nonnull %875, ptr noundef null, i64 noundef %874, i1 noundef zeroext %878, ptr noundef %214, ptr noundef nonnull %12, i64 noundef 0, i1 noundef zeroext %23, i32 noundef %876) #12
  %880 = icmp eq i32 %879, 0
  %881 = load ptr, ptr %12, align 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #12
  br i1 %880, label %5080, label %4876

882:                                              ; preds = %868
  %883 = load i8, ptr %860, align 1, !tbaa !6
  %884 = zext i8 %883 to i32
  %885 = icmp eq i32 %222, %884
  %886 = icmp slt i32 %222, 0
  %887 = or i1 %886, %885
  br i1 %887, label %898, label %888

888:                                              ; preds = %882
  %889 = zext i32 %222 to i64
  %890 = getelementptr inbounds i8, ptr %858, i64 %889
  %891 = load i8, ptr %890, align 1, !tbaa !6
  %892 = icmp ne i8 %883, %891
  %893 = ptrtoint ptr %216 to i64
  %894 = ptrtoint ptr %214 to i64
  %895 = sub i64 %893, %894
  %896 = icmp slt i64 %895, %862
  %897 = select i1 %892, i1 true, i1 %896
  br i1 %897, label %5080, label %903

898:                                              ; preds = %882
  %899 = ptrtoint ptr %216 to i64
  %900 = ptrtoint ptr %214 to i64
  %901 = sub i64 %899, %900
  %902 = icmp slt i64 %901, %862
  br i1 %902, label %5080, label %903

903:                                              ; preds = %888, %898
  %904 = icmp ugt i8 %861, 1
  br i1 %904, label %905, label %909

905:                                              ; preds = %903
  %906 = zext i8 %861 to i32
  %907 = call i32 %857(ptr noundef nonnull %860, ptr noundef %214, i32 noundef %906) #12, !callees !144
  %908 = icmp eq i32 %907, 0
  br i1 %908, label %5080, label %909

909:                                              ; preds = %905, %903
  %910 = getelementptr inbounds i8, ptr %214, i64 %862
  br label %4876

911:                                              ; preds = %221
  br label %912

912:                                              ; preds = %221, %911
  %913 = phi i32 [ 0, %911 ], [ 1, %221 ]
  %914 = load i8, ptr %215, align 2, !tbaa !139
  %915 = icmp eq i8 %914, 0
  br i1 %915, label %921, label %916

916:                                              ; preds = %912
  %917 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !151, !range !97, !noundef !98
  %918 = icmp eq i8 %917, 0
  br i1 %918, label %919, label %1182

919:                                              ; preds = %916
  call void (i32, ptr, ...) @Perl_ck_warner(i32 noundef 65, ptr noundef nonnull @.str.2) #12
  %920 = load ptr, ptr %58, align 8, !tbaa !56
  br label %1182

921:                                              ; preds = %912
  %922 = load ptr, ptr %59, align 8, !tbaa !53
  %923 = icmp eq ptr %214, %922
  br i1 %23, label %924, label %1096

924:                                              ; preds = %921
  br i1 %923, label %925, label %933

925:                                              ; preds = %924
  %926 = tail call ptr @__ctype_b_loc() #14
  %927 = load ptr, ptr %926, align 8, !tbaa !13
  %928 = getelementptr inbounds i16, ptr %927, i64 10
  %929 = load i16, ptr %928, align 2, !tbaa !152
  %930 = lshr i16 %929, 3
  %931 = and i16 %930, 1
  %932 = zext i16 %931 to i64
  br label %1041

933:                                              ; preds = %924
  %934 = ptrtoint ptr %922 to i64
  %935 = icmp ugt ptr %214, %922
  br i1 %935, label %936, label %962

936:                                              ; preds = %933
  %937 = ptrtoint ptr %214 to i64
  %938 = getelementptr inbounds i8, ptr %214, i64 -1
  %939 = load i8, ptr %938, align 1, !tbaa !6
  %940 = icmp sgt i8 %939, -1
  br i1 %940, label %966, label %941

941:                                              ; preds = %936
  %942 = icmp ugt ptr %938, %922
  br i1 %942, label %943, label %957

943:                                              ; preds = %941
  %944 = getelementptr i8, ptr %214, i64 %934
  %945 = sub i64 0, %937
  %946 = getelementptr i8, ptr %944, i64 %945
  br label %947

947:                                              ; preds = %952, %943
  %948 = phi ptr [ %953, %952 ], [ %938, %943 ]
  %949 = load i8, ptr %948, align 1, !tbaa !6
  %950 = and i8 %949, -64
  %951 = icmp eq i8 %950, -128
  br i1 %951, label %952, label %957

952:                                              ; preds = %947
  %953 = getelementptr inbounds i8, ptr %948, i64 -1
  %954 = icmp ugt ptr %953, %922
  br i1 %954, label %947, label %955, !llvm.loop !127

955:                                              ; preds = %952
  %956 = load i8, ptr %946, align 1, !tbaa !6
  br label %957

957:                                              ; preds = %947, %955, %941
  %958 = phi ptr [ %938, %941 ], [ %946, %955 ], [ %948, %947 ]
  %959 = phi i8 [ %939, %941 ], [ %956, %955 ], [ %949, %947 ]
  %960 = icmp ugt i8 %959, -63
  br i1 %960, label %962, label %961

961:                                              ; preds = %957
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %962

962:                                              ; preds = %957, %961, %933
  %963 = phi ptr [ %958, %961 ], [ %958, %957 ], [ %214, %933 ]
  %964 = load i8, ptr %963, align 1, !tbaa !6
  %965 = icmp sgt i8 %964, -1
  br i1 %965, label %966, label %987

966:                                              ; preds = %936, %962
  %967 = load ptr, ptr %59, align 8, !tbaa !53
  %968 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %967)
  %969 = load i8, ptr %968, align 1, !tbaa !6
  %970 = icmp sgt i8 %969, -1
  br i1 %970, label %971, label %1038

971:                                              ; preds = %966
  %972 = tail call ptr @__ctype_b_loc() #14
  %973 = load ptr, ptr %972, align 8, !tbaa !13
  %974 = load ptr, ptr %59, align 8, !tbaa !53
  %975 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %974)
  %976 = load i8, ptr %975, align 1, !tbaa !6
  %977 = zext i8 %976 to i64
  %978 = getelementptr inbounds i16, ptr %973, i64 %977
  %979 = load i16, ptr %978, align 2, !tbaa !152
  %980 = and i16 %979, 8
  %981 = icmp eq i16 %980, 0
  br i1 %981, label %982, label %1038

982:                                              ; preds = %971
  %983 = load ptr, ptr %59, align 8, !tbaa !53
  %984 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %983)
  %985 = load i8, ptr %984, align 1, !tbaa !6
  %986 = icmp eq i8 %985, 95
  br label %1038

987:                                              ; preds = %962
  %988 = load ptr, ptr %59, align 8, !tbaa !53
  %989 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %988)
  %990 = load i8, ptr %989, align 1, !tbaa !6
  %991 = and i8 %990, -2
  %992 = icmp eq i8 %991, -62
  %993 = load ptr, ptr %59, align 8, !tbaa !53
  %994 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %993)
  br i1 %992, label %995, label %1036

995:                                              ; preds = %987
  %996 = load i8, ptr %994, align 1, !tbaa !6
  %997 = and i8 %996, 30
  %998 = load ptr, ptr %59, align 8, !tbaa !53
  %999 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %998)
  %1000 = icmp eq i8 %997, 0
  br i1 %1000, label %1001, label %1038

1001:                                             ; preds = %995
  %1002 = tail call ptr @__ctype_b_loc() #14
  %1003 = load ptr, ptr %1002, align 8, !tbaa !13
  %1004 = load ptr, ptr %59, align 8, !tbaa !53
  %1005 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1004)
  %1006 = load i8, ptr %1005, align 1, !tbaa !6
  %1007 = and i8 %1006, 31
  %1008 = zext i8 %1007 to i64
  %1009 = shl nuw nsw i64 %1008, 6
  %1010 = load ptr, ptr %59, align 8, !tbaa !53
  %1011 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1010)
  %1012 = getelementptr inbounds i8, ptr %1011, i64 1
  %1013 = load i8, ptr %1012, align 1, !tbaa !6
  %1014 = and i8 %1013, 63
  %1015 = zext i8 %1014 to i64
  %1016 = or i64 %1009, %1015
  %1017 = getelementptr inbounds i16, ptr %1003, i64 %1016
  %1018 = load i16, ptr %1017, align 2, !tbaa !152
  %1019 = and i16 %1018, 8
  %1020 = icmp eq i16 %1019, 0
  br i1 %1020, label %1021, label %1038

1021:                                             ; preds = %1001
  %1022 = load ptr, ptr %59, align 8, !tbaa !53
  %1023 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1022)
  %1024 = load i8, ptr %1023, align 1, !tbaa !6
  %1025 = and i8 %1024, 31
  %1026 = zext i8 %1025 to i32
  %1027 = shl nuw nsw i32 %1026, 6
  %1028 = load ptr, ptr %59, align 8, !tbaa !53
  %1029 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1028)
  %1030 = getelementptr inbounds i8, ptr %1029, i64 1
  %1031 = load i8, ptr %1030, align 1, !tbaa !6
  %1032 = and i8 %1031, 63
  %1033 = zext i8 %1032 to i32
  %1034 = or i32 %1027, %1033
  %1035 = icmp eq i32 %1034, 95
  br label %1038

1036:                                             ; preds = %987
  %1037 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef %994) #12
  br label %1038

1038:                                             ; preds = %995, %1021, %1001, %966, %982, %971, %1036
  %1039 = phi i1 [ %1037, %1036 ], [ false, %966 ], [ true, %971 ], [ %986, %982 ], [ false, %995 ], [ true, %1001 ], [ %1035, %1021 ]
  %1040 = zext i1 %1039 to i64
  br label %1041

1041:                                             ; preds = %1038, %925
  %1042 = phi i64 [ %932, %925 ], [ %1040, %1038 ]
  %1043 = icmp slt i32 %222, 0
  br i1 %1043, label %1044, label %1052

1044:                                             ; preds = %1041
  %1045 = tail call ptr @__ctype_b_loc() #14
  %1046 = load ptr, ptr %1045, align 8, !tbaa !13
  %1047 = getelementptr inbounds i16, ptr %1046, i64 10
  %1048 = load i16, ptr %1047, align 2, !tbaa !152
  %1049 = lshr i16 %1048, 3
  %1050 = and i16 %1049, 1
  %1051 = zext i16 %1050 to i64
  br label %1144

1052:                                             ; preds = %1041
  %1053 = load i8, ptr %214, align 1, !tbaa !6
  %1054 = icmp sgt i8 %1053, -1
  br i1 %1054, label %1055, label %1066

1055:                                             ; preds = %1052
  %1056 = tail call ptr @__ctype_b_loc() #14
  %1057 = load ptr, ptr %1056, align 8, !tbaa !13
  %1058 = zext i8 %1053 to i64
  %1059 = getelementptr inbounds i16, ptr %1057, i64 %1058
  %1060 = load i16, ptr %1059, align 2, !tbaa !152
  %1061 = and i16 %1060, 8
  %1062 = icmp ne i16 %1061, 0
  %1063 = icmp eq i8 %1053, 95
  %1064 = or i1 %1063, %1062
  %1065 = zext i1 %1064 to i64
  br label %1144

1066:                                             ; preds = %1052
  %1067 = zext i8 %1053 to i32
  %1068 = and i32 %1067, 254
  %1069 = icmp eq i32 %1068, 194
  br i1 %1069, label %1070, label %1093

1070:                                             ; preds = %1066
  %1071 = and i32 %1067, 30
  %1072 = icmp eq i32 %1071, 0
  br i1 %1072, label %1073, label %1090

1073:                                             ; preds = %1070
  %1074 = shl nuw nsw i32 %1067, 6
  %1075 = and i32 %1074, 1984
  %1076 = getelementptr inbounds i8, ptr %214, i64 1
  %1077 = load i8, ptr %1076, align 1, !tbaa !6
  %1078 = and i8 %1077, 63
  %1079 = zext i8 %1078 to i32
  %1080 = or i32 %1075, %1079
  %1081 = tail call ptr @__ctype_b_loc() #14
  %1082 = load ptr, ptr %1081, align 8, !tbaa !13
  %1083 = zext i32 %1080 to i64
  %1084 = getelementptr inbounds i16, ptr %1082, i64 %1083
  %1085 = load i16, ptr %1084, align 2, !tbaa !152
  %1086 = and i16 %1085, 8
  %1087 = icmp ne i16 %1086, 0
  %1088 = icmp eq i32 %1080, 95
  %1089 = or i1 %1088, %1087
  br label %1090

1090:                                             ; preds = %1073, %1070
  %1091 = phi i1 [ false, %1070 ], [ %1089, %1073 ]
  %1092 = zext i1 %1091 to i64
  br label %1144

1093:                                             ; preds = %1066
  %1094 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %214) #12
  %1095 = zext i1 %1094 to i64
  br label %1144

1096:                                             ; preds = %921
  br i1 %923, label %1097, label %1104

1097:                                             ; preds = %1096
  %1098 = tail call ptr @__ctype_b_loc() #14
  %1099 = load ptr, ptr %1098, align 8, !tbaa !13
  %1100 = getelementptr inbounds i16, ptr %1099, i64 10
  %1101 = load i16, ptr %1100, align 2, !tbaa !152
  %1102 = and i16 %1101, 8
  %1103 = icmp ne i16 %1102, 0
  br label %1118

1104:                                             ; preds = %1096
  %1105 = getelementptr inbounds i8, ptr %214, i64 -1
  %1106 = load i8, ptr %1105, align 1, !tbaa !6
  %1107 = icmp sgt i8 %1106, -1
  br i1 %1107, label %1108, label %1118

1108:                                             ; preds = %1104
  %1109 = tail call ptr @__ctype_b_loc() #14
  %1110 = load ptr, ptr %1109, align 8, !tbaa !13
  %1111 = zext i8 %1106 to i64
  %1112 = getelementptr inbounds i16, ptr %1110, i64 %1111
  %1113 = load i16, ptr %1112, align 2, !tbaa !152
  %1114 = and i16 %1113, 8
  %1115 = icmp ne i16 %1114, 0
  %1116 = icmp eq i8 %1106, 95
  %1117 = or i1 %1116, %1115
  br label %1118

1118:                                             ; preds = %1108, %1104, %1097
  %1119 = phi i1 [ %1103, %1097 ], [ false, %1104 ], [ %1117, %1108 ]
  %1120 = zext i1 %1119 to i64
  %1121 = icmp slt i32 %222, 0
  br i1 %1121, label %1122, label %1129

1122:                                             ; preds = %1118
  %1123 = tail call ptr @__ctype_b_loc() #14
  %1124 = load ptr, ptr %1123, align 8, !tbaa !13
  %1125 = getelementptr inbounds i16, ptr %1124, i64 10
  %1126 = load i16, ptr %1125, align 2, !tbaa !152
  %1127 = and i16 %1126, 8
  %1128 = icmp ne i16 %1127, 0
  br label %1141

1129:                                             ; preds = %1118
  %1130 = icmp ult i32 %222, 128
  br i1 %1130, label %1131, label %1141

1131:                                             ; preds = %1129
  %1132 = tail call ptr @__ctype_b_loc() #14
  %1133 = load ptr, ptr %1132, align 8, !tbaa !13
  %1134 = zext i32 %222 to i64
  %1135 = getelementptr inbounds i16, ptr %1133, i64 %1134
  %1136 = load i16, ptr %1135, align 2, !tbaa !152
  %1137 = and i16 %1136, 8
  %1138 = icmp ne i16 %1137, 0
  %1139 = icmp eq i32 %222, 95
  %1140 = select i1 %1138, i1 true, i1 %1139
  br label %1141

1141:                                             ; preds = %1129, %1131, %1122
  %1142 = phi i1 [ %1128, %1122 ], [ false, %1129 ], [ %1140, %1131 ]
  %1143 = zext i1 %1142 to i64
  br label %1144

1144:                                             ; preds = %1044, %1090, %1093, %1055, %1141
  %1145 = phi i64 [ %1120, %1141 ], [ %1042, %1055 ], [ %1042, %1093 ], [ %1042, %1090 ], [ %1042, %1044 ]
  %1146 = phi i64 [ %1143, %1141 ], [ %1065, %1055 ], [ %1095, %1093 ], [ %1092, %1090 ], [ %1051, %1044 ]
  %1147 = icmp eq i64 %1145, %1146
  %1148 = zext i1 %1147 to i32
  %1149 = icmp eq i32 %913, %1148
  br i1 %1149, label %4876, label %5080

1150:                                             ; preds = %221
  br label %1151

1151:                                             ; preds = %221, %1150
  %1152 = phi i32 [ 0, %1150 ], [ 1, %221 ]
  br i1 %23, label %1153, label %1156

1153:                                             ; preds = %1151
  %1154 = load i8, ptr %215, align 2, !tbaa !139
  br label %1189

1155:                                             ; preds = %221
  br label %1156

1156:                                             ; preds = %221, %1155, %1151
  %1157 = phi i32 [ %1152, %1151 ], [ 0, %1155 ], [ 1, %221 ]
  %1158 = load ptr, ptr %59, align 8, !tbaa !53
  %1159 = icmp eq ptr %214, %1158
  br i1 %1159, label %1165, label %1160

1160:                                             ; preds = %1156
  %1161 = getelementptr inbounds i8, ptr %214, i64 -1
  %1162 = load i8, ptr %1161, align 1, !tbaa !6
  %1163 = zext i8 %1162 to i64
  %1164 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1163
  br label %1165

1165:                                             ; preds = %1156, %1160
  %1166 = phi ptr [ %1164, %1160 ], [ getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), %1156 ]
  %1167 = load i32, ptr %1166, align 4, !tbaa !34
  %1168 = and i32 %1167, 16385
  %1169 = icmp ne i32 %1168, 16385
  %1170 = icmp slt i32 %222, 0
  %1171 = and i32 %222, 255
  %1172 = zext i32 %1171 to i64
  %1173 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1172
  %1174 = select i1 %1170, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), ptr %1173
  %1175 = load i32, ptr %1174, align 4, !tbaa !34
  %1176 = and i32 %1175, 16385
  %1177 = icmp eq i32 %1176, 16385
  %1178 = xor i1 %1169, %1177
  %1179 = zext i1 %1178 to i32
  %1180 = icmp eq i32 %1157, %1179
  br i1 %1180, label %4876, label %5080

1181:                                             ; preds = %221
  br label %1182

1182:                                             ; preds = %221, %1181, %916, %919
  %1183 = phi ptr [ %216, %916 ], [ %920, %919 ], [ %216, %1181 ], [ %216, %221 ]
  %1184 = phi i32 [ %913, %916 ], [ %913, %919 ], [ 0, %1181 ], [ 1, %221 ]
  %1185 = load ptr, ptr %59, align 8, !tbaa !53
  %1186 = icmp ult ptr %1185, %1183
  br i1 %1186, label %1187, label %1683

1187:                                             ; preds = %1182
  %1188 = load i8, ptr %215, align 2, !tbaa !139
  br i1 %23, label %1189, label %1603

1189:                                             ; preds = %1153, %1187
  %1190 = phi i8 [ %1188, %1187 ], [ %1154, %1153 ]
  %1191 = phi ptr [ %1183, %1187 ], [ %216, %1153 ]
  %1192 = phi i32 [ %1184, %1187 ], [ %1152, %1153 ]
  switch i8 %1190, label %1683 [
    i8 0, label %1193
    i8 1, label %1314
    i8 2, label %1409
    i8 3, label %1506
  ]

1193:                                             ; preds = %1189
  %1194 = load ptr, ptr %59, align 8, !tbaa !53
  %1195 = icmp eq ptr %214, %1194
  br i1 %1195, label %1274, label %1196

1196:                                             ; preds = %1193
  %1197 = ptrtoint ptr %1194 to i64
  %1198 = icmp ugt ptr %214, %1194
  br i1 %1198, label %1199, label %1225

1199:                                             ; preds = %1196
  %1200 = ptrtoint ptr %214 to i64
  %1201 = getelementptr inbounds i8, ptr %214, i64 -1
  %1202 = load i8, ptr %1201, align 1, !tbaa !6
  %1203 = icmp sgt i8 %1202, -1
  br i1 %1203, label %1229, label %1204

1204:                                             ; preds = %1199
  %1205 = icmp ugt ptr %1201, %1194
  br i1 %1205, label %1206, label %1220

1206:                                             ; preds = %1204
  %1207 = getelementptr i8, ptr %214, i64 %1197
  %1208 = sub i64 0, %1200
  %1209 = getelementptr i8, ptr %1207, i64 %1208
  br label %1210

1210:                                             ; preds = %1215, %1206
  %1211 = phi ptr [ %1216, %1215 ], [ %1201, %1206 ]
  %1212 = load i8, ptr %1211, align 1, !tbaa !6
  %1213 = and i8 %1212, -64
  %1214 = icmp eq i8 %1213, -128
  br i1 %1214, label %1215, label %1220

1215:                                             ; preds = %1210
  %1216 = getelementptr inbounds i8, ptr %1211, i64 -1
  %1217 = icmp ugt ptr %1216, %1194
  br i1 %1217, label %1210, label %1218, !llvm.loop !127

1218:                                             ; preds = %1215
  %1219 = load i8, ptr %1209, align 1, !tbaa !6
  br label %1220

1220:                                             ; preds = %1210, %1218, %1204
  %1221 = phi ptr [ %1201, %1204 ], [ %1209, %1218 ], [ %1211, %1210 ]
  %1222 = phi i8 [ %1202, %1204 ], [ %1219, %1218 ], [ %1212, %1210 ]
  %1223 = icmp ugt i8 %1222, -63
  br i1 %1223, label %1225, label %1224

1224:                                             ; preds = %1220
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1225

1225:                                             ; preds = %1220, %1224, %1196
  %1226 = phi ptr [ %1221, %1224 ], [ %1221, %1220 ], [ %214, %1196 ]
  %1227 = load i8, ptr %1226, align 1, !tbaa !6
  %1228 = icmp sgt i8 %1227, -1
  br i1 %1228, label %1229, label %1238

1229:                                             ; preds = %1199, %1225
  %1230 = load ptr, ptr %59, align 8, !tbaa !53
  %1231 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1230)
  %1232 = load i8, ptr %1231, align 1, !tbaa !6
  %1233 = zext i8 %1232 to i64
  %1234 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1233
  %1235 = load i32, ptr %1234, align 4, !tbaa !34
  %1236 = and i32 %1235, 1
  %1237 = zext i32 %1236 to i64
  br label %1274

1238:                                             ; preds = %1225
  %1239 = load ptr, ptr %59, align 8, !tbaa !53
  %1240 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1239)
  %1241 = load i8, ptr %1240, align 1, !tbaa !6
  %1242 = and i8 %1241, -2
  %1243 = icmp eq i8 %1242, -62
  %1244 = load ptr, ptr %59, align 8, !tbaa !53
  %1245 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1244)
  br i1 %1243, label %1246, label %1271

1246:                                             ; preds = %1238
  %1247 = load i8, ptr %1245, align 1, !tbaa !6
  %1248 = and i8 %1247, 28
  %1249 = load ptr, ptr %59, align 8, !tbaa !53
  %1250 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1249)
  %1251 = icmp eq i8 %1248, 0
  br i1 %1251, label %1252, label %1268

1252:                                             ; preds = %1246
  %1253 = load ptr, ptr %59, align 8, !tbaa !53
  %1254 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1253)
  %1255 = load i8, ptr %1254, align 1, !tbaa !6
  %1256 = shl i8 %1255, 6
  %1257 = load ptr, ptr %59, align 8, !tbaa !53
  %1258 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1257)
  %1259 = getelementptr inbounds i8, ptr %1258, i64 1
  %1260 = load i8, ptr %1259, align 1, !tbaa !6
  %1261 = and i8 %1260, 63
  %1262 = or i8 %1261, %1256
  %1263 = zext i8 %1262 to i64
  %1264 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1263
  %1265 = load i32, ptr %1264, align 4, !tbaa !34
  %1266 = and i32 %1265, 1
  %1267 = icmp ne i32 %1266, 0
  br label %1268

1268:                                             ; preds = %1252, %1246
  %1269 = phi i1 [ false, %1246 ], [ %1267, %1252 ]
  %1270 = zext i1 %1269 to i64
  br label %1274

1271:                                             ; preds = %1238
  %1272 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef %1245) #12
  %1273 = zext i1 %1272 to i64
  br label %1274

1274:                                             ; preds = %1229, %1271, %1268, %1193
  %1275 = phi i64 [ 0, %1193 ], [ %1237, %1229 ], [ %1270, %1268 ], [ %1273, %1271 ]
  %1276 = icmp slt i32 %222, 0
  br i1 %1276, label %1310, label %1277

1277:                                             ; preds = %1274
  %1278 = load i8, ptr %214, align 1, !tbaa !6
  %1279 = icmp sgt i8 %1278, -1
  br i1 %1279, label %1280, label %1286

1280:                                             ; preds = %1277
  %1281 = zext i8 %1278 to i64
  %1282 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1281
  %1283 = load i32, ptr %1282, align 4, !tbaa !34
  %1284 = and i32 %1283, 1
  %1285 = zext i32 %1284 to i64
  br label %1310

1286:                                             ; preds = %1277
  %1287 = zext i8 %1278 to i32
  %1288 = and i32 %1287, 254
  %1289 = icmp eq i32 %1288, 194
  br i1 %1289, label %1290, label %1307

1290:                                             ; preds = %1286
  %1291 = and i32 %1287, 28
  %1292 = icmp eq i32 %1291, 0
  br i1 %1292, label %1293, label %1304

1293:                                             ; preds = %1290
  %1294 = shl i8 %1278, 6
  %1295 = getelementptr inbounds i8, ptr %214, i64 1
  %1296 = load i8, ptr %1295, align 1, !tbaa !6
  %1297 = and i8 %1296, 63
  %1298 = or i8 %1297, %1294
  %1299 = zext i8 %1298 to i64
  %1300 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1299
  %1301 = load i32, ptr %1300, align 4, !tbaa !34
  %1302 = and i32 %1301, 1
  %1303 = icmp ne i32 %1302, 0
  br label %1304

1304:                                             ; preds = %1293, %1290
  %1305 = phi i1 [ false, %1290 ], [ %1303, %1293 ]
  %1306 = zext i1 %1305 to i64
  br label %1310

1307:                                             ; preds = %1286
  %1308 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %214) #12
  %1309 = zext i1 %1308 to i64
  br label %1310

1310:                                             ; preds = %1280, %1307, %1304, %1274
  %1311 = phi i64 [ 0, %1274 ], [ %1285, %1280 ], [ %1306, %1304 ], [ %1309, %1307 ]
  %1312 = icmp ne i64 %1275, %1311
  %1313 = zext i1 %1312 to i8
  br label %1683

1314:                                             ; preds = %1189
  %1315 = load ptr, ptr %59, align 8, !tbaa !53
  %1316 = icmp eq ptr %214, %1315
  %1317 = icmp slt i32 %222, 0
  %1318 = select i1 %1316, i1 true, i1 %1317
  br i1 %1318, label %1683, label %1319

1319:                                             ; preds = %1314
  %1320 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !13
  %1321 = ptrtoint ptr %1315 to i64
  %1322 = icmp ugt ptr %214, %1315
  br i1 %1322, label %1323, label %1352

1323:                                             ; preds = %1319
  %1324 = ptrtoint ptr %214 to i64
  %1325 = getelementptr inbounds i8, ptr %214, i64 -1
  %1326 = load i8, ptr %1325, align 1, !tbaa !6
  %1327 = icmp sgt i8 %1326, -1
  br i1 %1327, label %1352, label %1328

1328:                                             ; preds = %1323
  %1329 = icmp ugt ptr %1325, %1315
  br i1 %1329, label %1330, label %1344

1330:                                             ; preds = %1328
  %1331 = getelementptr i8, ptr %214, i64 %1321
  %1332 = sub i64 0, %1324
  %1333 = getelementptr i8, ptr %1331, i64 %1332
  br label %1334

1334:                                             ; preds = %1339, %1330
  %1335 = phi ptr [ %1340, %1339 ], [ %1325, %1330 ]
  %1336 = load i8, ptr %1335, align 1, !tbaa !6
  %1337 = and i8 %1336, -64
  %1338 = icmp eq i8 %1337, -128
  br i1 %1338, label %1339, label %1344

1339:                                             ; preds = %1334
  %1340 = getelementptr inbounds i8, ptr %1335, i64 -1
  %1341 = icmp ugt ptr %1340, %1315
  br i1 %1341, label %1334, label %1342, !llvm.loop !127

1342:                                             ; preds = %1339
  %1343 = load i8, ptr %1333, align 1, !tbaa !6
  br label %1344

1344:                                             ; preds = %1334, %1342, %1328
  %1345 = phi ptr [ %1325, %1328 ], [ %1333, %1342 ], [ %1335, %1334 ]
  %1346 = phi i8 [ %1326, %1328 ], [ %1343, %1342 ], [ %1336, %1334 ]
  %1347 = icmp ugt i8 %1346, -63
  br i1 %1347, label %1352, label %1348

1348:                                             ; preds = %1344
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  %1349 = load ptr, ptr %58, align 8, !tbaa !56
  %1350 = load ptr, ptr %59, align 8, !tbaa !53
  %1351 = ptrtoint ptr %1350 to i64
  br label %1352

1352:                                             ; preds = %1323, %1344, %1348, %1319
  %1353 = phi i64 [ %1321, %1319 ], [ %1351, %1348 ], [ %1321, %1344 ], [ %1321, %1323 ]
  %1354 = phi ptr [ %1315, %1319 ], [ %1350, %1348 ], [ %1315, %1344 ], [ %1315, %1323 ]
  %1355 = phi ptr [ %1191, %1319 ], [ %1349, %1348 ], [ %1191, %1344 ], [ %1191, %1323 ]
  %1356 = phi ptr [ %214, %1319 ], [ %1345, %1348 ], [ %1345, %1344 ], [ %1325, %1323 ]
  %1357 = icmp ugt ptr %214, %1354
  %1358 = ptrtoint ptr %214 to i64
  br i1 %1357, label %1359, label %1387

1359:                                             ; preds = %1352
  %1360 = getelementptr inbounds i8, ptr %214, i64 -1
  %1361 = load i8, ptr %1360, align 1, !tbaa !6
  %1362 = icmp sgt i8 %1361, -1
  br i1 %1362, label %1384, label %1363

1363:                                             ; preds = %1359
  %1364 = icmp ugt ptr %1360, %1354
  br i1 %1364, label %1365, label %1379

1365:                                             ; preds = %1363
  %1366 = getelementptr i8, ptr %214, i64 %1353
  %1367 = sub i64 0, %1358
  %1368 = getelementptr i8, ptr %1366, i64 %1367
  br label %1369

1369:                                             ; preds = %1374, %1365
  %1370 = phi ptr [ %1375, %1374 ], [ %1360, %1365 ]
  %1371 = load i8, ptr %1370, align 1, !tbaa !6
  %1372 = and i8 %1371, -64
  %1373 = icmp eq i8 %1372, -128
  br i1 %1373, label %1374, label %1379

1374:                                             ; preds = %1369
  %1375 = getelementptr inbounds i8, ptr %1370, i64 -1
  %1376 = icmp ugt ptr %1375, %1354
  br i1 %1376, label %1369, label %1377, !llvm.loop !127

1377:                                             ; preds = %1374
  %1378 = load i8, ptr %1368, align 1, !tbaa !6
  br label %1379

1379:                                             ; preds = %1369, %1377, %1363
  %1380 = phi ptr [ %1360, %1363 ], [ %1368, %1377 ], [ %1370, %1369 ]
  %1381 = phi i8 [ %1361, %1363 ], [ %1378, %1377 ], [ %1371, %1369 ]
  %1382 = icmp ugt i8 %1381, -63
  br i1 %1382, label %1384, label %1383

1383:                                             ; preds = %1379
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1384

1384:                                             ; preds = %1383, %1379, %1359
  %1385 = phi ptr [ %1380, %1379 ], [ %1380, %1383 ], [ %1360, %1359 ]
  %1386 = ptrtoint ptr %1385 to i64
  br label %1387

1387:                                             ; preds = %1352, %1384
  %1388 = phi i64 [ %1386, %1384 ], [ %1358, %1352 ]
  %1389 = ptrtoint ptr %1355 to i64
  %1390 = sub i64 %1389, %1388
  %1391 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1392 = select i1 %1391, i32 0, i32 -8161
  %1393 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %1356, i64 noundef %1390, ptr noundef null, i32 noundef %1392) #12
  %1394 = call i64 @Perl__invlist_search(ptr noundef %1320, i64 noundef %1393) #12
  %1395 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1394
  %1396 = load i32, ptr %1395, align 4, !tbaa !6
  %1397 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !13
  %1398 = load ptr, ptr %58, align 8, !tbaa !56
  %1399 = ptrtoint ptr %1398 to i64
  %1400 = sub i64 %1399, %1358
  %1401 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1402 = select i1 %1401, i32 0, i32 -8161
  %1403 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1400, ptr noundef null, i32 noundef %1402) #12
  %1404 = call i64 @Perl__invlist_search(ptr noundef %1397, i64 noundef %1403) #12
  %1405 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1404
  %1406 = load i32, ptr %1405, align 4, !tbaa !6
  %1407 = call fastcc zeroext i1 @S_isGCB(i32 noundef %1396, i32 noundef %1406)
  %1408 = zext i1 %1407 to i8
  br label %1683

1409:                                             ; preds = %1189
  %1410 = load ptr, ptr %59, align 8, !tbaa !53
  %1411 = icmp eq ptr %214, %1410
  %1412 = icmp slt i32 %222, 0
  %1413 = select i1 %1411, i1 true, i1 %1412
  br i1 %1413, label %1683, label %1414

1414:                                             ; preds = %1409
  %1415 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %1416 = ptrtoint ptr %1410 to i64
  %1417 = icmp ugt ptr %214, %1410
  br i1 %1417, label %1418, label %1447

1418:                                             ; preds = %1414
  %1419 = ptrtoint ptr %214 to i64
  %1420 = getelementptr inbounds i8, ptr %214, i64 -1
  %1421 = load i8, ptr %1420, align 1, !tbaa !6
  %1422 = icmp sgt i8 %1421, -1
  br i1 %1422, label %1447, label %1423

1423:                                             ; preds = %1418
  %1424 = icmp ugt ptr %1420, %1410
  br i1 %1424, label %1425, label %1439

1425:                                             ; preds = %1423
  %1426 = getelementptr i8, ptr %214, i64 %1416
  %1427 = sub i64 0, %1419
  %1428 = getelementptr i8, ptr %1426, i64 %1427
  br label %1429

1429:                                             ; preds = %1434, %1425
  %1430 = phi ptr [ %1435, %1434 ], [ %1420, %1425 ]
  %1431 = load i8, ptr %1430, align 1, !tbaa !6
  %1432 = and i8 %1431, -64
  %1433 = icmp eq i8 %1432, -128
  br i1 %1433, label %1434, label %1439

1434:                                             ; preds = %1429
  %1435 = getelementptr inbounds i8, ptr %1430, i64 -1
  %1436 = icmp ugt ptr %1435, %1410
  br i1 %1436, label %1429, label %1437, !llvm.loop !127

1437:                                             ; preds = %1434
  %1438 = load i8, ptr %1428, align 1, !tbaa !6
  br label %1439

1439:                                             ; preds = %1429, %1437, %1423
  %1440 = phi ptr [ %1420, %1423 ], [ %1428, %1437 ], [ %1430, %1429 ]
  %1441 = phi i8 [ %1421, %1423 ], [ %1438, %1437 ], [ %1431, %1429 ]
  %1442 = icmp ugt i8 %1441, -63
  br i1 %1442, label %1447, label %1443

1443:                                             ; preds = %1439
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  %1444 = load ptr, ptr %58, align 8, !tbaa !56
  %1445 = load ptr, ptr %59, align 8, !tbaa !53
  %1446 = ptrtoint ptr %1445 to i64
  br label %1447

1447:                                             ; preds = %1418, %1439, %1443, %1414
  %1448 = phi i64 [ %1416, %1414 ], [ %1446, %1443 ], [ %1416, %1439 ], [ %1416, %1418 ]
  %1449 = phi ptr [ %1410, %1414 ], [ %1445, %1443 ], [ %1410, %1439 ], [ %1410, %1418 ]
  %1450 = phi ptr [ %1191, %1414 ], [ %1444, %1443 ], [ %1191, %1439 ], [ %1191, %1418 ]
  %1451 = phi ptr [ %214, %1414 ], [ %1440, %1443 ], [ %1440, %1439 ], [ %1420, %1418 ]
  %1452 = icmp ugt ptr %214, %1449
  %1453 = ptrtoint ptr %214 to i64
  br i1 %1452, label %1454, label %1482

1454:                                             ; preds = %1447
  %1455 = getelementptr inbounds i8, ptr %214, i64 -1
  %1456 = load i8, ptr %1455, align 1, !tbaa !6
  %1457 = icmp sgt i8 %1456, -1
  br i1 %1457, label %1479, label %1458

1458:                                             ; preds = %1454
  %1459 = icmp ugt ptr %1455, %1449
  br i1 %1459, label %1460, label %1474

1460:                                             ; preds = %1458
  %1461 = getelementptr i8, ptr %214, i64 %1448
  %1462 = sub i64 0, %1453
  %1463 = getelementptr i8, ptr %1461, i64 %1462
  br label %1464

1464:                                             ; preds = %1469, %1460
  %1465 = phi ptr [ %1470, %1469 ], [ %1455, %1460 ]
  %1466 = load i8, ptr %1465, align 1, !tbaa !6
  %1467 = and i8 %1466, -64
  %1468 = icmp eq i8 %1467, -128
  br i1 %1468, label %1469, label %1474

1469:                                             ; preds = %1464
  %1470 = getelementptr inbounds i8, ptr %1465, i64 -1
  %1471 = icmp ugt ptr %1470, %1449
  br i1 %1471, label %1464, label %1472, !llvm.loop !127

1472:                                             ; preds = %1469
  %1473 = load i8, ptr %1463, align 1, !tbaa !6
  br label %1474

1474:                                             ; preds = %1464, %1472, %1458
  %1475 = phi ptr [ %1455, %1458 ], [ %1463, %1472 ], [ %1465, %1464 ]
  %1476 = phi i8 [ %1456, %1458 ], [ %1473, %1472 ], [ %1466, %1464 ]
  %1477 = icmp ugt i8 %1476, -63
  br i1 %1477, label %1479, label %1478

1478:                                             ; preds = %1474
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1479

1479:                                             ; preds = %1478, %1474, %1454
  %1480 = phi ptr [ %1475, %1474 ], [ %1475, %1478 ], [ %1455, %1454 ]
  %1481 = ptrtoint ptr %1480 to i64
  br label %1482

1482:                                             ; preds = %1447, %1479
  %1483 = phi i64 [ %1481, %1479 ], [ %1453, %1447 ]
  %1484 = ptrtoint ptr %1450 to i64
  %1485 = sub i64 %1484, %1483
  %1486 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1487 = select i1 %1486, i32 0, i32 -8161
  %1488 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %1451, i64 noundef %1485, ptr noundef null, i32 noundef %1487) #12
  %1489 = call i64 @Perl__invlist_search(ptr noundef %1415, i64 noundef %1488) #12
  %1490 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1489
  %1491 = load i32, ptr %1490, align 4, !tbaa !6
  %1492 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %1493 = load ptr, ptr %58, align 8, !tbaa !56
  %1494 = ptrtoint ptr %1493 to i64
  %1495 = sub i64 %1494, %1453
  %1496 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1497 = select i1 %1496, i32 0, i32 -8161
  %1498 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1495, ptr noundef null, i32 noundef %1497) #12
  %1499 = call i64 @Perl__invlist_search(ptr noundef %1492, i64 noundef %1498) #12
  %1500 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1499
  %1501 = load i32, ptr %1500, align 4, !tbaa !6
  %1502 = load ptr, ptr %59, align 8, !tbaa !53
  %1503 = load ptr, ptr %58, align 8, !tbaa !56
  %1504 = call fastcc zeroext i1 @S_isSB(i32 noundef %1491, i32 noundef %1501, ptr noundef %1502, ptr noundef %214, ptr noundef %1503, i1 noundef zeroext %23)
  %1505 = zext i1 %1504 to i8
  br label %1683

1506:                                             ; preds = %1189
  %1507 = load ptr, ptr %59, align 8, !tbaa !53
  %1508 = icmp eq ptr %214, %1507
  %1509 = icmp slt i32 %222, 0
  %1510 = select i1 %1508, i1 true, i1 %1509
  br i1 %1510, label %1683, label %1511

1511:                                             ; preds = %1506
  %1512 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %1513 = ptrtoint ptr %1507 to i64
  %1514 = icmp ugt ptr %214, %1507
  br i1 %1514, label %1515, label %1544

1515:                                             ; preds = %1511
  %1516 = ptrtoint ptr %214 to i64
  %1517 = getelementptr inbounds i8, ptr %214, i64 -1
  %1518 = load i8, ptr %1517, align 1, !tbaa !6
  %1519 = icmp sgt i8 %1518, -1
  br i1 %1519, label %1544, label %1520

1520:                                             ; preds = %1515
  %1521 = icmp ugt ptr %1517, %1507
  br i1 %1521, label %1522, label %1536

1522:                                             ; preds = %1520
  %1523 = getelementptr i8, ptr %214, i64 %1513
  %1524 = sub i64 0, %1516
  %1525 = getelementptr i8, ptr %1523, i64 %1524
  br label %1526

1526:                                             ; preds = %1531, %1522
  %1527 = phi ptr [ %1532, %1531 ], [ %1517, %1522 ]
  %1528 = load i8, ptr %1527, align 1, !tbaa !6
  %1529 = and i8 %1528, -64
  %1530 = icmp eq i8 %1529, -128
  br i1 %1530, label %1531, label %1536

1531:                                             ; preds = %1526
  %1532 = getelementptr inbounds i8, ptr %1527, i64 -1
  %1533 = icmp ugt ptr %1532, %1507
  br i1 %1533, label %1526, label %1534, !llvm.loop !127

1534:                                             ; preds = %1531
  %1535 = load i8, ptr %1525, align 1, !tbaa !6
  br label %1536

1536:                                             ; preds = %1526, %1534, %1520
  %1537 = phi ptr [ %1517, %1520 ], [ %1525, %1534 ], [ %1527, %1526 ]
  %1538 = phi i8 [ %1518, %1520 ], [ %1535, %1534 ], [ %1528, %1526 ]
  %1539 = icmp ugt i8 %1538, -63
  br i1 %1539, label %1544, label %1540

1540:                                             ; preds = %1536
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  %1541 = load ptr, ptr %58, align 8, !tbaa !56
  %1542 = load ptr, ptr %59, align 8, !tbaa !53
  %1543 = ptrtoint ptr %1542 to i64
  br label %1544

1544:                                             ; preds = %1515, %1536, %1540, %1511
  %1545 = phi i64 [ %1513, %1511 ], [ %1543, %1540 ], [ %1513, %1536 ], [ %1513, %1515 ]
  %1546 = phi ptr [ %1507, %1511 ], [ %1542, %1540 ], [ %1507, %1536 ], [ %1507, %1515 ]
  %1547 = phi ptr [ %1191, %1511 ], [ %1541, %1540 ], [ %1191, %1536 ], [ %1191, %1515 ]
  %1548 = phi ptr [ %214, %1511 ], [ %1537, %1540 ], [ %1537, %1536 ], [ %1517, %1515 ]
  %1549 = icmp ugt ptr %214, %1546
  %1550 = ptrtoint ptr %214 to i64
  br i1 %1549, label %1551, label %1579

1551:                                             ; preds = %1544
  %1552 = getelementptr inbounds i8, ptr %214, i64 -1
  %1553 = load i8, ptr %1552, align 1, !tbaa !6
  %1554 = icmp sgt i8 %1553, -1
  br i1 %1554, label %1576, label %1555

1555:                                             ; preds = %1551
  %1556 = icmp ugt ptr %1552, %1546
  br i1 %1556, label %1557, label %1571

1557:                                             ; preds = %1555
  %1558 = getelementptr i8, ptr %214, i64 %1545
  %1559 = sub i64 0, %1550
  %1560 = getelementptr i8, ptr %1558, i64 %1559
  br label %1561

1561:                                             ; preds = %1566, %1557
  %1562 = phi ptr [ %1567, %1566 ], [ %1552, %1557 ]
  %1563 = load i8, ptr %1562, align 1, !tbaa !6
  %1564 = and i8 %1563, -64
  %1565 = icmp eq i8 %1564, -128
  br i1 %1565, label %1566, label %1571

1566:                                             ; preds = %1561
  %1567 = getelementptr inbounds i8, ptr %1562, i64 -1
  %1568 = icmp ugt ptr %1567, %1546
  br i1 %1568, label %1561, label %1569, !llvm.loop !127

1569:                                             ; preds = %1566
  %1570 = load i8, ptr %1560, align 1, !tbaa !6
  br label %1571

1571:                                             ; preds = %1561, %1569, %1555
  %1572 = phi ptr [ %1552, %1555 ], [ %1560, %1569 ], [ %1562, %1561 ]
  %1573 = phi i8 [ %1553, %1555 ], [ %1570, %1569 ], [ %1563, %1561 ]
  %1574 = icmp ugt i8 %1573, -63
  br i1 %1574, label %1576, label %1575

1575:                                             ; preds = %1571
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %1576

1576:                                             ; preds = %1575, %1571, %1551
  %1577 = phi ptr [ %1572, %1571 ], [ %1572, %1575 ], [ %1552, %1551 ]
  %1578 = ptrtoint ptr %1577 to i64
  br label %1579

1579:                                             ; preds = %1544, %1576
  %1580 = phi i64 [ %1578, %1576 ], [ %1550, %1544 ]
  %1581 = ptrtoint ptr %1547 to i64
  %1582 = sub i64 %1581, %1580
  %1583 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1584 = select i1 %1583, i32 0, i32 -8161
  %1585 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %1548, i64 noundef %1582, ptr noundef null, i32 noundef %1584) #12
  %1586 = call i64 @Perl__invlist_search(ptr noundef %1512, i64 noundef %1585) #12
  %1587 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1586
  %1588 = load i32, ptr %1587, align 4, !tbaa !6
  %1589 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %1590 = load ptr, ptr %58, align 8, !tbaa !56
  %1591 = ptrtoint ptr %1590 to i64
  %1592 = sub i64 %1591, %1550
  %1593 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1594 = select i1 %1593, i32 0, i32 -8161
  %1595 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1592, ptr noundef null, i32 noundef %1594) #12
  %1596 = call i64 @Perl__invlist_search(ptr noundef %1589, i64 noundef %1595) #12
  %1597 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1596
  %1598 = load i32, ptr %1597, align 4, !tbaa !6
  %1599 = load ptr, ptr %59, align 8, !tbaa !53
  %1600 = load ptr, ptr %58, align 8, !tbaa !56
  %1601 = call fastcc zeroext i1 @S_isWB(i32 noundef 18, i32 noundef %1588, i32 noundef %1598, ptr noundef %1599, ptr noundef %214, ptr noundef %1600, i1 noundef zeroext %23)
  %1602 = zext i1 %1601 to i8
  br label %1683

1603:                                             ; preds = %1187
  switch i8 %1188, label %1683 [
    i8 0, label %1604
    i8 1, label %1625
    i8 2, label %1639
    i8 3, label %1661
  ]

1604:                                             ; preds = %1603
  %1605 = icmp eq ptr %214, %1185
  br i1 %1605, label %1613, label %1606

1606:                                             ; preds = %1604
  %1607 = getelementptr inbounds i8, ptr %214, i64 -1
  %1608 = load i8, ptr %1607, align 1, !tbaa !6
  %1609 = zext i8 %1608 to i64
  %1610 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1609
  %1611 = load i32, ptr %1610, align 4, !tbaa !34
  %1612 = and i32 %1611, 1
  br label %1613

1613:                                             ; preds = %1604, %1606
  %1614 = phi i32 [ %1612, %1606 ], [ 0, %1604 ]
  %1615 = icmp slt i32 %222, 0
  br i1 %1615, label %1621, label %1616

1616:                                             ; preds = %1613
  %1617 = zext i32 %222 to i64
  %1618 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1617
  %1619 = load i32, ptr %1618, align 4, !tbaa !34
  %1620 = and i32 %1619, 1
  br label %1621

1621:                                             ; preds = %1613, %1616
  %1622 = phi i32 [ %1620, %1616 ], [ 0, %1613 ]
  %1623 = icmp ne i32 %1614, %1622
  %1624 = zext i1 %1623 to i8
  br label %1683

1625:                                             ; preds = %1603
  %1626 = icmp eq ptr %214, %1185
  %1627 = icmp slt i32 %222, 0
  %1628 = select i1 %1626, i1 true, i1 %1627
  br i1 %1628, label %1683, label %1629

1629:                                             ; preds = %1625
  %1630 = getelementptr inbounds i8, ptr %214, i64 -1
  %1631 = load i8, ptr %1630, align 1, !tbaa !6
  %1632 = icmp eq i8 %1631, 13
  br i1 %1632, label %1633, label %1636

1633:                                             ; preds = %1629
  %1634 = load i8, ptr %214, align 1, !tbaa !6
  %1635 = icmp ne i8 %1634, 10
  br label %1636

1636:                                             ; preds = %1633, %1629
  %1637 = phi i1 [ true, %1629 ], [ %1635, %1633 ]
  %1638 = zext i1 %1637 to i8
  br label %1683

1639:                                             ; preds = %1603
  %1640 = icmp eq ptr %214, %1185
  %1641 = icmp slt i32 %222, 0
  %1642 = select i1 %1640, i1 true, i1 %1641
  br i1 %1642, label %1683, label %1643

1643:                                             ; preds = %1639
  %1644 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %1645 = getelementptr inbounds i8, ptr %214, i64 -1
  %1646 = load i8, ptr %1645, align 1, !tbaa !6
  %1647 = zext i8 %1646 to i64
  %1648 = call i64 @Perl__invlist_search(ptr noundef %1644, i64 noundef %1647) #12
  %1649 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1648
  %1650 = load i32, ptr %1649, align 4, !tbaa !6
  %1651 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !13
  %1652 = load i8, ptr %214, align 1, !tbaa !6
  %1653 = zext i8 %1652 to i64
  %1654 = call i64 @Perl__invlist_search(ptr noundef %1651, i64 noundef %1653) #12
  %1655 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1654
  %1656 = load i32, ptr %1655, align 4, !tbaa !6
  %1657 = load ptr, ptr %59, align 8, !tbaa !53
  %1658 = load ptr, ptr %58, align 8, !tbaa !56
  %1659 = call fastcc zeroext i1 @S_isSB(i32 noundef %1650, i32 noundef %1656, ptr noundef %1657, ptr noundef nonnull %214, ptr noundef %1658, i1 noundef zeroext false)
  %1660 = zext i1 %1659 to i8
  br label %1683

1661:                                             ; preds = %1603
  %1662 = icmp eq ptr %214, %1185
  %1663 = icmp slt i32 %222, 0
  %1664 = select i1 %1662, i1 true, i1 %1663
  br i1 %1664, label %1683, label %1665

1665:                                             ; preds = %1661
  %1666 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %1667 = getelementptr inbounds i8, ptr %214, i64 -1
  %1668 = load i8, ptr %1667, align 1, !tbaa !6
  %1669 = zext i8 %1668 to i64
  %1670 = call i64 @Perl__invlist_search(ptr noundef %1666, i64 noundef %1669) #12
  %1671 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1670
  %1672 = load i32, ptr %1671, align 4, !tbaa !6
  %1673 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !13
  %1674 = load i8, ptr %214, align 1, !tbaa !6
  %1675 = zext i8 %1674 to i64
  %1676 = call i64 @Perl__invlist_search(ptr noundef %1673, i64 noundef %1675) #12
  %1677 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1676
  %1678 = load i32, ptr %1677, align 4, !tbaa !6
  %1679 = load ptr, ptr %59, align 8, !tbaa !53
  %1680 = load ptr, ptr %58, align 8, !tbaa !56
  %1681 = call fastcc zeroext i1 @S_isWB(i32 noundef 18, i32 noundef %1672, i32 noundef %1678, ptr noundef %1679, ptr noundef nonnull %214, ptr noundef %1680, i1 noundef zeroext false)
  %1682 = zext i1 %1681 to i8
  br label %1683

1683:                                             ; preds = %1661, %1639, %1625, %1506, %1409, %1314, %1182, %1579, %1482, %1387, %1189, %1310, %1665, %1643, %1636, %1603, %1621
  %1684 = phi i8 [ %168, %1189 ], [ %1602, %1579 ], [ %1505, %1482 ], [ %1408, %1387 ], [ %1313, %1310 ], [ %168, %1603 ], [ %1682, %1665 ], [ %1660, %1643 ], [ %1638, %1636 ], [ %1624, %1621 ], [ 0, %1182 ], [ 1, %1314 ], [ 1, %1409 ], [ 1, %1506 ], [ 1, %1625 ], [ 1, %1639 ], [ 1, %1661 ]
  %1685 = phi i32 [ %1192, %1189 ], [ %1192, %1579 ], [ %1192, %1482 ], [ %1192, %1387 ], [ %1192, %1310 ], [ %1184, %1603 ], [ %1184, %1665 ], [ %1184, %1643 ], [ %1184, %1636 ], [ %1184, %1621 ], [ %1184, %1182 ], [ %1192, %1314 ], [ %1192, %1409 ], [ %1192, %1506 ], [ %1184, %1625 ], [ %1184, %1639 ], [ %1184, %1661 ]
  %1686 = and i8 %1684, 1
  %1687 = icmp eq i8 %1686, 0
  %1688 = zext i1 %1687 to i32
  %1689 = icmp eq i32 %1685, %1688
  br i1 %1689, label %4876, label %5080

1690:                                             ; preds = %221, %221
  %1691 = icmp slt i32 %222, 0
  br i1 %1691, label %5080, label %1692

1692:                                             ; preds = %1690
  br i1 %23, label %1693, label %1702

1693:                                             ; preds = %1692
  %1694 = call fastcc zeroext i1 @S_reginclass(ptr noundef %190, ptr noundef %215, ptr noundef %214, ptr noundef %216, i1 noundef zeroext true)
  br i1 %1694, label %1695, label %5080

1695:                                             ; preds = %1693
  %1696 = load i8, ptr %214, align 1, !tbaa !6
  %1697 = zext i8 %1696 to i64
  %1698 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1697
  %1699 = load i8, ptr %1698, align 1, !tbaa !6
  %1700 = zext i8 %1699 to i64
  %1701 = getelementptr inbounds i8, ptr %214, i64 %1700
  br label %4876

1702:                                             ; preds = %1692
  %1703 = load i8, ptr %215, align 2, !tbaa !139
  %1704 = icmp eq i8 %1703, 0
  br i1 %1704, label %1708, label %1705

1705:                                             ; preds = %1702
  %1706 = getelementptr inbounds i8, ptr %214, i64 1
  %1707 = call fastcc zeroext i1 @S_reginclass(ptr noundef %190, ptr noundef nonnull %215, ptr noundef %214, ptr noundef nonnull %1706, i1 noundef zeroext false)
  br i1 %1707, label %1720, label %5080

1708:                                             ; preds = %1702
  %1709 = load i8, ptr %214, align 1, !tbaa !6
  %1710 = zext i8 %1709 to i32
  %1711 = lshr i32 %1710, 3
  %1712 = zext i32 %1711 to i64
  %1713 = getelementptr inbounds %struct.regnode_charclass, ptr %215, i64 0, i32 4, i64 %1712
  %1714 = load i8, ptr %1713, align 1, !tbaa !6
  %1715 = zext i8 %1714 to i32
  %1716 = and i32 %1710, 7
  %1717 = shl nuw nsw i32 1, %1716
  %1718 = and i32 %1717, %1715
  %1719 = icmp eq i32 %1718, 0
  br i1 %1719, label %5080, label %1720

1720:                                             ; preds = %1708, %1705
  %1721 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4876

1722:                                             ; preds = %221
  br label %1723

1723:                                             ; preds = %221, %1722
  %1724 = phi i32 [ 0, %1722 ], [ 1, %221 ]
  %1725 = icmp slt i32 %222, 0
  br i1 %1725, label %5080, label %1726

1726:                                             ; preds = %1723
  %1727 = icmp ugt i32 %222, 127
  %1728 = and i1 %23, %1727
  br i1 %1728, label %1735, label %1729

1729:                                             ; preds = %1726
  %1730 = load i8, ptr %215, align 2, !tbaa !139
  %1731 = trunc i32 %222 to i8
  %1732 = call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %1730, i8 noundef zeroext %1731)
  %1733 = zext i1 %1732 to i32
  %1734 = icmp eq i32 %1724, %1733
  br i1 %1734, label %5080, label %1749

1735:                                             ; preds = %1726
  %1736 = and i32 %222, 254
  %1737 = icmp eq i32 %1736, 194
  br i1 %1737, label %1738, label %1826

1738:                                             ; preds = %1735
  %1739 = load i8, ptr %215, align 2, !tbaa !139
  %1740 = getelementptr inbounds i8, ptr %214, i64 1
  %1741 = load i8, ptr %1740, align 1, !tbaa !6
  %1742 = and i8 %1741, 63
  %1743 = trunc i32 %222 to i8
  %1744 = shl i8 %1743, 6
  %1745 = or i8 %1742, %1744
  %1746 = call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %1739, i8 noundef zeroext %1745)
  %1747 = zext i1 %1746 to i32
  %1748 = icmp eq i32 %1724, %1747
  br i1 %1748, label %5080, label %1749

1749:                                             ; preds = %1738, %1729
  %1750 = load i8, ptr %214, align 1, !tbaa !6
  %1751 = zext i8 %1750 to i64
  %1752 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1751
  %1753 = load i8, ptr %1752, align 1, !tbaa !6
  %1754 = zext i8 %1753 to i64
  %1755 = getelementptr inbounds i8, ptr %214, i64 %1754
  br label %4876

1756:                                             ; preds = %221
  br label %1757

1757:                                             ; preds = %221, %1756
  %1758 = phi i32 [ 0, %1756 ], [ 1, %221 ]
  br i1 %23, label %1782, label %1763

1759:                                             ; preds = %221
  %1760 = icmp slt i32 %222, 0
  br i1 %1760, label %5080, label %1761

1761:                                             ; preds = %1759
  %1762 = icmp ult i32 %222, 128
  br i1 %1762, label %1766, label %4863

1763:                                             ; preds = %221, %1757
  %1764 = phi i32 [ %1758, %1757 ], [ 0, %221 ]
  %1765 = icmp slt i32 %222, 0
  br i1 %1765, label %5080, label %1766

1766:                                             ; preds = %1761, %1763
  %1767 = phi i32 [ %1764, %1763 ], [ 1, %1761 ]
  %1768 = zext i32 %222 to i64
  %1769 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1768
  %1770 = load i32, ptr %1769, align 4, !tbaa !34
  %1771 = load i8, ptr %215, align 2, !tbaa !139
  %1772 = zext i8 %1771 to i32
  %1773 = shl nuw i32 1, %1772
  %1774 = or i32 %1773, 16384
  %1775 = and i32 %1774, %1770
  %1776 = icmp eq i32 %1775, %1774
  %1777 = zext i1 %1776 to i32
  %1778 = icmp eq i32 %1767, %1777
  br i1 %1778, label %5080, label %1779

1779:                                             ; preds = %1766
  %1780 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4876

1781:                                             ; preds = %221
  br label %1782

1782:                                             ; preds = %221, %1781, %1757
  %1783 = phi i32 [ %1758, %1757 ], [ 0, %1781 ], [ 1, %221 ]
  %1784 = icmp slt i32 %222, 0
  br i1 %1784, label %5080, label %1785

1785:                                             ; preds = %1782
  %1786 = icmp ugt i32 %222, 127
  %1787 = and i1 %23, %1786
  br i1 %1787, label %1799, label %1788

1788:                                             ; preds = %1785
  %1789 = zext i32 %222 to i64
  %1790 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1789
  %1791 = load i32, ptr %1790, align 4, !tbaa !34
  %1792 = load i8, ptr %215, align 2, !tbaa !139
  %1793 = zext i8 %1792 to i32
  %1794 = lshr i32 %1791, %1793
  %1795 = and i32 %1794, 1
  %1796 = icmp eq i32 %1783, %1795
  br i1 %1796, label %5080, label %1797

1797:                                             ; preds = %1788
  %1798 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4876

1799:                                             ; preds = %1785
  %1800 = and i32 %222, 254
  %1801 = icmp eq i32 %1800, 194
  br i1 %1801, label %1802, label %1826

1802:                                             ; preds = %1799
  %1803 = and i32 %222, 28
  %1804 = icmp eq i32 %1803, 0
  br i1 %1804, label %1805, label %1820

1805:                                             ; preds = %1802
  %1806 = getelementptr inbounds i8, ptr %214, i64 1
  %1807 = load i8, ptr %1806, align 1, !tbaa !6
  %1808 = and i8 %1807, 63
  %1809 = trunc i32 %222 to i8
  %1810 = shl i8 %1809, 6
  %1811 = or i8 %1808, %1810
  %1812 = zext i8 %1811 to i64
  %1813 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1812
  %1814 = load i32, ptr %1813, align 4, !tbaa !34
  %1815 = load i8, ptr %215, align 2, !tbaa !139
  %1816 = zext i8 %1815 to i32
  %1817 = shl nuw i32 1, %1816
  %1818 = and i32 %1817, %1814
  %1819 = icmp ne i32 %1818, 0
  br label %1820

1820:                                             ; preds = %1805, %1802
  %1821 = phi i1 [ false, %1802 ], [ %1819, %1805 ]
  %1822 = zext i1 %1821 to i32
  %1823 = icmp eq i32 %1783, %1822
  br i1 %1823, label %5080, label %1824

1824:                                             ; preds = %1820
  %1825 = getelementptr inbounds i8, ptr %214, i64 2
  br label %4876

1826:                                             ; preds = %1799, %1735
  %1827 = phi i32 [ %1783, %1799 ], [ %1724, %1735 ]
  %1828 = load i8, ptr %215, align 2, !tbaa !139
  %1829 = icmp ult i8 %1828, 10
  br i1 %1829, label %1830, label %1845

1830:                                             ; preds = %1826
  %1831 = zext i8 %1828 to i64
  %1832 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %1831
  %1833 = load ptr, ptr %1832, align 8, !tbaa !13
  %1834 = icmp eq ptr %1833, null
  br i1 %1834, label %1835, label %1839

1835:                                             ; preds = %1830
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %13) #12
  store i8 4, ptr %13, align 1, !tbaa !6
  %1836 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %1831
  %1837 = load ptr, ptr %1836, align 8, !tbaa !13
  %1838 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1837, ptr noundef nonnull %13) #12
  store ptr %1838, ptr %1832, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %13) #12
  br label %1839

1839:                                             ; preds = %1835, %1830
  %1840 = phi ptr [ %1838, %1835 ], [ %1833, %1830 ]
  %1841 = call i64 @Perl_swash_fetch(ptr noundef %1840, ptr noundef %214, i1 noundef zeroext true) #12
  %1842 = icmp ne i64 %1841, 0
  %1843 = zext i1 %1842 to i32
  %1844 = icmp eq i32 %1827, %1843
  br i1 %1844, label %5080, label %1960

1845:                                             ; preds = %1826
  switch i8 %1828, label %1958 [
    i8 10, label %1846
    i8 11, label %1884
    i8 12, label %1919
    i8 15, label %1942
  ]

1846:                                             ; preds = %1845
  %1847 = load i8, ptr %214, align 1, !tbaa !6
  switch i8 %1847, label %1880 [
    i8 -31, label %1848
    i8 -30, label %1856
    i8 -29, label %1872
  ]

1848:                                             ; preds = %1846
  %1849 = getelementptr inbounds i8, ptr %214, i64 1
  %1850 = load i8, ptr %1849, align 1, !tbaa !6
  %1851 = icmp eq i8 %1850, -102
  br i1 %1851, label %1852, label %1880

1852:                                             ; preds = %1848
  %1853 = getelementptr inbounds i8, ptr %214, i64 2
  %1854 = load i8, ptr %1853, align 1, !tbaa !6
  %1855 = icmp eq i8 %1854, -128
  br label %1880

1856:                                             ; preds = %1846
  %1857 = getelementptr inbounds i8, ptr %214, i64 1
  %1858 = load i8, ptr %1857, align 1, !tbaa !6
  switch i8 %1858, label %1880 [
    i8 -128, label %1859
    i8 -127, label %1868
  ]

1859:                                             ; preds = %1856
  %1860 = getelementptr inbounds i8, ptr %214, i64 2
  %1861 = load i8, ptr %1860, align 1, !tbaa !6
  %1862 = icmp ult i8 %1861, -117
  %1863 = and i8 %1861, -2
  %1864 = icmp eq i8 %1863, -88
  %1865 = or i1 %1862, %1864
  %1866 = icmp eq i8 %1861, -81
  %1867 = or i1 %1866, %1865
  br label %1880

1868:                                             ; preds = %1856
  %1869 = getelementptr inbounds i8, ptr %214, i64 2
  %1870 = load i8, ptr %1869, align 1, !tbaa !6
  %1871 = icmp eq i8 %1870, -97
  br label %1880

1872:                                             ; preds = %1846
  %1873 = getelementptr inbounds i8, ptr %214, i64 1
  %1874 = load i8, ptr %1873, align 1, !tbaa !6
  %1875 = icmp eq i8 %1874, -128
  br i1 %1875, label %1876, label %1880

1876:                                             ; preds = %1872
  %1877 = getelementptr inbounds i8, ptr %214, i64 2
  %1878 = load i8, ptr %1877, align 1, !tbaa !6
  %1879 = icmp eq i8 %1878, -128
  br label %1880

1880:                                             ; preds = %1859, %1872, %1876, %1846, %1868, %1856, %1848, %1852
  %1881 = phi i1 [ false, %1848 ], [ %1855, %1852 ], [ %1871, %1868 ], [ false, %1856 ], [ false, %1872 ], [ %1879, %1876 ], [ false, %1846 ], [ %1867, %1859 ]
  %1882 = zext i1 %1881 to i32
  %1883 = icmp eq i32 %1827, %1882
  br i1 %1883, label %5080, label %1960

1884:                                             ; preds = %1845
  %1885 = load i8, ptr %214, align 1, !tbaa !6
  switch i8 %1885, label %1915 [
    i8 -31, label %1886
    i8 -30, label %1894
    i8 -29, label %1907
  ]

1886:                                             ; preds = %1884
  %1887 = getelementptr inbounds i8, ptr %214, i64 1
  %1888 = load i8, ptr %1887, align 1, !tbaa !6
  %1889 = icmp eq i8 %1888, -102
  br i1 %1889, label %1890, label %1915

1890:                                             ; preds = %1886
  %1891 = getelementptr inbounds i8, ptr %214, i64 2
  %1892 = load i8, ptr %1891, align 1, !tbaa !6
  %1893 = icmp eq i8 %1892, -128
  br label %1915

1894:                                             ; preds = %1884
  %1895 = getelementptr inbounds i8, ptr %214, i64 1
  %1896 = load i8, ptr %1895, align 1, !tbaa !6
  switch i8 %1896, label %1915 [
    i8 -128, label %1897
    i8 -127, label %1903
  ]

1897:                                             ; preds = %1894
  %1898 = getelementptr inbounds i8, ptr %214, i64 2
  %1899 = load i8, ptr %1898, align 1, !tbaa !6
  %1900 = icmp ult i8 %1899, -117
  %1901 = icmp eq i8 %1899, -81
  %1902 = or i1 %1900, %1901
  br label %1915

1903:                                             ; preds = %1894
  %1904 = getelementptr inbounds i8, ptr %214, i64 2
  %1905 = load i8, ptr %1904, align 1, !tbaa !6
  %1906 = icmp eq i8 %1905, -97
  br label %1915

1907:                                             ; preds = %1884
  %1908 = getelementptr inbounds i8, ptr %214, i64 1
  %1909 = load i8, ptr %1908, align 1, !tbaa !6
  %1910 = icmp eq i8 %1909, -128
  br i1 %1910, label %1911, label %1915

1911:                                             ; preds = %1907
  %1912 = getelementptr inbounds i8, ptr %214, i64 2
  %1913 = load i8, ptr %1912, align 1, !tbaa !6
  %1914 = icmp eq i8 %1913, -128
  br label %1915

1915:                                             ; preds = %1907, %1911, %1884, %1903, %1894, %1886, %1890, %1897
  %1916 = phi i1 [ %1902, %1897 ], [ false, %1886 ], [ %1893, %1890 ], [ %1906, %1903 ], [ false, %1894 ], [ false, %1907 ], [ %1914, %1911 ], [ false, %1884 ]
  %1917 = zext i1 %1916 to i32
  %1918 = icmp eq i32 %1827, %1917
  br i1 %1918, label %5080, label %1960

1919:                                             ; preds = %1845
  %1920 = load i8, ptr %214, align 1, !tbaa !6
  %1921 = icmp eq i8 %1920, -17
  br i1 %1921, label %1922, label %1938

1922:                                             ; preds = %1919
  %1923 = getelementptr inbounds i8, ptr %214, i64 1
  %1924 = load i8, ptr %1923, align 1, !tbaa !6
  switch i8 %1924, label %1938 [
    i8 -68, label %1925
    i8 -67, label %1933
  ]

1925:                                             ; preds = %1922
  %1926 = getelementptr inbounds i8, ptr %214, i64 2
  %1927 = load i8, ptr %1926, align 1, !tbaa !6
  %1928 = add i8 %1927, 112
  %1929 = icmp ult i8 %1928, 10
  br i1 %1929, label %1938, label %1930

1930:                                             ; preds = %1925
  %1931 = add i8 %1927, 95
  %1932 = icmp ult i8 %1931, 6
  br label %1938

1933:                                             ; preds = %1922
  %1934 = getelementptr inbounds i8, ptr %214, i64 2
  %1935 = load i8, ptr %1934, align 1, !tbaa !6
  %1936 = add i8 %1935, 127
  %1937 = icmp ult i8 %1936, 6
  br label %1938

1938:                                             ; preds = %1933, %1930, %1922, %1925, %1919
  %1939 = phi i1 [ false, %1919 ], [ true, %1925 ], [ %1932, %1930 ], [ false, %1922 ], [ %1937, %1933 ]
  %1940 = zext i1 %1939 to i32
  %1941 = icmp eq i32 %1827, %1940
  br i1 %1941, label %5080, label %1960

1942:                                             ; preds = %1845
  %1943 = load i8, ptr %214, align 1, !tbaa !6
  %1944 = icmp eq i8 %1943, -30
  br i1 %1944, label %1945, label %1954

1945:                                             ; preds = %1942
  %1946 = getelementptr inbounds i8, ptr %214, i64 1
  %1947 = load i8, ptr %1946, align 1, !tbaa !6
  %1948 = icmp eq i8 %1947, -128
  br i1 %1948, label %1949, label %1954

1949:                                             ; preds = %1945
  %1950 = getelementptr inbounds i8, ptr %214, i64 2
  %1951 = load i8, ptr %1950, align 1, !tbaa !6
  %1952 = and i8 %1951, -2
  %1953 = icmp eq i8 %1952, -88
  br label %1954

1954:                                             ; preds = %1949, %1945, %1942
  %1955 = phi i1 [ false, %1945 ], [ false, %1942 ], [ %1953, %1949 ]
  %1956 = zext i1 %1955 to i32
  %1957 = icmp eq i32 %1827, %1956
  br i1 %1957, label %5080, label %1960

1958:                                             ; preds = %1845
  %1959 = icmp eq i32 %1827, 0
  br i1 %1959, label %5080, label %1960

1960:                                             ; preds = %1880, %1915, %1938, %1954, %1958, %1839
  %1961 = load i8, ptr %214, align 1, !tbaa !6
  %1962 = zext i8 %1961 to i64
  %1963 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1962
  %1964 = load i8, ptr %1963, align 1, !tbaa !6
  %1965 = zext i8 %1964 to i64
  %1966 = getelementptr inbounds i8, ptr %214, i64 %1965
  br label %4876

1967:                                             ; preds = %221
  %1968 = icmp slt i32 %222, 0
  br i1 %1968, label %5080, label %1969

1969:                                             ; preds = %1967
  br i1 %23, label %1980, label %1970

1970:                                             ; preds = %1969
  %1971 = getelementptr inbounds i8, ptr %214, i64 1
  %1972 = icmp eq i32 %222, 13
  %1973 = icmp ult ptr %1971, %216
  %1974 = select i1 %1972, i1 %1973, i1 false
  br i1 %1974, label %1975, label %4876

1975:                                             ; preds = %1970
  %1976 = load i8, ptr %1971, align 1, !tbaa !6
  %1977 = icmp eq i8 %1976, 10
  %1978 = getelementptr inbounds i8, ptr %214, i64 2
  %1979 = select i1 %1977, ptr %1978, ptr %1971
  br label %4876

1980:                                             ; preds = %1969
  %1981 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !13
  %1982 = ptrtoint ptr %216 to i64
  %1983 = ptrtoint ptr %214 to i64
  %1984 = sub i64 %1982, %1983
  %1985 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1986 = select i1 %1985, i32 0, i32 -8161
  %1987 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1984, ptr noundef null, i32 noundef %1986) #12
  %1988 = call i64 @Perl__invlist_search(ptr noundef %1981, i64 noundef %1987) #12
  %1989 = load i8, ptr %214, align 1, !tbaa !6
  %1990 = zext i8 %1989 to i64
  %1991 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1990
  %1992 = load i8, ptr %1991, align 1, !tbaa !6
  %1993 = zext i8 %1992 to i64
  %1994 = getelementptr inbounds i8, ptr %214, i64 %1993
  %1995 = load ptr, ptr %58, align 8, !tbaa !56
  %1996 = icmp ult ptr %1994, %1995
  br i1 %1996, label %1997, label %4876

1997:                                             ; preds = %1980
  %1998 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1988
  %1999 = load i32, ptr %1998, align 4, !tbaa !6
  br label %2000

2000:                                             ; preds = %1997, %2015
  %2001 = phi ptr [ %2022, %2015 ], [ %1995, %1997 ]
  %2002 = phi ptr [ %2021, %2015 ], [ %1994, %1997 ]
  %2003 = phi i32 [ %2013, %2015 ], [ %1999, %1997 ]
  %2004 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !13
  %2005 = ptrtoint ptr %2001 to i64
  %2006 = ptrtoint ptr %2002 to i64
  %2007 = sub i64 %2005, %2006
  %2008 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %2009 = select i1 %2008, i32 0, i32 -8161
  %2010 = call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %2002, i64 noundef %2007, ptr noundef null, i32 noundef %2009) #12
  %2011 = call i64 @Perl__invlist_search(ptr noundef %2004, i64 noundef %2010) #12
  %2012 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %2011
  %2013 = load i32, ptr %2012, align 4, !tbaa !6
  %2014 = call fastcc zeroext i1 @S_isGCB(i32 noundef %2003, i32 noundef %2013)
  br i1 %2014, label %4876, label %2015

2015:                                             ; preds = %2000
  %2016 = load i8, ptr %2002, align 1, !tbaa !6
  %2017 = zext i8 %2016 to i64
  %2018 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2017
  %2019 = load i8, ptr %2018, align 1, !tbaa !6
  %2020 = zext i8 %2019 to i64
  %2021 = getelementptr inbounds i8, ptr %2002, i64 %2020
  %2022 = load ptr, ptr %58, align 8, !tbaa !56
  %2023 = icmp ult ptr %2021, %2022
  br i1 %2023, label %2000, label %4876

2024:                                             ; preds = %221
  br label %2028

2025:                                             ; preds = %221
  br label %2028

2026:                                             ; preds = %221
  br label %2028

2027:                                             ; preds = %221
  br label %2028

2028:                                             ; preds = %221, %2027, %2026, %2025, %2024
  %2029 = phi i8 [ 55, %2024 ], [ 54, %2025 ], [ 52, %2026 ], [ 51, %2027 ], [ 53, %221 ]
  %2030 = phi ptr [ @Perl_foldEQ_latin1, %2024 ], [ @Perl_foldEQ_latin1, %2025 ], [ @Perl_foldEQ, %2026 ], [ null, %2027 ], [ @Perl_foldEQ_locale, %221 ]
  %2031 = phi ptr [ @PL_fold_latin1, %2024 ], [ @PL_fold_latin1, %2025 ], [ @PL_fold, %2026 ], [ null, %2027 ], [ @PL_fold_locale, %221 ]
  %2032 = phi i32 [ 1, %2024 ], [ 0, %2025 ], [ 0, %2026 ], [ 0, %2027 ], [ 2, %221 ]
  %2033 = getelementptr i8, ptr %215, i64 4
  %2034 = load i32, ptr %2033, align 4, !tbaa !224
  %2035 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 14
  %2036 = load ptr, ptr %2035, align 8, !tbaa !17
  %2037 = getelementptr inbounds %struct.regexp_internal, ptr %2036, i64 0, i32 3
  %2038 = load ptr, ptr %2037, align 8, !tbaa !223
  %2039 = zext i32 %2034 to i64
  %2040 = getelementptr inbounds %struct.reg_data, ptr %2038, i64 0, i32 2, i64 %2039
  %2041 = load ptr, ptr %2040, align 8, !tbaa !13
  %2042 = getelementptr inbounds %struct.sv, ptr %2041, i64 0, i32 3
  %2043 = load ptr, ptr %2042, align 8, !tbaa !6
  %2044 = load ptr, ptr %2041, align 8, !tbaa !24
  %2045 = getelementptr inbounds %struct.xpviv, ptr %2044, i64 0, i32 4
  %2046 = load i64, ptr %2045, align 8, !tbaa !6
  %2047 = icmp sgt i64 %2046, 0
  br i1 %2047, label %2048, label %2064

2048:                                             ; preds = %2028
  %2049 = load i32, ptr %193, align 8, !tbaa !37
  br label %2050

2050:                                             ; preds = %2061, %2048
  %2051 = phi i64 [ 0, %2048 ], [ %2062, %2061 ]
  %2052 = getelementptr inbounds i32, ptr %2043, i64 %2051
  %2053 = load i32, ptr %2052, align 4, !tbaa !34
  %2054 = icmp slt i32 %2049, %2053
  br i1 %2054, label %2061, label %2055

2055:                                             ; preds = %2050
  %2056 = load ptr, ptr %195, align 8, !tbaa !38
  %2057 = sext i32 %2053 to i64
  %2058 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2056, i64 %2057, i32 1
  %2059 = load i64, ptr %2058, align 8, !tbaa !42
  %2060 = icmp eq i64 %2059, -1
  br i1 %2060, label %2061, label %2064

2061:                                             ; preds = %2055, %2050
  %2062 = add nuw nsw i64 %2051, 1
  %2063 = icmp eq i64 %2062, %2046
  br i1 %2063, label %2064, label %2050, !llvm.loop !292

2064:                                             ; preds = %2055, %2061, %2028
  %2065 = phi i32 [ 0, %2028 ], [ %2053, %2055 ], [ 0, %2061 ]
  %2066 = icmp eq i32 %2065, 0
  br i1 %2066, label %5080, label %2079

2067:                                             ; preds = %221
  br label %2071

2068:                                             ; preds = %221
  br label %2071

2069:                                             ; preds = %221
  br label %2071

2070:                                             ; preds = %221
  br label %2071

2071:                                             ; preds = %221, %2070, %2069, %2068, %2067
  %2072 = phi ptr [ @Perl_foldEQ_latin1, %2067 ], [ @Perl_foldEQ_latin1, %2068 ], [ @Perl_foldEQ, %2069 ], [ null, %2070 ], [ @Perl_foldEQ_locale, %221 ]
  %2073 = phi ptr [ @PL_fold_latin1, %2067 ], [ @PL_fold_latin1, %2068 ], [ @PL_fold, %2069 ], [ null, %2070 ], [ @PL_fold_locale, %221 ]
  %2074 = phi i32 [ 1, %2067 ], [ 0, %2068 ], [ 0, %2069 ], [ 0, %2070 ], [ 2, %221 ]
  %2075 = getelementptr inbounds %struct.regnode, ptr %215, i64 0, i32 1
  %2076 = load i8, ptr %2075, align 1, !tbaa !119
  %2077 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2078 = load i32, ptr %2077, align 4, !tbaa !224
  br label %2079

2079:                                             ; preds = %2064, %2071
  %2080 = phi i8 [ %2076, %2071 ], [ %2029, %2064 ]
  %2081 = phi ptr [ %2072, %2071 ], [ %2030, %2064 ]
  %2082 = phi ptr [ %2073, %2071 ], [ %2031, %2064 ]
  %2083 = phi i32 [ %2074, %2071 ], [ %2032, %2064 ]
  %2084 = phi i32 [ %2078, %2071 ], [ %2065, %2064 ]
  %2085 = load ptr, ptr %195, align 8, !tbaa !38
  %2086 = zext i32 %2084 to i64
  %2087 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2085, i64 %2086
  %2088 = load i64, ptr %2087, align 8, !tbaa !39
  %2089 = load i32, ptr %63, align 8, !tbaa !55
  store i32 %2089, ptr %64, align 4, !tbaa !293
  %2090 = load i32, ptr %193, align 8, !tbaa !37
  %2091 = icmp ult i32 %2090, %2084
  %2092 = icmp eq i64 %2088, -1
  %2093 = select i1 %2091, i1 true, i1 %2092
  br i1 %2093, label %5080, label %2094

2094:                                             ; preds = %2079
  %2095 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2085, i64 %2086, i32 1
  %2096 = load i64, ptr %2095, align 8, !tbaa !42
  %2097 = icmp eq i64 %2088, %2096
  br i1 %2097, label %4876, label %2098

2098:                                             ; preds = %2094
  %2099 = load ptr, ptr %59, align 8, !tbaa !53
  %2100 = getelementptr inbounds i8, ptr %2099, i64 %2088
  %2101 = icmp eq i8 %2080, 51
  br i1 %2101, label %2111, label %2102

2102:                                             ; preds = %2098
  %2103 = add i8 %2080, -53
  %2104 = icmp ult i8 %2103, 2
  %2105 = select i1 %23, i1 true, i1 %2104
  br i1 %2105, label %2106, label %2111

2106:                                             ; preds = %2102
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #12
  store ptr %216, ptr %14, align 8, !tbaa !13
  %2107 = sub nsw i64 %2096, %2088
  %2108 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef %2100, ptr noundef null, i64 noundef %2107, i1 noundef zeroext %23, ptr noundef %214, ptr noundef nonnull %14, i64 noundef 0, i1 noundef zeroext %23, i32 noundef %2083) #12
  %2109 = icmp eq i32 %2108, 0
  %2110 = load ptr, ptr %14, align 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #12
  br i1 %2109, label %5080, label %4876

2111:                                             ; preds = %2102, %2098
  %2112 = icmp slt i32 %222, 0
  br i1 %2112, label %2123, label %2113

2113:                                             ; preds = %2111
  %2114 = load i8, ptr %2100, align 1, !tbaa !6
  %2115 = zext i8 %2114 to i32
  %2116 = icmp eq i32 %222, %2115
  br i1 %2116, label %2123, label %2117

2117:                                             ; preds = %2113
  br i1 %2101, label %5080, label %2118

2118:                                             ; preds = %2117
  %2119 = zext i32 %222 to i64
  %2120 = getelementptr inbounds i8, ptr %2082, i64 %2119
  %2121 = load i8, ptr %2120, align 1, !tbaa !6
  %2122 = icmp eq i8 %2114, %2121
  br i1 %2122, label %2123, label %5080

2123:                                             ; preds = %2118, %2113, %2111
  %2124 = sub nsw i64 %2096, %2088
  %2125 = getelementptr inbounds i8, ptr %214, i64 %2124
  %2126 = icmp ugt ptr %2125, %216
  br i1 %2126, label %5080, label %2127

2127:                                             ; preds = %2123
  %2128 = icmp sgt i64 %2124, 1
  br i1 %2128, label %2129, label %4876

2129:                                             ; preds = %2127
  br i1 %2101, label %2130, label %2133

2130:                                             ; preds = %2129
  %2131 = call i32 @bcmp(ptr %2100, ptr %214, i64 %2124)
  %2132 = icmp eq i32 %2131, 0
  br i1 %2132, label %4876, label %5080

2133:                                             ; preds = %2129
  %2134 = trunc i64 %2124 to i32
  %2135 = call i32 %2081(ptr noundef %2100, ptr noundef %214, i32 noundef %2134) #12, !callees !144
  %2136 = icmp eq i32 %2135, 0
  br i1 %2136, label %5080, label %4876

2137:                                             ; preds = %221, %221
  br i1 %202, label %2152, label %2138

2138:                                             ; preds = %2137
  %2139 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 1
  %2140 = load ptr, ptr %2139, align 8, !tbaa !294
  %2141 = icmp eq ptr %2140, %214
  br i1 %2141, label %2142, label %2152

2142:                                             ; preds = %2138
  %2143 = load i32, ptr %203, align 8, !tbaa !6
  %2144 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2145 = load i32, ptr %2144, align 4, !tbaa !224
  %2146 = icmp eq i32 %2143, %2145
  br i1 %2146, label %2147, label %2148

2147:                                             ; preds = %2142
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.10) #12
  br label %2148

2148:                                             ; preds = %2147, %2142
  %2149 = add i32 %183, 1
  %2150 = icmp ugt i32 %2149, %35
  br i1 %2150, label %2151, label %2152

2151:                                             ; preds = %2148
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.11) #12
  br label %2152

2152:                                             ; preds = %2137, %2138, %2148, %2151
  %2153 = phi i32 [ %2149, %2151 ], [ %2149, %2148 ], [ 0, %2138 ], [ 0, %2137 ]
  %2154 = getelementptr inbounds %struct.regnode, ptr %215, i64 0, i32 1
  %2155 = load i8, ptr %2154, align 1, !tbaa !119
  %2156 = icmp eq i8 %2155, 76
  br i1 %2156, label %2157, label %2164

2157:                                             ; preds = %2152
  %2158 = getelementptr inbounds %struct.regnode_2L, ptr %215, i64 0, i32 4
  %2159 = load i32, ptr %2158, align 4, !tbaa !295
  %2160 = sext i32 %2159 to i64
  %2161 = getelementptr inbounds %struct.regnode, ptr %215, i64 %2160
  %2162 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2163 = load i32, ptr %2162, align 4, !tbaa !224
  br label %2166

2164:                                             ; preds = %2152
  %2165 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 1
  br label %2166

2166:                                             ; preds = %2164, %2157
  %2167 = phi i32 [ %2163, %2157 ], [ 0, %2164 ]
  %2168 = phi ptr [ %2161, %2157 ], [ %2165, %2164 ]
  store i32 %2167, ptr %205, align 8
  %2169 = load i32, ptr %4, align 4, !tbaa !34
  %2170 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef 0, i32 noundef %2169)
  store i32 %2170, ptr %199, align 8, !tbaa !6
  %2171 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %2171, ptr %198, align 4, !tbaa !6
  br label %2745

2172:                                             ; preds = %221
  br i1 %202, label %2181, label %2173

2173:                                             ; preds = %2172
  %2174 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 1
  %2175 = load ptr, ptr %2174, align 8, !tbaa !294
  %2176 = icmp eq ptr %2175, %214
  br i1 %2176, label %2177, label %2181

2177:                                             ; preds = %2173
  %2178 = add i32 %183, 1
  %2179 = icmp ugt i32 %2178, %35
  br i1 %2179, label %2180, label %2181

2180:                                             ; preds = %2177
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.12) #12
  br label %2181

2181:                                             ; preds = %2172, %2173, %2177, %2180
  %2182 = phi i32 [ %2178, %2180 ], [ %2178, %2177 ], [ 0, %2173 ], [ 0, %2172 ]
  %2183 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !13
  %2184 = load ptr, ptr @PL_op, align 8, !tbaa !13
  %2185 = load ptr, ptr @PL_curcop, align 8, !tbaa !13
  %2186 = load i32, ptr %4, align 4, !tbaa !34
  %2187 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef 0, i32 noundef %2186)
  %2188 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2189 = icmp eq ptr %107, null
  br i1 %2189, label %2190, label %2192

2190:                                             ; preds = %2181
  %2191 = call ptr @Perl_find_runcv(ptr noundef null) #12
  br label %2192

2192:                                             ; preds = %2190, %2181
  %2193 = phi ptr [ %107, %2181 ], [ %2191, %2190 ]
  %2194 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2195 = load i32, ptr %2194, align 4, !tbaa !224
  %2196 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %2197 = load ptr, ptr %2196, align 8, !tbaa !223
  %2198 = getelementptr inbounds %struct.reg_data, ptr %2197, i64 0, i32 1
  %2199 = load ptr, ptr %2198, align 8, !tbaa !297
  %2200 = zext i32 %2195 to i64
  %2201 = getelementptr inbounds i8, ptr %2199, i64 %2200
  %2202 = load i8, ptr %2201, align 1, !tbaa !6
  switch i8 %2202, label %2212 [
    i8 114, label %2203
    i8 108, label %2215
  ]

2203:                                             ; preds = %2192
  %2204 = getelementptr inbounds %struct.reg_data, ptr %2197, i64 0, i32 2, i64 %2200
  %2205 = load ptr, ptr %2204, align 8, !tbaa !13
  %2206 = getelementptr i8, ptr %2205, i64 16
  %2207 = load ptr, ptr %2206, align 8, !tbaa !6
  %2208 = getelementptr inbounds %struct.regexp, ptr %2207, i64 0, i32 25
  %2209 = load ptr, ptr %2208, align 8, !tbaa !299
  %2210 = add i32 %2195, 1
  %2211 = zext i32 %2210 to i64
  br label %2215

2212:                                             ; preds = %2192
  %2213 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 25
  %2214 = load ptr, ptr %2213, align 8, !tbaa !299
  br label %2215

2215:                                             ; preds = %2192, %2212, %2203
  %2216 = phi i64 [ %2200, %2212 ], [ %2211, %2203 ], [ %2200, %2192 ]
  %2217 = phi ptr [ %2214, %2212 ], [ %2209, %2203 ], [ %2193, %2192 ]
  %2218 = getelementptr inbounds %struct.reg_data, ptr %2197, i64 0, i32 2, i64 %2216
  %2219 = load ptr, ptr %2218, align 8, !tbaa !13
  %2220 = icmp eq ptr %2217, %106
  %2221 = load ptr, ptr @PL_comppad, align 8
  %2222 = icmp eq ptr %2221, %110
  %2223 = select i1 %2220, i1 %2222, i1 false
  br i1 %2223, label %2443, label %2224

2224:                                             ; preds = %2215
  %2225 = icmp eq ptr %2217, %2193
  %2226 = select i1 %2225, i8 -64, i8 64
  %2227 = icmp eq ptr %106, null
  %2228 = load ptr, ptr %2217, align 8, !tbaa !300
  %2229 = getelementptr inbounds %struct.xpvcv, ptr %2228, i64 0, i32 9
  %2230 = load ptr, ptr %2229, align 8, !tbaa !6
  br i1 %2227, label %2297, label %2231

2231:                                             ; preds = %2224
  %2232 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !13
  %2233 = getelementptr inbounds %struct.stackinfo, ptr %2232, i64 0, i32 1
  %2234 = load ptr, ptr %2233, align 8, !tbaa !302
  %2235 = getelementptr inbounds %struct.stackinfo, ptr %2232, i64 0, i32 4
  %2236 = load i32, ptr %2235, align 8, !tbaa !304
  %2237 = sext i32 %2236 to i64
  %2238 = getelementptr inbounds %struct.context, ptr %2234, i64 %2237
  %2239 = getelementptr inbounds %struct.block, ptr %2238, i64 0, i32 8
  %2240 = getelementptr inbounds %struct.block, ptr %2238, i64 0, i32 8, i32 0, i32 4
  %2241 = load i32, ptr %2240, align 8, !tbaa !6
  %2242 = load ptr, ptr %109, align 8, !tbaa !300
  %2243 = getelementptr inbounds %struct.xpvcv, ptr %2242, i64 0, i32 13
  store i32 %2241, ptr %2243, align 4, !tbaa !34
  %2244 = icmp eq i32 %2241, 0
  br i1 %2244, label %2245, label %2252

2245:                                             ; preds = %2231
  %2246 = getelementptr inbounds %struct.sv, ptr %109, i64 0, i32 1
  %2247 = load i32, ptr %2246, align 8, !tbaa !78
  %2248 = icmp ugt i32 %2247, 1
  br i1 %2248, label %2249, label %2251

2249:                                             ; preds = %2245
  %2250 = add i32 %2247, -1
  store i32 %2250, ptr %2246, align 8, !tbaa !78
  br label %2252

2251:                                             ; preds = %2245
  call void @Perl_sv_free2(ptr noundef nonnull %109, i32 noundef %2247) #12
  br label %2252

2252:                                             ; preds = %2251, %2249, %2231
  %2253 = or i8 %2226, 24
  store i8 %2253, ptr %2238, align 8, !tbaa !6
  %2254 = load ptr, ptr @PL_op, align 8, !tbaa !13
  %2255 = getelementptr inbounds %struct.op, ptr %2254, i64 0, i32 5
  %2256 = load i8, ptr %2255, align 2, !tbaa !305
  %2257 = and i8 %2256, 3
  %2258 = icmp eq i8 %2257, 0
  br i1 %2258, label %2259, label %2266

2259:                                             ; preds = %2252
  %2260 = getelementptr inbounds %struct.op, ptr %2254, i64 0, i32 6
  %2261 = load i8, ptr %2260, align 1, !tbaa !307
  %2262 = and i8 %2261, -127
  %2263 = icmp eq i8 %2262, 0
  br i1 %2263, label %2266, label %2264

2264:                                             ; preds = %2259
  %2265 = call i32 @Perl_was_lvalue_sub() #12
  br label %2266

2266:                                             ; preds = %2264, %2259, %2252
  %2267 = phi i32 [ 129, %2252 ], [ %2265, %2264 ], [ 0, %2259 ]
  %2268 = getelementptr inbounds %struct.block, ptr %2238, i64 0, i32 8, i32 0, i32 1
  store ptr %2217, ptr %2268, align 8, !tbaa !6
  %2269 = load ptr, ptr %2217, align 8, !tbaa !300
  %2270 = getelementptr inbounds %struct.xpvcv, ptr %2269, i64 0, i32 13
  %2271 = load i32, ptr %2270, align 4, !tbaa !34
  store i32 %2271, ptr %2240, align 8, !tbaa !6
  store ptr null, ptr %2239, align 8, !tbaa !6
  %2272 = load ptr, ptr %2217, align 8, !tbaa !300
  %2273 = getelementptr inbounds %struct.xpvcv, ptr %2272, i64 0, i32 13
  %2274 = load i32, ptr %2273, align 4, !tbaa !34
  %2275 = icmp eq i32 %2274, 0
  br i1 %2275, label %2276, label %2280

2276:                                             ; preds = %2266
  %2277 = getelementptr inbounds %struct.sv, ptr %2217, i64 0, i32 1
  %2278 = load i32, ptr %2277, align 8, !tbaa !78
  %2279 = add i32 %2278, 2
  store i32 %2279, ptr %2277, align 8, !tbaa !78
  call void @Perl_save_pushptr(ptr noundef nonnull %2217, i32 noundef 11) #12
  br label %2280

2280:                                             ; preds = %2276, %2266
  %2281 = load ptr, ptr @PL_op, align 8, !tbaa !13
  %2282 = getelementptr inbounds %struct.op, ptr %2281, i64 0, i32 6
  %2283 = load i8, ptr %2282, align 1, !tbaa !307
  %2284 = zext i8 %2283 to i32
  %2285 = or i32 %2267, 48
  %2286 = and i32 %2285, %2284
  %2287 = trunc i32 %2286 to i16
  %2288 = getelementptr inbounds %struct.block, ptr %2238, i64 0, i32 2
  store i16 %2287, ptr %2288, align 2, !tbaa !6
  %2289 = load ptr, ptr %2217, align 8, !tbaa !300
  %2290 = getelementptr inbounds %struct.xpvcv, ptr %2289, i64 0, i32 13
  %2291 = load i32, ptr %2290, align 4, !tbaa !34
  br i1 %2225, label %2294, label %2292

2292:                                             ; preds = %2280
  %2293 = add nsw i32 %2291, 1
  store i32 %2293, ptr %2290, align 4, !tbaa !34
  br label %2294

2294:                                             ; preds = %2280, %2292
  %2295 = phi i32 [ %2293, %2292 ], [ %2291, %2280 ]
  %2296 = icmp sgt i32 %2295, 1
  br i1 %2296, label %2425, label %2429

2297:                                             ; preds = %2224
  call void @Perl_push_scope() #12
  %2298 = load ptr, ptr @PL_top_env, align 8, !tbaa !13
  %2299 = getelementptr inbounds %struct.jmpenv, ptr %2298, i64 0, i32 3
  %2300 = load i8, ptr %2299, align 4, !tbaa !308, !range !97, !noundef !98
  call void @Perl_save_strlen(ptr noundef nonnull @PL_tmps_floor) #12
  %2301 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !86
  store i64 %2301, ptr @PL_tmps_floor, align 8, !tbaa !86
  call void @Perl_save_vptr(ptr noundef nonnull @PL_op) #12
  %2302 = load ptr, ptr @PL_top_env, align 8, !tbaa !13
  %2303 = getelementptr inbounds %struct.jmpenv, ptr %2302, i64 0, i32 3
  store i8 1, ptr %2303, align 4, !tbaa !308
  %2304 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !13
  %2305 = getelementptr inbounds %struct.stackinfo, ptr %2304, i64 0, i32 3
  %2306 = load ptr, ptr %2305, align 8, !tbaa !310
  %2307 = icmp eq ptr %2306, null
  br i1 %2307, label %2308, label %2313

2308:                                             ; preds = %2297
  %2309 = call ptr @Perl_new_stackinfo(i32 noundef 32, i32 noundef 22) #12
  %2310 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !13
  %2311 = getelementptr inbounds %struct.stackinfo, ptr %2309, i64 0, i32 2
  store ptr %2310, ptr %2311, align 8, !tbaa !311
  %2312 = getelementptr inbounds %struct.stackinfo, ptr %2310, i64 0, i32 3
  store ptr %2309, ptr %2312, align 8, !tbaa !310
  br label %2313

2313:                                             ; preds = %2308, %2297
  %2314 = phi ptr [ %2306, %2297 ], [ %2309, %2308 ]
  %2315 = getelementptr inbounds %struct.stackinfo, ptr %2314, i64 0, i32 6
  store i32 3, ptr %2315, align 8, !tbaa !312
  %2316 = getelementptr inbounds %struct.stackinfo, ptr %2314, i64 0, i32 4
  store i32 -1, ptr %2316, align 8, !tbaa !304
  %2317 = load ptr, ptr %2314, align 8, !tbaa !313
  %2318 = load ptr, ptr %2317, align 8, !tbaa !314
  %2319 = getelementptr inbounds %struct.xpvav, ptr %2318, i64 0, i32 2
  store i64 0, ptr %2319, align 8, !tbaa !316
  %2320 = load ptr, ptr @PL_stack_base, align 8, !tbaa !13
  %2321 = ptrtoint ptr %2183 to i64
  %2322 = ptrtoint ptr %2320 to i64
  %2323 = sub i64 %2321, %2322
  %2324 = ashr exact i64 %2323, 3
  %2325 = load ptr, ptr @PL_curstack, align 8, !tbaa !13
  %2326 = load ptr, ptr %2325, align 8, !tbaa !314
  %2327 = getelementptr inbounds %struct.xpvav, ptr %2326, i64 0, i32 2
  store i64 %2324, ptr %2327, align 8, !tbaa !316
  %2328 = getelementptr inbounds %struct.av, ptr %2317, i64 0, i32 3
  %2329 = load ptr, ptr %2328, align 8, !tbaa !6
  store ptr %2329, ptr @PL_stack_base, align 8, !tbaa !13
  %2330 = load ptr, ptr %2314, align 8, !tbaa !313
  %2331 = load ptr, ptr %2330, align 8, !tbaa !314
  %2332 = getelementptr inbounds %struct.xpvav, ptr %2331, i64 0, i32 3
  %2333 = load i64, ptr %2332, align 8, !tbaa !318
  %2334 = getelementptr inbounds ptr, ptr %2329, i64 %2333
  store ptr %2334, ptr @PL_stack_max, align 8, !tbaa !13
  %2335 = load ptr, ptr %2314, align 8, !tbaa !313
  %2336 = load ptr, ptr %2335, align 8, !tbaa !314
  %2337 = getelementptr inbounds %struct.xpvav, ptr %2336, i64 0, i32 2
  %2338 = load i64, ptr %2337, align 8, !tbaa !316
  %2339 = getelementptr inbounds ptr, ptr %2329, i64 %2338
  store ptr %2339, ptr @PL_stack_sp, align 8, !tbaa !13
  %2340 = load ptr, ptr %2314, align 8, !tbaa !313
  store ptr %2340, ptr @PL_curstack, align 8, !tbaa !13
  store ptr %2314, ptr @PL_curstackinfo, align 8, !tbaa !13
  %2341 = getelementptr inbounds %struct.stackinfo, ptr %2314, i64 0, i32 5
  %2342 = load i32, ptr %2341, align 4, !tbaa !319
  %2343 = icmp sgt i32 %2342, -1
  br i1 %2343, label %2344, label %2345

2344:                                             ; preds = %2313
  store i32 0, ptr %2316, align 8, !tbaa !304
  br label %2349

2345:                                             ; preds = %2313
  %2346 = call i32 @Perl_cxinc() #12
  %2347 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !13
  %2348 = getelementptr inbounds %struct.stackinfo, ptr %2347, i64 0, i32 4
  store i32 %2346, ptr %2348, align 8, !tbaa !304
  br label %2349

2349:                                             ; preds = %2345, %2344
  %2350 = phi i32 [ %2346, %2345 ], [ 0, %2344 ]
  %2351 = phi ptr [ %2347, %2345 ], [ %2314, %2344 ]
  %2352 = getelementptr inbounds %struct.stackinfo, ptr %2351, i64 0, i32 1
  %2353 = load ptr, ptr %2352, align 8, !tbaa !302
  %2354 = sext i32 %2350 to i64
  %2355 = getelementptr inbounds %struct.context, ptr %2353, i64 %2354
  %2356 = or i8 %2226, 24
  store i8 %2356, ptr %2355, align 8, !tbaa !6
  %2357 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !13
  %2358 = load ptr, ptr @PL_stack_base, align 8, !tbaa !13
  %2359 = ptrtoint ptr %2357 to i64
  %2360 = ptrtoint ptr %2358 to i64
  %2361 = sub i64 %2359, %2360
  %2362 = lshr exact i64 %2361, 3
  %2363 = trunc i64 %2362 to i32
  %2364 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 3
  store i32 %2363, ptr %2364, align 4, !tbaa !6
  %2365 = load ptr, ptr @PL_curcop, align 8, !tbaa !13
  %2366 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 4
  store ptr %2365, ptr %2366, align 8, !tbaa !6
  %2367 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !13
  %2368 = load ptr, ptr @PL_markstack, align 8, !tbaa !13
  %2369 = ptrtoint ptr %2367 to i64
  %2370 = ptrtoint ptr %2368 to i64
  %2371 = sub i64 %2369, %2370
  %2372 = lshr exact i64 %2371, 2
  %2373 = trunc i64 %2372 to i32
  %2374 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 5
  store i32 %2373, ptr %2374, align 8, !tbaa !6
  %2375 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !34
  %2376 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 6
  store i32 %2375, ptr %2376, align 4, !tbaa !6
  %2377 = load ptr, ptr @PL_curpm, align 8, !tbaa !13
  %2378 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 7
  store ptr %2377, ptr %2378, align 8, !tbaa !6
  %2379 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 1
  store i8 2, ptr %2379, align 1, !tbaa !6
  %2380 = load ptr, ptr @PL_op, align 8, !tbaa !13
  %2381 = getelementptr inbounds %struct.op, ptr %2380, i64 0, i32 5
  %2382 = load i8, ptr %2381, align 2, !tbaa !305
  %2383 = and i8 %2382, 3
  %2384 = icmp eq i8 %2383, 0
  br i1 %2384, label %2385, label %2392

2385:                                             ; preds = %2349
  %2386 = getelementptr inbounds %struct.op, ptr %2380, i64 0, i32 6
  %2387 = load i8, ptr %2386, align 1, !tbaa !307
  %2388 = and i8 %2387, -127
  %2389 = icmp eq i8 %2388, 0
  br i1 %2389, label %2392, label %2390

2390:                                             ; preds = %2385
  %2391 = call i32 @Perl_was_lvalue_sub() #12
  br label %2392

2392:                                             ; preds = %2390, %2385, %2349
  %2393 = phi i32 [ 129, %2349 ], [ %2391, %2390 ], [ 0, %2385 ]
  %2394 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 8
  %2395 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 8, i32 0, i32 1
  store ptr %2217, ptr %2395, align 8, !tbaa !6
  %2396 = load ptr, ptr %2217, align 8, !tbaa !300
  %2397 = getelementptr inbounds %struct.xpvcv, ptr %2396, i64 0, i32 13
  %2398 = load i32, ptr %2397, align 4, !tbaa !34
  %2399 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 8, i32 0, i32 4
  store i32 %2398, ptr %2399, align 8, !tbaa !6
  store ptr null, ptr %2394, align 8, !tbaa !6
  %2400 = load ptr, ptr %2217, align 8, !tbaa !300
  %2401 = getelementptr inbounds %struct.xpvcv, ptr %2400, i64 0, i32 13
  %2402 = load i32, ptr %2401, align 4, !tbaa !34
  %2403 = icmp eq i32 %2402, 0
  br i1 %2403, label %2404, label %2408

2404:                                             ; preds = %2392
  %2405 = getelementptr inbounds %struct.sv, ptr %2217, i64 0, i32 1
  %2406 = load i32, ptr %2405, align 8, !tbaa !78
  %2407 = add i32 %2406, 2
  store i32 %2407, ptr %2405, align 8, !tbaa !78
  call void @Perl_save_pushptr(ptr noundef nonnull %2217, i32 noundef 11) #12
  br label %2408

2408:                                             ; preds = %2404, %2392
  %2409 = load ptr, ptr @PL_op, align 8, !tbaa !13
  %2410 = getelementptr inbounds %struct.op, ptr %2409, i64 0, i32 6
  %2411 = load i8, ptr %2410, align 1, !tbaa !307
  %2412 = zext i8 %2411 to i32
  %2413 = or i32 %2393, 48
  %2414 = and i32 %2413, %2412
  %2415 = trunc i32 %2414 to i16
  %2416 = getelementptr inbounds %struct.block, ptr %2355, i64 0, i32 2
  store i16 %2415, ptr %2416, align 2, !tbaa !6
  %2417 = load ptr, ptr %2217, align 8, !tbaa !300
  %2418 = getelementptr inbounds %struct.xpvcv, ptr %2417, i64 0, i32 13
  %2419 = load i32, ptr %2418, align 4, !tbaa !34
  br i1 %2225, label %2422, label %2420

2420:                                             ; preds = %2408
  %2421 = add nsw i32 %2419, 1
  store i32 %2421, ptr %2418, align 4, !tbaa !34
  br label %2422

2422:                                             ; preds = %2408, %2420
  %2423 = phi i32 [ %2421, %2420 ], [ %2419, %2408 ]
  %2424 = icmp sgt i32 %2423, 1
  br i1 %2424, label %2425, label %2429

2425:                                             ; preds = %2422, %2294
  %2426 = phi i32 [ %2295, %2294 ], [ %2423, %2422 ]
  %2427 = phi i8 [ %108, %2294 ], [ %2300, %2422 ]
  %2428 = phi ptr [ %2183, %2294 ], [ %2339, %2422 ]
  call void @Perl_pad_push(ptr noundef %2230, i32 noundef %2426) #12
  br label %2429

2429:                                             ; preds = %2425, %2422, %2294
  %2430 = phi i8 [ %108, %2294 ], [ %2300, %2422 ], [ %2427, %2425 ]
  %2431 = phi ptr [ %2183, %2294 ], [ %2339, %2422 ], [ %2428, %2425 ]
  %2432 = load ptr, ptr @PL_comppad, align 8, !tbaa !13
  call void @Perl_save_pushptr(ptr noundef %2432, i32 noundef 7) #12
  %2433 = getelementptr inbounds %struct.padlist, ptr %2230, i64 0, i32 1
  %2434 = load ptr, ptr %2433, align 8, !tbaa !320
  %2435 = load ptr, ptr %2217, align 8, !tbaa !300
  %2436 = getelementptr inbounds %struct.xpvcv, ptr %2435, i64 0, i32 13
  %2437 = load i32, ptr %2436, align 4, !tbaa !34
  %2438 = sext i32 %2437 to i64
  %2439 = getelementptr inbounds ptr, ptr %2434, i64 %2438
  %2440 = load ptr, ptr %2439, align 8, !tbaa !13
  store ptr %2440, ptr @PL_comppad, align 8, !tbaa !13
  %2441 = getelementptr inbounds %struct.av, ptr %2440, i64 0, i32 3
  %2442 = load ptr, ptr %2441, align 8, !tbaa !6
  store ptr %2442, ptr @PL_curpad, align 8, !tbaa !13
  br label %2443

2443:                                             ; preds = %2215, %2429
  %2444 = phi ptr [ %2440, %2429 ], [ %110, %2215 ]
  %2445 = phi ptr [ %2217, %2429 ], [ %106, %2215 ]
  %2446 = phi i8 [ %2430, %2429 ], [ %108, %2215 ]
  %2447 = phi ptr [ %2431, %2429 ], [ %2183, %2215 ]
  %2448 = phi ptr [ %2217, %2429 ], [ %109, %2215 ]
  %2449 = getelementptr inbounds %struct.unop, ptr %2219, i64 0, i32 7
  %2450 = load ptr, ptr %2449, align 8, !tbaa !322
  %2451 = getelementptr inbounds %struct.op, ptr %2450, i64 0, i32 3
  %2452 = load i64, ptr %2451, align 8, !tbaa !324
  %2453 = icmp eq i64 %2452, 198
  %2454 = getelementptr inbounds %struct.unop, ptr %2450, i64 0, i32 7
  br i1 %2453, label %2458, label %2455

2455:                                             ; preds = %2443
  %2456 = load ptr, ptr %2454, align 8, !tbaa !322
  %2457 = getelementptr inbounds %struct.op, ptr %2456, i64 0, i32 1
  br label %2458

2458:                                             ; preds = %2443, %2455
  %2459 = phi ptr [ %2457, %2455 ], [ %2454, %2443 ]
  %2460 = load ptr, ptr %2459, align 8, !tbaa !13
  %2461 = getelementptr inbounds %struct.op, ptr %2460, i64 0, i32 4
  %2462 = load i16, ptr %2461, align 8
  %2463 = and i16 %2462, 511
  %2464 = icmp eq i16 %2463, 1
  br i1 %2464, label %2466, label %2465

2465:                                             ; preds = %2458
  store ptr %2460, ptr @PL_curcop, align 8, !tbaa !13
  br label %2466

2466:                                             ; preds = %2465, %2458
  %2467 = load ptr, ptr %2219, align 8, !tbaa !325
  %2468 = load ptr, ptr %59, align 8, !tbaa !53
  %2469 = ptrtoint ptr %214 to i64
  %2470 = ptrtoint ptr %2468 to i64
  %2471 = sub i64 %2469, %2470
  %2472 = load ptr, ptr %195, align 8, !tbaa !38
  %2473 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2472, i64 0, i32 1
  store i64 %2471, ptr %2473, align 8, !tbaa !42
  %2474 = load ptr, ptr %67, align 8, !tbaa !61
  %2475 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2474, i64 0, i32 7
  %2476 = load ptr, ptr %2475, align 8, !tbaa !79
  %2477 = icmp eq ptr %2476, null
  br i1 %2477, label %2517, label %2478

2478:                                             ; preds = %2466
  %2479 = load ptr, ptr %72, align 8, !tbaa !54
  %2480 = getelementptr inbounds %struct.sv, ptr %2479, i64 0, i32 2
  %2481 = load i32, ptr %2480, align 4, !tbaa !9
  %2482 = and i32 %2481, 1024
  %2483 = icmp eq i32 %2482, 0
  br i1 %2483, label %2495, label %2484

2484:                                             ; preds = %2478
  %2485 = and i32 %2481, 2097152
  %2486 = icmp eq i32 %2485, 0
  br i1 %2486, label %2490, label %2487

2487:                                             ; preds = %2484
  %2488 = load ptr, ptr %2479, align 8, !tbaa !24
  %2489 = call fastcc zeroext i1 @S_sv_only_taint_gmagic(ptr %2488)
  br i1 %2489, label %2490, label %2495

2490:                                             ; preds = %2487, %2484
  %2491 = getelementptr inbounds %struct.magic, ptr %2476, i64 0, i32 5
  store i64 %2471, ptr %2491, align 8, !tbaa !20
  %2492 = getelementptr inbounds %struct.magic, ptr %2476, i64 0, i32 4
  %2493 = load i8, ptr %2492, align 1, !tbaa !23
  %2494 = or i8 %2493, 64
  store i8 %2494, ptr %2492, align 1, !tbaa !23
  br label %2517

2495:                                             ; preds = %2487, %2478
  %2496 = and i32 %2481, 536870912
  %2497 = icmp eq i32 %2496, 0
  br i1 %2497, label %2510, label %2498

2498:                                             ; preds = %2495
  %2499 = load ptr, ptr @PL_curcop, align 8, !tbaa !13
  %2500 = getelementptr inbounds %struct.cop, ptr %2499, i64 0, i32 10
  %2501 = load i32, ptr %2500, align 8, !tbaa !14
  %2502 = and i32 %2501, 8
  %2503 = icmp eq i32 %2502, 0
  br i1 %2503, label %2504, label %2510

2504:                                             ; preds = %2498
  %2505 = getelementptr inbounds i8, ptr %2468, i64 %2471
  %2506 = call i64 @Perl_utf8_length(ptr noundef %2468, ptr noundef %2505) #12
  %2507 = load ptr, ptr %67, align 8, !tbaa !61
  %2508 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2507, i64 0, i32 7
  %2509 = load ptr, ptr %2508, align 8, !tbaa !79
  br label %2510

2510:                                             ; preds = %2495, %2498, %2504
  %2511 = phi ptr [ %2509, %2504 ], [ %2476, %2498 ], [ %2476, %2495 ]
  %2512 = phi i64 [ %2506, %2504 ], [ %2471, %2498 ], [ %2471, %2495 ]
  %2513 = getelementptr inbounds %struct.magic, ptr %2511, i64 0, i32 5
  store i64 %2512, ptr %2513, align 8, !tbaa !20
  %2514 = getelementptr inbounds %struct.magic, ptr %2511, i64 0, i32 4
  %2515 = load i8, ptr %2514, align 1, !tbaa !23
  %2516 = and i8 %2515, -65
  store i8 %2516, ptr %2514, align 1, !tbaa !23
  br label %2517

2517:                                             ; preds = %2490, %2510, %2466
  %2518 = icmp eq ptr %173, null
  br i1 %2518, label %2521, label %2519

2519:                                             ; preds = %2517
  %2520 = call ptr @Perl_get_sv(ptr noundef nonnull @.str.13, i32 noundef 1) #12
  call void @Perl_sv_setsv_flags(ptr noundef %2520, ptr noundef nonnull %173, i32 noundef 1538) #12
  br label %2521

2521:                                             ; preds = %2519, %2517
  %2522 = load ptr, ptr @PL_stack_base, align 8, !tbaa !13
  %2523 = ptrtoint ptr %2447 to i64
  %2524 = ptrtoint ptr %2522 to i64
  %2525 = sub i64 %2523, %2524
  store ptr %2467, ptr @PL_op, align 8, !tbaa !13
  %2526 = load ptr, ptr @PL_runops, align 8, !tbaa !13
  %2527 = call i32 %2526() #12
  %2528 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !13
  %2529 = load ptr, ptr @PL_stack_base, align 8, !tbaa !13
  %2530 = ptrtoint ptr %2528 to i64
  %2531 = ptrtoint ptr %2529 to i64
  %2532 = sub i64 %2530, %2531
  %2533 = icmp eq i64 %2532, %2525
  br i1 %2533, label %2537, label %2534

2534:                                             ; preds = %2521
  %2535 = getelementptr inbounds ptr, ptr %2528, i64 -1
  %2536 = load ptr, ptr %2528, align 8, !tbaa !13
  store ptr %2535, ptr @PL_stack_sp, align 8, !tbaa !13
  br label %2537

2537:                                             ; preds = %2521, %2534
  %2538 = phi ptr [ %2536, %2534 ], [ @PL_sv_undef, %2521 ]
  store ptr %2538, ptr %15, align 8
  store ptr null, ptr @PL_op, align 8, !tbaa !13
  switch i32 %170, label %2604 [
    i32 0, label %2539
    i32 1, label %2543
  ]

2539:                                             ; preds = %2537
  %2540 = load ptr, ptr @PL_replgv, align 8, !tbaa !13
  %2541 = call ptr @Perl_save_scalar(ptr noundef %2540) #12
  %2542 = load ptr, ptr %15, align 8, !tbaa !13
  call void @Perl_sv_setsv_flags(ptr noundef %2541, ptr noundef %2542, i32 noundef 1538) #12
  br label %2661

2543:                                             ; preds = %2537
  %2544 = icmp eq ptr %2538, null
  br i1 %2544, label %2601, label %2545

2545:                                             ; preds = %2543
  %2546 = getelementptr inbounds %struct.sv, ptr %2538, i64 0, i32 2
  %2547 = load i32, ptr %2546, align 4, !tbaa !9
  %2548 = and i32 %2547, 2097152
  %2549 = icmp eq i32 %2548, 0
  br i1 %2549, label %2552, label %2550

2550:                                             ; preds = %2545
  %2551 = call zeroext i1 @Perl_sv_2bool_flags(ptr noundef nonnull %2538, i32 noundef 2) #12
  br label %2601

2552:                                             ; preds = %2545
  %2553 = and i32 %2547, 65280
  %2554 = icmp ne i32 %2553, 0
  %2555 = and i32 %2547, 255
  %2556 = icmp eq i32 %2555, 8
  %2557 = or i1 %2554, %2556
  %2558 = and i32 %2547, 16826623
  %2559 = icmp eq i32 %2558, 16777226
  %2560 = or i1 %2559, %2557
  br i1 %2560, label %2561, label %2601

2561:                                             ; preds = %2552
  %2562 = and i32 %2547, 1024
  %2563 = icmp eq i32 %2562, 0
  br i1 %2563, label %2578, label %2564

2564:                                             ; preds = %2561
  %2565 = load ptr, ptr %2538, align 8, !tbaa !24
  %2566 = icmp eq ptr %2565, null
  br i1 %2566, label %2601, label %2567

2567:                                             ; preds = %2564
  %2568 = getelementptr inbounds %struct.xpv, ptr %2565, i64 0, i32 2
  %2569 = load i64, ptr %2568, align 8, !tbaa !110
  %2570 = icmp ugt i64 %2569, 1
  br i1 %2570, label %2601, label %2571

2571:                                             ; preds = %2567
  %2572 = icmp eq i64 %2569, 0
  br i1 %2572, label %2601, label %2573

2573:                                             ; preds = %2571
  %2574 = getelementptr inbounds %struct.sv, ptr %2538, i64 0, i32 3
  %2575 = load ptr, ptr %2574, align 8, !tbaa !6
  %2576 = load i8, ptr %2575, align 1, !tbaa !6
  %2577 = icmp ne i8 %2576, 48
  br label %2601

2578:                                             ; preds = %2561
  %2579 = and i32 %2547, 768
  %2580 = icmp eq i32 %2579, 0
  br i1 %2580, label %2599, label %2581

2581:                                             ; preds = %2578
  %2582 = and i32 %2547, 256
  %2583 = icmp eq i32 %2582, 0
  br i1 %2583, label %2589, label %2584

2584:                                             ; preds = %2581
  %2585 = load ptr, ptr %2538, align 8, !tbaa !24
  %2586 = getelementptr inbounds %struct.xpviv, ptr %2585, i64 0, i32 4
  %2587 = load i64, ptr %2586, align 8, !tbaa !6
  %2588 = icmp eq i64 %2587, 0
  br i1 %2588, label %2589, label %2601

2589:                                             ; preds = %2584, %2581
  %2590 = and i32 %2547, 512
  %2591 = icmp eq i32 %2590, 0
  br i1 %2591, label %2601, label %2592

2592:                                             ; preds = %2589
  %2593 = load ptr, ptr %2538, align 8, !tbaa !24
  %2594 = getelementptr inbounds %struct.xpvnv, ptr %2593, i64 0, i32 5
  %2595 = load double, ptr %2594, align 8, !tbaa !6
  %2596 = fcmp uno double %2595, 0.000000e+00
  br i1 %2596, label %2601, label %2597

2597:                                             ; preds = %2592
  %2598 = fcmp fast une double %2595, 0.000000e+00
  br label %2601

2599:                                             ; preds = %2578
  %2600 = call zeroext i1 @Perl_sv_2bool_flags(ptr noundef nonnull %2538, i32 noundef 0) #12
  br label %2601

2601:                                             ; preds = %2550, %2599, %2552, %2567, %2573, %2571, %2564, %2589, %2597, %2592, %2584, %2543
  %2602 = phi i1 [ false, %2543 ], [ %2551, %2550 ], [ %2600, %2599 ], [ false, %2552 ], [ false, %2564 ], [ true, %2567 ], [ false, %2571 ], [ %2577, %2573 ], [ true, %2584 ], [ false, %2589 ], [ true, %2592 ], [ %2598, %2597 ]
  %2603 = zext i1 %2602 to i8
  br label %2661

2604:                                             ; preds = %2537
  %2605 = getelementptr inbounds %struct.sv, ptr %2538, i64 0, i32 2
  %2606 = load i32, ptr %2605, align 4, !tbaa !9
  %2607 = and i32 %2606, 2097152
  %2608 = icmp eq i32 %2607, 0
  br i1 %2608, label %2613, label %2609

2609:                                             ; preds = %2604
  %2610 = call ptr @Perl_sv_mortalcopy_flags(ptr noundef nonnull %2538, i32 noundef 1538) #12
  store ptr %2610, ptr %15, align 8, !tbaa !13
  %2611 = getelementptr inbounds %struct.sv, ptr %2610, i64 0, i32 2
  %2612 = load i32, ptr %2611, align 4, !tbaa !9
  br label %2613

2613:                                             ; preds = %2609, %2604
  %2614 = phi i32 [ %2612, %2609 ], [ %2606, %2604 ]
  %2615 = phi ptr [ %2610, %2609 ], [ %2538, %2604 ]
  %2616 = and i32 %2614, 2048
  %2617 = icmp eq i32 %2616, 0
  br i1 %2617, label %2632, label %2618

2618:                                             ; preds = %2613
  %2619 = getelementptr inbounds %struct.sv, ptr %2615, i64 0, i32 3
  %2620 = load ptr, ptr %2619, align 8, !tbaa !6
  %2621 = getelementptr inbounds %struct.sv, ptr %2620, i64 0, i32 2
  %2622 = load i32, ptr %2621, align 4, !tbaa !9
  %2623 = and i32 %2622, 1048576
  %2624 = icmp eq i32 %2623, 0
  br i1 %2624, label %2632, label %2625

2625:                                             ; preds = %2618
  %2626 = load ptr, ptr %2620, align 8, !tbaa !24
  %2627 = load ptr, ptr %2626, align 8, !tbaa !25
  %2628 = getelementptr inbounds %struct.hv, ptr %2627, i64 0, i32 2
  %2629 = load i32, ptr %2628, align 4, !tbaa !27
  %2630 = and i32 %2629, 268435456
  %2631 = icmp eq i32 %2630, 0
  br i1 %2631, label %2632, label %2661

2632:                                             ; preds = %2618, %2625, %2613
  %2633 = phi i32 [ %2614, %2613 ], [ %2622, %2625 ], [ %2622, %2618 ]
  %2634 = phi ptr [ %2615, %2613 ], [ %2620, %2625 ], [ %2620, %2618 ]
  %2635 = and i32 %2633, 255
  %2636 = icmp eq i32 %2635, 8
  br i1 %2636, label %2661, label %2637

2637:                                             ; preds = %2632
  %2638 = and i32 %2614, 4194304
  %2639 = icmp eq i32 %2638, 0
  br i1 %2639, label %2647, label %2640

2640:                                             ; preds = %2637
  %2641 = call ptr @Perl_mg_find(ptr noundef nonnull %2615, i32 noundef 114) #12
  %2642 = icmp eq ptr %2641, null
  br i1 %2642, label %2647, label %2643

2643:                                             ; preds = %2640
  %2644 = getelementptr inbounds %struct.magic, ptr %2641, i64 0, i32 6
  %2645 = load ptr, ptr %2644, align 8, !tbaa !326
  %2646 = icmp eq ptr %2645, null
  br i1 %2646, label %2647, label %2661

2647:                                             ; preds = %2640, %2637, %2643
  %2648 = load ptr, ptr %15, align 8, !tbaa !13
  %2649 = getelementptr inbounds %struct.sv, ptr %2648, i64 0, i32 2
  %2650 = load i32, ptr %2649, align 4, !tbaa !9
  %2651 = and i32 %2650, 1792
  %2652 = icmp eq i32 %2651, 0
  br i1 %2652, label %2653, label %2661

2653:                                             ; preds = %2647
  %2654 = call ptr @Perl_sv_mortalcopy_flags(ptr noundef nonnull %2648, i32 noundef 1538) #12
  store ptr %2654, ptr %15, align 8, !tbaa !13
  %2655 = getelementptr inbounds %struct.sv, ptr %2654, i64 0, i32 2
  %2656 = load i32, ptr %2655, align 4, !tbaa !9
  %2657 = and i32 %2656, 430018304
  %2658 = icmp eq i32 %2657, 1024
  br i1 %2658, label %2661, label %2659

2659:                                             ; preds = %2653
  %2660 = call ptr @Perl_sv_pvn_force_flags(ptr noundef nonnull %2654, ptr noundef null, i32 noundef 2) #12
  br label %2661

2661:                                             ; preds = %2632, %2643, %2647, %2659, %2653, %2601, %2625, %2539
  %2662 = phi ptr [ null, %2539 ], [ null, %2601 ], [ null, %2625 ], [ null, %2653 ], [ null, %2659 ], [ null, %2647 ], [ %2645, %2643 ], [ %2634, %2632 ]
  %2663 = phi i32 [ 0, %2539 ], [ 0, %2601 ], [ %170, %2625 ], [ %170, %2653 ], [ %170, %2659 ], [ %170, %2647 ], [ %170, %2643 ], [ %170, %2632 ]
  %2664 = phi i8 [ %172, %2539 ], [ %2603, %2601 ], [ %172, %2625 ], [ %172, %2653 ], [ %172, %2659 ], [ %172, %2647 ], [ %172, %2643 ], [ %172, %2632 ]
  store ptr %2184, ptr @PL_op, align 8, !tbaa !13
  store ptr %2185, ptr @PL_curcop, align 8, !tbaa !13
  %2665 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %2188, ptr @PL_savestack_ix, align 4, !tbaa !34
  call fastcc void @S_regcppop(ptr noundef nonnull %190, ptr noundef nonnull %4)
  store i32 %2665, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2666 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  store ptr %2666, ptr @PL_curpm, align 8, !tbaa !13
  %2667 = icmp eq i32 %2663, 2
  br i1 %2667, label %2668, label %4876

2668:                                             ; preds = %2661
  %2669 = icmp eq ptr %2662, null
  br i1 %2669, label %2672, label %2670

2670:                                             ; preds = %2668
  %2671 = call ptr @Perl_reg_temp_copy(ptr noundef null, ptr noundef nonnull %2662) #12
  br label %2721

2672:                                             ; preds = %2668
  %2673 = load ptr, ptr %15, align 8, !tbaa !13
  %2674 = getelementptr inbounds %struct.sv, ptr %2673, i64 0, i32 2
  %2675 = load i32, ptr %2674, align 4, !tbaa !9
  %2676 = and i32 %2675, 536870912
  %2677 = icmp eq i32 %2676, 0
  br i1 %2677, label %2700, label %2678

2678:                                             ; preds = %2672
  %2679 = load ptr, ptr @PL_curcop, align 8, !tbaa !13
  %2680 = getelementptr inbounds %struct.cop, ptr %2679, i64 0, i32 10
  %2681 = load i32, ptr %2680, align 8, !tbaa !14
  %2682 = and i32 %2681, 8
  %2683 = icmp eq i32 %2682, 0
  br i1 %2683, label %2700, label %2684

2684:                                             ; preds = %2678
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #12
  %2685 = and i32 %2675, 2098176
  %2686 = icmp eq i32 %2685, 1024
  br i1 %2686, label %2687, label %2693

2687:                                             ; preds = %2684
  %2688 = load ptr, ptr %2673, align 8, !tbaa !24
  %2689 = getelementptr inbounds %struct.xpv, ptr %2688, i64 0, i32 2
  %2690 = load i64, ptr %2689, align 8, !tbaa !110
  store i64 %2690, ptr %16, align 8, !tbaa !86
  %2691 = getelementptr inbounds %struct.sv, ptr %2673, i64 0, i32 3
  %2692 = load ptr, ptr %2691, align 8, !tbaa !6
  br label %2696

2693:                                             ; preds = %2684
  %2694 = call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %2673, ptr noundef nonnull %16, i32 noundef 2) #12
  %2695 = load i64, ptr %16, align 8, !tbaa !86
  br label %2696

2696:                                             ; preds = %2693, %2687
  %2697 = phi i64 [ %2690, %2687 ], [ %2695, %2693 ]
  %2698 = phi ptr [ %2692, %2687 ], [ %2694, %2693 ]
  %2699 = call ptr @Perl_newSVpvn_flags(ptr noundef %2698, i64 noundef %2697, i32 noundef 524288) #12
  store ptr %2699, ptr %15, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  br label %2700

2700:                                             ; preds = %2696, %2678, %2672
  %2701 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 13
  %2702 = load i32, ptr %2701, align 4, !tbaa !19
  %2703 = shl i32 %2702, 26
  %2704 = and i32 %2703, -2147483648
  %2705 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 4
  %2706 = load ptr, ptr %2705, align 8, !tbaa !327
  %2707 = getelementptr inbounds %struct.regexp_engine, ptr %2706, i64 0, i32 11
  %2708 = load ptr, ptr %2707, align 8, !tbaa !328
  %2709 = getelementptr inbounds %struct.regnode_2L, ptr %215, i64 0, i32 4
  %2710 = load i32, ptr %2709, align 4, !tbaa !295
  %2711 = call ptr %2708(ptr noundef nonnull %15, i32 noundef 1, ptr noundef null, ptr noundef %2706, ptr noundef null, ptr noundef null, i32 noundef %2710, i32 noundef %2704) #12
  %2712 = load ptr, ptr %15, align 8, !tbaa !13
  %2713 = getelementptr inbounds %struct.sv, ptr %2712, i64 0, i32 2
  %2714 = load i32, ptr %2713, align 4, !tbaa !9
  %2715 = and i32 %2714, 2623488
  %2716 = icmp ne i32 %2715, 0
  %2717 = and i32 %2714, 134414336
  %2718 = icmp eq i32 %2717, 131072
  %2719 = or i1 %2716, %2718
  br i1 %2719, label %2721, label %2720

2720:                                             ; preds = %2700
  call void @Perl_sv_magic(ptr noundef nonnull %2712, ptr noundef %2711, i32 noundef 114, ptr noundef null, i32 noundef 0) #12
  br label %2721

2721:                                             ; preds = %2700, %2720, %2670
  %2722 = phi ptr [ %2671, %2670 ], [ %2711, %2720 ], [ %2711, %2700 ]
  call void @Perl_save_pushptr(ptr noundef %2722, i32 noundef 11) #12
  %2723 = getelementptr i8, ptr %2722, i64 16
  %2724 = load ptr, ptr %2723, align 8, !tbaa !6
  %2725 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 7
  %2726 = load i32, ptr %2725, align 8, !tbaa !35
  %2727 = and i32 %2726, -33554433
  store i32 %2727, ptr %2725, align 8, !tbaa !35
  %2728 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 18
  %2729 = load ptr, ptr %2728, align 8, !tbaa !85
  %2730 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 18
  store ptr %2729, ptr %2730, align 8, !tbaa !85
  %2731 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 20
  %2732 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 20
  %2733 = load <2 x i64>, ptr %2731, align 8, !tbaa !86
  store <2 x i64> %2733, ptr %2732, align 8, !tbaa !86
  %2734 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 22
  %2735 = load i64, ptr %2734, align 8, !tbaa !87
  %2736 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 22
  store i64 %2735, ptr %2736, align 8, !tbaa !87
  %2737 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 15
  store i32 0, ptr %2737, align 8, !tbaa !37
  %2738 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 16
  store i32 0, ptr %2738, align 4, !tbaa !36
  %2739 = getelementptr inbounds %struct.regexp, ptr %2724, i64 0, i32 14
  %2740 = load ptr, ptr %2739, align 8, !tbaa !17
  %2741 = getelementptr inbounds %struct.regexp_internal, ptr %2740, i64 1
  store i32 0, ptr %205, align 8, !tbaa !6
  %2742 = load i32, ptr %4, align 4, !tbaa !34
  %2743 = call fastcc i32 @S_regcppush(ptr noundef nonnull %190, i32 noundef 0, i32 noundef %2742)
  store i32 %2743, ptr %199, align 8, !tbaa !6
  %2744 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %2744, ptr %198, align 4, !tbaa !6
  store i32 0, ptr %4, align 4, !tbaa !34
  br label %2745

2745:                                             ; preds = %2721, %2166
  %2746 = phi ptr [ %2445, %2721 ], [ %106, %2166 ]
  %2747 = phi ptr [ %2193, %2721 ], [ %107, %2166 ]
  %2748 = phi i8 [ %2446, %2721 ], [ %108, %2166 ]
  %2749 = phi ptr [ %2722, %2721 ], [ %191, %2166 ]
  %2750 = phi ptr [ %2724, %2721 ], [ %190, %2166 ]
  %2751 = phi ptr [ %2740, %2721 ], [ %189, %2166 ]
  %2752 = phi ptr [ %2741, %2721 ], [ %2168, %2166 ]
  %2753 = phi ptr [ %2448, %2721 ], [ %109, %2166 ]
  %2754 = phi ptr [ %2444, %2721 ], [ %110, %2166 ]
  %2755 = phi i32 [ 0, %2721 ], [ %170, %2166 ]
  %2756 = phi i8 [ %2664, %2721 ], [ %172, %2166 ]
  %2757 = phi i32 [ %2182, %2721 ], [ %2153, %2166 ]
  store i32 0, ptr %63, align 8, !tbaa !55
  %2758 = getelementptr inbounds %struct.p5rx, ptr %2749, i64 0, i32 2
  %2759 = load i32, ptr %2758, align 4, !tbaa !49
  %2760 = lshr i32 %2759, 29
  %2761 = trunc i32 %2760 to i8
  %2762 = and i8 %2761, 1
  store i8 %2762, ptr %52, align 1, !tbaa !51
  store ptr %191, ptr %196, align 8, !tbaa !6
  store ptr %179, ptr %192, align 8, !tbaa !6
  %2763 = load ptr, ptr %67, align 8, !tbaa !61
  %2764 = icmp eq ptr %2763, null
  br i1 %2764, label %2784, label %2765

2765:                                             ; preds = %2745
  %2766 = getelementptr inbounds %struct.sv, ptr %2749, i64 0, i32 1
  %2767 = load i32, ptr %2766, align 8, !tbaa !78
  %2768 = add i32 %2767, 1
  store i32 %2768, ptr %2766, align 8, !tbaa !78
  %2769 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  %2770 = getelementptr inbounds %struct.pmop, ptr %2769, i64 0, i32 9
  %2771 = load ptr, ptr %2770, align 8, !tbaa !82
  %2772 = icmp eq ptr %2771, null
  br i1 %2772, label %2781, label %2773

2773:                                             ; preds = %2765
  %2774 = getelementptr inbounds %struct.sv, ptr %2771, i64 0, i32 1
  %2775 = load i32, ptr %2774, align 8, !tbaa !78
  %2776 = icmp ugt i32 %2775, 1
  br i1 %2776, label %2777, label %2779

2777:                                             ; preds = %2773
  %2778 = add i32 %2775, -1
  store i32 %2778, ptr %2774, align 8, !tbaa !78
  br label %2781

2779:                                             ; preds = %2773
  call void @Perl_sv_free2(ptr noundef nonnull %2771, i32 noundef %2775) #12
  %2780 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  br label %2781

2781:                                             ; preds = %2765, %2777, %2779
  %2782 = phi ptr [ %2769, %2765 ], [ %2769, %2777 ], [ %2780, %2779 ]
  %2783 = getelementptr inbounds %struct.pmop, ptr %2782, i64 0, i32 9
  store ptr %2749, ptr %2783, align 8, !tbaa !82
  br label %2784

2784:                                             ; preds = %2781, %2745
  store ptr %186, ptr %206, align 8, !tbaa !6
  store ptr %180, ptr %207, align 8, !tbaa !6
  br label %4892

2785:                                             ; preds = %221
  %2786 = load ptr, ptr %196, align 8, !tbaa !6
  %2787 = getelementptr inbounds %struct.p5rx, ptr %2786, i64 0, i32 2
  %2788 = load i32, ptr %2787, align 4, !tbaa !49
  %2789 = lshr i32 %2788, 29
  %2790 = trunc i32 %2789 to i8
  %2791 = and i8 %2790, 1
  store i8 %2791, ptr %52, align 1, !tbaa !51
  %2792 = load ptr, ptr %67, align 8, !tbaa !61
  %2793 = icmp eq ptr %2792, null
  br i1 %2793, label %2813, label %2794

2794:                                             ; preds = %2785
  %2795 = getelementptr inbounds %struct.sv, ptr %2786, i64 0, i32 1
  %2796 = load i32, ptr %2795, align 8, !tbaa !78
  %2797 = add i32 %2796, 1
  store i32 %2797, ptr %2795, align 8, !tbaa !78
  %2798 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  %2799 = getelementptr inbounds %struct.pmop, ptr %2798, i64 0, i32 9
  %2800 = load ptr, ptr %2799, align 8, !tbaa !82
  %2801 = icmp eq ptr %2800, null
  br i1 %2801, label %2810, label %2802

2802:                                             ; preds = %2794
  %2803 = getelementptr inbounds %struct.sv, ptr %2800, i64 0, i32 1
  %2804 = load i32, ptr %2803, align 8, !tbaa !78
  %2805 = icmp ugt i32 %2804, 1
  br i1 %2805, label %2806, label %2808

2806:                                             ; preds = %2802
  %2807 = add i32 %2804, -1
  store i32 %2807, ptr %2803, align 8, !tbaa !78
  br label %2810

2808:                                             ; preds = %2802
  call void @Perl_sv_free2(ptr noundef nonnull %2800, i32 noundef %2804) #12
  %2809 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  br label %2810

2810:                                             ; preds = %2794, %2806, %2808
  %2811 = phi ptr [ %2798, %2794 ], [ %2798, %2806 ], [ %2809, %2808 ]
  %2812 = getelementptr inbounds %struct.pmop, ptr %2811, i64 0, i32 9
  store ptr %2786, ptr %2812, align 8, !tbaa !82
  br label %2813

2813:                                             ; preds = %2810, %2785
  %2814 = getelementptr i8, ptr %2786, i64 16
  %2815 = load ptr, ptr %2814, align 8, !tbaa !6
  %2816 = getelementptr inbounds %struct.regexp, ptr %2815, i64 0, i32 14
  %2817 = load ptr, ptr %2816, align 8, !tbaa !17
  %2818 = load ptr, ptr @PL_replgv, align 8, !tbaa !13
  %2819 = getelementptr inbounds %struct.gv, ptr %2818, i64 0, i32 3
  %2820 = load ptr, ptr %2819, align 8, !tbaa !6
  %2821 = load ptr, ptr %2820, align 8, !tbaa !76
  %2822 = icmp eq ptr %2821, null
  br i1 %2822, label %2827, label %2823

2823:                                             ; preds = %2813
  %2824 = getelementptr inbounds %struct.sv, ptr %2821, i64 0, i32 1
  %2825 = load i32, ptr %2824, align 8, !tbaa !78
  %2826 = add i32 %2825, 1
  store i32 %2826, ptr %2824, align 8, !tbaa !78
  br label %2827

2827:                                             ; preds = %2813, %2823
  %2828 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2829 = load i32, ptr %199, align 8, !tbaa !6
  %2830 = icmp sgt i32 %2828, %2829
  br i1 %2830, label %2831, label %2833

2831:                                             ; preds = %2827
  call void @Perl_leave_scope(i32 noundef %2829) #12
  %2832 = load ptr, ptr @PL_replgv, align 8, !tbaa !13
  br label %2833

2833:                                             ; preds = %2831, %2827
  %2834 = phi ptr [ %2832, %2831 ], [ %2818, %2827 ]
  %2835 = getelementptr inbounds %struct.gv, ptr %2834, i64 0, i32 3
  %2836 = load ptr, ptr %2835, align 8, !tbaa !6
  %2837 = load ptr, ptr %2836, align 8, !tbaa !76
  call void @Perl_sv_setsv_flags(ptr noundef %2837, ptr noundef %2821, i32 noundef 1538) #12
  br i1 %2822, label %2845, label %2838

2838:                                             ; preds = %2833
  %2839 = getelementptr inbounds %struct.sv, ptr %2821, i64 0, i32 1
  %2840 = load i32, ptr %2839, align 8, !tbaa !78
  %2841 = icmp ugt i32 %2840, 1
  br i1 %2841, label %2842, label %2844

2842:                                             ; preds = %2838
  %2843 = add i32 %2840, -1
  store i32 %2843, ptr %2839, align 8, !tbaa !78
  br label %2845

2844:                                             ; preds = %2838
  call void @Perl_sv_free2(ptr noundef nonnull %2821, i32 noundef %2840) #12
  br label %2845

2845:                                             ; preds = %2833, %2842, %2844
  %2846 = load ptr, ptr %207, align 8, !tbaa !6
  %2847 = load ptr, ptr %192, align 8, !tbaa !6
  store i32 0, ptr %63, align 8, !tbaa !55
  %2848 = call i32 @llvm.usub.sat.i32(i32 %183, i32 1)
  br label %4986

2849:                                             ; preds = %221
  %2850 = load ptr, ptr %196, align 8, !tbaa !6
  %2851 = getelementptr inbounds %struct.p5rx, ptr %2850, i64 0, i32 2
  %2852 = load i32, ptr %2851, align 4, !tbaa !49
  %2853 = lshr i32 %2852, 29
  %2854 = trunc i32 %2853 to i8
  %2855 = and i8 %2854, 1
  store i8 %2855, ptr %52, align 1, !tbaa !51
  %2856 = load ptr, ptr %67, align 8, !tbaa !61
  %2857 = icmp eq ptr %2856, null
  br i1 %2857, label %2877, label %2858

2858:                                             ; preds = %2849
  %2859 = getelementptr inbounds %struct.sv, ptr %2850, i64 0, i32 1
  %2860 = load i32, ptr %2859, align 8, !tbaa !78
  %2861 = add i32 %2860, 1
  store i32 %2861, ptr %2859, align 8, !tbaa !78
  %2862 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  %2863 = getelementptr inbounds %struct.pmop, ptr %2862, i64 0, i32 9
  %2864 = load ptr, ptr %2863, align 8, !tbaa !82
  %2865 = icmp eq ptr %2864, null
  br i1 %2865, label %2874, label %2866

2866:                                             ; preds = %2858
  %2867 = getelementptr inbounds %struct.sv, ptr %2864, i64 0, i32 1
  %2868 = load i32, ptr %2867, align 8, !tbaa !78
  %2869 = icmp ugt i32 %2868, 1
  br i1 %2869, label %2870, label %2872

2870:                                             ; preds = %2866
  %2871 = add i32 %2868, -1
  store i32 %2871, ptr %2867, align 8, !tbaa !78
  br label %2874

2872:                                             ; preds = %2866
  call void @Perl_sv_free2(ptr noundef nonnull %2864, i32 noundef %2868) #12
  %2873 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  br label %2874

2874:                                             ; preds = %2858, %2870, %2872
  %2875 = phi ptr [ %2862, %2858 ], [ %2862, %2870 ], [ %2873, %2872 ]
  %2876 = getelementptr inbounds %struct.pmop, ptr %2875, i64 0, i32 9
  store ptr %2850, ptr %2876, align 8, !tbaa !82
  br label %2877

2877:                                             ; preds = %2874, %2849
  %2878 = getelementptr i8, ptr %2850, i64 16
  %2879 = load ptr, ptr %2878, align 8, !tbaa !6
  %2880 = getelementptr inbounds %struct.regexp, ptr %2879, i64 0, i32 14
  %2881 = load ptr, ptr %2880, align 8, !tbaa !17
  %2882 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %2883 = load i32, ptr %198, align 4, !tbaa !6
  %2884 = icmp sgt i32 %2882, %2883
  br i1 %2884, label %2885, label %2886

2885:                                             ; preds = %2877
  call void @Perl_leave_scope(i32 noundef %2883) #12
  br label %2886

2886:                                             ; preds = %2885, %2877
  call fastcc void @S_regcppop(ptr noundef nonnull %2879, ptr noundef nonnull %4)
  %2887 = load ptr, ptr %207, align 8, !tbaa !6
  %2888 = load ptr, ptr %192, align 8, !tbaa !6
  store i32 0, ptr %63, align 8, !tbaa !55
  %2889 = call i32 @llvm.usub.sat.i32(i32 %183, i32 1)
  br label %5080

2890:                                             ; preds = %221
  %2891 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2892 = load i32, ptr %2891, align 4, !tbaa !224
  %2893 = load ptr, ptr %59, align 8, !tbaa !53
  %2894 = ptrtoint ptr %214 to i64
  %2895 = ptrtoint ptr %2893 to i64
  %2896 = sub i64 %2894, %2895
  %2897 = load ptr, ptr %195, align 8, !tbaa !38
  %2898 = zext i32 %2892 to i64
  %2899 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2897, i64 %2898, i32 2
  store i64 %2896, ptr %2899, align 8, !tbaa !330
  %2900 = load i32, ptr %4, align 4, !tbaa !34
  %2901 = call i32 @llvm.umax.i32(i32 %2892, i32 %2900)
  store i32 %2901, ptr %4, align 4
  br label %4876

2902:                                             ; preds = %221
  %2903 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2904 = load i32, ptr %2903, align 4, !tbaa !224
  %2905 = load ptr, ptr %195, align 8, !tbaa !38
  %2906 = zext i32 %2904 to i64
  %2907 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2905, i64 %2906
  %2908 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2905, i64 %2906, i32 2
  %2909 = load i64, ptr %2908, align 8, !tbaa !330
  store i64 %2909, ptr %2907, align 8, !tbaa !39
  %2910 = load ptr, ptr %59, align 8, !tbaa !53
  %2911 = ptrtoint ptr %214 to i64
  %2912 = ptrtoint ptr %2910 to i64
  %2913 = sub i64 %2911, %2912
  %2914 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2905, i64 %2906, i32 1
  store i64 %2913, ptr %2914, align 8, !tbaa !42
  %2915 = load i32, ptr %193, align 8, !tbaa !37
  %2916 = icmp ugt i32 %2904, %2915
  br i1 %2916, label %2917, label %2918

2917:                                             ; preds = %2902
  store i32 %2904, ptr %193, align 8, !tbaa !37
  br label %2918

2918:                                             ; preds = %2917, %2902
  store i32 %2904, ptr %197, align 4, !tbaa !36
  br i1 %202, label %4876, label %2919

2919:                                             ; preds = %2918
  %2920 = load i32, ptr %203, align 8, !tbaa !6
  %2921 = icmp eq i32 %2920, %2904
  br i1 %2921, label %4503, label %4876

2922:                                             ; preds = %221
  %2923 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2924 = load i32, ptr %2923, align 4, !tbaa !224
  %2925 = icmp eq i32 %2924, 0
  %2926 = icmp eq ptr %215, null
  %2927 = or i1 %2925, %2926
  br i1 %2927, label %4502, label %2928

2928:                                             ; preds = %2922
  %2929 = ptrtoint ptr %214 to i64
  br label %2930

2930:                                             ; preds = %2928, %2958
  %2931 = phi ptr [ %215, %2928 ], [ %2959, %2958 ]
  %2932 = getelementptr inbounds %struct.regnode, ptr %2931, i64 0, i32 1
  %2933 = load i8, ptr %2932, align 1, !tbaa !119
  switch i8 %2933, label %2958 [
    i8 0, label %4502
    i8 50, label %2934
  ]

2934:                                             ; preds = %2930
  %2935 = getelementptr inbounds %struct.regnode_1, ptr %2931, i64 0, i32 3
  %2936 = load i32, ptr %2935, align 4, !tbaa !224
  %2937 = icmp ugt i32 %2936, %84
  br i1 %2937, label %2958, label %2938

2938:                                             ; preds = %2934
  %2939 = load ptr, ptr %195, align 8, !tbaa !38
  %2940 = zext i32 %2936 to i64
  %2941 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2939, i64 %2940
  %2942 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2939, i64 %2940, i32 2
  %2943 = load i64, ptr %2942, align 8, !tbaa !330
  store i64 %2943, ptr %2941, align 8, !tbaa !39
  %2944 = load ptr, ptr %59, align 8, !tbaa !53
  %2945 = ptrtoint ptr %2944 to i64
  %2946 = sub i64 %2929, %2945
  %2947 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2939, i64 %2940, i32 1
  store i64 %2946, ptr %2947, align 8, !tbaa !42
  %2948 = load i32, ptr %193, align 8, !tbaa !37
  %2949 = icmp ugt i32 %2936, %2948
  br i1 %2949, label %2950, label %2951

2950:                                             ; preds = %2938
  store i32 %2936, ptr %193, align 8, !tbaa !37
  br label %2951

2951:                                             ; preds = %2950, %2938
  store i32 %2936, ptr %197, align 4, !tbaa !36
  %2952 = load i32, ptr %2923, align 4, !tbaa !224
  %2953 = icmp eq i32 %2936, %2952
  br i1 %2953, label %4502, label %2954

2954:                                             ; preds = %2951
  br i1 %202, label %2958, label %2955

2955:                                             ; preds = %2954
  %2956 = load i32, ptr %203, align 8, !tbaa !6
  %2957 = icmp eq i32 %2956, %2936
  br i1 %2957, label %4503, label %2958

2958:                                             ; preds = %2930, %2954, %2955, %2934
  %2959 = call ptr @Perl_regnext(ptr noundef nonnull %2931) #12
  %2960 = icmp eq ptr %2959, null
  br i1 %2960, label %4502, label %2930, !llvm.loop !331

2961:                                             ; preds = %221
  %2962 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2963 = load i32, ptr %2962, align 4, !tbaa !224
  %2964 = load i32, ptr %193, align 8, !tbaa !37
  %2965 = icmp ult i32 %2964, %2963
  br i1 %2965, label %2972, label %2966

2966:                                             ; preds = %2961
  %2967 = load ptr, ptr %195, align 8, !tbaa !38
  %2968 = zext i32 %2963 to i64
  %2969 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2967, i64 %2968, i32 1
  %2970 = load i64, ptr %2969, align 8, !tbaa !42
  %2971 = icmp ne i64 %2970, -1
  br label %2972

2972:                                             ; preds = %2966, %2961
  %2973 = phi i1 [ false, %2961 ], [ %2971, %2966 ]
  %2974 = zext i1 %2973 to i8
  br label %4876

2975:                                             ; preds = %221
  %2976 = getelementptr i8, ptr %215, i64 4
  %2977 = load i32, ptr %2976, align 4, !tbaa !224
  %2978 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 14
  %2979 = load ptr, ptr %2978, align 8, !tbaa !17
  %2980 = getelementptr inbounds %struct.regexp_internal, ptr %2979, i64 0, i32 3
  %2981 = load ptr, ptr %2980, align 8, !tbaa !223
  %2982 = zext i32 %2977 to i64
  %2983 = getelementptr inbounds %struct.reg_data, ptr %2981, i64 0, i32 2, i64 %2982
  %2984 = load ptr, ptr %2983, align 8, !tbaa !13
  %2985 = getelementptr inbounds %struct.sv, ptr %2984, i64 0, i32 3
  %2986 = load ptr, ptr %2985, align 8, !tbaa !6
  %2987 = load ptr, ptr %2984, align 8, !tbaa !24
  %2988 = getelementptr inbounds %struct.xpviv, ptr %2987, i64 0, i32 4
  %2989 = load i64, ptr %2988, align 8, !tbaa !6
  %2990 = icmp sgt i64 %2989, 0
  br i1 %2990, label %2991, label %3007

2991:                                             ; preds = %2975
  %2992 = load i32, ptr %193, align 8, !tbaa !37
  br label %2993

2993:                                             ; preds = %3004, %2991
  %2994 = phi i64 [ 0, %2991 ], [ %3005, %3004 ]
  %2995 = getelementptr inbounds i32, ptr %2986, i64 %2994
  %2996 = load i32, ptr %2995, align 4, !tbaa !34
  %2997 = icmp slt i32 %2992, %2996
  br i1 %2997, label %3004, label %2998

2998:                                             ; preds = %2993
  %2999 = load ptr, ptr %195, align 8, !tbaa !38
  %3000 = sext i32 %2996 to i64
  %3001 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2999, i64 %3000, i32 1
  %3002 = load i64, ptr %3001, align 8, !tbaa !42
  %3003 = icmp eq i64 %3002, -1
  br i1 %3003, label %3004, label %3007

3004:                                             ; preds = %2998, %2993
  %3005 = add nuw nsw i64 %2994, 1
  %3006 = icmp eq i64 %3005, %2989
  br i1 %3006, label %3007, label %2993, !llvm.loop !292

3007:                                             ; preds = %2998, %3004, %2975
  %3008 = phi i32 [ 0, %2975 ], [ %2996, %2998 ], [ 0, %3004 ]
  %3009 = icmp sgt i32 %3008, 0
  %3010 = zext i1 %3009 to i8
  br label %4876

3011:                                             ; preds = %221
  %3012 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %3013 = load i32, ptr %3012, align 4, !tbaa !224
  br i1 %202, label %3019, label %3014

3014:                                             ; preds = %3011
  %3015 = icmp eq i32 %3013, 0
  br i1 %3015, label %3019, label %3016

3016:                                             ; preds = %3014
  %3017 = load i32, ptr %203, align 8, !tbaa !6
  %3018 = icmp eq i32 %3017, %3013
  br label %3019

3019:                                             ; preds = %3014, %3016, %3011
  %3020 = phi i1 [ false, %3011 ], [ true, %3014 ], [ %3018, %3016 ]
  %3021 = zext i1 %3020 to i8
  br label %4876

3022:                                             ; preds = %221
  %3023 = load i32, ptr %63, align 8, !tbaa !55
  store i32 %3023, ptr %64, align 4, !tbaa !293
  %3024 = and i8 %172, 1
  %3025 = icmp eq i8 %3024, 0
  br i1 %3025, label %3028, label %3026

3026:                                             ; preds = %3022
  %3027 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  br label %4876

3028:                                             ; preds = %3022
  %3029 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %3030 = load i32, ptr %3029, align 4, !tbaa !224
  %3031 = zext i32 %3030 to i64
  %3032 = getelementptr inbounds %struct.regnode, ptr %215, i64 %3031
  %3033 = getelementptr inbounds %struct.regnode, ptr %215, i64 %3031, i32 1
  %3034 = load i8, ptr %3033, align 1, !tbaa !119
  %3035 = icmp eq i8 %3034, 66
  %3036 = select i1 %3035, i64 2, i64 0
  %3037 = getelementptr inbounds %struct.regnode, ptr %3032, i64 %3036
  br label %4876

3038:                                             ; preds = %221
  %3039 = load i8, ptr %215, align 2, !tbaa !139
  %3040 = zext i8 %3039 to i32
  br label %4876

3041:                                             ; preds = %221
  %3042 = load i8, ptr %215, align 2, !tbaa !139
  %3043 = zext i8 %3042 to i32
  %3044 = getelementptr %struct.regnode, ptr %186, i64 -1, i32 1
  %3045 = load i8, ptr %3044, align 1, !tbaa !119
  %3046 = icmp eq i8 %3045, 40
  br i1 %3046, label %3047, label %3052

3047:                                             ; preds = %3041
  %3048 = getelementptr inbounds %struct.regnode_1, ptr %186, i64 0, i32 3
  %3049 = load i32, ptr %3048, align 4, !tbaa !224
  %3050 = zext i32 %3049 to i64
  %3051 = getelementptr inbounds %struct.regnode, ptr %186, i64 %3050
  br label %3052

3052:                                             ; preds = %3047, %3041
  %3053 = phi ptr [ %3051, %3047 ], [ %186, %3041 ]
  %3054 = load i32, ptr %193, align 8, !tbaa !37
  %3055 = call i32 @llvm.smin.i32(i32 %3054, i32 %3043)
  store ptr %179, ptr %207, align 8, !tbaa !6
  %3056 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3056, ptr %199, align 8, !tbaa !6
  store i32 %3055, ptr %205, align 8, !tbaa !6
  store ptr %215, ptr %192, align 8, !tbaa !6
  store ptr %3053, ptr %196, align 8, !tbaa !6
  %3057 = and i8 %212, 1
  store i8 %3057, ptr %198, align 4, !tbaa !6
  %3058 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 -1, ptr %3058, align 4, !tbaa !6
  store ptr null, ptr %206, align 8, !tbaa !6
  %3059 = getelementptr inbounds %struct.regnode, ptr %3053, i64 -1
  br label %4892

3060:                                             ; preds = %221
  %3061 = load ptr, ptr %207, align 8, !tbaa !6
  br label %4986

3062:                                             ; preds = %221
  %3063 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3064 = load i32, ptr %199, align 8, !tbaa !6
  %3065 = icmp sgt i32 %3063, %3064
  br i1 %3065, label %3066, label %3067

3066:                                             ; preds = %3062
  call void @Perl_leave_scope(i32 noundef %3064) #12
  br label %3067

3067:                                             ; preds = %3066, %3062
  %3068 = load ptr, ptr %207, align 8, !tbaa !6
  br label %5080

3069:                                             ; preds = %221
  %3070 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 4
  %3071 = load ptr, ptr %3070, align 8, !tbaa !6
  %3072 = getelementptr inbounds %struct.regnode_2, ptr %3071, i64 0, i32 3
  %3073 = load i16, ptr %3072, align 2, !tbaa !332
  %3074 = zext i16 %3073 to i32
  %3075 = getelementptr inbounds %struct.regnode_2, ptr %3071, i64 0, i32 4
  %3076 = load i16, ptr %3075, align 2, !tbaa !334
  %3077 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 9
  %3078 = load i32, ptr %3077, align 4, !tbaa !6
  %3079 = add nsw i32 %3078, 1
  store i32 %3079, ptr %3077, align 4, !tbaa !6
  %3080 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 10
  %3081 = load ptr, ptr %3080, align 8, !tbaa !6
  store ptr %3081, ptr %196, align 8, !tbaa !6
  store i32 0, ptr %199, align 8, !tbaa !6
  store i32 0, ptr %198, align 4, !tbaa !6
  %3082 = icmp slt i32 %3079, %3074
  br i1 %3082, label %3083, label %3090

3083:                                             ; preds = %3069
  %3084 = getelementptr inbounds %struct.regnode, ptr %3071, i64 2
  %3085 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 8
  %3086 = load i32, ptr %3085, align 8, !tbaa !6
  %3087 = load i32, ptr %4, align 4, !tbaa !34
  %3088 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3086, i32 noundef %3087)
  store i32 %3088, ptr %192, align 8, !tbaa !6
  store ptr %214, ptr %3080, align 8, !tbaa !6
  %3089 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3089, ptr %194, align 4, !tbaa !6
  store i32 100, ptr %188, align 8, !tbaa !276
  br label %4940

3090:                                             ; preds = %3069
  %3091 = load ptr, ptr %3080, align 8, !tbaa !6
  %3092 = icmp eq ptr %214, %3091
  br i1 %3092, label %3244, label %3093

3093:                                             ; preds = %3090
  %3094 = load i8, ptr %215, align 2, !tbaa !139
  %3095 = icmp eq i8 %3094, 0
  br i1 %3095, label %3169, label %3096

3096:                                             ; preds = %3093
  %3097 = load i32, ptr %63, align 8, !tbaa !55
  %3098 = icmp eq i32 %3097, 0
  br i1 %3098, label %3101, label %3099

3099:                                             ; preds = %3096
  %3100 = load i32, ptr %64, align 4, !tbaa !293
  br label %3113

3101:                                             ; preds = %3096
  %3102 = load ptr, ptr %58, align 8, !tbaa !56
  %3103 = load ptr, ptr %59, align 8, !tbaa !53
  %3104 = ptrtoint ptr %3102 to i64
  %3105 = ptrtoint ptr %3103 to i64
  %3106 = add i64 %3104, 1
  %3107 = sub i64 %3106, %3105
  %3108 = lshr i8 %3094, 4
  %3109 = zext i8 %3108 to i64
  %3110 = mul nsw i64 %3107, %3109
  %3111 = trunc i64 %3110 to i32
  %3112 = call i32 @llvm.umin.i32(i32 %3111, i32 2147483647)
  store i32 %3112, ptr %63, align 8, !tbaa !55
  br label %3113

3113:                                             ; preds = %3099, %3101
  %3114 = phi i32 [ %3097, %3099 ], [ %3112, %3101 ]
  %3115 = phi i32 [ %3100, %3099 ], [ %3112, %3101 ]
  %3116 = add nsw i32 %3115, -1
  store i32 %3116, ptr %64, align 4, !tbaa !293
  %3117 = icmp eq i32 %3115, 0
  br i1 %3117, label %3118, label %3137

3118:                                             ; preds = %3113
  %3119 = add nsw i32 %3114, 7
  %3120 = sdiv i32 %3119, 8
  %3121 = sext i32 %3120 to i64
  %3122 = load ptr, ptr %62, align 8, !tbaa !58
  %3123 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3122, i64 0, i32 3
  %3124 = load ptr, ptr %3123, align 8, !tbaa !69
  %3125 = icmp eq ptr %3124, null
  br i1 %3125, label %3133, label %3126

3126:                                             ; preds = %3118
  %3127 = load i64, ptr %65, align 8, !tbaa !335
  %3128 = icmp slt i64 %3127, %3121
  br i1 %3128, label %3129, label %3131

3129:                                             ; preds = %3126
  %3130 = call ptr @Perl_safesysrealloc(ptr noundef nonnull %3124, i64 noundef %3121) #12
  store ptr %3130, ptr %3123, align 8, !tbaa !69
  store i64 %3121, ptr %65, align 8, !tbaa !335
  br label %3131

3131:                                             ; preds = %3129, %3126
  %3132 = phi ptr [ %3130, %3129 ], [ %3124, %3126 ]
  call void @llvm.memset.p0.i64(ptr align 1 %3132, i8 0, i64 %3121, i1 false)
  br label %3135

3133:                                             ; preds = %3118
  store i64 %3121, ptr %65, align 8, !tbaa !335
  %3134 = call ptr @Perl_safesyscalloc(i64 noundef %3121, i64 noundef 1) #12
  store ptr %3134, ptr %3123, align 8, !tbaa !69
  br label %3135

3135:                                             ; preds = %3133, %3131
  %3136 = load i32, ptr %64, align 4, !tbaa !293
  br label %3137

3137:                                             ; preds = %3135, %3113
  %3138 = phi i32 [ %3136, %3135 ], [ %3116, %3113 ]
  %3139 = icmp slt i32 %3138, 0
  br i1 %3139, label %3140, label %3169

3140:                                             ; preds = %3137
  store i32 -1, ptr %64, align 4, !tbaa !293
  %3141 = load i8, ptr %215, align 2, !tbaa !139
  %3142 = zext i8 %3141 to i32
  %3143 = and i32 %3142, 15
  %3144 = add nsw i32 %3143, -1
  %3145 = sext i32 %3144 to i64
  %3146 = load ptr, ptr %59, align 8, !tbaa !53
  %3147 = ptrtoint ptr %214 to i64
  %3148 = ptrtoint ptr %3146 to i64
  %3149 = sub i64 %3147, %3148
  %3150 = lshr i32 %3142, 4
  %3151 = zext i32 %3150 to i64
  %3152 = mul nsw i64 %3149, %3151
  %3153 = add nsw i64 %3152, %3145
  %3154 = srem i64 %3153, 8
  %3155 = trunc i64 %3154 to i32
  %3156 = shl nuw nsw i32 1, %3155
  %3157 = zext i32 %3156 to i64
  %3158 = sdiv i64 %3153, 8
  %3159 = load ptr, ptr %62, align 8, !tbaa !58
  %3160 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3159, i64 0, i32 3
  %3161 = load ptr, ptr %3160, align 8, !tbaa !69
  %3162 = getelementptr inbounds i8, ptr %3161, i64 %3158
  %3163 = load i8, ptr %3162, align 1, !tbaa !6
  %3164 = sext i8 %3163 to i64
  %3165 = and i64 %3157, %3164
  %3166 = icmp eq i64 %3165, 0
  br i1 %3166, label %3167, label %5080

3167:                                             ; preds = %3140
  %3168 = trunc i64 %3158 to i32
  store i32 %3168, ptr %199, align 8, !tbaa !6
  store i32 %3156, ptr %198, align 4, !tbaa !6
  br label %3169

3169:                                             ; preds = %3137, %3093, %3167
  %3170 = getelementptr inbounds %struct.regnode, ptr %3071, i64 2
  %3171 = getelementptr inbounds i8, ptr %179, i64 52
  %3172 = load i8, ptr %3171, align 4, !tbaa !6, !range !97, !noundef !98
  %3173 = icmp eq i8 %3172, 0
  br i1 %3173, label %3185, label %3174

3174:                                             ; preds = %3169
  store ptr %179, ptr %207, align 8, !tbaa !6
  %3175 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 2
  %3176 = load ptr, ptr %3175, align 8, !tbaa !6
  %3177 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 8
  %3178 = load i32, ptr %3177, align 8, !tbaa !6
  %3179 = load i32, ptr %4, align 4, !tbaa !34
  %3180 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3178, i32 noundef %3179)
  store i32 %3180, ptr %192, align 8, !tbaa !6
  %3181 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3181, ptr %194, align 4, !tbaa !6
  %3182 = load ptr, ptr %207, align 8, !tbaa !6
  %3183 = getelementptr inbounds %struct.regmatch_state, ptr %3182, i64 0, i32 2, i32 0, i32 6
  %3184 = load ptr, ptr %3183, align 8, !tbaa !6
  br label %4892

3185:                                             ; preds = %3169
  %3186 = zext i16 %3076 to i32
  %3187 = icmp slt i32 %3079, %3186
  br i1 %3187, label %3188, label %3244

3188:                                             ; preds = %3185
  %3189 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 8
  %3190 = load i32, ptr %3189, align 8, !tbaa !6
  %3191 = load i32, ptr %4, align 4, !tbaa !34
  %3192 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3190, i32 noundef %3191)
  store i32 %3192, ptr %192, align 8, !tbaa !6
  store ptr %214, ptr %3080, align 8, !tbaa !6
  %3193 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3193, ptr %194, align 4, !tbaa !6
  store i32 104, ptr %188, align 8, !tbaa !276
  br label %4940

3194:                                             ; preds = %221, %221
  %3195 = load ptr, ptr %207, align 8, !tbaa !6
  br label %4986

3196:                                             ; preds = %221
  %3197 = load ptr, ptr %207, align 8, !tbaa !6
  %3198 = load ptr, ptr %196, align 8, !tbaa !6
  %3199 = getelementptr inbounds %struct.regmatch_state, ptr %3197, i64 0, i32 2, i32 0, i32 10
  store ptr %3198, ptr %3199, align 8, !tbaa !6
  %3200 = getelementptr inbounds %struct.regmatch_state, ptr %3197, i64 0, i32 2, i32 0, i32 9
  %3201 = load i32, ptr %3200, align 4, !tbaa !6
  %3202 = add nsw i32 %3201, -1
  store i32 %3202, ptr %3200, align 4, !tbaa !6
  %3203 = load i32, ptr %198, align 4, !tbaa !6
  %3204 = icmp eq i32 %3203, 0
  br i1 %3204, label %5080, label %3205

3205:                                             ; preds = %3196
  %3206 = load ptr, ptr %62, align 8, !tbaa !58
  %3207 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3206, i64 0, i32 3
  %3208 = load ptr, ptr %3207, align 8, !tbaa !69
  %3209 = load i32, ptr %199, align 8, !tbaa !6
  %3210 = sext i32 %3209 to i64
  %3211 = getelementptr inbounds i8, ptr %3208, i64 %3210
  %3212 = load i8, ptr %3211, align 1, !tbaa !6
  %3213 = trunc i32 %3203 to i8
  %3214 = or i8 %3212, %3213
  store i8 %3214, ptr %3211, align 1, !tbaa !6
  br label %5080

3215:                                             ; preds = %221, %221
  %3216 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3217 = load i32, ptr %194, align 4, !tbaa !6
  %3218 = icmp sgt i32 %3216, %3217
  br i1 %3218, label %3219, label %3220

3219:                                             ; preds = %3215
  call void @Perl_leave_scope(i32 noundef %3217) #12
  br label %3220

3220:                                             ; preds = %3219, %3215
  call fastcc void @S_regcppop(ptr noundef %190, ptr noundef nonnull %4)
  %3221 = load ptr, ptr %196, align 8, !tbaa !6
  %3222 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 10
  store ptr %3221, ptr %3222, align 8, !tbaa !6
  %3223 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 9
  %3224 = load i32, ptr %3223, align 4, !tbaa !6
  %3225 = add nsw i32 %3224, -1
  store i32 %3225, ptr %3223, align 4, !tbaa !6
  %3226 = load i32, ptr %198, align 4, !tbaa !6
  %3227 = icmp eq i32 %3226, 0
  br i1 %3227, label %5080, label %3228

3228:                                             ; preds = %3220
  %3229 = load ptr, ptr %62, align 8, !tbaa !58
  %3230 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3229, i64 0, i32 3
  %3231 = load ptr, ptr %3230, align 8, !tbaa !69
  %3232 = load i32, ptr %199, align 8, !tbaa !6
  %3233 = sext i32 %3232 to i64
  %3234 = getelementptr inbounds i8, ptr %3231, i64 %3233
  %3235 = load i8, ptr %3234, align 1, !tbaa !6
  %3236 = trunc i32 %3226 to i8
  %3237 = or i8 %3235, %3236
  store i8 %3237, ptr %3234, align 1, !tbaa !6
  br label %5080

3238:                                             ; preds = %221
  %3239 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3240 = load i32, ptr %194, align 4, !tbaa !6
  %3241 = icmp sgt i32 %3239, %3240
  br i1 %3241, label %3242, label %3243

3242:                                             ; preds = %3238
  call void @Perl_leave_scope(i32 noundef %3240) #12
  br label %3243

3243:                                             ; preds = %3242, %3238
  call fastcc void @S_regcppop(ptr noundef %190, ptr noundef nonnull %4)
  br label %3244

3244:                                             ; preds = %3090, %3185, %3243
  %3245 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 9
  %3246 = load i32, ptr %3245, align 4, !tbaa !6
  %3247 = icmp sgt i32 %3246, 32766
  br i1 %3247, label %3248, label %3254

3248:                                             ; preds = %3244
  %3249 = call zeroext i1 @Perl_ckwarn(i32 noundef 20) #12
  br i1 %3249, label %3250, label %3254

3250:                                             ; preds = %3248
  %3251 = load i8, ptr %61, align 1, !tbaa !52, !range !97, !noundef !98
  %3252 = icmp eq i8 %3251, 0
  br i1 %3252, label %3253, label %3254

3253:                                             ; preds = %3250
  store i8 1, ptr %61, align 1, !tbaa !52
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 20, ptr noundef nonnull @.str.14, i32 noundef 32766) #12
  br label %3254

3254:                                             ; preds = %3253, %3250, %3248, %3244
  store ptr %179, ptr %207, align 8, !tbaa !6
  %3255 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 2
  %3256 = load ptr, ptr %3255, align 8, !tbaa !6
  %3257 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 6
  %3258 = load ptr, ptr %3257, align 8, !tbaa !6
  br label %4892

3259:                                             ; preds = %221
  %3260 = load ptr, ptr %207, align 8, !tbaa !6
  %3261 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3262 = load i32, ptr %194, align 4, !tbaa !6
  %3263 = icmp sgt i32 %3261, %3262
  br i1 %3263, label %3264, label %3265

3264:                                             ; preds = %3259
  call void @Perl_leave_scope(i32 noundef %3262) #12
  br label %3265

3265:                                             ; preds = %3264, %3259
  call fastcc void @S_regcppop(ptr noundef %190, ptr noundef nonnull %4)
  %3266 = getelementptr inbounds %struct.regmatch_state, ptr %3260, i64 0, i32 2, i32 0, i32 9
  %3267 = load i32, ptr %3266, align 4, !tbaa !6
  %3268 = getelementptr inbounds %struct.regmatch_state, ptr %3260, i64 0, i32 2, i32 0, i32 4
  %3269 = load ptr, ptr %3268, align 8, !tbaa !6
  %3270 = getelementptr inbounds %struct.regnode_2, ptr %3269, i64 0, i32 4
  %3271 = load i16, ptr %3270, align 2, !tbaa !334
  %3272 = zext i16 %3271 to i32
  %3273 = icmp slt i32 %3267, %3272
  br i1 %3273, label %3297, label %3274

3274:                                             ; preds = %3265
  %3275 = icmp sgt i32 %3267, 32766
  br i1 %3275, label %3276, label %3282

3276:                                             ; preds = %3274
  %3277 = call zeroext i1 @Perl_ckwarn(i32 noundef 20) #12
  br i1 %3277, label %3278, label %3282

3278:                                             ; preds = %3276
  %3279 = load i8, ptr %61, align 1, !tbaa !52, !range !97, !noundef !98
  %3280 = icmp eq i8 %3279, 0
  br i1 %3280, label %3281, label %3282

3281:                                             ; preds = %3278
  store i8 1, ptr %61, align 1, !tbaa !52
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 20, ptr noundef nonnull @.str.14, i32 noundef 32766) #12
  br label %3282

3282:                                             ; preds = %3281, %3278, %3276, %3274
  %3283 = load i32, ptr %3266, align 4, !tbaa !6
  %3284 = add nsw i32 %3283, -1
  store i32 %3284, ptr %3266, align 4, !tbaa !6
  %3285 = load i32, ptr %198, align 4, !tbaa !6
  %3286 = icmp eq i32 %3285, 0
  br i1 %3286, label %5080, label %3287

3287:                                             ; preds = %3282
  %3288 = load ptr, ptr %62, align 8, !tbaa !58
  %3289 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3288, i64 0, i32 3
  %3290 = load ptr, ptr %3289, align 8, !tbaa !69
  %3291 = load i32, ptr %199, align 8, !tbaa !6
  %3292 = sext i32 %3291 to i64
  %3293 = getelementptr inbounds i8, ptr %3290, i64 %3292
  %3294 = load i8, ptr %3293, align 1, !tbaa !6
  %3295 = trunc i32 %3285 to i8
  %3296 = or i8 %3294, %3295
  store i8 %3296, ptr %3293, align 1, !tbaa !6
  br label %5080

3297:                                             ; preds = %3265
  %3298 = getelementptr inbounds %struct.regmatch_state, ptr %3260, i64 0, i32 2, i32 0, i32 10
  store ptr %214, ptr %3298, align 8, !tbaa !6
  %3299 = getelementptr inbounds %struct.regmatch_state, ptr %3260, i64 0, i32 2, i32 0, i32 8
  %3300 = load i32, ptr %3299, align 8, !tbaa !6
  %3301 = load i32, ptr %4, align 4, !tbaa !34
  %3302 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3300, i32 noundef %3301)
  store i32 %3302, ptr %192, align 8, !tbaa !6
  %3303 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3303, ptr %194, align 4, !tbaa !6
  %3304 = load ptr, ptr %207, align 8, !tbaa !6
  %3305 = getelementptr inbounds %struct.regmatch_state, ptr %3304, i64 0, i32 2, i32 0, i32 4
  %3306 = load ptr, ptr %3305, align 8, !tbaa !6
  %3307 = getelementptr inbounds %struct.regnode, ptr %3306, i64 2
  store i32 102, ptr %188, align 8, !tbaa !276
  br label %4940

3308:                                             ; preds = %221
  %3309 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %3310 = load i32, ptr %3309, align 4, !tbaa !224
  %3311 = zext i32 %3310 to i64
  %3312 = getelementptr inbounds %struct.regnode, ptr %215, i64 %3311
  %3313 = icmp eq i32 %3310, 0
  %3314 = select i1 %3313, ptr null, ptr %3312
  br label %3315

3315:                                             ; preds = %221, %3308
  %3316 = phi ptr [ %3314, %3308 ], [ %186, %221 ]
  %3317 = phi ptr [ %3309, %3308 ], [ %215, %221 ]
  %3318 = getelementptr inbounds %struct.regnode, ptr %3317, i64 1
  %3319 = load i32, ptr %193, align 8, !tbaa !37
  store i32 %3319, ptr %207, align 8, !tbaa !6
  %3320 = load i32, ptr %197, align 4, !tbaa !36
  store i32 %3320, ptr %208, align 4, !tbaa !6
  store ptr %3316, ptr %196, align 8, !tbaa !6
  %3321 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3321, ptr %192, align 8, !tbaa !6
  store i32 110, ptr %188, align 8, !tbaa !276
  br i1 %39, label %4916, label %4940

3322:                                             ; preds = %221
  %3323 = load i8, ptr %215, align 2, !tbaa !139
  %3324 = icmp eq i8 %3323, 0
  br i1 %3324, label %3325, label %3333

3325:                                             ; preds = %3322
  %3326 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %3327 = load ptr, ptr %3326, align 8, !tbaa !223
  %3328 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %3329 = load i32, ptr %3328, align 4, !tbaa !224
  %3330 = zext i32 %3329 to i64
  %3331 = getelementptr inbounds %struct.reg_data, ptr %3327, i64 0, i32 2, i64 %3330
  %3332 = load ptr, ptr %3331, align 8, !tbaa !13
  br label %3333

3333:                                             ; preds = %3322, %3325
  %3334 = phi ptr [ %3332, %3325 ], [ null, %3322 ]
  store ptr %3334, ptr %192, align 8, !tbaa !6
  store i32 130, ptr %188, align 8, !tbaa !276
  br label %4940

3335:                                             ; preds = %221
  %3336 = load ptr, ptr %192, align 8, !tbaa !6
  %3337 = icmp eq ptr %3336, null
  %3338 = select i1 %3337, ptr %174, ptr %3336
  br label %5080

3339:                                             ; preds = %221
  %3340 = and i8 %176, 1
  %3341 = icmp eq i8 %3340, 0
  %3342 = select i1 %3341, i8 %176, i8 0
  %3343 = select i1 %3341, i8 %177, i8 0
  %3344 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3345 = load i32, ptr %192, align 8, !tbaa !6
  %3346 = icmp sgt i32 %3344, %3345
  br i1 %3346, label %3347, label %3348

3347:                                             ; preds = %3339
  call void @Perl_leave_scope(i32 noundef %3345) #12
  br label %3348

3348:                                             ; preds = %3347, %3339
  %3349 = load i32, ptr %193, align 8, !tbaa !37
  %3350 = load i32, ptr %207, align 8, !tbaa !6
  %3351 = icmp ugt i32 %3349, %3350
  br i1 %3351, label %3352, label %3361

3352:                                             ; preds = %3348
  %3353 = load ptr, ptr %195, align 8, !tbaa !38
  br label %3354

3354:                                             ; preds = %3352, %3354
  %3355 = phi i32 [ %3349, %3352 ], [ %3358, %3354 ]
  %3356 = zext i32 %3355 to i64
  %3357 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3353, i64 %3356, i32 1
  store i64 -1, ptr %3357, align 8, !tbaa !42
  %3358 = add i32 %3355, -1
  %3359 = load i32, ptr %207, align 8, !tbaa !6
  %3360 = icmp ugt i32 %3358, %3359
  br i1 %3360, label %3354, label %3361, !llvm.loop !336

3361:                                             ; preds = %3354, %3348
  %3362 = phi i32 [ %3349, %3348 ], [ %3358, %3354 ]
  store i32 %3362, ptr %193, align 8, !tbaa !37
  %3363 = load i32, ptr %208, align 4, !tbaa !6
  store i32 %3363, ptr %197, align 4, !tbaa !36
  %3364 = load ptr, ptr %196, align 8, !tbaa !6
  %3365 = icmp eq ptr %3364, null
  br i1 %3365, label %5080, label %3366

3366:                                             ; preds = %3361
  %3367 = getelementptr inbounds %struct.regnode, ptr %3364, i64 0, i32 1
  %3368 = load i8, ptr %3367, align 1, !tbaa !119
  switch i8 %3368, label %5080 [
    i8 30, label %3369
    i8 62, label %3369
  ]

3369:                                             ; preds = %3366, %3366, %752, %4651
  %3370 = phi i8 [ %172, %3366 ], [ %172, %3366 ], [ %172, %752 ], [ %4644, %4651 ]
  %3371 = phi i8 [ %3342, %3366 ], [ %3342, %3366 ], [ %609, %752 ], [ %176, %4651 ]
  %3372 = phi i8 [ %3343, %3366 ], [ %3343, %3366 ], [ %610, %752 ], [ %177, %4651 ]
  %3373 = phi ptr [ %214, %3366 ], [ %214, %3366 ], [ %741, %752 ], [ %4652, %4651 ]
  %3374 = phi ptr [ %3364, %3366 ], [ %3364, %3366 ], [ %755, %752 ], [ %4658, %4651 ]
  br label %132, !llvm.loop !337

3375:                                             ; preds = %221
  store ptr %215, ptr %200, align 8, !tbaa !6
  %3376 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  %3377 = load i32, ptr %193, align 8, !tbaa !37
  store i32 %3377, ptr %194, align 4, !tbaa !6
  %3378 = load i32, ptr %197, align 4, !tbaa !36
  store i32 %3378, ptr %196, align 8, !tbaa !6
  %3379 = load i8, ptr %215, align 2, !tbaa !139
  %3380 = icmp eq i8 %3379, 0
  br i1 %3380, label %3389, label %3381

3381:                                             ; preds = %3375
  %3382 = zext i8 %3379 to i32
  %3383 = load i32, ptr %4, align 4, !tbaa !34
  %3384 = call i32 @llvm.umax.i32(i32 %3383, i32 %3382)
  store i32 %3384, ptr %4, align 4
  %3385 = getelementptr inbounds %struct.regnode, ptr %215, i64 2, i32 2
  %3386 = load i16, ptr %3385, align 2, !tbaa !275
  %3387 = zext i16 %3386 to i64
  %3388 = getelementptr inbounds %struct.regnode, ptr %3376, i64 %3387
  br label %3389

3389:                                             ; preds = %3381, %3375
  %3390 = phi ptr [ %3388, %3381 ], [ %3376, %3375 ]
  store ptr %3390, ptr %205, align 8, !tbaa !6
  store ptr %186, ptr %206, align 8, !tbaa !6
  store i32 0, ptr %201, align 4, !tbaa !6
  store i32 0, ptr %199, align 8, !tbaa !6
  %3391 = and i8 %212, 1
  store i8 %3391, ptr %198, align 4, !tbaa !6
  store i32 -1001, ptr %207, align 8, !tbaa !6
  %3392 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %3392, ptr %192, align 8, !tbaa !6
  %3393 = icmp eq i8 %3391, 0
  br i1 %3393, label %3398, label %3394

3394:                                             ; preds = %3389
  %3395 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 3
  %3396 = load i16, ptr %3395, align 2, !tbaa !332
  %3397 = icmp eq i16 %3396, 0
  br i1 %3397, label %3489, label %3402

3398:                                             ; preds = %3389
  %3399 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 4
  %3400 = load i16, ptr %3399, align 2, !tbaa !334
  %3401 = icmp eq i16 %3400, 0
  br i1 %3401, label %3489, label %3402

3402:                                             ; preds = %3731, %3726, %3454, %3394, %3398
  %3403 = phi i8 [ %212, %3454 ], [ 0, %3398 ], [ 0, %3394 ], [ %212, %3726 ], [ %212, %3731 ]
  %3404 = load ptr, ptr %205, align 8, !tbaa !6
  br label %4892

3405:                                             ; preds = %221
  %3406 = load i32, ptr %199, align 8, !tbaa !6
  %3407 = add nsw i32 %3406, 1
  store i32 %3407, ptr %199, align 8, !tbaa !6
  %3408 = icmp eq i32 %3406, 0
  br i1 %3408, label %3409, label %3444

3409:                                             ; preds = %3405
  %3410 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %3411 = icmp eq i8 %3410, 0
  %3412 = load ptr, ptr %204, align 8, !tbaa !294
  br i1 %3411, label %3427, label %3413

3413:                                             ; preds = %3409
  %3414 = icmp ult ptr %3412, %214
  %3415 = load i32, ptr %201, align 4, !tbaa !6
  br i1 %3414, label %3416, label %3432

3416:                                             ; preds = %3413, %3416
  %3417 = phi i32 [ %3419, %3416 ], [ %3415, %3413 ]
  %3418 = phi ptr [ %3425, %3416 ], [ %3412, %3413 ]
  %3419 = add nsw i32 %3417, 1
  store i32 %3419, ptr %201, align 4, !tbaa !6
  %3420 = load i8, ptr %3418, align 1, !tbaa !6
  %3421 = zext i8 %3420 to i64
  %3422 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3421
  %3423 = load i8, ptr %3422, align 1, !tbaa !6
  %3424 = zext i8 %3423 to i64
  %3425 = getelementptr inbounds i8, ptr %3418, i64 %3424
  %3426 = icmp ult ptr %3425, %214
  br i1 %3426, label %3416, label %3432, !llvm.loop !338

3427:                                             ; preds = %3409
  %3428 = ptrtoint ptr %214 to i64
  %3429 = ptrtoint ptr %3412 to i64
  %3430 = sub i64 %3428, %3429
  %3431 = trunc i64 %3430 to i32
  store i32 %3431, ptr %201, align 4, !tbaa !6
  br label %3432

3432:                                             ; preds = %3416, %3413, %3427
  %3433 = phi i32 [ %3415, %3413 ], [ %3431, %3427 ], [ %3419, %3416 ]
  %3434 = icmp eq i32 %3433, 0
  br i1 %3434, label %3435, label %3444

3435:                                             ; preds = %3432
  %3436 = load i8, ptr %198, align 4, !tbaa !6, !range !97, !noundef !98
  %3437 = icmp eq i8 %3436, 0
  %3438 = load ptr, ptr %200, align 8, !tbaa !6
  %3439 = getelementptr inbounds %struct.regnode_2, ptr %3438, i64 0, i32 3
  %3440 = getelementptr inbounds %struct.regnode_2, ptr %3438, i64 0, i32 4
  %3441 = select i1 %3437, ptr %3440, ptr %3439
  %3442 = load i16, ptr %3441, align 2, !tbaa !152
  %3443 = zext i16 %3442 to i32
  store i32 %3443, ptr %199, align 8, !tbaa !6
  br label %3444

3444:                                             ; preds = %3432, %3435, %3405
  %3445 = phi i32 [ %3407, %3432 ], [ %3443, %3435 ], [ %3407, %3405 ]
  br i1 %202, label %3454, label %3446

3446:                                             ; preds = %3444
  %3447 = load i32, ptr %203, align 8, !tbaa !6
  %3448 = icmp eq i32 %3447, 0
  br i1 %3448, label %3454, label %3449

3449:                                             ; preds = %3446
  %3450 = load ptr, ptr %200, align 8, !tbaa !6
  %3451 = load i8, ptr %3450, align 2, !tbaa !139
  %3452 = zext i8 %3451 to i32
  %3453 = icmp eq i32 %3447, %3452
  br i1 %3453, label %4503, label %3454

3454:                                             ; preds = %3449, %3446, %3444
  %3455 = load i8, ptr %198, align 4, !tbaa !6, !range !97, !noundef !98
  %3456 = icmp eq i8 %3455, 0
  %3457 = load ptr, ptr %200, align 8, !tbaa !6
  %3458 = getelementptr inbounds %struct.regnode_2, ptr %3457, i64 0, i32 3
  %3459 = getelementptr inbounds %struct.regnode_2, ptr %3457, i64 0, i32 4
  %3460 = select i1 %3456, ptr %3459, ptr %3458
  %3461 = load i16, ptr %3460, align 2, !tbaa !152
  %3462 = icmp eq i16 %3461, 32767
  %3463 = zext i16 %3461 to i32
  %3464 = icmp slt i32 %3445, %3463
  %3465 = select i1 %3462, i1 true, i1 %3464
  br i1 %3465, label %3402, label %3489

3466:                                             ; preds = %221
  %3467 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3468 = load i32, ptr %192, align 8, !tbaa !6
  %3469 = icmp sgt i32 %3467, %3468
  br i1 %3469, label %3470, label %3471

3470:                                             ; preds = %3466
  call void @Perl_leave_scope(i32 noundef %3468) #12
  br label %3471

3471:                                             ; preds = %3470, %3466
  %3472 = load i8, ptr %198, align 4, !tbaa !6, !range !97, !noundef !98
  %3473 = icmp eq i8 %3472, 0
  br i1 %3473, label %3474, label %5076

3474:                                             ; preds = %3471
  %3475 = load i32, ptr %199, align 8, !tbaa !6
  %3476 = load ptr, ptr %200, align 8, !tbaa !6
  %3477 = getelementptr inbounds %struct.regnode_2, ptr %3476, i64 0, i32 3
  %3478 = load i16, ptr %3477, align 2, !tbaa !332
  %3479 = zext i16 %3478 to i32
  %3480 = icmp slt i32 %3475, %3479
  br i1 %3480, label %5076, label %3481

3481:                                             ; preds = %3474
  br i1 %202, label %3489, label %3482

3482:                                             ; preds = %3481
  %3483 = load i32, ptr %203, align 8, !tbaa !6
  %3484 = icmp eq i32 %3483, 0
  br i1 %3484, label %3489, label %3485

3485:                                             ; preds = %3482
  %3486 = load i8, ptr %3476, align 2, !tbaa !139
  %3487 = zext i8 %3486 to i32
  %3488 = icmp eq i32 %3483, %3487
  br i1 %3488, label %5076, label %3489

3489:                                             ; preds = %3454, %3813, %3809, %3481, %3482, %3485, %3394, %3398
  %3490 = phi i8 [ %212, %3485 ], [ %212, %3482 ], [ %212, %3481 ], [ 0, %3394 ], [ 0, %3398 ], [ %212, %3809 ], [ %212, %3813 ], [ %212, %3454 ]
  %3491 = phi i32 [ %222, %3485 ], [ %222, %3482 ], [ %222, %3481 ], [ %222, %3394 ], [ %222, %3398 ], [ -10, %3809 ], [ %3815, %3813 ], [ %222, %3454 ]
  %3492 = phi ptr [ %214, %3485 ], [ %214, %3482 ], [ %214, %3481 ], [ %214, %3394 ], [ %214, %3398 ], [ %3810, %3809 ], [ %3810, %3813 ], [ %214, %3454 ]
  %3493 = phi ptr [ %215, %3485 ], [ %215, %3482 ], [ %215, %3481 ], [ %3390, %3394 ], [ %3390, %3398 ], [ %215, %3809 ], [ %215, %3813 ], [ %215, %3454 ]
  %3494 = load i32, ptr %207, align 8, !tbaa !6
  %3495 = icmp eq i32 %3494, -1001
  br i1 %3495, label %3496, label %3569

3496:                                             ; preds = %3489
  store i32 -1000, ptr %208, align 4, !tbaa !6
  store i32 -1000, ptr %207, align 8, !tbaa !6
  %3497 = load ptr, ptr %206, align 8, !tbaa !6
  %3498 = getelementptr inbounds %struct.regnode, ptr %3497, i64 0, i32 1
  %3499 = load i8, ptr %3498, align 1, !tbaa !119
  %3500 = zext i8 %3499 to i64
  %3501 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3500
  %3502 = load i8, ptr %3501, align 1, !tbaa !6
  switch i8 %3502, label %3503 [
    i8 31, label %3561
    i8 51, label %3561
  ]

3503:                                             ; preds = %3496
  switch i8 %3499, label %3510 [
    i8 49, label %3516
    i8 50, label %3504
    i8 68, label %3516
    i8 65, label %3516
    i8 63, label %3516
    i8 43, label %3516
    i8 69, label %3516
    i8 90, label %3516
  ]

3504:                                             ; preds = %3503
  br i1 %202, label %3516, label %3505

3505:                                             ; preds = %3504
  %3506 = load i32, ptr %203, align 8, !tbaa !6
  %3507 = getelementptr inbounds %struct.regnode_1, ptr %3497, i64 0, i32 3
  %3508 = load i32, ptr %3507, align 4, !tbaa !224
  %3509 = icmp eq i32 %3506, %3508
  br i1 %3509, label %3510, label %3516

3510:                                             ; preds = %3503, %3505
  %3511 = icmp eq i8 %3502, 44
  br i1 %3511, label %3512, label %3569

3512:                                             ; preds = %3510
  %3513 = getelementptr inbounds %struct.regnode_2, ptr %3497, i64 0, i32 3
  %3514 = load i16, ptr %3513, align 2, !tbaa !332
  %3515 = icmp eq i16 %3514, 0
  br i1 %3515, label %3569, label %3518

3516:                                             ; preds = %3503, %3503, %3503, %3503, %3503, %3503, %3503, %3505, %3504
  %3517 = icmp eq i8 %3502, 31
  br i1 %3517, label %3561, label %3518

3518:                                             ; preds = %3516, %3512
  br label %3519

3519:                                             ; preds = %3518, %3556
  %3520 = phi i8 [ %3560, %3556 ], [ %3499, %3518 ]
  %3521 = phi ptr [ %3558, %3556 ], [ %3497, %3518 ]
  switch i8 %3520, label %3528 [
    i8 49, label %3539
    i8 50, label %3522
    i8 65, label %3556
    i8 43, label %3539
    i8 63, label %3539
    i8 68, label %3539
    i8 69, label %3539
    i8 90, label %3539
  ]

3522:                                             ; preds = %3519
  br i1 %202, label %3539, label %3523

3523:                                             ; preds = %3522
  %3524 = load i32, ptr %203, align 8, !tbaa !6
  %3525 = getelementptr inbounds %struct.regnode_1, ptr %3521, i64 0, i32 3
  %3526 = load i32, ptr %3525, align 4, !tbaa !224
  %3527 = icmp eq i32 %3524, %3526
  br i1 %3527, label %3528, label %3539

3528:                                             ; preds = %3519, %3523
  %3529 = zext i8 %3520 to i64
  %3530 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3529
  %3531 = load i8, ptr %3530, align 1, !tbaa !6
  %3532 = icmp eq i8 %3531, 44
  br i1 %3532, label %3533, label %3561

3533:                                             ; preds = %3528
  %3534 = getelementptr inbounds %struct.regnode_2, ptr %3521, i64 0, i32 3
  %3535 = load i16, ptr %3534, align 2, !tbaa !332
  %3536 = icmp eq i16 %3535, 0
  br i1 %3536, label %3569, label %3537

3537:                                             ; preds = %3533
  %3538 = icmp eq i8 %3520, 65
  br i1 %3538, label %3556, label %3539

3539:                                             ; preds = %3519, %3519, %3519, %3519, %3519, %3519, %3522, %3523, %3537
  %3540 = zext i8 %3520 to i64
  %3541 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3540
  %3542 = load i8, ptr %3541, align 1, !tbaa !6
  %3543 = icmp eq i8 %3542, 44
  br i1 %3543, label %3556, label %3544

3544:                                             ; preds = %3539
  switch i8 %3520, label %3552 [
    i8 43, label %3556
    i8 63, label %3545
  ]

3545:                                             ; preds = %3544
  %3546 = load i8, ptr %3521, align 2, !tbaa !139
  %3547 = icmp eq i8 %3546, 0
  br i1 %3547, label %3556, label %3548

3548:                                             ; preds = %3545
  %3549 = getelementptr inbounds %struct.regnode_1, ptr %3521, i64 0, i32 3
  %3550 = load i32, ptr %3549, align 4, !tbaa !224
  %3551 = zext i32 %3550 to i64
  br label %3556

3552:                                             ; preds = %3544
  %3553 = getelementptr inbounds %struct.regnode, ptr %3521, i64 0, i32 2
  %3554 = load i16, ptr %3553, align 2, !tbaa !275
  %3555 = zext i16 %3554 to i64
  br label %3556

3556:                                             ; preds = %3545, %3544, %3537, %3539, %3519, %3548, %3552
  %3557 = phi i64 [ %3551, %3548 ], [ %3555, %3552 ], [ 2, %3519 ], [ 2, %3539 ], [ 2, %3537 ], [ 1, %3544 ], [ 2, %3545 ]
  %3558 = getelementptr inbounds %struct.regnode, ptr %3521, i64 %3557
  %3559 = getelementptr inbounds %struct.regnode, ptr %3521, i64 %3557, i32 1
  %3560 = load i8, ptr %3559, align 1, !tbaa !119
  br label %3519, !llvm.loop !339

3561:                                             ; preds = %3528, %3516, %3496, %3496
  %3562 = phi i8 [ %3502, %3496 ], [ %3502, %3496 ], [ %3502, %3516 ], [ %3531, %3528 ]
  %3563 = phi ptr [ %3497, %3496 ], [ %3497, %3496 ], [ %3497, %3516 ], [ %3521, %3528 ]
  %3564 = icmp eq i8 %3562, 31
  br i1 %3564, label %3565, label %3569

3565:                                             ; preds = %3561
  %3566 = load i8, ptr %52, align 1, !tbaa !51, !range !97, !noundef !98
  %3567 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %3568 = call fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef nonnull %3563, ptr noundef nonnull %207, ptr noundef nonnull %209, ptr noundef nonnull %208, ptr noundef nonnull %210, i8 %3566, i8 %3567)
  br i1 %3568, label %3569, label %5076

3569:                                             ; preds = %3533, %3565, %3561, %3510, %3512, %3489
  %3570 = icmp slt i32 %3491, 0
  br i1 %3570, label %3594, label %3571

3571:                                             ; preds = %3569
  %3572 = load i32, ptr %207, align 8, !tbaa !6
  %3573 = icmp eq i32 %3572, -1000
  br i1 %3573, label %3594, label %3574

3574:                                             ; preds = %3571
  %3575 = icmp ugt i32 %3491, 127
  %3576 = and i1 %23, %3575
  br i1 %3576, label %3577, label %3589

3577:                                             ; preds = %3574
  %3578 = load i8, ptr %3492, align 1, !tbaa !6
  %3579 = zext i8 %3578 to i64
  %3580 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3579
  %3581 = load i8, ptr %3580, align 1, !tbaa !6
  %3582 = zext i8 %3581 to i64
  %3583 = call i32 @bcmp(ptr nonnull %3492, ptr nonnull %209, i64 %3582)
  %3584 = icmp eq i32 %3583, 0
  br i1 %3584, label %3594, label %3585

3585:                                             ; preds = %3577
  %3586 = call i32 @bcmp(ptr nonnull %3492, ptr nonnull %210, i64 %3582)
  %3587 = icmp eq i32 %3586, 0
  br i1 %3587, label %3594, label %3588

3588:                                             ; preds = %3585, %3591
  br label %211

3589:                                             ; preds = %3574
  %3590 = icmp eq i32 %3491, %3572
  br i1 %3590, label %3594, label %3591

3591:                                             ; preds = %3589
  %3592 = load i32, ptr %208, align 4, !tbaa !6
  %3593 = icmp eq i32 %3491, %3592
  br i1 %3593, label %3594, label %3588

3594:                                             ; preds = %3585, %3577, %3591, %3589, %3571, %3569
  %3595 = load ptr, ptr %200, align 8, !tbaa !6
  %3596 = load i8, ptr %3595, align 2, !tbaa !139
  %3597 = icmp eq i8 %3596, 0
  br i1 %3597, label %3700, label %3598

3598:                                             ; preds = %3594
  %3599 = zext i8 %3596 to i32
  %3600 = load i32, ptr %199, align 8, !tbaa !6
  %3601 = icmp eq i32 %3600, 0
  br i1 %3601, label %3684, label %3602

3602:                                             ; preds = %3598
  %3603 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %3604 = icmp eq i8 %3603, 0
  %3605 = load i32, ptr %201, align 4, !tbaa !6
  %3606 = sub nsw i32 0, %3605
  %3607 = sext i32 %3606 to i64
  br i1 %3604, label %3666, label %3608

3608:                                             ; preds = %3602
  %3609 = icmp slt i32 %3605, 1
  %3610 = select i1 %3609, ptr %58, ptr %59
  %3611 = load ptr, ptr %3610, align 8, !tbaa !13
  %3612 = ptrtoint ptr %3611 to i64
  br i1 %3609, label %3615, label %3613

3613:                                             ; preds = %3608
  %3614 = icmp ugt ptr %3492, %3611
  br i1 %3614, label %3632, label %3668

3615:                                             ; preds = %3608
  %3616 = icmp ne i32 %3605, 0
  %3617 = icmp ult ptr %3492, %3611
  %3618 = and i1 %3616, %3617
  br i1 %3618, label %3619, label %3668

3619:                                             ; preds = %3615, %3619
  %3620 = phi ptr [ %3628, %3619 ], [ %3492, %3615 ]
  %3621 = phi i64 [ %3622, %3619 ], [ %3607, %3615 ]
  %3622 = add nsw i64 %3621, -1
  %3623 = load i8, ptr %3620, align 1, !tbaa !6
  %3624 = zext i8 %3623 to i64
  %3625 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3624
  %3626 = load i8, ptr %3625, align 1, !tbaa !6
  %3627 = zext i8 %3626 to i64
  %3628 = getelementptr inbounds i8, ptr %3620, i64 %3627
  %3629 = icmp ne i64 %3622, 0
  %3630 = icmp ult ptr %3628, %3611
  %3631 = select i1 %3629, i1 %3630, i1 false
  br i1 %3631, label %3619, label %3668, !llvm.loop !126

3632:                                             ; preds = %3613, %3661
  %3633 = phi i64 [ %3636, %3661 ], [ %3607, %3613 ]
  %3634 = phi ptr [ %3662, %3661 ], [ %3492, %3613 ]
  %3635 = ptrtoint ptr %3634 to i64
  %3636 = add nsw i64 %3633, 1
  %3637 = getelementptr inbounds i8, ptr %3634, i64 -1
  %3638 = load i8, ptr %3637, align 1, !tbaa !6
  %3639 = icmp sgt i8 %3638, -1
  br i1 %3639, label %3661, label %3640

3640:                                             ; preds = %3632
  %3641 = icmp ugt ptr %3637, %3611
  br i1 %3641, label %3642, label %3656

3642:                                             ; preds = %3640
  %3643 = getelementptr i8, ptr %3634, i64 %3612
  %3644 = sub i64 0, %3635
  %3645 = getelementptr i8, ptr %3643, i64 %3644
  br label %3646

3646:                                             ; preds = %3651, %3642
  %3647 = phi ptr [ %3652, %3651 ], [ %3637, %3642 ]
  %3648 = load i8, ptr %3647, align 1, !tbaa !6
  %3649 = and i8 %3648, -64
  %3650 = icmp eq i8 %3649, -128
  br i1 %3650, label %3651, label %3656

3651:                                             ; preds = %3646
  %3652 = getelementptr inbounds i8, ptr %3647, i64 -1
  %3653 = icmp ugt ptr %3652, %3611
  br i1 %3653, label %3646, label %3654, !llvm.loop !127

3654:                                             ; preds = %3651
  %3655 = load i8, ptr %3645, align 1, !tbaa !6
  br label %3656

3656:                                             ; preds = %3646, %3654, %3640
  %3657 = phi ptr [ %3637, %3640 ], [ %3645, %3654 ], [ %3647, %3646 ]
  %3658 = phi i8 [ %3638, %3640 ], [ %3655, %3654 ], [ %3648, %3646 ]
  %3659 = icmp ugt i8 %3658, -63
  br i1 %3659, label %3661, label %3660

3660:                                             ; preds = %3656
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %3661

3661:                                             ; preds = %3660, %3656, %3632
  %3662 = phi ptr [ %3657, %3656 ], [ %3657, %3660 ], [ %3637, %3632 ]
  %3663 = icmp ne i64 %3636, 0
  %3664 = icmp ugt ptr %3662, %3611
  %3665 = and i1 %3663, %3664
  br i1 %3665, label %3632, label %3668, !llvm.loop !128

3666:                                             ; preds = %3602
  %3667 = getelementptr inbounds i8, ptr %3492, i64 %3607
  br label %3668

3668:                                             ; preds = %3661, %3619, %3615, %3613, %3666
  %3669 = phi ptr [ %3667, %3666 ], [ %3492, %3615 ], [ %3492, %3613 ], [ %3628, %3619 ], [ %3662, %3661 ]
  %3670 = load ptr, ptr %59, align 8, !tbaa !53
  %3671 = ptrtoint ptr %3669 to i64
  %3672 = ptrtoint ptr %3670 to i64
  %3673 = sub i64 %3671, %3672
  %3674 = load ptr, ptr %195, align 8, !tbaa !38
  %3675 = zext i8 %3596 to i64
  %3676 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3674, i64 %3675
  store i64 %3673, ptr %3676, align 8, !tbaa !39
  %3677 = ptrtoint ptr %3492 to i64
  %3678 = sub i64 %3677, %3672
  %3679 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3674, i64 %3675, i32 1
  store i64 %3678, ptr %3679, align 8, !tbaa !42
  %3680 = load i32, ptr %193, align 8, !tbaa !37
  %3681 = icmp ult i32 %3680, %3599
  br i1 %3681, label %3682, label %3683

3682:                                             ; preds = %3668
  store i32 %3599, ptr %193, align 8, !tbaa !37
  br label %3683

3683:                                             ; preds = %3682, %3668
  store i32 %3599, ptr %197, align 4, !tbaa !36
  br label %3688

3684:                                             ; preds = %3598
  %3685 = load ptr, ptr %195, align 8, !tbaa !38
  %3686 = zext i8 %3596 to i64
  %3687 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3685, i64 %3686, i32 1
  store i64 -1, ptr %3687, align 8, !tbaa !42
  br label %3688

3688:                                             ; preds = %3684, %3683
  br i1 %202, label %3700, label %3689

3689:                                             ; preds = %3688
  %3690 = load i32, ptr %203, align 8, !tbaa !6
  %3691 = icmp eq i32 %3690, 0
  br i1 %3691, label %3700, label %3692

3692:                                             ; preds = %3689
  %3693 = load ptr, ptr %200, align 8, !tbaa !6
  %3694 = load i8, ptr %3693, align 2, !tbaa !139
  %3695 = zext i8 %3694 to i32
  %3696 = icmp eq i32 %3690, %3695
  br i1 %3696, label %3697, label %3700

3697:                                             ; preds = %3692
  %3698 = load i32, ptr %199, align 8, !tbaa !6
  %3699 = icmp eq i32 %3698, 0
  br i1 %3699, label %5080, label %4503

3700:                                             ; preds = %3688, %3689, %3692, %3594
  %3701 = phi ptr [ null, %3688 ], [ %180, %3689 ], [ %180, %3692 ], [ %180, %3594 ]
  %3702 = load ptr, ptr %206, align 8, !tbaa !6
  store i32 114, ptr %188, align 8, !tbaa !276
  br label %4940

3703:                                             ; preds = %221
  %3704 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3705 = load i32, ptr %192, align 8, !tbaa !6
  %3706 = icmp sgt i32 %3704, %3705
  br i1 %3706, label %3707, label %3708

3707:                                             ; preds = %3703
  call void @Perl_leave_scope(i32 noundef %3705) #12
  br label %3708

3708:                                             ; preds = %3707, %3703
  %3709 = load i32, ptr %193, align 8, !tbaa !37
  %3710 = load i32, ptr %194, align 4, !tbaa !6
  %3711 = icmp ugt i32 %3709, %3710
  br i1 %3711, label %3712, label %3721

3712:                                             ; preds = %3708
  %3713 = load ptr, ptr %195, align 8, !tbaa !38
  br label %3714

3714:                                             ; preds = %3712, %3714
  %3715 = phi i32 [ %3709, %3712 ], [ %3718, %3714 ]
  %3716 = zext i32 %3715 to i64
  %3717 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3713, i64 %3716, i32 1
  store i64 -1, ptr %3717, align 8, !tbaa !42
  %3718 = add i32 %3715, -1
  %3719 = load i32, ptr %194, align 4, !tbaa !6
  %3720 = icmp ugt i32 %3718, %3719
  br i1 %3720, label %3714, label %3721, !llvm.loop !340

3721:                                             ; preds = %3714, %3708
  %3722 = phi i32 [ %3709, %3708 ], [ %3718, %3714 ]
  store i32 %3722, ptr %193, align 8, !tbaa !37
  %3723 = load i32, ptr %196, align 8, !tbaa !6
  store i32 %3723, ptr %197, align 4, !tbaa !36
  %3724 = load i8, ptr %198, align 4, !tbaa !6, !range !97, !noundef !98
  %3725 = icmp eq i8 %3724, 0
  br i1 %3725, label %3735, label %3726

3726:                                             ; preds = %3721
  %3727 = load ptr, ptr %200, align 8, !tbaa !6
  %3728 = getelementptr inbounds %struct.regnode_2, ptr %3727, i64 0, i32 4
  %3729 = load i16, ptr %3728, align 2, !tbaa !334
  %3730 = icmp eq i16 %3729, 32767
  br i1 %3730, label %3402, label %3731

3731:                                             ; preds = %3726
  %3732 = zext i16 %3729 to i32
  %3733 = load i32, ptr %199, align 8, !tbaa !6
  %3734 = icmp eq i32 %3733, %3732
  br i1 %3734, label %5080, label %3402

3735:                                             ; preds = %3721
  %3736 = load i32, ptr %199, align 8, !tbaa !6
  %3737 = load ptr, ptr %200, align 8, !tbaa !6
  %3738 = getelementptr inbounds %struct.regnode_2, ptr %3737, i64 0, i32 3
  %3739 = load i16, ptr %3738, align 2, !tbaa !332
  %3740 = zext i16 %3739 to i32
  %3741 = icmp eq i32 %3736, %3740
  br i1 %3741, label %5076, label %3742

3742:                                             ; preds = %3735
  %3743 = add nsw i32 %3736, -1
  store i32 %3743, ptr %199, align 8, !tbaa !6
  %3744 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %3745 = icmp eq i8 %3744, 0
  %3746 = load i32, ptr %201, align 4, !tbaa !6
  %3747 = sub nsw i32 0, %3746
  %3748 = sext i32 %3747 to i64
  br i1 %3745, label %3807, label %3749

3749:                                             ; preds = %3742
  %3750 = icmp slt i32 %3746, 1
  %3751 = select i1 %3750, ptr %58, ptr %59
  %3752 = load ptr, ptr %3751, align 8, !tbaa !13
  %3753 = ptrtoint ptr %3752 to i64
  br i1 %3750, label %3756, label %3754

3754:                                             ; preds = %3749
  %3755 = icmp ugt ptr %214, %3752
  br i1 %3755, label %3773, label %3809

3756:                                             ; preds = %3749
  %3757 = icmp ne i32 %3746, 0
  %3758 = icmp ult ptr %214, %3752
  %3759 = and i1 %3757, %3758
  br i1 %3759, label %3760, label %3809

3760:                                             ; preds = %3756, %3760
  %3761 = phi ptr [ %3769, %3760 ], [ %214, %3756 ]
  %3762 = phi i64 [ %3763, %3760 ], [ %3748, %3756 ]
  %3763 = add nsw i64 %3762, -1
  %3764 = load i8, ptr %3761, align 1, !tbaa !6
  %3765 = zext i8 %3764 to i64
  %3766 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3765
  %3767 = load i8, ptr %3766, align 1, !tbaa !6
  %3768 = zext i8 %3767 to i64
  %3769 = getelementptr inbounds i8, ptr %3761, i64 %3768
  %3770 = icmp ne i64 %3763, 0
  %3771 = icmp ult ptr %3769, %3752
  %3772 = select i1 %3770, i1 %3771, i1 false
  br i1 %3772, label %3760, label %3809, !llvm.loop !126

3773:                                             ; preds = %3754, %3802
  %3774 = phi i64 [ %3777, %3802 ], [ %3748, %3754 ]
  %3775 = phi ptr [ %3803, %3802 ], [ %214, %3754 ]
  %3776 = ptrtoint ptr %3775 to i64
  %3777 = add nsw i64 %3774, 1
  %3778 = getelementptr inbounds i8, ptr %3775, i64 -1
  %3779 = load i8, ptr %3778, align 1, !tbaa !6
  %3780 = icmp sgt i8 %3779, -1
  br i1 %3780, label %3802, label %3781

3781:                                             ; preds = %3773
  %3782 = icmp ugt ptr %3778, %3752
  br i1 %3782, label %3783, label %3797

3783:                                             ; preds = %3781
  %3784 = getelementptr i8, ptr %3775, i64 %3753
  %3785 = sub i64 0, %3776
  %3786 = getelementptr i8, ptr %3784, i64 %3785
  br label %3787

3787:                                             ; preds = %3792, %3783
  %3788 = phi ptr [ %3793, %3792 ], [ %3778, %3783 ]
  %3789 = load i8, ptr %3788, align 1, !tbaa !6
  %3790 = and i8 %3789, -64
  %3791 = icmp eq i8 %3790, -128
  br i1 %3791, label %3792, label %3797

3792:                                             ; preds = %3787
  %3793 = getelementptr inbounds i8, ptr %3788, i64 -1
  %3794 = icmp ugt ptr %3793, %3752
  br i1 %3794, label %3787, label %3795, !llvm.loop !127

3795:                                             ; preds = %3792
  %3796 = load i8, ptr %3786, align 1, !tbaa !6
  br label %3797

3797:                                             ; preds = %3787, %3795, %3781
  %3798 = phi ptr [ %3778, %3781 ], [ %3786, %3795 ], [ %3788, %3787 ]
  %3799 = phi i8 [ %3779, %3781 ], [ %3796, %3795 ], [ %3789, %3787 ]
  %3800 = icmp ugt i8 %3799, -63
  br i1 %3800, label %3802, label %3801

3801:                                             ; preds = %3797
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %3802

3802:                                             ; preds = %3801, %3797, %3773
  %3803 = phi ptr [ %3798, %3797 ], [ %3798, %3801 ], [ %3778, %3773 ]
  %3804 = icmp ne i64 %3777, 0
  %3805 = icmp ugt ptr %3803, %3752
  %3806 = and i1 %3804, %3805
  br i1 %3806, label %3773, label %3809, !llvm.loop !128

3807:                                             ; preds = %3742
  %3808 = getelementptr inbounds i8, ptr %214, i64 %3748
  br label %3809

3809:                                             ; preds = %3802, %3760, %3756, %3754, %3807
  %3810 = phi ptr [ %3808, %3807 ], [ %214, %3756 ], [ %214, %3754 ], [ %3769, %3760 ], [ %3803, %3802 ]
  %3811 = load ptr, ptr %58, align 8, !tbaa !56
  %3812 = icmp ult ptr %3810, %3811
  br i1 %3812, label %3813, label %3489

3813:                                             ; preds = %3809
  %3814 = load i8, ptr %3810, align 1, !tbaa !6
  %3815 = zext i8 %3814 to i32
  br label %3489

3816:                                             ; preds = %221
  %3817 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 0, ptr %3817, align 8, !tbaa !6
  %3818 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 0, ptr %3818, align 4, !tbaa !6
  store i32 32767, ptr %206, align 8, !tbaa !6
  %3819 = getelementptr inbounds %struct.regnode, ptr %215, i64 1
  br label %3858

3820:                                             ; preds = %221
  %3821 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 0, ptr %3821, align 8, !tbaa !6
  %3822 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 1, ptr %3822, align 4, !tbaa !6
  store i32 32767, ptr %206, align 8, !tbaa !6
  %3823 = getelementptr inbounds %struct.regnode, ptr %215, i64 1
  br label %3858

3824:                                             ; preds = %221
  %3825 = load i8, ptr %215, align 2, !tbaa !139
  %3826 = zext i8 %3825 to i32
  %3827 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 %3826, ptr %3827, align 8, !tbaa !6
  %3828 = load i32, ptr %193, align 8, !tbaa !37
  store i32 %3828, ptr %207, align 8, !tbaa !6
  %3829 = load i32, ptr %197, align 4, !tbaa !36
  store i32 %3829, ptr %208, align 4, !tbaa !6
  %3830 = load i32, ptr %4, align 4, !tbaa !34
  %3831 = call i32 @llvm.umax.i32(i32 %3830, i32 %3826)
  store i32 %3831, ptr %4, align 4
  %3832 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 3
  %3833 = load i16, ptr %3832, align 2, !tbaa !332
  %3834 = zext i16 %3833 to i32
  %3835 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 %3834, ptr %3835, align 4, !tbaa !6
  %3836 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 4
  %3837 = load i16, ptr %3836, align 2, !tbaa !334
  %3838 = zext i16 %3837 to i32
  store i32 %3838, ptr %206, align 8, !tbaa !6
  br i1 %202, label %3845, label %3839

3839:                                             ; preds = %3824
  %3840 = load i32, ptr %203, align 8, !tbaa !6
  %3841 = icmp ne i32 %3840, 0
  %3842 = icmp eq i32 %3840, %3826
  %3843 = select i1 %3841, i1 %3842, i1 false
  br i1 %3843, label %3844, label %3845

3844:                                             ; preds = %3839
  store i32 1, ptr %3835, align 4, !tbaa !6
  store i32 1, ptr %206, align 8, !tbaa !6
  br label %3845

3845:                                             ; preds = %3844, %3839, %3824
  %3846 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  %3847 = call ptr @Perl_regnext(ptr noundef nonnull %3846) #12
  br label %3858

3848:                                             ; preds = %221
  %3849 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 0, ptr %3849, align 8, !tbaa !6
  %3850 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 3
  %3851 = load i16, ptr %3850, align 2, !tbaa !332
  %3852 = zext i16 %3851 to i32
  %3853 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 %3852, ptr %3853, align 4, !tbaa !6
  %3854 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 4
  %3855 = load i16, ptr %3854, align 2, !tbaa !334
  %3856 = zext i16 %3855 to i32
  store i32 %3856, ptr %206, align 8, !tbaa !6
  %3857 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  br label %3858

3858:                                             ; preds = %3848, %3845, %3820, %3816
  %3859 = phi ptr [ %3857, %3848 ], [ %3847, %3845 ], [ %3823, %3820 ], [ %3819, %3816 ]
  %3860 = getelementptr inbounds %struct.regnode, ptr %186, i64 0, i32 1
  %3861 = load i8, ptr %3860, align 1, !tbaa !119
  %3862 = zext i8 %3861 to i64
  %3863 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3862
  %3864 = load i8, ptr %3863, align 1, !tbaa !6
  switch i8 %3864, label %3865 [
    i8 31, label %3923
    i8 51, label %3923
  ]

3865:                                             ; preds = %3858
  switch i8 %3861, label %3872 [
    i8 49, label %3878
    i8 50, label %3866
    i8 68, label %3878
    i8 65, label %3878
    i8 63, label %3878
    i8 43, label %3878
    i8 69, label %3878
    i8 90, label %3878
  ]

3866:                                             ; preds = %3865
  br i1 %202, label %3878, label %3867

3867:                                             ; preds = %3866
  %3868 = load i32, ptr %203, align 8, !tbaa !6
  %3869 = getelementptr inbounds %struct.regnode_1, ptr %186, i64 0, i32 3
  %3870 = load i32, ptr %3869, align 4, !tbaa !224
  %3871 = icmp eq i32 %3868, %3870
  br i1 %3871, label %3872, label %3878

3872:                                             ; preds = %3865, %3867
  %3873 = icmp eq i8 %3864, 44
  br i1 %3873, label %3874, label %3933

3874:                                             ; preds = %3872
  %3875 = getelementptr inbounds %struct.regnode_2, ptr %186, i64 0, i32 3
  %3876 = load i16, ptr %3875, align 2, !tbaa !332
  %3877 = icmp eq i16 %3876, 0
  br i1 %3877, label %3933, label %3880

3878:                                             ; preds = %3865, %3865, %3865, %3865, %3865, %3865, %3865, %3867, %3866
  %3879 = icmp eq i8 %3864, 31
  br i1 %3879, label %3923, label %3880

3880:                                             ; preds = %3878, %3874
  br label %3881

3881:                                             ; preds = %3880, %3918
  %3882 = phi i8 [ %3922, %3918 ], [ %3861, %3880 ]
  %3883 = phi ptr [ %3920, %3918 ], [ %186, %3880 ]
  switch i8 %3882, label %3890 [
    i8 49, label %3901
    i8 50, label %3884
    i8 65, label %3918
    i8 43, label %3901
    i8 63, label %3901
    i8 68, label %3901
    i8 69, label %3901
    i8 90, label %3901
  ]

3884:                                             ; preds = %3881
  br i1 %202, label %3901, label %3885

3885:                                             ; preds = %3884
  %3886 = load i32, ptr %203, align 8, !tbaa !6
  %3887 = getelementptr inbounds %struct.regnode_1, ptr %3883, i64 0, i32 3
  %3888 = load i32, ptr %3887, align 4, !tbaa !224
  %3889 = icmp eq i32 %3886, %3888
  br i1 %3889, label %3890, label %3901

3890:                                             ; preds = %3881, %3885
  %3891 = zext i8 %3882 to i64
  %3892 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3891
  %3893 = load i8, ptr %3892, align 1, !tbaa !6
  %3894 = icmp eq i8 %3893, 44
  br i1 %3894, label %3895, label %3923

3895:                                             ; preds = %3890
  %3896 = getelementptr inbounds %struct.regnode_2, ptr %3883, i64 0, i32 3
  %3897 = load i16, ptr %3896, align 2, !tbaa !332
  %3898 = icmp eq i16 %3897, 0
  br i1 %3898, label %3933, label %3899

3899:                                             ; preds = %3895
  %3900 = icmp eq i8 %3882, 65
  br i1 %3900, label %3918, label %3901

3901:                                             ; preds = %3881, %3881, %3881, %3881, %3881, %3881, %3884, %3885, %3899
  %3902 = zext i8 %3882 to i64
  %3903 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3902
  %3904 = load i8, ptr %3903, align 1, !tbaa !6
  %3905 = icmp eq i8 %3904, 44
  br i1 %3905, label %3918, label %3906

3906:                                             ; preds = %3901
  switch i8 %3882, label %3914 [
    i8 43, label %3918
    i8 63, label %3907
  ]

3907:                                             ; preds = %3906
  %3908 = load i8, ptr %3883, align 2, !tbaa !139
  %3909 = icmp eq i8 %3908, 0
  br i1 %3909, label %3918, label %3910

3910:                                             ; preds = %3907
  %3911 = getelementptr inbounds %struct.regnode_1, ptr %3883, i64 0, i32 3
  %3912 = load i32, ptr %3911, align 4, !tbaa !224
  %3913 = zext i32 %3912 to i64
  br label %3918

3914:                                             ; preds = %3906
  %3915 = getelementptr inbounds %struct.regnode, ptr %3883, i64 0, i32 2
  %3916 = load i16, ptr %3915, align 2, !tbaa !275
  %3917 = zext i16 %3916 to i64
  br label %3918

3918:                                             ; preds = %3907, %3906, %3899, %3901, %3881, %3910, %3914
  %3919 = phi i64 [ %3913, %3910 ], [ %3917, %3914 ], [ 2, %3881 ], [ 2, %3901 ], [ 2, %3899 ], [ 1, %3906 ], [ 2, %3907 ]
  %3920 = getelementptr inbounds %struct.regnode, ptr %3883, i64 %3919
  %3921 = getelementptr inbounds %struct.regnode, ptr %3883, i64 %3919, i32 1
  %3922 = load i8, ptr %3921, align 1, !tbaa !119
  br label %3881, !llvm.loop !341

3923:                                             ; preds = %3890, %3878, %3858, %3858
  %3924 = phi i8 [ %3864, %3858 ], [ %3864, %3858 ], [ %3864, %3878 ], [ %3893, %3890 ]
  %3925 = phi ptr [ %186, %3858 ], [ %186, %3858 ], [ %186, %3878 ], [ %3883, %3890 ]
  %3926 = icmp eq i8 %3924, 31
  br i1 %3926, label %3927, label %3933

3927:                                             ; preds = %3923
  %3928 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13
  %3929 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 14
  %3930 = load i8, ptr %52, align 1, !tbaa !51, !range !97, !noundef !98
  %3931 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %3932 = call fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef nonnull %3925, ptr noundef nonnull %192, ptr noundef nonnull %3928, ptr noundef nonnull %194, ptr noundef nonnull %3929, i8 %3930, i8 %3931)
  br i1 %3932, label %3934, label %5080

3933:                                             ; preds = %3895, %3923, %3872, %3874
  store i32 -1000, ptr %194, align 4, !tbaa !6
  store i32 -1000, ptr %192, align 8, !tbaa !6
  br label %3934

3934:                                             ; preds = %3933, %3927
  store ptr %3859, ptr %200, align 8, !tbaa !6
  store ptr %186, ptr %209, align 8, !tbaa !6
  %3935 = and i8 %212, 1
  %3936 = icmp eq i8 %3935, 0
  br i1 %3936, label %4001, label %3937

3937:                                             ; preds = %3934
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #12
  store ptr %214, ptr %17, align 8, !tbaa !13
  %3938 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  %3939 = load i32, ptr %3938, align 4, !tbaa !6
  %3940 = icmp eq i32 %3939, 0
  br i1 %3940, label %3947, label %3941

3941:                                             ; preds = %3937
  %3942 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %17, ptr noundef %3859, ptr noundef nonnull %0, i32 noundef %3939)
  %3943 = load i32, ptr %3938, align 4, !tbaa !6
  %3944 = icmp slt i32 %3942, %3943
  br i1 %3944, label %4000, label %3945

3945:                                             ; preds = %3941
  %3946 = load ptr, ptr %17, align 8, !tbaa !13
  br label %3947

3947:                                             ; preds = %3945, %3937
  %3948 = phi i32 [ %3943, %3945 ], [ 0, %3937 ]
  %3949 = phi ptr [ %3946, %3945 ], [ %214, %3937 ]
  store i32 %3948, ptr %205, align 8, !tbaa !6
  %3950 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %3951 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  store i32 %3950, ptr %3951, align 4, !tbaa !6
  %3952 = load i32, ptr %192, align 8, !tbaa !6
  %3953 = icmp eq i32 %3952, -1000
  br i1 %3953, label %3954, label %3955

3954:                                             ; preds = %3947
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  br label %4261

3955:                                             ; preds = %3947
  store ptr %3949, ptr %199, align 8, !tbaa !6
  %3956 = load i32, ptr %206, align 8, !tbaa !6
  %3957 = icmp eq i32 %3956, 32767
  br i1 %3957, label %3958, label %3971

3958:                                             ; preds = %3955
  %3959 = load ptr, ptr %58, align 8, !tbaa !56
  %3960 = getelementptr inbounds i8, ptr %3959, i64 -1
  store ptr %3960, ptr %196, align 8, !tbaa !6
  br i1 %23, label %3961, label %3999

3961:                                             ; preds = %3958
  %3962 = load i8, ptr %3960, align 1, !tbaa !6
  %3963 = and i8 %3962, -64
  %3964 = icmp eq i8 %3963, -128
  br i1 %3964, label %3965, label %3999

3965:                                             ; preds = %3961, %3965
  %3966 = phi ptr [ %3967, %3965 ], [ %3960, %3961 ]
  %3967 = getelementptr inbounds i8, ptr %3966, i64 -1
  store ptr %3967, ptr %196, align 8, !tbaa !6
  %3968 = load i8, ptr %3967, align 1, !tbaa !6
  %3969 = and i8 %3968, -64
  %3970 = icmp eq i8 %3969, -128
  br i1 %3970, label %3965, label %3999, !llvm.loop !342

3971:                                             ; preds = %3955
  br i1 %23, label %3972, label %3989

3972:                                             ; preds = %3971
  %3973 = sub nsw i32 %3956, %3948
  store ptr %3949, ptr %196, align 8, !tbaa !6
  %3974 = icmp sgt i32 %3973, 0
  br i1 %3974, label %3975, label %3999

3975:                                             ; preds = %3972, %3980
  %3976 = phi ptr [ %3986, %3980 ], [ %3949, %3972 ]
  %3977 = phi i32 [ %3987, %3980 ], [ %3973, %3972 ]
  %3978 = load ptr, ptr %58, align 8, !tbaa !56
  %3979 = icmp ult ptr %3976, %3978
  br i1 %3979, label %3980, label %3999

3980:                                             ; preds = %3975
  %3981 = load i8, ptr %3976, align 1, !tbaa !6
  %3982 = zext i8 %3981 to i64
  %3983 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3982
  %3984 = load i8, ptr %3983, align 1, !tbaa !6
  %3985 = zext i8 %3984 to i64
  %3986 = getelementptr inbounds i8, ptr %3976, i64 %3985
  store ptr %3986, ptr %196, align 8, !tbaa !6
  %3987 = add nsw i32 %3977, -1
  %3988 = icmp sgt i32 %3977, 1
  br i1 %3988, label %3975, label %3999, !llvm.loop !343

3989:                                             ; preds = %3971
  %3990 = sext i32 %3956 to i64
  %3991 = getelementptr inbounds i8, ptr %3949, i64 %3990
  %3992 = sext i32 %3948 to i64
  %3993 = sub nsw i64 0, %3992
  %3994 = getelementptr inbounds i8, ptr %3991, i64 %3993
  store ptr %3994, ptr %196, align 8, !tbaa !6
  %3995 = load ptr, ptr %58, align 8, !tbaa !56
  %3996 = icmp ult ptr %3994, %3995
  br i1 %3996, label %3999, label %3997

3997:                                             ; preds = %3989
  %3998 = getelementptr inbounds i8, ptr %3995, i64 -1
  store ptr %3998, ptr %196, align 8, !tbaa !6
  br label %3999

3999:                                             ; preds = %3980, %3975, %3965, %3972, %3961, %3997, %3989, %3958
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  br label %4073

4000:                                             ; preds = %3941
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  br label %5080

4001:                                             ; preds = %3934
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #12
  store ptr %214, ptr %18, align 8, !tbaa !13
  %4002 = load i32, ptr %206, align 8, !tbaa !6
  %4003 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %18, ptr noundef %3859, ptr noundef nonnull %0, i32 noundef %4002)
  store i32 %4003, ptr %205, align 8, !tbaa !6
  %4004 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  %4005 = load i32, ptr %4004, align 4, !tbaa !6
  %4006 = icmp slt i32 %4003, %4005
  br i1 %4006, label %4032, label %4007

4007:                                             ; preds = %4001
  %4008 = load ptr, ptr %18, align 8, !tbaa !13
  %4009 = icmp sgt i32 %4003, %4005
  br i1 %4009, label %4010, label %4029

4010:                                             ; preds = %4007
  %4011 = load ptr, ptr %209, align 8, !tbaa !6
  %4012 = getelementptr inbounds %struct.regnode, ptr %4011, i64 0, i32 1
  %4013 = load i8, ptr %4012, align 1, !tbaa !119
  %4014 = zext i8 %4013 to i64
  %4015 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %4014
  %4016 = load i8, ptr %4015, align 1, !tbaa !6
  %4017 = icmp ne i8 %4016, 4
  %4018 = icmp eq i8 %4013, 5
  %4019 = or i1 %4018, %4017
  br i1 %4019, label %4029, label %4020

4020:                                             ; preds = %4010
  store i32 %4003, ptr %4004, align 4, !tbaa !6
  %4021 = getelementptr inbounds i8, ptr %4008, i64 -1
  %4022 = load i8, ptr %4021, align 1, !tbaa !6
  %4023 = icmp eq i8 %4022, 10
  br i1 %4023, label %4024, label %4029

4024:                                             ; preds = %4020
  %4025 = load i8, ptr %4012, align 1, !tbaa !119
  %4026 = icmp eq i8 %4025, 6
  br i1 %4026, label %4029, label %4027

4027:                                             ; preds = %4024
  %4028 = add nsw i32 %4003, -1
  store i32 %4028, ptr %4004, align 4, !tbaa !6
  br label %4029

4029:                                             ; preds = %4020, %4024, %4027, %4010, %4007
  %4030 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4031 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  store i32 %4030, ptr %4031, align 4, !tbaa !6
  br label %4032

4032:                                             ; preds = %4001, %4029
  %4033 = phi i32 [ 116, %4029 ], [ 6, %4001 ]
  %4034 = phi ptr [ %4008, %4029 ], [ %214, %4001 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  switch i32 %4033, label %5230 [
    i32 116, label %4316
    i32 6, label %5080
  ]

4035:                                             ; preds = %221
  %4036 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4037 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4038 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  %4039 = load i32, ptr %4038, align 4, !tbaa !6
  %4040 = icmp sgt i32 %4036, %4039
  br i1 %4040, label %4041, label %4042

4041:                                             ; preds = %4035
  call void @Perl_leave_scope(i32 noundef %4039) #12
  br label %4042

4042:                                             ; preds = %4041, %4035
  %4043 = load i32, ptr %4037, align 8, !tbaa !6
  %4044 = icmp eq i32 %4043, 0
  br i1 %4044, label %4061, label %4045

4045:                                             ; preds = %4042
  %4046 = load i32, ptr %193, align 8, !tbaa !37
  %4047 = load i32, ptr %207, align 8, !tbaa !6
  %4048 = icmp ugt i32 %4046, %4047
  br i1 %4048, label %4049, label %4058

4049:                                             ; preds = %4045
  %4050 = load ptr, ptr %195, align 8, !tbaa !38
  br label %4051

4051:                                             ; preds = %4049, %4051
  %4052 = phi i32 [ %4046, %4049 ], [ %4055, %4051 ]
  %4053 = zext i32 %4052 to i64
  %4054 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4050, i64 %4053, i32 1
  store i64 -1, ptr %4054, align 8, !tbaa !42
  %4055 = add i32 %4052, -1
  %4056 = load i32, ptr %207, align 8, !tbaa !6
  %4057 = icmp ugt i32 %4055, %4056
  br i1 %4057, label %4051, label %4058, !llvm.loop !344

4058:                                             ; preds = %4051, %4045
  %4059 = phi i32 [ %4046, %4045 ], [ %4055, %4051 ]
  store i32 %4059, ptr %193, align 8, !tbaa !37
  %4060 = load i32, ptr %208, align 4, !tbaa !6
  store i32 %4060, ptr %197, align 4, !tbaa !36
  br label %4061

4061:                                             ; preds = %4058, %4042
  store ptr %214, ptr %199, align 8, !tbaa !6
  br i1 %23, label %4062, label %4068

4062:                                             ; preds = %4061
  %4063 = load i8, ptr %214, align 1, !tbaa !6
  %4064 = zext i8 %4063 to i64
  %4065 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4064
  %4066 = load i8, ptr %4065, align 1, !tbaa !6
  %4067 = zext i8 %4066 to i64
  br label %4068

4068:                                             ; preds = %4061, %4062
  %4069 = phi i64 [ %4067, %4062 ], [ 1, %4061 ]
  %4070 = getelementptr inbounds i8, ptr %214, i64 %4069
  %4071 = load i32, ptr %205, align 8, !tbaa !6
  %4072 = add nsw i32 %4071, 1
  store i32 %4072, ptr %205, align 8, !tbaa !6
  br label %4073

4073:                                             ; preds = %3999, %4068
  %4074 = phi i32 [ %4072, %4068 ], [ %3948, %3999 ]
  %4075 = phi ptr [ %214, %4068 ], [ %3949, %3999 ]
  %4076 = phi i8 [ %212, %4068 ], [ 0, %3999 ]
  %4077 = phi ptr [ %4070, %4068 ], [ %3949, %3999 ]
  %4078 = phi ptr [ %215, %4068 ], [ %3859, %3999 ]
  br i1 %23, label %4079, label %4124

4079:                                             ; preds = %4073
  %4080 = icmp ne ptr %4075, %4077
  %4081 = zext i1 %4080 to i32
  %4082 = load i32, ptr %192, align 8, !tbaa !6
  %4083 = load i32, ptr %194, align 4, !tbaa !6
  %4084 = icmp eq i32 %4082, %4083
  %4085 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13
  br i1 %4084, label %4090, label %4086

4086:                                             ; preds = %4079
  %4087 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 14
  %4088 = load ptr, ptr %196, align 8, !tbaa !6
  %4089 = icmp ugt ptr %4077, %4088
  br i1 %4089, label %4156, label %4107

4090:                                             ; preds = %4079
  %4091 = load ptr, ptr %196, align 8, !tbaa !6
  %4092 = icmp ugt ptr %4077, %4091
  br i1 %4092, label %4156, label %4093

4093:                                             ; preds = %4090, %4103
  %4094 = phi i32 [ %4105, %4103 ], [ %4081, %4090 ]
  %4095 = phi ptr [ %4104, %4103 ], [ %4077, %4090 ]
  %4096 = load i8, ptr %4095, align 1, !tbaa !6
  %4097 = zext i8 %4096 to i64
  %4098 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4097
  %4099 = load i8, ptr %4098, align 1, !tbaa !6
  %4100 = zext i8 %4099 to i64
  %4101 = call i32 @bcmp(ptr nonnull %4095, ptr nonnull %4085, i64 %4100)
  %4102 = icmp eq i32 %4101, 0
  br i1 %4102, label %4156, label %4103

4103:                                             ; preds = %4093
  %4104 = getelementptr inbounds i8, ptr %4095, i64 %4100
  %4105 = add nuw nsw i32 %4094, 1
  %4106 = icmp ugt ptr %4104, %4091
  br i1 %4106, label %4156, label %4093, !llvm.loop !345

4107:                                             ; preds = %4086, %4120
  %4108 = phi i32 [ %4122, %4120 ], [ %4081, %4086 ]
  %4109 = phi ptr [ %4121, %4120 ], [ %4077, %4086 ]
  %4110 = load i8, ptr %4109, align 1, !tbaa !6
  %4111 = zext i8 %4110 to i64
  %4112 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4111
  %4113 = load i8, ptr %4112, align 1, !tbaa !6
  %4114 = zext i8 %4113 to i64
  %4115 = call i32 @bcmp(ptr nonnull %4109, ptr nonnull %4085, i64 %4114)
  %4116 = icmp eq i32 %4115, 0
  br i1 %4116, label %4156, label %4117

4117:                                             ; preds = %4107
  %4118 = call i32 @bcmp(ptr nonnull %4109, ptr nonnull %4087, i64 %4114)
  %4119 = icmp eq i32 %4118, 0
  br i1 %4119, label %4156, label %4120

4120:                                             ; preds = %4117
  %4121 = getelementptr inbounds i8, ptr %4109, i64 %4114
  %4122 = add nuw nsw i32 %4108, 1
  %4123 = icmp ugt ptr %4121, %4088
  br i1 %4123, label %4156, label %4107, !llvm.loop !346

4124:                                             ; preds = %4073
  %4125 = load i32, ptr %192, align 8, !tbaa !6
  %4126 = load i32, ptr %194, align 4, !tbaa !6
  %4127 = icmp eq i32 %4125, %4126
  %4128 = load ptr, ptr %196, align 8, !tbaa !6
  %4129 = icmp ugt ptr %4077, %4128
  br i1 %4127, label %4131, label %4130

4130:                                             ; preds = %4124
  br i1 %4129, label %4150, label %4140

4131:                                             ; preds = %4124
  br i1 %4129, label %4150, label %4132

4132:                                             ; preds = %4131, %4137
  %4133 = phi ptr [ %4138, %4137 ], [ %4077, %4131 ]
  %4134 = load i8, ptr %4133, align 1, !tbaa !6
  %4135 = zext i8 %4134 to i32
  %4136 = icmp eq i32 %4125, %4135
  br i1 %4136, label %4150, label %4137

4137:                                             ; preds = %4132
  %4138 = getelementptr inbounds i8, ptr %4133, i64 1
  %4139 = icmp ugt ptr %4138, %4128
  br i1 %4139, label %4150, label %4132, !llvm.loop !347

4140:                                             ; preds = %4130, %4147
  %4141 = phi ptr [ %4148, %4147 ], [ %4077, %4130 ]
  %4142 = load i8, ptr %4141, align 1, !tbaa !6
  %4143 = zext i8 %4142 to i32
  %4144 = icmp eq i32 %4125, %4143
  %4145 = icmp eq i32 %4126, %4143
  %4146 = or i1 %4144, %4145
  br i1 %4146, label %4150, label %4147

4147:                                             ; preds = %4140
  %4148 = getelementptr inbounds i8, ptr %4141, i64 1
  %4149 = icmp ugt ptr %4148, %4128
  br i1 %4149, label %4150, label %4140, !llvm.loop !348

4150:                                             ; preds = %4140, %4147, %4137, %4132, %4130, %4131
  %4151 = phi ptr [ %4077, %4131 ], [ %4077, %4130 ], [ %4138, %4137 ], [ %4133, %4132 ], [ %4141, %4140 ], [ %4148, %4147 ]
  %4152 = ptrtoint ptr %4151 to i64
  %4153 = ptrtoint ptr %4075 to i64
  %4154 = sub i64 %4152, %4153
  %4155 = trunc i64 %4154 to i32
  br label %4156

4156:                                             ; preds = %4117, %4120, %4107, %4093, %4103, %4086, %4090, %4150
  %4157 = phi ptr [ %4128, %4150 ], [ %4091, %4090 ], [ %4088, %4086 ], [ %4091, %4103 ], [ %4091, %4093 ], [ %4088, %4107 ], [ %4088, %4120 ], [ %4088, %4117 ]
  %4158 = phi ptr [ %4151, %4150 ], [ %4077, %4090 ], [ %4077, %4086 ], [ %4095, %4093 ], [ %4104, %4103 ], [ %4109, %4117 ], [ %4121, %4120 ], [ %4109, %4107 ]
  %4159 = phi i32 [ %4155, %4150 ], [ %4081, %4090 ], [ %4081, %4086 ], [ %4094, %4093 ], [ %4105, %4103 ], [ %4108, %4117 ], [ %4122, %4120 ], [ %4108, %4107 ]
  %4160 = icmp ugt ptr %4158, %4157
  br i1 %4160, label %5080, label %4161

4161:                                             ; preds = %4156
  %4162 = icmp eq i32 %4159, 0
  br i1 %4162, label %4168, label %4163

4163:                                             ; preds = %4161
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #12
  store ptr %4075, ptr %19, align 8, !tbaa !13
  %4164 = add nsw i32 %4074, %4159
  store i32 %4164, ptr %205, align 8, !tbaa !6
  %4165 = load ptr, ptr %200, align 8, !tbaa !6
  %4166 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %19, ptr noundef %4165, ptr noundef nonnull %0, i32 noundef %4159)
  %4167 = icmp slt i32 %4166, %4159
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #12
  br i1 %4167, label %5080, label %4168

4168:                                             ; preds = %4163, %4161
  %4169 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4170 = load i32, ptr %4169, align 8, !tbaa !6
  %4171 = icmp eq i32 %4170, 0
  br i1 %4171, label %4212, label %4172

4172:                                             ; preds = %4168
  %4173 = load i32, ptr %205, align 8, !tbaa !6
  %4174 = icmp eq i32 %4173, 0
  br i1 %4174, label %4204, label %4175

4175:                                             ; preds = %4172
  %4176 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4177 = icmp eq i8 %4176, 0
  br i1 %4177, label %4182, label %4178

4178:                                             ; preds = %4175
  %4179 = load ptr, ptr %59, align 8, !tbaa !53
  %4180 = call fastcc ptr @S_reghop3(ptr noundef %4158, i64 noundef -1, ptr noundef %4179)
  %4181 = load i32, ptr %4169, align 8, !tbaa !6
  br label %4184

4182:                                             ; preds = %4175
  %4183 = getelementptr inbounds i8, ptr %4158, i64 -1
  br label %4184

4184:                                             ; preds = %4182, %4178
  %4185 = phi i32 [ %4181, %4178 ], [ %4170, %4182 ]
  %4186 = phi ptr [ %4180, %4178 ], [ %4183, %4182 ]
  %4187 = load ptr, ptr %59, align 8, !tbaa !53
  %4188 = ptrtoint ptr %4186 to i64
  %4189 = ptrtoint ptr %4187 to i64
  %4190 = sub i64 %4188, %4189
  %4191 = load ptr, ptr %195, align 8, !tbaa !38
  %4192 = zext i32 %4185 to i64
  %4193 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4191, i64 %4192
  store i64 %4190, ptr %4193, align 8, !tbaa !39
  %4194 = ptrtoint ptr %4158 to i64
  %4195 = sub i64 %4194, %4189
  %4196 = load i32, ptr %4169, align 8, !tbaa !6
  %4197 = zext i32 %4196 to i64
  %4198 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4191, i64 %4197, i32 1
  store i64 %4195, ptr %4198, align 8, !tbaa !42
  %4199 = load i32, ptr %4169, align 8, !tbaa !6
  %4200 = load i32, ptr %193, align 8, !tbaa !37
  %4201 = icmp ugt i32 %4199, %4200
  br i1 %4201, label %4202, label %4210

4202:                                             ; preds = %4184
  store i32 %4199, ptr %193, align 8, !tbaa !37
  %4203 = load i32, ptr %4169, align 8, !tbaa !6
  br label %4210

4204:                                             ; preds = %4172
  %4205 = load ptr, ptr %195, align 8, !tbaa !38
  %4206 = zext i32 %4170 to i64
  %4207 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4205, i64 %4206, i32 1
  store i64 -1, ptr %4207, align 8, !tbaa !42
  %4208 = load i32, ptr %207, align 8, !tbaa !6
  store i32 %4208, ptr %193, align 8, !tbaa !37
  %4209 = load i32, ptr %208, align 4, !tbaa !6
  br label %4210

4210:                                             ; preds = %4184, %4202, %4204
  %4211 = phi i32 [ %4209, %4204 ], [ %4203, %4202 ], [ %4199, %4184 ]
  store i32 %4211, ptr %197, align 4, !tbaa !36
  br label %4212

4212:                                             ; preds = %4210, %4168
  br i1 %202, label %4219, label %4213

4213:                                             ; preds = %4212
  %4214 = load i32, ptr %203, align 8, !tbaa !6
  %4215 = icmp eq i32 %4214, 0
  br i1 %4215, label %4219, label %4216

4216:                                             ; preds = %4213
  %4217 = load i32, ptr %4169, align 8, !tbaa !6
  %4218 = icmp eq i32 %4214, %4217
  br i1 %4218, label %4503, label %4219

4219:                                             ; preds = %4212, %4213, %4216
  %4220 = load ptr, ptr %209, align 8, !tbaa !6
  store i32 118, ptr %188, align 8, !tbaa !276
  br label %4940

4221:                                             ; preds = %221
  %4222 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4223 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4224 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  %4225 = load i32, ptr %4224, align 4, !tbaa !6
  %4226 = icmp sgt i32 %4222, %4225
  br i1 %4226, label %4227, label %4228

4227:                                             ; preds = %4221
  call void @Perl_leave_scope(i32 noundef %4225) #12
  br label %4228

4228:                                             ; preds = %4227, %4221
  %4229 = load i32, ptr %4223, align 8, !tbaa !6
  %4230 = icmp eq i32 %4229, 0
  br i1 %4230, label %4247, label %4231

4231:                                             ; preds = %4228
  %4232 = load i32, ptr %193, align 8, !tbaa !37
  %4233 = load i32, ptr %207, align 8, !tbaa !6
  %4234 = icmp ugt i32 %4232, %4233
  br i1 %4234, label %4235, label %4244

4235:                                             ; preds = %4231
  %4236 = load ptr, ptr %195, align 8, !tbaa !38
  br label %4237

4237:                                             ; preds = %4235, %4237
  %4238 = phi i32 [ %4232, %4235 ], [ %4241, %4237 ]
  %4239 = zext i32 %4238 to i64
  %4240 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4236, i64 %4239, i32 1
  store i64 -1, ptr %4240, align 8, !tbaa !42
  %4241 = add i32 %4238, -1
  %4242 = load i32, ptr %207, align 8, !tbaa !6
  %4243 = icmp ugt i32 %4241, %4242
  br i1 %4243, label %4237, label %4244, !llvm.loop !349

4244:                                             ; preds = %4237, %4231
  %4245 = phi i32 [ %4232, %4231 ], [ %4241, %4237 ]
  store i32 %4245, ptr %193, align 8, !tbaa !37
  %4246 = load i32, ptr %208, align 4, !tbaa !6
  store i32 %4246, ptr %197, align 4, !tbaa !36
  br label %4247

4247:                                             ; preds = %4244, %4228
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20) #12
  store ptr %214, ptr %20, align 8, !tbaa !13
  %4248 = load ptr, ptr %200, align 8, !tbaa !6
  %4249 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %20, ptr noundef %4248, ptr noundef nonnull %0, i32 noundef 1)
  %4250 = icmp eq i32 %4249, 0
  %4251 = load ptr, ptr %20, align 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20) #12
  br i1 %4250, label %5080, label %4252

4252:                                             ; preds = %4247
  %4253 = load i32, ptr %205, align 8, !tbaa !6
  %4254 = add nsw i32 %4253, 1
  store i32 %4254, ptr %205, align 8, !tbaa !6
  %4255 = load i32, ptr %206, align 8, !tbaa !6
  %4256 = icmp slt i32 %4253, %4255
  br i1 %4256, label %4261, label %4257

4257:                                             ; preds = %4252
  %4258 = icmp eq i32 %4255, 32767
  %4259 = icmp sgt i32 %4253, -1
  %4260 = and i1 %4259, %4258
  br i1 %4260, label %4261, label %5080

4261:                                             ; preds = %4257, %4252, %3954
  %4262 = phi i32 [ %3948, %3954 ], [ %4254, %4252 ], [ %4254, %4257 ]
  %4263 = phi i8 [ 0, %3954 ], [ %212, %4252 ], [ %212, %4257 ]
  %4264 = phi ptr [ %3949, %3954 ], [ %4251, %4252 ], [ %4251, %4257 ]
  %4265 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4266 = load i32, ptr %4265, align 8, !tbaa !6
  %4267 = icmp eq i32 %4266, 0
  br i1 %4267, label %4307, label %4268

4268:                                             ; preds = %4261
  %4269 = icmp eq i32 %4262, 0
  br i1 %4269, label %4299, label %4270

4270:                                             ; preds = %4268
  %4271 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4272 = icmp eq i8 %4271, 0
  br i1 %4272, label %4277, label %4273

4273:                                             ; preds = %4270
  %4274 = load ptr, ptr %59, align 8, !tbaa !53
  %4275 = call fastcc ptr @S_reghop3(ptr noundef %4264, i64 noundef -1, ptr noundef %4274)
  %4276 = load i32, ptr %4265, align 8, !tbaa !6
  br label %4279

4277:                                             ; preds = %4270
  %4278 = getelementptr inbounds i8, ptr %4264, i64 -1
  br label %4279

4279:                                             ; preds = %4277, %4273
  %4280 = phi i32 [ %4276, %4273 ], [ %4266, %4277 ]
  %4281 = phi ptr [ %4275, %4273 ], [ %4278, %4277 ]
  %4282 = load ptr, ptr %59, align 8, !tbaa !53
  %4283 = ptrtoint ptr %4281 to i64
  %4284 = ptrtoint ptr %4282 to i64
  %4285 = sub i64 %4283, %4284
  %4286 = load ptr, ptr %195, align 8, !tbaa !38
  %4287 = zext i32 %4280 to i64
  %4288 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4286, i64 %4287
  store i64 %4285, ptr %4288, align 8, !tbaa !39
  %4289 = ptrtoint ptr %4264 to i64
  %4290 = sub i64 %4289, %4284
  %4291 = load i32, ptr %4265, align 8, !tbaa !6
  %4292 = zext i32 %4291 to i64
  %4293 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4286, i64 %4292, i32 1
  store i64 %4290, ptr %4293, align 8, !tbaa !42
  %4294 = load i32, ptr %4265, align 8, !tbaa !6
  %4295 = load i32, ptr %193, align 8, !tbaa !37
  %4296 = icmp ugt i32 %4294, %4295
  br i1 %4296, label %4297, label %4305

4297:                                             ; preds = %4279
  store i32 %4294, ptr %193, align 8, !tbaa !37
  %4298 = load i32, ptr %4265, align 8, !tbaa !6
  br label %4305

4299:                                             ; preds = %4268
  %4300 = load ptr, ptr %195, align 8, !tbaa !38
  %4301 = zext i32 %4266 to i64
  %4302 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4300, i64 %4301, i32 1
  store i64 -1, ptr %4302, align 8, !tbaa !42
  %4303 = load i32, ptr %207, align 8, !tbaa !6
  store i32 %4303, ptr %193, align 8, !tbaa !37
  %4304 = load i32, ptr %208, align 4, !tbaa !6
  br label %4305

4305:                                             ; preds = %4279, %4297, %4299
  %4306 = phi i32 [ %4304, %4299 ], [ %4298, %4297 ], [ %4294, %4279 ]
  store i32 %4306, ptr %197, align 4, !tbaa !36
  br label %4307

4307:                                             ; preds = %4305, %4261
  br i1 %202, label %4314, label %4308

4308:                                             ; preds = %4307
  %4309 = load i32, ptr %203, align 8, !tbaa !6
  %4310 = icmp eq i32 %4309, 0
  br i1 %4310, label %4314, label %4311

4311:                                             ; preds = %4308
  %4312 = load i32, ptr %4265, align 8, !tbaa !6
  %4313 = icmp eq i32 %4309, %4312
  br i1 %4313, label %4503, label %4314

4314:                                             ; preds = %4311, %4308, %4307
  %4315 = load ptr, ptr %209, align 8, !tbaa !6
  store i32 120, ptr %188, align 8, !tbaa !276
  br label %4940

4316:                                             ; preds = %4500, %4470, %4499, %4495, %4474, %4032
  %4317 = phi i8 [ %212, %4032 ], [ %4433, %4474 ], [ %4433, %4495 ], [ %4433, %4499 ], [ %4433, %4470 ], [ %4433, %4500 ]
  %4318 = phi ptr [ %4034, %4032 ], [ %4476, %4474 ], [ %4496, %4495 ], [ %4496, %4499 ], [ %4434, %4470 ], [ %4501, %4500 ]
  %4319 = phi ptr [ %3859, %4032 ], [ %4435, %4474 ], [ %4435, %4495 ], [ %4435, %4499 ], [ %4435, %4470 ], [ %4435, %4500 ]
  br i1 %202, label %4327, label %4320

4320:                                             ; preds = %4316
  %4321 = load i32, ptr %203, align 8, !tbaa !6
  %4322 = icmp eq i32 %4321, 0
  br i1 %4322, label %4327, label %4323

4323:                                             ; preds = %4320
  %4324 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4325 = load i32, ptr %4324, align 8, !tbaa !6
  %4326 = icmp eq i32 %4321, %4325
  br i1 %4326, label %4503, label %4327

4327:                                             ; preds = %4323, %4320, %4316
  %4328 = load ptr, ptr %58, align 8, !tbaa !56
  %4329 = icmp ult ptr %4318, %4328
  %4330 = load i32, ptr %192, align 8, !tbaa !6
  %4331 = icmp eq i32 %4330, -1000
  %4332 = xor i1 %4329, true
  %4333 = select i1 %4331, i1 true, i1 %4332
  br i1 %4333, label %4356, label %4334

4334:                                             ; preds = %4327
  %4335 = load i8, ptr %4318, align 1, !tbaa !6
  %4336 = icmp slt i8 %4335, 0
  %4337 = and i1 %23, %4336
  br i1 %4337, label %4338, label %4350

4338:                                             ; preds = %4334
  %4339 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13
  %4340 = zext i8 %4335 to i64
  %4341 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4340
  %4342 = load i8, ptr %4341, align 1, !tbaa !6
  %4343 = zext i8 %4342 to i64
  %4344 = call i32 @bcmp(ptr nonnull %4318, ptr nonnull %4339, i64 %4343)
  %4345 = icmp eq i32 %4344, 0
  br i1 %4345, label %4359, label %4346

4346:                                             ; preds = %4338
  %4347 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 14
  %4348 = call i32 @bcmp(ptr nonnull %4318, ptr nonnull %4347, i64 %4343)
  %4349 = icmp eq i32 %4348, 0
  br label %4356

4350:                                             ; preds = %4334
  %4351 = zext i8 %4335 to i32
  %4352 = icmp eq i32 %4330, %4351
  br i1 %4352, label %4359, label %4353

4353:                                             ; preds = %4350
  %4354 = load i32, ptr %194, align 4, !tbaa !6
  %4355 = icmp eq i32 %4354, %4351
  br label %4356

4356:                                             ; preds = %4353, %4346, %4327
  %4357 = phi i1 [ %4329, %4327 ], [ %4349, %4346 ], [ %4355, %4353 ]
  %4358 = select i1 %4331, i1 true, i1 %4357
  br i1 %4358, label %4359, label %4432

4359:                                             ; preds = %4350, %4338, %4356
  %4360 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4361 = load i32, ptr %4360, align 8, !tbaa !6
  %4362 = icmp eq i32 %4361, 0
  br i1 %4362, label %4430, label %4363

4363:                                             ; preds = %4359
  %4364 = load i32, ptr %205, align 8, !tbaa !6
  %4365 = icmp eq i32 %4364, 0
  br i1 %4365, label %4422, label %4366

4366:                                             ; preds = %4363
  %4367 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4368 = icmp eq i8 %4367, 0
  br i1 %4368, label %4400, label %4369

4369:                                             ; preds = %4366
  %4370 = load ptr, ptr %59, align 8, !tbaa !53
  %4371 = ptrtoint ptr %4370 to i64
  %4372 = icmp ugt ptr %4318, %4370
  br i1 %4372, label %4373, label %4402

4373:                                             ; preds = %4369
  %4374 = ptrtoint ptr %4318 to i64
  %4375 = getelementptr inbounds i8, ptr %4318, i64 -1
  %4376 = load i8, ptr %4375, align 1, !tbaa !6
  %4377 = icmp sgt i8 %4376, -1
  br i1 %4377, label %4402, label %4378

4378:                                             ; preds = %4373
  %4379 = icmp ugt ptr %4375, %4370
  br i1 %4379, label %4380, label %4394

4380:                                             ; preds = %4378
  %4381 = getelementptr i8, ptr %4318, i64 %4371
  %4382 = sub i64 0, %4374
  %4383 = getelementptr i8, ptr %4381, i64 %4382
  br label %4384

4384:                                             ; preds = %4389, %4380
  %4385 = phi ptr [ %4390, %4389 ], [ %4375, %4380 ]
  %4386 = load i8, ptr %4385, align 1, !tbaa !6
  %4387 = and i8 %4386, -64
  %4388 = icmp eq i8 %4387, -128
  br i1 %4388, label %4389, label %4394

4389:                                             ; preds = %4384
  %4390 = getelementptr inbounds i8, ptr %4385, i64 -1
  %4391 = icmp ugt ptr %4390, %4370
  br i1 %4391, label %4384, label %4392, !llvm.loop !127

4392:                                             ; preds = %4389
  %4393 = load i8, ptr %4383, align 1, !tbaa !6
  br label %4394

4394:                                             ; preds = %4384, %4392, %4378
  %4395 = phi ptr [ %4375, %4378 ], [ %4383, %4392 ], [ %4385, %4384 ]
  %4396 = phi i8 [ %4376, %4378 ], [ %4393, %4392 ], [ %4386, %4384 ]
  %4397 = icmp ugt i8 %4396, -63
  br i1 %4397, label %4402, label %4398

4398:                                             ; preds = %4394
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  %4399 = load i32, ptr %4360, align 8, !tbaa !6
  br label %4402

4400:                                             ; preds = %4366
  %4401 = getelementptr inbounds i8, ptr %4318, i64 -1
  br label %4402

4402:                                             ; preds = %4373, %4394, %4398, %4369, %4400
  %4403 = phi i32 [ %4361, %4400 ], [ %4361, %4369 ], [ %4361, %4394 ], [ %4399, %4398 ], [ %4361, %4373 ]
  %4404 = phi ptr [ %4401, %4400 ], [ %4318, %4369 ], [ %4395, %4394 ], [ %4395, %4398 ], [ %4375, %4373 ]
  %4405 = load ptr, ptr %59, align 8, !tbaa !53
  %4406 = ptrtoint ptr %4404 to i64
  %4407 = ptrtoint ptr %4405 to i64
  %4408 = sub i64 %4406, %4407
  %4409 = load ptr, ptr %195, align 8, !tbaa !38
  %4410 = zext i32 %4403 to i64
  %4411 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4409, i64 %4410
  store i64 %4408, ptr %4411, align 8, !tbaa !39
  %4412 = ptrtoint ptr %4318 to i64
  %4413 = sub i64 %4412, %4407
  %4414 = load i32, ptr %4360, align 8, !tbaa !6
  %4415 = zext i32 %4414 to i64
  %4416 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4409, i64 %4415, i32 1
  store i64 %4413, ptr %4416, align 8, !tbaa !42
  %4417 = load i32, ptr %4360, align 8, !tbaa !6
  %4418 = load i32, ptr %193, align 8, !tbaa !37
  %4419 = icmp ugt i32 %4417, %4418
  br i1 %4419, label %4420, label %4428

4420:                                             ; preds = %4402
  store i32 %4417, ptr %193, align 8, !tbaa !37
  %4421 = load i32, ptr %4360, align 8, !tbaa !6
  br label %4428

4422:                                             ; preds = %4363
  %4423 = load ptr, ptr %195, align 8, !tbaa !38
  %4424 = zext i32 %4361 to i64
  %4425 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4423, i64 %4424, i32 1
  store i64 -1, ptr %4425, align 8, !tbaa !42
  %4426 = load i32, ptr %207, align 8, !tbaa !6
  store i32 %4426, ptr %193, align 8, !tbaa !37
  %4427 = load i32, ptr %208, align 4, !tbaa !6
  br label %4428

4428:                                             ; preds = %4402, %4420, %4422
  %4429 = phi i32 [ %4427, %4422 ], [ %4421, %4420 ], [ %4417, %4402 ]
  store i32 %4429, ptr %197, align 4, !tbaa !36
  br label %4430

4430:                                             ; preds = %4428, %4359
  %4431 = load ptr, ptr %209, align 8, !tbaa !6
  store i32 122, ptr %188, align 8, !tbaa !276
  br label %4940

4432:                                             ; preds = %221, %4356
  %4433 = phi i8 [ %4317, %4356 ], [ %212, %221 ]
  %4434 = phi ptr [ %4318, %4356 ], [ %214, %221 ]
  %4435 = phi ptr [ %4319, %4356 ], [ %215, %221 ]
  %4436 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %4437 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4438 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  %4439 = load i32, ptr %4438, align 4, !tbaa !6
  %4440 = icmp sgt i32 %4436, %4439
  br i1 %4440, label %4441, label %4442

4441:                                             ; preds = %4432
  call void @Perl_leave_scope(i32 noundef %4439) #12
  br label %4442

4442:                                             ; preds = %4441, %4432
  %4443 = load i32, ptr %4437, align 8, !tbaa !6
  %4444 = icmp eq i32 %4443, 0
  br i1 %4444, label %4461, label %4445

4445:                                             ; preds = %4442
  %4446 = load i32, ptr %193, align 8, !tbaa !37
  %4447 = load i32, ptr %207, align 8, !tbaa !6
  %4448 = icmp ugt i32 %4446, %4447
  br i1 %4448, label %4449, label %4458

4449:                                             ; preds = %4445
  %4450 = load ptr, ptr %195, align 8, !tbaa !38
  br label %4451

4451:                                             ; preds = %4449, %4451
  %4452 = phi i32 [ %4446, %4449 ], [ %4455, %4451 ]
  %4453 = zext i32 %4452 to i64
  %4454 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4450, i64 %4453, i32 1
  store i64 -1, ptr %4454, align 8, !tbaa !42
  %4455 = add i32 %4452, -1
  %4456 = load i32, ptr %207, align 8, !tbaa !6
  %4457 = icmp ugt i32 %4455, %4456
  br i1 %4457, label %4451, label %4458, !llvm.loop !350

4458:                                             ; preds = %4451, %4445
  %4459 = phi i32 [ %4446, %4445 ], [ %4455, %4451 ]
  store i32 %4459, ptr %193, align 8, !tbaa !37
  %4460 = load i32, ptr %208, align 4, !tbaa !6
  store i32 %4460, ptr %197, align 4, !tbaa !36
  br label %4461

4461:                                             ; preds = %4458, %4442
  %4462 = load i32, ptr %205, align 8, !tbaa !6
  %4463 = add nsw i32 %4462, -1
  store i32 %4463, ptr %205, align 8, !tbaa !6
  %4464 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  %4465 = load i32, ptr %4464, align 4, !tbaa !6
  %4466 = icmp sgt i32 %4462, %4465
  br i1 %4466, label %4467, label %5080

4467:                                             ; preds = %4461
  %4468 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4469 = icmp eq i8 %4468, 0
  br i1 %4469, label %4500, label %4470

4470:                                             ; preds = %4467
  %4471 = load ptr, ptr %59, align 8, !tbaa !53
  %4472 = ptrtoint ptr %4471 to i64
  %4473 = icmp ugt ptr %4434, %4471
  br i1 %4473, label %4474, label %4316

4474:                                             ; preds = %4470
  %4475 = ptrtoint ptr %4434 to i64
  %4476 = getelementptr inbounds i8, ptr %4434, i64 -1
  %4477 = load i8, ptr %4476, align 1, !tbaa !6
  %4478 = icmp sgt i8 %4477, -1
  br i1 %4478, label %4316, label %4479

4479:                                             ; preds = %4474
  %4480 = icmp ugt ptr %4476, %4471
  br i1 %4480, label %4481, label %4495

4481:                                             ; preds = %4479
  %4482 = getelementptr i8, ptr %4434, i64 %4472
  %4483 = sub i64 0, %4475
  %4484 = getelementptr i8, ptr %4482, i64 %4483
  br label %4485

4485:                                             ; preds = %4490, %4481
  %4486 = phi ptr [ %4491, %4490 ], [ %4476, %4481 ]
  %4487 = load i8, ptr %4486, align 1, !tbaa !6
  %4488 = and i8 %4487, -64
  %4489 = icmp eq i8 %4488, -128
  br i1 %4489, label %4490, label %4495

4490:                                             ; preds = %4485
  %4491 = getelementptr inbounds i8, ptr %4486, i64 -1
  %4492 = icmp ugt ptr %4491, %4471
  br i1 %4492, label %4485, label %4493, !llvm.loop !127

4493:                                             ; preds = %4490
  %4494 = load i8, ptr %4484, align 1, !tbaa !6
  br label %4495

4495:                                             ; preds = %4485, %4493, %4479
  %4496 = phi ptr [ %4476, %4479 ], [ %4484, %4493 ], [ %4486, %4485 ]
  %4497 = phi i8 [ %4477, %4479 ], [ %4494, %4493 ], [ %4487, %4485 ]
  %4498 = icmp ugt i8 %4497, -63
  br i1 %4498, label %4316, label %4499

4499:                                             ; preds = %4495
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %4316

4500:                                             ; preds = %4467
  %4501 = getelementptr inbounds i8, ptr %4434, i64 -1
  br label %4316

4502:                                             ; preds = %221, %2930, %2958, %2951, %2922
  br i1 %202, label %4551, label %4503

4503:                                             ; preds = %3697, %4323, %4502, %3449, %2955, %4216, %2919, %4311
  %4504 = phi ptr [ %214, %2919 ], [ %4264, %4311 ], [ %4158, %4216 ], [ %214, %2955 ], [ %214, %3449 ], [ %214, %4502 ], [ %4318, %4323 ], [ %3492, %3697 ]
  %4505 = phi i8 [ %212, %2919 ], [ %4263, %4311 ], [ %4076, %4216 ], [ %212, %2955 ], [ %212, %3449 ], [ %212, %4502 ], [ %4317, %4323 ], [ %3490, %3697 ]
  store ptr %191, ptr %196, align 8, !tbaa !6
  %4506 = load i32, ptr %4, align 4, !tbaa !34
  %4507 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef 0, i32 noundef %4506)
  store i32 %4507, ptr %199, align 8, !tbaa !6
  %4508 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 6
  %4509 = load ptr, ptr %4508, align 8, !tbaa !6
  %4510 = getelementptr inbounds %struct.p5rx, ptr %4509, i64 0, i32 2
  %4511 = load i32, ptr %4510, align 4, !tbaa !49
  %4512 = lshr i32 %4511, 29
  %4513 = trunc i32 %4512 to i8
  %4514 = and i8 %4513, 1
  store i8 %4514, ptr %52, align 1, !tbaa !51
  %4515 = load ptr, ptr %67, align 8, !tbaa !61
  %4516 = icmp eq ptr %4515, null
  br i1 %4516, label %4536, label %4517

4517:                                             ; preds = %4503
  %4518 = getelementptr inbounds %struct.sv, ptr %4509, i64 0, i32 1
  %4519 = load i32, ptr %4518, align 8, !tbaa !78
  %4520 = add i32 %4519, 1
  store i32 %4520, ptr %4518, align 8, !tbaa !78
  %4521 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  %4522 = getelementptr inbounds %struct.pmop, ptr %4521, i64 0, i32 9
  %4523 = load ptr, ptr %4522, align 8, !tbaa !82
  %4524 = icmp eq ptr %4523, null
  br i1 %4524, label %4533, label %4525

4525:                                             ; preds = %4517
  %4526 = getelementptr inbounds %struct.sv, ptr %4523, i64 0, i32 1
  %4527 = load i32, ptr %4526, align 8, !tbaa !78
  %4528 = icmp ugt i32 %4527, 1
  br i1 %4528, label %4529, label %4531

4529:                                             ; preds = %4525
  %4530 = add i32 %4527, -1
  store i32 %4530, ptr %4526, align 8, !tbaa !78
  br label %4533

4531:                                             ; preds = %4525
  call void @Perl_sv_free2(ptr noundef nonnull %4523, i32 noundef %4527) #12
  %4532 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !13
  br label %4533

4533:                                             ; preds = %4517, %4529, %4531
  %4534 = phi ptr [ %4521, %4517 ], [ %4521, %4529 ], [ %4532, %4531 ]
  %4535 = getelementptr inbounds %struct.pmop, ptr %4534, i64 0, i32 9
  store ptr %4509, ptr %4535, align 8, !tbaa !82
  br label %4536

4536:                                             ; preds = %4533, %4503
  %4537 = getelementptr i8, ptr %4509, i64 16
  %4538 = load ptr, ptr %4537, align 8, !tbaa !6
  %4539 = getelementptr inbounds %struct.regexp, ptr %4538, i64 0, i32 14
  %4540 = load ptr, ptr %4539, align 8, !tbaa !17
  %4541 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 4
  %4542 = load ptr, ptr %4541, align 8, !tbaa !6
  %4543 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  store i32 %4543, ptr %198, align 4, !tbaa !6
  %4544 = getelementptr inbounds i8, ptr %180, i64 52
  %4545 = load i32, ptr %4544, align 4, !tbaa !6
  store i32 %4545, ptr @PL_savestack_ix, align 4, !tbaa !34
  call fastcc void @S_regcppop(ptr noundef %4538, ptr noundef nonnull %4)
  store i32 %4543, ptr @PL_savestack_ix, align 4, !tbaa !34
  store ptr %180, ptr %207, align 8, !tbaa !6
  %4546 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 2
  %4547 = load ptr, ptr %4546, align 8, !tbaa !6
  %4548 = call i32 @llvm.usub.sat.i32(i32 %183, i32 1)
  %4549 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 10
  %4550 = load ptr, ptr %4549, align 8, !tbaa !6
  br label %4892

4551:                                             ; preds = %4502
  %4552 = load ptr, ptr %66, align 8, !tbaa !57
  %4553 = icmp ult ptr %214, %4552
  br i1 %4553, label %5080, label %4986

4554:                                             ; preds = %221
  store i32 1, ptr %207, align 8, !tbaa !6
  br label %4627

4555:                                             ; preds = %221
  br label %4556

4556:                                             ; preds = %221, %4555
  %4557 = phi i32 [ 0, %4555 ], [ 1, %221 ]
  store i32 %4557, ptr %207, align 8, !tbaa !6
  %4558 = load i8, ptr %215, align 2, !tbaa !139
  %4559 = icmp eq i8 %4558, 0
  br i1 %4559, label %4627, label %4560

4560:                                             ; preds = %4556
  %4561 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4562 = icmp eq i8 %4561, 0
  br i1 %4562, label %4606, label %4563

4563:                                             ; preds = %4560
  %4564 = load ptr, ptr %59, align 8, !tbaa !53
  %4565 = ptrtoint ptr %4564 to i64
  %4566 = icmp ugt ptr %214, %4564
  br i1 %4566, label %4567, label %4612

4567:                                             ; preds = %4563
  %4568 = zext i8 %4558 to i64
  %4569 = sub nsw i64 0, %4568
  br label %4570

4570:                                             ; preds = %4567, %4599
  %4571 = phi i64 [ %4574, %4599 ], [ %4569, %4567 ]
  %4572 = phi ptr [ %4600, %4599 ], [ %214, %4567 ]
  %4573 = ptrtoint ptr %4572 to i64
  %4574 = add nsw i64 %4571, 1
  %4575 = getelementptr inbounds i8, ptr %4572, i64 -1
  %4576 = load i8, ptr %4575, align 1, !tbaa !6
  %4577 = icmp sgt i8 %4576, -1
  br i1 %4577, label %4599, label %4578

4578:                                             ; preds = %4570
  %4579 = icmp ugt ptr %4575, %4564
  br i1 %4579, label %4580, label %4594

4580:                                             ; preds = %4578
  %4581 = getelementptr i8, ptr %4572, i64 %4565
  %4582 = sub i64 0, %4573
  %4583 = getelementptr i8, ptr %4581, i64 %4582
  br label %4584

4584:                                             ; preds = %4589, %4580
  %4585 = phi ptr [ %4590, %4589 ], [ %4575, %4580 ]
  %4586 = load i8, ptr %4585, align 1, !tbaa !6
  %4587 = and i8 %4586, -64
  %4588 = icmp eq i8 %4587, -128
  br i1 %4588, label %4589, label %4594

4589:                                             ; preds = %4584
  %4590 = getelementptr inbounds i8, ptr %4585, i64 -1
  %4591 = icmp ugt ptr %4590, %4564
  br i1 %4591, label %4584, label %4592, !llvm.loop !130

4592:                                             ; preds = %4589
  %4593 = load i8, ptr %4583, align 1, !tbaa !6
  br label %4594

4594:                                             ; preds = %4584, %4592, %4578
  %4595 = phi ptr [ %4575, %4578 ], [ %4583, %4592 ], [ %4585, %4584 ]
  %4596 = phi i8 [ %4576, %4578 ], [ %4593, %4592 ], [ %4586, %4584 ]
  %4597 = icmp ugt i8 %4596, -63
  br i1 %4597, label %4599, label %4598

4598:                                             ; preds = %4594
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %4599

4599:                                             ; preds = %4598, %4594, %4570
  %4600 = phi ptr [ %4595, %4594 ], [ %4595, %4598 ], [ %4575, %4570 ]
  %4601 = icmp ne i64 %4574, 0
  %4602 = icmp ugt ptr %4600, %4564
  %4603 = and i1 %4601, %4602
  br i1 %4603, label %4570, label %4604, !llvm.loop !131

4604:                                             ; preds = %4599
  %4605 = icmp slt i64 %4571, -1
  br i1 %4605, label %4612, label %4627

4606:                                             ; preds = %4560
  %4607 = zext i8 %4558 to i64
  %4608 = sub nsw i64 0, %4607
  %4609 = getelementptr inbounds i8, ptr %214, i64 %4608
  %4610 = load ptr, ptr %59, align 8, !tbaa !53
  %4611 = icmp ult ptr %4609, %4610
  br i1 %4611, label %4612, label %4627

4612:                                             ; preds = %4606, %4563, %4604
  %4613 = icmp eq i32 %170, 0
  %4614 = load i32, ptr %207, align 8, !tbaa !6
  %4615 = icmp eq i32 %4614, 0
  br i1 %4613, label %4618, label %4616

4616:                                             ; preds = %4612
  %4617 = zext i1 %4615 to i8
  br label %4619

4618:                                             ; preds = %4612
  br i1 %4615, label %4619, label %5080

4619:                                             ; preds = %4618, %4616
  %4620 = phi i8 [ %4617, %4616 ], [ %172, %4618 ]
  %4621 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4622 = load i32, ptr %4621, align 4, !tbaa !224
  %4623 = zext i32 %4622 to i64
  %4624 = getelementptr inbounds %struct.regnode, ptr %215, i64 %4623
  %4625 = icmp eq i32 %4622, 0
  %4626 = select i1 %4625, ptr null, ptr %4624
  br label %4876

4627:                                             ; preds = %4606, %4604, %4556, %4554
  %4628 = phi ptr [ %214, %4554 ], [ %214, %4556 ], [ %4600, %4604 ], [ %4609, %4606 ]
  store ptr %215, ptr %192, align 8, !tbaa !6
  store i32 %170, ptr %208, align 4, !tbaa !6
  %4629 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  br label %4892

4630:                                             ; preds = %221
  %4631 = load i32, ptr %207, align 8, !tbaa !6
  %4632 = icmp eq i32 %4631, 0
  %4633 = zext i1 %4632 to i32
  store i32 %4633, ptr %207, align 8, !tbaa !6
  br label %4634

4634:                                             ; preds = %221, %4630
  %4635 = load i32, ptr %208, align 4, !tbaa !6
  %4636 = icmp eq i32 %4635, 0
  %4637 = load i32, ptr %207, align 8, !tbaa !6
  br i1 %4636, label %4641, label %4638

4638:                                             ; preds = %4634
  %4639 = icmp ne i32 %4637, 0
  %4640 = zext i1 %4639 to i8
  br label %4643

4641:                                             ; preds = %4634
  %4642 = icmp eq i32 %4637, 0
  br i1 %4642, label %5080, label %4643

4643:                                             ; preds = %4641, %4638
  %4644 = phi i8 [ %4640, %4638 ], [ %172, %4641 ]
  %4645 = load ptr, ptr %192, align 8, !tbaa !6
  %4646 = getelementptr inbounds %struct.regnode, ptr %4645, i64 0, i32 1
  %4647 = load i8, ptr %4646, align 1, !tbaa !119
  %4648 = icmp eq i8 %4647, 65
  br i1 %4648, label %4651, label %4649

4649:                                             ; preds = %4643
  %4650 = load ptr, ptr %204, align 8, !tbaa !294
  br label %4651

4651:                                             ; preds = %4649, %4643
  %4652 = phi ptr [ %4650, %4649 ], [ %214, %4643 ]
  %4653 = getelementptr inbounds %struct.regnode_1, ptr %4645, i64 0, i32 3
  %4654 = load i32, ptr %4653, align 4, !tbaa !224
  %4655 = zext i32 %4654 to i64
  %4656 = getelementptr inbounds %struct.regnode, ptr %4645, i64 %4655
  %4657 = icmp eq i32 %4654, 0
  %4658 = select i1 %4657, ptr null, ptr %4656
  br label %3369

4659:                                             ; preds = %221
  %4660 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4661 = load i32, ptr %4660, align 4, !tbaa !224
  %4662 = zext i32 %4661 to i64
  %4663 = getelementptr inbounds %struct.regnode, ptr %215, i64 %4662
  %4664 = icmp eq i32 %4661, 0
  %4665 = select i1 %4664, ptr null, ptr %4663
  br label %4876

4666:                                             ; preds = %221
  store ptr %216, ptr %60, align 8, !tbaa !93
  br label %4667

4667:                                             ; preds = %221, %4666
  %4668 = load i8, ptr %215, align 2, !tbaa !139
  %4669 = icmp eq i8 %4668, 0
  br i1 %4669, label %4670, label %4678

4670:                                             ; preds = %4667
  %4671 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %4672 = load ptr, ptr %4671, align 8, !tbaa !223
  %4673 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4674 = load i32, ptr %4673, align 4, !tbaa !224
  %4675 = zext i32 %4674 to i64
  %4676 = getelementptr inbounds %struct.reg_data, ptr %4672, i64 0, i32 2, i64 %4675
  %4677 = load ptr, ptr %4676, align 8, !tbaa !13
  br label %4678

4678:                                             ; preds = %4670, %4667
  %4679 = phi ptr [ %173, %4667 ], [ %4677, %4670 ]
  %4680 = phi ptr [ %174, %4667 ], [ %4677, %4670 ]
  store i32 124, ptr %188, align 8, !tbaa !276
  br label %4940

4681:                                             ; preds = %221
  store ptr %181, ptr %207, align 8, !tbaa !6
  %4682 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %4683 = load ptr, ptr %4682, align 8, !tbaa !223
  %4684 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4685 = load i32, ptr %4684, align 4, !tbaa !224
  %4686 = zext i32 %4685 to i64
  %4687 = getelementptr inbounds %struct.reg_data, ptr %4683, i64 0, i32 2, i64 %4686
  %4688 = load ptr, ptr %4687, align 8, !tbaa !13
  store ptr %4688, ptr %192, align 8, !tbaa !6
  store ptr %214, ptr %196, align 8, !tbaa !6
  br label %4892

4689:                                             ; preds = %221
  %4690 = load ptr, ptr %207, align 8, !tbaa !6
  br label %4986

4691:                                             ; preds = %221
  %4692 = icmp eq ptr %175, null
  br i1 %4692, label %4715, label %4693

4693:                                             ; preds = %4691
  %4694 = load ptr, ptr %192, align 8, !tbaa !6
  %4695 = call i32 @Perl_sv_eq_flags(ptr noundef %4694, ptr noundef nonnull %175, i32 noundef 2) #12
  %4696 = icmp eq i32 %4695, 0
  br i1 %4696, label %4715, label %4697

4697:                                             ; preds = %4693
  %4698 = load ptr, ptr %196, align 8, !tbaa !6
  %4699 = icmp ugt ptr %4698, %1
  br i1 %4699, label %4700, label %4713

4700:                                             ; preds = %4697
  %4701 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4702 = icmp eq i8 %4701, 0
  br i1 %4702, label %4706, label %4703

4703:                                             ; preds = %4700
  %4704 = load ptr, ptr %59, align 8, !tbaa !53
  %4705 = call fastcc ptr @S_reghopmaybe3(ptr noundef nonnull %4698, i64 noundef -1, ptr noundef %4704)
  br label %4711

4706:                                             ; preds = %4700
  %4707 = getelementptr inbounds i8, ptr %4698, i64 -1
  %4708 = load ptr, ptr %59, align 8, !tbaa !53
  %4709 = icmp ult ptr %4707, %4708
  %4710 = select i1 %4709, ptr null, ptr %4707
  br label %4711

4711:                                             ; preds = %4706, %4703
  %4712 = phi ptr [ %4705, %4703 ], [ %4710, %4706 ]
  store ptr %4712, ptr %60, align 8, !tbaa !93
  br label %4713

4713:                                             ; preds = %4711, %4697
  %4714 = load ptr, ptr %192, align 8, !tbaa !6
  br label %4715

4715:                                             ; preds = %4713, %4693, %4691
  %4716 = phi ptr [ %4714, %4713 ], [ %174, %4693 ], [ %174, %4691 ]
  %4717 = phi ptr [ null, %4713 ], [ %175, %4693 ], [ null, %4691 ]
  %4718 = load ptr, ptr %207, align 8, !tbaa !6
  %4719 = icmp eq ptr %4718, null
  br i1 %4719, label %5080, label %4720

4720:                                             ; preds = %4715
  %4721 = getelementptr inbounds %struct.regmatch_state, ptr %4718, i64 0, i32 2, i32 0, i32 4
  %4722 = load ptr, ptr %4721, align 8, !tbaa !6
  br label %5080

4723:                                             ; preds = %221
  %4724 = load i8, ptr %215, align 2, !tbaa !139
  %4725 = icmp eq i8 %4724, 0
  br i1 %4725, label %4727, label %4726

4726:                                             ; preds = %4723
  store ptr null, ptr %192, align 8, !tbaa !6
  store ptr %214, ptr %196, align 8, !tbaa !6
  store i32 128, ptr %188, align 8, !tbaa !276
  br label %4940

4727:                                             ; preds = %4723
  %4728 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %4729 = load ptr, ptr %4728, align 8, !tbaa !223
  %4730 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4731 = load i32, ptr %4730, align 4, !tbaa !224
  %4732 = zext i32 %4731 to i64
  %4733 = getelementptr inbounds %struct.reg_data, ptr %4729, i64 0, i32 2, i64 %4732
  %4734 = load ptr, ptr %4733, align 8, !tbaa !13
  %4735 = icmp eq ptr %181, null
  br i1 %4735, label %4876, label %4736

4736:                                             ; preds = %4727, %4742
  %4737 = phi ptr [ %4744, %4742 ], [ %181, %4727 ]
  %4738 = getelementptr inbounds %struct.regmatch_state, ptr %4737, i64 0, i32 2, i32 0, i32 4
  %4739 = load ptr, ptr %4738, align 8, !tbaa !6
  %4740 = call i32 @Perl_sv_eq_flags(ptr noundef %4739, ptr noundef %4734, i32 noundef 2) #12
  %4741 = icmp eq i32 %4740, 0
  br i1 %4741, label %4742, label %4746

4742:                                             ; preds = %4736
  %4743 = getelementptr inbounds %struct.regmatch_state, ptr %4737, i64 0, i32 2, i32 0, i32 2
  %4744 = load ptr, ptr %4743, align 8, !tbaa !6
  %4745 = icmp eq ptr %4744, null
  br i1 %4745, label %4876, label %4736, !llvm.loop !351

4746:                                             ; preds = %4736
  store ptr %4734, ptr %192, align 8, !tbaa !6
  store i32 128, ptr %188, align 8, !tbaa !276
  br label %4940

4747:                                             ; preds = %221
  %4748 = load ptr, ptr %192, align 8, !tbaa !6
  %4749 = icmp eq ptr %4748, null
  br i1 %4749, label %4750, label %5080

4750:                                             ; preds = %4747
  %4751 = load ptr, ptr %196, align 8, !tbaa !6
  %4752 = icmp ugt ptr %4751, %1
  br i1 %4752, label %4753, label %4766

4753:                                             ; preds = %4750
  %4754 = load i8, ptr %21, align 2, !tbaa !48, !range !97, !noundef !98
  %4755 = icmp eq i8 %4754, 0
  br i1 %4755, label %4759, label %4756

4756:                                             ; preds = %4753
  %4757 = load ptr, ptr %59, align 8, !tbaa !53
  %4758 = call fastcc ptr @S_reghopmaybe3(ptr noundef nonnull %4751, i64 noundef -1, ptr noundef %4757)
  br label %4764

4759:                                             ; preds = %4753
  %4760 = getelementptr inbounds i8, ptr %4751, i64 -1
  %4761 = load ptr, ptr %59, align 8, !tbaa !53
  %4762 = icmp ult ptr %4760, %4761
  %4763 = select i1 %4762, ptr null, ptr %4760
  br label %4764

4764:                                             ; preds = %4759, %4756
  %4765 = phi ptr [ %4758, %4756 ], [ %4763, %4759 ]
  store ptr %4765, ptr %60, align 8, !tbaa !93
  br label %4766

4766:                                             ; preds = %4764, %4750
  %4767 = icmp eq ptr %181, null
  br i1 %4767, label %5080, label %4768

4768:                                             ; preds = %4766
  %4769 = getelementptr inbounds %struct.regmatch_state, ptr %181, i64 0, i32 2, i32 0, i32 4
  %4770 = load ptr, ptr %4769, align 8, !tbaa !6
  br label %5080

4771:                                             ; preds = %221
  %4772 = ptrtoint ptr %216 to i64
  %4773 = ptrtoint ptr %214 to i64
  %4774 = sub i64 %4772, %4773
  %4775 = icmp sgt i64 %4774, 2
  br i1 %4775, label %4776, label %4800

4776:                                             ; preds = %4771
  %4777 = load i8, ptr %214, align 1, !tbaa !6
  %4778 = add i8 %4777, -10
  %4779 = icmp ult i8 %4778, 3
  br i1 %4779, label %4832, label %4780

4780:                                             ; preds = %4776
  %4781 = icmp eq i8 %4777, 13
  br i1 %4781, label %4827, label %4782

4782:                                             ; preds = %4780
  br i1 %23, label %4783, label %4798

4783:                                             ; preds = %4782
  switch i8 %4777, label %5080 [
    i8 -62, label %4784
    i8 -30, label %4788
  ]

4784:                                             ; preds = %4783
  %4785 = getelementptr inbounds i8, ptr %214, i64 1
  %4786 = load i8, ptr %4785, align 1, !tbaa !6
  %4787 = icmp eq i8 %4786, -123
  br i1 %4787, label %4832, label %5080

4788:                                             ; preds = %4783
  %4789 = getelementptr inbounds i8, ptr %214, i64 1
  %4790 = load i8, ptr %4789, align 1, !tbaa !6
  %4791 = icmp eq i8 %4790, -128
  br i1 %4791, label %4792, label %5080

4792:                                             ; preds = %4788
  %4793 = getelementptr inbounds i8, ptr %214, i64 2
  %4794 = load i8, ptr %4793, align 1, !tbaa !6
  %4795 = freeze i8 %4794
  %4796 = and i8 %4795, -2
  %4797 = icmp eq i8 %4796, -88
  br i1 %4797, label %4832, label %5080

4798:                                             ; preds = %4782
  %4799 = icmp eq i8 %4777, -123
  br i1 %4799, label %4832, label %5080

4800:                                             ; preds = %4771
  %4801 = icmp eq i64 %4774, 2
  br i1 %4801, label %4802, label %4818

4802:                                             ; preds = %4800
  %4803 = load i8, ptr %214, align 1, !tbaa !6
  %4804 = add i8 %4803, -10
  %4805 = icmp ult i8 %4804, 3
  br i1 %4805, label %4832, label %4806

4806:                                             ; preds = %4802
  %4807 = icmp eq i8 %4803, 13
  br i1 %4807, label %4827, label %4808

4808:                                             ; preds = %4806
  br i1 %23, label %4809, label %4816

4809:                                             ; preds = %4808
  %4810 = icmp eq i8 %4803, -62
  br i1 %4810, label %4811, label %5080

4811:                                             ; preds = %4809
  %4812 = getelementptr inbounds i8, ptr %214, i64 1
  %4813 = load i8, ptr %4812, align 1, !tbaa !6
  %4814 = freeze i8 %4813
  %4815 = icmp eq i8 %4814, -123
  br i1 %4815, label %4832, label %5080

4816:                                             ; preds = %4808
  %4817 = icmp eq i8 %4803, -123
  br i1 %4817, label %4832, label %5080

4818:                                             ; preds = %4800
  %4819 = icmp sgt i64 %4774, 0
  br i1 %4819, label %4820, label %5080

4820:                                             ; preds = %4818
  %4821 = load i8, ptr %214, align 1, !tbaa !6
  %4822 = add i8 %4821, -10
  %4823 = icmp ult i8 %4822, 4
  %4824 = or i1 %23, %4823
  %4825 = icmp eq i8 %4821, -123
  %4826 = select i1 %4824, i1 %4823, i1 %4825
  br i1 %4826, label %4832, label %5080

4827:                                             ; preds = %4806, %4780
  %4828 = getelementptr inbounds i8, ptr %214, i64 1
  %4829 = load i8, ptr %4828, align 1, !tbaa !6
  %4830 = icmp eq i8 %4829, 10
  %4831 = select i1 %4830, i64 2, i64 1
  br label %4832

4832:                                             ; preds = %4784, %4811, %4792, %4802, %4776, %4820, %4798, %4816, %4827
  %4833 = phi i64 [ %4831, %4827 ], [ 1, %4816 ], [ 1, %4798 ], [ 1, %4820 ], [ 1, %4776 ], [ 1, %4802 ], [ 3, %4792 ], [ 2, %4811 ], [ 2, %4784 ]
  %4834 = getelementptr inbounds i8, ptr %214, i64 %4833
  br label %4876

4835:                                             ; preds = %221
  %4836 = load ptr, ptr @PL_stderrgv, align 8, !tbaa !13
  %4837 = icmp eq ptr %4836, null
  br i1 %4837, label %4854, label %4838

4838:                                             ; preds = %4835
  %4839 = getelementptr inbounds %struct.gv, ptr %4836, i64 0, i32 2
  %4840 = load i32, ptr %4839, align 4, !tbaa !352
  %4841 = and i32 %4840, 255
  %4842 = icmp eq i32 %4841, 9
  br i1 %4842, label %4843, label %4854

4843:                                             ; preds = %4838
  %4844 = getelementptr inbounds %struct.gv, ptr %4836, i64 0, i32 3
  %4845 = load ptr, ptr %4844, align 8, !tbaa !6
  %4846 = getelementptr inbounds %struct.gp, ptr %4845, i64 0, i32 1
  %4847 = load ptr, ptr %4846, align 8, !tbaa !353
  %4848 = icmp eq ptr %4847, null
  br i1 %4848, label %4854, label %4849

4849:                                             ; preds = %4843
  %4850 = load ptr, ptr %4847, align 8, !tbaa !354
  %4851 = getelementptr inbounds %struct.xpvio, ptr %4850, i64 0, i32 5
  %4852 = load ptr, ptr %4851, align 8, !tbaa !356
  %4853 = icmp eq ptr %4852, null
  br i1 %4853, label %4854, label %4856

4854:                                             ; preds = %4849, %4843, %4838, %4835
  %4855 = call ptr @Perl_PerlIO_stderr() #12
  br label %4856

4856:                                             ; preds = %4849, %4854
  %4857 = phi ptr [ %4855, %4854 ], [ %4852, %4849 ]
  %4858 = ptrtoint ptr %215 to i64
  %4859 = getelementptr inbounds %struct.regnode, ptr %215, i64 0, i32 1
  %4860 = load i8, ptr %4859, align 1, !tbaa !119
  %4861 = zext i8 %4860 to i32
  %4862 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %4857, ptr noundef nonnull @.str.15, i64 noundef %4858, i32 noundef %4861) #12
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.16) #12
  br label %4863

4863:                                             ; preds = %1761, %274, %268, %4856
  br i1 %23, label %4864, label %4872

4864:                                             ; preds = %4863
  %4865 = sext i32 %222 to i64
  %4866 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4865
  %4867 = load i8, ptr %4866, align 1, !tbaa !6
  %4868 = zext i8 %4867 to i64
  %4869 = getelementptr inbounds i8, ptr %214, i64 %4868
  %4870 = load ptr, ptr %58, align 8, !tbaa !56
  %4871 = icmp ugt ptr %4869, %4870
  br i1 %4871, label %5080, label %4876

4872:                                             ; preds = %4863
  %4873 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4876

4874:                                             ; preds = %221, %221
  br label %4876

4875:                                             ; preds = %221
  br label %4876

4876:                                             ; preds = %2661, %2918, %2919, %4727, %2015, %2000, %257, %333, %2106, %873, %2127, %2130, %2133, %4864, %2094, %1683, %1165, %1144, %266, %253, %235, %226, %231, %223, %769, %770, %4742, %824, %795, %221, %4875, %4874, %1980, %2890, %843, %4619, %3028, %1975, %4872, %3026, %1970, %1797, %1960, %1824, %1695, %1720, %4832, %4659, %3038, %3019, %3007, %2972, %1779, %1749, %909, %272
  %4877 = phi ptr [ %180, %4872 ], [ %180, %4832 ], [ %180, %4659 ], [ %180, %3038 ], [ %180, %3026 ], [ %180, %3019 ], [ %180, %3007 ], [ %180, %2972 ], [ %180, %1970 ], [ %180, %1797 ], [ %180, %1824 ], [ %180, %1960 ], [ %180, %1779 ], [ %180, %1749 ], [ %180, %1695 ], [ %180, %1720 ], [ %180, %909 ], [ %180, %272 ], [ %180, %1975 ], [ %180, %3028 ], [ %180, %4619 ], [ %180, %843 ], [ %180, %2890 ], [ %180, %1980 ], [ %180, %4874 ], [ %180, %4875 ], [ %180, %221 ], [ %180, %795 ], [ %180, %824 ], [ %180, %4742 ], [ %180, %770 ], [ %180, %769 ], [ %180, %223 ], [ %180, %231 ], [ %180, %226 ], [ %180, %235 ], [ %180, %253 ], [ %180, %266 ], [ %180, %1144 ], [ %180, %1165 ], [ %180, %1683 ], [ %180, %2094 ], [ %180, %4864 ], [ %180, %2133 ], [ %180, %2130 ], [ %180, %2127 ], [ %180, %873 ], [ %180, %2106 ], [ %180, %333 ], [ %180, %257 ], [ %180, %2000 ], [ %180, %2015 ], [ %180, %4727 ], [ %180, %2661 ], [ null, %2918 ], [ %180, %2919 ]
  %4878 = phi ptr [ %181, %4872 ], [ %181, %4832 ], [ %181, %4659 ], [ %181, %3038 ], [ %181, %3026 ], [ %181, %3019 ], [ %181, %3007 ], [ %181, %2972 ], [ %181, %1970 ], [ %181, %1797 ], [ %181, %1824 ], [ %181, %1960 ], [ %181, %1779 ], [ %181, %1749 ], [ %181, %1695 ], [ %181, %1720 ], [ %181, %909 ], [ %181, %272 ], [ %181, %1975 ], [ %181, %3028 ], [ %181, %4619 ], [ %181, %843 ], [ %181, %2890 ], [ %181, %1980 ], [ %181, %4874 ], [ %181, %4875 ], [ %181, %221 ], [ %181, %795 ], [ %181, %824 ], [ %181, %4742 ], [ %181, %770 ], [ %181, %769 ], [ %181, %223 ], [ %181, %231 ], [ %181, %226 ], [ %181, %235 ], [ %181, %253 ], [ %181, %266 ], [ %181, %1144 ], [ %181, %1165 ], [ %181, %1683 ], [ %181, %2094 ], [ %181, %4864 ], [ %181, %2133 ], [ %181, %2130 ], [ %181, %2127 ], [ %181, %873 ], [ %181, %2106 ], [ %181, %333 ], [ %181, %257 ], [ %181, %2000 ], [ %181, %2015 ], [ null, %4727 ], [ %181, %2661 ], [ %181, %2918 ], [ %181, %2919 ]
  %4879 = phi i8 [ %168, %4872 ], [ %168, %4832 ], [ %168, %4659 ], [ %168, %3038 ], [ %168, %3026 ], [ %168, %3019 ], [ %168, %3007 ], [ %168, %2972 ], [ %168, %1970 ], [ %168, %1797 ], [ %168, %1824 ], [ %168, %1960 ], [ %168, %1779 ], [ %168, %1749 ], [ %168, %1695 ], [ %168, %1720 ], [ %168, %909 ], [ %168, %272 ], [ %168, %1975 ], [ %168, %3028 ], [ %168, %4619 ], [ %168, %843 ], [ %168, %2890 ], [ %168, %1980 ], [ %168, %4874 ], [ %168, %4875 ], [ %168, %221 ], [ %168, %795 ], [ %168, %824 ], [ %168, %4742 ], [ %168, %257 ], [ %168, %333 ], [ %168, %2106 ], [ %168, %873 ], [ %168, %2127 ], [ %168, %2130 ], [ %168, %2133 ], [ %168, %4864 ], [ %168, %2094 ], [ %1684, %1683 ], [ %168, %1165 ], [ %168, %1144 ], [ %168, %266 ], [ %168, %253 ], [ %168, %235 ], [ %168, %226 ], [ %168, %231 ], [ %168, %223 ], [ %168, %769 ], [ %168, %770 ], [ %168, %2000 ], [ %168, %2015 ], [ %168, %4727 ], [ %168, %2919 ], [ %168, %2918 ], [ %168, %2661 ]
  %4880 = phi ptr [ %106, %4872 ], [ %106, %4832 ], [ %106, %4659 ], [ %106, %3038 ], [ %106, %3026 ], [ %106, %3019 ], [ %106, %3007 ], [ %106, %2972 ], [ %106, %1970 ], [ %106, %1797 ], [ %106, %1824 ], [ %106, %1960 ], [ %106, %1779 ], [ %106, %1749 ], [ %106, %1695 ], [ %106, %1720 ], [ %106, %909 ], [ %106, %272 ], [ %106, %1975 ], [ %106, %3028 ], [ %106, %4619 ], [ %106, %843 ], [ %106, %2890 ], [ %106, %1980 ], [ %106, %4874 ], [ %106, %4875 ], [ %106, %221 ], [ %106, %795 ], [ %106, %824 ], [ %106, %4742 ], [ %106, %770 ], [ %106, %769 ], [ %106, %223 ], [ %106, %231 ], [ %106, %226 ], [ %106, %235 ], [ %106, %253 ], [ %106, %266 ], [ %106, %1144 ], [ %106, %1165 ], [ %106, %1683 ], [ %106, %2094 ], [ %106, %4864 ], [ %106, %2133 ], [ %106, %2130 ], [ %106, %2127 ], [ %106, %873 ], [ %106, %2106 ], [ %106, %333 ], [ %106, %257 ], [ %106, %2000 ], [ %106, %2015 ], [ %106, %4727 ], [ %2445, %2661 ], [ %106, %2918 ], [ %106, %2919 ]
  %4881 = phi ptr [ %107, %4872 ], [ %107, %4832 ], [ %107, %4659 ], [ %107, %3038 ], [ %107, %3026 ], [ %107, %3019 ], [ %107, %3007 ], [ %107, %2972 ], [ %107, %1970 ], [ %107, %1797 ], [ %107, %1824 ], [ %107, %1960 ], [ %107, %1779 ], [ %107, %1749 ], [ %107, %1695 ], [ %107, %1720 ], [ %107, %909 ], [ %107, %272 ], [ %107, %1975 ], [ %107, %3028 ], [ %107, %4619 ], [ %107, %843 ], [ %107, %2890 ], [ %107, %1980 ], [ %107, %4874 ], [ %107, %4875 ], [ %107, %221 ], [ %107, %795 ], [ %107, %824 ], [ %107, %4742 ], [ %107, %770 ], [ %107, %769 ], [ %107, %223 ], [ %107, %231 ], [ %107, %226 ], [ %107, %235 ], [ %107, %253 ], [ %107, %266 ], [ %107, %1144 ], [ %107, %1165 ], [ %107, %1683 ], [ %107, %2094 ], [ %107, %4864 ], [ %107, %2133 ], [ %107, %2130 ], [ %107, %2127 ], [ %107, %873 ], [ %107, %2106 ], [ %107, %333 ], [ %107, %257 ], [ %107, %2000 ], [ %107, %2015 ], [ %107, %4727 ], [ %2193, %2661 ], [ %107, %2918 ], [ %107, %2919 ]
  %4882 = phi i8 [ %108, %4872 ], [ %108, %4832 ], [ %108, %4659 ], [ %108, %3038 ], [ %108, %3026 ], [ %108, %3019 ], [ %108, %3007 ], [ %108, %2972 ], [ %108, %1970 ], [ %108, %1797 ], [ %108, %1824 ], [ %108, %1960 ], [ %108, %1779 ], [ %108, %1749 ], [ %108, %1695 ], [ %108, %1720 ], [ %108, %909 ], [ %108, %272 ], [ %108, %1975 ], [ %108, %3028 ], [ %108, %4619 ], [ %108, %843 ], [ %108, %2890 ], [ %108, %1980 ], [ %108, %4874 ], [ %108, %4875 ], [ %108, %221 ], [ %108, %795 ], [ %108, %824 ], [ %108, %4742 ], [ %108, %770 ], [ %108, %769 ], [ %108, %223 ], [ %108, %231 ], [ %108, %226 ], [ %108, %235 ], [ %108, %253 ], [ %108, %266 ], [ %108, %1144 ], [ %108, %1165 ], [ %108, %1683 ], [ %108, %2094 ], [ %108, %4864 ], [ %108, %2133 ], [ %108, %2130 ], [ %108, %2127 ], [ %108, %873 ], [ %108, %2106 ], [ %108, %333 ], [ %108, %257 ], [ %108, %2000 ], [ %108, %2015 ], [ %108, %4727 ], [ %2446, %2661 ], [ %108, %2918 ], [ %108, %2919 ]
  %4883 = phi ptr [ %109, %4872 ], [ %109, %4832 ], [ %109, %4659 ], [ %109, %3038 ], [ %109, %3026 ], [ %109, %3019 ], [ %109, %3007 ], [ %109, %2972 ], [ %109, %1970 ], [ %109, %1797 ], [ %109, %1824 ], [ %109, %1960 ], [ %109, %1779 ], [ %109, %1749 ], [ %109, %1695 ], [ %109, %1720 ], [ %109, %909 ], [ %109, %272 ], [ %109, %1975 ], [ %109, %3028 ], [ %109, %4619 ], [ %109, %843 ], [ %109, %2890 ], [ %109, %1980 ], [ %109, %4874 ], [ %109, %4875 ], [ %109, %221 ], [ %109, %795 ], [ %109, %824 ], [ %109, %4742 ], [ %109, %770 ], [ %109, %769 ], [ %109, %223 ], [ %109, %231 ], [ %109, %226 ], [ %109, %235 ], [ %109, %253 ], [ %109, %266 ], [ %109, %1144 ], [ %109, %1165 ], [ %109, %1683 ], [ %109, %2094 ], [ %109, %4864 ], [ %109, %2133 ], [ %109, %2130 ], [ %109, %2127 ], [ %109, %873 ], [ %109, %2106 ], [ %109, %333 ], [ %109, %257 ], [ %109, %2000 ], [ %109, %2015 ], [ %109, %4727 ], [ %2448, %2661 ], [ %109, %2918 ], [ %109, %2919 ]
  %4884 = phi ptr [ %110, %4872 ], [ %110, %4832 ], [ %110, %4659 ], [ %110, %3038 ], [ %110, %3026 ], [ %110, %3019 ], [ %110, %3007 ], [ %110, %2972 ], [ %110, %1970 ], [ %110, %1797 ], [ %110, %1824 ], [ %110, %1960 ], [ %110, %1779 ], [ %110, %1749 ], [ %110, %1695 ], [ %110, %1720 ], [ %110, %909 ], [ %110, %272 ], [ %110, %1975 ], [ %110, %3028 ], [ %110, %4619 ], [ %110, %843 ], [ %110, %2890 ], [ %110, %1980 ], [ %110, %4874 ], [ %110, %4875 ], [ %110, %221 ], [ %110, %795 ], [ %110, %824 ], [ %110, %4742 ], [ %110, %770 ], [ %110, %769 ], [ %110, %223 ], [ %110, %231 ], [ %110, %226 ], [ %110, %235 ], [ %110, %253 ], [ %110, %266 ], [ %110, %1144 ], [ %110, %1165 ], [ %110, %1683 ], [ %110, %2094 ], [ %110, %4864 ], [ %110, %2133 ], [ %110, %2130 ], [ %110, %2127 ], [ %110, %873 ], [ %110, %2106 ], [ %110, %333 ], [ %110, %257 ], [ %110, %2000 ], [ %110, %2015 ], [ %110, %4727 ], [ %2444, %2661 ], [ %110, %2918 ], [ %110, %2919 ]
  %4885 = phi i32 [ %170, %4872 ], [ %170, %4832 ], [ %170, %4659 ], [ %3040, %3038 ], [ %170, %3026 ], [ %170, %3019 ], [ %170, %3007 ], [ %170, %2972 ], [ %170, %1970 ], [ %170, %1797 ], [ %170, %1824 ], [ %170, %1960 ], [ %170, %1779 ], [ %170, %1749 ], [ %170, %1695 ], [ %170, %1720 ], [ %170, %909 ], [ %170, %272 ], [ %170, %1975 ], [ %170, %3028 ], [ 0, %4619 ], [ %170, %843 ], [ %170, %2890 ], [ %170, %1980 ], [ %170, %4874 ], [ %170, %4875 ], [ %170, %221 ], [ %170, %795 ], [ %170, %824 ], [ %170, %4742 ], [ %170, %770 ], [ %170, %769 ], [ %170, %223 ], [ %170, %231 ], [ %170, %226 ], [ %170, %235 ], [ %170, %253 ], [ %170, %266 ], [ %170, %1144 ], [ %170, %1165 ], [ %170, %1683 ], [ %170, %2094 ], [ %170, %4864 ], [ %170, %2133 ], [ %170, %2130 ], [ %170, %2127 ], [ %170, %873 ], [ %170, %2106 ], [ %170, %333 ], [ %170, %257 ], [ %170, %2000 ], [ %170, %2015 ], [ %170, %4727 ], [ %2663, %2661 ], [ %170, %2918 ], [ %170, %2919 ]
  %4886 = phi i8 [ %212, %4872 ], [ %212, %4832 ], [ %212, %4659 ], [ %212, %3038 ], [ %212, %3026 ], [ %212, %3019 ], [ %212, %3007 ], [ %212, %2972 ], [ %212, %1970 ], [ %212, %1797 ], [ %212, %1824 ], [ %212, %1960 ], [ %212, %1779 ], [ %212, %1749 ], [ %212, %1695 ], [ %212, %1720 ], [ %212, %909 ], [ %212, %272 ], [ %212, %1975 ], [ %212, %3028 ], [ %212, %4619 ], [ %212, %843 ], [ %212, %2890 ], [ %212, %1980 ], [ %212, %4874 ], [ %212, %4875 ], [ 1, %221 ], [ %212, %795 ], [ %212, %824 ], [ %212, %4742 ], [ %212, %770 ], [ %212, %769 ], [ %212, %223 ], [ %212, %231 ], [ %212, %226 ], [ %212, %235 ], [ %212, %253 ], [ %212, %266 ], [ %212, %1144 ], [ %212, %1165 ], [ %212, %1683 ], [ %212, %2094 ], [ %212, %4864 ], [ %212, %2133 ], [ %212, %2130 ], [ %212, %2127 ], [ %212, %873 ], [ %212, %2106 ], [ %212, %333 ], [ %212, %257 ], [ %212, %2000 ], [ %212, %2015 ], [ %212, %4727 ], [ %212, %2919 ], [ %212, %2918 ], [ %212, %2661 ]
  %4887 = phi i8 [ %172, %4872 ], [ %172, %4832 ], [ %172, %4659 ], [ %172, %3038 ], [ %172, %3026 ], [ %3021, %3019 ], [ %3010, %3007 ], [ %2974, %2972 ], [ %172, %1970 ], [ %172, %1797 ], [ %172, %1824 ], [ %172, %1960 ], [ %172, %1779 ], [ %172, %1749 ], [ %172, %1695 ], [ %172, %1720 ], [ %172, %909 ], [ %172, %272 ], [ %172, %1975 ], [ %172, %3028 ], [ %4620, %4619 ], [ %172, %843 ], [ %172, %2890 ], [ %172, %1980 ], [ %172, %4874 ], [ 0, %4875 ], [ %172, %221 ], [ %172, %795 ], [ %172, %824 ], [ %172, %4742 ], [ %172, %770 ], [ %172, %769 ], [ %172, %223 ], [ %172, %231 ], [ %172, %226 ], [ %172, %235 ], [ %172, %253 ], [ %172, %266 ], [ %172, %1144 ], [ %172, %1165 ], [ %172, %1683 ], [ %172, %2094 ], [ %172, %4864 ], [ %172, %2133 ], [ %172, %2130 ], [ %172, %2127 ], [ %172, %873 ], [ %172, %2106 ], [ %172, %333 ], [ %172, %257 ], [ %172, %2000 ], [ %172, %2015 ], [ %172, %4727 ], [ %2664, %2661 ], [ %172, %2918 ], [ %172, %2919 ]
  %4888 = phi i32 [ %84, %4872 ], [ %84, %4832 ], [ %84, %4659 ], [ %84, %3038 ], [ %84, %3026 ], [ %84, %3019 ], [ %84, %3007 ], [ %84, %2972 ], [ %84, %1970 ], [ %84, %1797 ], [ %84, %1824 ], [ %84, %1960 ], [ %84, %1779 ], [ %84, %1749 ], [ %84, %1695 ], [ %84, %1720 ], [ %84, %909 ], [ %84, %272 ], [ %84, %1975 ], [ %84, %3028 ], [ %84, %4619 ], [ %84, %843 ], [ %2892, %2890 ], [ %84, %1980 ], [ %84, %4874 ], [ %84, %4875 ], [ %84, %221 ], [ %84, %795 ], [ %84, %824 ], [ %84, %4742 ], [ %84, %770 ], [ %84, %769 ], [ %84, %223 ], [ %84, %231 ], [ %84, %226 ], [ %84, %235 ], [ %84, %253 ], [ %84, %266 ], [ %84, %1144 ], [ %84, %1165 ], [ %84, %1683 ], [ %84, %2094 ], [ %84, %4864 ], [ %84, %2133 ], [ %84, %2130 ], [ %84, %2127 ], [ %84, %873 ], [ %84, %2106 ], [ %84, %333 ], [ %84, %257 ], [ %84, %2000 ], [ %84, %2015 ], [ %84, %4727 ], [ %84, %2919 ], [ %84, %2918 ], [ %84, %2661 ]
  %4889 = phi i32 [ %183, %4872 ], [ %183, %4832 ], [ %183, %4659 ], [ %183, %3038 ], [ %183, %3026 ], [ %183, %3019 ], [ %183, %3007 ], [ %183, %2972 ], [ %183, %1970 ], [ %183, %1797 ], [ %183, %1824 ], [ %183, %1960 ], [ %183, %1779 ], [ %183, %1749 ], [ %183, %1695 ], [ %183, %1720 ], [ %183, %909 ], [ %183, %272 ], [ %183, %1975 ], [ %183, %3028 ], [ %183, %4619 ], [ %183, %843 ], [ %183, %2890 ], [ %183, %1980 ], [ %183, %4874 ], [ %183, %4875 ], [ %183, %221 ], [ %183, %795 ], [ %183, %824 ], [ %183, %4742 ], [ %183, %770 ], [ %183, %769 ], [ %183, %223 ], [ %183, %231 ], [ %183, %226 ], [ %183, %235 ], [ %183, %253 ], [ %183, %266 ], [ %183, %1144 ], [ %183, %1165 ], [ %183, %1683 ], [ %183, %2094 ], [ %183, %4864 ], [ %183, %2133 ], [ %183, %2130 ], [ %183, %2127 ], [ %183, %873 ], [ %183, %2106 ], [ %183, %333 ], [ %183, %257 ], [ %183, %2000 ], [ %183, %2015 ], [ %183, %4727 ], [ %2182, %2661 ], [ %183, %2918 ], [ %183, %2919 ]
  %4890 = phi ptr [ %4873, %4872 ], [ %4834, %4832 ], [ %214, %4659 ], [ %214, %3038 ], [ %214, %3026 ], [ %214, %3019 ], [ %214, %3007 ], [ %214, %2972 ], [ %1971, %1970 ], [ %1798, %1797 ], [ %1825, %1824 ], [ %1966, %1960 ], [ %1780, %1779 ], [ %1755, %1749 ], [ %1701, %1695 ], [ %1721, %1720 ], [ %910, %909 ], [ %273, %272 ], [ %1979, %1975 ], [ %214, %3028 ], [ %214, %4619 ], [ %844, %843 ], [ %214, %2890 ], [ %1994, %1980 ], [ %214, %4874 ], [ %214, %4875 ], [ %214, %221 ], [ %797, %795 ], [ %827, %824 ], [ %214, %4742 ], [ %214, %257 ], [ %214, %333 ], [ %2110, %2106 ], [ %881, %873 ], [ %2125, %2127 ], [ %2125, %2130 ], [ %2125, %2133 ], [ %4869, %4864 ], [ %214, %2094 ], [ %214, %1683 ], [ %214, %1165 ], [ %214, %1144 ], [ %214, %266 ], [ %214, %253 ], [ %214, %235 ], [ %214, %226 ], [ %214, %231 ], [ %214, %223 ], [ %214, %769 ], [ %214, %770 ], [ %2021, %2015 ], [ %2002, %2000 ], [ %214, %4727 ], [ %214, %2919 ], [ %214, %2918 ], [ %214, %2661 ]
  %4891 = phi ptr [ %186, %4872 ], [ %186, %4832 ], [ %4665, %4659 ], [ %186, %3038 ], [ %3027, %3026 ], [ %186, %3019 ], [ %186, %3007 ], [ %186, %2972 ], [ %186, %1970 ], [ %186, %1797 ], [ %186, %1824 ], [ %186, %1960 ], [ %186, %1779 ], [ %186, %1749 ], [ %186, %1695 ], [ %186, %1720 ], [ %186, %909 ], [ %186, %272 ], [ %186, %1975 ], [ %3037, %3028 ], [ %4626, %4619 ], [ %186, %843 ], [ %186, %2890 ], [ %186, %1980 ], [ %186, %4874 ], [ %186, %4875 ], [ %186, %221 ], [ %186, %795 ], [ %186, %824 ], [ %186, %4742 ], [ %186, %770 ], [ %186, %769 ], [ %186, %223 ], [ %186, %231 ], [ %186, %226 ], [ %186, %235 ], [ %186, %253 ], [ %186, %266 ], [ %186, %1144 ], [ %186, %1165 ], [ %186, %1683 ], [ %186, %2094 ], [ %186, %4864 ], [ %186, %2133 ], [ %186, %2130 ], [ %186, %2127 ], [ %186, %873 ], [ %186, %2106 ], [ %186, %333 ], [ %186, %257 ], [ %186, %2000 ], [ %186, %2015 ], [ %186, %4727 ], [ %186, %2919 ], [ %186, %2918 ], [ %186, %2661 ]
  br label %73, !llvm.loop !337

4892:                                             ; preds = %2784, %3254, %3402, %4536, %4627, %4681, %3052, %3174
  %4893 = phi i32 [ 106, %3174 ], [ 98, %3052 ], [ 126, %4681 ], [ 116, %4627 ], [ 96, %4536 ], [ 112, %3402 ], [ 108, %3254 ], [ 96, %2784 ]
  %4894 = phi i8 [ %169, %3174 ], [ %169, %3052 ], [ %169, %4681 ], [ %169, %4627 ], [ %4514, %4536 ], [ %169, %3402 ], [ %169, %3254 ], [ %2762, %2784 ]
  %4895 = phi ptr [ %106, %3174 ], [ %106, %3052 ], [ %106, %4681 ], [ %106, %4627 ], [ %106, %4536 ], [ %106, %3402 ], [ %106, %3254 ], [ %2746, %2784 ]
  %4896 = phi ptr [ %107, %3174 ], [ %107, %3052 ], [ %107, %4681 ], [ %107, %4627 ], [ %107, %4536 ], [ %107, %3402 ], [ %107, %3254 ], [ %2747, %2784 ]
  %4897 = phi i8 [ %108, %3174 ], [ %108, %3052 ], [ %108, %4681 ], [ %108, %4627 ], [ %108, %4536 ], [ %108, %3402 ], [ %108, %3254 ], [ %2748, %2784 ]
  %4898 = phi ptr [ %109, %3174 ], [ %109, %3052 ], [ %109, %4681 ], [ %109, %4627 ], [ %109, %4536 ], [ %109, %3402 ], [ %109, %3254 ], [ %2753, %2784 ]
  %4899 = phi ptr [ %110, %3174 ], [ %110, %3052 ], [ %110, %4681 ], [ %110, %4627 ], [ %110, %4536 ], [ %110, %3402 ], [ %110, %3254 ], [ %2754, %2784 ]
  %4900 = phi i32 [ %170, %3174 ], [ %170, %3052 ], [ %170, %4681 ], [ 0, %4627 ], [ %170, %4536 ], [ %170, %3402 ], [ %170, %3254 ], [ %2755, %2784 ]
  %4901 = phi i8 [ %212, %3174 ], [ 0, %3052 ], [ %212, %4681 ], [ %212, %4627 ], [ %4505, %4536 ], [ %3403, %3402 ], [ %212, %3254 ], [ %212, %2784 ]
  %4902 = phi i8 [ %172, %3174 ], [ %172, %3052 ], [ %172, %4681 ], [ %172, %4627 ], [ %172, %4536 ], [ %172, %3402 ], [ %172, %3254 ], [ %2756, %2784 ]
  %4903 = phi ptr [ %173, %3174 ], [ %173, %3052 ], [ %4688, %4681 ], [ %173, %4627 ], [ %173, %4536 ], [ %173, %3402 ], [ %173, %3254 ], [ %173, %2784 ]
  %4904 = phi ptr [ %174, %3174 ], [ %174, %3052 ], [ %4688, %4681 ], [ %174, %4627 ], [ %174, %4536 ], [ %174, %3402 ], [ %174, %3254 ], [ %174, %2784 ]
  %4905 = phi ptr [ %3176, %3174 ], [ %188, %3052 ], [ %179, %4681 ], [ %179, %4627 ], [ %4542, %4536 ], [ %179, %3402 ], [ %3256, %3254 ], [ null, %2784 ]
  %4906 = phi ptr [ %180, %3174 ], [ %180, %3052 ], [ %180, %4681 ], [ %180, %4627 ], [ %4547, %4536 ], [ %180, %3402 ], [ %180, %3254 ], [ %188, %2784 ]
  %4907 = phi ptr [ %181, %3174 ], [ %181, %3052 ], [ %188, %4681 ], [ %181, %4627 ], [ %181, %4536 ], [ %181, %3402 ], [ %181, %3254 ], [ %181, %2784 ]
  %4908 = phi i32 [ %183, %3174 ], [ %183, %3052 ], [ %183, %4681 ], [ %183, %4627 ], [ %4548, %4536 ], [ %183, %3402 ], [ %183, %3254 ], [ %2757, %2784 ]
  %4909 = phi ptr [ %214, %3174 ], [ %214, %3052 ], [ %214, %4681 ], [ %4628, %4627 ], [ %4504, %4536 ], [ %214, %3402 ], [ %214, %3254 ], [ %214, %2784 ]
  %4910 = phi ptr [ %214, %3174 ], [ %214, %3052 ], [ %214, %4681 ], [ %214, %4627 ], [ %4504, %4536 ], [ %214, %3402 ], [ %214, %3254 ], [ %214, %2784 ]
  %4911 = phi ptr [ %186, %3174 ], [ %3053, %3052 ], [ %186, %4681 ], [ %186, %4627 ], [ %186, %4536 ], [ %186, %3402 ], [ %186, %3254 ], [ %186, %2784 ]
  %4912 = phi ptr [ %3184, %3174 ], [ %3059, %3052 ], [ %186, %4681 ], [ %4629, %4627 ], [ %4550, %4536 ], [ %3404, %3402 ], [ %3258, %3254 ], [ %2752, %2784 ]
  %4913 = phi ptr [ %189, %3174 ], [ %189, %3052 ], [ %189, %4681 ], [ %189, %4627 ], [ %4540, %4536 ], [ %189, %3402 ], [ %189, %3254 ], [ %2751, %2784 ]
  %4914 = phi ptr [ %190, %3174 ], [ %190, %3052 ], [ %190, %4681 ], [ %190, %4627 ], [ %4538, %4536 ], [ %190, %3402 ], [ %190, %3254 ], [ %2750, %2784 ]
  %4915 = phi ptr [ %191, %3174 ], [ %191, %3052 ], [ %191, %4681 ], [ %191, %4627 ], [ %4509, %4536 ], [ %191, %3402 ], [ %191, %3254 ], [ %2749, %2784 ]
  store i32 %4893, ptr %188, align 8, !tbaa !276
  br label %4916

4916:                                             ; preds = %4892, %3315
  %4917 = phi i8 [ %169, %3315 ], [ %4894, %4892 ]
  %4918 = phi ptr [ %106, %3315 ], [ %4895, %4892 ]
  %4919 = phi ptr [ %107, %3315 ], [ %4896, %4892 ]
  %4920 = phi i8 [ %108, %3315 ], [ %4897, %4892 ]
  %4921 = phi ptr [ %109, %3315 ], [ %4898, %4892 ]
  %4922 = phi ptr [ %110, %3315 ], [ %4899, %4892 ]
  %4923 = phi i32 [ %170, %3315 ], [ %4900, %4892 ]
  %4924 = phi i8 [ %212, %3315 ], [ %4901, %4892 ]
  %4925 = phi i8 [ %172, %3315 ], [ %4902, %4892 ]
  %4926 = phi ptr [ %173, %3315 ], [ %4903, %4892 ]
  %4927 = phi ptr [ %174, %3315 ], [ %4904, %4892 ]
  %4928 = phi ptr [ %179, %3315 ], [ %4905, %4892 ]
  %4929 = phi ptr [ %180, %3315 ], [ %4906, %4892 ]
  %4930 = phi ptr [ %181, %3315 ], [ %4907, %4892 ]
  %4931 = phi i32 [ %183, %3315 ], [ %4908, %4892 ]
  %4932 = phi ptr [ %214, %3315 ], [ %4909, %4892 ]
  %4933 = phi ptr [ %214, %3315 ], [ %4910, %4892 ]
  %4934 = phi ptr [ %3316, %3315 ], [ %4911, %4892 ]
  %4935 = phi ptr [ %3318, %3315 ], [ %4912, %4892 ]
  %4936 = phi ptr [ %189, %3315 ], [ %4913, %4892 ]
  %4937 = phi ptr [ %190, %3315 ], [ %4914, %4892 ]
  %4938 = phi ptr [ %191, %3315 ], [ %4915, %4892 ]
  %4939 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store ptr %182, ptr %4939, align 8, !tbaa !6
  br label %4940

4940:                                             ; preds = %3315, %3188, %3083, %4746, %4430, %4219, %4916, %4726, %4678, %4314, %3700, %3333, %3297, %759, %238
  %4941 = phi i8 [ %169, %4726 ], [ %169, %4746 ], [ %4917, %4916 ], [ %169, %4678 ], [ %169, %4430 ], [ %169, %4314 ], [ %169, %3700 ], [ %169, %3333 ], [ %169, %3297 ], [ %169, %759 ], [ %169, %238 ], [ %169, %4219 ], [ %169, %3083 ], [ %169, %3188 ], [ %169, %3315 ]
  %4942 = phi ptr [ %106, %4726 ], [ %106, %4746 ], [ %4918, %4916 ], [ %106, %4678 ], [ %106, %4430 ], [ %106, %4314 ], [ %106, %3700 ], [ %106, %3333 ], [ %106, %3297 ], [ %106, %759 ], [ %106, %238 ], [ %106, %4219 ], [ %106, %3083 ], [ %106, %3188 ], [ %106, %3315 ]
  %4943 = phi ptr [ %107, %4726 ], [ %107, %4746 ], [ %4919, %4916 ], [ %107, %4678 ], [ %107, %4430 ], [ %107, %4314 ], [ %107, %3700 ], [ %107, %3333 ], [ %107, %3297 ], [ %107, %759 ], [ %107, %238 ], [ %107, %4219 ], [ %107, %3083 ], [ %107, %3188 ], [ %107, %3315 ]
  %4944 = phi i8 [ %108, %4726 ], [ %108, %4746 ], [ %4920, %4916 ], [ %108, %4678 ], [ %108, %4430 ], [ %108, %4314 ], [ %108, %3700 ], [ %108, %3333 ], [ %108, %3297 ], [ %108, %759 ], [ %108, %238 ], [ %108, %4219 ], [ %108, %3083 ], [ %108, %3188 ], [ %108, %3315 ]
  %4945 = phi ptr [ %109, %4726 ], [ %109, %4746 ], [ %4921, %4916 ], [ %109, %4678 ], [ %109, %4430 ], [ %109, %4314 ], [ %109, %3700 ], [ %109, %3333 ], [ %109, %3297 ], [ %109, %759 ], [ %109, %238 ], [ %109, %4219 ], [ %109, %3083 ], [ %109, %3188 ], [ %109, %3315 ]
  %4946 = phi ptr [ %110, %4726 ], [ %110, %4746 ], [ %4922, %4916 ], [ %110, %4678 ], [ %110, %4430 ], [ %110, %4314 ], [ %110, %3700 ], [ %110, %3333 ], [ %110, %3297 ], [ %110, %759 ], [ %110, %238 ], [ %110, %4219 ], [ %110, %3083 ], [ %110, %3188 ], [ %110, %3315 ]
  %4947 = phi i32 [ %170, %4726 ], [ %170, %4746 ], [ %4923, %4916 ], [ %170, %4678 ], [ %170, %4430 ], [ %170, %4314 ], [ %170, %3700 ], [ %170, %3333 ], [ %170, %3297 ], [ %170, %759 ], [ %170, %238 ], [ %170, %4219 ], [ %170, %3083 ], [ %170, %3188 ], [ %170, %3315 ]
  %4948 = phi i8 [ %212, %4726 ], [ %212, %4746 ], [ %4924, %4916 ], [ %212, %4678 ], [ %4317, %4430 ], [ %4263, %4314 ], [ %3490, %3700 ], [ %212, %3333 ], [ %212, %3297 ], [ %212, %759 ], [ %212, %238 ], [ %4076, %4219 ], [ %212, %3083 ], [ %212, %3188 ], [ %212, %3315 ]
  %4949 = phi i8 [ %172, %4726 ], [ %172, %4746 ], [ %4925, %4916 ], [ %172, %4678 ], [ %172, %4430 ], [ %172, %4314 ], [ %172, %3700 ], [ %172, %3333 ], [ %172, %3297 ], [ %172, %759 ], [ %172, %238 ], [ %172, %4219 ], [ %172, %3083 ], [ %172, %3188 ], [ %172, %3315 ]
  %4950 = phi ptr [ %173, %4726 ], [ %173, %4746 ], [ %4926, %4916 ], [ %4679, %4678 ], [ %173, %4430 ], [ %173, %4314 ], [ %173, %3700 ], [ %3334, %3333 ], [ %173, %3297 ], [ %173, %759 ], [ %173, %238 ], [ %173, %4219 ], [ %173, %3083 ], [ %173, %3188 ], [ %173, %3315 ]
  %4951 = phi ptr [ %174, %4726 ], [ %174, %4746 ], [ %4927, %4916 ], [ %4680, %4678 ], [ %174, %4430 ], [ %174, %4314 ], [ %174, %3700 ], [ %174, %3333 ], [ %174, %3297 ], [ %174, %759 ], [ %174, %238 ], [ %174, %4219 ], [ %174, %3083 ], [ %174, %3188 ], [ %174, %3315 ]
  %4952 = phi i8 [ %176, %4726 ], [ %176, %4746 ], [ %176, %4916 ], [ %176, %4678 ], [ %176, %4430 ], [ %176, %4314 ], [ %176, %3700 ], [ %176, %3333 ], [ %176, %3297 ], [ %609, %759 ], [ %176, %238 ], [ %176, %4219 ], [ %176, %3083 ], [ %176, %3188 ], [ %176, %3315 ]
  %4953 = phi i8 [ %177, %4726 ], [ %177, %4746 ], [ %177, %4916 ], [ %177, %4678 ], [ %177, %4430 ], [ %177, %4314 ], [ %177, %3700 ], [ %177, %3333 ], [ %177, %3297 ], [ %610, %759 ], [ %177, %238 ], [ %177, %4219 ], [ %177, %3083 ], [ %177, %3188 ], [ %177, %3315 ]
  %4954 = phi ptr [ %179, %4726 ], [ %179, %4746 ], [ %4928, %4916 ], [ %179, %4678 ], [ %179, %4430 ], [ %179, %4314 ], [ %179, %3700 ], [ %179, %3333 ], [ %3260, %3297 ], [ %179, %759 ], [ %179, %238 ], [ %179, %4219 ], [ %179, %3083 ], [ %179, %3188 ], [ %179, %3315 ]
  %4955 = phi ptr [ %180, %4726 ], [ %180, %4746 ], [ %4929, %4916 ], [ %180, %4678 ], [ %180, %4430 ], [ %180, %4314 ], [ %3701, %3700 ], [ %180, %3333 ], [ %180, %3297 ], [ %180, %759 ], [ %180, %238 ], [ %180, %4219 ], [ %180, %3083 ], [ %180, %3188 ], [ %180, %3315 ]
  %4956 = phi ptr [ %181, %4726 ], [ %181, %4746 ], [ %4930, %4916 ], [ %181, %4678 ], [ %181, %4430 ], [ %181, %4314 ], [ %181, %3700 ], [ %181, %3333 ], [ %181, %3297 ], [ %181, %759 ], [ %181, %238 ], [ %181, %4219 ], [ %181, %3083 ], [ %181, %3188 ], [ %181, %3315 ]
  %4957 = phi ptr [ %182, %4726 ], [ %182, %4746 ], [ %188, %4916 ], [ %182, %4678 ], [ %182, %4430 ], [ %182, %4314 ], [ %182, %3700 ], [ %182, %3333 ], [ %182, %3297 ], [ %182, %759 ], [ %182, %238 ], [ %182, %4219 ], [ %182, %3083 ], [ %182, %3188 ], [ %182, %3315 ]
  %4958 = phi i32 [ %183, %4726 ], [ %183, %4746 ], [ %4931, %4916 ], [ %183, %4678 ], [ %183, %4430 ], [ %183, %4314 ], [ %183, %3700 ], [ %183, %3333 ], [ %183, %3297 ], [ %183, %759 ], [ %183, %238 ], [ %183, %4219 ], [ %183, %3083 ], [ %183, %3188 ], [ %183, %3315 ]
  %4959 = phi ptr [ %214, %4726 ], [ %214, %4746 ], [ %4932, %4916 ], [ %214, %4678 ], [ %4318, %4430 ], [ %4264, %4314 ], [ %3492, %3700 ], [ %214, %3333 ], [ %214, %3297 ], [ %741, %759 ], [ %214, %238 ], [ %4158, %4219 ], [ %214, %3083 ], [ %214, %3188 ], [ %214, %3315 ]
  %4960 = phi ptr [ %214, %4726 ], [ %214, %4746 ], [ %4933, %4916 ], [ %214, %4678 ], [ %4318, %4430 ], [ %4264, %4314 ], [ %3492, %3700 ], [ %214, %3333 ], [ %214, %3297 ], [ %214, %759 ], [ %214, %238 ], [ %4158, %4219 ], [ %214, %3083 ], [ %214, %3188 ], [ %214, %3315 ]
  %4961 = phi ptr [ %186, %4726 ], [ %186, %4746 ], [ %4934, %4916 ], [ %186, %4678 ], [ %186, %4430 ], [ %186, %4314 ], [ %186, %3700 ], [ %186, %3333 ], [ %186, %3297 ], [ %186, %759 ], [ %186, %238 ], [ %186, %4219 ], [ %186, %3083 ], [ %186, %3188 ], [ %3316, %3315 ]
  %4962 = phi ptr [ %186, %4726 ], [ %186, %4746 ], [ %4935, %4916 ], [ %186, %4678 ], [ %4431, %4430 ], [ %4315, %4314 ], [ %3702, %3700 ], [ %186, %3333 ], [ %3307, %3297 ], [ %755, %759 ], [ %186, %238 ], [ %4220, %4219 ], [ %3084, %3083 ], [ %3170, %3188 ], [ %3318, %3315 ]
  %4963 = phi ptr [ %189, %4726 ], [ %189, %4746 ], [ %4936, %4916 ], [ %189, %4678 ], [ %189, %4430 ], [ %189, %4314 ], [ %189, %3700 ], [ %189, %3333 ], [ %189, %3297 ], [ %189, %759 ], [ %189, %238 ], [ %189, %4219 ], [ %189, %3083 ], [ %189, %3188 ], [ %189, %3315 ]
  %4964 = phi ptr [ %190, %4726 ], [ %190, %4746 ], [ %4937, %4916 ], [ %190, %4678 ], [ %190, %4430 ], [ %190, %4314 ], [ %190, %3700 ], [ %190, %3333 ], [ %190, %3297 ], [ %190, %759 ], [ %190, %238 ], [ %190, %4219 ], [ %190, %3083 ], [ %190, %3188 ], [ %190, %3315 ]
  %4965 = phi ptr [ %191, %4726 ], [ %191, %4746 ], [ %4938, %4916 ], [ %191, %4678 ], [ %191, %4430 ], [ %191, %4314 ], [ %191, %3700 ], [ %191, %3333 ], [ %191, %3297 ], [ %191, %759 ], [ %191, %238 ], [ %191, %4219 ], [ %191, %3083 ], [ %191, %3188 ], [ %191, %3315 ]
  %4966 = add nsw i32 %184, 1
  store ptr %4960, ptr %204, align 8, !tbaa !294
  %4967 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 1
  %4968 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %4969 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %4968, i64 0, i64 32
  %4970 = icmp ugt ptr %4967, %4969
  br i1 %4970, label %4971, label %4983

4971:                                             ; preds = %4940
  %4972 = getelementptr inbounds %struct.regmatch_slab, ptr %4968, i64 0, i32 2
  %4973 = load ptr, ptr %4972, align 8, !tbaa !62
  %4974 = icmp eq ptr %4973, null
  br i1 %4974, label %4975, label %4981

4975:                                             ; preds = %4971
  %4976 = call ptr @Perl_safesysmalloc(i64 noundef 3976) #12
  %4977 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %4978 = getelementptr inbounds %struct.regmatch_slab, ptr %4976, i64 0, i32 1
  store ptr %4977, ptr %4978, align 8, !tbaa !64
  %4979 = getelementptr inbounds %struct.regmatch_slab, ptr %4976, i64 0, i32 2
  store ptr null, ptr %4979, align 8, !tbaa !62
  %4980 = getelementptr inbounds %struct.regmatch_slab, ptr %4977, i64 0, i32 2
  store ptr %4976, ptr %4980, align 8, !tbaa !62
  br label %4981

4981:                                             ; preds = %4971, %4975
  %4982 = phi ptr [ %4973, %4971 ], [ %4976, %4975 ]
  store ptr %4982, ptr @PL_regmatch_slab, align 8, !tbaa !13
  br label %4983

4983:                                             ; preds = %4981, %4940
  %4984 = phi ptr [ %4982, %4981 ], [ %4967, %4940 ]
  store ptr %4984, ptr @PL_regmatch_state, align 8, !tbaa !13
  br label %103

4985:                                             ; preds = %132
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.17) #12
  br label %5080

4986:                                             ; preds = %221, %221, %2845, %4551, %4689, %3194, %3060
  %4987 = phi i8 [ %169, %4689 ], [ %169, %4551 ], [ %169, %3194 ], [ %169, %3060 ], [ %2791, %2845 ], [ %169, %221 ], [ %169, %221 ]
  %4988 = phi ptr [ %179, %4689 ], [ %179, %4551 ], [ %3195, %3194 ], [ %3061, %3060 ], [ %2847, %2845 ], [ %179, %221 ], [ %179, %221 ]
  %4989 = phi ptr [ %180, %4689 ], [ null, %4551 ], [ %180, %3194 ], [ %180, %3060 ], [ %2846, %2845 ], [ %180, %221 ], [ %180, %221 ]
  %4990 = phi ptr [ %4690, %4689 ], [ %181, %4551 ], [ %181, %3194 ], [ %181, %3060 ], [ %181, %2845 ], [ %181, %221 ], [ %181, %221 ]
  %4991 = phi i32 [ %183, %4689 ], [ %183, %4551 ], [ %183, %3194 ], [ %183, %3060 ], [ %2848, %2845 ], [ %183, %221 ], [ %183, %221 ]
  %4992 = phi ptr [ %189, %4689 ], [ %189, %4551 ], [ %189, %3194 ], [ %189, %3060 ], [ %2817, %2845 ], [ %189, %221 ], [ %189, %221 ]
  %4993 = phi ptr [ %190, %4689 ], [ %190, %4551 ], [ %190, %3194 ], [ %190, %3060 ], [ %2815, %2845 ], [ %190, %221 ], [ %190, %221 ]
  %4994 = phi ptr [ %191, %4689 ], [ %191, %4551 ], [ %191, %3194 ], [ %191, %3060 ], [ %2786, %2845 ], [ %191, %221 ], [ %191, %221 ]
  %4995 = icmp eq ptr %182, null
  br i1 %4995, label %5064, label %4996

4996:                                             ; preds = %5106, %4986
  %4997 = phi ptr [ %4994, %4986 ], [ %5103, %5106 ]
  %4998 = phi ptr [ %4993, %4986 ], [ %5102, %5106 ]
  %4999 = phi ptr [ %4992, %4986 ], [ %5101, %5106 ]
  %5000 = phi ptr [ %188, %4986 ], [ %5100, %5106 ]
  %5001 = phi ptr [ %215, %4986 ], [ %5099, %5106 ]
  %5002 = phi ptr [ %186, %4986 ], [ %5098, %5106 ]
  %5003 = phi ptr [ %214, %4986 ], [ %5097, %5106 ]
  %5004 = phi i32 [ %184, %4986 ], [ %5096, %5106 ]
  %5005 = phi i32 [ %4991, %4986 ], [ %5095, %5106 ]
  %5006 = phi ptr [ %182, %4986 ], [ %5094, %5106 ]
  %5007 = phi ptr [ %4990, %4986 ], [ %5093, %5106 ]
  %5008 = phi ptr [ %4989, %4986 ], [ %5092, %5106 ]
  %5009 = phi ptr [ %4988, %4986 ], [ %5091, %5106 ]
  %5010 = phi i8 [ %177, %4986 ], [ %5090, %5106 ]
  %5011 = phi i8 [ %176, %4986 ], [ %5089, %5106 ]
  %5012 = phi ptr [ %175, %4986 ], [ %5088, %5106 ]
  %5013 = phi ptr [ %174, %4986 ], [ %5087, %5106 ]
  %5014 = phi ptr [ %173, %4986 ], [ %5086, %5106 ]
  %5015 = phi i8 [ %172, %4986 ], [ %5085, %5106 ]
  %5016 = phi i8 [ %212, %4986 ], [ %5084, %5106 ]
  %5017 = phi i32 [ %170, %4986 ], [ %5083, %5106 ]
  %5018 = phi i8 [ %4987, %4986 ], [ %5082, %5106 ]
  %5019 = phi i8 [ %168, %4986 ], [ %5081, %5106 ]
  %5020 = load ptr, ptr @PL_regmatch_slab, align 8
  %5021 = icmp ult ptr %5006, %5020
  %5022 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %5020, i64 0, i64 32
  %5023 = icmp ugt ptr %5006, %5022
  %5024 = select i1 %5021, i1 true, i1 %5023
  br i1 %5024, label %5025, label %5043

5025:                                             ; preds = %4996, %5025
  %5026 = phi ptr [ %5038, %5025 ], [ %5000, %4996 ]
  %5027 = phi i32 [ %5035, %5025 ], [ %5004, %4996 ]
  %5028 = phi ptr [ %5037, %5025 ], [ %5020, %4996 ]
  %5029 = ptrtoint ptr %5026 to i64
  %5030 = ptrtoint ptr %5028 to i64
  %5031 = sub i64 %5029, %5030
  %5032 = sdiv exact i64 %5031, 120
  %5033 = trunc i64 %5032 to i32
  %5034 = xor i32 %5033, -1
  %5035 = add i32 %5027, %5034
  %5036 = getelementptr inbounds %struct.regmatch_slab, ptr %5028, i64 0, i32 1
  %5037 = load ptr, ptr %5036, align 8, !tbaa !64
  %5038 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %5037, i64 0, i64 32
  %5039 = icmp ult ptr %5006, %5037
  %5040 = icmp ugt ptr %5006, %5038
  %5041 = select i1 %5039, i1 true, i1 %5040
  br i1 %5041, label %5025, label %5042, !llvm.loop !358

5042:                                             ; preds = %5025
  store ptr %5037, ptr @PL_regmatch_slab, align 8, !tbaa !13
  br label %5043

5043:                                             ; preds = %5042, %4996
  %5044 = phi i32 [ %5035, %5042 ], [ %5004, %4996 ]
  %5045 = phi ptr [ %5038, %5042 ], [ %5000, %4996 ]
  %5046 = ptrtoint ptr %5045 to i64
  %5047 = ptrtoint ptr %5006 to i64
  %5048 = sub i64 %5046, %5047
  %5049 = sdiv exact i64 %5048, -120
  %5050 = trunc i64 %5049 to i32
  %5051 = add i32 %5044, %5050
  %5052 = getelementptr inbounds %struct.regmatch_state, ptr %5006, i64 0, i32 2
  %5053 = load ptr, ptr %5052, align 8, !tbaa !6
  store ptr %5006, ptr @PL_regmatch_state, align 8, !tbaa !13
  %5054 = and i8 %5010, 1
  %5055 = icmp eq i8 %5054, 0
  br i1 %5055, label %5059, label %5056

5056:                                             ; preds = %5043
  %5057 = getelementptr inbounds %struct.regmatch_state, ptr %5006, i64 0, i32 1
  %5058 = load ptr, ptr %5057, align 8, !tbaa !294
  br label %5059

5059:                                             ; preds = %5056, %5043
  %5060 = phi ptr [ %5058, %5056 ], [ %5003, %5043 ]
  %5061 = load i32, ptr %5006, align 8, !tbaa !276
  %5062 = zext i8 %5054 to i32
  %5063 = add nsw i32 %5061, %5062
  br label %167

5064:                                             ; preds = %4986
  %5065 = load ptr, ptr %67, align 8, !tbaa !61
  %5066 = icmp eq ptr %5065, null
  br i1 %5066, label %5131, label %5067

5067:                                             ; preds = %5064
  %5068 = load ptr, ptr @PL_replgv, align 8, !tbaa !13
  %5069 = getelementptr inbounds %struct.gv, ptr %5068, i64 0, i32 3
  %5070 = load ptr, ptr %5069, align 8, !tbaa !6
  %5071 = load ptr, ptr %5070, align 8, !tbaa !76
  %5072 = icmp eq ptr %51, %5071
  br i1 %5072, label %5131, label %5073

5073:                                             ; preds = %5067
  call void @Perl_sv_setsv_flags(ptr noundef %51, ptr noundef %5071, i32 noundef 1538) #12
  br label %5131

5074:                                             ; preds = %783, %780, %771, %775
  br label %5080

5075:                                             ; preds = %812, %809, %800, %804
  br label %5080

5076:                                             ; preds = %221, %3735, %3471, %3474, %3485, %3565
  %5077 = phi i8 [ %3490, %3565 ], [ %212, %3485 ], [ %212, %3474 ], [ %212, %3471 ], [ %212, %3735 ], [ %212, %221 ]
  %5078 = phi ptr [ %3492, %3565 ], [ %214, %3485 ], [ %214, %3474 ], [ %214, %3471 ], [ %214, %3735 ], [ %214, %221 ]
  %5079 = phi ptr [ %3493, %3565 ], [ %215, %3485 ], [ %215, %3474 ], [ %215, %3471 ], [ %215, %3735 ], [ %215, %221 ]
  br label %5080

5080:                                             ; preds = %221, %5076, %5075, %5074, %4784, %4818, %4792, %4811, %4788, %4783, %4809, %4768, %4766, %4747, %4720, %4715, %4163, %4156, %840, %834, %829, %4816, %4798, %4618, %3927, %3731, %3697, %3140, %546, %4000, %4247, %2106, %873, %3335, %2886, %3366, %3067, %4985, %546, %4032, %223, %231, %229, %235, %253, %257, %266, %268, %270, %274, %845, %888, %898, %905, %1144, %1165, %1683, %1690, %1693, %1708, %1705, %1723, %1729, %1738, %1759, %1766, %1763, %1782, %1788, %1820, %1839, %1880, %1915, %1938, %1954, %1958, %1967, %2064, %2079, %2118, %2117, %2123, %2133, %2130, %3205, %3196, %3228, %3220, %3287, %3282, %4257, %4461, %4641, %4820, %4864, %4551, %3361, %572, %280, %248
  %5081 = phi i8 [ %168, %4864 ], [ %168, %4820 ], [ %168, %4641 ], [ %168, %4551 ], [ %168, %4461 ], [ %168, %4247 ], [ %168, %4257 ], [ %168, %4000 ], [ %168, %4032 ], [ %168, %3361 ], [ %168, %3287 ], [ %168, %3282 ], [ %168, %3228 ], [ %168, %3220 ], [ %168, %3205 ], [ %168, %3196 ], [ %168, %3067 ], [ %168, %2079 ], [ %168, %2106 ], [ %168, %2123 ], [ %168, %2130 ], [ %168, %2133 ], [ %168, %2117 ], [ %168, %2118 ], [ %168, %2064 ], [ %168, %1967 ], [ %168, %1782 ], [ %168, %1788 ], [ %168, %1820 ], [ %168, %1839 ], [ %168, %1958 ], [ %168, %1954 ], [ %168, %1938 ], [ %168, %1915 ], [ %168, %1880 ], [ %168, %1763 ], [ %168, %1766 ], [ %168, %1759 ], [ %168, %1723 ], [ %168, %1729 ], [ %168, %1738 ], [ %168, %1690 ], [ %168, %1693 ], [ %168, %1705 ], [ %168, %1708 ], [ %1684, %1683 ], [ %168, %1165 ], [ %168, %1144 ], [ %168, %873 ], [ %168, %898 ], [ %168, %905 ], [ %168, %888 ], [ %168, %845 ], [ %168, %572 ], [ %168, %546 ], [ %168, %546 ], [ %168, %280 ], [ %168, %274 ], [ %168, %270 ], [ %168, %268 ], [ %168, %266 ], [ %168, %257 ], [ %168, %253 ], [ %168, %248 ], [ %168, %235 ], [ %168, %229 ], [ %168, %231 ], [ %168, %223 ], [ %133, %4985 ], [ %168, %2886 ], [ %168, %3335 ], [ %168, %3366 ], [ %168, %3140 ], [ %168, %3697 ], [ %168, %3731 ], [ %168, %3927 ], [ %168, %4618 ], [ %168, %4798 ], [ %168, %4816 ], [ %168, %829 ], [ %168, %834 ], [ %168, %840 ], [ %168, %4156 ], [ %168, %4163 ], [ %168, %4715 ], [ %168, %4720 ], [ %168, %4747 ], [ %168, %4766 ], [ %168, %4768 ], [ %168, %4809 ], [ %168, %4783 ], [ %168, %4788 ], [ %168, %4811 ], [ %168, %4792 ], [ %168, %4818 ], [ %168, %4784 ], [ %168, %5074 ], [ %168, %5075 ], [ %168, %5076 ], [ %168, %221 ]
  %5082 = phi i8 [ %169, %4864 ], [ %169, %4820 ], [ %169, %4641 ], [ %169, %4551 ], [ %169, %4461 ], [ %169, %4247 ], [ %169, %4257 ], [ %169, %4000 ], [ %169, %4032 ], [ %169, %3361 ], [ %169, %3287 ], [ %169, %3282 ], [ %169, %3228 ], [ %169, %3220 ], [ %169, %3205 ], [ %169, %3196 ], [ %169, %3067 ], [ %169, %2079 ], [ %169, %2106 ], [ %169, %2123 ], [ %169, %2130 ], [ %169, %2133 ], [ %169, %2117 ], [ %169, %2118 ], [ %169, %2064 ], [ %169, %1967 ], [ %169, %1782 ], [ %169, %1788 ], [ %169, %1820 ], [ %169, %1839 ], [ %169, %1958 ], [ %169, %1954 ], [ %169, %1938 ], [ %169, %1915 ], [ %169, %1880 ], [ %169, %1763 ], [ %169, %1766 ], [ %169, %1759 ], [ %169, %1723 ], [ %169, %1729 ], [ %169, %1738 ], [ %169, %1690 ], [ %169, %1693 ], [ %169, %1705 ], [ %169, %1708 ], [ %169, %1683 ], [ %169, %1165 ], [ %169, %1144 ], [ %169, %873 ], [ %169, %898 ], [ %169, %905 ], [ %169, %888 ], [ %169, %845 ], [ %169, %572 ], [ %169, %546 ], [ %169, %546 ], [ %169, %280 ], [ %169, %274 ], [ %169, %270 ], [ %169, %268 ], [ %169, %266 ], [ %169, %257 ], [ %169, %253 ], [ %169, %248 ], [ %169, %235 ], [ %169, %229 ], [ %169, %231 ], [ %169, %223 ], [ %134, %4985 ], [ %2855, %2886 ], [ %169, %3335 ], [ %169, %3366 ], [ %169, %3140 ], [ %169, %3697 ], [ %169, %3731 ], [ %169, %3927 ], [ %169, %4618 ], [ %169, %4798 ], [ %169, %4816 ], [ %169, %829 ], [ %169, %834 ], [ %169, %840 ], [ %169, %4156 ], [ %169, %4163 ], [ %169, %4715 ], [ %169, %4720 ], [ %169, %4747 ], [ %169, %4766 ], [ %169, %4768 ], [ %169, %4809 ], [ %169, %4783 ], [ %169, %4788 ], [ %169, %4811 ], [ %169, %4792 ], [ %169, %4818 ], [ %169, %4784 ], [ %169, %5074 ], [ %169, %5075 ], [ %169, %5076 ], [ %169, %221 ]
  %5083 = phi i32 [ %170, %4864 ], [ %170, %4820 ], [ %170, %4641 ], [ %170, %4551 ], [ %170, %4461 ], [ %170, %4247 ], [ %170, %4257 ], [ %170, %4000 ], [ %170, %4032 ], [ %170, %3361 ], [ %170, %3287 ], [ %170, %3282 ], [ %170, %3228 ], [ %170, %3220 ], [ %170, %3205 ], [ %170, %3196 ], [ %170, %3067 ], [ %170, %2079 ], [ %170, %2106 ], [ %170, %2123 ], [ %170, %2130 ], [ %170, %2133 ], [ %170, %2117 ], [ %170, %2118 ], [ %170, %2064 ], [ %170, %1967 ], [ %170, %1782 ], [ %170, %1788 ], [ %170, %1820 ], [ %170, %1839 ], [ %170, %1958 ], [ %170, %1954 ], [ %170, %1938 ], [ %170, %1915 ], [ %170, %1880 ], [ %170, %1763 ], [ %170, %1766 ], [ %170, %1759 ], [ %170, %1723 ], [ %170, %1729 ], [ %170, %1738 ], [ %170, %1690 ], [ %170, %1693 ], [ %170, %1705 ], [ %170, %1708 ], [ %170, %1683 ], [ %170, %1165 ], [ %170, %1144 ], [ %170, %873 ], [ %170, %898 ], [ %170, %905 ], [ %170, %888 ], [ %170, %845 ], [ %170, %572 ], [ %170, %546 ], [ %170, %546 ], [ %170, %280 ], [ %170, %274 ], [ %170, %270 ], [ %170, %268 ], [ %170, %266 ], [ %170, %257 ], [ %170, %253 ], [ %170, %248 ], [ %170, %235 ], [ %170, %229 ], [ %170, %231 ], [ %170, %223 ], [ %135, %4985 ], [ %170, %2886 ], [ %170, %3335 ], [ %170, %3366 ], [ %170, %3140 ], [ %170, %3697 ], [ %170, %3731 ], [ %170, %3927 ], [ 0, %4618 ], [ %170, %4798 ], [ %170, %4816 ], [ %170, %829 ], [ %170, %834 ], [ %170, %840 ], [ %170, %4156 ], [ %170, %4163 ], [ %170, %4715 ], [ %170, %4720 ], [ %170, %4747 ], [ %170, %4766 ], [ %170, %4768 ], [ %170, %4809 ], [ %170, %4783 ], [ %170, %4788 ], [ %170, %4811 ], [ %170, %4792 ], [ %170, %4818 ], [ %170, %4784 ], [ %170, %5074 ], [ %170, %5075 ], [ %170, %5076 ], [ %170, %221 ]
  %5084 = phi i8 [ %212, %4864 ], [ %212, %4820 ], [ %212, %4641 ], [ %212, %4551 ], [ %4433, %4461 ], [ %212, %4247 ], [ %212, %4257 ], [ 0, %4000 ], [ %212, %4032 ], [ %212, %3361 ], [ %212, %3287 ], [ %212, %3282 ], [ %212, %3228 ], [ %212, %3220 ], [ %212, %3205 ], [ %212, %3196 ], [ %212, %3067 ], [ %212, %2079 ], [ %212, %2106 ], [ %212, %2123 ], [ %212, %2130 ], [ %212, %2133 ], [ %212, %2117 ], [ %212, %2118 ], [ %212, %2064 ], [ %212, %1967 ], [ %212, %1782 ], [ %212, %1788 ], [ %212, %1820 ], [ %212, %1839 ], [ %212, %1958 ], [ %212, %1954 ], [ %212, %1938 ], [ %212, %1915 ], [ %212, %1880 ], [ %212, %1763 ], [ %212, %1766 ], [ %212, %1759 ], [ %212, %1723 ], [ %212, %1729 ], [ %212, %1738 ], [ %212, %1690 ], [ %212, %1693 ], [ %212, %1705 ], [ %212, %1708 ], [ %212, %1683 ], [ %212, %1165 ], [ %212, %1144 ], [ %212, %873 ], [ %212, %898 ], [ %212, %905 ], [ %212, %888 ], [ %212, %845 ], [ %212, %572 ], [ %212, %546 ], [ %212, %546 ], [ %212, %280 ], [ %212, %274 ], [ %212, %270 ], [ %212, %268 ], [ %212, %266 ], [ %212, %257 ], [ %212, %253 ], [ %212, %248 ], [ %212, %235 ], [ %212, %229 ], [ %212, %231 ], [ %212, %223 ], [ %136, %4985 ], [ %212, %2886 ], [ %212, %3335 ], [ %212, %3366 ], [ %212, %3140 ], [ %3490, %3697 ], [ %212, %3731 ], [ %212, %3927 ], [ %212, %4618 ], [ %212, %4798 ], [ %212, %4816 ], [ %212, %829 ], [ %212, %834 ], [ %212, %840 ], [ %4076, %4156 ], [ %4076, %4163 ], [ %212, %4715 ], [ %212, %4720 ], [ %212, %4747 ], [ %212, %4766 ], [ %212, %4768 ], [ %212, %4809 ], [ %212, %4783 ], [ %212, %4788 ], [ %212, %4811 ], [ %212, %4792 ], [ %212, %4818 ], [ %212, %4784 ], [ %212, %5074 ], [ %212, %5075 ], [ %5077, %5076 ], [ %212, %221 ]
  %5085 = phi i8 [ %172, %4864 ], [ %172, %4820 ], [ %172, %4641 ], [ %172, %4551 ], [ %172, %4461 ], [ %172, %4247 ], [ %172, %4257 ], [ %172, %4000 ], [ %172, %4032 ], [ %172, %3361 ], [ %172, %3287 ], [ %172, %3282 ], [ %172, %3228 ], [ %172, %3220 ], [ %172, %3205 ], [ %172, %3196 ], [ %172, %3067 ], [ %172, %2079 ], [ %172, %2106 ], [ %172, %2123 ], [ %172, %2130 ], [ %172, %2133 ], [ %172, %2117 ], [ %172, %2118 ], [ %172, %2064 ], [ %172, %1967 ], [ %172, %1782 ], [ %172, %1788 ], [ %172, %1820 ], [ %172, %1839 ], [ %172, %1958 ], [ %172, %1954 ], [ %172, %1938 ], [ %172, %1915 ], [ %172, %1880 ], [ %172, %1763 ], [ %172, %1766 ], [ %172, %1759 ], [ %172, %1723 ], [ %172, %1729 ], [ %172, %1738 ], [ %172, %1690 ], [ %172, %1693 ], [ %172, %1705 ], [ %172, %1708 ], [ %172, %1683 ], [ %172, %1165 ], [ %172, %1144 ], [ %172, %873 ], [ %172, %898 ], [ %172, %905 ], [ %172, %888 ], [ %172, %845 ], [ %172, %572 ], [ %172, %546 ], [ %172, %546 ], [ %172, %280 ], [ %172, %274 ], [ %172, %270 ], [ %172, %268 ], [ %172, %266 ], [ %172, %257 ], [ %172, %253 ], [ %172, %248 ], [ %172, %235 ], [ %172, %229 ], [ %172, %231 ], [ %172, %223 ], [ %137, %4985 ], [ %172, %2886 ], [ %172, %3335 ], [ %172, %3366 ], [ %172, %3140 ], [ %172, %3697 ], [ %172, %3731 ], [ %172, %3927 ], [ %172, %4618 ], [ %172, %4798 ], [ %172, %4816 ], [ %172, %829 ], [ %172, %834 ], [ %172, %840 ], [ %172, %4156 ], [ %172, %4163 ], [ %172, %4715 ], [ %172, %4720 ], [ %172, %4747 ], [ %172, %4766 ], [ %172, %4768 ], [ %172, %4809 ], [ %172, %4783 ], [ %172, %4788 ], [ %172, %4811 ], [ %172, %4792 ], [ %172, %4818 ], [ %172, %4784 ], [ %172, %5074 ], [ %172, %5075 ], [ %172, %5076 ], [ %172, %221 ]
  %5086 = phi ptr [ %173, %4864 ], [ %173, %4820 ], [ %173, %4641 ], [ %173, %4551 ], [ %173, %4461 ], [ %173, %4247 ], [ %173, %4257 ], [ %173, %4000 ], [ %173, %4032 ], [ %173, %3361 ], [ %173, %3287 ], [ %173, %3282 ], [ %173, %3228 ], [ %173, %3220 ], [ %173, %3205 ], [ %173, %3196 ], [ %173, %3067 ], [ %173, %2079 ], [ %173, %2106 ], [ %173, %2123 ], [ %173, %2130 ], [ %173, %2133 ], [ %173, %2117 ], [ %173, %2118 ], [ %173, %2064 ], [ %173, %1967 ], [ %173, %1782 ], [ %173, %1788 ], [ %173, %1820 ], [ %173, %1839 ], [ %173, %1958 ], [ %173, %1954 ], [ %173, %1938 ], [ %173, %1915 ], [ %173, %1880 ], [ %173, %1763 ], [ %173, %1766 ], [ %173, %1759 ], [ %173, %1723 ], [ %173, %1729 ], [ %173, %1738 ], [ %173, %1690 ], [ %173, %1693 ], [ %173, %1705 ], [ %173, %1708 ], [ %173, %1683 ], [ %173, %1165 ], [ %173, %1144 ], [ %173, %873 ], [ %173, %898 ], [ %173, %905 ], [ %173, %888 ], [ %173, %845 ], [ %173, %572 ], [ %173, %546 ], [ %173, %546 ], [ %173, %280 ], [ %173, %274 ], [ %173, %270 ], [ %173, %268 ], [ %173, %266 ], [ %173, %257 ], [ %173, %253 ], [ %173, %248 ], [ %173, %235 ], [ %173, %229 ], [ %173, %231 ], [ %173, %223 ], [ %138, %4985 ], [ %173, %2886 ], [ %173, %3335 ], [ %173, %3366 ], [ %173, %3140 ], [ %173, %3697 ], [ %173, %3731 ], [ %173, %3927 ], [ %173, %4618 ], [ %173, %4798 ], [ %173, %4816 ], [ %173, %829 ], [ %173, %834 ], [ %173, %840 ], [ %173, %4156 ], [ %173, %4163 ], [ null, %4715 ], [ %4722, %4720 ], [ %173, %4747 ], [ %173, %4766 ], [ %173, %4768 ], [ %173, %4809 ], [ %173, %4783 ], [ %173, %4788 ], [ %173, %4811 ], [ %173, %4792 ], [ %173, %4818 ], [ %173, %4784 ], [ %173, %5074 ], [ %173, %5075 ], [ %173, %5076 ], [ %173, %221 ]
  %5087 = phi ptr [ %174, %4864 ], [ %174, %4820 ], [ %174, %4641 ], [ %174, %4551 ], [ %174, %4461 ], [ %174, %4247 ], [ %174, %4257 ], [ %174, %4000 ], [ %174, %4032 ], [ %174, %3361 ], [ %174, %3287 ], [ %174, %3282 ], [ %174, %3228 ], [ %174, %3220 ], [ %174, %3205 ], [ %174, %3196 ], [ %174, %3067 ], [ %174, %2079 ], [ %174, %2106 ], [ %174, %2123 ], [ %174, %2130 ], [ %174, %2133 ], [ %174, %2117 ], [ %174, %2118 ], [ %174, %2064 ], [ %174, %1967 ], [ %174, %1782 ], [ %174, %1788 ], [ %174, %1820 ], [ %174, %1839 ], [ %174, %1958 ], [ %174, %1954 ], [ %174, %1938 ], [ %174, %1915 ], [ %174, %1880 ], [ %174, %1763 ], [ %174, %1766 ], [ %174, %1759 ], [ %174, %1723 ], [ %174, %1729 ], [ %174, %1738 ], [ %174, %1690 ], [ %174, %1693 ], [ %174, %1705 ], [ %174, %1708 ], [ %174, %1683 ], [ %174, %1165 ], [ %174, %1144 ], [ %174, %873 ], [ %174, %898 ], [ %174, %905 ], [ %174, %888 ], [ %174, %845 ], [ %174, %572 ], [ %174, %546 ], [ %174, %546 ], [ %174, %280 ], [ %174, %274 ], [ %174, %270 ], [ %174, %268 ], [ %174, %266 ], [ %174, %257 ], [ %174, %253 ], [ %174, %248 ], [ %174, %235 ], [ %174, %229 ], [ %174, %231 ], [ %174, %223 ], [ %139, %4985 ], [ %174, %2886 ], [ %3338, %3335 ], [ %174, %3366 ], [ %174, %3140 ], [ %174, %3697 ], [ %174, %3731 ], [ %174, %3927 ], [ %174, %4618 ], [ %174, %4798 ], [ %174, %4816 ], [ %174, %829 ], [ %174, %834 ], [ %174, %840 ], [ %174, %4156 ], [ %174, %4163 ], [ %4716, %4715 ], [ %4716, %4720 ], [ %174, %4747 ], [ %174, %4766 ], [ %4770, %4768 ], [ %174, %4809 ], [ %174, %4783 ], [ %174, %4788 ], [ %174, %4811 ], [ %174, %4792 ], [ %174, %4818 ], [ %174, %4784 ], [ %174, %5074 ], [ %174, %5075 ], [ %174, %5076 ], [ %174, %221 ]
  %5088 = phi ptr [ %175, %4864 ], [ %175, %4820 ], [ %175, %4641 ], [ %175, %4551 ], [ %175, %4461 ], [ %175, %4247 ], [ %175, %4257 ], [ %175, %4000 ], [ %175, %4032 ], [ %175, %3361 ], [ %175, %3287 ], [ %175, %3282 ], [ %175, %3228 ], [ %175, %3220 ], [ %175, %3205 ], [ %175, %3196 ], [ %175, %3067 ], [ %175, %2079 ], [ %175, %2106 ], [ %175, %2123 ], [ %175, %2130 ], [ %175, %2133 ], [ %175, %2117 ], [ %175, %2118 ], [ %175, %2064 ], [ %175, %1967 ], [ %175, %1782 ], [ %175, %1788 ], [ %175, %1820 ], [ %175, %1839 ], [ %175, %1958 ], [ %175, %1954 ], [ %175, %1938 ], [ %175, %1915 ], [ %175, %1880 ], [ %175, %1763 ], [ %175, %1766 ], [ %175, %1759 ], [ %175, %1723 ], [ %175, %1729 ], [ %175, %1738 ], [ %175, %1690 ], [ %175, %1693 ], [ %175, %1705 ], [ %175, %1708 ], [ %175, %1683 ], [ %175, %1165 ], [ %175, %1144 ], [ %175, %873 ], [ %175, %898 ], [ %175, %905 ], [ %175, %888 ], [ %175, %845 ], [ %175, %572 ], [ %175, %546 ], [ %175, %546 ], [ %175, %280 ], [ %175, %274 ], [ %175, %270 ], [ %175, %268 ], [ %175, %266 ], [ %175, %257 ], [ %175, %253 ], [ %175, %248 ], [ %175, %235 ], [ %175, %229 ], [ %175, %231 ], [ %175, %223 ], [ %140, %4985 ], [ %175, %2886 ], [ %175, %3335 ], [ %175, %3366 ], [ %175, %3140 ], [ %175, %3697 ], [ %175, %3731 ], [ %175, %3927 ], [ %175, %4618 ], [ %175, %4798 ], [ %175, %4816 ], [ %175, %829 ], [ %175, %834 ], [ %175, %840 ], [ %175, %4156 ], [ %175, %4163 ], [ %4717, %4715 ], [ %4717, %4720 ], [ %4748, %4747 ], [ %175, %4766 ], [ %175, %4768 ], [ %175, %4809 ], [ %175, %4783 ], [ %175, %4788 ], [ %175, %4811 ], [ %175, %4792 ], [ %175, %4818 ], [ %175, %4784 ], [ %175, %5074 ], [ %175, %5075 ], [ %175, %5076 ], [ %175, %221 ]
  %5089 = phi i8 [ %176, %4864 ], [ %176, %4820 ], [ %176, %4641 ], [ %176, %4551 ], [ %176, %4461 ], [ %176, %4247 ], [ %176, %4257 ], [ %176, %4000 ], [ %176, %4032 ], [ %3342, %3361 ], [ %176, %3287 ], [ %176, %3282 ], [ %176, %3228 ], [ %176, %3220 ], [ %176, %3205 ], [ %176, %3196 ], [ %176, %3067 ], [ %176, %2079 ], [ %176, %2106 ], [ %176, %2123 ], [ %176, %2130 ], [ %176, %2133 ], [ %176, %2117 ], [ %176, %2118 ], [ %176, %2064 ], [ %176, %1967 ], [ %176, %1782 ], [ %176, %1788 ], [ %176, %1820 ], [ %176, %1839 ], [ %176, %1958 ], [ %176, %1954 ], [ %176, %1938 ], [ %176, %1915 ], [ %176, %1880 ], [ %176, %1763 ], [ %176, %1766 ], [ %176, %1759 ], [ %176, %1723 ], [ %176, %1729 ], [ %176, %1738 ], [ %176, %1690 ], [ %176, %1693 ], [ %176, %1705 ], [ %176, %1708 ], [ %176, %1683 ], [ %176, %1165 ], [ %176, %1144 ], [ %176, %873 ], [ %176, %898 ], [ %176, %905 ], [ %176, %888 ], [ %176, %845 ], [ %176, %572 ], [ %176, %546 ], [ %176, %546 ], [ %176, %280 ], [ %176, %274 ], [ %176, %270 ], [ %176, %268 ], [ %176, %266 ], [ %176, %257 ], [ %176, %253 ], [ %176, %248 ], [ %176, %235 ], [ %176, %229 ], [ %176, %231 ], [ %176, %223 ], [ %141, %4985 ], [ %176, %2886 ], [ 1, %3335 ], [ %3342, %3366 ], [ %176, %3140 ], [ %176, %3697 ], [ %176, %3731 ], [ %176, %3927 ], [ %176, %4618 ], [ %176, %4798 ], [ %176, %4816 ], [ %176, %829 ], [ %176, %834 ], [ %176, %840 ], [ %176, %4156 ], [ %176, %4163 ], [ %176, %4715 ], [ %176, %4720 ], [ %176, %4747 ], [ %176, %4766 ], [ %176, %4768 ], [ %176, %4809 ], [ %176, %4783 ], [ %176, %4788 ], [ %176, %4811 ], [ %176, %4792 ], [ %176, %4818 ], [ %176, %4784 ], [ %176, %5074 ], [ %176, %5075 ], [ %176, %5076 ], [ %176, %221 ]
  %5090 = phi i8 [ %177, %4864 ], [ %177, %4820 ], [ %177, %4641 ], [ %177, %4551 ], [ %177, %4461 ], [ %177, %4247 ], [ %177, %4257 ], [ %177, %4000 ], [ %177, %4032 ], [ %3343, %3361 ], [ %177, %3287 ], [ %177, %3282 ], [ %177, %3228 ], [ %177, %3220 ], [ %177, %3205 ], [ %177, %3196 ], [ %177, %3067 ], [ %177, %2079 ], [ %177, %2106 ], [ %177, %2123 ], [ %177, %2130 ], [ %177, %2133 ], [ %177, %2117 ], [ %177, %2118 ], [ %177, %2064 ], [ %177, %1967 ], [ %177, %1782 ], [ %177, %1788 ], [ %177, %1820 ], [ %177, %1839 ], [ %177, %1958 ], [ %177, %1954 ], [ %177, %1938 ], [ %177, %1915 ], [ %177, %1880 ], [ %177, %1763 ], [ %177, %1766 ], [ %177, %1759 ], [ %177, %1723 ], [ %177, %1729 ], [ %177, %1738 ], [ %177, %1690 ], [ %177, %1693 ], [ %177, %1705 ], [ %177, %1708 ], [ %177, %1683 ], [ %177, %1165 ], [ %177, %1144 ], [ %177, %873 ], [ %177, %898 ], [ %177, %905 ], [ %177, %888 ], [ %177, %845 ], [ %177, %572 ], [ %177, %546 ], [ %177, %546 ], [ %177, %280 ], [ %177, %274 ], [ %177, %270 ], [ %177, %268 ], [ %177, %266 ], [ %177, %257 ], [ %177, %253 ], [ %177, %248 ], [ %177, %235 ], [ %177, %229 ], [ %177, %231 ], [ %177, %223 ], [ %142, %4985 ], [ %177, %2886 ], [ 1, %3335 ], [ %3343, %3366 ], [ %177, %3140 ], [ %177, %3697 ], [ %177, %3731 ], [ %177, %3927 ], [ %177, %4618 ], [ %177, %4798 ], [ %177, %4816 ], [ %177, %829 ], [ %177, %834 ], [ %177, %840 ], [ %177, %4156 ], [ %177, %4163 ], [ %177, %4715 ], [ %177, %4720 ], [ 1, %4747 ], [ 1, %4766 ], [ 1, %4768 ], [ %177, %4809 ], [ %177, %4783 ], [ %177, %4788 ], [ %177, %4811 ], [ %177, %4792 ], [ %177, %4818 ], [ %177, %4784 ], [ %177, %5074 ], [ %177, %5075 ], [ %177, %5076 ], [ 1, %221 ]
  %5091 = phi ptr [ %179, %4864 ], [ %179, %4820 ], [ %179, %4641 ], [ %179, %4551 ], [ %179, %4461 ], [ %179, %4247 ], [ %179, %4257 ], [ %179, %4000 ], [ %179, %4032 ], [ %179, %3361 ], [ %3260, %3287 ], [ %3260, %3282 ], [ %179, %3228 ], [ %179, %3220 ], [ %3197, %3205 ], [ %3197, %3196 ], [ %3068, %3067 ], [ %179, %2079 ], [ %179, %2106 ], [ %179, %2123 ], [ %179, %2130 ], [ %179, %2133 ], [ %179, %2117 ], [ %179, %2118 ], [ %179, %2064 ], [ %179, %1967 ], [ %179, %1782 ], [ %179, %1788 ], [ %179, %1820 ], [ %179, %1839 ], [ %179, %1958 ], [ %179, %1954 ], [ %179, %1938 ], [ %179, %1915 ], [ %179, %1880 ], [ %179, %1763 ], [ %179, %1766 ], [ %179, %1759 ], [ %179, %1723 ], [ %179, %1729 ], [ %179, %1738 ], [ %179, %1690 ], [ %179, %1693 ], [ %179, %1705 ], [ %179, %1708 ], [ %179, %1683 ], [ %179, %1165 ], [ %179, %1144 ], [ %179, %873 ], [ %179, %898 ], [ %179, %905 ], [ %179, %888 ], [ %179, %845 ], [ %179, %572 ], [ %179, %546 ], [ %179, %546 ], [ %179, %280 ], [ %179, %274 ], [ %179, %270 ], [ %179, %268 ], [ %179, %266 ], [ %179, %257 ], [ %179, %253 ], [ %179, %248 ], [ %179, %235 ], [ %179, %229 ], [ %179, %231 ], [ %179, %223 ], [ %143, %4985 ], [ %2888, %2886 ], [ %179, %3335 ], [ %179, %3366 ], [ %179, %3140 ], [ %179, %3697 ], [ %179, %3731 ], [ %179, %3927 ], [ %179, %4618 ], [ %179, %4798 ], [ %179, %4816 ], [ %179, %829 ], [ %179, %834 ], [ %179, %840 ], [ %179, %4156 ], [ %179, %4163 ], [ %179, %4715 ], [ %179, %4720 ], [ %179, %4747 ], [ %179, %4766 ], [ %179, %4768 ], [ %179, %4809 ], [ %179, %4783 ], [ %179, %4788 ], [ %179, %4811 ], [ %179, %4792 ], [ %179, %4818 ], [ %179, %4784 ], [ %179, %5074 ], [ %179, %5075 ], [ %179, %5076 ], [ %179, %221 ]
  %5092 = phi ptr [ %180, %4864 ], [ %180, %4820 ], [ %180, %4641 ], [ null, %4551 ], [ %180, %4461 ], [ %180, %4247 ], [ %180, %4257 ], [ %180, %4000 ], [ %180, %4032 ], [ %180, %3361 ], [ %180, %3287 ], [ %180, %3282 ], [ %180, %3228 ], [ %180, %3220 ], [ %180, %3205 ], [ %180, %3196 ], [ %180, %3067 ], [ %180, %2079 ], [ %180, %2106 ], [ %180, %2123 ], [ %180, %2130 ], [ %180, %2133 ], [ %180, %2117 ], [ %180, %2118 ], [ %180, %2064 ], [ %180, %1967 ], [ %180, %1782 ], [ %180, %1788 ], [ %180, %1820 ], [ %180, %1839 ], [ %180, %1958 ], [ %180, %1954 ], [ %180, %1938 ], [ %180, %1915 ], [ %180, %1880 ], [ %180, %1763 ], [ %180, %1766 ], [ %180, %1759 ], [ %180, %1723 ], [ %180, %1729 ], [ %180, %1738 ], [ %180, %1690 ], [ %180, %1693 ], [ %180, %1705 ], [ %180, %1708 ], [ %180, %1683 ], [ %180, %1165 ], [ %180, %1144 ], [ %180, %873 ], [ %180, %898 ], [ %180, %905 ], [ %180, %888 ], [ %180, %845 ], [ %180, %572 ], [ %180, %546 ], [ %180, %546 ], [ %180, %280 ], [ %180, %274 ], [ %180, %270 ], [ %180, %268 ], [ %180, %266 ], [ %180, %257 ], [ %180, %253 ], [ %180, %248 ], [ %180, %235 ], [ %180, %229 ], [ %180, %231 ], [ %180, %223 ], [ %144, %4985 ], [ %2887, %2886 ], [ %180, %3335 ], [ %180, %3366 ], [ %180, %3140 ], [ %180, %3697 ], [ %180, %3731 ], [ %180, %3927 ], [ %180, %4618 ], [ %180, %4798 ], [ %180, %4816 ], [ %180, %829 ], [ %180, %834 ], [ %180, %840 ], [ %180, %4156 ], [ %180, %4163 ], [ %180, %4715 ], [ %180, %4720 ], [ %180, %4747 ], [ %180, %4766 ], [ %180, %4768 ], [ %180, %4809 ], [ %180, %4783 ], [ %180, %4788 ], [ %180, %4811 ], [ %180, %4792 ], [ %180, %4818 ], [ %180, %4784 ], [ %180, %5074 ], [ %180, %5075 ], [ %180, %5076 ], [ %180, %221 ]
  %5093 = phi ptr [ %181, %4864 ], [ %181, %4820 ], [ %181, %4641 ], [ %181, %4551 ], [ %181, %4461 ], [ %181, %4247 ], [ %181, %4257 ], [ %181, %4000 ], [ %181, %4032 ], [ %181, %3361 ], [ %181, %3287 ], [ %181, %3282 ], [ %181, %3228 ], [ %181, %3220 ], [ %181, %3205 ], [ %181, %3196 ], [ %181, %3067 ], [ %181, %2079 ], [ %181, %2106 ], [ %181, %2123 ], [ %181, %2130 ], [ %181, %2133 ], [ %181, %2117 ], [ %181, %2118 ], [ %181, %2064 ], [ %181, %1967 ], [ %181, %1782 ], [ %181, %1788 ], [ %181, %1820 ], [ %181, %1839 ], [ %181, %1958 ], [ %181, %1954 ], [ %181, %1938 ], [ %181, %1915 ], [ %181, %1880 ], [ %181, %1763 ], [ %181, %1766 ], [ %181, %1759 ], [ %181, %1723 ], [ %181, %1729 ], [ %181, %1738 ], [ %181, %1690 ], [ %181, %1693 ], [ %181, %1705 ], [ %181, %1708 ], [ %181, %1683 ], [ %181, %1165 ], [ %181, %1144 ], [ %181, %873 ], [ %181, %898 ], [ %181, %905 ], [ %181, %888 ], [ %181, %845 ], [ %181, %572 ], [ %181, %546 ], [ %181, %546 ], [ %181, %280 ], [ %181, %274 ], [ %181, %270 ], [ %181, %268 ], [ %181, %266 ], [ %181, %257 ], [ %181, %253 ], [ %181, %248 ], [ %181, %235 ], [ %181, %229 ], [ %181, %231 ], [ %181, %223 ], [ %145, %4985 ], [ %181, %2886 ], [ %181, %3335 ], [ %181, %3366 ], [ %181, %3140 ], [ %181, %3697 ], [ %181, %3731 ], [ %181, %3927 ], [ %181, %4618 ], [ %181, %4798 ], [ %181, %4816 ], [ %181, %829 ], [ %181, %834 ], [ %181, %840 ], [ %181, %4156 ], [ %181, %4163 ], [ %4718, %4715 ], [ %4718, %4720 ], [ %181, %4747 ], [ %181, %4766 ], [ %181, %4768 ], [ %181, %4809 ], [ %181, %4783 ], [ %181, %4788 ], [ %181, %4811 ], [ %181, %4792 ], [ %181, %4818 ], [ %181, %4784 ], [ %181, %5074 ], [ %181, %5075 ], [ %181, %5076 ], [ %181, %221 ]
  %5094 = phi ptr [ %182, %4864 ], [ %182, %4820 ], [ %182, %4641 ], [ %182, %4551 ], [ %182, %4461 ], [ %182, %4247 ], [ %182, %4257 ], [ %182, %4000 ], [ %182, %4032 ], [ %182, %3361 ], [ %182, %3287 ], [ %182, %3282 ], [ %182, %3228 ], [ %182, %3220 ], [ %182, %3205 ], [ %182, %3196 ], [ %182, %3067 ], [ %182, %2079 ], [ %182, %2106 ], [ %182, %2123 ], [ %182, %2130 ], [ %182, %2133 ], [ %182, %2117 ], [ %182, %2118 ], [ %182, %2064 ], [ %182, %1967 ], [ %182, %1782 ], [ %182, %1788 ], [ %182, %1820 ], [ %182, %1839 ], [ %182, %1958 ], [ %182, %1954 ], [ %182, %1938 ], [ %182, %1915 ], [ %182, %1880 ], [ %182, %1763 ], [ %182, %1766 ], [ %182, %1759 ], [ %182, %1723 ], [ %182, %1729 ], [ %182, %1738 ], [ %182, %1690 ], [ %182, %1693 ], [ %182, %1705 ], [ %182, %1708 ], [ %182, %1683 ], [ %182, %1165 ], [ %182, %1144 ], [ %182, %873 ], [ %182, %898 ], [ %182, %905 ], [ %182, %888 ], [ %182, %845 ], [ %182, %572 ], [ %182, %546 ], [ %182, %546 ], [ %182, %280 ], [ %182, %274 ], [ %182, %270 ], [ %182, %268 ], [ %182, %266 ], [ %182, %257 ], [ %182, %253 ], [ %182, %248 ], [ %182, %235 ], [ %182, %229 ], [ %182, %231 ], [ %182, %223 ], [ %146, %4985 ], [ %182, %2886 ], [ %182, %3335 ], [ %182, %3366 ], [ %182, %3140 ], [ %182, %3697 ], [ %182, %3731 ], [ %182, %3927 ], [ %182, %4618 ], [ %182, %4798 ], [ %182, %4816 ], [ %182, %829 ], [ %182, %834 ], [ %182, %840 ], [ %182, %4156 ], [ %182, %4163 ], [ %182, %4715 ], [ %182, %4720 ], [ %182, %4747 ], [ %182, %4766 ], [ %182, %4768 ], [ %182, %4809 ], [ %182, %4783 ], [ %182, %4788 ], [ %182, %4811 ], [ %182, %4792 ], [ %182, %4818 ], [ %182, %4784 ], [ %182, %5074 ], [ %182, %5075 ], [ %182, %5076 ], [ %182, %221 ]
  %5095 = phi i32 [ %183, %4864 ], [ %183, %4820 ], [ %183, %4641 ], [ %183, %4551 ], [ %183, %4461 ], [ %183, %4247 ], [ %183, %4257 ], [ %183, %4000 ], [ %183, %4032 ], [ %183, %3361 ], [ %183, %3287 ], [ %183, %3282 ], [ %183, %3228 ], [ %183, %3220 ], [ %183, %3205 ], [ %183, %3196 ], [ %183, %3067 ], [ %183, %2079 ], [ %183, %2106 ], [ %183, %2123 ], [ %183, %2130 ], [ %183, %2133 ], [ %183, %2117 ], [ %183, %2118 ], [ %183, %2064 ], [ %183, %1967 ], [ %183, %1782 ], [ %183, %1788 ], [ %183, %1820 ], [ %183, %1839 ], [ %183, %1958 ], [ %183, %1954 ], [ %183, %1938 ], [ %183, %1915 ], [ %183, %1880 ], [ %183, %1763 ], [ %183, %1766 ], [ %183, %1759 ], [ %183, %1723 ], [ %183, %1729 ], [ %183, %1738 ], [ %183, %1690 ], [ %183, %1693 ], [ %183, %1705 ], [ %183, %1708 ], [ %183, %1683 ], [ %183, %1165 ], [ %183, %1144 ], [ %183, %873 ], [ %183, %898 ], [ %183, %905 ], [ %183, %888 ], [ %183, %845 ], [ %183, %572 ], [ %183, %546 ], [ %183, %546 ], [ %183, %280 ], [ %183, %274 ], [ %183, %270 ], [ %183, %268 ], [ %183, %266 ], [ %183, %257 ], [ %183, %253 ], [ %183, %248 ], [ %183, %235 ], [ %183, %229 ], [ %183, %231 ], [ %183, %223 ], [ %147, %4985 ], [ %2889, %2886 ], [ %183, %3335 ], [ %183, %3366 ], [ %183, %3140 ], [ %183, %3697 ], [ %183, %3731 ], [ %183, %3927 ], [ %183, %4618 ], [ %183, %4798 ], [ %183, %4816 ], [ %183, %829 ], [ %183, %834 ], [ %183, %840 ], [ %183, %4156 ], [ %183, %4163 ], [ %183, %4715 ], [ %183, %4720 ], [ %183, %4747 ], [ %183, %4766 ], [ %183, %4768 ], [ %183, %4809 ], [ %183, %4783 ], [ %183, %4788 ], [ %183, %4811 ], [ %183, %4792 ], [ %183, %4818 ], [ %183, %4784 ], [ %183, %5074 ], [ %183, %5075 ], [ %183, %5076 ], [ %183, %221 ]
  %5096 = phi i32 [ %184, %4864 ], [ %184, %4820 ], [ %184, %4641 ], [ %184, %4551 ], [ %184, %4461 ], [ %184, %4247 ], [ %184, %4257 ], [ %184, %4000 ], [ %184, %4032 ], [ %184, %3361 ], [ %184, %3287 ], [ %184, %3282 ], [ %184, %3228 ], [ %184, %3220 ], [ %184, %3205 ], [ %184, %3196 ], [ %184, %3067 ], [ %184, %2079 ], [ %184, %2106 ], [ %184, %2123 ], [ %184, %2130 ], [ %184, %2133 ], [ %184, %2117 ], [ %184, %2118 ], [ %184, %2064 ], [ %184, %1967 ], [ %184, %1782 ], [ %184, %1788 ], [ %184, %1820 ], [ %184, %1839 ], [ %184, %1958 ], [ %184, %1954 ], [ %184, %1938 ], [ %184, %1915 ], [ %184, %1880 ], [ %184, %1763 ], [ %184, %1766 ], [ %184, %1759 ], [ %184, %1723 ], [ %184, %1729 ], [ %184, %1738 ], [ %184, %1690 ], [ %184, %1693 ], [ %184, %1705 ], [ %184, %1708 ], [ %184, %1683 ], [ %184, %1165 ], [ %184, %1144 ], [ %184, %873 ], [ %184, %898 ], [ %184, %905 ], [ %184, %888 ], [ %184, %845 ], [ %184, %572 ], [ %184, %546 ], [ %184, %546 ], [ %184, %280 ], [ %184, %274 ], [ %184, %270 ], [ %184, %268 ], [ %184, %266 ], [ %184, %257 ], [ %184, %253 ], [ %184, %248 ], [ %184, %235 ], [ %184, %229 ], [ %184, %231 ], [ %184, %223 ], [ %148, %4985 ], [ %184, %2886 ], [ %184, %3335 ], [ %184, %3366 ], [ %184, %3140 ], [ %184, %3697 ], [ %184, %3731 ], [ %184, %3927 ], [ %184, %4618 ], [ %184, %4798 ], [ %184, %4816 ], [ %184, %829 ], [ %184, %834 ], [ %184, %840 ], [ %184, %4156 ], [ %184, %4163 ], [ %184, %4715 ], [ %184, %4720 ], [ %184, %4747 ], [ %184, %4766 ], [ %184, %4768 ], [ %184, %4809 ], [ %184, %4783 ], [ %184, %4788 ], [ %184, %4811 ], [ %184, %4792 ], [ %184, %4818 ], [ %184, %4784 ], [ %184, %5074 ], [ %184, %5075 ], [ %184, %5076 ], [ %184, %221 ]
  %5097 = phi ptr [ %4869, %4864 ], [ %214, %4820 ], [ %214, %4641 ], [ %214, %4551 ], [ %4434, %4461 ], [ %214, %4247 ], [ %4251, %4257 ], [ %214, %4000 ], [ %4034, %4032 ], [ %214, %3361 ], [ %214, %3287 ], [ %214, %3282 ], [ %214, %3228 ], [ %214, %3220 ], [ %214, %3205 ], [ %214, %3196 ], [ %214, %3067 ], [ %214, %2079 ], [ %214, %2106 ], [ %214, %2123 ], [ %214, %2130 ], [ %214, %2133 ], [ %214, %2117 ], [ %214, %2118 ], [ %214, %2064 ], [ %214, %1967 ], [ %214, %1782 ], [ %214, %1788 ], [ %214, %1820 ], [ %214, %1839 ], [ %214, %1958 ], [ %214, %1954 ], [ %214, %1938 ], [ %214, %1915 ], [ %214, %1880 ], [ %214, %1763 ], [ %214, %1766 ], [ %214, %1759 ], [ %214, %1723 ], [ %214, %1729 ], [ %214, %1738 ], [ %214, %1690 ], [ %214, %1693 ], [ %214, %1705 ], [ %214, %1708 ], [ %214, %1683 ], [ %214, %1165 ], [ %214, %1144 ], [ %214, %873 ], [ %214, %898 ], [ %214, %905 ], [ %214, %888 ], [ %214, %845 ], [ %214, %572 ], [ %214, %546 ], [ %214, %546 ], [ %214, %280 ], [ %214, %274 ], [ %214, %270 ], [ %214, %268 ], [ %214, %266 ], [ %214, %257 ], [ %214, %253 ], [ %214, %248 ], [ %214, %235 ], [ %214, %229 ], [ %214, %231 ], [ %214, %223 ], [ %149, %4985 ], [ %214, %2886 ], [ %214, %3335 ], [ %214, %3366 ], [ %214, %3140 ], [ %3492, %3697 ], [ %214, %3731 ], [ %214, %3927 ], [ %214, %4618 ], [ %214, %4798 ], [ %214, %4816 ], [ %214, %829 ], [ %214, %834 ], [ %214, %840 ], [ %4158, %4156 ], [ %4158, %4163 ], [ %214, %4715 ], [ %214, %4720 ], [ %214, %4747 ], [ %214, %4766 ], [ %214, %4768 ], [ %214, %4809 ], [ %214, %4783 ], [ %214, %4788 ], [ %214, %4811 ], [ %214, %4792 ], [ %214, %4818 ], [ %214, %4784 ], [ %214, %5074 ], [ %214, %5075 ], [ %5078, %5076 ], [ %214, %221 ]
  %5098 = phi ptr [ %186, %4864 ], [ %186, %4820 ], [ %186, %4641 ], [ %186, %4551 ], [ %186, %4461 ], [ %186, %4247 ], [ %186, %4257 ], [ %186, %4000 ], [ %186, %4032 ], [ %186, %3361 ], [ %186, %3287 ], [ %186, %3282 ], [ %186, %3228 ], [ %186, %3220 ], [ %186, %3205 ], [ %186, %3196 ], [ %186, %3067 ], [ %186, %2079 ], [ %186, %2106 ], [ %186, %2123 ], [ %186, %2130 ], [ %186, %2133 ], [ %186, %2117 ], [ %186, %2118 ], [ %186, %2064 ], [ %186, %1967 ], [ %186, %1782 ], [ %186, %1788 ], [ %186, %1820 ], [ %186, %1839 ], [ %186, %1958 ], [ %186, %1954 ], [ %186, %1938 ], [ %186, %1915 ], [ %186, %1880 ], [ %186, %1763 ], [ %186, %1766 ], [ %186, %1759 ], [ %186, %1723 ], [ %186, %1729 ], [ %186, %1738 ], [ %186, %1690 ], [ %186, %1693 ], [ %186, %1705 ], [ %186, %1708 ], [ %186, %1683 ], [ %186, %1165 ], [ %186, %1144 ], [ %186, %873 ], [ %186, %898 ], [ %186, %905 ], [ %186, %888 ], [ %186, %845 ], [ %186, %572 ], [ %186, %546 ], [ %186, %546 ], [ %186, %280 ], [ %186, %274 ], [ %186, %270 ], [ %186, %268 ], [ %186, %266 ], [ %186, %257 ], [ %186, %253 ], [ %186, %248 ], [ %186, %235 ], [ %186, %229 ], [ %186, %231 ], [ %186, %223 ], [ %150, %4985 ], [ %186, %2886 ], [ %186, %3335 ], [ %186, %3366 ], [ %186, %3140 ], [ %186, %3697 ], [ %186, %3731 ], [ %186, %3927 ], [ %186, %4618 ], [ %186, %4798 ], [ %186, %4816 ], [ %186, %829 ], [ %186, %834 ], [ %186, %840 ], [ %186, %4156 ], [ %186, %4163 ], [ %186, %4715 ], [ %186, %4720 ], [ %186, %4747 ], [ %186, %4766 ], [ %186, %4768 ], [ %186, %4809 ], [ %186, %4783 ], [ %186, %4788 ], [ %186, %4811 ], [ %186, %4792 ], [ %186, %4818 ], [ %186, %4784 ], [ %186, %5074 ], [ %186, %5075 ], [ %186, %5076 ], [ %186, %221 ]
  %5099 = phi ptr [ %215, %4864 ], [ %215, %4820 ], [ %215, %4641 ], [ %215, %4551 ], [ %4435, %4461 ], [ %215, %4247 ], [ %215, %4257 ], [ %3859, %4000 ], [ %3859, %4032 ], [ null, %3361 ], [ %215, %3287 ], [ %215, %3282 ], [ %215, %3228 ], [ %215, %3220 ], [ %215, %3205 ], [ %215, %3196 ], [ %215, %3067 ], [ %215, %2079 ], [ %215, %2106 ], [ %215, %2123 ], [ %215, %2130 ], [ %215, %2133 ], [ %215, %2117 ], [ %215, %2118 ], [ %215, %2064 ], [ %215, %1967 ], [ %215, %1782 ], [ %215, %1788 ], [ %215, %1820 ], [ %215, %1839 ], [ %215, %1958 ], [ %215, %1954 ], [ %215, %1938 ], [ %215, %1915 ], [ %215, %1880 ], [ %215, %1763 ], [ %215, %1766 ], [ %215, %1759 ], [ %215, %1723 ], [ %215, %1729 ], [ %215, %1738 ], [ %215, %1690 ], [ %215, %1693 ], [ %215, %1705 ], [ %215, %1708 ], [ %215, %1683 ], [ %215, %1165 ], [ %215, %1144 ], [ %215, %873 ], [ %215, %898 ], [ %215, %905 ], [ %215, %888 ], [ %215, %845 ], [ %215, %572 ], [ %215, %546 ], [ %215, %546 ], [ %215, %280 ], [ %215, %274 ], [ %215, %270 ], [ %215, %268 ], [ %215, %266 ], [ %215, %257 ], [ %215, %253 ], [ %215, %248 ], [ %215, %235 ], [ %215, %229 ], [ %215, %231 ], [ %215, %223 ], [ null, %4985 ], [ %215, %2886 ], [ %215, %3335 ], [ %3364, %3366 ], [ %215, %3140 ], [ %3493, %3697 ], [ %215, %3731 ], [ %3859, %3927 ], [ %215, %4618 ], [ %215, %4798 ], [ %215, %4816 ], [ %215, %829 ], [ %215, %834 ], [ %215, %840 ], [ %4078, %4156 ], [ %4078, %4163 ], [ %215, %4715 ], [ %215, %4720 ], [ %215, %4747 ], [ %215, %4766 ], [ %215, %4768 ], [ %215, %4809 ], [ %215, %4783 ], [ %215, %4788 ], [ %215, %4811 ], [ %215, %4792 ], [ %215, %4818 ], [ %215, %4784 ], [ %215, %5074 ], [ %215, %5075 ], [ %5079, %5076 ], [ %215, %221 ]
  %5100 = phi ptr [ %188, %4864 ], [ %188, %4820 ], [ %188, %4641 ], [ %188, %4551 ], [ %188, %4461 ], [ %188, %4247 ], [ %188, %4257 ], [ %188, %4000 ], [ %188, %4032 ], [ %188, %3361 ], [ %188, %3287 ], [ %188, %3282 ], [ %188, %3228 ], [ %188, %3220 ], [ %188, %3205 ], [ %188, %3196 ], [ %188, %3067 ], [ %188, %2079 ], [ %188, %2106 ], [ %188, %2123 ], [ %188, %2130 ], [ %188, %2133 ], [ %188, %2117 ], [ %188, %2118 ], [ %188, %2064 ], [ %188, %1967 ], [ %188, %1782 ], [ %188, %1788 ], [ %188, %1820 ], [ %188, %1839 ], [ %188, %1958 ], [ %188, %1954 ], [ %188, %1938 ], [ %188, %1915 ], [ %188, %1880 ], [ %188, %1763 ], [ %188, %1766 ], [ %188, %1759 ], [ %188, %1723 ], [ %188, %1729 ], [ %188, %1738 ], [ %188, %1690 ], [ %188, %1693 ], [ %188, %1705 ], [ %188, %1708 ], [ %188, %1683 ], [ %188, %1165 ], [ %188, %1144 ], [ %188, %873 ], [ %188, %898 ], [ %188, %905 ], [ %188, %888 ], [ %188, %845 ], [ %188, %572 ], [ %188, %546 ], [ %188, %546 ], [ %188, %280 ], [ %188, %274 ], [ %188, %270 ], [ %188, %268 ], [ %188, %266 ], [ %188, %257 ], [ %188, %253 ], [ %188, %248 ], [ %188, %235 ], [ %188, %229 ], [ %188, %231 ], [ %188, %223 ], [ %152, %4985 ], [ %188, %2886 ], [ %188, %3335 ], [ %188, %3366 ], [ %188, %3140 ], [ %188, %3697 ], [ %188, %3731 ], [ %188, %3927 ], [ %188, %4618 ], [ %188, %4798 ], [ %188, %4816 ], [ %188, %829 ], [ %188, %834 ], [ %188, %840 ], [ %188, %4156 ], [ %188, %4163 ], [ %188, %4715 ], [ %188, %4720 ], [ %188, %4747 ], [ %188, %4766 ], [ %188, %4768 ], [ %188, %4809 ], [ %188, %4783 ], [ %188, %4788 ], [ %188, %4811 ], [ %188, %4792 ], [ %188, %4818 ], [ %188, %4784 ], [ %188, %5074 ], [ %188, %5075 ], [ %188, %5076 ], [ %188, %221 ]
  %5101 = phi ptr [ %189, %4864 ], [ %189, %4820 ], [ %189, %4641 ], [ %189, %4551 ], [ %189, %4461 ], [ %189, %4247 ], [ %189, %4257 ], [ %189, %4000 ], [ %189, %4032 ], [ %189, %3361 ], [ %189, %3287 ], [ %189, %3282 ], [ %189, %3228 ], [ %189, %3220 ], [ %189, %3205 ], [ %189, %3196 ], [ %189, %3067 ], [ %189, %2079 ], [ %189, %2106 ], [ %189, %2123 ], [ %189, %2130 ], [ %189, %2133 ], [ %189, %2117 ], [ %189, %2118 ], [ %189, %2064 ], [ %189, %1967 ], [ %189, %1782 ], [ %189, %1788 ], [ %189, %1820 ], [ %189, %1839 ], [ %189, %1958 ], [ %189, %1954 ], [ %189, %1938 ], [ %189, %1915 ], [ %189, %1880 ], [ %189, %1763 ], [ %189, %1766 ], [ %189, %1759 ], [ %189, %1723 ], [ %189, %1729 ], [ %189, %1738 ], [ %189, %1690 ], [ %189, %1693 ], [ %189, %1705 ], [ %189, %1708 ], [ %189, %1683 ], [ %189, %1165 ], [ %189, %1144 ], [ %189, %873 ], [ %189, %898 ], [ %189, %905 ], [ %189, %888 ], [ %189, %845 ], [ %189, %572 ], [ %189, %546 ], [ %189, %546 ], [ %189, %280 ], [ %189, %274 ], [ %189, %270 ], [ %189, %268 ], [ %189, %266 ], [ %189, %257 ], [ %189, %253 ], [ %189, %248 ], [ %189, %235 ], [ %189, %229 ], [ %189, %231 ], [ %189, %223 ], [ %153, %4985 ], [ %2881, %2886 ], [ %189, %3335 ], [ %189, %3366 ], [ %189, %3140 ], [ %189, %3697 ], [ %189, %3731 ], [ %189, %3927 ], [ %189, %4618 ], [ %189, %4798 ], [ %189, %4816 ], [ %189, %829 ], [ %189, %834 ], [ %189, %840 ], [ %189, %4156 ], [ %189, %4163 ], [ %189, %4715 ], [ %189, %4720 ], [ %189, %4747 ], [ %189, %4766 ], [ %189, %4768 ], [ %189, %4809 ], [ %189, %4783 ], [ %189, %4788 ], [ %189, %4811 ], [ %189, %4792 ], [ %189, %4818 ], [ %189, %4784 ], [ %189, %5074 ], [ %189, %5075 ], [ %189, %5076 ], [ %189, %221 ]
  %5102 = phi ptr [ %190, %4864 ], [ %190, %4820 ], [ %190, %4641 ], [ %190, %4551 ], [ %190, %4461 ], [ %190, %4247 ], [ %190, %4257 ], [ %190, %4000 ], [ %190, %4032 ], [ %190, %3361 ], [ %190, %3287 ], [ %190, %3282 ], [ %190, %3228 ], [ %190, %3220 ], [ %190, %3205 ], [ %190, %3196 ], [ %190, %3067 ], [ %190, %2079 ], [ %190, %2106 ], [ %190, %2123 ], [ %190, %2130 ], [ %190, %2133 ], [ %190, %2117 ], [ %190, %2118 ], [ %190, %2064 ], [ %190, %1967 ], [ %190, %1782 ], [ %190, %1788 ], [ %190, %1820 ], [ %190, %1839 ], [ %190, %1958 ], [ %190, %1954 ], [ %190, %1938 ], [ %190, %1915 ], [ %190, %1880 ], [ %190, %1763 ], [ %190, %1766 ], [ %190, %1759 ], [ %190, %1723 ], [ %190, %1729 ], [ %190, %1738 ], [ %190, %1690 ], [ %190, %1693 ], [ %190, %1705 ], [ %190, %1708 ], [ %190, %1683 ], [ %190, %1165 ], [ %190, %1144 ], [ %190, %873 ], [ %190, %898 ], [ %190, %905 ], [ %190, %888 ], [ %190, %845 ], [ %190, %572 ], [ %190, %546 ], [ %190, %546 ], [ %190, %280 ], [ %190, %274 ], [ %190, %270 ], [ %190, %268 ], [ %190, %266 ], [ %190, %257 ], [ %190, %253 ], [ %190, %248 ], [ %190, %235 ], [ %190, %229 ], [ %190, %231 ], [ %190, %223 ], [ %154, %4985 ], [ %2879, %2886 ], [ %190, %3335 ], [ %190, %3366 ], [ %190, %3140 ], [ %190, %3697 ], [ %190, %3731 ], [ %190, %3927 ], [ %190, %4618 ], [ %190, %4798 ], [ %190, %4816 ], [ %190, %829 ], [ %190, %834 ], [ %190, %840 ], [ %190, %4156 ], [ %190, %4163 ], [ %190, %4715 ], [ %190, %4720 ], [ %190, %4747 ], [ %190, %4766 ], [ %190, %4768 ], [ %190, %4809 ], [ %190, %4783 ], [ %190, %4788 ], [ %190, %4811 ], [ %190, %4792 ], [ %190, %4818 ], [ %190, %4784 ], [ %190, %5074 ], [ %190, %5075 ], [ %190, %5076 ], [ %190, %221 ]
  %5103 = phi ptr [ %191, %4864 ], [ %191, %4820 ], [ %191, %4641 ], [ %191, %4551 ], [ %191, %4461 ], [ %191, %4247 ], [ %191, %4257 ], [ %191, %4000 ], [ %191, %4032 ], [ %191, %3361 ], [ %191, %3287 ], [ %191, %3282 ], [ %191, %3228 ], [ %191, %3220 ], [ %191, %3205 ], [ %191, %3196 ], [ %191, %3067 ], [ %191, %2079 ], [ %191, %2106 ], [ %191, %2123 ], [ %191, %2130 ], [ %191, %2133 ], [ %191, %2117 ], [ %191, %2118 ], [ %191, %2064 ], [ %191, %1967 ], [ %191, %1782 ], [ %191, %1788 ], [ %191, %1820 ], [ %191, %1839 ], [ %191, %1958 ], [ %191, %1954 ], [ %191, %1938 ], [ %191, %1915 ], [ %191, %1880 ], [ %191, %1763 ], [ %191, %1766 ], [ %191, %1759 ], [ %191, %1723 ], [ %191, %1729 ], [ %191, %1738 ], [ %191, %1690 ], [ %191, %1693 ], [ %191, %1705 ], [ %191, %1708 ], [ %191, %1683 ], [ %191, %1165 ], [ %191, %1144 ], [ %191, %873 ], [ %191, %898 ], [ %191, %905 ], [ %191, %888 ], [ %191, %845 ], [ %191, %572 ], [ %191, %546 ], [ %191, %546 ], [ %191, %280 ], [ %191, %274 ], [ %191, %270 ], [ %191, %268 ], [ %191, %266 ], [ %191, %257 ], [ %191, %253 ], [ %191, %248 ], [ %191, %235 ], [ %191, %229 ], [ %191, %231 ], [ %191, %223 ], [ %155, %4985 ], [ %2850, %2886 ], [ %191, %3335 ], [ %191, %3366 ], [ %191, %3140 ], [ %191, %3697 ], [ %191, %3731 ], [ %191, %3927 ], [ %191, %4618 ], [ %191, %4798 ], [ %191, %4816 ], [ %191, %829 ], [ %191, %834 ], [ %191, %840 ], [ %191, %4156 ], [ %191, %4163 ], [ %191, %4715 ], [ %191, %4720 ], [ %191, %4747 ], [ %191, %4766 ], [ %191, %4768 ], [ %191, %4809 ], [ %191, %4783 ], [ %191, %4788 ], [ %191, %4811 ], [ %191, %4792 ], [ %191, %4818 ], [ %191, %4784 ], [ %191, %5074 ], [ %191, %5075 ], [ %191, %5076 ], [ %191, %221 ]
  %5104 = and i8 %5090, 1
  %5105 = icmp eq i8 %5104, 0
  br i1 %5105, label %5108, label %5106

5106:                                             ; preds = %5080
  %5107 = icmp eq ptr %5094, null
  br i1 %5107, label %5131, label %4996

5108:                                             ; preds = %5080
  %5109 = icmp eq i32 %5096, 0
  br i1 %5109, label %5131, label %5110

5110:                                             ; preds = %5108
  %5111 = getelementptr inbounds %struct.regmatch_state, ptr %5100, i64 -1
  %5112 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %5113 = icmp ult ptr %5111, %5112
  br i1 %5113, label %5114, label %5118

5114:                                             ; preds = %5110
  %5115 = getelementptr inbounds %struct.regmatch_slab, ptr %5112, i64 0, i32 1
  %5116 = load ptr, ptr %5115, align 8, !tbaa !64
  store ptr %5116, ptr @PL_regmatch_slab, align 8, !tbaa !13
  %5117 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %5116, i64 0, i64 32
  br label %5118

5118:                                             ; preds = %5114, %5110
  %5119 = phi ptr [ %5117, %5114 ], [ %5111, %5110 ]
  store ptr %5119, ptr @PL_regmatch_state, align 8, !tbaa !13
  %5120 = getelementptr inbounds %struct.regmatch_state, ptr %5119, i64 0, i32 1
  %5121 = load ptr, ptr %5120, align 8, !tbaa !294
  %5122 = add nsw i32 %5096, -1
  %5123 = icmp eq ptr %5094, %5119
  br i1 %5123, label %5124, label %5127

5124:                                             ; preds = %5118
  %5125 = getelementptr inbounds %struct.regmatch_state, ptr %5094, i64 0, i32 2
  %5126 = load ptr, ptr %5125, align 8, !tbaa !6
  br label %5127

5127:                                             ; preds = %5124, %5118
  %5128 = phi ptr [ %5126, %5124 ], [ %5094, %5118 ]
  %5129 = load i32, ptr %5119, align 8, !tbaa !276
  %5130 = add nsw i32 %5129, 1
  br label %167

5131:                                             ; preds = %5108, %5106, %5064, %5073, %5067
  %5132 = phi ptr [ %173, %5067 ], [ %173, %5073 ], [ %173, %5064 ], [ %5086, %5106 ], [ %5086, %5108 ]
  %5133 = phi ptr [ %174, %5067 ], [ %174, %5073 ], [ %174, %5064 ], [ %5087, %5106 ], [ %5087, %5108 ]
  %5134 = phi i1 [ true, %5067 ], [ true, %5073 ], [ true, %5064 ], [ false, %5106 ], [ false, %5108 ]
  %5135 = phi ptr [ %214, %5067 ], [ %214, %5073 ], [ %214, %5064 ], [ %5097, %5106 ], [ %5097, %5108 ]
  %5136 = phi ptr [ %4993, %5067 ], [ %4993, %5073 ], [ %4993, %5064 ], [ %5102, %5106 ], [ %5102, %5108 ]
  %5137 = getelementptr inbounds %struct.regexp, ptr %5136, i64 0, i32 13
  %5138 = load i32, ptr %5137, align 4, !tbaa !19
  %5139 = and i32 %5138, 8
  %5140 = icmp eq i32 %5139, 0
  br i1 %5140, label %5150, label %5141

5141:                                             ; preds = %5131
  %5142 = call ptr @Perl_get_sv(ptr noundef nonnull @.str.18, i32 noundef 1) #12
  %5143 = call ptr @Perl_get_sv(ptr noundef nonnull @.str.13, i32 noundef 1) #12
  %5144 = icmp eq ptr %5132, null
  %5145 = select i1 %5144, ptr @PL_sv_yes, ptr %5132
  %5146 = icmp eq ptr %5133, null
  %5147 = select i1 %5146, ptr @PL_sv_yes, ptr %5133
  %5148 = select i1 %5134, ptr %5145, ptr @PL_sv_no
  %5149 = select i1 %5134, ptr @PL_sv_no, ptr %5147
  call void @Perl_sv_setsv_flags(ptr noundef %5142, ptr noundef nonnull %5149, i32 noundef 1538) #12
  call void @Perl_sv_setsv_flags(ptr noundef %5143, ptr noundef nonnull %5148, i32 noundef 1538) #12
  br label %5150

5150:                                             ; preds = %5141, %5131
  %5151 = icmp eq ptr %106, null
  br i1 %5151, label %5224, label %5152

5152:                                             ; preds = %5150
  %5153 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !13
  %5154 = getelementptr inbounds %struct.stackinfo, ptr %5153, i64 0, i32 1
  %5155 = load ptr, ptr %5154, align 8, !tbaa !302
  %5156 = getelementptr inbounds %struct.stackinfo, ptr %5153, i64 0, i32 4
  %5157 = load i32, ptr %5156, align 8, !tbaa !304
  %5158 = sext i32 %5157 to i64
  %5159 = getelementptr inbounds %struct.context, ptr %5155, i64 %5158, i32 0, i32 0, i32 11
  %5160 = load i32, ptr %5159, align 8, !tbaa !6
  %5161 = load ptr, ptr %109, align 8, !tbaa !300
  %5162 = getelementptr inbounds %struct.xpvcv, ptr %5161, i64 0, i32 13
  store i32 %5160, ptr %5162, align 4, !tbaa !34
  %5163 = icmp eq i32 %5160, 0
  br i1 %5163, label %5164, label %5174

5164:                                             ; preds = %5152
  %5165 = getelementptr inbounds %struct.sv, ptr %109, i64 0, i32 1
  %5166 = load i32, ptr %5165, align 8, !tbaa !78
  %5167 = icmp ugt i32 %5166, 1
  br i1 %5167, label %5168, label %5170

5168:                                             ; preds = %5164
  %5169 = add i32 %5166, -1
  store i32 %5169, ptr %5165, align 8, !tbaa !78
  br label %5174

5170:                                             ; preds = %5164
  call void @Perl_sv_free2(ptr noundef nonnull %109, i32 noundef %5166) #12
  %5171 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !13
  %5172 = getelementptr inbounds %struct.stackinfo, ptr %5171, i64 0, i32 1
  %5173 = load ptr, ptr %5172, align 8, !tbaa !302
  br label %5174

5174:                                             ; preds = %5170, %5168, %5152
  %5175 = phi ptr [ %5173, %5170 ], [ %5155, %5168 ], [ %5155, %5152 ]
  %5176 = phi ptr [ %5171, %5170 ], [ %5153, %5168 ], [ %5153, %5152 ]
  %5177 = getelementptr inbounds %struct.stackinfo, ptr %5176, i64 0, i32 4
  %5178 = load i32, ptr %5177, align 8, !tbaa !304
  %5179 = add nsw i32 %5178, -1
  store i32 %5179, ptr %5177, align 8, !tbaa !304
  %5180 = sext i32 %5178 to i64
  %5181 = getelementptr inbounds %struct.context, ptr %5175, i64 %5180
  %5182 = getelementptr inbounds %struct.block, ptr %5181, i64 0, i32 4
  %5183 = load ptr, ptr %5182, align 8, !tbaa !6
  store ptr %5183, ptr @PL_curcop, align 8, !tbaa !13
  %5184 = load ptr, ptr @PL_markstack, align 8, !tbaa !13
  %5185 = getelementptr inbounds %struct.block, ptr %5181, i64 0, i32 5
  %5186 = load i32, ptr %5185, align 8, !tbaa !6
  %5187 = sext i32 %5186 to i64
  %5188 = getelementptr inbounds i32, ptr %5184, i64 %5187
  store ptr %5188, ptr @PL_markstack_ptr, align 8, !tbaa !13
  %5189 = getelementptr inbounds %struct.block, ptr %5181, i64 0, i32 6
  %5190 = load i32, ptr %5189, align 4, !tbaa !6
  store i32 %5190, ptr @PL_scopestack_ix, align 4, !tbaa !34
  %5191 = getelementptr inbounds %struct.block, ptr %5181, i64 0, i32 7
  %5192 = load ptr, ptr %5191, align 8, !tbaa !6
  store ptr %5192, ptr @PL_curpm, align 8, !tbaa !13
  %5193 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !13
  %5194 = getelementptr inbounds %struct.stackinfo, ptr %5176, i64 0, i32 2
  %5195 = load ptr, ptr %5194, align 8, !tbaa !311
  %5196 = icmp eq ptr %5195, null
  br i1 %5196, label %5197, label %5198

5197:                                             ; preds = %5174
  call void @Perl_croak_popstack() #12
  br label %5198

5198:                                             ; preds = %5174, %5197
  %5199 = load ptr, ptr @PL_stack_base, align 8, !tbaa !13
  %5200 = ptrtoint ptr %5193 to i64
  %5201 = ptrtoint ptr %5199 to i64
  %5202 = sub i64 %5200, %5201
  %5203 = ashr exact i64 %5202, 3
  %5204 = load ptr, ptr @PL_curstack, align 8, !tbaa !13
  %5205 = load ptr, ptr %5204, align 8, !tbaa !314
  %5206 = getelementptr inbounds %struct.xpvav, ptr %5205, i64 0, i32 2
  store i64 %5203, ptr %5206, align 8, !tbaa !316
  %5207 = load ptr, ptr %5195, align 8, !tbaa !313
  %5208 = getelementptr inbounds %struct.av, ptr %5207, i64 0, i32 3
  %5209 = load ptr, ptr %5208, align 8, !tbaa !6
  store ptr %5209, ptr @PL_stack_base, align 8, !tbaa !13
  %5210 = load ptr, ptr %5195, align 8, !tbaa !313
  %5211 = load ptr, ptr %5210, align 8, !tbaa !314
  %5212 = getelementptr inbounds %struct.xpvav, ptr %5211, i64 0, i32 3
  %5213 = load i64, ptr %5212, align 8, !tbaa !318
  %5214 = getelementptr inbounds ptr, ptr %5209, i64 %5213
  store ptr %5214, ptr @PL_stack_max, align 8, !tbaa !13
  %5215 = load ptr, ptr %5195, align 8, !tbaa !313
  %5216 = load ptr, ptr %5215, align 8, !tbaa !314
  %5217 = getelementptr inbounds %struct.xpvav, ptr %5216, i64 0, i32 2
  %5218 = load i64, ptr %5217, align 8, !tbaa !316
  %5219 = getelementptr inbounds ptr, ptr %5209, i64 %5218
  store ptr %5219, ptr @PL_stack_sp, align 8, !tbaa !13
  %5220 = load ptr, ptr %5195, align 8, !tbaa !313
  store ptr %5220, ptr @PL_curstack, align 8, !tbaa !13
  store ptr %5195, ptr @PL_curstackinfo, align 8, !tbaa !13
  %5221 = and i8 %108, 1
  %5222 = load ptr, ptr @PL_top_env, align 8, !tbaa !13
  %5223 = getelementptr inbounds %struct.jmpenv, ptr %5222, i64 0, i32 3
  store i8 %5221, ptr %5223, align 4, !tbaa !308
  call void @Perl_pop_scope() #12
  br label %5224

5224:                                             ; preds = %5198, %5150
  br i1 %5134, label %5225, label %5230

5225:                                             ; preds = %5224
  %5226 = load ptr, ptr %59, align 8, !tbaa !53
  %5227 = ptrtoint ptr %5135 to i64
  %5228 = ptrtoint ptr %5226 to i64
  %5229 = sub i64 %5227, %5228
  br label %5230

5230:                                             ; preds = %4032, %546, %5225, %5224
  %5231 = phi i64 [ %5229, %5225 ], [ -1, %5224 ], [ undef, %546 ], [ undef, %4032 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #12
  ret i64 %5231
}

declare ptr @Perl_gv_add_by_type(ptr noundef, i32 noundef) local_unnamed_addr #2

declare i64 @Perl__to_uni_fold_flags(i64 noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_regcppush(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) unnamed_addr #0 {
  %4 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %5 = sub i32 %2, %1
  %6 = mul i32 %5, 3
  %7 = add nsw i32 %6, 3
  %8 = sext i32 %7 to i64
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.19, i32 noundef %6, i32 noundef %2, i32 noundef %1, i32 noundef 3) #12
  %11 = icmp ugt i32 %6, -4
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = zext i32 %2 to i64
  %14 = sext i32 %1 to i64
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.20, i64 noundef %8, i64 noundef %13, i64 noundef %14) #12
  br label %15

15:                                               ; preds = %3, %12, %10
  %16 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %17 = add i32 %6, 8
  %18 = add i32 %17, %16
  %19 = load i32, ptr @PL_savestack_max, align 4, !tbaa !34
  %20 = icmp sgt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call void @Perl_savestack_grow_cnt(i32 noundef %17) #12
  br label %22

22:                                               ; preds = %15, %21
  %23 = icmp slt i32 %1, %2
  br i1 %23, label %24, label %57

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 17
  %26 = sext i32 %1 to i64
  %27 = sext i32 %2 to i64
  br label %28

28:                                               ; preds = %24, %28
  %29 = phi i64 [ %26, %24 ], [ %30, %28 ]
  %30 = add nsw i64 %29, 1
  %31 = load ptr, ptr %25, align 8, !tbaa !38
  %32 = getelementptr inbounds %struct.regexp_paren_pair, ptr %31, i64 %30, i32 1
  %33 = load i64, ptr %32, align 8, !tbaa !42
  %34 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %35 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %36 = add nsw i32 %35, 1
  store i32 %36, ptr @PL_savestack_ix, align 4, !tbaa !34
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds %union.any, ptr %34, i64 %37
  store i64 %33, ptr %38, align 8, !tbaa !6
  %39 = load ptr, ptr %25, align 8, !tbaa !38
  %40 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 %30
  %41 = load i64, ptr %40, align 8, !tbaa !39
  %42 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %43 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %44 = add nsw i32 %43, 1
  store i32 %44, ptr @PL_savestack_ix, align 4, !tbaa !34
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds %union.any, ptr %42, i64 %45
  store i64 %41, ptr %46, align 8, !tbaa !6
  %47 = load ptr, ptr %25, align 8, !tbaa !38
  %48 = getelementptr inbounds %struct.regexp_paren_pair, ptr %47, i64 %30, i32 2
  %49 = load i64, ptr %48, align 8, !tbaa !330
  %50 = trunc i64 %49 to i32
  %51 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %52 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr @PL_savestack_ix, align 4, !tbaa !34
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds %union.any, ptr %51, i64 %54
  store i32 %50, ptr %55, align 8, !tbaa !6
  %56 = icmp eq i64 %30, %27
  br i1 %56, label %57, label %28, !llvm.loop !359

57:                                               ; preds = %28, %22
  %58 = shl nsw i64 %8, 6
  %59 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %60 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr @PL_savestack_ix, align 4, !tbaa !34
  %62 = sext i32 %60 to i64
  %63 = getelementptr inbounds %union.any, ptr %59, i64 %62
  store i32 %2, ptr %63, align 8, !tbaa !6
  %64 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 15
  %65 = load i32, ptr %64, align 8, !tbaa !37
  %66 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %67 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %68 = add nsw i32 %67, 1
  store i32 %68, ptr @PL_savestack_ix, align 4, !tbaa !34
  %69 = sext i32 %67 to i64
  %70 = getelementptr inbounds %union.any, ptr %66, i64 %69
  store i32 %65, ptr %70, align 8, !tbaa !6
  %71 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 16
  %72 = load i32, ptr %71, align 4, !tbaa !36
  %73 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %74 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %75 = add nsw i32 %74, 1
  store i32 %75, ptr @PL_savestack_ix, align 4, !tbaa !34
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds %union.any, ptr %73, i64 %76
  store i32 %72, ptr %77, align 8, !tbaa !6
  %78 = or i64 %58, 3
  %79 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %80 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %81 = add nsw i32 %80, 1
  store i32 %81, ptr @PL_savestack_ix, align 4, !tbaa !34
  %82 = sext i32 %80 to i64
  %83 = getelementptr inbounds %union.any, ptr %79, i64 %82
  store i64 %78, ptr %83, align 8, !tbaa !6
  ret i32 %4
}

declare ptr @Perl_find_runcv(ptr noundef) local_unnamed_addr #2

declare i32 @Perl_was_lvalue_sub() local_unnamed_addr #2

declare void @Perl_pad_push(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_save_vptr(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_new_stackinfo(i32 noundef, i32 noundef) local_unnamed_addr #2

declare i32 @Perl_cxinc() local_unnamed_addr #2

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc zeroext i1 @S_sv_only_taint_gmagic(ptr nocapture readonly %0) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.xpvmg, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !6
  %4 = icmp eq ptr %3, null
  br i1 %4, label %23, label %5

5:                                                ; preds = %1, %20
  %6 = phi ptr [ %21, %20 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.magic, ptr %6, i64 0, i32 3
  %8 = load i8, ptr %7, align 2, !tbaa !360
  %9 = icmp eq i8 %8, 116
  br i1 %9, label %20, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.magic, ptr %6, i64 0, i32 4
  %12 = load i8, ptr %11, align 1, !tbaa !23
  %13 = and i8 %12, 4
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.magic, ptr %6, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !361
  %18 = load ptr, ptr %17, align 8, !tbaa !362
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %15, %10, %5
  %21 = load ptr, ptr %6, align 8, !tbaa !6
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %5, !llvm.loop !364

23:                                               ; preds = %15, %20, %1
  %24 = phi i1 [ true, %1 ], [ true, %20 ], [ false, %15 ]
  ret i1 %24
}

declare ptr @Perl_get_sv(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_save_scalar(ptr noundef) local_unnamed_addr #2

declare zeroext i1 @Perl_sv_2bool_flags(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_sv_mortalcopy_flags(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_mg_find(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_sv_pvn_force_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_reg_temp_copy(ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @Perl_newSVpvn_flags(ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_sv_magic(ptr noundef, ptr noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @S_regcppop(ptr nocapture noundef %0, ptr nocapture noundef %1) unnamed_addr #8 {
  %3 = load ptr, ptr @PL_savestack, align 8, !tbaa !13
  %4 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %5 = add nsw i32 %4, -1
  store i32 %5, ptr @PL_savestack_ix, align 4, !tbaa !34
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %union.any, ptr %3, i64 %6
  %8 = load i64, ptr %7, align 8, !tbaa !6
  %9 = lshr i64 %8, 6
  %10 = add nsw i32 %4, -2
  store i32 %10, ptr @PL_savestack_ix, align 4, !tbaa !34
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %union.any, ptr %3, i64 %11
  %13 = load i32, ptr %12, align 8, !tbaa !6
  %14 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 16
  store i32 %13, ptr %14, align 4, !tbaa !36
  %15 = add nsw i32 %4, -3
  store i32 %15, ptr @PL_savestack_ix, align 4, !tbaa !34
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %union.any, ptr %3, i64 %16
  %18 = load i32, ptr %17, align 8, !tbaa !6
  %19 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 15
  store i32 %18, ptr %19, align 8, !tbaa !37
  %20 = add nsw i32 %4, -4
  store i32 %20, ptr @PL_savestack_ix, align 4, !tbaa !34
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %union.any, ptr %3, i64 %21
  %23 = load i32, ptr %22, align 8, !tbaa !6
  store i32 %23, ptr %1, align 4, !tbaa !34
  %24 = add nsw i64 %9, -3
  %25 = icmp eq i64 %24, 0
  %26 = load i32, ptr %19, align 8, !tbaa !37
  br i1 %25, label %59, label %27

27:                                               ; preds = %2
  %28 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !34
  %29 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 17
  %30 = load ptr, ptr %29, align 8, !tbaa !38
  %31 = sext i32 %28 to i64
  br label %32

32:                                               ; preds = %27, %55
  %33 = phi i64 [ %31, %27 ], [ %48, %55 ]
  %34 = phi i64 [ %24, %27 ], [ %57, %55 ]
  %35 = phi i32 [ %23, %27 ], [ %56, %55 ]
  %36 = add nsw i64 %33, -1
  %37 = trunc i64 %36 to i32
  store i32 %37, ptr @PL_savestack_ix, align 4, !tbaa !34
  %38 = getelementptr inbounds %union.any, ptr %3, i64 %36
  %39 = load i32, ptr %38, align 8, !tbaa !6
  %40 = sext i32 %39 to i64
  %41 = zext i32 %35 to i64
  %42 = getelementptr inbounds %struct.regexp_paren_pair, ptr %30, i64 %41, i32 2
  store i64 %40, ptr %42, align 8, !tbaa !330
  %43 = add nsw i64 %33, -2
  %44 = trunc i64 %43 to i32
  store i32 %44, ptr @PL_savestack_ix, align 4, !tbaa !34
  %45 = getelementptr inbounds %union.any, ptr %3, i64 %43
  %46 = load i64, ptr %45, align 8, !tbaa !6
  %47 = getelementptr inbounds %struct.regexp_paren_pair, ptr %30, i64 %41
  store i64 %46, ptr %47, align 8, !tbaa !39
  %48 = add i64 %33, -3
  %49 = trunc i64 %48 to i32
  store i32 %49, ptr @PL_savestack_ix, align 4, !tbaa !34
  %50 = icmp ugt i32 %35, %26
  br i1 %50, label %55, label %51

51:                                               ; preds = %32
  %52 = getelementptr inbounds %union.any, ptr %3, i64 %48
  %53 = load i64, ptr %52, align 8, !tbaa !6
  %54 = getelementptr inbounds %struct.regexp_paren_pair, ptr %30, i64 %41, i32 1
  store i64 %53, ptr %54, align 8, !tbaa !42
  br label %55

55:                                               ; preds = %51, %32
  %56 = add i32 %35, -1
  %57 = add i64 %34, -3
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %32, !llvm.loop !365

59:                                               ; preds = %55, %2
  %60 = add i32 %26, 1
  %61 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 12
  %62 = load i32, ptr %61, align 8, !tbaa !92
  %63 = icmp ugt i32 %60, %62
  br i1 %63, label %100, label %64

64:                                               ; preds = %59
  %65 = zext i32 %62 to i64
  %66 = zext i32 %60 to i64
  %67 = load i32, ptr %1, align 4, !tbaa !34
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 17
  %70 = load ptr, ptr %69, align 8, !tbaa !38
  %71 = add nuw nsw i64 %65, 1
  %72 = sub nsw i64 %71, %66
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %64
  %76 = icmp ugt i32 %60, %67
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  %78 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %66
  store i64 -1, ptr %78, align 8, !tbaa !39
  br label %79

79:                                               ; preds = %77, %75
  %80 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %66, i32 1
  store i64 -1, ptr %80, align 8, !tbaa !42
  %81 = add nuw nsw i64 %66, 1
  br label %82

82:                                               ; preds = %79, %64
  %83 = phi i64 [ %66, %64 ], [ %81, %79 ]
  %84 = icmp eq i32 %62, %60
  br i1 %84, label %100, label %85

85:                                               ; preds = %82, %96
  %86 = phi i64 [ %98, %96 ], [ %83, %82 ]
  %87 = icmp ugt i64 %86, %68
  br i1 %87, label %88, label %90

88:                                               ; preds = %85
  %89 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %86
  store i64 -1, ptr %89, align 8, !tbaa !39
  br label %90

90:                                               ; preds = %88, %85
  %91 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %86, i32 1
  store i64 -1, ptr %91, align 8, !tbaa !42
  %92 = add nuw nsw i64 %86, 1
  %93 = icmp ult i64 %86, %68
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %92
  store i64 -1, ptr %95, align 8, !tbaa !39
  br label %96

96:                                               ; preds = %94, %90
  %97 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %92, i32 1
  store i64 -1, ptr %97, align 8, !tbaa !42
  %98 = add nuw nsw i64 %86, 2
  %99 = icmp eq i64 %92, %65
  br i1 %99, label %100, label %85, !llvm.loop !366

100:                                              ; preds = %82, %96, %59
  ret void
}

declare ptr @Perl_regnext(ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef %0, ptr nocapture noundef writeonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3, ptr noundef %4, i8 %5, i8 %6) unnamed_addr #0 {
  %8 = alloca [40 x i8], align 16
  %9 = alloca i64, align 8
  %10 = icmp eq i8 %6, 0
  %11 = icmp eq i8 %5, 0
  %12 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %8) #12
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(40) %8, i8 0, i64 40, i1 false)
  %13 = getelementptr inbounds %struct.regnode, ptr %0, i64 0, i32 1
  %14 = load i8, ptr %13, align 1, !tbaa !119
  %15 = add i8 %14, -31
  %16 = icmp ult i8 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %7
  br i1 %11, label %18, label %21

18:                                               ; preds = %17
  %19 = load i8, ptr %12, align 1, !tbaa !6
  %20 = zext i8 %19 to i64
  br label %1009

21:                                               ; preds = %17
  br i1 %10, label %22, label %1012

22:                                               ; preds = %21
  %23 = tail call i64 @Perl_valid_utf8_to_uvchr(ptr noundef nonnull %12, ptr noundef null) #12
  br label %1041

24:                                               ; preds = %7
  %25 = load i8, ptr %0, align 2, !tbaa !135
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds i8, ptr %12, i64 %26
  %28 = icmp eq i8 %14, 34
  br i1 %28, label %29, label %120

29:                                               ; preds = %24
  br i1 %11, label %30, label %39

30:                                               ; preds = %29
  %31 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !151, !range !97, !noundef !98
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %844, label %33

33:                                               ; preds = %30
  %34 = load i8, ptr %12, align 1, !tbaa !6
  %35 = icmp eq i8 %34, -33
  br i1 %35, label %36, label %844

36:                                               ; preds = %33
  %37 = getelementptr inbounds [40 x i8], ptr %8, i64 0, i64 1
  store i8 115, ptr %37, align 1, !tbaa !6
  store i8 115, ptr %8, align 16, !tbaa !6
  %38 = getelementptr inbounds i8, ptr %8, i64 2
  br label %844

39:                                               ; preds = %29
  %40 = load i8, ptr %12, align 1, !tbaa !6
  %41 = icmp sgt i8 %40, -1
  %42 = and i8 %40, -2
  %43 = icmp eq i8 %42, -62
  %44 = or i1 %41, %43
  br i1 %44, label %86, label %45

45:                                               ; preds = %39
  switch i8 %40, label %123 [
    i8 -60, label %46
    i8 -57, label %46
    i8 -59, label %50
    i8 -54, label %53
    i8 -50, label %57
    i8 -31, label %62
    i8 -30, label %69
    i8 -17, label %78
  ]

46:                                               ; preds = %45, %45
  %47 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %48 = load i8, ptr %47, align 1, !tbaa !6
  %49 = icmp eq i8 %48, -80
  br i1 %49, label %86, label %123

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %52 = load i8, ptr %51, align 1, !tbaa !6
  switch i8 %52, label %123 [
    i8 -119, label %86
    i8 -72, label %86
    i8 -65, label %86
  ]

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %55 = load i8, ptr %54, align 1, !tbaa !6
  %56 = icmp eq i8 %55, -68
  br i1 %56, label %86, label %123

57:                                               ; preds = %45
  %58 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %59 = load i8, ptr %58, align 1, !tbaa !6
  %60 = and i8 %59, -33
  %61 = icmp eq i8 %60, -100
  br i1 %61, label %86, label %123

62:                                               ; preds = %45
  %63 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %64 = load i8, ptr %63, align 1, !tbaa !6
  %65 = icmp eq i8 %64, -70
  br i1 %65, label %66, label %123

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 1
  %68 = load i8, ptr %67, align 1, !tbaa !6
  switch i8 %68, label %123 [
    i8 -98, label %86
    i8 -102, label %86
    i8 -103, label %86
    i8 -104, label %86
    i8 -105, label %86
    i8 -106, label %86
  ]

69:                                               ; preds = %45
  %70 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %71 = load i8, ptr %70, align 1, !tbaa !6
  %72 = icmp eq i8 %71, -124
  br i1 %72, label %73, label %123

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 1
  %75 = load i8, ptr %74, align 1, !tbaa !6
  %76 = and i8 %75, -2
  %77 = icmp eq i8 %76, -86
  br i1 %77, label %86, label %123

78:                                               ; preds = %45
  %79 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %80 = load i8, ptr %79, align 1, !tbaa !6
  %81 = icmp eq i8 %80, -84
  br i1 %81, label %82, label %123

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 1
  %84 = load i8, ptr %83, align 1, !tbaa !6
  %85 = icmp ult i8 %84, -121
  br i1 %85, label %86, label %123

86:                                               ; preds = %66, %66, %66, %66, %66, %66, %50, %50, %50, %82, %73, %57, %53, %46, %39
  %87 = icmp eq i8 %25, 0
  br i1 %87, label %123, label %88

88:                                               ; preds = %86, %113
  %89 = phi i32 [ %116, %113 ], [ 0, %86 ]
  %90 = phi ptr [ %115, %113 ], [ %8, %86 ]
  %91 = phi ptr [ %114, %113 ], [ %12, %86 ]
  %92 = load i8, ptr %91, align 1, !tbaa !6
  %93 = icmp sgt i8 %92, -1
  br i1 %93, label %94, label %103

94:                                               ; preds = %88
  %95 = tail call ptr @__ctype_tolower_loc() #14
  %96 = load ptr, ptr %95, align 8, !tbaa !13
  %97 = zext i8 %92 to i64
  %98 = getelementptr inbounds i32, ptr %96, i64 %97
  %99 = load i32, ptr %98, align 4, !tbaa !34
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, ptr %90, i64 1
  store i8 %100, ptr %90, align 1, !tbaa !6
  %102 = getelementptr inbounds i8, ptr %91, i64 1
  br label %113

103:                                              ; preds = %88
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  %104 = call i64 @Perl__to_utf8_fold_flags(ptr noundef nonnull %91, ptr noundef %90, ptr noundef nonnull %9, i8 noundef zeroext 3) #12
  %105 = load i64, ptr %9, align 8, !tbaa !86
  %106 = getelementptr inbounds i8, ptr %90, i64 %105
  %107 = load i8, ptr %91, align 1, !tbaa !6
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %108
  %110 = load i8, ptr %109, align 1, !tbaa !6
  %111 = zext i8 %110 to i64
  %112 = getelementptr inbounds i8, ptr %91, i64 %111
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  br label %113

113:                                              ; preds = %94, %103
  %114 = phi ptr [ %102, %94 ], [ %112, %103 ]
  %115 = phi ptr [ %101, %94 ], [ %106, %103 ]
  %116 = add nuw nsw i32 %89, 1
  %117 = icmp ult i32 %89, 2
  %118 = icmp ult ptr %114, %27
  %119 = select i1 %117, i1 %118, i1 false
  br i1 %119, label %88, label %120, !llvm.loop !367

120:                                              ; preds = %113, %24
  %121 = phi ptr [ %12, %24 ], [ %8, %113 ]
  %122 = phi ptr [ %27, %24 ], [ %115, %113 ]
  br i1 %11, label %844, label %123

123:                                              ; preds = %86, %66, %46, %53, %57, %62, %73, %69, %82, %78, %50, %45, %120
  %124 = phi ptr [ %122, %120 ], [ %27, %45 ], [ %27, %50 ], [ %27, %78 ], [ %27, %82 ], [ %27, %69 ], [ %27, %73 ], [ %27, %62 ], [ %27, %57 ], [ %27, %53 ], [ %27, %46 ], [ %27, %66 ], [ %8, %86 ]
  %125 = phi ptr [ %121, %120 ], [ %12, %45 ], [ %12, %50 ], [ %12, %78 ], [ %12, %82 ], [ %12, %69 ], [ %12, %73 ], [ %12, %62 ], [ %12, %57 ], [ %12, %53 ], [ %12, %46 ], [ %12, %66 ], [ %8, %86 ]
  %126 = ptrtoint ptr %124 to i64
  %127 = ptrtoint ptr %125 to i64
  %128 = sub i64 %126, %127
  %129 = icmp sgt i64 %128, 5
  br i1 %129, label %130, label %369

130:                                              ; preds = %123
  %131 = load i8, ptr %125, align 1, !tbaa !6
  switch i8 %131, label %882 [
    i8 97, label %132
    i8 102, label %140
    i8 104, label %143
    i8 105, label %151
    i8 106, label %159
    i8 115, label %167
    i8 116, label %172
    i8 119, label %180
    i8 121, label %180
    i8 -59, label %188
    i8 -54, label %200
    i8 -50, label %208
    i8 -49, label %256
    i8 -43, label %308
    i8 -31, label %334
  ]

132:                                              ; preds = %130
  %133 = getelementptr inbounds i8, ptr %125, i64 1
  %134 = load i8, ptr %133, align 1, !tbaa !6
  %135 = icmp eq i8 %134, -54
  br i1 %135, label %136, label %882

136:                                              ; preds = %132
  %137 = getelementptr inbounds i8, ptr %125, i64 2
  %138 = load i8, ptr %137, align 1, !tbaa !6
  %139 = icmp eq i8 %138, -66
  br i1 %139, label %1008, label %882

140:                                              ; preds = %130
  %141 = getelementptr inbounds i8, ptr %125, i64 1
  %142 = load i8, ptr %141, align 1, !tbaa !6
  switch i8 %142, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

143:                                              ; preds = %130
  %144 = getelementptr inbounds i8, ptr %125, i64 1
  %145 = load i8, ptr %144, align 1, !tbaa !6
  %146 = icmp eq i8 %145, -52
  br i1 %146, label %147, label %882

147:                                              ; preds = %143
  %148 = getelementptr inbounds i8, ptr %125, i64 2
  %149 = load i8, ptr %148, align 1, !tbaa !6
  %150 = icmp eq i8 %149, -79
  br i1 %150, label %1008, label %882

151:                                              ; preds = %130
  %152 = getelementptr inbounds i8, ptr %125, i64 1
  %153 = load i8, ptr %152, align 1, !tbaa !6
  %154 = icmp eq i8 %153, -52
  br i1 %154, label %155, label %882

155:                                              ; preds = %151
  %156 = getelementptr inbounds i8, ptr %125, i64 2
  %157 = load i8, ptr %156, align 1, !tbaa !6
  %158 = icmp eq i8 %157, -121
  br i1 %158, label %1008, label %882

159:                                              ; preds = %130
  %160 = getelementptr inbounds i8, ptr %125, i64 1
  %161 = load i8, ptr %160, align 1, !tbaa !6
  %162 = icmp eq i8 %161, -52
  br i1 %162, label %163, label %882

163:                                              ; preds = %159
  %164 = getelementptr inbounds i8, ptr %125, i64 2
  %165 = load i8, ptr %164, align 1, !tbaa !6
  %166 = icmp eq i8 %165, -116
  br i1 %166, label %1008, label %882

167:                                              ; preds = %130
  %168 = getelementptr inbounds i8, ptr %125, i64 1
  %169 = load i8, ptr %168, align 1, !tbaa !6
  %170 = add i8 %169, -115
  %171 = icmp ult i8 %170, 2
  br i1 %171, label %1008, label %882

172:                                              ; preds = %130
  %173 = getelementptr inbounds i8, ptr %125, i64 1
  %174 = load i8, ptr %173, align 1, !tbaa !6
  %175 = icmp eq i8 %174, -52
  br i1 %175, label %176, label %882

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, ptr %125, i64 2
  %178 = load i8, ptr %177, align 1, !tbaa !6
  %179 = icmp eq i8 %178, -120
  br i1 %179, label %1008, label %882

180:                                              ; preds = %130, %130
  %181 = getelementptr inbounds i8, ptr %125, i64 1
  %182 = load i8, ptr %181, align 1, !tbaa !6
  %183 = icmp eq i8 %182, -52
  br i1 %183, label %184, label %882

184:                                              ; preds = %180
  %185 = getelementptr inbounds i8, ptr %125, i64 2
  %186 = load i8, ptr %185, align 1, !tbaa !6
  %187 = icmp eq i8 %186, -118
  br i1 %187, label %1008, label %882

188:                                              ; preds = %130
  %189 = getelementptr inbounds i8, ptr %125, i64 1
  %190 = load i8, ptr %189, align 1, !tbaa !6
  %191 = icmp eq i8 %190, -65
  br i1 %191, label %192, label %882

192:                                              ; preds = %188
  %193 = getelementptr inbounds i8, ptr %125, i64 2
  %194 = load i8, ptr %193, align 1, !tbaa !6
  %195 = icmp eq i8 %194, -59
  br i1 %195, label %196, label %882

196:                                              ; preds = %192
  %197 = getelementptr inbounds i8, ptr %125, i64 3
  %198 = load i8, ptr %197, align 1, !tbaa !6
  %199 = icmp eq i8 %198, -65
  br i1 %199, label %1008, label %882

200:                                              ; preds = %130
  %201 = getelementptr inbounds i8, ptr %125, i64 1
  %202 = load i8, ptr %201, align 1, !tbaa !6
  %203 = icmp eq i8 %202, -68
  br i1 %203, label %204, label %882

204:                                              ; preds = %200
  %205 = getelementptr inbounds i8, ptr %125, i64 2
  %206 = load i8, ptr %205, align 1, !tbaa !6
  %207 = icmp eq i8 %206, 110
  br i1 %207, label %1008, label %882

208:                                              ; preds = %130
  %209 = getelementptr inbounds i8, ptr %125, i64 1
  %210 = load i8, ptr %209, align 1, !tbaa !6
  %211 = and i8 %210, -3
  %212 = icmp eq i8 %211, -84
  br i1 %212, label %213, label %221

213:                                              ; preds = %208
  %214 = getelementptr inbounds i8, ptr %125, i64 2
  %215 = load i8, ptr %214, align 1, !tbaa !6
  %216 = icmp eq i8 %215, -50
  br i1 %216, label %217, label %882

217:                                              ; preds = %213
  %218 = getelementptr inbounds i8, ptr %125, i64 3
  %219 = load i8, ptr %218, align 1, !tbaa !6
  %220 = icmp eq i8 %219, -71
  br i1 %220, label %1008, label %882

221:                                              ; preds = %208
  switch i8 %210, label %882 [
    i8 -79, label %222
    i8 -73, label %222
    i8 -71, label %233
  ]

222:                                              ; preds = %221, %221
  %223 = getelementptr inbounds i8, ptr %125, i64 2
  %224 = load i8, ptr %223, align 1, !tbaa !6
  switch i8 %224, label %882 [
    i8 -51, label %225
    i8 -50, label %229
  ]

225:                                              ; preds = %222
  %226 = getelementptr inbounds i8, ptr %125, i64 3
  %227 = load i8, ptr %226, align 1, !tbaa !6
  %228 = icmp eq i8 %227, -126
  br i1 %228, label %1008, label %882

229:                                              ; preds = %222
  %230 = getelementptr inbounds i8, ptr %125, i64 3
  %231 = load i8, ptr %230, align 1, !tbaa !6
  %232 = icmp eq i8 %231, -71
  br i1 %232, label %1008, label %882

233:                                              ; preds = %221
  %234 = getelementptr inbounds i8, ptr %125, i64 2
  %235 = load i8, ptr %234, align 1, !tbaa !6
  switch i8 %235, label %882 [
    i8 -52, label %236
    i8 -51, label %252
  ]

236:                                              ; preds = %233
  %237 = getelementptr inbounds i8, ptr %125, i64 3
  %238 = load i8, ptr %237, align 1, !tbaa !6
  %239 = icmp eq i8 %238, -120
  br i1 %239, label %240, label %882

240:                                              ; preds = %236
  %241 = getelementptr inbounds i8, ptr %125, i64 4
  %242 = load i8, ptr %241, align 1, !tbaa !6
  switch i8 %242, label %882 [
    i8 -52, label %243
    i8 -51, label %248
  ]

243:                                              ; preds = %240
  %244 = getelementptr inbounds i8, ptr %125, i64 5
  %245 = load i8, ptr %244, align 1, !tbaa !6
  %246 = and i8 %245, -2
  %247 = icmp eq i8 %246, -128
  br i1 %247, label %1008, label %882

248:                                              ; preds = %240
  %249 = getelementptr inbounds i8, ptr %125, i64 5
  %250 = load i8, ptr %249, align 1, !tbaa !6
  %251 = icmp eq i8 %250, -126
  br i1 %251, label %1008, label %882

252:                                              ; preds = %233
  %253 = getelementptr inbounds i8, ptr %125, i64 3
  %254 = load i8, ptr %253, align 1, !tbaa !6
  %255 = icmp eq i8 %254, -126
  br i1 %255, label %1008, label %882

256:                                              ; preds = %130
  %257 = getelementptr inbounds i8, ptr %125, i64 1
  %258 = load i8, ptr %257, align 1, !tbaa !6
  switch i8 %258, label %882 [
    i8 -127, label %259
    i8 -123, label %267
    i8 -119, label %289
    i8 -114, label %300
  ]

259:                                              ; preds = %256
  %260 = getelementptr inbounds i8, ptr %125, i64 2
  %261 = load i8, ptr %260, align 1, !tbaa !6
  %262 = icmp eq i8 %261, -52
  br i1 %262, label %263, label %882

263:                                              ; preds = %259
  %264 = getelementptr inbounds i8, ptr %125, i64 3
  %265 = load i8, ptr %264, align 1, !tbaa !6
  %266 = icmp eq i8 %265, -109
  br i1 %266, label %1008, label %882

267:                                              ; preds = %256
  %268 = getelementptr inbounds i8, ptr %125, i64 2
  %269 = load i8, ptr %268, align 1, !tbaa !6
  switch i8 %269, label %882 [
    i8 -52, label %270
    i8 -51, label %285
  ]

270:                                              ; preds = %267
  %271 = getelementptr inbounds i8, ptr %125, i64 3
  %272 = load i8, ptr %271, align 1, !tbaa !6
  switch i8 %272, label %882 [
    i8 -120, label %273
    i8 -109, label %1008
  ]

273:                                              ; preds = %270
  %274 = getelementptr inbounds i8, ptr %125, i64 4
  %275 = load i8, ptr %274, align 1, !tbaa !6
  switch i8 %275, label %882 [
    i8 -52, label %276
    i8 -51, label %281
  ]

276:                                              ; preds = %273
  %277 = getelementptr inbounds i8, ptr %125, i64 5
  %278 = load i8, ptr %277, align 1, !tbaa !6
  %279 = and i8 %278, -2
  %280 = icmp eq i8 %279, -128
  br i1 %280, label %1008, label %882

281:                                              ; preds = %273
  %282 = getelementptr inbounds i8, ptr %125, i64 5
  %283 = load i8, ptr %282, align 1, !tbaa !6
  %284 = icmp eq i8 %283, -126
  br i1 %284, label %1008, label %882

285:                                              ; preds = %267
  %286 = getelementptr inbounds i8, ptr %125, i64 3
  %287 = load i8, ptr %286, align 1, !tbaa !6
  %288 = icmp eq i8 %287, -126
  br i1 %288, label %1008, label %882

289:                                              ; preds = %256
  %290 = getelementptr inbounds i8, ptr %125, i64 2
  %291 = load i8, ptr %290, align 1, !tbaa !6
  switch i8 %291, label %882 [
    i8 -51, label %292
    i8 -50, label %296
  ]

292:                                              ; preds = %289
  %293 = getelementptr inbounds i8, ptr %125, i64 3
  %294 = load i8, ptr %293, align 1, !tbaa !6
  %295 = icmp eq i8 %294, -126
  br i1 %295, label %1008, label %882

296:                                              ; preds = %289
  %297 = getelementptr inbounds i8, ptr %125, i64 3
  %298 = load i8, ptr %297, align 1, !tbaa !6
  %299 = icmp eq i8 %298, -71
  br i1 %299, label %1008, label %882

300:                                              ; preds = %256
  %301 = getelementptr inbounds i8, ptr %125, i64 2
  %302 = load i8, ptr %301, align 1, !tbaa !6
  %303 = icmp eq i8 %302, -50
  br i1 %303, label %304, label %882

304:                                              ; preds = %300
  %305 = getelementptr inbounds i8, ptr %125, i64 3
  %306 = load i8, ptr %305, align 1, !tbaa !6
  %307 = icmp eq i8 %306, -71
  br i1 %307, label %1008, label %882

308:                                              ; preds = %130
  %309 = getelementptr inbounds i8, ptr %125, i64 1
  %310 = load i8, ptr %309, align 1, !tbaa !6
  switch i8 %310, label %882 [
    i8 -91, label %311
    i8 -76, label %319
    i8 -66, label %326
  ]

311:                                              ; preds = %308
  %312 = getelementptr inbounds i8, ptr %125, i64 2
  %313 = load i8, ptr %312, align 1, !tbaa !6
  %314 = icmp eq i8 %313, -42
  br i1 %314, label %315, label %882

315:                                              ; preds = %311
  %316 = getelementptr inbounds i8, ptr %125, i64 3
  %317 = load i8, ptr %316, align 1, !tbaa !6
  %318 = icmp eq i8 %317, -126
  br i1 %318, label %1008, label %882

319:                                              ; preds = %308
  %320 = getelementptr inbounds i8, ptr %125, i64 2
  %321 = load i8, ptr %320, align 1, !tbaa !6
  %322 = icmp eq i8 %321, -43
  br i1 %322, label %323, label %882

323:                                              ; preds = %319
  %324 = getelementptr inbounds i8, ptr %125, i64 3
  %325 = load i8, ptr %324, align 1, !tbaa !6
  switch i8 %325, label %882 [
    i8 -74, label %1008
    i8 -83, label %1008
    i8 -85, label %1008
    i8 -91, label %1008
  ]

326:                                              ; preds = %308
  %327 = getelementptr inbounds i8, ptr %125, i64 2
  %328 = load i8, ptr %327, align 1, !tbaa !6
  %329 = icmp eq i8 %328, -43
  br i1 %329, label %330, label %882

330:                                              ; preds = %326
  %331 = getelementptr inbounds i8, ptr %125, i64 3
  %332 = load i8, ptr %331, align 1, !tbaa !6
  %333 = icmp eq i8 %332, -74
  br i1 %333, label %1008, label %882

334:                                              ; preds = %130
  %335 = getelementptr inbounds i8, ptr %125, i64 1
  %336 = load i8, ptr %335, align 1, !tbaa !6
  switch i8 %336, label %882 [
    i8 -68, label %337
    i8 -67, label %350
  ]

337:                                              ; preds = %334
  %338 = getelementptr inbounds i8, ptr %125, i64 2
  %339 = load i8, ptr %338, align 1, !tbaa !6
  %340 = and i8 %339, -40
  %341 = icmp eq i8 %340, -128
  br i1 %341, label %342, label %882

342:                                              ; preds = %337
  %343 = getelementptr inbounds i8, ptr %125, i64 3
  %344 = load i8, ptr %343, align 1, !tbaa !6
  %345 = icmp eq i8 %344, -50
  br i1 %345, label %346, label %882

346:                                              ; preds = %342
  %347 = getelementptr inbounds i8, ptr %125, i64 4
  %348 = load i8, ptr %347, align 1, !tbaa !6
  %349 = icmp eq i8 %348, -71
  br i1 %349, label %1008, label %882

350:                                              ; preds = %334
  %351 = getelementptr inbounds i8, ptr %125, i64 2
  %352 = load i8, ptr %351, align 1, !tbaa !6
  %353 = zext i8 %352 to i32
  %354 = and i32 %353, 248
  %355 = icmp eq i32 %354, 160
  %356 = and i32 %353, 251
  %357 = icmp eq i32 %356, 176
  %358 = or i1 %355, %357
  %359 = icmp eq i8 %352, -68
  %360 = or i1 %359, %358
  br i1 %360, label %361, label %882

361:                                              ; preds = %350
  %362 = getelementptr inbounds i8, ptr %125, i64 3
  %363 = load i8, ptr %362, align 1, !tbaa !6
  %364 = icmp eq i8 %363, -50
  br i1 %364, label %365, label %882

365:                                              ; preds = %361
  %366 = getelementptr inbounds i8, ptr %125, i64 4
  %367 = load i8, ptr %366, align 1, !tbaa !6
  %368 = icmp eq i8 %367, -71
  br i1 %368, label %1008, label %882

369:                                              ; preds = %123
  %370 = icmp eq i64 %128, 5
  br i1 %370, label %371, label %584

371:                                              ; preds = %369
  %372 = load i8, ptr %125, align 1, !tbaa !6
  switch i8 %372, label %882 [
    i8 97, label %373
    i8 102, label %381
    i8 104, label %384
    i8 105, label %392
    i8 106, label %400
    i8 115, label %408
    i8 116, label %413
    i8 119, label %421
    i8 121, label %421
    i8 -59, label %429
    i8 -54, label %441
    i8 -50, label %449
    i8 -49, label %482
    i8 -43, label %523
    i8 -31, label %549
  ]

373:                                              ; preds = %371
  %374 = getelementptr inbounds i8, ptr %125, i64 1
  %375 = load i8, ptr %374, align 1, !tbaa !6
  %376 = icmp eq i8 %375, -54
  br i1 %376, label %377, label %882

377:                                              ; preds = %373
  %378 = getelementptr inbounds i8, ptr %125, i64 2
  %379 = load i8, ptr %378, align 1, !tbaa !6
  %380 = icmp eq i8 %379, -66
  br i1 %380, label %1008, label %882

381:                                              ; preds = %371
  %382 = getelementptr inbounds i8, ptr %125, i64 1
  %383 = load i8, ptr %382, align 1, !tbaa !6
  switch i8 %383, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

384:                                              ; preds = %371
  %385 = getelementptr inbounds i8, ptr %125, i64 1
  %386 = load i8, ptr %385, align 1, !tbaa !6
  %387 = icmp eq i8 %386, -52
  br i1 %387, label %388, label %882

388:                                              ; preds = %384
  %389 = getelementptr inbounds i8, ptr %125, i64 2
  %390 = load i8, ptr %389, align 1, !tbaa !6
  %391 = icmp eq i8 %390, -79
  br i1 %391, label %1008, label %882

392:                                              ; preds = %371
  %393 = getelementptr inbounds i8, ptr %125, i64 1
  %394 = load i8, ptr %393, align 1, !tbaa !6
  %395 = icmp eq i8 %394, -52
  br i1 %395, label %396, label %882

396:                                              ; preds = %392
  %397 = getelementptr inbounds i8, ptr %125, i64 2
  %398 = load i8, ptr %397, align 1, !tbaa !6
  %399 = icmp eq i8 %398, -121
  br i1 %399, label %1008, label %882

400:                                              ; preds = %371
  %401 = getelementptr inbounds i8, ptr %125, i64 1
  %402 = load i8, ptr %401, align 1, !tbaa !6
  %403 = icmp eq i8 %402, -52
  br i1 %403, label %404, label %882

404:                                              ; preds = %400
  %405 = getelementptr inbounds i8, ptr %125, i64 2
  %406 = load i8, ptr %405, align 1, !tbaa !6
  %407 = icmp eq i8 %406, -116
  br i1 %407, label %1008, label %882

408:                                              ; preds = %371
  %409 = getelementptr inbounds i8, ptr %125, i64 1
  %410 = load i8, ptr %409, align 1, !tbaa !6
  %411 = add i8 %410, -115
  %412 = icmp ult i8 %411, 2
  br i1 %412, label %1008, label %882

413:                                              ; preds = %371
  %414 = getelementptr inbounds i8, ptr %125, i64 1
  %415 = load i8, ptr %414, align 1, !tbaa !6
  %416 = icmp eq i8 %415, -52
  br i1 %416, label %417, label %882

417:                                              ; preds = %413
  %418 = getelementptr inbounds i8, ptr %125, i64 2
  %419 = load i8, ptr %418, align 1, !tbaa !6
  %420 = icmp eq i8 %419, -120
  br i1 %420, label %1008, label %882

421:                                              ; preds = %371, %371
  %422 = getelementptr inbounds i8, ptr %125, i64 1
  %423 = load i8, ptr %422, align 1, !tbaa !6
  %424 = icmp eq i8 %423, -52
  br i1 %424, label %425, label %882

425:                                              ; preds = %421
  %426 = getelementptr inbounds i8, ptr %125, i64 2
  %427 = load i8, ptr %426, align 1, !tbaa !6
  %428 = icmp eq i8 %427, -118
  br i1 %428, label %1008, label %882

429:                                              ; preds = %371
  %430 = getelementptr inbounds i8, ptr %125, i64 1
  %431 = load i8, ptr %430, align 1, !tbaa !6
  %432 = icmp eq i8 %431, -65
  br i1 %432, label %433, label %882

433:                                              ; preds = %429
  %434 = getelementptr inbounds i8, ptr %125, i64 2
  %435 = load i8, ptr %434, align 1, !tbaa !6
  %436 = icmp eq i8 %435, -59
  br i1 %436, label %437, label %882

437:                                              ; preds = %433
  %438 = getelementptr inbounds i8, ptr %125, i64 3
  %439 = load i8, ptr %438, align 1, !tbaa !6
  %440 = icmp eq i8 %439, -65
  br i1 %440, label %1008, label %882

441:                                              ; preds = %371
  %442 = getelementptr inbounds i8, ptr %125, i64 1
  %443 = load i8, ptr %442, align 1, !tbaa !6
  %444 = icmp eq i8 %443, -68
  br i1 %444, label %445, label %882

445:                                              ; preds = %441
  %446 = getelementptr inbounds i8, ptr %125, i64 2
  %447 = load i8, ptr %446, align 1, !tbaa !6
  %448 = icmp eq i8 %447, 110
  br i1 %448, label %1008, label %882

449:                                              ; preds = %371
  %450 = getelementptr inbounds i8, ptr %125, i64 1
  %451 = load i8, ptr %450, align 1, !tbaa !6
  %452 = and i8 %451, -3
  %453 = icmp eq i8 %452, -84
  br i1 %453, label %454, label %462

454:                                              ; preds = %449
  %455 = getelementptr inbounds i8, ptr %125, i64 2
  %456 = load i8, ptr %455, align 1, !tbaa !6
  %457 = icmp eq i8 %456, -50
  br i1 %457, label %458, label %882

458:                                              ; preds = %454
  %459 = getelementptr inbounds i8, ptr %125, i64 3
  %460 = load i8, ptr %459, align 1, !tbaa !6
  %461 = icmp eq i8 %460, -71
  br i1 %461, label %1008, label %882

462:                                              ; preds = %449
  switch i8 %451, label %882 [
    i8 -79, label %463
    i8 -73, label %463
    i8 -71, label %474
  ]

463:                                              ; preds = %462, %462
  %464 = getelementptr inbounds i8, ptr %125, i64 2
  %465 = load i8, ptr %464, align 1, !tbaa !6
  switch i8 %465, label %882 [
    i8 -51, label %466
    i8 -50, label %470
  ]

466:                                              ; preds = %463
  %467 = getelementptr inbounds i8, ptr %125, i64 3
  %468 = load i8, ptr %467, align 1, !tbaa !6
  %469 = icmp eq i8 %468, -126
  br i1 %469, label %1008, label %882

470:                                              ; preds = %463
  %471 = getelementptr inbounds i8, ptr %125, i64 3
  %472 = load i8, ptr %471, align 1, !tbaa !6
  %473 = icmp eq i8 %472, -71
  br i1 %473, label %1008, label %882

474:                                              ; preds = %462
  %475 = getelementptr inbounds i8, ptr %125, i64 2
  %476 = load i8, ptr %475, align 1, !tbaa !6
  %477 = icmp eq i8 %476, -51
  br i1 %477, label %478, label %882

478:                                              ; preds = %474
  %479 = getelementptr inbounds i8, ptr %125, i64 3
  %480 = load i8, ptr %479, align 1, !tbaa !6
  %481 = icmp eq i8 %480, -126
  br i1 %481, label %1008, label %882

482:                                              ; preds = %371
  %483 = getelementptr inbounds i8, ptr %125, i64 1
  %484 = load i8, ptr %483, align 1, !tbaa !6
  switch i8 %484, label %882 [
    i8 -127, label %485
    i8 -123, label %493
    i8 -119, label %504
    i8 -114, label %515
  ]

485:                                              ; preds = %482
  %486 = getelementptr inbounds i8, ptr %125, i64 2
  %487 = load i8, ptr %486, align 1, !tbaa !6
  %488 = icmp eq i8 %487, -52
  br i1 %488, label %489, label %882

489:                                              ; preds = %485
  %490 = getelementptr inbounds i8, ptr %125, i64 3
  %491 = load i8, ptr %490, align 1, !tbaa !6
  %492 = icmp eq i8 %491, -109
  br i1 %492, label %1008, label %882

493:                                              ; preds = %482
  %494 = getelementptr inbounds i8, ptr %125, i64 2
  %495 = load i8, ptr %494, align 1, !tbaa !6
  switch i8 %495, label %882 [
    i8 -52, label %496
    i8 -51, label %500
  ]

496:                                              ; preds = %493
  %497 = getelementptr inbounds i8, ptr %125, i64 3
  %498 = load i8, ptr %497, align 1, !tbaa !6
  %499 = icmp eq i8 %498, -109
  br i1 %499, label %1008, label %882

500:                                              ; preds = %493
  %501 = getelementptr inbounds i8, ptr %125, i64 3
  %502 = load i8, ptr %501, align 1, !tbaa !6
  %503 = icmp eq i8 %502, -126
  br i1 %503, label %1008, label %882

504:                                              ; preds = %482
  %505 = getelementptr inbounds i8, ptr %125, i64 2
  %506 = load i8, ptr %505, align 1, !tbaa !6
  switch i8 %506, label %882 [
    i8 -51, label %507
    i8 -50, label %511
  ]

507:                                              ; preds = %504
  %508 = getelementptr inbounds i8, ptr %125, i64 3
  %509 = load i8, ptr %508, align 1, !tbaa !6
  %510 = icmp eq i8 %509, -126
  br i1 %510, label %1008, label %882

511:                                              ; preds = %504
  %512 = getelementptr inbounds i8, ptr %125, i64 3
  %513 = load i8, ptr %512, align 1, !tbaa !6
  %514 = icmp eq i8 %513, -71
  br i1 %514, label %1008, label %882

515:                                              ; preds = %482
  %516 = getelementptr inbounds i8, ptr %125, i64 2
  %517 = load i8, ptr %516, align 1, !tbaa !6
  %518 = icmp eq i8 %517, -50
  br i1 %518, label %519, label %882

519:                                              ; preds = %515
  %520 = getelementptr inbounds i8, ptr %125, i64 3
  %521 = load i8, ptr %520, align 1, !tbaa !6
  %522 = icmp eq i8 %521, -71
  br i1 %522, label %1008, label %882

523:                                              ; preds = %371
  %524 = getelementptr inbounds i8, ptr %125, i64 1
  %525 = load i8, ptr %524, align 1, !tbaa !6
  switch i8 %525, label %882 [
    i8 -91, label %526
    i8 -76, label %534
    i8 -66, label %541
  ]

526:                                              ; preds = %523
  %527 = getelementptr inbounds i8, ptr %125, i64 2
  %528 = load i8, ptr %527, align 1, !tbaa !6
  %529 = icmp eq i8 %528, -42
  br i1 %529, label %530, label %882

530:                                              ; preds = %526
  %531 = getelementptr inbounds i8, ptr %125, i64 3
  %532 = load i8, ptr %531, align 1, !tbaa !6
  %533 = icmp eq i8 %532, -126
  br i1 %533, label %1008, label %882

534:                                              ; preds = %523
  %535 = getelementptr inbounds i8, ptr %125, i64 2
  %536 = load i8, ptr %535, align 1, !tbaa !6
  %537 = icmp eq i8 %536, -43
  br i1 %537, label %538, label %882

538:                                              ; preds = %534
  %539 = getelementptr inbounds i8, ptr %125, i64 3
  %540 = load i8, ptr %539, align 1, !tbaa !6
  switch i8 %540, label %882 [
    i8 -74, label %1008
    i8 -83, label %1008
    i8 -85, label %1008
    i8 -91, label %1008
  ]

541:                                              ; preds = %523
  %542 = getelementptr inbounds i8, ptr %125, i64 2
  %543 = load i8, ptr %542, align 1, !tbaa !6
  %544 = icmp eq i8 %543, -43
  br i1 %544, label %545, label %882

545:                                              ; preds = %541
  %546 = getelementptr inbounds i8, ptr %125, i64 3
  %547 = load i8, ptr %546, align 1, !tbaa !6
  %548 = icmp eq i8 %547, -74
  br i1 %548, label %1008, label %882

549:                                              ; preds = %371
  %550 = getelementptr inbounds i8, ptr %125, i64 1
  %551 = load i8, ptr %550, align 1, !tbaa !6
  switch i8 %551, label %882 [
    i8 -68, label %552
    i8 -67, label %565
  ]

552:                                              ; preds = %549
  %553 = getelementptr inbounds i8, ptr %125, i64 2
  %554 = load i8, ptr %553, align 1, !tbaa !6
  %555 = and i8 %554, -40
  %556 = icmp eq i8 %555, -128
  br i1 %556, label %557, label %882

557:                                              ; preds = %552
  %558 = getelementptr inbounds i8, ptr %125, i64 3
  %559 = load i8, ptr %558, align 1, !tbaa !6
  %560 = icmp eq i8 %559, -50
  br i1 %560, label %561, label %882

561:                                              ; preds = %557
  %562 = getelementptr inbounds i8, ptr %125, i64 4
  %563 = load i8, ptr %562, align 1, !tbaa !6
  %564 = icmp eq i8 %563, -71
  br i1 %564, label %1008, label %882

565:                                              ; preds = %549
  %566 = getelementptr inbounds i8, ptr %125, i64 2
  %567 = load i8, ptr %566, align 1, !tbaa !6
  %568 = zext i8 %567 to i32
  %569 = and i32 %568, 248
  %570 = icmp eq i32 %569, 160
  %571 = and i32 %568, 251
  %572 = icmp eq i32 %571, 176
  %573 = or i1 %570, %572
  %574 = icmp eq i8 %567, -68
  %575 = or i1 %574, %573
  br i1 %575, label %576, label %882

576:                                              ; preds = %565
  %577 = getelementptr inbounds i8, ptr %125, i64 3
  %578 = load i8, ptr %577, align 1, !tbaa !6
  %579 = icmp eq i8 %578, -50
  br i1 %579, label %580, label %882

580:                                              ; preds = %576
  %581 = getelementptr inbounds i8, ptr %125, i64 4
  %582 = load i8, ptr %581, align 1, !tbaa !6
  %583 = icmp eq i8 %582, -71
  br i1 %583, label %1008, label %882

584:                                              ; preds = %369
  %585 = icmp sgt i64 %128, 3
  br i1 %585, label %586, label %764

586:                                              ; preds = %584
  %587 = load i8, ptr %125, align 1, !tbaa !6
  switch i8 %587, label %882 [
    i8 97, label %588
    i8 102, label %596
    i8 104, label %599
    i8 105, label %607
    i8 106, label %615
    i8 115, label %623
    i8 116, label %628
    i8 119, label %636
    i8 121, label %636
    i8 -59, label %644
    i8 -54, label %656
    i8 -50, label %664
    i8 -49, label %697
    i8 -43, label %738
  ]

588:                                              ; preds = %586
  %589 = getelementptr inbounds i8, ptr %125, i64 1
  %590 = load i8, ptr %589, align 1, !tbaa !6
  %591 = icmp eq i8 %590, -54
  br i1 %591, label %592, label %882

592:                                              ; preds = %588
  %593 = getelementptr inbounds i8, ptr %125, i64 2
  %594 = load i8, ptr %593, align 1, !tbaa !6
  %595 = icmp eq i8 %594, -66
  br i1 %595, label %1008, label %882

596:                                              ; preds = %586
  %597 = getelementptr inbounds i8, ptr %125, i64 1
  %598 = load i8, ptr %597, align 1, !tbaa !6
  switch i8 %598, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

599:                                              ; preds = %586
  %600 = getelementptr inbounds i8, ptr %125, i64 1
  %601 = load i8, ptr %600, align 1, !tbaa !6
  %602 = icmp eq i8 %601, -52
  br i1 %602, label %603, label %882

603:                                              ; preds = %599
  %604 = getelementptr inbounds i8, ptr %125, i64 2
  %605 = load i8, ptr %604, align 1, !tbaa !6
  %606 = icmp eq i8 %605, -79
  br i1 %606, label %1008, label %882

607:                                              ; preds = %586
  %608 = getelementptr inbounds i8, ptr %125, i64 1
  %609 = load i8, ptr %608, align 1, !tbaa !6
  %610 = icmp eq i8 %609, -52
  br i1 %610, label %611, label %882

611:                                              ; preds = %607
  %612 = getelementptr inbounds i8, ptr %125, i64 2
  %613 = load i8, ptr %612, align 1, !tbaa !6
  %614 = icmp eq i8 %613, -121
  br i1 %614, label %1008, label %882

615:                                              ; preds = %586
  %616 = getelementptr inbounds i8, ptr %125, i64 1
  %617 = load i8, ptr %616, align 1, !tbaa !6
  %618 = icmp eq i8 %617, -52
  br i1 %618, label %619, label %882

619:                                              ; preds = %615
  %620 = getelementptr inbounds i8, ptr %125, i64 2
  %621 = load i8, ptr %620, align 1, !tbaa !6
  %622 = icmp eq i8 %621, -116
  br i1 %622, label %1008, label %882

623:                                              ; preds = %586
  %624 = getelementptr inbounds i8, ptr %125, i64 1
  %625 = load i8, ptr %624, align 1, !tbaa !6
  %626 = add i8 %625, -115
  %627 = icmp ult i8 %626, 2
  br i1 %627, label %1008, label %882

628:                                              ; preds = %586
  %629 = getelementptr inbounds i8, ptr %125, i64 1
  %630 = load i8, ptr %629, align 1, !tbaa !6
  %631 = icmp eq i8 %630, -52
  br i1 %631, label %632, label %882

632:                                              ; preds = %628
  %633 = getelementptr inbounds i8, ptr %125, i64 2
  %634 = load i8, ptr %633, align 1, !tbaa !6
  %635 = icmp eq i8 %634, -120
  br i1 %635, label %1008, label %882

636:                                              ; preds = %586, %586
  %637 = getelementptr inbounds i8, ptr %125, i64 1
  %638 = load i8, ptr %637, align 1, !tbaa !6
  %639 = icmp eq i8 %638, -52
  br i1 %639, label %640, label %882

640:                                              ; preds = %636
  %641 = getelementptr inbounds i8, ptr %125, i64 2
  %642 = load i8, ptr %641, align 1, !tbaa !6
  %643 = icmp eq i8 %642, -118
  br i1 %643, label %1008, label %882

644:                                              ; preds = %586
  %645 = getelementptr inbounds i8, ptr %125, i64 1
  %646 = load i8, ptr %645, align 1, !tbaa !6
  %647 = icmp eq i8 %646, -65
  br i1 %647, label %648, label %882

648:                                              ; preds = %644
  %649 = getelementptr inbounds i8, ptr %125, i64 2
  %650 = load i8, ptr %649, align 1, !tbaa !6
  %651 = icmp eq i8 %650, -59
  br i1 %651, label %652, label %882

652:                                              ; preds = %648
  %653 = getelementptr inbounds i8, ptr %125, i64 3
  %654 = load i8, ptr %653, align 1, !tbaa !6
  %655 = icmp eq i8 %654, -65
  br i1 %655, label %1008, label %882

656:                                              ; preds = %586
  %657 = getelementptr inbounds i8, ptr %125, i64 1
  %658 = load i8, ptr %657, align 1, !tbaa !6
  %659 = icmp eq i8 %658, -68
  br i1 %659, label %660, label %882

660:                                              ; preds = %656
  %661 = getelementptr inbounds i8, ptr %125, i64 2
  %662 = load i8, ptr %661, align 1, !tbaa !6
  %663 = icmp eq i8 %662, 110
  br i1 %663, label %1008, label %882

664:                                              ; preds = %586
  %665 = getelementptr inbounds i8, ptr %125, i64 1
  %666 = load i8, ptr %665, align 1, !tbaa !6
  %667 = and i8 %666, -3
  %668 = icmp eq i8 %667, -84
  br i1 %668, label %669, label %677

669:                                              ; preds = %664
  %670 = getelementptr inbounds i8, ptr %125, i64 2
  %671 = load i8, ptr %670, align 1, !tbaa !6
  %672 = icmp eq i8 %671, -50
  br i1 %672, label %673, label %882

673:                                              ; preds = %669
  %674 = getelementptr inbounds i8, ptr %125, i64 3
  %675 = load i8, ptr %674, align 1, !tbaa !6
  %676 = icmp eq i8 %675, -71
  br i1 %676, label %1008, label %882

677:                                              ; preds = %664
  switch i8 %666, label %882 [
    i8 -79, label %678
    i8 -73, label %678
    i8 -71, label %689
  ]

678:                                              ; preds = %677, %677
  %679 = getelementptr inbounds i8, ptr %125, i64 2
  %680 = load i8, ptr %679, align 1, !tbaa !6
  switch i8 %680, label %882 [
    i8 -51, label %681
    i8 -50, label %685
  ]

681:                                              ; preds = %678
  %682 = getelementptr inbounds i8, ptr %125, i64 3
  %683 = load i8, ptr %682, align 1, !tbaa !6
  %684 = icmp eq i8 %683, -126
  br i1 %684, label %1008, label %882

685:                                              ; preds = %678
  %686 = getelementptr inbounds i8, ptr %125, i64 3
  %687 = load i8, ptr %686, align 1, !tbaa !6
  %688 = icmp eq i8 %687, -71
  br i1 %688, label %1008, label %882

689:                                              ; preds = %677
  %690 = getelementptr inbounds i8, ptr %125, i64 2
  %691 = load i8, ptr %690, align 1, !tbaa !6
  %692 = icmp eq i8 %691, -51
  br i1 %692, label %693, label %882

693:                                              ; preds = %689
  %694 = getelementptr inbounds i8, ptr %125, i64 3
  %695 = load i8, ptr %694, align 1, !tbaa !6
  %696 = icmp eq i8 %695, -126
  br i1 %696, label %1008, label %882

697:                                              ; preds = %586
  %698 = getelementptr inbounds i8, ptr %125, i64 1
  %699 = load i8, ptr %698, align 1, !tbaa !6
  switch i8 %699, label %882 [
    i8 -127, label %700
    i8 -123, label %708
    i8 -119, label %719
    i8 -114, label %730
  ]

700:                                              ; preds = %697
  %701 = getelementptr inbounds i8, ptr %125, i64 2
  %702 = load i8, ptr %701, align 1, !tbaa !6
  %703 = icmp eq i8 %702, -52
  br i1 %703, label %704, label %882

704:                                              ; preds = %700
  %705 = getelementptr inbounds i8, ptr %125, i64 3
  %706 = load i8, ptr %705, align 1, !tbaa !6
  %707 = icmp eq i8 %706, -109
  br i1 %707, label %1008, label %882

708:                                              ; preds = %697
  %709 = getelementptr inbounds i8, ptr %125, i64 2
  %710 = load i8, ptr %709, align 1, !tbaa !6
  switch i8 %710, label %882 [
    i8 -52, label %711
    i8 -51, label %715
  ]

711:                                              ; preds = %708
  %712 = getelementptr inbounds i8, ptr %125, i64 3
  %713 = load i8, ptr %712, align 1, !tbaa !6
  %714 = icmp eq i8 %713, -109
  br i1 %714, label %1008, label %882

715:                                              ; preds = %708
  %716 = getelementptr inbounds i8, ptr %125, i64 3
  %717 = load i8, ptr %716, align 1, !tbaa !6
  %718 = icmp eq i8 %717, -126
  br i1 %718, label %1008, label %882

719:                                              ; preds = %697
  %720 = getelementptr inbounds i8, ptr %125, i64 2
  %721 = load i8, ptr %720, align 1, !tbaa !6
  switch i8 %721, label %882 [
    i8 -51, label %722
    i8 -50, label %726
  ]

722:                                              ; preds = %719
  %723 = getelementptr inbounds i8, ptr %125, i64 3
  %724 = load i8, ptr %723, align 1, !tbaa !6
  %725 = icmp eq i8 %724, -126
  br i1 %725, label %1008, label %882

726:                                              ; preds = %719
  %727 = getelementptr inbounds i8, ptr %125, i64 3
  %728 = load i8, ptr %727, align 1, !tbaa !6
  %729 = icmp eq i8 %728, -71
  br i1 %729, label %1008, label %882

730:                                              ; preds = %697
  %731 = getelementptr inbounds i8, ptr %125, i64 2
  %732 = load i8, ptr %731, align 1, !tbaa !6
  %733 = icmp eq i8 %732, -50
  br i1 %733, label %734, label %882

734:                                              ; preds = %730
  %735 = getelementptr inbounds i8, ptr %125, i64 3
  %736 = load i8, ptr %735, align 1, !tbaa !6
  %737 = icmp eq i8 %736, -71
  br i1 %737, label %1008, label %882

738:                                              ; preds = %586
  %739 = getelementptr inbounds i8, ptr %125, i64 1
  %740 = load i8, ptr %739, align 1, !tbaa !6
  switch i8 %740, label %882 [
    i8 -91, label %741
    i8 -76, label %749
    i8 -66, label %756
  ]

741:                                              ; preds = %738
  %742 = getelementptr inbounds i8, ptr %125, i64 2
  %743 = load i8, ptr %742, align 1, !tbaa !6
  %744 = icmp eq i8 %743, -42
  br i1 %744, label %745, label %882

745:                                              ; preds = %741
  %746 = getelementptr inbounds i8, ptr %125, i64 3
  %747 = load i8, ptr %746, align 1, !tbaa !6
  %748 = icmp eq i8 %747, -126
  br i1 %748, label %1008, label %882

749:                                              ; preds = %738
  %750 = getelementptr inbounds i8, ptr %125, i64 2
  %751 = load i8, ptr %750, align 1, !tbaa !6
  %752 = icmp eq i8 %751, -43
  br i1 %752, label %753, label %882

753:                                              ; preds = %749
  %754 = getelementptr inbounds i8, ptr %125, i64 3
  %755 = load i8, ptr %754, align 1, !tbaa !6
  switch i8 %755, label %882 [
    i8 -74, label %1008
    i8 -83, label %1008
    i8 -85, label %1008
    i8 -91, label %1008
  ]

756:                                              ; preds = %738
  %757 = getelementptr inbounds i8, ptr %125, i64 2
  %758 = load i8, ptr %757, align 1, !tbaa !6
  %759 = icmp eq i8 %758, -43
  br i1 %759, label %760, label %882

760:                                              ; preds = %756
  %761 = getelementptr inbounds i8, ptr %125, i64 3
  %762 = load i8, ptr %761, align 1, !tbaa !6
  %763 = icmp eq i8 %762, -74
  br i1 %763, label %1008, label %882

764:                                              ; preds = %584
  %765 = icmp eq i64 %128, 3
  br i1 %765, label %766, label %832

766:                                              ; preds = %764
  %767 = load i8, ptr %125, align 1, !tbaa !6
  switch i8 %767, label %882 [
    i8 97, label %768
    i8 102, label %776
    i8 104, label %779
    i8 105, label %787
    i8 106, label %795
    i8 115, label %803
    i8 116, label %808
    i8 119, label %816
    i8 121, label %816
    i8 -54, label %824
  ]

768:                                              ; preds = %766
  %769 = getelementptr inbounds i8, ptr %125, i64 1
  %770 = load i8, ptr %769, align 1, !tbaa !6
  %771 = icmp eq i8 %770, -54
  br i1 %771, label %772, label %882

772:                                              ; preds = %768
  %773 = getelementptr inbounds i8, ptr %125, i64 2
  %774 = load i8, ptr %773, align 1, !tbaa !6
  %775 = icmp eq i8 %774, -66
  br i1 %775, label %1008, label %882

776:                                              ; preds = %766
  %777 = getelementptr inbounds i8, ptr %125, i64 1
  %778 = load i8, ptr %777, align 1, !tbaa !6
  switch i8 %778, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

779:                                              ; preds = %766
  %780 = getelementptr inbounds i8, ptr %125, i64 1
  %781 = load i8, ptr %780, align 1, !tbaa !6
  %782 = icmp eq i8 %781, -52
  br i1 %782, label %783, label %882

783:                                              ; preds = %779
  %784 = getelementptr inbounds i8, ptr %125, i64 2
  %785 = load i8, ptr %784, align 1, !tbaa !6
  %786 = icmp eq i8 %785, -79
  br i1 %786, label %1008, label %882

787:                                              ; preds = %766
  %788 = getelementptr inbounds i8, ptr %125, i64 1
  %789 = load i8, ptr %788, align 1, !tbaa !6
  %790 = icmp eq i8 %789, -52
  br i1 %790, label %791, label %882

791:                                              ; preds = %787
  %792 = getelementptr inbounds i8, ptr %125, i64 2
  %793 = load i8, ptr %792, align 1, !tbaa !6
  %794 = icmp eq i8 %793, -121
  br i1 %794, label %1008, label %882

795:                                              ; preds = %766
  %796 = getelementptr inbounds i8, ptr %125, i64 1
  %797 = load i8, ptr %796, align 1, !tbaa !6
  %798 = icmp eq i8 %797, -52
  br i1 %798, label %799, label %882

799:                                              ; preds = %795
  %800 = getelementptr inbounds i8, ptr %125, i64 2
  %801 = load i8, ptr %800, align 1, !tbaa !6
  %802 = icmp eq i8 %801, -116
  br i1 %802, label %1008, label %882

803:                                              ; preds = %766
  %804 = getelementptr inbounds i8, ptr %125, i64 1
  %805 = load i8, ptr %804, align 1, !tbaa !6
  %806 = add i8 %805, -115
  %807 = icmp ult i8 %806, 2
  br i1 %807, label %1008, label %882

808:                                              ; preds = %766
  %809 = getelementptr inbounds i8, ptr %125, i64 1
  %810 = load i8, ptr %809, align 1, !tbaa !6
  %811 = icmp eq i8 %810, -52
  br i1 %811, label %812, label %882

812:                                              ; preds = %808
  %813 = getelementptr inbounds i8, ptr %125, i64 2
  %814 = load i8, ptr %813, align 1, !tbaa !6
  %815 = icmp eq i8 %814, -120
  br i1 %815, label %1008, label %882

816:                                              ; preds = %766, %766
  %817 = getelementptr inbounds i8, ptr %125, i64 1
  %818 = load i8, ptr %817, align 1, !tbaa !6
  %819 = icmp eq i8 %818, -52
  br i1 %819, label %820, label %882

820:                                              ; preds = %816
  %821 = getelementptr inbounds i8, ptr %125, i64 2
  %822 = load i8, ptr %821, align 1, !tbaa !6
  %823 = icmp eq i8 %822, -118
  br i1 %823, label %1008, label %882

824:                                              ; preds = %766
  %825 = getelementptr inbounds i8, ptr %125, i64 1
  %826 = load i8, ptr %825, align 1, !tbaa !6
  %827 = icmp eq i8 %826, -68
  br i1 %827, label %828, label %882

828:                                              ; preds = %824
  %829 = getelementptr inbounds i8, ptr %125, i64 2
  %830 = load i8, ptr %829, align 1, !tbaa !6
  %831 = icmp eq i8 %830, 110
  br i1 %831, label %1008, label %882

832:                                              ; preds = %764
  %833 = icmp sgt i64 %128, 1
  br i1 %833, label %834, label %882

834:                                              ; preds = %832
  %835 = load i8, ptr %125, align 1, !tbaa !6
  switch i8 %835, label %882 [
    i8 102, label %836
    i8 115, label %839
  ]

836:                                              ; preds = %834
  %837 = getelementptr inbounds i8, ptr %125, i64 1
  %838 = load i8, ptr %837, align 1, !tbaa !6
  switch i8 %838, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

839:                                              ; preds = %834
  %840 = getelementptr inbounds i8, ptr %125, i64 1
  %841 = load i8, ptr %840, align 1, !tbaa !6
  %842 = add i8 %841, -115
  %843 = icmp ult i8 %842, 2
  br i1 %843, label %1008, label %882

844:                                              ; preds = %30, %33, %36, %120
  %845 = phi ptr [ %122, %120 ], [ %27, %30 ], [ %27, %33 ], [ %38, %36 ]
  %846 = phi ptr [ %121, %120 ], [ %12, %30 ], [ %12, %33 ], [ %8, %36 ]
  %847 = ptrtoint ptr %845 to i64
  %848 = ptrtoint ptr %846 to i64
  %849 = sub i64 %847, %848
  %850 = icmp sgt i64 %849, 2
  br i1 %850, label %851, label %864

851:                                              ; preds = %844
  %852 = load i8, ptr %846, align 1, !tbaa !6
  %853 = and i8 %852, -33
  switch i8 %853, label %879 [
    i8 70, label %854
    i8 83, label %858
  ]

854:                                              ; preds = %851
  %855 = getelementptr inbounds i8, ptr %846, i64 1
  %856 = load i8, ptr %855, align 1, !tbaa !6
  %857 = and i8 %856, -33
  switch i8 %857, label %879 [
    i8 70, label %1008
    i8 73, label %1008
    i8 76, label %1008
  ]

858:                                              ; preds = %851
  %859 = getelementptr inbounds i8, ptr %846, i64 1
  %860 = load i8, ptr %859, align 1, !tbaa !6
  %861 = and i8 %860, -33
  %862 = add i8 %861, -83
  %863 = icmp ult i8 %862, 2
  br i1 %863, label %1008, label %879

864:                                              ; preds = %844
  %865 = icmp eq i64 %849, 2
  %866 = load i8, ptr %846, align 1, !tbaa !6
  br i1 %865, label %867, label %879

867:                                              ; preds = %864
  %868 = and i8 %866, -33
  switch i8 %868, label %879 [
    i8 70, label %869
    i8 83, label %873
  ]

869:                                              ; preds = %867
  %870 = getelementptr inbounds i8, ptr %846, i64 1
  %871 = load i8, ptr %870, align 1, !tbaa !6
  %872 = and i8 %871, -33
  switch i8 %872, label %879 [
    i8 70, label %1008
    i8 73, label %1008
    i8 76, label %1008
  ]

873:                                              ; preds = %867
  %874 = getelementptr inbounds i8, ptr %846, i64 1
  %875 = load i8, ptr %874, align 1, !tbaa !6
  %876 = and i8 %875, -33
  %877 = add i8 %876, -83
  %878 = icmp ult i8 %877, 2
  br i1 %878, label %1008, label %879

879:                                              ; preds = %873, %858, %867, %869, %851, %854, %864
  %880 = phi i8 [ %866, %873 ], [ %852, %858 ], [ %866, %867 ], [ %866, %869 ], [ %852, %851 ], [ %852, %854 ], [ %866, %864 ]
  %881 = zext i8 %880 to i64
  br label %966

882:                                              ; preds = %839, %803, %753, %623, %538, %408, %323, %167, %834, %836, %766, %776, %738, %586, %697, %719, %708, %677, %678, %596, %565, %549, %371, %523, %482, %504, %493, %462, %463, %381, %350, %334, %130, %308, %256, %289, %267, %270, %273, %233, %240, %221, %222, %140, %832, %824, %828, %816, %820, %808, %812, %795, %799, %787, %791, %779, %783, %768, %772, %756, %760, %749, %741, %745, %730, %734, %726, %722, %715, %711, %700, %704, %689, %693, %685, %681, %669, %673, %656, %660, %644, %648, %652, %636, %640, %628, %632, %615, %619, %607, %611, %599, %603, %588, %592, %576, %580, %552, %557, %561, %541, %545, %534, %526, %530, %515, %519, %511, %507, %500, %496, %485, %489, %474, %478, %470, %466, %454, %458, %441, %445, %429, %433, %437, %421, %425, %413, %417, %400, %404, %392, %396, %384, %388, %373, %377, %361, %365, %337, %342, %346, %326, %330, %319, %311, %315, %300, %304, %296, %292, %285, %281, %276, %259, %263, %252, %236, %248, %243, %229, %225, %213, %217, %200, %204, %188, %192, %196, %180, %184, %172, %176, %159, %163, %151, %155, %143, %147, %132, %136
  %883 = call i64 @Perl_valid_utf8_to_uvchr(ptr noundef nonnull %125, ptr noundef null) #12
  %884 = icmp ugt i64 %883, 255
  br i1 %884, label %885, label %966

885:                                              ; preds = %882
  %886 = load ptr, ptr @PL_utf8_foldclosures, align 8, !tbaa !13
  %887 = icmp eq ptr %886, null
  br i1 %887, label %888, label %890

888:                                              ; preds = %885
  call void @Perl__load_PL_utf8_foldclosures() #12
  %889 = load ptr, ptr @PL_utf8_foldclosures, align 8, !tbaa !13
  br label %890

890:                                              ; preds = %888, %885
  %891 = phi ptr [ %889, %888 ], [ %886, %885 ]
  %892 = load i8, ptr %125, align 1, !tbaa !6
  %893 = zext i8 %892 to i64
  %894 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %893
  %895 = load i8, ptr %894, align 1, !tbaa !6
  %896 = zext i8 %895 to i32
  %897 = call ptr @Perl_hv_common_key_len(ptr noundef %891, ptr noundef nonnull %125, i32 noundef %896, i32 noundef 32, ptr noundef null, i32 noundef 0) #12
  %898 = icmp eq ptr %897, null
  br i1 %898, label %1009, label %899

899:                                              ; preds = %890
  %900 = load ptr, ptr %897, align 8, !tbaa !13
  %901 = getelementptr inbounds %struct.sv, ptr %900, i64 0, i32 2
  %902 = load i32, ptr %901, align 4, !tbaa !9
  %903 = and i32 %902, 8388608
  %904 = icmp eq i32 %903, 0
  br i1 %904, label %908, label %905

905:                                              ; preds = %899
  %906 = call i32 @Perl_mg_size(ptr noundef nonnull %900) #12
  %907 = sext i32 %906 to i64
  br label %912

908:                                              ; preds = %899
  %909 = load ptr, ptr %900, align 8, !tbaa !314
  %910 = getelementptr inbounds %struct.xpvav, ptr %909, i64 0, i32 2
  %911 = load i64, ptr %910, align 8, !tbaa !316
  br label %912

912:                                              ; preds = %905, %908
  %913 = phi i64 [ %907, %905 ], [ %911, %908 ]
  %914 = icmp eq i64 %913, 1
  br i1 %914, label %915, label %1008

915:                                              ; preds = %912
  %916 = call ptr @Perl_av_fetch(ptr noundef nonnull %900, i64 noundef 0, i32 noundef 0) #12
  %917 = icmp eq ptr %916, null
  br i1 %917, label %918, label %919

918:                                              ; preds = %915
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.21) #12
  br label %919

919:                                              ; preds = %918, %915
  %920 = load ptr, ptr %916, align 8, !tbaa !13
  %921 = getelementptr inbounds %struct.sv, ptr %920, i64 0, i32 2
  %922 = load i32, ptr %921, align 4, !tbaa !9
  %923 = and i32 %922, -2145386240
  %924 = icmp eq i32 %923, -2147483392
  br i1 %924, label %925, label %929

925:                                              ; preds = %919
  %926 = load ptr, ptr %920, align 8, !tbaa !24
  %927 = getelementptr inbounds %struct.xpvuv, ptr %926, i64 0, i32 4
  %928 = load i64, ptr %927, align 8, !tbaa !6
  br label %931

929:                                              ; preds = %919
  %930 = call i64 @Perl_sv_2uv_flags(ptr noundef nonnull %920, i32 noundef 2) #12
  br label %931

931:                                              ; preds = %929, %925
  %932 = phi i64 [ %928, %925 ], [ %930, %929 ]
  %933 = call ptr @Perl_av_fetch(ptr noundef nonnull %900, i64 noundef 1, i32 noundef 0) #12
  %934 = icmp eq ptr %933, null
  br i1 %934, label %935, label %936

935:                                              ; preds = %931
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.21) #12
  br label %936

936:                                              ; preds = %935, %931
  %937 = load ptr, ptr %933, align 8, !tbaa !13
  %938 = getelementptr inbounds %struct.sv, ptr %937, i64 0, i32 2
  %939 = load i32, ptr %938, align 4, !tbaa !9
  %940 = and i32 %939, -2145386240
  %941 = icmp eq i32 %940, -2147483392
  br i1 %941, label %942, label %946

942:                                              ; preds = %936
  %943 = load ptr, ptr %937, align 8, !tbaa !24
  %944 = getelementptr inbounds %struct.xpvuv, ptr %943, i64 0, i32 4
  %945 = load i64, ptr %944, align 8, !tbaa !6
  br label %948

946:                                              ; preds = %936
  %947 = call i64 @Perl_sv_2uv_flags(ptr noundef nonnull %937, i32 noundef 2) #12
  br label %948

948:                                              ; preds = %946, %942
  %949 = phi i64 [ %945, %942 ], [ %947, %946 ]
  %950 = icmp ult i64 %932, 256
  %951 = icmp ugt i64 %949, 255
  %952 = xor i1 %950, %951
  br i1 %952, label %1009, label %953

953:                                              ; preds = %948
  %954 = load i8, ptr %13, align 1, !tbaa !119
  %955 = icmp eq i8 %954, 34
  %956 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !97
  %957 = icmp eq i8 %956, 0
  %958 = select i1 %955, i1 %957, i1 false
  br i1 %958, label %964, label %959

959:                                              ; preds = %953
  switch i8 %954, label %1009 [
    i8 36, label %960
    i8 39, label %960
  ]

960:                                              ; preds = %959, %959
  %961 = icmp ult i64 %932, 128
  %962 = icmp ult i64 %949, 128
  %963 = or i1 %961, %962
  br i1 %963, label %964, label %1009

964:                                              ; preds = %953, %960
  %965 = select i1 %950, i64 %949, i64 %932
  br label %1009

966:                                              ; preds = %879, %882
  %967 = phi i64 [ %881, %879 ], [ %883, %882 ]
  br i1 %10, label %968, label %970

968:                                              ; preds = %966
  %969 = load i8, ptr %13, align 1, !tbaa !119
  br label %989

970:                                              ; preds = %966
  %971 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %967
  %972 = load i32, ptr %971, align 4, !tbaa !34
  %973 = and i32 %972, 262144
  %974 = icmp eq i32 %973, 0
  %975 = load i8, ptr %13, align 1, !tbaa !119
  br i1 %974, label %989, label %976

976:                                              ; preds = %970
  %977 = icmp eq i8 %975, 34
  %978 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !97
  %979 = icmp eq i8 %978, 0
  %980 = select i1 %977, i1 %979, i1 false
  br i1 %980, label %991, label %981

981:                                              ; preds = %976
  %982 = icmp eq i8 %975, 36
  br i1 %982, label %987, label %983

983:                                              ; preds = %981
  %984 = icmp eq i8 %975, 39
  %985 = icmp ult i64 %967, 128
  %986 = and i1 %985, %984
  br i1 %986, label %1000, label %1006

987:                                              ; preds = %981
  %988 = icmp ult i64 %967, 128
  br i1 %988, label %1000, label %1006

989:                                              ; preds = %968, %970
  %990 = phi i8 [ %969, %968 ], [ %975, %970 ]
  switch i8 %990, label %1004 [
    i8 34, label %991
    i8 33, label %995
    i8 39, label %1000
    i8 36, label %1000
    i8 37, label %1000
    i8 35, label %1000
  ]

991:                                              ; preds = %976, %989
  %992 = getelementptr inbounds [0 x i8], ptr @PL_fold_locale, i64 0, i64 %967
  %993 = load i8, ptr %992, align 1, !tbaa !6
  %994 = zext i8 %993 to i64
  br label %1009

995:                                              ; preds = %989
  br i1 %10, label %996, label %1000

996:                                              ; preds = %995
  %997 = getelementptr inbounds [0 x i8], ptr @PL_fold, i64 0, i64 %967
  %998 = load i8, ptr %997, align 1, !tbaa !6
  %999 = zext i8 %998 to i64
  br label %1049

1000:                                             ; preds = %987, %983, %989, %995, %989, %989, %989
  %1001 = getelementptr inbounds [0 x i8], ptr @PL_fold_latin1, i64 0, i64 %967
  %1002 = load i8, ptr %1001, align 1, !tbaa !6
  %1003 = zext i8 %1002 to i64
  br label %1009

1004:                                             ; preds = %989
  %1005 = zext i8 %990 to i32
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.22, i32 noundef %1005) #12
  br label %1009

1006:                                             ; preds = %983, %987
  %1007 = icmp eq i64 %967, 255
  br i1 %1007, label %1023, label %1008

1008:                                             ; preds = %912, %136, %147, %155, %163, %176, %184, %196, %204, %217, %229, %243, %248, %252, %263, %276, %281, %285, %296, %304, %315, %323, %323, %323, %323, %330, %346, %365, %377, %388, %396, %404, %417, %425, %437, %445, %458, %466, %470, %478, %489, %496, %500, %507, %511, %519, %530, %538, %538, %538, %538, %545, %561, %580, %592, %603, %611, %619, %632, %640, %652, %660, %673, %681, %685, %693, %704, %711, %715, %722, %726, %734, %745, %753, %753, %753, %753, %760, %772, %783, %791, %799, %812, %820, %828, %225, %292, %140, %140, %140, %167, %270, %381, %381, %381, %408, %596, %596, %596, %623, %776, %776, %776, %803, %836, %836, %836, %839, %854, %854, %854, %858, %869, %869, %869, %873, %1006
  store i32 -1000, ptr %1, align 4, !tbaa !34
  store i32 -1000, ptr %3, align 4, !tbaa !34
  br label %1056

1009:                                             ; preds = %18, %1004, %1000, %991, %890, %948, %960, %959, %964
  %1010 = phi i64 [ %965, %964 ], [ %949, %959 ], [ %949, %948 ], [ %949, %960 ], [ %883, %890 ], [ %994, %991 ], [ %1003, %1000 ], [ -998, %1004 ], [ %20, %18 ]
  %1011 = phi i64 [ %965, %964 ], [ %932, %959 ], [ %932, %948 ], [ %932, %960 ], [ %883, %890 ], [ %967, %991 ], [ %967, %1000 ], [ %967, %1004 ], [ %20, %18 ]
  br i1 %10, label %1041, label %1023

1012:                                             ; preds = %21
  %1013 = load i8, ptr %12, align 1, !tbaa !6
  %1014 = zext i8 %1013 to i64
  %1015 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1014
  %1016 = load i8, ptr %1015, align 1, !tbaa !6
  %1017 = zext i8 %1016 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %2, ptr nonnull align 1 %12, i64 %1017, i1 false)
  %1018 = load i8, ptr %12, align 1, !tbaa !6
  %1019 = zext i8 %1018 to i64
  %1020 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1019
  %1021 = load i8, ptr %1020, align 1, !tbaa !6
  %1022 = zext i8 %1021 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %4, ptr nonnull align 1 %12, i64 %1022, i1 false)
  br label %1028

1023:                                             ; preds = %1006, %1009
  %1024 = phi i64 [ %1010, %1009 ], [ 376, %1006 ]
  %1025 = phi i64 [ %1011, %1009 ], [ 255, %1006 ]
  %1026 = call ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef %2, i64 noundef %1025, i64 noundef 0) #12
  %1027 = call ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef %4, i64 noundef %1024, i64 noundef 0) #12
  br label %1028

1028:                                             ; preds = %1012, %1023
  %1029 = phi i64 [ %1025, %1023 ], [ -999, %1012 ]
  %1030 = phi i64 [ %1024, %1023 ], [ -998, %1012 ]
  %1031 = load i8, ptr %2, align 1, !tbaa !6
  %1032 = icmp sgt i8 %1031, -1
  %1033 = zext i8 %1031 to i32
  %1034 = select i1 %1032, i32 %1033, i32 -999
  store i32 %1034, ptr %1, align 4, !tbaa !34
  %1035 = load i8, ptr %4, align 1, !tbaa !6
  %1036 = zext i8 %1035 to i32
  %1037 = icmp eq i64 %1029, %1030
  %1038 = select i1 %1037, i32 -999, i32 -998
  %1039 = icmp slt i8 %1035, 0
  %1040 = select i1 %1039, i32 %1038, i32 %1036
  store i32 %1040, ptr %3, align 4, !tbaa !34
  br label %1056

1041:                                             ; preds = %22, %1009
  %1042 = phi i64 [ %1011, %1009 ], [ %23, %22 ]
  %1043 = phi i64 [ %1010, %1009 ], [ %23, %22 ]
  %1044 = icmp ugt i64 %1042, 255
  br i1 %1044, label %1045, label %1049

1045:                                             ; preds = %1041
  %1046 = icmp ugt i64 %1043, 255
  br i1 %1046, label %1056, label %1047

1047:                                             ; preds = %1045
  %1048 = trunc i64 %1043 to i32
  store i32 %1048, ptr %3, align 4, !tbaa !34
  store i32 %1048, ptr %1, align 4, !tbaa !34
  br label %1056

1049:                                             ; preds = %996, %1041
  %1050 = phi i64 [ %999, %996 ], [ %1043, %1041 ]
  %1051 = phi i64 [ %967, %996 ], [ %1042, %1041 ]
  %1052 = trunc i64 %1051 to i32
  store i32 %1052, ptr %1, align 4, !tbaa !34
  %1053 = icmp ult i64 %1050, 256
  %1054 = select i1 %1053, i64 %1050, i64 %1051
  %1055 = trunc i64 %1054 to i32
  store i32 %1055, ptr %3, align 4, !tbaa !34
  br label %1056

1056:                                             ; preds = %1008, %1047, %1049, %1028, %1045
  %1057 = phi i1 [ false, %1045 ], [ true, %1028 ], [ true, %1049 ], [ true, %1047 ], [ true, %1008 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %8) #12
  ret i1 %1057
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_regrepeat(ptr noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [14 x i8], align 1
  %9 = alloca [14 x i8], align 1
  %10 = alloca ptr, align 8
  %11 = alloca i8, align 1
  %12 = getelementptr inbounds %struct.regmatch_info, ptr %3, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !56
  %14 = getelementptr %struct.regmatch_info, ptr %3, i64 0, i32 14
  %15 = load i8, ptr %14, align 2, !tbaa !48, !range !97, !noundef !98
  %16 = icmp ne i8 %15, 0
  %17 = load ptr, ptr %1, align 8, !tbaa !13
  %18 = icmp eq i32 %4, 32767
  %19 = or i1 %18, %16
  %20 = select i1 %18, i32 2147483647, i32 %4
  %21 = ptrtoint ptr %13 to i64
  %22 = ptrtoint ptr %17 to i64
  %23 = sub i64 %21, %22
  %24 = sext i32 %4 to i64
  %25 = icmp sgt i64 %23, %24
  %26 = getelementptr inbounds i8, ptr %17, i64 %24
  %27 = select i1 %25, ptr %26, ptr %13
  %28 = select i1 %19, ptr %13, ptr %27
  %29 = ptrtoint ptr %28 to i64
  %30 = select i1 %19, i32 %20, i32 %4
  %31 = getelementptr inbounds %struct.regnode, ptr %2, i64 0, i32 1
  %32 = load i8, ptr %31, align 1, !tbaa !119
  switch i8 %32, label %982 [
    i8 16, label %33
    i8 17, label %65
    i8 18, label %83
    i8 32, label %89
    i8 31, label %89
    i8 39, label %194
    i8 36, label %194
    i8 34, label %186
    i8 33, label %187
    i8 38, label %188
    i8 37, label %189
    i8 35, label %189
    i8 20, label %307
    i8 19, label %307
    i8 26, label %354
    i8 22, label %355
    i8 21, label %394
    i8 24, label %395
    i8 25, label %424
    i8 28, label %425
    i8 27, label %474
    i8 23, label %475
    i8 91, label %895
    i8 9, label %991
    i8 13, label %991
    i8 8, label %991
    i8 11, label %991
    i8 10, label %991
    i8 6, label %991
    i8 7, label %991
    i8 90, label %991
    i8 12, label %991
    i8 15, label %991
    i8 14, label %991
    i8 82, label %991
    i8 2, label %991
    i8 4, label %991
  ]

33:                                               ; preds = %5
  br i1 %16, label %39, label %34

34:                                               ; preds = %33
  %35 = icmp ult ptr %17, %28
  br i1 %35, label %36, label %991

36:                                               ; preds = %34
  %37 = sub i64 %29, %22
  %38 = getelementptr i8, ptr %17, i64 %37
  br label %58

39:                                               ; preds = %33
  %40 = icmp ult ptr %17, %13
  %41 = icmp sgt i32 %20, 0
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %991

43:                                               ; preds = %39, %48
  %44 = phi ptr [ %53, %48 ], [ %17, %39 ]
  %45 = phi i32 [ %54, %48 ], [ 0, %39 ]
  %46 = load i8, ptr %44, align 1, !tbaa !6
  %47 = icmp eq i8 %46, 10
  br i1 %47, label %987, label %48

48:                                               ; preds = %43
  %49 = zext i8 %46 to i64
  %50 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !6
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds i8, ptr %44, i64 %52
  %54 = add nuw nsw i32 %45, 1
  %55 = icmp ult ptr %53, %28
  %56 = icmp slt i32 %54, %30
  %57 = select i1 %55, i1 %56, i1 false
  br i1 %57, label %43, label %998, !llvm.loop !368

58:                                               ; preds = %36, %62
  %59 = phi ptr [ %63, %62 ], [ %17, %36 ]
  %60 = load i8, ptr %59, align 1, !tbaa !6
  %61 = icmp eq i8 %60, 10
  br i1 %61, label %991, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, ptr %59, i64 1
  %64 = icmp eq ptr %63, %38
  br i1 %64, label %991, label %58, !llvm.loop !369

65:                                               ; preds = %5
  br i1 %16, label %66, label %991

66:                                               ; preds = %65
  %67 = icmp ult ptr %17, %13
  %68 = icmp sgt i32 %20, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %991

70:                                               ; preds = %66, %70
  %71 = phi ptr [ %78, %70 ], [ %17, %66 ]
  %72 = phi i32 [ %79, %70 ], [ 0, %66 ]
  %73 = load i8, ptr %71, align 1, !tbaa !6
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %74
  %76 = load i8, ptr %75, align 1, !tbaa !6
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds i8, ptr %71, i64 %77
  %79 = add nuw nsw i32 %72, 1
  %80 = icmp ult ptr %78, %28
  %81 = icmp slt i32 %79, %30
  %82 = select i1 %80, i1 %81, i1 false
  br i1 %82, label %70, label %998, !llvm.loop !370

83:                                               ; preds = %5
  br i1 %16, label %84, label %991

84:                                               ; preds = %83
  %85 = sext i32 %20 to i64
  %86 = icmp sgt i64 %23, %85
  %87 = getelementptr inbounds i8, ptr %17, i64 %85
  %88 = select i1 %86, ptr %87, ptr %13
  br label %991

89:                                               ; preds = %5, %5
  %90 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3
  %91 = load i8, ptr %90, align 2, !tbaa !6
  %92 = icmp sgt i8 %91, -1
  br i1 %92, label %98, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.regmatch_info, ptr %3, i64 0, i32 13
  %95 = load i8, ptr %94, align 1, !tbaa !51, !range !97, !noundef !98
  %96 = icmp eq i8 %95, 0
  br i1 %16, label %117, label %97

97:                                               ; preds = %93
  br i1 %96, label %98, label %142

98:                                               ; preds = %97, %89
  %99 = sub i64 %29, %22
  %100 = sext i32 %30 to i64
  %101 = icmp sgt i64 %99, %100
  %102 = getelementptr inbounds i8, ptr %17, i64 %100
  %103 = select i1 %16, i1 %101, i1 false
  %104 = select i1 %103, ptr %102, ptr %28
  %105 = icmp ult ptr %17, %104
  br i1 %105, label %106, label %991

106:                                              ; preds = %98
  %107 = ptrtoint ptr %104 to i64
  %108 = sub i64 %107, %22
  %109 = getelementptr i8, ptr %17, i64 %108
  br label %110

110:                                              ; preds = %106, %114
  %111 = phi ptr [ %115, %114 ], [ %17, %106 ]
  %112 = load i8, ptr %111, align 1, !tbaa !6
  %113 = icmp eq i8 %112, %91
  br i1 %113, label %114, label %991

114:                                              ; preds = %110
  %115 = getelementptr inbounds i8, ptr %111, i64 1
  %116 = icmp eq ptr %115, %109
  br i1 %116, label %991, label %110, !llvm.loop !371

117:                                              ; preds = %93
  br i1 %96, label %165, label %118

118:                                              ; preds = %117
  %119 = icmp sgt i32 %20, 0
  %120 = icmp ult ptr %17, %13
  %121 = select i1 %119, i1 %120, i1 false
  br i1 %121, label %122, label %991

122:                                              ; preds = %118
  %123 = load i8, ptr %2, align 2, !tbaa !135
  br label %124

124:                                              ; preds = %122, %136
  %125 = phi ptr [ %17, %122 ], [ %137, %136 ]
  %126 = phi i32 [ 0, %122 ], [ %138, %136 ]
  %127 = load i8, ptr %125, align 1, !tbaa !6
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %128
  %130 = load i8, ptr %129, align 1, !tbaa !6
  %131 = zext i8 %130 to i64
  %132 = icmp ugt i8 %130, %123
  br i1 %132, label %987, label %133

133:                                              ; preds = %124
  %134 = tail call i32 @bcmp(ptr nonnull %125, ptr nonnull %90, i64 %131)
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %987

136:                                              ; preds = %133
  %137 = getelementptr inbounds i8, ptr %125, i64 %131
  %138 = add nuw nsw i32 %126, 1
  %139 = icmp slt i32 %138, %30
  %140 = icmp ult ptr %137, %28
  %141 = select i1 %139, i1 %140, i1 false
  br i1 %141, label %124, label %998, !llvm.loop !372

142:                                              ; preds = %97
  %143 = icmp ugt i8 %91, -61
  br i1 %143, label %991, label %144

144:                                              ; preds = %142
  %145 = and i8 %91, 31
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 6
  %148 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3, i64 1
  %149 = load i8, ptr %148, align 1, !tbaa !6
  %150 = and i8 %149, 63
  %151 = zext i8 %150 to i32
  %152 = or i32 %147, %151
  %153 = icmp ult ptr %17, %28
  br i1 %153, label %154, label %991

154:                                              ; preds = %144
  %155 = sub i64 %29, %22
  %156 = getelementptr i8, ptr %17, i64 %155
  br label %157

157:                                              ; preds = %154, %162
  %158 = phi ptr [ %163, %162 ], [ %17, %154 ]
  %159 = load i8, ptr %158, align 1, !tbaa !6
  %160 = zext i8 %159 to i32
  %161 = icmp eq i32 %152, %160
  br i1 %161, label %162, label %991

162:                                              ; preds = %157
  %163 = getelementptr inbounds i8, ptr %158, i64 1
  %164 = icmp eq ptr %163, %156
  br i1 %164, label %991, label %157, !llvm.loop !373

165:                                              ; preds = %117
  %166 = lshr i8 %91, 6
  %167 = or i8 %166, -64
  %168 = and i8 %91, 63
  %169 = or i8 %168, -128
  %170 = icmp sgt i32 %20, 0
  br i1 %170, label %171, label %991

171:                                              ; preds = %165, %182
  %172 = phi ptr [ %183, %182 ], [ %17, %165 ]
  %173 = phi i32 [ %184, %182 ], [ 0, %165 ]
  %174 = getelementptr inbounds i8, ptr %172, i64 1
  %175 = icmp ult ptr %174, %28
  br i1 %175, label %176, label %987

176:                                              ; preds = %171
  %177 = load i8, ptr %172, align 1, !tbaa !6
  %178 = icmp eq i8 %177, %167
  br i1 %178, label %179, label %987

179:                                              ; preds = %176
  %180 = load i8, ptr %174, align 1, !tbaa !6
  %181 = icmp eq i8 %180, %169
  br i1 %181, label %182, label %987

182:                                              ; preds = %179
  %183 = getelementptr inbounds i8, ptr %172, i64 2
  %184 = add nuw nsw i32 %173, 1
  %185 = icmp eq i32 %184, %30
  br i1 %185, label %987, label %171, !llvm.loop !374

186:                                              ; preds = %5
  br label %194

187:                                              ; preds = %5
  br label %194

188:                                              ; preds = %5
  br i1 %16, label %194, label %991

189:                                              ; preds = %5, %5
  %190 = getelementptr inbounds %struct.regmatch_info, ptr %3, i64 0, i32 13
  %191 = load i8, ptr %190, align 1, !tbaa !51, !range !97, !noundef !98
  %192 = icmp eq i8 %191, 0
  %193 = select i1 %192, i32 0, i32 8
  br label %194

194:                                              ; preds = %188, %5, %5, %189, %187, %186
  %195 = phi i32 [ %193, %189 ], [ 0, %187 ], [ 2, %186 ], [ 1, %5 ], [ 1, %5 ], [ 42, %188 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #12
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #12
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %8) #12
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %9) #12
  %196 = getelementptr i8, ptr %3, i64 89
  %197 = load i8, ptr %196, align 1, !tbaa !51, !range !97, !noundef !98
  %198 = call fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef nonnull %2, ptr noundef nonnull %6, ptr noundef nonnull %8, ptr noundef nonnull %7, ptr noundef nonnull %9, i8 %197, i8 %15)
  br i1 %198, label %199, label %304

199:                                              ; preds = %194
  %200 = load i32, ptr %6, align 4, !tbaa !34
  %201 = icmp eq i32 %200, -1000
  br i1 %201, label %202, label %232

202:                                              ; preds = %199
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #12
  %203 = load ptr, ptr %12, align 8, !tbaa !56
  store ptr %203, ptr %10, align 8, !tbaa !13
  %204 = load i8, ptr %196, align 1, !tbaa !51, !range !97, !noundef !98
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %213, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3
  %208 = load i8, ptr %207, align 2, !tbaa !6
  %209 = zext i8 %208 to i64
  %210 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %209
  %211 = load i8, ptr %210, align 1, !tbaa !6
  %212 = zext i8 %211 to i64
  br label %213

213:                                              ; preds = %202, %206
  %214 = phi i64 [ %212, %206 ], [ 1, %202 ]
  %215 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3
  %216 = icmp sgt i32 %30, 0
  br i1 %216, label %217, label %229

217:                                              ; preds = %213, %224
  %218 = phi ptr [ %225, %224 ], [ %17, %213 ]
  %219 = phi i32 [ %227, %224 ], [ 0, %213 ]
  %220 = load i8, ptr %196, align 1, !tbaa !51, !range !97, !noundef !98
  %221 = icmp ne i8 %220, 0
  %222 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef %218, ptr noundef nonnull %10, i64 noundef 0, i1 noundef zeroext %16, ptr noundef nonnull %215, ptr noundef null, i64 noundef %214, i1 noundef zeroext %221, i32 noundef %195) #12
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %229, label %224

224:                                              ; preds = %217
  %225 = load ptr, ptr %10, align 8, !tbaa !13
  %226 = load ptr, ptr %12, align 8, !tbaa !56
  store ptr %226, ptr %10, align 8, !tbaa !13
  %227 = add nuw nsw i32 %219, 1
  %228 = icmp eq i32 %227, %30
  br i1 %228, label %229, label %217, !llvm.loop !375

229:                                              ; preds = %217, %224, %213
  %230 = phi i32 [ 0, %213 ], [ %30, %224 ], [ %219, %217 ]
  %231 = phi ptr [ %17, %213 ], [ %225, %224 ], [ %218, %217 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #12
  br label %304

232:                                              ; preds = %199
  %233 = load i32, ptr %7, align 4
  %234 = icmp eq i32 %200, %233
  br i1 %16, label %235, label %276

235:                                              ; preds = %232
  %236 = icmp ult ptr %17, %13
  %237 = icmp sgt i32 %20, 0
  %238 = and i1 %236, %237
  br i1 %234, label %240, label %239

239:                                              ; preds = %235
  br i1 %238, label %257, label %304

240:                                              ; preds = %235
  br i1 %238, label %241, label %304

241:                                              ; preds = %240, %251
  %242 = phi ptr [ %252, %251 ], [ %17, %240 ]
  %243 = phi i32 [ %253, %251 ], [ 0, %240 ]
  %244 = load i8, ptr %242, align 1, !tbaa !6
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %245
  %247 = load i8, ptr %246, align 1, !tbaa !6
  %248 = zext i8 %247 to i64
  %249 = call i32 @bcmp(ptr nonnull %242, ptr nonnull %8, i64 %248)
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %304

251:                                              ; preds = %241
  %252 = getelementptr inbounds i8, ptr %242, i64 %248
  %253 = add nuw nsw i32 %243, 1
  %254 = icmp ult ptr %252, %28
  %255 = icmp slt i32 %253, %30
  %256 = select i1 %254, i1 %255, i1 false
  br i1 %256, label %241, label %304, !llvm.loop !376

257:                                              ; preds = %239, %270
  %258 = phi ptr [ %271, %270 ], [ %17, %239 ]
  %259 = phi i32 [ %272, %270 ], [ 0, %239 ]
  %260 = load i8, ptr %258, align 1, !tbaa !6
  %261 = zext i8 %260 to i64
  %262 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %261
  %263 = load i8, ptr %262, align 1, !tbaa !6
  %264 = zext i8 %263 to i64
  %265 = call i32 @bcmp(ptr nonnull %258, ptr nonnull %8, i64 %264)
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %270, label %267

267:                                              ; preds = %257
  %268 = call i32 @bcmp(ptr nonnull %258, ptr nonnull %9, i64 %264)
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %304

270:                                              ; preds = %257, %267
  %271 = getelementptr inbounds i8, ptr %258, i64 %264
  %272 = add nuw nsw i32 %259, 1
  %273 = icmp ult ptr %271, %28
  %274 = icmp slt i32 %272, %30
  %275 = select i1 %273, i1 %274, i1 false
  br i1 %275, label %257, label %304, !llvm.loop !377

276:                                              ; preds = %232
  %277 = icmp ult ptr %17, %28
  br i1 %234, label %282, label %278

278:                                              ; preds = %276
  br i1 %277, label %279, label %304

279:                                              ; preds = %278
  %280 = sub i64 %29, %22
  %281 = getelementptr i8, ptr %17, i64 %280
  br label %294

282:                                              ; preds = %276
  br i1 %277, label %283, label %304

283:                                              ; preds = %282
  %284 = sub i64 %29, %22
  %285 = getelementptr i8, ptr %17, i64 %284
  br label %286

286:                                              ; preds = %283, %291
  %287 = phi ptr [ %292, %291 ], [ %17, %283 ]
  %288 = load i8, ptr %287, align 1, !tbaa !6
  %289 = zext i8 %288 to i32
  %290 = icmp eq i32 %200, %289
  br i1 %290, label %291, label %304

291:                                              ; preds = %286
  %292 = getelementptr inbounds i8, ptr %287, i64 1
  %293 = icmp eq ptr %292, %285
  br i1 %293, label %304, label %286, !llvm.loop !378

294:                                              ; preds = %279, %301
  %295 = phi ptr [ %302, %301 ], [ %17, %279 ]
  %296 = load i8, ptr %295, align 1, !tbaa !6
  %297 = zext i8 %296 to i32
  %298 = icmp eq i32 %200, %297
  %299 = icmp eq i32 %233, %297
  %300 = or i1 %298, %299
  br i1 %300, label %301, label %304

301:                                              ; preds = %294
  %302 = getelementptr inbounds i8, ptr %295, i64 1
  %303 = icmp eq ptr %302, %281
  br i1 %303, label %304, label %294, !llvm.loop !379

304:                                              ; preds = %301, %294, %286, %291, %267, %270, %241, %251, %278, %282, %239, %240, %229, %194
  %305 = phi i32 [ %230, %229 ], [ 0, %194 ], [ 0, %240 ], [ 0, %239 ], [ 0, %282 ], [ 0, %278 ], [ %243, %241 ], [ %253, %251 ], [ %259, %267 ], [ %272, %270 ], [ 0, %291 ], [ 0, %286 ], [ 0, %294 ], [ 0, %301 ]
  %306 = phi ptr [ %231, %229 ], [ %17, %194 ], [ %17, %240 ], [ %17, %239 ], [ %17, %282 ], [ %17, %278 ], [ %242, %241 ], [ %252, %251 ], [ %258, %267 ], [ %271, %270 ], [ %287, %286 ], [ %285, %291 ], [ %281, %301 ], [ %295, %294 ]
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %9) #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %8) #12
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #12
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #12
  br label %987

307:                                              ; preds = %5, %5
  br i1 %16, label %310, label %308

308:                                              ; preds = %307
  %309 = icmp ult ptr %17, %28
  br i1 %309, label %329, label %991

310:                                              ; preds = %307
  %311 = icmp sgt i32 %20, 0
  %312 = icmp ult ptr %17, %13
  %313 = select i1 %311, i1 %312, i1 false
  br i1 %313, label %314, label %991

314:                                              ; preds = %310, %318
  %315 = phi ptr [ %324, %318 ], [ %17, %310 ]
  %316 = phi i32 [ %325, %318 ], [ 0, %310 ]
  %317 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef %2, ptr noundef %315, ptr noundef nonnull %28, i1 noundef zeroext true)
  br i1 %317, label %318, label %987

318:                                              ; preds = %314
  %319 = load i8, ptr %315, align 1, !tbaa !6
  %320 = zext i8 %319 to i64
  %321 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %320
  %322 = load i8, ptr %321, align 1, !tbaa !6
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds i8, ptr %315, i64 %323
  %325 = add nuw nsw i32 %316, 1
  %326 = icmp slt i32 %325, %30
  %327 = icmp ult ptr %324, %28
  %328 = select i1 %326, i1 %327, i1 false
  br i1 %328, label %314, label %998, !llvm.loop !380

329:                                              ; preds = %308, %351
  %330 = phi ptr [ %352, %351 ], [ %17, %308 ]
  %331 = load i8, ptr %2, align 2, !tbaa !139
  %332 = icmp eq i8 %331, 0
  br i1 %332, label %337, label %333

333:                                              ; preds = %329
  %334 = getelementptr inbounds i8, ptr %330, i64 1
  %335 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef nonnull %2, ptr noundef %330, ptr noundef nonnull %334, i1 noundef zeroext false)
  %336 = zext i1 %335 to i32
  br label %348

337:                                              ; preds = %329
  %338 = load i8, ptr %330, align 1, !tbaa !6
  %339 = zext i8 %338 to i32
  %340 = lshr i32 %339, 3
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %struct.regnode_charclass, ptr %2, i64 0, i32 4, i64 %341
  %343 = load i8, ptr %342, align 1, !tbaa !6
  %344 = sext i8 %343 to i32
  %345 = and i32 %339, 7
  %346 = lshr i32 %344, %345
  %347 = and i32 %346, 1
  br label %348

348:                                              ; preds = %337, %333
  %349 = phi i32 [ %336, %333 ], [ %347, %337 ]
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %991, label %351

351:                                              ; preds = %348
  %352 = getelementptr inbounds i8, ptr %330, i64 1
  %353 = icmp ult ptr %352, %28
  br i1 %353, label %329, label %991, !llvm.loop !381

354:                                              ; preds = %5
  br label %355

355:                                              ; preds = %5, %354
  %356 = phi i32 [ 0, %5 ], [ 1, %354 ]
  br i1 %16, label %362, label %357

357:                                              ; preds = %355
  %358 = icmp ult ptr %17, %28
  br i1 %358, label %359, label %991

359:                                              ; preds = %357
  %360 = sub i64 %29, %22
  %361 = getelementptr i8, ptr %17, i64 %360
  br label %366

362:                                              ; preds = %355
  %363 = icmp sgt i32 %20, 0
  %364 = icmp ult ptr %17, %13
  %365 = select i1 %363, i1 %364, i1 false
  br i1 %365, label %376, label %991

366:                                              ; preds = %359, %373
  %367 = phi ptr [ %374, %373 ], [ %17, %359 ]
  %368 = load i8, ptr %2, align 2, !tbaa !139
  %369 = load i8, ptr %367, align 1, !tbaa !6
  %370 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %368, i8 noundef zeroext %369)
  %371 = zext i1 %370 to i32
  %372 = icmp eq i32 %356, %371
  br i1 %372, label %991, label %373

373:                                              ; preds = %366
  %374 = getelementptr inbounds i8, ptr %367, i64 1
  %375 = icmp eq ptr %374, %361
  br i1 %375, label %991, label %366, !llvm.loop !382

376:                                              ; preds = %362, %383
  %377 = phi ptr [ %389, %383 ], [ %17, %362 ]
  %378 = phi i32 [ %390, %383 ], [ 0, %362 ]
  %379 = load i8, ptr %2, align 2, !tbaa !139
  %380 = tail call fastcc zeroext i1 @S_isFOO_utf8_lc(i8 noundef zeroext %379, ptr noundef %377)
  %381 = zext i1 %380 to i32
  %382 = icmp eq i32 %356, %381
  br i1 %382, label %987, label %383

383:                                              ; preds = %376
  %384 = load i8, ptr %377, align 1, !tbaa !6
  %385 = zext i8 %384 to i64
  %386 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %385
  %387 = load i8, ptr %386, align 1, !tbaa !6
  %388 = zext i8 %387 to i64
  %389 = getelementptr inbounds i8, ptr %377, i64 %388
  %390 = add nuw nsw i32 %378, 1
  %391 = icmp slt i32 %390, %30
  %392 = icmp ult ptr %389, %28
  %393 = select i1 %391, i1 %392, i1 false
  br i1 %393, label %376, label %998, !llvm.loop !383

394:                                              ; preds = %5
  br i1 %16, label %496, label %402

395:                                              ; preds = %5
  br i1 %16, label %396, label %402

396:                                              ; preds = %395
  %397 = sext i32 %20 to i64
  %398 = icmp sgt i64 %23, %397
  %399 = getelementptr inbounds i8, ptr %17, i64 %397
  %400 = select i1 %398, ptr %399, ptr %13
  %401 = ptrtoint ptr %400 to i64
  br label %402

402:                                              ; preds = %396, %394, %395
  %403 = phi i64 [ %401, %396 ], [ %29, %394 ], [ %29, %395 ]
  %404 = phi ptr [ %400, %396 ], [ %28, %394 ], [ %28, %395 ]
  %405 = icmp ult ptr %17, %404
  br i1 %405, label %406, label %991

406:                                              ; preds = %402
  %407 = load i8, ptr %2, align 2, !tbaa !139
  %408 = zext i8 %407 to i32
  %409 = shl nuw i32 1, %408
  %410 = or i32 %409, 16384
  %411 = sub i64 %403, %22
  %412 = getelementptr i8, ptr %17, i64 %411
  br label %413

413:                                              ; preds = %406, %421
  %414 = phi ptr [ %17, %406 ], [ %422, %421 ]
  %415 = load i8, ptr %414, align 1, !tbaa !6
  %416 = zext i8 %415 to i64
  %417 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %416
  %418 = load i32, ptr %417, align 4, !tbaa !34
  %419 = and i32 %410, %418
  %420 = icmp eq i32 %419, %410
  br i1 %420, label %421, label %991

421:                                              ; preds = %413
  %422 = getelementptr inbounds i8, ptr %414, i64 1
  %423 = icmp eq ptr %422, %412
  br i1 %423, label %991, label %413, !llvm.loop !384

424:                                              ; preds = %5
  br i1 %16, label %496, label %430

425:                                              ; preds = %5
  br i1 %16, label %426, label %430

426:                                              ; preds = %425
  %427 = icmp sgt i32 %20, 0
  %428 = icmp ult ptr %17, %13
  %429 = select i1 %427, i1 %428, i1 false
  br i1 %429, label %450, label %991

430:                                              ; preds = %425, %424
  %431 = icmp ult ptr %17, %28
  br i1 %431, label %432, label %991

432:                                              ; preds = %430
  %433 = load i8, ptr %2, align 2, !tbaa !139
  %434 = zext i8 %433 to i32
  %435 = shl nuw i32 1, %434
  %436 = or i32 %435, 16384
  %437 = sub i64 %29, %22
  %438 = getelementptr i8, ptr %17, i64 %437
  br label %439

439:                                              ; preds = %432, %447
  %440 = phi ptr [ %17, %432 ], [ %448, %447 ]
  %441 = load i8, ptr %440, align 1, !tbaa !6
  %442 = zext i8 %441 to i64
  %443 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %442
  %444 = load i32, ptr %443, align 4, !tbaa !34
  %445 = and i32 %436, %444
  %446 = icmp eq i32 %445, %436
  br i1 %446, label %991, label %447

447:                                              ; preds = %439
  %448 = getelementptr inbounds i8, ptr %440, i64 1
  %449 = icmp eq ptr %448, %438
  br i1 %449, label %991, label %439, !llvm.loop !385

450:                                              ; preds = %426, %465
  %451 = phi ptr [ %469, %465 ], [ %17, %426 ]
  %452 = phi i32 [ %470, %465 ], [ 0, %426 ]
  %453 = load i8, ptr %451, align 1, !tbaa !6
  %454 = icmp sgt i8 %453, -1
  %455 = zext i8 %453 to i64
  br i1 %454, label %456, label %465

456:                                              ; preds = %450
  %457 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %455
  %458 = load i32, ptr %457, align 4, !tbaa !34
  %459 = load i8, ptr %2, align 2, !tbaa !139
  %460 = zext i8 %459 to i32
  %461 = shl nuw i32 1, %460
  %462 = or i32 %461, 16384
  %463 = and i32 %462, %458
  %464 = icmp eq i32 %463, %462
  br i1 %464, label %987, label %465

465:                                              ; preds = %450, %456
  %466 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %455
  %467 = load i8, ptr %466, align 1, !tbaa !6
  %468 = zext i8 %467 to i64
  %469 = getelementptr inbounds i8, ptr %451, i64 %468
  %470 = add nuw nsw i32 %452, 1
  %471 = icmp slt i32 %470, %30
  %472 = icmp ult ptr %469, %28
  %473 = select i1 %471, i1 %472, i1 false
  br i1 %473, label %450, label %998, !llvm.loop !386

474:                                              ; preds = %5
  br label %475

475:                                              ; preds = %5, %474
  %476 = phi i32 [ 0, %5 ], [ 1, %474 ]
  br i1 %16, label %496, label %477

477:                                              ; preds = %475
  %478 = icmp ult ptr %17, %28
  br i1 %478, label %479, label %991

479:                                              ; preds = %477
  %480 = load i8, ptr %2, align 2, !tbaa !139
  %481 = zext i8 %480 to i32
  %482 = sub i64 %29, %22
  %483 = getelementptr i8, ptr %17, i64 %482
  br label %484

484:                                              ; preds = %479, %493
  %485 = phi ptr [ %17, %479 ], [ %494, %493 ]
  %486 = load i8, ptr %485, align 1, !tbaa !6
  %487 = zext i8 %486 to i64
  %488 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %487
  %489 = load i32, ptr %488, align 4, !tbaa !34
  %490 = lshr i32 %489, %481
  %491 = and i32 %490, 1
  %492 = icmp eq i32 %476, %491
  br i1 %492, label %991, label %493

493:                                              ; preds = %484
  %494 = getelementptr inbounds i8, ptr %485, i64 1
  %495 = icmp eq ptr %494, %483
  br i1 %495, label %991, label %484, !llvm.loop !387

496:                                              ; preds = %424, %475, %394
  %497 = phi i32 [ %476, %475 ], [ 0, %394 ], [ 1, %424 ]
  %498 = load i8, ptr %2, align 2, !tbaa !139
  %499 = zext i8 %498 to i32
  %500 = icmp ult i8 %498, 10
  br i1 %500, label %501, label %539

501:                                              ; preds = %496
  %502 = icmp sgt i32 %20, 0
  %503 = icmp ult ptr %17, %13
  %504 = select i1 %502, i1 %503, i1 false
  br i1 %504, label %505, label %991

505:                                              ; preds = %501, %532
  %506 = phi ptr [ %534, %532 ], [ %17, %501 ]
  %507 = phi i32 [ %535, %532 ], [ 0, %501 ]
  %508 = load i8, ptr %506, align 1, !tbaa !6
  %509 = icmp sgt i8 %508, -1
  br i1 %509, label %510, label %517

510:                                              ; preds = %505
  %511 = zext i8 %508 to i64
  %512 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %511
  %513 = load i32, ptr %512, align 4, !tbaa !34
  %514 = lshr i32 %513, %499
  %515 = and i32 %514, 1
  %516 = icmp eq i32 %497, %515
  br i1 %516, label %987, label %532

517:                                              ; preds = %505
  %518 = and i8 %508, -2
  %519 = icmp eq i8 %518, -62
  br i1 %519, label %520, label %834

520:                                              ; preds = %517
  %521 = shl i8 %508, 6
  %522 = getelementptr inbounds i8, ptr %506, i64 1
  %523 = load i8, ptr %522, align 1, !tbaa !6
  %524 = and i8 %523, 63
  %525 = or i8 %524, %521
  %526 = zext i8 %525 to i64
  %527 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %526
  %528 = load i32, ptr %527, align 4, !tbaa !34
  %529 = lshr i32 %528, %499
  %530 = and i32 %529, 1
  %531 = icmp eq i32 %497, %530
  br i1 %531, label %987, label %532

532:                                              ; preds = %520, %510
  %533 = phi i64 [ 1, %510 ], [ 2, %520 ]
  %534 = getelementptr inbounds i8, ptr %506, i64 %533
  %535 = add nuw nsw i32 %507, 1
  %536 = icmp slt i32 %535, %30
  %537 = icmp ult ptr %534, %28
  %538 = select i1 %536, i1 %537, i1 false
  br i1 %538, label %505, label %998, !llvm.loop !388

539:                                              ; preds = %496
  switch i8 %498, label %829 [
    i8 10, label %556
    i8 11, label %552
    i8 12, label %548
    i8 15, label %544
    i8 13, label %540
  ]

540:                                              ; preds = %539
  %541 = icmp sgt i32 %20, 0
  %542 = icmp ult ptr %17, %13
  %543 = select i1 %541, i1 %542, i1 false
  br i1 %543, label %794, label %991

544:                                              ; preds = %539
  %545 = icmp sgt i32 %20, 0
  %546 = icmp ult ptr %17, %13
  %547 = select i1 %545, i1 %546, i1 false
  br i1 %547, label %744, label %991

548:                                              ; preds = %539
  %549 = icmp sgt i32 %20, 0
  %550 = icmp ult ptr %17, %13
  %551 = select i1 %549, i1 %550, i1 false
  br i1 %551, label %701, label %991

552:                                              ; preds = %539
  %553 = icmp sgt i32 %20, 0
  %554 = icmp ult ptr %17, %13
  %555 = select i1 %553, i1 %554, i1 false
  br i1 %555, label %632, label %991

556:                                              ; preds = %539
  %557 = icmp sgt i32 %20, 0
  %558 = icmp ult ptr %17, %13
  %559 = select i1 %557, i1 %558, i1 false
  br i1 %559, label %560, label %991

560:                                              ; preds = %556, %622
  %561 = phi ptr [ %627, %622 ], [ %17, %556 ]
  %562 = phi i32 [ %628, %622 ], [ 0, %556 ]
  %563 = load i8, ptr %561, align 1, !tbaa !6
  %564 = icmp sgt i8 %563, -1
  br i1 %564, label %565, label %571

565:                                              ; preds = %560
  %566 = zext i8 %563 to i64
  %567 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %566
  %568 = load i32, ptr %567, align 4, !tbaa !34
  %569 = and i32 %568, 1024
  %570 = icmp ne i32 %569, 0
  br label %618

571:                                              ; preds = %560
  %572 = and i8 %563, -2
  %573 = icmp eq i8 %572, -62
  br i1 %573, label %574, label %585

574:                                              ; preds = %571
  %575 = shl i8 %563, 6
  %576 = getelementptr inbounds i8, ptr %561, i64 1
  %577 = load i8, ptr %576, align 1, !tbaa !6
  %578 = and i8 %577, 63
  %579 = or i8 %578, %575
  %580 = zext i8 %579 to i64
  %581 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %580
  %582 = load i32, ptr %581, align 4, !tbaa !34
  %583 = and i32 %582, 1024
  %584 = icmp ne i32 %583, 0
  br label %618

585:                                              ; preds = %571
  switch i8 %563, label %618 [
    i8 -31, label %586
    i8 -30, label %594
    i8 -29, label %610
  ]

586:                                              ; preds = %585
  %587 = getelementptr inbounds i8, ptr %561, i64 1
  %588 = load i8, ptr %587, align 1, !tbaa !6
  %589 = icmp eq i8 %588, -102
  br i1 %589, label %590, label %618

590:                                              ; preds = %586
  %591 = getelementptr inbounds i8, ptr %561, i64 2
  %592 = load i8, ptr %591, align 1, !tbaa !6
  %593 = icmp eq i8 %592, -128
  br label %618

594:                                              ; preds = %585
  %595 = getelementptr inbounds i8, ptr %561, i64 1
  %596 = load i8, ptr %595, align 1, !tbaa !6
  switch i8 %596, label %618 [
    i8 -128, label %597
    i8 -127, label %606
  ]

597:                                              ; preds = %594
  %598 = getelementptr inbounds i8, ptr %561, i64 2
  %599 = load i8, ptr %598, align 1, !tbaa !6
  %600 = icmp ult i8 %599, -117
  %601 = and i8 %599, -2
  %602 = icmp eq i8 %601, -88
  %603 = or i1 %600, %602
  %604 = icmp eq i8 %599, -81
  %605 = or i1 %604, %603
  br label %618

606:                                              ; preds = %594
  %607 = getelementptr inbounds i8, ptr %561, i64 2
  %608 = load i8, ptr %607, align 1, !tbaa !6
  %609 = icmp eq i8 %608, -97
  br label %618

610:                                              ; preds = %585
  %611 = getelementptr inbounds i8, ptr %561, i64 1
  %612 = load i8, ptr %611, align 1, !tbaa !6
  %613 = icmp eq i8 %612, -128
  br i1 %613, label %614, label %618

614:                                              ; preds = %610
  %615 = getelementptr inbounds i8, ptr %561, i64 2
  %616 = load i8, ptr %615, align 1, !tbaa !6
  %617 = icmp eq i8 %616, -128
  br label %618

618:                                              ; preds = %597, %610, %614, %585, %606, %594, %586, %590, %574, %565
  %619 = phi i1 [ %570, %565 ], [ %584, %574 ], [ false, %586 ], [ %593, %590 ], [ %609, %606 ], [ false, %594 ], [ false, %610 ], [ %617, %614 ], [ false, %585 ], [ %605, %597 ]
  %620 = zext i1 %619 to i32
  %621 = icmp eq i32 %497, %620
  br i1 %621, label %987, label %622

622:                                              ; preds = %618
  %623 = zext i8 %563 to i64
  %624 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %623
  %625 = load i8, ptr %624, align 1, !tbaa !6
  %626 = zext i8 %625 to i64
  %627 = getelementptr inbounds i8, ptr %561, i64 %626
  %628 = add nuw nsw i32 %562, 1
  %629 = icmp slt i32 %628, %30
  %630 = icmp ult ptr %627, %28
  %631 = select i1 %629, i1 %630, i1 false
  br i1 %631, label %560, label %998, !llvm.loop !389

632:                                              ; preds = %552, %691
  %633 = phi ptr [ %696, %691 ], [ %17, %552 ]
  %634 = phi i32 [ %697, %691 ], [ 0, %552 ]
  %635 = load i8, ptr %633, align 1, !tbaa !6
  %636 = icmp sgt i8 %635, -1
  br i1 %636, label %637, label %643

637:                                              ; preds = %632
  %638 = zext i8 %635 to i64
  %639 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %638
  %640 = load i32, ptr %639, align 4, !tbaa !34
  %641 = and i32 %640, 2048
  %642 = icmp ne i32 %641, 0
  br label %687

643:                                              ; preds = %632
  %644 = and i8 %635, -2
  %645 = icmp eq i8 %644, -62
  br i1 %645, label %646, label %657

646:                                              ; preds = %643
  %647 = shl i8 %635, 6
  %648 = getelementptr inbounds i8, ptr %633, i64 1
  %649 = load i8, ptr %648, align 1, !tbaa !6
  %650 = and i8 %649, 63
  %651 = or i8 %650, %647
  %652 = zext i8 %651 to i64
  %653 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %652
  %654 = load i32, ptr %653, align 4, !tbaa !34
  %655 = and i32 %654, 2048
  %656 = icmp ne i32 %655, 0
  br label %687

657:                                              ; preds = %643
  switch i8 %635, label %687 [
    i8 -31, label %658
    i8 -30, label %666
    i8 -29, label %679
  ]

658:                                              ; preds = %657
  %659 = getelementptr inbounds i8, ptr %633, i64 1
  %660 = load i8, ptr %659, align 1, !tbaa !6
  %661 = icmp eq i8 %660, -102
  br i1 %661, label %662, label %687

662:                                              ; preds = %658
  %663 = getelementptr inbounds i8, ptr %633, i64 2
  %664 = load i8, ptr %663, align 1, !tbaa !6
  %665 = icmp eq i8 %664, -128
  br label %687

666:                                              ; preds = %657
  %667 = getelementptr inbounds i8, ptr %633, i64 1
  %668 = load i8, ptr %667, align 1, !tbaa !6
  switch i8 %668, label %687 [
    i8 -128, label %669
    i8 -127, label %675
  ]

669:                                              ; preds = %666
  %670 = getelementptr inbounds i8, ptr %633, i64 2
  %671 = load i8, ptr %670, align 1, !tbaa !6
  %672 = icmp ult i8 %671, -117
  %673 = icmp eq i8 %671, -81
  %674 = or i1 %672, %673
  br label %687

675:                                              ; preds = %666
  %676 = getelementptr inbounds i8, ptr %633, i64 2
  %677 = load i8, ptr %676, align 1, !tbaa !6
  %678 = icmp eq i8 %677, -97
  br label %687

679:                                              ; preds = %657
  %680 = getelementptr inbounds i8, ptr %633, i64 1
  %681 = load i8, ptr %680, align 1, !tbaa !6
  %682 = icmp eq i8 %681, -128
  br i1 %682, label %683, label %687

683:                                              ; preds = %679
  %684 = getelementptr inbounds i8, ptr %633, i64 2
  %685 = load i8, ptr %684, align 1, !tbaa !6
  %686 = icmp eq i8 %685, -128
  br label %687

687:                                              ; preds = %679, %683, %657, %675, %666, %658, %662, %646, %669, %637
  %688 = phi i1 [ %642, %637 ], [ %674, %669 ], [ %656, %646 ], [ false, %658 ], [ %665, %662 ], [ %678, %675 ], [ false, %666 ], [ false, %679 ], [ %686, %683 ], [ false, %657 ]
  %689 = zext i1 %688 to i32
  %690 = icmp eq i32 %497, %689
  br i1 %690, label %987, label %691

691:                                              ; preds = %687
  %692 = zext i8 %635 to i64
  %693 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %692
  %694 = load i8, ptr %693, align 1, !tbaa !6
  %695 = zext i8 %694 to i64
  %696 = getelementptr inbounds i8, ptr %633, i64 %695
  %697 = add nuw nsw i32 %634, 1
  %698 = icmp slt i32 %697, %30
  %699 = icmp ult ptr %696, %28
  %700 = select i1 %698, i1 %699, i1 false
  br i1 %700, label %632, label %998, !llvm.loop !390

701:                                              ; preds = %548, %734
  %702 = phi ptr [ %739, %734 ], [ %17, %548 ]
  %703 = phi i32 [ %740, %734 ], [ 0, %548 ]
  %704 = load i8, ptr %702, align 1, !tbaa !6
  %705 = icmp sgt i8 %704, -1
  br i1 %705, label %706, label %712

706:                                              ; preds = %701
  %707 = zext i8 %704 to i64
  %708 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %707
  %709 = load i32, ptr %708, align 4, !tbaa !34
  %710 = and i32 %709, 4096
  %711 = icmp ne i32 %710, 0
  br label %730

712:                                              ; preds = %701
  %713 = icmp eq i8 %704, -17
  br i1 %713, label %714, label %730

714:                                              ; preds = %712
  %715 = getelementptr inbounds i8, ptr %702, i64 1
  %716 = load i8, ptr %715, align 1, !tbaa !6
  switch i8 %716, label %730 [
    i8 -68, label %717
    i8 -67, label %725
  ]

717:                                              ; preds = %714
  %718 = getelementptr inbounds i8, ptr %702, i64 2
  %719 = load i8, ptr %718, align 1, !tbaa !6
  %720 = add i8 %719, 112
  %721 = icmp ult i8 %720, 10
  br i1 %721, label %730, label %722

722:                                              ; preds = %717
  %723 = add i8 %719, 95
  %724 = icmp ult i8 %723, 6
  br label %730

725:                                              ; preds = %714
  %726 = getelementptr inbounds i8, ptr %702, i64 2
  %727 = load i8, ptr %726, align 1, !tbaa !6
  %728 = add i8 %727, 127
  %729 = icmp ult i8 %728, 6
  br label %730

730:                                              ; preds = %725, %722, %714, %717, %712, %706
  %731 = phi i1 [ %711, %706 ], [ false, %712 ], [ true, %717 ], [ %724, %722 ], [ false, %714 ], [ %729, %725 ]
  %732 = zext i1 %731 to i32
  %733 = icmp eq i32 %497, %732
  br i1 %733, label %987, label %734

734:                                              ; preds = %730
  %735 = zext i8 %704 to i64
  %736 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %735
  %737 = load i8, ptr %736, align 1, !tbaa !6
  %738 = zext i8 %737 to i64
  %739 = getelementptr inbounds i8, ptr %702, i64 %738
  %740 = add nuw nsw i32 %703, 1
  %741 = icmp slt i32 %740, %30
  %742 = icmp ult ptr %739, %28
  %743 = select i1 %741, i1 %742, i1 false
  br i1 %743, label %701, label %998, !llvm.loop !391

744:                                              ; preds = %544, %784
  %745 = phi ptr [ %789, %784 ], [ %17, %544 ]
  %746 = phi i32 [ %790, %784 ], [ 0, %544 ]
  %747 = load i8, ptr %745, align 1, !tbaa !6
  %748 = icmp sgt i8 %747, -1
  br i1 %748, label %749, label %755

749:                                              ; preds = %744
  %750 = zext i8 %747 to i64
  %751 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %750
  %752 = load i32, ptr %751, align 4, !tbaa !34
  %753 = and i32 %752, 32768
  %754 = icmp ne i32 %753, 0
  br label %780

755:                                              ; preds = %744
  %756 = and i8 %747, -2
  %757 = icmp eq i8 %756, -62
  br i1 %757, label %758, label %769

758:                                              ; preds = %755
  %759 = shl i8 %747, 6
  %760 = getelementptr inbounds i8, ptr %745, i64 1
  %761 = load i8, ptr %760, align 1, !tbaa !6
  %762 = and i8 %761, 63
  %763 = or i8 %762, %759
  %764 = zext i8 %763 to i64
  %765 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !34
  %767 = and i32 %766, 32768
  %768 = icmp ne i32 %767, 0
  br label %780

769:                                              ; preds = %755
  %770 = icmp eq i8 %747, -30
  br i1 %770, label %771, label %780

771:                                              ; preds = %769
  %772 = getelementptr inbounds i8, ptr %745, i64 1
  %773 = load i8, ptr %772, align 1, !tbaa !6
  %774 = icmp eq i8 %773, -128
  br i1 %774, label %775, label %780

775:                                              ; preds = %771
  %776 = getelementptr inbounds i8, ptr %745, i64 2
  %777 = load i8, ptr %776, align 1, !tbaa !6
  %778 = and i8 %777, -2
  %779 = icmp eq i8 %778, -88
  br label %780

780:                                              ; preds = %769, %771, %775, %758, %749
  %781 = phi i1 [ %754, %749 ], [ %768, %758 ], [ false, %771 ], [ false, %769 ], [ %779, %775 ]
  %782 = zext i1 %781 to i32
  %783 = icmp eq i32 %497, %782
  br i1 %783, label %987, label %784

784:                                              ; preds = %780
  %785 = zext i8 %747 to i64
  %786 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %785
  %787 = load i8, ptr %786, align 1, !tbaa !6
  %788 = zext i8 %787 to i64
  %789 = getelementptr inbounds i8, ptr %745, i64 %788
  %790 = add nuw nsw i32 %746, 1
  %791 = icmp slt i32 %790, %30
  %792 = icmp ult ptr %789, %28
  %793 = select i1 %791, i1 %792, i1 false
  br i1 %793, label %744, label %998, !llvm.loop !392

794:                                              ; preds = %540, %819
  %795 = phi ptr [ %824, %819 ], [ %17, %540 ]
  %796 = phi i32 [ %825, %819 ], [ 0, %540 ]
  %797 = load i8, ptr %795, align 1, !tbaa !6
  %798 = icmp sgt i8 %797, -1
  br i1 %798, label %808, label %799

799:                                              ; preds = %794
  %800 = and i8 %797, -2
  %801 = icmp eq i8 %800, -62
  br i1 %801, label %802, label %815

802:                                              ; preds = %799
  %803 = shl i8 %797, 6
  %804 = getelementptr inbounds i8, ptr %795, i64 1
  %805 = load i8, ptr %804, align 1, !tbaa !6
  %806 = and i8 %805, 63
  %807 = or i8 %806, %803
  br label %808

808:                                              ; preds = %794, %802
  %809 = phi i8 [ %807, %802 ], [ %797, %794 ]
  %810 = zext i8 %809 to i64
  %811 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %810
  %812 = load i32, ptr %811, align 4, !tbaa !34
  %813 = and i32 %812, 8192
  %814 = icmp ne i32 %813, 0
  br label %815

815:                                              ; preds = %808, %799
  %816 = phi i1 [ false, %799 ], [ %814, %808 ]
  %817 = zext i1 %816 to i32
  %818 = icmp eq i32 %497, %817
  br i1 %818, label %987, label %819

819:                                              ; preds = %815
  %820 = zext i8 %797 to i64
  %821 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %820
  %822 = load i8, ptr %821, align 1, !tbaa !6
  %823 = zext i8 %822 to i64
  %824 = getelementptr inbounds i8, ptr %795, i64 %823
  %825 = add nuw nsw i32 %796, 1
  %826 = icmp slt i32 %825, %30
  %827 = icmp ult ptr %824, %28
  %828 = select i1 %826, i1 %827, i1 false
  br i1 %828, label %794, label %998, !llvm.loop !393

829:                                              ; preds = %539
  %830 = zext i8 %32 to i32
  %831 = zext i8 %32 to i64
  %832 = getelementptr inbounds [0 x ptr], ptr @PL_reg_name, i64 0, i64 %831
  %833 = load ptr, ptr %832, align 8, !tbaa !13
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.23, i32 noundef %830, ptr noundef %833, i32 noundef %499) #12
  br label %991

834:                                              ; preds = %517
  %835 = zext i8 %498 to i64
  %836 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %835
  %837 = load ptr, ptr %836, align 8, !tbaa !13
  %838 = icmp eq ptr %837, null
  br i1 %838, label %839, label %843

839:                                              ; preds = %834
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11) #12
  store i8 4, ptr %11, align 1, !tbaa !6
  %840 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %835
  %841 = load ptr, ptr %840, align 8, !tbaa !13
  %842 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %841, ptr noundef nonnull %11) #12
  store ptr %842, ptr %836, align 8, !tbaa !13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11) #12
  br label %843

843:                                              ; preds = %839, %834
  %844 = icmp slt i32 %507, %30
  %845 = icmp ult ptr %506, %28
  %846 = select i1 %844, i1 %845, i1 false
  br i1 %846, label %847, label %987

847:                                              ; preds = %843
  %848 = shl nuw i32 1, %499
  br label %849

849:                                              ; preds = %847, %884
  %850 = phi ptr [ %506, %847 ], [ %890, %884 ]
  %851 = phi i32 [ %507, %847 ], [ %891, %884 ]
  %852 = load i8, ptr %850, align 1, !tbaa !6
  %853 = icmp sgt i8 %852, -1
  br i1 %853, label %854, label %861

854:                                              ; preds = %849
  %855 = zext i8 %852 to i64
  %856 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %855
  %857 = load i32, ptr %856, align 4, !tbaa !34
  %858 = lshr i32 %857, %499
  %859 = and i32 %858, 1
  %860 = zext i32 %859 to i64
  br label %879

861:                                              ; preds = %849
  %862 = and i8 %852, -2
  %863 = icmp eq i8 %862, -62
  br i1 %863, label %864, label %876

864:                                              ; preds = %861
  %865 = shl i8 %852, 6
  %866 = getelementptr inbounds i8, ptr %850, i64 1
  %867 = load i8, ptr %866, align 1, !tbaa !6
  %868 = and i8 %867, 63
  %869 = or i8 %868, %865
  %870 = zext i8 %869 to i64
  %871 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %870
  %872 = load i32, ptr %871, align 4, !tbaa !34
  %873 = and i32 %872, %848
  %874 = icmp ne i32 %873, 0
  %875 = zext i1 %874 to i64
  br label %879

876:                                              ; preds = %861
  %877 = load ptr, ptr %836, align 8, !tbaa !13
  %878 = call i64 @Perl_swash_fetch(ptr noundef %877, ptr noundef nonnull %850, i1 noundef zeroext true) #12
  br label %879

879:                                              ; preds = %864, %876, %854
  %880 = phi i64 [ %860, %854 ], [ %875, %864 ], [ %878, %876 ]
  %881 = icmp ne i64 %880, 0
  %882 = zext i1 %881 to i32
  %883 = icmp eq i32 %497, %882
  br i1 %883, label %987, label %884

884:                                              ; preds = %879
  %885 = load i8, ptr %850, align 1, !tbaa !6
  %886 = zext i8 %885 to i64
  %887 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %886
  %888 = load i8, ptr %887, align 1, !tbaa !6
  %889 = zext i8 %888 to i64
  %890 = getelementptr inbounds i8, ptr %850, i64 %889
  %891 = add nuw nsw i32 %851, 1
  %892 = icmp slt i32 %891, %30
  %893 = icmp ult ptr %890, %28
  %894 = select i1 %892, i1 %893, i1 false
  br i1 %894, label %849, label %998, !llvm.loop !394

895:                                              ; preds = %5
  br i1 %16, label %898, label %896

896:                                              ; preds = %895
  %897 = icmp ult ptr %17, %13
  br i1 %897, label %957, label %991

898:                                              ; preds = %895
  %899 = icmp sgt i32 %20, 0
  %900 = icmp ult ptr %17, %13
  %901 = select i1 %899, i1 %900, i1 false
  br i1 %901, label %902, label %991

902:                                              ; preds = %898, %950
  %903 = phi ptr [ %952, %950 ], [ %17, %898 ]
  %904 = phi i32 [ %953, %950 ], [ 0, %898 ]
  %905 = ptrtoint ptr %903 to i64
  %906 = sub i64 %29, %905
  %907 = icmp sgt i64 %906, 2
  br i1 %907, label %908, label %927

908:                                              ; preds = %902
  %909 = load i8, ptr %903, align 1, !tbaa !6
  %910 = add i8 %909, -10
  %911 = icmp ult i8 %910, 3
  br i1 %911, label %950, label %912

912:                                              ; preds = %908
  switch i8 %909, label %987 [
    i8 13, label %945
    i8 -62, label %913
    i8 -30, label %917
  ]

913:                                              ; preds = %912
  %914 = getelementptr inbounds i8, ptr %903, i64 1
  %915 = load i8, ptr %914, align 1, !tbaa !6
  %916 = icmp eq i8 %915, -123
  br i1 %916, label %950, label %987

917:                                              ; preds = %912
  %918 = getelementptr inbounds i8, ptr %903, i64 1
  %919 = load i8, ptr %918, align 1, !tbaa !6
  %920 = icmp eq i8 %919, -128
  br i1 %920, label %921, label %987

921:                                              ; preds = %917
  %922 = getelementptr inbounds i8, ptr %903, i64 2
  %923 = load i8, ptr %922, align 1, !tbaa !6
  %924 = freeze i8 %923
  %925 = and i8 %924, -2
  %926 = icmp eq i8 %925, -88
  br i1 %926, label %950, label %987

927:                                              ; preds = %902
  %928 = icmp eq i64 %906, 2
  br i1 %928, label %929, label %939

929:                                              ; preds = %927
  %930 = load i8, ptr %903, align 1, !tbaa !6
  %931 = add i8 %930, -10
  %932 = icmp ult i8 %931, 3
  br i1 %932, label %950, label %933

933:                                              ; preds = %929
  switch i8 %930, label %987 [
    i8 13, label %945
    i8 -62, label %934
  ]

934:                                              ; preds = %933
  %935 = getelementptr inbounds i8, ptr %903, i64 1
  %936 = load i8, ptr %935, align 1, !tbaa !6
  %937 = freeze i8 %936
  %938 = icmp eq i8 %937, -123
  br i1 %938, label %950, label %987

939:                                              ; preds = %927
  %940 = icmp sgt i64 %906, 0
  br i1 %940, label %941, label %987

941:                                              ; preds = %939
  %942 = load i8, ptr %903, align 1, !tbaa !6
  %943 = add i8 %942, -14
  %944 = icmp ult i8 %943, -4
  br i1 %944, label %987, label %950

945:                                              ; preds = %933, %912
  %946 = getelementptr inbounds i8, ptr %903, i64 1
  %947 = load i8, ptr %946, align 1, !tbaa !6
  %948 = icmp eq i8 %947, 10
  %949 = select i1 %948, i64 2, i64 1
  br label %950

950:                                              ; preds = %945, %913, %934, %921, %929, %908, %941
  %951 = phi i64 [ 1, %941 ], [ 1, %929 ], [ 1, %908 ], [ 3, %921 ], [ 2, %934 ], [ 2, %913 ], [ %949, %945 ]
  %952 = getelementptr inbounds i8, ptr %903, i64 %951
  %953 = add nuw nsw i32 %904, 1
  %954 = icmp slt i32 %953, %30
  %955 = icmp ult ptr %952, %28
  %956 = select i1 %954, i1 %955, i1 false
  br i1 %956, label %902, label %998, !llvm.loop !395

957:                                              ; preds = %896, %977
  %958 = phi ptr [ %979, %977 ], [ %17, %896 ]
  %959 = phi i32 [ %980, %977 ], [ 0, %896 ]
  %960 = ptrtoint ptr %958 to i64
  %961 = sub i64 %21, %960
  %962 = icmp sgt i64 %961, 1
  br i1 %962, label %963, label %973

963:                                              ; preds = %957
  %964 = load i8, ptr %958, align 1, !tbaa !6
  %965 = add i8 %964, -10
  %966 = icmp ult i8 %965, 3
  br i1 %966, label %977, label %967

967:                                              ; preds = %963
  switch i8 %964, label %987 [
    i8 -123, label %977
    i8 13, label %968
  ]

968:                                              ; preds = %967
  %969 = getelementptr inbounds i8, ptr %958, i64 1
  %970 = load i8, ptr %969, align 1, !tbaa !6
  %971 = icmp eq i8 %970, 10
  %972 = select i1 %971, i64 2, i64 1
  br label %977

973:                                              ; preds = %957
  %974 = icmp eq i64 %961, 1
  br i1 %974, label %975, label %987

975:                                              ; preds = %973
  %976 = load i8, ptr %958, align 1, !tbaa !6
  switch i8 %976, label %987 [
    i8 -123, label %977
    i8 13, label %977
    i8 12, label %977
    i8 11, label %977
    i8 10, label %977
  ]

977:                                              ; preds = %975, %975, %975, %975, %975, %963, %968, %967
  %978 = phi i64 [ 1, %975 ], [ 1, %963 ], [ %972, %968 ], [ 1, %967 ], [ 1, %975 ], [ 1, %975 ], [ 1, %975 ], [ 1, %975 ]
  %979 = getelementptr inbounds i8, ptr %958, i64 %978
  %980 = add nuw nsw i32 %959, 1
  %981 = icmp ult ptr %979, %13
  br i1 %981, label %957, label %998, !llvm.loop !396

982:                                              ; preds = %5
  %983 = zext i8 %32 to i32
  %984 = zext i8 %32 to i64
  %985 = getelementptr inbounds [0 x ptr], ptr @PL_reg_name, i64 0, i64 %984
  %986 = load ptr, ptr %985, align 8, !tbaa !13
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.24, i32 noundef %983, ptr noundef %986) #12
  br label %991

987:                                              ; preds = %973, %967, %975, %941, %913, %939, %921, %934, %917, %912, %933, %456, %815, %780, %730, %687, %618, %520, %510, %879, %376, %314, %124, %133, %176, %171, %182, %179, %43, %843, %304
  %988 = phi i32 [ %305, %304 ], [ %507, %843 ], [ %45, %43 ], [ %173, %176 ], [ %173, %171 ], [ %30, %182 ], [ %173, %179 ], [ %126, %133 ], [ %126, %124 ], [ %316, %314 ], [ %378, %376 ], [ %851, %879 ], [ %507, %510 ], [ %507, %520 ], [ %562, %618 ], [ %634, %687 ], [ %703, %730 ], [ %746, %780 ], [ %796, %815 ], [ %452, %456 ], [ %904, %933 ], [ %904, %912 ], [ %904, %917 ], [ %904, %934 ], [ %904, %921 ], [ %904, %939 ], [ %904, %913 ], [ %904, %941 ], [ %959, %975 ], [ %959, %967 ], [ %959, %973 ]
  %989 = phi ptr [ %306, %304 ], [ %506, %843 ], [ %44, %43 ], [ %172, %176 ], [ %172, %171 ], [ %183, %182 ], [ %172, %179 ], [ %125, %133 ], [ %125, %124 ], [ %315, %314 ], [ %377, %376 ], [ %850, %879 ], [ %506, %510 ], [ %506, %520 ], [ %561, %618 ], [ %633, %687 ], [ %702, %730 ], [ %745, %780 ], [ %795, %815 ], [ %451, %456 ], [ %903, %933 ], [ %903, %912 ], [ %903, %917 ], [ %903, %934 ], [ %903, %921 ], [ %903, %939 ], [ %903, %913 ], [ %903, %941 ], [ %958, %975 ], [ %958, %967 ], [ %958, %973 ]
  %990 = icmp eq i32 %988, 0
  br i1 %990, label %991, label %998

991:                                              ; preds = %484, %493, %439, %447, %413, %421, %366, %373, %348, %351, %157, %162, %110, %114, %58, %62, %896, %898, %426, %540, %544, %548, %552, %556, %501, %362, %310, %118, %165, %66, %39, %477, %430, %402, %357, %308, %144, %98, %34, %84, %83, %65, %142, %188, %829, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %982, %987
  %992 = phi ptr [ %989, %987 ], [ %88, %84 ], [ %28, %83 ], [ %28, %65 ], [ %17, %142 ], [ %17, %188 ], [ %17, %829 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %982 ], [ %17, %34 ], [ %17, %98 ], [ %17, %144 ], [ %17, %308 ], [ %17, %357 ], [ %17, %402 ], [ %17, %430 ], [ %17, %477 ], [ %17, %39 ], [ %17, %66 ], [ %17, %165 ], [ %17, %118 ], [ %17, %310 ], [ %17, %362 ], [ %17, %501 ], [ %17, %556 ], [ %17, %552 ], [ %17, %548 ], [ %17, %544 ], [ %17, %540 ], [ %17, %426 ], [ %17, %898 ], [ %17, %896 ], [ %59, %58 ], [ %38, %62 ], [ %111, %110 ], [ %109, %114 ], [ %158, %157 ], [ %156, %162 ], [ %330, %348 ], [ %352, %351 ], [ %367, %366 ], [ %361, %373 ], [ %414, %413 ], [ %412, %421 ], [ %440, %439 ], [ %438, %447 ], [ %485, %484 ], [ %483, %493 ]
  %993 = load ptr, ptr %1, align 8, !tbaa !13
  %994 = ptrtoint ptr %992 to i64
  %995 = ptrtoint ptr %993 to i64
  %996 = sub i64 %994, %995
  %997 = trunc i64 %996 to i32
  br label %998

998:                                              ; preds = %977, %950, %465, %819, %784, %734, %691, %622, %532, %884, %383, %318, %136, %70, %48, %987, %991
  %999 = phi ptr [ %992, %991 ], [ %989, %987 ], [ %53, %48 ], [ %78, %70 ], [ %137, %136 ], [ %324, %318 ], [ %389, %383 ], [ %890, %884 ], [ %534, %532 ], [ %627, %622 ], [ %696, %691 ], [ %739, %734 ], [ %789, %784 ], [ %824, %819 ], [ %469, %465 ], [ %952, %950 ], [ %979, %977 ]
  %1000 = phi i32 [ %997, %991 ], [ %988, %987 ], [ %54, %48 ], [ %79, %70 ], [ %138, %136 ], [ %325, %318 ], [ %390, %383 ], [ %891, %884 ], [ %535, %532 ], [ %628, %622 ], [ %697, %691 ], [ %740, %734 ], [ %790, %784 ], [ %825, %819 ], [ %470, %465 ], [ %953, %950 ], [ %980, %977 ]
  store ptr %999, ptr %1, align 8, !tbaa !13
  ret i32 %1000
}

declare i32 @Perl_sv_eq_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i32 @PerlIO_printf(ptr noundef, ptr noundef, ...) local_unnamed_addr #2

declare ptr @Perl_PerlIO_stderr() local_unnamed_addr #2

declare void @Perl_croak_popstack() local_unnamed_addr #2

declare void @Perl_savestack_grow_cnt(i32 noundef) local_unnamed_addr #2

declare i64 @Perl_valid_utf8_to_uvchr(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__ctype_tolower_loc() local_unnamed_addr #4

declare void @Perl__load_PL_utf8_foldclosures() local_unnamed_addr #2

declare ptr @Perl_av_fetch(ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #2

declare i64 @Perl_sv_2uv_flags(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #2

declare i32 @Perl_mg_size(ptr noundef) local_unnamed_addr #2

declare void @Perl_save_gp(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_save_generic_svref(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_sv_magicext_mglob(ptr noundef) local_unnamed_addr #2

declare i64 @Perl_sv_utf8_upgrade_flags_grow(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #2

declare void @Perl_fbm_compile(ptr noundef, i32 noundef) local_unnamed_addr #2

declare zeroext i1 @Perl_sv_utf8_downgrade(ptr noundef, i1 noundef zeroext) local_unnamed_addr #2

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.usub.sat.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.usub.sat.i64(i64, i64) #11

attributes #0 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { mustprogress nofree nosync nounwind willreturn memory(none) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #10 = { nofree nounwind willreturn memory(argmem: read) }
attributes #11 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nounwind }
attributes #13 = { nounwind willreturn memory(read) }
attributes #14 = { nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{i32 0, i32 2}
!6 = !{!7, !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !12, i64 12}
!10 = !{!"sv", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!11 = !{!"any pointer", !7, i64 0}
!12 = !{!"int", !7, i64 0}
!13 = !{!11, !11, i64 0}
!14 = !{!15, !12, i64 56}
!15 = !{!"cop", !11, i64 0, !11, i64 8, !11, i64 16, !16, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !7, i64 34, !7, i64 35, !12, i64 36, !11, i64 40, !11, i64 48, !12, i64 56, !12, i64 60, !11, i64 64, !11, i64 72}
!16 = !{!"long", !7, i64 0}
!17 = !{!18, !11, i64 104}
!18 = !{!"regexp", !11, i64 0, !7, i64 8, !16, i64 16, !7, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !12, i64 56, !16, i64 64, !16, i64 72, !16, i64 80, !11, i64 88, !12, i64 96, !12, i64 100, !11, i64 104, !12, i64 112, !12, i64 116, !11, i64 120, !11, i64 128, !11, i64 136, !16, i64 144, !16, i64 152, !16, i64 160, !16, i64 168, !12, i64 176, !12, i64 176, !11, i64 184}
!19 = !{!18, !12, i64 100}
!20 = !{!21, !16, i64 24}
!21 = !{!"magic", !11, i64 0, !11, i64 8, !22, i64 16, !7, i64 18, !7, i64 19, !16, i64 24, !11, i64 32, !11, i64 40}
!22 = !{!"short", !7, i64 0}
!23 = !{!21, !7, i64 19}
!24 = !{!10, !11, i64 0}
!25 = !{!26, !11, i64 0}
!26 = !{!"xpvmg", !11, i64 0, !7, i64 8, !16, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!27 = !{!28, !12, i64 12}
!28 = !{!"hv", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!29 = !{!30, !11, i64 40}
!30 = !{!"", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !12, i64 72, !12, i64 76, !16, i64 80, !31, i64 88, !31, i64 89, !31, i64 90, !31, i64 91}
!31 = !{!"_Bool", !7, i64 0}
!32 = !{!18, !16, i64 80}
!33 = !{!18, !16, i64 64}
!34 = !{!12, !12, i64 0}
!35 = !{!18, !12, i64 56}
!36 = !{!18, !12, i64 116}
!37 = !{!18, !12, i64 112}
!38 = !{!18, !11, i64 120}
!39 = !{!40, !16, i64 0}
!40 = !{!"regexp_paren_pair", !16, i64 0, !16, i64 8, !16, i64 16}
!41 = !{!18, !16, i64 72}
!42 = !{!40, !16, i64 8}
!43 = !{!18, !11, i64 88}
!44 = !{!45, !16, i64 0}
!45 = !{!"reg_substr_datum", !16, i64 0, !16, i64 8, !11, i64 16, !11, i64 24, !16, i64 32}
!46 = !{!30, !11, i64 0}
!47 = !{!30, !31, i64 88}
!48 = !{!30, !31, i64 90}
!49 = !{!50, !12, i64 12}
!50 = !{!"p5rx", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!51 = !{!30, !31, i64 89}
!52 = !{!30, !31, i64 91}
!53 = !{!30, !11, i64 8}
!54 = !{!30, !11, i64 32}
!55 = !{!30, !12, i64 72}
!56 = !{!30, !11, i64 16}
!57 = !{!30, !11, i64 24}
!58 = !{!30, !11, i64 56}
!59 = !{!60, !11, i64 0}
!60 = !{!"", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24}
!61 = !{!30, !11, i64 64}
!62 = !{!63, !11, i64 3968}
!63 = !{!"regmatch_slab", !7, i64 0, !11, i64 3960, !11, i64 3968}
!64 = !{!63, !11, i64 3960}
!65 = distinct !{!65, !66}
!66 = !{!"llvm.loop.mustprogress"}
!67 = !{!60, !11, i64 8}
!68 = !{!60, !11, i64 16}
!69 = !{!60, !11, i64 24}
!70 = !{!71, !11, i64 0}
!71 = !{!"", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !16, i64 32, !16, i64 40, !16, i64 48, !11, i64 56, !16, i64 64, !7, i64 72}
!72 = !{!73, !11, i64 0}
!73 = !{!"gv", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!74 = !{!75, !16, i64 16}
!75 = !{!"xpvgv", !11, i64 0, !7, i64 8, !16, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!76 = !{!77, !11, i64 0}
!77 = !{!"gp", !11, i64 0, !11, i64 8, !11, i64 16, !12, i64 24, !12, i64 28, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !12, i64 64, !12, i64 67, !11, i64 72}
!78 = !{!10, !12, i64 8}
!79 = !{!71, !11, i64 56}
!80 = !{!71, !16, i64 64}
!81 = !{!71, !7, i64 72}
!82 = !{!83, !11, i64 56}
!83 = !{!"pmop", !11, i64 0, !11, i64 8, !11, i64 16, !16, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !7, i64 34, !7, i64 35, !11, i64 40, !11, i64 48, !11, i64 56, !12, i64 64, !7, i64 72, !7, i64 80, !11, i64 88}
!84 = !{!71, !11, i64 8}
!85 = !{!18, !11, i64 128}
!86 = !{!16, !16, i64 0}
!87 = !{!18, !16, i64 160}
!88 = !{!71, !16, i64 48}
!89 = !{!18, !11, i64 136}
!90 = !{!71, !11, i64 16}
!91 = !{!18, !16, i64 144}
!92 = !{!18, !12, i64 96}
!93 = !{!30, !11, i64 48}
!94 = distinct !{!94, !95}
!95 = !{!"llvm.loop.unroll.disable"}
!96 = distinct !{!96, !66}
!97 = !{i8 0, i8 2}
!98 = !{}
!99 = distinct !{!99, !66}
!100 = !{!45, !11, i64 16}
!101 = !{!45, !11, i64 24}
!102 = distinct !{!102, !95}
!103 = distinct !{!103, !95}
!104 = distinct !{!104, !66}
!105 = distinct !{!105, !66}
!106 = distinct !{!106, !95}
!107 = distinct !{!107, !66}
!108 = distinct !{!108, !66}
!109 = !{!45, !16, i64 8}
!110 = !{!111, !16, i64 16}
!111 = !{!"xpv", !11, i64 0, !7, i64 8, !16, i64 16, !7, i64 24}
!112 = distinct !{!112, !95}
!113 = distinct !{!113, !66}
!114 = distinct !{!114, !95}
!115 = distinct !{!115, !66}
!116 = distinct !{!116, !66}
!117 = !{!118, !11, i64 16}
!118 = !{!"regexp_internal", !12, i64 0, !7, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !12, i64 40, !7, i64 44}
!119 = !{!120, !7, i64 1}
!120 = !{!"regnode", !7, i64 0, !7, i64 1, !22, i64 2}
!121 = distinct !{!121, !66}
!122 = !{!18, !11, i64 48}
!123 = !{!124, !7, i64 0}
!124 = !{!"reg_substr_data", !7, i64 0, !7, i64 8}
!125 = !{!45, !16, i64 32}
!126 = distinct !{!126, !66}
!127 = distinct !{!127, !66}
!128 = distinct !{!128, !66}
!129 = distinct !{!129, !66}
!130 = distinct !{!130, !66}
!131 = distinct !{!131, !66}
!132 = distinct !{!132, !66}
!133 = distinct !{!133, !66}
!134 = distinct !{!134, !66}
!135 = !{!136, !7, i64 0}
!136 = !{!"regnode_string", !7, i64 0, !7, i64 1, !22, i64 2, !7, i64 4}
!137 = distinct !{!137, !95}
!138 = distinct !{!138, !66}
!139 = !{!120, !7, i64 0}
!140 = distinct !{!140, !95}
!141 = distinct !{!141, !66}
!142 = distinct !{!142, !95}
!143 = distinct !{!143, !66}
!144 = !{ptr @Perl_foldEQ, ptr @Perl_foldEQ_latin1, ptr @Perl_foldEQ_locale}
!145 = distinct !{!145, !95}
!146 = distinct !{!146, !66}
!147 = distinct !{!147, !95}
!148 = distinct !{!148, !66}
!149 = distinct !{!149, !95}
!150 = distinct !{!150, !66}
!151 = !{!31, !31, i64 0}
!152 = !{!22, !22, i64 0}
!153 = distinct !{!153, !95}
!154 = distinct !{!154, !66}
!155 = distinct !{!155, !95}
!156 = distinct !{!156, !66}
!157 = distinct !{!157, !95}
!158 = distinct !{!158, !66}
!159 = distinct !{!159, !95}
!160 = distinct !{!160, !66}
!161 = distinct !{!161, !95}
!162 = distinct !{!162, !66}
!163 = distinct !{!163, !95}
!164 = distinct !{!164, !66}
!165 = distinct !{!165, !95}
!166 = distinct !{!166, !66}
!167 = distinct !{!167, !95}
!168 = distinct !{!168, !66}
!169 = distinct !{!169, !95}
!170 = distinct !{!170, !66}
!171 = distinct !{!171, !95}
!172 = distinct !{!172, !66}
!173 = distinct !{!173, !95}
!174 = distinct !{!174, !66}
!175 = distinct !{!175, !95}
!176 = distinct !{!176, !66}
!177 = distinct !{!177, !95}
!178 = distinct !{!178, !66}
!179 = distinct !{!179, !95}
!180 = distinct !{!180, !66}
!181 = distinct !{!181, !95}
!182 = distinct !{!182, !66}
!183 = distinct !{!183, !95}
!184 = distinct !{!184, !66}
!185 = distinct !{!185, !95}
!186 = distinct !{!186, !66}
!187 = distinct !{!187, !95}
!188 = distinct !{!188, !66}
!189 = distinct !{!189, !95}
!190 = distinct !{!190, !66}
!191 = distinct !{!191, !66}
!192 = distinct !{!192, !95}
!193 = distinct !{!193, !66}
!194 = distinct !{!194, !66}
!195 = distinct !{!195, !95}
!196 = distinct !{!196, !66}
!197 = distinct !{!197, !95}
!198 = distinct !{!198, !66}
!199 = distinct !{!199, !95}
!200 = distinct !{!200, !66}
!201 = distinct !{!201, !95}
!202 = distinct !{!202, !66}
!203 = distinct !{!203, !95}
!204 = distinct !{!204, !66}
!205 = distinct !{!205, !95}
!206 = distinct !{!206, !66}
!207 = distinct !{!207, !95}
!208 = distinct !{!208, !66}
!209 = distinct !{!209, !95}
!210 = distinct !{!210, !66}
!211 = distinct !{!211, !95}
!212 = distinct !{!212, !66}
!213 = distinct !{!213, !95}
!214 = distinct !{!214, !66}
!215 = distinct !{!215, !95}
!216 = distinct !{!216, !66}
!217 = distinct !{!217, !95}
!218 = distinct !{!218, !66}
!219 = distinct !{!219, !95}
!220 = distinct !{!220, !66}
!221 = distinct !{!221, !95}
!222 = distinct !{!222, !66}
!223 = !{!118, !11, i64 24}
!224 = !{!225, !12, i64 4}
!225 = !{!"regnode_1", !7, i64 0, !7, i64 1, !22, i64 2, !12, i64 4}
!226 = !{!227, !12, i64 4}
!227 = !{!"_reg_ac_data", !12, i64 0, !12, i64 4, !11, i64 8, !11, i64 16}
!228 = !{!229, !16, i64 64}
!229 = !{!"_reg_trie_data", !12, i64 0, !12, i64 4, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !22, i64 56, !12, i64 60, !16, i64 64, !16, i64 72, !12, i64 80, !12, i64 84, !12, i64 88}
!230 = !{!229, !16, i64 72}
!231 = !{!229, !11, i64 32}
!232 = !{!227, !11, i64 16}
!233 = !{!234, !22, i64 0}
!234 = !{!"_reg_trie_state", !22, i64 0, !7, i64 8}
!235 = distinct !{!235, !66}
!236 = distinct !{!236, !66}
!237 = !{!229, !11, i64 48}
!238 = !{!239, !12, i64 4}
!239 = !{!"", !22, i64 0, !12, i64 4, !12, i64 8}
!240 = !{!229, !11, i64 8}
!241 = !{!229, !22, i64 56}
!242 = !{!229, !12, i64 4}
!243 = !{!229, !11, i64 24}
!244 = !{!245, !12, i64 4}
!245 = !{!"_reg_trie_trans", !12, i64 0, !12, i64 4}
!246 = !{!245, !12, i64 0}
!247 = !{!227, !11, i64 8}
!248 = distinct !{!248, !66}
!249 = distinct !{!249, !66, !250}
!250 = !{!"llvm.loop.peeled.count", i32 1}
!251 = distinct !{!251, !95}
!252 = !{!18, !16, i64 152}
!253 = !{!71, !11, i64 24}
!254 = distinct !{!254, !66}
!255 = distinct !{!255, !95}
!256 = !{!257, !12, i64 40}
!257 = !{!"regnode_charclass_class", !7, i64 0, !7, i64 1, !22, i64 2, !12, i64 4, !7, i64 8, !12, i64 40}
!258 = distinct !{!258, !66}
!259 = distinct !{!259, !66}
!260 = distinct !{!260, !66}
!261 = !{i32 7, i32 6}
!262 = distinct !{!262, !66}
!263 = distinct !{!263, !66}
!264 = distinct !{!264, !66}
!265 = distinct !{!265, !66}
!266 = !{i32 8, i32 7}
!267 = distinct !{!267, !66}
!268 = distinct !{!268, !66}
!269 = distinct !{!269, !66}
!270 = distinct !{!270, !66}
!271 = distinct !{!271, !66}
!272 = distinct !{!272, !66}
!273 = distinct !{!273, !66}
!274 = distinct !{!274, !66}
!275 = !{!120, !22, i64 2}
!276 = !{!277, !12, i64 0}
!277 = !{!"regmatch_state", !12, i64 0, !11, i64 8, !7, i64 16}
!278 = !{!229, !12, i64 60}
!279 = !{!229, !11, i64 16}
!280 = !{!229, !11, i64 40}
!281 = distinct !{!281, !66}
!282 = distinct !{!282, !66}
!283 = distinct !{!283, !66}
!284 = distinct !{!284, !66}
!285 = !{!229, !12, i64 80}
!286 = distinct !{!286, !66}
!287 = distinct !{!287, !66}
!288 = distinct !{!288, !95}
!289 = distinct !{!289, !66}
!290 = distinct !{!290, !66}
!291 = distinct !{!291, !66}
!292 = distinct !{!292, !66}
!293 = !{!30, !12, i64 76}
!294 = !{!277, !11, i64 8}
!295 = !{!296, !12, i64 8}
!296 = !{!"regnode_2L", !7, i64 0, !7, i64 1, !22, i64 2, !12, i64 4, !12, i64 8}
!297 = !{!298, !11, i64 8}
!298 = !{!"reg_data", !12, i64 0, !11, i64 8, !7, i64 16}
!299 = !{!18, !11, i64 184}
!300 = !{!301, !11, i64 0}
!301 = !{!"cv", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!302 = !{!303, !11, i64 8}
!303 = !{!"stackinfo", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44}
!304 = !{!303, !12, i64 32}
!305 = !{!306, !7, i64 34}
!306 = !{!"op", !11, i64 0, !11, i64 8, !11, i64 16, !16, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !7, i64 34, !7, i64 35}
!307 = !{!306, !7, i64 35}
!308 = !{!309, !31, i64 212}
!309 = !{!"jmpenv", !7, i64 0, !11, i64 200, !12, i64 208, !31, i64 212}
!310 = !{!303, !11, i64 24}
!311 = !{!303, !11, i64 16}
!312 = !{!303, !12, i64 40}
!313 = !{!303, !11, i64 0}
!314 = !{!315, !11, i64 0}
!315 = !{!"av", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!316 = !{!317, !16, i64 16}
!317 = !{!"xpvav", !11, i64 0, !7, i64 8, !16, i64 16, !16, i64 24, !11, i64 32}
!318 = !{!317, !16, i64 24}
!319 = !{!303, !12, i64 36}
!320 = !{!321, !11, i64 8}
!321 = !{!"padlist", !16, i64 0, !11, i64 8, !12, i64 16, !12, i64 20}
!322 = !{!323, !11, i64 40}
!323 = !{!"unop", !11, i64 0, !11, i64 8, !11, i64 16, !16, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !7, i64 34, !7, i64 35, !11, i64 40}
!324 = !{!306, !16, i64 24}
!325 = !{!306, !11, i64 0}
!326 = !{!21, !11, i64 32}
!327 = !{!18, !11, i64 32}
!328 = !{!329, !11, i64 88}
!329 = !{!"regexp_engine", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88}
!330 = !{!40, !16, i64 16}
!331 = distinct !{!331, !66}
!332 = !{!333, !22, i64 4}
!333 = !{!"regnode_2", !7, i64 0, !7, i64 1, !22, i64 2, !22, i64 4, !22, i64 6}
!334 = !{!333, !22, i64 6}
!335 = !{!30, !16, i64 80}
!336 = distinct !{!336, !66}
!337 = distinct !{!337, !66}
!338 = distinct !{!338, !66}
!339 = distinct !{!339, !66}
!340 = distinct !{!340, !66}
!341 = distinct !{!341, !66}
!342 = distinct !{!342, !66}
!343 = distinct !{!343, !66}
!344 = distinct !{!344, !66}
!345 = distinct !{!345, !66}
!346 = distinct !{!346, !66}
!347 = distinct !{!347, !66}
!348 = distinct !{!348, !66}
!349 = distinct !{!349, !66}
!350 = distinct !{!350, !66}
!351 = distinct !{!351, !66}
!352 = !{!73, !12, i64 12}
!353 = !{!77, !11, i64 8}
!354 = !{!355, !11, i64 0}
!355 = !{!"io", !11, i64 0, !12, i64 8, !12, i64 12, !7, i64 16}
!356 = !{!357, !11, i64 40}
!357 = !{!"xpvio", !11, i64 0, !7, i64 8, !16, i64 16, !7, i64 24, !7, i64 32, !11, i64 40, !7, i64 48, !16, i64 56, !16, i64 64, !16, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120, !7, i64 128, !7, i64 129}
!358 = distinct !{!358, !66}
!359 = distinct !{!359, !66}
!360 = !{!21, !7, i64 18}
!361 = !{!21, !11, i64 8}
!362 = !{!363, !11, i64 0}
!363 = !{!"mgvtbl", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56}
!364 = distinct !{!364, !66}
!365 = distinct !{!365, !66}
!366 = distinct !{!366, !66}
!367 = distinct !{!367, !66}
!368 = distinct !{!368, !66}
!369 = distinct !{!369, !66}
!370 = distinct !{!370, !66}
!371 = distinct !{!371, !66}
!372 = distinct !{!372, !66}
!373 = distinct !{!373, !66}
!374 = distinct !{!374, !66}
!375 = distinct !{!375, !66}
!376 = distinct !{!376, !66}
!377 = distinct !{!377, !66}
!378 = distinct !{!378, !66}
!379 = distinct !{!379, !66}
!380 = distinct !{!380, !66}
!381 = distinct !{!381, !66}
!382 = distinct !{!382, !66}
!383 = distinct !{!383, !66}
!384 = distinct !{!384, !66}
!385 = distinct !{!385, !66}
!386 = distinct !{!386, !66}
!387 = distinct !{!387, !66}
!388 = distinct !{!388, !66}
!389 = distinct !{!389, !66}
!390 = distinct !{!390, !66}
!391 = distinct !{!391, !66}
!392 = distinct !{!392, !66}
!393 = distinct !{!393, !66}
!394 = distinct !{!394, !66}
!395 = distinct !{!395, !66}
!396 = distinct !{!396, !66}
