; ModuleID = 'perl.c'
source_filename = "perl.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.cop = type { ptr, ptr, ptr, i64, i16, i8, i8, i32, ptr, ptr, i32, i32, ptr, ptr }
%struct.sv = type { ptr, i32, i32, %union.anon }
%union.anon = type { ptr }
%struct.jmpenv = type { [1 x %struct.__jmp_buf_tag], ptr, i32, i8 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.perl_debug_pad = type { [3 x %struct.sv] }
%struct.mgvtbl = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.stackinfo = type { ptr, ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.av = type { ptr, i32, i32, %union.anon.7 }
%union.anon.7 = type { ptr }
%struct.xpvav = type { ptr, %union._xmgu, i64, i64, ptr }
%union._xmgu = type { ptr }
%struct.hv = type { ptr, i32, i32, %union.anon.0 }
%union.anon.0 = type { ptr }
%struct.xpvhv = type { ptr, %union._xmgu, i64, i64 }
%struct.xpvcv = type { ptr, %union._xmgu, i64, %union.anon.1, ptr, %union.anon.2, %union.anon.3, %union.anon.4, ptr, %union.anon.5, ptr, i32, i32, i32 }
%union.anon.1 = type { i64 }
%union.anon.2 = type { ptr }
%union.anon.3 = type { ptr }
%union.anon.4 = type { ptr }
%union.anon.5 = type { ptr }
%struct.padlist = type { i64, ptr, i32, i32 }
%struct.exitlistentry = type { ptr, ptr }
%struct.yy_parser = type { ptr, %union.YYSTYPE, i32, i32, i32, i32, ptr, ptr, i32, i32, ptr, ptr, i8, i8, i8, i8, i32, ptr, ptr, ptr, i16, i16, i32, ptr, i32, i32, i8, i8, i8, i8, i32, %struct._sublex_info, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i16, i8, i8, ptr, ptr, ptr, i8, [5 x %union.YYSTYPE], [5 x i32], i32, ptr, [256 x i8], i32, i32, i8, i8, i8 }
%union.YYSTYPE = type { ptr }
%struct._sublex_info = type { i8, i16, ptr, ptr }
%struct.he = type { ptr, ptr, %union.anon.8 }
%union.anon.8 = type { ptr }
%struct.hek = type { i32, i32, [1 x i8] }
%struct.regmatch_slab = type { [33 x %struct.regmatch_state], ptr, ptr }
%struct.regmatch_state = type { i32, ptr, %union.anon.9 }
%union.anon.9 = type { %struct.anon.20 }
%struct.anon.20 = type { i32, i32, i32, i32, i32, i32, ptr, ptr, i32, i32, i32, ptr, ptr, [14 x i8], [14 x i8] }
%struct.xpvmg = type { ptr, %union._xmgu, i64, %union.anon.21, %union._xivu, %union._xnvu }
%union.anon.21 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%struct.magic = type { ptr, ptr, i16, i8, i8, i64, ptr, ptr }
%struct.xpv = type { ptr, %union._xmgu, i64, %union.anon.23 }
%union.anon.23 = type { i64 }
%struct.gv = type { ptr, i32, i32, %union.anon.24 }
%union.anon.24 = type { ptr }
%struct.gp = type { ptr, ptr, ptr, i32, i32, ptr, ptr, ptr, ptr, i32, ptr }
%struct.xpvio = type { ptr, %union._xmgu, i64, %union.anon.25, %union._xivu, ptr, %union.anon.26, i64, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%union.anon.25 = type { i64 }
%union.anon.26 = type { ptr }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.xpvgv = type { ptr, %union._xmgu, i64, %union.anon.31, %union._xivu, %union._xnvu }
%union.anon.31 = type { i64 }
%struct.io = type { ptr, i32, i32, %union.anon.27 }
%union.anon.27 = type { ptr }
%struct.logop = type { ptr, ptr, ptr, i64, i16, i8, i8, ptr, ptr }
%struct.methop = type { ptr, ptr, ptr, i64, i16, i8, i8, %union.anon.28, ptr }
%union.anon.28 = type { ptr }
%struct.unop = type { ptr, ptr, ptr, i64, i16, i8, i8, ptr }
%struct.xpviv = type { ptr, %union._xmgu, i64, %union.anon.29, %union._xivu }
%union.anon.29 = type { i64 }
%struct.xpvnv = type { ptr, %union._xmgu, i64, %union.anon.30, %union._xivu, %union._xnvu }
%union.anon.30 = type { i64 }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }

@PL_sigfpe_saved = external local_unnamed_addr global ptr, align 8
@PL_veto_cleanup = external local_unnamed_addr global i32, align 4
@PL_perl_destruct_level = external local_unnamed_addr global i8, align 1
@PL_compiling = external global %struct.cop, align 8
@PL_curcop = external local_unnamed_addr global ptr, align 8
@PL_sv_placeholder = external local_unnamed_addr global %struct.sv, align 8
@PL_sighandlerp = external local_unnamed_addr global ptr, align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_rs = external local_unnamed_addr global ptr, align 8
@PL_start_env = external global %struct.jmpenv, align 8
@PL_top_env = external local_unnamed_addr global ptr, align 8
@PL_statusvalue = external local_unnamed_addr global i32, align 4
@PL_statusvalue_posix = external local_unnamed_addr global i32, align 4
@local_patches = internal constant [2 x ptr] zeroinitializer, align 16
@PL_localpatches = external local_unnamed_addr global ptr, align 8
@PL_fdpid = external local_unnamed_addr global ptr, align 8
@PL_modglobal = external local_unnamed_addr global ptr, align 8
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_errors = external local_unnamed_addr global ptr, align 8
@PL_debug_pad = external global %struct.perl_debug_pad, align 8
@PL_hash_seed_set = external local_unnamed_addr global i8, align 1
@PL_hash_seed = external global [8 x i8], align 1
@PL_strtab = external local_unnamed_addr global ptr, align 8
@PL_sv_consts = external local_unnamed_addr global [35 x ptr], align 16
@environ = external local_unnamed_addr global ptr, align 8
@PL_origenviron = external local_unnamed_addr global ptr, align 8
@PL_clocktick = external local_unnamed_addr global i64, align 8
@PL_stashcache = external local_unnamed_addr global ptr, align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"v5.22.1\00", align 1
@PL_patchlevel = external local_unnamed_addr global ptr, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"spec-cpu\00", align 1
@PL_osname = external local_unnamed_addr global ptr, align 8
@PL_registered_mros = external local_unnamed_addr global ptr, align 8
@ASCII_invlist = internal constant [5 x i64] [i64 2, i64 148565664, i64 0, i64 0, i64 128], align 16
@PL_XPosix_ptrs = external local_unnamed_addr global [16 x ptr], align 16
@XPosixAlnum_invlist = internal constant [1264 x i64] [i64 1261, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 65, i64 91, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 837, i64 838, i64 880, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1456, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1552, i64 1563, i64 1568, i64 1624, i64 1625, i64 1642, i64 1646, i64 1748, i64 1749, i64 1757, i64 1761, i64 1769, i64 1773, i64 1789, i64 1791, i64 1792, i64 1808, i64 1856, i64 1869, i64 1970, i64 1984, i64 2027, i64 2036, i64 2038, i64 2042, i64 2043, i64 2048, i64 2072, i64 2074, i64 2093, i64 2112, i64 2137, i64 2208, i64 2227, i64 2276, i64 2282, i64 2288, i64 2364, i64 2365, i64 2381, i64 2382, i64 2385, i64 2389, i64 2404, i64 2406, i64 2416, i64 2417, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2493, i64 2501, i64 2503, i64 2505, i64 2507, i64 2509, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2637, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2749, i64 2758, i64 2759, i64 2762, i64 2763, i64 2765, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2877, i64 2885, i64 2887, i64 2889, i64 2891, i64 2893, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3021, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3149, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3261, i64 3269, i64 3270, i64 3273, i64 3274, i64 3277, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3405, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3585, i64 3643, i64 3648, i64 3655, i64 3661, i64 3662, i64 3664, i64 3674, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3789, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3841, i64 3872, i64 3882, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3970, i64 3976, i64 3992, i64 3993, i64 4029, i64 4096, i64 4151, i64 4152, i64 4153, i64 4155, i64 4170, i64 4176, i64 4195, i64 4197, i64 4201, i64 4206, i64 4231, i64 4238, i64 4239, i64 4240, i64 4250, i64 4252, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4959, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5908, i64 5920, i64 5940, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6068, i64 6070, i64 6089, i64 6103, i64 6104, i64 6108, i64 6109, i64 6112, i64 6122, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6457, i64 6470, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6618, i64 6656, i64 6684, i64 6688, i64 6751, i64 6753, i64 6773, i64 6784, i64 6794, i64 6800, i64 6810, i64 6823, i64 6824, i64 6912, i64 6964, i64 6965, i64 6980, i64 6981, i64 6988, i64 6992, i64 7002, i64 7040, i64 7082, i64 7084, i64 7142, i64 7143, i64 7154, i64 7168, i64 7222, i64 7232, i64 7242, i64 7245, i64 7294, i64 7401, i64 7405, i64 7406, i64 7412, i64 7413, i64 7415, i64 7424, i64 7616, i64 7655, i64 7669, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12296, i64 12321, i64 12330, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42540, i64 42560, i64 42607, i64 42612, i64 42620, i64 42623, i64 42654, i64 42655, i64 42736, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43048, i64 43072, i64 43124, i64 43136, i64 43204, i64 43216, i64 43226, i64 43250, i64 43256, i64 43259, i64 43260, i64 43264, i64 43307, i64 43312, i64 43347, i64 43360, i64 43389, i64 43392, i64 43443, i64 43444, i64 43456, i64 43471, i64 43482, i64 43488, i64 43493, i64 43494, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43616, i64 43639, i64 43642, i64 43643, i64 43646, i64 43711, i64 43712, i64 43713, i64 43714, i64 43715, i64 43739, i64 43742, i64 43744, i64 43760, i64 43762, i64 43766, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44011, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65136, i64 65141, i64 65142, i64 65277, i64 65296, i64 65306, i64 65313, i64 65339, i64 65345, i64 65371, i64 65382, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66176, i64 66205, i64 66208, i64 66257, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69702, i64 69734, i64 69744, i64 69762, i64 69817, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69939, i64 69942, i64 69952, i64 69968, i64 70003, i64 70006, i64 70007, i64 70016, i64 70080, i64 70081, i64 70085, i64 70096, i64 70107, i64 70144, i64 70162, i64 70163, i64 70197, i64 70199, i64 70200, i64 70320, i64 70377, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70461, i64 70469, i64 70471, i64 70473, i64 70475, i64 70477, i64 70487, i64 70488, i64 70493, i64 70500, i64 70784, i64 70850, i64 70852, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71103, i64 71168, i64 71231, i64 71232, i64 71233, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71350, i64 71360, i64 71370, i64 71840, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92880, i64 92910, i64 92928, i64 92983, i64 92992, i64 92996, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94099, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113822, i64 113823, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102], align 16
@XPosixAlpha_invlist = internal constant [1204 x i64] [i64 1201, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 837, i64 838, i64 880, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1456, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1552, i64 1563, i64 1568, i64 1624, i64 1625, i64 1632, i64 1646, i64 1748, i64 1749, i64 1757, i64 1761, i64 1769, i64 1773, i64 1776, i64 1786, i64 1789, i64 1791, i64 1792, i64 1808, i64 1856, i64 1869, i64 1970, i64 1994, i64 2027, i64 2036, i64 2038, i64 2042, i64 2043, i64 2048, i64 2072, i64 2074, i64 2093, i64 2112, i64 2137, i64 2208, i64 2227, i64 2276, i64 2282, i64 2288, i64 2364, i64 2365, i64 2381, i64 2382, i64 2385, i64 2389, i64 2404, i64 2417, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2493, i64 2501, i64 2503, i64 2505, i64 2507, i64 2509, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2544, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2637, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2672, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2749, i64 2758, i64 2759, i64 2762, i64 2763, i64 2765, i64 2768, i64 2769, i64 2784, i64 2788, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2877, i64 2885, i64 2887, i64 2889, i64 2891, i64 2893, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2929, i64 2930, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3021, i64 3024, i64 3025, i64 3031, i64 3032, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3149, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3261, i64 3269, i64 3270, i64 3273, i64 3274, i64 3277, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3405, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3570, i64 3572, i64 3585, i64 3643, i64 3648, i64 3655, i64 3661, i64 3662, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3789, i64 3790, i64 3804, i64 3808, i64 3840, i64 3841, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3970, i64 3976, i64 3992, i64 3993, i64 4029, i64 4096, i64 4151, i64 4152, i64 4153, i64 4155, i64 4160, i64 4176, i64 4195, i64 4197, i64 4201, i64 4206, i64 4231, i64 4238, i64 4239, i64 4252, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4959, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5908, i64 5920, i64 5940, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6068, i64 6070, i64 6089, i64 6103, i64 6104, i64 6108, i64 6109, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6457, i64 6480, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6656, i64 6684, i64 6688, i64 6751, i64 6753, i64 6773, i64 6823, i64 6824, i64 6912, i64 6964, i64 6965, i64 6980, i64 6981, i64 6988, i64 7040, i64 7082, i64 7084, i64 7088, i64 7098, i64 7142, i64 7143, i64 7154, i64 7168, i64 7222, i64 7245, i64 7248, i64 7258, i64 7294, i64 7401, i64 7405, i64 7406, i64 7412, i64 7413, i64 7415, i64 7424, i64 7616, i64 7655, i64 7669, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12296, i64 12321, i64 12330, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42528, i64 42538, i64 42540, i64 42560, i64 42607, i64 42612, i64 42620, i64 42623, i64 42654, i64 42655, i64 42736, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43048, i64 43072, i64 43124, i64 43136, i64 43204, i64 43250, i64 43256, i64 43259, i64 43260, i64 43274, i64 43307, i64 43312, i64 43347, i64 43360, i64 43389, i64 43392, i64 43443, i64 43444, i64 43456, i64 43471, i64 43472, i64 43488, i64 43493, i64 43494, i64 43504, i64 43514, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43616, i64 43639, i64 43642, i64 43643, i64 43646, i64 43711, i64 43712, i64 43713, i64 43714, i64 43715, i64 43739, i64 43742, i64 43744, i64 43760, i64 43762, i64 43766, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44011, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65136, i64 65141, i64 65142, i64 65277, i64 65313, i64 65339, i64 65345, i64 65371, i64 65382, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66176, i64 66205, i64 66208, i64 66257, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69702, i64 69762, i64 69817, i64 69840, i64 69865, i64 69888, i64 69939, i64 69968, i64 70003, i64 70006, i64 70007, i64 70016, i64 70080, i64 70081, i64 70085, i64 70106, i64 70107, i64 70144, i64 70162, i64 70163, i64 70197, i64 70199, i64 70200, i64 70320, i64 70377, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70461, i64 70469, i64 70471, i64 70473, i64 70475, i64 70477, i64 70487, i64 70488, i64 70493, i64 70500, i64 70784, i64 70850, i64 70852, i64 70854, i64 70855, i64 70856, i64 71040, i64 71094, i64 71096, i64 71103, i64 71168, i64 71231, i64 71232, i64 71233, i64 71236, i64 71237, i64 71296, i64 71350, i64 71840, i64 71904, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92880, i64 92910, i64 92928, i64 92983, i64 92992, i64 92996, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94099, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113822, i64 113823, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 124928, i64 125125, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102], align 16
@XPosixBlank_invlist = internal constant [20 x i64] [i64 17, i64 148565664, i64 1, i64 0, i64 9, i64 10, i64 32, i64 33, i64 160, i64 161, i64 5760, i64 5761, i64 8192, i64 8203, i64 8239, i64 8240, i64 8287, i64 8288, i64 12288, i64 12289], align 16
@Cased_invlist = internal constant [258 x i64] [i64 255, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 443, i64 444, i64 448, i64 452, i64 660, i64 661, i64 697, i64 704, i64 706, i64 736, i64 741, i64 837, i64 838, i64 880, i64 884, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1162, i64 1328, i64 1329, i64 1367, i64 1377, i64 1416, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 7424, i64 7616, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8501, i64 8505, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8576, i64 8579, i64 8581, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 42560, i64 42606, i64 42624, i64 42654, i64 42786, i64 42888, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 43000, i64 43003, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 64256, i64 64263, i64 64275, i64 64280, i64 65313, i64 65339, i64 65345, i64 65371, i64 66560, i64 66640, i64 71840, i64 71904, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370], align 16
@XPosixCntrl_invlist = internal constant [7 x i64] [i64 4, i64 148565664, i64 0, i64 0, i64 32, i64 127, i64 160], align 16
@XPosixDigit_invlist = internal constant [104 x i64] [i64 101, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 1632, i64 1642, i64 1776, i64 1786, i64 1984, i64 1994, i64 2406, i64 2416, i64 2534, i64 2544, i64 2662, i64 2672, i64 2790, i64 2800, i64 2918, i64 2928, i64 3046, i64 3056, i64 3174, i64 3184, i64 3302, i64 3312, i64 3430, i64 3440, i64 3558, i64 3568, i64 3664, i64 3674, i64 3792, i64 3802, i64 3872, i64 3882, i64 4160, i64 4170, i64 4240, i64 4250, i64 6112, i64 6122, i64 6160, i64 6170, i64 6470, i64 6480, i64 6608, i64 6618, i64 6784, i64 6794, i64 6800, i64 6810, i64 6992, i64 7002, i64 7088, i64 7098, i64 7232, i64 7242, i64 7248, i64 7258, i64 42528, i64 42538, i64 43216, i64 43226, i64 43264, i64 43274, i64 43472, i64 43482, i64 43504, i64 43514, i64 43600, i64 43610, i64 44016, i64 44026, i64 65296, i64 65306, i64 66720, i64 66730, i64 69734, i64 69744, i64 69872, i64 69882, i64 69942, i64 69952, i64 70096, i64 70106, i64 70384, i64 70394, i64 70864, i64 70874, i64 71248, i64 71258, i64 71360, i64 71370, i64 71904, i64 71914, i64 92768, i64 92778, i64 93008, i64 93018, i64 120782, i64 120832], align 16
@XPosixGraph_invlist = internal constant [1214 x i64] [i64 1211, i64 148565664, i64 1, i64 0, i64 33, i64 127, i64 161, i64 888, i64 890, i64 896, i64 900, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1328, i64 1329, i64 1367, i64 1369, i64 1376, i64 1377, i64 1416, i64 1417, i64 1419, i64 1421, i64 1424, i64 1425, i64 1480, i64 1488, i64 1515, i64 1520, i64 1525, i64 1536, i64 1565, i64 1566, i64 1806, i64 1807, i64 1867, i64 1869, i64 1970, i64 1984, i64 2043, i64 2048, i64 2094, i64 2096, i64 2111, i64 2112, i64 2140, i64 2142, i64 2143, i64 2208, i64 2227, i64 2276, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2501, i64 2503, i64 2505, i64 2507, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2556, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2802, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2936, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3067, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3192, i64 3200, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3446, i64 3449, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3573, i64 3585, i64 3643, i64 3647, i64 3676, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3912, i64 3913, i64 3949, i64 3953, i64 3992, i64 3993, i64 4029, i64 4030, i64 4045, i64 4046, i64 4059, i64 4096, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4989, i64 4992, i64 5018, i64 5024, i64 5109, i64 5120, i64 5760, i64 5761, i64 5789, i64 5792, i64 5881, i64 5888, i64 5901, i64 5902, i64 5909, i64 5920, i64 5943, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6110, i64 6112, i64 6122, i64 6128, i64 6138, i64 6144, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6464, i64 6465, i64 6468, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6619, i64 6622, i64 6684, i64 6686, i64 6751, i64 6752, i64 6781, i64 6783, i64 6794, i64 6800, i64 6810, i64 6816, i64 6830, i64 6832, i64 6847, i64 6912, i64 6988, i64 6992, i64 7037, i64 7040, i64 7156, i64 7164, i64 7224, i64 7227, i64 7242, i64 7245, i64 7296, i64 7360, i64 7368, i64 7376, i64 7415, i64 7416, i64 7418, i64 7424, i64 7670, i64 7676, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8133, i64 8134, i64 8148, i64 8150, i64 8156, i64 8157, i64 8176, i64 8178, i64 8181, i64 8182, i64 8191, i64 8203, i64 8232, i64 8234, i64 8239, i64 8240, i64 8287, i64 8288, i64 8293, i64 8294, i64 8306, i64 8308, i64 8335, i64 8336, i64 8349, i64 8352, i64 8382, i64 8400, i64 8433, i64 8448, i64 8586, i64 8592, i64 9211, i64 9216, i64 9255, i64 9280, i64 9291, i64 9312, i64 11124, i64 11126, i64 11158, i64 11160, i64 11194, i64 11197, i64 11209, i64 11210, i64 11218, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11508, i64 11513, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11633, i64 11647, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11843, i64 11904, i64 11930, i64 11931, i64 12020, i64 12032, i64 12246, i64 12272, i64 12284, i64 12289, i64 12352, i64 12353, i64 12439, i64 12441, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12688, i64 12731, i64 12736, i64 12772, i64 12784, i64 12831, i64 12832, i64 13055, i64 13056, i64 19894, i64 19904, i64 40909, i64 40960, i64 42125, i64 42128, i64 42183, i64 42192, i64 42540, i64 42560, i64 42654, i64 42655, i64 42744, i64 42752, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43052, i64 43056, i64 43066, i64 43072, i64 43128, i64 43136, i64 43205, i64 43214, i64 43226, i64 43232, i64 43260, i64 43264, i64 43348, i64 43359, i64 43389, i64 43392, i64 43470, i64 43471, i64 43482, i64 43486, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43612, i64 43715, i64 43739, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43872, i64 43876, i64 43878, i64 43968, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 57344, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64450, i64 64467, i64 64832, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65022, i64 65024, i64 65050, i64 65056, i64 65070, i64 65072, i64 65107, i64 65108, i64 65127, i64 65128, i64 65132, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65281, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65504, i64 65511, i64 65512, i64 65519, i64 65529, i64 65534, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65792, i64 65795, i64 65799, i64 65844, i64 65847, i64 65933, i64 65936, i64 65948, i64 65952, i64 65953, i64 66000, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66300, i64 66304, i64 66340, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66463, i64 66500, i64 66504, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 66927, i64 66928, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67671, i64 67743, i64 67751, i64 67760, i64 67840, i64 67868, i64 67871, i64 67898, i64 67903, i64 67904, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68168, i64 68176, i64 68185, i64 68192, i64 68256, i64 68288, i64 68327, i64 68331, i64 68343, i64 68352, i64 68406, i64 68409, i64 68438, i64 68440, i64 68467, i64 68472, i64 68498, i64 68505, i64 68509, i64 68521, i64 68528, i64 68608, i64 68681, i64 69216, i64 69247, i64 69632, i64 69710, i64 69714, i64 69744, i64 69759, i64 69826, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69941, i64 69942, i64 69956, i64 69968, i64 70007, i64 70016, i64 70089, i64 70093, i64 70094, i64 70096, i64 70107, i64 70113, i64 70133, i64 70144, i64 70162, i64 70163, i64 70206, i64 70320, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71114, i64 71168, i64 71237, i64 71248, i64 71258, i64 71296, i64 71352, i64 71360, i64 71370, i64 71840, i64 71923, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 74864, i64 74869, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92782, i64 92784, i64 92880, i64 92910, i64 92912, i64 92918, i64 92928, i64 92998, i64 93008, i64 93018, i64 93019, i64 93026, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94095, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113820, i64 113828, i64 118784, i64 119030, i64 119040, i64 119079, i64 119081, i64 119262, i64 119296, i64 119366, i64 119552, i64 119639, i64 119648, i64 119666, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125127, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 126704, i64 126706, i64 126976, i64 127020, i64 127024, i64 127124, i64 127136, i64 127151, i64 127153, i64 127168, i64 127169, i64 127184, i64 127185, i64 127222, i64 127232, i64 127245, i64 127248, i64 127279, i64 127280, i64 127340, i64 127344, i64 127387, i64 127462, i64 127491, i64 127504, i64 127547, i64 127552, i64 127561, i64 127568, i64 127570, i64 127744, i64 127789, i64 127792, i64 127870, i64 127872, i64 127951, i64 127956, i64 127992, i64 128000, i64 128255, i64 128256, i64 128331, i64 128336, i64 128378, i64 128379, i64 128420, i64 128421, i64 128579, i64 128581, i64 128720, i64 128736, i64 128749, i64 128752, i64 128756, i64 128768, i64 128884, i64 128896, i64 128981, i64 129024, i64 129036, i64 129040, i64 129096, i64 129104, i64 129114, i64 129120, i64 129160, i64 129168, i64 129198, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000, i64 983040, i64 1048574, i64 1048576, i64 1114110], align 16
@XPosixLower_invlist = internal constant [1270 x i64] [i64 1267, i64 148565664, i64 1, i64 0, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 223, i64 247, i64 248, i64 256, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 287, i64 288, i64 289, i64 290, i64 291, i64 292, i64 293, i64 294, i64 295, i64 296, i64 297, i64 298, i64 299, i64 300, i64 301, i64 302, i64 303, i64 304, i64 305, i64 306, i64 307, i64 308, i64 309, i64 310, i64 311, i64 313, i64 314, i64 315, i64 316, i64 317, i64 318, i64 319, i64 320, i64 321, i64 322, i64 323, i64 324, i64 325, i64 326, i64 327, i64 328, i64 330, i64 331, i64 332, i64 333, i64 334, i64 335, i64 336, i64 337, i64 338, i64 339, i64 340, i64 341, i64 342, i64 343, i64 344, i64 345, i64 346, i64 347, i64 348, i64 349, i64 350, i64 351, i64 352, i64 353, i64 354, i64 355, i64 356, i64 357, i64 358, i64 359, i64 360, i64 361, i64 362, i64 363, i64 364, i64 365, i64 366, i64 367, i64 368, i64 369, i64 370, i64 371, i64 372, i64 373, i64 374, i64 375, i64 376, i64 378, i64 379, i64 380, i64 381, i64 382, i64 385, i64 387, i64 388, i64 389, i64 390, i64 392, i64 393, i64 396, i64 398, i64 402, i64 403, i64 405, i64 406, i64 409, i64 412, i64 414, i64 415, i64 417, i64 418, i64 419, i64 420, i64 421, i64 422, i64 424, i64 425, i64 426, i64 428, i64 429, i64 430, i64 432, i64 433, i64 436, i64 437, i64 438, i64 439, i64 441, i64 443, i64 445, i64 448, i64 454, i64 455, i64 457, i64 458, i64 460, i64 461, i64 462, i64 463, i64 464, i64 465, i64 466, i64 467, i64 468, i64 469, i64 470, i64 471, i64 472, i64 473, i64 474, i64 475, i64 476, i64 478, i64 479, i64 480, i64 481, i64 482, i64 483, i64 484, i64 485, i64 486, i64 487, i64 488, i64 489, i64 490, i64 491, i64 492, i64 493, i64 494, i64 495, i64 497, i64 499, i64 500, i64 501, i64 502, i64 505, i64 506, i64 507, i64 508, i64 509, i64 510, i64 511, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 570, i64 572, i64 573, i64 575, i64 577, i64 578, i64 579, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 660, i64 661, i64 697, i64 704, i64 706, i64 736, i64 741, i64 837, i64 838, i64 881, i64 882, i64 883, i64 884, i64 887, i64 888, i64 890, i64 894, i64 912, i64 913, i64 940, i64 975, i64 976, i64 978, i64 981, i64 984, i64 985, i64 986, i64 987, i64 988, i64 989, i64 990, i64 991, i64 992, i64 993, i64 994, i64 995, i64 996, i64 997, i64 998, i64 999, i64 1000, i64 1001, i64 1002, i64 1003, i64 1004, i64 1005, i64 1006, i64 1007, i64 1012, i64 1013, i64 1014, i64 1016, i64 1017, i64 1019, i64 1021, i64 1072, i64 1120, i64 1121, i64 1122, i64 1123, i64 1124, i64 1125, i64 1126, i64 1127, i64 1128, i64 1129, i64 1130, i64 1131, i64 1132, i64 1133, i64 1134, i64 1135, i64 1136, i64 1137, i64 1138, i64 1139, i64 1140, i64 1141, i64 1142, i64 1143, i64 1144, i64 1145, i64 1146, i64 1147, i64 1148, i64 1149, i64 1150, i64 1151, i64 1152, i64 1153, i64 1154, i64 1163, i64 1164, i64 1165, i64 1166, i64 1167, i64 1168, i64 1169, i64 1170, i64 1171, i64 1172, i64 1173, i64 1174, i64 1175, i64 1176, i64 1177, i64 1178, i64 1179, i64 1180, i64 1181, i64 1182, i64 1183, i64 1184, i64 1185, i64 1186, i64 1187, i64 1188, i64 1189, i64 1190, i64 1191, i64 1192, i64 1193, i64 1194, i64 1195, i64 1196, i64 1197, i64 1198, i64 1199, i64 1200, i64 1201, i64 1202, i64 1203, i64 1204, i64 1205, i64 1206, i64 1207, i64 1208, i64 1209, i64 1210, i64 1211, i64 1212, i64 1213, i64 1214, i64 1215, i64 1216, i64 1218, i64 1219, i64 1220, i64 1221, i64 1222, i64 1223, i64 1224, i64 1225, i64 1226, i64 1227, i64 1228, i64 1229, i64 1230, i64 1232, i64 1233, i64 1234, i64 1235, i64 1236, i64 1237, i64 1238, i64 1239, i64 1240, i64 1241, i64 1242, i64 1243, i64 1244, i64 1245, i64 1246, i64 1247, i64 1248, i64 1249, i64 1250, i64 1251, i64 1252, i64 1253, i64 1254, i64 1255, i64 1256, i64 1257, i64 1258, i64 1259, i64 1260, i64 1261, i64 1262, i64 1263, i64 1264, i64 1265, i64 1266, i64 1267, i64 1268, i64 1269, i64 1270, i64 1271, i64 1272, i64 1273, i64 1274, i64 1275, i64 1276, i64 1277, i64 1278, i64 1279, i64 1280, i64 1281, i64 1282, i64 1283, i64 1284, i64 1285, i64 1286, i64 1287, i64 1288, i64 1289, i64 1290, i64 1291, i64 1292, i64 1293, i64 1294, i64 1295, i64 1296, i64 1297, i64 1298, i64 1299, i64 1300, i64 1301, i64 1302, i64 1303, i64 1304, i64 1305, i64 1306, i64 1307, i64 1308, i64 1309, i64 1310, i64 1311, i64 1312, i64 1313, i64 1314, i64 1315, i64 1316, i64 1317, i64 1318, i64 1319, i64 1320, i64 1321, i64 1322, i64 1323, i64 1324, i64 1325, i64 1326, i64 1327, i64 1328, i64 1377, i64 1416, i64 7424, i64 7616, i64 7681, i64 7682, i64 7683, i64 7684, i64 7685, i64 7686, i64 7687, i64 7688, i64 7689, i64 7690, i64 7691, i64 7692, i64 7693, i64 7694, i64 7695, i64 7696, i64 7697, i64 7698, i64 7699, i64 7700, i64 7701, i64 7702, i64 7703, i64 7704, i64 7705, i64 7706, i64 7707, i64 7708, i64 7709, i64 7710, i64 7711, i64 7712, i64 7713, i64 7714, i64 7715, i64 7716, i64 7717, i64 7718, i64 7719, i64 7720, i64 7721, i64 7722, i64 7723, i64 7724, i64 7725, i64 7726, i64 7727, i64 7728, i64 7729, i64 7730, i64 7731, i64 7732, i64 7733, i64 7734, i64 7735, i64 7736, i64 7737, i64 7738, i64 7739, i64 7740, i64 7741, i64 7742, i64 7743, i64 7744, i64 7745, i64 7746, i64 7747, i64 7748, i64 7749, i64 7750, i64 7751, i64 7752, i64 7753, i64 7754, i64 7755, i64 7756, i64 7757, i64 7758, i64 7759, i64 7760, i64 7761, i64 7762, i64 7763, i64 7764, i64 7765, i64 7766, i64 7767, i64 7768, i64 7769, i64 7770, i64 7771, i64 7772, i64 7773, i64 7774, i64 7775, i64 7776, i64 7777, i64 7778, i64 7779, i64 7780, i64 7781, i64 7782, i64 7783, i64 7784, i64 7785, i64 7786, i64 7787, i64 7788, i64 7789, i64 7790, i64 7791, i64 7792, i64 7793, i64 7794, i64 7795, i64 7796, i64 7797, i64 7798, i64 7799, i64 7800, i64 7801, i64 7802, i64 7803, i64 7804, i64 7805, i64 7806, i64 7807, i64 7808, i64 7809, i64 7810, i64 7811, i64 7812, i64 7813, i64 7814, i64 7815, i64 7816, i64 7817, i64 7818, i64 7819, i64 7820, i64 7821, i64 7822, i64 7823, i64 7824, i64 7825, i64 7826, i64 7827, i64 7828, i64 7829, i64 7838, i64 7839, i64 7840, i64 7841, i64 7842, i64 7843, i64 7844, i64 7845, i64 7846, i64 7847, i64 7848, i64 7849, i64 7850, i64 7851, i64 7852, i64 7853, i64 7854, i64 7855, i64 7856, i64 7857, i64 7858, i64 7859, i64 7860, i64 7861, i64 7862, i64 7863, i64 7864, i64 7865, i64 7866, i64 7867, i64 7868, i64 7869, i64 7870, i64 7871, i64 7872, i64 7873, i64 7874, i64 7875, i64 7876, i64 7877, i64 7878, i64 7879, i64 7880, i64 7881, i64 7882, i64 7883, i64 7884, i64 7885, i64 7886, i64 7887, i64 7888, i64 7889, i64 7890, i64 7891, i64 7892, i64 7893, i64 7894, i64 7895, i64 7896, i64 7897, i64 7898, i64 7899, i64 7900, i64 7901, i64 7902, i64 7903, i64 7904, i64 7905, i64 7906, i64 7907, i64 7908, i64 7909, i64 7910, i64 7911, i64 7912, i64 7913, i64 7914, i64 7915, i64 7916, i64 7917, i64 7918, i64 7919, i64 7920, i64 7921, i64 7922, i64 7923, i64 7924, i64 7925, i64 7926, i64 7927, i64 7928, i64 7929, i64 7930, i64 7931, i64 7932, i64 7933, i64 7934, i64 7935, i64 7944, i64 7952, i64 7958, i64 7968, i64 7976, i64 7984, i64 7992, i64 8000, i64 8006, i64 8016, i64 8024, i64 8032, i64 8040, i64 8048, i64 8062, i64 8064, i64 8072, i64 8080, i64 8088, i64 8096, i64 8104, i64 8112, i64 8117, i64 8118, i64 8120, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8136, i64 8144, i64 8148, i64 8150, i64 8152, i64 8160, i64 8168, i64 8178, i64 8181, i64 8182, i64 8184, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8458, i64 8459, i64 8462, i64 8464, i64 8467, i64 8468, i64 8495, i64 8496, i64 8500, i64 8501, i64 8505, i64 8506, i64 8508, i64 8510, i64 8518, i64 8522, i64 8526, i64 8527, i64 8560, i64 8576, i64 8580, i64 8581, i64 9424, i64 9450, i64 11312, i64 11359, i64 11361, i64 11362, i64 11365, i64 11367, i64 11368, i64 11369, i64 11370, i64 11371, i64 11372, i64 11373, i64 11377, i64 11378, i64 11379, i64 11381, i64 11382, i64 11390, i64 11393, i64 11394, i64 11395, i64 11396, i64 11397, i64 11398, i64 11399, i64 11400, i64 11401, i64 11402, i64 11403, i64 11404, i64 11405, i64 11406, i64 11407, i64 11408, i64 11409, i64 11410, i64 11411, i64 11412, i64 11413, i64 11414, i64 11415, i64 11416, i64 11417, i64 11418, i64 11419, i64 11420, i64 11421, i64 11422, i64 11423, i64 11424, i64 11425, i64 11426, i64 11427, i64 11428, i64 11429, i64 11430, i64 11431, i64 11432, i64 11433, i64 11434, i64 11435, i64 11436, i64 11437, i64 11438, i64 11439, i64 11440, i64 11441, i64 11442, i64 11443, i64 11444, i64 11445, i64 11446, i64 11447, i64 11448, i64 11449, i64 11450, i64 11451, i64 11452, i64 11453, i64 11454, i64 11455, i64 11456, i64 11457, i64 11458, i64 11459, i64 11460, i64 11461, i64 11462, i64 11463, i64 11464, i64 11465, i64 11466, i64 11467, i64 11468, i64 11469, i64 11470, i64 11471, i64 11472, i64 11473, i64 11474, i64 11475, i64 11476, i64 11477, i64 11478, i64 11479, i64 11480, i64 11481, i64 11482, i64 11483, i64 11484, i64 11485, i64 11486, i64 11487, i64 11488, i64 11489, i64 11490, i64 11491, i64 11493, i64 11500, i64 11501, i64 11502, i64 11503, i64 11507, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 42561, i64 42562, i64 42563, i64 42564, i64 42565, i64 42566, i64 42567, i64 42568, i64 42569, i64 42570, i64 42571, i64 42572, i64 42573, i64 42574, i64 42575, i64 42576, i64 42577, i64 42578, i64 42579, i64 42580, i64 42581, i64 42582, i64 42583, i64 42584, i64 42585, i64 42586, i64 42587, i64 42588, i64 42589, i64 42590, i64 42591, i64 42592, i64 42593, i64 42594, i64 42595, i64 42596, i64 42597, i64 42598, i64 42599, i64 42600, i64 42601, i64 42602, i64 42603, i64 42604, i64 42605, i64 42606, i64 42625, i64 42626, i64 42627, i64 42628, i64 42629, i64 42630, i64 42631, i64 42632, i64 42633, i64 42634, i64 42635, i64 42636, i64 42637, i64 42638, i64 42639, i64 42640, i64 42641, i64 42642, i64 42643, i64 42644, i64 42645, i64 42646, i64 42647, i64 42648, i64 42649, i64 42650, i64 42651, i64 42654, i64 42787, i64 42788, i64 42789, i64 42790, i64 42791, i64 42792, i64 42793, i64 42794, i64 42795, i64 42796, i64 42797, i64 42798, i64 42799, i64 42802, i64 42803, i64 42804, i64 42805, i64 42806, i64 42807, i64 42808, i64 42809, i64 42810, i64 42811, i64 42812, i64 42813, i64 42814, i64 42815, i64 42816, i64 42817, i64 42818, i64 42819, i64 42820, i64 42821, i64 42822, i64 42823, i64 42824, i64 42825, i64 42826, i64 42827, i64 42828, i64 42829, i64 42830, i64 42831, i64 42832, i64 42833, i64 42834, i64 42835, i64 42836, i64 42837, i64 42838, i64 42839, i64 42840, i64 42841, i64 42842, i64 42843, i64 42844, i64 42845, i64 42846, i64 42847, i64 42848, i64 42849, i64 42850, i64 42851, i64 42852, i64 42853, i64 42854, i64 42855, i64 42856, i64 42857, i64 42858, i64 42859, i64 42860, i64 42861, i64 42862, i64 42863, i64 42873, i64 42874, i64 42875, i64 42876, i64 42877, i64 42879, i64 42880, i64 42881, i64 42882, i64 42883, i64 42884, i64 42885, i64 42886, i64 42887, i64 42888, i64 42892, i64 42893, i64 42894, i64 42895, i64 42897, i64 42898, i64 42899, i64 42902, i64 42903, i64 42904, i64 42905, i64 42906, i64 42907, i64 42908, i64 42909, i64 42910, i64 42911, i64 42912, i64 42913, i64 42914, i64 42915, i64 42916, i64 42917, i64 42918, i64 42919, i64 42920, i64 42921, i64 42922, i64 43000, i64 43003, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 64256, i64 64263, i64 64275, i64 64280, i64 65345, i64 65371, i64 66600, i64 66640, i64 71872, i64 71904, i64 119834, i64 119860, i64 119886, i64 119893, i64 119894, i64 119912, i64 119938, i64 119964, i64 119990, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120016, i64 120042, i64 120068, i64 120094, i64 120120, i64 120146, i64 120172, i64 120198, i64 120224, i64 120250, i64 120276, i64 120302, i64 120328, i64 120354, i64 120380, i64 120406, i64 120432, i64 120458, i64 120486, i64 120514, i64 120539, i64 120540, i64 120546, i64 120572, i64 120597, i64 120598, i64 120604, i64 120630, i64 120655, i64 120656, i64 120662, i64 120688, i64 120713, i64 120714, i64 120720, i64 120746, i64 120771, i64 120772, i64 120778, i64 120779, i64 120780], align 16
@XPosixPrint_invlist = internal constant [1208 x i64] [i64 1205, i64 148565664, i64 1, i64 0, i64 32, i64 127, i64 160, i64 888, i64 890, i64 896, i64 900, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1328, i64 1329, i64 1367, i64 1369, i64 1376, i64 1377, i64 1416, i64 1417, i64 1419, i64 1421, i64 1424, i64 1425, i64 1480, i64 1488, i64 1515, i64 1520, i64 1525, i64 1536, i64 1565, i64 1566, i64 1806, i64 1807, i64 1867, i64 1869, i64 1970, i64 1984, i64 2043, i64 2048, i64 2094, i64 2096, i64 2111, i64 2112, i64 2140, i64 2142, i64 2143, i64 2208, i64 2227, i64 2276, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2501, i64 2503, i64 2505, i64 2507, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2556, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2802, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2936, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3067, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3192, i64 3200, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3446, i64 3449, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3573, i64 3585, i64 3643, i64 3647, i64 3676, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3912, i64 3913, i64 3949, i64 3953, i64 3992, i64 3993, i64 4029, i64 4030, i64 4045, i64 4046, i64 4059, i64 4096, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4989, i64 4992, i64 5018, i64 5024, i64 5109, i64 5120, i64 5789, i64 5792, i64 5881, i64 5888, i64 5901, i64 5902, i64 5909, i64 5920, i64 5943, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6110, i64 6112, i64 6122, i64 6128, i64 6138, i64 6144, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6464, i64 6465, i64 6468, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6619, i64 6622, i64 6684, i64 6686, i64 6751, i64 6752, i64 6781, i64 6783, i64 6794, i64 6800, i64 6810, i64 6816, i64 6830, i64 6832, i64 6847, i64 6912, i64 6988, i64 6992, i64 7037, i64 7040, i64 7156, i64 7164, i64 7224, i64 7227, i64 7242, i64 7245, i64 7296, i64 7360, i64 7368, i64 7376, i64 7415, i64 7416, i64 7418, i64 7424, i64 7670, i64 7676, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8133, i64 8134, i64 8148, i64 8150, i64 8156, i64 8157, i64 8176, i64 8178, i64 8181, i64 8182, i64 8191, i64 8192, i64 8232, i64 8234, i64 8293, i64 8294, i64 8306, i64 8308, i64 8335, i64 8336, i64 8349, i64 8352, i64 8382, i64 8400, i64 8433, i64 8448, i64 8586, i64 8592, i64 9211, i64 9216, i64 9255, i64 9280, i64 9291, i64 9312, i64 11124, i64 11126, i64 11158, i64 11160, i64 11194, i64 11197, i64 11209, i64 11210, i64 11218, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11508, i64 11513, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11633, i64 11647, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11843, i64 11904, i64 11930, i64 11931, i64 12020, i64 12032, i64 12246, i64 12272, i64 12284, i64 12288, i64 12352, i64 12353, i64 12439, i64 12441, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12688, i64 12731, i64 12736, i64 12772, i64 12784, i64 12831, i64 12832, i64 13055, i64 13056, i64 19894, i64 19904, i64 40909, i64 40960, i64 42125, i64 42128, i64 42183, i64 42192, i64 42540, i64 42560, i64 42654, i64 42655, i64 42744, i64 42752, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43052, i64 43056, i64 43066, i64 43072, i64 43128, i64 43136, i64 43205, i64 43214, i64 43226, i64 43232, i64 43260, i64 43264, i64 43348, i64 43359, i64 43389, i64 43392, i64 43470, i64 43471, i64 43482, i64 43486, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43612, i64 43715, i64 43739, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43872, i64 43876, i64 43878, i64 43968, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 57344, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64450, i64 64467, i64 64832, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65022, i64 65024, i64 65050, i64 65056, i64 65070, i64 65072, i64 65107, i64 65108, i64 65127, i64 65128, i64 65132, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65281, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65504, i64 65511, i64 65512, i64 65519, i64 65529, i64 65534, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65792, i64 65795, i64 65799, i64 65844, i64 65847, i64 65933, i64 65936, i64 65948, i64 65952, i64 65953, i64 66000, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66300, i64 66304, i64 66340, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66463, i64 66500, i64 66504, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 66927, i64 66928, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67671, i64 67743, i64 67751, i64 67760, i64 67840, i64 67868, i64 67871, i64 67898, i64 67903, i64 67904, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68168, i64 68176, i64 68185, i64 68192, i64 68256, i64 68288, i64 68327, i64 68331, i64 68343, i64 68352, i64 68406, i64 68409, i64 68438, i64 68440, i64 68467, i64 68472, i64 68498, i64 68505, i64 68509, i64 68521, i64 68528, i64 68608, i64 68681, i64 69216, i64 69247, i64 69632, i64 69710, i64 69714, i64 69744, i64 69759, i64 69826, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69941, i64 69942, i64 69956, i64 69968, i64 70007, i64 70016, i64 70089, i64 70093, i64 70094, i64 70096, i64 70107, i64 70113, i64 70133, i64 70144, i64 70162, i64 70163, i64 70206, i64 70320, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71114, i64 71168, i64 71237, i64 71248, i64 71258, i64 71296, i64 71352, i64 71360, i64 71370, i64 71840, i64 71923, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 74864, i64 74869, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92782, i64 92784, i64 92880, i64 92910, i64 92912, i64 92918, i64 92928, i64 92998, i64 93008, i64 93018, i64 93019, i64 93026, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94095, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113820, i64 113828, i64 118784, i64 119030, i64 119040, i64 119079, i64 119081, i64 119262, i64 119296, i64 119366, i64 119552, i64 119639, i64 119648, i64 119666, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125127, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 126704, i64 126706, i64 126976, i64 127020, i64 127024, i64 127124, i64 127136, i64 127151, i64 127153, i64 127168, i64 127169, i64 127184, i64 127185, i64 127222, i64 127232, i64 127245, i64 127248, i64 127279, i64 127280, i64 127340, i64 127344, i64 127387, i64 127462, i64 127491, i64 127504, i64 127547, i64 127552, i64 127561, i64 127568, i64 127570, i64 127744, i64 127789, i64 127792, i64 127870, i64 127872, i64 127951, i64 127956, i64 127992, i64 128000, i64 128255, i64 128256, i64 128331, i64 128336, i64 128378, i64 128379, i64 128420, i64 128421, i64 128579, i64 128581, i64 128720, i64 128736, i64 128749, i64 128752, i64 128756, i64 128768, i64 128884, i64 128896, i64 128981, i64 129024, i64 129036, i64 129040, i64 129096, i64 129104, i64 129114, i64 129120, i64 129160, i64 129168, i64 129198, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000, i64 983040, i64 1048574, i64 1048576, i64 1114110], align 16
@XPosixPunct_invlist = internal constant [304 x i64] [i64 301, i64 148565664, i64 1, i64 0, i64 33, i64 48, i64 58, i64 65, i64 91, i64 97, i64 123, i64 127, i64 161, i64 162, i64 167, i64 168, i64 171, i64 172, i64 182, i64 184, i64 187, i64 188, i64 191, i64 192, i64 894, i64 895, i64 903, i64 904, i64 1370, i64 1376, i64 1417, i64 1419, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1523, i64 1525, i64 1545, i64 1547, i64 1548, i64 1550, i64 1563, i64 1564, i64 1566, i64 1568, i64 1642, i64 1646, i64 1748, i64 1749, i64 1792, i64 1806, i64 2039, i64 2042, i64 2096, i64 2111, i64 2142, i64 2143, i64 2404, i64 2406, i64 2416, i64 2417, i64 2800, i64 2801, i64 3572, i64 3573, i64 3663, i64 3664, i64 3674, i64 3676, i64 3844, i64 3859, i64 3860, i64 3861, i64 3898, i64 3902, i64 3973, i64 3974, i64 4048, i64 4053, i64 4057, i64 4059, i64 4170, i64 4176, i64 4347, i64 4348, i64 4960, i64 4969, i64 5120, i64 5121, i64 5741, i64 5743, i64 5787, i64 5789, i64 5867, i64 5870, i64 5941, i64 5943, i64 6100, i64 6103, i64 6104, i64 6107, i64 6144, i64 6155, i64 6468, i64 6470, i64 6686, i64 6688, i64 6816, i64 6823, i64 6824, i64 6830, i64 7002, i64 7009, i64 7164, i64 7168, i64 7227, i64 7232, i64 7294, i64 7296, i64 7360, i64 7368, i64 7379, i64 7380, i64 8208, i64 8232, i64 8240, i64 8260, i64 8261, i64 8274, i64 8275, i64 8287, i64 8317, i64 8319, i64 8333, i64 8335, i64 8968, i64 8972, i64 9001, i64 9003, i64 10088, i64 10102, i64 10181, i64 10183, i64 10214, i64 10224, i64 10627, i64 10649, i64 10712, i64 10716, i64 10748, i64 10750, i64 11513, i64 11517, i64 11518, i64 11520, i64 11632, i64 11633, i64 11776, i64 11823, i64 11824, i64 11843, i64 12289, i64 12292, i64 12296, i64 12306, i64 12308, i64 12320, i64 12336, i64 12337, i64 12349, i64 12350, i64 12448, i64 12449, i64 12539, i64 12540, i64 42238, i64 42240, i64 42509, i64 42512, i64 42611, i64 42612, i64 42622, i64 42623, i64 42738, i64 42744, i64 43124, i64 43128, i64 43214, i64 43216, i64 43256, i64 43259, i64 43310, i64 43312, i64 43359, i64 43360, i64 43457, i64 43470, i64 43486, i64 43488, i64 43612, i64 43616, i64 43742, i64 43744, i64 43760, i64 43762, i64 44011, i64 44012, i64 64830, i64 64832, i64 65040, i64 65050, i64 65072, i64 65107, i64 65108, i64 65122, i64 65123, i64 65124, i64 65128, i64 65129, i64 65130, i64 65132, i64 65281, i64 65284, i64 65285, i64 65291, i64 65292, i64 65296, i64 65306, i64 65308, i64 65311, i64 65313, i64 65339, i64 65342, i64 65343, i64 65344, i64 65371, i64 65372, i64 65373, i64 65374, i64 65375, i64 65382, i64 65792, i64 65795, i64 66463, i64 66464, i64 66512, i64 66513, i64 66927, i64 66928, i64 67671, i64 67672, i64 67871, i64 67872, i64 67903, i64 67904, i64 68176, i64 68185, i64 68223, i64 68224, i64 68336, i64 68343, i64 68409, i64 68416, i64 68505, i64 68509, i64 69703, i64 69710, i64 69819, i64 69821, i64 69822, i64 69826, i64 69952, i64 69956, i64 70004, i64 70006, i64 70085, i64 70089, i64 70093, i64 70094, i64 70200, i64 70206, i64 70854, i64 70855, i64 71105, i64 71114, i64 71233, i64 71236, i64 74864, i64 74869, i64 92782, i64 92784, i64 92917, i64 92918, i64 92983, i64 92988, i64 92996, i64 92997, i64 113823, i64 113824], align 16
@XPerlSpace_invlist = internal constant [24 x i64] [i64 21, i64 148565664, i64 1, i64 0, i64 9, i64 14, i64 32, i64 33, i64 133, i64 134, i64 160, i64 161, i64 5760, i64 5761, i64 8192, i64 8203, i64 8232, i64 8234, i64 8239, i64 8240, i64 8287, i64 8288, i64 12288, i64 12289], align 16
@XPosixUpper_invlist = internal constant [1258 x i64] [i64 1255, i64 148565664, i64 1, i64 0, i64 65, i64 91, i64 192, i64 215, i64 216, i64 223, i64 256, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 287, i64 288, i64 289, i64 290, i64 291, i64 292, i64 293, i64 294, i64 295, i64 296, i64 297, i64 298, i64 299, i64 300, i64 301, i64 302, i64 303, i64 304, i64 305, i64 306, i64 307, i64 308, i64 309, i64 310, i64 311, i64 313, i64 314, i64 315, i64 316, i64 317, i64 318, i64 319, i64 320, i64 321, i64 322, i64 323, i64 324, i64 325, i64 326, i64 327, i64 328, i64 330, i64 331, i64 332, i64 333, i64 334, i64 335, i64 336, i64 337, i64 338, i64 339, i64 340, i64 341, i64 342, i64 343, i64 344, i64 345, i64 346, i64 347, i64 348, i64 349, i64 350, i64 351, i64 352, i64 353, i64 354, i64 355, i64 356, i64 357, i64 358, i64 359, i64 360, i64 361, i64 362, i64 363, i64 364, i64 365, i64 366, i64 367, i64 368, i64 369, i64 370, i64 371, i64 372, i64 373, i64 374, i64 375, i64 376, i64 378, i64 379, i64 380, i64 381, i64 382, i64 385, i64 387, i64 388, i64 389, i64 390, i64 392, i64 393, i64 396, i64 398, i64 402, i64 403, i64 405, i64 406, i64 409, i64 412, i64 414, i64 415, i64 417, i64 418, i64 419, i64 420, i64 421, i64 422, i64 424, i64 425, i64 426, i64 428, i64 429, i64 430, i64 432, i64 433, i64 436, i64 437, i64 438, i64 439, i64 441, i64 444, i64 445, i64 452, i64 453, i64 455, i64 456, i64 458, i64 459, i64 461, i64 462, i64 463, i64 464, i64 465, i64 466, i64 467, i64 468, i64 469, i64 470, i64 471, i64 472, i64 473, i64 474, i64 475, i64 476, i64 478, i64 479, i64 480, i64 481, i64 482, i64 483, i64 484, i64 485, i64 486, i64 487, i64 488, i64 489, i64 490, i64 491, i64 492, i64 493, i64 494, i64 495, i64 497, i64 498, i64 500, i64 501, i64 502, i64 505, i64 506, i64 507, i64 508, i64 509, i64 510, i64 511, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 570, i64 572, i64 573, i64 575, i64 577, i64 578, i64 579, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 880, i64 881, i64 882, i64 883, i64 886, i64 887, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 912, i64 913, i64 930, i64 931, i64 940, i64 975, i64 976, i64 978, i64 981, i64 984, i64 985, i64 986, i64 987, i64 988, i64 989, i64 990, i64 991, i64 992, i64 993, i64 994, i64 995, i64 996, i64 997, i64 998, i64 999, i64 1000, i64 1001, i64 1002, i64 1003, i64 1004, i64 1005, i64 1006, i64 1007, i64 1012, i64 1013, i64 1015, i64 1016, i64 1017, i64 1019, i64 1021, i64 1072, i64 1120, i64 1121, i64 1122, i64 1123, i64 1124, i64 1125, i64 1126, i64 1127, i64 1128, i64 1129, i64 1130, i64 1131, i64 1132, i64 1133, i64 1134, i64 1135, i64 1136, i64 1137, i64 1138, i64 1139, i64 1140, i64 1141, i64 1142, i64 1143, i64 1144, i64 1145, i64 1146, i64 1147, i64 1148, i64 1149, i64 1150, i64 1151, i64 1152, i64 1153, i64 1162, i64 1163, i64 1164, i64 1165, i64 1166, i64 1167, i64 1168, i64 1169, i64 1170, i64 1171, i64 1172, i64 1173, i64 1174, i64 1175, i64 1176, i64 1177, i64 1178, i64 1179, i64 1180, i64 1181, i64 1182, i64 1183, i64 1184, i64 1185, i64 1186, i64 1187, i64 1188, i64 1189, i64 1190, i64 1191, i64 1192, i64 1193, i64 1194, i64 1195, i64 1196, i64 1197, i64 1198, i64 1199, i64 1200, i64 1201, i64 1202, i64 1203, i64 1204, i64 1205, i64 1206, i64 1207, i64 1208, i64 1209, i64 1210, i64 1211, i64 1212, i64 1213, i64 1214, i64 1215, i64 1216, i64 1218, i64 1219, i64 1220, i64 1221, i64 1222, i64 1223, i64 1224, i64 1225, i64 1226, i64 1227, i64 1228, i64 1229, i64 1230, i64 1232, i64 1233, i64 1234, i64 1235, i64 1236, i64 1237, i64 1238, i64 1239, i64 1240, i64 1241, i64 1242, i64 1243, i64 1244, i64 1245, i64 1246, i64 1247, i64 1248, i64 1249, i64 1250, i64 1251, i64 1252, i64 1253, i64 1254, i64 1255, i64 1256, i64 1257, i64 1258, i64 1259, i64 1260, i64 1261, i64 1262, i64 1263, i64 1264, i64 1265, i64 1266, i64 1267, i64 1268, i64 1269, i64 1270, i64 1271, i64 1272, i64 1273, i64 1274, i64 1275, i64 1276, i64 1277, i64 1278, i64 1279, i64 1280, i64 1281, i64 1282, i64 1283, i64 1284, i64 1285, i64 1286, i64 1287, i64 1288, i64 1289, i64 1290, i64 1291, i64 1292, i64 1293, i64 1294, i64 1295, i64 1296, i64 1297, i64 1298, i64 1299, i64 1300, i64 1301, i64 1302, i64 1303, i64 1304, i64 1305, i64 1306, i64 1307, i64 1308, i64 1309, i64 1310, i64 1311, i64 1312, i64 1313, i64 1314, i64 1315, i64 1316, i64 1317, i64 1318, i64 1319, i64 1320, i64 1321, i64 1322, i64 1323, i64 1324, i64 1325, i64 1326, i64 1327, i64 1329, i64 1367, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 7680, i64 7681, i64 7682, i64 7683, i64 7684, i64 7685, i64 7686, i64 7687, i64 7688, i64 7689, i64 7690, i64 7691, i64 7692, i64 7693, i64 7694, i64 7695, i64 7696, i64 7697, i64 7698, i64 7699, i64 7700, i64 7701, i64 7702, i64 7703, i64 7704, i64 7705, i64 7706, i64 7707, i64 7708, i64 7709, i64 7710, i64 7711, i64 7712, i64 7713, i64 7714, i64 7715, i64 7716, i64 7717, i64 7718, i64 7719, i64 7720, i64 7721, i64 7722, i64 7723, i64 7724, i64 7725, i64 7726, i64 7727, i64 7728, i64 7729, i64 7730, i64 7731, i64 7732, i64 7733, i64 7734, i64 7735, i64 7736, i64 7737, i64 7738, i64 7739, i64 7740, i64 7741, i64 7742, i64 7743, i64 7744, i64 7745, i64 7746, i64 7747, i64 7748, i64 7749, i64 7750, i64 7751, i64 7752, i64 7753, i64 7754, i64 7755, i64 7756, i64 7757, i64 7758, i64 7759, i64 7760, i64 7761, i64 7762, i64 7763, i64 7764, i64 7765, i64 7766, i64 7767, i64 7768, i64 7769, i64 7770, i64 7771, i64 7772, i64 7773, i64 7774, i64 7775, i64 7776, i64 7777, i64 7778, i64 7779, i64 7780, i64 7781, i64 7782, i64 7783, i64 7784, i64 7785, i64 7786, i64 7787, i64 7788, i64 7789, i64 7790, i64 7791, i64 7792, i64 7793, i64 7794, i64 7795, i64 7796, i64 7797, i64 7798, i64 7799, i64 7800, i64 7801, i64 7802, i64 7803, i64 7804, i64 7805, i64 7806, i64 7807, i64 7808, i64 7809, i64 7810, i64 7811, i64 7812, i64 7813, i64 7814, i64 7815, i64 7816, i64 7817, i64 7818, i64 7819, i64 7820, i64 7821, i64 7822, i64 7823, i64 7824, i64 7825, i64 7826, i64 7827, i64 7828, i64 7829, i64 7838, i64 7839, i64 7840, i64 7841, i64 7842, i64 7843, i64 7844, i64 7845, i64 7846, i64 7847, i64 7848, i64 7849, i64 7850, i64 7851, i64 7852, i64 7853, i64 7854, i64 7855, i64 7856, i64 7857, i64 7858, i64 7859, i64 7860, i64 7861, i64 7862, i64 7863, i64 7864, i64 7865, i64 7866, i64 7867, i64 7868, i64 7869, i64 7870, i64 7871, i64 7872, i64 7873, i64 7874, i64 7875, i64 7876, i64 7877, i64 7878, i64 7879, i64 7880, i64 7881, i64 7882, i64 7883, i64 7884, i64 7885, i64 7886, i64 7887, i64 7888, i64 7889, i64 7890, i64 7891, i64 7892, i64 7893, i64 7894, i64 7895, i64 7896, i64 7897, i64 7898, i64 7899, i64 7900, i64 7901, i64 7902, i64 7903, i64 7904, i64 7905, i64 7906, i64 7907, i64 7908, i64 7909, i64 7910, i64 7911, i64 7912, i64 7913, i64 7914, i64 7915, i64 7916, i64 7917, i64 7918, i64 7919, i64 7920, i64 7921, i64 7922, i64 7923, i64 7924, i64 7925, i64 7926, i64 7927, i64 7928, i64 7929, i64 7930, i64 7931, i64 7932, i64 7933, i64 7934, i64 7935, i64 7944, i64 7952, i64 7960, i64 7966, i64 7976, i64 7984, i64 7992, i64 8000, i64 8008, i64 8014, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8032, i64 8040, i64 8048, i64 8120, i64 8124, i64 8136, i64 8140, i64 8152, i64 8156, i64 8168, i64 8173, i64 8184, i64 8188, i64 8450, i64 8451, i64 8455, i64 8456, i64 8459, i64 8462, i64 8464, i64 8467, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8496, i64 8500, i64 8510, i64 8512, i64 8517, i64 8518, i64 8544, i64 8560, i64 8579, i64 8580, i64 9398, i64 9424, i64 11264, i64 11311, i64 11360, i64 11361, i64 11362, i64 11365, i64 11367, i64 11368, i64 11369, i64 11370, i64 11371, i64 11372, i64 11373, i64 11377, i64 11378, i64 11379, i64 11381, i64 11382, i64 11390, i64 11393, i64 11394, i64 11395, i64 11396, i64 11397, i64 11398, i64 11399, i64 11400, i64 11401, i64 11402, i64 11403, i64 11404, i64 11405, i64 11406, i64 11407, i64 11408, i64 11409, i64 11410, i64 11411, i64 11412, i64 11413, i64 11414, i64 11415, i64 11416, i64 11417, i64 11418, i64 11419, i64 11420, i64 11421, i64 11422, i64 11423, i64 11424, i64 11425, i64 11426, i64 11427, i64 11428, i64 11429, i64 11430, i64 11431, i64 11432, i64 11433, i64 11434, i64 11435, i64 11436, i64 11437, i64 11438, i64 11439, i64 11440, i64 11441, i64 11442, i64 11443, i64 11444, i64 11445, i64 11446, i64 11447, i64 11448, i64 11449, i64 11450, i64 11451, i64 11452, i64 11453, i64 11454, i64 11455, i64 11456, i64 11457, i64 11458, i64 11459, i64 11460, i64 11461, i64 11462, i64 11463, i64 11464, i64 11465, i64 11466, i64 11467, i64 11468, i64 11469, i64 11470, i64 11471, i64 11472, i64 11473, i64 11474, i64 11475, i64 11476, i64 11477, i64 11478, i64 11479, i64 11480, i64 11481, i64 11482, i64 11483, i64 11484, i64 11485, i64 11486, i64 11487, i64 11488, i64 11489, i64 11490, i64 11491, i64 11499, i64 11500, i64 11501, i64 11502, i64 11506, i64 11507, i64 42560, i64 42561, i64 42562, i64 42563, i64 42564, i64 42565, i64 42566, i64 42567, i64 42568, i64 42569, i64 42570, i64 42571, i64 42572, i64 42573, i64 42574, i64 42575, i64 42576, i64 42577, i64 42578, i64 42579, i64 42580, i64 42581, i64 42582, i64 42583, i64 42584, i64 42585, i64 42586, i64 42587, i64 42588, i64 42589, i64 42590, i64 42591, i64 42592, i64 42593, i64 42594, i64 42595, i64 42596, i64 42597, i64 42598, i64 42599, i64 42600, i64 42601, i64 42602, i64 42603, i64 42604, i64 42605, i64 42624, i64 42625, i64 42626, i64 42627, i64 42628, i64 42629, i64 42630, i64 42631, i64 42632, i64 42633, i64 42634, i64 42635, i64 42636, i64 42637, i64 42638, i64 42639, i64 42640, i64 42641, i64 42642, i64 42643, i64 42644, i64 42645, i64 42646, i64 42647, i64 42648, i64 42649, i64 42650, i64 42651, i64 42786, i64 42787, i64 42788, i64 42789, i64 42790, i64 42791, i64 42792, i64 42793, i64 42794, i64 42795, i64 42796, i64 42797, i64 42798, i64 42799, i64 42802, i64 42803, i64 42804, i64 42805, i64 42806, i64 42807, i64 42808, i64 42809, i64 42810, i64 42811, i64 42812, i64 42813, i64 42814, i64 42815, i64 42816, i64 42817, i64 42818, i64 42819, i64 42820, i64 42821, i64 42822, i64 42823, i64 42824, i64 42825, i64 42826, i64 42827, i64 42828, i64 42829, i64 42830, i64 42831, i64 42832, i64 42833, i64 42834, i64 42835, i64 42836, i64 42837, i64 42838, i64 42839, i64 42840, i64 42841, i64 42842, i64 42843, i64 42844, i64 42845, i64 42846, i64 42847, i64 42848, i64 42849, i64 42850, i64 42851, i64 42852, i64 42853, i64 42854, i64 42855, i64 42856, i64 42857, i64 42858, i64 42859, i64 42860, i64 42861, i64 42862, i64 42863, i64 42873, i64 42874, i64 42875, i64 42876, i64 42877, i64 42879, i64 42880, i64 42881, i64 42882, i64 42883, i64 42884, i64 42885, i64 42886, i64 42887, i64 42891, i64 42892, i64 42893, i64 42894, i64 42896, i64 42897, i64 42898, i64 42899, i64 42902, i64 42903, i64 42904, i64 42905, i64 42906, i64 42907, i64 42908, i64 42909, i64 42910, i64 42911, i64 42912, i64 42913, i64 42914, i64 42915, i64 42916, i64 42917, i64 42918, i64 42919, i64 42920, i64 42921, i64 42922, i64 42926, i64 42928, i64 42930, i64 65313, i64 65339, i64 66560, i64 66600, i64 71840, i64 71872, i64 119808, i64 119834, i64 119860, i64 119886, i64 119912, i64 119938, i64 119964, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119990, i64 120016, i64 120042, i64 120068, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120120, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120172, i64 120198, i64 120224, i64 120250, i64 120276, i64 120302, i64 120328, i64 120354, i64 120380, i64 120406, i64 120432, i64 120458, i64 120488, i64 120513, i64 120546, i64 120571, i64 120604, i64 120629, i64 120662, i64 120687, i64 120720, i64 120745, i64 120778, i64 120779, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370], align 16
@VertSpace_invlist = internal constant [10 x i64] [i64 7, i64 148565664, i64 1, i64 0, i64 10, i64 14, i64 133, i64 134, i64 8232, i64 8234], align 16
@XPosixWord_invlist = internal constant [1264 x i64] [i64 1261, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 65, i64 91, i64 95, i64 96, i64 97, i64 123, i64 170, i64 171, i64 181, i64 182, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 768, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1155, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1552, i64 1563, i64 1568, i64 1642, i64 1646, i64 1748, i64 1749, i64 1757, i64 1759, i64 1769, i64 1770, i64 1789, i64 1791, i64 1792, i64 1808, i64 1867, i64 1869, i64 1970, i64 1984, i64 2038, i64 2042, i64 2043, i64 2048, i64 2094, i64 2112, i64 2140, i64 2208, i64 2227, i64 2276, i64 2404, i64 2406, i64 2416, i64 2417, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2501, i64 2503, i64 2505, i64 2507, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2532, i64 2534, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3397, i64 3398, i64 3401, i64 3402, i64 3407, i64 3415, i64 3416, i64 3424, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3585, i64 3643, i64 3648, i64 3663, i64 3664, i64 3674, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3770, i64 3771, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3841, i64 3864, i64 3866, i64 3872, i64 3882, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3912, i64 3913, i64 3949, i64 3953, i64 3973, i64 3974, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4096, i64 4170, i64 4176, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5909, i64 5920, i64 5941, i64 5952, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6100, i64 6103, i64 6104, i64 6108, i64 6110, i64 6112, i64 6122, i64 6155, i64 6158, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6470, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6602, i64 6608, i64 6618, i64 6656, i64 6684, i64 6688, i64 6751, i64 6752, i64 6781, i64 6783, i64 6794, i64 6800, i64 6810, i64 6823, i64 6824, i64 6832, i64 6847, i64 6912, i64 6988, i64 6992, i64 7002, i64 7019, i64 7028, i64 7040, i64 7156, i64 7168, i64 7224, i64 7232, i64 7242, i64 7245, i64 7294, i64 7376, i64 7379, i64 7380, i64 7415, i64 7416, i64 7418, i64 7424, i64 7670, i64 7676, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8204, i64 8206, i64 8255, i64 8257, i64 8276, i64 8277, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8400, i64 8433, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11647, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12296, i64 12321, i64 12336, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12441, i64 12443, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42540, i64 42560, i64 42611, i64 42612, i64 42622, i64 42623, i64 42654, i64 42655, i64 42738, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43048, i64 43072, i64 43124, i64 43136, i64 43205, i64 43216, i64 43226, i64 43232, i64 43256, i64 43259, i64 43260, i64 43264, i64 43310, i64 43312, i64 43348, i64 43360, i64 43389, i64 43392, i64 43457, i64 43471, i64 43482, i64 43488, i64 43519, i64 43520, i64 43575, i64 43584, i64 43598, i64 43600, i64 43610, i64 43616, i64 43639, i64 43642, i64 43715, i64 43739, i64 43742, i64 43744, i64 43760, i64 43762, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44011, i64 44012, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65024, i64 65040, i64 65056, i64 65070, i64 65075, i64 65077, i64 65101, i64 65104, i64 65136, i64 65141, i64 65142, i64 65277, i64 65296, i64 65306, i64 65313, i64 65339, i64 65343, i64 65344, i64 65345, i64 65371, i64 65382, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66045, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66273, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68100, i64 68101, i64 68103, i64 68108, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68160, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68327, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69703, i64 69734, i64 69744, i64 69759, i64 69819, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69941, i64 69942, i64 69952, i64 69968, i64 70004, i64 70006, i64 70007, i64 70016, i64 70085, i64 70096, i64 70107, i64 70144, i64 70162, i64 70163, i64 70200, i64 70320, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71094, i64 71096, i64 71105, i64 71168, i64 71233, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71352, i64 71360, i64 71370, i64 71840, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92880, i64 92910, i64 92912, i64 92917, i64 92928, i64 92983, i64 92992, i64 92996, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94079, i64 94095, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113821, i64 113823, i64 119141, i64 119146, i64 119149, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125136, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917760, i64 918000], align 16
@XPosixXDigit_invlist = internal constant [16 x i64] [i64 13, i64 148565664, i64 1, i64 0, i64 48, i64 58, i64 65, i64 71, i64 97, i64 103, i64 65296, i64 65306, i64 65313, i64 65319, i64 65345, i64 65351], align 16
@Grapheme_Cluster_Break_invlist = internal constant [1487 x i64] [i64 1484, i64 148565664, i64 0, i64 0, i64 10, i64 11, i64 13, i64 14, i64 32, i64 127, i64 160, i64 173, i64 174, i64 768, i64 880, i64 1155, i64 1162, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1536, i64 1542, i64 1552, i64 1563, i64 1564, i64 1565, i64 1611, i64 1632, i64 1648, i64 1649, i64 1750, i64 1757, i64 1758, i64 1759, i64 1765, i64 1767, i64 1769, i64 1770, i64 1774, i64 1807, i64 1808, i64 1809, i64 1810, i64 1840, i64 1867, i64 1958, i64 1969, i64 2027, i64 2036, i64 2070, i64 2074, i64 2075, i64 2084, i64 2085, i64 2088, i64 2089, i64 2094, i64 2137, i64 2140, i64 2276, i64 2307, i64 2308, i64 2362, i64 2363, i64 2364, i64 2365, i64 2366, i64 2369, i64 2377, i64 2381, i64 2382, i64 2384, i64 2385, i64 2392, i64 2402, i64 2404, i64 2433, i64 2434, i64 2436, i64 2492, i64 2493, i64 2494, i64 2495, i64 2497, i64 2501, i64 2503, i64 2505, i64 2507, i64 2509, i64 2510, i64 2519, i64 2520, i64 2530, i64 2532, i64 2561, i64 2563, i64 2564, i64 2620, i64 2621, i64 2622, i64 2625, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2672, i64 2674, i64 2677, i64 2678, i64 2689, i64 2691, i64 2692, i64 2748, i64 2749, i64 2750, i64 2753, i64 2758, i64 2759, i64 2761, i64 2762, i64 2763, i64 2765, i64 2766, i64 2786, i64 2788, i64 2817, i64 2818, i64 2820, i64 2876, i64 2877, i64 2878, i64 2880, i64 2881, i64 2885, i64 2887, i64 2889, i64 2891, i64 2893, i64 2894, i64 2902, i64 2904, i64 2914, i64 2916, i64 2946, i64 2947, i64 3006, i64 3007, i64 3008, i64 3009, i64 3011, i64 3014, i64 3017, i64 3018, i64 3021, i64 3022, i64 3031, i64 3032, i64 3072, i64 3073, i64 3076, i64 3134, i64 3137, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3170, i64 3172, i64 3201, i64 3202, i64 3204, i64 3260, i64 3261, i64 3262, i64 3263, i64 3264, i64 3266, i64 3267, i64 3269, i64 3270, i64 3271, i64 3273, i64 3274, i64 3276, i64 3278, i64 3285, i64 3287, i64 3298, i64 3300, i64 3329, i64 3330, i64 3332, i64 3390, i64 3391, i64 3393, i64 3397, i64 3398, i64 3401, i64 3402, i64 3405, i64 3406, i64 3415, i64 3416, i64 3426, i64 3428, i64 3458, i64 3460, i64 3530, i64 3531, i64 3535, i64 3536, i64 3538, i64 3541, i64 3542, i64 3543, i64 3544, i64 3551, i64 3552, i64 3570, i64 3572, i64 3633, i64 3634, i64 3635, i64 3636, i64 3643, i64 3655, i64 3663, i64 3761, i64 3762, i64 3763, i64 3764, i64 3770, i64 3771, i64 3773, i64 3784, i64 3790, i64 3864, i64 3866, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3904, i64 3953, i64 3967, i64 3968, i64 3973, i64 3974, i64 3976, i64 3981, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4141, i64 4145, i64 4146, i64 4152, i64 4153, i64 4155, i64 4157, i64 4159, i64 4182, i64 4184, i64 4186, i64 4190, i64 4193, i64 4209, i64 4213, i64 4226, i64 4227, i64 4228, i64 4229, i64 4231, i64 4237, i64 4238, i64 4253, i64 4254, i64 4352, i64 4448, i64 4520, i64 4608, i64 4957, i64 4960, i64 5906, i64 5909, i64 5938, i64 5941, i64 5970, i64 5972, i64 6002, i64 6004, i64 6068, i64 6070, i64 6071, i64 6078, i64 6086, i64 6087, i64 6089, i64 6100, i64 6109, i64 6110, i64 6155, i64 6158, i64 6159, i64 6313, i64 6314, i64 6432, i64 6435, i64 6439, i64 6441, i64 6444, i64 6448, i64 6450, i64 6451, i64 6457, i64 6460, i64 6581, i64 6584, i64 6586, i64 6587, i64 6679, i64 6681, i64 6683, i64 6684, i64 6741, i64 6742, i64 6743, i64 6744, i64 6751, i64 6752, i64 6753, i64 6754, i64 6755, i64 6757, i64 6765, i64 6771, i64 6781, i64 6783, i64 6784, i64 6832, i64 6847, i64 6912, i64 6916, i64 6917, i64 6964, i64 6965, i64 6966, i64 6971, i64 6972, i64 6973, i64 6978, i64 6979, i64 6981, i64 7019, i64 7028, i64 7040, i64 7042, i64 7043, i64 7073, i64 7074, i64 7078, i64 7080, i64 7082, i64 7083, i64 7086, i64 7142, i64 7143, i64 7144, i64 7146, i64 7149, i64 7150, i64 7151, i64 7154, i64 7156, i64 7204, i64 7212, i64 7220, i64 7222, i64 7224, i64 7376, i64 7379, i64 7380, i64 7393, i64 7394, i64 7401, i64 7405, i64 7406, i64 7410, i64 7412, i64 7413, i64 7416, i64 7418, i64 7616, i64 7670, i64 7676, i64 7680, i64 8203, i64 8204, i64 8206, i64 8208, i64 8232, i64 8239, i64 8288, i64 8304, i64 8400, i64 8433, i64 11503, i64 11506, i64 11647, i64 11648, i64 11744, i64 11776, i64 12330, i64 12336, i64 12441, i64 12443, i64 42607, i64 42611, i64 42612, i64 42622, i64 42655, i64 42656, i64 42736, i64 42738, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43043, i64 43045, i64 43047, i64 43048, i64 43136, i64 43138, i64 43188, i64 43204, i64 43205, i64 43232, i64 43250, i64 43302, i64 43310, i64 43335, i64 43346, i64 43348, i64 43360, i64 43389, i64 43392, i64 43395, i64 43396, i64 43443, i64 43444, i64 43446, i64 43450, i64 43452, i64 43453, i64 43457, i64 43493, i64 43494, i64 43561, i64 43567, i64 43569, i64 43571, i64 43573, i64 43575, i64 43587, i64 43588, i64 43596, i64 43597, i64 43598, i64 43644, i64 43645, i64 43696, i64 43697, i64 43698, i64 43701, i64 43703, i64 43705, i64 43710, i64 43712, i64 43713, i64 43714, i64 43755, i64 43756, i64 43758, i64 43760, i64 43765, i64 43766, i64 43767, i64 44003, i64 44005, i64 44006, i64 44008, i64 44009, i64 44011, i64 44012, i64 44013, i64 44014, i64 44032, i64 44033, i64 44060, i64 44061, i64 44088, i64 44089, i64 44116, i64 44117, i64 44144, i64 44145, i64 44172, i64 44173, i64 44200, i64 44201, i64 44228, i64 44229, i64 44256, i64 44257, i64 44284, i64 44285, i64 44312, i64 44313, i64 44340, i64 44341, i64 44368, i64 44369, i64 44396, i64 44397, i64 44424, i64 44425, i64 44452, i64 44453, i64 44480, i64 44481, i64 44508, i64 44509, i64 44536, i64 44537, i64 44564, i64 44565, i64 44592, i64 44593, i64 44620, i64 44621, i64 44648, i64 44649, i64 44676, i64 44677, i64 44704, i64 44705, i64 44732, i64 44733, i64 44760, i64 44761, i64 44788, i64 44789, i64 44816, i64 44817, i64 44844, i64 44845, i64 44872, i64 44873, i64 44900, i64 44901, i64 44928, i64 44929, i64 44956, i64 44957, i64 44984, i64 44985, i64 45012, i64 45013, i64 45040, i64 45041, i64 45068, i64 45069, i64 45096, i64 45097, i64 45124, i64 45125, i64 45152, i64 45153, i64 45180, i64 45181, i64 45208, i64 45209, i64 45236, i64 45237, i64 45264, i64 45265, i64 45292, i64 45293, i64 45320, i64 45321, i64 45348, i64 45349, i64 45376, i64 45377, i64 45404, i64 45405, i64 45432, i64 45433, i64 45460, i64 45461, i64 45488, i64 45489, i64 45516, i64 45517, i64 45544, i64 45545, i64 45572, i64 45573, i64 45600, i64 45601, i64 45628, i64 45629, i64 45656, i64 45657, i64 45684, i64 45685, i64 45712, i64 45713, i64 45740, i64 45741, i64 45768, i64 45769, i64 45796, i64 45797, i64 45824, i64 45825, i64 45852, i64 45853, i64 45880, i64 45881, i64 45908, i64 45909, i64 45936, i64 45937, i64 45964, i64 45965, i64 45992, i64 45993, i64 46020, i64 46021, i64 46048, i64 46049, i64 46076, i64 46077, i64 46104, i64 46105, i64 46132, i64 46133, i64 46160, i64 46161, i64 46188, i64 46189, i64 46216, i64 46217, i64 46244, i64 46245, i64 46272, i64 46273, i64 46300, i64 46301, i64 46328, i64 46329, i64 46356, i64 46357, i64 46384, i64 46385, i64 46412, i64 46413, i64 46440, i64 46441, i64 46468, i64 46469, i64 46496, i64 46497, i64 46524, i64 46525, i64 46552, i64 46553, i64 46580, i64 46581, i64 46608, i64 46609, i64 46636, i64 46637, i64 46664, i64 46665, i64 46692, i64 46693, i64 46720, i64 46721, i64 46748, i64 46749, i64 46776, i64 46777, i64 46804, i64 46805, i64 46832, i64 46833, i64 46860, i64 46861, i64 46888, i64 46889, i64 46916, i64 46917, i64 46944, i64 46945, i64 46972, i64 46973, i64 47000, i64 47001, i64 47028, i64 47029, i64 47056, i64 47057, i64 47084, i64 47085, i64 47112, i64 47113, i64 47140, i64 47141, i64 47168, i64 47169, i64 47196, i64 47197, i64 47224, i64 47225, i64 47252, i64 47253, i64 47280, i64 47281, i64 47308, i64 47309, i64 47336, i64 47337, i64 47364, i64 47365, i64 47392, i64 47393, i64 47420, i64 47421, i64 47448, i64 47449, i64 47476, i64 47477, i64 47504, i64 47505, i64 47532, i64 47533, i64 47560, i64 47561, i64 47588, i64 47589, i64 47616, i64 47617, i64 47644, i64 47645, i64 47672, i64 47673, i64 47700, i64 47701, i64 47728, i64 47729, i64 47756, i64 47757, i64 47784, i64 47785, i64 47812, i64 47813, i64 47840, i64 47841, i64 47868, i64 47869, i64 47896, i64 47897, i64 47924, i64 47925, i64 47952, i64 47953, i64 47980, i64 47981, i64 48008, i64 48009, i64 48036, i64 48037, i64 48064, i64 48065, i64 48092, i64 48093, i64 48120, i64 48121, i64 48148, i64 48149, i64 48176, i64 48177, i64 48204, i64 48205, i64 48232, i64 48233, i64 48260, i64 48261, i64 48288, i64 48289, i64 48316, i64 48317, i64 48344, i64 48345, i64 48372, i64 48373, i64 48400, i64 48401, i64 48428, i64 48429, i64 48456, i64 48457, i64 48484, i64 48485, i64 48512, i64 48513, i64 48540, i64 48541, i64 48568, i64 48569, i64 48596, i64 48597, i64 48624, i64 48625, i64 48652, i64 48653, i64 48680, i64 48681, i64 48708, i64 48709, i64 48736, i64 48737, i64 48764, i64 48765, i64 48792, i64 48793, i64 48820, i64 48821, i64 48848, i64 48849, i64 48876, i64 48877, i64 48904, i64 48905, i64 48932, i64 48933, i64 48960, i64 48961, i64 48988, i64 48989, i64 49016, i64 49017, i64 49044, i64 49045, i64 49072, i64 49073, i64 49100, i64 49101, i64 49128, i64 49129, i64 49156, i64 49157, i64 49184, i64 49185, i64 49212, i64 49213, i64 49240, i64 49241, i64 49268, i64 49269, i64 49296, i64 49297, i64 49324, i64 49325, i64 49352, i64 49353, i64 49380, i64 49381, i64 49408, i64 49409, i64 49436, i64 49437, i64 49464, i64 49465, i64 49492, i64 49493, i64 49520, i64 49521, i64 49548, i64 49549, i64 49576, i64 49577, i64 49604, i64 49605, i64 49632, i64 49633, i64 49660, i64 49661, i64 49688, i64 49689, i64 49716, i64 49717, i64 49744, i64 49745, i64 49772, i64 49773, i64 49800, i64 49801, i64 49828, i64 49829, i64 49856, i64 49857, i64 49884, i64 49885, i64 49912, i64 49913, i64 49940, i64 49941, i64 49968, i64 49969, i64 49996, i64 49997, i64 50024, i64 50025, i64 50052, i64 50053, i64 50080, i64 50081, i64 50108, i64 50109, i64 50136, i64 50137, i64 50164, i64 50165, i64 50192, i64 50193, i64 50220, i64 50221, i64 50248, i64 50249, i64 50276, i64 50277, i64 50304, i64 50305, i64 50332, i64 50333, i64 50360, i64 50361, i64 50388, i64 50389, i64 50416, i64 50417, i64 50444, i64 50445, i64 50472, i64 50473, i64 50500, i64 50501, i64 50528, i64 50529, i64 50556, i64 50557, i64 50584, i64 50585, i64 50612, i64 50613, i64 50640, i64 50641, i64 50668, i64 50669, i64 50696, i64 50697, i64 50724, i64 50725, i64 50752, i64 50753, i64 50780, i64 50781, i64 50808, i64 50809, i64 50836, i64 50837, i64 50864, i64 50865, i64 50892, i64 50893, i64 50920, i64 50921, i64 50948, i64 50949, i64 50976, i64 50977, i64 51004, i64 51005, i64 51032, i64 51033, i64 51060, i64 51061, i64 51088, i64 51089, i64 51116, i64 51117, i64 51144, i64 51145, i64 51172, i64 51173, i64 51200, i64 51201, i64 51228, i64 51229, i64 51256, i64 51257, i64 51284, i64 51285, i64 51312, i64 51313, i64 51340, i64 51341, i64 51368, i64 51369, i64 51396, i64 51397, i64 51424, i64 51425, i64 51452, i64 51453, i64 51480, i64 51481, i64 51508, i64 51509, i64 51536, i64 51537, i64 51564, i64 51565, i64 51592, i64 51593, i64 51620, i64 51621, i64 51648, i64 51649, i64 51676, i64 51677, i64 51704, i64 51705, i64 51732, i64 51733, i64 51760, i64 51761, i64 51788, i64 51789, i64 51816, i64 51817, i64 51844, i64 51845, i64 51872, i64 51873, i64 51900, i64 51901, i64 51928, i64 51929, i64 51956, i64 51957, i64 51984, i64 51985, i64 52012, i64 52013, i64 52040, i64 52041, i64 52068, i64 52069, i64 52096, i64 52097, i64 52124, i64 52125, i64 52152, i64 52153, i64 52180, i64 52181, i64 52208, i64 52209, i64 52236, i64 52237, i64 52264, i64 52265, i64 52292, i64 52293, i64 52320, i64 52321, i64 52348, i64 52349, i64 52376, i64 52377, i64 52404, i64 52405, i64 52432, i64 52433, i64 52460, i64 52461, i64 52488, i64 52489, i64 52516, i64 52517, i64 52544, i64 52545, i64 52572, i64 52573, i64 52600, i64 52601, i64 52628, i64 52629, i64 52656, i64 52657, i64 52684, i64 52685, i64 52712, i64 52713, i64 52740, i64 52741, i64 52768, i64 52769, i64 52796, i64 52797, i64 52824, i64 52825, i64 52852, i64 52853, i64 52880, i64 52881, i64 52908, i64 52909, i64 52936, i64 52937, i64 52964, i64 52965, i64 52992, i64 52993, i64 53020, i64 53021, i64 53048, i64 53049, i64 53076, i64 53077, i64 53104, i64 53105, i64 53132, i64 53133, i64 53160, i64 53161, i64 53188, i64 53189, i64 53216, i64 53217, i64 53244, i64 53245, i64 53272, i64 53273, i64 53300, i64 53301, i64 53328, i64 53329, i64 53356, i64 53357, i64 53384, i64 53385, i64 53412, i64 53413, i64 53440, i64 53441, i64 53468, i64 53469, i64 53496, i64 53497, i64 53524, i64 53525, i64 53552, i64 53553, i64 53580, i64 53581, i64 53608, i64 53609, i64 53636, i64 53637, i64 53664, i64 53665, i64 53692, i64 53693, i64 53720, i64 53721, i64 53748, i64 53749, i64 53776, i64 53777, i64 53804, i64 53805, i64 53832, i64 53833, i64 53860, i64 53861, i64 53888, i64 53889, i64 53916, i64 53917, i64 53944, i64 53945, i64 53972, i64 53973, i64 54000, i64 54001, i64 54028, i64 54029, i64 54056, i64 54057, i64 54084, i64 54085, i64 54112, i64 54113, i64 54140, i64 54141, i64 54168, i64 54169, i64 54196, i64 54197, i64 54224, i64 54225, i64 54252, i64 54253, i64 54280, i64 54281, i64 54308, i64 54309, i64 54336, i64 54337, i64 54364, i64 54365, i64 54392, i64 54393, i64 54420, i64 54421, i64 54448, i64 54449, i64 54476, i64 54477, i64 54504, i64 54505, i64 54532, i64 54533, i64 54560, i64 54561, i64 54588, i64 54589, i64 54616, i64 54617, i64 54644, i64 54645, i64 54672, i64 54673, i64 54700, i64 54701, i64 54728, i64 54729, i64 54756, i64 54757, i64 54784, i64 54785, i64 54812, i64 54813, i64 54840, i64 54841, i64 54868, i64 54869, i64 54896, i64 54897, i64 54924, i64 54925, i64 54952, i64 54953, i64 54980, i64 54981, i64 55008, i64 55009, i64 55036, i64 55037, i64 55064, i64 55065, i64 55092, i64 55093, i64 55120, i64 55121, i64 55148, i64 55149, i64 55176, i64 55177, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 55296, i64 57344, i64 64286, i64 64287, i64 65024, i64 65040, i64 65056, i64 65070, i64 65279, i64 65280, i64 65438, i64 65440, i64 65520, i64 65532, i64 66045, i64 66046, i64 66272, i64 66273, i64 66422, i64 66427, i64 68097, i64 68100, i64 68101, i64 68103, i64 68108, i64 68112, i64 68152, i64 68155, i64 68159, i64 68160, i64 68325, i64 68327, i64 69632, i64 69633, i64 69634, i64 69635, i64 69688, i64 69703, i64 69759, i64 69762, i64 69763, i64 69808, i64 69811, i64 69815, i64 69817, i64 69819, i64 69821, i64 69822, i64 69888, i64 69891, i64 69927, i64 69932, i64 69933, i64 69941, i64 70003, i64 70004, i64 70016, i64 70018, i64 70019, i64 70067, i64 70070, i64 70079, i64 70081, i64 70188, i64 70191, i64 70194, i64 70196, i64 70197, i64 70198, i64 70200, i64 70367, i64 70368, i64 70371, i64 70379, i64 70401, i64 70402, i64 70404, i64 70460, i64 70461, i64 70462, i64 70463, i64 70464, i64 70465, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70498, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70832, i64 70833, i64 70835, i64 70841, i64 70842, i64 70843, i64 70845, i64 70846, i64 70847, i64 70849, i64 70850, i64 70852, i64 71087, i64 71088, i64 71090, i64 71094, i64 71096, i64 71100, i64 71102, i64 71103, i64 71105, i64 71216, i64 71219, i64 71227, i64 71229, i64 71230, i64 71231, i64 71233, i64 71339, i64 71340, i64 71341, i64 71342, i64 71344, i64 71350, i64 71351, i64 71352, i64 92912, i64 92917, i64 92976, i64 92983, i64 94033, i64 94079, i64 94095, i64 94099, i64 113821, i64 113823, i64 113824, i64 113828, i64 119141, i64 119142, i64 119143, i64 119146, i64 119149, i64 119150, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 125136, i64 125143, i64 127462, i64 127488, i64 917504, i64 917760, i64 918000, i64 921600], align 16
@PL_GCB_invlist = external local_unnamed_addr global ptr, align 8
@Sentence_Break_invlist = internal constant [2838 x i64] [i64 2835, i64 148565664, i64 0, i64 0, i64 9, i64 10, i64 11, i64 13, i64 14, i64 32, i64 33, i64 34, i64 35, i64 39, i64 42, i64 44, i64 46, i64 47, i64 48, i64 58, i64 59, i64 63, i64 64, i64 65, i64 91, i64 92, i64 93, i64 94, i64 97, i64 123, i64 124, i64 125, i64 126, i64 133, i64 134, i64 160, i64 161, i64 170, i64 171, i64 172, i64 173, i64 174, i64 181, i64 182, i64 186, i64 187, i64 188, i64 192, i64 215, i64 216, i64 223, i64 247, i64 248, i64 256, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 287, i64 288, i64 289, i64 290, i64 291, i64 292, i64 293, i64 294, i64 295, i64 296, i64 297, i64 298, i64 299, i64 300, i64 301, i64 302, i64 303, i64 304, i64 305, i64 306, i64 307, i64 308, i64 309, i64 310, i64 311, i64 313, i64 314, i64 315, i64 316, i64 317, i64 318, i64 319, i64 320, i64 321, i64 322, i64 323, i64 324, i64 325, i64 326, i64 327, i64 328, i64 330, i64 331, i64 332, i64 333, i64 334, i64 335, i64 336, i64 337, i64 338, i64 339, i64 340, i64 341, i64 342, i64 343, i64 344, i64 345, i64 346, i64 347, i64 348, i64 349, i64 350, i64 351, i64 352, i64 353, i64 354, i64 355, i64 356, i64 357, i64 358, i64 359, i64 360, i64 361, i64 362, i64 363, i64 364, i64 365, i64 366, i64 367, i64 368, i64 369, i64 370, i64 371, i64 372, i64 373, i64 374, i64 375, i64 376, i64 378, i64 379, i64 380, i64 381, i64 382, i64 385, i64 387, i64 388, i64 389, i64 390, i64 392, i64 393, i64 396, i64 398, i64 402, i64 403, i64 405, i64 406, i64 409, i64 412, i64 414, i64 415, i64 417, i64 418, i64 419, i64 420, i64 421, i64 422, i64 424, i64 425, i64 426, i64 428, i64 429, i64 430, i64 432, i64 433, i64 436, i64 437, i64 438, i64 439, i64 441, i64 443, i64 444, i64 445, i64 448, i64 452, i64 454, i64 455, i64 457, i64 458, i64 460, i64 461, i64 462, i64 463, i64 464, i64 465, i64 466, i64 467, i64 468, i64 469, i64 470, i64 471, i64 472, i64 473, i64 474, i64 475, i64 476, i64 478, i64 479, i64 480, i64 481, i64 482, i64 483, i64 484, i64 485, i64 486, i64 487, i64 488, i64 489, i64 490, i64 491, i64 492, i64 493, i64 494, i64 495, i64 497, i64 499, i64 500, i64 501, i64 502, i64 505, i64 506, i64 507, i64 508, i64 509, i64 510, i64 511, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 570, i64 572, i64 573, i64 575, i64 577, i64 578, i64 579, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 660, i64 661, i64 697, i64 704, i64 706, i64 710, i64 722, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 768, i64 880, i64 881, i64 882, i64 883, i64 884, i64 885, i64 886, i64 887, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 912, i64 913, i64 930, i64 931, i64 940, i64 975, i64 976, i64 978, i64 981, i64 984, i64 985, i64 986, i64 987, i64 988, i64 989, i64 990, i64 991, i64 992, i64 993, i64 994, i64 995, i64 996, i64 997, i64 998, i64 999, i64 1000, i64 1001, i64 1002, i64 1003, i64 1004, i64 1005, i64 1006, i64 1007, i64 1012, i64 1013, i64 1014, i64 1015, i64 1016, i64 1017, i64 1019, i64 1021, i64 1072, i64 1120, i64 1121, i64 1122, i64 1123, i64 1124, i64 1125, i64 1126, i64 1127, i64 1128, i64 1129, i64 1130, i64 1131, i64 1132, i64 1133, i64 1134, i64 1135, i64 1136, i64 1137, i64 1138, i64 1139, i64 1140, i64 1141, i64 1142, i64 1143, i64 1144, i64 1145, i64 1146, i64 1147, i64 1148, i64 1149, i64 1150, i64 1151, i64 1152, i64 1153, i64 1154, i64 1155, i64 1162, i64 1163, i64 1164, i64 1165, i64 1166, i64 1167, i64 1168, i64 1169, i64 1170, i64 1171, i64 1172, i64 1173, i64 1174, i64 1175, i64 1176, i64 1177, i64 1178, i64 1179, i64 1180, i64 1181, i64 1182, i64 1183, i64 1184, i64 1185, i64 1186, i64 1187, i64 1188, i64 1189, i64 1190, i64 1191, i64 1192, i64 1193, i64 1194, i64 1195, i64 1196, i64 1197, i64 1198, i64 1199, i64 1200, i64 1201, i64 1202, i64 1203, i64 1204, i64 1205, i64 1206, i64 1207, i64 1208, i64 1209, i64 1210, i64 1211, i64 1212, i64 1213, i64 1214, i64 1215, i64 1216, i64 1218, i64 1219, i64 1220, i64 1221, i64 1222, i64 1223, i64 1224, i64 1225, i64 1226, i64 1227, i64 1228, i64 1229, i64 1230, i64 1232, i64 1233, i64 1234, i64 1235, i64 1236, i64 1237, i64 1238, i64 1239, i64 1240, i64 1241, i64 1242, i64 1243, i64 1244, i64 1245, i64 1246, i64 1247, i64 1248, i64 1249, i64 1250, i64 1251, i64 1252, i64 1253, i64 1254, i64 1255, i64 1256, i64 1257, i64 1258, i64 1259, i64 1260, i64 1261, i64 1262, i64 1263, i64 1264, i64 1265, i64 1266, i64 1267, i64 1268, i64 1269, i64 1270, i64 1271, i64 1272, i64 1273, i64 1274, i64 1275, i64 1276, i64 1277, i64 1278, i64 1279, i64 1280, i64 1281, i64 1282, i64 1283, i64 1284, i64 1285, i64 1286, i64 1287, i64 1288, i64 1289, i64 1290, i64 1291, i64 1292, i64 1293, i64 1294, i64 1295, i64 1296, i64 1297, i64 1298, i64 1299, i64 1300, i64 1301, i64 1302, i64 1303, i64 1304, i64 1305, i64 1306, i64 1307, i64 1308, i64 1309, i64 1310, i64 1311, i64 1312, i64 1313, i64 1314, i64 1315, i64 1316, i64 1317, i64 1318, i64 1319, i64 1320, i64 1321, i64 1322, i64 1323, i64 1324, i64 1325, i64 1326, i64 1327, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1373, i64 1374, i64 1377, i64 1416, i64 1417, i64 1418, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1524, i64 1536, i64 1542, i64 1548, i64 1550, i64 1552, i64 1563, i64 1564, i64 1565, i64 1567, i64 1568, i64 1611, i64 1632, i64 1642, i64 1643, i64 1645, i64 1646, i64 1648, i64 1649, i64 1748, i64 1749, i64 1750, i64 1757, i64 1758, i64 1759, i64 1765, i64 1767, i64 1769, i64 1770, i64 1774, i64 1776, i64 1786, i64 1789, i64 1791, i64 1792, i64 1795, i64 1807, i64 1808, i64 1809, i64 1810, i64 1840, i64 1867, i64 1869, i64 1958, i64 1969, i64 1970, i64 1984, i64 1994, i64 2027, i64 2036, i64 2038, i64 2040, i64 2041, i64 2042, i64 2043, i64 2048, i64 2070, i64 2074, i64 2075, i64 2084, i64 2085, i64 2088, i64 2089, i64 2094, i64 2112, i64 2137, i64 2140, i64 2208, i64 2227, i64 2276, i64 2308, i64 2362, i64 2365, i64 2366, i64 2384, i64 2385, i64 2392, i64 2402, i64 2404, i64 2406, i64 2416, i64 2417, i64 2433, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2493, i64 2494, i64 2501, i64 2503, i64 2505, i64 2507, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2530, i64 2532, i64 2534, i64 2544, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2672, i64 2674, i64 2677, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2749, i64 2750, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2786, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2877, i64 2878, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2914, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2947, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3134, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3170, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3261, i64 3262, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3298, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3390, i64 3397, i64 3398, i64 3401, i64 3402, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3426, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3585, i64 3633, i64 3634, i64 3636, i64 3643, i64 3648, i64 3655, i64 3663, i64 3664, i64 3674, i64 3713, i64 3715, i64 3716, i64 3717, i64 3719, i64 3721, i64 3722, i64 3723, i64 3725, i64 3726, i64 3732, i64 3736, i64 3737, i64 3744, i64 3745, i64 3748, i64 3749, i64 3750, i64 3751, i64 3752, i64 3754, i64 3756, i64 3757, i64 3761, i64 3762, i64 3764, i64 3770, i64 3771, i64 3773, i64 3774, i64 3776, i64 3781, i64 3782, i64 3783, i64 3784, i64 3790, i64 3792, i64 3802, i64 3804, i64 3808, i64 3840, i64 3841, i64 3864, i64 3866, i64 3872, i64 3882, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3973, i64 3974, i64 3976, i64 3981, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4096, i64 4139, i64 4159, i64 4160, i64 4170, i64 4172, i64 4176, i64 4182, i64 4186, i64 4190, i64 4193, i64 4194, i64 4197, i64 4199, i64 4206, i64 4209, i64 4213, i64 4226, i64 4238, i64 4239, i64 4240, i64 4250, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4960, i64 4962, i64 4963, i64 4967, i64 4969, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5742, i64 5743, i64 5760, i64 5761, i64 5787, i64 5789, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5906, i64 5909, i64 5920, i64 5938, i64 5941, i64 5943, i64 5952, i64 5970, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6016, i64 6068, i64 6100, i64 6103, i64 6104, i64 6108, i64 6109, i64 6110, i64 6112, i64 6122, i64 6146, i64 6147, i64 6148, i64 6152, i64 6153, i64 6154, i64 6155, i64 6158, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6313, i64 6314, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6468, i64 6470, i64 6480, i64 6510, i64 6512, i64 6517, i64 6528, i64 6572, i64 6576, i64 6593, i64 6600, i64 6602, i64 6608, i64 6618, i64 6656, i64 6679, i64 6684, i64 6688, i64 6741, i64 6751, i64 6752, i64 6781, i64 6783, i64 6784, i64 6794, i64 6800, i64 6810, i64 6823, i64 6824, i64 6828, i64 6832, i64 6847, i64 6912, i64 6917, i64 6964, i64 6981, i64 6988, i64 6992, i64 7002, i64 7004, i64 7006, i64 7008, i64 7019, i64 7028, i64 7040, i64 7043, i64 7073, i64 7086, i64 7088, i64 7098, i64 7142, i64 7156, i64 7168, i64 7204, i64 7224, i64 7227, i64 7229, i64 7232, i64 7242, i64 7245, i64 7248, i64 7258, i64 7294, i64 7296, i64 7376, i64 7379, i64 7380, i64 7401, i64 7405, i64 7406, i64 7410, i64 7413, i64 7415, i64 7416, i64 7418, i64 7424, i64 7616, i64 7670, i64 7676, i64 7680, i64 7681, i64 7682, i64 7683, i64 7684, i64 7685, i64 7686, i64 7687, i64 7688, i64 7689, i64 7690, i64 7691, i64 7692, i64 7693, i64 7694, i64 7695, i64 7696, i64 7697, i64 7698, i64 7699, i64 7700, i64 7701, i64 7702, i64 7703, i64 7704, i64 7705, i64 7706, i64 7707, i64 7708, i64 7709, i64 7710, i64 7711, i64 7712, i64 7713, i64 7714, i64 7715, i64 7716, i64 7717, i64 7718, i64 7719, i64 7720, i64 7721, i64 7722, i64 7723, i64 7724, i64 7725, i64 7726, i64 7727, i64 7728, i64 7729, i64 7730, i64 7731, i64 7732, i64 7733, i64 7734, i64 7735, i64 7736, i64 7737, i64 7738, i64 7739, i64 7740, i64 7741, i64 7742, i64 7743, i64 7744, i64 7745, i64 7746, i64 7747, i64 7748, i64 7749, i64 7750, i64 7751, i64 7752, i64 7753, i64 7754, i64 7755, i64 7756, i64 7757, i64 7758, i64 7759, i64 7760, i64 7761, i64 7762, i64 7763, i64 7764, i64 7765, i64 7766, i64 7767, i64 7768, i64 7769, i64 7770, i64 7771, i64 7772, i64 7773, i64 7774, i64 7775, i64 7776, i64 7777, i64 7778, i64 7779, i64 7780, i64 7781, i64 7782, i64 7783, i64 7784, i64 7785, i64 7786, i64 7787, i64 7788, i64 7789, i64 7790, i64 7791, i64 7792, i64 7793, i64 7794, i64 7795, i64 7796, i64 7797, i64 7798, i64 7799, i64 7800, i64 7801, i64 7802, i64 7803, i64 7804, i64 7805, i64 7806, i64 7807, i64 7808, i64 7809, i64 7810, i64 7811, i64 7812, i64 7813, i64 7814, i64 7815, i64 7816, i64 7817, i64 7818, i64 7819, i64 7820, i64 7821, i64 7822, i64 7823, i64 7824, i64 7825, i64 7826, i64 7827, i64 7828, i64 7829, i64 7838, i64 7839, i64 7840, i64 7841, i64 7842, i64 7843, i64 7844, i64 7845, i64 7846, i64 7847, i64 7848, i64 7849, i64 7850, i64 7851, i64 7852, i64 7853, i64 7854, i64 7855, i64 7856, i64 7857, i64 7858, i64 7859, i64 7860, i64 7861, i64 7862, i64 7863, i64 7864, i64 7865, i64 7866, i64 7867, i64 7868, i64 7869, i64 7870, i64 7871, i64 7872, i64 7873, i64 7874, i64 7875, i64 7876, i64 7877, i64 7878, i64 7879, i64 7880, i64 7881, i64 7882, i64 7883, i64 7884, i64 7885, i64 7886, i64 7887, i64 7888, i64 7889, i64 7890, i64 7891, i64 7892, i64 7893, i64 7894, i64 7895, i64 7896, i64 7897, i64 7898, i64 7899, i64 7900, i64 7901, i64 7902, i64 7903, i64 7904, i64 7905, i64 7906, i64 7907, i64 7908, i64 7909, i64 7910, i64 7911, i64 7912, i64 7913, i64 7914, i64 7915, i64 7916, i64 7917, i64 7918, i64 7919, i64 7920, i64 7921, i64 7922, i64 7923, i64 7924, i64 7925, i64 7926, i64 7927, i64 7928, i64 7929, i64 7930, i64 7931, i64 7932, i64 7933, i64 7934, i64 7935, i64 7944, i64 7952, i64 7958, i64 7960, i64 7966, i64 7968, i64 7976, i64 7984, i64 7992, i64 8000, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8032, i64 8040, i64 8048, i64 8062, i64 8064, i64 8072, i64 8080, i64 8088, i64 8096, i64 8104, i64 8112, i64 8117, i64 8118, i64 8120, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8136, i64 8141, i64 8144, i64 8148, i64 8150, i64 8152, i64 8156, i64 8160, i64 8168, i64 8173, i64 8178, i64 8181, i64 8182, i64 8184, i64 8189, i64 8192, i64 8203, i64 8204, i64 8206, i64 8208, i64 8211, i64 8213, i64 8216, i64 8224, i64 8228, i64 8229, i64 8232, i64 8234, i64 8239, i64 8240, i64 8249, i64 8251, i64 8252, i64 8254, i64 8261, i64 8263, i64 8266, i64 8287, i64 8288, i64 8293, i64 8294, i64 8304, i64 8305, i64 8306, i64 8317, i64 8319, i64 8320, i64 8333, i64 8335, i64 8336, i64 8349, i64 8400, i64 8433, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8459, i64 8462, i64 8464, i64 8467, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8496, i64 8500, i64 8501, i64 8505, i64 8506, i64 8508, i64 8510, i64 8512, i64 8517, i64 8518, i64 8522, i64 8526, i64 8527, i64 8544, i64 8560, i64 8576, i64 8579, i64 8580, i64 8581, i64 8585, i64 8968, i64 8972, i64 9001, i64 9003, i64 9398, i64 9424, i64 9450, i64 10075, i64 10081, i64 10088, i64 10102, i64 10181, i64 10183, i64 10214, i64 10224, i64 10627, i64 10649, i64 10712, i64 10716, i64 10748, i64 10750, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11361, i64 11362, i64 11365, i64 11367, i64 11368, i64 11369, i64 11370, i64 11371, i64 11372, i64 11373, i64 11377, i64 11378, i64 11379, i64 11381, i64 11382, i64 11390, i64 11393, i64 11394, i64 11395, i64 11396, i64 11397, i64 11398, i64 11399, i64 11400, i64 11401, i64 11402, i64 11403, i64 11404, i64 11405, i64 11406, i64 11407, i64 11408, i64 11409, i64 11410, i64 11411, i64 11412, i64 11413, i64 11414, i64 11415, i64 11416, i64 11417, i64 11418, i64 11419, i64 11420, i64 11421, i64 11422, i64 11423, i64 11424, i64 11425, i64 11426, i64 11427, i64 11428, i64 11429, i64 11430, i64 11431, i64 11432, i64 11433, i64 11434, i64 11435, i64 11436, i64 11437, i64 11438, i64 11439, i64 11440, i64 11441, i64 11442, i64 11443, i64 11444, i64 11445, i64 11446, i64 11447, i64 11448, i64 11449, i64 11450, i64 11451, i64 11452, i64 11453, i64 11454, i64 11455, i64 11456, i64 11457, i64 11458, i64 11459, i64 11460, i64 11461, i64 11462, i64 11463, i64 11464, i64 11465, i64 11466, i64 11467, i64 11468, i64 11469, i64 11470, i64 11471, i64 11472, i64 11473, i64 11474, i64 11475, i64 11476, i64 11477, i64 11478, i64 11479, i64 11480, i64 11481, i64 11482, i64 11483, i64 11484, i64 11485, i64 11486, i64 11487, i64 11488, i64 11489, i64 11490, i64 11491, i64 11493, i64 11499, i64 11500, i64 11501, i64 11502, i64 11503, i64 11506, i64 11507, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11647, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11790, i64 11804, i64 11806, i64 11808, i64 11818, i64 11822, i64 11823, i64 11824, i64 11836, i64 11837, i64 11842, i64 11843, i64 12288, i64 12289, i64 12290, i64 12291, i64 12293, i64 12296, i64 12306, i64 12308, i64 12316, i64 12317, i64 12320, i64 12321, i64 12330, i64 12336, i64 12337, i64 12342, i64 12344, i64 12349, i64 12353, i64 12439, i64 12441, i64 12443, i64 12445, i64 12448, i64 12449, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13312, i64 19894, i64 19968, i64 40909, i64 40960, i64 42125, i64 42192, i64 42238, i64 42239, i64 42240, i64 42509, i64 42510, i64 42512, i64 42528, i64 42538, i64 42540, i64 42560, i64 42561, i64 42562, i64 42563, i64 42564, i64 42565, i64 42566, i64 42567, i64 42568, i64 42569, i64 42570, i64 42571, i64 42572, i64 42573, i64 42574, i64 42575, i64 42576, i64 42577, i64 42578, i64 42579, i64 42580, i64 42581, i64 42582, i64 42583, i64 42584, i64 42585, i64 42586, i64 42587, i64 42588, i64 42589, i64 42590, i64 42591, i64 42592, i64 42593, i64 42594, i64 42595, i64 42596, i64 42597, i64 42598, i64 42599, i64 42600, i64 42601, i64 42602, i64 42603, i64 42604, i64 42605, i64 42606, i64 42607, i64 42611, i64 42612, i64 42622, i64 42623, i64 42624, i64 42625, i64 42626, i64 42627, i64 42628, i64 42629, i64 42630, i64 42631, i64 42632, i64 42633, i64 42634, i64 42635, i64 42636, i64 42637, i64 42638, i64 42639, i64 42640, i64 42641, i64 42642, i64 42643, i64 42644, i64 42645, i64 42646, i64 42647, i64 42648, i64 42649, i64 42650, i64 42651, i64 42654, i64 42655, i64 42656, i64 42736, i64 42738, i64 42739, i64 42740, i64 42743, i64 42744, i64 42775, i64 42784, i64 42786, i64 42787, i64 42788, i64 42789, i64 42790, i64 42791, i64 42792, i64 42793, i64 42794, i64 42795, i64 42796, i64 42797, i64 42798, i64 42799, i64 42802, i64 42803, i64 42804, i64 42805, i64 42806, i64 42807, i64 42808, i64 42809, i64 42810, i64 42811, i64 42812, i64 42813, i64 42814, i64 42815, i64 42816, i64 42817, i64 42818, i64 42819, i64 42820, i64 42821, i64 42822, i64 42823, i64 42824, i64 42825, i64 42826, i64 42827, i64 42828, i64 42829, i64 42830, i64 42831, i64 42832, i64 42833, i64 42834, i64 42835, i64 42836, i64 42837, i64 42838, i64 42839, i64 42840, i64 42841, i64 42842, i64 42843, i64 42844, i64 42845, i64 42846, i64 42847, i64 42848, i64 42849, i64 42850, i64 42851, i64 42852, i64 42853, i64 42854, i64 42855, i64 42856, i64 42857, i64 42858, i64 42859, i64 42860, i64 42861, i64 42862, i64 42863, i64 42873, i64 42874, i64 42875, i64 42876, i64 42877, i64 42879, i64 42880, i64 42881, i64 42882, i64 42883, i64 42884, i64 42885, i64 42886, i64 42887, i64 42888, i64 42889, i64 42891, i64 42892, i64 42893, i64 42894, i64 42895, i64 42896, i64 42897, i64 42898, i64 42899, i64 42902, i64 42903, i64 42904, i64 42905, i64 42906, i64 42907, i64 42908, i64 42909, i64 42910, i64 42911, i64 42912, i64 42913, i64 42914, i64 42915, i64 42916, i64 42917, i64 42918, i64 42919, i64 42920, i64 42921, i64 42922, i64 42926, i64 42928, i64 42930, i64 42999, i64 43000, i64 43003, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43043, i64 43048, i64 43072, i64 43124, i64 43126, i64 43128, i64 43136, i64 43138, i64 43188, i64 43205, i64 43214, i64 43216, i64 43226, i64 43232, i64 43250, i64 43256, i64 43259, i64 43260, i64 43264, i64 43274, i64 43302, i64 43310, i64 43311, i64 43312, i64 43335, i64 43348, i64 43360, i64 43389, i64 43392, i64 43396, i64 43443, i64 43457, i64 43464, i64 43466, i64 43471, i64 43472, i64 43482, i64 43488, i64 43493, i64 43494, i64 43504, i64 43514, i64 43519, i64 43520, i64 43561, i64 43575, i64 43584, i64 43587, i64 43588, i64 43596, i64 43598, i64 43600, i64 43610, i64 43613, i64 43616, i64 43639, i64 43642, i64 43643, i64 43646, i64 43696, i64 43697, i64 43698, i64 43701, i64 43703, i64 43705, i64 43710, i64 43712, i64 43713, i64 43714, i64 43715, i64 43739, i64 43742, i64 43744, i64 43755, i64 43760, i64 43762, i64 43765, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44003, i64 44011, i64 44012, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 63744, i64 64110, i64 64112, i64 64218, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64286, i64 64287, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64434, i64 64467, i64 64830, i64 64832, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65024, i64 65040, i64 65042, i64 65043, i64 65044, i64 65047, i64 65049, i64 65056, i64 65070, i64 65073, i64 65075, i64 65077, i64 65093, i64 65095, i64 65097, i64 65104, i64 65106, i64 65107, i64 65109, i64 65110, i64 65112, i64 65113, i64 65119, i64 65123, i64 65124, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65281, i64 65282, i64 65288, i64 65290, i64 65292, i64 65294, i64 65295, i64 65306, i64 65307, i64 65311, i64 65312, i64 65313, i64 65339, i64 65340, i64 65341, i64 65342, i64 65345, i64 65371, i64 65372, i64 65373, i64 65374, i64 65375, i64 65377, i64 65378, i64 65380, i64 65381, i64 65382, i64 65438, i64 65440, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65529, i64 65532, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66045, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66273, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66422, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66600, i64 66640, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68097, i64 68100, i64 68101, i64 68103, i64 68108, i64 68112, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68160, i64 68182, i64 68184, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68327, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69635, i64 69688, i64 69703, i64 69705, i64 69734, i64 69744, i64 69759, i64 69763, i64 69808, i64 69819, i64 69821, i64 69822, i64 69826, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69891, i64 69927, i64 69941, i64 69942, i64 69952, i64 69953, i64 69956, i64 69968, i64 70003, i64 70004, i64 70006, i64 70007, i64 70016, i64 70019, i64 70067, i64 70081, i64 70085, i64 70087, i64 70093, i64 70094, i64 70096, i64 70106, i64 70107, i64 70144, i64 70162, i64 70163, i64 70188, i64 70200, i64 70202, i64 70203, i64 70205, i64 70320, i64 70367, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70461, i64 70462, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70498, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70832, i64 70852, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71087, i64 71094, i64 71096, i64 71105, i64 71106, i64 71108, i64 71113, i64 71114, i64 71168, i64 71216, i64 71233, i64 71235, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71339, i64 71352, i64 71360, i64 71370, i64 71840, i64 71872, i64 71904, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92782, i64 92784, i64 92880, i64 92910, i64 92912, i64 92917, i64 92918, i64 92928, i64 92976, i64 92983, i64 92985, i64 92992, i64 92996, i64 92997, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94033, i64 94079, i64 94095, i64 94099, i64 94112, i64 110592, i64 110594, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113821, i64 113823, i64 113824, i64 113828, i64 119141, i64 119146, i64 119149, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 119808, i64 119834, i64 119860, i64 119886, i64 119893, i64 119894, i64 119912, i64 119938, i64 119964, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119990, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120016, i64 120042, i64 120068, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120120, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120172, i64 120198, i64 120224, i64 120250, i64 120276, i64 120302, i64 120328, i64 120354, i64 120380, i64 120406, i64 120432, i64 120458, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120546, i64 120571, i64 120572, i64 120597, i64 120598, i64 120604, i64 120629, i64 120630, i64 120655, i64 120656, i64 120662, i64 120687, i64 120688, i64 120713, i64 120714, i64 120720, i64 120745, i64 120746, i64 120771, i64 120772, i64 120778, i64 120779, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125136, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 128630, i64 128633, i64 131072, i64 173783, i64 173824, i64 177973, i64 177984, i64 178206, i64 194560, i64 195102, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000], align 16
@PL_SB_invlist = external local_unnamed_addr global ptr, align 8
@Word_Break_invlist = internal constant [1483 x i64] [i64 1480, i64 148565664, i64 0, i64 0, i64 10, i64 11, i64 13, i64 14, i64 34, i64 35, i64 39, i64 40, i64 44, i64 45, i64 46, i64 47, i64 48, i64 58, i64 59, i64 60, i64 65, i64 91, i64 95, i64 96, i64 97, i64 123, i64 133, i64 134, i64 170, i64 171, i64 173, i64 174, i64 181, i64 182, i64 183, i64 184, i64 186, i64 187, i64 192, i64 215, i64 216, i64 247, i64 248, i64 706, i64 710, i64 722, i64 727, i64 728, i64 736, i64 741, i64 748, i64 749, i64 750, i64 751, i64 768, i64 880, i64 885, i64 886, i64 888, i64 890, i64 894, i64 895, i64 896, i64 902, i64 903, i64 904, i64 907, i64 908, i64 909, i64 910, i64 930, i64 931, i64 1014, i64 1015, i64 1154, i64 1155, i64 1162, i64 1328, i64 1329, i64 1367, i64 1369, i64 1370, i64 1377, i64 1416, i64 1417, i64 1418, i64 1425, i64 1470, i64 1471, i64 1472, i64 1473, i64 1475, i64 1476, i64 1478, i64 1479, i64 1480, i64 1488, i64 1515, i64 1520, i64 1523, i64 1524, i64 1525, i64 1536, i64 1542, i64 1548, i64 1550, i64 1552, i64 1563, i64 1564, i64 1565, i64 1568, i64 1611, i64 1632, i64 1642, i64 1643, i64 1644, i64 1645, i64 1646, i64 1648, i64 1649, i64 1748, i64 1749, i64 1750, i64 1757, i64 1758, i64 1759, i64 1765, i64 1767, i64 1769, i64 1770, i64 1774, i64 1776, i64 1786, i64 1789, i64 1791, i64 1792, i64 1807, i64 1808, i64 1809, i64 1810, i64 1840, i64 1867, i64 1869, i64 1958, i64 1969, i64 1970, i64 1984, i64 1994, i64 2027, i64 2036, i64 2038, i64 2040, i64 2041, i64 2042, i64 2043, i64 2048, i64 2070, i64 2074, i64 2075, i64 2084, i64 2085, i64 2088, i64 2089, i64 2094, i64 2112, i64 2137, i64 2140, i64 2208, i64 2227, i64 2276, i64 2308, i64 2362, i64 2365, i64 2366, i64 2384, i64 2385, i64 2392, i64 2402, i64 2404, i64 2406, i64 2416, i64 2417, i64 2433, i64 2436, i64 2437, i64 2445, i64 2447, i64 2449, i64 2451, i64 2473, i64 2474, i64 2481, i64 2482, i64 2483, i64 2486, i64 2490, i64 2492, i64 2493, i64 2494, i64 2501, i64 2503, i64 2505, i64 2507, i64 2510, i64 2511, i64 2519, i64 2520, i64 2524, i64 2526, i64 2527, i64 2530, i64 2532, i64 2534, i64 2544, i64 2546, i64 2561, i64 2564, i64 2565, i64 2571, i64 2575, i64 2577, i64 2579, i64 2601, i64 2602, i64 2609, i64 2610, i64 2612, i64 2613, i64 2615, i64 2616, i64 2618, i64 2620, i64 2621, i64 2622, i64 2627, i64 2631, i64 2633, i64 2635, i64 2638, i64 2641, i64 2642, i64 2649, i64 2653, i64 2654, i64 2655, i64 2662, i64 2672, i64 2674, i64 2677, i64 2678, i64 2689, i64 2692, i64 2693, i64 2702, i64 2703, i64 2706, i64 2707, i64 2729, i64 2730, i64 2737, i64 2738, i64 2740, i64 2741, i64 2746, i64 2748, i64 2749, i64 2750, i64 2758, i64 2759, i64 2762, i64 2763, i64 2766, i64 2768, i64 2769, i64 2784, i64 2786, i64 2788, i64 2790, i64 2800, i64 2817, i64 2820, i64 2821, i64 2829, i64 2831, i64 2833, i64 2835, i64 2857, i64 2858, i64 2865, i64 2866, i64 2868, i64 2869, i64 2874, i64 2876, i64 2877, i64 2878, i64 2885, i64 2887, i64 2889, i64 2891, i64 2894, i64 2902, i64 2904, i64 2908, i64 2910, i64 2911, i64 2914, i64 2916, i64 2918, i64 2928, i64 2929, i64 2930, i64 2946, i64 2947, i64 2948, i64 2949, i64 2955, i64 2958, i64 2961, i64 2962, i64 2966, i64 2969, i64 2971, i64 2972, i64 2973, i64 2974, i64 2976, i64 2979, i64 2981, i64 2984, i64 2987, i64 2990, i64 3002, i64 3006, i64 3011, i64 3014, i64 3017, i64 3018, i64 3022, i64 3024, i64 3025, i64 3031, i64 3032, i64 3046, i64 3056, i64 3072, i64 3076, i64 3077, i64 3085, i64 3086, i64 3089, i64 3090, i64 3113, i64 3114, i64 3130, i64 3133, i64 3134, i64 3141, i64 3142, i64 3145, i64 3146, i64 3150, i64 3157, i64 3159, i64 3160, i64 3162, i64 3168, i64 3170, i64 3172, i64 3174, i64 3184, i64 3201, i64 3204, i64 3205, i64 3213, i64 3214, i64 3217, i64 3218, i64 3241, i64 3242, i64 3252, i64 3253, i64 3258, i64 3260, i64 3261, i64 3262, i64 3269, i64 3270, i64 3273, i64 3274, i64 3278, i64 3285, i64 3287, i64 3294, i64 3295, i64 3296, i64 3298, i64 3300, i64 3302, i64 3312, i64 3313, i64 3315, i64 3329, i64 3332, i64 3333, i64 3341, i64 3342, i64 3345, i64 3346, i64 3387, i64 3389, i64 3390, i64 3397, i64 3398, i64 3401, i64 3402, i64 3406, i64 3407, i64 3415, i64 3416, i64 3424, i64 3426, i64 3428, i64 3430, i64 3440, i64 3450, i64 3456, i64 3458, i64 3460, i64 3461, i64 3479, i64 3482, i64 3506, i64 3507, i64 3516, i64 3517, i64 3518, i64 3520, i64 3527, i64 3530, i64 3531, i64 3535, i64 3541, i64 3542, i64 3543, i64 3544, i64 3552, i64 3558, i64 3568, i64 3570, i64 3572, i64 3633, i64 3634, i64 3636, i64 3643, i64 3655, i64 3663, i64 3664, i64 3674, i64 3761, i64 3762, i64 3764, i64 3770, i64 3771, i64 3773, i64 3784, i64 3790, i64 3792, i64 3802, i64 3840, i64 3841, i64 3864, i64 3866, i64 3872, i64 3882, i64 3893, i64 3894, i64 3895, i64 3896, i64 3897, i64 3898, i64 3902, i64 3904, i64 3912, i64 3913, i64 3949, i64 3953, i64 3973, i64 3974, i64 3976, i64 3981, i64 3992, i64 3993, i64 4029, i64 4038, i64 4039, i64 4139, i64 4159, i64 4160, i64 4170, i64 4182, i64 4186, i64 4190, i64 4193, i64 4194, i64 4197, i64 4199, i64 4206, i64 4209, i64 4213, i64 4226, i64 4238, i64 4239, i64 4240, i64 4250, i64 4254, i64 4256, i64 4294, i64 4295, i64 4296, i64 4301, i64 4302, i64 4304, i64 4347, i64 4348, i64 4681, i64 4682, i64 4686, i64 4688, i64 4695, i64 4696, i64 4697, i64 4698, i64 4702, i64 4704, i64 4745, i64 4746, i64 4750, i64 4752, i64 4785, i64 4786, i64 4790, i64 4792, i64 4799, i64 4800, i64 4801, i64 4802, i64 4806, i64 4808, i64 4823, i64 4824, i64 4881, i64 4882, i64 4886, i64 4888, i64 4955, i64 4957, i64 4960, i64 4992, i64 5008, i64 5024, i64 5109, i64 5121, i64 5741, i64 5743, i64 5760, i64 5761, i64 5787, i64 5792, i64 5867, i64 5870, i64 5881, i64 5888, i64 5901, i64 5902, i64 5906, i64 5909, i64 5920, i64 5938, i64 5941, i64 5952, i64 5970, i64 5972, i64 5984, i64 5997, i64 5998, i64 6001, i64 6002, i64 6004, i64 6068, i64 6100, i64 6109, i64 6110, i64 6112, i64 6122, i64 6155, i64 6158, i64 6159, i64 6160, i64 6170, i64 6176, i64 6264, i64 6272, i64 6313, i64 6314, i64 6315, i64 6320, i64 6390, i64 6400, i64 6431, i64 6432, i64 6444, i64 6448, i64 6460, i64 6470, i64 6480, i64 6576, i64 6593, i64 6600, i64 6602, i64 6608, i64 6618, i64 6656, i64 6679, i64 6684, i64 6741, i64 6751, i64 6752, i64 6781, i64 6783, i64 6784, i64 6794, i64 6800, i64 6810, i64 6832, i64 6847, i64 6912, i64 6917, i64 6964, i64 6981, i64 6988, i64 6992, i64 7002, i64 7019, i64 7028, i64 7040, i64 7043, i64 7073, i64 7086, i64 7088, i64 7098, i64 7142, i64 7156, i64 7168, i64 7204, i64 7224, i64 7232, i64 7242, i64 7245, i64 7248, i64 7258, i64 7294, i64 7376, i64 7379, i64 7380, i64 7401, i64 7405, i64 7406, i64 7410, i64 7413, i64 7415, i64 7416, i64 7418, i64 7424, i64 7616, i64 7670, i64 7676, i64 7680, i64 7958, i64 7960, i64 7966, i64 7968, i64 8006, i64 8008, i64 8014, i64 8016, i64 8024, i64 8025, i64 8026, i64 8027, i64 8028, i64 8029, i64 8030, i64 8031, i64 8062, i64 8064, i64 8117, i64 8118, i64 8125, i64 8126, i64 8127, i64 8130, i64 8133, i64 8134, i64 8141, i64 8144, i64 8148, i64 8150, i64 8156, i64 8160, i64 8173, i64 8178, i64 8181, i64 8182, i64 8189, i64 8204, i64 8206, i64 8208, i64 8216, i64 8218, i64 8228, i64 8229, i64 8231, i64 8232, i64 8234, i64 8239, i64 8255, i64 8257, i64 8260, i64 8261, i64 8276, i64 8277, i64 8288, i64 8293, i64 8294, i64 8304, i64 8305, i64 8306, i64 8319, i64 8320, i64 8336, i64 8349, i64 8400, i64 8433, i64 8450, i64 8451, i64 8455, i64 8456, i64 8458, i64 8468, i64 8469, i64 8470, i64 8473, i64 8478, i64 8484, i64 8485, i64 8486, i64 8487, i64 8488, i64 8489, i64 8490, i64 8494, i64 8495, i64 8506, i64 8508, i64 8512, i64 8517, i64 8522, i64 8526, i64 8527, i64 8544, i64 8585, i64 9398, i64 9450, i64 11264, i64 11311, i64 11312, i64 11359, i64 11360, i64 11493, i64 11499, i64 11503, i64 11506, i64 11508, i64 11520, i64 11558, i64 11559, i64 11560, i64 11565, i64 11566, i64 11568, i64 11624, i64 11631, i64 11632, i64 11647, i64 11648, i64 11671, i64 11680, i64 11687, i64 11688, i64 11695, i64 11696, i64 11703, i64 11704, i64 11711, i64 11712, i64 11719, i64 11720, i64 11727, i64 11728, i64 11735, i64 11736, i64 11743, i64 11744, i64 11776, i64 11823, i64 11824, i64 12293, i64 12294, i64 12330, i64 12336, i64 12337, i64 12342, i64 12347, i64 12349, i64 12441, i64 12443, i64 12445, i64 12448, i64 12539, i64 12540, i64 12544, i64 12549, i64 12590, i64 12593, i64 12687, i64 12704, i64 12731, i64 12784, i64 12800, i64 13008, i64 13055, i64 13056, i64 13144, i64 40960, i64 42125, i64 42192, i64 42238, i64 42240, i64 42509, i64 42512, i64 42528, i64 42538, i64 42540, i64 42560, i64 42607, i64 42611, i64 42612, i64 42622, i64 42623, i64 42654, i64 42655, i64 42656, i64 42736, i64 42738, i64 42775, i64 42784, i64 42786, i64 42889, i64 42891, i64 42895, i64 42896, i64 42926, i64 42928, i64 42930, i64 42999, i64 43010, i64 43011, i64 43014, i64 43015, i64 43019, i64 43020, i64 43043, i64 43048, i64 43072, i64 43124, i64 43136, i64 43138, i64 43188, i64 43205, i64 43216, i64 43226, i64 43232, i64 43250, i64 43256, i64 43259, i64 43260, i64 43264, i64 43274, i64 43302, i64 43310, i64 43312, i64 43335, i64 43348, i64 43360, i64 43389, i64 43392, i64 43396, i64 43443, i64 43457, i64 43471, i64 43472, i64 43482, i64 43493, i64 43494, i64 43504, i64 43514, i64 43520, i64 43561, i64 43575, i64 43584, i64 43587, i64 43588, i64 43596, i64 43598, i64 43600, i64 43610, i64 43643, i64 43646, i64 43696, i64 43697, i64 43698, i64 43701, i64 43703, i64 43705, i64 43710, i64 43712, i64 43713, i64 43714, i64 43744, i64 43755, i64 43760, i64 43762, i64 43765, i64 43767, i64 43777, i64 43783, i64 43785, i64 43791, i64 43793, i64 43799, i64 43808, i64 43815, i64 43816, i64 43823, i64 43824, i64 43867, i64 43868, i64 43872, i64 43876, i64 43878, i64 43968, i64 44003, i64 44011, i64 44012, i64 44014, i64 44016, i64 44026, i64 44032, i64 55204, i64 55216, i64 55239, i64 55243, i64 55292, i64 64256, i64 64263, i64 64275, i64 64280, i64 64285, i64 64286, i64 64287, i64 64297, i64 64298, i64 64311, i64 64312, i64 64317, i64 64318, i64 64319, i64 64320, i64 64322, i64 64323, i64 64325, i64 64326, i64 64336, i64 64434, i64 64467, i64 64830, i64 64848, i64 64912, i64 64914, i64 64968, i64 65008, i64 65020, i64 65024, i64 65040, i64 65041, i64 65043, i64 65044, i64 65045, i64 65056, i64 65070, i64 65075, i64 65077, i64 65101, i64 65104, i64 65105, i64 65106, i64 65107, i64 65108, i64 65109, i64 65110, i64 65136, i64 65141, i64 65142, i64 65277, i64 65279, i64 65280, i64 65287, i64 65288, i64 65292, i64 65293, i64 65294, i64 65295, i64 65306, i64 65307, i64 65308, i64 65313, i64 65339, i64 65343, i64 65344, i64 65345, i64 65371, i64 65382, i64 65438, i64 65440, i64 65471, i64 65474, i64 65480, i64 65482, i64 65488, i64 65490, i64 65496, i64 65498, i64 65501, i64 65529, i64 65532, i64 65536, i64 65548, i64 65549, i64 65575, i64 65576, i64 65595, i64 65596, i64 65598, i64 65599, i64 65614, i64 65616, i64 65630, i64 65664, i64 65787, i64 65856, i64 65909, i64 66045, i64 66046, i64 66176, i64 66205, i64 66208, i64 66257, i64 66272, i64 66273, i64 66304, i64 66336, i64 66352, i64 66379, i64 66384, i64 66422, i64 66427, i64 66432, i64 66462, i64 66464, i64 66500, i64 66504, i64 66512, i64 66513, i64 66518, i64 66560, i64 66718, i64 66720, i64 66730, i64 66816, i64 66856, i64 66864, i64 66916, i64 67072, i64 67383, i64 67392, i64 67414, i64 67424, i64 67432, i64 67584, i64 67590, i64 67592, i64 67593, i64 67594, i64 67638, i64 67639, i64 67641, i64 67644, i64 67645, i64 67647, i64 67670, i64 67680, i64 67703, i64 67712, i64 67743, i64 67840, i64 67862, i64 67872, i64 67898, i64 67968, i64 68024, i64 68030, i64 68032, i64 68096, i64 68097, i64 68100, i64 68101, i64 68103, i64 68108, i64 68112, i64 68116, i64 68117, i64 68120, i64 68121, i64 68148, i64 68152, i64 68155, i64 68159, i64 68160, i64 68192, i64 68221, i64 68224, i64 68253, i64 68288, i64 68296, i64 68297, i64 68325, i64 68327, i64 68352, i64 68406, i64 68416, i64 68438, i64 68448, i64 68467, i64 68480, i64 68498, i64 68608, i64 68681, i64 69632, i64 69635, i64 69688, i64 69703, i64 69734, i64 69744, i64 69759, i64 69763, i64 69808, i64 69819, i64 69821, i64 69822, i64 69840, i64 69865, i64 69872, i64 69882, i64 69888, i64 69891, i64 69927, i64 69941, i64 69942, i64 69952, i64 69968, i64 70003, i64 70004, i64 70006, i64 70007, i64 70016, i64 70019, i64 70067, i64 70081, i64 70085, i64 70096, i64 70106, i64 70107, i64 70144, i64 70162, i64 70163, i64 70188, i64 70200, i64 70320, i64 70367, i64 70379, i64 70384, i64 70394, i64 70401, i64 70404, i64 70405, i64 70413, i64 70415, i64 70417, i64 70419, i64 70441, i64 70442, i64 70449, i64 70450, i64 70452, i64 70453, i64 70458, i64 70460, i64 70461, i64 70462, i64 70469, i64 70471, i64 70473, i64 70475, i64 70478, i64 70487, i64 70488, i64 70493, i64 70498, i64 70500, i64 70502, i64 70509, i64 70512, i64 70517, i64 70784, i64 70832, i64 70852, i64 70854, i64 70855, i64 70856, i64 70864, i64 70874, i64 71040, i64 71087, i64 71094, i64 71096, i64 71105, i64 71168, i64 71216, i64 71233, i64 71236, i64 71237, i64 71248, i64 71258, i64 71296, i64 71339, i64 71352, i64 71360, i64 71370, i64 71840, i64 71904, i64 71914, i64 71935, i64 71936, i64 72384, i64 72441, i64 73728, i64 74649, i64 74752, i64 74863, i64 77824, i64 78895, i64 92160, i64 92729, i64 92736, i64 92767, i64 92768, i64 92778, i64 92880, i64 92910, i64 92912, i64 92917, i64 92928, i64 92976, i64 92983, i64 92992, i64 92996, i64 93008, i64 93018, i64 93027, i64 93048, i64 93053, i64 93072, i64 93952, i64 94021, i64 94032, i64 94033, i64 94079, i64 94095, i64 94099, i64 94112, i64 110592, i64 110593, i64 113664, i64 113771, i64 113776, i64 113789, i64 113792, i64 113801, i64 113808, i64 113818, i64 113821, i64 113823, i64 113824, i64 113828, i64 119141, i64 119146, i64 119149, i64 119155, i64 119163, i64 119171, i64 119173, i64 119180, i64 119210, i64 119214, i64 119362, i64 119365, i64 119808, i64 119893, i64 119894, i64 119965, i64 119966, i64 119968, i64 119970, i64 119971, i64 119973, i64 119975, i64 119977, i64 119981, i64 119982, i64 119994, i64 119995, i64 119996, i64 119997, i64 120004, i64 120005, i64 120070, i64 120071, i64 120075, i64 120077, i64 120085, i64 120086, i64 120093, i64 120094, i64 120122, i64 120123, i64 120127, i64 120128, i64 120133, i64 120134, i64 120135, i64 120138, i64 120145, i64 120146, i64 120486, i64 120488, i64 120513, i64 120514, i64 120539, i64 120540, i64 120571, i64 120572, i64 120597, i64 120598, i64 120629, i64 120630, i64 120655, i64 120656, i64 120687, i64 120688, i64 120713, i64 120714, i64 120745, i64 120746, i64 120771, i64 120772, i64 120780, i64 120782, i64 120832, i64 124928, i64 125125, i64 125136, i64 125143, i64 126464, i64 126468, i64 126469, i64 126496, i64 126497, i64 126499, i64 126500, i64 126501, i64 126503, i64 126504, i64 126505, i64 126515, i64 126516, i64 126520, i64 126521, i64 126522, i64 126523, i64 126524, i64 126530, i64 126531, i64 126535, i64 126536, i64 126537, i64 126538, i64 126539, i64 126540, i64 126541, i64 126544, i64 126545, i64 126547, i64 126548, i64 126549, i64 126551, i64 126552, i64 126553, i64 126554, i64 126555, i64 126556, i64 126557, i64 126558, i64 126559, i64 126560, i64 126561, i64 126563, i64 126564, i64 126565, i64 126567, i64 126571, i64 126572, i64 126579, i64 126580, i64 126584, i64 126585, i64 126589, i64 126590, i64 126591, i64 126592, i64 126602, i64 126603, i64 126620, i64 126625, i64 126628, i64 126629, i64 126634, i64 126635, i64 126652, i64 127280, i64 127306, i64 127312, i64 127338, i64 127344, i64 127370, i64 127462, i64 127488, i64 917505, i64 917506, i64 917536, i64 917632, i64 917760, i64 918000], align 16
@PL_WB_invlist = external local_unnamed_addr global ptr, align 8
@PL_exit_flags = external local_unnamed_addr global i8, align 1
@PL_endav = external local_unnamed_addr global ptr, align 8
@PL_minus_c = external local_unnamed_addr global i8, align 1
@PL_phase = external local_unnamed_addr global i32, align 4
@PL_scopestack_ix = external local_unnamed_addr global i32, align 4
@PL_tmps_ix = external local_unnamed_addr global i64, align 8
@PL_tmps_floor = external global i64, align 8
@PL_threadhook = external local_unnamed_addr global ptr, align 8
@PL_main_root = external local_unnamed_addr global ptr, align 8
@PL_main_cv = external local_unnamed_addr global ptr, align 8
@PL_comppad = external local_unnamed_addr global ptr, align 8
@PL_curpad = external local_unnamed_addr global ptr, align 8
@PL_comppad_name = external local_unnamed_addr global ptr, align 8
@PL_main_start = external local_unnamed_addr global ptr, align 8
@PL_warnhook = external local_unnamed_addr global ptr, align 8
@PL_diehook = external local_unnamed_addr global ptr, align 8
@PL_exitlistlen = external local_unnamed_addr global i32, align 4
@PL_exitlist = external local_unnamed_addr global ptr, align 8
@PL_use_safe_putenv = external local_unnamed_addr global i8, align 1
@PL_parser = external local_unnamed_addr global ptr, align 8
@PL_minus_F = external local_unnamed_addr global i8, align 1
@PL_splitstr = external local_unnamed_addr global ptr, align 8
@PL_minus_n = external local_unnamed_addr global i8, align 1
@PL_minus_p = external local_unnamed_addr global i8, align 1
@PL_minus_l = external local_unnamed_addr global i8, align 1
@PL_minus_a = external local_unnamed_addr global i8, align 1
@PL_doswitches = external local_unnamed_addr global i8, align 1
@PL_dowarn = external local_unnamed_addr global i8, align 1
@PL_unsafe = external local_unnamed_addr global i8, align 1
@PL_inplace = external local_unnamed_addr global ptr, align 8
@PL_e_script = external local_unnamed_addr global ptr, align 8
@PL_perldb = external local_unnamed_addr global i32, align 4
@PL_ofsgv = external local_unnamed_addr global ptr, align 8
@PL_ors_sv = external local_unnamed_addr global ptr, align 8
@PL_statname = external local_unnamed_addr global ptr, align 8
@PL_statgv = external local_unnamed_addr global ptr, align 8
@PL_efloatbuf = external local_unnamed_addr global ptr, align 8
@PL_efloatsize = external local_unnamed_addr global i64, align 8
@PL_beginav = external local_unnamed_addr global ptr, align 8
@PL_beginav_save = external global ptr, align 8
@PL_checkav = external local_unnamed_addr global ptr, align 8
@PL_checkav_save = external global ptr, align 8
@PL_unitcheckav = external local_unnamed_addr global ptr, align 8
@PL_unitcheckav_save = external global ptr, align 8
@PL_initav = external local_unnamed_addr global ptr, align 8
@PL_hintgv = external local_unnamed_addr global ptr, align 8
@PL_errgv = external local_unnamed_addr global ptr, align 8
@PL_argvoutgv = external local_unnamed_addr global ptr, align 8
@PL_stdingv = external local_unnamed_addr global ptr, align 8
@PL_stderrgv = external local_unnamed_addr global ptr, align 8
@PL_last_in_gv = external local_unnamed_addr global ptr, align 8
@PL_DBsingle = external local_unnamed_addr global ptr, align 8
@PL_DBtrace = external local_unnamed_addr global ptr, align 8
@PL_DBsignal = external local_unnamed_addr global ptr, align 8
@PL_DBcontrol = external local_unnamed_addr global [3 x i64], align 16
@PL_DBcv = external local_unnamed_addr global ptr, align 8
@PL_dbargs = external local_unnamed_addr global ptr, align 8
@PL_debstash = external local_unnamed_addr global ptr, align 8
@PL_envgv = external local_unnamed_addr global ptr, align 8
@PL_incgv = external local_unnamed_addr global ptr, align 8
@PL_argvgv = external local_unnamed_addr global ptr, align 8
@PL_replgv = external local_unnamed_addr global ptr, align 8
@PL_DBgv = external local_unnamed_addr global ptr, align 8
@PL_DBline = external local_unnamed_addr global ptr, align 8
@PL_DBsub = external local_unnamed_addr global ptr, align 8
@PL_argvout_stack = external local_unnamed_addr global ptr, align 8
@PL_preambleav = external global ptr, align 8
@PL_subname = external local_unnamed_addr global ptr, align 8
@PL_toptarget = external local_unnamed_addr global ptr, align 8
@PL_bodytarget = external local_unnamed_addr global ptr, align 8
@PL_formtarget = external local_unnamed_addr global ptr, align 8
@PL_utf8_swash_ptrs = external local_unnamed_addr global [10 x ptr], align 16
@PL_utf8_mark = external local_unnamed_addr global ptr, align 8
@PL_utf8_toupper = external local_unnamed_addr global ptr, align 8
@PL_utf8_totitle = external local_unnamed_addr global ptr, align 8
@PL_utf8_tolower = external local_unnamed_addr global ptr, align 8
@PL_utf8_tofold = external local_unnamed_addr global ptr, align 8
@PL_utf8_idstart = external local_unnamed_addr global ptr, align 8
@PL_utf8_idcont = external local_unnamed_addr global ptr, align 8
@PL_utf8_foldable = external local_unnamed_addr global ptr, align 8
@PL_utf8_foldclosures = external local_unnamed_addr global ptr, align 8
@PL_AboveLatin1 = external local_unnamed_addr global ptr, align 8
@PL_InBitmap = external local_unnamed_addr global ptr, align 8
@PL_UpperLatin1 = external local_unnamed_addr global ptr, align 8
@PL_Latin1 = external local_unnamed_addr global ptr, align 8
@PL_NonL1NonFinalFold = external local_unnamed_addr global ptr, align 8
@PL_HasMultiCharFold = external local_unnamed_addr global ptr, align 8
@PL_defstash = external local_unnamed_addr global ptr, align 8
@.str.4 = private unnamed_addr constant [7 x i8] c"main::\00", align 1
@PL_curstname = external local_unnamed_addr global ptr, align 8
@PL_isarev = external local_unnamed_addr global ptr, align 8
@.str.5 = private unnamed_addr constant [48 x i8] c"Unbalanced scopes: %ld more ENTERs than LEAVEs\0A\00", align 1
@PL_savestack_ix = external local_unnamed_addr global i32, align 4
@.str.6 = private unnamed_addr constant [48 x i8] c"Unbalanced saves: %ld more saves than restores\0A\00", align 1
@.str.7 = private unnamed_addr constant [45 x i8] c"Unbalanced tmps: %ld more allocs than frees\0A\00", align 1
@PL_curstackinfo = external local_unnamed_addr global ptr, align 8
@.str.8 = private unnamed_addr constant [47 x i8] c"Unbalanced context: %ld more PUSHes than POPs\0A\00", align 1
@.str.9 = private unnamed_addr constant [49 x i8] c"Unbalanced string table refcount: (%ld) for \22%s\22\00", align 1
@PL_sv_yes = external global %struct.sv, align 8
@PL_sv_no = external global %struct.sv, align 8
@PL_sv_count = external local_unnamed_addr global i64, align 8
@.str.10 = private unnamed_addr constant [21 x i8] c"Scalars leaked: %ld\0A\00", align 1
@PL_sv_undef = external global %struct.sv, align 8
@PL_origfilename = external local_unnamed_addr global ptr, align 8
@PL_reg_curpm = external local_unnamed_addr global ptr, align 8
@PL_op_mask = external local_unnamed_addr global ptr, align 8
@PL_psig_name = external local_unnamed_addr global ptr, align 8
@PL_psig_ptr = external local_unnamed_addr global ptr, align 8
@PL_psig_pend = external local_unnamed_addr global ptr, align 8
@PL_tainting = external local_unnamed_addr global i8, align 1
@PL_taint_warn = external local_unnamed_addr global i8, align 1
@PL_debug = external global i32, align 4
@PL_custom_op_names = external local_unnamed_addr global ptr, align 8
@PL_custom_op_descs = external local_unnamed_addr global ptr, align 8
@PL_custom_ops = external local_unnamed_addr global ptr, align 8
@PL_regmatch_slab = external local_unnamed_addr global ptr, align 8
@PL_mess_sv = external local_unnamed_addr global ptr, align 8
@PL_origargc = external local_unnamed_addr global i32, align 4
@PL_origargv = external local_unnamed_addr global ptr, align 8
@PL_origalen = external local_unnamed_addr global i32, align 4
@.str.11 = private unnamed_addr constant [11 x i8] c"NoNe  SuCh\00", align 1
@PL_do_undump = external local_unnamed_addr global i8, align 1
@PL_tainted = external local_unnamed_addr global i8, align 1
@PL_basetime = external global i64, align 8
@PL_curstash = external local_unnamed_addr global ptr, align 8
@.str.12 = private unnamed_addr constant [16 x i8] c"panic: top_env\0A\00", align 1
@PL_restartop = external local_unnamed_addr global ptr, align 8
@PL_curstack = external local_unnamed_addr global ptr, align 8
@PL_mainstack = external local_unnamed_addr global ptr, align 8
@PL_stack_sp = external local_unnamed_addr global ptr, align 8
@PL_stack_base = external local_unnamed_addr global ptr, align 8
@PL_stack_max = external local_unnamed_addr global ptr, align 8
@.str.13 = private unnamed_addr constant [30 x i8] c"panic: restartop in perl_run\0A\00", align 1
@PL_markstack_ptr = external local_unnamed_addr global ptr, align 8
@PL_markstack_max = external local_unnamed_addr global ptr, align 8
@PL_op = external local_unnamed_addr global ptr, align 8
@PL_ppaddr = external local_unnamed_addr global [0 x ptr], align 8
@PL_runops = external local_unnamed_addr global ptr, align 8
@PL_restartjmpenv = external local_unnamed_addr global ptr, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"eval_sv()\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.16 = private unnamed_addr constant [16 x i8] c"require q%c%s%c\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@PL_unicode = external local_unnamed_addr global i32, align 4
@PL_utf8cache = external local_unnamed_addr global i8, align 1
@PL_charclass = external local_unnamed_addr constant [0 x i32], align 4
@.str.18 = private unnamed_addr constant [17 x i8] c"PERL5DB_THREADED\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"no Devel::\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"use Devel::\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c" split(/,/,q{%s});\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"PERL5DB\00", align 1
@.str.24 = private unnamed_addr constant [70 x i8] c"Recompile perl with -DDEBUGGING to use -D switch (did you mean -d ?)\0A\00", align 1
@.str.25 = private unnamed_addr constant [30 x i8] c"No directory specified for -I\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"use \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c" no \00", align 1
@.str.29 = private unnamed_addr constant [37 x i8] c"Module name required with -%c option\00", align 1
@.str.30 = private unnamed_addr constant [62 x i8] c"Invalid module name %.*s with -%c option: contains single ':'\00", align 1
@.str.31 = private unnamed_addr constant [28 x i8] c"Can't use '%c' after -mname\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c" ()\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c" split(/,/,q\00\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"\00)\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"Missing argument to -%c\00", align 1
@.str.36 = private unnamed_addr constant [68 x i8] c"\22-%c\22 is on the #! line, it must also be used on the command line%s\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"Can't emulate -%.1s on #! line\00", align 1
@.str.38 = private unnamed_addr constant [57 x i8] c"Unrecognized switch: -%.1s  (-h will show valid options)\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"DB::args\00", align 1
@.str.40 = private unnamed_addr constant [26 x i8] c"Cannot set tied @DB::args\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"DB::DB\00", align 1
@.str.42 = private unnamed_addr constant [11 x i8] c"DB::dbline\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"DB::sub\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"DB::single\00", align 1
@PL_magic_vtables = external constant [31 x %struct.mgvtbl], align 16
@.str.45 = private unnamed_addr constant [10 x i8] c"DB::trace\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"DB::signal\00", align 1
@PL_tmps_stack = external local_unnamed_addr global ptr, align 8
@PL_tmps_max = external local_unnamed_addr global i64, align 8
@PL_markstack = external local_unnamed_addr global ptr, align 8
@PL_scopestack = external local_unnamed_addr global ptr, align 8
@PL_scopestack_max = external local_unnamed_addr global i32, align 4
@PL_savestack = external local_unnamed_addr global ptr, align 8
@PL_savestack_max = external local_unnamed_addr global i32, align 4
@.str.47 = private unnamed_addr constant [5 x i8] c"ARGV\00", align 1
@PL_utf8locale = external local_unnamed_addr global i8, align 1
@.str.48 = private unnamed_addr constant [66 x i8] c"-i used with no filenames on the command line, reading from STDIN\00", align 1
@PL_savebegin = external local_unnamed_addr global i8, align 1
@.str.49 = private unnamed_addr constant [34 x i8] c"BEGIN failed--compilation aborted\00", align 1
@.str.50 = private unnamed_addr constant [30 x i8] c"%s failed--call queue aborted\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"CHECK\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"INIT\00", align 1
@.str.53 = private unnamed_addr constant [10 x i8] c"UNITCHECK\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c"END\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c"%-p\00", align 1
@.str.56 = private unnamed_addr constant [22 x i8] c"panic: top_env, v=%d\0A\00", align 1
@.str.57 = private unnamed_addr constant [31 x i8] c"panic: restartop in call_list\0A\00", align 1
@.str.58 = private unnamed_addr constant [20 x i8] c"Unexpected exit %lu\00", align 1
@.str.59 = private unnamed_addr constant [28 x i8] c"Unexpected exit failure %ld\00", align 1
@PL_curinterp = external local_unnamed_addr global ptr, align 8
@PL_minus_E = external local_unnamed_addr global i8, align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"No code specified for -%c\00", align 1
@.str.61 = private unnamed_addr constant [25 x i8] c"use Config; Config::_V()\00", align 1
@.str.62 = private unnamed_addr constant [42 x i8] c"use Config; Config::config_vars(qw%c%s%c)\00", align 1
@.str.63 = private unnamed_addr constant [10 x i8] c"/dev/null\00", align 1
@.str.64 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.65 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.66 = private unnamed_addr constant [55 x i8] c"Unrecognized switch: -%s  (-h will show valid options)\00", align 1
@.str.67 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.68 = private unnamed_addr constant [45 x i8] c"Can't ignore signal CHLD, forcing to default\00", align 1
@.str.69 = private unnamed_addr constant [18 x i8] c"Can't chdir to %s\00", align 1
@PL_compcv = external local_unnamed_addr global ptr, align 8
@.str.70 = private unnamed_addr constant [13 x i8] c"Internals::V\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"perl.c\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c":utf8\00", align 1
@PL_defoutgv = external local_unnamed_addr global ptr, align 8
@.str.73 = private unnamed_addr constant [5 x i8] c"\0FPEN\00", align 1
@.str.74 = private unnamed_addr constant [12 x i8] c":utf8\00:utf8\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c":utf8\00\00", align 1
@.str.76 = private unnamed_addr constant [7 x i8] c"\00:utf8\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@.str.78 = private unnamed_addr constant [28 x i8] c"%s had compilation errors.\0A\00", align 1
@.str.79 = private unnamed_addr constant [52 x i8] c"Execution of %s aborted due to compilation errors.\0A\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"INC\00", align 1
@.str.81 = private unnamed_addr constant [2 x i8] c"\08\00", align 1
@.str.82 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@PL_defgv = external local_unnamed_addr global ptr, align 8
@.str.83 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.84 = private unnamed_addr constant [2 x i8] c"\12\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"%240s\00", align 1
@.str.86 = private unnamed_addr constant [5 x i8] c"DB::\00", align 1
@.str.87 = private unnamed_addr constant [15 x i8] c"CORE::GLOBAL::\00", align 1
@PL_globalstash = external local_unnamed_addr global ptr, align 8
@.str.88 = private unnamed_addr constant [4 x i8] c"lib\00", align 1
@.str.89 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"-e\00", align 1
@.str.91 = private unnamed_addr constant [9 x i8] c"/dev/fd/\00", align 1
@.str.92 = private unnamed_addr constant [41 x i8] c"Wrong syntax (suid) fd script name \22%s\22\0A\00", align 1
@.str.93 = private unnamed_addr constant [31 x i8] c"Missing (suid) fd script name\0A\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.95 = private unnamed_addr constant [26 x i8] c"Can't open /dev/null: %s\0A\00", align 1
@.str.96 = private unnamed_addr constant [33 x i8] c"Can't open perl script \22%s\22: %s\0A\00", align 1
@.str.97 = private unnamed_addr constant [31 x i8] c"No Perl script found in input\0A\00", align 1
@.str.98 = private unnamed_addr constant [5 x i8] c"perl\00", align 1
@.str.99 = private unnamed_addr constant [5 x i8] c"PERL\00", align 1
@S_Internals_V.non_bincompat_options = internal constant [113 x i8] c" PERL_DONT_CREATE_GVSV PERL_HASH_FUNC_ONE_AT_A_TIME_HARD PERL_NEW_COPY_ON_WRITE PERL_PRESERVE_IVUV USE_PERL_ATOF\00", align 16
@PL_bincompat_options = external constant [0 x i8], align 1
@.str.100 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.101 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.102 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.103 = private unnamed_addr constant [14 x i8] c"IO::File::ISA\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"IO::Handle::\00", align 1
@.str.105 = private unnamed_addr constant [15 x i8] c"IO::Seekable::\00", align 1
@.str.106 = private unnamed_addr constant [11 x i8] c"Exporter::\00", align 1
@.str.107 = private unnamed_addr constant [6 x i8] c"STDIN\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.109 = private unnamed_addr constant [7 x i8] c"STDOUT\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"STDERR\00", align 1
@.str.112 = private unnamed_addr constant [7 x i8] c"stderr\00", align 1
@.str.113 = private unnamed_addr constant [14 x i8] c"%s syntax OK\0A\00", align 1
@.str.114 = private unnamed_addr constant [385 x i8] c"  -0[octal]         specify record separator (\\0, if no argument)\0A  -a                autosplit mode with -n or -p (splits $_ into @F)\0A  -C[number/list]   enables the listed Unicode features\0A  -c                check syntax only (runs BEGIN and CHECK blocks)\0A  -d[:debugger]     run program under debugger\0A  -D[number/list]   set debugging flags (argument is a bit mask or alphabets)\0A\00", align 1
@.str.115 = private unnamed_addr constant [436 x i8] c"  -e program        one line of program (several -e's allowed, omit programfile)\0A  -E program        like -e, but enables all optional features\0A  -f                don't do $sitelib/sitecustomize.pl at startup\0A  -F/pattern/       split() pattern for -a switch (//'s are optional)\0A  -i[extension]     edit <> files in place (makes backup if extension supplied)\0A  -Idirectory       specify @INC/#include directory (several -I's allowed)\0A\00", align 1
@.str.116 = private unnamed_addr constant [439 x i8] c"  -l[octal]         enable line ending processing, specifies line terminator\0A  -[mM][-]module    execute \22use/no module...\22 before executing program\0A  -n                assume \22while (<>) { ... }\22 loop around program\0A  -p                assume loop like -n but print line also, like sed\0A  -s                enable rudimentary parsing for switches after programfile\0A  -S                look for programfile using PATH environment variable\0A\00", align 1
@.str.117 = private unnamed_addr constant [324 x i8] c"  -t                enable tainting warnings\0A  -T                enable tainting checks\0A  -u                dump core after parsing program\0A  -U                allow unsafe operations\0A  -v                print version, patchlevel and license\0A  -V[:variable]     print configuration summary (or a single Config.pm variable)\0A\00", align 1
@.str.118 = private unnamed_addr constant [258 x i8] c"  -w                enable many useful warnings\0A  -W                enable all warnings\0A  -x[directory]     ignore text before #!perl line (optionally cd to directory)\0A  -X                disable all warnings\0A  \0ARun 'perldoc perl' for more help with Perl.\0A\0A\00", align 1
@.str.119 = private unnamed_addr constant [54 x i8] c"\0AUsage: %s [switches] [--] [programfile] [arguments]\0A\00", align 1
@.str.120 = private unnamed_addr constant [67 x i8] c"\0AThis is perl 5, version 22, subversion 1 (%-p) built for spec-cpu\00", align 1
@.str.121 = private unnamed_addr constant [35 x i8] c"\0A\0ACopyright 1987-2015, Larry Wall\0A\00", align 1
@.str.122 = private unnamed_addr constant [377 x i8] c"\0APerl may be copied only under the terms of either the Artistic License or the\0AGNU General Public License, which may be found in the Perl 5 source kit.\0A\0AComplete documentation for Perl, including FAQ lists, should be found on\0Athis system using \22man perl\22 or \22perldoc perl\22.  If you have access to the\0AInternet, point your browser at http://www.perl.org/, the Perl Home Page.\0A\0A\00", align 1
@PL_sub_generation = external local_unnamed_addr global i32, align 4
@PL_sawalias = external local_unnamed_addr global i8, align 1
@PL_hash_rand_bits_enabled = external local_unnamed_addr global i8, align 1
@PL_hash_rand_bits = external local_unnamed_addr global i64, align 8
@.str.123 = private unnamed_addr constant [4 x i8] c" \0A-\00", align 1
@PL_chopset = external local_unnamed_addr global ptr, align 8
@PL_dumpindent = external local_unnamed_addr global i16, align 2
@PL_peepp = external local_unnamed_addr global ptr, align 8
@PL_rpeepp = external local_unnamed_addr global ptr, align 8
@PL_opfreehook = external local_unnamed_addr global ptr, align 8
@PL_watchaddr = external local_unnamed_addr global ptr, align 8
@PL_xsubfilename = external local_unnamed_addr global ptr, align 8
@PL_maxsysfd = external local_unnamed_addr global i32, align 4
@PL_sig_pending = external local_unnamed_addr global i32, align 4
@PL_curcopdb = external local_unnamed_addr global ptr, align 8
@PL_gensym = external local_unnamed_addr global i32, align 4
@PL_cv_has_eval = external local_unnamed_addr global i8, align 1
@PL_laststype = external local_unnamed_addr global i16, align 2
@PL_laststatval = external local_unnamed_addr global i32, align 4
@PL_profiledata = external local_unnamed_addr global ptr, align 8
@PL_generation = external local_unnamed_addr global i32, align 4
@PL_in_clean_objs = external local_unnamed_addr global i8, align 1
@PL_in_clean_all = external local_unnamed_addr global i8, align 1
@PL_an = external local_unnamed_addr global i32, align 4
@PL_breakable_sub_gen = external local_unnamed_addr global i32, align 4
@PL_cop_seqmax = external local_unnamed_addr global i32, align 4
@PL_evalseq = external local_unnamed_addr global i32, align 4
@PL_maxo = external local_unnamed_addr global i32, align 4
@PL_in_load_module = external local_unnamed_addr global i8, align 1
@PL_perlio = external local_unnamed_addr global ptr, align 8
@PL_known_layers = external local_unnamed_addr global ptr, align 8
@PL_def_layerlist = external local_unnamed_addr global ptr, align 8
@PL_encoding = external local_unnamed_addr global ptr, align 8
@PL_lex_encoding = external local_unnamed_addr global ptr, align 8
@PL_sharehook = external local_unnamed_addr global ptr, align 8
@PL_lockhook = external local_unnamed_addr global ptr, align 8
@PL_unlockhook = external local_unnamed_addr global ptr, align 8
@PL_destroyhook = external local_unnamed_addr global ptr, align 8
@PL_signalhook = external local_unnamed_addr global ptr, align 8
@PL_scopestack_name = external local_unnamed_addr global ptr, align 8
@PL_globhook = external local_unnamed_addr global ptr, align 8
@PL_padlist_generation = external local_unnamed_addr global i32, align 4
@.str.124 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c"ENV\00", align 1
@.str.126 = private unnamed_addr constant [8 x i8] c"main::F\00", align 1
@.str.127 = private unnamed_addr constant [17 x i8] c"/5.22.1/spec-cpu\00", align 1
@.str.128 = private unnamed_addr constant [8 x i8] c"/5.22.1\00", align 1
@.str.130 = private unnamed_addr constant [10 x i8] c"/spec-cpu\00", align 1

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_sys_init(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1) local_unnamed_addr #0 {
  %3 = tail call ptr @__sysv_signal(i32 noundef 8, ptr noundef nonnull inttoptr (i64 1 to ptr)) #17
  store ptr %3, ptr @PL_sigfpe_saved, align 8, !tbaa !5
  ret void
}

; Function Attrs: nounwind
declare ptr @__sysv_signal(i32 noundef, ptr noundef) local_unnamed_addr #1

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_sys_init3(ptr nocapture noundef readnone %0, ptr nocapture noundef readnone %1, ptr nocapture noundef readnone %2) local_unnamed_addr #0 {
  %4 = tail call ptr @__sysv_signal(i32 noundef 8, ptr noundef nonnull inttoptr (i64 1 to ptr)) #17
  store ptr %4, ptr @PL_sigfpe_saved, align 8, !tbaa !5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_sys_term() local_unnamed_addr #0 {
  %1 = load i32, ptr @PL_veto_cleanup, align 4, !tbaa !9
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @PerlIO_teardown() #17
  br label %4

4:                                                ; preds = %3, %0
  ret void
}

declare void @PerlIO_teardown() local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind sspstrong willreturn memory(readwrite, argmem: none) uwtable
define dso_local ptr @perl_alloc() local_unnamed_addr #3 {
  %1 = tail call noalias dereferenceable_or_null(1) ptr @malloc(i64 noundef 1) #18
  %2 = load ptr, ptr @PL_curinterp, align 8, !tbaa !5
  %3 = icmp eq ptr %2, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  store ptr %1, ptr @PL_curinterp, align 8, !tbaa !5
  br label %5

5:                                                ; preds = %0, %4
  store i8 0, ptr %1, align 1
  ret ptr %1
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #4

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @perl_construct(ptr nocapture noundef readnone %0) local_unnamed_addr #0 {
  %2 = load i8, ptr @PL_perl_destruct_level, align 1, !tbaa !11
  %3 = icmp sgt i8 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  store i64 -1, ptr @PL_tmps_ix, align 8, !tbaa !12
  store i64 -1, ptr @PL_tmps_floor, align 8, !tbaa !12
  store i32 1, ptr @PL_sub_generation, align 4, !tbaa !9
  store i8 0, ptr @PL_sawalias, align 1, !tbaa !14
  store i8 1, ptr @PL_hash_rand_bits_enabled, align 1, !tbaa !11
  store i64 0, ptr @PL_hash_rand_bits, align 8, !tbaa !12
  store i8 1, ptr @PL_utf8cache, align 1, !tbaa !11
  store ptr null, ptr @PL_reg_curpm, align 8, !tbaa !5
  store ptr null, ptr @PL_regmatch_slab, align 8, !tbaa !5
  store ptr null, ptr @PL_statname, align 8, !tbaa !5
  store ptr @.str.123, ptr @PL_chopset, align 8, !tbaa !5
  store ptr null, ptr @PL_errors, align 8, !tbaa !5
  store i16 4, ptr @PL_dumpindent, align 2, !tbaa !16
  store ptr @Perl_peep, ptr @PL_peepp, align 8, !tbaa !5
  store ptr @Perl_rpeep, ptr @PL_rpeepp, align 8, !tbaa !5
  store ptr null, ptr @PL_opfreehook, align 8, !tbaa !5
  store ptr null, ptr @PL_watchaddr, align 8, !tbaa !5
  store ptr null, ptr @PL_xsubfilename, align 8, !tbaa !5
  store ptr @.str.101, ptr @PL_splitstr, align 8, !tbaa !5
  store i32 2, ptr @PL_maxsysfd, align 4, !tbaa !9
  store i32 0, ptr @PL_sig_pending, align 4, !tbaa !9
  store ptr null, ptr @PL_op_mask, align 8, !tbaa !5
  store ptr null, ptr @PL_curcopdb, align 8, !tbaa !5
  store i32 0, ptr @PL_gensym, align 4, !tbaa !9
  store i8 0, ptr @PL_cv_has_eval, align 1, !tbaa !14
  store i16 265, ptr @PL_laststype, align 2, !tbaa !16
  store i32 -1, ptr @PL_laststatval, align 4, !tbaa !9
  store i32 0, ptr @PL_exitlistlen, align 4, !tbaa !9
  store ptr null, ptr @PL_exitlist, align 8, !tbaa !5
  store ptr null, ptr @PL_profiledata, align 8, !tbaa !5
  store i32 100, ptr @PL_generation, align 4, !tbaa !9
  store i8 0, ptr @PL_in_clean_objs, align 1, !tbaa !14
  store i8 0, ptr @PL_in_clean_all, align 1, !tbaa !14
  store i8 0, ptr @PL_savebegin, align 1, !tbaa !14
  store i32 0, ptr @PL_an, align 4, !tbaa !9
  store i32 0, ptr @PL_breakable_sub_gen, align 4, !tbaa !9
  store i32 0, ptr @PL_cop_seqmax, align 4, !tbaa !9
  store i32 0, ptr @PL_evalseq, align 4, !tbaa !9
  store i32 396, ptr @PL_maxo, align 4, !tbaa !9
  store ptr @Perl_runops_standard, ptr @PL_runops, align 8, !tbaa !5
  store i32 0, ptr @PL_phase, align 4, !tbaa !11
  store i8 0, ptr @PL_in_load_module, align 1, !tbaa !14
  store i8 0, ptr @PL_perl_destruct_level, align 1, !tbaa !11
  store ptr null, ptr @PL_beginav_save, align 8, !tbaa !5
  store ptr null, ptr @PL_perlio, align 8, !tbaa !5
  store ptr null, ptr @PL_known_layers, align 8, !tbaa !5
  store ptr null, ptr @PL_def_layerlist, align 8, !tbaa !5
  store ptr null, ptr @PL_encoding, align 8, !tbaa !5
  store ptr null, ptr @PL_lex_encoding, align 8, !tbaa !5
  store ptr null, ptr @PL_checkav_save, align 8, !tbaa !5
  store ptr null, ptr @PL_unitcheckav_save, align 8, !tbaa !5
  store i64 0, ptr @PL_clocktick, align 8, !tbaa !12
  store ptr @Perl_sv_nosharing, ptr @PL_sharehook, align 8, !tbaa !5
  store ptr @Perl_sv_nosharing, ptr @PL_lockhook, align 8, !tbaa !5
  store ptr @Perl_sv_nounlocking, ptr @PL_unlockhook, align 8, !tbaa !5
  store ptr @Perl_nothreadhook, ptr @PL_threadhook, align 8, !tbaa !5
  store ptr @Perl_sv_destroyable, ptr @PL_destroyhook, align 8, !tbaa !5
  store ptr @Perl_despatch_signals, ptr @PL_signalhook, align 8, !tbaa !5
  store ptr null, ptr @PL_isarev, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_foldclosures, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_foldable, align 8, !tbaa !5
  store ptr null, ptr @PL_scopestack_name, align 8, !tbaa !5
  store ptr null, ptr @PL_globhook, align 8, !tbaa !5
  store i32 1, ptr @PL_padlist_generation, align 4, !tbaa !9
  br label %5

5:                                                ; preds = %4, %1
  store ptr @PL_compiling, ptr @PL_curcop, align 8, !tbaa !5
  tail call void @Perl_init_constants() #17
  %6 = load i32, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_placeholder, i64 0, i32 2), align 4, !tbaa !18
  %7 = or i32 %6, 134283264
  store i32 %7, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_placeholder, i64 0, i32 2), align 4, !tbaa !18
  store i32 2147483647, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_placeholder, i64 0, i32 1), align 8, !tbaa !20
  store ptr @Perl_sighandler, ptr @PL_sighandlerp, align 8, !tbaa !5
  %8 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str, i64 noundef 1) #17
  store ptr %8, ptr @PL_rs, align 8, !tbaa !5
  %9 = tail call ptr @Perl_new_stackinfo(i32 noundef 128, i32 noundef 92) #17
  store ptr %9, ptr @PL_curstackinfo, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.stackinfo, ptr %9, i64 0, i32 6
  store i32 1, ptr %10, align 8, !tbaa !21
  %11 = load ptr, ptr %9, align 8, !tbaa !23
  store ptr %11, ptr @PL_curstack, align 8, !tbaa !5
  store ptr %11, ptr @PL_mainstack, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.av, ptr %11, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !11
  store ptr %13, ptr @PL_stack_base, align 8, !tbaa !5
  store ptr %13, ptr @PL_stack_sp, align 8, !tbaa !5
  %14 = load ptr, ptr %11, align 8, !tbaa !24
  %15 = getelementptr inbounds %struct.xpvav, ptr %14, i64 0, i32 3
  %16 = load i64, ptr %15, align 8, !tbaa !26
  %17 = getelementptr inbounds ptr, ptr %13, i64 %16
  store ptr %17, ptr @PL_stack_max, align 8, !tbaa !5
  %18 = tail call ptr @Perl_safesysmalloc(i64 noundef 1024) #17
  store ptr %18, ptr @PL_tmps_stack, align 8, !tbaa !5
  store i64 -1, ptr @PL_tmps_floor, align 8, !tbaa !12
  store i64 -1, ptr @PL_tmps_ix, align 8, !tbaa !12
  store i64 128, ptr @PL_tmps_max, align 8, !tbaa !12
  %19 = tail call ptr @Perl_safesysmalloc(i64 noundef 128) #17
  store ptr %19, ptr @PL_markstack, align 8, !tbaa !5
  store ptr %19, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %20 = getelementptr inbounds i32, ptr %19, i64 32
  store ptr %20, ptr @PL_markstack_max, align 8, !tbaa !5
  %21 = tail call ptr @Perl_safesysmalloc(i64 noundef 128) #17
  store ptr %21, ptr @PL_scopestack, align 8, !tbaa !5
  store i32 0, ptr @PL_scopestack_ix, align 4, !tbaa !9
  store i32 32, ptr @PL_scopestack_max, align 4, !tbaa !9
  %22 = tail call ptr @Perl_safesysmalloc(i64 noundef 1024) #17
  store ptr %22, ptr @PL_savestack, align 8, !tbaa !5
  store i32 0, ptr @PL_savestack_ix, align 4, !tbaa !9
  store i32 128, ptr @PL_savestack_max, align 4, !tbaa !9
  %23 = tail call i32 @getuid() #17
  %24 = tail call i32 @geteuid() #17
  %25 = tail call i32 @getgid() #17
  %26 = tail call i32 @getegid() #17
  %27 = load i8, ptr @PL_tainting, align 1, !tbaa !14, !range !28, !noundef !29
  %28 = icmp ne i32 %23, 0
  %29 = icmp ne i32 %24, %23
  %30 = icmp ne i32 %26, %25
  %31 = select i1 %29, i1 true, i1 %30
  %32 = select i1 %28, i1 %31, i1 false
  %33 = zext i1 %32 to i8
  %34 = or i8 %27, %33
  store i8 %34, ptr @PL_tainting, align 1, !tbaa !14
  store ptr @PL_start_env, ptr @PL_top_env, align 8, !tbaa !5
  store ptr null, ptr getelementptr inbounds (%struct.jmpenv, ptr @PL_start_env, i64 0, i32 1), align 8, !tbaa !30
  store i32 -1, ptr getelementptr inbounds (%struct.jmpenv, ptr @PL_start_env, i64 0, i32 2), align 8, !tbaa !32
  store i8 1, ptr getelementptr inbounds (%struct.jmpenv, ptr @PL_start_env, i64 0, i32 3), align 4, !tbaa !33
  store i32 0, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 0, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  %35 = tail call i32 @Perl_init_i18nl10n(i32 noundef 1) #17
  store ptr @local_patches, ptr @PL_localpatches, align 8, !tbaa !5
  tail call void @PerlIO_init() #17
  %36 = tail call ptr @Perl_newSV_type(i32 noundef 11) #17
  store ptr %36, ptr @PL_fdpid, align 8, !tbaa !5
  %37 = tail call ptr @Perl_newSV_type(i32 noundef 12) #17
  store ptr %37, ptr @PL_modglobal, align 8, !tbaa !5
  %38 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %38, ptr @PL_errors, align 8, !tbaa !5
  tail call void @Perl_sv_setpvn(ptr noundef nonnull @PL_debug_pad, ptr noundef nonnull @.str.1, i64 noundef 0) #17
  tail call void @Perl_sv_setpvn(ptr noundef nonnull getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 1), ptr noundef nonnull @.str.1, i64 noundef 0) #17
  tail call void @Perl_sv_setpvn(ptr noundef nonnull getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 2), ptr noundef nonnull @.str.1, i64 noundef 0) #17
  %39 = load i8, ptr @PL_hash_seed_set, align 1, !tbaa !14, !range !28, !noundef !29
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %5
  tail call void @Perl_get_hash_seed(ptr noundef nonnull @PL_hash_seed) #17
  store i8 1, ptr @PL_hash_seed_set, align 1, !tbaa !14
  br label %42

42:                                               ; preds = %41, %5
  %43 = tail call ptr @Perl_newSV_type(i32 noundef 12) #17
  store ptr %43, ptr @PL_strtab, align 8, !tbaa !5
  %44 = getelementptr inbounds %struct.hv, ptr %43, i64 0, i32 2
  %45 = load i32, ptr %44, align 4, !tbaa !34
  %46 = and i32 %45, -536870913
  store i32 %46, ptr %44, align 4, !tbaa !34
  tail call void @Perl_hv_ksplit(ptr noundef %43, i64 noundef 512) #17
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(280) @PL_sv_consts, i8 0, i64 280, i1 false)
  %47 = load ptr, ptr @environ, align 8, !tbaa !5
  store ptr %47, ptr @PL_origenviron, align 8, !tbaa !5
  store i64 60, ptr @PL_clocktick, align 8, !tbaa !12
  %48 = tail call ptr @Perl_newSV_type(i32 noundef 12) #17
  store ptr %48, ptr @PL_stashcache, align 8, !tbaa !5
  %49 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.2, i64 noundef 7) #17
  store ptr %49, ptr @PL_patchlevel, align 8, !tbaa !5
  %50 = tail call ptr @Perl_savepvn(ptr noundef nonnull @.str.3, i32 noundef 8) #17
  store ptr %50, ptr @PL_osname, align 8, !tbaa !5
  %51 = tail call ptr @Perl_newSV_type(i32 noundef 12) #17
  store ptr %51, ptr @PL_registered_mros, align 8, !tbaa !5
  %52 = load ptr, ptr %51, align 8, !tbaa !36
  %53 = getelementptr inbounds %struct.xpvhv, ptr %52, i64 0, i32 3
  store i64 0, ptr %53, align 8, !tbaa !37
  %54 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @ASCII_invlist) #17
  store ptr %54, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 14), align 16, !tbaa !5
  %55 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixAlnum_invlist) #17
  store ptr %55, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 7), align 8, !tbaa !5
  %56 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixAlpha_invlist) #17
  store ptr %56, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 2), align 16, !tbaa !5
  %57 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixBlank_invlist) #17
  store ptr %57, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 11), align 8, !tbaa !5
  %58 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @Cased_invlist) #17
  store ptr %58, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 9), align 8, !tbaa !5
  %59 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixCntrl_invlist) #17
  store ptr %59, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 13), align 8, !tbaa !5
  %60 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixDigit_invlist) #17
  store ptr %60, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 1), align 8, !tbaa !5
  %61 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixGraph_invlist) #17
  store ptr %61, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 8), align 16, !tbaa !5
  %62 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixLower_invlist) #17
  store ptr %62, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 3), align 8, !tbaa !5
  %63 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixPrint_invlist) #17
  store ptr %63, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 6), align 16, !tbaa !5
  %64 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixPunct_invlist) #17
  store ptr %64, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 5), align 8, !tbaa !5
  %65 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPerlSpace_invlist) #17
  store ptr %65, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 10), align 16, !tbaa !5
  %66 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixUpper_invlist) #17
  store ptr %66, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 4), align 16, !tbaa !5
  %67 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @VertSpace_invlist) #17
  store ptr %67, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 15), align 8, !tbaa !5
  %68 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixWord_invlist) #17
  store ptr %68, ptr @PL_XPosix_ptrs, align 16, !tbaa !5
  %69 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @XPosixXDigit_invlist) #17
  store ptr %69, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 12), align 16, !tbaa !5
  %70 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @Grapheme_Cluster_Break_invlist) #17
  store ptr %70, ptr @PL_GCB_invlist, align 8, !tbaa !5
  %71 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @Sentence_Break_invlist) #17
  store ptr %71, ptr @PL_SB_invlist, align 8, !tbaa !5
  %72 = tail call ptr @Perl__new_invlist_C_array(ptr noundef nonnull @Word_Break_invlist) #17
  store ptr %72, ptr @PL_WB_invlist, align 8, !tbaa !5
  tail call void @Perl_push_scope() #17
  ret void
}

declare void @Perl_init_constants() local_unnamed_addr #2

declare void @Perl_sighandler(i32 noundef) #2

declare ptr @Perl_newSVpvn(ptr noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_init_stacks() local_unnamed_addr #0 {
  %1 = tail call ptr @Perl_new_stackinfo(i32 noundef 128, i32 noundef 92) #17
  store ptr %1, ptr @PL_curstackinfo, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.stackinfo, ptr %1, i64 0, i32 6
  store i32 1, ptr %2, align 8, !tbaa !21
  %3 = load ptr, ptr %1, align 8, !tbaa !23
  store ptr %3, ptr @PL_curstack, align 8, !tbaa !5
  store ptr %3, ptr @PL_mainstack, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.av, ptr %3, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !11
  store ptr %5, ptr @PL_stack_base, align 8, !tbaa !5
  store ptr %5, ptr @PL_stack_sp, align 8, !tbaa !5
  %6 = load ptr, ptr %3, align 8, !tbaa !24
  %7 = getelementptr inbounds %struct.xpvav, ptr %6, i64 0, i32 3
  %8 = load i64, ptr %7, align 8, !tbaa !26
  %9 = getelementptr inbounds ptr, ptr %5, i64 %8
  store ptr %9, ptr @PL_stack_max, align 8, !tbaa !5
  %10 = tail call ptr @Perl_safesysmalloc(i64 noundef 1024) #17
  store ptr %10, ptr @PL_tmps_stack, align 8, !tbaa !5
  store i64 -1, ptr @PL_tmps_floor, align 8, !tbaa !12
  store i64 -1, ptr @PL_tmps_ix, align 8, !tbaa !12
  store i64 128, ptr @PL_tmps_max, align 8, !tbaa !12
  %11 = tail call ptr @Perl_safesysmalloc(i64 noundef 128) #17
  store ptr %11, ptr @PL_markstack, align 8, !tbaa !5
  store ptr %11, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %12 = getelementptr inbounds i32, ptr %11, i64 32
  store ptr %12, ptr @PL_markstack_max, align 8, !tbaa !5
  %13 = tail call ptr @Perl_safesysmalloc(i64 noundef 128) #17
  store ptr %13, ptr @PL_scopestack, align 8, !tbaa !5
  store i32 0, ptr @PL_scopestack_ix, align 4, !tbaa !9
  store i32 32, ptr @PL_scopestack_max, align 4, !tbaa !9
  %14 = tail call ptr @Perl_safesysmalloc(i64 noundef 1024) #17
  store ptr %14, ptr @PL_savestack, align 8, !tbaa !5
  store i32 0, ptr @PL_savestack_ix, align 4, !tbaa !9
  store i32 128, ptr @PL_savestack_max, align 4, !tbaa !9
  ret void
}

declare i32 @Perl_init_i18nl10n(i32 noundef) local_unnamed_addr #2

declare void @PerlIO_init() local_unnamed_addr #2

declare ptr @Perl_newSV_type(i32 noundef) local_unnamed_addr #2

declare void @Perl_sv_setpvn(ptr noundef, ptr noundef, i64 noundef) local_unnamed_addr #2

declare void @Perl_get_hash_seed(ptr noundef) local_unnamed_addr #2

declare void @Perl_hv_ksplit(ptr noundef, i64 noundef) local_unnamed_addr #2

declare ptr @Perl_savepvn(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl__new_invlist_C_array(ptr noundef) local_unnamed_addr #2

declare void @Perl_push_scope() local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local i32 @Perl_nothreadhook() #7 {
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @perl_destruct(ptr nocapture noundef readnone %0) local_unnamed_addr #0 {
  %2 = alloca i8, align 1
  %3 = alloca %struct.jmpenv, align 8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2)
  %4 = load i8, ptr @PL_perl_destruct_level, align 1, !tbaa !11
  store volatile i8 %4, ptr %2, align 1, !tbaa !11
  %5 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %23, label %8

8:                                                ; preds = %1
  call void @llvm.lifetime.start.p0(i64 216, ptr nonnull %3) #17
  %9 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.jmpenv, ptr %3, i64 0, i32 1
  store ptr %9, ptr %10, align 8, !tbaa !30
  %11 = call i32 @__sigsetjmp(ptr noundef nonnull %3, i32 noundef 0) #19
  %12 = getelementptr inbounds %struct.jmpenv, ptr %3, i64 0, i32 2
  store i32 %11, ptr %12, align 8, !tbaa !32
  store ptr %3, ptr @PL_top_env, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.jmpenv, ptr %3, i64 0, i32 3
  store i8 0, ptr %13, align 4, !tbaa !33
  %14 = load ptr, ptr @PL_endav, align 8, !tbaa !5
  %15 = icmp ne ptr %14, null
  %16 = load i8, ptr @PL_minus_c, align 1, !range !28
  %17 = icmp eq i8 %16, 0
  %18 = select i1 %15, i1 %17, i1 false
  br i1 %18, label %19, label %21

19:                                               ; preds = %8
  store i32 5, ptr @PL_phase, align 4, !tbaa !11
  %20 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  call void @Perl_call_list(i32 noundef %20, ptr noundef nonnull %14)
  br label %21

21:                                               ; preds = %8, %19
  %22 = load ptr, ptr %10, align 8, !tbaa !30
  store ptr %22, ptr @PL_top_env, align 8, !tbaa !5
  call void @llvm.lifetime.end.p0(i64 216, ptr nonnull %3) #17
  br label %23

23:                                               ; preds = %21, %1
  call void @Perl_pop_scope() #17
  %24 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %25 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %26 = icmp sgt i64 %24, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  call void @Perl_free_tmps() #17
  br label %28

28:                                               ; preds = %27, %23
  %29 = call i32 @Perl_my_fflush_all() #17
  %30 = load ptr, ptr @PL_threadhook, align 8, !tbaa !5
  %31 = call i32 %30() #17
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %28
  store i32 1, ptr @PL_veto_cleanup, align 4, !tbaa !9
  br label %1128

34:                                               ; preds = %28
  store ptr @PL_compiling, ptr @PL_curcop, align 8, !tbaa !5
  %35 = load ptr, ptr @PL_main_root, align 8, !tbaa !5
  %36 = icmp eq ptr %35, null
  br i1 %36, label %57, label %37

37:                                               ; preds = %34
  %38 = load ptr, ptr @PL_main_cv, align 8, !tbaa !5
  %39 = load ptr, ptr %38, align 8, !tbaa !39
  %40 = getelementptr inbounds %struct.xpvcv, ptr %39, i64 0, i32 9
  %41 = load ptr, ptr %40, align 8, !tbaa !11
  %42 = icmp eq ptr %41, null
  br i1 %42, label %56, label %43

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.padlist, ptr %41, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !41
  %46 = getelementptr inbounds ptr, ptr %45, i64 1
  %47 = load ptr, ptr %46, align 8, !tbaa !5
  store ptr %47, ptr @PL_comppad, align 8, !tbaa !5
  %48 = getelementptr inbounds %struct.av, ptr %47, i64 0, i32 3
  %49 = load ptr, ptr %48, align 8, !tbaa !11
  store ptr %49, ptr @PL_curpad, align 8, !tbaa !5
  %50 = load ptr, ptr %38, align 8, !tbaa !39
  %51 = getelementptr inbounds %struct.xpvcv, ptr %50, i64 0, i32 9
  %52 = load ptr, ptr %51, align 8, !tbaa !11
  %53 = getelementptr inbounds %struct.padlist, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !41
  %55 = load ptr, ptr %54, align 8, !tbaa !5
  store ptr %55, ptr @PL_comppad_name, align 8, !tbaa !5
  br label %56

56:                                               ; preds = %43, %37
  call void @Perl_op_free(ptr noundef nonnull %35) #17
  store ptr null, ptr @PL_main_root, align 8, !tbaa !5
  br label %57

57:                                               ; preds = %56, %34
  store ptr null, ptr @PL_main_start, align 8, !tbaa !5
  %58 = load ptr, ptr @PL_main_cv, align 8, !tbaa !5
  %59 = icmp eq ptr %58, null
  br i1 %59, label %67, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.sv, ptr %58, i64 0, i32 1
  %62 = load i32, ptr %61, align 8, !tbaa !20
  %63 = icmp ugt i32 %62, 1
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = add i32 %62, -1
  store i32 %65, ptr %61, align 8, !tbaa !20
  br label %67

66:                                               ; preds = %60
  call void @Perl_sv_free2(ptr noundef nonnull %58, i32 noundef %62) #17
  br label %67

67:                                               ; preds = %57, %64, %66
  store ptr null, ptr @PL_main_cv, align 8, !tbaa !5
  store i32 6, ptr @PL_phase, align 4, !tbaa !11
  call void @PerlIO_destruct() #17
  call void @Perl_sv_clean_objs() #17
  %68 = load ptr, ptr @PL_warnhook, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %77, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %struct.sv, ptr %68, i64 0, i32 1
  %72 = load i32, ptr %71, align 8, !tbaa !20
  %73 = icmp ugt i32 %72, 1
  br i1 %73, label %74, label %76

74:                                               ; preds = %70
  %75 = add i32 %72, -1
  store i32 %75, ptr %71, align 8, !tbaa !20
  br label %77

76:                                               ; preds = %70
  call void @Perl_sv_free2(ptr noundef nonnull %68, i32 noundef %72) #17
  br label %77

77:                                               ; preds = %67, %74, %76
  store ptr null, ptr @PL_warnhook, align 8, !tbaa !5
  %78 = load ptr, ptr @PL_diehook, align 8, !tbaa !5
  %79 = icmp eq ptr %78, null
  br i1 %79, label %87, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %struct.sv, ptr %78, i64 0, i32 1
  %82 = load i32, ptr %81, align 8, !tbaa !20
  %83 = icmp ugt i32 %82, 1
  br i1 %83, label %84, label %86

84:                                               ; preds = %80
  %85 = add i32 %82, -1
  store i32 %85, ptr %81, align 8, !tbaa !20
  br label %87

86:                                               ; preds = %80
  call void @Perl_sv_free2(ptr noundef nonnull %78, i32 noundef %82) #17
  br label %87

87:                                               ; preds = %77, %84, %86
  store ptr null, ptr @PL_diehook, align 8, !tbaa !5
  %88 = load i32, ptr @PL_exitlistlen, align 4, !tbaa !9
  %89 = add nsw i32 %88, -1
  store i32 %89, ptr @PL_exitlistlen, align 4, !tbaa !9
  %90 = icmp sgt i32 %88, 0
  br i1 %90, label %91, label %102

91:                                               ; preds = %87, %91
  %92 = phi i32 [ %100, %91 ], [ %89, %87 ]
  %93 = load ptr, ptr @PL_exitlist, align 8, !tbaa !5
  %94 = zext i32 %92 to i64
  %95 = getelementptr inbounds %struct.exitlistentry, ptr %93, i64 %94
  %96 = load ptr, ptr %95, align 8, !tbaa !43
  %97 = getelementptr inbounds %struct.exitlistentry, ptr %93, i64 %94, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !45
  call void %96(ptr noundef %98) #17
  %99 = load i32, ptr @PL_exitlistlen, align 4, !tbaa !9
  %100 = add nsw i32 %99, -1
  store i32 %100, ptr @PL_exitlistlen, align 4, !tbaa !9
  %101 = icmp sgt i32 %99, 0
  br i1 %101, label %91, label %102, !llvm.loop !46

102:                                              ; preds = %91, %87
  %103 = load ptr, ptr @PL_exitlist, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %103) #17
  store ptr null, ptr @PL_exitlist, align 8, !tbaa !5
  store i32 0, ptr @PL_exitlistlen, align 4, !tbaa !9
  %104 = load ptr, ptr @PL_registered_mros, align 8, !tbaa !5
  %105 = icmp eq ptr %104, null
  br i1 %105, label %113, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.sv, ptr %104, i64 0, i32 1
  %108 = load i32, ptr %107, align 8, !tbaa !20
  %109 = icmp ugt i32 %108, 1
  br i1 %109, label %110, label %112

110:                                              ; preds = %106
  %111 = add i32 %108, -1
  store i32 %111, ptr %107, align 8, !tbaa !20
  br label %113

112:                                              ; preds = %106
  call void @Perl_sv_free2(ptr noundef nonnull %104, i32 noundef %108) #17
  br label %113

113:                                              ; preds = %102, %110, %112
  %114 = load ptr, ptr @environ, align 8, !tbaa !5
  %115 = load ptr, ptr @PL_origenviron, align 8, !tbaa !5
  %116 = icmp ne ptr %114, %115
  %117 = load i8, ptr @PL_use_safe_putenv, align 1, !range !28
  %118 = icmp eq i8 %117, 0
  %119 = select i1 %116, i1 %118, i1 false
  br i1 %119, label %120, label %134

120:                                              ; preds = %113
  %121 = load ptr, ptr %114, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %131, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %126, %123 ], [ 0, %120 ]
  %125 = phi ptr [ %129, %123 ], [ %121, %120 ]
  call void @Perl_safesysfree(ptr noundef nonnull %125) #17
  %126 = add nuw i64 %124, 1
  %127 = load ptr, ptr @environ, align 8, !tbaa !5
  %128 = getelementptr inbounds ptr, ptr %127, i64 %126
  %129 = load ptr, ptr %128, align 8, !tbaa !5
  %130 = icmp eq ptr %129, null
  br i1 %130, label %131, label %123, !llvm.loop !48

131:                                              ; preds = %123, %120
  %132 = phi ptr [ %114, %120 ], [ %127, %123 ]
  call void @Perl_safesysfree(ptr noundef nonnull %132) #17
  %133 = load ptr, ptr @PL_origenviron, align 8, !tbaa !5
  store ptr %133, ptr @environ, align 8, !tbaa !5
  br label %134

134:                                              ; preds = %131, %113
  %135 = load volatile i8, ptr %2, align 1, !tbaa !11
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %137, label %148

137:                                              ; preds = %134
  call void @PerlIO_cleanup() #17
  %138 = load ptr, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 9), align 8, !tbaa !49
  %139 = icmp eq ptr %138, null
  br i1 %139, label %147, label %140

140:                                              ; preds = %137
  %141 = getelementptr inbounds %struct.sv, ptr %138, i64 0, i32 1
  %142 = load i32, ptr %141, align 8, !tbaa !20
  %143 = icmp ugt i32 %142, 1
  br i1 %143, label %144, label %146

144:                                              ; preds = %140
  %145 = add i32 %142, -1
  store i32 %145, ptr %141, align 8, !tbaa !20
  br label %147

146:                                              ; preds = %140
  call void @Perl_sv_free2(ptr noundef nonnull %138, i32 noundef %142) #17
  br label %147

147:                                              ; preds = %137, %144, %146
  store ptr null, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 9), align 8, !tbaa !49
  br label %1128

148:                                              ; preds = %134
  %149 = load ptr, ptr @PL_stashcache, align 8, !tbaa !5
  %150 = icmp eq ptr %149, null
  br i1 %150, label %158, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %struct.sv, ptr %149, i64 0, i32 1
  %153 = load i32, ptr %152, align 8, !tbaa !20
  %154 = icmp ugt i32 %153, 1
  br i1 %154, label %155, label %157

155:                                              ; preds = %151
  %156 = add i32 %153, -1
  store i32 %156, ptr %152, align 8, !tbaa !20
  br label %158

157:                                              ; preds = %151
  call void @Perl_sv_free2(ptr noundef nonnull %149, i32 noundef %153) #17
  br label %158

158:                                              ; preds = %148, %155, %157
  store ptr null, ptr @PL_stashcache, align 8, !tbaa !5
  %159 = load ptr, ptr @PL_parser, align 8, !tbaa !5
  %160 = icmp eq ptr %159, null
  br i1 %160, label %169, label %161

161:                                              ; preds = %158
  %162 = getelementptr inbounds %struct.yy_parser, ptr %159, i64 0, i32 46
  %163 = load ptr, ptr %162, align 8, !tbaa !51
  %164 = icmp eq ptr %163, null
  br i1 %164, label %169, label %165

165:                                              ; preds = %161
  %166 = call i32 @Perl_PerlIO_close(ptr noundef nonnull %163) #17
  %167 = load ptr, ptr @PL_parser, align 8, !tbaa !5
  %168 = getelementptr inbounds %struct.yy_parser, ptr %167, i64 0, i32 46
  store ptr null, ptr %168, align 8, !tbaa !51
  br label %169

169:                                              ; preds = %165, %161, %158
  %170 = load i8, ptr @PL_minus_F, align 1, !tbaa !14, !range !28, !noundef !29
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %174, label %172

172:                                              ; preds = %169
  %173 = load ptr, ptr @PL_splitstr, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %173) #17
  store ptr null, ptr @PL_splitstr, align 8, !tbaa !5
  br label %174

174:                                              ; preds = %172, %169
  store i8 0, ptr @PL_minus_n, align 1, !tbaa !14
  store i8 0, ptr @PL_minus_p, align 1, !tbaa !14
  store i8 0, ptr @PL_minus_l, align 1, !tbaa !14
  store i8 0, ptr @PL_minus_a, align 1, !tbaa !14
  store i8 0, ptr @PL_minus_F, align 1, !tbaa !14
  store i8 0, ptr @PL_doswitches, align 1, !tbaa !14
  store i8 0, ptr @PL_dowarn, align 1, !tbaa !11
  store i8 0, ptr @PL_unsafe, align 1, !tbaa !14
  %175 = load ptr, ptr @PL_inplace, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %175) #17
  store ptr null, ptr @PL_inplace, align 8, !tbaa !5
  %176 = load ptr, ptr @PL_patchlevel, align 8, !tbaa !5
  %177 = icmp eq ptr %176, null
  br i1 %177, label %185, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %struct.sv, ptr %176, i64 0, i32 1
  %180 = load i32, ptr %179, align 8, !tbaa !20
  %181 = icmp ugt i32 %180, 1
  br i1 %181, label %182, label %184

182:                                              ; preds = %178
  %183 = add i32 %180, -1
  store i32 %183, ptr %179, align 8, !tbaa !20
  br label %185

184:                                              ; preds = %178
  call void @Perl_sv_free2(ptr noundef nonnull %176, i32 noundef %180) #17
  br label %185

185:                                              ; preds = %174, %182, %184
  %186 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %187 = icmp eq ptr %186, null
  br i1 %187, label %196, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %struct.sv, ptr %186, i64 0, i32 1
  %190 = load i32, ptr %189, align 8, !tbaa !20
  %191 = icmp ugt i32 %190, 1
  br i1 %191, label %192, label %194

192:                                              ; preds = %188
  %193 = add i32 %190, -1
  store i32 %193, ptr %189, align 8, !tbaa !20
  br label %195

194:                                              ; preds = %188
  call void @Perl_sv_free2(ptr noundef nonnull %186, i32 noundef %190) #17
  br label %195

195:                                              ; preds = %192, %194
  store ptr null, ptr @PL_e_script, align 8, !tbaa !5
  br label %196

196:                                              ; preds = %195, %185
  store i32 0, ptr @PL_perldb, align 4, !tbaa !9
  %197 = load ptr, ptr @PL_ofsgv, align 8, !tbaa !5
  %198 = icmp eq ptr %197, null
  br i1 %198, label %206, label %199

199:                                              ; preds = %196
  %200 = getelementptr inbounds %struct.sv, ptr %197, i64 0, i32 1
  %201 = load i32, ptr %200, align 8, !tbaa !20
  %202 = icmp ugt i32 %201, 1
  br i1 %202, label %203, label %205

203:                                              ; preds = %199
  %204 = add i32 %201, -1
  store i32 %204, ptr %200, align 8, !tbaa !20
  br label %206

205:                                              ; preds = %199
  call void @Perl_sv_free2(ptr noundef nonnull %197, i32 noundef %201) #17
  br label %206

206:                                              ; preds = %196, %203, %205
  store ptr null, ptr @PL_ofsgv, align 8, !tbaa !5
  %207 = load ptr, ptr @PL_ors_sv, align 8, !tbaa !5
  %208 = icmp eq ptr %207, null
  br i1 %208, label %216, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds %struct.sv, ptr %207, i64 0, i32 1
  %211 = load i32, ptr %210, align 8, !tbaa !20
  %212 = icmp ugt i32 %211, 1
  br i1 %212, label %213, label %215

213:                                              ; preds = %209
  %214 = add i32 %211, -1
  store i32 %214, ptr %210, align 8, !tbaa !20
  br label %216

215:                                              ; preds = %209
  call void @Perl_sv_free2(ptr noundef nonnull %207, i32 noundef %211) #17
  br label %216

216:                                              ; preds = %206, %213, %215
  store ptr null, ptr @PL_ors_sv, align 8, !tbaa !5
  %217 = load ptr, ptr @PL_rs, align 8, !tbaa !5
  %218 = icmp eq ptr %217, null
  br i1 %218, label %226, label %219

219:                                              ; preds = %216
  %220 = getelementptr inbounds %struct.sv, ptr %217, i64 0, i32 1
  %221 = load i32, ptr %220, align 8, !tbaa !20
  %222 = icmp ugt i32 %221, 1
  br i1 %222, label %223, label %225

223:                                              ; preds = %219
  %224 = add i32 %221, -1
  store i32 %224, ptr %220, align 8, !tbaa !20
  br label %226

225:                                              ; preds = %219
  call void @Perl_sv_free2(ptr noundef nonnull %217, i32 noundef %221) #17
  br label %226

226:                                              ; preds = %216, %223, %225
  store ptr null, ptr @PL_rs, align 8, !tbaa !5
  %227 = load ptr, ptr @PL_osname, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %227) #17
  store ptr null, ptr @PL_osname, align 8, !tbaa !5
  %228 = load ptr, ptr @PL_statname, align 8, !tbaa !5
  %229 = icmp eq ptr %228, null
  br i1 %229, label %237, label %230

230:                                              ; preds = %226
  %231 = getelementptr inbounds %struct.sv, ptr %228, i64 0, i32 1
  %232 = load i32, ptr %231, align 8, !tbaa !20
  %233 = icmp ugt i32 %232, 1
  br i1 %233, label %234, label %236

234:                                              ; preds = %230
  %235 = add i32 %232, -1
  store i32 %235, ptr %231, align 8, !tbaa !20
  br label %237

236:                                              ; preds = %230
  call void @Perl_sv_free2(ptr noundef nonnull %228, i32 noundef %232) #17
  br label %237

237:                                              ; preds = %226, %234, %236
  store ptr null, ptr @PL_statname, align 8, !tbaa !5
  store ptr null, ptr @PL_statgv, align 8, !tbaa !5
  %238 = load ptr, ptr @PL_efloatbuf, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %238) #17
  store ptr null, ptr @PL_efloatbuf, align 8, !tbaa !5
  store i64 0, ptr @PL_efloatsize, align 8, !tbaa !12
  %239 = load ptr, ptr @PL_beginav, align 8, !tbaa !5
  %240 = icmp eq ptr %239, null
  br i1 %240, label %248, label %241

241:                                              ; preds = %237
  %242 = getelementptr inbounds %struct.sv, ptr %239, i64 0, i32 1
  %243 = load i32, ptr %242, align 8, !tbaa !20
  %244 = icmp ugt i32 %243, 1
  br i1 %244, label %245, label %247

245:                                              ; preds = %241
  %246 = add i32 %243, -1
  store i32 %246, ptr %242, align 8, !tbaa !20
  br label %248

247:                                              ; preds = %241
  call void @Perl_sv_free2(ptr noundef nonnull %239, i32 noundef %243) #17
  br label %248

248:                                              ; preds = %237, %245, %247
  %249 = load ptr, ptr @PL_beginav_save, align 8, !tbaa !5
  %250 = icmp eq ptr %249, null
  br i1 %250, label %258, label %251

251:                                              ; preds = %248
  %252 = getelementptr inbounds %struct.sv, ptr %249, i64 0, i32 1
  %253 = load i32, ptr %252, align 8, !tbaa !20
  %254 = icmp ugt i32 %253, 1
  br i1 %254, label %255, label %257

255:                                              ; preds = %251
  %256 = add i32 %253, -1
  store i32 %256, ptr %252, align 8, !tbaa !20
  br label %258

257:                                              ; preds = %251
  call void @Perl_sv_free2(ptr noundef nonnull %249, i32 noundef %253) #17
  br label %258

258:                                              ; preds = %248, %255, %257
  %259 = load ptr, ptr @PL_endav, align 8, !tbaa !5
  %260 = icmp eq ptr %259, null
  br i1 %260, label %268, label %261

261:                                              ; preds = %258
  %262 = getelementptr inbounds %struct.sv, ptr %259, i64 0, i32 1
  %263 = load i32, ptr %262, align 8, !tbaa !20
  %264 = icmp ugt i32 %263, 1
  br i1 %264, label %265, label %267

265:                                              ; preds = %261
  %266 = add i32 %263, -1
  store i32 %266, ptr %262, align 8, !tbaa !20
  br label %268

267:                                              ; preds = %261
  call void @Perl_sv_free2(ptr noundef nonnull %259, i32 noundef %263) #17
  br label %268

268:                                              ; preds = %258, %265, %267
  %269 = load ptr, ptr @PL_checkav, align 8, !tbaa !5
  %270 = icmp eq ptr %269, null
  br i1 %270, label %278, label %271

271:                                              ; preds = %268
  %272 = getelementptr inbounds %struct.sv, ptr %269, i64 0, i32 1
  %273 = load i32, ptr %272, align 8, !tbaa !20
  %274 = icmp ugt i32 %273, 1
  br i1 %274, label %275, label %277

275:                                              ; preds = %271
  %276 = add i32 %273, -1
  store i32 %276, ptr %272, align 8, !tbaa !20
  br label %278

277:                                              ; preds = %271
  call void @Perl_sv_free2(ptr noundef nonnull %269, i32 noundef %273) #17
  br label %278

278:                                              ; preds = %268, %275, %277
  %279 = load ptr, ptr @PL_checkav_save, align 8, !tbaa !5
  %280 = icmp eq ptr %279, null
  br i1 %280, label %288, label %281

281:                                              ; preds = %278
  %282 = getelementptr inbounds %struct.sv, ptr %279, i64 0, i32 1
  %283 = load i32, ptr %282, align 8, !tbaa !20
  %284 = icmp ugt i32 %283, 1
  br i1 %284, label %285, label %287

285:                                              ; preds = %281
  %286 = add i32 %283, -1
  store i32 %286, ptr %282, align 8, !tbaa !20
  br label %288

287:                                              ; preds = %281
  call void @Perl_sv_free2(ptr noundef nonnull %279, i32 noundef %283) #17
  br label %288

288:                                              ; preds = %278, %285, %287
  %289 = load ptr, ptr @PL_unitcheckav, align 8, !tbaa !5
  %290 = icmp eq ptr %289, null
  br i1 %290, label %298, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds %struct.sv, ptr %289, i64 0, i32 1
  %293 = load i32, ptr %292, align 8, !tbaa !20
  %294 = icmp ugt i32 %293, 1
  br i1 %294, label %295, label %297

295:                                              ; preds = %291
  %296 = add i32 %293, -1
  store i32 %296, ptr %292, align 8, !tbaa !20
  br label %298

297:                                              ; preds = %291
  call void @Perl_sv_free2(ptr noundef nonnull %289, i32 noundef %293) #17
  br label %298

298:                                              ; preds = %288, %295, %297
  %299 = load ptr, ptr @PL_unitcheckav_save, align 8, !tbaa !5
  %300 = icmp eq ptr %299, null
  br i1 %300, label %308, label %301

301:                                              ; preds = %298
  %302 = getelementptr inbounds %struct.sv, ptr %299, i64 0, i32 1
  %303 = load i32, ptr %302, align 8, !tbaa !20
  %304 = icmp ugt i32 %303, 1
  br i1 %304, label %305, label %307

305:                                              ; preds = %301
  %306 = add i32 %303, -1
  store i32 %306, ptr %302, align 8, !tbaa !20
  br label %308

307:                                              ; preds = %301
  call void @Perl_sv_free2(ptr noundef nonnull %299, i32 noundef %303) #17
  br label %308

308:                                              ; preds = %298, %305, %307
  %309 = load ptr, ptr @PL_initav, align 8, !tbaa !5
  %310 = icmp eq ptr %309, null
  br i1 %310, label %318, label %311

311:                                              ; preds = %308
  %312 = getelementptr inbounds %struct.sv, ptr %309, i64 0, i32 1
  %313 = load i32, ptr %312, align 8, !tbaa !20
  %314 = icmp ugt i32 %313, 1
  br i1 %314, label %315, label %317

315:                                              ; preds = %311
  %316 = add i32 %313, -1
  store i32 %316, ptr %312, align 8, !tbaa !20
  br label %318

317:                                              ; preds = %311
  call void @Perl_sv_free2(ptr noundef nonnull %309, i32 noundef %313) #17
  br label %318

318:                                              ; preds = %308, %315, %317
  store ptr null, ptr @PL_beginav, align 8, !tbaa !5
  store ptr null, ptr @PL_beginav_save, align 8, !tbaa !5
  store ptr null, ptr @PL_endav, align 8, !tbaa !5
  store ptr null, ptr @PL_checkav, align 8, !tbaa !5
  store ptr null, ptr @PL_checkav_save, align 8, !tbaa !5
  store ptr null, ptr @PL_unitcheckav, align 8, !tbaa !5
  store ptr null, ptr @PL_unitcheckav_save, align 8, !tbaa !5
  store ptr null, ptr @PL_initav, align 8, !tbaa !5
  store ptr null, ptr @PL_hintgv, align 8, !tbaa !5
  store ptr null, ptr @PL_errgv, align 8, !tbaa !5
  store ptr null, ptr @PL_argvoutgv, align 8, !tbaa !5
  store ptr null, ptr @PL_stdingv, align 8, !tbaa !5
  store ptr null, ptr @PL_stderrgv, align 8, !tbaa !5
  store ptr null, ptr @PL_last_in_gv, align 8, !tbaa !5
  store ptr null, ptr @PL_DBsingle, align 8, !tbaa !5
  store ptr null, ptr @PL_DBtrace, align 8, !tbaa !5
  store ptr null, ptr @PL_DBsignal, align 8, !tbaa !5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) @PL_DBcontrol, i8 0, i64 24, i1 false)
  store ptr null, ptr @PL_DBcv, align 8, !tbaa !5
  store ptr null, ptr @PL_dbargs, align 8, !tbaa !5
  store ptr null, ptr @PL_debstash, align 8, !tbaa !5
  %319 = load ptr, ptr @PL_envgv, align 8, !tbaa !5
  %320 = icmp eq ptr %319, null
  br i1 %320, label %328, label %321

321:                                              ; preds = %318
  %322 = getelementptr inbounds %struct.sv, ptr %319, i64 0, i32 1
  %323 = load i32, ptr %322, align 8, !tbaa !20
  %324 = icmp ugt i32 %323, 1
  br i1 %324, label %325, label %327

325:                                              ; preds = %321
  %326 = add i32 %323, -1
  store i32 %326, ptr %322, align 8, !tbaa !20
  br label %328

327:                                              ; preds = %321
  call void @Perl_sv_free2(ptr noundef nonnull %319, i32 noundef %323) #17
  br label %328

328:                                              ; preds = %318, %325, %327
  %329 = load ptr, ptr @PL_incgv, align 8, !tbaa !5
  %330 = icmp eq ptr %329, null
  br i1 %330, label %338, label %331

331:                                              ; preds = %328
  %332 = getelementptr inbounds %struct.sv, ptr %329, i64 0, i32 1
  %333 = load i32, ptr %332, align 8, !tbaa !20
  %334 = icmp ugt i32 %333, 1
  br i1 %334, label %335, label %337

335:                                              ; preds = %331
  %336 = add i32 %333, -1
  store i32 %336, ptr %332, align 8, !tbaa !20
  br label %338

337:                                              ; preds = %331
  call void @Perl_sv_free2(ptr noundef nonnull %329, i32 noundef %333) #17
  br label %338

338:                                              ; preds = %328, %335, %337
  %339 = load ptr, ptr @PL_argvgv, align 8, !tbaa !5
  %340 = icmp eq ptr %339, null
  br i1 %340, label %348, label %341

341:                                              ; preds = %338
  %342 = getelementptr inbounds %struct.sv, ptr %339, i64 0, i32 1
  %343 = load i32, ptr %342, align 8, !tbaa !20
  %344 = icmp ugt i32 %343, 1
  br i1 %344, label %345, label %347

345:                                              ; preds = %341
  %346 = add i32 %343, -1
  store i32 %346, ptr %342, align 8, !tbaa !20
  br label %348

347:                                              ; preds = %341
  call void @Perl_sv_free2(ptr noundef nonnull %339, i32 noundef %343) #17
  br label %348

348:                                              ; preds = %338, %345, %347
  %349 = load ptr, ptr @PL_replgv, align 8, !tbaa !5
  %350 = icmp eq ptr %349, null
  br i1 %350, label %358, label %351

351:                                              ; preds = %348
  %352 = getelementptr inbounds %struct.sv, ptr %349, i64 0, i32 1
  %353 = load i32, ptr %352, align 8, !tbaa !20
  %354 = icmp ugt i32 %353, 1
  br i1 %354, label %355, label %357

355:                                              ; preds = %351
  %356 = add i32 %353, -1
  store i32 %356, ptr %352, align 8, !tbaa !20
  br label %358

357:                                              ; preds = %351
  call void @Perl_sv_free2(ptr noundef nonnull %349, i32 noundef %353) #17
  br label %358

358:                                              ; preds = %348, %355, %357
  %359 = load ptr, ptr @PL_DBgv, align 8, !tbaa !5
  %360 = icmp eq ptr %359, null
  br i1 %360, label %368, label %361

361:                                              ; preds = %358
  %362 = getelementptr inbounds %struct.sv, ptr %359, i64 0, i32 1
  %363 = load i32, ptr %362, align 8, !tbaa !20
  %364 = icmp ugt i32 %363, 1
  br i1 %364, label %365, label %367

365:                                              ; preds = %361
  %366 = add i32 %363, -1
  store i32 %366, ptr %362, align 8, !tbaa !20
  br label %368

367:                                              ; preds = %361
  call void @Perl_sv_free2(ptr noundef nonnull %359, i32 noundef %363) #17
  br label %368

368:                                              ; preds = %358, %365, %367
  %369 = load ptr, ptr @PL_DBline, align 8, !tbaa !5
  %370 = icmp eq ptr %369, null
  br i1 %370, label %378, label %371

371:                                              ; preds = %368
  %372 = getelementptr inbounds %struct.sv, ptr %369, i64 0, i32 1
  %373 = load i32, ptr %372, align 8, !tbaa !20
  %374 = icmp ugt i32 %373, 1
  br i1 %374, label %375, label %377

375:                                              ; preds = %371
  %376 = add i32 %373, -1
  store i32 %376, ptr %372, align 8, !tbaa !20
  br label %378

377:                                              ; preds = %371
  call void @Perl_sv_free2(ptr noundef nonnull %369, i32 noundef %373) #17
  br label %378

378:                                              ; preds = %368, %375, %377
  %379 = load ptr, ptr @PL_DBsub, align 8, !tbaa !5
  %380 = icmp eq ptr %379, null
  br i1 %380, label %388, label %381

381:                                              ; preds = %378
  %382 = getelementptr inbounds %struct.sv, ptr %379, i64 0, i32 1
  %383 = load i32, ptr %382, align 8, !tbaa !20
  %384 = icmp ugt i32 %383, 1
  br i1 %384, label %385, label %387

385:                                              ; preds = %381
  %386 = add i32 %383, -1
  store i32 %386, ptr %382, align 8, !tbaa !20
  br label %388

387:                                              ; preds = %381
  call void @Perl_sv_free2(ptr noundef nonnull %379, i32 noundef %383) #17
  br label %388

388:                                              ; preds = %378, %385, %387
  store ptr null, ptr @PL_envgv, align 8, !tbaa !5
  store ptr null, ptr @PL_incgv, align 8, !tbaa !5
  store ptr null, ptr @PL_argvgv, align 8, !tbaa !5
  store ptr null, ptr @PL_replgv, align 8, !tbaa !5
  store ptr null, ptr @PL_DBgv, align 8, !tbaa !5
  store ptr null, ptr @PL_DBline, align 8, !tbaa !5
  store ptr null, ptr @PL_DBsub, align 8, !tbaa !5
  %389 = load ptr, ptr @PL_argvout_stack, align 8, !tbaa !5
  %390 = icmp eq ptr %389, null
  br i1 %390, label %398, label %391

391:                                              ; preds = %388
  %392 = getelementptr inbounds %struct.sv, ptr %389, i64 0, i32 1
  %393 = load i32, ptr %392, align 8, !tbaa !20
  %394 = icmp ugt i32 %393, 1
  br i1 %394, label %395, label %397

395:                                              ; preds = %391
  %396 = add i32 %393, -1
  store i32 %396, ptr %392, align 8, !tbaa !20
  br label %398

397:                                              ; preds = %391
  call void @Perl_sv_free2(ptr noundef nonnull %389, i32 noundef %393) #17
  br label %398

398:                                              ; preds = %388, %395, %397
  store ptr null, ptr @PL_argvout_stack, align 8, !tbaa !5
  %399 = load ptr, ptr @PL_modglobal, align 8, !tbaa !5
  %400 = icmp eq ptr %399, null
  br i1 %400, label %408, label %401

401:                                              ; preds = %398
  %402 = getelementptr inbounds %struct.sv, ptr %399, i64 0, i32 1
  %403 = load i32, ptr %402, align 8, !tbaa !20
  %404 = icmp ugt i32 %403, 1
  br i1 %404, label %405, label %407

405:                                              ; preds = %401
  %406 = add i32 %403, -1
  store i32 %406, ptr %402, align 8, !tbaa !20
  br label %408

407:                                              ; preds = %401
  call void @Perl_sv_free2(ptr noundef nonnull %399, i32 noundef %403) #17
  br label %408

408:                                              ; preds = %398, %405, %407
  store ptr null, ptr @PL_modglobal, align 8, !tbaa !5
  %409 = load ptr, ptr @PL_preambleav, align 8, !tbaa !5
  %410 = icmp eq ptr %409, null
  br i1 %410, label %418, label %411

411:                                              ; preds = %408
  %412 = getelementptr inbounds %struct.sv, ptr %409, i64 0, i32 1
  %413 = load i32, ptr %412, align 8, !tbaa !20
  %414 = icmp ugt i32 %413, 1
  br i1 %414, label %415, label %417

415:                                              ; preds = %411
  %416 = add i32 %413, -1
  store i32 %416, ptr %412, align 8, !tbaa !20
  br label %418

417:                                              ; preds = %411
  call void @Perl_sv_free2(ptr noundef nonnull %409, i32 noundef %413) #17
  br label %418

418:                                              ; preds = %408, %415, %417
  store ptr null, ptr @PL_preambleav, align 8, !tbaa !5
  %419 = load ptr, ptr @PL_subname, align 8, !tbaa !5
  %420 = icmp eq ptr %419, null
  br i1 %420, label %428, label %421

421:                                              ; preds = %418
  %422 = getelementptr inbounds %struct.sv, ptr %419, i64 0, i32 1
  %423 = load i32, ptr %422, align 8, !tbaa !20
  %424 = icmp ugt i32 %423, 1
  br i1 %424, label %425, label %427

425:                                              ; preds = %421
  %426 = add i32 %423, -1
  store i32 %426, ptr %422, align 8, !tbaa !20
  br label %428

427:                                              ; preds = %421
  call void @Perl_sv_free2(ptr noundef nonnull %419, i32 noundef %423) #17
  br label %428

428:                                              ; preds = %418, %425, %427
  store ptr null, ptr @PL_subname, align 8, !tbaa !5
  %429 = load ptr, ptr @PL_toptarget, align 8, !tbaa !5
  %430 = icmp eq ptr %429, null
  br i1 %430, label %438, label %431

431:                                              ; preds = %428
  %432 = getelementptr inbounds %struct.sv, ptr %429, i64 0, i32 1
  %433 = load i32, ptr %432, align 8, !tbaa !20
  %434 = icmp ugt i32 %433, 1
  br i1 %434, label %435, label %437

435:                                              ; preds = %431
  %436 = add i32 %433, -1
  store i32 %436, ptr %432, align 8, !tbaa !20
  br label %438

437:                                              ; preds = %431
  call void @Perl_sv_free2(ptr noundef nonnull %429, i32 noundef %433) #17
  br label %438

438:                                              ; preds = %428, %435, %437
  store ptr null, ptr @PL_toptarget, align 8, !tbaa !5
  %439 = load ptr, ptr @PL_bodytarget, align 8, !tbaa !5
  %440 = icmp eq ptr %439, null
  br i1 %440, label %448, label %441

441:                                              ; preds = %438
  %442 = getelementptr inbounds %struct.sv, ptr %439, i64 0, i32 1
  %443 = load i32, ptr %442, align 8, !tbaa !20
  %444 = icmp ugt i32 %443, 1
  br i1 %444, label %445, label %447

445:                                              ; preds = %441
  %446 = add i32 %443, -1
  store i32 %446, ptr %442, align 8, !tbaa !20
  br label %448

447:                                              ; preds = %441
  call void @Perl_sv_free2(ptr noundef nonnull %439, i32 noundef %443) #17
  br label %448

448:                                              ; preds = %438, %445, %447
  store ptr null, ptr @PL_bodytarget, align 8, !tbaa !5
  store ptr null, ptr @PL_formtarget, align 8, !tbaa !5
  %449 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !5
  %450 = icmp eq ptr %449, null
  br i1 %450, label %458, label %451

451:                                              ; preds = %448
  %452 = getelementptr inbounds %struct.sv, ptr %449, i64 0, i32 1
  %453 = load i32, ptr %452, align 8, !tbaa !20
  %454 = icmp ugt i32 %453, 1
  br i1 %454, label %455, label %457

455:                                              ; preds = %451
  %456 = add i32 %453, -1
  store i32 %456, ptr %452, align 8, !tbaa !20
  br label %458

457:                                              ; preds = %451
  call void @Perl_sv_free2(ptr noundef nonnull %449, i32 noundef %453) #17
  br label %458

458:                                              ; preds = %448, %455, %457
  store ptr null, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !5
  %459 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 1), align 8, !tbaa !5
  %460 = icmp eq ptr %459, null
  br i1 %460, label %468, label %461

461:                                              ; preds = %458
  %462 = getelementptr inbounds %struct.sv, ptr %459, i64 0, i32 1
  %463 = load i32, ptr %462, align 8, !tbaa !20
  %464 = icmp ugt i32 %463, 1
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  call void @Perl_sv_free2(ptr noundef nonnull %459, i32 noundef %463) #17
  br label %468

466:                                              ; preds = %461
  %467 = add i32 %463, -1
  store i32 %467, ptr %462, align 8, !tbaa !20
  br label %468

468:                                              ; preds = %466, %465, %458
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 1), align 8, !tbaa !5
  %469 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 2), align 16, !tbaa !5
  %470 = icmp eq ptr %469, null
  br i1 %470, label %478, label %471

471:                                              ; preds = %468
  %472 = getelementptr inbounds %struct.sv, ptr %469, i64 0, i32 1
  %473 = load i32, ptr %472, align 8, !tbaa !20
  %474 = icmp ugt i32 %473, 1
  br i1 %474, label %476, label %475

475:                                              ; preds = %471
  call void @Perl_sv_free2(ptr noundef nonnull %469, i32 noundef %473) #17
  br label %478

476:                                              ; preds = %471
  %477 = add i32 %473, -1
  store i32 %477, ptr %472, align 8, !tbaa !20
  br label %478

478:                                              ; preds = %476, %475, %468
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 2), align 16, !tbaa !5
  %479 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 3), align 8, !tbaa !5
  %480 = icmp eq ptr %479, null
  br i1 %480, label %488, label %481

481:                                              ; preds = %478
  %482 = getelementptr inbounds %struct.sv, ptr %479, i64 0, i32 1
  %483 = load i32, ptr %482, align 8, !tbaa !20
  %484 = icmp ugt i32 %483, 1
  br i1 %484, label %486, label %485

485:                                              ; preds = %481
  call void @Perl_sv_free2(ptr noundef nonnull %479, i32 noundef %483) #17
  br label %488

486:                                              ; preds = %481
  %487 = add i32 %483, -1
  store i32 %487, ptr %482, align 8, !tbaa !20
  br label %488

488:                                              ; preds = %486, %485, %478
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 3), align 8, !tbaa !5
  %489 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 4), align 16, !tbaa !5
  %490 = icmp eq ptr %489, null
  br i1 %490, label %498, label %491

491:                                              ; preds = %488
  %492 = getelementptr inbounds %struct.sv, ptr %489, i64 0, i32 1
  %493 = load i32, ptr %492, align 8, !tbaa !20
  %494 = icmp ugt i32 %493, 1
  br i1 %494, label %496, label %495

495:                                              ; preds = %491
  call void @Perl_sv_free2(ptr noundef nonnull %489, i32 noundef %493) #17
  br label %498

496:                                              ; preds = %491
  %497 = add i32 %493, -1
  store i32 %497, ptr %492, align 8, !tbaa !20
  br label %498

498:                                              ; preds = %496, %495, %488
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 4), align 16, !tbaa !5
  %499 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 5), align 8, !tbaa !5
  %500 = icmp eq ptr %499, null
  br i1 %500, label %508, label %501

501:                                              ; preds = %498
  %502 = getelementptr inbounds %struct.sv, ptr %499, i64 0, i32 1
  %503 = load i32, ptr %502, align 8, !tbaa !20
  %504 = icmp ugt i32 %503, 1
  br i1 %504, label %506, label %505

505:                                              ; preds = %501
  call void @Perl_sv_free2(ptr noundef nonnull %499, i32 noundef %503) #17
  br label %508

506:                                              ; preds = %501
  %507 = add i32 %503, -1
  store i32 %507, ptr %502, align 8, !tbaa !20
  br label %508

508:                                              ; preds = %506, %505, %498
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 5), align 8, !tbaa !5
  %509 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 6), align 16, !tbaa !5
  %510 = icmp eq ptr %509, null
  br i1 %510, label %518, label %511

511:                                              ; preds = %508
  %512 = getelementptr inbounds %struct.sv, ptr %509, i64 0, i32 1
  %513 = load i32, ptr %512, align 8, !tbaa !20
  %514 = icmp ugt i32 %513, 1
  br i1 %514, label %516, label %515

515:                                              ; preds = %511
  call void @Perl_sv_free2(ptr noundef nonnull %509, i32 noundef %513) #17
  br label %518

516:                                              ; preds = %511
  %517 = add i32 %513, -1
  store i32 %517, ptr %512, align 8, !tbaa !20
  br label %518

518:                                              ; preds = %516, %515, %508
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 6), align 16, !tbaa !5
  %519 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 7), align 8, !tbaa !5
  %520 = icmp eq ptr %519, null
  br i1 %520, label %528, label %521

521:                                              ; preds = %518
  %522 = getelementptr inbounds %struct.sv, ptr %519, i64 0, i32 1
  %523 = load i32, ptr %522, align 8, !tbaa !20
  %524 = icmp ugt i32 %523, 1
  br i1 %524, label %526, label %525

525:                                              ; preds = %521
  call void @Perl_sv_free2(ptr noundef nonnull %519, i32 noundef %523) #17
  br label %528

526:                                              ; preds = %521
  %527 = add i32 %523, -1
  store i32 %527, ptr %522, align 8, !tbaa !20
  br label %528

528:                                              ; preds = %526, %525, %518
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 7), align 8, !tbaa !5
  %529 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 8), align 16, !tbaa !5
  %530 = icmp eq ptr %529, null
  br i1 %530, label %538, label %531

531:                                              ; preds = %528
  %532 = getelementptr inbounds %struct.sv, ptr %529, i64 0, i32 1
  %533 = load i32, ptr %532, align 8, !tbaa !20
  %534 = icmp ugt i32 %533, 1
  br i1 %534, label %536, label %535

535:                                              ; preds = %531
  call void @Perl_sv_free2(ptr noundef nonnull %529, i32 noundef %533) #17
  br label %538

536:                                              ; preds = %531
  %537 = add i32 %533, -1
  store i32 %537, ptr %532, align 8, !tbaa !20
  br label %538

538:                                              ; preds = %536, %535, %528
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 8), align 16, !tbaa !5
  %539 = load ptr, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 9), align 8, !tbaa !5
  %540 = icmp eq ptr %539, null
  br i1 %540, label %548, label %541

541:                                              ; preds = %538
  %542 = getelementptr inbounds %struct.sv, ptr %539, i64 0, i32 1
  %543 = load i32, ptr %542, align 8, !tbaa !20
  %544 = icmp ugt i32 %543, 1
  br i1 %544, label %546, label %545

545:                                              ; preds = %541
  call void @Perl_sv_free2(ptr noundef nonnull %539, i32 noundef %543) #17
  br label %548

546:                                              ; preds = %541
  %547 = add i32 %543, -1
  store i32 %547, ptr %542, align 8, !tbaa !20
  br label %548

548:                                              ; preds = %546, %545, %538
  store ptr null, ptr getelementptr inbounds ([10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 9), align 8, !tbaa !5
  %549 = load ptr, ptr @PL_utf8_mark, align 8, !tbaa !5
  %550 = icmp eq ptr %549, null
  br i1 %550, label %558, label %551

551:                                              ; preds = %548
  %552 = getelementptr inbounds %struct.sv, ptr %549, i64 0, i32 1
  %553 = load i32, ptr %552, align 8, !tbaa !20
  %554 = icmp ugt i32 %553, 1
  br i1 %554, label %555, label %557

555:                                              ; preds = %551
  %556 = add i32 %553, -1
  store i32 %556, ptr %552, align 8, !tbaa !20
  br label %558

557:                                              ; preds = %551
  call void @Perl_sv_free2(ptr noundef nonnull %549, i32 noundef %553) #17
  br label %558

558:                                              ; preds = %548, %555, %557
  %559 = load ptr, ptr @PL_utf8_toupper, align 8, !tbaa !5
  %560 = icmp eq ptr %559, null
  br i1 %560, label %568, label %561

561:                                              ; preds = %558
  %562 = getelementptr inbounds %struct.sv, ptr %559, i64 0, i32 1
  %563 = load i32, ptr %562, align 8, !tbaa !20
  %564 = icmp ugt i32 %563, 1
  br i1 %564, label %565, label %567

565:                                              ; preds = %561
  %566 = add i32 %563, -1
  store i32 %566, ptr %562, align 8, !tbaa !20
  br label %568

567:                                              ; preds = %561
  call void @Perl_sv_free2(ptr noundef nonnull %559, i32 noundef %563) #17
  br label %568

568:                                              ; preds = %558, %565, %567
  %569 = load ptr, ptr @PL_utf8_totitle, align 8, !tbaa !5
  %570 = icmp eq ptr %569, null
  br i1 %570, label %578, label %571

571:                                              ; preds = %568
  %572 = getelementptr inbounds %struct.sv, ptr %569, i64 0, i32 1
  %573 = load i32, ptr %572, align 8, !tbaa !20
  %574 = icmp ugt i32 %573, 1
  br i1 %574, label %575, label %577

575:                                              ; preds = %571
  %576 = add i32 %573, -1
  store i32 %576, ptr %572, align 8, !tbaa !20
  br label %578

577:                                              ; preds = %571
  call void @Perl_sv_free2(ptr noundef nonnull %569, i32 noundef %573) #17
  br label %578

578:                                              ; preds = %568, %575, %577
  %579 = load ptr, ptr @PL_utf8_tolower, align 8, !tbaa !5
  %580 = icmp eq ptr %579, null
  br i1 %580, label %588, label %581

581:                                              ; preds = %578
  %582 = getelementptr inbounds %struct.sv, ptr %579, i64 0, i32 1
  %583 = load i32, ptr %582, align 8, !tbaa !20
  %584 = icmp ugt i32 %583, 1
  br i1 %584, label %585, label %587

585:                                              ; preds = %581
  %586 = add i32 %583, -1
  store i32 %586, ptr %582, align 8, !tbaa !20
  br label %588

587:                                              ; preds = %581
  call void @Perl_sv_free2(ptr noundef nonnull %579, i32 noundef %583) #17
  br label %588

588:                                              ; preds = %578, %585, %587
  %589 = load ptr, ptr @PL_utf8_tofold, align 8, !tbaa !5
  %590 = icmp eq ptr %589, null
  br i1 %590, label %598, label %591

591:                                              ; preds = %588
  %592 = getelementptr inbounds %struct.sv, ptr %589, i64 0, i32 1
  %593 = load i32, ptr %592, align 8, !tbaa !20
  %594 = icmp ugt i32 %593, 1
  br i1 %594, label %595, label %597

595:                                              ; preds = %591
  %596 = add i32 %593, -1
  store i32 %596, ptr %592, align 8, !tbaa !20
  br label %598

597:                                              ; preds = %591
  call void @Perl_sv_free2(ptr noundef nonnull %589, i32 noundef %593) #17
  br label %598

598:                                              ; preds = %588, %595, %597
  %599 = load ptr, ptr @PL_utf8_idstart, align 8, !tbaa !5
  %600 = icmp eq ptr %599, null
  br i1 %600, label %608, label %601

601:                                              ; preds = %598
  %602 = getelementptr inbounds %struct.sv, ptr %599, i64 0, i32 1
  %603 = load i32, ptr %602, align 8, !tbaa !20
  %604 = icmp ugt i32 %603, 1
  br i1 %604, label %605, label %607

605:                                              ; preds = %601
  %606 = add i32 %603, -1
  store i32 %606, ptr %602, align 8, !tbaa !20
  br label %608

607:                                              ; preds = %601
  call void @Perl_sv_free2(ptr noundef nonnull %599, i32 noundef %603) #17
  br label %608

608:                                              ; preds = %598, %605, %607
  %609 = load ptr, ptr @PL_utf8_idcont, align 8, !tbaa !5
  %610 = icmp eq ptr %609, null
  br i1 %610, label %618, label %611

611:                                              ; preds = %608
  %612 = getelementptr inbounds %struct.sv, ptr %609, i64 0, i32 1
  %613 = load i32, ptr %612, align 8, !tbaa !20
  %614 = icmp ugt i32 %613, 1
  br i1 %614, label %615, label %617

615:                                              ; preds = %611
  %616 = add i32 %613, -1
  store i32 %616, ptr %612, align 8, !tbaa !20
  br label %618

617:                                              ; preds = %611
  call void @Perl_sv_free2(ptr noundef nonnull %609, i32 noundef %613) #17
  br label %618

618:                                              ; preds = %608, %615, %617
  %619 = load ptr, ptr @PL_utf8_foldable, align 8, !tbaa !5
  %620 = icmp eq ptr %619, null
  br i1 %620, label %628, label %621

621:                                              ; preds = %618
  %622 = getelementptr inbounds %struct.sv, ptr %619, i64 0, i32 1
  %623 = load i32, ptr %622, align 8, !tbaa !20
  %624 = icmp ugt i32 %623, 1
  br i1 %624, label %625, label %627

625:                                              ; preds = %621
  %626 = add i32 %623, -1
  store i32 %626, ptr %622, align 8, !tbaa !20
  br label %628

627:                                              ; preds = %621
  call void @Perl_sv_free2(ptr noundef nonnull %619, i32 noundef %623) #17
  br label %628

628:                                              ; preds = %618, %625, %627
  %629 = load ptr, ptr @PL_utf8_foldclosures, align 8, !tbaa !5
  %630 = icmp eq ptr %629, null
  br i1 %630, label %638, label %631

631:                                              ; preds = %628
  %632 = getelementptr inbounds %struct.sv, ptr %629, i64 0, i32 1
  %633 = load i32, ptr %632, align 8, !tbaa !20
  %634 = icmp ugt i32 %633, 1
  br i1 %634, label %635, label %637

635:                                              ; preds = %631
  %636 = add i32 %633, -1
  store i32 %636, ptr %632, align 8, !tbaa !20
  br label %638

637:                                              ; preds = %631
  call void @Perl_sv_free2(ptr noundef nonnull %629, i32 noundef %633) #17
  br label %638

638:                                              ; preds = %628, %635, %637
  %639 = load ptr, ptr @PL_AboveLatin1, align 8, !tbaa !5
  %640 = icmp eq ptr %639, null
  br i1 %640, label %648, label %641

641:                                              ; preds = %638
  %642 = getelementptr inbounds %struct.sv, ptr %639, i64 0, i32 1
  %643 = load i32, ptr %642, align 8, !tbaa !20
  %644 = icmp ugt i32 %643, 1
  br i1 %644, label %645, label %647

645:                                              ; preds = %641
  %646 = add i32 %643, -1
  store i32 %646, ptr %642, align 8, !tbaa !20
  br label %648

647:                                              ; preds = %641
  call void @Perl_sv_free2(ptr noundef nonnull %639, i32 noundef %643) #17
  br label %648

648:                                              ; preds = %638, %645, %647
  %649 = load ptr, ptr @PL_InBitmap, align 8, !tbaa !5
  %650 = icmp eq ptr %649, null
  br i1 %650, label %658, label %651

651:                                              ; preds = %648
  %652 = getelementptr inbounds %struct.sv, ptr %649, i64 0, i32 1
  %653 = load i32, ptr %652, align 8, !tbaa !20
  %654 = icmp ugt i32 %653, 1
  br i1 %654, label %655, label %657

655:                                              ; preds = %651
  %656 = add i32 %653, -1
  store i32 %656, ptr %652, align 8, !tbaa !20
  br label %658

657:                                              ; preds = %651
  call void @Perl_sv_free2(ptr noundef nonnull %649, i32 noundef %653) #17
  br label %658

658:                                              ; preds = %648, %655, %657
  %659 = load ptr, ptr @PL_UpperLatin1, align 8, !tbaa !5
  %660 = icmp eq ptr %659, null
  br i1 %660, label %668, label %661

661:                                              ; preds = %658
  %662 = getelementptr inbounds %struct.sv, ptr %659, i64 0, i32 1
  %663 = load i32, ptr %662, align 8, !tbaa !20
  %664 = icmp ugt i32 %663, 1
  br i1 %664, label %665, label %667

665:                                              ; preds = %661
  %666 = add i32 %663, -1
  store i32 %666, ptr %662, align 8, !tbaa !20
  br label %668

667:                                              ; preds = %661
  call void @Perl_sv_free2(ptr noundef nonnull %659, i32 noundef %663) #17
  br label %668

668:                                              ; preds = %658, %665, %667
  %669 = load ptr, ptr @PL_Latin1, align 8, !tbaa !5
  %670 = icmp eq ptr %669, null
  br i1 %670, label %678, label %671

671:                                              ; preds = %668
  %672 = getelementptr inbounds %struct.sv, ptr %669, i64 0, i32 1
  %673 = load i32, ptr %672, align 8, !tbaa !20
  %674 = icmp ugt i32 %673, 1
  br i1 %674, label %675, label %677

675:                                              ; preds = %671
  %676 = add i32 %673, -1
  store i32 %676, ptr %672, align 8, !tbaa !20
  br label %678

677:                                              ; preds = %671
  call void @Perl_sv_free2(ptr noundef nonnull %669, i32 noundef %673) #17
  br label %678

678:                                              ; preds = %668, %675, %677
  %679 = load ptr, ptr @PL_NonL1NonFinalFold, align 8, !tbaa !5
  %680 = icmp eq ptr %679, null
  br i1 %680, label %688, label %681

681:                                              ; preds = %678
  %682 = getelementptr inbounds %struct.sv, ptr %679, i64 0, i32 1
  %683 = load i32, ptr %682, align 8, !tbaa !20
  %684 = icmp ugt i32 %683, 1
  br i1 %684, label %685, label %687

685:                                              ; preds = %681
  %686 = add i32 %683, -1
  store i32 %686, ptr %682, align 8, !tbaa !20
  br label %688

687:                                              ; preds = %681
  call void @Perl_sv_free2(ptr noundef nonnull %679, i32 noundef %683) #17
  br label %688

688:                                              ; preds = %678, %685, %687
  %689 = load ptr, ptr @PL_HasMultiCharFold, align 8, !tbaa !5
  %690 = icmp eq ptr %689, null
  br i1 %690, label %698, label %691

691:                                              ; preds = %688
  %692 = getelementptr inbounds %struct.sv, ptr %689, i64 0, i32 1
  %693 = load i32, ptr %692, align 8, !tbaa !20
  %694 = icmp ugt i32 %693, 1
  br i1 %694, label %695, label %697

695:                                              ; preds = %691
  %696 = add i32 %693, -1
  store i32 %696, ptr %692, align 8, !tbaa !20
  br label %698

697:                                              ; preds = %691
  call void @Perl_sv_free2(ptr noundef nonnull %689, i32 noundef %693) #17
  br label %698

698:                                              ; preds = %688, %695, %697
  store ptr null, ptr @PL_utf8_mark, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_toupper, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_totitle, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_tolower, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_tofold, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_idstart, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_idcont, align 8, !tbaa !5
  store ptr null, ptr @PL_utf8_foldclosures, align 8, !tbaa !5
  store ptr null, ptr @PL_AboveLatin1, align 8, !tbaa !5
  store ptr null, ptr @PL_InBitmap, align 8, !tbaa !5
  store ptr null, ptr @PL_HasMultiCharFold, align 8, !tbaa !5
  store ptr null, ptr @PL_Latin1, align 8, !tbaa !5
  store ptr null, ptr @PL_NonL1NonFinalFold, align 8, !tbaa !5
  store ptr null, ptr @PL_UpperLatin1, align 8, !tbaa !5
  %699 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !5
  %700 = icmp eq ptr %699, null
  br i1 %700, label %708, label %701

701:                                              ; preds = %698
  %702 = getelementptr inbounds %struct.sv, ptr %699, i64 0, i32 1
  %703 = load i32, ptr %702, align 8, !tbaa !20
  %704 = icmp ugt i32 %703, 1
  br i1 %704, label %705, label %707

705:                                              ; preds = %701
  %706 = add i32 %703, -1
  store i32 %706, ptr %702, align 8, !tbaa !20
  br label %708

707:                                              ; preds = %701
  call void @Perl_sv_free2(ptr noundef nonnull %699, i32 noundef %703) #17
  br label %708

708:                                              ; preds = %698, %705, %707
  store ptr null, ptr @PL_XPosix_ptrs, align 16, !tbaa !5
  %709 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 1), align 8, !tbaa !5
  %710 = icmp eq ptr %709, null
  br i1 %710, label %718, label %711

711:                                              ; preds = %708
  %712 = getelementptr inbounds %struct.sv, ptr %709, i64 0, i32 1
  %713 = load i32, ptr %712, align 8, !tbaa !20
  %714 = icmp ugt i32 %713, 1
  br i1 %714, label %716, label %715

715:                                              ; preds = %711
  call void @Perl_sv_free2(ptr noundef nonnull %709, i32 noundef %713) #17
  br label %718

716:                                              ; preds = %711
  %717 = add i32 %713, -1
  store i32 %717, ptr %712, align 8, !tbaa !20
  br label %718

718:                                              ; preds = %716, %715, %708
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 1), align 8, !tbaa !5
  %719 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 2), align 16, !tbaa !5
  %720 = icmp eq ptr %719, null
  br i1 %720, label %728, label %721

721:                                              ; preds = %718
  %722 = getelementptr inbounds %struct.sv, ptr %719, i64 0, i32 1
  %723 = load i32, ptr %722, align 8, !tbaa !20
  %724 = icmp ugt i32 %723, 1
  br i1 %724, label %726, label %725

725:                                              ; preds = %721
  call void @Perl_sv_free2(ptr noundef nonnull %719, i32 noundef %723) #17
  br label %728

726:                                              ; preds = %721
  %727 = add i32 %723, -1
  store i32 %727, ptr %722, align 8, !tbaa !20
  br label %728

728:                                              ; preds = %726, %725, %718
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 2), align 16, !tbaa !5
  %729 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 3), align 8, !tbaa !5
  %730 = icmp eq ptr %729, null
  br i1 %730, label %738, label %731

731:                                              ; preds = %728
  %732 = getelementptr inbounds %struct.sv, ptr %729, i64 0, i32 1
  %733 = load i32, ptr %732, align 8, !tbaa !20
  %734 = icmp ugt i32 %733, 1
  br i1 %734, label %736, label %735

735:                                              ; preds = %731
  call void @Perl_sv_free2(ptr noundef nonnull %729, i32 noundef %733) #17
  br label %738

736:                                              ; preds = %731
  %737 = add i32 %733, -1
  store i32 %737, ptr %732, align 8, !tbaa !20
  br label %738

738:                                              ; preds = %736, %735, %728
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 3), align 8, !tbaa !5
  %739 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 4), align 16, !tbaa !5
  %740 = icmp eq ptr %739, null
  br i1 %740, label %748, label %741

741:                                              ; preds = %738
  %742 = getelementptr inbounds %struct.sv, ptr %739, i64 0, i32 1
  %743 = load i32, ptr %742, align 8, !tbaa !20
  %744 = icmp ugt i32 %743, 1
  br i1 %744, label %746, label %745

745:                                              ; preds = %741
  call void @Perl_sv_free2(ptr noundef nonnull %739, i32 noundef %743) #17
  br label %748

746:                                              ; preds = %741
  %747 = add i32 %743, -1
  store i32 %747, ptr %742, align 8, !tbaa !20
  br label %748

748:                                              ; preds = %746, %745, %738
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 4), align 16, !tbaa !5
  %749 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 5), align 8, !tbaa !5
  %750 = icmp eq ptr %749, null
  br i1 %750, label %758, label %751

751:                                              ; preds = %748
  %752 = getelementptr inbounds %struct.sv, ptr %749, i64 0, i32 1
  %753 = load i32, ptr %752, align 8, !tbaa !20
  %754 = icmp ugt i32 %753, 1
  br i1 %754, label %756, label %755

755:                                              ; preds = %751
  call void @Perl_sv_free2(ptr noundef nonnull %749, i32 noundef %753) #17
  br label %758

756:                                              ; preds = %751
  %757 = add i32 %753, -1
  store i32 %757, ptr %752, align 8, !tbaa !20
  br label %758

758:                                              ; preds = %756, %755, %748
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 5), align 8, !tbaa !5
  %759 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 6), align 16, !tbaa !5
  %760 = icmp eq ptr %759, null
  br i1 %760, label %768, label %761

761:                                              ; preds = %758
  %762 = getelementptr inbounds %struct.sv, ptr %759, i64 0, i32 1
  %763 = load i32, ptr %762, align 8, !tbaa !20
  %764 = icmp ugt i32 %763, 1
  br i1 %764, label %766, label %765

765:                                              ; preds = %761
  call void @Perl_sv_free2(ptr noundef nonnull %759, i32 noundef %763) #17
  br label %768

766:                                              ; preds = %761
  %767 = add i32 %763, -1
  store i32 %767, ptr %762, align 8, !tbaa !20
  br label %768

768:                                              ; preds = %766, %765, %758
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 6), align 16, !tbaa !5
  %769 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 7), align 8, !tbaa !5
  %770 = icmp eq ptr %769, null
  br i1 %770, label %778, label %771

771:                                              ; preds = %768
  %772 = getelementptr inbounds %struct.sv, ptr %769, i64 0, i32 1
  %773 = load i32, ptr %772, align 8, !tbaa !20
  %774 = icmp ugt i32 %773, 1
  br i1 %774, label %776, label %775

775:                                              ; preds = %771
  call void @Perl_sv_free2(ptr noundef nonnull %769, i32 noundef %773) #17
  br label %778

776:                                              ; preds = %771
  %777 = add i32 %773, -1
  store i32 %777, ptr %772, align 8, !tbaa !20
  br label %778

778:                                              ; preds = %776, %775, %768
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 7), align 8, !tbaa !5
  %779 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 8), align 16, !tbaa !5
  %780 = icmp eq ptr %779, null
  br i1 %780, label %788, label %781

781:                                              ; preds = %778
  %782 = getelementptr inbounds %struct.sv, ptr %779, i64 0, i32 1
  %783 = load i32, ptr %782, align 8, !tbaa !20
  %784 = icmp ugt i32 %783, 1
  br i1 %784, label %786, label %785

785:                                              ; preds = %781
  call void @Perl_sv_free2(ptr noundef nonnull %779, i32 noundef %783) #17
  br label %788

786:                                              ; preds = %781
  %787 = add i32 %783, -1
  store i32 %787, ptr %782, align 8, !tbaa !20
  br label %788

788:                                              ; preds = %786, %785, %778
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 8), align 16, !tbaa !5
  %789 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 9), align 8, !tbaa !5
  %790 = icmp eq ptr %789, null
  br i1 %790, label %798, label %791

791:                                              ; preds = %788
  %792 = getelementptr inbounds %struct.sv, ptr %789, i64 0, i32 1
  %793 = load i32, ptr %792, align 8, !tbaa !20
  %794 = icmp ugt i32 %793, 1
  br i1 %794, label %796, label %795

795:                                              ; preds = %791
  call void @Perl_sv_free2(ptr noundef nonnull %789, i32 noundef %793) #17
  br label %798

796:                                              ; preds = %791
  %797 = add i32 %793, -1
  store i32 %797, ptr %792, align 8, !tbaa !20
  br label %798

798:                                              ; preds = %796, %795, %788
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 9), align 8, !tbaa !5
  %799 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 10), align 16, !tbaa !5
  %800 = icmp eq ptr %799, null
  br i1 %800, label %808, label %801

801:                                              ; preds = %798
  %802 = getelementptr inbounds %struct.sv, ptr %799, i64 0, i32 1
  %803 = load i32, ptr %802, align 8, !tbaa !20
  %804 = icmp ugt i32 %803, 1
  br i1 %804, label %806, label %805

805:                                              ; preds = %801
  call void @Perl_sv_free2(ptr noundef nonnull %799, i32 noundef %803) #17
  br label %808

806:                                              ; preds = %801
  %807 = add i32 %803, -1
  store i32 %807, ptr %802, align 8, !tbaa !20
  br label %808

808:                                              ; preds = %806, %805, %798
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 10), align 16, !tbaa !5
  %809 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 11), align 8, !tbaa !5
  %810 = icmp eq ptr %809, null
  br i1 %810, label %818, label %811

811:                                              ; preds = %808
  %812 = getelementptr inbounds %struct.sv, ptr %809, i64 0, i32 1
  %813 = load i32, ptr %812, align 8, !tbaa !20
  %814 = icmp ugt i32 %813, 1
  br i1 %814, label %816, label %815

815:                                              ; preds = %811
  call void @Perl_sv_free2(ptr noundef nonnull %809, i32 noundef %813) #17
  br label %818

816:                                              ; preds = %811
  %817 = add i32 %813, -1
  store i32 %817, ptr %812, align 8, !tbaa !20
  br label %818

818:                                              ; preds = %816, %815, %808
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 11), align 8, !tbaa !5
  %819 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 12), align 16, !tbaa !5
  %820 = icmp eq ptr %819, null
  br i1 %820, label %828, label %821

821:                                              ; preds = %818
  %822 = getelementptr inbounds %struct.sv, ptr %819, i64 0, i32 1
  %823 = load i32, ptr %822, align 8, !tbaa !20
  %824 = icmp ugt i32 %823, 1
  br i1 %824, label %826, label %825

825:                                              ; preds = %821
  call void @Perl_sv_free2(ptr noundef nonnull %819, i32 noundef %823) #17
  br label %828

826:                                              ; preds = %821
  %827 = add i32 %823, -1
  store i32 %827, ptr %822, align 8, !tbaa !20
  br label %828

828:                                              ; preds = %826, %825, %818
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 12), align 16, !tbaa !5
  %829 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 13), align 8, !tbaa !5
  %830 = icmp eq ptr %829, null
  br i1 %830, label %838, label %831

831:                                              ; preds = %828
  %832 = getelementptr inbounds %struct.sv, ptr %829, i64 0, i32 1
  %833 = load i32, ptr %832, align 8, !tbaa !20
  %834 = icmp ugt i32 %833, 1
  br i1 %834, label %836, label %835

835:                                              ; preds = %831
  call void @Perl_sv_free2(ptr noundef nonnull %829, i32 noundef %833) #17
  br label %838

836:                                              ; preds = %831
  %837 = add i32 %833, -1
  store i32 %837, ptr %832, align 8, !tbaa !20
  br label %838

838:                                              ; preds = %836, %835, %828
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 13), align 8, !tbaa !5
  %839 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 14), align 16, !tbaa !5
  %840 = icmp eq ptr %839, null
  br i1 %840, label %848, label %841

841:                                              ; preds = %838
  %842 = getelementptr inbounds %struct.sv, ptr %839, i64 0, i32 1
  %843 = load i32, ptr %842, align 8, !tbaa !20
  %844 = icmp ugt i32 %843, 1
  br i1 %844, label %846, label %845

845:                                              ; preds = %841
  call void @Perl_sv_free2(ptr noundef nonnull %839, i32 noundef %843) #17
  br label %848

846:                                              ; preds = %841
  %847 = add i32 %843, -1
  store i32 %847, ptr %842, align 8, !tbaa !20
  br label %848

848:                                              ; preds = %846, %845, %838
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 14), align 16, !tbaa !5
  %849 = load ptr, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 15), align 8, !tbaa !5
  %850 = icmp eq ptr %849, null
  br i1 %850, label %858, label %851

851:                                              ; preds = %848
  %852 = getelementptr inbounds %struct.sv, ptr %849, i64 0, i32 1
  %853 = load i32, ptr %852, align 8, !tbaa !20
  %854 = icmp ugt i32 %853, 1
  br i1 %854, label %856, label %855

855:                                              ; preds = %851
  call void @Perl_sv_free2(ptr noundef nonnull %849, i32 noundef %853) #17
  br label %858

856:                                              ; preds = %851
  %857 = add i32 %853, -1
  store i32 %857, ptr %852, align 8, !tbaa !20
  br label %858

858:                                              ; preds = %856, %855, %848
  store ptr null, ptr getelementptr inbounds ([16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 15), align 8, !tbaa !5
  store ptr null, ptr @PL_GCB_invlist, align 8, !tbaa !5
  store ptr null, ptr @PL_SB_invlist, align 8, !tbaa !5
  store ptr null, ptr @PL_WB_invlist, align 8, !tbaa !5
  %859 = load ptr, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 12), align 8
  %860 = ptrtoint ptr %859 to i64
  switch i64 %860, label %861 [
    i64 16, label %862
    i64 8, label %862
    i64 0, label %862
  ]

861:                                              ; preds = %858
  call void @free(ptr noundef %859) #17
  br label %862

862:                                              ; preds = %858, %858, %858, %861
  store ptr null, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 12), align 8, !tbaa !54
  %863 = load ptr, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 13), align 8, !tbaa !55
  call void @Perl_refcounted_he_free(ptr noundef %863) #17
  store ptr null, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 13), align 8, !tbaa !55
  %864 = load ptr, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 9), align 8, !tbaa !49
  %865 = icmp eq ptr %864, null
  br i1 %865, label %873, label %866

866:                                              ; preds = %862
  %867 = getelementptr inbounds %struct.sv, ptr %864, i64 0, i32 1
  %868 = load i32, ptr %867, align 8, !tbaa !20
  %869 = icmp ugt i32 %868, 1
  br i1 %869, label %870, label %872

870:                                              ; preds = %866
  %871 = add i32 %868, -1
  store i32 %871, ptr %867, align 8, !tbaa !20
  br label %873

872:                                              ; preds = %866
  call void @Perl_sv_free2(ptr noundef nonnull %864, i32 noundef %868) #17
  br label %873

873:                                              ; preds = %862, %870, %872
  store ptr null, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 9), align 8, !tbaa !49
  %874 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %875 = call ptr @Perl_hv_common_key_len(ptr noundef %874, ptr noundef nonnull @.str.4, i32 noundef 6, i32 noundef 68, ptr noundef null, i32 noundef 0) #17
  store ptr null, ptr @PL_defstash, align 8, !tbaa !5
  %876 = icmp eq ptr %874, null
  br i1 %876, label %884, label %877

877:                                              ; preds = %873
  %878 = getelementptr inbounds %struct.sv, ptr %874, i64 0, i32 1
  %879 = load i32, ptr %878, align 8, !tbaa !20
  %880 = icmp ugt i32 %879, 1
  br i1 %880, label %881, label %883

881:                                              ; preds = %877
  %882 = add i32 %879, -1
  store i32 %882, ptr %878, align 8, !tbaa !20
  br label %884

883:                                              ; preds = %877
  call void @Perl_sv_free2(ptr noundef nonnull %874, i32 noundef %879) #17
  br label %884

884:                                              ; preds = %873, %881, %883
  %885 = load ptr, ptr @PL_curstname, align 8, !tbaa !5
  %886 = icmp eq ptr %885, null
  br i1 %886, label %894, label %887

887:                                              ; preds = %884
  %888 = getelementptr inbounds %struct.sv, ptr %885, i64 0, i32 1
  %889 = load i32, ptr %888, align 8, !tbaa !20
  %890 = icmp ugt i32 %889, 1
  br i1 %890, label %891, label %893

891:                                              ; preds = %887
  %892 = add i32 %889, -1
  store i32 %892, ptr %888, align 8, !tbaa !20
  br label %894

893:                                              ; preds = %887
  call void @Perl_sv_free2(ptr noundef nonnull %885, i32 noundef %889) #17
  br label %894

894:                                              ; preds = %884, %891, %893
  store ptr null, ptr @PL_curstname, align 8, !tbaa !5
  %895 = load ptr, ptr @PL_errors, align 8, !tbaa !5
  %896 = icmp eq ptr %895, null
  br i1 %896, label %904, label %897

897:                                              ; preds = %894
  %898 = getelementptr inbounds %struct.sv, ptr %895, i64 0, i32 1
  %899 = load i32, ptr %898, align 8, !tbaa !20
  %900 = icmp ugt i32 %899, 1
  br i1 %900, label %901, label %903

901:                                              ; preds = %897
  %902 = add i32 %899, -1
  store i32 %902, ptr %898, align 8, !tbaa !20
  br label %904

903:                                              ; preds = %897
  call void @Perl_sv_free2(ptr noundef nonnull %895, i32 noundef %899) #17
  br label %904

904:                                              ; preds = %894, %901, %903
  store ptr null, ptr @PL_errors, align 8, !tbaa !5
  %905 = load ptr, ptr @PL_isarev, align 8, !tbaa !5
  %906 = icmp eq ptr %905, null
  br i1 %906, label %914, label %907

907:                                              ; preds = %904
  %908 = getelementptr inbounds %struct.sv, ptr %905, i64 0, i32 1
  %909 = load i32, ptr %908, align 8, !tbaa !20
  %910 = icmp ugt i32 %909, 1
  br i1 %910, label %911, label %913

911:                                              ; preds = %907
  %912 = add i32 %909, -1
  store i32 %912, ptr %908, align 8, !tbaa !20
  br label %914

913:                                              ; preds = %907
  call void @Perl_sv_free2(ptr noundef nonnull %905, i32 noundef %909) #17
  br label %914

914:                                              ; preds = %904, %911, %913
  %915 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %916 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %917 = icmp sgt i64 %915, %916
  br i1 %917, label %918, label %919

918:                                              ; preds = %914
  call void @Perl_free_tmps() #17
  br label %919

919:                                              ; preds = %918, %914
  %920 = load volatile i8, ptr %2, align 1, !tbaa !11
  %921 = icmp sgt i8 %920, 1
  br i1 %921, label %922, label %945

922:                                              ; preds = %919
  %923 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %924 = icmp eq i32 %923, 0
  br i1 %924, label %927, label %925

925:                                              ; preds = %922
  %926 = sext i32 %923 to i64
  call void (i32, ptr, ...) @Perl_ck_warner_d(i32 noundef 24, ptr noundef nonnull @.str.5, i64 noundef %926) #17
  br label %927

927:                                              ; preds = %925, %922
  %928 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !9
  %929 = icmp eq i32 %928, 0
  br i1 %929, label %932, label %930

930:                                              ; preds = %927
  %931 = sext i32 %928 to i64
  call void (i32, ptr, ...) @Perl_ck_warner_d(i32 noundef 24, ptr noundef nonnull @.str.6, i64 noundef %931) #17
  br label %932

932:                                              ; preds = %930, %927
  %933 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %934 = icmp eq i64 %933, -1
  br i1 %934, label %937, label %935

935:                                              ; preds = %932
  %936 = add nuw nsw i64 %933, 1
  call void (i32, ptr, ...) @Perl_ck_warner_d(i32 noundef 24, ptr noundef nonnull @.str.7, i64 noundef %936) #17
  br label %937

937:                                              ; preds = %935, %932
  %938 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %939 = getelementptr inbounds %struct.stackinfo, ptr %938, i64 0, i32 4
  %940 = load i32, ptr %939, align 8, !tbaa !56
  %941 = icmp eq i32 %940, -1
  br i1 %941, label %945, label %942

942:                                              ; preds = %937
  %943 = sext i32 %940 to i64
  %944 = add nsw i64 %943, 1
  call void (i32, ptr, ...) @Perl_ck_warner_d(i32 noundef 24, ptr noundef nonnull @.str.8, i64 noundef %944) #17
  br label %945

945:                                              ; preds = %937, %942, %919
  br label %946

946:                                              ; preds = %945, %946
  %947 = call i32 @Perl_sv_clean_all() #17
  %948 = icmp sgt i32 %947, 2
  br i1 %948, label %946, label %949, !llvm.loop !57

949:                                              ; preds = %946
  %950 = load ptr, ptr @PL_fdpid, align 8, !tbaa !5
  %951 = getelementptr inbounds %struct.av, ptr %950, i64 0, i32 2
  %952 = load i32, ptr %951, align 4, !tbaa !58
  %953 = and i32 %952, -1073741825
  store i32 %953, ptr %951, align 4, !tbaa !58
  %954 = getelementptr inbounds %struct.sv, ptr %950, i64 0, i32 1
  %955 = load i32, ptr %954, align 8, !tbaa !20
  %956 = icmp ugt i32 %955, 1
  br i1 %956, label %957, label %959

957:                                              ; preds = %949
  %958 = add i32 %955, -1
  store i32 %958, ptr %954, align 8, !tbaa !20
  br label %960

959:                                              ; preds = %949
  call void @Perl_sv_free2(ptr noundef nonnull %950, i32 noundef %955) #17
  br label %960

960:                                              ; preds = %957, %959
  store ptr null, ptr @PL_fdpid, align 8, !tbaa !5
  br label %961

961:                                              ; preds = %960, %973
  %962 = phi i64 [ 0, %960 ], [ %974, %973 ]
  %963 = getelementptr inbounds [35 x ptr], ptr @PL_sv_consts, i64 0, i64 %962
  %964 = load ptr, ptr %963, align 8, !tbaa !5
  %965 = icmp eq ptr %964, null
  br i1 %965, label %973, label %966

966:                                              ; preds = %961
  %967 = getelementptr inbounds %struct.sv, ptr %964, i64 0, i32 1
  %968 = load i32, ptr %967, align 8, !tbaa !20
  %969 = icmp ugt i32 %968, 1
  br i1 %969, label %970, label %972

970:                                              ; preds = %966
  %971 = add i32 %968, -1
  store i32 %971, ptr %967, align 8, !tbaa !20
  br label %973

972:                                              ; preds = %966
  call void @Perl_sv_free2(ptr noundef nonnull %964, i32 noundef %968) #17
  br label %973

973:                                              ; preds = %961, %970, %972
  store ptr null, ptr %963, align 8, !tbaa !5
  %974 = add nuw nsw i64 %962, 1
  %975 = icmp eq i64 %974, 35
  br i1 %975, label %976, label %961, !llvm.loop !59

976:                                              ; preds = %973
  %977 = load ptr, ptr @PL_strtab, align 8, !tbaa !5
  %978 = load ptr, ptr %977, align 8, !tbaa !36
  %979 = getelementptr inbounds %struct.xpvhv, ptr %978, i64 0, i32 3
  %980 = load i64, ptr %979, align 8, !tbaa !37
  %981 = trunc i64 %980 to i32
  %982 = getelementptr inbounds %struct.hv, ptr %977, i64 0, i32 3
  %983 = load ptr, ptr %982, align 8, !tbaa !11
  br label %984

984:                                              ; preds = %976, %1004
  %985 = phi ptr [ %1007, %1004 ], [ %983, %976 ]
  %986 = phi i32 [ %1005, %1004 ], [ 0, %976 ]
  %987 = load ptr, ptr %985, align 8, !tbaa !5
  br label %988

988:                                              ; preds = %984, %994
  %989 = phi ptr [ %987, %984 ], [ %995, %994 ]
  %990 = icmp eq ptr %989, null
  br label %991

991:                                              ; preds = %988, %992
  br i1 %990, label %1002, label %992

992:                                              ; preds = %991
  %993 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 24) #17
  br i1 %993, label %994, label %991

994:                                              ; preds = %992
  %995 = load ptr, ptr %989, align 8, !tbaa !60
  %996 = getelementptr inbounds %struct.he, ptr %989, i64 0, i32 2
  %997 = load i64, ptr %996, align 8, !tbaa !11
  %998 = getelementptr inbounds %struct.he, ptr %989, i64 0, i32 1
  %999 = load ptr, ptr %998, align 8, !tbaa !62
  %1000 = getelementptr inbounds %struct.hek, ptr %999, i64 0, i32 2
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 24, ptr noundef nonnull @.str.9, i64 noundef %997, ptr noundef nonnull %1000) #17
  call void @Perl_safesysfree(ptr noundef nonnull %989) #17
  %1001 = icmp eq ptr %995, null
  br i1 %1001, label %1002, label %988

1002:                                             ; preds = %994, %991
  %1003 = icmp slt i32 %986, %981
  br i1 %1003, label %1004, label %1008

1004:                                             ; preds = %1002
  %1005 = add nuw nsw i32 %986, 1
  %1006 = zext i32 %1005 to i64
  %1007 = getelementptr inbounds ptr, ptr %983, i64 %1006
  br label %984

1008:                                             ; preds = %1002
  call void @Perl_safesysfree(ptr noundef nonnull %983) #17
  %1009 = load ptr, ptr @PL_strtab, align 8, !tbaa !5
  %1010 = getelementptr inbounds %struct.hv, ptr %1009, i64 0, i32 3
  store ptr null, ptr %1010, align 8, !tbaa !11
  %1011 = load ptr, ptr %1009, align 8, !tbaa !36
  %1012 = getelementptr inbounds %struct.xpvhv, ptr %1011, i64 0, i32 2
  store i64 0, ptr %1012, align 8, !tbaa !63
  %1013 = getelementptr inbounds %struct.sv, ptr %1009, i64 0, i32 1
  %1014 = load i32, ptr %1013, align 8, !tbaa !20
  %1015 = icmp ugt i32 %1014, 1
  br i1 %1015, label %1016, label %1018

1016:                                             ; preds = %1008
  %1017 = add i32 %1014, -1
  store i32 %1017, ptr %1013, align 8, !tbaa !20
  br label %1019

1018:                                             ; preds = %1008
  call void @Perl_sv_free2(ptr noundef nonnull %1009, i32 noundef %1014) #17
  br label %1019

1019:                                             ; preds = %1016, %1018
  store i32 0, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_yes, i64 0, i32 1), align 8, !tbaa !20
  call void @Perl_sv_clear(ptr noundef nonnull @PL_sv_yes) #17
  store ptr null, ptr @PL_sv_yes, align 8, !tbaa !64
  store i32 0, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_yes, i64 0, i32 2), align 4, !tbaa !18
  store i32 0, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_no, i64 0, i32 1), align 8, !tbaa !20
  call void @Perl_sv_clear(ptr noundef nonnull @PL_sv_no) #17
  store ptr null, ptr @PL_sv_no, align 8, !tbaa !64
  store i32 0, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_no, i64 0, i32 2), align 4, !tbaa !18
  store i32 0, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 0, i32 1), align 8, !tbaa !20
  call void @Perl_sv_clear(ptr noundef nonnull @PL_debug_pad) #17
  store ptr null, ptr @PL_debug_pad, align 8, !tbaa !64
  store i32 0, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 0, i32 2), align 4, !tbaa !18
  store i32 0, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 1, i32 1), align 8, !tbaa !20
  call void @Perl_sv_clear(ptr noundef nonnull getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 1)) #17
  store ptr null, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 1), align 8, !tbaa !64
  store i32 0, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 1, i32 2), align 4, !tbaa !18
  store i32 0, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 2, i32 1), align 8, !tbaa !20
  call void @Perl_sv_clear(ptr noundef nonnull getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 2)) #17
  store ptr null, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 2), align 8, !tbaa !64
  store i32 0, ptr getelementptr inbounds (%struct.perl_debug_pad, ptr @PL_debug_pad, i64 0, i32 0, i64 2, i32 2), align 4, !tbaa !18
  %1020 = load i64, ptr @PL_sv_count, align 8, !tbaa !12
  %1021 = icmp eq i64 %1020, 0
  br i1 %1021, label %1026, label %1022

1022:                                             ; preds = %1019
  %1023 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 24) #17
  br i1 %1023, label %1024, label %1026

1024:                                             ; preds = %1022
  %1025 = load i64, ptr @PL_sv_count, align 8, !tbaa !12
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 24, ptr noundef nonnull @.str.10, i64 noundef %1025) #17
  br label %1026

1026:                                             ; preds = %1024, %1022, %1019
  store i64 0, ptr @PL_sv_count, align 8, !tbaa !12
  call void @PerlIO_cleanup() #17
  store i32 0, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_undef, i64 0, i32 1), align 8, !tbaa !20
  %1027 = load i32, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_undef, i64 0, i32 2), align 4, !tbaa !18
  %1028 = and i32 %1027, -134283265
  store i32 %1028, ptr getelementptr inbounds (%struct.sv, ptr @PL_sv_undef, i64 0, i32 2), align 4, !tbaa !18
  %1029 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1029) #17
  store ptr null, ptr @PL_origfilename, align 8, !tbaa !5
  %1030 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1030) #17
  call void @Perl_free_tied_hv_pool() #17
  %1031 = load ptr, ptr @PL_op_mask, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1031) #17
  %1032 = load ptr, ptr @PL_psig_name, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1032) #17
  store ptr null, ptr @PL_psig_name, align 8, !tbaa !5
  store ptr null, ptr @PL_psig_ptr, align 8, !tbaa !5
  %1033 = load ptr, ptr @PL_psig_pend, align 8, !tbaa !5
  store ptr null, ptr @PL_psig_pend, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1033) #17
  %1034 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %1035 = getelementptr inbounds %struct.stackinfo, ptr %1034, i64 0, i32 3
  %1036 = load ptr, ptr %1035, align 8, !tbaa !65
  %1037 = icmp eq ptr %1036, null
  br i1 %1037, label %1038, label %1041

1038:                                             ; preds = %1040, %1026
  %1039 = phi ptr [ %1034, %1026 ], [ %1042, %1040 ]
  br label %1046

1040:                                             ; preds = %1041
  store ptr %1042, ptr @PL_curstackinfo, align 8, !tbaa !5
  br label %1038

1041:                                             ; preds = %1026, %1041
  %1042 = phi ptr [ %1044, %1041 ], [ %1036, %1026 ]
  %1043 = getelementptr inbounds %struct.stackinfo, ptr %1042, i64 0, i32 3
  %1044 = load ptr, ptr %1043, align 8, !tbaa !65
  %1045 = icmp eq ptr %1044, null
  br i1 %1045, label %1040, label %1041, !llvm.loop !66

1046:                                             ; preds = %1038, %1046
  %1047 = phi ptr [ %1049, %1046 ], [ %1039, %1038 ]
  %1048 = getelementptr inbounds %struct.stackinfo, ptr %1047, i64 0, i32 2
  %1049 = load ptr, ptr %1048, align 8, !tbaa !67
  %1050 = getelementptr inbounds %struct.stackinfo, ptr %1047, i64 0, i32 1
  %1051 = load ptr, ptr %1050, align 8, !tbaa !68
  call void @Perl_safesysfree(ptr noundef %1051) #17
  %1052 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1052) #17
  store ptr %1049, ptr @PL_curstackinfo, align 8, !tbaa !5
  %1053 = icmp eq ptr %1049, null
  br i1 %1053, label %1054, label %1046, !llvm.loop !69

1054:                                             ; preds = %1046
  %1055 = load ptr, ptr @PL_tmps_stack, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1055) #17
  %1056 = load ptr, ptr @PL_markstack, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1056) #17
  %1057 = load ptr, ptr @PL_scopestack, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1057) #17
  %1058 = load ptr, ptr @PL_savestack, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1058) #17
  store i8 0, ptr @PL_tainting, align 1, !tbaa !14
  store i8 0, ptr @PL_taint_warn, align 1, !tbaa !14
  store i32 0, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 10), align 8, !tbaa !70
  store volatile i32 0, ptr @PL_debug, align 4, !tbaa !9
  store ptr null, ptr @PL_custom_op_names, align 8, !tbaa !5
  store ptr null, ptr @PL_custom_op_descs, align 8, !tbaa !5
  store ptr null, ptr @PL_custom_ops, align 8, !tbaa !5
  call void @Perl_sv_free_arenas() #17
  %1059 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !5
  %1060 = icmp eq ptr %1059, null
  br i1 %1060, label %1067, label %1061

1061:                                             ; preds = %1054, %1061
  %1062 = phi ptr [ %1065, %1061 ], [ %1059, %1054 ]
  %1063 = getelementptr inbounds %struct.regmatch_slab, ptr %1062, i64 0, i32 2
  %1064 = load ptr, ptr %1063, align 8, !tbaa !71
  store ptr %1064, ptr @PL_regmatch_slab, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef nonnull %1062) #17
  %1065 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !5
  %1066 = icmp eq ptr %1065, null
  br i1 %1066, label %1067, label %1061, !llvm.loop !73

1067:                                             ; preds = %1061, %1054
  %1068 = load ptr, ptr @PL_mess_sv, align 8, !tbaa !5
  %1069 = icmp eq ptr %1068, null
  br i1 %1069, label %1128, label %1070

1070:                                             ; preds = %1067
  %1071 = load ptr, ptr %1068, align 8, !tbaa !64
  %1072 = getelementptr inbounds %struct.xpvmg, ptr %1071, i64 0, i32 1
  %1073 = load ptr, ptr %1072, align 8, !tbaa !11
  %1074 = icmp eq ptr %1073, null
  br i1 %1074, label %1095, label %1075

1075:                                             ; preds = %1070, %1090
  %1076 = phi ptr [ %1077, %1090 ], [ %1073, %1070 ]
  %1077 = load ptr, ptr %1076, align 8, !tbaa !74
  %1078 = getelementptr inbounds %struct.magic, ptr %1076, i64 0, i32 7
  %1079 = load ptr, ptr %1078, align 8, !tbaa !76
  %1080 = icmp eq ptr %1079, null
  br i1 %1080, label %1090, label %1081

1081:                                             ; preds = %1075
  %1082 = getelementptr inbounds %struct.magic, ptr %1076, i64 0, i32 3
  %1083 = load i8, ptr %1082, align 2, !tbaa !77
  %1084 = icmp eq i8 %1083, 103
  br i1 %1084, label %1090, label %1085

1085:                                             ; preds = %1081
  %1086 = getelementptr inbounds %struct.magic, ptr %1076, i64 0, i32 5
  %1087 = load i64, ptr %1086, align 8, !tbaa !78
  %1088 = icmp sgt i64 %1087, -1
  br i1 %1088, label %1089, label %1090

1089:                                             ; preds = %1085
  call void @Perl_safesysfree(ptr noundef nonnull %1079) #17
  br label %1090

1090:                                             ; preds = %1089, %1085, %1081, %1075
  call void @Perl_safesysfree(ptr noundef nonnull %1076) #17
  %1091 = icmp eq ptr %1077, null
  br i1 %1091, label %1092, label %1075, !llvm.loop !79

1092:                                             ; preds = %1090
  %1093 = load ptr, ptr @PL_mess_sv, align 8, !tbaa !5
  %1094 = load ptr, ptr %1093, align 8, !tbaa !64
  br label %1095

1095:                                             ; preds = %1092, %1070
  %1096 = phi ptr [ %1094, %1092 ], [ %1071, %1070 ]
  %1097 = phi ptr [ %1093, %1092 ], [ %1068, %1070 ]
  %1098 = getelementptr inbounds %struct.xpv, ptr %1096, i64 0, i32 3
  %1099 = load i64, ptr %1098, align 8, !tbaa !11
  %1100 = icmp eq i64 %1099, 0
  br i1 %1100, label %1125, label %1101

1101:                                             ; preds = %1095
  %1102 = getelementptr inbounds %struct.sv, ptr %1097, i64 0, i32 2
  %1103 = load i32, ptr %1102, align 4, !tbaa !18
  %1104 = and i32 %1103, 33554432
  %1105 = icmp eq i32 %1104, 0
  %1106 = getelementptr inbounds %struct.sv, ptr %1097, i64 0, i32 3
  %1107 = load ptr, ptr %1106, align 8, !tbaa !11
  br i1 %1105, label %1121, label %1108

1108:                                             ; preds = %1101
  %1109 = getelementptr inbounds i8, ptr %1107, i64 -1
  %1110 = load i8, ptr %1109, align 1, !tbaa !11
  %1111 = zext i8 %1110 to i64
  %1112 = icmp eq i8 %1110, 0
  br i1 %1112, label %1113, label %1116

1113:                                             ; preds = %1108
  %1114 = getelementptr inbounds i8, ptr %1107, i64 -9
  %1115 = load i64, ptr %1114, align 1
  br label %1116

1116:                                             ; preds = %1113, %1108
  %1117 = phi i64 [ %1111, %1108 ], [ %1115, %1113 ]
  %1118 = sub i64 0, %1117
  %1119 = getelementptr inbounds i8, ptr %1107, i64 %1118
  store ptr %1119, ptr %1106, align 8, !tbaa !11
  %1120 = and i32 %1103, -33554433
  store i32 %1120, ptr %1102, align 4, !tbaa !18
  br label %1121

1121:                                             ; preds = %1101, %1116
  %1122 = phi ptr [ %1119, %1116 ], [ %1107, %1101 ]
  call void @Perl_safesysfree(ptr noundef %1122) #17
  %1123 = load ptr, ptr @PL_mess_sv, align 8, !tbaa !5
  %1124 = load ptr, ptr %1123, align 8, !tbaa !64
  br label %1125

1125:                                             ; preds = %1121, %1095
  %1126 = phi ptr [ %1124, %1121 ], [ %1096, %1095 ]
  call void @Perl_safesysfree(ptr noundef %1126) #17
  %1127 = load ptr, ptr @PL_mess_sv, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %1127) #17
  store ptr null, ptr @PL_mess_sv, align 8, !tbaa !5
  br label %1128

1128:                                             ; preds = %1067, %1125, %147, %33
  %1129 = load i32, ptr @PL_statusvalue, align 4, !tbaa !9
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2)
  ret i32 %1129
}

; Function Attrs: nounwind returns_twice
declare i32 @__sigsetjmp(ptr noundef, i32 noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_call_list(i32 noundef %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca %struct.jmpenv, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3)
  %6 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %7 = icmp eq ptr %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.cop, ptr %6, i64 0, i32 7
  %10 = load i32, ptr %9, align 4, !tbaa !80
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i32 [ %10, %8 ], [ 0, %2 ]
  store volatile i32 %12, ptr %3, align 4, !tbaa !9
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #17
  call void @llvm.lifetime.start.p0(i64 216, ptr nonnull %5) #17
  %13 = getelementptr inbounds %struct.sv, ptr %1, i64 0, i32 2
  %14 = getelementptr inbounds %struct.jmpenv, ptr %5, i64 0, i32 1
  %15 = getelementptr inbounds %struct.jmpenv, ptr %5, i64 0, i32 2
  %16 = getelementptr inbounds %struct.jmpenv, ptr %5, i64 0, i32 3
  br label %17

17:                                               ; preds = %195, %11
  %18 = load i32, ptr %13, align 4, !tbaa !18
  %19 = and i32 %18, 8388608
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %17
  %22 = call i32 @Perl_mg_size(ptr noundef nonnull %1) #17
  %23 = sext i32 %22 to i64
  br label %28

24:                                               ; preds = %17
  %25 = load ptr, ptr %1, align 8, !tbaa !24
  %26 = getelementptr inbounds %struct.xpvav, ptr %25, i64 0, i32 2
  %27 = load i64, ptr %26, align 8, !tbaa !81
  br label %28

28:                                               ; preds = %21, %24
  %29 = phi i64 [ %23, %21 ], [ %27, %24 ]
  %30 = icmp sgt i64 %29, -1
  br i1 %30, label %31, label %197

31:                                               ; preds = %28
  %32 = call ptr @Perl_av_shift(ptr noundef nonnull %1) #17
  %33 = load i8, ptr @PL_savebegin, align 1, !tbaa !14, !range !28, !noundef !29
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %47, label %35

35:                                               ; preds = %31
  %36 = load ptr, ptr @PL_beginav, align 8, !tbaa !5
  %37 = icmp eq ptr %36, %1
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  call void @Perl_av_create_and_push(ptr noundef nonnull @PL_beginav_save, ptr noundef %32) #17
  br label %48

39:                                               ; preds = %35
  %40 = load ptr, ptr @PL_checkav, align 8, !tbaa !5
  %41 = icmp eq ptr %40, %1
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  call void @Perl_av_create_and_push(ptr noundef nonnull @PL_checkav_save, ptr noundef %32) #17
  br label %48

43:                                               ; preds = %39
  %44 = load ptr, ptr @PL_unitcheckav, align 8, !tbaa !5
  %45 = icmp eq ptr %44, %1
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  call void @Perl_av_create_and_push(ptr noundef nonnull @PL_unitcheckav_save, ptr noundef %32) #17
  br label %48

47:                                               ; preds = %31
  call void @Perl_save_pushptr(ptr noundef %32, i32 noundef 11) #17
  br label %48

48:                                               ; preds = %47, %42, %46, %43, %38
  %49 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  store ptr %49, ptr %14, align 8, !tbaa !30
  %50 = call i32 @__sigsetjmp(ptr noundef nonnull %5, i32 noundef 0) #19
  store i32 %50, ptr %15, align 8, !tbaa !32
  store ptr %5, ptr @PL_top_env, align 8, !tbaa !5
  store i8 0, ptr %16, align 4, !tbaa !33
  switch i32 %50, label %195 [
    i32 0, label %51
    i32 1, label %119
    i32 2, label %120
    i32 3, label %156
  ]

51:                                               ; preds = %48
  %52 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %53 = getelementptr inbounds i32, ptr %52, i64 1
  store ptr %53, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %54 = load ptr, ptr @PL_markstack_max, align 8, !tbaa !5
  %55 = icmp eq ptr %53, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  %57 = call ptr @Perl_markstack_grow() #17
  br label %58

58:                                               ; preds = %51, %56
  %59 = phi ptr [ %57, %56 ], [ %53, %51 ]
  %60 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %61 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %62 = ptrtoint ptr %60 to i64
  %63 = ptrtoint ptr %61 to i64
  %64 = sub i64 %62, %63
  %65 = lshr exact i64 %64, 3
  %66 = trunc i64 %65 to i32
  store i32 %66, ptr %59, align 4, !tbaa !9
  %67 = call i32 @Perl_call_sv(ptr noundef %32, i32 noundef 13)
  %68 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %69 = getelementptr inbounds %struct.gv, ptr %68, i64 0, i32 3
  %70 = load ptr, ptr %69, align 8, !tbaa !11
  %71 = load ptr, ptr %70, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %78

73:                                               ; preds = %58
  %74 = call ptr @Perl_gv_add_by_type(ptr noundef nonnull %68, i32 noundef 0) #17
  %75 = getelementptr inbounds %struct.gv, ptr %74, i64 0, i32 3
  %76 = load ptr, ptr %75, align 8, !tbaa !11
  %77 = load ptr, ptr %76, align 8, !tbaa !5
  br label %78

78:                                               ; preds = %58, %73
  %79 = phi ptr [ %77, %73 ], [ %71, %58 ]
  %80 = getelementptr inbounds %struct.sv, ptr %79, i64 0, i32 2
  %81 = load i32, ptr %80, align 4, !tbaa !18
  %82 = and i32 %81, 2098176
  %83 = icmp eq i32 %82, 1024
  br i1 %83, label %84, label %88

84:                                               ; preds = %78
  %85 = load ptr, ptr %79, align 8, !tbaa !64
  %86 = getelementptr inbounds %struct.xpv, ptr %85, i64 0, i32 2
  %87 = load i64, ptr %86, align 8, !tbaa !82
  store i64 %87, ptr %4, align 8, !tbaa !12
  br label %91

88:                                               ; preds = %78
  %89 = call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %79, ptr noundef nonnull %4, i32 noundef 34) #17
  %90 = load i64, ptr %4, align 8, !tbaa !12
  br label %91

91:                                               ; preds = %88, %84
  %92 = phi i64 [ %90, %88 ], [ %87, %84 ]
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %195, label %94

94:                                               ; preds = %91
  store ptr @PL_compiling, ptr @PL_curcop, align 8, !tbaa !5
  %95 = load volatile i32, ptr %3, align 4, !tbaa !9
  store i32 %95, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 7), align 4, !tbaa !80
  %96 = load ptr, ptr @PL_beginav, align 8, !tbaa !5
  %97 = icmp eq ptr %96, %1
  br i1 %97, label %98, label %99

98:                                               ; preds = %94
  call void @Perl_sv_catpvn_flags(ptr noundef nonnull %79, ptr noundef nonnull @.str.49, i64 noundef 33, i32 noundef 2) #17
  br label %111

99:                                               ; preds = %94
  %100 = load ptr, ptr @PL_checkav, align 8, !tbaa !5
  %101 = icmp eq ptr %100, %1
  br i1 %101, label %109, label %102

102:                                              ; preds = %99
  %103 = load ptr, ptr @PL_initav, align 8, !tbaa !5
  %104 = icmp eq ptr %103, %1
  br i1 %104, label %109, label %105

105:                                              ; preds = %102
  %106 = load ptr, ptr @PL_unitcheckav, align 8, !tbaa !5
  %107 = icmp eq ptr %106, %1
  %108 = select i1 %107, ptr @.str.53, ptr @.str.54
  br label %109

109:                                              ; preds = %105, %102, %99
  %110 = phi ptr [ @.str.51, %99 ], [ %108, %105 ], [ @.str.52, %102 ]
  call void (ptr, ptr, ...) @Perl_sv_catpvf(ptr noundef nonnull %79, ptr noundef nonnull @.str.50, ptr noundef nonnull %110) #17
  br label %111

111:                                              ; preds = %109, %98
  %112 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %113 = icmp sgt i32 %112, %0
  br i1 %113, label %114, label %117

114:                                              ; preds = %111, %114
  call void @Perl_pop_scope() #17
  %115 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %116 = icmp sgt i32 %115, %0
  br i1 %116, label %114, label %117, !llvm.loop !84

117:                                              ; preds = %114, %111
  %118 = load ptr, ptr %14, align 8, !tbaa !30
  store ptr %118, ptr @PL_top_env, align 8, !tbaa !5
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.55, ptr noundef %79) #17
  br label %195

119:                                              ; preds = %48
  store i32 1, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 1, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  br label %120

120:                                              ; preds = %48, %119
  %121 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %122 = icmp sgt i32 %121, %0
  br i1 %122, label %123, label %126

123:                                              ; preds = %120, %123
  call void @Perl_pop_scope() #17
  %124 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %125 = icmp sgt i32 %124, %0
  br i1 %125, label %123, label %126, !llvm.loop !85

126:                                              ; preds = %123, %120
  %127 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %128 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %129 = icmp sgt i64 %127, %128
  br i1 %129, label %130, label %131

130:                                              ; preds = %126
  call void @Perl_free_tmps() #17
  br label %131

131:                                              ; preds = %130, %126
  %132 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %133 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %134 = icmp eq ptr %132, %133
  br i1 %134, label %153, label %135

135:                                              ; preds = %131
  %136 = icmp eq ptr %132, null
  br i1 %136, label %145, label %137

137:                                              ; preds = %135
  %138 = getelementptr inbounds %struct.sv, ptr %132, i64 0, i32 1
  %139 = load i32, ptr %138, align 8, !tbaa !20
  %140 = icmp ugt i32 %139, 1
  br i1 %140, label %141, label %143

141:                                              ; preds = %137
  %142 = add i32 %139, -1
  store i32 %142, ptr %138, align 8, !tbaa !20
  br label %145

143:                                              ; preds = %137
  call void @Perl_sv_free2(ptr noundef nonnull %132, i32 noundef %139) #17
  %144 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %145

145:                                              ; preds = %141, %143, %135
  %146 = phi ptr [ %133, %135 ], [ %144, %143 ], [ %133, %141 ]
  %147 = icmp eq ptr %146, null
  br i1 %147, label %152, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.sv, ptr %146, i64 0, i32 1
  %150 = load i32, ptr %149, align 8, !tbaa !20
  %151 = add i32 %150, 1
  store i32 %151, ptr %149, align 8, !tbaa !20
  br label %152

152:                                              ; preds = %145, %148
  store ptr %146, ptr @PL_curstash, align 8, !tbaa !5
  br label %153

153:                                              ; preds = %152, %131
  store ptr @PL_compiling, ptr @PL_curcop, align 8, !tbaa !5
  %154 = load volatile i32, ptr %3, align 4, !tbaa !9
  store i32 %154, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 7), align 4, !tbaa !80
  %155 = load ptr, ptr %14, align 8, !tbaa !30
  store ptr %155, ptr @PL_top_env, align 8, !tbaa !5
  call fastcc void @S_my_exit_jump()
  unreachable

156:                                              ; preds = %48
  %157 = load ptr, ptr @PL_restartop, align 8, !tbaa !5
  %158 = icmp eq ptr %157, null
  br i1 %158, label %167, label %159

159:                                              ; preds = %156
  store ptr @PL_compiling, ptr @PL_curcop, align 8, !tbaa !5
  %160 = load volatile i32, ptr %3, align 4, !tbaa !9
  store i32 %160, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 7), align 4, !tbaa !80
  %161 = load ptr, ptr %14, align 8, !tbaa !30
  %162 = icmp eq ptr %161, null
  br i1 %162, label %164, label %163

163:                                              ; preds = %159
  call void @siglongjmp(ptr noundef nonnull %5, i32 noundef 3) #20
  unreachable

164:                                              ; preds = %159
  %165 = call ptr @Perl_PerlIO_stderr() #17
  %166 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %165, ptr noundef nonnull @.str.56, i32 noundef 3) #17
  call void @exit(i32 noundef 1) #20
  unreachable

167:                                              ; preds = %156
  %168 = load ptr, ptr @PL_stderrgv, align 8, !tbaa !5
  %169 = icmp eq ptr %168, null
  br i1 %169, label %186, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds %struct.gv, ptr %168, i64 0, i32 2
  %172 = load i32, ptr %171, align 4, !tbaa !86
  %173 = and i32 %172, 255
  %174 = icmp eq i32 %173, 9
  br i1 %174, label %175, label %186

175:                                              ; preds = %170
  %176 = getelementptr inbounds %struct.gv, ptr %168, i64 0, i32 3
  %177 = load ptr, ptr %176, align 8, !tbaa !11
  %178 = getelementptr inbounds %struct.gp, ptr %177, i64 0, i32 1
  %179 = load ptr, ptr %178, align 8, !tbaa !88
  %180 = icmp eq ptr %179, null
  br i1 %180, label %186, label %181

181:                                              ; preds = %175
  %182 = load ptr, ptr %179, align 8, !tbaa !90
  %183 = getelementptr inbounds %struct.xpvio, ptr %182, i64 0, i32 5
  %184 = load ptr, ptr %183, align 8, !tbaa !92
  %185 = icmp eq ptr %184, null
  br i1 %185, label %186, label %188

186:                                              ; preds = %181, %175, %170, %167
  %187 = call ptr @Perl_PerlIO_stderr() #17
  br label %188

188:                                              ; preds = %181, %186
  %189 = phi ptr [ %187, %186 ], [ %184, %181 ]
  %190 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %189, ptr noundef nonnull @.str.57) #17
  %191 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %192 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %193 = icmp sgt i64 %191, %192
  br i1 %193, label %194, label %195

194:                                              ; preds = %188
  call void @Perl_free_tmps() #17
  br label %195

195:                                              ; preds = %48, %117, %91, %194, %188
  %196 = load ptr, ptr %14, align 8, !tbaa !30
  store ptr %196, ptr @PL_top_env, align 8, !tbaa !5
  br label %17, !llvm.loop !94

197:                                              ; preds = %28
  call void @llvm.lifetime.end.p0(i64 216, ptr nonnull %5) #17
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #17
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3)
  ret void
}

declare void @Perl_pop_scope() local_unnamed_addr #2

declare void @Perl_free_tmps() local_unnamed_addr #2

declare i32 @Perl_my_fflush_all() local_unnamed_addr #2

declare void @Perl_op_free(ptr noundef) local_unnamed_addr #2

declare void @PerlIO_destruct() local_unnamed_addr #2

declare void @Perl_sv_clean_objs() local_unnamed_addr #2

declare void @Perl_safesysfree(ptr noundef) local_unnamed_addr #2

declare void @PerlIO_cleanup() local_unnamed_addr #2

declare i32 @Perl_PerlIO_close(ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #9

declare void @Perl_refcounted_he_free(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_hv_common_key_len(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_ck_warner_d(i32 noundef, ptr noundef, ...) local_unnamed_addr #2

declare i32 @Perl_sv_clean_all() local_unnamed_addr #2

declare zeroext i1 @Perl_ckwarn_d(i32 noundef) local_unnamed_addr #2

declare void @Perl_warner(i32 noundef, ptr noundef, ...) local_unnamed_addr #2

declare void @Perl_sv_clear(ptr noundef) local_unnamed_addr #2

declare void @Perl_free_tied_hv_pool() local_unnamed_addr #2

declare void @Perl_sv_free_arenas() local_unnamed_addr #2

; Function Attrs: mustprogress nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable
define dso_local void @perl_free(ptr nocapture noundef %0) local_unnamed_addr #10 {
  %2 = load i32, ptr @PL_veto_cleanup, align 4, !tbaa !9
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @free(ptr noundef %0) #17
  br label %5

5:                                                ; preds = %1, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_call_atexit(ptr noundef %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @PL_exitlist, align 8, !tbaa !5
  %4 = load i32, ptr @PL_exitlistlen, align 4, !tbaa !9
  %5 = add nsw i32 %4, 1
  %6 = sext i32 %5 to i64
  %7 = shl nsw i64 %6, 4
  %8 = tail call ptr @Perl_safesysrealloc(ptr noundef %3, i64 noundef %7) #17
  store ptr %8, ptr @PL_exitlist, align 8, !tbaa !5
  %9 = load i32, ptr @PL_exitlistlen, align 4, !tbaa !9
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.exitlistentry, ptr %8, i64 %10
  store ptr %0, ptr %11, align 8, !tbaa !43
  %12 = load ptr, ptr @PL_exitlist, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.exitlistentry, ptr %12, i64 %10, i32 1
  store ptr %1, ptr %13, align 8, !tbaa !45
  %14 = add nsw i32 %9, 1
  store i32 %14, ptr @PL_exitlistlen, align 4, !tbaa !9
  ret void
}

declare ptr @Perl_safesysrealloc(ptr noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @perl_parse(ptr nocapture noundef readnone %0, ptr noundef readonly %1, i32 noundef %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #0 {
  %6 = alloca %struct.stat, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca %struct.jmpenv, align 8
  call void @llvm.lifetime.start.p0(i64 216, ptr nonnull %10) #17
  store i32 %2, ptr @PL_origargc, align 4, !tbaa !9
  store ptr %3, ptr @PL_origargv, align 8, !tbaa !5
  %11 = load i32, ptr @PL_origalen, align 4, !tbaa !9
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %127

13:                                               ; preds = %5
  %14 = load ptr, ptr %3, align 8, !tbaa !5
  %15 = ptrtoint ptr %14 to i64
  %16 = and i64 %15, 7
  %17 = icmp eq i64 %16, 0
  %18 = icmp slt i32 %2, 1
  %19 = icmp eq ptr %14, null
  %20 = select i1 %18, i1 true, i1 %19
  br i1 %20, label %55, label %21

21:                                               ; preds = %13, %21
  %22 = phi ptr [ %25, %21 ], [ %14, %13 ]
  %23 = load i8, ptr %22, align 1, !tbaa !11
  %24 = icmp eq i8 %23, 0
  %25 = getelementptr inbounds i8, ptr %22, i64 1
  br i1 %24, label %26, label %21, !llvm.loop !95

26:                                               ; preds = %21
  %27 = icmp sgt i32 %2, 1
  br i1 %27, label %28, label %55

28:                                               ; preds = %26
  %29 = zext i32 %2 to i64
  br label %30

30:                                               ; preds = %28, %52
  %31 = phi i64 [ 1, %28 ], [ %53, %52 ]
  %32 = phi ptr [ %22, %28 ], [ %48, %52 ]
  %33 = getelementptr inbounds ptr, ptr %3, i64 %31
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  %35 = getelementptr inbounds i8, ptr %32, i64 1
  %36 = icmp eq ptr %34, %35
  br i1 %36, label %46, label %37

37:                                               ; preds = %30
  %38 = icmp ugt ptr %34, %32
  %39 = and i1 %17, %38
  %40 = getelementptr inbounds i8, ptr %32, i64 8
  %41 = ptrtoint ptr %40 to i64
  %42 = and i64 %41, -8
  %43 = inttoptr i64 %42 to ptr
  %44 = icmp ule ptr %34, %43
  %45 = select i1 %39, i1 %44, i1 false
  br i1 %45, label %46, label %55

46:                                               ; preds = %37, %30
  br label %47

47:                                               ; preds = %46, %47
  %48 = phi ptr [ %51, %47 ], [ %34, %46 ]
  %49 = load i8, ptr %48, align 1, !tbaa !11
  %50 = icmp eq i8 %49, 0
  %51 = getelementptr inbounds i8, ptr %48, i64 1
  br i1 %50, label %52, label %47, !llvm.loop !96

52:                                               ; preds = %47
  %53 = add nuw nsw i64 %31, 1
  %54 = icmp eq i64 %53, %29
  br i1 %54, label %55, label %30, !llvm.loop !97

55:                                               ; preds = %37, %52, %26, %13
  %56 = phi ptr [ null, %13 ], [ %22, %26 ], [ %32, %37 ], [ %48, %52 ]
  %57 = icmp ne ptr %56, null
  %58 = load ptr, ptr @PL_origenviron, align 8
  %59 = icmp ne ptr %58, null
  %60 = select i1 %57, i1 %59, i1 false
  %61 = load i8, ptr @PL_use_safe_putenv, align 1, !range !28
  %62 = icmp eq i8 %61, 0
  %63 = select i1 %60, i1 %62, i1 false
  br i1 %63, label %64, label %114

64:                                               ; preds = %55
  %65 = load ptr, ptr %58, align 8, !tbaa !5
  %66 = getelementptr inbounds i8, ptr %56, i64 1
  %67 = icmp eq ptr %65, %66
  br i1 %67, label %77, label %68

68:                                               ; preds = %64
  %69 = icmp ugt ptr %65, %56
  %70 = and i1 %17, %69
  %71 = getelementptr inbounds i8, ptr %56, i64 8
  %72 = ptrtoint ptr %71 to i64
  %73 = and i64 %72, -8
  %74 = inttoptr i64 %73 to ptr
  %75 = icmp ule ptr %65, %74
  %76 = select i1 %70, i1 %75, i1 false
  br i1 %76, label %77, label %116

77:                                               ; preds = %68, %64
  br label %78

78:                                               ; preds = %77, %78
  %79 = phi ptr [ %82, %78 ], [ %65, %77 ]
  %80 = load i8, ptr %79, align 1, !tbaa !11
  %81 = icmp eq i8 %80, 0
  %82 = getelementptr inbounds i8, ptr %79, i64 1
  br i1 %81, label %83, label %78, !llvm.loop !98

83:                                               ; preds = %78
  call void @Perl_my_setenv(ptr noundef nonnull @.str.11, ptr noundef null) #17
  %84 = load ptr, ptr @PL_origenviron, align 8, !tbaa !5
  %85 = getelementptr inbounds ptr, ptr %84, i64 1
  %86 = load ptr, ptr %85, align 8, !tbaa !5
  %87 = icmp eq ptr %86, null
  br i1 %87, label %116, label %88

88:                                               ; preds = %83, %109
  %89 = phi i64 [ %110, %109 ], [ 1, %83 ]
  %90 = phi ptr [ %112, %109 ], [ %86, %83 ]
  %91 = phi ptr [ %105, %109 ], [ %79, %83 ]
  %92 = getelementptr inbounds i8, ptr %91, i64 1
  %93 = icmp eq ptr %90, %92
  br i1 %93, label %103, label %94

94:                                               ; preds = %88
  %95 = icmp ugt ptr %90, %91
  %96 = and i1 %17, %95
  %97 = getelementptr inbounds i8, ptr %91, i64 8
  %98 = ptrtoint ptr %97 to i64
  %99 = and i64 %98, -8
  %100 = inttoptr i64 %99 to ptr
  %101 = icmp ule ptr %90, %100
  %102 = select i1 %96, i1 %101, i1 false
  br i1 %102, label %103, label %116

103:                                              ; preds = %94, %88
  br label %104

104:                                              ; preds = %103, %104
  %105 = phi ptr [ %108, %104 ], [ %90, %103 ]
  %106 = load i8, ptr %105, align 1, !tbaa !11
  %107 = icmp eq i8 %106, 0
  %108 = getelementptr inbounds i8, ptr %105, i64 1
  br i1 %107, label %109, label %104, !llvm.loop !99

109:                                              ; preds = %104
  %110 = add nuw i64 %89, 1
  %111 = getelementptr inbounds ptr, ptr %84, i64 %110
  %112 = load ptr, ptr %111, align 8, !tbaa !5
  %113 = icmp eq ptr %112, null
  br i1 %113, label %116, label %88, !llvm.loop !100

114:                                              ; preds = %55
  %115 = icmp eq ptr %56, null
  br i1 %115, label %124, label %116

116:                                              ; preds = %94, %109, %83, %68, %114
  %117 = phi ptr [ %56, %114 ], [ %56, %68 ], [ %79, %83 ], [ %91, %94 ], [ %105, %109 ]
  %118 = load ptr, ptr @PL_origargv, align 8, !tbaa !5
  %119 = load ptr, ptr %118, align 8, !tbaa !5
  %120 = ptrtoint ptr %117 to i64
  %121 = ptrtoint ptr %119 to i64
  %122 = add i64 %120, 1
  %123 = sub i64 %122, %121
  br label %124

124:                                              ; preds = %114, %116
  %125 = phi i64 [ %123, %116 ], [ 0, %114 ]
  %126 = trunc i64 %125 to i32
  br label %127

127:                                              ; preds = %5, %124
  %128 = phi i32 [ %126, %124 ], [ 1, %5 ]
  store i32 %128, ptr @PL_origalen, align 4, !tbaa !9
  %129 = load i8, ptr @PL_do_undump, align 1, !tbaa !14, !range !28, !noundef !29
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %148, label %131

131:                                              ; preds = %127
  %132 = load ptr, ptr %3, align 8, !tbaa !5
  %133 = call ptr @Perl_savepv(ptr noundef %132) #17
  store ptr %133, ptr @PL_origfilename, align 8, !tbaa !5
  store i8 0, ptr @PL_do_undump, align 1, !tbaa !14
  %134 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %135 = getelementptr inbounds %struct.stackinfo, ptr %134, i64 0, i32 4
  store i32 -1, ptr %135, align 8, !tbaa !56
  %136 = call i32 @getuid() #17
  %137 = call i32 @geteuid() #17
  %138 = call i32 @getgid() #17
  %139 = call i32 @getegid() #17
  %140 = load i8, ptr @PL_tainting, align 1, !tbaa !14, !range !28, !noundef !29
  %141 = icmp ne i32 %136, 0
  %142 = icmp ne i32 %137, %136
  %143 = icmp ne i32 %139, %138
  %144 = select i1 %142, i1 true, i1 %143
  %145 = select i1 %141, i1 %144, i1 false
  %146 = zext i1 %145 to i8
  %147 = or i8 %140, %146
  store i8 %147, ptr @PL_tainting, align 1, !tbaa !14
  store i8 1, ptr @PL_tainted, align 1, !tbaa !14
  call void @Perl_set_caret_X() #17
  store i8 0, ptr @PL_tainted, align 1, !tbaa !14
  call fastcc void @S_init_postdump_symbols(i32 noundef %2, ptr noundef nonnull %3, ptr noundef %4)
  br label %1153

148:                                              ; preds = %127
  %149 = load ptr, ptr @PL_main_root, align 8, !tbaa !5
  %150 = icmp eq ptr %149, null
  br i1 %150, label %152, label %151

151:                                              ; preds = %148
  call void @Perl_op_free(ptr noundef nonnull %149) #17
  store ptr null, ptr @PL_main_root, align 8, !tbaa !5
  br label %152

152:                                              ; preds = %151, %148
  store ptr null, ptr @PL_main_start, align 8, !tbaa !5
  %153 = load ptr, ptr @PL_main_cv, align 8, !tbaa !5
  %154 = icmp eq ptr %153, null
  br i1 %154, label %162, label %155

155:                                              ; preds = %152
  %156 = getelementptr inbounds %struct.sv, ptr %153, i64 0, i32 1
  %157 = load i32, ptr %156, align 8, !tbaa !20
  %158 = icmp ugt i32 %157, 1
  br i1 %158, label %159, label %161

159:                                              ; preds = %155
  %160 = add i32 %157, -1
  store i32 %160, ptr %156, align 8, !tbaa !20
  br label %162

161:                                              ; preds = %155
  call void @Perl_sv_free2(ptr noundef nonnull %153, i32 noundef %157) #17
  br label %162

162:                                              ; preds = %152, %159, %161
  store ptr null, ptr @PL_main_cv, align 8, !tbaa !5
  %163 = call i64 @time(ptr noundef nonnull @PL_basetime) #17
  %164 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  store i8 0, ptr @PL_dowarn, align 1, !tbaa !11
  %165 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %166 = getelementptr inbounds %struct.jmpenv, ptr %10, i64 0, i32 1
  store ptr %165, ptr %166, align 8, !tbaa !30
  %167 = call i32 @__sigsetjmp(ptr noundef nonnull %10, i32 noundef 0) #19
  %168 = getelementptr inbounds %struct.jmpenv, ptr %10, i64 0, i32 2
  store i32 %167, ptr %168, align 8, !tbaa !32
  store ptr %10, ptr @PL_top_env, align 8, !tbaa !5
  %169 = getelementptr inbounds %struct.jmpenv, ptr %10, i64 0, i32 3
  store i8 0, ptr %169, align 4, !tbaa !33
  switch i32 %167, label %1150 [
    i32 0, label %170
    i32 1, label %1082
    i32 2, label %1083
    i32 3, label %1126
  ]

170:                                              ; preds = %162
  %171 = load i32, ptr @PL_origargc, align 4, !tbaa !9
  %172 = load ptr, ptr @PL_origargv, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9)
  store volatile i8 0, ptr %9, align 1, !tbaa !14
  store i32 1, ptr @PL_phase, align 4, !tbaa !11
  %173 = call ptr @Perl_newSV_type(i32 noundef 12) #17
  %174 = getelementptr inbounds %struct.hv, ptr %173, i64 0, i32 1
  %175 = load i32, ptr %174, align 8, !tbaa !101
  %176 = add i32 %175, 1
  store i32 %176, ptr %174, align 8, !tbaa !101
  %177 = call ptr @Perl_newSV_type(i32 noundef 12) #17
  store ptr %177, ptr @PL_defstash, align 8, !tbaa !5
  store ptr %177, ptr @PL_curstash, align 8, !tbaa !5
  %178 = call ptr @Perl_newSVpvn_share(ptr noundef nonnull @.str.77, i32 noundef 4, i32 noundef 0) #17
  store ptr %178, ptr @PL_curstname, align 8, !tbaa !5
  %179 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.4, i64 noundef 6, i32 noundef 129, i32 noundef 12) #17
  %180 = getelementptr inbounds %struct.gv, ptr %179, i64 0, i32 3
  %181 = load ptr, ptr %180, align 8, !tbaa !11
  %182 = getelementptr inbounds %struct.gp, ptr %181, i64 0, i32 5
  %183 = load ptr, ptr %182, align 8, !tbaa !102
  %184 = icmp eq ptr %183, null
  br i1 %184, label %192, label %185

185:                                              ; preds = %170
  %186 = getelementptr inbounds %struct.sv, ptr %183, i64 0, i32 1
  %187 = load i32, ptr %186, align 8, !tbaa !20
  %188 = icmp ugt i32 %187, 1
  br i1 %188, label %189, label %191

189:                                              ; preds = %185
  %190 = add i32 %187, -1
  store i32 %190, ptr %186, align 8, !tbaa !20
  br label %192

191:                                              ; preds = %185
  call void @Perl_sv_free2(ptr noundef nonnull %183, i32 noundef %187) #17
  br label %192

192:                                              ; preds = %191, %189, %170
  %193 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  call void @Perl_hv_name_set(ptr noundef %193, ptr noundef nonnull @.str.77, i32 noundef 4, i32 noundef 0) #17
  %194 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %195 = icmp eq ptr %194, null
  br i1 %195, label %200, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.sv, ptr %194, i64 0, i32 1
  %198 = load i32, ptr %197, align 8, !tbaa !20
  %199 = add i32 %198, 1
  store i32 %199, ptr %197, align 8, !tbaa !20
  br label %200

200:                                              ; preds = %196, %192
  %201 = load ptr, ptr %180, align 8, !tbaa !11
  %202 = getelementptr inbounds %struct.gp, ptr %201, i64 0, i32 5
  store ptr %194, ptr %202, align 8, !tbaa !102
  %203 = getelementptr inbounds %struct.gv, ptr %179, i64 0, i32 2
  %204 = load i32, ptr %203, align 4, !tbaa !86
  %205 = or i32 %204, 134283264
  store i32 %205, ptr %203, align 4, !tbaa !86
  %206 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.80, i64 noundef 3, i32 noundef 129, i32 noundef 11) #17
  %207 = call ptr @Perl_gv_add_by_type(ptr noundef %206, i32 noundef 11) #17
  %208 = call ptr @Perl_gv_add_by_type(ptr noundef %207, i32 noundef 12) #17
  store ptr %208, ptr @PL_incgv, align 8, !tbaa !5
  %209 = icmp eq ptr %208, null
  br i1 %209, label %214, label %210

210:                                              ; preds = %200
  %211 = getelementptr inbounds %struct.gv, ptr %208, i64 0, i32 1
  %212 = load i32, ptr %211, align 8, !tbaa !103
  %213 = add i32 %212, 1
  store i32 %213, ptr %211, align 8, !tbaa !103
  br label %214

214:                                              ; preds = %210, %200
  %215 = load ptr, ptr %208, align 8, !tbaa !104
  %216 = getelementptr inbounds %struct.xpvgv, ptr %215, i64 0, i32 2
  %217 = load i64, ptr %216, align 8, !tbaa !105
  %218 = or i64 %217, 2
  store i64 %218, ptr %216, align 8, !tbaa !105
  %219 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.81, i64 noundef 1, i32 noundef 129, i32 noundef 3) #17
  store ptr %219, ptr @PL_hintgv, align 8, !tbaa !5
  %220 = icmp eq ptr %219, null
  br i1 %220, label %225, label %221

221:                                              ; preds = %214
  %222 = getelementptr inbounds %struct.gv, ptr %219, i64 0, i32 1
  %223 = load i32, ptr %222, align 8, !tbaa !103
  %224 = add i32 %223, 1
  store i32 %224, ptr %222, align 8, !tbaa !103
  br label %225

225:                                              ; preds = %221, %214
  %226 = load ptr, ptr %219, align 8, !tbaa !104
  %227 = getelementptr inbounds %struct.xpvgv, ptr %226, i64 0, i32 2
  %228 = load i64, ptr %227, align 8, !tbaa !105
  %229 = or i64 %228, 2
  store i64 %229, ptr %227, align 8, !tbaa !105
  %230 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.82, i64 noundef 1, i32 noundef 129, i32 noundef 11) #17
  store ptr %230, ptr @PL_defgv, align 8, !tbaa !5
  %231 = icmp eq ptr %230, null
  br i1 %231, label %236, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds %struct.gv, ptr %230, i64 0, i32 1
  %234 = load i32, ptr %233, align 8, !tbaa !103
  %235 = add i32 %234, 1
  store i32 %235, ptr %233, align 8, !tbaa !103
  br label %236

236:                                              ; preds = %232, %225
  %237 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.83, i64 noundef 1, i32 noundef 129, i32 noundef 3) #17
  store ptr %237, ptr @PL_errgv, align 8, !tbaa !5
  %238 = icmp eq ptr %237, null
  br i1 %238, label %243, label %239

239:                                              ; preds = %236
  %240 = getelementptr inbounds %struct.gv, ptr %237, i64 0, i32 1
  %241 = load i32, ptr %240, align 8, !tbaa !103
  %242 = add i32 %241, 1
  store i32 %242, ptr %240, align 8, !tbaa !103
  br label %243

243:                                              ; preds = %239, %236
  %244 = load ptr, ptr %237, align 8, !tbaa !104
  %245 = getelementptr inbounds %struct.xpvgv, ptr %244, i64 0, i32 2
  %246 = load i64, ptr %245, align 8, !tbaa !105
  %247 = or i64 %246, 2
  store i64 %247, ptr %245, align 8, !tbaa !105
  %248 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.84, i64 noundef 1, i32 noundef 129, i32 noundef 3) #17
  store ptr %248, ptr @PL_replgv, align 8, !tbaa !5
  %249 = icmp eq ptr %248, null
  br i1 %249, label %254, label %250

250:                                              ; preds = %243
  %251 = getelementptr inbounds %struct.gv, ptr %248, i64 0, i32 1
  %252 = load i32, ptr %251, align 8, !tbaa !103
  %253 = add i32 %252, 1
  store i32 %253, ptr %251, align 8, !tbaa !103
  br label %254

254:                                              ; preds = %250, %243
  %255 = load ptr, ptr %248, align 8, !tbaa !104
  %256 = getelementptr inbounds %struct.xpvgv, ptr %255, i64 0, i32 2
  %257 = load i64, ptr %256, align 8, !tbaa !105
  %258 = or i64 %257, 2
  store i64 %258, ptr %256, align 8, !tbaa !105
  %259 = call ptr (ptr, ...) @Perl_form(ptr noundef nonnull @.str.85, ptr noundef nonnull @.str.1) #17
  %260 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %261 = call ptr @Perl_gv_add_by_type(ptr noundef %260, i32 noundef 0) #17
  %262 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %263 = getelementptr inbounds %struct.gv, ptr %262, i64 0, i32 3
  %264 = load ptr, ptr %263, align 8, !tbaa !11
  %265 = load ptr, ptr %264, align 8, !tbaa !5
  %266 = icmp eq ptr %265, null
  br i1 %266, label %267, label %272

267:                                              ; preds = %254
  %268 = call ptr @Perl_gv_add_by_type(ptr noundef nonnull %262, i32 noundef 0) #17
  %269 = getelementptr inbounds %struct.gv, ptr %268, i64 0, i32 3
  %270 = load ptr, ptr %269, align 8, !tbaa !11
  %271 = load ptr, ptr %270, align 8, !tbaa !5
  br label %272

272:                                              ; preds = %267, %254
  %273 = phi ptr [ %271, %267 ], [ %265, %254 ]
  %274 = call ptr @Perl_sv_grow(ptr noundef %273, i64 noundef 240) #17
  %275 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %276 = getelementptr inbounds %struct.gv, ptr %275, i64 0, i32 3
  %277 = load ptr, ptr %276, align 8, !tbaa !11
  %278 = load ptr, ptr %277, align 8, !tbaa !5
  %279 = icmp eq ptr %278, null
  br i1 %279, label %292, label %280

280:                                              ; preds = %272
  %281 = getelementptr inbounds %struct.sv, ptr %278, i64 0, i32 2
  %282 = load i32, ptr %281, align 4, !tbaa !18
  %283 = and i32 %282, 134283264
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %294, label %285

285:                                              ; preds = %280
  %286 = getelementptr inbounds %struct.sv, ptr %278, i64 0, i32 1
  %287 = load i32, ptr %286, align 8, !tbaa !20
  %288 = icmp ugt i32 %287, 1
  br i1 %288, label %289, label %291

289:                                              ; preds = %285
  %290 = add i32 %287, -1
  store i32 %290, ptr %286, align 8, !tbaa !20
  br label %292

291:                                              ; preds = %285
  call void @Perl_sv_free2(ptr noundef nonnull %278, i32 noundef %287) #17
  br label %292

292:                                              ; preds = %291, %289, %272
  %293 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %293, ptr %277, align 8, !tbaa !5
  br label %302

294:                                              ; preds = %280
  call void @Perl_sv_setpvn(ptr noundef nonnull %278, ptr noundef nonnull @.str.1, i64 noundef 0) #17
  %295 = load i32, ptr %281, align 4, !tbaa !18
  %296 = and i32 %295, 1610547455
  %297 = or i32 %296, 17408
  store i32 %297, ptr %281, align 4, !tbaa !18
  %298 = and i32 %295, 14680064
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %302, label %300

300:                                              ; preds = %294
  %301 = call i32 @Perl_mg_free(ptr noundef nonnull %278) #17
  br label %302

302:                                              ; preds = %300, %294, %292
  %303 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %304 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %305 = icmp eq ptr %303, %304
  br i1 %305, label %324, label %306

306:                                              ; preds = %302
  %307 = icmp eq ptr %303, null
  br i1 %307, label %316, label %308

308:                                              ; preds = %306
  %309 = getelementptr inbounds %struct.sv, ptr %303, i64 0, i32 1
  %310 = load i32, ptr %309, align 8, !tbaa !20
  %311 = icmp ugt i32 %310, 1
  br i1 %311, label %312, label %314

312:                                              ; preds = %308
  %313 = add i32 %310, -1
  store i32 %313, ptr %309, align 8, !tbaa !20
  br label %316

314:                                              ; preds = %308
  call void @Perl_sv_free2(ptr noundef nonnull %303, i32 noundef %310) #17
  %315 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %316

316:                                              ; preds = %314, %312, %306
  %317 = phi ptr [ %304, %306 ], [ %315, %314 ], [ %304, %312 ]
  %318 = icmp eq ptr %317, null
  br i1 %318, label %323, label %319

319:                                              ; preds = %316
  %320 = getelementptr inbounds %struct.sv, ptr %317, i64 0, i32 1
  %321 = load i32, ptr %320, align 8, !tbaa !20
  %322 = add i32 %321, 1
  store i32 %322, ptr %320, align 8, !tbaa !20
  br label %323

323:                                              ; preds = %319, %316
  store ptr %317, ptr @PL_curstash, align 8, !tbaa !5
  br label %324

324:                                              ; preds = %323, %302
  %325 = phi ptr [ %317, %323 ], [ %303, %302 ]
  store ptr %325, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 8), align 8, !tbaa !107
  %326 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.86, i64 noundef 4, i32 noundef 2, i32 noundef 12) #17
  %327 = getelementptr inbounds %struct.gv, ptr %326, i64 0, i32 3
  %328 = load ptr, ptr %327, align 8, !tbaa !11
  %329 = getelementptr inbounds %struct.gp, ptr %328, i64 0, i32 5
  %330 = load ptr, ptr %329, align 8, !tbaa !102
  store ptr %330, ptr @PL_debstash, align 8, !tbaa !5
  %331 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.87, i64 noundef 14, i32 noundef 2, i32 noundef 12) #17
  %332 = getelementptr inbounds %struct.gv, ptr %331, i64 0, i32 3
  %333 = load ptr, ptr %332, align 8, !tbaa !11
  %334 = getelementptr inbounds %struct.gp, ptr %333, i64 0, i32 5
  %335 = load ptr, ptr %334, align 8, !tbaa !102
  store ptr %335, ptr @PL_globalstash, align 8, !tbaa !5
  %336 = call ptr @Perl_gv_fetchpv(ptr noundef nonnull @.str.17, i32 noundef 1, i32 noundef 3) #17
  %337 = icmp eq ptr %336, null
  br i1 %337, label %342, label %338

338:                                              ; preds = %324
  %339 = getelementptr inbounds %struct.gv, ptr %336, i64 0, i32 3
  %340 = load ptr, ptr %339, align 8, !tbaa !11
  %341 = load ptr, ptr %340, align 8, !tbaa !108
  br label %342

342:                                              ; preds = %338, %324
  %343 = phi ptr [ %341, %338 ], [ null, %324 ]
  call void @Perl_sv_setpvn(ptr noundef %343, ptr noundef nonnull @.str, i64 noundef 1) #17
  %344 = getelementptr inbounds ptr, ptr %172, i64 1
  %345 = add nsw i32 %171, -1
  %346 = icmp sgt i32 %171, 1
  br i1 %346, label %347, label %481

347:                                              ; preds = %342, %472
  %348 = phi i32 [ %479, %472 ], [ %345, %342 ]
  %349 = phi ptr [ %478, %472 ], [ %344, %342 ]
  %350 = phi i32 [ %477, %472 ], [ %171, %342 ]
  %351 = phi ptr [ %476, %472 ], [ %172, %342 ]
  %352 = phi ptr [ %365, %472 ], [ null, %342 ]
  %353 = phi i8 [ %475, %472 ], [ 0, %342 ]
  %354 = phi ptr [ %474, %472 ], [ null, %342 ]
  %355 = phi i8 [ %473, %472 ], [ 0, %342 ]
  %356 = load ptr, ptr %349, align 8, !tbaa !5
  %357 = load i8, ptr %356, align 1, !tbaa !11
  %358 = icmp eq i8 %357, 45
  br i1 %358, label %359, label %481

359:                                              ; preds = %347
  %360 = getelementptr inbounds i8, ptr %356, i64 1
  %361 = load i8, ptr %360, align 1, !tbaa !11
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %481, label %363

363:                                              ; preds = %359, %442
  %364 = phi ptr [ %443, %442 ], [ %360, %359 ]
  %365 = phi ptr [ @.str.63, %442 ], [ %352, %359 ]
  br label %366

366:                                              ; preds = %429, %363
  %367 = phi ptr [ %364, %363 ], [ %430, %429 ]
  %368 = load i8, ptr %367, align 1, !tbaa !11
  %369 = sext i8 %368 to i32
  switch i32 %369, label %471 [
    i32 67, label %370
    i32 13, label %370
    i32 32, label %370
    i32 48, label %370
    i32 70, label %370
    i32 97, label %370
    i32 99, label %370
    i32 100, label %370
    i32 68, label %370
    i32 104, label %370
    i32 105, label %370
    i32 108, label %370
    i32 77, label %370
    i32 109, label %370
    i32 110, label %370
    i32 112, label %370
    i32 115, label %370
    i32 117, label %370
    i32 85, label %370
    i32 118, label %370
    i32 87, label %370
    i32 88, label %370
    i32 119, label %370
    i32 116, label %373
    i32 84, label %379
    i32 69, label %381
    i32 101, label %382
    i32 102, label %405
    i32 73, label %407
    i32 83, label %427
    i32 86, label %431
    i32 120, label %445
    i32 0, label %472
    i32 45, label %450
  ]

370:                                              ; preds = %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366, %366
  %371 = call ptr @Perl_moreswitches(ptr noundef nonnull %367)
  %372 = icmp eq ptr %371, null
  br i1 %372, label %472, label %429

373:                                              ; preds = %366
  %374 = load i8, ptr @PL_tainting, align 1, !tbaa !14, !range !28, !noundef !29
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %376, label %377

376:                                              ; preds = %373
  store i8 1, ptr @PL_taint_warn, align 1, !tbaa !14
  store i8 1, ptr @PL_tainting, align 1, !tbaa !14
  br label %377

377:                                              ; preds = %376, %373
  %378 = getelementptr inbounds i8, ptr %367, i64 1
  br label %429

379:                                              ; preds = %366
  store i8 1, ptr @PL_tainting, align 1, !tbaa !14
  store i8 0, ptr @PL_taint_warn, align 1, !tbaa !14
  %380 = getelementptr inbounds i8, ptr %367, i64 1
  br label %429

381:                                              ; preds = %366
  store i8 1, ptr @PL_minus_E, align 1, !tbaa !14
  br label %382

382:                                              ; preds = %366, %381
  %383 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %384 = icmp eq ptr %383, null
  br i1 %384, label %385, label %387

385:                                              ; preds = %382
  %386 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %386, ptr @PL_e_script, align 8, !tbaa !5
  br label %387

387:                                              ; preds = %385, %382
  %388 = phi ptr [ %383, %382 ], [ %386, %385 ]
  %389 = phi i8 [ %355, %382 ], [ 1, %385 ]
  %390 = getelementptr inbounds i8, ptr %367, i64 1
  %391 = load i8, ptr %390, align 1, !tbaa !11
  %392 = icmp eq i8 %391, 0
  br i1 %392, label %394, label %393

393:                                              ; preds = %387
  call void @Perl_sv_catpv(ptr noundef %388, ptr noundef nonnull %390) #17
  br label %401

394:                                              ; preds = %387
  %395 = getelementptr inbounds ptr, ptr %351, i64 2
  %396 = load ptr, ptr %395, align 8, !tbaa !5
  %397 = icmp eq ptr %396, null
  br i1 %397, label %400, label %398

398:                                              ; preds = %394
  call void @Perl_sv_catpv(ptr noundef %388, ptr noundef nonnull %396) #17
  %399 = add nsw i32 %350, -2
  br label %401

400:                                              ; preds = %394
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.60, i32 noundef %369) #17
  br label %401

401:                                              ; preds = %400, %398, %393
  %402 = phi ptr [ %349, %393 ], [ %395, %398 ], [ %349, %400 ]
  %403 = phi i32 [ %348, %393 ], [ %399, %398 ], [ %348, %400 ]
  %404 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  call void @Perl_sv_catpvn_flags(ptr noundef %404, ptr noundef nonnull @.str, i64 noundef 1, i32 noundef 2) #17
  br label %472

405:                                              ; preds = %366
  %406 = getelementptr inbounds i8, ptr %367, i64 1
  br label %429

407:                                              ; preds = %366
  %408 = getelementptr inbounds i8, ptr %367, i64 1
  %409 = load i8, ptr %408, align 1, !tbaa !11
  %410 = icmp eq i8 %409, 0
  br i1 %410, label %411, label %419

411:                                              ; preds = %407
  %412 = getelementptr inbounds ptr, ptr %351, i64 2
  %413 = load ptr, ptr %412, align 8, !tbaa !5
  %414 = icmp eq ptr %413, null
  br i1 %414, label %424, label %415

415:                                              ; preds = %411
  %416 = add nsw i32 %350, -2
  %417 = load i8, ptr %413, align 1, !tbaa !11
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %424, label %419

419:                                              ; preds = %415, %407
  %420 = phi i32 [ %416, %415 ], [ %348, %407 ]
  %421 = phi ptr [ %412, %415 ], [ %349, %407 ]
  %422 = phi ptr [ %413, %415 ], [ %408, %407 ]
  %423 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %422) #21
  call fastcc void @S_incpush(ptr noundef nonnull %422, i64 noundef %423, i32 noundef 14)
  br label %472

424:                                              ; preds = %415, %411
  %425 = phi i32 [ %416, %415 ], [ %348, %411 ]
  %426 = phi ptr [ %412, %415 ], [ %349, %411 ]
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.25) #17
  br label %472

427:                                              ; preds = %366
  store volatile i8 1, ptr %9, align 1, !tbaa !14
  %428 = getelementptr inbounds i8, ptr %367, i64 1
  br label %429

429:                                              ; preds = %427, %405, %379, %377, %370
  %430 = phi ptr [ %428, %427 ], [ %406, %405 ], [ %380, %379 ], [ %378, %377 ], [ %371, %370 ]
  br label %366

431:                                              ; preds = %366
  %432 = getelementptr inbounds i8, ptr %367, i64 1
  %433 = load i8, ptr %432, align 1, !tbaa !11
  %434 = icmp eq i8 %433, 58
  br i1 %434, label %437, label %435

435:                                              ; preds = %431
  %436 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.61, i64 noundef 24) #17
  br label %442

437:                                              ; preds = %431
  %438 = getelementptr inbounds i8, ptr %367, i64 2
  %439 = call ptr (ptr, ...) @Perl_newSVpvf(ptr noundef nonnull @.str.62, i32 noundef 0, ptr noundef nonnull %438, i32 noundef 0) #17
  %440 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %438) #21
  %441 = getelementptr inbounds i8, ptr %438, i64 %440
  br label %442

442:                                              ; preds = %437, %435
  %443 = phi ptr [ %432, %435 ], [ %441, %437 ]
  %444 = phi ptr [ %436, %435 ], [ %439, %437 ]
  call void @Perl_av_create_and_push(ptr noundef nonnull @PL_preambleav, ptr noundef %444) #17
  br label %363

445:                                              ; preds = %366
  %446 = getelementptr inbounds i8, ptr %367, i64 1
  %447 = load i8, ptr %446, align 1, !tbaa !11
  %448 = icmp eq i8 %447, 0
  %449 = select i1 %448, ptr %354, ptr %446
  br label %472

450:                                              ; preds = %366
  %451 = getelementptr inbounds i8, ptr %367, i64 1
  %452 = load i8, ptr %451, align 1, !tbaa !11
  %453 = icmp eq i8 %452, 0
  br i1 %453, label %460, label %454

454:                                              ; preds = %450
  %455 = zext i8 %452 to i64
  %456 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %455
  %457 = load i32, ptr %456, align 4, !tbaa !9
  %458 = and i32 %457, 17408
  %459 = icmp eq i32 %458, 17408
  br i1 %459, label %460, label %463

460:                                              ; preds = %454, %450
  %461 = add nsw i32 %350, -2
  %462 = getelementptr inbounds ptr, ptr %351, i64 2
  br label %481

463:                                              ; preds = %454
  %464 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %451, ptr noundef nonnull dereferenceable(8) @.str.64) #21
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %466, label %467

466:                                              ; preds = %463
  call fastcc void @S_minus_v()
  unreachable

467:                                              ; preds = %463
  %468 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %451, ptr noundef nonnull dereferenceable(5) @.str.65) #21
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %470, label %471

470:                                              ; preds = %467
  call fastcc void @S_usage()
  unreachable

471:                                              ; preds = %366, %467
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.66, ptr noundef nonnull %367) #17
  br label %472

472:                                              ; preds = %370, %366, %471, %445, %424, %419, %401
  %473 = phi i8 [ %355, %471 ], [ %355, %419 ], [ %355, %424 ], [ %389, %401 ], [ %355, %445 ], [ %355, %366 ], [ %355, %370 ]
  %474 = phi ptr [ %354, %471 ], [ %354, %419 ], [ %354, %424 ], [ %354, %401 ], [ %449, %445 ], [ %354, %366 ], [ %354, %370 ]
  %475 = phi i8 [ %353, %471 ], [ %353, %419 ], [ %353, %424 ], [ %353, %401 ], [ 1, %445 ], [ %353, %366 ], [ %353, %370 ]
  %476 = phi ptr [ %349, %471 ], [ %421, %419 ], [ %426, %424 ], [ %402, %401 ], [ %349, %445 ], [ %349, %366 ], [ %349, %370 ]
  %477 = phi i32 [ %348, %471 ], [ %420, %419 ], [ %425, %424 ], [ %403, %401 ], [ %348, %445 ], [ %348, %366 ], [ %348, %370 ]
  %478 = getelementptr inbounds ptr, ptr %476, i64 1
  %479 = add nsw i32 %477, -1
  %480 = icmp sgt i32 %477, 1
  br i1 %480, label %347, label %481, !llvm.loop !109

481:                                              ; preds = %472, %359, %347, %460, %342
  %482 = phi i8 [ %355, %460 ], [ 0, %342 ], [ %355, %347 ], [ %355, %359 ], [ %473, %472 ]
  %483 = phi ptr [ %354, %460 ], [ null, %342 ], [ %354, %347 ], [ %354, %359 ], [ %474, %472 ]
  %484 = phi i8 [ %353, %460 ], [ 0, %342 ], [ %353, %347 ], [ %353, %359 ], [ %475, %472 ]
  %485 = phi ptr [ %365, %460 ], [ null, %342 ], [ %352, %347 ], [ %352, %359 ], [ %365, %472 ]
  %486 = phi ptr [ %462, %460 ], [ %344, %342 ], [ %349, %347 ], [ %349, %359 ], [ %478, %472 ]
  %487 = phi i32 [ %461, %460 ], [ %345, %342 ], [ %348, %347 ], [ %348, %359 ], [ %479, %472 ]
  store i8 1, ptr @PL_tainted, align 1, !tbaa !14
  call void @Perl_set_caret_X() #17
  store i8 0, ptr @PL_tainted, align 1, !tbaa !14
  %488 = icmp eq ptr %485, null
  br i1 %488, label %489, label %491

489:                                              ; preds = %481
  %490 = load ptr, ptr %486, align 8, !tbaa !5
  br label %491

491:                                              ; preds = %489, %481
  %492 = phi ptr [ %485, %481 ], [ %490, %489 ]
  %493 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %494 = icmp ne ptr %493, null
  %495 = icmp eq ptr %492, null
  %496 = select i1 %495, ptr @.str.67, ptr %492
  %497 = select i1 %494, ptr @.str.63, ptr %496
  %498 = sext i1 %494 to i64
  %499 = getelementptr inbounds ptr, ptr %486, i64 %498
  %500 = zext i1 %494 to i32
  %501 = add nsw i32 %487, %500
  call fastcc void @S_incpush_use_sep(ptr noundef nonnull @.str.88)
  call fastcc void @S_incpush_use_sep(ptr noundef nonnull @.str.89)
  %502 = load volatile i8, ptr %9, align 1, !tbaa !14, !range !28, !noundef !29
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %6) #17
  %503 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %504 = icmp eq ptr %503, null
  br i1 %504, label %507, label %505

505:                                              ; preds = %491
  %506 = call ptr @Perl_savepvn(ptr noundef nonnull @.str.90, i32 noundef 2) #17
  store ptr %506, ptr @PL_origfilename, align 8, !tbaa !5
  br label %546

507:                                              ; preds = %491
  %508 = icmp ne i8 %502, 0
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #17
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #17
  %509 = call ptr @Perl_find_script(ptr noundef nonnull %497, i1 noundef zeroext %508, ptr noundef null, i32 noundef 1) #17
  store ptr %509, ptr @PL_origfilename, align 8, !tbaa !5
  %510 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %509, ptr noundef nonnull dereferenceable(9) @.str.91, i64 noundef 8) #21
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %512, label %543

512:                                              ; preds = %507
  %513 = getelementptr inbounds i8, ptr %509, i64 8
  %514 = load i8, ptr %513, align 1, !tbaa !11
  %515 = zext i8 %514 to i64
  %516 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %515
  %517 = load i32, ptr %516, align 4, !tbaa !9
  %518 = and i32 %517, 2
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %543, label %520

520:                                              ; preds = %512
  %521 = call zeroext i1 @Perl_grok_atoUV(ptr noundef nonnull %513, ptr noundef nonnull %8, ptr noundef nonnull %7) #17
  %522 = load i64, ptr %8, align 8
  %523 = icmp ult i64 %522, 2147483648
  %524 = select i1 %521, i1 %523, i1 false
  br i1 %524, label %525, label %543

525:                                              ; preds = %520
  %526 = trunc i64 %522 to i32
  %527 = load ptr, ptr %7, align 8, !tbaa !5
  %528 = load i8, ptr %527, align 1, !tbaa !11
  switch i8 %528, label %529 [
    i8 0, label %543
    i8 47, label %531
  ]

529:                                              ; preds = %525
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.92, ptr noundef nonnull %527) #17
  %530 = load ptr, ptr %7, align 8, !tbaa !5
  br label %531

531:                                              ; preds = %529, %525
  %532 = phi ptr [ %530, %529 ], [ %527, %525 ]
  %533 = getelementptr inbounds i8, ptr %532, i64 1
  %534 = load i8, ptr %533, align 1, !tbaa !11
  %535 = icmp eq i8 %534, 0
  br i1 %535, label %536, label %538

536:                                              ; preds = %531
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.93) #17
  %537 = load ptr, ptr %7, align 8, !tbaa !5
  br label %538

538:                                              ; preds = %536, %531
  %539 = phi ptr [ %537, %536 ], [ %532, %531 ]
  %540 = getelementptr inbounds i8, ptr %539, i64 1
  %541 = call ptr @Perl_savepv(ptr noundef nonnull %540) #17
  %542 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  call void @Perl_safesysfree(ptr noundef %542) #17
  store ptr %541, ptr @PL_origfilename, align 8, !tbaa !5
  br label %543

543:                                              ; preds = %538, %525, %520, %512, %507
  %544 = phi ptr [ %509, %507 ], [ %541, %538 ], [ %509, %525 ], [ %509, %520 ], [ %509, %512 ]
  %545 = phi i32 [ -1, %507 ], [ %526, %538 ], [ %526, %525 ], [ -1, %520 ], [ -1, %512 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #17
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #17
  br label %546

546:                                              ; preds = %543, %505
  %547 = phi ptr [ %497, %505 ], [ %544, %543 ]
  %548 = phi i32 [ -1, %505 ], [ %545, %543 ]
  %549 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %550 = getelementptr inbounds %struct.cop, ptr %549, i64 0, i32 9
  %551 = load ptr, ptr %550, align 8, !tbaa !49
  %552 = icmp eq ptr %551, null
  br i1 %552, label %561, label %553

553:                                              ; preds = %546
  %554 = getelementptr inbounds %struct.sv, ptr %551, i64 0, i32 1
  %555 = load i32, ptr %554, align 8, !tbaa !20
  %556 = icmp ugt i32 %555, 1
  br i1 %556, label %557, label %559

557:                                              ; preds = %553
  %558 = add i32 %555, -1
  store i32 %558, ptr %554, align 8, !tbaa !20
  br label %561

559:                                              ; preds = %553
  call void @Perl_sv_free2(ptr noundef nonnull %551, i32 noundef %555) #17
  %560 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  br label %561

561:                                              ; preds = %559, %557, %546
  %562 = phi ptr [ %549, %546 ], [ %549, %557 ], [ %560, %559 ]
  %563 = getelementptr inbounds %struct.cop, ptr %562, i64 0, i32 9
  store ptr null, ptr %563, align 8, !tbaa !49
  %564 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  %565 = call ptr @Perl_gv_fetchfile(ptr noundef %564) #17
  %566 = icmp eq ptr %565, null
  br i1 %566, label %571, label %567

567:                                              ; preds = %561
  %568 = getelementptr inbounds %struct.sv, ptr %565, i64 0, i32 1
  %569 = load i32, ptr %568, align 8, !tbaa !20
  %570 = add i32 %569, 1
  store i32 %570, ptr %568, align 8, !tbaa !20
  br label %571

571:                                              ; preds = %567, %561
  %572 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %573 = getelementptr inbounds %struct.cop, ptr %572, i64 0, i32 9
  store ptr %565, ptr %573, align 8, !tbaa !49
  %574 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  %575 = load i8, ptr %574, align 1, !tbaa !11
  %576 = icmp eq i8 %575, 45
  br i1 %576, label %577, label %582

577:                                              ; preds = %571
  %578 = getelementptr inbounds i8, ptr %574, i64 1
  %579 = load i8, ptr %578, align 1, !tbaa !11
  %580 = icmp eq i8 %579, 0
  %581 = select i1 %580, ptr @.str.1, ptr %547
  br label %582

582:                                              ; preds = %577, %571
  %583 = phi ptr [ %547, %571 ], [ %581, %577 ]
  %584 = icmp sgt i32 %548, -1
  br i1 %584, label %585, label %587

585:                                              ; preds = %582
  %586 = call ptr @PerlIO_fdopen(i32 noundef %548, ptr noundef nonnull @.str.94) #17
  br label %593

587:                                              ; preds = %582
  %588 = load i8, ptr %583, align 1, !tbaa !11
  %589 = icmp eq i8 %588, 0
  br i1 %589, label %590, label %591

590:                                              ; preds = %587
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #17
  br label %661

591:                                              ; preds = %587
  %592 = call ptr @PerlIO_open(ptr noundef nonnull %583, ptr noundef nonnull @.str.94) #17
  br label %593

593:                                              ; preds = %591, %585
  %594 = phi ptr [ %586, %585 ], [ %592, %591 ]
  %595 = icmp eq ptr %594, null
  br i1 %595, label %596, label %618

596:                                              ; preds = %593
  %597 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %598 = icmp eq ptr %597, null
  br i1 %598, label %603, label %599

599:                                              ; preds = %596
  %600 = call ptr @__errno_location() #22
  %601 = load i32, ptr %600, align 4, !tbaa !9
  %602 = call ptr @strerror(i32 noundef %601) #17
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.95, ptr noundef %602) #17
  br label %618

603:                                              ; preds = %596
  %604 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %605 = getelementptr inbounds %struct.cop, ptr %604, i64 0, i32 9
  %606 = load ptr, ptr %605, align 8, !tbaa !49
  %607 = icmp eq ptr %606, null
  br i1 %607, label %613, label %608

608:                                              ; preds = %603
  %609 = load ptr, ptr %606, align 8, !tbaa !104
  %610 = getelementptr inbounds %struct.xpvgv, ptr %609, i64 0, i32 4
  %611 = load ptr, ptr %610, align 8, !tbaa !11
  %612 = getelementptr inbounds %struct.hek, ptr %611, i64 0, i32 2, i64 2
  br label %613

613:                                              ; preds = %608, %603
  %614 = phi ptr [ %612, %608 ], [ null, %603 ]
  %615 = call ptr @__errno_location() #22
  %616 = load i32, ptr %615, align 4, !tbaa !9
  %617 = call ptr @strerror(i32 noundef %616) #17
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.96, ptr noundef %614, ptr noundef %617) #17
  br label %618

618:                                              ; preds = %613, %599, %593
  %619 = call i32 @Perl_PerlIO_fileno(ptr noundef %594) #17
  %620 = icmp sgt i32 %619, -1
  br i1 %620, label %621, label %647

621:                                              ; preds = %618
  %622 = call i32 (i32, i32, ...) @fcntl64(i32 noundef %619, i32 noundef 2, i32 noundef 1) #17
  %623 = icmp slt i32 %622, 0
  br i1 %623, label %624, label %639

624:                                              ; preds = %621
  %625 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %626 = getelementptr inbounds %struct.cop, ptr %625, i64 0, i32 9
  %627 = load ptr, ptr %626, align 8, !tbaa !49
  %628 = icmp eq ptr %627, null
  br i1 %628, label %634, label %629

629:                                              ; preds = %624
  %630 = load ptr, ptr %627, align 8, !tbaa !104
  %631 = getelementptr inbounds %struct.xpvgv, ptr %630, i64 0, i32 4
  %632 = load ptr, ptr %631, align 8, !tbaa !11
  %633 = getelementptr inbounds %struct.hek, ptr %632, i64 0, i32 2, i64 2
  br label %634

634:                                              ; preds = %629, %624
  %635 = phi ptr [ %633, %629 ], [ null, %624 ]
  %636 = call ptr @__errno_location() #22
  %637 = load i32, ptr %636, align 4, !tbaa !9
  %638 = call ptr @strerror(i32 noundef %637) #17
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.96, ptr noundef %635, ptr noundef %638) #17
  br label %639

639:                                              ; preds = %634, %621
  %640 = call i32 @fstat64(i32 noundef %619, ptr noundef nonnull %6) #17
  %641 = icmp sgt i32 %640, -1
  br i1 %641, label %642, label %660

642:                                              ; preds = %639
  %643 = getelementptr inbounds %struct.stat, ptr %6, i64 0, i32 3
  %644 = load i32, ptr %643, align 8, !tbaa !110
  %645 = and i32 %644, 61440
  %646 = icmp eq i32 %645, 16384
  br i1 %646, label %647, label %660

647:                                              ; preds = %642, %618
  %648 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %649 = getelementptr inbounds %struct.cop, ptr %648, i64 0, i32 9
  %650 = load ptr, ptr %649, align 8, !tbaa !49
  %651 = icmp eq ptr %650, null
  br i1 %651, label %657, label %652

652:                                              ; preds = %647
  %653 = load ptr, ptr %650, align 8, !tbaa !104
  %654 = getelementptr inbounds %struct.xpvgv, ptr %653, i64 0, i32 4
  %655 = load ptr, ptr %654, align 8, !tbaa !11
  %656 = getelementptr inbounds %struct.hek, ptr %655, i64 0, i32 2, i64 2
  br label %657

657:                                              ; preds = %652, %647
  %658 = phi ptr [ %656, %652 ], [ null, %647 ]
  %659 = call ptr @strerror(i32 noundef 21) #17
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.96, ptr noundef %658, ptr noundef %659) #17
  br label %660

660:                                              ; preds = %657, %642, %639
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #17
  br i1 %595, label %661, label %663

661:                                              ; preds = %660, %590
  %662 = call ptr @Perl_PerlIO_stdin() #17
  br label %663

663:                                              ; preds = %661, %660
  %664 = phi i32 [ 0, %660 ], [ 16, %661 ]
  %665 = phi ptr [ %594, %660 ], [ %662, %661 ]
  %666 = call ptr @Perl_rsignal_state(i32 noundef 17) #17
  %667 = icmp eq ptr %666, inttoptr (i64 1 to ptr)
  br i1 %667, label %668, label %670

668:                                              ; preds = %663
  call void (i32, ptr, ...) @Perl_ck_warner(i32 noundef 26, ptr noundef nonnull @.str.68) #17
  %669 = call ptr @Perl_rsignal(i32 noundef 17, ptr noundef null) #17
  br label %670

670:                                              ; preds = %668, %663
  %671 = and i8 %484, 1
  %672 = icmp eq i8 %671, 0
  br i1 %672, label %751, label %673

673:                                              ; preds = %670
  %674 = call ptr @Perl_newSV_type(i32 noundef 3) #17
  %675 = or i32 %664, 8
  br label %676

676:                                              ; preds = %693, %673
  %677 = call ptr @Perl_sv_gets(ptr noundef %674, ptr noundef %665, i32 noundef 0) #17
  %678 = icmp eq ptr %677, null
  br i1 %678, label %679, label %680

679:                                              ; preds = %676
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.97) #17
  br label %680

680:                                              ; preds = %679, %676
  %681 = load i8, ptr %677, align 1, !tbaa !11
  %682 = icmp eq i8 %681, 35
  br i1 %682, label %683, label %693

683:                                              ; preds = %680
  %684 = getelementptr inbounds i8, ptr %677, i64 1
  %685 = load i8, ptr %684, align 1, !tbaa !11
  %686 = icmp eq i8 %685, 33
  br i1 %686, label %687, label %693

687:                                              ; preds = %683
  %688 = call ptr @Perl_instr(ptr noundef nonnull %677, ptr noundef nonnull @.str.98) #17
  %689 = icmp eq ptr %688, null
  br i1 %689, label %690, label %694

690:                                              ; preds = %687
  %691 = call ptr @Perl_instr(ptr noundef nonnull %677, ptr noundef nonnull @.str.99) #17
  %692 = icmp eq ptr %691, null
  br i1 %692, label %693, label %694

693:                                              ; preds = %690, %683, %680
  br label %676, !llvm.loop !113

694:                                              ; preds = %690, %687
  %695 = phi ptr [ %691, %690 ], [ %688, %687 ]
  %696 = call i32 @PerlIO_ungetc(ptr noundef %665, i32 noundef 10) #17
  %697 = load i8, ptr %695, align 1, !tbaa !11
  %698 = icmp eq i8 %697, 0
  br i1 %698, label %713, label %699

699:                                              ; preds = %694, %709
  %700 = phi i8 [ %711, %709 ], [ %697, %694 ]
  %701 = phi ptr [ %710, %709 ], [ %695, %694 ]
  %702 = zext i8 %700 to i64
  %703 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %702
  %704 = load i32, ptr %703, align 4, !tbaa !9
  %705 = and i32 %704, 17408
  %706 = icmp eq i32 %705, 17408
  %707 = icmp eq i8 %700, 35
  %708 = or i1 %707, %706
  br i1 %708, label %713, label %709

709:                                              ; preds = %699
  %710 = getelementptr inbounds i8, ptr %701, i64 1
  %711 = load i8, ptr %710, align 1, !tbaa !11
  %712 = icmp eq i8 %711, 0
  br i1 %712, label %713, label %699, !llvm.loop !114

713:                                              ; preds = %709, %699, %694
  %714 = phi i8 [ 0, %694 ], [ 0, %709 ], [ %700, %699 ]
  %715 = phi ptr [ %695, %694 ], [ %710, %709 ], [ %701, %699 ]
  br label %716

716:                                              ; preds = %719, %713
  %717 = phi i8 [ %714, %713 ], [ %721, %719 ]
  %718 = phi ptr [ %715, %713 ], [ %720, %719 ]
  switch i8 %717, label %722 [
    i8 32, label %719
    i8 9, label %719
  ]

719:                                              ; preds = %716, %716
  %720 = getelementptr inbounds i8, ptr %718, i64 1
  %721 = load i8, ptr %720, align 1, !tbaa !11
  br label %716, !llvm.loop !115

722:                                              ; preds = %716
  %723 = getelementptr inbounds i8, ptr %718, i64 1
  %724 = icmp eq i8 %717, 45
  br i1 %724, label %725, label %745

725:                                              ; preds = %722, %736
  %726 = phi ptr [ %727, %736 ], [ %715, %722 ]
  %727 = getelementptr inbounds i8, ptr %726, i64 -1
  %728 = load i8, ptr %727, align 1, !tbaa !11
  %729 = zext i8 %728 to i64
  %730 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %729
  %731 = load i32, ptr %730, align 4, !tbaa !9
  %732 = freeze i32 %731
  %733 = and i32 %732, 2
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %735, label %736

735:                                              ; preds = %725
  switch i8 %728, label %737 [
    i8 95, label %736
    i8 46, label %736
    i8 45, label %736
  ]

736:                                              ; preds = %735, %735, %735, %725
  br label %725, !llvm.loop !116

737:                                              ; preds = %735
  %738 = getelementptr inbounds i8, ptr %726, i64 -4
  %739 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %738, ptr noundef nonnull dereferenceable(5) @.str.98, i64 noundef 4) #21
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %741, label %745

741:                                              ; preds = %737, %741
  %742 = phi ptr [ %743, %741 ], [ %723, %737 ]
  %743 = call ptr @Perl_moreswitches(ptr noundef %742)
  %744 = icmp eq ptr %743, null
  br i1 %744, label %745, label %741, !llvm.loop !117

745:                                              ; preds = %741, %737, %722
  %746 = icmp eq ptr %483, null
  br i1 %746, label %751, label %747

747:                                              ; preds = %745
  %748 = call i32 @chdir(ptr noundef nonnull %483) #17
  %749 = icmp slt i32 %748, 0
  br i1 %749, label %750, label %751

750:                                              ; preds = %747
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.69, ptr noundef nonnull %483) #17
  br label %751

751:                                              ; preds = %750, %747, %745, %670
  %752 = phi ptr [ %674, %750 ], [ %674, %747 ], [ %674, %745 ], [ null, %670 ]
  %753 = phi i32 [ %675, %750 ], [ %675, %747 ], [ %675, %745 ], [ %664, %670 ]
  %754 = call ptr @Perl_newSV_type(i32 noundef 13) #17
  store ptr %754, ptr @PL_compcv, align 8, !tbaa !5
  store ptr %754, ptr @PL_main_cv, align 8, !tbaa !5
  %755 = load ptr, ptr %754, align 8, !tbaa !39
  %756 = getelementptr inbounds %struct.xpvcv, ptr %755, i64 0, i32 12
  %757 = load i32, ptr %756, align 4, !tbaa !118
  %758 = or i32 %757, 256
  store i32 %758, ptr %756, align 4, !tbaa !118
  %759 = call ptr @Perl_pad_new(i32 noundef 0) #17
  %760 = load ptr, ptr @PL_compcv, align 8, !tbaa !5
  %761 = load ptr, ptr %760, align 8, !tbaa !39
  %762 = getelementptr inbounds %struct.xpvcv, ptr %761, i64 0, i32 9
  store ptr %759, ptr %762, align 8, !tbaa !11
  %763 = call ptr @Perl_newSV_type(i32 noundef 12) #17
  store ptr %763, ptr @PL_isarev, align 8, !tbaa !5
  call void @Perl_boot_core_PerlIO() #17
  call void @Perl_boot_core_UNIVERSAL() #17
  call void @Perl_boot_core_mro() #17
  %764 = call ptr @Perl_newXS(ptr noundef nonnull @.str.70, ptr noundef nonnull @S_Internals_V, ptr noundef nonnull @.str.71) #17
  %765 = icmp eq ptr %1, null
  br i1 %765, label %767, label %766

766:                                              ; preds = %751
  call void %1() #17
  br label %767

767:                                              ; preds = %766, %751
  %768 = call ptr @Perl_gv_fetchpv(ptr noundef nonnull @.str.100, i32 noundef 1, i32 noundef 3) #17
  %769 = icmp eq ptr %768, null
  br i1 %769, label %774, label %770

770:                                              ; preds = %767
  %771 = getelementptr inbounds %struct.gv, ptr %768, i64 0, i32 3
  %772 = load ptr, ptr %771, align 8, !tbaa !11
  %773 = load ptr, ptr %772, align 8, !tbaa !108
  br label %774

774:                                              ; preds = %770, %767
  %775 = phi ptr [ %773, %770 ], [ null, %767 ]
  call void @Perl_sv_setpvn(ptr noundef %775, ptr noundef nonnull @.str.101, i64 noundef 1) #17
  %776 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.102, i64 noundef 1, i32 noundef 129, i32 noundef 3) #17
  %777 = icmp eq ptr %776, null
  br i1 %777, label %782, label %778

778:                                              ; preds = %774
  %779 = getelementptr inbounds %struct.sv, ptr %776, i64 0, i32 1
  %780 = load i32, ptr %779, align 8, !tbaa !20
  %781 = add i32 %780, 1
  store i32 %781, ptr %779, align 8, !tbaa !20
  br label %782

782:                                              ; preds = %778, %774
  store ptr %776, ptr @PL_ofsgv, align 8, !tbaa !5
  call void (ptr, i64, ...) @Perl_populate_isa(ptr noundef nonnull @.str.103, i64 noundef 13, ptr noundef nonnull @.str.104, i64 noundef 12, ptr noundef nonnull @.str.105, i64 noundef 14, ptr noundef nonnull @.str.106, i64 noundef 10, ptr noundef null)
  %783 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.107, i64 noundef 5, i32 noundef 129, i32 noundef 15) #17
  store ptr %783, ptr @PL_stdingv, align 8, !tbaa !5
  %784 = load ptr, ptr %783, align 8, !tbaa !104
  %785 = getelementptr inbounds %struct.xpvgv, ptr %784, i64 0, i32 2
  %786 = load i64, ptr %785, align 8, !tbaa !105
  %787 = or i64 %786, 2
  store i64 %787, ptr %785, align 8, !tbaa !105
  %788 = getelementptr inbounds %struct.gv, ptr %783, i64 0, i32 3
  %789 = load ptr, ptr %788, align 8, !tbaa !11
  %790 = getelementptr inbounds %struct.gp, ptr %789, i64 0, i32 1
  %791 = load ptr, ptr %790, align 8, !tbaa !88
  %792 = load ptr, ptr %791, align 8, !tbaa !90
  %793 = getelementptr inbounds %struct.xpvio, ptr %792, i64 0, i32 16
  store i8 60, ptr %793, align 8, !tbaa !120
  %794 = call ptr @Perl_PerlIO_stdin() #17
  %795 = getelementptr inbounds %struct.io, ptr %791, i64 0, i32 3
  store ptr %794, ptr %795, align 8, !tbaa !11
  %796 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.108, i64 noundef 5, i32 noundef 129, i32 noundef 3) #17
  %797 = load ptr, ptr %796, align 8, !tbaa !104
  %798 = getelementptr inbounds %struct.xpvgv, ptr %797, i64 0, i32 2
  %799 = load i64, ptr %798, align 8, !tbaa !105
  %800 = or i64 %799, 2
  store i64 %800, ptr %798, align 8, !tbaa !105
  %801 = getelementptr inbounds %struct.sv, ptr %791, i64 0, i32 1
  %802 = load i32, ptr %801, align 8, !tbaa !20
  %803 = add i32 %802, 1
  store i32 %803, ptr %801, align 8, !tbaa !20
  %804 = getelementptr inbounds %struct.gv, ptr %796, i64 0, i32 3
  %805 = load ptr, ptr %804, align 8, !tbaa !11
  %806 = getelementptr inbounds %struct.gp, ptr %805, i64 0, i32 1
  store ptr %791, ptr %806, align 8, !tbaa !88
  %807 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.109, i64 noundef 6, i32 noundef 129, i32 noundef 15) #17
  %808 = load ptr, ptr %807, align 8, !tbaa !104
  %809 = getelementptr inbounds %struct.xpvgv, ptr %808, i64 0, i32 2
  %810 = load i64, ptr %809, align 8, !tbaa !105
  %811 = or i64 %810, 2
  store i64 %811, ptr %809, align 8, !tbaa !105
  %812 = getelementptr inbounds %struct.gv, ptr %807, i64 0, i32 3
  %813 = load ptr, ptr %812, align 8, !tbaa !11
  %814 = getelementptr inbounds %struct.gp, ptr %813, i64 0, i32 1
  %815 = load ptr, ptr %814, align 8, !tbaa !88
  %816 = load ptr, ptr %815, align 8, !tbaa !90
  %817 = getelementptr inbounds %struct.xpvio, ptr %816, i64 0, i32 16
  store i8 62, ptr %817, align 8, !tbaa !120
  %818 = call ptr @Perl_PerlIO_stdout() #17
  %819 = getelementptr inbounds %struct.io, ptr %815, i64 0, i32 3
  store ptr %818, ptr %819, align 8, !tbaa !11
  %820 = load ptr, ptr %815, align 8, !tbaa !90
  %821 = getelementptr inbounds %struct.xpvio, ptr %820, i64 0, i32 5
  store ptr %818, ptr %821, align 8, !tbaa !92
  call void @Perl_setdefout(ptr noundef nonnull %807) #17
  %822 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.110, i64 noundef 6, i32 noundef 129, i32 noundef 3) #17
  %823 = load ptr, ptr %822, align 8, !tbaa !104
  %824 = getelementptr inbounds %struct.xpvgv, ptr %823, i64 0, i32 2
  %825 = load i64, ptr %824, align 8, !tbaa !105
  %826 = or i64 %825, 2
  store i64 %826, ptr %824, align 8, !tbaa !105
  %827 = getelementptr inbounds %struct.sv, ptr %815, i64 0, i32 1
  %828 = load i32, ptr %827, align 8, !tbaa !20
  %829 = add i32 %828, 1
  store i32 %829, ptr %827, align 8, !tbaa !20
  %830 = getelementptr inbounds %struct.gv, ptr %822, i64 0, i32 3
  %831 = load ptr, ptr %830, align 8, !tbaa !11
  %832 = getelementptr inbounds %struct.gp, ptr %831, i64 0, i32 1
  store ptr %815, ptr %832, align 8, !tbaa !88
  %833 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.111, i64 noundef 6, i32 noundef 129, i32 noundef 15) #17
  store ptr %833, ptr @PL_stderrgv, align 8, !tbaa !5
  %834 = load ptr, ptr %833, align 8, !tbaa !104
  %835 = getelementptr inbounds %struct.xpvgv, ptr %834, i64 0, i32 2
  %836 = load i64, ptr %835, align 8, !tbaa !105
  %837 = or i64 %836, 2
  store i64 %837, ptr %835, align 8, !tbaa !105
  %838 = getelementptr inbounds %struct.gv, ptr %833, i64 0, i32 3
  %839 = load ptr, ptr %838, align 8, !tbaa !11
  %840 = getelementptr inbounds %struct.gp, ptr %839, i64 0, i32 1
  %841 = load ptr, ptr %840, align 8, !tbaa !88
  %842 = load ptr, ptr %841, align 8, !tbaa !90
  %843 = getelementptr inbounds %struct.xpvio, ptr %842, i64 0, i32 16
  store i8 62, ptr %843, align 8, !tbaa !120
  %844 = call ptr @Perl_PerlIO_stderr() #17
  %845 = getelementptr inbounds %struct.io, ptr %841, i64 0, i32 3
  store ptr %844, ptr %845, align 8, !tbaa !11
  %846 = load ptr, ptr %841, align 8, !tbaa !90
  %847 = getelementptr inbounds %struct.xpvio, ptr %846, i64 0, i32 5
  store ptr %844, ptr %847, align 8, !tbaa !92
  %848 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.112, i64 noundef 6, i32 noundef 129, i32 noundef 3) #17
  %849 = load ptr, ptr %848, align 8, !tbaa !104
  %850 = getelementptr inbounds %struct.xpvgv, ptr %849, i64 0, i32 2
  %851 = load i64, ptr %850, align 8, !tbaa !105
  %852 = or i64 %851, 2
  store i64 %852, ptr %850, align 8, !tbaa !105
  %853 = getelementptr inbounds %struct.sv, ptr %841, i64 0, i32 1
  %854 = load i32, ptr %853, align 8, !tbaa !20
  %855 = add i32 %854, 1
  store i32 %855, ptr %853, align 8, !tbaa !20
  %856 = getelementptr inbounds %struct.gv, ptr %848, i64 0, i32 3
  %857 = load ptr, ptr %856, align 8, !tbaa !11
  %858 = getelementptr inbounds %struct.gp, ptr %857, i64 0, i32 1
  store ptr %841, ptr %858, align 8, !tbaa !88
  %859 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %859, ptr @PL_statname, align 8, !tbaa !5
  %860 = load i8, ptr @PL_do_undump, align 1, !tbaa !14, !range !28, !noundef !29
  %861 = icmp eq i8 %860, 0
  br i1 %861, label %862, label %863

862:                                              ; preds = %782
  call fastcc void @S_init_postdump_symbols(i32 noundef %501, ptr noundef nonnull %499, ptr noundef %4)
  br label %863

863:                                              ; preds = %862, %782
  %864 = load i32, ptr @PL_unicode, align 4, !tbaa !9
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %995, label %866

866:                                              ; preds = %863
  %867 = and i32 %864, 64
  %868 = icmp ne i32 %867, 0
  %869 = load i8, ptr @PL_utf8locale, align 1, !range !28
  %870 = icmp eq i8 %869, 0
  %871 = select i1 %868, i1 %870, i1 false
  br i1 %871, label %995, label %872

872:                                              ; preds = %866
  %873 = and i32 %864, 1
  %874 = icmp ne i32 %873, 0
  %875 = load ptr, ptr @PL_stdingv, align 8
  %876 = icmp ne ptr %875, null
  %877 = select i1 %874, i1 %876, i1 false
  br i1 %877, label %878, label %903

878:                                              ; preds = %872
  %879 = getelementptr inbounds %struct.sv, ptr %875, i64 0, i32 2
  %880 = load i32, ptr %879, align 4, !tbaa !18
  %881 = and i32 %880, 255
  %882 = add nsw i32 %881, -9
  %883 = icmp ult i32 %882, 2
  br i1 %883, label %884, label %903

884:                                              ; preds = %878
  %885 = getelementptr inbounds %struct.gv, ptr %875, i64 0, i32 3
  %886 = load ptr, ptr %885, align 8, !tbaa !11
  %887 = icmp eq ptr %886, null
  br i1 %887, label %903, label %888

888:                                              ; preds = %884
  %889 = getelementptr inbounds %struct.gp, ptr %886, i64 0, i32 1
  %890 = load ptr, ptr %889, align 8, !tbaa !88
  %891 = icmp eq ptr %890, null
  br i1 %891, label %903, label %892

892:                                              ; preds = %888
  %893 = getelementptr inbounds %struct.io, ptr %890, i64 0, i32 3
  %894 = load ptr, ptr %893, align 8, !tbaa !11
  %895 = icmp eq ptr %894, null
  br i1 %895, label %903, label %896

896:                                              ; preds = %892
  %897 = load ptr, ptr %890, align 8, !tbaa !90
  %898 = getelementptr inbounds %struct.xpvio, ptr %897, i64 0, i32 16
  %899 = load i8, ptr %898, align 8, !tbaa !120
  %900 = sext i8 %899 to i32
  %901 = call i32 @PerlIO_binmode(ptr noundef nonnull %894, i32 noundef %900, i32 noundef 0, ptr noundef nonnull @.str.72) #17
  %902 = load i32, ptr @PL_unicode, align 4, !tbaa !9
  br label %903

903:                                              ; preds = %896, %892, %888, %884, %878, %872
  %904 = phi i32 [ %864, %878 ], [ %864, %884 ], [ %902, %896 ], [ %864, %892 ], [ %864, %888 ], [ %864, %872 ]
  %905 = and i32 %904, 2
  %906 = icmp ne i32 %905, 0
  %907 = load ptr, ptr @PL_defoutgv, align 8
  %908 = icmp ne ptr %907, null
  %909 = select i1 %906, i1 %908, i1 false
  br i1 %909, label %910, label %935

910:                                              ; preds = %903
  %911 = getelementptr inbounds %struct.sv, ptr %907, i64 0, i32 2
  %912 = load i32, ptr %911, align 4, !tbaa !18
  %913 = and i32 %912, 255
  %914 = add nsw i32 %913, -9
  %915 = icmp ult i32 %914, 2
  br i1 %915, label %916, label %935

916:                                              ; preds = %910
  %917 = getelementptr inbounds %struct.gv, ptr %907, i64 0, i32 3
  %918 = load ptr, ptr %917, align 8, !tbaa !11
  %919 = icmp eq ptr %918, null
  br i1 %919, label %935, label %920

920:                                              ; preds = %916
  %921 = getelementptr inbounds %struct.gp, ptr %918, i64 0, i32 1
  %922 = load ptr, ptr %921, align 8, !tbaa !88
  %923 = icmp eq ptr %922, null
  br i1 %923, label %935, label %924

924:                                              ; preds = %920
  %925 = load ptr, ptr %922, align 8, !tbaa !90
  %926 = getelementptr inbounds %struct.xpvio, ptr %925, i64 0, i32 5
  %927 = load ptr, ptr %926, align 8, !tbaa !92
  %928 = icmp eq ptr %927, null
  br i1 %928, label %935, label %929

929:                                              ; preds = %924
  %930 = getelementptr inbounds %struct.xpvio, ptr %925, i64 0, i32 16
  %931 = load i8, ptr %930, align 8, !tbaa !120
  %932 = sext i8 %931 to i32
  %933 = call i32 @PerlIO_binmode(ptr noundef nonnull %927, i32 noundef %932, i32 noundef 0, ptr noundef nonnull @.str.72) #17
  %934 = load i32, ptr @PL_unicode, align 4, !tbaa !9
  br label %935

935:                                              ; preds = %929, %924, %920, %916, %910, %903
  %936 = phi i32 [ %904, %910 ], [ %904, %916 ], [ %934, %929 ], [ %904, %924 ], [ %904, %920 ], [ %904, %903 ]
  %937 = and i32 %936, 4
  %938 = icmp ne i32 %937, 0
  %939 = load ptr, ptr @PL_stderrgv, align 8
  %940 = icmp ne ptr %939, null
  %941 = select i1 %938, i1 %940, i1 false
  br i1 %941, label %942, label %967

942:                                              ; preds = %935
  %943 = getelementptr inbounds %struct.sv, ptr %939, i64 0, i32 2
  %944 = load i32, ptr %943, align 4, !tbaa !18
  %945 = and i32 %944, 255
  %946 = add nsw i32 %945, -9
  %947 = icmp ult i32 %946, 2
  br i1 %947, label %948, label %967

948:                                              ; preds = %942
  %949 = getelementptr inbounds %struct.gv, ptr %939, i64 0, i32 3
  %950 = load ptr, ptr %949, align 8, !tbaa !11
  %951 = icmp eq ptr %950, null
  br i1 %951, label %967, label %952

952:                                              ; preds = %948
  %953 = getelementptr inbounds %struct.gp, ptr %950, i64 0, i32 1
  %954 = load ptr, ptr %953, align 8, !tbaa !88
  %955 = icmp eq ptr %954, null
  br i1 %955, label %967, label %956

956:                                              ; preds = %952
  %957 = load ptr, ptr %954, align 8, !tbaa !90
  %958 = getelementptr inbounds %struct.xpvio, ptr %957, i64 0, i32 5
  %959 = load ptr, ptr %958, align 8, !tbaa !92
  %960 = icmp eq ptr %959, null
  br i1 %960, label %967, label %961

961:                                              ; preds = %956
  %962 = getelementptr inbounds %struct.xpvio, ptr %957, i64 0, i32 16
  %963 = load i8, ptr %962, align 8, !tbaa !120
  %964 = sext i8 %963 to i32
  %965 = call i32 @PerlIO_binmode(ptr noundef nonnull %959, i32 noundef %964, i32 noundef 0, ptr noundef nonnull @.str.72) #17
  %966 = load i32, ptr @PL_unicode, align 4, !tbaa !9
  br label %967

967:                                              ; preds = %961, %956, %952, %948, %942, %935
  %968 = phi i32 [ %936, %942 ], [ %936, %948 ], [ %966, %961 ], [ %936, %956 ], [ %936, %952 ], [ %936, %935 ]
  %969 = and i32 %968, 24
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %995, label %971

971:                                              ; preds = %967
  %972 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.73, i64 noundef 4, i32 noundef 129, i32 noundef 3) #17
  %973 = getelementptr inbounds %struct.gv, ptr %972, i64 0, i32 3
  %974 = load ptr, ptr %973, align 8, !tbaa !11
  %975 = load ptr, ptr %974, align 8, !tbaa !108
  %976 = icmp eq ptr %975, null
  br i1 %976, label %995, label %977

977:                                              ; preds = %971
  %978 = load i32, ptr @PL_unicode, align 4, !tbaa !9
  %979 = and i32 %978, 8
  %980 = and i32 %978, 16
  %981 = icmp eq i32 %979, 0
  %982 = icmp eq i32 %980, 0
  br i1 %981, label %986, label %983

983:                                              ; preds = %977
  br i1 %982, label %985, label %984

984:                                              ; preds = %983
  call void @Perl_sv_setpvn(ptr noundef nonnull %975, ptr noundef nonnull @.str.74, i64 noundef 11) #17
  br label %988

985:                                              ; preds = %983
  call void @Perl_sv_setpvn(ptr noundef nonnull %975, ptr noundef nonnull @.str.75, i64 noundef 6) #17
  br label %988

986:                                              ; preds = %977
  br i1 %982, label %988, label %987

987:                                              ; preds = %986
  call void @Perl_sv_setpvn(ptr noundef nonnull %975, ptr noundef nonnull @.str.76, i64 noundef 6) #17
  br label %988

988:                                              ; preds = %987, %986, %985, %984
  %989 = getelementptr inbounds %struct.sv, ptr %975, i64 0, i32 2
  %990 = load i32, ptr %989, align 4, !tbaa !18
  %991 = and i32 %990, 4194304
  %992 = icmp eq i32 %991, 0
  br i1 %992, label %995, label %993

993:                                              ; preds = %988
  %994 = call i32 @Perl_mg_set(ptr noundef nonnull %975) #17
  br label %995

995:                                              ; preds = %993, %988, %971, %967, %866, %863
  call void @Perl_lex_start(ptr noundef %752, ptr noundef %665, i32 noundef %753) #17
  %996 = icmp eq ptr %752, null
  br i1 %996, label %1004, label %997

997:                                              ; preds = %995
  %998 = getelementptr inbounds %struct.sv, ptr %752, i64 0, i32 1
  %999 = load i32, ptr %998, align 8, !tbaa !20
  %1000 = icmp ugt i32 %999, 1
  br i1 %1000, label %1001, label %1003

1001:                                             ; preds = %997
  %1002 = add i32 %999, -1
  store i32 %1002, ptr %998, align 8, !tbaa !20
  br label %1004

1003:                                             ; preds = %997
  call void @Perl_sv_free2(ptr noundef nonnull %752, i32 noundef %999) #17
  br label %1004

1004:                                             ; preds = %1003, %1001, %995
  %1005 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.77, i64 noundef 4) #17
  store ptr %1005, ptr @PL_subname, align 8, !tbaa !5
  %1006 = and i8 %482, 1
  %1007 = icmp eq i8 %1006, 0
  br i1 %1007, label %1010, label %1008

1008:                                             ; preds = %1004
  %1009 = call ptr @Perl_filter_add(ptr noundef nonnull @read_e_script, ptr noundef null) #17
  br label %1010

1010:                                             ; preds = %1008, %1004
  %1011 = call ptr @__errno_location() #22
  store i32 0, ptr %1011, align 4, !tbaa !9
  %1012 = call i32 @Perl_yyparse(i32 noundef 258) #17
  %1013 = icmp eq i32 %1012, 0
  br i1 %1013, label %1014, label %1019

1014:                                             ; preds = %1010
  %1015 = load ptr, ptr @PL_parser, align 8, !tbaa !5
  %1016 = getelementptr inbounds %struct.yy_parser, ptr %1015, i64 0, i32 44
  %1017 = load i8, ptr %1016, align 1, !tbaa !121
  %1018 = icmp eq i8 %1017, 0
  br i1 %1018, label %1024, label %1019

1019:                                             ; preds = %1014, %1010
  %1020 = load i8, ptr @PL_minus_c, align 1, !tbaa !14, !range !28, !noundef !29
  %1021 = icmp eq i8 %1020, 0
  %1022 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  %1023 = select i1 %1021, ptr @.str.79, ptr @.str.78
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull %1023, ptr noundef %1022) #17
  br label %1024

1024:                                             ; preds = %1019, %1014
  %1025 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %1026 = getelementptr inbounds %struct.cop, ptr %1025, i64 0, i32 7
  store i32 0, ptr %1026, align 4, !tbaa !80
  %1027 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %1028 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %1029 = icmp eq ptr %1027, %1028
  br i1 %1029, label %1048, label %1030

1030:                                             ; preds = %1024
  %1031 = icmp eq ptr %1027, null
  br i1 %1031, label %1040, label %1032

1032:                                             ; preds = %1030
  %1033 = getelementptr inbounds %struct.sv, ptr %1027, i64 0, i32 1
  %1034 = load i32, ptr %1033, align 8, !tbaa !20
  %1035 = icmp ugt i32 %1034, 1
  br i1 %1035, label %1036, label %1038

1036:                                             ; preds = %1032
  %1037 = add i32 %1034, -1
  store i32 %1037, ptr %1033, align 8, !tbaa !20
  br label %1040

1038:                                             ; preds = %1032
  call void @Perl_sv_free2(ptr noundef nonnull %1027, i32 noundef %1034) #17
  %1039 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %1040

1040:                                             ; preds = %1038, %1036, %1030
  %1041 = phi ptr [ %1028, %1030 ], [ %1039, %1038 ], [ %1028, %1036 ]
  %1042 = icmp eq ptr %1041, null
  br i1 %1042, label %1047, label %1043

1043:                                             ; preds = %1040
  %1044 = getelementptr inbounds %struct.sv, ptr %1041, i64 0, i32 1
  %1045 = load i32, ptr %1044, align 8, !tbaa !20
  %1046 = add i32 %1045, 1
  store i32 %1046, ptr %1044, align 8, !tbaa !20
  br label %1047

1047:                                             ; preds = %1043, %1040
  store ptr %1041, ptr @PL_curstash, align 8, !tbaa !5
  br label %1048

1048:                                             ; preds = %1047, %1024
  %1049 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %1050 = icmp eq ptr %1049, null
  br i1 %1050, label %1059, label %1051

1051:                                             ; preds = %1048
  %1052 = getelementptr inbounds %struct.sv, ptr %1049, i64 0, i32 1
  %1053 = load i32, ptr %1052, align 8, !tbaa !20
  %1054 = icmp ugt i32 %1053, 1
  br i1 %1054, label %1055, label %1057

1055:                                             ; preds = %1051
  %1056 = add i32 %1053, -1
  store i32 %1056, ptr %1052, align 8, !tbaa !20
  br label %1058

1057:                                             ; preds = %1051
  call void @Perl_sv_free2(ptr noundef nonnull %1049, i32 noundef %1053) #17
  br label %1058

1058:                                             ; preds = %1057, %1055
  store ptr null, ptr @PL_e_script, align 8, !tbaa !5
  br label %1059

1059:                                             ; preds = %1058, %1048
  %1060 = load i8, ptr @PL_dowarn, align 1, !tbaa !11
  %1061 = and i8 %1060, 9
  %1062 = icmp eq i8 %1061, 0
  br i1 %1062, label %1069, label %1063

1063:                                             ; preds = %1059
  %1064 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %1065 = getelementptr inbounds %struct.cop, ptr %1064, i64 0, i32 9
  call void @Perl_save_sptr(ptr noundef nonnull %1065) #17
  %1066 = load ptr, ptr @PL_curcop, align 8, !tbaa !5
  %1067 = getelementptr inbounds %struct.cop, ptr %1066, i64 0, i32 7
  call void @Perl_save_I32(ptr noundef nonnull %1067) #17
  %1068 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  call void @Perl_gv_check(ptr noundef %1068) #17
  br label %1069

1069:                                             ; preds = %1063, %1059
  call void @Perl_pop_scope() #17
  %1070 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %1071 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %1072 = icmp sgt i64 %1070, %1071
  br i1 %1072, label %1073, label %1074

1073:                                             ; preds = %1069
  call void @Perl_free_tmps() #17
  br label %1074

1074:                                             ; preds = %1069, %1073
  call void @Perl_push_scope() #17
  store ptr null, ptr @PL_restartjmpenv, align 8, !tbaa !5
  store ptr null, ptr @PL_restartop, align 8, !tbaa !5
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9)
  %1075 = load ptr, ptr @PL_unitcheckav, align 8, !tbaa !5
  %1076 = icmp eq ptr %1075, null
  br i1 %1076, label %1078, label %1077

1077:                                             ; preds = %1074
  call void @Perl_call_list(i32 noundef %164, ptr noundef nonnull %1075)
  br label %1078

1078:                                             ; preds = %1077, %1074
  %1079 = load ptr, ptr @PL_checkav, align 8, !tbaa !5
  %1080 = icmp eq ptr %1079, null
  br i1 %1080, label %1150, label %1081

1081:                                             ; preds = %1078
  store i32 2, ptr @PL_phase, align 4, !tbaa !11
  call void @Perl_call_list(i32 noundef %164, ptr noundef nonnull %1079)
  br label %1150

1082:                                             ; preds = %162
  store i32 1, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 1, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  br label %1083

1083:                                             ; preds = %162, %1082
  %1084 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %1085 = icmp sgt i32 %1084, %164
  br i1 %1085, label %1086, label %1089

1086:                                             ; preds = %1083, %1086
  call void @Perl_pop_scope() #17
  %1087 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %1088 = icmp sgt i32 %1087, %164
  br i1 %1088, label %1086, label %1089, !llvm.loop !122

1089:                                             ; preds = %1086, %1083
  %1090 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %1091 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %1092 = icmp sgt i64 %1090, %1091
  br i1 %1092, label %1093, label %1094

1093:                                             ; preds = %1089
  call void @Perl_free_tmps() #17
  br label %1094

1094:                                             ; preds = %1093, %1089
  %1095 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %1096 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %1097 = icmp eq ptr %1095, %1096
  br i1 %1097, label %1116, label %1098

1098:                                             ; preds = %1094
  %1099 = icmp eq ptr %1095, null
  br i1 %1099, label %1108, label %1100

1100:                                             ; preds = %1098
  %1101 = getelementptr inbounds %struct.sv, ptr %1095, i64 0, i32 1
  %1102 = load i32, ptr %1101, align 8, !tbaa !20
  %1103 = icmp ugt i32 %1102, 1
  br i1 %1103, label %1104, label %1106

1104:                                             ; preds = %1100
  %1105 = add i32 %1102, -1
  store i32 %1105, ptr %1101, align 8, !tbaa !20
  br label %1108

1106:                                             ; preds = %1100
  call void @Perl_sv_free2(ptr noundef nonnull %1095, i32 noundef %1102) #17
  %1107 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %1108

1108:                                             ; preds = %1104, %1106, %1098
  %1109 = phi ptr [ %1096, %1098 ], [ %1107, %1106 ], [ %1096, %1104 ]
  %1110 = icmp eq ptr %1109, null
  br i1 %1110, label %1115, label %1111

1111:                                             ; preds = %1108
  %1112 = getelementptr inbounds %struct.sv, ptr %1109, i64 0, i32 1
  %1113 = load i32, ptr %1112, align 8, !tbaa !20
  %1114 = add i32 %1113, 1
  store i32 %1114, ptr %1112, align 8, !tbaa !20
  br label %1115

1115:                                             ; preds = %1108, %1111
  store ptr %1109, ptr @PL_curstash, align 8, !tbaa !5
  br label %1116

1116:                                             ; preds = %1115, %1094
  %1117 = load ptr, ptr @PL_unitcheckav, align 8, !tbaa !5
  %1118 = icmp eq ptr %1117, null
  br i1 %1118, label %1120, label %1119

1119:                                             ; preds = %1116
  call void @Perl_call_list(i32 noundef %164, ptr noundef nonnull %1117)
  br label %1120

1120:                                             ; preds = %1119, %1116
  %1121 = load ptr, ptr @PL_checkav, align 8, !tbaa !5
  %1122 = icmp eq ptr %1121, null
  br i1 %1122, label %1124, label %1123

1123:                                             ; preds = %1120
  store i32 2, ptr @PL_phase, align 4, !tbaa !11
  call void @Perl_call_list(i32 noundef %164, ptr noundef nonnull %1121)
  br label %1124

1124:                                             ; preds = %1123, %1120
  %1125 = load i32, ptr @PL_statusvalue, align 4, !tbaa !9
  br label %1150

1126:                                             ; preds = %162
  %1127 = load ptr, ptr @PL_stderrgv, align 8, !tbaa !5
  %1128 = icmp eq ptr %1127, null
  br i1 %1128, label %1145, label %1129

1129:                                             ; preds = %1126
  %1130 = getelementptr inbounds %struct.gv, ptr %1127, i64 0, i32 2
  %1131 = load i32, ptr %1130, align 4, !tbaa !86
  %1132 = and i32 %1131, 255
  %1133 = icmp eq i32 %1132, 9
  br i1 %1133, label %1134, label %1145

1134:                                             ; preds = %1129
  %1135 = getelementptr inbounds %struct.gv, ptr %1127, i64 0, i32 3
  %1136 = load ptr, ptr %1135, align 8, !tbaa !11
  %1137 = getelementptr inbounds %struct.gp, ptr %1136, i64 0, i32 1
  %1138 = load ptr, ptr %1137, align 8, !tbaa !88
  %1139 = icmp eq ptr %1138, null
  br i1 %1139, label %1145, label %1140

1140:                                             ; preds = %1134
  %1141 = load ptr, ptr %1138, align 8, !tbaa !90
  %1142 = getelementptr inbounds %struct.xpvio, ptr %1141, i64 0, i32 5
  %1143 = load ptr, ptr %1142, align 8, !tbaa !92
  %1144 = icmp eq ptr %1143, null
  br i1 %1144, label %1145, label %1147

1145:                                             ; preds = %1140, %1134, %1129, %1126
  %1146 = call ptr @Perl_PerlIO_stderr() #17
  br label %1147

1147:                                             ; preds = %1140, %1145
  %1148 = phi ptr [ %1146, %1145 ], [ %1143, %1140 ]
  %1149 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %1148, ptr noundef nonnull @.str.12) #17
  br label %1150

1150:                                             ; preds = %1078, %1081, %1124, %1147, %162
  %1151 = phi i32 [ %167, %162 ], [ 1, %1147 ], [ %1125, %1124 ], [ 0, %1081 ], [ 0, %1078 ]
  %1152 = load ptr, ptr %166, align 8, !tbaa !30
  store ptr %1152, ptr @PL_top_env, align 8, !tbaa !5
  br label %1153

1153:                                             ; preds = %1150, %131
  %1154 = phi i32 [ 0, %131 ], [ %1151, %1150 ]
  call void @llvm.lifetime.end.p0(i64 216, ptr nonnull %10) #17
  ret i32 %1154
}

declare void @Perl_my_setenv(ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @Perl_savepv(ptr noundef) local_unnamed_addr #2

declare void @Perl_set_caret_X() local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_init_postdump_symbols(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef readonly %2) unnamed_addr #0 {
  %4 = tail call ptr @Perl_newSV_type(i32 noundef 5) #17
  store ptr %4, ptr @PL_toptarget, align 8, !tbaa !5
  tail call void @Perl_sv_setpvn(ptr noundef %4, ptr noundef nonnull @.str.1, i64 noundef 0) #17
  %5 = tail call ptr @Perl_newSV_type(i32 noundef 5) #17
  store ptr %5, ptr @PL_bodytarget, align 8, !tbaa !5
  tail call void @Perl_sv_setpvn(ptr noundef %5, ptr noundef nonnull @.str.1, i64 noundef 0) #17
  %6 = load ptr, ptr @PL_bodytarget, align 8, !tbaa !5
  store ptr %6, ptr @PL_formtarget, align 8, !tbaa !5
  store i8 1, ptr @PL_tainted, align 1, !tbaa !14
  tail call void @Perl_init_argv_symbols(i32 noundef %0, ptr noundef %1)
  %7 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.124, i64 noundef 1, i32 noundef 129, i32 noundef 3) #17
  %8 = icmp eq ptr %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.gv, ptr %7, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !11
  %12 = load ptr, ptr %11, align 8, !tbaa !108
  %13 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  tail call void @Perl_sv_setpv(ptr noundef %12, ptr noundef %13) #17
  br label %14

14:                                               ; preds = %9, %3
  %15 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.125, i64 noundef 3, i32 noundef 129, i32 noundef 12) #17
  store ptr %15, ptr @PL_envgv, align 8, !tbaa !5
  %16 = icmp eq ptr %15, null
  br i1 %16, label %88, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.sv, ptr %15, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !20
  %20 = add i32 %19, 1
  store i32 %20, ptr %18, align 8, !tbaa !20
  %21 = load ptr, ptr %15, align 8, !tbaa !104
  %22 = getelementptr inbounds %struct.xpvgv, ptr %21, i64 0, i32 2
  %23 = load i64, ptr %22, align 8, !tbaa !105
  %24 = or i64 %23, 2
  store i64 %24, ptr %22, align 8, !tbaa !105
  %25 = getelementptr inbounds %struct.gv, ptr %15, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !11
  %27 = getelementptr inbounds %struct.gp, ptr %26, i64 0, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !102
  %29 = icmp eq ptr %28, null
  br i1 %29, label %30, label %36

30:                                               ; preds = %17
  %31 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %15, i32 noundef 12) #17
  %32 = getelementptr inbounds %struct.gv, ptr %31, i64 0, i32 3
  %33 = load ptr, ptr %32, align 8, !tbaa !11
  %34 = getelementptr inbounds %struct.gp, ptr %33, i64 0, i32 5
  %35 = load ptr, ptr %34, align 8, !tbaa !102
  br label %36

36:                                               ; preds = %17, %30
  %37 = phi ptr [ %35, %30 ], [ %28, %17 ]
  tail call void @Perl_sv_magic(ptr noundef %37, ptr noundef null, i32 noundef 69, ptr noundef null, i32 noundef 0) #17
  %38 = icmp eq ptr %2, null
  %39 = load ptr, ptr @environ, align 8
  %40 = select i1 %38, ptr %39, ptr %2
  %41 = icmp eq ptr %40, %39
  br i1 %41, label %43, label %42

42:                                               ; preds = %36
  store ptr null, ptr %39, align 8, !tbaa !5
  br label %43

43:                                               ; preds = %42, %36
  %44 = icmp eq ptr %40, null
  br i1 %44, label %88, label %45

45:                                               ; preds = %43
  %46 = load ptr, ptr %40, align 8, !tbaa !5
  %47 = icmp eq ptr %46, null
  br i1 %47, label %88, label %48

48:                                               ; preds = %45
  br i1 %41, label %49, label %68

49:                                               ; preds = %48, %64
  %50 = phi ptr [ %66, %64 ], [ %46, %48 ]
  %51 = phi ptr [ %65, %64 ], [ %39, %48 ]
  %52 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %50, i32 noundef 61) #21
  %53 = icmp eq ptr %52, null
  %54 = icmp eq ptr %52, %50
  %55 = or i1 %53, %54
  br i1 %55, label %64, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds i8, ptr %52, i64 1
  %58 = tail call ptr @Perl_newSVpv(ptr noundef nonnull %57, i64 noundef 0) #17
  %59 = ptrtoint ptr %52 to i64
  %60 = ptrtoint ptr %50 to i64
  %61 = sub i64 %59, %60
  %62 = trunc i64 %61 to i32
  %63 = tail call ptr @Perl_hv_common_key_len(ptr noundef %37, ptr noundef nonnull %50, i32 noundef %62, i32 noundef 36, ptr noundef %58, i32 noundef 0) #17
  br label %64

64:                                               ; preds = %56, %49
  %65 = getelementptr inbounds ptr, ptr %51, i64 1
  %66 = load ptr, ptr %65, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %88, label %49, !llvm.loop !123

68:                                               ; preds = %48, %84
  %69 = phi ptr [ %86, %84 ], [ %46, %48 ]
  %70 = phi ptr [ %85, %84 ], [ %40, %48 ]
  %71 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %69, i32 noundef 61) #21
  %72 = icmp eq ptr %71, null
  %73 = icmp eq ptr %71, %69
  %74 = or i1 %72, %73
  br i1 %74, label %84, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds i8, ptr %71, i64 1
  %77 = tail call ptr @Perl_newSVpv(ptr noundef nonnull %76, i64 noundef 0) #17
  %78 = ptrtoint ptr %71 to i64
  %79 = ptrtoint ptr %69 to i64
  %80 = sub i64 %78, %79
  %81 = trunc i64 %80 to i32
  %82 = tail call ptr @Perl_hv_common_key_len(ptr noundef %37, ptr noundef nonnull %69, i32 noundef %81, i32 noundef 36, ptr noundef %77, i32 noundef 0) #17
  %83 = tail call i32 @Perl_mg_set(ptr noundef %77) #17
  br label %84

84:                                               ; preds = %75, %68
  %85 = getelementptr inbounds ptr, ptr %70, i64 1
  %86 = load ptr, ptr %85, align 8, !tbaa !5
  %87 = icmp eq ptr %86, null
  br i1 %87, label %88, label %68, !llvm.loop !123

88:                                               ; preds = %84, %64, %45, %43, %14
  store i8 0, ptr @PL_tainted, align 1, !tbaa !14
  %89 = load i8, ptr @PL_minus_a, align 1, !tbaa !14, !range !28, !noundef !29
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %100, label %91

91:                                               ; preds = %88
  %92 = tail call ptr @Perl_gv_fetchpv(ptr noundef nonnull @.str.126, i32 noundef 3, i32 noundef 11) #17
  %93 = getelementptr inbounds %struct.gv, ptr %92, i64 0, i32 3
  %94 = load ptr, ptr %93, align 8, !tbaa !11
  %95 = getelementptr inbounds %struct.gp, ptr %94, i64 0, i32 6
  %96 = load ptr, ptr %95, align 8, !tbaa !124
  %97 = icmp eq ptr %96, null
  br i1 %97, label %98, label %100

98:                                               ; preds = %91
  %99 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %92, i32 noundef 11) #17
  br label %100

100:                                              ; preds = %98, %91, %88
  ret void
}

; Function Attrs: nounwind
declare i64 @time(ptr noundef) local_unnamed_addr #1

declare i32 @PerlIO_printf(ptr noundef, ptr noundef, ...) local_unnamed_addr #2

declare ptr @Perl_PerlIO_stderr() local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @perl_run(ptr nocapture noundef readnone %0) local_unnamed_addr #0 {
  %2 = alloca %struct.jmpenv, align 8
  call void @llvm.lifetime.start.p0(i64 216, ptr nonnull %2) #17
  %3 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %4 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.jmpenv, ptr %2, i64 0, i32 1
  store ptr %4, ptr %5, align 8, !tbaa !30
  %6 = call i32 @__sigsetjmp(ptr noundef nonnull %2, i32 noundef 0) #19
  %7 = getelementptr inbounds %struct.jmpenv, ptr %2, i64 0, i32 2
  store i32 %6, ptr %7, align 8, !tbaa !32
  store ptr %2, ptr @PL_top_env, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.jmpenv, ptr %2, i64 0, i32 3
  store i8 0, ptr %8, align 4, !tbaa !33
  switch i32 %6, label %211 [
    i32 1, label %12
    i32 0, label %15
    i32 2, label %9
    i32 3, label %144
  ]

9:                                                ; preds = %1
  %10 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %11 = icmp sgt i32 %10, %3
  br i1 %11, label %101, label %104

12:                                               ; preds = %1
  %13 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %14 = getelementptr inbounds %struct.stackinfo, ptr %13, i64 0, i32 4
  store i32 -1, ptr %14, align 8, !tbaa !56
  br label %15

15:                                               ; preds = %158, %147, %1, %12
  %16 = load ptr, ptr @PL_restartop, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  store i32 4, ptr @PL_phase, align 4, !tbaa !11
  br label %75

19:                                               ; preds = %15
  %20 = load i8, ptr @PL_minus_c, align 1, !tbaa !14, !range !28, !noundef !29
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %60, label %22

22:                                               ; preds = %19
  %23 = load ptr, ptr @PL_stderrgv, align 8, !tbaa !5
  %24 = icmp eq ptr %23, null
  br i1 %24, label %41, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.gv, ptr %23, i64 0, i32 2
  %27 = load i32, ptr %26, align 4, !tbaa !86
  %28 = and i32 %27, 255
  %29 = icmp eq i32 %28, 9
  br i1 %29, label %30, label %41

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.gv, ptr %23, i64 0, i32 3
  %32 = load ptr, ptr %31, align 8, !tbaa !11
  %33 = getelementptr inbounds %struct.gp, ptr %32, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !88
  %35 = icmp eq ptr %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = load ptr, ptr %34, align 8, !tbaa !90
  %38 = getelementptr inbounds %struct.xpvio, ptr %37, i64 0, i32 5
  %39 = load ptr, ptr %38, align 8, !tbaa !92
  %40 = icmp eq ptr %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %36, %30, %25, %22
  %42 = call ptr @Perl_PerlIO_stderr() #17
  br label %43

43:                                               ; preds = %41, %36
  %44 = phi ptr [ %42, %41 ], [ %39, %36 ]
  %45 = load ptr, ptr @PL_origfilename, align 8, !tbaa !5
  %46 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %44, ptr noundef nonnull @.str.113, ptr noundef %45) #17
  %47 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %48 = zext i8 %47 to i32
  %49 = and i32 %48, 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %52, label %51

51:                                               ; preds = %43
  call void @abort() #20
  unreachable

52:                                               ; preds = %43
  %53 = and i32 %48, 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %52
  %56 = or i8 %47, 8
  store i8 %56, ptr @PL_exit_flags, align 1, !tbaa !11
  call void (ptr, ...) @Perl_warn(ptr noundef nonnull @.str.58, i64 noundef 0) #17
  %57 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %58 = and i8 %57, -9
  store i8 %58, ptr @PL_exit_flags, align 1, !tbaa !11
  br label %59

59:                                               ; preds = %55, %52
  store i32 0, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 0, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  call fastcc void @S_my_exit_jump()
  unreachable

60:                                               ; preds = %19
  %61 = load i32, ptr @PL_perldb, align 4, !tbaa !9
  %62 = and i32 %61, 32
  %63 = icmp ne i32 %62, 0
  %64 = load ptr, ptr @PL_DBsingle, align 8
  %65 = icmp ne ptr %64, null
  %66 = select i1 %63, i1 %65, i1 false
  br i1 %66, label %67, label %68

67:                                               ; preds = %60
  store i64 1, ptr @PL_DBcontrol, align 16, !tbaa !12
  br label %68

68:                                               ; preds = %67, %60
  %69 = load ptr, ptr @PL_initav, align 8, !tbaa !5
  %70 = icmp eq ptr %69, null
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  store i32 4, ptr @PL_phase, align 4, !tbaa !11
  br label %77

72:                                               ; preds = %68
  store i32 3, ptr @PL_phase, align 4, !tbaa !11
  call void @Perl_call_list(i32 noundef %3, ptr noundef nonnull %69)
  %73 = load ptr, ptr @PL_restartop, align 8, !tbaa !5
  store i32 4, ptr @PL_phase, align 4, !tbaa !11
  %74 = icmp eq ptr %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %72, %18
  %76 = phi ptr [ %16, %18 ], [ %73, %72 ]
  store ptr null, ptr @PL_restartjmpenv, align 8, !tbaa !5
  store ptr %76, ptr @PL_op, align 8, !tbaa !5
  store ptr null, ptr @PL_restartop, align 8, !tbaa !5
  br label %84

77:                                               ; preds = %72, %71
  %78 = load ptr, ptr @PL_main_start, align 8, !tbaa !5
  %79 = icmp eq ptr %78, null
  br i1 %79, label %87, label %80

80:                                               ; preds = %77
  %81 = load ptr, ptr @PL_main_cv, align 8, !tbaa !5
  %82 = load ptr, ptr %81, align 8, !tbaa !39
  %83 = getelementptr inbounds %struct.xpvcv, ptr %82, i64 0, i32 13
  store i32 1, ptr %83, align 4, !tbaa !9
  store ptr %78, ptr @PL_op, align 8, !tbaa !5
  br label %84

84:                                               ; preds = %80, %75
  %85 = load ptr, ptr @PL_runops, align 8, !tbaa !5
  %86 = call i32 %85() #17
  br label %87

87:                                               ; preds = %84, %77
  %88 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %89 = zext i8 %88 to i32
  %90 = and i32 %89, 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %93, label %92

92:                                               ; preds = %87
  call void @abort() #20
  unreachable

93:                                               ; preds = %87
  %94 = and i32 %89, 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %93
  %97 = or i8 %88, 8
  store i8 %97, ptr @PL_exit_flags, align 1, !tbaa !11
  call void (ptr, ...) @Perl_warn(ptr noundef nonnull @.str.58, i64 noundef 0) #17
  %98 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %99 = and i8 %98, -9
  store i8 %99, ptr @PL_exit_flags, align 1, !tbaa !11
  br label %100

100:                                              ; preds = %96, %93
  store i32 0, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 0, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  call fastcc void @S_my_exit_jump()
  unreachable

101:                                              ; preds = %9, %101
  call void @Perl_pop_scope() #17
  %102 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %103 = icmp sgt i32 %102, %3
  br i1 %103, label %101, label %104, !llvm.loop !125

104:                                              ; preds = %101, %9
  %105 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %106 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %107 = icmp sgt i64 %105, %106
  br i1 %107, label %108, label %109

108:                                              ; preds = %104
  call void @Perl_free_tmps() #17
  br label %109

109:                                              ; preds = %108, %104
  %110 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %111 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %112 = icmp eq ptr %110, %111
  br i1 %112, label %131, label %113

113:                                              ; preds = %109
  %114 = icmp eq ptr %110, null
  br i1 %114, label %123, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds %struct.sv, ptr %110, i64 0, i32 1
  %117 = load i32, ptr %116, align 8, !tbaa !20
  %118 = icmp ugt i32 %117, 1
  br i1 %118, label %119, label %121

119:                                              ; preds = %115
  %120 = add i32 %117, -1
  store i32 %120, ptr %116, align 8, !tbaa !20
  br label %123

121:                                              ; preds = %115
  call void @Perl_sv_free2(ptr noundef nonnull %110, i32 noundef %117) #17
  %122 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %123

123:                                              ; preds = %119, %121, %113
  %124 = phi ptr [ %111, %113 ], [ %122, %121 ], [ %111, %119 ]
  %125 = icmp eq ptr %124, null
  br i1 %125, label %130, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds %struct.sv, ptr %124, i64 0, i32 1
  %128 = load i32, ptr %127, align 8, !tbaa !20
  %129 = add i32 %128, 1
  store i32 %129, ptr %127, align 8, !tbaa !20
  br label %130

130:                                              ; preds = %123, %126
  store ptr %124, ptr @PL_curstash, align 8, !tbaa !5
  br label %131

131:                                              ; preds = %130, %109
  %132 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %133 = and i8 %132, 2
  %134 = icmp eq i8 %133, 0
  %135 = load ptr, ptr @PL_endav, align 8
  %136 = icmp ne ptr %135, null
  %137 = select i1 %134, i1 %136, i1 false
  %138 = load i8, ptr @PL_minus_c, align 1, !range !28
  %139 = icmp eq i8 %138, 0
  %140 = select i1 %137, i1 %139, i1 false
  br i1 %140, label %141, label %142

141:                                              ; preds = %131
  store i32 5, ptr @PL_phase, align 4, !tbaa !11
  call void @Perl_call_list(i32 noundef %3, ptr noundef nonnull %135)
  br label %142

142:                                              ; preds = %141, %131
  %143 = load i32, ptr @PL_statusvalue, align 4, !tbaa !9
  br label %211

144:                                              ; preds = %1
  %145 = load ptr, ptr @PL_restartop, align 8, !tbaa !5
  %146 = icmp eq ptr %145, null
  br i1 %146, label %183, label %147

147:                                              ; preds = %144
  %148 = load ptr, ptr @PL_curstack, align 8, !tbaa !5
  %149 = load ptr, ptr @PL_mainstack, align 8, !tbaa !5
  %150 = icmp eq ptr %148, %149
  br i1 %150, label %15, label %151

151:                                              ; preds = %147, %158
  call void @Perl_dounwind(i32 noundef -1) #17
  %152 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %153 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %154 = getelementptr inbounds %struct.stackinfo, ptr %153, i64 0, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !67
  %156 = icmp eq ptr %155, null
  br i1 %156, label %157, label %158

157:                                              ; preds = %151
  call void @Perl_croak_popstack() #17
  br label %158

158:                                              ; preds = %151, %157
  %159 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %160 = ptrtoint ptr %152 to i64
  %161 = ptrtoint ptr %159 to i64
  %162 = sub i64 %160, %161
  %163 = ashr exact i64 %162, 3
  %164 = load ptr, ptr @PL_curstack, align 8, !tbaa !5
  %165 = load ptr, ptr %164, align 8, !tbaa !24
  %166 = getelementptr inbounds %struct.xpvav, ptr %165, i64 0, i32 2
  store i64 %163, ptr %166, align 8, !tbaa !81
  %167 = load ptr, ptr %155, align 8, !tbaa !23
  %168 = getelementptr inbounds %struct.av, ptr %167, i64 0, i32 3
  %169 = load ptr, ptr %168, align 8, !tbaa !11
  store ptr %169, ptr @PL_stack_base, align 8, !tbaa !5
  %170 = load ptr, ptr %155, align 8, !tbaa !23
  %171 = load ptr, ptr %170, align 8, !tbaa !24
  %172 = getelementptr inbounds %struct.xpvav, ptr %171, i64 0, i32 3
  %173 = load i64, ptr %172, align 8, !tbaa !26
  %174 = getelementptr inbounds ptr, ptr %169, i64 %173
  store ptr %174, ptr @PL_stack_max, align 8, !tbaa !5
  %175 = load ptr, ptr %155, align 8, !tbaa !23
  %176 = load ptr, ptr %175, align 8, !tbaa !24
  %177 = getelementptr inbounds %struct.xpvav, ptr %176, i64 0, i32 2
  %178 = load i64, ptr %177, align 8, !tbaa !81
  %179 = getelementptr inbounds ptr, ptr %169, i64 %178
  store ptr %179, ptr @PL_stack_sp, align 8, !tbaa !5
  %180 = load ptr, ptr %155, align 8, !tbaa !23
  store ptr %180, ptr @PL_curstack, align 8, !tbaa !5
  store ptr %155, ptr @PL_curstackinfo, align 8, !tbaa !5
  %181 = load ptr, ptr @PL_mainstack, align 8, !tbaa !5
  %182 = icmp eq ptr %180, %181
  br i1 %182, label %15, label %151, !llvm.loop !126

183:                                              ; preds = %144
  %184 = load ptr, ptr @PL_stderrgv, align 8, !tbaa !5
  %185 = icmp eq ptr %184, null
  br i1 %185, label %202, label %186

186:                                              ; preds = %183
  %187 = getelementptr inbounds %struct.gv, ptr %184, i64 0, i32 2
  %188 = load i32, ptr %187, align 4, !tbaa !86
  %189 = and i32 %188, 255
  %190 = icmp eq i32 %189, 9
  br i1 %190, label %191, label %202

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.gv, ptr %184, i64 0, i32 3
  %193 = load ptr, ptr %192, align 8, !tbaa !11
  %194 = getelementptr inbounds %struct.gp, ptr %193, i64 0, i32 1
  %195 = load ptr, ptr %194, align 8, !tbaa !88
  %196 = icmp eq ptr %195, null
  br i1 %196, label %202, label %197

197:                                              ; preds = %191
  %198 = load ptr, ptr %195, align 8, !tbaa !90
  %199 = getelementptr inbounds %struct.xpvio, ptr %198, i64 0, i32 5
  %200 = load ptr, ptr %199, align 8, !tbaa !92
  %201 = icmp eq ptr %200, null
  br i1 %201, label %202, label %204

202:                                              ; preds = %197, %191, %186, %183
  %203 = call ptr @Perl_PerlIO_stderr() #17
  br label %204

204:                                              ; preds = %197, %202
  %205 = phi ptr [ %203, %202 ], [ %200, %197 ]
  %206 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %205, ptr noundef nonnull @.str.13) #17
  %207 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %208 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %209 = icmp sgt i64 %207, %208
  br i1 %209, label %210, label %211

210:                                              ; preds = %204
  call void @Perl_free_tmps() #17
  br label %211

211:                                              ; preds = %204, %210, %142, %1
  %212 = phi i32 [ %6, %1 ], [ %143, %142 ], [ 1, %210 ], [ 1, %204 ]
  %213 = load ptr, ptr %5, align 8, !tbaa !30
  store ptr %213, ptr @PL_top_env, align 8, !tbaa !5
  call void @llvm.lifetime.end.p0(i64 216, ptr nonnull %2) #17
  ret i32 %212
}

declare void @Perl_dounwind(i32 noundef) local_unnamed_addr #2

declare void @Perl_croak_popstack() local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_get_sv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call ptr @Perl_gv_fetchpv(ptr noundef %0, i32 noundef %1, i32 noundef 3) #17
  %4 = icmp eq ptr %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.gv, ptr %3, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !11
  %8 = load ptr, ptr %7, align 8, !tbaa !108
  br label %9

9:                                                ; preds = %2, %5
  %10 = phi ptr [ %8, %5 ], [ null, %2 ]
  ret ptr %10
}

declare ptr @Perl_gv_fetchpv(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_get_av(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call ptr @Perl_gv_fetchpv(ptr noundef %0, i32 noundef %1, i32 noundef 11) #17
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.gv, ptr %3, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %struct.gp, ptr %7, i64 0, i32 6
  %9 = load ptr, ptr %8, align 8, !tbaa !124
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %21

11:                                               ; preds = %5
  %12 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %3, i32 noundef 11) #17
  br label %15

13:                                               ; preds = %2
  %14 = icmp eq ptr %3, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %13, %11
  %16 = phi ptr [ %12, %11 ], [ %3, %13 ]
  %17 = getelementptr inbounds %struct.gv, ptr %16, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !11
  %19 = getelementptr inbounds %struct.gp, ptr %18, i64 0, i32 6
  %20 = load ptr, ptr %19, align 8, !tbaa !124
  br label %21

21:                                               ; preds = %15, %13, %5
  %22 = phi ptr [ %9, %5 ], [ null, %13 ], [ %20, %15 ]
  ret ptr %22
}

declare ptr @Perl_gv_add_by_type(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_get_hv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call ptr @Perl_gv_fetchpv(ptr noundef %0, i32 noundef %1, i32 noundef 12) #17
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.gv, ptr %3, i64 0, i32 3
  %7 = load ptr, ptr %6, align 8, !tbaa !11
  %8 = getelementptr inbounds %struct.gp, ptr %7, i64 0, i32 5
  %9 = load ptr, ptr %8, align 8, !tbaa !102
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %21

11:                                               ; preds = %5
  %12 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %3, i32 noundef 12) #17
  br label %15

13:                                               ; preds = %2
  %14 = icmp eq ptr %3, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %13, %11
  %16 = phi ptr [ %12, %11 ], [ %3, %13 ]
  %17 = getelementptr inbounds %struct.gv, ptr %16, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !11
  %19 = getelementptr inbounds %struct.gp, ptr %18, i64 0, i32 5
  %20 = load ptr, ptr %19, align 8, !tbaa !102
  br label %21

21:                                               ; preds = %15, %13, %5
  %22 = phi ptr [ %9, %5 ], [ null, %13 ], [ %20, %15 ]
  ret ptr %22
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_get_cvn_flags(ptr noundef %0, i64 noundef %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef %0, i64 noundef %1, i32 noundef %2, i32 noundef 13) #17
  %5 = and i32 %2, -536874209
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.gv, ptr %4, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %struct.gp, ptr %9, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !127
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.gp, ptr %9, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !128
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %27

17:                                               ; preds = %7, %13
  %18 = tail call ptr @Perl_newSTUB(ptr noundef nonnull %4, i1 noundef zeroext false) #17
  br label %31

19:                                               ; preds = %3
  %20 = icmp eq ptr %4, null
  br i1 %20, label %31, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.gv, ptr %4, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !11
  %24 = getelementptr inbounds %struct.gp, ptr %23, i64 0, i32 3
  %25 = load i32, ptr %24, align 8, !tbaa !127
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %13, %21
  %28 = phi ptr [ %23, %21 ], [ %9, %13 ]
  %29 = getelementptr inbounds %struct.gp, ptr %28, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !128
  br label %31

31:                                               ; preds = %19, %27, %21, %17
  %32 = phi ptr [ %18, %17 ], [ %30, %27 ], [ null, %21 ], [ null, %19 ]
  ret ptr %32
}

declare ptr @Perl_gv_fetchpvn_flags(ptr noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_newSTUB(ptr noundef, i1 noundef zeroext) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_get_cv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #21
  %4 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef %0, i64 noundef %3, i32 noundef %1, i32 noundef 13) #17
  %5 = and i32 %1, -536874209
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.gv, ptr %4, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %struct.gp, ptr %9, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !127
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.gp, ptr %9, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !128
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %30

17:                                               ; preds = %13, %7
  %18 = tail call ptr @Perl_newSTUB(ptr noundef nonnull %4, i1 noundef zeroext false) #17
  br label %30

19:                                               ; preds = %2
  %20 = icmp eq ptr %4, null
  br i1 %20, label %30, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.gv, ptr %4, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !11
  %24 = getelementptr inbounds %struct.gp, ptr %23, i64 0, i32 3
  %25 = load i32, ptr %24, align 8, !tbaa !127
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.gp, ptr %23, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !128
  br label %30

30:                                               ; preds = %13, %27, %17, %19, %21
  %31 = phi ptr [ %18, %17 ], [ null, %21 ], [ null, %19 ], [ %29, %27 ], [ %15, %13 ]
  ret ptr %31
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_call_argv(ptr noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2) local_unnamed_addr #0 {
  %4 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %5 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %6 = getelementptr inbounds i32, ptr %5, i64 1
  store ptr %6, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %7 = load ptr, ptr @PL_markstack_max, align 8, !tbaa !5
  %8 = icmp eq ptr %6, %7
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = tail call ptr @Perl_markstack_grow() #17
  br label %11

11:                                               ; preds = %3, %9
  %12 = phi ptr [ %10, %9 ], [ %6, %3 ]
  %13 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %14 = ptrtoint ptr %4 to i64
  %15 = ptrtoint ptr %13 to i64
  %16 = sub i64 %14, %15
  %17 = lshr exact i64 %16, 3
  %18 = trunc i64 %17 to i32
  store i32 %18, ptr %12, align 4, !tbaa !9
  %19 = load ptr, ptr %2, align 8, !tbaa !5
  %20 = icmp eq ptr %19, null
  br i1 %20, label %42, label %21

21:                                               ; preds = %11, %33
  %22 = phi ptr [ %40, %33 ], [ %19, %11 ]
  %23 = phi ptr [ %38, %33 ], [ %4, %11 ]
  %24 = phi ptr [ %39, %33 ], [ %2, %11 ]
  %25 = load ptr, ptr @PL_stack_max, align 8, !tbaa !5
  %26 = ptrtoint ptr %25 to i64
  %27 = ptrtoint ptr %23 to i64
  %28 = sub i64 %26, %27
  %29 = icmp slt i64 %28, 8
  br i1 %29, label %30, label %33

30:                                               ; preds = %21
  %31 = tail call ptr @Perl_stack_grow(ptr noundef %23, ptr noundef %23, i64 noundef 1) #17
  %32 = load ptr, ptr %24, align 8, !tbaa !5
  br label %33

33:                                               ; preds = %21, %30
  %34 = phi ptr [ %32, %30 ], [ %22, %21 ]
  %35 = phi ptr [ %31, %30 ], [ %23, %21 ]
  %36 = tail call ptr @Perl_newSVpv(ptr noundef %34, i64 noundef 0) #17
  %37 = tail call ptr @Perl_sv_2mortal(ptr noundef %36) #17
  %38 = getelementptr inbounds ptr, ptr %35, i64 1
  store ptr %37, ptr %38, align 8, !tbaa !5
  %39 = getelementptr inbounds ptr, ptr %24, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %21, !llvm.loop !129

42:                                               ; preds = %33, %11
  %43 = phi ptr [ %4, %11 ], [ %38, %33 ]
  store ptr %43, ptr @PL_stack_sp, align 8, !tbaa !5
  %44 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #21
  %45 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef %0, i64 noundef %44, i32 noundef 1, i32 noundef 13) #17
  %46 = getelementptr inbounds %struct.gv, ptr %45, i64 0, i32 3
  %47 = load ptr, ptr %46, align 8, !tbaa !11
  %48 = getelementptr inbounds %struct.gp, ptr %47, i64 0, i32 3
  %49 = load i32, ptr %48, align 8, !tbaa !127
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %42
  %52 = getelementptr inbounds %struct.gp, ptr %47, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !128
  %54 = icmp eq ptr %53, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %51, %42
  %56 = tail call ptr @Perl_newSTUB(ptr noundef nonnull %45, i1 noundef zeroext false) #17
  br label %57

57:                                               ; preds = %51, %55
  %58 = phi ptr [ %56, %55 ], [ %53, %51 ]
  %59 = tail call i32 @Perl_call_sv(ptr noundef %58, i32 noundef %1)
  ret i32 %59
}

declare ptr @Perl_markstack_grow() local_unnamed_addr #2

declare ptr @Perl_stack_grow(ptr noundef, ptr noundef, i64 noundef) local_unnamed_addr #2

declare ptr @Perl_sv_2mortal(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_newSVpv(ptr noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_call_pv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #21
  %4 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef %0, i64 noundef %3, i32 noundef 1, i32 noundef 13) #17
  %5 = getelementptr inbounds %struct.gv, ptr %4, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !11
  %7 = getelementptr inbounds %struct.gp, ptr %6, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !127
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.gp, ptr %6, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !128
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %10, %2
  %15 = tail call ptr @Perl_newSTUB(ptr noundef nonnull %4, i1 noundef zeroext false) #17
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi ptr [ %15, %14 ], [ %12, %10 ]
  %18 = tail call i32 @Perl_call_sv(ptr noundef %17, i32 noundef %1)
  ret i32 %18
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_call_sv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.logop, align 8
  %5 = alloca %struct.methop, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.jmpenv, align 8
  store volatile i32 %1, ptr %3, align 4, !tbaa !9
  %8 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #17
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %5) #17
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  store volatile i32 0, ptr %6, align 4, !tbaa !9
  %9 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.jmpenv, ptr %9, i64 0, i32 3
  %11 = load i8, ptr %10, align 4, !tbaa !33, !range !28, !noundef !29
  %12 = load ptr, ptr @PL_op, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 216, ptr nonnull %7) #17
  %13 = load volatile i32, ptr %3, align 4, !tbaa !9
  %14 = and i32 %13, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  call void @Perl_push_scope() #17
  call void @Perl_save_strlen(ptr noundef nonnull @PL_tmps_floor) #17
  %17 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  store i64 %17, ptr @PL_tmps_floor, align 8, !tbaa !12
  br label %18

18:                                               ; preds = %16, %2
  %19 = load volatile i32, ptr %3, align 4, !tbaa !9
  %20 = and i32 %19, 3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %18
  %23 = load volatile i32, ptr %3, align 4, !tbaa !9
  %24 = or i32 %23, 2
  store volatile i32 %24, ptr %3, align 4, !tbaa !9
  br label %25

25:                                               ; preds = %22, %18
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %4, i8 0, i64 56, i1 false)
  %26 = load volatile i32, ptr %3, align 4, !tbaa !9
  %27 = trunc i32 %26 to i8
  %28 = shl i8 %27, 2
  %29 = and i8 %28, 64
  %30 = load volatile i32, ptr %3, align 4, !tbaa !9
  %31 = getelementptr inbounds %struct.logop, ptr %4, i64 0, i32 5
  %32 = trunc i32 %30 to i8
  %33 = and i8 %32, 3
  %34 = or i8 %29, %33
  %35 = xor i8 %34, 64
  store i8 %35, ptr %31, align 2, !tbaa !130
  %36 = load ptr, ptr @PL_op, align 8, !tbaa !5
  call void @Perl_save_pushptr(ptr noundef %36, i32 noundef 18) #17
  store ptr %4, ptr @PL_op, align 8, !tbaa !5
  %37 = load ptr, ptr @PL_stack_max, align 8, !tbaa !5
  %38 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %39 = ptrtoint ptr %37 to i64
  %40 = ptrtoint ptr %38 to i64
  %41 = sub i64 %39, %40
  %42 = icmp slt i64 %41, 8
  br i1 %42, label %43, label %45

43:                                               ; preds = %25
  %44 = call ptr @Perl_stack_grow(ptr noundef %8, ptr noundef %38, i64 noundef 1) #17
  br label %45

45:                                               ; preds = %25, %43
  %46 = load volatile i32, ptr %3, align 4, !tbaa !9
  %47 = and i32 %46, 4096
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %51 = getelementptr inbounds ptr, ptr %50, i64 1
  store ptr %51, ptr @PL_stack_sp, align 8, !tbaa !5
  store ptr %0, ptr %51, align 8, !tbaa !5
  br label %52

52:                                               ; preds = %49, %45
  %53 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %54 = load i32, ptr %53, align 4, !tbaa !9
  %55 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %56 = load i32, ptr @PL_perldb, align 4, !tbaa !9
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %91, label %59

59:                                               ; preds = %52
  %60 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %61 = load ptr, ptr @PL_debstash, align 8, !tbaa !5
  %62 = icmp eq ptr %60, %61
  br i1 %62, label %91, label %63

63:                                               ; preds = %59
  %64 = load ptr, ptr @PL_DBcv, align 8, !tbaa !5
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %73

66:                                               ; preds = %63
  %67 = load ptr, ptr @PL_DBsub, align 8, !tbaa !5
  %68 = getelementptr inbounds %struct.gv, ptr %67, i64 0, i32 3
  %69 = load ptr, ptr %68, align 8, !tbaa !11
  %70 = getelementptr inbounds %struct.gp, ptr %69, i64 0, i32 2
  %71 = load ptr, ptr %70, align 8, !tbaa !128
  store ptr %71, ptr @PL_DBcv, align 8, !tbaa !5
  %72 = icmp eq ptr %71, null
  br i1 %72, label %91, label %73

73:                                               ; preds = %66, %63
  %74 = getelementptr inbounds %struct.sv, ptr %0, i64 0, i32 2
  %75 = load i32, ptr %74, align 4, !tbaa !18
  %76 = and i32 %75, 255
  %77 = icmp eq i32 %76, 13
  br i1 %77, label %78, label %83

78:                                               ; preds = %73
  %79 = load ptr, ptr %0, align 8, !tbaa !39
  %80 = getelementptr inbounds %struct.xpvcv, ptr %79, i64 0, i32 4
  %81 = load ptr, ptr %80, align 8, !tbaa !132
  %82 = icmp eq ptr %81, %61
  br i1 %82, label %91, label %83

83:                                               ; preds = %78, %73
  %84 = load volatile i32, ptr %3, align 4, !tbaa !9
  %85 = and i32 %84, 64
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.logop, ptr %4, i64 0, i32 6
  %89 = load i8, ptr %88, align 1, !tbaa !133
  %90 = or i8 %89, 64
  store i8 %90, ptr %88, align 1, !tbaa !133
  br label %91

91:                                               ; preds = %87, %83, %78, %66, %59, %52
  %92 = load volatile i32, ptr %3, align 4, !tbaa !9
  %93 = and i32 %92, 4224
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %114, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds i8, ptr %5, i64 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %96, i8 0, i64 48, i1 false)
  store ptr %4, ptr %5, align 8, !tbaa !134
  store ptr %5, ptr @PL_op, align 8, !tbaa !5
  %97 = load volatile i32, ptr %3, align 4, !tbaa !9
  %98 = and i32 %97, 4096
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %struct.methop, ptr %5, i64 0, i32 2
  %101 = getelementptr inbounds %struct.methop, ptr %5, i64 0, i32 4
  br i1 %99, label %105, label %102

102:                                              ; preds = %95
  %103 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @PL_ppaddr, i64 0, i64 210), align 8, !tbaa !5
  store ptr %103, ptr %100, align 8, !tbaa !136
  store i16 210, ptr %101, align 8
  %104 = getelementptr inbounds %struct.methop, ptr %5, i64 0, i32 7
  store ptr %0, ptr %104, align 8, !tbaa !11
  br label %107

105:                                              ; preds = %95
  %106 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @PL_ppaddr, i64 0, i64 184), align 8, !tbaa !5
  store ptr %106, ptr %100, align 8, !tbaa !136
  store i16 184, ptr %101, align 8
  br label %107

107:                                              ; preds = %105, %102
  %108 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @PL_ppaddr, i64 0, i64 185), align 8, !tbaa !5
  %109 = getelementptr inbounds %struct.logop, ptr %4, i64 0, i32 2
  store ptr %108, ptr %109, align 8, !tbaa !137
  %110 = getelementptr inbounds %struct.logop, ptr %4, i64 0, i32 4
  %111 = load i16, ptr %110, align 8
  %112 = and i16 %111, -512
  %113 = or i16 %112, 185
  store i16 %113, ptr %110, align 8
  br label %114

114:                                              ; preds = %107, %91
  %115 = load volatile i32, ptr %3, align 4, !tbaa !9
  %116 = and i32 %115, 8
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %144

118:                                              ; preds = %114
  %119 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %120 = getelementptr inbounds %struct.jmpenv, ptr %119, i64 0, i32 3
  store i8 1, ptr %120, align 4, !tbaa !33
  %121 = load ptr, ptr @PL_op, align 8, !tbaa !5
  %122 = icmp eq ptr %121, %4
  br i1 %122, label %123, label %126

123:                                              ; preds = %118
  %124 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @PL_ppaddr, i64 0, i64 185), align 8, !tbaa !5
  %125 = call ptr %124() #17
  store ptr %125, ptr @PL_op, align 8, !tbaa !5
  br label %126

126:                                              ; preds = %123, %118
  %127 = phi ptr [ %125, %123 ], [ %121, %118 ]
  %128 = icmp eq ptr %127, null
  br i1 %128, label %132, label %129

129:                                              ; preds = %126
  %130 = load ptr, ptr @PL_runops, align 8, !tbaa !5
  %131 = call i32 %130() #17
  br label %132

132:                                              ; preds = %129, %126
  %133 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %134 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %135 = sext i32 %54 to i64
  %136 = getelementptr inbounds ptr, ptr %134, i64 %135
  %137 = ptrtoint ptr %133 to i64
  %138 = ptrtoint ptr %136 to i64
  %139 = sub i64 %137, %138
  %140 = lshr exact i64 %139, 3
  %141 = trunc i64 %140 to i32
  store volatile i32 %141, ptr %6, align 4, !tbaa !9
  %142 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %143 = getelementptr inbounds %struct.jmpenv, ptr %142, i64 0, i32 3
  store i8 %11, ptr %143, align 4, !tbaa !33
  br label %262

144:                                              ; preds = %114
  %145 = getelementptr inbounds %struct.logop, ptr %4, i64 0, i32 8
  store ptr %4, ptr %145, align 8, !tbaa !138
  %146 = getelementptr inbounds i32, ptr %53, i64 -1
  store ptr %146, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %147 = load volatile i32, ptr %3, align 4, !tbaa !9
  %148 = or i32 %147, 256
  %149 = call ptr @Perl_create_eval_scope(i32 noundef %148) #17
  %150 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %151 = getelementptr inbounds i32, ptr %150, i64 1
  store ptr %151, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %152 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %153 = getelementptr inbounds %struct.jmpenv, ptr %7, i64 0, i32 1
  store ptr %152, ptr %153, align 8, !tbaa !30
  %154 = call i32 @__sigsetjmp(ptr noundef nonnull %7, i32 noundef 0) #19
  %155 = getelementptr inbounds %struct.jmpenv, ptr %7, i64 0, i32 2
  store i32 %154, ptr %155, align 8, !tbaa !32
  store ptr %7, ptr @PL_top_env, align 8, !tbaa !5
  %156 = getelementptr inbounds %struct.jmpenv, ptr %7, i64 0, i32 3
  store i8 0, ptr %156, align 4, !tbaa !33
  switch i32 %154, label %256 [
    i32 0, label %157
    i32 1, label %212
    i32 2, label %213
    i32 3, label %242
  ]

157:                                              ; preds = %144
  %158 = load ptr, ptr @PL_op, align 8, !tbaa !5
  br label %159

159:                                              ; preds = %157, %245
  %160 = phi ptr [ %158, %157 ], [ %243, %245 ]
  %161 = icmp eq ptr %160, %4
  br i1 %161, label %162, label %165

162:                                              ; preds = %159
  %163 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @PL_ppaddr, i64 0, i64 185), align 8, !tbaa !5
  %164 = call ptr %163() #17
  store ptr %164, ptr @PL_op, align 8, !tbaa !5
  br label %165

165:                                              ; preds = %162, %159
  %166 = phi ptr [ %164, %162 ], [ %160, %159 ]
  %167 = icmp eq ptr %166, null
  br i1 %167, label %171, label %168

168:                                              ; preds = %165
  %169 = load ptr, ptr @PL_runops, align 8, !tbaa !5
  %170 = call i32 %169() #17
  br label %171

171:                                              ; preds = %168, %165
  %172 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %173 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %174 = sext i32 %54 to i64
  %175 = getelementptr inbounds ptr, ptr %173, i64 %174
  %176 = ptrtoint ptr %172 to i64
  %177 = ptrtoint ptr %175 to i64
  %178 = sub i64 %176, %177
  %179 = lshr exact i64 %178, 3
  %180 = trunc i64 %179 to i32
  store volatile i32 %180, ptr %6, align 4, !tbaa !9
  %181 = load volatile i32, ptr %3, align 4, !tbaa !9
  %182 = and i32 %181, 32
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %256

184:                                              ; preds = %171
  %185 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %186 = getelementptr inbounds %struct.gv, ptr %185, i64 0, i32 3
  %187 = load ptr, ptr %186, align 8, !tbaa !11
  %188 = load ptr, ptr %187, align 8, !tbaa !5
  %189 = icmp eq ptr %188, null
  br i1 %189, label %202, label %190

190:                                              ; preds = %184
  %191 = getelementptr inbounds %struct.sv, ptr %188, i64 0, i32 2
  %192 = load i32, ptr %191, align 4, !tbaa !18
  %193 = and i32 %192, 134283264
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %204, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %struct.sv, ptr %188, i64 0, i32 1
  %197 = load i32, ptr %196, align 8, !tbaa !20
  %198 = icmp ugt i32 %197, 1
  br i1 %198, label %199, label %201

199:                                              ; preds = %195
  %200 = add i32 %197, -1
  store i32 %200, ptr %196, align 8, !tbaa !20
  br label %202

201:                                              ; preds = %195
  call void @Perl_sv_free2(ptr noundef nonnull %188, i32 noundef %197) #17
  br label %202

202:                                              ; preds = %201, %199, %184
  %203 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %203, ptr %187, align 8, !tbaa !5
  br label %256

204:                                              ; preds = %190
  call void @Perl_sv_setpvn(ptr noundef nonnull %188, ptr noundef nonnull @.str.1, i64 noundef 0) #17
  %205 = load i32, ptr %191, align 4, !tbaa !18
  %206 = and i32 %205, 1610547455
  %207 = or i32 %206, 17408
  store i32 %207, ptr %191, align 4, !tbaa !18
  %208 = and i32 %205, 14680064
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %256, label %210

210:                                              ; preds = %204
  %211 = call i32 @Perl_mg_free(ptr noundef nonnull %188) #17
  br label %256

212:                                              ; preds = %144
  store i32 1, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 1, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  br label %213

213:                                              ; preds = %144, %212
  %214 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %215 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %216 = icmp eq ptr %214, %215
  br i1 %216, label %235, label %217

217:                                              ; preds = %213
  %218 = icmp eq ptr %214, null
  br i1 %218, label %227, label %219

219:                                              ; preds = %217
  %220 = getelementptr inbounds %struct.sv, ptr %214, i64 0, i32 1
  %221 = load i32, ptr %220, align 8, !tbaa !20
  %222 = icmp ugt i32 %221, 1
  br i1 %222, label %223, label %225

223:                                              ; preds = %219
  %224 = add i32 %221, -1
  store i32 %224, ptr %220, align 8, !tbaa !20
  br label %227

225:                                              ; preds = %219
  call void @Perl_sv_free2(ptr noundef nonnull %214, i32 noundef %221) #17
  %226 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %227

227:                                              ; preds = %223, %225, %217
  %228 = phi ptr [ %215, %217 ], [ %226, %225 ], [ %215, %223 ]
  %229 = icmp eq ptr %228, null
  br i1 %229, label %234, label %230

230:                                              ; preds = %227
  %231 = getelementptr inbounds %struct.sv, ptr %228, i64 0, i32 1
  %232 = load i32, ptr %231, align 8, !tbaa !20
  %233 = add i32 %232, 1
  store i32 %233, ptr %231, align 8, !tbaa !20
  br label %234

234:                                              ; preds = %227, %230
  store ptr %228, ptr @PL_curstash, align 8, !tbaa !5
  br label %235

235:                                              ; preds = %234, %213
  %236 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %237 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %238 = icmp sgt i64 %236, %237
  br i1 %238, label %239, label %240

239:                                              ; preds = %235
  call void @Perl_free_tmps() #17
  br label %240

240:                                              ; preds = %235, %239
  %241 = load ptr, ptr %153, align 8, !tbaa !30
  store ptr %241, ptr @PL_top_env, align 8, !tbaa !5
  call fastcc void @S_my_exit_jump()
  unreachable

242:                                              ; preds = %144
  %243 = load ptr, ptr @PL_restartop, align 8, !tbaa !5
  %244 = icmp eq ptr %243, null
  br i1 %244, label %246, label %245

245:                                              ; preds = %242
  store ptr null, ptr @PL_restartjmpenv, align 8, !tbaa !5
  store ptr %243, ptr @PL_op, align 8, !tbaa !5
  store ptr null, ptr @PL_restartop, align 8, !tbaa !5
  br label %159

246:                                              ; preds = %242
  %247 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %248 = sext i32 %54 to i64
  %249 = getelementptr inbounds ptr, ptr %247, i64 %248
  store ptr %249, ptr @PL_stack_sp, align 8, !tbaa !5
  %250 = load volatile i32, ptr %3, align 4, !tbaa !9
  %251 = and i32 %250, 3
  %252 = icmp eq i32 %251, 3
  br i1 %252, label %253, label %254

253:                                              ; preds = %246
  store volatile i32 0, ptr %6, align 4, !tbaa !9
  br label %256

254:                                              ; preds = %246
  store volatile i32 1, ptr %6, align 4, !tbaa !9
  %255 = getelementptr inbounds ptr, ptr %249, i64 1
  store ptr %255, ptr @PL_stack_sp, align 8, !tbaa !5
  store ptr @PL_sv_undef, ptr %255, align 8, !tbaa !5
  br label %256

256:                                              ; preds = %202, %210, %204, %253, %254, %171, %144
  %257 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  %258 = icmp sgt i32 %257, %55
  br i1 %258, label %259, label %260

259:                                              ; preds = %256
  call void @Perl_delete_eval_scope() #17
  br label %260

260:                                              ; preds = %256, %259
  %261 = load ptr, ptr %153, align 8, !tbaa !30
  store ptr %261, ptr @PL_top_env, align 8, !tbaa !5
  br label %262

262:                                              ; preds = %260, %132
  %263 = load volatile i32, ptr %3, align 4, !tbaa !9
  %264 = and i32 %263, 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %275, label %266

266:                                              ; preds = %262
  %267 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %268 = sext i32 %54 to i64
  %269 = getelementptr inbounds ptr, ptr %267, i64 %268
  store ptr %269, ptr @PL_stack_sp, align 8, !tbaa !5
  store volatile i32 0, ptr %6, align 4, !tbaa !9
  %270 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %271 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %272 = icmp sgt i64 %270, %271
  br i1 %272, label %273, label %274

273:                                              ; preds = %266
  call void @Perl_free_tmps() #17
  br label %274

274:                                              ; preds = %273, %266
  call void @Perl_pop_scope() #17
  br label %275

275:                                              ; preds = %274, %262
  store ptr %12, ptr @PL_op, align 8, !tbaa !5
  %276 = load volatile i32, ptr %6, align 4, !tbaa !9
  call void @llvm.lifetime.end.p0(i64 216, ptr nonnull %7) #17
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %5) #17
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #17
  ret i32 %276
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_call_method(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #21
  %4 = and i32 %1, 4096
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %3 to i32
  %8 = tail call ptr @Perl_newSVpvn_share(ptr noundef %0, i32 noundef %7, i32 noundef 0) #17
  %9 = tail call ptr @Perl_sv_2mortal(ptr noundef %8) #17
  br label %12

10:                                               ; preds = %2
  %11 = tail call ptr @Perl_newSVpvn_flags(ptr noundef %0, i64 noundef %3, i32 noundef 524288) #17
  br label %12

12:                                               ; preds = %10, %6
  %13 = phi ptr [ %9, %6 ], [ %11, %10 ]
  %14 = or i32 %1, 128
  %15 = tail call i32 @Perl_call_sv(ptr noundef %13, i32 noundef %14)
  ret i32 %15
}

declare ptr @Perl_newSVpvn_share(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_newSVpvn_flags(ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_save_strlen(ptr noundef) local_unnamed_addr #2

declare void @Perl_save_pushptr(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_create_eval_scope(i32 noundef) local_unnamed_addr #2

declare i32 @Perl_mg_free(ptr noundef) local_unnamed_addr #2

; Function Attrs: noreturn nounwind sspstrong uwtable
define internal fastcc void @S_my_exit_jump() unnamed_addr #12 {
  %1 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %2 = icmp eq ptr %1, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %0
  %4 = getelementptr inbounds %struct.sv, ptr %1, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !20
  %6 = icmp ugt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = add i32 %5, -1
  store i32 %8, ptr %4, align 8, !tbaa !20
  br label %10

9:                                                ; preds = %3
  tail call void @Perl_sv_free2(ptr noundef nonnull %1, i32 noundef %5) #17
  br label %10

10:                                               ; preds = %7, %9
  store ptr null, ptr @PL_e_script, align 8, !tbaa !5
  br label %11

11:                                               ; preds = %0, %10
  %12 = load ptr, ptr @PL_curstack, align 8, !tbaa !5
  %13 = load ptr, ptr @PL_mainstack, align 8, !tbaa !5
  %14 = icmp eq ptr %12, %13
  br i1 %14, label %47, label %15

15:                                               ; preds = %11, %22
  tail call void @Perl_dounwind(i32 noundef -1) #17
  %16 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %17 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %18 = getelementptr inbounds %struct.stackinfo, ptr %17, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !67
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call void @Perl_croak_popstack() #17
  br label %22

22:                                               ; preds = %15, %21
  %23 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %24 = ptrtoint ptr %16 to i64
  %25 = ptrtoint ptr %23 to i64
  %26 = sub i64 %24, %25
  %27 = ashr exact i64 %26, 3
  %28 = load ptr, ptr @PL_curstack, align 8, !tbaa !5
  %29 = load ptr, ptr %28, align 8, !tbaa !24
  %30 = getelementptr inbounds %struct.xpvav, ptr %29, i64 0, i32 2
  store i64 %27, ptr %30, align 8, !tbaa !81
  %31 = load ptr, ptr %19, align 8, !tbaa !23
  %32 = getelementptr inbounds %struct.av, ptr %31, i64 0, i32 3
  %33 = load ptr, ptr %32, align 8, !tbaa !11
  store ptr %33, ptr @PL_stack_base, align 8, !tbaa !5
  %34 = load ptr, ptr %19, align 8, !tbaa !23
  %35 = load ptr, ptr %34, align 8, !tbaa !24
  %36 = getelementptr inbounds %struct.xpvav, ptr %35, i64 0, i32 3
  %37 = load i64, ptr %36, align 8, !tbaa !26
  %38 = getelementptr inbounds ptr, ptr %33, i64 %37
  store ptr %38, ptr @PL_stack_max, align 8, !tbaa !5
  %39 = load ptr, ptr %19, align 8, !tbaa !23
  %40 = load ptr, ptr %39, align 8, !tbaa !24
  %41 = getelementptr inbounds %struct.xpvav, ptr %40, i64 0, i32 2
  %42 = load i64, ptr %41, align 8, !tbaa !81
  %43 = getelementptr inbounds ptr, ptr %33, i64 %42
  store ptr %43, ptr @PL_stack_sp, align 8, !tbaa !5
  %44 = load ptr, ptr %19, align 8, !tbaa !23
  store ptr %44, ptr @PL_curstack, align 8, !tbaa !5
  store ptr %19, ptr @PL_curstackinfo, align 8, !tbaa !5
  %45 = load ptr, ptr @PL_mainstack, align 8, !tbaa !5
  %46 = icmp eq ptr %44, %45
  br i1 %46, label %47, label %15, !llvm.loop !139

47:                                               ; preds = %22, %11
  tail call void @Perl_dounwind(i32 noundef -1) #17
  %48 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !9
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  tail call void @Perl_leave_scope(i32 noundef 0) #17
  br label %51

51:                                               ; preds = %50, %47
  %52 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %53 = getelementptr inbounds %struct.jmpenv, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !30
  %55 = icmp eq ptr %54, null
  br i1 %55, label %57, label %56

56:                                               ; preds = %51
  tail call void @siglongjmp(ptr noundef nonnull %52, i32 noundef 2) #20
  unreachable

57:                                               ; preds = %51
  %58 = load i32, ptr @PL_statusvalue, align 4, !tbaa !9
  tail call void @exit(i32 noundef %58) #20
  unreachable
}

declare void @Perl_delete_eval_scope() local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @Perl_eval_sv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = alloca %struct.unop, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.jmpenv, align 8
  %7 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %3) #17
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  %8 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %9 = ptrtoint ptr %7 to i64
  %10 = ptrtoint ptr %8 to i64
  %11 = sub i64 %9, %10
  %12 = lshr exact i64 %11, 3
  %13 = trunc i64 %12 to i32
  store volatile i32 %13, ptr %4, align 4, !tbaa !9
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  store volatile i32 0, ptr %5, align 4, !tbaa !9
  %14 = load ptr, ptr @PL_op, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 216, ptr nonnull %6) #17
  %15 = and i32 %1, 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %2
  call void @Perl_push_scope() #17
  call void @Perl_save_strlen(ptr noundef nonnull @PL_tmps_floor) #17
  %18 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  store i64 %18, ptr @PL_tmps_floor, align 8, !tbaa !12
  %19 = load ptr, ptr @PL_op, align 8, !tbaa !5
  br label %20

20:                                               ; preds = %17, %2
  %21 = phi ptr [ %19, %17 ], [ %14, %2 ]
  call void @Perl_save_pushptr(ptr noundef %21, i32 noundef 18) #17
  store ptr %3, ptr @PL_op, align 8, !tbaa !5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %3, i8 0, i64 48, i1 false)
  %22 = load ptr, ptr @PL_stack_max, align 8, !tbaa !5
  %23 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %24 = ptrtoint ptr %22 to i64
  %25 = ptrtoint ptr %23 to i64
  %26 = sub i64 %24, %25
  %27 = icmp slt i64 %26, 8
  br i1 %27, label %28, label %31

28:                                               ; preds = %20
  %29 = call ptr @Perl_stack_grow(ptr noundef %7, ptr noundef %23, i64 noundef 1) #17
  %30 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  br label %31

31:                                               ; preds = %20, %28
  %32 = phi ptr [ %23, %20 ], [ %30, %28 ]
  %33 = getelementptr inbounds ptr, ptr %32, i64 1
  store ptr %33, ptr @PL_stack_sp, align 8, !tbaa !5
  store ptr %0, ptr %33, align 8, !tbaa !5
  %34 = and i32 %1, 16
  %35 = icmp eq i32 %34, 0
  %36 = getelementptr inbounds %struct.unop, ptr %3, i64 0, i32 5
  %37 = load i8, ptr %36, align 2
  %38 = select i1 %35, i8 64, i8 %37
  %39 = getelementptr inbounds %struct.unop, ptr %3, i64 0, i32 4
  %40 = load i16, ptr %39, align 8
  %41 = and i16 %40, -512
  %42 = or i16 %41, 342
  store i16 %42, ptr %39, align 8
  %43 = and i32 %1, 3
  %44 = getelementptr inbounds %struct.unop, ptr %3, i64 0, i32 5
  %45 = trunc i32 %43 to i8
  %46 = or i8 %38, %45
  %47 = and i32 %1, 32
  %48 = icmp eq i32 %47, 0
  %49 = or i8 %46, -128
  %50 = select i1 %48, i8 %46, i8 %49
  store i8 %50, ptr %44, align 2, !tbaa !140
  %51 = and i32 %1, 2048
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %31
  %54 = getelementptr inbounds %struct.unop, ptr %3, i64 0, i32 6
  store i8 48, ptr %54, align 1, !tbaa !142
  br label %55

55:                                               ; preds = %53, %31
  %56 = load i8, ptr @PL_tainting, align 1, !tbaa !14, !range !28, !noundef !29
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %59, label %58

58:                                               ; preds = %55
  call void @Perl_taint_proper(ptr noundef null, ptr noundef nonnull @.str.14) #17
  br label %59

59:                                               ; preds = %58, %55
  %60 = load ptr, ptr @PL_top_env, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.jmpenv, ptr %6, i64 0, i32 1
  store ptr %60, ptr %61, align 8, !tbaa !30
  %62 = call i32 @__sigsetjmp(ptr noundef nonnull %6, i32 noundef 0) #19
  %63 = getelementptr inbounds %struct.jmpenv, ptr %6, i64 0, i32 2
  store i32 %62, ptr %63, align 8, !tbaa !32
  store ptr %6, ptr @PL_top_env, align 8, !tbaa !5
  %64 = getelementptr inbounds %struct.jmpenv, ptr %6, i64 0, i32 3
  store i8 0, ptr %64, align 4, !tbaa !33
  switch i32 %62, label %158 [
    i32 0, label %65
    i32 1, label %115
    i32 2, label %116
    i32 3, label %145
  ]

65:                                               ; preds = %59
  %66 = load ptr, ptr @PL_op, align 8, !tbaa !5
  br label %67

67:                                               ; preds = %65, %148
  %68 = phi ptr [ %66, %65 ], [ %146, %148 ]
  %69 = icmp eq ptr %68, %3
  br i1 %69, label %70, label %74

70:                                               ; preds = %67
  %71 = load ptr, ptr getelementptr inbounds ([0 x ptr], ptr @PL_ppaddr, i64 0, i64 342), align 8, !tbaa !5
  %72 = call ptr %71() #17
  store ptr %72, ptr @PL_op, align 8, !tbaa !5
  %73 = icmp eq ptr %72, null
  br i1 %73, label %149, label %74

74:                                               ; preds = %70, %67
  %75 = load ptr, ptr @PL_runops, align 8, !tbaa !5
  %76 = call i32 %75() #17
  %77 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %78 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %79 = load volatile i32, ptr %4, align 4, !tbaa !9
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds ptr, ptr %78, i64 %80
  %82 = ptrtoint ptr %77 to i64
  %83 = ptrtoint ptr %81 to i64
  %84 = sub i64 %82, %83
  %85 = lshr exact i64 %84, 3
  %86 = trunc i64 %85 to i32
  store volatile i32 %86, ptr %5, align 4, !tbaa !9
  br i1 %48, label %87, label %158

87:                                               ; preds = %74
  %88 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %89 = getelementptr inbounds %struct.gv, ptr %88, i64 0, i32 3
  %90 = load ptr, ptr %89, align 8, !tbaa !11
  %91 = load ptr, ptr %90, align 8, !tbaa !5
  %92 = icmp eq ptr %91, null
  br i1 %92, label %105, label %93

93:                                               ; preds = %87
  %94 = getelementptr inbounds %struct.sv, ptr %91, i64 0, i32 2
  %95 = load i32, ptr %94, align 4, !tbaa !18
  %96 = and i32 %95, 134283264
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %107, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.sv, ptr %91, i64 0, i32 1
  %100 = load i32, ptr %99, align 8, !tbaa !20
  %101 = icmp ugt i32 %100, 1
  br i1 %101, label %102, label %104

102:                                              ; preds = %98
  %103 = add i32 %100, -1
  store i32 %103, ptr %99, align 8, !tbaa !20
  br label %105

104:                                              ; preds = %98
  call void @Perl_sv_free2(ptr noundef nonnull %91, i32 noundef %100) #17
  br label %105

105:                                              ; preds = %104, %102, %87
  %106 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %106, ptr %90, align 8, !tbaa !5
  br label %158

107:                                              ; preds = %93
  call void @Perl_sv_setpvn(ptr noundef nonnull %91, ptr noundef nonnull @.str.1, i64 noundef 0) #17
  %108 = load i32, ptr %94, align 4, !tbaa !18
  %109 = and i32 %108, 1610547455
  %110 = or i32 %109, 17408
  store i32 %110, ptr %94, align 4, !tbaa !18
  %111 = and i32 %108, 14680064
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %158, label %113

113:                                              ; preds = %107
  %114 = call i32 @Perl_mg_free(ptr noundef nonnull %91) #17
  br label %158

115:                                              ; preds = %59
  store i32 1, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 1, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  br label %116

116:                                              ; preds = %59, %115
  %117 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %118 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  %119 = icmp eq ptr %117, %118
  br i1 %119, label %138, label %120

120:                                              ; preds = %116
  %121 = icmp eq ptr %117, null
  br i1 %121, label %130, label %122

122:                                              ; preds = %120
  %123 = getelementptr inbounds %struct.sv, ptr %117, i64 0, i32 1
  %124 = load i32, ptr %123, align 8, !tbaa !20
  %125 = icmp ugt i32 %124, 1
  br i1 %125, label %126, label %128

126:                                              ; preds = %122
  %127 = add i32 %124, -1
  store i32 %127, ptr %123, align 8, !tbaa !20
  br label %130

128:                                              ; preds = %122
  call void @Perl_sv_free2(ptr noundef nonnull %117, i32 noundef %124) #17
  %129 = load ptr, ptr @PL_defstash, align 8, !tbaa !5
  br label %130

130:                                              ; preds = %126, %128, %120
  %131 = phi ptr [ %118, %120 ], [ %129, %128 ], [ %118, %126 ]
  %132 = icmp eq ptr %131, null
  br i1 %132, label %137, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %struct.sv, ptr %131, i64 0, i32 1
  %135 = load i32, ptr %134, align 8, !tbaa !20
  %136 = add i32 %135, 1
  store i32 %136, ptr %134, align 8, !tbaa !20
  br label %137

137:                                              ; preds = %130, %133
  store ptr %131, ptr @PL_curstash, align 8, !tbaa !5
  br label %138

138:                                              ; preds = %137, %116
  %139 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %140 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %141 = icmp sgt i64 %139, %140
  br i1 %141, label %142, label %143

142:                                              ; preds = %138
  call void @Perl_free_tmps() #17
  br label %143

143:                                              ; preds = %138, %142
  %144 = load ptr, ptr %61, align 8, !tbaa !30
  store ptr %144, ptr @PL_top_env, align 8, !tbaa !5
  call fastcc void @S_my_exit_jump()
  unreachable

145:                                              ; preds = %59
  %146 = load ptr, ptr @PL_restartop, align 8, !tbaa !5
  %147 = icmp eq ptr %146, null
  br i1 %147, label %149, label %148

148:                                              ; preds = %145
  store ptr null, ptr @PL_restartjmpenv, align 8, !tbaa !5
  store ptr %146, ptr @PL_op, align 8, !tbaa !5
  store ptr null, ptr @PL_restartop, align 8, !tbaa !5
  br label %67

149:                                              ; preds = %145, %70
  %150 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %151 = load volatile i32, ptr %4, align 4, !tbaa !9
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds ptr, ptr %150, i64 %152
  store ptr %153, ptr @PL_stack_sp, align 8, !tbaa !5
  %154 = icmp eq i32 %43, 3
  br i1 %154, label %155, label %156

155:                                              ; preds = %149
  store volatile i32 0, ptr %5, align 4, !tbaa !9
  br label %158

156:                                              ; preds = %149
  store volatile i32 1, ptr %5, align 4, !tbaa !9
  %157 = getelementptr inbounds ptr, ptr %153, i64 1
  store ptr %157, ptr @PL_stack_sp, align 8, !tbaa !5
  store ptr @PL_sv_undef, ptr %157, align 8, !tbaa !5
  br label %158

158:                                              ; preds = %105, %113, %107, %59, %74, %156, %155
  %159 = load ptr, ptr %61, align 8, !tbaa !30
  store ptr %159, ptr @PL_top_env, align 8, !tbaa !5
  br i1 %16, label %170, label %160

160:                                              ; preds = %158
  %161 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %162 = load volatile i32, ptr %4, align 4, !tbaa !9
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds ptr, ptr %161, i64 %163
  store ptr %164, ptr @PL_stack_sp, align 8, !tbaa !5
  store volatile i32 0, ptr %5, align 4, !tbaa !9
  %165 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !12
  %166 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !12
  %167 = icmp sgt i64 %165, %166
  br i1 %167, label %168, label %169

168:                                              ; preds = %160
  call void @Perl_free_tmps() #17
  br label %169

169:                                              ; preds = %168, %160
  call void @Perl_pop_scope() #17
  br label %170

170:                                              ; preds = %169, %158
  store ptr %14, ptr @PL_op, align 8, !tbaa !5
  %171 = load volatile i32, ptr %5, align 4, !tbaa !9
  call void @llvm.lifetime.end.p0(i64 216, ptr nonnull %6) #17
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %3) #17
  ret i32 %171
}

declare void @Perl_taint_proper(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_eval_pv(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = tail call ptr @Perl_newSVpv(ptr noundef %0, i64 noundef 0) #17
  %4 = tail call i32 @Perl_eval_sv(ptr noundef %3, i32 noundef 2)
  %5 = icmp eq ptr %3, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 1
  %8 = load i32, ptr %7, align 8, !tbaa !20
  %9 = icmp ugt i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = add i32 %8, -1
  store i32 %11, ptr %7, align 8, !tbaa !20
  br label %13

12:                                               ; preds = %6
  tail call void @Perl_sv_free2(ptr noundef nonnull %3, i32 noundef %8) #17
  br label %13

13:                                               ; preds = %2, %10, %12
  %14 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %15 = getelementptr inbounds ptr, ptr %14, i64 -1
  %16 = load ptr, ptr %14, align 8, !tbaa !5
  store ptr %15, ptr @PL_stack_sp, align 8, !tbaa !5
  %17 = icmp eq i32 %1, 0
  br i1 %17, label %95, label %18

18:                                               ; preds = %13
  %19 = load ptr, ptr @PL_errgv, align 8, !tbaa !5
  %20 = getelementptr inbounds %struct.gv, ptr %19, i64 0, i32 3
  %21 = load ptr, ptr %20, align 8, !tbaa !11
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %29

24:                                               ; preds = %18
  %25 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %19, i32 noundef 0) #17
  %26 = getelementptr inbounds %struct.gv, ptr %25, i64 0, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !11
  %28 = load ptr, ptr %27, align 8, !tbaa !5
  br label %29

29:                                               ; preds = %18, %24
  %30 = phi ptr [ %28, %24 ], [ %22, %18 ]
  %31 = getelementptr inbounds %struct.sv, ptr %30, i64 0, i32 2
  %32 = load i32, ptr %31, align 4, !tbaa !18
  %33 = and i32 %32, 2097152
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %29
  %36 = tail call zeroext i1 @Perl_sv_2bool_flags(ptr noundef nonnull %30, i32 noundef 2) #17
  br i1 %36, label %84, label %95

37:                                               ; preds = %29
  %38 = and i32 %32, 65280
  %39 = icmp ne i32 %38, 0
  %40 = and i32 %32, 255
  %41 = icmp eq i32 %40, 8
  %42 = or i1 %39, %41
  %43 = and i32 %32, 16826623
  %44 = icmp eq i32 %43, 16777226
  %45 = or i1 %44, %42
  br i1 %45, label %46, label %95

46:                                               ; preds = %37
  %47 = and i32 %32, 1024
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %63, label %49

49:                                               ; preds = %46
  %50 = load ptr, ptr %30, align 8, !tbaa !64
  %51 = icmp eq ptr %50, null
  br i1 %51, label %95, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.xpv, ptr %50, i64 0, i32 2
  %54 = load i64, ptr %53, align 8, !tbaa !82
  %55 = icmp ugt i64 %54, 1
  br i1 %55, label %84, label %56

56:                                               ; preds = %52
  %57 = icmp eq i64 %54, 0
  br i1 %57, label %95, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.sv, ptr %30, i64 0, i32 3
  %60 = load ptr, ptr %59, align 8, !tbaa !11
  %61 = load i8, ptr %60, align 1, !tbaa !11
  %62 = icmp eq i8 %61, 48
  br i1 %62, label %95, label %84

63:                                               ; preds = %46
  %64 = and i32 %32, 768
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %63
  %67 = and i32 %32, 256
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %66
  %70 = load ptr, ptr %30, align 8, !tbaa !64
  %71 = getelementptr inbounds %struct.xpviv, ptr %70, i64 0, i32 4
  %72 = load i64, ptr %71, align 8, !tbaa !11
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %84

74:                                               ; preds = %69, %66
  %75 = and i32 %32, 512
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %74
  %78 = load ptr, ptr %30, align 8, !tbaa !64
  %79 = getelementptr inbounds %struct.xpvnv, ptr %78, i64 0, i32 5
  %80 = load double, ptr %79, align 8, !tbaa !11
  %81 = fcmp une double %80, 0.000000e+00
  br i1 %81, label %84, label %95

82:                                               ; preds = %63
  %83 = tail call zeroext i1 @Perl_sv_2bool_flags(ptr noundef nonnull %30, i32 noundef 0) #17
  br i1 %83, label %84, label %95

84:                                               ; preds = %82, %77, %69, %58, %52, %35
  %85 = load i32, ptr %31, align 4, !tbaa !18
  %86 = and i32 %85, 2098176
  %87 = icmp eq i32 %86, 1024
  br i1 %87, label %88, label %91

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.sv, ptr %30, i64 0, i32 3
  %90 = load ptr, ptr %89, align 8, !tbaa !11
  br label %93

91:                                               ; preds = %84
  %92 = tail call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %30, ptr noundef null, i32 noundef 34) #17
  br label %93

93:                                               ; preds = %91, %88
  %94 = phi ptr [ %90, %88 ], [ %92, %91 ]
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.15, ptr noundef %94) #17
  br label %95

95:                                               ; preds = %35, %49, %56, %58, %74, %82, %93, %37, %77, %13
  ret ptr %16
}

declare zeroext i1 @Perl_sv_2bool_flags(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_croak(ptr noundef, ...) local_unnamed_addr #2

declare ptr @Perl_sv_2pv_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_require_pv(ptr noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %3 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.stackinfo, ptr %3, i64 0, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !65
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = tail call ptr @Perl_new_stackinfo(i32 noundef 32, i32 noundef 22) #17
  %9 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.stackinfo, ptr %8, i64 0, i32 2
  store ptr %9, ptr %10, align 8, !tbaa !67
  %11 = getelementptr inbounds %struct.stackinfo, ptr %9, i64 0, i32 3
  store ptr %8, ptr %11, align 8, !tbaa !65
  br label %12

12:                                               ; preds = %7, %1
  %13 = phi ptr [ %5, %1 ], [ %8, %7 ]
  %14 = getelementptr inbounds %struct.stackinfo, ptr %13, i64 0, i32 6
  store i32 9, ptr %14, align 8, !tbaa !21
  %15 = getelementptr inbounds %struct.stackinfo, ptr %13, i64 0, i32 4
  store i32 -1, ptr %15, align 8, !tbaa !56
  %16 = load ptr, ptr %13, align 8, !tbaa !23
  %17 = load ptr, ptr %16, align 8, !tbaa !24
  %18 = getelementptr inbounds %struct.xpvav, ptr %17, i64 0, i32 2
  store i64 0, ptr %18, align 8, !tbaa !81
  %19 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %20 = ptrtoint ptr %2 to i64
  %21 = ptrtoint ptr %19 to i64
  %22 = sub i64 %20, %21
  %23 = ashr exact i64 %22, 3
  %24 = load ptr, ptr @PL_curstack, align 8, !tbaa !5
  %25 = load ptr, ptr %24, align 8, !tbaa !24
  %26 = getelementptr inbounds %struct.xpvav, ptr %25, i64 0, i32 2
  store i64 %23, ptr %26, align 8, !tbaa !81
  %27 = getelementptr inbounds %struct.av, ptr %16, i64 0, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !11
  store ptr %28, ptr @PL_stack_base, align 8, !tbaa !5
  %29 = load ptr, ptr %13, align 8, !tbaa !23
  %30 = load ptr, ptr %29, align 8, !tbaa !24
  %31 = getelementptr inbounds %struct.xpvav, ptr %30, i64 0, i32 3
  %32 = load i64, ptr %31, align 8, !tbaa !26
  %33 = getelementptr inbounds ptr, ptr %28, i64 %32
  store ptr %33, ptr @PL_stack_max, align 8, !tbaa !5
  %34 = load ptr, ptr %13, align 8, !tbaa !23
  %35 = load ptr, ptr %34, align 8, !tbaa !24
  %36 = getelementptr inbounds %struct.xpvav, ptr %35, i64 0, i32 2
  %37 = load i64, ptr %36, align 8, !tbaa !81
  %38 = getelementptr inbounds ptr, ptr %28, i64 %37
  store ptr %38, ptr @PL_stack_sp, align 8, !tbaa !5
  %39 = load ptr, ptr %13, align 8, !tbaa !23
  store ptr %39, ptr @PL_curstack, align 8, !tbaa !5
  store ptr %13, ptr @PL_curstackinfo, align 8, !tbaa !5
  %40 = tail call ptr (ptr, ...) @Perl_newSVpvf(ptr noundef nonnull @.str.16, i32 noundef 0, ptr noundef %0, i32 noundef 0) #17
  %41 = tail call ptr @Perl_sv_2mortal(ptr noundef %40) #17
  %42 = tail call i32 @Perl_eval_sv(ptr noundef %41, i32 noundef 4)
  %43 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %44 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !5
  %45 = getelementptr inbounds %struct.stackinfo, ptr %44, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !67
  %47 = icmp eq ptr %46, null
  br i1 %47, label %48, label %49

48:                                               ; preds = %12
  tail call void @Perl_croak_popstack() #17
  br label %49

49:                                               ; preds = %12, %48
  %50 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %51 = ptrtoint ptr %43 to i64
  %52 = ptrtoint ptr %50 to i64
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 3
  %55 = load ptr, ptr @PL_curstack, align 8, !tbaa !5
  %56 = load ptr, ptr %55, align 8, !tbaa !24
  %57 = getelementptr inbounds %struct.xpvav, ptr %56, i64 0, i32 2
  store i64 %54, ptr %57, align 8, !tbaa !81
  %58 = load ptr, ptr %46, align 8, !tbaa !23
  %59 = getelementptr inbounds %struct.av, ptr %58, i64 0, i32 3
  %60 = load ptr, ptr %59, align 8, !tbaa !11
  store ptr %60, ptr @PL_stack_base, align 8, !tbaa !5
  %61 = load ptr, ptr %46, align 8, !tbaa !23
  %62 = load ptr, ptr %61, align 8, !tbaa !24
  %63 = getelementptr inbounds %struct.xpvav, ptr %62, i64 0, i32 3
  %64 = load i64, ptr %63, align 8, !tbaa !26
  %65 = getelementptr inbounds ptr, ptr %60, i64 %64
  store ptr %65, ptr @PL_stack_max, align 8, !tbaa !5
  %66 = load ptr, ptr %46, align 8, !tbaa !23
  %67 = load ptr, ptr %66, align 8, !tbaa !24
  %68 = getelementptr inbounds %struct.xpvav, ptr %67, i64 0, i32 2
  %69 = load i64, ptr %68, align 8, !tbaa !81
  %70 = getelementptr inbounds ptr, ptr %60, i64 %69
  store ptr %70, ptr @PL_stack_sp, align 8, !tbaa !5
  %71 = load ptr, ptr %46, align 8, !tbaa !23
  store ptr %71, ptr @PL_curstack, align 8, !tbaa !5
  store ptr %46, ptr @PL_curstackinfo, align 8, !tbaa !5
  ret void
}

declare ptr @Perl_new_stackinfo(i32 noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_newSVpvf(ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @Perl_moreswitches(ptr noundef %0) local_unnamed_addr #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = load i8, ptr %0, align 1, !tbaa !11
  %9 = sext i8 %8 to i32
  switch i32 %9, label %534 [
    i32 48, label %11
    i32 67, label %143
    i32 70, label %151
    i32 97, label %174
    i32 99, label %176
    i32 100, label %178
    i32 68, label %261
    i32 104, label %274
    i32 105, label %275
    i32 73, label %316
    i32 108, label %364
    i32 77, label %411
    i32 109, label %411
    i32 110, label %488
    i32 112, label %490
    i32 115, label %492
    i32 116, label %494
    i32 84, label %494
    i32 117, label %500
    i32 85, label %502
    i32 118, label %504
    i32 119, label %505
    i32 87, label %513
    i32 88, label %519
    i32 42, label %10
    i32 32, label %10
    i32 45, label %535
    i32 0, label %535
    i32 13, label %535
    i32 10, label %535
    i32 9, label %535
    i32 101, label %533
    i32 102, label %533
    i32 120, label %533
    i32 69, label %533
    i32 83, label %533
    i32 86, label %533
  ]

10:                                               ; preds = %1, %1
  br label %525

11:                                               ; preds = %1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #17
  store i32 0, ptr %3, align 4, !tbaa !9
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #17
  %12 = load ptr, ptr @PL_rs, align 8, !tbaa !5
  %13 = icmp eq ptr %12, null
  br i1 %13, label %21, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.sv, ptr %12, i64 0, i32 1
  %16 = load i32, ptr %15, align 8, !tbaa !20
  %17 = icmp ugt i32 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = add i32 %16, -1
  store i32 %19, ptr %15, align 8, !tbaa !20
  br label %21

20:                                               ; preds = %14
  tail call void @Perl_sv_free2(ptr noundef nonnull %12, i32 noundef %16) #17
  br label %21

21:                                               ; preds = %11, %18, %20
  %22 = getelementptr inbounds i8, ptr %0, i64 1
  %23 = load i8, ptr %22, align 1, !tbaa !11
  %24 = icmp eq i8 %23, 120
  br i1 %24, label %25, label %114

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, ptr %0, i64 2
  %27 = load i8, ptr %26, align 1, !tbaa !11
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %114, label %29

29:                                               ; preds = %25, %29
  %30 = phi ptr [ %31, %29 ], [ %26, %25 ]
  %31 = getelementptr inbounds i8, ptr %30, i64 1
  %32 = load i8, ptr %31, align 1, !tbaa !11
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %29, !llvm.loop !143

34:                                               ; preds = %29
  %35 = ptrtoint ptr %31 to i64
  %36 = ptrtoint ptr %26 to i64
  %37 = sub i64 %35, %36
  store i64 %37, ptr %4, align 8, !tbaa !12
  store i32 4, ptr %3, align 4, !tbaa !9
  %38 = call i64 @Perl_grok_hex(ptr noundef nonnull %26, ptr noundef nonnull %4, ptr noundef nonnull %3, ptr noundef null) #17
  %39 = and i64 %38, 4294967295
  %40 = load i64, ptr %4, align 8, !tbaa !12
  %41 = getelementptr inbounds i8, ptr %26, i64 %40
  %42 = icmp ult ptr %41, %31
  br i1 %42, label %43, label %45

43:                                               ; preds = %34
  store i64 0, ptr %4, align 8, !tbaa !12
  %44 = getelementptr inbounds i8, ptr %0, i64 1
  br label %45

45:                                               ; preds = %43, %34
  %46 = phi ptr [ %44, %43 ], [ %26, %34 ]
  %47 = phi i64 [ 0, %43 ], [ %39, %34 ]
  %48 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %48, ptr @PL_rs, align 8, !tbaa !5
  %49 = getelementptr inbounds %struct.sv, ptr %48, i64 0, i32 2
  %50 = load i32, ptr %49, align 4, !tbaa !18
  %51 = and i32 %50, 268435456
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %72

53:                                               ; preds = %45
  %54 = load ptr, ptr %48, align 8, !tbaa !64
  %55 = getelementptr inbounds %struct.xpv, ptr %54, i64 0, i32 3
  %56 = load i64, ptr %55, align 8, !tbaa !11
  %57 = icmp ult i64 %47, 128
  br i1 %57, label %69, label %58

58:                                               ; preds = %53
  %59 = icmp ult i64 %47, 2048
  br i1 %59, label %69, label %60

60:                                               ; preds = %58
  %61 = icmp ult i64 %47, 65536
  br i1 %61, label %69, label %62

62:                                               ; preds = %60
  %63 = icmp ult i64 %47, 2097152
  br i1 %63, label %69, label %64

64:                                               ; preds = %62
  %65 = icmp ult i64 %47, 67108864
  br i1 %65, label %69, label %66

66:                                               ; preds = %64
  %67 = icmp ult i64 %47, 2147483648
  %68 = select i1 %67, i64 7, i64 8
  br label %69

69:                                               ; preds = %66, %58, %62, %64, %60, %53
  %70 = phi i64 [ 2, %53 ], [ 3, %58 ], [ 4, %60 ], [ 5, %62 ], [ 6, %64 ], [ %68, %66 ]
  %71 = icmp ult i64 %56, %70
  br i1 %71, label %72, label %89

72:                                               ; preds = %69, %45
  %73 = icmp ult i64 %47, 128
  br i1 %73, label %85, label %74

74:                                               ; preds = %72
  %75 = icmp ult i64 %47, 2048
  br i1 %75, label %85, label %76

76:                                               ; preds = %74
  %77 = icmp ult i64 %47, 65536
  br i1 %77, label %85, label %78

78:                                               ; preds = %76
  %79 = icmp ult i64 %47, 2097152
  br i1 %79, label %85, label %80

80:                                               ; preds = %78
  %81 = icmp ult i64 %47, 67108864
  br i1 %81, label %85, label %82

82:                                               ; preds = %80
  %83 = icmp ult i64 %47, 2147483648
  %84 = select i1 %83, i64 7, i64 8
  br label %85

85:                                               ; preds = %82, %74, %78, %80, %76, %72
  %86 = phi i64 [ 2, %72 ], [ 3, %74 ], [ 4, %76 ], [ 5, %78 ], [ 6, %80 ], [ %84, %82 ]
  %87 = call ptr @Perl_sv_grow(ptr noundef nonnull %48, i64 noundef %86) #17
  %88 = load ptr, ptr @PL_rs, align 8, !tbaa !5
  br label %89

89:                                               ; preds = %69, %85
  %90 = phi ptr [ %48, %69 ], [ %88, %85 ]
  %91 = getelementptr inbounds %struct.sv, ptr %90, i64 0, i32 3
  %92 = load ptr, ptr %91, align 8, !tbaa !11
  %93 = call ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef %92, i64 noundef %47, i64 noundef 0) #17
  %94 = icmp ult i64 %47, 128
  br i1 %94, label %106, label %95

95:                                               ; preds = %89
  %96 = icmp ult i64 %47, 2048
  br i1 %96, label %106, label %97

97:                                               ; preds = %95
  %98 = icmp ult i64 %47, 65536
  br i1 %98, label %106, label %99

99:                                               ; preds = %97
  %100 = icmp ult i64 %47, 2097152
  br i1 %100, label %106, label %101

101:                                              ; preds = %99
  %102 = icmp ult i64 %47, 67108864
  br i1 %102, label %106, label %103

103:                                              ; preds = %101
  %104 = icmp ult i64 %47, 2147483648
  %105 = select i1 %104, i64 6, i64 7
  br label %106

106:                                              ; preds = %103, %95, %99, %101, %97, %89
  %107 = phi i64 [ 1, %89 ], [ 2, %95 ], [ 3, %97 ], [ 4, %99 ], [ 5, %101 ], [ %105, %103 ]
  %108 = load ptr, ptr @PL_rs, align 8, !tbaa !5
  %109 = load ptr, ptr %108, align 8, !tbaa !64
  %110 = getelementptr inbounds %struct.xpv, ptr %109, i64 0, i32 2
  store i64 %107, ptr %110, align 8, !tbaa !82
  %111 = getelementptr inbounds %struct.sv, ptr %108, i64 0, i32 2
  %112 = load i32, ptr %111, align 4, !tbaa !18
  %113 = or i32 %112, 536870912
  store i32 %113, ptr %111, align 4, !tbaa !18
  br label %130

114:                                              ; preds = %25, %21
  store i64 4, ptr %4, align 8, !tbaa !12
  %115 = call i64 @Perl_grok_oct(ptr noundef nonnull %0, ptr noundef nonnull %4, ptr noundef nonnull %3, ptr noundef null) #17
  %116 = and i64 %115, 4294967040
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %119, label %118

118:                                              ; preds = %114
  store ptr @PL_sv_undef, ptr @PL_rs, align 8, !tbaa !5
  br label %130

119:                                              ; preds = %114
  %120 = and i64 %115, 4294967295
  %121 = icmp eq i64 %120, 0
  %122 = load i64, ptr %4, align 8
  %123 = icmp ugt i64 %122, 1
  %124 = select i1 %121, i1 %123, i1 false
  br i1 %124, label %125, label %127

125:                                              ; preds = %119
  %126 = call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.1, i64 noundef 0) #17
  store ptr %126, ptr @PL_rs, align 8, !tbaa !5
  br label %130

127:                                              ; preds = %119
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #17
  %128 = trunc i64 %115 to i8
  store i8 %128, ptr %5, align 1, !tbaa !11
  %129 = call ptr @Perl_newSVpvn(ptr noundef nonnull %5, i64 noundef 1) #17
  store ptr %129, ptr @PL_rs, align 8, !tbaa !5
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #17
  br label %130

130:                                              ; preds = %118, %127, %125, %106
  %131 = phi ptr [ %0, %118 ], [ %0, %127 ], [ %0, %125 ], [ %46, %106 ]
  %132 = call ptr @Perl_gv_fetchpv(ptr noundef nonnull @.str.17, i32 noundef 1, i32 noundef 3) #17
  %133 = icmp eq ptr %132, null
  br i1 %133, label %138, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.gv, ptr %132, i64 0, i32 3
  %136 = load ptr, ptr %135, align 8, !tbaa !11
  %137 = load ptr, ptr %136, align 8, !tbaa !108
  br label %138

138:                                              ; preds = %130, %134
  %139 = phi ptr [ %137, %134 ], [ null, %130 ]
  %140 = load ptr, ptr @PL_rs, align 8, !tbaa !5
  call void @Perl_sv_setsv_flags(ptr noundef %139, ptr noundef %140, i32 noundef 1538) #17
  %141 = load i64, ptr %4, align 8, !tbaa !12
  %142 = getelementptr inbounds i8, ptr %131, i64 %141
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #17
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #17
  br label %535

143:                                              ; preds = %1
  %144 = getelementptr inbounds i8, ptr %0, i64 1
  store ptr %144, ptr %2, align 8, !tbaa !5
  %145 = call i32 @Perl_parse_unicode_opts(ptr noundef nonnull %2) #17
  store i32 %145, ptr @PL_unicode, align 4, !tbaa !9
  %146 = and i32 %145, 256
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %149, label %148

148:                                              ; preds = %143
  store i8 -1, ptr @PL_utf8cache, align 1, !tbaa !11
  br label %149

149:                                              ; preds = %148, %143
  %150 = load ptr, ptr %2, align 8, !tbaa !5
  br label %535

151:                                              ; preds = %1
  store i8 1, ptr @PL_minus_a, align 1, !tbaa !14
  store i8 1, ptr @PL_minus_F, align 1, !tbaa !14
  store i8 1, ptr @PL_minus_n, align 1, !tbaa !14
  %152 = getelementptr inbounds i8, ptr %0, i64 1
  store ptr %152, ptr @PL_splitstr, align 8, !tbaa !5
  %153 = load i8, ptr %152, align 1, !tbaa !11
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %167, label %155

155:                                              ; preds = %151, %163
  %156 = phi i8 [ %165, %163 ], [ %153, %151 ]
  %157 = phi ptr [ %164, %163 ], [ %152, %151 ]
  %158 = zext i8 %156 to i64
  %159 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %158
  %160 = load i32, ptr %159, align 4, !tbaa !9
  %161 = and i32 %160, 17408
  %162 = icmp eq i32 %161, 17408
  br i1 %162, label %167, label %163

163:                                              ; preds = %155
  %164 = getelementptr inbounds i8, ptr %157, i64 1
  %165 = load i8, ptr %164, align 1, !tbaa !11
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %167, label %155, !llvm.loop !144

167:                                              ; preds = %155, %163, %151
  %168 = phi ptr [ %152, %151 ], [ %164, %163 ], [ %157, %155 ]
  %169 = ptrtoint ptr %168 to i64
  %170 = ptrtoint ptr %152 to i64
  %171 = sub i64 %169, %170
  %172 = trunc i64 %171 to i32
  %173 = tail call ptr @Perl_savepvn(ptr noundef nonnull %152, i32 noundef %172) #17
  store ptr %173, ptr @PL_splitstr, align 8, !tbaa !5
  br label %535

174:                                              ; preds = %1
  store i8 1, ptr @PL_minus_a, align 1, !tbaa !14
  store i8 1, ptr @PL_minus_n, align 1, !tbaa !14
  %175 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

176:                                              ; preds = %1
  store i8 1, ptr @PL_minus_c, align 1, !tbaa !14
  %177 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

178:                                              ; preds = %1
  %179 = getelementptr inbounds i8, ptr %0, i64 1
  %180 = load i8, ptr %179, align 1, !tbaa !11
  %181 = icmp eq i8 %180, 116
  br i1 %181, label %182, label %192

182:                                              ; preds = %178
  %183 = getelementptr inbounds i8, ptr %0, i64 2
  %184 = load i8, ptr %183, align 1, !tbaa !11
  %185 = zext i8 %184 to i64
  %186 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %185
  %187 = load i32, ptr %186, align 4, !tbaa !9
  %188 = and i32 %187, 16385
  %189 = icmp eq i32 %188, 16385
  br i1 %189, label %256, label %190

190:                                              ; preds = %182
  tail call void @Perl_my_setenv(ptr noundef nonnull @.str.18, ptr noundef nonnull @.str.19) #17
  %191 = load i8, ptr %183, align 1, !tbaa !11
  br label %192

192:                                              ; preds = %190, %178
  %193 = phi i8 [ %191, %190 ], [ %180, %178 ]
  %194 = phi ptr [ %183, %190 ], [ %179, %178 ]
  switch i8 %193, label %256 [
    i8 58, label %195
    i8 61, label %195
  ]

195:                                              ; preds = %192, %192
  %196 = getelementptr inbounds i8, ptr %194, i64 1
  %197 = load i8, ptr %196, align 1, !tbaa !11
  %198 = icmp eq i8 %197, 45
  br i1 %198, label %199, label %202

199:                                              ; preds = %195
  %200 = getelementptr inbounds i8, ptr %194, i64 2
  %201 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.20, i64 noundef 10) #17
  br label %204

202:                                              ; preds = %195
  %203 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.21, i64 noundef 11) #17
  br label %204

204:                                              ; preds = %202, %199
  %205 = phi ptr [ %200, %199 ], [ %196, %202 ]
  %206 = phi ptr [ %201, %199 ], [ %203, %202 ]
  %207 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %205) #21
  %208 = getelementptr inbounds i8, ptr %205, i64 %207
  %209 = load i8, ptr %205, align 1, !tbaa !11
  %210 = zext i8 %209 to i64
  %211 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %210
  %212 = load i32, ptr %211, align 4, !tbaa !9
  %213 = and i32 %212, 16385
  %214 = icmp eq i32 %213, 16385
  %215 = icmp eq i8 %209, 58
  %216 = or i1 %215, %214
  br i1 %216, label %217, label %228

217:                                              ; preds = %204, %217
  %218 = phi ptr [ %219, %217 ], [ %205, %204 ]
  %219 = getelementptr inbounds i8, ptr %218, i64 1
  store ptr %219, ptr %2, align 8, !tbaa !5
  %220 = load i8, ptr %219, align 1, !tbaa !11
  %221 = zext i8 %220 to i64
  %222 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %221
  %223 = load i32, ptr %222, align 4, !tbaa !9
  %224 = and i32 %223, 16385
  %225 = icmp eq i32 %224, 16385
  %226 = icmp eq i8 %220, 58
  %227 = or i1 %226, %225
  br i1 %227, label %217, label %228, !llvm.loop !145

228:                                              ; preds = %217, %204
  %229 = phi ptr [ %205, %204 ], [ %219, %217 ]
  %230 = phi i8 [ %209, %204 ], [ %220, %217 ]
  %231 = icmp eq i8 %230, 61
  br i1 %231, label %233, label %232

232:                                              ; preds = %228
  tail call void @Perl_sv_catpvn_flags(ptr noundef %206, ptr noundef nonnull %205, i64 noundef %207, i32 noundef 2) #17
  br label %238

233:                                              ; preds = %228
  %234 = ptrtoint ptr %229 to i64
  %235 = ptrtoint ptr %205 to i64
  %236 = sub i64 %234, %235
  tail call void @Perl_sv_catpvn_flags(ptr noundef %206, ptr noundef nonnull %205, i64 noundef %236, i32 noundef 2) #17
  %237 = getelementptr inbounds i8, ptr %229, i64 1
  tail call void (ptr, ptr, ...) @Perl_sv_catpvf(ptr noundef %206, ptr noundef nonnull @.str.22, ptr noundef nonnull %237) #17
  br label %238

238:                                              ; preds = %233, %232
  %239 = getelementptr inbounds %struct.sv, ptr %206, i64 0, i32 2
  %240 = load i32, ptr %239, align 4, !tbaa !18
  %241 = and i32 %240, 2098176
  %242 = icmp eq i32 %241, 1024
  br i1 %242, label %243, label %246

243:                                              ; preds = %238
  %244 = getelementptr inbounds %struct.sv, ptr %206, i64 0, i32 3
  %245 = load ptr, ptr %244, align 8, !tbaa !11
  br label %248

246:                                              ; preds = %238
  %247 = tail call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %206, ptr noundef null, i32 noundef 34) #17
  br label %248

248:                                              ; preds = %243, %246
  %249 = phi ptr [ %245, %243 ], [ %247, %246 ]
  tail call void @Perl_my_setenv(ptr noundef nonnull @.str.23, ptr noundef %249) #17
  %250 = getelementptr inbounds %struct.sv, ptr %206, i64 0, i32 1
  %251 = load i32, ptr %250, align 8, !tbaa !20
  %252 = icmp ugt i32 %251, 1
  br i1 %252, label %253, label %255

253:                                              ; preds = %248
  %254 = add i32 %251, -1
  store i32 %254, ptr %250, align 8, !tbaa !20
  br label %256

255:                                              ; preds = %248
  tail call void @Perl_sv_free2(ptr noundef nonnull %206, i32 noundef %251) #17
  br label %256

256:                                              ; preds = %182, %255, %253, %192
  %257 = phi ptr [ %208, %255 ], [ %208, %253 ], [ %194, %192 ], [ %179, %182 ]
  %258 = load i32, ptr @PL_perldb, align 4, !tbaa !9
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %535

260:                                              ; preds = %256
  store i32 1855, ptr @PL_perldb, align 4, !tbaa !9
  tail call void @Perl_init_debugger()
  br label %535

261:                                              ; preds = %1
  %262 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 22) #17
  br i1 %262, label %263, label %264

263:                                              ; preds = %261
  tail call void (i32, ptr, ...) @Perl_warner(i32 noundef 22, ptr noundef nonnull @.str.24) #17
  br label %264

264:                                              ; preds = %263, %261
  br label %265

265:                                              ; preds = %264, %265
  %266 = phi ptr [ %267, %265 ], [ %0, %264 ]
  %267 = getelementptr inbounds i8, ptr %266, i64 1
  %268 = load i8, ptr %267, align 1, !tbaa !11
  %269 = zext i8 %268 to i64
  %270 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %269
  %271 = load i32, ptr %270, align 4, !tbaa !9
  %272 = and i32 %271, 16385
  %273 = icmp eq i32 %272, 16385
  br i1 %273, label %265, label %535, !llvm.loop !146

274:                                              ; preds = %1
  tail call fastcc void @S_usage()
  unreachable

275:                                              ; preds = %1
  %276 = load ptr, ptr @PL_inplace, align 8, !tbaa !5
  tail call void @Perl_safesysfree(ptr noundef %276) #17
  %277 = getelementptr inbounds i8, ptr %0, i64 1
  store ptr %277, ptr %2, align 8, !tbaa !5
  %278 = load i8, ptr %277, align 1, !tbaa !11
  %279 = icmp eq i8 %278, 0
  br i1 %279, label %301, label %280

280:                                              ; preds = %275
  %281 = load ptr, ptr %2, align 8, !tbaa !5
  %282 = zext i8 %278 to i64
  %283 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %282
  %284 = load i32, ptr %283, align 4, !tbaa !9
  %285 = and i32 %284, 17408
  %286 = icmp eq i32 %285, 17408
  br i1 %286, label %298, label %293

287:                                              ; preds = %293
  %288 = zext i8 %296 to i64
  %289 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %288
  %290 = load i32, ptr %289, align 4, !tbaa !9
  %291 = and i32 %290, 17408
  %292 = icmp eq i32 %291, 17408
  br i1 %292, label %298, label %293, !llvm.loop !147

293:                                              ; preds = %280, %287
  %294 = phi ptr [ %295, %287 ], [ %277, %280 ]
  %295 = getelementptr inbounds i8, ptr %294, i64 1
  %296 = load i8, ptr %295, align 1, !tbaa !11
  %297 = icmp eq i8 %296, 0
  br i1 %297, label %298, label %287, !llvm.loop !147

298:                                              ; preds = %287, %293, %280
  %299 = phi ptr [ %281, %280 ], [ %295, %293 ], [ %295, %287 ]
  %300 = phi ptr [ %277, %280 ], [ %295, %293 ], [ %295, %287 ]
  store ptr %299, ptr %2, align 8, !tbaa !5
  br label %301

301:                                              ; preds = %298, %275
  %302 = phi ptr [ %277, %275 ], [ %300, %298 ]
  %303 = ptrtoint ptr %302 to i64
  %304 = ptrtoint ptr %277 to i64
  %305 = sub i64 %303, %304
  %306 = trunc i64 %305 to i32
  %307 = tail call ptr @Perl_savepvn(ptr noundef nonnull %277, i32 noundef %306) #17
  store ptr %307, ptr @PL_inplace, align 8, !tbaa !5
  %308 = load i8, ptr %302, align 1, !tbaa !11
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %535, label %310

310:                                              ; preds = %301
  %311 = getelementptr inbounds i8, ptr %302, i64 1
  store ptr %311, ptr %2, align 8, !tbaa !5
  %312 = load i8, ptr %311, align 1, !tbaa !11
  %313 = icmp eq i8 %312, 45
  %314 = getelementptr inbounds i8, ptr %302, i64 2
  %315 = select i1 %313, ptr %314, ptr %311
  br label %535

316:                                              ; preds = %1, %321
  %317 = phi ptr [ %318, %321 ], [ %0, %1 ]
  %318 = getelementptr inbounds i8, ptr %317, i64 1
  %319 = load i8, ptr %318, align 1, !tbaa !11
  %320 = icmp eq i8 %319, 0
  br i1 %320, label %363, label %321

321:                                              ; preds = %316
  %322 = zext i8 %319 to i64
  %323 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %322
  %324 = load i32, ptr %323, align 4, !tbaa !9
  %325 = and i32 %324, 17408
  %326 = icmp eq i32 %325, 17408
  br i1 %326, label %316, label %327, !llvm.loop !148

327:                                              ; preds = %321
  store ptr %318, ptr %2, align 8, !tbaa !5
  br label %328

328:                                              ; preds = %327, %355
  %329 = phi i8 [ %348, %355 ], [ %319, %327 ]
  %330 = phi ptr [ %347, %355 ], [ %318, %327 ]
  %331 = icmp eq i8 %329, 0
  br i1 %331, label %344, label %332

332:                                              ; preds = %328, %340
  %333 = phi i8 [ %342, %340 ], [ %329, %328 ]
  %334 = phi ptr [ %341, %340 ], [ %330, %328 ]
  %335 = zext i8 %333 to i64
  %336 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %335
  %337 = load i32, ptr %336, align 4, !tbaa !9
  %338 = and i32 %337, 17408
  %339 = icmp eq i32 %338, 17408
  br i1 %339, label %344, label %340

340:                                              ; preds = %332
  %341 = getelementptr inbounds i8, ptr %334, i64 1
  %342 = load i8, ptr %341, align 1, !tbaa !11
  %343 = icmp eq i8 %342, 0
  br i1 %343, label %344, label %332, !llvm.loop !149

344:                                              ; preds = %332, %340, %328
  %345 = phi ptr [ %330, %328 ], [ %341, %340 ], [ %334, %332 ]
  br label %346

346:                                              ; preds = %346, %344
  %347 = phi ptr [ %345, %344 ], [ %354, %346 ]
  %348 = load i8, ptr %347, align 1, !tbaa !11
  %349 = zext i8 %348 to i64
  %350 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %349
  %351 = load i32, ptr %350, align 4, !tbaa !9
  %352 = and i32 %351, 17408
  %353 = icmp eq i32 %352, 17408
  %354 = getelementptr inbounds i8, ptr %347, i64 1
  br i1 %353, label %346, label %355, !llvm.loop !150

355:                                              ; preds = %346
  switch i8 %348, label %328 [
    i8 0, label %356
    i8 45, label %356
  ]

356:                                              ; preds = %355, %355
  %357 = ptrtoint ptr %345 to i64
  %358 = ptrtoint ptr %318 to i64
  %359 = sub i64 %357, %358
  tail call fastcc void @S_incpush(ptr noundef nonnull %318, i64 noundef %359, i32 noundef 15)
  store ptr %347, ptr %2, align 8, !tbaa !5
  %360 = load i8, ptr %347, align 1, !tbaa !11
  %361 = icmp eq i8 %360, 45
  %362 = select i1 %361, ptr %354, ptr %347
  br label %535

363:                                              ; preds = %316
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.25) #17
  br label %535

364:                                              ; preds = %1
  store i8 1, ptr @PL_minus_l, align 1, !tbaa !14
  %365 = getelementptr inbounds i8, ptr %0, i64 1
  store ptr %365, ptr %2, align 8, !tbaa !5
  %366 = load ptr, ptr @PL_ors_sv, align 8, !tbaa !5
  %367 = icmp eq ptr %366, null
  br i1 %367, label %376, label %368

368:                                              ; preds = %364
  %369 = getelementptr inbounds %struct.sv, ptr %366, i64 0, i32 1
  %370 = load i32, ptr %369, align 8, !tbaa !20
  %371 = icmp ugt i32 %370, 1
  br i1 %371, label %372, label %374

372:                                              ; preds = %368
  %373 = add i32 %370, -1
  store i32 %373, ptr %369, align 8, !tbaa !20
  br label %375

374:                                              ; preds = %368
  tail call void @Perl_sv_free2(ptr noundef nonnull %366, i32 noundef %370) #17
  br label %375

375:                                              ; preds = %372, %374
  store ptr null, ptr @PL_ors_sv, align 8, !tbaa !5
  br label %376

376:                                              ; preds = %375, %364
  %377 = load i8, ptr %365, align 1, !tbaa !11
  %378 = zext i8 %377 to i64
  %379 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %378
  %380 = load i32, ptr %379, align 4, !tbaa !9
  %381 = and i32 %380, 2
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %396, label %383

383:                                              ; preds = %376
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #17
  store i32 0, ptr %6, align 4, !tbaa !9
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #17
  %384 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str, i64 noundef 1) #17
  store ptr %384, ptr @PL_ors_sv, align 8, !tbaa !5
  %385 = load i8, ptr %365, align 1, !tbaa !11
  %386 = icmp eq i8 %385, 48
  %387 = select i1 %386, i64 4, i64 3
  store i64 %387, ptr %7, align 8, !tbaa !12
  %388 = call i64 @Perl_grok_oct(ptr noundef nonnull %365, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef null) #17
  %389 = trunc i64 %388 to i8
  %390 = load ptr, ptr @PL_ors_sv, align 8, !tbaa !5
  %391 = getelementptr inbounds %struct.sv, ptr %390, i64 0, i32 3
  %392 = load ptr, ptr %391, align 8, !tbaa !11
  store i8 %389, ptr %392, align 1, !tbaa !11
  %393 = load i64, ptr %7, align 8, !tbaa !12
  %394 = load ptr, ptr %2, align 8, !tbaa !5
  %395 = getelementptr inbounds i8, ptr %394, i64 %393
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #17
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #17
  br label %535

396:                                              ; preds = %376
  %397 = load ptr, ptr @PL_rs, align 8, !tbaa !5
  %398 = getelementptr inbounds %struct.sv, ptr %397, i64 0, i32 2
  %399 = load i32, ptr %398, align 4, !tbaa !18
  %400 = and i32 %399, 1024
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %409, label %402

402:                                              ; preds = %396
  %403 = load ptr, ptr %397, align 8, !tbaa !64
  %404 = getelementptr inbounds %struct.xpv, ptr %403, i64 0, i32 2
  %405 = load i64, ptr %404, align 8, !tbaa !82
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %407, label %409

407:                                              ; preds = %402
  %408 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.26, i64 noundef 2) #17
  store ptr %408, ptr @PL_ors_sv, align 8, !tbaa !5
  br label %535

409:                                              ; preds = %402, %396
  %410 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %397) #17
  store ptr %410, ptr @PL_ors_sv, align 8, !tbaa !5
  br label %535

411:                                              ; preds = %1, %1
  %412 = getelementptr inbounds i8, ptr %0, i64 1
  store ptr %412, ptr %2, align 8, !tbaa !5
  %413 = load i8, ptr %412, align 1, !tbaa !11
  switch i8 %413, label %416 [
    i8 0, label %487
    i8 45, label %414
  ]

414:                                              ; preds = %411
  %415 = getelementptr inbounds i8, ptr %0, i64 2
  store ptr %415, ptr %2, align 8, !tbaa !5
  br label %416

416:                                              ; preds = %411, %414
  %417 = phi ptr [ %415, %414 ], [ %412, %411 ]
  %418 = phi ptr [ @.str.28, %414 ], [ @.str.27, %411 ]
  %419 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull %418, i64 noundef 4) #17
  %420 = load i8, ptr %417, align 1, !tbaa !11
  %421 = zext i8 %420 to i64
  %422 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %421
  %423 = load i32, ptr %422, align 4, !tbaa !9
  %424 = and i32 %423, 16385
  %425 = icmp eq i32 %424, 16385
  %426 = icmp eq i8 %420, 58
  %427 = or i1 %426, %425
  br i1 %427, label %428, label %452

428:                                              ; preds = %416, %439
  %429 = phi i8 [ %441, %439 ], [ 0, %416 ]
  %430 = phi ptr [ %440, %439 ], [ %417, %416 ]
  %431 = getelementptr inbounds i8, ptr %430, i64 1
  store ptr %431, ptr %2, align 8, !tbaa !5
  %432 = load i8, ptr %430, align 1, !tbaa !11
  %433 = icmp eq i8 %432, 58
  br i1 %433, label %434, label %439

434:                                              ; preds = %428
  %435 = load i8, ptr %431, align 1, !tbaa !11
  %436 = icmp eq i8 %435, 58
  br i1 %436, label %437, label %439

437:                                              ; preds = %434
  %438 = getelementptr inbounds i8, ptr %430, i64 2
  store ptr %438, ptr %2, align 8, !tbaa !5
  br label %439

439:                                              ; preds = %434, %437, %428
  %440 = phi ptr [ %438, %437 ], [ %431, %428 ], [ %431, %434 ]
  %441 = phi i8 [ %429, %437 ], [ %429, %428 ], [ 1, %434 ]
  %442 = load i8, ptr %440, align 1, !tbaa !11
  %443 = zext i8 %442 to i64
  %444 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %443
  %445 = load i32, ptr %444, align 4, !tbaa !9
  %446 = and i32 %445, 16385
  %447 = icmp eq i32 %446, 16385
  %448 = icmp eq i8 %442, 58
  %449 = or i1 %448, %447
  br i1 %449, label %428, label %450, !llvm.loop !151

450:                                              ; preds = %439
  %451 = icmp eq ptr %440, %417
  br i1 %451, label %452, label %455

452:                                              ; preds = %416, %450
  %453 = phi ptr [ %440, %450 ], [ %417, %416 ]
  %454 = phi i8 [ %441, %450 ], [ 0, %416 ]
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.29, i32 noundef %9) #17
  br label %455

455:                                              ; preds = %452, %450
  %456 = phi ptr [ %453, %452 ], [ %440, %450 ]
  %457 = phi i8 [ %454, %452 ], [ %441, %450 ]
  %458 = and i8 %457, 1
  %459 = icmp eq i8 %458, 0
  br i1 %459, label %465, label %460

460:                                              ; preds = %455
  %461 = ptrtoint ptr %456 to i64
  %462 = ptrtoint ptr %417 to i64
  %463 = sub i64 %461, %462
  %464 = trunc i64 %463 to i32
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.30, i32 noundef %464, ptr noundef nonnull %417, i32 noundef %9) #17
  br label %465

465:                                              ; preds = %460, %455
  %466 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %456) #21
  %467 = getelementptr inbounds i8, ptr %456, i64 %466
  %468 = load i8, ptr %456, align 1, !tbaa !11
  %469 = icmp eq i8 %468, 61
  %470 = ptrtoint ptr %417 to i64
  br i1 %469, label %481, label %471

471:                                              ; preds = %465
  %472 = ptrtoint ptr %467 to i64
  %473 = sub i64 %472, %470
  tail call void @Perl_sv_catpvn_flags(ptr noundef %419, ptr noundef nonnull %417, i64 noundef %473, i32 noundef 2) #17
  %474 = icmp eq i8 %8, 109
  br i1 %474, label %475, label %486

475:                                              ; preds = %471
  %476 = load i8, ptr %456, align 1, !tbaa !11
  %477 = icmp eq i8 %476, 0
  br i1 %477, label %480, label %478

478:                                              ; preds = %475
  %479 = sext i8 %476 to i32
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.31, i32 noundef %479) #17
  br label %480

480:                                              ; preds = %478, %475
  tail call void @Perl_sv_catpvn_flags(ptr noundef %419, ptr noundef nonnull @.str.32, i64 noundef 3, i32 noundef 2) #17
  br label %486

481:                                              ; preds = %465
  %482 = ptrtoint ptr %456 to i64
  %483 = sub i64 %482, %470
  tail call void @Perl_sv_catpvn_flags(ptr noundef %419, ptr noundef nonnull %417, i64 noundef %483, i32 noundef 2) #17
  tail call void @Perl_sv_catpvn_flags(ptr noundef %419, ptr noundef nonnull @.str.33, i64 noundef 13, i32 noundef 2) #17
  %484 = getelementptr inbounds i8, ptr %456, i64 1
  %485 = add nsw i64 %466, -1
  tail call void @Perl_sv_catpvn_flags(ptr noundef %419, ptr noundef nonnull %484, i64 noundef %485, i32 noundef 2) #17
  tail call void @Perl_sv_catpvn_flags(ptr noundef %419, ptr noundef nonnull @.str.34, i64 noundef 2, i32 noundef 2) #17
  br label %486

486:                                              ; preds = %471, %480, %481
  tail call void @Perl_av_create_and_push(ptr noundef nonnull @PL_preambleav, ptr noundef %419) #17
  br label %535

487:                                              ; preds = %411
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.35, i32 noundef %9) #17
  br label %535

488:                                              ; preds = %1
  store i8 1, ptr @PL_minus_n, align 1, !tbaa !14
  %489 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

490:                                              ; preds = %1
  store i8 1, ptr @PL_minus_p, align 1, !tbaa !14
  %491 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

492:                                              ; preds = %1
  store i8 1, ptr @PL_doswitches, align 1, !tbaa !14
  %493 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

494:                                              ; preds = %1, %1
  %495 = load i8, ptr @PL_tainting, align 1, !tbaa !14, !range !28, !noundef !29
  %496 = icmp eq i8 %495, 0
  br i1 %496, label %497, label %498

497:                                              ; preds = %494
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.36, i32 noundef %9, ptr noundef nonnull @.str.1) #17
  br label %498

498:                                              ; preds = %497, %494
  %499 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

500:                                              ; preds = %1
  store i8 1, ptr @PL_do_undump, align 1, !tbaa !14
  %501 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

502:                                              ; preds = %1
  store i8 1, ptr @PL_unsafe, align 1, !tbaa !14
  %503 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

504:                                              ; preds = %1
  tail call fastcc void @S_minus_v()
  unreachable

505:                                              ; preds = %1
  %506 = load i8, ptr @PL_dowarn, align 1, !tbaa !11
  %507 = and i8 %506, 6
  %508 = icmp eq i8 %507, 0
  br i1 %508, label %509, label %511

509:                                              ; preds = %505
  %510 = or i8 %506, 1
  store i8 %510, ptr @PL_dowarn, align 1, !tbaa !11
  br label %511

511:                                              ; preds = %509, %505
  %512 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

513:                                              ; preds = %1
  store i8 3, ptr @PL_dowarn, align 1, !tbaa !11
  %514 = load ptr, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 12), align 8
  %515 = ptrtoint ptr %514 to i64
  switch i64 %515, label %516 [
    i64 16, label %517
    i64 8, label %517
    i64 0, label %517
  ]

516:                                              ; preds = %513
  tail call void @free(ptr noundef %514) #17
  br label %517

517:                                              ; preds = %513, %513, %513, %516
  store ptr inttoptr (i64 8 to ptr), ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 12), align 8, !tbaa !54
  %518 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

519:                                              ; preds = %1
  store i8 4, ptr @PL_dowarn, align 1, !tbaa !11
  %520 = load ptr, ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 12), align 8
  %521 = ptrtoint ptr %520 to i64
  switch i64 %521, label %522 [
    i64 16, label %523
    i64 8, label %523
    i64 0, label %523
  ]

522:                                              ; preds = %519
  tail call void @free(ptr noundef %520) #17
  br label %523

523:                                              ; preds = %519, %519, %519, %522
  store ptr inttoptr (i64 16 to ptr), ptr getelementptr inbounds (%struct.cop, ptr @PL_compiling, i64 0, i32 12), align 8, !tbaa !54
  %524 = getelementptr inbounds i8, ptr %0, i64 1
  br label %535

525:                                              ; preds = %10, %528
  %526 = phi i8 [ %530, %528 ], [ %8, %10 ]
  %527 = phi ptr [ %529, %528 ], [ %0, %10 ]
  switch i8 %526, label %535 [
    i8 32, label %528
    i8 45, label %531
  ]

528:                                              ; preds = %525
  %529 = getelementptr inbounds i8, ptr %527, i64 1
  %530 = load i8, ptr %529, align 1, !tbaa !11
  br label %525, !llvm.loop !152

531:                                              ; preds = %525
  %532 = getelementptr inbounds i8, ptr %527, i64 1
  br label %535

533:                                              ; preds = %1, %1, %1, %1, %1, %1
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.37, ptr noundef nonnull %0) #17
  br label %534

534:                                              ; preds = %1, %533
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.38, ptr noundef nonnull %0) #17
  br label %535

535:                                              ; preds = %525, %265, %356, %310, %486, %487, %383, %409, %407, %363, %301, %256, %260, %534, %1, %1, %1, %1, %1, %531, %523, %517, %511, %502, %500, %498, %492, %490, %488, %176, %174, %167, %149, %138
  %536 = phi ptr [ %532, %531 ], [ %524, %523 ], [ %518, %517 ], [ %512, %511 ], [ %503, %502 ], [ %501, %500 ], [ %499, %498 ], [ %493, %492 ], [ %491, %490 ], [ %489, %488 ], [ %177, %176 ], [ %175, %174 ], [ %168, %167 ], [ %150, %149 ], [ %142, %138 ], [ null, %1 ], [ null, %1 ], [ null, %1 ], [ null, %1 ], [ null, %1 ], [ null, %534 ], [ %257, %260 ], [ %257, %256 ], [ %302, %301 ], [ %318, %363 ], [ %365, %407 ], [ %365, %409 ], [ %395, %383 ], [ %412, %487 ], [ %467, %486 ], [ %315, %310 ], [ %362, %356 ], [ %267, %265 ], [ null, %525 ]
  ret ptr %536
}

declare i64 @Perl_grok_hex(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @Perl_sv_grow(ptr noundef, i64 noundef) local_unnamed_addr #2

declare ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #2

declare i64 @Perl_grok_oct(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @Perl_sv_setsv_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i32 @Perl_parse_unicode_opts(ptr noundef) local_unnamed_addr #2

declare void @Perl_sv_catpvn_flags(ptr noundef, ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_sv_catpvf(ptr noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_init_debugger() local_unnamed_addr #0 {
  %1 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %2 = load ptr, ptr @PL_debstash, align 8, !tbaa !5
  %3 = icmp eq ptr %2, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %0
  %5 = getelementptr inbounds %struct.sv, ptr %2, i64 0, i32 1
  %6 = load i32, ptr %5, align 8, !tbaa !20
  %7 = add i32 %6, 1
  store i32 %7, ptr %5, align 8, !tbaa !20
  br label %8

8:                                                ; preds = %0, %4
  store ptr %2, ptr @PL_curstash, align 8, !tbaa !5
  tail call void @Perl_init_dbargs()
  %9 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.41, i64 noundef 6, i32 noundef 2, i32 noundef 9) #17
  %10 = icmp eq ptr %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.sv, ptr %9, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !20
  %14 = add i32 %13, 1
  store i32 %14, ptr %12, align 8, !tbaa !20
  br label %15

15:                                               ; preds = %8, %11
  store ptr %9, ptr @PL_DBgv, align 8, !tbaa !5
  %16 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.42, i64 noundef 10, i32 noundef 2, i32 noundef 11) #17
  %17 = icmp eq ptr %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.sv, ptr %16, i64 0, i32 1
  %20 = load i32, ptr %19, align 8, !tbaa !20
  %21 = add i32 %20, 1
  store i32 %21, ptr %19, align 8, !tbaa !20
  br label %22

22:                                               ; preds = %15, %18
  store ptr %16, ptr @PL_DBline, align 8, !tbaa !5
  %23 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.43, i64 noundef 7, i32 noundef 2, i32 noundef 12) #17
  %24 = tail call ptr @Perl_gv_add_by_type(ptr noundef %23, i32 noundef 12) #17
  %25 = icmp eq ptr %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.sv, ptr %24, i64 0, i32 1
  %28 = load i32, ptr %27, align 8, !tbaa !20
  %29 = add i32 %28, 1
  store i32 %29, ptr %27, align 8, !tbaa !20
  br label %30

30:                                               ; preds = %22, %26
  store ptr %24, ptr @PL_DBsub, align 8, !tbaa !5
  %31 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.44, i64 noundef 10, i32 noundef 2, i32 noundef 3) #17
  %32 = getelementptr inbounds %struct.gv, ptr %31, i64 0, i32 3
  %33 = load ptr, ptr %32, align 8, !tbaa !11
  %34 = load ptr, ptr %33, align 8, !tbaa !108
  store ptr %34, ptr @PL_DBsingle, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.sv, ptr %34, i64 0, i32 2
  %36 = load i32, ptr %35, align 4, !tbaa !18
  %37 = and i32 %36, 256
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %30
  tail call void @Perl_sv_setiv(ptr noundef nonnull %34, i64 noundef 0) #17
  %40 = load ptr, ptr @PL_DBsingle, align 8, !tbaa !5
  br label %41

41:                                               ; preds = %39, %30
  %42 = phi ptr [ %40, %39 ], [ %34, %30 ]
  %43 = tail call ptr @Perl_sv_magicext(ptr noundef %42, ptr noundef null, i32 noundef 42, ptr noundef nonnull getelementptr inbounds ([31 x %struct.mgvtbl], ptr @PL_magic_vtables, i64 0, i64 6), ptr noundef null, i32 noundef 0) #17
  %44 = getelementptr inbounds %struct.magic, ptr %43, i64 0, i32 2
  store i16 0, ptr %44, align 8, !tbaa !153
  %45 = load ptr, ptr @PL_DBsingle, align 8, !tbaa !5
  %46 = getelementptr inbounds %struct.sv, ptr %45, i64 0, i32 2
  %47 = load i32, ptr %46, align 4, !tbaa !18
  %48 = and i32 %47, 4194304
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = tail call i32 @Perl_mg_set(ptr noundef nonnull %45) #17
  br label %52

52:                                               ; preds = %41, %50
  %53 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.45, i64 noundef 9, i32 noundef 2, i32 noundef 3) #17
  %54 = getelementptr inbounds %struct.gv, ptr %53, i64 0, i32 3
  %55 = load ptr, ptr %54, align 8, !tbaa !11
  %56 = load ptr, ptr %55, align 8, !tbaa !108
  store ptr %56, ptr @PL_DBtrace, align 8, !tbaa !5
  %57 = getelementptr inbounds %struct.sv, ptr %56, i64 0, i32 2
  %58 = load i32, ptr %57, align 4, !tbaa !18
  %59 = and i32 %58, 256
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %52
  tail call void @Perl_sv_setiv(ptr noundef nonnull %56, i64 noundef 0) #17
  %62 = load ptr, ptr @PL_DBtrace, align 8, !tbaa !5
  br label %63

63:                                               ; preds = %61, %52
  %64 = phi ptr [ %62, %61 ], [ %56, %52 ]
  %65 = tail call ptr @Perl_sv_magicext(ptr noundef %64, ptr noundef null, i32 noundef 42, ptr noundef nonnull getelementptr inbounds ([31 x %struct.mgvtbl], ptr @PL_magic_vtables, i64 0, i64 6), ptr noundef null, i32 noundef 0) #17
  %66 = getelementptr inbounds %struct.magic, ptr %65, i64 0, i32 2
  store i16 1, ptr %66, align 8, !tbaa !153
  %67 = load ptr, ptr @PL_DBtrace, align 8, !tbaa !5
  %68 = getelementptr inbounds %struct.sv, ptr %67, i64 0, i32 2
  %69 = load i32, ptr %68, align 4, !tbaa !18
  %70 = and i32 %69, 4194304
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %63
  %73 = tail call i32 @Perl_mg_set(ptr noundef nonnull %67) #17
  br label %74

74:                                               ; preds = %63, %72
  %75 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.46, i64 noundef 10, i32 noundef 2, i32 noundef 3) #17
  %76 = getelementptr inbounds %struct.gv, ptr %75, i64 0, i32 3
  %77 = load ptr, ptr %76, align 8, !tbaa !11
  %78 = load ptr, ptr %77, align 8, !tbaa !108
  store ptr %78, ptr @PL_DBsignal, align 8, !tbaa !5
  %79 = getelementptr inbounds %struct.sv, ptr %78, i64 0, i32 2
  %80 = load i32, ptr %79, align 4, !tbaa !18
  %81 = and i32 %80, 256
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %74
  tail call void @Perl_sv_setiv(ptr noundef nonnull %78, i64 noundef 0) #17
  %84 = load ptr, ptr @PL_DBsignal, align 8, !tbaa !5
  br label %85

85:                                               ; preds = %83, %74
  %86 = phi ptr [ %84, %83 ], [ %78, %74 ]
  %87 = tail call ptr @Perl_sv_magicext(ptr noundef %86, ptr noundef null, i32 noundef 42, ptr noundef nonnull getelementptr inbounds ([31 x %struct.mgvtbl], ptr @PL_magic_vtables, i64 0, i64 6), ptr noundef null, i32 noundef 0) #17
  %88 = getelementptr inbounds %struct.magic, ptr %87, i64 0, i32 2
  store i16 2, ptr %88, align 8, !tbaa !153
  %89 = load ptr, ptr @PL_DBsignal, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.sv, ptr %89, i64 0, i32 2
  %91 = load i32, ptr %90, align 4, !tbaa !18
  %92 = and i32 %91, 4194304
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %85
  %95 = tail call i32 @Perl_mg_set(ptr noundef nonnull %89) #17
  br label %96

96:                                               ; preds = %85, %94
  %97 = load ptr, ptr @PL_curstash, align 8, !tbaa !5
  %98 = icmp eq ptr %97, null
  br i1 %98, label %106, label %99

99:                                               ; preds = %96
  %100 = getelementptr inbounds %struct.sv, ptr %97, i64 0, i32 1
  %101 = load i32, ptr %100, align 8, !tbaa !20
  %102 = icmp ugt i32 %101, 1
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = add i32 %101, -1
  store i32 %104, ptr %100, align 8, !tbaa !20
  br label %106

105:                                              ; preds = %99
  tail call void @Perl_sv_free2(ptr noundef nonnull %97, i32 noundef %101) #17
  br label %106

106:                                              ; preds = %96, %103, %105
  store ptr %1, ptr @PL_curstash, align 8, !tbaa !5
  ret void
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define internal fastcc void @S_usage() unnamed_addr #12 {
  %1 = tail call ptr @Perl_PerlIO_stdout() #17
  %2 = load ptr, ptr @PL_origargv, align 8, !tbaa !5
  %3 = load ptr, ptr %2, align 8, !tbaa !5
  %4 = tail call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %1, ptr noundef nonnull @.str.119, ptr noundef %3) #17
  %5 = tail call i32 @PerlIO_puts(ptr noundef %1, ptr noundef nonnull @.str.114) #17
  %6 = tail call i32 @PerlIO_puts(ptr noundef %1, ptr noundef nonnull @.str.115) #17
  %7 = tail call i32 @PerlIO_puts(ptr noundef %1, ptr noundef nonnull @.str.116) #17
  %8 = tail call i32 @PerlIO_puts(ptr noundef %1, ptr noundef nonnull @.str.117) #17
  %9 = tail call i32 @PerlIO_puts(ptr noundef %1, ptr noundef nonnull @.str.118) #17
  %10 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %11 = zext i8 %10 to i32
  %12 = and i32 %11, 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %0
  tail call void @abort() #20
  unreachable

15:                                               ; preds = %0
  %16 = and i32 %11, 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %15
  %19 = or i8 %10, 8
  store i8 %19, ptr @PL_exit_flags, align 1, !tbaa !11
  tail call void (ptr, ...) @Perl_warn(ptr noundef nonnull @.str.58, i64 noundef 0) #17
  %20 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %21 = and i8 %20, -9
  store i8 %21, ptr @PL_exit_flags, align 1, !tbaa !11
  br label %22

22:                                               ; preds = %18, %15
  store i32 0, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 0, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  tail call fastcc void @S_my_exit_jump()
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_incpush(ptr noundef %0, i64 noundef %1, i32 noundef %2) unnamed_addr #0 {
  %4 = alloca %struct.stat, align 8
  %5 = alloca %struct.stat, align 8
  %6 = alloca %struct.stat, align 8
  %7 = load ptr, ptr @PL_incgv, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.gv, ptr %7, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !11
  %10 = getelementptr inbounds %struct.gp, ptr %9, i64 0, i32 6
  %11 = load ptr, ptr %10, align 8, !tbaa !124
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %19

13:                                               ; preds = %3
  %14 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %7, i32 noundef 11) #17
  %15 = getelementptr inbounds %struct.gv, ptr %14, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !11
  %17 = getelementptr inbounds %struct.gp, ptr %16, i64 0, i32 6
  %18 = load ptr, ptr %17, align 8, !tbaa !124
  br label %19

19:                                               ; preds = %3, %13
  %20 = phi ptr [ %18, %13 ], [ %11, %3 ]
  %21 = tail call ptr @Perl_newSVpvn(ptr noundef %0, i64 noundef %1) #17
  %22 = and i32 %2, 14
  %23 = icmp eq i32 %22, 0
  %24 = and i32 %2, 1
  br i1 %23, label %107, label %25

25:                                               ; preds = %19
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %25
  %28 = tail call ptr @Perl_newSV_type(i32 noundef 11) #17
  br label %29

29:                                               ; preds = %25, %27
  %30 = phi ptr [ %20, %25 ], [ %28, %27 ]
  %31 = tail call ptr @Perl_newSVsv(ptr noundef %21) #17
  %32 = and i32 %2, 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %73, label %34

34:                                               ; preds = %29
  tail call void @Perl_sv_catpvn_flags(ptr noundef %31, ptr noundef nonnull @.str.127, i64 noundef 16, i32 noundef 2) #17
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %6) #17
  %35 = getelementptr inbounds %struct.sv, ptr %31, i64 0, i32 3
  %36 = load ptr, ptr %35, align 8, !tbaa !11
  %37 = call i32 @stat64(ptr noundef %36, ptr noundef nonnull %6) #17
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %46

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.stat, ptr %6, i64 0, i32 3
  %41 = load i32, ptr %40, align 8, !tbaa !110
  %42 = and i32 %41, 61440
  %43 = icmp eq i32 %42, 16384
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  tail call void @Perl_av_push(ptr noundef %30, ptr noundef nonnull %31) #17
  %45 = tail call ptr @Perl_newSVsv(ptr noundef %21) #17
  br label %52

46:                                               ; preds = %39, %34
  %47 = load ptr, ptr %21, align 8, !tbaa !64
  %48 = getelementptr inbounds %struct.xpv, ptr %47, i64 0, i32 2
  %49 = load i64, ptr %48, align 8, !tbaa !82
  %50 = load ptr, ptr %31, align 8, !tbaa !64
  %51 = getelementptr inbounds %struct.xpv, ptr %50, i64 0, i32 2
  store i64 %49, ptr %51, align 8, !tbaa !82
  br label %52

52:                                               ; preds = %44, %46
  %53 = phi ptr [ %45, %44 ], [ %31, %46 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %6) #17
  tail call void @Perl_sv_catpvn_flags(ptr noundef %53, ptr noundef nonnull @.str.128, i64 noundef 7, i32 noundef 2) #17
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %5) #17
  %54 = getelementptr inbounds %struct.sv, ptr %53, i64 0, i32 3
  %55 = load ptr, ptr %54, align 8, !tbaa !11
  %56 = call i32 @stat64(ptr noundef %55, ptr noundef nonnull %5) #17
  %57 = icmp sgt i32 %56, -1
  br i1 %57, label %58, label %65

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.stat, ptr %5, i64 0, i32 3
  %60 = load i32, ptr %59, align 8, !tbaa !110
  %61 = and i32 %60, 61440
  %62 = icmp eq i32 %61, 16384
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  tail call void @Perl_av_push(ptr noundef %30, ptr noundef nonnull %53) #17
  %64 = tail call ptr @Perl_newSVsv(ptr noundef %21) #17
  br label %71

65:                                               ; preds = %58, %52
  %66 = load ptr, ptr %21, align 8, !tbaa !64
  %67 = getelementptr inbounds %struct.xpv, ptr %66, i64 0, i32 2
  %68 = load i64, ptr %67, align 8, !tbaa !82
  %69 = load ptr, ptr %53, align 8, !tbaa !64
  %70 = getelementptr inbounds %struct.xpv, ptr %69, i64 0, i32 2
  store i64 %68, ptr %70, align 8, !tbaa !82
  br label %71

71:                                               ; preds = %63, %65
  %72 = phi ptr [ %64, %63 ], [ %53, %65 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %5) #17
  br label %73

73:                                               ; preds = %29, %71
  %74 = phi ptr [ %72, %71 ], [ %31, %29 ]
  %75 = and i32 %2, 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %97, label %77

77:                                               ; preds = %73
  tail call void @Perl_sv_catpvn_flags(ptr noundef %74, ptr noundef nonnull @.str.130, i64 noundef 9, i32 noundef 2) #17
  call void @llvm.lifetime.start.p0(i64 144, ptr nonnull %4) #17
  %78 = getelementptr inbounds %struct.sv, ptr %74, i64 0, i32 3
  %79 = load ptr, ptr %78, align 8, !tbaa !11
  %80 = call i32 @stat64(ptr noundef %79, ptr noundef nonnull %4) #17
  %81 = icmp sgt i32 %80, -1
  br i1 %81, label %82, label %89

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.stat, ptr %4, i64 0, i32 3
  %84 = load i32, ptr %83, align 8, !tbaa !110
  %85 = and i32 %84, 61440
  %86 = icmp eq i32 %85, 16384
  br i1 %86, label %87, label %89

87:                                               ; preds = %82
  tail call void @Perl_av_push(ptr noundef %30, ptr noundef nonnull %74) #17
  %88 = tail call ptr @Perl_newSVsv(ptr noundef %21) #17
  br label %95

89:                                               ; preds = %82, %77
  %90 = load ptr, ptr %21, align 8, !tbaa !64
  %91 = getelementptr inbounds %struct.xpv, ptr %90, i64 0, i32 2
  %92 = load i64, ptr %91, align 8, !tbaa !82
  %93 = load ptr, ptr %74, align 8, !tbaa !64
  %94 = getelementptr inbounds %struct.xpv, ptr %93, i64 0, i32 2
  store i64 %92, ptr %94, align 8, !tbaa !82
  br label %95

95:                                               ; preds = %87, %89
  %96 = phi ptr [ %88, %87 ], [ %74, %89 ]
  call void @llvm.lifetime.end.p0(i64 144, ptr nonnull %4) #17
  br label %97

97:                                               ; preds = %95, %73
  %98 = phi ptr [ %96, %95 ], [ %74, %73 ]
  %99 = icmp eq ptr %98, null
  br i1 %99, label %107, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.sv, ptr %98, i64 0, i32 1
  %102 = load i32, ptr %101, align 8, !tbaa !20
  %103 = icmp ugt i32 %102, 1
  br i1 %103, label %104, label %106

104:                                              ; preds = %100
  %105 = add i32 %102, -1
  store i32 %105, ptr %101, align 8, !tbaa !20
  br label %107

106:                                              ; preds = %100
  tail call void @Perl_sv_free2(ptr noundef nonnull %98, i32 noundef %102) #17
  br label %107

107:                                              ; preds = %19, %106, %104, %97
  %108 = phi ptr [ %30, %97 ], [ %30, %104 ], [ %30, %106 ], [ null, %19 ]
  %109 = icmp eq i32 %24, 0
  br i1 %109, label %150, label %110

110:                                              ; preds = %107
  %111 = getelementptr inbounds %struct.sv, ptr %108, i64 0, i32 2
  %112 = load i32, ptr %111, align 4, !tbaa !18
  %113 = and i32 %112, 8388608
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %110
  %116 = tail call i32 @Perl_mg_size(ptr noundef nonnull %108) #17
  %117 = sext i32 %116 to i64
  br label %122

118:                                              ; preds = %110
  %119 = load ptr, ptr %108, align 8, !tbaa !24
  %120 = getelementptr inbounds %struct.xpvav, ptr %119, i64 0, i32 2
  %121 = load i64, ptr %120, align 8, !tbaa !81
  br label %122

122:                                              ; preds = %115, %118
  %123 = phi i64 [ %117, %115 ], [ %121, %118 ]
  %124 = add nsw i64 %123, 1
  %125 = add i64 %123, 2
  tail call void @Perl_av_unshift(ptr noundef %20, i64 noundef %125) #17
  %126 = tail call ptr @Perl_av_store(ptr noundef %20, i64 noundef %124, ptr noundef %21) #17
  %127 = icmp eq i64 %124, 0
  br i1 %127, label %143, label %128

128:                                              ; preds = %122, %138
  %129 = phi i64 [ %130, %138 ], [ %124, %122 ]
  %130 = add i64 %129, -1
  %131 = tail call ptr @Perl_av_fetch(ptr noundef %108, i64 noundef %130, i32 noundef 0) #17
  %132 = load ptr, ptr %131, align 8, !tbaa !5
  %133 = icmp eq ptr %132, null
  br i1 %133, label %138, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %struct.sv, ptr %132, i64 0, i32 1
  %136 = load i32, ptr %135, align 8, !tbaa !20
  %137 = add i32 %136, 1
  store i32 %137, ptr %135, align 8, !tbaa !20
  br label %138

138:                                              ; preds = %128, %134
  %139 = tail call ptr @Perl_av_store(ptr noundef %20, i64 noundef %130, ptr noundef %132) #17
  %140 = icmp eq i64 %130, 0
  br i1 %140, label %141, label %128, !llvm.loop !154

141:                                              ; preds = %138
  %142 = icmp eq ptr %108, null
  br i1 %142, label %151, label %143

143:                                              ; preds = %122, %141
  %144 = getelementptr inbounds %struct.sv, ptr %108, i64 0, i32 1
  %145 = load i32, ptr %144, align 8, !tbaa !20
  %146 = icmp ugt i32 %145, 1
  br i1 %146, label %147, label %149

147:                                              ; preds = %143
  %148 = add i32 %145, -1
  store i32 %148, ptr %144, align 8, !tbaa !20
  br label %151

149:                                              ; preds = %143
  tail call void @Perl_sv_free2(ptr noundef nonnull %108, i32 noundef %145) #17
  br label %151

150:                                              ; preds = %107
  tail call void @Perl_av_push(ptr noundef %20, ptr noundef %21) #17
  br label %151

151:                                              ; preds = %149, %147, %141, %150
  ret void
}

declare ptr @Perl_newSVsv(ptr noundef) local_unnamed_addr #2

declare void @Perl_av_create_and_push(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: noreturn nounwind sspstrong uwtable
define internal fastcc void @S_minus_v() unnamed_addr #12 {
  %1 = tail call ptr @Perl_newSVpvn(ptr noundef nonnull @.str.2, i64 noundef 7) #17
  %2 = tail call ptr @Perl_PerlIO_stdout() #17
  %3 = tail call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %2, ptr noundef nonnull @.str.120, ptr noundef %1) #17
  %4 = getelementptr inbounds %struct.sv, ptr %1, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !20
  %6 = icmp ugt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  store i32 %8, ptr %4, align 8, !tbaa !20
  br label %10

9:                                                ; preds = %0
  tail call void @Perl_sv_free2(ptr noundef nonnull %1, i32 noundef %5) #17
  br label %10

10:                                               ; preds = %7, %9
  %11 = tail call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %2, ptr noundef nonnull @.str.121) #17
  %12 = tail call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %2, ptr noundef nonnull @.str.122) #17
  %13 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %14 = zext i8 %13 to i32
  %15 = and i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %10
  tail call void @abort() #20
  unreachable

18:                                               ; preds = %10
  %19 = and i32 %14, 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = or i8 %13, 8
  store i8 %22, ptr @PL_exit_flags, align 1, !tbaa !11
  tail call void (ptr, ...) @Perl_warn(ptr noundef nonnull @.str.58, i64 noundef 0) #17
  %23 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %24 = and i8 %23, -9
  store i8 %24, ptr @PL_exit_flags, align 1, !tbaa !11
  br label %25

25:                                               ; preds = %21, %18
  store i32 0, ptr @PL_statusvalue, align 4, !tbaa !9
  store i32 0, ptr @PL_statusvalue_posix, align 4, !tbaa !9
  tail call fastcc void @S_my_exit_jump()
  unreachable
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local void @Perl_my_unexec() local_unnamed_addr #7 {
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i1 @Perl_doing_taint(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readnone %2) local_unnamed_addr #0 {
  %4 = tail call i32 @getuid() #17
  %5 = tail call i32 @geteuid() #17
  %6 = tail call i32 @getgid() #17
  %7 = tail call i32 @getegid() #17
  %8 = icmp eq i32 %4, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = icmp eq i32 %5, %4
  %11 = icmp eq i32 %7, %6
  %12 = select i1 %10, i1 %11, i1 false
  br i1 %12, label %13, label %26

13:                                               ; preds = %9, %3
  %14 = icmp sgt i32 %0, 1
  br i1 %14, label %15, label %25

15:                                               ; preds = %13
  %16 = getelementptr inbounds ptr, ptr %1, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !5
  %18 = load i8, ptr %17, align 1, !tbaa !11
  %19 = icmp eq i8 %18, 45
  br i1 %19, label %20, label %25

20:                                               ; preds = %15
  %21 = getelementptr inbounds i8, ptr %17, i64 1
  %22 = load i8, ptr %21, align 1, !tbaa !11
  %23 = and i8 %22, -33
  %24 = icmp eq i8 %23, 84
  br i1 %24, label %26, label %25

25:                                               ; preds = %20, %15, %13
  br label %26

26:                                               ; preds = %20, %9, %25
  %27 = phi i1 [ false, %25 ], [ true, %9 ], [ true, %20 ]
  ret i1 %27
}

; Function Attrs: nounwind
declare i32 @getuid() local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @geteuid() local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @getgid() local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @getegid() local_unnamed_addr #1

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_init_dbargs() local_unnamed_addr #0 {
  %1 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.39, i64 noundef 8, i32 noundef 2, i32 noundef 11) #17
  %2 = tail call ptr @Perl_gv_add_by_type(ptr noundef %1, i32 noundef 11) #17
  %3 = getelementptr inbounds %struct.gv, ptr %2, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !11
  %5 = getelementptr inbounds %struct.gp, ptr %4, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !124
  store ptr %6, ptr @PL_dbargs, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.av, ptr %6, i64 0, i32 2
  %8 = load i32, ptr %7, align 4, !tbaa !58
  %9 = and i32 %8, 1073741824
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %0
  tail call void @Perl_av_clear(ptr noundef nonnull %6) #17
  %12 = load i32, ptr %7, align 4, !tbaa !18
  %13 = and i32 %12, 8388608
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = tail call ptr @Perl_mg_find(ptr noundef nonnull %6, i32 noundef 80) #17
  %17 = icmp eq ptr %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %15
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.40) #17
  br label %19

19:                                               ; preds = %15, %18, %11, %0
  %20 = load ptr, ptr @PL_dbargs, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.av, ptr %20, i64 0, i32 2
  %22 = load i32, ptr %21, align 4, !tbaa !58
  %23 = and i32 %22, 1073741823
  %24 = or i32 %23, -2147483648
  store i32 %24, ptr %21, align 4, !tbaa !58
  ret void
}

declare void @Perl_av_clear(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_mg_find(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_sv_setiv(ptr noundef, i64 noundef) local_unnamed_addr #2

declare ptr @Perl_sv_magicext(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare i32 @Perl_mg_set(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_safesysmalloc(i64 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_populate_isa(ptr noundef %0, i64 noundef %1, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef %0, i64 noundef %1, i32 noundef 3, i32 noundef 11) #17
  %5 = getelementptr inbounds %struct.gv, ptr %4, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !11
  %7 = getelementptr inbounds %struct.gp, ptr %6, i64 0, i32 6
  %8 = load ptr, ptr %7, align 8, !tbaa !124
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %4, i32 noundef 11) #17
  %12 = getelementptr inbounds %struct.gv, ptr %11, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !11
  %14 = getelementptr inbounds %struct.gp, ptr %13, i64 0, i32 6
  %15 = load ptr, ptr %14, align 8, !tbaa !124
  br label %16

16:                                               ; preds = %2, %10
  %17 = phi ptr [ %15, %10 ], [ %8, %2 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #17
  %18 = load ptr, ptr %17, align 8, !tbaa !24
  %19 = getelementptr inbounds %struct.xpvav, ptr %18, i64 0, i32 2
  %20 = load i64, ptr %19, align 8, !tbaa !81
  %21 = icmp eq i64 %20, -1
  br i1 %21, label %22, label %58

22:                                               ; preds = %16
  call void @llvm.va_start(ptr nonnull %3)
  %23 = getelementptr inbounds %struct.__va_list_tag, ptr %3, i64 0, i32 2
  %24 = getelementptr inbounds %struct.__va_list_tag, ptr %3, i64 0, i32 3
  br label %25

25:                                               ; preds = %51, %22
  %26 = load i32, ptr %3, align 16
  %27 = icmp ult i32 %26, 41
  br i1 %27, label %28, label %33

28:                                               ; preds = %25
  %29 = load ptr, ptr %24, align 16
  %30 = zext i32 %26 to i64
  %31 = getelementptr i8, ptr %29, i64 %30
  %32 = add nuw nsw i32 %26, 8
  store i32 %32, ptr %3, align 16
  br label %36

33:                                               ; preds = %25
  %34 = load ptr, ptr %23, align 8
  %35 = getelementptr i8, ptr %34, i64 8
  store ptr %35, ptr %23, align 8
  br label %36

36:                                               ; preds = %33, %28
  %37 = phi i32 [ %32, %28 ], [ %26, %33 ]
  %38 = phi ptr [ %31, %28 ], [ %34, %33 ]
  %39 = load ptr, ptr %38, align 8
  %40 = icmp eq ptr %39, null
  br i1 %40, label %57, label %41

41:                                               ; preds = %36
  %42 = icmp ult i32 %37, 41
  br i1 %42, label %43, label %48

43:                                               ; preds = %41
  %44 = load ptr, ptr %24, align 16
  %45 = zext i32 %37 to i64
  %46 = getelementptr i8, ptr %44, i64 %45
  %47 = add nuw nsw i32 %37, 8
  store i32 %47, ptr %3, align 16
  br label %51

48:                                               ; preds = %41
  %49 = load ptr, ptr %23, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  store ptr %50, ptr %23, align 8
  br label %51

51:                                               ; preds = %43, %48
  %52 = phi ptr [ %46, %43 ], [ %49, %48 ]
  %53 = load i64, ptr %52, align 8
  %54 = add i64 %53, -2
  %55 = call ptr @Perl_newSVpvn(ptr noundef nonnull %39, i64 noundef %54) #17
  call void @Perl_av_push(ptr noundef nonnull %17, ptr noundef %55) #17
  %56 = call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull %39, i64 noundef %53, i32 noundef 1, i32 noundef 9) #17
  br label %25

57:                                               ; preds = %36
  call void @llvm.va_end(ptr nonnull %3)
  br label %58

58:                                               ; preds = %16, %57
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #17
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #13

declare void @Perl_av_push(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #13

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_init_argv_symbols(i32 noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #0 {
  %3 = add nsw i32 %0, -1
  %4 = getelementptr inbounds ptr, ptr %1, i64 1
  %5 = load i8, ptr @PL_doswitches, align 1, !tbaa !14, !range !28, !noundef !29
  %6 = icmp ne i8 %5, 0
  %7 = icmp sgt i32 %0, 1
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %46

9:                                                ; preds = %2, %42
  %10 = phi ptr [ %44, %42 ], [ %4, %2 ]
  %11 = phi i32 [ %43, %42 ], [ %3, %2 ]
  %12 = load ptr, ptr %10, align 8, !tbaa !5
  %13 = load i8, ptr %12, align 1, !tbaa !11
  %14 = icmp eq i8 %13, 45
  br i1 %14, label %15, label %46

15:                                               ; preds = %9
  %16 = getelementptr inbounds i8, ptr %12, i64 1
  %17 = load i8, ptr %16, align 1, !tbaa !11
  switch i8 %17, label %25 [
    i8 0, label %46
    i8 45, label %18
  ]

18:                                               ; preds = %15
  %19 = getelementptr inbounds i8, ptr %12, i64 2
  %20 = load i8, ptr %19, align 1, !tbaa !11
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %18
  %23 = add nsw i32 %11, -1
  %24 = getelementptr inbounds ptr, ptr %10, i64 1
  br label %46

25:                                               ; preds = %15, %18
  %26 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %12, i32 noundef 61) #21
  %27 = icmp eq ptr %26, null
  br i1 %27, label %37, label %28

28:                                               ; preds = %25
  %29 = ptrtoint ptr %26 to i64
  %30 = ptrtoint ptr %16 to i64
  %31 = sub i64 %29, %30
  %32 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull %16, i64 noundef %31, i32 noundef 1, i32 noundef 3) #17
  %33 = getelementptr inbounds %struct.gv, ptr %32, i64 0, i32 3
  %34 = load ptr, ptr %33, align 8, !tbaa !11
  %35 = load ptr, ptr %34, align 8, !tbaa !108
  %36 = getelementptr inbounds i8, ptr %26, i64 1
  tail call void @Perl_sv_setpv(ptr noundef %35, ptr noundef nonnull %36) #17
  br label %42

37:                                               ; preds = %25
  %38 = tail call ptr @Perl_gv_fetchpv(ptr noundef nonnull %16, i32 noundef 1, i32 noundef 3) #17
  %39 = getelementptr inbounds %struct.gv, ptr %38, i64 0, i32 3
  %40 = load ptr, ptr %39, align 8, !tbaa !11
  %41 = load ptr, ptr %40, align 8, !tbaa !108
  tail call void @Perl_sv_setiv(ptr noundef %41, i64 noundef 1) #17
  br label %42

42:                                               ; preds = %37, %28
  %43 = add nsw i32 %11, -1
  %44 = getelementptr inbounds ptr, ptr %10, i64 1
  %45 = icmp sgt i32 %11, 1
  br i1 %45, label %9, label %46

46:                                               ; preds = %15, %9, %42, %22, %2
  %47 = phi ptr [ %4, %2 ], [ %24, %22 ], [ %10, %15 ], [ %10, %9 ], [ %44, %42 ]
  %48 = phi i32 [ %3, %2 ], [ %23, %22 ], [ %11, %15 ], [ %11, %9 ], [ 0, %42 ]
  %49 = tail call ptr @Perl_gv_fetchpvn_flags(ptr noundef nonnull @.str.47, i64 noundef 4, i32 noundef 129, i32 noundef 11) #17
  store ptr %49, ptr @PL_argvgv, align 8, !tbaa !5
  %50 = icmp eq ptr %49, null
  br i1 %50, label %105, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.sv, ptr %49, i64 0, i32 1
  %53 = load i32, ptr %52, align 8, !tbaa !20
  %54 = add i32 %53, 1
  store i32 %54, ptr %52, align 8, !tbaa !20
  %55 = load ptr, ptr %49, align 8, !tbaa !104
  %56 = getelementptr inbounds %struct.xpvgv, ptr %55, i64 0, i32 2
  %57 = load i64, ptr %56, align 8, !tbaa !105
  %58 = or i64 %57, 2
  store i64 %58, ptr %56, align 8, !tbaa !105
  %59 = getelementptr inbounds %struct.gv, ptr %49, i64 0, i32 3
  %60 = load ptr, ptr %59, align 8, !tbaa !11
  %61 = getelementptr inbounds %struct.gp, ptr %60, i64 0, i32 6
  %62 = load ptr, ptr %61, align 8, !tbaa !124
  %63 = icmp eq ptr %62, null
  br i1 %63, label %64, label %70

64:                                               ; preds = %51
  %65 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %49, i32 noundef 11) #17
  %66 = getelementptr inbounds %struct.gv, ptr %65, i64 0, i32 3
  %67 = load ptr, ptr %66, align 8, !tbaa !11
  %68 = getelementptr inbounds %struct.gp, ptr %67, i64 0, i32 6
  %69 = load ptr, ptr %68, align 8, !tbaa !124
  br label %70

70:                                               ; preds = %51, %64
  %71 = phi ptr [ %69, %64 ], [ %62, %51 ]
  tail call void @Perl_av_clear(ptr noundef %71) #17
  %72 = icmp sgt i32 %48, 0
  br i1 %72, label %73, label %105

73:                                               ; preds = %70, %101
  %74 = phi i32 [ %102, %101 ], [ %48, %70 ]
  %75 = phi ptr [ %103, %101 ], [ %47, %70 ]
  %76 = load ptr, ptr %75, align 8, !tbaa !5
  %77 = tail call ptr @Perl_newSVpv(ptr noundef %76, i64 noundef 0) #17
  %78 = load ptr, ptr @PL_argvgv, align 8, !tbaa !5
  %79 = getelementptr inbounds %struct.gv, ptr %78, i64 0, i32 3
  %80 = load ptr, ptr %79, align 8, !tbaa !11
  %81 = getelementptr inbounds %struct.gp, ptr %80, i64 0, i32 6
  %82 = load ptr, ptr %81, align 8, !tbaa !124
  tail call void @Perl_av_push(ptr noundef %82, ptr noundef %77) #17
  %83 = load i32, ptr @PL_unicode, align 4, !tbaa !9
  %84 = and i32 %83, 64
  %85 = icmp ne i32 %84, 0
  %86 = load i8, ptr @PL_utf8locale, align 1, !range !28
  %87 = icmp eq i8 %86, 0
  %88 = select i1 %85, i1 %87, i1 false
  %89 = and i32 %83, 32
  %90 = icmp eq i32 %89, 0
  %91 = or i1 %90, %88
  br i1 %91, label %96, label %92

92:                                               ; preds = %73
  %93 = getelementptr inbounds %struct.sv, ptr %77, i64 0, i32 2
  %94 = load i32, ptr %93, align 4, !tbaa !18
  %95 = or i32 %94, 536870912
  store i32 %95, ptr %93, align 4, !tbaa !18
  br label %96

96:                                               ; preds = %73, %92
  %97 = and i32 %83, 128
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %96
  %100 = tail call zeroext i1 @Perl_sv_utf8_decode(ptr noundef %77) #17
  br label %101

101:                                              ; preds = %99, %96
  %102 = add nsw i32 %74, -1
  %103 = getelementptr inbounds ptr, ptr %75, i64 1
  %104 = icmp sgt i32 %74, 1
  br i1 %104, label %73, label %105, !llvm.loop !155

105:                                              ; preds = %101, %70, %46
  %106 = load ptr, ptr @PL_inplace, align 8, !tbaa !5
  %107 = icmp eq ptr %106, null
  br i1 %107, label %131, label %108

108:                                              ; preds = %105
  %109 = load ptr, ptr @PL_argvgv, align 8, !tbaa !5
  %110 = icmp eq ptr %109, null
  br i1 %110, label %130, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %struct.gv, ptr %109, i64 0, i32 3
  %113 = load ptr, ptr %112, align 8, !tbaa !11
  %114 = getelementptr inbounds %struct.gp, ptr %113, i64 0, i32 6
  %115 = load ptr, ptr %114, align 8, !tbaa !124
  %116 = getelementptr inbounds %struct.sv, ptr %115, i64 0, i32 2
  %117 = load i32, ptr %116, align 4, !tbaa !18
  %118 = and i32 %117, 8388608
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %111
  %121 = tail call i32 @Perl_mg_size(ptr noundef nonnull %115) #17
  %122 = sext i32 %121 to i64
  br label %127

123:                                              ; preds = %111
  %124 = load ptr, ptr %115, align 8, !tbaa !24
  %125 = getelementptr inbounds %struct.xpvav, ptr %124, i64 0, i32 2
  %126 = load i64, ptr %125, align 8, !tbaa !81
  br label %127

127:                                              ; preds = %123, %120
  %128 = phi i64 [ %122, %120 ], [ %126, %123 ]
  %129 = icmp eq i64 %128, -1
  br i1 %129, label %130, label %131

130:                                              ; preds = %127, %108
  tail call void (i32, ptr, ...) @Perl_ck_warner_d(i32 noundef 23, ptr noundef nonnull @.str.48) #17
  br label %131

131:                                              ; preds = %130, %127, %105
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #11

declare void @Perl_sv_setpv(ptr noundef, ptr noundef) local_unnamed_addr #2

declare zeroext i1 @Perl_sv_utf8_decode(ptr noundef) local_unnamed_addr #2

declare i32 @Perl_mg_size(ptr noundef) local_unnamed_addr #2

declare ptr @Perl_av_shift(ptr noundef) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @siglongjmp(ptr noundef, i32 noundef) local_unnamed_addr #14

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #14

; Function Attrs: noreturn nounwind sspstrong uwtable
define dso_local void @Perl_my_exit(i32 noundef %0) local_unnamed_addr #12 {
  %2 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %3 = zext i8 %2 to i32
  %4 = and i32 %3, 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @abort() #20
  unreachable

7:                                                ; preds = %1
  %8 = and i32 %3, 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %7
  %11 = or i8 %2, 8
  store i8 %11, ptr @PL_exit_flags, align 1, !tbaa !11
  %12 = zext i32 %0 to i64
  tail call void (ptr, ...) @Perl_warn(ptr noundef nonnull @.str.58, i64 noundef %12) #17
  %13 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %14 = and i8 %13, -9
  store i8 %14, ptr @PL_exit_flags, align 1, !tbaa !11
  br label %15

15:                                               ; preds = %10, %7
  switch i32 %0, label %18 [
    i32 0, label %16
    i32 1, label %17
  ]

16:                                               ; preds = %15
  store i32 0, ptr @PL_statusvalue, align 4, !tbaa !9
  br label %22

17:                                               ; preds = %15
  store i32 1, ptr @PL_statusvalue, align 4, !tbaa !9
  br label %22

18:                                               ; preds = %15
  store i32 %0, ptr @PL_statusvalue, align 4, !tbaa !9
  %19 = icmp eq i32 %0, -1
  br i1 %19, label %25, label %20

20:                                               ; preds = %18
  %21 = and i32 %0, 65535
  br label %22

22:                                               ; preds = %16, %17, %20
  %23 = phi ptr [ @PL_statusvalue, %20 ], [ @PL_statusvalue_posix, %17 ], [ @PL_statusvalue_posix, %16 ]
  %24 = phi i32 [ %21, %20 ], [ 1, %17 ], [ 0, %16 ]
  store i32 %24, ptr %23, align 4, !tbaa !9
  br label %25

25:                                               ; preds = %22, %18
  tail call fastcc void @S_my_exit_jump()
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #14

declare void @Perl_warn(ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind sspstrong uwtable
define dso_local void @Perl_my_failure_exit() local_unnamed_addr #12 {
  %1 = tail call ptr @__errno_location() #22
  %2 = load i32, ptr %1, align 4, !tbaa !9
  %3 = and i32 %2, 255
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %0
  store i32 %2, ptr @PL_statusvalue, align 4, !tbaa !9
  %6 = icmp eq i32 %2, -1
  br i1 %6, label %20, label %7

7:                                                ; preds = %5
  %8 = and i32 %2, 65535
  br label %18

9:                                                ; preds = %0
  %10 = load i32, ptr @PL_statusvalue, align 4, !tbaa !9
  %11 = ashr i32 %10, 8
  %12 = and i32 %10, 65280
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %9
  store i32 %11, ptr @PL_statusvalue, align 4, !tbaa !9
  %15 = icmp eq i32 %11, -1
  br i1 %15, label %20, label %16

16:                                               ; preds = %14
  %17 = and i32 %11, 65535
  br label %18

18:                                               ; preds = %9, %7, %16
  %19 = phi i32 [ %17, %16 ], [ %8, %7 ], [ 255, %9 ]
  store i32 %19, ptr @PL_statusvalue, align 4, !tbaa !9
  br label %20

20:                                               ; preds = %18, %14, %5
  %21 = phi i32 [ -1, %14 ], [ -1, %5 ], [ %19, %18 ]
  %22 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %23 = zext i8 %22 to i32
  %24 = and i32 %23, 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %20
  tail call void @abort() #20
  unreachable

27:                                               ; preds = %20
  %28 = and i32 %23, 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = or i8 %22, 8
  store i8 %31, ptr @PL_exit_flags, align 1, !tbaa !11
  %32 = sext i32 %21 to i64
  tail call void (ptr, ...) @Perl_warn(ptr noundef nonnull @.str.59, i64 noundef %32) #17
  %33 = load i8, ptr @PL_exit_flags, align 1, !tbaa !11
  %34 = and i8 %33, -9
  store i8 %34, ptr @PL_exit_flags, align 1, !tbaa !11
  br label %35

35:                                               ; preds = %30, %27
  tail call fastcc void @S_my_exit_jump()
  unreachable
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__errno_location() local_unnamed_addr #15

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @Perl_xs_boot_epilog(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @PL_unitcheckav, align 8, !tbaa !5
  %3 = icmp eq ptr %2, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !9
  tail call void @Perl_call_list(i32 noundef %5, ptr noundef nonnull %2)
  br label %6

6:                                                ; preds = %1, %4
  %7 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %8 = zext i32 %0 to i64
  %9 = getelementptr inbounds ptr, ptr %7, i64 %8
  store ptr @PL_sv_yes, ptr %9, align 8, !tbaa !5
  %10 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %11 = getelementptr inbounds ptr, ptr %10, i64 %8
  store ptr %11, ptr @PL_stack_sp, align 8, !tbaa !5
  ret void
}

declare void @Perl_sv_free2(ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_sv_catpv(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #11

declare ptr @Perl_PerlIO_stdin() local_unnamed_addr #2

declare ptr @Perl_rsignal_state(i32 noundef) local_unnamed_addr #2

declare void @Perl_ck_warner(i32 noundef, ptr noundef, ...) local_unnamed_addr #2

declare ptr @Perl_rsignal(i32 noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @chdir(ptr noundef) local_unnamed_addr #1

declare ptr @Perl_pad_new(i32 noundef) local_unnamed_addr #2

declare void @Perl_boot_core_PerlIO() local_unnamed_addr #2

declare void @Perl_boot_core_UNIVERSAL() local_unnamed_addr #2

declare void @Perl_boot_core_mro() local_unnamed_addr #2

declare ptr @Perl_newXS(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal void @S_Internals_V(ptr nocapture readnone %0) #0 {
  %2 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !5
  %3 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %4 = getelementptr inbounds i32, ptr %3, i64 -1
  store ptr %4, ptr @PL_markstack_ptr, align 8, !tbaa !5
  %5 = load i32, ptr %3, align 4, !tbaa !9
  %6 = ptrtoint ptr %2 to i64
  %7 = load ptr, ptr @PL_stack_max, align 8, !tbaa !5
  %8 = ptrtoint ptr %7 to i64
  %9 = sub i64 %8, %6
  %10 = icmp slt i64 %9, 24
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = tail call ptr @Perl_stack_grow(ptr noundef %2, ptr noundef %2, i64 noundef 3) #17
  br label %13

13:                                               ; preds = %1, %11
  %14 = phi ptr [ %12, %11 ], [ %2, %1 ]
  %15 = tail call ptr @Perl_newSVpv(ptr noundef nonnull @PL_bincompat_options, i64 noundef 0) #17
  %16 = tail call ptr @Perl_sv_2mortal(ptr noundef %15) #17
  %17 = getelementptr inbounds ptr, ptr %14, i64 1
  store ptr %16, ptr %17, align 8, !tbaa !5
  %18 = tail call ptr @Perl_newSVpvn_flags(ptr noundef nonnull @S_Internals_V.non_bincompat_options, i64 noundef 112, i32 noundef 524288) #17
  %19 = getelementptr inbounds ptr, ptr %14, i64 2
  store ptr %18, ptr %19, align 8, !tbaa !5
  %20 = getelementptr inbounds ptr, ptr %14, i64 3
  store ptr @PL_sv_undef, ptr %20, align 8, !tbaa !5
  %21 = add nsw i32 %5, 1
  %22 = load ptr, ptr @PL_stack_base, align 8, !tbaa !5
  %23 = sext i32 %21 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = getelementptr inbounds ptr, ptr %24, i64 2
  store ptr %25, ptr @PL_stack_sp, align 8, !tbaa !5
  ret void
}

declare i32 @PerlIO_binmode(ptr noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #2

declare void @Perl_lex_start(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_filter_add(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @read_e_script(i32 %0, ptr noundef %1, i32 %2) #0 {
  %4 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.sv, ptr %4, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !11
  %7 = tail call ptr @strchr(ptr noundef nonnull dereferenceable(1) %6, i32 noundef 10) #21
  %8 = icmp eq ptr %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds i8, ptr %7, i64 1
  br label %16

11:                                               ; preds = %3
  %12 = load ptr, ptr %4, align 8, !tbaa !64
  %13 = getelementptr inbounds %struct.xpv, ptr %12, i64 0, i32 2
  %14 = load i64, ptr %13, align 8, !tbaa !82
  %15 = getelementptr inbounds i8, ptr %6, i64 %14
  br label %16

16:                                               ; preds = %11, %9
  %17 = phi ptr [ %10, %9 ], [ %15, %11 ]
  %18 = icmp eq ptr %17, %6
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  tail call void @Perl_filter_del(ptr noundef nonnull @read_e_script) #17
  br label %25

20:                                               ; preds = %16
  %21 = ptrtoint ptr %6 to i64
  %22 = ptrtoint ptr %17 to i64
  %23 = sub i64 %22, %21
  tail call void @Perl_sv_catpvn_flags(ptr noundef %1, ptr noundef %6, i64 noundef %23, i32 noundef 2) #17
  %24 = load ptr, ptr @PL_e_script, align 8, !tbaa !5
  tail call void @Perl_sv_chop(ptr noundef %24, ptr noundef %17) #17
  br label %25

25:                                               ; preds = %20, %19
  %26 = phi i32 [ 0, %19 ], [ 1, %20 ]
  ret i32 %26
}

declare i32 @Perl_yyparse(i32 noundef) local_unnamed_addr #2

declare void @Perl_save_sptr(ptr noundef) local_unnamed_addr #2

declare void @Perl_save_I32(ptr noundef) local_unnamed_addr #2

declare void @Perl_gv_check(ptr noundef) local_unnamed_addr #2

declare void @Perl_hv_name_set(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_form(ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_incpush_use_sep(ptr noundef %0) unnamed_addr #0 {
  %2 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #21
  %3 = getelementptr inbounds i8, ptr %0, i64 %2
  %4 = ptrtoint ptr %3 to i64
  %5 = tail call ptr @memchr(ptr noundef %0, i32 noundef 58, i64 noundef %2) #21
  %6 = icmp eq ptr %5, null
  br i1 %6, label %38, label %7

7:                                                ; preds = %1
  %8 = ptrtoint ptr %0 to i64
  br label %9

9:                                                ; preds = %7, %32
  %10 = phi ptr [ %36, %32 ], [ %5, %7 ]
  %11 = phi i64 [ %34, %32 ], [ %8, %7 ]
  %12 = phi ptr [ %33, %32 ], [ %0, %7 ]
  %13 = icmp eq ptr %10, %12
  br i1 %13, label %32, label %14

14:                                               ; preds = %9
  %15 = ptrtoint ptr %10 to i64
  %16 = sub i64 %15, %11
  %17 = load ptr, ptr @PL_incgv, align 8, !tbaa !5
  %18 = getelementptr inbounds %struct.gv, ptr %17, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !11
  %20 = getelementptr inbounds %struct.gp, ptr %19, i64 0, i32 6
  %21 = load ptr, ptr %20, align 8, !tbaa !124
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %29

23:                                               ; preds = %14
  %24 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %17, i32 noundef 11) #17
  %25 = getelementptr inbounds %struct.gv, ptr %24, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !11
  %27 = getelementptr inbounds %struct.gp, ptr %26, i64 0, i32 6
  %28 = load ptr, ptr %27, align 8, !tbaa !124
  br label %29

29:                                               ; preds = %14, %23
  %30 = phi ptr [ %28, %23 ], [ %21, %14 ]
  %31 = tail call ptr @Perl_newSVpvn(ptr noundef %12, i64 noundef %16) #17
  tail call void @Perl_av_push(ptr noundef %30, ptr noundef %31) #17
  br label %32

32:                                               ; preds = %9, %29
  %33 = getelementptr inbounds i8, ptr %10, i64 1
  %34 = ptrtoint ptr %33 to i64
  %35 = sub i64 %4, %34
  %36 = tail call ptr @memchr(ptr noundef nonnull %33, i32 noundef 58, i64 noundef %35) #21
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %9, !llvm.loop !156

38:                                               ; preds = %32, %1
  %39 = phi ptr [ %0, %1 ], [ %33, %32 ]
  %40 = phi i64 [ %2, %1 ], [ %35, %32 ]
  %41 = icmp eq ptr %39, %3
  br i1 %41, label %58, label %42

42:                                               ; preds = %38
  %43 = load ptr, ptr @PL_incgv, align 8, !tbaa !5
  %44 = getelementptr inbounds %struct.gv, ptr %43, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !11
  %46 = getelementptr inbounds %struct.gp, ptr %45, i64 0, i32 6
  %47 = load ptr, ptr %46, align 8, !tbaa !124
  %48 = icmp eq ptr %47, null
  br i1 %48, label %49, label %55

49:                                               ; preds = %42
  %50 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %43, i32 noundef 11) #17
  %51 = getelementptr inbounds %struct.gv, ptr %50, i64 0, i32 3
  %52 = load ptr, ptr %51, align 8, !tbaa !11
  %53 = getelementptr inbounds %struct.gp, ptr %52, i64 0, i32 6
  %54 = load ptr, ptr %53, align 8, !tbaa !124
  br label %55

55:                                               ; preds = %42, %49
  %56 = phi ptr [ %54, %49 ], [ %47, %42 ]
  %57 = tail call ptr @Perl_newSVpvn(ptr noundef %39, i64 noundef %40) #17
  tail call void @Perl_av_push(ptr noundef %56, ptr noundef %57) #17
  br label %58

58:                                               ; preds = %55, %38
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare ptr @memchr(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #11

declare ptr @Perl_find_script(ptr noundef, i1 noundef zeroext, ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #11

declare zeroext i1 @Perl_grok_atoUV(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @Perl_gv_fetchfile(ptr noundef) local_unnamed_addr #2

declare ptr @PerlIO_fdopen(i32 noundef, ptr noundef) local_unnamed_addr #2

declare ptr @PerlIO_open(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind
declare ptr @strerror(i32 noundef) local_unnamed_addr #1

declare i32 @Perl_PerlIO_fileno(ptr noundef) local_unnamed_addr #2

declare i32 @fcntl64(i32 noundef, i32 noundef, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @fstat64(i32 noundef, ptr nocapture noundef) local_unnamed_addr #16

declare ptr @Perl_sv_gets(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_instr(ptr noundef, ptr noundef) local_unnamed_addr #2

declare i32 @PerlIO_ungetc(ptr noundef, i32 noundef) local_unnamed_addr #2

declare ptr @Perl_PerlIO_stdout() local_unnamed_addr #2

declare void @Perl_setdefout(ptr noundef) local_unnamed_addr #2

declare void @Perl_filter_del(ptr noundef) local_unnamed_addr #2

declare void @Perl_sv_chop(ptr noundef, ptr noundef) local_unnamed_addr #2

declare i32 @PerlIO_puts(ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @Perl_peep(ptr noundef) #2

declare void @Perl_rpeep(ptr noundef) #2

declare i32 @Perl_runops_standard() #2

declare void @Perl_sv_nosharing(ptr noundef) #2

declare void @Perl_sv_nounlocking(ptr noundef) #2

declare zeroext i1 @Perl_sv_destroyable(ptr noundef) #2

declare void @Perl_despatch_signals() #2

declare void @Perl_sv_magic(ptr noundef, ptr noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #2

declare void @Perl_av_unshift(ptr noundef, i64 noundef) local_unnamed_addr #2

declare ptr @Perl_av_store(ptr noundef, i64 noundef, ptr noundef) local_unnamed_addr #2

declare ptr @Perl_av_fetch(ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @stat64(ptr nocapture noundef readonly, ptr nocapture noundef) local_unnamed_addr #16

declare void @Perl_leave_scope(i32 noundef) local_unnamed_addr #2

attributes #0 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { mustprogress nofree nounwind sspstrong willreturn memory(readwrite, argmem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #7 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { nounwind returns_twice "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { mustprogress nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: readwrite) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { noreturn nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #13 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #14 = { noreturn nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { mustprogress nofree nosync nounwind willreturn memory(none) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { nounwind }
attributes #18 = { nounwind allocsize(0) }
attributes #19 = { nounwind returns_twice }
attributes #20 = { noreturn nounwind }
attributes #21 = { nounwind willreturn memory(read) }
attributes #22 = { nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{!7, !7, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"long", !7, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"_Bool", !7, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"short", !7, i64 0}
!18 = !{!19, !10, i64 12}
!19 = !{!"sv", !6, i64 0, !10, i64 8, !10, i64 12, !7, i64 16}
!20 = !{!19, !10, i64 8}
!21 = !{!22, !10, i64 40}
!22 = !{!"stackinfo", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !10, i64 32, !10, i64 36, !10, i64 40, !10, i64 44}
!23 = !{!22, !6, i64 0}
!24 = !{!25, !6, i64 0}
!25 = !{!"av", !6, i64 0, !10, i64 8, !10, i64 12, !7, i64 16}
!26 = !{!27, !13, i64 24}
!27 = !{!"xpvav", !6, i64 0, !7, i64 8, !13, i64 16, !13, i64 24, !6, i64 32}
!28 = !{i8 0, i8 2}
!29 = !{}
!30 = !{!31, !6, i64 200}
!31 = !{!"jmpenv", !7, i64 0, !6, i64 200, !10, i64 208, !15, i64 212}
!32 = !{!31, !10, i64 208}
!33 = !{!31, !15, i64 212}
!34 = !{!35, !10, i64 12}
!35 = !{!"hv", !6, i64 0, !10, i64 8, !10, i64 12, !7, i64 16}
!36 = !{!35, !6, i64 0}
!37 = !{!38, !13, i64 24}
!38 = !{!"xpvhv", !6, i64 0, !7, i64 8, !13, i64 16, !13, i64 24}
!39 = !{!40, !6, i64 0}
!40 = !{!"cv", !6, i64 0, !10, i64 8, !10, i64 12, !7, i64 16}
!41 = !{!42, !6, i64 8}
!42 = !{!"padlist", !13, i64 0, !6, i64 8, !10, i64 16, !10, i64 20}
!43 = !{!44, !6, i64 0}
!44 = !{!"exitlistentry", !6, i64 0, !6, i64 8}
!45 = !{!44, !6, i64 8}
!46 = distinct !{!46, !47}
!47 = !{!"llvm.loop.mustprogress"}
!48 = distinct !{!48, !47}
!49 = !{!50, !6, i64 48}
!50 = !{!"cop", !6, i64 0, !6, i64 8, !6, i64 16, !13, i64 24, !10, i64 32, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !7, i64 34, !7, i64 35, !10, i64 36, !6, i64 40, !6, i64 48, !10, i64 56, !10, i64 60, !6, i64 64, !6, i64 72}
!51 = !{!52, !6, i64 248}
!52 = !{!"yy_parser", !6, i64 0, !7, i64 8, !10, i64 16, !10, i64 20, !10, i64 24, !10, i64 28, !6, i64 32, !6, i64 40, !10, i64 48, !10, i64 52, !6, i64 56, !6, i64 64, !7, i64 72, !7, i64 73, !7, i64 74, !7, i64 75, !10, i64 76, !6, i64 80, !6, i64 88, !6, i64 96, !17, i64 104, !17, i64 106, !10, i64 108, !6, i64 112, !10, i64 120, !10, i64 124, !7, i64 128, !7, i64 129, !15, i64 130, !15, i64 131, !10, i64 132, !53, i64 136, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !10, i64 232, !17, i64 236, !7, i64 238, !7, i64 239, !6, i64 240, !6, i64 248, !6, i64 256, !7, i64 264, !7, i64 272, !7, i64 312, !10, i64 332, !6, i64 336, !7, i64 344, !10, i64 600, !10, i64 604, !7, i64 608, !7, i64 609, !10, i64 610, !10, i64 610, !10, i64 610, !10, i64 610}
!53 = !{!"_sublex_info", !7, i64 0, !17, i64 2, !6, i64 8, !6, i64 16}
!54 = !{!50, !6, i64 64}
!55 = !{!50, !6, i64 72}
!56 = !{!22, !10, i64 32}
!57 = distinct !{!57, !47}
!58 = !{!25, !10, i64 12}
!59 = distinct !{!59, !47}
!60 = !{!61, !6, i64 0}
!61 = !{!"he", !6, i64 0, !6, i64 8, !7, i64 16}
!62 = !{!61, !6, i64 8}
!63 = !{!38, !13, i64 16}
!64 = !{!19, !6, i64 0}
!65 = !{!22, !6, i64 24}
!66 = distinct !{!66, !47}
!67 = !{!22, !6, i64 16}
!68 = !{!22, !6, i64 8}
!69 = distinct !{!69, !47}
!70 = !{!50, !10, i64 56}
!71 = !{!72, !6, i64 3968}
!72 = !{!"regmatch_slab", !7, i64 0, !6, i64 3960, !6, i64 3968}
!73 = distinct !{!73, !47}
!74 = !{!75, !6, i64 0}
!75 = !{!"magic", !6, i64 0, !6, i64 8, !17, i64 16, !7, i64 18, !7, i64 19, !13, i64 24, !6, i64 32, !6, i64 40}
!76 = !{!75, !6, i64 40}
!77 = !{!75, !7, i64 18}
!78 = !{!75, !13, i64 24}
!79 = distinct !{!79, !47}
!80 = !{!50, !10, i64 36}
!81 = !{!27, !13, i64 16}
!82 = !{!83, !13, i64 16}
!83 = !{!"xpv", !6, i64 0, !7, i64 8, !13, i64 16, !7, i64 24}
!84 = distinct !{!84, !47}
!85 = distinct !{!85, !47}
!86 = !{!87, !10, i64 12}
!87 = !{!"gv", !6, i64 0, !10, i64 8, !10, i64 12, !7, i64 16}
!88 = !{!89, !6, i64 8}
!89 = !{!"gp", !6, i64 0, !6, i64 8, !6, i64 16, !10, i64 24, !10, i64 28, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !10, i64 64, !10, i64 67, !6, i64 72}
!90 = !{!91, !6, i64 0}
!91 = !{!"io", !6, i64 0, !10, i64 8, !10, i64 12, !7, i64 16}
!92 = !{!93, !6, i64 40}
!93 = !{!"xpvio", !6, i64 0, !7, i64 8, !13, i64 16, !7, i64 24, !7, i64 32, !6, i64 40, !7, i64 48, !13, i64 56, !13, i64 64, !13, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !7, i64 128, !7, i64 129}
!94 = distinct !{!94, !47}
!95 = distinct !{!95, !47}
!96 = distinct !{!96, !47}
!97 = distinct !{!97, !47}
!98 = distinct !{!98, !47}
!99 = distinct !{!99, !47}
!100 = distinct !{!100, !47}
!101 = !{!35, !10, i64 8}
!102 = !{!89, !6, i64 32}
!103 = !{!87, !10, i64 8}
!104 = !{!87, !6, i64 0}
!105 = !{!106, !13, i64 16}
!106 = !{!"xpvgv", !6, i64 0, !7, i64 8, !13, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!107 = !{!50, !6, i64 40}
!108 = !{!89, !6, i64 0}
!109 = distinct !{!109, !47}
!110 = !{!111, !10, i64 24}
!111 = !{!"stat", !13, i64 0, !13, i64 8, !13, i64 16, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !112, i64 72, !112, i64 88, !112, i64 104, !7, i64 120}
!112 = !{!"timespec", !13, i64 0, !13, i64 8}
!113 = distinct !{!113, !47}
!114 = distinct !{!114, !47}
!115 = distinct !{!115, !47}
!116 = distinct !{!116, !47}
!117 = distinct !{!117, !47}
!118 = !{!119, !10, i64 92}
!119 = !{!"xpvcv", !6, i64 0, !7, i64 8, !13, i64 16, !7, i64 24, !6, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !6, i64 64, !7, i64 72, !6, i64 80, !10, i64 88, !10, i64 92, !10, i64 96}
!120 = !{!93, !7, i64 128}
!121 = !{!52, !7, i64 239}
!122 = distinct !{!122, !47}
!123 = distinct !{!123, !47}
!124 = !{!89, !6, i64 40}
!125 = distinct !{!125, !47}
!126 = distinct !{!126, !47}
!127 = !{!89, !10, i64 24}
!128 = !{!89, !6, i64 16}
!129 = distinct !{!129, !47}
!130 = !{!131, !7, i64 34}
!131 = !{!"logop", !6, i64 0, !6, i64 8, !6, i64 16, !13, i64 24, !10, i64 32, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !7, i64 34, !7, i64 35, !6, i64 40, !6, i64 48}
!132 = !{!119, !6, i64 32}
!133 = !{!131, !7, i64 35}
!134 = !{!135, !6, i64 0}
!135 = !{!"methop", !6, i64 0, !6, i64 8, !6, i64 16, !13, i64 24, !10, i64 32, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !7, i64 34, !7, i64 35, !7, i64 40, !6, i64 48}
!136 = !{!135, !6, i64 16}
!137 = !{!131, !6, i64 16}
!138 = !{!131, !6, i64 48}
!139 = distinct !{!139, !47}
!140 = !{!141, !7, i64 34}
!141 = !{!"unop", !6, i64 0, !6, i64 8, !6, i64 16, !13, i64 24, !10, i64 32, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !10, i64 33, !7, i64 34, !7, i64 35, !6, i64 40}
!142 = !{!141, !7, i64 35}
!143 = distinct !{!143, !47}
!144 = distinct !{!144, !47}
!145 = distinct !{!145, !47}
!146 = distinct !{!146, !47}
!147 = distinct !{!147, !47}
!148 = distinct !{!148, !47}
!149 = distinct !{!149, !47}
!150 = distinct !{!150, !47}
!151 = distinct !{!151, !47}
!152 = distinct !{!152, !47}
!153 = !{!75, !17, i64 16}
!154 = distinct !{!154, !47}
!155 = distinct !{!155, !47}
!156 = distinct !{!156, !47}
