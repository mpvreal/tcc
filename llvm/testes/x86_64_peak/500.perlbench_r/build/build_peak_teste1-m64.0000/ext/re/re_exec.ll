; ModuleID = 'ext/re/re_exec.c'
source_filename = "ext/re/re_exec.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.sv = type { ptr, i32, i32, %union.anon.0 }
%union.anon.0 = type { ptr }
%struct.regmatch_info = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i8, i8, i8, i8 }
%struct.regexp = type { ptr, %union._xmgu, i64, %union.anon, ptr, ptr, ptr, i32, i64, i64, i64, ptr, i32, i32, ptr, i32, i32, ptr, ptr, ptr, i64, i64, i64, i64, i16, ptr }
%union._xmgu = type { ptr }
%union.anon = type { i64 }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, ptr, ptr, i64 }
%struct.p5rx = type { ptr, i32, i32, %union.anon.1 }
%union.anon.1 = type { ptr }
%struct.xpv = type { ptr, %union._xmgu, i64, %union.anon.2 }
%union.anon.2 = type { i64 }
%struct.regexp_internal = type { i32, %union.anon.3, ptr, ptr, ptr, i32, [1 x %struct.regnode] }
%union.anon.3 = type { ptr }
%struct.regnode = type { i8, i8, i16 }
%struct.regnode_string = type { i8, i8, i16, [1 x i8] }
%struct.xpviv = type { ptr, %union._xmgu, i64, %union.anon.4, %union._xivu }
%union.anon.4 = type { i64 }
%union._xivu = type { i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.regnode_charclass = type { i8, i8, i16, i32, [32 x i8] }
%struct.regnode_1 = type { i8, i8, i16, i32 }
%struct.reg_data = type { i32, ptr, [1 x ptr] }
%struct._reg_ac_data = type { i32, i32, ptr, ptr }
%struct._reg_trie_data = type { i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, i16, i32, i64, i64, i32, i32, i32 }
%struct._reg_trie_state = type { i16, %union.anon.19 }
%union.anon.19 = type { ptr }
%struct.reg_trie_wordinfo = type { i16, i32, i32 }
%struct._reg_trie_trans = type { i32, i32 }
%struct.cop = type { ptr, ptr, ptr, i64, i16, i8, i8, i32, ptr, ptr, i32, i32, ptr, ptr }
%struct.magic = type { ptr, ptr, i16, i8, i8, i64, ptr, ptr }
%struct.hv = type { ptr, i32, i32, %union.anon.20 }
%union.anon.20 = type { ptr }
%struct.regmatch_slab = type { [33 x %struct.regmatch_state], ptr, ptr }
%struct.regmatch_state = type { i32, ptr, %union.anon.5 }
%union.anon.5 = type { %struct.anon.16 }
%struct.anon.16 = type { i32, i32, i32, i32, i32, i32, ptr, ptr, i32, i32, i32, ptr, ptr, [14 x i8], [14 x i8] }
%struct.regmatch_info_aux = type { ptr, ptr, ptr, ptr }
%struct.gv = type { ptr, i32, i32, %union.anon.23 }
%union.anon.23 = type { ptr }
%struct.xpvgv = type { ptr, %union._xmgu, i64, %union.anon.43, %union._xivu, %union._xnvu }
%union.anon.43 = type { i64 }
%union._xnvu = type { double }
%struct.regmatch_info_aux_eval = type { ptr, ptr, ptr, ptr, i64, i64, i64, ptr, i64, i8 }
%struct.pmop = type { ptr, ptr, ptr, i64, i16, i8, i8, ptr, ptr, ptr, i32, %union.anon.17, %union.anon.18, ptr }
%union.anon.17 = type { ptr }
%union.anon.18 = type { ptr }
%struct.regnode_charclass_class = type { i8, i8, i16, i32, [32 x i8], i32 }
%struct.regnode_2L = type { i8, i8, i16, i32, i32 }
%struct.xpvcv = type { ptr, %union._xmgu, i64, %union.anon.24, ptr, %union.anon.25, %union.anon.26, %union.anon.27, ptr, %union.anon.28, ptr, i32, i32, i32 }
%union.anon.24 = type { i64 }
%union.anon.25 = type { ptr }
%union.anon.26 = type { ptr }
%union.anon.27 = type { ptr }
%union.anon.28 = type { ptr }
%struct.stackinfo = type { ptr, ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.context = type { %union.anon.30 }
%union.anon.30 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.block = type { i8, i8, i16, i32, ptr, i32, i32, ptr, %union.anon.31 }
%union.anon.31 = type { %struct.block_sub }
%struct.block_sub = type { ptr, ptr, ptr, ptr, i32, ptr }
%struct.op = type { ptr, ptr, ptr, i64, i16, i8, i8 }
%struct.jmpenv = type { [1 x %struct.__jmp_buf_tag], ptr, i32, i8 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.xpvav = type { ptr, %union._xmgu, i64, i64, ptr }
%struct.av = type { ptr, i32, i32, %union.anon.37 }
%union.anon.37 = type { ptr }
%struct.padlist = type { i64, ptr, i32, i32 }
%struct.unop = type { ptr, ptr, ptr, i64, i16, i8, i8, ptr }
%struct.xpvnv = type { ptr, %union._xmgu, i64, %union.anon.38, %union._xivu, %union._xnvu }
%union.anon.38 = type { i64 }
%struct.regexp_engine = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.regnode_2 = type { i8, i8, i16, i16, i16 }
%struct.gp = type { ptr, ptr, ptr, i32, i32, ptr, ptr, ptr, ptr, i32, ptr }
%struct.xpvio = type { ptr, %union._xmgu, i64, %union.anon.39, %union._xivu, ptr, %union.anon.40, i64, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%union.anon.39 = type { i64 }
%union.anon.40 = type { ptr }
%union.any = type { ptr }
%struct.xpvmg = type { ptr, %union._xmgu, i64, %union.anon.21, %union._xivu, %union._xnvu }
%union.anon.21 = type { i64 }
%struct.xpvuv = type { ptr, %union._xmgu, i64, %union.anon.42, %union._xivu }
%union.anon.42 = type { i64 }

@PL_regkind = external local_unnamed_addr constant [0 x i8], align 1
@PL_curcop = external local_unnamed_addr global ptr, align 8
@PL_savestack_ix = external local_unnamed_addr global i32, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"corrupted regexp program\00", align 1
@PL_regmatch_slab = external local_unnamed_addr global ptr, align 8
@PL_regmatch_state = external local_unnamed_addr global ptr, align 8
@PL_curpm = external local_unnamed_addr global ptr, align 8
@PL_utf8skip = external local_unnamed_addr constant [0 x i8], align 1
@PL_fold_latin1 = external local_unnamed_addr constant [0 x i8], align 1
@PL_fold = external local_unnamed_addr constant [0 x i8], align 1
@PL_in_utf8_CTYPE_locale = external local_unnamed_addr global i8, align 1
@PL_fold_locale = external local_unnamed_addr global [0 x i8], align 1
@.str.2 = private unnamed_addr constant [76 x i8] c"Use of \\b{} or \\B{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale\00", align 1
@PL_utf8_swash_ptrs = external local_unnamed_addr global [10 x ptr], align 16
@.str.3 = private unnamed_addr constant [5 x i8] c"utf8\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_sv_undef = external global %struct.sv, align 8
@PL_XPosix_ptrs = external local_unnamed_addr global [16 x ptr], align 16
@PL_charclass = external local_unnamed_addr constant [0 x i32], align 4
@Grapheme_Cluster_Break_invmap = internal unnamed_addr constant [1484 x i32] [i32 2, i32 6, i32 2, i32 1, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 5, i32 13, i32 12, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 2, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 11, i32 0, i32 11, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 4, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 0, i32 11, i32 0, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 5, i32 0, i32 4, i32 11, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 0, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 7, i32 8, i32 0, i32 13, i32 0, i32 12, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 2, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 0, i32 11, i32 0, i32 11, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 11, i32 4, i32 11, i32 4, i32 11, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 11, i32 0, i32 4, i32 0, i32 4, i32 0, i32 2, i32 0, i32 4, i32 11, i32 4, i32 0, i32 11, i32 4, i32 2, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 10, i32 0, i32 2, i32 4, i32 2, i32 0], align 16
@PL_GCB_invlist = external local_unnamed_addr global ptr, align 8
@Sentence_Break_invmap = internal unnamed_addr constant [2835 x i32] [i32 0, i32 14, i32 7, i32 14, i32 2, i32 0, i32 14, i32 12, i32 3, i32 0, i32 3, i32 0, i32 11, i32 1, i32 0, i32 9, i32 11, i32 0, i32 12, i32 0, i32 15, i32 3, i32 0, i32 3, i32 0, i32 8, i32 3, i32 0, i32 3, i32 0, i32 13, i32 0, i32 14, i32 0, i32 8, i32 3, i32 0, i32 6, i32 0, i32 8, i32 0, i32 8, i32 3, i32 0, i32 15, i32 0, i32 15, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 15, i32 8, i32 10, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 8, i32 10, i32 8, i32 0, i32 10, i32 0, i32 8, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 15, i32 8, i32 15, i32 8, i32 10, i32 0, i32 15, i32 8, i32 0, i32 8, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 8, i32 15, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 5, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 10, i32 0, i32 11, i32 0, i32 8, i32 0, i32 12, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 11, i32 0, i32 5, i32 0, i32 6, i32 0, i32 12, i32 10, i32 5, i32 9, i32 0, i32 9, i32 0, i32 10, i32 5, i32 10, i32 12, i32 10, i32 5, i32 6, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 10, i32 9, i32 10, i32 0, i32 10, i32 12, i32 0, i32 6, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 5, i32 10, i32 0, i32 9, i32 10, i32 5, i32 10, i32 0, i32 11, i32 12, i32 10, i32 0, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 12, i32 9, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 9, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 10, i32 0, i32 5, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 10, i32 5, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 3, i32 5, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 5, i32 10, i32 9, i32 12, i32 0, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 9, i32 5, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 12, i32 0, i32 12, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 12, i32 10, i32 14, i32 10, i32 3, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 5, i32 12, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 11, i32 12, i32 0, i32 11, i32 12, i32 0, i32 5, i32 6, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 12, i32 9, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 9, i32 0, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 9, i32 0, i32 9, i32 0, i32 10, i32 12, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 10, i32 0, i32 9, i32 12, i32 0, i32 12, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 10, i32 9, i32 10, i32 5, i32 0, i32 10, i32 5, i32 0, i32 12, i32 0, i32 9, i32 0, i32 10, i32 9, i32 10, i32 12, i32 0, i32 5, i32 0, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 0, i32 5, i32 0, i32 8, i32 5, i32 0, i32 5, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 8, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 8, i32 15, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 14, i32 6, i32 5, i32 6, i32 0, i32 11, i32 0, i32 3, i32 0, i32 1, i32 0, i32 13, i32 6, i32 14, i32 0, i32 3, i32 0, i32 12, i32 0, i32 3, i32 12, i32 0, i32 14, i32 6, i32 0, i32 6, i32 0, i32 8, i32 0, i32 3, i32 8, i32 0, i32 3, i32 0, i32 8, i32 0, i32 5, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 10, i32 8, i32 0, i32 8, i32 15, i32 0, i32 15, i32 8, i32 0, i32 8, i32 0, i32 15, i32 8, i32 10, i32 15, i32 8, i32 10, i32 0, i32 3, i32 0, i32 3, i32 0, i32 15, i32 8, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 15, i32 0, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 5, i32 15, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 12, i32 10, i32 0, i32 12, i32 0, i32 3, i32 0, i32 14, i32 11, i32 12, i32 0, i32 10, i32 3, i32 0, i32 3, i32 0, i32 3, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 12, i32 10, i32 0, i32 12, i32 10, i32 9, i32 10, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 5, i32 0, i32 5, i32 0, i32 10, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 5, i32 10, i32 5, i32 0, i32 12, i32 0, i32 12, i32 0, i32 10, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 10, i32 0, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 0, i32 15, i32 0, i32 10, i32 8, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 0, i32 10, i32 0, i32 12, i32 0, i32 5, i32 10, i32 5, i32 0, i32 12, i32 9, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 9, i32 10, i32 5, i32 0, i32 12, i32 10, i32 5, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 12, i32 0, i32 10, i32 9, i32 0, i32 10, i32 5, i32 10, i32 9, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 5, i32 10, i32 5, i32 0, i32 9, i32 0, i32 12, i32 10, i32 0, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 12, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 10, i32 5, i32 12, i32 5, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 8, i32 0, i32 8, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 3, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 11, i32 0, i32 11, i32 0, i32 3, i32 0, i32 5, i32 0, i32 11, i32 0, i32 3, i32 0, i32 3, i32 0, i32 11, i32 1, i32 0, i32 11, i32 12, i32 11, i32 3, i32 0, i32 11, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 12, i32 0, i32 3, i32 0, i32 11, i32 1, i32 0, i32 11, i32 0, i32 12, i32 0, i32 15, i32 3, i32 0, i32 3, i32 0, i32 8, i32 3, i32 0, i32 3, i32 0, i32 3, i32 12, i32 3, i32 11, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 15, i32 8, i32 10, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 0, i32 5, i32 0, i32 12, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 12, i32 0, i32 9, i32 0, i32 5, i32 10, i32 5, i32 0, i32 6, i32 12, i32 0, i32 10, i32 0, i32 9, i32 0, i32 5, i32 10, i32 5, i32 0, i32 9, i32 0, i32 12, i32 0, i32 10, i32 5, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 10, i32 12, i32 0, i32 12, i32 0, i32 9, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 12, i32 0, i32 12, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 10, i32 5, i32 10, i32 0, i32 10, i32 0, i32 9, i32 0, i32 10, i32 5, i32 0, i32 5, i32 0, i32 12, i32 0, i32 12, i32 0, i32 10, i32 5, i32 12, i32 0, i32 10, i32 0, i32 9, i32 0, i32 10, i32 5, i32 0, i32 9, i32 0, i32 15, i32 8, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 9, i32 0, i32 12, i32 0, i32 10, i32 0, i32 5, i32 12, i32 0, i32 10, i32 5, i32 12, i32 0, i32 10, i32 12, i32 0, i32 9, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 5, i32 0, i32 5, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 5, i32 12, i32 6, i32 0, i32 5, i32 0, i32 5, i32 6, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 8, i32 15, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 15, i32 8, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 15, i32 8, i32 0, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 0, i32 8, i32 0, i32 8, i32 15, i32 8, i32 0, i32 9, i32 0, i32 10, i32 0, i32 5, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 15, i32 0, i32 15, i32 0, i32 15, i32 0, i32 3, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 10, i32 0, i32 6, i32 0, i32 6, i32 0, i32 5, i32 0], align 16
@PL_SB_invlist = external local_unnamed_addr global ptr, align 8
@Word_Break_invmap = internal unnamed_addr constant [1480 x i32] [i32 0, i32 10, i32 14, i32 2, i32 0, i32 3, i32 0, i32 17, i32 0, i32 12, i32 0, i32 13, i32 0, i32 15, i32 11, i32 12, i32 0, i32 1, i32 0, i32 6, i32 0, i32 1, i32 0, i32 14, i32 0, i32 1, i32 0, i32 7, i32 0, i32 1, i32 0, i32 11, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 11, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 12, i32 1, i32 0, i32 1, i32 11, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 12, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 8, i32 0, i32 8, i32 1, i32 11, i32 0, i32 7, i32 0, i32 12, i32 0, i32 5, i32 0, i32 7, i32 0, i32 1, i32 5, i32 15, i32 0, i32 15, i32 12, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 5, i32 7, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 1, i32 15, i32 1, i32 0, i32 1, i32 0, i32 7, i32 1, i32 5, i32 1, i32 5, i32 0, i32 1, i32 5, i32 1, i32 0, i32 15, i32 1, i32 5, i32 1, i32 0, i32 12, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 15, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 7, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 15, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 1, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 1, i32 15, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 15, i32 1, i32 0, i32 5, i32 0, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 7, i32 0, i32 13, i32 0, i32 13, i32 0, i32 11, i32 14, i32 7, i32 0, i32 6, i32 0, i32 12, i32 0, i32 6, i32 0, i32 7, i32 0, i32 7, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 9, i32 0, i32 1, i32 0, i32 5, i32 9, i32 0, i32 9, i32 0, i32 9, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 9, i32 0, i32 9, i32 0, i32 9, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 15, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 15, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 1, i32 15, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 8, i32 5, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 12, i32 0, i32 11, i32 12, i32 0, i32 5, i32 0, i32 6, i32 0, i32 6, i32 12, i32 0, i32 13, i32 0, i32 12, i32 11, i32 0, i32 1, i32 0, i32 1, i32 0, i32 7, i32 0, i32 13, i32 0, i32 12, i32 0, i32 13, i32 0, i32 11, i32 12, i32 0, i32 1, i32 0, i32 6, i32 0, i32 1, i32 0, i32 9, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 7, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 1, i32 5, i32 0, i32 7, i32 0, i32 1, i32 0, i32 15, i32 0, i32 5, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 1, i32 0, i32 15, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 5, i32 0, i32 15, i32 0, i32 1, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 5, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 5, i32 0, i32 5, i32 1, i32 0, i32 9, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 5, i32 0, i32 7, i32 0, i32 5, i32 0, i32 5, i32 7, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 15, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 16, i32 0, i32 7, i32 0, i32 7, i32 0, i32 5, i32 0], align 16
@PL_WB_invlist = external local_unnamed_addr global ptr, align 8
@.str.5 = private unnamed_addr constant [74 x i8] c"panic: find_byclass() node %d='%s' has an unexpected character class '%d'\00", align 1
@PL_reg_name = external local_unnamed_addr global [0 x ptr], align 8
@PL_tmps_floor = external global i64, align 8
@PL_tmps_ix = external local_unnamed_addr global i64, align 8
@.str.6 = private unnamed_addr constant [29 x i8] c"panic: unknown regstclass %d\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Malformed UTF-8 character (fatal)\00", align 1
@.str.8 = private unnamed_addr constant [85 x i8] c"Matched non-Unicode code point 0x%04lX against Unicode property; may not be portable\00", align 1
@.str.9 = private unnamed_addr constant [57 x i8] c"panic: isFOO_lc() has an unexpected character class '%d'\00", align 1
@PL_replgv = external local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [28 x i8] c"Infinite recursion in regex\00", align 1
@.str.11 = private unnamed_addr constant [70 x i8] c"Pattern subroutine nesting without pos change exceeded limit in regex\00", align 1
@.str.12 = private unnamed_addr constant [48 x i8] c"EVAL without pos change exceeded limit in regex\00", align 1
@PL_stack_sp = external local_unnamed_addr global ptr, align 8
@PL_op = external global ptr, align 8
@PL_comppad = external local_unnamed_addr global ptr, align 8
@PL_curstackinfo = external local_unnamed_addr global ptr, align 8
@PL_curpad = external local_unnamed_addr global ptr, align 8
@PL_top_env = external local_unnamed_addr global ptr, align 8
@PL_stack_base = external local_unnamed_addr global ptr, align 8
@PL_curstack = external local_unnamed_addr global ptr, align 8
@PL_stack_max = external local_unnamed_addr global ptr, align 8
@PL_markstack_ptr = external local_unnamed_addr global ptr, align 8
@PL_markstack = external local_unnamed_addr global ptr, align 8
@PL_scopestack_ix = external local_unnamed_addr global i32, align 4
@.str.13 = private unnamed_addr constant [8 x i8] c"REGMARK\00", align 1
@PL_runops = external local_unnamed_addr global ptr, align 8
@PL_reg_curpm = external local_unnamed_addr global ptr, align 8
@.str.14 = private unnamed_addr constant [60 x i8] c"Complex regular subexpression recursion limit (%d) exceeded\00", align 1
@PL_stderrgv = external local_unnamed_addr global ptr, align 8
@.str.15 = private unnamed_addr constant [8 x i8] c"%lx %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"regexp memory corruption\00", align 1
@.str.17 = private unnamed_addr constant [26 x i8] c"corrupted regexp pointers\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"REGERROR\00", align 1
@PL_sv_no = external global %struct.sv, align 8
@PL_sv_yes = external global %struct.sv, align 8
@.str.19 = private unnamed_addr constant [90 x i8] c"panic: paren_elems_to_push, %i < 0, maxopenparen: %i parenfloor: %i REGCP_PAREN_ELEMS: %u\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"panic: paren_elems_to_push offset %lu out of range (%lu-%ld)\00", align 1
@PL_savestack_max = external local_unnamed_addr global i32, align 4
@PL_savestack = external local_unnamed_addr global ptr, align 8
@PL_utf8_foldclosures = external local_unnamed_addr global ptr, align 8
@.str.21 = private unnamed_addr constant [46 x i8] c"panic: invalid PL_utf8_foldclosures structure\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"panic: Unexpected op %u\00", align 1
@.str.23 = private unnamed_addr constant [71 x i8] c"panic: regrepeat() node %d='%s' has an unexpected character class '%d'\00", align 1
@.str.24 = private unnamed_addr constant [62 x i8] c"panic: regrepeat() called with unrecognized node type %d='%s'\00", align 1
@PL_defgv = external local_unnamed_addr global ptr, align 8

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @my_re_intuit_start(ptr nocapture noundef readonly %0, ptr noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 %5, ptr nocapture readnone %6) local_unnamed_addr #0 {
  %8 = alloca %struct.regmatch_info, align 8
  %9 = getelementptr i8, ptr %0, i64 16
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 11
  %12 = load ptr, ptr %11, align 8, !tbaa !8
  %13 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2
  %14 = load i64, ptr %13, align 8, !tbaa !13
  %15 = icmp eq ptr %1, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.sv, ptr %1, i64 0, i32 2
  %18 = load i32, ptr %17, align 4, !tbaa !15
  %19 = and i32 %18, 536870912
  %20 = icmp ne i32 %19, 0
  br label %21

21:                                               ; preds = %16, %7
  %22 = phi i1 [ false, %7 ], [ %20, %16 ]
  %23 = load i8, ptr %12, align 8, !tbaa !17
  %24 = sub i8 1, %23
  %25 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 7
  %26 = load i32, ptr %25, align 8, !tbaa !19
  %27 = and i32 %26, 1
  %28 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 14
  %29 = load ptr, ptr %28, align 8, !tbaa !20
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %8) #12
  %30 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 8
  %31 = load i64, ptr %30, align 8, !tbaa !21
  %32 = ptrtoint ptr %4 to i64
  %33 = ptrtoint ptr %3 to i64
  %34 = sub i64 %32, %33
  %35 = icmp sgt i64 %31, %34
  br i1 %35, label %1408, label %36

36:                                               ; preds = %21
  %37 = zext i1 %22 to i8
  %38 = and i32 %26, -1048577
  %39 = select i1 %22, i32 1048576, i32 0
  %40 = or i32 %38, %39
  store i32 %40, ptr %25, align 8, !tbaa !19
  %41 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 14
  store i8 %37, ptr %41, align 2, !tbaa !22
  %42 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 7
  store ptr null, ptr %42, align 8, !tbaa !25
  %43 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 1
  store ptr %2, ptr %43, align 8, !tbaa !26
  %44 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 2
  store ptr %4, ptr %44, align 8, !tbaa !27
  %45 = getelementptr inbounds %struct.p5rx, ptr %0, i64 0, i32 2
  %46 = load i32, ptr %45, align 4, !tbaa !28
  %47 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 13
  %48 = lshr i32 %46, 29
  %49 = trunc i32 %48 to i8
  %50 = and i8 %49, 1
  store i8 %50, ptr %47, align 1, !tbaa !30
  %51 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 12
  store i8 1, ptr %51, align 8, !tbaa !31
  %52 = getelementptr inbounds %struct.regmatch_info, ptr %8, i64 0, i32 9
  store i32 0, ptr %52, align 8, !tbaa !32
  br i1 %22, label %53, label %66

53:                                               ; preds = %36
  %54 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 3
  %55 = load ptr, ptr %54, align 8, !tbaa !33
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !34
  %60 = icmp eq ptr %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %10)
  %62 = load ptr, ptr %11, align 8, !tbaa !8
  br label %63

63:                                               ; preds = %61, %57, %53
  %64 = phi ptr [ %62, %61 ], [ %12, %57 ], [ %12, %53 ]
  %65 = getelementptr inbounds %struct.reg_substr_data, ptr %64, i64 0, i32 1, i64 2, i32 3
  br label %81

66:                                               ; preds = %36
  %67 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !34
  %69 = icmp eq ptr %68, null
  br i1 %69, label %70, label %78

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.reg_substr_data, ptr %12, i64 0, i32 1, i64 2, i32 3
  %72 = load ptr, ptr %71, align 8, !tbaa !33
  %73 = icmp eq ptr %72, null
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %10)
  br i1 %75, label %76, label %1408

76:                                               ; preds = %74
  %77 = load ptr, ptr %11, align 8, !tbaa !8
  br label %78

78:                                               ; preds = %76, %70, %66
  %79 = phi ptr [ %77, %76 ], [ %12, %70 ], [ %12, %66 ]
  %80 = getelementptr inbounds %struct.reg_substr_data, ptr %79, i64 0, i32 1, i64 2, i32 2
  br label %81

81:                                               ; preds = %78, %63
  %82 = phi ptr [ %64, %63 ], [ %79, %78 ]
  %83 = phi ptr [ %65, %63 ], [ %80, %78 ]
  %84 = load ptr, ptr %83, align 8, !tbaa !35
  %85 = getelementptr inbounds %struct.regexp, ptr %10, i64 0, i32 13
  %86 = load i32, ptr %85, align 4, !tbaa !36
  %87 = and i32 %86, 7168
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %154, label %89

89:                                               ; preds = %81
  %90 = and i32 %86, 2
  %91 = icmp ne i32 %90, 0
  %92 = and i32 %86, 1026
  %93 = icmp eq i32 %92, 1024
  %94 = or i1 %93, %91
  %95 = zext i1 %93 to i8
  br i1 %94, label %154, label %96

96:                                               ; preds = %89
  %97 = icmp eq ptr %3, %2
  %98 = and i32 %86, 2048
  %99 = icmp eq i32 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %1408

101:                                              ; preds = %96
  %102 = getelementptr inbounds %struct.reg_substr_data, ptr %82, i64 0, i32 1, i64 2
  %103 = load i64, ptr %102, align 8, !tbaa !13
  %104 = getelementptr inbounds %struct.reg_substr_data, ptr %82, i64 0, i32 1, i64 2, i32 1
  %105 = load i64, ptr %104, align 8, !tbaa !37
  %106 = icmp eq i64 %103, %105
  %107 = and i32 %86, 128
  %108 = icmp eq i32 %107, 0
  %109 = and i1 %108, %106
  br i1 %109, label %110, label %154

110:                                              ; preds = %101
  %111 = load ptr, ptr %84, align 8, !tbaa !38
  %112 = getelementptr inbounds %struct.xpv, ptr %111, i64 0, i32 2
  %113 = load i64, ptr %112, align 8, !tbaa !39
  br i1 %22, label %114, label %116

114:                                              ; preds = %110
  %115 = tail call fastcc ptr @S_reghop3(ptr noundef %3, i64 noundef %103, ptr noundef %4)
  br label %118

116:                                              ; preds = %110
  %117 = getelementptr inbounds i8, ptr %3, i64 %103
  br label %118

118:                                              ; preds = %116, %114
  %119 = phi ptr [ %115, %114 ], [ %117, %116 ]
  %120 = getelementptr inbounds %struct.sv, ptr %84, i64 0, i32 2
  %121 = load i32, ptr %120, align 4, !tbaa !15
  %122 = icmp ugt i32 %121, -1073741825
  br i1 %122, label %123, label %140

123:                                              ; preds = %118
  %124 = icmp eq i32 %27, 0
  br i1 %124, label %127, label %125

125:                                              ; preds = %123
  %126 = add nsw i64 %113, -1
  br label %140

127:                                              ; preds = %123
  %128 = ptrtoint ptr %119 to i64
  %129 = sub i64 %32, %128
  %130 = icmp sgt i64 %129, %113
  %131 = add nsw i64 %113, -1
  %132 = icmp slt i64 %129, %131
  %133 = select i1 %130, i1 true, i1 %132
  br i1 %133, label %1391, label %134

134:                                              ; preds = %127
  %135 = icmp eq i64 %129, %113
  br i1 %135, label %136, label %140

136:                                              ; preds = %134
  %137 = getelementptr inbounds i8, ptr %4, i64 -1
  %138 = load i8, ptr %137, align 1, !tbaa !5
  %139 = icmp eq i8 %138, 10
  br i1 %139, label %140, label %1391

140:                                              ; preds = %134, %136, %125, %118
  %141 = phi i64 [ %113, %118 ], [ %126, %125 ], [ %131, %136 ], [ %131, %134 ]
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %1025, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %struct.sv, ptr %84, i64 0, i32 3
  %145 = load ptr, ptr %144, align 8, !tbaa !5
  %146 = load i8, ptr %145, align 1, !tbaa !5
  %147 = load i8, ptr %119, align 1, !tbaa !5
  %148 = icmp eq i8 %146, %147
  br i1 %148, label %149, label %1391

149:                                              ; preds = %143
  %150 = icmp sgt i64 %141, 1
  br i1 %150, label %151, label %1025

151:                                              ; preds = %149
  %152 = tail call i32 @bcmp(ptr nonnull %145, ptr nonnull %119, i64 %141)
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %1025, label %1391

154:                                              ; preds = %89, %101, %81
  %155 = phi i8 [ %95, %89 ], [ 0, %101 ], [ 0, %81 ]
  %156 = getelementptr inbounds %struct.reg_substr_data, ptr %82, i64 0, i32 1, i64 2, i32 4
  %157 = load i64, ptr %156, align 8, !tbaa !41
  br label %158

158:                                              ; preds = %799, %764, %1013, %954, %751, %804, %741, %759, %761, %744, %1305, %154
  %159 = phi ptr [ %3, %154 ], [ %1027, %1305 ], [ %739, %751 ], [ %739, %804 ], [ %742, %741 ], [ %754, %759 ], [ %754, %761 ], [ %742, %744 ], [ %878, %954 ], [ %878, %1013 ], [ %754, %764 ], [ %754, %799 ]
  %160 = phi i8 [ %155, %154 ], [ %1028, %1305 ], [ %461, %751 ], [ %461, %804 ], [ %461, %741 ], [ %461, %759 ], [ %461, %761 ], [ %461, %744 ], [ %879, %954 ], [ %879, %1013 ], [ %461, %764 ], [ %461, %799 ]
  %161 = phi ptr [ %3, %154 ], [ %1307, %1305 ], [ %752, %751 ], [ %807, %804 ], [ %462, %741 ], [ %701, %759 ], [ %701, %761 ], [ %750, %744 ], [ %955, %954 ], [ %955, %1013 ], [ %773, %764 ], [ %800, %799 ]
  %162 = phi i64 [ %157, %154 ], [ %1030, %1305 ], [ %463, %751 ], [ %463, %804 ], [ %463, %741 ], [ %463, %759 ], [ %463, %761 ], [ %463, %744 ], [ %881, %954 ], [ %881, %1013 ], [ %463, %764 ], [ %463, %799 ]
  %163 = load i32, ptr %85, align 4, !tbaa !36
  %164 = and i32 %163, 128
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %171, label %166

166:                                              ; preds = %158
  %167 = getelementptr inbounds i8, ptr %161, i64 %14
  %168 = sub i64 0, %162
  %169 = getelementptr inbounds i8, ptr %4, i64 %168
  %170 = icmp ugt ptr %167, %169
  br i1 %170, label %1391, label %288

171:                                              ; preds = %158
  %172 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %173 = icmp eq i8 %172, 0
  %174 = sub nsw i64 0, %162
  br i1 %173, label %224, label %175

175:                                              ; preds = %171
  %176 = ptrtoint ptr %2 to i64
  %177 = icmp slt i64 %162, 1
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = icmp ugt ptr %4, %2
  br i1 %179, label %197, label %228

180:                                              ; preds = %175
  %181 = icmp ne i64 %162, 0
  %182 = icmp ult ptr %4, %2
  %183 = and i1 %182, %181
  br i1 %183, label %184, label %228

184:                                              ; preds = %180, %184
  %185 = phi ptr [ %193, %184 ], [ %4, %180 ]
  %186 = phi i64 [ %187, %184 ], [ %174, %180 ]
  %187 = add nsw i64 %186, -1
  %188 = load i8, ptr %185, align 1, !tbaa !5
  %189 = zext i8 %188 to i64
  %190 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %189
  %191 = load i8, ptr %190, align 1, !tbaa !5
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds i8, ptr %185, i64 %192
  %194 = icmp ne i64 %187, 0
  %195 = icmp ult ptr %193, %2
  %196 = select i1 %194, i1 %195, i1 false
  br i1 %196, label %184, label %228, !llvm.loop !44

197:                                              ; preds = %178, %219
  %198 = phi i64 [ %200, %219 ], [ %174, %178 ]
  %199 = phi ptr [ %220, %219 ], [ %4, %178 ]
  %200 = add nsw i64 %198, 1
  %201 = getelementptr inbounds i8, ptr %199, i64 -1
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = icmp slt i8 %202, 0
  %204 = icmp ugt ptr %201, %2
  %205 = and i1 %203, %204
  br i1 %205, label %206, label %219

206:                                              ; preds = %197
  %207 = ptrtoint ptr %199 to i64
  %208 = getelementptr i8, ptr %199, i64 %176
  %209 = sub i64 0, %207
  %210 = getelementptr i8, ptr %208, i64 %209
  br label %211

211:                                              ; preds = %216, %206
  %212 = phi ptr [ %217, %216 ], [ %201, %206 ]
  %213 = load i8, ptr %212, align 1, !tbaa !5
  %214 = and i8 %213, -64
  %215 = icmp eq i8 %214, -128
  br i1 %215, label %216, label %219

216:                                              ; preds = %211
  %217 = getelementptr inbounds i8, ptr %212, i64 -1
  %218 = icmp ugt ptr %217, %2
  br i1 %218, label %211, label %219, !llvm.loop !46

219:                                              ; preds = %216, %211, %197
  %220 = phi ptr [ %201, %197 ], [ %212, %211 ], [ %210, %216 ]
  %221 = icmp ne i64 %200, 0
  %222 = icmp ugt ptr %220, %2
  %223 = and i1 %221, %222
  br i1 %223, label %197, label %228, !llvm.loop !47

224:                                              ; preds = %171
  %225 = getelementptr inbounds i8, ptr %4, i64 %174
  %226 = getelementptr inbounds i8, ptr %161, i64 %14
  %227 = icmp ugt ptr %226, %225
  br i1 %227, label %1391, label %284

228:                                              ; preds = %219, %184, %178, %180
  %229 = phi ptr [ %4, %180 ], [ %4, %178 ], [ %193, %184 ], [ %220, %219 ]
  %230 = ptrtoint ptr %229 to i64
  %231 = icmp sgt i64 %14, -1
  br i1 %231, label %234, label %232

232:                                              ; preds = %228
  %233 = icmp ugt ptr %161, %229
  br i1 %233, label %255, label %1391

234:                                              ; preds = %228
  %235 = icmp ne i64 %14, 0
  %236 = icmp ult ptr %161, %229
  %237 = and i1 %235, %236
  br i1 %237, label %238, label %251

238:                                              ; preds = %234, %238
  %239 = phi i64 [ %241, %238 ], [ %14, %234 ]
  %240 = phi ptr [ %247, %238 ], [ %161, %234 ]
  %241 = add nsw i64 %239, -1
  %242 = load i8, ptr %240, align 1, !tbaa !5
  %243 = zext i8 %242 to i64
  %244 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %243
  %245 = load i8, ptr %244, align 1, !tbaa !5
  %246 = zext i8 %245 to i64
  %247 = getelementptr inbounds i8, ptr %240, i64 %246
  %248 = icmp ne i64 %241, 0
  %249 = icmp ult ptr %247, %229
  %250 = select i1 %248, i1 %249, i1 false
  br i1 %250, label %238, label %251, !llvm.loop !48

251:                                              ; preds = %238, %234
  %252 = phi ptr [ %161, %234 ], [ %247, %238 ]
  %253 = phi i64 [ %14, %234 ], [ %241, %238 ]
  %254 = icmp sgt i64 %253, 0
  br i1 %254, label %1391, label %284

255:                                              ; preds = %232, %277
  %256 = phi i64 [ %258, %277 ], [ %14, %232 ]
  %257 = phi ptr [ %278, %277 ], [ %161, %232 ]
  %258 = add nsw i64 %256, 1
  %259 = getelementptr inbounds i8, ptr %257, i64 -1
  %260 = load i8, ptr %259, align 1, !tbaa !5
  %261 = icmp slt i8 %260, 0
  %262 = icmp ugt ptr %259, %229
  %263 = and i1 %261, %262
  br i1 %263, label %264, label %277

264:                                              ; preds = %255
  %265 = ptrtoint ptr %257 to i64
  %266 = getelementptr i8, ptr %257, i64 %230
  %267 = sub i64 0, %265
  %268 = getelementptr i8, ptr %266, i64 %267
  br label %269

269:                                              ; preds = %274, %264
  %270 = phi ptr [ %275, %274 ], [ %259, %264 ]
  %271 = load i8, ptr %270, align 1, !tbaa !5
  %272 = and i8 %271, -64
  %273 = icmp eq i8 %272, -128
  br i1 %273, label %274, label %277

274:                                              ; preds = %269
  %275 = getelementptr inbounds i8, ptr %270, i64 -1
  %276 = icmp ugt ptr %275, %229
  br i1 %276, label %269, label %277, !llvm.loop !49

277:                                              ; preds = %274, %269, %255
  %278 = phi ptr [ %259, %255 ], [ %270, %269 ], [ %268, %274 ]
  %279 = icmp ne i64 %258, 0
  %280 = icmp ugt ptr %278, %229
  %281 = and i1 %279, %280
  br i1 %281, label %255, label %282, !llvm.loop !50

282:                                              ; preds = %277
  %283 = icmp slt i64 %256, -1
  br i1 %283, label %1391, label %284

284:                                              ; preds = %251, %282, %224
  %285 = phi ptr [ %225, %224 ], [ %229, %282 ], [ %229, %251 ]
  %286 = phi ptr [ %226, %224 ], [ %278, %282 ], [ %252, %251 ]
  %287 = icmp eq ptr %286, null
  br i1 %287, label %1391, label %288

288:                                              ; preds = %284, %166
  %289 = phi ptr [ %169, %166 ], [ %285, %284 ]
  %290 = phi ptr [ %167, %166 ], [ %286, %284 ]
  %291 = and i8 %160, 1
  %292 = icmp ne i8 %291, 0
  %293 = and i32 %163, 7168
  %294 = icmp eq i32 %293, 0
  %295 = or i1 %292, %294
  br i1 %295, label %380, label %296

296:                                              ; preds = %288
  %297 = load ptr, ptr %11, align 8, !tbaa !8
  %298 = getelementptr inbounds %struct.reg_substr_data, ptr %297, i64 0, i32 1, i64 2, i32 1
  %299 = load i64, ptr %298, align 8, !tbaa !37
  %300 = icmp eq i64 %299, 9223372036854775807
  br i1 %300, label %380, label %301

301:                                              ; preds = %296
  %302 = load ptr, ptr %84, align 8, !tbaa !38
  %303 = getelementptr inbounds %struct.xpv, ptr %302, i64 0, i32 2
  %304 = load i64, ptr %303, align 8, !tbaa !39
  %305 = getelementptr inbounds %struct.sv, ptr %84, i64 0, i32 2
  %306 = load i32, ptr %305, align 4, !tbaa !15
  %307 = icmp ugt i32 %306, -1073741825
  %308 = sext i1 %307 to i64
  %309 = add i64 %304, %308
  %310 = and i32 %163, 4096
  %311 = icmp eq i32 %310, 0
  %312 = select i1 %311, ptr %2, ptr %3
  %313 = ptrtoint ptr %289 to i64
  %314 = ptrtoint ptr %312 to i64
  %315 = sub i64 %313, %314
  %316 = icmp sgt i64 %315, %299
  br i1 %316, label %317, label %380

317:                                              ; preds = %301
  %318 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %319 = icmp eq i8 %318, 0
  br i1 %319, label %371, label %320

320:                                              ; preds = %317
  %321 = sub i64 0, %309
  %322 = getelementptr inbounds i8, ptr %289, i64 %321
  %323 = ptrtoint ptr %322 to i64
  %324 = icmp sgt i64 %299, -1
  br i1 %324, label %327, label %325

325:                                              ; preds = %320
  %326 = icmp ugt ptr %312, %322
  br i1 %326, label %344, label %377

327:                                              ; preds = %320
  %328 = icmp ne i64 %299, 0
  %329 = icmp ult ptr %312, %322
  %330 = and i1 %328, %329
  br i1 %330, label %331, label %377

331:                                              ; preds = %327, %331
  %332 = phi ptr [ %340, %331 ], [ %312, %327 ]
  %333 = phi i64 [ %334, %331 ], [ %299, %327 ]
  %334 = add nsw i64 %333, -1
  %335 = load i8, ptr %332, align 1, !tbaa !5
  %336 = zext i8 %335 to i64
  %337 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %336
  %338 = load i8, ptr %337, align 1, !tbaa !5
  %339 = zext i8 %338 to i64
  %340 = getelementptr inbounds i8, ptr %332, i64 %339
  %341 = icmp ne i64 %334, 0
  %342 = icmp ult ptr %340, %322
  %343 = select i1 %341, i1 %342, i1 false
  br i1 %343, label %331, label %377, !llvm.loop !44

344:                                              ; preds = %325, %366
  %345 = phi i64 [ %347, %366 ], [ %299, %325 ]
  %346 = phi ptr [ %367, %366 ], [ %312, %325 ]
  %347 = add nsw i64 %345, 1
  %348 = getelementptr inbounds i8, ptr %346, i64 -1
  %349 = load i8, ptr %348, align 1, !tbaa !5
  %350 = icmp slt i8 %349, 0
  %351 = icmp ugt ptr %348, %322
  %352 = and i1 %350, %351
  br i1 %352, label %353, label %366

353:                                              ; preds = %344
  %354 = ptrtoint ptr %346 to i64
  %355 = getelementptr i8, ptr %346, i64 %323
  %356 = sub i64 0, %354
  %357 = getelementptr i8, ptr %355, i64 %356
  br label %358

358:                                              ; preds = %363, %353
  %359 = phi ptr [ %364, %363 ], [ %348, %353 ]
  %360 = load i8, ptr %359, align 1, !tbaa !5
  %361 = and i8 %360, -64
  %362 = icmp eq i8 %361, -128
  br i1 %362, label %363, label %366

363:                                              ; preds = %358
  %364 = getelementptr inbounds i8, ptr %359, i64 -1
  %365 = icmp ugt ptr %364, %322
  br i1 %365, label %358, label %366, !llvm.loop !46

366:                                              ; preds = %363, %358, %344
  %367 = phi ptr [ %348, %344 ], [ %359, %358 ], [ %357, %363 ]
  %368 = icmp ne i64 %347, 0
  %369 = icmp ugt ptr %367, %322
  %370 = and i1 %368, %369
  br i1 %370, label %344, label %377, !llvm.loop !47

371:                                              ; preds = %317
  %372 = getelementptr inbounds i8, ptr %312, i64 %299
  %373 = sub i64 0, %309
  %374 = getelementptr inbounds i8, ptr %289, i64 %373
  %375 = icmp ugt ptr %372, %374
  %376 = select i1 %375, ptr %374, ptr %372
  br label %377

377:                                              ; preds = %366, %331, %327, %325, %371
  %378 = phi ptr [ %376, %371 ], [ %312, %327 ], [ %312, %325 ], [ %340, %331 ], [ %367, %366 ]
  %379 = getelementptr inbounds i8, ptr %378, i64 %309
  br label %380

380:                                              ; preds = %301, %377, %296, %288
  %381 = phi ptr [ %289, %288 ], [ %289, %296 ], [ %379, %377 ], [ %289, %301 ]
  %382 = call ptr @Perl_fbm_instr(ptr noundef %290, ptr noundef %381, ptr noundef %84, i32 noundef %27) #12
  %383 = icmp eq ptr %382, null
  br i1 %383, label %1391, label %384

384:                                              ; preds = %380
  %385 = ptrtoint ptr %382 to i64
  %386 = ptrtoint ptr %161 to i64
  %387 = sub i64 %385, %386
  %388 = load ptr, ptr %11, align 8, !tbaa !8
  %389 = getelementptr inbounds %struct.reg_substr_data, ptr %388, i64 0, i32 1, i64 2, i32 1
  %390 = load i64, ptr %389, align 8, !tbaa !37
  %391 = icmp sgt i64 %387, %390
  br i1 %391, label %392, label %446

392:                                              ; preds = %384
  %393 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %394 = icmp eq i8 %393, 0
  %395 = sub nsw i64 0, %390
  br i1 %394, label %444, label %396

396:                                              ; preds = %392
  %397 = icmp slt i64 %390, 1
  br i1 %397, label %400, label %398

398:                                              ; preds = %396
  %399 = icmp ugt ptr %382, %161
  br i1 %399, label %417, label %446

400:                                              ; preds = %396
  %401 = icmp ne i64 %390, 0
  %402 = icmp ult ptr %382, %161
  %403 = and i1 %402, %401
  br i1 %403, label %404, label %446

404:                                              ; preds = %400, %404
  %405 = phi ptr [ %413, %404 ], [ %382, %400 ]
  %406 = phi i64 [ %407, %404 ], [ %395, %400 ]
  %407 = add nsw i64 %406, -1
  %408 = load i8, ptr %405, align 1, !tbaa !5
  %409 = zext i8 %408 to i64
  %410 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %409
  %411 = load i8, ptr %410, align 1, !tbaa !5
  %412 = zext i8 %411 to i64
  %413 = getelementptr inbounds i8, ptr %405, i64 %412
  %414 = icmp ne i64 %407, 0
  %415 = icmp ult ptr %413, %161
  %416 = select i1 %414, i1 %415, i1 false
  br i1 %416, label %404, label %446, !llvm.loop !44

417:                                              ; preds = %398, %439
  %418 = phi i64 [ %420, %439 ], [ %395, %398 ]
  %419 = phi ptr [ %440, %439 ], [ %382, %398 ]
  %420 = add nsw i64 %418, 1
  %421 = getelementptr inbounds i8, ptr %419, i64 -1
  %422 = load i8, ptr %421, align 1, !tbaa !5
  %423 = icmp slt i8 %422, 0
  %424 = icmp ugt ptr %421, %161
  %425 = and i1 %423, %424
  br i1 %425, label %426, label %439

426:                                              ; preds = %417
  %427 = ptrtoint ptr %419 to i64
  %428 = getelementptr i8, ptr %419, i64 %386
  %429 = sub i64 0, %427
  %430 = getelementptr i8, ptr %428, i64 %429
  br label %431

431:                                              ; preds = %436, %426
  %432 = phi ptr [ %437, %436 ], [ %421, %426 ]
  %433 = load i8, ptr %432, align 1, !tbaa !5
  %434 = and i8 %433, -64
  %435 = icmp eq i8 %434, -128
  br i1 %435, label %436, label %439

436:                                              ; preds = %431
  %437 = getelementptr inbounds i8, ptr %432, i64 -1
  %438 = icmp ugt ptr %437, %161
  br i1 %438, label %431, label %439, !llvm.loop !46

439:                                              ; preds = %436, %431, %417
  %440 = phi ptr [ %421, %417 ], [ %432, %431 ], [ %430, %436 ]
  %441 = icmp ne i64 %420, 0
  %442 = icmp ugt ptr %440, %161
  %443 = and i1 %441, %442
  br i1 %443, label %417, label %446, !llvm.loop !47

444:                                              ; preds = %392
  %445 = getelementptr inbounds i8, ptr %382, i64 %395
  br label %446

446:                                              ; preds = %439, %404, %444, %384, %398, %400
  %447 = phi ptr [ %382, %398 ], [ %382, %400 ], [ %445, %444 ], [ %161, %384 ], [ %413, %404 ], [ %440, %439 ]
  %448 = zext i8 %24 to i64
  br i1 %22, label %449, label %453

449:                                              ; preds = %446
  %450 = getelementptr inbounds %struct.reg_substr_data, ptr %388, i64 0, i32 1, i64 %448, i32 3
  %451 = load ptr, ptr %450, align 8, !tbaa !33
  %452 = icmp eq ptr %451, null
  br i1 %452, label %876, label %457

453:                                              ; preds = %446
  %454 = getelementptr inbounds %struct.reg_substr_data, ptr %388, i64 0, i32 1, i64 %448, i32 2
  %455 = load ptr, ptr %454, align 8, !tbaa !34
  %456 = icmp eq ptr %455, null
  br i1 %456, label %876, label %457

457:                                              ; preds = %1267, %1017, %1021, %449, %453
  %458 = phi ptr [ %388, %453 ], [ %388, %449 ], [ %956, %1021 ], [ %956, %1017 ], [ %1259, %1267 ]
  %459 = phi ptr [ %382, %453 ], [ %382, %449 ], [ %877, %1021 ], [ %877, %1017 ], [ %1026, %1267 ]
  %460 = phi ptr [ %159, %453 ], [ %159, %449 ], [ %878, %1021 ], [ %878, %1017 ], [ %1027, %1267 ]
  %461 = phi i8 [ %160, %453 ], [ %160, %449 ], [ %879, %1021 ], [ %879, %1017 ], [ %1028, %1267 ]
  %462 = phi ptr [ %447, %453 ], [ %447, %449 ], [ %955, %1021 ], [ %955, %1017 ], [ %1029, %1267 ]
  %463 = phi i64 [ %162, %453 ], [ %162, %449 ], [ %881, %1021 ], [ %881, %1017 ], [ %1030, %1267 ]
  %464 = zext i8 %24 to i64
  %465 = getelementptr inbounds %struct.reg_substr_data, ptr %458, i64 0, i32 1, i64 %464
  %466 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %467 = icmp eq i8 %466, 0
  %468 = load i64, ptr %465, align 8, !tbaa !13
  br i1 %467, label %523, label %469

469:                                              ; preds = %457
  %470 = load i64, ptr %30, align 8, !tbaa !21
  %471 = sub nsw i64 %468, %470
  %472 = ptrtoint ptr %2 to i64
  %473 = icmp sgt i64 %471, -1
  br i1 %473, label %476, label %474

474:                                              ; preds = %469
  %475 = icmp ugt ptr %4, %2
  br i1 %475, label %493, label %520

476:                                              ; preds = %469
  %477 = icmp ne i64 %471, 0
  %478 = icmp ult ptr %4, %2
  %479 = and i1 %478, %477
  br i1 %479, label %480, label %520

480:                                              ; preds = %476, %480
  %481 = phi ptr [ %489, %480 ], [ %4, %476 ]
  %482 = phi i64 [ %483, %480 ], [ %471, %476 ]
  %483 = add nsw i64 %482, -1
  %484 = load i8, ptr %481, align 1, !tbaa !5
  %485 = zext i8 %484 to i64
  %486 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %485
  %487 = load i8, ptr %486, align 1, !tbaa !5
  %488 = zext i8 %487 to i64
  %489 = getelementptr inbounds i8, ptr %481, i64 %488
  %490 = icmp ne i64 %483, 0
  %491 = icmp ult ptr %489, %2
  %492 = select i1 %490, i1 %491, i1 false
  br i1 %492, label %480, label %520, !llvm.loop !44

493:                                              ; preds = %474, %515
  %494 = phi i64 [ %496, %515 ], [ %471, %474 ]
  %495 = phi ptr [ %516, %515 ], [ %4, %474 ]
  %496 = add nsw i64 %494, 1
  %497 = getelementptr inbounds i8, ptr %495, i64 -1
  %498 = load i8, ptr %497, align 1, !tbaa !5
  %499 = icmp slt i8 %498, 0
  %500 = icmp ugt ptr %497, %2
  %501 = and i1 %499, %500
  br i1 %501, label %502, label %515

502:                                              ; preds = %493
  %503 = ptrtoint ptr %495 to i64
  %504 = getelementptr i8, ptr %495, i64 %472
  %505 = sub i64 0, %503
  %506 = getelementptr i8, ptr %504, i64 %505
  br label %507

507:                                              ; preds = %512, %502
  %508 = phi ptr [ %513, %512 ], [ %497, %502 ]
  %509 = load i8, ptr %508, align 1, !tbaa !5
  %510 = and i8 %509, -64
  %511 = icmp eq i8 %510, -128
  br i1 %511, label %512, label %515

512:                                              ; preds = %507
  %513 = getelementptr inbounds i8, ptr %508, i64 -1
  %514 = icmp ugt ptr %513, %2
  br i1 %514, label %507, label %515, !llvm.loop !46

515:                                              ; preds = %512, %507, %493
  %516 = phi ptr [ %497, %493 ], [ %508, %507 ], [ %506, %512 ]
  %517 = icmp ne i64 %496, 0
  %518 = icmp ugt ptr %516, %2
  %519 = and i1 %517, %518
  br i1 %519, label %493, label %520, !llvm.loop !47

520:                                              ; preds = %515, %480, %476, %474
  %521 = phi ptr [ %4, %476 ], [ %4, %474 ], [ %489, %480 ], [ %516, %515 ]
  %522 = icmp eq i8 %23, 1
  br i1 %522, label %595, label %529

523:                                              ; preds = %457
  %524 = getelementptr inbounds i8, ptr %4, i64 %468
  %525 = load i64, ptr %30, align 8, !tbaa !21
  %526 = sub i64 0, %525
  %527 = getelementptr inbounds i8, ptr %524, i64 %526
  %528 = icmp eq i8 %23, 1
  br i1 %528, label %644, label %536

529:                                              ; preds = %520
  %530 = ptrtoint ptr %521 to i64
  %531 = ptrtoint ptr %462 to i64
  %532 = sub i64 %530, %531
  %533 = getelementptr inbounds %struct.reg_substr_data, ptr %458, i64 0, i32 1, i64 %464, i32 1
  %534 = load i64, ptr %533, align 8, !tbaa !37
  %535 = icmp slt i64 %532, %534
  br i1 %535, label %648, label %543

536:                                              ; preds = %523
  %537 = ptrtoint ptr %527 to i64
  %538 = ptrtoint ptr %462 to i64
  %539 = sub i64 %537, %538
  %540 = getelementptr inbounds %struct.reg_substr_data, ptr %458, i64 0, i32 1, i64 %464, i32 1
  %541 = load i64, ptr %540, align 8, !tbaa !37
  %542 = icmp slt i64 %539, %541
  br i1 %542, label %697, label %591

543:                                              ; preds = %529
  %544 = icmp sgt i64 %534, -1
  br i1 %544, label %547, label %545

545:                                              ; preds = %543
  %546 = icmp ugt ptr %462, %521
  br i1 %546, label %564, label %648

547:                                              ; preds = %543
  %548 = icmp ne i64 %534, 0
  %549 = icmp ult ptr %462, %521
  %550 = and i1 %549, %548
  br i1 %550, label %551, label %648

551:                                              ; preds = %547, %551
  %552 = phi ptr [ %560, %551 ], [ %462, %547 ]
  %553 = phi i64 [ %554, %551 ], [ %534, %547 ]
  %554 = add nsw i64 %553, -1
  %555 = load i8, ptr %552, align 1, !tbaa !5
  %556 = zext i8 %555 to i64
  %557 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %556
  %558 = load i8, ptr %557, align 1, !tbaa !5
  %559 = zext i8 %558 to i64
  %560 = getelementptr inbounds i8, ptr %552, i64 %559
  %561 = icmp ne i64 %554, 0
  %562 = icmp ult ptr %560, %521
  %563 = select i1 %561, i1 %562, i1 false
  br i1 %563, label %551, label %648, !llvm.loop !44

564:                                              ; preds = %545, %586
  %565 = phi i64 [ %567, %586 ], [ %534, %545 ]
  %566 = phi ptr [ %587, %586 ], [ %462, %545 ]
  %567 = add nsw i64 %565, 1
  %568 = getelementptr inbounds i8, ptr %566, i64 -1
  %569 = load i8, ptr %568, align 1, !tbaa !5
  %570 = icmp slt i8 %569, 0
  %571 = icmp ugt ptr %568, %521
  %572 = and i1 %570, %571
  br i1 %572, label %573, label %586

573:                                              ; preds = %564
  %574 = ptrtoint ptr %566 to i64
  %575 = getelementptr i8, ptr %566, i64 %530
  %576 = sub i64 0, %574
  %577 = getelementptr i8, ptr %575, i64 %576
  br label %578

578:                                              ; preds = %583, %573
  %579 = phi ptr [ %584, %583 ], [ %568, %573 ]
  %580 = load i8, ptr %579, align 1, !tbaa !5
  %581 = and i8 %580, -64
  %582 = icmp eq i8 %581, -128
  br i1 %582, label %583, label %586

583:                                              ; preds = %578
  %584 = getelementptr inbounds i8, ptr %579, i64 -1
  %585 = icmp ugt ptr %584, %521
  br i1 %585, label %578, label %586, !llvm.loop !46

586:                                              ; preds = %583, %578, %564
  %587 = phi ptr [ %568, %564 ], [ %579, %578 ], [ %577, %583 ]
  %588 = icmp ne i64 %567, 0
  %589 = icmp ugt ptr %587, %521
  %590 = and i1 %588, %589
  br i1 %590, label %564, label %648, !llvm.loop !47

591:                                              ; preds = %536
  %592 = getelementptr inbounds i8, ptr %462, i64 %541
  %593 = icmp ugt ptr %592, %527
  %594 = select i1 %593, ptr %527, ptr %592
  br label %697

595:                                              ; preds = %520
  %596 = sub nsw i64 %468, %14
  %597 = icmp sgt i64 %596, -1
  br i1 %597, label %600, label %598

598:                                              ; preds = %595
  %599 = icmp ugt ptr %459, %2
  br i1 %599, label %617, label %648

600:                                              ; preds = %595
  %601 = icmp ne i64 %596, 0
  %602 = icmp ult ptr %459, %4
  %603 = and i1 %602, %601
  br i1 %603, label %604, label %648

604:                                              ; preds = %600, %604
  %605 = phi ptr [ %613, %604 ], [ %459, %600 ]
  %606 = phi i64 [ %607, %604 ], [ %596, %600 ]
  %607 = add nsw i64 %606, -1
  %608 = load i8, ptr %605, align 1, !tbaa !5
  %609 = zext i8 %608 to i64
  %610 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %609
  %611 = load i8, ptr %610, align 1, !tbaa !5
  %612 = zext i8 %611 to i64
  %613 = getelementptr inbounds i8, ptr %605, i64 %612
  %614 = icmp ne i64 %607, 0
  %615 = icmp ult ptr %613, %4
  %616 = select i1 %614, i1 %615, i1 false
  br i1 %616, label %604, label %648, !llvm.loop !51

617:                                              ; preds = %598, %639
  %618 = phi i64 [ %620, %639 ], [ %596, %598 ]
  %619 = phi ptr [ %640, %639 ], [ %459, %598 ]
  %620 = add nsw i64 %618, 1
  %621 = getelementptr inbounds i8, ptr %619, i64 -1
  %622 = load i8, ptr %621, align 1, !tbaa !5
  %623 = icmp slt i8 %622, 0
  %624 = icmp ugt ptr %621, %2
  %625 = and i1 %623, %624
  br i1 %625, label %626, label %639

626:                                              ; preds = %617
  %627 = ptrtoint ptr %619 to i64
  %628 = getelementptr i8, ptr %619, i64 %472
  %629 = sub i64 0, %627
  %630 = getelementptr i8, ptr %628, i64 %629
  br label %631

631:                                              ; preds = %636, %626
  %632 = phi ptr [ %637, %636 ], [ %621, %626 ]
  %633 = load i8, ptr %632, align 1, !tbaa !5
  %634 = and i8 %633, -64
  %635 = icmp eq i8 %634, -128
  br i1 %635, label %636, label %639

636:                                              ; preds = %631
  %637 = getelementptr inbounds i8, ptr %632, i64 -1
  %638 = icmp ugt ptr %637, %2
  br i1 %638, label %631, label %639, !llvm.loop !52

639:                                              ; preds = %636, %631, %617
  %640 = phi ptr [ %621, %617 ], [ %632, %631 ], [ %630, %636 ]
  %641 = icmp ne i64 %620, 0
  %642 = icmp ugt ptr %640, %2
  %643 = and i1 %641, %642
  br i1 %643, label %617, label %648, !llvm.loop !53

644:                                              ; preds = %523
  %645 = getelementptr inbounds i8, ptr %459, i64 %468
  %646 = sub i64 0, %14
  %647 = getelementptr inbounds i8, ptr %645, i64 %646
  br label %697

648:                                              ; preds = %586, %551, %639, %604, %529, %545, %547, %598, %600
  %649 = phi ptr [ %459, %598 ], [ %459, %600 ], [ %462, %545 ], [ %462, %547 ], [ %521, %529 ], [ %613, %604 ], [ %640, %639 ], [ %560, %551 ], [ %587, %586 ]
  %650 = icmp sgt i64 %468, -1
  br i1 %650, label %653, label %651

651:                                              ; preds = %648
  %652 = icmp ugt ptr %462, %4
  br i1 %652, label %670, label %700

653:                                              ; preds = %648
  %654 = icmp ne i64 %468, 0
  %655 = icmp ult ptr %462, %4
  %656 = and i1 %655, %654
  br i1 %656, label %657, label %700

657:                                              ; preds = %653, %657
  %658 = phi ptr [ %666, %657 ], [ %462, %653 ]
  %659 = phi i64 [ %660, %657 ], [ %468, %653 ]
  %660 = add nsw i64 %659, -1
  %661 = load i8, ptr %658, align 1, !tbaa !5
  %662 = zext i8 %661 to i64
  %663 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %662
  %664 = load i8, ptr %663, align 1, !tbaa !5
  %665 = zext i8 %664 to i64
  %666 = getelementptr inbounds i8, ptr %658, i64 %665
  %667 = icmp ne i64 %660, 0
  %668 = icmp ult ptr %666, %4
  %669 = select i1 %667, i1 %668, i1 false
  br i1 %669, label %657, label %700, !llvm.loop !44

670:                                              ; preds = %651, %692
  %671 = phi i64 [ %673, %692 ], [ %468, %651 ]
  %672 = phi ptr [ %693, %692 ], [ %462, %651 ]
  %673 = add nsw i64 %671, 1
  %674 = getelementptr inbounds i8, ptr %672, i64 -1
  %675 = load i8, ptr %674, align 1, !tbaa !5
  %676 = icmp slt i8 %675, 0
  %677 = icmp ugt ptr %674, %4
  %678 = and i1 %676, %677
  br i1 %678, label %679, label %692

679:                                              ; preds = %670
  %680 = ptrtoint ptr %672 to i64
  %681 = getelementptr i8, ptr %672, i64 %32
  %682 = sub i64 0, %680
  %683 = getelementptr i8, ptr %681, i64 %682
  br label %684

684:                                              ; preds = %689, %679
  %685 = phi ptr [ %690, %689 ], [ %674, %679 ]
  %686 = load i8, ptr %685, align 1, !tbaa !5
  %687 = and i8 %686, -64
  %688 = icmp eq i8 %687, -128
  br i1 %688, label %689, label %692

689:                                              ; preds = %684
  %690 = getelementptr inbounds i8, ptr %685, i64 -1
  %691 = icmp ugt ptr %690, %4
  br i1 %691, label %684, label %692, !llvm.loop !46

692:                                              ; preds = %689, %684, %670
  %693 = phi ptr [ %674, %670 ], [ %685, %684 ], [ %683, %689 ]
  %694 = icmp ne i64 %673, 0
  %695 = icmp ugt ptr %693, %4
  %696 = and i1 %694, %695
  br i1 %696, label %670, label %700, !llvm.loop !47

697:                                              ; preds = %536, %591, %644
  %698 = phi ptr [ %647, %644 ], [ %594, %591 ], [ %527, %536 ]
  %699 = getelementptr inbounds i8, ptr %462, i64 %468
  br label %700

700:                                              ; preds = %692, %657, %653, %651, %697
  %701 = phi ptr [ %698, %697 ], [ %649, %651 ], [ %649, %653 ], [ %649, %657 ], [ %649, %692 ]
  %702 = phi ptr [ %527, %697 ], [ %521, %651 ], [ %521, %653 ], [ %521, %657 ], [ %521, %692 ]
  %703 = phi i1 [ %528, %697 ], [ %522, %651 ], [ %522, %653 ], [ %522, %657 ], [ %522, %692 ]
  %704 = phi ptr [ %699, %697 ], [ %462, %651 ], [ %462, %653 ], [ %666, %657 ], [ %693, %692 ]
  %705 = icmp ult ptr %704, %460
  %706 = select i1 %705, ptr %460, ptr %704
  %707 = getelementptr inbounds %struct.reg_substr_data, ptr %458, i64 0, i32 1, i64 %464, i32 3
  %708 = getelementptr inbounds %struct.reg_substr_data, ptr %458, i64 0, i32 1, i64 %464, i32 2
  %709 = select i1 %22, ptr %707, ptr %708
  %710 = load ptr, ptr %709, align 8, !tbaa !35
  %711 = load ptr, ptr %710, align 8, !tbaa !38
  %712 = getelementptr inbounds %struct.xpv, ptr %711, i64 0, i32 2
  %713 = load i64, ptr %712, align 8, !tbaa !39
  %714 = getelementptr inbounds i8, ptr %701, i64 %713
  %715 = getelementptr inbounds %struct.sv, ptr %710, i64 0, i32 2
  %716 = load i32, ptr %715, align 4, !tbaa !15
  %717 = icmp ugt i32 %716, -1073741825
  %718 = sext i1 %717 to i64
  %719 = getelementptr inbounds i8, ptr %714, i64 %718
  %720 = icmp ugt ptr %706, %719
  br i1 %720, label %724, label %721

721:                                              ; preds = %700
  %722 = call ptr @Perl_fbm_instr(ptr noundef %706, ptr noundef %719, ptr noundef nonnull %710, i32 noundef %27) #12
  %723 = icmp eq ptr %722, null
  br i1 %723, label %724, label %808

724:                                              ; preds = %700, %721
  %725 = icmp ult ptr %701, %702
  br i1 %725, label %726, label %1391

726:                                              ; preds = %724
  %727 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %728 = icmp eq i8 %727, 0
  br i1 %728, label %738, label %729

729:                                              ; preds = %726
  %730 = icmp ult ptr %701, %4
  br i1 %730, label %731, label %740

731:                                              ; preds = %729
  %732 = load i8, ptr %701, align 1, !tbaa !5
  %733 = zext i8 %732 to i64
  %734 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %733
  %735 = load i8, ptr %734, align 1, !tbaa !5
  %736 = zext i8 %735 to i64
  %737 = getelementptr inbounds i8, ptr %701, i64 %736
  br i1 %703, label %753, label %741

738:                                              ; preds = %726
  %739 = getelementptr inbounds i8, ptr %701, i64 1
  br i1 %703, label %804, label %751

740:                                              ; preds = %729
  br i1 %703, label %753, label %741

741:                                              ; preds = %731, %740
  %742 = phi ptr [ %701, %740 ], [ %737, %731 ]
  %743 = icmp ult ptr %462, %4
  br i1 %743, label %744, label %158

744:                                              ; preds = %741
  %745 = load i8, ptr %462, align 1, !tbaa !5
  %746 = zext i8 %745 to i64
  %747 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %746
  %748 = load i8, ptr %747, align 1, !tbaa !5
  %749 = zext i8 %748 to i64
  %750 = getelementptr inbounds i8, ptr %462, i64 %749
  br label %158

751:                                              ; preds = %738
  %752 = getelementptr inbounds i8, ptr %462, i64 1
  br label %158

753:                                              ; preds = %731, %740
  %754 = phi ptr [ %701, %740 ], [ %737, %731 ]
  %755 = load i64, ptr %465, align 8, !tbaa !13
  %756 = sub nsw i64 1, %755
  %757 = ptrtoint ptr %2 to i64
  %758 = icmp slt i64 %755, 2
  br i1 %758, label %761, label %759

759:                                              ; preds = %753
  %760 = icmp ugt ptr %701, %2
  br i1 %760, label %777, label %158

761:                                              ; preds = %753
  %762 = icmp ne i64 %755, 1
  %763 = and i1 %730, %762
  br i1 %763, label %764, label %158

764:                                              ; preds = %761, %764
  %765 = phi ptr [ %773, %764 ], [ %701, %761 ]
  %766 = phi i64 [ %767, %764 ], [ %756, %761 ]
  %767 = add nsw i64 %766, -1
  %768 = load i8, ptr %765, align 1, !tbaa !5
  %769 = zext i8 %768 to i64
  %770 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %769
  %771 = load i8, ptr %770, align 1, !tbaa !5
  %772 = zext i8 %771 to i64
  %773 = getelementptr inbounds i8, ptr %765, i64 %772
  %774 = icmp ne i64 %767, 0
  %775 = icmp ult ptr %773, %4
  %776 = select i1 %774, i1 %775, i1 false
  br i1 %776, label %764, label %158, !llvm.loop !51

777:                                              ; preds = %759, %799
  %778 = phi i64 [ %780, %799 ], [ %756, %759 ]
  %779 = phi ptr [ %800, %799 ], [ %701, %759 ]
  %780 = add nsw i64 %778, 1
  %781 = getelementptr inbounds i8, ptr %779, i64 -1
  %782 = load i8, ptr %781, align 1, !tbaa !5
  %783 = icmp slt i8 %782, 0
  %784 = icmp ugt ptr %781, %2
  %785 = and i1 %783, %784
  br i1 %785, label %786, label %799

786:                                              ; preds = %777
  %787 = ptrtoint ptr %779 to i64
  %788 = getelementptr i8, ptr %779, i64 %757
  %789 = sub i64 0, %787
  %790 = getelementptr i8, ptr %788, i64 %789
  br label %791

791:                                              ; preds = %796, %786
  %792 = phi ptr [ %797, %796 ], [ %781, %786 ]
  %793 = load i8, ptr %792, align 1, !tbaa !5
  %794 = and i8 %793, -64
  %795 = icmp eq i8 %794, -128
  br i1 %795, label %796, label %799

796:                                              ; preds = %791
  %797 = getelementptr inbounds i8, ptr %792, i64 -1
  %798 = icmp ugt ptr %797, %2
  br i1 %798, label %791, label %799, !llvm.loop !52

799:                                              ; preds = %796, %791, %777
  %800 = phi ptr [ %781, %777 ], [ %792, %791 ], [ %790, %796 ]
  %801 = icmp ne i64 %780, 0
  %802 = icmp ugt ptr %800, %2
  %803 = and i1 %801, %802
  br i1 %803, label %777, label %158, !llvm.loop !53

804:                                              ; preds = %738
  %805 = load i64, ptr %465, align 8, !tbaa !13
  %806 = sub i64 0, %805
  %807 = getelementptr inbounds i8, ptr %739, i64 %806
  br label %158

808:                                              ; preds = %721
  br i1 %703, label %809, label %876

809:                                              ; preds = %808
  %810 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %811 = icmp eq i8 %810, 0
  %812 = load i64, ptr %465, align 8, !tbaa !13
  %813 = sub nsw i64 0, %812
  br i1 %811, label %863, label %814

814:                                              ; preds = %809
  %815 = ptrtoint ptr %2 to i64
  %816 = icmp slt i64 %812, 1
  br i1 %816, label %819, label %817

817:                                              ; preds = %814
  %818 = icmp ugt ptr %722, %2
  br i1 %818, label %836, label %866

819:                                              ; preds = %814
  %820 = icmp ne i64 %812, 0
  %821 = icmp ult ptr %722, %2
  %822 = and i1 %821, %820
  br i1 %822, label %823, label %866

823:                                              ; preds = %819, %823
  %824 = phi ptr [ %832, %823 ], [ %722, %819 ]
  %825 = phi i64 [ %826, %823 ], [ %813, %819 ]
  %826 = add nsw i64 %825, -1
  %827 = load i8, ptr %824, align 1, !tbaa !5
  %828 = zext i8 %827 to i64
  %829 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %828
  %830 = load i8, ptr %829, align 1, !tbaa !5
  %831 = zext i8 %830 to i64
  %832 = getelementptr inbounds i8, ptr %824, i64 %831
  %833 = icmp ne i64 %826, 0
  %834 = icmp ult ptr %832, %2
  %835 = select i1 %833, i1 %834, i1 false
  br i1 %835, label %823, label %866, !llvm.loop !44

836:                                              ; preds = %817, %858
  %837 = phi i64 [ %839, %858 ], [ %813, %817 ]
  %838 = phi ptr [ %859, %858 ], [ %722, %817 ]
  %839 = add nsw i64 %837, 1
  %840 = getelementptr inbounds i8, ptr %838, i64 -1
  %841 = load i8, ptr %840, align 1, !tbaa !5
  %842 = icmp slt i8 %841, 0
  %843 = icmp ugt ptr %840, %2
  %844 = and i1 %842, %843
  br i1 %844, label %845, label %858

845:                                              ; preds = %836
  %846 = ptrtoint ptr %838 to i64
  %847 = getelementptr i8, ptr %838, i64 %815
  %848 = sub i64 0, %846
  %849 = getelementptr i8, ptr %847, i64 %848
  br label %850

850:                                              ; preds = %855, %845
  %851 = phi ptr [ %856, %855 ], [ %840, %845 ]
  %852 = load i8, ptr %851, align 1, !tbaa !5
  %853 = and i8 %852, -64
  %854 = icmp eq i8 %853, -128
  br i1 %854, label %855, label %858

855:                                              ; preds = %850
  %856 = getelementptr inbounds i8, ptr %851, i64 -1
  %857 = icmp ugt ptr %856, %2
  br i1 %857, label %850, label %858, !llvm.loop !46

858:                                              ; preds = %855, %850, %836
  %859 = phi ptr [ %840, %836 ], [ %851, %850 ], [ %849, %855 ]
  %860 = icmp ne i64 %839, 0
  %861 = icmp ugt ptr %859, %2
  %862 = and i1 %860, %861
  br i1 %862, label %836, label %866, !llvm.loop !47

863:                                              ; preds = %809
  %864 = getelementptr inbounds i8, ptr %722, i64 %813
  %865 = getelementptr inbounds i8, ptr %722, i64 1
  br label %876

866:                                              ; preds = %858, %823, %817, %819
  %867 = phi ptr [ %722, %819 ], [ %722, %817 ], [ %832, %823 ], [ %859, %858 ]
  %868 = icmp ult ptr %722, %4
  br i1 %868, label %869, label %876

869:                                              ; preds = %866
  %870 = load i8, ptr %722, align 1, !tbaa !5
  %871 = zext i8 %870 to i64
  %872 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %871
  %873 = load i8, ptr %872, align 1, !tbaa !5
  %874 = zext i8 %873 to i64
  %875 = getelementptr inbounds i8, ptr %722, i64 %874
  br label %876

876:                                              ; preds = %453, %449, %808, %869, %866, %863, %1305
  %877 = phi ptr [ %1026, %1305 ], [ %382, %449 ], [ %382, %453 ], [ %459, %808 ], [ %459, %869 ], [ %459, %866 ], [ %459, %863 ]
  %878 = phi ptr [ %1027, %1305 ], [ %159, %449 ], [ %159, %453 ], [ %722, %808 ], [ %875, %869 ], [ %722, %866 ], [ %865, %863 ]
  %879 = phi i8 [ %1028, %1305 ], [ %160, %449 ], [ %160, %453 ], [ %461, %808 ], [ %461, %869 ], [ %461, %866 ], [ %461, %863 ]
  %880 = phi ptr [ %1307, %1305 ], [ %447, %449 ], [ %447, %453 ], [ %462, %808 ], [ %867, %869 ], [ %867, %866 ], [ %864, %863 ]
  %881 = phi i64 [ %1030, %1305 ], [ %162, %449 ], [ %162, %453 ], [ %463, %808 ], [ %463, %869 ], [ %463, %866 ], [ %463, %863 ]
  %882 = and i8 %879, 1
  %883 = icmp eq i8 %882, 0
  %884 = icmp eq ptr %880, %2
  %885 = select i1 %883, i1 true, i1 %884
  br i1 %885, label %1025, label %886

886:                                              ; preds = %876
  %887 = getelementptr inbounds i8, ptr %880, i64 -1
  %888 = load i8, ptr %887, align 1, !tbaa !5
  %889 = icmp eq i8 %888, 10
  br i1 %889, label %1025, label %890

890:                                              ; preds = %886
  %891 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %892 = icmp eq i8 %891, 0
  %893 = load i64, ptr %30, align 8, !tbaa !21
  %894 = sub nsw i64 0, %893
  br i1 %892, label %943, label %895

895:                                              ; preds = %890
  %896 = icmp slt i64 %893, 1
  br i1 %896, label %899, label %897

897:                                              ; preds = %895
  %898 = icmp ugt ptr %4, %3
  br i1 %898, label %916, label %945

899:                                              ; preds = %895
  %900 = icmp ne i64 %893, 0
  %901 = icmp ult ptr %4, %3
  %902 = and i1 %901, %900
  br i1 %902, label %903, label %945

903:                                              ; preds = %899, %903
  %904 = phi ptr [ %912, %903 ], [ %4, %899 ]
  %905 = phi i64 [ %906, %903 ], [ %894, %899 ]
  %906 = add nsw i64 %905, -1
  %907 = load i8, ptr %904, align 1, !tbaa !5
  %908 = zext i8 %907 to i64
  %909 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %908
  %910 = load i8, ptr %909, align 1, !tbaa !5
  %911 = zext i8 %910 to i64
  %912 = getelementptr inbounds i8, ptr %904, i64 %911
  %913 = icmp ne i64 %906, 0
  %914 = icmp ult ptr %912, %3
  %915 = select i1 %913, i1 %914, i1 false
  br i1 %915, label %903, label %945, !llvm.loop !44

916:                                              ; preds = %897, %938
  %917 = phi i64 [ %919, %938 ], [ %894, %897 ]
  %918 = phi ptr [ %939, %938 ], [ %4, %897 ]
  %919 = add nsw i64 %917, 1
  %920 = getelementptr inbounds i8, ptr %918, i64 -1
  %921 = load i8, ptr %920, align 1, !tbaa !5
  %922 = icmp slt i8 %921, 0
  %923 = icmp ugt ptr %920, %3
  %924 = and i1 %922, %923
  br i1 %924, label %925, label %938

925:                                              ; preds = %916
  %926 = ptrtoint ptr %918 to i64
  %927 = getelementptr i8, ptr %918, i64 %33
  %928 = sub i64 0, %926
  %929 = getelementptr i8, ptr %927, i64 %928
  br label %930

930:                                              ; preds = %935, %925
  %931 = phi ptr [ %936, %935 ], [ %920, %925 ]
  %932 = load i8, ptr %931, align 1, !tbaa !5
  %933 = and i8 %932, -64
  %934 = icmp eq i8 %933, -128
  br i1 %934, label %935, label %938

935:                                              ; preds = %930
  %936 = getelementptr inbounds i8, ptr %931, i64 -1
  %937 = icmp ugt ptr %936, %3
  br i1 %937, label %930, label %938, !llvm.loop !46

938:                                              ; preds = %935, %930, %916
  %939 = phi ptr [ %920, %916 ], [ %931, %930 ], [ %929, %935 ]
  %940 = icmp ne i64 %919, 0
  %941 = icmp ugt ptr %939, %3
  %942 = and i1 %940, %941
  br i1 %942, label %916, label %945, !llvm.loop !47

943:                                              ; preds = %890
  %944 = getelementptr inbounds i8, ptr %4, i64 %894
  br label %945

945:                                              ; preds = %938, %903, %899, %897, %943
  %946 = phi ptr [ %944, %943 ], [ %4, %899 ], [ %4, %897 ], [ %912, %903 ], [ %939, %938 ]
  %947 = icmp ugt ptr %946, %880
  br i1 %947, label %948, label %1391

948:                                              ; preds = %945
  %949 = ptrtoint ptr %946 to i64
  %950 = ptrtoint ptr %880 to i64
  %951 = sub i64 %949, %950
  %952 = call ptr @memchr(ptr noundef %880, i32 noundef 10, i64 noundef %951) #13
  %953 = icmp eq ptr %952, null
  br i1 %953, label %1391, label %954

954:                                              ; preds = %948
  %955 = getelementptr inbounds i8, ptr %952, i64 1
  %956 = load ptr, ptr %11, align 8, !tbaa !8
  %957 = load i8, ptr %956, align 8, !tbaa !17
  %958 = icmp eq i8 %957, 0
  br i1 %958, label %158, label %959

959:                                              ; preds = %954
  %960 = getelementptr inbounds %struct.reg_substr_data, ptr %956, i64 0, i32 1, i64 2
  %961 = load i64, ptr %960, align 8, !tbaa !13
  %962 = sub nsw i64 0, %961
  br i1 %892, label %1011, label %963

963:                                              ; preds = %959
  %964 = icmp slt i64 %961, 1
  br i1 %964, label %967, label %965

965:                                              ; preds = %963
  %966 = icmp ugt ptr %877, %3
  br i1 %966, label %984, label %1013

967:                                              ; preds = %963
  %968 = icmp ne i64 %961, 0
  %969 = icmp ult ptr %877, %3
  %970 = and i1 %969, %968
  br i1 %970, label %971, label %1013

971:                                              ; preds = %967, %971
  %972 = phi ptr [ %980, %971 ], [ %877, %967 ]
  %973 = phi i64 [ %974, %971 ], [ %962, %967 ]
  %974 = add nsw i64 %973, -1
  %975 = load i8, ptr %972, align 1, !tbaa !5
  %976 = zext i8 %975 to i64
  %977 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %976
  %978 = load i8, ptr %977, align 1, !tbaa !5
  %979 = zext i8 %978 to i64
  %980 = getelementptr inbounds i8, ptr %972, i64 %979
  %981 = icmp ne i64 %974, 0
  %982 = icmp ult ptr %980, %3
  %983 = select i1 %981, i1 %982, i1 false
  br i1 %983, label %971, label %1013, !llvm.loop !44

984:                                              ; preds = %965, %1006
  %985 = phi i64 [ %987, %1006 ], [ %962, %965 ]
  %986 = phi ptr [ %1007, %1006 ], [ %877, %965 ]
  %987 = add nsw i64 %985, 1
  %988 = getelementptr inbounds i8, ptr %986, i64 -1
  %989 = load i8, ptr %988, align 1, !tbaa !5
  %990 = icmp slt i8 %989, 0
  %991 = icmp ugt ptr %988, %3
  %992 = and i1 %990, %991
  br i1 %992, label %993, label %1006

993:                                              ; preds = %984
  %994 = ptrtoint ptr %986 to i64
  %995 = getelementptr i8, ptr %986, i64 %33
  %996 = sub i64 0, %994
  %997 = getelementptr i8, ptr %995, i64 %996
  br label %998

998:                                              ; preds = %1003, %993
  %999 = phi ptr [ %1004, %1003 ], [ %988, %993 ]
  %1000 = load i8, ptr %999, align 1, !tbaa !5
  %1001 = and i8 %1000, -64
  %1002 = icmp eq i8 %1001, -128
  br i1 %1002, label %1003, label %1006

1003:                                             ; preds = %998
  %1004 = getelementptr inbounds i8, ptr %999, i64 -1
  %1005 = icmp ugt ptr %1004, %3
  br i1 %1005, label %998, label %1006, !llvm.loop !46

1006:                                             ; preds = %1003, %998, %984
  %1007 = phi ptr [ %988, %984 ], [ %999, %998 ], [ %997, %1003 ]
  %1008 = icmp ne i64 %987, 0
  %1009 = icmp ugt ptr %1007, %3
  %1010 = and i1 %1008, %1009
  br i1 %1010, label %984, label %1013, !llvm.loop !47

1011:                                             ; preds = %959
  %1012 = getelementptr inbounds i8, ptr %877, i64 %962
  br label %1013

1013:                                             ; preds = %1006, %971, %967, %965, %1011
  %1014 = phi ptr [ %1012, %1011 ], [ %877, %967 ], [ %877, %965 ], [ %980, %971 ], [ %1007, %1006 ]
  %1015 = icmp ult ptr %955, %1014
  br i1 %1015, label %1016, label %158

1016:                                             ; preds = %1013
  br i1 %22, label %1017, label %1021

1017:                                             ; preds = %1016
  %1018 = getelementptr inbounds %struct.reg_substr_data, ptr %956, i64 0, i32 1, i64 0, i32 3
  %1019 = load ptr, ptr %1018, align 8, !tbaa !33
  %1020 = icmp eq ptr %1019, null
  br i1 %1020, label %1025, label %457

1021:                                             ; preds = %1016
  %1022 = getelementptr inbounds %struct.reg_substr_data, ptr %956, i64 0, i32 1, i64 0, i32 2
  %1023 = load ptr, ptr %1022, align 8, !tbaa !34
  %1024 = icmp eq ptr %1023, null
  br i1 %1024, label %1025, label %457

1025:                                             ; preds = %1021, %1017, %151, %149, %140, %886, %876
  %1026 = phi ptr [ %877, %886 ], [ %877, %876 ], [ %119, %140 ], [ %119, %149 ], [ %119, %151 ], [ %877, %1017 ], [ %877, %1021 ]
  %1027 = phi ptr [ %878, %886 ], [ %878, %876 ], [ %3, %140 ], [ %3, %149 ], [ %3, %151 ], [ %878, %1017 ], [ %878, %1021 ]
  %1028 = phi i8 [ %879, %886 ], [ %879, %876 ], [ 0, %140 ], [ 0, %149 ], [ 0, %151 ], [ %879, %1017 ], [ %879, %1021 ]
  %1029 = phi ptr [ %880, %886 ], [ %880, %876 ], [ %3, %140 ], [ %3, %149 ], [ %3, %151 ], [ %955, %1017 ], [ %955, %1021 ]
  %1030 = phi i64 [ %881, %886 ], [ %881, %876 ], [ 0, %140 ], [ 0, %149 ], [ 0, %151 ], [ %881, %1017 ], [ %881, %1021 ]
  %1031 = getelementptr inbounds %struct.regexp_internal, ptr %29, i64 0, i32 2
  %1032 = load ptr, ptr %1031, align 8, !tbaa !54
  %1033 = icmp eq ptr %1032, null
  br i1 %1033, label %1308, label %1034

1034:                                             ; preds = %1025
  %1035 = getelementptr inbounds %struct.regnode, ptr %1032, i64 0, i32 1
  %1036 = load i8, ptr %1035, align 1, !tbaa !56
  %1037 = zext i8 %1036 to i64
  %1038 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %1037
  %1039 = load i8, ptr %1038, align 1, !tbaa !5
  %1040 = icmp eq i8 %1039, 72
  br i1 %1040, label %1308, label %1041

1041:                                             ; preds = %1034
  %1042 = getelementptr inbounds %struct.regnode_string, ptr %1032, i64 0, i32 3
  %1043 = icmp eq i8 %1039, 31
  br i1 %1043, label %1044, label %1052

1044:                                             ; preds = %1041
  %1045 = load i8, ptr %47, align 1, !tbaa !30, !range !42, !noundef !43
  %1046 = icmp eq i8 %1045, 0
  %1047 = load i8, ptr %1032, align 2, !tbaa !59
  %1048 = zext i8 %1047 to i64
  br i1 %1046, label %1052, label %1049

1049:                                             ; preds = %1044
  %1050 = getelementptr inbounds i8, ptr %1042, i64 %1048
  %1051 = call i64 @Perl_utf8_distance(ptr noundef nonnull %1050, ptr noundef nonnull %1042) #12
  br label %1052

1052:                                             ; preds = %1044, %1041, %1049
  %1053 = phi i64 [ %1051, %1049 ], [ 1, %1041 ], [ %1048, %1044 ]
  %1054 = load ptr, ptr %11, align 8, !tbaa !8
  %1055 = getelementptr inbounds %struct.reg_substr_data, ptr %1054, i64 0, i32 1, i64 0, i32 2
  %1056 = load ptr, ptr %1055, align 8, !tbaa !34
  %1057 = icmp eq ptr %1056, null
  br i1 %1057, label %1058, label %1065

1058:                                             ; preds = %1052
  %1059 = getelementptr inbounds %struct.reg_substr_data, ptr %1054, i64 0, i32 1, i64 0, i32 3
  %1060 = load ptr, ptr %1059, align 8, !tbaa !33
  %1061 = icmp eq ptr %1060, null
  %1062 = and i8 %1028, 1
  %1063 = icmp eq i8 %1062, 0
  %1064 = and i1 %1063, %1061
  br i1 %1064, label %1123, label %1065

1065:                                             ; preds = %1058, %1052
  %1066 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %1067 = icmp eq i8 %1066, 0
  %1068 = load i64, ptr %30, align 8, !tbaa !21
  %1069 = icmp eq i64 %1068, 0
  %1070 = shl i64 %1053, 32
  %1071 = ashr exact i64 %1070, 32
  %1072 = select i1 %1069, i64 0, i64 %1071
  br i1 %1067, label %1121, label %1073

1073:                                             ; preds = %1065
  %1074 = icmp sgt i64 %1072, -1
  br i1 %1074, label %1077, label %1075

1075:                                             ; preds = %1073
  %1076 = icmp ugt ptr %1029, %4
  br i1 %1076, label %1094, label %1240

1077:                                             ; preds = %1073
  %1078 = icmp ne i64 %1072, 0
  %1079 = icmp ult ptr %1029, %4
  %1080 = and i1 %1079, %1078
  br i1 %1080, label %1081, label %1240

1081:                                             ; preds = %1077, %1081
  %1082 = phi ptr [ %1090, %1081 ], [ %1029, %1077 ]
  %1083 = phi i64 [ %1084, %1081 ], [ %1071, %1077 ]
  %1084 = add nsw i64 %1083, -1
  %1085 = load i8, ptr %1082, align 1, !tbaa !5
  %1086 = zext i8 %1085 to i64
  %1087 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1086
  %1088 = load i8, ptr %1087, align 1, !tbaa !5
  %1089 = zext i8 %1088 to i64
  %1090 = getelementptr inbounds i8, ptr %1082, i64 %1089
  %1091 = icmp ne i64 %1084, 0
  %1092 = icmp ult ptr %1090, %4
  %1093 = select i1 %1091, i1 %1092, i1 false
  br i1 %1093, label %1081, label %1240, !llvm.loop !44

1094:                                             ; preds = %1075, %1116
  %1095 = phi i64 [ %1097, %1116 ], [ %1071, %1075 ]
  %1096 = phi ptr [ %1117, %1116 ], [ %1029, %1075 ]
  %1097 = add nsw i64 %1095, 1
  %1098 = getelementptr inbounds i8, ptr %1096, i64 -1
  %1099 = load i8, ptr %1098, align 1, !tbaa !5
  %1100 = icmp slt i8 %1099, 0
  %1101 = icmp ugt ptr %1098, %4
  %1102 = and i1 %1100, %1101
  br i1 %1102, label %1103, label %1116

1103:                                             ; preds = %1094
  %1104 = ptrtoint ptr %1096 to i64
  %1105 = getelementptr i8, ptr %1096, i64 %32
  %1106 = sub i64 0, %1104
  %1107 = getelementptr i8, ptr %1105, i64 %1106
  br label %1108

1108:                                             ; preds = %1113, %1103
  %1109 = phi ptr [ %1114, %1113 ], [ %1098, %1103 ]
  %1110 = load i8, ptr %1109, align 1, !tbaa !5
  %1111 = and i8 %1110, -64
  %1112 = icmp eq i8 %1111, -128
  br i1 %1112, label %1113, label %1116

1113:                                             ; preds = %1108
  %1114 = getelementptr inbounds i8, ptr %1109, i64 -1
  %1115 = icmp ugt ptr %1114, %4
  br i1 %1115, label %1108, label %1116, !llvm.loop !46

1116:                                             ; preds = %1113, %1108, %1094
  %1117 = phi ptr [ %1098, %1094 ], [ %1109, %1108 ], [ %1107, %1113 ]
  %1118 = icmp ne i64 %1097, 0
  %1119 = icmp ugt ptr %1117, %4
  %1120 = and i1 %1118, %1119
  br i1 %1120, label %1094, label %1240, !llvm.loop !47

1121:                                             ; preds = %1065
  %1122 = getelementptr inbounds i8, ptr %1029, i64 %1072
  br label %1240

1123:                                             ; preds = %1058
  %1124 = getelementptr inbounds %struct.reg_substr_data, ptr %1054, i64 0, i32 1, i64 1, i32 2
  %1125 = load ptr, ptr %1124, align 8, !tbaa !34
  %1126 = icmp eq ptr %1125, null
  br i1 %1126, label %1127, label %1131

1127:                                             ; preds = %1123
  %1128 = getelementptr inbounds %struct.reg_substr_data, ptr %1054, i64 0, i32 1, i64 1, i32 3
  %1129 = load ptr, ptr %1128, align 8, !tbaa !33
  %1130 = icmp eq ptr %1129, null
  br i1 %1130, label %1240, label %1131

1131:                                             ; preds = %1127, %1123
  %1132 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %1133 = icmp eq i8 %1132, 0
  %1134 = sub nsw i64 0, %14
  br i1 %1133, label %1184, label %1135

1135:                                             ; preds = %1131
  %1136 = ptrtoint ptr %2 to i64
  %1137 = icmp slt i64 %14, 1
  br i1 %1137, label %1140, label %1138

1138:                                             ; preds = %1135
  %1139 = icmp ugt ptr %1026, %2
  br i1 %1139, label %1157, label %1189

1140:                                             ; preds = %1135
  %1141 = icmp ne i64 %14, 0
  %1142 = icmp ult ptr %1026, %2
  %1143 = and i1 %1141, %1142
  br i1 %1143, label %1144, label %1189

1144:                                             ; preds = %1140, %1144
  %1145 = phi ptr [ %1153, %1144 ], [ %1026, %1140 ]
  %1146 = phi i64 [ %1147, %1144 ], [ %1134, %1140 ]
  %1147 = add nsw i64 %1146, -1
  %1148 = load i8, ptr %1145, align 1, !tbaa !5
  %1149 = zext i8 %1148 to i64
  %1150 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1149
  %1151 = load i8, ptr %1150, align 1, !tbaa !5
  %1152 = zext i8 %1151 to i64
  %1153 = getelementptr inbounds i8, ptr %1145, i64 %1152
  %1154 = icmp ne i64 %1147, 0
  %1155 = icmp ult ptr %1153, %2
  %1156 = select i1 %1154, i1 %1155, i1 false
  br i1 %1156, label %1144, label %1189, !llvm.loop !44

1157:                                             ; preds = %1138, %1179
  %1158 = phi i64 [ %1160, %1179 ], [ %1134, %1138 ]
  %1159 = phi ptr [ %1180, %1179 ], [ %1026, %1138 ]
  %1160 = add nsw i64 %1158, 1
  %1161 = getelementptr inbounds i8, ptr %1159, i64 -1
  %1162 = load i8, ptr %1161, align 1, !tbaa !5
  %1163 = icmp slt i8 %1162, 0
  %1164 = icmp ugt ptr %1161, %2
  %1165 = and i1 %1163, %1164
  br i1 %1165, label %1166, label %1179

1166:                                             ; preds = %1157
  %1167 = ptrtoint ptr %1159 to i64
  %1168 = getelementptr i8, ptr %1159, i64 %1136
  %1169 = sub i64 0, %1167
  %1170 = getelementptr i8, ptr %1168, i64 %1169
  br label %1171

1171:                                             ; preds = %1176, %1166
  %1172 = phi ptr [ %1177, %1176 ], [ %1161, %1166 ]
  %1173 = load i8, ptr %1172, align 1, !tbaa !5
  %1174 = and i8 %1173, -64
  %1175 = icmp eq i8 %1174, -128
  br i1 %1175, label %1176, label %1179

1176:                                             ; preds = %1171
  %1177 = getelementptr inbounds i8, ptr %1172, i64 -1
  %1178 = icmp ugt ptr %1177, %2
  br i1 %1178, label %1171, label %1179, !llvm.loop !46

1179:                                             ; preds = %1176, %1171, %1157
  %1180 = phi ptr [ %1161, %1157 ], [ %1172, %1171 ], [ %1170, %1176 ]
  %1181 = icmp ne i64 %1160, 0
  %1182 = icmp ugt ptr %1180, %2
  %1183 = and i1 %1181, %1182
  br i1 %1183, label %1157, label %1189, !llvm.loop !47

1184:                                             ; preds = %1131
  %1185 = getelementptr inbounds i8, ptr %1026, i64 %1134
  %1186 = shl i64 %1053, 32
  %1187 = ashr exact i64 %1186, 32
  %1188 = getelementptr inbounds i8, ptr %1185, i64 %1187
  br label %1240

1189:                                             ; preds = %1179, %1144, %1138, %1140
  %1190 = phi ptr [ %1026, %1140 ], [ %1026, %1138 ], [ %1153, %1144 ], [ %1180, %1179 ]
  %1191 = shl i64 %1053, 32
  %1192 = ashr exact i64 %1191, 32
  %1193 = icmp sgt i64 %1191, -4294967296
  br i1 %1193, label %1196, label %1194

1194:                                             ; preds = %1189
  %1195 = icmp ugt ptr %1190, %4
  br i1 %1195, label %1213, label %1240

1196:                                             ; preds = %1189
  %1197 = icmp ne i64 %1191, 0
  %1198 = icmp ult ptr %1190, %4
  %1199 = and i1 %1197, %1198
  br i1 %1199, label %1200, label %1240

1200:                                             ; preds = %1196, %1200
  %1201 = phi ptr [ %1209, %1200 ], [ %1190, %1196 ]
  %1202 = phi i64 [ %1203, %1200 ], [ %1192, %1196 ]
  %1203 = add nsw i64 %1202, -1
  %1204 = load i8, ptr %1201, align 1, !tbaa !5
  %1205 = zext i8 %1204 to i64
  %1206 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1205
  %1207 = load i8, ptr %1206, align 1, !tbaa !5
  %1208 = zext i8 %1207 to i64
  %1209 = getelementptr inbounds i8, ptr %1201, i64 %1208
  %1210 = icmp ne i64 %1203, 0
  %1211 = icmp ult ptr %1209, %4
  %1212 = select i1 %1210, i1 %1211, i1 false
  br i1 %1212, label %1200, label %1240, !llvm.loop !44

1213:                                             ; preds = %1194, %1235
  %1214 = phi i64 [ %1216, %1235 ], [ %1192, %1194 ]
  %1215 = phi ptr [ %1236, %1235 ], [ %1190, %1194 ]
  %1216 = add nsw i64 %1214, 1
  %1217 = getelementptr inbounds i8, ptr %1215, i64 -1
  %1218 = load i8, ptr %1217, align 1, !tbaa !5
  %1219 = icmp slt i8 %1218, 0
  %1220 = icmp ugt ptr %1217, %4
  %1221 = and i1 %1219, %1220
  br i1 %1221, label %1222, label %1235

1222:                                             ; preds = %1213
  %1223 = ptrtoint ptr %1215 to i64
  %1224 = getelementptr i8, ptr %1215, i64 %32
  %1225 = sub i64 0, %1223
  %1226 = getelementptr i8, ptr %1224, i64 %1225
  br label %1227

1227:                                             ; preds = %1232, %1222
  %1228 = phi ptr [ %1233, %1232 ], [ %1217, %1222 ]
  %1229 = load i8, ptr %1228, align 1, !tbaa !5
  %1230 = and i8 %1229, -64
  %1231 = icmp eq i8 %1230, -128
  br i1 %1231, label %1232, label %1235

1232:                                             ; preds = %1227
  %1233 = getelementptr inbounds i8, ptr %1228, i64 -1
  %1234 = icmp ugt ptr %1233, %4
  br i1 %1234, label %1227, label %1235, !llvm.loop !46

1235:                                             ; preds = %1232, %1227, %1213
  %1236 = phi ptr [ %1217, %1213 ], [ %1228, %1227 ], [ %1226, %1232 ]
  %1237 = icmp ne i64 %1216, 0
  %1238 = icmp ugt ptr %1236, %4
  %1239 = and i1 %1237, %1238
  br i1 %1239, label %1213, label %1240, !llvm.loop !47

1240:                                             ; preds = %1116, %1081, %1235, %1200, %1196, %1194, %1077, %1075, %1127, %1184, %1121
  %1241 = phi ptr [ %1122, %1121 ], [ %1188, %1184 ], [ %4, %1127 ], [ %1029, %1077 ], [ %1029, %1075 ], [ %1190, %1196 ], [ %1190, %1194 ], [ %1209, %1200 ], [ %1236, %1235 ], [ %1090, %1081 ], [ %1117, %1116 ]
  %1242 = phi ptr [ null, %1121 ], [ %1185, %1184 ], [ null, %1127 ], [ null, %1077 ], [ null, %1075 ], [ %1190, %1196 ], [ %1190, %1194 ], [ %1190, %1200 ], [ %1190, %1235 ], [ null, %1081 ], [ null, %1116 ]
  %1243 = load ptr, ptr %1031, align 8, !tbaa !54
  %1244 = call fastcc ptr @S_find_byclass(ptr noundef %10, ptr noundef %1243, ptr noundef %1029, ptr noundef %1241, ptr noundef nonnull %8)
  %1245 = icmp eq ptr %1244, null
  br i1 %1245, label %1246, label %1308

1246:                                             ; preds = %1240
  %1247 = icmp eq ptr %1241, %4
  br i1 %1247, label %1408, label %1248

1248:                                             ; preds = %1246
  %1249 = load i32, ptr %85, align 4, !tbaa !36
  %1250 = and i32 %1249, 7168
  %1251 = icmp ne i32 %1250, 0
  %1252 = and i8 %1028, 1
  %1253 = icmp eq i8 %1252, 0
  %1254 = and i32 %1249, 2
  %1255 = icmp eq i32 %1254, 0
  %1256 = and i1 %1251, %1255
  %1257 = and i1 %1253, %1256
  br i1 %1257, label %1408, label %1258

1258:                                             ; preds = %1248
  %1259 = load ptr, ptr %11, align 8, !tbaa !8
  %1260 = getelementptr inbounds %struct.reg_substr_data, ptr %1259, i64 0, i32 1, i64 0, i32 2
  %1261 = load ptr, ptr %1260, align 8, !tbaa !34
  %1262 = icmp eq ptr %1261, null
  br i1 %1262, label %1263, label %1267

1263:                                             ; preds = %1258
  %1264 = getelementptr inbounds %struct.reg_substr_data, ptr %1259, i64 0, i32 1, i64 0, i32 3
  %1265 = load ptr, ptr %1264, align 8, !tbaa !33
  %1266 = icmp eq ptr %1265, null
  br i1 %1266, label %1273, label %1267

1267:                                             ; preds = %1263, %1258
  %1268 = load i8, ptr %1259, align 8, !tbaa !17
  %1269 = icmp ne i8 %1268, 1
  %1270 = getelementptr inbounds i8, ptr %1029, i64 %14
  %1271 = icmp eq ptr %1270, %1026
  %1272 = select i1 %1269, i1 true, i1 %1271
  br i1 %1272, label %1285, label %457

1273:                                             ; preds = %1263
  br i1 %1253, label %1276, label %1274

1274:                                             ; preds = %1273
  %1275 = getelementptr inbounds i8, ptr %1029, i64 1
  br label %1305

1276:                                             ; preds = %1273
  br i1 %22, label %1277, label %1281

1277:                                             ; preds = %1276
  %1278 = getelementptr inbounds %struct.reg_substr_data, ptr %1259, i64 0, i32 1, i64 1, i32 3
  %1279 = load ptr, ptr %1278, align 8, !tbaa !33
  %1280 = icmp eq ptr %1279, null
  br i1 %1280, label %1408, label %1285

1281:                                             ; preds = %1276
  %1282 = getelementptr inbounds %struct.reg_substr_data, ptr %1259, i64 0, i32 1, i64 1, i32 2
  %1283 = load ptr, ptr %1282, align 8, !tbaa !34
  %1284 = icmp eq ptr %1283, null
  br i1 %1284, label %1408, label %1285

1285:                                             ; preds = %1277, %1281, %1267
  %1286 = phi ptr [ %1029, %1267 ], [ %1242, %1281 ], [ %1242, %1277 ]
  %1287 = load i8, ptr %41, align 2, !tbaa !22, !range !42, !noundef !43
  %1288 = icmp eq i8 %1287, 0
  br i1 %1288, label %1298, label %1289

1289:                                             ; preds = %1285
  %1290 = icmp ult ptr %1286, %4
  br i1 %1290, label %1291, label %1300

1291:                                             ; preds = %1289
  %1292 = load i8, ptr %1286, align 1, !tbaa !5
  %1293 = zext i8 %1292 to i64
  %1294 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1293
  %1295 = load i8, ptr %1294, align 1, !tbaa !5
  %1296 = zext i8 %1295 to i64
  %1297 = getelementptr inbounds i8, ptr %1286, i64 %1296
  br label %1300

1298:                                             ; preds = %1285
  %1299 = getelementptr inbounds i8, ptr %1286, i64 1
  br label %1300

1300:                                             ; preds = %1291, %1289, %1298
  %1301 = phi ptr [ %1299, %1298 ], [ %1286, %1289 ], [ %1297, %1291 ]
  %1302 = getelementptr inbounds i8, ptr %1301, i64 %14
  %1303 = getelementptr inbounds i8, ptr %1302, i64 %1030
  %1304 = icmp ugt ptr %1303, %4
  br i1 %1304, label %1408, label %1305

1305:                                             ; preds = %1300, %1274
  %1306 = phi i32 [ 9, %1274 ], [ 7, %1300 ]
  %1307 = phi ptr [ %1275, %1274 ], [ %1301, %1300 ]
  switch i32 %1306, label %1408 [
    i32 7, label %158
    i32 9, label %876
  ]

1308:                                             ; preds = %1240, %1034, %1025
  %1309 = icmp eq ptr %1029, %3
  br i1 %1309, label %1320, label %1310

1310:                                             ; preds = %1308
  %1311 = load ptr, ptr %11, align 8, !tbaa !8
  %1312 = getelementptr inbounds %struct.reg_substr_data, ptr %1311, i64 0, i32 1, i64 2, i32 3
  %1313 = getelementptr inbounds %struct.reg_substr_data, ptr %1311, i64 0, i32 1, i64 2, i32 2
  %1314 = select i1 %22, ptr %1312, ptr %1313
  %1315 = load ptr, ptr %1314, align 8, !tbaa !35
  %1316 = load ptr, ptr %1315, align 8, !tbaa !38
  %1317 = getelementptr inbounds %struct.xpviv, ptr %1316, i64 0, i32 4
  %1318 = load i64, ptr %1317, align 8, !tbaa !5
  %1319 = add nsw i64 %1318, 1
  store i64 %1319, ptr %1317, align 8, !tbaa !5
  br label %1408

1320:                                             ; preds = %1308
  %1321 = load i32, ptr %85, align 4, !tbaa !36
  %1322 = and i32 %1321, 4
  %1323 = icmp eq i32 %1322, 0
  br i1 %1323, label %1324, label %1408

1324:                                             ; preds = %1320
  %1325 = load ptr, ptr %11, align 8, !tbaa !8
  br i1 %22, label %1326, label %1343

1326:                                             ; preds = %1324
  %1327 = getelementptr inbounds %struct.reg_substr_data, ptr %1325, i64 0, i32 1, i64 2, i32 3
  %1328 = load ptr, ptr %1327, align 8, !tbaa !33
  %1329 = icmp eq ptr %1328, null
  br i1 %1329, label %1408, label %1330

1330:                                             ; preds = %1326
  %1331 = load ptr, ptr %1328, align 8, !tbaa !38
  %1332 = getelementptr inbounds %struct.xpviv, ptr %1331, i64 0, i32 4
  %1333 = load i64, ptr %1332, align 8, !tbaa !5
  %1334 = add nsw i64 %1333, -1
  store i64 %1334, ptr %1332, align 8, !tbaa !5
  %1335 = icmp slt i64 %1333, 1
  br i1 %1335, label %1336, label %1408

1336:                                             ; preds = %1330
  %1337 = load ptr, ptr %11, align 8, !tbaa !8
  %1338 = getelementptr inbounds %struct.reg_substr_data, ptr %1337, i64 0, i32 1, i64 2, i32 3
  %1339 = load ptr, ptr %1338, align 8, !tbaa !35
  %1340 = getelementptr inbounds %struct.reg_substr_data, ptr %1337, i64 0, i32 1, i64 1, i32 3
  %1341 = load ptr, ptr %1340, align 8, !tbaa !33
  %1342 = icmp eq ptr %1339, %1341
  br i1 %1342, label %1360, label %1408

1343:                                             ; preds = %1324
  %1344 = getelementptr inbounds %struct.reg_substr_data, ptr %1325, i64 0, i32 1, i64 2, i32 2
  %1345 = load ptr, ptr %1344, align 8, !tbaa !34
  %1346 = icmp eq ptr %1345, null
  br i1 %1346, label %1408, label %1347

1347:                                             ; preds = %1343
  %1348 = load ptr, ptr %1345, align 8, !tbaa !38
  %1349 = getelementptr inbounds %struct.xpviv, ptr %1348, i64 0, i32 4
  %1350 = load i64, ptr %1349, align 8, !tbaa !5
  %1351 = add nsw i64 %1350, -1
  store i64 %1351, ptr %1349, align 8, !tbaa !5
  %1352 = icmp slt i64 %1350, 1
  br i1 %1352, label %1353, label %1408

1353:                                             ; preds = %1347
  %1354 = load ptr, ptr %11, align 8, !tbaa !8
  %1355 = getelementptr inbounds %struct.reg_substr_data, ptr %1354, i64 0, i32 1, i64 2, i32 2
  %1356 = load ptr, ptr %1355, align 8, !tbaa !35
  %1357 = getelementptr inbounds %struct.reg_substr_data, ptr %1354, i64 0, i32 1, i64 1, i32 2
  %1358 = load ptr, ptr %1357, align 8, !tbaa !34
  %1359 = icmp eq ptr %1356, %1358
  br i1 %1359, label %1360, label %1408

1360:                                             ; preds = %1353, %1336
  %1361 = phi ptr [ %1339, %1336 ], [ %1356, %1353 ]
  %1362 = icmp eq ptr %1361, null
  br i1 %1362, label %1370, label %1363

1363:                                             ; preds = %1360
  %1364 = getelementptr inbounds %struct.sv, ptr %1361, i64 0, i32 1
  %1365 = load i32, ptr %1364, align 8, !tbaa !61
  %1366 = icmp ugt i32 %1365, 1
  br i1 %1366, label %1367, label %1369

1367:                                             ; preds = %1363
  %1368 = add i32 %1365, -1
  store i32 %1368, ptr %1364, align 8, !tbaa !61
  br label %1370

1369:                                             ; preds = %1363
  call void @Perl_sv_free2(ptr noundef nonnull %1361, i32 noundef %1365) #12
  br label %1370

1370:                                             ; preds = %1360, %1367, %1369
  %1371 = load ptr, ptr %11, align 8, !tbaa !8
  %1372 = getelementptr inbounds %struct.reg_substr_data, ptr %1371, i64 0, i32 1, i64 2, i32 2
  %1373 = getelementptr inbounds %struct.reg_substr_data, ptr %1371, i64 0, i32 1, i64 2, i32 3
  %1374 = select i1 %22, ptr %1372, ptr %1373
  %1375 = load ptr, ptr %1374, align 8, !tbaa !35
  %1376 = icmp eq ptr %1375, null
  br i1 %1376, label %1385, label %1377

1377:                                             ; preds = %1370
  %1378 = getelementptr inbounds %struct.sv, ptr %1375, i64 0, i32 1
  %1379 = load i32, ptr %1378, align 8, !tbaa !61
  %1380 = icmp ugt i32 %1379, 1
  br i1 %1380, label %1381, label %1383

1381:                                             ; preds = %1377
  %1382 = add i32 %1379, -1
  store i32 %1382, ptr %1378, align 8, !tbaa !61
  br label %1385

1383:                                             ; preds = %1377
  call void @Perl_sv_free2(ptr noundef nonnull %1375, i32 noundef %1379) #12
  %1384 = load ptr, ptr %11, align 8, !tbaa !8
  br label %1385

1385:                                             ; preds = %1370, %1381, %1383
  %1386 = phi ptr [ %1371, %1370 ], [ %1371, %1381 ], [ %1384, %1383 ]
  %1387 = getelementptr inbounds %struct.reg_substr_data, ptr %1386, i64 0, i32 1, i64 2, i32 2
  %1388 = getelementptr inbounds %struct.reg_substr_data, ptr %1386, i64 0, i32 1, i64 1, i32 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1388, i8 0, i64 16, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1387, i8 0, i64 16, i1 false)
  %1389 = load i32, ptr %25, align 8, !tbaa !19
  %1390 = and i32 %1389, -6291457
  store i32 %1390, ptr %25, align 8, !tbaa !19
  br label %1408

1391:                                             ; preds = %945, %948, %224, %232, %282, %251, %143, %151, %127, %136, %166, %284, %380, %724
  %1392 = load ptr, ptr %11, align 8, !tbaa !8
  %1393 = getelementptr inbounds %struct.reg_substr_data, ptr %1392, i64 0, i32 1, i64 2, i32 2
  %1394 = load ptr, ptr %1393, align 8, !tbaa !34
  %1395 = icmp eq ptr %1394, null
  br i1 %1395, label %1396, label %1400

1396:                                             ; preds = %1391
  %1397 = getelementptr inbounds %struct.reg_substr_data, ptr %1392, i64 0, i32 1, i64 2, i32 3
  %1398 = load ptr, ptr %1397, align 8, !tbaa !33
  %1399 = icmp eq ptr %1398, null
  br i1 %1399, label %1408, label %1400

1400:                                             ; preds = %1396, %1391
  %1401 = getelementptr inbounds %struct.reg_substr_data, ptr %1392, i64 0, i32 1, i64 2, i32 3
  %1402 = select i1 %22, ptr %1401, ptr %1393
  %1403 = load ptr, ptr %1402, align 8, !tbaa !35
  %1404 = load ptr, ptr %1403, align 8, !tbaa !38
  %1405 = getelementptr inbounds %struct.xpviv, ptr %1404, i64 0, i32 4
  %1406 = load i64, ptr %1405, align 8, !tbaa !5
  %1407 = add nsw i64 %1406, 5
  store i64 %1407, ptr %1405, align 8, !tbaa !5
  br label %1408

1408:                                             ; preds = %1300, %1277, %1281, %1248, %1246, %21, %74, %1400, %1396, %96, %1310, %1385, %1353, %1347, %1343, %1336, %1330, %1326, %1320, %1305
  %1409 = phi ptr [ %3, %1320 ], [ %3, %1326 ], [ %3, %1330 ], [ %3, %1336 ], [ %3, %1343 ], [ %3, %1347 ], [ %3, %1353 ], [ %3, %1385 ], [ %1029, %1310 ], [ null, %96 ], [ null, %1396 ], [ null, %1400 ], [ null, %74 ], [ null, %21 ], [ null, %1305 ], [ null, %1246 ], [ null, %1248 ], [ null, %1281 ], [ null, %1277 ], [ null, %1300 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %8) #12
  ret ptr %1409
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_to_utf8_substr(ptr nocapture noundef readonly %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 11
  %3 = load ptr, ptr %2, align 8, !tbaa !8
  %4 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !34
  %6 = icmp eq ptr %5, null
  br i1 %6, label %43, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !33
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %43

11:                                               ; preds = %7
  %12 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %5) #12
  %13 = load ptr, ptr %2, align 8, !tbaa !8
  %14 = getelementptr inbounds %struct.reg_substr_data, ptr %13, i64 0, i32 1, i64 1, i32 3
  store ptr %12, ptr %14, align 8, !tbaa !33
  %15 = tail call i64 @Perl_sv_utf8_upgrade_flags_grow(ptr noundef %12, i32 noundef 2, i64 noundef 0) #12
  %16 = load ptr, ptr %2, align 8, !tbaa !8
  %17 = getelementptr inbounds %struct.reg_substr_data, ptr %16, i64 0, i32 1, i64 1, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !34
  %19 = getelementptr inbounds %struct.sv, ptr %18, i64 0, i32 2
  %20 = load i32, ptr %19, align 4, !tbaa !15
  %21 = and i32 %20, 1073741824
  %22 = icmp eq i32 %21, 0
  %23 = and i32 %20, 49152
  %24 = icmp eq i32 %23, 49152
  %25 = or i1 %22, %24
  br i1 %25, label %34, label %26

26:                                               ; preds = %11
  %27 = icmp ugt i32 %20, -1073741825
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = load ptr, ptr %12, align 8, !tbaa !38
  %30 = getelementptr inbounds %struct.xpv, ptr %29, i64 0, i32 2
  %31 = load i64, ptr %30, align 8, !tbaa !39
  %32 = add i64 %31, -1
  store i64 %32, ptr %30, align 8, !tbaa !39
  tail call void @Perl_fbm_compile(ptr noundef nonnull %12, i32 noundef 15) #12
  br label %34

33:                                               ; preds = %26
  tail call void @Perl_fbm_compile(ptr noundef %12, i32 noundef 0) #12
  br label %34

34:                                               ; preds = %28, %33, %11
  %35 = load ptr, ptr %2, align 8, !tbaa !8
  %36 = getelementptr inbounds %struct.reg_substr_data, ptr %35, i64 0, i32 1, i64 1, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !34
  %38 = getelementptr inbounds %struct.reg_substr_data, ptr %35, i64 0, i32 1, i64 2, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !34
  %40 = icmp eq ptr %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.reg_substr_data, ptr %35, i64 0, i32 1, i64 2, i32 3
  store ptr %12, ptr %42, align 8, !tbaa !33
  br label %43

43:                                               ; preds = %34, %41, %1, %7
  %44 = phi ptr [ %35, %34 ], [ %35, %41 ], [ %3, %1 ], [ %3, %7 ]
  %45 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !34
  %47 = icmp eq ptr %46, null
  br i1 %47, label %84, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !33
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %84

52:                                               ; preds = %48
  %53 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %46) #12
  %54 = load ptr, ptr %2, align 8, !tbaa !8
  %55 = getelementptr inbounds %struct.reg_substr_data, ptr %54, i64 0, i32 1, i64 0, i32 3
  store ptr %53, ptr %55, align 8, !tbaa !33
  %56 = tail call i64 @Perl_sv_utf8_upgrade_flags_grow(ptr noundef %53, i32 noundef 2, i64 noundef 0) #12
  %57 = load ptr, ptr %2, align 8, !tbaa !8
  %58 = getelementptr inbounds %struct.reg_substr_data, ptr %57, i64 0, i32 1, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !34
  %60 = getelementptr inbounds %struct.sv, ptr %59, i64 0, i32 2
  %61 = load i32, ptr %60, align 4, !tbaa !15
  %62 = and i32 %61, 1073741824
  %63 = icmp eq i32 %62, 0
  %64 = and i32 %61, 49152
  %65 = icmp eq i32 %64, 49152
  %66 = or i1 %63, %65
  br i1 %66, label %75, label %67

67:                                               ; preds = %52
  %68 = icmp ugt i32 %61, -1073741825
  br i1 %68, label %70, label %69

69:                                               ; preds = %67
  tail call void @Perl_fbm_compile(ptr noundef %53, i32 noundef 0) #12
  br label %75

70:                                               ; preds = %67
  %71 = load ptr, ptr %53, align 8, !tbaa !38
  %72 = getelementptr inbounds %struct.xpv, ptr %71, i64 0, i32 2
  %73 = load i64, ptr %72, align 8, !tbaa !39
  %74 = add i64 %73, -1
  store i64 %74, ptr %72, align 8, !tbaa !39
  tail call void @Perl_fbm_compile(ptr noundef nonnull %53, i32 noundef 15) #12
  br label %75

75:                                               ; preds = %70, %69, %52
  %76 = load ptr, ptr %2, align 8, !tbaa !8
  %77 = getelementptr inbounds %struct.reg_substr_data, ptr %76, i64 0, i32 1, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !34
  %79 = getelementptr inbounds %struct.reg_substr_data, ptr %76, i64 0, i32 1, i64 2, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !34
  %81 = icmp eq ptr %78, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %75
  %83 = getelementptr inbounds %struct.reg_substr_data, ptr %76, i64 0, i32 1, i64 2, i32 3
  store ptr %53, ptr %83, align 8, !tbaa !33
  br label %84

84:                                               ; preds = %82, %75, %48, %43
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_to_byte_substr(ptr nocapture noundef readonly %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 11
  %3 = load ptr, ptr %2, align 8, !tbaa !8
  %4 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 3
  %5 = load ptr, ptr %4, align 8, !tbaa !33
  %6 = icmp eq ptr %5, null
  br i1 %6, label %43, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.reg_substr_data, ptr %3, i64 0, i32 1, i64 1, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !34
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %43

11:                                               ; preds = %7
  %12 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %5) #12
  %13 = tail call zeroext i1 @Perl_sv_utf8_downgrade(ptr noundef %12, i1 noundef zeroext true) #12
  br i1 %13, label %14, label %84

14:                                               ; preds = %11
  %15 = load ptr, ptr %2, align 8, !tbaa !8
  %16 = getelementptr inbounds %struct.reg_substr_data, ptr %15, i64 0, i32 1, i64 1, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !33
  %18 = getelementptr inbounds %struct.sv, ptr %17, i64 0, i32 2
  %19 = load i32, ptr %18, align 4, !tbaa !15
  %20 = and i32 %19, 1073741824
  %21 = icmp eq i32 %20, 0
  %22 = and i32 %19, 49152
  %23 = icmp eq i32 %22, 49152
  %24 = or i1 %21, %23
  br i1 %24, label %33, label %25

25:                                               ; preds = %14
  %26 = icmp ugt i32 %19, -1073741825
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = load ptr, ptr %12, align 8, !tbaa !38
  %29 = getelementptr inbounds %struct.xpv, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %29, align 8, !tbaa !39
  %31 = add i64 %30, -1
  store i64 %31, ptr %29, align 8, !tbaa !39
  tail call void @Perl_fbm_compile(ptr noundef nonnull %12, i32 noundef 15) #12
  br label %33

32:                                               ; preds = %25
  tail call void @Perl_fbm_compile(ptr noundef %12, i32 noundef 0) #12
  br label %33

33:                                               ; preds = %27, %32, %14
  %34 = load ptr, ptr %2, align 8, !tbaa !8
  %35 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 1, i32 2
  store ptr %12, ptr %35, align 8, !tbaa !34
  %36 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 1, i32 3
  %37 = load ptr, ptr %36, align 8, !tbaa !33
  %38 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 2, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !33
  %40 = icmp eq ptr %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %33
  %42 = getelementptr inbounds %struct.reg_substr_data, ptr %34, i64 0, i32 1, i64 2, i32 2
  store ptr %12, ptr %42, align 8, !tbaa !34
  br label %43

43:                                               ; preds = %41, %33, %1, %7
  %44 = phi ptr [ %34, %41 ], [ %34, %33 ], [ %3, %1 ], [ %3, %7 ]
  %45 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 3
  %46 = load ptr, ptr %45, align 8, !tbaa !33
  %47 = icmp eq ptr %46, null
  br i1 %47, label %84, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.reg_substr_data, ptr %44, i64 0, i32 1, i64 0, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !34
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %84

52:                                               ; preds = %48
  %53 = tail call ptr @Perl_newSVsv(ptr noundef nonnull %46) #12
  %54 = tail call zeroext i1 @Perl_sv_utf8_downgrade(ptr noundef %53, i1 noundef zeroext true) #12
  br i1 %54, label %55, label %84

55:                                               ; preds = %52
  %56 = load ptr, ptr %2, align 8, !tbaa !8
  %57 = getelementptr inbounds %struct.reg_substr_data, ptr %56, i64 0, i32 1, i64 0, i32 3
  %58 = load ptr, ptr %57, align 8, !tbaa !33
  %59 = getelementptr inbounds %struct.sv, ptr %58, i64 0, i32 2
  %60 = load i32, ptr %59, align 4, !tbaa !15
  %61 = and i32 %60, 1073741824
  %62 = icmp eq i32 %61, 0
  %63 = and i32 %60, 49152
  %64 = icmp eq i32 %63, 49152
  %65 = or i1 %62, %64
  br i1 %65, label %74, label %66

66:                                               ; preds = %55
  %67 = icmp ugt i32 %60, -1073741825
  br i1 %67, label %69, label %68

68:                                               ; preds = %66
  tail call void @Perl_fbm_compile(ptr noundef %53, i32 noundef 0) #12
  br label %74

69:                                               ; preds = %66
  %70 = load ptr, ptr %53, align 8, !tbaa !38
  %71 = getelementptr inbounds %struct.xpv, ptr %70, i64 0, i32 2
  %72 = load i64, ptr %71, align 8, !tbaa !39
  %73 = add i64 %72, -1
  store i64 %73, ptr %71, align 8, !tbaa !39
  tail call void @Perl_fbm_compile(ptr noundef nonnull %53, i32 noundef 15) #12
  br label %74

74:                                               ; preds = %69, %68, %55
  %75 = load ptr, ptr %2, align 8, !tbaa !8
  %76 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 0, i32 2
  store ptr %53, ptr %76, align 8, !tbaa !34
  %77 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 0, i32 3
  %78 = load ptr, ptr %77, align 8, !tbaa !33
  %79 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 2, i32 3
  %80 = load ptr, ptr %79, align 8, !tbaa !33
  %81 = icmp eq ptr %78, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %74
  %83 = getelementptr inbounds %struct.reg_substr_data, ptr %75, i64 0, i32 1, i64 2, i32 2
  store ptr %53, ptr %83, align 8, !tbaa !34
  br label %84

84:                                               ; preds = %43, %48, %74, %82, %52, %11
  %85 = phi i1 [ false, %11 ], [ false, %52 ], [ true, %82 ], [ true, %74 ], [ true, %48 ], [ true, %43 ]
  ret i1 %85
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @S_reghop3(ptr noundef %0, i64 noundef %1, ptr noundef %2) unnamed_addr #2 {
  %4 = ptrtoint ptr %2 to i64
  %5 = icmp sgt i64 %1, -1
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = icmp ugt ptr %0, %2
  br i1 %7, label %25, label %52

8:                                                ; preds = %3
  %9 = icmp ne i64 %1, 0
  %10 = icmp ult ptr %0, %2
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %52

12:                                               ; preds = %8, %12
  %13 = phi ptr [ %21, %12 ], [ %0, %8 ]
  %14 = phi i64 [ %15, %12 ], [ %1, %8 ]
  %15 = add nsw i64 %14, -1
  %16 = load i8, ptr %13, align 1, !tbaa !5
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !5
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds i8, ptr %13, i64 %20
  %22 = icmp ne i64 %15, 0
  %23 = icmp ult ptr %21, %2
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %12, label %52, !llvm.loop !44

25:                                               ; preds = %6, %47
  %26 = phi i64 [ %28, %47 ], [ %1, %6 ]
  %27 = phi ptr [ %48, %47 ], [ %0, %6 ]
  %28 = add nsw i64 %26, 1
  %29 = getelementptr inbounds i8, ptr %27, i64 -1
  %30 = load i8, ptr %29, align 1, !tbaa !5
  %31 = icmp slt i8 %30, 0
  %32 = icmp ugt ptr %29, %2
  %33 = and i1 %31, %32
  br i1 %33, label %34, label %47

34:                                               ; preds = %25
  %35 = ptrtoint ptr %27 to i64
  %36 = getelementptr i8, ptr %27, i64 %4
  %37 = sub i64 0, %35
  %38 = getelementptr i8, ptr %36, i64 %37
  br label %39

39:                                               ; preds = %34, %44
  %40 = phi ptr [ %45, %44 ], [ %29, %34 ]
  %41 = load i8, ptr %40, align 1, !tbaa !5
  %42 = and i8 %41, -64
  %43 = icmp eq i8 %42, -128
  br i1 %43, label %44, label %47

44:                                               ; preds = %39
  %45 = getelementptr inbounds i8, ptr %40, i64 -1
  %46 = icmp ugt ptr %45, %2
  br i1 %46, label %39, label %47, !llvm.loop !46

47:                                               ; preds = %44, %39, %25
  %48 = phi ptr [ %29, %25 ], [ %38, %44 ], [ %40, %39 ]
  %49 = icmp ne i64 %28, 0
  %50 = icmp ugt ptr %48, %2
  %51 = and i1 %49, %50
  br i1 %51, label %25, label %52, !llvm.loop !47

52:                                               ; preds = %47, %12, %6, %8
  %53 = phi ptr [ %0, %8 ], [ %0, %6 ], [ %21, %12 ], [ %48, %47 ]
  ret ptr %53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @S_reghopmaybe3(ptr noundef %0, i64 noundef %1, ptr noundef %2) unnamed_addr #2 {
  %4 = ptrtoint ptr %2 to i64
  %5 = icmp sgt i64 %1, -1
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = icmp ugt ptr %0, %2
  br i1 %7, label %29, label %60

8:                                                ; preds = %3
  %9 = icmp ne i64 %1, 0
  %10 = icmp ult ptr %0, %2
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %25

12:                                               ; preds = %8, %12
  %13 = phi i64 [ %15, %12 ], [ %1, %8 ]
  %14 = phi ptr [ %21, %12 ], [ %0, %8 ]
  %15 = add nsw i64 %13, -1
  %16 = load i8, ptr %14, align 1, !tbaa !5
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !5
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds i8, ptr %14, i64 %20
  %22 = icmp ne i64 %15, 0
  %23 = icmp ult ptr %21, %2
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %12, label %25, !llvm.loop !48

25:                                               ; preds = %12, %8
  %26 = phi ptr [ %0, %8 ], [ %21, %12 ]
  %27 = phi i64 [ %1, %8 ], [ %15, %12 ]
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %60, label %58

29:                                               ; preds = %6, %51
  %30 = phi i64 [ %32, %51 ], [ %1, %6 ]
  %31 = phi ptr [ %52, %51 ], [ %0, %6 ]
  %32 = add nsw i64 %30, 1
  %33 = getelementptr inbounds i8, ptr %31, i64 -1
  %34 = load i8, ptr %33, align 1, !tbaa !5
  %35 = icmp slt i8 %34, 0
  %36 = icmp ugt ptr %33, %2
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %51

38:                                               ; preds = %29
  %39 = ptrtoint ptr %31 to i64
  %40 = getelementptr i8, ptr %31, i64 %4
  %41 = sub i64 0, %39
  %42 = getelementptr i8, ptr %40, i64 %41
  br label %43

43:                                               ; preds = %38, %48
  %44 = phi ptr [ %49, %48 ], [ %33, %38 ]
  %45 = load i8, ptr %44, align 1, !tbaa !5
  %46 = and i8 %45, -64
  %47 = icmp eq i8 %46, -128
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, ptr %44, i64 -1
  %50 = icmp ugt ptr %49, %2
  br i1 %50, label %43, label %51, !llvm.loop !49

51:                                               ; preds = %48, %43, %29
  %52 = phi ptr [ %33, %29 ], [ %42, %48 ], [ %44, %43 ]
  %53 = icmp ne i64 %32, 0
  %54 = icmp ugt ptr %52, %2
  %55 = and i1 %54, %53
  br i1 %55, label %29, label %56, !llvm.loop !50

56:                                               ; preds = %51
  %57 = icmp slt i64 %30, -1
  br i1 %57, label %60, label %58

58:                                               ; preds = %56, %25
  %59 = phi ptr [ %26, %25 ], [ %52, %56 ]
  br label %60

60:                                               ; preds = %6, %56, %25, %58
  %61 = phi ptr [ %59, %58 ], [ null, %25 ], [ null, %56 ], [ null, %6 ]
  ret ptr %61
}

declare ptr @Perl_fbm_instr(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @S_reghop4(ptr noundef %0, i64 noundef %1, ptr noundef %2, ptr noundef readnone %3) unnamed_addr #2 {
  %5 = ptrtoint ptr %2 to i64
  %6 = icmp sgt i64 %1, -1
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = icmp ugt ptr %0, %2
  br i1 %8, label %26, label %53

9:                                                ; preds = %4
  %10 = icmp ne i64 %1, 0
  %11 = icmp ult ptr %0, %3
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %53

13:                                               ; preds = %9, %13
  %14 = phi ptr [ %22, %13 ], [ %0, %9 ]
  %15 = phi i64 [ %16, %13 ], [ %1, %9 ]
  %16 = add nsw i64 %15, -1
  %17 = load i8, ptr %14, align 1, !tbaa !5
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %18
  %20 = load i8, ptr %19, align 1, !tbaa !5
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds i8, ptr %14, i64 %21
  %23 = icmp ne i64 %16, 0
  %24 = icmp ult ptr %22, %3
  %25 = select i1 %23, i1 %24, i1 false
  br i1 %25, label %13, label %53, !llvm.loop !51

26:                                               ; preds = %7, %48
  %27 = phi i64 [ %29, %48 ], [ %1, %7 ]
  %28 = phi ptr [ %49, %48 ], [ %0, %7 ]
  %29 = add nsw i64 %27, 1
  %30 = getelementptr inbounds i8, ptr %28, i64 -1
  %31 = load i8, ptr %30, align 1, !tbaa !5
  %32 = icmp slt i8 %31, 0
  %33 = icmp ugt ptr %30, %2
  %34 = and i1 %32, %33
  br i1 %34, label %35, label %48

35:                                               ; preds = %26
  %36 = ptrtoint ptr %28 to i64
  %37 = getelementptr i8, ptr %28, i64 %5
  %38 = sub i64 0, %36
  %39 = getelementptr i8, ptr %37, i64 %38
  br label %40

40:                                               ; preds = %35, %45
  %41 = phi ptr [ %46, %45 ], [ %30, %35 ]
  %42 = load i8, ptr %41, align 1, !tbaa !5
  %43 = and i8 %42, -64
  %44 = icmp eq i8 %43, -128
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds i8, ptr %41, i64 -1
  %47 = icmp ugt ptr %46, %2
  br i1 %47, label %40, label %48, !llvm.loop !52

48:                                               ; preds = %45, %40, %26
  %49 = phi ptr [ %30, %26 ], [ %39, %45 ], [ %41, %40 ]
  %50 = icmp ne i64 %29, 0
  %51 = icmp ugt ptr %49, %2
  %52 = and i1 %50, %51
  br i1 %52, label %26, label %53, !llvm.loop !53

53:                                               ; preds = %48, %13, %7, %9
  %54 = phi ptr [ %0, %9 ], [ %0, %7 ], [ %22, %13 ], [ %49, %48 ]
  ret ptr %54
}

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare ptr @memchr(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #4

declare i64 @Perl_utf8_distance(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @S_find_byclass(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #0 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca [14 x i8], align 1
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  store ptr %2, ptr %6, align 8, !tbaa !35
  %19 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 13
  %20 = load i32, ptr %19, align 4, !tbaa !36
  %21 = and i32 %20, 1
  %22 = xor i32 %21, 1
  %23 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 14
  %24 = load i8, ptr %23, align 2, !tbaa !22, !range !42, !noundef !43
  %25 = icmp ne i8 %24, 0
  %26 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 13
  %27 = load i8, ptr %26, align 1, !tbaa !30, !range !42, !noundef !43
  %28 = icmp ne i8 %27, 0
  %29 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 14
  %30 = load ptr, ptr %29, align 8, !tbaa !20
  %31 = getelementptr inbounds %struct.regnode, ptr %1, i64 0, i32 1
  %32 = load i8, ptr %31, align 1, !tbaa !56
  switch i8 %32, label %5546 [
    i8 20, label %39
    i8 19, label %39
    i8 18, label %33
    i8 39, label %299
    i8 36, label %299
    i8 33, label %302
    i8 34, label %303
    i8 37, label %309
    i8 38, label %311
    i8 35, label %312
    i8 9, label %654
    i8 13, label %968
    i8 8, label %1283
    i8 11, label %1558
    i8 12, label %1782
    i8 15, label %2058
    i8 14, label %2283
    i8 10, label %2560
    i8 91, label %3449
    i8 26, label %3668
    i8 22, label %3669
    i8 25, label %3848
    i8 21, label %3849
    i8 28, label %3851
    i8 24, label %3952
    i8 27, label %4046
    i8 23, label %4047
    i8 75, label %5044
    i8 74, label %5044
  ]

33:                                               ; preds = %5
  %34 = icmp ult ptr %2, %3
  br i1 %34, label %35, label %5550

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %37 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %38 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %226

39:                                               ; preds = %5, %5
  %40 = icmp ult ptr %2, %3
  br i1 %25, label %46, label %41

41:                                               ; preds = %39
  br i1 %40, label %42, label %5550

42:                                               ; preds = %41
  %43 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %44 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %45 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %134

46:                                               ; preds = %39
  br i1 %40, label %47, label %5550

47:                                               ; preds = %46
  %48 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %49 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %50 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %51

51:                                               ; preds = %47, %124
  %52 = phi i32 [ 1, %47 ], [ %126, %124 ]
  %53 = phi ptr [ %2, %47 ], [ %132, %124 ]
  %54 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef %1, ptr noundef %53, ptr noundef nonnull %3, i1 noundef zeroext true)
  br i1 %54, label %55, label %124

55:                                               ; preds = %51
  %56 = icmp eq i32 %52, 0
  br i1 %56, label %124, label %57

57:                                               ; preds = %55
  %58 = load i8, ptr %48, align 8, !tbaa !31, !range !42, !noundef !43
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %5548

60:                                               ; preds = %57
  %61 = load ptr, ptr %4, align 8, !tbaa !62
  %62 = getelementptr i8, ptr %61, i64 16
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  %64 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 14
  %65 = load ptr, ptr %64, align 8, !tbaa !20
  store ptr null, ptr %49, align 8, !tbaa !63
  %66 = load ptr, ptr %50, align 8, !tbaa !26
  %67 = ptrtoint ptr %53 to i64
  %68 = ptrtoint ptr %66 to i64
  %69 = sub i64 %67, %68
  %70 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 17
  %71 = load ptr, ptr %70, align 8, !tbaa !64
  store i64 %69, ptr %71, align 8, !tbaa !65
  %72 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 15
  store i32 0, ptr %72, align 8, !tbaa !67
  %73 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 16
  store i32 0, ptr %73, align 4, !tbaa !68
  %74 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 12
  %75 = load i32, ptr %74, align 8, !tbaa !69
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %77, label %106

77:                                               ; preds = %60
  %78 = and i32 %75, 7
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %88, label %80

80:                                               ; preds = %77, %80
  %81 = phi i32 [ %85, %80 ], [ %75, %77 ]
  %82 = phi ptr [ %84, %80 ], [ %71, %77 ]
  %83 = phi i32 [ %86, %80 ], [ 0, %77 ]
  %84 = getelementptr inbounds %struct.regexp_paren_pair, ptr %82, i64 1
  %85 = add nsw i32 %81, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %84, i8 -1, i64 16, i1 false)
  %86 = add i32 %83, 1
  %87 = icmp eq i32 %86, %78
  br i1 %87, label %88, label %80, !llvm.loop !70

88:                                               ; preds = %80, %77
  %89 = phi i32 [ %75, %77 ], [ %85, %80 ]
  %90 = phi ptr [ %71, %77 ], [ %84, %80 ]
  %91 = icmp ult i32 %75, 8
  br i1 %91, label %106, label %92

92:                                               ; preds = %88, %92
  %93 = phi i32 [ %103, %92 ], [ %89, %88 ]
  %94 = phi ptr [ %102, %92 ], [ %90, %88 ]
  %95 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %95, i8 -1, i64 16, i1 false)
  %96 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %96, i8 -1, i64 16, i1 false)
  %97 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %97, i8 -1, i64 16, i1 false)
  %98 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %98, i8 -1, i64 16, i1 false)
  %99 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %99, i8 -1, i64 16, i1 false)
  %100 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %100, i8 -1, i64 16, i1 false)
  %101 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %101, i8 -1, i64 16, i1 false)
  %102 = getelementptr inbounds %struct.regexp_paren_pair, ptr %94, i64 8
  %103 = add nsw i32 %93, -8
  %104 = add i32 %93, -9
  %105 = icmp ult i32 %104, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %102, i8 -1, i64 16, i1 false)
  br i1 %105, label %92, label %106, !llvm.loop !72

106:                                              ; preds = %88, %92, %60
  %107 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %108 = getelementptr inbounds %struct.regexp_internal, ptr %65, i64 1
  %109 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %53, ptr noundef nonnull %108)
  %110 = icmp eq i64 %109, -1
  br i1 %110, label %111, label %120

111:                                              ; preds = %106
  %112 = load ptr, ptr %49, align 8, !tbaa !63
  %113 = icmp eq ptr %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %111
  store ptr %112, ptr %6, align 8, !tbaa !35
  br label %115

115:                                              ; preds = %114, %111
  %116 = phi ptr [ %112, %114 ], [ %53, %111 ]
  %117 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %118 = icmp sgt i32 %117, %107
  br i1 %118, label %119, label %124

119:                                              ; preds = %115
  tail call void @Perl_leave_scope(i32 noundef %107) #12
  br label %124

120:                                              ; preds = %106
  %121 = getelementptr inbounds %struct.regexp, ptr %63, i64 0, i32 17
  %122 = load ptr, ptr %121, align 8, !tbaa !64
  %123 = getelementptr inbounds %struct.regexp_paren_pair, ptr %122, i64 0, i32 1
  store i64 %109, ptr %123, align 8, !tbaa !74
  br label %5548

124:                                              ; preds = %115, %119, %51, %55
  %125 = phi ptr [ %53, %55 ], [ %53, %51 ], [ %116, %119 ], [ %116, %115 ]
  %126 = phi i32 [ %22, %55 ], [ 1, %51 ], [ %22, %119 ], [ %22, %115 ]
  %127 = load i8, ptr %125, align 1, !tbaa !5
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %128
  %130 = load i8, ptr %129, align 1, !tbaa !5
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds i8, ptr %125, i64 %131
  store ptr %132, ptr %6, align 8, !tbaa !35
  %133 = icmp ult ptr %132, %3
  br i1 %133, label %51, label %5550, !llvm.loop !75

134:                                              ; preds = %42, %221
  %135 = phi i32 [ 1, %42 ], [ %223, %221 ]
  %136 = phi ptr [ %2, %42 ], [ %224, %221 ]
  %137 = load i8, ptr %1, align 2, !tbaa !76
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %142, label %139

139:                                              ; preds = %134
  %140 = getelementptr inbounds i8, ptr %136, i64 1
  %141 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef nonnull %1, ptr noundef %136, ptr noundef nonnull %140, i1 noundef zeroext false)
  br i1 %141, label %154, label %221

142:                                              ; preds = %134
  %143 = load i8, ptr %136, align 1, !tbaa !5
  %144 = zext i8 %143 to i32
  %145 = lshr i32 %144, 3
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4, i64 %146
  %148 = load i8, ptr %147, align 1, !tbaa !5
  %149 = zext i8 %148 to i32
  %150 = and i32 %144, 7
  %151 = shl nuw nsw i32 1, %150
  %152 = and i32 %151, %149
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %221, label %154

154:                                              ; preds = %142, %139
  %155 = icmp eq i32 %135, 0
  br i1 %155, label %221, label %156

156:                                              ; preds = %154
  %157 = load i8, ptr %43, align 8, !tbaa !31, !range !42, !noundef !43
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %159, label %5548

159:                                              ; preds = %156
  %160 = load ptr, ptr %4, align 8, !tbaa !62
  %161 = getelementptr i8, ptr %160, i64 16
  %162 = load ptr, ptr %161, align 8, !tbaa !5
  %163 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 14
  %164 = load ptr, ptr %163, align 8, !tbaa !20
  store ptr null, ptr %44, align 8, !tbaa !63
  %165 = load ptr, ptr %45, align 8, !tbaa !26
  %166 = ptrtoint ptr %136 to i64
  %167 = ptrtoint ptr %165 to i64
  %168 = sub i64 %166, %167
  %169 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 17
  %170 = load ptr, ptr %169, align 8, !tbaa !64
  store i64 %168, ptr %170, align 8, !tbaa !65
  %171 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 15
  store i32 0, ptr %171, align 8, !tbaa !67
  %172 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 16
  store i32 0, ptr %172, align 4, !tbaa !68
  %173 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 12
  %174 = load i32, ptr %173, align 8, !tbaa !69
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %205

176:                                              ; preds = %159
  %177 = and i32 %174, 7
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %176, %179
  %180 = phi i32 [ %184, %179 ], [ %174, %176 ]
  %181 = phi ptr [ %183, %179 ], [ %170, %176 ]
  %182 = phi i32 [ %185, %179 ], [ 0, %176 ]
  %183 = getelementptr inbounds %struct.regexp_paren_pair, ptr %181, i64 1
  %184 = add nsw i32 %180, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %183, i8 -1, i64 16, i1 false)
  %185 = add i32 %182, 1
  %186 = icmp eq i32 %185, %177
  br i1 %186, label %187, label %179, !llvm.loop !77

187:                                              ; preds = %179, %176
  %188 = phi i32 [ %174, %176 ], [ %184, %179 ]
  %189 = phi ptr [ %170, %176 ], [ %183, %179 ]
  %190 = icmp ult i32 %174, 8
  br i1 %190, label %205, label %191

191:                                              ; preds = %187, %191
  %192 = phi i32 [ %202, %191 ], [ %188, %187 ]
  %193 = phi ptr [ %201, %191 ], [ %189, %187 ]
  %194 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %194, i8 -1, i64 16, i1 false)
  %195 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %195, i8 -1, i64 16, i1 false)
  %196 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %196, i8 -1, i64 16, i1 false)
  %197 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %197, i8 -1, i64 16, i1 false)
  %198 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %198, i8 -1, i64 16, i1 false)
  %199 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %199, i8 -1, i64 16, i1 false)
  %200 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %200, i8 -1, i64 16, i1 false)
  %201 = getelementptr inbounds %struct.regexp_paren_pair, ptr %193, i64 8
  %202 = add nsw i32 %192, -8
  %203 = add i32 %192, -9
  %204 = icmp ult i32 %203, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %201, i8 -1, i64 16, i1 false)
  br i1 %204, label %191, label %205, !llvm.loop !72

205:                                              ; preds = %187, %191, %159
  %206 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %207 = getelementptr inbounds %struct.regexp_internal, ptr %164, i64 1
  %208 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %136, ptr noundef nonnull %207)
  %209 = icmp eq i64 %208, -1
  br i1 %209, label %210, label %217

210:                                              ; preds = %205
  %211 = load ptr, ptr %44, align 8, !tbaa !63
  %212 = icmp eq ptr %211, null
  %213 = select i1 %212, ptr %136, ptr %211
  %214 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %215 = icmp sgt i32 %214, %206
  br i1 %215, label %216, label %221

216:                                              ; preds = %210
  tail call void @Perl_leave_scope(i32 noundef %206) #12
  br label %221

217:                                              ; preds = %205
  %218 = getelementptr inbounds %struct.regexp, ptr %162, i64 0, i32 17
  %219 = load ptr, ptr %218, align 8, !tbaa !64
  %220 = getelementptr inbounds %struct.regexp_paren_pair, ptr %219, i64 0, i32 1
  store i64 %208, ptr %220, align 8, !tbaa !74
  br label %5548

221:                                              ; preds = %210, %216, %139, %142, %154
  %222 = phi ptr [ %136, %154 ], [ %136, %142 ], [ %136, %139 ], [ %213, %216 ], [ %213, %210 ]
  %223 = phi i32 [ %22, %154 ], [ 1, %142 ], [ 1, %139 ], [ %22, %216 ], [ %22, %210 ]
  %224 = getelementptr inbounds i8, ptr %222, i64 1
  store ptr %224, ptr %6, align 8, !tbaa !35
  %225 = icmp ult ptr %224, %3
  br i1 %225, label %134, label %5550, !llvm.loop !78

226:                                              ; preds = %35, %295
  %227 = phi i32 [ 1, %35 ], [ %22, %295 ]
  %228 = phi ptr [ %2, %35 ], [ %297, %295 ]
  %229 = icmp eq i32 %227, 0
  br i1 %229, label %295, label %230

230:                                              ; preds = %226
  %231 = load i8, ptr %36, align 8, !tbaa !31, !range !42, !noundef !43
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %233, label %5548

233:                                              ; preds = %230
  %234 = load ptr, ptr %4, align 8, !tbaa !62
  %235 = getelementptr i8, ptr %234, i64 16
  %236 = load ptr, ptr %235, align 8, !tbaa !5
  %237 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 14
  %238 = load ptr, ptr %237, align 8, !tbaa !20
  store ptr null, ptr %37, align 8, !tbaa !63
  %239 = load ptr, ptr %38, align 8, !tbaa !26
  %240 = ptrtoint ptr %228 to i64
  %241 = ptrtoint ptr %239 to i64
  %242 = sub i64 %240, %241
  %243 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 17
  %244 = load ptr, ptr %243, align 8, !tbaa !64
  store i64 %242, ptr %244, align 8, !tbaa !65
  %245 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 15
  store i32 0, ptr %245, align 8, !tbaa !67
  %246 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 16
  store i32 0, ptr %246, align 4, !tbaa !68
  %247 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 12
  %248 = load i32, ptr %247, align 8, !tbaa !69
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %250, label %279

250:                                              ; preds = %233
  %251 = and i32 %248, 7
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %261, label %253

253:                                              ; preds = %250, %253
  %254 = phi i32 [ %258, %253 ], [ %248, %250 ]
  %255 = phi ptr [ %257, %253 ], [ %244, %250 ]
  %256 = phi i32 [ %259, %253 ], [ 0, %250 ]
  %257 = getelementptr inbounds %struct.regexp_paren_pair, ptr %255, i64 1
  %258 = add nsw i32 %254, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %257, i8 -1, i64 16, i1 false)
  %259 = add i32 %256, 1
  %260 = icmp eq i32 %259, %251
  br i1 %260, label %261, label %253, !llvm.loop !79

261:                                              ; preds = %253, %250
  %262 = phi i32 [ %248, %250 ], [ %258, %253 ]
  %263 = phi ptr [ %244, %250 ], [ %257, %253 ]
  %264 = icmp ult i32 %248, 8
  br i1 %264, label %279, label %265

265:                                              ; preds = %261, %265
  %266 = phi i32 [ %276, %265 ], [ %262, %261 ]
  %267 = phi ptr [ %275, %265 ], [ %263, %261 ]
  %268 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %268, i8 -1, i64 16, i1 false)
  %269 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %269, i8 -1, i64 16, i1 false)
  %270 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %270, i8 -1, i64 16, i1 false)
  %271 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %271, i8 -1, i64 16, i1 false)
  %272 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %272, i8 -1, i64 16, i1 false)
  %273 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %273, i8 -1, i64 16, i1 false)
  %274 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %274, i8 -1, i64 16, i1 false)
  %275 = getelementptr inbounds %struct.regexp_paren_pair, ptr %267, i64 8
  %276 = add nsw i32 %266, -8
  %277 = add i32 %266, -9
  %278 = icmp ult i32 %277, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %275, i8 -1, i64 16, i1 false)
  br i1 %278, label %265, label %279, !llvm.loop !72

279:                                              ; preds = %261, %265, %233
  %280 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %281 = getelementptr inbounds %struct.regexp_internal, ptr %238, i64 1
  %282 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %228, ptr noundef nonnull %281)
  %283 = icmp eq i64 %282, -1
  br i1 %283, label %284, label %291

284:                                              ; preds = %279
  %285 = load ptr, ptr %37, align 8, !tbaa !63
  %286 = icmp eq ptr %285, null
  %287 = select i1 %286, ptr %228, ptr %285
  %288 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %289 = icmp sgt i32 %288, %280
  br i1 %289, label %290, label %295

290:                                              ; preds = %284
  tail call void @Perl_leave_scope(i32 noundef %280) #12
  br label %295

291:                                              ; preds = %279
  %292 = getelementptr inbounds %struct.regexp, ptr %236, i64 0, i32 17
  %293 = load ptr, ptr %292, align 8, !tbaa !64
  %294 = getelementptr inbounds %struct.regexp_paren_pair, ptr %293, i64 0, i32 1
  store i64 %282, ptr %294, align 8, !tbaa !74
  br label %5548

295:                                              ; preds = %284, %290, %226
  %296 = phi ptr [ %287, %284 ], [ %287, %290 ], [ %228, %226 ]
  %297 = getelementptr inbounds i8, ptr %296, i64 1
  store ptr %297, ptr %6, align 8, !tbaa !35
  %298 = icmp ult ptr %297, %3
  br i1 %298, label %226, label %5550, !llvm.loop !80

299:                                              ; preds = %5, %5
  %300 = or i8 %27, %24
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %316, label %504

302:                                              ; preds = %5
  br i1 %25, label %504, label %316

303:                                              ; preds = %5
  %304 = or i8 %27, %24
  %305 = icmp eq i8 %304, 0
  %306 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !42
  %307 = icmp eq i8 %306, 0
  %308 = select i1 %305, i1 %307, i1 false
  br i1 %308, label %316, label %504

309:                                              ; preds = %5
  %310 = select i1 %28, i32 8, i32 0
  br label %504

311:                                              ; preds = %5
  br i1 %25, label %504, label %5550

312:                                              ; preds = %5
  %313 = or i8 %27, %24
  %314 = icmp eq i8 %313, 0
  %315 = select i1 %28, i32 8, i32 0
  br i1 %314, label %316, label %504

316:                                              ; preds = %299, %302, %303, %312
  %317 = phi ptr [ @PL_fold_latin1, %299 ], [ @PL_fold, %302 ], [ @PL_fold_locale, %303 ], [ @PL_fold_latin1, %312 ]
  %318 = phi ptr [ @Perl_foldEQ_latin1, %299 ], [ @Perl_foldEQ, %302 ], [ @Perl_foldEQ_locale, %303 ], [ @Perl_foldEQ_latin1, %312 ]
  %319 = getelementptr inbounds %struct.regnode_string, ptr %1, i64 0, i32 3
  %320 = load i8, ptr %1, align 2, !tbaa !59
  %321 = zext i8 %320 to i64
  %322 = sub nsw i64 0, %321
  %323 = getelementptr inbounds i8, ptr %3, i64 %322
  %324 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %325 = load i8, ptr %324, align 8, !tbaa !31, !range !42, !noundef !43
  %326 = icmp eq i8 %325, 0
  %327 = icmp ult ptr %323, %2
  %328 = select i1 %327, ptr %2, ptr %323
  %329 = select i1 %326, ptr %323, ptr %328
  %330 = load i8, ptr %319, align 1, !tbaa !5
  %331 = zext i8 %330 to i64
  %332 = getelementptr inbounds i8, ptr %317, i64 %331
  %333 = load i8, ptr %332, align 1, !tbaa !5
  %334 = icmp eq i8 %330, %333
  %335 = icmp ult ptr %329, %2
  br i1 %334, label %342, label %336

336:                                              ; preds = %316
  br i1 %335, label %5550, label %337

337:                                              ; preds = %336
  %338 = icmp eq i8 %320, 1
  %339 = zext i8 %320 to i32
  %340 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %341 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %425

342:                                              ; preds = %316
  br i1 %335, label %5550, label %343

343:                                              ; preds = %342
  %344 = icmp eq i8 %320, 1
  %345 = zext i8 %320 to i32
  %346 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %347 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %348

348:                                              ; preds = %343, %421
  %349 = phi ptr [ %2, %343 ], [ %423, %421 ]
  %350 = load i8, ptr %349, align 1, !tbaa !5
  %351 = icmp eq i8 %350, %330
  br i1 %351, label %352, label %421

352:                                              ; preds = %348
  br i1 %344, label %356, label %353

353:                                              ; preds = %352
  %354 = tail call i32 %318(ptr noundef nonnull %349, ptr noundef nonnull %319, i32 noundef %345) #12, !callees !81
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %421, label %356

356:                                              ; preds = %353, %352
  %357 = load i8, ptr %324, align 8, !tbaa !31, !range !42, !noundef !43
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %359, label %5548

359:                                              ; preds = %356
  %360 = load ptr, ptr %4, align 8, !tbaa !62
  %361 = getelementptr i8, ptr %360, i64 16
  %362 = load ptr, ptr %361, align 8, !tbaa !5
  %363 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 14
  %364 = load ptr, ptr %363, align 8, !tbaa !20
  store ptr null, ptr %346, align 8, !tbaa !63
  %365 = load ptr, ptr %347, align 8, !tbaa !26
  %366 = ptrtoint ptr %349 to i64
  %367 = ptrtoint ptr %365 to i64
  %368 = sub i64 %366, %367
  %369 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 17
  %370 = load ptr, ptr %369, align 8, !tbaa !64
  store i64 %368, ptr %370, align 8, !tbaa !65
  %371 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 15
  store i32 0, ptr %371, align 8, !tbaa !67
  %372 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 16
  store i32 0, ptr %372, align 4, !tbaa !68
  %373 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 12
  %374 = load i32, ptr %373, align 8, !tbaa !69
  %375 = icmp sgt i32 %374, 0
  br i1 %375, label %376, label %405

376:                                              ; preds = %359
  %377 = and i32 %374, 7
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %387, label %379

379:                                              ; preds = %376, %379
  %380 = phi i32 [ %384, %379 ], [ %374, %376 ]
  %381 = phi ptr [ %383, %379 ], [ %370, %376 ]
  %382 = phi i32 [ %385, %379 ], [ 0, %376 ]
  %383 = getelementptr inbounds %struct.regexp_paren_pair, ptr %381, i64 1
  %384 = add nsw i32 %380, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %383, i8 -1, i64 16, i1 false)
  %385 = add i32 %382, 1
  %386 = icmp eq i32 %385, %377
  br i1 %386, label %387, label %379, !llvm.loop !82

387:                                              ; preds = %379, %376
  %388 = phi i32 [ %374, %376 ], [ %384, %379 ]
  %389 = phi ptr [ %370, %376 ], [ %383, %379 ]
  %390 = icmp ult i32 %374, 8
  br i1 %390, label %405, label %391

391:                                              ; preds = %387, %391
  %392 = phi i32 [ %402, %391 ], [ %388, %387 ]
  %393 = phi ptr [ %401, %391 ], [ %389, %387 ]
  %394 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %394, i8 -1, i64 16, i1 false)
  %395 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %395, i8 -1, i64 16, i1 false)
  %396 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %396, i8 -1, i64 16, i1 false)
  %397 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %397, i8 -1, i64 16, i1 false)
  %398 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %398, i8 -1, i64 16, i1 false)
  %399 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %399, i8 -1, i64 16, i1 false)
  %400 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %400, i8 -1, i64 16, i1 false)
  %401 = getelementptr inbounds %struct.regexp_paren_pair, ptr %393, i64 8
  %402 = add nsw i32 %392, -8
  %403 = add i32 %392, -9
  %404 = icmp ult i32 %403, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %401, i8 -1, i64 16, i1 false)
  br i1 %404, label %391, label %405, !llvm.loop !72

405:                                              ; preds = %387, %391, %359
  %406 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %407 = getelementptr inbounds %struct.regexp_internal, ptr %364, i64 1
  %408 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %349, ptr noundef nonnull %407)
  %409 = icmp eq i64 %408, -1
  br i1 %409, label %410, label %417

410:                                              ; preds = %405
  %411 = load ptr, ptr %346, align 8, !tbaa !63
  %412 = icmp eq ptr %411, null
  %413 = select i1 %412, ptr %349, ptr %411
  %414 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %415 = icmp sgt i32 %414, %406
  br i1 %415, label %416, label %421

416:                                              ; preds = %410
  tail call void @Perl_leave_scope(i32 noundef %406) #12
  br label %421

417:                                              ; preds = %405
  %418 = getelementptr inbounds %struct.regexp, ptr %362, i64 0, i32 17
  %419 = load ptr, ptr %418, align 8, !tbaa !64
  %420 = getelementptr inbounds %struct.regexp_paren_pair, ptr %419, i64 0, i32 1
  store i64 %408, ptr %420, align 8, !tbaa !74
  br label %5548

421:                                              ; preds = %410, %416, %353, %348
  %422 = phi ptr [ %413, %410 ], [ %413, %416 ], [ %349, %353 ], [ %349, %348 ]
  %423 = getelementptr inbounds i8, ptr %422, i64 1
  store ptr %423, ptr %6, align 8, !tbaa !35
  %424 = icmp ugt ptr %423, %329
  br i1 %424, label %5550, label %348, !llvm.loop !83

425:                                              ; preds = %337, %500
  %426 = phi ptr [ %2, %337 ], [ %502, %500 ]
  %427 = load i8, ptr %426, align 1, !tbaa !5
  %428 = icmp eq i8 %427, %330
  %429 = icmp eq i8 %427, %333
  %430 = or i1 %428, %429
  br i1 %430, label %431, label %500

431:                                              ; preds = %425
  br i1 %338, label %435, label %432

432:                                              ; preds = %431
  %433 = tail call i32 %318(ptr noundef nonnull %426, ptr noundef nonnull %319, i32 noundef %339) #12, !callees !81
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %500, label %435

435:                                              ; preds = %432, %431
  %436 = load i8, ptr %324, align 8, !tbaa !31, !range !42, !noundef !43
  %437 = icmp eq i8 %436, 0
  br i1 %437, label %438, label %5548

438:                                              ; preds = %435
  %439 = load ptr, ptr %4, align 8, !tbaa !62
  %440 = getelementptr i8, ptr %439, i64 16
  %441 = load ptr, ptr %440, align 8, !tbaa !5
  %442 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 14
  %443 = load ptr, ptr %442, align 8, !tbaa !20
  store ptr null, ptr %340, align 8, !tbaa !63
  %444 = load ptr, ptr %341, align 8, !tbaa !26
  %445 = ptrtoint ptr %426 to i64
  %446 = ptrtoint ptr %444 to i64
  %447 = sub i64 %445, %446
  %448 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 17
  %449 = load ptr, ptr %448, align 8, !tbaa !64
  store i64 %447, ptr %449, align 8, !tbaa !65
  %450 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 15
  store i32 0, ptr %450, align 8, !tbaa !67
  %451 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 16
  store i32 0, ptr %451, align 4, !tbaa !68
  %452 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 12
  %453 = load i32, ptr %452, align 8, !tbaa !69
  %454 = icmp sgt i32 %453, 0
  br i1 %454, label %455, label %484

455:                                              ; preds = %438
  %456 = and i32 %453, 7
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %466, label %458

458:                                              ; preds = %455, %458
  %459 = phi i32 [ %463, %458 ], [ %453, %455 ]
  %460 = phi ptr [ %462, %458 ], [ %449, %455 ]
  %461 = phi i32 [ %464, %458 ], [ 0, %455 ]
  %462 = getelementptr inbounds %struct.regexp_paren_pair, ptr %460, i64 1
  %463 = add nsw i32 %459, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %462, i8 -1, i64 16, i1 false)
  %464 = add i32 %461, 1
  %465 = icmp eq i32 %464, %456
  br i1 %465, label %466, label %458, !llvm.loop !84

466:                                              ; preds = %458, %455
  %467 = phi i32 [ %453, %455 ], [ %463, %458 ]
  %468 = phi ptr [ %449, %455 ], [ %462, %458 ]
  %469 = icmp ult i32 %453, 8
  br i1 %469, label %484, label %470

470:                                              ; preds = %466, %470
  %471 = phi i32 [ %481, %470 ], [ %467, %466 ]
  %472 = phi ptr [ %480, %470 ], [ %468, %466 ]
  %473 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %473, i8 -1, i64 16, i1 false)
  %474 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %474, i8 -1, i64 16, i1 false)
  %475 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %475, i8 -1, i64 16, i1 false)
  %476 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %476, i8 -1, i64 16, i1 false)
  %477 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %477, i8 -1, i64 16, i1 false)
  %478 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %478, i8 -1, i64 16, i1 false)
  %479 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %479, i8 -1, i64 16, i1 false)
  %480 = getelementptr inbounds %struct.regexp_paren_pair, ptr %472, i64 8
  %481 = add nsw i32 %471, -8
  %482 = add i32 %471, -9
  %483 = icmp ult i32 %482, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %480, i8 -1, i64 16, i1 false)
  br i1 %483, label %470, label %484, !llvm.loop !72

484:                                              ; preds = %466, %470, %438
  %485 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %486 = getelementptr inbounds %struct.regexp_internal, ptr %443, i64 1
  %487 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %426, ptr noundef nonnull %486)
  %488 = icmp eq i64 %487, -1
  br i1 %488, label %489, label %496

489:                                              ; preds = %484
  %490 = load ptr, ptr %340, align 8, !tbaa !63
  %491 = icmp eq ptr %490, null
  %492 = select i1 %491, ptr %426, ptr %490
  %493 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %494 = icmp sgt i32 %493, %485
  br i1 %494, label %495, label %500

495:                                              ; preds = %489
  tail call void @Perl_leave_scope(i32 noundef %485) #12
  br label %500

496:                                              ; preds = %484
  %497 = getelementptr inbounds %struct.regexp, ptr %441, i64 0, i32 17
  %498 = load ptr, ptr %497, align 8, !tbaa !64
  %499 = getelementptr inbounds %struct.regexp_paren_pair, ptr %498, i64 0, i32 1
  store i64 %487, ptr %499, align 8, !tbaa !74
  br label %5548

500:                                              ; preds = %489, %495, %425, %432
  %501 = phi ptr [ %492, %489 ], [ %492, %495 ], [ %426, %425 ], [ %426, %432 ]
  %502 = getelementptr inbounds i8, ptr %501, i64 1
  store ptr %502, ptr %6, align 8, !tbaa !35
  %503 = icmp ugt ptr %502, %329
  br i1 %503, label %5550, label %425, !llvm.loop !85

504:                                              ; preds = %309, %312, %311, %303, %302, %299
  %505 = phi i32 [ 1, %299 ], [ 0, %302 ], [ 2, %303 ], [ %310, %309 ], [ 42, %311 ], [ %315, %312 ]
  %506 = getelementptr inbounds %struct.regnode_string, ptr %1, i64 0, i32 3
  %507 = load i8, ptr %1, align 2, !tbaa !59
  %508 = zext i8 %507 to i64
  br i1 %28, label %509, label %513

509:                                              ; preds = %504
  %510 = getelementptr inbounds i8, ptr %506, i64 %508
  %511 = tail call i64 @Perl_utf8_length(ptr noundef nonnull %506, ptr noundef nonnull %510) #12
  %512 = load i8, ptr %23, align 2, !tbaa !22, !range !42
  br label %513

513:                                              ; preds = %504, %509
  %514 = phi i8 [ %512, %509 ], [ %24, %504 ]
  %515 = phi i64 [ %511, %509 ], [ %508, %504 ]
  %516 = select i1 %25, i64 3, i64 2
  %517 = add nsw i64 %516, -1
  %518 = add i64 %517, %515
  %519 = udiv i64 %518, %516
  %520 = icmp eq i8 %514, 0
  br i1 %520, label %555, label %521

521:                                              ; preds = %513
  %522 = ptrtoint ptr %2 to i64
  %523 = icmp ule i64 %516, %518
  %524 = icmp ult ptr %2, %3
  %525 = and i1 %523, %524
  br i1 %525, label %526, label %558

526:                                              ; preds = %521
  %527 = sub nsw i64 0, %519
  br label %528

528:                                              ; preds = %526, %550
  %529 = phi i64 [ %531, %550 ], [ %527, %526 ]
  %530 = phi ptr [ %551, %550 ], [ %3, %526 ]
  %531 = add nsw i64 %529, 1
  %532 = getelementptr inbounds i8, ptr %530, i64 -1
  %533 = load i8, ptr %532, align 1, !tbaa !5
  %534 = icmp slt i8 %533, 0
  %535 = icmp ugt ptr %532, %2
  %536 = and i1 %534, %535
  br i1 %536, label %537, label %550

537:                                              ; preds = %528
  %538 = ptrtoint ptr %530 to i64
  %539 = getelementptr i8, ptr %530, i64 %522
  %540 = sub i64 0, %538
  %541 = getelementptr i8, ptr %539, i64 %540
  br label %542

542:                                              ; preds = %547, %537
  %543 = phi ptr [ %548, %547 ], [ %532, %537 ]
  %544 = load i8, ptr %543, align 1, !tbaa !5
  %545 = and i8 %544, -64
  %546 = icmp eq i8 %545, -128
  br i1 %546, label %547, label %550

547:                                              ; preds = %542
  %548 = getelementptr inbounds i8, ptr %543, i64 -1
  %549 = icmp ugt ptr %548, %2
  br i1 %549, label %542, label %550, !llvm.loop !46

550:                                              ; preds = %547, %542, %528
  %551 = phi ptr [ %532, %528 ], [ %543, %542 ], [ %541, %547 ]
  %552 = icmp ne i64 %531, 0
  %553 = icmp ugt ptr %551, %2
  %554 = and i1 %552, %553
  br i1 %554, label %528, label %558, !llvm.loop !47

555:                                              ; preds = %513
  %556 = sub nsw i64 0, %519
  %557 = getelementptr inbounds i8, ptr %3, i64 %556
  br label %558

558:                                              ; preds = %550, %521, %555
  %559 = phi ptr [ %557, %555 ], [ %3, %521 ], [ %551, %550 ]
  %560 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %561 = load i8, ptr %560, align 8, !tbaa !31, !range !42, !noundef !43
  %562 = icmp eq i8 %561, 0
  %563 = icmp ult ptr %559, %2
  %564 = select i1 %563, ptr %2, ptr %559
  %565 = select i1 %562, ptr %559, ptr %564
  %566 = icmp ult ptr %565, %2
  br i1 %566, label %5550, label %567

567:                                              ; preds = %558
  %568 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %569 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %570

570:                                              ; preds = %567, %650
  %571 = phi ptr [ %2, %567 ], [ %652, %650 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #12
  store ptr %3, ptr %7, align 8, !tbaa !35
  %572 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef %571, ptr noundef nonnull %7, i64 noundef 0, i1 noundef zeroext %25, ptr noundef nonnull %506, ptr noundef null, i64 noundef %508, i1 noundef zeroext %28, i32 noundef %505) #12
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %641, label %574

574:                                              ; preds = %570
  %575 = load i8, ptr %560, align 8, !tbaa !31, !range !42, !noundef !43
  %576 = icmp eq i8 %575, 0
  br i1 %576, label %577, label %649

577:                                              ; preds = %574
  %578 = load ptr, ptr %4, align 8, !tbaa !62
  %579 = getelementptr i8, ptr %578, i64 16
  %580 = load ptr, ptr %579, align 8, !tbaa !5
  %581 = getelementptr inbounds %struct.regexp, ptr %580, i64 0, i32 14
  %582 = load ptr, ptr %581, align 8, !tbaa !20
  store ptr null, ptr %568, align 8, !tbaa !63
  %583 = load ptr, ptr %6, align 8, !tbaa !35
  %584 = load ptr, ptr %569, align 8, !tbaa !26
  %585 = ptrtoint ptr %583 to i64
  %586 = ptrtoint ptr %584 to i64
  %587 = sub i64 %585, %586
  %588 = getelementptr inbounds %struct.regexp, ptr %580, i64 0, i32 17
  %589 = load ptr, ptr %588, align 8, !tbaa !64
  store i64 %587, ptr %589, align 8, !tbaa !65
  %590 = getelementptr inbounds %struct.regexp, ptr %580, i64 0, i32 15
  store i32 0, ptr %590, align 8, !tbaa !67
  %591 = getelementptr inbounds %struct.regexp, ptr %580, i64 0, i32 16
  store i32 0, ptr %591, align 4, !tbaa !68
  %592 = getelementptr inbounds %struct.regexp, ptr %580, i64 0, i32 12
  %593 = load i32, ptr %592, align 8, !tbaa !69
  %594 = icmp sgt i32 %593, 0
  br i1 %594, label %595, label %624

595:                                              ; preds = %577
  %596 = and i32 %593, 7
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %606, label %598

598:                                              ; preds = %595, %598
  %599 = phi i32 [ %603, %598 ], [ %593, %595 ]
  %600 = phi ptr [ %602, %598 ], [ %589, %595 ]
  %601 = phi i32 [ %604, %598 ], [ 0, %595 ]
  %602 = getelementptr inbounds %struct.regexp_paren_pair, ptr %600, i64 1
  %603 = add nsw i32 %599, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %602, i8 -1, i64 16, i1 false)
  %604 = add i32 %601, 1
  %605 = icmp eq i32 %604, %596
  br i1 %605, label %606, label %598, !llvm.loop !86

606:                                              ; preds = %598, %595
  %607 = phi i32 [ %593, %595 ], [ %603, %598 ]
  %608 = phi ptr [ %589, %595 ], [ %602, %598 ]
  %609 = icmp ult i32 %593, 8
  br i1 %609, label %624, label %610

610:                                              ; preds = %606, %610
  %611 = phi i32 [ %621, %610 ], [ %607, %606 ]
  %612 = phi ptr [ %620, %610 ], [ %608, %606 ]
  %613 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %613, i8 -1, i64 16, i1 false)
  %614 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %614, i8 -1, i64 16, i1 false)
  %615 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %615, i8 -1, i64 16, i1 false)
  %616 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %616, i8 -1, i64 16, i1 false)
  %617 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %617, i8 -1, i64 16, i1 false)
  %618 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %618, i8 -1, i64 16, i1 false)
  %619 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %619, i8 -1, i64 16, i1 false)
  %620 = getelementptr inbounds %struct.regexp_paren_pair, ptr %612, i64 8
  %621 = add nsw i32 %611, -8
  %622 = add i32 %611, -9
  %623 = icmp ult i32 %622, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %620, i8 -1, i64 16, i1 false)
  br i1 %623, label %610, label %624, !llvm.loop !72

624:                                              ; preds = %606, %610, %577
  %625 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %626 = getelementptr inbounds %struct.regexp_internal, ptr %582, i64 1
  %627 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %583, ptr noundef nonnull %626)
  %628 = icmp eq i64 %627, -1
  br i1 %628, label %629, label %637

629:                                              ; preds = %624
  %630 = load ptr, ptr %568, align 8, !tbaa !63
  %631 = icmp eq ptr %630, null
  br i1 %631, label %633, label %632

632:                                              ; preds = %629
  store ptr %630, ptr %6, align 8, !tbaa !35
  br label %633

633:                                              ; preds = %632, %629
  %634 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %635 = icmp sgt i32 %634, %625
  br i1 %635, label %636, label %641

636:                                              ; preds = %633
  call void @Perl_leave_scope(i32 noundef %625) #12
  br label %641

637:                                              ; preds = %624
  %638 = getelementptr inbounds %struct.regexp, ptr %580, i64 0, i32 17
  %639 = load ptr, ptr %638, align 8, !tbaa !64
  %640 = getelementptr inbounds %struct.regexp_paren_pair, ptr %639, i64 0, i32 1
  store i64 %627, ptr %640, align 8, !tbaa !74
  br label %649

641:                                              ; preds = %633, %636, %570
  %642 = load ptr, ptr %6, align 8, !tbaa !35
  br i1 %25, label %643, label %650

643:                                              ; preds = %641
  %644 = load i8, ptr %642, align 1, !tbaa !5
  %645 = zext i8 %644 to i64
  %646 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %645
  %647 = load i8, ptr %646, align 1, !tbaa !5
  %648 = zext i8 %647 to i64
  br label %650

649:                                              ; preds = %574, %637
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  br label %5548

650:                                              ; preds = %643, %641
  %651 = phi i64 [ %648, %643 ], [ 1, %641 ]
  %652 = getelementptr inbounds i8, ptr %642, i64 %651
  store ptr %652, ptr %6, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  %653 = icmp ugt ptr %652, %565
  br i1 %653, label %5550, label %570, !llvm.loop !87

654:                                              ; preds = %5
  %655 = load i8, ptr %1, align 2, !tbaa !76
  %656 = icmp eq i8 %655, 0
  br i1 %656, label %660, label %657

657:                                              ; preds = %654
  %658 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !88, !range !42, !noundef !43
  %659 = icmp eq i8 %658, 0
  br i1 %659, label %2558, label %2563

660:                                              ; preds = %654
  %661 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %662 = load ptr, ptr %661, align 8, !tbaa !26
  %663 = icmp eq ptr %662, %2
  br i1 %25, label %664, label %834

664:                                              ; preds = %660
  br i1 %663, label %680, label %665

665:                                              ; preds = %664
  %666 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %662)
  %667 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %668 = load ptr, ptr %667, align 8, !tbaa !27
  %669 = ptrtoint ptr %668 to i64
  %670 = ptrtoint ptr %666 to i64
  %671 = sub i64 %669, %670
  %672 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %673 = xor i1 %672, true
  %674 = zext i1 %673 to i32
  %675 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %666, i64 noundef %671, ptr noundef null, i32 noundef %674) #12
  %676 = trunc i64 %675 to i32
  %677 = icmp slt i32 %676, 256
  br i1 %677, label %678, label %691

678:                                              ; preds = %665
  %679 = icmp ult i32 %676, 128
  br i1 %679, label %680, label %694

680:                                              ; preds = %664, %678
  %681 = phi i32 [ %676, %678 ], [ 10, %664 ]
  %682 = tail call ptr @__ctype_b_loc() #14
  %683 = load ptr, ptr %682, align 8, !tbaa !35
  %684 = zext i32 %681 to i64
  %685 = getelementptr inbounds i16, ptr %683, i64 %684
  %686 = load i16, ptr %685, align 2, !tbaa !89
  %687 = and i16 %686, 8
  %688 = icmp ne i16 %687, 0
  %689 = icmp eq i32 %681, 95
  %690 = or i1 %689, %688
  br label %694

691:                                              ; preds = %665
  %692 = and i64 %675, 4294967295
  %693 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %692) #12
  br label %694

694:                                              ; preds = %678, %680, %691
  %695 = phi i1 [ %693, %691 ], [ false, %678 ], [ %690, %680 ]
  %696 = zext i1 %695 to i32
  %697 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  %698 = icmp eq ptr %697, null
  br i1 %698, label %699, label %703

699:                                              ; preds = %694
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #12
  store i8 4, ptr %8, align 1, !tbaa !5
  %700 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !35
  %701 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %700, ptr noundef nonnull %8) #12
  store ptr %701, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #12
  %702 = load ptr, ptr %6, align 8, !tbaa !35
  br label %703

703:                                              ; preds = %694, %699
  %704 = phi ptr [ %2, %694 ], [ %702, %699 ]
  %705 = icmp ult ptr %704, %3
  br i1 %705, label %706, label %951

706:                                              ; preds = %703
  %707 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %708 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %709

709:                                              ; preds = %706, %824
  %710 = phi ptr [ %704, %706 ], [ %832, %824 ]
  %711 = phi i32 [ %696, %706 ], [ %825, %824 ]
  %712 = load i8, ptr %710, align 1, !tbaa !5
  %713 = icmp sgt i8 %712, -1
  br i1 %713, label %714, label %724

714:                                              ; preds = %709
  %715 = tail call ptr @__ctype_b_loc() #14
  %716 = load ptr, ptr %715, align 8, !tbaa !35
  %717 = zext i8 %712 to i64
  %718 = getelementptr inbounds i16, ptr %716, i64 %717
  %719 = load i16, ptr %718, align 2, !tbaa !89
  %720 = and i16 %719, 8
  %721 = icmp ne i16 %720, 0
  %722 = icmp eq i8 %712, 95
  %723 = or i1 %722, %721
  br label %750

724:                                              ; preds = %709
  %725 = zext i8 %712 to i32
  %726 = and i32 %725, 254
  %727 = icmp eq i32 %726, 194
  br i1 %727, label %728, label %748

728:                                              ; preds = %724
  %729 = and i32 %725, 30
  %730 = icmp eq i32 %729, 0
  br i1 %730, label %731, label %750

731:                                              ; preds = %728
  %732 = shl nuw nsw i32 %725, 6
  %733 = and i32 %732, 1984
  %734 = getelementptr inbounds i8, ptr %710, i64 1
  %735 = load i8, ptr %734, align 1, !tbaa !5
  %736 = and i8 %735, 63
  %737 = zext i8 %736 to i32
  %738 = or i32 %733, %737
  %739 = tail call ptr @__ctype_b_loc() #14
  %740 = load ptr, ptr %739, align 8, !tbaa !35
  %741 = zext i32 %738 to i64
  %742 = getelementptr inbounds i16, ptr %740, i64 %741
  %743 = load i16, ptr %742, align 2, !tbaa !89
  %744 = and i16 %743, 8
  %745 = icmp ne i16 %744, 0
  %746 = icmp eq i32 %738, 95
  %747 = or i1 %746, %745
  br label %750

748:                                              ; preds = %724
  %749 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %710) #12
  br label %750

750:                                              ; preds = %731, %728, %748, %714
  %751 = phi i1 [ %723, %714 ], [ %749, %748 ], [ false, %728 ], [ %747, %731 ]
  %752 = xor i1 %751, true
  %753 = zext i1 %752 to i32
  %754 = icmp eq i32 %711, %753
  br i1 %754, label %755, label %824

755:                                              ; preds = %750
  %756 = load i8, ptr %707, align 8, !tbaa !31, !range !42, !noundef !43
  %757 = icmp eq i8 %756, 0
  br i1 %757, label %758, label %5548

758:                                              ; preds = %755
  %759 = icmp eq i32 %711, 0
  %760 = zext i1 %759 to i32
  %761 = load ptr, ptr %4, align 8, !tbaa !62
  %762 = getelementptr i8, ptr %761, i64 16
  %763 = load ptr, ptr %762, align 8, !tbaa !5
  %764 = getelementptr inbounds %struct.regexp, ptr %763, i64 0, i32 14
  %765 = load ptr, ptr %764, align 8, !tbaa !20
  store ptr null, ptr %708, align 8, !tbaa !63
  %766 = load ptr, ptr %6, align 8, !tbaa !35
  %767 = load ptr, ptr %661, align 8, !tbaa !26
  %768 = ptrtoint ptr %766 to i64
  %769 = ptrtoint ptr %767 to i64
  %770 = sub i64 %768, %769
  %771 = getelementptr inbounds %struct.regexp, ptr %763, i64 0, i32 17
  %772 = load ptr, ptr %771, align 8, !tbaa !64
  store i64 %770, ptr %772, align 8, !tbaa !65
  %773 = getelementptr inbounds %struct.regexp, ptr %763, i64 0, i32 15
  store i32 0, ptr %773, align 8, !tbaa !67
  %774 = getelementptr inbounds %struct.regexp, ptr %763, i64 0, i32 16
  store i32 0, ptr %774, align 4, !tbaa !68
  %775 = getelementptr inbounds %struct.regexp, ptr %763, i64 0, i32 12
  %776 = load i32, ptr %775, align 8, !tbaa !69
  %777 = icmp sgt i32 %776, 0
  br i1 %777, label %778, label %807

778:                                              ; preds = %758
  %779 = and i32 %776, 7
  %780 = icmp eq i32 %779, 0
  br i1 %780, label %789, label %781

781:                                              ; preds = %778, %781
  %782 = phi i32 [ %786, %781 ], [ %776, %778 ]
  %783 = phi ptr [ %785, %781 ], [ %772, %778 ]
  %784 = phi i32 [ %787, %781 ], [ 0, %778 ]
  %785 = getelementptr inbounds %struct.regexp_paren_pair, ptr %783, i64 1
  %786 = add nsw i32 %782, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %785, i8 -1, i64 16, i1 false)
  %787 = add i32 %784, 1
  %788 = icmp eq i32 %787, %779
  br i1 %788, label %789, label %781, !llvm.loop !90

789:                                              ; preds = %781, %778
  %790 = phi i32 [ %776, %778 ], [ %786, %781 ]
  %791 = phi ptr [ %772, %778 ], [ %785, %781 ]
  %792 = icmp ult i32 %776, 8
  br i1 %792, label %807, label %793

793:                                              ; preds = %789, %793
  %794 = phi i32 [ %804, %793 ], [ %790, %789 ]
  %795 = phi ptr [ %803, %793 ], [ %791, %789 ]
  %796 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %796, i8 -1, i64 16, i1 false)
  %797 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %797, i8 -1, i64 16, i1 false)
  %798 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %798, i8 -1, i64 16, i1 false)
  %799 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %799, i8 -1, i64 16, i1 false)
  %800 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %800, i8 -1, i64 16, i1 false)
  %801 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %801, i8 -1, i64 16, i1 false)
  %802 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %802, i8 -1, i64 16, i1 false)
  %803 = getelementptr inbounds %struct.regexp_paren_pair, ptr %795, i64 8
  %804 = add nsw i32 %794, -8
  %805 = add i32 %794, -9
  %806 = icmp ult i32 %805, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %803, i8 -1, i64 16, i1 false)
  br i1 %806, label %793, label %807, !llvm.loop !72

807:                                              ; preds = %789, %793, %758
  %808 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %809 = getelementptr inbounds %struct.regexp_internal, ptr %765, i64 1
  %810 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %766, ptr noundef nonnull %809)
  %811 = icmp eq i64 %810, -1
  br i1 %811, label %812, label %820

812:                                              ; preds = %807
  %813 = load ptr, ptr %708, align 8, !tbaa !63
  %814 = icmp eq ptr %813, null
  br i1 %814, label %816, label %815

815:                                              ; preds = %812
  store ptr %813, ptr %6, align 8, !tbaa !35
  br label %816

816:                                              ; preds = %815, %812
  %817 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %818 = icmp sgt i32 %817, %808
  br i1 %818, label %819, label %824

819:                                              ; preds = %816
  call void @Perl_leave_scope(i32 noundef %808) #12
  br label %824

820:                                              ; preds = %807
  %821 = getelementptr inbounds %struct.regexp, ptr %763, i64 0, i32 17
  %822 = load ptr, ptr %821, align 8, !tbaa !64
  %823 = getelementptr inbounds %struct.regexp_paren_pair, ptr %822, i64 0, i32 1
  store i64 %810, ptr %823, align 8, !tbaa !74
  br label %5548

824:                                              ; preds = %816, %819, %750
  %825 = phi i32 [ %711, %750 ], [ %760, %819 ], [ %760, %816 ]
  %826 = load ptr, ptr %6, align 8, !tbaa !35
  %827 = load i8, ptr %826, align 1, !tbaa !5
  %828 = zext i8 %827 to i64
  %829 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %828
  %830 = load i8, ptr %829, align 1, !tbaa !5
  %831 = zext i8 %830 to i64
  %832 = getelementptr inbounds i8, ptr %826, i64 %831
  store ptr %832, ptr %6, align 8, !tbaa !35
  %833 = icmp ult ptr %832, %3
  br i1 %833, label %709, label %951, !llvm.loop !91

834:                                              ; preds = %660
  br i1 %663, label %840, label %835

835:                                              ; preds = %834
  %836 = getelementptr inbounds i8, ptr %2, i64 -1
  %837 = load i8, ptr %836, align 1, !tbaa !5
  %838 = zext i8 %837 to i32
  %839 = icmp sgt i8 %837, -1
  br i1 %839, label %840, label %852

840:                                              ; preds = %834, %835
  %841 = phi i32 [ %838, %835 ], [ 10, %834 ]
  %842 = tail call ptr @__ctype_b_loc() #14
  %843 = load ptr, ptr %842, align 8, !tbaa !35
  %844 = zext i32 %841 to i64
  %845 = getelementptr inbounds i16, ptr %843, i64 %844
  %846 = load i16, ptr %845, align 2, !tbaa !89
  %847 = and i16 %846, 8
  %848 = icmp ne i16 %847, 0
  %849 = icmp eq i32 %841, 95
  %850 = or i1 %849, %848
  %851 = zext i1 %850 to i32
  br label %852

852:                                              ; preds = %840, %835
  %853 = phi i32 [ 0, %835 ], [ %851, %840 ]
  %854 = icmp ult ptr %2, %3
  br i1 %854, label %855, label %951

855:                                              ; preds = %852
  %856 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %857 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %858

858:                                              ; preds = %855, %946
  %859 = phi i32 [ %853, %855 ], [ %948, %946 ]
  %860 = phi ptr [ %2, %855 ], [ %949, %946 ]
  %861 = load i8, ptr %860, align 1, !tbaa !5
  %862 = icmp sgt i8 %861, -1
  br i1 %862, label %863, label %873

863:                                              ; preds = %858
  %864 = tail call ptr @__ctype_b_loc() #14
  %865 = load ptr, ptr %864, align 8, !tbaa !35
  %866 = zext i8 %861 to i64
  %867 = getelementptr inbounds i16, ptr %865, i64 %866
  %868 = load i16, ptr %867, align 2, !tbaa !89
  %869 = and i16 %868, 8
  %870 = icmp ne i16 %869, 0
  %871 = icmp eq i8 %861, 95
  %872 = or i1 %871, %870
  br label %873

873:                                              ; preds = %863, %858
  %874 = phi i1 [ false, %858 ], [ %872, %863 ]
  %875 = xor i1 %874, true
  %876 = zext i1 %875 to i32
  %877 = icmp eq i32 %859, %876
  br i1 %877, label %878, label %946

878:                                              ; preds = %873
  %879 = load i8, ptr %856, align 8, !tbaa !31, !range !42, !noundef !43
  %880 = icmp eq i8 %879, 0
  br i1 %880, label %881, label %5548

881:                                              ; preds = %878
  %882 = load ptr, ptr %4, align 8, !tbaa !62
  %883 = getelementptr i8, ptr %882, i64 16
  %884 = load ptr, ptr %883, align 8, !tbaa !5
  %885 = getelementptr inbounds %struct.regexp, ptr %884, i64 0, i32 14
  %886 = load ptr, ptr %885, align 8, !tbaa !20
  store ptr null, ptr %857, align 8, !tbaa !63
  %887 = load ptr, ptr %661, align 8, !tbaa !26
  %888 = ptrtoint ptr %860 to i64
  %889 = ptrtoint ptr %887 to i64
  %890 = sub i64 %888, %889
  %891 = getelementptr inbounds %struct.regexp, ptr %884, i64 0, i32 17
  %892 = load ptr, ptr %891, align 8, !tbaa !64
  store i64 %890, ptr %892, align 8, !tbaa !65
  %893 = getelementptr inbounds %struct.regexp, ptr %884, i64 0, i32 15
  store i32 0, ptr %893, align 8, !tbaa !67
  %894 = getelementptr inbounds %struct.regexp, ptr %884, i64 0, i32 16
  store i32 0, ptr %894, align 4, !tbaa !68
  %895 = getelementptr inbounds %struct.regexp, ptr %884, i64 0, i32 12
  %896 = load i32, ptr %895, align 8, !tbaa !69
  %897 = icmp sgt i32 %896, 0
  br i1 %897, label %898, label %927

898:                                              ; preds = %881
  %899 = and i32 %896, 7
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %909, label %901

901:                                              ; preds = %898, %901
  %902 = phi i32 [ %906, %901 ], [ %896, %898 ]
  %903 = phi ptr [ %905, %901 ], [ %892, %898 ]
  %904 = phi i32 [ %907, %901 ], [ 0, %898 ]
  %905 = getelementptr inbounds %struct.regexp_paren_pair, ptr %903, i64 1
  %906 = add nsw i32 %902, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %905, i8 -1, i64 16, i1 false)
  %907 = add i32 %904, 1
  %908 = icmp eq i32 %907, %899
  br i1 %908, label %909, label %901, !llvm.loop !92

909:                                              ; preds = %901, %898
  %910 = phi i32 [ %896, %898 ], [ %906, %901 ]
  %911 = phi ptr [ %892, %898 ], [ %905, %901 ]
  %912 = icmp ult i32 %896, 8
  br i1 %912, label %927, label %913

913:                                              ; preds = %909, %913
  %914 = phi i32 [ %924, %913 ], [ %910, %909 ]
  %915 = phi ptr [ %923, %913 ], [ %911, %909 ]
  %916 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %916, i8 -1, i64 16, i1 false)
  %917 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %917, i8 -1, i64 16, i1 false)
  %918 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %918, i8 -1, i64 16, i1 false)
  %919 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %919, i8 -1, i64 16, i1 false)
  %920 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %920, i8 -1, i64 16, i1 false)
  %921 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %921, i8 -1, i64 16, i1 false)
  %922 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %922, i8 -1, i64 16, i1 false)
  %923 = getelementptr inbounds %struct.regexp_paren_pair, ptr %915, i64 8
  %924 = add nsw i32 %914, -8
  %925 = add i32 %914, -9
  %926 = icmp ult i32 %925, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %923, i8 -1, i64 16, i1 false)
  br i1 %926, label %913, label %927, !llvm.loop !72

927:                                              ; preds = %909, %913, %881
  %928 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %929 = getelementptr inbounds %struct.regexp_internal, ptr %886, i64 1
  %930 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %860, ptr noundef nonnull %929)
  %931 = icmp eq i64 %930, -1
  br i1 %931, label %932, label %939

932:                                              ; preds = %927
  %933 = load ptr, ptr %857, align 8, !tbaa !63
  %934 = icmp eq ptr %933, null
  %935 = select i1 %934, ptr %860, ptr %933
  %936 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %937 = icmp sgt i32 %936, %928
  br i1 %937, label %938, label %943

938:                                              ; preds = %932
  tail call void @Perl_leave_scope(i32 noundef %928) #12
  br label %943

939:                                              ; preds = %927
  %940 = getelementptr inbounds %struct.regexp, ptr %884, i64 0, i32 17
  %941 = load ptr, ptr %940, align 8, !tbaa !64
  %942 = getelementptr inbounds %struct.regexp_paren_pair, ptr %941, i64 0, i32 1
  store i64 %930, ptr %942, align 8, !tbaa !74
  br label %5548

943:                                              ; preds = %938, %932
  %944 = icmp eq i32 %859, 0
  %945 = zext i1 %944 to i32
  br label %946

946:                                              ; preds = %873, %943
  %947 = phi ptr [ %935, %943 ], [ %860, %873 ]
  %948 = phi i32 [ %945, %943 ], [ %859, %873 ]
  %949 = getelementptr inbounds i8, ptr %947, i64 1
  store ptr %949, ptr %6, align 8, !tbaa !35
  %950 = icmp ult ptr %949, %3
  br i1 %950, label %858, label %951, !llvm.loop !93

951:                                              ; preds = %946, %824, %852, %703
  %952 = phi i32 [ %696, %703 ], [ %853, %852 ], [ %825, %824 ], [ %948, %946 ]
  %953 = tail call ptr @__ctype_b_loc() #14
  %954 = load ptr, ptr %953, align 8, !tbaa !35
  %955 = getelementptr inbounds i16, ptr %954, i64 10
  %956 = load i16, ptr %955, align 2, !tbaa !89
  %957 = and i16 %956, 8
  %958 = icmp eq i16 %957, 0
  %959 = zext i1 %958 to i32
  %960 = icmp eq i32 %952, %959
  br i1 %960, label %961, label %5550

961:                                              ; preds = %951
  %962 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %963 = load i8, ptr %962, align 8, !tbaa !31, !range !42, !noundef !43
  %964 = icmp eq i8 %963, 0
  br i1 %964, label %965, label %5548

965:                                              ; preds = %961
  %966 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %967 = icmp eq i32 %966, 0
  br i1 %967, label %5550, label %5548

968:                                              ; preds = %5
  %969 = load i8, ptr %1, align 2, !tbaa !76
  %970 = icmp eq i8 %969, 0
  br i1 %970, label %974, label %971

971:                                              ; preds = %968
  %972 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !88, !range !42, !noundef !43
  %973 = icmp eq i8 %972, 0
  br i1 %973, label %2558, label %2563

974:                                              ; preds = %968
  %975 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %976 = load ptr, ptr %975, align 8, !tbaa !26
  %977 = icmp eq ptr %976, %2
  br i1 %25, label %978, label %1149

978:                                              ; preds = %974
  br i1 %977, label %994, label %979

979:                                              ; preds = %978
  %980 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %976)
  %981 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %982 = load ptr, ptr %981, align 8, !tbaa !27
  %983 = ptrtoint ptr %982 to i64
  %984 = ptrtoint ptr %980 to i64
  %985 = sub i64 %983, %984
  %986 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %987 = xor i1 %986, true
  %988 = zext i1 %987 to i32
  %989 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %980, i64 noundef %985, ptr noundef null, i32 noundef %988) #12
  %990 = trunc i64 %989 to i32
  %991 = icmp slt i32 %990, 256
  br i1 %991, label %992, label %1005

992:                                              ; preds = %979
  %993 = icmp ult i32 %990, 128
  br i1 %993, label %994, label %1008

994:                                              ; preds = %978, %992
  %995 = phi i32 [ %990, %992 ], [ 10, %978 ]
  %996 = tail call ptr @__ctype_b_loc() #14
  %997 = load ptr, ptr %996, align 8, !tbaa !35
  %998 = zext i32 %995 to i64
  %999 = getelementptr inbounds i16, ptr %997, i64 %998
  %1000 = load i16, ptr %999, align 2, !tbaa !89
  %1001 = and i16 %1000, 8
  %1002 = icmp ne i16 %1001, 0
  %1003 = icmp eq i32 %995, 95
  %1004 = or i1 %1003, %1002
  br label %1008

1005:                                             ; preds = %979
  %1006 = and i64 %989, 4294967295
  %1007 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %1006) #12
  br label %1008

1008:                                             ; preds = %992, %994, %1005
  %1009 = phi i1 [ %1007, %1005 ], [ false, %992 ], [ %1004, %994 ]
  %1010 = zext i1 %1009 to i32
  %1011 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  %1012 = icmp eq ptr %1011, null
  br i1 %1012, label %1013, label %1017

1013:                                             ; preds = %1008
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9) #12
  store i8 4, ptr %9, align 1, !tbaa !5
  %1014 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !35
  %1015 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1014, ptr noundef nonnull %9) #12
  store ptr %1015, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9) #12
  %1016 = load ptr, ptr %6, align 8, !tbaa !35
  br label %1017

1017:                                             ; preds = %1008, %1013
  %1018 = phi ptr [ %2, %1008 ], [ %1016, %1013 ]
  %1019 = icmp ult ptr %1018, %3
  br i1 %1019, label %1020, label %1266

1020:                                             ; preds = %1017
  %1021 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1022 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1023

1023:                                             ; preds = %1020, %1139
  %1024 = phi ptr [ %1018, %1020 ], [ %1147, %1139 ]
  %1025 = phi i32 [ %1010, %1020 ], [ %1140, %1139 ]
  %1026 = load i8, ptr %1024, align 1, !tbaa !5
  %1027 = icmp sgt i8 %1026, -1
  br i1 %1027, label %1028, label %1038

1028:                                             ; preds = %1023
  %1029 = tail call ptr @__ctype_b_loc() #14
  %1030 = load ptr, ptr %1029, align 8, !tbaa !35
  %1031 = zext i8 %1026 to i64
  %1032 = getelementptr inbounds i16, ptr %1030, i64 %1031
  %1033 = load i16, ptr %1032, align 2, !tbaa !89
  %1034 = and i16 %1033, 8
  %1035 = icmp ne i16 %1034, 0
  %1036 = icmp eq i8 %1026, 95
  %1037 = or i1 %1036, %1035
  br label %1064

1038:                                             ; preds = %1023
  %1039 = zext i8 %1026 to i32
  %1040 = and i32 %1039, 254
  %1041 = icmp eq i32 %1040, 194
  br i1 %1041, label %1042, label %1062

1042:                                             ; preds = %1038
  %1043 = and i32 %1039, 30
  %1044 = icmp eq i32 %1043, 0
  br i1 %1044, label %1045, label %1064

1045:                                             ; preds = %1042
  %1046 = shl nuw nsw i32 %1039, 6
  %1047 = and i32 %1046, 1984
  %1048 = getelementptr inbounds i8, ptr %1024, i64 1
  %1049 = load i8, ptr %1048, align 1, !tbaa !5
  %1050 = and i8 %1049, 63
  %1051 = zext i8 %1050 to i32
  %1052 = or i32 %1047, %1051
  %1053 = tail call ptr @__ctype_b_loc() #14
  %1054 = load ptr, ptr %1053, align 8, !tbaa !35
  %1055 = zext i32 %1052 to i64
  %1056 = getelementptr inbounds i16, ptr %1054, i64 %1055
  %1057 = load i16, ptr %1056, align 2, !tbaa !89
  %1058 = and i16 %1057, 8
  %1059 = icmp ne i16 %1058, 0
  %1060 = icmp eq i32 %1052, 95
  %1061 = or i1 %1060, %1059
  br label %1064

1062:                                             ; preds = %1038
  %1063 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1024) #12
  br label %1064

1064:                                             ; preds = %1045, %1042, %1062, %1028
  %1065 = phi i1 [ %1037, %1028 ], [ %1063, %1062 ], [ false, %1042 ], [ %1061, %1045 ]
  %1066 = xor i1 %1065, true
  %1067 = zext i1 %1066 to i32
  %1068 = icmp eq i32 %1025, %1067
  br i1 %1068, label %1069, label %1072

1069:                                             ; preds = %1064
  %1070 = icmp eq i32 %1025, 0
  %1071 = zext i1 %1070 to i32
  br label %1139

1072:                                             ; preds = %1064
  %1073 = load i8, ptr %1021, align 8, !tbaa !31, !range !42, !noundef !43
  %1074 = icmp eq i8 %1073, 0
  br i1 %1074, label %1075, label %5548

1075:                                             ; preds = %1072
  %1076 = load ptr, ptr %4, align 8, !tbaa !62
  %1077 = getelementptr i8, ptr %1076, i64 16
  %1078 = load ptr, ptr %1077, align 8, !tbaa !5
  %1079 = getelementptr inbounds %struct.regexp, ptr %1078, i64 0, i32 14
  %1080 = load ptr, ptr %1079, align 8, !tbaa !20
  store ptr null, ptr %1022, align 8, !tbaa !63
  %1081 = load ptr, ptr %6, align 8, !tbaa !35
  %1082 = load ptr, ptr %975, align 8, !tbaa !26
  %1083 = ptrtoint ptr %1081 to i64
  %1084 = ptrtoint ptr %1082 to i64
  %1085 = sub i64 %1083, %1084
  %1086 = getelementptr inbounds %struct.regexp, ptr %1078, i64 0, i32 17
  %1087 = load ptr, ptr %1086, align 8, !tbaa !64
  store i64 %1085, ptr %1087, align 8, !tbaa !65
  %1088 = getelementptr inbounds %struct.regexp, ptr %1078, i64 0, i32 15
  store i32 0, ptr %1088, align 8, !tbaa !67
  %1089 = getelementptr inbounds %struct.regexp, ptr %1078, i64 0, i32 16
  store i32 0, ptr %1089, align 4, !tbaa !68
  %1090 = getelementptr inbounds %struct.regexp, ptr %1078, i64 0, i32 12
  %1091 = load i32, ptr %1090, align 8, !tbaa !69
  %1092 = icmp sgt i32 %1091, 0
  br i1 %1092, label %1093, label %1122

1093:                                             ; preds = %1075
  %1094 = and i32 %1091, 7
  %1095 = icmp eq i32 %1094, 0
  br i1 %1095, label %1104, label %1096

1096:                                             ; preds = %1093, %1096
  %1097 = phi i32 [ %1101, %1096 ], [ %1091, %1093 ]
  %1098 = phi ptr [ %1100, %1096 ], [ %1087, %1093 ]
  %1099 = phi i32 [ %1102, %1096 ], [ 0, %1093 ]
  %1100 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1098, i64 1
  %1101 = add nsw i32 %1097, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1100, i8 -1, i64 16, i1 false)
  %1102 = add i32 %1099, 1
  %1103 = icmp eq i32 %1102, %1094
  br i1 %1103, label %1104, label %1096, !llvm.loop !95

1104:                                             ; preds = %1096, %1093
  %1105 = phi i32 [ %1091, %1093 ], [ %1101, %1096 ]
  %1106 = phi ptr [ %1087, %1093 ], [ %1100, %1096 ]
  %1107 = icmp ult i32 %1091, 8
  br i1 %1107, label %1122, label %1108

1108:                                             ; preds = %1104, %1108
  %1109 = phi i32 [ %1119, %1108 ], [ %1105, %1104 ]
  %1110 = phi ptr [ %1118, %1108 ], [ %1106, %1104 ]
  %1111 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1111, i8 -1, i64 16, i1 false)
  %1112 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1112, i8 -1, i64 16, i1 false)
  %1113 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1113, i8 -1, i64 16, i1 false)
  %1114 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1114, i8 -1, i64 16, i1 false)
  %1115 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1115, i8 -1, i64 16, i1 false)
  %1116 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1116, i8 -1, i64 16, i1 false)
  %1117 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1117, i8 -1, i64 16, i1 false)
  %1118 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1110, i64 8
  %1119 = add nsw i32 %1109, -8
  %1120 = add i32 %1109, -9
  %1121 = icmp ult i32 %1120, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1118, i8 -1, i64 16, i1 false)
  br i1 %1121, label %1108, label %1122, !llvm.loop !72

1122:                                             ; preds = %1104, %1108, %1075
  %1123 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1124 = getelementptr inbounds %struct.regexp_internal, ptr %1080, i64 1
  %1125 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %1081, ptr noundef nonnull %1124)
  %1126 = icmp eq i64 %1125, -1
  br i1 %1126, label %1127, label %1135

1127:                                             ; preds = %1122
  %1128 = load ptr, ptr %1022, align 8, !tbaa !63
  %1129 = icmp eq ptr %1128, null
  br i1 %1129, label %1131, label %1130

1130:                                             ; preds = %1127
  store ptr %1128, ptr %6, align 8, !tbaa !35
  br label %1131

1131:                                             ; preds = %1130, %1127
  %1132 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1133 = icmp sgt i32 %1132, %1123
  br i1 %1133, label %1134, label %1139

1134:                                             ; preds = %1131
  call void @Perl_leave_scope(i32 noundef %1123) #12
  br label %1139

1135:                                             ; preds = %1122
  %1136 = getelementptr inbounds %struct.regexp, ptr %1078, i64 0, i32 17
  %1137 = load ptr, ptr %1136, align 8, !tbaa !64
  %1138 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1137, i64 0, i32 1
  store i64 %1125, ptr %1138, align 8, !tbaa !74
  br label %5548

1139:                                             ; preds = %1131, %1134, %1069
  %1140 = phi i32 [ %1071, %1069 ], [ %1025, %1134 ], [ %1025, %1131 ]
  %1141 = load ptr, ptr %6, align 8, !tbaa !35
  %1142 = load i8, ptr %1141, align 1, !tbaa !5
  %1143 = zext i8 %1142 to i64
  %1144 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1143
  %1145 = load i8, ptr %1144, align 1, !tbaa !5
  %1146 = zext i8 %1145 to i64
  %1147 = getelementptr inbounds i8, ptr %1141, i64 %1146
  store ptr %1147, ptr %6, align 8, !tbaa !35
  %1148 = icmp ult ptr %1147, %3
  br i1 %1148, label %1023, label %1266, !llvm.loop !96

1149:                                             ; preds = %974
  br i1 %977, label %1155, label %1150

1150:                                             ; preds = %1149
  %1151 = getelementptr inbounds i8, ptr %2, i64 -1
  %1152 = load i8, ptr %1151, align 1, !tbaa !5
  %1153 = zext i8 %1152 to i32
  %1154 = icmp sgt i8 %1152, -1
  br i1 %1154, label %1155, label %1167

1155:                                             ; preds = %1149, %1150
  %1156 = phi i32 [ %1153, %1150 ], [ 10, %1149 ]
  %1157 = tail call ptr @__ctype_b_loc() #14
  %1158 = load ptr, ptr %1157, align 8, !tbaa !35
  %1159 = zext i32 %1156 to i64
  %1160 = getelementptr inbounds i16, ptr %1158, i64 %1159
  %1161 = load i16, ptr %1160, align 2, !tbaa !89
  %1162 = and i16 %1161, 8
  %1163 = icmp ne i16 %1162, 0
  %1164 = icmp eq i32 %1156, 95
  %1165 = or i1 %1164, %1163
  %1166 = zext i1 %1165 to i32
  br label %1167

1167:                                             ; preds = %1155, %1150
  %1168 = phi i32 [ 0, %1150 ], [ %1166, %1155 ]
  %1169 = icmp ult ptr %2, %3
  br i1 %1169, label %1170, label %1266

1170:                                             ; preds = %1167
  %1171 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1172 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1173

1173:                                             ; preds = %1170, %1261
  %1174 = phi i32 [ %1168, %1170 ], [ %1263, %1261 ]
  %1175 = phi ptr [ %2, %1170 ], [ %1264, %1261 ]
  %1176 = load i8, ptr %1175, align 1, !tbaa !5
  %1177 = icmp sgt i8 %1176, -1
  br i1 %1177, label %1178, label %1188

1178:                                             ; preds = %1173
  %1179 = tail call ptr @__ctype_b_loc() #14
  %1180 = load ptr, ptr %1179, align 8, !tbaa !35
  %1181 = zext i8 %1176 to i64
  %1182 = getelementptr inbounds i16, ptr %1180, i64 %1181
  %1183 = load i16, ptr %1182, align 2, !tbaa !89
  %1184 = and i16 %1183, 8
  %1185 = icmp ne i16 %1184, 0
  %1186 = icmp eq i8 %1176, 95
  %1187 = or i1 %1186, %1185
  br label %1188

1188:                                             ; preds = %1178, %1173
  %1189 = phi i1 [ false, %1173 ], [ %1187, %1178 ]
  %1190 = xor i1 %1189, true
  %1191 = zext i1 %1190 to i32
  %1192 = icmp eq i32 %1174, %1191
  br i1 %1192, label %1193, label %1196

1193:                                             ; preds = %1188
  %1194 = icmp eq i32 %1174, 0
  %1195 = zext i1 %1194 to i32
  br label %1261

1196:                                             ; preds = %1188
  %1197 = load i8, ptr %1171, align 8, !tbaa !31, !range !42, !noundef !43
  %1198 = icmp eq i8 %1197, 0
  br i1 %1198, label %1199, label %5548

1199:                                             ; preds = %1196
  %1200 = load ptr, ptr %4, align 8, !tbaa !62
  %1201 = getelementptr i8, ptr %1200, i64 16
  %1202 = load ptr, ptr %1201, align 8, !tbaa !5
  %1203 = getelementptr inbounds %struct.regexp, ptr %1202, i64 0, i32 14
  %1204 = load ptr, ptr %1203, align 8, !tbaa !20
  store ptr null, ptr %1172, align 8, !tbaa !63
  %1205 = load ptr, ptr %975, align 8, !tbaa !26
  %1206 = ptrtoint ptr %1175 to i64
  %1207 = ptrtoint ptr %1205 to i64
  %1208 = sub i64 %1206, %1207
  %1209 = getelementptr inbounds %struct.regexp, ptr %1202, i64 0, i32 17
  %1210 = load ptr, ptr %1209, align 8, !tbaa !64
  store i64 %1208, ptr %1210, align 8, !tbaa !65
  %1211 = getelementptr inbounds %struct.regexp, ptr %1202, i64 0, i32 15
  store i32 0, ptr %1211, align 8, !tbaa !67
  %1212 = getelementptr inbounds %struct.regexp, ptr %1202, i64 0, i32 16
  store i32 0, ptr %1212, align 4, !tbaa !68
  %1213 = getelementptr inbounds %struct.regexp, ptr %1202, i64 0, i32 12
  %1214 = load i32, ptr %1213, align 8, !tbaa !69
  %1215 = icmp sgt i32 %1214, 0
  br i1 %1215, label %1216, label %1245

1216:                                             ; preds = %1199
  %1217 = and i32 %1214, 7
  %1218 = icmp eq i32 %1217, 0
  br i1 %1218, label %1227, label %1219

1219:                                             ; preds = %1216, %1219
  %1220 = phi i32 [ %1224, %1219 ], [ %1214, %1216 ]
  %1221 = phi ptr [ %1223, %1219 ], [ %1210, %1216 ]
  %1222 = phi i32 [ %1225, %1219 ], [ 0, %1216 ]
  %1223 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1221, i64 1
  %1224 = add nsw i32 %1220, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1223, i8 -1, i64 16, i1 false)
  %1225 = add i32 %1222, 1
  %1226 = icmp eq i32 %1225, %1217
  br i1 %1226, label %1227, label %1219, !llvm.loop !97

1227:                                             ; preds = %1219, %1216
  %1228 = phi i32 [ %1214, %1216 ], [ %1224, %1219 ]
  %1229 = phi ptr [ %1210, %1216 ], [ %1223, %1219 ]
  %1230 = icmp ult i32 %1214, 8
  br i1 %1230, label %1245, label %1231

1231:                                             ; preds = %1227, %1231
  %1232 = phi i32 [ %1242, %1231 ], [ %1228, %1227 ]
  %1233 = phi ptr [ %1241, %1231 ], [ %1229, %1227 ]
  %1234 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1234, i8 -1, i64 16, i1 false)
  %1235 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1235, i8 -1, i64 16, i1 false)
  %1236 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1236, i8 -1, i64 16, i1 false)
  %1237 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1237, i8 -1, i64 16, i1 false)
  %1238 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1238, i8 -1, i64 16, i1 false)
  %1239 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1239, i8 -1, i64 16, i1 false)
  %1240 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1240, i8 -1, i64 16, i1 false)
  %1241 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1233, i64 8
  %1242 = add nsw i32 %1232, -8
  %1243 = add i32 %1232, -9
  %1244 = icmp ult i32 %1243, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1241, i8 -1, i64 16, i1 false)
  br i1 %1244, label %1231, label %1245, !llvm.loop !72

1245:                                             ; preds = %1227, %1231, %1199
  %1246 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1247 = getelementptr inbounds %struct.regexp_internal, ptr %1204, i64 1
  %1248 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1175, ptr noundef nonnull %1247)
  %1249 = icmp eq i64 %1248, -1
  br i1 %1249, label %1250, label %1257

1250:                                             ; preds = %1245
  %1251 = load ptr, ptr %1172, align 8, !tbaa !63
  %1252 = icmp eq ptr %1251, null
  %1253 = select i1 %1252, ptr %1175, ptr %1251
  %1254 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1255 = icmp sgt i32 %1254, %1246
  br i1 %1255, label %1256, label %1261

1256:                                             ; preds = %1250
  tail call void @Perl_leave_scope(i32 noundef %1246) #12
  br label %1261

1257:                                             ; preds = %1245
  %1258 = getelementptr inbounds %struct.regexp, ptr %1202, i64 0, i32 17
  %1259 = load ptr, ptr %1258, align 8, !tbaa !64
  %1260 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1259, i64 0, i32 1
  store i64 %1248, ptr %1260, align 8, !tbaa !74
  br label %5548

1261:                                             ; preds = %1250, %1256, %1193
  %1262 = phi ptr [ %1175, %1193 ], [ %1253, %1256 ], [ %1253, %1250 ]
  %1263 = phi i32 [ %1195, %1193 ], [ %1174, %1256 ], [ %1174, %1250 ]
  %1264 = getelementptr inbounds i8, ptr %1262, i64 1
  store ptr %1264, ptr %6, align 8, !tbaa !35
  %1265 = icmp ult ptr %1264, %3
  br i1 %1265, label %1173, label %1266, !llvm.loop !98

1266:                                             ; preds = %1261, %1139, %1167, %1017
  %1267 = phi i32 [ %1010, %1017 ], [ %1168, %1167 ], [ %1140, %1139 ], [ %1263, %1261 ]
  %1268 = tail call ptr @__ctype_b_loc() #14
  %1269 = load ptr, ptr %1268, align 8, !tbaa !35
  %1270 = getelementptr inbounds i16, ptr %1269, i64 10
  %1271 = load i16, ptr %1270, align 2, !tbaa !89
  %1272 = and i16 %1271, 8
  %1273 = icmp eq i16 %1272, 0
  %1274 = zext i1 %1273 to i32
  %1275 = icmp eq i32 %1267, %1274
  br i1 %1275, label %5550, label %1276

1276:                                             ; preds = %1266
  %1277 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1278 = load i8, ptr %1277, align 8, !tbaa !31, !range !42, !noundef !43
  %1279 = icmp eq i8 %1278, 0
  br i1 %1279, label %1280, label %5548

1280:                                             ; preds = %1276
  %1281 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %1282 = icmp eq i32 %1281, 0
  br i1 %1282, label %5550, label %5548

1283:                                             ; preds = %5
  %1284 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %1285 = load ptr, ptr %1284, align 8, !tbaa !26
  %1286 = icmp eq ptr %1285, %2
  br i1 %25, label %1287, label %1444

1287:                                             ; preds = %1283
  br i1 %1286, label %1303, label %1288

1288:                                             ; preds = %1287
  %1289 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %1285)
  %1290 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %1291 = load ptr, ptr %1290, align 8, !tbaa !27
  %1292 = ptrtoint ptr %1291 to i64
  %1293 = ptrtoint ptr %1289 to i64
  %1294 = sub i64 %1292, %1293
  %1295 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %1296 = xor i1 %1295, true
  %1297 = zext i1 %1296 to i32
  %1298 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %1289, i64 noundef %1294, ptr noundef null, i32 noundef %1297) #12
  %1299 = trunc i64 %1298 to i32
  %1300 = icmp slt i32 %1299, 256
  br i1 %1300, label %1301, label %1309

1301:                                             ; preds = %1288
  %1302 = icmp ult i32 %1299, 256
  br i1 %1302, label %1303, label %1313

1303:                                             ; preds = %1287, %1301
  %1304 = phi i64 [ %1298, %1301 ], [ 10, %1287 ]
  %1305 = and i64 %1304, 4294967295
  %1306 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1305
  %1307 = load i32, ptr %1306, align 4, !tbaa !73
  %1308 = and i32 %1307, 1
  br label %1313

1309:                                             ; preds = %1288
  %1310 = and i64 %1298, 4294967295
  %1311 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %1310) #12
  %1312 = zext i1 %1311 to i32
  br label %1313

1313:                                             ; preds = %1301, %1303, %1309
  %1314 = phi i32 [ %1312, %1309 ], [ 0, %1301 ], [ %1308, %1303 ]
  %1315 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  %1316 = icmp eq ptr %1315, null
  br i1 %1316, label %1317, label %1321

1317:                                             ; preds = %1313
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10) #12
  store i8 4, ptr %10, align 1, !tbaa !5
  %1318 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !35
  %1319 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1318, ptr noundef nonnull %10) #12
  store ptr %1319, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10) #12
  %1320 = load ptr, ptr %6, align 8, !tbaa !35
  br label %1321

1321:                                             ; preds = %1313, %1317
  %1322 = phi ptr [ %2, %1313 ], [ %1320, %1317 ]
  %1323 = icmp ult ptr %1322, %3
  br i1 %1323, label %1324, label %1544

1324:                                             ; preds = %1321
  %1325 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1326 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1327

1327:                                             ; preds = %1324, %1434
  %1328 = phi ptr [ %1322, %1324 ], [ %1442, %1434 ]
  %1329 = phi i32 [ %1314, %1324 ], [ %1435, %1434 ]
  %1330 = load i8, ptr %1328, align 1, !tbaa !5
  %1331 = icmp sgt i8 %1330, -1
  br i1 %1331, label %1332, label %1337

1332:                                             ; preds = %1327
  %1333 = zext i8 %1330 to i64
  %1334 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1333
  %1335 = load i32, ptr %1334, align 4, !tbaa !73
  %1336 = and i32 %1335, 1
  br label %1361

1337:                                             ; preds = %1327
  %1338 = zext i8 %1330 to i32
  %1339 = and i32 %1338, 254
  %1340 = icmp eq i32 %1339, 194
  br i1 %1340, label %1341, label %1358

1341:                                             ; preds = %1337
  %1342 = and i32 %1338, 28
  %1343 = icmp eq i32 %1342, 0
  br i1 %1343, label %1344, label %1355

1344:                                             ; preds = %1341
  %1345 = shl i8 %1330, 6
  %1346 = getelementptr inbounds i8, ptr %1328, i64 1
  %1347 = load i8, ptr %1346, align 1, !tbaa !5
  %1348 = and i8 %1347, 63
  %1349 = or i8 %1348, %1345
  %1350 = zext i8 %1349 to i64
  %1351 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1350
  %1352 = load i32, ptr %1351, align 4, !tbaa !73
  %1353 = and i32 %1352, 1
  %1354 = icmp ne i32 %1353, 0
  br label %1355

1355:                                             ; preds = %1344, %1341
  %1356 = phi i1 [ false, %1341 ], [ %1354, %1344 ]
  %1357 = zext i1 %1356 to i32
  br label %1361

1358:                                             ; preds = %1337
  %1359 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1328) #12
  %1360 = zext i1 %1359 to i32
  br label %1361

1361:                                             ; preds = %1355, %1358, %1332
  %1362 = phi i32 [ %1336, %1332 ], [ %1357, %1355 ], [ %1360, %1358 ]
  %1363 = xor i32 %1362, 1
  %1364 = icmp eq i32 %1329, %1363
  br i1 %1364, label %1365, label %1434

1365:                                             ; preds = %1361
  %1366 = load i8, ptr %1325, align 8, !tbaa !31, !range !42, !noundef !43
  %1367 = icmp eq i8 %1366, 0
  br i1 %1367, label %1368, label %5548

1368:                                             ; preds = %1365
  %1369 = icmp eq i32 %1329, 0
  %1370 = zext i1 %1369 to i32
  %1371 = load ptr, ptr %4, align 8, !tbaa !62
  %1372 = getelementptr i8, ptr %1371, i64 16
  %1373 = load ptr, ptr %1372, align 8, !tbaa !5
  %1374 = getelementptr inbounds %struct.regexp, ptr %1373, i64 0, i32 14
  %1375 = load ptr, ptr %1374, align 8, !tbaa !20
  store ptr null, ptr %1326, align 8, !tbaa !63
  %1376 = load ptr, ptr %6, align 8, !tbaa !35
  %1377 = load ptr, ptr %1284, align 8, !tbaa !26
  %1378 = ptrtoint ptr %1376 to i64
  %1379 = ptrtoint ptr %1377 to i64
  %1380 = sub i64 %1378, %1379
  %1381 = getelementptr inbounds %struct.regexp, ptr %1373, i64 0, i32 17
  %1382 = load ptr, ptr %1381, align 8, !tbaa !64
  store i64 %1380, ptr %1382, align 8, !tbaa !65
  %1383 = getelementptr inbounds %struct.regexp, ptr %1373, i64 0, i32 15
  store i32 0, ptr %1383, align 8, !tbaa !67
  %1384 = getelementptr inbounds %struct.regexp, ptr %1373, i64 0, i32 16
  store i32 0, ptr %1384, align 4, !tbaa !68
  %1385 = getelementptr inbounds %struct.regexp, ptr %1373, i64 0, i32 12
  %1386 = load i32, ptr %1385, align 8, !tbaa !69
  %1387 = icmp sgt i32 %1386, 0
  br i1 %1387, label %1388, label %1417

1388:                                             ; preds = %1368
  %1389 = and i32 %1386, 7
  %1390 = icmp eq i32 %1389, 0
  br i1 %1390, label %1399, label %1391

1391:                                             ; preds = %1388, %1391
  %1392 = phi i32 [ %1396, %1391 ], [ %1386, %1388 ]
  %1393 = phi ptr [ %1395, %1391 ], [ %1382, %1388 ]
  %1394 = phi i32 [ %1397, %1391 ], [ 0, %1388 ]
  %1395 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1393, i64 1
  %1396 = add nsw i32 %1392, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1395, i8 -1, i64 16, i1 false)
  %1397 = add i32 %1394, 1
  %1398 = icmp eq i32 %1397, %1389
  br i1 %1398, label %1399, label %1391, !llvm.loop !99

1399:                                             ; preds = %1391, %1388
  %1400 = phi i32 [ %1386, %1388 ], [ %1396, %1391 ]
  %1401 = phi ptr [ %1382, %1388 ], [ %1395, %1391 ]
  %1402 = icmp ult i32 %1386, 8
  br i1 %1402, label %1417, label %1403

1403:                                             ; preds = %1399, %1403
  %1404 = phi i32 [ %1414, %1403 ], [ %1400, %1399 ]
  %1405 = phi ptr [ %1413, %1403 ], [ %1401, %1399 ]
  %1406 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1406, i8 -1, i64 16, i1 false)
  %1407 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1407, i8 -1, i64 16, i1 false)
  %1408 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1408, i8 -1, i64 16, i1 false)
  %1409 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1409, i8 -1, i64 16, i1 false)
  %1410 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1410, i8 -1, i64 16, i1 false)
  %1411 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1411, i8 -1, i64 16, i1 false)
  %1412 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1412, i8 -1, i64 16, i1 false)
  %1413 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1405, i64 8
  %1414 = add nsw i32 %1404, -8
  %1415 = add i32 %1404, -9
  %1416 = icmp ult i32 %1415, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1413, i8 -1, i64 16, i1 false)
  br i1 %1416, label %1403, label %1417, !llvm.loop !72

1417:                                             ; preds = %1399, %1403, %1368
  %1418 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1419 = getelementptr inbounds %struct.regexp_internal, ptr %1375, i64 1
  %1420 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %1376, ptr noundef nonnull %1419)
  %1421 = icmp eq i64 %1420, -1
  br i1 %1421, label %1422, label %1430

1422:                                             ; preds = %1417
  %1423 = load ptr, ptr %1326, align 8, !tbaa !63
  %1424 = icmp eq ptr %1423, null
  br i1 %1424, label %1426, label %1425

1425:                                             ; preds = %1422
  store ptr %1423, ptr %6, align 8, !tbaa !35
  br label %1426

1426:                                             ; preds = %1425, %1422
  %1427 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1428 = icmp sgt i32 %1427, %1418
  br i1 %1428, label %1429, label %1434

1429:                                             ; preds = %1426
  call void @Perl_leave_scope(i32 noundef %1418) #12
  br label %1434

1430:                                             ; preds = %1417
  %1431 = getelementptr inbounds %struct.regexp, ptr %1373, i64 0, i32 17
  %1432 = load ptr, ptr %1431, align 8, !tbaa !64
  %1433 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1432, i64 0, i32 1
  store i64 %1420, ptr %1433, align 8, !tbaa !74
  br label %5548

1434:                                             ; preds = %1426, %1429, %1361
  %1435 = phi i32 [ %1329, %1361 ], [ %1370, %1429 ], [ %1370, %1426 ]
  %1436 = load ptr, ptr %6, align 8, !tbaa !35
  %1437 = load i8, ptr %1436, align 1, !tbaa !5
  %1438 = zext i8 %1437 to i64
  %1439 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1438
  %1440 = load i8, ptr %1439, align 1, !tbaa !5
  %1441 = zext i8 %1440 to i64
  %1442 = getelementptr inbounds i8, ptr %1436, i64 %1441
  store ptr %1442, ptr %6, align 8, !tbaa !35
  %1443 = icmp ult ptr %1442, %3
  br i1 %1443, label %1327, label %1544, !llvm.loop !100

1444:                                             ; preds = %1283
  br i1 %1286, label %1449, label %1445

1445:                                             ; preds = %1444
  %1446 = getelementptr inbounds i8, ptr %2, i64 -1
  %1447 = load i8, ptr %1446, align 1, !tbaa !5
  %1448 = zext i8 %1447 to i64
  br label %1449

1449:                                             ; preds = %1444, %1445
  %1450 = phi i64 [ %1448, %1445 ], [ 10, %1444 ]
  %1451 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1450
  %1452 = load i32, ptr %1451, align 4, !tbaa !73
  %1453 = and i32 %1452, 16385
  %1454 = icmp eq i32 %1453, 16385
  %1455 = zext i1 %1454 to i32
  %1456 = icmp ult ptr %2, %3
  br i1 %1456, label %1457, label %1544

1457:                                             ; preds = %1449
  %1458 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1459 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1460

1460:                                             ; preds = %1457, %1539
  %1461 = phi i32 [ %1455, %1457 ], [ %1541, %1539 ]
  %1462 = phi ptr [ %2, %1457 ], [ %1542, %1539 ]
  %1463 = load i8, ptr %1462, align 1, !tbaa !5
  %1464 = zext i8 %1463 to i64
  %1465 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1464
  %1466 = load i32, ptr %1465, align 4, !tbaa !73
  %1467 = and i32 %1466, 16385
  %1468 = icmp ne i32 %1467, 16385
  %1469 = zext i1 %1468 to i32
  %1470 = icmp eq i32 %1461, %1469
  br i1 %1470, label %1471, label %1539

1471:                                             ; preds = %1460
  %1472 = load i8, ptr %1458, align 8, !tbaa !31, !range !42, !noundef !43
  %1473 = icmp eq i8 %1472, 0
  br i1 %1473, label %1474, label %5548

1474:                                             ; preds = %1471
  %1475 = load ptr, ptr %4, align 8, !tbaa !62
  %1476 = getelementptr i8, ptr %1475, i64 16
  %1477 = load ptr, ptr %1476, align 8, !tbaa !5
  %1478 = getelementptr inbounds %struct.regexp, ptr %1477, i64 0, i32 14
  %1479 = load ptr, ptr %1478, align 8, !tbaa !20
  store ptr null, ptr %1459, align 8, !tbaa !63
  %1480 = load ptr, ptr %1284, align 8, !tbaa !26
  %1481 = ptrtoint ptr %1462 to i64
  %1482 = ptrtoint ptr %1480 to i64
  %1483 = sub i64 %1481, %1482
  %1484 = getelementptr inbounds %struct.regexp, ptr %1477, i64 0, i32 17
  %1485 = load ptr, ptr %1484, align 8, !tbaa !64
  store i64 %1483, ptr %1485, align 8, !tbaa !65
  %1486 = getelementptr inbounds %struct.regexp, ptr %1477, i64 0, i32 15
  store i32 0, ptr %1486, align 8, !tbaa !67
  %1487 = getelementptr inbounds %struct.regexp, ptr %1477, i64 0, i32 16
  store i32 0, ptr %1487, align 4, !tbaa !68
  %1488 = getelementptr inbounds %struct.regexp, ptr %1477, i64 0, i32 12
  %1489 = load i32, ptr %1488, align 8, !tbaa !69
  %1490 = icmp sgt i32 %1489, 0
  br i1 %1490, label %1491, label %1520

1491:                                             ; preds = %1474
  %1492 = and i32 %1489, 7
  %1493 = icmp eq i32 %1492, 0
  br i1 %1493, label %1502, label %1494

1494:                                             ; preds = %1491, %1494
  %1495 = phi i32 [ %1499, %1494 ], [ %1489, %1491 ]
  %1496 = phi ptr [ %1498, %1494 ], [ %1485, %1491 ]
  %1497 = phi i32 [ %1500, %1494 ], [ 0, %1491 ]
  %1498 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1496, i64 1
  %1499 = add nsw i32 %1495, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1498, i8 -1, i64 16, i1 false)
  %1500 = add i32 %1497, 1
  %1501 = icmp eq i32 %1500, %1492
  br i1 %1501, label %1502, label %1494, !llvm.loop !101

1502:                                             ; preds = %1494, %1491
  %1503 = phi i32 [ %1489, %1491 ], [ %1499, %1494 ]
  %1504 = phi ptr [ %1485, %1491 ], [ %1498, %1494 ]
  %1505 = icmp ult i32 %1489, 8
  br i1 %1505, label %1520, label %1506

1506:                                             ; preds = %1502, %1506
  %1507 = phi i32 [ %1517, %1506 ], [ %1503, %1502 ]
  %1508 = phi ptr [ %1516, %1506 ], [ %1504, %1502 ]
  %1509 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1509, i8 -1, i64 16, i1 false)
  %1510 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1510, i8 -1, i64 16, i1 false)
  %1511 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1511, i8 -1, i64 16, i1 false)
  %1512 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1512, i8 -1, i64 16, i1 false)
  %1513 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1513, i8 -1, i64 16, i1 false)
  %1514 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1514, i8 -1, i64 16, i1 false)
  %1515 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1515, i8 -1, i64 16, i1 false)
  %1516 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1508, i64 8
  %1517 = add nsw i32 %1507, -8
  %1518 = add i32 %1507, -9
  %1519 = icmp ult i32 %1518, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1516, i8 -1, i64 16, i1 false)
  br i1 %1519, label %1506, label %1520, !llvm.loop !72

1520:                                             ; preds = %1502, %1506, %1474
  %1521 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1522 = getelementptr inbounds %struct.regexp_internal, ptr %1479, i64 1
  %1523 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1462, ptr noundef nonnull %1522)
  %1524 = icmp eq i64 %1523, -1
  br i1 %1524, label %1525, label %1532

1525:                                             ; preds = %1520
  %1526 = load ptr, ptr %1459, align 8, !tbaa !63
  %1527 = icmp eq ptr %1526, null
  %1528 = select i1 %1527, ptr %1462, ptr %1526
  %1529 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1530 = icmp sgt i32 %1529, %1521
  br i1 %1530, label %1531, label %1536

1531:                                             ; preds = %1525
  tail call void @Perl_leave_scope(i32 noundef %1521) #12
  br label %1536

1532:                                             ; preds = %1520
  %1533 = getelementptr inbounds %struct.regexp, ptr %1477, i64 0, i32 17
  %1534 = load ptr, ptr %1533, align 8, !tbaa !64
  %1535 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1534, i64 0, i32 1
  store i64 %1523, ptr %1535, align 8, !tbaa !74
  br label %5548

1536:                                             ; preds = %1531, %1525
  %1537 = icmp eq i32 %1461, 0
  %1538 = zext i1 %1537 to i32
  br label %1539

1539:                                             ; preds = %1460, %1536
  %1540 = phi ptr [ %1528, %1536 ], [ %1462, %1460 ]
  %1541 = phi i32 [ %1538, %1536 ], [ %1461, %1460 ]
  %1542 = getelementptr inbounds i8, ptr %1540, i64 1
  store ptr %1542, ptr %6, align 8, !tbaa !35
  %1543 = icmp ult ptr %1542, %3
  br i1 %1543, label %1460, label %1544, !llvm.loop !102

1544:                                             ; preds = %1539, %1434, %1449, %1321
  %1545 = phi i32 [ %1314, %1321 ], [ %1455, %1449 ], [ %1435, %1434 ], [ %1541, %1539 ]
  %1546 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !73
  %1547 = and i32 %1546, 16385
  %1548 = icmp ne i32 %1547, 16385
  %1549 = zext i1 %1548 to i32
  %1550 = icmp eq i32 %1545, %1549
  br i1 %1550, label %1551, label %5550

1551:                                             ; preds = %1544
  %1552 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1553 = load i8, ptr %1552, align 8, !tbaa !31, !range !42, !noundef !43
  %1554 = icmp eq i8 %1553, 0
  br i1 %1554, label %1555, label %5548

1555:                                             ; preds = %1551
  %1556 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %1557 = icmp eq i32 %1556, 0
  br i1 %1557, label %5550, label %5548

1558:                                             ; preds = %5
  %1559 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %1560 = load ptr, ptr %1559, align 8, !tbaa !26
  %1561 = icmp eq ptr %1560, %2
  br i1 %25, label %1562, label %1668

1562:                                             ; preds = %1558
  br i1 %1561, label %1567, label %1563

1563:                                             ; preds = %1562
  %1564 = getelementptr inbounds i8, ptr %2, i64 -1
  %1565 = load i8, ptr %1564, align 1, !tbaa !5
  %1566 = zext i8 %1565 to i64
  br label %1567

1567:                                             ; preds = %1562, %1563
  %1568 = phi i64 [ %1566, %1563 ], [ 10, %1562 ]
  %1569 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1568
  %1570 = load i32, ptr %1569, align 4, !tbaa !73
  %1571 = and i32 %1570, 16385
  %1572 = icmp eq i32 %1571, 16385
  %1573 = zext i1 %1572 to i32
  %1574 = icmp ult ptr %2, %3
  br i1 %1574, label %1575, label %1768

1575:                                             ; preds = %1567
  %1576 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1577 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1578

1578:                                             ; preds = %1575, %1658
  %1579 = phi i32 [ %1573, %1575 ], [ %1660, %1658 ]
  %1580 = phi ptr [ %2, %1575 ], [ %1666, %1658 ]
  %1581 = load i8, ptr %1580, align 1, !tbaa !5
  %1582 = zext i8 %1581 to i64
  %1583 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1582
  %1584 = load i32, ptr %1583, align 4, !tbaa !73
  %1585 = and i32 %1584, 16385
  %1586 = icmp ne i32 %1585, 16385
  %1587 = zext i1 %1586 to i32
  %1588 = icmp eq i32 %1579, %1587
  br i1 %1588, label %1589, label %1658

1589:                                             ; preds = %1578
  %1590 = load i8, ptr %1576, align 8, !tbaa !31, !range !42, !noundef !43
  %1591 = icmp eq i8 %1590, 0
  br i1 %1591, label %1592, label %5548

1592:                                             ; preds = %1589
  %1593 = icmp eq i32 %1579, 0
  %1594 = zext i1 %1593 to i32
  %1595 = load ptr, ptr %4, align 8, !tbaa !62
  %1596 = getelementptr i8, ptr %1595, i64 16
  %1597 = load ptr, ptr %1596, align 8, !tbaa !5
  %1598 = getelementptr inbounds %struct.regexp, ptr %1597, i64 0, i32 14
  %1599 = load ptr, ptr %1598, align 8, !tbaa !20
  store ptr null, ptr %1577, align 8, !tbaa !63
  %1600 = load ptr, ptr %1559, align 8, !tbaa !26
  %1601 = ptrtoint ptr %1580 to i64
  %1602 = ptrtoint ptr %1600 to i64
  %1603 = sub i64 %1601, %1602
  %1604 = getelementptr inbounds %struct.regexp, ptr %1597, i64 0, i32 17
  %1605 = load ptr, ptr %1604, align 8, !tbaa !64
  store i64 %1603, ptr %1605, align 8, !tbaa !65
  %1606 = getelementptr inbounds %struct.regexp, ptr %1597, i64 0, i32 15
  store i32 0, ptr %1606, align 8, !tbaa !67
  %1607 = getelementptr inbounds %struct.regexp, ptr %1597, i64 0, i32 16
  store i32 0, ptr %1607, align 4, !tbaa !68
  %1608 = getelementptr inbounds %struct.regexp, ptr %1597, i64 0, i32 12
  %1609 = load i32, ptr %1608, align 8, !tbaa !69
  %1610 = icmp sgt i32 %1609, 0
  br i1 %1610, label %1611, label %1640

1611:                                             ; preds = %1592
  %1612 = and i32 %1609, 7
  %1613 = icmp eq i32 %1612, 0
  br i1 %1613, label %1622, label %1614

1614:                                             ; preds = %1611, %1614
  %1615 = phi i32 [ %1619, %1614 ], [ %1609, %1611 ]
  %1616 = phi ptr [ %1618, %1614 ], [ %1605, %1611 ]
  %1617 = phi i32 [ %1620, %1614 ], [ 0, %1611 ]
  %1618 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1616, i64 1
  %1619 = add nsw i32 %1615, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1618, i8 -1, i64 16, i1 false)
  %1620 = add i32 %1617, 1
  %1621 = icmp eq i32 %1620, %1612
  br i1 %1621, label %1622, label %1614, !llvm.loop !103

1622:                                             ; preds = %1614, %1611
  %1623 = phi i32 [ %1609, %1611 ], [ %1619, %1614 ]
  %1624 = phi ptr [ %1605, %1611 ], [ %1618, %1614 ]
  %1625 = icmp ult i32 %1609, 8
  br i1 %1625, label %1640, label %1626

1626:                                             ; preds = %1622, %1626
  %1627 = phi i32 [ %1637, %1626 ], [ %1623, %1622 ]
  %1628 = phi ptr [ %1636, %1626 ], [ %1624, %1622 ]
  %1629 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1629, i8 -1, i64 16, i1 false)
  %1630 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1630, i8 -1, i64 16, i1 false)
  %1631 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1631, i8 -1, i64 16, i1 false)
  %1632 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1632, i8 -1, i64 16, i1 false)
  %1633 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1633, i8 -1, i64 16, i1 false)
  %1634 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1634, i8 -1, i64 16, i1 false)
  %1635 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1635, i8 -1, i64 16, i1 false)
  %1636 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1628, i64 8
  %1637 = add nsw i32 %1627, -8
  %1638 = add i32 %1627, -9
  %1639 = icmp ult i32 %1638, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1636, i8 -1, i64 16, i1 false)
  br i1 %1639, label %1626, label %1640, !llvm.loop !72

1640:                                             ; preds = %1622, %1626, %1592
  %1641 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1642 = getelementptr inbounds %struct.regexp_internal, ptr %1599, i64 1
  %1643 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1580, ptr noundef nonnull %1642)
  %1644 = icmp eq i64 %1643, -1
  br i1 %1644, label %1645, label %1654

1645:                                             ; preds = %1640
  %1646 = load ptr, ptr %1577, align 8, !tbaa !63
  %1647 = icmp eq ptr %1646, null
  br i1 %1647, label %1649, label %1648

1648:                                             ; preds = %1645
  store ptr %1646, ptr %6, align 8, !tbaa !35
  br label %1649

1649:                                             ; preds = %1648, %1645
  %1650 = phi ptr [ %1646, %1648 ], [ %1580, %1645 ]
  %1651 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1652 = icmp sgt i32 %1651, %1641
  br i1 %1652, label %1653, label %1658

1653:                                             ; preds = %1649
  tail call void @Perl_leave_scope(i32 noundef %1641) #12
  br label %1658

1654:                                             ; preds = %1640
  %1655 = getelementptr inbounds %struct.regexp, ptr %1597, i64 0, i32 17
  %1656 = load ptr, ptr %1655, align 8, !tbaa !64
  %1657 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1656, i64 0, i32 1
  store i64 %1643, ptr %1657, align 8, !tbaa !74
  br label %5548

1658:                                             ; preds = %1649, %1653, %1578
  %1659 = phi ptr [ %1580, %1578 ], [ %1650, %1653 ], [ %1650, %1649 ]
  %1660 = phi i32 [ %1579, %1578 ], [ %1594, %1653 ], [ %1594, %1649 ]
  %1661 = load i8, ptr %1659, align 1, !tbaa !5
  %1662 = zext i8 %1661 to i64
  %1663 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1662
  %1664 = load i8, ptr %1663, align 1, !tbaa !5
  %1665 = zext i8 %1664 to i64
  %1666 = getelementptr inbounds i8, ptr %1659, i64 %1665
  store ptr %1666, ptr %6, align 8, !tbaa !35
  %1667 = icmp ult ptr %1666, %3
  br i1 %1667, label %1578, label %1768, !llvm.loop !104

1668:                                             ; preds = %1558
  br i1 %1561, label %1673, label %1669

1669:                                             ; preds = %1668
  %1670 = getelementptr inbounds i8, ptr %2, i64 -1
  %1671 = load i8, ptr %1670, align 1, !tbaa !5
  %1672 = zext i8 %1671 to i64
  br label %1673

1673:                                             ; preds = %1668, %1669
  %1674 = phi i64 [ %1672, %1669 ], [ 10, %1668 ]
  %1675 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1674
  %1676 = load i32, ptr %1675, align 4, !tbaa !73
  %1677 = and i32 %1676, 16385
  %1678 = icmp eq i32 %1677, 16385
  %1679 = zext i1 %1678 to i32
  %1680 = icmp ult ptr %2, %3
  br i1 %1680, label %1681, label %1768

1681:                                             ; preds = %1673
  %1682 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1683 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1684

1684:                                             ; preds = %1681, %1763
  %1685 = phi i32 [ %1679, %1681 ], [ %1765, %1763 ]
  %1686 = phi ptr [ %2, %1681 ], [ %1766, %1763 ]
  %1687 = load i8, ptr %1686, align 1, !tbaa !5
  %1688 = zext i8 %1687 to i64
  %1689 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1688
  %1690 = load i32, ptr %1689, align 4, !tbaa !73
  %1691 = and i32 %1690, 16385
  %1692 = icmp ne i32 %1691, 16385
  %1693 = zext i1 %1692 to i32
  %1694 = icmp eq i32 %1685, %1693
  br i1 %1694, label %1695, label %1763

1695:                                             ; preds = %1684
  %1696 = load i8, ptr %1682, align 8, !tbaa !31, !range !42, !noundef !43
  %1697 = icmp eq i8 %1696, 0
  br i1 %1697, label %1698, label %5548

1698:                                             ; preds = %1695
  %1699 = load ptr, ptr %4, align 8, !tbaa !62
  %1700 = getelementptr i8, ptr %1699, i64 16
  %1701 = load ptr, ptr %1700, align 8, !tbaa !5
  %1702 = getelementptr inbounds %struct.regexp, ptr %1701, i64 0, i32 14
  %1703 = load ptr, ptr %1702, align 8, !tbaa !20
  store ptr null, ptr %1683, align 8, !tbaa !63
  %1704 = load ptr, ptr %1559, align 8, !tbaa !26
  %1705 = ptrtoint ptr %1686 to i64
  %1706 = ptrtoint ptr %1704 to i64
  %1707 = sub i64 %1705, %1706
  %1708 = getelementptr inbounds %struct.regexp, ptr %1701, i64 0, i32 17
  %1709 = load ptr, ptr %1708, align 8, !tbaa !64
  store i64 %1707, ptr %1709, align 8, !tbaa !65
  %1710 = getelementptr inbounds %struct.regexp, ptr %1701, i64 0, i32 15
  store i32 0, ptr %1710, align 8, !tbaa !67
  %1711 = getelementptr inbounds %struct.regexp, ptr %1701, i64 0, i32 16
  store i32 0, ptr %1711, align 4, !tbaa !68
  %1712 = getelementptr inbounds %struct.regexp, ptr %1701, i64 0, i32 12
  %1713 = load i32, ptr %1712, align 8, !tbaa !69
  %1714 = icmp sgt i32 %1713, 0
  br i1 %1714, label %1715, label %1744

1715:                                             ; preds = %1698
  %1716 = and i32 %1713, 7
  %1717 = icmp eq i32 %1716, 0
  br i1 %1717, label %1726, label %1718

1718:                                             ; preds = %1715, %1718
  %1719 = phi i32 [ %1723, %1718 ], [ %1713, %1715 ]
  %1720 = phi ptr [ %1722, %1718 ], [ %1709, %1715 ]
  %1721 = phi i32 [ %1724, %1718 ], [ 0, %1715 ]
  %1722 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1720, i64 1
  %1723 = add nsw i32 %1719, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1722, i8 -1, i64 16, i1 false)
  %1724 = add i32 %1721, 1
  %1725 = icmp eq i32 %1724, %1716
  br i1 %1725, label %1726, label %1718, !llvm.loop !105

1726:                                             ; preds = %1718, %1715
  %1727 = phi i32 [ %1713, %1715 ], [ %1723, %1718 ]
  %1728 = phi ptr [ %1709, %1715 ], [ %1722, %1718 ]
  %1729 = icmp ult i32 %1713, 8
  br i1 %1729, label %1744, label %1730

1730:                                             ; preds = %1726, %1730
  %1731 = phi i32 [ %1741, %1730 ], [ %1727, %1726 ]
  %1732 = phi ptr [ %1740, %1730 ], [ %1728, %1726 ]
  %1733 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1733, i8 -1, i64 16, i1 false)
  %1734 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1734, i8 -1, i64 16, i1 false)
  %1735 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1735, i8 -1, i64 16, i1 false)
  %1736 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1736, i8 -1, i64 16, i1 false)
  %1737 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1737, i8 -1, i64 16, i1 false)
  %1738 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1738, i8 -1, i64 16, i1 false)
  %1739 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1739, i8 -1, i64 16, i1 false)
  %1740 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1732, i64 8
  %1741 = add nsw i32 %1731, -8
  %1742 = add i32 %1731, -9
  %1743 = icmp ult i32 %1742, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1740, i8 -1, i64 16, i1 false)
  br i1 %1743, label %1730, label %1744, !llvm.loop !72

1744:                                             ; preds = %1726, %1730, %1698
  %1745 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1746 = getelementptr inbounds %struct.regexp_internal, ptr %1703, i64 1
  %1747 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1686, ptr noundef nonnull %1746)
  %1748 = icmp eq i64 %1747, -1
  br i1 %1748, label %1749, label %1756

1749:                                             ; preds = %1744
  %1750 = load ptr, ptr %1683, align 8, !tbaa !63
  %1751 = icmp eq ptr %1750, null
  %1752 = select i1 %1751, ptr %1686, ptr %1750
  %1753 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1754 = icmp sgt i32 %1753, %1745
  br i1 %1754, label %1755, label %1760

1755:                                             ; preds = %1749
  tail call void @Perl_leave_scope(i32 noundef %1745) #12
  br label %1760

1756:                                             ; preds = %1744
  %1757 = getelementptr inbounds %struct.regexp, ptr %1701, i64 0, i32 17
  %1758 = load ptr, ptr %1757, align 8, !tbaa !64
  %1759 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1758, i64 0, i32 1
  store i64 %1747, ptr %1759, align 8, !tbaa !74
  br label %5548

1760:                                             ; preds = %1755, %1749
  %1761 = icmp eq i32 %1685, 0
  %1762 = zext i1 %1761 to i32
  br label %1763

1763:                                             ; preds = %1684, %1760
  %1764 = phi ptr [ %1752, %1760 ], [ %1686, %1684 ]
  %1765 = phi i32 [ %1762, %1760 ], [ %1685, %1684 ]
  %1766 = getelementptr inbounds i8, ptr %1764, i64 1
  store ptr %1766, ptr %6, align 8, !tbaa !35
  %1767 = icmp ult ptr %1766, %3
  br i1 %1767, label %1684, label %1768, !llvm.loop !106

1768:                                             ; preds = %1763, %1658, %1673, %1567
  %1769 = phi i32 [ %1573, %1567 ], [ %1679, %1673 ], [ %1660, %1658 ], [ %1765, %1763 ]
  %1770 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !73
  %1771 = and i32 %1770, 16385
  %1772 = icmp ne i32 %1771, 16385
  %1773 = zext i1 %1772 to i32
  %1774 = icmp eq i32 %1769, %1773
  br i1 %1774, label %1775, label %5550

1775:                                             ; preds = %1768
  %1776 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1777 = load i8, ptr %1776, align 8, !tbaa !31, !range !42, !noundef !43
  %1778 = icmp eq i8 %1777, 0
  br i1 %1778, label %1779, label %5548

1779:                                             ; preds = %1775
  %1780 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %1781 = icmp eq i32 %1780, 0
  br i1 %1781, label %5550, label %5548

1782:                                             ; preds = %5
  %1783 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %1784 = load ptr, ptr %1783, align 8, !tbaa !26
  %1785 = icmp eq ptr %1784, %2
  br i1 %25, label %1786, label %1944

1786:                                             ; preds = %1782
  br i1 %1785, label %1802, label %1787

1787:                                             ; preds = %1786
  %1788 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %1784)
  %1789 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %1790 = load ptr, ptr %1789, align 8, !tbaa !27
  %1791 = ptrtoint ptr %1790 to i64
  %1792 = ptrtoint ptr %1788 to i64
  %1793 = sub i64 %1791, %1792
  %1794 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %1795 = xor i1 %1794, true
  %1796 = zext i1 %1795 to i32
  %1797 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %1788, i64 noundef %1793, ptr noundef null, i32 noundef %1796) #12
  %1798 = trunc i64 %1797 to i32
  %1799 = icmp slt i32 %1798, 256
  br i1 %1799, label %1800, label %1808

1800:                                             ; preds = %1787
  %1801 = icmp ult i32 %1798, 256
  br i1 %1801, label %1802, label %1812

1802:                                             ; preds = %1786, %1800
  %1803 = phi i64 [ %1797, %1800 ], [ 10, %1786 ]
  %1804 = and i64 %1803, 4294967295
  %1805 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1804
  %1806 = load i32, ptr %1805, align 4, !tbaa !73
  %1807 = and i32 %1806, 1
  br label %1812

1808:                                             ; preds = %1787
  %1809 = and i64 %1797, 4294967295
  %1810 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %1809) #12
  %1811 = zext i1 %1810 to i32
  br label %1812

1812:                                             ; preds = %1800, %1802, %1808
  %1813 = phi i32 [ %1811, %1808 ], [ 0, %1800 ], [ %1807, %1802 ]
  %1814 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  %1815 = icmp eq ptr %1814, null
  br i1 %1815, label %1816, label %1820

1816:                                             ; preds = %1812
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11) #12
  store i8 4, ptr %11, align 1, !tbaa !5
  %1817 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !35
  %1818 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1817, ptr noundef nonnull %11) #12
  store ptr %1818, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11) #12
  %1819 = load ptr, ptr %6, align 8, !tbaa !35
  br label %1820

1820:                                             ; preds = %1812, %1816
  %1821 = phi ptr [ %2, %1812 ], [ %1819, %1816 ]
  %1822 = icmp ult ptr %1821, %3
  br i1 %1822, label %1823, label %2044

1823:                                             ; preds = %1820
  %1824 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1825 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1826

1826:                                             ; preds = %1823, %1934
  %1827 = phi ptr [ %1821, %1823 ], [ %1942, %1934 ]
  %1828 = phi i32 [ %1813, %1823 ], [ %1935, %1934 ]
  %1829 = load i8, ptr %1827, align 1, !tbaa !5
  %1830 = icmp sgt i8 %1829, -1
  br i1 %1830, label %1831, label %1836

1831:                                             ; preds = %1826
  %1832 = zext i8 %1829 to i64
  %1833 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1832
  %1834 = load i32, ptr %1833, align 4, !tbaa !73
  %1835 = and i32 %1834, 1
  br label %1860

1836:                                             ; preds = %1826
  %1837 = zext i8 %1829 to i32
  %1838 = and i32 %1837, 254
  %1839 = icmp eq i32 %1838, 194
  br i1 %1839, label %1840, label %1857

1840:                                             ; preds = %1836
  %1841 = and i32 %1837, 28
  %1842 = icmp eq i32 %1841, 0
  br i1 %1842, label %1843, label %1854

1843:                                             ; preds = %1840
  %1844 = shl i8 %1829, 6
  %1845 = getelementptr inbounds i8, ptr %1827, i64 1
  %1846 = load i8, ptr %1845, align 1, !tbaa !5
  %1847 = and i8 %1846, 63
  %1848 = or i8 %1847, %1844
  %1849 = zext i8 %1848 to i64
  %1850 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1849
  %1851 = load i32, ptr %1850, align 4, !tbaa !73
  %1852 = and i32 %1851, 1
  %1853 = icmp ne i32 %1852, 0
  br label %1854

1854:                                             ; preds = %1843, %1840
  %1855 = phi i1 [ false, %1840 ], [ %1853, %1843 ]
  %1856 = zext i1 %1855 to i32
  br label %1860

1857:                                             ; preds = %1836
  %1858 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1827) #12
  %1859 = zext i1 %1858 to i32
  br label %1860

1860:                                             ; preds = %1854, %1857, %1831
  %1861 = phi i32 [ %1835, %1831 ], [ %1856, %1854 ], [ %1859, %1857 ]
  %1862 = xor i32 %1861, 1
  %1863 = icmp eq i32 %1828, %1862
  br i1 %1863, label %1864, label %1867

1864:                                             ; preds = %1860
  %1865 = icmp eq i32 %1828, 0
  %1866 = zext i1 %1865 to i32
  br label %1934

1867:                                             ; preds = %1860
  %1868 = load i8, ptr %1824, align 8, !tbaa !31, !range !42, !noundef !43
  %1869 = icmp eq i8 %1868, 0
  br i1 %1869, label %1870, label %5548

1870:                                             ; preds = %1867
  %1871 = load ptr, ptr %4, align 8, !tbaa !62
  %1872 = getelementptr i8, ptr %1871, i64 16
  %1873 = load ptr, ptr %1872, align 8, !tbaa !5
  %1874 = getelementptr inbounds %struct.regexp, ptr %1873, i64 0, i32 14
  %1875 = load ptr, ptr %1874, align 8, !tbaa !20
  store ptr null, ptr %1825, align 8, !tbaa !63
  %1876 = load ptr, ptr %6, align 8, !tbaa !35
  %1877 = load ptr, ptr %1783, align 8, !tbaa !26
  %1878 = ptrtoint ptr %1876 to i64
  %1879 = ptrtoint ptr %1877 to i64
  %1880 = sub i64 %1878, %1879
  %1881 = getelementptr inbounds %struct.regexp, ptr %1873, i64 0, i32 17
  %1882 = load ptr, ptr %1881, align 8, !tbaa !64
  store i64 %1880, ptr %1882, align 8, !tbaa !65
  %1883 = getelementptr inbounds %struct.regexp, ptr %1873, i64 0, i32 15
  store i32 0, ptr %1883, align 8, !tbaa !67
  %1884 = getelementptr inbounds %struct.regexp, ptr %1873, i64 0, i32 16
  store i32 0, ptr %1884, align 4, !tbaa !68
  %1885 = getelementptr inbounds %struct.regexp, ptr %1873, i64 0, i32 12
  %1886 = load i32, ptr %1885, align 8, !tbaa !69
  %1887 = icmp sgt i32 %1886, 0
  br i1 %1887, label %1888, label %1917

1888:                                             ; preds = %1870
  %1889 = and i32 %1886, 7
  %1890 = icmp eq i32 %1889, 0
  br i1 %1890, label %1899, label %1891

1891:                                             ; preds = %1888, %1891
  %1892 = phi i32 [ %1896, %1891 ], [ %1886, %1888 ]
  %1893 = phi ptr [ %1895, %1891 ], [ %1882, %1888 ]
  %1894 = phi i32 [ %1897, %1891 ], [ 0, %1888 ]
  %1895 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1893, i64 1
  %1896 = add nsw i32 %1892, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1895, i8 -1, i64 16, i1 false)
  %1897 = add i32 %1894, 1
  %1898 = icmp eq i32 %1897, %1889
  br i1 %1898, label %1899, label %1891, !llvm.loop !107

1899:                                             ; preds = %1891, %1888
  %1900 = phi i32 [ %1886, %1888 ], [ %1896, %1891 ]
  %1901 = phi ptr [ %1882, %1888 ], [ %1895, %1891 ]
  %1902 = icmp ult i32 %1886, 8
  br i1 %1902, label %1917, label %1903

1903:                                             ; preds = %1899, %1903
  %1904 = phi i32 [ %1914, %1903 ], [ %1900, %1899 ]
  %1905 = phi ptr [ %1913, %1903 ], [ %1901, %1899 ]
  %1906 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1906, i8 -1, i64 16, i1 false)
  %1907 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1907, i8 -1, i64 16, i1 false)
  %1908 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1908, i8 -1, i64 16, i1 false)
  %1909 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1909, i8 -1, i64 16, i1 false)
  %1910 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1910, i8 -1, i64 16, i1 false)
  %1911 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1911, i8 -1, i64 16, i1 false)
  %1912 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1912, i8 -1, i64 16, i1 false)
  %1913 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1905, i64 8
  %1914 = add nsw i32 %1904, -8
  %1915 = add i32 %1904, -9
  %1916 = icmp ult i32 %1915, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1913, i8 -1, i64 16, i1 false)
  br i1 %1916, label %1903, label %1917, !llvm.loop !72

1917:                                             ; preds = %1899, %1903, %1870
  %1918 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1919 = getelementptr inbounds %struct.regexp_internal, ptr %1875, i64 1
  %1920 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %1876, ptr noundef nonnull %1919)
  %1921 = icmp eq i64 %1920, -1
  br i1 %1921, label %1922, label %1930

1922:                                             ; preds = %1917
  %1923 = load ptr, ptr %1825, align 8, !tbaa !63
  %1924 = icmp eq ptr %1923, null
  br i1 %1924, label %1926, label %1925

1925:                                             ; preds = %1922
  store ptr %1923, ptr %6, align 8, !tbaa !35
  br label %1926

1926:                                             ; preds = %1925, %1922
  %1927 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1928 = icmp sgt i32 %1927, %1918
  br i1 %1928, label %1929, label %1934

1929:                                             ; preds = %1926
  call void @Perl_leave_scope(i32 noundef %1918) #12
  br label %1934

1930:                                             ; preds = %1917
  %1931 = getelementptr inbounds %struct.regexp, ptr %1873, i64 0, i32 17
  %1932 = load ptr, ptr %1931, align 8, !tbaa !64
  %1933 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1932, i64 0, i32 1
  store i64 %1920, ptr %1933, align 8, !tbaa !74
  br label %5548

1934:                                             ; preds = %1926, %1929, %1864
  %1935 = phi i32 [ %1866, %1864 ], [ %1828, %1929 ], [ %1828, %1926 ]
  %1936 = load ptr, ptr %6, align 8, !tbaa !35
  %1937 = load i8, ptr %1936, align 1, !tbaa !5
  %1938 = zext i8 %1937 to i64
  %1939 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1938
  %1940 = load i8, ptr %1939, align 1, !tbaa !5
  %1941 = zext i8 %1940 to i64
  %1942 = getelementptr inbounds i8, ptr %1936, i64 %1941
  store ptr %1942, ptr %6, align 8, !tbaa !35
  %1943 = icmp ult ptr %1942, %3
  br i1 %1943, label %1826, label %2044, !llvm.loop !108

1944:                                             ; preds = %1782
  br i1 %1785, label %1949, label %1945

1945:                                             ; preds = %1944
  %1946 = getelementptr inbounds i8, ptr %2, i64 -1
  %1947 = load i8, ptr %1946, align 1, !tbaa !5
  %1948 = zext i8 %1947 to i64
  br label %1949

1949:                                             ; preds = %1944, %1945
  %1950 = phi i64 [ %1948, %1945 ], [ 10, %1944 ]
  %1951 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1950
  %1952 = load i32, ptr %1951, align 4, !tbaa !73
  %1953 = and i32 %1952, 16385
  %1954 = icmp eq i32 %1953, 16385
  %1955 = zext i1 %1954 to i32
  %1956 = icmp ult ptr %2, %3
  br i1 %1956, label %1957, label %2044

1957:                                             ; preds = %1949
  %1958 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %1959 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %1960

1960:                                             ; preds = %1957, %2039
  %1961 = phi i32 [ %1955, %1957 ], [ %2041, %2039 ]
  %1962 = phi ptr [ %2, %1957 ], [ %2042, %2039 ]
  %1963 = load i8, ptr %1962, align 1, !tbaa !5
  %1964 = zext i8 %1963 to i64
  %1965 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1964
  %1966 = load i32, ptr %1965, align 4, !tbaa !73
  %1967 = and i32 %1966, 16385
  %1968 = icmp ne i32 %1967, 16385
  %1969 = zext i1 %1968 to i32
  %1970 = icmp eq i32 %1961, %1969
  br i1 %1970, label %1971, label %1974

1971:                                             ; preds = %1960
  %1972 = icmp eq i32 %1961, 0
  %1973 = zext i1 %1972 to i32
  br label %2039

1974:                                             ; preds = %1960
  %1975 = load i8, ptr %1958, align 8, !tbaa !31, !range !42, !noundef !43
  %1976 = icmp eq i8 %1975, 0
  br i1 %1976, label %1977, label %5548

1977:                                             ; preds = %1974
  %1978 = load ptr, ptr %4, align 8, !tbaa !62
  %1979 = getelementptr i8, ptr %1978, i64 16
  %1980 = load ptr, ptr %1979, align 8, !tbaa !5
  %1981 = getelementptr inbounds %struct.regexp, ptr %1980, i64 0, i32 14
  %1982 = load ptr, ptr %1981, align 8, !tbaa !20
  store ptr null, ptr %1959, align 8, !tbaa !63
  %1983 = load ptr, ptr %1783, align 8, !tbaa !26
  %1984 = ptrtoint ptr %1962 to i64
  %1985 = ptrtoint ptr %1983 to i64
  %1986 = sub i64 %1984, %1985
  %1987 = getelementptr inbounds %struct.regexp, ptr %1980, i64 0, i32 17
  %1988 = load ptr, ptr %1987, align 8, !tbaa !64
  store i64 %1986, ptr %1988, align 8, !tbaa !65
  %1989 = getelementptr inbounds %struct.regexp, ptr %1980, i64 0, i32 15
  store i32 0, ptr %1989, align 8, !tbaa !67
  %1990 = getelementptr inbounds %struct.regexp, ptr %1980, i64 0, i32 16
  store i32 0, ptr %1990, align 4, !tbaa !68
  %1991 = getelementptr inbounds %struct.regexp, ptr %1980, i64 0, i32 12
  %1992 = load i32, ptr %1991, align 8, !tbaa !69
  %1993 = icmp sgt i32 %1992, 0
  br i1 %1993, label %1994, label %2023

1994:                                             ; preds = %1977
  %1995 = and i32 %1992, 7
  %1996 = icmp eq i32 %1995, 0
  br i1 %1996, label %2005, label %1997

1997:                                             ; preds = %1994, %1997
  %1998 = phi i32 [ %2002, %1997 ], [ %1992, %1994 ]
  %1999 = phi ptr [ %2001, %1997 ], [ %1988, %1994 ]
  %2000 = phi i32 [ %2003, %1997 ], [ 0, %1994 ]
  %2001 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1999, i64 1
  %2002 = add nsw i32 %1998, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2001, i8 -1, i64 16, i1 false)
  %2003 = add i32 %2000, 1
  %2004 = icmp eq i32 %2003, %1995
  br i1 %2004, label %2005, label %1997, !llvm.loop !109

2005:                                             ; preds = %1997, %1994
  %2006 = phi i32 [ %1992, %1994 ], [ %2002, %1997 ]
  %2007 = phi ptr [ %1988, %1994 ], [ %2001, %1997 ]
  %2008 = icmp ult i32 %1992, 8
  br i1 %2008, label %2023, label %2009

2009:                                             ; preds = %2005, %2009
  %2010 = phi i32 [ %2020, %2009 ], [ %2006, %2005 ]
  %2011 = phi ptr [ %2019, %2009 ], [ %2007, %2005 ]
  %2012 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2012, i8 -1, i64 16, i1 false)
  %2013 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2013, i8 -1, i64 16, i1 false)
  %2014 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2014, i8 -1, i64 16, i1 false)
  %2015 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2015, i8 -1, i64 16, i1 false)
  %2016 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2016, i8 -1, i64 16, i1 false)
  %2017 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2017, i8 -1, i64 16, i1 false)
  %2018 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2018, i8 -1, i64 16, i1 false)
  %2019 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2011, i64 8
  %2020 = add nsw i32 %2010, -8
  %2021 = add i32 %2010, -9
  %2022 = icmp ult i32 %2021, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2019, i8 -1, i64 16, i1 false)
  br i1 %2022, label %2009, label %2023, !llvm.loop !72

2023:                                             ; preds = %2005, %2009, %1977
  %2024 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2025 = getelementptr inbounds %struct.regexp_internal, ptr %1982, i64 1
  %2026 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %1962, ptr noundef nonnull %2025)
  %2027 = icmp eq i64 %2026, -1
  br i1 %2027, label %2028, label %2035

2028:                                             ; preds = %2023
  %2029 = load ptr, ptr %1959, align 8, !tbaa !63
  %2030 = icmp eq ptr %2029, null
  %2031 = select i1 %2030, ptr %1962, ptr %2029
  %2032 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2033 = icmp sgt i32 %2032, %2024
  br i1 %2033, label %2034, label %2039

2034:                                             ; preds = %2028
  tail call void @Perl_leave_scope(i32 noundef %2024) #12
  br label %2039

2035:                                             ; preds = %2023
  %2036 = getelementptr inbounds %struct.regexp, ptr %1980, i64 0, i32 17
  %2037 = load ptr, ptr %2036, align 8, !tbaa !64
  %2038 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2037, i64 0, i32 1
  store i64 %2026, ptr %2038, align 8, !tbaa !74
  br label %5548

2039:                                             ; preds = %2028, %2034, %1971
  %2040 = phi ptr [ %1962, %1971 ], [ %2031, %2034 ], [ %2031, %2028 ]
  %2041 = phi i32 [ %1973, %1971 ], [ %1961, %2034 ], [ %1961, %2028 ]
  %2042 = getelementptr inbounds i8, ptr %2040, i64 1
  store ptr %2042, ptr %6, align 8, !tbaa !35
  %2043 = icmp ult ptr %2042, %3
  br i1 %2043, label %1960, label %2044, !llvm.loop !110

2044:                                             ; preds = %2039, %1934, %1949, %1820
  %2045 = phi i32 [ %1813, %1820 ], [ %1955, %1949 ], [ %1935, %1934 ], [ %2041, %2039 ]
  %2046 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !73
  %2047 = and i32 %2046, 16385
  %2048 = icmp ne i32 %2047, 16385
  %2049 = zext i1 %2048 to i32
  %2050 = icmp eq i32 %2045, %2049
  br i1 %2050, label %5550, label %2051

2051:                                             ; preds = %2044
  %2052 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2053 = load i8, ptr %2052, align 8, !tbaa !31, !range !42, !noundef !43
  %2054 = icmp eq i8 %2053, 0
  br i1 %2054, label %2055, label %5548

2055:                                             ; preds = %2051
  %2056 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %2057 = icmp eq i32 %2056, 0
  br i1 %2057, label %5550, label %5548

2058:                                             ; preds = %5
  %2059 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2060 = load ptr, ptr %2059, align 8, !tbaa !26
  %2061 = icmp eq ptr %2060, %2
  br i1 %25, label %2062, label %2169

2062:                                             ; preds = %2058
  br i1 %2061, label %2067, label %2063

2063:                                             ; preds = %2062
  %2064 = getelementptr inbounds i8, ptr %2, i64 -1
  %2065 = load i8, ptr %2064, align 1, !tbaa !5
  %2066 = zext i8 %2065 to i64
  br label %2067

2067:                                             ; preds = %2062, %2063
  %2068 = phi i64 [ %2066, %2063 ], [ 10, %2062 ]
  %2069 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2068
  %2070 = load i32, ptr %2069, align 4, !tbaa !73
  %2071 = and i32 %2070, 16385
  %2072 = icmp eq i32 %2071, 16385
  %2073 = zext i1 %2072 to i32
  %2074 = icmp ult ptr %2, %3
  br i1 %2074, label %2075, label %2269

2075:                                             ; preds = %2067
  %2076 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2077 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2078

2078:                                             ; preds = %2075, %2159
  %2079 = phi i32 [ %2073, %2075 ], [ %2161, %2159 ]
  %2080 = phi ptr [ %2, %2075 ], [ %2167, %2159 ]
  %2081 = load i8, ptr %2080, align 1, !tbaa !5
  %2082 = zext i8 %2081 to i64
  %2083 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2082
  %2084 = load i32, ptr %2083, align 4, !tbaa !73
  %2085 = and i32 %2084, 16385
  %2086 = icmp ne i32 %2085, 16385
  %2087 = zext i1 %2086 to i32
  %2088 = icmp eq i32 %2079, %2087
  br i1 %2088, label %2089, label %2092

2089:                                             ; preds = %2078
  %2090 = icmp eq i32 %2079, 0
  %2091 = zext i1 %2090 to i32
  br label %2159

2092:                                             ; preds = %2078
  %2093 = load i8, ptr %2076, align 8, !tbaa !31, !range !42, !noundef !43
  %2094 = icmp eq i8 %2093, 0
  br i1 %2094, label %2095, label %5548

2095:                                             ; preds = %2092
  %2096 = load ptr, ptr %4, align 8, !tbaa !62
  %2097 = getelementptr i8, ptr %2096, i64 16
  %2098 = load ptr, ptr %2097, align 8, !tbaa !5
  %2099 = getelementptr inbounds %struct.regexp, ptr %2098, i64 0, i32 14
  %2100 = load ptr, ptr %2099, align 8, !tbaa !20
  store ptr null, ptr %2077, align 8, !tbaa !63
  %2101 = load ptr, ptr %2059, align 8, !tbaa !26
  %2102 = ptrtoint ptr %2080 to i64
  %2103 = ptrtoint ptr %2101 to i64
  %2104 = sub i64 %2102, %2103
  %2105 = getelementptr inbounds %struct.regexp, ptr %2098, i64 0, i32 17
  %2106 = load ptr, ptr %2105, align 8, !tbaa !64
  store i64 %2104, ptr %2106, align 8, !tbaa !65
  %2107 = getelementptr inbounds %struct.regexp, ptr %2098, i64 0, i32 15
  store i32 0, ptr %2107, align 8, !tbaa !67
  %2108 = getelementptr inbounds %struct.regexp, ptr %2098, i64 0, i32 16
  store i32 0, ptr %2108, align 4, !tbaa !68
  %2109 = getelementptr inbounds %struct.regexp, ptr %2098, i64 0, i32 12
  %2110 = load i32, ptr %2109, align 8, !tbaa !69
  %2111 = icmp sgt i32 %2110, 0
  br i1 %2111, label %2112, label %2141

2112:                                             ; preds = %2095
  %2113 = and i32 %2110, 7
  %2114 = icmp eq i32 %2113, 0
  br i1 %2114, label %2123, label %2115

2115:                                             ; preds = %2112, %2115
  %2116 = phi i32 [ %2120, %2115 ], [ %2110, %2112 ]
  %2117 = phi ptr [ %2119, %2115 ], [ %2106, %2112 ]
  %2118 = phi i32 [ %2121, %2115 ], [ 0, %2112 ]
  %2119 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2117, i64 1
  %2120 = add nsw i32 %2116, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2119, i8 -1, i64 16, i1 false)
  %2121 = add i32 %2118, 1
  %2122 = icmp eq i32 %2121, %2113
  br i1 %2122, label %2123, label %2115, !llvm.loop !111

2123:                                             ; preds = %2115, %2112
  %2124 = phi i32 [ %2110, %2112 ], [ %2120, %2115 ]
  %2125 = phi ptr [ %2106, %2112 ], [ %2119, %2115 ]
  %2126 = icmp ult i32 %2110, 8
  br i1 %2126, label %2141, label %2127

2127:                                             ; preds = %2123, %2127
  %2128 = phi i32 [ %2138, %2127 ], [ %2124, %2123 ]
  %2129 = phi ptr [ %2137, %2127 ], [ %2125, %2123 ]
  %2130 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2130, i8 -1, i64 16, i1 false)
  %2131 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2131, i8 -1, i64 16, i1 false)
  %2132 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2132, i8 -1, i64 16, i1 false)
  %2133 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2133, i8 -1, i64 16, i1 false)
  %2134 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2134, i8 -1, i64 16, i1 false)
  %2135 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2135, i8 -1, i64 16, i1 false)
  %2136 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2136, i8 -1, i64 16, i1 false)
  %2137 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2129, i64 8
  %2138 = add nsw i32 %2128, -8
  %2139 = add i32 %2128, -9
  %2140 = icmp ult i32 %2139, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2137, i8 -1, i64 16, i1 false)
  br i1 %2140, label %2127, label %2141, !llvm.loop !72

2141:                                             ; preds = %2123, %2127, %2095
  %2142 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2143 = getelementptr inbounds %struct.regexp_internal, ptr %2100, i64 1
  %2144 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2080, ptr noundef nonnull %2143)
  %2145 = icmp eq i64 %2144, -1
  br i1 %2145, label %2146, label %2155

2146:                                             ; preds = %2141
  %2147 = load ptr, ptr %2077, align 8, !tbaa !63
  %2148 = icmp eq ptr %2147, null
  br i1 %2148, label %2150, label %2149

2149:                                             ; preds = %2146
  store ptr %2147, ptr %6, align 8, !tbaa !35
  br label %2150

2150:                                             ; preds = %2149, %2146
  %2151 = phi ptr [ %2147, %2149 ], [ %2080, %2146 ]
  %2152 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2153 = icmp sgt i32 %2152, %2142
  br i1 %2153, label %2154, label %2159

2154:                                             ; preds = %2150
  tail call void @Perl_leave_scope(i32 noundef %2142) #12
  br label %2159

2155:                                             ; preds = %2141
  %2156 = getelementptr inbounds %struct.regexp, ptr %2098, i64 0, i32 17
  %2157 = load ptr, ptr %2156, align 8, !tbaa !64
  %2158 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2157, i64 0, i32 1
  store i64 %2144, ptr %2158, align 8, !tbaa !74
  br label %5548

2159:                                             ; preds = %2150, %2154, %2089
  %2160 = phi ptr [ %2080, %2089 ], [ %2151, %2154 ], [ %2151, %2150 ]
  %2161 = phi i32 [ %2091, %2089 ], [ %2079, %2154 ], [ %2079, %2150 ]
  %2162 = load i8, ptr %2160, align 1, !tbaa !5
  %2163 = zext i8 %2162 to i64
  %2164 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2163
  %2165 = load i8, ptr %2164, align 1, !tbaa !5
  %2166 = zext i8 %2165 to i64
  %2167 = getelementptr inbounds i8, ptr %2160, i64 %2166
  store ptr %2167, ptr %6, align 8, !tbaa !35
  %2168 = icmp ult ptr %2167, %3
  br i1 %2168, label %2078, label %2269, !llvm.loop !112

2169:                                             ; preds = %2058
  br i1 %2061, label %2174, label %2170

2170:                                             ; preds = %2169
  %2171 = getelementptr inbounds i8, ptr %2, i64 -1
  %2172 = load i8, ptr %2171, align 1, !tbaa !5
  %2173 = zext i8 %2172 to i64
  br label %2174

2174:                                             ; preds = %2169, %2170
  %2175 = phi i64 [ %2173, %2170 ], [ 10, %2169 ]
  %2176 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2175
  %2177 = load i32, ptr %2176, align 4, !tbaa !73
  %2178 = and i32 %2177, 16385
  %2179 = icmp eq i32 %2178, 16385
  %2180 = zext i1 %2179 to i32
  %2181 = icmp ult ptr %2, %3
  br i1 %2181, label %2182, label %2269

2182:                                             ; preds = %2174
  %2183 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2184 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2185

2185:                                             ; preds = %2182, %2264
  %2186 = phi i32 [ %2180, %2182 ], [ %2266, %2264 ]
  %2187 = phi ptr [ %2, %2182 ], [ %2267, %2264 ]
  %2188 = load i8, ptr %2187, align 1, !tbaa !5
  %2189 = zext i8 %2188 to i64
  %2190 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2189
  %2191 = load i32, ptr %2190, align 4, !tbaa !73
  %2192 = and i32 %2191, 16385
  %2193 = icmp ne i32 %2192, 16385
  %2194 = zext i1 %2193 to i32
  %2195 = icmp eq i32 %2186, %2194
  br i1 %2195, label %2196, label %2199

2196:                                             ; preds = %2185
  %2197 = icmp eq i32 %2186, 0
  %2198 = zext i1 %2197 to i32
  br label %2264

2199:                                             ; preds = %2185
  %2200 = load i8, ptr %2183, align 8, !tbaa !31, !range !42, !noundef !43
  %2201 = icmp eq i8 %2200, 0
  br i1 %2201, label %2202, label %5548

2202:                                             ; preds = %2199
  %2203 = load ptr, ptr %4, align 8, !tbaa !62
  %2204 = getelementptr i8, ptr %2203, i64 16
  %2205 = load ptr, ptr %2204, align 8, !tbaa !5
  %2206 = getelementptr inbounds %struct.regexp, ptr %2205, i64 0, i32 14
  %2207 = load ptr, ptr %2206, align 8, !tbaa !20
  store ptr null, ptr %2184, align 8, !tbaa !63
  %2208 = load ptr, ptr %2059, align 8, !tbaa !26
  %2209 = ptrtoint ptr %2187 to i64
  %2210 = ptrtoint ptr %2208 to i64
  %2211 = sub i64 %2209, %2210
  %2212 = getelementptr inbounds %struct.regexp, ptr %2205, i64 0, i32 17
  %2213 = load ptr, ptr %2212, align 8, !tbaa !64
  store i64 %2211, ptr %2213, align 8, !tbaa !65
  %2214 = getelementptr inbounds %struct.regexp, ptr %2205, i64 0, i32 15
  store i32 0, ptr %2214, align 8, !tbaa !67
  %2215 = getelementptr inbounds %struct.regexp, ptr %2205, i64 0, i32 16
  store i32 0, ptr %2215, align 4, !tbaa !68
  %2216 = getelementptr inbounds %struct.regexp, ptr %2205, i64 0, i32 12
  %2217 = load i32, ptr %2216, align 8, !tbaa !69
  %2218 = icmp sgt i32 %2217, 0
  br i1 %2218, label %2219, label %2248

2219:                                             ; preds = %2202
  %2220 = and i32 %2217, 7
  %2221 = icmp eq i32 %2220, 0
  br i1 %2221, label %2230, label %2222

2222:                                             ; preds = %2219, %2222
  %2223 = phi i32 [ %2227, %2222 ], [ %2217, %2219 ]
  %2224 = phi ptr [ %2226, %2222 ], [ %2213, %2219 ]
  %2225 = phi i32 [ %2228, %2222 ], [ 0, %2219 ]
  %2226 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2224, i64 1
  %2227 = add nsw i32 %2223, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2226, i8 -1, i64 16, i1 false)
  %2228 = add i32 %2225, 1
  %2229 = icmp eq i32 %2228, %2220
  br i1 %2229, label %2230, label %2222, !llvm.loop !113

2230:                                             ; preds = %2222, %2219
  %2231 = phi i32 [ %2217, %2219 ], [ %2227, %2222 ]
  %2232 = phi ptr [ %2213, %2219 ], [ %2226, %2222 ]
  %2233 = icmp ult i32 %2217, 8
  br i1 %2233, label %2248, label %2234

2234:                                             ; preds = %2230, %2234
  %2235 = phi i32 [ %2245, %2234 ], [ %2231, %2230 ]
  %2236 = phi ptr [ %2244, %2234 ], [ %2232, %2230 ]
  %2237 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2237, i8 -1, i64 16, i1 false)
  %2238 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2238, i8 -1, i64 16, i1 false)
  %2239 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2239, i8 -1, i64 16, i1 false)
  %2240 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2240, i8 -1, i64 16, i1 false)
  %2241 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2241, i8 -1, i64 16, i1 false)
  %2242 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2242, i8 -1, i64 16, i1 false)
  %2243 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2243, i8 -1, i64 16, i1 false)
  %2244 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2236, i64 8
  %2245 = add nsw i32 %2235, -8
  %2246 = add i32 %2235, -9
  %2247 = icmp ult i32 %2246, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2244, i8 -1, i64 16, i1 false)
  br i1 %2247, label %2234, label %2248, !llvm.loop !72

2248:                                             ; preds = %2230, %2234, %2202
  %2249 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2250 = getelementptr inbounds %struct.regexp_internal, ptr %2207, i64 1
  %2251 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2187, ptr noundef nonnull %2250)
  %2252 = icmp eq i64 %2251, -1
  br i1 %2252, label %2253, label %2260

2253:                                             ; preds = %2248
  %2254 = load ptr, ptr %2184, align 8, !tbaa !63
  %2255 = icmp eq ptr %2254, null
  %2256 = select i1 %2255, ptr %2187, ptr %2254
  %2257 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2258 = icmp sgt i32 %2257, %2249
  br i1 %2258, label %2259, label %2264

2259:                                             ; preds = %2253
  tail call void @Perl_leave_scope(i32 noundef %2249) #12
  br label %2264

2260:                                             ; preds = %2248
  %2261 = getelementptr inbounds %struct.regexp, ptr %2205, i64 0, i32 17
  %2262 = load ptr, ptr %2261, align 8, !tbaa !64
  %2263 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2262, i64 0, i32 1
  store i64 %2251, ptr %2263, align 8, !tbaa !74
  br label %5548

2264:                                             ; preds = %2253, %2259, %2196
  %2265 = phi ptr [ %2187, %2196 ], [ %2256, %2259 ], [ %2256, %2253 ]
  %2266 = phi i32 [ %2198, %2196 ], [ %2186, %2259 ], [ %2186, %2253 ]
  %2267 = getelementptr inbounds i8, ptr %2265, i64 1
  store ptr %2267, ptr %6, align 8, !tbaa !35
  %2268 = icmp ult ptr %2267, %3
  br i1 %2268, label %2185, label %2269, !llvm.loop !114

2269:                                             ; preds = %2264, %2159, %2174, %2067
  %2270 = phi i32 [ %2073, %2067 ], [ %2180, %2174 ], [ %2161, %2159 ], [ %2266, %2264 ]
  %2271 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !73
  %2272 = and i32 %2271, 16385
  %2273 = icmp ne i32 %2272, 16385
  %2274 = zext i1 %2273 to i32
  %2275 = icmp eq i32 %2270, %2274
  br i1 %2275, label %5550, label %2276

2276:                                             ; preds = %2269
  %2277 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2278 = load i8, ptr %2277, align 8, !tbaa !31, !range !42, !noundef !43
  %2279 = icmp eq i8 %2278, 0
  br i1 %2279, label %2280, label %5548

2280:                                             ; preds = %2276
  %2281 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %2282 = icmp eq i32 %2281, 0
  br i1 %2282, label %5550, label %5548

2283:                                             ; preds = %5
  %2284 = load i8, ptr %1, align 2, !tbaa !76
  %2285 = icmp eq i8 %2284, 0
  br i1 %2285, label %2286, label %2563

2286:                                             ; preds = %2283
  %2287 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2288 = load ptr, ptr %2287, align 8, !tbaa !26
  %2289 = icmp eq ptr %2288, %2
  br i1 %25, label %2290, label %2448

2290:                                             ; preds = %2286
  br i1 %2289, label %2306, label %2291

2291:                                             ; preds = %2290
  %2292 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %2288)
  %2293 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2294 = load ptr, ptr %2293, align 8, !tbaa !27
  %2295 = ptrtoint ptr %2294 to i64
  %2296 = ptrtoint ptr %2292 to i64
  %2297 = sub i64 %2295, %2296
  %2298 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %2299 = xor i1 %2298, true
  %2300 = zext i1 %2299 to i32
  %2301 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2292, i64 noundef %2297, ptr noundef null, i32 noundef %2300) #12
  %2302 = trunc i64 %2301 to i32
  %2303 = icmp slt i32 %2302, 256
  br i1 %2303, label %2304, label %2312

2304:                                             ; preds = %2291
  %2305 = icmp ult i32 %2302, 256
  br i1 %2305, label %2306, label %2316

2306:                                             ; preds = %2290, %2304
  %2307 = phi i64 [ %2301, %2304 ], [ 10, %2290 ]
  %2308 = and i64 %2307, 4294967295
  %2309 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2308
  %2310 = load i32, ptr %2309, align 4, !tbaa !73
  %2311 = and i32 %2310, 1
  br label %2316

2312:                                             ; preds = %2291
  %2313 = and i64 %2301, 4294967295
  %2314 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %2313) #12
  %2315 = zext i1 %2314 to i32
  br label %2316

2316:                                             ; preds = %2304, %2306, %2312
  %2317 = phi i32 [ %2315, %2312 ], [ 0, %2304 ], [ %2311, %2306 ]
  %2318 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  %2319 = icmp eq ptr %2318, null
  br i1 %2319, label %2320, label %2324

2320:                                             ; preds = %2316
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %12) #12
  store i8 4, ptr %12, align 1, !tbaa !5
  %2321 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !35
  %2322 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %2321, ptr noundef nonnull %12) #12
  store ptr %2322, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %12) #12
  %2323 = load ptr, ptr %6, align 8, !tbaa !35
  br label %2324

2324:                                             ; preds = %2316, %2320
  %2325 = phi ptr [ %2, %2316 ], [ %2323, %2320 ]
  %2326 = icmp ult ptr %2325, %3
  br i1 %2326, label %2327, label %2545

2327:                                             ; preds = %2324
  %2328 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2329 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2330

2330:                                             ; preds = %2327, %2438
  %2331 = phi ptr [ %2325, %2327 ], [ %2446, %2438 ]
  %2332 = phi i32 [ %2317, %2327 ], [ %2439, %2438 ]
  %2333 = load i8, ptr %2331, align 1, !tbaa !5
  %2334 = icmp sgt i8 %2333, -1
  br i1 %2334, label %2335, label %2340

2335:                                             ; preds = %2330
  %2336 = zext i8 %2333 to i64
  %2337 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2336
  %2338 = load i32, ptr %2337, align 4, !tbaa !73
  %2339 = and i32 %2338, 1
  br label %2364

2340:                                             ; preds = %2330
  %2341 = zext i8 %2333 to i32
  %2342 = and i32 %2341, 254
  %2343 = icmp eq i32 %2342, 194
  br i1 %2343, label %2344, label %2361

2344:                                             ; preds = %2340
  %2345 = and i32 %2341, 28
  %2346 = icmp eq i32 %2345, 0
  br i1 %2346, label %2347, label %2358

2347:                                             ; preds = %2344
  %2348 = shl i8 %2333, 6
  %2349 = getelementptr inbounds i8, ptr %2331, i64 1
  %2350 = load i8, ptr %2349, align 1, !tbaa !5
  %2351 = and i8 %2350, 63
  %2352 = or i8 %2351, %2348
  %2353 = zext i8 %2352 to i64
  %2354 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2353
  %2355 = load i32, ptr %2354, align 4, !tbaa !73
  %2356 = and i32 %2355, 1
  %2357 = icmp ne i32 %2356, 0
  br label %2358

2358:                                             ; preds = %2347, %2344
  %2359 = phi i1 [ false, %2344 ], [ %2357, %2347 ]
  %2360 = zext i1 %2359 to i32
  br label %2364

2361:                                             ; preds = %2340
  %2362 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %2331) #12
  %2363 = zext i1 %2362 to i32
  br label %2364

2364:                                             ; preds = %2358, %2361, %2335
  %2365 = phi i32 [ %2339, %2335 ], [ %2360, %2358 ], [ %2363, %2361 ]
  %2366 = xor i32 %2365, 1
  %2367 = icmp eq i32 %2332, %2366
  br i1 %2367, label %2368, label %2371

2368:                                             ; preds = %2364
  %2369 = icmp eq i32 %2332, 0
  %2370 = zext i1 %2369 to i32
  br label %2438

2371:                                             ; preds = %2364
  %2372 = load i8, ptr %2328, align 8, !tbaa !31, !range !42, !noundef !43
  %2373 = icmp eq i8 %2372, 0
  br i1 %2373, label %2374, label %5548

2374:                                             ; preds = %2371
  %2375 = load ptr, ptr %4, align 8, !tbaa !62
  %2376 = getelementptr i8, ptr %2375, i64 16
  %2377 = load ptr, ptr %2376, align 8, !tbaa !5
  %2378 = getelementptr inbounds %struct.regexp, ptr %2377, i64 0, i32 14
  %2379 = load ptr, ptr %2378, align 8, !tbaa !20
  store ptr null, ptr %2329, align 8, !tbaa !63
  %2380 = load ptr, ptr %6, align 8, !tbaa !35
  %2381 = load ptr, ptr %2287, align 8, !tbaa !26
  %2382 = ptrtoint ptr %2380 to i64
  %2383 = ptrtoint ptr %2381 to i64
  %2384 = sub i64 %2382, %2383
  %2385 = getelementptr inbounds %struct.regexp, ptr %2377, i64 0, i32 17
  %2386 = load ptr, ptr %2385, align 8, !tbaa !64
  store i64 %2384, ptr %2386, align 8, !tbaa !65
  %2387 = getelementptr inbounds %struct.regexp, ptr %2377, i64 0, i32 15
  store i32 0, ptr %2387, align 8, !tbaa !67
  %2388 = getelementptr inbounds %struct.regexp, ptr %2377, i64 0, i32 16
  store i32 0, ptr %2388, align 4, !tbaa !68
  %2389 = getelementptr inbounds %struct.regexp, ptr %2377, i64 0, i32 12
  %2390 = load i32, ptr %2389, align 8, !tbaa !69
  %2391 = icmp sgt i32 %2390, 0
  br i1 %2391, label %2392, label %2421

2392:                                             ; preds = %2374
  %2393 = and i32 %2390, 7
  %2394 = icmp eq i32 %2393, 0
  br i1 %2394, label %2403, label %2395

2395:                                             ; preds = %2392, %2395
  %2396 = phi i32 [ %2400, %2395 ], [ %2390, %2392 ]
  %2397 = phi ptr [ %2399, %2395 ], [ %2386, %2392 ]
  %2398 = phi i32 [ %2401, %2395 ], [ 0, %2392 ]
  %2399 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2397, i64 1
  %2400 = add nsw i32 %2396, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2399, i8 -1, i64 16, i1 false)
  %2401 = add i32 %2398, 1
  %2402 = icmp eq i32 %2401, %2393
  br i1 %2402, label %2403, label %2395, !llvm.loop !115

2403:                                             ; preds = %2395, %2392
  %2404 = phi i32 [ %2390, %2392 ], [ %2400, %2395 ]
  %2405 = phi ptr [ %2386, %2392 ], [ %2399, %2395 ]
  %2406 = icmp ult i32 %2390, 8
  br i1 %2406, label %2421, label %2407

2407:                                             ; preds = %2403, %2407
  %2408 = phi i32 [ %2418, %2407 ], [ %2404, %2403 ]
  %2409 = phi ptr [ %2417, %2407 ], [ %2405, %2403 ]
  %2410 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2410, i8 -1, i64 16, i1 false)
  %2411 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2411, i8 -1, i64 16, i1 false)
  %2412 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2412, i8 -1, i64 16, i1 false)
  %2413 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2413, i8 -1, i64 16, i1 false)
  %2414 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2414, i8 -1, i64 16, i1 false)
  %2415 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2415, i8 -1, i64 16, i1 false)
  %2416 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2416, i8 -1, i64 16, i1 false)
  %2417 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2409, i64 8
  %2418 = add nsw i32 %2408, -8
  %2419 = add i32 %2408, -9
  %2420 = icmp ult i32 %2419, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2417, i8 -1, i64 16, i1 false)
  br i1 %2420, label %2407, label %2421, !llvm.loop !72

2421:                                             ; preds = %2403, %2407, %2374
  %2422 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2423 = getelementptr inbounds %struct.regexp_internal, ptr %2379, i64 1
  %2424 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2380, ptr noundef nonnull %2423)
  %2425 = icmp eq i64 %2424, -1
  br i1 %2425, label %2426, label %2434

2426:                                             ; preds = %2421
  %2427 = load ptr, ptr %2329, align 8, !tbaa !63
  %2428 = icmp eq ptr %2427, null
  br i1 %2428, label %2430, label %2429

2429:                                             ; preds = %2426
  store ptr %2427, ptr %6, align 8, !tbaa !35
  br label %2430

2430:                                             ; preds = %2429, %2426
  %2431 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2432 = icmp sgt i32 %2431, %2422
  br i1 %2432, label %2433, label %2438

2433:                                             ; preds = %2430
  call void @Perl_leave_scope(i32 noundef %2422) #12
  br label %2438

2434:                                             ; preds = %2421
  %2435 = getelementptr inbounds %struct.regexp, ptr %2377, i64 0, i32 17
  %2436 = load ptr, ptr %2435, align 8, !tbaa !64
  %2437 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2436, i64 0, i32 1
  store i64 %2424, ptr %2437, align 8, !tbaa !74
  br label %5548

2438:                                             ; preds = %2430, %2433, %2368
  %2439 = phi i32 [ %2370, %2368 ], [ %2332, %2433 ], [ %2332, %2430 ]
  %2440 = load ptr, ptr %6, align 8, !tbaa !35
  %2441 = load i8, ptr %2440, align 1, !tbaa !5
  %2442 = zext i8 %2441 to i64
  %2443 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2442
  %2444 = load i8, ptr %2443, align 1, !tbaa !5
  %2445 = zext i8 %2444 to i64
  %2446 = getelementptr inbounds i8, ptr %2440, i64 %2445
  store ptr %2446, ptr %6, align 8, !tbaa !35
  %2447 = icmp ult ptr %2446, %3
  br i1 %2447, label %2330, label %2545, !llvm.loop !116

2448:                                             ; preds = %2286
  br i1 %2289, label %2453, label %2449

2449:                                             ; preds = %2448
  %2450 = getelementptr inbounds i8, ptr %2, i64 -1
  %2451 = load i8, ptr %2450, align 1, !tbaa !5
  %2452 = zext i8 %2451 to i64
  br label %2453

2453:                                             ; preds = %2448, %2449
  %2454 = phi i64 [ %2452, %2449 ], [ 10, %2448 ]
  %2455 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2454
  %2456 = load i32, ptr %2455, align 4, !tbaa !73
  %2457 = and i32 %2456, 1
  %2458 = icmp ult ptr %2, %3
  br i1 %2458, label %2459, label %2545

2459:                                             ; preds = %2453
  %2460 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2461 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2462

2462:                                             ; preds = %2459, %2540
  %2463 = phi i32 [ %2457, %2459 ], [ %2542, %2540 ]
  %2464 = phi ptr [ %2, %2459 ], [ %2543, %2540 ]
  %2465 = load i8, ptr %2464, align 1, !tbaa !5
  %2466 = zext i8 %2465 to i64
  %2467 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2466
  %2468 = load i32, ptr %2467, align 4, !tbaa !73
  %2469 = and i32 %2468, 1
  %2470 = xor i32 %2469, 1
  %2471 = icmp eq i32 %2463, %2470
  br i1 %2471, label %2472, label %2475

2472:                                             ; preds = %2462
  %2473 = icmp eq i32 %2463, 0
  %2474 = zext i1 %2473 to i32
  br label %2540

2475:                                             ; preds = %2462
  %2476 = load i8, ptr %2460, align 8, !tbaa !31, !range !42, !noundef !43
  %2477 = icmp eq i8 %2476, 0
  br i1 %2477, label %2478, label %5548

2478:                                             ; preds = %2475
  %2479 = load ptr, ptr %4, align 8, !tbaa !62
  %2480 = getelementptr i8, ptr %2479, i64 16
  %2481 = load ptr, ptr %2480, align 8, !tbaa !5
  %2482 = getelementptr inbounds %struct.regexp, ptr %2481, i64 0, i32 14
  %2483 = load ptr, ptr %2482, align 8, !tbaa !20
  store ptr null, ptr %2461, align 8, !tbaa !63
  %2484 = load ptr, ptr %2287, align 8, !tbaa !26
  %2485 = ptrtoint ptr %2464 to i64
  %2486 = ptrtoint ptr %2484 to i64
  %2487 = sub i64 %2485, %2486
  %2488 = getelementptr inbounds %struct.regexp, ptr %2481, i64 0, i32 17
  %2489 = load ptr, ptr %2488, align 8, !tbaa !64
  store i64 %2487, ptr %2489, align 8, !tbaa !65
  %2490 = getelementptr inbounds %struct.regexp, ptr %2481, i64 0, i32 15
  store i32 0, ptr %2490, align 8, !tbaa !67
  %2491 = getelementptr inbounds %struct.regexp, ptr %2481, i64 0, i32 16
  store i32 0, ptr %2491, align 4, !tbaa !68
  %2492 = getelementptr inbounds %struct.regexp, ptr %2481, i64 0, i32 12
  %2493 = load i32, ptr %2492, align 8, !tbaa !69
  %2494 = icmp sgt i32 %2493, 0
  br i1 %2494, label %2495, label %2524

2495:                                             ; preds = %2478
  %2496 = and i32 %2493, 7
  %2497 = icmp eq i32 %2496, 0
  br i1 %2497, label %2506, label %2498

2498:                                             ; preds = %2495, %2498
  %2499 = phi i32 [ %2503, %2498 ], [ %2493, %2495 ]
  %2500 = phi ptr [ %2502, %2498 ], [ %2489, %2495 ]
  %2501 = phi i32 [ %2504, %2498 ], [ 0, %2495 ]
  %2502 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2500, i64 1
  %2503 = add nsw i32 %2499, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2502, i8 -1, i64 16, i1 false)
  %2504 = add i32 %2501, 1
  %2505 = icmp eq i32 %2504, %2496
  br i1 %2505, label %2506, label %2498, !llvm.loop !117

2506:                                             ; preds = %2498, %2495
  %2507 = phi i32 [ %2493, %2495 ], [ %2503, %2498 ]
  %2508 = phi ptr [ %2489, %2495 ], [ %2502, %2498 ]
  %2509 = icmp ult i32 %2493, 8
  br i1 %2509, label %2524, label %2510

2510:                                             ; preds = %2506, %2510
  %2511 = phi i32 [ %2521, %2510 ], [ %2507, %2506 ]
  %2512 = phi ptr [ %2520, %2510 ], [ %2508, %2506 ]
  %2513 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2513, i8 -1, i64 16, i1 false)
  %2514 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2514, i8 -1, i64 16, i1 false)
  %2515 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2515, i8 -1, i64 16, i1 false)
  %2516 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2516, i8 -1, i64 16, i1 false)
  %2517 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2517, i8 -1, i64 16, i1 false)
  %2518 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2518, i8 -1, i64 16, i1 false)
  %2519 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2519, i8 -1, i64 16, i1 false)
  %2520 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2512, i64 8
  %2521 = add nsw i32 %2511, -8
  %2522 = add i32 %2511, -9
  %2523 = icmp ult i32 %2522, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2520, i8 -1, i64 16, i1 false)
  br i1 %2523, label %2510, label %2524, !llvm.loop !72

2524:                                             ; preds = %2506, %2510, %2478
  %2525 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2526 = getelementptr inbounds %struct.regexp_internal, ptr %2483, i64 1
  %2527 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2464, ptr noundef nonnull %2526)
  %2528 = icmp eq i64 %2527, -1
  br i1 %2528, label %2529, label %2536

2529:                                             ; preds = %2524
  %2530 = load ptr, ptr %2461, align 8, !tbaa !63
  %2531 = icmp eq ptr %2530, null
  %2532 = select i1 %2531, ptr %2464, ptr %2530
  %2533 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2534 = icmp sgt i32 %2533, %2525
  br i1 %2534, label %2535, label %2540

2535:                                             ; preds = %2529
  tail call void @Perl_leave_scope(i32 noundef %2525) #12
  br label %2540

2536:                                             ; preds = %2524
  %2537 = getelementptr inbounds %struct.regexp, ptr %2481, i64 0, i32 17
  %2538 = load ptr, ptr %2537, align 8, !tbaa !64
  %2539 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2538, i64 0, i32 1
  store i64 %2527, ptr %2539, align 8, !tbaa !74
  br label %5548

2540:                                             ; preds = %2529, %2535, %2472
  %2541 = phi ptr [ %2464, %2472 ], [ %2532, %2535 ], [ %2532, %2529 ]
  %2542 = phi i32 [ %2474, %2472 ], [ %2463, %2535 ], [ %2463, %2529 ]
  %2543 = getelementptr inbounds i8, ptr %2541, i64 1
  store ptr %2543, ptr %6, align 8, !tbaa !35
  %2544 = icmp ult ptr %2543, %3
  br i1 %2544, label %2462, label %2545, !llvm.loop !118

2545:                                             ; preds = %2540, %2438, %2453, %2324
  %2546 = phi i32 [ %2317, %2324 ], [ %2457, %2453 ], [ %2439, %2438 ], [ %2542, %2540 ]
  %2547 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !73
  %2548 = and i32 %2547, 1
  %2549 = xor i32 %2548, 1
  %2550 = icmp eq i32 %2546, %2549
  br i1 %2550, label %5550, label %2551

2551:                                             ; preds = %2545
  %2552 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2553 = load i8, ptr %2552, align 8, !tbaa !31, !range !42, !noundef !43
  %2554 = icmp eq i8 %2553, 0
  br i1 %2554, label %2555, label %5548

2555:                                             ; preds = %2551
  %2556 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %2557 = icmp eq i32 %2556, 0
  br i1 %2557, label %5550, label %5548

2558:                                             ; preds = %971, %657
  %2559 = phi i32 [ 0, %657 ], [ 1, %971 ]
  tail call void (i32, ptr, ...) @Perl_ck_warner(i32 noundef 65, ptr noundef nonnull @.str.2) #12
  br label %2560

2560:                                             ; preds = %2558, %5
  %2561 = phi i32 [ 0, %5 ], [ %2559, %2558 ]
  %2562 = load i8, ptr %1, align 2, !tbaa !76
  br label %2563

2563:                                             ; preds = %2560, %971, %2283, %657
  %2564 = phi i8 [ %2562, %2560 ], [ %969, %971 ], [ %2284, %2283 ], [ %655, %657 ]
  %2565 = phi i32 [ %2561, %2560 ], [ 1, %971 ], [ 1, %2283 ], [ 0, %657 ]
  switch i8 %2564, label %5550 [
    i8 0, label %2566
    i8 1, label %2837
    i8 2, label %3071
    i8 3, label %3258
  ]

2566:                                             ; preds = %2563
  %2567 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2568 = load ptr, ptr %2567, align 8, !tbaa !26
  %2569 = icmp eq ptr %2568, %2
  br i1 %25, label %2570, label %2727

2570:                                             ; preds = %2566
  br i1 %2569, label %2586, label %2571

2571:                                             ; preds = %2570
  %2572 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef -1, ptr noundef %2568)
  %2573 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2574 = load ptr, ptr %2573, align 8, !tbaa !27
  %2575 = ptrtoint ptr %2574 to i64
  %2576 = ptrtoint ptr %2572 to i64
  %2577 = sub i64 %2575, %2576
  %2578 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %2579 = xor i1 %2578, true
  %2580 = zext i1 %2579 to i32
  %2581 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2572, i64 noundef %2577, ptr noundef null, i32 noundef %2580) #12
  %2582 = trunc i64 %2581 to i32
  %2583 = icmp slt i32 %2582, 256
  br i1 %2583, label %2584, label %2592

2584:                                             ; preds = %2571
  %2585 = icmp ult i32 %2582, 256
  br i1 %2585, label %2586, label %2596

2586:                                             ; preds = %2570, %2584
  %2587 = phi i64 [ %2581, %2584 ], [ 10, %2570 ]
  %2588 = and i64 %2587, 4294967295
  %2589 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2588
  %2590 = load i32, ptr %2589, align 4, !tbaa !73
  %2591 = and i32 %2590, 1
  br label %2596

2592:                                             ; preds = %2571
  %2593 = and i64 %2581, 4294967295
  %2594 = tail call zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext 0, i64 noundef %2593) #12
  %2595 = zext i1 %2594 to i32
  br label %2596

2596:                                             ; preds = %2584, %2586, %2592
  %2597 = phi i32 [ %2595, %2592 ], [ 0, %2584 ], [ %2591, %2586 ]
  %2598 = load ptr, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  %2599 = icmp eq ptr %2598, null
  br i1 %2599, label %2600, label %2604

2600:                                             ; preds = %2596
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %13) #12
  store i8 4, ptr %13, align 1, !tbaa !5
  %2601 = load ptr, ptr @PL_XPosix_ptrs, align 16, !tbaa !35
  %2602 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %2601, ptr noundef nonnull %13) #12
  store ptr %2602, ptr @PL_utf8_swash_ptrs, align 16, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %13) #12
  %2603 = load ptr, ptr %6, align 8, !tbaa !35
  br label %2604

2604:                                             ; preds = %2596, %2600
  %2605 = phi ptr [ %2, %2596 ], [ %2603, %2600 ]
  %2606 = icmp ult ptr %2605, %3
  br i1 %2606, label %2607, label %2824

2607:                                             ; preds = %2604
  %2608 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2609 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2610

2610:                                             ; preds = %2607, %2717
  %2611 = phi ptr [ %2605, %2607 ], [ %2725, %2717 ]
  %2612 = phi i32 [ %2597, %2607 ], [ %2718, %2717 ]
  %2613 = load i8, ptr %2611, align 1, !tbaa !5
  %2614 = icmp sgt i8 %2613, -1
  br i1 %2614, label %2615, label %2620

2615:                                             ; preds = %2610
  %2616 = zext i8 %2613 to i64
  %2617 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2616
  %2618 = load i32, ptr %2617, align 4, !tbaa !73
  %2619 = and i32 %2618, 1
  br label %2644

2620:                                             ; preds = %2610
  %2621 = zext i8 %2613 to i32
  %2622 = and i32 %2621, 254
  %2623 = icmp eq i32 %2622, 194
  br i1 %2623, label %2624, label %2641

2624:                                             ; preds = %2620
  %2625 = and i32 %2621, 28
  %2626 = icmp eq i32 %2625, 0
  br i1 %2626, label %2627, label %2638

2627:                                             ; preds = %2624
  %2628 = shl i8 %2613, 6
  %2629 = getelementptr inbounds i8, ptr %2611, i64 1
  %2630 = load i8, ptr %2629, align 1, !tbaa !5
  %2631 = and i8 %2630, 63
  %2632 = or i8 %2631, %2628
  %2633 = zext i8 %2632 to i64
  %2634 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2633
  %2635 = load i32, ptr %2634, align 4, !tbaa !73
  %2636 = and i32 %2635, 1
  %2637 = icmp ne i32 %2636, 0
  br label %2638

2638:                                             ; preds = %2627, %2624
  %2639 = phi i1 [ false, %2624 ], [ %2637, %2627 ]
  %2640 = zext i1 %2639 to i32
  br label %2644

2641:                                             ; preds = %2620
  %2642 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %2611) #12
  %2643 = zext i1 %2642 to i32
  br label %2644

2644:                                             ; preds = %2638, %2641, %2615
  %2645 = phi i32 [ %2619, %2615 ], [ %2640, %2638 ], [ %2643, %2641 ]
  %2646 = xor i32 %2645, 1
  %2647 = icmp eq i32 %2612, %2646
  br i1 %2647, label %2648, label %2717

2648:                                             ; preds = %2644
  %2649 = load i8, ptr %2608, align 8, !tbaa !31, !range !42, !noundef !43
  %2650 = icmp eq i8 %2649, 0
  br i1 %2650, label %2651, label %5548

2651:                                             ; preds = %2648
  %2652 = icmp eq i32 %2612, 0
  %2653 = zext i1 %2652 to i32
  %2654 = load ptr, ptr %4, align 8, !tbaa !62
  %2655 = getelementptr i8, ptr %2654, i64 16
  %2656 = load ptr, ptr %2655, align 8, !tbaa !5
  %2657 = getelementptr inbounds %struct.regexp, ptr %2656, i64 0, i32 14
  %2658 = load ptr, ptr %2657, align 8, !tbaa !20
  store ptr null, ptr %2609, align 8, !tbaa !63
  %2659 = load ptr, ptr %6, align 8, !tbaa !35
  %2660 = load ptr, ptr %2567, align 8, !tbaa !26
  %2661 = ptrtoint ptr %2659 to i64
  %2662 = ptrtoint ptr %2660 to i64
  %2663 = sub i64 %2661, %2662
  %2664 = getelementptr inbounds %struct.regexp, ptr %2656, i64 0, i32 17
  %2665 = load ptr, ptr %2664, align 8, !tbaa !64
  store i64 %2663, ptr %2665, align 8, !tbaa !65
  %2666 = getelementptr inbounds %struct.regexp, ptr %2656, i64 0, i32 15
  store i32 0, ptr %2666, align 8, !tbaa !67
  %2667 = getelementptr inbounds %struct.regexp, ptr %2656, i64 0, i32 16
  store i32 0, ptr %2667, align 4, !tbaa !68
  %2668 = getelementptr inbounds %struct.regexp, ptr %2656, i64 0, i32 12
  %2669 = load i32, ptr %2668, align 8, !tbaa !69
  %2670 = icmp sgt i32 %2669, 0
  br i1 %2670, label %2671, label %2700

2671:                                             ; preds = %2651
  %2672 = and i32 %2669, 7
  %2673 = icmp eq i32 %2672, 0
  br i1 %2673, label %2682, label %2674

2674:                                             ; preds = %2671, %2674
  %2675 = phi i32 [ %2679, %2674 ], [ %2669, %2671 ]
  %2676 = phi ptr [ %2678, %2674 ], [ %2665, %2671 ]
  %2677 = phi i32 [ %2680, %2674 ], [ 0, %2671 ]
  %2678 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2676, i64 1
  %2679 = add nsw i32 %2675, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2678, i8 -1, i64 16, i1 false)
  %2680 = add i32 %2677, 1
  %2681 = icmp eq i32 %2680, %2672
  br i1 %2681, label %2682, label %2674, !llvm.loop !119

2682:                                             ; preds = %2674, %2671
  %2683 = phi i32 [ %2669, %2671 ], [ %2679, %2674 ]
  %2684 = phi ptr [ %2665, %2671 ], [ %2678, %2674 ]
  %2685 = icmp ult i32 %2669, 8
  br i1 %2685, label %2700, label %2686

2686:                                             ; preds = %2682, %2686
  %2687 = phi i32 [ %2697, %2686 ], [ %2683, %2682 ]
  %2688 = phi ptr [ %2696, %2686 ], [ %2684, %2682 ]
  %2689 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2689, i8 -1, i64 16, i1 false)
  %2690 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2690, i8 -1, i64 16, i1 false)
  %2691 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2691, i8 -1, i64 16, i1 false)
  %2692 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2692, i8 -1, i64 16, i1 false)
  %2693 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2693, i8 -1, i64 16, i1 false)
  %2694 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2694, i8 -1, i64 16, i1 false)
  %2695 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2695, i8 -1, i64 16, i1 false)
  %2696 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2688, i64 8
  %2697 = add nsw i32 %2687, -8
  %2698 = add i32 %2687, -9
  %2699 = icmp ult i32 %2698, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2696, i8 -1, i64 16, i1 false)
  br i1 %2699, label %2686, label %2700, !llvm.loop !72

2700:                                             ; preds = %2682, %2686, %2651
  %2701 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2702 = getelementptr inbounds %struct.regexp_internal, ptr %2658, i64 1
  %2703 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2659, ptr noundef nonnull %2702)
  %2704 = icmp eq i64 %2703, -1
  br i1 %2704, label %2705, label %2713

2705:                                             ; preds = %2700
  %2706 = load ptr, ptr %2609, align 8, !tbaa !63
  %2707 = icmp eq ptr %2706, null
  br i1 %2707, label %2709, label %2708

2708:                                             ; preds = %2705
  store ptr %2706, ptr %6, align 8, !tbaa !35
  br label %2709

2709:                                             ; preds = %2708, %2705
  %2710 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2711 = icmp sgt i32 %2710, %2701
  br i1 %2711, label %2712, label %2717

2712:                                             ; preds = %2709
  call void @Perl_leave_scope(i32 noundef %2701) #12
  br label %2717

2713:                                             ; preds = %2700
  %2714 = getelementptr inbounds %struct.regexp, ptr %2656, i64 0, i32 17
  %2715 = load ptr, ptr %2714, align 8, !tbaa !64
  %2716 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2715, i64 0, i32 1
  store i64 %2703, ptr %2716, align 8, !tbaa !74
  br label %5548

2717:                                             ; preds = %2709, %2712, %2644
  %2718 = phi i32 [ %2612, %2644 ], [ %2653, %2712 ], [ %2653, %2709 ]
  %2719 = load ptr, ptr %6, align 8, !tbaa !35
  %2720 = load i8, ptr %2719, align 1, !tbaa !5
  %2721 = zext i8 %2720 to i64
  %2722 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2721
  %2723 = load i8, ptr %2722, align 1, !tbaa !5
  %2724 = zext i8 %2723 to i64
  %2725 = getelementptr inbounds i8, ptr %2719, i64 %2724
  store ptr %2725, ptr %6, align 8, !tbaa !35
  %2726 = icmp ult ptr %2725, %3
  br i1 %2726, label %2610, label %2824, !llvm.loop !120

2727:                                             ; preds = %2566
  br i1 %2569, label %2732, label %2728

2728:                                             ; preds = %2727
  %2729 = getelementptr inbounds i8, ptr %2, i64 -1
  %2730 = load i8, ptr %2729, align 1, !tbaa !5
  %2731 = zext i8 %2730 to i64
  br label %2732

2732:                                             ; preds = %2727, %2728
  %2733 = phi i64 [ %2731, %2728 ], [ 10, %2727 ]
  %2734 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2733
  %2735 = load i32, ptr %2734, align 4, !tbaa !73
  %2736 = and i32 %2735, 1
  %2737 = icmp ult ptr %2, %3
  br i1 %2737, label %2738, label %2824

2738:                                             ; preds = %2732
  %2739 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2740 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2741

2741:                                             ; preds = %2738, %2819
  %2742 = phi i32 [ %2736, %2738 ], [ %2821, %2819 ]
  %2743 = phi ptr [ %2, %2738 ], [ %2822, %2819 ]
  %2744 = load i8, ptr %2743, align 1, !tbaa !5
  %2745 = zext i8 %2744 to i64
  %2746 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %2745
  %2747 = load i32, ptr %2746, align 4, !tbaa !73
  %2748 = and i32 %2747, 1
  %2749 = xor i32 %2748, 1
  %2750 = icmp eq i32 %2742, %2749
  br i1 %2750, label %2751, label %2819

2751:                                             ; preds = %2741
  %2752 = load i8, ptr %2739, align 8, !tbaa !31, !range !42, !noundef !43
  %2753 = icmp eq i8 %2752, 0
  br i1 %2753, label %2754, label %5548

2754:                                             ; preds = %2751
  %2755 = load ptr, ptr %4, align 8, !tbaa !62
  %2756 = getelementptr i8, ptr %2755, i64 16
  %2757 = load ptr, ptr %2756, align 8, !tbaa !5
  %2758 = getelementptr inbounds %struct.regexp, ptr %2757, i64 0, i32 14
  %2759 = load ptr, ptr %2758, align 8, !tbaa !20
  store ptr null, ptr %2740, align 8, !tbaa !63
  %2760 = load ptr, ptr %2567, align 8, !tbaa !26
  %2761 = ptrtoint ptr %2743 to i64
  %2762 = ptrtoint ptr %2760 to i64
  %2763 = sub i64 %2761, %2762
  %2764 = getelementptr inbounds %struct.regexp, ptr %2757, i64 0, i32 17
  %2765 = load ptr, ptr %2764, align 8, !tbaa !64
  store i64 %2763, ptr %2765, align 8, !tbaa !65
  %2766 = getelementptr inbounds %struct.regexp, ptr %2757, i64 0, i32 15
  store i32 0, ptr %2766, align 8, !tbaa !67
  %2767 = getelementptr inbounds %struct.regexp, ptr %2757, i64 0, i32 16
  store i32 0, ptr %2767, align 4, !tbaa !68
  %2768 = getelementptr inbounds %struct.regexp, ptr %2757, i64 0, i32 12
  %2769 = load i32, ptr %2768, align 8, !tbaa !69
  %2770 = icmp sgt i32 %2769, 0
  br i1 %2770, label %2771, label %2800

2771:                                             ; preds = %2754
  %2772 = and i32 %2769, 7
  %2773 = icmp eq i32 %2772, 0
  br i1 %2773, label %2782, label %2774

2774:                                             ; preds = %2771, %2774
  %2775 = phi i32 [ %2779, %2774 ], [ %2769, %2771 ]
  %2776 = phi ptr [ %2778, %2774 ], [ %2765, %2771 ]
  %2777 = phi i32 [ %2780, %2774 ], [ 0, %2771 ]
  %2778 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2776, i64 1
  %2779 = add nsw i32 %2775, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2778, i8 -1, i64 16, i1 false)
  %2780 = add i32 %2777, 1
  %2781 = icmp eq i32 %2780, %2772
  br i1 %2781, label %2782, label %2774, !llvm.loop !121

2782:                                             ; preds = %2774, %2771
  %2783 = phi i32 [ %2769, %2771 ], [ %2779, %2774 ]
  %2784 = phi ptr [ %2765, %2771 ], [ %2778, %2774 ]
  %2785 = icmp ult i32 %2769, 8
  br i1 %2785, label %2800, label %2786

2786:                                             ; preds = %2782, %2786
  %2787 = phi i32 [ %2797, %2786 ], [ %2783, %2782 ]
  %2788 = phi ptr [ %2796, %2786 ], [ %2784, %2782 ]
  %2789 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2789, i8 -1, i64 16, i1 false)
  %2790 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2790, i8 -1, i64 16, i1 false)
  %2791 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2791, i8 -1, i64 16, i1 false)
  %2792 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2792, i8 -1, i64 16, i1 false)
  %2793 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2793, i8 -1, i64 16, i1 false)
  %2794 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2794, i8 -1, i64 16, i1 false)
  %2795 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2795, i8 -1, i64 16, i1 false)
  %2796 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2788, i64 8
  %2797 = add nsw i32 %2787, -8
  %2798 = add i32 %2787, -9
  %2799 = icmp ult i32 %2798, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2796, i8 -1, i64 16, i1 false)
  br i1 %2799, label %2786, label %2800, !llvm.loop !72

2800:                                             ; preds = %2782, %2786, %2754
  %2801 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2802 = getelementptr inbounds %struct.regexp_internal, ptr %2759, i64 1
  %2803 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %2743, ptr noundef nonnull %2802)
  %2804 = icmp eq i64 %2803, -1
  br i1 %2804, label %2805, label %2812

2805:                                             ; preds = %2800
  %2806 = load ptr, ptr %2740, align 8, !tbaa !63
  %2807 = icmp eq ptr %2806, null
  %2808 = select i1 %2807, ptr %2743, ptr %2806
  %2809 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2810 = icmp sgt i32 %2809, %2801
  br i1 %2810, label %2811, label %2816

2811:                                             ; preds = %2805
  tail call void @Perl_leave_scope(i32 noundef %2801) #12
  br label %2816

2812:                                             ; preds = %2800
  %2813 = getelementptr inbounds %struct.regexp, ptr %2757, i64 0, i32 17
  %2814 = load ptr, ptr %2813, align 8, !tbaa !64
  %2815 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2814, i64 0, i32 1
  store i64 %2803, ptr %2815, align 8, !tbaa !74
  br label %5548

2816:                                             ; preds = %2811, %2805
  %2817 = icmp eq i32 %2742, 0
  %2818 = zext i1 %2817 to i32
  br label %2819

2819:                                             ; preds = %2741, %2816
  %2820 = phi ptr [ %2808, %2816 ], [ %2743, %2741 ]
  %2821 = phi i32 [ %2818, %2816 ], [ %2742, %2741 ]
  %2822 = getelementptr inbounds i8, ptr %2820, i64 1
  store ptr %2822, ptr %6, align 8, !tbaa !35
  %2823 = icmp ult ptr %2822, %3
  br i1 %2823, label %2741, label %2824, !llvm.loop !122

2824:                                             ; preds = %2819, %2717, %2732, %2604
  %2825 = phi i32 [ %2597, %2604 ], [ %2736, %2732 ], [ %2718, %2717 ], [ %2821, %2819 ]
  %2826 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), align 4, !tbaa !73
  %2827 = and i32 %2826, 1
  %2828 = xor i32 %2827, 1
  %2829 = icmp eq i32 %2825, %2828
  br i1 %2829, label %2830, label %5550

2830:                                             ; preds = %2824
  %2831 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2832 = load i8, ptr %2831, align 8, !tbaa !31, !range !42, !noundef !43
  %2833 = icmp eq i8 %2832, 0
  br i1 %2833, label %2834, label %5548

2834:                                             ; preds = %2830
  %2835 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %2836 = icmp eq i32 %2835, 0
  br i1 %2836, label %5550, label %5548

2837:                                             ; preds = %2563
  %2838 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %2839 = load ptr, ptr %2838, align 8, !tbaa !26
  %2840 = icmp eq ptr %2839, %2
  br i1 %2840, label %2841, label %2861

2841:                                             ; preds = %2837
  %2842 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2843 = load i8, ptr %2842, align 8, !tbaa !31, !range !42, !noundef !43
  %2844 = icmp eq i8 %2843, 0
  br i1 %2844, label %2845, label %2847

2845:                                             ; preds = %2841
  %2846 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  br label %2847

2847:                                             ; preds = %2845, %2841
  %2848 = phi i32 [ 1, %2841 ], [ %2846, %2845 ]
  %2849 = icmp eq i32 %2565, %2848
  br i1 %2849, label %2850, label %5548

2850:                                             ; preds = %2847
  %2851 = load ptr, ptr %6, align 8, !tbaa !35
  br i1 %25, label %2852, label %2858

2852:                                             ; preds = %2850
  %2853 = load i8, ptr %2851, align 1, !tbaa !5
  %2854 = zext i8 %2853 to i64
  %2855 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2854
  %2856 = load i8, ptr %2855, align 1, !tbaa !5
  %2857 = zext i8 %2856 to i64
  br label %2858

2858:                                             ; preds = %2850, %2852
  %2859 = phi i64 [ %2857, %2852 ], [ 1, %2850 ]
  %2860 = getelementptr inbounds i8, ptr %2851, i64 %2859
  store ptr %2860, ptr %6, align 8, !tbaa !35
  br label %2861

2861:                                             ; preds = %2858, %2837
  %2862 = phi ptr [ %2860, %2858 ], [ %2, %2837 ]
  br i1 %25, label %2868, label %2863

2863:                                             ; preds = %2861
  %2864 = icmp ult ptr %2862, %3
  br i1 %2864, label %2865, label %3062

2865:                                             ; preds = %2863
  %2866 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2867 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2980

2868:                                             ; preds = %2861
  %2869 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !35
  %2870 = load ptr, ptr %2838, align 8, !tbaa !26
  %2871 = tail call fastcc ptr @S_reghop3(ptr noundef %2862, i64 noundef -1, ptr noundef %2870)
  %2872 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %2873 = load ptr, ptr %2872, align 8, !tbaa !27
  %2874 = ptrtoint ptr %2873 to i64
  %2875 = ptrtoint ptr %2871 to i64
  %2876 = sub i64 %2874, %2875
  %2877 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %2878 = select i1 %2877, i32 0, i32 -8161
  %2879 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2871, i64 noundef %2876, ptr noundef null, i32 noundef %2878) #12
  %2880 = tail call i64 @Perl__invlist_search(ptr noundef %2869, i64 noundef %2879) #12
  %2881 = icmp ult ptr %2862, %3
  br i1 %2881, label %2882, label %3062

2882:                                             ; preds = %2868
  %2883 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %2880
  %2884 = load i32, ptr %2883, align 4, !tbaa !5
  %2885 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %2886 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %2887

2887:                                             ; preds = %2882, %2970
  %2888 = phi i32 [ %2884, %2882 ], [ %2972, %2970 ]
  %2889 = phi ptr [ %2862, %2882 ], [ %2978, %2970 ]
  %2890 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !35
  %2891 = load ptr, ptr %2872, align 8, !tbaa !27
  %2892 = ptrtoint ptr %2891 to i64
  %2893 = ptrtoint ptr %2889 to i64
  %2894 = sub i64 %2892, %2893
  %2895 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %2896 = select i1 %2895, i32 0, i32 -8161
  %2897 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %2889, i64 noundef %2894, ptr noundef null, i32 noundef %2896) #12
  %2898 = tail call i64 @Perl__invlist_search(ptr noundef %2890, i64 noundef %2897) #12
  %2899 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %2898
  %2900 = load i32, ptr %2899, align 4, !tbaa !5
  %2901 = tail call fastcc zeroext i1 @S_isGCB(i32 noundef %2888, i32 noundef %2900)
  %2902 = zext i1 %2901 to i32
  %2903 = icmp eq i32 %2565, %2902
  br i1 %2903, label %2970, label %2904

2904:                                             ; preds = %2887
  %2905 = load i8, ptr %2885, align 8, !tbaa !31, !range !42, !noundef !43
  %2906 = icmp eq i8 %2905, 0
  br i1 %2906, label %2907, label %5548

2907:                                             ; preds = %2904
  %2908 = load ptr, ptr %4, align 8, !tbaa !62
  %2909 = getelementptr i8, ptr %2908, i64 16
  %2910 = load ptr, ptr %2909, align 8, !tbaa !5
  %2911 = getelementptr inbounds %struct.regexp, ptr %2910, i64 0, i32 14
  %2912 = load ptr, ptr %2911, align 8, !tbaa !20
  store ptr null, ptr %2886, align 8, !tbaa !63
  %2913 = load ptr, ptr %2838, align 8, !tbaa !26
  %2914 = ptrtoint ptr %2913 to i64
  %2915 = sub i64 %2893, %2914
  %2916 = getelementptr inbounds %struct.regexp, ptr %2910, i64 0, i32 17
  %2917 = load ptr, ptr %2916, align 8, !tbaa !64
  store i64 %2915, ptr %2917, align 8, !tbaa !65
  %2918 = getelementptr inbounds %struct.regexp, ptr %2910, i64 0, i32 15
  store i32 0, ptr %2918, align 8, !tbaa !67
  %2919 = getelementptr inbounds %struct.regexp, ptr %2910, i64 0, i32 16
  store i32 0, ptr %2919, align 4, !tbaa !68
  %2920 = getelementptr inbounds %struct.regexp, ptr %2910, i64 0, i32 12
  %2921 = load i32, ptr %2920, align 8, !tbaa !69
  %2922 = icmp sgt i32 %2921, 0
  br i1 %2922, label %2923, label %2952

2923:                                             ; preds = %2907
  %2924 = and i32 %2921, 7
  %2925 = icmp eq i32 %2924, 0
  br i1 %2925, label %2934, label %2926

2926:                                             ; preds = %2923, %2926
  %2927 = phi i32 [ %2931, %2926 ], [ %2921, %2923 ]
  %2928 = phi ptr [ %2930, %2926 ], [ %2917, %2923 ]
  %2929 = phi i32 [ %2932, %2926 ], [ 0, %2923 ]
  %2930 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2928, i64 1
  %2931 = add nsw i32 %2927, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2930, i8 -1, i64 16, i1 false)
  %2932 = add i32 %2929, 1
  %2933 = icmp eq i32 %2932, %2924
  br i1 %2933, label %2934, label %2926, !llvm.loop !123

2934:                                             ; preds = %2926, %2923
  %2935 = phi i32 [ %2921, %2923 ], [ %2931, %2926 ]
  %2936 = phi ptr [ %2917, %2923 ], [ %2930, %2926 ]
  %2937 = icmp ult i32 %2921, 8
  br i1 %2937, label %2952, label %2938

2938:                                             ; preds = %2934, %2938
  %2939 = phi i32 [ %2949, %2938 ], [ %2935, %2934 ]
  %2940 = phi ptr [ %2948, %2938 ], [ %2936, %2934 ]
  %2941 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2941, i8 -1, i64 16, i1 false)
  %2942 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2942, i8 -1, i64 16, i1 false)
  %2943 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2943, i8 -1, i64 16, i1 false)
  %2944 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2944, i8 -1, i64 16, i1 false)
  %2945 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2945, i8 -1, i64 16, i1 false)
  %2946 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2946, i8 -1, i64 16, i1 false)
  %2947 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2947, i8 -1, i64 16, i1 false)
  %2948 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2940, i64 8
  %2949 = add nsw i32 %2939, -8
  %2950 = add i32 %2939, -9
  %2951 = icmp ult i32 %2950, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2948, i8 -1, i64 16, i1 false)
  br i1 %2951, label %2938, label %2952, !llvm.loop !72

2952:                                             ; preds = %2934, %2938, %2907
  %2953 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2954 = getelementptr inbounds %struct.regexp_internal, ptr %2912, i64 1
  %2955 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2889, ptr noundef nonnull %2954)
  %2956 = icmp eq i64 %2955, -1
  br i1 %2956, label %2957, label %2966

2957:                                             ; preds = %2952
  %2958 = load ptr, ptr %2886, align 8, !tbaa !63
  %2959 = icmp eq ptr %2958, null
  br i1 %2959, label %2961, label %2960

2960:                                             ; preds = %2957
  store ptr %2958, ptr %6, align 8, !tbaa !35
  br label %2961

2961:                                             ; preds = %2960, %2957
  %2962 = phi ptr [ %2958, %2960 ], [ %2889, %2957 ]
  %2963 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2964 = icmp sgt i32 %2963, %2953
  br i1 %2964, label %2965, label %2970

2965:                                             ; preds = %2961
  tail call void @Perl_leave_scope(i32 noundef %2953) #12
  br label %2970

2966:                                             ; preds = %2952
  %2967 = getelementptr inbounds %struct.regexp, ptr %2910, i64 0, i32 17
  %2968 = load ptr, ptr %2967, align 8, !tbaa !64
  %2969 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2968, i64 0, i32 1
  store i64 %2955, ptr %2969, align 8, !tbaa !74
  br label %5548

2970:                                             ; preds = %2961, %2965, %2887
  %2971 = phi ptr [ %2889, %2887 ], [ %2962, %2965 ], [ %2962, %2961 ]
  %2972 = phi i32 [ %2888, %2887 ], [ %2900, %2965 ], [ %2900, %2961 ]
  %2973 = load i8, ptr %2971, align 1, !tbaa !5
  %2974 = zext i8 %2973 to i64
  %2975 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %2974
  %2976 = load i8, ptr %2975, align 1, !tbaa !5
  %2977 = zext i8 %2976 to i64
  %2978 = getelementptr inbounds i8, ptr %2971, i64 %2977
  store ptr %2978, ptr %6, align 8, !tbaa !35
  %2979 = icmp ult ptr %2978, %3
  br i1 %2979, label %2887, label %3062, !llvm.loop !124

2980:                                             ; preds = %2865, %3059
  %2981 = phi ptr [ %2862, %2865 ], [ %3060, %3059 ]
  %2982 = getelementptr inbounds i8, ptr %2981, i64 -1
  %2983 = load i8, ptr %2982, align 1, !tbaa !5
  %2984 = icmp eq i8 %2983, 13
  br i1 %2984, label %2985, label %2988

2985:                                             ; preds = %2980
  %2986 = load i8, ptr %2981, align 1, !tbaa !5
  %2987 = icmp ne i8 %2986, 10
  br label %2988

2988:                                             ; preds = %2985, %2980
  %2989 = phi i1 [ true, %2980 ], [ %2987, %2985 ]
  %2990 = zext i1 %2989 to i32
  %2991 = icmp eq i32 %2565, %2990
  br i1 %2991, label %3059, label %2992

2992:                                             ; preds = %2988
  %2993 = load i8, ptr %2866, align 8, !tbaa !31, !range !42, !noundef !43
  %2994 = icmp eq i8 %2993, 0
  br i1 %2994, label %2995, label %5548

2995:                                             ; preds = %2992
  %2996 = load ptr, ptr %4, align 8, !tbaa !62
  %2997 = getelementptr i8, ptr %2996, i64 16
  %2998 = load ptr, ptr %2997, align 8, !tbaa !5
  %2999 = getelementptr inbounds %struct.regexp, ptr %2998, i64 0, i32 14
  %3000 = load ptr, ptr %2999, align 8, !tbaa !20
  store ptr null, ptr %2867, align 8, !tbaa !63
  %3001 = load ptr, ptr %2838, align 8, !tbaa !26
  %3002 = ptrtoint ptr %2981 to i64
  %3003 = ptrtoint ptr %3001 to i64
  %3004 = sub i64 %3002, %3003
  %3005 = getelementptr inbounds %struct.regexp, ptr %2998, i64 0, i32 17
  %3006 = load ptr, ptr %3005, align 8, !tbaa !64
  store i64 %3004, ptr %3006, align 8, !tbaa !65
  %3007 = getelementptr inbounds %struct.regexp, ptr %2998, i64 0, i32 15
  store i32 0, ptr %3007, align 8, !tbaa !67
  %3008 = getelementptr inbounds %struct.regexp, ptr %2998, i64 0, i32 16
  store i32 0, ptr %3008, align 4, !tbaa !68
  %3009 = getelementptr inbounds %struct.regexp, ptr %2998, i64 0, i32 12
  %3010 = load i32, ptr %3009, align 8, !tbaa !69
  %3011 = icmp sgt i32 %3010, 0
  br i1 %3011, label %3012, label %3041

3012:                                             ; preds = %2995
  %3013 = and i32 %3010, 7
  %3014 = icmp eq i32 %3013, 0
  br i1 %3014, label %3023, label %3015

3015:                                             ; preds = %3012, %3015
  %3016 = phi i32 [ %3020, %3015 ], [ %3010, %3012 ]
  %3017 = phi ptr [ %3019, %3015 ], [ %3006, %3012 ]
  %3018 = phi i32 [ %3021, %3015 ], [ 0, %3012 ]
  %3019 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3017, i64 1
  %3020 = add nsw i32 %3016, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3019, i8 -1, i64 16, i1 false)
  %3021 = add i32 %3018, 1
  %3022 = icmp eq i32 %3021, %3013
  br i1 %3022, label %3023, label %3015, !llvm.loop !125

3023:                                             ; preds = %3015, %3012
  %3024 = phi i32 [ %3010, %3012 ], [ %3020, %3015 ]
  %3025 = phi ptr [ %3006, %3012 ], [ %3019, %3015 ]
  %3026 = icmp ult i32 %3010, 8
  br i1 %3026, label %3041, label %3027

3027:                                             ; preds = %3023, %3027
  %3028 = phi i32 [ %3038, %3027 ], [ %3024, %3023 ]
  %3029 = phi ptr [ %3037, %3027 ], [ %3025, %3023 ]
  %3030 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3030, i8 -1, i64 16, i1 false)
  %3031 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3031, i8 -1, i64 16, i1 false)
  %3032 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3032, i8 -1, i64 16, i1 false)
  %3033 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3033, i8 -1, i64 16, i1 false)
  %3034 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3034, i8 -1, i64 16, i1 false)
  %3035 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3035, i8 -1, i64 16, i1 false)
  %3036 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3036, i8 -1, i64 16, i1 false)
  %3037 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3029, i64 8
  %3038 = add nsw i32 %3028, -8
  %3039 = add i32 %3028, -9
  %3040 = icmp ult i32 %3039, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3037, i8 -1, i64 16, i1 false)
  br i1 %3040, label %3027, label %3041, !llvm.loop !72

3041:                                             ; preds = %3023, %3027, %2995
  %3042 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3043 = getelementptr inbounds %struct.regexp_internal, ptr %3000, i64 1
  %3044 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %2981, ptr noundef nonnull %3043)
  %3045 = icmp eq i64 %3044, -1
  br i1 %3045, label %3046, label %3053

3046:                                             ; preds = %3041
  %3047 = load ptr, ptr %2867, align 8, !tbaa !63
  %3048 = icmp eq ptr %3047, null
  %3049 = select i1 %3048, ptr %2981, ptr %3047
  %3050 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3051 = icmp sgt i32 %3050, %3042
  br i1 %3051, label %3052, label %3057

3052:                                             ; preds = %3046
  tail call void @Perl_leave_scope(i32 noundef %3042) #12
  br label %3057

3053:                                             ; preds = %3041
  %3054 = getelementptr inbounds %struct.regexp, ptr %2998, i64 0, i32 17
  %3055 = load ptr, ptr %3054, align 8, !tbaa !64
  %3056 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3055, i64 0, i32 1
  store i64 %3044, ptr %3056, align 8, !tbaa !74
  br label %5548

3057:                                             ; preds = %3052, %3046
  %3058 = getelementptr inbounds i8, ptr %3049, i64 1
  store ptr %3058, ptr %6, align 8, !tbaa !35
  br label %3059

3059:                                             ; preds = %3057, %2988
  %3060 = phi ptr [ %3058, %3057 ], [ %2981, %2988 ]
  %3061 = icmp ult ptr %3060, %3
  br i1 %3061, label %2980, label %3062, !llvm.loop !126

3062:                                             ; preds = %3059, %2970, %2863, %2868
  %3063 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3064 = load i8, ptr %3063, align 8, !tbaa !31, !range !42, !noundef !43
  %3065 = icmp eq i8 %3064, 0
  br i1 %3065, label %3066, label %3068

3066:                                             ; preds = %3062
  %3067 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  br label %3068

3068:                                             ; preds = %3066, %3062
  %3069 = phi i32 [ 1, %3062 ], [ %3067, %3066 ]
  %3070 = icmp eq i32 %2565, %3069
  br i1 %3070, label %5550, label %5548

3071:                                             ; preds = %2563
  %3072 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %3073 = load ptr, ptr %3072, align 8, !tbaa !26
  %3074 = icmp eq ptr %3073, %2
  br i1 %3074, label %3075, label %3095

3075:                                             ; preds = %3071
  %3076 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3077 = load i8, ptr %3076, align 8, !tbaa !31, !range !42, !noundef !43
  %3078 = icmp eq i8 %3077, 0
  br i1 %3078, label %3079, label %3081

3079:                                             ; preds = %3075
  %3080 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  br label %3081

3081:                                             ; preds = %3079, %3075
  %3082 = phi i32 [ 1, %3075 ], [ %3080, %3079 ]
  %3083 = icmp eq i32 %2565, %3082
  br i1 %3083, label %3084, label %5548

3084:                                             ; preds = %3081
  %3085 = load ptr, ptr %6, align 8, !tbaa !35
  br i1 %25, label %3086, label %3092

3086:                                             ; preds = %3084
  %3087 = load i8, ptr %3085, align 1, !tbaa !5
  %3088 = zext i8 %3087 to i64
  %3089 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3088
  %3090 = load i8, ptr %3089, align 1, !tbaa !5
  %3091 = zext i8 %3090 to i64
  br label %3092

3092:                                             ; preds = %3084, %3086
  %3093 = phi i64 [ %3091, %3086 ], [ 1, %3084 ]
  %3094 = getelementptr inbounds i8, ptr %3085, i64 %3093
  store ptr %3094, ptr %6, align 8, !tbaa !35
  br label %3095

3095:                                             ; preds = %3092, %3071
  %3096 = phi ptr [ %3094, %3092 ], [ %2, %3071 ]
  %3097 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  br i1 %25, label %3098, label %3211

3098:                                             ; preds = %3095
  %3099 = load ptr, ptr %3072, align 8, !tbaa !26
  %3100 = tail call fastcc ptr @S_reghop3(ptr noundef %3096, i64 noundef -1, ptr noundef %3099)
  %3101 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3102 = load ptr, ptr %3101, align 8, !tbaa !27
  %3103 = ptrtoint ptr %3102 to i64
  %3104 = ptrtoint ptr %3100 to i64
  %3105 = sub i64 %3103, %3104
  %3106 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3107 = select i1 %3106, i32 0, i32 -8161
  %3108 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3100, i64 noundef %3105, ptr noundef null, i32 noundef %3107) #12
  %3109 = tail call i64 @Perl__invlist_search(ptr noundef %3097, i64 noundef %3108) #12
  %3110 = icmp ult ptr %3096, %3
  br i1 %3110, label %3111, label %3249

3111:                                             ; preds = %3098
  %3112 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3109
  %3113 = load i32, ptr %3112, align 4, !tbaa !5
  %3114 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3115 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %3116

3116:                                             ; preds = %3111, %3201
  %3117 = phi i32 [ %3113, %3111 ], [ %3203, %3201 ]
  %3118 = phi ptr [ %3096, %3111 ], [ %3209, %3201 ]
  %3119 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %3120 = load ptr, ptr %3101, align 8, !tbaa !27
  %3121 = ptrtoint ptr %3120 to i64
  %3122 = ptrtoint ptr %3118 to i64
  %3123 = sub i64 %3121, %3122
  %3124 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3125 = select i1 %3124, i32 0, i32 -8161
  %3126 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3118, i64 noundef %3123, ptr noundef null, i32 noundef %3125) #12
  %3127 = tail call i64 @Perl__invlist_search(ptr noundef %3119, i64 noundef %3126) #12
  %3128 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3127
  %3129 = load i32, ptr %3128, align 4, !tbaa !5
  %3130 = load ptr, ptr %3072, align 8, !tbaa !26
  %3131 = load ptr, ptr %3101, align 8, !tbaa !27
  %3132 = tail call fastcc zeroext i1 @S_isSB(i32 noundef %3117, i32 noundef %3129, ptr noundef %3130, ptr noundef %3118, ptr noundef %3131, i1 noundef zeroext true)
  %3133 = zext i1 %3132 to i32
  %3134 = icmp eq i32 %2565, %3133
  br i1 %3134, label %3201, label %3135

3135:                                             ; preds = %3116
  %3136 = load i8, ptr %3114, align 8, !tbaa !31, !range !42, !noundef !43
  %3137 = icmp eq i8 %3136, 0
  br i1 %3137, label %3138, label %5548

3138:                                             ; preds = %3135
  %3139 = load ptr, ptr %4, align 8, !tbaa !62
  %3140 = getelementptr i8, ptr %3139, i64 16
  %3141 = load ptr, ptr %3140, align 8, !tbaa !5
  %3142 = getelementptr inbounds %struct.regexp, ptr %3141, i64 0, i32 14
  %3143 = load ptr, ptr %3142, align 8, !tbaa !20
  store ptr null, ptr %3115, align 8, !tbaa !63
  %3144 = load ptr, ptr %3072, align 8, !tbaa !26
  %3145 = ptrtoint ptr %3144 to i64
  %3146 = sub i64 %3122, %3145
  %3147 = getelementptr inbounds %struct.regexp, ptr %3141, i64 0, i32 17
  %3148 = load ptr, ptr %3147, align 8, !tbaa !64
  store i64 %3146, ptr %3148, align 8, !tbaa !65
  %3149 = getelementptr inbounds %struct.regexp, ptr %3141, i64 0, i32 15
  store i32 0, ptr %3149, align 8, !tbaa !67
  %3150 = getelementptr inbounds %struct.regexp, ptr %3141, i64 0, i32 16
  store i32 0, ptr %3150, align 4, !tbaa !68
  %3151 = getelementptr inbounds %struct.regexp, ptr %3141, i64 0, i32 12
  %3152 = load i32, ptr %3151, align 8, !tbaa !69
  %3153 = icmp sgt i32 %3152, 0
  br i1 %3153, label %3154, label %3183

3154:                                             ; preds = %3138
  %3155 = and i32 %3152, 7
  %3156 = icmp eq i32 %3155, 0
  br i1 %3156, label %3165, label %3157

3157:                                             ; preds = %3154, %3157
  %3158 = phi i32 [ %3162, %3157 ], [ %3152, %3154 ]
  %3159 = phi ptr [ %3161, %3157 ], [ %3148, %3154 ]
  %3160 = phi i32 [ %3163, %3157 ], [ 0, %3154 ]
  %3161 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3159, i64 1
  %3162 = add nsw i32 %3158, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3161, i8 -1, i64 16, i1 false)
  %3163 = add i32 %3160, 1
  %3164 = icmp eq i32 %3163, %3155
  br i1 %3164, label %3165, label %3157, !llvm.loop !127

3165:                                             ; preds = %3157, %3154
  %3166 = phi i32 [ %3152, %3154 ], [ %3162, %3157 ]
  %3167 = phi ptr [ %3148, %3154 ], [ %3161, %3157 ]
  %3168 = icmp ult i32 %3152, 8
  br i1 %3168, label %3183, label %3169

3169:                                             ; preds = %3165, %3169
  %3170 = phi i32 [ %3180, %3169 ], [ %3166, %3165 ]
  %3171 = phi ptr [ %3179, %3169 ], [ %3167, %3165 ]
  %3172 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3172, i8 -1, i64 16, i1 false)
  %3173 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3173, i8 -1, i64 16, i1 false)
  %3174 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3174, i8 -1, i64 16, i1 false)
  %3175 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3175, i8 -1, i64 16, i1 false)
  %3176 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3176, i8 -1, i64 16, i1 false)
  %3177 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3177, i8 -1, i64 16, i1 false)
  %3178 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3178, i8 -1, i64 16, i1 false)
  %3179 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3171, i64 8
  %3180 = add nsw i32 %3170, -8
  %3181 = add i32 %3170, -9
  %3182 = icmp ult i32 %3181, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3179, i8 -1, i64 16, i1 false)
  br i1 %3182, label %3169, label %3183, !llvm.loop !72

3183:                                             ; preds = %3165, %3169, %3138
  %3184 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3185 = getelementptr inbounds %struct.regexp_internal, ptr %3143, i64 1
  %3186 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3118, ptr noundef nonnull %3185)
  %3187 = icmp eq i64 %3186, -1
  br i1 %3187, label %3188, label %3197

3188:                                             ; preds = %3183
  %3189 = load ptr, ptr %3115, align 8, !tbaa !63
  %3190 = icmp eq ptr %3189, null
  br i1 %3190, label %3192, label %3191

3191:                                             ; preds = %3188
  store ptr %3189, ptr %6, align 8, !tbaa !35
  br label %3192

3192:                                             ; preds = %3191, %3188
  %3193 = phi ptr [ %3189, %3191 ], [ %3118, %3188 ]
  %3194 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3195 = icmp sgt i32 %3194, %3184
  br i1 %3195, label %3196, label %3201

3196:                                             ; preds = %3192
  tail call void @Perl_leave_scope(i32 noundef %3184) #12
  br label %3201

3197:                                             ; preds = %3183
  %3198 = getelementptr inbounds %struct.regexp, ptr %3141, i64 0, i32 17
  %3199 = load ptr, ptr %3198, align 8, !tbaa !64
  %3200 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3199, i64 0, i32 1
  store i64 %3186, ptr %3200, align 8, !tbaa !74
  br label %5548

3201:                                             ; preds = %3192, %3196, %3116
  %3202 = phi ptr [ %3118, %3116 ], [ %3193, %3196 ], [ %3193, %3192 ]
  %3203 = phi i32 [ %3117, %3116 ], [ %3129, %3196 ], [ %3129, %3192 ]
  %3204 = load i8, ptr %3202, align 1, !tbaa !5
  %3205 = zext i8 %3204 to i64
  %3206 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3205
  %3207 = load i8, ptr %3206, align 1, !tbaa !5
  %3208 = zext i8 %3207 to i64
  %3209 = getelementptr inbounds i8, ptr %3202, i64 %3208
  store ptr %3209, ptr %6, align 8, !tbaa !35
  %3210 = icmp ult ptr %3209, %3
  br i1 %3210, label %3116, label %3249, !llvm.loop !128

3211:                                             ; preds = %3095
  %3212 = getelementptr inbounds i8, ptr %3096, i64 -1
  %3213 = load i8, ptr %3212, align 1, !tbaa !5
  %3214 = zext i8 %3213 to i64
  %3215 = tail call i64 @Perl__invlist_search(ptr noundef %3097, i64 noundef %3214) #12
  %3216 = icmp ult ptr %3096, %3
  br i1 %3216, label %3217, label %3249

3217:                                             ; preds = %3211
  %3218 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3215
  %3219 = load i32, ptr %3218, align 4, !tbaa !5
  %3220 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3221 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  br label %3222

3222:                                             ; preds = %3217, %3244
  %3223 = phi ptr [ %3096, %3217 ], [ %3247, %3244 ]
  %3224 = phi i32 [ %3219, %3217 ], [ %3246, %3244 ]
  %3225 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %3226 = load i8, ptr %3223, align 1, !tbaa !5
  %3227 = zext i8 %3226 to i64
  %3228 = tail call i64 @Perl__invlist_search(ptr noundef %3225, i64 noundef %3227) #12
  %3229 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %3228
  %3230 = load i32, ptr %3229, align 4, !tbaa !5
  %3231 = load ptr, ptr %3072, align 8, !tbaa !26
  %3232 = load ptr, ptr %3220, align 8, !tbaa !27
  %3233 = tail call fastcc zeroext i1 @S_isSB(i32 noundef %3224, i32 noundef %3230, ptr noundef %3231, ptr noundef nonnull %3223, ptr noundef %3232, i1 noundef zeroext false)
  %3234 = zext i1 %3233 to i32
  %3235 = icmp eq i32 %2565, %3234
  br i1 %3235, label %3244, label %3236

3236:                                             ; preds = %3222
  %3237 = load i8, ptr %3221, align 8, !tbaa !31, !range !42, !noundef !43
  %3238 = icmp eq i8 %3237, 0
  br i1 %3238, label %3239, label %5548

3239:                                             ; preds = %3236
  %3240 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %3241 = icmp eq i32 %3240, 0
  br i1 %3241, label %3242, label %5548

3242:                                             ; preds = %3239
  %3243 = load ptr, ptr %6, align 8, !tbaa !35
  br label %3244

3244:                                             ; preds = %3242, %3222
  %3245 = phi ptr [ %3223, %3222 ], [ %3243, %3242 ]
  %3246 = phi i32 [ %3224, %3222 ], [ %3230, %3242 ]
  %3247 = getelementptr inbounds i8, ptr %3245, i64 1
  store ptr %3247, ptr %6, align 8, !tbaa !35
  %3248 = icmp ult ptr %3247, %3
  br i1 %3248, label %3222, label %3249, !llvm.loop !129

3249:                                             ; preds = %3244, %3201, %3211, %3098
  %3250 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3251 = load i8, ptr %3250, align 8, !tbaa !31, !range !42, !noundef !43
  %3252 = icmp eq i8 %3251, 0
  br i1 %3252, label %3253, label %3255

3253:                                             ; preds = %3249
  %3254 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  br label %3255

3255:                                             ; preds = %3253, %3249
  %3256 = phi i32 [ 1, %3249 ], [ %3254, %3253 ]
  %3257 = icmp eq i32 %2565, %3256
  br i1 %3257, label %5550, label %5548

3258:                                             ; preds = %2563
  %3259 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %3260 = load ptr, ptr %3259, align 8, !tbaa !26
  %3261 = icmp eq ptr %3260, %2
  br i1 %3261, label %3262, label %3282

3262:                                             ; preds = %3258
  %3263 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3264 = load i8, ptr %3263, align 8, !tbaa !31, !range !42, !noundef !43
  %3265 = icmp eq i8 %3264, 0
  br i1 %3265, label %3266, label %3268

3266:                                             ; preds = %3262
  %3267 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  br label %3268

3268:                                             ; preds = %3266, %3262
  %3269 = phi i32 [ 1, %3262 ], [ %3267, %3266 ]
  %3270 = icmp eq i32 %2565, %3269
  br i1 %3270, label %3271, label %5548

3271:                                             ; preds = %3268
  %3272 = load ptr, ptr %6, align 8, !tbaa !35
  br i1 %25, label %3273, label %3279

3273:                                             ; preds = %3271
  %3274 = load i8, ptr %3272, align 1, !tbaa !5
  %3275 = zext i8 %3274 to i64
  %3276 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3275
  %3277 = load i8, ptr %3276, align 1, !tbaa !5
  %3278 = zext i8 %3277 to i64
  br label %3279

3279:                                             ; preds = %3271, %3273
  %3280 = phi i64 [ %3278, %3273 ], [ 1, %3271 ]
  %3281 = getelementptr inbounds i8, ptr %3272, i64 %3280
  store ptr %3281, ptr %6, align 8, !tbaa !35
  br label %3282

3282:                                             ; preds = %3279, %3258
  %3283 = phi ptr [ %3281, %3279 ], [ %2, %3258 ]
  %3284 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  br i1 %25, label %3285, label %3400

3285:                                             ; preds = %3282
  %3286 = load ptr, ptr %3259, align 8, !tbaa !26
  %3287 = tail call fastcc ptr @S_reghop3(ptr noundef %3283, i64 noundef -1, ptr noundef %3286)
  %3288 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3289 = load ptr, ptr %3288, align 8, !tbaa !27
  %3290 = ptrtoint ptr %3289 to i64
  %3291 = ptrtoint ptr %3287 to i64
  %3292 = sub i64 %3290, %3291
  %3293 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3294 = select i1 %3293, i32 0, i32 -8161
  %3295 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3287, i64 noundef %3292, ptr noundef null, i32 noundef %3294) #12
  %3296 = tail call i64 @Perl__invlist_search(ptr noundef %3284, i64 noundef %3295) #12
  %3297 = icmp ult ptr %3283, %3
  br i1 %3297, label %3298, label %3440

3298:                                             ; preds = %3285
  %3299 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3296
  %3300 = load i32, ptr %3299, align 4, !tbaa !5
  %3301 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3302 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  br label %3303

3303:                                             ; preds = %3298, %3389
  %3304 = phi i32 [ 18, %3298 ], [ %3392, %3389 ]
  %3305 = phi i32 [ %3300, %3298 ], [ %3391, %3389 ]
  %3306 = phi ptr [ %3283, %3298 ], [ %3398, %3389 ]
  %3307 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %3308 = load ptr, ptr %3288, align 8, !tbaa !27
  %3309 = ptrtoint ptr %3308 to i64
  %3310 = ptrtoint ptr %3306 to i64
  %3311 = sub i64 %3309, %3310
  %3312 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %3313 = select i1 %3312, i32 0, i32 -8161
  %3314 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef %3306, i64 noundef %3311, ptr noundef null, i32 noundef %3313) #12
  %3315 = tail call i64 @Perl__invlist_search(ptr noundef %3307, i64 noundef %3314) #12
  %3316 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3315
  %3317 = load i32, ptr %3316, align 4, !tbaa !5
  %3318 = load ptr, ptr %3259, align 8, !tbaa !26
  %3319 = load ptr, ptr %3288, align 8, !tbaa !27
  %3320 = tail call fastcc zeroext i1 @S_isWB(i32 noundef %3304, i32 noundef %3305, i32 noundef %3317, ptr noundef %3318, ptr noundef %3306, ptr noundef %3319, i1 noundef zeroext true)
  %3321 = zext i1 %3320 to i32
  %3322 = icmp eq i32 %2565, %3321
  br i1 %3322, label %3389, label %3323

3323:                                             ; preds = %3303
  %3324 = load i8, ptr %3301, align 8, !tbaa !31, !range !42, !noundef !43
  %3325 = icmp eq i8 %3324, 0
  br i1 %3325, label %3326, label %5548

3326:                                             ; preds = %3323
  %3327 = load ptr, ptr %4, align 8, !tbaa !62
  %3328 = getelementptr i8, ptr %3327, i64 16
  %3329 = load ptr, ptr %3328, align 8, !tbaa !5
  %3330 = getelementptr inbounds %struct.regexp, ptr %3329, i64 0, i32 14
  %3331 = load ptr, ptr %3330, align 8, !tbaa !20
  store ptr null, ptr %3302, align 8, !tbaa !63
  %3332 = load ptr, ptr %3259, align 8, !tbaa !26
  %3333 = ptrtoint ptr %3332 to i64
  %3334 = sub i64 %3310, %3333
  %3335 = getelementptr inbounds %struct.regexp, ptr %3329, i64 0, i32 17
  %3336 = load ptr, ptr %3335, align 8, !tbaa !64
  store i64 %3334, ptr %3336, align 8, !tbaa !65
  %3337 = getelementptr inbounds %struct.regexp, ptr %3329, i64 0, i32 15
  store i32 0, ptr %3337, align 8, !tbaa !67
  %3338 = getelementptr inbounds %struct.regexp, ptr %3329, i64 0, i32 16
  store i32 0, ptr %3338, align 4, !tbaa !68
  %3339 = getelementptr inbounds %struct.regexp, ptr %3329, i64 0, i32 12
  %3340 = load i32, ptr %3339, align 8, !tbaa !69
  %3341 = icmp sgt i32 %3340, 0
  br i1 %3341, label %3342, label %3371

3342:                                             ; preds = %3326
  %3343 = and i32 %3340, 7
  %3344 = icmp eq i32 %3343, 0
  br i1 %3344, label %3353, label %3345

3345:                                             ; preds = %3342, %3345
  %3346 = phi i32 [ %3350, %3345 ], [ %3340, %3342 ]
  %3347 = phi ptr [ %3349, %3345 ], [ %3336, %3342 ]
  %3348 = phi i32 [ %3351, %3345 ], [ 0, %3342 ]
  %3349 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3347, i64 1
  %3350 = add nsw i32 %3346, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3349, i8 -1, i64 16, i1 false)
  %3351 = add i32 %3348, 1
  %3352 = icmp eq i32 %3351, %3343
  br i1 %3352, label %3353, label %3345, !llvm.loop !130

3353:                                             ; preds = %3345, %3342
  %3354 = phi i32 [ %3340, %3342 ], [ %3350, %3345 ]
  %3355 = phi ptr [ %3336, %3342 ], [ %3349, %3345 ]
  %3356 = icmp ult i32 %3340, 8
  br i1 %3356, label %3371, label %3357

3357:                                             ; preds = %3353, %3357
  %3358 = phi i32 [ %3368, %3357 ], [ %3354, %3353 ]
  %3359 = phi ptr [ %3367, %3357 ], [ %3355, %3353 ]
  %3360 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3360, i8 -1, i64 16, i1 false)
  %3361 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3361, i8 -1, i64 16, i1 false)
  %3362 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3362, i8 -1, i64 16, i1 false)
  %3363 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3363, i8 -1, i64 16, i1 false)
  %3364 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3364, i8 -1, i64 16, i1 false)
  %3365 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3365, i8 -1, i64 16, i1 false)
  %3366 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3366, i8 -1, i64 16, i1 false)
  %3367 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3359, i64 8
  %3368 = add nsw i32 %3358, -8
  %3369 = add i32 %3358, -9
  %3370 = icmp ult i32 %3369, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3367, i8 -1, i64 16, i1 false)
  br i1 %3370, label %3357, label %3371, !llvm.loop !72

3371:                                             ; preds = %3353, %3357, %3326
  %3372 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3373 = getelementptr inbounds %struct.regexp_internal, ptr %3331, i64 1
  %3374 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3306, ptr noundef nonnull %3373)
  %3375 = icmp eq i64 %3374, -1
  br i1 %3375, label %3376, label %3385

3376:                                             ; preds = %3371
  %3377 = load ptr, ptr %3302, align 8, !tbaa !63
  %3378 = icmp eq ptr %3377, null
  br i1 %3378, label %3380, label %3379

3379:                                             ; preds = %3376
  store ptr %3377, ptr %6, align 8, !tbaa !35
  br label %3380

3380:                                             ; preds = %3379, %3376
  %3381 = phi ptr [ %3377, %3379 ], [ %3306, %3376 ]
  %3382 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3383 = icmp sgt i32 %3382, %3372
  br i1 %3383, label %3384, label %3389

3384:                                             ; preds = %3380
  tail call void @Perl_leave_scope(i32 noundef %3372) #12
  br label %3389

3385:                                             ; preds = %3371
  %3386 = getelementptr inbounds %struct.regexp, ptr %3329, i64 0, i32 17
  %3387 = load ptr, ptr %3386, align 8, !tbaa !64
  %3388 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3387, i64 0, i32 1
  store i64 %3374, ptr %3388, align 8, !tbaa !74
  br label %5548

3389:                                             ; preds = %3380, %3384, %3303
  %3390 = phi ptr [ %3306, %3303 ], [ %3381, %3384 ], [ %3381, %3380 ]
  %3391 = phi i32 [ %3305, %3303 ], [ %3317, %3384 ], [ %3317, %3380 ]
  %3392 = phi i32 [ %3304, %3303 ], [ %3305, %3384 ], [ %3305, %3380 ]
  %3393 = load i8, ptr %3390, align 1, !tbaa !5
  %3394 = zext i8 %3393 to i64
  %3395 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3394
  %3396 = load i8, ptr %3395, align 1, !tbaa !5
  %3397 = zext i8 %3396 to i64
  %3398 = getelementptr inbounds i8, ptr %3390, i64 %3397
  store ptr %3398, ptr %6, align 8, !tbaa !35
  %3399 = icmp ult ptr %3398, %3
  br i1 %3399, label %3303, label %3440, !llvm.loop !131

3400:                                             ; preds = %3282
  %3401 = getelementptr inbounds i8, ptr %3283, i64 -1
  %3402 = load i8, ptr %3401, align 1, !tbaa !5
  %3403 = zext i8 %3402 to i64
  %3404 = tail call i64 @Perl__invlist_search(ptr noundef %3284, i64 noundef %3403) #12
  %3405 = icmp ult ptr %3283, %3
  br i1 %3405, label %3406, label %3440

3406:                                             ; preds = %3400
  %3407 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3404
  %3408 = load i32, ptr %3407, align 4, !tbaa !5
  %3409 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  %3410 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  br label %3411

3411:                                             ; preds = %3406, %3434
  %3412 = phi ptr [ %3283, %3406 ], [ %3438, %3434 ]
  %3413 = phi i32 [ %3408, %3406 ], [ %3437, %3434 ]
  %3414 = phi i32 [ 18, %3406 ], [ %3436, %3434 ]
  %3415 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %3416 = load i8, ptr %3412, align 1, !tbaa !5
  %3417 = zext i8 %3416 to i64
  %3418 = tail call i64 @Perl__invlist_search(ptr noundef %3415, i64 noundef %3417) #12
  %3419 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %3418
  %3420 = load i32, ptr %3419, align 4, !tbaa !5
  %3421 = load ptr, ptr %3259, align 8, !tbaa !26
  %3422 = load ptr, ptr %3409, align 8, !tbaa !27
  %3423 = tail call fastcc zeroext i1 @S_isWB(i32 noundef %3414, i32 noundef %3413, i32 noundef %3420, ptr noundef %3421, ptr noundef nonnull %3412, ptr noundef %3422, i1 noundef zeroext false)
  %3424 = zext i1 %3423 to i32
  %3425 = icmp eq i32 %2565, %3424
  br i1 %3425, label %3434, label %3426

3426:                                             ; preds = %3411
  %3427 = load i8, ptr %3410, align 8, !tbaa !31, !range !42, !noundef !43
  %3428 = icmp eq i8 %3427, 0
  br i1 %3428, label %3429, label %5548

3429:                                             ; preds = %3426
  %3430 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  %3431 = icmp eq i32 %3430, 0
  br i1 %3431, label %3432, label %5548

3432:                                             ; preds = %3429
  %3433 = load ptr, ptr %6, align 8, !tbaa !35
  br label %3434

3434:                                             ; preds = %3432, %3411
  %3435 = phi ptr [ %3412, %3411 ], [ %3433, %3432 ]
  %3436 = phi i32 [ %3414, %3411 ], [ %3413, %3432 ]
  %3437 = phi i32 [ %3413, %3411 ], [ %3420, %3432 ]
  %3438 = getelementptr inbounds i8, ptr %3435, i64 1
  store ptr %3438, ptr %6, align 8, !tbaa !35
  %3439 = icmp ult ptr %3438, %3
  br i1 %3439, label %3411, label %3440, !llvm.loop !132

3440:                                             ; preds = %3434, %3389, %3400, %3285
  %3441 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3442 = load i8, ptr %3441, align 8, !tbaa !31, !range !42, !noundef !43
  %3443 = icmp eq i8 %3442, 0
  br i1 %3443, label %3444, label %3446

3444:                                             ; preds = %3440
  %3445 = call fastcc i32 @S_regtry(ptr noundef nonnull %4, ptr noundef nonnull %6), !range !94
  br label %3446

3446:                                             ; preds = %3444, %3440
  %3447 = phi i32 [ 1, %3440 ], [ %3445, %3444 ]
  %3448 = icmp eq i32 %2565, %3447
  br i1 %3448, label %5550, label %5548

3449:                                             ; preds = %5
  %3450 = icmp ult ptr %2, %3
  br i1 %25, label %3457, label %3451

3451:                                             ; preds = %3449
  br i1 %3450, label %3452, label %5550

3452:                                             ; preds = %3451
  %3453 = ptrtoint ptr %3 to i64
  %3454 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3455 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3456 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3582

3457:                                             ; preds = %3449
  br i1 %3450, label %3458, label %5550

3458:                                             ; preds = %3457
  %3459 = ptrtoint ptr %3 to i64
  %3460 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3461 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3462 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3463

3463:                                             ; preds = %3458, %3572
  %3464 = phi i32 [ 1, %3458 ], [ %3574, %3572 ]
  %3465 = phi ptr [ %2, %3458 ], [ %3580, %3572 ]
  %3466 = ptrtoint ptr %3465 to i64
  %3467 = sub i64 %3459, %3466
  %3468 = icmp sgt i64 %3467, 2
  br i1 %3468, label %3469, label %3487

3469:                                             ; preds = %3463
  %3470 = load i8, ptr %3465, align 1, !tbaa !5
  %3471 = add i8 %3470, -10
  %3472 = icmp ult i8 %3471, 3
  br i1 %3472, label %3504, label %3473

3473:                                             ; preds = %3469
  switch i8 %3470, label %3572 [
    i8 13, label %3504
    i8 -62, label %3474
    i8 -30, label %3478
  ]

3474:                                             ; preds = %3473
  %3475 = getelementptr inbounds i8, ptr %3465, i64 1
  %3476 = load i8, ptr %3475, align 1, !tbaa !5
  %3477 = icmp eq i8 %3476, -123
  br i1 %3477, label %3504, label %3572

3478:                                             ; preds = %3473
  %3479 = getelementptr inbounds i8, ptr %3465, i64 1
  %3480 = load i8, ptr %3479, align 1, !tbaa !5
  %3481 = icmp eq i8 %3480, -128
  br i1 %3481, label %3482, label %3572

3482:                                             ; preds = %3478
  %3483 = getelementptr inbounds i8, ptr %3465, i64 2
  %3484 = load i8, ptr %3483, align 1, !tbaa !5
  %3485 = and i8 %3484, -2
  %3486 = icmp eq i8 %3485, -88
  br i1 %3486, label %3504, label %3572

3487:                                             ; preds = %3463
  %3488 = icmp eq i64 %3467, 2
  br i1 %3488, label %3489, label %3498

3489:                                             ; preds = %3487
  %3490 = load i8, ptr %3465, align 1, !tbaa !5
  %3491 = add i8 %3490, -10
  %3492 = icmp ult i8 %3491, 3
  br i1 %3492, label %3504, label %3493

3493:                                             ; preds = %3489
  switch i8 %3490, label %3572 [
    i8 13, label %3504
    i8 -62, label %3494
  ]

3494:                                             ; preds = %3493
  %3495 = getelementptr inbounds i8, ptr %3465, i64 1
  %3496 = load i8, ptr %3495, align 1, !tbaa !5
  %3497 = icmp eq i8 %3496, -123
  br i1 %3497, label %3504, label %3572

3498:                                             ; preds = %3487
  %3499 = icmp sgt i64 %3467, 0
  br i1 %3499, label %3500, label %3572

3500:                                             ; preds = %3498
  %3501 = load i8, ptr %3465, align 1, !tbaa !5
  %3502 = add i8 %3501, -10
  %3503 = icmp ult i8 %3502, 4
  br i1 %3503, label %3504, label %3572

3504:                                             ; preds = %3500, %3493, %3489, %3473, %3469, %3494, %3482, %3474
  %3505 = icmp eq i32 %3464, 0
  br i1 %3505, label %3572, label %3506

3506:                                             ; preds = %3504
  %3507 = load i8, ptr %3460, align 8, !tbaa !31, !range !42, !noundef !43
  %3508 = icmp eq i8 %3507, 0
  br i1 %3508, label %3509, label %5548

3509:                                             ; preds = %3506
  %3510 = load ptr, ptr %4, align 8, !tbaa !62
  %3511 = getelementptr i8, ptr %3510, i64 16
  %3512 = load ptr, ptr %3511, align 8, !tbaa !5
  %3513 = getelementptr inbounds %struct.regexp, ptr %3512, i64 0, i32 14
  %3514 = load ptr, ptr %3513, align 8, !tbaa !20
  store ptr null, ptr %3461, align 8, !tbaa !63
  %3515 = load ptr, ptr %3462, align 8, !tbaa !26
  %3516 = ptrtoint ptr %3515 to i64
  %3517 = sub i64 %3466, %3516
  %3518 = getelementptr inbounds %struct.regexp, ptr %3512, i64 0, i32 17
  %3519 = load ptr, ptr %3518, align 8, !tbaa !64
  store i64 %3517, ptr %3519, align 8, !tbaa !65
  %3520 = getelementptr inbounds %struct.regexp, ptr %3512, i64 0, i32 15
  store i32 0, ptr %3520, align 8, !tbaa !67
  %3521 = getelementptr inbounds %struct.regexp, ptr %3512, i64 0, i32 16
  store i32 0, ptr %3521, align 4, !tbaa !68
  %3522 = getelementptr inbounds %struct.regexp, ptr %3512, i64 0, i32 12
  %3523 = load i32, ptr %3522, align 8, !tbaa !69
  %3524 = icmp sgt i32 %3523, 0
  br i1 %3524, label %3525, label %3554

3525:                                             ; preds = %3509
  %3526 = and i32 %3523, 7
  %3527 = icmp eq i32 %3526, 0
  br i1 %3527, label %3536, label %3528

3528:                                             ; preds = %3525, %3528
  %3529 = phi i32 [ %3533, %3528 ], [ %3523, %3525 ]
  %3530 = phi ptr [ %3532, %3528 ], [ %3519, %3525 ]
  %3531 = phi i32 [ %3534, %3528 ], [ 0, %3525 ]
  %3532 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3530, i64 1
  %3533 = add nsw i32 %3529, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3532, i8 -1, i64 16, i1 false)
  %3534 = add i32 %3531, 1
  %3535 = icmp eq i32 %3534, %3526
  br i1 %3535, label %3536, label %3528, !llvm.loop !133

3536:                                             ; preds = %3528, %3525
  %3537 = phi i32 [ %3523, %3525 ], [ %3533, %3528 ]
  %3538 = phi ptr [ %3519, %3525 ], [ %3532, %3528 ]
  %3539 = icmp ult i32 %3523, 8
  br i1 %3539, label %3554, label %3540

3540:                                             ; preds = %3536, %3540
  %3541 = phi i32 [ %3551, %3540 ], [ %3537, %3536 ]
  %3542 = phi ptr [ %3550, %3540 ], [ %3538, %3536 ]
  %3543 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3543, i8 -1, i64 16, i1 false)
  %3544 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3544, i8 -1, i64 16, i1 false)
  %3545 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3545, i8 -1, i64 16, i1 false)
  %3546 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3546, i8 -1, i64 16, i1 false)
  %3547 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3547, i8 -1, i64 16, i1 false)
  %3548 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3548, i8 -1, i64 16, i1 false)
  %3549 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3549, i8 -1, i64 16, i1 false)
  %3550 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3542, i64 8
  %3551 = add nsw i32 %3541, -8
  %3552 = add i32 %3541, -9
  %3553 = icmp ult i32 %3552, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3550, i8 -1, i64 16, i1 false)
  br i1 %3553, label %3540, label %3554, !llvm.loop !72

3554:                                             ; preds = %3536, %3540, %3509
  %3555 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3556 = getelementptr inbounds %struct.regexp_internal, ptr %3514, i64 1
  %3557 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3465, ptr noundef nonnull %3556)
  %3558 = icmp eq i64 %3557, -1
  br i1 %3558, label %3559, label %3568

3559:                                             ; preds = %3554
  %3560 = load ptr, ptr %3461, align 8, !tbaa !63
  %3561 = icmp eq ptr %3560, null
  br i1 %3561, label %3563, label %3562

3562:                                             ; preds = %3559
  store ptr %3560, ptr %6, align 8, !tbaa !35
  br label %3563

3563:                                             ; preds = %3562, %3559
  %3564 = phi ptr [ %3560, %3562 ], [ %3465, %3559 ]
  %3565 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3566 = icmp sgt i32 %3565, %3555
  br i1 %3566, label %3567, label %3572

3567:                                             ; preds = %3563
  tail call void @Perl_leave_scope(i32 noundef %3555) #12
  br label %3572

3568:                                             ; preds = %3554
  %3569 = getelementptr inbounds %struct.regexp, ptr %3512, i64 0, i32 17
  %3570 = load ptr, ptr %3569, align 8, !tbaa !64
  %3571 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3570, i64 0, i32 1
  store i64 %3557, ptr %3571, align 8, !tbaa !74
  br label %5548

3572:                                             ; preds = %3563, %3567, %3500, %3474, %3482, %3478, %3494, %3498, %3473, %3493, %3504
  %3573 = phi ptr [ %3465, %3504 ], [ %3465, %3493 ], [ %3465, %3473 ], [ %3465, %3498 ], [ %3465, %3494 ], [ %3465, %3478 ], [ %3465, %3482 ], [ %3465, %3474 ], [ %3465, %3500 ], [ %3564, %3567 ], [ %3564, %3563 ]
  %3574 = phi i32 [ %22, %3504 ], [ 1, %3493 ], [ 1, %3473 ], [ 1, %3498 ], [ 1, %3494 ], [ 1, %3478 ], [ 1, %3482 ], [ 1, %3474 ], [ 1, %3500 ], [ %22, %3567 ], [ %22, %3563 ]
  %3575 = load i8, ptr %3573, align 1, !tbaa !5
  %3576 = zext i8 %3575 to i64
  %3577 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3576
  %3578 = load i8, ptr %3577, align 1, !tbaa !5
  %3579 = zext i8 %3578 to i64
  %3580 = getelementptr inbounds i8, ptr %3573, i64 %3579
  store ptr %3580, ptr %6, align 8, !tbaa !35
  %3581 = icmp ult ptr %3580, %3
  br i1 %3581, label %3463, label %5550, !llvm.loop !134

3582:                                             ; preds = %3452, %3663
  %3583 = phi i32 [ 1, %3452 ], [ %3665, %3663 ]
  %3584 = phi ptr [ %2, %3452 ], [ %3666, %3663 ]
  %3585 = ptrtoint ptr %3584 to i64
  %3586 = sub i64 %3453, %3585
  %3587 = icmp sgt i64 %3586, 1
  br i1 %3587, label %3588, label %3593

3588:                                             ; preds = %3582
  %3589 = load i8, ptr %3584, align 1, !tbaa !5
  %3590 = add i8 %3589, -10
  %3591 = icmp ult i8 %3590, 3
  br i1 %3591, label %3597, label %3592

3592:                                             ; preds = %3588
  switch i8 %3589, label %3663 [
    i8 -123, label %3597
    i8 13, label %3597
  ]

3593:                                             ; preds = %3582
  %3594 = icmp eq i64 %3586, 1
  br i1 %3594, label %3595, label %3663

3595:                                             ; preds = %3593
  %3596 = load i8, ptr %3584, align 1, !tbaa !5
  switch i8 %3596, label %3663 [
    i8 -123, label %3597
    i8 13, label %3597
    i8 12, label %3597
    i8 11, label %3597
    i8 10, label %3597
  ]

3597:                                             ; preds = %3595, %3595, %3595, %3595, %3595, %3592, %3592, %3588
  %3598 = icmp eq i32 %3583, 0
  br i1 %3598, label %3663, label %3599

3599:                                             ; preds = %3597
  %3600 = load i8, ptr %3454, align 8, !tbaa !31, !range !42, !noundef !43
  %3601 = icmp eq i8 %3600, 0
  br i1 %3601, label %3602, label %5548

3602:                                             ; preds = %3599
  %3603 = load ptr, ptr %4, align 8, !tbaa !62
  %3604 = getelementptr i8, ptr %3603, i64 16
  %3605 = load ptr, ptr %3604, align 8, !tbaa !5
  %3606 = getelementptr inbounds %struct.regexp, ptr %3605, i64 0, i32 14
  %3607 = load ptr, ptr %3606, align 8, !tbaa !20
  store ptr null, ptr %3455, align 8, !tbaa !63
  %3608 = load ptr, ptr %3456, align 8, !tbaa !26
  %3609 = ptrtoint ptr %3608 to i64
  %3610 = sub i64 %3585, %3609
  %3611 = getelementptr inbounds %struct.regexp, ptr %3605, i64 0, i32 17
  %3612 = load ptr, ptr %3611, align 8, !tbaa !64
  store i64 %3610, ptr %3612, align 8, !tbaa !65
  %3613 = getelementptr inbounds %struct.regexp, ptr %3605, i64 0, i32 15
  store i32 0, ptr %3613, align 8, !tbaa !67
  %3614 = getelementptr inbounds %struct.regexp, ptr %3605, i64 0, i32 16
  store i32 0, ptr %3614, align 4, !tbaa !68
  %3615 = getelementptr inbounds %struct.regexp, ptr %3605, i64 0, i32 12
  %3616 = load i32, ptr %3615, align 8, !tbaa !69
  %3617 = icmp sgt i32 %3616, 0
  br i1 %3617, label %3618, label %3647

3618:                                             ; preds = %3602
  %3619 = and i32 %3616, 7
  %3620 = icmp eq i32 %3619, 0
  br i1 %3620, label %3629, label %3621

3621:                                             ; preds = %3618, %3621
  %3622 = phi i32 [ %3626, %3621 ], [ %3616, %3618 ]
  %3623 = phi ptr [ %3625, %3621 ], [ %3612, %3618 ]
  %3624 = phi i32 [ %3627, %3621 ], [ 0, %3618 ]
  %3625 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3623, i64 1
  %3626 = add nsw i32 %3622, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3625, i8 -1, i64 16, i1 false)
  %3627 = add i32 %3624, 1
  %3628 = icmp eq i32 %3627, %3619
  br i1 %3628, label %3629, label %3621, !llvm.loop !135

3629:                                             ; preds = %3621, %3618
  %3630 = phi i32 [ %3616, %3618 ], [ %3626, %3621 ]
  %3631 = phi ptr [ %3612, %3618 ], [ %3625, %3621 ]
  %3632 = icmp ult i32 %3616, 8
  br i1 %3632, label %3647, label %3633

3633:                                             ; preds = %3629, %3633
  %3634 = phi i32 [ %3644, %3633 ], [ %3630, %3629 ]
  %3635 = phi ptr [ %3643, %3633 ], [ %3631, %3629 ]
  %3636 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3636, i8 -1, i64 16, i1 false)
  %3637 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3637, i8 -1, i64 16, i1 false)
  %3638 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3638, i8 -1, i64 16, i1 false)
  %3639 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3639, i8 -1, i64 16, i1 false)
  %3640 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3640, i8 -1, i64 16, i1 false)
  %3641 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3641, i8 -1, i64 16, i1 false)
  %3642 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3642, i8 -1, i64 16, i1 false)
  %3643 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3635, i64 8
  %3644 = add nsw i32 %3634, -8
  %3645 = add i32 %3634, -9
  %3646 = icmp ult i32 %3645, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3643, i8 -1, i64 16, i1 false)
  br i1 %3646, label %3633, label %3647, !llvm.loop !72

3647:                                             ; preds = %3629, %3633, %3602
  %3648 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3649 = getelementptr inbounds %struct.regexp_internal, ptr %3607, i64 1
  %3650 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3584, ptr noundef nonnull %3649)
  %3651 = icmp eq i64 %3650, -1
  br i1 %3651, label %3652, label %3659

3652:                                             ; preds = %3647
  %3653 = load ptr, ptr %3455, align 8, !tbaa !63
  %3654 = icmp eq ptr %3653, null
  %3655 = select i1 %3654, ptr %3584, ptr %3653
  %3656 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3657 = icmp sgt i32 %3656, %3648
  br i1 %3657, label %3658, label %3663

3658:                                             ; preds = %3652
  tail call void @Perl_leave_scope(i32 noundef %3648) #12
  br label %3663

3659:                                             ; preds = %3647
  %3660 = getelementptr inbounds %struct.regexp, ptr %3605, i64 0, i32 17
  %3661 = load ptr, ptr %3660, align 8, !tbaa !64
  %3662 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3661, i64 0, i32 1
  store i64 %3650, ptr %3662, align 8, !tbaa !74
  br label %5548

3663:                                             ; preds = %3595, %3652, %3658, %3593, %3592, %3597
  %3664 = phi ptr [ %3584, %3597 ], [ %3584, %3592 ], [ %3584, %3593 ], [ %3655, %3658 ], [ %3655, %3652 ], [ %3584, %3595 ]
  %3665 = phi i32 [ %22, %3597 ], [ 1, %3592 ], [ 1, %3593 ], [ %22, %3658 ], [ %22, %3652 ], [ 1, %3595 ]
  %3666 = getelementptr inbounds i8, ptr %3664, i64 1
  store ptr %3666, ptr %6, align 8, !tbaa !35
  %3667 = icmp ult ptr %3666, %3
  br i1 %3667, label %3582, label %5550, !llvm.loop !136

3668:                                             ; preds = %5
  br label %3669

3669:                                             ; preds = %5, %3668
  %3670 = phi i32 [ 0, %5 ], [ 1, %3668 ]
  %3671 = icmp ult ptr %2, %3
  br i1 %25, label %3677, label %3672

3672:                                             ; preds = %3669
  br i1 %3671, label %3673, label %5550

3673:                                             ; preds = %3672
  %3674 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3675 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3676 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3768

3677:                                             ; preds = %3669
  br i1 %3671, label %3678, label %5550

3678:                                             ; preds = %3677
  %3679 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3680 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3681 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3682

3682:                                             ; preds = %3678, %3758
  %3683 = phi i32 [ 1, %3678 ], [ %3760, %3758 ]
  %3684 = phi ptr [ %2, %3678 ], [ %3766, %3758 ]
  %3685 = load i8, ptr %1, align 2, !tbaa !76
  %3686 = tail call fastcc zeroext i1 @S_isFOO_utf8_lc(i8 noundef zeroext %3685, ptr noundef %3684)
  %3687 = zext i1 %3686 to i32
  %3688 = icmp eq i32 %3670, %3687
  br i1 %3688, label %3758, label %3689

3689:                                             ; preds = %3682
  %3690 = icmp eq i32 %3683, 0
  br i1 %3690, label %3758, label %3691

3691:                                             ; preds = %3689
  %3692 = load i8, ptr %3679, align 8, !tbaa !31, !range !42, !noundef !43
  %3693 = icmp eq i8 %3692, 0
  br i1 %3693, label %3694, label %5548

3694:                                             ; preds = %3691
  %3695 = load ptr, ptr %4, align 8, !tbaa !62
  %3696 = getelementptr i8, ptr %3695, i64 16
  %3697 = load ptr, ptr %3696, align 8, !tbaa !5
  %3698 = getelementptr inbounds %struct.regexp, ptr %3697, i64 0, i32 14
  %3699 = load ptr, ptr %3698, align 8, !tbaa !20
  store ptr null, ptr %3680, align 8, !tbaa !63
  %3700 = load ptr, ptr %3681, align 8, !tbaa !26
  %3701 = ptrtoint ptr %3684 to i64
  %3702 = ptrtoint ptr %3700 to i64
  %3703 = sub i64 %3701, %3702
  %3704 = getelementptr inbounds %struct.regexp, ptr %3697, i64 0, i32 17
  %3705 = load ptr, ptr %3704, align 8, !tbaa !64
  store i64 %3703, ptr %3705, align 8, !tbaa !65
  %3706 = getelementptr inbounds %struct.regexp, ptr %3697, i64 0, i32 15
  store i32 0, ptr %3706, align 8, !tbaa !67
  %3707 = getelementptr inbounds %struct.regexp, ptr %3697, i64 0, i32 16
  store i32 0, ptr %3707, align 4, !tbaa !68
  %3708 = getelementptr inbounds %struct.regexp, ptr %3697, i64 0, i32 12
  %3709 = load i32, ptr %3708, align 8, !tbaa !69
  %3710 = icmp sgt i32 %3709, 0
  br i1 %3710, label %3711, label %3740

3711:                                             ; preds = %3694
  %3712 = and i32 %3709, 7
  %3713 = icmp eq i32 %3712, 0
  br i1 %3713, label %3722, label %3714

3714:                                             ; preds = %3711, %3714
  %3715 = phi i32 [ %3719, %3714 ], [ %3709, %3711 ]
  %3716 = phi ptr [ %3718, %3714 ], [ %3705, %3711 ]
  %3717 = phi i32 [ %3720, %3714 ], [ 0, %3711 ]
  %3718 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3716, i64 1
  %3719 = add nsw i32 %3715, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3718, i8 -1, i64 16, i1 false)
  %3720 = add i32 %3717, 1
  %3721 = icmp eq i32 %3720, %3712
  br i1 %3721, label %3722, label %3714, !llvm.loop !137

3722:                                             ; preds = %3714, %3711
  %3723 = phi i32 [ %3709, %3711 ], [ %3719, %3714 ]
  %3724 = phi ptr [ %3705, %3711 ], [ %3718, %3714 ]
  %3725 = icmp ult i32 %3709, 8
  br i1 %3725, label %3740, label %3726

3726:                                             ; preds = %3722, %3726
  %3727 = phi i32 [ %3737, %3726 ], [ %3723, %3722 ]
  %3728 = phi ptr [ %3736, %3726 ], [ %3724, %3722 ]
  %3729 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3729, i8 -1, i64 16, i1 false)
  %3730 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3730, i8 -1, i64 16, i1 false)
  %3731 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3731, i8 -1, i64 16, i1 false)
  %3732 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3732, i8 -1, i64 16, i1 false)
  %3733 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3733, i8 -1, i64 16, i1 false)
  %3734 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3734, i8 -1, i64 16, i1 false)
  %3735 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3735, i8 -1, i64 16, i1 false)
  %3736 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3728, i64 8
  %3737 = add nsw i32 %3727, -8
  %3738 = add i32 %3727, -9
  %3739 = icmp ult i32 %3738, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3736, i8 -1, i64 16, i1 false)
  br i1 %3739, label %3726, label %3740, !llvm.loop !72

3740:                                             ; preds = %3722, %3726, %3694
  %3741 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3742 = getelementptr inbounds %struct.regexp_internal, ptr %3699, i64 1
  %3743 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %3684, ptr noundef nonnull %3742)
  %3744 = icmp eq i64 %3743, -1
  br i1 %3744, label %3745, label %3754

3745:                                             ; preds = %3740
  %3746 = load ptr, ptr %3680, align 8, !tbaa !63
  %3747 = icmp eq ptr %3746, null
  br i1 %3747, label %3749, label %3748

3748:                                             ; preds = %3745
  store ptr %3746, ptr %6, align 8, !tbaa !35
  br label %3749

3749:                                             ; preds = %3748, %3745
  %3750 = phi ptr [ %3746, %3748 ], [ %3684, %3745 ]
  %3751 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3752 = icmp sgt i32 %3751, %3741
  br i1 %3752, label %3753, label %3758

3753:                                             ; preds = %3749
  tail call void @Perl_leave_scope(i32 noundef %3741) #12
  br label %3758

3754:                                             ; preds = %3740
  %3755 = getelementptr inbounds %struct.regexp, ptr %3697, i64 0, i32 17
  %3756 = load ptr, ptr %3755, align 8, !tbaa !64
  %3757 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3756, i64 0, i32 1
  store i64 %3743, ptr %3757, align 8, !tbaa !74
  br label %5548

3758:                                             ; preds = %3749, %3753, %3682, %3689
  %3759 = phi ptr [ %3684, %3689 ], [ %3684, %3682 ], [ %3750, %3753 ], [ %3750, %3749 ]
  %3760 = phi i32 [ %22, %3689 ], [ 1, %3682 ], [ %22, %3753 ], [ %22, %3749 ]
  %3761 = load i8, ptr %3759, align 1, !tbaa !5
  %3762 = zext i8 %3761 to i64
  %3763 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3762
  %3764 = load i8, ptr %3763, align 1, !tbaa !5
  %3765 = zext i8 %3764 to i64
  %3766 = getelementptr inbounds i8, ptr %3759, i64 %3765
  store ptr %3766, ptr %6, align 8, !tbaa !35
  %3767 = icmp ult ptr %3766, %3
  br i1 %3767, label %3682, label %5550, !llvm.loop !138

3768:                                             ; preds = %3673, %3843
  %3769 = phi i32 [ 1, %3673 ], [ %3845, %3843 ]
  %3770 = phi ptr [ %2, %3673 ], [ %3846, %3843 ]
  %3771 = load i8, ptr %1, align 2, !tbaa !76
  %3772 = load i8, ptr %3770, align 1, !tbaa !5
  %3773 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %3771, i8 noundef zeroext %3772)
  %3774 = zext i1 %3773 to i32
  %3775 = icmp eq i32 %3670, %3774
  br i1 %3775, label %3843, label %3776

3776:                                             ; preds = %3768
  %3777 = icmp eq i32 %3769, 0
  br i1 %3777, label %3843, label %3778

3778:                                             ; preds = %3776
  %3779 = load i8, ptr %3674, align 8, !tbaa !31, !range !42, !noundef !43
  %3780 = icmp eq i8 %3779, 0
  br i1 %3780, label %3781, label %5548

3781:                                             ; preds = %3778
  %3782 = load ptr, ptr %4, align 8, !tbaa !62
  %3783 = getelementptr i8, ptr %3782, i64 16
  %3784 = load ptr, ptr %3783, align 8, !tbaa !5
  %3785 = getelementptr inbounds %struct.regexp, ptr %3784, i64 0, i32 14
  %3786 = load ptr, ptr %3785, align 8, !tbaa !20
  store ptr null, ptr %3675, align 8, !tbaa !63
  %3787 = load ptr, ptr %3676, align 8, !tbaa !26
  %3788 = ptrtoint ptr %3770 to i64
  %3789 = ptrtoint ptr %3787 to i64
  %3790 = sub i64 %3788, %3789
  %3791 = getelementptr inbounds %struct.regexp, ptr %3784, i64 0, i32 17
  %3792 = load ptr, ptr %3791, align 8, !tbaa !64
  store i64 %3790, ptr %3792, align 8, !tbaa !65
  %3793 = getelementptr inbounds %struct.regexp, ptr %3784, i64 0, i32 15
  store i32 0, ptr %3793, align 8, !tbaa !67
  %3794 = getelementptr inbounds %struct.regexp, ptr %3784, i64 0, i32 16
  store i32 0, ptr %3794, align 4, !tbaa !68
  %3795 = getelementptr inbounds %struct.regexp, ptr %3784, i64 0, i32 12
  %3796 = load i32, ptr %3795, align 8, !tbaa !69
  %3797 = icmp sgt i32 %3796, 0
  br i1 %3797, label %3798, label %3827

3798:                                             ; preds = %3781
  %3799 = and i32 %3796, 7
  %3800 = icmp eq i32 %3799, 0
  br i1 %3800, label %3809, label %3801

3801:                                             ; preds = %3798, %3801
  %3802 = phi i32 [ %3806, %3801 ], [ %3796, %3798 ]
  %3803 = phi ptr [ %3805, %3801 ], [ %3792, %3798 ]
  %3804 = phi i32 [ %3807, %3801 ], [ 0, %3798 ]
  %3805 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3803, i64 1
  %3806 = add nsw i32 %3802, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3805, i8 -1, i64 16, i1 false)
  %3807 = add i32 %3804, 1
  %3808 = icmp eq i32 %3807, %3799
  br i1 %3808, label %3809, label %3801, !llvm.loop !139

3809:                                             ; preds = %3801, %3798
  %3810 = phi i32 [ %3796, %3798 ], [ %3806, %3801 ]
  %3811 = phi ptr [ %3792, %3798 ], [ %3805, %3801 ]
  %3812 = icmp ult i32 %3796, 8
  br i1 %3812, label %3827, label %3813

3813:                                             ; preds = %3809, %3813
  %3814 = phi i32 [ %3824, %3813 ], [ %3810, %3809 ]
  %3815 = phi ptr [ %3823, %3813 ], [ %3811, %3809 ]
  %3816 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3816, i8 -1, i64 16, i1 false)
  %3817 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3817, i8 -1, i64 16, i1 false)
  %3818 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3818, i8 -1, i64 16, i1 false)
  %3819 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3819, i8 -1, i64 16, i1 false)
  %3820 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3820, i8 -1, i64 16, i1 false)
  %3821 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3821, i8 -1, i64 16, i1 false)
  %3822 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3822, i8 -1, i64 16, i1 false)
  %3823 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3815, i64 8
  %3824 = add nsw i32 %3814, -8
  %3825 = add i32 %3814, -9
  %3826 = icmp ult i32 %3825, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3823, i8 -1, i64 16, i1 false)
  br i1 %3826, label %3813, label %3827, !llvm.loop !72

3827:                                             ; preds = %3809, %3813, %3781
  %3828 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3829 = getelementptr inbounds %struct.regexp_internal, ptr %3786, i64 1
  %3830 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %3770, ptr noundef nonnull %3829)
  %3831 = icmp eq i64 %3830, -1
  br i1 %3831, label %3832, label %3839

3832:                                             ; preds = %3827
  %3833 = load ptr, ptr %3675, align 8, !tbaa !63
  %3834 = icmp eq ptr %3833, null
  %3835 = select i1 %3834, ptr %3770, ptr %3833
  %3836 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3837 = icmp sgt i32 %3836, %3828
  br i1 %3837, label %3838, label %3843

3838:                                             ; preds = %3832
  tail call void @Perl_leave_scope(i32 noundef %3828) #12
  br label %3843

3839:                                             ; preds = %3827
  %3840 = getelementptr inbounds %struct.regexp, ptr %3784, i64 0, i32 17
  %3841 = load ptr, ptr %3840, align 8, !tbaa !64
  %3842 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3841, i64 0, i32 1
  store i64 %3830, ptr %3842, align 8, !tbaa !74
  br label %5548

3843:                                             ; preds = %3832, %3838, %3768, %3776
  %3844 = phi ptr [ %3770, %3776 ], [ %3770, %3768 ], [ %3835, %3838 ], [ %3835, %3832 ]
  %3845 = phi i32 [ %22, %3776 ], [ 1, %3768 ], [ %22, %3838 ], [ %22, %3832 ]
  %3846 = getelementptr inbounds i8, ptr %3844, i64 1
  store ptr %3846, ptr %6, align 8, !tbaa !35
  %3847 = icmp ult ptr %3846, %3
  br i1 %3847, label %3768, label %5550, !llvm.loop !140

3848:                                             ; preds = %5
  br label %3849

3849:                                             ; preds = %5, %3848
  %3850 = phi i8 [ 0, %5 ], [ 1, %3848 ]
  br i1 %25, label %4140, label %3952

3851:                                             ; preds = %5
  br i1 %25, label %3852, label %3952

3852:                                             ; preds = %3851
  %3853 = icmp ult ptr %2, %3
  br i1 %3853, label %3854, label %5550

3854:                                             ; preds = %3852
  %3855 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3856 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3857 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3858

3858:                                             ; preds = %3854, %3942
  %3859 = phi i32 [ 1, %3854 ], [ %3944, %3942 ]
  %3860 = phi ptr [ %2, %3854 ], [ %3950, %3942 ]
  %3861 = load i8, ptr %3860, align 1, !tbaa !5
  %3862 = icmp sgt i8 %3861, -1
  br i1 %3862, label %3863, label %3873

3863:                                             ; preds = %3858
  %3864 = zext i8 %3861 to i64
  %3865 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %3864
  %3866 = load i32, ptr %3865, align 4, !tbaa !73
  %3867 = load i8, ptr %1, align 2, !tbaa !76
  %3868 = zext i8 %3867 to i32
  %3869 = shl nuw i32 1, %3868
  %3870 = or i32 %3869, 16384
  %3871 = and i32 %3870, %3866
  %3872 = icmp eq i32 %3871, %3870
  br i1 %3872, label %3942, label %3873

3873:                                             ; preds = %3863, %3858
  %3874 = icmp eq i32 %3859, 0
  br i1 %3874, label %3942, label %3875

3875:                                             ; preds = %3873
  %3876 = load i8, ptr %3855, align 8, !tbaa !31, !range !42, !noundef !43
  %3877 = icmp eq i8 %3876, 0
  br i1 %3877, label %3878, label %5548

3878:                                             ; preds = %3875
  %3879 = load ptr, ptr %4, align 8, !tbaa !62
  %3880 = getelementptr i8, ptr %3879, i64 16
  %3881 = load ptr, ptr %3880, align 8, !tbaa !5
  %3882 = getelementptr inbounds %struct.regexp, ptr %3881, i64 0, i32 14
  %3883 = load ptr, ptr %3882, align 8, !tbaa !20
  store ptr null, ptr %3856, align 8, !tbaa !63
  %3884 = load ptr, ptr %3857, align 8, !tbaa !26
  %3885 = ptrtoint ptr %3860 to i64
  %3886 = ptrtoint ptr %3884 to i64
  %3887 = sub i64 %3885, %3886
  %3888 = getelementptr inbounds %struct.regexp, ptr %3881, i64 0, i32 17
  %3889 = load ptr, ptr %3888, align 8, !tbaa !64
  store i64 %3887, ptr %3889, align 8, !tbaa !65
  %3890 = getelementptr inbounds %struct.regexp, ptr %3881, i64 0, i32 15
  store i32 0, ptr %3890, align 8, !tbaa !67
  %3891 = getelementptr inbounds %struct.regexp, ptr %3881, i64 0, i32 16
  store i32 0, ptr %3891, align 4, !tbaa !68
  %3892 = getelementptr inbounds %struct.regexp, ptr %3881, i64 0, i32 12
  %3893 = load i32, ptr %3892, align 8, !tbaa !69
  %3894 = icmp sgt i32 %3893, 0
  br i1 %3894, label %3895, label %3924

3895:                                             ; preds = %3878
  %3896 = and i32 %3893, 7
  %3897 = icmp eq i32 %3896, 0
  br i1 %3897, label %3906, label %3898

3898:                                             ; preds = %3895, %3898
  %3899 = phi i32 [ %3903, %3898 ], [ %3893, %3895 ]
  %3900 = phi ptr [ %3902, %3898 ], [ %3889, %3895 ]
  %3901 = phi i32 [ %3904, %3898 ], [ 0, %3895 ]
  %3902 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3900, i64 1
  %3903 = add nsw i32 %3899, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3902, i8 -1, i64 16, i1 false)
  %3904 = add i32 %3901, 1
  %3905 = icmp eq i32 %3904, %3896
  br i1 %3905, label %3906, label %3898, !llvm.loop !141

3906:                                             ; preds = %3898, %3895
  %3907 = phi i32 [ %3893, %3895 ], [ %3903, %3898 ]
  %3908 = phi ptr [ %3889, %3895 ], [ %3902, %3898 ]
  %3909 = icmp ult i32 %3893, 8
  br i1 %3909, label %3924, label %3910

3910:                                             ; preds = %3906, %3910
  %3911 = phi i32 [ %3921, %3910 ], [ %3907, %3906 ]
  %3912 = phi ptr [ %3920, %3910 ], [ %3908, %3906 ]
  %3913 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3913, i8 -1, i64 16, i1 false)
  %3914 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3914, i8 -1, i64 16, i1 false)
  %3915 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3915, i8 -1, i64 16, i1 false)
  %3916 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3916, i8 -1, i64 16, i1 false)
  %3917 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3917, i8 -1, i64 16, i1 false)
  %3918 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3918, i8 -1, i64 16, i1 false)
  %3919 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3919, i8 -1, i64 16, i1 false)
  %3920 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3912, i64 8
  %3921 = add nsw i32 %3911, -8
  %3922 = add i32 %3911, -9
  %3923 = icmp ult i32 %3922, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3920, i8 -1, i64 16, i1 false)
  br i1 %3923, label %3910, label %3924, !llvm.loop !72

3924:                                             ; preds = %3906, %3910, %3878
  %3925 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3926 = getelementptr inbounds %struct.regexp_internal, ptr %3883, i64 1
  %3927 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %3860, ptr noundef nonnull %3926)
  %3928 = icmp eq i64 %3927, -1
  br i1 %3928, label %3929, label %3938

3929:                                             ; preds = %3924
  %3930 = load ptr, ptr %3856, align 8, !tbaa !63
  %3931 = icmp eq ptr %3930, null
  br i1 %3931, label %3933, label %3932

3932:                                             ; preds = %3929
  store ptr %3930, ptr %6, align 8, !tbaa !35
  br label %3933

3933:                                             ; preds = %3932, %3929
  %3934 = phi ptr [ %3930, %3932 ], [ %3860, %3929 ]
  %3935 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3936 = icmp sgt i32 %3935, %3925
  br i1 %3936, label %3937, label %3942

3937:                                             ; preds = %3933
  tail call void @Perl_leave_scope(i32 noundef %3925) #12
  br label %3942

3938:                                             ; preds = %3924
  %3939 = getelementptr inbounds %struct.regexp, ptr %3881, i64 0, i32 17
  %3940 = load ptr, ptr %3939, align 8, !tbaa !64
  %3941 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3940, i64 0, i32 1
  store i64 %3927, ptr %3941, align 8, !tbaa !74
  br label %5548

3942:                                             ; preds = %3933, %3937, %3863, %3873
  %3943 = phi ptr [ %3860, %3873 ], [ %3860, %3863 ], [ %3934, %3937 ], [ %3934, %3933 ]
  %3944 = phi i32 [ %22, %3873 ], [ 1, %3863 ], [ %22, %3937 ], [ %22, %3933 ]
  %3945 = load i8, ptr %3943, align 1, !tbaa !5
  %3946 = zext i8 %3945 to i64
  %3947 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3946
  %3948 = load i8, ptr %3947, align 1, !tbaa !5
  %3949 = zext i8 %3948 to i64
  %3950 = getelementptr inbounds i8, ptr %3943, i64 %3949
  store ptr %3950, ptr %6, align 8, !tbaa !35
  %3951 = icmp ult ptr %3950, %3
  br i1 %3951, label %3858, label %5550, !llvm.loop !142

3952:                                             ; preds = %3851, %3849, %5
  %3953 = phi i8 [ 0, %5 ], [ %3850, %3849 ], [ 1, %3851 ]
  %3954 = icmp ult ptr %2, %3
  br i1 %3954, label %3955, label %5550

3955:                                             ; preds = %3952
  %3956 = icmp ne i8 %3953, 0
  %3957 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %3958 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %3959 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %3960

3960:                                             ; preds = %3955, %4041
  %3961 = phi i32 [ 1, %3955 ], [ %4043, %4041 ]
  %3962 = phi ptr [ %2, %3955 ], [ %4044, %4041 ]
  %3963 = load i8, ptr %3962, align 1, !tbaa !5
  %3964 = zext i8 %3963 to i64
  %3965 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %3964
  %3966 = load i32, ptr %3965, align 4, !tbaa !73
  %3967 = load i8, ptr %1, align 2, !tbaa !76
  %3968 = zext i8 %3967 to i32
  %3969 = shl nuw i32 1, %3968
  %3970 = or i32 %3969, 16384
  %3971 = and i32 %3970, %3966
  %3972 = icmp ne i32 %3971, %3970
  %3973 = xor i1 %3956, %3972
  br i1 %3973, label %4041, label %3974

3974:                                             ; preds = %3960
  %3975 = icmp eq i32 %3961, 0
  br i1 %3975, label %4041, label %3976

3976:                                             ; preds = %3974
  %3977 = load i8, ptr %3957, align 8, !tbaa !31, !range !42, !noundef !43
  %3978 = icmp eq i8 %3977, 0
  br i1 %3978, label %3979, label %5548

3979:                                             ; preds = %3976
  %3980 = load ptr, ptr %4, align 8, !tbaa !62
  %3981 = getelementptr i8, ptr %3980, i64 16
  %3982 = load ptr, ptr %3981, align 8, !tbaa !5
  %3983 = getelementptr inbounds %struct.regexp, ptr %3982, i64 0, i32 14
  %3984 = load ptr, ptr %3983, align 8, !tbaa !20
  store ptr null, ptr %3958, align 8, !tbaa !63
  %3985 = load ptr, ptr %3959, align 8, !tbaa !26
  %3986 = ptrtoint ptr %3962 to i64
  %3987 = ptrtoint ptr %3985 to i64
  %3988 = sub i64 %3986, %3987
  %3989 = getelementptr inbounds %struct.regexp, ptr %3982, i64 0, i32 17
  %3990 = load ptr, ptr %3989, align 8, !tbaa !64
  store i64 %3988, ptr %3990, align 8, !tbaa !65
  %3991 = getelementptr inbounds %struct.regexp, ptr %3982, i64 0, i32 15
  store i32 0, ptr %3991, align 8, !tbaa !67
  %3992 = getelementptr inbounds %struct.regexp, ptr %3982, i64 0, i32 16
  store i32 0, ptr %3992, align 4, !tbaa !68
  %3993 = getelementptr inbounds %struct.regexp, ptr %3982, i64 0, i32 12
  %3994 = load i32, ptr %3993, align 8, !tbaa !69
  %3995 = icmp sgt i32 %3994, 0
  br i1 %3995, label %3996, label %4025

3996:                                             ; preds = %3979
  %3997 = and i32 %3994, 7
  %3998 = icmp eq i32 %3997, 0
  br i1 %3998, label %4007, label %3999

3999:                                             ; preds = %3996, %3999
  %4000 = phi i32 [ %4004, %3999 ], [ %3994, %3996 ]
  %4001 = phi ptr [ %4003, %3999 ], [ %3990, %3996 ]
  %4002 = phi i32 [ %4005, %3999 ], [ 0, %3996 ]
  %4003 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4001, i64 1
  %4004 = add nsw i32 %4000, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4003, i8 -1, i64 16, i1 false)
  %4005 = add i32 %4002, 1
  %4006 = icmp eq i32 %4005, %3997
  br i1 %4006, label %4007, label %3999, !llvm.loop !143

4007:                                             ; preds = %3999, %3996
  %4008 = phi i32 [ %3994, %3996 ], [ %4004, %3999 ]
  %4009 = phi ptr [ %3990, %3996 ], [ %4003, %3999 ]
  %4010 = icmp ult i32 %3994, 8
  br i1 %4010, label %4025, label %4011

4011:                                             ; preds = %4007, %4011
  %4012 = phi i32 [ %4022, %4011 ], [ %4008, %4007 ]
  %4013 = phi ptr [ %4021, %4011 ], [ %4009, %4007 ]
  %4014 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4014, i8 -1, i64 16, i1 false)
  %4015 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4015, i8 -1, i64 16, i1 false)
  %4016 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4016, i8 -1, i64 16, i1 false)
  %4017 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4017, i8 -1, i64 16, i1 false)
  %4018 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4018, i8 -1, i64 16, i1 false)
  %4019 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4019, i8 -1, i64 16, i1 false)
  %4020 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4020, i8 -1, i64 16, i1 false)
  %4021 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4013, i64 8
  %4022 = add nsw i32 %4012, -8
  %4023 = add i32 %4012, -9
  %4024 = icmp ult i32 %4023, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4021, i8 -1, i64 16, i1 false)
  br i1 %4024, label %4011, label %4025, !llvm.loop !72

4025:                                             ; preds = %4007, %4011, %3979
  %4026 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4027 = getelementptr inbounds %struct.regexp_internal, ptr %3984, i64 1
  %4028 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %3962, ptr noundef nonnull %4027)
  %4029 = icmp eq i64 %4028, -1
  br i1 %4029, label %4030, label %4037

4030:                                             ; preds = %4025
  %4031 = load ptr, ptr %3958, align 8, !tbaa !63
  %4032 = icmp eq ptr %4031, null
  %4033 = select i1 %4032, ptr %3962, ptr %4031
  %4034 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4035 = icmp sgt i32 %4034, %4026
  br i1 %4035, label %4036, label %4041

4036:                                             ; preds = %4030
  tail call void @Perl_leave_scope(i32 noundef %4026) #12
  br label %4041

4037:                                             ; preds = %4025
  %4038 = getelementptr inbounds %struct.regexp, ptr %3982, i64 0, i32 17
  %4039 = load ptr, ptr %4038, align 8, !tbaa !64
  %4040 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4039, i64 0, i32 1
  store i64 %4028, ptr %4040, align 8, !tbaa !74
  br label %5548

4041:                                             ; preds = %4030, %4036, %3960, %3974
  %4042 = phi ptr [ %3962, %3974 ], [ %3962, %3960 ], [ %4033, %4036 ], [ %4033, %4030 ]
  %4043 = phi i32 [ %22, %3974 ], [ 1, %3960 ], [ %22, %4036 ], [ %22, %4030 ]
  %4044 = getelementptr inbounds i8, ptr %4042, i64 1
  store ptr %4044, ptr %6, align 8, !tbaa !35
  %4045 = icmp ult ptr %4044, %3
  br i1 %4045, label %3960, label %5550, !llvm.loop !144

4046:                                             ; preds = %5
  br label %4047

4047:                                             ; preds = %5, %4046
  %4048 = phi i32 [ 0, %5 ], [ 1, %4046 ]
  %4049 = phi i8 [ 0, %5 ], [ 1, %4046 ]
  br i1 %25, label %4140, label %4050

4050:                                             ; preds = %4047
  %4051 = icmp ult ptr %2, %3
  br i1 %4051, label %4052, label %5550

4052:                                             ; preds = %4050
  %4053 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4054 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4055 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4056

4056:                                             ; preds = %4052, %4135
  %4057 = phi i32 [ 1, %4052 ], [ %4137, %4135 ]
  %4058 = phi ptr [ %2, %4052 ], [ %4138, %4135 ]
  %4059 = load i8, ptr %4058, align 1, !tbaa !5
  %4060 = zext i8 %4059 to i64
  %4061 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4060
  %4062 = load i32, ptr %4061, align 4, !tbaa !73
  %4063 = load i8, ptr %1, align 2, !tbaa !76
  %4064 = zext i8 %4063 to i32
  %4065 = lshr i32 %4062, %4064
  %4066 = and i32 %4065, 1
  %4067 = icmp eq i32 %4048, %4066
  br i1 %4067, label %4135, label %4068

4068:                                             ; preds = %4056
  %4069 = icmp eq i32 %4057, 0
  br i1 %4069, label %4135, label %4070

4070:                                             ; preds = %4068
  %4071 = load i8, ptr %4053, align 8, !tbaa !31, !range !42, !noundef !43
  %4072 = icmp eq i8 %4071, 0
  br i1 %4072, label %4073, label %5548

4073:                                             ; preds = %4070
  %4074 = load ptr, ptr %4, align 8, !tbaa !62
  %4075 = getelementptr i8, ptr %4074, i64 16
  %4076 = load ptr, ptr %4075, align 8, !tbaa !5
  %4077 = getelementptr inbounds %struct.regexp, ptr %4076, i64 0, i32 14
  %4078 = load ptr, ptr %4077, align 8, !tbaa !20
  store ptr null, ptr %4054, align 8, !tbaa !63
  %4079 = load ptr, ptr %4055, align 8, !tbaa !26
  %4080 = ptrtoint ptr %4058 to i64
  %4081 = ptrtoint ptr %4079 to i64
  %4082 = sub i64 %4080, %4081
  %4083 = getelementptr inbounds %struct.regexp, ptr %4076, i64 0, i32 17
  %4084 = load ptr, ptr %4083, align 8, !tbaa !64
  store i64 %4082, ptr %4084, align 8, !tbaa !65
  %4085 = getelementptr inbounds %struct.regexp, ptr %4076, i64 0, i32 15
  store i32 0, ptr %4085, align 8, !tbaa !67
  %4086 = getelementptr inbounds %struct.regexp, ptr %4076, i64 0, i32 16
  store i32 0, ptr %4086, align 4, !tbaa !68
  %4087 = getelementptr inbounds %struct.regexp, ptr %4076, i64 0, i32 12
  %4088 = load i32, ptr %4087, align 8, !tbaa !69
  %4089 = icmp sgt i32 %4088, 0
  br i1 %4089, label %4090, label %4119

4090:                                             ; preds = %4073
  %4091 = and i32 %4088, 7
  %4092 = icmp eq i32 %4091, 0
  br i1 %4092, label %4101, label %4093

4093:                                             ; preds = %4090, %4093
  %4094 = phi i32 [ %4098, %4093 ], [ %4088, %4090 ]
  %4095 = phi ptr [ %4097, %4093 ], [ %4084, %4090 ]
  %4096 = phi i32 [ %4099, %4093 ], [ 0, %4090 ]
  %4097 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4095, i64 1
  %4098 = add nsw i32 %4094, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4097, i8 -1, i64 16, i1 false)
  %4099 = add i32 %4096, 1
  %4100 = icmp eq i32 %4099, %4091
  br i1 %4100, label %4101, label %4093, !llvm.loop !145

4101:                                             ; preds = %4093, %4090
  %4102 = phi i32 [ %4088, %4090 ], [ %4098, %4093 ]
  %4103 = phi ptr [ %4084, %4090 ], [ %4097, %4093 ]
  %4104 = icmp ult i32 %4088, 8
  br i1 %4104, label %4119, label %4105

4105:                                             ; preds = %4101, %4105
  %4106 = phi i32 [ %4116, %4105 ], [ %4102, %4101 ]
  %4107 = phi ptr [ %4115, %4105 ], [ %4103, %4101 ]
  %4108 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4108, i8 -1, i64 16, i1 false)
  %4109 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4109, i8 -1, i64 16, i1 false)
  %4110 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4110, i8 -1, i64 16, i1 false)
  %4111 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4111, i8 -1, i64 16, i1 false)
  %4112 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4112, i8 -1, i64 16, i1 false)
  %4113 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4113, i8 -1, i64 16, i1 false)
  %4114 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4114, i8 -1, i64 16, i1 false)
  %4115 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4107, i64 8
  %4116 = add nsw i32 %4106, -8
  %4117 = add i32 %4106, -9
  %4118 = icmp ult i32 %4117, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4115, i8 -1, i64 16, i1 false)
  br i1 %4118, label %4105, label %4119, !llvm.loop !72

4119:                                             ; preds = %4101, %4105, %4073
  %4120 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4121 = getelementptr inbounds %struct.regexp_internal, ptr %4078, i64 1
  %4122 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4058, ptr noundef nonnull %4121)
  %4123 = icmp eq i64 %4122, -1
  br i1 %4123, label %4124, label %4131

4124:                                             ; preds = %4119
  %4125 = load ptr, ptr %4054, align 8, !tbaa !63
  %4126 = icmp eq ptr %4125, null
  %4127 = select i1 %4126, ptr %4058, ptr %4125
  %4128 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4129 = icmp sgt i32 %4128, %4120
  br i1 %4129, label %4130, label %4135

4130:                                             ; preds = %4124
  tail call void @Perl_leave_scope(i32 noundef %4120) #12
  br label %4135

4131:                                             ; preds = %4119
  %4132 = getelementptr inbounds %struct.regexp, ptr %4076, i64 0, i32 17
  %4133 = load ptr, ptr %4132, align 8, !tbaa !64
  %4134 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4133, i64 0, i32 1
  store i64 %4122, ptr %4134, align 8, !tbaa !74
  br label %5548

4135:                                             ; preds = %4124, %4130, %4056, %4068
  %4136 = phi ptr [ %4058, %4068 ], [ %4058, %4056 ], [ %4127, %4130 ], [ %4127, %4124 ]
  %4137 = phi i32 [ %22, %4068 ], [ 1, %4056 ], [ %22, %4130 ], [ %22, %4124 ]
  %4138 = getelementptr inbounds i8, ptr %4136, i64 1
  store ptr %4138, ptr %6, align 8, !tbaa !35
  %4139 = icmp ult ptr %4138, %3
  br i1 %4139, label %4056, label %5550, !llvm.loop !146

4140:                                             ; preds = %4047, %3849
  %4141 = phi i8 [ %4049, %4047 ], [ %3850, %3849 ]
  %4142 = load i8, ptr %1, align 2, !tbaa !76
  %4143 = zext i8 %4142 to i32
  %4144 = icmp ult i8 %4142, 10
  br i1 %4144, label %4145, label %4262

4145:                                             ; preds = %4140
  %4146 = icmp ult ptr %2, %3
  br i1 %4146, label %4147, label %5550

4147:                                             ; preds = %4145
  %4148 = zext i8 %4141 to i32
  %4149 = shl nuw i32 1, %4143
  %4150 = icmp eq i8 %4141, 0
  %4151 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4152 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4153 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4154

4154:                                             ; preds = %4147, %4252
  %4155 = phi i32 [ 1, %4147 ], [ %4254, %4252 ]
  %4156 = phi ptr [ %2, %4147 ], [ %4260, %4252 ]
  %4157 = load i8, ptr %4156, align 1, !tbaa !5
  %4158 = icmp ugt i8 %4157, -61
  br i1 %4158, label %4916, label %4159

4159:                                             ; preds = %4154
  %4160 = icmp sgt i8 %4157, -1
  br i1 %4160, label %4161, label %4168

4161:                                             ; preds = %4159
  %4162 = zext i8 %4157 to i64
  %4163 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4162
  %4164 = load i32, ptr %4163, align 4, !tbaa !73
  %4165 = lshr i32 %4164, %4143
  %4166 = and i32 %4165, 1
  %4167 = icmp eq i32 %4166, %4148
  br i1 %4167, label %4168, label %4183

4168:                                             ; preds = %4161, %4159
  %4169 = and i8 %4157, -2
  %4170 = icmp eq i8 %4169, -62
  br i1 %4170, label %4171, label %4252

4171:                                             ; preds = %4168
  %4172 = shl i8 %4157, 6
  %4173 = getelementptr inbounds i8, ptr %4156, i64 1
  %4174 = load i8, ptr %4173, align 1, !tbaa !5
  %4175 = and i8 %4174, 63
  %4176 = or i8 %4175, %4172
  %4177 = zext i8 %4176 to i64
  %4178 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4177
  %4179 = load i32, ptr %4178, align 4, !tbaa !73
  %4180 = and i32 %4179, %4149
  %4181 = icmp ne i32 %4180, 0
  %4182 = xor i1 %4150, %4181
  br i1 %4182, label %4252, label %4183

4183:                                             ; preds = %4171, %4161
  %4184 = icmp eq i32 %4155, 0
  br i1 %4184, label %4252, label %4185

4185:                                             ; preds = %4183
  %4186 = load i8, ptr %4151, align 8, !tbaa !31, !range !42, !noundef !43
  %4187 = icmp eq i8 %4186, 0
  br i1 %4187, label %4188, label %5548

4188:                                             ; preds = %4185
  %4189 = load ptr, ptr %4, align 8, !tbaa !62
  %4190 = getelementptr i8, ptr %4189, i64 16
  %4191 = load ptr, ptr %4190, align 8, !tbaa !5
  %4192 = getelementptr inbounds %struct.regexp, ptr %4191, i64 0, i32 14
  %4193 = load ptr, ptr %4192, align 8, !tbaa !20
  store ptr null, ptr %4152, align 8, !tbaa !63
  %4194 = load ptr, ptr %4153, align 8, !tbaa !26
  %4195 = ptrtoint ptr %4156 to i64
  %4196 = ptrtoint ptr %4194 to i64
  %4197 = sub i64 %4195, %4196
  %4198 = getelementptr inbounds %struct.regexp, ptr %4191, i64 0, i32 17
  %4199 = load ptr, ptr %4198, align 8, !tbaa !64
  store i64 %4197, ptr %4199, align 8, !tbaa !65
  %4200 = getelementptr inbounds %struct.regexp, ptr %4191, i64 0, i32 15
  store i32 0, ptr %4200, align 8, !tbaa !67
  %4201 = getelementptr inbounds %struct.regexp, ptr %4191, i64 0, i32 16
  store i32 0, ptr %4201, align 4, !tbaa !68
  %4202 = getelementptr inbounds %struct.regexp, ptr %4191, i64 0, i32 12
  %4203 = load i32, ptr %4202, align 8, !tbaa !69
  %4204 = icmp sgt i32 %4203, 0
  br i1 %4204, label %4205, label %4234

4205:                                             ; preds = %4188
  %4206 = and i32 %4203, 7
  %4207 = icmp eq i32 %4206, 0
  br i1 %4207, label %4216, label %4208

4208:                                             ; preds = %4205, %4208
  %4209 = phi i32 [ %4213, %4208 ], [ %4203, %4205 ]
  %4210 = phi ptr [ %4212, %4208 ], [ %4199, %4205 ]
  %4211 = phi i32 [ %4214, %4208 ], [ 0, %4205 ]
  %4212 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4210, i64 1
  %4213 = add nsw i32 %4209, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4212, i8 -1, i64 16, i1 false)
  %4214 = add i32 %4211, 1
  %4215 = icmp eq i32 %4214, %4206
  br i1 %4215, label %4216, label %4208, !llvm.loop !147

4216:                                             ; preds = %4208, %4205
  %4217 = phi i32 [ %4203, %4205 ], [ %4213, %4208 ]
  %4218 = phi ptr [ %4199, %4205 ], [ %4212, %4208 ]
  %4219 = icmp ult i32 %4203, 8
  br i1 %4219, label %4234, label %4220

4220:                                             ; preds = %4216, %4220
  %4221 = phi i32 [ %4231, %4220 ], [ %4217, %4216 ]
  %4222 = phi ptr [ %4230, %4220 ], [ %4218, %4216 ]
  %4223 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4223, i8 -1, i64 16, i1 false)
  %4224 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4224, i8 -1, i64 16, i1 false)
  %4225 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4225, i8 -1, i64 16, i1 false)
  %4226 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4226, i8 -1, i64 16, i1 false)
  %4227 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4227, i8 -1, i64 16, i1 false)
  %4228 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4228, i8 -1, i64 16, i1 false)
  %4229 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4229, i8 -1, i64 16, i1 false)
  %4230 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4222, i64 8
  %4231 = add nsw i32 %4221, -8
  %4232 = add i32 %4221, -9
  %4233 = icmp ult i32 %4232, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4230, i8 -1, i64 16, i1 false)
  br i1 %4233, label %4220, label %4234, !llvm.loop !72

4234:                                             ; preds = %4216, %4220, %4188
  %4235 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4236 = getelementptr inbounds %struct.regexp_internal, ptr %4193, i64 1
  %4237 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4156, ptr noundef nonnull %4236)
  %4238 = icmp eq i64 %4237, -1
  br i1 %4238, label %4239, label %4248

4239:                                             ; preds = %4234
  %4240 = load ptr, ptr %4152, align 8, !tbaa !63
  %4241 = icmp eq ptr %4240, null
  br i1 %4241, label %4243, label %4242

4242:                                             ; preds = %4239
  store ptr %4240, ptr %6, align 8, !tbaa !35
  br label %4243

4243:                                             ; preds = %4242, %4239
  %4244 = phi ptr [ %4240, %4242 ], [ %4156, %4239 ]
  %4245 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4246 = icmp sgt i32 %4245, %4235
  br i1 %4246, label %4247, label %4252

4247:                                             ; preds = %4243
  tail call void @Perl_leave_scope(i32 noundef %4235) #12
  br label %4252

4248:                                             ; preds = %4234
  %4249 = getelementptr inbounds %struct.regexp, ptr %4191, i64 0, i32 17
  %4250 = load ptr, ptr %4249, align 8, !tbaa !64
  %4251 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4250, i64 0, i32 1
  store i64 %4237, ptr %4251, align 8, !tbaa !74
  br label %5548

4252:                                             ; preds = %4243, %4247, %4168, %4171, %4183
  %4253 = phi ptr [ %4156, %4183 ], [ %4156, %4171 ], [ %4156, %4168 ], [ %4244, %4247 ], [ %4244, %4243 ]
  %4254 = phi i32 [ %22, %4183 ], [ 1, %4171 ], [ 1, %4168 ], [ %22, %4247 ], [ %22, %4243 ]
  %4255 = load i8, ptr %4253, align 1, !tbaa !5
  %4256 = zext i8 %4255 to i64
  %4257 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4256
  %4258 = load i8, ptr %4257, align 1, !tbaa !5
  %4259 = zext i8 %4258 to i64
  %4260 = getelementptr inbounds i8, ptr %4253, i64 %4259
  store ptr %4260, ptr %6, align 8, !tbaa !35
  %4261 = icmp ult ptr %4260, %3
  br i1 %4261, label %4154, label %5550, !llvm.loop !148

4262:                                             ; preds = %4140
  switch i8 %4142, label %4911 [
    i8 10, label %4291
    i8 11, label %4284
    i8 12, label %4277
    i8 15, label %4270
    i8 13, label %4263
  ]

4263:                                             ; preds = %4262
  %4264 = icmp ult ptr %2, %3
  br i1 %4264, label %4265, label %5550

4265:                                             ; preds = %4263
  %4266 = icmp eq i8 %4141, 0
  %4267 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4268 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4269 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4809

4270:                                             ; preds = %4262
  %4271 = icmp ult ptr %2, %3
  br i1 %4271, label %4272, label %5550

4272:                                             ; preds = %4270
  %4273 = icmp eq i8 %4141, 0
  %4274 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4275 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4276 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4690

4277:                                             ; preds = %4262
  %4278 = icmp ult ptr %2, %3
  br i1 %4278, label %4279, label %5550

4279:                                             ; preds = %4277
  %4280 = icmp eq i8 %4141, 0
  %4281 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4282 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4283 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4577

4284:                                             ; preds = %4262
  %4285 = icmp ult ptr %2, %3
  br i1 %4285, label %4286, label %5550

4286:                                             ; preds = %4284
  %4287 = icmp eq i8 %4141, 0
  %4288 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4289 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4290 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4439

4291:                                             ; preds = %4262
  %4292 = icmp ult ptr %2, %3
  br i1 %4292, label %4293, label %5550

4293:                                             ; preds = %4291
  %4294 = icmp eq i8 %4141, 0
  %4295 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %4296 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %4297 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  br label %4298

4298:                                             ; preds = %4293, %4429
  %4299 = phi i32 [ 1, %4293 ], [ %4431, %4429 ]
  %4300 = phi ptr [ %2, %4293 ], [ %4437, %4429 ]
  %4301 = load i8, ptr %4300, align 1, !tbaa !5
  %4302 = icmp sgt i8 %4301, -1
  br i1 %4302, label %4303, label %4309

4303:                                             ; preds = %4298
  %4304 = zext i8 %4301 to i64
  %4305 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4304
  %4306 = load i32, ptr %4305, align 4, !tbaa !73
  %4307 = and i32 %4306, 1024
  %4308 = icmp ne i32 %4307, 0
  br label %4357

4309:                                             ; preds = %4298
  %4310 = and i8 %4301, -2
  %4311 = icmp eq i8 %4310, -62
  br i1 %4311, label %4312, label %4323

4312:                                             ; preds = %4309
  %4313 = shl i8 %4301, 6
  %4314 = getelementptr inbounds i8, ptr %4300, i64 1
  %4315 = load i8, ptr %4314, align 1, !tbaa !5
  %4316 = and i8 %4315, 63
  %4317 = or i8 %4316, %4313
  %4318 = zext i8 %4317 to i64
  %4319 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4318
  %4320 = load i32, ptr %4319, align 4, !tbaa !73
  %4321 = and i32 %4320, 1024
  %4322 = icmp ne i32 %4321, 0
  br label %4357

4323:                                             ; preds = %4309
  switch i8 %4301, label %4356 [
    i8 -31, label %4324
    i8 -30, label %4332
    i8 -29, label %4348
  ]

4324:                                             ; preds = %4323
  %4325 = getelementptr inbounds i8, ptr %4300, i64 1
  %4326 = load i8, ptr %4325, align 1, !tbaa !5
  %4327 = icmp eq i8 %4326, -102
  br i1 %4327, label %4328, label %4356

4328:                                             ; preds = %4324
  %4329 = getelementptr inbounds i8, ptr %4300, i64 2
  %4330 = load i8, ptr %4329, align 1, !tbaa !5
  %4331 = icmp eq i8 %4330, -128
  br label %4357

4332:                                             ; preds = %4323
  %4333 = getelementptr inbounds i8, ptr %4300, i64 1
  %4334 = load i8, ptr %4333, align 1, !tbaa !5
  switch i8 %4334, label %4356 [
    i8 -128, label %4335
    i8 -127, label %4344
  ]

4335:                                             ; preds = %4332
  %4336 = getelementptr inbounds i8, ptr %4300, i64 2
  %4337 = load i8, ptr %4336, align 1, !tbaa !5
  %4338 = icmp ult i8 %4337, -117
  %4339 = and i8 %4337, -2
  %4340 = icmp eq i8 %4339, -88
  %4341 = or i1 %4338, %4340
  %4342 = icmp eq i8 %4337, -81
  %4343 = or i1 %4342, %4341
  br label %4357

4344:                                             ; preds = %4332
  %4345 = getelementptr inbounds i8, ptr %4300, i64 2
  %4346 = load i8, ptr %4345, align 1, !tbaa !5
  %4347 = icmp eq i8 %4346, -97
  br label %4357

4348:                                             ; preds = %4323
  %4349 = getelementptr inbounds i8, ptr %4300, i64 1
  %4350 = load i8, ptr %4349, align 1, !tbaa !5
  %4351 = icmp eq i8 %4350, -128
  br i1 %4351, label %4352, label %4356

4352:                                             ; preds = %4348
  %4353 = getelementptr inbounds i8, ptr %4300, i64 2
  %4354 = load i8, ptr %4353, align 1, !tbaa !5
  %4355 = icmp eq i8 %4354, -128
  br label %4357

4356:                                             ; preds = %4323, %4348, %4332, %4324
  br i1 %4294, label %4429, label %4360

4357:                                             ; preds = %4335, %4352, %4344, %4328, %4312, %4303
  %4358 = phi i1 [ %4308, %4303 ], [ %4322, %4312 ], [ %4331, %4328 ], [ %4347, %4344 ], [ %4355, %4352 ], [ %4343, %4335 ]
  %4359 = xor i1 %4294, %4358
  br i1 %4359, label %4429, label %4360

4360:                                             ; preds = %4356, %4357
  %4361 = icmp eq i32 %4299, 0
  br i1 %4361, label %4429, label %4362

4362:                                             ; preds = %4360
  %4363 = load i8, ptr %4295, align 8, !tbaa !31, !range !42, !noundef !43
  %4364 = icmp eq i8 %4363, 0
  br i1 %4364, label %4365, label %5548

4365:                                             ; preds = %4362
  %4366 = load ptr, ptr %4, align 8, !tbaa !62
  %4367 = getelementptr i8, ptr %4366, i64 16
  %4368 = load ptr, ptr %4367, align 8, !tbaa !5
  %4369 = getelementptr inbounds %struct.regexp, ptr %4368, i64 0, i32 14
  %4370 = load ptr, ptr %4369, align 8, !tbaa !20
  store ptr null, ptr %4296, align 8, !tbaa !63
  %4371 = load ptr, ptr %4297, align 8, !tbaa !26
  %4372 = ptrtoint ptr %4300 to i64
  %4373 = ptrtoint ptr %4371 to i64
  %4374 = sub i64 %4372, %4373
  %4375 = getelementptr inbounds %struct.regexp, ptr %4368, i64 0, i32 17
  %4376 = load ptr, ptr %4375, align 8, !tbaa !64
  store i64 %4374, ptr %4376, align 8, !tbaa !65
  %4377 = getelementptr inbounds %struct.regexp, ptr %4368, i64 0, i32 15
  store i32 0, ptr %4377, align 8, !tbaa !67
  %4378 = getelementptr inbounds %struct.regexp, ptr %4368, i64 0, i32 16
  store i32 0, ptr %4378, align 4, !tbaa !68
  %4379 = getelementptr inbounds %struct.regexp, ptr %4368, i64 0, i32 12
  %4380 = load i32, ptr %4379, align 8, !tbaa !69
  %4381 = icmp sgt i32 %4380, 0
  br i1 %4381, label %4382, label %4411

4382:                                             ; preds = %4365
  %4383 = and i32 %4380, 7
  %4384 = icmp eq i32 %4383, 0
  br i1 %4384, label %4393, label %4385

4385:                                             ; preds = %4382, %4385
  %4386 = phi i32 [ %4390, %4385 ], [ %4380, %4382 ]
  %4387 = phi ptr [ %4389, %4385 ], [ %4376, %4382 ]
  %4388 = phi i32 [ %4391, %4385 ], [ 0, %4382 ]
  %4389 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4387, i64 1
  %4390 = add nsw i32 %4386, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4389, i8 -1, i64 16, i1 false)
  %4391 = add i32 %4388, 1
  %4392 = icmp eq i32 %4391, %4383
  br i1 %4392, label %4393, label %4385, !llvm.loop !149

4393:                                             ; preds = %4385, %4382
  %4394 = phi i32 [ %4380, %4382 ], [ %4390, %4385 ]
  %4395 = phi ptr [ %4376, %4382 ], [ %4389, %4385 ]
  %4396 = icmp ult i32 %4380, 8
  br i1 %4396, label %4411, label %4397

4397:                                             ; preds = %4393, %4397
  %4398 = phi i32 [ %4408, %4397 ], [ %4394, %4393 ]
  %4399 = phi ptr [ %4407, %4397 ], [ %4395, %4393 ]
  %4400 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4400, i8 -1, i64 16, i1 false)
  %4401 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4401, i8 -1, i64 16, i1 false)
  %4402 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4402, i8 -1, i64 16, i1 false)
  %4403 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4403, i8 -1, i64 16, i1 false)
  %4404 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4404, i8 -1, i64 16, i1 false)
  %4405 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4405, i8 -1, i64 16, i1 false)
  %4406 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4406, i8 -1, i64 16, i1 false)
  %4407 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4399, i64 8
  %4408 = add nsw i32 %4398, -8
  %4409 = add i32 %4398, -9
  %4410 = icmp ult i32 %4409, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4407, i8 -1, i64 16, i1 false)
  br i1 %4410, label %4397, label %4411, !llvm.loop !72

4411:                                             ; preds = %4393, %4397, %4365
  %4412 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4413 = getelementptr inbounds %struct.regexp_internal, ptr %4370, i64 1
  %4414 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4300, ptr noundef nonnull %4413)
  %4415 = icmp eq i64 %4414, -1
  br i1 %4415, label %4416, label %4425

4416:                                             ; preds = %4411
  %4417 = load ptr, ptr %4296, align 8, !tbaa !63
  %4418 = icmp eq ptr %4417, null
  br i1 %4418, label %4420, label %4419

4419:                                             ; preds = %4416
  store ptr %4417, ptr %6, align 8, !tbaa !35
  br label %4420

4420:                                             ; preds = %4419, %4416
  %4421 = phi ptr [ %4417, %4419 ], [ %4300, %4416 ]
  %4422 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4423 = icmp sgt i32 %4422, %4412
  br i1 %4423, label %4424, label %4429

4424:                                             ; preds = %4420
  tail call void @Perl_leave_scope(i32 noundef %4412) #12
  br label %4429

4425:                                             ; preds = %4411
  %4426 = getelementptr inbounds %struct.regexp, ptr %4368, i64 0, i32 17
  %4427 = load ptr, ptr %4426, align 8, !tbaa !64
  %4428 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4427, i64 0, i32 1
  store i64 %4414, ptr %4428, align 8, !tbaa !74
  br label %5548

4429:                                             ; preds = %4420, %4424, %4356, %4357, %4360
  %4430 = phi ptr [ %4300, %4360 ], [ %4300, %4357 ], [ %4300, %4356 ], [ %4421, %4424 ], [ %4421, %4420 ]
  %4431 = phi i32 [ %22, %4360 ], [ 1, %4357 ], [ 1, %4356 ], [ %22, %4424 ], [ %22, %4420 ]
  %4432 = load i8, ptr %4430, align 1, !tbaa !5
  %4433 = zext i8 %4432 to i64
  %4434 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4433
  %4435 = load i8, ptr %4434, align 1, !tbaa !5
  %4436 = zext i8 %4435 to i64
  %4437 = getelementptr inbounds i8, ptr %4430, i64 %4436
  store ptr %4437, ptr %6, align 8, !tbaa !35
  %4438 = icmp ult ptr %4437, %3
  br i1 %4438, label %4298, label %5550, !llvm.loop !150

4439:                                             ; preds = %4286, %4567
  %4440 = phi i32 [ 1, %4286 ], [ %4569, %4567 ]
  %4441 = phi ptr [ %2, %4286 ], [ %4575, %4567 ]
  %4442 = load i8, ptr %4441, align 1, !tbaa !5
  %4443 = icmp sgt i8 %4442, -1
  br i1 %4443, label %4444, label %4450

4444:                                             ; preds = %4439
  %4445 = zext i8 %4442 to i64
  %4446 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4445
  %4447 = load i32, ptr %4446, align 4, !tbaa !73
  %4448 = and i32 %4447, 2048
  %4449 = icmp ne i32 %4448, 0
  br label %4495

4450:                                             ; preds = %4439
  %4451 = and i8 %4442, -2
  %4452 = icmp eq i8 %4451, -62
  br i1 %4452, label %4453, label %4464

4453:                                             ; preds = %4450
  %4454 = shl i8 %4442, 6
  %4455 = getelementptr inbounds i8, ptr %4441, i64 1
  %4456 = load i8, ptr %4455, align 1, !tbaa !5
  %4457 = and i8 %4456, 63
  %4458 = or i8 %4457, %4454
  %4459 = zext i8 %4458 to i64
  %4460 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4459
  %4461 = load i32, ptr %4460, align 4, !tbaa !73
  %4462 = and i32 %4461, 2048
  %4463 = icmp ne i32 %4462, 0
  br label %4495

4464:                                             ; preds = %4450
  switch i8 %4442, label %4494 [
    i8 -31, label %4465
    i8 -30, label %4473
    i8 -29, label %4486
  ]

4465:                                             ; preds = %4464
  %4466 = getelementptr inbounds i8, ptr %4441, i64 1
  %4467 = load i8, ptr %4466, align 1, !tbaa !5
  %4468 = icmp eq i8 %4467, -102
  br i1 %4468, label %4469, label %4494

4469:                                             ; preds = %4465
  %4470 = getelementptr inbounds i8, ptr %4441, i64 2
  %4471 = load i8, ptr %4470, align 1, !tbaa !5
  %4472 = icmp eq i8 %4471, -128
  br label %4495

4473:                                             ; preds = %4464
  %4474 = getelementptr inbounds i8, ptr %4441, i64 1
  %4475 = load i8, ptr %4474, align 1, !tbaa !5
  switch i8 %4475, label %4494 [
    i8 -128, label %4476
    i8 -127, label %4482
  ]

4476:                                             ; preds = %4473
  %4477 = getelementptr inbounds i8, ptr %4441, i64 2
  %4478 = load i8, ptr %4477, align 1, !tbaa !5
  %4479 = icmp ult i8 %4478, -117
  %4480 = icmp eq i8 %4478, -81
  %4481 = or i1 %4479, %4480
  br label %4495

4482:                                             ; preds = %4473
  %4483 = getelementptr inbounds i8, ptr %4441, i64 2
  %4484 = load i8, ptr %4483, align 1, !tbaa !5
  %4485 = icmp eq i8 %4484, -97
  br label %4495

4486:                                             ; preds = %4464
  %4487 = getelementptr inbounds i8, ptr %4441, i64 1
  %4488 = load i8, ptr %4487, align 1, !tbaa !5
  %4489 = icmp eq i8 %4488, -128
  br i1 %4489, label %4490, label %4494

4490:                                             ; preds = %4486
  %4491 = getelementptr inbounds i8, ptr %4441, i64 2
  %4492 = load i8, ptr %4491, align 1, !tbaa !5
  %4493 = icmp eq i8 %4492, -128
  br label %4495

4494:                                             ; preds = %4464, %4486, %4473, %4465
  br i1 %4287, label %4567, label %4498

4495:                                             ; preds = %4490, %4482, %4469, %4453, %4476, %4444
  %4496 = phi i1 [ %4449, %4444 ], [ %4481, %4476 ], [ %4463, %4453 ], [ %4472, %4469 ], [ %4485, %4482 ], [ %4493, %4490 ]
  %4497 = xor i1 %4287, %4496
  br i1 %4497, label %4567, label %4498

4498:                                             ; preds = %4494, %4495
  %4499 = icmp eq i32 %4440, 0
  br i1 %4499, label %4567, label %4500

4500:                                             ; preds = %4498
  %4501 = load i8, ptr %4288, align 8, !tbaa !31, !range !42, !noundef !43
  %4502 = icmp eq i8 %4501, 0
  br i1 %4502, label %4503, label %5548

4503:                                             ; preds = %4500
  %4504 = load ptr, ptr %4, align 8, !tbaa !62
  %4505 = getelementptr i8, ptr %4504, i64 16
  %4506 = load ptr, ptr %4505, align 8, !tbaa !5
  %4507 = getelementptr inbounds %struct.regexp, ptr %4506, i64 0, i32 14
  %4508 = load ptr, ptr %4507, align 8, !tbaa !20
  store ptr null, ptr %4289, align 8, !tbaa !63
  %4509 = load ptr, ptr %4290, align 8, !tbaa !26
  %4510 = ptrtoint ptr %4441 to i64
  %4511 = ptrtoint ptr %4509 to i64
  %4512 = sub i64 %4510, %4511
  %4513 = getelementptr inbounds %struct.regexp, ptr %4506, i64 0, i32 17
  %4514 = load ptr, ptr %4513, align 8, !tbaa !64
  store i64 %4512, ptr %4514, align 8, !tbaa !65
  %4515 = getelementptr inbounds %struct.regexp, ptr %4506, i64 0, i32 15
  store i32 0, ptr %4515, align 8, !tbaa !67
  %4516 = getelementptr inbounds %struct.regexp, ptr %4506, i64 0, i32 16
  store i32 0, ptr %4516, align 4, !tbaa !68
  %4517 = getelementptr inbounds %struct.regexp, ptr %4506, i64 0, i32 12
  %4518 = load i32, ptr %4517, align 8, !tbaa !69
  %4519 = icmp sgt i32 %4518, 0
  br i1 %4519, label %4520, label %4549

4520:                                             ; preds = %4503
  %4521 = and i32 %4518, 7
  %4522 = icmp eq i32 %4521, 0
  br i1 %4522, label %4531, label %4523

4523:                                             ; preds = %4520, %4523
  %4524 = phi i32 [ %4528, %4523 ], [ %4518, %4520 ]
  %4525 = phi ptr [ %4527, %4523 ], [ %4514, %4520 ]
  %4526 = phi i32 [ %4529, %4523 ], [ 0, %4520 ]
  %4527 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4525, i64 1
  %4528 = add nsw i32 %4524, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4527, i8 -1, i64 16, i1 false)
  %4529 = add i32 %4526, 1
  %4530 = icmp eq i32 %4529, %4521
  br i1 %4530, label %4531, label %4523, !llvm.loop !151

4531:                                             ; preds = %4523, %4520
  %4532 = phi i32 [ %4518, %4520 ], [ %4528, %4523 ]
  %4533 = phi ptr [ %4514, %4520 ], [ %4527, %4523 ]
  %4534 = icmp ult i32 %4518, 8
  br i1 %4534, label %4549, label %4535

4535:                                             ; preds = %4531, %4535
  %4536 = phi i32 [ %4546, %4535 ], [ %4532, %4531 ]
  %4537 = phi ptr [ %4545, %4535 ], [ %4533, %4531 ]
  %4538 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4538, i8 -1, i64 16, i1 false)
  %4539 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4539, i8 -1, i64 16, i1 false)
  %4540 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4540, i8 -1, i64 16, i1 false)
  %4541 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4541, i8 -1, i64 16, i1 false)
  %4542 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4542, i8 -1, i64 16, i1 false)
  %4543 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4543, i8 -1, i64 16, i1 false)
  %4544 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4544, i8 -1, i64 16, i1 false)
  %4545 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4537, i64 8
  %4546 = add nsw i32 %4536, -8
  %4547 = add i32 %4536, -9
  %4548 = icmp ult i32 %4547, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4545, i8 -1, i64 16, i1 false)
  br i1 %4548, label %4535, label %4549, !llvm.loop !72

4549:                                             ; preds = %4531, %4535, %4503
  %4550 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4551 = getelementptr inbounds %struct.regexp_internal, ptr %4508, i64 1
  %4552 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4441, ptr noundef nonnull %4551)
  %4553 = icmp eq i64 %4552, -1
  br i1 %4553, label %4554, label %4563

4554:                                             ; preds = %4549
  %4555 = load ptr, ptr %4289, align 8, !tbaa !63
  %4556 = icmp eq ptr %4555, null
  br i1 %4556, label %4558, label %4557

4557:                                             ; preds = %4554
  store ptr %4555, ptr %6, align 8, !tbaa !35
  br label %4558

4558:                                             ; preds = %4557, %4554
  %4559 = phi ptr [ %4555, %4557 ], [ %4441, %4554 ]
  %4560 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4561 = icmp sgt i32 %4560, %4550
  br i1 %4561, label %4562, label %4567

4562:                                             ; preds = %4558
  tail call void @Perl_leave_scope(i32 noundef %4550) #12
  br label %4567

4563:                                             ; preds = %4549
  %4564 = getelementptr inbounds %struct.regexp, ptr %4506, i64 0, i32 17
  %4565 = load ptr, ptr %4564, align 8, !tbaa !64
  %4566 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4565, i64 0, i32 1
  store i64 %4552, ptr %4566, align 8, !tbaa !74
  br label %5548

4567:                                             ; preds = %4558, %4562, %4494, %4495, %4498
  %4568 = phi ptr [ %4441, %4498 ], [ %4441, %4495 ], [ %4441, %4494 ], [ %4559, %4562 ], [ %4559, %4558 ]
  %4569 = phi i32 [ %22, %4498 ], [ 1, %4495 ], [ 1, %4494 ], [ %22, %4562 ], [ %22, %4558 ]
  %4570 = load i8, ptr %4568, align 1, !tbaa !5
  %4571 = zext i8 %4570 to i64
  %4572 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4571
  %4573 = load i8, ptr %4572, align 1, !tbaa !5
  %4574 = zext i8 %4573 to i64
  %4575 = getelementptr inbounds i8, ptr %4568, i64 %4574
  store ptr %4575, ptr %6, align 8, !tbaa !35
  %4576 = icmp ult ptr %4575, %3
  br i1 %4576, label %4439, label %5550, !llvm.loop !152

4577:                                             ; preds = %4279, %4680
  %4578 = phi i32 [ 1, %4279 ], [ %4682, %4680 ]
  %4579 = phi ptr [ %2, %4279 ], [ %4688, %4680 ]
  %4580 = load i8, ptr %4579, align 1, !tbaa !5
  %4581 = icmp sgt i8 %4580, -1
  br i1 %4581, label %4582, label %4588

4582:                                             ; preds = %4577
  %4583 = zext i8 %4580 to i64
  %4584 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4583
  %4585 = load i32, ptr %4584, align 4, !tbaa !73
  %4586 = and i32 %4585, 4096
  %4587 = icmp ne i32 %4586, 0
  br label %4608

4588:                                             ; preds = %4577
  %4589 = icmp eq i8 %4580, -17
  br i1 %4589, label %4590, label %4607

4590:                                             ; preds = %4588
  %4591 = getelementptr inbounds i8, ptr %4579, i64 1
  %4592 = load i8, ptr %4591, align 1, !tbaa !5
  switch i8 %4592, label %4607 [
    i8 -68, label %4593
    i8 -67, label %4602
  ]

4593:                                             ; preds = %4590
  %4594 = getelementptr inbounds i8, ptr %4579, i64 2
  %4595 = load i8, ptr %4594, align 1, !tbaa !5
  %4596 = add i8 %4595, 112
  %4597 = icmp ult i8 %4596, 10
  br i1 %4597, label %4598, label %4599

4598:                                             ; preds = %4593
  br i1 %4280, label %4611, label %4680

4599:                                             ; preds = %4593
  %4600 = add i8 %4595, 95
  %4601 = icmp ult i8 %4600, 6
  br label %4608

4602:                                             ; preds = %4590
  %4603 = getelementptr inbounds i8, ptr %4579, i64 2
  %4604 = load i8, ptr %4603, align 1, !tbaa !5
  %4605 = add i8 %4604, 127
  %4606 = icmp ult i8 %4605, 6
  br label %4608

4607:                                             ; preds = %4590, %4588
  br i1 %4280, label %4680, label %4611

4608:                                             ; preds = %4602, %4599, %4582
  %4609 = phi i1 [ %4587, %4582 ], [ %4601, %4599 ], [ %4606, %4602 ]
  %4610 = xor i1 %4280, %4609
  br i1 %4610, label %4680, label %4611

4611:                                             ; preds = %4598, %4607, %4608
  %4612 = icmp eq i32 %4578, 0
  br i1 %4612, label %4680, label %4613

4613:                                             ; preds = %4611
  %4614 = load i8, ptr %4281, align 8, !tbaa !31, !range !42, !noundef !43
  %4615 = icmp eq i8 %4614, 0
  br i1 %4615, label %4616, label %5548

4616:                                             ; preds = %4613
  %4617 = load ptr, ptr %4, align 8, !tbaa !62
  %4618 = getelementptr i8, ptr %4617, i64 16
  %4619 = load ptr, ptr %4618, align 8, !tbaa !5
  %4620 = getelementptr inbounds %struct.regexp, ptr %4619, i64 0, i32 14
  %4621 = load ptr, ptr %4620, align 8, !tbaa !20
  store ptr null, ptr %4282, align 8, !tbaa !63
  %4622 = load ptr, ptr %4283, align 8, !tbaa !26
  %4623 = ptrtoint ptr %4579 to i64
  %4624 = ptrtoint ptr %4622 to i64
  %4625 = sub i64 %4623, %4624
  %4626 = getelementptr inbounds %struct.regexp, ptr %4619, i64 0, i32 17
  %4627 = load ptr, ptr %4626, align 8, !tbaa !64
  store i64 %4625, ptr %4627, align 8, !tbaa !65
  %4628 = getelementptr inbounds %struct.regexp, ptr %4619, i64 0, i32 15
  store i32 0, ptr %4628, align 8, !tbaa !67
  %4629 = getelementptr inbounds %struct.regexp, ptr %4619, i64 0, i32 16
  store i32 0, ptr %4629, align 4, !tbaa !68
  %4630 = getelementptr inbounds %struct.regexp, ptr %4619, i64 0, i32 12
  %4631 = load i32, ptr %4630, align 8, !tbaa !69
  %4632 = icmp sgt i32 %4631, 0
  br i1 %4632, label %4633, label %4662

4633:                                             ; preds = %4616
  %4634 = and i32 %4631, 7
  %4635 = icmp eq i32 %4634, 0
  br i1 %4635, label %4644, label %4636

4636:                                             ; preds = %4633, %4636
  %4637 = phi i32 [ %4641, %4636 ], [ %4631, %4633 ]
  %4638 = phi ptr [ %4640, %4636 ], [ %4627, %4633 ]
  %4639 = phi i32 [ %4642, %4636 ], [ 0, %4633 ]
  %4640 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4638, i64 1
  %4641 = add nsw i32 %4637, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4640, i8 -1, i64 16, i1 false)
  %4642 = add i32 %4639, 1
  %4643 = icmp eq i32 %4642, %4634
  br i1 %4643, label %4644, label %4636, !llvm.loop !153

4644:                                             ; preds = %4636, %4633
  %4645 = phi i32 [ %4631, %4633 ], [ %4641, %4636 ]
  %4646 = phi ptr [ %4627, %4633 ], [ %4640, %4636 ]
  %4647 = icmp ult i32 %4631, 8
  br i1 %4647, label %4662, label %4648

4648:                                             ; preds = %4644, %4648
  %4649 = phi i32 [ %4659, %4648 ], [ %4645, %4644 ]
  %4650 = phi ptr [ %4658, %4648 ], [ %4646, %4644 ]
  %4651 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4651, i8 -1, i64 16, i1 false)
  %4652 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4652, i8 -1, i64 16, i1 false)
  %4653 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4653, i8 -1, i64 16, i1 false)
  %4654 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4654, i8 -1, i64 16, i1 false)
  %4655 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4655, i8 -1, i64 16, i1 false)
  %4656 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4656, i8 -1, i64 16, i1 false)
  %4657 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4657, i8 -1, i64 16, i1 false)
  %4658 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4650, i64 8
  %4659 = add nsw i32 %4649, -8
  %4660 = add i32 %4649, -9
  %4661 = icmp ult i32 %4660, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4658, i8 -1, i64 16, i1 false)
  br i1 %4661, label %4648, label %4662, !llvm.loop !72

4662:                                             ; preds = %4644, %4648, %4616
  %4663 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4664 = getelementptr inbounds %struct.regexp_internal, ptr %4621, i64 1
  %4665 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4579, ptr noundef nonnull %4664)
  %4666 = icmp eq i64 %4665, -1
  br i1 %4666, label %4667, label %4676

4667:                                             ; preds = %4662
  %4668 = load ptr, ptr %4282, align 8, !tbaa !63
  %4669 = icmp eq ptr %4668, null
  br i1 %4669, label %4671, label %4670

4670:                                             ; preds = %4667
  store ptr %4668, ptr %6, align 8, !tbaa !35
  br label %4671

4671:                                             ; preds = %4670, %4667
  %4672 = phi ptr [ %4668, %4670 ], [ %4579, %4667 ]
  %4673 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4674 = icmp sgt i32 %4673, %4663
  br i1 %4674, label %4675, label %4680

4675:                                             ; preds = %4671
  tail call void @Perl_leave_scope(i32 noundef %4663) #12
  br label %4680

4676:                                             ; preds = %4662
  %4677 = getelementptr inbounds %struct.regexp, ptr %4619, i64 0, i32 17
  %4678 = load ptr, ptr %4677, align 8, !tbaa !64
  %4679 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4678, i64 0, i32 1
  store i64 %4665, ptr %4679, align 8, !tbaa !74
  br label %5548

4680:                                             ; preds = %4671, %4675, %4598, %4607, %4608, %4611
  %4681 = phi ptr [ %4579, %4611 ], [ %4579, %4608 ], [ %4579, %4607 ], [ %4579, %4598 ], [ %4672, %4675 ], [ %4672, %4671 ]
  %4682 = phi i32 [ %22, %4611 ], [ 1, %4608 ], [ 1, %4607 ], [ 1, %4598 ], [ %22, %4675 ], [ %22, %4671 ]
  %4683 = load i8, ptr %4681, align 1, !tbaa !5
  %4684 = zext i8 %4683 to i64
  %4685 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4684
  %4686 = load i8, ptr %4685, align 1, !tbaa !5
  %4687 = zext i8 %4686 to i64
  %4688 = getelementptr inbounds i8, ptr %4681, i64 %4687
  store ptr %4688, ptr %6, align 8, !tbaa !35
  %4689 = icmp ult ptr %4688, %3
  br i1 %4689, label %4577, label %5550, !llvm.loop !154

4690:                                             ; preds = %4272, %4799
  %4691 = phi i32 [ 1, %4272 ], [ %4801, %4799 ]
  %4692 = phi ptr [ %2, %4272 ], [ %4807, %4799 ]
  %4693 = load i8, ptr %4692, align 1, !tbaa !5
  %4694 = icmp sgt i8 %4693, -1
  br i1 %4694, label %4695, label %4701

4695:                                             ; preds = %4690
  %4696 = zext i8 %4693 to i64
  %4697 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4696
  %4698 = load i32, ptr %4697, align 4, !tbaa !73
  %4699 = and i32 %4698, 32768
  %4700 = icmp ne i32 %4699, 0
  br label %4727

4701:                                             ; preds = %4690
  %4702 = and i8 %4693, -2
  %4703 = icmp eq i8 %4702, -62
  br i1 %4703, label %4704, label %4715

4704:                                             ; preds = %4701
  %4705 = shl i8 %4693, 6
  %4706 = getelementptr inbounds i8, ptr %4692, i64 1
  %4707 = load i8, ptr %4706, align 1, !tbaa !5
  %4708 = and i8 %4707, 63
  %4709 = or i8 %4708, %4705
  %4710 = zext i8 %4709 to i64
  %4711 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4710
  %4712 = load i32, ptr %4711, align 4, !tbaa !73
  %4713 = and i32 %4712, 32768
  %4714 = icmp ne i32 %4713, 0
  br label %4727

4715:                                             ; preds = %4701
  %4716 = icmp eq i8 %4693, -30
  br i1 %4716, label %4717, label %4726

4717:                                             ; preds = %4715
  %4718 = getelementptr inbounds i8, ptr %4692, i64 1
  %4719 = load i8, ptr %4718, align 1, !tbaa !5
  %4720 = icmp eq i8 %4719, -128
  br i1 %4720, label %4721, label %4726

4721:                                             ; preds = %4717
  %4722 = getelementptr inbounds i8, ptr %4692, i64 2
  %4723 = load i8, ptr %4722, align 1, !tbaa !5
  %4724 = and i8 %4723, -2
  %4725 = icmp eq i8 %4724, -88
  br label %4727

4726:                                             ; preds = %4715, %4717
  br i1 %4273, label %4799, label %4730

4727:                                             ; preds = %4721, %4704, %4695
  %4728 = phi i1 [ %4700, %4695 ], [ %4714, %4704 ], [ %4725, %4721 ]
  %4729 = xor i1 %4273, %4728
  br i1 %4729, label %4799, label %4730

4730:                                             ; preds = %4726, %4727
  %4731 = icmp eq i32 %4691, 0
  br i1 %4731, label %4799, label %4732

4732:                                             ; preds = %4730
  %4733 = load i8, ptr %4274, align 8, !tbaa !31, !range !42, !noundef !43
  %4734 = icmp eq i8 %4733, 0
  br i1 %4734, label %4735, label %5548

4735:                                             ; preds = %4732
  %4736 = load ptr, ptr %4, align 8, !tbaa !62
  %4737 = getelementptr i8, ptr %4736, i64 16
  %4738 = load ptr, ptr %4737, align 8, !tbaa !5
  %4739 = getelementptr inbounds %struct.regexp, ptr %4738, i64 0, i32 14
  %4740 = load ptr, ptr %4739, align 8, !tbaa !20
  store ptr null, ptr %4275, align 8, !tbaa !63
  %4741 = load ptr, ptr %4276, align 8, !tbaa !26
  %4742 = ptrtoint ptr %4692 to i64
  %4743 = ptrtoint ptr %4741 to i64
  %4744 = sub i64 %4742, %4743
  %4745 = getelementptr inbounds %struct.regexp, ptr %4738, i64 0, i32 17
  %4746 = load ptr, ptr %4745, align 8, !tbaa !64
  store i64 %4744, ptr %4746, align 8, !tbaa !65
  %4747 = getelementptr inbounds %struct.regexp, ptr %4738, i64 0, i32 15
  store i32 0, ptr %4747, align 8, !tbaa !67
  %4748 = getelementptr inbounds %struct.regexp, ptr %4738, i64 0, i32 16
  store i32 0, ptr %4748, align 4, !tbaa !68
  %4749 = getelementptr inbounds %struct.regexp, ptr %4738, i64 0, i32 12
  %4750 = load i32, ptr %4749, align 8, !tbaa !69
  %4751 = icmp sgt i32 %4750, 0
  br i1 %4751, label %4752, label %4781

4752:                                             ; preds = %4735
  %4753 = and i32 %4750, 7
  %4754 = icmp eq i32 %4753, 0
  br i1 %4754, label %4763, label %4755

4755:                                             ; preds = %4752, %4755
  %4756 = phi i32 [ %4760, %4755 ], [ %4750, %4752 ]
  %4757 = phi ptr [ %4759, %4755 ], [ %4746, %4752 ]
  %4758 = phi i32 [ %4761, %4755 ], [ 0, %4752 ]
  %4759 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4757, i64 1
  %4760 = add nsw i32 %4756, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4759, i8 -1, i64 16, i1 false)
  %4761 = add i32 %4758, 1
  %4762 = icmp eq i32 %4761, %4753
  br i1 %4762, label %4763, label %4755, !llvm.loop !155

4763:                                             ; preds = %4755, %4752
  %4764 = phi i32 [ %4750, %4752 ], [ %4760, %4755 ]
  %4765 = phi ptr [ %4746, %4752 ], [ %4759, %4755 ]
  %4766 = icmp ult i32 %4750, 8
  br i1 %4766, label %4781, label %4767

4767:                                             ; preds = %4763, %4767
  %4768 = phi i32 [ %4778, %4767 ], [ %4764, %4763 ]
  %4769 = phi ptr [ %4777, %4767 ], [ %4765, %4763 ]
  %4770 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4770, i8 -1, i64 16, i1 false)
  %4771 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4771, i8 -1, i64 16, i1 false)
  %4772 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4772, i8 -1, i64 16, i1 false)
  %4773 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4773, i8 -1, i64 16, i1 false)
  %4774 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4774, i8 -1, i64 16, i1 false)
  %4775 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4775, i8 -1, i64 16, i1 false)
  %4776 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4776, i8 -1, i64 16, i1 false)
  %4777 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4769, i64 8
  %4778 = add nsw i32 %4768, -8
  %4779 = add i32 %4768, -9
  %4780 = icmp ult i32 %4779, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4777, i8 -1, i64 16, i1 false)
  br i1 %4780, label %4767, label %4781, !llvm.loop !72

4781:                                             ; preds = %4763, %4767, %4735
  %4782 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4783 = getelementptr inbounds %struct.regexp_internal, ptr %4740, i64 1
  %4784 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4692, ptr noundef nonnull %4783)
  %4785 = icmp eq i64 %4784, -1
  br i1 %4785, label %4786, label %4795

4786:                                             ; preds = %4781
  %4787 = load ptr, ptr %4275, align 8, !tbaa !63
  %4788 = icmp eq ptr %4787, null
  br i1 %4788, label %4790, label %4789

4789:                                             ; preds = %4786
  store ptr %4787, ptr %6, align 8, !tbaa !35
  br label %4790

4790:                                             ; preds = %4789, %4786
  %4791 = phi ptr [ %4787, %4789 ], [ %4692, %4786 ]
  %4792 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4793 = icmp sgt i32 %4792, %4782
  br i1 %4793, label %4794, label %4799

4794:                                             ; preds = %4790
  tail call void @Perl_leave_scope(i32 noundef %4782) #12
  br label %4799

4795:                                             ; preds = %4781
  %4796 = getelementptr inbounds %struct.regexp, ptr %4738, i64 0, i32 17
  %4797 = load ptr, ptr %4796, align 8, !tbaa !64
  %4798 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4797, i64 0, i32 1
  store i64 %4784, ptr %4798, align 8, !tbaa !74
  br label %5548

4799:                                             ; preds = %4790, %4794, %4726, %4727, %4730
  %4800 = phi ptr [ %4692, %4730 ], [ %4692, %4727 ], [ %4692, %4726 ], [ %4791, %4794 ], [ %4791, %4790 ]
  %4801 = phi i32 [ %22, %4730 ], [ 1, %4727 ], [ 1, %4726 ], [ %22, %4794 ], [ %22, %4790 ]
  %4802 = load i8, ptr %4800, align 1, !tbaa !5
  %4803 = zext i8 %4802 to i64
  %4804 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4803
  %4805 = load i8, ptr %4804, align 1, !tbaa !5
  %4806 = zext i8 %4805 to i64
  %4807 = getelementptr inbounds i8, ptr %4800, i64 %4806
  store ptr %4807, ptr %6, align 8, !tbaa !35
  %4808 = icmp ult ptr %4807, %3
  br i1 %4808, label %4690, label %5550, !llvm.loop !156

4809:                                             ; preds = %4265, %4901
  %4810 = phi i32 [ 1, %4265 ], [ %4903, %4901 ]
  %4811 = phi ptr [ %2, %4265 ], [ %4909, %4901 ]
  %4812 = load i8, ptr %4811, align 1, !tbaa !5
  %4813 = icmp sgt i8 %4812, -1
  br i1 %4813, label %4824, label %4814

4814:                                             ; preds = %4809
  %4815 = and i8 %4812, -2
  %4816 = icmp eq i8 %4815, -62
  br i1 %4816, label %4818, label %4817

4817:                                             ; preds = %4814
  br i1 %4266, label %4901, label %4832

4818:                                             ; preds = %4814
  %4819 = shl i8 %4812, 6
  %4820 = getelementptr inbounds i8, ptr %4811, i64 1
  %4821 = load i8, ptr %4820, align 1, !tbaa !5
  %4822 = and i8 %4821, 63
  %4823 = or i8 %4822, %4819
  br label %4824

4824:                                             ; preds = %4809, %4818
  %4825 = phi i8 [ %4823, %4818 ], [ %4812, %4809 ]
  %4826 = zext i8 %4825 to i64
  %4827 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4826
  %4828 = load i32, ptr %4827, align 4, !tbaa !73
  %4829 = and i32 %4828, 8192
  %4830 = icmp ne i32 %4829, 0
  %4831 = xor i1 %4266, %4830
  br i1 %4831, label %4901, label %4832

4832:                                             ; preds = %4817, %4824
  %4833 = icmp eq i32 %4810, 0
  br i1 %4833, label %4901, label %4834

4834:                                             ; preds = %4832
  %4835 = load i8, ptr %4267, align 8, !tbaa !31, !range !42, !noundef !43
  %4836 = icmp eq i8 %4835, 0
  br i1 %4836, label %4837, label %5548

4837:                                             ; preds = %4834
  %4838 = load ptr, ptr %4, align 8, !tbaa !62
  %4839 = getelementptr i8, ptr %4838, i64 16
  %4840 = load ptr, ptr %4839, align 8, !tbaa !5
  %4841 = getelementptr inbounds %struct.regexp, ptr %4840, i64 0, i32 14
  %4842 = load ptr, ptr %4841, align 8, !tbaa !20
  store ptr null, ptr %4268, align 8, !tbaa !63
  %4843 = load ptr, ptr %4269, align 8, !tbaa !26
  %4844 = ptrtoint ptr %4811 to i64
  %4845 = ptrtoint ptr %4843 to i64
  %4846 = sub i64 %4844, %4845
  %4847 = getelementptr inbounds %struct.regexp, ptr %4840, i64 0, i32 17
  %4848 = load ptr, ptr %4847, align 8, !tbaa !64
  store i64 %4846, ptr %4848, align 8, !tbaa !65
  %4849 = getelementptr inbounds %struct.regexp, ptr %4840, i64 0, i32 15
  store i32 0, ptr %4849, align 8, !tbaa !67
  %4850 = getelementptr inbounds %struct.regexp, ptr %4840, i64 0, i32 16
  store i32 0, ptr %4850, align 4, !tbaa !68
  %4851 = getelementptr inbounds %struct.regexp, ptr %4840, i64 0, i32 12
  %4852 = load i32, ptr %4851, align 8, !tbaa !69
  %4853 = icmp sgt i32 %4852, 0
  br i1 %4853, label %4854, label %4883

4854:                                             ; preds = %4837
  %4855 = and i32 %4852, 7
  %4856 = icmp eq i32 %4855, 0
  br i1 %4856, label %4865, label %4857

4857:                                             ; preds = %4854, %4857
  %4858 = phi i32 [ %4862, %4857 ], [ %4852, %4854 ]
  %4859 = phi ptr [ %4861, %4857 ], [ %4848, %4854 ]
  %4860 = phi i32 [ %4863, %4857 ], [ 0, %4854 ]
  %4861 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4859, i64 1
  %4862 = add nsw i32 %4858, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4861, i8 -1, i64 16, i1 false)
  %4863 = add i32 %4860, 1
  %4864 = icmp eq i32 %4863, %4855
  br i1 %4864, label %4865, label %4857, !llvm.loop !157

4865:                                             ; preds = %4857, %4854
  %4866 = phi i32 [ %4852, %4854 ], [ %4862, %4857 ]
  %4867 = phi ptr [ %4848, %4854 ], [ %4861, %4857 ]
  %4868 = icmp ult i32 %4852, 8
  br i1 %4868, label %4883, label %4869

4869:                                             ; preds = %4865, %4869
  %4870 = phi i32 [ %4880, %4869 ], [ %4866, %4865 ]
  %4871 = phi ptr [ %4879, %4869 ], [ %4867, %4865 ]
  %4872 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4872, i8 -1, i64 16, i1 false)
  %4873 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4873, i8 -1, i64 16, i1 false)
  %4874 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4874, i8 -1, i64 16, i1 false)
  %4875 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4875, i8 -1, i64 16, i1 false)
  %4876 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4876, i8 -1, i64 16, i1 false)
  %4877 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4877, i8 -1, i64 16, i1 false)
  %4878 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4878, i8 -1, i64 16, i1 false)
  %4879 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4871, i64 8
  %4880 = add nsw i32 %4870, -8
  %4881 = add i32 %4870, -9
  %4882 = icmp ult i32 %4881, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4879, i8 -1, i64 16, i1 false)
  br i1 %4882, label %4869, label %4883, !llvm.loop !72

4883:                                             ; preds = %4865, %4869, %4837
  %4884 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4885 = getelementptr inbounds %struct.regexp_internal, ptr %4842, i64 1
  %4886 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %4811, ptr noundef nonnull %4885)
  %4887 = icmp eq i64 %4886, -1
  br i1 %4887, label %4888, label %4897

4888:                                             ; preds = %4883
  %4889 = load ptr, ptr %4268, align 8, !tbaa !63
  %4890 = icmp eq ptr %4889, null
  br i1 %4890, label %4892, label %4891

4891:                                             ; preds = %4888
  store ptr %4889, ptr %6, align 8, !tbaa !35
  br label %4892

4892:                                             ; preds = %4891, %4888
  %4893 = phi ptr [ %4889, %4891 ], [ %4811, %4888 ]
  %4894 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4895 = icmp sgt i32 %4894, %4884
  br i1 %4895, label %4896, label %4901

4896:                                             ; preds = %4892
  tail call void @Perl_leave_scope(i32 noundef %4884) #12
  br label %4901

4897:                                             ; preds = %4883
  %4898 = getelementptr inbounds %struct.regexp, ptr %4840, i64 0, i32 17
  %4899 = load ptr, ptr %4898, align 8, !tbaa !64
  %4900 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4899, i64 0, i32 1
  store i64 %4886, ptr %4900, align 8, !tbaa !74
  br label %5548

4901:                                             ; preds = %4892, %4896, %4817, %4824, %4832
  %4902 = phi ptr [ %4811, %4832 ], [ %4811, %4824 ], [ %4811, %4817 ], [ %4893, %4896 ], [ %4893, %4892 ]
  %4903 = phi i32 [ %22, %4832 ], [ 1, %4824 ], [ 1, %4817 ], [ %22, %4896 ], [ %22, %4892 ]
  %4904 = load i8, ptr %4902, align 1, !tbaa !5
  %4905 = zext i8 %4904 to i64
  %4906 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4905
  %4907 = load i8, ptr %4906, align 1, !tbaa !5
  %4908 = zext i8 %4907 to i64
  %4909 = getelementptr inbounds i8, ptr %4902, i64 %4908
  store ptr %4909, ptr %6, align 8, !tbaa !35
  %4910 = icmp ult ptr %4909, %3
  br i1 %4910, label %4809, label %5550, !llvm.loop !158

4911:                                             ; preds = %4262
  %4912 = zext i8 %32 to i32
  %4913 = zext i8 %32 to i64
  %4914 = getelementptr inbounds [0 x ptr], ptr @PL_reg_name, i64 0, i64 %4913
  %4915 = load ptr, ptr %4914, align 8, !tbaa !35
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.5, i32 noundef %4912, ptr noundef %4915, i32 noundef %4143) #12
  br label %5550

4916:                                             ; preds = %4154
  %4917 = zext i8 %4142 to i64
  %4918 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %4917
  %4919 = load ptr, ptr %4918, align 8, !tbaa !35
  %4920 = icmp eq ptr %4919, null
  br i1 %4920, label %4921, label %4926

4921:                                             ; preds = %4916
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %14) #12
  store i8 4, ptr %14, align 1, !tbaa !5
  %4922 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %4917
  %4923 = load ptr, ptr %4922, align 8, !tbaa !35
  %4924 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %4923, ptr noundef nonnull %14) #12
  store ptr %4924, ptr %4918, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %14) #12
  %4925 = load ptr, ptr %6, align 8, !tbaa !35
  br label %4926

4926:                                             ; preds = %4916, %4921
  %4927 = phi ptr [ %4156, %4916 ], [ %4925, %4921 ]
  %4928 = icmp ult ptr %4927, %3
  br i1 %4928, label %4929, label %5550

4929:                                             ; preds = %4926
  %4930 = icmp ne i8 %4141, 0
  br label %4931

4931:                                             ; preds = %4929, %5034
  %4932 = phi ptr [ %4927, %4929 ], [ %5042, %5034 ]
  %4933 = phi i32 [ %4155, %4929 ], [ %5035, %5034 ]
  %4934 = load i8, ptr %4932, align 1, !tbaa !5
  %4935 = icmp sgt i8 %4934, -1
  br i1 %4935, label %4936, label %4943

4936:                                             ; preds = %4931
  %4937 = zext i8 %4934 to i64
  %4938 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4937
  %4939 = load i32, ptr %4938, align 4, !tbaa !73
  %4940 = lshr i32 %4939, %4143
  %4941 = and i32 %4940, 1
  %4942 = zext i32 %4941 to i64
  br label %4961

4943:                                             ; preds = %4931
  %4944 = and i8 %4934, -2
  %4945 = icmp eq i8 %4944, -62
  br i1 %4945, label %4946, label %4958

4946:                                             ; preds = %4943
  %4947 = shl i8 %4934, 6
  %4948 = getelementptr inbounds i8, ptr %4932, i64 1
  %4949 = load i8, ptr %4948, align 1, !tbaa !5
  %4950 = and i8 %4949, 63
  %4951 = or i8 %4950, %4947
  %4952 = zext i8 %4951 to i64
  %4953 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %4952
  %4954 = load i32, ptr %4953, align 4, !tbaa !73
  %4955 = and i32 %4954, %4149
  %4956 = icmp ne i32 %4955, 0
  %4957 = zext i1 %4956 to i64
  br label %4961

4958:                                             ; preds = %4943
  %4959 = load ptr, ptr %4918, align 8, !tbaa !35
  %4960 = call i64 @Perl_swash_fetch(ptr noundef %4959, ptr noundef nonnull %4932, i1 noundef zeroext true) #12
  br label %4961

4961:                                             ; preds = %4946, %4958, %4936
  %4962 = phi i64 [ %4942, %4936 ], [ %4957, %4946 ], [ %4960, %4958 ]
  %4963 = icmp eq i64 %4962, 0
  %4964 = xor i1 %4930, %4963
  br i1 %4964, label %5034, label %4965

4965:                                             ; preds = %4961
  %4966 = icmp eq i32 %4933, 0
  br i1 %4966, label %5034, label %4967

4967:                                             ; preds = %4965
  %4968 = load i8, ptr %4151, align 8, !tbaa !31, !range !42, !noundef !43
  %4969 = icmp eq i8 %4968, 0
  br i1 %4969, label %4970, label %5548

4970:                                             ; preds = %4967
  %4971 = load ptr, ptr %4, align 8, !tbaa !62
  %4972 = getelementptr i8, ptr %4971, i64 16
  %4973 = load ptr, ptr %4972, align 8, !tbaa !5
  %4974 = getelementptr inbounds %struct.regexp, ptr %4973, i64 0, i32 14
  %4975 = load ptr, ptr %4974, align 8, !tbaa !20
  store ptr null, ptr %4152, align 8, !tbaa !63
  %4976 = load ptr, ptr %6, align 8, !tbaa !35
  %4977 = load ptr, ptr %4153, align 8, !tbaa !26
  %4978 = ptrtoint ptr %4976 to i64
  %4979 = ptrtoint ptr %4977 to i64
  %4980 = sub i64 %4978, %4979
  %4981 = getelementptr inbounds %struct.regexp, ptr %4973, i64 0, i32 17
  %4982 = load ptr, ptr %4981, align 8, !tbaa !64
  store i64 %4980, ptr %4982, align 8, !tbaa !65
  %4983 = getelementptr inbounds %struct.regexp, ptr %4973, i64 0, i32 15
  store i32 0, ptr %4983, align 8, !tbaa !67
  %4984 = getelementptr inbounds %struct.regexp, ptr %4973, i64 0, i32 16
  store i32 0, ptr %4984, align 4, !tbaa !68
  %4985 = getelementptr inbounds %struct.regexp, ptr %4973, i64 0, i32 12
  %4986 = load i32, ptr %4985, align 8, !tbaa !69
  %4987 = icmp sgt i32 %4986, 0
  br i1 %4987, label %4988, label %5017

4988:                                             ; preds = %4970
  %4989 = and i32 %4986, 7
  %4990 = icmp eq i32 %4989, 0
  br i1 %4990, label %4999, label %4991

4991:                                             ; preds = %4988, %4991
  %4992 = phi i32 [ %4996, %4991 ], [ %4986, %4988 ]
  %4993 = phi ptr [ %4995, %4991 ], [ %4982, %4988 ]
  %4994 = phi i32 [ %4997, %4991 ], [ 0, %4988 ]
  %4995 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4993, i64 1
  %4996 = add nsw i32 %4992, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4995, i8 -1, i64 16, i1 false)
  %4997 = add i32 %4994, 1
  %4998 = icmp eq i32 %4997, %4989
  br i1 %4998, label %4999, label %4991, !llvm.loop !159

4999:                                             ; preds = %4991, %4988
  %5000 = phi i32 [ %4986, %4988 ], [ %4996, %4991 ]
  %5001 = phi ptr [ %4982, %4988 ], [ %4995, %4991 ]
  %5002 = icmp ult i32 %4986, 8
  br i1 %5002, label %5017, label %5003

5003:                                             ; preds = %4999, %5003
  %5004 = phi i32 [ %5014, %5003 ], [ %5000, %4999 ]
  %5005 = phi ptr [ %5013, %5003 ], [ %5001, %4999 ]
  %5006 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5006, i8 -1, i64 16, i1 false)
  %5007 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5007, i8 -1, i64 16, i1 false)
  %5008 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5008, i8 -1, i64 16, i1 false)
  %5009 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5009, i8 -1, i64 16, i1 false)
  %5010 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5010, i8 -1, i64 16, i1 false)
  %5011 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5011, i8 -1, i64 16, i1 false)
  %5012 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5012, i8 -1, i64 16, i1 false)
  %5013 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5005, i64 8
  %5014 = add nsw i32 %5004, -8
  %5015 = add i32 %5004, -9
  %5016 = icmp ult i32 %5015, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5013, i8 -1, i64 16, i1 false)
  br i1 %5016, label %5003, label %5017, !llvm.loop !72

5017:                                             ; preds = %4999, %5003, %4970
  %5018 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %5019 = getelementptr inbounds %struct.regexp_internal, ptr %4975, i64 1
  %5020 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef %4976, ptr noundef nonnull %5019)
  %5021 = icmp eq i64 %5020, -1
  br i1 %5021, label %5022, label %5030

5022:                                             ; preds = %5017
  %5023 = load ptr, ptr %4152, align 8, !tbaa !63
  %5024 = icmp eq ptr %5023, null
  br i1 %5024, label %5026, label %5025

5025:                                             ; preds = %5022
  store ptr %5023, ptr %6, align 8, !tbaa !35
  br label %5026

5026:                                             ; preds = %5025, %5022
  %5027 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %5028 = icmp sgt i32 %5027, %5018
  br i1 %5028, label %5029, label %5034

5029:                                             ; preds = %5026
  call void @Perl_leave_scope(i32 noundef %5018) #12
  br label %5034

5030:                                             ; preds = %5017
  %5031 = getelementptr inbounds %struct.regexp, ptr %4973, i64 0, i32 17
  %5032 = load ptr, ptr %5031, align 8, !tbaa !64
  %5033 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5032, i64 0, i32 1
  store i64 %5020, ptr %5033, align 8, !tbaa !74
  br label %5548

5034:                                             ; preds = %5026, %5029, %4961, %4965
  %5035 = phi i32 [ %22, %4965 ], [ 1, %4961 ], [ %22, %5029 ], [ %22, %5026 ]
  %5036 = load ptr, ptr %6, align 8, !tbaa !35
  %5037 = load i8, ptr %5036, align 1, !tbaa !5
  %5038 = zext i8 %5037 to i64
  %5039 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5038
  %5040 = load i8, ptr %5039, align 1, !tbaa !5
  %5041 = zext i8 %5040 to i64
  %5042 = getelementptr inbounds i8, ptr %5036, i64 %5041
  store ptr %5042, ptr %6, align 8, !tbaa !35
  %5043 = icmp ult ptr %5042, %3
  br i1 %5043, label %4931, label %5550, !llvm.loop !160

5044:                                             ; preds = %5, %5
  %5045 = load i8, ptr %1, align 2, !tbaa !76
  switch i8 %5045, label %5052 [
    i8 31, label %5046
    i8 32, label %5048
    i8 36, label %5050
    i8 38, label %5054
  ]

5046:                                             ; preds = %5044
  %5047 = zext i8 %24 to i32
  br label %5054

5048:                                             ; preds = %5044
  %5049 = select i1 %25, i32 6, i32 0
  br label %5054

5050:                                             ; preds = %5044
  %5051 = select i1 %25, i32 4, i32 5
  br label %5054

5052:                                             ; preds = %5044
  %5053 = select i1 %25, i32 2, i32 3
  br label %5054

5054:                                             ; preds = %5044, %5048, %5052, %5050, %5046
  %5055 = phi i32 [ %5047, %5046 ], [ %5049, %5048 ], [ %5051, %5050 ], [ %5053, %5052 ], [ 7, %5044 ]
  %5056 = getelementptr inbounds %struct.regexp_internal, ptr %30, i64 0, i32 3
  %5057 = load ptr, ptr %5056, align 8, !tbaa !161
  %5058 = getelementptr inbounds %struct.regnode_1, ptr %1, i64 0, i32 3
  %5059 = load i32, ptr %5058, align 4, !tbaa !162
  %5060 = zext i32 %5059 to i64
  %5061 = getelementptr inbounds %struct.reg_data, ptr %5057, i64 0, i32 2, i64 %5060
  %5062 = load ptr, ptr %5061, align 8, !tbaa !35
  %5063 = getelementptr inbounds %struct._reg_ac_data, ptr %5062, i64 0, i32 1
  %5064 = load i32, ptr %5063, align 4, !tbaa !164
  %5065 = zext i32 %5064 to i64
  %5066 = getelementptr inbounds %struct.reg_data, ptr %5057, i64 0, i32 2, i64 %5065
  %5067 = load ptr, ptr %5066, align 8, !tbaa !35
  %5068 = add i32 %5064, 1
  %5069 = zext i32 %5068 to i64
  %5070 = getelementptr inbounds %struct.reg_data, ptr %5057, i64 0, i32 2, i64 %5069
  %5071 = load ptr, ptr %5070, align 8, !tbaa !35
  %5072 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 10
  %5073 = load i64, ptr %5072, align 8, !tbaa !166
  %5074 = sub i64 0, %5073
  %5075 = getelementptr inbounds i8, ptr %3, i64 %5074
  %5076 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 11
  %5077 = load i64, ptr %5076, align 8, !tbaa !168
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %15) #12
  tail call void @Perl_push_scope() #12
  tail call void @Perl_save_strlen(ptr noundef nonnull @PL_tmps_floor) #12
  %5078 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !169
  store i64 %5078, ptr @PL_tmps_floor, align 8, !tbaa !169
  %5079 = shl i64 %5077, 3
  %5080 = tail call ptr @Perl_newSV(i64 noundef %5079) #12
  %5081 = load ptr, ptr %5080, align 8, !tbaa !38
  %5082 = getelementptr inbounds %struct.xpv, ptr %5081, i64 0, i32 2
  store i64 %5079, ptr %5082, align 8, !tbaa !39
  %5083 = getelementptr inbounds %struct.sv, ptr %5080, i64 0, i32 2
  %5084 = load i32, ptr %5083, align 4, !tbaa !15
  %5085 = or i32 %5084, 17408
  store i32 %5085, ptr %5083, align 4, !tbaa !15
  %5086 = tail call ptr @Perl_sv_2mortal(ptr noundef nonnull %5080) #12
  %5087 = load i32, ptr %5083, align 4, !tbaa !15
  %5088 = and i32 %5087, 2098176
  %5089 = icmp eq i32 %5088, 1024
  br i1 %5089, label %5090, label %5093

5090:                                             ; preds = %5054
  %5091 = getelementptr inbounds %struct.sv, ptr %5080, i64 0, i32 3
  %5092 = load ptr, ptr %5091, align 8, !tbaa !5
  br label %5095

5093:                                             ; preds = %5054
  %5094 = tail call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %5080, ptr noundef null, i32 noundef 2) #12
  br label %5095

5095:                                             ; preds = %5093, %5090
  %5096 = phi ptr [ %5092, %5090 ], [ %5094, %5093 ]
  %5097 = icmp eq i32 %5055, 2
  br i1 %5097, label %5108, label %5098

5098:                                             ; preds = %5095
  %5099 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 5
  %5100 = load ptr, ptr %5099, align 8, !tbaa !170
  %5101 = icmp eq ptr %5100, null
  br i1 %5101, label %5102, label %5105

5102:                                             ; preds = %5098
  %5103 = load i8, ptr %31, align 1, !tbaa !56
  %5104 = icmp eq i8 %5103, 75
  br i1 %5104, label %5105, label %5108

5105:                                             ; preds = %5102, %5098
  %5106 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4
  %5107 = select i1 %5101, ptr %5106, ptr %5100
  br label %5108

5108:                                             ; preds = %5105, %5102, %5095
  %5109 = phi ptr [ null, %5102 ], [ null, %5095 ], [ %5107, %5105 ]
  %5110 = icmp ult ptr %5075, %2
  br i1 %5110, label %5540, label %5111

5111:                                             ; preds = %5108
  %5112 = getelementptr inbounds %struct._reg_ac_data, ptr %5062, i64 0, i32 3
  %5113 = icmp eq ptr %5109, null
  %5114 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 7
  %5115 = trunc i32 %5055 to i8
  %5116 = icmp eq ptr %5071, null
  %5117 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 2
  %5118 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 8
  %5119 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 1
  %5120 = getelementptr inbounds %struct._reg_trie_data, ptr %5067, i64 0, i32 4
  %5121 = getelementptr inbounds %struct._reg_ac_data, ptr %5062, i64 0, i32 2
  %5122 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 12
  %5123 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 6
  %5124 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 1
  %5125 = getelementptr inbounds %struct.regmatch_info, ptr %4, i64 0, i32 2
  br label %5126

5126:                                             ; preds = %5111, %5537
  %5127 = call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %5128 = xor i1 %5127, true
  %5129 = zext i1 %5128 to i32
  %5130 = load ptr, ptr %6, align 8, !tbaa !35
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #12
  store i64 0, ptr %16, align 8, !tbaa !169
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #12
  store i64 0, ptr %17, align 8, !tbaa !169
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #12
  store i64 0, ptr %18, align 8, !tbaa !169
  %5131 = load ptr, ptr %5112, align 8, !tbaa !171
  %5132 = icmp ugt ptr %5130, %3
  br i1 %5132, label %5422, label %5133

5133:                                             ; preds = %5126, %5413
  %5134 = phi i32 [ %5211, %5413 ], [ 0, %5126 ]
  %5135 = phi ptr [ %5418, %5413 ], [ null, %5126 ]
  %5136 = phi ptr [ %5417, %5413 ], [ null, %5126 ]
  %5137 = phi i32 [ %5416, %5413 ], [ 1, %5126 ]
  %5138 = phi i32 [ %5415, %5413 ], [ 1, %5126 ]
  %5139 = phi ptr [ %5420, %5413 ], [ %5130, %5126 ]
  %5140 = phi ptr [ %5414, %5413 ], [ %5131, %5126 ]
  %5141 = zext i32 %5137 to i64
  %5142 = getelementptr inbounds %struct._reg_trie_state, ptr %5140, i64 %5141
  %5143 = load i16, ptr %5142, align 8, !tbaa !172
  %5144 = icmp eq i32 %5137, 1
  br i1 %5144, label %5145, label %5191

5145:                                             ; preds = %5133
  br i1 %5113, label %5188, label %5146

5146:                                             ; preds = %5145
  %5147 = icmp ugt ptr %5139, %5075
  br i1 %25, label %5149, label %5148

5148:                                             ; preds = %5146
  br i1 %5147, label %5186, label %5170

5149:                                             ; preds = %5146
  br i1 %5147, label %5186, label %5150

5150:                                             ; preds = %5149, %5163
  %5151 = phi ptr [ %5168, %5163 ], [ %5139, %5149 ]
  %5152 = load i8, ptr %5151, align 1, !tbaa !5
  %5153 = zext i8 %5152 to i32
  %5154 = lshr i32 %5153, 3
  %5155 = zext i32 %5154 to i64
  %5156 = getelementptr inbounds i8, ptr %5109, i64 %5155
  %5157 = load i8, ptr %5156, align 1, !tbaa !5
  %5158 = zext i8 %5157 to i32
  %5159 = and i32 %5153, 7
  %5160 = shl nuw nsw i32 1, %5159
  %5161 = and i32 %5160, %5158
  %5162 = icmp eq i32 %5161, 0
  br i1 %5162, label %5163, label %5186

5163:                                             ; preds = %5150
  %5164 = zext i8 %5152 to i64
  %5165 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5164
  %5166 = load i8, ptr %5165, align 1, !tbaa !5
  %5167 = zext i8 %5166 to i64
  %5168 = getelementptr inbounds i8, ptr %5151, i64 %5167
  %5169 = icmp ugt ptr %5168, %5075
  br i1 %5169, label %5186, label %5150, !llvm.loop !174

5170:                                             ; preds = %5148, %5183
  %5171 = phi ptr [ %5184, %5183 ], [ %5139, %5148 ]
  %5172 = load i8, ptr %5171, align 1, !tbaa !5
  %5173 = zext i8 %5172 to i32
  %5174 = lshr i32 %5173, 3
  %5175 = zext i32 %5174 to i64
  %5176 = getelementptr inbounds i8, ptr %5109, i64 %5175
  %5177 = load i8, ptr %5176, align 1, !tbaa !5
  %5178 = zext i8 %5177 to i32
  %5179 = and i32 %5173, 7
  %5180 = shl nuw nsw i32 1, %5179
  %5181 = and i32 %5180, %5178
  %5182 = icmp eq i32 %5181, 0
  br i1 %5182, label %5183, label %5186

5183:                                             ; preds = %5170
  %5184 = getelementptr inbounds i8, ptr %5171, i64 1
  %5185 = icmp ugt ptr %5184, %5075
  br i1 %5185, label %5186, label %5170, !llvm.loop !175

5186:                                             ; preds = %5183, %5170, %5163, %5150, %5148, %5149
  %5187 = phi ptr [ %5139, %5149 ], [ %5139, %5148 ], [ %5168, %5163 ], [ %5151, %5150 ], [ %5184, %5183 ], [ %5171, %5170 ]
  store ptr %5187, ptr %6, align 8, !tbaa !35
  br label %5188

5188:                                             ; preds = %5186, %5145
  %5189 = phi ptr [ %5187, %5186 ], [ %5139, %5145 ]
  %5190 = icmp ugt ptr %5189, %5075
  br i1 %5190, label %5422, label %5191

5191:                                             ; preds = %5188, %5133
  %5192 = phi ptr [ %5189, %5188 ], [ %5139, %5133 ]
  %5193 = icmp eq i16 %5143, 0
  br i1 %5193, label %5209, label %5194

5194:                                             ; preds = %5191
  %5195 = load ptr, ptr %5114, align 8, !tbaa !176
  %5196 = zext i16 %5143 to i64
  %5197 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %5195, i64 %5196, i32 1
  %5198 = load i32, ptr %5197, align 4, !tbaa !177
  %5199 = sub i32 %5134, %5198
  %5200 = zext i32 %5199 to i64
  %5201 = urem i64 %5200, %5077
  %5202 = getelementptr inbounds ptr, ptr %5096, i64 %5201
  %5203 = load ptr, ptr %5202, align 8, !tbaa !35
  %5204 = icmp eq ptr %5135, null
  %5205 = icmp ult ptr %5203, %5135
  %5206 = select i1 %5204, i1 true, i1 %5205
  %5207 = select i1 %5206, ptr %5203, ptr %5135
  %5208 = icmp eq i32 %5138, 0
  br i1 %5208, label %5422, label %5209

5209:                                             ; preds = %5194, %5191
  %5210 = phi ptr [ %5207, %5194 ], [ %5135, %5191 ]
  %5211 = add i32 %5134, 1
  %5212 = zext i32 %5134 to i64
  %5213 = urem i64 %5212, %5077
  %5214 = getelementptr inbounds ptr, ptr %5096, i64 %5213
  store ptr %5192, ptr %5214, align 8, !tbaa !35
  %5215 = load i64, ptr %18, align 8, !tbaa !169
  %5216 = icmp ne i64 %5215, 0
  %5217 = icmp ult ptr %5192, %3
  %5218 = or i1 %5217, %5216
  br i1 %5218, label %5219, label %5324

5219:                                             ; preds = %5209
  switch i8 %5115, label %5220 [
    i8 7, label %5223
    i8 4, label %5222
    i8 2, label %5223
    i8 5, label %5258
    i8 3, label %5259
    i8 6, label %5290
    i8 1, label %5290
    i8 0, label %5292
  ]

5220:                                             ; preds = %5219
  %5221 = load i64, ptr %16, align 8, !tbaa !169
  br label %5295

5222:                                             ; preds = %5219
  br label %5223

5223:                                             ; preds = %5219, %5222, %5219
  %5224 = phi i8 [ 6, %5222 ], [ 2, %5219 ], [ 2, %5219 ]
  %5225 = icmp eq i64 %5215, 0
  br i1 %5225, label %5232, label %5226

5226:                                             ; preds = %5223
  %5227 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %5136, i64 noundef 13, ptr noundef nonnull %17, i32 noundef %5129) #12
  store i64 %5227, ptr %16, align 8, !tbaa !169
  %5228 = load i64, ptr %17, align 8, !tbaa !169
  %5229 = load i64, ptr %18, align 8, !tbaa !169
  %5230 = sub i64 %5229, %5228
  store i64 %5230, ptr %18, align 8, !tbaa !169
  %5231 = getelementptr inbounds i8, ptr %5136, i64 %5228
  store i64 0, ptr %17, align 8, !tbaa !169
  br label %5295

5232:                                             ; preds = %5223
  %5233 = call i64 @Perl__to_utf8_fold_flags(ptr noundef %5192, ptr noundef nonnull %15, ptr noundef nonnull %18, i8 noundef zeroext %5224) #12
  store i64 %5233, ptr %16, align 8, !tbaa !169
  %5234 = load i8, ptr %5192, align 1, !tbaa !5
  %5235 = zext i8 %5234 to i64
  %5236 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5235
  %5237 = load i8, ptr %5236, align 1, !tbaa !5
  %5238 = zext i8 %5237 to i64
  store i64 %5238, ptr %17, align 8, !tbaa !169
  %5239 = icmp ult i64 %5233, 128
  br i1 %5239, label %5253, label %5240

5240:                                             ; preds = %5232
  %5241 = icmp ult i64 %5233, 2048
  br i1 %5241, label %5253, label %5242

5242:                                             ; preds = %5240
  %5243 = icmp ult i64 %5233, 65536
  br i1 %5243, label %5253, label %5244

5244:                                             ; preds = %5242
  %5245 = icmp ult i64 %5233, 2097152
  br i1 %5245, label %5253, label %5246

5246:                                             ; preds = %5244
  %5247 = icmp ult i64 %5233, 67108864
  br i1 %5247, label %5253, label %5248

5248:                                             ; preds = %5246
  %5249 = icmp ult i64 %5233, 2147483648
  br i1 %5249, label %5253, label %5250

5250:                                             ; preds = %5248
  %5251 = icmp ult i64 %5233, 68719476736
  %5252 = select i1 %5251, i64 7, i64 13
  br label %5253

5253:                                             ; preds = %5240, %5244, %5250, %5248, %5246, %5242, %5232
  %5254 = phi i64 [ 1, %5232 ], [ 2, %5240 ], [ 3, %5242 ], [ 4, %5244 ], [ 5, %5246 ], [ %5252, %5250 ], [ 6, %5248 ]
  %5255 = load i64, ptr %18, align 8, !tbaa !169
  %5256 = sub i64 %5255, %5254
  store i64 %5256, ptr %18, align 8, !tbaa !169
  %5257 = getelementptr inbounds i8, ptr %15, i64 %5254
  br label %5295

5258:                                             ; preds = %5219
  br label %5259

5259:                                             ; preds = %5219, %5258
  %5260 = phi i32 [ 2, %5219 ], [ 6, %5258 ]
  %5261 = icmp eq i64 %5215, 0
  br i1 %5261, label %5268, label %5262

5262:                                             ; preds = %5259
  %5263 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %5136, i64 noundef 13, ptr noundef nonnull %17, i32 noundef %5129) #12
  store i64 %5263, ptr %16, align 8, !tbaa !169
  %5264 = load i64, ptr %17, align 8, !tbaa !169
  %5265 = load i64, ptr %18, align 8, !tbaa !169
  %5266 = sub i64 %5265, %5264
  store i64 %5266, ptr %18, align 8, !tbaa !169
  %5267 = getelementptr inbounds i8, ptr %5136, i64 %5264
  store i64 0, ptr %17, align 8, !tbaa !169
  br label %5295

5268:                                             ; preds = %5259
  store i64 1, ptr %17, align 8, !tbaa !169
  %5269 = load i8, ptr %5192, align 1, !tbaa !5
  %5270 = call i64 @Perl__to_fold_latin1(i8 noundef zeroext %5269, ptr noundef nonnull %15, ptr noundef nonnull %18, i32 noundef %5260) #12
  store i64 %5270, ptr %16, align 8, !tbaa !169
  %5271 = icmp ult i64 %5270, 128
  br i1 %5271, label %5285, label %5272

5272:                                             ; preds = %5268
  %5273 = icmp ult i64 %5270, 2048
  br i1 %5273, label %5285, label %5274

5274:                                             ; preds = %5272
  %5275 = icmp ult i64 %5270, 65536
  br i1 %5275, label %5285, label %5276

5276:                                             ; preds = %5274
  %5277 = icmp ult i64 %5270, 2097152
  br i1 %5277, label %5285, label %5278

5278:                                             ; preds = %5276
  %5279 = icmp ult i64 %5270, 67108864
  br i1 %5279, label %5285, label %5280

5280:                                             ; preds = %5278
  %5281 = icmp ult i64 %5270, 2147483648
  br i1 %5281, label %5285, label %5282

5282:                                             ; preds = %5280
  %5283 = icmp ult i64 %5270, 68719476736
  %5284 = select i1 %5283, i64 7, i64 13
  br label %5285

5285:                                             ; preds = %5272, %5276, %5282, %5280, %5278, %5274, %5268
  %5286 = phi i64 [ 1, %5268 ], [ 2, %5272 ], [ 3, %5274 ], [ 4, %5276 ], [ 5, %5278 ], [ %5284, %5282 ], [ 6, %5280 ]
  %5287 = load i64, ptr %18, align 8, !tbaa !169
  %5288 = sub i64 %5287, %5286
  store i64 %5288, ptr %18, align 8, !tbaa !169
  %5289 = getelementptr inbounds i8, ptr %15, i64 %5286
  br label %5295

5290:                                             ; preds = %5219, %5219
  %5291 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %5192, i64 noundef 13, ptr noundef nonnull %17, i32 noundef %5129) #12
  store i64 %5291, ptr %16, align 8, !tbaa !169
  br label %5295

5292:                                             ; preds = %5219
  %5293 = load i8, ptr %5192, align 1, !tbaa !5
  %5294 = zext i8 %5293 to i64
  store i64 %5294, ptr %16, align 8, !tbaa !169
  store i64 1, ptr %17, align 8, !tbaa !169
  br label %5299

5295:                                             ; preds = %5262, %5285, %5226, %5253, %5220, %5290
  %5296 = phi i64 [ %5291, %5290 ], [ %5233, %5253 ], [ %5227, %5226 ], [ %5270, %5285 ], [ %5263, %5262 ], [ %5221, %5220 ]
  %5297 = phi ptr [ %5136, %5290 ], [ %5257, %5253 ], [ %5231, %5226 ], [ %5289, %5285 ], [ %5267, %5262 ], [ %5136, %5220 ]
  %5298 = icmp ult i64 %5296, 256
  br i1 %5298, label %5299, label %5305

5299:                                             ; preds = %5292, %5295
  %5300 = phi ptr [ %5136, %5292 ], [ %5297, %5295 ]
  %5301 = phi i64 [ %5294, %5292 ], [ %5296, %5295 ]
  %5302 = load ptr, ptr %5117, align 8, !tbaa !179
  %5303 = getelementptr inbounds i16, ptr %5302, i64 %5301
  %5304 = load i16, ptr %5303, align 2, !tbaa !89
  br label %5328

5305:                                             ; preds = %5295
  br i1 %5116, label %5325, label %5306

5306:                                             ; preds = %5305
  %5307 = call ptr @Perl_hv_common_key_len(ptr noundef nonnull %5071, ptr noundef nonnull %16, i32 noundef 8, i32 noundef 32, ptr noundef null, i32 noundef 0) #12
  %5308 = icmp eq ptr %5307, null
  br i1 %5308, label %5325, label %5309

5309:                                             ; preds = %5306
  %5310 = load ptr, ptr %5307, align 8, !tbaa !35
  %5311 = getelementptr inbounds %struct.sv, ptr %5310, i64 0, i32 2
  %5312 = load i32, ptr %5311, align 4, !tbaa !15
  %5313 = and i32 %5312, 2097408
  %5314 = icmp eq i32 %5313, 256
  br i1 %5314, label %5315, label %5319

5315:                                             ; preds = %5309
  %5316 = load ptr, ptr %5310, align 8, !tbaa !38
  %5317 = getelementptr inbounds %struct.xpviv, ptr %5316, i64 0, i32 4
  %5318 = load i64, ptr %5317, align 8, !tbaa !5
  br label %5321

5319:                                             ; preds = %5309
  %5320 = call i64 @Perl_sv_2iv_flags(ptr noundef nonnull %5310, i32 noundef 2) #12
  br label %5321

5321:                                             ; preds = %5319, %5315
  %5322 = phi i64 [ %5318, %5315 ], [ %5320, %5319 ]
  %5323 = trunc i64 %5322 to i16
  br label %5328

5324:                                             ; preds = %5209
  store i64 0, ptr %17, align 8, !tbaa !169
  br label %5325

5325:                                             ; preds = %5324, %5305, %5306
  %5326 = phi ptr [ %5297, %5306 ], [ %5297, %5305 ], [ %5136, %5324 ]
  %5327 = load ptr, ptr %5112, align 8, !tbaa !171
  br label %5364

5328:                                             ; preds = %5299, %5321
  %5329 = phi i16 [ %5304, %5299 ], [ %5323, %5321 ]
  %5330 = phi ptr [ %5300, %5299 ], [ %5297, %5321 ]
  %5331 = freeze i16 %5329
  %5332 = load ptr, ptr %5112, align 8, !tbaa !171
  %5333 = icmp eq i16 %5331, 0
  %5334 = zext i16 %5331 to i32
  br i1 %5333, label %5364, label %5335

5335:                                             ; preds = %5328
  %5336 = getelementptr inbounds %struct._reg_trie_state, ptr %5332, i64 %5141, i32 1
  %5337 = load i32, ptr %5336, align 8, !tbaa !5
  %5338 = icmp eq i32 %5337, 0
  br i1 %5338, label %5405, label %5339

5339:                                             ; preds = %5335
  %5340 = add i32 %5337, %5334
  %5341 = load i16, ptr %5118, align 8, !tbaa !180
  %5342 = zext i16 %5341 to i32
  %5343 = xor i32 %5342, -1
  %5344 = add i32 %5340, %5343
  %5345 = icmp sgt i32 %5344, -1
  br i1 %5345, label %5346, label %5359

5346:                                             ; preds = %5339
  %5347 = load i32, ptr %5119, align 4, !tbaa !181
  %5348 = icmp ult i32 %5344, %5347
  br i1 %5348, label %5349, label %5359

5349:                                             ; preds = %5346
  %5350 = load ptr, ptr %5120, align 8, !tbaa !182
  %5351 = zext i32 %5344 to i64
  %5352 = getelementptr inbounds %struct._reg_trie_trans, ptr %5350, i64 %5351, i32 1
  %5353 = load i32, ptr %5352, align 4, !tbaa !183
  %5354 = icmp eq i32 %5353, %5137
  br i1 %5354, label %5355, label %5359

5355:                                             ; preds = %5349
  %5356 = getelementptr inbounds %struct._reg_trie_trans, ptr %5350, i64 %5351
  %5357 = load i32, ptr %5356, align 4, !tbaa !185
  %5358 = icmp eq i32 %5357, 0
  br i1 %5358, label %5359, label %5413

5359:                                             ; preds = %5355, %5349, %5346, %5339
  %5360 = load ptr, ptr %5121, align 8, !tbaa !186
  %5361 = getelementptr inbounds i32, ptr %5360, i64 %5141
  %5362 = load i32, ptr %5361, align 4, !tbaa !73
  %5363 = icmp eq i32 %5362, 0
  br i1 %5363, label %5405, label %5378

5364:                                             ; preds = %5325, %5328
  %5365 = phi ptr [ %5327, %5325 ], [ %5332, %5328 ]
  %5366 = phi ptr [ %5326, %5325 ], [ %5330, %5328 ]
  br label %5367

5367:                                             ; preds = %5364, %5373
  %5368 = phi i32 [ %5376, %5373 ], [ %5137, %5364 ]
  %5369 = zext i32 %5368 to i64
  %5370 = getelementptr inbounds %struct._reg_trie_state, ptr %5365, i64 %5369, i32 1
  %5371 = load i32, ptr %5370, align 8, !tbaa !5
  %5372 = icmp eq i32 %5371, 0
  br i1 %5372, label %5405, label %5373

5373:                                             ; preds = %5367
  %5374 = load ptr, ptr %5121, align 8, !tbaa !186
  %5375 = getelementptr inbounds i32, ptr %5374, i64 %5369
  %5376 = load i32, ptr %5375, align 4, !tbaa !73
  %5377 = icmp eq i32 %5376, 0
  br i1 %5377, label %5405, label %5367, !llvm.loop !187

5378:                                             ; preds = %5359, %5401
  %5379 = phi i32 [ %5403, %5401 ], [ %5362, %5359 ]
  %5380 = zext i32 %5379 to i64
  %5381 = getelementptr inbounds %struct._reg_trie_state, ptr %5332, i64 %5380, i32 1
  %5382 = load i32, ptr %5381, align 8, !tbaa !5
  %5383 = icmp eq i32 %5382, 0
  br i1 %5383, label %5405, label %5384

5384:                                             ; preds = %5378
  %5385 = add i32 %5382, %5334
  %5386 = add i32 %5385, %5343
  %5387 = icmp sgt i32 %5386, -1
  br i1 %5387, label %5388, label %5401

5388:                                             ; preds = %5384
  %5389 = load i32, ptr %5119, align 4, !tbaa !181
  %5390 = icmp ult i32 %5386, %5389
  br i1 %5390, label %5391, label %5401

5391:                                             ; preds = %5388
  %5392 = load ptr, ptr %5120, align 8, !tbaa !182
  %5393 = zext i32 %5386 to i64
  %5394 = getelementptr inbounds %struct._reg_trie_trans, ptr %5392, i64 %5393, i32 1
  %5395 = load i32, ptr %5394, align 4, !tbaa !183
  %5396 = icmp eq i32 %5395, %5379
  br i1 %5396, label %5397, label %5401

5397:                                             ; preds = %5391
  %5398 = getelementptr inbounds %struct._reg_trie_trans, ptr %5392, i64 %5393
  %5399 = load i32, ptr %5398, align 4, !tbaa !185
  %5400 = icmp eq i32 %5399, 0
  br i1 %5400, label %5401, label %5405

5401:                                             ; preds = %5384, %5388, %5391, %5397
  %5402 = getelementptr inbounds i32, ptr %5360, i64 %5380
  %5403 = load i32, ptr %5402, align 4, !tbaa !73
  %5404 = icmp eq i32 %5403, 0
  br i1 %5404, label %5405, label %5378, !llvm.loop !188

5405:                                             ; preds = %5397, %5401, %5378, %5373, %5367, %5359, %5335
  %5406 = phi ptr [ %5332, %5335 ], [ %5332, %5359 ], [ %5365, %5367 ], [ %5365, %5373 ], [ %5332, %5378 ], [ %5332, %5401 ], [ %5332, %5397 ]
  %5407 = phi ptr [ %5330, %5335 ], [ %5330, %5359 ], [ %5366, %5367 ], [ %5366, %5373 ], [ %5330, %5378 ], [ %5330, %5401 ], [ %5330, %5397 ]
  %5408 = phi i32 [ 0, %5335 ], [ %5337, %5359 ], [ 0, %5367 ], [ %5371, %5373 ], [ %5382, %5397 ], [ 0, %5378 ], [ %5382, %5401 ]
  %5409 = phi i32 [ %5137, %5335 ], [ 0, %5359 ], [ %5368, %5367 ], [ 0, %5373 ], [ %5399, %5397 ], [ %5379, %5378 ], [ 0, %5401 ]
  %5410 = icmp eq ptr %5210, null
  br i1 %5410, label %5411, label %5422

5411:                                             ; preds = %5405
  %5412 = call i32 @llvm.umax.i32(i32 %5409, i32 1)
  br label %5413

5413:                                             ; preds = %5355, %5411
  %5414 = phi ptr [ %5406, %5411 ], [ %5332, %5355 ]
  %5415 = phi i32 [ %5408, %5411 ], [ %5337, %5355 ]
  %5416 = phi i32 [ %5412, %5411 ], [ %5357, %5355 ]
  %5417 = phi ptr [ %5407, %5411 ], [ %5330, %5355 ]
  %5418 = phi ptr [ null, %5411 ], [ %5210, %5355 ]
  %5419 = load i64, ptr %17, align 8, !tbaa !169
  %5420 = getelementptr inbounds i8, ptr %5192, i64 %5419
  %5421 = icmp ugt ptr %5420, %3
  br i1 %5421, label %5422, label %5133

5422:                                             ; preds = %5413, %5188, %5405, %5194, %5126
  %5423 = phi ptr [ %5131, %5126 ], [ %5414, %5413 ], [ %5140, %5188 ], [ %5406, %5405 ], [ %5140, %5194 ]
  %5424 = phi i32 [ 1, %5126 ], [ %5416, %5413 ], [ 1, %5188 ], [ %5409, %5405 ], [ %5137, %5194 ]
  %5425 = phi ptr [ null, %5126 ], [ %5418, %5413 ], [ %5135, %5188 ], [ %5210, %5405 ], [ %5207, %5194 ]
  %5426 = phi i32 [ 0, %5126 ], [ %5211, %5413 ], [ %5134, %5188 ], [ %5211, %5405 ], [ %5134, %5194 ]
  %5427 = zext i32 %5424 to i64
  %5428 = getelementptr inbounds %struct._reg_trie_state, ptr %5423, i64 %5427
  %5429 = load i16, ptr %5428, align 8, !tbaa !172
  %5430 = icmp eq i16 %5429, 0
  br i1 %5430, label %5445, label %5431

5431:                                             ; preds = %5422
  %5432 = load ptr, ptr %5114, align 8, !tbaa !176
  %5433 = zext i16 %5429 to i64
  %5434 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %5432, i64 %5433, i32 1
  %5435 = load i32, ptr %5434, align 4, !tbaa !177
  %5436 = sub i32 %5426, %5435
  %5437 = zext i32 %5436 to i64
  %5438 = urem i64 %5437, %5077
  %5439 = getelementptr inbounds ptr, ptr %5096, i64 %5438
  %5440 = load ptr, ptr %5439, align 8, !tbaa !35
  %5441 = icmp eq ptr %5425, null
  %5442 = icmp ult ptr %5440, %5425
  %5443 = select i1 %5441, i1 true, i1 %5442
  %5444 = select i1 %5443, ptr %5440, ptr %5425
  br label %5445

5445:                                             ; preds = %5431, %5422
  %5446 = phi ptr [ %5444, %5431 ], [ %5425, %5422 ]
  %5447 = icmp eq ptr %5446, null
  br i1 %5447, label %5448, label %5449

5448:                                             ; preds = %5445
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  br label %5540

5449:                                             ; preds = %5445
  store ptr %5446, ptr %6, align 8, !tbaa !35
  %5450 = load i8, ptr %5122, align 8, !tbaa !31, !range !42, !noundef !43
  %5451 = icmp eq i8 %5450, 0
  br i1 %5451, label %5452, label %5515

5452:                                             ; preds = %5449
  %5453 = load ptr, ptr %4, align 8, !tbaa !62
  %5454 = getelementptr i8, ptr %5453, i64 16
  %5455 = load ptr, ptr %5454, align 8, !tbaa !5
  %5456 = getelementptr inbounds %struct.regexp, ptr %5455, i64 0, i32 14
  %5457 = load ptr, ptr %5456, align 8, !tbaa !20
  store ptr null, ptr %5123, align 8, !tbaa !63
  %5458 = load ptr, ptr %5124, align 8, !tbaa !26
  %5459 = ptrtoint ptr %5446 to i64
  %5460 = ptrtoint ptr %5458 to i64
  %5461 = sub i64 %5459, %5460
  %5462 = getelementptr inbounds %struct.regexp, ptr %5455, i64 0, i32 17
  %5463 = load ptr, ptr %5462, align 8, !tbaa !64
  store i64 %5461, ptr %5463, align 8, !tbaa !65
  %5464 = getelementptr inbounds %struct.regexp, ptr %5455, i64 0, i32 15
  store i32 0, ptr %5464, align 8, !tbaa !67
  %5465 = getelementptr inbounds %struct.regexp, ptr %5455, i64 0, i32 16
  store i32 0, ptr %5465, align 4, !tbaa !68
  %5466 = getelementptr inbounds %struct.regexp, ptr %5455, i64 0, i32 12
  %5467 = load i32, ptr %5466, align 8, !tbaa !69
  %5468 = icmp sgt i32 %5467, 0
  br i1 %5468, label %5469, label %5498

5469:                                             ; preds = %5452
  %5470 = and i32 %5467, 7
  %5471 = icmp eq i32 %5470, 0
  br i1 %5471, label %5480, label %5472

5472:                                             ; preds = %5469, %5472
  %5473 = phi i32 [ %5477, %5472 ], [ %5467, %5469 ]
  %5474 = phi ptr [ %5476, %5472 ], [ %5463, %5469 ]
  %5475 = phi i32 [ %5478, %5472 ], [ 0, %5469 ]
  %5476 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5474, i64 1
  %5477 = add nsw i32 %5473, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5476, i8 -1, i64 16, i1 false)
  %5478 = add i32 %5475, 1
  %5479 = icmp eq i32 %5478, %5470
  br i1 %5479, label %5480, label %5472, !llvm.loop !190

5480:                                             ; preds = %5472, %5469
  %5481 = phi i32 [ %5467, %5469 ], [ %5477, %5472 ]
  %5482 = phi ptr [ %5463, %5469 ], [ %5476, %5472 ]
  %5483 = icmp ult i32 %5467, 8
  br i1 %5483, label %5498, label %5484

5484:                                             ; preds = %5480, %5484
  %5485 = phi i32 [ %5495, %5484 ], [ %5481, %5480 ]
  %5486 = phi ptr [ %5494, %5484 ], [ %5482, %5480 ]
  %5487 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5487, i8 -1, i64 16, i1 false)
  %5488 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5488, i8 -1, i64 16, i1 false)
  %5489 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5489, i8 -1, i64 16, i1 false)
  %5490 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5490, i8 -1, i64 16, i1 false)
  %5491 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5491, i8 -1, i64 16, i1 false)
  %5492 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5492, i8 -1, i64 16, i1 false)
  %5493 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5493, i8 -1, i64 16, i1 false)
  %5494 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5486, i64 8
  %5495 = add nsw i32 %5485, -8
  %5496 = add i32 %5485, -9
  %5497 = icmp ult i32 %5496, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5494, i8 -1, i64 16, i1 false)
  br i1 %5497, label %5484, label %5498, !llvm.loop !72

5498:                                             ; preds = %5480, %5484, %5452
  %5499 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %5500 = getelementptr inbounds %struct.regexp_internal, ptr %5457, i64 1
  %5501 = call fastcc i64 @S_regmatch(ptr noundef nonnull %4, ptr noundef nonnull %5446, ptr noundef nonnull %5500)
  %5502 = icmp eq i64 %5501, -1
  br i1 %5502, label %5503, label %5511

5503:                                             ; preds = %5498
  %5504 = load ptr, ptr %5123, align 8, !tbaa !63
  %5505 = icmp eq ptr %5504, null
  br i1 %5505, label %5507, label %5506

5506:                                             ; preds = %5503
  store ptr %5504, ptr %6, align 8, !tbaa !35
  br label %5507

5507:                                             ; preds = %5506, %5503
  %5508 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %5509 = icmp sgt i32 %5508, %5499
  br i1 %5509, label %5510, label %5521

5510:                                             ; preds = %5507
  call void @Perl_leave_scope(i32 noundef %5499) #12
  br label %5521

5511:                                             ; preds = %5498
  %5512 = getelementptr inbounds %struct.regexp, ptr %5455, i64 0, i32 17
  %5513 = load ptr, ptr %5512, align 8, !tbaa !64
  %5514 = getelementptr inbounds %struct.regexp_paren_pair, ptr %5513, i64 0, i32 1
  store i64 %5501, ptr %5514, align 8, !tbaa !74
  br label %5515

5515:                                             ; preds = %5449, %5511
  %5516 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !169
  %5517 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !169
  %5518 = icmp sgt i64 %5516, %5517
  br i1 %5518, label %5519, label %5520

5519:                                             ; preds = %5515
  call void @Perl_free_tmps() #12
  br label %5520

5520:                                             ; preds = %5519, %5515
  call void @Perl_pop_scope() #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %15) #12
  br label %5548

5521:                                             ; preds = %5510, %5507
  %5522 = load i8, ptr %23, align 2, !tbaa !22, !range !42, !noundef !43
  %5523 = icmp eq i8 %5522, 0
  %5524 = load ptr, ptr %6, align 8, !tbaa !35
  br i1 %5523, label %5535, label %5525

5525:                                             ; preds = %5521
  %5526 = load ptr, ptr %5125, align 8, !tbaa !27
  %5527 = icmp ult ptr %5524, %5526
  br i1 %5527, label %5528, label %5537

5528:                                             ; preds = %5525
  %5529 = load i8, ptr %5524, align 1, !tbaa !5
  %5530 = zext i8 %5529 to i64
  %5531 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %5530
  %5532 = load i8, ptr %5531, align 1, !tbaa !5
  %5533 = zext i8 %5532 to i64
  %5534 = getelementptr inbounds i8, ptr %5524, i64 %5533
  br label %5537

5535:                                             ; preds = %5521
  %5536 = getelementptr inbounds i8, ptr %5524, i64 1
  br label %5537

5537:                                             ; preds = %5528, %5535, %5525
  %5538 = phi ptr [ %5536, %5535 ], [ %5524, %5525 ], [ %5534, %5528 ]
  store ptr %5538, ptr %6, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  %5539 = icmp ugt ptr %5538, %5075
  br i1 %5539, label %5540, label %5126

5540:                                             ; preds = %5537, %5108, %5448
  %5541 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !169
  %5542 = load i64, ptr @PL_tmps_floor, align 8, !tbaa !169
  %5543 = icmp sgt i64 %5541, %5542
  br i1 %5543, label %5544, label %5545

5544:                                             ; preds = %5540
  call void @Perl_free_tmps() #12
  br label %5545

5545:                                             ; preds = %5540, %5544
  call void @Perl_pop_scope() #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %15) #12
  br label %5550

5546:                                             ; preds = %5
  %5547 = zext i8 %32 to i32
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.6, i32 noundef %5547) #12
  br label %5550

5548:                                             ; preds = %4070, %3875, %3976, %4834, %4732, %4613, %4500, %4362, %4185, %4967, %3778, %3691, %3599, %3506, %2475, %2371, %2199, %2092, %1974, %1867, %1695, %1589, %1471, %1365, %1196, %1072, %3426, %3429, %3323, %3236, %3239, %3135, %2992, %2904, %2751, %2648, %878, %755, %435, %356, %230, %156, %57, %5520, %5030, %4897, %4795, %4676, %4563, %4425, %4248, %4131, %4037, %3938, %3839, %3754, %3659, %3568, %3385, %3197, %3053, %2966, %2812, %2713, %2536, %2434, %2260, %2155, %2035, %1930, %1756, %1654, %1532, %1430, %1257, %1135, %939, %820, %649, %496, %417, %291, %217, %120, %3446, %3268, %3255, %3081, %3068, %2847, %2830, %2834, %2551, %2555, %2276, %2280, %2051, %2055, %1775, %1779, %1551, %1555, %1276, %1280, %961, %965
  %5549 = load ptr, ptr %6, align 8, !tbaa !35
  br label %5550

5550:                                             ; preds = %4135, %3942, %4041, %4901, %4799, %4680, %4567, %4429, %4252, %5034, %3843, %3758, %3663, %3572, %650, %500, %421, %295, %221, %124, %4050, %3852, %3952, %4263, %4270, %4277, %4284, %4291, %4145, %4926, %3672, %3677, %3451, %3457, %558, %336, %342, %33, %41, %46, %5545, %5546, %311, %951, %965, %1280, %1266, %1544, %1555, %1768, %1779, %2055, %2044, %2280, %2269, %2555, %2545, %3446, %3255, %3068, %2834, %2824, %2563, %4911, %5548
  %5551 = phi ptr [ %5549, %5548 ], [ null, %5545 ], [ null, %4911 ], [ null, %2563 ], [ null, %2824 ], [ null, %2834 ], [ null, %3068 ], [ null, %3255 ], [ null, %3446 ], [ null, %2545 ], [ null, %2555 ], [ null, %2269 ], [ null, %2280 ], [ null, %2044 ], [ null, %2055 ], [ null, %1779 ], [ null, %1768 ], [ null, %1555 ], [ null, %1544 ], [ null, %1266 ], [ null, %1280 ], [ null, %965 ], [ null, %951 ], [ null, %311 ], [ null, %5546 ], [ null, %46 ], [ null, %41 ], [ null, %33 ], [ null, %342 ], [ null, %336 ], [ null, %558 ], [ null, %3457 ], [ null, %3451 ], [ null, %3677 ], [ null, %3672 ], [ null, %4926 ], [ null, %4145 ], [ null, %4291 ], [ null, %4284 ], [ null, %4277 ], [ null, %4270 ], [ null, %4263 ], [ null, %3952 ], [ null, %3852 ], [ null, %4050 ], [ null, %124 ], [ null, %221 ], [ null, %295 ], [ null, %421 ], [ null, %500 ], [ null, %650 ], [ null, %3572 ], [ null, %3663 ], [ null, %3758 ], [ null, %3843 ], [ null, %5034 ], [ null, %4252 ], [ null, %4429 ], [ null, %4567 ], [ null, %4680 ], [ null, %4799 ], [ null, %4901 ], [ null, %4041 ], [ null, %3942 ], [ null, %4135 ]
  ret ptr %5551
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @my_regexec(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %5, ptr nocapture noundef readnone %6, i32 noundef %7) local_unnamed_addr #0 {
  %9 = alloca ptr, align 8
  %10 = alloca %struct.regmatch_info, align 8
  %11 = alloca i64, align 8
  %12 = getelementptr i8, ptr %0, i64 16
  %13 = load ptr, ptr %12, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  %14 = getelementptr inbounds %struct.sv, ptr %5, i64 0, i32 2
  %15 = load i32, ptr %14, align 4, !tbaa !15
  %16 = and i32 %15, 536870912
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %8
  %19 = load ptr, ptr @PL_curcop, align 8, !tbaa !35
  %20 = getelementptr inbounds %struct.cop, ptr %19, i64 0, i32 10
  %21 = load i32, ptr %20, align 8, !tbaa !191
  %22 = and i32 %21, 8
  %23 = icmp eq i32 %22, 0
  br label %24

24:                                               ; preds = %8, %18
  %25 = phi i1 [ false, %8 ], [ %23, %18 ]
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 14
  %28 = load ptr, ptr %27, align 8, !tbaa !20
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %10) #12
  %29 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 13
  %30 = load i32, ptr %29, align 4, !tbaa !36
  %31 = and i32 %30, 256
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %148, label %33

33:                                               ; preds = %24
  %34 = and i32 %7, 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %122

36:                                               ; preds = %33
  %37 = tail call ptr @Perl_mg_find_mglob(ptr noundef nonnull %5) #12
  %38 = icmp eq ptr %37, null
  br i1 %38, label %122, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.magic, ptr %37, i64 0, i32 5
  %41 = load i64, ptr %40, align 8, !tbaa !193
  %42 = icmp sgt i64 %41, -1
  br i1 %42, label %43, label %122

43:                                               ; preds = %39
  %44 = ptrtoint ptr %2 to i64
  %45 = ptrtoint ptr %3 to i64
  %46 = sub i64 %44, %45
  %47 = getelementptr inbounds %struct.magic, ptr %37, i64 0, i32 4
  %48 = load i8, ptr %47, align 1, !tbaa !195
  %49 = and i8 %48, 64
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %119

51:                                               ; preds = %43
  %52 = load i32, ptr %14, align 4, !tbaa !15
  %53 = and i32 %52, 536870912
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %119, label %55

55:                                               ; preds = %51
  %56 = load ptr, ptr @PL_curcop, align 8, !tbaa !35
  %57 = getelementptr inbounds %struct.cop, ptr %56, i64 0, i32 10
  %58 = load i32, ptr %57, align 8, !tbaa !191
  %59 = and i32 %58, 8
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %119

61:                                               ; preds = %55
  %62 = and i32 %52, 2097152
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %81

64:                                               ; preds = %61
  %65 = and i32 %52, 2048
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %84, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.sv, ptr %5, i64 0, i32 3
  %69 = load ptr, ptr %68, align 8, !tbaa !5
  %70 = getelementptr inbounds %struct.sv, ptr %69, i64 0, i32 2
  %71 = load i32, ptr %70, align 4, !tbaa !15
  %72 = and i32 %71, 1048576
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %67
  %75 = load ptr, ptr %69, align 8, !tbaa !38
  %76 = load ptr, ptr %75, align 8, !tbaa !196
  %77 = getelementptr inbounds %struct.hv, ptr %76, i64 0, i32 2
  %78 = load i32, ptr %77, align 4, !tbaa !198
  %79 = and i32 %78, 268435456
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %74, %61
  %82 = getelementptr inbounds i8, ptr %3, i64 %46
  %83 = tail call i64 @Perl_utf8_length(ptr noundef %3, ptr noundef %82) #12
  br label %86

84:                                               ; preds = %74, %67, %64
  %85 = tail call i64 @Perl_sv_len_utf8(ptr noundef nonnull %5) #12
  br label %86

86:                                               ; preds = %84, %81
  %87 = phi i64 [ %83, %81 ], [ %85, %84 ]
  %88 = icmp ugt i64 %41, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %86
  %90 = add i64 %46, 1
  br label %119

91:                                               ; preds = %86
  %92 = load i32, ptr %14, align 4, !tbaa !15
  %93 = and i32 %92, 2097152
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %112

95:                                               ; preds = %91
  %96 = and i32 %92, 2048
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %117, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %struct.sv, ptr %5, i64 0, i32 3
  %100 = load ptr, ptr %99, align 8, !tbaa !5
  %101 = getelementptr inbounds %struct.sv, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 4, !tbaa !15
  %103 = and i32 %102, 1048576
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %98
  %106 = load ptr, ptr %100, align 8, !tbaa !38
  %107 = load ptr, ptr %106, align 8, !tbaa !196
  %108 = getelementptr inbounds %struct.hv, ptr %107, i64 0, i32 2
  %109 = load i32, ptr %108, align 4, !tbaa !198
  %110 = and i32 %109, 268435456
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %117, label %112

112:                                              ; preds = %105, %91
  %113 = trunc i64 %41 to i32
  %114 = tail call ptr @Perl_utf8_hop(ptr noundef %3, i32 noundef %113) #12
  %115 = ptrtoint ptr %114 to i64
  %116 = sub i64 %115, %45
  br label %119

117:                                              ; preds = %105, %98, %95
  %118 = tail call i64 @Perl_sv_pos_u2b_flags(ptr noundef nonnull %5, i64 noundef %41, ptr noundef null, i32 noundef 32) #12
  br label %119

119:                                              ; preds = %43, %51, %55, %89, %112, %117
  %120 = phi i64 [ %90, %89 ], [ %116, %112 ], [ %118, %117 ], [ %41, %55 ], [ %41, %51 ], [ %41, %43 ]
  %121 = getelementptr inbounds i8, ptr %3, i64 %120
  br label %122

122:                                              ; preds = %36, %39, %33, %119
  %123 = phi ptr [ %121, %119 ], [ %1, %33 ], [ %3, %39 ], [ %3, %36 ]
  %124 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 5
  store ptr %123, ptr %124, align 8, !tbaa !200
  %125 = load i32, ptr %29, align 4, !tbaa !36
  %126 = and i32 %125, 4096
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 10
  %129 = load i64, ptr %128, align 8, !tbaa !201
  br i1 %127, label %137, label %130

130:                                              ; preds = %122
  %131 = sub i64 0, %129
  %132 = getelementptr inbounds i8, ptr %123, i64 %131
  %133 = and i32 %7, 128
  %134 = icmp eq i32 %133, 0
  %135 = select i1 %134, ptr %3, ptr %1
  %136 = icmp ult ptr %132, %135
  br i1 %136, label %1366, label %148

137:                                              ; preds = %122
  %138 = icmp eq i64 %129, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %137
  %140 = sub i64 0, %129
  %141 = getelementptr inbounds i8, ptr %1, i64 %140
  %142 = icmp ult ptr %141, %3
  %143 = select i1 %142, ptr %3, ptr %141
  br label %148

144:                                              ; preds = %137
  %145 = and i32 %125, 512
  %146 = icmp eq i32 %145, 0
  %147 = select i1 %146, ptr %1, ptr %3
  br label %148

148:                                              ; preds = %144, %139, %130, %24
  %149 = phi ptr [ %1, %24 ], [ %132, %130 ], [ %143, %139 ], [ %147, %144 ]
  %150 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 8
  %151 = load i64, ptr %150, align 8, !tbaa !21
  %152 = getelementptr inbounds i8, ptr %149, i64 %151
  %153 = icmp ugt ptr %152, %2
  %154 = icmp ult ptr %149, %3
  %155 = or i1 %154, %153
  br i1 %155, label %1366, label %156

156:                                              ; preds = %148
  %157 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store ptr %149, ptr %9, align 8, !tbaa !35
  %158 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 7
  %159 = load i32, ptr %158, align 8, !tbaa !19
  %160 = and i32 %159, 6291456
  %161 = icmp ne i32 %160, 0
  %162 = and i32 %7, 2
  %163 = icmp eq i32 %162, 0
  %164 = and i1 %163, %161
  br i1 %164, label %165, label %209

165:                                              ; preds = %156
  %166 = tail call ptr @my_re_intuit_start(ptr noundef nonnull %0, ptr noundef nonnull %5, ptr noundef %3, ptr noundef %149, ptr noundef %2, i32 poison, ptr poison)
  store ptr %166, ptr %9, align 8, !tbaa !35
  %167 = icmp eq ptr %166, null
  br i1 %167, label %1366, label %168

168:                                              ; preds = %165
  %169 = load i32, ptr %158, align 8, !tbaa !19
  %170 = and i32 %169, 524288
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %209, label %172

172:                                              ; preds = %168
  %173 = and i32 %7, 128
  %174 = icmp ne i32 %173, 0
  %175 = icmp ult ptr %166, %1
  %176 = and i1 %174, %175
  br i1 %176, label %1356, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 16
  store i32 0, ptr %178, align 4, !tbaa !68
  %179 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 15
  store i32 0, ptr %179, align 8, !tbaa !67
  %180 = load ptr, ptr %12, align 8, !tbaa !5
  %181 = getelementptr inbounds %struct.regexp, ptr %180, i64 0, i32 7
  %182 = load i32, ptr %181, align 8, !tbaa !19
  %183 = ptrtoint ptr %166 to i64
  %184 = ptrtoint ptr %3 to i64
  %185 = sub i64 %183, %184
  %186 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %187 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 9
  br i1 %25, label %188, label %197

188:                                              ; preds = %177
  %189 = or i32 %182, 1048576
  store i32 %189, ptr %181, align 8, !tbaa !19
  %190 = load ptr, ptr %186, align 8, !tbaa !64
  store i64 %185, ptr %190, align 8, !tbaa !65
  %191 = load i64, ptr %187, align 8, !tbaa !202
  %192 = trunc i64 %191 to i32
  %193 = tail call ptr @Perl_utf8_hop(ptr noundef nonnull %166, i32 noundef %192) #12
  %194 = ptrtoint ptr %193 to i64
  %195 = sub i64 %194, %184
  %196 = load ptr, ptr %186, align 8, !tbaa !64
  br label %202

197:                                              ; preds = %177
  %198 = and i32 %182, -1048577
  store i32 %198, ptr %181, align 8, !tbaa !19
  %199 = load ptr, ptr %186, align 8, !tbaa !64
  store i64 %185, ptr %199, align 8, !tbaa !65
  %200 = load i64, ptr %187, align 8, !tbaa !202
  %201 = add nsw i64 %200, %185
  br label %202

202:                                              ; preds = %197, %188
  %203 = phi ptr [ %196, %188 ], [ %199, %197 ]
  %204 = phi i64 [ %195, %188 ], [ %201, %197 ]
  %205 = getelementptr inbounds %struct.regexp_paren_pair, ptr %203, i64 0, i32 1
  store i64 %204, ptr %205, align 8, !tbaa !74
  %206 = and i32 %7, 16
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %1366

208:                                              ; preds = %202
  tail call fastcc void @S_reg_set_capture_string(ptr noundef nonnull %0, ptr noundef %3, ptr noundef %2, ptr noundef nonnull %5, i32 noundef %7)
  br label %1366

209:                                              ; preds = %168, %156
  %210 = phi ptr [ %166, %168 ], [ %149, %156 ]
  %211 = phi i32 [ %169, %168 ], [ %159, %156 ]
  %212 = and i32 %211, 1
  %213 = ptrtoint ptr %2 to i64
  %214 = ptrtoint ptr %210 to i64
  %215 = sub i64 %213, %214
  %216 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 11
  %217 = load ptr, ptr %216, align 8, !tbaa !8
  %218 = getelementptr inbounds %struct.reg_substr_data, ptr %217, i64 0, i32 1, i64 2
  %219 = load i64, ptr %218, align 8, !tbaa !13
  %220 = tail call i64 @llvm.smin.i64(i64 %219, i64 0)
  %221 = add nsw i64 %220, %151
  %222 = icmp slt i64 %215, %221
  br i1 %222, label %1356, label %223

223:                                              ; preds = %209
  %224 = getelementptr inbounds %struct.regexp_internal, ptr %28, i64 0, i32 6
  %225 = load i8, ptr %224, align 4, !tbaa !5
  %226 = icmp eq i8 %225, -100
  br i1 %226, label %228, label %227

227:                                              ; preds = %223
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.1) #12
  br label %228

228:                                              ; preds = %227, %223
  %229 = load ptr, ptr %12, align 8, !tbaa !5
  %230 = getelementptr inbounds %struct.regexp, ptr %229, i64 0, i32 7
  %231 = load i32, ptr %230, align 8, !tbaa !19
  %232 = and i32 %231, -67108865
  store i32 %232, ptr %230, align 8, !tbaa !19
  %233 = load ptr, ptr %12, align 8, !tbaa !5
  %234 = getelementptr inbounds %struct.regexp, ptr %233, i64 0, i32 7
  %235 = load i32, ptr %234, align 8, !tbaa !19
  %236 = and i32 %235, -1048577
  %237 = select i1 %25, i32 1048576, i32 0
  %238 = or i32 %236, %237
  store i32 %238, ptr %234, align 8, !tbaa !19
  store ptr %0, ptr %10, align 8, !tbaa !62
  %239 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 12
  store i8 0, ptr %239, align 8, !tbaa !31
  %240 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 14
  store i8 %26, ptr %240, align 2, !tbaa !22
  %241 = getelementptr inbounds %struct.p5rx, ptr %0, i64 0, i32 2
  %242 = load i32, ptr %241, align 4, !tbaa !28
  %243 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 13
  %244 = lshr i32 %242, 29
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  store i8 %246, ptr %243, align 1, !tbaa !30
  %247 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 15
  store i8 0, ptr %247, align 1, !tbaa !203
  %248 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 1
  store ptr %3, ptr %248, align 8, !tbaa !26
  %249 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 4
  store ptr %5, ptr %249, align 8, !tbaa !204
  %250 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 9
  store i32 0, ptr %250, align 8, !tbaa !32
  %251 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 2
  store ptr %2, ptr %251, align 8, !tbaa !27
  %252 = getelementptr inbounds i8, ptr %1, i64 %4
  %253 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 3
  store ptr %252, ptr %253, align 8, !tbaa !205
  %254 = load i32, ptr %158, align 8, !tbaa !19
  %255 = and i32 %254, 131072
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %268, label %257

257:                                              ; preds = %228
  %258 = load i32, ptr %14, align 4, !tbaa !15
  %259 = and i32 %258, 131072
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %268, label %261

261:                                              ; preds = %257
  %262 = tail call ptr @Perl_newSV(i64 noundef 0) #12
  store ptr %262, ptr %249, align 8, !tbaa !204
  %263 = icmp eq ptr %262, %5
  br i1 %263, label %265, label %264

264:                                              ; preds = %261
  tail call void @Perl_sv_setsv_flags(ptr noundef %262, ptr noundef nonnull %5, i32 noundef 1554) #12
  br label %265

265:                                              ; preds = %261, %264
  tail call void @Perl_save_pushptr(ptr noundef %262, i32 noundef 11) #12
  %266 = load i32, ptr %158, align 8, !tbaa !19
  %267 = and i32 %266, 131072
  br label %268

268:                                              ; preds = %265, %257, %228
  %269 = phi i32 [ %267, %265 ], [ 1, %257 ], [ 0, %228 ]
  %270 = phi ptr [ %262, %265 ], [ %5, %257 ], [ %5, %228 ]
  %271 = icmp eq i32 %269, 0
  %272 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %273 = icmp eq ptr %272, null
  br i1 %273, label %276, label %274

274:                                              ; preds = %268
  %275 = load ptr, ptr @PL_regmatch_state, align 8, !tbaa !35
  br label %279

276:                                              ; preds = %268
  %277 = tail call ptr @Perl_safesysmalloc(i64 noundef 3976) #12
  store ptr %277, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %278 = getelementptr inbounds %struct.regmatch_slab, ptr %277, i64 0, i32 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %278, i8 0, i64 16, i1 false)
  store ptr %277, ptr @PL_regmatch_state, align 8, !tbaa !35
  br label %279

279:                                              ; preds = %274, %276
  %280 = phi ptr [ %272, %274 ], [ %277, %276 ]
  %281 = phi ptr [ %275, %274 ], [ %277, %276 ]
  %282 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 7
  %283 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 8
  %284 = select i1 %271, i32 2, i32 3
  br label %285

285:                                              ; preds = %279, %317
  %286 = phi ptr [ undef, %279 ], [ %298, %317 ]
  %287 = phi ptr [ %280, %279 ], [ %318, %317 ]
  %288 = phi ptr [ %281, %279 ], [ %319, %317 ]
  %289 = phi ptr [ undef, %279 ], [ %301, %317 ]
  %290 = phi i32 [ 0, %279 ], [ %320, %317 ]
  switch i32 %290, label %297 [
    i32 1, label %291
    i32 2, label %293
  ]

291:                                              ; preds = %285
  %292 = getelementptr inbounds %struct.regmatch_state, ptr %288, i64 0, i32 2
  store ptr %292, ptr %282, align 8, !tbaa !25
  br label %297

293:                                              ; preds = %285
  %294 = getelementptr inbounds %struct.regmatch_state, ptr %288, i64 0, i32 2
  store ptr %294, ptr %289, align 8, !tbaa !206
  store ptr %294, ptr %283, align 8, !tbaa !208
  %295 = load ptr, ptr @PL_regmatch_state, align 8, !tbaa !35
  %296 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !35
  br label %297

297:                                              ; preds = %285, %293, %291
  %298 = phi ptr [ %286, %285 ], [ %294, %293 ], [ %286, %291 ]
  %299 = phi ptr [ %287, %285 ], [ %296, %293 ], [ %287, %291 ]
  %300 = phi ptr [ %288, %285 ], [ %295, %293 ], [ %288, %291 ]
  %301 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %292, %291 ]
  %302 = getelementptr inbounds %struct.regmatch_state, ptr %300, i64 1
  store ptr %302, ptr @PL_regmatch_state, align 8, !tbaa !35
  %303 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %299, i64 0, i64 32
  %304 = icmp ugt ptr %302, %303
  br i1 %304, label %305, label %317

305:                                              ; preds = %297
  %306 = getelementptr inbounds %struct.regmatch_slab, ptr %299, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !209
  %308 = icmp eq ptr %307, null
  br i1 %308, label %309, label %315

309:                                              ; preds = %305
  %310 = tail call ptr @Perl_safesysmalloc(i64 noundef 3976) #12
  %311 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %312 = getelementptr inbounds %struct.regmatch_slab, ptr %310, i64 0, i32 1
  store ptr %311, ptr %312, align 8, !tbaa !211
  %313 = getelementptr inbounds %struct.regmatch_slab, ptr %310, i64 0, i32 2
  store ptr null, ptr %313, align 8, !tbaa !209
  %314 = getelementptr inbounds %struct.regmatch_slab, ptr %311, i64 0, i32 2
  store ptr %310, ptr %314, align 8, !tbaa !209
  br label %315

315:                                              ; preds = %305, %309
  %316 = phi ptr [ %307, %305 ], [ %310, %309 ]
  store ptr %316, ptr @PL_regmatch_slab, align 8, !tbaa !35
  store ptr %316, ptr @PL_regmatch_state, align 8, !tbaa !35
  br label %317

317:                                              ; preds = %297, %315
  %318 = phi ptr [ %299, %297 ], [ %316, %315 ]
  %319 = phi ptr [ %302, %297 ], [ %316, %315 ]
  %320 = add nuw nsw i32 %290, 1
  %321 = icmp eq i32 %320, %284
  br i1 %321, label %322, label %285, !llvm.loop !212

322:                                              ; preds = %317
  %323 = getelementptr inbounds %struct.regmatch_info_aux, ptr %301, i64 0, i32 1
  store ptr %281, ptr %323, align 8, !tbaa !213
  %324 = getelementptr inbounds %struct.regmatch_info_aux, ptr %301, i64 0, i32 2
  store ptr %280, ptr %324, align 8, !tbaa !214
  %325 = getelementptr inbounds %struct.regmatch_info_aux, ptr %301, i64 0, i32 3
  store ptr null, ptr %325, align 8, !tbaa !215
  tail call void @Perl_save_destructor_x(ptr noundef nonnull @S_cleanup_regmatch_info_aux, ptr noundef %301) #12
  %326 = load i32, ptr %158, align 8, !tbaa !19
  %327 = and i32 %326, 131072
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %447, label %329

329:                                              ; preds = %322
  %330 = load ptr, ptr %12, align 8, !tbaa !5
  store ptr %330, ptr %298, align 8, !tbaa !216
  %331 = icmp eq ptr %270, null
  br i1 %331, label %394, label %332

332:                                              ; preds = %329
  %333 = load ptr, ptr @PL_defgv, align 8, !tbaa !35
  %334 = getelementptr inbounds %struct.gv, ptr %333, i64 0, i32 3
  %335 = load ptr, ptr %334, align 8, !tbaa !5
  %336 = load ptr, ptr %335, align 8, !tbaa !35
  %337 = icmp eq ptr %336, null
  br i1 %337, label %338, label %343

338:                                              ; preds = %332
  %339 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %333, i32 noundef 0) #12
  %340 = getelementptr inbounds %struct.gv, ptr %339, i64 0, i32 3
  %341 = load ptr, ptr %340, align 8, !tbaa !5
  %342 = load ptr, ptr %341, align 8, !tbaa !35
  br label %343

343:                                              ; preds = %338, %332
  %344 = phi ptr [ %342, %338 ], [ %336, %332 ]
  %345 = icmp eq ptr %270, %344
  br i1 %345, label %377, label %346

346:                                              ; preds = %343
  %347 = load ptr, ptr @PL_defgv, align 8, !tbaa !35
  tail call void @Perl_save_gp(ptr noundef %347, i32 noundef 0) #12
  %348 = load ptr, ptr @PL_defgv, align 8, !tbaa !35
  %349 = load ptr, ptr %348, align 8, !tbaa !218
  %350 = getelementptr inbounds %struct.xpvgv, ptr %349, i64 0, i32 2
  %351 = load i64, ptr %350, align 8, !tbaa !220
  %352 = and i64 %351, -2
  store i64 %352, ptr %350, align 8, !tbaa !220
  %353 = getelementptr inbounds %struct.gv, ptr %348, i64 0, i32 3
  %354 = load ptr, ptr %353, align 8, !tbaa !5
  tail call void @Perl_save_generic_svref(ptr noundef %354) #12
  %355 = load ptr, ptr @PL_defgv, align 8, !tbaa !35
  %356 = getelementptr inbounds %struct.gv, ptr %355, i64 0, i32 3
  %357 = load ptr, ptr %356, align 8, !tbaa !5
  store ptr null, ptr %357, align 8, !tbaa !222
  %358 = load ptr, ptr @PL_defgv, align 8, !tbaa !35
  %359 = getelementptr inbounds %struct.gv, ptr %358, i64 0, i32 3
  %360 = load ptr, ptr %359, align 8, !tbaa !5
  %361 = load ptr, ptr %360, align 8, !tbaa !222
  %362 = icmp eq ptr %361, null
  br i1 %362, label %370, label %363

363:                                              ; preds = %346
  %364 = getelementptr inbounds %struct.sv, ptr %361, i64 0, i32 1
  %365 = load i32, ptr %364, align 8, !tbaa !61
  %366 = icmp ugt i32 %365, 1
  br i1 %366, label %367, label %369

367:                                              ; preds = %363
  %368 = add i32 %365, -1
  store i32 %368, ptr %364, align 8, !tbaa !61
  br label %370

369:                                              ; preds = %363
  tail call void @Perl_sv_free2(ptr noundef nonnull %361, i32 noundef %365) #12
  br label %370

370:                                              ; preds = %369, %367, %346
  %371 = getelementptr inbounds %struct.sv, ptr %270, i64 0, i32 1
  %372 = load i32, ptr %371, align 8, !tbaa !61
  %373 = add i32 %372, 1
  store i32 %373, ptr %371, align 8, !tbaa !61
  %374 = load ptr, ptr @PL_defgv, align 8, !tbaa !35
  %375 = getelementptr inbounds %struct.gv, ptr %374, i64 0, i32 3
  %376 = load ptr, ptr %375, align 8, !tbaa !5
  store ptr %270, ptr %376, align 8, !tbaa !222
  br label %377

377:                                              ; preds = %343, %370
  %378 = tail call ptr @Perl_mg_find_mglob(ptr noundef nonnull %270) #12
  %379 = icmp eq ptr %378, null
  br i1 %379, label %383, label %380

380:                                              ; preds = %377
  %381 = getelementptr inbounds %struct.magic, ptr %378, i64 0, i32 5
  %382 = load i64, ptr %381, align 8, !tbaa !193
  br label %386

383:                                              ; preds = %377
  %384 = tail call ptr @Perl_sv_magicext_mglob(ptr noundef nonnull %270) #12
  %385 = getelementptr inbounds %struct.magic, ptr %384, i64 0, i32 5
  store i64 -1, ptr %385, align 8, !tbaa !193
  br label %386

386:                                              ; preds = %383, %380
  %387 = phi i64 [ %382, %380 ], [ -1, %383 ]
  %388 = phi ptr [ %378, %380 ], [ %384, %383 ]
  %389 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 7
  store ptr %388, ptr %389, align 8, !tbaa !224
  %390 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 8
  store i64 %387, ptr %390, align 8, !tbaa !225
  %391 = getelementptr inbounds %struct.magic, ptr %388, i64 0, i32 4
  %392 = load i8, ptr %391, align 1, !tbaa !195
  %393 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 9
  store i8 %392, ptr %393, align 8, !tbaa !226
  br label %396

394:                                              ; preds = %329
  %395 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 7
  store ptr null, ptr %395, align 8, !tbaa !224
  br label %396

396:                                              ; preds = %394, %386
  %397 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  %398 = icmp eq ptr %397, null
  br i1 %398, label %399, label %401

399:                                              ; preds = %396
  %400 = tail call ptr @Perl_safesyscalloc(i64 noundef 1, i64 noundef 96) #12
  store ptr %400, ptr @PL_reg_curpm, align 8, !tbaa !35
  br label %401

401:                                              ; preds = %396, %399
  %402 = phi ptr [ %400, %399 ], [ %397, %396 ]
  %403 = getelementptr inbounds %struct.sv, ptr %0, i64 0, i32 1
  %404 = load i32, ptr %403, align 8, !tbaa !61
  %405 = add i32 %404, 1
  store i32 %405, ptr %403, align 8, !tbaa !61
  %406 = getelementptr inbounds %struct.pmop, ptr %402, i64 0, i32 9
  %407 = load ptr, ptr %406, align 8, !tbaa !227
  %408 = icmp eq ptr %407, null
  br i1 %408, label %417, label %409

409:                                              ; preds = %401
  %410 = getelementptr inbounds %struct.sv, ptr %407, i64 0, i32 1
  %411 = load i32, ptr %410, align 8, !tbaa !61
  %412 = icmp ugt i32 %411, 1
  br i1 %412, label %413, label %415

413:                                              ; preds = %409
  %414 = add i32 %411, -1
  store i32 %414, ptr %410, align 8, !tbaa !61
  br label %417

415:                                              ; preds = %409
  tail call void @Perl_sv_free2(ptr noundef nonnull %407, i32 noundef %411) #12
  %416 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  br label %417

417:                                              ; preds = %401, %413, %415
  %418 = phi ptr [ %402, %401 ], [ %402, %413 ], [ %416, %415 ]
  %419 = getelementptr inbounds %struct.pmop, ptr %418, i64 0, i32 9
  store ptr %0, ptr %419, align 8, !tbaa !227
  %420 = load ptr, ptr @PL_curpm, align 8, !tbaa !35
  %421 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 1
  store ptr %420, ptr %421, align 8, !tbaa !229
  store ptr %418, ptr @PL_curpm, align 8, !tbaa !35
  %422 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 7
  %423 = load i32, ptr %422, align 8, !tbaa !19
  %424 = and i32 %423, 33554432
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %439, label %426

426:                                              ; preds = %417
  %427 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 18
  %428 = load ptr, ptr %427, align 8, !tbaa !230
  %429 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 20
  %430 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 4
  %431 = load <2 x i64>, ptr %429, align 8, !tbaa !169
  store <2 x i64> %431, ptr %430, align 8, !tbaa !169
  %432 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 22
  %433 = load i64, ptr %432, align 8, !tbaa !231
  %434 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 6
  store i64 %433, ptr %434, align 8, !tbaa !232
  %435 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 19
  %436 = load ptr, ptr %435, align 8, !tbaa !233
  %437 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 2
  store ptr %436, ptr %437, align 8, !tbaa !234
  %438 = and i32 %423, -33554433
  store i32 %438, ptr %422, align 8, !tbaa !19
  br label %439

439:                                              ; preds = %426, %417
  %440 = phi ptr [ %428, %426 ], [ null, %417 ]
  %441 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %298, i64 0, i32 3
  store ptr %440, ptr %441, align 8
  %442 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 18
  store ptr %3, ptr %442, align 8, !tbaa !230
  %443 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 21
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %443, i8 0, i64 16, i1 false)
  %444 = ptrtoint ptr %3 to i64
  %445 = sub i64 %213, %444
  %446 = getelementptr inbounds %struct.regexp, ptr %330, i64 0, i32 20
  store i64 %445, ptr %446, align 8, !tbaa !235
  br label %450

447:                                              ; preds = %322
  store ptr null, ptr %301, align 8, !tbaa !206
  store ptr null, ptr %283, align 8, !tbaa !208
  %448 = load ptr, ptr @PL_curpm, align 8, !tbaa !35
  %449 = icmp eq ptr %448, null
  br i1 %449, label %463, label %450

450:                                              ; preds = %439, %447
  %451 = phi ptr [ %418, %439 ], [ %448, %447 ]
  %452 = getelementptr inbounds %struct.pmop, ptr %451, i64 0, i32 9
  %453 = load ptr, ptr %452, align 8, !tbaa !227
  %454 = icmp eq ptr %453, %0
  br i1 %454, label %455, label %463

455:                                              ; preds = %450
  %456 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %457 = load ptr, ptr %456, align 8, !tbaa !64
  %458 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 12
  %459 = load i32, ptr %458, align 8, !tbaa !69
  %460 = add i32 %459, 1
  %461 = zext i32 %460 to i64
  %462 = tail call ptr @Perl_safesyscalloc(i64 noundef %461, i64 noundef 24) #12
  store ptr %462, ptr %456, align 8, !tbaa !64
  br label %463

463:                                              ; preds = %455, %450, %447
  %464 = phi ptr [ %457, %455 ], [ null, %450 ], [ null, %447 ]
  %465 = load i32, ptr %29, align 4, !tbaa !36
  %466 = and i32 %465, 3072
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %625, label %468

468:                                              ; preds = %463
  %469 = load ptr, ptr %12, align 8, !tbaa !5
  %470 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 14
  %471 = load ptr, ptr %470, align 8, !tbaa !20
  %472 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  store ptr null, ptr %472, align 8, !tbaa !63
  %473 = load ptr, ptr %9, align 8, !tbaa !35
  %474 = ptrtoint ptr %473 to i64
  %475 = ptrtoint ptr %3 to i64
  %476 = sub i64 %474, %475
  %477 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 17
  %478 = load ptr, ptr %477, align 8, !tbaa !64
  store i64 %476, ptr %478, align 8, !tbaa !65
  %479 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 15
  store i32 0, ptr %479, align 8, !tbaa !67
  %480 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 16
  store i32 0, ptr %480, align 4, !tbaa !68
  %481 = getelementptr inbounds %struct.regexp, ptr %469, i64 0, i32 12
  %482 = load i32, ptr %481, align 8, !tbaa !69
  %483 = icmp sgt i32 %482, 0
  br i1 %483, label %484, label %513

484:                                              ; preds = %468
  %485 = and i32 %482, 7
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %495, label %487

487:                                              ; preds = %484, %487
  %488 = phi i32 [ %492, %487 ], [ %482, %484 ]
  %489 = phi ptr [ %491, %487 ], [ %478, %484 ]
  %490 = phi i32 [ %493, %487 ], [ 0, %484 ]
  %491 = getelementptr inbounds %struct.regexp_paren_pair, ptr %489, i64 1
  %492 = add nsw i32 %488, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %491, i8 -1, i64 16, i1 false)
  %493 = add i32 %490, 1
  %494 = icmp eq i32 %493, %485
  br i1 %494, label %495, label %487, !llvm.loop !236

495:                                              ; preds = %487, %484
  %496 = phi i32 [ %482, %484 ], [ %492, %487 ]
  %497 = phi ptr [ %478, %484 ], [ %491, %487 ]
  %498 = icmp ult i32 %482, 8
  br i1 %498, label %513, label %499

499:                                              ; preds = %495, %499
  %500 = phi i32 [ %510, %499 ], [ %496, %495 ]
  %501 = phi ptr [ %509, %499 ], [ %497, %495 ]
  %502 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %502, i8 -1, i64 16, i1 false)
  %503 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %503, i8 -1, i64 16, i1 false)
  %504 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %504, i8 -1, i64 16, i1 false)
  %505 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %505, i8 -1, i64 16, i1 false)
  %506 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %506, i8 -1, i64 16, i1 false)
  %507 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %507, i8 -1, i64 16, i1 false)
  %508 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %508, i8 -1, i64 16, i1 false)
  %509 = getelementptr inbounds %struct.regexp_paren_pair, ptr %501, i64 8
  %510 = add nsw i32 %500, -8
  %511 = add i32 %500, -9
  %512 = icmp ult i32 %511, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %509, i8 -1, i64 16, i1 false)
  br i1 %512, label %499, label %513, !llvm.loop !72

513:                                              ; preds = %495, %499, %468
  %514 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %515 = getelementptr inbounds %struct.regexp_internal, ptr %471, i64 1
  %516 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %473, ptr noundef nonnull %515)
  %517 = icmp eq i64 %516, -1
  br i1 %517, label %518, label %1325

518:                                              ; preds = %513
  %519 = load ptr, ptr %472, align 8, !tbaa !63
  %520 = icmp eq ptr %519, null
  br i1 %520, label %522, label %521

521:                                              ; preds = %518
  store ptr %519, ptr %9, align 8, !tbaa !35
  br label %522

522:                                              ; preds = %521, %518
  %523 = phi ptr [ %519, %521 ], [ %473, %518 ]
  %524 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %525 = icmp sgt i32 %524, %514
  br i1 %525, label %526, label %527

526:                                              ; preds = %522
  call void @Perl_leave_scope(i32 noundef %514) #12
  br label %527

527:                                              ; preds = %526, %522
  %528 = load i32, ptr %29, align 4, !tbaa !36
  %529 = and i32 %528, 1024
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %1356, label %531

531:                                              ; preds = %527
  %532 = call i64 @llvm.usub.sat.i64(i64 %151, i64 1)
  %533 = load i8, ptr %240, align 2, !tbaa !22, !range !42, !noundef !43
  %534 = icmp eq i8 %533, 0
  %535 = sub nsw i64 0, %532
  br i1 %534, label %538, label %536

536:                                              ; preds = %531
  %537 = call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef %535, ptr noundef %3)
  br label %540

538:                                              ; preds = %531
  %539 = getelementptr inbounds i8, ptr %2, i64 %535
  br label %540

540:                                              ; preds = %538, %536
  %541 = phi ptr [ %537, %536 ], [ %539, %538 ]
  %542 = getelementptr inbounds i8, ptr %541, i64 -1
  %543 = icmp ugt ptr %523, %542
  br i1 %543, label %1356, label %544

544:                                              ; preds = %540, %549
  %545 = phi ptr [ %550, %549 ], [ %523, %540 ]
  %546 = getelementptr inbounds i8, ptr %545, i64 1
  %547 = load i8, ptr %545, align 1, !tbaa !5
  %548 = icmp eq i8 %547, 10
  br i1 %548, label %552, label %549

549:                                              ; preds = %624, %618, %544
  %550 = phi ptr [ %546, %544 ], [ %621, %618 ], [ %621, %624 ]
  %551 = icmp ugt ptr %550, %542
  br i1 %551, label %1356, label %544, !llvm.loop !237

552:                                              ; preds = %544
  %553 = load ptr, ptr %216, align 8, !tbaa !8
  %554 = getelementptr inbounds %struct.reg_substr_data, ptr %553, i64 0, i32 1, i64 2, i32 2
  %555 = load ptr, ptr %554, align 8, !tbaa !34
  %556 = icmp eq ptr %555, null
  br i1 %556, label %557, label %561

557:                                              ; preds = %552
  %558 = getelementptr inbounds %struct.reg_substr_data, ptr %553, i64 0, i32 1, i64 2, i32 3
  %559 = load ptr, ptr %558, align 8, !tbaa !33
  %560 = icmp eq ptr %559, null
  br i1 %560, label %564, label %561

561:                                              ; preds = %557, %552
  %562 = call ptr @my_re_intuit_start(ptr noundef %0, ptr noundef %5, ptr noundef %3, ptr noundef nonnull %546, ptr noundef %2, i32 poison, ptr poison)
  %563 = icmp eq ptr %562, null
  br i1 %563, label %1356, label %564

564:                                              ; preds = %561, %557
  %565 = phi ptr [ %562, %561 ], [ %546, %557 ]
  %566 = load ptr, ptr %10, align 8, !tbaa !62
  %567 = getelementptr i8, ptr %566, i64 16
  %568 = load ptr, ptr %567, align 8, !tbaa !5
  %569 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 14
  %570 = load ptr, ptr %569, align 8, !tbaa !20
  store ptr null, ptr %472, align 8, !tbaa !63
  %571 = load ptr, ptr %248, align 8, !tbaa !26
  %572 = ptrtoint ptr %565 to i64
  %573 = ptrtoint ptr %571 to i64
  %574 = sub i64 %572, %573
  %575 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 17
  %576 = load ptr, ptr %575, align 8, !tbaa !64
  store i64 %574, ptr %576, align 8, !tbaa !65
  %577 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 15
  store i32 0, ptr %577, align 8, !tbaa !67
  %578 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 16
  store i32 0, ptr %578, align 4, !tbaa !68
  %579 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 12
  %580 = load i32, ptr %579, align 8, !tbaa !69
  %581 = icmp sgt i32 %580, 0
  br i1 %581, label %582, label %611

582:                                              ; preds = %564
  %583 = and i32 %580, 7
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %593, label %585

585:                                              ; preds = %582, %585
  %586 = phi i32 [ %590, %585 ], [ %580, %582 ]
  %587 = phi ptr [ %589, %585 ], [ %576, %582 ]
  %588 = phi i32 [ %591, %585 ], [ 0, %582 ]
  %589 = getelementptr inbounds %struct.regexp_paren_pair, ptr %587, i64 1
  %590 = add nsw i32 %586, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %589, i8 -1, i64 16, i1 false)
  %591 = add i32 %588, 1
  %592 = icmp eq i32 %591, %583
  br i1 %592, label %593, label %585, !llvm.loop !238

593:                                              ; preds = %585, %582
  %594 = phi i32 [ %580, %582 ], [ %590, %585 ]
  %595 = phi ptr [ %576, %582 ], [ %589, %585 ]
  %596 = icmp ult i32 %580, 8
  br i1 %596, label %611, label %597

597:                                              ; preds = %593, %597
  %598 = phi i32 [ %608, %597 ], [ %594, %593 ]
  %599 = phi ptr [ %607, %597 ], [ %595, %593 ]
  %600 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %600, i8 -1, i64 16, i1 false)
  %601 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %601, i8 -1, i64 16, i1 false)
  %602 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %602, i8 -1, i64 16, i1 false)
  %603 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %603, i8 -1, i64 16, i1 false)
  %604 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %604, i8 -1, i64 16, i1 false)
  %605 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %605, i8 -1, i64 16, i1 false)
  %606 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %606, i8 -1, i64 16, i1 false)
  %607 = getelementptr inbounds %struct.regexp_paren_pair, ptr %599, i64 8
  %608 = add nsw i32 %598, -8
  %609 = add i32 %598, -9
  %610 = icmp ult i32 %609, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %607, i8 -1, i64 16, i1 false)
  br i1 %610, label %597, label %611, !llvm.loop !72

611:                                              ; preds = %593, %597, %564
  %612 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %613 = getelementptr inbounds %struct.regexp_internal, ptr %570, i64 1
  %614 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %565, ptr noundef nonnull %613)
  %615 = icmp eq i64 %614, -1
  br i1 %615, label %618, label %616

616:                                              ; preds = %611
  %617 = getelementptr inbounds %struct.regexp, ptr %568, i64 0, i32 17
  br label %1325

618:                                              ; preds = %611
  %619 = load ptr, ptr %472, align 8, !tbaa !63
  %620 = icmp eq ptr %619, null
  %621 = select i1 %620, ptr %565, ptr %619
  %622 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %623 = icmp sgt i32 %622, %612
  br i1 %623, label %624, label %549

624:                                              ; preds = %618
  call void @Perl_leave_scope(i32 noundef %612) #12
  br label %549

625:                                              ; preds = %463
  %626 = and i32 %465, 4096
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %634, label %628

628:                                              ; preds = %625
  %629 = load ptr, ptr %9, align 8, !tbaa !35
  %630 = icmp eq ptr %629, %149
  br i1 %630, label %631, label %1356

631:                                              ; preds = %628
  %632 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !94
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %1356, label %1330

634:                                              ; preds = %625
  %635 = load ptr, ptr %216, align 8, !tbaa !8
  %636 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 2
  %637 = load ptr, ptr %636, align 8, !tbaa !34
  %638 = icmp eq ptr %637, null
  br i1 %638, label %639, label %646

639:                                              ; preds = %634
  %640 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 3
  %641 = load ptr, ptr %640, align 8, !tbaa !33
  %642 = icmp eq ptr %641, null
  %643 = and i32 %465, 1
  %644 = icmp eq i32 %643, 0
  %645 = or i1 %644, %642
  br i1 %645, label %846, label %649

646:                                              ; preds = %634
  %647 = and i32 %465, 1
  %648 = icmp eq i32 %647, 0
  br i1 %648, label %862, label %650

649:                                              ; preds = %639
  br i1 %25, label %659, label %755

650:                                              ; preds = %646
  br i1 %25, label %651, label %761

651:                                              ; preds = %650
  %652 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 3
  %653 = load ptr, ptr %652, align 8, !tbaa !33
  %654 = icmp eq ptr %653, null
  br i1 %654, label %655, label %659

655:                                              ; preds = %651
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %656 = load ptr, ptr %216, align 8, !tbaa !8
  %657 = getelementptr inbounds %struct.reg_substr_data, ptr %656, i64 0, i32 1, i64 0, i32 3
  %658 = load ptr, ptr %657, align 8, !tbaa !33
  br label %659

659:                                              ; preds = %649, %655, %651
  %660 = phi ptr [ %658, %655 ], [ %653, %651 ], [ %641, %649 ]
  %661 = getelementptr inbounds %struct.sv, ptr %660, i64 0, i32 3
  %662 = load ptr, ptr %661, align 8, !tbaa !5
  %663 = load i8, ptr %662, align 1, !tbaa !5
  %664 = load ptr, ptr %9, align 8, !tbaa !35
  %665 = icmp ult ptr %664, %2
  br i1 %665, label %666, label %1356

666:                                              ; preds = %659
  %667 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  %668 = zext i8 %663 to i64
  %669 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %668
  br label %670

670:                                              ; preds = %666, %751
  %671 = phi ptr [ %664, %666 ], [ %753, %751 ]
  %672 = load i8, ptr %671, align 1, !tbaa !5
  %673 = icmp eq i8 %672, %663
  br i1 %673, label %674, label %751

674:                                              ; preds = %670
  %675 = load ptr, ptr %10, align 8, !tbaa !62
  %676 = getelementptr i8, ptr %675, i64 16
  %677 = load ptr, ptr %676, align 8, !tbaa !5
  %678 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 14
  %679 = load ptr, ptr %678, align 8, !tbaa !20
  store ptr null, ptr %667, align 8, !tbaa !63
  %680 = load ptr, ptr %248, align 8, !tbaa !26
  %681 = ptrtoint ptr %671 to i64
  %682 = ptrtoint ptr %680 to i64
  %683 = sub i64 %681, %682
  %684 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 17
  %685 = load ptr, ptr %684, align 8, !tbaa !64
  store i64 %683, ptr %685, align 8, !tbaa !65
  %686 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 15
  store i32 0, ptr %686, align 8, !tbaa !67
  %687 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 16
  store i32 0, ptr %687, align 4, !tbaa !68
  %688 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 12
  %689 = load i32, ptr %688, align 8, !tbaa !69
  %690 = icmp sgt i32 %689, 0
  br i1 %690, label %691, label %720

691:                                              ; preds = %674
  %692 = and i32 %689, 7
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %702, label %694

694:                                              ; preds = %691, %694
  %695 = phi i32 [ %699, %694 ], [ %689, %691 ]
  %696 = phi ptr [ %698, %694 ], [ %685, %691 ]
  %697 = phi i32 [ %700, %694 ], [ 0, %691 ]
  %698 = getelementptr inbounds %struct.regexp_paren_pair, ptr %696, i64 1
  %699 = add nsw i32 %695, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %698, i8 -1, i64 16, i1 false)
  %700 = add i32 %697, 1
  %701 = icmp eq i32 %700, %692
  br i1 %701, label %702, label %694, !llvm.loop !239

702:                                              ; preds = %694, %691
  %703 = phi i32 [ %689, %691 ], [ %699, %694 ]
  %704 = phi ptr [ %685, %691 ], [ %698, %694 ]
  %705 = icmp ult i32 %689, 8
  br i1 %705, label %720, label %706

706:                                              ; preds = %702, %706
  %707 = phi i32 [ %717, %706 ], [ %703, %702 ]
  %708 = phi ptr [ %716, %706 ], [ %704, %702 ]
  %709 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %709, i8 -1, i64 16, i1 false)
  %710 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %710, i8 -1, i64 16, i1 false)
  %711 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %711, i8 -1, i64 16, i1 false)
  %712 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %712, i8 -1, i64 16, i1 false)
  %713 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %713, i8 -1, i64 16, i1 false)
  %714 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %714, i8 -1, i64 16, i1 false)
  %715 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %715, i8 -1, i64 16, i1 false)
  %716 = getelementptr inbounds %struct.regexp_paren_pair, ptr %708, i64 8
  %717 = add nsw i32 %707, -8
  %718 = add i32 %707, -9
  %719 = icmp ult i32 %718, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %716, i8 -1, i64 16, i1 false)
  br i1 %719, label %706, label %720, !llvm.loop !72

720:                                              ; preds = %702, %706, %674
  %721 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %722 = getelementptr inbounds %struct.regexp_internal, ptr %679, i64 1
  %723 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef nonnull %671, ptr noundef nonnull %722)
  %724 = icmp eq i64 %723, -1
  br i1 %724, label %725, label %732

725:                                              ; preds = %720
  %726 = load ptr, ptr %667, align 8, !tbaa !63
  %727 = icmp eq ptr %726, null
  %728 = select i1 %727, ptr %671, ptr %726
  %729 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %730 = icmp sgt i32 %729, %721
  br i1 %730, label %731, label %734

731:                                              ; preds = %725
  call void @Perl_leave_scope(i32 noundef %721) #12
  br label %734

732:                                              ; preds = %720
  %733 = getelementptr inbounds %struct.regexp, ptr %677, i64 0, i32 17
  br label %1325

734:                                              ; preds = %731, %725
  %735 = load i8, ptr %728, align 1, !tbaa !5
  %736 = zext i8 %735 to i64
  %737 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %736
  %738 = load i8, ptr %737, align 1, !tbaa !5
  %739 = zext i8 %738 to i64
  %740 = getelementptr inbounds i8, ptr %728, i64 %739
  %741 = icmp ult ptr %740, %2
  br i1 %741, label %742, label %751

742:                                              ; preds = %734, %746
  %743 = phi ptr [ %749, %746 ], [ %740, %734 ]
  %744 = load i8, ptr %743, align 1, !tbaa !5
  %745 = icmp eq i8 %744, %663
  br i1 %745, label %746, label %751

746:                                              ; preds = %742
  %747 = load i8, ptr %669, align 1, !tbaa !5
  %748 = zext i8 %747 to i64
  %749 = getelementptr inbounds i8, ptr %743, i64 %748
  %750 = icmp ult ptr %749, %2
  br i1 %750, label %742, label %751, !llvm.loop !240

751:                                              ; preds = %746, %742, %734, %670
  %752 = phi ptr [ %671, %670 ], [ %740, %734 ], [ %749, %746 ], [ %743, %742 ]
  %753 = getelementptr inbounds i8, ptr %752, i64 1
  %754 = icmp ult ptr %753, %2
  br i1 %754, label %670, label %1356, !llvm.loop !241

755:                                              ; preds = %649
  %756 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %756, label %757, label %1356

757:                                              ; preds = %755
  %758 = load ptr, ptr %216, align 8, !tbaa !8
  %759 = getelementptr inbounds %struct.reg_substr_data, ptr %758, i64 0, i32 1, i64 0, i32 2
  %760 = load ptr, ptr %759, align 8, !tbaa !34
  br label %761

761:                                              ; preds = %757, %650
  %762 = phi ptr [ %760, %757 ], [ %637, %650 ]
  %763 = getelementptr inbounds %struct.sv, ptr %762, i64 0, i32 3
  %764 = load ptr, ptr %763, align 8, !tbaa !5
  %765 = load i8, ptr %764, align 1, !tbaa !5
  %766 = load ptr, ptr %9, align 8, !tbaa !35
  %767 = icmp ult ptr %766, %2
  br i1 %767, label %768, label %1356

768:                                              ; preds = %761
  %769 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  br label %770

770:                                              ; preds = %768, %842
  %771 = phi ptr [ %766, %768 ], [ %844, %842 ]
  %772 = load i8, ptr %771, align 1, !tbaa !5
  %773 = icmp eq i8 %772, %765
  br i1 %773, label %774, label %842

774:                                              ; preds = %770
  %775 = load ptr, ptr %10, align 8, !tbaa !62
  %776 = getelementptr i8, ptr %775, i64 16
  %777 = load ptr, ptr %776, align 8, !tbaa !5
  %778 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 14
  %779 = load ptr, ptr %778, align 8, !tbaa !20
  store ptr null, ptr %769, align 8, !tbaa !63
  %780 = load ptr, ptr %248, align 8, !tbaa !26
  %781 = ptrtoint ptr %771 to i64
  %782 = ptrtoint ptr %780 to i64
  %783 = sub i64 %781, %782
  %784 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 17
  %785 = load ptr, ptr %784, align 8, !tbaa !64
  store i64 %783, ptr %785, align 8, !tbaa !65
  %786 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 15
  store i32 0, ptr %786, align 8, !tbaa !67
  %787 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 16
  store i32 0, ptr %787, align 4, !tbaa !68
  %788 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 12
  %789 = load i32, ptr %788, align 8, !tbaa !69
  %790 = icmp sgt i32 %789, 0
  br i1 %790, label %791, label %820

791:                                              ; preds = %774
  %792 = and i32 %789, 7
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %802, label %794

794:                                              ; preds = %791, %794
  %795 = phi i32 [ %799, %794 ], [ %789, %791 ]
  %796 = phi ptr [ %798, %794 ], [ %785, %791 ]
  %797 = phi i32 [ %800, %794 ], [ 0, %791 ]
  %798 = getelementptr inbounds %struct.regexp_paren_pair, ptr %796, i64 1
  %799 = add nsw i32 %795, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %798, i8 -1, i64 16, i1 false)
  %800 = add i32 %797, 1
  %801 = icmp eq i32 %800, %792
  br i1 %801, label %802, label %794, !llvm.loop !242

802:                                              ; preds = %794, %791
  %803 = phi i32 [ %789, %791 ], [ %799, %794 ]
  %804 = phi ptr [ %785, %791 ], [ %798, %794 ]
  %805 = icmp ult i32 %789, 8
  br i1 %805, label %820, label %806

806:                                              ; preds = %802, %806
  %807 = phi i32 [ %817, %806 ], [ %803, %802 ]
  %808 = phi ptr [ %816, %806 ], [ %804, %802 ]
  %809 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %809, i8 -1, i64 16, i1 false)
  %810 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %810, i8 -1, i64 16, i1 false)
  %811 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %811, i8 -1, i64 16, i1 false)
  %812 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %812, i8 -1, i64 16, i1 false)
  %813 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %813, i8 -1, i64 16, i1 false)
  %814 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %814, i8 -1, i64 16, i1 false)
  %815 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %815, i8 -1, i64 16, i1 false)
  %816 = getelementptr inbounds %struct.regexp_paren_pair, ptr %808, i64 8
  %817 = add nsw i32 %807, -8
  %818 = add i32 %807, -9
  %819 = icmp ult i32 %818, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %816, i8 -1, i64 16, i1 false)
  br i1 %819, label %806, label %820, !llvm.loop !72

820:                                              ; preds = %802, %806, %774
  %821 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %822 = getelementptr inbounds %struct.regexp_internal, ptr %779, i64 1
  %823 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef nonnull %771, ptr noundef nonnull %822)
  %824 = icmp eq i64 %823, -1
  br i1 %824, label %825, label %833

825:                                              ; preds = %820
  %826 = load ptr, ptr %769, align 8, !tbaa !63
  %827 = icmp eq ptr %826, null
  %828 = select i1 %827, ptr %771, ptr %826
  %829 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %830 = icmp sgt i32 %829, %821
  br i1 %830, label %832, label %831

831:                                              ; preds = %832, %825
  br label %835

832:                                              ; preds = %825
  call void @Perl_leave_scope(i32 noundef %821) #12
  br label %831

833:                                              ; preds = %820
  %834 = getelementptr inbounds %struct.regexp, ptr %777, i64 0, i32 17
  br label %1325

835:                                              ; preds = %831, %839
  %836 = phi ptr [ %837, %839 ], [ %828, %831 ]
  %837 = getelementptr inbounds i8, ptr %836, i64 1
  %838 = icmp ult ptr %837, %2
  br i1 %838, label %839, label %842

839:                                              ; preds = %835
  %840 = load i8, ptr %837, align 1, !tbaa !5
  %841 = icmp eq i8 %840, %765
  br i1 %841, label %835, label %842, !llvm.loop !243

842:                                              ; preds = %839, %835, %770
  %843 = phi ptr [ %771, %770 ], [ %837, %835 ], [ %837, %839 ]
  %844 = getelementptr inbounds i8, ptr %843, i64 1
  %845 = icmp ult ptr %844, %2
  br i1 %845, label %770, label %1356, !llvm.loop !244

846:                                              ; preds = %639
  br i1 %642, label %847, label %863

847:                                              ; preds = %846
  %848 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 2
  %849 = load ptr, ptr %848, align 8, !tbaa !34
  %850 = icmp eq ptr %849, null
  br i1 %850, label %851, label %855

851:                                              ; preds = %847
  %852 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %853 = load ptr, ptr %852, align 8, !tbaa !33
  %854 = icmp eq ptr %853, null
  br i1 %854, label %1182, label %855

855:                                              ; preds = %851, %847
  %856 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 1
  %857 = load i64, ptr %856, align 8, !tbaa !37
  %858 = load ptr, ptr %9, align 8, !tbaa !35
  %859 = ptrtoint ptr %858 to i64
  %860 = sub i64 %213, %859
  %861 = icmp slt i64 %857, %860
  br i1 %861, label %885, label %1178

862:                                              ; preds = %646
  br i1 %25, label %864, label %877

863:                                              ; preds = %846
  br i1 %25, label %870, label %873

864:                                              ; preds = %862
  %865 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 0, i32 3
  %866 = load ptr, ptr %865, align 8, !tbaa !33
  %867 = icmp eq ptr %866, null
  br i1 %867, label %868, label %870

868:                                              ; preds = %864
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %869 = load ptr, ptr %216, align 8, !tbaa !8
  br label %870

870:                                              ; preds = %863, %868, %864
  %871 = phi ptr [ %869, %868 ], [ %635, %864 ], [ %635, %863 ]
  %872 = getelementptr inbounds %struct.reg_substr_data, ptr %871, i64 0, i32 1, i64 0, i32 3
  br label %880

873:                                              ; preds = %863
  %874 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %874, label %875, label %1356

875:                                              ; preds = %873
  %876 = load ptr, ptr %216, align 8, !tbaa !8
  br label %877

877:                                              ; preds = %862, %875
  %878 = phi ptr [ %876, %875 ], [ %635, %862 ]
  %879 = getelementptr inbounds %struct.reg_substr_data, ptr %878, i64 0, i32 1, i64 0, i32 2
  br label %880

880:                                              ; preds = %877, %870
  %881 = phi ptr [ %871, %870 ], [ %878, %877 ]
  %882 = phi ptr [ %872, %870 ], [ %879, %877 ]
  %883 = getelementptr inbounds %struct.reg_substr_data, ptr %881, i64 0, i32 1
  %884 = load i64, ptr %883, align 8, !tbaa !13
  br label %913

885:                                              ; preds = %855
  br i1 %25, label %886, label %895

886:                                              ; preds = %885
  %887 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %888 = load ptr, ptr %887, align 8, !tbaa !33
  %889 = icmp eq ptr %888, null
  br i1 %889, label %890, label %892

890:                                              ; preds = %886
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %891 = load ptr, ptr %216, align 8, !tbaa !8
  br label %892

892:                                              ; preds = %890, %886
  %893 = phi ptr [ %891, %890 ], [ %635, %886 ]
  %894 = getelementptr inbounds %struct.reg_substr_data, ptr %893, i64 0, i32 1, i64 1, i32 3
  br label %906

895:                                              ; preds = %885
  %896 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 2
  %897 = load ptr, ptr %896, align 8, !tbaa !34
  %898 = icmp eq ptr %897, null
  br i1 %898, label %899, label %903

899:                                              ; preds = %895
  %900 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %900, label %901, label %1356

901:                                              ; preds = %899
  %902 = load ptr, ptr %216, align 8, !tbaa !8
  br label %903

903:                                              ; preds = %901, %895
  %904 = phi ptr [ %902, %901 ], [ %635, %895 ]
  %905 = getelementptr inbounds %struct.reg_substr_data, ptr %904, i64 0, i32 1, i64 1, i32 2
  br label %906

906:                                              ; preds = %903, %892
  %907 = phi ptr [ %893, %892 ], [ %904, %903 ]
  %908 = phi ptr [ %894, %892 ], [ %905, %903 ]
  %909 = getelementptr inbounds %struct.reg_substr_data, ptr %907, i64 0, i32 1, i64 1
  %910 = getelementptr inbounds %struct.reg_substr_data, ptr %907, i64 0, i32 1, i64 1, i32 1
  %911 = load i64, ptr %910, align 8, !tbaa !37
  %912 = load i64, ptr %909, align 8, !tbaa !13
  br label %913

913:                                              ; preds = %906, %880
  %914 = phi ptr [ %882, %880 ], [ %908, %906 ]
  %915 = phi i64 [ %884, %880 ], [ %911, %906 ]
  %916 = phi i64 [ %884, %880 ], [ %912, %906 ]
  %917 = sub i64 0, %916
  %918 = load ptr, ptr %914, align 8, !tbaa !35
  %919 = icmp slt i64 %916, 0
  br i1 %919, label %955, label %920

920:                                              ; preds = %913
  %921 = load i8, ptr %240, align 2, !tbaa !22, !range !42, !noundef !43
  %922 = icmp eq i8 %921, 0
  br i1 %922, label %939, label %923

923:                                              ; preds = %920
  br i1 %25, label %924, label %926

924:                                              ; preds = %923
  %925 = tail call i64 @Perl_sv_len_utf8(ptr noundef %918) #12
  br label %930

926:                                              ; preds = %923
  %927 = load ptr, ptr %918, align 8, !tbaa !38
  %928 = getelementptr inbounds %struct.xpv, ptr %927, i64 0, i32 2
  %929 = load i64, ptr %928, align 8, !tbaa !39
  br label %930

930:                                              ; preds = %926, %924
  %931 = phi i64 [ %925, %924 ], [ %929, %926 ]
  %932 = getelementptr inbounds %struct.sv, ptr %918, i64 0, i32 2
  %933 = load i32, ptr %932, align 4, !tbaa !15
  %934 = icmp ugt i32 %933, -1073741825
  %935 = zext i1 %934 to i64
  %936 = add i64 %931, %916
  %937 = sub i64 %935, %936
  %938 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef %937, ptr noundef %3)
  br label %955

939:                                              ; preds = %920
  br i1 %25, label %940, label %942

940:                                              ; preds = %939
  %941 = tail call i64 @Perl_sv_len_utf8(ptr noundef %918) #12
  br label %946

942:                                              ; preds = %939
  %943 = load ptr, ptr %918, align 8, !tbaa !38
  %944 = getelementptr inbounds %struct.xpv, ptr %943, i64 0, i32 2
  %945 = load i64, ptr %944, align 8, !tbaa !39
  br label %946

946:                                              ; preds = %942, %940
  %947 = phi i64 [ %941, %940 ], [ %945, %942 ]
  %948 = getelementptr inbounds %struct.sv, ptr %918, i64 0, i32 2
  %949 = load i32, ptr %948, align 4, !tbaa !15
  %950 = icmp ugt i32 %949, -1073741825
  %951 = zext i1 %950 to i64
  %952 = add i64 %947, %916
  %953 = sub i64 %951, %952
  %954 = getelementptr inbounds i8, ptr %2, i64 %953
  br label %955

955:                                              ; preds = %930, %946, %913
  %956 = phi ptr [ %2, %913 ], [ %938, %930 ], [ %954, %946 ]
  %957 = load ptr, ptr %9, align 8, !tbaa !35
  %958 = icmp ugt ptr %957, %3
  br i1 %958, label %959, label %966

959:                                              ; preds = %955
  %960 = load i8, ptr %240, align 2, !tbaa !22, !range !42, !noundef !43
  %961 = icmp eq i8 %960, 0
  br i1 %961, label %964, label %962

962:                                              ; preds = %959
  %963 = tail call fastcc ptr @S_reghop3(ptr noundef nonnull %957, i64 noundef -1, ptr noundef %3)
  br label %968

964:                                              ; preds = %959
  %965 = getelementptr inbounds i8, ptr %957, i64 -1
  br label %968

966:                                              ; preds = %955
  %967 = getelementptr inbounds i8, ptr %957, i64 -1
  br label %968

968:                                              ; preds = %966, %962, %964
  %969 = phi ptr [ %965, %964 ], [ %963, %962 ], [ %967, %966 ]
  %970 = icmp ugt ptr %957, %956
  br i1 %970, label %1356, label %971

971:                                              ; preds = %968
  %972 = sub nsw i64 0, %915
  %973 = icmp slt i64 %915, 1
  %974 = icmp slt i64 %916, 1
  %975 = getelementptr inbounds %struct.regmatch_info, ptr %10, i64 0, i32 6
  br label %976

976:                                              ; preds = %971, %1175
  %977 = phi ptr [ %957, %971 ], [ %1176, %1175 ]
  %978 = phi ptr [ %969, %971 ], [ %1030, %1175 ]
  %979 = load i8, ptr %240, align 2, !tbaa !22, !range !42, !noundef !43
  %980 = icmp eq i8 %979, 0
  br i1 %980, label %983, label %981

981:                                              ; preds = %976
  %982 = call fastcc ptr @S_reghop4(ptr noundef %977, i64 noundef %916, ptr noundef %3, ptr noundef %2)
  br label %985

983:                                              ; preds = %976
  %984 = getelementptr inbounds i8, ptr %977, i64 %916
  br label %985

985:                                              ; preds = %983, %981
  %986 = phi ptr [ %982, %981 ], [ %984, %983 ]
  %987 = call ptr @Perl_fbm_instr(ptr noundef %986, ptr noundef %2, ptr noundef %918, i32 noundef %212) #12
  store ptr %987, ptr %9, align 8, !tbaa !35
  %988 = icmp eq ptr %987, null
  br i1 %988, label %1356, label %989

989:                                              ; preds = %985
  %990 = load i8, ptr %240, align 2, !tbaa !22, !range !42, !noundef !43
  %991 = icmp eq i8 %990, 0
  br i1 %991, label %992, label %995

992:                                              ; preds = %989
  %993 = getelementptr inbounds i8, ptr %987, i64 %972
  %994 = icmp ugt ptr %993, %978
  br i1 %994, label %1004, label %1006

995:                                              ; preds = %989
  %996 = load ptr, ptr %251, align 8
  %997 = load ptr, ptr %248, align 8
  %998 = select i1 %973, ptr %996, ptr %997
  %999 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %972, ptr noundef %998)
  %1000 = icmp ugt ptr %999, %978
  br i1 %1000, label %1001, label %1009

1001:                                             ; preds = %995
  %1002 = select i1 %974, ptr %996, ptr %997
  %1003 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %917, ptr noundef %1002)
  br label %1028

1004:                                             ; preds = %992
  %1005 = getelementptr inbounds i8, ptr %987, i64 %917
  br label %1028

1006:                                             ; preds = %992
  %1007 = getelementptr inbounds i8, ptr %978, i64 1
  %1008 = getelementptr inbounds i8, ptr %987, i64 %917
  br label %1028

1009:                                             ; preds = %995
  %1010 = icmp ult ptr %978, %997
  br i1 %1010, label %1019, label %1011

1011:                                             ; preds = %1009
  %1012 = icmp ult ptr %978, %996
  br i1 %1012, label %1013, label %1023

1013:                                             ; preds = %1011
  %1014 = load i8, ptr %978, align 1, !tbaa !5
  %1015 = zext i8 %1014 to i64
  %1016 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1015
  %1017 = load i8, ptr %1016, align 1, !tbaa !5
  %1018 = zext i8 %1017 to i64
  br label %1019

1019:                                             ; preds = %1009, %1013
  %1020 = phi i64 [ %1018, %1013 ], [ 1, %1009 ]
  %1021 = getelementptr inbounds i8, ptr %978, i64 %1020
  %1022 = load ptr, ptr %251, align 8
  br label %1023

1023:                                             ; preds = %1019, %1011
  %1024 = phi ptr [ %1022, %1019 ], [ %996, %1011 ]
  %1025 = phi ptr [ %1021, %1019 ], [ %978, %1011 ]
  %1026 = select i1 %974, ptr %1024, ptr %997
  %1027 = call fastcc ptr @S_reghop3(ptr noundef nonnull %987, i64 noundef %917, ptr noundef %1026)
  br label %1028

1028:                                             ; preds = %1023, %1006, %1001, %1004
  %1029 = phi ptr [ %999, %1001 ], [ %993, %1004 ], [ %1007, %1006 ], [ %1025, %1023 ]
  %1030 = phi ptr [ %1003, %1001 ], [ %1005, %1004 ], [ %1008, %1006 ], [ %1027, %1023 ]
  store ptr %1029, ptr %9, align 8, !tbaa !35
  %1031 = icmp ugt ptr %1029, %1030
  br i1 %25, label %1033, label %1032

1032:                                             ; preds = %1028
  br i1 %1031, label %1173, label %1107

1033:                                             ; preds = %1028
  br i1 %1031, label %1171, label %1034

1034:                                             ; preds = %1033, %1099
  %1035 = phi ptr [ %1105, %1099 ], [ %1029, %1033 ]
  %1036 = load ptr, ptr %10, align 8, !tbaa !62
  %1037 = getelementptr i8, ptr %1036, i64 16
  %1038 = load ptr, ptr %1037, align 8, !tbaa !5
  %1039 = getelementptr inbounds %struct.regexp, ptr %1038, i64 0, i32 14
  %1040 = load ptr, ptr %1039, align 8, !tbaa !20
  store ptr null, ptr %975, align 8, !tbaa !63
  %1041 = load ptr, ptr %248, align 8, !tbaa !26
  %1042 = ptrtoint ptr %1035 to i64
  %1043 = ptrtoint ptr %1041 to i64
  %1044 = sub i64 %1042, %1043
  %1045 = getelementptr inbounds %struct.regexp, ptr %1038, i64 0, i32 17
  %1046 = load ptr, ptr %1045, align 8, !tbaa !64
  store i64 %1044, ptr %1046, align 8, !tbaa !65
  %1047 = getelementptr inbounds %struct.regexp, ptr %1038, i64 0, i32 15
  store i32 0, ptr %1047, align 8, !tbaa !67
  %1048 = getelementptr inbounds %struct.regexp, ptr %1038, i64 0, i32 16
  store i32 0, ptr %1048, align 4, !tbaa !68
  %1049 = getelementptr inbounds %struct.regexp, ptr %1038, i64 0, i32 12
  %1050 = load i32, ptr %1049, align 8, !tbaa !69
  %1051 = icmp sgt i32 %1050, 0
  br i1 %1051, label %1052, label %1081

1052:                                             ; preds = %1034
  %1053 = and i32 %1050, 7
  %1054 = icmp eq i32 %1053, 0
  br i1 %1054, label %1063, label %1055

1055:                                             ; preds = %1052, %1055
  %1056 = phi i32 [ %1060, %1055 ], [ %1050, %1052 ]
  %1057 = phi ptr [ %1059, %1055 ], [ %1046, %1052 ]
  %1058 = phi i32 [ %1061, %1055 ], [ 0, %1052 ]
  %1059 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1057, i64 1
  %1060 = add nsw i32 %1056, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1059, i8 -1, i64 16, i1 false)
  %1061 = add i32 %1058, 1
  %1062 = icmp eq i32 %1061, %1053
  br i1 %1062, label %1063, label %1055, !llvm.loop !245

1063:                                             ; preds = %1055, %1052
  %1064 = phi i32 [ %1050, %1052 ], [ %1060, %1055 ]
  %1065 = phi ptr [ %1046, %1052 ], [ %1059, %1055 ]
  %1066 = icmp ult i32 %1050, 8
  br i1 %1066, label %1081, label %1067

1067:                                             ; preds = %1063, %1067
  %1068 = phi i32 [ %1078, %1067 ], [ %1064, %1063 ]
  %1069 = phi ptr [ %1077, %1067 ], [ %1065, %1063 ]
  %1070 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1070, i8 -1, i64 16, i1 false)
  %1071 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1071, i8 -1, i64 16, i1 false)
  %1072 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1072, i8 -1, i64 16, i1 false)
  %1073 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1073, i8 -1, i64 16, i1 false)
  %1074 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1074, i8 -1, i64 16, i1 false)
  %1075 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1075, i8 -1, i64 16, i1 false)
  %1076 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1076, i8 -1, i64 16, i1 false)
  %1077 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1069, i64 8
  %1078 = add nsw i32 %1068, -8
  %1079 = add i32 %1068, -9
  %1080 = icmp ult i32 %1079, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1077, i8 -1, i64 16, i1 false)
  br i1 %1080, label %1067, label %1081, !llvm.loop !72

1081:                                             ; preds = %1063, %1067, %1034
  %1082 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1083 = getelementptr inbounds %struct.regexp_internal, ptr %1040, i64 1
  %1084 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %1035, ptr noundef nonnull %1083)
  %1085 = icmp eq i64 %1084, -1
  br i1 %1085, label %1086, label %1093

1086:                                             ; preds = %1081
  %1087 = load ptr, ptr %975, align 8, !tbaa !63
  %1088 = icmp eq ptr %1087, null
  %1089 = select i1 %1088, ptr %1035, ptr %1087
  %1090 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1091 = icmp sgt i32 %1090, %1082
  br i1 %1091, label %1092, label %1095

1092:                                             ; preds = %1086
  call void @Perl_leave_scope(i32 noundef %1082) #12
  br label %1095

1093:                                             ; preds = %1081
  %1094 = getelementptr inbounds %struct.regexp, ptr %1038, i64 0, i32 17
  br label %1325

1095:                                             ; preds = %1092, %1086
  %1096 = icmp ult ptr %1089, %1030
  br i1 %1096, label %1099, label %1097

1097:                                             ; preds = %1095
  %1098 = getelementptr inbounds i8, ptr %1089, i64 1
  store ptr %1098, ptr %9, align 8, !tbaa !35
  br label %1175

1099:                                             ; preds = %1095
  %1100 = load i8, ptr %1089, align 1, !tbaa !5
  %1101 = zext i8 %1100 to i64
  %1102 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1101
  %1103 = load i8, ptr %1102, align 1, !tbaa !5
  %1104 = zext i8 %1103 to i64
  %1105 = getelementptr inbounds i8, ptr %1089, i64 %1104
  %1106 = icmp ugt ptr %1105, %1030
  br i1 %1106, label %1171, label %1034, !llvm.loop !246

1107:                                             ; preds = %1032, %1168
  %1108 = phi ptr [ %1169, %1168 ], [ %1029, %1032 ]
  %1109 = load ptr, ptr %10, align 8, !tbaa !62
  %1110 = getelementptr i8, ptr %1109, i64 16
  %1111 = load ptr, ptr %1110, align 8, !tbaa !5
  %1112 = getelementptr inbounds %struct.regexp, ptr %1111, i64 0, i32 14
  %1113 = load ptr, ptr %1112, align 8, !tbaa !20
  store ptr null, ptr %975, align 8, !tbaa !63
  %1114 = load ptr, ptr %248, align 8, !tbaa !26
  %1115 = ptrtoint ptr %1108 to i64
  %1116 = ptrtoint ptr %1114 to i64
  %1117 = sub i64 %1115, %1116
  %1118 = getelementptr inbounds %struct.regexp, ptr %1111, i64 0, i32 17
  %1119 = load ptr, ptr %1118, align 8, !tbaa !64
  store i64 %1117, ptr %1119, align 8, !tbaa !65
  %1120 = getelementptr inbounds %struct.regexp, ptr %1111, i64 0, i32 15
  store i32 0, ptr %1120, align 8, !tbaa !67
  %1121 = getelementptr inbounds %struct.regexp, ptr %1111, i64 0, i32 16
  store i32 0, ptr %1121, align 4, !tbaa !68
  %1122 = getelementptr inbounds %struct.regexp, ptr %1111, i64 0, i32 12
  %1123 = load i32, ptr %1122, align 8, !tbaa !69
  %1124 = icmp sgt i32 %1123, 0
  br i1 %1124, label %1125, label %1154

1125:                                             ; preds = %1107
  %1126 = and i32 %1123, 7
  %1127 = icmp eq i32 %1126, 0
  br i1 %1127, label %1136, label %1128

1128:                                             ; preds = %1125, %1128
  %1129 = phi i32 [ %1133, %1128 ], [ %1123, %1125 ]
  %1130 = phi ptr [ %1132, %1128 ], [ %1119, %1125 ]
  %1131 = phi i32 [ %1134, %1128 ], [ 0, %1125 ]
  %1132 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1130, i64 1
  %1133 = add nsw i32 %1129, -1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1132, i8 -1, i64 16, i1 false)
  %1134 = add i32 %1131, 1
  %1135 = icmp eq i32 %1134, %1126
  br i1 %1135, label %1136, label %1128, !llvm.loop !247

1136:                                             ; preds = %1128, %1125
  %1137 = phi i32 [ %1123, %1125 ], [ %1133, %1128 ]
  %1138 = phi ptr [ %1119, %1125 ], [ %1132, %1128 ]
  %1139 = icmp ult i32 %1123, 8
  br i1 %1139, label %1154, label %1140

1140:                                             ; preds = %1136, %1140
  %1141 = phi i32 [ %1151, %1140 ], [ %1137, %1136 ]
  %1142 = phi ptr [ %1150, %1140 ], [ %1138, %1136 ]
  %1143 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1143, i8 -1, i64 16, i1 false)
  %1144 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1144, i8 -1, i64 16, i1 false)
  %1145 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1145, i8 -1, i64 16, i1 false)
  %1146 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1146, i8 -1, i64 16, i1 false)
  %1147 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1147, i8 -1, i64 16, i1 false)
  %1148 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1148, i8 -1, i64 16, i1 false)
  %1149 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 7
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1149, i8 -1, i64 16, i1 false)
  %1150 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1142, i64 8
  %1151 = add nsw i32 %1141, -8
  %1152 = add i32 %1141, -9
  %1153 = icmp ult i32 %1152, -2
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1150, i8 -1, i64 16, i1 false)
  br i1 %1153, label %1140, label %1154, !llvm.loop !72

1154:                                             ; preds = %1136, %1140, %1107
  %1155 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1156 = getelementptr inbounds %struct.regexp_internal, ptr %1113, i64 1
  %1157 = call fastcc i64 @S_regmatch(ptr noundef nonnull %10, ptr noundef %1108, ptr noundef nonnull %1156)
  %1158 = icmp eq i64 %1157, -1
  br i1 %1158, label %1159, label %1166

1159:                                             ; preds = %1154
  %1160 = load ptr, ptr %975, align 8, !tbaa !63
  %1161 = icmp eq ptr %1160, null
  %1162 = select i1 %1161, ptr %1108, ptr %1160
  %1163 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1164 = icmp sgt i32 %1163, %1155
  br i1 %1164, label %1165, label %1168

1165:                                             ; preds = %1159
  call void @Perl_leave_scope(i32 noundef %1155) #12
  br label %1168

1166:                                             ; preds = %1154
  %1167 = getelementptr inbounds %struct.regexp, ptr %1111, i64 0, i32 17
  br label %1325

1168:                                             ; preds = %1165, %1159
  %1169 = getelementptr inbounds i8, ptr %1162, i64 1
  %1170 = icmp ugt ptr %1169, %1030
  br i1 %1170, label %1173, label %1107, !llvm.loop !248

1171:                                             ; preds = %1099, %1033
  %1172 = phi ptr [ %1029, %1033 ], [ %1105, %1099 ]
  store ptr %1172, ptr %9, align 8, !tbaa !35
  br label %1175

1173:                                             ; preds = %1168, %1032
  %1174 = phi ptr [ %1029, %1032 ], [ %1169, %1168 ]
  store ptr %1174, ptr %9, align 8, !tbaa !35
  br label %1175

1175:                                             ; preds = %1173, %1171, %1097
  %1176 = phi ptr [ %1174, %1173 ], [ %1172, %1171 ], [ %1098, %1097 ]
  %1177 = icmp ugt ptr %1176, %956
  br i1 %1177, label %1356, label %976, !llvm.loop !249

1178:                                             ; preds = %855
  %1179 = getelementptr inbounds %struct.regexp_internal, ptr %28, i64 0, i32 2
  %1180 = load ptr, ptr %1179, align 8, !tbaa !54
  %1181 = icmp eq ptr %1180, null
  br i1 %1181, label %1215, label %1186

1182:                                             ; preds = %851
  %1183 = getelementptr inbounds %struct.regexp_internal, ptr %28, i64 0, i32 2
  %1184 = load ptr, ptr %1183, align 8, !tbaa !54
  %1185 = icmp eq ptr %1184, null
  br i1 %1185, label %1294, label %1186

1186:                                             ; preds = %1182, %1178
  %1187 = phi ptr [ %1184, %1182 ], [ %1180, %1178 ]
  %1188 = icmp eq i64 %151, 0
  br i1 %1188, label %1210, label %1189

1189:                                             ; preds = %1186
  %1190 = getelementptr inbounds %struct.regnode, ptr %1187, i64 0, i32 1
  %1191 = load i8, ptr %1190, align 1, !tbaa !56
  %1192 = freeze i8 %1191
  %1193 = icmp eq i8 %1192, 18
  br i1 %1193, label %1210, label %1194

1194:                                             ; preds = %1189
  %1195 = zext i8 %1192 to i64
  %1196 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %1195
  %1197 = load i8, ptr %1196, align 1, !tbaa !5
  switch i8 %1197, label %1198 [
    i8 72, label %1210
    i8 31, label %1210
  ]

1198:                                             ; preds = %1194
  %1199 = load i8, ptr %240, align 2, !tbaa !22, !range !42, !noundef !43
  %1200 = icmp eq i8 %1199, 0
  %1201 = sub nsw i64 1, %151
  br i1 %1200, label %1208, label %1202

1202:                                             ; preds = %1198
  %1203 = icmp slt i64 %151, 2
  %1204 = load ptr, ptr %251, align 8
  %1205 = load ptr, ptr %248, align 8
  %1206 = select i1 %1203, ptr %1204, ptr %1205
  %1207 = tail call fastcc ptr @S_reghop3(ptr noundef %2, i64 noundef %1201, ptr noundef %1206)
  br label %1210

1208:                                             ; preds = %1198
  %1209 = getelementptr inbounds i8, ptr %2, i64 %1201
  br label %1210

1210:                                             ; preds = %1194, %1194, %1189, %1208, %1202, %1186
  %1211 = phi ptr [ %2, %1186 ], [ %2, %1194 ], [ %1207, %1202 ], [ %1209, %1208 ], [ %2, %1189 ], [ %2, %1194 ]
  %1212 = load ptr, ptr %9, align 8, !tbaa !35
  %1213 = call fastcc ptr @S_find_byclass(ptr noundef nonnull %13, ptr noundef nonnull %1187, ptr noundef %1212, ptr noundef %1211, ptr noundef nonnull %10)
  %1214 = icmp eq ptr %1213, null
  br i1 %1214, label %1356, label %1330

1215:                                             ; preds = %1178
  br i1 %850, label %1216, label %1221

1216:                                             ; preds = %1215
  %1217 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %1218 = load ptr, ptr %1217, align 8, !tbaa !33
  %1219 = icmp eq ptr %1218, null
  br i1 %1219, label %1294, label %1220

1220:                                             ; preds = %1216
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #12
  br i1 %25, label %1228, label %1231

1221:                                             ; preds = %1215
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #12
  br i1 %25, label %1222, label %1235

1222:                                             ; preds = %1221
  %1223 = getelementptr inbounds %struct.reg_substr_data, ptr %635, i64 0, i32 1, i64 1, i32 3
  %1224 = load ptr, ptr %1223, align 8, !tbaa !33
  %1225 = icmp eq ptr %1224, null
  br i1 %1225, label %1226, label %1228

1226:                                             ; preds = %1222
  tail call fastcc void @S_to_utf8_substr(ptr noundef nonnull %13)
  %1227 = load ptr, ptr %216, align 8, !tbaa !8
  br label %1228

1228:                                             ; preds = %1220, %1226, %1222
  %1229 = phi ptr [ %1227, %1226 ], [ %635, %1222 ], [ %635, %1220 ]
  %1230 = getelementptr inbounds %struct.reg_substr_data, ptr %1229, i64 0, i32 1, i64 1, i32 3
  br label %1238

1231:                                             ; preds = %1220
  %1232 = tail call fastcc zeroext i1 @S_to_byte_substr(ptr noundef nonnull %13)
  br i1 %1232, label %1233, label %1285

1233:                                             ; preds = %1231
  %1234 = load ptr, ptr %216, align 8, !tbaa !8
  br label %1235

1235:                                             ; preds = %1233, %1221
  %1236 = phi ptr [ %1234, %1233 ], [ %635, %1221 ]
  %1237 = getelementptr inbounds %struct.reg_substr_data, ptr %1236, i64 0, i32 1, i64 1, i32 2
  br label %1238

1238:                                             ; preds = %1235, %1228
  %1239 = phi ptr [ %1230, %1228 ], [ %1237, %1235 ]
  %1240 = load ptr, ptr %1239, align 8, !tbaa !35
  %1241 = getelementptr inbounds %struct.sv, ptr %1240, i64 0, i32 2
  %1242 = load i32, ptr %1241, align 4, !tbaa !15
  %1243 = and i32 %1242, 2098176
  %1244 = icmp eq i32 %1243, 1024
  br i1 %1244, label %1245, label %1251

1245:                                             ; preds = %1238
  %1246 = load ptr, ptr %1240, align 8, !tbaa !38
  %1247 = getelementptr inbounds %struct.xpv, ptr %1246, i64 0, i32 2
  %1248 = load i64, ptr %1247, align 8, !tbaa !39
  store i64 %1248, ptr %11, align 8, !tbaa !169
  %1249 = getelementptr inbounds %struct.sv, ptr %1240, i64 0, i32 3
  %1250 = load ptr, ptr %1249, align 8, !tbaa !5
  br label %1255

1251:                                             ; preds = %1238
  %1252 = call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %1240, ptr noundef nonnull %11, i32 noundef 34) #12
  %1253 = load i32, ptr %1241, align 4, !tbaa !15
  %1254 = load i64, ptr %11, align 8, !tbaa !169
  br label %1255

1255:                                             ; preds = %1251, %1245
  %1256 = phi i64 [ %1248, %1245 ], [ %1254, %1251 ]
  %1257 = phi i32 [ %1242, %1245 ], [ %1253, %1251 ]
  %1258 = phi ptr [ %1250, %1245 ], [ %1252, %1251 ]
  %1259 = icmp ugt i32 %1257, -1073741825
  br i1 %1259, label %1260, label %1276

1260:                                             ; preds = %1255
  %1261 = sub i64 0, %1256
  %1262 = getelementptr inbounds i8, ptr %2, i64 %1261
  %1263 = getelementptr inbounds i8, ptr %1262, i64 1
  %1264 = icmp ult ptr %1263, %3
  br i1 %1264, label %1285, label %1265

1265:                                             ; preds = %1260
  %1266 = add i64 %1256, -1
  %1267 = call i32 @bcmp(ptr nonnull %1263, ptr %1258, i64 %1266)
  %1268 = icmp eq i32 %1267, 0
  br i1 %1268, label %1286, label %1269

1269:                                             ; preds = %1265
  %1270 = icmp ult ptr %1262, %3
  br i1 %1270, label %1285, label %1271

1271:                                             ; preds = %1269
  %1272 = icmp eq i32 %212, 0
  br i1 %1272, label %1273, label %1276

1273:                                             ; preds = %1271
  %1274 = call i32 @bcmp(ptr %1262, ptr %1258, i64 %1256)
  %1275 = icmp eq i32 %1274, 0
  br i1 %1275, label %1282, label %1285

1276:                                             ; preds = %1271, %1255
  %1277 = icmp eq i64 %1256, 0
  br i1 %1277, label %1282, label %1278

1278:                                             ; preds = %1276
  %1279 = load ptr, ptr %9, align 8, !tbaa !35
  %1280 = getelementptr inbounds i8, ptr %1258, i64 %1256
  %1281 = call ptr @Perl_rninstr(ptr noundef %1279, ptr noundef %2, ptr noundef %1258, ptr noundef nonnull %1280) #12
  br label %1282

1282:                                             ; preds = %1273, %1276, %1278
  %1283 = phi ptr [ %1281, %1278 ], [ %2, %1276 ], [ %1262, %1273 ]
  %1284 = icmp eq ptr %1283, null
  br i1 %1284, label %1285, label %1286

1285:                                             ; preds = %1231, %1282, %1260, %1269, %1273
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #12
  br label %1356

1286:                                             ; preds = %1265, %1282
  %1287 = phi ptr [ %1283, %1282 ], [ %1263, %1265 ]
  %1288 = ptrtoint ptr %1287 to i64
  %1289 = sub i64 %213, %1288
  %1290 = load ptr, ptr %216, align 8, !tbaa !8
  %1291 = getelementptr inbounds %struct.reg_substr_data, ptr %1290, i64 0, i32 1, i64 1
  %1292 = load i64, ptr %1291, align 8, !tbaa !13
  %1293 = add nsw i64 %1289, %1292
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #12
  br label %1294

1294:                                             ; preds = %1182, %1286, %1216
  %1295 = phi i64 [ %1293, %1286 ], [ 0, %1216 ], [ 0, %1182 ]
  %1296 = icmp ne i64 %151, 0
  %1297 = icmp slt i64 %1295, %151
  %1298 = select i1 %1296, i1 %1297, i1 false
  %1299 = add nsw i64 %151, -1
  %1300 = select i1 %1298, i64 %1299, i64 %1295
  %1301 = sub i64 0, %1300
  %1302 = getelementptr inbounds i8, ptr %2, i64 %1301
  br i1 %25, label %1303, label %1318

1303:                                             ; preds = %1294
  %1304 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !94
  %1305 = icmp eq i32 %1304, 0
  br i1 %1305, label %1306, label %1330

1306:                                             ; preds = %1303, %1309
  %1307 = load ptr, ptr %9, align 8, !tbaa !35
  %1308 = icmp ult ptr %1307, %1302
  br i1 %1308, label %1309, label %1356

1309:                                             ; preds = %1306
  %1310 = load i8, ptr %1307, align 1, !tbaa !5
  %1311 = zext i8 %1310 to i64
  %1312 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1311
  %1313 = load i8, ptr %1312, align 1, !tbaa !5
  %1314 = zext i8 %1313 to i64
  %1315 = getelementptr inbounds i8, ptr %1307, i64 %1314
  store ptr %1315, ptr %9, align 8, !tbaa !35
  %1316 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !94
  %1317 = icmp eq i32 %1316, 0
  br i1 %1317, label %1306, label %1330

1318:                                             ; preds = %1294, %1321
  %1319 = call fastcc i32 @S_regtry(ptr noundef nonnull %10, ptr noundef nonnull %9), !range !94
  %1320 = icmp eq i32 %1319, 0
  br i1 %1320, label %1321, label %1330

1321:                                             ; preds = %1318
  %1322 = load ptr, ptr %9, align 8, !tbaa !35
  %1323 = getelementptr inbounds i8, ptr %1322, i64 1
  store ptr %1323, ptr %9, align 8, !tbaa !35
  %1324 = icmp ult ptr %1322, %1302
  br i1 %1324, label %1318, label %1356, !llvm.loop !250

1325:                                             ; preds = %513, %616, %833, %732, %1166, %1093
  %1326 = phi ptr [ %1094, %1093 ], [ %1167, %1166 ], [ %733, %732 ], [ %834, %833 ], [ %617, %616 ], [ %477, %513 ]
  %1327 = phi i64 [ %1084, %1093 ], [ %1157, %1166 ], [ %723, %732 ], [ %823, %833 ], [ %614, %616 ], [ %516, %513 ]
  %1328 = load ptr, ptr %1326, align 8, !tbaa !64
  %1329 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1328, i64 0, i32 1
  store i64 %1327, ptr %1329, align 8, !tbaa !74
  br label %1330

1330:                                             ; preds = %1318, %1309, %1325, %1303, %1210, %631
  %1331 = and i32 %7, 128
  %1332 = icmp eq i32 %1331, 0
  br i1 %1332, label %1341, label %1333

1333:                                             ; preds = %1330
  %1334 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %1335 = load ptr, ptr %1334, align 8, !tbaa !64
  %1336 = load i64, ptr %1335, align 8, !tbaa !65
  %1337 = ptrtoint ptr %1 to i64
  %1338 = ptrtoint ptr %3 to i64
  %1339 = sub i64 %1337, %1338
  %1340 = icmp slt i64 %1336, %1339
  br i1 %1340, label %1356, label %1341

1341:                                             ; preds = %1333, %1330
  call void @Perl_safesysfree(ptr noundef %464) #12
  %1342 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1343 = icmp sgt i32 %1342, %157
  br i1 %1343, label %1344, label %1345

1344:                                             ; preds = %1341
  call void @Perl_leave_scope(i32 noundef %157) #12
  br label %1345

1345:                                             ; preds = %1344, %1341
  %1346 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 6
  %1347 = load ptr, ptr %1346, align 8, !tbaa !251
  %1348 = icmp eq ptr %1347, null
  br i1 %1348, label %1351, label %1349

1349:                                             ; preds = %1345
  %1350 = call i32 @Perl_hv_iterinit(ptr noundef nonnull %1347) #12
  br label %1351

1351:                                             ; preds = %1349, %1345
  %1352 = and i32 %7, 16
  %1353 = icmp eq i32 %1352, 0
  br i1 %1353, label %1354, label %1366

1354:                                             ; preds = %1351
  %1355 = load ptr, ptr %251, align 8, !tbaa !27
  call fastcc void @S_reg_set_capture_string(ptr noundef %0, ptr noundef %3, ptr noundef %1355, ptr noundef %5, i32 noundef %7)
  br label %1366

1356:                                             ; preds = %561, %549, %842, %751, %1175, %985, %1321, %1306, %540, %761, %659, %968, %899, %873, %755, %527, %1285, %172, %209, %631, %628, %1210, %1333
  %1357 = phi ptr [ null, %209 ], [ %464, %1333 ], [ %464, %631 ], [ %464, %628 ], [ %464, %1210 ], [ null, %172 ], [ %464, %1285 ], [ %464, %527 ], [ %464, %755 ], [ %464, %873 ], [ %464, %899 ], [ %464, %968 ], [ %464, %659 ], [ %464, %761 ], [ %464, %540 ], [ %464, %1306 ], [ %464, %1321 ], [ %464, %985 ], [ %464, %1175 ], [ %464, %751 ], [ %464, %842 ], [ %464, %549 ], [ %464, %561 ]
  %1358 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %1359 = icmp sgt i32 %1358, %157
  br i1 %1359, label %1360, label %1361

1360:                                             ; preds = %1356
  call void @Perl_leave_scope(i32 noundef %157) #12
  br label %1361

1361:                                             ; preds = %1360, %1356
  %1362 = icmp eq ptr %1357, null
  br i1 %1362, label %1366, label %1363

1363:                                             ; preds = %1361
  %1364 = getelementptr inbounds %struct.regexp, ptr %13, i64 0, i32 17
  %1365 = load ptr, ptr %1364, align 8, !tbaa !64
  call void @Perl_safesysfree(ptr noundef %1365) #12
  store ptr %1357, ptr %1364, align 8, !tbaa !64
  br label %1366

1366:                                             ; preds = %130, %1361, %1363, %1351, %1354, %202, %208, %165, %148
  %1367 = phi i32 [ 0, %148 ], [ 0, %165 ], [ 1, %208 ], [ 1, %202 ], [ 1, %1354 ], [ 1, %1351 ], [ 0, %1363 ], [ 0, %1361 ], [ 0, %130 ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %10) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  ret i32 %1367
}

declare void @Perl_croak(ptr noundef, ...) local_unnamed_addr #3

declare ptr @Perl_mg_find_mglob(ptr noundef) local_unnamed_addr #3

declare ptr @Perl_utf8_hop(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @S_reg_set_capture_string(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4) unnamed_addr #0 {
  %6 = getelementptr i8, ptr %0, i64 16
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = and i32 %4, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %130, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 2
  %12 = load i32, ptr %11, align 4, !tbaa !15
  %13 = and i32 %12, 268435456
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %10
  %16 = load ptr, ptr %3, align 8, !tbaa !38
  %17 = getelementptr inbounds %struct.xpv, ptr %16, i64 0, i32 3
  %18 = load i64, ptr %17, align 8, !tbaa !5
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %38, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = getelementptr inbounds i8, ptr %22, i64 %18
  %24 = getelementptr inbounds i8, ptr %23, i64 -1
  %25 = load i8, ptr %24, align 1, !tbaa !5
  %26 = icmp eq i8 %25, -1
  br i1 %26, label %96, label %38

27:                                               ; preds = %10
  %28 = and i32 %12, 251743232
  %29 = icmp eq i32 %28, 17408
  br i1 %29, label %30, label %96

30:                                               ; preds = %27
  %31 = load ptr, ptr %3, align 8, !tbaa !38
  %32 = getelementptr inbounds %struct.xpv, ptr %31, i64 0, i32 2
  %33 = load i64, ptr %32, align 8, !tbaa !39
  %34 = add i64 %33, 1
  %35 = getelementptr inbounds %struct.xpv, ptr %31, i64 0, i32 3
  %36 = load i64, ptr %35, align 8, !tbaa !5
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %96

38:                                               ; preds = %15, %30, %20
  %39 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 19
  %40 = load ptr, ptr %39, align 8, !tbaa !233
  %41 = icmp eq ptr %40, null
  br i1 %41, label %70, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.sv, ptr %40, i64 0, i32 2
  %44 = load i32, ptr %43, align 4, !tbaa !15
  %45 = and i32 %12, %44
  %46 = and i32 %45, 268451840
  %47 = icmp eq i32 %46, 268451840
  br i1 %47, label %48, label %65

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.sv, ptr %3, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !5
  %51 = getelementptr inbounds %struct.sv, ptr %40, i64 0, i32 3
  %52 = load ptr, ptr %51, align 8, !tbaa !5
  %53 = icmp eq ptr %50, %52
  br i1 %53, label %54, label %65

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 7
  %56 = load i32, ptr %55, align 8, !tbaa !19
  %57 = and i32 %56, 33554432
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %86, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  %61 = load ptr, ptr %60, align 8, !tbaa !230
  tail call void @Perl_safesysfree(ptr noundef %61) #12
  %62 = load i32, ptr %55, align 8, !tbaa !19
  %63 = and i32 %62, -33554433
  store i32 %63, ptr %55, align 8, !tbaa !19
  %64 = load ptr, ptr %39, align 8, !tbaa !233
  br label %86

65:                                               ; preds = %42, %48
  %66 = and i32 %44, 427886592
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  tail call void @Perl_sv_force_normal_flags(ptr noundef nonnull %40, i32 noundef 4) #12
  %69 = load ptr, ptr %6, align 8, !tbaa !5
  br label %70

70:                                               ; preds = %38, %65, %68
  %71 = phi ptr [ %7, %38 ], [ %7, %65 ], [ %69, %68 ]
  %72 = getelementptr inbounds %struct.regexp, ptr %71, i64 0, i32 7
  %73 = load i32, ptr %72, align 8, !tbaa !19
  %74 = and i32 %73, 33554432
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.regexp, ptr %71, i64 0, i32 18
  %78 = load ptr, ptr %77, align 8, !tbaa !230
  tail call void @Perl_safesysfree(ptr noundef %78) #12
  %79 = load ptr, ptr %6, align 8, !tbaa !5
  %80 = getelementptr inbounds %struct.regexp, ptr %79, i64 0, i32 7
  %81 = load i32, ptr %80, align 8, !tbaa !19
  %82 = and i32 %81, -33554433
  store i32 %82, ptr %80, align 8, !tbaa !19
  br label %83

83:                                               ; preds = %76, %70
  %84 = load ptr, ptr %39, align 8, !tbaa !233
  %85 = tail call ptr @Perl_sv_setsv_cow(ptr noundef %84, ptr noundef nonnull %3) #12
  store ptr %85, ptr %39, align 8, !tbaa !233
  br label %86

86:                                               ; preds = %54, %59, %83
  %87 = phi ptr [ %40, %54 ], [ %64, %59 ], [ %85, %83 ]
  %88 = getelementptr inbounds %struct.sv, ptr %87, i64 0, i32 3
  %89 = load ptr, ptr %88, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  store ptr %89, ptr %90, align 8, !tbaa !230
  %91 = ptrtoint ptr %2 to i64
  %92 = ptrtoint ptr %1 to i64
  %93 = sub i64 %91, %92
  %94 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  store i64 %93, ptr %94, align 8, !tbaa !235
  %95 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 21
  store i64 0, ptr %95, align 8
  br label %128

96:                                               ; preds = %30, %27, %20
  %97 = ptrtoint ptr %2 to i64
  %98 = ptrtoint ptr %1 to i64
  %99 = sub i64 %97, %98
  %100 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 7
  %101 = load i32, ptr %100, align 8, !tbaa !19
  %102 = and i32 %101, 33554432
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %113, label %104

104:                                              ; preds = %96
  %105 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  %106 = load i64, ptr %105, align 8, !tbaa !235
  %107 = icmp sgt i64 %99, %106
  %108 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  %109 = load ptr, ptr %108, align 8, !tbaa !230
  br i1 %107, label %110, label %117

110:                                              ; preds = %104
  %111 = add nsw i64 %99, 1
  %112 = tail call ptr @Perl_safesysrealloc(ptr noundef %109, i64 noundef %111) #12
  store ptr %112, ptr %108, align 8, !tbaa !230
  br label %117

113:                                              ; preds = %96
  %114 = add nsw i64 %99, 1
  %115 = tail call ptr @Perl_safesysmalloc(i64 noundef %114) #12
  %116 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  store ptr %115, ptr %116, align 8, !tbaa !230
  br label %117

117:                                              ; preds = %104, %110, %113
  %118 = phi ptr [ %112, %110 ], [ %115, %113 ], [ %109, %104 ]
  %119 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %118, ptr align 1 %1, i64 %99, i1 false)
  %120 = load ptr, ptr %119, align 8, !tbaa !230
  %121 = getelementptr inbounds i8, ptr %120, i64 %99
  store i8 0, ptr %121, align 1, !tbaa !5
  %122 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 21
  store i64 0, ptr %122, align 8, !tbaa !252
  %123 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  store i64 %99, ptr %123, align 8, !tbaa !235
  %124 = load ptr, ptr %6, align 8, !tbaa !5
  %125 = getelementptr inbounds %struct.regexp, ptr %124, i64 0, i32 7
  %126 = load i32, ptr %125, align 8, !tbaa !19
  %127 = or i32 %126, 33554432
  store i32 %127, ptr %125, align 8, !tbaa !19
  br label %128

128:                                              ; preds = %117, %86
  %129 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 22
  store i64 0, ptr %129, align 8, !tbaa !231
  br label %161

130:                                              ; preds = %5
  %131 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 19
  %132 = load ptr, ptr %131, align 8, !tbaa !233
  %133 = icmp eq ptr %132, null
  br i1 %133, label %141, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.sv, ptr %132, i64 0, i32 2
  %136 = load i32, ptr %135, align 4, !tbaa !15
  %137 = and i32 %136, 427886592
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  tail call void @Perl_sv_force_normal_flags(ptr noundef nonnull %132, i32 noundef 4) #12
  %140 = load ptr, ptr %6, align 8, !tbaa !5
  br label %141

141:                                              ; preds = %134, %139, %130
  %142 = phi ptr [ %7, %134 ], [ %140, %139 ], [ %7, %130 ]
  %143 = getelementptr inbounds %struct.regexp, ptr %142, i64 0, i32 7
  %144 = load i32, ptr %143, align 8, !tbaa !19
  %145 = and i32 %144, 33554432
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %struct.regexp, ptr %142, i64 0, i32 18
  %149 = load ptr, ptr %148, align 8, !tbaa !230
  tail call void @Perl_safesysfree(ptr noundef %149) #12
  %150 = load ptr, ptr %6, align 8, !tbaa !5
  %151 = getelementptr inbounds %struct.regexp, ptr %150, i64 0, i32 7
  %152 = load i32, ptr %151, align 8, !tbaa !19
  %153 = and i32 %152, -33554433
  store i32 %153, ptr %151, align 8, !tbaa !19
  br label %154

154:                                              ; preds = %147, %141
  %155 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 18
  store ptr %1, ptr %155, align 8, !tbaa !230
  %156 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 21
  %157 = ptrtoint ptr %2 to i64
  %158 = ptrtoint ptr %1 to i64
  %159 = sub i64 %157, %158
  %160 = getelementptr inbounds %struct.regexp, ptr %7, i64 0, i32 20
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %156, i8 0, i64 16, i1 false)
  store i64 %159, ptr %160, align 8, !tbaa !235
  br label %161

161:                                              ; preds = %128, %154
  ret void
}

declare ptr @Perl_newSV(i64 noundef) local_unnamed_addr #3

declare void @Perl_sv_setsv_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @Perl_save_pushptr(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_safesysmalloc(i64 noundef) local_unnamed_addr #3

declare void @Perl_save_destructor_x(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @S_cleanup_regmatch_info_aux(ptr nocapture noundef readonly %0) #0 {
  %2 = load ptr, ptr %0, align 8, !tbaa !206
  %3 = getelementptr inbounds %struct.regmatch_info_aux, ptr %0, i64 0, i32 3
  %4 = load ptr, ptr %3, align 8, !tbaa !215
  tail call void @Perl_safesysfree(ptr noundef %4) #12
  %5 = icmp eq ptr %2, null
  br i1 %5, label %43, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !253
  %9 = icmp eq ptr %8, null
  br i1 %9, label %25, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %2, align 8, !tbaa !216
  %12 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 18
  store ptr %8, ptr %12, align 8, !tbaa !230
  %13 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 4
  %14 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 20
  %15 = load <2 x i64>, ptr %13, align 8, !tbaa !169
  store <2 x i64> %15, ptr %14, align 8, !tbaa !169
  %16 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 6
  %17 = load i64, ptr %16, align 8, !tbaa !232
  %18 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 22
  store i64 %17, ptr %18, align 8, !tbaa !231
  %19 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !234
  %21 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 19
  store ptr %20, ptr %21, align 8, !tbaa !233
  %22 = getelementptr inbounds %struct.regexp, ptr %11, i64 0, i32 7
  %23 = load i32, ptr %22, align 8, !tbaa !19
  %24 = or i32 %23, 33554432
  store i32 %24, ptr %22, align 8, !tbaa !19
  br label %25

25:                                               ; preds = %10, %6
  %26 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 7
  %27 = load ptr, ptr %26, align 8, !tbaa !224
  %28 = icmp eq ptr %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 8
  %31 = load i64, ptr %30, align 8, !tbaa !225
  %32 = getelementptr inbounds %struct.magic, ptr %27, i64 0, i32 5
  store i64 %31, ptr %32, align 8, !tbaa !193
  %33 = getelementptr inbounds %struct.magic, ptr %27, i64 0, i32 4
  %34 = load i8, ptr %33, align 1, !tbaa !195
  %35 = and i8 %34, -65
  %36 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 9
  %37 = load i8, ptr %36, align 8, !tbaa !226
  %38 = and i8 %37, 64
  %39 = or i8 %38, %35
  store i8 %39, ptr %33, align 1, !tbaa !195
  br label %40

40:                                               ; preds = %29, %25
  %41 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !229
  store ptr %42, ptr @PL_curpm, align 8, !tbaa !35
  br label %43

43:                                               ; preds = %40, %1
  %44 = getelementptr inbounds %struct.regmatch_info_aux, ptr %0, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !213
  store ptr %45, ptr @PL_regmatch_state, align 8, !tbaa !35
  %46 = getelementptr inbounds %struct.regmatch_info_aux, ptr %0, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !214
  store ptr %47, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %48 = getelementptr inbounds %struct.regmatch_slab, ptr %47, i64 0, i32 2
  %49 = load ptr, ptr %48, align 8, !tbaa !209
  %50 = icmp eq ptr %49, null
  br i1 %50, label %57, label %51

51:                                               ; preds = %43
  store ptr null, ptr %48, align 8, !tbaa !209
  br label %52

52:                                               ; preds = %51, %52
  %53 = phi ptr [ %49, %51 ], [ %55, %52 ]
  %54 = getelementptr inbounds %struct.regmatch_slab, ptr %53, i64 0, i32 2
  %55 = load ptr, ptr %54, align 8, !tbaa !209
  tail call void @Perl_safesysfree(ptr noundef nonnull %53) #12
  %56 = icmp eq ptr %55, null
  br i1 %56, label %57, label %52, !llvm.loop !254

57:                                               ; preds = %52, %43
  ret void
}

declare ptr @Perl_safesyscalloc(i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_regtry(ptr noundef %0, ptr nocapture noundef %1) unnamed_addr #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !62
  %4 = getelementptr i8, ptr %3, i64 16
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 14
  %7 = load ptr, ptr %6, align 8, !tbaa !20
  %8 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 6
  store ptr null, ptr %8, align 8, !tbaa !63
  %9 = load ptr, ptr %1, align 8, !tbaa !35
  %10 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !26
  %12 = ptrtoint ptr %9 to i64
  %13 = ptrtoint ptr %11 to i64
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 17
  %16 = load ptr, ptr %15, align 8, !tbaa !64
  store i64 %14, ptr %16, align 8, !tbaa !65
  %17 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 15
  store i32 0, ptr %17, align 8, !tbaa !67
  %18 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 16
  store i32 0, ptr %18, align 4, !tbaa !68
  %19 = getelementptr inbounds %struct.regexp, ptr %5, i64 0, i32 12
  %20 = load i32, ptr %19, align 8, !tbaa !69
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %51

22:                                               ; preds = %2
  %23 = and i32 %20, 7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %33, label %25

25:                                               ; preds = %22, %25
  %26 = phi i32 [ %30, %25 ], [ %20, %22 ]
  %27 = phi ptr [ %29, %25 ], [ %16, %22 ]
  %28 = phi i32 [ %31, %25 ], [ 0, %22 ]
  %29 = getelementptr inbounds %struct.regexp_paren_pair, ptr %27, i64 1
  %30 = add nsw i32 %26, -1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %29, i8 -1, i64 16, i1 false)
  %31 = add i32 %28, 1
  %32 = icmp eq i32 %31, %23
  br i1 %32, label %33, label %25, !llvm.loop !255

33:                                               ; preds = %25, %22
  %34 = phi i32 [ %20, %22 ], [ %30, %25 ]
  %35 = phi ptr [ %16, %22 ], [ %29, %25 ]
  %36 = icmp ult i32 %20, 8
  br i1 %36, label %51, label %37

37:                                               ; preds = %33, %37
  %38 = phi i32 [ %48, %37 ], [ %34, %33 ]
  %39 = phi ptr [ %47, %37 ], [ %35, %33 ]
  %40 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %40, i8 -1, i64 16, i1 false)
  %41 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %41, i8 -1, i64 16, i1 false)
  %42 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %42, i8 -1, i64 16, i1 false)
  %43 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %43, i8 -1, i64 16, i1 false)
  %44 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 5
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %44, i8 -1, i64 16, i1 false)
  %45 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %45, i8 -1, i64 16, i1 false)
  %46 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 7
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %46, i8 -1, i64 16, i1 false)
  %47 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 8
  %48 = add nsw i32 %38, -8
  %49 = add i32 %38, -9
  %50 = icmp ult i32 %49, -2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %47, i8 -1, i64 16, i1 false)
  br i1 %50, label %37, label %51, !llvm.loop !72

51:                                               ; preds = %33, %37, %2
  %52 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %53 = getelementptr inbounds %struct.regexp_internal, ptr %7, i64 1
  %54 = tail call fastcc i64 @S_regmatch(ptr noundef nonnull %0, ptr noundef %9, ptr noundef nonnull %53)
  %55 = icmp eq i64 %54, -1
  br i1 %55, label %59, label %56

56:                                               ; preds = %51
  %57 = load ptr, ptr %15, align 8, !tbaa !64
  %58 = getelementptr inbounds %struct.regexp_paren_pair, ptr %57, i64 0, i32 1
  store i64 %54, ptr %58, align 8, !tbaa !74
  br label %67

59:                                               ; preds = %51
  %60 = load ptr, ptr %8, align 8, !tbaa !63
  %61 = icmp eq ptr %60, null
  br i1 %61, label %63, label %62

62:                                               ; preds = %59
  store ptr %60, ptr %1, align 8, !tbaa !35
  br label %63

63:                                               ; preds = %59, %62
  %64 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %65 = icmp sgt i32 %64, %52
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @Perl_leave_scope(i32 noundef %52) #12
  br label %67

67:                                               ; preds = %63, %66, %56
  %68 = phi i32 [ 1, %56 ], [ 0, %66 ], [ 0, %63 ]
  ret i32 %68
}

declare i64 @Perl_sv_len_utf8(ptr noundef) local_unnamed_addr #3

declare ptr @Perl_sv_2pv_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_rninstr(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @Perl_safesysfree(ptr noundef) local_unnamed_addr #3

declare void @Perl_leave_scope(i32 noundef) local_unnamed_addr #3

declare i32 @Perl_hv_iterinit(ptr noundef) local_unnamed_addr #3

declare void @Perl_sv_free2(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i1 noundef zeroext %4) unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [2 x i8], align 1
  %9 = load i8, ptr %1, align 2, !tbaa !76
  %10 = load i8, ptr %2, align 1, !tbaa !5
  %11 = zext i8 %10 to i64
  %12 = icmp slt i8 %10, 0
  %13 = and i1 %12, %4
  br i1 %13, label %14, label %28

14:                                               ; preds = %5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #12
  store i64 0, ptr %6, align 8, !tbaa !169
  %15 = ptrtoint ptr %3 to i64
  %16 = ptrtoint ptr %2 to i64
  %17 = sub i64 %15, %16
  %18 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %19 = xor i1 %18, true
  %20 = zext i1 %19 to i32
  %21 = or i32 %20, 8192
  %22 = call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %2, i64 noundef %17, ptr noundef nonnull %6, i32 noundef %21) #12
  %23 = load i64, ptr %6, align 8, !tbaa !169
  %24 = icmp eq i64 %23, -1
  br i1 %24, label %25, label %26

25:                                               ; preds = %14
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.7) #12
  br label %26

26:                                               ; preds = %14, %25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #12
  %27 = icmp ult i64 %22, 256
  br i1 %27, label %28, label %90

28:                                               ; preds = %5, %26
  %29 = phi i64 [ %22, %26 ], [ %11, %5 ]
  %30 = trunc i64 %29 to i8
  %31 = lshr i64 %29, 3
  %32 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = zext i8 %33 to i32
  %35 = trunc i64 %29 to i32
  %36 = and i32 %35, 7
  %37 = shl nuw nsw i32 1, %36
  %38 = and i32 %37, %34
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %162

40:                                               ; preds = %28
  %41 = zext i8 %9 to i32
  %42 = icmp sgt i8 %9, -1
  %43 = icmp ult i64 %29, 128
  %44 = or i1 %42, %43
  %45 = or i1 %44, %4
  br i1 %45, label %46, label %162

46:                                               ; preds = %40
  %47 = and i32 %41, 12
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %98, label %49

49:                                               ; preds = %46
  %50 = and i32 %41, 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %65, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds [0 x i8], ptr @PL_fold_locale, i64 0, i64 %29
  %54 = load i8, ptr %53, align 1, !tbaa !5
  %55 = zext i8 %54 to i32
  %56 = lshr i32 %55, 3
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct.regnode_charclass, ptr %1, i64 0, i32 4, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !5
  %60 = zext i8 %59 to i32
  %61 = and i32 %55, 7
  %62 = shl nuw nsw i32 1, %61
  %63 = and i32 %62, %60
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %162

65:                                               ; preds = %52, %49
  %66 = load i8, ptr %1, align 2, !tbaa !76
  %67 = and i8 %66, 8
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %98, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.regnode_charclass_class, ptr %1, i64 0, i32 5
  %71 = load i32, ptr %70, align 4, !tbaa !256
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %98, label %73

73:                                               ; preds = %69, %86
  %74 = phi i32 [ %88, %86 ], [ 0, %69 ]
  %75 = phi i32 [ %87, %86 ], [ 0, %69 ]
  %76 = load i32, ptr %70, align 4, !tbaa !256
  %77 = shl nuw nsw i32 1, %75
  %78 = and i32 %76, %77
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %86, label %80

80:                                               ; preds = %73
  %81 = lshr i32 %75, 1
  %82 = trunc i32 %81 to i8
  %83 = call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %82, i8 noundef zeroext %30)
  %84 = zext i1 %83 to i32
  %85 = icmp eq i32 %74, %84
  br i1 %85, label %86, label %162

86:                                               ; preds = %80, %73
  %87 = add nuw nsw i32 %75, 1
  %88 = xor i32 %74, 1
  %89 = icmp eq i32 %87, 30
  br i1 %89, label %90, label %73, !llvm.loop !258

90:                                               ; preds = %86, %26
  %91 = phi i64 [ %22, %26 ], [ %29, %86 ]
  %92 = icmp ult i64 %91, 256
  %93 = and i8 %9, 64
  %94 = icmp eq i8 %93, 0
  %95 = select i1 %92, i1 true, i1 %94
  br i1 %95, label %96, label %152

96:                                               ; preds = %90
  %97 = zext i8 %9 to i32
  br label %98

98:                                               ; preds = %96, %69, %65, %46
  %99 = phi i32 [ %97, %96 ], [ %41, %69 ], [ %41, %65 ], [ %41, %46 ]
  %100 = phi i64 [ %91, %96 ], [ %29, %69 ], [ %29, %65 ], [ %29, %46 ]
  %101 = and i32 %99, 32
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %117

103:                                              ; preds = %98
  %104 = and i32 %99, 2
  %105 = icmp ne i32 %104, 0
  %106 = and i1 %105, %4
  br i1 %106, label %117, label %107

107:                                              ; preds = %103
  %108 = and i32 %99, 4
  %109 = icmp eq i32 %108, 0
  %110 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !42
  %111 = icmp eq i8 %110, 0
  %112 = select i1 %109, i1 true, i1 %111
  br i1 %112, label %152, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %struct.regnode_1, ptr %1, i64 0, i32 3
  %115 = load i32, ptr %114, align 4, !tbaa !162
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %152, label %117

117:                                              ; preds = %103, %113, %98
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #12
  store ptr null, ptr %7, align 8, !tbaa !35
  %118 = call ptr @Perl__get_regclass_nonbitmap_data(ptr noundef %0, ptr noundef nonnull %1, i1 noundef zeroext true, ptr noundef null, ptr noundef nonnull %7, ptr noundef null) #12
  %119 = icmp eq ptr %118, null
  br i1 %119, label %136, label %120

120:                                              ; preds = %117
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %8) #12
  br i1 %4, label %131, label %121

121:                                              ; preds = %120
  %122 = load i8, ptr %2, align 1, !tbaa !5
  %123 = icmp sgt i8 %122, -1
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  store i8 %122, ptr %8, align 1, !tbaa !5
  br label %131

125:                                              ; preds = %121
  %126 = lshr i8 %122, 6
  %127 = or i8 %126, -64
  %128 = getelementptr inbounds i8, ptr %8, i64 1
  store i8 %127, ptr %8, align 1, !tbaa !5
  %129 = and i8 %122, 63
  %130 = or i8 %129, -128
  store i8 %130, ptr %128, align 1, !tbaa !5
  br label %131

131:                                              ; preds = %125, %124, %120
  %132 = phi ptr [ %2, %120 ], [ %8, %124 ], [ %8, %125 ]
  %133 = call i64 @Perl_swash_fetch(ptr noundef nonnull %118, ptr noundef nonnull %132, i1 noundef zeroext true) #12
  %134 = icmp ne i64 %133, 0
  %135 = zext i1 %134 to i8
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %8) #12
  br label %136

136:                                              ; preds = %131, %117
  %137 = phi i8 [ %135, %131 ], [ 0, %117 ]
  %138 = icmp ne i8 %137, 0
  %139 = load ptr, ptr %7, align 8
  %140 = icmp eq ptr %139, null
  %141 = select i1 %138, i1 true, i1 %140
  %142 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !42
  %143 = icmp eq i8 %142, 0
  %144 = select i1 %141, i1 true, i1 %143
  br i1 %144, label %150, label %145

145:                                              ; preds = %136
  %146 = call i64 @Perl__invlist_search(ptr noundef nonnull %139, i64 noundef %100) #12
  %147 = and i64 %146, -9223372036854775807
  %148 = icmp eq i64 %147, 0
  %149 = zext i1 %148 to i8
  br label %150

150:                                              ; preds = %145, %136
  %151 = phi i8 [ %149, %145 ], [ %137, %136 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  br label %152

152:                                              ; preds = %90, %107, %113, %150
  %153 = phi i64 [ %100, %150 ], [ %100, %113 ], [ %100, %107 ], [ %91, %90 ]
  %154 = phi i8 [ %151, %150 ], [ 0, %113 ], [ 0, %107 ], [ 1, %90 ]
  %155 = icmp ult i64 %153, 1114112
  %156 = and i8 %9, 16
  %157 = icmp eq i8 %156, 0
  %158 = select i1 %155, i1 true, i1 %157
  br i1 %158, label %162, label %159

159:                                              ; preds = %152
  %160 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 48) #12
  br i1 %160, label %161, label %162

161:                                              ; preds = %159
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 48, ptr noundef nonnull @.str.8, i64 noundef %153) #12
  br label %162

162:                                              ; preds = %80, %28, %40, %52, %152, %159, %161
  %163 = phi i8 [ %154, %161 ], [ %154, %159 ], [ %154, %152 ], [ 1, %52 ], [ 1, %40 ], [ 1, %28 ], [ 1, %80 ]
  %164 = xor i8 %163, %9
  %165 = and i8 %164, 1
  %166 = icmp ne i8 %165, 0
  ret i1 %166
}

declare i32 @Perl_foldEQ_latin1(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @Perl_foldEQ(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @Perl_foldEQ_locale(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i64 @Perl_utf8_length(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @Perl_foldEQ_utf8_flags(ptr noundef, ptr noundef, i64 noundef, i1 noundef zeroext, ptr noundef, ptr noundef, i64 noundef, i1 noundef zeroext, i32 noundef) local_unnamed_addr #3

declare void @Perl_ck_warner(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare i64 @Perl_utf8n_to_uvchr(ptr noundef, i64 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i1 @Perl_ckwarn(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() local_unnamed_addr #5

declare zeroext i1 @Perl__is_uni_FOO(i8 noundef zeroext, i64 noundef) local_unnamed_addr #3

declare ptr @Perl__core_swash_init(ptr noundef, ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext, ptr noundef) local_unnamed_addr #3

declare i64 @Perl__invlist_search(ptr noundef, i64 noundef) local_unnamed_addr #3

declare zeroext i1 @Perl_ckwarn_d(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal fastcc zeroext i1 @S_isGCB(i32 noundef %0, i32 noundef %1) unnamed_addr #6 {
  %3 = mul i32 %0, 14
  %4 = add i32 %3, %1
  switch i32 %4, label %13 [
    i32 20, label %5
    i32 75, label %6
    i32 83, label %6
    i32 77, label %6
    i32 78, label %6
    i32 111, label %7
    i32 110, label %7
    i32 195, label %7
    i32 194, label %7
    i32 124, label %8
    i32 180, label %8
    i32 150, label %9
    i32 4, label %10
    i32 60, label %10
    i32 74, label %10
    i32 102, label %10
    i32 116, label %10
    i32 130, label %10
    i32 144, label %10
    i32 158, label %10
    i32 172, label %10
    i32 186, label %10
    i32 11, label %11
    i32 67, label %11
    i32 81, label %11
    i32 109, label %11
    i32 123, label %11
    i32 137, label %11
    i32 151, label %11
    i32 165, label %11
    i32 179, label %11
    i32 193, label %11
    i32 126, label %12
    i32 131, label %12
    i32 133, label %12
    i32 134, label %12
    i32 135, label %12
    i32 136, label %12
    i32 138, label %12
    i32 139, label %12
  ]

5:                                                ; preds = %2
  br label %13

6:                                                ; preds = %2, %2, %2, %2
  br label %13

7:                                                ; preds = %2, %2, %2, %2
  br label %13

8:                                                ; preds = %2, %2
  br label %13

9:                                                ; preds = %2
  br label %13

10:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2, %2, %2
  br label %13

11:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2, %2, %2
  br label %13

12:                                               ; preds = %2, %2, %2, %2, %2, %2, %2, %2
  br label %13

13:                                               ; preds = %2, %12, %11, %10, %9, %8, %7, %6, %5
  %14 = phi i1 [ false, %12 ], [ false, %11 ], [ false, %10 ], [ false, %9 ], [ false, %8 ], [ false, %7 ], [ false, %6 ], [ false, %5 ], [ true, %2 ]
  ret i1 %14
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isSB(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, i1 noundef zeroext %5) unnamed_addr #0 {
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #12
  store ptr %3, ptr %7, align 8, !tbaa !35
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #12
  %10 = icmp eq i32 %0, 4
  %11 = icmp eq i32 %1, 4
  %12 = or i1 %10, %11
  br i1 %12, label %97, label %13

13:                                               ; preds = %6
  %14 = icmp eq i32 %0, 2
  %15 = icmp eq i32 %1, 7
  %16 = and i1 %14, %15
  br i1 %16, label %97, label %17

17:                                               ; preds = %13
  switch i32 %0, label %18 [
    i32 13, label %97
    i32 7, label %97
    i32 2, label %97
  ]

18:                                               ; preds = %17
  %19 = add i32 %1, -5
  %20 = icmp ult i32 %19, 2
  br i1 %20, label %97, label %21

21:                                               ; preds = %18
  %22 = add i32 %0, -5
  %23 = icmp ult i32 %22, 2
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %7, i1 noundef zeroext %5)
  br label %26

26:                                               ; preds = %21, %24
  %27 = phi i32 [ %25, %24 ], [ %0, %21 ]
  %28 = icmp eq i32 %27, 1
  %29 = icmp eq i32 %1, 9
  %30 = and i1 %29, %28
  br i1 %30, label %97, label %31

31:                                               ; preds = %26
  %32 = icmp eq i32 %1, 15
  %33 = and i1 %32, %28
  %34 = load ptr, ptr %7, align 8, !tbaa !35
  store ptr %34, ptr %8, align 8, !tbaa !35
  br i1 %33, label %35, label %38

35:                                               ; preds = %31
  %36 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  %37 = icmp eq i32 %36, 15
  br i1 %37, label %97, label %56

38:                                               ; preds = %31
  %39 = icmp eq i32 %27, 14
  br i1 %39, label %43, label %40

40:                                               ; preds = %43, %38
  %41 = phi i32 [ %27, %38 ], [ %44, %43 ]
  %42 = icmp eq i32 %41, 3
  br i1 %42, label %46, label %49

43:                                               ; preds = %38, %43
  %44 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  %45 = icmp eq i32 %44, 14
  br i1 %45, label %43, label %40, !llvm.loop !259

46:                                               ; preds = %40, %46
  %47 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  %48 = icmp eq i32 %47, 3
  br i1 %48, label %46, label %49, !llvm.loop !260

49:                                               ; preds = %46, %40
  %50 = phi i32 [ %41, %40 ], [ %47, %46 ]
  %51 = icmp eq i32 %50, 1
  switch i32 %50, label %63 [
    i32 12, label %52
    i32 1, label %52
  ]

52:                                               ; preds = %49, %49
  %53 = add i32 %1, -1
  %54 = icmp ult i32 %53, 14
  br i1 %54, label %86, label %55

55:                                               ; preds = %86, %52
  br i1 %51, label %56, label %63

56:                                               ; preds = %35, %55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  store ptr %3, ptr %9, align 8, !tbaa !35
  br label %57

57:                                               ; preds = %59, %56
  %58 = phi i32 [ %1, %56 ], [ %60, %59 ]
  switch i32 %58, label %59 [
    i32 15, label %61
    i32 13, label %61
    i32 12, label %61
    i32 10, label %61
    i32 8, label %61
    i32 7, label %61
    i32 4, label %61
    i32 2, label %61
    i32 1, label %61
  ]

59:                                               ; preds = %57
  %60 = call fastcc i32 @S_advance_one_SB(ptr noundef nonnull %9, ptr noundef %4, i1 noundef zeroext %5), !range !261
  br label %57, !llvm.loop !262

61:                                               ; preds = %57, %57, %57, %57, %57, %57, %57, %57, %57
  %62 = icmp eq i32 %58, 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  br i1 %62, label %97, label %63

63:                                               ; preds = %49, %61, %55
  store ptr %34, ptr %8, align 8, !tbaa !35
  br label %64

64:                                               ; preds = %66, %63
  %65 = phi i32 [ %27, %63 ], [ %67, %66 ]
  switch i32 %65, label %71 [
    i32 3, label %66
    i32 12, label %68
    i32 1, label %68
  ]

66:                                               ; preds = %64
  %67 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  br label %64, !llvm.loop !263

68:                                               ; preds = %64, %64
  %69 = add i32 %1, -2
  %70 = icmp ult i32 %69, 13
  br i1 %70, label %91, label %71

71:                                               ; preds = %64, %91, %68
  store ptr %34, ptr %8, align 8, !tbaa !35
  %72 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %8, i1 noundef zeroext %5)
  switch i32 %72, label %75 [
    i32 13, label %73
    i32 7, label %73
    i32 2, label %73
  ]

73:                                               ; preds = %71, %71, %71
  %74 = load ptr, ptr %8, align 8, !tbaa !35
  store ptr %74, ptr %7, align 8, !tbaa !35
  br label %80

75:                                               ; preds = %71
  %76 = icmp eq i32 %27, 14
  br i1 %76, label %77, label %80

77:                                               ; preds = %75, %77
  %78 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %7, i1 noundef zeroext %5)
  %79 = icmp eq i32 %78, 14
  br i1 %79, label %77, label %80, !llvm.loop !264

80:                                               ; preds = %77, %73, %75
  %81 = phi i32 [ %72, %73 ], [ %27, %75 ], [ %78, %77 ]
  br label %82

82:                                               ; preds = %80, %84
  %83 = phi i32 [ %85, %84 ], [ %81, %80 ]
  switch i32 %83, label %97 [
    i32 3, label %84
    i32 12, label %96
    i32 1, label %96
  ]

84:                                               ; preds = %82
  %85 = call fastcc i32 @S_backup_one_SB(ptr noundef %2, ptr noundef nonnull %7, i1 noundef zeroext %5)
  br label %82, !llvm.loop !265

86:                                               ; preds = %52
  %87 = trunc i32 %53 to i16
  %88 = lshr i16 15427, %87
  %89 = and i16 %88, 1
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %55, label %97

91:                                               ; preds = %68
  %92 = trunc i32 %69 to i16
  %93 = lshr i16 6179, %92
  %94 = and i16 %93, 1
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %71, label %97

96:                                               ; preds = %82, %82
  br label %97

97:                                               ; preds = %82, %96, %91, %86, %35, %26, %18, %17, %17, %17, %13, %6, %61
  %98 = phi i1 [ false, %61 ], [ true, %6 ], [ false, %13 ], [ true, %17 ], [ true, %17 ], [ true, %17 ], [ false, %18 ], [ false, %26 ], [ false, %35 ], [ false, %86 ], [ false, %91 ], [ true, %96 ], [ false, %82 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #12
  ret i1 %98
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isWB(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i1 noundef zeroext %6) unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  store i32 %0, ptr %8, align 4, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  store ptr %4, ptr %9, align 8, !tbaa !35
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #12
  store ptr %4, ptr %10, align 8, !tbaa !35
  %11 = icmp eq i32 %1, 4
  %12 = icmp eq i32 %2, 4
  %13 = or i1 %11, %12
  br i1 %13, label %70, label %14

14:                                               ; preds = %7
  %15 = icmp eq i32 %1, 2
  %16 = icmp eq i32 %2, 10
  %17 = and i1 %15, %16
  br i1 %17, label %70, label %18

18:                                               ; preds = %14
  %19 = and i32 %1, -5
  %20 = icmp eq i32 %19, 10
  %21 = icmp eq i32 %2, 2
  %22 = or i1 %20, %21
  %23 = icmp eq i32 %2, 14
  %24 = or i1 %23, %22
  %25 = or i1 %15, %24
  %26 = or i1 %16, %25
  br i1 %26, label %70, label %27

27:                                               ; preds = %18
  %28 = and i32 %2, -3
  %29 = icmp eq i32 %28, 5
  br i1 %29, label %70, label %30

30:                                               ; preds = %27
  %31 = and i32 %1, -3
  %32 = icmp eq i32 %31, 5
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  br label %35

35:                                               ; preds = %30, %33
  %36 = phi i32 [ %34, %33 ], [ %1, %30 ]
  %37 = mul i32 %36, 19
  %38 = add i32 %37, %2
  switch i32 %38, label %70 [
    i32 20, label %39
    i32 27, label %39
    i32 153, label %39
    i32 160, label %39
    i32 30, label %40
    i32 32, label %40
    i32 36, label %40
    i32 163, label %40
    i32 165, label %40
    i32 210, label %45
    i32 217, label %45
    i32 248, label %45
    i32 255, label %45
    i32 324, label %45
    i32 331, label %45
    i32 169, label %50
    i32 155, label %51
    i32 65, label %54
    i32 300, label %57
    i32 34, label %58
    i32 167, label %58
    i32 286, label %59
    i32 293, label %59
    i32 243, label %60
    i32 262, label %60
    i32 338, label %60
    i32 297, label %63
    i32 298, label %63
    i32 302, label %63
    i32 180, label %66
    i32 25, label %67
    i32 158, label %67
    i32 291, label %67
    i32 177, label %67
    i32 120, label %67
    i32 115, label %68
    i32 122, label %68
    i32 129, label %68
    i32 123, label %68
    i32 320, label %69
  ]

39:                                               ; preds = %35, %35, %35, %35
  br label %70

40:                                               ; preds = %35, %35, %35, %35, %35
  %41 = call fastcc i32 @S_advance_one_WB(ptr noundef nonnull %10, ptr noundef %5, i1 noundef zeroext %6), !range !266
  %42 = icmp ne i32 %41, 1
  %43 = icmp ne i32 %41, 8
  %44 = and i1 %42, %43
  br label %70

45:                                               ; preds = %35, %35, %35, %35, %35, %35
  %46 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  %47 = icmp ne i32 %46, 1
  %48 = icmp ne i32 %46, 8
  %49 = and i1 %47, %48
  br label %70

50:                                               ; preds = %35
  br label %70

51:                                               ; preds = %35
  %52 = call fastcc i32 @S_advance_one_WB(ptr noundef nonnull %10, ptr noundef %5, i1 noundef zeroext %6), !range !266
  %53 = icmp ne i32 %52, 8
  br label %70

54:                                               ; preds = %35
  %55 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  %56 = icmp ne i32 %55, 8
  br label %70

57:                                               ; preds = %35
  br label %70

58:                                               ; preds = %35, %35
  br label %70

59:                                               ; preds = %35, %35
  br label %70

60:                                               ; preds = %35, %35, %35
  %61 = call fastcc i32 @S_backup_one_WB(ptr noundef nonnull %8, ptr noundef %3, ptr noundef nonnull %9, i1 noundef zeroext %6)
  %62 = icmp ne i32 %61, 15
  br label %70

63:                                               ; preds = %35, %35, %35
  %64 = call fastcc i32 @S_advance_one_WB(ptr noundef nonnull %10, ptr noundef %5, i1 noundef zeroext %6), !range !266
  %65 = icmp ne i32 %64, 15
  br label %70

66:                                               ; preds = %35
  br label %70

67:                                               ; preds = %35, %35, %35, %35, %35
  br label %70

68:                                               ; preds = %35, %35, %35, %35
  br label %70

69:                                               ; preds = %35
  br label %70

70:                                               ; preds = %35, %27, %18, %14, %7, %69, %68, %67, %66, %63, %60, %59, %58, %57, %54, %51, %50, %45, %40, %39
  %71 = phi i1 [ false, %69 ], [ false, %68 ], [ false, %67 ], [ false, %66 ], [ %65, %63 ], [ %62, %60 ], [ false, %59 ], [ false, %58 ], [ false, %57 ], [ %56, %54 ], [ %53, %51 ], [ false, %50 ], [ %49, %45 ], [ %44, %40 ], [ false, %39 ], [ true, %7 ], [ false, %14 ], [ true, %18 ], [ false, %27 ], [ true, %35 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  ret i1 %71
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isFOO_utf8_lc(i8 noundef zeroext %0, ptr noundef %1) unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = load i8, ptr %1, align 1, !tbaa !5
  %5 = icmp sgt i8 %4, -1
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %0, i8 noundef zeroext %4)
  br label %126

8:                                                ; preds = %2
  %9 = and i8 %4, -2
  %10 = icmp eq i8 %9, -62
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = shl i8 %4, 6
  %13 = getelementptr inbounds i8, ptr %1, i64 1
  %14 = load i8, ptr %13, align 1, !tbaa !5
  %15 = and i8 %14, 63
  %16 = or i8 %15, %12
  %17 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %0, i8 noundef zeroext %16)
  br label %126

18:                                               ; preds = %8
  %19 = icmp ult i8 %0, 10
  br i1 %19, label %20, label %33

20:                                               ; preds = %18
  %21 = zext i8 %0 to i64
  %22 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !35
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #12
  store i8 4, ptr %3, align 1, !tbaa !5
  %26 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %21
  %27 = load ptr, ptr %26, align 8, !tbaa !35
  %28 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %27, ptr noundef nonnull %3) #12
  store ptr %28, ptr %22, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #12
  br label %29

29:                                               ; preds = %25, %20
  %30 = phi ptr [ %28, %25 ], [ %23, %20 ]
  %31 = call i64 @Perl_swash_fetch(ptr noundef %30, ptr noundef nonnull %1, i1 noundef zeroext true) #12
  %32 = icmp ne i64 %31, 0
  br label %126

33:                                               ; preds = %18
  switch i8 %0, label %126 [
    i8 10, label %34
    i8 11, label %67
    i8 12, label %97
    i8 15, label %115
  ]

34:                                               ; preds = %33
  switch i8 %4, label %126 [
    i8 -31, label %35
    i8 -30, label %43
    i8 -29, label %59
  ]

35:                                               ; preds = %34
  %36 = getelementptr inbounds i8, ptr %1, i64 1
  %37 = load i8, ptr %36, align 1, !tbaa !5
  %38 = icmp eq i8 %37, -102
  br i1 %38, label %39, label %126

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, ptr %1, i64 2
  %41 = load i8, ptr %40, align 1, !tbaa !5
  %42 = icmp eq i8 %41, -128
  br label %126

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8, ptr %1, i64 1
  %45 = load i8, ptr %44, align 1, !tbaa !5
  switch i8 %45, label %126 [
    i8 -128, label %46
    i8 -127, label %55
  ]

46:                                               ; preds = %43
  %47 = getelementptr inbounds i8, ptr %1, i64 2
  %48 = load i8, ptr %47, align 1, !tbaa !5
  %49 = icmp ult i8 %48, -117
  %50 = and i8 %48, -2
  %51 = icmp eq i8 %50, -88
  %52 = or i1 %49, %51
  %53 = icmp eq i8 %48, -81
  %54 = or i1 %53, %52
  br label %126

55:                                               ; preds = %43
  %56 = getelementptr inbounds i8, ptr %1, i64 2
  %57 = load i8, ptr %56, align 1, !tbaa !5
  %58 = icmp eq i8 %57, -97
  br label %126

59:                                               ; preds = %34
  %60 = getelementptr inbounds i8, ptr %1, i64 1
  %61 = load i8, ptr %60, align 1, !tbaa !5
  %62 = icmp eq i8 %61, -128
  br i1 %62, label %63, label %126

63:                                               ; preds = %59
  %64 = getelementptr inbounds i8, ptr %1, i64 2
  %65 = load i8, ptr %64, align 1, !tbaa !5
  %66 = icmp eq i8 %65, -128
  br label %126

67:                                               ; preds = %33
  switch i8 %4, label %126 [
    i8 -31, label %68
    i8 -30, label %76
    i8 -29, label %89
  ]

68:                                               ; preds = %67
  %69 = getelementptr inbounds i8, ptr %1, i64 1
  %70 = load i8, ptr %69, align 1, !tbaa !5
  %71 = icmp eq i8 %70, -102
  br i1 %71, label %72, label %126

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, ptr %1, i64 2
  %74 = load i8, ptr %73, align 1, !tbaa !5
  %75 = icmp eq i8 %74, -128
  br label %126

76:                                               ; preds = %67
  %77 = getelementptr inbounds i8, ptr %1, i64 1
  %78 = load i8, ptr %77, align 1, !tbaa !5
  switch i8 %78, label %126 [
    i8 -128, label %79
    i8 -127, label %85
  ]

79:                                               ; preds = %76
  %80 = getelementptr inbounds i8, ptr %1, i64 2
  %81 = load i8, ptr %80, align 1, !tbaa !5
  %82 = icmp ult i8 %81, -117
  %83 = icmp eq i8 %81, -81
  %84 = or i1 %82, %83
  br label %126

85:                                               ; preds = %76
  %86 = getelementptr inbounds i8, ptr %1, i64 2
  %87 = load i8, ptr %86, align 1, !tbaa !5
  %88 = icmp eq i8 %87, -97
  br label %126

89:                                               ; preds = %67
  %90 = getelementptr inbounds i8, ptr %1, i64 1
  %91 = load i8, ptr %90, align 1, !tbaa !5
  %92 = icmp eq i8 %91, -128
  br i1 %92, label %93, label %126

93:                                               ; preds = %89
  %94 = getelementptr inbounds i8, ptr %1, i64 2
  %95 = load i8, ptr %94, align 1, !tbaa !5
  %96 = icmp eq i8 %95, -128
  br label %126

97:                                               ; preds = %33
  %98 = icmp eq i8 %4, -17
  br i1 %98, label %99, label %126

99:                                               ; preds = %97
  %100 = getelementptr inbounds i8, ptr %1, i64 1
  %101 = load i8, ptr %100, align 1, !tbaa !5
  switch i8 %101, label %126 [
    i8 -68, label %102
    i8 -67, label %110
  ]

102:                                              ; preds = %99
  %103 = getelementptr inbounds i8, ptr %1, i64 2
  %104 = load i8, ptr %103, align 1, !tbaa !5
  %105 = add i8 %104, 112
  %106 = icmp ult i8 %105, 10
  br i1 %106, label %126, label %107

107:                                              ; preds = %102
  %108 = add i8 %104, 95
  %109 = icmp ult i8 %108, 6
  br label %126

110:                                              ; preds = %99
  %111 = getelementptr inbounds i8, ptr %1, i64 2
  %112 = load i8, ptr %111, align 1, !tbaa !5
  %113 = add i8 %112, 127
  %114 = icmp ult i8 %113, 6
  br label %126

115:                                              ; preds = %33
  %116 = icmp eq i8 %4, -30
  br i1 %116, label %117, label %126

117:                                              ; preds = %115
  %118 = getelementptr inbounds i8, ptr %1, i64 1
  %119 = load i8, ptr %118, align 1, !tbaa !5
  %120 = icmp eq i8 %119, -128
  br i1 %120, label %121, label %126

121:                                              ; preds = %117
  %122 = getelementptr inbounds i8, ptr %1, i64 2
  %123 = load i8, ptr %122, align 1, !tbaa !5
  %124 = and i8 %123, -2
  %125 = icmp eq i8 %124, -88
  br label %126

126:                                              ; preds = %79, %72, %68, %76, %85, %67, %93, %89, %46, %39, %35, %43, %55, %34, %63, %59, %110, %107, %33, %115, %117, %121, %97, %102, %99, %29, %11, %6
  %127 = phi i1 [ %7, %6 ], [ %17, %11 ], [ %32, %29 ], [ false, %97 ], [ true, %102 ], [ %109, %107 ], [ false, %99 ], [ %114, %110 ], [ false, %117 ], [ false, %115 ], [ %125, %121 ], [ false, %33 ], [ %54, %46 ], [ false, %35 ], [ %42, %39 ], [ %58, %55 ], [ false, %43 ], [ false, %59 ], [ %66, %63 ], [ false, %34 ], [ %84, %79 ], [ false, %68 ], [ %75, %72 ], [ %88, %85 ], [ false, %76 ], [ false, %89 ], [ %96, %93 ], [ false, %67 ]
  ret i1 %127
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %0, i8 noundef zeroext %1) unnamed_addr #0 {
  switch i8 %0, label %151 [
    i8 7, label %3
    i8 2, label %13
    i8 14, label %23
    i8 11, label %25
    i8 9, label %37
    i8 13, label %50
    i8 1, label %60
    i8 8, label %70
    i8 3, label %79
    i8 6, label %89
    i8 5, label %99
    i8 10, label %109
    i8 4, label %119
    i8 0, label %129
    i8 12, label %141
  ]

3:                                                ; preds = %2
  %4 = icmp sgt i8 %1, -1
  br i1 %4, label %5, label %153

5:                                                ; preds = %3
  %6 = tail call ptr @__ctype_b_loc() #14
  %7 = load ptr, ptr %6, align 8, !tbaa !35
  %8 = zext i8 %1 to i64
  %9 = getelementptr inbounds i16, ptr %7, i64 %8
  %10 = load i16, ptr %9, align 2, !tbaa !89
  %11 = and i16 %10, 8
  %12 = icmp ne i16 %11, 0
  br label %153

13:                                               ; preds = %2
  %14 = icmp sgt i8 %1, -1
  br i1 %14, label %15, label %153

15:                                               ; preds = %13
  %16 = tail call ptr @__ctype_b_loc() #14
  %17 = load ptr, ptr %16, align 8, !tbaa !35
  %18 = zext i8 %1 to i64
  %19 = getelementptr inbounds i16, ptr %17, i64 %18
  %20 = load i16, ptr %19, align 2, !tbaa !89
  %21 = and i16 %20, 1024
  %22 = icmp ne i16 %21, 0
  br label %153

23:                                               ; preds = %2
  %24 = icmp sgt i8 %1, -1
  br label %153

25:                                               ; preds = %2
  %26 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !88, !range !42, !noundef !43
  %27 = icmp eq i8 %26, 0
  %28 = zext i8 %1 to i64
  %29 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !73
  br i1 %27, label %34, label %31

31:                                               ; preds = %25
  %32 = and i32 %30, 2048
  %33 = icmp ne i32 %32, 0
  br label %153

34:                                               ; preds = %25
  %35 = and i32 %30, 18432
  %36 = icmp eq i32 %35, 18432
  br label %153

37:                                               ; preds = %2
  %38 = icmp sgt i8 %1, -1
  br i1 %38, label %39, label %153

39:                                               ; preds = %37
  %40 = tail call ptr @__ctype_b_loc() #14
  %41 = load ptr, ptr %40, align 8, !tbaa !35
  %42 = zext i8 %1 to i64
  %43 = getelementptr inbounds i16, ptr %41, i64 %42
  %44 = load i16, ptr %43, align 2, !tbaa !89
  %45 = and i16 %44, 512
  %46 = icmp eq i16 %45, 0
  br i1 %46, label %47, label %153

47:                                               ; preds = %39
  %48 = and i16 %44, 256
  %49 = icmp ne i16 %48, 0
  br label %153

50:                                               ; preds = %2
  %51 = icmp sgt i8 %1, -1
  br i1 %51, label %52, label %153

52:                                               ; preds = %50
  %53 = tail call ptr @__ctype_b_loc() #14
  %54 = load ptr, ptr %53, align 8, !tbaa !35
  %55 = zext i8 %1 to i64
  %56 = getelementptr inbounds i16, ptr %54, i64 %55
  %57 = load i16, ptr %56, align 2, !tbaa !89
  %58 = and i16 %57, 2
  %59 = icmp ne i16 %58, 0
  br label %153

60:                                               ; preds = %2
  %61 = icmp sgt i8 %1, -1
  br i1 %61, label %62, label %153

62:                                               ; preds = %60
  %63 = tail call ptr @__ctype_b_loc() #14
  %64 = load ptr, ptr %63, align 8, !tbaa !35
  %65 = zext i8 %1 to i64
  %66 = getelementptr inbounds i16, ptr %64, i64 %65
  %67 = load i16, ptr %66, align 2, !tbaa !89
  %68 = and i16 %67, 2048
  %69 = icmp ne i16 %68, 0
  br label %153

70:                                               ; preds = %2
  %71 = icmp sgt i8 %1, -1
  br i1 %71, label %72, label %153

72:                                               ; preds = %70
  %73 = tail call ptr @__ctype_b_loc() #14
  %74 = load ptr, ptr %73, align 8, !tbaa !35
  %75 = zext i8 %1 to i64
  %76 = getelementptr inbounds i16, ptr %74, i64 %75
  %77 = load i16, ptr %76, align 2, !tbaa !89
  %78 = icmp slt i16 %77, 0
  br label %153

79:                                               ; preds = %2
  %80 = icmp sgt i8 %1, -1
  br i1 %80, label %81, label %153

81:                                               ; preds = %79
  %82 = tail call ptr @__ctype_b_loc() #14
  %83 = load ptr, ptr %82, align 8, !tbaa !35
  %84 = zext i8 %1 to i64
  %85 = getelementptr inbounds i16, ptr %83, i64 %84
  %86 = load i16, ptr %85, align 2, !tbaa !89
  %87 = and i16 %86, 512
  %88 = icmp ne i16 %87, 0
  br label %153

89:                                               ; preds = %2
  %90 = icmp sgt i8 %1, -1
  br i1 %90, label %91, label %153

91:                                               ; preds = %89
  %92 = tail call ptr @__ctype_b_loc() #14
  %93 = load ptr, ptr %92, align 8, !tbaa !35
  %94 = zext i8 %1 to i64
  %95 = getelementptr inbounds i16, ptr %93, i64 %94
  %96 = load i16, ptr %95, align 2, !tbaa !89
  %97 = and i16 %96, 16384
  %98 = icmp ne i16 %97, 0
  br label %153

99:                                               ; preds = %2
  %100 = icmp sgt i8 %1, -1
  br i1 %100, label %101, label %153

101:                                              ; preds = %99
  %102 = tail call ptr @__ctype_b_loc() #14
  %103 = load ptr, ptr %102, align 8, !tbaa !35
  %104 = zext i8 %1 to i64
  %105 = getelementptr inbounds i16, ptr %103, i64 %104
  %106 = load i16, ptr %105, align 2, !tbaa !89
  %107 = and i16 %106, 4
  %108 = icmp ne i16 %107, 0
  br label %153

109:                                              ; preds = %2
  %110 = icmp sgt i8 %1, -1
  br i1 %110, label %111, label %153

111:                                              ; preds = %109
  %112 = tail call ptr @__ctype_b_loc() #14
  %113 = load ptr, ptr %112, align 8, !tbaa !35
  %114 = zext i8 %1 to i64
  %115 = getelementptr inbounds i16, ptr %113, i64 %114
  %116 = load i16, ptr %115, align 2, !tbaa !89
  %117 = and i16 %116, 8192
  %118 = icmp ne i16 %117, 0
  br label %153

119:                                              ; preds = %2
  %120 = icmp sgt i8 %1, -1
  br i1 %120, label %121, label %153

121:                                              ; preds = %119
  %122 = tail call ptr @__ctype_b_loc() #14
  %123 = load ptr, ptr %122, align 8, !tbaa !35
  %124 = zext i8 %1 to i64
  %125 = getelementptr inbounds i16, ptr %123, i64 %124
  %126 = load i16, ptr %125, align 2, !tbaa !89
  %127 = and i16 %126, 256
  %128 = icmp ne i16 %127, 0
  br label %153

129:                                              ; preds = %2
  %130 = icmp sgt i8 %1, -1
  br i1 %130, label %131, label %153

131:                                              ; preds = %129
  %132 = tail call ptr @__ctype_b_loc() #14
  %133 = load ptr, ptr %132, align 8, !tbaa !35
  %134 = zext i8 %1 to i64
  %135 = getelementptr inbounds i16, ptr %133, i64 %134
  %136 = load i16, ptr %135, align 2, !tbaa !89
  %137 = and i16 %136, 8
  %138 = icmp ne i16 %137, 0
  %139 = icmp eq i8 %1, 95
  %140 = or i1 %139, %138
  br label %153

141:                                              ; preds = %2
  %142 = icmp sgt i8 %1, -1
  br i1 %142, label %143, label %153

143:                                              ; preds = %141
  %144 = tail call ptr @__ctype_b_loc() #14
  %145 = load ptr, ptr %144, align 8, !tbaa !35
  %146 = zext i8 %1 to i64
  %147 = getelementptr inbounds i16, ptr %145, i64 %146
  %148 = load i16, ptr %147, align 2, !tbaa !89
  %149 = and i16 %148, 4096
  %150 = icmp ne i16 %149, 0
  br label %153

151:                                              ; preds = %2
  %152 = zext i8 %0 to i32
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.9, i32 noundef %152) #12
  br label %153

153:                                              ; preds = %141, %143, %129, %131, %119, %121, %109, %111, %99, %101, %89, %91, %79, %81, %70, %72, %60, %62, %50, %52, %47, %39, %37, %31, %34, %13, %15, %3, %5, %151, %23
  %154 = phi i1 [ false, %151 ], [ %24, %23 ], [ false, %3 ], [ %12, %5 ], [ false, %13 ], [ %22, %15 ], [ %33, %31 ], [ %36, %34 ], [ true, %39 ], [ %49, %47 ], [ false, %37 ], [ false, %50 ], [ %59, %52 ], [ false, %60 ], [ %69, %62 ], [ false, %70 ], [ %78, %72 ], [ false, %79 ], [ %88, %81 ], [ false, %89 ], [ %98, %91 ], [ false, %99 ], [ %108, %101 ], [ false, %109 ], [ %118, %111 ], [ false, %119 ], [ %128, %121 ], [ false, %129 ], [ %140, %131 ], [ false, %141 ], [ %150, %143 ]
  ret i1 %154
}

declare i64 @Perl_swash_fetch(ptr noundef, ptr noundef, i1 noundef zeroext) local_unnamed_addr #3

declare void @Perl_push_scope() local_unnamed_addr #3

declare void @Perl_save_strlen(ptr noundef) local_unnamed_addr #3

declare ptr @Perl_sv_2mortal(ptr noundef) local_unnamed_addr #3

declare i64 @Perl__to_utf8_fold_flags(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare i64 @Perl__to_fold_latin1(i8 noundef zeroext, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_hv_common_key_len(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i64 @Perl_sv_2iv_flags(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @Perl_free_tmps() local_unnamed_addr #3

declare void @Perl_pop_scope() local_unnamed_addr #3

declare ptr @Perl__get_regclass_nonbitmap_data(ptr noundef, ptr noundef, i1 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @Perl_warner(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_backup_one_SB(ptr noundef %0, ptr nocapture noundef %1, i1 noundef zeroext %2) unnamed_addr #0 {
  %4 = load ptr, ptr %1, align 8, !tbaa !35
  %5 = icmp ult ptr %4, %0
  br i1 %5, label %86, label %6

6:                                                ; preds = %3
  br i1 %2, label %7, label %71

7:                                                ; preds = %6
  %8 = ptrtoint ptr %0 to i64
  %9 = icmp ugt ptr %4, %0
  br i1 %9, label %10, label %86

10:                                               ; preds = %7
  %11 = getelementptr inbounds i8, ptr %4, i64 -1
  %12 = load i8, ptr %11, align 1, !tbaa !5
  %13 = icmp slt i8 %12, 0
  %14 = icmp ugt ptr %11, %0
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %31

16:                                               ; preds = %10
  %17 = ptrtoint ptr %4 to i64
  %18 = getelementptr i8, ptr %4, i64 %8
  %19 = sub i64 0, %17
  %20 = getelementptr i8, ptr %18, i64 %19
  br label %21

21:                                               ; preds = %26, %16
  %22 = phi ptr [ %27, %26 ], [ %11, %16 ]
  %23 = load i8, ptr %22, align 1, !tbaa !5
  %24 = and i8 %23, -64
  %25 = icmp eq i8 %24, -128
  br i1 %25, label %26, label %31

26:                                               ; preds = %21
  %27 = getelementptr inbounds i8, ptr %22, i64 -1
  %28 = icmp ugt ptr %27, %0
  br i1 %28, label %21, label %29, !llvm.loop !49

29:                                               ; preds = %26
  %30 = icmp eq ptr %20, null
  br i1 %30, label %86, label %31

31:                                               ; preds = %21, %10, %29
  %32 = phi ptr [ %11, %10 ], [ %20, %29 ], [ %22, %21 ]
  br label %33

33:                                               ; preds = %31, %57
  %34 = phi ptr [ %58, %57 ], [ %32, %31 ]
  %35 = icmp ugt ptr %34, %0
  br i1 %35, label %36, label %85

36:                                               ; preds = %33
  %37 = getelementptr inbounds i8, ptr %34, i64 -1
  %38 = load i8, ptr %37, align 1, !tbaa !5
  %39 = icmp slt i8 %38, 0
  %40 = icmp ugt ptr %37, %0
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %57

42:                                               ; preds = %36
  %43 = ptrtoint ptr %34 to i64
  %44 = getelementptr i8, ptr %34, i64 %8
  %45 = sub i64 0, %43
  %46 = getelementptr i8, ptr %44, i64 %45
  br label %47

47:                                               ; preds = %52, %42
  %48 = phi ptr [ %53, %52 ], [ %37, %42 ]
  %49 = load i8, ptr %48, align 1, !tbaa !5
  %50 = and i8 %49, -64
  %51 = icmp eq i8 %50, -128
  br i1 %51, label %52, label %57

52:                                               ; preds = %47
  %53 = getelementptr inbounds i8, ptr %48, i64 -1
  %54 = icmp ugt ptr %53, %0
  br i1 %54, label %47, label %55, !llvm.loop !49

55:                                               ; preds = %52
  %56 = icmp eq ptr %46, null
  br i1 %56, label %85, label %57

57:                                               ; preds = %47, %36, %55
  %58 = phi ptr [ %46, %55 ], [ %37, %36 ], [ %48, %47 ]
  %59 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %60 = ptrtoint ptr %34 to i64
  %61 = ptrtoint ptr %58 to i64
  %62 = sub i64 %60, %61
  %63 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %64 = select i1 %63, i32 0, i32 -8161
  %65 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %58, i64 noundef %62, ptr noundef null, i32 noundef %64) #12
  %66 = tail call i64 @Perl__invlist_search(ptr noundef %59, i64 noundef %65) #12
  %67 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %66
  %68 = load i32, ptr %67, align 4, !tbaa !5
  store ptr %34, ptr %1, align 8, !tbaa !35
  %69 = add i32 %68, -5
  %70 = icmp ult i32 %69, 2
  br i1 %70, label %33, label %86, !llvm.loop !267

71:                                               ; preds = %6, %75
  %72 = load ptr, ptr %1, align 8, !tbaa !35
  %73 = getelementptr inbounds i8, ptr %72, i64 -2
  %74 = icmp ult ptr %73, %0
  br i1 %74, label %85, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, ptr %72, i64 -1
  store ptr %76, ptr %1, align 8, !tbaa !35
  %77 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %78 = load i8, ptr %73, align 1, !tbaa !5
  %79 = zext i8 %78 to i64
  %80 = tail call i64 @Perl__invlist_search(ptr noundef %77, i64 noundef %79) #12
  %81 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !5
  %83 = add i32 %82, -5
  %84 = icmp ult i32 %83, 2
  br i1 %84, label %71, label %86, !llvm.loop !268

85:                                               ; preds = %71, %33, %55
  store ptr %0, ptr %1, align 8, !tbaa !35
  br label %86

86:                                               ; preds = %75, %57, %85, %7, %29, %3
  %87 = phi i32 [ 4, %3 ], [ 4, %29 ], [ 4, %7 ], [ 4, %85 ], [ %68, %57 ], [ %82, %75 ]
  ret i32 %87
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_advance_one_SB(ptr nocapture noundef %0, ptr noundef %1, i1 noundef zeroext %2) unnamed_addr #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !35
  %5 = icmp ult ptr %4, %1
  br i1 %5, label %6, label %43

6:                                                ; preds = %3
  br i1 %2, label %7, label %30

7:                                                ; preds = %6
  %8 = ptrtoint ptr %1 to i64
  br label %9

9:                                                ; preds = %7, %18
  %10 = load ptr, ptr %0, align 8, !tbaa !35
  %11 = load i8, ptr %10, align 1, !tbaa !5
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !5
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, ptr %10, i64 %15
  store ptr %16, ptr %0, align 8, !tbaa !35
  %17 = icmp ult ptr %16, %1
  br i1 %17, label %18, label %43

18:                                               ; preds = %9
  %19 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %20 = ptrtoint ptr %16 to i64
  %21 = sub i64 %8, %20
  %22 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %23 = select i1 %22, i32 0, i32 -8161
  %24 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %16, i64 noundef %21, ptr noundef null, i32 noundef %23) #12
  %25 = tail call i64 @Perl__invlist_search(ptr noundef %19, i64 noundef %24) #12
  %26 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !5
  %28 = add i32 %27, -5
  %29 = icmp ult i32 %28, 2
  br i1 %29, label %9, label %43, !llvm.loop !269

30:                                               ; preds = %6, %34
  %31 = load ptr, ptr %0, align 8, !tbaa !35
  %32 = getelementptr inbounds i8, ptr %31, i64 1
  store ptr %32, ptr %0, align 8, !tbaa !35
  %33 = icmp ult ptr %32, %1
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %36 = load i8, ptr %32, align 1, !tbaa !5
  %37 = zext i8 %36 to i64
  %38 = tail call i64 @Perl__invlist_search(ptr noundef %35, i64 noundef %37) #12
  %39 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !5
  %41 = add i32 %40, -5
  %42 = icmp ult i32 %41, 2
  br i1 %42, label %30, label %43, !llvm.loop !270

43:                                               ; preds = %34, %30, %18, %9, %3
  %44 = phi i32 [ 4, %3 ], [ %27, %18 ], [ 4, %9 ], [ %40, %34 ], [ 4, %30 ]
  ret i32 %44
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_backup_one_WB(ptr nocapture noundef %0, ptr noundef %1, ptr nocapture noundef %2, i1 noundef zeroext %3) unnamed_addr #0 {
  %5 = load i32, ptr %0, align 4, !tbaa !5
  %6 = icmp eq i32 %5, 18
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  store i32 18, ptr %0, align 4, !tbaa !5
  %8 = and i32 %5, -3
  %9 = icmp eq i32 %8, 5
  br i1 %9, label %10, label %93

10:                                               ; preds = %7, %4
  %11 = load ptr, ptr %2, align 8, !tbaa !35
  %12 = icmp ult ptr %11, %1
  br i1 %12, label %93, label %13

13:                                               ; preds = %10
  br i1 %3, label %14, label %78

14:                                               ; preds = %13
  %15 = ptrtoint ptr %1 to i64
  %16 = icmp ugt ptr %11, %1
  br i1 %16, label %17, label %93

17:                                               ; preds = %14
  %18 = getelementptr inbounds i8, ptr %11, i64 -1
  %19 = load i8, ptr %18, align 1, !tbaa !5
  %20 = icmp slt i8 %19, 0
  %21 = icmp ugt ptr %18, %1
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %38

23:                                               ; preds = %17
  %24 = ptrtoint ptr %11 to i64
  %25 = getelementptr i8, ptr %11, i64 %15
  %26 = sub i64 0, %24
  %27 = getelementptr i8, ptr %25, i64 %26
  br label %28

28:                                               ; preds = %33, %23
  %29 = phi ptr [ %34, %33 ], [ %18, %23 ]
  %30 = load i8, ptr %29, align 1, !tbaa !5
  %31 = and i8 %30, -64
  %32 = icmp eq i8 %31, -128
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = getelementptr inbounds i8, ptr %29, i64 -1
  %35 = icmp ugt ptr %34, %1
  br i1 %35, label %28, label %36, !llvm.loop !49

36:                                               ; preds = %33
  %37 = icmp eq ptr %27, null
  br i1 %37, label %93, label %38

38:                                               ; preds = %28, %17, %36
  %39 = phi ptr [ %18, %17 ], [ %27, %36 ], [ %29, %28 ]
  br label %40

40:                                               ; preds = %38, %64
  %41 = phi ptr [ %65, %64 ], [ %39, %38 ]
  %42 = icmp ugt ptr %41, %1
  br i1 %42, label %43, label %92

43:                                               ; preds = %40
  %44 = getelementptr inbounds i8, ptr %41, i64 -1
  %45 = load i8, ptr %44, align 1, !tbaa !5
  %46 = icmp slt i8 %45, 0
  %47 = icmp ugt ptr %44, %1
  %48 = and i1 %46, %47
  br i1 %48, label %49, label %64

49:                                               ; preds = %43
  %50 = ptrtoint ptr %41 to i64
  %51 = getelementptr i8, ptr %41, i64 %15
  %52 = sub i64 0, %50
  %53 = getelementptr i8, ptr %51, i64 %52
  br label %54

54:                                               ; preds = %59, %49
  %55 = phi ptr [ %60, %59 ], [ %44, %49 ]
  %56 = load i8, ptr %55, align 1, !tbaa !5
  %57 = and i8 %56, -64
  %58 = icmp eq i8 %57, -128
  br i1 %58, label %59, label %64

59:                                               ; preds = %54
  %60 = getelementptr inbounds i8, ptr %55, i64 -1
  %61 = icmp ugt ptr %60, %1
  br i1 %61, label %54, label %62, !llvm.loop !49

62:                                               ; preds = %59
  %63 = icmp eq ptr %53, null
  br i1 %63, label %92, label %64

64:                                               ; preds = %54, %43, %62
  %65 = phi ptr [ %53, %62 ], [ %44, %43 ], [ %55, %54 ]
  %66 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %67 = ptrtoint ptr %41 to i64
  %68 = ptrtoint ptr %65 to i64
  %69 = sub i64 %67, %68
  %70 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %71 = select i1 %70, i32 0, i32 -8161
  %72 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %65, i64 noundef %69, ptr noundef null, i32 noundef %71) #12
  %73 = tail call i64 @Perl__invlist_search(ptr noundef %66, i64 noundef %72) #12
  %74 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %73
  %75 = load i32, ptr %74, align 4, !tbaa !5
  store ptr %41, ptr %2, align 8, !tbaa !35
  %76 = and i32 %75, -3
  %77 = icmp eq i32 %76, 5
  br i1 %77, label %40, label %93, !llvm.loop !271

78:                                               ; preds = %13, %82
  %79 = load ptr, ptr %2, align 8, !tbaa !35
  %80 = getelementptr inbounds i8, ptr %79, i64 -2
  %81 = icmp ult ptr %80, %1
  br i1 %81, label %92, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds i8, ptr %79, i64 -1
  store ptr %83, ptr %2, align 8, !tbaa !35
  %84 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %85 = load i8, ptr %80, align 1, !tbaa !5
  %86 = zext i8 %85 to i64
  %87 = tail call i64 @Perl__invlist_search(ptr noundef %84, i64 noundef %86) #12
  %88 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %87
  %89 = load i32, ptr %88, align 4, !tbaa !5
  %90 = and i32 %89, -3
  %91 = icmp eq i32 %90, 5
  br i1 %91, label %78, label %93, !llvm.loop !272

92:                                               ; preds = %78, %40, %62
  store ptr %1, ptr %2, align 8, !tbaa !35
  br label %93

93:                                               ; preds = %82, %64, %92, %14, %36, %10, %7
  %94 = phi i32 [ %5, %7 ], [ 4, %10 ], [ 4, %36 ], [ 4, %14 ], [ 4, %92 ], [ %75, %64 ], [ %89, %82 ]
  ret i32 %94
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_advance_one_WB(ptr nocapture noundef %0, ptr noundef %1, i1 noundef zeroext %2) unnamed_addr #0 {
  %4 = load ptr, ptr %0, align 8, !tbaa !35
  %5 = icmp ult ptr %4, %1
  br i1 %5, label %6, label %43

6:                                                ; preds = %3
  br i1 %2, label %7, label %30

7:                                                ; preds = %6
  %8 = ptrtoint ptr %1 to i64
  br label %9

9:                                                ; preds = %7, %18
  %10 = load ptr, ptr %0, align 8, !tbaa !35
  %11 = load i8, ptr %10, align 1, !tbaa !5
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !5
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, ptr %10, i64 %15
  store ptr %16, ptr %0, align 8, !tbaa !35
  %17 = icmp ult ptr %16, %1
  br i1 %17, label %18, label %43

18:                                               ; preds = %9
  %19 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %20 = ptrtoint ptr %16 to i64
  %21 = sub i64 %8, %20
  %22 = tail call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %23 = select i1 %22, i32 0, i32 -8161
  %24 = tail call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %16, i64 noundef %21, ptr noundef null, i32 noundef %23) #12
  %25 = tail call i64 @Perl__invlist_search(ptr noundef %19, i64 noundef %24) #12
  %26 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %25
  %27 = load i32, ptr %26, align 4, !tbaa !5
  %28 = and i32 %27, -3
  %29 = icmp eq i32 %28, 5
  br i1 %29, label %9, label %43, !llvm.loop !273

30:                                               ; preds = %6, %34
  %31 = load ptr, ptr %0, align 8, !tbaa !35
  %32 = getelementptr inbounds i8, ptr %31, i64 1
  store ptr %32, ptr %0, align 8, !tbaa !35
  %33 = icmp ult ptr %32, %1
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %36 = load i8, ptr %32, align 1, !tbaa !5
  %37 = zext i8 %36 to i64
  %38 = tail call i64 @Perl__invlist_search(ptr noundef %35, i64 noundef %37) #12
  %39 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %38
  %40 = load i32, ptr %39, align 4, !tbaa !5
  %41 = and i32 %40, -3
  %42 = icmp eq i32 %41, 5
  br i1 %42, label %30, label %43, !llvm.loop !274

43:                                               ; preds = %34, %30, %18, %9, %3
  %44 = phi i32 [ 4, %3 ], [ %27, %18 ], [ 4, %9 ], [ %40, %34 ], [ 4, %30 ]
  ret i32 %44
}

declare i64 @Perl_sv_pos_u2b_flags(ptr noundef, i64 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @Perl_sv_force_normal_flags(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_sv_setsv_cow(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @Perl_safesysrealloc(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #7

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @S_regmatch(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca [14 x i8], align 1
  %8 = alloca i64, align 8
  %9 = alloca [14 x i8], align 1
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i8, align 1
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  %20 = alloca ptr, align 8
  %21 = getelementptr %struct.regmatch_info, ptr %0, i64 0, i32 14
  %22 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %23 = icmp ne i8 %22, 0
  %24 = tail call zeroext i1 @Perl_ckwarn(i32 noundef 44) #12
  %25 = xor i1 %24, true
  %26 = zext i1 %25 to i32
  %27 = load ptr, ptr %0, align 8, !tbaa !62
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8, !tbaa !5
  %30 = getelementptr inbounds %struct.regexp, ptr %29, i64 0, i32 14
  %31 = load ptr, ptr %30, align 8, !tbaa !20
  %32 = getelementptr inbounds %struct.regexp, ptr %29, i64 0, i32 12
  %33 = load i32, ptr %32, align 8, !tbaa !69
  %34 = mul i32 %33, 3
  %35 = tail call i32 @llvm.umax.i32(i32 %34, i32 1000)
  %36 = getelementptr inbounds %struct.regexp, ptr %29, i64 0, i32 13
  %37 = load i32, ptr %36, align 4, !tbaa !36
  %38 = and i32 %37, 16
  %39 = icmp ne i32 %38, 0
  %40 = load ptr, ptr @PL_replgv, align 8, !tbaa !35
  %41 = getelementptr inbounds %struct.gv, ptr %40, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load ptr, ptr %42, align 8, !tbaa !35
  %44 = icmp eq ptr %43, null
  br i1 %44, label %45, label %50

45:                                               ; preds = %3
  %46 = tail call ptr @Perl_gv_add_by_type(ptr noundef nonnull %40, i32 noundef 0) #12
  %47 = getelementptr inbounds %struct.gv, ptr %46, i64 0, i32 3
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  %49 = load ptr, ptr %48, align 8, !tbaa !35
  br label %50

50:                                               ; preds = %3, %45
  %51 = phi ptr [ %49, %45 ], [ %43, %3 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #12
  store i32 0, ptr %4, align 4, !tbaa !73
  %52 = getelementptr %struct.regmatch_info, ptr %0, i64 0, i32 13
  %53 = load i8, ptr %52, align 1, !tbaa !30, !range !42, !noundef !43
  %54 = getelementptr inbounds %struct.sv, ptr %51, i64 0, i32 1
  %55 = load i32, ptr %54, align 8, !tbaa !61
  %56 = add i32 %55, 1
  store i32 %56, ptr %54, align 8, !tbaa !61
  tail call void @Perl_save_pushptr(ptr noundef %51, i32 noundef 11) #12
  %57 = load ptr, ptr @PL_regmatch_state, align 8, !tbaa !35
  %58 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 2
  %59 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 1
  %60 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 6
  %61 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 15
  %62 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 7
  %63 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 9
  %64 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 10
  %65 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 11
  %66 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 3
  %67 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 8
  %68 = select i1 %23, i8 4, i8 5
  %69 = select i1 %23, i8 6, i8 0
  %70 = select i1 %23, i8 2, i8 3
  %71 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 5
  %72 = getelementptr inbounds %struct.regmatch_info, ptr %0, i64 0, i32 4
  br label %73

73:                                               ; preds = %50, %4714
  %74 = phi i8 [ 0, %50 ], [ %4717, %4714 ]
  %75 = phi i8 [ %53, %50 ], [ %169, %4714 ]
  %76 = phi ptr [ null, %50 ], [ %4718, %4714 ]
  %77 = phi ptr [ null, %50 ], [ %4719, %4714 ]
  %78 = phi i8 [ 0, %50 ], [ %4720, %4714 ]
  %79 = phi ptr [ null, %50 ], [ %4721, %4714 ]
  %80 = phi ptr [ null, %50 ], [ %4722, %4714 ]
  %81 = phi i32 [ 0, %50 ], [ %4723, %4714 ]
  %82 = phi i8 [ 0, %50 ], [ %4724, %4714 ]
  %83 = phi i8 [ 0, %50 ], [ %4725, %4714 ]
  %84 = phi i32 [ 0, %50 ], [ %4726, %4714 ]
  %85 = phi ptr [ null, %50 ], [ %173, %4714 ]
  %86 = phi ptr [ null, %50 ], [ %174, %4714 ]
  %87 = phi ptr [ null, %50 ], [ %175, %4714 ]
  %88 = phi i8 [ 0, %50 ], [ %176, %4714 ]
  %89 = phi i8 [ 0, %50 ], [ %177, %4714 ]
  %90 = phi ptr [ null, %50 ], [ %179, %4714 ]
  %91 = phi ptr [ null, %50 ], [ %4715, %4714 ]
  %92 = phi ptr [ null, %50 ], [ %4716, %4714 ]
  %93 = phi ptr [ null, %50 ], [ %182, %4714 ]
  %94 = phi i32 [ 0, %50 ], [ %4727, %4714 ]
  %95 = phi i32 [ 0, %50 ], [ %184, %4714 ]
  %96 = phi ptr [ %1, %50 ], [ %4728, %4714 ]
  %97 = phi ptr [ undef, %50 ], [ %4729, %4714 ]
  %98 = phi ptr [ %2, %50 ], [ %4729, %4714 ]
  %99 = phi ptr [ %57, %50 ], [ %188, %4714 ]
  %100 = phi ptr [ %31, %50 ], [ %189, %4714 ]
  %101 = phi ptr [ %29, %50 ], [ %190, %4714 ]
  %102 = phi ptr [ %27, %50 ], [ %191, %4714 ]
  br label %103

103:                                              ; preds = %73, %4821
  %104 = phi i8 [ %168, %4821 ], [ %74, %73 ]
  %105 = phi i8 [ %4779, %4821 ], [ %75, %73 ]
  %106 = phi ptr [ %4780, %4821 ], [ %76, %73 ]
  %107 = phi ptr [ %4781, %4821 ], [ %77, %73 ]
  %108 = phi i8 [ %4782, %4821 ], [ %78, %73 ]
  %109 = phi ptr [ %4783, %4821 ], [ %79, %73 ]
  %110 = phi ptr [ %4784, %4821 ], [ %80, %73 ]
  %111 = phi i32 [ %4785, %4821 ], [ %81, %73 ]
  %112 = phi i8 [ %4786, %4821 ], [ %82, %73 ]
  %113 = phi i8 [ %4787, %4821 ], [ %83, %73 ]
  %114 = phi ptr [ %4788, %4821 ], [ %85, %73 ]
  %115 = phi ptr [ %4789, %4821 ], [ %86, %73 ]
  %116 = phi ptr [ %175, %4821 ], [ %87, %73 ]
  %117 = phi i8 [ %4790, %4821 ], [ %88, %73 ]
  %118 = phi i8 [ %4791, %4821 ], [ %89, %73 ]
  %119 = phi ptr [ %4792, %4821 ], [ %90, %73 ]
  %120 = phi ptr [ %4793, %4821 ], [ %91, %73 ]
  %121 = phi ptr [ %4794, %4821 ], [ %92, %73 ]
  %122 = phi ptr [ %4795, %4821 ], [ %93, %73 ]
  %123 = phi i32 [ %4796, %4821 ], [ %94, %73 ]
  %124 = phi i32 [ %4804, %4821 ], [ %95, %73 ]
  %125 = phi ptr [ %4797, %4821 ], [ %96, %73 ]
  %126 = phi ptr [ %4799, %4821 ], [ %97, %73 ]
  %127 = phi ptr [ %4800, %4821 ], [ %98, %73 ]
  %128 = phi ptr [ %4822, %4821 ], [ %99, %73 ]
  %129 = phi ptr [ %4801, %4821 ], [ %100, %73 ]
  %130 = phi ptr [ %4802, %4821 ], [ %101, %73 ]
  %131 = phi ptr [ %4803, %4821 ], [ %102, %73 ]
  br label %132

132:                                              ; preds = %3242, %103
  %133 = phi i8 [ %104, %103 ], [ %168, %3242 ]
  %134 = phi i8 [ %105, %103 ], [ %169, %3242 ]
  %135 = phi i32 [ %111, %103 ], [ %170, %3242 ]
  %136 = phi i8 [ %112, %103 ], [ %212, %3242 ]
  %137 = phi i8 [ %113, %103 ], [ %3243, %3242 ]
  %138 = phi ptr [ %114, %103 ], [ %173, %3242 ]
  %139 = phi ptr [ %115, %103 ], [ %174, %3242 ]
  %140 = phi ptr [ %116, %103 ], [ %175, %3242 ]
  %141 = phi i8 [ %117, %103 ], [ %3244, %3242 ]
  %142 = phi i8 [ %118, %103 ], [ %3245, %3242 ]
  %143 = phi ptr [ %119, %103 ], [ %179, %3242 ]
  %144 = phi ptr [ %120, %103 ], [ %180, %3242 ]
  %145 = phi ptr [ %121, %103 ], [ %181, %3242 ]
  %146 = phi ptr [ %122, %103 ], [ %182, %3242 ]
  %147 = phi i32 [ %123, %103 ], [ %183, %3242 ]
  %148 = phi i32 [ %124, %103 ], [ %184, %3242 ]
  %149 = phi ptr [ %125, %103 ], [ %3246, %3242 ]
  %150 = phi ptr [ %126, %103 ], [ %186, %3242 ]
  %151 = phi ptr [ %127, %103 ], [ %3247, %3242 ]
  %152 = phi ptr [ %128, %103 ], [ %188, %3242 ]
  %153 = phi ptr [ %129, %103 ], [ %189, %3242 ]
  %154 = phi ptr [ %130, %103 ], [ %190, %3242 ]
  %155 = phi ptr [ %131, %103 ], [ %191, %3242 ]
  %156 = icmp eq ptr %151, null
  br i1 %156, label %4823, label %157

157:                                              ; preds = %132
  %158 = getelementptr inbounds %struct.regnode, ptr %151, i64 0, i32 2
  %159 = load i16, ptr %158, align 2, !tbaa !275
  %160 = zext i16 %159 to i64
  %161 = getelementptr inbounds %struct.regnode, ptr %151, i64 %160
  %162 = icmp eq i16 %159, 0
  %163 = select i1 %162, ptr null, ptr %161
  %164 = getelementptr inbounds %struct.regnode, ptr %151, i64 0, i32 1
  %165 = load i8, ptr %164, align 1, !tbaa !56
  %166 = zext i8 %165 to i32
  br label %167

167:                                              ; preds = %157, %4897, %4965
  %168 = phi i8 [ %4919, %4965 ], [ %4857, %4897 ], [ %133, %157 ]
  %169 = phi i8 [ %4920, %4965 ], [ %4856, %4897 ], [ %134, %157 ]
  %170 = phi i32 [ %4921, %4965 ], [ %4855, %4897 ], [ %135, %157 ]
  %171 = phi i8 [ %4922, %4965 ], [ %4854, %4897 ], [ %136, %157 ]
  %172 = phi i8 [ %4923, %4965 ], [ %4853, %4897 ], [ %137, %157 ]
  %173 = phi ptr [ %4924, %4965 ], [ %4852, %4897 ], [ %138, %157 ]
  %174 = phi ptr [ %4925, %4965 ], [ %4851, %4897 ], [ %139, %157 ]
  %175 = phi ptr [ %4926, %4965 ], [ %4850, %4897 ], [ %140, %157 ]
  %176 = phi i8 [ %4927, %4965 ], [ %4849, %4897 ], [ %141, %157 ]
  %177 = phi i8 [ %4928, %4965 ], [ %4848, %4897 ], [ %142, %157 ]
  %178 = phi i32 [ %4968, %4965 ], [ %4901, %4897 ], [ %166, %157 ]
  %179 = phi ptr [ %4929, %4965 ], [ %4847, %4897 ], [ %143, %157 ]
  %180 = phi ptr [ %4930, %4965 ], [ %4846, %4897 ], [ %144, %157 ]
  %181 = phi ptr [ %4931, %4965 ], [ %4845, %4897 ], [ %145, %157 ]
  %182 = phi ptr [ %4966, %4965 ], [ %4891, %4897 ], [ %146, %157 ]
  %183 = phi i32 [ %4933, %4965 ], [ %4843, %4897 ], [ %147, %157 ]
  %184 = phi i32 [ %4960, %4965 ], [ %4889, %4897 ], [ %148, %157 ]
  %185 = phi ptr [ %4959, %4965 ], [ %4898, %4897 ], [ %149, %157 ]
  %186 = phi ptr [ %4936, %4965 ], [ %4840, %4897 ], [ %163, %157 ]
  %187 = phi ptr [ %4937, %4965 ], [ %4839, %4897 ], [ %151, %157 ]
  %188 = phi ptr [ %4957, %4965 ], [ %4844, %4897 ], [ %152, %157 ]
  %189 = phi ptr [ %4939, %4965 ], [ %4837, %4897 ], [ %153, %157 ]
  %190 = phi ptr [ %4940, %4965 ], [ %4836, %4897 ], [ %154, %157 ]
  %191 = phi ptr [ %4941, %4965 ], [ %4835, %4897 ], [ %155, %157 ]
  %192 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 4
  %193 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 15
  %194 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 5
  %195 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 17
  %196 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 6
  %197 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 16
  %198 = getelementptr inbounds i8, ptr %188, i64 52
  %199 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 7
  %200 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 11
  %201 = getelementptr inbounds i8, ptr %188, i64 44
  %202 = icmp eq ptr %180, null
  %203 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 8
  %204 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 1
  %205 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 8
  %206 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 10
  %207 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 2
  %208 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 3
  %209 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 12
  %210 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13, i64 6
  br label %211

211:                                              ; preds = %3461, %167
  %212 = phi i8 [ %171, %167 ], [ %3363, %3461 ]
  %213 = phi i32 [ %178, %167 ], [ 115, %3461 ]
  %214 = phi ptr [ %185, %167 ], [ %3365, %3461 ]
  %215 = phi ptr [ %187, %167 ], [ %3366, %3461 ]
  %216 = load ptr, ptr %58, align 8, !tbaa !27
  %217 = icmp ult ptr %214, %216
  br i1 %217, label %218, label %221

218:                                              ; preds = %211
  %219 = load i8, ptr %214, align 1, !tbaa !5
  %220 = zext i8 %219 to i32
  br label %221

221:                                              ; preds = %211, %218
  %222 = phi i32 [ %220, %218 ], [ -10, %211 ]
  switch i32 %213, label %4673 [
    i32 2, label %223
    i32 3, label %226
    i32 7, label %235
    i32 90, label %238
    i32 133, label %248
    i32 5, label %253
    i32 4, label %257
    i32 6, label %266
    i32 17, label %268
    i32 18, label %270
    i32 16, label %274
    i32 73, label %278
    i32 72, label %290
    i32 95, label %548
    i32 32, label %760
    i32 31, label %760
    i32 34, label %854
    i32 38, label %845
    i32 37, label %850
    i32 35, label %850
    i32 39, label %855
    i32 36, label %855
    i32 33, label %856
    i32 13, label %912
    i32 9, label %911
    i32 12, label %1092
    i32 8, label %1091
    i32 15, label %1097
    i32 11, label %1096
    i32 14, label %1123
    i32 10, label %1122
    i32 20, label %1563
    i32 19, label %1563
    i32 26, label %1596
    i32 22, label %1595
    i32 25, label %1630
    i32 21, label %1629
    i32 28, label %1632
    i32 24, label %1636
    i32 27, label %1655
    i32 23, label %1654
    i32 29, label %1840
    i32 58, label %1901
    i32 60, label %1897
    i32 59, label %1898
    i32 57, label %1899
    i32 56, label %1900
    i32 53, label %1944
    i32 55, label %1940
    i32 54, label %1941
    i32 52, label %1942
    i32 51, label %1943
    i32 40, label %4712
    i32 41, label %4712
    i32 77, label %2010
    i32 76, label %2010
    i32 68, label %2045
    i32 96, label %2658
    i32 97, label %2722
    i32 49, label %2763
    i32 50, label %2775
    i32 83, label %2795
    i32 67, label %2834
    i32 78, label %2848
    i32 79, label %2884
    i32 80, label %4713
    i32 66, label %2895
    i32 70, label %2911
    i32 47, label %2914
    i32 98, label %2933
    i32 99, label %2935
    i32 48, label %2942
    i32 106, label %3067
    i32 108, label %3067
    i32 109, label %3069
    i32 103, label %3088
    i32 101, label %3088
    i32 105, label %3111
    i32 107, label %3132
    i32 62, label %3181
    i32 30, label %3188
    i32 89, label %3195
    i32 131, label %3208
    i32 110, label %4824
    i32 111, label %3212
    i32 69, label %4714
    i32 46, label %3248
    i32 112, label %3278
    i32 113, label %3339
    i32 115, label %3569
    i32 42, label %3675
    i32 43, label %3679
    i32 45, label %3683
    i32 44, label %3707
    i32 119, label %3894
    i32 121, label %4079
    i32 123, label %4283
    i32 0, label %4346
    i32 1, label %4824
    i32 65, label %4398
    i32 64, label %4399
    i32 63, label %4400
    i32 117, label %4468
    i32 116, label %4472
    i32 61, label %4497
    i32 88, label %4504
    i32 85, label %4505
    i32 125, label %4918
    i32 82, label %4914
    i32 86, label %4519
    i32 126, label %4527
    i32 127, label %4529
    i32 87, label %4561
    i32 129, label %4585
    i32 91, label %4609
  ]

223:                                              ; preds = %221
  %224 = load ptr, ptr %59, align 8, !tbaa !26
  %225 = icmp eq ptr %214, %224
  br i1 %225, label %4714, label %4918

226:                                              ; preds = %221
  %227 = load ptr, ptr %59, align 8, !tbaa !26
  %228 = icmp eq ptr %214, %227
  br i1 %228, label %4714, label %229

229:                                              ; preds = %226
  %230 = icmp slt i32 %222, 0
  br i1 %230, label %4918, label %231

231:                                              ; preds = %229
  %232 = getelementptr inbounds i8, ptr %214, i64 -1
  %233 = load i8, ptr %232, align 1, !tbaa !5
  %234 = icmp eq i8 %233, 10
  br i1 %234, label %4714, label %4918

235:                                              ; preds = %221
  %236 = load ptr, ptr %71, align 8, !tbaa !200
  %237 = icmp eq ptr %214, %236
  br i1 %237, label %4714, label %4918

238:                                              ; preds = %221
  %239 = load ptr, ptr %195, align 8, !tbaa !64
  %240 = load i64, ptr %239, align 8, !tbaa !65
  %241 = trunc i64 %240 to i32
  %242 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 %241, ptr %242, align 8, !tbaa !5
  %243 = load ptr, ptr %59, align 8, !tbaa !26
  %244 = ptrtoint ptr %214 to i64
  %245 = ptrtoint ptr %243 to i64
  %246 = sub i64 %244, %245
  %247 = load ptr, ptr %195, align 8, !tbaa !64
  store i64 %246, ptr %247, align 8, !tbaa !65
  store i32 132, ptr %188, align 8, !tbaa !276
  br label %4778

248:                                              ; preds = %221
  %249 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %250 = load i32, ptr %249, align 8, !tbaa !5
  %251 = sext i32 %250 to i64
  %252 = load ptr, ptr %195, align 8, !tbaa !64
  store i64 %251, ptr %252, align 8, !tbaa !65
  br label %4918

253:                                              ; preds = %221
  %254 = icmp sgt i32 %222, -1
  %255 = icmp ne i32 %222, 10
  %256 = and i1 %254, %255
  br i1 %256, label %4918, label %4714

257:                                              ; preds = %221
  %258 = icmp sgt i32 %222, -1
  %259 = icmp ne i32 %222, 10
  %260 = and i1 %258, %259
  %261 = ptrtoint ptr %216 to i64
  %262 = ptrtoint ptr %214 to i64
  %263 = sub i64 %261, %262
  %264 = icmp sgt i64 %263, 1
  %265 = or i1 %264, %260
  br i1 %265, label %4918, label %4714

266:                                              ; preds = %221
  %267 = icmp slt i32 %222, 0
  br i1 %267, label %4714, label %4918

268:                                              ; preds = %221
  %269 = icmp slt i32 %222, 0
  br i1 %269, label %4918, label %4701

270:                                              ; preds = %221
  %271 = icmp slt i32 %222, 0
  br i1 %271, label %4918, label %272

272:                                              ; preds = %270
  %273 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4714

274:                                              ; preds = %221
  %275 = icmp slt i32 %222, 0
  %276 = icmp eq i32 %222, 10
  %277 = or i1 %275, %276
  br i1 %277, label %4918, label %4701

278:                                              ; preds = %221
  %279 = icmp slt i32 %222, 0
  br i1 %279, label %290, label %280

280:                                              ; preds = %278
  %281 = lshr i32 %222, 3
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds %struct.regnode_charclass, ptr %215, i64 0, i32 4, i64 %282
  %284 = load i8, ptr %283, align 1, !tbaa !5
  %285 = zext i8 %284 to i32
  %286 = and i32 %222, 7
  %287 = shl nuw nsw i32 1, %286
  %288 = and i32 %287, %285
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %4918, label %290

290:                                              ; preds = %221, %278, %280
  %291 = load i8, ptr %215, align 2, !tbaa !76
  switch i8 %291, label %294 [
    i8 31, label %296
    i8 32, label %292
    i8 36, label %293
    i8 38, label %295
  ]

292:                                              ; preds = %290
  br label %296

293:                                              ; preds = %290
  br label %296

294:                                              ; preds = %290
  br label %296

295:                                              ; preds = %290
  br label %296

296:                                              ; preds = %290, %295, %292, %294, %293
  %297 = phi i8 [ %69, %292 ], [ %68, %293 ], [ %70, %294 ], [ %22, %290 ], [ 7, %295 ]
  %298 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %299 = load ptr, ptr %298, align 8, !tbaa !161
  %300 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %301 = load i32, ptr %300, align 4, !tbaa !162
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds %struct.reg_data, ptr %299, i64 0, i32 2, i64 %302
  %304 = load ptr, ptr %303, align 8, !tbaa !35
  %305 = add i32 %301, 1
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds %struct.reg_data, ptr %299, i64 0, i32 2, i64 %306
  %308 = load ptr, ptr %307, align 8, !tbaa !35
  %309 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 9
  %310 = load i32, ptr %309, align 4, !tbaa !278
  %311 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 5
  %312 = load ptr, ptr %311, align 8, !tbaa !170
  %313 = icmp eq ptr %312, null
  br i1 %313, label %337, label %314

314:                                              ; preds = %296
  %315 = icmp slt i32 %222, 0
  br i1 %315, label %326, label %316

316:                                              ; preds = %314
  %317 = lshr i32 %222, 3
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i8, ptr %312, i64 %318
  %320 = load i8, ptr %319, align 1, !tbaa !5
  %321 = zext i8 %320 to i32
  %322 = and i32 %222, 7
  %323 = shl nuw nsw i32 1, %322
  %324 = and i32 %323, %321
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %337

326:                                              ; preds = %316, %314
  %327 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 3
  %328 = load ptr, ptr %327, align 8, !tbaa !279
  %329 = zext i32 %310 to i64
  %330 = getelementptr inbounds %struct._reg_trie_state, ptr %328, i64 %329
  %331 = load i16, ptr %330, align 8, !tbaa !172
  %332 = icmp eq i16 %331, 0
  br i1 %332, label %546, label %333

333:                                              ; preds = %326
  %334 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 6
  %335 = load ptr, ptr %334, align 8, !tbaa !280
  %336 = icmp eq ptr %335, null
  br i1 %336, label %4714, label %337

337:                                              ; preds = %333, %316, %296
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #12
  store i64 0, ptr %5, align 8, !tbaa !169
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #12
  store i64 0, ptr %6, align 8, !tbaa !169
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %7) #12
  %338 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 6
  %339 = load ptr, ptr %338, align 8, !tbaa !280
  store ptr %339, ptr %199, align 8, !tbaa !5
  store ptr %215, ptr %205, align 8, !tbaa !5
  store ptr null, ptr %206, align 8, !tbaa !5
  store i8 0, ptr %196, align 8, !tbaa !5
  %340 = getelementptr inbounds i8, ptr %188, i64 76
  store i16 0, ptr %340, align 4, !tbaa !5
  %341 = icmp eq i32 %310, 0
  br i1 %341, label %544, label %342

342:                                              ; preds = %337
  %343 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 3
  %344 = getelementptr inbounds i8, ptr %188, i64 78
  %345 = icmp eq ptr %308, null
  %346 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 2
  %347 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 8
  %348 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 1
  %349 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 4
  br label %350

350:                                              ; preds = %342, %518
  %351 = phi i64 [ 0, %342 ], [ %494, %518 ]
  %352 = phi i32 [ %310, %342 ], [ %520, %518 ]
  %353 = phi ptr [ %214, %342 ], [ %522, %518 ]
  %354 = phi ptr [ null, %342 ], [ %491, %518 ]
  %355 = phi i32 [ 0, %342 ], [ %493, %518 ]
  %356 = phi i32 [ 0, %342 ], [ %381, %518 ]
  %357 = load ptr, ptr %58, align 8, !tbaa !27
  %358 = icmp ugt ptr %353, %357
  br i1 %358, label %524, label %359

359:                                              ; preds = %350
  %360 = load ptr, ptr %343, align 8, !tbaa !279
  %361 = zext i32 %352 to i64
  %362 = getelementptr inbounds %struct._reg_trie_state, ptr %360, i64 %361, i32 1
  %363 = load i32, ptr %362, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #12
  store i64 0, ptr %8, align 8, !tbaa !169
  %364 = getelementptr inbounds %struct._reg_trie_state, ptr %360, i64 %361
  %365 = load i16, ptr %364, align 8, !tbaa !172
  %366 = icmp eq i16 %365, 0
  br i1 %366, label %380, label %367

367:                                              ; preds = %359
  %368 = icmp eq i32 %356, 0
  br i1 %368, label %369, label %374

369:                                              ; preds = %367
  %370 = load i8, ptr %196, align 8, !tbaa !5, !range !42, !noundef !43
  %371 = icmp eq i8 %370, 0
  %372 = select i1 %371, ptr %353, ptr %214
  %373 = select i1 %371, i32 %355, i32 0
  store ptr %372, ptr %206, align 8, !tbaa !5
  store i32 %373, ptr %200, align 8, !tbaa !5
  br label %374

374:                                              ; preds = %369, %367
  %375 = load i16, ptr %340, align 4, !tbaa !5
  %376 = add i16 %375, -1
  %377 = icmp ult i16 %376, %365
  br i1 %377, label %379, label %378

378:                                              ; preds = %374
  store i16 %365, ptr %340, align 4, !tbaa !5
  br label %379

379:                                              ; preds = %374, %378
  store i16 %365, ptr %344, align 2, !tbaa !5
  br label %380

380:                                              ; preds = %379, %359
  %381 = phi i32 [ 1, %379 ], [ %356, %359 ]
  %382 = icmp eq i32 %363, 0
  br i1 %382, label %516, label %383

383:                                              ; preds = %380
  %384 = icmp eq i64 %351, 0
  br i1 %384, label %385, label %388

385:                                              ; preds = %383
  %386 = load ptr, ptr %58, align 8, !tbaa !27
  %387 = icmp ult ptr %353, %386
  br i1 %387, label %388, label %516

388:                                              ; preds = %385, %383
  switch i8 %297, label %460 [
    i8 7, label %390
    i8 4, label %389
    i8 2, label %390
    i8 5, label %424
    i8 3, label %425
    i8 6, label %455
    i8 1, label %455
    i8 0, label %457
  ]

389:                                              ; preds = %388
  br label %390

390:                                              ; preds = %388, %389, %388
  %391 = phi i8 [ 6, %389 ], [ 2, %388 ], [ 2, %388 ]
  br i1 %384, label %398, label %392

392:                                              ; preds = %390
  %393 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %354, i64 noundef 13, ptr noundef nonnull %5, i32 noundef %26) #12
  store i64 %393, ptr %8, align 8, !tbaa !169
  %394 = load i64, ptr %5, align 8, !tbaa !169
  %395 = load i64, ptr %6, align 8, !tbaa !169
  %396 = sub i64 %395, %394
  store i64 %396, ptr %6, align 8, !tbaa !169
  %397 = getelementptr inbounds i8, ptr %354, i64 %394
  store i64 0, ptr %5, align 8, !tbaa !169
  br label %461

398:                                              ; preds = %390
  %399 = call i64 @Perl__to_utf8_fold_flags(ptr noundef %353, ptr noundef nonnull %7, ptr noundef nonnull %6, i8 noundef zeroext %391) #12
  store i64 %399, ptr %8, align 8, !tbaa !169
  %400 = load i8, ptr %353, align 1, !tbaa !5
  %401 = zext i8 %400 to i64
  %402 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %401
  %403 = load i8, ptr %402, align 1, !tbaa !5
  %404 = zext i8 %403 to i64
  store i64 %404, ptr %5, align 8, !tbaa !169
  %405 = icmp ult i64 %399, 128
  br i1 %405, label %419, label %406

406:                                              ; preds = %398
  %407 = icmp ult i64 %399, 2048
  br i1 %407, label %419, label %408

408:                                              ; preds = %406
  %409 = icmp ult i64 %399, 65536
  br i1 %409, label %419, label %410

410:                                              ; preds = %408
  %411 = icmp ult i64 %399, 2097152
  br i1 %411, label %419, label %412

412:                                              ; preds = %410
  %413 = icmp ult i64 %399, 67108864
  br i1 %413, label %419, label %414

414:                                              ; preds = %412
  %415 = icmp ult i64 %399, 2147483648
  br i1 %415, label %419, label %416

416:                                              ; preds = %414
  %417 = icmp ult i64 %399, 68719476736
  %418 = select i1 %417, i64 7, i64 13
  br label %419

419:                                              ; preds = %406, %410, %416, %414, %412, %408, %398
  %420 = phi i64 [ 1, %398 ], [ 2, %406 ], [ 3, %408 ], [ 4, %410 ], [ 5, %412 ], [ %418, %416 ], [ 6, %414 ]
  %421 = load i64, ptr %6, align 8, !tbaa !169
  %422 = sub i64 %421, %420
  store i64 %422, ptr %6, align 8, !tbaa !169
  %423 = getelementptr inbounds i8, ptr %7, i64 %420
  br label %461

424:                                              ; preds = %388
  br label %425

425:                                              ; preds = %388, %424
  %426 = phi i32 [ 2, %388 ], [ 6, %424 ]
  br i1 %384, label %433, label %427

427:                                              ; preds = %425
  %428 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %354, i64 noundef 13, ptr noundef nonnull %5, i32 noundef %26) #12
  store i64 %428, ptr %8, align 8, !tbaa !169
  %429 = load i64, ptr %5, align 8, !tbaa !169
  %430 = load i64, ptr %6, align 8, !tbaa !169
  %431 = sub i64 %430, %429
  store i64 %431, ptr %6, align 8, !tbaa !169
  %432 = getelementptr inbounds i8, ptr %354, i64 %429
  store i64 0, ptr %5, align 8, !tbaa !169
  br label %461

433:                                              ; preds = %425
  store i64 1, ptr %5, align 8, !tbaa !169
  %434 = load i8, ptr %353, align 1, !tbaa !5
  %435 = call i64 @Perl__to_fold_latin1(i8 noundef zeroext %434, ptr noundef nonnull %7, ptr noundef nonnull %6, i32 noundef %426) #12
  store i64 %435, ptr %8, align 8, !tbaa !169
  %436 = icmp ult i64 %435, 128
  br i1 %436, label %450, label %437

437:                                              ; preds = %433
  %438 = icmp ult i64 %435, 2048
  br i1 %438, label %450, label %439

439:                                              ; preds = %437
  %440 = icmp ult i64 %435, 65536
  br i1 %440, label %450, label %441

441:                                              ; preds = %439
  %442 = icmp ult i64 %435, 2097152
  br i1 %442, label %450, label %443

443:                                              ; preds = %441
  %444 = icmp ult i64 %435, 67108864
  br i1 %444, label %450, label %445

445:                                              ; preds = %443
  %446 = icmp ult i64 %435, 2147483648
  br i1 %446, label %450, label %447

447:                                              ; preds = %445
  %448 = icmp ult i64 %435, 68719476736
  %449 = select i1 %448, i64 7, i64 13
  br label %450

450:                                              ; preds = %437, %441, %447, %445, %443, %439, %433
  %451 = phi i64 [ 1, %433 ], [ 2, %437 ], [ 3, %439 ], [ 4, %441 ], [ 5, %443 ], [ %449, %447 ], [ 6, %445 ]
  %452 = load i64, ptr %6, align 8, !tbaa !169
  %453 = sub i64 %452, %451
  store i64 %453, ptr %6, align 8, !tbaa !169
  %454 = getelementptr inbounds i8, ptr %7, i64 %451
  br label %461

455:                                              ; preds = %388, %388
  %456 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %353, i64 noundef 13, ptr noundef nonnull %5, i32 noundef %26) #12
  store i64 %456, ptr %8, align 8, !tbaa !169
  br label %461

457:                                              ; preds = %388
  %458 = load i8, ptr %353, align 1, !tbaa !5
  %459 = zext i8 %458 to i64
  store i64 %459, ptr %8, align 8, !tbaa !169
  store i64 1, ptr %5, align 8, !tbaa !169
  br label %465

460:                                              ; preds = %388
  unreachable

461:                                              ; preds = %427, %450, %392, %419, %455
  %462 = phi i64 [ %456, %455 ], [ %399, %419 ], [ %393, %392 ], [ %435, %450 ], [ %428, %427 ]
  %463 = phi ptr [ %354, %455 ], [ %423, %419 ], [ %397, %392 ], [ %454, %450 ], [ %432, %427 ]
  %464 = icmp ult i64 %462, 256
  br i1 %464, label %465, label %471

465:                                              ; preds = %457, %461
  %466 = phi ptr [ %354, %457 ], [ %463, %461 ]
  %467 = phi i64 [ %459, %457 ], [ %462, %461 ]
  %468 = load ptr, ptr %346, align 8, !tbaa !179
  %469 = getelementptr inbounds i16, ptr %468, i64 %467
  %470 = load i16, ptr %469, align 2, !tbaa !89
  br label %490

471:                                              ; preds = %461
  br i1 %345, label %490, label %472

472:                                              ; preds = %471
  %473 = call ptr @Perl_hv_common_key_len(ptr noundef nonnull %308, ptr noundef nonnull %8, i32 noundef 8, i32 noundef 32, ptr noundef null, i32 noundef 0) #12
  %474 = icmp eq ptr %473, null
  br i1 %474, label %490, label %475

475:                                              ; preds = %472
  %476 = load ptr, ptr %473, align 8, !tbaa !35
  %477 = getelementptr inbounds %struct.sv, ptr %476, i64 0, i32 2
  %478 = load i32, ptr %477, align 4, !tbaa !15
  %479 = and i32 %478, 2097408
  %480 = icmp eq i32 %479, 256
  br i1 %480, label %481, label %485

481:                                              ; preds = %475
  %482 = load ptr, ptr %476, align 8, !tbaa !38
  %483 = getelementptr inbounds %struct.xpviv, ptr %482, i64 0, i32 4
  %484 = load i64, ptr %483, align 8, !tbaa !5
  br label %487

485:                                              ; preds = %475
  %486 = call i64 @Perl_sv_2iv_flags(ptr noundef nonnull %476, i32 noundef 2) #12
  br label %487

487:                                              ; preds = %485, %481
  %488 = phi i64 [ %484, %481 ], [ %486, %485 ]
  %489 = trunc i64 %488 to i16
  br label %490

490:                                              ; preds = %472, %487, %471, %465
  %491 = phi ptr [ %466, %465 ], [ %463, %471 ], [ %463, %487 ], [ %463, %472 ]
  %492 = phi i16 [ %470, %465 ], [ 0, %471 ], [ %489, %487 ], [ 0, %472 ]
  %493 = add i32 %355, 1
  %494 = load i64, ptr %6, align 8, !tbaa !169
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %497, label %496

496:                                              ; preds = %490
  store i8 1, ptr %196, align 8, !tbaa !5
  br label %497

497:                                              ; preds = %496, %490
  %498 = icmp eq i16 %492, 0
  br i1 %498, label %517, label %499

499:                                              ; preds = %497
  %500 = zext i16 %492 to i32
  %501 = add i32 %363, %500
  %502 = load i16, ptr %347, align 8, !tbaa !180
  %503 = zext i16 %502 to i32
  %504 = xor i32 %503, -1
  %505 = add i32 %501, %504
  %506 = icmp sgt i32 %505, -1
  br i1 %506, label %507, label %517

507:                                              ; preds = %499
  %508 = load i32, ptr %348, align 4, !tbaa !181
  %509 = icmp ult i32 %505, %508
  br i1 %509, label %510, label %517

510:                                              ; preds = %507
  %511 = load ptr, ptr %349, align 8, !tbaa !182
  %512 = zext i32 %505 to i64
  %513 = getelementptr inbounds %struct._reg_trie_trans, ptr %511, i64 %512, i32 1
  %514 = load i32, ptr %513, align 4, !tbaa !183
  %515 = icmp eq i32 %514, %352
  br i1 %515, label %518, label %517

516:                                              ; preds = %385, %380
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  br label %524

517:                                              ; preds = %510, %507, %499, %497
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  br label %524

518:                                              ; preds = %510
  %519 = getelementptr inbounds %struct._reg_trie_trans, ptr %511, i64 %512
  %520 = load i32, ptr %519, align 4, !tbaa !185
  %521 = load i64, ptr %5, align 8, !tbaa !169
  %522 = getelementptr inbounds i8, ptr %353, i64 %521
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #12
  %523 = icmp eq i32 %520, 0
  br i1 %523, label %524, label %350, !llvm.loop !281

524:                                              ; preds = %350, %518, %516, %517
  %525 = phi i32 [ %381, %516 ], [ %381, %517 ], [ %381, %518 ], [ %356, %350 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %544, label %527

527:                                              ; preds = %524
  %528 = getelementptr inbounds i8, ptr %188, i64 78
  %529 = load i16, ptr %528, align 2, !tbaa !5
  %530 = icmp eq i16 %529, 0
  br i1 %530, label %542, label %531

531:                                              ; preds = %527
  %532 = getelementptr inbounds %struct._reg_trie_data, ptr %304, i64 0, i32 7
  %533 = load ptr, ptr %532, align 8, !tbaa !176
  br label %534

534:                                              ; preds = %531, %534
  %535 = phi i16 [ %529, %531 ], [ %540, %534 ]
  %536 = phi i32 [ 0, %531 ], [ %539, %534 ]
  %537 = zext i16 %535 to i64
  %538 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %533, i64 %537
  %539 = add i32 %536, 1
  %540 = load i16, ptr %538, align 2, !tbaa !5
  %541 = icmp eq i16 %540, 0
  br i1 %541, label %542, label %534, !llvm.loop !282

542:                                              ; preds = %534, %527
  %543 = phi i32 [ 0, %527 ], [ %539, %534 ]
  store i32 %543, ptr %194, align 4, !tbaa !5
  br label %544

544:                                              ; preds = %337, %524, %542
  %545 = phi i32 [ 18, %542 ], [ 6, %524 ], [ 6, %337 ]
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %7) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #12
  br label %546

546:                                              ; preds = %326, %544
  %547 = phi i32 [ %545, %544 ], [ 8, %326 ]
  switch i32 %547, label %5068 [
    i32 8, label %4918
    i32 18, label %606
    i32 6, label %4918
  ]

548:                                              ; preds = %221
  %549 = load ptr, ptr %199, align 8, !tbaa !5
  %550 = icmp eq ptr %549, null
  br i1 %550, label %572, label %551

551:                                              ; preds = %548
  %552 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %553 = load i32, ptr %192, align 8, !tbaa !5
  %554 = icmp sgt i32 %552, %553
  br i1 %554, label %555, label %556

555:                                              ; preds = %551
  call void @Perl_leave_scope(i32 noundef %553) #12
  br label %556

556:                                              ; preds = %555, %551
  %557 = load i32, ptr %193, align 8, !tbaa !67
  %558 = load i32, ptr %207, align 8, !tbaa !5
  %559 = icmp ugt i32 %557, %558
  br i1 %559, label %560, label %569

560:                                              ; preds = %556
  %561 = load ptr, ptr %195, align 8, !tbaa !64
  br label %562

562:                                              ; preds = %560, %562
  %563 = phi i32 [ %557, %560 ], [ %566, %562 ]
  %564 = zext i32 %563 to i64
  %565 = getelementptr inbounds %struct.regexp_paren_pair, ptr %561, i64 %564, i32 1
  store i64 -1, ptr %565, align 8, !tbaa !74
  %566 = add i32 %563, -1
  %567 = load i32, ptr %207, align 8, !tbaa !5
  %568 = icmp ugt i32 %566, %567
  br i1 %568, label %562, label %569, !llvm.loop !283

569:                                              ; preds = %562, %556
  %570 = phi i32 [ %557, %556 ], [ %566, %562 ]
  store i32 %570, ptr %193, align 8, !tbaa !67
  %571 = load i32, ptr %208, align 4, !tbaa !5
  store i32 %571, ptr %197, align 4, !tbaa !68
  br label %572

572:                                              ; preds = %569, %548
  %573 = load i32, ptr %194, align 4, !tbaa !5
  %574 = add i32 %573, -1
  store i32 %574, ptr %194, align 4, !tbaa !5
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %4918, label %576

576:                                              ; preds = %572
  %577 = getelementptr inbounds i8, ptr %188, i64 76
  %578 = load i16, ptr %577, align 4, !tbaa !5
  %579 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %580 = load ptr, ptr %579, align 8, !tbaa !161
  %581 = load ptr, ptr %205, align 8, !tbaa !5
  %582 = getelementptr inbounds %struct.regnode_1, ptr %581, i64 0, i32 3
  %583 = load i32, ptr %582, align 4, !tbaa !162
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds %struct.reg_data, ptr %580, i64 0, i32 2, i64 %584
  %586 = load ptr, ptr %585, align 8, !tbaa !35
  %587 = getelementptr inbounds %struct._reg_trie_data, ptr %586, i64 0, i32 7
  %588 = load ptr, ptr %587, align 8, !tbaa !176
  %589 = getelementptr inbounds i8, ptr %188, i64 78
  %590 = load i16, ptr %589, align 2, !tbaa !5
  %591 = icmp eq i16 %590, 0
  br i1 %591, label %604, label %592

592:                                              ; preds = %576, %592
  %593 = phi i16 [ %602, %592 ], [ %590, %576 ]
  %594 = phi i16 [ %599, %592 ], [ 0, %576 ]
  %595 = icmp ugt i16 %593, %578
  %596 = add i16 %594, -1
  %597 = icmp ult i16 %596, %593
  %598 = select i1 %597, i16 %594, i16 %593
  %599 = select i1 %595, i16 %598, i16 %594
  %600 = zext i16 %593 to i64
  %601 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %588, i64 %600
  %602 = load i16, ptr %601, align 2, !tbaa !5
  %603 = icmp eq i16 %602, 0
  br i1 %603, label %604, label %592, !llvm.loop !284

604:                                              ; preds = %592, %576
  %605 = phi i16 [ 0, %576 ], [ %599, %592 ]
  store i16 %605, ptr %577, align 4, !tbaa !5
  br label %606

606:                                              ; preds = %604, %546
  %607 = and i8 %176, 1
  %608 = icmp eq i8 %607, 0
  %609 = select i1 %608, i8 %176, i8 0
  %610 = select i1 %608, i8 %177, i8 0
  %611 = load ptr, ptr %199, align 8, !tbaa !5
  %612 = icmp eq ptr %611, null
  br i1 %612, label %617, label %613

613:                                              ; preds = %606
  %614 = load i32, ptr %193, align 8, !tbaa !67
  store i32 %614, ptr %207, align 8, !tbaa !5
  %615 = load i32, ptr %197, align 4, !tbaa !68
  store i32 %615, ptr %208, align 4, !tbaa !5
  %616 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %616, ptr %192, align 8, !tbaa !5
  br label %617

617:                                              ; preds = %613, %606
  %618 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %619 = load ptr, ptr %618, align 8, !tbaa !161
  %620 = load ptr, ptr %205, align 8, !tbaa !5
  %621 = getelementptr inbounds %struct.regnode_1, ptr %620, i64 0, i32 3
  %622 = load i32, ptr %621, align 4, !tbaa !162
  %623 = zext i32 %622 to i64
  %624 = getelementptr inbounds %struct.reg_data, ptr %619, i64 0, i32 2, i64 %623
  %625 = load ptr, ptr %624, align 8, !tbaa !35
  %626 = getelementptr inbounds %struct._reg_trie_data, ptr %625, i64 0, i32 7
  %627 = load ptr, ptr %626, align 8, !tbaa !176
  %628 = getelementptr inbounds i8, ptr %188, i64 76
  %629 = load i16, ptr %628, align 4, !tbaa !5
  %630 = zext i16 %629 to i64
  %631 = getelementptr inbounds %struct.reg_trie_wordinfo, ptr %627, i64 %630, i32 1
  %632 = load i32, ptr %631, align 4, !tbaa !177
  %633 = getelementptr inbounds %struct._reg_trie_data, ptr %625, i64 0, i32 12
  %634 = load i32, ptr %633, align 8, !tbaa !285
  %635 = load i32, ptr %200, align 8, !tbaa !5
  %636 = add i32 %634, %635
  %637 = sub i32 %632, %636
  %638 = load ptr, ptr %206, align 8, !tbaa !5
  %639 = load i8, ptr %196, align 8, !tbaa !5, !range !42, !noundef !43
  %640 = icmp eq i8 %639, 0
  br i1 %640, label %680, label %641

641:                                              ; preds = %617
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %9) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #12
  %642 = icmp eq i32 %637, 0
  br i1 %642, label %676, label %643

643:                                              ; preds = %641, %671
  %644 = phi i32 [ %672, %671 ], [ %637, %641 ]
  %645 = phi ptr [ %655, %671 ], [ %638, %641 ]
  br i1 %23, label %646, label %649

646:                                              ; preds = %643
  %647 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %645, i64 noundef 13, ptr noundef nonnull %11, i32 noundef %26) #12
  %648 = load i64, ptr %11, align 8, !tbaa !169
  br label %652

649:                                              ; preds = %643
  %650 = load i8, ptr %645, align 1, !tbaa !5
  %651 = zext i8 %650 to i64
  br label %652

652:                                              ; preds = %649, %646
  %653 = phi i64 [ 1, %649 ], [ %648, %646 ]
  %654 = phi i64 [ %651, %649 ], [ %647, %646 ]
  %655 = getelementptr inbounds i8, ptr %645, i64 %653
  %656 = call i64 @Perl__to_uni_fold_flags(i64 noundef %654, ptr noundef nonnull %9, ptr noundef nonnull %10, i8 noundef zeroext 2) #12
  %657 = load i64, ptr %10, align 8, !tbaa !169
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %671, label %659

659:                                              ; preds = %652, %664
  %660 = phi ptr [ %667, %664 ], [ %9, %652 ]
  %661 = phi i32 [ %662, %664 ], [ %644, %652 ]
  %662 = add i32 %661, -1
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %673, label %664

664:                                              ; preds = %659
  %665 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %660, i64 noundef 13, ptr noundef nonnull %11, i32 noundef %26) #12
  %666 = load i64, ptr %11, align 8, !tbaa !169
  %667 = getelementptr inbounds i8, ptr %660, i64 %666
  %668 = load i64, ptr %10, align 8, !tbaa !169
  %669 = sub i64 %668, %666
  store i64 %669, ptr %10, align 8, !tbaa !169
  %670 = icmp eq i64 %668, %666
  br i1 %670, label %671, label %659, !llvm.loop !286

671:                                              ; preds = %664, %652
  %672 = phi i32 [ %644, %652 ], [ %662, %664 ]
  br label %643, !llvm.loop !287

673:                                              ; preds = %659
  %674 = load ptr, ptr %205, align 8, !tbaa !5
  %675 = load ptr, ptr %199, align 8, !tbaa !5
  br label %676

676:                                              ; preds = %673, %641
  %677 = phi ptr [ %611, %641 ], [ %675, %673 ]
  %678 = phi ptr [ %620, %641 ], [ %674, %673 ]
  %679 = phi ptr [ %638, %641 ], [ %655, %673 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #12
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %9) #12
  br label %738

680:                                              ; preds = %617
  br i1 %23, label %681, label %735

681:                                              ; preds = %680
  %682 = icmp eq i32 %637, 0
  br i1 %682, label %738, label %683

683:                                              ; preds = %681
  %684 = xor i32 %636, -1
  %685 = add i32 %632, %684
  %686 = and i32 %637, 3
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %701, label %688

688:                                              ; preds = %683, %688
  %689 = phi i32 [ %692, %688 ], [ %637, %683 ]
  %690 = phi ptr [ %698, %688 ], [ %638, %683 ]
  %691 = phi i32 [ %699, %688 ], [ 0, %683 ]
  %692 = add i32 %689, -1
  %693 = load i8, ptr %690, align 1, !tbaa !5
  %694 = zext i8 %693 to i64
  %695 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %694
  %696 = load i8, ptr %695, align 1, !tbaa !5
  %697 = zext i8 %696 to i64
  %698 = getelementptr inbounds i8, ptr %690, i64 %697
  %699 = add i32 %691, 1
  %700 = icmp eq i32 %699, %686
  br i1 %700, label %701, label %688, !llvm.loop !288

701:                                              ; preds = %688, %683
  %702 = phi ptr [ undef, %683 ], [ %698, %688 ]
  %703 = phi i32 [ %637, %683 ], [ %692, %688 ]
  %704 = phi ptr [ %638, %683 ], [ %698, %688 ]
  %705 = icmp ult i32 %685, 3
  br i1 %705, label %738, label %706

706:                                              ; preds = %701, %706
  %707 = phi i32 [ %727, %706 ], [ %703, %701 ]
  %708 = phi ptr [ %733, %706 ], [ %704, %701 ]
  %709 = load i8, ptr %708, align 1, !tbaa !5
  %710 = zext i8 %709 to i64
  %711 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %710
  %712 = load i8, ptr %711, align 1, !tbaa !5
  %713 = zext i8 %712 to i64
  %714 = getelementptr inbounds i8, ptr %708, i64 %713
  %715 = load i8, ptr %714, align 1, !tbaa !5
  %716 = zext i8 %715 to i64
  %717 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %716
  %718 = load i8, ptr %717, align 1, !tbaa !5
  %719 = zext i8 %718 to i64
  %720 = getelementptr inbounds i8, ptr %714, i64 %719
  %721 = load i8, ptr %720, align 1, !tbaa !5
  %722 = zext i8 %721 to i64
  %723 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %722
  %724 = load i8, ptr %723, align 1, !tbaa !5
  %725 = zext i8 %724 to i64
  %726 = getelementptr inbounds i8, ptr %720, i64 %725
  %727 = add i32 %707, -4
  %728 = load i8, ptr %726, align 1, !tbaa !5
  %729 = zext i8 %728 to i64
  %730 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %729
  %731 = load i8, ptr %730, align 1, !tbaa !5
  %732 = zext i8 %731 to i64
  %733 = getelementptr inbounds i8, ptr %726, i64 %732
  %734 = icmp eq i32 %727, 0
  br i1 %734, label %738, label %706, !llvm.loop !289

735:                                              ; preds = %680
  %736 = zext i32 %637 to i64
  %737 = getelementptr inbounds i8, ptr %638, i64 %736
  br label %738

738:                                              ; preds = %701, %706, %681, %735, %676
  %739 = phi ptr [ %677, %676 ], [ %611, %735 ], [ %611, %681 ], [ %611, %706 ], [ %611, %701 ]
  %740 = phi ptr [ %678, %676 ], [ %620, %735 ], [ %620, %681 ], [ %620, %706 ], [ %620, %701 ]
  %741 = phi ptr [ %679, %676 ], [ %737, %735 ], [ %638, %681 ], [ %702, %701 ], [ %733, %706 ]
  %742 = icmp eq ptr %739, null
  br i1 %742, label %749, label %743

743:                                              ; preds = %738
  %744 = load i16, ptr %628, align 4, !tbaa !5
  %745 = zext i16 %744 to i64
  %746 = getelementptr inbounds i16, ptr %739, i64 %745
  %747 = load i16, ptr %746, align 2, !tbaa !89
  %748 = icmp eq i16 %747, 0
  br i1 %748, label %749, label %752

749:                                              ; preds = %743, %738
  %750 = getelementptr inbounds %struct.regnode, ptr %740, i64 0, i32 2
  %751 = load i16, ptr %750, align 2, !tbaa !275
  br label %752

752:                                              ; preds = %743, %749
  %753 = phi i16 [ %751, %749 ], [ %747, %743 ]
  %754 = zext i16 %753 to i64
  %755 = getelementptr inbounds %struct.regnode, ptr %740, i64 %754
  %756 = load i32, ptr %194, align 4, !tbaa !5
  %757 = icmp ugt i32 %756, 1
  %758 = select i1 %757, i1 true, i1 %39
  br i1 %758, label %759, label %3242

759:                                              ; preds = %752
  store i32 94, ptr %188, align 8, !tbaa !276
  br label %4778

760:                                              ; preds = %221, %221
  %761 = getelementptr inbounds %struct.regnode_string, ptr %215, i64 0, i32 3
  %762 = load i8, ptr %215, align 2, !tbaa !59
  %763 = zext i8 %762 to i64
  %764 = and i8 %169, 1
  %765 = icmp eq i8 %22, %764
  br i1 %765, label %829, label %766

766:                                              ; preds = %760
  %767 = getelementptr inbounds i8, ptr %761, i64 %763
  %768 = icmp eq i8 %762, 0
  br i1 %23, label %770, label %769

769:                                              ; preds = %766
  br i1 %768, label %4714, label %800

770:                                              ; preds = %766
  br i1 %768, label %4714, label %771

771:                                              ; preds = %770, %795
  %772 = phi ptr [ %797, %795 ], [ %214, %770 ]
  %773 = phi ptr [ %798, %795 ], [ %761, %770 ]
  %774 = icmp ult ptr %772, %216
  br i1 %774, label %775, label %4912

775:                                              ; preds = %771
  %776 = load i8, ptr %772, align 1, !tbaa !5
  %777 = icmp ugt i8 %776, -61
  br i1 %777, label %4912, label %778

778:                                              ; preds = %775
  %779 = icmp sgt i8 %776, -1
  br i1 %779, label %780, label %783

780:                                              ; preds = %778
  %781 = load i8, ptr %773, align 1, !tbaa !5
  %782 = icmp eq i8 %776, %781
  br i1 %782, label %795, label %4912

783:                                              ; preds = %778
  %784 = and i8 %776, 31
  %785 = zext i8 %784 to i32
  %786 = shl nuw nsw i32 %785, 6
  %787 = getelementptr inbounds i8, ptr %772, i64 1
  %788 = load i8, ptr %787, align 1, !tbaa !5
  %789 = and i8 %788, 63
  %790 = zext i8 %789 to i32
  %791 = or i32 %786, %790
  %792 = load i8, ptr %773, align 1, !tbaa !5
  %793 = zext i8 %792 to i32
  %794 = icmp eq i32 %791, %793
  br i1 %794, label %795, label %4912

795:                                              ; preds = %783, %780
  %796 = phi i64 [ 1, %780 ], [ 2, %783 ]
  %797 = getelementptr inbounds i8, ptr %772, i64 %796
  %798 = getelementptr inbounds i8, ptr %773, i64 1
  %799 = icmp ult ptr %798, %767
  br i1 %799, label %771, label %4714, !llvm.loop !290

800:                                              ; preds = %769, %824
  %801 = phi ptr [ %827, %824 ], [ %214, %769 ]
  %802 = phi ptr [ %826, %824 ], [ %761, %769 ]
  %803 = icmp ult ptr %801, %216
  br i1 %803, label %804, label %4913

804:                                              ; preds = %800
  %805 = load i8, ptr %802, align 1, !tbaa !5
  %806 = icmp ugt i8 %805, -61
  br i1 %806, label %4913, label %807

807:                                              ; preds = %804
  %808 = icmp sgt i8 %805, -1
  br i1 %808, label %809, label %812

809:                                              ; preds = %807
  %810 = load i8, ptr %801, align 1, !tbaa !5
  %811 = icmp eq i8 %805, %810
  br i1 %811, label %824, label %4913

812:                                              ; preds = %807
  %813 = and i8 %805, 31
  %814 = zext i8 %813 to i32
  %815 = shl nuw nsw i32 %814, 6
  %816 = getelementptr inbounds i8, ptr %802, i64 1
  %817 = load i8, ptr %816, align 1, !tbaa !5
  %818 = and i8 %817, 63
  %819 = zext i8 %818 to i32
  %820 = or i32 %815, %819
  %821 = load i8, ptr %801, align 1, !tbaa !5
  %822 = zext i8 %821 to i32
  %823 = icmp eq i32 %820, %822
  br i1 %823, label %824, label %4913

824:                                              ; preds = %812, %809
  %825 = phi i64 [ 1, %809 ], [ 2, %812 ]
  %826 = getelementptr inbounds i8, ptr %802, i64 %825
  %827 = getelementptr inbounds i8, ptr %801, i64 1
  %828 = icmp ult ptr %826, %767
  br i1 %828, label %800, label %4714, !llvm.loop !291

829:                                              ; preds = %760
  %830 = ptrtoint ptr %216 to i64
  %831 = ptrtoint ptr %214 to i64
  %832 = sub i64 %830, %831
  %833 = icmp slt i64 %832, %763
  br i1 %833, label %4918, label %834

834:                                              ; preds = %829
  %835 = load i8, ptr %761, align 1, !tbaa !5
  %836 = zext i8 %835 to i32
  %837 = icmp eq i32 %222, %836
  br i1 %837, label %838, label %4918

838:                                              ; preds = %834
  %839 = icmp ugt i8 %762, 1
  br i1 %839, label %840, label %843

840:                                              ; preds = %838
  %841 = call i32 @bcmp(ptr nonnull %761, ptr %214, i64 %763)
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %843, label %4918

843:                                              ; preds = %840, %838
  %844 = getelementptr inbounds i8, ptr %214, i64 %763
  br label %4714

845:                                              ; preds = %221
  br i1 %23, label %846, label %4918

846:                                              ; preds = %845
  %847 = getelementptr inbounds %struct.regnode_string, ptr %215, i64 0, i32 3
  %848 = load i8, ptr %215, align 2, !tbaa !59
  %849 = zext i8 %848 to i64
  br label %873

850:                                              ; preds = %221, %221
  %851 = shl i8 %169, 2
  %852 = and i8 %851, 4
  %853 = zext i8 %852 to i32
  br label %856

854:                                              ; preds = %221
  br label %856

855:                                              ; preds = %221, %221
  br label %856

856:                                              ; preds = %221, %855, %854, %850
  %857 = phi ptr [ @Perl_foldEQ_latin1, %850 ], [ @Perl_foldEQ_locale, %854 ], [ @Perl_foldEQ_latin1, %855 ], [ @Perl_foldEQ, %221 ]
  %858 = phi ptr [ @PL_fold_latin1, %850 ], [ @PL_fold_locale, %854 ], [ @PL_fold_latin1, %855 ], [ @PL_fold, %221 ]
  %859 = phi i32 [ %853, %850 ], [ 2, %854 ], [ 1, %855 ], [ 0, %221 ]
  %860 = getelementptr inbounds %struct.regnode_string, ptr %215, i64 0, i32 3
  %861 = load i8, ptr %215, align 2, !tbaa !59
  %862 = zext i8 %861 to i64
  br i1 %23, label %873, label %863

863:                                              ; preds = %856
  %864 = and i8 %169, 1
  %865 = icmp ne i8 %864, 0
  %866 = icmp eq i32 %213, 37
  %867 = select i1 %865, i1 true, i1 %866
  br i1 %867, label %873, label %868

868:                                              ; preds = %863
  %869 = icmp ne i32 %213, 34
  %870 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !42
  %871 = icmp eq i8 %870, 0
  %872 = select i1 %869, i1 true, i1 %871
  br i1 %872, label %882, label %873

873:                                              ; preds = %846, %868, %863, %856
  %874 = phi i64 [ %849, %846 ], [ %862, %868 ], [ %862, %863 ], [ %862, %856 ]
  %875 = phi ptr [ %847, %846 ], [ %860, %868 ], [ %860, %863 ], [ %860, %856 ]
  %876 = phi i32 [ 22, %846 ], [ %859, %868 ], [ %859, %863 ], [ %859, %856 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #12
  store ptr %216, ptr %12, align 8, !tbaa !35
  %877 = and i8 %169, 1
  %878 = icmp ne i8 %877, 0
  %879 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef nonnull %875, ptr noundef null, i64 noundef %874, i1 noundef zeroext %878, ptr noundef %214, ptr noundef nonnull %12, i64 noundef 0, i1 noundef zeroext %23, i32 noundef %876) #12
  %880 = icmp eq i32 %879, 0
  %881 = load ptr, ptr %12, align 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #12
  br i1 %880, label %4918, label %4714

882:                                              ; preds = %868
  %883 = load i8, ptr %860, align 1, !tbaa !5
  %884 = zext i8 %883 to i32
  %885 = icmp eq i32 %222, %884
  %886 = icmp slt i32 %222, 0
  %887 = or i1 %886, %885
  br i1 %887, label %898, label %888

888:                                              ; preds = %882
  %889 = zext i32 %222 to i64
  %890 = getelementptr inbounds i8, ptr %858, i64 %889
  %891 = load i8, ptr %890, align 1, !tbaa !5
  %892 = icmp ne i8 %883, %891
  %893 = ptrtoint ptr %216 to i64
  %894 = ptrtoint ptr %214 to i64
  %895 = sub i64 %893, %894
  %896 = icmp slt i64 %895, %862
  %897 = select i1 %892, i1 true, i1 %896
  br i1 %897, label %4918, label %903

898:                                              ; preds = %882
  %899 = ptrtoint ptr %216 to i64
  %900 = ptrtoint ptr %214 to i64
  %901 = sub i64 %899, %900
  %902 = icmp slt i64 %901, %862
  br i1 %902, label %4918, label %903

903:                                              ; preds = %888, %898
  %904 = icmp ugt i8 %861, 1
  br i1 %904, label %905, label %909

905:                                              ; preds = %903
  %906 = zext i8 %861 to i32
  %907 = call i32 %857(ptr noundef nonnull %860, ptr noundef %214, i32 noundef %906) #12, !callees !81
  %908 = icmp eq i32 %907, 0
  br i1 %908, label %4918, label %909

909:                                              ; preds = %905, %903
  %910 = getelementptr inbounds i8, ptr %214, i64 %862
  br label %4714

911:                                              ; preds = %221
  br label %912

912:                                              ; preds = %221, %911
  %913 = phi i32 [ 0, %911 ], [ 1, %221 ]
  %914 = load i8, ptr %215, align 2, !tbaa !76
  %915 = icmp eq i8 %914, 0
  br i1 %915, label %920, label %916

916:                                              ; preds = %912
  %917 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !88, !range !42, !noundef !43
  %918 = icmp eq i8 %917, 0
  br i1 %918, label %919, label %1126

919:                                              ; preds = %916
  call void (i32, ptr, ...) @Perl_ck_warner(i32 noundef 65, ptr noundef nonnull @.str.2) #12
  br label %1123

920:                                              ; preds = %912
  %921 = load ptr, ptr %59, align 8, !tbaa !26
  %922 = icmp eq ptr %214, %921
  br i1 %23, label %923, label %1037

923:                                              ; preds = %920
  br i1 %922, label %924, label %932

924:                                              ; preds = %923
  %925 = tail call ptr @__ctype_b_loc() #14
  %926 = load ptr, ptr %925, align 8, !tbaa !35
  %927 = getelementptr inbounds i16, ptr %926, i64 10
  %928 = load i16, ptr %927, align 2, !tbaa !89
  %929 = lshr i16 %928, 3
  %930 = and i16 %929, 1
  %931 = zext i16 %930 to i64
  br label %982

932:                                              ; preds = %923
  %933 = ptrtoint ptr %921 to i64
  %934 = icmp ugt ptr %214, %921
  br i1 %934, label %935, label %954

935:                                              ; preds = %932
  %936 = getelementptr inbounds i8, ptr %214, i64 -1
  %937 = load i8, ptr %936, align 1, !tbaa !5
  %938 = icmp slt i8 %937, 0
  %939 = icmp ugt ptr %936, %921
  %940 = and i1 %938, %939
  br i1 %940, label %941, label %957

941:                                              ; preds = %935
  %942 = ptrtoint ptr %214 to i64
  %943 = getelementptr i8, ptr %214, i64 %933
  %944 = sub i64 0, %942
  %945 = getelementptr i8, ptr %943, i64 %944
  br label %946

946:                                              ; preds = %951, %941
  %947 = phi ptr [ %952, %951 ], [ %936, %941 ]
  %948 = load i8, ptr %947, align 1, !tbaa !5
  %949 = and i8 %948, -64
  %950 = icmp eq i8 %949, -128
  br i1 %950, label %951, label %957

951:                                              ; preds = %946
  %952 = getelementptr inbounds i8, ptr %947, i64 -1
  %953 = icmp ugt ptr %952, %921
  br i1 %953, label %946, label %954, !llvm.loop !46

954:                                              ; preds = %951, %932
  %955 = phi ptr [ %214, %932 ], [ %945, %951 ]
  %956 = load i8, ptr %955, align 1, !tbaa !5
  br label %957

957:                                              ; preds = %946, %954, %935
  %958 = phi i8 [ %956, %954 ], [ %937, %935 ], [ %948, %946 ]
  %959 = icmp sgt i8 %958, -1
  %960 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %921)
  %961 = load i8, ptr %960, align 1, !tbaa !5
  br i1 %959, label %962, label %974

962:                                              ; preds = %957
  %963 = icmp sgt i8 %961, -1
  br i1 %963, label %964, label %979

964:                                              ; preds = %962
  %965 = tail call ptr @__ctype_b_loc() #14
  %966 = load ptr, ptr %965, align 8, !tbaa !35
  %967 = zext i8 %961 to i64
  %968 = getelementptr inbounds i16, ptr %966, i64 %967
  %969 = load i16, ptr %968, align 2, !tbaa !89
  %970 = and i16 %969, 8
  %971 = icmp ne i16 %970, 0
  %972 = icmp eq i8 %961, 95
  %973 = or i1 %972, %971
  br label %979

974:                                              ; preds = %957
  %975 = and i8 %961, -2
  %976 = icmp eq i8 %975, -62
  br i1 %976, label %979, label %977

977:                                              ; preds = %974
  %978 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %960) #12
  br label %979

979:                                              ; preds = %974, %964, %962, %977
  %980 = phi i1 [ %978, %977 ], [ false, %962 ], [ %973, %964 ], [ false, %974 ]
  %981 = zext i1 %980 to i64
  br label %982

982:                                              ; preds = %979, %924
  %983 = phi i64 [ %931, %924 ], [ %981, %979 ]
  %984 = icmp slt i32 %222, 0
  br i1 %984, label %985, label %993

985:                                              ; preds = %982
  %986 = tail call ptr @__ctype_b_loc() #14
  %987 = load ptr, ptr %986, align 8, !tbaa !35
  %988 = getelementptr inbounds i16, ptr %987, i64 10
  %989 = load i16, ptr %988, align 2, !tbaa !89
  %990 = lshr i16 %989, 3
  %991 = and i16 %990, 1
  %992 = zext i16 %991 to i64
  br label %1085

993:                                              ; preds = %982
  %994 = load i8, ptr %214, align 1, !tbaa !5
  %995 = icmp sgt i8 %994, -1
  br i1 %995, label %996, label %1007

996:                                              ; preds = %993
  %997 = tail call ptr @__ctype_b_loc() #14
  %998 = load ptr, ptr %997, align 8, !tbaa !35
  %999 = zext i8 %994 to i64
  %1000 = getelementptr inbounds i16, ptr %998, i64 %999
  %1001 = load i16, ptr %1000, align 2, !tbaa !89
  %1002 = and i16 %1001, 8
  %1003 = icmp ne i16 %1002, 0
  %1004 = icmp eq i8 %994, 95
  %1005 = or i1 %1004, %1003
  %1006 = zext i1 %1005 to i64
  br label %1085

1007:                                             ; preds = %993
  %1008 = zext i8 %994 to i32
  %1009 = and i32 %1008, 254
  %1010 = icmp eq i32 %1009, 194
  br i1 %1010, label %1011, label %1034

1011:                                             ; preds = %1007
  %1012 = and i32 %1008, 30
  %1013 = icmp eq i32 %1012, 0
  br i1 %1013, label %1014, label %1031

1014:                                             ; preds = %1011
  %1015 = shl nuw nsw i32 %1008, 6
  %1016 = and i32 %1015, 1984
  %1017 = getelementptr inbounds i8, ptr %214, i64 1
  %1018 = load i8, ptr %1017, align 1, !tbaa !5
  %1019 = and i8 %1018, 63
  %1020 = zext i8 %1019 to i32
  %1021 = or i32 %1016, %1020
  %1022 = tail call ptr @__ctype_b_loc() #14
  %1023 = load ptr, ptr %1022, align 8, !tbaa !35
  %1024 = zext i32 %1021 to i64
  %1025 = getelementptr inbounds i16, ptr %1023, i64 %1024
  %1026 = load i16, ptr %1025, align 2, !tbaa !89
  %1027 = and i16 %1026, 8
  %1028 = icmp ne i16 %1027, 0
  %1029 = icmp eq i32 %1021, 95
  %1030 = or i1 %1029, %1028
  br label %1031

1031:                                             ; preds = %1014, %1011
  %1032 = phi i1 [ false, %1011 ], [ %1030, %1014 ]
  %1033 = zext i1 %1032 to i64
  br label %1085

1034:                                             ; preds = %1007
  %1035 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %214) #12
  %1036 = zext i1 %1035 to i64
  br label %1085

1037:                                             ; preds = %920
  br i1 %922, label %1038, label %1045

1038:                                             ; preds = %1037
  %1039 = tail call ptr @__ctype_b_loc() #14
  %1040 = load ptr, ptr %1039, align 8, !tbaa !35
  %1041 = getelementptr inbounds i16, ptr %1040, i64 10
  %1042 = load i16, ptr %1041, align 2, !tbaa !89
  %1043 = and i16 %1042, 8
  %1044 = icmp ne i16 %1043, 0
  br label %1059

1045:                                             ; preds = %1037
  %1046 = getelementptr inbounds i8, ptr %214, i64 -1
  %1047 = load i8, ptr %1046, align 1, !tbaa !5
  %1048 = icmp sgt i8 %1047, -1
  br i1 %1048, label %1049, label %1059

1049:                                             ; preds = %1045
  %1050 = tail call ptr @__ctype_b_loc() #14
  %1051 = load ptr, ptr %1050, align 8, !tbaa !35
  %1052 = zext i8 %1047 to i64
  %1053 = getelementptr inbounds i16, ptr %1051, i64 %1052
  %1054 = load i16, ptr %1053, align 2, !tbaa !89
  %1055 = and i16 %1054, 8
  %1056 = icmp ne i16 %1055, 0
  %1057 = icmp eq i8 %1047, 95
  %1058 = or i1 %1057, %1056
  br label %1059

1059:                                             ; preds = %1049, %1045, %1038
  %1060 = phi i1 [ %1044, %1038 ], [ false, %1045 ], [ %1058, %1049 ]
  %1061 = zext i1 %1060 to i64
  %1062 = icmp slt i32 %222, 0
  br i1 %1062, label %1063, label %1070

1063:                                             ; preds = %1059
  %1064 = tail call ptr @__ctype_b_loc() #14
  %1065 = load ptr, ptr %1064, align 8, !tbaa !35
  %1066 = getelementptr inbounds i16, ptr %1065, i64 10
  %1067 = load i16, ptr %1066, align 2, !tbaa !89
  %1068 = and i16 %1067, 8
  %1069 = icmp ne i16 %1068, 0
  br label %1082

1070:                                             ; preds = %1059
  %1071 = icmp ult i32 %222, 128
  br i1 %1071, label %1072, label %1082

1072:                                             ; preds = %1070
  %1073 = tail call ptr @__ctype_b_loc() #14
  %1074 = load ptr, ptr %1073, align 8, !tbaa !35
  %1075 = zext i32 %222 to i64
  %1076 = getelementptr inbounds i16, ptr %1074, i64 %1075
  %1077 = load i16, ptr %1076, align 2, !tbaa !89
  %1078 = and i16 %1077, 8
  %1079 = icmp ne i16 %1078, 0
  %1080 = icmp eq i32 %222, 95
  %1081 = select i1 %1079, i1 true, i1 %1080
  br label %1082

1082:                                             ; preds = %1070, %1072, %1063
  %1083 = phi i1 [ %1069, %1063 ], [ false, %1070 ], [ %1081, %1072 ]
  %1084 = zext i1 %1083 to i64
  br label %1085

1085:                                             ; preds = %985, %1031, %1034, %996, %1082
  %1086 = phi i64 [ %1061, %1082 ], [ %983, %996 ], [ %983, %1034 ], [ %983, %1031 ], [ %983, %985 ]
  %1087 = phi i64 [ %1084, %1082 ], [ %1006, %996 ], [ %1036, %1034 ], [ %1033, %1031 ], [ %992, %985 ]
  %1088 = icmp eq i64 %1086, %1087
  %1089 = zext i1 %1088 to i32
  %1090 = icmp eq i32 %913, %1089
  br i1 %1090, label %4714, label %4918

1091:                                             ; preds = %221
  br label %1092

1092:                                             ; preds = %221, %1091
  %1093 = phi i32 [ 0, %1091 ], [ 1, %221 ]
  br i1 %23, label %1094, label %1097

1094:                                             ; preds = %1092
  %1095 = load i8, ptr %215, align 2, !tbaa !76
  br label %1129

1096:                                             ; preds = %221
  br label %1097

1097:                                             ; preds = %221, %1096, %1092
  %1098 = phi i32 [ %1093, %1092 ], [ 0, %1096 ], [ 1, %221 ]
  %1099 = load ptr, ptr %59, align 8, !tbaa !26
  %1100 = icmp eq ptr %214, %1099
  br i1 %1100, label %1106, label %1101

1101:                                             ; preds = %1097
  %1102 = getelementptr inbounds i8, ptr %214, i64 -1
  %1103 = load i8, ptr %1102, align 1, !tbaa !5
  %1104 = zext i8 %1103 to i64
  %1105 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1104
  br label %1106

1106:                                             ; preds = %1097, %1101
  %1107 = phi ptr [ %1105, %1101 ], [ getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), %1097 ]
  %1108 = load i32, ptr %1107, align 4, !tbaa !73
  %1109 = and i32 %1108, 16385
  %1110 = icmp ne i32 %1109, 16385
  %1111 = icmp slt i32 %222, 0
  %1112 = and i32 %222, 255
  %1113 = zext i32 %1112 to i64
  %1114 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1113
  %1115 = select i1 %1111, ptr getelementptr inbounds ([0 x i32], ptr @PL_charclass, i64 0, i64 10), ptr %1114
  %1116 = load i32, ptr %1115, align 4, !tbaa !73
  %1117 = and i32 %1116, 16385
  %1118 = icmp eq i32 %1117, 16385
  %1119 = xor i1 %1110, %1118
  %1120 = zext i1 %1119 to i32
  %1121 = icmp eq i32 %1098, %1120
  br i1 %1121, label %4714, label %4918

1122:                                             ; preds = %221
  br label %1123

1123:                                             ; preds = %221, %1122, %919
  %1124 = phi i32 [ %913, %919 ], [ 0, %1122 ], [ 1, %221 ]
  %1125 = load i8, ptr %215, align 2, !tbaa !76
  br label %1126

1126:                                             ; preds = %1123, %916
  %1127 = phi i8 [ %1125, %1123 ], [ %914, %916 ]
  %1128 = phi i32 [ %1124, %1123 ], [ %913, %916 ]
  br i1 %23, label %1129, label %1472

1129:                                             ; preds = %1094, %1126
  %1130 = phi i8 [ %1127, %1126 ], [ %1095, %1094 ]
  %1131 = phi i32 [ %1128, %1126 ], [ %1093, %1094 ]
  switch i8 %1130, label %1556 [
    i8 0, label %1132
    i8 1, label %1249
    i8 2, label %1322
    i8 3, label %1397
  ]

1132:                                             ; preds = %1129
  %1133 = load ptr, ptr %59, align 8, !tbaa !26
  %1134 = icmp eq ptr %214, %1133
  br i1 %1134, label %1209, label %1135

1135:                                             ; preds = %1132
  %1136 = ptrtoint ptr %1133 to i64
  %1137 = icmp ugt ptr %214, %1133
  br i1 %1137, label %1138, label %1165

1138:                                             ; preds = %1135
  %1139 = getelementptr inbounds i8, ptr %214, i64 -1
  %1140 = load i8, ptr %1139, align 1, !tbaa !5
  %1141 = icmp slt i8 %1140, 0
  %1142 = icmp ugt ptr %1139, %1133
  %1143 = and i1 %1141, %1142
  br i1 %1143, label %1144, label %1162

1144:                                             ; preds = %1138
  %1145 = ptrtoint ptr %214 to i64
  %1146 = getelementptr i8, ptr %214, i64 %1136
  %1147 = sub i64 0, %1145
  %1148 = getelementptr i8, ptr %1146, i64 %1147
  br label %1149

1149:                                             ; preds = %1154, %1144
  %1150 = phi ptr [ %1155, %1154 ], [ %1139, %1144 ]
  %1151 = load i8, ptr %1150, align 1, !tbaa !5
  %1152 = and i8 %1151, -64
  %1153 = icmp eq i8 %1152, -128
  br i1 %1153, label %1154, label %1159

1154:                                             ; preds = %1149
  %1155 = getelementptr inbounds i8, ptr %1150, i64 -1
  %1156 = icmp ugt ptr %1155, %1133
  br i1 %1156, label %1149, label %1157, !llvm.loop !46

1157:                                             ; preds = %1154
  %1158 = load i8, ptr %1148, align 1, !tbaa !5
  br label %1159

1159:                                             ; preds = %1149, %1157
  %1160 = phi i8 [ %1158, %1157 ], [ %1151, %1149 ]
  %1161 = icmp sgt i8 %1160, -1
  br i1 %1161, label %1164, label %1190

1162:                                             ; preds = %1138
  %1163 = icmp sgt i8 %1140, -1
  br i1 %1163, label %1183, label %1190

1164:                                             ; preds = %1159
  br i1 %1143, label %1168, label %1183

1165:                                             ; preds = %1135
  %1166 = load i8, ptr %214, align 1, !tbaa !5
  %1167 = icmp sgt i8 %1166, -1
  br i1 %1167, label %1183, label %1190

1168:                                             ; preds = %1164
  %1169 = ptrtoint ptr %214 to i64
  %1170 = getelementptr i8, ptr %214, i64 %1136
  %1171 = sub i64 0, %1169
  %1172 = getelementptr i8, ptr %1170, i64 %1171
  br label %1173

1173:                                             ; preds = %1178, %1168
  %1174 = phi ptr [ %1179, %1178 ], [ %1139, %1168 ]
  %1175 = load i8, ptr %1174, align 1, !tbaa !5
  %1176 = and i8 %1175, -64
  %1177 = icmp eq i8 %1176, -128
  br i1 %1177, label %1178, label %1183

1178:                                             ; preds = %1173
  %1179 = getelementptr inbounds i8, ptr %1174, i64 -1
  %1180 = icmp ugt ptr %1179, %1133
  br i1 %1180, label %1173, label %1181, !llvm.loop !46

1181:                                             ; preds = %1178
  %1182 = load i8, ptr %1172, align 1, !tbaa !5
  br label %1183

1183:                                             ; preds = %1173, %1162, %1164, %1181, %1165
  %1184 = phi i8 [ %1166, %1165 ], [ %1140, %1164 ], [ %1182, %1181 ], [ %1140, %1162 ], [ %1175, %1173 ]
  %1185 = zext i8 %1184 to i64
  %1186 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1185
  %1187 = load i32, ptr %1186, align 4, !tbaa !73
  %1188 = and i32 %1187, 1
  %1189 = zext i32 %1188 to i64
  br label %1209

1190:                                             ; preds = %1162, %1165, %1159
  %1191 = call fastcc ptr @S_reghop3(ptr noundef %214, i64 noundef -1, ptr noundef %1133)
  %1192 = load i8, ptr %1191, align 1, !tbaa !5
  %1193 = and i8 %1192, -2
  %1194 = icmp eq i8 %1193, -62
  br i1 %1194, label %1195, label %1206

1195:                                             ; preds = %1190
  %1196 = shl i8 %1192, 6
  %1197 = getelementptr inbounds i8, ptr %1191, i64 1
  %1198 = load i8, ptr %1197, align 1, !tbaa !5
  %1199 = and i8 %1198, 63
  %1200 = or i8 %1199, %1196
  %1201 = zext i8 %1200 to i64
  %1202 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1201
  %1203 = load i32, ptr %1202, align 4, !tbaa !73
  %1204 = and i32 %1203, 1
  %1205 = zext i32 %1204 to i64
  br label %1209

1206:                                             ; preds = %1190
  %1207 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %1191) #12
  %1208 = zext i1 %1207 to i64
  br label %1209

1209:                                             ; preds = %1183, %1206, %1195, %1132
  %1210 = phi i64 [ 0, %1132 ], [ %1189, %1183 ], [ %1205, %1195 ], [ %1208, %1206 ]
  %1211 = icmp slt i32 %222, 0
  br i1 %1211, label %1245, label %1212

1212:                                             ; preds = %1209
  %1213 = load i8, ptr %214, align 1, !tbaa !5
  %1214 = icmp sgt i8 %1213, -1
  br i1 %1214, label %1215, label %1221

1215:                                             ; preds = %1212
  %1216 = zext i8 %1213 to i64
  %1217 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1216
  %1218 = load i32, ptr %1217, align 4, !tbaa !73
  %1219 = and i32 %1218, 1
  %1220 = zext i32 %1219 to i64
  br label %1245

1221:                                             ; preds = %1212
  %1222 = zext i8 %1213 to i32
  %1223 = and i32 %1222, 254
  %1224 = icmp eq i32 %1223, 194
  br i1 %1224, label %1225, label %1242

1225:                                             ; preds = %1221
  %1226 = and i32 %1222, 28
  %1227 = icmp eq i32 %1226, 0
  br i1 %1227, label %1228, label %1239

1228:                                             ; preds = %1225
  %1229 = shl i8 %1213, 6
  %1230 = getelementptr inbounds i8, ptr %214, i64 1
  %1231 = load i8, ptr %1230, align 1, !tbaa !5
  %1232 = and i8 %1231, 63
  %1233 = or i8 %1232, %1229
  %1234 = zext i8 %1233 to i64
  %1235 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1234
  %1236 = load i32, ptr %1235, align 4, !tbaa !73
  %1237 = and i32 %1236, 1
  %1238 = icmp ne i32 %1237, 0
  br label %1239

1239:                                             ; preds = %1228, %1225
  %1240 = phi i1 [ false, %1225 ], [ %1238, %1228 ]
  %1241 = zext i1 %1240 to i64
  br label %1245

1242:                                             ; preds = %1221
  %1243 = call zeroext i1 @Perl__is_utf8_FOO(i8 noundef zeroext 0, ptr noundef nonnull %214) #12
  %1244 = zext i1 %1243 to i64
  br label %1245

1245:                                             ; preds = %1215, %1242, %1239, %1209
  %1246 = phi i64 [ 0, %1209 ], [ %1220, %1215 ], [ %1241, %1239 ], [ %1244, %1242 ]
  %1247 = icmp ne i64 %1210, %1246
  %1248 = zext i1 %1247 to i8
  br label %1556

1249:                                             ; preds = %1129
  %1250 = load ptr, ptr %59, align 8, !tbaa !26
  %1251 = icmp eq ptr %214, %1250
  %1252 = icmp slt i32 %222, 0
  %1253 = select i1 %1251, i1 true, i1 %1252
  br i1 %1253, label %1556, label %1254

1254:                                             ; preds = %1249
  %1255 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !35
  %1256 = ptrtoint ptr %1250 to i64
  %1257 = icmp ugt ptr %214, %1250
  br i1 %1257, label %1258, label %1293

1258:                                             ; preds = %1254
  %1259 = getelementptr inbounds i8, ptr %214, i64 -1
  %1260 = load i8, ptr %1259, align 1, !tbaa !5
  %1261 = icmp slt i8 %1260, 0
  %1262 = icmp ugt ptr %1259, %1250
  %1263 = and i1 %1261, %1262
  br i1 %1263, label %1264, label %1293

1264:                                             ; preds = %1258
  %1265 = ptrtoint ptr %214 to i64
  %1266 = getelementptr i8, ptr %214, i64 %1256
  %1267 = sub i64 0, %1265
  %1268 = getelementptr i8, ptr %1266, i64 %1267
  br label %1269

1269:                                             ; preds = %1274, %1264
  %1270 = phi ptr [ %1275, %1274 ], [ %1259, %1264 ]
  %1271 = load i8, ptr %1270, align 1, !tbaa !5
  %1272 = and i8 %1271, -64
  %1273 = icmp eq i8 %1272, -128
  br i1 %1273, label %1274, label %1277

1274:                                             ; preds = %1269
  %1275 = getelementptr inbounds i8, ptr %1270, i64 -1
  %1276 = icmp ugt ptr %1275, %1250
  br i1 %1276, label %1269, label %1277, !llvm.loop !46

1277:                                             ; preds = %1274, %1269
  %1278 = phi ptr [ %1268, %1274 ], [ %1270, %1269 ]
  %1279 = load ptr, ptr %58, align 8, !tbaa !27
  br i1 %1263, label %1280, label %1296

1280:                                             ; preds = %1277
  %1281 = ptrtoint ptr %214 to i64
  %1282 = getelementptr i8, ptr %214, i64 %1256
  %1283 = sub i64 0, %1281
  %1284 = getelementptr i8, ptr %1282, i64 %1283
  br label %1285

1285:                                             ; preds = %1290, %1280
  %1286 = phi ptr [ %1291, %1290 ], [ %1259, %1280 ]
  %1287 = load i8, ptr %1286, align 1, !tbaa !5
  %1288 = and i8 %1287, -64
  %1289 = icmp eq i8 %1288, -128
  br i1 %1289, label %1290, label %1296

1290:                                             ; preds = %1285
  %1291 = getelementptr inbounds i8, ptr %1286, i64 -1
  %1292 = icmp ugt ptr %1291, %1250
  br i1 %1292, label %1285, label %1296, !llvm.loop !46

1293:                                             ; preds = %1254, %1258
  %1294 = phi ptr [ %1259, %1258 ], [ %214, %1254 ]
  %1295 = load ptr, ptr %58, align 8, !tbaa !27
  br label %1296

1296:                                             ; preds = %1285, %1290, %1293, %1277
  %1297 = phi ptr [ %1279, %1277 ], [ %1295, %1293 ], [ %1279, %1290 ], [ %1279, %1285 ]
  %1298 = phi ptr [ %1278, %1277 ], [ %1294, %1293 ], [ %1278, %1290 ], [ %1278, %1285 ]
  %1299 = phi ptr [ %1259, %1277 ], [ %1294, %1293 ], [ %1286, %1285 ], [ %1284, %1290 ]
  %1300 = ptrtoint ptr %1297 to i64
  %1301 = ptrtoint ptr %1299 to i64
  %1302 = sub i64 %1300, %1301
  %1303 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1304 = select i1 %1303, i32 0, i32 -8161
  %1305 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %1298, i64 noundef %1302, ptr noundef null, i32 noundef %1304) #12
  %1306 = call i64 @Perl__invlist_search(ptr noundef %1255, i64 noundef %1305) #12
  %1307 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1306
  %1308 = load i32, ptr %1307, align 4, !tbaa !5
  %1309 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !35
  %1310 = load ptr, ptr %58, align 8, !tbaa !27
  %1311 = ptrtoint ptr %1310 to i64
  %1312 = ptrtoint ptr %214 to i64
  %1313 = sub i64 %1311, %1312
  %1314 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1315 = select i1 %1314, i32 0, i32 -8161
  %1316 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1313, ptr noundef null, i32 noundef %1315) #12
  %1317 = call i64 @Perl__invlist_search(ptr noundef %1309, i64 noundef %1316) #12
  %1318 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1317
  %1319 = load i32, ptr %1318, align 4, !tbaa !5
  %1320 = call fastcc zeroext i1 @S_isGCB(i32 noundef %1308, i32 noundef %1319)
  %1321 = zext i1 %1320 to i8
  br label %1556

1322:                                             ; preds = %1129
  %1323 = load ptr, ptr %59, align 8, !tbaa !26
  %1324 = icmp eq ptr %214, %1323
  %1325 = icmp slt i32 %222, 0
  %1326 = select i1 %1324, i1 true, i1 %1325
  br i1 %1326, label %1556, label %1327

1327:                                             ; preds = %1322
  %1328 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %1329 = ptrtoint ptr %1323 to i64
  %1330 = icmp ugt ptr %214, %1323
  br i1 %1330, label %1331, label %1366

1331:                                             ; preds = %1327
  %1332 = getelementptr inbounds i8, ptr %214, i64 -1
  %1333 = load i8, ptr %1332, align 1, !tbaa !5
  %1334 = icmp slt i8 %1333, 0
  %1335 = icmp ugt ptr %1332, %1323
  %1336 = and i1 %1334, %1335
  br i1 %1336, label %1337, label %1366

1337:                                             ; preds = %1331
  %1338 = ptrtoint ptr %214 to i64
  %1339 = getelementptr i8, ptr %214, i64 %1329
  %1340 = sub i64 0, %1338
  %1341 = getelementptr i8, ptr %1339, i64 %1340
  br label %1342

1342:                                             ; preds = %1347, %1337
  %1343 = phi ptr [ %1348, %1347 ], [ %1332, %1337 ]
  %1344 = load i8, ptr %1343, align 1, !tbaa !5
  %1345 = and i8 %1344, -64
  %1346 = icmp eq i8 %1345, -128
  br i1 %1346, label %1347, label %1350

1347:                                             ; preds = %1342
  %1348 = getelementptr inbounds i8, ptr %1343, i64 -1
  %1349 = icmp ugt ptr %1348, %1323
  br i1 %1349, label %1342, label %1350, !llvm.loop !46

1350:                                             ; preds = %1347, %1342
  %1351 = phi ptr [ %1341, %1347 ], [ %1343, %1342 ]
  %1352 = load ptr, ptr %58, align 8, !tbaa !27
  br i1 %1336, label %1353, label %1369

1353:                                             ; preds = %1350
  %1354 = ptrtoint ptr %214 to i64
  %1355 = getelementptr i8, ptr %214, i64 %1329
  %1356 = sub i64 0, %1354
  %1357 = getelementptr i8, ptr %1355, i64 %1356
  br label %1358

1358:                                             ; preds = %1363, %1353
  %1359 = phi ptr [ %1364, %1363 ], [ %1332, %1353 ]
  %1360 = load i8, ptr %1359, align 1, !tbaa !5
  %1361 = and i8 %1360, -64
  %1362 = icmp eq i8 %1361, -128
  br i1 %1362, label %1363, label %1369

1363:                                             ; preds = %1358
  %1364 = getelementptr inbounds i8, ptr %1359, i64 -1
  %1365 = icmp ugt ptr %1364, %1323
  br i1 %1365, label %1358, label %1369, !llvm.loop !46

1366:                                             ; preds = %1327, %1331
  %1367 = phi ptr [ %1332, %1331 ], [ %214, %1327 ]
  %1368 = load ptr, ptr %58, align 8, !tbaa !27
  br label %1369

1369:                                             ; preds = %1358, %1363, %1366, %1350
  %1370 = phi ptr [ %1352, %1350 ], [ %1368, %1366 ], [ %1352, %1363 ], [ %1352, %1358 ]
  %1371 = phi ptr [ %1351, %1350 ], [ %1367, %1366 ], [ %1351, %1363 ], [ %1351, %1358 ]
  %1372 = phi ptr [ %1332, %1350 ], [ %1367, %1366 ], [ %1359, %1358 ], [ %1357, %1363 ]
  %1373 = ptrtoint ptr %1370 to i64
  %1374 = ptrtoint ptr %1372 to i64
  %1375 = sub i64 %1373, %1374
  %1376 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1377 = select i1 %1376, i32 0, i32 -8161
  %1378 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %1371, i64 noundef %1375, ptr noundef null, i32 noundef %1377) #12
  %1379 = call i64 @Perl__invlist_search(ptr noundef %1328, i64 noundef %1378) #12
  %1380 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1379
  %1381 = load i32, ptr %1380, align 4, !tbaa !5
  %1382 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %1383 = load ptr, ptr %58, align 8, !tbaa !27
  %1384 = ptrtoint ptr %1383 to i64
  %1385 = ptrtoint ptr %214 to i64
  %1386 = sub i64 %1384, %1385
  %1387 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1388 = select i1 %1387, i32 0, i32 -8161
  %1389 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1386, ptr noundef null, i32 noundef %1388) #12
  %1390 = call i64 @Perl__invlist_search(ptr noundef %1382, i64 noundef %1389) #12
  %1391 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1390
  %1392 = load i32, ptr %1391, align 4, !tbaa !5
  %1393 = load ptr, ptr %59, align 8, !tbaa !26
  %1394 = load ptr, ptr %58, align 8, !tbaa !27
  %1395 = call fastcc zeroext i1 @S_isSB(i32 noundef %1381, i32 noundef %1392, ptr noundef %1393, ptr noundef %214, ptr noundef %1394, i1 noundef zeroext %23)
  %1396 = zext i1 %1395 to i8
  br label %1556

1397:                                             ; preds = %1129
  %1398 = load ptr, ptr %59, align 8, !tbaa !26
  %1399 = icmp eq ptr %214, %1398
  %1400 = icmp slt i32 %222, 0
  %1401 = select i1 %1399, i1 true, i1 %1400
  br i1 %1401, label %1556, label %1402

1402:                                             ; preds = %1397
  %1403 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %1404 = ptrtoint ptr %1398 to i64
  %1405 = icmp ugt ptr %214, %1398
  br i1 %1405, label %1406, label %1441

1406:                                             ; preds = %1402
  %1407 = getelementptr inbounds i8, ptr %214, i64 -1
  %1408 = load i8, ptr %1407, align 1, !tbaa !5
  %1409 = icmp slt i8 %1408, 0
  %1410 = icmp ugt ptr %1407, %1398
  %1411 = and i1 %1409, %1410
  br i1 %1411, label %1412, label %1441

1412:                                             ; preds = %1406
  %1413 = ptrtoint ptr %214 to i64
  %1414 = getelementptr i8, ptr %214, i64 %1404
  %1415 = sub i64 0, %1413
  %1416 = getelementptr i8, ptr %1414, i64 %1415
  br label %1417

1417:                                             ; preds = %1422, %1412
  %1418 = phi ptr [ %1423, %1422 ], [ %1407, %1412 ]
  %1419 = load i8, ptr %1418, align 1, !tbaa !5
  %1420 = and i8 %1419, -64
  %1421 = icmp eq i8 %1420, -128
  br i1 %1421, label %1422, label %1425

1422:                                             ; preds = %1417
  %1423 = getelementptr inbounds i8, ptr %1418, i64 -1
  %1424 = icmp ugt ptr %1423, %1398
  br i1 %1424, label %1417, label %1425, !llvm.loop !46

1425:                                             ; preds = %1422, %1417
  %1426 = phi ptr [ %1416, %1422 ], [ %1418, %1417 ]
  %1427 = load ptr, ptr %58, align 8, !tbaa !27
  br i1 %1411, label %1428, label %1444

1428:                                             ; preds = %1425
  %1429 = ptrtoint ptr %214 to i64
  %1430 = getelementptr i8, ptr %214, i64 %1404
  %1431 = sub i64 0, %1429
  %1432 = getelementptr i8, ptr %1430, i64 %1431
  br label %1433

1433:                                             ; preds = %1438, %1428
  %1434 = phi ptr [ %1439, %1438 ], [ %1407, %1428 ]
  %1435 = load i8, ptr %1434, align 1, !tbaa !5
  %1436 = and i8 %1435, -64
  %1437 = icmp eq i8 %1436, -128
  br i1 %1437, label %1438, label %1444

1438:                                             ; preds = %1433
  %1439 = getelementptr inbounds i8, ptr %1434, i64 -1
  %1440 = icmp ugt ptr %1439, %1398
  br i1 %1440, label %1433, label %1444, !llvm.loop !46

1441:                                             ; preds = %1402, %1406
  %1442 = phi ptr [ %1407, %1406 ], [ %214, %1402 ]
  %1443 = load ptr, ptr %58, align 8, !tbaa !27
  br label %1444

1444:                                             ; preds = %1433, %1438, %1441, %1425
  %1445 = phi ptr [ %1427, %1425 ], [ %1443, %1441 ], [ %1427, %1438 ], [ %1427, %1433 ]
  %1446 = phi ptr [ %1426, %1425 ], [ %1442, %1441 ], [ %1426, %1438 ], [ %1426, %1433 ]
  %1447 = phi ptr [ %1407, %1425 ], [ %1442, %1441 ], [ %1434, %1433 ], [ %1432, %1438 ]
  %1448 = ptrtoint ptr %1445 to i64
  %1449 = ptrtoint ptr %1447 to i64
  %1450 = sub i64 %1448, %1449
  %1451 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1452 = select i1 %1451, i32 0, i32 -8161
  %1453 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %1446, i64 noundef %1450, ptr noundef null, i32 noundef %1452) #12
  %1454 = call i64 @Perl__invlist_search(ptr noundef %1403, i64 noundef %1453) #12
  %1455 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1454
  %1456 = load i32, ptr %1455, align 4, !tbaa !5
  %1457 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %1458 = load ptr, ptr %58, align 8, !tbaa !27
  %1459 = ptrtoint ptr %1458 to i64
  %1460 = ptrtoint ptr %214 to i64
  %1461 = sub i64 %1459, %1460
  %1462 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1463 = select i1 %1462, i32 0, i32 -8161
  %1464 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1461, ptr noundef null, i32 noundef %1463) #12
  %1465 = call i64 @Perl__invlist_search(ptr noundef %1457, i64 noundef %1464) #12
  %1466 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1465
  %1467 = load i32, ptr %1466, align 4, !tbaa !5
  %1468 = load ptr, ptr %59, align 8, !tbaa !26
  %1469 = load ptr, ptr %58, align 8, !tbaa !27
  %1470 = call fastcc zeroext i1 @S_isWB(i32 noundef 18, i32 noundef %1456, i32 noundef %1467, ptr noundef %1468, ptr noundef %214, ptr noundef %1469, i1 noundef zeroext %23)
  %1471 = zext i1 %1470 to i8
  br label %1556

1472:                                             ; preds = %1126
  switch i8 %1127, label %1556 [
    i8 0, label %1473
    i8 1, label %1495
    i8 2, label %1510
    i8 3, label %1533
  ]

1473:                                             ; preds = %1472
  %1474 = load ptr, ptr %59, align 8, !tbaa !26
  %1475 = icmp eq ptr %214, %1474
  br i1 %1475, label %1483, label %1476

1476:                                             ; preds = %1473
  %1477 = getelementptr inbounds i8, ptr %214, i64 -1
  %1478 = load i8, ptr %1477, align 1, !tbaa !5
  %1479 = zext i8 %1478 to i64
  %1480 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1479
  %1481 = load i32, ptr %1480, align 4, !tbaa !73
  %1482 = and i32 %1481, 1
  br label %1483

1483:                                             ; preds = %1473, %1476
  %1484 = phi i32 [ %1482, %1476 ], [ 0, %1473 ]
  %1485 = icmp slt i32 %222, 0
  br i1 %1485, label %1491, label %1486

1486:                                             ; preds = %1483
  %1487 = zext i32 %222 to i64
  %1488 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1487
  %1489 = load i32, ptr %1488, align 4, !tbaa !73
  %1490 = and i32 %1489, 1
  br label %1491

1491:                                             ; preds = %1483, %1486
  %1492 = phi i32 [ %1490, %1486 ], [ 0, %1483 ]
  %1493 = icmp ne i32 %1484, %1492
  %1494 = zext i1 %1493 to i8
  br label %1556

1495:                                             ; preds = %1472
  %1496 = load ptr, ptr %59, align 8, !tbaa !26
  %1497 = icmp eq ptr %214, %1496
  %1498 = icmp slt i32 %222, 0
  %1499 = select i1 %1497, i1 true, i1 %1498
  br i1 %1499, label %1556, label %1500

1500:                                             ; preds = %1495
  %1501 = getelementptr inbounds i8, ptr %214, i64 -1
  %1502 = load i8, ptr %1501, align 1, !tbaa !5
  %1503 = icmp eq i8 %1502, 13
  br i1 %1503, label %1504, label %1507

1504:                                             ; preds = %1500
  %1505 = load i8, ptr %214, align 1, !tbaa !5
  %1506 = icmp ne i8 %1505, 10
  br label %1507

1507:                                             ; preds = %1504, %1500
  %1508 = phi i1 [ true, %1500 ], [ %1506, %1504 ]
  %1509 = zext i1 %1508 to i8
  br label %1556

1510:                                             ; preds = %1472
  %1511 = load ptr, ptr %59, align 8, !tbaa !26
  %1512 = icmp eq ptr %214, %1511
  %1513 = icmp slt i32 %222, 0
  %1514 = select i1 %1512, i1 true, i1 %1513
  br i1 %1514, label %1556, label %1515

1515:                                             ; preds = %1510
  %1516 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %1517 = getelementptr inbounds i8, ptr %214, i64 -1
  %1518 = load i8, ptr %1517, align 1, !tbaa !5
  %1519 = zext i8 %1518 to i64
  %1520 = call i64 @Perl__invlist_search(ptr noundef %1516, i64 noundef %1519) #12
  %1521 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1520
  %1522 = load i32, ptr %1521, align 4, !tbaa !5
  %1523 = load ptr, ptr @PL_SB_invlist, align 8, !tbaa !35
  %1524 = load i8, ptr %214, align 1, !tbaa !5
  %1525 = zext i8 %1524 to i64
  %1526 = call i64 @Perl__invlist_search(ptr noundef %1523, i64 noundef %1525) #12
  %1527 = getelementptr inbounds [2835 x i32], ptr @Sentence_Break_invmap, i64 0, i64 %1526
  %1528 = load i32, ptr %1527, align 4, !tbaa !5
  %1529 = load ptr, ptr %59, align 8, !tbaa !26
  %1530 = load ptr, ptr %58, align 8, !tbaa !27
  %1531 = call fastcc zeroext i1 @S_isSB(i32 noundef %1522, i32 noundef %1528, ptr noundef %1529, ptr noundef nonnull %214, ptr noundef %1530, i1 noundef zeroext false)
  %1532 = zext i1 %1531 to i8
  br label %1556

1533:                                             ; preds = %1472
  %1534 = load ptr, ptr %59, align 8, !tbaa !26
  %1535 = icmp eq ptr %214, %1534
  %1536 = icmp slt i32 %222, 0
  %1537 = select i1 %1535, i1 true, i1 %1536
  br i1 %1537, label %1556, label %1538

1538:                                             ; preds = %1533
  %1539 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %1540 = getelementptr inbounds i8, ptr %214, i64 -1
  %1541 = load i8, ptr %1540, align 1, !tbaa !5
  %1542 = zext i8 %1541 to i64
  %1543 = call i64 @Perl__invlist_search(ptr noundef %1539, i64 noundef %1542) #12
  %1544 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1543
  %1545 = load i32, ptr %1544, align 4, !tbaa !5
  %1546 = load ptr, ptr @PL_WB_invlist, align 8, !tbaa !35
  %1547 = load i8, ptr %214, align 1, !tbaa !5
  %1548 = zext i8 %1547 to i64
  %1549 = call i64 @Perl__invlist_search(ptr noundef %1546, i64 noundef %1548) #12
  %1550 = getelementptr inbounds [1480 x i32], ptr @Word_Break_invmap, i64 0, i64 %1549
  %1551 = load i32, ptr %1550, align 4, !tbaa !5
  %1552 = load ptr, ptr %59, align 8, !tbaa !26
  %1553 = load ptr, ptr %58, align 8, !tbaa !27
  %1554 = call fastcc zeroext i1 @S_isWB(i32 noundef 18, i32 noundef %1545, i32 noundef %1551, ptr noundef %1552, ptr noundef nonnull %214, ptr noundef %1553, i1 noundef zeroext false)
  %1555 = zext i1 %1554 to i8
  br label %1556

1556:                                             ; preds = %1533, %1510, %1495, %1397, %1322, %1249, %1491, %1472, %1507, %1515, %1538, %1245, %1129, %1296, %1369, %1444
  %1557 = phi i8 [ %168, %1129 ], [ %1471, %1444 ], [ %1396, %1369 ], [ %1321, %1296 ], [ %1248, %1245 ], [ %168, %1472 ], [ %1555, %1538 ], [ %1532, %1515 ], [ %1509, %1507 ], [ %1494, %1491 ], [ 1, %1249 ], [ 1, %1322 ], [ 1, %1397 ], [ 1, %1495 ], [ 1, %1510 ], [ 1, %1533 ]
  %1558 = phi i32 [ %1131, %1129 ], [ %1131, %1444 ], [ %1131, %1369 ], [ %1131, %1296 ], [ %1131, %1245 ], [ %1128, %1472 ], [ %1128, %1538 ], [ %1128, %1515 ], [ %1128, %1507 ], [ %1128, %1491 ], [ %1131, %1249 ], [ %1131, %1322 ], [ %1131, %1397 ], [ %1128, %1495 ], [ %1128, %1510 ], [ %1128, %1533 ]
  %1559 = and i8 %1557, 1
  %1560 = icmp eq i8 %1559, 0
  %1561 = zext i1 %1560 to i32
  %1562 = icmp eq i32 %1558, %1561
  br i1 %1562, label %4714, label %4918

1563:                                             ; preds = %221, %221
  %1564 = icmp slt i32 %222, 0
  br i1 %1564, label %4918, label %1565

1565:                                             ; preds = %1563
  br i1 %23, label %1566, label %1575

1566:                                             ; preds = %1565
  %1567 = call fastcc zeroext i1 @S_reginclass(ptr noundef %190, ptr noundef %215, ptr noundef %214, ptr noundef %216, i1 noundef zeroext true)
  br i1 %1567, label %1568, label %4918

1568:                                             ; preds = %1566
  %1569 = load i8, ptr %214, align 1, !tbaa !5
  %1570 = zext i8 %1569 to i64
  %1571 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1570
  %1572 = load i8, ptr %1571, align 1, !tbaa !5
  %1573 = zext i8 %1572 to i64
  %1574 = getelementptr inbounds i8, ptr %214, i64 %1573
  br label %4714

1575:                                             ; preds = %1565
  %1576 = load i8, ptr %215, align 2, !tbaa !76
  %1577 = icmp eq i8 %1576, 0
  br i1 %1577, label %1581, label %1578

1578:                                             ; preds = %1575
  %1579 = getelementptr inbounds i8, ptr %214, i64 1
  %1580 = call fastcc zeroext i1 @S_reginclass(ptr noundef %190, ptr noundef nonnull %215, ptr noundef %214, ptr noundef nonnull %1579, i1 noundef zeroext false)
  br i1 %1580, label %1593, label %4918

1581:                                             ; preds = %1575
  %1582 = load i8, ptr %214, align 1, !tbaa !5
  %1583 = zext i8 %1582 to i32
  %1584 = lshr i32 %1583, 3
  %1585 = zext i32 %1584 to i64
  %1586 = getelementptr inbounds %struct.regnode_charclass, ptr %215, i64 0, i32 4, i64 %1585
  %1587 = load i8, ptr %1586, align 1, !tbaa !5
  %1588 = zext i8 %1587 to i32
  %1589 = and i32 %1583, 7
  %1590 = shl nuw nsw i32 1, %1589
  %1591 = and i32 %1590, %1588
  %1592 = icmp eq i32 %1591, 0
  br i1 %1592, label %4918, label %1593

1593:                                             ; preds = %1581, %1578
  %1594 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4714

1595:                                             ; preds = %221
  br label %1596

1596:                                             ; preds = %221, %1595
  %1597 = phi i32 [ 0, %1595 ], [ 1, %221 ]
  %1598 = icmp slt i32 %222, 0
  br i1 %1598, label %4918, label %1599

1599:                                             ; preds = %1596
  %1600 = icmp ugt i32 %222, 127
  %1601 = and i1 %23, %1600
  br i1 %1601, label %1608, label %1602

1602:                                             ; preds = %1599
  %1603 = load i8, ptr %215, align 2, !tbaa !76
  %1604 = trunc i32 %222 to i8
  %1605 = call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %1603, i8 noundef zeroext %1604)
  %1606 = zext i1 %1605 to i32
  %1607 = icmp eq i32 %1597, %1606
  br i1 %1607, label %4918, label %1622

1608:                                             ; preds = %1599
  %1609 = and i32 %222, 254
  %1610 = icmp eq i32 %1609, 194
  br i1 %1610, label %1611, label %1699

1611:                                             ; preds = %1608
  %1612 = load i8, ptr %215, align 2, !tbaa !76
  %1613 = getelementptr inbounds i8, ptr %214, i64 1
  %1614 = load i8, ptr %1613, align 1, !tbaa !5
  %1615 = and i8 %1614, 63
  %1616 = trunc i32 %222 to i8
  %1617 = shl i8 %1616, 6
  %1618 = or i8 %1615, %1617
  %1619 = call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %1612, i8 noundef zeroext %1618)
  %1620 = zext i1 %1619 to i32
  %1621 = icmp eq i32 %1597, %1620
  br i1 %1621, label %4918, label %1622

1622:                                             ; preds = %1611, %1602
  %1623 = load i8, ptr %214, align 1, !tbaa !5
  %1624 = zext i8 %1623 to i64
  %1625 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1624
  %1626 = load i8, ptr %1625, align 1, !tbaa !5
  %1627 = zext i8 %1626 to i64
  %1628 = getelementptr inbounds i8, ptr %214, i64 %1627
  br label %4714

1629:                                             ; preds = %221
  br label %1630

1630:                                             ; preds = %221, %1629
  %1631 = phi i32 [ 0, %1629 ], [ 1, %221 ]
  br i1 %23, label %1655, label %1636

1632:                                             ; preds = %221
  %1633 = icmp slt i32 %222, 0
  br i1 %1633, label %4918, label %1634

1634:                                             ; preds = %1632
  %1635 = icmp ult i32 %222, 128
  br i1 %1635, label %1639, label %4701

1636:                                             ; preds = %221, %1630
  %1637 = phi i32 [ %1631, %1630 ], [ 0, %221 ]
  %1638 = icmp slt i32 %222, 0
  br i1 %1638, label %4918, label %1639

1639:                                             ; preds = %1634, %1636
  %1640 = phi i32 [ %1637, %1636 ], [ 1, %1634 ]
  %1641 = zext i32 %222 to i64
  %1642 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1641
  %1643 = load i32, ptr %1642, align 4, !tbaa !73
  %1644 = load i8, ptr %215, align 2, !tbaa !76
  %1645 = zext i8 %1644 to i32
  %1646 = shl nuw i32 1, %1645
  %1647 = or i32 %1646, 16384
  %1648 = and i32 %1647, %1643
  %1649 = icmp eq i32 %1648, %1647
  %1650 = zext i1 %1649 to i32
  %1651 = icmp eq i32 %1640, %1650
  br i1 %1651, label %4918, label %1652

1652:                                             ; preds = %1639
  %1653 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4714

1654:                                             ; preds = %221
  br label %1655

1655:                                             ; preds = %221, %1654, %1630
  %1656 = phi i32 [ %1631, %1630 ], [ 0, %1654 ], [ 1, %221 ]
  %1657 = icmp slt i32 %222, 0
  br i1 %1657, label %4918, label %1658

1658:                                             ; preds = %1655
  %1659 = icmp ugt i32 %222, 127
  %1660 = and i1 %23, %1659
  br i1 %1660, label %1672, label %1661

1661:                                             ; preds = %1658
  %1662 = zext i32 %222 to i64
  %1663 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1662
  %1664 = load i32, ptr %1663, align 4, !tbaa !73
  %1665 = load i8, ptr %215, align 2, !tbaa !76
  %1666 = zext i8 %1665 to i32
  %1667 = lshr i32 %1664, %1666
  %1668 = and i32 %1667, 1
  %1669 = icmp eq i32 %1656, %1668
  br i1 %1669, label %4918, label %1670

1670:                                             ; preds = %1661
  %1671 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4714

1672:                                             ; preds = %1658
  %1673 = and i32 %222, 254
  %1674 = icmp eq i32 %1673, 194
  br i1 %1674, label %1675, label %1699

1675:                                             ; preds = %1672
  %1676 = and i32 %222, 28
  %1677 = icmp eq i32 %1676, 0
  br i1 %1677, label %1678, label %1693

1678:                                             ; preds = %1675
  %1679 = getelementptr inbounds i8, ptr %214, i64 1
  %1680 = load i8, ptr %1679, align 1, !tbaa !5
  %1681 = and i8 %1680, 63
  %1682 = trunc i32 %222 to i8
  %1683 = shl i8 %1682, 6
  %1684 = or i8 %1681, %1683
  %1685 = zext i8 %1684 to i64
  %1686 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %1685
  %1687 = load i32, ptr %1686, align 4, !tbaa !73
  %1688 = load i8, ptr %215, align 2, !tbaa !76
  %1689 = zext i8 %1688 to i32
  %1690 = shl nuw i32 1, %1689
  %1691 = and i32 %1690, %1687
  %1692 = icmp ne i32 %1691, 0
  br label %1693

1693:                                             ; preds = %1678, %1675
  %1694 = phi i1 [ false, %1675 ], [ %1692, %1678 ]
  %1695 = zext i1 %1694 to i32
  %1696 = icmp eq i32 %1656, %1695
  br i1 %1696, label %4918, label %1697

1697:                                             ; preds = %1693
  %1698 = getelementptr inbounds i8, ptr %214, i64 2
  br label %4714

1699:                                             ; preds = %1672, %1608
  %1700 = phi i32 [ %1656, %1672 ], [ %1597, %1608 ]
  %1701 = load i8, ptr %215, align 2, !tbaa !76
  %1702 = icmp ult i8 %1701, 10
  br i1 %1702, label %1703, label %1718

1703:                                             ; preds = %1699
  %1704 = zext i8 %1701 to i64
  %1705 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %1704
  %1706 = load ptr, ptr %1705, align 8, !tbaa !35
  %1707 = icmp eq ptr %1706, null
  br i1 %1707, label %1708, label %1712

1708:                                             ; preds = %1703
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %13) #12
  store i8 4, ptr %13, align 1, !tbaa !5
  %1709 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %1704
  %1710 = load ptr, ptr %1709, align 8, !tbaa !35
  %1711 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %1710, ptr noundef nonnull %13) #12
  store ptr %1711, ptr %1705, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %13) #12
  br label %1712

1712:                                             ; preds = %1708, %1703
  %1713 = phi ptr [ %1711, %1708 ], [ %1706, %1703 ]
  %1714 = call i64 @Perl_swash_fetch(ptr noundef %1713, ptr noundef %214, i1 noundef zeroext true) #12
  %1715 = icmp ne i64 %1714, 0
  %1716 = zext i1 %1715 to i32
  %1717 = icmp eq i32 %1700, %1716
  br i1 %1717, label %4918, label %1833

1718:                                             ; preds = %1699
  switch i8 %1701, label %1831 [
    i8 10, label %1719
    i8 11, label %1757
    i8 12, label %1792
    i8 15, label %1815
  ]

1719:                                             ; preds = %1718
  %1720 = load i8, ptr %214, align 1, !tbaa !5
  switch i8 %1720, label %1753 [
    i8 -31, label %1721
    i8 -30, label %1729
    i8 -29, label %1745
  ]

1721:                                             ; preds = %1719
  %1722 = getelementptr inbounds i8, ptr %214, i64 1
  %1723 = load i8, ptr %1722, align 1, !tbaa !5
  %1724 = icmp eq i8 %1723, -102
  br i1 %1724, label %1725, label %1753

1725:                                             ; preds = %1721
  %1726 = getelementptr inbounds i8, ptr %214, i64 2
  %1727 = load i8, ptr %1726, align 1, !tbaa !5
  %1728 = icmp eq i8 %1727, -128
  br label %1753

1729:                                             ; preds = %1719
  %1730 = getelementptr inbounds i8, ptr %214, i64 1
  %1731 = load i8, ptr %1730, align 1, !tbaa !5
  switch i8 %1731, label %1753 [
    i8 -128, label %1732
    i8 -127, label %1741
  ]

1732:                                             ; preds = %1729
  %1733 = getelementptr inbounds i8, ptr %214, i64 2
  %1734 = load i8, ptr %1733, align 1, !tbaa !5
  %1735 = icmp ult i8 %1734, -117
  %1736 = and i8 %1734, -2
  %1737 = icmp eq i8 %1736, -88
  %1738 = or i1 %1735, %1737
  %1739 = icmp eq i8 %1734, -81
  %1740 = or i1 %1739, %1738
  br label %1753

1741:                                             ; preds = %1729
  %1742 = getelementptr inbounds i8, ptr %214, i64 2
  %1743 = load i8, ptr %1742, align 1, !tbaa !5
  %1744 = icmp eq i8 %1743, -97
  br label %1753

1745:                                             ; preds = %1719
  %1746 = getelementptr inbounds i8, ptr %214, i64 1
  %1747 = load i8, ptr %1746, align 1, !tbaa !5
  %1748 = icmp eq i8 %1747, -128
  br i1 %1748, label %1749, label %1753

1749:                                             ; preds = %1745
  %1750 = getelementptr inbounds i8, ptr %214, i64 2
  %1751 = load i8, ptr %1750, align 1, !tbaa !5
  %1752 = icmp eq i8 %1751, -128
  br label %1753

1753:                                             ; preds = %1732, %1745, %1749, %1719, %1741, %1729, %1721, %1725
  %1754 = phi i1 [ false, %1721 ], [ %1728, %1725 ], [ %1744, %1741 ], [ false, %1729 ], [ false, %1745 ], [ %1752, %1749 ], [ false, %1719 ], [ %1740, %1732 ]
  %1755 = zext i1 %1754 to i32
  %1756 = icmp eq i32 %1700, %1755
  br i1 %1756, label %4918, label %1833

1757:                                             ; preds = %1718
  %1758 = load i8, ptr %214, align 1, !tbaa !5
  switch i8 %1758, label %1788 [
    i8 -31, label %1759
    i8 -30, label %1767
    i8 -29, label %1780
  ]

1759:                                             ; preds = %1757
  %1760 = getelementptr inbounds i8, ptr %214, i64 1
  %1761 = load i8, ptr %1760, align 1, !tbaa !5
  %1762 = icmp eq i8 %1761, -102
  br i1 %1762, label %1763, label %1788

1763:                                             ; preds = %1759
  %1764 = getelementptr inbounds i8, ptr %214, i64 2
  %1765 = load i8, ptr %1764, align 1, !tbaa !5
  %1766 = icmp eq i8 %1765, -128
  br label %1788

1767:                                             ; preds = %1757
  %1768 = getelementptr inbounds i8, ptr %214, i64 1
  %1769 = load i8, ptr %1768, align 1, !tbaa !5
  switch i8 %1769, label %1788 [
    i8 -128, label %1770
    i8 -127, label %1776
  ]

1770:                                             ; preds = %1767
  %1771 = getelementptr inbounds i8, ptr %214, i64 2
  %1772 = load i8, ptr %1771, align 1, !tbaa !5
  %1773 = icmp ult i8 %1772, -117
  %1774 = icmp eq i8 %1772, -81
  %1775 = or i1 %1773, %1774
  br label %1788

1776:                                             ; preds = %1767
  %1777 = getelementptr inbounds i8, ptr %214, i64 2
  %1778 = load i8, ptr %1777, align 1, !tbaa !5
  %1779 = icmp eq i8 %1778, -97
  br label %1788

1780:                                             ; preds = %1757
  %1781 = getelementptr inbounds i8, ptr %214, i64 1
  %1782 = load i8, ptr %1781, align 1, !tbaa !5
  %1783 = icmp eq i8 %1782, -128
  br i1 %1783, label %1784, label %1788

1784:                                             ; preds = %1780
  %1785 = getelementptr inbounds i8, ptr %214, i64 2
  %1786 = load i8, ptr %1785, align 1, !tbaa !5
  %1787 = icmp eq i8 %1786, -128
  br label %1788

1788:                                             ; preds = %1780, %1784, %1757, %1776, %1767, %1759, %1763, %1770
  %1789 = phi i1 [ %1775, %1770 ], [ false, %1759 ], [ %1766, %1763 ], [ %1779, %1776 ], [ false, %1767 ], [ false, %1780 ], [ %1787, %1784 ], [ false, %1757 ]
  %1790 = zext i1 %1789 to i32
  %1791 = icmp eq i32 %1700, %1790
  br i1 %1791, label %4918, label %1833

1792:                                             ; preds = %1718
  %1793 = load i8, ptr %214, align 1, !tbaa !5
  %1794 = icmp eq i8 %1793, -17
  br i1 %1794, label %1795, label %1811

1795:                                             ; preds = %1792
  %1796 = getelementptr inbounds i8, ptr %214, i64 1
  %1797 = load i8, ptr %1796, align 1, !tbaa !5
  switch i8 %1797, label %1811 [
    i8 -68, label %1798
    i8 -67, label %1806
  ]

1798:                                             ; preds = %1795
  %1799 = getelementptr inbounds i8, ptr %214, i64 2
  %1800 = load i8, ptr %1799, align 1, !tbaa !5
  %1801 = add i8 %1800, 112
  %1802 = icmp ult i8 %1801, 10
  br i1 %1802, label %1811, label %1803

1803:                                             ; preds = %1798
  %1804 = add i8 %1800, 95
  %1805 = icmp ult i8 %1804, 6
  br label %1811

1806:                                             ; preds = %1795
  %1807 = getelementptr inbounds i8, ptr %214, i64 2
  %1808 = load i8, ptr %1807, align 1, !tbaa !5
  %1809 = add i8 %1808, 127
  %1810 = icmp ult i8 %1809, 6
  br label %1811

1811:                                             ; preds = %1806, %1803, %1795, %1798, %1792
  %1812 = phi i1 [ false, %1792 ], [ true, %1798 ], [ %1805, %1803 ], [ false, %1795 ], [ %1810, %1806 ]
  %1813 = zext i1 %1812 to i32
  %1814 = icmp eq i32 %1700, %1813
  br i1 %1814, label %4918, label %1833

1815:                                             ; preds = %1718
  %1816 = load i8, ptr %214, align 1, !tbaa !5
  %1817 = icmp eq i8 %1816, -30
  br i1 %1817, label %1818, label %1827

1818:                                             ; preds = %1815
  %1819 = getelementptr inbounds i8, ptr %214, i64 1
  %1820 = load i8, ptr %1819, align 1, !tbaa !5
  %1821 = icmp eq i8 %1820, -128
  br i1 %1821, label %1822, label %1827

1822:                                             ; preds = %1818
  %1823 = getelementptr inbounds i8, ptr %214, i64 2
  %1824 = load i8, ptr %1823, align 1, !tbaa !5
  %1825 = and i8 %1824, -2
  %1826 = icmp eq i8 %1825, -88
  br label %1827

1827:                                             ; preds = %1822, %1818, %1815
  %1828 = phi i1 [ false, %1818 ], [ false, %1815 ], [ %1826, %1822 ]
  %1829 = zext i1 %1828 to i32
  %1830 = icmp eq i32 %1700, %1829
  br i1 %1830, label %4918, label %1833

1831:                                             ; preds = %1718
  %1832 = icmp eq i32 %1700, 0
  br i1 %1832, label %4918, label %1833

1833:                                             ; preds = %1753, %1788, %1811, %1827, %1831, %1712
  %1834 = load i8, ptr %214, align 1, !tbaa !5
  %1835 = zext i8 %1834 to i64
  %1836 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1835
  %1837 = load i8, ptr %1836, align 1, !tbaa !5
  %1838 = zext i8 %1837 to i64
  %1839 = getelementptr inbounds i8, ptr %214, i64 %1838
  br label %4714

1840:                                             ; preds = %221
  %1841 = icmp slt i32 %222, 0
  br i1 %1841, label %4918, label %1842

1842:                                             ; preds = %1840
  br i1 %23, label %1853, label %1843

1843:                                             ; preds = %1842
  %1844 = getelementptr inbounds i8, ptr %214, i64 1
  %1845 = icmp eq i32 %222, 13
  %1846 = icmp ult ptr %1844, %216
  %1847 = select i1 %1845, i1 %1846, i1 false
  br i1 %1847, label %1848, label %4714

1848:                                             ; preds = %1843
  %1849 = load i8, ptr %1844, align 1, !tbaa !5
  %1850 = icmp eq i8 %1849, 10
  %1851 = getelementptr inbounds i8, ptr %214, i64 2
  %1852 = select i1 %1850, ptr %1851, ptr %1844
  br label %4714

1853:                                             ; preds = %1842
  %1854 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !35
  %1855 = ptrtoint ptr %216 to i64
  %1856 = ptrtoint ptr %214 to i64
  %1857 = sub i64 %1855, %1856
  %1858 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1859 = select i1 %1858, i32 0, i32 -8161
  %1860 = call i64 @Perl_utf8n_to_uvchr(ptr noundef %214, i64 noundef %1857, ptr noundef null, i32 noundef %1859) #12
  %1861 = call i64 @Perl__invlist_search(ptr noundef %1854, i64 noundef %1860) #12
  %1862 = load i8, ptr %214, align 1, !tbaa !5
  %1863 = zext i8 %1862 to i64
  %1864 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1863
  %1865 = load i8, ptr %1864, align 1, !tbaa !5
  %1866 = zext i8 %1865 to i64
  %1867 = getelementptr inbounds i8, ptr %214, i64 %1866
  %1868 = load ptr, ptr %58, align 8, !tbaa !27
  %1869 = icmp ult ptr %1867, %1868
  br i1 %1869, label %1870, label %4714

1870:                                             ; preds = %1853
  %1871 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1861
  %1872 = load i32, ptr %1871, align 4, !tbaa !5
  br label %1873

1873:                                             ; preds = %1870, %1888
  %1874 = phi ptr [ %1895, %1888 ], [ %1868, %1870 ]
  %1875 = phi ptr [ %1894, %1888 ], [ %1867, %1870 ]
  %1876 = phi i32 [ %1886, %1888 ], [ %1872, %1870 ]
  %1877 = load ptr, ptr @PL_GCB_invlist, align 8, !tbaa !35
  %1878 = ptrtoint ptr %1874 to i64
  %1879 = ptrtoint ptr %1875 to i64
  %1880 = sub i64 %1878, %1879
  %1881 = call zeroext i1 @Perl_ckwarn_d(i32 noundef 44) #12
  %1882 = select i1 %1881, i32 0, i32 -8161
  %1883 = call i64 @Perl_utf8n_to_uvchr(ptr noundef nonnull %1875, i64 noundef %1880, ptr noundef null, i32 noundef %1882) #12
  %1884 = call i64 @Perl__invlist_search(ptr noundef %1877, i64 noundef %1883) #12
  %1885 = getelementptr inbounds [1484 x i32], ptr @Grapheme_Cluster_Break_invmap, i64 0, i64 %1884
  %1886 = load i32, ptr %1885, align 4, !tbaa !5
  %1887 = call fastcc zeroext i1 @S_isGCB(i32 noundef %1876, i32 noundef %1886)
  br i1 %1887, label %4714, label %1888

1888:                                             ; preds = %1873
  %1889 = load i8, ptr %1875, align 1, !tbaa !5
  %1890 = zext i8 %1889 to i64
  %1891 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1890
  %1892 = load i8, ptr %1891, align 1, !tbaa !5
  %1893 = zext i8 %1892 to i64
  %1894 = getelementptr inbounds i8, ptr %1875, i64 %1893
  %1895 = load ptr, ptr %58, align 8, !tbaa !27
  %1896 = icmp ult ptr %1894, %1895
  br i1 %1896, label %1873, label %4714

1897:                                             ; preds = %221
  br label %1901

1898:                                             ; preds = %221
  br label %1901

1899:                                             ; preds = %221
  br label %1901

1900:                                             ; preds = %221
  br label %1901

1901:                                             ; preds = %221, %1900, %1899, %1898, %1897
  %1902 = phi i8 [ 55, %1897 ], [ 54, %1898 ], [ 52, %1899 ], [ 51, %1900 ], [ 53, %221 ]
  %1903 = phi ptr [ @Perl_foldEQ_latin1, %1897 ], [ @Perl_foldEQ_latin1, %1898 ], [ @Perl_foldEQ, %1899 ], [ null, %1900 ], [ @Perl_foldEQ_locale, %221 ]
  %1904 = phi ptr [ @PL_fold_latin1, %1897 ], [ @PL_fold_latin1, %1898 ], [ @PL_fold, %1899 ], [ null, %1900 ], [ @PL_fold_locale, %221 ]
  %1905 = phi i32 [ 1, %1897 ], [ 0, %1898 ], [ 0, %1899 ], [ 0, %1900 ], [ 2, %221 ]
  %1906 = getelementptr i8, ptr %215, i64 4
  %1907 = load i32, ptr %1906, align 4, !tbaa !162
  %1908 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 14
  %1909 = load ptr, ptr %1908, align 8, !tbaa !20
  %1910 = getelementptr inbounds %struct.regexp_internal, ptr %1909, i64 0, i32 3
  %1911 = load ptr, ptr %1910, align 8, !tbaa !161
  %1912 = zext i32 %1907 to i64
  %1913 = getelementptr inbounds %struct.reg_data, ptr %1911, i64 0, i32 2, i64 %1912
  %1914 = load ptr, ptr %1913, align 8, !tbaa !35
  %1915 = getelementptr inbounds %struct.sv, ptr %1914, i64 0, i32 3
  %1916 = load ptr, ptr %1915, align 8, !tbaa !5
  %1917 = load ptr, ptr %1914, align 8, !tbaa !38
  %1918 = getelementptr inbounds %struct.xpviv, ptr %1917, i64 0, i32 4
  %1919 = load i64, ptr %1918, align 8, !tbaa !5
  %1920 = icmp sgt i64 %1919, 0
  br i1 %1920, label %1921, label %1937

1921:                                             ; preds = %1901
  %1922 = load i32, ptr %193, align 8, !tbaa !67
  br label %1923

1923:                                             ; preds = %1934, %1921
  %1924 = phi i64 [ 0, %1921 ], [ %1935, %1934 ]
  %1925 = getelementptr inbounds i32, ptr %1916, i64 %1924
  %1926 = load i32, ptr %1925, align 4, !tbaa !73
  %1927 = icmp slt i32 %1922, %1926
  br i1 %1927, label %1934, label %1928

1928:                                             ; preds = %1923
  %1929 = load ptr, ptr %195, align 8, !tbaa !64
  %1930 = sext i32 %1926 to i64
  %1931 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1929, i64 %1930, i32 1
  %1932 = load i64, ptr %1931, align 8, !tbaa !74
  %1933 = icmp eq i64 %1932, -1
  br i1 %1933, label %1934, label %1937

1934:                                             ; preds = %1928, %1923
  %1935 = add nuw nsw i64 %1924, 1
  %1936 = icmp eq i64 %1935, %1919
  br i1 %1936, label %1937, label %1923, !llvm.loop !292

1937:                                             ; preds = %1928, %1934, %1901
  %1938 = phi i32 [ 0, %1901 ], [ %1926, %1928 ], [ 0, %1934 ]
  %1939 = icmp eq i32 %1938, 0
  br i1 %1939, label %4918, label %1952

1940:                                             ; preds = %221
  br label %1944

1941:                                             ; preds = %221
  br label %1944

1942:                                             ; preds = %221
  br label %1944

1943:                                             ; preds = %221
  br label %1944

1944:                                             ; preds = %221, %1943, %1942, %1941, %1940
  %1945 = phi ptr [ @Perl_foldEQ_latin1, %1940 ], [ @Perl_foldEQ_latin1, %1941 ], [ @Perl_foldEQ, %1942 ], [ null, %1943 ], [ @Perl_foldEQ_locale, %221 ]
  %1946 = phi ptr [ @PL_fold_latin1, %1940 ], [ @PL_fold_latin1, %1941 ], [ @PL_fold, %1942 ], [ null, %1943 ], [ @PL_fold_locale, %221 ]
  %1947 = phi i32 [ 1, %1940 ], [ 0, %1941 ], [ 0, %1942 ], [ 0, %1943 ], [ 2, %221 ]
  %1948 = getelementptr inbounds %struct.regnode, ptr %215, i64 0, i32 1
  %1949 = load i8, ptr %1948, align 1, !tbaa !56
  %1950 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %1951 = load i32, ptr %1950, align 4, !tbaa !162
  br label %1952

1952:                                             ; preds = %1937, %1944
  %1953 = phi i8 [ %1949, %1944 ], [ %1902, %1937 ]
  %1954 = phi ptr [ %1945, %1944 ], [ %1903, %1937 ]
  %1955 = phi ptr [ %1946, %1944 ], [ %1904, %1937 ]
  %1956 = phi i32 [ %1947, %1944 ], [ %1905, %1937 ]
  %1957 = phi i32 [ %1951, %1944 ], [ %1938, %1937 ]
  %1958 = load ptr, ptr %195, align 8, !tbaa !64
  %1959 = zext i32 %1957 to i64
  %1960 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1958, i64 %1959
  %1961 = load i64, ptr %1960, align 8, !tbaa !65
  %1962 = load i32, ptr %63, align 8, !tbaa !32
  store i32 %1962, ptr %64, align 4, !tbaa !293
  %1963 = load i32, ptr %193, align 8, !tbaa !67
  %1964 = icmp ult i32 %1963, %1957
  %1965 = icmp eq i64 %1961, -1
  %1966 = select i1 %1964, i1 true, i1 %1965
  br i1 %1966, label %4918, label %1967

1967:                                             ; preds = %1952
  %1968 = getelementptr inbounds %struct.regexp_paren_pair, ptr %1958, i64 %1959, i32 1
  %1969 = load i64, ptr %1968, align 8, !tbaa !74
  %1970 = icmp eq i64 %1961, %1969
  br i1 %1970, label %4714, label %1971

1971:                                             ; preds = %1967
  %1972 = load ptr, ptr %59, align 8, !tbaa !26
  %1973 = getelementptr inbounds i8, ptr %1972, i64 %1961
  %1974 = icmp eq i8 %1953, 51
  br i1 %1974, label %1984, label %1975

1975:                                             ; preds = %1971
  %1976 = add i8 %1953, -53
  %1977 = icmp ult i8 %1976, 2
  %1978 = select i1 %23, i1 true, i1 %1977
  br i1 %1978, label %1979, label %1984

1979:                                             ; preds = %1975
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #12
  store ptr %216, ptr %14, align 8, !tbaa !35
  %1980 = sub nsw i64 %1969, %1961
  %1981 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef %1973, ptr noundef null, i64 noundef %1980, i1 noundef zeroext %23, ptr noundef %214, ptr noundef nonnull %14, i64 noundef 0, i1 noundef zeroext %23, i32 noundef %1956) #12
  %1982 = icmp eq i32 %1981, 0
  %1983 = load ptr, ptr %14, align 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #12
  br i1 %1982, label %4918, label %4714

1984:                                             ; preds = %1975, %1971
  %1985 = icmp slt i32 %222, 0
  br i1 %1985, label %1996, label %1986

1986:                                             ; preds = %1984
  %1987 = load i8, ptr %1973, align 1, !tbaa !5
  %1988 = zext i8 %1987 to i32
  %1989 = icmp eq i32 %222, %1988
  br i1 %1989, label %1996, label %1990

1990:                                             ; preds = %1986
  br i1 %1974, label %4918, label %1991

1991:                                             ; preds = %1990
  %1992 = zext i32 %222 to i64
  %1993 = getelementptr inbounds i8, ptr %1955, i64 %1992
  %1994 = load i8, ptr %1993, align 1, !tbaa !5
  %1995 = icmp eq i8 %1987, %1994
  br i1 %1995, label %1996, label %4918

1996:                                             ; preds = %1991, %1986, %1984
  %1997 = sub nsw i64 %1969, %1961
  %1998 = getelementptr inbounds i8, ptr %214, i64 %1997
  %1999 = icmp ugt ptr %1998, %216
  br i1 %1999, label %4918, label %2000

2000:                                             ; preds = %1996
  %2001 = icmp sgt i64 %1997, 1
  br i1 %2001, label %2002, label %4714

2002:                                             ; preds = %2000
  br i1 %1974, label %2003, label %2006

2003:                                             ; preds = %2002
  %2004 = call i32 @bcmp(ptr %1973, ptr %214, i64 %1997)
  %2005 = icmp eq i32 %2004, 0
  br i1 %2005, label %4714, label %4918

2006:                                             ; preds = %2002
  %2007 = trunc i64 %1997 to i32
  %2008 = call i32 %1954(ptr noundef %1973, ptr noundef %214, i32 noundef %2007) #12, !callees !81
  %2009 = icmp eq i32 %2008, 0
  br i1 %2009, label %4918, label %4714

2010:                                             ; preds = %221, %221
  br i1 %202, label %2025, label %2011

2011:                                             ; preds = %2010
  %2012 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 1
  %2013 = load ptr, ptr %2012, align 8, !tbaa !294
  %2014 = icmp eq ptr %2013, %214
  br i1 %2014, label %2015, label %2025

2015:                                             ; preds = %2011
  %2016 = load i32, ptr %203, align 8, !tbaa !5
  %2017 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2018 = load i32, ptr %2017, align 4, !tbaa !162
  %2019 = icmp eq i32 %2016, %2018
  br i1 %2019, label %2020, label %2021

2020:                                             ; preds = %2015
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.10) #12
  br label %2021

2021:                                             ; preds = %2020, %2015
  %2022 = add i32 %183, 1
  %2023 = icmp ugt i32 %2022, %35
  br i1 %2023, label %2024, label %2025

2024:                                             ; preds = %2021
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.11) #12
  br label %2025

2025:                                             ; preds = %2010, %2011, %2021, %2024
  %2026 = phi i32 [ %2022, %2024 ], [ %2022, %2021 ], [ 0, %2011 ], [ 0, %2010 ]
  %2027 = getelementptr inbounds %struct.regnode, ptr %215, i64 0, i32 1
  %2028 = load i8, ptr %2027, align 1, !tbaa !56
  %2029 = icmp eq i8 %2028, 76
  br i1 %2029, label %2030, label %2037

2030:                                             ; preds = %2025
  %2031 = getelementptr inbounds %struct.regnode_2L, ptr %215, i64 0, i32 4
  %2032 = load i32, ptr %2031, align 4, !tbaa !295
  %2033 = sext i32 %2032 to i64
  %2034 = getelementptr inbounds %struct.regnode, ptr %215, i64 %2033
  %2035 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2036 = load i32, ptr %2035, align 4, !tbaa !162
  br label %2039

2037:                                             ; preds = %2025
  %2038 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 1
  br label %2039

2039:                                             ; preds = %2037, %2030
  %2040 = phi i32 [ %2036, %2030 ], [ 0, %2037 ]
  %2041 = phi ptr [ %2034, %2030 ], [ %2038, %2037 ]
  store i32 %2040, ptr %205, align 8
  %2042 = load i32, ptr %4, align 4, !tbaa !73
  %2043 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef 0, i32 noundef %2042)
  store i32 %2043, ptr %199, align 8, !tbaa !5
  %2044 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %2044, ptr %198, align 4, !tbaa !5
  br label %2618

2045:                                             ; preds = %221
  br i1 %202, label %2054, label %2046

2046:                                             ; preds = %2045
  %2047 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 1
  %2048 = load ptr, ptr %2047, align 8, !tbaa !294
  %2049 = icmp eq ptr %2048, %214
  br i1 %2049, label %2050, label %2054

2050:                                             ; preds = %2046
  %2051 = add i32 %183, 1
  %2052 = icmp ugt i32 %2051, %35
  br i1 %2052, label %2053, label %2054

2053:                                             ; preds = %2050
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.12) #12
  br label %2054

2054:                                             ; preds = %2045, %2046, %2050, %2053
  %2055 = phi i32 [ %2051, %2053 ], [ %2051, %2050 ], [ 0, %2046 ], [ 0, %2045 ]
  %2056 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !35
  %2057 = load ptr, ptr @PL_op, align 8, !tbaa !35
  %2058 = load ptr, ptr @PL_curcop, align 8, !tbaa !35
  %2059 = load i32, ptr %4, align 4, !tbaa !73
  %2060 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef 0, i32 noundef %2059)
  %2061 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2062 = icmp eq ptr %107, null
  br i1 %2062, label %2063, label %2065

2063:                                             ; preds = %2054
  %2064 = call ptr @Perl_find_runcv(ptr noundef null) #12
  br label %2065

2065:                                             ; preds = %2063, %2054
  %2066 = phi ptr [ %107, %2054 ], [ %2064, %2063 ]
  %2067 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2068 = load i32, ptr %2067, align 4, !tbaa !162
  %2069 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %2070 = load ptr, ptr %2069, align 8, !tbaa !161
  %2071 = getelementptr inbounds %struct.reg_data, ptr %2070, i64 0, i32 1
  %2072 = load ptr, ptr %2071, align 8, !tbaa !297
  %2073 = zext i32 %2068 to i64
  %2074 = getelementptr inbounds i8, ptr %2072, i64 %2073
  %2075 = load i8, ptr %2074, align 1, !tbaa !5
  switch i8 %2075, label %2085 [
    i8 114, label %2076
    i8 108, label %2088
  ]

2076:                                             ; preds = %2065
  %2077 = getelementptr inbounds %struct.reg_data, ptr %2070, i64 0, i32 2, i64 %2073
  %2078 = load ptr, ptr %2077, align 8, !tbaa !35
  %2079 = getelementptr i8, ptr %2078, i64 16
  %2080 = load ptr, ptr %2079, align 8, !tbaa !5
  %2081 = getelementptr inbounds %struct.regexp, ptr %2080, i64 0, i32 25
  %2082 = load ptr, ptr %2081, align 8, !tbaa !299
  %2083 = add i32 %2068, 1
  %2084 = zext i32 %2083 to i64
  br label %2088

2085:                                             ; preds = %2065
  %2086 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 25
  %2087 = load ptr, ptr %2086, align 8, !tbaa !299
  br label %2088

2088:                                             ; preds = %2065, %2085, %2076
  %2089 = phi i64 [ %2073, %2085 ], [ %2084, %2076 ], [ %2073, %2065 ]
  %2090 = phi ptr [ %2087, %2085 ], [ %2082, %2076 ], [ %2066, %2065 ]
  %2091 = getelementptr inbounds %struct.reg_data, ptr %2070, i64 0, i32 2, i64 %2089
  %2092 = load ptr, ptr %2091, align 8, !tbaa !35
  %2093 = icmp eq ptr %2090, %106
  %2094 = load ptr, ptr @PL_comppad, align 8
  %2095 = icmp eq ptr %2094, %110
  %2096 = select i1 %2093, i1 %2095, i1 false
  br i1 %2096, label %2316, label %2097

2097:                                             ; preds = %2088
  %2098 = icmp eq ptr %2090, %2066
  %2099 = select i1 %2098, i8 -64, i8 64
  %2100 = icmp eq ptr %106, null
  %2101 = load ptr, ptr %2090, align 8, !tbaa !300
  %2102 = getelementptr inbounds %struct.xpvcv, ptr %2101, i64 0, i32 9
  %2103 = load ptr, ptr %2102, align 8, !tbaa !5
  br i1 %2100, label %2170, label %2104

2104:                                             ; preds = %2097
  %2105 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !35
  %2106 = getelementptr inbounds %struct.stackinfo, ptr %2105, i64 0, i32 1
  %2107 = load ptr, ptr %2106, align 8, !tbaa !302
  %2108 = getelementptr inbounds %struct.stackinfo, ptr %2105, i64 0, i32 4
  %2109 = load i32, ptr %2108, align 8, !tbaa !304
  %2110 = sext i32 %2109 to i64
  %2111 = getelementptr inbounds %struct.context, ptr %2107, i64 %2110
  %2112 = getelementptr inbounds %struct.block, ptr %2111, i64 0, i32 8
  %2113 = getelementptr inbounds %struct.block, ptr %2111, i64 0, i32 8, i32 0, i32 4
  %2114 = load i32, ptr %2113, align 8, !tbaa !5
  %2115 = load ptr, ptr %109, align 8, !tbaa !300
  %2116 = getelementptr inbounds %struct.xpvcv, ptr %2115, i64 0, i32 13
  store i32 %2114, ptr %2116, align 4, !tbaa !73
  %2117 = icmp eq i32 %2114, 0
  br i1 %2117, label %2118, label %2125

2118:                                             ; preds = %2104
  %2119 = getelementptr inbounds %struct.sv, ptr %109, i64 0, i32 1
  %2120 = load i32, ptr %2119, align 8, !tbaa !61
  %2121 = icmp ugt i32 %2120, 1
  br i1 %2121, label %2122, label %2124

2122:                                             ; preds = %2118
  %2123 = add i32 %2120, -1
  store i32 %2123, ptr %2119, align 8, !tbaa !61
  br label %2125

2124:                                             ; preds = %2118
  call void @Perl_sv_free2(ptr noundef nonnull %109, i32 noundef %2120) #12
  br label %2125

2125:                                             ; preds = %2124, %2122, %2104
  %2126 = or i8 %2099, 24
  store i8 %2126, ptr %2111, align 8, !tbaa !5
  %2127 = load ptr, ptr @PL_op, align 8, !tbaa !35
  %2128 = getelementptr inbounds %struct.op, ptr %2127, i64 0, i32 5
  %2129 = load i8, ptr %2128, align 2, !tbaa !305
  %2130 = and i8 %2129, 3
  %2131 = icmp eq i8 %2130, 0
  br i1 %2131, label %2132, label %2139

2132:                                             ; preds = %2125
  %2133 = getelementptr inbounds %struct.op, ptr %2127, i64 0, i32 6
  %2134 = load i8, ptr %2133, align 1, !tbaa !307
  %2135 = and i8 %2134, -127
  %2136 = icmp eq i8 %2135, 0
  br i1 %2136, label %2139, label %2137

2137:                                             ; preds = %2132
  %2138 = call i32 @Perl_was_lvalue_sub() #12
  br label %2139

2139:                                             ; preds = %2137, %2132, %2125
  %2140 = phi i32 [ 129, %2125 ], [ %2138, %2137 ], [ 0, %2132 ]
  %2141 = getelementptr inbounds %struct.block, ptr %2111, i64 0, i32 8, i32 0, i32 1
  store ptr %2090, ptr %2141, align 8, !tbaa !5
  %2142 = load ptr, ptr %2090, align 8, !tbaa !300
  %2143 = getelementptr inbounds %struct.xpvcv, ptr %2142, i64 0, i32 13
  %2144 = load i32, ptr %2143, align 4, !tbaa !73
  store i32 %2144, ptr %2113, align 8, !tbaa !5
  store ptr null, ptr %2112, align 8, !tbaa !5
  %2145 = load ptr, ptr %2090, align 8, !tbaa !300
  %2146 = getelementptr inbounds %struct.xpvcv, ptr %2145, i64 0, i32 13
  %2147 = load i32, ptr %2146, align 4, !tbaa !73
  %2148 = icmp eq i32 %2147, 0
  br i1 %2148, label %2149, label %2153

2149:                                             ; preds = %2139
  %2150 = getelementptr inbounds %struct.sv, ptr %2090, i64 0, i32 1
  %2151 = load i32, ptr %2150, align 8, !tbaa !61
  %2152 = add i32 %2151, 2
  store i32 %2152, ptr %2150, align 8, !tbaa !61
  call void @Perl_save_pushptr(ptr noundef nonnull %2090, i32 noundef 11) #12
  br label %2153

2153:                                             ; preds = %2149, %2139
  %2154 = load ptr, ptr @PL_op, align 8, !tbaa !35
  %2155 = getelementptr inbounds %struct.op, ptr %2154, i64 0, i32 6
  %2156 = load i8, ptr %2155, align 1, !tbaa !307
  %2157 = zext i8 %2156 to i32
  %2158 = or i32 %2140, 48
  %2159 = and i32 %2158, %2157
  %2160 = trunc i32 %2159 to i16
  %2161 = getelementptr inbounds %struct.block, ptr %2111, i64 0, i32 2
  store i16 %2160, ptr %2161, align 2, !tbaa !5
  %2162 = load ptr, ptr %2090, align 8, !tbaa !300
  %2163 = getelementptr inbounds %struct.xpvcv, ptr %2162, i64 0, i32 13
  %2164 = load i32, ptr %2163, align 4, !tbaa !73
  br i1 %2098, label %2167, label %2165

2165:                                             ; preds = %2153
  %2166 = add nsw i32 %2164, 1
  store i32 %2166, ptr %2163, align 4, !tbaa !73
  br label %2167

2167:                                             ; preds = %2153, %2165
  %2168 = phi i32 [ %2166, %2165 ], [ %2164, %2153 ]
  %2169 = icmp sgt i32 %2168, 1
  br i1 %2169, label %2298, label %2302

2170:                                             ; preds = %2097
  call void @Perl_push_scope() #12
  %2171 = load ptr, ptr @PL_top_env, align 8, !tbaa !35
  %2172 = getelementptr inbounds %struct.jmpenv, ptr %2171, i64 0, i32 3
  %2173 = load i8, ptr %2172, align 4, !tbaa !308, !range !42, !noundef !43
  call void @Perl_save_strlen(ptr noundef nonnull @PL_tmps_floor) #12
  %2174 = load i64, ptr @PL_tmps_ix, align 8, !tbaa !169
  store i64 %2174, ptr @PL_tmps_floor, align 8, !tbaa !169
  call void @Perl_save_vptr(ptr noundef nonnull @PL_op) #12
  %2175 = load ptr, ptr @PL_top_env, align 8, !tbaa !35
  %2176 = getelementptr inbounds %struct.jmpenv, ptr %2175, i64 0, i32 3
  store i8 1, ptr %2176, align 4, !tbaa !308
  %2177 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !35
  %2178 = getelementptr inbounds %struct.stackinfo, ptr %2177, i64 0, i32 3
  %2179 = load ptr, ptr %2178, align 8, !tbaa !310
  %2180 = icmp eq ptr %2179, null
  br i1 %2180, label %2181, label %2186

2181:                                             ; preds = %2170
  %2182 = call ptr @Perl_new_stackinfo(i32 noundef 32, i32 noundef 22) #12
  %2183 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !35
  %2184 = getelementptr inbounds %struct.stackinfo, ptr %2182, i64 0, i32 2
  store ptr %2183, ptr %2184, align 8, !tbaa !311
  %2185 = getelementptr inbounds %struct.stackinfo, ptr %2183, i64 0, i32 3
  store ptr %2182, ptr %2185, align 8, !tbaa !310
  br label %2186

2186:                                             ; preds = %2181, %2170
  %2187 = phi ptr [ %2179, %2170 ], [ %2182, %2181 ]
  %2188 = getelementptr inbounds %struct.stackinfo, ptr %2187, i64 0, i32 6
  store i32 3, ptr %2188, align 8, !tbaa !312
  %2189 = getelementptr inbounds %struct.stackinfo, ptr %2187, i64 0, i32 4
  store i32 -1, ptr %2189, align 8, !tbaa !304
  %2190 = load ptr, ptr %2187, align 8, !tbaa !313
  %2191 = load ptr, ptr %2190, align 8, !tbaa !314
  %2192 = getelementptr inbounds %struct.xpvav, ptr %2191, i64 0, i32 2
  store i64 0, ptr %2192, align 8, !tbaa !316
  %2193 = load ptr, ptr @PL_stack_base, align 8, !tbaa !35
  %2194 = ptrtoint ptr %2056 to i64
  %2195 = ptrtoint ptr %2193 to i64
  %2196 = sub i64 %2194, %2195
  %2197 = ashr exact i64 %2196, 3
  %2198 = load ptr, ptr @PL_curstack, align 8, !tbaa !35
  %2199 = load ptr, ptr %2198, align 8, !tbaa !314
  %2200 = getelementptr inbounds %struct.xpvav, ptr %2199, i64 0, i32 2
  store i64 %2197, ptr %2200, align 8, !tbaa !316
  %2201 = getelementptr inbounds %struct.av, ptr %2190, i64 0, i32 3
  %2202 = load ptr, ptr %2201, align 8, !tbaa !5
  store ptr %2202, ptr @PL_stack_base, align 8, !tbaa !35
  %2203 = load ptr, ptr %2187, align 8, !tbaa !313
  %2204 = load ptr, ptr %2203, align 8, !tbaa !314
  %2205 = getelementptr inbounds %struct.xpvav, ptr %2204, i64 0, i32 3
  %2206 = load i64, ptr %2205, align 8, !tbaa !318
  %2207 = getelementptr inbounds ptr, ptr %2202, i64 %2206
  store ptr %2207, ptr @PL_stack_max, align 8, !tbaa !35
  %2208 = load ptr, ptr %2187, align 8, !tbaa !313
  %2209 = load ptr, ptr %2208, align 8, !tbaa !314
  %2210 = getelementptr inbounds %struct.xpvav, ptr %2209, i64 0, i32 2
  %2211 = load i64, ptr %2210, align 8, !tbaa !316
  %2212 = getelementptr inbounds ptr, ptr %2202, i64 %2211
  store ptr %2212, ptr @PL_stack_sp, align 8, !tbaa !35
  %2213 = load ptr, ptr %2187, align 8, !tbaa !313
  store ptr %2213, ptr @PL_curstack, align 8, !tbaa !35
  store ptr %2187, ptr @PL_curstackinfo, align 8, !tbaa !35
  %2214 = getelementptr inbounds %struct.stackinfo, ptr %2187, i64 0, i32 5
  %2215 = load i32, ptr %2214, align 4, !tbaa !319
  %2216 = icmp sgt i32 %2215, -1
  br i1 %2216, label %2217, label %2218

2217:                                             ; preds = %2186
  store i32 0, ptr %2189, align 8, !tbaa !304
  br label %2222

2218:                                             ; preds = %2186
  %2219 = call i32 @Perl_cxinc() #12
  %2220 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !35
  %2221 = getelementptr inbounds %struct.stackinfo, ptr %2220, i64 0, i32 4
  store i32 %2219, ptr %2221, align 8, !tbaa !304
  br label %2222

2222:                                             ; preds = %2218, %2217
  %2223 = phi i32 [ %2219, %2218 ], [ 0, %2217 ]
  %2224 = phi ptr [ %2220, %2218 ], [ %2187, %2217 ]
  %2225 = getelementptr inbounds %struct.stackinfo, ptr %2224, i64 0, i32 1
  %2226 = load ptr, ptr %2225, align 8, !tbaa !302
  %2227 = sext i32 %2223 to i64
  %2228 = getelementptr inbounds %struct.context, ptr %2226, i64 %2227
  %2229 = or i8 %2099, 24
  store i8 %2229, ptr %2228, align 8, !tbaa !5
  %2230 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !35
  %2231 = load ptr, ptr @PL_stack_base, align 8, !tbaa !35
  %2232 = ptrtoint ptr %2230 to i64
  %2233 = ptrtoint ptr %2231 to i64
  %2234 = sub i64 %2232, %2233
  %2235 = lshr exact i64 %2234, 3
  %2236 = trunc i64 %2235 to i32
  %2237 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 3
  store i32 %2236, ptr %2237, align 4, !tbaa !5
  %2238 = load ptr, ptr @PL_curcop, align 8, !tbaa !35
  %2239 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 4
  store ptr %2238, ptr %2239, align 8, !tbaa !5
  %2240 = load ptr, ptr @PL_markstack_ptr, align 8, !tbaa !35
  %2241 = load ptr, ptr @PL_markstack, align 8, !tbaa !35
  %2242 = ptrtoint ptr %2240 to i64
  %2243 = ptrtoint ptr %2241 to i64
  %2244 = sub i64 %2242, %2243
  %2245 = lshr exact i64 %2244, 2
  %2246 = trunc i64 %2245 to i32
  %2247 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 5
  store i32 %2246, ptr %2247, align 8, !tbaa !5
  %2248 = load i32, ptr @PL_scopestack_ix, align 4, !tbaa !73
  %2249 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 6
  store i32 %2248, ptr %2249, align 4, !tbaa !5
  %2250 = load ptr, ptr @PL_curpm, align 8, !tbaa !35
  %2251 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 7
  store ptr %2250, ptr %2251, align 8, !tbaa !5
  %2252 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 1
  store i8 2, ptr %2252, align 1, !tbaa !5
  %2253 = load ptr, ptr @PL_op, align 8, !tbaa !35
  %2254 = getelementptr inbounds %struct.op, ptr %2253, i64 0, i32 5
  %2255 = load i8, ptr %2254, align 2, !tbaa !305
  %2256 = and i8 %2255, 3
  %2257 = icmp eq i8 %2256, 0
  br i1 %2257, label %2258, label %2265

2258:                                             ; preds = %2222
  %2259 = getelementptr inbounds %struct.op, ptr %2253, i64 0, i32 6
  %2260 = load i8, ptr %2259, align 1, !tbaa !307
  %2261 = and i8 %2260, -127
  %2262 = icmp eq i8 %2261, 0
  br i1 %2262, label %2265, label %2263

2263:                                             ; preds = %2258
  %2264 = call i32 @Perl_was_lvalue_sub() #12
  br label %2265

2265:                                             ; preds = %2263, %2258, %2222
  %2266 = phi i32 [ 129, %2222 ], [ %2264, %2263 ], [ 0, %2258 ]
  %2267 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 8
  %2268 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 8, i32 0, i32 1
  store ptr %2090, ptr %2268, align 8, !tbaa !5
  %2269 = load ptr, ptr %2090, align 8, !tbaa !300
  %2270 = getelementptr inbounds %struct.xpvcv, ptr %2269, i64 0, i32 13
  %2271 = load i32, ptr %2270, align 4, !tbaa !73
  %2272 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 8, i32 0, i32 4
  store i32 %2271, ptr %2272, align 8, !tbaa !5
  store ptr null, ptr %2267, align 8, !tbaa !5
  %2273 = load ptr, ptr %2090, align 8, !tbaa !300
  %2274 = getelementptr inbounds %struct.xpvcv, ptr %2273, i64 0, i32 13
  %2275 = load i32, ptr %2274, align 4, !tbaa !73
  %2276 = icmp eq i32 %2275, 0
  br i1 %2276, label %2277, label %2281

2277:                                             ; preds = %2265
  %2278 = getelementptr inbounds %struct.sv, ptr %2090, i64 0, i32 1
  %2279 = load i32, ptr %2278, align 8, !tbaa !61
  %2280 = add i32 %2279, 2
  store i32 %2280, ptr %2278, align 8, !tbaa !61
  call void @Perl_save_pushptr(ptr noundef nonnull %2090, i32 noundef 11) #12
  br label %2281

2281:                                             ; preds = %2277, %2265
  %2282 = load ptr, ptr @PL_op, align 8, !tbaa !35
  %2283 = getelementptr inbounds %struct.op, ptr %2282, i64 0, i32 6
  %2284 = load i8, ptr %2283, align 1, !tbaa !307
  %2285 = zext i8 %2284 to i32
  %2286 = or i32 %2266, 48
  %2287 = and i32 %2286, %2285
  %2288 = trunc i32 %2287 to i16
  %2289 = getelementptr inbounds %struct.block, ptr %2228, i64 0, i32 2
  store i16 %2288, ptr %2289, align 2, !tbaa !5
  %2290 = load ptr, ptr %2090, align 8, !tbaa !300
  %2291 = getelementptr inbounds %struct.xpvcv, ptr %2290, i64 0, i32 13
  %2292 = load i32, ptr %2291, align 4, !tbaa !73
  br i1 %2098, label %2295, label %2293

2293:                                             ; preds = %2281
  %2294 = add nsw i32 %2292, 1
  store i32 %2294, ptr %2291, align 4, !tbaa !73
  br label %2295

2295:                                             ; preds = %2281, %2293
  %2296 = phi i32 [ %2294, %2293 ], [ %2292, %2281 ]
  %2297 = icmp sgt i32 %2296, 1
  br i1 %2297, label %2298, label %2302

2298:                                             ; preds = %2295, %2167
  %2299 = phi i32 [ %2168, %2167 ], [ %2296, %2295 ]
  %2300 = phi i8 [ %108, %2167 ], [ %2173, %2295 ]
  %2301 = phi ptr [ %2056, %2167 ], [ %2212, %2295 ]
  call void @Perl_pad_push(ptr noundef %2103, i32 noundef %2299) #12
  br label %2302

2302:                                             ; preds = %2298, %2295, %2167
  %2303 = phi i8 [ %108, %2167 ], [ %2173, %2295 ], [ %2300, %2298 ]
  %2304 = phi ptr [ %2056, %2167 ], [ %2212, %2295 ], [ %2301, %2298 ]
  %2305 = load ptr, ptr @PL_comppad, align 8, !tbaa !35
  call void @Perl_save_pushptr(ptr noundef %2305, i32 noundef 7) #12
  %2306 = getelementptr inbounds %struct.padlist, ptr %2103, i64 0, i32 1
  %2307 = load ptr, ptr %2306, align 8, !tbaa !320
  %2308 = load ptr, ptr %2090, align 8, !tbaa !300
  %2309 = getelementptr inbounds %struct.xpvcv, ptr %2308, i64 0, i32 13
  %2310 = load i32, ptr %2309, align 4, !tbaa !73
  %2311 = sext i32 %2310 to i64
  %2312 = getelementptr inbounds ptr, ptr %2307, i64 %2311
  %2313 = load ptr, ptr %2312, align 8, !tbaa !35
  store ptr %2313, ptr @PL_comppad, align 8, !tbaa !35
  %2314 = getelementptr inbounds %struct.av, ptr %2313, i64 0, i32 3
  %2315 = load ptr, ptr %2314, align 8, !tbaa !5
  store ptr %2315, ptr @PL_curpad, align 8, !tbaa !35
  br label %2316

2316:                                             ; preds = %2088, %2302
  %2317 = phi ptr [ %2313, %2302 ], [ %110, %2088 ]
  %2318 = phi ptr [ %2090, %2302 ], [ %106, %2088 ]
  %2319 = phi i8 [ %2303, %2302 ], [ %108, %2088 ]
  %2320 = phi ptr [ %2304, %2302 ], [ %2056, %2088 ]
  %2321 = phi ptr [ %2090, %2302 ], [ %109, %2088 ]
  %2322 = getelementptr inbounds %struct.unop, ptr %2092, i64 0, i32 7
  %2323 = load ptr, ptr %2322, align 8, !tbaa !322
  %2324 = getelementptr inbounds %struct.op, ptr %2323, i64 0, i32 3
  %2325 = load i64, ptr %2324, align 8, !tbaa !324
  %2326 = icmp eq i64 %2325, 198
  %2327 = getelementptr inbounds %struct.unop, ptr %2323, i64 0, i32 7
  br i1 %2326, label %2331, label %2328

2328:                                             ; preds = %2316
  %2329 = load ptr, ptr %2327, align 8, !tbaa !322
  %2330 = getelementptr inbounds %struct.op, ptr %2329, i64 0, i32 1
  br label %2331

2331:                                             ; preds = %2316, %2328
  %2332 = phi ptr [ %2330, %2328 ], [ %2327, %2316 ]
  %2333 = load ptr, ptr %2332, align 8, !tbaa !35
  %2334 = getelementptr inbounds %struct.op, ptr %2333, i64 0, i32 4
  %2335 = load i16, ptr %2334, align 8
  %2336 = and i16 %2335, 511
  %2337 = icmp eq i16 %2336, 1
  br i1 %2337, label %2339, label %2338

2338:                                             ; preds = %2331
  store ptr %2333, ptr @PL_curcop, align 8, !tbaa !35
  br label %2339

2339:                                             ; preds = %2338, %2331
  %2340 = load ptr, ptr %2092, align 8, !tbaa !325
  %2341 = load ptr, ptr %59, align 8, !tbaa !26
  %2342 = ptrtoint ptr %214 to i64
  %2343 = ptrtoint ptr %2341 to i64
  %2344 = sub i64 %2342, %2343
  %2345 = load ptr, ptr %195, align 8, !tbaa !64
  %2346 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2345, i64 0, i32 1
  store i64 %2344, ptr %2346, align 8, !tbaa !74
  %2347 = load ptr, ptr %67, align 8, !tbaa !208
  %2348 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2347, i64 0, i32 7
  %2349 = load ptr, ptr %2348, align 8, !tbaa !224
  %2350 = icmp eq ptr %2349, null
  br i1 %2350, label %2390, label %2351

2351:                                             ; preds = %2339
  %2352 = load ptr, ptr %72, align 8, !tbaa !204
  %2353 = getelementptr inbounds %struct.sv, ptr %2352, i64 0, i32 2
  %2354 = load i32, ptr %2353, align 4, !tbaa !15
  %2355 = and i32 %2354, 1024
  %2356 = icmp eq i32 %2355, 0
  br i1 %2356, label %2368, label %2357

2357:                                             ; preds = %2351
  %2358 = and i32 %2354, 2097152
  %2359 = icmp eq i32 %2358, 0
  br i1 %2359, label %2363, label %2360

2360:                                             ; preds = %2357
  %2361 = load ptr, ptr %2352, align 8, !tbaa !38
  %2362 = call fastcc zeroext i1 @S_sv_only_taint_gmagic(ptr %2361)
  br i1 %2362, label %2363, label %2368

2363:                                             ; preds = %2360, %2357
  %2364 = getelementptr inbounds %struct.magic, ptr %2349, i64 0, i32 5
  store i64 %2344, ptr %2364, align 8, !tbaa !193
  %2365 = getelementptr inbounds %struct.magic, ptr %2349, i64 0, i32 4
  %2366 = load i8, ptr %2365, align 1, !tbaa !195
  %2367 = or i8 %2366, 64
  store i8 %2367, ptr %2365, align 1, !tbaa !195
  br label %2390

2368:                                             ; preds = %2360, %2351
  %2369 = and i32 %2354, 536870912
  %2370 = icmp eq i32 %2369, 0
  br i1 %2370, label %2383, label %2371

2371:                                             ; preds = %2368
  %2372 = load ptr, ptr @PL_curcop, align 8, !tbaa !35
  %2373 = getelementptr inbounds %struct.cop, ptr %2372, i64 0, i32 10
  %2374 = load i32, ptr %2373, align 8, !tbaa !191
  %2375 = and i32 %2374, 8
  %2376 = icmp eq i32 %2375, 0
  br i1 %2376, label %2377, label %2383

2377:                                             ; preds = %2371
  %2378 = getelementptr inbounds i8, ptr %2341, i64 %2344
  %2379 = call i64 @Perl_utf8_length(ptr noundef %2341, ptr noundef %2378) #12
  %2380 = load ptr, ptr %67, align 8, !tbaa !208
  %2381 = getelementptr inbounds %struct.regmatch_info_aux_eval, ptr %2380, i64 0, i32 7
  %2382 = load ptr, ptr %2381, align 8, !tbaa !224
  br label %2383

2383:                                             ; preds = %2368, %2371, %2377
  %2384 = phi ptr [ %2382, %2377 ], [ %2349, %2371 ], [ %2349, %2368 ]
  %2385 = phi i64 [ %2379, %2377 ], [ %2344, %2371 ], [ %2344, %2368 ]
  %2386 = getelementptr inbounds %struct.magic, ptr %2384, i64 0, i32 5
  store i64 %2385, ptr %2386, align 8, !tbaa !193
  %2387 = getelementptr inbounds %struct.magic, ptr %2384, i64 0, i32 4
  %2388 = load i8, ptr %2387, align 1, !tbaa !195
  %2389 = and i8 %2388, -65
  store i8 %2389, ptr %2387, align 1, !tbaa !195
  br label %2390

2390:                                             ; preds = %2363, %2383, %2339
  %2391 = icmp eq ptr %173, null
  br i1 %2391, label %2394, label %2392

2392:                                             ; preds = %2390
  %2393 = call ptr @Perl_get_sv(ptr noundef nonnull @.str.13, i32 noundef 1) #12
  call void @Perl_sv_setsv_flags(ptr noundef %2393, ptr noundef nonnull %173, i32 noundef 1538) #12
  br label %2394

2394:                                             ; preds = %2392, %2390
  %2395 = load ptr, ptr @PL_stack_base, align 8, !tbaa !35
  %2396 = ptrtoint ptr %2320 to i64
  %2397 = ptrtoint ptr %2395 to i64
  %2398 = sub i64 %2396, %2397
  store ptr %2340, ptr @PL_op, align 8, !tbaa !35
  %2399 = load ptr, ptr @PL_runops, align 8, !tbaa !35
  %2400 = call i32 %2399() #12
  %2401 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !35
  %2402 = load ptr, ptr @PL_stack_base, align 8, !tbaa !35
  %2403 = ptrtoint ptr %2401 to i64
  %2404 = ptrtoint ptr %2402 to i64
  %2405 = sub i64 %2403, %2404
  %2406 = icmp eq i64 %2405, %2398
  br i1 %2406, label %2410, label %2407

2407:                                             ; preds = %2394
  %2408 = getelementptr inbounds ptr, ptr %2401, i64 -1
  %2409 = load ptr, ptr %2401, align 8, !tbaa !35
  store ptr %2408, ptr @PL_stack_sp, align 8, !tbaa !35
  br label %2410

2410:                                             ; preds = %2394, %2407
  %2411 = phi ptr [ %2409, %2407 ], [ @PL_sv_undef, %2394 ]
  store ptr %2411, ptr %15, align 8
  store ptr null, ptr @PL_op, align 8, !tbaa !35
  switch i32 %170, label %2477 [
    i32 0, label %2412
    i32 1, label %2416
  ]

2412:                                             ; preds = %2410
  %2413 = load ptr, ptr @PL_replgv, align 8, !tbaa !35
  %2414 = call ptr @Perl_save_scalar(ptr noundef %2413) #12
  %2415 = load ptr, ptr %15, align 8, !tbaa !35
  call void @Perl_sv_setsv_flags(ptr noundef %2414, ptr noundef %2415, i32 noundef 1538) #12
  br label %2534

2416:                                             ; preds = %2410
  %2417 = icmp eq ptr %2411, null
  br i1 %2417, label %2474, label %2418

2418:                                             ; preds = %2416
  %2419 = getelementptr inbounds %struct.sv, ptr %2411, i64 0, i32 2
  %2420 = load i32, ptr %2419, align 4, !tbaa !15
  %2421 = and i32 %2420, 2097152
  %2422 = icmp eq i32 %2421, 0
  br i1 %2422, label %2425, label %2423

2423:                                             ; preds = %2418
  %2424 = call zeroext i1 @Perl_sv_2bool_flags(ptr noundef nonnull %2411, i32 noundef 2) #12
  br label %2474

2425:                                             ; preds = %2418
  %2426 = and i32 %2420, 65280
  %2427 = icmp ne i32 %2426, 0
  %2428 = and i32 %2420, 255
  %2429 = icmp eq i32 %2428, 8
  %2430 = or i1 %2427, %2429
  %2431 = and i32 %2420, 16826623
  %2432 = icmp eq i32 %2431, 16777226
  %2433 = or i1 %2432, %2430
  br i1 %2433, label %2434, label %2474

2434:                                             ; preds = %2425
  %2435 = and i32 %2420, 1024
  %2436 = icmp eq i32 %2435, 0
  br i1 %2436, label %2451, label %2437

2437:                                             ; preds = %2434
  %2438 = load ptr, ptr %2411, align 8, !tbaa !38
  %2439 = icmp eq ptr %2438, null
  br i1 %2439, label %2474, label %2440

2440:                                             ; preds = %2437
  %2441 = getelementptr inbounds %struct.xpv, ptr %2438, i64 0, i32 2
  %2442 = load i64, ptr %2441, align 8, !tbaa !39
  %2443 = icmp ugt i64 %2442, 1
  br i1 %2443, label %2474, label %2444

2444:                                             ; preds = %2440
  %2445 = icmp eq i64 %2442, 0
  br i1 %2445, label %2474, label %2446

2446:                                             ; preds = %2444
  %2447 = getelementptr inbounds %struct.sv, ptr %2411, i64 0, i32 3
  %2448 = load ptr, ptr %2447, align 8, !tbaa !5
  %2449 = load i8, ptr %2448, align 1, !tbaa !5
  %2450 = icmp ne i8 %2449, 48
  br label %2474

2451:                                             ; preds = %2434
  %2452 = and i32 %2420, 768
  %2453 = icmp eq i32 %2452, 0
  br i1 %2453, label %2472, label %2454

2454:                                             ; preds = %2451
  %2455 = and i32 %2420, 256
  %2456 = icmp eq i32 %2455, 0
  br i1 %2456, label %2462, label %2457

2457:                                             ; preds = %2454
  %2458 = load ptr, ptr %2411, align 8, !tbaa !38
  %2459 = getelementptr inbounds %struct.xpviv, ptr %2458, i64 0, i32 4
  %2460 = load i64, ptr %2459, align 8, !tbaa !5
  %2461 = icmp eq i64 %2460, 0
  br i1 %2461, label %2462, label %2474

2462:                                             ; preds = %2457, %2454
  %2463 = and i32 %2420, 512
  %2464 = icmp eq i32 %2463, 0
  br i1 %2464, label %2474, label %2465

2465:                                             ; preds = %2462
  %2466 = load ptr, ptr %2411, align 8, !tbaa !38
  %2467 = getelementptr inbounds %struct.xpvnv, ptr %2466, i64 0, i32 5
  %2468 = load double, ptr %2467, align 8, !tbaa !5
  %2469 = fcmp uno double %2468, 0.000000e+00
  br i1 %2469, label %2474, label %2470

2470:                                             ; preds = %2465
  %2471 = fcmp fast une double %2468, 0.000000e+00
  br label %2474

2472:                                             ; preds = %2451
  %2473 = call zeroext i1 @Perl_sv_2bool_flags(ptr noundef nonnull %2411, i32 noundef 0) #12
  br label %2474

2474:                                             ; preds = %2423, %2472, %2425, %2440, %2446, %2444, %2437, %2462, %2470, %2465, %2457, %2416
  %2475 = phi i1 [ false, %2416 ], [ %2424, %2423 ], [ %2473, %2472 ], [ false, %2425 ], [ false, %2437 ], [ true, %2440 ], [ false, %2444 ], [ %2450, %2446 ], [ true, %2457 ], [ false, %2462 ], [ true, %2465 ], [ %2471, %2470 ]
  %2476 = zext i1 %2475 to i8
  br label %2534

2477:                                             ; preds = %2410
  %2478 = getelementptr inbounds %struct.sv, ptr %2411, i64 0, i32 2
  %2479 = load i32, ptr %2478, align 4, !tbaa !15
  %2480 = and i32 %2479, 2097152
  %2481 = icmp eq i32 %2480, 0
  br i1 %2481, label %2486, label %2482

2482:                                             ; preds = %2477
  %2483 = call ptr @Perl_sv_mortalcopy_flags(ptr noundef nonnull %2411, i32 noundef 1538) #12
  store ptr %2483, ptr %15, align 8, !tbaa !35
  %2484 = getelementptr inbounds %struct.sv, ptr %2483, i64 0, i32 2
  %2485 = load i32, ptr %2484, align 4, !tbaa !15
  br label %2486

2486:                                             ; preds = %2482, %2477
  %2487 = phi i32 [ %2485, %2482 ], [ %2479, %2477 ]
  %2488 = phi ptr [ %2483, %2482 ], [ %2411, %2477 ]
  %2489 = and i32 %2487, 2048
  %2490 = icmp eq i32 %2489, 0
  br i1 %2490, label %2505, label %2491

2491:                                             ; preds = %2486
  %2492 = getelementptr inbounds %struct.sv, ptr %2488, i64 0, i32 3
  %2493 = load ptr, ptr %2492, align 8, !tbaa !5
  %2494 = getelementptr inbounds %struct.sv, ptr %2493, i64 0, i32 2
  %2495 = load i32, ptr %2494, align 4, !tbaa !15
  %2496 = and i32 %2495, 1048576
  %2497 = icmp eq i32 %2496, 0
  br i1 %2497, label %2505, label %2498

2498:                                             ; preds = %2491
  %2499 = load ptr, ptr %2493, align 8, !tbaa !38
  %2500 = load ptr, ptr %2499, align 8, !tbaa !196
  %2501 = getelementptr inbounds %struct.hv, ptr %2500, i64 0, i32 2
  %2502 = load i32, ptr %2501, align 4, !tbaa !198
  %2503 = and i32 %2502, 268435456
  %2504 = icmp eq i32 %2503, 0
  br i1 %2504, label %2505, label %2534

2505:                                             ; preds = %2491, %2498, %2486
  %2506 = phi i32 [ %2487, %2486 ], [ %2495, %2498 ], [ %2495, %2491 ]
  %2507 = phi ptr [ %2488, %2486 ], [ %2493, %2498 ], [ %2493, %2491 ]
  %2508 = and i32 %2506, 255
  %2509 = icmp eq i32 %2508, 8
  br i1 %2509, label %2534, label %2510

2510:                                             ; preds = %2505
  %2511 = and i32 %2487, 4194304
  %2512 = icmp eq i32 %2511, 0
  br i1 %2512, label %2520, label %2513

2513:                                             ; preds = %2510
  %2514 = call ptr @Perl_mg_find(ptr noundef nonnull %2488, i32 noundef 114) #12
  %2515 = icmp eq ptr %2514, null
  br i1 %2515, label %2520, label %2516

2516:                                             ; preds = %2513
  %2517 = getelementptr inbounds %struct.magic, ptr %2514, i64 0, i32 6
  %2518 = load ptr, ptr %2517, align 8, !tbaa !326
  %2519 = icmp eq ptr %2518, null
  br i1 %2519, label %2520, label %2534

2520:                                             ; preds = %2513, %2510, %2516
  %2521 = load ptr, ptr %15, align 8, !tbaa !35
  %2522 = getelementptr inbounds %struct.sv, ptr %2521, i64 0, i32 2
  %2523 = load i32, ptr %2522, align 4, !tbaa !15
  %2524 = and i32 %2523, 1792
  %2525 = icmp eq i32 %2524, 0
  br i1 %2525, label %2526, label %2534

2526:                                             ; preds = %2520
  %2527 = call ptr @Perl_sv_mortalcopy_flags(ptr noundef nonnull %2521, i32 noundef 1538) #12
  store ptr %2527, ptr %15, align 8, !tbaa !35
  %2528 = getelementptr inbounds %struct.sv, ptr %2527, i64 0, i32 2
  %2529 = load i32, ptr %2528, align 4, !tbaa !15
  %2530 = and i32 %2529, 430018304
  %2531 = icmp eq i32 %2530, 1024
  br i1 %2531, label %2534, label %2532

2532:                                             ; preds = %2526
  %2533 = call ptr @Perl_sv_pvn_force_flags(ptr noundef nonnull %2527, ptr noundef null, i32 noundef 2) #12
  br label %2534

2534:                                             ; preds = %2505, %2516, %2520, %2532, %2526, %2474, %2498, %2412
  %2535 = phi ptr [ null, %2412 ], [ null, %2474 ], [ null, %2498 ], [ null, %2526 ], [ null, %2532 ], [ null, %2520 ], [ %2518, %2516 ], [ %2507, %2505 ]
  %2536 = phi i32 [ 0, %2412 ], [ 0, %2474 ], [ %170, %2498 ], [ %170, %2526 ], [ %170, %2532 ], [ %170, %2520 ], [ %170, %2516 ], [ %170, %2505 ]
  %2537 = phi i8 [ %172, %2412 ], [ %2476, %2474 ], [ %172, %2498 ], [ %172, %2526 ], [ %172, %2532 ], [ %172, %2520 ], [ %172, %2516 ], [ %172, %2505 ]
  store ptr %2057, ptr @PL_op, align 8, !tbaa !35
  store ptr %2058, ptr @PL_curcop, align 8, !tbaa !35
  %2538 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %2061, ptr @PL_savestack_ix, align 4, !tbaa !73
  call fastcc void @S_regcppop(ptr noundef nonnull %190, ptr noundef nonnull %4)
  store i32 %2538, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2539 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  store ptr %2539, ptr @PL_curpm, align 8, !tbaa !35
  %2540 = icmp eq i32 %2536, 2
  br i1 %2540, label %2541, label %4714

2541:                                             ; preds = %2534
  %2542 = icmp eq ptr %2535, null
  br i1 %2542, label %2545, label %2543

2543:                                             ; preds = %2541
  %2544 = call ptr @Perl_reg_temp_copy(ptr noundef null, ptr noundef nonnull %2535) #12
  br label %2594

2545:                                             ; preds = %2541
  %2546 = load ptr, ptr %15, align 8, !tbaa !35
  %2547 = getelementptr inbounds %struct.sv, ptr %2546, i64 0, i32 2
  %2548 = load i32, ptr %2547, align 4, !tbaa !15
  %2549 = and i32 %2548, 536870912
  %2550 = icmp eq i32 %2549, 0
  br i1 %2550, label %2573, label %2551

2551:                                             ; preds = %2545
  %2552 = load ptr, ptr @PL_curcop, align 8, !tbaa !35
  %2553 = getelementptr inbounds %struct.cop, ptr %2552, i64 0, i32 10
  %2554 = load i32, ptr %2553, align 8, !tbaa !191
  %2555 = and i32 %2554, 8
  %2556 = icmp eq i32 %2555, 0
  br i1 %2556, label %2573, label %2557

2557:                                             ; preds = %2551
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #12
  %2558 = and i32 %2548, 2098176
  %2559 = icmp eq i32 %2558, 1024
  br i1 %2559, label %2560, label %2566

2560:                                             ; preds = %2557
  %2561 = load ptr, ptr %2546, align 8, !tbaa !38
  %2562 = getelementptr inbounds %struct.xpv, ptr %2561, i64 0, i32 2
  %2563 = load i64, ptr %2562, align 8, !tbaa !39
  store i64 %2563, ptr %16, align 8, !tbaa !169
  %2564 = getelementptr inbounds %struct.sv, ptr %2546, i64 0, i32 3
  %2565 = load ptr, ptr %2564, align 8, !tbaa !5
  br label %2569

2566:                                             ; preds = %2557
  %2567 = call ptr @Perl_sv_2pv_flags(ptr noundef nonnull %2546, ptr noundef nonnull %16, i32 noundef 2) #12
  %2568 = load i64, ptr %16, align 8, !tbaa !169
  br label %2569

2569:                                             ; preds = %2566, %2560
  %2570 = phi i64 [ %2563, %2560 ], [ %2568, %2566 ]
  %2571 = phi ptr [ %2565, %2560 ], [ %2567, %2566 ]
  %2572 = call ptr @Perl_newSVpvn_flags(ptr noundef %2571, i64 noundef %2570, i32 noundef 524288) #12
  store ptr %2572, ptr %15, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #12
  br label %2573

2573:                                             ; preds = %2569, %2551, %2545
  %2574 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 13
  %2575 = load i32, ptr %2574, align 4, !tbaa !36
  %2576 = shl i32 %2575, 26
  %2577 = and i32 %2576, -2147483648
  %2578 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 4
  %2579 = load ptr, ptr %2578, align 8, !tbaa !327
  %2580 = getelementptr inbounds %struct.regexp_engine, ptr %2579, i64 0, i32 11
  %2581 = load ptr, ptr %2580, align 8, !tbaa !328
  %2582 = getelementptr inbounds %struct.regnode_2L, ptr %215, i64 0, i32 4
  %2583 = load i32, ptr %2582, align 4, !tbaa !295
  %2584 = call ptr %2581(ptr noundef nonnull %15, i32 noundef 1, ptr noundef null, ptr noundef %2579, ptr noundef null, ptr noundef null, i32 noundef %2583, i32 noundef %2577) #12
  %2585 = load ptr, ptr %15, align 8, !tbaa !35
  %2586 = getelementptr inbounds %struct.sv, ptr %2585, i64 0, i32 2
  %2587 = load i32, ptr %2586, align 4, !tbaa !15
  %2588 = and i32 %2587, 2623488
  %2589 = icmp ne i32 %2588, 0
  %2590 = and i32 %2587, 134414336
  %2591 = icmp eq i32 %2590, 131072
  %2592 = or i1 %2589, %2591
  br i1 %2592, label %2594, label %2593

2593:                                             ; preds = %2573
  call void @Perl_sv_magic(ptr noundef nonnull %2585, ptr noundef %2584, i32 noundef 114, ptr noundef null, i32 noundef 0) #12
  br label %2594

2594:                                             ; preds = %2573, %2593, %2543
  %2595 = phi ptr [ %2544, %2543 ], [ %2584, %2593 ], [ %2584, %2573 ]
  call void @Perl_save_pushptr(ptr noundef %2595, i32 noundef 11) #12
  %2596 = getelementptr i8, ptr %2595, i64 16
  %2597 = load ptr, ptr %2596, align 8, !tbaa !5
  %2598 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 7
  %2599 = load i32, ptr %2598, align 8, !tbaa !19
  %2600 = and i32 %2599, -33554433
  store i32 %2600, ptr %2598, align 8, !tbaa !19
  %2601 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 18
  %2602 = load ptr, ptr %2601, align 8, !tbaa !230
  %2603 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 18
  store ptr %2602, ptr %2603, align 8, !tbaa !230
  %2604 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 20
  %2605 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 20
  %2606 = load <2 x i64>, ptr %2604, align 8, !tbaa !169
  store <2 x i64> %2606, ptr %2605, align 8, !tbaa !169
  %2607 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 22
  %2608 = load i64, ptr %2607, align 8, !tbaa !231
  %2609 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 22
  store i64 %2608, ptr %2609, align 8, !tbaa !231
  %2610 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 15
  store i32 0, ptr %2610, align 8, !tbaa !67
  %2611 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 16
  store i32 0, ptr %2611, align 4, !tbaa !68
  %2612 = getelementptr inbounds %struct.regexp, ptr %2597, i64 0, i32 14
  %2613 = load ptr, ptr %2612, align 8, !tbaa !20
  %2614 = getelementptr inbounds %struct.regexp_internal, ptr %2613, i64 1
  store i32 0, ptr %205, align 8, !tbaa !5
  %2615 = load i32, ptr %4, align 4, !tbaa !73
  %2616 = call fastcc i32 @S_regcppush(ptr noundef nonnull %190, i32 noundef 0, i32 noundef %2615)
  store i32 %2616, ptr %199, align 8, !tbaa !5
  %2617 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %2617, ptr %198, align 4, !tbaa !5
  store i32 0, ptr %4, align 4, !tbaa !73
  br label %2618

2618:                                             ; preds = %2594, %2039
  %2619 = phi ptr [ %2318, %2594 ], [ %106, %2039 ]
  %2620 = phi ptr [ %2066, %2594 ], [ %107, %2039 ]
  %2621 = phi i8 [ %2319, %2594 ], [ %108, %2039 ]
  %2622 = phi ptr [ %2595, %2594 ], [ %191, %2039 ]
  %2623 = phi ptr [ %2597, %2594 ], [ %190, %2039 ]
  %2624 = phi ptr [ %2613, %2594 ], [ %189, %2039 ]
  %2625 = phi ptr [ %2614, %2594 ], [ %2041, %2039 ]
  %2626 = phi ptr [ %2321, %2594 ], [ %109, %2039 ]
  %2627 = phi ptr [ %2317, %2594 ], [ %110, %2039 ]
  %2628 = phi i32 [ 0, %2594 ], [ %170, %2039 ]
  %2629 = phi i8 [ %2537, %2594 ], [ %172, %2039 ]
  %2630 = phi i32 [ %2055, %2594 ], [ %2026, %2039 ]
  store i32 0, ptr %63, align 8, !tbaa !32
  %2631 = getelementptr inbounds %struct.p5rx, ptr %2622, i64 0, i32 2
  %2632 = load i32, ptr %2631, align 4, !tbaa !28
  %2633 = lshr i32 %2632, 29
  %2634 = trunc i32 %2633 to i8
  %2635 = and i8 %2634, 1
  store i8 %2635, ptr %52, align 1, !tbaa !30
  store ptr %191, ptr %196, align 8, !tbaa !5
  store ptr %179, ptr %192, align 8, !tbaa !5
  %2636 = load ptr, ptr %67, align 8, !tbaa !208
  %2637 = icmp eq ptr %2636, null
  br i1 %2637, label %2657, label %2638

2638:                                             ; preds = %2618
  %2639 = getelementptr inbounds %struct.sv, ptr %2622, i64 0, i32 1
  %2640 = load i32, ptr %2639, align 8, !tbaa !61
  %2641 = add i32 %2640, 1
  store i32 %2641, ptr %2639, align 8, !tbaa !61
  %2642 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  %2643 = getelementptr inbounds %struct.pmop, ptr %2642, i64 0, i32 9
  %2644 = load ptr, ptr %2643, align 8, !tbaa !227
  %2645 = icmp eq ptr %2644, null
  br i1 %2645, label %2654, label %2646

2646:                                             ; preds = %2638
  %2647 = getelementptr inbounds %struct.sv, ptr %2644, i64 0, i32 1
  %2648 = load i32, ptr %2647, align 8, !tbaa !61
  %2649 = icmp ugt i32 %2648, 1
  br i1 %2649, label %2650, label %2652

2650:                                             ; preds = %2646
  %2651 = add i32 %2648, -1
  store i32 %2651, ptr %2647, align 8, !tbaa !61
  br label %2654

2652:                                             ; preds = %2646
  call void @Perl_sv_free2(ptr noundef nonnull %2644, i32 noundef %2648) #12
  %2653 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  br label %2654

2654:                                             ; preds = %2638, %2650, %2652
  %2655 = phi ptr [ %2642, %2638 ], [ %2642, %2650 ], [ %2653, %2652 ]
  %2656 = getelementptr inbounds %struct.pmop, ptr %2655, i64 0, i32 9
  store ptr %2622, ptr %2656, align 8, !tbaa !227
  br label %2657

2657:                                             ; preds = %2654, %2618
  store ptr %186, ptr %206, align 8, !tbaa !5
  store ptr %180, ptr %207, align 8, !tbaa !5
  br label %4730

2658:                                             ; preds = %221
  %2659 = load ptr, ptr %196, align 8, !tbaa !5
  %2660 = getelementptr inbounds %struct.p5rx, ptr %2659, i64 0, i32 2
  %2661 = load i32, ptr %2660, align 4, !tbaa !28
  %2662 = lshr i32 %2661, 29
  %2663 = trunc i32 %2662 to i8
  %2664 = and i8 %2663, 1
  store i8 %2664, ptr %52, align 1, !tbaa !30
  %2665 = load ptr, ptr %67, align 8, !tbaa !208
  %2666 = icmp eq ptr %2665, null
  br i1 %2666, label %2686, label %2667

2667:                                             ; preds = %2658
  %2668 = getelementptr inbounds %struct.sv, ptr %2659, i64 0, i32 1
  %2669 = load i32, ptr %2668, align 8, !tbaa !61
  %2670 = add i32 %2669, 1
  store i32 %2670, ptr %2668, align 8, !tbaa !61
  %2671 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  %2672 = getelementptr inbounds %struct.pmop, ptr %2671, i64 0, i32 9
  %2673 = load ptr, ptr %2672, align 8, !tbaa !227
  %2674 = icmp eq ptr %2673, null
  br i1 %2674, label %2683, label %2675

2675:                                             ; preds = %2667
  %2676 = getelementptr inbounds %struct.sv, ptr %2673, i64 0, i32 1
  %2677 = load i32, ptr %2676, align 8, !tbaa !61
  %2678 = icmp ugt i32 %2677, 1
  br i1 %2678, label %2679, label %2681

2679:                                             ; preds = %2675
  %2680 = add i32 %2677, -1
  store i32 %2680, ptr %2676, align 8, !tbaa !61
  br label %2683

2681:                                             ; preds = %2675
  call void @Perl_sv_free2(ptr noundef nonnull %2673, i32 noundef %2677) #12
  %2682 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  br label %2683

2683:                                             ; preds = %2667, %2679, %2681
  %2684 = phi ptr [ %2671, %2667 ], [ %2671, %2679 ], [ %2682, %2681 ]
  %2685 = getelementptr inbounds %struct.pmop, ptr %2684, i64 0, i32 9
  store ptr %2659, ptr %2685, align 8, !tbaa !227
  br label %2686

2686:                                             ; preds = %2683, %2658
  %2687 = getelementptr i8, ptr %2659, i64 16
  %2688 = load ptr, ptr %2687, align 8, !tbaa !5
  %2689 = getelementptr inbounds %struct.regexp, ptr %2688, i64 0, i32 14
  %2690 = load ptr, ptr %2689, align 8, !tbaa !20
  %2691 = load ptr, ptr @PL_replgv, align 8, !tbaa !35
  %2692 = getelementptr inbounds %struct.gv, ptr %2691, i64 0, i32 3
  %2693 = load ptr, ptr %2692, align 8, !tbaa !5
  %2694 = load ptr, ptr %2693, align 8, !tbaa !222
  %2695 = icmp eq ptr %2694, null
  br i1 %2695, label %2700, label %2696

2696:                                             ; preds = %2686
  %2697 = getelementptr inbounds %struct.sv, ptr %2694, i64 0, i32 1
  %2698 = load i32, ptr %2697, align 8, !tbaa !61
  %2699 = add i32 %2698, 1
  store i32 %2699, ptr %2697, align 8, !tbaa !61
  br label %2700

2700:                                             ; preds = %2686, %2696
  %2701 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2702 = load i32, ptr %199, align 8, !tbaa !5
  %2703 = icmp sgt i32 %2701, %2702
  br i1 %2703, label %2704, label %2706

2704:                                             ; preds = %2700
  call void @Perl_leave_scope(i32 noundef %2702) #12
  %2705 = load ptr, ptr @PL_replgv, align 8, !tbaa !35
  br label %2706

2706:                                             ; preds = %2704, %2700
  %2707 = phi ptr [ %2705, %2704 ], [ %2691, %2700 ]
  %2708 = getelementptr inbounds %struct.gv, ptr %2707, i64 0, i32 3
  %2709 = load ptr, ptr %2708, align 8, !tbaa !5
  %2710 = load ptr, ptr %2709, align 8, !tbaa !222
  call void @Perl_sv_setsv_flags(ptr noundef %2710, ptr noundef %2694, i32 noundef 1538) #12
  br i1 %2695, label %2718, label %2711

2711:                                             ; preds = %2706
  %2712 = getelementptr inbounds %struct.sv, ptr %2694, i64 0, i32 1
  %2713 = load i32, ptr %2712, align 8, !tbaa !61
  %2714 = icmp ugt i32 %2713, 1
  br i1 %2714, label %2715, label %2717

2715:                                             ; preds = %2711
  %2716 = add i32 %2713, -1
  store i32 %2716, ptr %2712, align 8, !tbaa !61
  br label %2718

2717:                                             ; preds = %2711
  call void @Perl_sv_free2(ptr noundef nonnull %2694, i32 noundef %2713) #12
  br label %2718

2718:                                             ; preds = %2706, %2715, %2717
  %2719 = load ptr, ptr %207, align 8, !tbaa !5
  %2720 = load ptr, ptr %192, align 8, !tbaa !5
  store i32 0, ptr %63, align 8, !tbaa !32
  %2721 = call i32 @llvm.usub.sat.i32(i32 %183, i32 1)
  br label %4824

2722:                                             ; preds = %221
  %2723 = load ptr, ptr %196, align 8, !tbaa !5
  %2724 = getelementptr inbounds %struct.p5rx, ptr %2723, i64 0, i32 2
  %2725 = load i32, ptr %2724, align 4, !tbaa !28
  %2726 = lshr i32 %2725, 29
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  store i8 %2728, ptr %52, align 1, !tbaa !30
  %2729 = load ptr, ptr %67, align 8, !tbaa !208
  %2730 = icmp eq ptr %2729, null
  br i1 %2730, label %2750, label %2731

2731:                                             ; preds = %2722
  %2732 = getelementptr inbounds %struct.sv, ptr %2723, i64 0, i32 1
  %2733 = load i32, ptr %2732, align 8, !tbaa !61
  %2734 = add i32 %2733, 1
  store i32 %2734, ptr %2732, align 8, !tbaa !61
  %2735 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  %2736 = getelementptr inbounds %struct.pmop, ptr %2735, i64 0, i32 9
  %2737 = load ptr, ptr %2736, align 8, !tbaa !227
  %2738 = icmp eq ptr %2737, null
  br i1 %2738, label %2747, label %2739

2739:                                             ; preds = %2731
  %2740 = getelementptr inbounds %struct.sv, ptr %2737, i64 0, i32 1
  %2741 = load i32, ptr %2740, align 8, !tbaa !61
  %2742 = icmp ugt i32 %2741, 1
  br i1 %2742, label %2743, label %2745

2743:                                             ; preds = %2739
  %2744 = add i32 %2741, -1
  store i32 %2744, ptr %2740, align 8, !tbaa !61
  br label %2747

2745:                                             ; preds = %2739
  call void @Perl_sv_free2(ptr noundef nonnull %2737, i32 noundef %2741) #12
  %2746 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  br label %2747

2747:                                             ; preds = %2731, %2743, %2745
  %2748 = phi ptr [ %2735, %2731 ], [ %2735, %2743 ], [ %2746, %2745 ]
  %2749 = getelementptr inbounds %struct.pmop, ptr %2748, i64 0, i32 9
  store ptr %2723, ptr %2749, align 8, !tbaa !227
  br label %2750

2750:                                             ; preds = %2747, %2722
  %2751 = getelementptr i8, ptr %2723, i64 16
  %2752 = load ptr, ptr %2751, align 8, !tbaa !5
  %2753 = getelementptr inbounds %struct.regexp, ptr %2752, i64 0, i32 14
  %2754 = load ptr, ptr %2753, align 8, !tbaa !20
  %2755 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2756 = load i32, ptr %198, align 4, !tbaa !5
  %2757 = icmp sgt i32 %2755, %2756
  br i1 %2757, label %2758, label %2759

2758:                                             ; preds = %2750
  call void @Perl_leave_scope(i32 noundef %2756) #12
  br label %2759

2759:                                             ; preds = %2758, %2750
  call fastcc void @S_regcppop(ptr noundef nonnull %2752, ptr noundef nonnull %4)
  %2760 = load ptr, ptr %207, align 8, !tbaa !5
  %2761 = load ptr, ptr %192, align 8, !tbaa !5
  store i32 0, ptr %63, align 8, !tbaa !32
  %2762 = call i32 @llvm.usub.sat.i32(i32 %183, i32 1)
  br label %4918

2763:                                             ; preds = %221
  %2764 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2765 = load i32, ptr %2764, align 4, !tbaa !162
  %2766 = load ptr, ptr %59, align 8, !tbaa !26
  %2767 = ptrtoint ptr %214 to i64
  %2768 = ptrtoint ptr %2766 to i64
  %2769 = sub i64 %2767, %2768
  %2770 = load ptr, ptr %195, align 8, !tbaa !64
  %2771 = zext i32 %2765 to i64
  %2772 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2770, i64 %2771, i32 2
  store i64 %2769, ptr %2772, align 8, !tbaa !330
  %2773 = load i32, ptr %4, align 4, !tbaa !73
  %2774 = call i32 @llvm.umax.i32(i32 %2765, i32 %2773)
  store i32 %2774, ptr %4, align 4
  br label %4714

2775:                                             ; preds = %221
  %2776 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2777 = load i32, ptr %2776, align 4, !tbaa !162
  %2778 = load ptr, ptr %195, align 8, !tbaa !64
  %2779 = zext i32 %2777 to i64
  %2780 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2778, i64 %2779
  %2781 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2778, i64 %2779, i32 2
  %2782 = load i64, ptr %2781, align 8, !tbaa !330
  store i64 %2782, ptr %2780, align 8, !tbaa !65
  %2783 = load ptr, ptr %59, align 8, !tbaa !26
  %2784 = ptrtoint ptr %214 to i64
  %2785 = ptrtoint ptr %2783 to i64
  %2786 = sub i64 %2784, %2785
  %2787 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2778, i64 %2779, i32 1
  store i64 %2786, ptr %2787, align 8, !tbaa !74
  %2788 = load i32, ptr %193, align 8, !tbaa !67
  %2789 = icmp ugt i32 %2777, %2788
  br i1 %2789, label %2790, label %2791

2790:                                             ; preds = %2775
  store i32 %2777, ptr %193, align 8, !tbaa !67
  br label %2791

2791:                                             ; preds = %2790, %2775
  store i32 %2777, ptr %197, align 4, !tbaa !68
  br i1 %202, label %4714, label %2792

2792:                                             ; preds = %2791
  %2793 = load i32, ptr %203, align 8, !tbaa !5
  %2794 = icmp eq i32 %2793, %2777
  br i1 %2794, label %4347, label %4714

2795:                                             ; preds = %221
  %2796 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2797 = load i32, ptr %2796, align 4, !tbaa !162
  %2798 = icmp eq i32 %2797, 0
  %2799 = icmp eq ptr %215, null
  %2800 = or i1 %2798, %2799
  br i1 %2800, label %4346, label %2801

2801:                                             ; preds = %2795
  %2802 = ptrtoint ptr %214 to i64
  br label %2803

2803:                                             ; preds = %2801, %2831
  %2804 = phi ptr [ %215, %2801 ], [ %2832, %2831 ]
  %2805 = getelementptr inbounds %struct.regnode, ptr %2804, i64 0, i32 1
  %2806 = load i8, ptr %2805, align 1, !tbaa !56
  switch i8 %2806, label %2831 [
    i8 0, label %4346
    i8 50, label %2807
  ]

2807:                                             ; preds = %2803
  %2808 = getelementptr inbounds %struct.regnode_1, ptr %2804, i64 0, i32 3
  %2809 = load i32, ptr %2808, align 4, !tbaa !162
  %2810 = icmp ugt i32 %2809, %84
  br i1 %2810, label %2831, label %2811

2811:                                             ; preds = %2807
  %2812 = load ptr, ptr %195, align 8, !tbaa !64
  %2813 = zext i32 %2809 to i64
  %2814 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2812, i64 %2813
  %2815 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2812, i64 %2813, i32 2
  %2816 = load i64, ptr %2815, align 8, !tbaa !330
  store i64 %2816, ptr %2814, align 8, !tbaa !65
  %2817 = load ptr, ptr %59, align 8, !tbaa !26
  %2818 = ptrtoint ptr %2817 to i64
  %2819 = sub i64 %2802, %2818
  %2820 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2812, i64 %2813, i32 1
  store i64 %2819, ptr %2820, align 8, !tbaa !74
  %2821 = load i32, ptr %193, align 8, !tbaa !67
  %2822 = icmp ugt i32 %2809, %2821
  br i1 %2822, label %2823, label %2824

2823:                                             ; preds = %2811
  store i32 %2809, ptr %193, align 8, !tbaa !67
  br label %2824

2824:                                             ; preds = %2823, %2811
  store i32 %2809, ptr %197, align 4, !tbaa !68
  %2825 = load i32, ptr %2796, align 4, !tbaa !162
  %2826 = icmp eq i32 %2809, %2825
  br i1 %2826, label %4346, label %2827

2827:                                             ; preds = %2824
  br i1 %202, label %2831, label %2828

2828:                                             ; preds = %2827
  %2829 = load i32, ptr %203, align 8, !tbaa !5
  %2830 = icmp eq i32 %2829, %2809
  br i1 %2830, label %4347, label %2831

2831:                                             ; preds = %2803, %2827, %2828, %2807
  %2832 = call ptr @Perl_regnext(ptr noundef nonnull %2804) #12
  %2833 = icmp eq ptr %2832, null
  br i1 %2833, label %4346, label %2803, !llvm.loop !331

2834:                                             ; preds = %221
  %2835 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2836 = load i32, ptr %2835, align 4, !tbaa !162
  %2837 = load i32, ptr %193, align 8, !tbaa !67
  %2838 = icmp ult i32 %2837, %2836
  br i1 %2838, label %2845, label %2839

2839:                                             ; preds = %2834
  %2840 = load ptr, ptr %195, align 8, !tbaa !64
  %2841 = zext i32 %2836 to i64
  %2842 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2840, i64 %2841, i32 1
  %2843 = load i64, ptr %2842, align 8, !tbaa !74
  %2844 = icmp ne i64 %2843, -1
  br label %2845

2845:                                             ; preds = %2839, %2834
  %2846 = phi i1 [ false, %2834 ], [ %2844, %2839 ]
  %2847 = zext i1 %2846 to i8
  br label %4714

2848:                                             ; preds = %221
  %2849 = getelementptr i8, ptr %215, i64 4
  %2850 = load i32, ptr %2849, align 4, !tbaa !162
  %2851 = getelementptr inbounds %struct.regexp, ptr %190, i64 0, i32 14
  %2852 = load ptr, ptr %2851, align 8, !tbaa !20
  %2853 = getelementptr inbounds %struct.regexp_internal, ptr %2852, i64 0, i32 3
  %2854 = load ptr, ptr %2853, align 8, !tbaa !161
  %2855 = zext i32 %2850 to i64
  %2856 = getelementptr inbounds %struct.reg_data, ptr %2854, i64 0, i32 2, i64 %2855
  %2857 = load ptr, ptr %2856, align 8, !tbaa !35
  %2858 = getelementptr inbounds %struct.sv, ptr %2857, i64 0, i32 3
  %2859 = load ptr, ptr %2858, align 8, !tbaa !5
  %2860 = load ptr, ptr %2857, align 8, !tbaa !38
  %2861 = getelementptr inbounds %struct.xpviv, ptr %2860, i64 0, i32 4
  %2862 = load i64, ptr %2861, align 8, !tbaa !5
  %2863 = icmp sgt i64 %2862, 0
  br i1 %2863, label %2864, label %2880

2864:                                             ; preds = %2848
  %2865 = load i32, ptr %193, align 8, !tbaa !67
  br label %2866

2866:                                             ; preds = %2877, %2864
  %2867 = phi i64 [ 0, %2864 ], [ %2878, %2877 ]
  %2868 = getelementptr inbounds i32, ptr %2859, i64 %2867
  %2869 = load i32, ptr %2868, align 4, !tbaa !73
  %2870 = icmp slt i32 %2865, %2869
  br i1 %2870, label %2877, label %2871

2871:                                             ; preds = %2866
  %2872 = load ptr, ptr %195, align 8, !tbaa !64
  %2873 = sext i32 %2869 to i64
  %2874 = getelementptr inbounds %struct.regexp_paren_pair, ptr %2872, i64 %2873, i32 1
  %2875 = load i64, ptr %2874, align 8, !tbaa !74
  %2876 = icmp eq i64 %2875, -1
  br i1 %2876, label %2877, label %2880

2877:                                             ; preds = %2871, %2866
  %2878 = add nuw nsw i64 %2867, 1
  %2879 = icmp eq i64 %2878, %2862
  br i1 %2879, label %2880, label %2866, !llvm.loop !292

2880:                                             ; preds = %2871, %2877, %2848
  %2881 = phi i32 [ 0, %2848 ], [ %2869, %2871 ], [ 0, %2877 ]
  %2882 = icmp sgt i32 %2881, 0
  %2883 = zext i1 %2882 to i8
  br label %4714

2884:                                             ; preds = %221
  %2885 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2886 = load i32, ptr %2885, align 4, !tbaa !162
  br i1 %202, label %2892, label %2887

2887:                                             ; preds = %2884
  %2888 = icmp eq i32 %2886, 0
  br i1 %2888, label %2892, label %2889

2889:                                             ; preds = %2887
  %2890 = load i32, ptr %203, align 8, !tbaa !5
  %2891 = icmp eq i32 %2890, %2886
  br label %2892

2892:                                             ; preds = %2887, %2889, %2884
  %2893 = phi i1 [ false, %2884 ], [ true, %2887 ], [ %2891, %2889 ]
  %2894 = zext i1 %2893 to i8
  br label %4714

2895:                                             ; preds = %221
  %2896 = load i32, ptr %63, align 8, !tbaa !32
  store i32 %2896, ptr %64, align 4, !tbaa !293
  %2897 = and i8 %172, 1
  %2898 = icmp eq i8 %2897, 0
  br i1 %2898, label %2901, label %2899

2899:                                             ; preds = %2895
  %2900 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  br label %4714

2901:                                             ; preds = %2895
  %2902 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %2903 = load i32, ptr %2902, align 4, !tbaa !162
  %2904 = zext i32 %2903 to i64
  %2905 = getelementptr inbounds %struct.regnode, ptr %215, i64 %2904
  %2906 = getelementptr inbounds %struct.regnode, ptr %215, i64 %2904, i32 1
  %2907 = load i8, ptr %2906, align 1, !tbaa !56
  %2908 = icmp eq i8 %2907, 66
  %2909 = select i1 %2908, i64 2, i64 0
  %2910 = getelementptr inbounds %struct.regnode, ptr %2905, i64 %2909
  br label %4714

2911:                                             ; preds = %221
  %2912 = load i8, ptr %215, align 2, !tbaa !76
  %2913 = zext i8 %2912 to i32
  br label %4714

2914:                                             ; preds = %221
  %2915 = load i8, ptr %215, align 2, !tbaa !76
  %2916 = zext i8 %2915 to i32
  %2917 = getelementptr %struct.regnode, ptr %186, i64 -1, i32 1
  %2918 = load i8, ptr %2917, align 1, !tbaa !56
  %2919 = icmp eq i8 %2918, 40
  br i1 %2919, label %2920, label %2925

2920:                                             ; preds = %2914
  %2921 = getelementptr inbounds %struct.regnode_1, ptr %186, i64 0, i32 3
  %2922 = load i32, ptr %2921, align 4, !tbaa !162
  %2923 = zext i32 %2922 to i64
  %2924 = getelementptr inbounds %struct.regnode, ptr %186, i64 %2923
  br label %2925

2925:                                             ; preds = %2920, %2914
  %2926 = phi ptr [ %2924, %2920 ], [ %186, %2914 ]
  %2927 = load i32, ptr %193, align 8, !tbaa !67
  %2928 = call i32 @llvm.smin.i32(i32 %2927, i32 %2916)
  store ptr %179, ptr %207, align 8, !tbaa !5
  %2929 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %2929, ptr %199, align 8, !tbaa !5
  store i32 %2928, ptr %205, align 8, !tbaa !5
  store ptr %215, ptr %192, align 8, !tbaa !5
  store ptr %2926, ptr %196, align 8, !tbaa !5
  %2930 = and i8 %212, 1
  store i8 %2930, ptr %198, align 4, !tbaa !5
  %2931 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 -1, ptr %2931, align 4, !tbaa !5
  store ptr null, ptr %206, align 8, !tbaa !5
  %2932 = getelementptr inbounds %struct.regnode, ptr %2926, i64 -1
  br label %4730

2933:                                             ; preds = %221
  %2934 = load ptr, ptr %207, align 8, !tbaa !5
  br label %4824

2935:                                             ; preds = %221
  %2936 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %2937 = load i32, ptr %199, align 8, !tbaa !5
  %2938 = icmp sgt i32 %2936, %2937
  br i1 %2938, label %2939, label %2940

2939:                                             ; preds = %2935
  call void @Perl_leave_scope(i32 noundef %2937) #12
  br label %2940

2940:                                             ; preds = %2939, %2935
  %2941 = load ptr, ptr %207, align 8, !tbaa !5
  br label %4918

2942:                                             ; preds = %221
  %2943 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 4
  %2944 = load ptr, ptr %2943, align 8, !tbaa !5
  %2945 = getelementptr inbounds %struct.regnode_2, ptr %2944, i64 0, i32 3
  %2946 = load i16, ptr %2945, align 2, !tbaa !332
  %2947 = zext i16 %2946 to i32
  %2948 = getelementptr inbounds %struct.regnode_2, ptr %2944, i64 0, i32 4
  %2949 = load i16, ptr %2948, align 2, !tbaa !334
  %2950 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 9
  %2951 = load i32, ptr %2950, align 4, !tbaa !5
  %2952 = add nsw i32 %2951, 1
  store i32 %2952, ptr %2950, align 4, !tbaa !5
  %2953 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 10
  %2954 = load ptr, ptr %2953, align 8, !tbaa !5
  store ptr %2954, ptr %196, align 8, !tbaa !5
  store i32 0, ptr %199, align 8, !tbaa !5
  store i32 0, ptr %198, align 4, !tbaa !5
  %2955 = icmp slt i32 %2952, %2947
  br i1 %2955, label %2956, label %2963

2956:                                             ; preds = %2942
  %2957 = getelementptr inbounds %struct.regnode, ptr %2944, i64 2
  %2958 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 8
  %2959 = load i32, ptr %2958, align 8, !tbaa !5
  %2960 = load i32, ptr %4, align 4, !tbaa !73
  %2961 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %2959, i32 noundef %2960)
  store i32 %2961, ptr %192, align 8, !tbaa !5
  store ptr %214, ptr %2953, align 8, !tbaa !5
  %2962 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %2962, ptr %194, align 4, !tbaa !5
  store i32 100, ptr %188, align 8, !tbaa !276
  br label %4778

2963:                                             ; preds = %2942
  %2964 = load ptr, ptr %2953, align 8, !tbaa !5
  %2965 = icmp eq ptr %214, %2964
  br i1 %2965, label %3117, label %2966

2966:                                             ; preds = %2963
  %2967 = load i8, ptr %215, align 2, !tbaa !76
  %2968 = icmp eq i8 %2967, 0
  br i1 %2968, label %3042, label %2969

2969:                                             ; preds = %2966
  %2970 = load i32, ptr %63, align 8, !tbaa !32
  %2971 = icmp eq i32 %2970, 0
  br i1 %2971, label %2974, label %2972

2972:                                             ; preds = %2969
  %2973 = load i32, ptr %64, align 4, !tbaa !293
  br label %2986

2974:                                             ; preds = %2969
  %2975 = load ptr, ptr %58, align 8, !tbaa !27
  %2976 = load ptr, ptr %59, align 8, !tbaa !26
  %2977 = ptrtoint ptr %2975 to i64
  %2978 = ptrtoint ptr %2976 to i64
  %2979 = add i64 %2977, 1
  %2980 = sub i64 %2979, %2978
  %2981 = lshr i8 %2967, 4
  %2982 = zext i8 %2981 to i64
  %2983 = mul nsw i64 %2980, %2982
  %2984 = trunc i64 %2983 to i32
  %2985 = call i32 @llvm.umin.i32(i32 %2984, i32 2147483647)
  store i32 %2985, ptr %63, align 8, !tbaa !32
  br label %2986

2986:                                             ; preds = %2972, %2974
  %2987 = phi i32 [ %2970, %2972 ], [ %2985, %2974 ]
  %2988 = phi i32 [ %2973, %2972 ], [ %2985, %2974 ]
  %2989 = add nsw i32 %2988, -1
  store i32 %2989, ptr %64, align 4, !tbaa !293
  %2990 = icmp eq i32 %2988, 0
  br i1 %2990, label %2991, label %3010

2991:                                             ; preds = %2986
  %2992 = add nsw i32 %2987, 7
  %2993 = sdiv i32 %2992, 8
  %2994 = sext i32 %2993 to i64
  %2995 = load ptr, ptr %62, align 8, !tbaa !25
  %2996 = getelementptr inbounds %struct.regmatch_info_aux, ptr %2995, i64 0, i32 3
  %2997 = load ptr, ptr %2996, align 8, !tbaa !215
  %2998 = icmp eq ptr %2997, null
  br i1 %2998, label %3006, label %2999

2999:                                             ; preds = %2991
  %3000 = load i64, ptr %65, align 8, !tbaa !335
  %3001 = icmp slt i64 %3000, %2994
  br i1 %3001, label %3002, label %3004

3002:                                             ; preds = %2999
  %3003 = call ptr @Perl_safesysrealloc(ptr noundef nonnull %2997, i64 noundef %2994) #12
  store ptr %3003, ptr %2996, align 8, !tbaa !215
  store i64 %2994, ptr %65, align 8, !tbaa !335
  br label %3004

3004:                                             ; preds = %3002, %2999
  %3005 = phi ptr [ %3003, %3002 ], [ %2997, %2999 ]
  call void @llvm.memset.p0.i64(ptr align 1 %3005, i8 0, i64 %2994, i1 false)
  br label %3008

3006:                                             ; preds = %2991
  store i64 %2994, ptr %65, align 8, !tbaa !335
  %3007 = call ptr @Perl_safesyscalloc(i64 noundef %2994, i64 noundef 1) #12
  store ptr %3007, ptr %2996, align 8, !tbaa !215
  br label %3008

3008:                                             ; preds = %3006, %3004
  %3009 = load i32, ptr %64, align 4, !tbaa !293
  br label %3010

3010:                                             ; preds = %3008, %2986
  %3011 = phi i32 [ %3009, %3008 ], [ %2989, %2986 ]
  %3012 = icmp slt i32 %3011, 0
  br i1 %3012, label %3013, label %3042

3013:                                             ; preds = %3010
  store i32 -1, ptr %64, align 4, !tbaa !293
  %3014 = load i8, ptr %215, align 2, !tbaa !76
  %3015 = zext i8 %3014 to i32
  %3016 = and i32 %3015, 15
  %3017 = add nsw i32 %3016, -1
  %3018 = sext i32 %3017 to i64
  %3019 = load ptr, ptr %59, align 8, !tbaa !26
  %3020 = ptrtoint ptr %214 to i64
  %3021 = ptrtoint ptr %3019 to i64
  %3022 = sub i64 %3020, %3021
  %3023 = lshr i32 %3015, 4
  %3024 = zext i32 %3023 to i64
  %3025 = mul nsw i64 %3022, %3024
  %3026 = add nsw i64 %3025, %3018
  %3027 = srem i64 %3026, 8
  %3028 = trunc i64 %3027 to i32
  %3029 = shl nuw nsw i32 1, %3028
  %3030 = zext i32 %3029 to i64
  %3031 = sdiv i64 %3026, 8
  %3032 = load ptr, ptr %62, align 8, !tbaa !25
  %3033 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3032, i64 0, i32 3
  %3034 = load ptr, ptr %3033, align 8, !tbaa !215
  %3035 = getelementptr inbounds i8, ptr %3034, i64 %3031
  %3036 = load i8, ptr %3035, align 1, !tbaa !5
  %3037 = sext i8 %3036 to i64
  %3038 = and i64 %3030, %3037
  %3039 = icmp eq i64 %3038, 0
  br i1 %3039, label %3040, label %4918

3040:                                             ; preds = %3013
  %3041 = trunc i64 %3031 to i32
  store i32 %3041, ptr %199, align 8, !tbaa !5
  store i32 %3029, ptr %198, align 4, !tbaa !5
  br label %3042

3042:                                             ; preds = %3010, %2966, %3040
  %3043 = getelementptr inbounds %struct.regnode, ptr %2944, i64 2
  %3044 = getelementptr inbounds i8, ptr %179, i64 52
  %3045 = load i8, ptr %3044, align 4, !tbaa !5, !range !42, !noundef !43
  %3046 = icmp eq i8 %3045, 0
  br i1 %3046, label %3058, label %3047

3047:                                             ; preds = %3042
  store ptr %179, ptr %207, align 8, !tbaa !5
  %3048 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 2
  %3049 = load ptr, ptr %3048, align 8, !tbaa !5
  %3050 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 8
  %3051 = load i32, ptr %3050, align 8, !tbaa !5
  %3052 = load i32, ptr %4, align 4, !tbaa !73
  %3053 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3051, i32 noundef %3052)
  store i32 %3053, ptr %192, align 8, !tbaa !5
  %3054 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %3054, ptr %194, align 4, !tbaa !5
  %3055 = load ptr, ptr %207, align 8, !tbaa !5
  %3056 = getelementptr inbounds %struct.regmatch_state, ptr %3055, i64 0, i32 2, i32 0, i32 6
  %3057 = load ptr, ptr %3056, align 8, !tbaa !5
  br label %4730

3058:                                             ; preds = %3042
  %3059 = zext i16 %2949 to i32
  %3060 = icmp slt i32 %2952, %3059
  br i1 %3060, label %3061, label %3117

3061:                                             ; preds = %3058
  %3062 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 8
  %3063 = load i32, ptr %3062, align 8, !tbaa !5
  %3064 = load i32, ptr %4, align 4, !tbaa !73
  %3065 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3063, i32 noundef %3064)
  store i32 %3065, ptr %192, align 8, !tbaa !5
  store ptr %214, ptr %2953, align 8, !tbaa !5
  %3066 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %3066, ptr %194, align 4, !tbaa !5
  store i32 104, ptr %188, align 8, !tbaa !276
  br label %4778

3067:                                             ; preds = %221, %221
  %3068 = load ptr, ptr %207, align 8, !tbaa !5
  br label %4824

3069:                                             ; preds = %221
  %3070 = load ptr, ptr %207, align 8, !tbaa !5
  %3071 = load ptr, ptr %196, align 8, !tbaa !5
  %3072 = getelementptr inbounds %struct.regmatch_state, ptr %3070, i64 0, i32 2, i32 0, i32 10
  store ptr %3071, ptr %3072, align 8, !tbaa !5
  %3073 = getelementptr inbounds %struct.regmatch_state, ptr %3070, i64 0, i32 2, i32 0, i32 9
  %3074 = load i32, ptr %3073, align 4, !tbaa !5
  %3075 = add nsw i32 %3074, -1
  store i32 %3075, ptr %3073, align 4, !tbaa !5
  %3076 = load i32, ptr %198, align 4, !tbaa !5
  %3077 = icmp eq i32 %3076, 0
  br i1 %3077, label %4918, label %3078

3078:                                             ; preds = %3069
  %3079 = load ptr, ptr %62, align 8, !tbaa !25
  %3080 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3079, i64 0, i32 3
  %3081 = load ptr, ptr %3080, align 8, !tbaa !215
  %3082 = load i32, ptr %199, align 8, !tbaa !5
  %3083 = sext i32 %3082 to i64
  %3084 = getelementptr inbounds i8, ptr %3081, i64 %3083
  %3085 = load i8, ptr %3084, align 1, !tbaa !5
  %3086 = trunc i32 %3076 to i8
  %3087 = or i8 %3085, %3086
  store i8 %3087, ptr %3084, align 1, !tbaa !5
  br label %4918

3088:                                             ; preds = %221, %221
  %3089 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3090 = load i32, ptr %194, align 4, !tbaa !5
  %3091 = icmp sgt i32 %3089, %3090
  br i1 %3091, label %3092, label %3093

3092:                                             ; preds = %3088
  call void @Perl_leave_scope(i32 noundef %3090) #12
  br label %3093

3093:                                             ; preds = %3092, %3088
  call fastcc void @S_regcppop(ptr noundef %190, ptr noundef nonnull %4)
  %3094 = load ptr, ptr %196, align 8, !tbaa !5
  %3095 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 10
  store ptr %3094, ptr %3095, align 8, !tbaa !5
  %3096 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 9
  %3097 = load i32, ptr %3096, align 4, !tbaa !5
  %3098 = add nsw i32 %3097, -1
  store i32 %3098, ptr %3096, align 4, !tbaa !5
  %3099 = load i32, ptr %198, align 4, !tbaa !5
  %3100 = icmp eq i32 %3099, 0
  br i1 %3100, label %4918, label %3101

3101:                                             ; preds = %3093
  %3102 = load ptr, ptr %62, align 8, !tbaa !25
  %3103 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3102, i64 0, i32 3
  %3104 = load ptr, ptr %3103, align 8, !tbaa !215
  %3105 = load i32, ptr %199, align 8, !tbaa !5
  %3106 = sext i32 %3105 to i64
  %3107 = getelementptr inbounds i8, ptr %3104, i64 %3106
  %3108 = load i8, ptr %3107, align 1, !tbaa !5
  %3109 = trunc i32 %3099 to i8
  %3110 = or i8 %3108, %3109
  store i8 %3110, ptr %3107, align 1, !tbaa !5
  br label %4918

3111:                                             ; preds = %221
  %3112 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3113 = load i32, ptr %194, align 4, !tbaa !5
  %3114 = icmp sgt i32 %3112, %3113
  br i1 %3114, label %3115, label %3116

3115:                                             ; preds = %3111
  call void @Perl_leave_scope(i32 noundef %3113) #12
  br label %3116

3116:                                             ; preds = %3115, %3111
  call fastcc void @S_regcppop(ptr noundef %190, ptr noundef nonnull %4)
  br label %3117

3117:                                             ; preds = %2963, %3058, %3116
  %3118 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 9
  %3119 = load i32, ptr %3118, align 4, !tbaa !5
  %3120 = icmp sgt i32 %3119, 32766
  br i1 %3120, label %3121, label %3127

3121:                                             ; preds = %3117
  %3122 = call zeroext i1 @Perl_ckwarn(i32 noundef 20) #12
  br i1 %3122, label %3123, label %3127

3123:                                             ; preds = %3121
  %3124 = load i8, ptr %61, align 1, !tbaa !203, !range !42, !noundef !43
  %3125 = icmp eq i8 %3124, 0
  br i1 %3125, label %3126, label %3127

3126:                                             ; preds = %3123
  store i8 1, ptr %61, align 1, !tbaa !203
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 20, ptr noundef nonnull @.str.14, i32 noundef 32766) #12
  br label %3127

3127:                                             ; preds = %3126, %3123, %3121, %3117
  store ptr %179, ptr %207, align 8, !tbaa !5
  %3128 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 2
  %3129 = load ptr, ptr %3128, align 8, !tbaa !5
  %3130 = getelementptr inbounds %struct.regmatch_state, ptr %179, i64 0, i32 2, i32 0, i32 6
  %3131 = load ptr, ptr %3130, align 8, !tbaa !5
  br label %4730

3132:                                             ; preds = %221
  %3133 = load ptr, ptr %207, align 8, !tbaa !5
  %3134 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3135 = load i32, ptr %194, align 4, !tbaa !5
  %3136 = icmp sgt i32 %3134, %3135
  br i1 %3136, label %3137, label %3138

3137:                                             ; preds = %3132
  call void @Perl_leave_scope(i32 noundef %3135) #12
  br label %3138

3138:                                             ; preds = %3137, %3132
  call fastcc void @S_regcppop(ptr noundef %190, ptr noundef nonnull %4)
  %3139 = getelementptr inbounds %struct.regmatch_state, ptr %3133, i64 0, i32 2, i32 0, i32 9
  %3140 = load i32, ptr %3139, align 4, !tbaa !5
  %3141 = getelementptr inbounds %struct.regmatch_state, ptr %3133, i64 0, i32 2, i32 0, i32 4
  %3142 = load ptr, ptr %3141, align 8, !tbaa !5
  %3143 = getelementptr inbounds %struct.regnode_2, ptr %3142, i64 0, i32 4
  %3144 = load i16, ptr %3143, align 2, !tbaa !334
  %3145 = zext i16 %3144 to i32
  %3146 = icmp slt i32 %3140, %3145
  br i1 %3146, label %3170, label %3147

3147:                                             ; preds = %3138
  %3148 = icmp sgt i32 %3140, 32766
  br i1 %3148, label %3149, label %3155

3149:                                             ; preds = %3147
  %3150 = call zeroext i1 @Perl_ckwarn(i32 noundef 20) #12
  br i1 %3150, label %3151, label %3155

3151:                                             ; preds = %3149
  %3152 = load i8, ptr %61, align 1, !tbaa !203, !range !42, !noundef !43
  %3153 = icmp eq i8 %3152, 0
  br i1 %3153, label %3154, label %3155

3154:                                             ; preds = %3151
  store i8 1, ptr %61, align 1, !tbaa !203
  call void (i32, ptr, ...) @Perl_warner(i32 noundef 20, ptr noundef nonnull @.str.14, i32 noundef 32766) #12
  br label %3155

3155:                                             ; preds = %3154, %3151, %3149, %3147
  %3156 = load i32, ptr %3139, align 4, !tbaa !5
  %3157 = add nsw i32 %3156, -1
  store i32 %3157, ptr %3139, align 4, !tbaa !5
  %3158 = load i32, ptr %198, align 4, !tbaa !5
  %3159 = icmp eq i32 %3158, 0
  br i1 %3159, label %4918, label %3160

3160:                                             ; preds = %3155
  %3161 = load ptr, ptr %62, align 8, !tbaa !25
  %3162 = getelementptr inbounds %struct.regmatch_info_aux, ptr %3161, i64 0, i32 3
  %3163 = load ptr, ptr %3162, align 8, !tbaa !215
  %3164 = load i32, ptr %199, align 8, !tbaa !5
  %3165 = sext i32 %3164 to i64
  %3166 = getelementptr inbounds i8, ptr %3163, i64 %3165
  %3167 = load i8, ptr %3166, align 1, !tbaa !5
  %3168 = trunc i32 %3158 to i8
  %3169 = or i8 %3167, %3168
  store i8 %3169, ptr %3166, align 1, !tbaa !5
  br label %4918

3170:                                             ; preds = %3138
  %3171 = getelementptr inbounds %struct.regmatch_state, ptr %3133, i64 0, i32 2, i32 0, i32 10
  store ptr %214, ptr %3171, align 8, !tbaa !5
  %3172 = getelementptr inbounds %struct.regmatch_state, ptr %3133, i64 0, i32 2, i32 0, i32 8
  %3173 = load i32, ptr %3172, align 8, !tbaa !5
  %3174 = load i32, ptr %4, align 4, !tbaa !73
  %3175 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef %3173, i32 noundef %3174)
  store i32 %3175, ptr %192, align 8, !tbaa !5
  %3176 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %3176, ptr %194, align 4, !tbaa !5
  %3177 = load ptr, ptr %207, align 8, !tbaa !5
  %3178 = getelementptr inbounds %struct.regmatch_state, ptr %3177, i64 0, i32 2, i32 0, i32 4
  %3179 = load ptr, ptr %3178, align 8, !tbaa !5
  %3180 = getelementptr inbounds %struct.regnode, ptr %3179, i64 2
  store i32 102, ptr %188, align 8, !tbaa !276
  br label %4778

3181:                                             ; preds = %221
  %3182 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %3183 = load i32, ptr %3182, align 4, !tbaa !162
  %3184 = zext i32 %3183 to i64
  %3185 = getelementptr inbounds %struct.regnode, ptr %215, i64 %3184
  %3186 = icmp eq i32 %3183, 0
  %3187 = select i1 %3186, ptr null, ptr %3185
  br label %3188

3188:                                             ; preds = %221, %3181
  %3189 = phi ptr [ %3187, %3181 ], [ %186, %221 ]
  %3190 = phi ptr [ %3182, %3181 ], [ %215, %221 ]
  %3191 = getelementptr inbounds %struct.regnode, ptr %3190, i64 1
  %3192 = load i32, ptr %193, align 8, !tbaa !67
  store i32 %3192, ptr %207, align 8, !tbaa !5
  %3193 = load i32, ptr %197, align 4, !tbaa !68
  store i32 %3193, ptr %208, align 4, !tbaa !5
  store ptr %3189, ptr %196, align 8, !tbaa !5
  %3194 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %3194, ptr %192, align 8, !tbaa !5
  store i32 110, ptr %188, align 8, !tbaa !276
  br i1 %39, label %4754, label %4778

3195:                                             ; preds = %221
  %3196 = load i8, ptr %215, align 2, !tbaa !76
  %3197 = icmp eq i8 %3196, 0
  br i1 %3197, label %3198, label %3206

3198:                                             ; preds = %3195
  %3199 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %3200 = load ptr, ptr %3199, align 8, !tbaa !161
  %3201 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %3202 = load i32, ptr %3201, align 4, !tbaa !162
  %3203 = zext i32 %3202 to i64
  %3204 = getelementptr inbounds %struct.reg_data, ptr %3200, i64 0, i32 2, i64 %3203
  %3205 = load ptr, ptr %3204, align 8, !tbaa !35
  br label %3206

3206:                                             ; preds = %3195, %3198
  %3207 = phi ptr [ %3205, %3198 ], [ null, %3195 ]
  store ptr %3207, ptr %192, align 8, !tbaa !5
  store i32 130, ptr %188, align 8, !tbaa !276
  br label %4778

3208:                                             ; preds = %221
  %3209 = load ptr, ptr %192, align 8, !tbaa !5
  %3210 = icmp eq ptr %3209, null
  %3211 = select i1 %3210, ptr %174, ptr %3209
  br label %4918

3212:                                             ; preds = %221
  %3213 = and i8 %176, 1
  %3214 = icmp eq i8 %3213, 0
  %3215 = select i1 %3214, i8 %176, i8 0
  %3216 = select i1 %3214, i8 %177, i8 0
  %3217 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3218 = load i32, ptr %192, align 8, !tbaa !5
  %3219 = icmp sgt i32 %3217, %3218
  br i1 %3219, label %3220, label %3221

3220:                                             ; preds = %3212
  call void @Perl_leave_scope(i32 noundef %3218) #12
  br label %3221

3221:                                             ; preds = %3220, %3212
  %3222 = load i32, ptr %193, align 8, !tbaa !67
  %3223 = load i32, ptr %207, align 8, !tbaa !5
  %3224 = icmp ugt i32 %3222, %3223
  br i1 %3224, label %3225, label %3234

3225:                                             ; preds = %3221
  %3226 = load ptr, ptr %195, align 8, !tbaa !64
  br label %3227

3227:                                             ; preds = %3225, %3227
  %3228 = phi i32 [ %3222, %3225 ], [ %3231, %3227 ]
  %3229 = zext i32 %3228 to i64
  %3230 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3226, i64 %3229, i32 1
  store i64 -1, ptr %3230, align 8, !tbaa !74
  %3231 = add i32 %3228, -1
  %3232 = load i32, ptr %207, align 8, !tbaa !5
  %3233 = icmp ugt i32 %3231, %3232
  br i1 %3233, label %3227, label %3234, !llvm.loop !336

3234:                                             ; preds = %3227, %3221
  %3235 = phi i32 [ %3222, %3221 ], [ %3231, %3227 ]
  store i32 %3235, ptr %193, align 8, !tbaa !67
  %3236 = load i32, ptr %208, align 4, !tbaa !5
  store i32 %3236, ptr %197, align 4, !tbaa !68
  %3237 = load ptr, ptr %196, align 8, !tbaa !5
  %3238 = icmp eq ptr %3237, null
  br i1 %3238, label %4918, label %3239

3239:                                             ; preds = %3234
  %3240 = getelementptr inbounds %struct.regnode, ptr %3237, i64 0, i32 1
  %3241 = load i8, ptr %3240, align 1, !tbaa !56
  switch i8 %3241, label %4918 [
    i8 30, label %3242
    i8 62, label %3242
  ]

3242:                                             ; preds = %3239, %3239, %752, %4489
  %3243 = phi i8 [ %172, %3239 ], [ %172, %3239 ], [ %172, %752 ], [ %4482, %4489 ]
  %3244 = phi i8 [ %3215, %3239 ], [ %3215, %3239 ], [ %609, %752 ], [ %176, %4489 ]
  %3245 = phi i8 [ %3216, %3239 ], [ %3216, %3239 ], [ %610, %752 ], [ %177, %4489 ]
  %3246 = phi ptr [ %214, %3239 ], [ %214, %3239 ], [ %741, %752 ], [ %4490, %4489 ]
  %3247 = phi ptr [ %3237, %3239 ], [ %3237, %3239 ], [ %755, %752 ], [ %4496, %4489 ]
  br label %132, !llvm.loop !337

3248:                                             ; preds = %221
  store ptr %215, ptr %200, align 8, !tbaa !5
  %3249 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  %3250 = load i32, ptr %193, align 8, !tbaa !67
  store i32 %3250, ptr %194, align 4, !tbaa !5
  %3251 = load i32, ptr %197, align 4, !tbaa !68
  store i32 %3251, ptr %196, align 8, !tbaa !5
  %3252 = load i8, ptr %215, align 2, !tbaa !76
  %3253 = icmp eq i8 %3252, 0
  br i1 %3253, label %3262, label %3254

3254:                                             ; preds = %3248
  %3255 = zext i8 %3252 to i32
  %3256 = load i32, ptr %4, align 4, !tbaa !73
  %3257 = call i32 @llvm.umax.i32(i32 %3256, i32 %3255)
  store i32 %3257, ptr %4, align 4
  %3258 = getelementptr inbounds %struct.regnode, ptr %215, i64 2, i32 2
  %3259 = load i16, ptr %3258, align 2, !tbaa !275
  %3260 = zext i16 %3259 to i64
  %3261 = getelementptr inbounds %struct.regnode, ptr %3249, i64 %3260
  br label %3262

3262:                                             ; preds = %3254, %3248
  %3263 = phi ptr [ %3261, %3254 ], [ %3249, %3248 ]
  store ptr %3263, ptr %205, align 8, !tbaa !5
  store ptr %186, ptr %206, align 8, !tbaa !5
  store i32 0, ptr %201, align 4, !tbaa !5
  store i32 0, ptr %199, align 8, !tbaa !5
  %3264 = and i8 %212, 1
  store i8 %3264, ptr %198, align 4, !tbaa !5
  store i32 -1001, ptr %207, align 8, !tbaa !5
  %3265 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %3265, ptr %192, align 8, !tbaa !5
  %3266 = icmp eq i8 %3264, 0
  br i1 %3266, label %3271, label %3267

3267:                                             ; preds = %3262
  %3268 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 3
  %3269 = load i16, ptr %3268, align 2, !tbaa !332
  %3270 = icmp eq i16 %3269, 0
  br i1 %3270, label %3362, label %3275

3271:                                             ; preds = %3262
  %3272 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 4
  %3273 = load i16, ptr %3272, align 2, !tbaa !334
  %3274 = icmp eq i16 %3273, 0
  br i1 %3274, label %3362, label %3275

3275:                                             ; preds = %3597, %3592, %3327, %3267, %3271
  %3276 = phi i8 [ %212, %3327 ], [ 0, %3271 ], [ 0, %3267 ], [ %212, %3592 ], [ %212, %3597 ]
  %3277 = load ptr, ptr %205, align 8, !tbaa !5
  br label %4730

3278:                                             ; preds = %221
  %3279 = load i32, ptr %199, align 8, !tbaa !5
  %3280 = add nsw i32 %3279, 1
  store i32 %3280, ptr %199, align 8, !tbaa !5
  %3281 = icmp eq i32 %3279, 0
  br i1 %3281, label %3282, label %3317

3282:                                             ; preds = %3278
  %3283 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %3284 = icmp eq i8 %3283, 0
  %3285 = load ptr, ptr %204, align 8, !tbaa !294
  br i1 %3284, label %3300, label %3286

3286:                                             ; preds = %3282
  %3287 = icmp ult ptr %3285, %214
  %3288 = load i32, ptr %201, align 4, !tbaa !5
  br i1 %3287, label %3289, label %3305

3289:                                             ; preds = %3286, %3289
  %3290 = phi i32 [ %3292, %3289 ], [ %3288, %3286 ]
  %3291 = phi ptr [ %3298, %3289 ], [ %3285, %3286 ]
  %3292 = add nsw i32 %3290, 1
  store i32 %3292, ptr %201, align 4, !tbaa !5
  %3293 = load i8, ptr %3291, align 1, !tbaa !5
  %3294 = zext i8 %3293 to i64
  %3295 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3294
  %3296 = load i8, ptr %3295, align 1, !tbaa !5
  %3297 = zext i8 %3296 to i64
  %3298 = getelementptr inbounds i8, ptr %3291, i64 %3297
  %3299 = icmp ult ptr %3298, %214
  br i1 %3299, label %3289, label %3305, !llvm.loop !338

3300:                                             ; preds = %3282
  %3301 = ptrtoint ptr %214 to i64
  %3302 = ptrtoint ptr %3285 to i64
  %3303 = sub i64 %3301, %3302
  %3304 = trunc i64 %3303 to i32
  store i32 %3304, ptr %201, align 4, !tbaa !5
  br label %3305

3305:                                             ; preds = %3289, %3286, %3300
  %3306 = phi i32 [ %3288, %3286 ], [ %3304, %3300 ], [ %3292, %3289 ]
  %3307 = icmp eq i32 %3306, 0
  br i1 %3307, label %3308, label %3317

3308:                                             ; preds = %3305
  %3309 = load i8, ptr %198, align 4, !tbaa !5, !range !42, !noundef !43
  %3310 = icmp eq i8 %3309, 0
  %3311 = load ptr, ptr %200, align 8, !tbaa !5
  %3312 = getelementptr inbounds %struct.regnode_2, ptr %3311, i64 0, i32 3
  %3313 = getelementptr inbounds %struct.regnode_2, ptr %3311, i64 0, i32 4
  %3314 = select i1 %3310, ptr %3313, ptr %3312
  %3315 = load i16, ptr %3314, align 2, !tbaa !89
  %3316 = zext i16 %3315 to i32
  store i32 %3316, ptr %199, align 8, !tbaa !5
  br label %3317

3317:                                             ; preds = %3305, %3308, %3278
  %3318 = phi i32 [ %3280, %3305 ], [ %3316, %3308 ], [ %3280, %3278 ]
  br i1 %202, label %3327, label %3319

3319:                                             ; preds = %3317
  %3320 = load i32, ptr %203, align 8, !tbaa !5
  %3321 = icmp eq i32 %3320, 0
  br i1 %3321, label %3327, label %3322

3322:                                             ; preds = %3319
  %3323 = load ptr, ptr %200, align 8, !tbaa !5
  %3324 = load i8, ptr %3323, align 2, !tbaa !76
  %3325 = zext i8 %3324 to i32
  %3326 = icmp eq i32 %3320, %3325
  br i1 %3326, label %4347, label %3327

3327:                                             ; preds = %3322, %3319, %3317
  %3328 = load i8, ptr %198, align 4, !tbaa !5, !range !42, !noundef !43
  %3329 = icmp eq i8 %3328, 0
  %3330 = load ptr, ptr %200, align 8, !tbaa !5
  %3331 = getelementptr inbounds %struct.regnode_2, ptr %3330, i64 0, i32 3
  %3332 = getelementptr inbounds %struct.regnode_2, ptr %3330, i64 0, i32 4
  %3333 = select i1 %3329, ptr %3332, ptr %3331
  %3334 = load i16, ptr %3333, align 2, !tbaa !89
  %3335 = icmp eq i16 %3334, 32767
  %3336 = zext i16 %3334 to i32
  %3337 = icmp slt i32 %3318, %3336
  %3338 = select i1 %3335, i1 true, i1 %3337
  br i1 %3338, label %3275, label %3362

3339:                                             ; preds = %221
  %3340 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3341 = load i32, ptr %192, align 8, !tbaa !5
  %3342 = icmp sgt i32 %3340, %3341
  br i1 %3342, label %3343, label %3344

3343:                                             ; preds = %3339
  call void @Perl_leave_scope(i32 noundef %3341) #12
  br label %3344

3344:                                             ; preds = %3343, %3339
  %3345 = load i8, ptr %198, align 4, !tbaa !5, !range !42, !noundef !43
  %3346 = icmp eq i8 %3345, 0
  br i1 %3346, label %3347, label %4914

3347:                                             ; preds = %3344
  %3348 = load i32, ptr %199, align 8, !tbaa !5
  %3349 = load ptr, ptr %200, align 8, !tbaa !5
  %3350 = getelementptr inbounds %struct.regnode_2, ptr %3349, i64 0, i32 3
  %3351 = load i16, ptr %3350, align 2, !tbaa !332
  %3352 = zext i16 %3351 to i32
  %3353 = icmp slt i32 %3348, %3352
  br i1 %3353, label %4914, label %3354

3354:                                             ; preds = %3347
  br i1 %202, label %3362, label %3355

3355:                                             ; preds = %3354
  %3356 = load i32, ptr %203, align 8, !tbaa !5
  %3357 = icmp eq i32 %3356, 0
  br i1 %3357, label %3362, label %3358

3358:                                             ; preds = %3355
  %3359 = load i8, ptr %3349, align 2, !tbaa !76
  %3360 = zext i8 %3359 to i32
  %3361 = icmp eq i32 %3356, %3360
  br i1 %3361, label %4914, label %3362

3362:                                             ; preds = %3327, %3672, %3668, %3354, %3355, %3358, %3267, %3271
  %3363 = phi i8 [ %212, %3358 ], [ %212, %3355 ], [ %212, %3354 ], [ 0, %3267 ], [ 0, %3271 ], [ %212, %3668 ], [ %212, %3672 ], [ %212, %3327 ]
  %3364 = phi i32 [ %222, %3358 ], [ %222, %3355 ], [ %222, %3354 ], [ %222, %3267 ], [ %222, %3271 ], [ -10, %3668 ], [ %3674, %3672 ], [ %222, %3327 ]
  %3365 = phi ptr [ %214, %3358 ], [ %214, %3355 ], [ %214, %3354 ], [ %214, %3267 ], [ %214, %3271 ], [ %3669, %3668 ], [ %3669, %3672 ], [ %214, %3327 ]
  %3366 = phi ptr [ %215, %3358 ], [ %215, %3355 ], [ %215, %3354 ], [ %3263, %3267 ], [ %3263, %3271 ], [ %215, %3668 ], [ %215, %3672 ], [ %215, %3327 ]
  %3367 = load i32, ptr %207, align 8, !tbaa !5
  %3368 = icmp eq i32 %3367, -1001
  br i1 %3368, label %3369, label %3442

3369:                                             ; preds = %3362
  store i32 -1000, ptr %208, align 4, !tbaa !5
  store i32 -1000, ptr %207, align 8, !tbaa !5
  %3370 = load ptr, ptr %206, align 8, !tbaa !5
  %3371 = getelementptr inbounds %struct.regnode, ptr %3370, i64 0, i32 1
  %3372 = load i8, ptr %3371, align 1, !tbaa !56
  %3373 = zext i8 %3372 to i64
  %3374 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3373
  %3375 = load i8, ptr %3374, align 1, !tbaa !5
  switch i8 %3375, label %3376 [
    i8 31, label %3434
    i8 51, label %3434
  ]

3376:                                             ; preds = %3369
  switch i8 %3372, label %3383 [
    i8 49, label %3389
    i8 50, label %3377
    i8 68, label %3389
    i8 65, label %3389
    i8 63, label %3389
    i8 43, label %3389
    i8 69, label %3389
    i8 90, label %3389
  ]

3377:                                             ; preds = %3376
  br i1 %202, label %3389, label %3378

3378:                                             ; preds = %3377
  %3379 = load i32, ptr %203, align 8, !tbaa !5
  %3380 = getelementptr inbounds %struct.regnode_1, ptr %3370, i64 0, i32 3
  %3381 = load i32, ptr %3380, align 4, !tbaa !162
  %3382 = icmp eq i32 %3379, %3381
  br i1 %3382, label %3383, label %3389

3383:                                             ; preds = %3376, %3378
  %3384 = icmp eq i8 %3375, 44
  br i1 %3384, label %3385, label %3442

3385:                                             ; preds = %3383
  %3386 = getelementptr inbounds %struct.regnode_2, ptr %3370, i64 0, i32 3
  %3387 = load i16, ptr %3386, align 2, !tbaa !332
  %3388 = icmp eq i16 %3387, 0
  br i1 %3388, label %3442, label %3391

3389:                                             ; preds = %3376, %3376, %3376, %3376, %3376, %3376, %3376, %3378, %3377
  %3390 = icmp eq i8 %3375, 31
  br i1 %3390, label %3434, label %3391

3391:                                             ; preds = %3389, %3385
  br label %3392

3392:                                             ; preds = %3391, %3429
  %3393 = phi i8 [ %3433, %3429 ], [ %3372, %3391 ]
  %3394 = phi ptr [ %3431, %3429 ], [ %3370, %3391 ]
  switch i8 %3393, label %3401 [
    i8 49, label %3412
    i8 50, label %3395
    i8 65, label %3429
    i8 43, label %3412
    i8 63, label %3412
    i8 68, label %3412
    i8 69, label %3412
    i8 90, label %3412
  ]

3395:                                             ; preds = %3392
  br i1 %202, label %3412, label %3396

3396:                                             ; preds = %3395
  %3397 = load i32, ptr %203, align 8, !tbaa !5
  %3398 = getelementptr inbounds %struct.regnode_1, ptr %3394, i64 0, i32 3
  %3399 = load i32, ptr %3398, align 4, !tbaa !162
  %3400 = icmp eq i32 %3397, %3399
  br i1 %3400, label %3401, label %3412

3401:                                             ; preds = %3392, %3396
  %3402 = zext i8 %3393 to i64
  %3403 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3402
  %3404 = load i8, ptr %3403, align 1, !tbaa !5
  %3405 = icmp eq i8 %3404, 44
  br i1 %3405, label %3406, label %3434

3406:                                             ; preds = %3401
  %3407 = getelementptr inbounds %struct.regnode_2, ptr %3394, i64 0, i32 3
  %3408 = load i16, ptr %3407, align 2, !tbaa !332
  %3409 = icmp eq i16 %3408, 0
  br i1 %3409, label %3442, label %3410

3410:                                             ; preds = %3406
  %3411 = icmp eq i8 %3393, 65
  br i1 %3411, label %3429, label %3412

3412:                                             ; preds = %3392, %3392, %3392, %3392, %3392, %3392, %3395, %3396, %3410
  %3413 = zext i8 %3393 to i64
  %3414 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3413
  %3415 = load i8, ptr %3414, align 1, !tbaa !5
  %3416 = icmp eq i8 %3415, 44
  br i1 %3416, label %3429, label %3417

3417:                                             ; preds = %3412
  switch i8 %3393, label %3425 [
    i8 43, label %3429
    i8 63, label %3418
  ]

3418:                                             ; preds = %3417
  %3419 = load i8, ptr %3394, align 2, !tbaa !76
  %3420 = icmp eq i8 %3419, 0
  br i1 %3420, label %3429, label %3421

3421:                                             ; preds = %3418
  %3422 = getelementptr inbounds %struct.regnode_1, ptr %3394, i64 0, i32 3
  %3423 = load i32, ptr %3422, align 4, !tbaa !162
  %3424 = zext i32 %3423 to i64
  br label %3429

3425:                                             ; preds = %3417
  %3426 = getelementptr inbounds %struct.regnode, ptr %3394, i64 0, i32 2
  %3427 = load i16, ptr %3426, align 2, !tbaa !275
  %3428 = zext i16 %3427 to i64
  br label %3429

3429:                                             ; preds = %3418, %3417, %3410, %3412, %3392, %3421, %3425
  %3430 = phi i64 [ %3424, %3421 ], [ %3428, %3425 ], [ 2, %3392 ], [ 2, %3412 ], [ 2, %3410 ], [ 1, %3417 ], [ 2, %3418 ]
  %3431 = getelementptr inbounds %struct.regnode, ptr %3394, i64 %3430
  %3432 = getelementptr inbounds %struct.regnode, ptr %3394, i64 %3430, i32 1
  %3433 = load i8, ptr %3432, align 1, !tbaa !56
  br label %3392, !llvm.loop !339

3434:                                             ; preds = %3401, %3389, %3369, %3369
  %3435 = phi i8 [ %3375, %3369 ], [ %3375, %3369 ], [ %3375, %3389 ], [ %3404, %3401 ]
  %3436 = phi ptr [ %3370, %3369 ], [ %3370, %3369 ], [ %3370, %3389 ], [ %3394, %3401 ]
  %3437 = icmp eq i8 %3435, 31
  br i1 %3437, label %3438, label %3442

3438:                                             ; preds = %3434
  %3439 = load i8, ptr %52, align 1, !tbaa !30, !range !42, !noundef !43
  %3440 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %3441 = call fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef nonnull %3436, ptr noundef nonnull %207, ptr noundef nonnull %209, ptr noundef nonnull %208, ptr noundef nonnull %210, i8 %3439, i8 %3440)
  br i1 %3441, label %3442, label %4914

3442:                                             ; preds = %3406, %3438, %3434, %3383, %3385, %3362
  %3443 = icmp slt i32 %3364, 0
  br i1 %3443, label %3467, label %3444

3444:                                             ; preds = %3442
  %3445 = load i32, ptr %207, align 8, !tbaa !5
  %3446 = icmp eq i32 %3445, -1000
  br i1 %3446, label %3467, label %3447

3447:                                             ; preds = %3444
  %3448 = icmp ugt i32 %3364, 127
  %3449 = and i1 %23, %3448
  br i1 %3449, label %3450, label %3462

3450:                                             ; preds = %3447
  %3451 = load i8, ptr %3365, align 1, !tbaa !5
  %3452 = zext i8 %3451 to i64
  %3453 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3452
  %3454 = load i8, ptr %3453, align 1, !tbaa !5
  %3455 = zext i8 %3454 to i64
  %3456 = call i32 @bcmp(ptr nonnull %3365, ptr nonnull %209, i64 %3455)
  %3457 = icmp eq i32 %3456, 0
  br i1 %3457, label %3467, label %3458

3458:                                             ; preds = %3450
  %3459 = call i32 @bcmp(ptr nonnull %3365, ptr nonnull %210, i64 %3455)
  %3460 = icmp eq i32 %3459, 0
  br i1 %3460, label %3467, label %3461

3461:                                             ; preds = %3458, %3464
  br label %211

3462:                                             ; preds = %3447
  %3463 = icmp eq i32 %3364, %3445
  br i1 %3463, label %3467, label %3464

3464:                                             ; preds = %3462
  %3465 = load i32, ptr %208, align 4, !tbaa !5
  %3466 = icmp eq i32 %3364, %3465
  br i1 %3466, label %3467, label %3461

3467:                                             ; preds = %3458, %3450, %3464, %3462, %3444, %3442
  %3468 = load ptr, ptr %200, align 8, !tbaa !5
  %3469 = load i8, ptr %3468, align 2, !tbaa !76
  %3470 = icmp eq i8 %3469, 0
  br i1 %3470, label %3566, label %3471

3471:                                             ; preds = %3467
  %3472 = zext i8 %3469 to i32
  %3473 = load i32, ptr %199, align 8, !tbaa !5
  %3474 = icmp eq i32 %3473, 0
  br i1 %3474, label %3550, label %3475

3475:                                             ; preds = %3471
  %3476 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %3477 = icmp eq i8 %3476, 0
  %3478 = load i32, ptr %201, align 4, !tbaa !5
  %3479 = sub nsw i32 0, %3478
  %3480 = sext i32 %3479 to i64
  br i1 %3477, label %3532, label %3481

3481:                                             ; preds = %3475
  %3482 = icmp slt i32 %3478, 1
  %3483 = select i1 %3482, ptr %58, ptr %59
  %3484 = load ptr, ptr %3483, align 8, !tbaa !35
  %3485 = ptrtoint ptr %3484 to i64
  br i1 %3482, label %3488, label %3486

3486:                                             ; preds = %3481
  %3487 = icmp ugt ptr %3365, %3484
  br i1 %3487, label %3505, label %3534

3488:                                             ; preds = %3481
  %3489 = icmp ne i32 %3478, 0
  %3490 = icmp ult ptr %3365, %3484
  %3491 = and i1 %3489, %3490
  br i1 %3491, label %3492, label %3534

3492:                                             ; preds = %3488, %3492
  %3493 = phi ptr [ %3501, %3492 ], [ %3365, %3488 ]
  %3494 = phi i64 [ %3495, %3492 ], [ %3480, %3488 ]
  %3495 = add nsw i64 %3494, -1
  %3496 = load i8, ptr %3493, align 1, !tbaa !5
  %3497 = zext i8 %3496 to i64
  %3498 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3497
  %3499 = load i8, ptr %3498, align 1, !tbaa !5
  %3500 = zext i8 %3499 to i64
  %3501 = getelementptr inbounds i8, ptr %3493, i64 %3500
  %3502 = icmp ne i64 %3495, 0
  %3503 = icmp ult ptr %3501, %3484
  %3504 = select i1 %3502, i1 %3503, i1 false
  br i1 %3504, label %3492, label %3534, !llvm.loop !44

3505:                                             ; preds = %3486, %3527
  %3506 = phi i64 [ %3508, %3527 ], [ %3480, %3486 ]
  %3507 = phi ptr [ %3528, %3527 ], [ %3365, %3486 ]
  %3508 = add nsw i64 %3506, 1
  %3509 = getelementptr inbounds i8, ptr %3507, i64 -1
  %3510 = load i8, ptr %3509, align 1, !tbaa !5
  %3511 = icmp slt i8 %3510, 0
  %3512 = icmp ugt ptr %3509, %3484
  %3513 = and i1 %3511, %3512
  br i1 %3513, label %3514, label %3527

3514:                                             ; preds = %3505
  %3515 = ptrtoint ptr %3507 to i64
  %3516 = getelementptr i8, ptr %3507, i64 %3485
  %3517 = sub i64 0, %3515
  %3518 = getelementptr i8, ptr %3516, i64 %3517
  br label %3519

3519:                                             ; preds = %3524, %3514
  %3520 = phi ptr [ %3525, %3524 ], [ %3509, %3514 ]
  %3521 = load i8, ptr %3520, align 1, !tbaa !5
  %3522 = and i8 %3521, -64
  %3523 = icmp eq i8 %3522, -128
  br i1 %3523, label %3524, label %3527

3524:                                             ; preds = %3519
  %3525 = getelementptr inbounds i8, ptr %3520, i64 -1
  %3526 = icmp ugt ptr %3525, %3484
  br i1 %3526, label %3519, label %3527, !llvm.loop !46

3527:                                             ; preds = %3524, %3519, %3505
  %3528 = phi ptr [ %3509, %3505 ], [ %3520, %3519 ], [ %3518, %3524 ]
  %3529 = icmp ne i64 %3508, 0
  %3530 = icmp ugt ptr %3528, %3484
  %3531 = and i1 %3529, %3530
  br i1 %3531, label %3505, label %3534, !llvm.loop !47

3532:                                             ; preds = %3475
  %3533 = getelementptr inbounds i8, ptr %3365, i64 %3480
  br label %3534

3534:                                             ; preds = %3527, %3492, %3488, %3486, %3532
  %3535 = phi ptr [ %3533, %3532 ], [ %3365, %3488 ], [ %3365, %3486 ], [ %3501, %3492 ], [ %3528, %3527 ]
  %3536 = load ptr, ptr %59, align 8, !tbaa !26
  %3537 = ptrtoint ptr %3535 to i64
  %3538 = ptrtoint ptr %3536 to i64
  %3539 = sub i64 %3537, %3538
  %3540 = load ptr, ptr %195, align 8, !tbaa !64
  %3541 = zext i8 %3469 to i64
  %3542 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3540, i64 %3541
  store i64 %3539, ptr %3542, align 8, !tbaa !65
  %3543 = ptrtoint ptr %3365 to i64
  %3544 = sub i64 %3543, %3538
  %3545 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3540, i64 %3541, i32 1
  store i64 %3544, ptr %3545, align 8, !tbaa !74
  %3546 = load i32, ptr %193, align 8, !tbaa !67
  %3547 = icmp ult i32 %3546, %3472
  br i1 %3547, label %3548, label %3549

3548:                                             ; preds = %3534
  store i32 %3472, ptr %193, align 8, !tbaa !67
  br label %3549

3549:                                             ; preds = %3548, %3534
  store i32 %3472, ptr %197, align 4, !tbaa !68
  br label %3554

3550:                                             ; preds = %3471
  %3551 = load ptr, ptr %195, align 8, !tbaa !64
  %3552 = zext i8 %3469 to i64
  %3553 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3551, i64 %3552, i32 1
  store i64 -1, ptr %3553, align 8, !tbaa !74
  br label %3554

3554:                                             ; preds = %3550, %3549
  br i1 %202, label %3566, label %3555

3555:                                             ; preds = %3554
  %3556 = load i32, ptr %203, align 8, !tbaa !5
  %3557 = icmp eq i32 %3556, 0
  br i1 %3557, label %3566, label %3558

3558:                                             ; preds = %3555
  %3559 = load ptr, ptr %200, align 8, !tbaa !5
  %3560 = load i8, ptr %3559, align 2, !tbaa !76
  %3561 = zext i8 %3560 to i32
  %3562 = icmp eq i32 %3556, %3561
  br i1 %3562, label %3563, label %3566

3563:                                             ; preds = %3558
  %3564 = load i32, ptr %199, align 8, !tbaa !5
  %3565 = icmp eq i32 %3564, 0
  br i1 %3565, label %4918, label %4347

3566:                                             ; preds = %3554, %3555, %3558, %3467
  %3567 = phi ptr [ null, %3554 ], [ %180, %3555 ], [ %180, %3558 ], [ %180, %3467 ]
  %3568 = load ptr, ptr %206, align 8, !tbaa !5
  store i32 114, ptr %188, align 8, !tbaa !276
  br label %4778

3569:                                             ; preds = %221
  %3570 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3571 = load i32, ptr %192, align 8, !tbaa !5
  %3572 = icmp sgt i32 %3570, %3571
  br i1 %3572, label %3573, label %3574

3573:                                             ; preds = %3569
  call void @Perl_leave_scope(i32 noundef %3571) #12
  br label %3574

3574:                                             ; preds = %3573, %3569
  %3575 = load i32, ptr %193, align 8, !tbaa !67
  %3576 = load i32, ptr %194, align 4, !tbaa !5
  %3577 = icmp ugt i32 %3575, %3576
  br i1 %3577, label %3578, label %3587

3578:                                             ; preds = %3574
  %3579 = load ptr, ptr %195, align 8, !tbaa !64
  br label %3580

3580:                                             ; preds = %3578, %3580
  %3581 = phi i32 [ %3575, %3578 ], [ %3584, %3580 ]
  %3582 = zext i32 %3581 to i64
  %3583 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3579, i64 %3582, i32 1
  store i64 -1, ptr %3583, align 8, !tbaa !74
  %3584 = add i32 %3581, -1
  %3585 = load i32, ptr %194, align 4, !tbaa !5
  %3586 = icmp ugt i32 %3584, %3585
  br i1 %3586, label %3580, label %3587, !llvm.loop !340

3587:                                             ; preds = %3580, %3574
  %3588 = phi i32 [ %3575, %3574 ], [ %3584, %3580 ]
  store i32 %3588, ptr %193, align 8, !tbaa !67
  %3589 = load i32, ptr %196, align 8, !tbaa !5
  store i32 %3589, ptr %197, align 4, !tbaa !68
  %3590 = load i8, ptr %198, align 4, !tbaa !5, !range !42, !noundef !43
  %3591 = icmp eq i8 %3590, 0
  br i1 %3591, label %3601, label %3592

3592:                                             ; preds = %3587
  %3593 = load ptr, ptr %200, align 8, !tbaa !5
  %3594 = getelementptr inbounds %struct.regnode_2, ptr %3593, i64 0, i32 4
  %3595 = load i16, ptr %3594, align 2, !tbaa !334
  %3596 = icmp eq i16 %3595, 32767
  br i1 %3596, label %3275, label %3597

3597:                                             ; preds = %3592
  %3598 = zext i16 %3595 to i32
  %3599 = load i32, ptr %199, align 8, !tbaa !5
  %3600 = icmp eq i32 %3599, %3598
  br i1 %3600, label %4918, label %3275

3601:                                             ; preds = %3587
  %3602 = load i32, ptr %199, align 8, !tbaa !5
  %3603 = load ptr, ptr %200, align 8, !tbaa !5
  %3604 = getelementptr inbounds %struct.regnode_2, ptr %3603, i64 0, i32 3
  %3605 = load i16, ptr %3604, align 2, !tbaa !332
  %3606 = zext i16 %3605 to i32
  %3607 = icmp eq i32 %3602, %3606
  br i1 %3607, label %4914, label %3608

3608:                                             ; preds = %3601
  %3609 = add nsw i32 %3602, -1
  store i32 %3609, ptr %199, align 8, !tbaa !5
  %3610 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %3611 = icmp eq i8 %3610, 0
  %3612 = load i32, ptr %201, align 4, !tbaa !5
  %3613 = sub nsw i32 0, %3612
  %3614 = sext i32 %3613 to i64
  br i1 %3611, label %3666, label %3615

3615:                                             ; preds = %3608
  %3616 = icmp slt i32 %3612, 1
  %3617 = select i1 %3616, ptr %58, ptr %59
  %3618 = load ptr, ptr %3617, align 8, !tbaa !35
  %3619 = ptrtoint ptr %3618 to i64
  br i1 %3616, label %3622, label %3620

3620:                                             ; preds = %3615
  %3621 = icmp ugt ptr %214, %3618
  br i1 %3621, label %3639, label %3668

3622:                                             ; preds = %3615
  %3623 = icmp ne i32 %3612, 0
  %3624 = icmp ult ptr %214, %3618
  %3625 = and i1 %3623, %3624
  br i1 %3625, label %3626, label %3668

3626:                                             ; preds = %3622, %3626
  %3627 = phi ptr [ %3635, %3626 ], [ %214, %3622 ]
  %3628 = phi i64 [ %3629, %3626 ], [ %3614, %3622 ]
  %3629 = add nsw i64 %3628, -1
  %3630 = load i8, ptr %3627, align 1, !tbaa !5
  %3631 = zext i8 %3630 to i64
  %3632 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3631
  %3633 = load i8, ptr %3632, align 1, !tbaa !5
  %3634 = zext i8 %3633 to i64
  %3635 = getelementptr inbounds i8, ptr %3627, i64 %3634
  %3636 = icmp ne i64 %3629, 0
  %3637 = icmp ult ptr %3635, %3618
  %3638 = select i1 %3636, i1 %3637, i1 false
  br i1 %3638, label %3626, label %3668, !llvm.loop !44

3639:                                             ; preds = %3620, %3661
  %3640 = phi i64 [ %3642, %3661 ], [ %3614, %3620 ]
  %3641 = phi ptr [ %3662, %3661 ], [ %214, %3620 ]
  %3642 = add nsw i64 %3640, 1
  %3643 = getelementptr inbounds i8, ptr %3641, i64 -1
  %3644 = load i8, ptr %3643, align 1, !tbaa !5
  %3645 = icmp slt i8 %3644, 0
  %3646 = icmp ugt ptr %3643, %3618
  %3647 = and i1 %3645, %3646
  br i1 %3647, label %3648, label %3661

3648:                                             ; preds = %3639
  %3649 = ptrtoint ptr %3641 to i64
  %3650 = getelementptr i8, ptr %3641, i64 %3619
  %3651 = sub i64 0, %3649
  %3652 = getelementptr i8, ptr %3650, i64 %3651
  br label %3653

3653:                                             ; preds = %3658, %3648
  %3654 = phi ptr [ %3659, %3658 ], [ %3643, %3648 ]
  %3655 = load i8, ptr %3654, align 1, !tbaa !5
  %3656 = and i8 %3655, -64
  %3657 = icmp eq i8 %3656, -128
  br i1 %3657, label %3658, label %3661

3658:                                             ; preds = %3653
  %3659 = getelementptr inbounds i8, ptr %3654, i64 -1
  %3660 = icmp ugt ptr %3659, %3618
  br i1 %3660, label %3653, label %3661, !llvm.loop !46

3661:                                             ; preds = %3658, %3653, %3639
  %3662 = phi ptr [ %3643, %3639 ], [ %3654, %3653 ], [ %3652, %3658 ]
  %3663 = icmp ne i64 %3642, 0
  %3664 = icmp ugt ptr %3662, %3618
  %3665 = and i1 %3663, %3664
  br i1 %3665, label %3639, label %3668, !llvm.loop !47

3666:                                             ; preds = %3608
  %3667 = getelementptr inbounds i8, ptr %214, i64 %3614
  br label %3668

3668:                                             ; preds = %3661, %3626, %3622, %3620, %3666
  %3669 = phi ptr [ %3667, %3666 ], [ %214, %3622 ], [ %214, %3620 ], [ %3635, %3626 ], [ %3662, %3661 ]
  %3670 = load ptr, ptr %58, align 8, !tbaa !27
  %3671 = icmp ult ptr %3669, %3670
  br i1 %3671, label %3672, label %3362

3672:                                             ; preds = %3668
  %3673 = load i8, ptr %3669, align 1, !tbaa !5
  %3674 = zext i8 %3673 to i32
  br label %3362

3675:                                             ; preds = %221
  %3676 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 0, ptr %3676, align 8, !tbaa !5
  %3677 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 0, ptr %3677, align 4, !tbaa !5
  store i32 32767, ptr %206, align 8, !tbaa !5
  %3678 = getelementptr inbounds %struct.regnode, ptr %215, i64 1
  br label %3717

3679:                                             ; preds = %221
  %3680 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 0, ptr %3680, align 8, !tbaa !5
  %3681 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 1, ptr %3681, align 4, !tbaa !5
  store i32 32767, ptr %206, align 8, !tbaa !5
  %3682 = getelementptr inbounds %struct.regnode, ptr %215, i64 1
  br label %3717

3683:                                             ; preds = %221
  %3684 = load i8, ptr %215, align 2, !tbaa !76
  %3685 = zext i8 %3684 to i32
  %3686 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 %3685, ptr %3686, align 8, !tbaa !5
  %3687 = load i32, ptr %193, align 8, !tbaa !67
  store i32 %3687, ptr %207, align 8, !tbaa !5
  %3688 = load i32, ptr %197, align 4, !tbaa !68
  store i32 %3688, ptr %208, align 4, !tbaa !5
  %3689 = load i32, ptr %4, align 4, !tbaa !73
  %3690 = call i32 @llvm.umax.i32(i32 %3689, i32 %3685)
  store i32 %3690, ptr %4, align 4
  %3691 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 3
  %3692 = load i16, ptr %3691, align 2, !tbaa !332
  %3693 = zext i16 %3692 to i32
  %3694 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 %3693, ptr %3694, align 4, !tbaa !5
  %3695 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 4
  %3696 = load i16, ptr %3695, align 2, !tbaa !334
  %3697 = zext i16 %3696 to i32
  store i32 %3697, ptr %206, align 8, !tbaa !5
  br i1 %202, label %3704, label %3698

3698:                                             ; preds = %3683
  %3699 = load i32, ptr %203, align 8, !tbaa !5
  %3700 = icmp ne i32 %3699, 0
  %3701 = icmp eq i32 %3699, %3685
  %3702 = select i1 %3700, i1 %3701, i1 false
  br i1 %3702, label %3703, label %3704

3703:                                             ; preds = %3698
  store i32 1, ptr %3694, align 4, !tbaa !5
  store i32 1, ptr %206, align 8, !tbaa !5
  br label %3704

3704:                                             ; preds = %3703, %3698, %3683
  %3705 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  %3706 = call ptr @Perl_regnext(ptr noundef nonnull %3705) #12
  br label %3717

3707:                                             ; preds = %221
  %3708 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store i32 0, ptr %3708, align 8, !tbaa !5
  %3709 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 3
  %3710 = load i16, ptr %3709, align 2, !tbaa !332
  %3711 = zext i16 %3710 to i32
  %3712 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  store i32 %3711, ptr %3712, align 4, !tbaa !5
  %3713 = getelementptr inbounds %struct.regnode_2, ptr %215, i64 0, i32 4
  %3714 = load i16, ptr %3713, align 2, !tbaa !334
  %3715 = zext i16 %3714 to i32
  store i32 %3715, ptr %206, align 8, !tbaa !5
  %3716 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  br label %3717

3717:                                             ; preds = %3707, %3704, %3679, %3675
  %3718 = phi ptr [ %3716, %3707 ], [ %3706, %3704 ], [ %3682, %3679 ], [ %3678, %3675 ]
  %3719 = getelementptr inbounds %struct.regnode, ptr %186, i64 0, i32 1
  %3720 = load i8, ptr %3719, align 1, !tbaa !56
  %3721 = zext i8 %3720 to i64
  %3722 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3721
  %3723 = load i8, ptr %3722, align 1, !tbaa !5
  switch i8 %3723, label %3724 [
    i8 31, label %3782
    i8 51, label %3782
  ]

3724:                                             ; preds = %3717
  switch i8 %3720, label %3731 [
    i8 49, label %3737
    i8 50, label %3725
    i8 68, label %3737
    i8 65, label %3737
    i8 63, label %3737
    i8 43, label %3737
    i8 69, label %3737
    i8 90, label %3737
  ]

3725:                                             ; preds = %3724
  br i1 %202, label %3737, label %3726

3726:                                             ; preds = %3725
  %3727 = load i32, ptr %203, align 8, !tbaa !5
  %3728 = getelementptr inbounds %struct.regnode_1, ptr %186, i64 0, i32 3
  %3729 = load i32, ptr %3728, align 4, !tbaa !162
  %3730 = icmp eq i32 %3727, %3729
  br i1 %3730, label %3731, label %3737

3731:                                             ; preds = %3724, %3726
  %3732 = icmp eq i8 %3723, 44
  br i1 %3732, label %3733, label %3792

3733:                                             ; preds = %3731
  %3734 = getelementptr inbounds %struct.regnode_2, ptr %186, i64 0, i32 3
  %3735 = load i16, ptr %3734, align 2, !tbaa !332
  %3736 = icmp eq i16 %3735, 0
  br i1 %3736, label %3792, label %3739

3737:                                             ; preds = %3724, %3724, %3724, %3724, %3724, %3724, %3724, %3726, %3725
  %3738 = icmp eq i8 %3723, 31
  br i1 %3738, label %3782, label %3739

3739:                                             ; preds = %3737, %3733
  br label %3740

3740:                                             ; preds = %3739, %3777
  %3741 = phi i8 [ %3781, %3777 ], [ %3720, %3739 ]
  %3742 = phi ptr [ %3779, %3777 ], [ %186, %3739 ]
  switch i8 %3741, label %3749 [
    i8 49, label %3760
    i8 50, label %3743
    i8 65, label %3777
    i8 43, label %3760
    i8 63, label %3760
    i8 68, label %3760
    i8 69, label %3760
    i8 90, label %3760
  ]

3743:                                             ; preds = %3740
  br i1 %202, label %3760, label %3744

3744:                                             ; preds = %3743
  %3745 = load i32, ptr %203, align 8, !tbaa !5
  %3746 = getelementptr inbounds %struct.regnode_1, ptr %3742, i64 0, i32 3
  %3747 = load i32, ptr %3746, align 4, !tbaa !162
  %3748 = icmp eq i32 %3745, %3747
  br i1 %3748, label %3749, label %3760

3749:                                             ; preds = %3740, %3744
  %3750 = zext i8 %3741 to i64
  %3751 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3750
  %3752 = load i8, ptr %3751, align 1, !tbaa !5
  %3753 = icmp eq i8 %3752, 44
  br i1 %3753, label %3754, label %3782

3754:                                             ; preds = %3749
  %3755 = getelementptr inbounds %struct.regnode_2, ptr %3742, i64 0, i32 3
  %3756 = load i16, ptr %3755, align 2, !tbaa !332
  %3757 = icmp eq i16 %3756, 0
  br i1 %3757, label %3792, label %3758

3758:                                             ; preds = %3754
  %3759 = icmp eq i8 %3741, 65
  br i1 %3759, label %3777, label %3760

3760:                                             ; preds = %3740, %3740, %3740, %3740, %3740, %3740, %3743, %3744, %3758
  %3761 = zext i8 %3741 to i64
  %3762 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3761
  %3763 = load i8, ptr %3762, align 1, !tbaa !5
  %3764 = icmp eq i8 %3763, 44
  br i1 %3764, label %3777, label %3765

3765:                                             ; preds = %3760
  switch i8 %3741, label %3773 [
    i8 43, label %3777
    i8 63, label %3766
  ]

3766:                                             ; preds = %3765
  %3767 = load i8, ptr %3742, align 2, !tbaa !76
  %3768 = icmp eq i8 %3767, 0
  br i1 %3768, label %3777, label %3769

3769:                                             ; preds = %3766
  %3770 = getelementptr inbounds %struct.regnode_1, ptr %3742, i64 0, i32 3
  %3771 = load i32, ptr %3770, align 4, !tbaa !162
  %3772 = zext i32 %3771 to i64
  br label %3777

3773:                                             ; preds = %3765
  %3774 = getelementptr inbounds %struct.regnode, ptr %3742, i64 0, i32 2
  %3775 = load i16, ptr %3774, align 2, !tbaa !275
  %3776 = zext i16 %3775 to i64
  br label %3777

3777:                                             ; preds = %3766, %3765, %3758, %3760, %3740, %3769, %3773
  %3778 = phi i64 [ %3772, %3769 ], [ %3776, %3773 ], [ 2, %3740 ], [ 2, %3760 ], [ 2, %3758 ], [ 1, %3765 ], [ 2, %3766 ]
  %3779 = getelementptr inbounds %struct.regnode, ptr %3742, i64 %3778
  %3780 = getelementptr inbounds %struct.regnode, ptr %3742, i64 %3778, i32 1
  %3781 = load i8, ptr %3780, align 1, !tbaa !56
  br label %3740, !llvm.loop !341

3782:                                             ; preds = %3749, %3737, %3717, %3717
  %3783 = phi i8 [ %3723, %3717 ], [ %3723, %3717 ], [ %3723, %3737 ], [ %3752, %3749 ]
  %3784 = phi ptr [ %186, %3717 ], [ %186, %3717 ], [ %186, %3737 ], [ %3742, %3749 ]
  %3785 = icmp eq i8 %3783, 31
  br i1 %3785, label %3786, label %3792

3786:                                             ; preds = %3782
  %3787 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13
  %3788 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 14
  %3789 = load i8, ptr %52, align 1, !tbaa !30, !range !42, !noundef !43
  %3790 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %3791 = call fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef nonnull %3784, ptr noundef nonnull %192, ptr noundef nonnull %3787, ptr noundef nonnull %194, ptr noundef nonnull %3788, i8 %3789, i8 %3790)
  br i1 %3791, label %3793, label %4918

3792:                                             ; preds = %3754, %3782, %3731, %3733
  store i32 -1000, ptr %194, align 4, !tbaa !5
  store i32 -1000, ptr %192, align 8, !tbaa !5
  br label %3793

3793:                                             ; preds = %3792, %3786
  store ptr %3718, ptr %200, align 8, !tbaa !5
  store ptr %186, ptr %209, align 8, !tbaa !5
  %3794 = and i8 %212, 1
  %3795 = icmp eq i8 %3794, 0
  br i1 %3795, label %3860, label %3796

3796:                                             ; preds = %3793
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #12
  store ptr %214, ptr %17, align 8, !tbaa !35
  %3797 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  %3798 = load i32, ptr %3797, align 4, !tbaa !5
  %3799 = icmp eq i32 %3798, 0
  br i1 %3799, label %3806, label %3800

3800:                                             ; preds = %3796
  %3801 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %17, ptr noundef %3718, ptr noundef nonnull %0, i32 noundef %3798)
  %3802 = load i32, ptr %3797, align 4, !tbaa !5
  %3803 = icmp slt i32 %3801, %3802
  br i1 %3803, label %3859, label %3804

3804:                                             ; preds = %3800
  %3805 = load ptr, ptr %17, align 8, !tbaa !35
  br label %3806

3806:                                             ; preds = %3804, %3796
  %3807 = phi i32 [ %3802, %3804 ], [ 0, %3796 ]
  %3808 = phi ptr [ %3805, %3804 ], [ %214, %3796 ]
  store i32 %3807, ptr %205, align 8, !tbaa !5
  %3809 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3810 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  store i32 %3809, ptr %3810, align 4, !tbaa !5
  %3811 = load i32, ptr %192, align 8, !tbaa !5
  %3812 = icmp eq i32 %3811, -1000
  br i1 %3812, label %3813, label %3814

3813:                                             ; preds = %3806
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  br label %4119

3814:                                             ; preds = %3806
  store ptr %3808, ptr %199, align 8, !tbaa !5
  %3815 = load i32, ptr %206, align 8, !tbaa !5
  %3816 = icmp eq i32 %3815, 32767
  br i1 %3816, label %3817, label %3830

3817:                                             ; preds = %3814
  %3818 = load ptr, ptr %58, align 8, !tbaa !27
  %3819 = getelementptr inbounds i8, ptr %3818, i64 -1
  store ptr %3819, ptr %196, align 8, !tbaa !5
  br i1 %23, label %3820, label %3858

3820:                                             ; preds = %3817
  %3821 = load i8, ptr %3819, align 1, !tbaa !5
  %3822 = and i8 %3821, -64
  %3823 = icmp eq i8 %3822, -128
  br i1 %3823, label %3824, label %3858

3824:                                             ; preds = %3820, %3824
  %3825 = phi ptr [ %3826, %3824 ], [ %3819, %3820 ]
  %3826 = getelementptr inbounds i8, ptr %3825, i64 -1
  store ptr %3826, ptr %196, align 8, !tbaa !5
  %3827 = load i8, ptr %3826, align 1, !tbaa !5
  %3828 = and i8 %3827, -64
  %3829 = icmp eq i8 %3828, -128
  br i1 %3829, label %3824, label %3858, !llvm.loop !342

3830:                                             ; preds = %3814
  br i1 %23, label %3831, label %3848

3831:                                             ; preds = %3830
  %3832 = sub nsw i32 %3815, %3807
  store ptr %3808, ptr %196, align 8, !tbaa !5
  %3833 = icmp sgt i32 %3832, 0
  br i1 %3833, label %3834, label %3858

3834:                                             ; preds = %3831, %3839
  %3835 = phi ptr [ %3845, %3839 ], [ %3808, %3831 ]
  %3836 = phi i32 [ %3846, %3839 ], [ %3832, %3831 ]
  %3837 = load ptr, ptr %58, align 8, !tbaa !27
  %3838 = icmp ult ptr %3835, %3837
  br i1 %3838, label %3839, label %3858

3839:                                             ; preds = %3834
  %3840 = load i8, ptr %3835, align 1, !tbaa !5
  %3841 = zext i8 %3840 to i64
  %3842 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3841
  %3843 = load i8, ptr %3842, align 1, !tbaa !5
  %3844 = zext i8 %3843 to i64
  %3845 = getelementptr inbounds i8, ptr %3835, i64 %3844
  store ptr %3845, ptr %196, align 8, !tbaa !5
  %3846 = add nsw i32 %3836, -1
  %3847 = icmp sgt i32 %3836, 1
  br i1 %3847, label %3834, label %3858, !llvm.loop !343

3848:                                             ; preds = %3830
  %3849 = sext i32 %3815 to i64
  %3850 = getelementptr inbounds i8, ptr %3808, i64 %3849
  %3851 = sext i32 %3807 to i64
  %3852 = sub nsw i64 0, %3851
  %3853 = getelementptr inbounds i8, ptr %3850, i64 %3852
  store ptr %3853, ptr %196, align 8, !tbaa !5
  %3854 = load ptr, ptr %58, align 8, !tbaa !27
  %3855 = icmp ult ptr %3853, %3854
  br i1 %3855, label %3858, label %3856

3856:                                             ; preds = %3848
  %3857 = getelementptr inbounds i8, ptr %3854, i64 -1
  store ptr %3857, ptr %196, align 8, !tbaa !5
  br label %3858

3858:                                             ; preds = %3839, %3834, %3824, %3831, %3820, %3856, %3848, %3817
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  br label %3932

3859:                                             ; preds = %3800
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #12
  br label %4918

3860:                                             ; preds = %3793
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #12
  store ptr %214, ptr %18, align 8, !tbaa !35
  %3861 = load i32, ptr %206, align 8, !tbaa !5
  %3862 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %18, ptr noundef %3718, ptr noundef nonnull %0, i32 noundef %3861)
  store i32 %3862, ptr %205, align 8, !tbaa !5
  %3863 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  %3864 = load i32, ptr %3863, align 4, !tbaa !5
  %3865 = icmp slt i32 %3862, %3864
  br i1 %3865, label %3891, label %3866

3866:                                             ; preds = %3860
  %3867 = load ptr, ptr %18, align 8, !tbaa !35
  %3868 = icmp sgt i32 %3862, %3864
  br i1 %3868, label %3869, label %3888

3869:                                             ; preds = %3866
  %3870 = load ptr, ptr %209, align 8, !tbaa !5
  %3871 = getelementptr inbounds %struct.regnode, ptr %3870, i64 0, i32 1
  %3872 = load i8, ptr %3871, align 1, !tbaa !56
  %3873 = zext i8 %3872 to i64
  %3874 = getelementptr inbounds [0 x i8], ptr @PL_regkind, i64 0, i64 %3873
  %3875 = load i8, ptr %3874, align 1, !tbaa !5
  %3876 = icmp ne i8 %3875, 4
  %3877 = icmp eq i8 %3872, 5
  %3878 = or i1 %3877, %3876
  br i1 %3878, label %3888, label %3879

3879:                                             ; preds = %3869
  store i32 %3862, ptr %3863, align 4, !tbaa !5
  %3880 = getelementptr inbounds i8, ptr %3867, i64 -1
  %3881 = load i8, ptr %3880, align 1, !tbaa !5
  %3882 = icmp eq i8 %3881, 10
  br i1 %3882, label %3883, label %3888

3883:                                             ; preds = %3879
  %3884 = load i8, ptr %3871, align 1, !tbaa !56
  %3885 = icmp eq i8 %3884, 6
  br i1 %3885, label %3888, label %3886

3886:                                             ; preds = %3883
  %3887 = add nsw i32 %3862, -1
  store i32 %3887, ptr %3863, align 4, !tbaa !5
  br label %3888

3888:                                             ; preds = %3879, %3883, %3886, %3869, %3866
  %3889 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3890 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  store i32 %3889, ptr %3890, align 4, !tbaa !5
  br label %3891

3891:                                             ; preds = %3860, %3888
  %3892 = phi i32 [ 116, %3888 ], [ 6, %3860 ]
  %3893 = phi ptr [ %3867, %3888 ], [ %214, %3860 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #12
  switch i32 %3892, label %5068 [
    i32 116, label %4175
    i32 6, label %4918
  ]

3894:                                             ; preds = %221
  %3895 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %3896 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %3897 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  %3898 = load i32, ptr %3897, align 4, !tbaa !5
  %3899 = icmp sgt i32 %3895, %3898
  br i1 %3899, label %3900, label %3901

3900:                                             ; preds = %3894
  call void @Perl_leave_scope(i32 noundef %3898) #12
  br label %3901

3901:                                             ; preds = %3900, %3894
  %3902 = load i32, ptr %3896, align 8, !tbaa !5
  %3903 = icmp eq i32 %3902, 0
  br i1 %3903, label %3920, label %3904

3904:                                             ; preds = %3901
  %3905 = load i32, ptr %193, align 8, !tbaa !67
  %3906 = load i32, ptr %207, align 8, !tbaa !5
  %3907 = icmp ugt i32 %3905, %3906
  br i1 %3907, label %3908, label %3917

3908:                                             ; preds = %3904
  %3909 = load ptr, ptr %195, align 8, !tbaa !64
  br label %3910

3910:                                             ; preds = %3908, %3910
  %3911 = phi i32 [ %3905, %3908 ], [ %3914, %3910 ]
  %3912 = zext i32 %3911 to i64
  %3913 = getelementptr inbounds %struct.regexp_paren_pair, ptr %3909, i64 %3912, i32 1
  store i64 -1, ptr %3913, align 8, !tbaa !74
  %3914 = add i32 %3911, -1
  %3915 = load i32, ptr %207, align 8, !tbaa !5
  %3916 = icmp ugt i32 %3914, %3915
  br i1 %3916, label %3910, label %3917, !llvm.loop !344

3917:                                             ; preds = %3910, %3904
  %3918 = phi i32 [ %3905, %3904 ], [ %3914, %3910 ]
  store i32 %3918, ptr %193, align 8, !tbaa !67
  %3919 = load i32, ptr %208, align 4, !tbaa !5
  store i32 %3919, ptr %197, align 4, !tbaa !68
  br label %3920

3920:                                             ; preds = %3917, %3901
  store ptr %214, ptr %199, align 8, !tbaa !5
  br i1 %23, label %3921, label %3927

3921:                                             ; preds = %3920
  %3922 = load i8, ptr %214, align 1, !tbaa !5
  %3923 = zext i8 %3922 to i64
  %3924 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3923
  %3925 = load i8, ptr %3924, align 1, !tbaa !5
  %3926 = zext i8 %3925 to i64
  br label %3927

3927:                                             ; preds = %3920, %3921
  %3928 = phi i64 [ %3926, %3921 ], [ 1, %3920 ]
  %3929 = getelementptr inbounds i8, ptr %214, i64 %3928
  %3930 = load i32, ptr %205, align 8, !tbaa !5
  %3931 = add nsw i32 %3930, 1
  store i32 %3931, ptr %205, align 8, !tbaa !5
  br label %3932

3932:                                             ; preds = %3858, %3927
  %3933 = phi i32 [ %3931, %3927 ], [ %3807, %3858 ]
  %3934 = phi ptr [ %214, %3927 ], [ %3808, %3858 ]
  %3935 = phi i8 [ %212, %3927 ], [ 0, %3858 ]
  %3936 = phi ptr [ %3929, %3927 ], [ %3808, %3858 ]
  %3937 = phi ptr [ %215, %3927 ], [ %3718, %3858 ]
  br i1 %23, label %3938, label %3983

3938:                                             ; preds = %3932
  %3939 = icmp ne ptr %3934, %3936
  %3940 = zext i1 %3939 to i32
  %3941 = load i32, ptr %192, align 8, !tbaa !5
  %3942 = load i32, ptr %194, align 4, !tbaa !5
  %3943 = icmp eq i32 %3941, %3942
  %3944 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13
  br i1 %3943, label %3949, label %3945

3945:                                             ; preds = %3938
  %3946 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 14
  %3947 = load ptr, ptr %196, align 8, !tbaa !5
  %3948 = icmp ugt ptr %3936, %3947
  br i1 %3948, label %4015, label %3966

3949:                                             ; preds = %3938
  %3950 = load ptr, ptr %196, align 8, !tbaa !5
  %3951 = icmp ugt ptr %3936, %3950
  br i1 %3951, label %4015, label %3952

3952:                                             ; preds = %3949, %3962
  %3953 = phi i32 [ %3964, %3962 ], [ %3940, %3949 ]
  %3954 = phi ptr [ %3963, %3962 ], [ %3936, %3949 ]
  %3955 = load i8, ptr %3954, align 1, !tbaa !5
  %3956 = zext i8 %3955 to i64
  %3957 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3956
  %3958 = load i8, ptr %3957, align 1, !tbaa !5
  %3959 = zext i8 %3958 to i64
  %3960 = call i32 @bcmp(ptr nonnull %3954, ptr nonnull %3944, i64 %3959)
  %3961 = icmp eq i32 %3960, 0
  br i1 %3961, label %4015, label %3962

3962:                                             ; preds = %3952
  %3963 = getelementptr inbounds i8, ptr %3954, i64 %3959
  %3964 = add nuw nsw i32 %3953, 1
  %3965 = icmp ugt ptr %3963, %3950
  br i1 %3965, label %4015, label %3952, !llvm.loop !345

3966:                                             ; preds = %3945, %3979
  %3967 = phi i32 [ %3981, %3979 ], [ %3940, %3945 ]
  %3968 = phi ptr [ %3980, %3979 ], [ %3936, %3945 ]
  %3969 = load i8, ptr %3968, align 1, !tbaa !5
  %3970 = zext i8 %3969 to i64
  %3971 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %3970
  %3972 = load i8, ptr %3971, align 1, !tbaa !5
  %3973 = zext i8 %3972 to i64
  %3974 = call i32 @bcmp(ptr nonnull %3968, ptr nonnull %3944, i64 %3973)
  %3975 = icmp eq i32 %3974, 0
  br i1 %3975, label %4015, label %3976

3976:                                             ; preds = %3966
  %3977 = call i32 @bcmp(ptr nonnull %3968, ptr nonnull %3946, i64 %3973)
  %3978 = icmp eq i32 %3977, 0
  br i1 %3978, label %4015, label %3979

3979:                                             ; preds = %3976
  %3980 = getelementptr inbounds i8, ptr %3968, i64 %3973
  %3981 = add nuw nsw i32 %3967, 1
  %3982 = icmp ugt ptr %3980, %3947
  br i1 %3982, label %4015, label %3966, !llvm.loop !346

3983:                                             ; preds = %3932
  %3984 = load i32, ptr %192, align 8, !tbaa !5
  %3985 = load i32, ptr %194, align 4, !tbaa !5
  %3986 = icmp eq i32 %3984, %3985
  %3987 = load ptr, ptr %196, align 8, !tbaa !5
  %3988 = icmp ugt ptr %3936, %3987
  br i1 %3986, label %3990, label %3989

3989:                                             ; preds = %3983
  br i1 %3988, label %4009, label %3999

3990:                                             ; preds = %3983
  br i1 %3988, label %4009, label %3991

3991:                                             ; preds = %3990, %3996
  %3992 = phi ptr [ %3997, %3996 ], [ %3936, %3990 ]
  %3993 = load i8, ptr %3992, align 1, !tbaa !5
  %3994 = zext i8 %3993 to i32
  %3995 = icmp eq i32 %3984, %3994
  br i1 %3995, label %4009, label %3996

3996:                                             ; preds = %3991
  %3997 = getelementptr inbounds i8, ptr %3992, i64 1
  %3998 = icmp ugt ptr %3997, %3987
  br i1 %3998, label %4009, label %3991, !llvm.loop !347

3999:                                             ; preds = %3989, %4006
  %4000 = phi ptr [ %4007, %4006 ], [ %3936, %3989 ]
  %4001 = load i8, ptr %4000, align 1, !tbaa !5
  %4002 = zext i8 %4001 to i32
  %4003 = icmp eq i32 %3984, %4002
  %4004 = icmp eq i32 %3985, %4002
  %4005 = or i1 %4003, %4004
  br i1 %4005, label %4009, label %4006

4006:                                             ; preds = %3999
  %4007 = getelementptr inbounds i8, ptr %4000, i64 1
  %4008 = icmp ugt ptr %4007, %3987
  br i1 %4008, label %4009, label %3999, !llvm.loop !348

4009:                                             ; preds = %3999, %4006, %3996, %3991, %3989, %3990
  %4010 = phi ptr [ %3936, %3990 ], [ %3936, %3989 ], [ %3997, %3996 ], [ %3992, %3991 ], [ %4000, %3999 ], [ %4007, %4006 ]
  %4011 = ptrtoint ptr %4010 to i64
  %4012 = ptrtoint ptr %3934 to i64
  %4013 = sub i64 %4011, %4012
  %4014 = trunc i64 %4013 to i32
  br label %4015

4015:                                             ; preds = %3976, %3979, %3966, %3952, %3962, %3945, %3949, %4009
  %4016 = phi ptr [ %3987, %4009 ], [ %3950, %3949 ], [ %3947, %3945 ], [ %3950, %3962 ], [ %3950, %3952 ], [ %3947, %3966 ], [ %3947, %3979 ], [ %3947, %3976 ]
  %4017 = phi ptr [ %4010, %4009 ], [ %3936, %3949 ], [ %3936, %3945 ], [ %3954, %3952 ], [ %3963, %3962 ], [ %3968, %3976 ], [ %3980, %3979 ], [ %3968, %3966 ]
  %4018 = phi i32 [ %4014, %4009 ], [ %3940, %3949 ], [ %3940, %3945 ], [ %3953, %3952 ], [ %3964, %3962 ], [ %3967, %3976 ], [ %3981, %3979 ], [ %3967, %3966 ]
  %4019 = icmp ugt ptr %4017, %4016
  br i1 %4019, label %4918, label %4020

4020:                                             ; preds = %4015
  %4021 = icmp eq i32 %4018, 0
  br i1 %4021, label %4027, label %4022

4022:                                             ; preds = %4020
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #12
  store ptr %3934, ptr %19, align 8, !tbaa !35
  %4023 = add nsw i32 %3933, %4018
  store i32 %4023, ptr %205, align 8, !tbaa !5
  %4024 = load ptr, ptr %200, align 8, !tbaa !5
  %4025 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %19, ptr noundef %4024, ptr noundef nonnull %0, i32 noundef %4018)
  %4026 = icmp slt i32 %4025, %4018
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #12
  br i1 %4026, label %4918, label %4027

4027:                                             ; preds = %4022, %4020
  %4028 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4029 = load i32, ptr %4028, align 8, !tbaa !5
  %4030 = icmp eq i32 %4029, 0
  br i1 %4030, label %4070, label %4031

4031:                                             ; preds = %4027
  %4032 = load i32, ptr %205, align 8, !tbaa !5
  %4033 = icmp eq i32 %4032, 0
  br i1 %4033, label %4062, label %4034

4034:                                             ; preds = %4031
  %4035 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4036 = icmp eq i8 %4035, 0
  br i1 %4036, label %4040, label %4037

4037:                                             ; preds = %4034
  %4038 = load ptr, ptr %59, align 8, !tbaa !26
  %4039 = call fastcc ptr @S_reghop3(ptr noundef %4017, i64 noundef -1, ptr noundef %4038)
  br label %4043

4040:                                             ; preds = %4034
  %4041 = getelementptr inbounds i8, ptr %4017, i64 -1
  %4042 = load ptr, ptr %59, align 8, !tbaa !26
  br label %4043

4043:                                             ; preds = %4040, %4037
  %4044 = phi ptr [ %4038, %4037 ], [ %4042, %4040 ]
  %4045 = phi ptr [ %4039, %4037 ], [ %4041, %4040 ]
  %4046 = ptrtoint ptr %4045 to i64
  %4047 = ptrtoint ptr %4044 to i64
  %4048 = sub i64 %4046, %4047
  %4049 = load ptr, ptr %195, align 8, !tbaa !64
  %4050 = zext i32 %4029 to i64
  %4051 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4049, i64 %4050
  store i64 %4048, ptr %4051, align 8, !tbaa !65
  %4052 = ptrtoint ptr %4017 to i64
  %4053 = sub i64 %4052, %4047
  %4054 = load i32, ptr %4028, align 8, !tbaa !5
  %4055 = zext i32 %4054 to i64
  %4056 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4049, i64 %4055, i32 1
  store i64 %4053, ptr %4056, align 8, !tbaa !74
  %4057 = load i32, ptr %4028, align 8, !tbaa !5
  %4058 = load i32, ptr %193, align 8, !tbaa !67
  %4059 = icmp ugt i32 %4057, %4058
  br i1 %4059, label %4060, label %4068

4060:                                             ; preds = %4043
  store i32 %4057, ptr %193, align 8, !tbaa !67
  %4061 = load i32, ptr %4028, align 8, !tbaa !5
  br label %4068

4062:                                             ; preds = %4031
  %4063 = load ptr, ptr %195, align 8, !tbaa !64
  %4064 = zext i32 %4029 to i64
  %4065 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4063, i64 %4064, i32 1
  store i64 -1, ptr %4065, align 8, !tbaa !74
  %4066 = load i32, ptr %207, align 8, !tbaa !5
  store i32 %4066, ptr %193, align 8, !tbaa !67
  %4067 = load i32, ptr %208, align 4, !tbaa !5
  br label %4068

4068:                                             ; preds = %4043, %4060, %4062
  %4069 = phi i32 [ %4067, %4062 ], [ %4061, %4060 ], [ %4057, %4043 ]
  store i32 %4069, ptr %197, align 4, !tbaa !68
  br label %4070

4070:                                             ; preds = %4068, %4027
  br i1 %202, label %4077, label %4071

4071:                                             ; preds = %4070
  %4072 = load i32, ptr %203, align 8, !tbaa !5
  %4073 = icmp eq i32 %4072, 0
  br i1 %4073, label %4077, label %4074

4074:                                             ; preds = %4071
  %4075 = load i32, ptr %4028, align 8, !tbaa !5
  %4076 = icmp eq i32 %4072, %4075
  br i1 %4076, label %4347, label %4077

4077:                                             ; preds = %4070, %4071, %4074
  %4078 = load ptr, ptr %209, align 8, !tbaa !5
  store i32 118, ptr %188, align 8, !tbaa !276
  br label %4778

4079:                                             ; preds = %221
  %4080 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4081 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4082 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  %4083 = load i32, ptr %4082, align 4, !tbaa !5
  %4084 = icmp sgt i32 %4080, %4083
  br i1 %4084, label %4085, label %4086

4085:                                             ; preds = %4079
  call void @Perl_leave_scope(i32 noundef %4083) #12
  br label %4086

4086:                                             ; preds = %4085, %4079
  %4087 = load i32, ptr %4081, align 8, !tbaa !5
  %4088 = icmp eq i32 %4087, 0
  br i1 %4088, label %4105, label %4089

4089:                                             ; preds = %4086
  %4090 = load i32, ptr %193, align 8, !tbaa !67
  %4091 = load i32, ptr %207, align 8, !tbaa !5
  %4092 = icmp ugt i32 %4090, %4091
  br i1 %4092, label %4093, label %4102

4093:                                             ; preds = %4089
  %4094 = load ptr, ptr %195, align 8, !tbaa !64
  br label %4095

4095:                                             ; preds = %4093, %4095
  %4096 = phi i32 [ %4090, %4093 ], [ %4099, %4095 ]
  %4097 = zext i32 %4096 to i64
  %4098 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4094, i64 %4097, i32 1
  store i64 -1, ptr %4098, align 8, !tbaa !74
  %4099 = add i32 %4096, -1
  %4100 = load i32, ptr %207, align 8, !tbaa !5
  %4101 = icmp ugt i32 %4099, %4100
  br i1 %4101, label %4095, label %4102, !llvm.loop !349

4102:                                             ; preds = %4095, %4089
  %4103 = phi i32 [ %4090, %4089 ], [ %4099, %4095 ]
  store i32 %4103, ptr %193, align 8, !tbaa !67
  %4104 = load i32, ptr %208, align 4, !tbaa !5
  store i32 %4104, ptr %197, align 4, !tbaa !68
  br label %4105

4105:                                             ; preds = %4102, %4086
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20) #12
  store ptr %214, ptr %20, align 8, !tbaa !35
  %4106 = load ptr, ptr %200, align 8, !tbaa !5
  %4107 = call fastcc i32 @S_regrepeat(ptr noundef %190, ptr noundef nonnull %20, ptr noundef %4106, ptr noundef nonnull %0, i32 noundef 1)
  %4108 = icmp eq i32 %4107, 0
  %4109 = load ptr, ptr %20, align 8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20) #12
  br i1 %4108, label %4918, label %4110

4110:                                             ; preds = %4105
  %4111 = load i32, ptr %205, align 8, !tbaa !5
  %4112 = add nsw i32 %4111, 1
  store i32 %4112, ptr %205, align 8, !tbaa !5
  %4113 = load i32, ptr %206, align 8, !tbaa !5
  %4114 = icmp slt i32 %4111, %4113
  br i1 %4114, label %4119, label %4115

4115:                                             ; preds = %4110
  %4116 = icmp eq i32 %4113, 32767
  %4117 = icmp sgt i32 %4111, -1
  %4118 = and i1 %4117, %4116
  br i1 %4118, label %4119, label %4918

4119:                                             ; preds = %4115, %4110, %3813
  %4120 = phi i32 [ %3807, %3813 ], [ %4112, %4110 ], [ %4112, %4115 ]
  %4121 = phi i8 [ 0, %3813 ], [ %212, %4110 ], [ %212, %4115 ]
  %4122 = phi ptr [ %3808, %3813 ], [ %4109, %4110 ], [ %4109, %4115 ]
  %4123 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4124 = load i32, ptr %4123, align 8, !tbaa !5
  %4125 = icmp eq i32 %4124, 0
  br i1 %4125, label %4164, label %4126

4126:                                             ; preds = %4119
  %4127 = icmp eq i32 %4120, 0
  br i1 %4127, label %4156, label %4128

4128:                                             ; preds = %4126
  %4129 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4130 = icmp eq i8 %4129, 0
  br i1 %4130, label %4134, label %4131

4131:                                             ; preds = %4128
  %4132 = load ptr, ptr %59, align 8, !tbaa !26
  %4133 = call fastcc ptr @S_reghop3(ptr noundef %4122, i64 noundef -1, ptr noundef %4132)
  br label %4137

4134:                                             ; preds = %4128
  %4135 = getelementptr inbounds i8, ptr %4122, i64 -1
  %4136 = load ptr, ptr %59, align 8, !tbaa !26
  br label %4137

4137:                                             ; preds = %4134, %4131
  %4138 = phi ptr [ %4132, %4131 ], [ %4136, %4134 ]
  %4139 = phi ptr [ %4133, %4131 ], [ %4135, %4134 ]
  %4140 = ptrtoint ptr %4139 to i64
  %4141 = ptrtoint ptr %4138 to i64
  %4142 = sub i64 %4140, %4141
  %4143 = load ptr, ptr %195, align 8, !tbaa !64
  %4144 = zext i32 %4124 to i64
  %4145 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4143, i64 %4144
  store i64 %4142, ptr %4145, align 8, !tbaa !65
  %4146 = ptrtoint ptr %4122 to i64
  %4147 = sub i64 %4146, %4141
  %4148 = load i32, ptr %4123, align 8, !tbaa !5
  %4149 = zext i32 %4148 to i64
  %4150 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4143, i64 %4149, i32 1
  store i64 %4147, ptr %4150, align 8, !tbaa !74
  %4151 = load i32, ptr %4123, align 8, !tbaa !5
  %4152 = load i32, ptr %193, align 8, !tbaa !67
  %4153 = icmp ugt i32 %4151, %4152
  br i1 %4153, label %4154, label %4162

4154:                                             ; preds = %4137
  store i32 %4151, ptr %193, align 8, !tbaa !67
  %4155 = load i32, ptr %4123, align 8, !tbaa !5
  br label %4162

4156:                                             ; preds = %4126
  %4157 = load ptr, ptr %195, align 8, !tbaa !64
  %4158 = zext i32 %4124 to i64
  %4159 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4157, i64 %4158, i32 1
  store i64 -1, ptr %4159, align 8, !tbaa !74
  %4160 = load i32, ptr %207, align 8, !tbaa !5
  store i32 %4160, ptr %193, align 8, !tbaa !67
  %4161 = load i32, ptr %208, align 4, !tbaa !5
  br label %4162

4162:                                             ; preds = %4137, %4154, %4156
  %4163 = phi i32 [ %4161, %4156 ], [ %4155, %4154 ], [ %4151, %4137 ]
  store i32 %4163, ptr %197, align 4, !tbaa !68
  br label %4164

4164:                                             ; preds = %4162, %4119
  br i1 %202, label %4171, label %4165

4165:                                             ; preds = %4164
  %4166 = load i32, ptr %203, align 8, !tbaa !5
  %4167 = icmp eq i32 %4166, 0
  br i1 %4167, label %4171, label %4168

4168:                                             ; preds = %4165
  %4169 = load i32, ptr %4123, align 8, !tbaa !5
  %4170 = icmp eq i32 %4166, %4169
  br i1 %4170, label %4347, label %4171

4171:                                             ; preds = %4168, %4165, %4164
  %4172 = load ptr, ptr %209, align 8, !tbaa !5
  store i32 120, ptr %188, align 8, !tbaa !276
  br label %4778

4173:                                             ; preds = %4336, %4341
  %4174 = phi ptr [ %4335, %4341 ], [ %4337, %4336 ]
  br label %4175

4175:                                             ; preds = %4173, %4344, %4321, %4325, %3891
  %4176 = phi i32 [ %3862, %3891 ], [ %4314, %4325 ], [ %4314, %4321 ], [ %4314, %4344 ], [ %4314, %4173 ]
  %4177 = phi i8 [ %212, %3891 ], [ %4284, %4325 ], [ %4284, %4321 ], [ %4284, %4344 ], [ %4284, %4173 ]
  %4178 = phi ptr [ %3893, %3891 ], [ %4326, %4325 ], [ %4285, %4321 ], [ %4345, %4344 ], [ %4174, %4173 ]
  %4179 = phi ptr [ %3718, %3891 ], [ %4286, %4325 ], [ %4286, %4321 ], [ %4286, %4344 ], [ %4286, %4173 ]
  br i1 %202, label %4187, label %4180

4180:                                             ; preds = %4175
  %4181 = load i32, ptr %203, align 8, !tbaa !5
  %4182 = icmp eq i32 %4181, 0
  br i1 %4182, label %4187, label %4183

4183:                                             ; preds = %4180
  %4184 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4185 = load i32, ptr %4184, align 8, !tbaa !5
  %4186 = icmp eq i32 %4181, %4185
  br i1 %4186, label %4347, label %4187

4187:                                             ; preds = %4183, %4180, %4175
  %4188 = load ptr, ptr %58, align 8, !tbaa !27
  %4189 = icmp ult ptr %4178, %4188
  %4190 = load i32, ptr %192, align 8, !tbaa !5
  %4191 = icmp eq i32 %4190, -1000
  %4192 = xor i1 %4189, true
  %4193 = select i1 %4191, i1 true, i1 %4192
  br i1 %4193, label %4216, label %4194

4194:                                             ; preds = %4187
  %4195 = load i8, ptr %4178, align 1, !tbaa !5
  %4196 = icmp slt i8 %4195, 0
  %4197 = and i1 %23, %4196
  br i1 %4197, label %4198, label %4210

4198:                                             ; preds = %4194
  %4199 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 13
  %4200 = zext i8 %4195 to i64
  %4201 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4200
  %4202 = load i8, ptr %4201, align 1, !tbaa !5
  %4203 = zext i8 %4202 to i64
  %4204 = call i32 @bcmp(ptr nonnull %4178, ptr nonnull %4199, i64 %4203)
  %4205 = icmp eq i32 %4204, 0
  br i1 %4205, label %4219, label %4206

4206:                                             ; preds = %4198
  %4207 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 14
  %4208 = call i32 @bcmp(ptr nonnull %4178, ptr nonnull %4207, i64 %4203)
  %4209 = icmp eq i32 %4208, 0
  br label %4216

4210:                                             ; preds = %4194
  %4211 = zext i8 %4195 to i32
  %4212 = icmp eq i32 %4190, %4211
  br i1 %4212, label %4219, label %4213

4213:                                             ; preds = %4210
  %4214 = load i32, ptr %194, align 4, !tbaa !5
  %4215 = icmp eq i32 %4214, %4211
  br label %4216

4216:                                             ; preds = %4213, %4206, %4187
  %4217 = phi i1 [ %4189, %4187 ], [ %4209, %4206 ], [ %4215, %4213 ]
  %4218 = select i1 %4191, i1 true, i1 %4217
  br i1 %4218, label %4219, label %4283

4219:                                             ; preds = %4210, %4198, %4216
  %4220 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4221 = load i32, ptr %4220, align 8, !tbaa !5
  %4222 = icmp eq i32 %4221, 0
  br i1 %4222, label %4281, label %4223

4223:                                             ; preds = %4219
  %4224 = icmp eq i32 %4176, 0
  br i1 %4224, label %4273, label %4225

4225:                                             ; preds = %4223
  %4226 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4227 = icmp eq i8 %4226, 0
  br i1 %4227, label %4251, label %4228

4228:                                             ; preds = %4225
  %4229 = load ptr, ptr %59, align 8, !tbaa !26
  %4230 = ptrtoint ptr %4229 to i64
  %4231 = icmp ugt ptr %4178, %4229
  br i1 %4231, label %4232, label %4255

4232:                                             ; preds = %4228
  %4233 = getelementptr inbounds i8, ptr %4178, i64 -1
  %4234 = load i8, ptr %4233, align 1, !tbaa !5
  %4235 = icmp slt i8 %4234, 0
  %4236 = icmp ugt ptr %4233, %4229
  %4237 = and i1 %4235, %4236
  br i1 %4237, label %4238, label %4255

4238:                                             ; preds = %4232
  %4239 = ptrtoint ptr %4178 to i64
  %4240 = getelementptr i8, ptr %4178, i64 %4230
  %4241 = sub i64 0, %4239
  %4242 = getelementptr i8, ptr %4240, i64 %4241
  br label %4243

4243:                                             ; preds = %4248, %4238
  %4244 = phi ptr [ %4249, %4248 ], [ %4233, %4238 ]
  %4245 = load i8, ptr %4244, align 1, !tbaa !5
  %4246 = and i8 %4245, -64
  %4247 = icmp eq i8 %4246, -128
  br i1 %4247, label %4248, label %4255

4248:                                             ; preds = %4243
  %4249 = getelementptr inbounds i8, ptr %4244, i64 -1
  %4250 = icmp ugt ptr %4249, %4229
  br i1 %4250, label %4243, label %4255, !llvm.loop !46

4251:                                             ; preds = %4225
  %4252 = getelementptr inbounds i8, ptr %4178, i64 -1
  %4253 = load ptr, ptr %59, align 8, !tbaa !26
  %4254 = ptrtoint ptr %4253 to i64
  br label %4255

4255:                                             ; preds = %4243, %4248, %4232, %4228, %4251
  %4256 = phi i64 [ %4230, %4228 ], [ %4254, %4251 ], [ %4230, %4232 ], [ %4230, %4248 ], [ %4230, %4243 ]
  %4257 = phi ptr [ %4178, %4228 ], [ %4252, %4251 ], [ %4233, %4232 ], [ %4244, %4243 ], [ %4242, %4248 ]
  %4258 = ptrtoint ptr %4257 to i64
  %4259 = sub i64 %4258, %4256
  %4260 = load ptr, ptr %195, align 8, !tbaa !64
  %4261 = zext i32 %4221 to i64
  %4262 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4260, i64 %4261
  store i64 %4259, ptr %4262, align 8, !tbaa !65
  %4263 = ptrtoint ptr %4178 to i64
  %4264 = sub i64 %4263, %4256
  %4265 = load i32, ptr %4220, align 8, !tbaa !5
  %4266 = zext i32 %4265 to i64
  %4267 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4260, i64 %4266, i32 1
  store i64 %4264, ptr %4267, align 8, !tbaa !74
  %4268 = load i32, ptr %4220, align 8, !tbaa !5
  %4269 = load i32, ptr %193, align 8, !tbaa !67
  %4270 = icmp ugt i32 %4268, %4269
  br i1 %4270, label %4271, label %4279

4271:                                             ; preds = %4255
  store i32 %4268, ptr %193, align 8, !tbaa !67
  %4272 = load i32, ptr %4220, align 8, !tbaa !5
  br label %4279

4273:                                             ; preds = %4223
  %4274 = load ptr, ptr %195, align 8, !tbaa !64
  %4275 = zext i32 %4221 to i64
  %4276 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4274, i64 %4275, i32 1
  store i64 -1, ptr %4276, align 8, !tbaa !74
  %4277 = load i32, ptr %207, align 8, !tbaa !5
  store i32 %4277, ptr %193, align 8, !tbaa !67
  %4278 = load i32, ptr %208, align 4, !tbaa !5
  br label %4279

4279:                                             ; preds = %4255, %4271, %4273
  %4280 = phi i32 [ %4278, %4273 ], [ %4272, %4271 ], [ %4268, %4255 ]
  store i32 %4280, ptr %197, align 4, !tbaa !68
  br label %4281

4281:                                             ; preds = %4279, %4219
  %4282 = load ptr, ptr %209, align 8, !tbaa !5
  store i32 122, ptr %188, align 8, !tbaa !276
  br label %4778

4283:                                             ; preds = %221, %4216
  %4284 = phi i8 [ %4177, %4216 ], [ %212, %221 ]
  %4285 = phi ptr [ %4178, %4216 ], [ %214, %221 ]
  %4286 = phi ptr [ %4179, %4216 ], [ %215, %221 ]
  %4287 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %4288 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  %4289 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 1
  %4290 = load i32, ptr %4289, align 4, !tbaa !5
  %4291 = icmp sgt i32 %4287, %4290
  br i1 %4291, label %4292, label %4293

4292:                                             ; preds = %4283
  call void @Perl_leave_scope(i32 noundef %4290) #12
  br label %4293

4293:                                             ; preds = %4292, %4283
  %4294 = load i32, ptr %4288, align 8, !tbaa !5
  %4295 = icmp eq i32 %4294, 0
  br i1 %4295, label %4312, label %4296

4296:                                             ; preds = %4293
  %4297 = load i32, ptr %193, align 8, !tbaa !67
  %4298 = load i32, ptr %207, align 8, !tbaa !5
  %4299 = icmp ugt i32 %4297, %4298
  br i1 %4299, label %4300, label %4309

4300:                                             ; preds = %4296
  %4301 = load ptr, ptr %195, align 8, !tbaa !64
  br label %4302

4302:                                             ; preds = %4300, %4302
  %4303 = phi i32 [ %4297, %4300 ], [ %4306, %4302 ]
  %4304 = zext i32 %4303 to i64
  %4305 = getelementptr inbounds %struct.regexp_paren_pair, ptr %4301, i64 %4304, i32 1
  store i64 -1, ptr %4305, align 8, !tbaa !74
  %4306 = add i32 %4303, -1
  %4307 = load i32, ptr %207, align 8, !tbaa !5
  %4308 = icmp ugt i32 %4306, %4307
  br i1 %4308, label %4302, label %4309, !llvm.loop !350

4309:                                             ; preds = %4302, %4296
  %4310 = phi i32 [ %4297, %4296 ], [ %4306, %4302 ]
  store i32 %4310, ptr %193, align 8, !tbaa !67
  %4311 = load i32, ptr %208, align 4, !tbaa !5
  store i32 %4311, ptr %197, align 4, !tbaa !68
  br label %4312

4312:                                             ; preds = %4309, %4293
  %4313 = load i32, ptr %205, align 8, !tbaa !5
  %4314 = add nsw i32 %4313, -1
  store i32 %4314, ptr %205, align 8, !tbaa !5
  %4315 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2, i32 0, i32 9
  %4316 = load i32, ptr %4315, align 4, !tbaa !5
  %4317 = icmp sgt i32 %4313, %4316
  br i1 %4317, label %4318, label %4918

4318:                                             ; preds = %4312
  %4319 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4320 = icmp eq i8 %4319, 0
  br i1 %4320, label %4344, label %4321

4321:                                             ; preds = %4318
  %4322 = load ptr, ptr %59, align 8, !tbaa !26
  %4323 = ptrtoint ptr %4322 to i64
  %4324 = icmp ugt ptr %4285, %4322
  br i1 %4324, label %4325, label %4175

4325:                                             ; preds = %4321
  %4326 = getelementptr inbounds i8, ptr %4285, i64 -1
  %4327 = load i8, ptr %4326, align 1, !tbaa !5
  %4328 = icmp slt i8 %4327, 0
  %4329 = icmp ugt ptr %4326, %4322
  %4330 = and i1 %4328, %4329
  br i1 %4330, label %4331, label %4175

4331:                                             ; preds = %4325
  %4332 = ptrtoint ptr %4285 to i64
  %4333 = getelementptr i8, ptr %4285, i64 %4323
  %4334 = sub i64 0, %4332
  %4335 = getelementptr i8, ptr %4333, i64 %4334
  br label %4336

4336:                                             ; preds = %4341, %4331
  %4337 = phi ptr [ %4342, %4341 ], [ %4326, %4331 ]
  %4338 = load i8, ptr %4337, align 1, !tbaa !5
  %4339 = and i8 %4338, -64
  %4340 = icmp eq i8 %4339, -128
  br i1 %4340, label %4341, label %4173

4341:                                             ; preds = %4336
  %4342 = getelementptr inbounds i8, ptr %4337, i64 -1
  %4343 = icmp ugt ptr %4342, %4322
  br i1 %4343, label %4336, label %4173, !llvm.loop !46

4344:                                             ; preds = %4318
  %4345 = getelementptr inbounds i8, ptr %4285, i64 -1
  br label %4175

4346:                                             ; preds = %221, %2803, %2831, %2824, %2795
  br i1 %202, label %4395, label %4347

4347:                                             ; preds = %3563, %4183, %4346, %3322, %2828, %4074, %2792, %4168
  %4348 = phi ptr [ %214, %2792 ], [ %4122, %4168 ], [ %4017, %4074 ], [ %214, %2828 ], [ %214, %3322 ], [ %214, %4346 ], [ %4178, %4183 ], [ %3365, %3563 ]
  %4349 = phi i8 [ %212, %2792 ], [ %4121, %4168 ], [ %3935, %4074 ], [ %212, %2828 ], [ %212, %3322 ], [ %212, %4346 ], [ %4177, %4183 ], [ %3363, %3563 ]
  store ptr %191, ptr %196, align 8, !tbaa !5
  %4350 = load i32, ptr %4, align 4, !tbaa !73
  %4351 = call fastcc i32 @S_regcppush(ptr noundef %190, i32 noundef 0, i32 noundef %4350)
  store i32 %4351, ptr %199, align 8, !tbaa !5
  %4352 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 6
  %4353 = load ptr, ptr %4352, align 8, !tbaa !5
  %4354 = getelementptr inbounds %struct.p5rx, ptr %4353, i64 0, i32 2
  %4355 = load i32, ptr %4354, align 4, !tbaa !28
  %4356 = lshr i32 %4355, 29
  %4357 = trunc i32 %4356 to i8
  %4358 = and i8 %4357, 1
  store i8 %4358, ptr %52, align 1, !tbaa !30
  %4359 = load ptr, ptr %67, align 8, !tbaa !208
  %4360 = icmp eq ptr %4359, null
  br i1 %4360, label %4380, label %4361

4361:                                             ; preds = %4347
  %4362 = getelementptr inbounds %struct.sv, ptr %4353, i64 0, i32 1
  %4363 = load i32, ptr %4362, align 8, !tbaa !61
  %4364 = add i32 %4363, 1
  store i32 %4364, ptr %4362, align 8, !tbaa !61
  %4365 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  %4366 = getelementptr inbounds %struct.pmop, ptr %4365, i64 0, i32 9
  %4367 = load ptr, ptr %4366, align 8, !tbaa !227
  %4368 = icmp eq ptr %4367, null
  br i1 %4368, label %4377, label %4369

4369:                                             ; preds = %4361
  %4370 = getelementptr inbounds %struct.sv, ptr %4367, i64 0, i32 1
  %4371 = load i32, ptr %4370, align 8, !tbaa !61
  %4372 = icmp ugt i32 %4371, 1
  br i1 %4372, label %4373, label %4375

4373:                                             ; preds = %4369
  %4374 = add i32 %4371, -1
  store i32 %4374, ptr %4370, align 8, !tbaa !61
  br label %4377

4375:                                             ; preds = %4369
  call void @Perl_sv_free2(ptr noundef nonnull %4367, i32 noundef %4371) #12
  %4376 = load ptr, ptr @PL_reg_curpm, align 8, !tbaa !35
  br label %4377

4377:                                             ; preds = %4361, %4373, %4375
  %4378 = phi ptr [ %4365, %4361 ], [ %4365, %4373 ], [ %4376, %4375 ]
  %4379 = getelementptr inbounds %struct.pmop, ptr %4378, i64 0, i32 9
  store ptr %4353, ptr %4379, align 8, !tbaa !227
  br label %4380

4380:                                             ; preds = %4377, %4347
  %4381 = getelementptr i8, ptr %4353, i64 16
  %4382 = load ptr, ptr %4381, align 8, !tbaa !5
  %4383 = getelementptr inbounds %struct.regexp, ptr %4382, i64 0, i32 14
  %4384 = load ptr, ptr %4383, align 8, !tbaa !20
  %4385 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 4
  %4386 = load ptr, ptr %4385, align 8, !tbaa !5
  %4387 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  store i32 %4387, ptr %198, align 4, !tbaa !5
  %4388 = getelementptr inbounds i8, ptr %180, i64 52
  %4389 = load i32, ptr %4388, align 4, !tbaa !5
  store i32 %4389, ptr @PL_savestack_ix, align 4, !tbaa !73
  call fastcc void @S_regcppop(ptr noundef %4382, ptr noundef nonnull %4)
  store i32 %4387, ptr @PL_savestack_ix, align 4, !tbaa !73
  store ptr %180, ptr %207, align 8, !tbaa !5
  %4390 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 2
  %4391 = load ptr, ptr %4390, align 8, !tbaa !5
  %4392 = call i32 @llvm.usub.sat.i32(i32 %183, i32 1)
  %4393 = getelementptr inbounds %struct.regmatch_state, ptr %180, i64 0, i32 2, i32 0, i32 10
  %4394 = load ptr, ptr %4393, align 8, !tbaa !5
  br label %4730

4395:                                             ; preds = %4346
  %4396 = load ptr, ptr %66, align 8, !tbaa !205
  %4397 = icmp ult ptr %214, %4396
  br i1 %4397, label %4918, label %4824

4398:                                             ; preds = %221
  store i32 1, ptr %207, align 8, !tbaa !5
  br label %4465

4399:                                             ; preds = %221
  br label %4400

4400:                                             ; preds = %221, %4399
  %4401 = phi i8 [ 1, %4399 ], [ 0, %221 ]
  %4402 = phi i1 [ true, %4399 ], [ false, %221 ]
  %4403 = phi i32 [ 0, %4399 ], [ 1, %221 ]
  store i32 %4403, ptr %207, align 8, !tbaa !5
  %4404 = load i8, ptr %215, align 2, !tbaa !76
  %4405 = icmp eq i8 %4404, 0
  br i1 %4405, label %4465, label %4406

4406:                                             ; preds = %4400
  %4407 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4408 = icmp eq i8 %4407, 0
  br i1 %4408, label %4445, label %4409

4409:                                             ; preds = %4406
  %4410 = load ptr, ptr %59, align 8, !tbaa !26
  %4411 = ptrtoint ptr %4410 to i64
  %4412 = icmp ugt ptr %214, %4410
  br i1 %4412, label %4413, label %4454

4413:                                             ; preds = %4409
  %4414 = zext i8 %4404 to i64
  %4415 = sub nsw i64 0, %4414
  br label %4416

4416:                                             ; preds = %4413, %4438
  %4417 = phi i64 [ %4419, %4438 ], [ %4415, %4413 ]
  %4418 = phi ptr [ %4439, %4438 ], [ %214, %4413 ]
  %4419 = add nsw i64 %4417, 1
  %4420 = getelementptr inbounds i8, ptr %4418, i64 -1
  %4421 = load i8, ptr %4420, align 1, !tbaa !5
  %4422 = icmp slt i8 %4421, 0
  %4423 = icmp ugt ptr %4420, %4410
  %4424 = and i1 %4422, %4423
  br i1 %4424, label %4425, label %4438

4425:                                             ; preds = %4416
  %4426 = ptrtoint ptr %4418 to i64
  %4427 = getelementptr i8, ptr %4418, i64 %4411
  %4428 = sub i64 0, %4426
  %4429 = getelementptr i8, ptr %4427, i64 %4428
  br label %4430

4430:                                             ; preds = %4435, %4425
  %4431 = phi ptr [ %4436, %4435 ], [ %4420, %4425 ]
  %4432 = load i8, ptr %4431, align 1, !tbaa !5
  %4433 = and i8 %4432, -64
  %4434 = icmp eq i8 %4433, -128
  br i1 %4434, label %4435, label %4438

4435:                                             ; preds = %4430
  %4436 = getelementptr inbounds i8, ptr %4431, i64 -1
  %4437 = icmp ugt ptr %4436, %4410
  br i1 %4437, label %4430, label %4438, !llvm.loop !49

4438:                                             ; preds = %4435, %4430, %4416
  %4439 = phi ptr [ %4420, %4416 ], [ %4431, %4430 ], [ %4429, %4435 ]
  %4440 = icmp ne i64 %4419, 0
  %4441 = icmp ugt ptr %4439, %4410
  %4442 = and i1 %4440, %4441
  br i1 %4442, label %4416, label %4443, !llvm.loop !50

4443:                                             ; preds = %4438
  %4444 = icmp slt i64 %4417, -1
  br i1 %4444, label %4454, label %4451

4445:                                             ; preds = %4406
  %4446 = zext i8 %4404 to i64
  %4447 = sub nsw i64 0, %4446
  %4448 = getelementptr inbounds i8, ptr %214, i64 %4447
  %4449 = load ptr, ptr %59, align 8, !tbaa !26
  %4450 = icmp ult ptr %4448, %4449
  br i1 %4450, label %4454, label %4451

4451:                                             ; preds = %4443, %4445
  %4452 = phi ptr [ %4448, %4445 ], [ %4439, %4443 ]
  %4453 = icmp eq ptr %4452, null
  br i1 %4453, label %4454, label %4465

4454:                                             ; preds = %4445, %4409, %4443, %4451
  %4455 = icmp ne i32 %170, 0
  %4456 = or i1 %4455, %4402
  br i1 %4456, label %4457, label %4918

4457:                                             ; preds = %4454
  %4458 = select i1 %4455, i8 %4401, i8 %172
  %4459 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4460 = load i32, ptr %4459, align 4, !tbaa !162
  %4461 = zext i32 %4460 to i64
  %4462 = getelementptr inbounds %struct.regnode, ptr %215, i64 %4461
  %4463 = icmp eq i32 %4460, 0
  %4464 = select i1 %4463, ptr null, ptr %4462
  br label %4714

4465:                                             ; preds = %4451, %4400, %4398
  %4466 = phi ptr [ %214, %4398 ], [ %214, %4400 ], [ %4452, %4451 ]
  store ptr %215, ptr %192, align 8, !tbaa !5
  store i32 %170, ptr %208, align 4, !tbaa !5
  %4467 = getelementptr inbounds %struct.regnode, ptr %215, i64 2
  br label %4730

4468:                                             ; preds = %221
  %4469 = load i32, ptr %207, align 8, !tbaa !5
  %4470 = icmp eq i32 %4469, 0
  %4471 = zext i1 %4470 to i32
  store i32 %4471, ptr %207, align 8, !tbaa !5
  br label %4472

4472:                                             ; preds = %221, %4468
  %4473 = load i32, ptr %208, align 4, !tbaa !5
  %4474 = icmp eq i32 %4473, 0
  %4475 = load i32, ptr %207, align 8, !tbaa !5
  br i1 %4474, label %4479, label %4476

4476:                                             ; preds = %4472
  %4477 = icmp ne i32 %4475, 0
  %4478 = zext i1 %4477 to i8
  br label %4481

4479:                                             ; preds = %4472
  %4480 = icmp eq i32 %4475, 0
  br i1 %4480, label %4918, label %4481

4481:                                             ; preds = %4479, %4476
  %4482 = phi i8 [ %4478, %4476 ], [ %172, %4479 ]
  %4483 = load ptr, ptr %192, align 8, !tbaa !5
  %4484 = getelementptr inbounds %struct.regnode, ptr %4483, i64 0, i32 1
  %4485 = load i8, ptr %4484, align 1, !tbaa !56
  %4486 = icmp eq i8 %4485, 65
  br i1 %4486, label %4489, label %4487

4487:                                             ; preds = %4481
  %4488 = load ptr, ptr %204, align 8, !tbaa !294
  br label %4489

4489:                                             ; preds = %4487, %4481
  %4490 = phi ptr [ %4488, %4487 ], [ %214, %4481 ]
  %4491 = getelementptr inbounds %struct.regnode_1, ptr %4483, i64 0, i32 3
  %4492 = load i32, ptr %4491, align 4, !tbaa !162
  %4493 = zext i32 %4492 to i64
  %4494 = getelementptr inbounds %struct.regnode, ptr %4483, i64 %4493
  %4495 = icmp eq i32 %4492, 0
  %4496 = select i1 %4495, ptr null, ptr %4494
  br label %3242

4497:                                             ; preds = %221
  %4498 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4499 = load i32, ptr %4498, align 4, !tbaa !162
  %4500 = zext i32 %4499 to i64
  %4501 = getelementptr inbounds %struct.regnode, ptr %215, i64 %4500
  %4502 = icmp eq i32 %4499, 0
  %4503 = select i1 %4502, ptr null, ptr %4501
  br label %4714

4504:                                             ; preds = %221
  store ptr %216, ptr %60, align 8, !tbaa !63
  br label %4505

4505:                                             ; preds = %221, %4504
  %4506 = load i8, ptr %215, align 2, !tbaa !76
  %4507 = icmp eq i8 %4506, 0
  br i1 %4507, label %4508, label %4516

4508:                                             ; preds = %4505
  %4509 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %4510 = load ptr, ptr %4509, align 8, !tbaa !161
  %4511 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4512 = load i32, ptr %4511, align 4, !tbaa !162
  %4513 = zext i32 %4512 to i64
  %4514 = getelementptr inbounds %struct.reg_data, ptr %4510, i64 0, i32 2, i64 %4513
  %4515 = load ptr, ptr %4514, align 8, !tbaa !35
  br label %4516

4516:                                             ; preds = %4508, %4505
  %4517 = phi ptr [ %173, %4505 ], [ %4515, %4508 ]
  %4518 = phi ptr [ %174, %4505 ], [ %4515, %4508 ]
  store i32 124, ptr %188, align 8, !tbaa !276
  br label %4778

4519:                                             ; preds = %221
  store ptr %181, ptr %207, align 8, !tbaa !5
  %4520 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %4521 = load ptr, ptr %4520, align 8, !tbaa !161
  %4522 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4523 = load i32, ptr %4522, align 4, !tbaa !162
  %4524 = zext i32 %4523 to i64
  %4525 = getelementptr inbounds %struct.reg_data, ptr %4521, i64 0, i32 2, i64 %4524
  %4526 = load ptr, ptr %4525, align 8, !tbaa !35
  store ptr %4526, ptr %192, align 8, !tbaa !5
  store ptr %214, ptr %196, align 8, !tbaa !5
  br label %4730

4527:                                             ; preds = %221
  %4528 = load ptr, ptr %207, align 8, !tbaa !5
  br label %4824

4529:                                             ; preds = %221
  %4530 = icmp eq ptr %175, null
  br i1 %4530, label %4553, label %4531

4531:                                             ; preds = %4529
  %4532 = load ptr, ptr %192, align 8, !tbaa !5
  %4533 = call i32 @Perl_sv_eq_flags(ptr noundef %4532, ptr noundef nonnull %175, i32 noundef 2) #12
  %4534 = icmp eq i32 %4533, 0
  br i1 %4534, label %4553, label %4535

4535:                                             ; preds = %4531
  %4536 = load ptr, ptr %196, align 8, !tbaa !5
  %4537 = icmp ugt ptr %4536, %1
  br i1 %4537, label %4538, label %4551

4538:                                             ; preds = %4535
  %4539 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4540 = icmp eq i8 %4539, 0
  br i1 %4540, label %4544, label %4541

4541:                                             ; preds = %4538
  %4542 = load ptr, ptr %59, align 8, !tbaa !26
  %4543 = call fastcc ptr @S_reghopmaybe3(ptr noundef nonnull %4536, i64 noundef -1, ptr noundef %4542)
  br label %4549

4544:                                             ; preds = %4538
  %4545 = getelementptr inbounds i8, ptr %4536, i64 -1
  %4546 = load ptr, ptr %59, align 8, !tbaa !26
  %4547 = icmp ult ptr %4545, %4546
  %4548 = select i1 %4547, ptr null, ptr %4545
  br label %4549

4549:                                             ; preds = %4544, %4541
  %4550 = phi ptr [ %4543, %4541 ], [ %4548, %4544 ]
  store ptr %4550, ptr %60, align 8, !tbaa !63
  br label %4551

4551:                                             ; preds = %4549, %4535
  %4552 = load ptr, ptr %192, align 8, !tbaa !5
  br label %4553

4553:                                             ; preds = %4551, %4531, %4529
  %4554 = phi ptr [ %4552, %4551 ], [ %174, %4531 ], [ %174, %4529 ]
  %4555 = phi ptr [ null, %4551 ], [ %175, %4531 ], [ null, %4529 ]
  %4556 = load ptr, ptr %207, align 8, !tbaa !5
  %4557 = icmp eq ptr %4556, null
  br i1 %4557, label %4918, label %4558

4558:                                             ; preds = %4553
  %4559 = getelementptr inbounds %struct.regmatch_state, ptr %4556, i64 0, i32 2, i32 0, i32 4
  %4560 = load ptr, ptr %4559, align 8, !tbaa !5
  br label %4918

4561:                                             ; preds = %221
  %4562 = load i8, ptr %215, align 2, !tbaa !76
  %4563 = icmp eq i8 %4562, 0
  br i1 %4563, label %4565, label %4564

4564:                                             ; preds = %4561
  store ptr null, ptr %192, align 8, !tbaa !5
  store ptr %214, ptr %196, align 8, !tbaa !5
  store i32 128, ptr %188, align 8, !tbaa !276
  br label %4778

4565:                                             ; preds = %4561
  %4566 = getelementptr inbounds %struct.regexp_internal, ptr %189, i64 0, i32 3
  %4567 = load ptr, ptr %4566, align 8, !tbaa !161
  %4568 = getelementptr inbounds %struct.regnode_1, ptr %215, i64 0, i32 3
  %4569 = load i32, ptr %4568, align 4, !tbaa !162
  %4570 = zext i32 %4569 to i64
  %4571 = getelementptr inbounds %struct.reg_data, ptr %4567, i64 0, i32 2, i64 %4570
  %4572 = load ptr, ptr %4571, align 8, !tbaa !35
  %4573 = icmp eq ptr %181, null
  br i1 %4573, label %4714, label %4574

4574:                                             ; preds = %4565, %4580
  %4575 = phi ptr [ %4582, %4580 ], [ %181, %4565 ]
  %4576 = getelementptr inbounds %struct.regmatch_state, ptr %4575, i64 0, i32 2, i32 0, i32 4
  %4577 = load ptr, ptr %4576, align 8, !tbaa !5
  %4578 = call i32 @Perl_sv_eq_flags(ptr noundef %4577, ptr noundef %4572, i32 noundef 2) #12
  %4579 = icmp eq i32 %4578, 0
  br i1 %4579, label %4580, label %4584

4580:                                             ; preds = %4574
  %4581 = getelementptr inbounds %struct.regmatch_state, ptr %4575, i64 0, i32 2, i32 0, i32 2
  %4582 = load ptr, ptr %4581, align 8, !tbaa !5
  %4583 = icmp eq ptr %4582, null
  br i1 %4583, label %4714, label %4574, !llvm.loop !351

4584:                                             ; preds = %4574
  store ptr %4572, ptr %192, align 8, !tbaa !5
  store i32 128, ptr %188, align 8, !tbaa !276
  br label %4778

4585:                                             ; preds = %221
  %4586 = load ptr, ptr %192, align 8, !tbaa !5
  %4587 = icmp eq ptr %4586, null
  br i1 %4587, label %4588, label %4918

4588:                                             ; preds = %4585
  %4589 = load ptr, ptr %196, align 8, !tbaa !5
  %4590 = icmp ugt ptr %4589, %1
  br i1 %4590, label %4591, label %4604

4591:                                             ; preds = %4588
  %4592 = load i8, ptr %21, align 2, !tbaa !22, !range !42, !noundef !43
  %4593 = icmp eq i8 %4592, 0
  br i1 %4593, label %4597, label %4594

4594:                                             ; preds = %4591
  %4595 = load ptr, ptr %59, align 8, !tbaa !26
  %4596 = call fastcc ptr @S_reghopmaybe3(ptr noundef nonnull %4589, i64 noundef -1, ptr noundef %4595)
  br label %4602

4597:                                             ; preds = %4591
  %4598 = getelementptr inbounds i8, ptr %4589, i64 -1
  %4599 = load ptr, ptr %59, align 8, !tbaa !26
  %4600 = icmp ult ptr %4598, %4599
  %4601 = select i1 %4600, ptr null, ptr %4598
  br label %4602

4602:                                             ; preds = %4597, %4594
  %4603 = phi ptr [ %4596, %4594 ], [ %4601, %4597 ]
  store ptr %4603, ptr %60, align 8, !tbaa !63
  br label %4604

4604:                                             ; preds = %4602, %4588
  %4605 = icmp eq ptr %181, null
  br i1 %4605, label %4918, label %4606

4606:                                             ; preds = %4604
  %4607 = getelementptr inbounds %struct.regmatch_state, ptr %181, i64 0, i32 2, i32 0, i32 4
  %4608 = load ptr, ptr %4607, align 8, !tbaa !5
  br label %4918

4609:                                             ; preds = %221
  %4610 = ptrtoint ptr %216 to i64
  %4611 = ptrtoint ptr %214 to i64
  %4612 = sub i64 %4610, %4611
  %4613 = icmp sgt i64 %4612, 2
  br i1 %4613, label %4614, label %4638

4614:                                             ; preds = %4609
  %4615 = load i8, ptr %214, align 1, !tbaa !5
  %4616 = add i8 %4615, -10
  %4617 = icmp ult i8 %4616, 3
  br i1 %4617, label %4670, label %4618

4618:                                             ; preds = %4614
  %4619 = icmp eq i8 %4615, 13
  br i1 %4619, label %4665, label %4620

4620:                                             ; preds = %4618
  br i1 %23, label %4621, label %4636

4621:                                             ; preds = %4620
  switch i8 %4615, label %4918 [
    i8 -62, label %4622
    i8 -30, label %4626
  ]

4622:                                             ; preds = %4621
  %4623 = getelementptr inbounds i8, ptr %214, i64 1
  %4624 = load i8, ptr %4623, align 1, !tbaa !5
  %4625 = icmp eq i8 %4624, -123
  br i1 %4625, label %4670, label %4918

4626:                                             ; preds = %4621
  %4627 = getelementptr inbounds i8, ptr %214, i64 1
  %4628 = load i8, ptr %4627, align 1, !tbaa !5
  %4629 = icmp eq i8 %4628, -128
  br i1 %4629, label %4630, label %4918

4630:                                             ; preds = %4626
  %4631 = getelementptr inbounds i8, ptr %214, i64 2
  %4632 = load i8, ptr %4631, align 1, !tbaa !5
  %4633 = freeze i8 %4632
  %4634 = and i8 %4633, -2
  %4635 = icmp eq i8 %4634, -88
  br i1 %4635, label %4670, label %4918

4636:                                             ; preds = %4620
  %4637 = icmp eq i8 %4615, -123
  br i1 %4637, label %4670, label %4918

4638:                                             ; preds = %4609
  %4639 = icmp eq i64 %4612, 2
  br i1 %4639, label %4640, label %4656

4640:                                             ; preds = %4638
  %4641 = load i8, ptr %214, align 1, !tbaa !5
  %4642 = add i8 %4641, -10
  %4643 = icmp ult i8 %4642, 3
  br i1 %4643, label %4670, label %4644

4644:                                             ; preds = %4640
  %4645 = icmp eq i8 %4641, 13
  br i1 %4645, label %4665, label %4646

4646:                                             ; preds = %4644
  br i1 %23, label %4647, label %4654

4647:                                             ; preds = %4646
  %4648 = icmp eq i8 %4641, -62
  br i1 %4648, label %4649, label %4918

4649:                                             ; preds = %4647
  %4650 = getelementptr inbounds i8, ptr %214, i64 1
  %4651 = load i8, ptr %4650, align 1, !tbaa !5
  %4652 = freeze i8 %4651
  %4653 = icmp eq i8 %4652, -123
  br i1 %4653, label %4670, label %4918

4654:                                             ; preds = %4646
  %4655 = icmp eq i8 %4641, -123
  br i1 %4655, label %4670, label %4918

4656:                                             ; preds = %4638
  %4657 = icmp sgt i64 %4612, 0
  br i1 %4657, label %4658, label %4918

4658:                                             ; preds = %4656
  %4659 = load i8, ptr %214, align 1, !tbaa !5
  %4660 = add i8 %4659, -10
  %4661 = icmp ult i8 %4660, 4
  %4662 = or i1 %23, %4661
  %4663 = icmp eq i8 %4659, -123
  %4664 = select i1 %4662, i1 %4661, i1 %4663
  br i1 %4664, label %4670, label %4918

4665:                                             ; preds = %4644, %4618
  %4666 = getelementptr inbounds i8, ptr %214, i64 1
  %4667 = load i8, ptr %4666, align 1, !tbaa !5
  %4668 = icmp eq i8 %4667, 10
  %4669 = select i1 %4668, i64 2, i64 1
  br label %4670

4670:                                             ; preds = %4622, %4649, %4630, %4640, %4614, %4658, %4636, %4654, %4665
  %4671 = phi i64 [ %4669, %4665 ], [ 1, %4654 ], [ 1, %4636 ], [ 1, %4658 ], [ 1, %4614 ], [ 1, %4640 ], [ 3, %4630 ], [ 2, %4649 ], [ 2, %4622 ]
  %4672 = getelementptr inbounds i8, ptr %214, i64 %4671
  br label %4714

4673:                                             ; preds = %221
  %4674 = load ptr, ptr @PL_stderrgv, align 8, !tbaa !35
  %4675 = icmp eq ptr %4674, null
  br i1 %4675, label %4692, label %4676

4676:                                             ; preds = %4673
  %4677 = getelementptr inbounds %struct.gv, ptr %4674, i64 0, i32 2
  %4678 = load i32, ptr %4677, align 4, !tbaa !352
  %4679 = and i32 %4678, 255
  %4680 = icmp eq i32 %4679, 9
  br i1 %4680, label %4681, label %4692

4681:                                             ; preds = %4676
  %4682 = getelementptr inbounds %struct.gv, ptr %4674, i64 0, i32 3
  %4683 = load ptr, ptr %4682, align 8, !tbaa !5
  %4684 = getelementptr inbounds %struct.gp, ptr %4683, i64 0, i32 1
  %4685 = load ptr, ptr %4684, align 8, !tbaa !353
  %4686 = icmp eq ptr %4685, null
  br i1 %4686, label %4692, label %4687

4687:                                             ; preds = %4681
  %4688 = load ptr, ptr %4685, align 8, !tbaa !354
  %4689 = getelementptr inbounds %struct.xpvio, ptr %4688, i64 0, i32 5
  %4690 = load ptr, ptr %4689, align 8, !tbaa !356
  %4691 = icmp eq ptr %4690, null
  br i1 %4691, label %4692, label %4694

4692:                                             ; preds = %4687, %4681, %4676, %4673
  %4693 = call ptr @Perl_PerlIO_stderr() #12
  br label %4694

4694:                                             ; preds = %4687, %4692
  %4695 = phi ptr [ %4693, %4692 ], [ %4690, %4687 ]
  %4696 = ptrtoint ptr %215 to i64
  %4697 = getelementptr inbounds %struct.regnode, ptr %215, i64 0, i32 1
  %4698 = load i8, ptr %4697, align 1, !tbaa !56
  %4699 = zext i8 %4698 to i32
  %4700 = call i32 (ptr, ptr, ...) @PerlIO_printf(ptr noundef %4695, ptr noundef nonnull @.str.15, i64 noundef %4696, i32 noundef %4699) #12
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.16) #12
  br label %4701

4701:                                             ; preds = %1634, %274, %268, %4694
  br i1 %23, label %4702, label %4710

4702:                                             ; preds = %4701
  %4703 = sext i32 %222 to i64
  %4704 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %4703
  %4705 = load i8, ptr %4704, align 1, !tbaa !5
  %4706 = zext i8 %4705 to i64
  %4707 = getelementptr inbounds i8, ptr %214, i64 %4706
  %4708 = load ptr, ptr %58, align 8, !tbaa !27
  %4709 = icmp ugt ptr %4707, %4708
  br i1 %4709, label %4918, label %4714

4710:                                             ; preds = %4701
  %4711 = getelementptr inbounds i8, ptr %214, i64 1
  br label %4714

4712:                                             ; preds = %221, %221
  br label %4714

4713:                                             ; preds = %221
  br label %4714

4714:                                             ; preds = %2534, %2791, %2792, %4565, %1888, %1873, %257, %333, %1979, %873, %2000, %2003, %2006, %4702, %1967, %1556, %1106, %1085, %266, %253, %235, %226, %231, %223, %769, %770, %4580, %824, %795, %221, %4713, %4712, %1853, %2763, %843, %4457, %2901, %1848, %4710, %2899, %1843, %1670, %1833, %1697, %1568, %1593, %4670, %4497, %2911, %2892, %2880, %2845, %1652, %1622, %909, %272
  %4715 = phi ptr [ %180, %4710 ], [ %180, %4670 ], [ %180, %4497 ], [ %180, %2911 ], [ %180, %2899 ], [ %180, %2892 ], [ %180, %2880 ], [ %180, %2845 ], [ %180, %1843 ], [ %180, %1670 ], [ %180, %1697 ], [ %180, %1833 ], [ %180, %1652 ], [ %180, %1622 ], [ %180, %1568 ], [ %180, %1593 ], [ %180, %909 ], [ %180, %272 ], [ %180, %1848 ], [ %180, %2901 ], [ %180, %4457 ], [ %180, %843 ], [ %180, %2763 ], [ %180, %1853 ], [ %180, %4712 ], [ %180, %4713 ], [ %180, %221 ], [ %180, %795 ], [ %180, %824 ], [ %180, %4580 ], [ %180, %770 ], [ %180, %769 ], [ %180, %223 ], [ %180, %231 ], [ %180, %226 ], [ %180, %235 ], [ %180, %253 ], [ %180, %266 ], [ %180, %1085 ], [ %180, %1106 ], [ %180, %1556 ], [ %180, %1967 ], [ %180, %4702 ], [ %180, %2006 ], [ %180, %2003 ], [ %180, %2000 ], [ %180, %873 ], [ %180, %1979 ], [ %180, %333 ], [ %180, %257 ], [ %180, %1873 ], [ %180, %1888 ], [ %180, %4565 ], [ %180, %2534 ], [ null, %2791 ], [ %180, %2792 ]
  %4716 = phi ptr [ %181, %4710 ], [ %181, %4670 ], [ %181, %4497 ], [ %181, %2911 ], [ %181, %2899 ], [ %181, %2892 ], [ %181, %2880 ], [ %181, %2845 ], [ %181, %1843 ], [ %181, %1670 ], [ %181, %1697 ], [ %181, %1833 ], [ %181, %1652 ], [ %181, %1622 ], [ %181, %1568 ], [ %181, %1593 ], [ %181, %909 ], [ %181, %272 ], [ %181, %1848 ], [ %181, %2901 ], [ %181, %4457 ], [ %181, %843 ], [ %181, %2763 ], [ %181, %1853 ], [ %181, %4712 ], [ %181, %4713 ], [ %181, %221 ], [ %181, %795 ], [ %181, %824 ], [ %181, %4580 ], [ %181, %770 ], [ %181, %769 ], [ %181, %223 ], [ %181, %231 ], [ %181, %226 ], [ %181, %235 ], [ %181, %253 ], [ %181, %266 ], [ %181, %1085 ], [ %181, %1106 ], [ %181, %1556 ], [ %181, %1967 ], [ %181, %4702 ], [ %181, %2006 ], [ %181, %2003 ], [ %181, %2000 ], [ %181, %873 ], [ %181, %1979 ], [ %181, %333 ], [ %181, %257 ], [ %181, %1873 ], [ %181, %1888 ], [ null, %4565 ], [ %181, %2534 ], [ %181, %2791 ], [ %181, %2792 ]
  %4717 = phi i8 [ %168, %4710 ], [ %168, %4670 ], [ %168, %4497 ], [ %168, %2911 ], [ %168, %2899 ], [ %168, %2892 ], [ %168, %2880 ], [ %168, %2845 ], [ %168, %1843 ], [ %168, %1670 ], [ %168, %1697 ], [ %168, %1833 ], [ %168, %1652 ], [ %168, %1622 ], [ %168, %1568 ], [ %168, %1593 ], [ %168, %909 ], [ %168, %272 ], [ %168, %1848 ], [ %168, %2901 ], [ %168, %4457 ], [ %168, %843 ], [ %168, %2763 ], [ %168, %1853 ], [ %168, %4712 ], [ %168, %4713 ], [ %168, %221 ], [ %168, %795 ], [ %168, %824 ], [ %168, %4580 ], [ %168, %257 ], [ %168, %333 ], [ %168, %1979 ], [ %168, %873 ], [ %168, %2000 ], [ %168, %2003 ], [ %168, %2006 ], [ %168, %4702 ], [ %168, %1967 ], [ %1557, %1556 ], [ %168, %1106 ], [ %168, %1085 ], [ %168, %266 ], [ %168, %253 ], [ %168, %235 ], [ %168, %226 ], [ %168, %231 ], [ %168, %223 ], [ %168, %769 ], [ %168, %770 ], [ %168, %1873 ], [ %168, %1888 ], [ %168, %4565 ], [ %168, %2792 ], [ %168, %2791 ], [ %168, %2534 ]
  %4718 = phi ptr [ %106, %4710 ], [ %106, %4670 ], [ %106, %4497 ], [ %106, %2911 ], [ %106, %2899 ], [ %106, %2892 ], [ %106, %2880 ], [ %106, %2845 ], [ %106, %1843 ], [ %106, %1670 ], [ %106, %1697 ], [ %106, %1833 ], [ %106, %1652 ], [ %106, %1622 ], [ %106, %1568 ], [ %106, %1593 ], [ %106, %909 ], [ %106, %272 ], [ %106, %1848 ], [ %106, %2901 ], [ %106, %4457 ], [ %106, %843 ], [ %106, %2763 ], [ %106, %1853 ], [ %106, %4712 ], [ %106, %4713 ], [ %106, %221 ], [ %106, %795 ], [ %106, %824 ], [ %106, %4580 ], [ %106, %770 ], [ %106, %769 ], [ %106, %223 ], [ %106, %231 ], [ %106, %226 ], [ %106, %235 ], [ %106, %253 ], [ %106, %266 ], [ %106, %1085 ], [ %106, %1106 ], [ %106, %1556 ], [ %106, %1967 ], [ %106, %4702 ], [ %106, %2006 ], [ %106, %2003 ], [ %106, %2000 ], [ %106, %873 ], [ %106, %1979 ], [ %106, %333 ], [ %106, %257 ], [ %106, %1873 ], [ %106, %1888 ], [ %106, %4565 ], [ %2318, %2534 ], [ %106, %2791 ], [ %106, %2792 ]
  %4719 = phi ptr [ %107, %4710 ], [ %107, %4670 ], [ %107, %4497 ], [ %107, %2911 ], [ %107, %2899 ], [ %107, %2892 ], [ %107, %2880 ], [ %107, %2845 ], [ %107, %1843 ], [ %107, %1670 ], [ %107, %1697 ], [ %107, %1833 ], [ %107, %1652 ], [ %107, %1622 ], [ %107, %1568 ], [ %107, %1593 ], [ %107, %909 ], [ %107, %272 ], [ %107, %1848 ], [ %107, %2901 ], [ %107, %4457 ], [ %107, %843 ], [ %107, %2763 ], [ %107, %1853 ], [ %107, %4712 ], [ %107, %4713 ], [ %107, %221 ], [ %107, %795 ], [ %107, %824 ], [ %107, %4580 ], [ %107, %770 ], [ %107, %769 ], [ %107, %223 ], [ %107, %231 ], [ %107, %226 ], [ %107, %235 ], [ %107, %253 ], [ %107, %266 ], [ %107, %1085 ], [ %107, %1106 ], [ %107, %1556 ], [ %107, %1967 ], [ %107, %4702 ], [ %107, %2006 ], [ %107, %2003 ], [ %107, %2000 ], [ %107, %873 ], [ %107, %1979 ], [ %107, %333 ], [ %107, %257 ], [ %107, %1873 ], [ %107, %1888 ], [ %107, %4565 ], [ %2066, %2534 ], [ %107, %2791 ], [ %107, %2792 ]
  %4720 = phi i8 [ %108, %4710 ], [ %108, %4670 ], [ %108, %4497 ], [ %108, %2911 ], [ %108, %2899 ], [ %108, %2892 ], [ %108, %2880 ], [ %108, %2845 ], [ %108, %1843 ], [ %108, %1670 ], [ %108, %1697 ], [ %108, %1833 ], [ %108, %1652 ], [ %108, %1622 ], [ %108, %1568 ], [ %108, %1593 ], [ %108, %909 ], [ %108, %272 ], [ %108, %1848 ], [ %108, %2901 ], [ %108, %4457 ], [ %108, %843 ], [ %108, %2763 ], [ %108, %1853 ], [ %108, %4712 ], [ %108, %4713 ], [ %108, %221 ], [ %108, %795 ], [ %108, %824 ], [ %108, %4580 ], [ %108, %770 ], [ %108, %769 ], [ %108, %223 ], [ %108, %231 ], [ %108, %226 ], [ %108, %235 ], [ %108, %253 ], [ %108, %266 ], [ %108, %1085 ], [ %108, %1106 ], [ %108, %1556 ], [ %108, %1967 ], [ %108, %4702 ], [ %108, %2006 ], [ %108, %2003 ], [ %108, %2000 ], [ %108, %873 ], [ %108, %1979 ], [ %108, %333 ], [ %108, %257 ], [ %108, %1873 ], [ %108, %1888 ], [ %108, %4565 ], [ %2319, %2534 ], [ %108, %2791 ], [ %108, %2792 ]
  %4721 = phi ptr [ %109, %4710 ], [ %109, %4670 ], [ %109, %4497 ], [ %109, %2911 ], [ %109, %2899 ], [ %109, %2892 ], [ %109, %2880 ], [ %109, %2845 ], [ %109, %1843 ], [ %109, %1670 ], [ %109, %1697 ], [ %109, %1833 ], [ %109, %1652 ], [ %109, %1622 ], [ %109, %1568 ], [ %109, %1593 ], [ %109, %909 ], [ %109, %272 ], [ %109, %1848 ], [ %109, %2901 ], [ %109, %4457 ], [ %109, %843 ], [ %109, %2763 ], [ %109, %1853 ], [ %109, %4712 ], [ %109, %4713 ], [ %109, %221 ], [ %109, %795 ], [ %109, %824 ], [ %109, %4580 ], [ %109, %770 ], [ %109, %769 ], [ %109, %223 ], [ %109, %231 ], [ %109, %226 ], [ %109, %235 ], [ %109, %253 ], [ %109, %266 ], [ %109, %1085 ], [ %109, %1106 ], [ %109, %1556 ], [ %109, %1967 ], [ %109, %4702 ], [ %109, %2006 ], [ %109, %2003 ], [ %109, %2000 ], [ %109, %873 ], [ %109, %1979 ], [ %109, %333 ], [ %109, %257 ], [ %109, %1873 ], [ %109, %1888 ], [ %109, %4565 ], [ %2321, %2534 ], [ %109, %2791 ], [ %109, %2792 ]
  %4722 = phi ptr [ %110, %4710 ], [ %110, %4670 ], [ %110, %4497 ], [ %110, %2911 ], [ %110, %2899 ], [ %110, %2892 ], [ %110, %2880 ], [ %110, %2845 ], [ %110, %1843 ], [ %110, %1670 ], [ %110, %1697 ], [ %110, %1833 ], [ %110, %1652 ], [ %110, %1622 ], [ %110, %1568 ], [ %110, %1593 ], [ %110, %909 ], [ %110, %272 ], [ %110, %1848 ], [ %110, %2901 ], [ %110, %4457 ], [ %110, %843 ], [ %110, %2763 ], [ %110, %1853 ], [ %110, %4712 ], [ %110, %4713 ], [ %110, %221 ], [ %110, %795 ], [ %110, %824 ], [ %110, %4580 ], [ %110, %770 ], [ %110, %769 ], [ %110, %223 ], [ %110, %231 ], [ %110, %226 ], [ %110, %235 ], [ %110, %253 ], [ %110, %266 ], [ %110, %1085 ], [ %110, %1106 ], [ %110, %1556 ], [ %110, %1967 ], [ %110, %4702 ], [ %110, %2006 ], [ %110, %2003 ], [ %110, %2000 ], [ %110, %873 ], [ %110, %1979 ], [ %110, %333 ], [ %110, %257 ], [ %110, %1873 ], [ %110, %1888 ], [ %110, %4565 ], [ %2317, %2534 ], [ %110, %2791 ], [ %110, %2792 ]
  %4723 = phi i32 [ %170, %4710 ], [ %170, %4670 ], [ %170, %4497 ], [ %2913, %2911 ], [ %170, %2899 ], [ %170, %2892 ], [ %170, %2880 ], [ %170, %2845 ], [ %170, %1843 ], [ %170, %1670 ], [ %170, %1697 ], [ %170, %1833 ], [ %170, %1652 ], [ %170, %1622 ], [ %170, %1568 ], [ %170, %1593 ], [ %170, %909 ], [ %170, %272 ], [ %170, %1848 ], [ %170, %2901 ], [ 0, %4457 ], [ %170, %843 ], [ %170, %2763 ], [ %170, %1853 ], [ %170, %4712 ], [ %170, %4713 ], [ %170, %221 ], [ %170, %795 ], [ %170, %824 ], [ %170, %4580 ], [ %170, %770 ], [ %170, %769 ], [ %170, %223 ], [ %170, %231 ], [ %170, %226 ], [ %170, %235 ], [ %170, %253 ], [ %170, %266 ], [ %170, %1085 ], [ %170, %1106 ], [ %170, %1556 ], [ %170, %1967 ], [ %170, %4702 ], [ %170, %2006 ], [ %170, %2003 ], [ %170, %2000 ], [ %170, %873 ], [ %170, %1979 ], [ %170, %333 ], [ %170, %257 ], [ %170, %1873 ], [ %170, %1888 ], [ %170, %4565 ], [ %2536, %2534 ], [ %170, %2791 ], [ %170, %2792 ]
  %4724 = phi i8 [ %212, %4710 ], [ %212, %4670 ], [ %212, %4497 ], [ %212, %2911 ], [ %212, %2899 ], [ %212, %2892 ], [ %212, %2880 ], [ %212, %2845 ], [ %212, %1843 ], [ %212, %1670 ], [ %212, %1697 ], [ %212, %1833 ], [ %212, %1652 ], [ %212, %1622 ], [ %212, %1568 ], [ %212, %1593 ], [ %212, %909 ], [ %212, %272 ], [ %212, %1848 ], [ %212, %2901 ], [ %212, %4457 ], [ %212, %843 ], [ %212, %2763 ], [ %212, %1853 ], [ %212, %4712 ], [ %212, %4713 ], [ 1, %221 ], [ %212, %795 ], [ %212, %824 ], [ %212, %4580 ], [ %212, %770 ], [ %212, %769 ], [ %212, %223 ], [ %212, %231 ], [ %212, %226 ], [ %212, %235 ], [ %212, %253 ], [ %212, %266 ], [ %212, %1085 ], [ %212, %1106 ], [ %212, %1556 ], [ %212, %1967 ], [ %212, %4702 ], [ %212, %2006 ], [ %212, %2003 ], [ %212, %2000 ], [ %212, %873 ], [ %212, %1979 ], [ %212, %333 ], [ %212, %257 ], [ %212, %1873 ], [ %212, %1888 ], [ %212, %4565 ], [ %212, %2792 ], [ %212, %2791 ], [ %212, %2534 ]
  %4725 = phi i8 [ %172, %4710 ], [ %172, %4670 ], [ %172, %4497 ], [ %172, %2911 ], [ %172, %2899 ], [ %2894, %2892 ], [ %2883, %2880 ], [ %2847, %2845 ], [ %172, %1843 ], [ %172, %1670 ], [ %172, %1697 ], [ %172, %1833 ], [ %172, %1652 ], [ %172, %1622 ], [ %172, %1568 ], [ %172, %1593 ], [ %172, %909 ], [ %172, %272 ], [ %172, %1848 ], [ %172, %2901 ], [ %4458, %4457 ], [ %172, %843 ], [ %172, %2763 ], [ %172, %1853 ], [ %172, %4712 ], [ 0, %4713 ], [ %172, %221 ], [ %172, %795 ], [ %172, %824 ], [ %172, %4580 ], [ %172, %770 ], [ %172, %769 ], [ %172, %223 ], [ %172, %231 ], [ %172, %226 ], [ %172, %235 ], [ %172, %253 ], [ %172, %266 ], [ %172, %1085 ], [ %172, %1106 ], [ %172, %1556 ], [ %172, %1967 ], [ %172, %4702 ], [ %172, %2006 ], [ %172, %2003 ], [ %172, %2000 ], [ %172, %873 ], [ %172, %1979 ], [ %172, %333 ], [ %172, %257 ], [ %172, %1873 ], [ %172, %1888 ], [ %172, %4565 ], [ %2537, %2534 ], [ %172, %2791 ], [ %172, %2792 ]
  %4726 = phi i32 [ %84, %4710 ], [ %84, %4670 ], [ %84, %4497 ], [ %84, %2911 ], [ %84, %2899 ], [ %84, %2892 ], [ %84, %2880 ], [ %84, %2845 ], [ %84, %1843 ], [ %84, %1670 ], [ %84, %1697 ], [ %84, %1833 ], [ %84, %1652 ], [ %84, %1622 ], [ %84, %1568 ], [ %84, %1593 ], [ %84, %909 ], [ %84, %272 ], [ %84, %1848 ], [ %84, %2901 ], [ %84, %4457 ], [ %84, %843 ], [ %2765, %2763 ], [ %84, %1853 ], [ %84, %4712 ], [ %84, %4713 ], [ %84, %221 ], [ %84, %795 ], [ %84, %824 ], [ %84, %4580 ], [ %84, %770 ], [ %84, %769 ], [ %84, %223 ], [ %84, %231 ], [ %84, %226 ], [ %84, %235 ], [ %84, %253 ], [ %84, %266 ], [ %84, %1085 ], [ %84, %1106 ], [ %84, %1556 ], [ %84, %1967 ], [ %84, %4702 ], [ %84, %2006 ], [ %84, %2003 ], [ %84, %2000 ], [ %84, %873 ], [ %84, %1979 ], [ %84, %333 ], [ %84, %257 ], [ %84, %1873 ], [ %84, %1888 ], [ %84, %4565 ], [ %84, %2792 ], [ %84, %2791 ], [ %84, %2534 ]
  %4727 = phi i32 [ %183, %4710 ], [ %183, %4670 ], [ %183, %4497 ], [ %183, %2911 ], [ %183, %2899 ], [ %183, %2892 ], [ %183, %2880 ], [ %183, %2845 ], [ %183, %1843 ], [ %183, %1670 ], [ %183, %1697 ], [ %183, %1833 ], [ %183, %1652 ], [ %183, %1622 ], [ %183, %1568 ], [ %183, %1593 ], [ %183, %909 ], [ %183, %272 ], [ %183, %1848 ], [ %183, %2901 ], [ %183, %4457 ], [ %183, %843 ], [ %183, %2763 ], [ %183, %1853 ], [ %183, %4712 ], [ %183, %4713 ], [ %183, %221 ], [ %183, %795 ], [ %183, %824 ], [ %183, %4580 ], [ %183, %770 ], [ %183, %769 ], [ %183, %223 ], [ %183, %231 ], [ %183, %226 ], [ %183, %235 ], [ %183, %253 ], [ %183, %266 ], [ %183, %1085 ], [ %183, %1106 ], [ %183, %1556 ], [ %183, %1967 ], [ %183, %4702 ], [ %183, %2006 ], [ %183, %2003 ], [ %183, %2000 ], [ %183, %873 ], [ %183, %1979 ], [ %183, %333 ], [ %183, %257 ], [ %183, %1873 ], [ %183, %1888 ], [ %183, %4565 ], [ %2055, %2534 ], [ %183, %2791 ], [ %183, %2792 ]
  %4728 = phi ptr [ %4711, %4710 ], [ %4672, %4670 ], [ %214, %4497 ], [ %214, %2911 ], [ %214, %2899 ], [ %214, %2892 ], [ %214, %2880 ], [ %214, %2845 ], [ %1844, %1843 ], [ %1671, %1670 ], [ %1698, %1697 ], [ %1839, %1833 ], [ %1653, %1652 ], [ %1628, %1622 ], [ %1574, %1568 ], [ %1594, %1593 ], [ %910, %909 ], [ %273, %272 ], [ %1852, %1848 ], [ %214, %2901 ], [ %214, %4457 ], [ %844, %843 ], [ %214, %2763 ], [ %1867, %1853 ], [ %214, %4712 ], [ %214, %4713 ], [ %214, %221 ], [ %797, %795 ], [ %827, %824 ], [ %214, %4580 ], [ %214, %257 ], [ %214, %333 ], [ %1983, %1979 ], [ %881, %873 ], [ %1998, %2000 ], [ %1998, %2003 ], [ %1998, %2006 ], [ %4707, %4702 ], [ %214, %1967 ], [ %214, %1556 ], [ %214, %1106 ], [ %214, %1085 ], [ %214, %266 ], [ %214, %253 ], [ %214, %235 ], [ %214, %226 ], [ %214, %231 ], [ %214, %223 ], [ %214, %769 ], [ %214, %770 ], [ %1894, %1888 ], [ %1875, %1873 ], [ %214, %4565 ], [ %214, %2792 ], [ %214, %2791 ], [ %214, %2534 ]
  %4729 = phi ptr [ %186, %4710 ], [ %186, %4670 ], [ %4503, %4497 ], [ %186, %2911 ], [ %2900, %2899 ], [ %186, %2892 ], [ %186, %2880 ], [ %186, %2845 ], [ %186, %1843 ], [ %186, %1670 ], [ %186, %1697 ], [ %186, %1833 ], [ %186, %1652 ], [ %186, %1622 ], [ %186, %1568 ], [ %186, %1593 ], [ %186, %909 ], [ %186, %272 ], [ %186, %1848 ], [ %2910, %2901 ], [ %4464, %4457 ], [ %186, %843 ], [ %186, %2763 ], [ %186, %1853 ], [ %186, %4712 ], [ %186, %4713 ], [ %186, %221 ], [ %186, %795 ], [ %186, %824 ], [ %186, %4580 ], [ %186, %770 ], [ %186, %769 ], [ %186, %223 ], [ %186, %231 ], [ %186, %226 ], [ %186, %235 ], [ %186, %253 ], [ %186, %266 ], [ %186, %1085 ], [ %186, %1106 ], [ %186, %1556 ], [ %186, %1967 ], [ %186, %4702 ], [ %186, %2006 ], [ %186, %2003 ], [ %186, %2000 ], [ %186, %873 ], [ %186, %1979 ], [ %186, %333 ], [ %186, %257 ], [ %186, %1873 ], [ %186, %1888 ], [ %186, %4565 ], [ %186, %2792 ], [ %186, %2791 ], [ %186, %2534 ]
  br label %73, !llvm.loop !337

4730:                                             ; preds = %2657, %3127, %3275, %4380, %4465, %4519, %2925, %3047
  %4731 = phi i32 [ 106, %3047 ], [ 98, %2925 ], [ 126, %4519 ], [ 116, %4465 ], [ 96, %4380 ], [ 112, %3275 ], [ 108, %3127 ], [ 96, %2657 ]
  %4732 = phi i8 [ %169, %3047 ], [ %169, %2925 ], [ %169, %4519 ], [ %169, %4465 ], [ %4358, %4380 ], [ %169, %3275 ], [ %169, %3127 ], [ %2635, %2657 ]
  %4733 = phi ptr [ %106, %3047 ], [ %106, %2925 ], [ %106, %4519 ], [ %106, %4465 ], [ %106, %4380 ], [ %106, %3275 ], [ %106, %3127 ], [ %2619, %2657 ]
  %4734 = phi ptr [ %107, %3047 ], [ %107, %2925 ], [ %107, %4519 ], [ %107, %4465 ], [ %107, %4380 ], [ %107, %3275 ], [ %107, %3127 ], [ %2620, %2657 ]
  %4735 = phi i8 [ %108, %3047 ], [ %108, %2925 ], [ %108, %4519 ], [ %108, %4465 ], [ %108, %4380 ], [ %108, %3275 ], [ %108, %3127 ], [ %2621, %2657 ]
  %4736 = phi ptr [ %109, %3047 ], [ %109, %2925 ], [ %109, %4519 ], [ %109, %4465 ], [ %109, %4380 ], [ %109, %3275 ], [ %109, %3127 ], [ %2626, %2657 ]
  %4737 = phi ptr [ %110, %3047 ], [ %110, %2925 ], [ %110, %4519 ], [ %110, %4465 ], [ %110, %4380 ], [ %110, %3275 ], [ %110, %3127 ], [ %2627, %2657 ]
  %4738 = phi i32 [ %170, %3047 ], [ %170, %2925 ], [ %170, %4519 ], [ 0, %4465 ], [ %170, %4380 ], [ %170, %3275 ], [ %170, %3127 ], [ %2628, %2657 ]
  %4739 = phi i8 [ %212, %3047 ], [ 0, %2925 ], [ %212, %4519 ], [ %212, %4465 ], [ %4349, %4380 ], [ %3276, %3275 ], [ %212, %3127 ], [ %212, %2657 ]
  %4740 = phi i8 [ %172, %3047 ], [ %172, %2925 ], [ %172, %4519 ], [ %172, %4465 ], [ %172, %4380 ], [ %172, %3275 ], [ %172, %3127 ], [ %2629, %2657 ]
  %4741 = phi ptr [ %173, %3047 ], [ %173, %2925 ], [ %4526, %4519 ], [ %173, %4465 ], [ %173, %4380 ], [ %173, %3275 ], [ %173, %3127 ], [ %173, %2657 ]
  %4742 = phi ptr [ %174, %3047 ], [ %174, %2925 ], [ %4526, %4519 ], [ %174, %4465 ], [ %174, %4380 ], [ %174, %3275 ], [ %174, %3127 ], [ %174, %2657 ]
  %4743 = phi ptr [ %3049, %3047 ], [ %188, %2925 ], [ %179, %4519 ], [ %179, %4465 ], [ %4386, %4380 ], [ %179, %3275 ], [ %3129, %3127 ], [ null, %2657 ]
  %4744 = phi ptr [ %180, %3047 ], [ %180, %2925 ], [ %180, %4519 ], [ %180, %4465 ], [ %4391, %4380 ], [ %180, %3275 ], [ %180, %3127 ], [ %188, %2657 ]
  %4745 = phi ptr [ %181, %3047 ], [ %181, %2925 ], [ %188, %4519 ], [ %181, %4465 ], [ %181, %4380 ], [ %181, %3275 ], [ %181, %3127 ], [ %181, %2657 ]
  %4746 = phi i32 [ %183, %3047 ], [ %183, %2925 ], [ %183, %4519 ], [ %183, %4465 ], [ %4392, %4380 ], [ %183, %3275 ], [ %183, %3127 ], [ %2630, %2657 ]
  %4747 = phi ptr [ %214, %3047 ], [ %214, %2925 ], [ %214, %4519 ], [ %4466, %4465 ], [ %4348, %4380 ], [ %214, %3275 ], [ %214, %3127 ], [ %214, %2657 ]
  %4748 = phi ptr [ %214, %3047 ], [ %214, %2925 ], [ %214, %4519 ], [ %214, %4465 ], [ %4348, %4380 ], [ %214, %3275 ], [ %214, %3127 ], [ %214, %2657 ]
  %4749 = phi ptr [ %186, %3047 ], [ %2926, %2925 ], [ %186, %4519 ], [ %186, %4465 ], [ %186, %4380 ], [ %186, %3275 ], [ %186, %3127 ], [ %186, %2657 ]
  %4750 = phi ptr [ %3057, %3047 ], [ %2932, %2925 ], [ %186, %4519 ], [ %4467, %4465 ], [ %4394, %4380 ], [ %3277, %3275 ], [ %3131, %3127 ], [ %2625, %2657 ]
  %4751 = phi ptr [ %189, %3047 ], [ %189, %2925 ], [ %189, %4519 ], [ %189, %4465 ], [ %4384, %4380 ], [ %189, %3275 ], [ %189, %3127 ], [ %2624, %2657 ]
  %4752 = phi ptr [ %190, %3047 ], [ %190, %2925 ], [ %190, %4519 ], [ %190, %4465 ], [ %4382, %4380 ], [ %190, %3275 ], [ %190, %3127 ], [ %2623, %2657 ]
  %4753 = phi ptr [ %191, %3047 ], [ %191, %2925 ], [ %191, %4519 ], [ %191, %4465 ], [ %4353, %4380 ], [ %191, %3275 ], [ %191, %3127 ], [ %2622, %2657 ]
  store i32 %4731, ptr %188, align 8, !tbaa !276
  br label %4754

4754:                                             ; preds = %4730, %3188
  %4755 = phi i8 [ %169, %3188 ], [ %4732, %4730 ]
  %4756 = phi ptr [ %106, %3188 ], [ %4733, %4730 ]
  %4757 = phi ptr [ %107, %3188 ], [ %4734, %4730 ]
  %4758 = phi i8 [ %108, %3188 ], [ %4735, %4730 ]
  %4759 = phi ptr [ %109, %3188 ], [ %4736, %4730 ]
  %4760 = phi ptr [ %110, %3188 ], [ %4737, %4730 ]
  %4761 = phi i32 [ %170, %3188 ], [ %4738, %4730 ]
  %4762 = phi i8 [ %212, %3188 ], [ %4739, %4730 ]
  %4763 = phi i8 [ %172, %3188 ], [ %4740, %4730 ]
  %4764 = phi ptr [ %173, %3188 ], [ %4741, %4730 ]
  %4765 = phi ptr [ %174, %3188 ], [ %4742, %4730 ]
  %4766 = phi ptr [ %179, %3188 ], [ %4743, %4730 ]
  %4767 = phi ptr [ %180, %3188 ], [ %4744, %4730 ]
  %4768 = phi ptr [ %181, %3188 ], [ %4745, %4730 ]
  %4769 = phi i32 [ %183, %3188 ], [ %4746, %4730 ]
  %4770 = phi ptr [ %214, %3188 ], [ %4747, %4730 ]
  %4771 = phi ptr [ %214, %3188 ], [ %4748, %4730 ]
  %4772 = phi ptr [ %3189, %3188 ], [ %4749, %4730 ]
  %4773 = phi ptr [ %3191, %3188 ], [ %4750, %4730 ]
  %4774 = phi ptr [ %189, %3188 ], [ %4751, %4730 ]
  %4775 = phi ptr [ %190, %3188 ], [ %4752, %4730 ]
  %4776 = phi ptr [ %191, %3188 ], [ %4753, %4730 ]
  %4777 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 0, i32 2
  store ptr %182, ptr %4777, align 8, !tbaa !5
  br label %4778

4778:                                             ; preds = %3188, %3061, %2956, %4584, %4281, %4077, %4754, %4564, %4516, %4171, %3566, %3206, %3170, %759, %238
  %4779 = phi i8 [ %169, %4564 ], [ %169, %4584 ], [ %4755, %4754 ], [ %169, %4516 ], [ %169, %4281 ], [ %169, %4171 ], [ %169, %3566 ], [ %169, %3206 ], [ %169, %3170 ], [ %169, %759 ], [ %169, %238 ], [ %169, %4077 ], [ %169, %2956 ], [ %169, %3061 ], [ %169, %3188 ]
  %4780 = phi ptr [ %106, %4564 ], [ %106, %4584 ], [ %4756, %4754 ], [ %106, %4516 ], [ %106, %4281 ], [ %106, %4171 ], [ %106, %3566 ], [ %106, %3206 ], [ %106, %3170 ], [ %106, %759 ], [ %106, %238 ], [ %106, %4077 ], [ %106, %2956 ], [ %106, %3061 ], [ %106, %3188 ]
  %4781 = phi ptr [ %107, %4564 ], [ %107, %4584 ], [ %4757, %4754 ], [ %107, %4516 ], [ %107, %4281 ], [ %107, %4171 ], [ %107, %3566 ], [ %107, %3206 ], [ %107, %3170 ], [ %107, %759 ], [ %107, %238 ], [ %107, %4077 ], [ %107, %2956 ], [ %107, %3061 ], [ %107, %3188 ]
  %4782 = phi i8 [ %108, %4564 ], [ %108, %4584 ], [ %4758, %4754 ], [ %108, %4516 ], [ %108, %4281 ], [ %108, %4171 ], [ %108, %3566 ], [ %108, %3206 ], [ %108, %3170 ], [ %108, %759 ], [ %108, %238 ], [ %108, %4077 ], [ %108, %2956 ], [ %108, %3061 ], [ %108, %3188 ]
  %4783 = phi ptr [ %109, %4564 ], [ %109, %4584 ], [ %4759, %4754 ], [ %109, %4516 ], [ %109, %4281 ], [ %109, %4171 ], [ %109, %3566 ], [ %109, %3206 ], [ %109, %3170 ], [ %109, %759 ], [ %109, %238 ], [ %109, %4077 ], [ %109, %2956 ], [ %109, %3061 ], [ %109, %3188 ]
  %4784 = phi ptr [ %110, %4564 ], [ %110, %4584 ], [ %4760, %4754 ], [ %110, %4516 ], [ %110, %4281 ], [ %110, %4171 ], [ %110, %3566 ], [ %110, %3206 ], [ %110, %3170 ], [ %110, %759 ], [ %110, %238 ], [ %110, %4077 ], [ %110, %2956 ], [ %110, %3061 ], [ %110, %3188 ]
  %4785 = phi i32 [ %170, %4564 ], [ %170, %4584 ], [ %4761, %4754 ], [ %170, %4516 ], [ %170, %4281 ], [ %170, %4171 ], [ %170, %3566 ], [ %170, %3206 ], [ %170, %3170 ], [ %170, %759 ], [ %170, %238 ], [ %170, %4077 ], [ %170, %2956 ], [ %170, %3061 ], [ %170, %3188 ]
  %4786 = phi i8 [ %212, %4564 ], [ %212, %4584 ], [ %4762, %4754 ], [ %212, %4516 ], [ %4177, %4281 ], [ %4121, %4171 ], [ %3363, %3566 ], [ %212, %3206 ], [ %212, %3170 ], [ %212, %759 ], [ %212, %238 ], [ %3935, %4077 ], [ %212, %2956 ], [ %212, %3061 ], [ %212, %3188 ]
  %4787 = phi i8 [ %172, %4564 ], [ %172, %4584 ], [ %4763, %4754 ], [ %172, %4516 ], [ %172, %4281 ], [ %172, %4171 ], [ %172, %3566 ], [ %172, %3206 ], [ %172, %3170 ], [ %172, %759 ], [ %172, %238 ], [ %172, %4077 ], [ %172, %2956 ], [ %172, %3061 ], [ %172, %3188 ]
  %4788 = phi ptr [ %173, %4564 ], [ %173, %4584 ], [ %4764, %4754 ], [ %4517, %4516 ], [ %173, %4281 ], [ %173, %4171 ], [ %173, %3566 ], [ %3207, %3206 ], [ %173, %3170 ], [ %173, %759 ], [ %173, %238 ], [ %173, %4077 ], [ %173, %2956 ], [ %173, %3061 ], [ %173, %3188 ]
  %4789 = phi ptr [ %174, %4564 ], [ %174, %4584 ], [ %4765, %4754 ], [ %4518, %4516 ], [ %174, %4281 ], [ %174, %4171 ], [ %174, %3566 ], [ %174, %3206 ], [ %174, %3170 ], [ %174, %759 ], [ %174, %238 ], [ %174, %4077 ], [ %174, %2956 ], [ %174, %3061 ], [ %174, %3188 ]
  %4790 = phi i8 [ %176, %4564 ], [ %176, %4584 ], [ %176, %4754 ], [ %176, %4516 ], [ %176, %4281 ], [ %176, %4171 ], [ %176, %3566 ], [ %176, %3206 ], [ %176, %3170 ], [ %609, %759 ], [ %176, %238 ], [ %176, %4077 ], [ %176, %2956 ], [ %176, %3061 ], [ %176, %3188 ]
  %4791 = phi i8 [ %177, %4564 ], [ %177, %4584 ], [ %177, %4754 ], [ %177, %4516 ], [ %177, %4281 ], [ %177, %4171 ], [ %177, %3566 ], [ %177, %3206 ], [ %177, %3170 ], [ %610, %759 ], [ %177, %238 ], [ %177, %4077 ], [ %177, %2956 ], [ %177, %3061 ], [ %177, %3188 ]
  %4792 = phi ptr [ %179, %4564 ], [ %179, %4584 ], [ %4766, %4754 ], [ %179, %4516 ], [ %179, %4281 ], [ %179, %4171 ], [ %179, %3566 ], [ %179, %3206 ], [ %3133, %3170 ], [ %179, %759 ], [ %179, %238 ], [ %179, %4077 ], [ %179, %2956 ], [ %179, %3061 ], [ %179, %3188 ]
  %4793 = phi ptr [ %180, %4564 ], [ %180, %4584 ], [ %4767, %4754 ], [ %180, %4516 ], [ %180, %4281 ], [ %180, %4171 ], [ %3567, %3566 ], [ %180, %3206 ], [ %180, %3170 ], [ %180, %759 ], [ %180, %238 ], [ %180, %4077 ], [ %180, %2956 ], [ %180, %3061 ], [ %180, %3188 ]
  %4794 = phi ptr [ %181, %4564 ], [ %181, %4584 ], [ %4768, %4754 ], [ %181, %4516 ], [ %181, %4281 ], [ %181, %4171 ], [ %181, %3566 ], [ %181, %3206 ], [ %181, %3170 ], [ %181, %759 ], [ %181, %238 ], [ %181, %4077 ], [ %181, %2956 ], [ %181, %3061 ], [ %181, %3188 ]
  %4795 = phi ptr [ %182, %4564 ], [ %182, %4584 ], [ %188, %4754 ], [ %182, %4516 ], [ %182, %4281 ], [ %182, %4171 ], [ %182, %3566 ], [ %182, %3206 ], [ %182, %3170 ], [ %182, %759 ], [ %182, %238 ], [ %182, %4077 ], [ %182, %2956 ], [ %182, %3061 ], [ %182, %3188 ]
  %4796 = phi i32 [ %183, %4564 ], [ %183, %4584 ], [ %4769, %4754 ], [ %183, %4516 ], [ %183, %4281 ], [ %183, %4171 ], [ %183, %3566 ], [ %183, %3206 ], [ %183, %3170 ], [ %183, %759 ], [ %183, %238 ], [ %183, %4077 ], [ %183, %2956 ], [ %183, %3061 ], [ %183, %3188 ]
  %4797 = phi ptr [ %214, %4564 ], [ %214, %4584 ], [ %4770, %4754 ], [ %214, %4516 ], [ %4178, %4281 ], [ %4122, %4171 ], [ %3365, %3566 ], [ %214, %3206 ], [ %214, %3170 ], [ %741, %759 ], [ %214, %238 ], [ %4017, %4077 ], [ %214, %2956 ], [ %214, %3061 ], [ %214, %3188 ]
  %4798 = phi ptr [ %214, %4564 ], [ %214, %4584 ], [ %4771, %4754 ], [ %214, %4516 ], [ %4178, %4281 ], [ %4122, %4171 ], [ %3365, %3566 ], [ %214, %3206 ], [ %214, %3170 ], [ %214, %759 ], [ %214, %238 ], [ %4017, %4077 ], [ %214, %2956 ], [ %214, %3061 ], [ %214, %3188 ]
  %4799 = phi ptr [ %186, %4564 ], [ %186, %4584 ], [ %4772, %4754 ], [ %186, %4516 ], [ %186, %4281 ], [ %186, %4171 ], [ %186, %3566 ], [ %186, %3206 ], [ %186, %3170 ], [ %186, %759 ], [ %186, %238 ], [ %186, %4077 ], [ %186, %2956 ], [ %186, %3061 ], [ %3189, %3188 ]
  %4800 = phi ptr [ %186, %4564 ], [ %186, %4584 ], [ %4773, %4754 ], [ %186, %4516 ], [ %4282, %4281 ], [ %4172, %4171 ], [ %3568, %3566 ], [ %186, %3206 ], [ %3180, %3170 ], [ %755, %759 ], [ %186, %238 ], [ %4078, %4077 ], [ %2957, %2956 ], [ %3043, %3061 ], [ %3191, %3188 ]
  %4801 = phi ptr [ %189, %4564 ], [ %189, %4584 ], [ %4774, %4754 ], [ %189, %4516 ], [ %189, %4281 ], [ %189, %4171 ], [ %189, %3566 ], [ %189, %3206 ], [ %189, %3170 ], [ %189, %759 ], [ %189, %238 ], [ %189, %4077 ], [ %189, %2956 ], [ %189, %3061 ], [ %189, %3188 ]
  %4802 = phi ptr [ %190, %4564 ], [ %190, %4584 ], [ %4775, %4754 ], [ %190, %4516 ], [ %190, %4281 ], [ %190, %4171 ], [ %190, %3566 ], [ %190, %3206 ], [ %190, %3170 ], [ %190, %759 ], [ %190, %238 ], [ %190, %4077 ], [ %190, %2956 ], [ %190, %3061 ], [ %190, %3188 ]
  %4803 = phi ptr [ %191, %4564 ], [ %191, %4584 ], [ %4776, %4754 ], [ %191, %4516 ], [ %191, %4281 ], [ %191, %4171 ], [ %191, %3566 ], [ %191, %3206 ], [ %191, %3170 ], [ %191, %759 ], [ %191, %238 ], [ %191, %4077 ], [ %191, %2956 ], [ %191, %3061 ], [ %191, %3188 ]
  %4804 = add nsw i32 %184, 1
  store ptr %4798, ptr %204, align 8, !tbaa !294
  %4805 = getelementptr inbounds %struct.regmatch_state, ptr %188, i64 1
  %4806 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %4807 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %4806, i64 0, i64 32
  %4808 = icmp ugt ptr %4805, %4807
  br i1 %4808, label %4809, label %4821

4809:                                             ; preds = %4778
  %4810 = getelementptr inbounds %struct.regmatch_slab, ptr %4806, i64 0, i32 2
  %4811 = load ptr, ptr %4810, align 8, !tbaa !209
  %4812 = icmp eq ptr %4811, null
  br i1 %4812, label %4813, label %4819

4813:                                             ; preds = %4809
  %4814 = call ptr @Perl_safesysmalloc(i64 noundef 3976) #12
  %4815 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %4816 = getelementptr inbounds %struct.regmatch_slab, ptr %4814, i64 0, i32 1
  store ptr %4815, ptr %4816, align 8, !tbaa !211
  %4817 = getelementptr inbounds %struct.regmatch_slab, ptr %4814, i64 0, i32 2
  store ptr null, ptr %4817, align 8, !tbaa !209
  %4818 = getelementptr inbounds %struct.regmatch_slab, ptr %4815, i64 0, i32 2
  store ptr %4814, ptr %4818, align 8, !tbaa !209
  br label %4819

4819:                                             ; preds = %4809, %4813
  %4820 = phi ptr [ %4811, %4809 ], [ %4814, %4813 ]
  store ptr %4820, ptr @PL_regmatch_slab, align 8, !tbaa !35
  br label %4821

4821:                                             ; preds = %4819, %4778
  %4822 = phi ptr [ %4820, %4819 ], [ %4805, %4778 ]
  store ptr %4822, ptr @PL_regmatch_state, align 8, !tbaa !35
  br label %103

4823:                                             ; preds = %132
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.17) #12
  br label %4918

4824:                                             ; preds = %221, %221, %2718, %4395, %4527, %3067, %2933
  %4825 = phi i8 [ %169, %4527 ], [ %169, %4395 ], [ %169, %3067 ], [ %169, %2933 ], [ %2664, %2718 ], [ %169, %221 ], [ %169, %221 ]
  %4826 = phi ptr [ %179, %4527 ], [ %179, %4395 ], [ %3068, %3067 ], [ %2934, %2933 ], [ %2720, %2718 ], [ %179, %221 ], [ %179, %221 ]
  %4827 = phi ptr [ %180, %4527 ], [ null, %4395 ], [ %180, %3067 ], [ %180, %2933 ], [ %2719, %2718 ], [ %180, %221 ], [ %180, %221 ]
  %4828 = phi ptr [ %4528, %4527 ], [ %181, %4395 ], [ %181, %3067 ], [ %181, %2933 ], [ %181, %2718 ], [ %181, %221 ], [ %181, %221 ]
  %4829 = phi i32 [ %183, %4527 ], [ %183, %4395 ], [ %183, %3067 ], [ %183, %2933 ], [ %2721, %2718 ], [ %183, %221 ], [ %183, %221 ]
  %4830 = phi ptr [ %189, %4527 ], [ %189, %4395 ], [ %189, %3067 ], [ %189, %2933 ], [ %2690, %2718 ], [ %189, %221 ], [ %189, %221 ]
  %4831 = phi ptr [ %190, %4527 ], [ %190, %4395 ], [ %190, %3067 ], [ %190, %2933 ], [ %2688, %2718 ], [ %190, %221 ], [ %190, %221 ]
  %4832 = phi ptr [ %191, %4527 ], [ %191, %4395 ], [ %191, %3067 ], [ %191, %2933 ], [ %2659, %2718 ], [ %191, %221 ], [ %191, %221 ]
  %4833 = icmp eq ptr %182, null
  br i1 %4833, label %4902, label %4834

4834:                                             ; preds = %4944, %4824
  %4835 = phi ptr [ %4832, %4824 ], [ %4941, %4944 ]
  %4836 = phi ptr [ %4831, %4824 ], [ %4940, %4944 ]
  %4837 = phi ptr [ %4830, %4824 ], [ %4939, %4944 ]
  %4838 = phi ptr [ %188, %4824 ], [ %4938, %4944 ]
  %4839 = phi ptr [ %215, %4824 ], [ %4937, %4944 ]
  %4840 = phi ptr [ %186, %4824 ], [ %4936, %4944 ]
  %4841 = phi ptr [ %214, %4824 ], [ %4935, %4944 ]
  %4842 = phi i32 [ %184, %4824 ], [ %4934, %4944 ]
  %4843 = phi i32 [ %4829, %4824 ], [ %4933, %4944 ]
  %4844 = phi ptr [ %182, %4824 ], [ %4932, %4944 ]
  %4845 = phi ptr [ %4828, %4824 ], [ %4931, %4944 ]
  %4846 = phi ptr [ %4827, %4824 ], [ %4930, %4944 ]
  %4847 = phi ptr [ %4826, %4824 ], [ %4929, %4944 ]
  %4848 = phi i8 [ %177, %4824 ], [ %4928, %4944 ]
  %4849 = phi i8 [ %176, %4824 ], [ %4927, %4944 ]
  %4850 = phi ptr [ %175, %4824 ], [ %4926, %4944 ]
  %4851 = phi ptr [ %174, %4824 ], [ %4925, %4944 ]
  %4852 = phi ptr [ %173, %4824 ], [ %4924, %4944 ]
  %4853 = phi i8 [ %172, %4824 ], [ %4923, %4944 ]
  %4854 = phi i8 [ %212, %4824 ], [ %4922, %4944 ]
  %4855 = phi i32 [ %170, %4824 ], [ %4921, %4944 ]
  %4856 = phi i8 [ %4825, %4824 ], [ %4920, %4944 ]
  %4857 = phi i8 [ %168, %4824 ], [ %4919, %4944 ]
  %4858 = load ptr, ptr @PL_regmatch_slab, align 8
  %4859 = icmp ult ptr %4844, %4858
  %4860 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %4858, i64 0, i64 32
  %4861 = icmp ugt ptr %4844, %4860
  %4862 = select i1 %4859, i1 true, i1 %4861
  br i1 %4862, label %4863, label %4881

4863:                                             ; preds = %4834, %4863
  %4864 = phi ptr [ %4876, %4863 ], [ %4838, %4834 ]
  %4865 = phi i32 [ %4873, %4863 ], [ %4842, %4834 ]
  %4866 = phi ptr [ %4875, %4863 ], [ %4858, %4834 ]
  %4867 = ptrtoint ptr %4864 to i64
  %4868 = ptrtoint ptr %4866 to i64
  %4869 = sub i64 %4867, %4868
  %4870 = sdiv exact i64 %4869, 120
  %4871 = trunc i64 %4870 to i32
  %4872 = xor i32 %4871, -1
  %4873 = add i32 %4865, %4872
  %4874 = getelementptr inbounds %struct.regmatch_slab, ptr %4866, i64 0, i32 1
  %4875 = load ptr, ptr %4874, align 8, !tbaa !211
  %4876 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %4875, i64 0, i64 32
  %4877 = icmp ult ptr %4844, %4875
  %4878 = icmp ugt ptr %4844, %4876
  %4879 = select i1 %4877, i1 true, i1 %4878
  br i1 %4879, label %4863, label %4880, !llvm.loop !358

4880:                                             ; preds = %4863
  store ptr %4875, ptr @PL_regmatch_slab, align 8, !tbaa !35
  br label %4881

4881:                                             ; preds = %4880, %4834
  %4882 = phi i32 [ %4873, %4880 ], [ %4842, %4834 ]
  %4883 = phi ptr [ %4876, %4880 ], [ %4838, %4834 ]
  %4884 = ptrtoint ptr %4883 to i64
  %4885 = ptrtoint ptr %4844 to i64
  %4886 = sub i64 %4884, %4885
  %4887 = sdiv exact i64 %4886, -120
  %4888 = trunc i64 %4887 to i32
  %4889 = add i32 %4882, %4888
  %4890 = getelementptr inbounds %struct.regmatch_state, ptr %4844, i64 0, i32 2
  %4891 = load ptr, ptr %4890, align 8, !tbaa !5
  store ptr %4844, ptr @PL_regmatch_state, align 8, !tbaa !35
  %4892 = and i8 %4848, 1
  %4893 = icmp eq i8 %4892, 0
  br i1 %4893, label %4897, label %4894

4894:                                             ; preds = %4881
  %4895 = getelementptr inbounds %struct.regmatch_state, ptr %4844, i64 0, i32 1
  %4896 = load ptr, ptr %4895, align 8, !tbaa !294
  br label %4897

4897:                                             ; preds = %4894, %4881
  %4898 = phi ptr [ %4896, %4894 ], [ %4841, %4881 ]
  %4899 = load i32, ptr %4844, align 8, !tbaa !276
  %4900 = zext i8 %4892 to i32
  %4901 = add nsw i32 %4899, %4900
  br label %167

4902:                                             ; preds = %4824
  %4903 = load ptr, ptr %67, align 8, !tbaa !208
  %4904 = icmp eq ptr %4903, null
  br i1 %4904, label %4969, label %4905

4905:                                             ; preds = %4902
  %4906 = load ptr, ptr @PL_replgv, align 8, !tbaa !35
  %4907 = getelementptr inbounds %struct.gv, ptr %4906, i64 0, i32 3
  %4908 = load ptr, ptr %4907, align 8, !tbaa !5
  %4909 = load ptr, ptr %4908, align 8, !tbaa !222
  %4910 = icmp eq ptr %51, %4909
  br i1 %4910, label %4969, label %4911

4911:                                             ; preds = %4905
  call void @Perl_sv_setsv_flags(ptr noundef %51, ptr noundef %4909, i32 noundef 1538) #12
  br label %4969

4912:                                             ; preds = %783, %780, %771, %775
  br label %4918

4913:                                             ; preds = %812, %809, %800, %804
  br label %4918

4914:                                             ; preds = %221, %3601, %3344, %3347, %3358, %3438
  %4915 = phi i8 [ %3363, %3438 ], [ %212, %3358 ], [ %212, %3347 ], [ %212, %3344 ], [ %212, %3601 ], [ %212, %221 ]
  %4916 = phi ptr [ %3365, %3438 ], [ %214, %3358 ], [ %214, %3347 ], [ %214, %3344 ], [ %214, %3601 ], [ %214, %221 ]
  %4917 = phi ptr [ %3366, %3438 ], [ %215, %3358 ], [ %215, %3347 ], [ %215, %3344 ], [ %215, %3601 ], [ %215, %221 ]
  br label %4918

4918:                                             ; preds = %221, %4914, %4913, %4912, %4622, %4656, %4630, %4649, %4626, %4621, %4647, %4606, %4604, %4585, %4558, %4553, %4454, %4022, %4015, %840, %834, %829, %4654, %4636, %3786, %3597, %3563, %3013, %546, %3859, %4105, %1979, %873, %3208, %2759, %3239, %2940, %4823, %546, %3891, %223, %231, %229, %235, %253, %257, %266, %268, %270, %274, %845, %888, %898, %905, %1085, %1106, %1556, %1563, %1566, %1581, %1578, %1596, %1602, %1611, %1632, %1639, %1636, %1655, %1661, %1693, %1712, %1753, %1788, %1811, %1827, %1831, %1840, %1937, %1952, %1991, %1990, %1996, %2006, %2003, %3078, %3069, %3101, %3093, %3160, %3155, %4115, %4312, %4479, %4658, %4702, %4395, %3234, %572, %280, %248
  %4919 = phi i8 [ %168, %4702 ], [ %168, %4658 ], [ %168, %4479 ], [ %168, %4395 ], [ %168, %4312 ], [ %168, %4105 ], [ %168, %4115 ], [ %168, %3859 ], [ %168, %3891 ], [ %168, %3234 ], [ %168, %3160 ], [ %168, %3155 ], [ %168, %3101 ], [ %168, %3093 ], [ %168, %3078 ], [ %168, %3069 ], [ %168, %2940 ], [ %168, %1952 ], [ %168, %1979 ], [ %168, %1996 ], [ %168, %2003 ], [ %168, %2006 ], [ %168, %1990 ], [ %168, %1991 ], [ %168, %1937 ], [ %168, %1840 ], [ %168, %1655 ], [ %168, %1661 ], [ %168, %1693 ], [ %168, %1712 ], [ %168, %1831 ], [ %168, %1827 ], [ %168, %1811 ], [ %168, %1788 ], [ %168, %1753 ], [ %168, %1636 ], [ %168, %1639 ], [ %168, %1632 ], [ %168, %1596 ], [ %168, %1602 ], [ %168, %1611 ], [ %168, %1563 ], [ %168, %1566 ], [ %168, %1578 ], [ %168, %1581 ], [ %1557, %1556 ], [ %168, %1106 ], [ %168, %1085 ], [ %168, %873 ], [ %168, %898 ], [ %168, %905 ], [ %168, %888 ], [ %168, %845 ], [ %168, %572 ], [ %168, %546 ], [ %168, %546 ], [ %168, %280 ], [ %168, %274 ], [ %168, %270 ], [ %168, %268 ], [ %168, %266 ], [ %168, %257 ], [ %168, %253 ], [ %168, %248 ], [ %168, %235 ], [ %168, %229 ], [ %168, %231 ], [ %168, %223 ], [ %133, %4823 ], [ %168, %2759 ], [ %168, %3208 ], [ %168, %3239 ], [ %168, %3013 ], [ %168, %3563 ], [ %168, %3597 ], [ %168, %3786 ], [ %168, %4636 ], [ %168, %4654 ], [ %168, %829 ], [ %168, %834 ], [ %168, %840 ], [ %168, %4015 ], [ %168, %4022 ], [ %168, %4454 ], [ %168, %4553 ], [ %168, %4558 ], [ %168, %4585 ], [ %168, %4604 ], [ %168, %4606 ], [ %168, %4647 ], [ %168, %4621 ], [ %168, %4626 ], [ %168, %4649 ], [ %168, %4630 ], [ %168, %4656 ], [ %168, %4622 ], [ %168, %4912 ], [ %168, %4913 ], [ %168, %4914 ], [ %168, %221 ]
  %4920 = phi i8 [ %169, %4702 ], [ %169, %4658 ], [ %169, %4479 ], [ %169, %4395 ], [ %169, %4312 ], [ %169, %4105 ], [ %169, %4115 ], [ %169, %3859 ], [ %169, %3891 ], [ %169, %3234 ], [ %169, %3160 ], [ %169, %3155 ], [ %169, %3101 ], [ %169, %3093 ], [ %169, %3078 ], [ %169, %3069 ], [ %169, %2940 ], [ %169, %1952 ], [ %169, %1979 ], [ %169, %1996 ], [ %169, %2003 ], [ %169, %2006 ], [ %169, %1990 ], [ %169, %1991 ], [ %169, %1937 ], [ %169, %1840 ], [ %169, %1655 ], [ %169, %1661 ], [ %169, %1693 ], [ %169, %1712 ], [ %169, %1831 ], [ %169, %1827 ], [ %169, %1811 ], [ %169, %1788 ], [ %169, %1753 ], [ %169, %1636 ], [ %169, %1639 ], [ %169, %1632 ], [ %169, %1596 ], [ %169, %1602 ], [ %169, %1611 ], [ %169, %1563 ], [ %169, %1566 ], [ %169, %1578 ], [ %169, %1581 ], [ %169, %1556 ], [ %169, %1106 ], [ %169, %1085 ], [ %169, %873 ], [ %169, %898 ], [ %169, %905 ], [ %169, %888 ], [ %169, %845 ], [ %169, %572 ], [ %169, %546 ], [ %169, %546 ], [ %169, %280 ], [ %169, %274 ], [ %169, %270 ], [ %169, %268 ], [ %169, %266 ], [ %169, %257 ], [ %169, %253 ], [ %169, %248 ], [ %169, %235 ], [ %169, %229 ], [ %169, %231 ], [ %169, %223 ], [ %134, %4823 ], [ %2728, %2759 ], [ %169, %3208 ], [ %169, %3239 ], [ %169, %3013 ], [ %169, %3563 ], [ %169, %3597 ], [ %169, %3786 ], [ %169, %4636 ], [ %169, %4654 ], [ %169, %829 ], [ %169, %834 ], [ %169, %840 ], [ %169, %4015 ], [ %169, %4022 ], [ %169, %4454 ], [ %169, %4553 ], [ %169, %4558 ], [ %169, %4585 ], [ %169, %4604 ], [ %169, %4606 ], [ %169, %4647 ], [ %169, %4621 ], [ %169, %4626 ], [ %169, %4649 ], [ %169, %4630 ], [ %169, %4656 ], [ %169, %4622 ], [ %169, %4912 ], [ %169, %4913 ], [ %169, %4914 ], [ %169, %221 ]
  %4921 = phi i32 [ %170, %4702 ], [ %170, %4658 ], [ %170, %4479 ], [ %170, %4395 ], [ %170, %4312 ], [ %170, %4105 ], [ %170, %4115 ], [ %170, %3859 ], [ %170, %3891 ], [ %170, %3234 ], [ %170, %3160 ], [ %170, %3155 ], [ %170, %3101 ], [ %170, %3093 ], [ %170, %3078 ], [ %170, %3069 ], [ %170, %2940 ], [ %170, %1952 ], [ %170, %1979 ], [ %170, %1996 ], [ %170, %2003 ], [ %170, %2006 ], [ %170, %1990 ], [ %170, %1991 ], [ %170, %1937 ], [ %170, %1840 ], [ %170, %1655 ], [ %170, %1661 ], [ %170, %1693 ], [ %170, %1712 ], [ %170, %1831 ], [ %170, %1827 ], [ %170, %1811 ], [ %170, %1788 ], [ %170, %1753 ], [ %170, %1636 ], [ %170, %1639 ], [ %170, %1632 ], [ %170, %1596 ], [ %170, %1602 ], [ %170, %1611 ], [ %170, %1563 ], [ %170, %1566 ], [ %170, %1578 ], [ %170, %1581 ], [ %170, %1556 ], [ %170, %1106 ], [ %170, %1085 ], [ %170, %873 ], [ %170, %898 ], [ %170, %905 ], [ %170, %888 ], [ %170, %845 ], [ %170, %572 ], [ %170, %546 ], [ %170, %546 ], [ %170, %280 ], [ %170, %274 ], [ %170, %270 ], [ %170, %268 ], [ %170, %266 ], [ %170, %257 ], [ %170, %253 ], [ %170, %248 ], [ %170, %235 ], [ %170, %229 ], [ %170, %231 ], [ %170, %223 ], [ %135, %4823 ], [ %170, %2759 ], [ %170, %3208 ], [ %170, %3239 ], [ %170, %3013 ], [ %170, %3563 ], [ %170, %3597 ], [ %170, %3786 ], [ %170, %4636 ], [ %170, %4654 ], [ %170, %829 ], [ %170, %834 ], [ %170, %840 ], [ %170, %4015 ], [ %170, %4022 ], [ 0, %4454 ], [ %170, %4553 ], [ %170, %4558 ], [ %170, %4585 ], [ %170, %4604 ], [ %170, %4606 ], [ %170, %4647 ], [ %170, %4621 ], [ %170, %4626 ], [ %170, %4649 ], [ %170, %4630 ], [ %170, %4656 ], [ %170, %4622 ], [ %170, %4912 ], [ %170, %4913 ], [ %170, %4914 ], [ %170, %221 ]
  %4922 = phi i8 [ %212, %4702 ], [ %212, %4658 ], [ %212, %4479 ], [ %212, %4395 ], [ %4284, %4312 ], [ %212, %4105 ], [ %212, %4115 ], [ 0, %3859 ], [ %212, %3891 ], [ %212, %3234 ], [ %212, %3160 ], [ %212, %3155 ], [ %212, %3101 ], [ %212, %3093 ], [ %212, %3078 ], [ %212, %3069 ], [ %212, %2940 ], [ %212, %1952 ], [ %212, %1979 ], [ %212, %1996 ], [ %212, %2003 ], [ %212, %2006 ], [ %212, %1990 ], [ %212, %1991 ], [ %212, %1937 ], [ %212, %1840 ], [ %212, %1655 ], [ %212, %1661 ], [ %212, %1693 ], [ %212, %1712 ], [ %212, %1831 ], [ %212, %1827 ], [ %212, %1811 ], [ %212, %1788 ], [ %212, %1753 ], [ %212, %1636 ], [ %212, %1639 ], [ %212, %1632 ], [ %212, %1596 ], [ %212, %1602 ], [ %212, %1611 ], [ %212, %1563 ], [ %212, %1566 ], [ %212, %1578 ], [ %212, %1581 ], [ %212, %1556 ], [ %212, %1106 ], [ %212, %1085 ], [ %212, %873 ], [ %212, %898 ], [ %212, %905 ], [ %212, %888 ], [ %212, %845 ], [ %212, %572 ], [ %212, %546 ], [ %212, %546 ], [ %212, %280 ], [ %212, %274 ], [ %212, %270 ], [ %212, %268 ], [ %212, %266 ], [ %212, %257 ], [ %212, %253 ], [ %212, %248 ], [ %212, %235 ], [ %212, %229 ], [ %212, %231 ], [ %212, %223 ], [ %136, %4823 ], [ %212, %2759 ], [ %212, %3208 ], [ %212, %3239 ], [ %212, %3013 ], [ %3363, %3563 ], [ %212, %3597 ], [ %212, %3786 ], [ %212, %4636 ], [ %212, %4654 ], [ %212, %829 ], [ %212, %834 ], [ %212, %840 ], [ %3935, %4015 ], [ %3935, %4022 ], [ %212, %4454 ], [ %212, %4553 ], [ %212, %4558 ], [ %212, %4585 ], [ %212, %4604 ], [ %212, %4606 ], [ %212, %4647 ], [ %212, %4621 ], [ %212, %4626 ], [ %212, %4649 ], [ %212, %4630 ], [ %212, %4656 ], [ %212, %4622 ], [ %212, %4912 ], [ %212, %4913 ], [ %4915, %4914 ], [ %212, %221 ]
  %4923 = phi i8 [ %172, %4702 ], [ %172, %4658 ], [ %172, %4479 ], [ %172, %4395 ], [ %172, %4312 ], [ %172, %4105 ], [ %172, %4115 ], [ %172, %3859 ], [ %172, %3891 ], [ %172, %3234 ], [ %172, %3160 ], [ %172, %3155 ], [ %172, %3101 ], [ %172, %3093 ], [ %172, %3078 ], [ %172, %3069 ], [ %172, %2940 ], [ %172, %1952 ], [ %172, %1979 ], [ %172, %1996 ], [ %172, %2003 ], [ %172, %2006 ], [ %172, %1990 ], [ %172, %1991 ], [ %172, %1937 ], [ %172, %1840 ], [ %172, %1655 ], [ %172, %1661 ], [ %172, %1693 ], [ %172, %1712 ], [ %172, %1831 ], [ %172, %1827 ], [ %172, %1811 ], [ %172, %1788 ], [ %172, %1753 ], [ %172, %1636 ], [ %172, %1639 ], [ %172, %1632 ], [ %172, %1596 ], [ %172, %1602 ], [ %172, %1611 ], [ %172, %1563 ], [ %172, %1566 ], [ %172, %1578 ], [ %172, %1581 ], [ %172, %1556 ], [ %172, %1106 ], [ %172, %1085 ], [ %172, %873 ], [ %172, %898 ], [ %172, %905 ], [ %172, %888 ], [ %172, %845 ], [ %172, %572 ], [ %172, %546 ], [ %172, %546 ], [ %172, %280 ], [ %172, %274 ], [ %172, %270 ], [ %172, %268 ], [ %172, %266 ], [ %172, %257 ], [ %172, %253 ], [ %172, %248 ], [ %172, %235 ], [ %172, %229 ], [ %172, %231 ], [ %172, %223 ], [ %137, %4823 ], [ %172, %2759 ], [ %172, %3208 ], [ %172, %3239 ], [ %172, %3013 ], [ %172, %3563 ], [ %172, %3597 ], [ %172, %3786 ], [ %172, %4636 ], [ %172, %4654 ], [ %172, %829 ], [ %172, %834 ], [ %172, %840 ], [ %172, %4015 ], [ %172, %4022 ], [ %172, %4454 ], [ %172, %4553 ], [ %172, %4558 ], [ %172, %4585 ], [ %172, %4604 ], [ %172, %4606 ], [ %172, %4647 ], [ %172, %4621 ], [ %172, %4626 ], [ %172, %4649 ], [ %172, %4630 ], [ %172, %4656 ], [ %172, %4622 ], [ %172, %4912 ], [ %172, %4913 ], [ %172, %4914 ], [ %172, %221 ]
  %4924 = phi ptr [ %173, %4702 ], [ %173, %4658 ], [ %173, %4479 ], [ %173, %4395 ], [ %173, %4312 ], [ %173, %4105 ], [ %173, %4115 ], [ %173, %3859 ], [ %173, %3891 ], [ %173, %3234 ], [ %173, %3160 ], [ %173, %3155 ], [ %173, %3101 ], [ %173, %3093 ], [ %173, %3078 ], [ %173, %3069 ], [ %173, %2940 ], [ %173, %1952 ], [ %173, %1979 ], [ %173, %1996 ], [ %173, %2003 ], [ %173, %2006 ], [ %173, %1990 ], [ %173, %1991 ], [ %173, %1937 ], [ %173, %1840 ], [ %173, %1655 ], [ %173, %1661 ], [ %173, %1693 ], [ %173, %1712 ], [ %173, %1831 ], [ %173, %1827 ], [ %173, %1811 ], [ %173, %1788 ], [ %173, %1753 ], [ %173, %1636 ], [ %173, %1639 ], [ %173, %1632 ], [ %173, %1596 ], [ %173, %1602 ], [ %173, %1611 ], [ %173, %1563 ], [ %173, %1566 ], [ %173, %1578 ], [ %173, %1581 ], [ %173, %1556 ], [ %173, %1106 ], [ %173, %1085 ], [ %173, %873 ], [ %173, %898 ], [ %173, %905 ], [ %173, %888 ], [ %173, %845 ], [ %173, %572 ], [ %173, %546 ], [ %173, %546 ], [ %173, %280 ], [ %173, %274 ], [ %173, %270 ], [ %173, %268 ], [ %173, %266 ], [ %173, %257 ], [ %173, %253 ], [ %173, %248 ], [ %173, %235 ], [ %173, %229 ], [ %173, %231 ], [ %173, %223 ], [ %138, %4823 ], [ %173, %2759 ], [ %173, %3208 ], [ %173, %3239 ], [ %173, %3013 ], [ %173, %3563 ], [ %173, %3597 ], [ %173, %3786 ], [ %173, %4636 ], [ %173, %4654 ], [ %173, %829 ], [ %173, %834 ], [ %173, %840 ], [ %173, %4015 ], [ %173, %4022 ], [ %173, %4454 ], [ null, %4553 ], [ %4560, %4558 ], [ %173, %4585 ], [ %173, %4604 ], [ %173, %4606 ], [ %173, %4647 ], [ %173, %4621 ], [ %173, %4626 ], [ %173, %4649 ], [ %173, %4630 ], [ %173, %4656 ], [ %173, %4622 ], [ %173, %4912 ], [ %173, %4913 ], [ %173, %4914 ], [ %173, %221 ]
  %4925 = phi ptr [ %174, %4702 ], [ %174, %4658 ], [ %174, %4479 ], [ %174, %4395 ], [ %174, %4312 ], [ %174, %4105 ], [ %174, %4115 ], [ %174, %3859 ], [ %174, %3891 ], [ %174, %3234 ], [ %174, %3160 ], [ %174, %3155 ], [ %174, %3101 ], [ %174, %3093 ], [ %174, %3078 ], [ %174, %3069 ], [ %174, %2940 ], [ %174, %1952 ], [ %174, %1979 ], [ %174, %1996 ], [ %174, %2003 ], [ %174, %2006 ], [ %174, %1990 ], [ %174, %1991 ], [ %174, %1937 ], [ %174, %1840 ], [ %174, %1655 ], [ %174, %1661 ], [ %174, %1693 ], [ %174, %1712 ], [ %174, %1831 ], [ %174, %1827 ], [ %174, %1811 ], [ %174, %1788 ], [ %174, %1753 ], [ %174, %1636 ], [ %174, %1639 ], [ %174, %1632 ], [ %174, %1596 ], [ %174, %1602 ], [ %174, %1611 ], [ %174, %1563 ], [ %174, %1566 ], [ %174, %1578 ], [ %174, %1581 ], [ %174, %1556 ], [ %174, %1106 ], [ %174, %1085 ], [ %174, %873 ], [ %174, %898 ], [ %174, %905 ], [ %174, %888 ], [ %174, %845 ], [ %174, %572 ], [ %174, %546 ], [ %174, %546 ], [ %174, %280 ], [ %174, %274 ], [ %174, %270 ], [ %174, %268 ], [ %174, %266 ], [ %174, %257 ], [ %174, %253 ], [ %174, %248 ], [ %174, %235 ], [ %174, %229 ], [ %174, %231 ], [ %174, %223 ], [ %139, %4823 ], [ %174, %2759 ], [ %3211, %3208 ], [ %174, %3239 ], [ %174, %3013 ], [ %174, %3563 ], [ %174, %3597 ], [ %174, %3786 ], [ %174, %4636 ], [ %174, %4654 ], [ %174, %829 ], [ %174, %834 ], [ %174, %840 ], [ %174, %4015 ], [ %174, %4022 ], [ %174, %4454 ], [ %4554, %4553 ], [ %4554, %4558 ], [ %174, %4585 ], [ %174, %4604 ], [ %4608, %4606 ], [ %174, %4647 ], [ %174, %4621 ], [ %174, %4626 ], [ %174, %4649 ], [ %174, %4630 ], [ %174, %4656 ], [ %174, %4622 ], [ %174, %4912 ], [ %174, %4913 ], [ %174, %4914 ], [ %174, %221 ]
  %4926 = phi ptr [ %175, %4702 ], [ %175, %4658 ], [ %175, %4479 ], [ %175, %4395 ], [ %175, %4312 ], [ %175, %4105 ], [ %175, %4115 ], [ %175, %3859 ], [ %175, %3891 ], [ %175, %3234 ], [ %175, %3160 ], [ %175, %3155 ], [ %175, %3101 ], [ %175, %3093 ], [ %175, %3078 ], [ %175, %3069 ], [ %175, %2940 ], [ %175, %1952 ], [ %175, %1979 ], [ %175, %1996 ], [ %175, %2003 ], [ %175, %2006 ], [ %175, %1990 ], [ %175, %1991 ], [ %175, %1937 ], [ %175, %1840 ], [ %175, %1655 ], [ %175, %1661 ], [ %175, %1693 ], [ %175, %1712 ], [ %175, %1831 ], [ %175, %1827 ], [ %175, %1811 ], [ %175, %1788 ], [ %175, %1753 ], [ %175, %1636 ], [ %175, %1639 ], [ %175, %1632 ], [ %175, %1596 ], [ %175, %1602 ], [ %175, %1611 ], [ %175, %1563 ], [ %175, %1566 ], [ %175, %1578 ], [ %175, %1581 ], [ %175, %1556 ], [ %175, %1106 ], [ %175, %1085 ], [ %175, %873 ], [ %175, %898 ], [ %175, %905 ], [ %175, %888 ], [ %175, %845 ], [ %175, %572 ], [ %175, %546 ], [ %175, %546 ], [ %175, %280 ], [ %175, %274 ], [ %175, %270 ], [ %175, %268 ], [ %175, %266 ], [ %175, %257 ], [ %175, %253 ], [ %175, %248 ], [ %175, %235 ], [ %175, %229 ], [ %175, %231 ], [ %175, %223 ], [ %140, %4823 ], [ %175, %2759 ], [ %175, %3208 ], [ %175, %3239 ], [ %175, %3013 ], [ %175, %3563 ], [ %175, %3597 ], [ %175, %3786 ], [ %175, %4636 ], [ %175, %4654 ], [ %175, %829 ], [ %175, %834 ], [ %175, %840 ], [ %175, %4015 ], [ %175, %4022 ], [ %175, %4454 ], [ %4555, %4553 ], [ %4555, %4558 ], [ %4586, %4585 ], [ %175, %4604 ], [ %175, %4606 ], [ %175, %4647 ], [ %175, %4621 ], [ %175, %4626 ], [ %175, %4649 ], [ %175, %4630 ], [ %175, %4656 ], [ %175, %4622 ], [ %175, %4912 ], [ %175, %4913 ], [ %175, %4914 ], [ %175, %221 ]
  %4927 = phi i8 [ %176, %4702 ], [ %176, %4658 ], [ %176, %4479 ], [ %176, %4395 ], [ %176, %4312 ], [ %176, %4105 ], [ %176, %4115 ], [ %176, %3859 ], [ %176, %3891 ], [ %3215, %3234 ], [ %176, %3160 ], [ %176, %3155 ], [ %176, %3101 ], [ %176, %3093 ], [ %176, %3078 ], [ %176, %3069 ], [ %176, %2940 ], [ %176, %1952 ], [ %176, %1979 ], [ %176, %1996 ], [ %176, %2003 ], [ %176, %2006 ], [ %176, %1990 ], [ %176, %1991 ], [ %176, %1937 ], [ %176, %1840 ], [ %176, %1655 ], [ %176, %1661 ], [ %176, %1693 ], [ %176, %1712 ], [ %176, %1831 ], [ %176, %1827 ], [ %176, %1811 ], [ %176, %1788 ], [ %176, %1753 ], [ %176, %1636 ], [ %176, %1639 ], [ %176, %1632 ], [ %176, %1596 ], [ %176, %1602 ], [ %176, %1611 ], [ %176, %1563 ], [ %176, %1566 ], [ %176, %1578 ], [ %176, %1581 ], [ %176, %1556 ], [ %176, %1106 ], [ %176, %1085 ], [ %176, %873 ], [ %176, %898 ], [ %176, %905 ], [ %176, %888 ], [ %176, %845 ], [ %176, %572 ], [ %176, %546 ], [ %176, %546 ], [ %176, %280 ], [ %176, %274 ], [ %176, %270 ], [ %176, %268 ], [ %176, %266 ], [ %176, %257 ], [ %176, %253 ], [ %176, %248 ], [ %176, %235 ], [ %176, %229 ], [ %176, %231 ], [ %176, %223 ], [ %141, %4823 ], [ %176, %2759 ], [ 1, %3208 ], [ %3215, %3239 ], [ %176, %3013 ], [ %176, %3563 ], [ %176, %3597 ], [ %176, %3786 ], [ %176, %4636 ], [ %176, %4654 ], [ %176, %829 ], [ %176, %834 ], [ %176, %840 ], [ %176, %4015 ], [ %176, %4022 ], [ %176, %4454 ], [ %176, %4553 ], [ %176, %4558 ], [ %176, %4585 ], [ %176, %4604 ], [ %176, %4606 ], [ %176, %4647 ], [ %176, %4621 ], [ %176, %4626 ], [ %176, %4649 ], [ %176, %4630 ], [ %176, %4656 ], [ %176, %4622 ], [ %176, %4912 ], [ %176, %4913 ], [ %176, %4914 ], [ %176, %221 ]
  %4928 = phi i8 [ %177, %4702 ], [ %177, %4658 ], [ %177, %4479 ], [ %177, %4395 ], [ %177, %4312 ], [ %177, %4105 ], [ %177, %4115 ], [ %177, %3859 ], [ %177, %3891 ], [ %3216, %3234 ], [ %177, %3160 ], [ %177, %3155 ], [ %177, %3101 ], [ %177, %3093 ], [ %177, %3078 ], [ %177, %3069 ], [ %177, %2940 ], [ %177, %1952 ], [ %177, %1979 ], [ %177, %1996 ], [ %177, %2003 ], [ %177, %2006 ], [ %177, %1990 ], [ %177, %1991 ], [ %177, %1937 ], [ %177, %1840 ], [ %177, %1655 ], [ %177, %1661 ], [ %177, %1693 ], [ %177, %1712 ], [ %177, %1831 ], [ %177, %1827 ], [ %177, %1811 ], [ %177, %1788 ], [ %177, %1753 ], [ %177, %1636 ], [ %177, %1639 ], [ %177, %1632 ], [ %177, %1596 ], [ %177, %1602 ], [ %177, %1611 ], [ %177, %1563 ], [ %177, %1566 ], [ %177, %1578 ], [ %177, %1581 ], [ %177, %1556 ], [ %177, %1106 ], [ %177, %1085 ], [ %177, %873 ], [ %177, %898 ], [ %177, %905 ], [ %177, %888 ], [ %177, %845 ], [ %177, %572 ], [ %177, %546 ], [ %177, %546 ], [ %177, %280 ], [ %177, %274 ], [ %177, %270 ], [ %177, %268 ], [ %177, %266 ], [ %177, %257 ], [ %177, %253 ], [ %177, %248 ], [ %177, %235 ], [ %177, %229 ], [ %177, %231 ], [ %177, %223 ], [ %142, %4823 ], [ %177, %2759 ], [ 1, %3208 ], [ %3216, %3239 ], [ %177, %3013 ], [ %177, %3563 ], [ %177, %3597 ], [ %177, %3786 ], [ %177, %4636 ], [ %177, %4654 ], [ %177, %829 ], [ %177, %834 ], [ %177, %840 ], [ %177, %4015 ], [ %177, %4022 ], [ %177, %4454 ], [ %177, %4553 ], [ %177, %4558 ], [ 1, %4585 ], [ 1, %4604 ], [ 1, %4606 ], [ %177, %4647 ], [ %177, %4621 ], [ %177, %4626 ], [ %177, %4649 ], [ %177, %4630 ], [ %177, %4656 ], [ %177, %4622 ], [ %177, %4912 ], [ %177, %4913 ], [ %177, %4914 ], [ 1, %221 ]
  %4929 = phi ptr [ %179, %4702 ], [ %179, %4658 ], [ %179, %4479 ], [ %179, %4395 ], [ %179, %4312 ], [ %179, %4105 ], [ %179, %4115 ], [ %179, %3859 ], [ %179, %3891 ], [ %179, %3234 ], [ %3133, %3160 ], [ %3133, %3155 ], [ %179, %3101 ], [ %179, %3093 ], [ %3070, %3078 ], [ %3070, %3069 ], [ %2941, %2940 ], [ %179, %1952 ], [ %179, %1979 ], [ %179, %1996 ], [ %179, %2003 ], [ %179, %2006 ], [ %179, %1990 ], [ %179, %1991 ], [ %179, %1937 ], [ %179, %1840 ], [ %179, %1655 ], [ %179, %1661 ], [ %179, %1693 ], [ %179, %1712 ], [ %179, %1831 ], [ %179, %1827 ], [ %179, %1811 ], [ %179, %1788 ], [ %179, %1753 ], [ %179, %1636 ], [ %179, %1639 ], [ %179, %1632 ], [ %179, %1596 ], [ %179, %1602 ], [ %179, %1611 ], [ %179, %1563 ], [ %179, %1566 ], [ %179, %1578 ], [ %179, %1581 ], [ %179, %1556 ], [ %179, %1106 ], [ %179, %1085 ], [ %179, %873 ], [ %179, %898 ], [ %179, %905 ], [ %179, %888 ], [ %179, %845 ], [ %179, %572 ], [ %179, %546 ], [ %179, %546 ], [ %179, %280 ], [ %179, %274 ], [ %179, %270 ], [ %179, %268 ], [ %179, %266 ], [ %179, %257 ], [ %179, %253 ], [ %179, %248 ], [ %179, %235 ], [ %179, %229 ], [ %179, %231 ], [ %179, %223 ], [ %143, %4823 ], [ %2761, %2759 ], [ %179, %3208 ], [ %179, %3239 ], [ %179, %3013 ], [ %179, %3563 ], [ %179, %3597 ], [ %179, %3786 ], [ %179, %4636 ], [ %179, %4654 ], [ %179, %829 ], [ %179, %834 ], [ %179, %840 ], [ %179, %4015 ], [ %179, %4022 ], [ %179, %4454 ], [ %179, %4553 ], [ %179, %4558 ], [ %179, %4585 ], [ %179, %4604 ], [ %179, %4606 ], [ %179, %4647 ], [ %179, %4621 ], [ %179, %4626 ], [ %179, %4649 ], [ %179, %4630 ], [ %179, %4656 ], [ %179, %4622 ], [ %179, %4912 ], [ %179, %4913 ], [ %179, %4914 ], [ %179, %221 ]
  %4930 = phi ptr [ %180, %4702 ], [ %180, %4658 ], [ %180, %4479 ], [ null, %4395 ], [ %180, %4312 ], [ %180, %4105 ], [ %180, %4115 ], [ %180, %3859 ], [ %180, %3891 ], [ %180, %3234 ], [ %180, %3160 ], [ %180, %3155 ], [ %180, %3101 ], [ %180, %3093 ], [ %180, %3078 ], [ %180, %3069 ], [ %180, %2940 ], [ %180, %1952 ], [ %180, %1979 ], [ %180, %1996 ], [ %180, %2003 ], [ %180, %2006 ], [ %180, %1990 ], [ %180, %1991 ], [ %180, %1937 ], [ %180, %1840 ], [ %180, %1655 ], [ %180, %1661 ], [ %180, %1693 ], [ %180, %1712 ], [ %180, %1831 ], [ %180, %1827 ], [ %180, %1811 ], [ %180, %1788 ], [ %180, %1753 ], [ %180, %1636 ], [ %180, %1639 ], [ %180, %1632 ], [ %180, %1596 ], [ %180, %1602 ], [ %180, %1611 ], [ %180, %1563 ], [ %180, %1566 ], [ %180, %1578 ], [ %180, %1581 ], [ %180, %1556 ], [ %180, %1106 ], [ %180, %1085 ], [ %180, %873 ], [ %180, %898 ], [ %180, %905 ], [ %180, %888 ], [ %180, %845 ], [ %180, %572 ], [ %180, %546 ], [ %180, %546 ], [ %180, %280 ], [ %180, %274 ], [ %180, %270 ], [ %180, %268 ], [ %180, %266 ], [ %180, %257 ], [ %180, %253 ], [ %180, %248 ], [ %180, %235 ], [ %180, %229 ], [ %180, %231 ], [ %180, %223 ], [ %144, %4823 ], [ %2760, %2759 ], [ %180, %3208 ], [ %180, %3239 ], [ %180, %3013 ], [ %180, %3563 ], [ %180, %3597 ], [ %180, %3786 ], [ %180, %4636 ], [ %180, %4654 ], [ %180, %829 ], [ %180, %834 ], [ %180, %840 ], [ %180, %4015 ], [ %180, %4022 ], [ %180, %4454 ], [ %180, %4553 ], [ %180, %4558 ], [ %180, %4585 ], [ %180, %4604 ], [ %180, %4606 ], [ %180, %4647 ], [ %180, %4621 ], [ %180, %4626 ], [ %180, %4649 ], [ %180, %4630 ], [ %180, %4656 ], [ %180, %4622 ], [ %180, %4912 ], [ %180, %4913 ], [ %180, %4914 ], [ %180, %221 ]
  %4931 = phi ptr [ %181, %4702 ], [ %181, %4658 ], [ %181, %4479 ], [ %181, %4395 ], [ %181, %4312 ], [ %181, %4105 ], [ %181, %4115 ], [ %181, %3859 ], [ %181, %3891 ], [ %181, %3234 ], [ %181, %3160 ], [ %181, %3155 ], [ %181, %3101 ], [ %181, %3093 ], [ %181, %3078 ], [ %181, %3069 ], [ %181, %2940 ], [ %181, %1952 ], [ %181, %1979 ], [ %181, %1996 ], [ %181, %2003 ], [ %181, %2006 ], [ %181, %1990 ], [ %181, %1991 ], [ %181, %1937 ], [ %181, %1840 ], [ %181, %1655 ], [ %181, %1661 ], [ %181, %1693 ], [ %181, %1712 ], [ %181, %1831 ], [ %181, %1827 ], [ %181, %1811 ], [ %181, %1788 ], [ %181, %1753 ], [ %181, %1636 ], [ %181, %1639 ], [ %181, %1632 ], [ %181, %1596 ], [ %181, %1602 ], [ %181, %1611 ], [ %181, %1563 ], [ %181, %1566 ], [ %181, %1578 ], [ %181, %1581 ], [ %181, %1556 ], [ %181, %1106 ], [ %181, %1085 ], [ %181, %873 ], [ %181, %898 ], [ %181, %905 ], [ %181, %888 ], [ %181, %845 ], [ %181, %572 ], [ %181, %546 ], [ %181, %546 ], [ %181, %280 ], [ %181, %274 ], [ %181, %270 ], [ %181, %268 ], [ %181, %266 ], [ %181, %257 ], [ %181, %253 ], [ %181, %248 ], [ %181, %235 ], [ %181, %229 ], [ %181, %231 ], [ %181, %223 ], [ %145, %4823 ], [ %181, %2759 ], [ %181, %3208 ], [ %181, %3239 ], [ %181, %3013 ], [ %181, %3563 ], [ %181, %3597 ], [ %181, %3786 ], [ %181, %4636 ], [ %181, %4654 ], [ %181, %829 ], [ %181, %834 ], [ %181, %840 ], [ %181, %4015 ], [ %181, %4022 ], [ %181, %4454 ], [ %4556, %4553 ], [ %4556, %4558 ], [ %181, %4585 ], [ %181, %4604 ], [ %181, %4606 ], [ %181, %4647 ], [ %181, %4621 ], [ %181, %4626 ], [ %181, %4649 ], [ %181, %4630 ], [ %181, %4656 ], [ %181, %4622 ], [ %181, %4912 ], [ %181, %4913 ], [ %181, %4914 ], [ %181, %221 ]
  %4932 = phi ptr [ %182, %4702 ], [ %182, %4658 ], [ %182, %4479 ], [ %182, %4395 ], [ %182, %4312 ], [ %182, %4105 ], [ %182, %4115 ], [ %182, %3859 ], [ %182, %3891 ], [ %182, %3234 ], [ %182, %3160 ], [ %182, %3155 ], [ %182, %3101 ], [ %182, %3093 ], [ %182, %3078 ], [ %182, %3069 ], [ %182, %2940 ], [ %182, %1952 ], [ %182, %1979 ], [ %182, %1996 ], [ %182, %2003 ], [ %182, %2006 ], [ %182, %1990 ], [ %182, %1991 ], [ %182, %1937 ], [ %182, %1840 ], [ %182, %1655 ], [ %182, %1661 ], [ %182, %1693 ], [ %182, %1712 ], [ %182, %1831 ], [ %182, %1827 ], [ %182, %1811 ], [ %182, %1788 ], [ %182, %1753 ], [ %182, %1636 ], [ %182, %1639 ], [ %182, %1632 ], [ %182, %1596 ], [ %182, %1602 ], [ %182, %1611 ], [ %182, %1563 ], [ %182, %1566 ], [ %182, %1578 ], [ %182, %1581 ], [ %182, %1556 ], [ %182, %1106 ], [ %182, %1085 ], [ %182, %873 ], [ %182, %898 ], [ %182, %905 ], [ %182, %888 ], [ %182, %845 ], [ %182, %572 ], [ %182, %546 ], [ %182, %546 ], [ %182, %280 ], [ %182, %274 ], [ %182, %270 ], [ %182, %268 ], [ %182, %266 ], [ %182, %257 ], [ %182, %253 ], [ %182, %248 ], [ %182, %235 ], [ %182, %229 ], [ %182, %231 ], [ %182, %223 ], [ %146, %4823 ], [ %182, %2759 ], [ %182, %3208 ], [ %182, %3239 ], [ %182, %3013 ], [ %182, %3563 ], [ %182, %3597 ], [ %182, %3786 ], [ %182, %4636 ], [ %182, %4654 ], [ %182, %829 ], [ %182, %834 ], [ %182, %840 ], [ %182, %4015 ], [ %182, %4022 ], [ %182, %4454 ], [ %182, %4553 ], [ %182, %4558 ], [ %182, %4585 ], [ %182, %4604 ], [ %182, %4606 ], [ %182, %4647 ], [ %182, %4621 ], [ %182, %4626 ], [ %182, %4649 ], [ %182, %4630 ], [ %182, %4656 ], [ %182, %4622 ], [ %182, %4912 ], [ %182, %4913 ], [ %182, %4914 ], [ %182, %221 ]
  %4933 = phi i32 [ %183, %4702 ], [ %183, %4658 ], [ %183, %4479 ], [ %183, %4395 ], [ %183, %4312 ], [ %183, %4105 ], [ %183, %4115 ], [ %183, %3859 ], [ %183, %3891 ], [ %183, %3234 ], [ %183, %3160 ], [ %183, %3155 ], [ %183, %3101 ], [ %183, %3093 ], [ %183, %3078 ], [ %183, %3069 ], [ %183, %2940 ], [ %183, %1952 ], [ %183, %1979 ], [ %183, %1996 ], [ %183, %2003 ], [ %183, %2006 ], [ %183, %1990 ], [ %183, %1991 ], [ %183, %1937 ], [ %183, %1840 ], [ %183, %1655 ], [ %183, %1661 ], [ %183, %1693 ], [ %183, %1712 ], [ %183, %1831 ], [ %183, %1827 ], [ %183, %1811 ], [ %183, %1788 ], [ %183, %1753 ], [ %183, %1636 ], [ %183, %1639 ], [ %183, %1632 ], [ %183, %1596 ], [ %183, %1602 ], [ %183, %1611 ], [ %183, %1563 ], [ %183, %1566 ], [ %183, %1578 ], [ %183, %1581 ], [ %183, %1556 ], [ %183, %1106 ], [ %183, %1085 ], [ %183, %873 ], [ %183, %898 ], [ %183, %905 ], [ %183, %888 ], [ %183, %845 ], [ %183, %572 ], [ %183, %546 ], [ %183, %546 ], [ %183, %280 ], [ %183, %274 ], [ %183, %270 ], [ %183, %268 ], [ %183, %266 ], [ %183, %257 ], [ %183, %253 ], [ %183, %248 ], [ %183, %235 ], [ %183, %229 ], [ %183, %231 ], [ %183, %223 ], [ %147, %4823 ], [ %2762, %2759 ], [ %183, %3208 ], [ %183, %3239 ], [ %183, %3013 ], [ %183, %3563 ], [ %183, %3597 ], [ %183, %3786 ], [ %183, %4636 ], [ %183, %4654 ], [ %183, %829 ], [ %183, %834 ], [ %183, %840 ], [ %183, %4015 ], [ %183, %4022 ], [ %183, %4454 ], [ %183, %4553 ], [ %183, %4558 ], [ %183, %4585 ], [ %183, %4604 ], [ %183, %4606 ], [ %183, %4647 ], [ %183, %4621 ], [ %183, %4626 ], [ %183, %4649 ], [ %183, %4630 ], [ %183, %4656 ], [ %183, %4622 ], [ %183, %4912 ], [ %183, %4913 ], [ %183, %4914 ], [ %183, %221 ]
  %4934 = phi i32 [ %184, %4702 ], [ %184, %4658 ], [ %184, %4479 ], [ %184, %4395 ], [ %184, %4312 ], [ %184, %4105 ], [ %184, %4115 ], [ %184, %3859 ], [ %184, %3891 ], [ %184, %3234 ], [ %184, %3160 ], [ %184, %3155 ], [ %184, %3101 ], [ %184, %3093 ], [ %184, %3078 ], [ %184, %3069 ], [ %184, %2940 ], [ %184, %1952 ], [ %184, %1979 ], [ %184, %1996 ], [ %184, %2003 ], [ %184, %2006 ], [ %184, %1990 ], [ %184, %1991 ], [ %184, %1937 ], [ %184, %1840 ], [ %184, %1655 ], [ %184, %1661 ], [ %184, %1693 ], [ %184, %1712 ], [ %184, %1831 ], [ %184, %1827 ], [ %184, %1811 ], [ %184, %1788 ], [ %184, %1753 ], [ %184, %1636 ], [ %184, %1639 ], [ %184, %1632 ], [ %184, %1596 ], [ %184, %1602 ], [ %184, %1611 ], [ %184, %1563 ], [ %184, %1566 ], [ %184, %1578 ], [ %184, %1581 ], [ %184, %1556 ], [ %184, %1106 ], [ %184, %1085 ], [ %184, %873 ], [ %184, %898 ], [ %184, %905 ], [ %184, %888 ], [ %184, %845 ], [ %184, %572 ], [ %184, %546 ], [ %184, %546 ], [ %184, %280 ], [ %184, %274 ], [ %184, %270 ], [ %184, %268 ], [ %184, %266 ], [ %184, %257 ], [ %184, %253 ], [ %184, %248 ], [ %184, %235 ], [ %184, %229 ], [ %184, %231 ], [ %184, %223 ], [ %148, %4823 ], [ %184, %2759 ], [ %184, %3208 ], [ %184, %3239 ], [ %184, %3013 ], [ %184, %3563 ], [ %184, %3597 ], [ %184, %3786 ], [ %184, %4636 ], [ %184, %4654 ], [ %184, %829 ], [ %184, %834 ], [ %184, %840 ], [ %184, %4015 ], [ %184, %4022 ], [ %184, %4454 ], [ %184, %4553 ], [ %184, %4558 ], [ %184, %4585 ], [ %184, %4604 ], [ %184, %4606 ], [ %184, %4647 ], [ %184, %4621 ], [ %184, %4626 ], [ %184, %4649 ], [ %184, %4630 ], [ %184, %4656 ], [ %184, %4622 ], [ %184, %4912 ], [ %184, %4913 ], [ %184, %4914 ], [ %184, %221 ]
  %4935 = phi ptr [ %4707, %4702 ], [ %214, %4658 ], [ %214, %4479 ], [ %214, %4395 ], [ %4285, %4312 ], [ %214, %4105 ], [ %4109, %4115 ], [ %214, %3859 ], [ %3893, %3891 ], [ %214, %3234 ], [ %214, %3160 ], [ %214, %3155 ], [ %214, %3101 ], [ %214, %3093 ], [ %214, %3078 ], [ %214, %3069 ], [ %214, %2940 ], [ %214, %1952 ], [ %214, %1979 ], [ %214, %1996 ], [ %214, %2003 ], [ %214, %2006 ], [ %214, %1990 ], [ %214, %1991 ], [ %214, %1937 ], [ %214, %1840 ], [ %214, %1655 ], [ %214, %1661 ], [ %214, %1693 ], [ %214, %1712 ], [ %214, %1831 ], [ %214, %1827 ], [ %214, %1811 ], [ %214, %1788 ], [ %214, %1753 ], [ %214, %1636 ], [ %214, %1639 ], [ %214, %1632 ], [ %214, %1596 ], [ %214, %1602 ], [ %214, %1611 ], [ %214, %1563 ], [ %214, %1566 ], [ %214, %1578 ], [ %214, %1581 ], [ %214, %1556 ], [ %214, %1106 ], [ %214, %1085 ], [ %214, %873 ], [ %214, %898 ], [ %214, %905 ], [ %214, %888 ], [ %214, %845 ], [ %214, %572 ], [ %214, %546 ], [ %214, %546 ], [ %214, %280 ], [ %214, %274 ], [ %214, %270 ], [ %214, %268 ], [ %214, %266 ], [ %214, %257 ], [ %214, %253 ], [ %214, %248 ], [ %214, %235 ], [ %214, %229 ], [ %214, %231 ], [ %214, %223 ], [ %149, %4823 ], [ %214, %2759 ], [ %214, %3208 ], [ %214, %3239 ], [ %214, %3013 ], [ %3365, %3563 ], [ %214, %3597 ], [ %214, %3786 ], [ %214, %4636 ], [ %214, %4654 ], [ %214, %829 ], [ %214, %834 ], [ %214, %840 ], [ %4017, %4015 ], [ %4017, %4022 ], [ %214, %4454 ], [ %214, %4553 ], [ %214, %4558 ], [ %214, %4585 ], [ %214, %4604 ], [ %214, %4606 ], [ %214, %4647 ], [ %214, %4621 ], [ %214, %4626 ], [ %214, %4649 ], [ %214, %4630 ], [ %214, %4656 ], [ %214, %4622 ], [ %214, %4912 ], [ %214, %4913 ], [ %4916, %4914 ], [ %214, %221 ]
  %4936 = phi ptr [ %186, %4702 ], [ %186, %4658 ], [ %186, %4479 ], [ %186, %4395 ], [ %186, %4312 ], [ %186, %4105 ], [ %186, %4115 ], [ %186, %3859 ], [ %186, %3891 ], [ %186, %3234 ], [ %186, %3160 ], [ %186, %3155 ], [ %186, %3101 ], [ %186, %3093 ], [ %186, %3078 ], [ %186, %3069 ], [ %186, %2940 ], [ %186, %1952 ], [ %186, %1979 ], [ %186, %1996 ], [ %186, %2003 ], [ %186, %2006 ], [ %186, %1990 ], [ %186, %1991 ], [ %186, %1937 ], [ %186, %1840 ], [ %186, %1655 ], [ %186, %1661 ], [ %186, %1693 ], [ %186, %1712 ], [ %186, %1831 ], [ %186, %1827 ], [ %186, %1811 ], [ %186, %1788 ], [ %186, %1753 ], [ %186, %1636 ], [ %186, %1639 ], [ %186, %1632 ], [ %186, %1596 ], [ %186, %1602 ], [ %186, %1611 ], [ %186, %1563 ], [ %186, %1566 ], [ %186, %1578 ], [ %186, %1581 ], [ %186, %1556 ], [ %186, %1106 ], [ %186, %1085 ], [ %186, %873 ], [ %186, %898 ], [ %186, %905 ], [ %186, %888 ], [ %186, %845 ], [ %186, %572 ], [ %186, %546 ], [ %186, %546 ], [ %186, %280 ], [ %186, %274 ], [ %186, %270 ], [ %186, %268 ], [ %186, %266 ], [ %186, %257 ], [ %186, %253 ], [ %186, %248 ], [ %186, %235 ], [ %186, %229 ], [ %186, %231 ], [ %186, %223 ], [ %150, %4823 ], [ %186, %2759 ], [ %186, %3208 ], [ %186, %3239 ], [ %186, %3013 ], [ %186, %3563 ], [ %186, %3597 ], [ %186, %3786 ], [ %186, %4636 ], [ %186, %4654 ], [ %186, %829 ], [ %186, %834 ], [ %186, %840 ], [ %186, %4015 ], [ %186, %4022 ], [ %186, %4454 ], [ %186, %4553 ], [ %186, %4558 ], [ %186, %4585 ], [ %186, %4604 ], [ %186, %4606 ], [ %186, %4647 ], [ %186, %4621 ], [ %186, %4626 ], [ %186, %4649 ], [ %186, %4630 ], [ %186, %4656 ], [ %186, %4622 ], [ %186, %4912 ], [ %186, %4913 ], [ %186, %4914 ], [ %186, %221 ]
  %4937 = phi ptr [ %215, %4702 ], [ %215, %4658 ], [ %215, %4479 ], [ %215, %4395 ], [ %4286, %4312 ], [ %215, %4105 ], [ %215, %4115 ], [ %3718, %3859 ], [ %3718, %3891 ], [ null, %3234 ], [ %215, %3160 ], [ %215, %3155 ], [ %215, %3101 ], [ %215, %3093 ], [ %215, %3078 ], [ %215, %3069 ], [ %215, %2940 ], [ %215, %1952 ], [ %215, %1979 ], [ %215, %1996 ], [ %215, %2003 ], [ %215, %2006 ], [ %215, %1990 ], [ %215, %1991 ], [ %215, %1937 ], [ %215, %1840 ], [ %215, %1655 ], [ %215, %1661 ], [ %215, %1693 ], [ %215, %1712 ], [ %215, %1831 ], [ %215, %1827 ], [ %215, %1811 ], [ %215, %1788 ], [ %215, %1753 ], [ %215, %1636 ], [ %215, %1639 ], [ %215, %1632 ], [ %215, %1596 ], [ %215, %1602 ], [ %215, %1611 ], [ %215, %1563 ], [ %215, %1566 ], [ %215, %1578 ], [ %215, %1581 ], [ %215, %1556 ], [ %215, %1106 ], [ %215, %1085 ], [ %215, %873 ], [ %215, %898 ], [ %215, %905 ], [ %215, %888 ], [ %215, %845 ], [ %215, %572 ], [ %215, %546 ], [ %215, %546 ], [ %215, %280 ], [ %215, %274 ], [ %215, %270 ], [ %215, %268 ], [ %215, %266 ], [ %215, %257 ], [ %215, %253 ], [ %215, %248 ], [ %215, %235 ], [ %215, %229 ], [ %215, %231 ], [ %215, %223 ], [ null, %4823 ], [ %215, %2759 ], [ %215, %3208 ], [ %3237, %3239 ], [ %215, %3013 ], [ %3366, %3563 ], [ %215, %3597 ], [ %3718, %3786 ], [ %215, %4636 ], [ %215, %4654 ], [ %215, %829 ], [ %215, %834 ], [ %215, %840 ], [ %3937, %4015 ], [ %3937, %4022 ], [ %215, %4454 ], [ %215, %4553 ], [ %215, %4558 ], [ %215, %4585 ], [ %215, %4604 ], [ %215, %4606 ], [ %215, %4647 ], [ %215, %4621 ], [ %215, %4626 ], [ %215, %4649 ], [ %215, %4630 ], [ %215, %4656 ], [ %215, %4622 ], [ %215, %4912 ], [ %215, %4913 ], [ %4917, %4914 ], [ %215, %221 ]
  %4938 = phi ptr [ %188, %4702 ], [ %188, %4658 ], [ %188, %4479 ], [ %188, %4395 ], [ %188, %4312 ], [ %188, %4105 ], [ %188, %4115 ], [ %188, %3859 ], [ %188, %3891 ], [ %188, %3234 ], [ %188, %3160 ], [ %188, %3155 ], [ %188, %3101 ], [ %188, %3093 ], [ %188, %3078 ], [ %188, %3069 ], [ %188, %2940 ], [ %188, %1952 ], [ %188, %1979 ], [ %188, %1996 ], [ %188, %2003 ], [ %188, %2006 ], [ %188, %1990 ], [ %188, %1991 ], [ %188, %1937 ], [ %188, %1840 ], [ %188, %1655 ], [ %188, %1661 ], [ %188, %1693 ], [ %188, %1712 ], [ %188, %1831 ], [ %188, %1827 ], [ %188, %1811 ], [ %188, %1788 ], [ %188, %1753 ], [ %188, %1636 ], [ %188, %1639 ], [ %188, %1632 ], [ %188, %1596 ], [ %188, %1602 ], [ %188, %1611 ], [ %188, %1563 ], [ %188, %1566 ], [ %188, %1578 ], [ %188, %1581 ], [ %188, %1556 ], [ %188, %1106 ], [ %188, %1085 ], [ %188, %873 ], [ %188, %898 ], [ %188, %905 ], [ %188, %888 ], [ %188, %845 ], [ %188, %572 ], [ %188, %546 ], [ %188, %546 ], [ %188, %280 ], [ %188, %274 ], [ %188, %270 ], [ %188, %268 ], [ %188, %266 ], [ %188, %257 ], [ %188, %253 ], [ %188, %248 ], [ %188, %235 ], [ %188, %229 ], [ %188, %231 ], [ %188, %223 ], [ %152, %4823 ], [ %188, %2759 ], [ %188, %3208 ], [ %188, %3239 ], [ %188, %3013 ], [ %188, %3563 ], [ %188, %3597 ], [ %188, %3786 ], [ %188, %4636 ], [ %188, %4654 ], [ %188, %829 ], [ %188, %834 ], [ %188, %840 ], [ %188, %4015 ], [ %188, %4022 ], [ %188, %4454 ], [ %188, %4553 ], [ %188, %4558 ], [ %188, %4585 ], [ %188, %4604 ], [ %188, %4606 ], [ %188, %4647 ], [ %188, %4621 ], [ %188, %4626 ], [ %188, %4649 ], [ %188, %4630 ], [ %188, %4656 ], [ %188, %4622 ], [ %188, %4912 ], [ %188, %4913 ], [ %188, %4914 ], [ %188, %221 ]
  %4939 = phi ptr [ %189, %4702 ], [ %189, %4658 ], [ %189, %4479 ], [ %189, %4395 ], [ %189, %4312 ], [ %189, %4105 ], [ %189, %4115 ], [ %189, %3859 ], [ %189, %3891 ], [ %189, %3234 ], [ %189, %3160 ], [ %189, %3155 ], [ %189, %3101 ], [ %189, %3093 ], [ %189, %3078 ], [ %189, %3069 ], [ %189, %2940 ], [ %189, %1952 ], [ %189, %1979 ], [ %189, %1996 ], [ %189, %2003 ], [ %189, %2006 ], [ %189, %1990 ], [ %189, %1991 ], [ %189, %1937 ], [ %189, %1840 ], [ %189, %1655 ], [ %189, %1661 ], [ %189, %1693 ], [ %189, %1712 ], [ %189, %1831 ], [ %189, %1827 ], [ %189, %1811 ], [ %189, %1788 ], [ %189, %1753 ], [ %189, %1636 ], [ %189, %1639 ], [ %189, %1632 ], [ %189, %1596 ], [ %189, %1602 ], [ %189, %1611 ], [ %189, %1563 ], [ %189, %1566 ], [ %189, %1578 ], [ %189, %1581 ], [ %189, %1556 ], [ %189, %1106 ], [ %189, %1085 ], [ %189, %873 ], [ %189, %898 ], [ %189, %905 ], [ %189, %888 ], [ %189, %845 ], [ %189, %572 ], [ %189, %546 ], [ %189, %546 ], [ %189, %280 ], [ %189, %274 ], [ %189, %270 ], [ %189, %268 ], [ %189, %266 ], [ %189, %257 ], [ %189, %253 ], [ %189, %248 ], [ %189, %235 ], [ %189, %229 ], [ %189, %231 ], [ %189, %223 ], [ %153, %4823 ], [ %2754, %2759 ], [ %189, %3208 ], [ %189, %3239 ], [ %189, %3013 ], [ %189, %3563 ], [ %189, %3597 ], [ %189, %3786 ], [ %189, %4636 ], [ %189, %4654 ], [ %189, %829 ], [ %189, %834 ], [ %189, %840 ], [ %189, %4015 ], [ %189, %4022 ], [ %189, %4454 ], [ %189, %4553 ], [ %189, %4558 ], [ %189, %4585 ], [ %189, %4604 ], [ %189, %4606 ], [ %189, %4647 ], [ %189, %4621 ], [ %189, %4626 ], [ %189, %4649 ], [ %189, %4630 ], [ %189, %4656 ], [ %189, %4622 ], [ %189, %4912 ], [ %189, %4913 ], [ %189, %4914 ], [ %189, %221 ]
  %4940 = phi ptr [ %190, %4702 ], [ %190, %4658 ], [ %190, %4479 ], [ %190, %4395 ], [ %190, %4312 ], [ %190, %4105 ], [ %190, %4115 ], [ %190, %3859 ], [ %190, %3891 ], [ %190, %3234 ], [ %190, %3160 ], [ %190, %3155 ], [ %190, %3101 ], [ %190, %3093 ], [ %190, %3078 ], [ %190, %3069 ], [ %190, %2940 ], [ %190, %1952 ], [ %190, %1979 ], [ %190, %1996 ], [ %190, %2003 ], [ %190, %2006 ], [ %190, %1990 ], [ %190, %1991 ], [ %190, %1937 ], [ %190, %1840 ], [ %190, %1655 ], [ %190, %1661 ], [ %190, %1693 ], [ %190, %1712 ], [ %190, %1831 ], [ %190, %1827 ], [ %190, %1811 ], [ %190, %1788 ], [ %190, %1753 ], [ %190, %1636 ], [ %190, %1639 ], [ %190, %1632 ], [ %190, %1596 ], [ %190, %1602 ], [ %190, %1611 ], [ %190, %1563 ], [ %190, %1566 ], [ %190, %1578 ], [ %190, %1581 ], [ %190, %1556 ], [ %190, %1106 ], [ %190, %1085 ], [ %190, %873 ], [ %190, %898 ], [ %190, %905 ], [ %190, %888 ], [ %190, %845 ], [ %190, %572 ], [ %190, %546 ], [ %190, %546 ], [ %190, %280 ], [ %190, %274 ], [ %190, %270 ], [ %190, %268 ], [ %190, %266 ], [ %190, %257 ], [ %190, %253 ], [ %190, %248 ], [ %190, %235 ], [ %190, %229 ], [ %190, %231 ], [ %190, %223 ], [ %154, %4823 ], [ %2752, %2759 ], [ %190, %3208 ], [ %190, %3239 ], [ %190, %3013 ], [ %190, %3563 ], [ %190, %3597 ], [ %190, %3786 ], [ %190, %4636 ], [ %190, %4654 ], [ %190, %829 ], [ %190, %834 ], [ %190, %840 ], [ %190, %4015 ], [ %190, %4022 ], [ %190, %4454 ], [ %190, %4553 ], [ %190, %4558 ], [ %190, %4585 ], [ %190, %4604 ], [ %190, %4606 ], [ %190, %4647 ], [ %190, %4621 ], [ %190, %4626 ], [ %190, %4649 ], [ %190, %4630 ], [ %190, %4656 ], [ %190, %4622 ], [ %190, %4912 ], [ %190, %4913 ], [ %190, %4914 ], [ %190, %221 ]
  %4941 = phi ptr [ %191, %4702 ], [ %191, %4658 ], [ %191, %4479 ], [ %191, %4395 ], [ %191, %4312 ], [ %191, %4105 ], [ %191, %4115 ], [ %191, %3859 ], [ %191, %3891 ], [ %191, %3234 ], [ %191, %3160 ], [ %191, %3155 ], [ %191, %3101 ], [ %191, %3093 ], [ %191, %3078 ], [ %191, %3069 ], [ %191, %2940 ], [ %191, %1952 ], [ %191, %1979 ], [ %191, %1996 ], [ %191, %2003 ], [ %191, %2006 ], [ %191, %1990 ], [ %191, %1991 ], [ %191, %1937 ], [ %191, %1840 ], [ %191, %1655 ], [ %191, %1661 ], [ %191, %1693 ], [ %191, %1712 ], [ %191, %1831 ], [ %191, %1827 ], [ %191, %1811 ], [ %191, %1788 ], [ %191, %1753 ], [ %191, %1636 ], [ %191, %1639 ], [ %191, %1632 ], [ %191, %1596 ], [ %191, %1602 ], [ %191, %1611 ], [ %191, %1563 ], [ %191, %1566 ], [ %191, %1578 ], [ %191, %1581 ], [ %191, %1556 ], [ %191, %1106 ], [ %191, %1085 ], [ %191, %873 ], [ %191, %898 ], [ %191, %905 ], [ %191, %888 ], [ %191, %845 ], [ %191, %572 ], [ %191, %546 ], [ %191, %546 ], [ %191, %280 ], [ %191, %274 ], [ %191, %270 ], [ %191, %268 ], [ %191, %266 ], [ %191, %257 ], [ %191, %253 ], [ %191, %248 ], [ %191, %235 ], [ %191, %229 ], [ %191, %231 ], [ %191, %223 ], [ %155, %4823 ], [ %2723, %2759 ], [ %191, %3208 ], [ %191, %3239 ], [ %191, %3013 ], [ %191, %3563 ], [ %191, %3597 ], [ %191, %3786 ], [ %191, %4636 ], [ %191, %4654 ], [ %191, %829 ], [ %191, %834 ], [ %191, %840 ], [ %191, %4015 ], [ %191, %4022 ], [ %191, %4454 ], [ %191, %4553 ], [ %191, %4558 ], [ %191, %4585 ], [ %191, %4604 ], [ %191, %4606 ], [ %191, %4647 ], [ %191, %4621 ], [ %191, %4626 ], [ %191, %4649 ], [ %191, %4630 ], [ %191, %4656 ], [ %191, %4622 ], [ %191, %4912 ], [ %191, %4913 ], [ %191, %4914 ], [ %191, %221 ]
  %4942 = and i8 %4928, 1
  %4943 = icmp eq i8 %4942, 0
  br i1 %4943, label %4946, label %4944

4944:                                             ; preds = %4918
  %4945 = icmp eq ptr %4932, null
  br i1 %4945, label %4969, label %4834

4946:                                             ; preds = %4918
  %4947 = icmp eq i32 %4934, 0
  br i1 %4947, label %4969, label %4948

4948:                                             ; preds = %4946
  %4949 = getelementptr inbounds %struct.regmatch_state, ptr %4938, i64 -1
  %4950 = load ptr, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %4951 = icmp ult ptr %4949, %4950
  br i1 %4951, label %4952, label %4956

4952:                                             ; preds = %4948
  %4953 = getelementptr inbounds %struct.regmatch_slab, ptr %4950, i64 0, i32 1
  %4954 = load ptr, ptr %4953, align 8, !tbaa !211
  store ptr %4954, ptr @PL_regmatch_slab, align 8, !tbaa !35
  %4955 = getelementptr inbounds [33 x %struct.regmatch_state], ptr %4954, i64 0, i64 32
  br label %4956

4956:                                             ; preds = %4952, %4948
  %4957 = phi ptr [ %4955, %4952 ], [ %4949, %4948 ]
  store ptr %4957, ptr @PL_regmatch_state, align 8, !tbaa !35
  %4958 = getelementptr inbounds %struct.regmatch_state, ptr %4957, i64 0, i32 1
  %4959 = load ptr, ptr %4958, align 8, !tbaa !294
  %4960 = add nsw i32 %4934, -1
  %4961 = icmp eq ptr %4932, %4957
  br i1 %4961, label %4962, label %4965

4962:                                             ; preds = %4956
  %4963 = getelementptr inbounds %struct.regmatch_state, ptr %4932, i64 0, i32 2
  %4964 = load ptr, ptr %4963, align 8, !tbaa !5
  br label %4965

4965:                                             ; preds = %4962, %4956
  %4966 = phi ptr [ %4964, %4962 ], [ %4932, %4956 ]
  %4967 = load i32, ptr %4957, align 8, !tbaa !276
  %4968 = add nsw i32 %4967, 1
  br label %167

4969:                                             ; preds = %4946, %4944, %4902, %4911, %4905
  %4970 = phi ptr [ %173, %4905 ], [ %173, %4911 ], [ %173, %4902 ], [ %4924, %4944 ], [ %4924, %4946 ]
  %4971 = phi ptr [ %174, %4905 ], [ %174, %4911 ], [ %174, %4902 ], [ %4925, %4944 ], [ %4925, %4946 ]
  %4972 = phi i1 [ true, %4905 ], [ true, %4911 ], [ true, %4902 ], [ false, %4944 ], [ false, %4946 ]
  %4973 = phi ptr [ %214, %4905 ], [ %214, %4911 ], [ %214, %4902 ], [ %4935, %4944 ], [ %4935, %4946 ]
  %4974 = phi ptr [ %4831, %4905 ], [ %4831, %4911 ], [ %4831, %4902 ], [ %4940, %4944 ], [ %4940, %4946 ]
  %4975 = getelementptr inbounds %struct.regexp, ptr %4974, i64 0, i32 13
  %4976 = load i32, ptr %4975, align 4, !tbaa !36
  %4977 = and i32 %4976, 8
  %4978 = icmp eq i32 %4977, 0
  br i1 %4978, label %4988, label %4979

4979:                                             ; preds = %4969
  %4980 = call ptr @Perl_get_sv(ptr noundef nonnull @.str.18, i32 noundef 1) #12
  %4981 = call ptr @Perl_get_sv(ptr noundef nonnull @.str.13, i32 noundef 1) #12
  %4982 = icmp eq ptr %4970, null
  %4983 = select i1 %4982, ptr @PL_sv_yes, ptr %4970
  %4984 = icmp eq ptr %4971, null
  %4985 = select i1 %4984, ptr @PL_sv_yes, ptr %4971
  %4986 = select i1 %4972, ptr %4983, ptr @PL_sv_no
  %4987 = select i1 %4972, ptr @PL_sv_no, ptr %4985
  call void @Perl_sv_setsv_flags(ptr noundef %4980, ptr noundef nonnull %4987, i32 noundef 1538) #12
  call void @Perl_sv_setsv_flags(ptr noundef %4981, ptr noundef nonnull %4986, i32 noundef 1538) #12
  br label %4988

4988:                                             ; preds = %4979, %4969
  %4989 = icmp eq ptr %106, null
  br i1 %4989, label %5062, label %4990

4990:                                             ; preds = %4988
  %4991 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !35
  %4992 = getelementptr inbounds %struct.stackinfo, ptr %4991, i64 0, i32 1
  %4993 = load ptr, ptr %4992, align 8, !tbaa !302
  %4994 = getelementptr inbounds %struct.stackinfo, ptr %4991, i64 0, i32 4
  %4995 = load i32, ptr %4994, align 8, !tbaa !304
  %4996 = sext i32 %4995 to i64
  %4997 = getelementptr inbounds %struct.context, ptr %4993, i64 %4996, i32 0, i32 0, i32 11
  %4998 = load i32, ptr %4997, align 8, !tbaa !5
  %4999 = load ptr, ptr %109, align 8, !tbaa !300
  %5000 = getelementptr inbounds %struct.xpvcv, ptr %4999, i64 0, i32 13
  store i32 %4998, ptr %5000, align 4, !tbaa !73
  %5001 = icmp eq i32 %4998, 0
  br i1 %5001, label %5002, label %5012

5002:                                             ; preds = %4990
  %5003 = getelementptr inbounds %struct.sv, ptr %109, i64 0, i32 1
  %5004 = load i32, ptr %5003, align 8, !tbaa !61
  %5005 = icmp ugt i32 %5004, 1
  br i1 %5005, label %5006, label %5008

5006:                                             ; preds = %5002
  %5007 = add i32 %5004, -1
  store i32 %5007, ptr %5003, align 8, !tbaa !61
  br label %5012

5008:                                             ; preds = %5002
  call void @Perl_sv_free2(ptr noundef nonnull %109, i32 noundef %5004) #12
  %5009 = load ptr, ptr @PL_curstackinfo, align 8, !tbaa !35
  %5010 = getelementptr inbounds %struct.stackinfo, ptr %5009, i64 0, i32 1
  %5011 = load ptr, ptr %5010, align 8, !tbaa !302
  br label %5012

5012:                                             ; preds = %5008, %5006, %4990
  %5013 = phi ptr [ %5011, %5008 ], [ %4993, %5006 ], [ %4993, %4990 ]
  %5014 = phi ptr [ %5009, %5008 ], [ %4991, %5006 ], [ %4991, %4990 ]
  %5015 = getelementptr inbounds %struct.stackinfo, ptr %5014, i64 0, i32 4
  %5016 = load i32, ptr %5015, align 8, !tbaa !304
  %5017 = add nsw i32 %5016, -1
  store i32 %5017, ptr %5015, align 8, !tbaa !304
  %5018 = sext i32 %5016 to i64
  %5019 = getelementptr inbounds %struct.context, ptr %5013, i64 %5018
  %5020 = getelementptr inbounds %struct.block, ptr %5019, i64 0, i32 4
  %5021 = load ptr, ptr %5020, align 8, !tbaa !5
  store ptr %5021, ptr @PL_curcop, align 8, !tbaa !35
  %5022 = load ptr, ptr @PL_markstack, align 8, !tbaa !35
  %5023 = getelementptr inbounds %struct.block, ptr %5019, i64 0, i32 5
  %5024 = load i32, ptr %5023, align 8, !tbaa !5
  %5025 = sext i32 %5024 to i64
  %5026 = getelementptr inbounds i32, ptr %5022, i64 %5025
  store ptr %5026, ptr @PL_markstack_ptr, align 8, !tbaa !35
  %5027 = getelementptr inbounds %struct.block, ptr %5019, i64 0, i32 6
  %5028 = load i32, ptr %5027, align 4, !tbaa !5
  store i32 %5028, ptr @PL_scopestack_ix, align 4, !tbaa !73
  %5029 = getelementptr inbounds %struct.block, ptr %5019, i64 0, i32 7
  %5030 = load ptr, ptr %5029, align 8, !tbaa !5
  store ptr %5030, ptr @PL_curpm, align 8, !tbaa !35
  %5031 = load ptr, ptr @PL_stack_sp, align 8, !tbaa !35
  %5032 = getelementptr inbounds %struct.stackinfo, ptr %5014, i64 0, i32 2
  %5033 = load ptr, ptr %5032, align 8, !tbaa !311
  %5034 = icmp eq ptr %5033, null
  br i1 %5034, label %5035, label %5036

5035:                                             ; preds = %5012
  call void @Perl_croak_popstack() #12
  br label %5036

5036:                                             ; preds = %5012, %5035
  %5037 = load ptr, ptr @PL_stack_base, align 8, !tbaa !35
  %5038 = ptrtoint ptr %5031 to i64
  %5039 = ptrtoint ptr %5037 to i64
  %5040 = sub i64 %5038, %5039
  %5041 = ashr exact i64 %5040, 3
  %5042 = load ptr, ptr @PL_curstack, align 8, !tbaa !35
  %5043 = load ptr, ptr %5042, align 8, !tbaa !314
  %5044 = getelementptr inbounds %struct.xpvav, ptr %5043, i64 0, i32 2
  store i64 %5041, ptr %5044, align 8, !tbaa !316
  %5045 = load ptr, ptr %5033, align 8, !tbaa !313
  %5046 = getelementptr inbounds %struct.av, ptr %5045, i64 0, i32 3
  %5047 = load ptr, ptr %5046, align 8, !tbaa !5
  store ptr %5047, ptr @PL_stack_base, align 8, !tbaa !35
  %5048 = load ptr, ptr %5033, align 8, !tbaa !313
  %5049 = load ptr, ptr %5048, align 8, !tbaa !314
  %5050 = getelementptr inbounds %struct.xpvav, ptr %5049, i64 0, i32 3
  %5051 = load i64, ptr %5050, align 8, !tbaa !318
  %5052 = getelementptr inbounds ptr, ptr %5047, i64 %5051
  store ptr %5052, ptr @PL_stack_max, align 8, !tbaa !35
  %5053 = load ptr, ptr %5033, align 8, !tbaa !313
  %5054 = load ptr, ptr %5053, align 8, !tbaa !314
  %5055 = getelementptr inbounds %struct.xpvav, ptr %5054, i64 0, i32 2
  %5056 = load i64, ptr %5055, align 8, !tbaa !316
  %5057 = getelementptr inbounds ptr, ptr %5047, i64 %5056
  store ptr %5057, ptr @PL_stack_sp, align 8, !tbaa !35
  %5058 = load ptr, ptr %5033, align 8, !tbaa !313
  store ptr %5058, ptr @PL_curstack, align 8, !tbaa !35
  store ptr %5033, ptr @PL_curstackinfo, align 8, !tbaa !35
  %5059 = and i8 %108, 1
  %5060 = load ptr, ptr @PL_top_env, align 8, !tbaa !35
  %5061 = getelementptr inbounds %struct.jmpenv, ptr %5060, i64 0, i32 3
  store i8 %5059, ptr %5061, align 4, !tbaa !308
  call void @Perl_pop_scope() #12
  br label %5062

5062:                                             ; preds = %5036, %4988
  br i1 %4972, label %5063, label %5068

5063:                                             ; preds = %5062
  %5064 = load ptr, ptr %59, align 8, !tbaa !26
  %5065 = ptrtoint ptr %4973 to i64
  %5066 = ptrtoint ptr %5064 to i64
  %5067 = sub i64 %5065, %5066
  br label %5068

5068:                                             ; preds = %3891, %546, %5063, %5062
  %5069 = phi i64 [ %5067, %5063 ], [ -1, %5062 ], [ undef, %546 ], [ undef, %3891 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #12
  ret i64 %5069
}

declare ptr @Perl_gv_add_by_type(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i64 @Perl__to_uni_fold_flags(i64 noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_regcppush(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) unnamed_addr #0 {
  %4 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %5 = sub i32 %2, %1
  %6 = mul i32 %5, 3
  %7 = add nsw i32 %6, 3
  %8 = sext i32 %7 to i64
  %9 = icmp slt i32 %6, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.19, i32 noundef %6, i32 noundef %2, i32 noundef %1, i32 noundef 3) #12
  %11 = icmp ugt i32 %6, -4
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = zext i32 %2 to i64
  %14 = sext i32 %1 to i64
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.20, i64 noundef %8, i64 noundef %13, i64 noundef %14) #12
  br label %15

15:                                               ; preds = %3, %12, %10
  %16 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %17 = add i32 %6, 8
  %18 = add i32 %17, %16
  %19 = load i32, ptr @PL_savestack_max, align 4, !tbaa !73
  %20 = icmp sgt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  tail call void @Perl_savestack_grow_cnt(i32 noundef %17) #12
  br label %22

22:                                               ; preds = %15, %21
  %23 = icmp slt i32 %1, %2
  br i1 %23, label %24, label %57

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 17
  %26 = sext i32 %1 to i64
  %27 = sext i32 %2 to i64
  br label %28

28:                                               ; preds = %24, %28
  %29 = phi i64 [ %26, %24 ], [ %30, %28 ]
  %30 = add nsw i64 %29, 1
  %31 = load ptr, ptr %25, align 8, !tbaa !64
  %32 = getelementptr inbounds %struct.regexp_paren_pair, ptr %31, i64 %30, i32 1
  %33 = load i64, ptr %32, align 8, !tbaa !74
  %34 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %35 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %36 = add nsw i32 %35, 1
  store i32 %36, ptr @PL_savestack_ix, align 4, !tbaa !73
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds %union.any, ptr %34, i64 %37
  store i64 %33, ptr %38, align 8, !tbaa !5
  %39 = load ptr, ptr %25, align 8, !tbaa !64
  %40 = getelementptr inbounds %struct.regexp_paren_pair, ptr %39, i64 %30
  %41 = load i64, ptr %40, align 8, !tbaa !65
  %42 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %43 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %44 = add nsw i32 %43, 1
  store i32 %44, ptr @PL_savestack_ix, align 4, !tbaa !73
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds %union.any, ptr %42, i64 %45
  store i64 %41, ptr %46, align 8, !tbaa !5
  %47 = load ptr, ptr %25, align 8, !tbaa !64
  %48 = getelementptr inbounds %struct.regexp_paren_pair, ptr %47, i64 %30, i32 2
  %49 = load i64, ptr %48, align 8, !tbaa !330
  %50 = trunc i64 %49 to i32
  %51 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %52 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %53 = add nsw i32 %52, 1
  store i32 %53, ptr @PL_savestack_ix, align 4, !tbaa !73
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds %union.any, ptr %51, i64 %54
  store i32 %50, ptr %55, align 8, !tbaa !5
  %56 = icmp eq i64 %30, %27
  br i1 %56, label %57, label %28, !llvm.loop !359

57:                                               ; preds = %28, %22
  %58 = shl nsw i64 %8, 6
  %59 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %60 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr @PL_savestack_ix, align 4, !tbaa !73
  %62 = sext i32 %60 to i64
  %63 = getelementptr inbounds %union.any, ptr %59, i64 %62
  store i32 %2, ptr %63, align 8, !tbaa !5
  %64 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 15
  %65 = load i32, ptr %64, align 8, !tbaa !67
  %66 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %67 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %68 = add nsw i32 %67, 1
  store i32 %68, ptr @PL_savestack_ix, align 4, !tbaa !73
  %69 = sext i32 %67 to i64
  %70 = getelementptr inbounds %union.any, ptr %66, i64 %69
  store i32 %65, ptr %70, align 8, !tbaa !5
  %71 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 16
  %72 = load i32, ptr %71, align 4, !tbaa !68
  %73 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %74 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %75 = add nsw i32 %74, 1
  store i32 %75, ptr @PL_savestack_ix, align 4, !tbaa !73
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds %union.any, ptr %73, i64 %76
  store i32 %72, ptr %77, align 8, !tbaa !5
  %78 = or i64 %58, 3
  %79 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %80 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %81 = add nsw i32 %80, 1
  store i32 %81, ptr @PL_savestack_ix, align 4, !tbaa !73
  %82 = sext i32 %80 to i64
  %83 = getelementptr inbounds %union.any, ptr %79, i64 %82
  store i64 %78, ptr %83, align 8, !tbaa !5
  ret i32 %4
}

declare ptr @Perl_find_runcv(ptr noundef) local_unnamed_addr #3

declare i32 @Perl_was_lvalue_sub() local_unnamed_addr #3

declare void @Perl_pad_push(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @Perl_save_vptr(ptr noundef) local_unnamed_addr #3

declare ptr @Perl_new_stackinfo(i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @Perl_cxinc() local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc zeroext i1 @S_sv_only_taint_gmagic(ptr nocapture readonly %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.xpvmg, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !5
  %4 = icmp eq ptr %3, null
  br i1 %4, label %23, label %5

5:                                                ; preds = %1, %20
  %6 = phi ptr [ %21, %20 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.magic, ptr %6, i64 0, i32 3
  %8 = load i8, ptr %7, align 2, !tbaa !360
  %9 = icmp eq i8 %8, 116
  br i1 %9, label %20, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.magic, ptr %6, i64 0, i32 4
  %12 = load i8, ptr %11, align 1, !tbaa !195
  %13 = and i8 %12, 4
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.magic, ptr %6, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !361
  %18 = load ptr, ptr %17, align 8, !tbaa !362
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %15, %10, %5
  %21 = load ptr, ptr %6, align 8, !tbaa !5
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %5, !llvm.loop !364

23:                                               ; preds = %15, %20, %1
  %24 = phi i1 [ true, %1 ], [ true, %20 ], [ false, %15 ]
  ret i1 %24
}

declare ptr @Perl_get_sv(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_save_scalar(ptr noundef) local_unnamed_addr #3

declare zeroext i1 @Perl_sv_2bool_flags(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_sv_mortalcopy_flags(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_mg_find(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_sv_pvn_force_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_reg_temp_copy(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @Perl_newSVpvn_flags(ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

declare void @Perl_sv_magic(ptr noundef, ptr noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @S_regcppop(ptr nocapture noundef %0, ptr nocapture noundef %1) unnamed_addr #8 {
  %3 = load ptr, ptr @PL_savestack, align 8, !tbaa !35
  %4 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %5 = add nsw i32 %4, -1
  store i32 %5, ptr @PL_savestack_ix, align 4, !tbaa !73
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %union.any, ptr %3, i64 %6
  %8 = load i64, ptr %7, align 8, !tbaa !5
  %9 = lshr i64 %8, 6
  %10 = add nsw i32 %4, -2
  store i32 %10, ptr @PL_savestack_ix, align 4, !tbaa !73
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %union.any, ptr %3, i64 %11
  %13 = load i32, ptr %12, align 8, !tbaa !5
  %14 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 16
  store i32 %13, ptr %14, align 4, !tbaa !68
  %15 = add nsw i32 %4, -3
  store i32 %15, ptr @PL_savestack_ix, align 4, !tbaa !73
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %union.any, ptr %3, i64 %16
  %18 = load i32, ptr %17, align 8, !tbaa !5
  %19 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 15
  store i32 %18, ptr %19, align 8, !tbaa !67
  %20 = add nsw i32 %4, -4
  store i32 %20, ptr @PL_savestack_ix, align 4, !tbaa !73
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %union.any, ptr %3, i64 %21
  %23 = load i32, ptr %22, align 8, !tbaa !5
  store i32 %23, ptr %1, align 4, !tbaa !73
  %24 = add nsw i64 %9, -3
  %25 = icmp eq i64 %24, 0
  %26 = load i32, ptr %19, align 8, !tbaa !67
  br i1 %25, label %59, label %27

27:                                               ; preds = %2
  %28 = load i32, ptr @PL_savestack_ix, align 4, !tbaa !73
  %29 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 17
  %30 = load ptr, ptr %29, align 8, !tbaa !64
  %31 = sext i32 %28 to i64
  br label %32

32:                                               ; preds = %27, %55
  %33 = phi i64 [ %31, %27 ], [ %48, %55 ]
  %34 = phi i64 [ %24, %27 ], [ %57, %55 ]
  %35 = phi i32 [ %23, %27 ], [ %56, %55 ]
  %36 = add nsw i64 %33, -1
  %37 = trunc i64 %36 to i32
  store i32 %37, ptr @PL_savestack_ix, align 4, !tbaa !73
  %38 = getelementptr inbounds %union.any, ptr %3, i64 %36
  %39 = load i32, ptr %38, align 8, !tbaa !5
  %40 = sext i32 %39 to i64
  %41 = zext i32 %35 to i64
  %42 = getelementptr inbounds %struct.regexp_paren_pair, ptr %30, i64 %41, i32 2
  store i64 %40, ptr %42, align 8, !tbaa !330
  %43 = add nsw i64 %33, -2
  %44 = trunc i64 %43 to i32
  store i32 %44, ptr @PL_savestack_ix, align 4, !tbaa !73
  %45 = getelementptr inbounds %union.any, ptr %3, i64 %43
  %46 = load i64, ptr %45, align 8, !tbaa !5
  %47 = getelementptr inbounds %struct.regexp_paren_pair, ptr %30, i64 %41
  store i64 %46, ptr %47, align 8, !tbaa !65
  %48 = add i64 %33, -3
  %49 = trunc i64 %48 to i32
  store i32 %49, ptr @PL_savestack_ix, align 4, !tbaa !73
  %50 = icmp ugt i32 %35, %26
  br i1 %50, label %55, label %51

51:                                               ; preds = %32
  %52 = getelementptr inbounds %union.any, ptr %3, i64 %48
  %53 = load i64, ptr %52, align 8, !tbaa !5
  %54 = getelementptr inbounds %struct.regexp_paren_pair, ptr %30, i64 %41, i32 1
  store i64 %53, ptr %54, align 8, !tbaa !74
  br label %55

55:                                               ; preds = %51, %32
  %56 = add i32 %35, -1
  %57 = add i64 %34, -3
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %32, !llvm.loop !365

59:                                               ; preds = %55, %2
  %60 = add i32 %26, 1
  %61 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 12
  %62 = load i32, ptr %61, align 8, !tbaa !69
  %63 = icmp ugt i32 %60, %62
  br i1 %63, label %100, label %64

64:                                               ; preds = %59
  %65 = zext i32 %62 to i64
  %66 = zext i32 %60 to i64
  %67 = load i32, ptr %1, align 4, !tbaa !73
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.regexp, ptr %0, i64 0, i32 17
  %70 = load ptr, ptr %69, align 8, !tbaa !64
  %71 = add nuw nsw i64 %65, 1
  %72 = sub nsw i64 %71, %66
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %64
  %76 = icmp ugt i32 %60, %67
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  %78 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %66
  store i64 -1, ptr %78, align 8, !tbaa !65
  br label %79

79:                                               ; preds = %77, %75
  %80 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %66, i32 1
  store i64 -1, ptr %80, align 8, !tbaa !74
  %81 = add nuw nsw i64 %66, 1
  br label %82

82:                                               ; preds = %79, %64
  %83 = phi i64 [ %66, %64 ], [ %81, %79 ]
  %84 = icmp eq i32 %62, %60
  br i1 %84, label %100, label %85

85:                                               ; preds = %82, %96
  %86 = phi i64 [ %98, %96 ], [ %83, %82 ]
  %87 = icmp ugt i64 %86, %68
  br i1 %87, label %88, label %90

88:                                               ; preds = %85
  %89 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %86
  store i64 -1, ptr %89, align 8, !tbaa !65
  br label %90

90:                                               ; preds = %88, %85
  %91 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %86, i32 1
  store i64 -1, ptr %91, align 8, !tbaa !74
  %92 = add nuw nsw i64 %86, 1
  %93 = icmp ult i64 %86, %68
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %92
  store i64 -1, ptr %95, align 8, !tbaa !65
  br label %96

96:                                               ; preds = %94, %90
  %97 = getelementptr inbounds %struct.regexp_paren_pair, ptr %70, i64 %92, i32 1
  store i64 -1, ptr %97, align 8, !tbaa !74
  %98 = add nuw nsw i64 %86, 2
  %99 = icmp eq i64 %92, %65
  br i1 %99, label %100, label %85, !llvm.loop !366

100:                                              ; preds = %82, %96, %59
  ret void
}

declare ptr @Perl_regnext(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef %0, ptr nocapture noundef writeonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3, ptr noundef %4, i8 %5, i8 %6) unnamed_addr #0 {
  %8 = alloca [40 x i8], align 16
  %9 = alloca i64, align 8
  %10 = icmp eq i8 %6, 0
  %11 = icmp eq i8 %5, 0
  %12 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %8) #12
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(40) %8, i8 0, i64 40, i1 false)
  %13 = getelementptr inbounds %struct.regnode, ptr %0, i64 0, i32 1
  %14 = load i8, ptr %13, align 1, !tbaa !56
  %15 = add i8 %14, -31
  %16 = icmp ult i8 %15, 2
  br i1 %16, label %17, label %24

17:                                               ; preds = %7
  br i1 %11, label %18, label %21

18:                                               ; preds = %17
  %19 = load i8, ptr %12, align 1, !tbaa !5
  %20 = zext i8 %19 to i64
  br label %1009

21:                                               ; preds = %17
  br i1 %10, label %22, label %1012

22:                                               ; preds = %21
  %23 = tail call i64 @Perl_valid_utf8_to_uvchr(ptr noundef nonnull %12, ptr noundef null) #12
  br label %1041

24:                                               ; preds = %7
  %25 = load i8, ptr %0, align 2, !tbaa !59
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds i8, ptr %12, i64 %26
  %28 = icmp eq i8 %14, 34
  br i1 %28, label %29, label %120

29:                                               ; preds = %24
  br i1 %11, label %30, label %39

30:                                               ; preds = %29
  %31 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !tbaa !88, !range !42, !noundef !43
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %844, label %33

33:                                               ; preds = %30
  %34 = load i8, ptr %12, align 1, !tbaa !5
  %35 = icmp eq i8 %34, -33
  br i1 %35, label %36, label %844

36:                                               ; preds = %33
  %37 = getelementptr inbounds [40 x i8], ptr %8, i64 0, i64 1
  store i8 115, ptr %37, align 1, !tbaa !5
  store i8 115, ptr %8, align 16, !tbaa !5
  %38 = getelementptr inbounds i8, ptr %8, i64 2
  br label %844

39:                                               ; preds = %29
  %40 = load i8, ptr %12, align 1, !tbaa !5
  %41 = icmp sgt i8 %40, -1
  %42 = and i8 %40, -2
  %43 = icmp eq i8 %42, -62
  %44 = or i1 %41, %43
  br i1 %44, label %86, label %45

45:                                               ; preds = %39
  switch i8 %40, label %123 [
    i8 -60, label %46
    i8 -57, label %46
    i8 -59, label %50
    i8 -54, label %53
    i8 -50, label %57
    i8 -31, label %62
    i8 -30, label %69
    i8 -17, label %78
  ]

46:                                               ; preds = %45, %45
  %47 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %48 = load i8, ptr %47, align 1, !tbaa !5
  %49 = icmp eq i8 %48, -80
  br i1 %49, label %86, label %123

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %52 = load i8, ptr %51, align 1, !tbaa !5
  switch i8 %52, label %123 [
    i8 -119, label %86
    i8 -72, label %86
    i8 -65, label %86
  ]

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %55 = load i8, ptr %54, align 1, !tbaa !5
  %56 = icmp eq i8 %55, -68
  br i1 %56, label %86, label %123

57:                                               ; preds = %45
  %58 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %59 = load i8, ptr %58, align 1, !tbaa !5
  %60 = and i8 %59, -33
  %61 = icmp eq i8 %60, -100
  br i1 %61, label %86, label %123

62:                                               ; preds = %45
  %63 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = icmp eq i8 %64, -70
  br i1 %65, label %66, label %123

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 1
  %68 = load i8, ptr %67, align 1, !tbaa !5
  switch i8 %68, label %123 [
    i8 -98, label %86
    i8 -102, label %86
    i8 -103, label %86
    i8 -104, label %86
    i8 -105, label %86
    i8 -106, label %86
  ]

69:                                               ; preds = %45
  %70 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %71 = load i8, ptr %70, align 1, !tbaa !5
  %72 = icmp eq i8 %71, -124
  br i1 %72, label %73, label %123

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 1
  %75 = load i8, ptr %74, align 1, !tbaa !5
  %76 = and i8 %75, -2
  %77 = icmp eq i8 %76, -86
  br i1 %77, label %86, label %123

78:                                               ; preds = %45
  %79 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 0, i32 3, i64 1
  %80 = load i8, ptr %79, align 1, !tbaa !5
  %81 = icmp eq i8 %80, -84
  br i1 %81, label %82, label %123

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.regnode_string, ptr %0, i64 1
  %84 = load i8, ptr %83, align 1, !tbaa !5
  %85 = icmp ult i8 %84, -121
  br i1 %85, label %86, label %123

86:                                               ; preds = %66, %66, %66, %66, %66, %66, %50, %50, %50, %82, %73, %57, %53, %46, %39
  %87 = icmp eq i8 %25, 0
  br i1 %87, label %123, label %88

88:                                               ; preds = %86, %113
  %89 = phi i32 [ %116, %113 ], [ 0, %86 ]
  %90 = phi ptr [ %115, %113 ], [ %8, %86 ]
  %91 = phi ptr [ %114, %113 ], [ %12, %86 ]
  %92 = load i8, ptr %91, align 1, !tbaa !5
  %93 = icmp sgt i8 %92, -1
  br i1 %93, label %94, label %103

94:                                               ; preds = %88
  %95 = tail call ptr @__ctype_tolower_loc() #14
  %96 = load ptr, ptr %95, align 8, !tbaa !35
  %97 = zext i8 %92 to i64
  %98 = getelementptr inbounds i32, ptr %96, i64 %97
  %99 = load i32, ptr %98, align 4, !tbaa !73
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, ptr %90, i64 1
  store i8 %100, ptr %90, align 1, !tbaa !5
  %102 = getelementptr inbounds i8, ptr %91, i64 1
  br label %113

103:                                              ; preds = %88
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #12
  %104 = call i64 @Perl__to_utf8_fold_flags(ptr noundef nonnull %91, ptr noundef %90, ptr noundef nonnull %9, i8 noundef zeroext 3) #12
  %105 = load i64, ptr %9, align 8, !tbaa !169
  %106 = getelementptr inbounds i8, ptr %90, i64 %105
  %107 = load i8, ptr %91, align 1, !tbaa !5
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %108
  %110 = load i8, ptr %109, align 1, !tbaa !5
  %111 = zext i8 %110 to i64
  %112 = getelementptr inbounds i8, ptr %91, i64 %111
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #12
  br label %113

113:                                              ; preds = %94, %103
  %114 = phi ptr [ %102, %94 ], [ %112, %103 ]
  %115 = phi ptr [ %101, %94 ], [ %106, %103 ]
  %116 = add nuw nsw i32 %89, 1
  %117 = icmp ult i32 %89, 2
  %118 = icmp ult ptr %114, %27
  %119 = select i1 %117, i1 %118, i1 false
  br i1 %119, label %88, label %120, !llvm.loop !367

120:                                              ; preds = %113, %24
  %121 = phi ptr [ %12, %24 ], [ %8, %113 ]
  %122 = phi ptr [ %27, %24 ], [ %115, %113 ]
  br i1 %11, label %844, label %123

123:                                              ; preds = %86, %66, %46, %53, %57, %62, %73, %69, %82, %78, %50, %45, %120
  %124 = phi ptr [ %122, %120 ], [ %27, %45 ], [ %27, %50 ], [ %27, %78 ], [ %27, %82 ], [ %27, %69 ], [ %27, %73 ], [ %27, %62 ], [ %27, %57 ], [ %27, %53 ], [ %27, %46 ], [ %27, %66 ], [ %8, %86 ]
  %125 = phi ptr [ %121, %120 ], [ %12, %45 ], [ %12, %50 ], [ %12, %78 ], [ %12, %82 ], [ %12, %69 ], [ %12, %73 ], [ %12, %62 ], [ %12, %57 ], [ %12, %53 ], [ %12, %46 ], [ %12, %66 ], [ %8, %86 ]
  %126 = ptrtoint ptr %124 to i64
  %127 = ptrtoint ptr %125 to i64
  %128 = sub i64 %126, %127
  %129 = icmp sgt i64 %128, 5
  br i1 %129, label %130, label %369

130:                                              ; preds = %123
  %131 = load i8, ptr %125, align 1, !tbaa !5
  switch i8 %131, label %882 [
    i8 97, label %132
    i8 102, label %140
    i8 104, label %143
    i8 105, label %151
    i8 106, label %159
    i8 115, label %167
    i8 116, label %172
    i8 119, label %180
    i8 121, label %180
    i8 -59, label %188
    i8 -54, label %200
    i8 -50, label %208
    i8 -49, label %256
    i8 -43, label %308
    i8 -31, label %334
  ]

132:                                              ; preds = %130
  %133 = getelementptr inbounds i8, ptr %125, i64 1
  %134 = load i8, ptr %133, align 1, !tbaa !5
  %135 = icmp eq i8 %134, -54
  br i1 %135, label %136, label %882

136:                                              ; preds = %132
  %137 = getelementptr inbounds i8, ptr %125, i64 2
  %138 = load i8, ptr %137, align 1, !tbaa !5
  %139 = icmp eq i8 %138, -66
  br i1 %139, label %1008, label %882

140:                                              ; preds = %130
  %141 = getelementptr inbounds i8, ptr %125, i64 1
  %142 = load i8, ptr %141, align 1, !tbaa !5
  switch i8 %142, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

143:                                              ; preds = %130
  %144 = getelementptr inbounds i8, ptr %125, i64 1
  %145 = load i8, ptr %144, align 1, !tbaa !5
  %146 = icmp eq i8 %145, -52
  br i1 %146, label %147, label %882

147:                                              ; preds = %143
  %148 = getelementptr inbounds i8, ptr %125, i64 2
  %149 = load i8, ptr %148, align 1, !tbaa !5
  %150 = icmp eq i8 %149, -79
  br i1 %150, label %1008, label %882

151:                                              ; preds = %130
  %152 = getelementptr inbounds i8, ptr %125, i64 1
  %153 = load i8, ptr %152, align 1, !tbaa !5
  %154 = icmp eq i8 %153, -52
  br i1 %154, label %155, label %882

155:                                              ; preds = %151
  %156 = getelementptr inbounds i8, ptr %125, i64 2
  %157 = load i8, ptr %156, align 1, !tbaa !5
  %158 = icmp eq i8 %157, -121
  br i1 %158, label %1008, label %882

159:                                              ; preds = %130
  %160 = getelementptr inbounds i8, ptr %125, i64 1
  %161 = load i8, ptr %160, align 1, !tbaa !5
  %162 = icmp eq i8 %161, -52
  br i1 %162, label %163, label %882

163:                                              ; preds = %159
  %164 = getelementptr inbounds i8, ptr %125, i64 2
  %165 = load i8, ptr %164, align 1, !tbaa !5
  %166 = icmp eq i8 %165, -116
  br i1 %166, label %1008, label %882

167:                                              ; preds = %130
  %168 = getelementptr inbounds i8, ptr %125, i64 1
  %169 = load i8, ptr %168, align 1, !tbaa !5
  %170 = add i8 %169, -115
  %171 = icmp ult i8 %170, 2
  br i1 %171, label %1008, label %882

172:                                              ; preds = %130
  %173 = getelementptr inbounds i8, ptr %125, i64 1
  %174 = load i8, ptr %173, align 1, !tbaa !5
  %175 = icmp eq i8 %174, -52
  br i1 %175, label %176, label %882

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, ptr %125, i64 2
  %178 = load i8, ptr %177, align 1, !tbaa !5
  %179 = icmp eq i8 %178, -120
  br i1 %179, label %1008, label %882

180:                                              ; preds = %130, %130
  %181 = getelementptr inbounds i8, ptr %125, i64 1
  %182 = load i8, ptr %181, align 1, !tbaa !5
  %183 = icmp eq i8 %182, -52
  br i1 %183, label %184, label %882

184:                                              ; preds = %180
  %185 = getelementptr inbounds i8, ptr %125, i64 2
  %186 = load i8, ptr %185, align 1, !tbaa !5
  %187 = icmp eq i8 %186, -118
  br i1 %187, label %1008, label %882

188:                                              ; preds = %130
  %189 = getelementptr inbounds i8, ptr %125, i64 1
  %190 = load i8, ptr %189, align 1, !tbaa !5
  %191 = icmp eq i8 %190, -65
  br i1 %191, label %192, label %882

192:                                              ; preds = %188
  %193 = getelementptr inbounds i8, ptr %125, i64 2
  %194 = load i8, ptr %193, align 1, !tbaa !5
  %195 = icmp eq i8 %194, -59
  br i1 %195, label %196, label %882

196:                                              ; preds = %192
  %197 = getelementptr inbounds i8, ptr %125, i64 3
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = icmp eq i8 %198, -65
  br i1 %199, label %1008, label %882

200:                                              ; preds = %130
  %201 = getelementptr inbounds i8, ptr %125, i64 1
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = icmp eq i8 %202, -68
  br i1 %203, label %204, label %882

204:                                              ; preds = %200
  %205 = getelementptr inbounds i8, ptr %125, i64 2
  %206 = load i8, ptr %205, align 1, !tbaa !5
  %207 = icmp eq i8 %206, 110
  br i1 %207, label %1008, label %882

208:                                              ; preds = %130
  %209 = getelementptr inbounds i8, ptr %125, i64 1
  %210 = load i8, ptr %209, align 1, !tbaa !5
  %211 = and i8 %210, -3
  %212 = icmp eq i8 %211, -84
  br i1 %212, label %213, label %221

213:                                              ; preds = %208
  %214 = getelementptr inbounds i8, ptr %125, i64 2
  %215 = load i8, ptr %214, align 1, !tbaa !5
  %216 = icmp eq i8 %215, -50
  br i1 %216, label %217, label %882

217:                                              ; preds = %213
  %218 = getelementptr inbounds i8, ptr %125, i64 3
  %219 = load i8, ptr %218, align 1, !tbaa !5
  %220 = icmp eq i8 %219, -71
  br i1 %220, label %1008, label %882

221:                                              ; preds = %208
  switch i8 %210, label %882 [
    i8 -79, label %222
    i8 -73, label %222
    i8 -71, label %233
  ]

222:                                              ; preds = %221, %221
  %223 = getelementptr inbounds i8, ptr %125, i64 2
  %224 = load i8, ptr %223, align 1, !tbaa !5
  switch i8 %224, label %882 [
    i8 -51, label %225
    i8 -50, label %229
  ]

225:                                              ; preds = %222
  %226 = getelementptr inbounds i8, ptr %125, i64 3
  %227 = load i8, ptr %226, align 1, !tbaa !5
  %228 = icmp eq i8 %227, -126
  br i1 %228, label %1008, label %882

229:                                              ; preds = %222
  %230 = getelementptr inbounds i8, ptr %125, i64 3
  %231 = load i8, ptr %230, align 1, !tbaa !5
  %232 = icmp eq i8 %231, -71
  br i1 %232, label %1008, label %882

233:                                              ; preds = %221
  %234 = getelementptr inbounds i8, ptr %125, i64 2
  %235 = load i8, ptr %234, align 1, !tbaa !5
  switch i8 %235, label %882 [
    i8 -52, label %236
    i8 -51, label %252
  ]

236:                                              ; preds = %233
  %237 = getelementptr inbounds i8, ptr %125, i64 3
  %238 = load i8, ptr %237, align 1, !tbaa !5
  %239 = icmp eq i8 %238, -120
  br i1 %239, label %240, label %882

240:                                              ; preds = %236
  %241 = getelementptr inbounds i8, ptr %125, i64 4
  %242 = load i8, ptr %241, align 1, !tbaa !5
  switch i8 %242, label %882 [
    i8 -52, label %243
    i8 -51, label %248
  ]

243:                                              ; preds = %240
  %244 = getelementptr inbounds i8, ptr %125, i64 5
  %245 = load i8, ptr %244, align 1, !tbaa !5
  %246 = and i8 %245, -2
  %247 = icmp eq i8 %246, -128
  br i1 %247, label %1008, label %882

248:                                              ; preds = %240
  %249 = getelementptr inbounds i8, ptr %125, i64 5
  %250 = load i8, ptr %249, align 1, !tbaa !5
  %251 = icmp eq i8 %250, -126
  br i1 %251, label %1008, label %882

252:                                              ; preds = %233
  %253 = getelementptr inbounds i8, ptr %125, i64 3
  %254 = load i8, ptr %253, align 1, !tbaa !5
  %255 = icmp eq i8 %254, -126
  br i1 %255, label %1008, label %882

256:                                              ; preds = %130
  %257 = getelementptr inbounds i8, ptr %125, i64 1
  %258 = load i8, ptr %257, align 1, !tbaa !5
  switch i8 %258, label %882 [
    i8 -127, label %259
    i8 -123, label %267
    i8 -119, label %289
    i8 -114, label %300
  ]

259:                                              ; preds = %256
  %260 = getelementptr inbounds i8, ptr %125, i64 2
  %261 = load i8, ptr %260, align 1, !tbaa !5
  %262 = icmp eq i8 %261, -52
  br i1 %262, label %263, label %882

263:                                              ; preds = %259
  %264 = getelementptr inbounds i8, ptr %125, i64 3
  %265 = load i8, ptr %264, align 1, !tbaa !5
  %266 = icmp eq i8 %265, -109
  br i1 %266, label %1008, label %882

267:                                              ; preds = %256
  %268 = getelementptr inbounds i8, ptr %125, i64 2
  %269 = load i8, ptr %268, align 1, !tbaa !5
  switch i8 %269, label %882 [
    i8 -52, label %270
    i8 -51, label %285
  ]

270:                                              ; preds = %267
  %271 = getelementptr inbounds i8, ptr %125, i64 3
  %272 = load i8, ptr %271, align 1, !tbaa !5
  switch i8 %272, label %882 [
    i8 -120, label %273
    i8 -109, label %1008
  ]

273:                                              ; preds = %270
  %274 = getelementptr inbounds i8, ptr %125, i64 4
  %275 = load i8, ptr %274, align 1, !tbaa !5
  switch i8 %275, label %882 [
    i8 -52, label %276
    i8 -51, label %281
  ]

276:                                              ; preds = %273
  %277 = getelementptr inbounds i8, ptr %125, i64 5
  %278 = load i8, ptr %277, align 1, !tbaa !5
  %279 = and i8 %278, -2
  %280 = icmp eq i8 %279, -128
  br i1 %280, label %1008, label %882

281:                                              ; preds = %273
  %282 = getelementptr inbounds i8, ptr %125, i64 5
  %283 = load i8, ptr %282, align 1, !tbaa !5
  %284 = icmp eq i8 %283, -126
  br i1 %284, label %1008, label %882

285:                                              ; preds = %267
  %286 = getelementptr inbounds i8, ptr %125, i64 3
  %287 = load i8, ptr %286, align 1, !tbaa !5
  %288 = icmp eq i8 %287, -126
  br i1 %288, label %1008, label %882

289:                                              ; preds = %256
  %290 = getelementptr inbounds i8, ptr %125, i64 2
  %291 = load i8, ptr %290, align 1, !tbaa !5
  switch i8 %291, label %882 [
    i8 -51, label %292
    i8 -50, label %296
  ]

292:                                              ; preds = %289
  %293 = getelementptr inbounds i8, ptr %125, i64 3
  %294 = load i8, ptr %293, align 1, !tbaa !5
  %295 = icmp eq i8 %294, -126
  br i1 %295, label %1008, label %882

296:                                              ; preds = %289
  %297 = getelementptr inbounds i8, ptr %125, i64 3
  %298 = load i8, ptr %297, align 1, !tbaa !5
  %299 = icmp eq i8 %298, -71
  br i1 %299, label %1008, label %882

300:                                              ; preds = %256
  %301 = getelementptr inbounds i8, ptr %125, i64 2
  %302 = load i8, ptr %301, align 1, !tbaa !5
  %303 = icmp eq i8 %302, -50
  br i1 %303, label %304, label %882

304:                                              ; preds = %300
  %305 = getelementptr inbounds i8, ptr %125, i64 3
  %306 = load i8, ptr %305, align 1, !tbaa !5
  %307 = icmp eq i8 %306, -71
  br i1 %307, label %1008, label %882

308:                                              ; preds = %130
  %309 = getelementptr inbounds i8, ptr %125, i64 1
  %310 = load i8, ptr %309, align 1, !tbaa !5
  switch i8 %310, label %882 [
    i8 -91, label %311
    i8 -76, label %319
    i8 -66, label %326
  ]

311:                                              ; preds = %308
  %312 = getelementptr inbounds i8, ptr %125, i64 2
  %313 = load i8, ptr %312, align 1, !tbaa !5
  %314 = icmp eq i8 %313, -42
  br i1 %314, label %315, label %882

315:                                              ; preds = %311
  %316 = getelementptr inbounds i8, ptr %125, i64 3
  %317 = load i8, ptr %316, align 1, !tbaa !5
  %318 = icmp eq i8 %317, -126
  br i1 %318, label %1008, label %882

319:                                              ; preds = %308
  %320 = getelementptr inbounds i8, ptr %125, i64 2
  %321 = load i8, ptr %320, align 1, !tbaa !5
  %322 = icmp eq i8 %321, -43
  br i1 %322, label %323, label %882

323:                                              ; preds = %319
  %324 = getelementptr inbounds i8, ptr %125, i64 3
  %325 = load i8, ptr %324, align 1, !tbaa !5
  switch i8 %325, label %882 [
    i8 -74, label %1008
    i8 -83, label %1008
    i8 -85, label %1008
    i8 -91, label %1008
  ]

326:                                              ; preds = %308
  %327 = getelementptr inbounds i8, ptr %125, i64 2
  %328 = load i8, ptr %327, align 1, !tbaa !5
  %329 = icmp eq i8 %328, -43
  br i1 %329, label %330, label %882

330:                                              ; preds = %326
  %331 = getelementptr inbounds i8, ptr %125, i64 3
  %332 = load i8, ptr %331, align 1, !tbaa !5
  %333 = icmp eq i8 %332, -74
  br i1 %333, label %1008, label %882

334:                                              ; preds = %130
  %335 = getelementptr inbounds i8, ptr %125, i64 1
  %336 = load i8, ptr %335, align 1, !tbaa !5
  switch i8 %336, label %882 [
    i8 -68, label %337
    i8 -67, label %350
  ]

337:                                              ; preds = %334
  %338 = getelementptr inbounds i8, ptr %125, i64 2
  %339 = load i8, ptr %338, align 1, !tbaa !5
  %340 = and i8 %339, -40
  %341 = icmp eq i8 %340, -128
  br i1 %341, label %342, label %882

342:                                              ; preds = %337
  %343 = getelementptr inbounds i8, ptr %125, i64 3
  %344 = load i8, ptr %343, align 1, !tbaa !5
  %345 = icmp eq i8 %344, -50
  br i1 %345, label %346, label %882

346:                                              ; preds = %342
  %347 = getelementptr inbounds i8, ptr %125, i64 4
  %348 = load i8, ptr %347, align 1, !tbaa !5
  %349 = icmp eq i8 %348, -71
  br i1 %349, label %1008, label %882

350:                                              ; preds = %334
  %351 = getelementptr inbounds i8, ptr %125, i64 2
  %352 = load i8, ptr %351, align 1, !tbaa !5
  %353 = zext i8 %352 to i32
  %354 = and i32 %353, 248
  %355 = icmp eq i32 %354, 160
  %356 = and i32 %353, 251
  %357 = icmp eq i32 %356, 176
  %358 = or i1 %355, %357
  %359 = icmp eq i8 %352, -68
  %360 = or i1 %359, %358
  br i1 %360, label %361, label %882

361:                                              ; preds = %350
  %362 = getelementptr inbounds i8, ptr %125, i64 3
  %363 = load i8, ptr %362, align 1, !tbaa !5
  %364 = icmp eq i8 %363, -50
  br i1 %364, label %365, label %882

365:                                              ; preds = %361
  %366 = getelementptr inbounds i8, ptr %125, i64 4
  %367 = load i8, ptr %366, align 1, !tbaa !5
  %368 = icmp eq i8 %367, -71
  br i1 %368, label %1008, label %882

369:                                              ; preds = %123
  %370 = icmp eq i64 %128, 5
  br i1 %370, label %371, label %584

371:                                              ; preds = %369
  %372 = load i8, ptr %125, align 1, !tbaa !5
  switch i8 %372, label %882 [
    i8 97, label %373
    i8 102, label %381
    i8 104, label %384
    i8 105, label %392
    i8 106, label %400
    i8 115, label %408
    i8 116, label %413
    i8 119, label %421
    i8 121, label %421
    i8 -59, label %429
    i8 -54, label %441
    i8 -50, label %449
    i8 -49, label %482
    i8 -43, label %523
    i8 -31, label %549
  ]

373:                                              ; preds = %371
  %374 = getelementptr inbounds i8, ptr %125, i64 1
  %375 = load i8, ptr %374, align 1, !tbaa !5
  %376 = icmp eq i8 %375, -54
  br i1 %376, label %377, label %882

377:                                              ; preds = %373
  %378 = getelementptr inbounds i8, ptr %125, i64 2
  %379 = load i8, ptr %378, align 1, !tbaa !5
  %380 = icmp eq i8 %379, -66
  br i1 %380, label %1008, label %882

381:                                              ; preds = %371
  %382 = getelementptr inbounds i8, ptr %125, i64 1
  %383 = load i8, ptr %382, align 1, !tbaa !5
  switch i8 %383, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

384:                                              ; preds = %371
  %385 = getelementptr inbounds i8, ptr %125, i64 1
  %386 = load i8, ptr %385, align 1, !tbaa !5
  %387 = icmp eq i8 %386, -52
  br i1 %387, label %388, label %882

388:                                              ; preds = %384
  %389 = getelementptr inbounds i8, ptr %125, i64 2
  %390 = load i8, ptr %389, align 1, !tbaa !5
  %391 = icmp eq i8 %390, -79
  br i1 %391, label %1008, label %882

392:                                              ; preds = %371
  %393 = getelementptr inbounds i8, ptr %125, i64 1
  %394 = load i8, ptr %393, align 1, !tbaa !5
  %395 = icmp eq i8 %394, -52
  br i1 %395, label %396, label %882

396:                                              ; preds = %392
  %397 = getelementptr inbounds i8, ptr %125, i64 2
  %398 = load i8, ptr %397, align 1, !tbaa !5
  %399 = icmp eq i8 %398, -121
  br i1 %399, label %1008, label %882

400:                                              ; preds = %371
  %401 = getelementptr inbounds i8, ptr %125, i64 1
  %402 = load i8, ptr %401, align 1, !tbaa !5
  %403 = icmp eq i8 %402, -52
  br i1 %403, label %404, label %882

404:                                              ; preds = %400
  %405 = getelementptr inbounds i8, ptr %125, i64 2
  %406 = load i8, ptr %405, align 1, !tbaa !5
  %407 = icmp eq i8 %406, -116
  br i1 %407, label %1008, label %882

408:                                              ; preds = %371
  %409 = getelementptr inbounds i8, ptr %125, i64 1
  %410 = load i8, ptr %409, align 1, !tbaa !5
  %411 = add i8 %410, -115
  %412 = icmp ult i8 %411, 2
  br i1 %412, label %1008, label %882

413:                                              ; preds = %371
  %414 = getelementptr inbounds i8, ptr %125, i64 1
  %415 = load i8, ptr %414, align 1, !tbaa !5
  %416 = icmp eq i8 %415, -52
  br i1 %416, label %417, label %882

417:                                              ; preds = %413
  %418 = getelementptr inbounds i8, ptr %125, i64 2
  %419 = load i8, ptr %418, align 1, !tbaa !5
  %420 = icmp eq i8 %419, -120
  br i1 %420, label %1008, label %882

421:                                              ; preds = %371, %371
  %422 = getelementptr inbounds i8, ptr %125, i64 1
  %423 = load i8, ptr %422, align 1, !tbaa !5
  %424 = icmp eq i8 %423, -52
  br i1 %424, label %425, label %882

425:                                              ; preds = %421
  %426 = getelementptr inbounds i8, ptr %125, i64 2
  %427 = load i8, ptr %426, align 1, !tbaa !5
  %428 = icmp eq i8 %427, -118
  br i1 %428, label %1008, label %882

429:                                              ; preds = %371
  %430 = getelementptr inbounds i8, ptr %125, i64 1
  %431 = load i8, ptr %430, align 1, !tbaa !5
  %432 = icmp eq i8 %431, -65
  br i1 %432, label %433, label %882

433:                                              ; preds = %429
  %434 = getelementptr inbounds i8, ptr %125, i64 2
  %435 = load i8, ptr %434, align 1, !tbaa !5
  %436 = icmp eq i8 %435, -59
  br i1 %436, label %437, label %882

437:                                              ; preds = %433
  %438 = getelementptr inbounds i8, ptr %125, i64 3
  %439 = load i8, ptr %438, align 1, !tbaa !5
  %440 = icmp eq i8 %439, -65
  br i1 %440, label %1008, label %882

441:                                              ; preds = %371
  %442 = getelementptr inbounds i8, ptr %125, i64 1
  %443 = load i8, ptr %442, align 1, !tbaa !5
  %444 = icmp eq i8 %443, -68
  br i1 %444, label %445, label %882

445:                                              ; preds = %441
  %446 = getelementptr inbounds i8, ptr %125, i64 2
  %447 = load i8, ptr %446, align 1, !tbaa !5
  %448 = icmp eq i8 %447, 110
  br i1 %448, label %1008, label %882

449:                                              ; preds = %371
  %450 = getelementptr inbounds i8, ptr %125, i64 1
  %451 = load i8, ptr %450, align 1, !tbaa !5
  %452 = and i8 %451, -3
  %453 = icmp eq i8 %452, -84
  br i1 %453, label %454, label %462

454:                                              ; preds = %449
  %455 = getelementptr inbounds i8, ptr %125, i64 2
  %456 = load i8, ptr %455, align 1, !tbaa !5
  %457 = icmp eq i8 %456, -50
  br i1 %457, label %458, label %882

458:                                              ; preds = %454
  %459 = getelementptr inbounds i8, ptr %125, i64 3
  %460 = load i8, ptr %459, align 1, !tbaa !5
  %461 = icmp eq i8 %460, -71
  br i1 %461, label %1008, label %882

462:                                              ; preds = %449
  switch i8 %451, label %882 [
    i8 -79, label %463
    i8 -73, label %463
    i8 -71, label %474
  ]

463:                                              ; preds = %462, %462
  %464 = getelementptr inbounds i8, ptr %125, i64 2
  %465 = load i8, ptr %464, align 1, !tbaa !5
  switch i8 %465, label %882 [
    i8 -51, label %466
    i8 -50, label %470
  ]

466:                                              ; preds = %463
  %467 = getelementptr inbounds i8, ptr %125, i64 3
  %468 = load i8, ptr %467, align 1, !tbaa !5
  %469 = icmp eq i8 %468, -126
  br i1 %469, label %1008, label %882

470:                                              ; preds = %463
  %471 = getelementptr inbounds i8, ptr %125, i64 3
  %472 = load i8, ptr %471, align 1, !tbaa !5
  %473 = icmp eq i8 %472, -71
  br i1 %473, label %1008, label %882

474:                                              ; preds = %462
  %475 = getelementptr inbounds i8, ptr %125, i64 2
  %476 = load i8, ptr %475, align 1, !tbaa !5
  %477 = icmp eq i8 %476, -51
  br i1 %477, label %478, label %882

478:                                              ; preds = %474
  %479 = getelementptr inbounds i8, ptr %125, i64 3
  %480 = load i8, ptr %479, align 1, !tbaa !5
  %481 = icmp eq i8 %480, -126
  br i1 %481, label %1008, label %882

482:                                              ; preds = %371
  %483 = getelementptr inbounds i8, ptr %125, i64 1
  %484 = load i8, ptr %483, align 1, !tbaa !5
  switch i8 %484, label %882 [
    i8 -127, label %485
    i8 -123, label %493
    i8 -119, label %504
    i8 -114, label %515
  ]

485:                                              ; preds = %482
  %486 = getelementptr inbounds i8, ptr %125, i64 2
  %487 = load i8, ptr %486, align 1, !tbaa !5
  %488 = icmp eq i8 %487, -52
  br i1 %488, label %489, label %882

489:                                              ; preds = %485
  %490 = getelementptr inbounds i8, ptr %125, i64 3
  %491 = load i8, ptr %490, align 1, !tbaa !5
  %492 = icmp eq i8 %491, -109
  br i1 %492, label %1008, label %882

493:                                              ; preds = %482
  %494 = getelementptr inbounds i8, ptr %125, i64 2
  %495 = load i8, ptr %494, align 1, !tbaa !5
  switch i8 %495, label %882 [
    i8 -52, label %496
    i8 -51, label %500
  ]

496:                                              ; preds = %493
  %497 = getelementptr inbounds i8, ptr %125, i64 3
  %498 = load i8, ptr %497, align 1, !tbaa !5
  %499 = icmp eq i8 %498, -109
  br i1 %499, label %1008, label %882

500:                                              ; preds = %493
  %501 = getelementptr inbounds i8, ptr %125, i64 3
  %502 = load i8, ptr %501, align 1, !tbaa !5
  %503 = icmp eq i8 %502, -126
  br i1 %503, label %1008, label %882

504:                                              ; preds = %482
  %505 = getelementptr inbounds i8, ptr %125, i64 2
  %506 = load i8, ptr %505, align 1, !tbaa !5
  switch i8 %506, label %882 [
    i8 -51, label %507
    i8 -50, label %511
  ]

507:                                              ; preds = %504
  %508 = getelementptr inbounds i8, ptr %125, i64 3
  %509 = load i8, ptr %508, align 1, !tbaa !5
  %510 = icmp eq i8 %509, -126
  br i1 %510, label %1008, label %882

511:                                              ; preds = %504
  %512 = getelementptr inbounds i8, ptr %125, i64 3
  %513 = load i8, ptr %512, align 1, !tbaa !5
  %514 = icmp eq i8 %513, -71
  br i1 %514, label %1008, label %882

515:                                              ; preds = %482
  %516 = getelementptr inbounds i8, ptr %125, i64 2
  %517 = load i8, ptr %516, align 1, !tbaa !5
  %518 = icmp eq i8 %517, -50
  br i1 %518, label %519, label %882

519:                                              ; preds = %515
  %520 = getelementptr inbounds i8, ptr %125, i64 3
  %521 = load i8, ptr %520, align 1, !tbaa !5
  %522 = icmp eq i8 %521, -71
  br i1 %522, label %1008, label %882

523:                                              ; preds = %371
  %524 = getelementptr inbounds i8, ptr %125, i64 1
  %525 = load i8, ptr %524, align 1, !tbaa !5
  switch i8 %525, label %882 [
    i8 -91, label %526
    i8 -76, label %534
    i8 -66, label %541
  ]

526:                                              ; preds = %523
  %527 = getelementptr inbounds i8, ptr %125, i64 2
  %528 = load i8, ptr %527, align 1, !tbaa !5
  %529 = icmp eq i8 %528, -42
  br i1 %529, label %530, label %882

530:                                              ; preds = %526
  %531 = getelementptr inbounds i8, ptr %125, i64 3
  %532 = load i8, ptr %531, align 1, !tbaa !5
  %533 = icmp eq i8 %532, -126
  br i1 %533, label %1008, label %882

534:                                              ; preds = %523
  %535 = getelementptr inbounds i8, ptr %125, i64 2
  %536 = load i8, ptr %535, align 1, !tbaa !5
  %537 = icmp eq i8 %536, -43
  br i1 %537, label %538, label %882

538:                                              ; preds = %534
  %539 = getelementptr inbounds i8, ptr %125, i64 3
  %540 = load i8, ptr %539, align 1, !tbaa !5
  switch i8 %540, label %882 [
    i8 -74, label %1008
    i8 -83, label %1008
    i8 -85, label %1008
    i8 -91, label %1008
  ]

541:                                              ; preds = %523
  %542 = getelementptr inbounds i8, ptr %125, i64 2
  %543 = load i8, ptr %542, align 1, !tbaa !5
  %544 = icmp eq i8 %543, -43
  br i1 %544, label %545, label %882

545:                                              ; preds = %541
  %546 = getelementptr inbounds i8, ptr %125, i64 3
  %547 = load i8, ptr %546, align 1, !tbaa !5
  %548 = icmp eq i8 %547, -74
  br i1 %548, label %1008, label %882

549:                                              ; preds = %371
  %550 = getelementptr inbounds i8, ptr %125, i64 1
  %551 = load i8, ptr %550, align 1, !tbaa !5
  switch i8 %551, label %882 [
    i8 -68, label %552
    i8 -67, label %565
  ]

552:                                              ; preds = %549
  %553 = getelementptr inbounds i8, ptr %125, i64 2
  %554 = load i8, ptr %553, align 1, !tbaa !5
  %555 = and i8 %554, -40
  %556 = icmp eq i8 %555, -128
  br i1 %556, label %557, label %882

557:                                              ; preds = %552
  %558 = getelementptr inbounds i8, ptr %125, i64 3
  %559 = load i8, ptr %558, align 1, !tbaa !5
  %560 = icmp eq i8 %559, -50
  br i1 %560, label %561, label %882

561:                                              ; preds = %557
  %562 = getelementptr inbounds i8, ptr %125, i64 4
  %563 = load i8, ptr %562, align 1, !tbaa !5
  %564 = icmp eq i8 %563, -71
  br i1 %564, label %1008, label %882

565:                                              ; preds = %549
  %566 = getelementptr inbounds i8, ptr %125, i64 2
  %567 = load i8, ptr %566, align 1, !tbaa !5
  %568 = zext i8 %567 to i32
  %569 = and i32 %568, 248
  %570 = icmp eq i32 %569, 160
  %571 = and i32 %568, 251
  %572 = icmp eq i32 %571, 176
  %573 = or i1 %570, %572
  %574 = icmp eq i8 %567, -68
  %575 = or i1 %574, %573
  br i1 %575, label %576, label %882

576:                                              ; preds = %565
  %577 = getelementptr inbounds i8, ptr %125, i64 3
  %578 = load i8, ptr %577, align 1, !tbaa !5
  %579 = icmp eq i8 %578, -50
  br i1 %579, label %580, label %882

580:                                              ; preds = %576
  %581 = getelementptr inbounds i8, ptr %125, i64 4
  %582 = load i8, ptr %581, align 1, !tbaa !5
  %583 = icmp eq i8 %582, -71
  br i1 %583, label %1008, label %882

584:                                              ; preds = %369
  %585 = icmp sgt i64 %128, 3
  br i1 %585, label %586, label %764

586:                                              ; preds = %584
  %587 = load i8, ptr %125, align 1, !tbaa !5
  switch i8 %587, label %882 [
    i8 97, label %588
    i8 102, label %596
    i8 104, label %599
    i8 105, label %607
    i8 106, label %615
    i8 115, label %623
    i8 116, label %628
    i8 119, label %636
    i8 121, label %636
    i8 -59, label %644
    i8 -54, label %656
    i8 -50, label %664
    i8 -49, label %697
    i8 -43, label %738
  ]

588:                                              ; preds = %586
  %589 = getelementptr inbounds i8, ptr %125, i64 1
  %590 = load i8, ptr %589, align 1, !tbaa !5
  %591 = icmp eq i8 %590, -54
  br i1 %591, label %592, label %882

592:                                              ; preds = %588
  %593 = getelementptr inbounds i8, ptr %125, i64 2
  %594 = load i8, ptr %593, align 1, !tbaa !5
  %595 = icmp eq i8 %594, -66
  br i1 %595, label %1008, label %882

596:                                              ; preds = %586
  %597 = getelementptr inbounds i8, ptr %125, i64 1
  %598 = load i8, ptr %597, align 1, !tbaa !5
  switch i8 %598, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

599:                                              ; preds = %586
  %600 = getelementptr inbounds i8, ptr %125, i64 1
  %601 = load i8, ptr %600, align 1, !tbaa !5
  %602 = icmp eq i8 %601, -52
  br i1 %602, label %603, label %882

603:                                              ; preds = %599
  %604 = getelementptr inbounds i8, ptr %125, i64 2
  %605 = load i8, ptr %604, align 1, !tbaa !5
  %606 = icmp eq i8 %605, -79
  br i1 %606, label %1008, label %882

607:                                              ; preds = %586
  %608 = getelementptr inbounds i8, ptr %125, i64 1
  %609 = load i8, ptr %608, align 1, !tbaa !5
  %610 = icmp eq i8 %609, -52
  br i1 %610, label %611, label %882

611:                                              ; preds = %607
  %612 = getelementptr inbounds i8, ptr %125, i64 2
  %613 = load i8, ptr %612, align 1, !tbaa !5
  %614 = icmp eq i8 %613, -121
  br i1 %614, label %1008, label %882

615:                                              ; preds = %586
  %616 = getelementptr inbounds i8, ptr %125, i64 1
  %617 = load i8, ptr %616, align 1, !tbaa !5
  %618 = icmp eq i8 %617, -52
  br i1 %618, label %619, label %882

619:                                              ; preds = %615
  %620 = getelementptr inbounds i8, ptr %125, i64 2
  %621 = load i8, ptr %620, align 1, !tbaa !5
  %622 = icmp eq i8 %621, -116
  br i1 %622, label %1008, label %882

623:                                              ; preds = %586
  %624 = getelementptr inbounds i8, ptr %125, i64 1
  %625 = load i8, ptr %624, align 1, !tbaa !5
  %626 = add i8 %625, -115
  %627 = icmp ult i8 %626, 2
  br i1 %627, label %1008, label %882

628:                                              ; preds = %586
  %629 = getelementptr inbounds i8, ptr %125, i64 1
  %630 = load i8, ptr %629, align 1, !tbaa !5
  %631 = icmp eq i8 %630, -52
  br i1 %631, label %632, label %882

632:                                              ; preds = %628
  %633 = getelementptr inbounds i8, ptr %125, i64 2
  %634 = load i8, ptr %633, align 1, !tbaa !5
  %635 = icmp eq i8 %634, -120
  br i1 %635, label %1008, label %882

636:                                              ; preds = %586, %586
  %637 = getelementptr inbounds i8, ptr %125, i64 1
  %638 = load i8, ptr %637, align 1, !tbaa !5
  %639 = icmp eq i8 %638, -52
  br i1 %639, label %640, label %882

640:                                              ; preds = %636
  %641 = getelementptr inbounds i8, ptr %125, i64 2
  %642 = load i8, ptr %641, align 1, !tbaa !5
  %643 = icmp eq i8 %642, -118
  br i1 %643, label %1008, label %882

644:                                              ; preds = %586
  %645 = getelementptr inbounds i8, ptr %125, i64 1
  %646 = load i8, ptr %645, align 1, !tbaa !5
  %647 = icmp eq i8 %646, -65
  br i1 %647, label %648, label %882

648:                                              ; preds = %644
  %649 = getelementptr inbounds i8, ptr %125, i64 2
  %650 = load i8, ptr %649, align 1, !tbaa !5
  %651 = icmp eq i8 %650, -59
  br i1 %651, label %652, label %882

652:                                              ; preds = %648
  %653 = getelementptr inbounds i8, ptr %125, i64 3
  %654 = load i8, ptr %653, align 1, !tbaa !5
  %655 = icmp eq i8 %654, -65
  br i1 %655, label %1008, label %882

656:                                              ; preds = %586
  %657 = getelementptr inbounds i8, ptr %125, i64 1
  %658 = load i8, ptr %657, align 1, !tbaa !5
  %659 = icmp eq i8 %658, -68
  br i1 %659, label %660, label %882

660:                                              ; preds = %656
  %661 = getelementptr inbounds i8, ptr %125, i64 2
  %662 = load i8, ptr %661, align 1, !tbaa !5
  %663 = icmp eq i8 %662, 110
  br i1 %663, label %1008, label %882

664:                                              ; preds = %586
  %665 = getelementptr inbounds i8, ptr %125, i64 1
  %666 = load i8, ptr %665, align 1, !tbaa !5
  %667 = and i8 %666, -3
  %668 = icmp eq i8 %667, -84
  br i1 %668, label %669, label %677

669:                                              ; preds = %664
  %670 = getelementptr inbounds i8, ptr %125, i64 2
  %671 = load i8, ptr %670, align 1, !tbaa !5
  %672 = icmp eq i8 %671, -50
  br i1 %672, label %673, label %882

673:                                              ; preds = %669
  %674 = getelementptr inbounds i8, ptr %125, i64 3
  %675 = load i8, ptr %674, align 1, !tbaa !5
  %676 = icmp eq i8 %675, -71
  br i1 %676, label %1008, label %882

677:                                              ; preds = %664
  switch i8 %666, label %882 [
    i8 -79, label %678
    i8 -73, label %678
    i8 -71, label %689
  ]

678:                                              ; preds = %677, %677
  %679 = getelementptr inbounds i8, ptr %125, i64 2
  %680 = load i8, ptr %679, align 1, !tbaa !5
  switch i8 %680, label %882 [
    i8 -51, label %681
    i8 -50, label %685
  ]

681:                                              ; preds = %678
  %682 = getelementptr inbounds i8, ptr %125, i64 3
  %683 = load i8, ptr %682, align 1, !tbaa !5
  %684 = icmp eq i8 %683, -126
  br i1 %684, label %1008, label %882

685:                                              ; preds = %678
  %686 = getelementptr inbounds i8, ptr %125, i64 3
  %687 = load i8, ptr %686, align 1, !tbaa !5
  %688 = icmp eq i8 %687, -71
  br i1 %688, label %1008, label %882

689:                                              ; preds = %677
  %690 = getelementptr inbounds i8, ptr %125, i64 2
  %691 = load i8, ptr %690, align 1, !tbaa !5
  %692 = icmp eq i8 %691, -51
  br i1 %692, label %693, label %882

693:                                              ; preds = %689
  %694 = getelementptr inbounds i8, ptr %125, i64 3
  %695 = load i8, ptr %694, align 1, !tbaa !5
  %696 = icmp eq i8 %695, -126
  br i1 %696, label %1008, label %882

697:                                              ; preds = %586
  %698 = getelementptr inbounds i8, ptr %125, i64 1
  %699 = load i8, ptr %698, align 1, !tbaa !5
  switch i8 %699, label %882 [
    i8 -127, label %700
    i8 -123, label %708
    i8 -119, label %719
    i8 -114, label %730
  ]

700:                                              ; preds = %697
  %701 = getelementptr inbounds i8, ptr %125, i64 2
  %702 = load i8, ptr %701, align 1, !tbaa !5
  %703 = icmp eq i8 %702, -52
  br i1 %703, label %704, label %882

704:                                              ; preds = %700
  %705 = getelementptr inbounds i8, ptr %125, i64 3
  %706 = load i8, ptr %705, align 1, !tbaa !5
  %707 = icmp eq i8 %706, -109
  br i1 %707, label %1008, label %882

708:                                              ; preds = %697
  %709 = getelementptr inbounds i8, ptr %125, i64 2
  %710 = load i8, ptr %709, align 1, !tbaa !5
  switch i8 %710, label %882 [
    i8 -52, label %711
    i8 -51, label %715
  ]

711:                                              ; preds = %708
  %712 = getelementptr inbounds i8, ptr %125, i64 3
  %713 = load i8, ptr %712, align 1, !tbaa !5
  %714 = icmp eq i8 %713, -109
  br i1 %714, label %1008, label %882

715:                                              ; preds = %708
  %716 = getelementptr inbounds i8, ptr %125, i64 3
  %717 = load i8, ptr %716, align 1, !tbaa !5
  %718 = icmp eq i8 %717, -126
  br i1 %718, label %1008, label %882

719:                                              ; preds = %697
  %720 = getelementptr inbounds i8, ptr %125, i64 2
  %721 = load i8, ptr %720, align 1, !tbaa !5
  switch i8 %721, label %882 [
    i8 -51, label %722
    i8 -50, label %726
  ]

722:                                              ; preds = %719
  %723 = getelementptr inbounds i8, ptr %125, i64 3
  %724 = load i8, ptr %723, align 1, !tbaa !5
  %725 = icmp eq i8 %724, -126
  br i1 %725, label %1008, label %882

726:                                              ; preds = %719
  %727 = getelementptr inbounds i8, ptr %125, i64 3
  %728 = load i8, ptr %727, align 1, !tbaa !5
  %729 = icmp eq i8 %728, -71
  br i1 %729, label %1008, label %882

730:                                              ; preds = %697
  %731 = getelementptr inbounds i8, ptr %125, i64 2
  %732 = load i8, ptr %731, align 1, !tbaa !5
  %733 = icmp eq i8 %732, -50
  br i1 %733, label %734, label %882

734:                                              ; preds = %730
  %735 = getelementptr inbounds i8, ptr %125, i64 3
  %736 = load i8, ptr %735, align 1, !tbaa !5
  %737 = icmp eq i8 %736, -71
  br i1 %737, label %1008, label %882

738:                                              ; preds = %586
  %739 = getelementptr inbounds i8, ptr %125, i64 1
  %740 = load i8, ptr %739, align 1, !tbaa !5
  switch i8 %740, label %882 [
    i8 -91, label %741
    i8 -76, label %749
    i8 -66, label %756
  ]

741:                                              ; preds = %738
  %742 = getelementptr inbounds i8, ptr %125, i64 2
  %743 = load i8, ptr %742, align 1, !tbaa !5
  %744 = icmp eq i8 %743, -42
  br i1 %744, label %745, label %882

745:                                              ; preds = %741
  %746 = getelementptr inbounds i8, ptr %125, i64 3
  %747 = load i8, ptr %746, align 1, !tbaa !5
  %748 = icmp eq i8 %747, -126
  br i1 %748, label %1008, label %882

749:                                              ; preds = %738
  %750 = getelementptr inbounds i8, ptr %125, i64 2
  %751 = load i8, ptr %750, align 1, !tbaa !5
  %752 = icmp eq i8 %751, -43
  br i1 %752, label %753, label %882

753:                                              ; preds = %749
  %754 = getelementptr inbounds i8, ptr %125, i64 3
  %755 = load i8, ptr %754, align 1, !tbaa !5
  switch i8 %755, label %882 [
    i8 -74, label %1008
    i8 -83, label %1008
    i8 -85, label %1008
    i8 -91, label %1008
  ]

756:                                              ; preds = %738
  %757 = getelementptr inbounds i8, ptr %125, i64 2
  %758 = load i8, ptr %757, align 1, !tbaa !5
  %759 = icmp eq i8 %758, -43
  br i1 %759, label %760, label %882

760:                                              ; preds = %756
  %761 = getelementptr inbounds i8, ptr %125, i64 3
  %762 = load i8, ptr %761, align 1, !tbaa !5
  %763 = icmp eq i8 %762, -74
  br i1 %763, label %1008, label %882

764:                                              ; preds = %584
  %765 = icmp eq i64 %128, 3
  br i1 %765, label %766, label %832

766:                                              ; preds = %764
  %767 = load i8, ptr %125, align 1, !tbaa !5
  switch i8 %767, label %882 [
    i8 97, label %768
    i8 102, label %776
    i8 104, label %779
    i8 105, label %787
    i8 106, label %795
    i8 115, label %803
    i8 116, label %808
    i8 119, label %816
    i8 121, label %816
    i8 -54, label %824
  ]

768:                                              ; preds = %766
  %769 = getelementptr inbounds i8, ptr %125, i64 1
  %770 = load i8, ptr %769, align 1, !tbaa !5
  %771 = icmp eq i8 %770, -54
  br i1 %771, label %772, label %882

772:                                              ; preds = %768
  %773 = getelementptr inbounds i8, ptr %125, i64 2
  %774 = load i8, ptr %773, align 1, !tbaa !5
  %775 = icmp eq i8 %774, -66
  br i1 %775, label %1008, label %882

776:                                              ; preds = %766
  %777 = getelementptr inbounds i8, ptr %125, i64 1
  %778 = load i8, ptr %777, align 1, !tbaa !5
  switch i8 %778, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

779:                                              ; preds = %766
  %780 = getelementptr inbounds i8, ptr %125, i64 1
  %781 = load i8, ptr %780, align 1, !tbaa !5
  %782 = icmp eq i8 %781, -52
  br i1 %782, label %783, label %882

783:                                              ; preds = %779
  %784 = getelementptr inbounds i8, ptr %125, i64 2
  %785 = load i8, ptr %784, align 1, !tbaa !5
  %786 = icmp eq i8 %785, -79
  br i1 %786, label %1008, label %882

787:                                              ; preds = %766
  %788 = getelementptr inbounds i8, ptr %125, i64 1
  %789 = load i8, ptr %788, align 1, !tbaa !5
  %790 = icmp eq i8 %789, -52
  br i1 %790, label %791, label %882

791:                                              ; preds = %787
  %792 = getelementptr inbounds i8, ptr %125, i64 2
  %793 = load i8, ptr %792, align 1, !tbaa !5
  %794 = icmp eq i8 %793, -121
  br i1 %794, label %1008, label %882

795:                                              ; preds = %766
  %796 = getelementptr inbounds i8, ptr %125, i64 1
  %797 = load i8, ptr %796, align 1, !tbaa !5
  %798 = icmp eq i8 %797, -52
  br i1 %798, label %799, label %882

799:                                              ; preds = %795
  %800 = getelementptr inbounds i8, ptr %125, i64 2
  %801 = load i8, ptr %800, align 1, !tbaa !5
  %802 = icmp eq i8 %801, -116
  br i1 %802, label %1008, label %882

803:                                              ; preds = %766
  %804 = getelementptr inbounds i8, ptr %125, i64 1
  %805 = load i8, ptr %804, align 1, !tbaa !5
  %806 = add i8 %805, -115
  %807 = icmp ult i8 %806, 2
  br i1 %807, label %1008, label %882

808:                                              ; preds = %766
  %809 = getelementptr inbounds i8, ptr %125, i64 1
  %810 = load i8, ptr %809, align 1, !tbaa !5
  %811 = icmp eq i8 %810, -52
  br i1 %811, label %812, label %882

812:                                              ; preds = %808
  %813 = getelementptr inbounds i8, ptr %125, i64 2
  %814 = load i8, ptr %813, align 1, !tbaa !5
  %815 = icmp eq i8 %814, -120
  br i1 %815, label %1008, label %882

816:                                              ; preds = %766, %766
  %817 = getelementptr inbounds i8, ptr %125, i64 1
  %818 = load i8, ptr %817, align 1, !tbaa !5
  %819 = icmp eq i8 %818, -52
  br i1 %819, label %820, label %882

820:                                              ; preds = %816
  %821 = getelementptr inbounds i8, ptr %125, i64 2
  %822 = load i8, ptr %821, align 1, !tbaa !5
  %823 = icmp eq i8 %822, -118
  br i1 %823, label %1008, label %882

824:                                              ; preds = %766
  %825 = getelementptr inbounds i8, ptr %125, i64 1
  %826 = load i8, ptr %825, align 1, !tbaa !5
  %827 = icmp eq i8 %826, -68
  br i1 %827, label %828, label %882

828:                                              ; preds = %824
  %829 = getelementptr inbounds i8, ptr %125, i64 2
  %830 = load i8, ptr %829, align 1, !tbaa !5
  %831 = icmp eq i8 %830, 110
  br i1 %831, label %1008, label %882

832:                                              ; preds = %764
  %833 = icmp sgt i64 %128, 1
  br i1 %833, label %834, label %882

834:                                              ; preds = %832
  %835 = load i8, ptr %125, align 1, !tbaa !5
  switch i8 %835, label %882 [
    i8 102, label %836
    i8 115, label %839
  ]

836:                                              ; preds = %834
  %837 = getelementptr inbounds i8, ptr %125, i64 1
  %838 = load i8, ptr %837, align 1, !tbaa !5
  switch i8 %838, label %882 [
    i8 102, label %1008
    i8 105, label %1008
    i8 108, label %1008
  ]

839:                                              ; preds = %834
  %840 = getelementptr inbounds i8, ptr %125, i64 1
  %841 = load i8, ptr %840, align 1, !tbaa !5
  %842 = add i8 %841, -115
  %843 = icmp ult i8 %842, 2
  br i1 %843, label %1008, label %882

844:                                              ; preds = %30, %33, %36, %120
  %845 = phi ptr [ %122, %120 ], [ %27, %30 ], [ %27, %33 ], [ %38, %36 ]
  %846 = phi ptr [ %121, %120 ], [ %12, %30 ], [ %12, %33 ], [ %8, %36 ]
  %847 = ptrtoint ptr %845 to i64
  %848 = ptrtoint ptr %846 to i64
  %849 = sub i64 %847, %848
  %850 = icmp sgt i64 %849, 2
  br i1 %850, label %851, label %864

851:                                              ; preds = %844
  %852 = load i8, ptr %846, align 1, !tbaa !5
  %853 = and i8 %852, -33
  switch i8 %853, label %879 [
    i8 70, label %854
    i8 83, label %858
  ]

854:                                              ; preds = %851
  %855 = getelementptr inbounds i8, ptr %846, i64 1
  %856 = load i8, ptr %855, align 1, !tbaa !5
  %857 = and i8 %856, -33
  switch i8 %857, label %879 [
    i8 70, label %1008
    i8 73, label %1008
    i8 76, label %1008
  ]

858:                                              ; preds = %851
  %859 = getelementptr inbounds i8, ptr %846, i64 1
  %860 = load i8, ptr %859, align 1, !tbaa !5
  %861 = and i8 %860, -33
  %862 = add i8 %861, -83
  %863 = icmp ult i8 %862, 2
  br i1 %863, label %1008, label %879

864:                                              ; preds = %844
  %865 = icmp eq i64 %849, 2
  %866 = load i8, ptr %846, align 1, !tbaa !5
  br i1 %865, label %867, label %879

867:                                              ; preds = %864
  %868 = and i8 %866, -33
  switch i8 %868, label %879 [
    i8 70, label %869
    i8 83, label %873
  ]

869:                                              ; preds = %867
  %870 = getelementptr inbounds i8, ptr %846, i64 1
  %871 = load i8, ptr %870, align 1, !tbaa !5
  %872 = and i8 %871, -33
  switch i8 %872, label %879 [
    i8 70, label %1008
    i8 73, label %1008
    i8 76, label %1008
  ]

873:                                              ; preds = %867
  %874 = getelementptr inbounds i8, ptr %846, i64 1
  %875 = load i8, ptr %874, align 1, !tbaa !5
  %876 = and i8 %875, -33
  %877 = add i8 %876, -83
  %878 = icmp ult i8 %877, 2
  br i1 %878, label %1008, label %879

879:                                              ; preds = %873, %858, %867, %869, %851, %854, %864
  %880 = phi i8 [ %866, %873 ], [ %852, %858 ], [ %866, %867 ], [ %866, %869 ], [ %852, %851 ], [ %852, %854 ], [ %866, %864 ]
  %881 = zext i8 %880 to i64
  br label %966

882:                                              ; preds = %839, %803, %753, %623, %538, %408, %323, %167, %834, %836, %766, %776, %738, %586, %697, %719, %708, %677, %678, %596, %565, %549, %371, %523, %482, %504, %493, %462, %463, %381, %350, %334, %130, %308, %256, %289, %267, %270, %273, %233, %240, %221, %222, %140, %832, %824, %828, %816, %820, %808, %812, %795, %799, %787, %791, %779, %783, %768, %772, %756, %760, %749, %741, %745, %730, %734, %726, %722, %715, %711, %700, %704, %689, %693, %685, %681, %669, %673, %656, %660, %644, %648, %652, %636, %640, %628, %632, %615, %619, %607, %611, %599, %603, %588, %592, %576, %580, %552, %557, %561, %541, %545, %534, %526, %530, %515, %519, %511, %507, %500, %496, %485, %489, %474, %478, %470, %466, %454, %458, %441, %445, %429, %433, %437, %421, %425, %413, %417, %400, %404, %392, %396, %384, %388, %373, %377, %361, %365, %337, %342, %346, %326, %330, %319, %311, %315, %300, %304, %296, %292, %285, %281, %276, %259, %263, %252, %236, %248, %243, %229, %225, %213, %217, %200, %204, %188, %192, %196, %180, %184, %172, %176, %159, %163, %151, %155, %143, %147, %132, %136
  %883 = call i64 @Perl_valid_utf8_to_uvchr(ptr noundef nonnull %125, ptr noundef null) #12
  %884 = icmp ugt i64 %883, 255
  br i1 %884, label %885, label %966

885:                                              ; preds = %882
  %886 = load ptr, ptr @PL_utf8_foldclosures, align 8, !tbaa !35
  %887 = icmp eq ptr %886, null
  br i1 %887, label %888, label %890

888:                                              ; preds = %885
  call void @Perl__load_PL_utf8_foldclosures() #12
  %889 = load ptr, ptr @PL_utf8_foldclosures, align 8, !tbaa !35
  br label %890

890:                                              ; preds = %888, %885
  %891 = phi ptr [ %889, %888 ], [ %886, %885 ]
  %892 = load i8, ptr %125, align 1, !tbaa !5
  %893 = zext i8 %892 to i64
  %894 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %893
  %895 = load i8, ptr %894, align 1, !tbaa !5
  %896 = zext i8 %895 to i32
  %897 = call ptr @Perl_hv_common_key_len(ptr noundef %891, ptr noundef nonnull %125, i32 noundef %896, i32 noundef 32, ptr noundef null, i32 noundef 0) #12
  %898 = icmp eq ptr %897, null
  br i1 %898, label %1009, label %899

899:                                              ; preds = %890
  %900 = load ptr, ptr %897, align 8, !tbaa !35
  %901 = getelementptr inbounds %struct.sv, ptr %900, i64 0, i32 2
  %902 = load i32, ptr %901, align 4, !tbaa !15
  %903 = and i32 %902, 8388608
  %904 = icmp eq i32 %903, 0
  br i1 %904, label %908, label %905

905:                                              ; preds = %899
  %906 = call i32 @Perl_mg_size(ptr noundef nonnull %900) #12
  %907 = sext i32 %906 to i64
  br label %912

908:                                              ; preds = %899
  %909 = load ptr, ptr %900, align 8, !tbaa !314
  %910 = getelementptr inbounds %struct.xpvav, ptr %909, i64 0, i32 2
  %911 = load i64, ptr %910, align 8, !tbaa !316
  br label %912

912:                                              ; preds = %905, %908
  %913 = phi i64 [ %907, %905 ], [ %911, %908 ]
  %914 = icmp eq i64 %913, 1
  br i1 %914, label %915, label %1008

915:                                              ; preds = %912
  %916 = call ptr @Perl_av_fetch(ptr noundef nonnull %900, i64 noundef 0, i32 noundef 0) #12
  %917 = icmp eq ptr %916, null
  br i1 %917, label %918, label %919

918:                                              ; preds = %915
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.21) #12
  br label %919

919:                                              ; preds = %918, %915
  %920 = load ptr, ptr %916, align 8, !tbaa !35
  %921 = getelementptr inbounds %struct.sv, ptr %920, i64 0, i32 2
  %922 = load i32, ptr %921, align 4, !tbaa !15
  %923 = and i32 %922, -2145386240
  %924 = icmp eq i32 %923, -2147483392
  br i1 %924, label %925, label %929

925:                                              ; preds = %919
  %926 = load ptr, ptr %920, align 8, !tbaa !38
  %927 = getelementptr inbounds %struct.xpvuv, ptr %926, i64 0, i32 4
  %928 = load i64, ptr %927, align 8, !tbaa !5
  br label %931

929:                                              ; preds = %919
  %930 = call i64 @Perl_sv_2uv_flags(ptr noundef nonnull %920, i32 noundef 2) #12
  br label %931

931:                                              ; preds = %929, %925
  %932 = phi i64 [ %928, %925 ], [ %930, %929 ]
  %933 = call ptr @Perl_av_fetch(ptr noundef nonnull %900, i64 noundef 1, i32 noundef 0) #12
  %934 = icmp eq ptr %933, null
  br i1 %934, label %935, label %936

935:                                              ; preds = %931
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.21) #12
  br label %936

936:                                              ; preds = %935, %931
  %937 = load ptr, ptr %933, align 8, !tbaa !35
  %938 = getelementptr inbounds %struct.sv, ptr %937, i64 0, i32 2
  %939 = load i32, ptr %938, align 4, !tbaa !15
  %940 = and i32 %939, -2145386240
  %941 = icmp eq i32 %940, -2147483392
  br i1 %941, label %942, label %946

942:                                              ; preds = %936
  %943 = load ptr, ptr %937, align 8, !tbaa !38
  %944 = getelementptr inbounds %struct.xpvuv, ptr %943, i64 0, i32 4
  %945 = load i64, ptr %944, align 8, !tbaa !5
  br label %948

946:                                              ; preds = %936
  %947 = call i64 @Perl_sv_2uv_flags(ptr noundef nonnull %937, i32 noundef 2) #12
  br label %948

948:                                              ; preds = %946, %942
  %949 = phi i64 [ %945, %942 ], [ %947, %946 ]
  %950 = icmp ult i64 %932, 256
  %951 = icmp ugt i64 %949, 255
  %952 = xor i1 %950, %951
  br i1 %952, label %1009, label %953

953:                                              ; preds = %948
  %954 = load i8, ptr %13, align 1, !tbaa !56
  %955 = icmp eq i8 %954, 34
  %956 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !42
  %957 = icmp eq i8 %956, 0
  %958 = select i1 %955, i1 %957, i1 false
  br i1 %958, label %964, label %959

959:                                              ; preds = %953
  switch i8 %954, label %1009 [
    i8 36, label %960
    i8 39, label %960
  ]

960:                                              ; preds = %959, %959
  %961 = icmp ult i64 %932, 128
  %962 = icmp ult i64 %949, 128
  %963 = or i1 %961, %962
  br i1 %963, label %964, label %1009

964:                                              ; preds = %953, %960
  %965 = select i1 %950, i64 %949, i64 %932
  br label %1009

966:                                              ; preds = %879, %882
  %967 = phi i64 [ %881, %879 ], [ %883, %882 ]
  br i1 %10, label %968, label %970

968:                                              ; preds = %966
  %969 = load i8, ptr %13, align 1, !tbaa !56
  br label %989

970:                                              ; preds = %966
  %971 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %967
  %972 = load i32, ptr %971, align 4, !tbaa !73
  %973 = and i32 %972, 262144
  %974 = icmp eq i32 %973, 0
  %975 = load i8, ptr %13, align 1, !tbaa !56
  br i1 %974, label %989, label %976

976:                                              ; preds = %970
  %977 = icmp eq i8 %975, 34
  %978 = load i8, ptr @PL_in_utf8_CTYPE_locale, align 1, !range !42
  %979 = icmp eq i8 %978, 0
  %980 = select i1 %977, i1 %979, i1 false
  br i1 %980, label %991, label %981

981:                                              ; preds = %976
  %982 = icmp eq i8 %975, 36
  br i1 %982, label %987, label %983

983:                                              ; preds = %981
  %984 = icmp eq i8 %975, 39
  %985 = icmp ult i64 %967, 128
  %986 = and i1 %985, %984
  br i1 %986, label %1000, label %1006

987:                                              ; preds = %981
  %988 = icmp ult i64 %967, 128
  br i1 %988, label %1000, label %1006

989:                                              ; preds = %968, %970
  %990 = phi i8 [ %969, %968 ], [ %975, %970 ]
  switch i8 %990, label %1004 [
    i8 34, label %991
    i8 33, label %995
    i8 39, label %1000
    i8 36, label %1000
    i8 37, label %1000
    i8 35, label %1000
  ]

991:                                              ; preds = %976, %989
  %992 = getelementptr inbounds [0 x i8], ptr @PL_fold_locale, i64 0, i64 %967
  %993 = load i8, ptr %992, align 1, !tbaa !5
  %994 = zext i8 %993 to i64
  br label %1009

995:                                              ; preds = %989
  br i1 %10, label %996, label %1000

996:                                              ; preds = %995
  %997 = getelementptr inbounds [0 x i8], ptr @PL_fold, i64 0, i64 %967
  %998 = load i8, ptr %997, align 1, !tbaa !5
  %999 = zext i8 %998 to i64
  br label %1049

1000:                                             ; preds = %987, %983, %989, %995, %989, %989, %989
  %1001 = getelementptr inbounds [0 x i8], ptr @PL_fold_latin1, i64 0, i64 %967
  %1002 = load i8, ptr %1001, align 1, !tbaa !5
  %1003 = zext i8 %1002 to i64
  br label %1009

1004:                                             ; preds = %989
  %1005 = zext i8 %990 to i32
  call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.22, i32 noundef %1005) #12
  br label %1009

1006:                                             ; preds = %983, %987
  %1007 = icmp eq i64 %967, 255
  br i1 %1007, label %1023, label %1008

1008:                                             ; preds = %912, %136, %147, %155, %163, %176, %184, %196, %204, %217, %229, %243, %248, %252, %263, %276, %281, %285, %296, %304, %315, %323, %323, %323, %323, %330, %346, %365, %377, %388, %396, %404, %417, %425, %437, %445, %458, %466, %470, %478, %489, %496, %500, %507, %511, %519, %530, %538, %538, %538, %538, %545, %561, %580, %592, %603, %611, %619, %632, %640, %652, %660, %673, %681, %685, %693, %704, %711, %715, %722, %726, %734, %745, %753, %753, %753, %753, %760, %772, %783, %791, %799, %812, %820, %828, %225, %292, %140, %140, %140, %167, %270, %381, %381, %381, %408, %596, %596, %596, %623, %776, %776, %776, %803, %836, %836, %836, %839, %854, %854, %854, %858, %869, %869, %869, %873, %1006
  store i32 -1000, ptr %1, align 4, !tbaa !73
  store i32 -1000, ptr %3, align 4, !tbaa !73
  br label %1056

1009:                                             ; preds = %18, %1004, %1000, %991, %890, %948, %960, %959, %964
  %1010 = phi i64 [ %965, %964 ], [ %949, %959 ], [ %949, %948 ], [ %949, %960 ], [ %883, %890 ], [ %994, %991 ], [ %1003, %1000 ], [ -998, %1004 ], [ %20, %18 ]
  %1011 = phi i64 [ %965, %964 ], [ %932, %959 ], [ %932, %948 ], [ %932, %960 ], [ %883, %890 ], [ %967, %991 ], [ %967, %1000 ], [ %967, %1004 ], [ %20, %18 ]
  br i1 %10, label %1041, label %1023

1012:                                             ; preds = %21
  %1013 = load i8, ptr %12, align 1, !tbaa !5
  %1014 = zext i8 %1013 to i64
  %1015 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1014
  %1016 = load i8, ptr %1015, align 1, !tbaa !5
  %1017 = zext i8 %1016 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %2, ptr nonnull align 1 %12, i64 %1017, i1 false)
  %1018 = load i8, ptr %12, align 1, !tbaa !5
  %1019 = zext i8 %1018 to i64
  %1020 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %1019
  %1021 = load i8, ptr %1020, align 1, !tbaa !5
  %1022 = zext i8 %1021 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %4, ptr nonnull align 1 %12, i64 %1022, i1 false)
  br label %1028

1023:                                             ; preds = %1006, %1009
  %1024 = phi i64 [ %1010, %1009 ], [ 376, %1006 ]
  %1025 = phi i64 [ %1011, %1009 ], [ 255, %1006 ]
  %1026 = call ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef %2, i64 noundef %1025, i64 noundef 0) #12
  %1027 = call ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef %4, i64 noundef %1024, i64 noundef 0) #12
  br label %1028

1028:                                             ; preds = %1012, %1023
  %1029 = phi i64 [ %1025, %1023 ], [ -999, %1012 ]
  %1030 = phi i64 [ %1024, %1023 ], [ -998, %1012 ]
  %1031 = load i8, ptr %2, align 1, !tbaa !5
  %1032 = icmp sgt i8 %1031, -1
  %1033 = zext i8 %1031 to i32
  %1034 = select i1 %1032, i32 %1033, i32 -999
  store i32 %1034, ptr %1, align 4, !tbaa !73
  %1035 = load i8, ptr %4, align 1, !tbaa !5
  %1036 = zext i8 %1035 to i32
  %1037 = icmp eq i64 %1029, %1030
  %1038 = select i1 %1037, i32 -999, i32 -998
  %1039 = icmp slt i8 %1035, 0
  %1040 = select i1 %1039, i32 %1038, i32 %1036
  store i32 %1040, ptr %3, align 4, !tbaa !73
  br label %1056

1041:                                             ; preds = %22, %1009
  %1042 = phi i64 [ %1011, %1009 ], [ %23, %22 ]
  %1043 = phi i64 [ %1010, %1009 ], [ %23, %22 ]
  %1044 = icmp ugt i64 %1042, 255
  br i1 %1044, label %1045, label %1049

1045:                                             ; preds = %1041
  %1046 = icmp ugt i64 %1043, 255
  br i1 %1046, label %1056, label %1047

1047:                                             ; preds = %1045
  %1048 = trunc i64 %1043 to i32
  store i32 %1048, ptr %3, align 4, !tbaa !73
  store i32 %1048, ptr %1, align 4, !tbaa !73
  br label %1056

1049:                                             ; preds = %996, %1041
  %1050 = phi i64 [ %999, %996 ], [ %1043, %1041 ]
  %1051 = phi i64 [ %967, %996 ], [ %1042, %1041 ]
  %1052 = trunc i64 %1051 to i32
  store i32 %1052, ptr %1, align 4, !tbaa !73
  %1053 = icmp ult i64 %1050, 256
  %1054 = select i1 %1053, i64 %1050, i64 %1051
  %1055 = trunc i64 %1054 to i32
  store i32 %1055, ptr %3, align 4, !tbaa !73
  br label %1056

1056:                                             ; preds = %1008, %1047, %1049, %1028, %1045
  %1057 = phi i1 [ false, %1045 ], [ true, %1028 ], [ true, %1049 ], [ true, %1047 ], [ true, %1008 ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %8) #12
  ret i1 %1057
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @S_regrepeat(ptr noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, i32 noundef %4) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [14 x i8], align 1
  %9 = alloca [14 x i8], align 1
  %10 = alloca ptr, align 8
  %11 = alloca i8, align 1
  %12 = getelementptr inbounds %struct.regmatch_info, ptr %3, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !27
  %14 = getelementptr %struct.regmatch_info, ptr %3, i64 0, i32 14
  %15 = load i8, ptr %14, align 2, !tbaa !22, !range !42, !noundef !43
  %16 = icmp ne i8 %15, 0
  %17 = load ptr, ptr %1, align 8, !tbaa !35
  %18 = icmp eq i32 %4, 32767
  %19 = or i1 %18, %16
  %20 = select i1 %18, i32 2147483647, i32 %4
  %21 = ptrtoint ptr %13 to i64
  %22 = ptrtoint ptr %17 to i64
  %23 = sub i64 %21, %22
  %24 = sext i32 %4 to i64
  %25 = icmp sgt i64 %23, %24
  %26 = getelementptr inbounds i8, ptr %17, i64 %24
  %27 = select i1 %25, ptr %26, ptr %13
  %28 = select i1 %19, ptr %13, ptr %27
  %29 = ptrtoint ptr %28 to i64
  %30 = select i1 %19, i32 %20, i32 %4
  %31 = getelementptr inbounds %struct.regnode, ptr %2, i64 0, i32 1
  %32 = load i8, ptr %31, align 1, !tbaa !56
  switch i8 %32, label %982 [
    i8 16, label %33
    i8 17, label %65
    i8 18, label %83
    i8 32, label %89
    i8 31, label %89
    i8 39, label %194
    i8 36, label %194
    i8 34, label %186
    i8 33, label %187
    i8 38, label %188
    i8 37, label %189
    i8 35, label %189
    i8 20, label %307
    i8 19, label %307
    i8 26, label %354
    i8 22, label %355
    i8 21, label %394
    i8 24, label %395
    i8 25, label %424
    i8 28, label %425
    i8 27, label %474
    i8 23, label %475
    i8 91, label %895
    i8 9, label %991
    i8 13, label %991
    i8 8, label %991
    i8 11, label %991
    i8 10, label %991
    i8 6, label %991
    i8 7, label %991
    i8 90, label %991
    i8 12, label %991
    i8 15, label %991
    i8 14, label %991
    i8 82, label %991
    i8 2, label %991
    i8 4, label %991
  ]

33:                                               ; preds = %5
  br i1 %16, label %39, label %34

34:                                               ; preds = %33
  %35 = icmp ult ptr %17, %28
  br i1 %35, label %36, label %991

36:                                               ; preds = %34
  %37 = sub i64 %29, %22
  %38 = getelementptr i8, ptr %17, i64 %37
  br label %58

39:                                               ; preds = %33
  %40 = icmp ult ptr %17, %13
  %41 = icmp sgt i32 %20, 0
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %991

43:                                               ; preds = %39, %48
  %44 = phi ptr [ %53, %48 ], [ %17, %39 ]
  %45 = phi i32 [ %54, %48 ], [ 0, %39 ]
  %46 = load i8, ptr %44, align 1, !tbaa !5
  %47 = icmp eq i8 %46, 10
  br i1 %47, label %987, label %48

48:                                               ; preds = %43
  %49 = zext i8 %46 to i64
  %50 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !5
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds i8, ptr %44, i64 %52
  %54 = add nuw nsw i32 %45, 1
  %55 = icmp ult ptr %53, %28
  %56 = icmp slt i32 %54, %30
  %57 = select i1 %55, i1 %56, i1 false
  br i1 %57, label %43, label %998, !llvm.loop !368

58:                                               ; preds = %36, %62
  %59 = phi ptr [ %63, %62 ], [ %17, %36 ]
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = icmp eq i8 %60, 10
  br i1 %61, label %991, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds i8, ptr %59, i64 1
  %64 = icmp eq ptr %63, %38
  br i1 %64, label %991, label %58, !llvm.loop !369

65:                                               ; preds = %5
  br i1 %16, label %66, label %991

66:                                               ; preds = %65
  %67 = icmp ult ptr %17, %13
  %68 = icmp sgt i32 %20, 0
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %991

70:                                               ; preds = %66, %70
  %71 = phi ptr [ %78, %70 ], [ %17, %66 ]
  %72 = phi i32 [ %79, %70 ], [ 0, %66 ]
  %73 = load i8, ptr %71, align 1, !tbaa !5
  %74 = zext i8 %73 to i64
  %75 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %74
  %76 = load i8, ptr %75, align 1, !tbaa !5
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds i8, ptr %71, i64 %77
  %79 = add nuw nsw i32 %72, 1
  %80 = icmp ult ptr %78, %28
  %81 = icmp slt i32 %79, %30
  %82 = select i1 %80, i1 %81, i1 false
  br i1 %82, label %70, label %998, !llvm.loop !370

83:                                               ; preds = %5
  br i1 %16, label %84, label %991

84:                                               ; preds = %83
  %85 = sext i32 %20 to i64
  %86 = icmp sgt i64 %23, %85
  %87 = getelementptr inbounds i8, ptr %17, i64 %85
  %88 = select i1 %86, ptr %87, ptr %13
  br label %991

89:                                               ; preds = %5, %5
  %90 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3
  %91 = load i8, ptr %90, align 2, !tbaa !5
  %92 = icmp sgt i8 %91, -1
  br i1 %92, label %98, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.regmatch_info, ptr %3, i64 0, i32 13
  %95 = load i8, ptr %94, align 1, !tbaa !30, !range !42, !noundef !43
  %96 = icmp eq i8 %95, 0
  br i1 %16, label %117, label %97

97:                                               ; preds = %93
  br i1 %96, label %98, label %142

98:                                               ; preds = %97, %89
  %99 = sub i64 %29, %22
  %100 = sext i32 %30 to i64
  %101 = icmp sgt i64 %99, %100
  %102 = getelementptr inbounds i8, ptr %17, i64 %100
  %103 = select i1 %16, i1 %101, i1 false
  %104 = select i1 %103, ptr %102, ptr %28
  %105 = icmp ult ptr %17, %104
  br i1 %105, label %106, label %991

106:                                              ; preds = %98
  %107 = ptrtoint ptr %104 to i64
  %108 = sub i64 %107, %22
  %109 = getelementptr i8, ptr %17, i64 %108
  br label %110

110:                                              ; preds = %106, %114
  %111 = phi ptr [ %115, %114 ], [ %17, %106 ]
  %112 = load i8, ptr %111, align 1, !tbaa !5
  %113 = icmp eq i8 %112, %91
  br i1 %113, label %114, label %991

114:                                              ; preds = %110
  %115 = getelementptr inbounds i8, ptr %111, i64 1
  %116 = icmp eq ptr %115, %109
  br i1 %116, label %991, label %110, !llvm.loop !371

117:                                              ; preds = %93
  br i1 %96, label %165, label %118

118:                                              ; preds = %117
  %119 = icmp sgt i32 %20, 0
  %120 = icmp ult ptr %17, %13
  %121 = select i1 %119, i1 %120, i1 false
  br i1 %121, label %122, label %991

122:                                              ; preds = %118
  %123 = load i8, ptr %2, align 2, !tbaa !59
  br label %124

124:                                              ; preds = %122, %136
  %125 = phi ptr [ %17, %122 ], [ %137, %136 ]
  %126 = phi i32 [ 0, %122 ], [ %138, %136 ]
  %127 = load i8, ptr %125, align 1, !tbaa !5
  %128 = zext i8 %127 to i64
  %129 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %128
  %130 = load i8, ptr %129, align 1, !tbaa !5
  %131 = zext i8 %130 to i64
  %132 = icmp ugt i8 %130, %123
  br i1 %132, label %987, label %133

133:                                              ; preds = %124
  %134 = tail call i32 @bcmp(ptr nonnull %125, ptr nonnull %90, i64 %131)
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %987

136:                                              ; preds = %133
  %137 = getelementptr inbounds i8, ptr %125, i64 %131
  %138 = add nuw nsw i32 %126, 1
  %139 = icmp slt i32 %138, %30
  %140 = icmp ult ptr %137, %28
  %141 = select i1 %139, i1 %140, i1 false
  br i1 %141, label %124, label %998, !llvm.loop !372

142:                                              ; preds = %97
  %143 = icmp ugt i8 %91, -61
  br i1 %143, label %991, label %144

144:                                              ; preds = %142
  %145 = and i8 %91, 31
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 6
  %148 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3, i64 1
  %149 = load i8, ptr %148, align 1, !tbaa !5
  %150 = and i8 %149, 63
  %151 = zext i8 %150 to i32
  %152 = or i32 %147, %151
  %153 = icmp ult ptr %17, %28
  br i1 %153, label %154, label %991

154:                                              ; preds = %144
  %155 = sub i64 %29, %22
  %156 = getelementptr i8, ptr %17, i64 %155
  br label %157

157:                                              ; preds = %154, %162
  %158 = phi ptr [ %163, %162 ], [ %17, %154 ]
  %159 = load i8, ptr %158, align 1, !tbaa !5
  %160 = zext i8 %159 to i32
  %161 = icmp eq i32 %152, %160
  br i1 %161, label %162, label %991

162:                                              ; preds = %157
  %163 = getelementptr inbounds i8, ptr %158, i64 1
  %164 = icmp eq ptr %163, %156
  br i1 %164, label %991, label %157, !llvm.loop !373

165:                                              ; preds = %117
  %166 = lshr i8 %91, 6
  %167 = or i8 %166, -64
  %168 = and i8 %91, 63
  %169 = or i8 %168, -128
  %170 = icmp sgt i32 %20, 0
  br i1 %170, label %171, label %991

171:                                              ; preds = %165, %182
  %172 = phi ptr [ %183, %182 ], [ %17, %165 ]
  %173 = phi i32 [ %184, %182 ], [ 0, %165 ]
  %174 = getelementptr inbounds i8, ptr %172, i64 1
  %175 = icmp ult ptr %174, %28
  br i1 %175, label %176, label %987

176:                                              ; preds = %171
  %177 = load i8, ptr %172, align 1, !tbaa !5
  %178 = icmp eq i8 %177, %167
  br i1 %178, label %179, label %987

179:                                              ; preds = %176
  %180 = load i8, ptr %174, align 1, !tbaa !5
  %181 = icmp eq i8 %180, %169
  br i1 %181, label %182, label %987

182:                                              ; preds = %179
  %183 = getelementptr inbounds i8, ptr %172, i64 2
  %184 = add nuw nsw i32 %173, 1
  %185 = icmp eq i32 %184, %30
  br i1 %185, label %987, label %171, !llvm.loop !374

186:                                              ; preds = %5
  br label %194

187:                                              ; preds = %5
  br label %194

188:                                              ; preds = %5
  br i1 %16, label %194, label %991

189:                                              ; preds = %5, %5
  %190 = getelementptr inbounds %struct.regmatch_info, ptr %3, i64 0, i32 13
  %191 = load i8, ptr %190, align 1, !tbaa !30, !range !42, !noundef !43
  %192 = icmp eq i8 %191, 0
  %193 = select i1 %192, i32 0, i32 8
  br label %194

194:                                              ; preds = %188, %5, %5, %189, %187, %186
  %195 = phi i32 [ %193, %189 ], [ 0, %187 ], [ 2, %186 ], [ 1, %5 ], [ 1, %5 ], [ 42, %188 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #12
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #12
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %8) #12
  call void @llvm.lifetime.start.p0(i64 14, ptr nonnull %9) #12
  %196 = getelementptr i8, ptr %3, i64 89
  %197 = load i8, ptr %196, align 1, !tbaa !30, !range !42, !noundef !43
  %198 = call fastcc zeroext i1 @S_setup_EXACTISH_ST_c1_c2(ptr noundef nonnull %2, ptr noundef nonnull %6, ptr noundef nonnull %8, ptr noundef nonnull %7, ptr noundef nonnull %9, i8 %197, i8 %15)
  br i1 %198, label %199, label %304

199:                                              ; preds = %194
  %200 = load i32, ptr %6, align 4, !tbaa !73
  %201 = icmp eq i32 %200, -1000
  br i1 %201, label %202, label %232

202:                                              ; preds = %199
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #12
  %203 = load ptr, ptr %12, align 8, !tbaa !27
  store ptr %203, ptr %10, align 8, !tbaa !35
  %204 = load i8, ptr %196, align 1, !tbaa !30, !range !42, !noundef !43
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %213, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3
  %208 = load i8, ptr %207, align 2, !tbaa !5
  %209 = zext i8 %208 to i64
  %210 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %209
  %211 = load i8, ptr %210, align 1, !tbaa !5
  %212 = zext i8 %211 to i64
  br label %213

213:                                              ; preds = %202, %206
  %214 = phi i64 [ %212, %206 ], [ 1, %202 ]
  %215 = getelementptr inbounds %struct.regnode_string, ptr %2, i64 0, i32 3
  %216 = icmp sgt i32 %30, 0
  br i1 %216, label %217, label %229

217:                                              ; preds = %213, %224
  %218 = phi ptr [ %225, %224 ], [ %17, %213 ]
  %219 = phi i32 [ %227, %224 ], [ 0, %213 ]
  %220 = load i8, ptr %196, align 1, !tbaa !30, !range !42, !noundef !43
  %221 = icmp ne i8 %220, 0
  %222 = call i32 @Perl_foldEQ_utf8_flags(ptr noundef %218, ptr noundef nonnull %10, i64 noundef 0, i1 noundef zeroext %16, ptr noundef nonnull %215, ptr noundef null, i64 noundef %214, i1 noundef zeroext %221, i32 noundef %195) #12
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %229, label %224

224:                                              ; preds = %217
  %225 = load ptr, ptr %10, align 8, !tbaa !35
  %226 = load ptr, ptr %12, align 8, !tbaa !27
  store ptr %226, ptr %10, align 8, !tbaa !35
  %227 = add nuw nsw i32 %219, 1
  %228 = icmp eq i32 %227, %30
  br i1 %228, label %229, label %217, !llvm.loop !375

229:                                              ; preds = %217, %224, %213
  %230 = phi i32 [ 0, %213 ], [ %30, %224 ], [ %219, %217 ]
  %231 = phi ptr [ %17, %213 ], [ %225, %224 ], [ %218, %217 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #12
  br label %304

232:                                              ; preds = %199
  %233 = load i32, ptr %7, align 4
  %234 = icmp eq i32 %200, %233
  br i1 %16, label %235, label %276

235:                                              ; preds = %232
  %236 = icmp ult ptr %17, %13
  %237 = icmp sgt i32 %20, 0
  %238 = and i1 %236, %237
  br i1 %234, label %240, label %239

239:                                              ; preds = %235
  br i1 %238, label %257, label %304

240:                                              ; preds = %235
  br i1 %238, label %241, label %304

241:                                              ; preds = %240, %251
  %242 = phi ptr [ %252, %251 ], [ %17, %240 ]
  %243 = phi i32 [ %253, %251 ], [ 0, %240 ]
  %244 = load i8, ptr %242, align 1, !tbaa !5
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %245
  %247 = load i8, ptr %246, align 1, !tbaa !5
  %248 = zext i8 %247 to i64
  %249 = call i32 @bcmp(ptr nonnull %242, ptr nonnull %8, i64 %248)
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %304

251:                                              ; preds = %241
  %252 = getelementptr inbounds i8, ptr %242, i64 %248
  %253 = add nuw nsw i32 %243, 1
  %254 = icmp ult ptr %252, %28
  %255 = icmp slt i32 %253, %30
  %256 = select i1 %254, i1 %255, i1 false
  br i1 %256, label %241, label %304, !llvm.loop !376

257:                                              ; preds = %239, %270
  %258 = phi ptr [ %271, %270 ], [ %17, %239 ]
  %259 = phi i32 [ %272, %270 ], [ 0, %239 ]
  %260 = load i8, ptr %258, align 1, !tbaa !5
  %261 = zext i8 %260 to i64
  %262 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %261
  %263 = load i8, ptr %262, align 1, !tbaa !5
  %264 = zext i8 %263 to i64
  %265 = call i32 @bcmp(ptr nonnull %258, ptr nonnull %8, i64 %264)
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %270, label %267

267:                                              ; preds = %257
  %268 = call i32 @bcmp(ptr nonnull %258, ptr nonnull %9, i64 %264)
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %304

270:                                              ; preds = %257, %267
  %271 = getelementptr inbounds i8, ptr %258, i64 %264
  %272 = add nuw nsw i32 %259, 1
  %273 = icmp ult ptr %271, %28
  %274 = icmp slt i32 %272, %30
  %275 = select i1 %273, i1 %274, i1 false
  br i1 %275, label %257, label %304, !llvm.loop !377

276:                                              ; preds = %232
  %277 = icmp ult ptr %17, %28
  br i1 %234, label %282, label %278

278:                                              ; preds = %276
  br i1 %277, label %279, label %304

279:                                              ; preds = %278
  %280 = sub i64 %29, %22
  %281 = getelementptr i8, ptr %17, i64 %280
  br label %294

282:                                              ; preds = %276
  br i1 %277, label %283, label %304

283:                                              ; preds = %282
  %284 = sub i64 %29, %22
  %285 = getelementptr i8, ptr %17, i64 %284
  br label %286

286:                                              ; preds = %283, %291
  %287 = phi ptr [ %292, %291 ], [ %17, %283 ]
  %288 = load i8, ptr %287, align 1, !tbaa !5
  %289 = zext i8 %288 to i32
  %290 = icmp eq i32 %200, %289
  br i1 %290, label %291, label %304

291:                                              ; preds = %286
  %292 = getelementptr inbounds i8, ptr %287, i64 1
  %293 = icmp eq ptr %292, %285
  br i1 %293, label %304, label %286, !llvm.loop !378

294:                                              ; preds = %279, %301
  %295 = phi ptr [ %302, %301 ], [ %17, %279 ]
  %296 = load i8, ptr %295, align 1, !tbaa !5
  %297 = zext i8 %296 to i32
  %298 = icmp eq i32 %200, %297
  %299 = icmp eq i32 %233, %297
  %300 = or i1 %298, %299
  br i1 %300, label %301, label %304

301:                                              ; preds = %294
  %302 = getelementptr inbounds i8, ptr %295, i64 1
  %303 = icmp eq ptr %302, %281
  br i1 %303, label %304, label %294, !llvm.loop !379

304:                                              ; preds = %301, %294, %286, %291, %267, %270, %241, %251, %278, %282, %239, %240, %229, %194
  %305 = phi i32 [ %230, %229 ], [ 0, %194 ], [ 0, %240 ], [ 0, %239 ], [ 0, %282 ], [ 0, %278 ], [ %243, %241 ], [ %253, %251 ], [ %259, %267 ], [ %272, %270 ], [ 0, %291 ], [ 0, %286 ], [ 0, %294 ], [ 0, %301 ]
  %306 = phi ptr [ %231, %229 ], [ %17, %194 ], [ %17, %240 ], [ %17, %239 ], [ %17, %282 ], [ %17, %278 ], [ %242, %241 ], [ %252, %251 ], [ %258, %267 ], [ %271, %270 ], [ %287, %286 ], [ %285, %291 ], [ %281, %301 ], [ %295, %294 ]
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %9) #12
  call void @llvm.lifetime.end.p0(i64 14, ptr nonnull %8) #12
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #12
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #12
  br label %987

307:                                              ; preds = %5, %5
  br i1 %16, label %310, label %308

308:                                              ; preds = %307
  %309 = icmp ult ptr %17, %28
  br i1 %309, label %329, label %991

310:                                              ; preds = %307
  %311 = icmp sgt i32 %20, 0
  %312 = icmp ult ptr %17, %13
  %313 = select i1 %311, i1 %312, i1 false
  br i1 %313, label %314, label %991

314:                                              ; preds = %310, %318
  %315 = phi ptr [ %324, %318 ], [ %17, %310 ]
  %316 = phi i32 [ %325, %318 ], [ 0, %310 ]
  %317 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef %2, ptr noundef %315, ptr noundef nonnull %28, i1 noundef zeroext true)
  br i1 %317, label %318, label %987

318:                                              ; preds = %314
  %319 = load i8, ptr %315, align 1, !tbaa !5
  %320 = zext i8 %319 to i64
  %321 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %320
  %322 = load i8, ptr %321, align 1, !tbaa !5
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds i8, ptr %315, i64 %323
  %325 = add nuw nsw i32 %316, 1
  %326 = icmp slt i32 %325, %30
  %327 = icmp ult ptr %324, %28
  %328 = select i1 %326, i1 %327, i1 false
  br i1 %328, label %314, label %998, !llvm.loop !380

329:                                              ; preds = %308, %351
  %330 = phi ptr [ %352, %351 ], [ %17, %308 ]
  %331 = load i8, ptr %2, align 2, !tbaa !76
  %332 = icmp eq i8 %331, 0
  br i1 %332, label %337, label %333

333:                                              ; preds = %329
  %334 = getelementptr inbounds i8, ptr %330, i64 1
  %335 = tail call fastcc zeroext i1 @S_reginclass(ptr noundef %0, ptr noundef nonnull %2, ptr noundef %330, ptr noundef nonnull %334, i1 noundef zeroext false)
  %336 = zext i1 %335 to i32
  br label %348

337:                                              ; preds = %329
  %338 = load i8, ptr %330, align 1, !tbaa !5
  %339 = zext i8 %338 to i32
  %340 = lshr i32 %339, 3
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %struct.regnode_charclass, ptr %2, i64 0, i32 4, i64 %341
  %343 = load i8, ptr %342, align 1, !tbaa !5
  %344 = sext i8 %343 to i32
  %345 = and i32 %339, 7
  %346 = lshr i32 %344, %345
  %347 = and i32 %346, 1
  br label %348

348:                                              ; preds = %337, %333
  %349 = phi i32 [ %336, %333 ], [ %347, %337 ]
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %991, label %351

351:                                              ; preds = %348
  %352 = getelementptr inbounds i8, ptr %330, i64 1
  %353 = icmp ult ptr %352, %28
  br i1 %353, label %329, label %991, !llvm.loop !381

354:                                              ; preds = %5
  br label %355

355:                                              ; preds = %5, %354
  %356 = phi i32 [ 0, %5 ], [ 1, %354 ]
  br i1 %16, label %362, label %357

357:                                              ; preds = %355
  %358 = icmp ult ptr %17, %28
  br i1 %358, label %359, label %991

359:                                              ; preds = %357
  %360 = sub i64 %29, %22
  %361 = getelementptr i8, ptr %17, i64 %360
  br label %366

362:                                              ; preds = %355
  %363 = icmp sgt i32 %20, 0
  %364 = icmp ult ptr %17, %13
  %365 = select i1 %363, i1 %364, i1 false
  br i1 %365, label %376, label %991

366:                                              ; preds = %359, %373
  %367 = phi ptr [ %374, %373 ], [ %17, %359 ]
  %368 = load i8, ptr %2, align 2, !tbaa !76
  %369 = load i8, ptr %367, align 1, !tbaa !5
  %370 = tail call fastcc zeroext i1 @S_isFOO_lc(i8 noundef zeroext %368, i8 noundef zeroext %369)
  %371 = zext i1 %370 to i32
  %372 = icmp eq i32 %356, %371
  br i1 %372, label %991, label %373

373:                                              ; preds = %366
  %374 = getelementptr inbounds i8, ptr %367, i64 1
  %375 = icmp eq ptr %374, %361
  br i1 %375, label %991, label %366, !llvm.loop !382

376:                                              ; preds = %362, %383
  %377 = phi ptr [ %389, %383 ], [ %17, %362 ]
  %378 = phi i32 [ %390, %383 ], [ 0, %362 ]
  %379 = load i8, ptr %2, align 2, !tbaa !76
  %380 = tail call fastcc zeroext i1 @S_isFOO_utf8_lc(i8 noundef zeroext %379, ptr noundef %377)
  %381 = zext i1 %380 to i32
  %382 = icmp eq i32 %356, %381
  br i1 %382, label %987, label %383

383:                                              ; preds = %376
  %384 = load i8, ptr %377, align 1, !tbaa !5
  %385 = zext i8 %384 to i64
  %386 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %385
  %387 = load i8, ptr %386, align 1, !tbaa !5
  %388 = zext i8 %387 to i64
  %389 = getelementptr inbounds i8, ptr %377, i64 %388
  %390 = add nuw nsw i32 %378, 1
  %391 = icmp slt i32 %390, %30
  %392 = icmp ult ptr %389, %28
  %393 = select i1 %391, i1 %392, i1 false
  br i1 %393, label %376, label %998, !llvm.loop !383

394:                                              ; preds = %5
  br i1 %16, label %496, label %402

395:                                              ; preds = %5
  br i1 %16, label %396, label %402

396:                                              ; preds = %395
  %397 = sext i32 %20 to i64
  %398 = icmp sgt i64 %23, %397
  %399 = getelementptr inbounds i8, ptr %17, i64 %397
  %400 = select i1 %398, ptr %399, ptr %13
  %401 = ptrtoint ptr %400 to i64
  br label %402

402:                                              ; preds = %396, %394, %395
  %403 = phi i64 [ %401, %396 ], [ %29, %394 ], [ %29, %395 ]
  %404 = phi ptr [ %400, %396 ], [ %28, %394 ], [ %28, %395 ]
  %405 = icmp ult ptr %17, %404
  br i1 %405, label %406, label %991

406:                                              ; preds = %402
  %407 = load i8, ptr %2, align 2, !tbaa !76
  %408 = zext i8 %407 to i32
  %409 = shl nuw i32 1, %408
  %410 = or i32 %409, 16384
  %411 = sub i64 %403, %22
  %412 = getelementptr i8, ptr %17, i64 %411
  br label %413

413:                                              ; preds = %406, %421
  %414 = phi ptr [ %17, %406 ], [ %422, %421 ]
  %415 = load i8, ptr %414, align 1, !tbaa !5
  %416 = zext i8 %415 to i64
  %417 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %416
  %418 = load i32, ptr %417, align 4, !tbaa !73
  %419 = and i32 %410, %418
  %420 = icmp eq i32 %419, %410
  br i1 %420, label %421, label %991

421:                                              ; preds = %413
  %422 = getelementptr inbounds i8, ptr %414, i64 1
  %423 = icmp eq ptr %422, %412
  br i1 %423, label %991, label %413, !llvm.loop !384

424:                                              ; preds = %5
  br i1 %16, label %496, label %430

425:                                              ; preds = %5
  br i1 %16, label %426, label %430

426:                                              ; preds = %425
  %427 = icmp sgt i32 %20, 0
  %428 = icmp ult ptr %17, %13
  %429 = select i1 %427, i1 %428, i1 false
  br i1 %429, label %450, label %991

430:                                              ; preds = %425, %424
  %431 = icmp ult ptr %17, %28
  br i1 %431, label %432, label %991

432:                                              ; preds = %430
  %433 = load i8, ptr %2, align 2, !tbaa !76
  %434 = zext i8 %433 to i32
  %435 = shl nuw i32 1, %434
  %436 = or i32 %435, 16384
  %437 = sub i64 %29, %22
  %438 = getelementptr i8, ptr %17, i64 %437
  br label %439

439:                                              ; preds = %432, %447
  %440 = phi ptr [ %17, %432 ], [ %448, %447 ]
  %441 = load i8, ptr %440, align 1, !tbaa !5
  %442 = zext i8 %441 to i64
  %443 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %442
  %444 = load i32, ptr %443, align 4, !tbaa !73
  %445 = and i32 %436, %444
  %446 = icmp eq i32 %445, %436
  br i1 %446, label %991, label %447

447:                                              ; preds = %439
  %448 = getelementptr inbounds i8, ptr %440, i64 1
  %449 = icmp eq ptr %448, %438
  br i1 %449, label %991, label %439, !llvm.loop !385

450:                                              ; preds = %426, %465
  %451 = phi ptr [ %469, %465 ], [ %17, %426 ]
  %452 = phi i32 [ %470, %465 ], [ 0, %426 ]
  %453 = load i8, ptr %451, align 1, !tbaa !5
  %454 = icmp sgt i8 %453, -1
  %455 = zext i8 %453 to i64
  br i1 %454, label %456, label %465

456:                                              ; preds = %450
  %457 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %455
  %458 = load i32, ptr %457, align 4, !tbaa !73
  %459 = load i8, ptr %2, align 2, !tbaa !76
  %460 = zext i8 %459 to i32
  %461 = shl nuw i32 1, %460
  %462 = or i32 %461, 16384
  %463 = and i32 %462, %458
  %464 = icmp eq i32 %463, %462
  br i1 %464, label %987, label %465

465:                                              ; preds = %450, %456
  %466 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %455
  %467 = load i8, ptr %466, align 1, !tbaa !5
  %468 = zext i8 %467 to i64
  %469 = getelementptr inbounds i8, ptr %451, i64 %468
  %470 = add nuw nsw i32 %452, 1
  %471 = icmp slt i32 %470, %30
  %472 = icmp ult ptr %469, %28
  %473 = select i1 %471, i1 %472, i1 false
  br i1 %473, label %450, label %998, !llvm.loop !386

474:                                              ; preds = %5
  br label %475

475:                                              ; preds = %5, %474
  %476 = phi i32 [ 0, %5 ], [ 1, %474 ]
  br i1 %16, label %496, label %477

477:                                              ; preds = %475
  %478 = icmp ult ptr %17, %28
  br i1 %478, label %479, label %991

479:                                              ; preds = %477
  %480 = load i8, ptr %2, align 2, !tbaa !76
  %481 = zext i8 %480 to i32
  %482 = sub i64 %29, %22
  %483 = getelementptr i8, ptr %17, i64 %482
  br label %484

484:                                              ; preds = %479, %493
  %485 = phi ptr [ %17, %479 ], [ %494, %493 ]
  %486 = load i8, ptr %485, align 1, !tbaa !5
  %487 = zext i8 %486 to i64
  %488 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %487
  %489 = load i32, ptr %488, align 4, !tbaa !73
  %490 = lshr i32 %489, %481
  %491 = and i32 %490, 1
  %492 = icmp eq i32 %476, %491
  br i1 %492, label %991, label %493

493:                                              ; preds = %484
  %494 = getelementptr inbounds i8, ptr %485, i64 1
  %495 = icmp eq ptr %494, %483
  br i1 %495, label %991, label %484, !llvm.loop !387

496:                                              ; preds = %424, %475, %394
  %497 = phi i32 [ %476, %475 ], [ 0, %394 ], [ 1, %424 ]
  %498 = load i8, ptr %2, align 2, !tbaa !76
  %499 = zext i8 %498 to i32
  %500 = icmp ult i8 %498, 10
  br i1 %500, label %501, label %539

501:                                              ; preds = %496
  %502 = icmp sgt i32 %20, 0
  %503 = icmp ult ptr %17, %13
  %504 = select i1 %502, i1 %503, i1 false
  br i1 %504, label %505, label %991

505:                                              ; preds = %501, %532
  %506 = phi ptr [ %534, %532 ], [ %17, %501 ]
  %507 = phi i32 [ %535, %532 ], [ 0, %501 ]
  %508 = load i8, ptr %506, align 1, !tbaa !5
  %509 = icmp sgt i8 %508, -1
  br i1 %509, label %510, label %517

510:                                              ; preds = %505
  %511 = zext i8 %508 to i64
  %512 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %511
  %513 = load i32, ptr %512, align 4, !tbaa !73
  %514 = lshr i32 %513, %499
  %515 = and i32 %514, 1
  %516 = icmp eq i32 %497, %515
  br i1 %516, label %987, label %532

517:                                              ; preds = %505
  %518 = and i8 %508, -2
  %519 = icmp eq i8 %518, -62
  br i1 %519, label %520, label %834

520:                                              ; preds = %517
  %521 = shl i8 %508, 6
  %522 = getelementptr inbounds i8, ptr %506, i64 1
  %523 = load i8, ptr %522, align 1, !tbaa !5
  %524 = and i8 %523, 63
  %525 = or i8 %524, %521
  %526 = zext i8 %525 to i64
  %527 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %526
  %528 = load i32, ptr %527, align 4, !tbaa !73
  %529 = lshr i32 %528, %499
  %530 = and i32 %529, 1
  %531 = icmp eq i32 %497, %530
  br i1 %531, label %987, label %532

532:                                              ; preds = %520, %510
  %533 = phi i64 [ 1, %510 ], [ 2, %520 ]
  %534 = getelementptr inbounds i8, ptr %506, i64 %533
  %535 = add nuw nsw i32 %507, 1
  %536 = icmp slt i32 %535, %30
  %537 = icmp ult ptr %534, %28
  %538 = select i1 %536, i1 %537, i1 false
  br i1 %538, label %505, label %998, !llvm.loop !388

539:                                              ; preds = %496
  switch i8 %498, label %829 [
    i8 10, label %556
    i8 11, label %552
    i8 12, label %548
    i8 15, label %544
    i8 13, label %540
  ]

540:                                              ; preds = %539
  %541 = icmp sgt i32 %20, 0
  %542 = icmp ult ptr %17, %13
  %543 = select i1 %541, i1 %542, i1 false
  br i1 %543, label %794, label %991

544:                                              ; preds = %539
  %545 = icmp sgt i32 %20, 0
  %546 = icmp ult ptr %17, %13
  %547 = select i1 %545, i1 %546, i1 false
  br i1 %547, label %744, label %991

548:                                              ; preds = %539
  %549 = icmp sgt i32 %20, 0
  %550 = icmp ult ptr %17, %13
  %551 = select i1 %549, i1 %550, i1 false
  br i1 %551, label %701, label %991

552:                                              ; preds = %539
  %553 = icmp sgt i32 %20, 0
  %554 = icmp ult ptr %17, %13
  %555 = select i1 %553, i1 %554, i1 false
  br i1 %555, label %632, label %991

556:                                              ; preds = %539
  %557 = icmp sgt i32 %20, 0
  %558 = icmp ult ptr %17, %13
  %559 = select i1 %557, i1 %558, i1 false
  br i1 %559, label %560, label %991

560:                                              ; preds = %556, %622
  %561 = phi ptr [ %627, %622 ], [ %17, %556 ]
  %562 = phi i32 [ %628, %622 ], [ 0, %556 ]
  %563 = load i8, ptr %561, align 1, !tbaa !5
  %564 = icmp sgt i8 %563, -1
  br i1 %564, label %565, label %571

565:                                              ; preds = %560
  %566 = zext i8 %563 to i64
  %567 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %566
  %568 = load i32, ptr %567, align 4, !tbaa !73
  %569 = and i32 %568, 1024
  %570 = icmp ne i32 %569, 0
  br label %618

571:                                              ; preds = %560
  %572 = and i8 %563, -2
  %573 = icmp eq i8 %572, -62
  br i1 %573, label %574, label %585

574:                                              ; preds = %571
  %575 = shl i8 %563, 6
  %576 = getelementptr inbounds i8, ptr %561, i64 1
  %577 = load i8, ptr %576, align 1, !tbaa !5
  %578 = and i8 %577, 63
  %579 = or i8 %578, %575
  %580 = zext i8 %579 to i64
  %581 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %580
  %582 = load i32, ptr %581, align 4, !tbaa !73
  %583 = and i32 %582, 1024
  %584 = icmp ne i32 %583, 0
  br label %618

585:                                              ; preds = %571
  switch i8 %563, label %618 [
    i8 -31, label %586
    i8 -30, label %594
    i8 -29, label %610
  ]

586:                                              ; preds = %585
  %587 = getelementptr inbounds i8, ptr %561, i64 1
  %588 = load i8, ptr %587, align 1, !tbaa !5
  %589 = icmp eq i8 %588, -102
  br i1 %589, label %590, label %618

590:                                              ; preds = %586
  %591 = getelementptr inbounds i8, ptr %561, i64 2
  %592 = load i8, ptr %591, align 1, !tbaa !5
  %593 = icmp eq i8 %592, -128
  br label %618

594:                                              ; preds = %585
  %595 = getelementptr inbounds i8, ptr %561, i64 1
  %596 = load i8, ptr %595, align 1, !tbaa !5
  switch i8 %596, label %618 [
    i8 -128, label %597
    i8 -127, label %606
  ]

597:                                              ; preds = %594
  %598 = getelementptr inbounds i8, ptr %561, i64 2
  %599 = load i8, ptr %598, align 1, !tbaa !5
  %600 = icmp ult i8 %599, -117
  %601 = and i8 %599, -2
  %602 = icmp eq i8 %601, -88
  %603 = or i1 %600, %602
  %604 = icmp eq i8 %599, -81
  %605 = or i1 %604, %603
  br label %618

606:                                              ; preds = %594
  %607 = getelementptr inbounds i8, ptr %561, i64 2
  %608 = load i8, ptr %607, align 1, !tbaa !5
  %609 = icmp eq i8 %608, -97
  br label %618

610:                                              ; preds = %585
  %611 = getelementptr inbounds i8, ptr %561, i64 1
  %612 = load i8, ptr %611, align 1, !tbaa !5
  %613 = icmp eq i8 %612, -128
  br i1 %613, label %614, label %618

614:                                              ; preds = %610
  %615 = getelementptr inbounds i8, ptr %561, i64 2
  %616 = load i8, ptr %615, align 1, !tbaa !5
  %617 = icmp eq i8 %616, -128
  br label %618

618:                                              ; preds = %597, %610, %614, %585, %606, %594, %586, %590, %574, %565
  %619 = phi i1 [ %570, %565 ], [ %584, %574 ], [ false, %586 ], [ %593, %590 ], [ %609, %606 ], [ false, %594 ], [ false, %610 ], [ %617, %614 ], [ false, %585 ], [ %605, %597 ]
  %620 = zext i1 %619 to i32
  %621 = icmp eq i32 %497, %620
  br i1 %621, label %987, label %622

622:                                              ; preds = %618
  %623 = zext i8 %563 to i64
  %624 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %623
  %625 = load i8, ptr %624, align 1, !tbaa !5
  %626 = zext i8 %625 to i64
  %627 = getelementptr inbounds i8, ptr %561, i64 %626
  %628 = add nuw nsw i32 %562, 1
  %629 = icmp slt i32 %628, %30
  %630 = icmp ult ptr %627, %28
  %631 = select i1 %629, i1 %630, i1 false
  br i1 %631, label %560, label %998, !llvm.loop !389

632:                                              ; preds = %552, %691
  %633 = phi ptr [ %696, %691 ], [ %17, %552 ]
  %634 = phi i32 [ %697, %691 ], [ 0, %552 ]
  %635 = load i8, ptr %633, align 1, !tbaa !5
  %636 = icmp sgt i8 %635, -1
  br i1 %636, label %637, label %643

637:                                              ; preds = %632
  %638 = zext i8 %635 to i64
  %639 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %638
  %640 = load i32, ptr %639, align 4, !tbaa !73
  %641 = and i32 %640, 2048
  %642 = icmp ne i32 %641, 0
  br label %687

643:                                              ; preds = %632
  %644 = and i8 %635, -2
  %645 = icmp eq i8 %644, -62
  br i1 %645, label %646, label %657

646:                                              ; preds = %643
  %647 = shl i8 %635, 6
  %648 = getelementptr inbounds i8, ptr %633, i64 1
  %649 = load i8, ptr %648, align 1, !tbaa !5
  %650 = and i8 %649, 63
  %651 = or i8 %650, %647
  %652 = zext i8 %651 to i64
  %653 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %652
  %654 = load i32, ptr %653, align 4, !tbaa !73
  %655 = and i32 %654, 2048
  %656 = icmp ne i32 %655, 0
  br label %687

657:                                              ; preds = %643
  switch i8 %635, label %687 [
    i8 -31, label %658
    i8 -30, label %666
    i8 -29, label %679
  ]

658:                                              ; preds = %657
  %659 = getelementptr inbounds i8, ptr %633, i64 1
  %660 = load i8, ptr %659, align 1, !tbaa !5
  %661 = icmp eq i8 %660, -102
  br i1 %661, label %662, label %687

662:                                              ; preds = %658
  %663 = getelementptr inbounds i8, ptr %633, i64 2
  %664 = load i8, ptr %663, align 1, !tbaa !5
  %665 = icmp eq i8 %664, -128
  br label %687

666:                                              ; preds = %657
  %667 = getelementptr inbounds i8, ptr %633, i64 1
  %668 = load i8, ptr %667, align 1, !tbaa !5
  switch i8 %668, label %687 [
    i8 -128, label %669
    i8 -127, label %675
  ]

669:                                              ; preds = %666
  %670 = getelementptr inbounds i8, ptr %633, i64 2
  %671 = load i8, ptr %670, align 1, !tbaa !5
  %672 = icmp ult i8 %671, -117
  %673 = icmp eq i8 %671, -81
  %674 = or i1 %672, %673
  br label %687

675:                                              ; preds = %666
  %676 = getelementptr inbounds i8, ptr %633, i64 2
  %677 = load i8, ptr %676, align 1, !tbaa !5
  %678 = icmp eq i8 %677, -97
  br label %687

679:                                              ; preds = %657
  %680 = getelementptr inbounds i8, ptr %633, i64 1
  %681 = load i8, ptr %680, align 1, !tbaa !5
  %682 = icmp eq i8 %681, -128
  br i1 %682, label %683, label %687

683:                                              ; preds = %679
  %684 = getelementptr inbounds i8, ptr %633, i64 2
  %685 = load i8, ptr %684, align 1, !tbaa !5
  %686 = icmp eq i8 %685, -128
  br label %687

687:                                              ; preds = %679, %683, %657, %675, %666, %658, %662, %646, %669, %637
  %688 = phi i1 [ %642, %637 ], [ %674, %669 ], [ %656, %646 ], [ false, %658 ], [ %665, %662 ], [ %678, %675 ], [ false, %666 ], [ false, %679 ], [ %686, %683 ], [ false, %657 ]
  %689 = zext i1 %688 to i32
  %690 = icmp eq i32 %497, %689
  br i1 %690, label %987, label %691

691:                                              ; preds = %687
  %692 = zext i8 %635 to i64
  %693 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %692
  %694 = load i8, ptr %693, align 1, !tbaa !5
  %695 = zext i8 %694 to i64
  %696 = getelementptr inbounds i8, ptr %633, i64 %695
  %697 = add nuw nsw i32 %634, 1
  %698 = icmp slt i32 %697, %30
  %699 = icmp ult ptr %696, %28
  %700 = select i1 %698, i1 %699, i1 false
  br i1 %700, label %632, label %998, !llvm.loop !390

701:                                              ; preds = %548, %734
  %702 = phi ptr [ %739, %734 ], [ %17, %548 ]
  %703 = phi i32 [ %740, %734 ], [ 0, %548 ]
  %704 = load i8, ptr %702, align 1, !tbaa !5
  %705 = icmp sgt i8 %704, -1
  br i1 %705, label %706, label %712

706:                                              ; preds = %701
  %707 = zext i8 %704 to i64
  %708 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %707
  %709 = load i32, ptr %708, align 4, !tbaa !73
  %710 = and i32 %709, 4096
  %711 = icmp ne i32 %710, 0
  br label %730

712:                                              ; preds = %701
  %713 = icmp eq i8 %704, -17
  br i1 %713, label %714, label %730

714:                                              ; preds = %712
  %715 = getelementptr inbounds i8, ptr %702, i64 1
  %716 = load i8, ptr %715, align 1, !tbaa !5
  switch i8 %716, label %730 [
    i8 -68, label %717
    i8 -67, label %725
  ]

717:                                              ; preds = %714
  %718 = getelementptr inbounds i8, ptr %702, i64 2
  %719 = load i8, ptr %718, align 1, !tbaa !5
  %720 = add i8 %719, 112
  %721 = icmp ult i8 %720, 10
  br i1 %721, label %730, label %722

722:                                              ; preds = %717
  %723 = add i8 %719, 95
  %724 = icmp ult i8 %723, 6
  br label %730

725:                                              ; preds = %714
  %726 = getelementptr inbounds i8, ptr %702, i64 2
  %727 = load i8, ptr %726, align 1, !tbaa !5
  %728 = add i8 %727, 127
  %729 = icmp ult i8 %728, 6
  br label %730

730:                                              ; preds = %725, %722, %714, %717, %712, %706
  %731 = phi i1 [ %711, %706 ], [ false, %712 ], [ true, %717 ], [ %724, %722 ], [ false, %714 ], [ %729, %725 ]
  %732 = zext i1 %731 to i32
  %733 = icmp eq i32 %497, %732
  br i1 %733, label %987, label %734

734:                                              ; preds = %730
  %735 = zext i8 %704 to i64
  %736 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %735
  %737 = load i8, ptr %736, align 1, !tbaa !5
  %738 = zext i8 %737 to i64
  %739 = getelementptr inbounds i8, ptr %702, i64 %738
  %740 = add nuw nsw i32 %703, 1
  %741 = icmp slt i32 %740, %30
  %742 = icmp ult ptr %739, %28
  %743 = select i1 %741, i1 %742, i1 false
  br i1 %743, label %701, label %998, !llvm.loop !391

744:                                              ; preds = %544, %784
  %745 = phi ptr [ %789, %784 ], [ %17, %544 ]
  %746 = phi i32 [ %790, %784 ], [ 0, %544 ]
  %747 = load i8, ptr %745, align 1, !tbaa !5
  %748 = icmp sgt i8 %747, -1
  br i1 %748, label %749, label %755

749:                                              ; preds = %744
  %750 = zext i8 %747 to i64
  %751 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %750
  %752 = load i32, ptr %751, align 4, !tbaa !73
  %753 = and i32 %752, 32768
  %754 = icmp ne i32 %753, 0
  br label %780

755:                                              ; preds = %744
  %756 = and i8 %747, -2
  %757 = icmp eq i8 %756, -62
  br i1 %757, label %758, label %769

758:                                              ; preds = %755
  %759 = shl i8 %747, 6
  %760 = getelementptr inbounds i8, ptr %745, i64 1
  %761 = load i8, ptr %760, align 1, !tbaa !5
  %762 = and i8 %761, 63
  %763 = or i8 %762, %759
  %764 = zext i8 %763 to i64
  %765 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !73
  %767 = and i32 %766, 32768
  %768 = icmp ne i32 %767, 0
  br label %780

769:                                              ; preds = %755
  %770 = icmp eq i8 %747, -30
  br i1 %770, label %771, label %780

771:                                              ; preds = %769
  %772 = getelementptr inbounds i8, ptr %745, i64 1
  %773 = load i8, ptr %772, align 1, !tbaa !5
  %774 = icmp eq i8 %773, -128
  br i1 %774, label %775, label %780

775:                                              ; preds = %771
  %776 = getelementptr inbounds i8, ptr %745, i64 2
  %777 = load i8, ptr %776, align 1, !tbaa !5
  %778 = and i8 %777, -2
  %779 = icmp eq i8 %778, -88
  br label %780

780:                                              ; preds = %769, %771, %775, %758, %749
  %781 = phi i1 [ %754, %749 ], [ %768, %758 ], [ false, %771 ], [ false, %769 ], [ %779, %775 ]
  %782 = zext i1 %781 to i32
  %783 = icmp eq i32 %497, %782
  br i1 %783, label %987, label %784

784:                                              ; preds = %780
  %785 = zext i8 %747 to i64
  %786 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %785
  %787 = load i8, ptr %786, align 1, !tbaa !5
  %788 = zext i8 %787 to i64
  %789 = getelementptr inbounds i8, ptr %745, i64 %788
  %790 = add nuw nsw i32 %746, 1
  %791 = icmp slt i32 %790, %30
  %792 = icmp ult ptr %789, %28
  %793 = select i1 %791, i1 %792, i1 false
  br i1 %793, label %744, label %998, !llvm.loop !392

794:                                              ; preds = %540, %819
  %795 = phi ptr [ %824, %819 ], [ %17, %540 ]
  %796 = phi i32 [ %825, %819 ], [ 0, %540 ]
  %797 = load i8, ptr %795, align 1, !tbaa !5
  %798 = icmp sgt i8 %797, -1
  br i1 %798, label %808, label %799

799:                                              ; preds = %794
  %800 = and i8 %797, -2
  %801 = icmp eq i8 %800, -62
  br i1 %801, label %802, label %815

802:                                              ; preds = %799
  %803 = shl i8 %797, 6
  %804 = getelementptr inbounds i8, ptr %795, i64 1
  %805 = load i8, ptr %804, align 1, !tbaa !5
  %806 = and i8 %805, 63
  %807 = or i8 %806, %803
  br label %808

808:                                              ; preds = %794, %802
  %809 = phi i8 [ %807, %802 ], [ %797, %794 ]
  %810 = zext i8 %809 to i64
  %811 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %810
  %812 = load i32, ptr %811, align 4, !tbaa !73
  %813 = and i32 %812, 8192
  %814 = icmp ne i32 %813, 0
  br label %815

815:                                              ; preds = %808, %799
  %816 = phi i1 [ false, %799 ], [ %814, %808 ]
  %817 = zext i1 %816 to i32
  %818 = icmp eq i32 %497, %817
  br i1 %818, label %987, label %819

819:                                              ; preds = %815
  %820 = zext i8 %797 to i64
  %821 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %820
  %822 = load i8, ptr %821, align 1, !tbaa !5
  %823 = zext i8 %822 to i64
  %824 = getelementptr inbounds i8, ptr %795, i64 %823
  %825 = add nuw nsw i32 %796, 1
  %826 = icmp slt i32 %825, %30
  %827 = icmp ult ptr %824, %28
  %828 = select i1 %826, i1 %827, i1 false
  br i1 %828, label %794, label %998, !llvm.loop !393

829:                                              ; preds = %539
  %830 = zext i8 %32 to i32
  %831 = zext i8 %32 to i64
  %832 = getelementptr inbounds [0 x ptr], ptr @PL_reg_name, i64 0, i64 %831
  %833 = load ptr, ptr %832, align 8, !tbaa !35
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.23, i32 noundef %830, ptr noundef %833, i32 noundef %499) #12
  br label %991

834:                                              ; preds = %517
  %835 = zext i8 %498 to i64
  %836 = getelementptr inbounds [10 x ptr], ptr @PL_utf8_swash_ptrs, i64 0, i64 %835
  %837 = load ptr, ptr %836, align 8, !tbaa !35
  %838 = icmp eq ptr %837, null
  br i1 %838, label %839, label %843

839:                                              ; preds = %834
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11) #12
  store i8 4, ptr %11, align 1, !tbaa !5
  %840 = getelementptr inbounds [16 x ptr], ptr @PL_XPosix_ptrs, i64 0, i64 %835
  %841 = load ptr, ptr %840, align 8, !tbaa !35
  %842 = call ptr @Perl__core_swash_init(ptr noundef nonnull @.str.3, ptr noundef nonnull @.str.4, ptr noundef nonnull @PL_sv_undef, i32 noundef 1, i32 noundef 0, ptr noundef %841, ptr noundef nonnull %11) #12
  store ptr %842, ptr %836, align 8, !tbaa !35
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11) #12
  br label %843

843:                                              ; preds = %839, %834
  %844 = icmp slt i32 %507, %30
  %845 = icmp ult ptr %506, %28
  %846 = select i1 %844, i1 %845, i1 false
  br i1 %846, label %847, label %987

847:                                              ; preds = %843
  %848 = shl nuw i32 1, %499
  br label %849

849:                                              ; preds = %847, %884
  %850 = phi ptr [ %506, %847 ], [ %890, %884 ]
  %851 = phi i32 [ %507, %847 ], [ %891, %884 ]
  %852 = load i8, ptr %850, align 1, !tbaa !5
  %853 = icmp sgt i8 %852, -1
  br i1 %853, label %854, label %861

854:                                              ; preds = %849
  %855 = zext i8 %852 to i64
  %856 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %855
  %857 = load i32, ptr %856, align 4, !tbaa !73
  %858 = lshr i32 %857, %499
  %859 = and i32 %858, 1
  %860 = zext i32 %859 to i64
  br label %879

861:                                              ; preds = %849
  %862 = and i8 %852, -2
  %863 = icmp eq i8 %862, -62
  br i1 %863, label %864, label %876

864:                                              ; preds = %861
  %865 = shl i8 %852, 6
  %866 = getelementptr inbounds i8, ptr %850, i64 1
  %867 = load i8, ptr %866, align 1, !tbaa !5
  %868 = and i8 %867, 63
  %869 = or i8 %868, %865
  %870 = zext i8 %869 to i64
  %871 = getelementptr inbounds [0 x i32], ptr @PL_charclass, i64 0, i64 %870
  %872 = load i32, ptr %871, align 4, !tbaa !73
  %873 = and i32 %872, %848
  %874 = icmp ne i32 %873, 0
  %875 = zext i1 %874 to i64
  br label %879

876:                                              ; preds = %861
  %877 = load ptr, ptr %836, align 8, !tbaa !35
  %878 = call i64 @Perl_swash_fetch(ptr noundef %877, ptr noundef nonnull %850, i1 noundef zeroext true) #12
  br label %879

879:                                              ; preds = %864, %876, %854
  %880 = phi i64 [ %860, %854 ], [ %875, %864 ], [ %878, %876 ]
  %881 = icmp ne i64 %880, 0
  %882 = zext i1 %881 to i32
  %883 = icmp eq i32 %497, %882
  br i1 %883, label %987, label %884

884:                                              ; preds = %879
  %885 = load i8, ptr %850, align 1, !tbaa !5
  %886 = zext i8 %885 to i64
  %887 = getelementptr inbounds [0 x i8], ptr @PL_utf8skip, i64 0, i64 %886
  %888 = load i8, ptr %887, align 1, !tbaa !5
  %889 = zext i8 %888 to i64
  %890 = getelementptr inbounds i8, ptr %850, i64 %889
  %891 = add nuw nsw i32 %851, 1
  %892 = icmp slt i32 %891, %30
  %893 = icmp ult ptr %890, %28
  %894 = select i1 %892, i1 %893, i1 false
  br i1 %894, label %849, label %998, !llvm.loop !394

895:                                              ; preds = %5
  br i1 %16, label %898, label %896

896:                                              ; preds = %895
  %897 = icmp ult ptr %17, %13
  br i1 %897, label %957, label %991

898:                                              ; preds = %895
  %899 = icmp sgt i32 %20, 0
  %900 = icmp ult ptr %17, %13
  %901 = select i1 %899, i1 %900, i1 false
  br i1 %901, label %902, label %991

902:                                              ; preds = %898, %950
  %903 = phi ptr [ %952, %950 ], [ %17, %898 ]
  %904 = phi i32 [ %953, %950 ], [ 0, %898 ]
  %905 = ptrtoint ptr %903 to i64
  %906 = sub i64 %29, %905
  %907 = icmp sgt i64 %906, 2
  br i1 %907, label %908, label %927

908:                                              ; preds = %902
  %909 = load i8, ptr %903, align 1, !tbaa !5
  %910 = add i8 %909, -10
  %911 = icmp ult i8 %910, 3
  br i1 %911, label %950, label %912

912:                                              ; preds = %908
  switch i8 %909, label %987 [
    i8 13, label %945
    i8 -62, label %913
    i8 -30, label %917
  ]

913:                                              ; preds = %912
  %914 = getelementptr inbounds i8, ptr %903, i64 1
  %915 = load i8, ptr %914, align 1, !tbaa !5
  %916 = icmp eq i8 %915, -123
  br i1 %916, label %950, label %987

917:                                              ; preds = %912
  %918 = getelementptr inbounds i8, ptr %903, i64 1
  %919 = load i8, ptr %918, align 1, !tbaa !5
  %920 = icmp eq i8 %919, -128
  br i1 %920, label %921, label %987

921:                                              ; preds = %917
  %922 = getelementptr inbounds i8, ptr %903, i64 2
  %923 = load i8, ptr %922, align 1, !tbaa !5
  %924 = freeze i8 %923
  %925 = and i8 %924, -2
  %926 = icmp eq i8 %925, -88
  br i1 %926, label %950, label %987

927:                                              ; preds = %902
  %928 = icmp eq i64 %906, 2
  br i1 %928, label %929, label %939

929:                                              ; preds = %927
  %930 = load i8, ptr %903, align 1, !tbaa !5
  %931 = add i8 %930, -10
  %932 = icmp ult i8 %931, 3
  br i1 %932, label %950, label %933

933:                                              ; preds = %929
  switch i8 %930, label %987 [
    i8 13, label %945
    i8 -62, label %934
  ]

934:                                              ; preds = %933
  %935 = getelementptr inbounds i8, ptr %903, i64 1
  %936 = load i8, ptr %935, align 1, !tbaa !5
  %937 = freeze i8 %936
  %938 = icmp eq i8 %937, -123
  br i1 %938, label %950, label %987

939:                                              ; preds = %927
  %940 = icmp sgt i64 %906, 0
  br i1 %940, label %941, label %987

941:                                              ; preds = %939
  %942 = load i8, ptr %903, align 1, !tbaa !5
  %943 = add i8 %942, -14
  %944 = icmp ult i8 %943, -4
  br i1 %944, label %987, label %950

945:                                              ; preds = %933, %912
  %946 = getelementptr inbounds i8, ptr %903, i64 1
  %947 = load i8, ptr %946, align 1, !tbaa !5
  %948 = icmp eq i8 %947, 10
  %949 = select i1 %948, i64 2, i64 1
  br label %950

950:                                              ; preds = %945, %913, %934, %921, %929, %908, %941
  %951 = phi i64 [ 1, %941 ], [ 1, %929 ], [ 1, %908 ], [ 3, %921 ], [ 2, %934 ], [ 2, %913 ], [ %949, %945 ]
  %952 = getelementptr inbounds i8, ptr %903, i64 %951
  %953 = add nuw nsw i32 %904, 1
  %954 = icmp slt i32 %953, %30
  %955 = icmp ult ptr %952, %28
  %956 = select i1 %954, i1 %955, i1 false
  br i1 %956, label %902, label %998, !llvm.loop !395

957:                                              ; preds = %896, %977
  %958 = phi ptr [ %979, %977 ], [ %17, %896 ]
  %959 = phi i32 [ %980, %977 ], [ 0, %896 ]
  %960 = ptrtoint ptr %958 to i64
  %961 = sub i64 %21, %960
  %962 = icmp sgt i64 %961, 1
  br i1 %962, label %963, label %973

963:                                              ; preds = %957
  %964 = load i8, ptr %958, align 1, !tbaa !5
  %965 = add i8 %964, -10
  %966 = icmp ult i8 %965, 3
  br i1 %966, label %977, label %967

967:                                              ; preds = %963
  switch i8 %964, label %987 [
    i8 -123, label %977
    i8 13, label %968
  ]

968:                                              ; preds = %967
  %969 = getelementptr inbounds i8, ptr %958, i64 1
  %970 = load i8, ptr %969, align 1, !tbaa !5
  %971 = icmp eq i8 %970, 10
  %972 = select i1 %971, i64 2, i64 1
  br label %977

973:                                              ; preds = %957
  %974 = icmp eq i64 %961, 1
  br i1 %974, label %975, label %987

975:                                              ; preds = %973
  %976 = load i8, ptr %958, align 1, !tbaa !5
  switch i8 %976, label %987 [
    i8 -123, label %977
    i8 13, label %977
    i8 12, label %977
    i8 11, label %977
    i8 10, label %977
  ]

977:                                              ; preds = %975, %975, %975, %975, %975, %963, %968, %967
  %978 = phi i64 [ 1, %975 ], [ 1, %963 ], [ %972, %968 ], [ 1, %967 ], [ 1, %975 ], [ 1, %975 ], [ 1, %975 ], [ 1, %975 ]
  %979 = getelementptr inbounds i8, ptr %958, i64 %978
  %980 = add nuw nsw i32 %959, 1
  %981 = icmp ult ptr %979, %13
  br i1 %981, label %957, label %998, !llvm.loop !396

982:                                              ; preds = %5
  %983 = zext i8 %32 to i32
  %984 = zext i8 %32 to i64
  %985 = getelementptr inbounds [0 x ptr], ptr @PL_reg_name, i64 0, i64 %984
  %986 = load ptr, ptr %985, align 8, !tbaa !35
  tail call void (ptr, ...) @Perl_croak(ptr noundef nonnull @.str.24, i32 noundef %983, ptr noundef %986) #12
  br label %991

987:                                              ; preds = %973, %967, %975, %941, %913, %939, %921, %934, %917, %912, %933, %456, %815, %780, %730, %687, %618, %520, %510, %879, %376, %314, %124, %133, %176, %171, %182, %179, %43, %843, %304
  %988 = phi i32 [ %305, %304 ], [ %507, %843 ], [ %45, %43 ], [ %173, %176 ], [ %173, %171 ], [ %30, %182 ], [ %173, %179 ], [ %126, %133 ], [ %126, %124 ], [ %316, %314 ], [ %378, %376 ], [ %851, %879 ], [ %507, %510 ], [ %507, %520 ], [ %562, %618 ], [ %634, %687 ], [ %703, %730 ], [ %746, %780 ], [ %796, %815 ], [ %452, %456 ], [ %904, %933 ], [ %904, %912 ], [ %904, %917 ], [ %904, %934 ], [ %904, %921 ], [ %904, %939 ], [ %904, %913 ], [ %904, %941 ], [ %959, %975 ], [ %959, %967 ], [ %959, %973 ]
  %989 = phi ptr [ %306, %304 ], [ %506, %843 ], [ %44, %43 ], [ %172, %176 ], [ %172, %171 ], [ %183, %182 ], [ %172, %179 ], [ %125, %133 ], [ %125, %124 ], [ %315, %314 ], [ %377, %376 ], [ %850, %879 ], [ %506, %510 ], [ %506, %520 ], [ %561, %618 ], [ %633, %687 ], [ %702, %730 ], [ %745, %780 ], [ %795, %815 ], [ %451, %456 ], [ %903, %933 ], [ %903, %912 ], [ %903, %917 ], [ %903, %934 ], [ %903, %921 ], [ %903, %939 ], [ %903, %913 ], [ %903, %941 ], [ %958, %975 ], [ %958, %967 ], [ %958, %973 ]
  %990 = icmp eq i32 %988, 0
  br i1 %990, label %991, label %998

991:                                              ; preds = %484, %493, %439, %447, %413, %421, %366, %373, %348, %351, %157, %162, %110, %114, %58, %62, %896, %898, %426, %540, %544, %548, %552, %556, %501, %362, %310, %118, %165, %66, %39, %477, %430, %402, %357, %308, %144, %98, %34, %84, %83, %65, %142, %188, %829, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %5, %982, %987
  %992 = phi ptr [ %989, %987 ], [ %88, %84 ], [ %28, %83 ], [ %28, %65 ], [ %17, %142 ], [ %17, %188 ], [ %17, %829 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %5 ], [ %17, %982 ], [ %17, %34 ], [ %17, %98 ], [ %17, %144 ], [ %17, %308 ], [ %17, %357 ], [ %17, %402 ], [ %17, %430 ], [ %17, %477 ], [ %17, %39 ], [ %17, %66 ], [ %17, %165 ], [ %17, %118 ], [ %17, %310 ], [ %17, %362 ], [ %17, %501 ], [ %17, %556 ], [ %17, %552 ], [ %17, %548 ], [ %17, %544 ], [ %17, %540 ], [ %17, %426 ], [ %17, %898 ], [ %17, %896 ], [ %59, %58 ], [ %38, %62 ], [ %111, %110 ], [ %109, %114 ], [ %158, %157 ], [ %156, %162 ], [ %330, %348 ], [ %352, %351 ], [ %367, %366 ], [ %361, %373 ], [ %414, %413 ], [ %412, %421 ], [ %440, %439 ], [ %438, %447 ], [ %485, %484 ], [ %483, %493 ]
  %993 = load ptr, ptr %1, align 8, !tbaa !35
  %994 = ptrtoint ptr %992 to i64
  %995 = ptrtoint ptr %993 to i64
  %996 = sub i64 %994, %995
  %997 = trunc i64 %996 to i32
  br label %998

998:                                              ; preds = %977, %950, %465, %819, %784, %734, %691, %622, %532, %884, %383, %318, %136, %70, %48, %987, %991
  %999 = phi ptr [ %992, %991 ], [ %989, %987 ], [ %53, %48 ], [ %78, %70 ], [ %137, %136 ], [ %324, %318 ], [ %389, %383 ], [ %890, %884 ], [ %534, %532 ], [ %627, %622 ], [ %696, %691 ], [ %739, %734 ], [ %789, %784 ], [ %824, %819 ], [ %469, %465 ], [ %952, %950 ], [ %979, %977 ]
  %1000 = phi i32 [ %997, %991 ], [ %988, %987 ], [ %54, %48 ], [ %79, %70 ], [ %138, %136 ], [ %325, %318 ], [ %390, %383 ], [ %891, %884 ], [ %535, %532 ], [ %628, %622 ], [ %697, %691 ], [ %740, %734 ], [ %790, %784 ], [ %825, %819 ], [ %470, %465 ], [ %953, %950 ], [ %980, %977 ]
  store ptr %999, ptr %1, align 8, !tbaa !35
  ret i32 %1000
}

declare i32 @Perl_sv_eq_flags(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @PerlIO_printf(ptr noundef, ptr noundef, ...) local_unnamed_addr #3

declare ptr @Perl_PerlIO_stderr() local_unnamed_addr #3

declare void @Perl_croak_popstack() local_unnamed_addr #3

declare void @Perl_savestack_grow_cnt(i32 noundef) local_unnamed_addr #3

declare i64 @Perl_valid_utf8_to_uvchr(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare ptr @__ctype_tolower_loc() local_unnamed_addr #5

declare void @Perl__load_PL_utf8_foldclosures() local_unnamed_addr #3

declare ptr @Perl_av_fetch(ptr noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

declare i64 @Perl_sv_2uv_flags(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @Perl_uvoffuni_to_utf8_flags(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare i32 @Perl_mg_size(ptr noundef) local_unnamed_addr #3

declare void @Perl_save_gp(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @Perl_save_generic_svref(ptr noundef) local_unnamed_addr #3

declare ptr @Perl_sv_magicext_mglob(ptr noundef) local_unnamed_addr #3

declare ptr @Perl_newSVsv(ptr noundef) local_unnamed_addr #3

declare i64 @Perl_sv_utf8_upgrade_flags_grow(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #3

declare void @Perl_fbm_compile(ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i1 @Perl_sv_utf8_downgrade(ptr noundef, i1 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.usub.sat.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.usub.sat.i64(i64, i64) #11

attributes #0 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { mustprogress nofree nosync nounwind willreturn memory(none) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #7 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #8 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #10 = { nofree nounwind willreturn memory(argmem: read) }
attributes #11 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nounwind }
attributes #13 = { nounwind willreturn memory(read) }
attributes #14 = { nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !10, i64 88}
!9 = !{!"regexp", !10, i64 0, !6, i64 8, !11, i64 16, !6, i64 24, !10, i64 32, !10, i64 40, !10, i64 48, !12, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !10, i64 88, !12, i64 96, !12, i64 100, !10, i64 104, !12, i64 112, !12, i64 116, !10, i64 120, !10, i64 128, !10, i64 136, !11, i64 144, !11, i64 152, !11, i64 160, !11, i64 168, !12, i64 176, !12, i64 176, !10, i64 184}
!10 = !{!"any pointer", !6, i64 0}
!11 = !{!"long", !6, i64 0}
!12 = !{!"int", !6, i64 0}
!13 = !{!14, !11, i64 0}
!14 = !{!"reg_substr_datum", !11, i64 0, !11, i64 8, !10, i64 16, !10, i64 24, !11, i64 32}
!15 = !{!16, !12, i64 12}
!16 = !{!"sv", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!17 = !{!18, !6, i64 0}
!18 = !{!"reg_substr_data", !6, i64 0, !6, i64 8}
!19 = !{!9, !12, i64 56}
!20 = !{!9, !10, i64 104}
!21 = !{!9, !11, i64 64}
!22 = !{!23, !24, i64 90}
!23 = !{!"", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32, !10, i64 40, !10, i64 48, !10, i64 56, !10, i64 64, !12, i64 72, !12, i64 76, !11, i64 80, !24, i64 88, !24, i64 89, !24, i64 90, !24, i64 91}
!24 = !{!"_Bool", !6, i64 0}
!25 = !{!23, !10, i64 56}
!26 = !{!23, !10, i64 8}
!27 = !{!23, !10, i64 16}
!28 = !{!29, !12, i64 12}
!29 = !{!"p5rx", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!30 = !{!23, !24, i64 89}
!31 = !{!23, !24, i64 88}
!32 = !{!23, !12, i64 72}
!33 = !{!14, !10, i64 24}
!34 = !{!14, !10, i64 16}
!35 = !{!10, !10, i64 0}
!36 = !{!9, !12, i64 100}
!37 = !{!14, !11, i64 8}
!38 = !{!16, !10, i64 0}
!39 = !{!40, !11, i64 16}
!40 = !{!"xpv", !10, i64 0, !6, i64 8, !11, i64 16, !6, i64 24}
!41 = !{!14, !11, i64 32}
!42 = !{i8 0, i8 2}
!43 = !{}
!44 = distinct !{!44, !45}
!45 = !{!"llvm.loop.mustprogress"}
!46 = distinct !{!46, !45}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !45}
!49 = distinct !{!49, !45}
!50 = distinct !{!50, !45}
!51 = distinct !{!51, !45}
!52 = distinct !{!52, !45}
!53 = distinct !{!53, !45}
!54 = !{!55, !10, i64 16}
!55 = !{!"regexp_internal", !12, i64 0, !6, i64 8, !10, i64 16, !10, i64 24, !10, i64 32, !12, i64 40, !6, i64 44}
!56 = !{!57, !6, i64 1}
!57 = !{!"regnode", !6, i64 0, !6, i64 1, !58, i64 2}
!58 = !{!"short", !6, i64 0}
!59 = !{!60, !6, i64 0}
!60 = !{!"regnode_string", !6, i64 0, !6, i64 1, !58, i64 2, !6, i64 4}
!61 = !{!16, !12, i64 8}
!62 = !{!23, !10, i64 0}
!63 = !{!23, !10, i64 48}
!64 = !{!9, !10, i64 120}
!65 = !{!66, !11, i64 0}
!66 = !{!"regexp_paren_pair", !11, i64 0, !11, i64 8, !11, i64 16}
!67 = !{!9, !12, i64 112}
!68 = !{!9, !12, i64 116}
!69 = !{!9, !12, i64 96}
!70 = distinct !{!70, !71}
!71 = !{!"llvm.loop.unroll.disable"}
!72 = distinct !{!72, !45}
!73 = !{!12, !12, i64 0}
!74 = !{!66, !11, i64 8}
!75 = distinct !{!75, !45}
!76 = !{!57, !6, i64 0}
!77 = distinct !{!77, !71}
!78 = distinct !{!78, !45}
!79 = distinct !{!79, !71}
!80 = distinct !{!80, !45}
!81 = !{ptr @Perl_foldEQ, ptr @Perl_foldEQ_latin1, ptr @Perl_foldEQ_locale}
!82 = distinct !{!82, !71}
!83 = distinct !{!83, !45}
!84 = distinct !{!84, !71}
!85 = distinct !{!85, !45}
!86 = distinct !{!86, !71}
!87 = distinct !{!87, !45}
!88 = !{!24, !24, i64 0}
!89 = !{!58, !58, i64 0}
!90 = distinct !{!90, !71}
!91 = distinct !{!91, !45}
!92 = distinct !{!92, !71}
!93 = distinct !{!93, !45}
!94 = !{i32 0, i32 2}
!95 = distinct !{!95, !71}
!96 = distinct !{!96, !45}
!97 = distinct !{!97, !71}
!98 = distinct !{!98, !45}
!99 = distinct !{!99, !71}
!100 = distinct !{!100, !45}
!101 = distinct !{!101, !71}
!102 = distinct !{!102, !45}
!103 = distinct !{!103, !71}
!104 = distinct !{!104, !45}
!105 = distinct !{!105, !71}
!106 = distinct !{!106, !45}
!107 = distinct !{!107, !71}
!108 = distinct !{!108, !45}
!109 = distinct !{!109, !71}
!110 = distinct !{!110, !45}
!111 = distinct !{!111, !71}
!112 = distinct !{!112, !45}
!113 = distinct !{!113, !71}
!114 = distinct !{!114, !45}
!115 = distinct !{!115, !71}
!116 = distinct !{!116, !45}
!117 = distinct !{!117, !71}
!118 = distinct !{!118, !45}
!119 = distinct !{!119, !71}
!120 = distinct !{!120, !45}
!121 = distinct !{!121, !71}
!122 = distinct !{!122, !45}
!123 = distinct !{!123, !71}
!124 = distinct !{!124, !45}
!125 = distinct !{!125, !71}
!126 = distinct !{!126, !45}
!127 = distinct !{!127, !71}
!128 = distinct !{!128, !45}
!129 = distinct !{!129, !45}
!130 = distinct !{!130, !71}
!131 = distinct !{!131, !45}
!132 = distinct !{!132, !45}
!133 = distinct !{!133, !71}
!134 = distinct !{!134, !45}
!135 = distinct !{!135, !71}
!136 = distinct !{!136, !45}
!137 = distinct !{!137, !71}
!138 = distinct !{!138, !45}
!139 = distinct !{!139, !71}
!140 = distinct !{!140, !45}
!141 = distinct !{!141, !71}
!142 = distinct !{!142, !45}
!143 = distinct !{!143, !71}
!144 = distinct !{!144, !45}
!145 = distinct !{!145, !71}
!146 = distinct !{!146, !45}
!147 = distinct !{!147, !71}
!148 = distinct !{!148, !45}
!149 = distinct !{!149, !71}
!150 = distinct !{!150, !45}
!151 = distinct !{!151, !71}
!152 = distinct !{!152, !45}
!153 = distinct !{!153, !71}
!154 = distinct !{!154, !45}
!155 = distinct !{!155, !71}
!156 = distinct !{!156, !45}
!157 = distinct !{!157, !71}
!158 = distinct !{!158, !45}
!159 = distinct !{!159, !71}
!160 = distinct !{!160, !45}
!161 = !{!55, !10, i64 24}
!162 = !{!163, !12, i64 4}
!163 = !{!"regnode_1", !6, i64 0, !6, i64 1, !58, i64 2, !12, i64 4}
!164 = !{!165, !12, i64 4}
!165 = !{!"_reg_ac_data", !12, i64 0, !12, i64 4, !10, i64 8, !10, i64 16}
!166 = !{!167, !11, i64 64}
!167 = !{!"_reg_trie_data", !12, i64 0, !12, i64 4, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32, !10, i64 40, !10, i64 48, !58, i64 56, !12, i64 60, !11, i64 64, !11, i64 72, !12, i64 80, !12, i64 84, !12, i64 88}
!168 = !{!167, !11, i64 72}
!169 = !{!11, !11, i64 0}
!170 = !{!167, !10, i64 32}
!171 = !{!165, !10, i64 16}
!172 = !{!173, !58, i64 0}
!173 = !{!"_reg_trie_state", !58, i64 0, !6, i64 8}
!174 = distinct !{!174, !45}
!175 = distinct !{!175, !45}
!176 = !{!167, !10, i64 48}
!177 = !{!178, !12, i64 4}
!178 = !{!"", !58, i64 0, !12, i64 4, !12, i64 8}
!179 = !{!167, !10, i64 8}
!180 = !{!167, !58, i64 56}
!181 = !{!167, !12, i64 4}
!182 = !{!167, !10, i64 24}
!183 = !{!184, !12, i64 4}
!184 = !{!"_reg_trie_trans", !12, i64 0, !12, i64 4}
!185 = !{!184, !12, i64 0}
!186 = !{!165, !10, i64 8}
!187 = distinct !{!187, !45}
!188 = distinct !{!188, !45, !189}
!189 = !{!"llvm.loop.peeled.count", i32 1}
!190 = distinct !{!190, !71}
!191 = !{!192, !12, i64 56}
!192 = !{!"cop", !10, i64 0, !10, i64 8, !10, i64 16, !11, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !6, i64 34, !6, i64 35, !12, i64 36, !10, i64 40, !10, i64 48, !12, i64 56, !12, i64 60, !10, i64 64, !10, i64 72}
!193 = !{!194, !11, i64 24}
!194 = !{!"magic", !10, i64 0, !10, i64 8, !58, i64 16, !6, i64 18, !6, i64 19, !11, i64 24, !10, i64 32, !10, i64 40}
!195 = !{!194, !6, i64 19}
!196 = !{!197, !10, i64 0}
!197 = !{!"xpvmg", !10, i64 0, !6, i64 8, !11, i64 16, !6, i64 24, !6, i64 32, !6, i64 40}
!198 = !{!199, !12, i64 12}
!199 = !{!"hv", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!200 = !{!23, !10, i64 40}
!201 = !{!9, !11, i64 80}
!202 = !{!9, !11, i64 72}
!203 = !{!23, !24, i64 91}
!204 = !{!23, !10, i64 32}
!205 = !{!23, !10, i64 24}
!206 = !{!207, !10, i64 0}
!207 = !{!"", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24}
!208 = !{!23, !10, i64 64}
!209 = !{!210, !10, i64 3968}
!210 = !{!"regmatch_slab", !6, i64 0, !10, i64 3960, !10, i64 3968}
!211 = !{!210, !10, i64 3960}
!212 = distinct !{!212, !45}
!213 = !{!207, !10, i64 8}
!214 = !{!207, !10, i64 16}
!215 = !{!207, !10, i64 24}
!216 = !{!217, !10, i64 0}
!217 = !{!"", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !10, i64 56, !11, i64 64, !6, i64 72}
!218 = !{!219, !10, i64 0}
!219 = !{!"gv", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!220 = !{!221, !11, i64 16}
!221 = !{!"xpvgv", !10, i64 0, !6, i64 8, !11, i64 16, !6, i64 24, !6, i64 32, !6, i64 40}
!222 = !{!223, !10, i64 0}
!223 = !{!"gp", !10, i64 0, !10, i64 8, !10, i64 16, !12, i64 24, !12, i64 28, !10, i64 32, !10, i64 40, !10, i64 48, !10, i64 56, !12, i64 64, !12, i64 67, !10, i64 72}
!224 = !{!217, !10, i64 56}
!225 = !{!217, !11, i64 64}
!226 = !{!217, !6, i64 72}
!227 = !{!228, !10, i64 56}
!228 = !{!"pmop", !10, i64 0, !10, i64 8, !10, i64 16, !11, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !6, i64 34, !6, i64 35, !10, i64 40, !10, i64 48, !10, i64 56, !12, i64 64, !6, i64 72, !6, i64 80, !10, i64 88}
!229 = !{!217, !10, i64 8}
!230 = !{!9, !10, i64 128}
!231 = !{!9, !11, i64 160}
!232 = !{!217, !11, i64 48}
!233 = !{!9, !10, i64 136}
!234 = !{!217, !10, i64 16}
!235 = !{!9, !11, i64 144}
!236 = distinct !{!236, !71}
!237 = distinct !{!237, !45}
!238 = distinct !{!238, !71}
!239 = distinct !{!239, !71}
!240 = distinct !{!240, !45}
!241 = distinct !{!241, !45}
!242 = distinct !{!242, !71}
!243 = distinct !{!243, !45}
!244 = distinct !{!244, !45}
!245 = distinct !{!245, !71}
!246 = distinct !{!246, !45}
!247 = distinct !{!247, !71}
!248 = distinct !{!248, !45}
!249 = distinct !{!249, !45}
!250 = distinct !{!250, !45}
!251 = !{!9, !10, i64 48}
!252 = !{!9, !11, i64 152}
!253 = !{!217, !10, i64 24}
!254 = distinct !{!254, !45}
!255 = distinct !{!255, !71}
!256 = !{!257, !12, i64 40}
!257 = !{!"regnode_charclass_class", !6, i64 0, !6, i64 1, !58, i64 2, !12, i64 4, !6, i64 8, !12, i64 40}
!258 = distinct !{!258, !45}
!259 = distinct !{!259, !45}
!260 = distinct !{!260, !45}
!261 = !{i32 7, i32 6}
!262 = distinct !{!262, !45}
!263 = distinct !{!263, !45}
!264 = distinct !{!264, !45}
!265 = distinct !{!265, !45}
!266 = !{i32 8, i32 7}
!267 = distinct !{!267, !45}
!268 = distinct !{!268, !45}
!269 = distinct !{!269, !45}
!270 = distinct !{!270, !45}
!271 = distinct !{!271, !45}
!272 = distinct !{!272, !45}
!273 = distinct !{!273, !45}
!274 = distinct !{!274, !45}
!275 = !{!57, !58, i64 2}
!276 = !{!277, !12, i64 0}
!277 = !{!"regmatch_state", !12, i64 0, !10, i64 8, !6, i64 16}
!278 = !{!167, !12, i64 60}
!279 = !{!167, !10, i64 16}
!280 = !{!167, !10, i64 40}
!281 = distinct !{!281, !45}
!282 = distinct !{!282, !45}
!283 = distinct !{!283, !45}
!284 = distinct !{!284, !45}
!285 = !{!167, !12, i64 80}
!286 = distinct !{!286, !45}
!287 = distinct !{!287, !45}
!288 = distinct !{!288, !71}
!289 = distinct !{!289, !45}
!290 = distinct !{!290, !45}
!291 = distinct !{!291, !45}
!292 = distinct !{!292, !45}
!293 = !{!23, !12, i64 76}
!294 = !{!277, !10, i64 8}
!295 = !{!296, !12, i64 8}
!296 = !{!"regnode_2L", !6, i64 0, !6, i64 1, !58, i64 2, !12, i64 4, !12, i64 8}
!297 = !{!298, !10, i64 8}
!298 = !{!"reg_data", !12, i64 0, !10, i64 8, !6, i64 16}
!299 = !{!9, !10, i64 184}
!300 = !{!301, !10, i64 0}
!301 = !{!"cv", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!302 = !{!303, !10, i64 8}
!303 = !{!"stackinfo", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44}
!304 = !{!303, !12, i64 32}
!305 = !{!306, !6, i64 34}
!306 = !{!"op", !10, i64 0, !10, i64 8, !10, i64 16, !11, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !6, i64 34, !6, i64 35}
!307 = !{!306, !6, i64 35}
!308 = !{!309, !24, i64 212}
!309 = !{!"jmpenv", !6, i64 0, !10, i64 200, !12, i64 208, !24, i64 212}
!310 = !{!303, !10, i64 24}
!311 = !{!303, !10, i64 16}
!312 = !{!303, !12, i64 40}
!313 = !{!303, !10, i64 0}
!314 = !{!315, !10, i64 0}
!315 = !{!"av", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!316 = !{!317, !11, i64 16}
!317 = !{!"xpvav", !10, i64 0, !6, i64 8, !11, i64 16, !11, i64 24, !10, i64 32}
!318 = !{!317, !11, i64 24}
!319 = !{!303, !12, i64 36}
!320 = !{!321, !10, i64 8}
!321 = !{!"padlist", !11, i64 0, !10, i64 8, !12, i64 16, !12, i64 20}
!322 = !{!323, !10, i64 40}
!323 = !{!"unop", !10, i64 0, !10, i64 8, !10, i64 16, !11, i64 24, !12, i64 32, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !12, i64 33, !6, i64 34, !6, i64 35, !10, i64 40}
!324 = !{!306, !11, i64 24}
!325 = !{!306, !10, i64 0}
!326 = !{!194, !10, i64 32}
!327 = !{!9, !10, i64 32}
!328 = !{!329, !10, i64 88}
!329 = !{!"regexp_engine", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32, !10, i64 40, !10, i64 48, !10, i64 56, !10, i64 64, !10, i64 72, !10, i64 80, !10, i64 88}
!330 = !{!66, !11, i64 16}
!331 = distinct !{!331, !45}
!332 = !{!333, !58, i64 4}
!333 = !{!"regnode_2", !6, i64 0, !6, i64 1, !58, i64 2, !58, i64 4, !58, i64 6}
!334 = !{!333, !58, i64 6}
!335 = !{!23, !11, i64 80}
!336 = distinct !{!336, !45}
!337 = distinct !{!337, !45}
!338 = distinct !{!338, !45}
!339 = distinct !{!339, !45}
!340 = distinct !{!340, !45}
!341 = distinct !{!341, !45}
!342 = distinct !{!342, !45}
!343 = distinct !{!343, !45}
!344 = distinct !{!344, !45}
!345 = distinct !{!345, !45}
!346 = distinct !{!346, !45}
!347 = distinct !{!347, !45}
!348 = distinct !{!348, !45}
!349 = distinct !{!349, !45}
!350 = distinct !{!350, !45}
!351 = distinct !{!351, !45}
!352 = !{!219, !12, i64 12}
!353 = !{!223, !10, i64 8}
!354 = !{!355, !10, i64 0}
!355 = !{!"io", !10, i64 0, !12, i64 8, !12, i64 12, !6, i64 16}
!356 = !{!357, !10, i64 40}
!357 = !{!"xpvio", !10, i64 0, !6, i64 8, !11, i64 16, !6, i64 24, !6, i64 32, !10, i64 40, !6, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !10, i64 80, !10, i64 88, !10, i64 96, !10, i64 104, !10, i64 112, !10, i64 120, !6, i64 128, !6, i64 129}
!358 = distinct !{!358, !45}
!359 = distinct !{!359, !45}
!360 = !{!194, !6, i64 18}
!361 = !{!194, !10, i64 8}
!362 = !{!363, !10, i64 0}
!363 = !{!"mgvtbl", !10, i64 0, !10, i64 8, !10, i64 16, !10, i64 24, !10, i64 32, !10, i64 40, !10, i64 48, !10, i64 56}
!364 = distinct !{!364, !45}
!365 = distinct !{!365, !45}
!366 = distinct !{!366, !45}
!367 = distinct !{!367, !45}
!368 = distinct !{!368, !45}
!369 = distinct !{!369, !45}
!370 = distinct !{!370, !45}
!371 = distinct !{!371, !45}
!372 = distinct !{!372, !45}
!373 = distinct !{!373, !45}
!374 = distinct !{!374, !45}
!375 = distinct !{!375, !45}
!376 = distinct !{!376, !45}
!377 = distinct !{!377, !45}
!378 = distinct !{!378, !45}
!379 = distinct !{!379, !45}
!380 = distinct !{!380, !45}
!381 = distinct !{!381, !45}
!382 = distinct !{!382, !45}
!383 = distinct !{!383, !45}
!384 = distinct !{!384, !45}
!385 = distinct !{!385, !45}
!386 = distinct !{!386, !45}
!387 = distinct !{!387, !45}
!388 = distinct !{!388, !45}
!389 = distinct !{!389, !45}
!390 = distinct !{!390, !45}
!391 = distinct !{!391, !45}
!392 = distinct !{!392, !45}
!393 = distinct !{!393, !45}
!394 = distinct !{!394, !45}
!395 = distinct !{!395, !45}
!396 = distinct !{!396, !45}
