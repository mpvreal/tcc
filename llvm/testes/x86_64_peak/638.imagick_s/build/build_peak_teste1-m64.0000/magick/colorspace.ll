; ModuleID = 'magick/colorspace.c'
source_filename = "magick/colorspace.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, ptr }
%struct._PrimaryInfo = type { double, double, double }
%struct._MagickPixelPacket = type { i32, i32, i32, double, i64, float, float, float, float, float }
%struct._Image = type { i32, i32, i32, i64, i32, i32, i32, i64, i64, i64, i64, ptr, %struct._PixelPacket, %struct._PixelPacket, %struct._PixelPacket, double, %struct._ChromaticityInfo, i32, ptr, i32, ptr, ptr, ptr, i64, double, double, %struct._RectangleInfo, %struct._RectangleInfo, %struct._RectangleInfo, double, double, double, i32, i32, i32, i32, i32, i32, ptr, i64, i64, i64, i64, i64, i64, %struct._ErrorInfo, %struct._TimerInfo, ptr, ptr, ptr, ptr, ptr, ptr, [4096 x i8], [4096 x i8], [4096 x i8], i64, i64, %struct._ExceptionInfo, i32, i64, ptr, %struct._ProfileInfo, %struct._ProfileInfo, ptr, i64, i64, ptr, ptr, ptr, i32, i32, %struct._PixelPacket, ptr, %struct._RectangleInfo, ptr, ptr, i32, i32, i64, i32, i64, i64, i32, i64 }
%struct._ChromaticityInfo = type { %struct._PrimaryInfo, %struct._PrimaryInfo, %struct._PrimaryInfo, %struct._PrimaryInfo }
%struct._ErrorInfo = type { double, double, double }
%struct._TimerInfo = type { %struct._Timer, %struct._Timer, i32, i64 }
%struct._Timer = type { double, double, double }
%struct._ExceptionInfo = type { i32, i32, ptr, ptr, ptr, i32, ptr, i64 }
%struct._ProfileInfo = type { ptr, i64, ptr, i64 }
%struct._PixelPacket = type { i16, i16, i16, i16 }
%struct._RectangleInfo = type { i64, i64, i64, i64 }
%struct._TransformPacket = type { float, float, float }

@.str = private unnamed_addr constant [20 x i8] c"magick/colorspace.c\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 514, i32 0, i32 22, ptr @0 }, align 8
@2 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @0 }, align 8
@.str.5 = private unnamed_addr constant [6 x i8] c"gamma\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"film-gamma\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"reference-black\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"reference-white\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"MemoryAllocationFailed\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"`%s'\00", align 1
@.gomp_critical_user_MagickCore_RGBTransformImage.var = common global [8 x i32] zeroinitializer, align 8
@.str.21 = private unnamed_addr constant [19 x i8] c"RGBTransform/Image\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"icc\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"icm\00", align 1
@TransformRGBImage.YCCMap = internal unnamed_addr constant [1389 x float] [float 0.000000e+00, float 0x3F4797CC40000000, float 0x3F579BFE00000000, float 0x3F61B3F200000000, float 0x3F679BFE00000000, float 0x3F6D81F100000000, float 0x3F71B4FE80000000, float 0x3F74A7F800000000, float 0x3F779BFE00000000, float 0x3F7A8EF780000000, float 0x3F7D82FD80000000, float 0x3F803AFB80000000, float 0x3F81B4FE80000000, float 0x3F832E7B40000000, float 0x3F84A7F800000000, float 0x3F8621FB00000000, float 0x3F879B77C0000000, float 0x3F89157AC0000000, float 0x3F8A8EF780000000, float 0x3F8C08FA80000000, float 0x3F8D827740000000, float 0x3F8EFC7A40000000, float 0x3F903AFB80000000, float 0x3F90F7FD00000000, float 0x3F91B4BB60000000, float 0x3F9271BCE0000000, float 0x3F932E7B40000000, float 0x3F93EB39A0000000, float 0x3F94A83B20000000, float 0x3F9564F980000000, float 0x3F9621FB00000000, float 0x3F96DEB960000000, float 0x3F979BBAE0000000, float 0x3F98587940000000, float 0x3F99157AC0000000, float 0x3F99D23920000000, float 0x3F9A8F3AA0000000, float 0x3F9B4BF900000000, float 0x3F9C08FA80000000, float 0x3F9CC5B8E0000000, float 0x3F9D827740000000, float 0x3F9E3F78C0000000, float 0x3F9EFC3720000000, float 0x3F9FB938A0000000, float 0x3FA03AFB80000000, float 0x3FA0997C40000000, float 0x3FA0F7DB60000000, float 0x3FA1565C20000000, float 0x3FA1B4BB60000000, float 0x3FA2133C20000000, float 0x3FA2719B40000000, float 0x3FA2D01C00000000, float 0x3FA32E7B40000000, float 0x3FA38CDA60000000, float 0x3FA3EB5B20000000, float 0x3FA449BA60000000, float 0x3FA4A83B20000000, float 0x3FA5069A40000000, float 0x3FA5651B00000000, float 0x3FA5C37A40000000, float 0x3FA621FB00000000, float 0x3FA6805A20000000, float 0x3FA6DEDAE0000000, float 0x3FA73D3A20000000, float 0x3FA79BBAE0000000, float 0x3FA7FA1A00000000, float 0x3FA8587940000000, float 0x3FA8B6FA00000000, float 0x3FA9155920000000, float 0x3FA973D9E0000000, float 0x3FA9D23920000000, float 0x3FAA30B9E0000000, float 0x3FAA8F1900000000, float 0x3FAAED99C0000000, float 0x3FAB4BF900000000, float 0x3FABAA79C0000000, float 0x3FAC08D8E0000000, float 0x3FAC6759A0000000, float 0x3FACC5B8E0000000, float 0x3FAD241800000000, float 0x3FAD8298C0000000, float 0x3FADE0F800000000, float 0x3FAE3F78C0000000, float 0x3FAE9DD7E0000000, float 0x3FAEFC58A0000000, float 0x3FAF5AB7E0000000, float 0x3FAFB938A0000000, float 0x3FB00BCBE0000000, float 0x3FB03B0C40000000, float 0x3FB06A3BE0000000, float 0x3FB0997C40000000, float 0x3FB0C8ABE0000000, float 0x3FB0F7DB60000000, float 0x3FB1271BC0000000, float 0x3FB1564B60000000, float 0x3FB1858BC0000000, float 0x3FB1B4BB60000000, float 0x3FB1E3FBC0000000, float 0x3FB2132B60000000, float 0x3FB2426BC0000000, float 0x3FB2719B40000000, float 0x3FB2A0DBA0000000, float 0x3FB2D00B40000000, float 0x3FB2FF3AE0000000, float 0x3FB32E7B40000000, float 0x3FB35DAAE0000000, float 0x3FB38CEB40000000, float 0x3FB3BC1AC0000000, float 0x3FB3EB5B20000000, float 0x3FB41A8AC0000000, float 0x3FB449CB20000000, float 0x3FB478FAC0000000, float 0x3FB4A83B20000000, float 0x3FB4D76AC0000000, float 0x3FB506AB20000000, float 0x3FB535DAA0000000, float 0x3FB5650A40000000, float 0x3FB5944AA0000000, float 0x3FB5C37A40000000, float 0x3FB5F2BAA0000000, float 0x3FB621EA40000000, float 0x3FB6512AA0000000, float 0x3FB6805A20000000, float 0x3FB6AF9A80000000, float 0x3FB6DECA20000000, float 0x3FB70E0A80000000, float 0x3FB73D3A20000000, float 0x3FB76C7A80000000, float 0x3FB79BAA20000000, float 0x3FB7CAD9A0000000, float 0x3FB7FA1A00000000, float 0x3FB82949A0000000, float 0x3FB8588A00000000, float 0x3FB887B9A0000000, float 0x3FB8B6FA00000000, float 0x3FB8E629A0000000, float 0x3FB9156A00000000, float 0x3FB9449980000000, float 0x3FB973D9E0000000, float 0x3FB9A30980000000, float 0x3FB9D249E0000000, float 0x3FBA017980000000, float 0x3FBA30A920000000, float 0x3FBA5FE980000000, float 0x3FBA8F1900000000, float 0x3FBABE5960000000, float 0x3FBAED8900000000, float 0x3FBB1CC960000000, float 0x3FBB4BF900000000, float 0x3FBB7B3960000000, float 0x3FBBAA6900000000, float 0x3FBBD9A960000000, float 0x3FBC08D8E0000000, float 0x3FBC381940000000, float 0x3FBC6748E0000000, float 0x3FBC967880000000, float 0x3FBCC5B8E0000000, float 0x3FBCF4E880000000, float 0x3FBD2428E0000000, float 0x3FBD535860000000, float 0x3FBD8298C0000000, float 0x3FBDB1C860000000, float 0x3FBDE108C0000000, float 0x3FBE103860000000, float 0x3FBE3F78C0000000, float 0x3FBE6EA860000000, float 0x3FBE9DE8C0000000, float 0x3FBECD1840000000, float 0x3FBEFC47E0000000, float 0x3FBF2B8840000000, float 0x3FBF5AB7E0000000, float 0x3FBF89F840000000, float 0x3FBFB927E0000000, float 0x3FBFE86840000000, float 0x3FC00BCBE0000000, float 0x3FC0236C20000000, float 0x3FC03B03E0000000, float 0x3FC052A420000000, float 0x3FC06A3BE0000000, float 0x3FC081DC00000000, float 0x3FC09973E0000000, float 0x3FC0B10BA0000000, float 0x3FC0C8ABE0000000, float 0x3FC0E043A0000000, float 0x3FC0F7E3E0000000, float 0x3FC10F7BA0000000, float 0x3FC1271BC0000000, float 0x3FC13EB3A0000000, float 0x3FC15653C0000000, float 0x3FC16DEBA0000000, float 0x3FC1858BC0000000, float 0x3FC19D23A0000000, float 0x3FC1B4C3C0000000, float 0x3FC1CC5B80000000, float 0x3FC1E3F360000000, float 0x3FC1FB9380000000, float 0x3FC2132B60000000, float 0x3FC22ACB80000000, float 0x3FC2426360000000, float 0x3FC25A0380000000, float 0x3FC2719B40000000, float 0x3FC2893B80000000, float 0x3FC2A0D340000000, float 0x3FC2B87380000000, float 0x3FC2D00B40000000, float 0x3FC2E7AB80000000, float 0x3FC2FF4340000000, float 0x3FC316DB00000000, float 0x3FC32E7B40000000, float 0x3FC3461300000000, float 0x3FC35DB340000000, float 0x3FC3754B00000000, float 0x3FC38CEB40000000, float 0x3FC3A48300000000, float 0x3FC3BC2340000000, float 0x3FC3D3BB00000000, float 0x3FC3EB5B20000000, float 0x3FC402F300000000, float 0x3FC41A9320000000, float 0x3FC4322B00000000, float 0x3FC449C2C0000000, float 0x3FC4616300000000, float 0x3FC478FAC0000000, float 0x3FC4909AE0000000, float 0x3FC4A832C0000000, float 0x3FC4BFD2E0000000, float 0x3FC4D76AC0000000, float 0x3FC4EF0AE0000000, float 0x3FC506A2C0000000, float 0x3FC51E42E0000000, float 0x3FC535DAA0000000, float 0x3FC54D7AE0000000, float 0x3FC56512A0000000, float 0x3FC57CAA80000000, float 0x3FC5944AA0000000, float 0x3FC5ABE280000000, float 0x3FC5C382A0000000, float 0x3FC5DB1A60000000, float 0x3FC5F2BAA0000000, float 0x3FC60A5260000000, float 0x3FC621F2A0000000, float 0x3FC6398A60000000, float 0x3FC6512AA0000000, float 0x3FC668C260000000, float 0x3FC68062A0000000, float 0x3FC697FA60000000, float 0x3FC6AF9220000000, float 0x3FC6C73260000000, float 0x3FC6DECA20000000, float 0x3FC6F66A60000000, float 0x3FC70E0220000000, float 0x3FC725A260000000, float 0x3FC73D3A20000000, float 0x3FC754DA40000000, float 0x3FC76C7220000000, float 0x3FC7841240000000, float 0x3FC79BAA20000000, float 0x3FC7B34A40000000, float 0x3FC7CAE220000000, float 0x3FC7E279E0000000, float 0x3FC7FA1A00000000, float 0x3FC811B1E0000000, float 0x3FC8295200000000, float 0x3FC840E9E0000000, float 0x3FC8588A00000000, float 0x3FC87021E0000000, float 0x3FC887C200000000, float 0x3FC89F59C0000000, float 0x3FC8B6FA00000000, float 0x3FC8CE91C0000000, float 0x3FC8E629A0000000, float 0x3FC8FDC9C0000000, float 0x3FC91561A0000000, float 0x3FC92D01C0000000, float 0x3FC9449980000000, float 0x3FC95C39C0000000, float 0x3FC973D180000000, float 0x3FC98B71C0000000, float 0x3FC9A30980000000, float 0x3FC9BAA9C0000000, float 0x3FC9D24180000000, float 0x3FC9E9E1C0000000, float 0x3FCA017980000000, float 0x3FCA191140000000, float 0x3FCA30B180000000, float 0x3FCA484940000000, float 0x3FCA5FE980000000, float 0x3FCA778140000000, float 0x3FCA8F2180000000, float 0x3FCAA6B940000000, float 0x3FCABE5960000000, float 0x3FCAD5F140000000, float 0x3FCAED9160000000, float 0x3FCB052940000000, float 0x3FCB1CC960000000, float 0x3FCB346140000000, float 0x3FCB4BF900000000, float 0x3FCB639920000000, float 0x3FCB7B3100000000, float 0x3FCB92D120000000, float 0x3FCBAA6900000000, float 0x3FCBC20920000000, float 0x3FCBD9A100000000, float 0x3FCBF14120000000, float 0x3FCC08D8E0000000, float 0x3FCC207920000000, float 0x3FCC3810E0000000, float 0x3FCC4FB120000000, float 0x3FCC6748E0000000, float 0x3FCC7EE0C0000000, float 0x3FCC9680E0000000, float 0x3FCCAE18A0000000, float 0x3FCCC5B8E0000000, float 0x3FCCDD50A0000000, float 0x3FCCF4F0E0000000, float 0x3FCD0C88A0000000, float 0x3FCD2428E0000000, float 0x3FCD3BC0A0000000, float 0x3FCD5360E0000000, float 0x3FCD6AF8A0000000, float 0x3FCD8298C0000000, float 0x3FCD9A30A0000000, float 0x3FCDB1C860000000, float 0x3FCDC968A0000000, float 0x3FCDE10060000000, float 0x3FCDF8A0A0000000, float 0x3FCE103860000000, float 0x3FCE27D880000000, float 0x3FCE3F7060000000, float 0x3FCE571080000000, float 0x3FCE6EA860000000, float 0x3FCE864880000000, float 0x3FCE9DE060000000, float 0x3FCEB58080000000, float 0x3FCECD1840000000, float 0x3FCEE4B020000000, float 0x3FCEFC5040000000, float 0x3FCF13E820000000, float 0x3FCF2B8840000000, float 0x3FCF432020000000, float 0x3FCF5AC040000000, float 0x3FCF725800000000, float 0x3FCF89F840000000, float 0x3FCFA19000000000, float 0x3FCFB93040000000, float 0x3FCFD0C800000000, float 0x3FCFE86840000000, float 2.500000e-01, float 0x3FD00BCBE0000000, float 0x3FD0179C00000000, float 0x3FD02367E0000000, float 0x3FD02F3800000000, float 0x3FD03B03E0000000, float 0x3FD046D400000000, float 0x3FD0529FE0000000, float 0x3FD05E7000000000, float 0x3FD06A3BE0000000, float 0x3FD0760C00000000, float 0x3FD081D7E0000000, float 0x3FD08DA800000000, float 0x3FD09973E0000000, float 0x3FD0A53FC0000000, float 0x3FD0B10FE0000000, float 0x3FD0BCDBC0000000, float 0x3FD0C8ABE0000000, float 0x3FD0D477C0000000, float 0x3FD0E047E0000000, float 0x3FD0EC13C0000000, float 0x3FD0F7E3E0000000, float 0x3FD103AFC0000000, float 0x3FD10F7FC0000000, float 0x3FD11B4BC0000000, float 0x3FD1271BC0000000, float 0x3FD132E7C0000000, float 0x3FD13EB3A0000000, float 0x3FD14A83C0000000, float 0x3FD1564FA0000000, float 0x3FD1621FA0000000, float 0x3FD16DEBA0000000, float 0x3FD179BBA0000000, float 0x3FD18587A0000000, float 0x3FD19157A0000000, float 0x3FD19D23A0000000, float 0x3FD1A8F3A0000000, float 0x3FD1B4BF80000000, float 0x3FD1C08FA0000000, float 0x3FD1CC5B80000000, float 0x3FD1D82780000000, float 0x3FD1E3F780000000, float 0x3FD1EFC380000000, float 0x3FD1FB9380000000, float 0x3FD2075F60000000, float 0x3FD2132F80000000, float 0x3FD21EFB60000000, float 0x3FD22ACB80000000, float 0x3FD2369760000000, float 0x3FD2426780000000, float 0x3FD24E3360000000, float 0x3FD25A0380000000, float 0x3FD265CF60000000, float 0x3FD2719B40000000, float 0x3FD27D6B60000000, float 0x3FD2893740000000, float 0x3FD2950760000000, float 0x3FD2A0D340000000, float 0x3FD2ACA360000000, float 0x3FD2B86F40000000, float 0x3FD2C43F60000000, float 0x3FD2D00B40000000, float 0x3FD2DBDB60000000, float 0x3FD2E7A740000000, float 0x3FD2F37320000000, float 0x3FD2FF4340000000, float 0x3FD30B0F20000000, float 0x3FD316DF40000000, float 0x3FD322AB20000000, float 0x3FD32E7B40000000, float 0x3FD33A4720000000, float 0x3FD3461740000000, float 0x3FD351E320000000, float 0x3FD35DB340000000, float 0x3FD3697F20000000, float 0x3FD3754F40000000, float 0x3FD3811B20000000, float 0x3FD38CEB40000000, float 0x3FD398B720000000, float 0x3FD3A48300000000, float 0x3FD3B05320000000, float 0x3FD3BC1F00000000, float 0x3FD3C7EF20000000, float 0x3FD3D3BB00000000, float 0x3FD3DF8B20000000, float 0x3FD3EB5700000000, float 0x3FD3F72720000000, float 0x3FD402F300000000, float 0x3FD40EC320000000, float 0x3FD41A8F00000000, float 0x3FD4265F00000000, float 0x3FD4322B00000000, float 0x3FD43DF6E0000000, float 0x3FD449C700000000, float 0x3FD45592E0000000, float 0x3FD4616300000000, float 0x3FD46D2EE0000000, float 0x3FD478FEE0000000, float 0x3FD484CAE0000000, float 0x3FD4909AE0000000, float 0x3FD49C66E0000000, float 0x3FD4A836E0000000, float 0x3FD4B402E0000000, float 0x3FD4BFCEC0000000, float 0x3FD4CB9EC0000000, float 0x3FD4D76AC0000000, float 0x3FD4E33AC0000000, float 0x3FD4EF06C0000000, float 0x3FD4FAD6C0000000, float 0x3FD506A2C0000000, float 0x3FD51272C0000000, float 0x3FD51E3EA0000000, float 0x3FD52A0EC0000000, float 0x3FD535DAA0000000, float 0x3FD541AAC0000000, float 0x3FD54D76A0000000, float 0x3FD55942A0000000, float 0x3FD56512A0000000, float 0x3FD570DE80000000, float 0x3FD57CAEA0000000, float 0x3FD5887A80000000, float 0x3FD5944AA0000000, float 0x3FD5A01680000000, float 0x3FD5ABE6A0000000, float 0x3FD5B7B280000000, float 0x3FD5C382A0000000, float 0x3FD5CF4E80000000, float 0x3FD5DB1EA0000000, float 0x3FD5E6EA80000000, float 0x3FD5F2B660000000, float 0x3FD5FE8680000000, float 0x3FD60A5260000000, float 0x3FD6162280000000, float 0x3FD621EE60000000, float 0x3FD62DBE80000000, float 0x3FD6398A60000000, float 0x3FD6455A80000000, float 0x3FD6512660000000, float 0x3FD65CF680000000, float 0x3FD668C260000000, float 0x3FD6749280000000, float 0x3FD6805E60000000, float 0x3FD68C2A40000000, float 0x3FD697FA60000000, float 0x3FD6A3C640000000, float 0x3FD6AF9660000000, float 0x3FD6BB6240000000, float 0x3FD6C73260000000, float 0x3FD6D2FE40000000, float 0x3FD6DECE60000000, float 0x3FD6EA9A40000000, float 0x3FD6F66A60000000, float 0x3FD7023640000000, float 0x3FD70E0660000000, float 0x3FD719D240000000, float 0x3FD7259E20000000, float 0x3FD7316E40000000, float 0x3FD73D3A20000000, float 0x3FD7490A40000000, float 0x3FD754D620000000, float 0x3FD760A640000000, float 0x3FD76C7220000000, float 0x3FD7784240000000, float 0x3FD7840E20000000, float 0x3FD78FDE20000000, float 0x3FD79BAA20000000, float 0x3FD7A77A20000000, float 0x3FD7B34620000000, float 0x3FD7BF1200000000, float 0x3FD7CAE220000000, float 0x3FD7D6AE00000000, float 0x3FD7E27E00000000, float 0x3FD7EE4A00000000, float 0x3FD7FA1A00000000, float 0x3FD805E600000000, float 0x3FD811B600000000, float 0x3FD81D8200000000, float 0x3FD8295200000000, float 0x3FD8351DE0000000, float 0x3FD840EE00000000, float 0x3FD84CB9E0000000, float 0x3FD85885E0000000, float 0x3FD86455E0000000, float 0x3FD87021E0000000, float 0x3FD87BF1E0000000, float 0x3FD887BDC0000000, float 0x3FD8938DE0000000, float 0x3FD89F59C0000000, float 0x3FD8AB29E0000000, float 0x3FD8B6F5C0000000, float 0x3FD8C2C5E0000000, float 0x3FD8CE91C0000000, float 0x3FD8DA61E0000000, float 0x3FD8E62DC0000000, float 0x3FD8F1F9A0000000, float 0x3FD8FDC9C0000000, float 0x3FD90995A0000000, float 0x3FD91565C0000000, float 0x3FD92131A0000000, float 0x3FD92D01C0000000, float 0x3FD938CDA0000000, float 0x3FD9449DC0000000, float 0x3FD95069A0000000, float 0x3FD95C39C0000000, float 0x3FD96805A0000000, float 0x3FD973D5C0000000, float 0x3FD97FA1A0000000, float 0x3FD98B6D80000000, float 0x3FD9973DA0000000, float 0x3FD9A30980000000, float 0x3FD9AED9A0000000, float 0x3FD9BAA580000000, float 0x3FD9C675A0000000, float 0x3FD9D24180000000, float 0x3FD9DE11A0000000, float 0x3FD9E9DD80000000, float 0x3FD9F5ADA0000000, float 0x3FDA017980000000, float 0x3FDA0D49A0000000, float 0x3FDA191580000000, float 0x3FDA24E160000000, float 0x3FDA30B180000000, float 0x3FDA3C7D60000000, float 0x3FDA484D80000000, float 0x3FDA541960000000, float 0x3FDA5FE980000000, float 0x3FDA6BB560000000, float 0x3FDA778580000000, float 0x3FDA835160000000, float 0x3FDA8F2180000000, float 0x3FDA9AED60000000, float 0x3FDAA6BD60000000, float 0x3FDAB28960000000, float 0x3FDABE5540000000, float 0x3FDACA2560000000, float 0x3FDAD5F140000000, float 0x3FDAE1C160000000, float 0x3FDAED8D40000000, float 0x3FDAF95D40000000, float 0x3FDB052940000000, float 0x3FDB10F940000000, float 0x3FDB1CC540000000, float 0x3FDB289540000000, float 0x3FDB346140000000, float 0x3FDB403140000000, float 0x3FDB4BFD20000000, float 0x3FDB57C920000000, float 0x3FDB639920000000, float 0x3FDB6F6520000000, float 0x3FDB7B3520000000, float 0x3FDB870120000000, float 0x3FDB92D120000000, float 0x3FDB9E9D00000000, float 0x3FDBAA6D20000000, float 0x3FDBB63900000000, float 0x3FDBC20920000000, float 0x3FDBCDD500000000, float 0x3FDBD9A100000000, float 0x3FDBE57100000000, float 0x3FDBF13CE0000000, float 0x3FDBFD0D00000000, float 0x3FDC08D8E0000000, float 0x3FDC14A900000000, float 0x3FDC2074E0000000, float 0x3FDC2C4500000000, float 0x3FDC3810E0000000, float 0x3FDC43E100000000, float 0x3FDC4FACE0000000, float 0x3FDC5B7D00000000, float 0x3FDC6748E0000000, float 0x3FDC7314C0000000, float 0x3FDC7EE4E0000000, float 0x3FDC8AB0C0000000, float 0x3FDC9680E0000000, float 0x3FDCA24CC0000000, float 0x3FDCAE1CE0000000, float 0x3FDCB9E8C0000000, float 0x3FDCC5B8E0000000, float 0x3FDCD184C0000000, float 0x3FDCDD54E0000000, float 0x3FDCE920C0000000, float 0x3FDCF4F0E0000000, float 0x3FDD00BCC0000000, float 0x3FDD0C8CE0000000, float 0x3FDD1858C0000000, float 0x3FDD2424A0000000, float 0x3FDD2FF4C0000000, float 0x3FDD3BC0A0000000, float 0x3FDD4790C0000000, float 0x3FDD535CA0000000, float 0x3FDD5F2CC0000000, float 0x3FDD6AF8A0000000, float 0x3FDD76C8C0000000, float 0x3FDD8294A0000000, float 0x3FDD8E64C0000000, float 0x3FDD9A30A0000000, float 0x3FDDA5FC80000000, float 0x3FDDB1CCA0000000, float 0x3FDDBD9880000000, float 0x3FDDC968A0000000, float 0x3FDDD53480000000, float 0x3FDDE104A0000000, float 0x3FDDECD080000000, float 0x3FDDF8A0A0000000, float 0x3FDE046C80000000, float 0x3FDE103C80000000, float 0x3FDE1C0880000000, float 0x3FDE27D880000000, float 0x3FDE33A480000000, float 0x3FDE3F7060000000, float 0x3FDE4B4080000000, float 0x3FDE570C60000000, float 0x3FDE62DC60000000, float 0x3FDE6EA860000000, float 0x3FDE7A7860000000, float 0x3FDE864460000000, float 0x3FDE921460000000, float 0x3FDE9DE060000000, float 0x3FDEA9B060000000, float 0x3FDEB57C40000000, float 0x3FDEC14C60000000, float 0x3FDECD1840000000, float 0x3FDED8E440000000, float 0x3FDEE4B440000000, float 0x3FDEF08040000000, float 0x3FDEFC5040000000, float 0x3FDF081C20000000, float 0x3FDF13EC40000000, float 0x3FDF1FB820000000, float 0x3FDF2B8840000000, float 0x3FDF375420000000, float 0x3FDF432440000000, float 0x3FDF4EF020000000, float 0x3FDF5AC040000000, float 0x3FDF668C20000000, float 0x3FDF725800000000, float 0x3FDF7E2820000000, float 0x3FDF89F400000000, float 0x3FDF95C420000000, float 0x3FDFA19000000000, float 0x3FDFAD6020000000, float 0x3FDFB92C00000000, float 0x3FDFC4FC20000000, float 0x3FDFD0C800000000, float 0x3FDFDC9820000000, float 0x3FDFE86400000000, float 0x3FDFF43420000000, float 5.000000e-01, float 0x3FE005E600000000, float 0x3FE00BCE00000000, float 0x3FE011B400000000, float 0x3FE0179C00000000, float 0x3FE01D8200000000, float 0x3FE0236A00000000, float 0x3FE0295000000000, float 0x3FE02F3800000000, float 0x3FE0351DE0000000, float 0x3FE03B0600000000, float 0x3FE040EBE0000000, float 0x3FE046D400000000, float 0x3FE04CB9E0000000, float 0x3FE0529FE0000000, float 0x3FE05887E0000000, float 0x3FE05E6DE0000000, float 0x3FE06455E0000000, float 0x3FE06A3BE0000000, float 0x3FE07023E0000000, float 0x3FE07609E0000000, float 0x3FE07BF1E0000000, float 0x3FE081D7E0000000, float 0x3FE087BFE0000000, float 0x3FE08DA5E0000000, float 0x3FE0938DE0000000, float 0x3FE09973E0000000, float 0x3FE09F59C0000000, float 0x3FE0A541E0000000, float 0x3FE0AB27C0000000, float 0x3FE0B10FE0000000, float 0x3FE0B6F5C0000000, float 0x3FE0BCDDE0000000, float 0x3FE0C2C3C0000000, float 0x3FE0C8ABE0000000, float 0x3FE0CE91C0000000, float 0x3FE0D479E0000000, float 0x3FE0DA5FC0000000, float 0x3FE0E047E0000000, float 0x3FE0E62DC0000000, float 0x3FE0EC13C0000000, float 0x3FE0F1FBC0000000, float 0x3FE0F7E1C0000000, float 0x3FE0FDC9C0000000, float 0x3FE103AFC0000000, float 0x3FE10997C0000000, float 0x3FE10F7DC0000000, float 0x3FE11565C0000000, float 0x3FE11B4BC0000000, float 0x3FE12133C0000000, float 0x3FE12719C0000000, float 0x3FE12D01C0000000, float 0x3FE132E7C0000000, float 0x3FE138CDA0000000, float 0x3FE13EB5C0000000, float 0x3FE1449BA0000000, float 0x3FE14A83C0000000, float 0x3FE15069A0000000, float 0x3FE15651C0000000, float 0x3FE15C37A0000000, float 0x3FE1621FA0000000, float 0x3FE16805A0000000, float 0x3FE16DEDA0000000, float 0x3FE173D3A0000000, float 0x3FE179B9A0000000, float 0x3FE17FA1A0000000, float 0x3FE18587A0000000, float 0x3FE18B6FA0000000, float 0x3FE19155A0000000, float 0x3FE1973DA0000000, float 0x3FE19D23A0000000, float 0x3FE1A30BA0000000, float 0x3FE1A8F1A0000000, float 0x3FE1AED9A0000000, float 0x3FE1B4BF80000000, float 0x3FE1BAA7A0000000, float 0x3FE1C08D80000000, float 0x3FE1C675A0000000, float 0x3FE1CC5B80000000, float 0x3FE1D24180000000, float 0x3FE1D82980000000, float 0x3FE1DE0F80000000, float 0x3FE1E3F780000000, float 0x3FE1E9DD80000000, float 0x3FE1EFC580000000, float 0x3FE1F5AB80000000, float 0x3FE1FB9380000000, float 0x3FE2017980000000, float 0x3FE2076180000000, float 0x3FE20D4780000000, float 0x3FE2132F80000000, float 0x3FE2191580000000, float 0x3FE21EFB60000000, float 0x3FE224E380000000, float 0x3FE22AC960000000, float 0x3FE230B180000000, float 0x3FE2369760000000, float 0x3FE23C7F80000000, float 0x3FE2426560000000, float 0x3FE2484D80000000, float 0x3FE24E3360000000, float 0x3FE2541B80000000, float 0x3FE25A0160000000, float 0x3FE25FE760000000, float 0x3FE265CF60000000, float 0x3FE26BB560000000, float 0x3FE2719D60000000, float 0x3FE2778360000000, float 0x3FE27D6B60000000, float 0x3FE2835160000000, float 0x3FE2893960000000, float 0x3FE28F1F60000000, float 0x3FE2950760000000, float 0x3FE29AED60000000, float 0x3FE2A0D560000000, float 0x3FE2A6BB60000000, float 0x3FE2ACA140000000, float 0x3FE2B28960000000, float 0x3FE2B86F40000000, float 0x3FE2BE5760000000, float 0x3FE2C43D40000000, float 0x3FE2CA2560000000, float 0x3FE2D00B40000000, float 0x3FE2D5F360000000, float 0x3FE2DBD940000000, float 0x3FE2E1C160000000, float 0x3FE2E7A740000000, float 0x3FE2ED8F40000000, float 0x3FE2F37540000000, float 0x3FE2F95B40000000, float 0x3FE2FF4340000000, float 0x3FE3052940000000, float 0x3FE30B1140000000, float 0x3FE310F740000000, float 0x3FE316DF40000000, float 0x3FE31CC540000000, float 0x3FE322AD40000000, float 0x3FE3289340000000, float 0x3FE32E7B40000000, float 0x3FE3346140000000, float 0x3FE33A4940000000, float 0x3FE3402F20000000, float 0x3FE3461520000000, float 0x3FE34BFD20000000, float 0x3FE351E320000000, float 0x3FE357CB20000000, float 0x3FE35DB120000000, float 0x3FE3639920000000, float 0x3FE3697F20000000, float 0x3FE36F6720000000, float 0x3FE3754D20000000, float 0x3FE37B3520000000, float 0x3FE3811B20000000, float 0x3FE3870320000000, float 0x3FE38CE920000000, float 0x3FE392CF00000000, float 0x3FE398B720000000, float 0x3FE39E9D00000000, float 0x3FE3A48520000000, float 0x3FE3AA6B00000000, float 0x3FE3B05320000000, float 0x3FE3B63900000000, float 0x3FE3BC2120000000, float 0x3FE3C20700000000, float 0x3FE3C7EF20000000, float 0x3FE3CDD500000000, float 0x3FE3D3BD20000000, float 0x3FE3D9A300000000, float 0x3FE3DF8900000000, float 0x3FE3E57100000000, float 0x3FE3EB5700000000, float 0x3FE3F13F00000000, float 0x3FE3F72500000000, float 0x3FE3FD0D00000000, float 0x3FE402F300000000, float 0x3FE408DB00000000, float 0x3FE40EC100000000, float 0x3FE414A900000000, float 0x3FE41A8F00000000, float 0x3FE4207700000000, float 0x3FE4265D00000000, float 0x3FE42C42E0000000, float 0x3FE4322B00000000, float 0x3FE43810E0000000, float 0x3FE43DF900000000, float 0x3FE443DEE0000000, float 0x3FE449C700000000, float 0x3FE44FACE0000000, float 0x3FE4559500000000, float 0x3FE45B7AE0000000, float 0x3FE4616300000000, float 0x3FE46748E0000000, float 0x3FE46D3100000000, float 0x3FE47316E0000000, float 0x3FE478FCE0000000, float 0x3FE47EE4E0000000, float 0x3FE484CAE0000000, float 0x3FE48AB2E0000000, float 0x3FE49098E0000000, float 0x3FE49680E0000000, float 0x3FE49C66E0000000, float 0x3FE4A24EE0000000, float 0x3FE4A834E0000000, float 0x3FE4AE1CE0000000, float 0x3FE4B402E0000000, float 0x3FE4B9EAE0000000, float 0x3FE4BFD0E0000000, float 0x3FE4C5B6C0000000, float 0x3FE4CB9EC0000000, float 0x3FE4D184C0000000, float 0x3FE4D76CC0000000, float 0x3FE4DD52C0000000, float 0x3FE4E33AC0000000, float 0x3FE4E920C0000000, float 0x3FE4EF08C0000000, float 0x3FE4F4EEC0000000, float 0x3FE4FAD6C0000000, float 0x3FE500BCC0000000, float 0x3FE506A4C0000000, float 0x3FE50C8AC0000000, float 0x3FE51270C0000000, float 0x3FE51858C0000000, float 0x3FE51E3EA0000000, float 0x3FE52426C0000000, float 0x3FE52A0CA0000000, float 0x3FE52FF4C0000000, float 0x3FE535DAA0000000, float 0x3FE53BC2C0000000, float 0x3FE541A8A0000000, float 0x3FE54790C0000000, float 0x3FE54D76A0000000, float 0x3FE5535EC0000000, float 0x3FE55944A0000000, float 0x3FE55F2AA0000000, float 0x3FE56512A0000000, float 0x3FE56AF8A0000000, float 0x3FE570E0A0000000, float 0x3FE576C6A0000000, float 0x3FE57CAEA0000000, float 0x3FE58294A0000000, float 0x3FE5887CA0000000, float 0x3FE58E62A0000000, float 0x3FE5944AA0000000, float 0x3FE59A30A0000000, float 0x3FE5A018A0000000, float 0x3FE5A5FEA0000000, float 0x3FE5ABE480000000, float 0x3FE5B1CCA0000000, float 0x3FE5B7B280000000, float 0x3FE5BD9AA0000000, float 0x3FE5C38080000000, float 0x3FE5C968A0000000, float 0x3FE5CF4E80000000, float 0x3FE5D536A0000000, float 0x3FE5DB1C80000000, float 0x3FE5E104A0000000, float 0x3FE5E6EA80000000, float 0x3FE5ECD080000000, float 0x3FE5F2B880000000, float 0x3FE5F89E80000000, float 0x3FE5FE8680000000, float 0x3FE6046C80000000, float 0x3FE60A5480000000, float 0x3FE6103A80000000, float 0x3FE6162280000000, float 0x3FE61C0880000000, float 0x3FE621F080000000, float 0x3FE627D680000000, float 0x3FE62DBE80000000, float 0x3FE633A480000000, float 0x3FE6398A60000000, float 0x3FE63F7280000000, float 0x3FE6455860000000, float 0x3FE64B4080000000, float 0x3FE6512660000000, float 0x3FE6570E60000000, float 0x3FE65CF460000000, float 0x3FE662DC60000000, float 0x3FE668C260000000, float 0x3FE66EAA60000000, float 0x3FE6749060000000, float 0x3FE67A7860000000, float 0x3FE6805E60000000, float 0x3FE6864660000000, float 0x3FE68C2C60000000, float 0x3FE6921260000000, float 0x3FE697FA60000000, float 0x3FE69DE060000000, float 0x3FE6A3C860000000, float 0x3FE6A9AE40000000, float 0x3FE6AF9660000000, float 0x3FE6B57C40000000, float 0x3FE6BB6460000000, float 0x3FE6C14A40000000, float 0x3FE6C73260000000, float 0x3FE6CD1840000000, float 0x3FE6D2FE40000000, float 0x3FE6D8E640000000, float 0x3FE6DECC40000000, float 0x3FE6E4B440000000, float 0x3FE6EA9A40000000, float 0x3FE6F08240000000, float 0x3FE6F66840000000, float 0x3FE6FC5040000000, float 0x3FE7023640000000, float 0x3FE7081E40000000, float 0x3FE70E0440000000, float 0x3FE713EC40000000, float 0x3FE719D240000000, float 0x3FE71FB820000000, float 0x3FE725A040000000, float 0x3FE72B8620000000, float 0x3FE7316E40000000, float 0x3FE7375420000000, float 0x3FE73D3C40000000, float 0x3FE7432220000000, float 0x3FE7490A40000000, float 0x3FE74EF020000000, float 0x3FE754D840000000, float 0x3FE75ABE20000000, float 0x3FE760A640000000, float 0x3FE7668C20000000, float 0x3FE76C7220000000, float 0x3FE7725A20000000, float 0x3FE7784020000000, float 0x3FE77E2820000000, float 0x3FE7840E20000000, float 0x3FE789F620000000, float 0x3FE78FDC20000000, float 0x3FE795C420000000, float 0x3FE79BAA20000000, float 0x3FE7A19220000000, float 0x3FE7A77820000000, float 0x3FE7AD6020000000, float 0x3FE7B34620000000, float 0x3FE7B92C00000000, float 0x3FE7BF1420000000, float 0x3FE7C4FA00000000, float 0x3FE7CAE220000000, float 0x3FE7D0C800000000, float 0x3FE7D6B000000000, float 0x3FE7DC9600000000, float 0x3FE7E27E00000000, float 0x3FE7E86400000000, float 0x3FE7EE4C00000000, float 0x3FE7F43200000000, float 0x3FE7FA1A00000000, float 7.500000e-01, float 0x3FE805E600000000, float 0x3FE80BCE00000000, float 0x3FE811B400000000, float 0x3FE8179C00000000, float 0x3FE81D8200000000, float 0x3FE8236A00000000, float 0x3FE8295000000000, float 0x3FE82F3800000000, float 0x3FE8351DE0000000, float 0x3FE83B0600000000, float 0x3FE840EBE0000000, float 0x3FE846D400000000, float 0x3FE84CB9E0000000, float 0x3FE8529FE0000000, float 0x3FE85887E0000000, float 0x3FE85E6DE0000000, float 0x3FE86455E0000000, float 0x3FE86A3BE0000000, float 0x3FE87023E0000000, float 0x3FE87609E0000000, float 0x3FE87BF1E0000000, float 0x3FE881D7E0000000, float 0x3FE887BFE0000000, float 0x3FE88DA5E0000000, float 0x3FE8938DE0000000, float 0x3FE89973E0000000, float 0x3FE89F59C0000000, float 0x3FE8A541E0000000, float 0x3FE8AB27C0000000, float 0x3FE8B10FE0000000, float 0x3FE8B6F5C0000000, float 0x3FE8BCDDE0000000, float 0x3FE8C2C3C0000000, float 0x3FE8C8ABE0000000, float 0x3FE8CE91C0000000, float 0x3FE8D479E0000000, float 0x3FE8DA5FC0000000, float 0x3FE8E047E0000000, float 0x3FE8E62DC0000000, float 0x3FE8EC13C0000000, float 0x3FE8F1FBC0000000, float 0x3FE8F7E1C0000000, float 0x3FE8FDC9C0000000, float 0x3FE903AFC0000000, float 0x3FE90997C0000000, float 0x3FE90F7DC0000000, float 0x3FE91565C0000000, float 0x3FE91B4BC0000000, float 0x3FE92133C0000000, float 0x3FE92719C0000000, float 0x3FE92D01C0000000, float 0x3FE932E7C0000000, float 0x3FE938CDA0000000, float 0x3FE93EB5C0000000, float 0x3FE9449BA0000000, float 0x3FE94A83C0000000, float 0x3FE95069A0000000, float 0x3FE95651C0000000, float 0x3FE95C37A0000000, float 0x3FE9621FA0000000, float 0x3FE96805A0000000, float 0x3FE96DEDA0000000, float 0x3FE973D3A0000000, float 0x3FE979B9A0000000, float 0x3FE97FA1A0000000, float 0x3FE98587A0000000, float 0x3FE98B6FA0000000, float 0x3FE99155A0000000, float 0x3FE9973DA0000000, float 0x3FE99D23A0000000, float 0x3FE9A30BA0000000, float 0x3FE9A8F1A0000000, float 0x3FE9AED9A0000000, float 0x3FE9B4BF80000000, float 0x3FE9BAA7A0000000, float 0x3FE9C08D80000000, float 0x3FE9C675A0000000, float 0x3FE9CC5B80000000, float 0x3FE9D24180000000, float 0x3FE9D82980000000, float 0x3FE9DE0F80000000, float 0x3FE9E3F780000000, float 0x3FE9E9DD80000000, float 0x3FE9EFC580000000, float 0x3FE9F5AB80000000, float 0x3FE9FB9380000000, float 0x3FEA017980000000, float 0x3FEA076180000000, float 0x3FEA0D4780000000, float 0x3FEA132F80000000, float 0x3FEA191580000000, float 0x3FEA1EFB60000000, float 0x3FEA24E380000000, float 0x3FEA2AC960000000, float 0x3FEA30B180000000, float 0x3FEA369760000000, float 0x3FEA3C7F80000000, float 0x3FEA426560000000, float 0x3FEA484D80000000, float 0x3FEA4E3360000000, float 0x3FEA541B80000000, float 0x3FEA5A0160000000, float 0x3FEA5FE760000000, float 0x3FEA65CF60000000, float 0x3FEA6BB560000000, float 0x3FEA719D60000000, float 0x3FEA778360000000, float 0x3FEA7D6B60000000, float 0x3FEA835160000000, float 0x3FEA893960000000, float 0x3FEA8F1F60000000, float 0x3FEA950760000000, float 0x3FEA9AED60000000, float 0x3FEAA0D560000000, float 0x3FEAA6BB60000000, float 0x3FEAACA140000000, float 0x3FEAB28960000000, float 0x3FEAB86F40000000, float 0x3FEABE5760000000, float 0x3FEAC43D40000000, float 0x3FEACA2560000000, float 0x3FEAD00B40000000, float 0x3FEAD5F360000000, float 0x3FEADBD940000000, float 0x3FEAE1C160000000, float 0x3FEAE7A740000000, float 0x3FEAED8F40000000, float 0x3FEAF37540000000, float 0x3FEAF95B40000000, float 0x3FEAFF4340000000, float 0x3FEB052940000000, float 0x3FEB0B1140000000, float 0x3FEB10F740000000, float 0x3FEB16DF40000000, float 0x3FEB1CC540000000, float 0x3FEB22AD40000000, float 0x3FEB289340000000, float 0x3FEB2E7B40000000, float 0x3FEB346140000000, float 0x3FEB3A4940000000, float 0x3FEB402F20000000, float 0x3FEB461520000000, float 0x3FEB4BFD20000000, float 0x3FEB51E320000000, float 0x3FEB57CB20000000, float 0x3FEB5DB120000000, float 0x3FEB639920000000, float 0x3FEB697F20000000, float 0x3FEB6F6720000000, float 0x3FEB754D20000000, float 0x3FEB7B3520000000, float 0x3FEB811B20000000, float 0x3FEB870320000000, float 0x3FEB8CE920000000, float 0x3FEB92CF00000000, float 0x3FEB98B720000000, float 0x3FEB9E9D00000000, float 0x3FEBA48520000000, float 0x3FEBAA6B00000000, float 0x3FEBB05320000000, float 0x3FEBB63900000000, float 0x3FEBBC2120000000, float 0x3FEBC20700000000, float 0x3FEBC7EF20000000, float 0x3FEBCDD500000000, float 0x3FEBD3BD20000000, float 0x3FEBD9A300000000, float 0x3FEBDF8900000000, float 0x3FEBE57100000000, float 0x3FEBEB5700000000, float 0x3FEBF13F00000000, float 0x3FEBF72500000000, float 0x3FEBFD0D00000000, float 0x3FEC02F300000000, float 0x3FEC08DB00000000, float 0x3FEC0EC100000000, float 0x3FEC14A900000000, float 0x3FEC1A8F00000000, float 0x3FEC207700000000, float 0x3FEC265D00000000, float 0x3FEC2C42E0000000, float 0x3FEC322B00000000, float 0x3FEC3810E0000000, float 0x3FEC3DF900000000, float 0x3FEC43DEE0000000, float 0x3FEC49C700000000, float 0x3FEC4FACE0000000, float 0x3FEC559500000000, float 0x3FEC5B7AE0000000, float 0x3FEC616300000000, float 0x3FEC6748E0000000, float 0x3FEC6D3100000000, float 0x3FEC7316E0000000, float 0x3FEC78FCE0000000, float 0x3FEC7EE4E0000000, float 0x3FEC84CAE0000000, float 0x3FEC8AB2E0000000, float 0x3FEC9098E0000000, float 0x3FEC9680E0000000, float 0x3FEC9C66E0000000, float 0x3FECA24EE0000000, float 0x3FECA834E0000000, float 0x3FECAE1CE0000000, float 0x3FECB402E0000000, float 0x3FECB9EAE0000000, float 0x3FECBFD0E0000000, float 0x3FECC5B6C0000000, float 0x3FECCB9EC0000000, float 0x3FECD184C0000000, float 0x3FECD76CC0000000, float 0x3FECDD52C0000000, float 0x3FECE33AC0000000, float 0x3FECE920C0000000, float 0x3FECEF08C0000000, float 0x3FECF4EEC0000000, float 0x3FECFAD6C0000000, float 0x3FED00BCC0000000, float 0x3FED06A4C0000000, float 0x3FED0C8AC0000000, float 0x3FED1270C0000000, float 0x3FED1858C0000000, float 0x3FED1E3EA0000000, float 0x3FED2426C0000000, float 0x3FED2A0CA0000000, float 0x3FED2FF4C0000000, float 0x3FED35DAA0000000, float 0x3FED3BC2C0000000, float 0x3FED41A8A0000000, float 0x3FED4790C0000000, float 0x3FED4D76A0000000, float 0x3FED535EC0000000, float 0x3FED5944A0000000, float 0x3FED5F2AA0000000, float 0x3FED6512A0000000, float 0x3FED6AF8A0000000, float 0x3FED70E0A0000000, float 0x3FED76C6A0000000, float 0x3FED7CAEA0000000, float 0x3FED8294A0000000, float 0x3FED887CA0000000, float 0x3FED8E62A0000000, float 0x3FED944AA0000000, float 0x3FED9A30A0000000, float 0x3FEDA018A0000000, float 0x3FEDA5FEA0000000, float 0x3FEDABE480000000, float 0x3FEDB1CCA0000000, float 0x3FEDB7B280000000, float 0x3FEDBD9AA0000000, float 0x3FEDC38080000000, float 0x3FEDC968A0000000, float 0x3FEDCF4E80000000, float 0x3FEDD536A0000000, float 0x3FEDDB1C80000000, float 0x3FEDE104A0000000, float 0x3FEDE6EA80000000, float 0x3FEDECD080000000, float 0x3FEDF2B880000000, float 0x3FEDF89E80000000, float 0x3FEDFE8680000000, float 0x3FEE046C80000000, float 0x3FEE0A5480000000, float 0x3FEE103A80000000, float 0x3FEE162280000000, float 0x3FEE1C0880000000, float 0x3FEE21F080000000, float 0x3FEE27D680000000, float 0x3FEE2DBE80000000, float 0x3FEE33A480000000, float 0x3FEE398A60000000, float 0x3FEE3F7280000000, float 0x3FEE455860000000, float 0x3FEE4B4080000000, float 0x3FEE512660000000, float 0x3FEE570E60000000, float 0x3FEE5CF460000000, float 0x3FEE62DC60000000, float 0x3FEE68C260000000, float 0x3FEE6EAA60000000, float 0x3FEE749060000000, float 0x3FEE7A7860000000, float 0x3FEE805E60000000, float 0x3FEE864660000000, float 0x3FEE8C2C60000000, float 0x3FEE921260000000, float 0x3FEE97FA60000000, float 0x3FEE9DE060000000, float 0x3FEEA3C860000000, float 0x3FEEA9AE40000000, float 0x3FEEAF9660000000, float 0x3FEEB57C40000000, float 0x3FEEBB6460000000, float 0x3FEEC14A40000000, float 0x3FEEC73260000000, float 0x3FEECD1840000000, float 0x3FEED2FE40000000, float 0x3FEED8E640000000, float 0x3FEEDECC40000000, float 0x3FEEE4B440000000, float 0x3FEEEA9A40000000, float 0x3FEEF08240000000, float 0x3FEEF66840000000, float 0x3FEEFC5040000000, float 0x3FEF023640000000, float 0x3FEF081E40000000, float 0x3FEF0E0440000000, float 0x3FEF13EC40000000, float 0x3FEF19D240000000, float 0x3FEF1FB820000000, float 0x3FEF25A040000000, float 0x3FEF2B8620000000, float 0x3FEF316E40000000, float 0x3FEF375420000000, float 0x3FEF3D3C40000000, float 0x3FEF432220000000, float 0x3FEF490A40000000, float 0x3FEF4EF020000000, float 0x3FEF54D840000000, float 0x3FEF5ABE20000000, float 0x3FEF60A640000000, float 0x3FEF668C20000000, float 0x3FEF6C7220000000, float 0x3FEF725A20000000, float 0x3FEF784020000000, float 0x3FEF7E2820000000, float 0x3FEF840E20000000, float 0x3FEF89F620000000, float 0x3FEF8FDC20000000, float 0x3FEF95C420000000, float 0x3FEF9BAA20000000, float 0x3FEFA19220000000, float 0x3FEFA77820000000, float 0x3FEFAD6020000000, float 0x3FEFB34620000000, float 0x3FEFB92C00000000, float 0x3FEFBF1420000000, float 0x3FEFC4FA00000000, float 0x3FEFCAE220000000, float 0x3FEFD0C800000000, float 0x3FEFD6B000000000, float 0x3FEFDC9600000000, float 0x3FEFE27E00000000, float 0x3FEFE86400000000, float 0x3FEFEE4C00000000, float 0x3FEFF43200000000, float 0x3FEFFA1A00000000, float 1.000000e+00], align 16
@.gomp_critical_user_MagickCore_TransformRGBImage.var = common global [8 x i32] zeroinitializer, align 8
@.str.35 = private unnamed_addr constant [16 x i8] c"Transform/Image\00", align 1

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @RGBTransformImage(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca %struct._PrimaryInfo, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca %struct._MagickPixelPacket, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca ptr, align 8
  %20 = tail call i32 @__kmpc_global_thread_num(ptr nonnull @2)
  store ptr %0, ptr %3, align 8, !tbaa !6
  store i32 %1, ptr %4, align 4, !tbaa !10
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %9) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #4
  %21 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 59
  %22 = load i32, ptr %21, align 8, !tbaa !11
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %2
  %25 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %26 = tail call i32 (i32, ptr, ptr, i64, ptr, ...) @LogMagickEvent(i32 noundef 1, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 233, ptr noundef nonnull @.str.2, ptr noundef nonnull %25) #4
  br label %27

27:                                               ; preds = %24, %2
  store i32 1, ptr %7, align 4, !tbaa !10
  store i64 0, ptr %8, align 8, !tbaa !27
  %28 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  store ptr %28, ptr %6, align 8, !tbaa !6
  switch i32 %1, label %380 [
    i32 12, label %29
    i32 2, label %89
    i32 22, label %145
    i32 24, label %145
    i32 32, label %145
    i32 14, label %145
    i32 30, label %145
    i32 15, label %145
    i32 31, label %145
    i32 16, label %145
    i32 5, label %145
    i32 25, label %145
    i32 27, label %145
    i32 28, label %145
    i32 26, label %145
    i32 23, label %145
    i32 6, label %145
    i32 7, label %145
    i32 33, label %145
    i32 9, label %145
    i32 10, label %145
    i32 11, label %145
    i32 21, label %208
    i32 1, label %318
    i32 29, label %318
  ]

29:                                               ; preds = %27
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %13) #4
  %30 = load i32, ptr %0, align 8, !tbaa !28
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %32, label %38

32:                                               ; preds = %29
  %33 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %87, label %38

38:                                               ; preds = %35, %29
  %39 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %40 = load i32, ptr %39, align 4, !tbaa !29
  %41 = icmp eq i32 %40, 12
  br i1 %41, label %53, label %42

42:                                               ; preds = %38
  store i32 12, ptr %39, align 4, !tbaa !29
  %43 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %43, align 8, !tbaa !30
  %44 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %44, align 8, !tbaa !31
  %45 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %46 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %45, i32 noundef 0, i64 noundef 96) #4
  %47 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %48 = load i32, ptr %47, align 8, !tbaa !32
  store i32 2, ptr %43, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %45, align 8, !tbaa !33
  %49 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %49, align 8, !tbaa !33
  %50 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %50, align 8, !tbaa !33
  %51 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store i32 %48, ptr %47, align 8, !tbaa !32
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %87, label %53

53:                                               ; preds = %38, %42
  call void @GetMagickPixelPacket(ptr noundef nonnull %0, ptr noundef nonnull %13) #4
  %54 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store ptr %54, ptr %5, align 8, !tbaa !6
  %55 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %56 = load i64, ptr %55, align 8, !tbaa !34
  %57 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %58 = shl i64 %57, 5
  %59 = icmp ugt i64 %56, %58
  br i1 %59, label %60, label %68

60:                                               ; preds = %53
  %61 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %62 = icmp eq i32 %61, 3
  br i1 %62, label %68, label %63

63:                                               ; preds = %60
  %64 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %65 = icmp eq i32 %64, 3
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %72

68:                                               ; preds = %63, %60, %53
  %69 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %70 = icmp ult i64 %69, 2
  %71 = select i1 %70, i64 1, i64 2
  br label %72

72:                                               ; preds = %68, %66
  %73 = phi i64 [ %67, %66 ], [ %71, %68 ]
  %74 = trunc i64 %73 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %74)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @RGBTransformImage.omp_outlined, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %13)
  %75 = load ptr, ptr %5, align 8, !tbaa !6
  %76 = call ptr @DestroyCacheView(ptr noundef %75) #4
  store ptr %76, ptr %5, align 8, !tbaa !6
  %77 = load ptr, ptr %3, align 8, !tbaa !6
  %78 = getelementptr inbounds %struct._Image, ptr %77, i64 0, i32 6
  %79 = load i32, ptr %78, align 8, !tbaa !35
  %80 = icmp eq i32 %79, 0
  %81 = select i1 %80, i32 8, i32 9
  %82 = getelementptr inbounds %struct._Image, ptr %77, i64 0, i32 77
  store i32 %81, ptr %82, align 8, !tbaa !32
  %83 = call i32 @SetImageColorspace(ptr noundef %77, i32 noundef 12)
  %84 = icmp eq i32 %83, 0
  %85 = load i32, ptr %7, align 4
  %86 = select i1 %84, i32 0, i32 %85
  br label %87

87:                                               ; preds = %72, %42, %35, %32
  %88 = phi i32 [ 0, %32 ], [ 0, %35 ], [ 0, %42 ], [ %86, %72 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %13) #4
  br label %865

89:                                               ; preds = %27
  %90 = load i32, ptr %0, align 8, !tbaa !28
  %91 = icmp eq i32 %90, 2
  br i1 %91, label %92, label %98

92:                                               ; preds = %89
  %93 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %865, label %95

95:                                               ; preds = %92
  %96 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %865, label %98

98:                                               ; preds = %95, %89
  %99 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store ptr %99, ptr %5, align 8, !tbaa !6
  %100 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %101 = load i64, ptr %100, align 8, !tbaa !34
  %102 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %103 = shl i64 %102, 5
  %104 = icmp ugt i64 %101, %103
  br i1 %104, label %105, label %113

105:                                              ; preds = %98
  %106 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %107 = icmp eq i32 %106, 3
  br i1 %107, label %113, label %108

108:                                              ; preds = %105
  %109 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %110 = icmp eq i32 %109, 3
  br i1 %110, label %113, label %111

111:                                              ; preds = %108
  %112 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %117

113:                                              ; preds = %108, %105, %98
  %114 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %115 = icmp ult i64 %114, 2
  %116 = select i1 %115, i64 1, i64 2
  br label %117

117:                                              ; preds = %113, %111
  %118 = phi i64 [ %112, %111 ], [ %116, %113 ]
  %119 = trunc i64 %118 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %119)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 4, ptr nonnull @RGBTransformImage.omp_outlined.3, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6)
  %120 = load ptr, ptr %5, align 8, !tbaa !6
  %121 = call ptr @DestroyCacheView(ptr noundef %120) #4
  store ptr %121, ptr %5, align 8, !tbaa !6
  %122 = load ptr, ptr %3, align 8, !tbaa !6
  %123 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 1
  %124 = load i32, ptr %123, align 4, !tbaa !29
  %125 = icmp eq i32 %124, 2
  br i1 %125, label %141, label %126

126:                                              ; preds = %117
  store i32 2, ptr %123, align 4, !tbaa !29
  %127 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 17
  store i32 0, ptr %127, align 8, !tbaa !30
  %128 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %128, align 8, !tbaa !31
  %129 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 16
  %130 = call ptr @ResetMagickMemory(ptr noundef nonnull %129, i32 noundef 0, i64 noundef 96) #4
  %131 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 77
  %132 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 83
  %133 = load i32, ptr %132, align 8, !tbaa !36
  switch i32 %133, label %135 [
    i32 5, label %134
    i32 7, label %134
  ]

134:                                              ; preds = %126, %126
  store double 1.000000e+00, ptr %128, align 8, !tbaa !31
  br label %135

135:                                              ; preds = %126, %134
  %136 = getelementptr inbounds %struct._Image, ptr %122, i64 0, i32 58
  %137 = call i32 @SyncImagePixelCache(ptr noundef nonnull %122, ptr noundef nonnull %136) #4
  store i32 2, ptr %131, align 8, !tbaa !32
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %865, label %139

139:                                              ; preds = %135
  %140 = load ptr, ptr %3, align 8, !tbaa !6
  br label %141

141:                                              ; preds = %139, %117
  %142 = phi ptr [ %140, %139 ], [ %122, %117 ]
  %143 = getelementptr inbounds %struct._Image, ptr %142, i64 0, i32 77
  store i32 2, ptr %143, align 8, !tbaa !32
  %144 = load i32, ptr %7, align 4, !tbaa !10
  br label %865

145:                                              ; preds = %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27
  %146 = load i32, ptr %0, align 8, !tbaa !28
  %147 = icmp eq i32 %146, 2
  br i1 %147, label %148, label %154

148:                                              ; preds = %145
  %149 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %865, label %151

151:                                              ; preds = %148
  %152 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %865, label %154

154:                                              ; preds = %151, %145
  %155 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store ptr %155, ptr %5, align 8, !tbaa !6
  %156 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %157 = load i64, ptr %156, align 8, !tbaa !34
  %158 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %159 = shl i64 %158, 5
  %160 = icmp ugt i64 %157, %159
  br i1 %160, label %161, label %169

161:                                              ; preds = %154
  %162 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %163 = icmp eq i32 %162, 3
  br i1 %163, label %169, label %164

164:                                              ; preds = %161
  %165 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %166 = icmp eq i32 %165, 3
  br i1 %166, label %169, label %167

167:                                              ; preds = %164
  %168 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %173

169:                                              ; preds = %164, %161, %154
  %170 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %171 = icmp ult i64 %170, 2
  %172 = select i1 %171, i64 1, i64 2
  br label %173

173:                                              ; preds = %169, %167
  %174 = phi i64 [ %168, %167 ], [ %172, %169 ]
  %175 = trunc i64 %174 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %175)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @RGBTransformImage.omp_outlined.4, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %4)
  %176 = load ptr, ptr %5, align 8, !tbaa !6
  %177 = call ptr @DestroyCacheView(ptr noundef %176) #4
  store ptr %177, ptr %5, align 8, !tbaa !6
  %178 = load ptr, ptr %3, align 8, !tbaa !6
  %179 = load i32, ptr %4, align 4, !tbaa !10
  %180 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 1
  %181 = load i32, ptr %180, align 4, !tbaa !29
  %182 = icmp eq i32 %181, %179
  br i1 %182, label %183, label %185

183:                                              ; preds = %173
  %184 = load i32, ptr %7, align 4
  br label %865

185:                                              ; preds = %173
  store i32 %179, ptr %180, align 4, !tbaa !29
  %186 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 17
  store i32 0, ptr %186, align 8, !tbaa !30
  %187 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %187, align 8, !tbaa !31
  %188 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 16
  %189 = call ptr @ResetMagickMemory(ptr noundef nonnull %188, i32 noundef 0, i64 noundef 96) #4
  %190 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 77
  %191 = load i32, ptr %190, align 8, !tbaa !32
  switch i32 %179, label %197 [
    i32 19, label %192
    i32 17, label %192
    i32 2, label %192
    i32 29, label %196
    i32 6, label %196
    i32 1, label %196
  ]

192:                                              ; preds = %185, %185, %185
  %193 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 83
  %194 = load i32, ptr %193, align 8, !tbaa !36
  switch i32 %194, label %200 [
    i32 5, label %195
    i32 7, label %195
  ]

195:                                              ; preds = %192, %192
  store double 1.000000e+00, ptr %187, align 8, !tbaa !31
  br label %200

196:                                              ; preds = %185, %185, %185
  store double 1.000000e+00, ptr %187, align 8, !tbaa !31
  br label %200

197:                                              ; preds = %185
  store i32 2, ptr %186, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %188, align 8, !tbaa !33
  %198 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %198, align 8, !tbaa !33
  %199 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %199, align 8, !tbaa !33
  br label %200

200:                                              ; preds = %192, %195, %196, %197
  %201 = phi i32 [ %191, %196 ], [ %191, %197 ], [ 2, %192 ], [ 2, %195 ]
  %202 = getelementptr inbounds %struct._Image, ptr %178, i64 0, i32 58
  %203 = call i32 @SyncImagePixelCache(ptr noundef nonnull %178, ptr noundef nonnull %202) #4
  store i32 %201, ptr %190, align 8, !tbaa !32
  %204 = freeze i32 %203
  %205 = icmp eq i32 %204, 0
  %206 = load i32, ptr %7, align 4
  %207 = select i1 %205, i32 0, i32 %206
  br label %865

208:                                              ; preds = %27
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #4
  store double 0x3FE2D2D2D2D2D2D3, ptr %15, align 8, !tbaa !33
  store double 0x3FE2D2D2D2D2D2D3, ptr %17, align 8, !tbaa !33
  %209 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.5) #4
  %210 = icmp eq ptr %209, null
  br i1 %210, label %220, label %211

211:                                              ; preds = %208
  %212 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %209, ptr noundef null) #4
  %213 = fcmp fast olt double %212, 0.000000e+00
  %214 = select fast i1 %213, double -1.000000e+00, double 1.000000e+00
  %215 = fmul fast double %214, %212
  %216 = fcmp fast ult double %215, 1.000000e-15
  %217 = fdiv fast double 1.000000e+00, %212
  %218 = fmul fast double %214, 0x430C6BF52633FFFF
  %219 = select i1 %216, double %218, double %217
  store double %219, ptr %17, align 8, !tbaa !33
  br label %220

220:                                              ; preds = %211, %208
  %221 = phi double [ %219, %211 ], [ 0x3FE2D2D2D2D2D2D3, %208 ]
  store double 6.000000e-01, ptr %16, align 8, !tbaa !33
  %222 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.6) #4
  %223 = icmp eq ptr %222, null
  br i1 %223, label %227, label %224

224:                                              ; preds = %220
  %225 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %222, ptr noundef null) #4
  store double %225, ptr %16, align 8, !tbaa !33
  %226 = fmul fast double %225, 0x3FE2D2D2D2D2D2D3
  br label %227

227:                                              ; preds = %224, %220
  %228 = phi double [ %226, %224 ], [ 0x3FD6969696969697, %220 ]
  %229 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.7) #4
  %230 = icmp eq ptr %229, null
  br i1 %230, label %233, label %231

231:                                              ; preds = %227
  %232 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %229, ptr noundef null) #4
  br label %233

233:                                              ; preds = %231, %227
  %234 = phi double [ %232, %231 ], [ 9.500000e+01, %227 ]
  store double 6.850000e+02, ptr %18, align 8, !tbaa !33
  %235 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.8) #4
  %236 = icmp eq ptr %235, null
  br i1 %236, label %239, label %237

237:                                              ; preds = %233
  %238 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %235, ptr noundef null) #4
  store double %238, ptr %18, align 8, !tbaa !33
  br label %239

239:                                              ; preds = %237, %233
  %240 = phi double [ %238, %237 ], [ 6.850000e+02, %233 ]
  %241 = tail call dereferenceable_or_null(131072) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 2) #11
  store ptr %241, ptr %19, align 8, !tbaa !6
  %242 = icmp eq ptr %241, null
  br i1 %242, label %243, label %246

243:                                              ; preds = %239
  %244 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %245 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %28, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 602, i32 noundef 400, ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.10, ptr noundef nonnull %244) #4
  br label %316

246:                                              ; preds = %239
  %247 = fsub fast double %234, %240
  %248 = fmul fast double %247, 0x3F7B369690DEDC9D
  %249 = fmul fast double %248, %221
  %250 = fdiv fast double %249, %228
  %251 = tail call fast double @llvm.exp2.f64(double %250)
  store double %251, ptr %14, align 8, !tbaa !33
  %252 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %253 = and i64 %252, 576460752303423487
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %263

255:                                              ; preds = %246
  %256 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %257 = icmp eq i32 %256, 3
  br i1 %257, label %263, label %258

258:                                              ; preds = %255
  %259 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %260 = icmp eq i32 %259, 3
  br i1 %260, label %263, label %261

261:                                              ; preds = %258
  %262 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %267

263:                                              ; preds = %258, %255, %246
  %264 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %265 = icmp ult i64 %264, 2
  %266 = select i1 %265, i64 1, i64 2
  br label %267

267:                                              ; preds = %263, %261
  %268 = phi i64 [ %262, %261 ], [ %266, %263 ]
  %269 = trunc i64 %268 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %269)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 6, ptr nonnull @RGBTransformImage.omp_outlined.11, ptr nonnull %19, ptr nonnull %18, ptr nonnull %14, ptr nonnull %17, ptr nonnull %15, ptr nonnull %16)
  %270 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store ptr %270, ptr %5, align 8, !tbaa !6
  %271 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %272 = load i64, ptr %271, align 8, !tbaa !34
  %273 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %274 = shl i64 %273, 5
  %275 = icmp ugt i64 %272, %274
  br i1 %275, label %276, label %284

276:                                              ; preds = %267
  %277 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %278 = icmp eq i32 %277, 3
  br i1 %278, label %284, label %279

279:                                              ; preds = %276
  %280 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %281 = icmp eq i32 %280, 3
  br i1 %281, label %284, label %282

282:                                              ; preds = %279
  %283 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %288

284:                                              ; preds = %279, %276, %267
  %285 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %286 = icmp ult i64 %285, 2
  %287 = select i1 %286, i64 1, i64 2
  br label %288

288:                                              ; preds = %284, %282
  %289 = phi i64 [ %283, %282 ], [ %287, %284 ]
  %290 = trunc i64 %289 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %290)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @RGBTransformImage.omp_outlined.12, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %19)
  %291 = load ptr, ptr %5, align 8, !tbaa !6
  %292 = call ptr @DestroyCacheView(ptr noundef %291) #4
  store ptr %292, ptr %5, align 8, !tbaa !6
  %293 = load ptr, ptr %19, align 8, !tbaa !6
  %294 = call ptr @RelinquishMagickMemory(ptr noundef %293) #4
  store ptr %294, ptr %19, align 8, !tbaa !6
  %295 = load ptr, ptr %3, align 8, !tbaa !6
  %296 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 1
  %297 = load i32, ptr %296, align 4, !tbaa !29
  %298 = icmp eq i32 %297, 21
  br i1 %298, label %299, label %301

299:                                              ; preds = %288
  %300 = load i32, ptr %7, align 4
  br label %316

301:                                              ; preds = %288
  store i32 21, ptr %296, align 4, !tbaa !29
  %302 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 17
  store i32 0, ptr %302, align 8, !tbaa !30
  %303 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %303, align 8, !tbaa !31
  %304 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 16
  %305 = call ptr @ResetMagickMemory(ptr noundef nonnull %304, i32 noundef 0, i64 noundef 96) #4
  %306 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 77
  %307 = load i32, ptr %306, align 8, !tbaa !32
  store i32 2, ptr %302, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %304, align 8, !tbaa !33
  %308 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %308, align 8, !tbaa !33
  %309 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %309, align 8, !tbaa !33
  %310 = getelementptr inbounds %struct._Image, ptr %295, i64 0, i32 58
  %311 = call i32 @SyncImagePixelCache(ptr noundef nonnull %295, ptr noundef nonnull %310) #4
  store i32 %307, ptr %306, align 8, !tbaa !32
  %312 = freeze i32 %311
  %313 = icmp eq i32 %312, 0
  %314 = load i32, ptr %7, align 4
  %315 = select i1 %313, i32 0, i32 %314
  br label %316

316:                                              ; preds = %301, %299, %243
  %317 = phi i32 [ 0, %243 ], [ %300, %299 ], [ %315, %301 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #4
  br label %865

318:                                              ; preds = %27, %27
  %319 = load i32, ptr %0, align 8, !tbaa !28
  %320 = icmp eq i32 %319, 2
  br i1 %320, label %321, label %327

321:                                              ; preds = %318
  %322 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %865, label %324

324:                                              ; preds = %321
  %325 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %865, label %327

327:                                              ; preds = %324, %318
  %328 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store ptr %328, ptr %5, align 8, !tbaa !6
  %329 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %330 = load i64, ptr %329, align 8, !tbaa !34
  %331 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %332 = shl i64 %331, 5
  %333 = icmp ugt i64 %330, %332
  br i1 %333, label %334, label %342

334:                                              ; preds = %327
  %335 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %336 = icmp eq i32 %335, 3
  br i1 %336, label %342, label %337

337:                                              ; preds = %334
  %338 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %339 = icmp eq i32 %338, 3
  br i1 %339, label %342, label %340

340:                                              ; preds = %337
  %341 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %346

342:                                              ; preds = %337, %334, %327
  %343 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %344 = icmp ult i64 %343, 2
  %345 = select i1 %344, i64 1, i64 2
  br label %346

346:                                              ; preds = %342, %340
  %347 = phi i64 [ %341, %340 ], [ %345, %342 ]
  %348 = trunc i64 %347 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %348)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 4, ptr nonnull @RGBTransformImage.omp_outlined.13, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6)
  %349 = load ptr, ptr %5, align 8, !tbaa !6
  %350 = call ptr @DestroyCacheView(ptr noundef %349) #4
  store ptr %350, ptr %5, align 8, !tbaa !6
  %351 = load ptr, ptr %3, align 8, !tbaa !6
  %352 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 1
  %353 = load i32, ptr %352, align 4, !tbaa !29
  %354 = icmp eq i32 %353, %1
  br i1 %354, label %355, label %357

355:                                              ; preds = %346
  %356 = load i32, ptr %7, align 4
  br label %865

357:                                              ; preds = %346
  store i32 %1, ptr %352, align 4, !tbaa !29
  %358 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 17
  store i32 0, ptr %358, align 8, !tbaa !30
  %359 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %359, align 8, !tbaa !31
  %360 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 16
  %361 = call ptr @ResetMagickMemory(ptr noundef nonnull %360, i32 noundef 0, i64 noundef 96) #4
  %362 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 77
  %363 = load i32, ptr %362, align 8, !tbaa !32
  switch i32 %1, label %369 [
    i32 19, label %364
    i32 17, label %364
    i32 2, label %364
    i32 29, label %368
    i32 6, label %368
    i32 1, label %368
  ]

364:                                              ; preds = %357, %357, %357
  %365 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 83
  %366 = load i32, ptr %365, align 8, !tbaa !36
  switch i32 %366, label %372 [
    i32 5, label %367
    i32 7, label %367
  ]

367:                                              ; preds = %364, %364
  store double 1.000000e+00, ptr %359, align 8, !tbaa !31
  br label %372

368:                                              ; preds = %357, %357, %357
  store double 1.000000e+00, ptr %359, align 8, !tbaa !31
  br label %372

369:                                              ; preds = %357
  store i32 2, ptr %358, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %360, align 8, !tbaa !33
  %370 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %370, align 8, !tbaa !33
  %371 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %371, align 8, !tbaa !33
  br label %372

372:                                              ; preds = %364, %367, %368, %369
  %373 = phi i32 [ %363, %368 ], [ %363, %369 ], [ 2, %364 ], [ 2, %367 ]
  %374 = getelementptr inbounds %struct._Image, ptr %351, i64 0, i32 58
  %375 = call i32 @SyncImagePixelCache(ptr noundef nonnull %351, ptr noundef nonnull %374) #4
  store i32 %373, ptr %362, align 8, !tbaa !32
  %376 = freeze i32 %375
  %377 = icmp eq i32 %376, 0
  %378 = load i32, ptr %7, align 4
  %379 = select i1 %377, i32 0, i32 %378
  br label %865

380:                                              ; preds = %27
  %381 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #11
  store ptr %381, ptr %10, align 8, !tbaa !6
  %382 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #11
  store ptr %382, ptr %11, align 8, !tbaa !6
  %383 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #11
  store ptr %383, ptr %12, align 8, !tbaa !6
  %384 = icmp eq ptr %381, null
  %385 = icmp eq ptr %382, null
  %386 = select i1 %384, i1 true, i1 %385
  %387 = icmp eq ptr %383, null
  %388 = select i1 %386, i1 true, i1 %387
  br i1 %388, label %389, label %392

389:                                              ; preds = %380
  %390 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %391 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %28, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 747, i32 noundef 400, ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.10, ptr noundef nonnull %390) #4
  br label %865

392:                                              ; preds = %380
  %393 = call ptr @ResetMagickMemory(ptr noundef nonnull %9, i32 noundef 0, i64 noundef 24) #4
  switch i32 %1, label %693 [
    i32 4, label %394
    i32 17, label %712
    i32 18, label %414
    i32 19, label %434
    i32 20, label %435
    i32 8, label %455
  ]

394:                                              ; preds = %392
  %395 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 1
  store <2 x double> <double 3.276800e+04, double 3.276800e+04>, ptr %395, align 8, !tbaa !33
  %396 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %397 = and i64 %396, 576460752303423487
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %399, label %407

399:                                              ; preds = %394
  %400 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %401 = icmp eq i32 %400, 3
  br i1 %401, label %407, label %402

402:                                              ; preds = %399
  %403 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %404 = icmp eq i32 %403, 3
  br i1 %404, label %407, label %405

405:                                              ; preds = %402
  %406 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %411

407:                                              ; preds = %402, %399, %394
  %408 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %409 = icmp ult i64 %408, 2
  %410 = select i1 %409, i64 1, i64 2
  br label %411

411:                                              ; preds = %407, %405
  %412 = phi i64 [ %406, %405 ], [ %410, %407 ]
  %413 = trunc i64 %412 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %413)
  br label %712

414:                                              ; preds = %392
  %415 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 1
  store <2 x double> <double 3.276800e+04, double 3.276800e+04>, ptr %415, align 8, !tbaa !33
  %416 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %417 = and i64 %416, 576460752303423487
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %419, label %427

419:                                              ; preds = %414
  %420 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %421 = icmp eq i32 %420, 3
  br i1 %421, label %427, label %422

422:                                              ; preds = %419
  %423 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %424 = icmp eq i32 %423, 3
  br i1 %424, label %427, label %425

425:                                              ; preds = %422
  %426 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %431

427:                                              ; preds = %422, %419, %414
  %428 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %429 = icmp ult i64 %428, 2
  %430 = select i1 %429, i64 1, i64 2
  br label %431

431:                                              ; preds = %427, %425
  %432 = phi i64 [ %426, %425 ], [ %430, %427 ]
  %433 = trunc i64 %432 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %433)
  br label %712

434:                                              ; preds = %392
  br label %712

435:                                              ; preds = %392
  %436 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 1
  store <2 x double> <double 3.276800e+04, double 3.276800e+04>, ptr %436, align 8, !tbaa !33
  %437 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %438 = and i64 %437, 576460752303423487
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %448

440:                                              ; preds = %435
  %441 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %442 = icmp eq i32 %441, 3
  br i1 %442, label %448, label %443

443:                                              ; preds = %440
  %444 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %445 = icmp eq i32 %444, 3
  br i1 %445, label %448, label %446

446:                                              ; preds = %443
  %447 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %452

448:                                              ; preds = %443, %440, %435
  %449 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %450 = icmp ult i64 %449, 2
  %451 = select i1 %450, i64 1, i64 2
  br label %452

452:                                              ; preds = %448, %446
  %453 = phi i64 [ %447, %446 ], [ %451, %448 ]
  %454 = trunc i64 %453 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %454)
  br label %712

455:                                              ; preds = %392
  %456 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 1
  store <2 x double> <double 4.009200e+04, double 3.520900e+04>, ptr %456, align 8, !tbaa !33
  %457 = load ptr, ptr %10, align 8, !tbaa !6
  %458 = load ptr, ptr %11, align 8, !tbaa !6
  %459 = load ptr, ptr %12, align 8, !tbaa !6
  %460 = getelementptr i8, ptr %457, i64 14152
  %461 = getelementptr i8, ptr %458, i64 14152
  %462 = getelementptr i8, ptr %459, i64 14152
  %463 = getelementptr i8, ptr %457, i64 4
  %464 = getelementptr i8, ptr %457, i64 14156
  %465 = getelementptr i8, ptr %458, i64 4
  %466 = getelementptr i8, ptr %458, i64 14156
  %467 = getelementptr i8, ptr %459, i64 4
  %468 = getelementptr i8, ptr %459, i64 14156
  %469 = getelementptr i8, ptr %457, i64 8
  %470 = getelementptr i8, ptr %457, i64 14160
  %471 = getelementptr i8, ptr %458, i64 8
  %472 = getelementptr i8, ptr %458, i64 14160
  %473 = getelementptr i8, ptr %459, i64 8
  %474 = getelementptr i8, ptr %459, i64 14160
  %475 = icmp ult ptr %457, %461
  %476 = icmp ult ptr %458, %460
  %477 = and i1 %475, %476
  %478 = icmp ult ptr %457, %462
  %479 = icmp ult ptr %459, %460
  %480 = and i1 %478, %479
  %481 = or i1 %477, %480
  %482 = icmp ult ptr %458, %462
  %483 = icmp ult ptr %459, %461
  %484 = and i1 %482, %483
  %485 = or i1 %481, %484
  %486 = icmp ult ptr %463, %466
  %487 = icmp ult ptr %465, %464
  %488 = and i1 %486, %487
  %489 = or i1 %485, %488
  %490 = icmp ult ptr %463, %468
  %491 = icmp ult ptr %467, %464
  %492 = and i1 %490, %491
  %493 = or i1 %489, %492
  %494 = icmp ult ptr %465, %468
  %495 = icmp ult ptr %467, %466
  %496 = and i1 %494, %495
  %497 = or i1 %493, %496
  %498 = icmp ult ptr %469, %472
  %499 = icmp ult ptr %471, %470
  %500 = and i1 %498, %499
  %501 = or i1 %497, %500
  %502 = icmp ult ptr %469, %474
  %503 = icmp ult ptr %473, %470
  %504 = and i1 %502, %503
  %505 = or i1 %501, %504
  %506 = icmp ult ptr %471, %474
  %507 = icmp ult ptr %473, %472
  %508 = and i1 %506, %507
  %509 = or i1 %505, %508
  br i1 %509, label %547, label %510

510:                                              ; preds = %455, %510
  %511 = phi i64 [ %544, %510 ], [ 0, %455 ]
  %512 = phi <4 x i64> [ %545, %510 ], [ <i64 0, i64 1, i64 2, i64 3>, %455 ]
  %513 = sitofp <4 x i64> %512 to <4 x double>
  %514 = fmul fast <4 x double> %513, <double 0x3F703A791220C84F, double 0x3F703A791220C84F, double 0x3F703A791220C84F, double 0x3F703A791220C84F>
  %515 = fptrunc <4 x double> %514 to <4 x float>
  %516 = fmul fast <4 x double> %513, <double 0x3F7FDC1B10C0C977, double 0x3F7FDC1B10C0C977, double 0x3F7FDC1B10C0C977, double 0x3F7FDC1B10C0C977>
  %517 = fptrunc <4 x double> %516 to <4 x float>
  %518 = fmul fast <4 x double> %513, <double 0x3F58BFEB287D572B, double 0x3F58BFEB287D572B, double 0x3F58BFEB287D572B, double 0x3F58BFEB287D572B>
  %519 = fptrunc <4 x double> %518 to <4 x float>
  %520 = fmul fast <4 x double> %513, <double 0xBF63E0FD926A0493, double 0xBF63E0FD926A0493, double 0xBF63E0FD926A0493, double 0xBF63E0FD926A0493>
  %521 = fptrunc <4 x double> %520 to <4 x float>
  %522 = fmul fast <4 x double> %513, <double 0xBF7383615CC71ABE, double 0xBF7383615CC71ABE, double 0xBF7383615CC71ABE, double 0xBF7383615CC71ABE>
  %523 = fptrunc <4 x double> %522 to <4 x float>
  %524 = fmul fast <4 x double> %513, <double 0x3F7D73E025FC1D07, double 0x3F7D73E025FC1D07, double 0x3F7D73E025FC1D07, double 0x3F7D73E025FC1D07>
  %525 = fptrunc <4 x double> %524 to <4 x float>
  %526 = fmul fast <4 x double> %513, <double 0x3F7C5FC1981C824B, double 0x3F7C5FC1981C824B, double 0x3F7C5FC1981C824B, double 0x3F7C5FC1981C824B>
  %527 = fptrunc <4 x double> %526 to <4 x float>
  %528 = getelementptr inbounds %struct._TransformPacket, ptr %457, i64 %511
  %529 = shufflevector <4 x float> %515, <4 x float> %521, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %530 = shufflevector <4 x float> %527, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %531 = shufflevector <8 x float> %529, <8 x float> %530, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %531, ptr %528, align 4, !tbaa !37
  %532 = fmul fast <4 x double> %513, <double 0xBF77C27D39FCD933, double 0xBF77C27D39FCD933, double 0xBF77C27D39FCD933, double 0xBF77C27D39FCD933>
  %533 = fptrunc <4 x double> %532 to <4 x float>
  %534 = getelementptr inbounds %struct._TransformPacket, ptr %458, i64 %511
  %535 = shufflevector <4 x float> %517, <4 x float> %523, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %536 = shufflevector <4 x float> %533, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %537 = shufflevector <8 x float> %535, <8 x float> %536, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %537, ptr %534, align 4, !tbaa !37
  %538 = fmul fast <4 x double> %513, <double 0xBF527511787EA45E, double 0xBF527511787EA45E, double 0xBF527511787EA45E, double 0xBF527511787EA45E>
  %539 = fptrunc <4 x double> %538 to <4 x float>
  %540 = getelementptr inbounds %struct._TransformPacket, ptr %459, i64 %511
  %541 = shufflevector <4 x float> %519, <4 x float> %525, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %542 = shufflevector <4 x float> %539, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %543 = shufflevector <8 x float> %541, <8 x float> %542, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %543, ptr %540, align 4, !tbaa !37
  %544 = add nuw i64 %511, 4
  %545 = add <4 x i64> %512, <i64 4, i64 4, i64 4, i64 4>
  %546 = icmp eq i64 %544, 1180
  br i1 %546, label %572, label %510, !llvm.loop !39

547:                                              ; preds = %455, %547
  %548 = phi i64 [ %570, %547 ], [ 0, %455 ]
  %549 = sitofp i64 %548 to double
  %550 = getelementptr inbounds %struct._TransformPacket, ptr %457, i64 %548
  %551 = getelementptr inbounds %struct._TransformPacket, ptr %458, i64 %548
  %552 = getelementptr inbounds %struct._TransformPacket, ptr %459, i64 %548
  %553 = insertelement <2 x double> poison, double %549, i64 0
  %554 = shufflevector <2 x double> %553, <2 x double> poison, <2 x i32> zeroinitializer
  %555 = fmul fast <2 x double> %554, <double 0x3F703A791220C84F, double 0xBF63E0FD926A0493>
  %556 = fptrunc <2 x double> %555 to <2 x float>
  store <2 x float> %556, ptr %550, align 4, !tbaa !37
  %557 = fmul fast <2 x double> %554, <double 0x3F7FDC1B10C0C977, double 0xBF7383615CC71ABE>
  %558 = fptrunc <2 x double> %557 to <2 x float>
  store <2 x float> %558, ptr %551, align 4, !tbaa !37
  %559 = fmul fast <2 x double> %554, <double 0x3F58BFEB287D572B, double 0x3F7D73E025FC1D07>
  %560 = fptrunc <2 x double> %559 to <2 x float>
  store <2 x float> %560, ptr %552, align 4, !tbaa !37
  %561 = fmul fast double %549, 0x3F7C5FC1981C824B
  %562 = fptrunc double %561 to float
  %563 = getelementptr inbounds %struct._TransformPacket, ptr %457, i64 %548, i32 2
  store float %562, ptr %563, align 4, !tbaa !43
  %564 = fmul fast double %549, 0xBF77C27D39FCD933
  %565 = fptrunc double %564 to float
  %566 = getelementptr inbounds %struct._TransformPacket, ptr %458, i64 %548, i32 2
  store float %565, ptr %566, align 4, !tbaa !43
  %567 = fmul fast double %549, 0xBF527511787EA45E
  %568 = fptrunc double %567 to float
  %569 = getelementptr inbounds %struct._TransformPacket, ptr %459, i64 %548, i32 2
  store float %568, ptr %569, align 4, !tbaa !43
  %570 = add nuw nsw i64 %548, 1
  %571 = icmp eq i64 %570, 1180
  br i1 %571, label %572, label %547, !llvm.loop !45

572:                                              ; preds = %510, %547
  %573 = getelementptr i8, ptr %457, i64 14160
  %574 = getelementptr i8, ptr %457, i64 786424
  %575 = getelementptr i8, ptr %458, i64 14160
  %576 = getelementptr i8, ptr %458, i64 786424
  %577 = getelementptr i8, ptr %459, i64 14160
  %578 = getelementptr i8, ptr %459, i64 786424
  %579 = getelementptr i8, ptr %457, i64 14164
  %580 = getelementptr i8, ptr %457, i64 786428
  %581 = getelementptr i8, ptr %458, i64 14164
  %582 = getelementptr i8, ptr %458, i64 786428
  %583 = getelementptr i8, ptr %459, i64 14164
  %584 = getelementptr i8, ptr %459, i64 786428
  %585 = getelementptr i8, ptr %457, i64 14168
  %586 = getelementptr i8, ptr %457, i64 786432
  %587 = getelementptr i8, ptr %458, i64 14168
  %588 = getelementptr i8, ptr %458, i64 786432
  %589 = getelementptr i8, ptr %459, i64 14168
  %590 = getelementptr i8, ptr %459, i64 786432
  %591 = icmp ult ptr %573, %576
  %592 = icmp ult ptr %575, %574
  %593 = and i1 %591, %592
  %594 = icmp ult ptr %573, %578
  %595 = icmp ult ptr %577, %574
  %596 = and i1 %594, %595
  %597 = or i1 %593, %596
  %598 = icmp ult ptr %575, %578
  %599 = icmp ult ptr %577, %576
  %600 = and i1 %598, %599
  %601 = or i1 %597, %600
  %602 = icmp ult ptr %579, %582
  %603 = icmp ult ptr %581, %580
  %604 = and i1 %602, %603
  %605 = or i1 %601, %604
  %606 = icmp ult ptr %579, %584
  %607 = icmp ult ptr %583, %580
  %608 = and i1 %606, %607
  %609 = or i1 %605, %608
  %610 = icmp ult ptr %581, %584
  %611 = icmp ult ptr %583, %582
  %612 = and i1 %610, %611
  %613 = or i1 %609, %612
  %614 = icmp ult ptr %585, %588
  %615 = icmp ult ptr %587, %586
  %616 = and i1 %614, %615
  %617 = or i1 %613, %616
  %618 = icmp ult ptr %585, %590
  %619 = icmp ult ptr %589, %586
  %620 = and i1 %618, %619
  %621 = or i1 %617, %620
  %622 = icmp ult ptr %587, %590
  %623 = icmp ult ptr %589, %588
  %624 = and i1 %622, %623
  %625 = or i1 %621, %624
  br i1 %625, label %666, label %626

626:                                              ; preds = %572, %626
  %627 = phi i64 [ %663, %626 ], [ 0, %572 ]
  %628 = phi <4 x i64> [ %664, %626 ], [ <i64 1180, i64 1181, i64 1182, i64 1183>, %572 ]
  %629 = add i64 %627, 1180
  %630 = sitofp <4 x i64> %628 to <4 x double>
  %631 = fmul fast <4 x double> %630, <double 1.099000e+00, double 1.099000e+00, double 1.099000e+00, double 1.099000e+00>
  %632 = fadd fast <4 x double> %631, <double -9.900000e-02, double -9.900000e-02, double -9.900000e-02, double -9.900000e-02>
  %633 = fmul fast <4 x double> %632, <double 0x3FCC2CA06A2394A5, double 0x3FCC2CA06A2394A5, double 0x3FCC2CA06A2394A5, double 0x3FCC2CA06A2394A5>
  %634 = fptrunc <4 x double> %633 to <4 x float>
  %635 = fmul fast <4 x double> %632, <double 0x3FDBA7F3F0520438, double 0x3FDBA7F3F0520438, double 0x3FDBA7F3F0520438, double 0x3FDBA7F3F0520438>
  %636 = fptrunc <4 x double> %635 to <4 x float>
  %637 = fmul fast <4 x double> %632, <double 0x3FB57BEDE87B0655, double 0x3FB57BEDE87B0655, double 0x3FB57BEDE87B0655, double 0x3FB57BEDE87B0655>
  %638 = fptrunc <4 x double> %637 to <4 x float>
  %639 = fmul fast <4 x double> %632, <double 0xBFC14186C7FC0787, double 0xBFC14186C7FC0787, double 0xBFC14186C7FC0787, double 0xBFC14186C7FC0787>
  %640 = fptrunc <4 x double> %639 to <4 x float>
  %641 = fmul fast <4 x double> %632, <double 0xBFD0F0448417801C, double 0xBFD0F0448417801C, double 0xBFD0F0448417801C, double 0xBFD0F0448417801C>
  %642 = fptrunc <4 x double> %641 to <4 x float>
  %643 = fmul fast <4 x double> %632, <double 0x3FD99107E81583DF, double 0x3FD99107E81583DF, double 0x3FD99107E81583DF, double 0x3FD99107E81583DF>
  %644 = fptrunc <4 x double> %643 to <4 x float>
  %645 = fmul fast <4 x double> %632, <double 0x3FD8A1580CEE14A9, double 0x3FD8A1580CEE14A9, double 0x3FD8A1580CEE14A9, double 0x3FD8A1580CEE14A9>
  %646 = fptrunc <4 x double> %645 to <4 x float>
  %647 = getelementptr inbounds %struct._TransformPacket, ptr %457, i64 %629
  %648 = shufflevector <4 x float> %634, <4 x float> %640, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %649 = shufflevector <4 x float> %646, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %650 = shufflevector <8 x float> %648, <8 x float> %649, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %650, ptr %647, align 4, !tbaa !37
  %651 = fmul fast <4 x double> %632, <double 0xBFD49FF042562736, double 0xBFD49FF042562736, double 0xBFD49FF042562736, double 0xBFD49FF042562736>
  %652 = fptrunc <4 x double> %651 to <4 x float>
  %653 = getelementptr inbounds %struct._TransformPacket, ptr %458, i64 %629
  %654 = shufflevector <4 x float> %636, <4 x float> %642, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %655 = shufflevector <4 x float> %652, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %656 = shufflevector <8 x float> %654, <8 x float> %655, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %656, ptr %653, align 4, !tbaa !37
  %657 = fmul fast <4 x double> %632, <double 0xBFB0059F2A5FB5CB, double 0xBFB0059F2A5FB5CB, double 0xBFB0059F2A5FB5CB, double 0xBFB0059F2A5FB5CB>
  %658 = fptrunc <4 x double> %657 to <4 x float>
  %659 = getelementptr inbounds %struct._TransformPacket, ptr %459, i64 %629
  %660 = shufflevector <4 x float> %638, <4 x float> %644, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %661 = shufflevector <4 x float> %658, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %662 = shufflevector <8 x float> %660, <8 x float> %661, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %662, ptr %659, align 4, !tbaa !37
  %663 = add nuw i64 %627, 4
  %664 = add <4 x i64> %628, <i64 4, i64 4, i64 4, i64 4>
  %665 = icmp eq i64 %663, 64356
  br i1 %665, label %714, label %626, !llvm.loop !46

666:                                              ; preds = %572, %666
  %667 = phi i64 [ %691, %666 ], [ 1180, %572 ]
  %668 = sitofp i64 %667 to double
  %669 = fmul fast double %668, 1.099000e+00
  %670 = fadd fast double %669, -9.900000e-02
  %671 = getelementptr inbounds %struct._TransformPacket, ptr %457, i64 %667
  %672 = getelementptr inbounds %struct._TransformPacket, ptr %458, i64 %667
  %673 = getelementptr inbounds %struct._TransformPacket, ptr %459, i64 %667
  %674 = insertelement <2 x double> poison, double %670, i64 0
  %675 = shufflevector <2 x double> %674, <2 x double> poison, <2 x i32> zeroinitializer
  %676 = fmul fast <2 x double> %675, <double 0x3FCC2CA06A2394A5, double 0xBFC14186C7FC0787>
  %677 = fptrunc <2 x double> %676 to <2 x float>
  store <2 x float> %677, ptr %671, align 4, !tbaa !37
  %678 = fmul fast <2 x double> %675, <double 0x3FDBA7F3F0520438, double 0xBFD0F0448417801C>
  %679 = fptrunc <2 x double> %678 to <2 x float>
  store <2 x float> %679, ptr %672, align 4, !tbaa !37
  %680 = fmul fast <2 x double> %675, <double 0x3FB57BEDE87B0655, double 0x3FD99107E81583DF>
  %681 = fptrunc <2 x double> %680 to <2 x float>
  store <2 x float> %681, ptr %673, align 4, !tbaa !37
  %682 = fmul fast double %670, 0x3FD8A1580CEE14A9
  %683 = fptrunc double %682 to float
  %684 = getelementptr inbounds %struct._TransformPacket, ptr %457, i64 %667, i32 2
  store float %683, ptr %684, align 4, !tbaa !43
  %685 = fmul fast double %670, 0xBFD49FF042562736
  %686 = fptrunc double %685 to float
  %687 = getelementptr inbounds %struct._TransformPacket, ptr %458, i64 %667, i32 2
  store float %686, ptr %687, align 4, !tbaa !43
  %688 = fmul fast double %670, 0xBFB0059F2A5FB5CB
  %689 = fptrunc double %688 to float
  %690 = getelementptr inbounds %struct._TransformPacket, ptr %459, i64 %667, i32 2
  store float %689, ptr %690, align 4, !tbaa !43
  %691 = add nuw nsw i64 %667, 1
  %692 = icmp eq i64 %691, 65536
  br i1 %692, label %714, label %666, !llvm.loop !47

693:                                              ; preds = %392
  %694 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %695 = and i64 %694, 576460752303423487
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %697, label %705

697:                                              ; preds = %693
  %698 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %699 = icmp eq i32 %698, 3
  br i1 %699, label %705, label %700

700:                                              ; preds = %697
  %701 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %702 = icmp eq i32 %701, 3
  br i1 %702, label %705, label %703

703:                                              ; preds = %700
  %704 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %709

705:                                              ; preds = %700, %697, %693
  %706 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %707 = icmp ult i64 %706, 2
  %708 = select i1 %707, i64 1, i64 2
  br label %709

709:                                              ; preds = %705, %703
  %710 = phi i64 [ %704, %703 ], [ %708, %705 ]
  %711 = trunc i64 %710 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %711)
  br label %712

712:                                              ; preds = %392, %411, %431, %434, %452, %709
  %713 = phi ptr [ @RGBTransformImage.omp_outlined.19, %709 ], [ @RGBTransformImage.omp_outlined.18, %452 ], [ @RGBTransformImage.omp_outlined.17, %434 ], [ @RGBTransformImage.omp_outlined.16, %431 ], [ @RGBTransformImage.omp_outlined.14, %411 ], [ @RGBTransformImage.omp_outlined.15, %392 ]
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 3, ptr nonnull %713, ptr nonnull %10, ptr nonnull %11, ptr nonnull %12)
  br label %714

714:                                              ; preds = %626, %666, %712
  %715 = load i32, ptr %0, align 8, !tbaa !28
  %716 = icmp eq i32 %715, 2
  br i1 %716, label %717, label %732

717:                                              ; preds = %714
  %718 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 10
  %719 = load i64, ptr %718, align 8, !tbaa !48
  %720 = icmp sgt i64 %719, 0
  br i1 %720, label %721, label %850

721:                                              ; preds = %717
  %722 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 11
  %723 = load ptr, ptr %722, align 8, !tbaa !49
  %724 = load ptr, ptr %10, align 8, !tbaa !6
  %725 = load ptr, ptr %11, align 8, !tbaa !6
  %726 = load ptr, ptr %12, align 8, !tbaa !6
  %727 = load double, ptr %9, align 8, !tbaa !50
  %728 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 1
  %729 = load double, ptr %728, align 8, !tbaa !51
  %730 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 2
  %731 = load double, ptr %730, align 8, !tbaa !52
  br label %756

732:                                              ; preds = %714
  %733 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %28) #4
  store ptr %733, ptr %5, align 8, !tbaa !6
  %734 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %735 = load i64, ptr %734, align 8, !tbaa !34
  %736 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %737 = shl i64 %736, 5
  %738 = icmp ugt i64 %735, %737
  br i1 %738, label %739, label %747

739:                                              ; preds = %732
  %740 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %741 = icmp eq i32 %740, 3
  br i1 %741, label %747, label %742

742:                                              ; preds = %739
  %743 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %744 = icmp eq i32 %743, 3
  br i1 %744, label %747, label %745

745:                                              ; preds = %742
  %746 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %751

747:                                              ; preds = %742, %739, %732
  %748 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %749 = icmp ult i64 %748, 2
  %750 = select i1 %749, i64 1, i64 2
  br label %751

751:                                              ; preds = %747, %745
  %752 = phi i64 [ %746, %745 ], [ %750, %747 ]
  %753 = trunc i64 %752 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %20, i32 %753)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 9, ptr nonnull @RGBTransformImage.omp_outlined.20, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %10, ptr nonnull %11, ptr nonnull %12, ptr nonnull %9, ptr nonnull %8)
  %754 = load ptr, ptr %5, align 8, !tbaa !6
  %755 = call ptr @DestroyCacheView(ptr noundef %754) #4
  store ptr %755, ptr %5, align 8, !tbaa !6
  br label %852

756:                                              ; preds = %721, %846
  %757 = phi i64 [ 0, %721 ], [ %848, %846 ]
  %758 = getelementptr inbounds %struct._PixelPacket, ptr %723, i64 %757, i32 2
  %759 = load i16, ptr %758, align 2, !tbaa !53
  switch i16 %759, label %760 [
    i16 0, label %765
    i16 -1, label %764
  ]

760:                                              ; preds = %756
  %761 = uitofp i16 %759 to float
  %762 = fadd fast float %761, 5.000000e-01
  %763 = fptoui float %762 to i16
  br label %765

764:                                              ; preds = %756
  br label %765

765:                                              ; preds = %756, %764, %760
  %766 = phi i16 [ %763, %760 ], [ %759, %756 ], [ -1, %764 ]
  %767 = zext i16 %766 to i64
  %768 = getelementptr inbounds %struct._PixelPacket, ptr %723, i64 %757, i32 1
  %769 = load i16, ptr %768, align 2, !tbaa !54
  switch i16 %769, label %770 [
    i16 0, label %775
    i16 -1, label %774
  ]

770:                                              ; preds = %765
  %771 = uitofp i16 %769 to float
  %772 = fadd fast float %771, 5.000000e-01
  %773 = fptoui float %772 to i16
  br label %775

774:                                              ; preds = %765
  br label %775

775:                                              ; preds = %765, %774, %770
  %776 = phi i16 [ %773, %770 ], [ %769, %765 ], [ -1, %774 ]
  %777 = zext i16 %776 to i64
  %778 = getelementptr inbounds %struct._PixelPacket, ptr %723, i64 %757
  %779 = load i16, ptr %778, align 2, !tbaa !55
  switch i16 %779, label %780 [
    i16 0, label %785
    i16 -1, label %784
  ]

780:                                              ; preds = %775
  %781 = uitofp i16 %779 to float
  %782 = fadd fast float %781, 5.000000e-01
  %783 = fptoui float %782 to i16
  br label %785

784:                                              ; preds = %775
  br label %785

785:                                              ; preds = %775, %784, %780
  %786 = phi i16 [ %783, %780 ], [ %779, %775 ], [ -1, %784 ]
  %787 = zext i16 %786 to i64
  %788 = getelementptr inbounds %struct._TransformPacket, ptr %724, i64 %767
  %789 = load float, ptr %788, align 4, !tbaa !56
  %790 = getelementptr inbounds %struct._TransformPacket, ptr %725, i64 %777
  %791 = load float, ptr %790, align 4, !tbaa !56
  %792 = fadd fast float %791, %789
  %793 = getelementptr inbounds %struct._TransformPacket, ptr %726, i64 %787
  %794 = load float, ptr %793, align 4, !tbaa !56
  %795 = fadd fast float %792, %794
  %796 = fpext float %795 to double
  %797 = fadd fast double %727, %796
  %798 = fptrunc double %797 to float
  %799 = getelementptr inbounds %struct._TransformPacket, ptr %724, i64 %767, i32 1
  %800 = load float, ptr %799, align 4, !tbaa !57
  %801 = getelementptr inbounds %struct._TransformPacket, ptr %725, i64 %777, i32 1
  %802 = load float, ptr %801, align 4, !tbaa !57
  %803 = fadd fast float %802, %800
  %804 = getelementptr inbounds %struct._TransformPacket, ptr %726, i64 %787, i32 1
  %805 = load float, ptr %804, align 4, !tbaa !57
  %806 = fadd fast float %803, %805
  %807 = fpext float %806 to double
  %808 = fadd fast double %729, %807
  %809 = fptrunc double %808 to float
  %810 = getelementptr inbounds %struct._TransformPacket, ptr %724, i64 %767, i32 2
  %811 = load float, ptr %810, align 4, !tbaa !43
  %812 = getelementptr inbounds %struct._TransformPacket, ptr %725, i64 %777, i32 2
  %813 = load float, ptr %812, align 4, !tbaa !43
  %814 = fadd fast float %813, %811
  %815 = getelementptr inbounds %struct._TransformPacket, ptr %726, i64 %787, i32 2
  %816 = load float, ptr %815, align 4, !tbaa !43
  %817 = fadd fast float %814, %816
  %818 = fpext float %817 to double
  %819 = fadd fast double %731, %818
  %820 = fptrunc double %819 to float
  %821 = fpext float %798 to double
  %822 = fcmp fast ugt float %798, 0.000000e+00
  br i1 %822, label %823, label %828

823:                                              ; preds = %785
  %824 = fcmp fast ult float %798, 6.553500e+04
  br i1 %824, label %825, label %828

825:                                              ; preds = %823
  %826 = fadd fast double %821, 5.000000e-01
  %827 = fptoui double %826 to i16
  br label %828

828:                                              ; preds = %785, %823, %825
  %829 = phi i16 [ %827, %825 ], [ 0, %785 ], [ -1, %823 ]
  store i16 %829, ptr %758, align 2, !tbaa !53
  %830 = fpext float %809 to double
  %831 = fcmp fast ugt float %809, 0.000000e+00
  br i1 %831, label %832, label %837

832:                                              ; preds = %828
  %833 = fcmp fast ult float %809, 6.553500e+04
  br i1 %833, label %834, label %837

834:                                              ; preds = %832
  %835 = fadd fast double %830, 5.000000e-01
  %836 = fptoui double %835 to i16
  br label %837

837:                                              ; preds = %828, %832, %834
  %838 = phi i16 [ %836, %834 ], [ 0, %828 ], [ -1, %832 ]
  store i16 %838, ptr %768, align 2, !tbaa !54
  %839 = fpext float %820 to double
  %840 = fcmp fast ugt float %820, 0.000000e+00
  br i1 %840, label %841, label %846

841:                                              ; preds = %837
  %842 = fcmp fast ult float %820, 6.553500e+04
  br i1 %842, label %843, label %846

843:                                              ; preds = %841
  %844 = fadd fast double %839, 5.000000e-01
  %845 = fptoui double %844 to i16
  br label %846

846:                                              ; preds = %837, %841, %843
  %847 = phi i16 [ %845, %843 ], [ 0, %837 ], [ -1, %841 ]
  store i16 %847, ptr %778, align 2, !tbaa !55
  %848 = add nuw nsw i64 %757, 1
  %849 = icmp eq i64 %848, %719
  br i1 %849, label %850, label %756, !llvm.loop !58

850:                                              ; preds = %846, %717
  %851 = call i32 @SyncImage(ptr noundef nonnull %0) #4
  br label %852

852:                                              ; preds = %850, %751
  %853 = load ptr, ptr %12, align 8, !tbaa !6
  %854 = call ptr @RelinquishMagickMemory(ptr noundef %853) #4
  store ptr %854, ptr %12, align 8, !tbaa !6
  %855 = load ptr, ptr %11, align 8, !tbaa !6
  %856 = call ptr @RelinquishMagickMemory(ptr noundef %855) #4
  store ptr %856, ptr %11, align 8, !tbaa !6
  %857 = load ptr, ptr %10, align 8, !tbaa !6
  %858 = call ptr @RelinquishMagickMemory(ptr noundef %857) #4
  store ptr %858, ptr %10, align 8, !tbaa !6
  %859 = load ptr, ptr %3, align 8, !tbaa !6
  %860 = load i32, ptr %4, align 4, !tbaa !10
  %861 = call i32 @SetImageColorspace(ptr noundef %859, i32 noundef %860)
  %862 = icmp eq i32 %861, 0
  %863 = load i32, ptr %7, align 4
  %864 = select i1 %862, i32 0, i32 %863
  br label %865

865:                                              ; preds = %372, %200, %355, %183, %852, %389, %324, %321, %151, %148, %135, %95, %92, %316, %141, %87
  %866 = phi i32 [ %317, %316 ], [ %144, %141 ], [ %88, %87 ], [ 0, %92 ], [ 0, %95 ], [ 0, %135 ], [ 0, %148 ], [ 0, %151 ], [ 0, %321 ], [ 0, %324 ], [ 0, %389 ], [ %864, %852 ], [ %184, %183 ], [ %356, %355 ], [ %207, %200 ], [ %379, %372 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #4
  ret i32 %866
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare i32 @LogMagickEvent(i32 noundef, ptr noundef, ptr noundef, i64 noundef, ptr noundef, ...) local_unnamed_addr #2

declare i32 @SyncImage(ptr noundef) local_unnamed_addr #2

declare i32 @SetImageStorageClass(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @SetImageColorspace(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %4 = load i32, ptr %3, align 4, !tbaa !29
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  store i32 %1, ptr %3, align 4, !tbaa !29
  %7 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %7, align 8, !tbaa !30
  %8 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %8, align 8, !tbaa !31
  %9 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %10 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %9, i32 noundef 0, i64 noundef 96) #4
  %11 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %12 = load i32, ptr %11, align 8, !tbaa !32
  switch i32 %1, label %18 [
    i32 19, label %13
    i32 17, label %13
    i32 2, label %13
    i32 29, label %17
    i32 6, label %17
    i32 1, label %17
  ]

13:                                               ; preds = %6, %6, %6
  %14 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 83
  %15 = load i32, ptr %14, align 8, !tbaa !36
  switch i32 %15, label %21 [
    i32 5, label %16
    i32 7, label %16
  ]

16:                                               ; preds = %13, %13
  store double 1.000000e+00, ptr %8, align 8, !tbaa !31
  br label %21

17:                                               ; preds = %6, %6, %6
  store double 1.000000e+00, ptr %8, align 8, !tbaa !31
  br label %21

18:                                               ; preds = %6
  store i32 2, ptr %7, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %9, align 8, !tbaa !33
  %19 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %19, align 8, !tbaa !33
  %20 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %20, align 8, !tbaa !33
  br label %21

21:                                               ; preds = %16, %13, %17, %18
  %22 = phi i32 [ %12, %17 ], [ %12, %18 ], [ 2, %13 ], [ 2, %16 ]
  %23 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  %24 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %23) #4
  store i32 %22, ptr %11, align 8, !tbaa !32
  br label %25

25:                                               ; preds = %2, %21
  %26 = phi i32 [ %24, %21 ], [ 1, %2 ]
  ret i32 %26
}

declare void @GetMagickPixelPacket(ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @AcquireAuthenticCacheView(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(56) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = load ptr, ptr %2, align 8, !tbaa !6
  %13 = getelementptr inbounds %struct._Image, ptr %12, i64 0, i32 8
  %14 = load i64, ptr %13, align 8, !tbaa !34
  %15 = add nsw i64 %14, -1
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %211

17:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %15, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %18 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %18, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %19 = load i64, ptr %9, align 8
  %20 = call i64 @llvm.smin.i64(i64 %19, i64 %15)
  store i64 %20, ptr %9, align 8, !tbaa !59
  %21 = load i64, ptr %8, align 8, !tbaa !59
  %22 = icmp sgt i64 %21, %20
  br i1 %22, label %210, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds i8, ptr %6, i64 4
  br label %25

25:                                               ; preds = %23, %202
  %26 = phi i64 [ %20, %23 ], [ %208, %202 ]
  %27 = phi i64 [ %21, %23 ], [ %206, %202 ]
  %28 = icmp sgt i64 %27, %26
  %29 = load i32, ptr %3, align 4
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %202, label %35

32:                                               ; preds = %197
  %33 = add nsw i64 %37, 1
  %34 = load i32, ptr %3, align 4, !tbaa !10
  br label %35

35:                                               ; preds = %25, %32
  %36 = phi i32 [ %34, %32 ], [ %29, %25 ]
  %37 = phi i64 [ %33, %32 ], [ %27, %25 ]
  %38 = icmp eq i32 %36, 0
  br i1 %38, label %197, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %4, align 8, !tbaa !6
  %41 = load ptr, ptr %2, align 8, !tbaa !6
  %42 = getelementptr inbounds %struct._Image, ptr %41, i64 0, i32 7
  %43 = load i64, ptr %42, align 8, !tbaa !61
  %44 = load ptr, ptr %5, align 8, !tbaa !6
  %45 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %40, i64 noundef 0, i64 noundef %37, i64 noundef %43, i64 noundef 1, ptr noundef %44) #12
  %46 = icmp eq ptr %45, null
  br i1 %46, label %196, label %47

47:                                               ; preds = %39
  %48 = load ptr, ptr %4, align 8, !tbaa !6
  %49 = call ptr @GetCacheViewAuthenticIndexQueue(ptr noundef %48) #4
  %50 = load ptr, ptr %2, align 8, !tbaa !6
  %51 = getelementptr inbounds %struct._Image, ptr %50, i64 0, i32 7
  %52 = load i64, ptr %51, align 8, !tbaa !61
  %53 = icmp sgt i64 %52, 0
  br i1 %53, label %54, label %191

54:                                               ; preds = %47
  %55 = load i32, ptr %24, align 4, !tbaa.struct !62
  %56 = icmp ne ptr %49, null
  %57 = icmp eq ptr %49, null
  br label %58

58:                                               ; preds = %54, %185
  %59 = phi ptr [ %45, %54 ], [ %186, %185 ]
  %60 = phi i64 [ 0, %54 ], [ %187, %185 ]
  %61 = phi i32 [ %55, %54 ], [ %132, %185 ]
  %62 = getelementptr inbounds i16, ptr %49, i64 %60
  %63 = getelementptr inbounds %struct._PixelPacket, ptr %59, i64 0, i32 2
  %64 = getelementptr inbounds %struct._PixelPacket, ptr %59, i64 0, i32 1
  %65 = load <2 x i16>, ptr %64, align 2, !tbaa !63
  %66 = uitofp <2 x i16> %65 to <2 x float>
  %67 = load i16, ptr %59, align 2, !tbaa !55
  %68 = uitofp i16 %67 to float
  %69 = getelementptr inbounds %struct._PixelPacket, ptr %59, i64 0, i32 3
  %70 = load i16, ptr %69, align 2, !tbaa !64
  %71 = uitofp i16 %70 to float
  %72 = icmp eq i32 %61, 13
  br i1 %72, label %80, label %73

73:                                               ; preds = %58
  %74 = uitofp <2 x i16> %65 to <2 x double>
  %75 = fmul fast <2 x double> %74, <double 0x3EF0001000100010, double 0x3EF0001000100010>
  %76 = fptrunc <2 x double> %75 to <2 x float>
  %77 = uitofp i16 %67 to double
  %78 = fmul fast double %77, 0x3EF0001000100010
  %79 = fptrunc double %78 to float
  br label %88

80:                                               ; preds = %58
  %81 = extractelement <2 x float> %66, i64 1
  %82 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %81) #12
  %83 = extractelement <2 x float> %66, i64 0
  %84 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %83) #12
  %85 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %68) #12
  %86 = insertelement <2 x float> poison, float %84, i64 0
  %87 = insertelement <2 x float> %86, float %82, i64 1
  br label %88

88:                                               ; preds = %80, %73
  %89 = phi float [ %79, %73 ], [ %85, %80 ]
  %90 = phi <2 x float> [ %76, %73 ], [ %87, %80 ]
  %91 = extractelement <2 x float> %90, i64 1
  %92 = call fast float @llvm.fabs.f32(float %91)
  %93 = fpext float %92 to double
  %94 = fcmp fast olt double %93, 1.000000e-15
  %95 = extractelement <2 x float> %90, i64 0
  %96 = call fast float @llvm.fabs.f32(float %95)
  %97 = fpext float %96 to double
  %98 = fcmp fast olt double %97, 1.000000e-15
  %99 = select i1 %94, i1 %98, i1 false
  br i1 %99, label %100, label %104

100:                                              ; preds = %88
  %101 = call fast float @llvm.fabs.f32(float %89)
  %102 = fpext float %101 to double
  %103 = fcmp fast olt double %102, 1.000000e-15
  br i1 %103, label %130, label %104

104:                                              ; preds = %100, %88
  %105 = fsub fast <2 x float> <float 1.000000e+00, float 1.000000e+00>, %90
  %106 = fsub fast float 1.000000e+00, %89
  %107 = extractelement <2 x float> %105, i64 0
  %108 = extractelement <2 x float> %105, i64 1
  %109 = fcmp fast olt float %107, %108
  %110 = select i1 %109, float %107, float %108
  %111 = fcmp fast olt float %106, %110
  %112 = select i1 %111, float %106, float %110
  %113 = fpext float %112 to double
  %114 = fsub fast double 1.000000e+00, %113
  %115 = insertelement <2 x float> poison, float %112, i64 0
  %116 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> zeroinitializer
  %117 = fsub fast <2 x float> %105, %116
  %118 = fpext <2 x float> %117 to <2 x double>
  %119 = insertelement <2 x double> poison, double %114, i64 0
  %120 = shufflevector <2 x double> %119, <2 x double> poison, <2 x i32> zeroinitializer
  %121 = fdiv fast <2 x double> %118, %120
  %122 = fptrunc <2 x double> %121 to <2 x float>
  %123 = fsub fast float %106, %112
  %124 = fpext float %123 to double
  %125 = fdiv fast double %124, %114
  %126 = fptrunc double %125 to float
  %127 = fmul fast <2 x float> %122, <float 6.553500e+04, float 6.553500e+04>
  %128 = fmul fast float %126, 6.553500e+04
  %129 = fmul fast float %112, 6.553500e+04
  br label %130

130:                                              ; preds = %100, %104
  %131 = phi float [ %68, %100 ], [ %128, %104 ]
  %132 = phi i32 [ %61, %100 ], [ 12, %104 ]
  %133 = phi float [ 6.553500e+04, %100 ], [ %129, %104 ]
  %134 = phi <2 x float> [ %66, %100 ], [ %127, %104 ]
  %135 = load ptr, ptr %2, align 8, !tbaa !6
  %136 = extractelement <2 x float> %134, i64 1
  %137 = fcmp fast ugt float %136, 0.000000e+00
  br i1 %137, label %138, label %143

138:                                              ; preds = %130
  %139 = fcmp fast ult float %136, 6.553500e+04
  br i1 %139, label %140, label %143

140:                                              ; preds = %138
  %141 = fadd fast float %136, 5.000000e-01
  %142 = fptoui float %141 to i16
  br label %143

143:                                              ; preds = %140, %138, %130
  %144 = phi i16 [ %142, %140 ], [ 0, %130 ], [ -1, %138 ]
  store i16 %144, ptr %63, align 2, !tbaa !53
  %145 = extractelement <2 x float> %134, i64 0
  %146 = fcmp fast ugt float %145, 0.000000e+00
  br i1 %146, label %147, label %152

147:                                              ; preds = %143
  %148 = fcmp fast ult float %145, 6.553500e+04
  br i1 %148, label %149, label %152

149:                                              ; preds = %147
  %150 = fadd fast float %145, 5.000000e-01
  %151 = fptoui float %150 to i16
  br label %152

152:                                              ; preds = %149, %147, %143
  %153 = phi i16 [ %151, %149 ], [ 0, %143 ], [ -1, %147 ]
  store i16 %153, ptr %64, align 2, !tbaa !54
  %154 = fcmp fast ugt float %131, 0.000000e+00
  br i1 %154, label %155, label %160

155:                                              ; preds = %152
  %156 = fcmp fast ult float %131, 6.553500e+04
  br i1 %156, label %157, label %160

157:                                              ; preds = %155
  %158 = fadd fast float %131, 5.000000e-01
  %159 = fptoui float %158 to i16
  br label %160

160:                                              ; preds = %157, %155, %152
  %161 = phi i16 [ %159, %157 ], [ 0, %152 ], [ -1, %155 ]
  store i16 %161, ptr %59, align 2, !tbaa !55
  switch i16 %70, label %162 [
    i16 0, label %166
    i16 -1, label %165
  ]

162:                                              ; preds = %160
  %163 = fadd fast float %71, 5.000000e-01
  %164 = fptoui float %163 to i16
  br label %166

165:                                              ; preds = %160
  br label %166

166:                                              ; preds = %160, %165, %162
  %167 = phi i16 [ %164, %162 ], [ %70, %160 ], [ -1, %165 ]
  store i16 %167, ptr %69, align 2, !tbaa !64
  %168 = getelementptr inbounds %struct._Image, ptr %135, i64 0, i32 1
  %169 = load i32, ptr %168, align 4, !tbaa !29
  %170 = icmp eq i32 %169, 12
  br i1 %170, label %175, label %171

171:                                              ; preds = %166
  %172 = load i32, ptr %135, align 8, !tbaa !28
  %173 = icmp eq i32 %172, 2
  %174 = and i1 %56, %173
  br i1 %174, label %176, label %185

175:                                              ; preds = %166
  br i1 %57, label %185, label %176

176:                                              ; preds = %175, %171
  %177 = fcmp fast ugt float %133, 0.000000e+00
  br i1 %177, label %178, label %183

178:                                              ; preds = %176
  %179 = fcmp fast ult float %133, 6.553500e+04
  br i1 %179, label %180, label %183

180:                                              ; preds = %178
  %181 = fadd fast float %133, 5.000000e-01
  %182 = fptoui float %181 to i16
  br label %183

183:                                              ; preds = %180, %178, %176
  %184 = phi i16 [ %182, %180 ], [ 0, %176 ], [ -1, %178 ]
  store i16 %184, ptr %62, align 2, !tbaa !63
  br label %185

185:                                              ; preds = %171, %175, %183
  %186 = getelementptr inbounds %struct._PixelPacket, ptr %59, i64 1
  %187 = add nuw nsw i64 %60, 1
  %188 = getelementptr inbounds %struct._Image, ptr %135, i64 0, i32 7
  %189 = load i64, ptr %188, align 8, !tbaa !61
  %190 = icmp slt i64 %187, %189
  br i1 %190, label %58, label %191, !llvm.loop !65

191:                                              ; preds = %185, %47
  %192 = load ptr, ptr %4, align 8, !tbaa !6
  %193 = load ptr, ptr %5, align 8, !tbaa !6
  %194 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %192, ptr noundef %193) #12
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %191, %39
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %197

197:                                              ; preds = %196, %191, %35
  %198 = load i64, ptr %9, align 8, !tbaa !59
  %199 = icmp slt i64 %37, %198
  br i1 %199, label %32, label %200, !llvm.loop !66

200:                                              ; preds = %197
  %201 = load i64, ptr %8, align 8, !tbaa !59
  br label %202

202:                                              ; preds = %200, %25
  %203 = phi i64 [ %27, %25 ], [ %201, %200 ]
  %204 = phi i64 [ %26, %25 ], [ %198, %200 ]
  %205 = load i64, ptr %10, align 8, !tbaa !59
  %206 = add nsw i64 %205, %203
  store i64 %206, ptr %8, align 8, !tbaa !59
  %207 = add nsw i64 %205, %204
  %208 = call i64 @llvm.smin.i64(i64 %207, i64 %15)
  store i64 %208, ptr %9, align 8, !tbaa !59
  %209 = icmp sgt i64 %206, %208
  br i1 %209, label %210, label %25

210:                                              ; preds = %202, %17
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %18)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %211

211:                                              ; preds = %210, %7
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind
declare void @__kmpc_for_static_init_8(ptr, i32, i32, ptr, ptr, ptr, ptr, i64, i64) local_unnamed_addr #4

; Function Attrs: hot
declare ptr @GetCacheViewAuthenticPixels(ptr noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, ptr noundef) local_unnamed_addr #5

declare ptr @GetCacheViewAuthenticIndexQueue(ptr noundef) local_unnamed_addr #2

; Function Attrs: hot
declare i32 @SyncCacheViewAuthenticPixels(ptr noundef, ptr noundef) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @__kmpc_for_static_fini(ptr, i32) local_unnamed_addr #4

declare i64 @GetMagickResourceLimit(i32 noundef) local_unnamed_addr #2

declare i32 @GetImagePixelCacheType(ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__kmpc_global_thread_num(ptr) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @__kmpc_push_num_threads(ptr, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare !callback !68 void @__kmpc_fork_call(ptr, i32, ptr, ...) local_unnamed_addr #4

declare ptr @DestroyCacheView(ptr noundef) local_unnamed_addr #2

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.3(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5) #3 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = load ptr, ptr %2, align 8, !tbaa !6
  %12 = getelementptr inbounds %struct._Image, ptr %11, i64 0, i32 8
  %13 = load i64, ptr %12, align 8, !tbaa !34
  %14 = add nsw i64 %13, -1
  %15 = icmp sgt i64 %13, 0
  br i1 %15, label %16, label %90

16:                                               ; preds = %6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 0, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 %14, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 1, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #4
  store i32 0, ptr %10, align 4, !tbaa !60
  %17 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %17, i32 33, ptr nonnull %10, ptr nonnull %7, ptr nonnull %8, ptr nonnull %9, i64 1, i64 4)
  %18 = load i64, ptr %8, align 8
  %19 = call i64 @llvm.smin.i64(i64 %18, i64 %14)
  store i64 %19, ptr %8, align 8, !tbaa !59
  %20 = load i64, ptr %7, align 8, !tbaa !59
  %21 = icmp sgt i64 %20, %19
  br i1 %21, label %89, label %22

22:                                               ; preds = %16, %81
  %23 = phi i64 [ %87, %81 ], [ %19, %16 ]
  %24 = phi i64 [ %85, %81 ], [ %20, %16 ]
  %25 = icmp sgt i64 %24, %23
  %26 = load i32, ptr %3, align 4
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %25, i1 true, i1 %27
  br i1 %28, label %81, label %32

29:                                               ; preds = %76
  %30 = add nsw i64 %34, 1
  %31 = load i32, ptr %3, align 4, !tbaa !10
  br label %32

32:                                               ; preds = %22, %29
  %33 = phi i32 [ %31, %29 ], [ %26, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %24, %22 ]
  %35 = icmp eq i32 %33, 0
  br i1 %35, label %76, label %36

36:                                               ; preds = %32
  %37 = load ptr, ptr %4, align 8, !tbaa !6
  %38 = load ptr, ptr %2, align 8, !tbaa !6
  %39 = getelementptr inbounds %struct._Image, ptr %38, i64 0, i32 7
  %40 = load i64, ptr %39, align 8, !tbaa !61
  %41 = load ptr, ptr %5, align 8, !tbaa !6
  %42 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %37, i64 noundef 0, i64 noundef %34, i64 noundef %40, i64 noundef 1, ptr noundef %41) #12
  %43 = icmp eq ptr %42, null
  br i1 %43, label %75, label %44

44:                                               ; preds = %36
  %45 = load ptr, ptr %2, align 8, !tbaa !6
  %46 = getelementptr inbounds %struct._Image, ptr %45, i64 0, i32 7
  %47 = load i64, ptr %46, align 8, !tbaa !61
  %48 = icmp sgt i64 %47, 0
  br i1 %48, label %49, label %70

49:                                               ; preds = %44, %60
  %50 = phi ptr [ %66, %60 ], [ %45, %44 ]
  %51 = phi ptr [ %64, %60 ], [ %42, %44 ]
  %52 = phi i64 [ %65, %60 ], [ 0, %44 ]
  %53 = call fast nofpclass(nan inf) float @GetPixelIntensity(ptr noundef nonnull %50, ptr noundef nonnull %51) #12
  %54 = fcmp fast ugt float %53, 0.000000e+00
  br i1 %54, label %55, label %60

55:                                               ; preds = %49
  %56 = fcmp fast ult float %53, 6.553500e+04
  br i1 %56, label %57, label %60

57:                                               ; preds = %55
  %58 = fadd fast float %53, 5.000000e-01
  %59 = fptoui float %58 to i16
  br label %60

60:                                               ; preds = %49, %55, %57
  %61 = phi i16 [ %59, %57 ], [ 0, %49 ], [ -1, %55 ]
  store i16 %61, ptr %51, align 2, !tbaa !55
  %62 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 0, i32 1
  store i16 %61, ptr %62, align 2, !tbaa !54
  %63 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 0, i32 2
  store i16 %61, ptr %63, align 2, !tbaa !53
  %64 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 1
  %65 = add nuw nsw i64 %52, 1
  %66 = load ptr, ptr %2, align 8, !tbaa !6
  %67 = getelementptr inbounds %struct._Image, ptr %66, i64 0, i32 7
  %68 = load i64, ptr %67, align 8, !tbaa !61
  %69 = icmp slt i64 %65, %68
  br i1 %69, label %49, label %70, !llvm.loop !70

70:                                               ; preds = %60, %44
  %71 = load ptr, ptr %4, align 8, !tbaa !6
  %72 = load ptr, ptr %5, align 8, !tbaa !6
  %73 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %71, ptr noundef %72) #12
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %70, %36
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %76

76:                                               ; preds = %75, %70, %32
  %77 = load i64, ptr %8, align 8, !tbaa !59
  %78 = icmp slt i64 %34, %77
  br i1 %78, label %29, label %79, !llvm.loop !71

79:                                               ; preds = %76
  %80 = load i64, ptr %7, align 8, !tbaa !59
  br label %81

81:                                               ; preds = %79, %22
  %82 = phi i64 [ %24, %22 ], [ %80, %79 ]
  %83 = phi i64 [ %23, %22 ], [ %77, %79 ]
  %84 = load i64, ptr %9, align 8, !tbaa !59
  %85 = add nsw i64 %84, %82
  store i64 %85, ptr %7, align 8, !tbaa !59
  %86 = add nsw i64 %84, %83
  %87 = call i64 @llvm.smin.i64(i64 %86, i64 %14)
  store i64 %87, ptr %8, align 8, !tbaa !59
  %88 = icmp sgt i64 %85, %87
  br i1 %88, label %89, label %22

89:                                               ; preds = %81, %16
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  br label %90

90:                                               ; preds = %89, %6
  ret void
}

; Function Attrs: hot
declare nofpclass(nan inf) float @GetPixelIntensity(ptr noundef, ptr noundef) local_unnamed_addr #5

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.4(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 4 dereferenceable(4) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = load ptr, ptr %2, align 8, !tbaa !6
  %16 = getelementptr inbounds %struct._Image, ptr %15, i64 0, i32 8
  %17 = load i64, ptr %16, align 8, !tbaa !34
  %18 = add nsw i64 %17, -1
  %19 = icmp sgt i64 %17, 0
  br i1 %19, label %20, label %501

20:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %18, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %21 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %21, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %22 = load i64, ptr %9, align 8
  %23 = call i64 @llvm.smin.i64(i64 %22, i64 %18)
  store i64 %23, ptr %9, align 8, !tbaa !59
  %24 = load i64, ptr %8, align 8, !tbaa !59
  %25 = icmp sgt i64 %24, %23
  br i1 %25, label %500, label %26

26:                                               ; preds = %20, %492
  %27 = phi i64 [ %498, %492 ], [ %23, %20 ]
  %28 = phi i64 [ %496, %492 ], [ %24, %20 ]
  %29 = icmp sgt i64 %28, %27
  %30 = load i32, ptr %3, align 4
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %29, i1 true, i1 %31
  br i1 %32, label %492, label %36

33:                                               ; preds = %487
  %34 = add nsw i64 %38, 1
  %35 = load i32, ptr %3, align 4, !tbaa !10
  br label %36

36:                                               ; preds = %26, %33
  %37 = phi i32 [ %35, %33 ], [ %30, %26 ]
  %38 = phi i64 [ %34, %33 ], [ %28, %26 ]
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %487, label %40

40:                                               ; preds = %36
  %41 = load ptr, ptr %4, align 8, !tbaa !6
  %42 = load ptr, ptr %2, align 8, !tbaa !6
  %43 = getelementptr inbounds %struct._Image, ptr %42, i64 0, i32 7
  %44 = load i64, ptr %43, align 8, !tbaa !61
  %45 = load ptr, ptr %5, align 8, !tbaa !6
  %46 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %41, i64 noundef 0, i64 noundef %38, i64 noundef %44, i64 noundef 1, ptr noundef %45) #12
  %47 = icmp eq ptr %46, null
  br i1 %47, label %486, label %48

48:                                               ; preds = %40
  %49 = load ptr, ptr %2, align 8, !tbaa !6
  %50 = getelementptr inbounds %struct._Image, ptr %49, i64 0, i32 7
  %51 = load i64, ptr %50, align 8, !tbaa !61
  %52 = icmp sgt i64 %51, 0
  br i1 %52, label %53, label %481

53:                                               ; preds = %48, %473
  %54 = phi i64 [ %476, %473 ], [ 0, %48 ]
  %55 = phi ptr [ %475, %473 ], [ %46, %48 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #4
  %56 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 2
  %57 = load i16, ptr %56, align 2, !tbaa !53
  switch i16 %57, label %58 [
    i16 0, label %63
    i16 -1, label %62
  ]

58:                                               ; preds = %53
  %59 = uitofp i16 %57 to float
  %60 = fadd fast float %59, 5.000000e-01
  %61 = fptoui float %60 to i16
  br label %63

62:                                               ; preds = %53
  br label %63

63:                                               ; preds = %53, %62, %58
  %64 = phi i16 [ %61, %58 ], [ %57, %53 ], [ -1, %62 ]
  %65 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 1
  %66 = load i16, ptr %65, align 2, !tbaa !54
  switch i16 %66, label %67 [
    i16 0, label %72
    i16 -1, label %71
  ]

67:                                               ; preds = %63
  %68 = uitofp i16 %66 to float
  %69 = fadd fast float %68, 5.000000e-01
  %70 = fptoui float %69 to i16
  br label %72

71:                                               ; preds = %63
  br label %72

72:                                               ; preds = %63, %71, %67
  %73 = phi i16 [ %70, %67 ], [ %66, %63 ], [ -1, %71 ]
  %74 = load i16, ptr %55, align 2, !tbaa !55
  switch i16 %74, label %75 [
    i16 0, label %80
    i16 -1, label %79
  ]

75:                                               ; preds = %72
  %76 = uitofp i16 %74 to float
  %77 = fadd fast float %76, 5.000000e-01
  %78 = fptoui float %77 to i16
  br label %80

79:                                               ; preds = %72
  br label %80

80:                                               ; preds = %72, %79, %75
  %81 = phi i16 [ %78, %75 ], [ %74, %72 ], [ -1, %79 ]
  %82 = load i32, ptr %6, align 4, !tbaa !10
  switch i32 %82, label %434 [
    i32 22, label %83
    i32 24, label %93
    i32 32, label %94
    i32 14, label %95
    i32 30, label %96
    i32 15, label %97
    i32 31, label %98
    i32 16, label %99
    i32 5, label %100
    i32 25, label %159
    i32 27, label %159
    i32 28, label %160
    i32 26, label %161
    i32 23, label %206
    i32 6, label %269
    i32 7, label %294
    i32 33, label %322
    i32 9, label %350
    i32 10, label %378
    i32 11, label %406
  ]

83:                                               ; preds = %80
  %84 = xor i16 %64, -1
  %85 = uitofp i16 %84 to double
  %86 = fmul fast double %85, 0x3EF0001000100010
  store double %86, ptr %12, align 8, !tbaa !33
  %87 = xor i16 %73, -1
  %88 = uitofp i16 %87 to double
  %89 = fmul fast double %88, 0x3EF0001000100010
  store double %89, ptr %13, align 8, !tbaa !33
  %90 = xor i16 %81, -1
  %91 = uitofp i16 %90 to double
  %92 = fmul fast double %91, 0x3EF0001000100010
  store double %92, ptr %14, align 8, !tbaa !33
  br label %441

93:                                               ; preds = %80
  call void @ConvertRGBToHCL(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

94:                                               ; preds = %80
  call void @ConvertRGBToHCLp(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

95:                                               ; preds = %80
  call void @ConvertRGBToHSB(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

96:                                               ; preds = %80
  call void @ConvertRGBToHSI(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

97:                                               ; preds = %80
  call void @ConvertRGBToHSL(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

98:                                               ; preds = %80
  call void @ConvertRGBToHSV(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

99:                                               ; preds = %80
  call void @ConvertRGBToHWB(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

100:                                              ; preds = %80
  %101 = uitofp i16 %64 to float
  %102 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %101) #12
  %103 = fpext float %102 to double
  %104 = uitofp i16 %73 to float
  %105 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %104) #12
  %106 = fpext float %105 to double
  %107 = uitofp i16 %81 to float
  %108 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %107) #12
  %109 = fpext float %108 to double
  %110 = fmul fast double %103, 0x3EDA64CADCB329BF
  %111 = fmul fast double %106, 0x3ED6E2BC7FEAAF31
  %112 = fadd fast double %111, %110
  %113 = fmul fast double %109, 0x3EC71A792B4F4BDB
  %114 = fadd fast double %112, %113
  %115 = fmul fast double %103, 0x3ECB3621C488AF5C
  %116 = fmul fast double %106, 0x3EE6E2C3B7F2F7BE
  %117 = fadd fast double %116, %115
  %118 = fmul fast double %109, 0x3EB27BCDD83B6B0C
  %119 = fadd fast double %117, %118
  %120 = fmul fast double %103, 0x3E93C2B9F87D786A
  %121 = fmul fast double %106, 0x3EBE82F3F389DFDC
  %122 = fadd fast double %121, %120
  %123 = fmul fast double %109, 0x3EEE6A975D0397A1
  %124 = fadd fast double %122, %123
  %125 = fmul fast double %114, 0x3FF0D582A86B8380
  %126 = fcmp fast ogt double %125, 0x3F822354D28F7CD6
  br i1 %126, label %127, label %129

127:                                              ; preds = %100
  %128 = call fast double @llvm.pow.f64(double %125, double 0x3FD5555555555555)
  br label %132

129:                                              ; preds = %100
  %130 = fmul fast double %114, 0x402062CA24877768
  %131 = fadd fast double %130, 0x3FC1A7B9611A7B96
  br label %132

132:                                              ; preds = %129, %127
  %133 = phi double [ %128, %127 ], [ %131, %129 ]
  %134 = fcmp fast ogt double %119, 0x3F822354D28F7CD6
  br i1 %134, label %135, label %137

135:                                              ; preds = %132
  %136 = call fast double @llvm.pow.f64(double %119, double 0x3FD5555555555555)
  br label %140

137:                                              ; preds = %132
  %138 = fmul fast double %119, 0x401F25ED097B425F
  %139 = fadd fast double %138, 0x3FC1A7B9611A7B96
  br label %140

140:                                              ; preds = %137, %135
  %141 = phi double [ %136, %135 ], [ %139, %137 ]
  %142 = fmul fast double %124, 0x3FED643287D74679
  %143 = fcmp fast ogt double %142, 0x3F822354D28F7CD6
  br i1 %143, label %144, label %146

144:                                              ; preds = %140
  %145 = call fast double @llvm.pow.f64(double %142, double 0x3FD5555555555555)
  br label %149

146:                                              ; preds = %140
  %147 = fmul fast double %124, 0x401C9BE684D13F8F
  %148 = fadd fast double %147, 0x3FC1A7B9611A7B96
  br label %149

149:                                              ; preds = %144, %146
  %150 = phi double [ %145, %144 ], [ %148, %146 ]
  %151 = fmul fast double %141, 1.160000e+00
  %152 = fadd fast double %151, -1.600000e-01
  store double %152, ptr %12, align 8, !tbaa !33
  %153 = fsub fast double %133, %141
  %154 = fmul fast double %153, 0x3FFF5F5F5F5F5F5F
  %155 = fadd fast double %154, 5.000000e-01
  store double %155, ptr %13, align 8, !tbaa !33
  %156 = fsub fast double %141, %150
  %157 = fmul fast double %156, 0x3FE9191919191919
  %158 = fadd fast double %157, 5.000000e-01
  store double %158, ptr %14, align 8, !tbaa !33
  br label %441

159:                                              ; preds = %80, %80
  call void @ConvertRGBToLCHab(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

160:                                              ; preds = %80
  call void @ConvertRGBToLCHuv(i16 noundef zeroext %64, i16 noundef zeroext %73, i16 noundef zeroext %81, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %14) #4
  br label %441

161:                                              ; preds = %80
  %162 = uitofp i16 %64 to float
  %163 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %162) #12
  %164 = uitofp i16 %73 to float
  %165 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %164) #12
  %166 = uitofp i16 %81 to float
  %167 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %166) #12
  %168 = fpext float %167 to double
  %169 = insertelement <2 x float> poison, float %163, i64 0
  %170 = insertelement <2 x float> %169, float %165, i64 1
  %171 = fpext <2 x float> %170 to <2 x double>
  %172 = extractelement <2 x double> %171, i64 0
  %173 = fmul fast double %172, 0x3EDA64CADCB329BF
  %174 = shufflevector <2 x double> %171, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %175 = insertelement <2 x double> %174, double %168, i64 1
  %176 = fmul fast <2 x double> %175, <double 0x3ED6E2BC7FEAAF31, double 0x3EC71A792B4F4BDB>
  %177 = extractelement <2 x double> %176, i64 0
  %178 = fadd fast double %177, %173
  %179 = extractelement <2 x double> %176, i64 1
  %180 = fadd fast double %178, %179
  %181 = fmul fast <2 x double> %174, <double 0x3EE6E2C3B7F2F7BE, double 0x3E93C2B9F87D786A>
  %182 = fmul fast <2 x double> %171, <double 0x3ECB3621C488AF5C, double 0x3EBE82F3F389DFDC>
  %183 = fadd fast <2 x double> %182, %181
  %184 = insertelement <2 x double> poison, double %168, i64 0
  %185 = shufflevector <2 x double> %184, <2 x double> poison, <2 x i32> zeroinitializer
  %186 = fmul fast <2 x double> %185, <double 0x3EB27BCDD83B6B0C, double 0x3EEE6A975D0397A1>
  %187 = fadd fast <2 x double> %183, %186
  %188 = fmul fast double %180, 7.328000e-01
  %189 = fmul fast <2 x double> %187, <double 4.296000e-01, double -1.624000e-01>
  %190 = extractelement <2 x double> %189, i64 0
  %191 = fadd fast double %190, %188
  %192 = extractelement <2 x double> %189, i64 1
  %193 = fadd fast double %191, %192
  store double %193, ptr %12, align 8, !tbaa !33
  %194 = fmul fast double %180, -7.036000e-01
  %195 = fmul fast <2 x double> %187, <double 1.697500e+00, double 6.100000e-03>
  %196 = extractelement <2 x double> %195, i64 0
  %197 = fadd fast double %196, %194
  %198 = extractelement <2 x double> %195, i64 1
  %199 = fadd fast double %197, %198
  store double %199, ptr %13, align 8, !tbaa !33
  %200 = fmul fast double %180, 3.000000e-03
  %201 = fmul fast <2 x double> %187, <double 1.360000e-02, double 9.834000e-01>
  %202 = extractelement <2 x double> %201, i64 0
  %203 = fadd fast double %202, %200
  %204 = extractelement <2 x double> %201, i64 1
  %205 = fadd fast double %203, %204
  store double %205, ptr %14, align 8, !tbaa !33
  br label %441

206:                                              ; preds = %80
  %207 = uitofp i16 %64 to float
  %208 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %207) #12
  %209 = uitofp i16 %73 to float
  %210 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %209) #12
  %211 = fpext float %210 to double
  %212 = uitofp i16 %81 to float
  %213 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %212) #12
  %214 = insertelement <2 x float> poison, float %213, i64 0
  %215 = insertelement <2 x float> %214, float %208, i64 1
  %216 = fpext <2 x float> %215 to <2 x double>
  %217 = fmul fast double %211, 0x3EE6E2C3B7F2F7BE
  %218 = fmul fast <2 x double> %216, <double 0x3EB27BCDD83B6B0C, double 0x3ECB3621C488AF5C>
  %219 = extractelement <2 x double> %218, i64 1
  %220 = fadd fast double %217, %219
  %221 = extractelement <2 x double> %218, i64 0
  %222 = fadd fast double %220, %221
  %223 = fcmp fast ogt double %222, 0x3F822354D28F7CD6
  br i1 %223, label %224, label %228

224:                                              ; preds = %206
  %225 = call fast double @llvm.pow.f64(double %222, double 0x3FD5555555555555)
  %226 = fmul fast double %225, 1.160000e+02
  %227 = fadd fast double %226, -1.600000e+01
  br label %230

228:                                              ; preds = %206
  %229 = fmul fast double %222, 0x408C3A5ED097B426
  br label %230

230:                                              ; preds = %224, %228
  %231 = phi double [ %229, %228 ], [ %227, %224 ]
  %232 = fmul fast double %211, 0x3EBE82F3F389DFDC
  %233 = fmul fast <2 x double> %216, <double 0x3EC71A792B4F4BDB, double 0x3E93C2B9F87D786A>
  %234 = shufflevector <2 x double> %216, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %235 = insertelement <2 x double> %234, double %222, i64 0
  %236 = fmul fast <2 x double> %235, <double 1.500000e+01, double 0x3EEE6A975D0397A1>
  %237 = insertelement <2 x double> %216, double %211, i64 0
  %238 = fmul fast <2 x double> %237, <double 0x3ED6E2BC7FEAAF31, double 0x3EDA64CADCB329BF>
  %239 = shufflevector <2 x double> %238, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %240 = fadd fast <2 x double> %238, %239
  %241 = insertelement <2 x double> %240, double %232, i64 1
  %242 = fadd fast <2 x double> %241, %233
  %243 = fadd fast <2 x double> %236, %242
  %244 = extractelement <2 x double> %243, i64 1
  %245 = fmul fast double %244, 3.000000e+00
  %246 = extractelement <2 x double> %243, i64 0
  %247 = fadd fast double %246, %245
  %248 = fcmp fast olt double %247, 0.000000e+00
  %249 = select fast i1 %248, double -1.000000e+00, double 1.000000e+00
  %250 = fmul fast double %249, %247
  %251 = fcmp fast ult double %250, 1.000000e-15
  %252 = fdiv fast double 1.000000e+00, %247
  %253 = fmul fast double %249, 0x430C6BF52633FFFF
  %254 = select i1 %251, double %253, double %252
  %255 = extractelement <2 x double> %242, i64 0
  %256 = fmul fast double %255, 5.200000e+01
  %257 = fmul fast double %256, %254
  %258 = fadd fast double %257, 0xC0049346B7D0679E
  %259 = fmul fast double %231, %258
  %260 = fmul fast double %222, 1.170000e+02
  %261 = fmul fast double %260, %254
  %262 = fadd fast double %261, 0xC0185A9245C1018D
  %263 = fmul fast double %231, %262
  %264 = fmul fast double %231, 1.000000e-02
  store double %264, ptr %12, align 8, !tbaa !33
  %265 = fmul fast double %259, 0x3F6724287F46DEBC
  %266 = fadd fast double %265, 0x3FD839DA653E312D
  store double %266, ptr %13, align 8, !tbaa !33
  %267 = fmul fast double %263, 0x3F6F44659E4A4271
  %268 = fadd fast double %267, 0x3FE1196792909C56
  store double %268, ptr %14, align 8, !tbaa !33
  br label %441

269:                                              ; preds = %80
  %270 = uitofp i16 %64 to float
  %271 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %270) #12
  %272 = fpext float %271 to double
  %273 = uitofp i16 %73 to float
  %274 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %273) #12
  %275 = fpext float %274 to double
  %276 = uitofp i16 %81 to float
  %277 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %276) #12
  %278 = fpext float %277 to double
  %279 = fmul fast double %272, 0x3EDA64CADCB329BF
  %280 = fmul fast double %275, 0x3ED6E2BC7FEAAF31
  %281 = fadd fast double %280, %279
  %282 = fmul fast double %278, 0x3EC71A792B4F4BDB
  %283 = fadd fast double %281, %282
  store double %283, ptr %12, align 8, !tbaa !33
  %284 = fmul fast double %272, 0x3ECB3621C488AF5C
  %285 = fmul fast double %275, 0x3EE6E2C3B7F2F7BE
  %286 = fadd fast double %285, %284
  %287 = fmul fast double %278, 0x3EB27BCDD83B6B0C
  %288 = fadd fast double %286, %287
  store double %288, ptr %13, align 8, !tbaa !33
  %289 = fmul fast double %272, 0x3E93C2B9F87D786A
  %290 = fmul fast double %275, 0x3EBE82F3F389DFDC
  %291 = fadd fast double %290, %289
  %292 = fmul fast double %278, 0x3EEE6A975D0397A1
  %293 = fadd fast double %291, %292
  store double %293, ptr %14, align 8, !tbaa !33
  br label %441

294:                                              ; preds = %80
  %295 = uitofp i16 %64 to double
  %296 = fmul fast double %295, 2.988390e-01
  %297 = insertelement <2 x i16> poison, i16 %73, i64 0
  %298 = insertelement <2 x i16> %297, i16 %81, i64 1
  %299 = uitofp <2 x i16> %298 to <2 x double>
  %300 = fmul fast <2 x double> %299, <double 5.868110e-01, double 1.143500e-01>
  %301 = extractelement <2 x double> %300, i64 0
  %302 = fadd fast double %301, %296
  %303 = extractelement <2 x double> %300, i64 1
  %304 = fadd fast double %302, %303
  %305 = fmul fast double %304, 0x3EF0001000100010
  store double %305, ptr %12, align 8, !tbaa !33
  %306 = fmul fast double %295, 0xBFC5992A08114679
  %307 = fmul fast <2 x double> %299, <double -3.312640e-01, double 5.000000e-01>
  %308 = extractelement <2 x double> %307, i64 0
  %309 = fadd fast double %308, %306
  %310 = extractelement <2 x double> %307, i64 1
  %311 = fadd fast double %309, %310
  %312 = fmul fast double %311, 0x3EF0001000100010
  %313 = fadd fast double %312, 5.000000e-01
  store double %313, ptr %13, align 8, !tbaa !33
  %314 = fmul fast double %295, 5.000000e-01
  %315 = fmul fast <2 x double> %299, <double -4.186880e-01, double -8.131200e-02>
  %316 = extractelement <2 x double> %315, i64 0
  %317 = fadd fast double %316, %314
  %318 = extractelement <2 x double> %315, i64 1
  %319 = fadd fast double %317, %318
  %320 = fmul fast double %319, 0x3EF0001000100010
  %321 = fadd fast double %320, 5.000000e-01
  store double %321, ptr %14, align 8, !tbaa !33
  br label %441

322:                                              ; preds = %80
  %323 = uitofp i16 %64 to double
  %324 = fmul fast double %323, 2.988390e-01
  %325 = insertelement <2 x i16> poison, i16 %73, i64 0
  %326 = insertelement <2 x i16> %325, i16 %81, i64 1
  %327 = uitofp <2 x i16> %326 to <2 x double>
  %328 = fmul fast <2 x double> %327, <double 5.868110e-01, double 1.143500e-01>
  %329 = extractelement <2 x double> %328, i64 0
  %330 = fadd fast double %329, %324
  %331 = extractelement <2 x double> %328, i64 1
  %332 = fadd fast double %330, %331
  %333 = fmul fast double %332, 0x3EF0001000100010
  store double %333, ptr %12, align 8, !tbaa !33
  %334 = fmul fast double %323, -4.500000e-01
  %335 = fmul fast <2 x double> %327, <double -8.830000e-01, double 1.333000e+00>
  %336 = extractelement <2 x double> %335, i64 0
  %337 = fadd fast double %336, %334
  %338 = extractelement <2 x double> %335, i64 1
  %339 = fadd fast double %337, %338
  %340 = fmul fast double %339, 0x3EF0001000100010
  %341 = fadd fast double %340, 5.000000e-01
  store double %341, ptr %13, align 8, !tbaa !33
  %342 = fmul fast double %323, -1.333000e+00
  %343 = fmul fast <2 x double> %327, <double 1.116000e+00, double 2.170000e-01>
  %344 = extractelement <2 x double> %343, i64 0
  %345 = fadd fast double %344, %342
  %346 = extractelement <2 x double> %343, i64 1
  %347 = fadd fast double %345, %346
  %348 = fmul fast double %347, 0x3EF0001000100010
  %349 = fadd fast double %348, 5.000000e-01
  store double %349, ptr %14, align 8, !tbaa !33
  br label %441

350:                                              ; preds = %80
  %351 = uitofp i16 %64 to double
  %352 = fmul fast double %351, 2.988390e-01
  %353 = insertelement <2 x i16> poison, i16 %73, i64 0
  %354 = insertelement <2 x i16> %353, i16 %81, i64 1
  %355 = uitofp <2 x i16> %354 to <2 x double>
  %356 = fmul fast <2 x double> %355, <double 5.868110e-01, double 1.143500e-01>
  %357 = extractelement <2 x double> %356, i64 0
  %358 = fadd fast double %357, %352
  %359 = extractelement <2 x double> %356, i64 1
  %360 = fadd fast double %358, %359
  %361 = fmul fast double %360, 0x3EF0001000100010
  store double %361, ptr %12, align 8, !tbaa !33
  %362 = fmul fast double %351, 5.957160e-01
  %363 = fmul fast <2 x double> %355, <double -2.744530e-01, double -3.212630e-01>
  %364 = extractelement <2 x double> %363, i64 0
  %365 = fadd fast double %364, %362
  %366 = extractelement <2 x double> %363, i64 1
  %367 = fadd fast double %365, %366
  %368 = fmul fast double %367, 0x3EF0001000100010
  %369 = fadd fast double %368, 5.000000e-01
  store double %369, ptr %13, align 8, !tbaa !33
  %370 = fmul fast double %351, 2.114560e-01
  %371 = fmul fast <2 x double> %355, <double -5.225910e-01, double 3.111350e-01>
  %372 = extractelement <2 x double> %371, i64 0
  %373 = fadd fast double %372, %370
  %374 = extractelement <2 x double> %371, i64 1
  %375 = fadd fast double %373, %374
  %376 = fmul fast double %375, 0x3EF0001000100010
  %377 = fadd fast double %376, 5.000000e-01
  store double %377, ptr %14, align 8, !tbaa !33
  br label %441

378:                                              ; preds = %80
  %379 = uitofp i16 %64 to double
  %380 = fmul fast double %379, 2.988390e-01
  %381 = insertelement <2 x i16> poison, i16 %73, i64 0
  %382 = insertelement <2 x i16> %381, i16 %81, i64 1
  %383 = uitofp <2 x i16> %382 to <2 x double>
  %384 = fmul fast <2 x double> %383, <double 5.868110e-01, double 1.143500e-01>
  %385 = extractelement <2 x double> %384, i64 0
  %386 = fadd fast double %385, %380
  %387 = extractelement <2 x double> %384, i64 1
  %388 = fadd fast double %386, %387
  %389 = fmul fast double %388, 0x3EF0001000100010
  store double %389, ptr %12, align 8, !tbaa !33
  %390 = fmul fast double %379, 0xBFC5992A08114679
  %391 = fmul fast <2 x double> %383, <double -3.312640e-01, double 5.000000e-01>
  %392 = extractelement <2 x double> %391, i64 0
  %393 = fadd fast double %392, %390
  %394 = extractelement <2 x double> %391, i64 1
  %395 = fadd fast double %393, %394
  %396 = fmul fast double %395, 0x3EF0001000100010
  %397 = fadd fast double %396, 5.000000e-01
  store double %397, ptr %13, align 8, !tbaa !33
  %398 = fmul fast double %379, 5.000000e-01
  %399 = fmul fast <2 x double> %383, <double -4.186880e-01, double -8.131200e-02>
  %400 = extractelement <2 x double> %399, i64 0
  %401 = fadd fast double %400, %398
  %402 = extractelement <2 x double> %399, i64 1
  %403 = fadd fast double %401, %402
  %404 = fmul fast double %403, 0x3EF0001000100010
  %405 = fadd fast double %404, 5.000000e-01
  store double %405, ptr %14, align 8, !tbaa !33
  br label %441

406:                                              ; preds = %80
  %407 = uitofp i16 %64 to double
  %408 = fmul fast double %407, 2.988390e-01
  %409 = insertelement <2 x i16> poison, i16 %73, i64 0
  %410 = insertelement <2 x i16> %409, i16 %81, i64 1
  %411 = uitofp <2 x i16> %410 to <2 x double>
  %412 = fmul fast <2 x double> %411, <double 5.868110e-01, double 1.143500e-01>
  %413 = extractelement <2 x double> %412, i64 0
  %414 = fadd fast double %413, %408
  %415 = extractelement <2 x double> %412, i64 1
  %416 = fadd fast double %414, %415
  %417 = fmul fast double %416, 0x3EF0001000100010
  store double %417, ptr %12, align 8, !tbaa !33
  %418 = fmul fast double %407, -1.470000e-01
  %419 = fmul fast <2 x double> %411, <double -2.890000e-01, double 4.360000e-01>
  %420 = extractelement <2 x double> %419, i64 0
  %421 = fadd fast double %420, %418
  %422 = extractelement <2 x double> %419, i64 1
  %423 = fadd fast double %421, %422
  %424 = fmul fast double %423, 0x3EF0001000100010
  %425 = fadd fast double %424, 5.000000e-01
  store double %425, ptr %13, align 8, !tbaa !33
  %426 = fmul fast double %407, 0x3FE3AE147AE147AE
  %427 = fmul fast <2 x double> %411, <double -5.150000e-01, double -1.000000e-01>
  %428 = extractelement <2 x double> %427, i64 0
  %429 = fadd fast double %428, %426
  %430 = extractelement <2 x double> %427, i64 1
  %431 = fadd fast double %429, %430
  %432 = fmul fast double %431, 0x3EF0001000100010
  %433 = fadd fast double %432, 5.000000e-01
  store double %433, ptr %14, align 8, !tbaa !33
  br label %441

434:                                              ; preds = %80
  %435 = uitofp i16 %64 to double
  %436 = fmul fast double %435, 0x3EF0001000100010
  store double %436, ptr %12, align 8, !tbaa !33
  %437 = uitofp i16 %73 to double
  %438 = fmul fast double %437, 0x3EF0001000100010
  store double %438, ptr %13, align 8, !tbaa !33
  %439 = uitofp i16 %81 to double
  %440 = fmul fast double %439, 0x3EF0001000100010
  store double %440, ptr %14, align 8, !tbaa !33
  br label %441

441:                                              ; preds = %434, %406, %378, %350, %322, %294, %269, %230, %161, %160, %159, %149, %99, %98, %97, %96, %95, %94, %93, %83
  %442 = load double, ptr %12, align 8, !tbaa !33
  %443 = fmul fast double %442, 6.553500e+04
  %444 = fptrunc double %443 to float
  %445 = fcmp fast ugt float %444, 0.000000e+00
  br i1 %445, label %446, label %451

446:                                              ; preds = %441
  %447 = fcmp fast ult float %444, 6.553500e+04
  br i1 %447, label %448, label %451

448:                                              ; preds = %446
  %449 = fadd fast float %444, 5.000000e-01
  %450 = fptoui float %449 to i16
  br label %451

451:                                              ; preds = %441, %446, %448
  %452 = phi i16 [ %450, %448 ], [ 0, %441 ], [ -1, %446 ]
  store i16 %452, ptr %56, align 2, !tbaa !53
  %453 = load double, ptr %13, align 8, !tbaa !33
  %454 = fmul fast double %453, 6.553500e+04
  %455 = fptrunc double %454 to float
  %456 = fcmp fast ugt float %455, 0.000000e+00
  br i1 %456, label %457, label %462

457:                                              ; preds = %451
  %458 = fcmp fast ult float %455, 6.553500e+04
  br i1 %458, label %459, label %462

459:                                              ; preds = %457
  %460 = fadd fast float %455, 5.000000e-01
  %461 = fptoui float %460 to i16
  br label %462

462:                                              ; preds = %451, %457, %459
  %463 = phi i16 [ %461, %459 ], [ 0, %451 ], [ -1, %457 ]
  store i16 %463, ptr %65, align 2, !tbaa !54
  %464 = load double, ptr %14, align 8, !tbaa !33
  %465 = fmul fast double %464, 6.553500e+04
  %466 = fptrunc double %465 to float
  %467 = fcmp fast ugt float %466, 0.000000e+00
  br i1 %467, label %468, label %473

468:                                              ; preds = %462
  %469 = fcmp fast ult float %466, 6.553500e+04
  br i1 %469, label %470, label %473

470:                                              ; preds = %468
  %471 = fadd fast float %466, 5.000000e-01
  %472 = fptoui float %471 to i16
  br label %473

473:                                              ; preds = %462, %468, %470
  %474 = phi i16 [ %472, %470 ], [ 0, %462 ], [ -1, %468 ]
  store i16 %474, ptr %55, align 2, !tbaa !55
  %475 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 1
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #4
  %476 = add nuw nsw i64 %54, 1
  %477 = load ptr, ptr %2, align 8, !tbaa !6
  %478 = getelementptr inbounds %struct._Image, ptr %477, i64 0, i32 7
  %479 = load i64, ptr %478, align 8, !tbaa !61
  %480 = icmp slt i64 %476, %479
  br i1 %480, label %53, label %481, !llvm.loop !72

481:                                              ; preds = %473, %48
  %482 = load ptr, ptr %4, align 8, !tbaa !6
  %483 = load ptr, ptr %5, align 8, !tbaa !6
  %484 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %482, ptr noundef %483) #12
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %486, label %487

486:                                              ; preds = %481, %40
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %487

487:                                              ; preds = %486, %481, %36
  %488 = load i64, ptr %9, align 8, !tbaa !59
  %489 = icmp slt i64 %38, %488
  br i1 %489, label %33, label %490, !llvm.loop !73

490:                                              ; preds = %487
  %491 = load i64, ptr %8, align 8, !tbaa !59
  br label %492

492:                                              ; preds = %490, %26
  %493 = phi i64 [ %28, %26 ], [ %491, %490 ]
  %494 = phi i64 [ %27, %26 ], [ %488, %490 ]
  %495 = load i64, ptr %10, align 8, !tbaa !59
  %496 = add nsw i64 %495, %493
  store i64 %496, ptr %8, align 8, !tbaa !59
  %497 = add nsw i64 %495, %494
  %498 = call i64 @llvm.smin.i64(i64 %497, i64 %18)
  store i64 %498, ptr %9, align 8, !tbaa !59
  %499 = icmp sgt i64 %496, %498
  br i1 %499, label %500, label %26

500:                                              ; preds = %492, %20
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %21)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %501

501:                                              ; preds = %500, %7
  ret void
}

declare void @ConvertRGBToHCL(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHCLp(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSB(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSI(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSL(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSV(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHWB(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToLCHab(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToLCHuv(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @GetImageProperty(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: allocsize(0,1)
declare ptr @AcquireQuantumMemory(i64 noundef, i64 noundef) local_unnamed_addr #6

declare i32 @ThrowMagickException(ptr noundef, ptr noundef, ptr noundef, i64 noundef, i32 noundef, ptr noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.pow.f64(double, double) #7

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.11(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %6, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %7) #3 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 0, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 65535, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #4
  store i64 1, ptr %11, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #4
  store i32 0, ptr %12, align 4, !tbaa !60
  %13 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %13, i32 33, ptr nonnull %12, ptr nonnull %9, ptr nonnull %10, ptr nonnull %11, i64 1, i64 4)
  %14 = load i64, ptr %9, align 8, !tbaa !59
  %15 = load i64, ptr %10, align 8
  %16 = call i64 @llvm.smin.i64(i64 %15, i64 65535)
  store i64 %16, ptr %10, align 8, !tbaa !59
  %17 = icmp sgt i64 %14, %16
  br i1 %17, label %171, label %18

18:                                               ; preds = %8
  %19 = load double, ptr %3, align 8, !tbaa !33
  %20 = load double, ptr %4, align 8, !tbaa !33
  %21 = fsub fast double 1.000000e+00, %20
  %22 = load double, ptr %5, align 8, !tbaa !33
  %23 = load double, ptr %6, align 8, !tbaa !33
  %24 = load double, ptr %7, align 8, !tbaa !33
  %25 = fmul fast double %24, %23
  %26 = load ptr, ptr %2, align 8, !tbaa !6
  %27 = load i64, ptr %11, align 8, !tbaa !59
  %28 = insertelement <16 x double> poison, double %20, i64 0
  %29 = shufflevector <16 x double> %28, <16 x double> poison, <16 x i32> zeroinitializer
  %30 = insertelement <16 x double> poison, double %25, i64 0
  %31 = shufflevector <16 x double> %30, <16 x double> poison, <16 x i32> zeroinitializer
  %32 = insertelement <16 x double> poison, double %22, i64 0
  %33 = shufflevector <16 x double> %32, <16 x double> poison, <16 x i32> zeroinitializer
  %34 = insertelement <16 x double> poison, double %19, i64 0
  %35 = shufflevector <16 x double> %34, <16 x double> poison, <16 x i32> zeroinitializer
  %36 = fmul fast double %21, 0x3EF0001000100010
  %37 = insertelement <16 x double> poison, double %36, i64 0
  %38 = shufflevector <16 x double> %37, <16 x double> poison, <16 x i32> zeroinitializer
  %39 = fdiv fast <16 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %33
  %40 = insertelement <8 x double> poison, double %20, i64 0
  %41 = shufflevector <8 x double> %40, <8 x double> poison, <8 x i32> zeroinitializer
  %42 = insertelement <8 x double> poison, double %25, i64 0
  %43 = shufflevector <8 x double> %42, <8 x double> poison, <8 x i32> zeroinitializer
  %44 = insertelement <8 x double> poison, double %22, i64 0
  %45 = shufflevector <8 x double> %44, <8 x double> poison, <8 x i32> zeroinitializer
  %46 = insertelement <8 x double> poison, double %19, i64 0
  %47 = shufflevector <8 x double> %46, <8 x double> poison, <8 x i32> zeroinitializer
  %48 = fmul fast double %21, 0x3EF0001000100010
  %49 = insertelement <8 x double> poison, double %48, i64 0
  %50 = shufflevector <8 x double> %49, <8 x double> poison, <8 x i32> zeroinitializer
  %51 = fdiv fast <8 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %52 = fdiv fast double 1.000000e+00, %22
  br label %53

53:                                               ; preds = %18, %164
  %54 = phi i64 [ 0, %18 ], [ %169, %164 ]
  %55 = phi i64 [ %16, %18 ], [ %167, %164 ]
  %56 = phi i64 [ %14, %18 ], [ %165, %164 ]
  %57 = call i64 @llvm.smax.i64(i64 %55, i64 %56)
  %58 = mul i64 %27, %54
  %59 = add i64 %14, %58
  %60 = sub i64 %57, %59
  %61 = add i64 %60, 1
  %62 = icmp ult i64 %61, 8
  br i1 %62, label %137, label %63

63:                                               ; preds = %53
  %64 = icmp ult i64 %61, 16
  br i1 %64, label %102, label %65

65:                                               ; preds = %63
  %66 = and i64 %61, -16
  %67 = insertelement <16 x i64> poison, i64 %56, i64 0
  %68 = shufflevector <16 x i64> %67, <16 x i64> poison, <16 x i32> zeroinitializer
  %69 = add <16 x i64> %68, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %70 = add i64 %56, %66
  br label %71

71:                                               ; preds = %71, %65
  %72 = phi i64 [ 0, %65 ], [ %93, %71 ]
  %73 = phi <16 x i64> [ %69, %65 ], [ %94, %71 ]
  %74 = add i64 %56, %72
  %75 = sitofp <16 x i64> %73 to <16 x double>
  %76 = fmul fast <16 x double> %38, %75
  %77 = fadd fast <16 x double> %76, %29
  %78 = call fast <16 x double> @llvm.log10.v16f64(<16 x double> %77)
  %79 = fmul fast <16 x double> %31, %78
  %80 = fmul fast <16 x double> %79, <double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02>
  %81 = fmul fast <16 x double> %80, %39
  %82 = fadd fast <16 x double> %81, %35
  %83 = fmul fast <16 x double> %82, <double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000>
  %84 = fptrunc <16 x double> %83 to <16 x float>
  %85 = fpext <16 x float> %84 to <16 x double>
  %86 = fcmp fast ugt <16 x float> %84, zeroinitializer
  %87 = fcmp fast oge <16 x float> %84, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %88 = fadd fast <16 x double> %85, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %89 = fptoui <16 x double> %88 to <16 x i16>
  %90 = select <16 x i1> %87, <16 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <16 x i16> %89
  %91 = select <16 x i1> %86, <16 x i16> %90, <16 x i16> zeroinitializer
  %92 = getelementptr inbounds i16, ptr %26, i64 %74
  store <16 x i16> %91, ptr %92, align 2, !tbaa !63
  %93 = add nuw i64 %72, 16
  %94 = add <16 x i64> %73, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %95 = icmp eq i64 %93, %66
  br i1 %95, label %96, label %71, !llvm.loop !74

96:                                               ; preds = %71
  %97 = icmp eq i64 %61, %66
  br i1 %97, label %164, label %98

98:                                               ; preds = %96
  %99 = add i64 %56, %66
  %100 = and i64 %61, 8
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %137, label %102

102:                                              ; preds = %63, %98
  %103 = phi i64 [ %70, %98 ], [ %56, %63 ]
  %104 = phi i64 [ %66, %98 ], [ 0, %63 ]
  %105 = and i64 %61, -8
  %106 = add i64 %56, %105
  %107 = insertelement <8 x i64> poison, i64 %103, i64 0
  %108 = shufflevector <8 x i64> %107, <8 x i64> poison, <8 x i32> zeroinitializer
  %109 = add <8 x i64> %108, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  br label %110

110:                                              ; preds = %110, %102
  %111 = phi i64 [ %104, %102 ], [ %132, %110 ]
  %112 = phi <8 x i64> [ %109, %102 ], [ %133, %110 ]
  %113 = add i64 %56, %111
  %114 = sitofp <8 x i64> %112 to <8 x double>
  %115 = fmul fast <8 x double> %50, %114
  %116 = fadd fast <8 x double> %115, %41
  %117 = call fast <8 x double> @llvm.log10.v8f64(<8 x double> %116)
  %118 = fmul fast <8 x double> %43, %117
  %119 = fmul fast <8 x double> %118, <double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02>
  %120 = fmul fast <8 x double> %119, %51
  %121 = fadd fast <8 x double> %120, %47
  %122 = fmul fast <8 x double> %121, <double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000>
  %123 = fptrunc <8 x double> %122 to <8 x float>
  %124 = fpext <8 x float> %123 to <8 x double>
  %125 = fcmp fast ugt <8 x float> %123, zeroinitializer
  %126 = fcmp fast oge <8 x float> %123, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %127 = fadd fast <8 x double> %124, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %128 = fptoui <8 x double> %127 to <8 x i16>
  %129 = select <8 x i1> %126, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> %128
  %130 = select <8 x i1> %125, <8 x i16> %129, <8 x i16> zeroinitializer
  %131 = getelementptr inbounds i16, ptr %26, i64 %113
  store <8 x i16> %130, ptr %131, align 2, !tbaa !63
  %132 = add nuw i64 %111, 8
  %133 = add <8 x i64> %112, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %134 = icmp eq i64 %132, %105
  br i1 %134, label %135, label %110, !llvm.loop !75

135:                                              ; preds = %110
  %136 = icmp eq i64 %61, %105
  br i1 %136, label %164, label %137

137:                                              ; preds = %53, %98, %135
  %138 = phi i64 [ %56, %53 ], [ %99, %98 ], [ %106, %135 ]
  br label %139

139:                                              ; preds = %137, %159
  %140 = phi i64 [ %162, %159 ], [ %138, %137 ]
  %141 = sitofp i64 %140 to double
  %142 = fmul fast double %141, 0x3EF0001000100010
  %143 = fmul fast double %142, %21
  %144 = fadd fast double %143, %20
  %145 = call fast double @llvm.log10.f64(double %144)
  %146 = fmul fast double %25, %145
  %147 = fmul fast double %146, 5.000000e+02
  %148 = fmul fast double %147, %52
  %149 = fadd fast double %148, %19
  %150 = fmul fast double %149, 0x404FFFE000000000
  %151 = fptrunc double %150 to float
  %152 = fpext float %151 to double
  %153 = fcmp fast ugt float %151, 0.000000e+00
  br i1 %153, label %154, label %159

154:                                              ; preds = %139
  %155 = fcmp fast ult float %151, 6.553500e+04
  br i1 %155, label %156, label %159

156:                                              ; preds = %154
  %157 = fadd fast double %152, 5.000000e-01
  %158 = fptoui double %157 to i16
  br label %159

159:                                              ; preds = %139, %154, %156
  %160 = phi i16 [ %158, %156 ], [ 0, %139 ], [ -1, %154 ]
  %161 = getelementptr inbounds i16, ptr %26, i64 %140
  store i16 %160, ptr %161, align 2, !tbaa !63
  %162 = add nsw i64 %140, 1
  %163 = icmp slt i64 %140, %55
  br i1 %163, label %139, label %164, !llvm.loop !76

164:                                              ; preds = %159, %135, %96
  %165 = add nsw i64 %27, %56
  %166 = add nsw i64 %27, %55
  %167 = call i64 @llvm.smin.i64(i64 %166, i64 65535)
  %168 = icmp sgt i64 %165, %167
  %169 = add i64 %54, 1
  br i1 %168, label %170, label %53

170:                                              ; preds = %164
  store i64 %167, ptr %10, align 8, !tbaa !59
  store i64 %165, ptr %9, align 8, !tbaa !59
  br label %171

171:                                              ; preds = %170, %8
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.log10.f64(double) #7

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.12(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = load ptr, ptr %2, align 8, !tbaa !6
  %13 = getelementptr inbounds %struct._Image, ptr %12, i64 0, i32 8
  %14 = load i64, ptr %13, align 8, !tbaa !34
  %15 = add nsw i64 %14, -1
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %121

17:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %15, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %18 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %18, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %19 = load i64, ptr %9, align 8
  %20 = call i64 @llvm.smin.i64(i64 %19, i64 %15)
  store i64 %20, ptr %9, align 8, !tbaa !59
  %21 = load i64, ptr %8, align 8, !tbaa !59
  %22 = icmp sgt i64 %21, %20
  br i1 %22, label %120, label %23

23:                                               ; preds = %17, %112
  %24 = phi i64 [ %118, %112 ], [ %20, %17 ]
  %25 = phi i64 [ %116, %112 ], [ %21, %17 ]
  %26 = icmp sgt i64 %25, %24
  %27 = load i32, ptr %3, align 4
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %26, i1 true, i1 %28
  br i1 %29, label %112, label %33

30:                                               ; preds = %107
  %31 = add nsw i64 %35, 1
  %32 = load i32, ptr %3, align 4, !tbaa !10
  br label %33

33:                                               ; preds = %23, %30
  %34 = phi i32 [ %32, %30 ], [ %27, %23 ]
  %35 = phi i64 [ %31, %30 ], [ %25, %23 ]
  %36 = icmp eq i32 %34, 0
  br i1 %36, label %107, label %37

37:                                               ; preds = %33
  %38 = load ptr, ptr %4, align 8, !tbaa !6
  %39 = load ptr, ptr %2, align 8, !tbaa !6
  %40 = getelementptr inbounds %struct._Image, ptr %39, i64 0, i32 7
  %41 = load i64, ptr %40, align 8, !tbaa !61
  %42 = load ptr, ptr %5, align 8, !tbaa !6
  %43 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %38, i64 noundef 0, i64 noundef %35, i64 noundef %41, i64 noundef 1, ptr noundef %42) #12
  %44 = icmp eq ptr %43, null
  br i1 %44, label %106, label %45

45:                                               ; preds = %37
  %46 = load ptr, ptr %2, align 8, !tbaa !6
  %47 = getelementptr inbounds %struct._Image, ptr %46, i64 0, i32 7
  %48 = load i64, ptr %47, align 8, !tbaa !61
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %101, label %50

50:                                               ; preds = %45, %86
  %51 = phi i64 [ %99, %86 ], [ %48, %45 ]
  %52 = phi ptr [ %98, %86 ], [ %43, %45 ]
  %53 = getelementptr inbounds %struct._PixelPacket, ptr %52, i64 0, i32 2
  %54 = load i16, ptr %53, align 2, !tbaa !53
  %55 = uitofp i16 %54 to float
  %56 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %55) #12
  %57 = fcmp fast ugt float %56, 0.000000e+00
  br i1 %57, label %58, label %63

58:                                               ; preds = %50
  %59 = fcmp fast ult float %56, 6.553500e+04
  br i1 %59, label %60, label %63

60:                                               ; preds = %58
  %61 = fadd fast float %56, 5.000000e-01
  %62 = fptoui float %61 to i16
  br label %63

63:                                               ; preds = %50, %58, %60
  %64 = phi i16 [ %62, %60 ], [ 0, %50 ], [ -1, %58 ]
  %65 = getelementptr inbounds %struct._PixelPacket, ptr %52, i64 0, i32 1
  %66 = load i16, ptr %65, align 2, !tbaa !54
  %67 = uitofp i16 %66 to float
  %68 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %67) #12
  %69 = fcmp fast ugt float %68, 0.000000e+00
  br i1 %69, label %70, label %75

70:                                               ; preds = %63
  %71 = fcmp fast ult float %68, 6.553500e+04
  br i1 %71, label %72, label %75

72:                                               ; preds = %70
  %73 = fadd fast float %68, 5.000000e-01
  %74 = fptoui float %73 to i16
  br label %75

75:                                               ; preds = %63, %70, %72
  %76 = phi i16 [ %74, %72 ], [ 0, %63 ], [ -1, %70 ]
  %77 = load i16, ptr %52, align 2, !tbaa !55
  %78 = uitofp i16 %77 to float
  %79 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %78) #12
  %80 = fcmp fast ugt float %79, 0.000000e+00
  br i1 %80, label %81, label %86

81:                                               ; preds = %75
  %82 = fcmp fast ult float %79, 6.553500e+04
  br i1 %82, label %83, label %86

83:                                               ; preds = %81
  %84 = fadd fast float %79, 5.000000e-01
  %85 = fptoui float %84 to i16
  br label %86

86:                                               ; preds = %75, %81, %83
  %87 = phi i16 [ %85, %83 ], [ 0, %75 ], [ -1, %81 ]
  %88 = load ptr, ptr %6, align 8, !tbaa !6
  %89 = zext i16 %64 to i64
  %90 = getelementptr inbounds i16, ptr %88, i64 %89
  %91 = load i16, ptr %90, align 2, !tbaa !63
  store i16 %91, ptr %53, align 2, !tbaa !53
  %92 = zext i16 %76 to i64
  %93 = getelementptr inbounds i16, ptr %88, i64 %92
  %94 = load i16, ptr %93, align 2, !tbaa !63
  store i16 %94, ptr %65, align 2, !tbaa !54
  %95 = zext i16 %87 to i64
  %96 = getelementptr inbounds i16, ptr %88, i64 %95
  %97 = load i16, ptr %96, align 2, !tbaa !63
  store i16 %97, ptr %52, align 2, !tbaa !55
  %98 = getelementptr inbounds %struct._PixelPacket, ptr %52, i64 1
  %99 = add nsw i64 %51, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %50, !llvm.loop !77

101:                                              ; preds = %86, %45
  %102 = load ptr, ptr %4, align 8, !tbaa !6
  %103 = load ptr, ptr %5, align 8, !tbaa !6
  %104 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %102, ptr noundef %103) #12
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %101, %37
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %107

107:                                              ; preds = %106, %101, %33
  %108 = load i64, ptr %9, align 8, !tbaa !59
  %109 = icmp slt i64 %35, %108
  br i1 %109, label %30, label %110, !llvm.loop !78

110:                                              ; preds = %107
  %111 = load i64, ptr %8, align 8, !tbaa !59
  br label %112

112:                                              ; preds = %110, %23
  %113 = phi i64 [ %25, %23 ], [ %111, %110 ]
  %114 = phi i64 [ %24, %23 ], [ %108, %110 ]
  %115 = load i64, ptr %10, align 8, !tbaa !59
  %116 = add nsw i64 %115, %113
  store i64 %116, ptr %8, align 8, !tbaa !59
  %117 = add nsw i64 %115, %114
  %118 = call i64 @llvm.smin.i64(i64 %117, i64 %15)
  store i64 %118, ptr %9, align 8, !tbaa !59
  %119 = icmp sgt i64 %116, %118
  br i1 %119, label %120, label %23

120:                                              ; preds = %112, %17
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %18)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %121

121:                                              ; preds = %120, %7
  ret void
}

; Function Attrs: hot
declare nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf)) local_unnamed_addr #5

declare ptr @RelinquishMagickMemory(ptr noundef) local_unnamed_addr #2

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.13(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5) #3 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = load ptr, ptr %2, align 8, !tbaa !6
  %12 = getelementptr inbounds %struct._Image, ptr %11, i64 0, i32 8
  %13 = load i64, ptr %12, align 8, !tbaa !34
  %14 = add nsw i64 %13, -1
  %15 = icmp sgt i64 %13, 0
  br i1 %15, label %16, label %113

16:                                               ; preds = %6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 0, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 %14, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 1, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #4
  store i32 0, ptr %10, align 4, !tbaa !60
  %17 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %17, i32 33, ptr nonnull %10, ptr nonnull %7, ptr nonnull %8, ptr nonnull %9, i64 1, i64 4)
  %18 = load i64, ptr %8, align 8
  %19 = call i64 @llvm.smin.i64(i64 %18, i64 %14)
  store i64 %19, ptr %8, align 8, !tbaa !59
  %20 = load i64, ptr %7, align 8, !tbaa !59
  %21 = icmp sgt i64 %20, %19
  br i1 %21, label %112, label %22

22:                                               ; preds = %16, %104
  %23 = phi i64 [ %110, %104 ], [ %19, %16 ]
  %24 = phi i64 [ %108, %104 ], [ %20, %16 ]
  %25 = icmp sgt i64 %24, %23
  %26 = load i32, ptr %3, align 4
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %25, i1 true, i1 %27
  br i1 %28, label %104, label %32

29:                                               ; preds = %99
  %30 = add nsw i64 %34, 1
  %31 = load i32, ptr %3, align 4, !tbaa !10
  br label %32

32:                                               ; preds = %22, %29
  %33 = phi i32 [ %31, %29 ], [ %26, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %24, %22 ]
  %35 = icmp eq i32 %33, 0
  br i1 %35, label %99, label %36

36:                                               ; preds = %32
  %37 = load ptr, ptr %4, align 8, !tbaa !6
  %38 = load ptr, ptr %2, align 8, !tbaa !6
  %39 = getelementptr inbounds %struct._Image, ptr %38, i64 0, i32 7
  %40 = load i64, ptr %39, align 8, !tbaa !61
  %41 = load ptr, ptr %5, align 8, !tbaa !6
  %42 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %37, i64 noundef 0, i64 noundef %34, i64 noundef %40, i64 noundef 1, ptr noundef %41) #12
  %43 = icmp eq ptr %42, null
  br i1 %43, label %98, label %44

44:                                               ; preds = %36
  %45 = load ptr, ptr %2, align 8, !tbaa !6
  %46 = getelementptr inbounds %struct._Image, ptr %45, i64 0, i32 7
  %47 = load i64, ptr %46, align 8, !tbaa !61
  %48 = icmp sgt i64 %47, 0
  br i1 %48, label %49, label %93

49:                                               ; preds = %44, %85
  %50 = phi i64 [ %88, %85 ], [ 0, %44 ]
  %51 = phi ptr [ %87, %85 ], [ %42, %44 ]
  %52 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 0, i32 2
  %53 = load i16, ptr %52, align 2, !tbaa !53
  %54 = uitofp i16 %53 to float
  %55 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %54) #12
  %56 = fcmp fast ugt float %55, 0.000000e+00
  br i1 %56, label %57, label %62

57:                                               ; preds = %49
  %58 = fcmp fast ult float %55, 6.553500e+04
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = fadd fast float %55, 5.000000e-01
  %61 = fptoui float %60 to i16
  br label %62

62:                                               ; preds = %49, %57, %59
  %63 = phi i16 [ %61, %59 ], [ 0, %49 ], [ -1, %57 ]
  %64 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 0, i32 1
  %65 = load i16, ptr %64, align 2, !tbaa !54
  %66 = uitofp i16 %65 to float
  %67 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %66) #12
  %68 = fcmp fast ugt float %67, 0.000000e+00
  br i1 %68, label %69, label %74

69:                                               ; preds = %62
  %70 = fcmp fast ult float %67, 6.553500e+04
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = fadd fast float %67, 5.000000e-01
  %73 = fptoui float %72 to i16
  br label %74

74:                                               ; preds = %62, %69, %71
  %75 = phi i16 [ %73, %71 ], [ 0, %62 ], [ -1, %69 ]
  %76 = load i16, ptr %51, align 2, !tbaa !55
  %77 = uitofp i16 %76 to float
  %78 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %77) #12
  %79 = fcmp fast ugt float %78, 0.000000e+00
  br i1 %79, label %80, label %85

80:                                               ; preds = %74
  %81 = fcmp fast ult float %78, 6.553500e+04
  br i1 %81, label %82, label %85

82:                                               ; preds = %80
  %83 = fadd fast float %78, 5.000000e-01
  %84 = fptoui float %83 to i16
  br label %85

85:                                               ; preds = %74, %80, %82
  %86 = phi i16 [ %84, %82 ], [ 0, %74 ], [ -1, %80 ]
  store i16 %63, ptr %52, align 2, !tbaa !53
  store i16 %75, ptr %64, align 2, !tbaa !54
  store i16 %86, ptr %51, align 2, !tbaa !55
  %87 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 1
  %88 = add nuw nsw i64 %50, 1
  %89 = load ptr, ptr %2, align 8, !tbaa !6
  %90 = getelementptr inbounds %struct._Image, ptr %89, i64 0, i32 7
  %91 = load i64, ptr %90, align 8, !tbaa !61
  %92 = icmp slt i64 %88, %91
  br i1 %92, label %49, label %93, !llvm.loop !79

93:                                               ; preds = %85, %44
  %94 = load ptr, ptr %4, align 8, !tbaa !6
  %95 = load ptr, ptr %5, align 8, !tbaa !6
  %96 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %94, ptr noundef %95) #12
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %93, %36
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %99

99:                                               ; preds = %98, %93, %32
  %100 = load i64, ptr %8, align 8, !tbaa !59
  %101 = icmp slt i64 %34, %100
  br i1 %101, label %29, label %102, !llvm.loop !80

102:                                              ; preds = %99
  %103 = load i64, ptr %7, align 8, !tbaa !59
  br label %104

104:                                              ; preds = %102, %22
  %105 = phi i64 [ %24, %22 ], [ %103, %102 ]
  %106 = phi i64 [ %23, %22 ], [ %100, %102 ]
  %107 = load i64, ptr %9, align 8, !tbaa !59
  %108 = add nsw i64 %107, %105
  store i64 %108, ptr %7, align 8, !tbaa !59
  %109 = add nsw i64 %107, %106
  %110 = call i64 @llvm.smin.i64(i64 %109, i64 %14)
  store i64 %110, ptr %8, align 8, !tbaa !59
  %111 = icmp sgt i64 %108, %110
  br i1 %111, label %112, label %22

112:                                              ; preds = %104, %16
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  br label %113

113:                                              ; preds = %112, %6
  ret void
}

declare ptr @ResetMagickMemory(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #2

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.14(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %171, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %164
  %26 = phi i64 [ 0, %15 ], [ %169, %164 ]
  %27 = phi i64 [ %13, %15 ], [ %167, %164 ]
  %28 = phi i64 [ %11, %15 ], [ %165, %164 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 28
  br i1 %34, label %139, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %139, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %134, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %135, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fmul fast <4 x double> %112, <double 3.333300e-01, double 3.333300e-01, double 3.333300e-01, double 3.333300e-01>
  %114 = fptrunc <4 x double> %113 to <4 x float>
  %115 = fmul fast <4 x double> %112, <double 3.333400e-01, double 3.333400e-01, double 3.333400e-01, double 3.333400e-01>
  %116 = fptrunc <4 x double> %115 to <4 x float>
  %117 = fmul fast <4 x double> %112, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %118 = fptrunc <4 x double> %117 to <4 x float>
  %119 = fmul fast <4 x double> %112, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %120 = fptrunc <4 x double> %119 to <4 x float>
  %121 = fmul fast <4 x double> %112, <double -2.500000e-01, double -2.500000e-01, double -2.500000e-01, double -2.500000e-01>
  %122 = fptrunc <4 x double> %121 to <4 x float>
  %123 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %124 = shufflevector <4 x float> %114, <4 x float> %118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %125 = shufflevector <4 x float> %122, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %126 = shufflevector <8 x float> %124, <8 x float> %125, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %126, ptr %123, align 4, !tbaa !37
  %127 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %128 = shufflevector <4 x float> %116, <4 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %129 = shufflevector <4 x float> %118, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %130 = shufflevector <8 x float> %128, <8 x float> %129, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %130, ptr %127, align 4, !tbaa !37
  %131 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %132 = shufflevector <4 x float> %114, <4 x float> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %133 = shufflevector <8 x float> %132, <8 x float> %125, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %133, ptr %131, align 4, !tbaa !37
  %134 = add nuw i64 %109, 4
  %135 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %136 = icmp eq i64 %134, %103
  br i1 %136, label %137, label %108, !llvm.loop !81

137:                                              ; preds = %108
  %138 = icmp eq i64 %33, %103
  br i1 %138, label %164, label %139

139:                                              ; preds = %35, %25, %137
  %140 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %137 ]
  br label %141

141:                                              ; preds = %139, %141
  %142 = phi i64 [ %162, %141 ], [ %140, %139 ]
  %143 = sitofp i64 %142 to double
  %144 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %142
  %145 = fmul fast double %143, 3.333400e-01
  %146 = fptrunc double %145 to float
  %147 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %142
  %148 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %142
  %149 = insertelement <2 x double> poison, double %143, i64 0
  %150 = shufflevector <2 x double> %149, <2 x double> poison, <2 x i32> zeroinitializer
  %151 = fmul fast <2 x double> %150, <double 3.333300e-01, double 5.000000e-01>
  %152 = fptrunc <2 x double> %151 to <2 x float>
  store <2 x float> %152, ptr %144, align 4, !tbaa !37
  store float %146, ptr %147, align 4, !tbaa !56
  %153 = extractelement <2 x float> %152, i64 0
  store float %153, ptr %148, align 4, !tbaa !56
  %154 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %142, i32 1
  store float 0.000000e+00, ptr %154, align 4, !tbaa !57
  %155 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %142, i32 1
  %156 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %142, i32 2
  %157 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %142, i32 2
  %158 = extractelement <2 x float> %152, i64 1
  %159 = fmul fast <2 x double> %150, <double -5.000000e-01, double -2.500000e-01>
  %160 = fptrunc <2 x double> %159 to <2 x float>
  %161 = extractelement <2 x float> %160, i64 1
  store float %161, ptr %156, align 4, !tbaa !43
  store float %158, ptr %157, align 4, !tbaa !43
  store <2 x float> %160, ptr %155, align 4, !tbaa !37
  %162 = add nsw i64 %142, 1
  %163 = icmp slt i64 %142, %27
  br i1 %163, label %141, label %164, !llvm.loop !82

164:                                              ; preds = %141, %137
  %165 = add nsw i64 %19, %28
  %166 = add nsw i64 %19, %27
  %167 = call i64 @llvm.smin.i64(i64 %166, i64 65535)
  %168 = icmp sgt i64 %165, %167
  %169 = add i64 %26, 1
  br i1 %168, label %170, label %25

170:                                              ; preds = %164
  store i64 %167, ptr %7, align 8, !tbaa !59
  store i64 %165, ptr %6, align 8, !tbaa !59
  br label %171

171:                                              ; preds = %170, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.15(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %49, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  br label %20

20:                                               ; preds = %15, %43
  %21 = phi i64 [ %13, %15 ], [ %46, %43 ]
  %22 = phi i64 [ %11, %15 ], [ %44, %43 ]
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %22, %20 ], [ %41, %23 ]
  %25 = sitofp i64 %24 to double
  %26 = fmul fast double %25, 2.988390e-01
  %27 = fptrunc double %26 to float
  %28 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24
  store float %27, ptr %28, align 4, !tbaa !56
  %29 = fmul fast double %25, 5.868110e-01
  %30 = fptrunc double %29 to float
  %31 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24
  store float %30, ptr %31, align 4, !tbaa !56
  %32 = fmul fast double %25, 1.143500e-01
  %33 = fptrunc double %32 to float
  %34 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24
  store float %33, ptr %34, align 4, !tbaa !56
  %35 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24, i32 1
  store float %27, ptr %35, align 4, !tbaa !57
  %36 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 1
  store float %30, ptr %36, align 4, !tbaa !57
  %37 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 1
  store float %33, ptr %37, align 4, !tbaa !57
  %38 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24, i32 2
  store float %27, ptr %38, align 4, !tbaa !43
  %39 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 2
  store float %30, ptr %39, align 4, !tbaa !43
  %40 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 2
  store float %33, ptr %40, align 4, !tbaa !43
  %41 = add nsw i64 %24, 1
  %42 = icmp slt i64 %24, %21
  br i1 %42, label %23, label %43

43:                                               ; preds = %23
  %44 = add nsw i64 %19, %22
  %45 = add nsw i64 %19, %21
  %46 = call i64 @llvm.smin.i64(i64 %45, i64 65535)
  %47 = icmp sgt i64 %44, %46
  br i1 %47, label %48, label %20

48:                                               ; preds = %43
  store i64 %46, ptr %7, align 8, !tbaa !59
  store i64 %44, ptr %6, align 8, !tbaa !59
  br label %49

49:                                               ; preds = %48, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.16(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %179, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %172
  %26 = phi i64 [ 0, %15 ], [ %177, %172 ]
  %27 = phi i64 [ %13, %15 ], [ %175, %172 ]
  %28 = phi i64 [ %11, %15 ], [ %173, %172 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 12
  br i1 %34, label %146, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %146, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %141, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %142, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fmul fast <4 x double> %112, <double 2.988390e-01, double 2.988390e-01, double 2.988390e-01, double 2.988390e-01>
  %114 = fptrunc <4 x double> %113 to <4 x float>
  %115 = fmul fast <4 x double> %112, <double 5.868110e-01, double 5.868110e-01, double 5.868110e-01, double 5.868110e-01>
  %116 = fptrunc <4 x double> %115 to <4 x float>
  %117 = fmul fast <4 x double> %112, <double 1.143500e-01, double 1.143500e-01, double 1.143500e-01, double 1.143500e-01>
  %118 = fptrunc <4 x double> %117 to <4 x float>
  %119 = fmul fast <4 x double> %112, <double 0xBFC5992A08114679, double 0xBFC5992A08114679, double 0xBFC5992A08114679, double 0xBFC5992A08114679>
  %120 = fptrunc <4 x double> %119 to <4 x float>
  %121 = fmul fast <4 x double> %112, <double -3.312640e-01, double -3.312640e-01, double -3.312640e-01, double -3.312640e-01>
  %122 = fptrunc <4 x double> %121 to <4 x float>
  %123 = fmul fast <4 x double> %112, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %124 = fptrunc <4 x double> %123 to <4 x float>
  %125 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %126 = shufflevector <4 x float> %114, <4 x float> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %127 = shufflevector <4 x float> %124, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %128 = shufflevector <8 x float> %126, <8 x float> %127, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %128, ptr %125, align 4, !tbaa !37
  %129 = fmul fast <4 x double> %112, <double -4.186880e-01, double -4.186880e-01, double -4.186880e-01, double -4.186880e-01>
  %130 = fptrunc <4 x double> %129 to <4 x float>
  %131 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %132 = shufflevector <4 x float> %116, <4 x float> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %133 = shufflevector <4 x float> %130, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %134 = shufflevector <8 x float> %132, <8 x float> %133, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %134, ptr %131, align 4, !tbaa !37
  %135 = fmul fast <4 x double> %112, <double -8.131200e-02, double -8.131200e-02, double -8.131200e-02, double -8.131200e-02>
  %136 = fptrunc <4 x double> %135 to <4 x float>
  %137 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %138 = shufflevector <4 x float> %118, <4 x float> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %139 = shufflevector <4 x float> %136, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %140 = shufflevector <8 x float> %138, <8 x float> %139, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %140, ptr %137, align 4, !tbaa !37
  %141 = add nuw i64 %109, 4
  %142 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %143 = icmp eq i64 %141, %103
  br i1 %143, label %144, label %108, !llvm.loop !83

144:                                              ; preds = %108
  %145 = icmp eq i64 %33, %103
  br i1 %145, label %172, label %146

146:                                              ; preds = %35, %25, %144
  %147 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %144 ]
  br label %148

148:                                              ; preds = %146, %148
  %149 = phi i64 [ %170, %148 ], [ %147, %146 ]
  %150 = sitofp i64 %149 to double
  %151 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %149
  %152 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %149
  %153 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %149
  %154 = insertelement <2 x double> poison, double %150, i64 0
  %155 = shufflevector <2 x double> %154, <2 x double> poison, <2 x i32> zeroinitializer
  %156 = fmul fast <2 x double> %155, <double 2.988390e-01, double 0xBFC5992A08114679>
  %157 = fptrunc <2 x double> %156 to <2 x float>
  store <2 x float> %157, ptr %151, align 4, !tbaa !37
  %158 = fmul fast <2 x double> %155, <double 5.868110e-01, double -3.312640e-01>
  %159 = fptrunc <2 x double> %158 to <2 x float>
  store <2 x float> %159, ptr %152, align 4, !tbaa !37
  %160 = fmul fast <2 x double> %155, <double 1.143500e-01, double 5.000000e-01>
  %161 = fptrunc <2 x double> %160 to <2 x float>
  store <2 x float> %161, ptr %153, align 4, !tbaa !37
  %162 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %149, i32 2
  %163 = extractelement <2 x float> %161, i64 1
  store float %163, ptr %162, align 4, !tbaa !43
  %164 = fmul fast double %150, -4.186880e-01
  %165 = fptrunc double %164 to float
  %166 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %149, i32 2
  store float %165, ptr %166, align 4, !tbaa !43
  %167 = fmul fast double %150, -8.131200e-02
  %168 = fptrunc double %167 to float
  %169 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %149, i32 2
  store float %168, ptr %169, align 4, !tbaa !43
  %170 = add nsw i64 %149, 1
  %171 = icmp slt i64 %149, %27
  br i1 %171, label %148, label %172, !llvm.loop !84

172:                                              ; preds = %148, %144
  %173 = add nsw i64 %19, %28
  %174 = add nsw i64 %19, %27
  %175 = call i64 @llvm.smin.i64(i64 %174, i64 65535)
  %176 = icmp sgt i64 %173, %175
  %177 = add i64 %26, 1
  br i1 %176, label %178, label %25

178:                                              ; preds = %172
  store i64 %175, ptr %7, align 8, !tbaa !59
  store i64 %173, ptr %6, align 8, !tbaa !59
  br label %179

179:                                              ; preds = %178, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.17(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %49, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  br label %20

20:                                               ; preds = %15, %43
  %21 = phi i64 [ %13, %15 ], [ %46, %43 ]
  %22 = phi i64 [ %11, %15 ], [ %44, %43 ]
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %22, %20 ], [ %41, %23 ]
  %25 = sitofp i64 %24 to double
  %26 = fmul fast double %25, 2.126560e-01
  %27 = fptrunc double %26 to float
  %28 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24
  store float %27, ptr %28, align 4, !tbaa !56
  %29 = fmul fast double %25, 0x3FE6E29307AF20EA
  %30 = fptrunc double %29 to float
  %31 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24
  store float %30, ptr %31, align 4, !tbaa !56
  %32 = fmul fast double %25, 7.218600e-02
  %33 = fptrunc double %32 to float
  %34 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24
  store float %33, ptr %34, align 4, !tbaa !56
  %35 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24, i32 1
  store float %27, ptr %35, align 4, !tbaa !57
  %36 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 1
  store float %30, ptr %36, align 4, !tbaa !57
  %37 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 1
  store float %33, ptr %37, align 4, !tbaa !57
  %38 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24, i32 2
  store float %27, ptr %38, align 4, !tbaa !43
  %39 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 2
  store float %30, ptr %39, align 4, !tbaa !43
  %40 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 2
  store float %33, ptr %40, align 4, !tbaa !43
  %41 = add nsw i64 %24, 1
  %42 = icmp slt i64 %24, %21
  br i1 %42, label %23, label %43

43:                                               ; preds = %23
  %44 = add nsw i64 %19, %22
  %45 = add nsw i64 %19, %21
  %46 = call i64 @llvm.smin.i64(i64 %45, i64 65535)
  %47 = icmp sgt i64 %44, %46
  br i1 %47, label %48, label %20

48:                                               ; preds = %43
  store i64 %46, ptr %7, align 8, !tbaa !59
  store i64 %44, ptr %6, align 8, !tbaa !59
  br label %49

49:                                               ; preds = %48, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.18(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %179, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %172
  %26 = phi i64 [ 0, %15 ], [ %177, %172 ]
  %27 = phi i64 [ %13, %15 ], [ %175, %172 ]
  %28 = phi i64 [ %11, %15 ], [ %173, %172 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 12
  br i1 %34, label %146, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %146, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %141, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %142, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fmul fast <4 x double> %112, <double 2.126560e-01, double 2.126560e-01, double 2.126560e-01, double 2.126560e-01>
  %114 = fptrunc <4 x double> %113 to <4 x float>
  %115 = fmul fast <4 x double> %112, <double 0x3FE6E29307AF20EA, double 0x3FE6E29307AF20EA, double 0x3FE6E29307AF20EA, double 0x3FE6E29307AF20EA>
  %116 = fptrunc <4 x double> %115 to <4 x float>
  %117 = fmul fast <4 x double> %112, <double 7.218600e-02, double 7.218600e-02, double 7.218600e-02, double 7.218600e-02>
  %118 = fptrunc <4 x double> %117 to <4 x float>
  %119 = fmul fast <4 x double> %112, <double -1.145720e-01, double -1.145720e-01, double -1.145720e-01, double -1.145720e-01>
  %120 = fptrunc <4 x double> %119 to <4 x float>
  %121 = fmul fast <4 x double> %112, <double -3.854280e-01, double -3.854280e-01, double -3.854280e-01, double -3.854280e-01>
  %122 = fptrunc <4 x double> %121 to <4 x float>
  %123 = fmul fast <4 x double> %112, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %124 = fptrunc <4 x double> %123 to <4 x float>
  %125 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %126 = shufflevector <4 x float> %114, <4 x float> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %127 = shufflevector <4 x float> %124, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %128 = shufflevector <8 x float> %126, <8 x float> %127, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %128, ptr %125, align 4, !tbaa !37
  %129 = fmul fast <4 x double> %112, <double -4.541530e-01, double -4.541530e-01, double -4.541530e-01, double -4.541530e-01>
  %130 = fptrunc <4 x double> %129 to <4 x float>
  %131 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %132 = shufflevector <4 x float> %116, <4 x float> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %133 = shufflevector <4 x float> %130, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %134 = shufflevector <8 x float> %132, <8 x float> %133, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %134, ptr %131, align 4, !tbaa !37
  %135 = fmul fast <4 x double> %112, <double -4.584700e-02, double -4.584700e-02, double -4.584700e-02, double -4.584700e-02>
  %136 = fptrunc <4 x double> %135 to <4 x float>
  %137 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %138 = shufflevector <4 x float> %118, <4 x float> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %139 = shufflevector <4 x float> %136, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %140 = shufflevector <8 x float> %138, <8 x float> %139, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %140, ptr %137, align 4, !tbaa !37
  %141 = add nuw i64 %109, 4
  %142 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %143 = icmp eq i64 %141, %103
  br i1 %143, label %144, label %108, !llvm.loop !85

144:                                              ; preds = %108
  %145 = icmp eq i64 %33, %103
  br i1 %145, label %172, label %146

146:                                              ; preds = %35, %25, %144
  %147 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %144 ]
  br label %148

148:                                              ; preds = %146, %148
  %149 = phi i64 [ %170, %148 ], [ %147, %146 ]
  %150 = sitofp i64 %149 to double
  %151 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %149
  %152 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %149
  %153 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %149
  %154 = insertelement <2 x double> poison, double %150, i64 0
  %155 = shufflevector <2 x double> %154, <2 x double> poison, <2 x i32> zeroinitializer
  %156 = fmul fast <2 x double> %155, <double 2.126560e-01, double -1.145720e-01>
  %157 = fptrunc <2 x double> %156 to <2 x float>
  store <2 x float> %157, ptr %151, align 4, !tbaa !37
  %158 = fmul fast <2 x double> %155, <double 0x3FE6E29307AF20EA, double -3.854280e-01>
  %159 = fptrunc <2 x double> %158 to <2 x float>
  store <2 x float> %159, ptr %152, align 4, !tbaa !37
  %160 = fmul fast <2 x double> %155, <double 7.218600e-02, double 5.000000e-01>
  %161 = fptrunc <2 x double> %160 to <2 x float>
  store <2 x float> %161, ptr %153, align 4, !tbaa !37
  %162 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %149, i32 2
  %163 = extractelement <2 x float> %161, i64 1
  store float %163, ptr %162, align 4, !tbaa !43
  %164 = fmul fast double %150, -4.541530e-01
  %165 = fptrunc double %164 to float
  %166 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %149, i32 2
  store float %165, ptr %166, align 4, !tbaa !43
  %167 = fmul fast double %150, -4.584700e-02
  %168 = fptrunc double %167 to float
  %169 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %149, i32 2
  store float %168, ptr %169, align 4, !tbaa !43
  %170 = add nsw i64 %149, 1
  %171 = icmp slt i64 %149, %27
  br i1 %171, label %148, label %172, !llvm.loop !86

172:                                              ; preds = %148, %144
  %173 = add nsw i64 %19, %28
  %174 = add nsw i64 %19, %27
  %175 = call i64 @llvm.smin.i64(i64 %174, i64 65535)
  %176 = icmp sgt i64 %173, %175
  %177 = add i64 %26, 1
  br i1 %176, label %178, label %25

178:                                              ; preds = %172
  store i64 %175, ptr %7, align 8, !tbaa !59
  store i64 %173, ptr %6, align 8, !tbaa !59
  br label %179

179:                                              ; preds = %178, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.19(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %43, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  br label %20

20:                                               ; preds = %15, %37
  %21 = phi i64 [ %13, %15 ], [ %40, %37 ]
  %22 = phi i64 [ %11, %15 ], [ %38, %37 ]
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %22, %20 ], [ %35, %23 ]
  %25 = sitofp i64 %24 to double
  %26 = fptrunc double %25 to float
  %27 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24
  store float %26, ptr %27, align 4, !tbaa !56
  %28 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24
  store float 0.000000e+00, ptr %28, align 4, !tbaa !56
  %29 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24
  store float 0.000000e+00, ptr %29, align 4, !tbaa !56
  %30 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24, i32 1
  %31 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 1
  %32 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 1
  store <2 x float> zeroinitializer, ptr %30, align 4, !tbaa !37
  store float %26, ptr %31, align 4, !tbaa !57
  store float 0.000000e+00, ptr %32, align 4, !tbaa !57
  %33 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 2
  store float 0.000000e+00, ptr %33, align 4, !tbaa !43
  %34 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 2
  store float %26, ptr %34, align 4, !tbaa !43
  %35 = add nsw i64 %24, 1
  %36 = icmp slt i64 %24, %21
  br i1 %36, label %23, label %37

37:                                               ; preds = %23
  %38 = add nsw i64 %19, %22
  %39 = add nsw i64 %19, %21
  %40 = call i64 @llvm.smin.i64(i64 %39, i64 65535)
  %41 = icmp sgt i64 %38, %40
  br i1 %41, label %42, label %20

42:                                               ; preds = %37
  store i64 %40, ptr %7, align 8, !tbaa !59
  store i64 %38, ptr %6, align 8, !tbaa !59
  br label %43

43:                                               ; preds = %42, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @RGBTransformImage.omp_outlined.20(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %6, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %7, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %8, ptr nocapture noundef nonnull readonly align 8 dereferenceable(24) %9, ptr nocapture noundef nonnull align 8 dereferenceable(8) %10) #3 {
  %12 = alloca [4096 x i8], align 16
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = load ptr, ptr %2, align 8, !tbaa !6
  %18 = getelementptr inbounds %struct._Image, ptr %17, i64 0, i32 8
  %19 = load i64, ptr %18, align 8, !tbaa !34
  %20 = add nsw i64 %19, -1
  %21 = icmp sgt i64 %19, 0
  br i1 %21, label %22, label %197

22:                                               ; preds = %11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #4
  store i64 0, ptr %13, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #4
  store i64 %20, ptr %14, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #4
  store i64 1, ptr %15, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16) #4
  store i32 0, ptr %16, align 4, !tbaa !60
  %23 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %23, i32 33, ptr nonnull %16, ptr nonnull %13, ptr nonnull %14, ptr nonnull %15, i64 1, i64 4)
  %24 = load i64, ptr %14, align 8
  %25 = call i64 @llvm.smin.i64(i64 %24, i64 %20)
  store i64 %25, ptr %14, align 8, !tbaa !59
  %26 = load i64, ptr %13, align 8, !tbaa !59
  %27 = icmp sgt i64 %26, %25
  br i1 %27, label %196, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 1
  %30 = getelementptr inbounds %struct._PrimaryInfo, ptr %9, i64 0, i32 2
  br label %31

31:                                               ; preds = %28, %188
  %32 = phi i64 [ %25, %28 ], [ %194, %188 ]
  %33 = phi i64 [ %26, %28 ], [ %192, %188 ]
  %34 = icmp sgt i64 %33, %32
  br i1 %34, label %188, label %35

35:                                               ; preds = %31, %182
  %36 = phi i64 [ %183, %182 ], [ %33, %31 ]
  %37 = load i32, ptr %3, align 4, !tbaa !10
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %182, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %4, align 8, !tbaa !6
  %41 = load ptr, ptr %2, align 8, !tbaa !6
  %42 = getelementptr inbounds %struct._Image, ptr %41, i64 0, i32 7
  %43 = load i64, ptr %42, align 8, !tbaa !61
  %44 = load ptr, ptr %5, align 8, !tbaa !6
  %45 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %40, i64 noundef 0, i64 noundef %36, i64 noundef %43, i64 noundef 1, ptr noundef %44) #12
  %46 = icmp eq ptr %45, null
  br i1 %46, label %181, label %47

47:                                               ; preds = %39
  %48 = load ptr, ptr %2, align 8, !tbaa !6
  %49 = getelementptr inbounds %struct._Image, ptr %48, i64 0, i32 7
  %50 = load i64, ptr %49, align 8, !tbaa !61
  %51 = icmp sgt i64 %50, 0
  br i1 %51, label %52, label %151

52:                                               ; preds = %47
  %53 = load ptr, ptr %6, align 8, !tbaa !6
  %54 = load ptr, ptr %7, align 8, !tbaa !6
  %55 = load ptr, ptr %8, align 8, !tbaa !6
  %56 = load double, ptr %9, align 8, !tbaa !50
  %57 = fptrunc double %56 to float
  %58 = load double, ptr %29, align 8, !tbaa !51
  %59 = fptrunc double %58 to float
  %60 = load double, ptr %30, align 8, !tbaa !52
  %61 = fptrunc double %60 to float
  br label %62

62:                                               ; preds = %52, %146
  %63 = phi i64 [ 0, %52 ], [ %149, %146 ]
  %64 = phi ptr [ %45, %52 ], [ %148, %146 ]
  %65 = getelementptr inbounds %struct._PixelPacket, ptr %64, i64 0, i32 2
  %66 = load i16, ptr %65, align 2, !tbaa !53
  switch i16 %66, label %67 [
    i16 0, label %72
    i16 -1, label %71
  ]

67:                                               ; preds = %62
  %68 = uitofp i16 %66 to float
  %69 = fadd fast float %68, 5.000000e-01
  %70 = fptoui float %69 to i16
  br label %72

71:                                               ; preds = %62
  br label %72

72:                                               ; preds = %62, %71, %67
  %73 = phi i16 [ %70, %67 ], [ %66, %62 ], [ -1, %71 ]
  %74 = zext i16 %73 to i64
  %75 = getelementptr inbounds %struct._PixelPacket, ptr %64, i64 0, i32 1
  %76 = load i16, ptr %75, align 2, !tbaa !54
  switch i16 %76, label %77 [
    i16 0, label %82
    i16 -1, label %81
  ]

77:                                               ; preds = %72
  %78 = uitofp i16 %76 to float
  %79 = fadd fast float %78, 5.000000e-01
  %80 = fptoui float %79 to i16
  br label %82

81:                                               ; preds = %72
  br label %82

82:                                               ; preds = %72, %81, %77
  %83 = phi i16 [ %80, %77 ], [ %76, %72 ], [ -1, %81 ]
  %84 = zext i16 %83 to i64
  %85 = load i16, ptr %64, align 2, !tbaa !55
  switch i16 %85, label %86 [
    i16 0, label %91
    i16 -1, label %90
  ]

86:                                               ; preds = %82
  %87 = uitofp i16 %85 to float
  %88 = fadd fast float %87, 5.000000e-01
  %89 = fptoui float %88 to i16
  br label %91

90:                                               ; preds = %82
  br label %91

91:                                               ; preds = %82, %90, %86
  %92 = phi i16 [ %89, %86 ], [ %85, %82 ], [ -1, %90 ]
  %93 = zext i16 %92 to i64
  %94 = getelementptr inbounds %struct._TransformPacket, ptr %53, i64 %74
  %95 = load float, ptr %94, align 4, !tbaa !56
  %96 = getelementptr inbounds %struct._TransformPacket, ptr %54, i64 %84
  %97 = load float, ptr %96, align 4, !tbaa !56
  %98 = fadd fast float %97, %95
  %99 = getelementptr inbounds %struct._TransformPacket, ptr %55, i64 %93
  %100 = load float, ptr %99, align 4, !tbaa !56
  %101 = fadd fast float %98, %100
  %102 = fadd fast float %101, %57
  %103 = getelementptr inbounds %struct._TransformPacket, ptr %53, i64 %74, i32 1
  %104 = load float, ptr %103, align 4, !tbaa !57
  %105 = getelementptr inbounds %struct._TransformPacket, ptr %54, i64 %84, i32 1
  %106 = load float, ptr %105, align 4, !tbaa !57
  %107 = fadd fast float %106, %104
  %108 = getelementptr inbounds %struct._TransformPacket, ptr %55, i64 %93, i32 1
  %109 = load float, ptr %108, align 4, !tbaa !57
  %110 = fadd fast float %107, %109
  %111 = fadd fast float %110, %59
  %112 = getelementptr inbounds %struct._TransformPacket, ptr %53, i64 %74, i32 2
  %113 = load float, ptr %112, align 4, !tbaa !43
  %114 = getelementptr inbounds %struct._TransformPacket, ptr %54, i64 %84, i32 2
  %115 = load float, ptr %114, align 4, !tbaa !43
  %116 = fadd fast float %115, %113
  %117 = getelementptr inbounds %struct._TransformPacket, ptr %55, i64 %93, i32 2
  %118 = load float, ptr %117, align 4, !tbaa !43
  %119 = fadd fast float %116, %118
  %120 = fadd fast float %119, %61
  %121 = fpext float %102 to double
  %122 = fcmp fast ugt float %102, 0.000000e+00
  br i1 %122, label %123, label %128

123:                                              ; preds = %91
  %124 = fcmp fast ult float %102, 6.553500e+04
  br i1 %124, label %125, label %128

125:                                              ; preds = %123
  %126 = fadd fast double %121, 5.000000e-01
  %127 = fptoui double %126 to i16
  br label %128

128:                                              ; preds = %91, %123, %125
  %129 = phi i16 [ %127, %125 ], [ 0, %91 ], [ -1, %123 ]
  store i16 %129, ptr %65, align 2, !tbaa !53
  %130 = fpext float %111 to double
  %131 = fcmp fast ugt float %111, 0.000000e+00
  br i1 %131, label %132, label %137

132:                                              ; preds = %128
  %133 = fcmp fast ult float %111, 6.553500e+04
  br i1 %133, label %134, label %137

134:                                              ; preds = %132
  %135 = fadd fast double %130, 5.000000e-01
  %136 = fptoui double %135 to i16
  br label %137

137:                                              ; preds = %128, %132, %134
  %138 = phi i16 [ %136, %134 ], [ 0, %128 ], [ -1, %132 ]
  store i16 %138, ptr %75, align 2, !tbaa !54
  %139 = fpext float %120 to double
  %140 = fcmp fast ugt float %120, 0.000000e+00
  br i1 %140, label %141, label %146

141:                                              ; preds = %137
  %142 = fcmp fast ult float %120, 6.553500e+04
  br i1 %142, label %143, label %146

143:                                              ; preds = %141
  %144 = fadd fast double %139, 5.000000e-01
  %145 = fptoui double %144 to i16
  br label %146

146:                                              ; preds = %137, %141, %143
  %147 = phi i16 [ %145, %143 ], [ 0, %137 ], [ -1, %141 ]
  store i16 %147, ptr %64, align 2, !tbaa !55
  %148 = getelementptr inbounds %struct._PixelPacket, ptr %64, i64 1
  %149 = add nuw nsw i64 %63, 1
  %150 = icmp eq i64 %149, %50
  br i1 %150, label %151, label %62, !llvm.loop !87

151:                                              ; preds = %146, %47
  %152 = load ptr, ptr %4, align 8, !tbaa !6
  %153 = load ptr, ptr %5, align 8, !tbaa !6
  %154 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %152, ptr noundef %153) #12
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %151
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %157

157:                                              ; preds = %156, %151
  %158 = load ptr, ptr %2, align 8, !tbaa !6
  %159 = getelementptr inbounds %struct._Image, ptr %158, i64 0, i32 47
  %160 = load ptr, ptr %159, align 8, !tbaa !88
  %161 = icmp eq ptr %160, null
  br i1 %161, label %182, label %162

162:                                              ; preds = %157
  call void @__kmpc_critical(ptr nonnull @2, i32 %23, ptr nonnull @.gomp_critical_user_MagickCore_RGBTransformImage.var)
  %163 = load ptr, ptr %2, align 8, !tbaa !6
  %164 = load i64, ptr %10, align 8, !tbaa !27
  %165 = add nsw i64 %164, 1
  store i64 %165, ptr %10, align 8, !tbaa !27
  %166 = getelementptr inbounds %struct._Image, ptr %163, i64 0, i32 8
  %167 = load i64, ptr %166, align 8, !tbaa !34
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %12) #4
  %168 = getelementptr inbounds %struct._Image, ptr %163, i64 0, i32 47
  %169 = load ptr, ptr %168, align 8, !tbaa !88
  %170 = icmp eq ptr %169, null
  br i1 %170, label %178, label %171

171:                                              ; preds = %162
  %172 = getelementptr inbounds %struct._Image, ptr %163, i64 0, i32 53
  %173 = call i64 (ptr, i64, ptr, ...) @FormatLocaleString(ptr noundef nonnull %12, i64 noundef 4096, ptr noundef nonnull @.str.22, ptr noundef nonnull @.str.21, ptr noundef nonnull %172) #4
  %174 = load ptr, ptr %168, align 8, !tbaa !88
  %175 = getelementptr inbounds %struct._Image, ptr %163, i64 0, i32 48
  %176 = load ptr, ptr %175, align 8, !tbaa !89
  %177 = call i32 %174(ptr noundef nonnull %12, i64 noundef %164, i64 noundef %167, ptr noundef %176) #4
  br label %178

178:                                              ; preds = %162, %171
  %179 = phi i32 [ %177, %171 ], [ 1, %162 ]
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %12) #4
  call void @__kmpc_end_critical(ptr nonnull @2, i32 %23, ptr nonnull @.gomp_critical_user_MagickCore_RGBTransformImage.var)
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %182

181:                                              ; preds = %178, %39
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %182

182:                                              ; preds = %181, %157, %178, %35
  %183 = add nsw i64 %36, 1
  %184 = load i64, ptr %14, align 8, !tbaa !59
  %185 = icmp slt i64 %36, %184
  br i1 %185, label %35, label %186

186:                                              ; preds = %182
  %187 = load i64, ptr %13, align 8, !tbaa !59
  br label %188

188:                                              ; preds = %186, %31
  %189 = phi i64 [ %33, %31 ], [ %187, %186 ]
  %190 = phi i64 [ %32, %31 ], [ %184, %186 ]
  %191 = load i64, ptr %15, align 8, !tbaa !59
  %192 = add nsw i64 %191, %189
  store i64 %192, ptr %13, align 8, !tbaa !59
  %193 = add nsw i64 %191, %190
  %194 = call i64 @llvm.smin.i64(i64 %193, i64 %20)
  store i64 %194, ptr %14, align 8, !tbaa !59
  %195 = icmp sgt i64 %192, %194
  br i1 %195, label %196, label %31

196:                                              ; preds = %188, %22
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %23)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #4
  br label %197

197:                                              ; preds = %196, %11
  ret void
}

; Function Attrs: convergent nounwind
declare void @__kmpc_end_critical(ptr, i32, ptr) local_unnamed_addr #8

; Function Attrs: convergent nounwind
declare void @__kmpc_critical(ptr, i32, ptr) local_unnamed_addr #8

declare nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef, ptr noundef) local_unnamed_addr #2

declare i64 @FormatLocaleString(ptr noundef, i64 noundef, ptr noundef, ...) local_unnamed_addr #2

declare hidden i32 @SyncImagePixelCache(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @TransformImageColorspace(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 59
  %4 = load i32, ptr %3, align 8, !tbaa !11
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %8 = tail call i32 (i32, ptr, ptr, i64, ptr, ...) @LogMagickEvent(i32 noundef 1, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 1191, ptr noundef nonnull @.str.2, ptr noundef nonnull %7) #4
  br label %9

9:                                                ; preds = %6, %2
  %10 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !29
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %57, label %13

13:                                               ; preds = %9
  %14 = icmp eq i32 %11, 19
  %15 = icmp eq i32 %1, 13
  %16 = and i1 %15, %14
  br i1 %16, label %57, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %11, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  %21 = load double, ptr %20, align 8, !tbaa !31
  %22 = fcmp fast une double %21, 1.000000e+00
  %23 = and i1 %15, %22
  br i1 %23, label %57, label %26

24:                                               ; preds = %17
  %25 = icmp eq i32 %1, 0
  br i1 %25, label %28, label %41

26:                                               ; preds = %19
  %27 = icmp eq i32 %1, 0
  br i1 %27, label %30, label %41

28:                                               ; preds = %24
  %29 = icmp eq i32 %11, 0
  br i1 %29, label %57, label %30

30:                                               ; preds = %26, %28
  store i32 0, ptr %10, align 4, !tbaa !29
  %31 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %31, align 8, !tbaa !30
  %32 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %32, align 8, !tbaa !31
  %33 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %34 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %33, i32 noundef 0, i64 noundef 96) #4
  %35 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %36 = load i32, ptr %35, align 8, !tbaa !32
  store i32 2, ptr %31, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %33, align 8, !tbaa !33
  %37 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %37, align 8, !tbaa !33
  %38 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %38, align 8, !tbaa !33
  %39 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  %40 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %39) #4
  store i32 %36, ptr %35, align 8, !tbaa !32
  br label %57

41:                                               ; preds = %26, %24
  %42 = tail call i32 @DeleteImageProfile(ptr noundef nonnull %0, ptr noundef nonnull @.str.23) #4
  %43 = tail call i32 @DeleteImageProfile(ptr noundef nonnull %0, ptr noundef nonnull @.str.24) #4
  switch i32 %1, label %47 [
    i32 13, label %44
    i32 3, label %44
  ]

44:                                               ; preds = %41, %41
  %45 = load i32, ptr %10, align 4, !tbaa !29
  %46 = tail call i32 @TransformRGBImage(ptr noundef nonnull %0, i32 noundef %45)
  br label %57

47:                                               ; preds = %41
  %48 = load i32, ptr %10, align 4, !tbaa !29
  switch i32 %48, label %49 [
    i32 13, label %52
    i32 3, label %52
  ]

49:                                               ; preds = %47
  %50 = tail call i32 @TransformRGBImage(ptr noundef nonnull %0, i32 noundef %48)
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %47, %47, %49
  %53 = phi i32 [ %50, %49 ], [ 1, %47 ], [ 1, %47 ]
  %54 = tail call i32 @RGBTransformImage(ptr noundef nonnull %0, i32 noundef %1)
  %55 = icmp eq i32 %54, 0
  %56 = select i1 %55, i32 0, i32 %53
  br label %57

57:                                               ; preds = %30, %28, %49, %19, %13, %9, %52, %44
  %58 = phi i32 [ %46, %44 ], [ %56, %52 ], [ 1, %9 ], [ 1, %13 ], [ 1, %19 ], [ 0, %49 ], [ %40, %30 ], [ 1, %28 ]
  ret i32 %58
}

declare i32 @DeleteImageProfile(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @TransformRGBImage(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = alloca ptr, align 8
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca %struct._MagickPixelPacket, align 8
  %13 = alloca ptr, align 8
  %14 = tail call i32 @__kmpc_global_thread_num(ptr nonnull @2)
  store ptr %0, ptr %3, align 8, !tbaa !6
  store i32 %1, ptr %4, align 4, !tbaa !10
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #4
  %15 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 59
  %16 = load i32, ptr %15, align 8, !tbaa !11
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %20 = tail call i32 (i32, ptr, ptr, i64, ptr, ...) @LogMagickEvent(i32 noundef 1, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 1640, ptr noundef nonnull @.str.2, ptr noundef nonnull %19) #4
  br label %21

21:                                               ; preds = %18, %2
  store i32 1, ptr %7, align 4, !tbaa !10
  store i64 0, ptr %8, align 8, !tbaa !27
  %22 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  store ptr %22, ptr %6, align 8, !tbaa !6
  switch i32 %1, label %487 [
    i32 12, label %23
    i32 2, label %79
    i32 17, label %79
    i32 19, label %79
    i32 22, label %148
    i32 24, label %148
    i32 32, label %148
    i32 14, label %148
    i32 30, label %148
    i32 15, label %148
    i32 31, label %148
    i32 16, label %148
    i32 5, label %148
    i32 25, label %148
    i32 27, label %148
    i32 28, label %148
    i32 26, label %148
    i32 23, label %148
    i32 6, label %148
    i32 7, label %148
    i32 33, label %148
    i32 9, label %148
    i32 10, label %148
    i32 11, label %148
    i32 21, label %202
    i32 1, label %433
    i32 29, label %433
  ]

23:                                               ; preds = %21
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %12) #4
  %24 = load i32, ptr %0, align 8, !tbaa !28
  %25 = icmp eq i32 %24, 2
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %77, label %29

29:                                               ; preds = %26
  %30 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %77, label %32

32:                                               ; preds = %29, %23
  call void @GetMagickPixelPacket(ptr noundef nonnull %0, ptr noundef nonnull %12) #4
  %33 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store ptr %33, ptr %5, align 8, !tbaa !6
  %34 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %35 = load i64, ptr %34, align 8, !tbaa !34
  %36 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %37 = shl i64 %36, 5
  %38 = icmp ugt i64 %35, %37
  br i1 %38, label %39, label %47

39:                                               ; preds = %32
  %40 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %41 = icmp eq i32 %40, 3
  br i1 %41, label %47, label %42

42:                                               ; preds = %39
  %43 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %44 = icmp eq i32 %43, 3
  br i1 %44, label %47, label %45

45:                                               ; preds = %42
  %46 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %51

47:                                               ; preds = %42, %39, %32
  %48 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %49 = icmp ult i64 %48, 2
  %50 = select i1 %49, i64 1, i64 2
  br label %51

51:                                               ; preds = %47, %45
  %52 = phi i64 [ %46, %45 ], [ %50, %47 ]
  %53 = trunc i64 %52 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %53)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @TransformRGBImage.omp_outlined, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %12)
  %54 = load ptr, ptr %5, align 8, !tbaa !6
  %55 = call ptr @DestroyCacheView(ptr noundef %54) #4
  store ptr %55, ptr %5, align 8, !tbaa !6
  %56 = load ptr, ptr %3, align 8, !tbaa !6
  %57 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 1
  %58 = load i32, ptr %57, align 4, !tbaa !29
  %59 = icmp eq i32 %58, 13
  br i1 %59, label %60, label %62

60:                                               ; preds = %51
  %61 = load i32, ptr %7, align 4
  br label %77

62:                                               ; preds = %51
  store i32 13, ptr %57, align 4, !tbaa !29
  %63 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 17
  store i32 0, ptr %63, align 8, !tbaa !30
  %64 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %64, align 8, !tbaa !31
  %65 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 16
  %66 = call ptr @ResetMagickMemory(ptr noundef nonnull %65, i32 noundef 0, i64 noundef 96) #4
  %67 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 77
  %68 = load i32, ptr %67, align 8, !tbaa !32
  store i32 2, ptr %63, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %65, align 8, !tbaa !33
  %69 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %69, align 8, !tbaa !33
  %70 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %70, align 8, !tbaa !33
  %71 = getelementptr inbounds %struct._Image, ptr %56, i64 0, i32 58
  %72 = call i32 @SyncImagePixelCache(ptr noundef nonnull %56, ptr noundef nonnull %71) #4
  store i32 %68, ptr %67, align 8, !tbaa !32
  %73 = freeze i32 %72
  %74 = icmp eq i32 %73, 0
  %75 = load i32, ptr %7, align 4
  %76 = select i1 %74, i32 0, i32 %75
  br label %77

77:                                               ; preds = %62, %60, %29, %26
  %78 = phi i32 [ 0, %26 ], [ 0, %29 ], [ %61, %60 ], [ %76, %62 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %12) #4
  br label %653

79:                                               ; preds = %21, %21, %21
  %80 = load i32, ptr %0, align 8, !tbaa !28
  %81 = icmp eq i32 %80, 2
  br i1 %81, label %82, label %88

82:                                               ; preds = %79
  %83 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %653, label %85

85:                                               ; preds = %82
  %86 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %653, label %88

88:                                               ; preds = %85, %79
  %89 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %90 = load i32, ptr %89, align 4, !tbaa !29
  %91 = icmp eq i32 %90, 13
  br i1 %91, label %103, label %92

92:                                               ; preds = %88
  store i32 13, ptr %89, align 4, !tbaa !29
  %93 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %93, align 8, !tbaa !30
  %94 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %94, align 8, !tbaa !31
  %95 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %96 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %95, i32 noundef 0, i64 noundef 96) #4
  %97 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %98 = load i32, ptr %97, align 8, !tbaa !32
  store i32 2, ptr %93, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %95, align 8, !tbaa !33
  %99 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %99, align 8, !tbaa !33
  %100 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %100, align 8, !tbaa !33
  %101 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store i32 %98, ptr %97, align 8, !tbaa !32
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %653, label %103

103:                                              ; preds = %88, %92
  %104 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store ptr %104, ptr %5, align 8, !tbaa !6
  %105 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %106 = load i64, ptr %105, align 8, !tbaa !34
  %107 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %108 = shl i64 %107, 5
  %109 = icmp ugt i64 %106, %108
  br i1 %109, label %110, label %118

110:                                              ; preds = %103
  %111 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %112 = icmp eq i32 %111, 3
  br i1 %112, label %118, label %113

113:                                              ; preds = %110
  %114 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %115 = icmp eq i32 %114, 3
  br i1 %115, label %118, label %116

116:                                              ; preds = %113
  %117 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %122

118:                                              ; preds = %113, %110, %103
  %119 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %120 = icmp ult i64 %119, 2
  %121 = select i1 %120, i64 1, i64 2
  br label %122

122:                                              ; preds = %118, %116
  %123 = phi i64 [ %117, %116 ], [ %121, %118 ]
  %124 = trunc i64 %123 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %124)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 4, ptr nonnull @TransformRGBImage.omp_outlined.25, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6)
  %125 = load ptr, ptr %5, align 8, !tbaa !6
  %126 = call ptr @DestroyCacheView(ptr noundef %125) #4
  store ptr %126, ptr %5, align 8, !tbaa !6
  %127 = load ptr, ptr %3, align 8, !tbaa !6
  %128 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 1
  %129 = load i32, ptr %128, align 4, !tbaa !29
  %130 = icmp eq i32 %129, 13
  br i1 %130, label %131, label %133

131:                                              ; preds = %122
  %132 = load i32, ptr %7, align 4
  br label %653

133:                                              ; preds = %122
  store i32 13, ptr %128, align 4, !tbaa !29
  %134 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 17
  store i32 0, ptr %134, align 8, !tbaa !30
  %135 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %135, align 8, !tbaa !31
  %136 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 16
  %137 = call ptr @ResetMagickMemory(ptr noundef nonnull %136, i32 noundef 0, i64 noundef 96) #4
  %138 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 77
  %139 = load i32, ptr %138, align 8, !tbaa !32
  store i32 2, ptr %134, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %136, align 8, !tbaa !33
  %140 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %140, align 8, !tbaa !33
  %141 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %141, align 8, !tbaa !33
  %142 = getelementptr inbounds %struct._Image, ptr %127, i64 0, i32 58
  %143 = call i32 @SyncImagePixelCache(ptr noundef nonnull %127, ptr noundef nonnull %142) #4
  store i32 %139, ptr %138, align 8, !tbaa !32
  %144 = freeze i32 %143
  %145 = icmp eq i32 %144, 0
  %146 = load i32, ptr %7, align 4
  %147 = select i1 %145, i32 0, i32 %146
  br label %653

148:                                              ; preds = %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21, %21
  %149 = load i32, ptr %0, align 8, !tbaa !28
  %150 = icmp eq i32 %149, 2
  br i1 %150, label %151, label %157

151:                                              ; preds = %148
  %152 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %653, label %154

154:                                              ; preds = %151
  %155 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %653, label %157

157:                                              ; preds = %154, %148
  %158 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store ptr %158, ptr %5, align 8, !tbaa !6
  %159 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %160 = load i64, ptr %159, align 8, !tbaa !34
  %161 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %162 = shl i64 %161, 5
  %163 = icmp ugt i64 %160, %162
  br i1 %163, label %164, label %172

164:                                              ; preds = %157
  %165 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %166 = icmp eq i32 %165, 3
  br i1 %166, label %172, label %167

167:                                              ; preds = %164
  %168 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %169 = icmp eq i32 %168, 3
  br i1 %169, label %172, label %170

170:                                              ; preds = %167
  %171 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %176

172:                                              ; preds = %167, %164, %157
  %173 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %174 = icmp ult i64 %173, 2
  %175 = select i1 %174, i64 1, i64 2
  br label %176

176:                                              ; preds = %172, %170
  %177 = phi i64 [ %171, %170 ], [ %175, %172 ]
  %178 = trunc i64 %177 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %178)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @TransformRGBImage.omp_outlined.26, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %4)
  %179 = load ptr, ptr %5, align 8, !tbaa !6
  %180 = call ptr @DestroyCacheView(ptr noundef %179) #4
  store ptr %180, ptr %5, align 8, !tbaa !6
  %181 = load ptr, ptr %3, align 8, !tbaa !6
  %182 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 1
  %183 = load i32, ptr %182, align 4, !tbaa !29
  %184 = icmp eq i32 %183, 13
  br i1 %184, label %185, label %187

185:                                              ; preds = %176
  %186 = load i32, ptr %7, align 4
  br label %653

187:                                              ; preds = %176
  store i32 13, ptr %182, align 4, !tbaa !29
  %188 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 17
  store i32 0, ptr %188, align 8, !tbaa !30
  %189 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %189, align 8, !tbaa !31
  %190 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 16
  %191 = call ptr @ResetMagickMemory(ptr noundef nonnull %190, i32 noundef 0, i64 noundef 96) #4
  %192 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 77
  %193 = load i32, ptr %192, align 8, !tbaa !32
  store i32 2, ptr %188, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %190, align 8, !tbaa !33
  %194 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %194, align 8, !tbaa !33
  %195 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %195, align 8, !tbaa !33
  %196 = getelementptr inbounds %struct._Image, ptr %181, i64 0, i32 58
  %197 = call i32 @SyncImagePixelCache(ptr noundef nonnull %181, ptr noundef nonnull %196) #4
  store i32 %193, ptr %192, align 8, !tbaa !32
  %198 = freeze i32 %197
  %199 = icmp eq i32 %198, 0
  %200 = load i32, ptr %7, align 4
  %201 = select i1 %199, i32 0, i32 %200
  br label %653

202:                                              ; preds = %21
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #4
  %203 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.5) #4
  %204 = icmp eq ptr %203, null
  br i1 %204, label %215, label %205

205:                                              ; preds = %202
  %206 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %203, ptr noundef null) #4
  %207 = fcmp fast olt double %206, 0.000000e+00
  %208 = select fast i1 %207, double -1.000000e+00, double 1.000000e+00
  %209 = fmul fast double %208, %206
  %210 = fcmp fast ult double %209, 1.000000e-15
  %211 = fdiv fast double 1.000000e+00, %206
  %212 = fmul fast double %208, 0x430C6BF52633FFFF
  %213 = select i1 %210, double %212, double %211
  %214 = fmul fast double %213, 0x3F87219994BD6EB8
  br label %215

215:                                              ; preds = %205, %202
  %216 = phi double [ %214, %205 ], [ 0x3F7B369690DEDC9D, %202 ]
  %217 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.6) #4
  %218 = icmp eq ptr %217, null
  br i1 %218, label %221, label %219

219:                                              ; preds = %215
  %220 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %217, ptr noundef null) #4
  br label %221

221:                                              ; preds = %219, %215
  %222 = phi double [ %220, %219 ], [ 6.000000e-01, %215 ]
  %223 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.7) #4
  %224 = icmp eq ptr %223, null
  br i1 %224, label %227, label %225

225:                                              ; preds = %221
  %226 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %223, ptr noundef null) #4
  br label %227

227:                                              ; preds = %225, %221
  %228 = phi double [ %226, %225 ], [ 9.500000e+01, %221 ]
  %229 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.8) #4
  %230 = icmp eq ptr %229, null
  br i1 %230, label %233, label %231

231:                                              ; preds = %227
  %232 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %229, ptr noundef null) #4
  br label %233

233:                                              ; preds = %231, %227
  %234 = phi double [ %232, %231 ], [ 6.850000e+02, %227 ]
  %235 = tail call dereferenceable_or_null(131072) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 2) #11
  store ptr %235, ptr %13, align 8, !tbaa !6
  %236 = icmp eq ptr %235, null
  br i1 %236, label %237, label %240

237:                                              ; preds = %233
  %238 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %239 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %22, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 2006, i32 noundef 400, ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.10, ptr noundef nonnull %238) #4
  br label %431

240:                                              ; preds = %233
  %241 = fsub fast double %228, %234
  %242 = fmul fast double %216, %241
  %243 = fdiv fast double %242, %222
  %244 = tail call fast double @llvm.exp2.f64(double %243)
  %245 = fmul fast double %228, 0x404FFFE000000000
  %246 = fptosi double %245 to i64
  %247 = icmp slt i64 %246, 0
  br i1 %247, label %252, label %248

248:                                              ; preds = %240
  %249 = shl nuw i64 %246, 1
  %250 = add i64 %249, 2
  tail call void @llvm.memset.p0.i64(ptr nonnull align 2 %235, i8 0, i64 %250, i1 false), !tbaa !63
  %251 = add nuw i64 %246, 1
  br label %252

252:                                              ; preds = %248, %240
  %253 = phi i64 [ 0, %240 ], [ %251, %248 ]
  %254 = fmul fast double %234, 0x404FFFE000000000
  %255 = fptosi double %254 to i64
  %256 = icmp slt i64 %253, %255
  br i1 %256, label %257, label %361

257:                                              ; preds = %252
  %258 = fsub fast double 1.000000e+00, %244
  %259 = sub i64 %255, %253
  %260 = icmp ult i64 %259, 8
  br i1 %260, label %357, label %261

261:                                              ; preds = %257
  %262 = icmp ult i64 %259, 16
  br i1 %262, label %311, label %263

263:                                              ; preds = %261
  %264 = and i64 %259, -16
  %265 = insertelement <16 x i64> poison, i64 %253, i64 0
  %266 = shufflevector <16 x i64> %265, <16 x i64> poison, <16 x i32> zeroinitializer
  %267 = add <16 x i64> %266, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %268 = insertelement <16 x double> poison, double %234, i64 0
  %269 = shufflevector <16 x double> %268, <16 x double> poison, <16 x i32> zeroinitializer
  %270 = insertelement <16 x double> poison, double %216, i64 0
  %271 = shufflevector <16 x double> %270, <16 x double> poison, <16 x i32> zeroinitializer
  %272 = insertelement <16 x double> poison, double %222, i64 0
  %273 = shufflevector <16 x double> %272, <16 x double> poison, <16 x i32> zeroinitializer
  %274 = insertelement <16 x double> poison, double %244, i64 0
  %275 = shufflevector <16 x double> %274, <16 x double> poison, <16 x i32> zeroinitializer
  %276 = insertelement <16 x double> poison, double %258, i64 0
  %277 = shufflevector <16 x double> %276, <16 x double> poison, <16 x i32> zeroinitializer
  %278 = add i64 %253, %264
  %279 = fdiv fast <16 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %273
  %280 = fdiv fast <16 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %277
  br label %281

281:                                              ; preds = %281, %263
  %282 = phi i64 [ 0, %263 ], [ %302, %281 ]
  %283 = phi <16 x i64> [ %267, %263 ], [ %303, %281 ]
  %284 = add i64 %253, %282
  %285 = sitofp <16 x i64> %283 to <16 x double>
  %286 = fmul fast <16 x double> %285, <double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010>
  %287 = fsub fast <16 x double> %286, %269
  %288 = fmul fast <16 x double> %271, %287
  %289 = fmul fast <16 x double> %288, %279
  %290 = tail call fast <16 x double> @llvm.exp2.v16f64(<16 x double> %289)
  %291 = fsub fast <16 x double> %290, %275
  %292 = fmul fast <16 x double> %291, <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>
  %293 = fmul fast <16 x double> %292, %280
  %294 = fptrunc <16 x double> %293 to <16 x float>
  %295 = fcmp fast ugt <16 x float> %294, zeroinitializer
  %296 = fcmp fast oge <16 x float> %294, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %297 = fadd fast <16 x float> %294, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %298 = fptoui <16 x float> %297 to <16 x i16>
  %299 = select <16 x i1> %296, <16 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <16 x i16> %298
  %300 = select <16 x i1> %295, <16 x i16> %299, <16 x i16> zeroinitializer
  %301 = getelementptr inbounds i16, ptr %235, i64 %284
  store <16 x i16> %300, ptr %301, align 2, !tbaa !63
  %302 = add nuw i64 %282, 16
  %303 = add <16 x i64> %283, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %304 = icmp eq i64 %302, %264
  br i1 %304, label %305, label %281, !llvm.loop !90

305:                                              ; preds = %281
  %306 = icmp eq i64 %259, %264
  br i1 %306, label %361, label %307

307:                                              ; preds = %305
  %308 = add i64 %253, %264
  %309 = and i64 %259, 8
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %357, label %311

311:                                              ; preds = %261, %307
  %312 = phi i64 [ %278, %307 ], [ %253, %261 ]
  %313 = phi i64 [ %264, %307 ], [ 0, %261 ]
  %314 = and i64 %259, -8
  %315 = add i64 %253, %314
  %316 = insertelement <8 x i64> poison, i64 %312, i64 0
  %317 = shufflevector <8 x i64> %316, <8 x i64> poison, <8 x i32> zeroinitializer
  %318 = add <8 x i64> %317, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %319 = insertelement <8 x double> poison, double %234, i64 0
  %320 = shufflevector <8 x double> %319, <8 x double> poison, <8 x i32> zeroinitializer
  %321 = insertelement <8 x double> poison, double %216, i64 0
  %322 = shufflevector <8 x double> %321, <8 x double> poison, <8 x i32> zeroinitializer
  %323 = insertelement <8 x double> poison, double %222, i64 0
  %324 = shufflevector <8 x double> %323, <8 x double> poison, <8 x i32> zeroinitializer
  %325 = insertelement <8 x double> poison, double %244, i64 0
  %326 = shufflevector <8 x double> %325, <8 x double> poison, <8 x i32> zeroinitializer
  %327 = insertelement <8 x double> poison, double %258, i64 0
  %328 = shufflevector <8 x double> %327, <8 x double> poison, <8 x i32> zeroinitializer
  %329 = fdiv fast <8 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %324
  %330 = fdiv fast <8 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %328
  br label %331

331:                                              ; preds = %331, %311
  %332 = phi i64 [ %313, %311 ], [ %352, %331 ]
  %333 = phi <8 x i64> [ %318, %311 ], [ %353, %331 ]
  %334 = add i64 %253, %332
  %335 = sitofp <8 x i64> %333 to <8 x double>
  %336 = fmul fast <8 x double> %335, <double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010>
  %337 = fsub fast <8 x double> %336, %320
  %338 = fmul fast <8 x double> %322, %337
  %339 = fmul fast <8 x double> %338, %329
  %340 = tail call fast <8 x double> @llvm.exp2.v8f64(<8 x double> %339)
  %341 = fsub fast <8 x double> %340, %326
  %342 = fmul fast <8 x double> %341, <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>
  %343 = fmul fast <8 x double> %342, %330
  %344 = fptrunc <8 x double> %343 to <8 x float>
  %345 = fcmp fast ugt <8 x float> %344, zeroinitializer
  %346 = fcmp fast oge <8 x float> %344, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %347 = fadd fast <8 x float> %344, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %348 = fptoui <8 x float> %347 to <8 x i16>
  %349 = select <8 x i1> %346, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> %348
  %350 = select <8 x i1> %345, <8 x i16> %349, <8 x i16> zeroinitializer
  %351 = getelementptr inbounds i16, ptr %235, i64 %334
  store <8 x i16> %350, ptr %351, align 2, !tbaa !63
  %352 = add nuw i64 %332, 8
  %353 = add <8 x i64> %333, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %354 = icmp eq i64 %352, %314
  br i1 %354, label %355, label %331, !llvm.loop !91

355:                                              ; preds = %331
  %356 = icmp eq i64 %259, %314
  br i1 %356, label %361, label %357

357:                                              ; preds = %257, %307, %355
  %358 = phi i64 [ %253, %257 ], [ %308, %307 ], [ %315, %355 ]
  %359 = fdiv fast double 1.000000e+00, %222
  %360 = fdiv fast double 1.000000e+00, %258
  br label %368

361:                                              ; preds = %386, %305, %355, %252
  %362 = phi i64 [ %253, %252 ], [ %255, %355 ], [ %255, %305 ], [ %255, %386 ]
  %363 = icmp ult i64 %362, 65536
  br i1 %363, label %364, label %391

364:                                              ; preds = %361
  %365 = shl nuw nsw i64 %362, 1
  %366 = getelementptr i8, ptr %235, i64 %365
  %367 = sub nuw nsw i64 131072, %365
  tail call void @llvm.memset.p0.i64(ptr align 2 %366, i8 -1, i64 %367, i1 false), !tbaa !63
  br label %391

368:                                              ; preds = %357, %386
  %369 = phi i64 [ %389, %386 ], [ %358, %357 ]
  %370 = sitofp i64 %369 to double
  %371 = fmul fast double %370, 0x3F90001000100010
  %372 = fsub fast double %371, %234
  %373 = fmul fast double %216, %372
  %374 = fmul fast double %373, %359
  %375 = tail call fast double @llvm.exp2.f64(double %374)
  %376 = fsub fast double %375, %244
  %377 = fmul fast double %376, 6.553500e+04
  %378 = fmul fast double %377, %360
  %379 = fptrunc double %378 to float
  %380 = fcmp fast ugt float %379, 0.000000e+00
  br i1 %380, label %381, label %386

381:                                              ; preds = %368
  %382 = fcmp fast ult float %379, 6.553500e+04
  br i1 %382, label %383, label %386

383:                                              ; preds = %381
  %384 = fadd fast float %379, 5.000000e-01
  %385 = fptoui float %384 to i16
  br label %386

386:                                              ; preds = %368, %381, %383
  %387 = phi i16 [ %385, %383 ], [ 0, %368 ], [ -1, %381 ]
  %388 = getelementptr inbounds i16, ptr %235, i64 %369
  store i16 %387, ptr %388, align 2, !tbaa !63
  %389 = add nuw nsw i64 %369, 1
  %390 = icmp eq i64 %389, %255
  br i1 %390, label %361, label %368, !llvm.loop !92

391:                                              ; preds = %364, %361
  %392 = load i32, ptr %0, align 8, !tbaa !28
  %393 = icmp eq i32 %392, 2
  br i1 %393, label %394, label %400

394:                                              ; preds = %391
  %395 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %431, label %397

397:                                              ; preds = %394
  %398 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %431, label %400

400:                                              ; preds = %397, %391
  %401 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store ptr %401, ptr %5, align 8, !tbaa !6
  %402 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %403 = load i64, ptr %402, align 8, !tbaa !34
  %404 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %405 = shl i64 %404, 5
  %406 = icmp ugt i64 %403, %405
  br i1 %406, label %407, label %415

407:                                              ; preds = %400
  %408 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %409 = icmp eq i32 %408, 3
  br i1 %409, label %415, label %410

410:                                              ; preds = %407
  %411 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %412 = icmp eq i32 %411, 3
  br i1 %412, label %415, label %413

413:                                              ; preds = %410
  %414 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %419

415:                                              ; preds = %410, %407, %400
  %416 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %417 = icmp ult i64 %416, 2
  %418 = select i1 %417, i64 1, i64 2
  br label %419

419:                                              ; preds = %415, %413
  %420 = phi i64 [ %414, %413 ], [ %418, %415 ]
  %421 = trunc i64 %420 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %421)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @TransformRGBImage.omp_outlined.27, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %13)
  %422 = load ptr, ptr %5, align 8, !tbaa !6
  %423 = call ptr @DestroyCacheView(ptr noundef %422) #4
  store ptr %423, ptr %5, align 8, !tbaa !6
  %424 = load ptr, ptr %13, align 8, !tbaa !6
  %425 = call ptr @RelinquishMagickMemory(ptr noundef %424) #4
  store ptr %425, ptr %13, align 8, !tbaa !6
  %426 = load ptr, ptr %3, align 8, !tbaa !6
  %427 = call i32 @SetImageColorspace(ptr noundef %426, i32 noundef 13)
  %428 = icmp eq i32 %427, 0
  %429 = load i32, ptr %7, align 4
  %430 = select i1 %428, i32 0, i32 %429
  br label %431

431:                                              ; preds = %419, %397, %394, %237
  %432 = phi i32 [ 0, %237 ], [ 0, %394 ], [ 0, %397 ], [ %430, %419 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #4
  br label %653

433:                                              ; preds = %21, %21
  %434 = load i32, ptr %0, align 8, !tbaa !28
  %435 = icmp eq i32 %434, 2
  br i1 %435, label %436, label %442

436:                                              ; preds = %433
  %437 = tail call i32 @SyncImage(ptr noundef nonnull %0) #4
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %653, label %439

439:                                              ; preds = %436
  %440 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #4
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %653, label %442

442:                                              ; preds = %439, %433
  %443 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store ptr %443, ptr %5, align 8, !tbaa !6
  %444 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %445 = load i64, ptr %444, align 8, !tbaa !34
  %446 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %447 = shl i64 %446, 5
  %448 = icmp ugt i64 %445, %447
  br i1 %448, label %449, label %457

449:                                              ; preds = %442
  %450 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %451 = icmp eq i32 %450, 3
  br i1 %451, label %457, label %452

452:                                              ; preds = %449
  %453 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %454 = icmp eq i32 %453, 3
  br i1 %454, label %457, label %455

455:                                              ; preds = %452
  %456 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %461

457:                                              ; preds = %452, %449, %442
  %458 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %459 = icmp ult i64 %458, 2
  %460 = select i1 %459, i64 1, i64 2
  br label %461

461:                                              ; preds = %457, %455
  %462 = phi i64 [ %456, %455 ], [ %460, %457 ]
  %463 = trunc i64 %462 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %463)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 4, ptr nonnull @TransformRGBImage.omp_outlined.28, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6)
  %464 = load ptr, ptr %5, align 8, !tbaa !6
  %465 = call ptr @DestroyCacheView(ptr noundef %464) #4
  store ptr %465, ptr %5, align 8, !tbaa !6
  %466 = load ptr, ptr %3, align 8, !tbaa !6
  %467 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 1
  %468 = load i32, ptr %467, align 4, !tbaa !29
  %469 = icmp eq i32 %468, 13
  br i1 %469, label %470, label %472

470:                                              ; preds = %461
  %471 = load i32, ptr %7, align 4
  br label %653

472:                                              ; preds = %461
  store i32 13, ptr %467, align 4, !tbaa !29
  %473 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 17
  store i32 0, ptr %473, align 8, !tbaa !30
  %474 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %474, align 8, !tbaa !31
  %475 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 16
  %476 = call ptr @ResetMagickMemory(ptr noundef nonnull %475, i32 noundef 0, i64 noundef 96) #4
  %477 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 77
  %478 = load i32, ptr %477, align 8, !tbaa !32
  store i32 2, ptr %473, align 8, !tbaa !30
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %475, align 8, !tbaa !33
  %479 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %479, align 8, !tbaa !33
  %480 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %480, align 8, !tbaa !33
  %481 = getelementptr inbounds %struct._Image, ptr %466, i64 0, i32 58
  %482 = call i32 @SyncImagePixelCache(ptr noundef nonnull %466, ptr noundef nonnull %481) #4
  store i32 %478, ptr %477, align 8, !tbaa !32
  %483 = freeze i32 %482
  %484 = icmp eq i32 %483, 0
  %485 = load i32, ptr %7, align 4
  %486 = select i1 %484, i32 0, i32 %485
  br label %653

487:                                              ; preds = %21
  %488 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #11
  store ptr %488, ptr %10, align 8, !tbaa !6
  %489 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #11
  store ptr %489, ptr %9, align 8, !tbaa !6
  %490 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #11
  store ptr %490, ptr %11, align 8, !tbaa !6
  %491 = icmp eq ptr %488, null
  %492 = icmp eq ptr %489, null
  %493 = select i1 %491, i1 true, i1 %492
  %494 = icmp eq ptr %490, null
  %495 = select i1 %493, i1 true, i1 %494
  br i1 %495, label %496, label %508

496:                                              ; preds = %487
  br i1 %494, label %499, label %497

497:                                              ; preds = %496
  %498 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %490) #4
  br label %499

499:                                              ; preds = %497, %496
  br i1 %492, label %502, label %500

500:                                              ; preds = %499
  %501 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %489) #4
  br label %502

502:                                              ; preds = %500, %499
  br i1 %491, label %505, label %503

503:                                              ; preds = %502
  %504 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %488) #4
  br label %505

505:                                              ; preds = %502, %503
  %506 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %507 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %22, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 2164, i32 noundef 400, ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.10, ptr noundef nonnull %506) #4
  br label %653

508:                                              ; preds = %487
  %509 = add i32 %1, -4
  %510 = tail call i32 @llvm.fshl.i32(i32 %1, i32 %509, i32 31)
  switch i32 %510, label %575 [
    i32 0, label %511
    i32 7, label %527
    i32 8, label %543
    i32 2, label %559
  ]

511:                                              ; preds = %508
  %512 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %513 = and i64 %512, 576460752303423487
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %515, label %523

515:                                              ; preds = %511
  %516 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %517 = icmp eq i32 %516, 3
  br i1 %517, label %523, label %518

518:                                              ; preds = %515
  %519 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %520 = icmp eq i32 %519, 3
  br i1 %520, label %523, label %521

521:                                              ; preds = %518
  %522 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %591

523:                                              ; preds = %518, %515, %511
  %524 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %525 = icmp ult i64 %524, 2
  %526 = select i1 %525, i64 1, i64 2
  br label %591

527:                                              ; preds = %508
  %528 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %529 = and i64 %528, 576460752303423487
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %531, label %539

531:                                              ; preds = %527
  %532 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %533 = icmp eq i32 %532, 3
  br i1 %533, label %539, label %534

534:                                              ; preds = %531
  %535 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %536 = icmp eq i32 %535, 3
  br i1 %536, label %539, label %537

537:                                              ; preds = %534
  %538 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %591

539:                                              ; preds = %534, %531, %527
  %540 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %541 = icmp ult i64 %540, 2
  %542 = select i1 %541, i64 1, i64 2
  br label %591

543:                                              ; preds = %508
  %544 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %545 = and i64 %544, 576460752303423487
  %546 = icmp eq i64 %545, 0
  br i1 %546, label %547, label %555

547:                                              ; preds = %543
  %548 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %549 = icmp eq i32 %548, 3
  br i1 %549, label %555, label %550

550:                                              ; preds = %547
  %551 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %552 = icmp eq i32 %551, 3
  br i1 %552, label %555, label %553

553:                                              ; preds = %550
  %554 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %591

555:                                              ; preds = %550, %547, %543
  %556 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %557 = icmp ult i64 %556, 2
  %558 = select i1 %557, i64 1, i64 2
  br label %591

559:                                              ; preds = %508
  %560 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %561 = and i64 %560, 576460752303423487
  %562 = icmp eq i64 %561, 0
  br i1 %562, label %563, label %571

563:                                              ; preds = %559
  %564 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %565 = icmp eq i32 %564, 3
  br i1 %565, label %571, label %566

566:                                              ; preds = %563
  %567 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %568 = icmp eq i32 %567, 3
  br i1 %568, label %571, label %569

569:                                              ; preds = %566
  %570 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %591

571:                                              ; preds = %566, %563, %559
  %572 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %573 = icmp ult i64 %572, 2
  %574 = select i1 %573, i64 1, i64 2
  br label %591

575:                                              ; preds = %508
  %576 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %577 = and i64 %576, 576460752303423487
  %578 = icmp eq i64 %577, 0
  br i1 %578, label %579, label %587

579:                                              ; preds = %575
  %580 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %581 = icmp eq i32 %580, 3
  br i1 %581, label %587, label %582

582:                                              ; preds = %579
  %583 = tail call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %584 = icmp eq i32 %583, 3
  br i1 %584, label %587, label %585

585:                                              ; preds = %582
  %586 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %591

587:                                              ; preds = %582, %579, %575
  %588 = tail call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %589 = icmp ult i64 %588, 2
  %590 = select i1 %589, i64 1, i64 2
  br label %591

591:                                              ; preds = %585, %587, %569, %571, %553, %555, %537, %539, %521, %523
  %592 = phi i64 [ %522, %521 ], [ %526, %523 ], [ %538, %537 ], [ %542, %539 ], [ %554, %553 ], [ %558, %555 ], [ %570, %569 ], [ %574, %571 ], [ %586, %585 ], [ %590, %587 ]
  %593 = phi ptr [ @TransformRGBImage.omp_outlined.29, %521 ], [ @TransformRGBImage.omp_outlined.29, %523 ], [ @TransformRGBImage.omp_outlined.30, %537 ], [ @TransformRGBImage.omp_outlined.30, %539 ], [ @TransformRGBImage.omp_outlined.31, %553 ], [ @TransformRGBImage.omp_outlined.31, %555 ], [ @TransformRGBImage.omp_outlined.32, %569 ], [ @TransformRGBImage.omp_outlined.32, %571 ], [ @TransformRGBImage.omp_outlined.33, %585 ], [ @TransformRGBImage.omp_outlined.33, %587 ]
  %594 = trunc i64 %592 to i32
  tail call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %594)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 3, ptr nonnull %593, ptr nonnull %10, ptr nonnull %9, ptr nonnull %11)
  %595 = load i32, ptr %0, align 8, !tbaa !28
  %596 = icmp eq i32 %595, 2
  br i1 %596, label %621, label %597

597:                                              ; preds = %591
  %598 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %22) #4
  store ptr %598, ptr %5, align 8, !tbaa !6
  %599 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %600 = load i64, ptr %599, align 8, !tbaa !34
  %601 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %602 = shl i64 %601, 5
  %603 = icmp ugt i64 %600, %602
  br i1 %603, label %604, label %612

604:                                              ; preds = %597
  %605 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %606 = icmp eq i32 %605, 3
  br i1 %606, label %612, label %607

607:                                              ; preds = %604
  %608 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %609 = icmp eq i32 %608, 3
  br i1 %609, label %612, label %610

610:                                              ; preds = %607
  %611 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %616

612:                                              ; preds = %607, %604, %597
  %613 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %614 = icmp ult i64 %613, 2
  %615 = select i1 %614, i64 1, i64 2
  br label %616

616:                                              ; preds = %612, %610
  %617 = phi i64 [ %611, %610 ], [ %615, %612 ]
  %618 = trunc i64 %617 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %618)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 9, ptr nonnull @TransformRGBImage.omp_outlined.34, ptr nonnull %3, ptr nonnull %7, ptr nonnull %5, ptr nonnull %6, ptr nonnull %10, ptr nonnull %9, ptr nonnull %11, ptr nonnull %4, ptr nonnull %8)
  %619 = load ptr, ptr %5, align 8, !tbaa !6
  %620 = call ptr @DestroyCacheView(ptr noundef %619) #4
  store ptr %620, ptr %5, align 8, !tbaa !6
  br label %642

621:                                              ; preds = %591
  %622 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %623 = and i64 %622, 576460752303423487
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %633

625:                                              ; preds = %621
  %626 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %627 = icmp eq i32 %626, 3
  br i1 %627, label %633, label %628

628:                                              ; preds = %625
  %629 = call i32 @GetImagePixelCacheType(ptr noundef nonnull %0) #4
  %630 = icmp eq i32 %629, 3
  br i1 %630, label %633, label %631

631:                                              ; preds = %628
  %632 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  br label %637

633:                                              ; preds = %628, %625, %621
  %634 = call i64 @GetMagickResourceLimit(i32 noundef 6) #4
  %635 = icmp ult i64 %634, 2
  %636 = select i1 %635, i64 1, i64 2
  br label %637

637:                                              ; preds = %633, %631
  %638 = phi i64 [ %632, %631 ], [ %636, %633 ]
  %639 = trunc i64 %638 to i32
  call void @__kmpc_push_num_threads(ptr nonnull @2, i32 %14, i32 %639)
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @2, i32 5, ptr nonnull @TransformRGBImage.omp_outlined.36, ptr nonnull %3, ptr nonnull %10, ptr nonnull %9, ptr nonnull %11, ptr nonnull %4)
  %640 = load ptr, ptr %3, align 8, !tbaa !6
  %641 = call i32 @SyncImage(ptr noundef %640) #4
  br label %642

642:                                              ; preds = %637, %616
  %643 = load ptr, ptr %11, align 8, !tbaa !6
  %644 = call ptr @RelinquishMagickMemory(ptr noundef %643) #4
  store ptr %644, ptr %11, align 8, !tbaa !6
  %645 = load ptr, ptr %9, align 8, !tbaa !6
  %646 = call ptr @RelinquishMagickMemory(ptr noundef %645) #4
  store ptr %646, ptr %9, align 8, !tbaa !6
  %647 = load ptr, ptr %10, align 8, !tbaa !6
  %648 = call ptr @RelinquishMagickMemory(ptr noundef %647) #4
  store ptr %648, ptr %10, align 8, !tbaa !6
  %649 = load ptr, ptr %3, align 8, !tbaa !6
  %650 = call i32 @SetImageColorspace(ptr noundef %649, i32 noundef 13)
  %651 = icmp ne i32 %650, 0
  %652 = zext i1 %651 to i32
  br label %653

653:                                              ; preds = %472, %187, %133, %470, %185, %131, %642, %505, %439, %436, %154, %151, %92, %85, %82, %431, %77
  %654 = phi i32 [ %432, %431 ], [ %78, %77 ], [ 0, %82 ], [ 0, %85 ], [ 0, %92 ], [ 0, %151 ], [ 0, %154 ], [ 0, %436 ], [ 0, %439 ], [ 0, %505 ], [ %652, %642 ], [ %132, %131 ], [ %186, %185 ], [ %471, %470 ], [ %147, %133 ], [ %201, %187 ], [ %486, %472 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #4
  ret i32 %654
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(56) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = load ptr, ptr %2, align 8, !tbaa !6
  %13 = getelementptr inbounds %struct._Image, ptr %12, i64 0, i32 8
  %14 = load i64, ptr %13, align 8, !tbaa !34
  %15 = add nsw i64 %14, -1
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %166

17:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %15, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %18 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %18, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %19 = load i64, ptr %9, align 8
  %20 = call i64 @llvm.smin.i64(i64 %19, i64 %15)
  store i64 %20, ptr %9, align 8, !tbaa !59
  %21 = load i64, ptr %8, align 8, !tbaa !59
  %22 = icmp sgt i64 %21, %20
  br i1 %22, label %165, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds i8, ptr %6, i64 48
  br label %25

25:                                               ; preds = %23, %157
  %26 = phi i64 [ %20, %23 ], [ %163, %157 ]
  %27 = phi i64 [ %21, %23 ], [ %161, %157 ]
  %28 = icmp sgt i64 %27, %26
  %29 = load i32, ptr %3, align 4
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %157, label %35

32:                                               ; preds = %152
  %33 = add nsw i64 %37, 1
  %34 = load i32, ptr %3, align 4, !tbaa !10
  br label %35

35:                                               ; preds = %25, %32
  %36 = phi i32 [ %34, %32 ], [ %29, %25 ]
  %37 = phi i64 [ %33, %32 ], [ %27, %25 ]
  %38 = icmp eq i32 %36, 0
  br i1 %38, label %152, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %4, align 8, !tbaa !6
  %41 = load ptr, ptr %2, align 8, !tbaa !6
  %42 = getelementptr inbounds %struct._Image, ptr %41, i64 0, i32 7
  %43 = load i64, ptr %42, align 8, !tbaa !61
  %44 = load ptr, ptr %5, align 8, !tbaa !6
  %45 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %40, i64 noundef 0, i64 noundef %37, i64 noundef %43, i64 noundef 1, ptr noundef %44) #12
  %46 = icmp eq ptr %45, null
  br i1 %46, label %151, label %47

47:                                               ; preds = %39
  %48 = load ptr, ptr %4, align 8, !tbaa !6
  %49 = call ptr @GetCacheViewAuthenticIndexQueue(ptr noundef %48) #4
  %50 = load ptr, ptr %2, align 8, !tbaa !6
  %51 = getelementptr inbounds %struct._Image, ptr %50, i64 0, i32 7
  %52 = load i64, ptr %51, align 8, !tbaa !61
  %53 = icmp sgt i64 %52, 0
  br i1 %53, label %54, label %146

54:                                               ; preds = %47
  %55 = load float, ptr %24, align 8, !tbaa.struct !93
  %56 = getelementptr i8, ptr %50, i64 4
  %57 = load i32, ptr %56, align 4, !tbaa !29
  %58 = icmp eq i32 %57, 12
  %59 = icmp ne ptr %49, null
  %60 = and i1 %59, %58
  %61 = icmp eq ptr %49, null
  br label %62

62:                                               ; preds = %54, %142
  %63 = phi ptr [ %45, %54 ], [ %143, %142 ]
  %64 = phi i64 [ 0, %54 ], [ %144, %142 ]
  %65 = phi float [ %55, %54 ], [ %79, %142 ]
  %66 = getelementptr inbounds i16, ptr %49, i64 %64
  %67 = getelementptr inbounds %struct._PixelPacket, ptr %63, i64 0, i32 2
  %68 = load i16, ptr %67, align 2, !tbaa !53
  %69 = getelementptr inbounds %struct._PixelPacket, ptr %63, i64 0, i32 1
  %70 = load i16, ptr %69, align 2, !tbaa !54
  %71 = load i16, ptr %63, align 2, !tbaa !55
  %72 = getelementptr inbounds %struct._PixelPacket, ptr %63, i64 0, i32 3
  %73 = load i16, ptr %72, align 2, !tbaa !64
  %74 = uitofp i16 %73 to float
  br i1 %60, label %75, label %78

75:                                               ; preds = %62
  %76 = load i16, ptr %66, align 2, !tbaa !63
  %77 = uitofp i16 %76 to float
  br label %78

78:                                               ; preds = %62, %75
  %79 = phi float [ %77, %75 ], [ %65, %62 ]
  %80 = uitofp i16 %68 to double
  %81 = fsub fast float 6.553500e+04, %79
  %82 = fpext float %81 to double
  %83 = fpext float %79 to double
  %84 = fmul fast double %80, 0x3EF0001000100010
  %85 = fmul fast double %84, %82
  %86 = fsub fast double 6.553500e+04, %83
  %87 = fsub fast double %86, %85
  %88 = fptrunc double %87 to float
  %89 = uitofp i16 %70 to double
  %90 = fmul fast double %82, 0xBEF0001000100010
  %91 = fmul fast double %90, %89
  %92 = fadd fast double %91, %86
  %93 = fptrunc double %92 to float
  %94 = uitofp i16 %71 to double
  %95 = fmul fast double %90, %94
  %96 = fadd fast double %95, %86
  %97 = fptrunc double %96 to float
  %98 = fcmp fast ugt float %88, 0.000000e+00
  br i1 %98, label %99, label %104

99:                                               ; preds = %78
  %100 = fcmp fast ult float %88, 6.553500e+04
  br i1 %100, label %101, label %104

101:                                              ; preds = %99
  %102 = fadd fast float %88, 5.000000e-01
  %103 = fptoui float %102 to i16
  br label %104

104:                                              ; preds = %101, %99, %78
  %105 = phi i16 [ %103, %101 ], [ 0, %78 ], [ -1, %99 ]
  store i16 %105, ptr %67, align 2, !tbaa !53
  %106 = fcmp fast ugt float %93, 0.000000e+00
  br i1 %106, label %107, label %112

107:                                              ; preds = %104
  %108 = fcmp fast ult float %93, 6.553500e+04
  br i1 %108, label %109, label %112

109:                                              ; preds = %107
  %110 = fadd fast float %93, 5.000000e-01
  %111 = fptoui float %110 to i16
  br label %112

112:                                              ; preds = %109, %107, %104
  %113 = phi i16 [ %111, %109 ], [ 0, %104 ], [ -1, %107 ]
  store i16 %113, ptr %69, align 2, !tbaa !54
  %114 = fcmp fast ugt float %97, 0.000000e+00
  br i1 %114, label %115, label %120

115:                                              ; preds = %112
  %116 = fcmp fast ult float %97, 6.553500e+04
  br i1 %116, label %117, label %120

117:                                              ; preds = %115
  %118 = fadd fast float %97, 5.000000e-01
  %119 = fptoui float %118 to i16
  br label %120

120:                                              ; preds = %117, %115, %112
  %121 = phi i16 [ %119, %117 ], [ 0, %112 ], [ -1, %115 ]
  store i16 %121, ptr %63, align 2, !tbaa !55
  switch i16 %73, label %122 [
    i16 0, label %126
    i16 -1, label %125
  ]

122:                                              ; preds = %120
  %123 = fadd fast float %74, 5.000000e-01
  %124 = fptoui float %123 to i16
  br label %126

125:                                              ; preds = %120
  br label %126

126:                                              ; preds = %120, %125, %122
  %127 = phi i16 [ %124, %122 ], [ %73, %120 ], [ -1, %125 ]
  store i16 %127, ptr %72, align 2, !tbaa !64
  br i1 %58, label %132, label %128

128:                                              ; preds = %126
  %129 = load i32, ptr %50, align 8, !tbaa !28
  %130 = icmp eq i32 %129, 2
  %131 = and i1 %59, %130
  br i1 %131, label %133, label %142

132:                                              ; preds = %126
  br i1 %61, label %142, label %133

133:                                              ; preds = %132, %128
  %134 = fcmp fast ugt float %79, 0.000000e+00
  br i1 %134, label %135, label %140

135:                                              ; preds = %133
  %136 = fcmp fast ult float %79, 6.553500e+04
  br i1 %136, label %137, label %140

137:                                              ; preds = %135
  %138 = fadd fast float %79, 5.000000e-01
  %139 = fptoui float %138 to i16
  br label %140

140:                                              ; preds = %137, %135, %133
  %141 = phi i16 [ %139, %137 ], [ 0, %133 ], [ -1, %135 ]
  store i16 %141, ptr %66, align 2, !tbaa !63
  br label %142

142:                                              ; preds = %128, %132, %140
  %143 = getelementptr inbounds %struct._PixelPacket, ptr %63, i64 1
  %144 = add nuw nsw i64 %64, 1
  %145 = icmp eq i64 %144, %52
  br i1 %145, label %146, label %62, !llvm.loop !94

146:                                              ; preds = %142, %47
  %147 = load ptr, ptr %4, align 8, !tbaa !6
  %148 = load ptr, ptr %5, align 8, !tbaa !6
  %149 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %147, ptr noundef %148) #12
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %146, %39
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %152

152:                                              ; preds = %151, %146, %35
  %153 = load i64, ptr %9, align 8, !tbaa !59
  %154 = icmp slt i64 %37, %153
  br i1 %154, label %32, label %155, !llvm.loop !95

155:                                              ; preds = %152
  %156 = load i64, ptr %8, align 8, !tbaa !59
  br label %157

157:                                              ; preds = %155, %25
  %158 = phi i64 [ %27, %25 ], [ %156, %155 ]
  %159 = phi i64 [ %26, %25 ], [ %153, %155 ]
  %160 = load i64, ptr %10, align 8, !tbaa !59
  %161 = add nsw i64 %160, %158
  store i64 %161, ptr %8, align 8, !tbaa !59
  %162 = add nsw i64 %160, %159
  %163 = call i64 @llvm.smin.i64(i64 %162, i64 %15)
  store i64 %163, ptr %9, align 8, !tbaa !59
  %164 = icmp sgt i64 %161, %163
  br i1 %164, label %165, label %25

165:                                              ; preds = %157, %17
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %18)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %166

166:                                              ; preds = %165, %7
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.25(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5) #3 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = load ptr, ptr %2, align 8, !tbaa !6
  %12 = getelementptr inbounds %struct._Image, ptr %11, i64 0, i32 8
  %13 = load i64, ptr %12, align 8, !tbaa !34
  %14 = add nsw i64 %13, -1
  %15 = icmp sgt i64 %13, 0
  br i1 %15, label %16, label %97

16:                                               ; preds = %6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 0, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 %14, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 1, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #4
  store i32 0, ptr %10, align 4, !tbaa !60
  %17 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %17, i32 33, ptr nonnull %10, ptr nonnull %7, ptr nonnull %8, ptr nonnull %9, i64 1, i64 4)
  %18 = load i64, ptr %8, align 8
  %19 = call i64 @llvm.smin.i64(i64 %18, i64 %14)
  store i64 %19, ptr %8, align 8, !tbaa !59
  %20 = load i64, ptr %7, align 8, !tbaa !59
  %21 = icmp sgt i64 %20, %19
  br i1 %21, label %96, label %22

22:                                               ; preds = %16, %88
  %23 = phi i64 [ %94, %88 ], [ %19, %16 ]
  %24 = phi i64 [ %92, %88 ], [ %20, %16 ]
  %25 = icmp sgt i64 %24, %23
  %26 = load i32, ptr %3, align 4
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %25, i1 true, i1 %27
  br i1 %28, label %88, label %32

29:                                               ; preds = %83
  %30 = add nsw i64 %34, 1
  %31 = load i32, ptr %3, align 4, !tbaa !10
  br label %32

32:                                               ; preds = %22, %29
  %33 = phi i32 [ %31, %29 ], [ %26, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %24, %22 ]
  %35 = icmp eq i32 %33, 0
  br i1 %35, label %83, label %36

36:                                               ; preds = %32
  %37 = load ptr, ptr %4, align 8, !tbaa !6
  %38 = load ptr, ptr %2, align 8, !tbaa !6
  %39 = getelementptr inbounds %struct._Image, ptr %38, i64 0, i32 7
  %40 = load i64, ptr %39, align 8, !tbaa !61
  %41 = load ptr, ptr %5, align 8, !tbaa !6
  %42 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %37, i64 noundef 0, i64 noundef %34, i64 noundef %40, i64 noundef 1, ptr noundef %41) #12
  %43 = icmp eq ptr %42, null
  br i1 %43, label %82, label %44

44:                                               ; preds = %36
  %45 = load ptr, ptr %2, align 8, !tbaa !6
  %46 = getelementptr inbounds %struct._Image, ptr %45, i64 0, i32 7
  %47 = load i64, ptr %46, align 8, !tbaa !61
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %77, label %49

49:                                               ; preds = %44, %72
  %50 = phi ptr [ %74, %72 ], [ %42, %44 ]
  %51 = phi i64 [ %75, %72 ], [ %47, %44 ]
  %52 = getelementptr inbounds %struct._PixelPacket, ptr %50, i64 0, i32 2
  %53 = load i16, ptr %52, align 2, !tbaa !53
  %54 = uitofp i16 %53 to float
  %55 = load ptr, ptr %2, align 8, !tbaa !6
  %56 = getelementptr inbounds %struct._Image, ptr %55, i64 0, i32 83
  %57 = load i32, ptr %56, align 8, !tbaa !36
  switch i32 %57, label %60 [
    i32 5, label %58
    i32 7, label %58
  ]

58:                                               ; preds = %49, %49
  %59 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %54) #12
  br label %60

60:                                               ; preds = %49, %58
  %61 = phi float [ %59, %58 ], [ %54, %49 ]
  %62 = fcmp fast ugt float %61, 0.000000e+00
  br i1 %62, label %63, label %69

63:                                               ; preds = %60
  %64 = fcmp fast ult float %61, 6.553500e+04
  %65 = fadd fast float %61, 5.000000e-01
  %66 = fptoui float %65 to i16
  %67 = select i1 %64, i16 %66, i16 -1
  store i16 %67, ptr %52, align 2, !tbaa !53
  %68 = getelementptr inbounds %struct._PixelPacket, ptr %50, i64 0, i32 1
  store i16 %67, ptr %68, align 2, !tbaa !54
  br i1 %64, label %71, label %72

69:                                               ; preds = %60
  store i16 0, ptr %52, align 2, !tbaa !53
  %70 = getelementptr inbounds %struct._PixelPacket, ptr %50, i64 0, i32 1
  store i16 0, ptr %70, align 2, !tbaa !54
  br label %72

71:                                               ; preds = %63
  br label %72

72:                                               ; preds = %69, %63, %71
  %73 = phi i16 [ %66, %71 ], [ 0, %69 ], [ -1, %63 ]
  store i16 %73, ptr %50, align 2, !tbaa !55
  %74 = getelementptr inbounds %struct._PixelPacket, ptr %50, i64 1
  %75 = add nsw i64 %51, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %49, !llvm.loop !96

77:                                               ; preds = %72, %44
  %78 = load ptr, ptr %4, align 8, !tbaa !6
  %79 = load ptr, ptr %5, align 8, !tbaa !6
  %80 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %78, ptr noundef %79) #12
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %77, %36
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %83

83:                                               ; preds = %82, %77, %32
  %84 = load i64, ptr %8, align 8, !tbaa !59
  %85 = icmp slt i64 %34, %84
  br i1 %85, label %29, label %86, !llvm.loop !97

86:                                               ; preds = %83
  %87 = load i64, ptr %7, align 8, !tbaa !59
  br label %88

88:                                               ; preds = %86, %22
  %89 = phi i64 [ %24, %22 ], [ %87, %86 ]
  %90 = phi i64 [ %23, %22 ], [ %84, %86 ]
  %91 = load i64, ptr %9, align 8, !tbaa !59
  %92 = add nsw i64 %91, %89
  store i64 %92, ptr %7, align 8, !tbaa !59
  %93 = add nsw i64 %91, %90
  %94 = call i64 @llvm.smin.i64(i64 %93, i64 %14)
  store i64 %94, ptr %8, align 8, !tbaa !59
  %95 = icmp sgt i64 %92, %94
  br i1 %95, label %96, label %22

96:                                               ; preds = %88, %16
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  br label %97

97:                                               ; preds = %96, %6
  ret void
}

; Function Attrs: hot
declare nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf)) local_unnamed_addr #5

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.26(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 4 dereferenceable(4) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = load ptr, ptr %2, align 8, !tbaa !6
  %16 = getelementptr inbounds %struct._Image, ptr %15, i64 0, i32 8
  %17 = load i64, ptr %16, align 8, !tbaa !34
  %18 = add nsw i64 %17, -1
  %19 = icmp sgt i64 %17, 0
  br i1 %19, label %20, label %695

20:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %18, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %21 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %21, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %22 = load i64, ptr %9, align 8
  %23 = call i64 @llvm.smin.i64(i64 %22, i64 %18)
  store i64 %23, ptr %9, align 8, !tbaa !59
  %24 = load i64, ptr %8, align 8, !tbaa !59
  %25 = icmp sgt i64 %24, %23
  br i1 %25, label %694, label %26

26:                                               ; preds = %20, %686
  %27 = phi i64 [ %692, %686 ], [ %23, %20 ]
  %28 = phi i64 [ %690, %686 ], [ %24, %20 ]
  %29 = icmp sgt i64 %28, %27
  %30 = load i32, ptr %3, align 4
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %29, i1 true, i1 %31
  br i1 %32, label %686, label %36

33:                                               ; preds = %681
  %34 = add nsw i64 %38, 1
  %35 = load i32, ptr %3, align 4, !tbaa !10
  br label %36

36:                                               ; preds = %26, %33
  %37 = phi i32 [ %35, %33 ], [ %30, %26 ]
  %38 = phi i64 [ %34, %33 ], [ %28, %26 ]
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %681, label %40

40:                                               ; preds = %36
  %41 = load ptr, ptr %4, align 8, !tbaa !6
  %42 = load ptr, ptr %2, align 8, !tbaa !6
  %43 = getelementptr inbounds %struct._Image, ptr %42, i64 0, i32 7
  %44 = load i64, ptr %43, align 8, !tbaa !61
  %45 = load ptr, ptr %5, align 8, !tbaa !6
  %46 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %41, i64 noundef 0, i64 noundef %38, i64 noundef %44, i64 noundef 1, ptr noundef %45) #12
  %47 = icmp eq ptr %46, null
  br i1 %47, label %680, label %48

48:                                               ; preds = %40
  %49 = load ptr, ptr %2, align 8, !tbaa !6
  %50 = getelementptr inbounds %struct._Image, ptr %49, i64 0, i32 7
  %51 = load i64, ptr %50, align 8, !tbaa !61
  %52 = icmp sgt i64 %51, 0
  br i1 %52, label %53, label %675

53:                                               ; preds = %48, %667
  %54 = phi i64 [ %670, %667 ], [ 0, %48 ]
  %55 = phi ptr [ %669, %667 ], [ %46, %48 ]
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %12) #4
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %13) #4
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %14) #4
  %56 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 2
  %57 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 1
  %58 = load <2 x i16>, ptr %57, align 2, !tbaa !63
  %59 = uitofp <2 x i16> %58 to <2 x double>
  %60 = extractelement <2 x double> %59, i64 1
  %61 = fmul fast double %60, 0x3EF0001000100010
  %62 = load i16, ptr %55, align 2, !tbaa !55
  %63 = uitofp i16 %62 to double
  %64 = insertelement <2 x double> %59, double %63, i64 1
  %65 = fmul fast <2 x double> %64, <double 0x3EF0001000100010, double 0x3EF0001000100010>
  %66 = load i32, ptr %6, align 4, !tbaa !10
  switch i32 %66, label %639 [
    i32 22, label %67
    i32 24, label %99
    i32 32, label %102
    i32 14, label %105
    i32 30, label %108
    i32 15, label %111
    i32 31, label %114
    i32 16, label %117
    i32 5, label %120
    i32 25, label %192
    i32 27, label %192
    i32 28, label %195
    i32 26, label %198
    i32 23, label %269
    i32 6, label %347
    i32 7, label %398
    i32 33, label %448
    i32 9, label %495
    i32 10, label %542
    i32 11, label %592
  ]

67:                                               ; preds = %53
  %68 = fsub fast double 6.553500e+04, %60
  %69 = fptrunc double %68 to float
  %70 = fcmp fast ugt float %69, 0.000000e+00
  br i1 %70, label %71, label %76

71:                                               ; preds = %67
  %72 = fcmp fast ult float %69, 6.553500e+04
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = fadd fast float %69, 5.000000e-01
  %75 = fptoui float %74 to i16
  br label %76

76:                                               ; preds = %73, %71, %67
  %77 = phi i16 [ %75, %73 ], [ 0, %67 ], [ -1, %71 ]
  store i16 %77, ptr %14, align 2, !tbaa !63
  %78 = extractelement <2 x double> %59, i64 0
  %79 = fsub fast double 6.553500e+04, %78
  %80 = fptrunc double %79 to float
  %81 = fcmp fast ugt float %80, 0.000000e+00
  br i1 %81, label %82, label %87

82:                                               ; preds = %76
  %83 = fcmp fast ult float %80, 6.553500e+04
  br i1 %83, label %84, label %87

84:                                               ; preds = %82
  %85 = fadd fast float %80, 5.000000e-01
  %86 = fptoui float %85 to i16
  br label %87

87:                                               ; preds = %84, %82, %76
  %88 = phi i16 [ %86, %84 ], [ 0, %76 ], [ -1, %82 ]
  store i16 %88, ptr %13, align 2, !tbaa !63
  %89 = fsub fast double 6.553500e+04, %63
  %90 = fptrunc double %89 to float
  %91 = fcmp fast ugt float %90, 0.000000e+00
  br i1 %91, label %92, label %97

92:                                               ; preds = %87
  %93 = fcmp fast ult float %90, 6.553500e+04
  br i1 %93, label %94, label %97

94:                                               ; preds = %92
  %95 = fadd fast float %90, 5.000000e-01
  %96 = fptoui float %95 to i16
  br label %97

97:                                               ; preds = %87, %92, %94
  %98 = phi i16 [ %96, %94 ], [ 0, %87 ], [ -1, %92 ]
  store i16 %98, ptr %12, align 2, !tbaa !63
  br label %642

99:                                               ; preds = %53
  %100 = extractelement <2 x double> %65, i64 0
  %101 = extractelement <2 x double> %65, i64 1
  call void @ConvertHCLToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %100, double noundef nofpclass(nan inf) %101, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

102:                                              ; preds = %53
  %103 = extractelement <2 x double> %65, i64 0
  %104 = extractelement <2 x double> %65, i64 1
  call void @ConvertHCLpToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %103, double noundef nofpclass(nan inf) %104, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

105:                                              ; preds = %53
  %106 = extractelement <2 x double> %65, i64 0
  %107 = extractelement <2 x double> %65, i64 1
  call void @ConvertHSBToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %106, double noundef nofpclass(nan inf) %107, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

108:                                              ; preds = %53
  %109 = extractelement <2 x double> %65, i64 0
  %110 = extractelement <2 x double> %65, i64 1
  call void @ConvertHSIToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %109, double noundef nofpclass(nan inf) %110, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

111:                                              ; preds = %53
  %112 = extractelement <2 x double> %65, i64 0
  %113 = extractelement <2 x double> %65, i64 1
  call void @ConvertHSLToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %112, double noundef nofpclass(nan inf) %113, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

114:                                              ; preds = %53
  %115 = extractelement <2 x double> %65, i64 0
  %116 = extractelement <2 x double> %65, i64 1
  call void @ConvertHSVToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %115, double noundef nofpclass(nan inf) %116, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

117:                                              ; preds = %53
  %118 = extractelement <2 x double> %65, i64 0
  %119 = extractelement <2 x double> %65, i64 1
  call void @ConvertHWBToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %118, double noundef nofpclass(nan inf) %119, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

120:                                              ; preds = %53
  %121 = fmul fast <2 x double> %59, <double 0x3EE051FBD71A8F6D, double 0x3EEB962D3DE69F01>
  %122 = fmul fast double %60, 0x3EBC5750E051135F
  %123 = shufflevector <2 x double> %121, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %124 = insertelement <2 x double> %123, double %63, i64 1
  %125 = fadd fast <2 x double> %124, <double 0x3FC1A7B9611A7B96, double poison>
  %126 = fmul fast <2 x double> %124, <double poison, double 0xBEF4667ACCE13348>
  %127 = shufflevector <2 x double> %125, <2 x double> %126, <2 x i32> <i32 0, i32 3>
  %128 = fadd fast <2 x double> %121, <double -2.550000e-01, double 0x3FE8D054BEAD054C>
  %129 = fadd fast <2 x double> %128, %127
  %130 = fmul fast <2 x double> %127, %127
  %131 = fmul fast <2 x double> %130, %127
  %132 = extractelement <2 x double> %131, i64 0
  %133 = fcmp fast ogt double %132, 0x3F822354D28F7CD6
  %134 = select i1 %133, double %132, double %122
  %135 = fmul fast <2 x double> %129, %129
  %136 = fmul fast <2 x double> %135, %129
  %137 = fcmp fast ogt <2 x double> %136, <double 0x3F822354D28F7CD6, double 0x3F822354D28F7CD6>
  %138 = fmul fast <2 x double> %129, <double 0x3FC07004DED20922, double 0x3FC07004DED20922>
  %139 = fadd fast <2 x double> %138, <double 0xBF922354D28F7CD6, double 0xBF922354D28F7CD6>
  %140 = select <2 x i1> %137, <2 x double> %136, <2 x double> %139
  %141 = fmul fast double %134, -1.537200e+00
  %142 = fmul fast <2 x double> %140, <double 0x4008A3F00E4040AA, double 0xBFE15F0CB7F7BD36>
  %143 = extractelement <2 x double> %142, i64 0
  %144 = fadd fast double %143, %141
  %145 = extractelement <2 x double> %142, i64 1
  %146 = fadd fast double %144, %145
  %147 = extractelement <2 x double> %140, i64 0
  %148 = fmul fast double %147, 0xBFED77FC9AC09726
  %149 = fmul fast double %134, 1.875800e+00
  %150 = fadd fast double %148, %149
  %151 = extractelement <2 x double> %140, i64 1
  %152 = fmul fast double %151, 0x3FA72243AA575F96
  %153 = fadd fast double %150, %152
  %154 = fmul fast double %147, 0x3FAB1B01066701A9
  %155 = fmul fast double %134, -2.040000e-01
  %156 = fadd fast double %154, %155
  %157 = fmul fast double %151, 0x3FF269BADE85286B
  %158 = fadd fast double %156, %157
  %159 = fmul fast double %146, 6.553500e+04
  %160 = fptrunc double %159 to float
  %161 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %160) #12
  %162 = fcmp fast ugt float %161, 0.000000e+00
  br i1 %162, label %163, label %168

163:                                              ; preds = %120
  %164 = fcmp fast ult float %161, 6.553500e+04
  br i1 %164, label %165, label %168

165:                                              ; preds = %163
  %166 = fadd fast float %161, 5.000000e-01
  %167 = fptoui float %166 to i16
  br label %168

168:                                              ; preds = %165, %163, %120
  %169 = phi i16 [ %167, %165 ], [ 0, %120 ], [ -1, %163 ]
  store i16 %169, ptr %14, align 2, !tbaa !63
  %170 = fmul fast double %153, 6.553500e+04
  %171 = fptrunc double %170 to float
  %172 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %171) #12
  %173 = fcmp fast ugt float %172, 0.000000e+00
  br i1 %173, label %174, label %179

174:                                              ; preds = %168
  %175 = fcmp fast ult float %172, 6.553500e+04
  br i1 %175, label %176, label %179

176:                                              ; preds = %174
  %177 = fadd fast float %172, 5.000000e-01
  %178 = fptoui float %177 to i16
  br label %179

179:                                              ; preds = %176, %174, %168
  %180 = phi i16 [ %178, %176 ], [ 0, %168 ], [ -1, %174 ]
  store i16 %180, ptr %13, align 2, !tbaa !63
  %181 = fmul fast double %158, 6.553500e+04
  %182 = fptrunc double %181 to float
  %183 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %182) #12
  %184 = fcmp fast ugt float %183, 0.000000e+00
  br i1 %184, label %185, label %190

185:                                              ; preds = %179
  %186 = fcmp fast ult float %183, 6.553500e+04
  br i1 %186, label %187, label %190

187:                                              ; preds = %185
  %188 = fadd fast float %183, 5.000000e-01
  %189 = fptoui float %188 to i16
  br label %190

190:                                              ; preds = %179, %185, %187
  %191 = phi i16 [ %189, %187 ], [ 0, %179 ], [ -1, %185 ]
  store i16 %191, ptr %12, align 2, !tbaa !63
  br label %642

192:                                              ; preds = %53, %53
  %193 = extractelement <2 x double> %65, i64 0
  %194 = extractelement <2 x double> %65, i64 1
  call void @ConvertLCHabToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %193, double noundef nofpclass(nan inf) %194, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

195:                                              ; preds = %53
  %196 = extractelement <2 x double> %65, i64 0
  %197 = extractelement <2 x double> %65, i64 1
  call void @ConvertLCHuvToRGB(double noundef nofpclass(nan inf) %61, double noundef nofpclass(nan inf) %196, double noundef nofpclass(nan inf) %197, ptr noundef nonnull %14, ptr noundef nonnull %13, ptr noundef nonnull %12) #4
  br label %642

198:                                              ; preds = %53
  %199 = extractelement <2 x double> %59, i64 0
  %200 = fmul fast double %199, 0x3ED1D90F3602C793
  %201 = shufflevector <2 x double> %59, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %202 = insertelement <2 x double> %201, double %63, i64 1
  %203 = fmul fast <2 x double> %202, <double 0x3EF189CAAB7859F1, double 0x3EC7644910C2C01A>
  %204 = extractelement <2 x double> %203, i64 0
  %205 = fsub fast double %204, %200
  %206 = extractelement <2 x double> %203, i64 1
  %207 = fadd fast double %205, %206
  %208 = insertelement <2 x double> poison, double %63, i64 0
  %209 = shufflevector <2 x double> %208, <2 x double> poison, <2 x i32> zeroinitializer
  %210 = fmul fast <2 x double> %209, <double 0x3EB27512E22716A2, double 0x3EF03ED657FCAA0B>
  %211 = fmul fast double %207, 3.240600e+00
  %212 = fmul fast <2 x double> %59, <double 0x3EDE4E7C4F50EBE2, double 0xBE83B7B77D1421F7>
  %213 = fmul fast <2 x double> %59, <double 0x3E7756E8F281B278, double 0x3EDD147EF8654EB5>
  %214 = shufflevector <2 x double> %213, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %215 = fadd fast <2 x double> %212, %214
  %216 = fsub fast <2 x double> %212, %214
  %217 = shufflevector <2 x double> %215, <2 x double> %216, <2 x i32> <i32 0, i32 3>
  %218 = fadd fast <2 x double> %217, %210
  %219 = fmul fast <2 x double> %218, <double -1.537200e+00, double -4.986000e-01>
  %220 = extractelement <2 x double> %219, i64 0
  %221 = fadd fast double %220, %211
  %222 = extractelement <2 x double> %219, i64 1
  %223 = fadd fast double %221, %222
  %224 = fmul fast double %207, 0xBFEF013A92A30553
  %225 = extractelement <2 x double> %218, i64 0
  %226 = fmul fast double %225, 1.875800e+00
  %227 = fadd fast double %226, %224
  %228 = extractelement <2 x double> %218, i64 1
  %229 = fmul fast double %228, 4.150000e-02
  %230 = fadd fast double %227, %229
  %231 = fmul fast double %207, 5.570000e-02
  %232 = fmul fast double %225, -2.040000e-01
  %233 = fadd fast double %232, %231
  %234 = fmul fast double %228, 1.057000e+00
  %235 = fadd fast double %233, %234
  %236 = fmul fast double %223, 6.553500e+04
  %237 = fptrunc double %236 to float
  %238 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %237) #12
  %239 = fcmp fast ugt float %238, 0.000000e+00
  br i1 %239, label %240, label %245

240:                                              ; preds = %198
  %241 = fcmp fast ult float %238, 6.553500e+04
  br i1 %241, label %242, label %245

242:                                              ; preds = %240
  %243 = fadd fast float %238, 5.000000e-01
  %244 = fptoui float %243 to i16
  br label %245

245:                                              ; preds = %242, %240, %198
  %246 = phi i16 [ %244, %242 ], [ 0, %198 ], [ -1, %240 ]
  store i16 %246, ptr %14, align 2, !tbaa !63
  %247 = fmul fast double %230, 6.553500e+04
  %248 = fptrunc double %247 to float
  %249 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %248) #12
  %250 = fcmp fast ugt float %249, 0.000000e+00
  br i1 %250, label %251, label %256

251:                                              ; preds = %245
  %252 = fcmp fast ult float %249, 6.553500e+04
  br i1 %252, label %253, label %256

253:                                              ; preds = %251
  %254 = fadd fast float %249, 5.000000e-01
  %255 = fptoui float %254 to i16
  br label %256

256:                                              ; preds = %253, %251, %245
  %257 = phi i16 [ %255, %253 ], [ 0, %245 ], [ -1, %251 ]
  store i16 %257, ptr %13, align 2, !tbaa !63
  %258 = fmul fast double %235, 6.553500e+04
  %259 = fptrunc double %258 to float
  %260 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %259) #12
  %261 = fcmp fast ugt float %260, 0.000000e+00
  br i1 %261, label %262, label %267

262:                                              ; preds = %256
  %263 = fcmp fast ult float %260, 6.553500e+04
  br i1 %263, label %264, label %267

264:                                              ; preds = %262
  %265 = fadd fast float %260, 5.000000e-01
  %266 = fptoui float %265 to i16
  br label %267

267:                                              ; preds = %256, %262, %264
  %268 = phi i16 [ %266, %264 ], [ 0, %256 ], [ -1, %262 ]
  store i16 %268, ptr %12, align 2, !tbaa !63
  br label %642

269:                                              ; preds = %53
  %270 = fmul fast double %60, 0x3F59001900190019
  %271 = extractelement <2 x double> %59, i64 0
  %272 = fmul fast double %271, 0x3F76201620162016
  %273 = fmul fast double %63, 0x3F70601060106010
  %274 = fcmp fast ogt double %270, 8.000000e+00
  br i1 %274, label %275, label %279

275:                                              ; preds = %269
  %276 = fmul fast double %60, 0x3EEB962D3DE69F01
  %277 = fadd fast double %276, 0x3FC1A7B9611A7B96
  %278 = call fast double @llvm.powi.f64.i32(double %277, i32 3)
  br label %281

279:                                              ; preds = %269
  %280 = fmul fast double %60, 0x3EBC5750E051135F
  br label %281

281:                                              ; preds = %279, %275
  %282 = phi double [ %280, %279 ], [ %278, %275 ]
  %283 = fmul fast double %60, 0x3FAE781E781E781E
  %284 = fmul fast double %60, 0x3F8306D54D54168A
  %285 = fadd fast double %284, -1.400000e+02
  %286 = fadd fast double %285, %273
  %287 = fmul fast double %283, %282
  %288 = fmul fast double %60, 0x3F70131F52BA23AD
  %289 = fadd fast double %288, -1.340000e+02
  %290 = fadd fast double %289, %272
  %291 = fmul fast double %60, 0x3F9B15706AC5C01B
  %292 = fdiv fast double %291, %290
  %293 = fadd fast double %292, 0xBFD5555555555555
  %294 = fmul fast double %286, %292
  %295 = fdiv fast double %287, %294
  %296 = fmul fast double %295, %293
  %297 = fmul fast double %282, 5.000000e+00
  %298 = fsub fast double %296, %297
  %299 = fmul fast double %295, 3.240600e+00
  %300 = fmul fast double %282, -1.537200e+00
  %301 = fmul fast double %298, -4.986000e-01
  %302 = fadd fast double %299, %300
  %303 = fadd fast double %302, %301
  %304 = fmul fast double %295, 0xBFEF013A92A30553
  %305 = fmul fast double %282, 1.875800e+00
  %306 = fadd fast double %304, %305
  %307 = fmul fast double %298, 4.150000e-02
  %308 = fadd fast double %306, %307
  %309 = fmul fast double %295, 5.570000e-02
  %310 = fmul fast double %282, -2.040000e-01
  %311 = fadd fast double %309, %310
  %312 = fmul fast double %298, 1.057000e+00
  %313 = fadd fast double %311, %312
  %314 = fmul fast double %303, 6.553500e+04
  %315 = fptrunc double %314 to float
  %316 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %315) #12
  %317 = fcmp fast ugt float %316, 0.000000e+00
  br i1 %317, label %318, label %323

318:                                              ; preds = %281
  %319 = fcmp fast ult float %316, 6.553500e+04
  br i1 %319, label %320, label %323

320:                                              ; preds = %318
  %321 = fadd fast float %316, 5.000000e-01
  %322 = fptoui float %321 to i16
  br label %323

323:                                              ; preds = %320, %318, %281
  %324 = phi i16 [ %322, %320 ], [ 0, %281 ], [ -1, %318 ]
  store i16 %324, ptr %14, align 2, !tbaa !63
  %325 = fmul fast double %308, 6.553500e+04
  %326 = fptrunc double %325 to float
  %327 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %326) #12
  %328 = fcmp fast ugt float %327, 0.000000e+00
  br i1 %328, label %329, label %334

329:                                              ; preds = %323
  %330 = fcmp fast ult float %327, 6.553500e+04
  br i1 %330, label %331, label %334

331:                                              ; preds = %329
  %332 = fadd fast float %327, 5.000000e-01
  %333 = fptoui float %332 to i16
  br label %334

334:                                              ; preds = %331, %329, %323
  %335 = phi i16 [ %333, %331 ], [ 0, %323 ], [ -1, %329 ]
  store i16 %335, ptr %13, align 2, !tbaa !63
  %336 = fmul fast double %313, 6.553500e+04
  %337 = fptrunc double %336 to float
  %338 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %337) #12
  %339 = fcmp fast ugt float %338, 0.000000e+00
  br i1 %339, label %340, label %345

340:                                              ; preds = %334
  %341 = fcmp fast ult float %338, 6.553500e+04
  br i1 %341, label %342, label %345

342:                                              ; preds = %340
  %343 = fadd fast float %338, 5.000000e-01
  %344 = fptoui float %343 to i16
  br label %345

345:                                              ; preds = %334, %340, %342
  %346 = phi i16 [ %344, %342 ], [ 0, %334 ], [ -1, %340 ]
  store i16 %346, ptr %12, align 2, !tbaa !63
  br label %642

347:                                              ; preds = %53
  %348 = fmul fast <2 x double> %59, <double 0xBEF898779F6E33B4, double 0x3F09ECD99E34F574>
  %349 = fmul fast double %63, 0xBEDFE92FE2A229E7
  %350 = shufflevector <2 x double> %348, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %351 = fadd fast <2 x double> %348, %350
  %352 = extractelement <2 x double> %351, i64 0
  %353 = fadd fast double %352, %349
  %354 = fmul fast double %60, 0xBEEF015993FC9950
  %355 = extractelement <2 x double> %59, i64 0
  %356 = fmul fast double %355, 0x3EFE0364DFC2434A
  %357 = fadd fast double %356, %354
  %358 = fmul fast double %63, 0x3EA53F922D239597
  %359 = fadd fast double %357, %358
  %360 = fmul fast double %60, 0x3EAC84D26198A0AD
  %361 = fmul fast double %355, 0xBECA1CC624F74BE0
  %362 = fadd fast double %361, %360
  %363 = fmul fast double %63, 0x3EF0E989BE87B23E
  %364 = fadd fast double %362, %363
  %365 = fmul fast double %353, 6.553500e+04
  %366 = fptrunc double %365 to float
  %367 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %366) #12
  %368 = fcmp fast ugt float %367, 0.000000e+00
  br i1 %368, label %369, label %374

369:                                              ; preds = %347
  %370 = fcmp fast ult float %367, 6.553500e+04
  br i1 %370, label %371, label %374

371:                                              ; preds = %369
  %372 = fadd fast float %367, 5.000000e-01
  %373 = fptoui float %372 to i16
  br label %374

374:                                              ; preds = %371, %369, %347
  %375 = phi i16 [ %373, %371 ], [ 0, %347 ], [ -1, %369 ]
  store i16 %375, ptr %14, align 2, !tbaa !63
  %376 = fmul fast double %359, 6.553500e+04
  %377 = fptrunc double %376 to float
  %378 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %377) #12
  %379 = fcmp fast ugt float %378, 0.000000e+00
  br i1 %379, label %380, label %385

380:                                              ; preds = %374
  %381 = fcmp fast ult float %378, 6.553500e+04
  br i1 %381, label %382, label %385

382:                                              ; preds = %380
  %383 = fadd fast float %378, 5.000000e-01
  %384 = fptoui float %383 to i16
  br label %385

385:                                              ; preds = %382, %380, %374
  %386 = phi i16 [ %384, %382 ], [ 0, %374 ], [ -1, %380 ]
  store i16 %386, ptr %13, align 2, !tbaa !63
  %387 = fmul fast double %364, 6.553500e+04
  %388 = fptrunc double %387 to float
  %389 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %388) #12
  %390 = fcmp fast ugt float %389, 0.000000e+00
  br i1 %390, label %391, label %396

391:                                              ; preds = %385
  %392 = fcmp fast ult float %389, 6.553500e+04
  br i1 %392, label %393, label %396

393:                                              ; preds = %391
  %394 = fadd fast float %389, 5.000000e-01
  %395 = fptoui float %394 to i16
  br label %396

396:                                              ; preds = %385, %391, %393
  %397 = phi i16 [ %395, %393 ], [ 0, %385 ], [ -1, %391 ]
  store i16 %397, ptr %12, align 2, !tbaa !63
  br label %642

398:                                              ; preds = %53
  %399 = fmul fast double %60, 0x3EF00010000FF10D
  %400 = fadd fast <2 x double> %65, <double -5.000000e-01, double -5.000000e-01>
  %401 = fmul fast <2 x double> %400, <double 0xBEB4731C556195D4, double 0x3FF66E971EE48997>
  %402 = extractelement <2 x double> %401, i64 0
  %403 = fadd fast double %402, %399
  %404 = extractelement <2 x double> %401, i64 1
  %405 = fadd fast double %403, %404
  %406 = fmul fast double %405, 6.553500e+04
  %407 = fptrunc double %406 to float
  %408 = fcmp fast ugt float %407, 0.000000e+00
  br i1 %408, label %409, label %414

409:                                              ; preds = %398
  %410 = fcmp fast ult float %407, 6.553500e+04
  br i1 %410, label %411, label %414

411:                                              ; preds = %409
  %412 = fadd fast float %407, 5.000000e-01
  %413 = fptoui float %412 to i16
  br label %414

414:                                              ; preds = %411, %409, %398
  %415 = phi i16 [ %413, %411 ], [ 0, %398 ], [ -1, %409 ]
  store i16 %415, ptr %14, align 2, !tbaa !63
  %416 = fmul fast double %60, 0x3EF0000FBF65922F
  %417 = fmul fast <2 x double> %400, <double 0xBFD60651A6C6C2D3, double 0xBFE6DA34C675944B>
  %418 = extractelement <2 x double> %417, i64 0
  %419 = fadd fast double %418, %416
  %420 = extractelement <2 x double> %417, i64 1
  %421 = fadd fast double %419, %420
  %422 = fmul fast double %421, 6.553500e+04
  %423 = fptrunc double %422 to float
  %424 = fcmp fast ugt float %423, 0.000000e+00
  br i1 %424, label %425, label %430

425:                                              ; preds = %414
  %426 = fcmp fast ult float %423, 6.553500e+04
  br i1 %426, label %427, label %430

427:                                              ; preds = %425
  %428 = fadd fast float %423, 5.000000e-01
  %429 = fptoui float %428 to i16
  br label %430

430:                                              ; preds = %427, %425, %414
  %431 = phi i16 [ %429, %427 ], [ 0, %414 ], [ -1, %425 ]
  store i16 %431, ptr %13, align 2, !tbaa !63
  %432 = fmul fast double %60, 0x3EF000114D08F16B
  %433 = fmul fast <2 x double> %400, <double 0x3FFC5A1CBDC4A56B, double 0x3EC1FF14448BA0A3>
  %434 = extractelement <2 x double> %433, i64 0
  %435 = fadd fast double %434, %432
  %436 = extractelement <2 x double> %433, i64 1
  %437 = fadd fast double %435, %436
  %438 = fmul fast double %437, 6.553500e+04
  %439 = fptrunc double %438 to float
  %440 = fcmp fast ugt float %439, 0.000000e+00
  br i1 %440, label %441, label %446

441:                                              ; preds = %430
  %442 = fcmp fast ult float %439, 6.553500e+04
  br i1 %442, label %443, label %446

443:                                              ; preds = %441
  %444 = fadd fast float %439, 5.000000e-01
  %445 = fptoui float %444 to i16
  br label %446

446:                                              ; preds = %430, %441, %443
  %447 = phi i16 [ %445, %443 ], [ 0, %430 ], [ -1, %441 ]
  store i16 %447, ptr %12, align 2, !tbaa !63
  br label %642

448:                                              ; preds = %53
  %449 = fadd fast <2 x double> %65, <double -5.000000e-01, double -5.000000e-01>
  %450 = fmul fast <2 x double> %449, <double 0x3F183265C4C3E002, double 0xBFE0D446B9A7DF8C>
  %451 = extractelement <2 x double> %450, i64 0
  %452 = fadd fast double %451, %61
  %453 = extractelement <2 x double> %450, i64 1
  %454 = fadd fast double %452, %453
  %455 = fmul fast double %454, 6.553500e+04
  %456 = fptrunc double %455 to float
  %457 = fcmp fast ugt float %456, 0.000000e+00
  br i1 %457, label %458, label %463

458:                                              ; preds = %448
  %459 = fcmp fast ult float %456, 6.553500e+04
  br i1 %459, label %460, label %463

460:                                              ; preds = %458
  %461 = fadd fast float %456, 5.000000e-01
  %462 = fptoui float %461 to i16
  br label %463

463:                                              ; preds = %460, %458, %448
  %464 = phi i16 [ %462, %460 ], [ 0, %448 ], [ -1, %458 ]
  store i16 %464, ptr %14, align 2, !tbaa !63
  %465 = fmul fast <2 x double> %449, <double 0xBFC0876D44C944CC, double 0x3FD1254339516890>
  %466 = extractelement <2 x double> %465, i64 0
  %467 = fadd fast double %466, %61
  %468 = extractelement <2 x double> %465, i64 1
  %469 = fadd fast double %467, %468
  %470 = fmul fast double %469, 6.553500e+04
  %471 = fptrunc double %470 to float
  %472 = fcmp fast ugt float %471, 0.000000e+00
  br i1 %472, label %473, label %478

473:                                              ; preds = %463
  %474 = fcmp fast ult float %471, 6.553500e+04
  br i1 %474, label %475, label %478

475:                                              ; preds = %473
  %476 = fadd fast float %471, 5.000000e-01
  %477 = fptoui float %476 to i16
  br label %478

478:                                              ; preds = %475, %473, %463
  %479 = phi i16 [ %477, %475 ], [ 0, %463 ], [ -1, %473 ]
  store i16 %479, ptr %13, align 2, !tbaa !63
  %480 = fmul fast <2 x double> %449, <double 0x3FE5450D051E42A1, double 0xBF14C3315641A00B>
  %481 = extractelement <2 x double> %480, i64 0
  %482 = fadd fast double %481, %61
  %483 = extractelement <2 x double> %480, i64 1
  %484 = fadd fast double %482, %483
  %485 = fmul fast double %484, 6.553500e+04
  %486 = fptrunc double %485 to float
  %487 = fcmp fast ugt float %486, 0.000000e+00
  br i1 %487, label %488, label %493

488:                                              ; preds = %478
  %489 = fcmp fast ult float %486, 6.553500e+04
  br i1 %489, label %490, label %493

490:                                              ; preds = %488
  %491 = fadd fast float %486, 5.000000e-01
  %492 = fptoui float %491 to i16
  br label %493

493:                                              ; preds = %478, %488, %490
  %494 = phi i16 [ %492, %490 ], [ 0, %478 ], [ -1, %488 ]
  store i16 %494, ptr %12, align 2, !tbaa !63
  br label %642

495:                                              ; preds = %53
  %496 = fadd fast <2 x double> %65, <double -5.000000e-01, double -5.000000e-01>
  %497 = fmul fast <2 x double> %496, <double 0x3FEE99F97B356C3F, double 0x3FE3DF6E98D78B83>
  %498 = extractelement <2 x double> %497, i64 0
  %499 = fadd fast double %498, %61
  %500 = extractelement <2 x double> %497, i64 1
  %501 = fadd fast double %499, %500
  %502 = fmul fast double %501, 6.553500e+04
  %503 = fptrunc double %502 to float
  %504 = fcmp fast ugt float %503, 0.000000e+00
  br i1 %504, label %505, label %510

505:                                              ; preds = %495
  %506 = fcmp fast ult float %503, 6.553500e+04
  br i1 %506, label %507, label %510

507:                                              ; preds = %505
  %508 = fadd fast float %503, 5.000000e-01
  %509 = fptoui float %508 to i16
  br label %510

510:                                              ; preds = %507, %505, %495
  %511 = phi i16 [ %509, %507 ], [ 0, %495 ], [ -1, %505 ]
  store i16 %511, ptr %14, align 2, !tbaa !63
  %512 = fmul fast <2 x double> %496, <double 0xBFD16A72CF45E123, double 0xBFE4B757836DCD63>
  %513 = extractelement <2 x double> %512, i64 0
  %514 = fadd fast double %513, %61
  %515 = extractelement <2 x double> %512, i64 1
  %516 = fadd fast double %514, %515
  %517 = fmul fast double %516, 6.553500e+04
  %518 = fptrunc double %517 to float
  %519 = fcmp fast ugt float %518, 0.000000e+00
  br i1 %519, label %520, label %525

520:                                              ; preds = %510
  %521 = fcmp fast ult float %518, 6.553500e+04
  br i1 %521, label %522, label %525

522:                                              ; preds = %520
  %523 = fadd fast float %518, 5.000000e-01
  %524 = fptoui float %523 to i16
  br label %525

525:                                              ; preds = %522, %520, %510
  %526 = phi i16 [ %524, %522 ], [ 0, %510 ], [ -1, %520 ]
  store i16 %526, ptr %13, align 2, !tbaa !63
  %527 = fmul fast <2 x double> %496, <double 0xBFF1B63A1D7EA179, double 0x3FFB461A6063F4C4>
  %528 = extractelement <2 x double> %527, i64 0
  %529 = fadd fast double %528, %61
  %530 = extractelement <2 x double> %527, i64 1
  %531 = fadd fast double %529, %530
  %532 = fmul fast double %531, 6.553500e+04
  %533 = fptrunc double %532 to float
  %534 = fcmp fast ugt float %533, 0.000000e+00
  br i1 %534, label %535, label %540

535:                                              ; preds = %525
  %536 = fcmp fast ult float %533, 6.553500e+04
  br i1 %536, label %537, label %540

537:                                              ; preds = %535
  %538 = fadd fast float %533, 5.000000e-01
  %539 = fptoui float %538 to i16
  br label %540

540:                                              ; preds = %525, %535, %537
  %541 = phi i16 [ %539, %537 ], [ 0, %525 ], [ -1, %535 ]
  store i16 %541, ptr %12, align 2, !tbaa !63
  br label %642

542:                                              ; preds = %53
  %543 = fmul fast double %60, 0x3EF00010000FF10D
  %544 = fadd fast <2 x double> %65, <double -5.000000e-01, double -5.000000e-01>
  %545 = fmul fast <2 x double> %544, <double 0xBEB4731C556195D4, double 0x3FF66E971EE48997>
  %546 = extractelement <2 x double> %545, i64 0
  %547 = fadd fast double %546, %543
  %548 = extractelement <2 x double> %545, i64 1
  %549 = fadd fast double %547, %548
  %550 = fmul fast double %549, 6.553500e+04
  %551 = fptrunc double %550 to float
  %552 = fcmp fast ugt float %551, 0.000000e+00
  br i1 %552, label %553, label %558

553:                                              ; preds = %542
  %554 = fcmp fast ult float %551, 6.553500e+04
  br i1 %554, label %555, label %558

555:                                              ; preds = %553
  %556 = fadd fast float %551, 5.000000e-01
  %557 = fptoui float %556 to i16
  br label %558

558:                                              ; preds = %555, %553, %542
  %559 = phi i16 [ %557, %555 ], [ 0, %542 ], [ -1, %553 ]
  store i16 %559, ptr %14, align 2, !tbaa !63
  %560 = fmul fast double %60, 0x3EF0000FBF65922F
  %561 = fmul fast <2 x double> %544, <double 0xBFD60651A6C6C2D3, double 0xBFE6DA34C675944B>
  %562 = extractelement <2 x double> %561, i64 0
  %563 = fadd fast double %562, %560
  %564 = extractelement <2 x double> %561, i64 1
  %565 = fadd fast double %563, %564
  %566 = fmul fast double %565, 6.553500e+04
  %567 = fptrunc double %566 to float
  %568 = fcmp fast ugt float %567, 0.000000e+00
  br i1 %568, label %569, label %574

569:                                              ; preds = %558
  %570 = fcmp fast ult float %567, 6.553500e+04
  br i1 %570, label %571, label %574

571:                                              ; preds = %569
  %572 = fadd fast float %567, 5.000000e-01
  %573 = fptoui float %572 to i16
  br label %574

574:                                              ; preds = %571, %569, %558
  %575 = phi i16 [ %573, %571 ], [ 0, %558 ], [ -1, %569 ]
  store i16 %575, ptr %13, align 2, !tbaa !63
  %576 = fmul fast double %60, 0x3EF000114D08F16B
  %577 = fmul fast <2 x double> %544, <double 0x3FFC5A1CBDC4A56B, double 0x3EC1FF14448BA0A3>
  %578 = extractelement <2 x double> %577, i64 0
  %579 = fadd fast double %578, %576
  %580 = extractelement <2 x double> %577, i64 1
  %581 = fadd fast double %579, %580
  %582 = fmul fast double %581, 6.553500e+04
  %583 = fptrunc double %582 to float
  %584 = fcmp fast ugt float %583, 0.000000e+00
  br i1 %584, label %585, label %590

585:                                              ; preds = %574
  %586 = fcmp fast ult float %583, 6.553500e+04
  br i1 %586, label %587, label %590

587:                                              ; preds = %585
  %588 = fadd fast float %583, 5.000000e-01
  %589 = fptoui float %588 to i16
  br label %590

590:                                              ; preds = %574, %585, %587
  %591 = phi i16 [ %589, %587 ], [ 0, %574 ], [ -1, %585 ]
  store i16 %591, ptr %12, align 2, !tbaa !63
  br label %642

592:                                              ; preds = %53
  %593 = fadd fast <2 x double> %65, <double -5.000000e-01, double -5.000000e-01>
  %594 = fmul fast <2 x double> %593, <double 0xBF04AFD6A052C652, double 0x3FF23CBC40211957>
  %595 = extractelement <2 x double> %594, i64 0
  %596 = fadd fast double %595, %61
  %597 = extractelement <2 x double> %594, i64 1
  %598 = fadd fast double %596, %597
  %599 = fmul fast double %598, 6.553500e+04
  %600 = fptrunc double %599 to float
  %601 = fcmp fast ugt float %600, 0.000000e+00
  br i1 %601, label %602, label %607

602:                                              ; preds = %592
  %603 = fcmp fast ult float %600, 6.553500e+04
  br i1 %603, label %604, label %607

604:                                              ; preds = %602
  %605 = fadd fast float %600, 5.000000e-01
  %606 = fptoui float %605 to i16
  br label %607

607:                                              ; preds = %604, %602, %592
  %608 = phi i16 [ %606, %604 ], [ 0, %592 ], [ -1, %602 ]
  store i16 %608, ptr %14, align 2, !tbaa !63
  %609 = fmul fast <2 x double> %593, <double 0xBFD9414AFD6A052C, double 0xBFE2937565E20109>
  %610 = extractelement <2 x double> %609, i64 0
  %611 = fadd fast double %610, %61
  %612 = extractelement <2 x double> %609, i64 1
  %613 = fadd fast double %611, %612
  %614 = fmul fast double %613, 6.553500e+04
  %615 = fptrunc double %614 to float
  %616 = fcmp fast ugt float %615, 0.000000e+00
  br i1 %616, label %617, label %622

617:                                              ; preds = %607
  %618 = fcmp fast ult float %615, 6.553500e+04
  br i1 %618, label %619, label %622

619:                                              ; preds = %617
  %620 = fadd fast float %615, 5.000000e-01
  %621 = fptoui float %620 to i16
  br label %622

622:                                              ; preds = %619, %617, %607
  %623 = phi i16 [ %621, %619 ], [ 0, %607 ], [ -1, %617 ]
  store i16 %623, ptr %13, align 2, !tbaa !63
  %624 = fmul fast <2 x double> %593, <double 0x400041890CEDE624, double 0xBF3F8C274E17C966>
  %625 = extractelement <2 x double> %624, i64 0
  %626 = fadd fast double %625, %61
  %627 = extractelement <2 x double> %624, i64 1
  %628 = fadd fast double %626, %627
  %629 = fmul fast double %628, 6.553500e+04
  %630 = fptrunc double %629 to float
  %631 = fcmp fast ugt float %630, 0.000000e+00
  br i1 %631, label %632, label %637

632:                                              ; preds = %622
  %633 = fcmp fast ult float %630, 6.553500e+04
  br i1 %633, label %634, label %637

634:                                              ; preds = %632
  %635 = fadd fast float %630, 5.000000e-01
  %636 = fptoui float %635 to i16
  br label %637

637:                                              ; preds = %622, %632, %634
  %638 = phi i16 [ %636, %634 ], [ 0, %622 ], [ -1, %632 ]
  store i16 %638, ptr %12, align 2, !tbaa !63
  br label %642

639:                                              ; preds = %53
  %640 = extractelement <2 x i16> %58, i64 0
  store i16 %640, ptr %13, align 2, !tbaa !63
  store i16 %62, ptr %12, align 2, !tbaa !63
  %641 = extractelement <2 x i16> %58, i64 1
  br label %644

642:                                              ; preds = %97, %99, %102, %105, %108, %111, %114, %117, %190, %192, %195, %267, %345, %396, %446, %493, %540, %590, %637
  %643 = load i16, ptr %14, align 2, !tbaa !63
  br label %644

644:                                              ; preds = %642, %639
  %645 = phi i16 [ %643, %642 ], [ %641, %639 ]
  switch i16 %645, label %646 [
    i16 0, label %651
    i16 -1, label %650
  ]

646:                                              ; preds = %644
  %647 = uitofp i16 %645 to float
  %648 = fadd fast float %647, 5.000000e-01
  %649 = fptoui float %648 to i16
  br label %651

650:                                              ; preds = %644
  br label %651

651:                                              ; preds = %644, %650, %646
  %652 = phi i16 [ %649, %646 ], [ %645, %644 ], [ -1, %650 ]
  store i16 %652, ptr %56, align 2, !tbaa !53
  %653 = load i16, ptr %13, align 2, !tbaa !63
  switch i16 %653, label %654 [
    i16 0, label %659
    i16 -1, label %658
  ]

654:                                              ; preds = %651
  %655 = uitofp i16 %653 to float
  %656 = fadd fast float %655, 5.000000e-01
  %657 = fptoui float %656 to i16
  br label %659

658:                                              ; preds = %651
  br label %659

659:                                              ; preds = %651, %658, %654
  %660 = phi i16 [ %657, %654 ], [ %653, %651 ], [ -1, %658 ]
  store i16 %660, ptr %57, align 2, !tbaa !54
  %661 = load i16, ptr %12, align 2, !tbaa !63
  switch i16 %661, label %662 [
    i16 0, label %667
    i16 -1, label %666
  ]

662:                                              ; preds = %659
  %663 = uitofp i16 %661 to float
  %664 = fadd fast float %663, 5.000000e-01
  %665 = fptoui float %664 to i16
  br label %667

666:                                              ; preds = %659
  br label %667

667:                                              ; preds = %659, %666, %662
  %668 = phi i16 [ %665, %662 ], [ %661, %659 ], [ -1, %666 ]
  store i16 %668, ptr %55, align 2, !tbaa !55
  %669 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 1
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %14) #4
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %13) #4
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %12) #4
  %670 = add nuw nsw i64 %54, 1
  %671 = load ptr, ptr %2, align 8, !tbaa !6
  %672 = getelementptr inbounds %struct._Image, ptr %671, i64 0, i32 7
  %673 = load i64, ptr %672, align 8, !tbaa !61
  %674 = icmp slt i64 %670, %673
  br i1 %674, label %53, label %675, !llvm.loop !98

675:                                              ; preds = %667, %48
  %676 = load ptr, ptr %4, align 8, !tbaa !6
  %677 = load ptr, ptr %5, align 8, !tbaa !6
  %678 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %676, ptr noundef %677) #12
  %679 = icmp eq i32 %678, 0
  br i1 %679, label %680, label %681

680:                                              ; preds = %675, %40
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %681

681:                                              ; preds = %680, %675, %36
  %682 = load i64, ptr %9, align 8, !tbaa !59
  %683 = icmp slt i64 %38, %682
  br i1 %683, label %33, label %684, !llvm.loop !99

684:                                              ; preds = %681
  %685 = load i64, ptr %8, align 8, !tbaa !59
  br label %686

686:                                              ; preds = %684, %26
  %687 = phi i64 [ %28, %26 ], [ %685, %684 ]
  %688 = phi i64 [ %27, %26 ], [ %682, %684 ]
  %689 = load i64, ptr %10, align 8, !tbaa !59
  %690 = add nsw i64 %689, %687
  store i64 %690, ptr %8, align 8, !tbaa !59
  %691 = add nsw i64 %689, %688
  %692 = call i64 @llvm.smin.i64(i64 %691, i64 %18)
  store i64 %692, ptr %9, align 8, !tbaa !59
  %693 = icmp sgt i64 %690, %692
  br i1 %693, label %694, label %26

694:                                              ; preds = %686, %20
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %21)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %695

695:                                              ; preds = %694, %7
  ret void
}

declare void @ConvertHCLToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHCLpToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSBToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSIToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSLToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSVToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHWBToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertLCHabToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertLCHuvToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.27(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = load ptr, ptr %2, align 8, !tbaa !6
  %13 = getelementptr inbounds %struct._Image, ptr %12, i64 0, i32 8
  %14 = load i64, ptr %13, align 8, !tbaa !34
  %15 = add nsw i64 %14, -1
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %123

17:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %15, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %18 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %18, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %19 = load i64, ptr %9, align 8
  %20 = call i64 @llvm.smin.i64(i64 %19, i64 %15)
  store i64 %20, ptr %9, align 8, !tbaa !59
  %21 = load i64, ptr %8, align 8, !tbaa !59
  %22 = icmp sgt i64 %21, %20
  br i1 %22, label %122, label %23

23:                                               ; preds = %17, %114
  %24 = phi i64 [ %120, %114 ], [ %20, %17 ]
  %25 = phi i64 [ %118, %114 ], [ %21, %17 ]
  %26 = icmp sgt i64 %25, %24
  %27 = load i32, ptr %3, align 4
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %26, i1 true, i1 %28
  br i1 %29, label %114, label %33

30:                                               ; preds = %109
  %31 = add nsw i64 %35, 1
  %32 = load i32, ptr %3, align 4, !tbaa !10
  br label %33

33:                                               ; preds = %23, %30
  %34 = phi i32 [ %32, %30 ], [ %27, %23 ]
  %35 = phi i64 [ %31, %30 ], [ %25, %23 ]
  %36 = icmp eq i32 %34, 0
  br i1 %36, label %109, label %37

37:                                               ; preds = %33
  %38 = load ptr, ptr %4, align 8, !tbaa !6
  %39 = load ptr, ptr %2, align 8, !tbaa !6
  %40 = getelementptr inbounds %struct._Image, ptr %39, i64 0, i32 7
  %41 = load i64, ptr %40, align 8, !tbaa !61
  %42 = load ptr, ptr %5, align 8, !tbaa !6
  %43 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %38, i64 noundef 0, i64 noundef %35, i64 noundef %41, i64 noundef 1, ptr noundef %42) #12
  %44 = icmp eq ptr %43, null
  br i1 %44, label %108, label %45

45:                                               ; preds = %37
  %46 = load ptr, ptr %2, align 8, !tbaa !6
  %47 = getelementptr inbounds %struct._Image, ptr %46, i64 0, i32 7
  %48 = load i64, ptr %47, align 8, !tbaa !61
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %103, label %50

50:                                               ; preds = %45, %98
  %51 = phi i64 [ %101, %98 ], [ %48, %45 ]
  %52 = phi ptr [ %100, %98 ], [ %43, %45 ]
  %53 = load ptr, ptr %6, align 8, !tbaa !6
  %54 = getelementptr inbounds %struct._PixelPacket, ptr %52, i64 0, i32 2
  %55 = load i16, ptr %54, align 2, !tbaa !53
  %56 = zext i16 %55 to i64
  %57 = getelementptr inbounds i16, ptr %53, i64 %56
  %58 = load i16, ptr %57, align 2, !tbaa !63
  %59 = uitofp i16 %58 to float
  %60 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %59) #12
  %61 = fcmp fast ugt float %60, 0.000000e+00
  br i1 %61, label %62, label %67

62:                                               ; preds = %50
  %63 = fcmp fast ult float %60, 6.553500e+04
  br i1 %63, label %64, label %67

64:                                               ; preds = %62
  %65 = fadd fast float %60, 5.000000e-01
  %66 = fptoui float %65 to i16
  br label %67

67:                                               ; preds = %50, %62, %64
  %68 = phi i16 [ %66, %64 ], [ 0, %50 ], [ -1, %62 ]
  %69 = load ptr, ptr %6, align 8, !tbaa !6
  %70 = getelementptr inbounds %struct._PixelPacket, ptr %52, i64 0, i32 1
  %71 = load i16, ptr %70, align 2, !tbaa !54
  %72 = zext i16 %71 to i64
  %73 = getelementptr inbounds i16, ptr %69, i64 %72
  %74 = load i16, ptr %73, align 2, !tbaa !63
  %75 = uitofp i16 %74 to float
  %76 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %75) #12
  %77 = fcmp fast ugt float %76, 0.000000e+00
  br i1 %77, label %78, label %83

78:                                               ; preds = %67
  %79 = fcmp fast ult float %76, 6.553500e+04
  br i1 %79, label %80, label %83

80:                                               ; preds = %78
  %81 = fadd fast float %76, 5.000000e-01
  %82 = fptoui float %81 to i16
  br label %83

83:                                               ; preds = %67, %78, %80
  %84 = phi i16 [ %82, %80 ], [ 0, %67 ], [ -1, %78 ]
  %85 = load ptr, ptr %6, align 8, !tbaa !6
  %86 = load i16, ptr %52, align 2, !tbaa !55
  %87 = zext i16 %86 to i64
  %88 = getelementptr inbounds i16, ptr %85, i64 %87
  %89 = load i16, ptr %88, align 2, !tbaa !63
  %90 = uitofp i16 %89 to float
  %91 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %90) #12
  %92 = fcmp fast ugt float %91, 0.000000e+00
  br i1 %92, label %93, label %98

93:                                               ; preds = %83
  %94 = fcmp fast ult float %91, 6.553500e+04
  br i1 %94, label %95, label %98

95:                                               ; preds = %93
  %96 = fadd fast float %91, 5.000000e-01
  %97 = fptoui float %96 to i16
  br label %98

98:                                               ; preds = %83, %93, %95
  %99 = phi i16 [ %97, %95 ], [ 0, %83 ], [ -1, %93 ]
  store i16 %68, ptr %54, align 2, !tbaa !53
  store i16 %84, ptr %70, align 2, !tbaa !54
  store i16 %99, ptr %52, align 2, !tbaa !55
  %100 = getelementptr inbounds %struct._PixelPacket, ptr %52, i64 1
  %101 = add nsw i64 %51, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %50, !llvm.loop !100

103:                                              ; preds = %98, %45
  %104 = load ptr, ptr %4, align 8, !tbaa !6
  %105 = load ptr, ptr %5, align 8, !tbaa !6
  %106 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %104, ptr noundef %105) #12
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %103, %37
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %109

109:                                              ; preds = %108, %103, %33
  %110 = load i64, ptr %9, align 8, !tbaa !59
  %111 = icmp slt i64 %35, %110
  br i1 %111, label %30, label %112, !llvm.loop !101

112:                                              ; preds = %109
  %113 = load i64, ptr %8, align 8, !tbaa !59
  br label %114

114:                                              ; preds = %112, %23
  %115 = phi i64 [ %25, %23 ], [ %113, %112 ]
  %116 = phi i64 [ %24, %23 ], [ %110, %112 ]
  %117 = load i64, ptr %10, align 8, !tbaa !59
  %118 = add nsw i64 %117, %115
  store i64 %118, ptr %8, align 8, !tbaa !59
  %119 = add nsw i64 %117, %116
  %120 = call i64 @llvm.smin.i64(i64 %119, i64 %15)
  store i64 %120, ptr %9, align 8, !tbaa !59
  %121 = icmp sgt i64 %118, %120
  br i1 %121, label %122, label %23

122:                                              ; preds = %114, %17
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %18)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %123

123:                                              ; preds = %122, %7
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.28(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5) #3 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = load ptr, ptr %2, align 8, !tbaa !6
  %12 = getelementptr inbounds %struct._Image, ptr %11, i64 0, i32 8
  %13 = load i64, ptr %12, align 8, !tbaa !34
  %14 = add nsw i64 %13, -1
  %15 = icmp sgt i64 %13, 0
  br i1 %15, label %16, label %110

16:                                               ; preds = %6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 0, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 %14, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 1, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #4
  store i32 0, ptr %10, align 4, !tbaa !60
  %17 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %17, i32 33, ptr nonnull %10, ptr nonnull %7, ptr nonnull %8, ptr nonnull %9, i64 1, i64 4)
  %18 = load i64, ptr %8, align 8
  %19 = call i64 @llvm.smin.i64(i64 %18, i64 %14)
  store i64 %19, ptr %8, align 8, !tbaa !59
  %20 = load i64, ptr %7, align 8, !tbaa !59
  %21 = icmp sgt i64 %20, %19
  br i1 %21, label %109, label %22

22:                                               ; preds = %16, %101
  %23 = phi i64 [ %107, %101 ], [ %19, %16 ]
  %24 = phi i64 [ %105, %101 ], [ %20, %16 ]
  %25 = icmp sgt i64 %24, %23
  %26 = load i32, ptr %3, align 4
  %27 = icmp eq i32 %26, 0
  %28 = select i1 %25, i1 true, i1 %27
  br i1 %28, label %101, label %32

29:                                               ; preds = %96
  %30 = add nsw i64 %34, 1
  %31 = load i32, ptr %3, align 4, !tbaa !10
  br label %32

32:                                               ; preds = %22, %29
  %33 = phi i32 [ %31, %29 ], [ %26, %22 ]
  %34 = phi i64 [ %30, %29 ], [ %24, %22 ]
  %35 = icmp eq i32 %33, 0
  br i1 %35, label %96, label %36

36:                                               ; preds = %32
  %37 = load ptr, ptr %4, align 8, !tbaa !6
  %38 = load ptr, ptr %2, align 8, !tbaa !6
  %39 = getelementptr inbounds %struct._Image, ptr %38, i64 0, i32 7
  %40 = load i64, ptr %39, align 8, !tbaa !61
  %41 = load ptr, ptr %5, align 8, !tbaa !6
  %42 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %37, i64 noundef 0, i64 noundef %34, i64 noundef %40, i64 noundef 1, ptr noundef %41) #12
  %43 = icmp eq ptr %42, null
  br i1 %43, label %95, label %44

44:                                               ; preds = %36
  %45 = load ptr, ptr %2, align 8, !tbaa !6
  %46 = getelementptr inbounds %struct._Image, ptr %45, i64 0, i32 7
  %47 = load i64, ptr %46, align 8, !tbaa !61
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %90, label %49

49:                                               ; preds = %44, %85
  %50 = phi i64 [ %88, %85 ], [ %47, %44 ]
  %51 = phi ptr [ %87, %85 ], [ %42, %44 ]
  %52 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 0, i32 2
  %53 = load i16, ptr %52, align 2, !tbaa !53
  %54 = uitofp i16 %53 to float
  %55 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %54) #12
  %56 = fcmp fast ugt float %55, 0.000000e+00
  br i1 %56, label %57, label %62

57:                                               ; preds = %49
  %58 = fcmp fast ult float %55, 6.553500e+04
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = fadd fast float %55, 5.000000e-01
  %61 = fptoui float %60 to i16
  br label %62

62:                                               ; preds = %49, %57, %59
  %63 = phi i16 [ %61, %59 ], [ 0, %49 ], [ -1, %57 ]
  %64 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 0, i32 1
  %65 = load i16, ptr %64, align 2, !tbaa !54
  %66 = uitofp i16 %65 to float
  %67 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %66) #12
  %68 = fcmp fast ugt float %67, 0.000000e+00
  br i1 %68, label %69, label %74

69:                                               ; preds = %62
  %70 = fcmp fast ult float %67, 6.553500e+04
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = fadd fast float %67, 5.000000e-01
  %73 = fptoui float %72 to i16
  br label %74

74:                                               ; preds = %62, %69, %71
  %75 = phi i16 [ %73, %71 ], [ 0, %62 ], [ -1, %69 ]
  %76 = load i16, ptr %51, align 2, !tbaa !55
  %77 = uitofp i16 %76 to float
  %78 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %77) #12
  %79 = fcmp fast ugt float %78, 0.000000e+00
  br i1 %79, label %80, label %85

80:                                               ; preds = %74
  %81 = fcmp fast ult float %78, 6.553500e+04
  br i1 %81, label %82, label %85

82:                                               ; preds = %80
  %83 = fadd fast float %78, 5.000000e-01
  %84 = fptoui float %83 to i16
  br label %85

85:                                               ; preds = %74, %80, %82
  %86 = phi i16 [ %84, %82 ], [ 0, %74 ], [ -1, %80 ]
  store i16 %63, ptr %52, align 2, !tbaa !53
  store i16 %75, ptr %64, align 2, !tbaa !54
  store i16 %86, ptr %51, align 2, !tbaa !55
  %87 = getelementptr inbounds %struct._PixelPacket, ptr %51, i64 1
  %88 = add nsw i64 %50, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %49, !llvm.loop !102

90:                                               ; preds = %85, %44
  %91 = load ptr, ptr %4, align 8, !tbaa !6
  %92 = load ptr, ptr %5, align 8, !tbaa !6
  %93 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %91, ptr noundef %92) #12
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %90, %36
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %96

96:                                               ; preds = %95, %90, %32
  %97 = load i64, ptr %8, align 8, !tbaa !59
  %98 = icmp slt i64 %34, %97
  br i1 %98, label %29, label %99, !llvm.loop !103

99:                                               ; preds = %96
  %100 = load i64, ptr %7, align 8, !tbaa !59
  br label %101

101:                                              ; preds = %99, %22
  %102 = phi i64 [ %24, %22 ], [ %100, %99 ]
  %103 = phi i64 [ %23, %22 ], [ %97, %99 ]
  %104 = load i64, ptr %9, align 8, !tbaa !59
  %105 = add nsw i64 %104, %102
  store i64 %105, ptr %7, align 8, !tbaa !59
  %106 = add nsw i64 %104, %103
  %107 = call i64 @llvm.smin.i64(i64 %106, i64 %14)
  store i64 %107, ptr %8, align 8, !tbaa !59
  %108 = icmp sgt i64 %105, %107
  br i1 %108, label %109, label %22

109:                                              ; preds = %101, %16
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %17)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  br label %110

110:                                              ; preds = %109, %6
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.29(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %175, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %168
  %26 = phi i64 [ 0, %15 ], [ %173, %168 ]
  %27 = phi i64 [ %13, %15 ], [ %171, %168 ]
  %28 = phi i64 [ %11, %15 ], [ %169, %168 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 20
  br i1 %34, label %141, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %141, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %136, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %137, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fptrunc <4 x double> %112 to <4 x float>
  %114 = fmul fast <4 x double> %112, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %115 = fadd fast <4 x double> %114, <double -6.553500e+04, double -6.553500e+04, double -6.553500e+04, double -6.553500e+04>
  %116 = fmul fast <4 x double> %115, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %117 = fptrunc <4 x double> %116 to <4 x float>
  %118 = fmul fast <4 x double> %115, <double -3.333400e-01, double -3.333400e-01, double -3.333400e-01, double -3.333400e-01>
  %119 = fptrunc <4 x double> %118 to <4 x float>
  %120 = fmul fast <4 x double> %115, <double 6.666650e-01, double 6.666650e-01, double 6.666650e-01, double 6.666650e-01>
  %121 = fptrunc <4 x double> %120 to <4 x float>
  %122 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %123 = shufflevector <4 x float> %113, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %124 = shufflevector <4 x float> %113, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %125 = shufflevector <8 x float> %123, <8 x float> %124, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %125, ptr %122, align 4, !tbaa !37
  %126 = fmul fast <4 x double> %115, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %127 = fptrunc <4 x double> %126 to <4 x float>
  %128 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %129 = shufflevector <4 x float> %117, <4 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %130 = shufflevector <4 x float> %127, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %131 = shufflevector <8 x float> %129, <8 x float> %130, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %131, ptr %128, align 4, !tbaa !37
  %132 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %133 = shufflevector <4 x float> %119, <4 x float> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %134 = shufflevector <4 x float> %119, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %135 = shufflevector <8 x float> %133, <8 x float> %134, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %135, ptr %132, align 4, !tbaa !37
  %136 = add nuw i64 %109, 4
  %137 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %138 = icmp eq i64 %136, %103
  br i1 %138, label %139, label %108, !llvm.loop !104

139:                                              ; preds = %108
  %140 = icmp eq i64 %33, %103
  br i1 %140, label %168, label %141

141:                                              ; preds = %35, %25, %139
  %142 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %139 ]
  br label %143

143:                                              ; preds = %141, %143
  %144 = phi i64 [ %166, %143 ], [ %142, %141 ]
  %145 = sitofp i64 %144 to double
  %146 = fptrunc double %145 to float
  %147 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %144
  store float %146, ptr %147, align 4, !tbaa !56
  %148 = fmul fast double %145, 2.000000e+00
  %149 = fadd fast double %148, -6.553500e+04
  %150 = fmul fast double %149, 5.000000e-01
  %151 = fptrunc double %150 to float
  %152 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %144
  store float %151, ptr %152, align 4, !tbaa !56
  %153 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %144
  %154 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %144, i32 1
  store float %146, ptr %154, align 4, !tbaa !57
  %155 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %144, i32 1
  store float 0.000000e+00, ptr %155, align 4, !tbaa !57
  %156 = insertelement <2 x double> poison, double %149, i64 0
  %157 = shufflevector <2 x double> %156, <2 x double> poison, <2 x i32> zeroinitializer
  %158 = fmul fast <2 x double> %157, <double -3.333400e-01, double 6.666650e-01>
  %159 = fptrunc <2 x double> %158 to <2 x float>
  store <2 x float> %159, ptr %153, align 4, !tbaa !37
  %160 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %144, i32 2
  store float %146, ptr %160, align 4, !tbaa !43
  %161 = fmul fast double %149, -5.000000e-01
  %162 = fptrunc double %161 to float
  %163 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %144, i32 2
  store float %162, ptr %163, align 4, !tbaa !43
  %164 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %144, i32 2
  %165 = extractelement <2 x float> %159, i64 0
  store float %165, ptr %164, align 4, !tbaa !43
  %166 = add nsw i64 %144, 1
  %167 = icmp slt i64 %144, %27
  br i1 %167, label %143, label %168, !llvm.loop !105

168:                                              ; preds = %143, %139
  %169 = add nsw i64 %19, %28
  %170 = add nsw i64 %19, %27
  %171 = call i64 @llvm.smin.i64(i64 %170, i64 65535)
  %172 = icmp sgt i64 %169, %171
  %173 = add i64 %26, 1
  br i1 %172, label %174, label %25

174:                                              ; preds = %168
  store i64 %171, ptr %7, align 8, !tbaa !59
  store i64 %169, ptr %6, align 8, !tbaa !59
  br label %175

175:                                              ; preds = %174, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.30(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %188, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %181
  %26 = phi i64 [ 0, %15 ], [ %186, %181 ]
  %27 = phi i64 [ %13, %15 ], [ %184, %181 ]
  %28 = phi i64 [ %11, %15 ], [ %182, %181 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 12
  br i1 %34, label %150, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %150, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %145, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %146, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fmul fast <4 x double> %112, <double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFFFFFFE1FB>
  %114 = fptrunc <4 x double> %113 to <4 x float>
  %115 = fmul fast <4 x double> %112, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %116 = fadd fast <4 x double> %115, <double -6.553500e+04, double -6.553500e+04, double -6.553500e+04, double -6.553500e+04>
  %117 = fmul fast <4 x double> %116, <double 0xBEA4731C556195D4, double 0xBEA4731C556195D4, double 0xBEA4731C556195D4, double 0xBEA4731C556195D4>
  %118 = fptrunc <4 x double> %117 to <4 x float>
  %119 = fmul fast <4 x double> %116, <double 0x3FE66E971EE48997, double 0x3FE66E971EE48997, double 0x3FE66E971EE48997, double 0x3FE66E971EE48997>
  %120 = fptrunc <4 x double> %119 to <4 x float>
  %121 = fmul fast <4 x double> %112, <double 0x3FEFFFFF7EABA592, double 0x3FEFFFFF7EABA592, double 0x3FEFFFFF7EABA592, double 0x3FEFFFFF7EABA592>
  %122 = fptrunc <4 x double> %121 to <4 x float>
  %123 = fmul fast <4 x double> %116, <double 0xBFC60651A6C6C2D3, double 0xBFC60651A6C6C2D3, double 0xBFC60651A6C6C2D3, double 0xBFC60651A6C6C2D3>
  %124 = fptrunc <4 x double> %123 to <4 x float>
  %125 = fmul fast <4 x double> %116, <double 0xBFD6DA34C675944B, double 0xBFD6DA34C675944B, double 0xBFD6DA34C675944B, double 0xBFD6DA34C675944B>
  %126 = fptrunc <4 x double> %125 to <4 x float>
  %127 = fmul fast <4 x double> %112, <double 0x3FF000014CF7A462, double 0x3FF000014CF7A462, double 0x3FF000014CF7A462, double 0x3FF000014CF7A462>
  %128 = fptrunc <4 x double> %127 to <4 x float>
  %129 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %130 = shufflevector <4 x float> %114, <4 x float> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %131 = shufflevector <4 x float> %128, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %132 = shufflevector <8 x float> %130, <8 x float> %131, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %132, ptr %129, align 4, !tbaa !37
  %133 = fmul fast <4 x double> %116, <double 0x3FEC5A1CBDC4A56B, double 0x3FEC5A1CBDC4A56B, double 0x3FEC5A1CBDC4A56B, double 0x3FEC5A1CBDC4A56B>
  %134 = fptrunc <4 x double> %133 to <4 x float>
  %135 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %136 = shufflevector <4 x float> %118, <4 x float> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %137 = shufflevector <4 x float> %134, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %138 = shufflevector <8 x float> %136, <8 x float> %137, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %138, ptr %135, align 4, !tbaa !37
  %139 = fmul fast <4 x double> %116, <double 0x3EB1FF14448BA0A3, double 0x3EB1FF14448BA0A3, double 0x3EB1FF14448BA0A3, double 0x3EB1FF14448BA0A3>
  %140 = fptrunc <4 x double> %139 to <4 x float>
  %141 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %142 = shufflevector <4 x float> %120, <4 x float> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %143 = shufflevector <4 x float> %140, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %144 = shufflevector <8 x float> %142, <8 x float> %143, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %144, ptr %141, align 4, !tbaa !37
  %145 = add nuw i64 %109, 4
  %146 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %147 = icmp eq i64 %145, %103
  br i1 %147, label %148, label %108, !llvm.loop !106

148:                                              ; preds = %108
  %149 = icmp eq i64 %33, %103
  br i1 %149, label %181, label %150

150:                                              ; preds = %35, %25, %148
  %151 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %148 ]
  br label %152

152:                                              ; preds = %150, %152
  %153 = phi i64 [ %179, %152 ], [ %151, %150 ]
  %154 = sitofp i64 %153 to double
  %155 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %153
  %156 = fmul fast double %154, 2.000000e+00
  %157 = fadd fast double %156, -6.553500e+04
  %158 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %153
  %159 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %153
  %160 = insertelement <2 x double> poison, double %154, i64 0
  %161 = shufflevector <2 x double> %160, <2 x double> poison, <2 x i32> zeroinitializer
  %162 = fmul fast <2 x double> %161, <double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFF7EABA592>
  %163 = fptrunc <2 x double> %162 to <2 x float>
  store <2 x float> %163, ptr %155, align 4, !tbaa !37
  %164 = insertelement <2 x double> poison, double %157, i64 0
  %165 = shufflevector <2 x double> %164, <2 x double> poison, <2 x i32> zeroinitializer
  %166 = fmul fast <2 x double> %165, <double 0xBEA4731C556195D4, double 0xBFC60651A6C6C2D3>
  %167 = fptrunc <2 x double> %166 to <2 x float>
  store <2 x float> %167, ptr %158, align 4, !tbaa !37
  %168 = fmul fast <2 x double> %165, <double 0x3FE66E971EE48997, double 0xBFD6DA34C675944B>
  %169 = fptrunc <2 x double> %168 to <2 x float>
  store <2 x float> %169, ptr %159, align 4, !tbaa !37
  %170 = fmul fast double %154, 0x3FF000014CF7A462
  %171 = fptrunc double %170 to float
  %172 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %153, i32 2
  store float %171, ptr %172, align 4, !tbaa !43
  %173 = fmul fast double %157, 0x3FEC5A1CBDC4A56B
  %174 = fptrunc double %173 to float
  %175 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %153, i32 2
  store float %174, ptr %175, align 4, !tbaa !43
  %176 = fmul fast double %157, 0x3EB1FF14448BA0A3
  %177 = fptrunc double %176 to float
  %178 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %153, i32 2
  store float %177, ptr %178, align 4, !tbaa !43
  %179 = add nsw i64 %153, 1
  %180 = icmp slt i64 %153, %27
  br i1 %180, label %152, label %181, !llvm.loop !107

181:                                              ; preds = %152, %148
  %182 = add nsw i64 %19, %28
  %183 = add nsw i64 %19, %27
  %184 = call i64 @llvm.smin.i64(i64 %183, i64 65535)
  %185 = icmp sgt i64 %182, %184
  %186 = add i64 %26, 1
  br i1 %185, label %187, label %25

187:                                              ; preds = %181
  store i64 %184, ptr %7, align 8, !tbaa !59
  store i64 %182, ptr %6, align 8, !tbaa !59
  br label %188

188:                                              ; preds = %187, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.31(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %173, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %166
  %26 = phi i64 [ 0, %15 ], [ %171, %166 ]
  %27 = phi i64 [ %13, %15 ], [ %169, %166 ]
  %28 = phi i64 [ %11, %15 ], [ %167, %166 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 16
  br i1 %34, label %140, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %140, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %135, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %136, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fptrunc <4 x double> %112 to <4 x float>
  %114 = fmul fast <4 x double> %112, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %115 = fadd fast <4 x double> %114, <double -6.553500e+04, double -6.553500e+04, double -6.553500e+04, double -6.553500e+04>
  %116 = fmul fast <4 x double> %115, <double 7.874000e-01, double 7.874000e-01, double 7.874000e-01, double 7.874000e-01>
  %117 = fptrunc <4 x double> %116 to <4 x float>
  %118 = fmul fast <4 x double> %115, <double 0xBFB7FA3B9AE0C176, double 0xBFB7FA3B9AE0C176, double 0xBFB7FA3B9AE0C176, double 0xBFB7FA3B9AE0C176>
  %119 = fptrunc <4 x double> %118 to <4 x float>
  %120 = fmul fast <4 x double> %115, <double -2.340620e-01, double -2.340620e-01, double -2.340620e-01, double -2.340620e-01>
  %121 = fptrunc <4 x double> %120 to <4 x float>
  %122 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %123 = shufflevector <4 x float> %113, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %124 = shufflevector <4 x float> %113, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %125 = shufflevector <8 x float> %123, <8 x float> %124, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %125, ptr %122, align 4, !tbaa !37
  %126 = fmul fast <4 x double> %115, <double 0x3FEDB089A0275254, double 0x3FEDB089A0275254, double 0x3FEDB089A0275254, double 0x3FEDB089A0275254>
  %127 = fptrunc <4 x double> %126 to <4 x float>
  %128 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %129 = shufflevector <4 x float> zeroinitializer, <4 x float> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %130 = shufflevector <4 x float> %127, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %131 = shufflevector <8 x float> %129, <8 x float> %130, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %131, ptr %128, align 4, !tbaa !37
  %132 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %133 = shufflevector <4 x float> %117, <4 x float> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %134 = shufflevector <8 x float> %133, <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float poison, float poison, float poison, float poison>, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %134, ptr %132, align 4, !tbaa !37
  %135 = add nuw i64 %109, 4
  %136 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %137 = icmp eq i64 %135, %103
  br i1 %137, label %138, label %108, !llvm.loop !108

138:                                              ; preds = %108
  %139 = icmp eq i64 %33, %103
  br i1 %139, label %166, label %140

140:                                              ; preds = %35, %25, %138
  %141 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %138 ]
  br label %142

142:                                              ; preds = %140, %142
  %143 = phi i64 [ %164, %142 ], [ %141, %140 ]
  %144 = sitofp i64 %143 to double
  %145 = fptrunc double %144 to float
  %146 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %143
  store float %145, ptr %146, align 4, !tbaa !56
  %147 = fmul fast double %144, 2.000000e+00
  %148 = fadd fast double %147, -6.553500e+04
  %149 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %143
  store float 0.000000e+00, ptr %149, align 4, !tbaa !56
  %150 = fmul fast double %148, 7.874000e-01
  %151 = fptrunc double %150 to float
  %152 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %143
  store float %151, ptr %152, align 4, !tbaa !56
  %153 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %143, i32 1
  store float %145, ptr %153, align 4, !tbaa !57
  %154 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %143, i32 1
  %155 = fmul fast double %148, -2.340620e-01
  %156 = fptrunc double %155 to float
  %157 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %143, i32 1
  %158 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %143, i32 2
  store float %145, ptr %158, align 4, !tbaa !43
  %159 = insertelement <2 x double> poison, double %148, i64 0
  %160 = shufflevector <2 x double> %159, <2 x double> poison, <2 x i32> zeroinitializer
  %161 = fmul fast <2 x double> %160, <double 0xBFB7FA3B9AE0C176, double 0x3FEDB089A0275254>
  %162 = fptrunc <2 x double> %161 to <2 x float>
  store <2 x float> %162, ptr %154, align 4, !tbaa !37
  store float %156, ptr %157, align 4, !tbaa !57
  %163 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %143, i32 2
  store float 0.000000e+00, ptr %163, align 4, !tbaa !43
  %164 = add nsw i64 %143, 1
  %165 = icmp slt i64 %143, %27
  br i1 %165, label %142, label %166, !llvm.loop !109

166:                                              ; preds = %142, %138
  %167 = add nsw i64 %19, %28
  %168 = add nsw i64 %19, %27
  %169 = call i64 @llvm.smin.i64(i64 %168, i64 65535)
  %170 = icmp sgt i64 %167, %169
  %171 = add i64 %26, 1
  br i1 %170, label %172, label %25

172:                                              ; preds = %166
  store i64 %169, ptr %7, align 8, !tbaa !59
  store i64 %167, ptr %6, align 8, !tbaa !59
  br label %173

173:                                              ; preds = %172, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.32(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %175, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = mul i64 %11, 12
  %21 = mul i64 %19, 12
  %22 = add i64 %20, 4
  %23 = add i64 %20, 8
  %24 = add i64 %20, 12
  br label %25

25:                                               ; preds = %15, %168
  %26 = phi i64 [ 0, %15 ], [ %173, %168 ]
  %27 = phi i64 [ %13, %15 ], [ %171, %168 ]
  %28 = phi i64 [ %11, %15 ], [ %169, %168 ]
  %29 = mul i64 %19, %26
  %30 = add i64 %11, %29
  %31 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %32 = sub i64 %31, %30
  %33 = add i64 %32, 1
  %34 = icmp ult i64 %33, 16
  br i1 %34, label %141, label %35

35:                                               ; preds = %25
  %36 = mul i64 %21, %26
  %37 = add i64 %24, %36
  %38 = getelementptr i8, ptr %18, i64 %37
  %39 = getelementptr i8, ptr %17, i64 %37
  %40 = getelementptr i8, ptr %16, i64 %37
  %41 = add i64 %23, %36
  %42 = getelementptr i8, ptr %18, i64 %41
  %43 = getelementptr i8, ptr %17, i64 %41
  %44 = getelementptr i8, ptr %16, i64 %41
  %45 = add i64 %22, %36
  %46 = getelementptr i8, ptr %18, i64 %45
  %47 = add i64 %20, %36
  %48 = getelementptr i8, ptr %18, i64 %47
  %49 = getelementptr i8, ptr %17, i64 %45
  %50 = getelementptr i8, ptr %17, i64 %47
  %51 = mul i64 %19, %26
  %52 = add i64 %11, %51
  %53 = getelementptr i8, ptr %16, i64 %45
  %54 = getelementptr i8, ptr %16, i64 %47
  %55 = call i64 @llvm.smax.i64(i64 %27, i64 %28)
  %56 = sub i64 %55, %52
  %57 = mul i64 %56, 12
  %58 = getelementptr i8, ptr %53, i64 %57
  %59 = getelementptr i8, ptr %49, i64 %57
  %60 = getelementptr i8, ptr %46, i64 %57
  %61 = getelementptr i8, ptr %44, i64 %57
  %62 = getelementptr i8, ptr %43, i64 %57
  %63 = getelementptr i8, ptr %42, i64 %57
  %64 = getelementptr i8, ptr %40, i64 %57
  %65 = getelementptr i8, ptr %39, i64 %57
  %66 = getelementptr i8, ptr %38, i64 %57
  %67 = icmp ult ptr %54, %59
  %68 = icmp ult ptr %50, %58
  %69 = and i1 %67, %68
  %70 = icmp ult ptr %54, %60
  %71 = icmp ult ptr %48, %58
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  %74 = icmp ult ptr %50, %60
  %75 = icmp ult ptr %48, %59
  %76 = and i1 %74, %75
  %77 = or i1 %73, %76
  %78 = icmp ult ptr %53, %62
  %79 = icmp ult ptr %49, %61
  %80 = and i1 %78, %79
  %81 = or i1 %77, %80
  %82 = icmp ult ptr %53, %63
  %83 = icmp ult ptr %46, %61
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult ptr %49, %63
  %87 = icmp ult ptr %46, %62
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = icmp ult ptr %44, %65
  %91 = icmp ult ptr %43, %64
  %92 = and i1 %90, %91
  %93 = or i1 %89, %92
  %94 = icmp ult ptr %44, %66
  %95 = icmp ult ptr %42, %64
  %96 = and i1 %94, %95
  %97 = or i1 %93, %96
  %98 = icmp ult ptr %43, %66
  %99 = icmp ult ptr %42, %65
  %100 = and i1 %98, %99
  %101 = or i1 %97, %100
  br i1 %101, label %141, label %102

102:                                              ; preds = %35
  %103 = and i64 %33, -4
  %104 = add i64 %28, %103
  %105 = insertelement <4 x i64> poison, i64 %28, i64 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> poison, <4 x i32> zeroinitializer
  %107 = add <4 x i64> %106, <i64 0, i64 1, i64 2, i64 3>
  br label %108

108:                                              ; preds = %108, %102
  %109 = phi i64 [ 0, %102 ], [ %136, %108 ]
  %110 = phi <4 x i64> [ %107, %102 ], [ %137, %108 ]
  %111 = add i64 %28, %109
  %112 = sitofp <4 x i64> %110 to <4 x double>
  %113 = fmul fast <4 x double> %112, <double 1.358400e+00, double 1.358400e+00, double 1.358400e+00, double 1.358400e+00>
  %114 = fptrunc <4 x double> %113 to <4 x float>
  %115 = fadd fast <4 x double> %112, <double -3.520900e+04, double -3.520900e+04, double -3.520900e+04, double -3.520900e+04>
  %116 = fmul fast <4 x double> %115, <double 1.821500e+00, double 1.821500e+00, double 1.821500e+00, double 1.821500e+00>
  %117 = fptrunc <4 x double> %116 to <4 x float>
  %118 = fadd fast <4 x double> %112, <double -4.009200e+04, double -4.009200e+04, double -4.009200e+04, double -4.009200e+04>
  %119 = fmul fast <4 x double> %118, <double 0xBFDB899616575A5A, double 0xBFDB899616575A5A, double 0xBFDB899616575A5A, double 0xBFDB899616575A5A>
  %120 = fptrunc <4 x double> %119 to <4 x float>
  %121 = fmul fast <4 x double> %115, <double 0xBFEDAB28D8665E03, double 0xBFEDAB28D8665E03, double 0xBFEDAB28D8665E03, double 0xBFEDAB28D8665E03>
  %122 = fptrunc <4 x double> %121 to <4 x float>
  %123 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %111
  %124 = shufflevector <4 x float> %114, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %125 = shufflevector <4 x float> %114, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %126 = shufflevector <8 x float> %124, <8 x float> %125, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %126, ptr %123, align 4, !tbaa !37
  %127 = fmul fast <4 x double> %118, <double 2.217900e+00, double 2.217900e+00, double 2.217900e+00, double 2.217900e+00>
  %128 = fptrunc <4 x double> %127 to <4 x float>
  %129 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %111
  %130 = shufflevector <4 x float> zeroinitializer, <4 x float> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %131 = shufflevector <4 x float> %128, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %132 = shufflevector <8 x float> %130, <8 x float> %131, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %132, ptr %129, align 4, !tbaa !37
  %133 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %111
  %134 = shufflevector <4 x float> %117, <4 x float> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %135 = shufflevector <8 x float> %134, <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float poison, float poison, float poison, float poison>, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %135, ptr %133, align 4, !tbaa !37
  %136 = add nuw i64 %109, 4
  %137 = add <4 x i64> %110, <i64 4, i64 4, i64 4, i64 4>
  %138 = icmp eq i64 %136, %103
  br i1 %138, label %139, label %108, !llvm.loop !110

139:                                              ; preds = %108
  %140 = icmp eq i64 %33, %103
  br i1 %140, label %168, label %141

141:                                              ; preds = %35, %25, %139
  %142 = phi i64 [ %28, %35 ], [ %28, %25 ], [ %104, %139 ]
  br label %143

143:                                              ; preds = %141, %143
  %144 = phi i64 [ %166, %143 ], [ %142, %141 ]
  %145 = sitofp i64 %144 to double
  %146 = fmul fast double %145, 1.358400e+00
  %147 = fptrunc double %146 to float
  %148 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %144
  store float %147, ptr %148, align 4, !tbaa !56
  %149 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %144
  store float 0.000000e+00, ptr %149, align 4, !tbaa !56
  %150 = fadd fast double %145, -3.520900e+04
  %151 = fmul fast double %150, 1.821500e+00
  %152 = fptrunc double %151 to float
  %153 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %144
  store float %152, ptr %153, align 4, !tbaa !56
  %154 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %144, i32 1
  store float %147, ptr %154, align 4, !tbaa !57
  %155 = fadd fast double %145, -4.009200e+04
  %156 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %144, i32 1
  %157 = fmul fast double %150, 0xBFEDAB28D8665E03
  %158 = fptrunc double %157 to float
  %159 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %144, i32 1
  %160 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %144, i32 2
  store float %147, ptr %160, align 4, !tbaa !43
  %161 = insertelement <2 x double> poison, double %155, i64 0
  %162 = shufflevector <2 x double> %161, <2 x double> poison, <2 x i32> zeroinitializer
  %163 = fmul fast <2 x double> %162, <double 0xBFDB899616575A5A, double 2.217900e+00>
  %164 = fptrunc <2 x double> %163 to <2 x float>
  store <2 x float> %164, ptr %156, align 4, !tbaa !37
  store float %158, ptr %159, align 4, !tbaa !57
  %165 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %144, i32 2
  store float 0.000000e+00, ptr %165, align 4, !tbaa !43
  %166 = add nsw i64 %144, 1
  %167 = icmp slt i64 %144, %27
  br i1 %167, label %143, label %168, !llvm.loop !111

168:                                              ; preds = %143, %139
  %169 = add nsw i64 %19, %28
  %170 = add nsw i64 %19, %27
  %171 = call i64 @llvm.smin.i64(i64 %170, i64 65535)
  %172 = icmp sgt i64 %169, %171
  %173 = add i64 %26, 1
  br i1 %172, label %174, label %25

174:                                              ; preds = %168
  store i64 %171, ptr %7, align 8, !tbaa !59
  store i64 %169, ptr %6, align 8, !tbaa !59
  br label %175

175:                                              ; preds = %174, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.33(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4) #3 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #4
  store i64 0, ptr %6, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #4
  store i64 65535, ptr %7, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 1, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #4
  store i32 0, ptr %9, align 4, !tbaa !60
  %10 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %10, i32 33, ptr nonnull %9, ptr nonnull %6, ptr nonnull %7, ptr nonnull %8, i64 1, i64 4)
  %11 = load i64, ptr %6, align 8, !tbaa !59
  %12 = load i64, ptr %7, align 8
  %13 = call i64 @llvm.smin.i64(i64 %12, i64 65535)
  store i64 %13, ptr %7, align 8, !tbaa !59
  %14 = icmp sgt i64 %11, %13
  br i1 %14, label %43, label %15

15:                                               ; preds = %5
  %16 = load ptr, ptr %2, align 8, !tbaa !6
  %17 = load ptr, ptr %3, align 8, !tbaa !6
  %18 = load ptr, ptr %4, align 8, !tbaa !6
  %19 = load i64, ptr %8, align 8, !tbaa !59
  br label %20

20:                                               ; preds = %15, %37
  %21 = phi i64 [ %13, %15 ], [ %40, %37 ]
  %22 = phi i64 [ %11, %15 ], [ %38, %37 ]
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ %22, %20 ], [ %35, %23 ]
  %25 = sitofp i64 %24 to double
  %26 = fptrunc double %25 to float
  %27 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24
  store float %26, ptr %27, align 4, !tbaa !56
  %28 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24
  store float 0.000000e+00, ptr %28, align 4, !tbaa !56
  %29 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24
  store float 0.000000e+00, ptr %29, align 4, !tbaa !56
  %30 = getelementptr inbounds %struct._TransformPacket, ptr %16, i64 %24, i32 1
  %31 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 1
  %32 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 1
  store <2 x float> zeroinitializer, ptr %30, align 4, !tbaa !37
  store float %26, ptr %31, align 4, !tbaa !57
  store float 0.000000e+00, ptr %32, align 4, !tbaa !57
  %33 = getelementptr inbounds %struct._TransformPacket, ptr %17, i64 %24, i32 2
  store float 0.000000e+00, ptr %33, align 4, !tbaa !43
  %34 = getelementptr inbounds %struct._TransformPacket, ptr %18, i64 %24, i32 2
  store float %26, ptr %34, align 4, !tbaa !43
  %35 = add nsw i64 %24, 1
  %36 = icmp slt i64 %24, %21
  br i1 %36, label %23, label %37

37:                                               ; preds = %23
  %38 = add nsw i64 %19, %22
  %39 = add nsw i64 %19, %21
  %40 = call i64 @llvm.smin.i64(i64 %39, i64 65535)
  %41 = icmp sgt i64 %38, %40
  br i1 %41, label %42, label %20

42:                                               ; preds = %37
  store i64 %40, ptr %7, align 8, !tbaa !59
  store i64 %38, ptr %6, align 8, !tbaa !59
  br label %43

43:                                               ; preds = %42, %5
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #4
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.34(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull align 4 dereferenceable(4) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %6, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %7, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %8, ptr nocapture noundef nonnull readonly align 4 dereferenceable(4) %9, ptr nocapture noundef nonnull align 8 dereferenceable(8) %10) #3 {
  %12 = alloca [4096 x i8], align 16
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = load ptr, ptr %2, align 8, !tbaa !6
  %18 = getelementptr inbounds %struct._Image, ptr %17, i64 0, i32 8
  %19 = load i64, ptr %18, align 8, !tbaa !34
  %20 = add nsw i64 %19, -1
  %21 = icmp sgt i64 %19, 0
  br i1 %21, label %22, label %243

22:                                               ; preds = %11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #4
  store i64 0, ptr %13, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #4
  store i64 %20, ptr %14, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #4
  store i64 1, ptr %15, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16) #4
  store i32 0, ptr %16, align 4, !tbaa !60
  %23 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %23, i32 33, ptr nonnull %16, ptr nonnull %13, ptr nonnull %14, ptr nonnull %15, i64 1, i64 4)
  %24 = load i64, ptr %14, align 8
  %25 = call i64 @llvm.smin.i64(i64 %24, i64 %20)
  store i64 %25, ptr %14, align 8, !tbaa !59
  %26 = load i64, ptr %13, align 8, !tbaa !59
  %27 = icmp sgt i64 %26, %25
  br i1 %27, label %242, label %28

28:                                               ; preds = %22, %234
  %29 = phi i64 [ %240, %234 ], [ %25, %22 ]
  %30 = phi i64 [ %238, %234 ], [ %26, %22 ]
  %31 = icmp sgt i64 %30, %29
  br i1 %31, label %234, label %32

32:                                               ; preds = %28, %228
  %33 = phi i64 [ %229, %228 ], [ %30, %28 ]
  %34 = load i32, ptr %3, align 4, !tbaa !10
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %228, label %36

36:                                               ; preds = %32
  %37 = load ptr, ptr %4, align 8, !tbaa !6
  %38 = load ptr, ptr %2, align 8, !tbaa !6
  %39 = getelementptr inbounds %struct._Image, ptr %38, i64 0, i32 7
  %40 = load i64, ptr %39, align 8, !tbaa !61
  %41 = load ptr, ptr %5, align 8, !tbaa !6
  %42 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %37, i64 noundef 0, i64 noundef %33, i64 noundef %40, i64 noundef 1, ptr noundef %41) #12
  %43 = icmp eq ptr %42, null
  br i1 %43, label %227, label %44

44:                                               ; preds = %36
  %45 = load ptr, ptr %2, align 8, !tbaa !6
  %46 = getelementptr inbounds %struct._Image, ptr %45, i64 0, i32 7
  %47 = load i64, ptr %46, align 8, !tbaa !61
  %48 = icmp sgt i64 %47, 0
  br i1 %48, label %49, label %197

49:                                               ; preds = %44
  %50 = load ptr, ptr %6, align 8, !tbaa !6
  %51 = load ptr, ptr %7, align 8, !tbaa !6
  %52 = load ptr, ptr %8, align 8, !tbaa !6
  br label %53

53:                                               ; preds = %49, %192
  %54 = phi ptr [ %42, %49 ], [ %194, %192 ]
  %55 = phi i64 [ 0, %49 ], [ %195, %192 ]
  %56 = getelementptr inbounds %struct._PixelPacket, ptr %54, i64 0, i32 2
  %57 = load i16, ptr %56, align 2, !tbaa !53
  %58 = zext i16 %57 to i64
  %59 = getelementptr inbounds %struct._PixelPacket, ptr %54, i64 0, i32 1
  %60 = load i16, ptr %59, align 2, !tbaa !54
  %61 = zext i16 %60 to i64
  %62 = load i16, ptr %54, align 2, !tbaa !55
  %63 = zext i16 %62 to i64
  %64 = getelementptr inbounds %struct._TransformPacket, ptr %50, i64 %58
  %65 = load float, ptr %64, align 4, !tbaa !56
  %66 = getelementptr inbounds %struct._TransformPacket, ptr %51, i64 %61
  %67 = load float, ptr %66, align 4, !tbaa !56
  %68 = fadd fast float %67, %65
  %69 = getelementptr inbounds %struct._TransformPacket, ptr %52, i64 %63
  %70 = load float, ptr %69, align 4, !tbaa !56
  %71 = fadd fast float %68, %70
  %72 = getelementptr inbounds %struct._TransformPacket, ptr %50, i64 %58, i32 1
  %73 = load float, ptr %72, align 4, !tbaa !57
  %74 = getelementptr inbounds %struct._TransformPacket, ptr %51, i64 %61, i32 1
  %75 = load float, ptr %74, align 4, !tbaa !57
  %76 = fadd fast float %75, %73
  %77 = getelementptr inbounds %struct._TransformPacket, ptr %52, i64 %63, i32 1
  %78 = load float, ptr %77, align 4, !tbaa !57
  %79 = fadd fast float %76, %78
  %80 = getelementptr inbounds %struct._TransformPacket, ptr %50, i64 %58, i32 2
  %81 = load float, ptr %80, align 4, !tbaa !43
  %82 = getelementptr inbounds %struct._TransformPacket, ptr %51, i64 %61, i32 2
  %83 = load float, ptr %82, align 4, !tbaa !43
  %84 = fadd fast float %83, %81
  %85 = getelementptr inbounds %struct._TransformPacket, ptr %52, i64 %63, i32 2
  %86 = load float, ptr %85, align 4, !tbaa !43
  %87 = fadd fast float %84, %86
  %88 = load i32, ptr %9, align 4, !tbaa !10
  %89 = icmp eq i32 %88, 8
  %90 = fpext float %71 to double
  br i1 %89, label %91, label %136

91:                                               ; preds = %53
  %92 = fmul fast double %90, 0x3F90001000100010
  %93 = fptrunc double %92 to float
  %94 = fpext float %93 to double
  %95 = fcmp fast ugt float %93, 0.000000e+00
  br i1 %95, label %96, label %101

96:                                               ; preds = %91
  %97 = fcmp fast ult float %93, 1.388000e+03
  br i1 %97, label %98, label %101

98:                                               ; preds = %96
  %99 = fadd fast double %94, 5.000000e-01
  %100 = fptosi double %99 to i64
  br label %101

101:                                              ; preds = %91, %96, %98
  %102 = phi i64 [ %100, %98 ], [ 0, %91 ], [ 1388, %96 ]
  %103 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %102
  %104 = load float, ptr %103, align 4, !tbaa !37
  %105 = fmul fast float %104, 6.553500e+04
  %106 = fpext float %79 to double
  %107 = fmul fast double %106, 0x3F90001000100010
  %108 = fptrunc double %107 to float
  %109 = fpext float %108 to double
  %110 = fcmp fast ugt float %108, 0.000000e+00
  br i1 %110, label %111, label %116

111:                                              ; preds = %101
  %112 = fcmp fast ult float %108, 1.388000e+03
  br i1 %112, label %113, label %116

113:                                              ; preds = %111
  %114 = fadd fast double %109, 5.000000e-01
  %115 = fptosi double %114 to i64
  br label %116

116:                                              ; preds = %101, %111, %113
  %117 = phi i64 [ %115, %113 ], [ 0, %101 ], [ 1388, %111 ]
  %118 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %117
  %119 = load float, ptr %118, align 4, !tbaa !37
  %120 = fmul fast float %119, 6.553500e+04
  %121 = fpext float %87 to double
  %122 = fmul fast double %121, 0x3F90001000100010
  %123 = fptrunc double %122 to float
  %124 = fpext float %123 to double
  %125 = fcmp fast ugt float %123, 0.000000e+00
  br i1 %125, label %126, label %131

126:                                              ; preds = %116
  %127 = fcmp fast ult float %123, 1.388000e+03
  br i1 %127, label %128, label %131

128:                                              ; preds = %126
  %129 = fadd fast double %124, 5.000000e-01
  %130 = fptosi double %129 to i64
  br label %131

131:                                              ; preds = %116, %126, %128
  %132 = phi i64 [ %130, %128 ], [ 0, %116 ], [ 1388, %126 ]
  %133 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %132
  %134 = load float, ptr %133, align 4, !tbaa !37
  %135 = fmul fast float %134, 6.553500e+04
  br label %166

136:                                              ; preds = %53
  %137 = fcmp fast ugt float %71, 0.000000e+00
  br i1 %137, label %138, label %143

138:                                              ; preds = %136
  %139 = fcmp fast ult float %71, 6.553500e+04
  br i1 %139, label %140, label %143

140:                                              ; preds = %138
  %141 = fadd fast double %90, 5.000000e-01
  %142 = fptoui double %141 to i16
  br label %143

143:                                              ; preds = %136, %138, %140
  %144 = phi i16 [ %142, %140 ], [ 0, %136 ], [ -1, %138 ]
  %145 = uitofp i16 %144 to float
  %146 = fpext float %79 to double
  %147 = fcmp fast ugt float %79, 0.000000e+00
  br i1 %147, label %148, label %153

148:                                              ; preds = %143
  %149 = fcmp fast ult float %79, 6.553500e+04
  br i1 %149, label %150, label %153

150:                                              ; preds = %148
  %151 = fadd fast double %146, 5.000000e-01
  %152 = fptoui double %151 to i16
  br label %153

153:                                              ; preds = %143, %148, %150
  %154 = phi i16 [ %152, %150 ], [ 0, %143 ], [ -1, %148 ]
  %155 = uitofp i16 %154 to float
  %156 = fpext float %87 to double
  %157 = fcmp fast ugt float %87, 0.000000e+00
  br i1 %157, label %158, label %163

158:                                              ; preds = %153
  %159 = fcmp fast ult float %87, 6.553500e+04
  br i1 %159, label %160, label %163

160:                                              ; preds = %158
  %161 = fadd fast double %156, 5.000000e-01
  %162 = fptoui double %161 to i16
  br label %163

163:                                              ; preds = %153, %158, %160
  %164 = phi i16 [ %162, %160 ], [ 0, %153 ], [ -1, %158 ]
  %165 = uitofp i16 %164 to float
  br label %166

166:                                              ; preds = %163, %131
  %167 = phi float [ %105, %131 ], [ %145, %163 ]
  %168 = phi float [ %120, %131 ], [ %155, %163 ]
  %169 = phi float [ %135, %131 ], [ %165, %163 ]
  %170 = fcmp fast ugt float %167, 0.000000e+00
  br i1 %170, label %171, label %176

171:                                              ; preds = %166
  %172 = fcmp fast ult float %167, 6.553500e+04
  br i1 %172, label %173, label %176

173:                                              ; preds = %171
  %174 = fadd fast float %167, 5.000000e-01
  %175 = fptoui float %174 to i16
  br label %176

176:                                              ; preds = %166, %171, %173
  %177 = phi i16 [ %175, %173 ], [ 0, %166 ], [ -1, %171 ]
  store i16 %177, ptr %56, align 2, !tbaa !53
  %178 = fcmp fast ugt float %168, 0.000000e+00
  br i1 %178, label %179, label %184

179:                                              ; preds = %176
  %180 = fcmp fast ult float %168, 6.553500e+04
  br i1 %180, label %181, label %184

181:                                              ; preds = %179
  %182 = fadd fast float %168, 5.000000e-01
  %183 = fptoui float %182 to i16
  br label %184

184:                                              ; preds = %176, %179, %181
  %185 = phi i16 [ %183, %181 ], [ 0, %176 ], [ -1, %179 ]
  store i16 %185, ptr %59, align 2, !tbaa !54
  %186 = fcmp fast ugt float %169, 0.000000e+00
  br i1 %186, label %187, label %192

187:                                              ; preds = %184
  %188 = fcmp fast ult float %169, 6.553500e+04
  br i1 %188, label %189, label %192

189:                                              ; preds = %187
  %190 = fadd fast float %169, 5.000000e-01
  %191 = fptoui float %190 to i16
  br label %192

192:                                              ; preds = %184, %187, %189
  %193 = phi i16 [ %191, %189 ], [ 0, %184 ], [ -1, %187 ]
  store i16 %193, ptr %54, align 2, !tbaa !55
  %194 = getelementptr inbounds %struct._PixelPacket, ptr %54, i64 1
  %195 = add nuw nsw i64 %55, 1
  %196 = icmp eq i64 %195, %47
  br i1 %196, label %197, label %53, !llvm.loop !112

197:                                              ; preds = %192, %44
  %198 = load ptr, ptr %4, align 8, !tbaa !6
  %199 = load ptr, ptr %5, align 8, !tbaa !6
  %200 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %198, ptr noundef %199) #12
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %197
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %203

203:                                              ; preds = %202, %197
  %204 = load ptr, ptr %2, align 8, !tbaa !6
  %205 = getelementptr inbounds %struct._Image, ptr %204, i64 0, i32 47
  %206 = load ptr, ptr %205, align 8, !tbaa !88
  %207 = icmp eq ptr %206, null
  br i1 %207, label %228, label %208

208:                                              ; preds = %203
  call void @__kmpc_critical(ptr nonnull @2, i32 %23, ptr nonnull @.gomp_critical_user_MagickCore_TransformRGBImage.var)
  %209 = load ptr, ptr %2, align 8, !tbaa !6
  %210 = load i64, ptr %10, align 8, !tbaa !27
  %211 = add nsw i64 %210, 1
  store i64 %211, ptr %10, align 8, !tbaa !27
  %212 = getelementptr inbounds %struct._Image, ptr %209, i64 0, i32 8
  %213 = load i64, ptr %212, align 8, !tbaa !34
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %12) #4
  %214 = getelementptr inbounds %struct._Image, ptr %209, i64 0, i32 47
  %215 = load ptr, ptr %214, align 8, !tbaa !88
  %216 = icmp eq ptr %215, null
  br i1 %216, label %224, label %217

217:                                              ; preds = %208
  %218 = getelementptr inbounds %struct._Image, ptr %209, i64 0, i32 53
  %219 = call i64 (ptr, i64, ptr, ...) @FormatLocaleString(ptr noundef nonnull %12, i64 noundef 4096, ptr noundef nonnull @.str.22, ptr noundef nonnull @.str.35, ptr noundef nonnull %218) #4
  %220 = load ptr, ptr %214, align 8, !tbaa !88
  %221 = getelementptr inbounds %struct._Image, ptr %209, i64 0, i32 48
  %222 = load ptr, ptr %221, align 8, !tbaa !89
  %223 = call i32 %220(ptr noundef nonnull %12, i64 noundef %210, i64 noundef %213, ptr noundef %222) #4
  br label %224

224:                                              ; preds = %208, %217
  %225 = phi i32 [ %223, %217 ], [ 1, %208 ]
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %12) #4
  call void @__kmpc_end_critical(ptr nonnull @2, i32 %23, ptr nonnull @.gomp_critical_user_MagickCore_TransformRGBImage.var)
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224, %36
  store i32 0, ptr %3, align 4, !tbaa !10
  br label %228

228:                                              ; preds = %227, %203, %224, %32
  %229 = add nsw i64 %33, 1
  %230 = load i64, ptr %14, align 8, !tbaa !59
  %231 = icmp slt i64 %33, %230
  br i1 %231, label %32, label %232

232:                                              ; preds = %228
  %233 = load i64, ptr %13, align 8, !tbaa !59
  br label %234

234:                                              ; preds = %232, %28
  %235 = phi i64 [ %30, %28 ], [ %233, %232 ]
  %236 = phi i64 [ %29, %28 ], [ %230, %232 ]
  %237 = load i64, ptr %15, align 8, !tbaa !59
  %238 = add nsw i64 %237, %235
  store i64 %238, ptr %13, align 8, !tbaa !59
  %239 = add nsw i64 %237, %236
  %240 = call i64 @llvm.smin.i64(i64 %239, i64 %20)
  store i64 %240, ptr %14, align 8, !tbaa !59
  %241 = icmp sgt i64 %238, %240
  br i1 %241, label %242, label %28

242:                                              ; preds = %234, %22
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %23)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #4
  br label %243

243:                                              ; preds = %242, %11
  ret void
}

; Function Attrs: alwaysinline norecurse nounwind sspstrong uwtable
define internal void @TransformRGBImage.omp_outlined.36(ptr noalias nocapture noundef readonly %0, ptr noalias nocapture readnone %1, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %2, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %3, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %4, ptr nocapture noundef nonnull readonly align 8 dereferenceable(8) %5, ptr nocapture noundef nonnull readonly align 4 dereferenceable(4) %6) #3 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = load ptr, ptr %2, align 8, !tbaa !6
  %13 = getelementptr inbounds %struct._Image, ptr %12, i64 0, i32 10
  %14 = load i64, ptr %13, align 8, !tbaa !48
  %15 = add nsw i64 %14, -1
  %16 = icmp sgt i64 %14, 0
  br i1 %16, label %17, label %184

17:                                               ; preds = %7
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #4
  store i64 0, ptr %8, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #4
  store i64 %15, ptr %9, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #4
  store i64 1, ptr %10, align 8, !tbaa !59
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #4
  store i32 0, ptr %11, align 4, !tbaa !60
  %18 = load i32, ptr %0, align 4, !tbaa !60
  call void @__kmpc_for_static_init_8(ptr nonnull @1, i32 %18, i32 33, ptr nonnull %11, ptr nonnull %8, ptr nonnull %9, ptr nonnull %10, i64 1, i64 4)
  %19 = load i64, ptr %8, align 8, !tbaa !59
  %20 = load i64, ptr %9, align 8
  %21 = call i64 @llvm.smin.i64(i64 %20, i64 %15)
  store i64 %21, ptr %9, align 8, !tbaa !59
  %22 = icmp sgt i64 %19, %21
  br i1 %22, label %183, label %23

23:                                               ; preds = %17
  %24 = load ptr, ptr %2, align 8, !tbaa !6
  %25 = getelementptr inbounds %struct._Image, ptr %24, i64 0, i32 11
  %26 = load ptr, ptr %25, align 8, !tbaa !49
  %27 = load ptr, ptr %3, align 8, !tbaa !6
  %28 = load ptr, ptr %4, align 8, !tbaa !6
  %29 = load ptr, ptr %5, align 8, !tbaa !6
  %30 = load i64, ptr %10, align 8, !tbaa !59
  br label %31

31:                                               ; preds = %23, %177
  %32 = phi i64 [ %21, %23 ], [ %180, %177 ]
  %33 = phi i64 [ %19, %23 ], [ %178, %177 ]
  br label %34

34:                                               ; preds = %31, %173
  %35 = phi i64 [ %33, %31 ], [ %175, %173 ]
  %36 = getelementptr inbounds %struct._PixelPacket, ptr %26, i64 %35, i32 2
  %37 = load i16, ptr %36, align 2, !tbaa !53
  %38 = zext i16 %37 to i64
  %39 = getelementptr inbounds %struct._PixelPacket, ptr %26, i64 %35, i32 1
  %40 = load i16, ptr %39, align 2, !tbaa !54
  %41 = zext i16 %40 to i64
  %42 = getelementptr inbounds %struct._PixelPacket, ptr %26, i64 %35
  %43 = load i16, ptr %42, align 2, !tbaa !55
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds %struct._TransformPacket, ptr %27, i64 %38
  %46 = load float, ptr %45, align 4, !tbaa !56
  %47 = getelementptr inbounds %struct._TransformPacket, ptr %28, i64 %41
  %48 = load float, ptr %47, align 4, !tbaa !56
  %49 = fadd fast float %48, %46
  %50 = getelementptr inbounds %struct._TransformPacket, ptr %29, i64 %44
  %51 = load float, ptr %50, align 4, !tbaa !56
  %52 = fadd fast float %49, %51
  %53 = getelementptr inbounds %struct._TransformPacket, ptr %27, i64 %38, i32 1
  %54 = load float, ptr %53, align 4, !tbaa !57
  %55 = getelementptr inbounds %struct._TransformPacket, ptr %28, i64 %41, i32 1
  %56 = load float, ptr %55, align 4, !tbaa !57
  %57 = fadd fast float %56, %54
  %58 = getelementptr inbounds %struct._TransformPacket, ptr %29, i64 %44, i32 1
  %59 = load float, ptr %58, align 4, !tbaa !57
  %60 = fadd fast float %57, %59
  %61 = getelementptr inbounds %struct._TransformPacket, ptr %27, i64 %38, i32 2
  %62 = load float, ptr %61, align 4, !tbaa !43
  %63 = getelementptr inbounds %struct._TransformPacket, ptr %28, i64 %41, i32 2
  %64 = load float, ptr %63, align 4, !tbaa !43
  %65 = fadd fast float %64, %62
  %66 = getelementptr inbounds %struct._TransformPacket, ptr %29, i64 %44, i32 2
  %67 = load float, ptr %66, align 4, !tbaa !43
  %68 = fadd fast float %65, %67
  %69 = load i32, ptr %6, align 4, !tbaa !10
  %70 = icmp eq i32 %69, 8
  %71 = fpext float %52 to double
  br i1 %70, label %72, label %117

72:                                               ; preds = %34
  %73 = fmul fast double %71, 0x3F90001000100010
  %74 = fptrunc double %73 to float
  %75 = fpext float %74 to double
  %76 = fcmp fast ugt float %74, 0.000000e+00
  br i1 %76, label %77, label %82

77:                                               ; preds = %72
  %78 = fcmp fast ult float %74, 1.388000e+03
  br i1 %78, label %79, label %82

79:                                               ; preds = %77
  %80 = fadd fast double %75, 5.000000e-01
  %81 = fptosi double %80 to i64
  br label %82

82:                                               ; preds = %72, %77, %79
  %83 = phi i64 [ %81, %79 ], [ 0, %72 ], [ 1388, %77 ]
  %84 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %83
  %85 = load float, ptr %84, align 4, !tbaa !37
  %86 = fmul fast float %85, 6.553500e+04
  %87 = fpext float %60 to double
  %88 = fmul fast double %87, 0x3F90001000100010
  %89 = fptrunc double %88 to float
  %90 = fpext float %89 to double
  %91 = fcmp fast ugt float %89, 0.000000e+00
  br i1 %91, label %92, label %97

92:                                               ; preds = %82
  %93 = fcmp fast ult float %89, 1.388000e+03
  br i1 %93, label %94, label %97

94:                                               ; preds = %92
  %95 = fadd fast double %90, 5.000000e-01
  %96 = fptosi double %95 to i64
  br label %97

97:                                               ; preds = %82, %92, %94
  %98 = phi i64 [ %96, %94 ], [ 0, %82 ], [ 1388, %92 ]
  %99 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %98
  %100 = load float, ptr %99, align 4, !tbaa !37
  %101 = fmul fast float %100, 6.553500e+04
  %102 = fpext float %68 to double
  %103 = fmul fast double %102, 0x3F90001000100010
  %104 = fptrunc double %103 to float
  %105 = fpext float %104 to double
  %106 = fcmp fast ugt float %104, 0.000000e+00
  br i1 %106, label %107, label %112

107:                                              ; preds = %97
  %108 = fcmp fast ult float %104, 1.388000e+03
  br i1 %108, label %109, label %112

109:                                              ; preds = %107
  %110 = fadd fast double %105, 5.000000e-01
  %111 = fptosi double %110 to i64
  br label %112

112:                                              ; preds = %97, %107, %109
  %113 = phi i64 [ %111, %109 ], [ 0, %97 ], [ 1388, %107 ]
  %114 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %113
  %115 = load float, ptr %114, align 4, !tbaa !37
  %116 = fmul fast float %115, 6.553500e+04
  br label %147

117:                                              ; preds = %34
  %118 = fcmp fast ugt float %52, 0.000000e+00
  br i1 %118, label %119, label %124

119:                                              ; preds = %117
  %120 = fcmp fast ult float %52, 6.553500e+04
  br i1 %120, label %121, label %124

121:                                              ; preds = %119
  %122 = fadd fast double %71, 5.000000e-01
  %123 = fptoui double %122 to i16
  br label %124

124:                                              ; preds = %117, %119, %121
  %125 = phi i16 [ %123, %121 ], [ 0, %117 ], [ -1, %119 ]
  %126 = uitofp i16 %125 to float
  %127 = fpext float %60 to double
  %128 = fcmp fast ugt float %60, 0.000000e+00
  br i1 %128, label %129, label %134

129:                                              ; preds = %124
  %130 = fcmp fast ult float %60, 6.553500e+04
  br i1 %130, label %131, label %134

131:                                              ; preds = %129
  %132 = fadd fast double %127, 5.000000e-01
  %133 = fptoui double %132 to i16
  br label %134

134:                                              ; preds = %124, %129, %131
  %135 = phi i16 [ %133, %131 ], [ 0, %124 ], [ -1, %129 ]
  %136 = uitofp i16 %135 to float
  %137 = fpext float %68 to double
  %138 = fcmp fast ugt float %68, 0.000000e+00
  br i1 %138, label %139, label %144

139:                                              ; preds = %134
  %140 = fcmp fast ult float %68, 6.553500e+04
  br i1 %140, label %141, label %144

141:                                              ; preds = %139
  %142 = fadd fast double %137, 5.000000e-01
  %143 = fptoui double %142 to i16
  br label %144

144:                                              ; preds = %134, %139, %141
  %145 = phi i16 [ %143, %141 ], [ 0, %134 ], [ -1, %139 ]
  %146 = uitofp i16 %145 to float
  br label %147

147:                                              ; preds = %144, %112
  %148 = phi float [ %86, %112 ], [ %126, %144 ]
  %149 = phi float [ %101, %112 ], [ %136, %144 ]
  %150 = phi float [ %116, %112 ], [ %146, %144 ]
  %151 = fcmp fast ugt float %148, 0.000000e+00
  br i1 %151, label %152, label %157

152:                                              ; preds = %147
  %153 = fcmp fast ult float %148, 6.553500e+04
  br i1 %153, label %154, label %157

154:                                              ; preds = %152
  %155 = fadd fast float %148, 5.000000e-01
  %156 = fptoui float %155 to i16
  br label %157

157:                                              ; preds = %147, %152, %154
  %158 = phi i16 [ %156, %154 ], [ 0, %147 ], [ -1, %152 ]
  store i16 %158, ptr %36, align 2, !tbaa !53
  %159 = fcmp fast ugt float %149, 0.000000e+00
  br i1 %159, label %160, label %165

160:                                              ; preds = %157
  %161 = fcmp fast ult float %149, 6.553500e+04
  br i1 %161, label %162, label %165

162:                                              ; preds = %160
  %163 = fadd fast float %149, 5.000000e-01
  %164 = fptoui float %163 to i16
  br label %165

165:                                              ; preds = %157, %160, %162
  %166 = phi i16 [ %164, %162 ], [ 0, %157 ], [ -1, %160 ]
  store i16 %166, ptr %39, align 2, !tbaa !54
  %167 = fcmp fast ugt float %150, 0.000000e+00
  br i1 %167, label %168, label %173

168:                                              ; preds = %165
  %169 = fcmp fast ult float %150, 6.553500e+04
  br i1 %169, label %170, label %173

170:                                              ; preds = %168
  %171 = fadd fast float %150, 5.000000e-01
  %172 = fptoui float %171 to i16
  br label %173

173:                                              ; preds = %165, %168, %170
  %174 = phi i16 [ %172, %170 ], [ 0, %165 ], [ -1, %168 ]
  store i16 %174, ptr %42, align 2, !tbaa !55
  %175 = add nsw i64 %35, 1
  %176 = icmp slt i64 %35, %32
  br i1 %176, label %34, label %177

177:                                              ; preds = %173
  %178 = add nsw i64 %30, %33
  %179 = add nsw i64 %30, %32
  %180 = call i64 @llvm.smin.i64(i64 %179, i64 %15)
  %181 = icmp sgt i64 %178, %180
  br i1 %181, label %182, label %31

182:                                              ; preds = %177
  store i64 %180, ptr %9, align 8, !tbaa !59
  store i64 %178, ptr %8, align 8, !tbaa !59
  br label %183

183:                                              ; preds = %182, %17
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %18)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #4
  br label %184

184:                                              ; preds = %183, %7
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.exp2.f64(double) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.powi.f64.i32(double, i32) #9

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <16 x double> @llvm.log10.v16f64(<16 x double>) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x double> @llvm.log10.v8f64(<8 x double>) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <16 x double> @llvm.exp2.v16f64(<16 x double>) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x double> @llvm.exp2.v8f64(<8 x double>) #9

attributes #0 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { alwaysinline norecurse nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { nounwind }
attributes #5 = { hot "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { allocsize(0,1) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #7 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { convergent nounwind }
attributes #9 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #10 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #11 = { nounwind allocsize(0,1) }
attributes #12 = { hot nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"openmp", i32 51}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{!"clang version 17.0.6"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!8, !8, i64 0}
!11 = !{!12, !8, i64 12976}
!12 = !{!"_Image", !8, i64 0, !8, i64 4, !8, i64 8, !13, i64 16, !8, i64 24, !8, i64 28, !8, i64 32, !13, i64 40, !13, i64 48, !13, i64 56, !13, i64 64, !7, i64 72, !14, i64 80, !14, i64 88, !14, i64 96, !16, i64 104, !17, i64 112, !8, i64 208, !7, i64 216, !8, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !13, i64 256, !16, i64 264, !16, i64 272, !19, i64 280, !19, i64 312, !19, i64 344, !16, i64 376, !16, i64 384, !16, i64 392, !8, i64 400, !8, i64 404, !8, i64 408, !8, i64 412, !8, i64 416, !8, i64 420, !7, i64 424, !13, i64 432, !13, i64 440, !13, i64 448, !13, i64 456, !13, i64 464, !13, i64 472, !20, i64 480, !21, i64 504, !7, i64 568, !7, i64 576, !7, i64 584, !7, i64 592, !7, i64 600, !7, i64 608, !8, i64 616, !8, i64 4712, !8, i64 8808, !13, i64 12904, !13, i64 12912, !23, i64 12920, !8, i64 12976, !13, i64 12984, !7, i64 12992, !25, i64 13000, !25, i64 13032, !7, i64 13064, !13, i64 13072, !13, i64 13080, !7, i64 13088, !7, i64 13096, !7, i64 13104, !8, i64 13112, !8, i64 13116, !14, i64 13120, !7, i64 13128, !19, i64 13136, !7, i64 13168, !7, i64 13176, !8, i64 13184, !8, i64 13188, !26, i64 13192, !8, i64 13200, !13, i64 13208, !13, i64 13216, !8, i64 13224, !13, i64 13232}
!13 = !{!"long", !8, i64 0}
!14 = !{!"_PixelPacket", !15, i64 0, !15, i64 2, !15, i64 4, !15, i64 6}
!15 = !{!"short", !8, i64 0}
!16 = !{!"double", !8, i64 0}
!17 = !{!"_ChromaticityInfo", !18, i64 0, !18, i64 24, !18, i64 48, !18, i64 72}
!18 = !{!"_PrimaryInfo", !16, i64 0, !16, i64 8, !16, i64 16}
!19 = !{!"_RectangleInfo", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24}
!20 = !{!"_ErrorInfo", !16, i64 0, !16, i64 8, !16, i64 16}
!21 = !{!"_TimerInfo", !22, i64 0, !22, i64 24, !8, i64 48, !13, i64 56}
!22 = !{!"_Timer", !16, i64 0, !16, i64 8, !16, i64 16}
!23 = !{!"_ExceptionInfo", !8, i64 0, !24, i64 4, !7, i64 8, !7, i64 16, !7, i64 24, !8, i64 32, !7, i64 40, !13, i64 48}
!24 = !{!"int", !8, i64 0}
!25 = !{!"_ProfileInfo", !7, i64 0, !13, i64 8, !7, i64 16, !13, i64 24}
!26 = !{!"long long", !8, i64 0}
!27 = !{!26, !26, i64 0}
!28 = !{!12, !8, i64 0}
!29 = !{!12, !8, i64 4}
!30 = !{!12, !8, i64 208}
!31 = !{!12, !16, i64 104}
!32 = !{!12, !8, i64 13184}
!33 = !{!16, !16, i64 0}
!34 = !{!12, !13, i64 48}
!35 = !{!12, !8, i64 32}
!36 = !{!12, !8, i64 13224}
!37 = !{!38, !38, i64 0}
!38 = !{!"float", !8, i64 0}
!39 = distinct !{!39, !40, !41, !42}
!40 = !{!"llvm.loop.mustprogress"}
!41 = !{!"llvm.loop.isvectorized", i32 1}
!42 = !{!"llvm.loop.unroll.runtime.disable"}
!43 = !{!44, !38, i64 8}
!44 = !{!"_TransformPacket", !38, i64 0, !38, i64 4, !38, i64 8}
!45 = distinct !{!45, !40, !41}
!46 = distinct !{!46, !40, !41, !42}
!47 = distinct !{!47, !40, !41}
!48 = !{!12, !13, i64 64}
!49 = !{!12, !7, i64 72}
!50 = !{!18, !16, i64 0}
!51 = !{!18, !16, i64 8}
!52 = !{!18, !16, i64 16}
!53 = !{!14, !15, i64 4}
!54 = !{!14, !15, i64 2}
!55 = !{!14, !15, i64 0}
!56 = !{!44, !38, i64 0}
!57 = !{!44, !38, i64 4}
!58 = distinct !{!58, !40}
!59 = !{!13, !13, i64 0}
!60 = !{!24, !24, i64 0}
!61 = !{!12, !13, i64 40}
!62 = !{i64 0, i64 4, !10, i64 4, i64 4, !10, i64 12, i64 8, !33, i64 20, i64 8, !59, i64 28, i64 4, !37, i64 32, i64 4, !37, i64 36, i64 4, !37, i64 40, i64 4, !37, i64 44, i64 4, !37}
!63 = !{!15, !15, i64 0}
!64 = !{!14, !15, i64 6}
!65 = distinct !{!65, !40}
!66 = distinct !{!66, !67}
!67 = !{!"llvm.loop.unswitch.partial.disable"}
!68 = !{!69}
!69 = !{i64 2, i64 -1, i64 -1, i1 true}
!70 = distinct !{!70, !40}
!71 = distinct !{!71, !67}
!72 = distinct !{!72, !40}
!73 = distinct !{!73, !67}
!74 = distinct !{!74, !41, !42}
!75 = distinct !{!75, !41, !42}
!76 = distinct !{!76, !42, !41}
!77 = distinct !{!77, !40}
!78 = distinct !{!78, !67}
!79 = distinct !{!79, !40}
!80 = distinct !{!80, !67}
!81 = distinct !{!81, !41, !42}
!82 = distinct !{!82, !41}
!83 = distinct !{!83, !41, !42}
!84 = distinct !{!84, !41}
!85 = distinct !{!85, !41, !42}
!86 = distinct !{!86, !41}
!87 = distinct !{!87, !40}
!88 = !{!12, !7, i64 568}
!89 = !{!12, !7, i64 576}
!90 = distinct !{!90, !40, !41, !42}
!91 = distinct !{!91, !40, !41, !42}
!92 = distinct !{!92, !40, !42, !41}
!93 = !{i64 0, i64 4, !37}
!94 = distinct !{!94, !40}
!95 = distinct !{!95, !67}
!96 = distinct !{!96, !40}
!97 = distinct !{!97, !67}
!98 = distinct !{!98, !40}
!99 = distinct !{!99, !67}
!100 = distinct !{!100, !40}
!101 = distinct !{!101, !67}
!102 = distinct !{!102, !40}
!103 = distinct !{!103, !67}
!104 = distinct !{!104, !41, !42}
!105 = distinct !{!105, !41}
!106 = distinct !{!106, !41, !42}
!107 = distinct !{!107, !41}
!108 = distinct !{!108, !41, !42}
!109 = distinct !{!109, !41}
!110 = distinct !{!110, !41, !42}
!111 = distinct !{!111, !41}
!112 = distinct !{!112, !40}
