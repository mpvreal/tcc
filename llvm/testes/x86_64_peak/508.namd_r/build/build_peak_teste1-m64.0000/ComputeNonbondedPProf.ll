; ModuleID = 'ComputeNonbondedPProf.C'
source_filename = "ComputeNonbondedPProf.C"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.nonbonded = type { [2 x ptr], [2 x ptr], [2 x ptr], [2 x ptr], [2 x ptr], [2 x i32], %class.Vector, ptr, ptr, ptr, ptr, i32, i32, double, double, i32, i32, i32, i32 }
%class.Vector = type { double, double, double }
%class.Pairlists = type { ptr, i32, i32 }
%class.ResizeArray = type { ptr, ptr }
%class.ResizeArrayRaw = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>
%class.ComputeNonbondedWorkArrays = type { %class.ResizeArray, %class.ResizeArray.0, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray, %class.ResizeArray.1, %class.ResizeArray.1 }
%class.ResizeArray.0 = type { ptr, ptr }
%class.ResizeArray.1 = type { ptr, ptr }
%class.ResizeArrayRaw.17 = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>
%struct.CompAtom = type { %class.Vector, float, i16, i8, i8 }
%struct.CompAtomExt = type { i32 }
%class.Molecule = type { ptr, ptr, ptr, ptr, i32, i32, ptr }
%class.LJTable = type <{ ptr, ptr, i32, [4 x i8] }>
%class.ExclusionCheck = type { i32, i32, ptr }
%"struct.LJTable::TableEntry" = type { double, double }
%class.ResizeArrayRaw.19 = type <{ ptr, ptr, i32, i32, i32, float, i32, [4 x i8] }>

$_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd = comdat any

$_ZN14ResizeArrayRawI6VectorE6resizeEi = comdat any

@_ZN20ComputeNonbondedUtil8commOnlyE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil24pressureProfileThicknessE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil12dielectric_1E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil7ljTableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil3molE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil11table_shortE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil7scalingE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil7scale14E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil8r2_deltaE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil12r2_delta_expE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil12fixedAtomsOnE = external local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [27 x i8] c"pairlist i_upper mismatch!\00", align 1
@_ZN20ComputeNonbondedUtil18pressureProfileMinE = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil20pressureProfileSlabsE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil17pairInteractionOnE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil19pairInteractionSelfE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil7cutoff2E = external local_unnamed_addr global double, align 8
@_ZN20ComputeNonbondedUtil8r2_tableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE = external local_unnamed_addr global i32, align 4
@_ZN20ComputeNonbondedUtil10slow_tableE = external local_unnamed_addr global ptr, align 8
@_ZN20ComputeNonbondedUtil13table_noshortE = external local_unnamed_addr global ptr, align 8

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil15calc_pair_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2483

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %35 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %36 = shl i32 %35, 6
  %37 = add i32 %36, -65472
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %39 = load i32, ptr %38, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %41 = load i32, ptr %40, align 4, !tbaa !5
  %42 = load ptr, ptr %0, align 8, !tbaa !24
  %43 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !24
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = add nsw i32 %41, 5
  %52 = getelementptr inbounds %class.ResizeArray, ptr %50, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !26
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 2
  %55 = load i32, ptr %54, align 8, !tbaa !28
  %56 = icmp slt i32 %55, %51
  br i1 %56, label %57, label %95

57:                                               ; preds = %4
  %58 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 3
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = icmp slt i32 %59, %51
  br i1 %60, label %61, label %95

61:                                               ; preds = %57
  %62 = sitofp i32 %59 to float
  %63 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 5
  %64 = load float, ptr %63, align 4, !tbaa !32
  %65 = fmul float %64, %62
  %66 = fptosi float %65 to i32
  %67 = tail call i32 @llvm.smax.i32(i32 %66, i32 %51)
  %68 = sub nsw i32 %67, %59
  %69 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 6
  %70 = load i32, ptr %69, align 8, !tbaa !33
  %71 = icmp slt i32 %68, %70
  %72 = add nsw i32 %70, %59
  %73 = select i1 %71, i32 %72, i32 %67
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 1
  %76 = add nsw i64 %75, 31
  %77 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %76) #9
  %78 = getelementptr inbounds i8, ptr %77, i64 31
  %79 = ptrtoint ptr %78 to i64
  %80 = and i64 %79, 31
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, ptr %78, i64 %81
  %83 = load ptr, ptr %53, align 8, !tbaa !34
  %84 = sext i32 %55 to i64
  %85 = shl nsw i64 %84, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %82, ptr align 1 %83, i64 %85, i1 false)
  %86 = icmp eq i32 %59, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %61
  %88 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  %89 = load ptr, ptr %88, align 8, !tbaa !35
  %90 = icmp eq ptr %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZdaPv(ptr noundef nonnull %89) #10
  br label %92

92:                                               ; preds = %91, %87, %61
  %93 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  store ptr %77, ptr %93, align 8, !tbaa !35
  store ptr %82, ptr %53, align 8, !tbaa !34
  store i32 %73, ptr %58, align 4, !tbaa !31
  %94 = load ptr, ptr %52, align 8, !tbaa !26
  br label %95

95:                                               ; preds = %4, %57, %92
  %96 = phi ptr [ %53, %4 ], [ %53, %57 ], [ %94, %92 ]
  store i32 %51, ptr %54, align 8, !tbaa !28
  %97 = load ptr, ptr %96, align 8, !tbaa !34
  %98 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 1, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !36
  %100 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 2
  %101 = load i32, ptr %100, align 8, !tbaa !38
  %102 = icmp slt i32 %101, %51
  br i1 %102, label %103, label %141

103:                                              ; preds = %95
  %104 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 3
  %105 = load i32, ptr %104, align 4, !tbaa !40
  %106 = icmp slt i32 %105, %51
  br i1 %106, label %107, label %141

107:                                              ; preds = %103
  %108 = sitofp i32 %105 to float
  %109 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 5
  %110 = load float, ptr %109, align 4, !tbaa !41
  %111 = fmul float %110, %108
  %112 = fptosi float %111 to i32
  %113 = tail call i32 @llvm.smax.i32(i32 %112, i32 %51)
  %114 = sub nsw i32 %113, %105
  %115 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 6
  %116 = load i32, ptr %115, align 8, !tbaa !42
  %117 = icmp slt i32 %114, %116
  %118 = add nsw i32 %116, %105
  %119 = select i1 %117, i32 %118, i32 %113
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add nsw i64 %121, 31
  %123 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %122) #9
  %124 = getelementptr inbounds i8, ptr %123, i64 31
  %125 = ptrtoint ptr %124 to i64
  %126 = and i64 %125, 31
  %127 = sub nsw i64 0, %126
  %128 = getelementptr inbounds i8, ptr %124, i64 %127
  %129 = load ptr, ptr %99, align 8, !tbaa !43
  %130 = sext i32 %101 to i64
  %131 = shl nsw i64 %130, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %128, ptr align 1 %129, i64 %131, i1 false)
  %132 = icmp eq i32 %105, 0
  br i1 %132, label %138, label %133

133:                                              ; preds = %107
  %134 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  %135 = load ptr, ptr %134, align 8, !tbaa !44
  %136 = icmp eq ptr %135, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  tail call void @_ZdaPv(ptr noundef nonnull %135) #10
  br label %138

138:                                              ; preds = %137, %133, %107
  %139 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  store ptr %123, ptr %139, align 8, !tbaa !44
  store ptr %128, ptr %99, align 8, !tbaa !43
  store i32 %119, ptr %104, align 4, !tbaa !40
  %140 = load ptr, ptr %98, align 8, !tbaa !36
  br label %141

141:                                              ; preds = %95, %103, %138
  %142 = phi ptr [ %99, %95 ], [ %99, %103 ], [ %140, %138 ]
  store i32 %51, ptr %100, align 8, !tbaa !38
  %143 = load ptr, ptr %142, align 8, !tbaa !43
  %144 = getelementptr inbounds i32, ptr %143, i64 1
  %145 = icmp eq i32 %14, 0
  %146 = icmp ne i32 %16, 0
  %147 = select i1 %145, i1 %146, i1 false
  %148 = select i1 %147, i32 0, i32 %51
  %149 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 2, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !26
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 2
  %152 = load i32, ptr %151, align 8, !tbaa !28
  %153 = icmp slt i32 %152, %148
  br i1 %153, label %154, label %192

154:                                              ; preds = %141
  %155 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 3
  %156 = load i32, ptr %155, align 4, !tbaa !31
  %157 = icmp slt i32 %156, %148
  br i1 %157, label %158, label %192

158:                                              ; preds = %154
  %159 = sitofp i32 %156 to float
  %160 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 5
  %161 = load float, ptr %160, align 4, !tbaa !32
  %162 = fmul float %161, %159
  %163 = fptosi float %162 to i32
  %164 = tail call i32 @llvm.smax.i32(i32 %163, i32 %148)
  %165 = sub nsw i32 %164, %156
  %166 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 6
  %167 = load i32, ptr %166, align 8, !tbaa !33
  %168 = icmp slt i32 %165, %167
  %169 = add nsw i32 %167, %156
  %170 = select i1 %168, i32 %169, i32 %164
  %171 = sext i32 %170 to i64
  %172 = shl nsw i64 %171, 1
  %173 = add nsw i64 %172, 31
  %174 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %173) #9
  %175 = getelementptr inbounds i8, ptr %174, i64 31
  %176 = ptrtoint ptr %175 to i64
  %177 = and i64 %176, 31
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds i8, ptr %175, i64 %178
  %180 = load ptr, ptr %150, align 8, !tbaa !34
  %181 = sext i32 %152 to i64
  %182 = shl nsw i64 %181, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %179, ptr align 1 %180, i64 %182, i1 false)
  %183 = icmp eq i32 %156, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %158
  %185 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !35
  %187 = icmp eq ptr %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZdaPv(ptr noundef nonnull %186) #10
  br label %189

189:                                              ; preds = %188, %184, %158
  %190 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  store ptr %174, ptr %190, align 8, !tbaa !35
  store ptr %179, ptr %150, align 8, !tbaa !34
  store i32 %170, ptr %155, align 4, !tbaa !31
  %191 = load ptr, ptr %149, align 8, !tbaa !26
  br label %192

192:                                              ; preds = %141, %154, %189
  %193 = phi ptr [ %150, %141 ], [ %150, %154 ], [ %191, %189 ]
  store i32 %148, ptr %151, align 8, !tbaa !28
  %194 = load ptr, ptr %193, align 8, !tbaa !34
  %195 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 3, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !26
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 2
  %198 = load i32, ptr %197, align 8, !tbaa !28
  %199 = icmp slt i32 %198, %148
  br i1 %199, label %200, label %238

200:                                              ; preds = %192
  %201 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 3
  %202 = load i32, ptr %201, align 4, !tbaa !31
  %203 = icmp slt i32 %202, %148
  br i1 %203, label %204, label %238

204:                                              ; preds = %200
  %205 = sitofp i32 %202 to float
  %206 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 5
  %207 = load float, ptr %206, align 4, !tbaa !32
  %208 = fmul float %207, %205
  %209 = fptosi float %208 to i32
  %210 = tail call i32 @llvm.smax.i32(i32 %209, i32 %148)
  %211 = sub nsw i32 %210, %202
  %212 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 6
  %213 = load i32, ptr %212, align 8, !tbaa !33
  %214 = icmp slt i32 %211, %213
  %215 = add nsw i32 %213, %202
  %216 = select i1 %214, i32 %215, i32 %210
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 1
  %219 = add nsw i64 %218, 31
  %220 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %219) #9
  %221 = getelementptr inbounds i8, ptr %220, i64 31
  %222 = ptrtoint ptr %221 to i64
  %223 = and i64 %222, 31
  %224 = sub nsw i64 0, %223
  %225 = getelementptr inbounds i8, ptr %221, i64 %224
  %226 = load ptr, ptr %196, align 8, !tbaa !34
  %227 = sext i32 %198 to i64
  %228 = shl nsw i64 %227, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %225, ptr align 1 %226, i64 %228, i1 false)
  %229 = icmp eq i32 %202, 0
  br i1 %229, label %235, label %230

230:                                              ; preds = %204
  %231 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  %232 = load ptr, ptr %231, align 8, !tbaa !35
  %233 = icmp eq ptr %232, null
  br i1 %233, label %235, label %234

234:                                              ; preds = %230
  tail call void @_ZdaPv(ptr noundef nonnull %232) #10
  br label %235

235:                                              ; preds = %234, %230, %204
  %236 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  store ptr %220, ptr %236, align 8, !tbaa !35
  store ptr %225, ptr %196, align 8, !tbaa !34
  store i32 %216, ptr %201, align 4, !tbaa !31
  %237 = load ptr, ptr %195, align 8, !tbaa !26
  br label %238

238:                                              ; preds = %192, %200, %235
  %239 = phi ptr [ %196, %192 ], [ %196, %200 ], [ %237, %235 ]
  store i32 %148, ptr %197, align 8, !tbaa !28
  %240 = load ptr, ptr %239, align 8, !tbaa !34
  %241 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 4, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !26
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 2
  %244 = load i32, ptr %243, align 8, !tbaa !28
  %245 = icmp slt i32 %244, %148
  br i1 %245, label %246, label %284

246:                                              ; preds = %238
  %247 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 3
  %248 = load i32, ptr %247, align 4, !tbaa !31
  %249 = icmp slt i32 %248, %148
  br i1 %249, label %250, label %284

250:                                              ; preds = %246
  %251 = sitofp i32 %248 to float
  %252 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 5
  %253 = load float, ptr %252, align 4, !tbaa !32
  %254 = fmul float %253, %251
  %255 = fptosi float %254 to i32
  %256 = tail call i32 @llvm.smax.i32(i32 %255, i32 %148)
  %257 = sub nsw i32 %256, %248
  %258 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 6
  %259 = load i32, ptr %258, align 8, !tbaa !33
  %260 = icmp slt i32 %257, %259
  %261 = add nsw i32 %259, %248
  %262 = select i1 %260, i32 %261, i32 %256
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 1
  %265 = add nsw i64 %264, 31
  %266 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %265) #9
  %267 = getelementptr inbounds i8, ptr %266, i64 31
  %268 = ptrtoint ptr %267 to i64
  %269 = and i64 %268, 31
  %270 = sub nsw i64 0, %269
  %271 = getelementptr inbounds i8, ptr %267, i64 %270
  %272 = load ptr, ptr %242, align 8, !tbaa !34
  %273 = sext i32 %244 to i64
  %274 = shl nsw i64 %273, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %271, ptr align 1 %272, i64 %274, i1 false)
  %275 = icmp eq i32 %248, 0
  br i1 %275, label %281, label %276

276:                                              ; preds = %250
  %277 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  %278 = load ptr, ptr %277, align 8, !tbaa !35
  %279 = icmp eq ptr %278, null
  br i1 %279, label %281, label %280

280:                                              ; preds = %276
  tail call void @_ZdaPv(ptr noundef nonnull %278) #10
  br label %281

281:                                              ; preds = %280, %276, %250
  %282 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  store ptr %266, ptr %282, align 8, !tbaa !35
  store ptr %271, ptr %242, align 8, !tbaa !34
  store i32 %262, ptr %247, align 4, !tbaa !31
  %283 = load ptr, ptr %241, align 8, !tbaa !26
  br label %284

284:                                              ; preds = %238, %246, %281
  %285 = phi ptr [ %242, %238 ], [ %242, %246 ], [ %283, %281 ]
  store i32 %148, ptr %243, align 8, !tbaa !28
  %286 = load ptr, ptr %285, align 8, !tbaa !34
  %287 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 5, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !26
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 2
  %290 = load i32, ptr %289, align 8, !tbaa !28
  %291 = icmp slt i32 %290, %148
  br i1 %291, label %292, label %330

292:                                              ; preds = %284
  %293 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 3
  %294 = load i32, ptr %293, align 4, !tbaa !31
  %295 = icmp slt i32 %294, %148
  br i1 %295, label %296, label %330

296:                                              ; preds = %292
  %297 = sitofp i32 %294 to float
  %298 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 5
  %299 = load float, ptr %298, align 4, !tbaa !32
  %300 = fmul float %299, %297
  %301 = fptosi float %300 to i32
  %302 = tail call i32 @llvm.smax.i32(i32 %301, i32 %148)
  %303 = sub nsw i32 %302, %294
  %304 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 6
  %305 = load i32, ptr %304, align 8, !tbaa !33
  %306 = icmp slt i32 %303, %305
  %307 = add nsw i32 %305, %294
  %308 = select i1 %306, i32 %307, i32 %302
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 1
  %311 = add nsw i64 %310, 31
  %312 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %311) #9
  %313 = getelementptr inbounds i8, ptr %312, i64 31
  %314 = ptrtoint ptr %313 to i64
  %315 = and i64 %314, 31
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds i8, ptr %313, i64 %316
  %318 = load ptr, ptr %288, align 8, !tbaa !34
  %319 = sext i32 %290 to i64
  %320 = shl nsw i64 %319, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %317, ptr align 1 %318, i64 %320, i1 false)
  %321 = icmp eq i32 %294, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %296
  %323 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  %324 = load ptr, ptr %323, align 8, !tbaa !35
  %325 = icmp eq ptr %324, null
  br i1 %325, label %327, label %326

326:                                              ; preds = %322
  tail call void @_ZdaPv(ptr noundef nonnull %324) #10
  br label %327

327:                                              ; preds = %326, %322, %296
  %328 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  store ptr %312, ptr %328, align 8, !tbaa !35
  store ptr %317, ptr %288, align 8, !tbaa !34
  store i32 %308, ptr %293, align 4, !tbaa !31
  %329 = load ptr, ptr %287, align 8, !tbaa !26
  br label %330

330:                                              ; preds = %284, %292, %327
  %331 = phi ptr [ %288, %284 ], [ %288, %292 ], [ %329, %327 ]
  store i32 %148, ptr %289, align 8, !tbaa !28
  %332 = load ptr, ptr %331, align 8, !tbaa !34
  %333 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 6, i32 1
  %334 = load ptr, ptr %333, align 8, !tbaa !26
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 2
  %336 = load i32, ptr %335, align 8, !tbaa !28
  %337 = icmp slt i32 %336, %148
  br i1 %337, label %338, label %376

338:                                              ; preds = %330
  %339 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 3
  %340 = load i32, ptr %339, align 4, !tbaa !31
  %341 = icmp slt i32 %340, %148
  br i1 %341, label %342, label %376

342:                                              ; preds = %338
  %343 = sitofp i32 %340 to float
  %344 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 5
  %345 = load float, ptr %344, align 4, !tbaa !32
  %346 = fmul float %345, %343
  %347 = fptosi float %346 to i32
  %348 = tail call i32 @llvm.smax.i32(i32 %347, i32 %148)
  %349 = sub nsw i32 %348, %340
  %350 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 6
  %351 = load i32, ptr %350, align 8, !tbaa !33
  %352 = icmp slt i32 %349, %351
  %353 = add nsw i32 %351, %340
  %354 = select i1 %352, i32 %353, i32 %348
  %355 = sext i32 %354 to i64
  %356 = shl nsw i64 %355, 1
  %357 = add nsw i64 %356, 31
  %358 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %357) #9
  %359 = getelementptr inbounds i8, ptr %358, i64 31
  %360 = ptrtoint ptr %359 to i64
  %361 = and i64 %360, 31
  %362 = sub nsw i64 0, %361
  %363 = getelementptr inbounds i8, ptr %359, i64 %362
  %364 = load ptr, ptr %334, align 8, !tbaa !34
  %365 = sext i32 %336 to i64
  %366 = shl nsw i64 %365, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %363, ptr align 1 %364, i64 %366, i1 false)
  %367 = icmp eq i32 %340, 0
  br i1 %367, label %373, label %368

368:                                              ; preds = %342
  %369 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  %370 = load ptr, ptr %369, align 8, !tbaa !35
  %371 = icmp eq ptr %370, null
  br i1 %371, label %373, label %372

372:                                              ; preds = %368
  tail call void @_ZdaPv(ptr noundef nonnull %370) #10
  br label %373

373:                                              ; preds = %372, %368, %342
  %374 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  store ptr %358, ptr %374, align 8, !tbaa !35
  store ptr %363, ptr %334, align 8, !tbaa !34
  store i32 %354, ptr %339, align 4, !tbaa !31
  %375 = load ptr, ptr %333, align 8, !tbaa !26
  br label %376

376:                                              ; preds = %330, %338, %373
  %377 = phi ptr [ %334, %330 ], [ %334, %338 ], [ %375, %373 ]
  store i32 %148, ptr %335, align 8, !tbaa !28
  %378 = load ptr, ptr %377, align 8, !tbaa !34
  %379 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 15, i32 1
  %380 = load ptr, ptr %379, align 8, !tbaa !26
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 2
  %382 = load i32, ptr %381, align 8, !tbaa !28
  %383 = icmp slt i32 %382, %148
  br i1 %383, label %384, label %422

384:                                              ; preds = %376
  %385 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 3
  %386 = load i32, ptr %385, align 4, !tbaa !31
  %387 = icmp slt i32 %386, %148
  br i1 %387, label %388, label %422

388:                                              ; preds = %384
  %389 = sitofp i32 %386 to float
  %390 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 5
  %391 = load float, ptr %390, align 4, !tbaa !32
  %392 = fmul float %391, %389
  %393 = fptosi float %392 to i32
  %394 = tail call i32 @llvm.smax.i32(i32 %393, i32 %148)
  %395 = sub nsw i32 %394, %386
  %396 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 6
  %397 = load i32, ptr %396, align 8, !tbaa !33
  %398 = icmp slt i32 %395, %397
  %399 = add nsw i32 %397, %386
  %400 = select i1 %398, i32 %399, i32 %394
  %401 = sext i32 %400 to i64
  %402 = shl nsw i64 %401, 1
  %403 = add nsw i64 %402, 31
  %404 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %403) #9
  %405 = getelementptr inbounds i8, ptr %404, i64 31
  %406 = ptrtoint ptr %405 to i64
  %407 = and i64 %406, 31
  %408 = sub nsw i64 0, %407
  %409 = getelementptr inbounds i8, ptr %405, i64 %408
  %410 = load ptr, ptr %380, align 8, !tbaa !34
  %411 = sext i32 %382 to i64
  %412 = shl nsw i64 %411, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %409, ptr align 1 %410, i64 %412, i1 false)
  %413 = icmp eq i32 %386, 0
  br i1 %413, label %419, label %414

414:                                              ; preds = %388
  %415 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  %416 = load ptr, ptr %415, align 8, !tbaa !35
  %417 = icmp eq ptr %416, null
  br i1 %417, label %419, label %418

418:                                              ; preds = %414
  tail call void @_ZdaPv(ptr noundef nonnull %416) #10
  br label %419

419:                                              ; preds = %418, %414, %388
  %420 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  store ptr %404, ptr %420, align 8, !tbaa !35
  store ptr %409, ptr %380, align 8, !tbaa !34
  store i32 %400, ptr %385, align 4, !tbaa !31
  %421 = load ptr, ptr %379, align 8, !tbaa !26
  br label %422

422:                                              ; preds = %376, %384, %419
  %423 = phi ptr [ %380, %376 ], [ %380, %384 ], [ %421, %419 ]
  store i32 %148, ptr %381, align 8, !tbaa !28
  %424 = load ptr, ptr %423, align 8, !tbaa !34
  %425 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 16, i32 1
  %426 = load ptr, ptr %425, align 8, !tbaa !26
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 2
  %428 = load i32, ptr %427, align 8, !tbaa !28
  %429 = icmp slt i32 %428, %148
  br i1 %429, label %430, label %468

430:                                              ; preds = %422
  %431 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 3
  %432 = load i32, ptr %431, align 4, !tbaa !31
  %433 = icmp slt i32 %432, %148
  br i1 %433, label %434, label %468

434:                                              ; preds = %430
  %435 = sitofp i32 %432 to float
  %436 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 5
  %437 = load float, ptr %436, align 4, !tbaa !32
  %438 = fmul float %437, %435
  %439 = fptosi float %438 to i32
  %440 = tail call i32 @llvm.smax.i32(i32 %439, i32 %148)
  %441 = sub nsw i32 %440, %432
  %442 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 6
  %443 = load i32, ptr %442, align 8, !tbaa !33
  %444 = icmp slt i32 %441, %443
  %445 = add nsw i32 %443, %432
  %446 = select i1 %444, i32 %445, i32 %440
  %447 = sext i32 %446 to i64
  %448 = shl nsw i64 %447, 1
  %449 = add nsw i64 %448, 31
  %450 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %449) #9
  %451 = getelementptr inbounds i8, ptr %450, i64 31
  %452 = ptrtoint ptr %451 to i64
  %453 = and i64 %452, 31
  %454 = sub nsw i64 0, %453
  %455 = getelementptr inbounds i8, ptr %451, i64 %454
  %456 = load ptr, ptr %426, align 8, !tbaa !34
  %457 = sext i32 %428 to i64
  %458 = shl nsw i64 %457, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %455, ptr align 1 %456, i64 %458, i1 false)
  %459 = icmp eq i32 %432, 0
  br i1 %459, label %465, label %460

460:                                              ; preds = %434
  %461 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  %462 = load ptr, ptr %461, align 8, !tbaa !35
  %463 = icmp eq ptr %462, null
  br i1 %463, label %465, label %464

464:                                              ; preds = %460
  tail call void @_ZdaPv(ptr noundef nonnull %462) #10
  br label %465

465:                                              ; preds = %464, %460, %434
  %466 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  store ptr %450, ptr %466, align 8, !tbaa !35
  store ptr %455, ptr %426, align 8, !tbaa !34
  store i32 %446, ptr %431, align 4, !tbaa !31
  %467 = load ptr, ptr %425, align 8, !tbaa !26
  br label %468

468:                                              ; preds = %422, %430, %465
  %469 = phi ptr [ %426, %422 ], [ %426, %430 ], [ %467, %465 ]
  store i32 %148, ptr %427, align 8, !tbaa !28
  %470 = load ptr, ptr %469, align 8, !tbaa !34
  br i1 %147, label %603, label %471

471:                                              ; preds = %468
  %472 = icmp sgt i32 %41, 0
  br i1 %472, label %473, label %615

473:                                              ; preds = %471
  %474 = zext i32 %41 to i64
  %475 = and i64 %474, 1
  %476 = icmp eq i32 %41, 1
  br i1 %476, label %509, label %477

477:                                              ; preds = %473
  %478 = and i64 %474, 4294967294
  br label %479

479:                                              ; preds = %504, %477
  %480 = phi i64 [ 0, %477 ], [ %506, %504 ]
  %481 = phi i32 [ 0, %477 ], [ %505, %504 ]
  %482 = phi i64 [ 0, %477 ], [ %507, %504 ]
  %483 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %480, i32 4
  %484 = load i8, ptr %483, align 1
  %485 = and i8 %484, 7
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %492, label %487

487:                                              ; preds = %479
  %488 = trunc i64 %480 to i16
  %489 = add nsw i32 %481, 1
  %490 = sext i32 %481 to i64
  %491 = getelementptr inbounds i16, ptr %194, i64 %490
  store i16 %488, ptr %491, align 2, !tbaa !45
  br label %492

492:                                              ; preds = %479, %487
  %493 = phi i32 [ %489, %487 ], [ %481, %479 ]
  %494 = or i64 %480, 1
  %495 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %494, i32 4
  %496 = load i8, ptr %495, align 1
  %497 = and i8 %496, 7
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %504, label %499

499:                                              ; preds = %492
  %500 = trunc i64 %494 to i16
  %501 = add nsw i32 %493, 1
  %502 = sext i32 %493 to i64
  %503 = getelementptr inbounds i16, ptr %194, i64 %502
  store i16 %500, ptr %503, align 2, !tbaa !45
  br label %504

504:                                              ; preds = %499, %492
  %505 = phi i32 [ %501, %499 ], [ %493, %492 ]
  %506 = add nuw nsw i64 %480, 2
  %507 = add i64 %482, 2
  %508 = icmp eq i64 %507, %478
  br i1 %508, label %509, label %479

509:                                              ; preds = %504, %473
  %510 = phi i32 [ undef, %473 ], [ %505, %504 ]
  %511 = phi i64 [ 0, %473 ], [ %506, %504 ]
  %512 = phi i32 [ 0, %473 ], [ %505, %504 ]
  %513 = icmp eq i64 %475, 0
  br i1 %513, label %524, label %514

514:                                              ; preds = %509
  %515 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %511, i32 4
  %516 = load i8, ptr %515, align 1
  %517 = and i8 %516, 7
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %524, label %519

519:                                              ; preds = %514
  %520 = trunc i64 %511 to i16
  %521 = add nsw i32 %512, 1
  %522 = sext i32 %512 to i64
  %523 = getelementptr inbounds i16, ptr %194, i64 %522
  store i16 %520, ptr %523, align 2, !tbaa !45
  br label %524

524:                                              ; preds = %514, %519, %509
  %525 = phi i32 [ %510, %509 ], [ %521, %519 ], [ %512, %514 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %534, label %527

527:                                              ; preds = %524
  %528 = add nsw i32 %525, -1
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i16, ptr %194, i64 %529
  %531 = load i16, ptr %530, align 2, !tbaa !45
  %532 = sext i32 %525 to i64
  %533 = getelementptr inbounds i16, ptr %194, i64 %532
  store i16 %531, ptr %533, align 2, !tbaa !45
  br label %534

534:                                              ; preds = %527, %524
  %535 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %536 = icmp ne i32 %535, 0
  %537 = icmp sgt i32 %525, 0
  %538 = and i1 %536, %537
  br i1 %538, label %539, label %615

539:                                              ; preds = %534
  %540 = zext i32 %525 to i64
  %541 = and i64 %540, 1
  %542 = icmp eq i32 %525, 1
  br i1 %542, label %577, label %543

543:                                              ; preds = %539
  %544 = and i64 %540, 4294967294
  br label %545

545:                                              ; preds = %572, %543
  %546 = phi i64 [ 0, %543 ], [ %574, %572 ]
  %547 = phi i32 [ 0, %543 ], [ %573, %572 ]
  %548 = phi i64 [ 0, %543 ], [ %575, %572 ]
  %549 = getelementptr inbounds i16, ptr %194, i64 %546
  %550 = load i16, ptr %549, align 2, !tbaa !45
  %551 = zext i16 %550 to i64
  %552 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %551
  %553 = load i32, ptr %552, align 4
  %554 = icmp sgt i32 %553, -1
  br i1 %554, label %555, label %559

555:                                              ; preds = %545
  %556 = add nsw i32 %547, 1
  %557 = sext i32 %547 to i64
  %558 = getelementptr inbounds i16, ptr %240, i64 %557
  store i16 %550, ptr %558, align 2, !tbaa !45
  br label %559

559:                                              ; preds = %545, %555
  %560 = phi i32 [ %547, %545 ], [ %556, %555 ]
  %561 = or i64 %546, 1
  %562 = getelementptr inbounds i16, ptr %194, i64 %561
  %563 = load i16, ptr %562, align 2, !tbaa !45
  %564 = zext i16 %563 to i64
  %565 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %564
  %566 = load i32, ptr %565, align 4
  %567 = icmp sgt i32 %566, -1
  br i1 %567, label %568, label %572

568:                                              ; preds = %559
  %569 = add nsw i32 %560, 1
  %570 = sext i32 %560 to i64
  %571 = getelementptr inbounds i16, ptr %240, i64 %570
  store i16 %563, ptr %571, align 2, !tbaa !45
  br label %572

572:                                              ; preds = %568, %559
  %573 = phi i32 [ %560, %559 ], [ %569, %568 ]
  %574 = add nuw nsw i64 %546, 2
  %575 = add i64 %548, 2
  %576 = icmp eq i64 %575, %544
  br i1 %576, label %577, label %545

577:                                              ; preds = %572, %539
  %578 = phi i32 [ undef, %539 ], [ %573, %572 ]
  %579 = phi i64 [ 0, %539 ], [ %574, %572 ]
  %580 = phi i32 [ 0, %539 ], [ %573, %572 ]
  %581 = icmp eq i64 %541, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %577
  %583 = getelementptr inbounds i16, ptr %194, i64 %579
  %584 = load i16, ptr %583, align 2, !tbaa !45
  %585 = zext i16 %584 to i64
  %586 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %585
  %587 = load i32, ptr %586, align 4
  %588 = icmp sgt i32 %587, -1
  br i1 %588, label %589, label %593

589:                                              ; preds = %582
  %590 = add nsw i32 %580, 1
  %591 = sext i32 %580 to i64
  %592 = getelementptr inbounds i16, ptr %240, i64 %591
  store i16 %584, ptr %592, align 2, !tbaa !45
  br label %593

593:                                              ; preds = %582, %589, %577
  %594 = phi i32 [ %578, %577 ], [ %580, %582 ], [ %590, %589 ]
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %615, label %596

596:                                              ; preds = %593
  %597 = add nsw i32 %594, -1
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, ptr %240, i64 %598
  %600 = load i16, ptr %599, align 2, !tbaa !45
  %601 = sext i32 %594 to i64
  %602 = getelementptr inbounds i16, ptr %240, i64 %601
  store i16 %600, ptr %602, align 2, !tbaa !45
  br label %615

603:                                              ; preds = %468
  %604 = load ptr, ptr %12, align 8, !tbaa !47
  %605 = load i32, ptr %17, align 8, !tbaa !19
  %606 = add nsw i32 %605, 1
  store i32 %606, ptr %17, align 8, !tbaa !19
  %607 = sext i32 %605 to i64
  %608 = getelementptr inbounds i16, ptr %604, i64 %607
  %609 = load i16, ptr %608, align 2, !tbaa !45
  %610 = zext i16 %609 to i32
  %611 = icmp eq i32 %39, %610
  br i1 %611, label %632, label %612

612:                                              ; preds = %603
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %613 = load ptr, ptr %12, align 8, !tbaa !47
  %614 = load i32, ptr %17, align 8, !tbaa !19
  br label %632

615:                                              ; preds = %471, %596, %593, %534
  %616 = phi i32 [ %525, %596 ], [ %525, %593 ], [ %525, %534 ], [ 0, %471 ]
  %617 = phi i32 [ %594, %596 ], [ 0, %593 ], [ 0, %534 ], [ 0, %471 ]
  %618 = load i32, ptr %17, align 8, !tbaa !19
  %619 = trunc i32 %39 to i16
  %620 = load ptr, ptr %12, align 8, !tbaa !47
  %621 = sext i32 %618 to i64
  %622 = getelementptr inbounds i16, ptr %620, i64 %621
  store i16 %619, ptr %622, align 2, !tbaa !45
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %624 = load i32, ptr %623, align 4, !tbaa !48
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %626 = load i32, ptr %625, align 4, !tbaa !49
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %628 = load ptr, ptr %627, align 8, !tbaa !24
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %630 = load ptr, ptr %629, align 8, !tbaa !24
  %631 = add nsw i32 %618, 2
  store i32 %631, ptr %17, align 8, !tbaa !19
  br label %648

632:                                              ; preds = %612, %603
  %633 = phi i32 [ %606, %603 ], [ %614, %612 ]
  %634 = phi ptr [ %604, %603 ], [ %613, %612 ]
  %635 = sext i32 %633 to i64
  %636 = getelementptr inbounds i16, ptr %634, i64 %635
  %637 = load i16, ptr %636, align 2, !tbaa !45
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  %640 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %641 = load i32, ptr %640, align 4, !tbaa !49
  %642 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %643 = load ptr, ptr %642, align 8, !tbaa !24
  %644 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %645 = load ptr, ptr %644, align 8, !tbaa !24
  %646 = add nsw i32 %633, 1
  store i32 %646, ptr %17, align 8, !tbaa !19
  %647 = zext i16 %637 to i32
  br label %648

648:                                              ; preds = %632, %615
  %649 = phi i32 [ %639, %632 ], [ %624, %615 ]
  %650 = phi i32 [ %641, %632 ], [ %626, %615 ]
  %651 = phi ptr [ %643, %632 ], [ %628, %615 ]
  %652 = phi ptr [ %645, %632 ], [ %630, %615 ]
  %653 = phi i32 [ 0, %632 ], [ %617, %615 ]
  %654 = phi i32 [ 0, %632 ], [ %616, %615 ]
  %655 = phi i32 [ %647, %632 ], [ 0, %615 ]
  %656 = add nsw i32 %650, -1
  %657 = icmp slt i32 %655, %39
  br i1 %657, label %658, label %2448

658:                                              ; preds = %648
  %659 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %660 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %661 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %662 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %663 = ptrtoint ptr %424 to i64
  %664 = add nsw i32 %41, 10
  %665 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %666 = ptrtoint ptr %470 to i64
  %667 = getelementptr inbounds i16, ptr %424, i64 1
  %668 = ptrtoint ptr %332 to i64
  %669 = ptrtoint ptr %378 to i64
  %670 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %671 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %672 = fneg double %32
  %673 = getelementptr inbounds double, ptr %6, i64 26
  %674 = getelementptr inbounds double, ptr %6, i64 28
  %675 = getelementptr inbounds double, ptr %6, i64 29
  %676 = getelementptr inbounds double, ptr %6, i64 31
  %677 = fadd double %33, -1.000000e+00
  %678 = fadd double %677, 1.000000e+00
  %679 = insertelement <2 x double> poison, double %27, i64 0
  %680 = shufflevector <2 x double> %679, <2 x double> poison, <2 x i32> zeroinitializer
  br label %681

681:                                              ; preds = %658, %2436
  %682 = phi i32 [ 0, %658 ], [ %2443, %2436 ]
  %683 = phi i32 [ %655, %658 ], [ %2442, %2436 ]
  %684 = phi ptr [ null, %658 ], [ %2441, %2436 ]
  %685 = phi ptr [ null, %658 ], [ %2440, %2436 ]
  %686 = phi ptr [ null, %658 ], [ %2439, %2436 ]
  %687 = phi i32 [ 0, %658 ], [ %2438, %2436 ]
  %688 = phi i32 [ %649, %658 ], [ %2437, %2436 ]
  %689 = phi <2 x double> [ zeroinitializer, %658 ], [ %2444, %2436 ]
  %690 = phi <2 x double> [ zeroinitializer, %658 ], [ %2445, %2436 ]
  %691 = phi <2 x double> [ zeroinitializer, %658 ], [ %2446, %2436 ]
  %692 = sext i32 %683 to i64
  %693 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %692
  %694 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %692
  br i1 %147, label %707, label %695

695:                                              ; preds = %681
  %696 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %692, i32 4
  %697 = load i8, ptr %696, align 1
  %698 = lshr i8 %697, 3
  %699 = and i8 %698, 15
  %700 = zext i8 %699 to i32
  %701 = icmp eq i8 %699, 0
  br i1 %701, label %707, label %702

702:                                              ; preds = %695
  %703 = icmp eq i32 %688, 0
  br i1 %703, label %707, label %704

704:                                              ; preds = %702
  %705 = add nsw i32 %688, -1
  %706 = add nsw i32 %683, %700
  br label %2436

707:                                              ; preds = %702, %695, %681
  %708 = phi i32 [ %688, %681 ], [ %688, %695 ], [ %656, %702 ]
  %709 = load <2 x double>, ptr %693, align 8, !tbaa !15
  %710 = fadd <2 x double> %19, %709
  %711 = getelementptr inbounds %class.Vector, ptr %693, i64 0, i32 2
  %712 = load double, ptr %711, align 8, !tbaa !50
  %713 = fadd double %21, %712
  %714 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %692, i32 3
  %715 = load i8, ptr %714, align 2, !tbaa !52
  %716 = zext i8 %715 to i32
  %717 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %718 = fsub double %712, %717
  %719 = fmul double %10, %718
  %720 = tail call double @llvm.floor.f64(double %719)
  %721 = fptosi double %720 to i32
  %722 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %723 = icmp slt i32 %721, 0
  %724 = select i1 %723, i32 %722, i32 0
  %725 = icmp sgt i32 %722, %721
  %726 = select i1 %725, i32 0, i32 %722
  %727 = sub i32 %721, %726
  %728 = add i32 %727, %724
  br i1 %147, label %1960, label %729

729:                                              ; preds = %707
  %730 = load i32, ptr %694, align 4
  %731 = shl i32 %730, 2
  %732 = ashr exact i32 %731, 2
  %733 = load ptr, ptr %659, align 8, !tbaa !53
  %734 = sext i32 %732 to i64
  %735 = getelementptr inbounds %class.ExclusionCheck, ptr %733, i64 %734
  %736 = load i32, ptr %735, align 8, !tbaa !55
  %737 = getelementptr inbounds %class.ExclusionCheck, ptr %733, i64 %734, i32 1
  %738 = load i32, ptr %737, align 4, !tbaa !57
  %739 = getelementptr inbounds %class.ExclusionCheck, ptr %733, i64 %734, i32 2
  %740 = load ptr, ptr %739, align 8, !tbaa !58
  %741 = icmp eq ptr %740, null
  br i1 %741, label %746, label %742

742:                                              ; preds = %729
  %743 = sext i32 %736 to i64
  %744 = sub nsw i64 0, %743
  %745 = getelementptr inbounds i8, ptr %740, i64 %744
  br label %972

746:                                              ; preds = %729
  %747 = icmp eq ptr %684, null
  br i1 %747, label %835, label %748

748:                                              ; preds = %746
  %749 = load i32, ptr %685, align 4, !tbaa !5
  %750 = icmp slt i32 %749, 1
  br i1 %750, label %798, label %751

751:                                              ; preds = %748
  %752 = add nuw i32 %749, 1
  %753 = zext i32 %752 to i64
  %754 = add nsw i64 %753, -1
  %755 = add nsw i64 %753, -2
  %756 = and i64 %754, 3
  %757 = icmp ult i64 %755, 3
  br i1 %757, label %785, label %758

758:                                              ; preds = %751
  %759 = and i64 %754, -4
  br label %760

760:                                              ; preds = %760, %758
  %761 = phi i64 [ 1, %758 ], [ %782, %760 ]
  %762 = phi i64 [ 0, %758 ], [ %783, %760 ]
  %763 = getelementptr inbounds i32, ptr %685, i64 %761
  %764 = load i32, ptr %763, align 4, !tbaa !5
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, ptr %684, i64 %765
  store i8 0, ptr %766, align 1, !tbaa !59
  %767 = add nuw nsw i64 %761, 1
  %768 = getelementptr inbounds i32, ptr %685, i64 %767
  %769 = load i32, ptr %768, align 4, !tbaa !5
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, ptr %684, i64 %770
  store i8 0, ptr %771, align 1, !tbaa !59
  %772 = add nuw nsw i64 %761, 2
  %773 = getelementptr inbounds i32, ptr %685, i64 %772
  %774 = load i32, ptr %773, align 4, !tbaa !5
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, ptr %684, i64 %775
  store i8 0, ptr %776, align 1, !tbaa !59
  %777 = add nuw nsw i64 %761, 3
  %778 = getelementptr inbounds i32, ptr %685, i64 %777
  %779 = load i32, ptr %778, align 4, !tbaa !5
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, ptr %684, i64 %780
  store i8 0, ptr %781, align 1, !tbaa !59
  %782 = add nuw nsw i64 %761, 4
  %783 = add i64 %762, 4
  %784 = icmp eq i64 %783, %759
  br i1 %784, label %785, label %760

785:                                              ; preds = %760, %751
  %786 = phi i64 [ 1, %751 ], [ %782, %760 ]
  %787 = icmp eq i64 %756, 0
  br i1 %787, label %798, label %788

788:                                              ; preds = %785, %788
  %789 = phi i64 [ %795, %788 ], [ %786, %785 ]
  %790 = phi i64 [ %796, %788 ], [ 0, %785 ]
  %791 = getelementptr inbounds i32, ptr %685, i64 %789
  %792 = load i32, ptr %791, align 4, !tbaa !5
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, ptr %684, i64 %793
  store i8 0, ptr %794, align 1, !tbaa !59
  %795 = add nuw nsw i64 %789, 1
  %796 = add i64 %790, 1
  %797 = icmp eq i64 %796, %756
  br i1 %797, label %798, label %788, !llvm.loop !60

798:                                              ; preds = %785, %788, %748
  %799 = load i32, ptr %686, align 4, !tbaa !5
  %800 = icmp slt i32 %799, 1
  br i1 %800, label %855, label %801

801:                                              ; preds = %798
  %802 = add nuw i32 %799, 1
  %803 = zext i32 %802 to i64
  %804 = add nsw i64 %803, -1
  %805 = add nsw i64 %803, -2
  %806 = and i64 %804, 3
  %807 = icmp ult i64 %805, 3
  br i1 %807, label %842, label %808

808:                                              ; preds = %801
  %809 = and i64 %804, -4
  br label %810

810:                                              ; preds = %810, %808
  %811 = phi i64 [ 1, %808 ], [ %832, %810 ]
  %812 = phi i64 [ 0, %808 ], [ %833, %810 ]
  %813 = getelementptr inbounds i32, ptr %686, i64 %811
  %814 = load i32, ptr %813, align 4, !tbaa !5
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds i8, ptr %684, i64 %815
  store i8 0, ptr %816, align 1, !tbaa !59
  %817 = add nuw nsw i64 %811, 1
  %818 = getelementptr inbounds i32, ptr %686, i64 %817
  %819 = load i32, ptr %818, align 4, !tbaa !5
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i8, ptr %684, i64 %820
  store i8 0, ptr %821, align 1, !tbaa !59
  %822 = add nuw nsw i64 %811, 2
  %823 = getelementptr inbounds i32, ptr %686, i64 %822
  %824 = load i32, ptr %823, align 4, !tbaa !5
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i8, ptr %684, i64 %825
  store i8 0, ptr %826, align 1, !tbaa !59
  %827 = add nuw nsw i64 %811, 3
  %828 = getelementptr inbounds i32, ptr %686, i64 %827
  %829 = load i32, ptr %828, align 4, !tbaa !5
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds i8, ptr %684, i64 %830
  store i8 0, ptr %831, align 1, !tbaa !59
  %832 = add nuw nsw i64 %811, 4
  %833 = add i64 %812, 4
  %834 = icmp eq i64 %833, %809
  br i1 %834, label %842, label %810

835:                                              ; preds = %746
  %836 = load i32, ptr %660, align 8, !tbaa !62
  %837 = tail call i32 @llvm.smax.i32(i32 %836, i32 -1)
  %838 = sext i32 %837 to i64
  %839 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %838) #9
  %840 = load i32, ptr %660, align 8, !tbaa !62
  %841 = sext i32 %840 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %839, i8 0, i64 %841, i1 false)
  br label %855

842:                                              ; preds = %810, %801
  %843 = phi i64 [ 1, %801 ], [ %832, %810 ]
  %844 = icmp eq i64 %806, 0
  br i1 %844, label %855, label %845

845:                                              ; preds = %842, %845
  %846 = phi i64 [ %852, %845 ], [ %843, %842 ]
  %847 = phi i64 [ %853, %845 ], [ 0, %842 ]
  %848 = getelementptr inbounds i32, ptr %686, i64 %846
  %849 = load i32, ptr %848, align 4, !tbaa !5
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds i8, ptr %684, i64 %850
  store i8 0, ptr %851, align 1, !tbaa !59
  %852 = add nuw nsw i64 %846, 1
  %853 = add i64 %847, 1
  %854 = icmp eq i64 %853, %806
  br i1 %854, label %855, label %845, !llvm.loop !63

855:                                              ; preds = %842, %845, %798, %835
  %856 = phi ptr [ %839, %835 ], [ %684, %798 ], [ %684, %845 ], [ %684, %842 ]
  %857 = load i32, ptr %694, align 4
  %858 = shl i32 %857, 2
  %859 = ashr exact i32 %858, 2
  %860 = load ptr, ptr %661, align 8, !tbaa !64
  %861 = sext i32 %859 to i64
  %862 = getelementptr inbounds ptr, ptr %860, i64 %861
  %863 = load ptr, ptr %862, align 8, !tbaa !24
  %864 = load i32, ptr %863, align 4, !tbaa !5
  %865 = icmp slt i32 %864, 1
  br i1 %865, label %918, label %866

866:                                              ; preds = %855
  %867 = add nuw i32 %864, 1
  %868 = zext i32 %867 to i64
  %869 = add nsw i64 %868, -1
  %870 = add nsw i64 %868, -2
  %871 = and i64 %869, 3
  %872 = icmp ult i64 %870, 3
  br i1 %872, label %900, label %873

873:                                              ; preds = %866
  %874 = and i64 %869, -4
  br label %875

875:                                              ; preds = %875, %873
  %876 = phi i64 [ 1, %873 ], [ %897, %875 ]
  %877 = phi i64 [ 0, %873 ], [ %898, %875 ]
  %878 = getelementptr inbounds i32, ptr %863, i64 %876
  %879 = load i32, ptr %878, align 4, !tbaa !5
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds i8, ptr %856, i64 %880
  store i8 1, ptr %881, align 1, !tbaa !59
  %882 = add nuw nsw i64 %876, 1
  %883 = getelementptr inbounds i32, ptr %863, i64 %882
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, ptr %856, i64 %885
  store i8 1, ptr %886, align 1, !tbaa !59
  %887 = add nuw nsw i64 %876, 2
  %888 = getelementptr inbounds i32, ptr %863, i64 %887
  %889 = load i32, ptr %888, align 4, !tbaa !5
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i8, ptr %856, i64 %890
  store i8 1, ptr %891, align 1, !tbaa !59
  %892 = add nuw nsw i64 %876, 3
  %893 = getelementptr inbounds i32, ptr %863, i64 %892
  %894 = load i32, ptr %893, align 4, !tbaa !5
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds i8, ptr %856, i64 %895
  store i8 1, ptr %896, align 1, !tbaa !59
  %897 = add nuw nsw i64 %876, 4
  %898 = add i64 %877, 4
  %899 = icmp eq i64 %898, %874
  br i1 %899, label %900, label %875

900:                                              ; preds = %875, %866
  %901 = phi i64 [ 1, %866 ], [ %897, %875 ]
  %902 = icmp eq i64 %871, 0
  br i1 %902, label %913, label %903

903:                                              ; preds = %900, %903
  %904 = phi i64 [ %910, %903 ], [ %901, %900 ]
  %905 = phi i64 [ %911, %903 ], [ 0, %900 ]
  %906 = getelementptr inbounds i32, ptr %863, i64 %904
  %907 = load i32, ptr %906, align 4, !tbaa !5
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i8, ptr %856, i64 %908
  store i8 1, ptr %909, align 1, !tbaa !59
  %910 = add nuw nsw i64 %904, 1
  %911 = add i64 %905, 1
  %912 = icmp eq i64 %911, %871
  br i1 %912, label %913, label %903, !llvm.loop !65

913:                                              ; preds = %903, %900
  %914 = load i32, ptr %694, align 4
  %915 = shl i32 %914, 2
  %916 = ashr exact i32 %915, 2
  %917 = sext i32 %916 to i64
  br label %918

918:                                              ; preds = %913, %855
  %919 = phi i64 [ %917, %913 ], [ %861, %855 ]
  %920 = load ptr, ptr %662, align 8, !tbaa !66
  %921 = getelementptr inbounds ptr, ptr %920, i64 %919
  %922 = load ptr, ptr %921, align 8, !tbaa !24
  %923 = load i32, ptr %922, align 4, !tbaa !5
  %924 = icmp slt i32 %923, 1
  br i1 %924, label %972, label %925

925:                                              ; preds = %918
  %926 = add nuw i32 %923, 1
  %927 = zext i32 %926 to i64
  %928 = add nsw i64 %927, -1
  %929 = add nsw i64 %927, -2
  %930 = and i64 %928, 3
  %931 = icmp ult i64 %929, 3
  br i1 %931, label %959, label %932

932:                                              ; preds = %925
  %933 = and i64 %928, -4
  br label %934

934:                                              ; preds = %934, %932
  %935 = phi i64 [ 1, %932 ], [ %956, %934 ]
  %936 = phi i64 [ 0, %932 ], [ %957, %934 ]
  %937 = getelementptr inbounds i32, ptr %922, i64 %935
  %938 = load i32, ptr %937, align 4, !tbaa !5
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i8, ptr %856, i64 %939
  store i8 2, ptr %940, align 1, !tbaa !59
  %941 = add nuw nsw i64 %935, 1
  %942 = getelementptr inbounds i32, ptr %922, i64 %941
  %943 = load i32, ptr %942, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i8, ptr %856, i64 %944
  store i8 2, ptr %945, align 1, !tbaa !59
  %946 = add nuw nsw i64 %935, 2
  %947 = getelementptr inbounds i32, ptr %922, i64 %946
  %948 = load i32, ptr %947, align 4, !tbaa !5
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i8, ptr %856, i64 %949
  store i8 2, ptr %950, align 1, !tbaa !59
  %951 = add nuw nsw i64 %935, 3
  %952 = getelementptr inbounds i32, ptr %922, i64 %951
  %953 = load i32, ptr %952, align 4, !tbaa !5
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i8, ptr %856, i64 %954
  store i8 2, ptr %955, align 1, !tbaa !59
  %956 = add nuw nsw i64 %935, 4
  %957 = add i64 %936, 4
  %958 = icmp eq i64 %957, %933
  br i1 %958, label %959, label %934

959:                                              ; preds = %934, %925
  %960 = phi i64 [ 1, %925 ], [ %956, %934 ]
  %961 = icmp eq i64 %930, 0
  br i1 %961, label %972, label %962

962:                                              ; preds = %959, %962
  %963 = phi i64 [ %969, %962 ], [ %960, %959 ]
  %964 = phi i64 [ %970, %962 ], [ 0, %959 ]
  %965 = getelementptr inbounds i32, ptr %922, i64 %963
  %966 = load i32, ptr %965, align 4, !tbaa !5
  %967 = sext i32 %966 to i64
  %968 = getelementptr inbounds i8, ptr %856, i64 %967
  store i8 2, ptr %968, align 1, !tbaa !59
  %969 = add nuw nsw i64 %963, 1
  %970 = add i64 %964, 1
  %971 = icmp eq i64 %970, %930
  br i1 %971, label %972, label %962, !llvm.loop !67

972:                                              ; preds = %959, %962, %918, %742
  %973 = phi ptr [ %745, %742 ], [ %856, %918 ], [ %856, %962 ], [ %856, %959 ]
  %974 = phi ptr [ %686, %742 ], [ %922, %918 ], [ %922, %962 ], [ %922, %959 ]
  %975 = phi ptr [ %685, %742 ], [ %863, %918 ], [ %863, %962 ], [ %863, %959 ]
  %976 = phi ptr [ %684, %742 ], [ %856, %918 ], [ %856, %962 ], [ %856, %959 ]
  %977 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %692, i32 4
  %978 = load i8, ptr %977, align 1
  %979 = and i8 %978, 7
  %980 = icmp eq i8 %979, 0
  %981 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %980, label %1164, label %982

982:                                              ; preds = %972
  %983 = icmp eq i32 %981, 0
  br i1 %983, label %990, label %984

984:                                              ; preds = %982
  %985 = load i32, ptr %694, align 4
  %986 = freeze i32 %985
  %987 = icmp slt i32 %986, 0
  %988 = select i1 %987, ptr %240, ptr %194
  %989 = select i1 %987, i32 %653, i32 %654
  br label %990

990:                                              ; preds = %984, %982
  %991 = phi ptr [ %194, %982 ], [ %988, %984 ]
  %992 = phi i32 [ %654, %982 ], [ %989, %984 ]
  %993 = icmp sgt i32 %992, 0
  br i1 %993, label %994, label %1145

994:                                              ; preds = %990
  %995 = icmp ugt i32 %992, 6
  br i1 %995, label %996, label %1080

996:                                              ; preds = %994
  %997 = add nsw i32 %992, -2
  %998 = getelementptr inbounds i16, ptr %991, i64 1
  %999 = load i16, ptr %998, align 2, !tbaa !45
  %1000 = zext i16 %999 to i64
  %1001 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1000
  %1002 = getelementptr inbounds %class.Vector, ptr %1001, i64 0, i32 2
  %1003 = load double, ptr %1002, align 8, !tbaa !50
  %1004 = load i16, ptr %991, align 2, !tbaa !45
  %1005 = zext i16 %1004 to i64
  %1006 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1005
  %1007 = getelementptr inbounds %class.Vector, ptr %1006, i64 0, i32 2
  %1008 = load double, ptr %1007, align 8, !tbaa !50
  %1009 = getelementptr inbounds %class.Vector, ptr %1001, i64 0, i32 1
  %1010 = load double, ptr %1009, align 8, !tbaa !68
  %1011 = getelementptr inbounds %class.Vector, ptr %1006, i64 0, i32 1
  %1012 = load double, ptr %1011, align 8, !tbaa !68
  %1013 = load double, ptr %1001, align 8, !tbaa !69
  %1014 = load double, ptr %1006, align 8, !tbaa !69
  %1015 = zext i32 %997 to i64
  %1016 = insertelement <2 x double> poison, double %1003, i64 0
  %1017 = insertelement <2 x double> %1016, double %1008, i64 1
  %1018 = insertelement <2 x double> poison, double %1010, i64 0
  %1019 = insertelement <2 x double> %1018, double %1012, i64 1
  %1020 = insertelement <2 x double> poison, double %1013, i64 0
  %1021 = insertelement <2 x double> %1020, double %1014, i64 1
  %1022 = insertelement <2 x double> poison, double %713, i64 0
  %1023 = shufflevector <2 x double> %1022, <2 x double> poison, <2 x i32> zeroinitializer
  %1024 = shufflevector <2 x double> %710, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1025 = shufflevector <2 x double> %710, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1026

1026:                                             ; preds = %996, %1026
  %1027 = phi i64 [ 2, %996 ], [ %1070, %1026 ]
  %1028 = phi i32 [ 0, %996 ], [ %1069, %1026 ]
  %1029 = phi i16 [ %1004, %996 ], [ %1036, %1026 ]
  %1030 = phi i16 [ %999, %996 ], [ %1039, %1026 ]
  %1031 = phi <2 x double> [ %1017, %996 ], [ %1073, %1026 ]
  %1032 = phi <2 x double> [ %1019, %996 ], [ %1075, %1026 ]
  %1033 = phi <2 x double> [ %1021, %996 ], [ %1077, %1026 ]
  %1034 = fsub <2 x double> %1023, %1031
  %1035 = getelementptr inbounds i16, ptr %991, i64 %1027
  %1036 = load i16, ptr %1035, align 2, !tbaa !45
  %1037 = or i64 %1027, 1
  %1038 = getelementptr inbounds i16, ptr %991, i64 %1037
  %1039 = load i16, ptr %1038, align 2, !tbaa !45
  %1040 = zext i16 %1036 to i64
  %1041 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1040
  %1042 = load double, ptr %1041, align 8, !tbaa !69
  %1043 = zext i16 %1039 to i64
  %1044 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1043
  %1045 = load double, ptr %1044, align 8, !tbaa !69
  %1046 = getelementptr inbounds %class.Vector, ptr %1041, i64 0, i32 1
  %1047 = load double, ptr %1046, align 8, !tbaa !68
  %1048 = getelementptr inbounds %class.Vector, ptr %1044, i64 0, i32 1
  %1049 = load double, ptr %1048, align 8, !tbaa !68
  %1050 = getelementptr inbounds %class.Vector, ptr %1041, i64 0, i32 2
  %1051 = load double, ptr %1050, align 8, !tbaa !50
  %1052 = getelementptr inbounds %class.Vector, ptr %1044, i64 0, i32 2
  %1053 = load double, ptr %1052, align 8, !tbaa !50
  %1054 = fsub <2 x double> %1025, %1033
  %1055 = fmul <2 x double> %1054, %1054
  %1056 = fsub <2 x double> %1024, %1032
  %1057 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1056, <2 x double> %1056, <2 x double> %1055)
  %1058 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1034, <2 x double> %1034, <2 x double> %1057)
  %1059 = fcmp olt <2 x double> %1058, %680
  %1060 = zext i32 %1028 to i64
  %1061 = getelementptr inbounds i16, ptr %286, i64 %1060
  store i16 %1029, ptr %1061, align 2, !tbaa !45
  %1062 = extractelement <2 x i1> %1059, i64 1
  %1063 = zext i1 %1062 to i32
  %1064 = add nuw nsw i32 %1028, %1063
  %1065 = zext i32 %1064 to i64
  %1066 = getelementptr inbounds i16, ptr %286, i64 %1065
  store i16 %1030, ptr %1066, align 2, !tbaa !45
  %1067 = extractelement <2 x i1> %1059, i64 0
  %1068 = zext i1 %1067 to i32
  %1069 = add i32 %1064, %1068
  %1070 = add nuw nsw i64 %1027, 2
  %1071 = icmp ult i64 %1070, %1015
  %1072 = insertelement <2 x double> poison, double %1053, i64 0
  %1073 = insertelement <2 x double> %1072, double %1051, i64 1
  %1074 = insertelement <2 x double> poison, double %1049, i64 0
  %1075 = insertelement <2 x double> %1074, double %1047, i64 1
  %1076 = insertelement <2 x double> poison, double %1045, i64 0
  %1077 = insertelement <2 x double> %1076, double %1042, i64 1
  br i1 %1071, label %1026, label %1078

1078:                                             ; preds = %1026
  %1079 = trunc i64 %1027 to i32
  br label %1080

1080:                                             ; preds = %1078, %994
  %1081 = phi i32 [ %1069, %1078 ], [ 0, %994 ]
  %1082 = phi i32 [ %1079, %1078 ], [ 0, %994 ]
  %1083 = icmp slt i32 %1082, %992
  br i1 %1083, label %1084, label %1089

1084:                                             ; preds = %1080
  %1085 = zext i32 %1082 to i64
  %1086 = zext i32 %992 to i64
  %1087 = extractelement <2 x double> %710, i64 0
  %1088 = extractelement <2 x double> %710, i64 1
  br label %1094

1089:                                             ; preds = %1117, %1080
  %1090 = phi i32 [ %1081, %1080 ], [ %1118, %1117 ]
  %1091 = icmp sgt i32 %1090, 0
  br i1 %1091, label %1092, label %1145

1092:                                             ; preds = %1089
  %1093 = zext i32 %1090 to i64
  br label %1121

1094:                                             ; preds = %1084, %1117
  %1095 = phi i64 [ %1085, %1084 ], [ %1119, %1117 ]
  %1096 = phi i32 [ %1081, %1084 ], [ %1118, %1117 ]
  %1097 = getelementptr inbounds i16, ptr %991, i64 %1095
  %1098 = load i16, ptr %1097, align 2, !tbaa !45
  %1099 = zext i16 %1098 to i64
  %1100 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1099
  %1101 = load double, ptr %1100, align 8, !tbaa !69
  %1102 = getelementptr inbounds %class.Vector, ptr %1100, i64 0, i32 1
  %1103 = load double, ptr %1102, align 8, !tbaa !68
  %1104 = getelementptr inbounds %class.Vector, ptr %1100, i64 0, i32 2
  %1105 = load double, ptr %1104, align 8, !tbaa !50
  %1106 = fsub double %1087, %1101
  %1107 = fmul double %1106, %1106
  %1108 = fsub double %1088, %1103
  %1109 = tail call double @llvm.fmuladd.f64(double %1108, double %1108, double %1107)
  %1110 = fsub double %713, %1105
  %1111 = tail call double @llvm.fmuladd.f64(double %1110, double %1110, double %1109)
  %1112 = fcmp ugt double %1111, %27
  br i1 %1112, label %1117, label %1113

1113:                                             ; preds = %1094
  %1114 = add nsw i32 %1096, 1
  %1115 = sext i32 %1096 to i64
  %1116 = getelementptr inbounds i16, ptr %286, i64 %1115
  store i16 %1098, ptr %1116, align 2, !tbaa !45
  br label %1117

1117:                                             ; preds = %1113, %1094
  %1118 = phi i32 [ %1114, %1113 ], [ %1096, %1094 ]
  %1119 = add nuw nsw i64 %1095, 1
  %1120 = icmp eq i64 %1119, %1086
  br i1 %1120, label %1089, label %1094

1121:                                             ; preds = %1092, %1138
  %1122 = phi i64 [ 0, %1092 ], [ %1141, %1138 ]
  %1123 = phi ptr [ %424, %1092 ], [ %1140, %1138 ]
  %1124 = getelementptr inbounds i16, ptr %286, i64 %1122
  %1125 = load i16, ptr %1124, align 2, !tbaa !45
  %1126 = zext i16 %1125 to i64
  %1127 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1126, i32 4
  %1128 = load i8, ptr %1127, align 1
  %1129 = and i8 %1128, 7
  store i16 %1125, ptr %1123, align 2, !tbaa !45
  %1130 = getelementptr inbounds i16, ptr %1123, i64 1
  %1131 = insertelement <2 x i16> poison, i16 %1125, i64 0
  %1132 = shufflevector <2 x i16> %1131, <2 x i16> poison, <2 x i32> zeroinitializer
  %1133 = add <2 x i16> %1132, <i16 1, i16 2>
  store <2 x i16> %1133, ptr %1130, align 2, !tbaa !45
  %1134 = icmp ult i8 %1129, 4
  br i1 %1134, label %1138, label %1135

1135:                                             ; preds = %1121
  %1136 = add <2 x i16> %1132, <i16 3, i16 4>
  %1137 = getelementptr inbounds i16, ptr %1123, i64 3
  store <2 x i16> %1136, ptr %1137, align 2, !tbaa !45
  br label %1138

1138:                                             ; preds = %1135, %1121
  %1139 = zext i8 %1129 to i64
  %1140 = getelementptr inbounds i16, ptr %1123, i64 %1139
  %1141 = add nuw nsw i64 %1122, 1
  %1142 = icmp eq i64 %1141, %1093
  br i1 %1142, label %1143, label %1121

1143:                                             ; preds = %1138
  %1144 = ptrtoint ptr %1140 to i64
  br label %1145

1145:                                             ; preds = %1143, %1089, %990
  %1146 = phi i64 [ %1144, %1143 ], [ %663, %1089 ], [ %663, %990 ]
  %1147 = sub i64 %1146, %663
  %1148 = lshr exact i64 %1147, 1
  %1149 = trunc i64 %1148 to i32
  %1150 = icmp eq i32 %1149, 0
  br i1 %1150, label %1151, label %1156

1151:                                             ; preds = %1145
  %1152 = load i8, ptr %977, align 1
  %1153 = and i8 %1152, 7
  %1154 = zext i8 %1153 to i32
  %1155 = add nsw i32 %683, %1154
  br label %2436

1156:                                             ; preds = %1145
  %1157 = shl i64 %1147, 31
  %1158 = add i64 %1157, -4294967296
  %1159 = ashr i64 %1158, 32
  %1160 = getelementptr inbounds i16, ptr %424, i64 %1159
  %1161 = load i16, ptr %1160, align 2, !tbaa !45
  %1162 = ashr i64 %1157, 32
  %1163 = getelementptr inbounds i16, ptr %424, i64 %1162
  store i16 %1161, ptr %1163, align 2, !tbaa !45
  br label %1164

1164:                                             ; preds = %1156, %972
  %1165 = phi i32 [ %1149, %1156 ], [ %687, %972 ]
  %1166 = icmp eq i32 %981, 0
  br i1 %1166, label %1171, label %1167

1167:                                             ; preds = %1164
  %1168 = load i32, ptr %694, align 4
  %1169 = and i32 %1168, 1073741824
  %1170 = icmp ne i32 %1169, 0
  br label %1171

1171:                                             ; preds = %1167, %1164
  %1172 = phi i1 [ false, %1164 ], [ %1170, %1167 ]
  %1173 = load i32, ptr %17, align 8, !tbaa !19
  %1174 = add nsw i32 %664, %1173
  %1175 = load i32, ptr %665, align 4, !tbaa !70
  %1176 = icmp sgt i32 %1175, %1174
  br i1 %1176, label %1192, label %1177

1177:                                             ; preds = %1171, %1177
  %1178 = phi i32 [ %1180, %1177 ], [ %1175, %1171 ]
  %1179 = ashr i32 %1178, 1
  %1180 = add nsw i32 %1179, %1178
  %1181 = icmp sgt i32 %1180, %1174
  br i1 %1181, label %1182, label %1177

1182:                                             ; preds = %1177
  %1183 = sext i32 %1180 to i64
  %1184 = icmp slt i32 %1180, 0
  %1185 = shl nsw i64 %1183, 1
  %1186 = select i1 %1184, i64 -1, i64 %1185
  %1187 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1186) #9
  %1188 = load ptr, ptr %12, align 8, !tbaa !47
  %1189 = sext i32 %1173 to i64
  %1190 = shl nsw i64 %1189, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1187, ptr align 2 %1188, i64 %1190, i1 false)
  %1191 = icmp eq ptr %1188, null
  br i1 %1191, label %1196, label %1194

1192:                                             ; preds = %1171
  %1193 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1198

1194:                                             ; preds = %1182
  tail call void @_ZdaPv(ptr noundef nonnull %1188) #10
  %1195 = load i32, ptr %17, align 8, !tbaa !19
  br label %1196

1196:                                             ; preds = %1194, %1182
  %1197 = phi i32 [ %1195, %1194 ], [ %1173, %1182 ]
  store ptr %1187, ptr %12, align 8, !tbaa !47
  store i32 %1180, ptr %665, align 4, !tbaa !70
  br label %1198

1198:                                             ; preds = %1192, %1196
  %1199 = phi i32 [ %1173, %1192 ], [ %1197, %1196 ]
  %1200 = phi ptr [ %1193, %1192 ], [ %1187, %1196 ]
  %1201 = ptrtoint ptr %1200 to i64
  %1202 = add nsw i32 %1199, 1
  %1203 = sext i32 %1202 to i64
  %1204 = getelementptr inbounds i16, ptr %1200, i64 %1203
  %1205 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1206 = icmp eq i32 %1205, 0
  br i1 %1206, label %1387, label %1207

1207:                                             ; preds = %1198
  %1208 = load i8, ptr %714, align 2, !tbaa !52
  %1209 = zext i8 %1208 to i32
  %1210 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1211 = icmp eq i32 %1210, 0
  br i1 %1211, label %1252, label %1212

1212:                                             ; preds = %1207
  %1213 = icmp eq i8 %1208, 1
  br i1 %1213, label %1214, label %1222

1214:                                             ; preds = %1212
  %1215 = icmp sgt i32 %1165, 0
  br i1 %1215, label %1216, label %1327

1216:                                             ; preds = %1214
  %1217 = zext i32 %1165 to i64
  %1218 = and i64 %1217, 1
  %1219 = icmp eq i32 %1165, 1
  br i1 %1219, label %1313, label %1220

1220:                                             ; preds = %1216
  %1221 = and i64 %1217, 4294967294
  br label %1224

1222:                                             ; preds = %1212
  %1223 = add nsw i32 %683, 1
  br label %2436

1224:                                             ; preds = %1247, %1220
  %1225 = phi i64 [ 0, %1220 ], [ %1249, %1247 ]
  %1226 = phi ptr [ %470, %1220 ], [ %1248, %1247 ]
  %1227 = phi i64 [ 0, %1220 ], [ %1250, %1247 ]
  %1228 = getelementptr inbounds i16, ptr %424, i64 %1225
  %1229 = load i16, ptr %1228, align 2, !tbaa !45
  %1230 = zext i16 %1229 to i64
  %1231 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1230, i32 3
  %1232 = load i8, ptr %1231, align 2, !tbaa !52
  %1233 = icmp eq i8 %1232, 1
  br i1 %1233, label %1234, label %1236

1234:                                             ; preds = %1224
  %1235 = getelementptr inbounds i16, ptr %1226, i64 1
  store i16 %1229, ptr %1226, align 2, !tbaa !45
  br label %1236

1236:                                             ; preds = %1234, %1224
  %1237 = phi ptr [ %1235, %1234 ], [ %1226, %1224 ]
  %1238 = or i64 %1225, 1
  %1239 = getelementptr inbounds i16, ptr %424, i64 %1238
  %1240 = load i16, ptr %1239, align 2, !tbaa !45
  %1241 = zext i16 %1240 to i64
  %1242 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1241, i32 3
  %1243 = load i8, ptr %1242, align 2, !tbaa !52
  %1244 = icmp eq i8 %1243, 1
  br i1 %1244, label %1245, label %1247

1245:                                             ; preds = %1236
  %1246 = getelementptr inbounds i16, ptr %1237, i64 1
  store i16 %1240, ptr %1237, align 2, !tbaa !45
  br label %1247

1247:                                             ; preds = %1245, %1236
  %1248 = phi ptr [ %1246, %1245 ], [ %1237, %1236 ]
  %1249 = add nuw nsw i64 %1225, 2
  %1250 = add i64 %1227, 2
  %1251 = icmp eq i64 %1250, %1221
  br i1 %1251, label %1313, label %1224

1252:                                             ; preds = %1207
  %1253 = add i8 %1208, -3
  %1254 = icmp ult i8 %1253, -2
  br i1 %1254, label %1263, label %1255

1255:                                             ; preds = %1252
  %1256 = icmp sgt i32 %1165, 0
  br i1 %1256, label %1257, label %1327

1257:                                             ; preds = %1255
  %1258 = zext i32 %1165 to i64
  %1259 = and i64 %1258, 1
  %1260 = icmp eq i32 %1165, 1
  br i1 %1260, label %1297, label %1261

1261:                                             ; preds = %1257
  %1262 = and i64 %1258, 4294967294
  br label %1265

1263:                                             ; preds = %1252
  %1264 = add nsw i32 %683, 1
  br label %2436

1265:                                             ; preds = %1292, %1261
  %1266 = phi i64 [ 0, %1261 ], [ %1294, %1292 ]
  %1267 = phi ptr [ %470, %1261 ], [ %1293, %1292 ]
  %1268 = phi i64 [ 0, %1261 ], [ %1295, %1292 ]
  %1269 = getelementptr inbounds i16, ptr %424, i64 %1266
  %1270 = load i16, ptr %1269, align 2, !tbaa !45
  %1271 = zext i16 %1270 to i64
  %1272 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1271, i32 3
  %1273 = load i8, ptr %1272, align 2, !tbaa !52
  %1274 = zext i8 %1273 to i32
  %1275 = add nuw nsw i32 %1274, %1209
  %1276 = icmp eq i32 %1275, 3
  br i1 %1276, label %1277, label %1279

1277:                                             ; preds = %1265
  %1278 = getelementptr inbounds i16, ptr %1267, i64 1
  store i16 %1270, ptr %1267, align 2, !tbaa !45
  br label %1279

1279:                                             ; preds = %1277, %1265
  %1280 = phi ptr [ %1278, %1277 ], [ %1267, %1265 ]
  %1281 = or i64 %1266, 1
  %1282 = getelementptr inbounds i16, ptr %424, i64 %1281
  %1283 = load i16, ptr %1282, align 2, !tbaa !45
  %1284 = zext i16 %1283 to i64
  %1285 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1284, i32 3
  %1286 = load i8, ptr %1285, align 2, !tbaa !52
  %1287 = zext i8 %1286 to i32
  %1288 = add nuw nsw i32 %1287, %1209
  %1289 = icmp eq i32 %1288, 3
  br i1 %1289, label %1290, label %1292

1290:                                             ; preds = %1279
  %1291 = getelementptr inbounds i16, ptr %1280, i64 1
  store i16 %1283, ptr %1280, align 2, !tbaa !45
  br label %1292

1292:                                             ; preds = %1290, %1279
  %1293 = phi ptr [ %1291, %1290 ], [ %1280, %1279 ]
  %1294 = add nuw nsw i64 %1266, 2
  %1295 = add i64 %1268, 2
  %1296 = icmp eq i64 %1295, %1262
  br i1 %1296, label %1297, label %1265

1297:                                             ; preds = %1292, %1257
  %1298 = phi ptr [ undef, %1257 ], [ %1293, %1292 ]
  %1299 = phi i64 [ 0, %1257 ], [ %1294, %1292 ]
  %1300 = phi ptr [ %470, %1257 ], [ %1293, %1292 ]
  %1301 = icmp eq i64 %1259, 0
  br i1 %1301, label %1327, label %1302

1302:                                             ; preds = %1297
  %1303 = getelementptr inbounds i16, ptr %424, i64 %1299
  %1304 = load i16, ptr %1303, align 2, !tbaa !45
  %1305 = zext i16 %1304 to i64
  %1306 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1305, i32 3
  %1307 = load i8, ptr %1306, align 2, !tbaa !52
  %1308 = zext i8 %1307 to i32
  %1309 = add nuw nsw i32 %1308, %1209
  %1310 = icmp eq i32 %1309, 3
  br i1 %1310, label %1311, label %1327

1311:                                             ; preds = %1302
  %1312 = getelementptr inbounds i16, ptr %1300, i64 1
  store i16 %1304, ptr %1300, align 2, !tbaa !45
  br label %1327

1313:                                             ; preds = %1247, %1216
  %1314 = phi ptr [ undef, %1216 ], [ %1248, %1247 ]
  %1315 = phi i64 [ 0, %1216 ], [ %1249, %1247 ]
  %1316 = phi ptr [ %470, %1216 ], [ %1248, %1247 ]
  %1317 = icmp eq i64 %1218, 0
  br i1 %1317, label %1327, label %1318

1318:                                             ; preds = %1313
  %1319 = getelementptr inbounds i16, ptr %424, i64 %1315
  %1320 = load i16, ptr %1319, align 2, !tbaa !45
  %1321 = zext i16 %1320 to i64
  %1322 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1321, i32 3
  %1323 = load i8, ptr %1322, align 2, !tbaa !52
  %1324 = icmp eq i8 %1323, 1
  br i1 %1324, label %1325, label %1327

1325:                                             ; preds = %1318
  %1326 = getelementptr inbounds i16, ptr %1316, i64 1
  store i16 %1320, ptr %1316, align 2, !tbaa !45
  br label %1327

1327:                                             ; preds = %1313, %1325, %1318, %1297, %1311, %1302, %1214, %1255
  %1328 = phi ptr [ %470, %1255 ], [ %470, %1214 ], [ %1298, %1297 ], [ %1312, %1311 ], [ %1300, %1302 ], [ %1314, %1313 ], [ %1326, %1325 ], [ %1316, %1318 ]
  %1329 = ptrtoint ptr %1328 to i64
  %1330 = sub i64 %1329, %666
  %1331 = lshr exact i64 %1330, 1
  %1332 = trunc i64 %1331 to i32
  %1333 = icmp sgt i32 %1332, 0
  br i1 %1333, label %1334, label %1596

1334:                                             ; preds = %1327
  %1335 = and i64 %1331, 4294967295
  %1336 = extractelement <2 x double> %710, i64 0
  %1337 = extractelement <2 x double> %710, i64 1
  br label %1338

1338:                                             ; preds = %1334, %1382
  %1339 = phi i64 [ 0, %1334 ], [ %1385, %1382 ]
  %1340 = phi ptr [ %470, %1334 ], [ %1384, %1382 ]
  %1341 = phi ptr [ %1204, %1334 ], [ %1383, %1382 ]
  %1342 = getelementptr inbounds i16, ptr %470, i64 %1339
  %1343 = load i16, ptr %1342, align 2, !tbaa !45
  %1344 = zext i16 %1343 to i64
  %1345 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1344
  %1346 = load double, ptr %1345, align 8, !tbaa !69
  %1347 = fsub double %1336, %1346
  %1348 = fmul double %1347, %1347
  %1349 = getelementptr inbounds %class.Vector, ptr %1345, i64 0, i32 1
  %1350 = load double, ptr %1349, align 8, !tbaa !68
  %1351 = fsub double %1337, %1350
  %1352 = tail call double @llvm.fmuladd.f64(double %1351, double %1351, double %1348)
  %1353 = getelementptr inbounds %class.Vector, ptr %1345, i64 0, i32 2
  %1354 = load double, ptr %1353, align 8, !tbaa !50
  %1355 = fsub double %713, %1354
  %1356 = tail call double @llvm.fmuladd.f64(double %1355, double %1355, double %1352)
  br i1 %1172, label %1357, label %1364

1357:                                             ; preds = %1338
  %1358 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1344
  %1359 = load i32, ptr %1358, align 4
  %1360 = and i32 %1359, 1073741824
  %1361 = icmp ne i32 %1360, 0
  %1362 = fcmp ugt double %1356, %24
  %1363 = select i1 %1361, i1 true, i1 %1362
  br i1 %1363, label %1382, label %1369

1364:                                             ; preds = %1338
  %1365 = fcmp ugt double %1356, %24
  br i1 %1365, label %1382, label %1366

1366:                                             ; preds = %1364
  %1367 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1344
  %1368 = load i32, ptr %1367, align 4
  br label %1369

1369:                                             ; preds = %1366, %1357
  %1370 = phi i32 [ %1368, %1366 ], [ %1359, %1357 ]
  %1371 = shl i32 %1370, 2
  %1372 = ashr exact i32 %1371, 2
  %1373 = icmp slt i32 %1372, %736
  %1374 = icmp sgt i32 %1372, %738
  %1375 = select i1 %1373, i1 true, i1 %1374
  %1376 = select i1 %1375, ptr %1341, ptr %1340
  %1377 = zext i1 %1375 to i64
  %1378 = getelementptr inbounds i16, ptr %1341, i64 %1377
  %1379 = xor i1 %1375, true
  %1380 = zext i1 %1379 to i64
  %1381 = getelementptr inbounds i16, ptr %1340, i64 %1380
  store i16 %1343, ptr %1376, align 2, !tbaa !45
  br label %1382

1382:                                             ; preds = %1369, %1364, %1357
  %1383 = phi ptr [ %1341, %1357 ], [ %1341, %1364 ], [ %1378, %1369 ]
  %1384 = phi ptr [ %1340, %1357 ], [ %1340, %1364 ], [ %1381, %1369 ]
  %1385 = add nuw nsw i64 %1339, 1
  %1386 = icmp eq i64 %1385, %1335
  br i1 %1386, label %1596, label %1338

1387:                                             ; preds = %1198
  %1388 = icmp sgt i32 %1165, 0
  br i1 %1172, label %1389, label %1436

1389:                                             ; preds = %1387
  br i1 %1388, label %1390, label %1596

1390:                                             ; preds = %1389
  %1391 = zext i32 %1165 to i64
  %1392 = extractelement <2 x double> %710, i64 0
  %1393 = extractelement <2 x double> %710, i64 1
  br label %1394

1394:                                             ; preds = %1390, %1431
  %1395 = phi i64 [ 0, %1390 ], [ %1434, %1431 ]
  %1396 = phi ptr [ %470, %1390 ], [ %1433, %1431 ]
  %1397 = phi ptr [ %1204, %1390 ], [ %1432, %1431 ]
  %1398 = getelementptr inbounds i16, ptr %424, i64 %1395
  %1399 = load i16, ptr %1398, align 2, !tbaa !45
  %1400 = zext i16 %1399 to i64
  %1401 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1400
  %1402 = load i32, ptr %1401, align 4
  %1403 = and i32 %1402, 1073741824
  %1404 = icmp eq i32 %1403, 0
  br i1 %1404, label %1405, label %1431

1405:                                             ; preds = %1394
  %1406 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1400
  %1407 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 2
  %1408 = load double, ptr %1407, align 8, !tbaa !50
  %1409 = fsub double %713, %1408
  %1410 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 1
  %1411 = load double, ptr %1410, align 8, !tbaa !68
  %1412 = fsub double %1393, %1411
  %1413 = load double, ptr %1406, align 8, !tbaa !69
  %1414 = fsub double %1392, %1413
  %1415 = fmul double %1414, %1414
  %1416 = tail call double @llvm.fmuladd.f64(double %1412, double %1412, double %1415)
  %1417 = tail call double @llvm.fmuladd.f64(double %1409, double %1409, double %1416)
  %1418 = fcmp ugt double %1417, %24
  br i1 %1418, label %1431, label %1419

1419:                                             ; preds = %1405
  %1420 = shl i32 %1402, 2
  %1421 = ashr exact i32 %1420, 2
  %1422 = icmp slt i32 %1421, %736
  %1423 = icmp sgt i32 %1421, %738
  %1424 = select i1 %1422, i1 true, i1 %1423
  %1425 = select i1 %1424, ptr %1397, ptr %1396
  %1426 = zext i1 %1424 to i64
  %1427 = getelementptr inbounds i16, ptr %1397, i64 %1426
  %1428 = xor i1 %1424, true
  %1429 = zext i1 %1428 to i64
  %1430 = getelementptr inbounds i16, ptr %1396, i64 %1429
  store i16 %1399, ptr %1425, align 2, !tbaa !45
  br label %1431

1431:                                             ; preds = %1419, %1405, %1394
  %1432 = phi ptr [ %1397, %1394 ], [ %1397, %1405 ], [ %1427, %1419 ]
  %1433 = phi ptr [ %1396, %1394 ], [ %1396, %1405 ], [ %1430, %1419 ]
  %1434 = add nuw nsw i64 %1395, 1
  %1435 = icmp eq i64 %1434, %1391
  br i1 %1435, label %1596, label %1394

1436:                                             ; preds = %1387
  br i1 %1388, label %1437, label %1596

1437:                                             ; preds = %1436
  %1438 = icmp ugt i32 %1165, 6
  br i1 %1438, label %1439, label %1547

1439:                                             ; preds = %1437
  %1440 = add nsw i32 %1165, -2
  %1441 = load i16, ptr %424, align 2, !tbaa !45
  %1442 = zext i16 %1441 to i64
  %1443 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1442
  %1444 = load i32, ptr %1443, align 4
  %1445 = load i16, ptr %667, align 2, !tbaa !45
  %1446 = zext i16 %1445 to i64
  %1447 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1446
  %1448 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 2
  %1449 = load double, ptr %1448, align 8, !tbaa !50
  %1450 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1442
  %1451 = getelementptr inbounds %class.Vector, ptr %1450, i64 0, i32 2
  %1452 = load double, ptr %1451, align 8, !tbaa !50
  %1453 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 1
  %1454 = load double, ptr %1453, align 8, !tbaa !68
  %1455 = getelementptr inbounds %class.Vector, ptr %1450, i64 0, i32 1
  %1456 = load double, ptr %1455, align 8, !tbaa !68
  %1457 = load double, ptr %1447, align 8, !tbaa !69
  %1458 = load double, ptr %1450, align 8, !tbaa !69
  %1459 = zext i32 %1440 to i64
  %1460 = extractelement <2 x double> %710, i64 0
  %1461 = extractelement <2 x double> %710, i64 1
  br label %1462

1462:                                             ; preds = %1439, %1540
  %1463 = phi i64 [ 2, %1439 ], [ %1543, %1540 ]
  %1464 = phi i64 [ %1446, %1439 ], [ %1500, %1540 ]
  %1465 = phi i32 [ %1444, %1439 ], [ %1528, %1540 ]
  %1466 = phi ptr [ %470, %1439 ], [ %1542, %1540 ]
  %1467 = phi ptr [ %1204, %1439 ], [ %1541, %1540 ]
  %1468 = phi i16 [ %1441, %1439 ], [ %1493, %1540 ]
  %1469 = phi i16 [ %1445, %1439 ], [ %1496, %1540 ]
  %1470 = phi double [ %1458, %1439 ], [ %1499, %1540 ]
  %1471 = phi double [ %1457, %1439 ], [ %1502, %1540 ]
  %1472 = phi double [ %1456, %1439 ], [ %1504, %1540 ]
  %1473 = phi double [ %1454, %1439 ], [ %1506, %1540 ]
  %1474 = phi double [ %1452, %1439 ], [ %1508, %1540 ]
  %1475 = phi double [ %1449, %1439 ], [ %1510, %1540 ]
  %1476 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1464
  %1477 = load i32, ptr %1476, align 4
  %1478 = shl i32 %1477, 2
  %1479 = ashr exact i32 %1478, 2
  %1480 = fsub double %1460, %1470
  %1481 = fsub double %1460, %1471
  %1482 = fmul double %1480, %1480
  %1483 = fmul double %1481, %1481
  %1484 = fsub double %1461, %1472
  %1485 = fsub double %1461, %1473
  %1486 = tail call double @llvm.fmuladd.f64(double %1484, double %1484, double %1482)
  %1487 = tail call double @llvm.fmuladd.f64(double %1485, double %1485, double %1483)
  %1488 = fsub double %713, %1474
  %1489 = fsub double %713, %1475
  %1490 = tail call double @llvm.fmuladd.f64(double %1488, double %1488, double %1486)
  %1491 = tail call double @llvm.fmuladd.f64(double %1489, double %1489, double %1487)
  %1492 = getelementptr inbounds i16, ptr %424, i64 %1463
  %1493 = load i16, ptr %1492, align 2, !tbaa !45
  %1494 = or i64 %1463, 1
  %1495 = getelementptr inbounds i16, ptr %424, i64 %1494
  %1496 = load i16, ptr %1495, align 2, !tbaa !45
  %1497 = zext i16 %1493 to i64
  %1498 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1497
  %1499 = load double, ptr %1498, align 8, !tbaa !69
  %1500 = zext i16 %1496 to i64
  %1501 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1500
  %1502 = load double, ptr %1501, align 8, !tbaa !69
  %1503 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 1
  %1504 = load double, ptr %1503, align 8, !tbaa !68
  %1505 = getelementptr inbounds %class.Vector, ptr %1501, i64 0, i32 1
  %1506 = load double, ptr %1505, align 8, !tbaa !68
  %1507 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 2
  %1508 = load double, ptr %1507, align 8, !tbaa !50
  %1509 = getelementptr inbounds %class.Vector, ptr %1501, i64 0, i32 2
  %1510 = load double, ptr %1509, align 8, !tbaa !50
  %1511 = fcmp ugt double %1490, %24
  br i1 %1511, label %1524, label %1512

1512:                                             ; preds = %1462
  %1513 = shl i32 %1465, 2
  %1514 = ashr exact i32 %1513, 2
  %1515 = icmp slt i32 %1514, %736
  %1516 = icmp sgt i32 %1514, %738
  %1517 = select i1 %1515, i1 true, i1 %1516
  %1518 = select i1 %1517, ptr %1467, ptr %1466
  %1519 = zext i1 %1517 to i64
  %1520 = getelementptr inbounds i16, ptr %1467, i64 %1519
  %1521 = xor i1 %1517, true
  %1522 = zext i1 %1521 to i64
  %1523 = getelementptr inbounds i16, ptr %1466, i64 %1522
  store i16 %1468, ptr %1518, align 2, !tbaa !45
  br label %1524

1524:                                             ; preds = %1512, %1462
  %1525 = phi ptr [ %1467, %1462 ], [ %1520, %1512 ]
  %1526 = phi ptr [ %1466, %1462 ], [ %1523, %1512 ]
  %1527 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1497
  %1528 = load i32, ptr %1527, align 4
  %1529 = fcmp ugt double %1491, %24
  br i1 %1529, label %1540, label %1530

1530:                                             ; preds = %1524
  %1531 = icmp slt i32 %1479, %736
  %1532 = icmp sgt i32 %1479, %738
  %1533 = select i1 %1531, i1 true, i1 %1532
  %1534 = select i1 %1533, ptr %1525, ptr %1526
  %1535 = zext i1 %1533 to i64
  %1536 = getelementptr inbounds i16, ptr %1525, i64 %1535
  %1537 = xor i1 %1533, true
  %1538 = zext i1 %1537 to i64
  %1539 = getelementptr inbounds i16, ptr %1526, i64 %1538
  store i16 %1469, ptr %1534, align 2, !tbaa !45
  br label %1540

1540:                                             ; preds = %1530, %1524
  %1541 = phi ptr [ %1525, %1524 ], [ %1536, %1530 ]
  %1542 = phi ptr [ %1526, %1524 ], [ %1539, %1530 ]
  %1543 = add nuw nsw i64 %1463, 2
  %1544 = icmp ult i64 %1543, %1459
  br i1 %1544, label %1462, label %1545

1545:                                             ; preds = %1540
  %1546 = trunc i64 %1463 to i32
  br label %1547

1547:                                             ; preds = %1545, %1437
  %1548 = phi i32 [ %1546, %1545 ], [ 0, %1437 ]
  %1549 = phi ptr [ %1541, %1545 ], [ %1204, %1437 ]
  %1550 = phi ptr [ %1542, %1545 ], [ %470, %1437 ]
  %1551 = icmp slt i32 %1548, %1165
  br i1 %1551, label %1552, label %1596

1552:                                             ; preds = %1547
  %1553 = zext i32 %1548 to i64
  %1554 = zext i32 %1165 to i64
  %1555 = extractelement <2 x double> %710, i64 0
  %1556 = extractelement <2 x double> %710, i64 1
  br label %1557

1557:                                             ; preds = %1552, %1591
  %1558 = phi i64 [ %1553, %1552 ], [ %1594, %1591 ]
  %1559 = phi ptr [ %1550, %1552 ], [ %1593, %1591 ]
  %1560 = phi ptr [ %1549, %1552 ], [ %1592, %1591 ]
  %1561 = getelementptr inbounds i16, ptr %424, i64 %1558
  %1562 = load i16, ptr %1561, align 2, !tbaa !45
  %1563 = zext i16 %1562 to i64
  %1564 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1563
  %1565 = load double, ptr %1564, align 8, !tbaa !69
  %1566 = getelementptr inbounds %class.Vector, ptr %1564, i64 0, i32 1
  %1567 = load double, ptr %1566, align 8, !tbaa !68
  %1568 = getelementptr inbounds %class.Vector, ptr %1564, i64 0, i32 2
  %1569 = load double, ptr %1568, align 8, !tbaa !50
  %1570 = fsub double %1555, %1565
  %1571 = fmul double %1570, %1570
  %1572 = fsub double %1556, %1567
  %1573 = tail call double @llvm.fmuladd.f64(double %1572, double %1572, double %1571)
  %1574 = fsub double %713, %1569
  %1575 = tail call double @llvm.fmuladd.f64(double %1574, double %1574, double %1573)
  %1576 = fcmp ugt double %1575, %24
  br i1 %1576, label %1591, label %1577

1577:                                             ; preds = %1557
  %1578 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1563
  %1579 = load i32, ptr %1578, align 4
  %1580 = shl i32 %1579, 2
  %1581 = ashr exact i32 %1580, 2
  %1582 = icmp slt i32 %1581, %736
  %1583 = icmp sgt i32 %1581, %738
  %1584 = select i1 %1582, i1 true, i1 %1583
  %1585 = select i1 %1584, ptr %1560, ptr %1559
  %1586 = zext i1 %1584 to i64
  %1587 = getelementptr inbounds i16, ptr %1560, i64 %1586
  %1588 = xor i1 %1584, true
  %1589 = zext i1 %1588 to i64
  %1590 = getelementptr inbounds i16, ptr %1559, i64 %1589
  store i16 %1562, ptr %1585, align 2, !tbaa !45
  br label %1591

1591:                                             ; preds = %1577, %1557
  %1592 = phi ptr [ %1560, %1557 ], [ %1587, %1577 ]
  %1593 = phi ptr [ %1559, %1557 ], [ %1590, %1577 ]
  %1594 = add nuw nsw i64 %1558, 1
  %1595 = icmp eq i64 %1594, %1554
  br i1 %1595, label %1596, label %1557

1596:                                             ; preds = %1382, %1591, %1431, %1327, %1547, %1389, %1436
  %1597 = phi ptr [ %1204, %1436 ], [ %1204, %1389 ], [ %1549, %1547 ], [ %1204, %1327 ], [ %1432, %1431 ], [ %1592, %1591 ], [ %1383, %1382 ]
  %1598 = phi ptr [ %470, %1436 ], [ %470, %1389 ], [ %1550, %1547 ], [ %470, %1327 ], [ %1433, %1431 ], [ %1593, %1591 ], [ %1384, %1382 ]
  %1599 = icmp eq ptr %1597, %1204
  %1600 = icmp eq ptr %1598, %470
  %1601 = select i1 %1599, i1 %1600, i1 false
  br i1 %1601, label %1602, label %1604

1602:                                             ; preds = %1596
  %1603 = add nsw i32 %683, 1
  br label %2436

1604:                                             ; preds = %1596
  %1605 = trunc i32 %683 to i16
  %1606 = load i32, ptr %17, align 8, !tbaa !19
  %1607 = add nsw i32 %1606, -1
  %1608 = sext i32 %1607 to i64
  %1609 = getelementptr inbounds i16, ptr %1200, i64 %1608
  store i16 %1605, ptr %1609, align 2, !tbaa !45
  %1610 = ptrtoint ptr %1598 to i64
  %1611 = sub i64 %1610, %666
  %1612 = lshr exact i64 %1611, 1
  %1613 = trunc i64 %1612 to i32
  %1614 = icmp sgt i32 %1613, 0
  br i1 %1614, label %1615, label %1715

1615:                                             ; preds = %1604
  %1616 = and i64 %1612, 4294967295
  %1617 = and i64 %1612, 1
  %1618 = icmp eq i64 %1616, 1
  br i1 %1618, label %1683, label %1619

1619:                                             ; preds = %1615
  %1620 = sub nsw i64 %1616, %1617
  br label %1621

1621:                                             ; preds = %1676, %1619
  %1622 = phi i64 [ 0, %1619 ], [ %1680, %1676 ]
  %1623 = phi ptr [ %1597, %1619 ], [ %1679, %1676 ]
  %1624 = phi ptr [ %332, %1619 ], [ %1678, %1676 ]
  %1625 = phi ptr [ %378, %1619 ], [ %1677, %1676 ]
  %1626 = phi i64 [ 0, %1619 ], [ %1681, %1676 ]
  %1627 = getelementptr inbounds i16, ptr %470, i64 %1622
  %1628 = load i16, ptr %1627, align 2, !tbaa !45
  %1629 = zext i16 %1628 to i64
  %1630 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1629
  %1631 = load i32, ptr %1630, align 4
  %1632 = shl i32 %1631, 2
  %1633 = ashr exact i32 %1632, 2
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i8, ptr %973, i64 %1634
  %1636 = load i8, ptr %1635, align 1, !tbaa !59
  %1637 = sext i8 %1636 to i32
  switch i32 %1637, label %1649 [
    i32 0, label %1638
    i32 1, label %1640
    i32 2, label %1642
  ]

1638:                                             ; preds = %1621
  %1639 = getelementptr inbounds i16, ptr %1623, i64 1
  br label %1644

1640:                                             ; preds = %1621
  %1641 = getelementptr inbounds i16, ptr %1624, i64 1
  br label %1644

1642:                                             ; preds = %1621
  %1643 = getelementptr inbounds i16, ptr %1625, i64 1
  br label %1644

1644:                                             ; preds = %1638, %1640, %1642
  %1645 = phi ptr [ %1625, %1642 ], [ %1624, %1640 ], [ %1623, %1638 ]
  %1646 = phi ptr [ %1643, %1642 ], [ %1625, %1640 ], [ %1625, %1638 ]
  %1647 = phi ptr [ %1624, %1642 ], [ %1641, %1640 ], [ %1624, %1638 ]
  %1648 = phi ptr [ %1623, %1642 ], [ %1623, %1640 ], [ %1639, %1638 ]
  store i16 %1628, ptr %1645, align 2, !tbaa !45
  br label %1649

1649:                                             ; preds = %1644, %1621
  %1650 = phi ptr [ %1625, %1621 ], [ %1646, %1644 ]
  %1651 = phi ptr [ %1624, %1621 ], [ %1647, %1644 ]
  %1652 = phi ptr [ %1623, %1621 ], [ %1648, %1644 ]
  %1653 = or i64 %1622, 1
  %1654 = getelementptr inbounds i16, ptr %470, i64 %1653
  %1655 = load i16, ptr %1654, align 2, !tbaa !45
  %1656 = zext i16 %1655 to i64
  %1657 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1656
  %1658 = load i32, ptr %1657, align 4
  %1659 = shl i32 %1658, 2
  %1660 = ashr exact i32 %1659, 2
  %1661 = sext i32 %1660 to i64
  %1662 = getelementptr inbounds i8, ptr %973, i64 %1661
  %1663 = load i8, ptr %1662, align 1, !tbaa !59
  %1664 = sext i8 %1663 to i32
  switch i32 %1664, label %1676 [
    i32 0, label %1669
    i32 1, label %1667
    i32 2, label %1665
  ]

1665:                                             ; preds = %1649
  %1666 = getelementptr inbounds i16, ptr %1650, i64 1
  br label %1671

1667:                                             ; preds = %1649
  %1668 = getelementptr inbounds i16, ptr %1651, i64 1
  br label %1671

1669:                                             ; preds = %1649
  %1670 = getelementptr inbounds i16, ptr %1652, i64 1
  br label %1671

1671:                                             ; preds = %1669, %1667, %1665
  %1672 = phi ptr [ %1650, %1665 ], [ %1651, %1667 ], [ %1652, %1669 ]
  %1673 = phi ptr [ %1666, %1665 ], [ %1650, %1667 ], [ %1650, %1669 ]
  %1674 = phi ptr [ %1651, %1665 ], [ %1668, %1667 ], [ %1651, %1669 ]
  %1675 = phi ptr [ %1652, %1665 ], [ %1652, %1667 ], [ %1670, %1669 ]
  store i16 %1655, ptr %1672, align 2, !tbaa !45
  br label %1676

1676:                                             ; preds = %1671, %1649
  %1677 = phi ptr [ %1650, %1649 ], [ %1673, %1671 ]
  %1678 = phi ptr [ %1651, %1649 ], [ %1674, %1671 ]
  %1679 = phi ptr [ %1652, %1649 ], [ %1675, %1671 ]
  %1680 = add nuw nsw i64 %1622, 2
  %1681 = add i64 %1626, 2
  %1682 = icmp eq i64 %1681, %1620
  br i1 %1682, label %1683, label %1621

1683:                                             ; preds = %1676, %1615
  %1684 = phi ptr [ undef, %1615 ], [ %1677, %1676 ]
  %1685 = phi ptr [ undef, %1615 ], [ %1678, %1676 ]
  %1686 = phi ptr [ undef, %1615 ], [ %1679, %1676 ]
  %1687 = phi i64 [ 0, %1615 ], [ %1680, %1676 ]
  %1688 = phi ptr [ %1597, %1615 ], [ %1679, %1676 ]
  %1689 = phi ptr [ %332, %1615 ], [ %1678, %1676 ]
  %1690 = phi ptr [ %378, %1615 ], [ %1677, %1676 ]
  %1691 = icmp eq i64 %1617, 0
  br i1 %1691, label %1715, label %1692

1692:                                             ; preds = %1683
  %1693 = getelementptr inbounds i16, ptr %470, i64 %1687
  %1694 = load i16, ptr %1693, align 2, !tbaa !45
  %1695 = zext i16 %1694 to i64
  %1696 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1695
  %1697 = load i32, ptr %1696, align 4
  %1698 = shl i32 %1697, 2
  %1699 = ashr exact i32 %1698, 2
  %1700 = sext i32 %1699 to i64
  %1701 = getelementptr inbounds i8, ptr %973, i64 %1700
  %1702 = load i8, ptr %1701, align 1, !tbaa !59
  %1703 = sext i8 %1702 to i32
  switch i32 %1703, label %1715 [
    i32 0, label %1708
    i32 1, label %1706
    i32 2, label %1704
  ]

1704:                                             ; preds = %1692
  %1705 = getelementptr inbounds i16, ptr %1690, i64 1
  br label %1710

1706:                                             ; preds = %1692
  %1707 = getelementptr inbounds i16, ptr %1689, i64 1
  br label %1710

1708:                                             ; preds = %1692
  %1709 = getelementptr inbounds i16, ptr %1688, i64 1
  br label %1710

1710:                                             ; preds = %1708, %1706, %1704
  %1711 = phi ptr [ %1690, %1704 ], [ %1689, %1706 ], [ %1688, %1708 ]
  %1712 = phi ptr [ %1705, %1704 ], [ %1690, %1706 ], [ %1690, %1708 ]
  %1713 = phi ptr [ %1689, %1704 ], [ %1707, %1706 ], [ %1689, %1708 ]
  %1714 = phi ptr [ %1688, %1704 ], [ %1688, %1706 ], [ %1709, %1708 ]
  store i16 %1694, ptr %1711, align 2, !tbaa !45
  br label %1715

1715:                                             ; preds = %1683, %1710, %1692, %1604
  %1716 = phi ptr [ %378, %1604 ], [ %1684, %1683 ], [ %1690, %1692 ], [ %1712, %1710 ]
  %1717 = phi ptr [ %332, %1604 ], [ %1685, %1683 ], [ %1689, %1692 ], [ %1713, %1710 ]
  %1718 = phi ptr [ %1597, %1604 ], [ %1686, %1683 ], [ %1688, %1692 ], [ %1714, %1710 ]
  %1719 = ptrtoint ptr %1718 to i64
  %1720 = ptrtoint ptr %1204 to i64
  %1721 = sub i64 %1719, %1720
  %1722 = lshr exact i64 %1721, 1
  %1723 = trunc i64 %1722 to i32
  %1724 = icmp eq i32 %1723, 0
  %1725 = shl i64 %1721, 31
  br i1 %1724, label %1731, label %1726

1726:                                             ; preds = %1715
  %1727 = add i64 %1725, -4294967296
  %1728 = ashr i64 %1727, 32
  %1729 = getelementptr inbounds i16, ptr %1204, i64 %1728
  %1730 = load i16, ptr %1729, align 2, !tbaa !45
  br label %1731

1731:                                             ; preds = %1715, %1726
  %1732 = phi i16 [ %1730, %1726 ], [ -1, %1715 ]
  %1733 = ashr i64 %1725, 32
  %1734 = getelementptr inbounds i16, ptr %1204, i64 %1733
  store i16 %1732, ptr %1734, align 2, !tbaa !45
  %1735 = trunc i64 %1722 to i16
  %1736 = add i16 %1735, 1
  %1737 = sext i32 %1606 to i64
  %1738 = getelementptr inbounds i16, ptr %1200, i64 %1737
  store i16 %1736, ptr %1738, align 2, !tbaa !45
  %1739 = add i32 %1606, 2
  %1740 = add i32 %1739, %1723
  %1741 = ptrtoint ptr %1717 to i64
  %1742 = sub i64 %1741, %668
  %1743 = lshr exact i64 %1742, 1
  %1744 = trunc i64 %1743 to i32
  %1745 = add nsw i32 %1740, 1
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr i16, ptr %1200, i64 %1746
  %1748 = icmp sgt i32 %1744, 0
  br i1 %1748, label %1749, label %1839

1749:                                             ; preds = %1731
  %1750 = and i64 %1743, 4294967295
  %1751 = icmp ult i64 %1750, 8
  br i1 %1751, label %1795, label %1752

1752:                                             ; preds = %1749
  %1753 = shl nsw i64 %1746, 1
  %1754 = add i64 %1753, %1201
  %1755 = sub i64 %1754, %668
  %1756 = icmp ult i64 %1755, 128
  br i1 %1756, label %1795, label %1757

1757:                                             ; preds = %1752
  %1758 = icmp ult i64 %1750, 64
  br i1 %1758, label %1782, label %1759

1759:                                             ; preds = %1757
  %1760 = and i64 %1743, 63
  %1761 = sub nsw i64 %1750, %1760
  br label %1762

1762:                                             ; preds = %1762, %1759
  %1763 = phi i64 [ 0, %1759 ], [ %1776, %1762 ]
  %1764 = getelementptr inbounds i16, ptr %332, i64 %1763
  %1765 = load <16 x i16>, ptr %1764, align 2, !tbaa !45
  %1766 = getelementptr inbounds i16, ptr %1764, i64 16
  %1767 = load <16 x i16>, ptr %1766, align 2, !tbaa !45
  %1768 = getelementptr inbounds i16, ptr %1764, i64 32
  %1769 = load <16 x i16>, ptr %1768, align 2, !tbaa !45
  %1770 = getelementptr inbounds i16, ptr %1764, i64 48
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !45
  %1772 = getelementptr inbounds i16, ptr %1747, i64 %1763
  store <16 x i16> %1765, ptr %1772, align 2, !tbaa !45
  %1773 = getelementptr inbounds i16, ptr %1772, i64 16
  store <16 x i16> %1767, ptr %1773, align 2, !tbaa !45
  %1774 = getelementptr inbounds i16, ptr %1772, i64 32
  store <16 x i16> %1769, ptr %1774, align 2, !tbaa !45
  %1775 = getelementptr inbounds i16, ptr %1772, i64 48
  store <16 x i16> %1771, ptr %1775, align 2, !tbaa !45
  %1776 = add nuw i64 %1763, 64
  %1777 = icmp eq i64 %1776, %1761
  br i1 %1777, label %1778, label %1762, !llvm.loop !71

1778:                                             ; preds = %1762
  %1779 = icmp eq i64 %1760, 0
  br i1 %1779, label %1833, label %1780

1780:                                             ; preds = %1778
  %1781 = icmp ult i64 %1760, 8
  br i1 %1781, label %1795, label %1782

1782:                                             ; preds = %1757, %1780
  %1783 = phi i64 [ %1761, %1780 ], [ 0, %1757 ]
  %1784 = and i64 %1743, 7
  %1785 = sub nsw i64 %1750, %1784
  br label %1786

1786:                                             ; preds = %1786, %1782
  %1787 = phi i64 [ %1783, %1782 ], [ %1791, %1786 ]
  %1788 = getelementptr inbounds i16, ptr %332, i64 %1787
  %1789 = load <8 x i16>, ptr %1788, align 2, !tbaa !45
  %1790 = getelementptr inbounds i16, ptr %1747, i64 %1787
  store <8 x i16> %1789, ptr %1790, align 2, !tbaa !45
  %1791 = add nuw i64 %1787, 8
  %1792 = icmp eq i64 %1791, %1785
  br i1 %1792, label %1793, label %1786, !llvm.loop !74

1793:                                             ; preds = %1786
  %1794 = icmp eq i64 %1784, 0
  br i1 %1794, label %1833, label %1795

1795:                                             ; preds = %1752, %1749, %1780, %1793
  %1796 = phi i64 [ 0, %1749 ], [ 0, %1752 ], [ %1761, %1780 ], [ %1785, %1793 ]
  %1797 = sub i64 %1743, %1796
  %1798 = xor i64 %1796, -1
  %1799 = add nsw i64 %1750, %1798
  %1800 = and i64 %1797, 3
  %1801 = icmp eq i64 %1800, 0
  br i1 %1801, label %1811, label %1802

1802:                                             ; preds = %1795, %1802
  %1803 = phi i64 [ %1808, %1802 ], [ %1796, %1795 ]
  %1804 = phi i64 [ %1809, %1802 ], [ 0, %1795 ]
  %1805 = getelementptr inbounds i16, ptr %332, i64 %1803
  %1806 = load i16, ptr %1805, align 2, !tbaa !45
  %1807 = getelementptr inbounds i16, ptr %1747, i64 %1803
  store i16 %1806, ptr %1807, align 2, !tbaa !45
  %1808 = add nuw nsw i64 %1803, 1
  %1809 = add i64 %1804, 1
  %1810 = icmp eq i64 %1809, %1800
  br i1 %1810, label %1811, label %1802, !llvm.loop !75

1811:                                             ; preds = %1802, %1795
  %1812 = phi i64 [ %1796, %1795 ], [ %1808, %1802 ]
  %1813 = icmp ult i64 %1799, 3
  br i1 %1813, label %1833, label %1814

1814:                                             ; preds = %1811, %1814
  %1815 = phi i64 [ %1831, %1814 ], [ %1812, %1811 ]
  %1816 = getelementptr inbounds i16, ptr %332, i64 %1815
  %1817 = load i16, ptr %1816, align 2, !tbaa !45
  %1818 = getelementptr inbounds i16, ptr %1747, i64 %1815
  store i16 %1817, ptr %1818, align 2, !tbaa !45
  %1819 = add nuw nsw i64 %1815, 1
  %1820 = getelementptr inbounds i16, ptr %332, i64 %1819
  %1821 = load i16, ptr %1820, align 2, !tbaa !45
  %1822 = getelementptr inbounds i16, ptr %1747, i64 %1819
  store i16 %1821, ptr %1822, align 2, !tbaa !45
  %1823 = add nuw nsw i64 %1815, 2
  %1824 = getelementptr inbounds i16, ptr %332, i64 %1823
  %1825 = load i16, ptr %1824, align 2, !tbaa !45
  %1826 = getelementptr inbounds i16, ptr %1747, i64 %1823
  store i16 %1825, ptr %1826, align 2, !tbaa !45
  %1827 = add nuw nsw i64 %1815, 3
  %1828 = getelementptr inbounds i16, ptr %332, i64 %1827
  %1829 = load i16, ptr %1828, align 2, !tbaa !45
  %1830 = getelementptr inbounds i16, ptr %1747, i64 %1827
  store i16 %1829, ptr %1830, align 2, !tbaa !45
  %1831 = add nuw nsw i64 %1815, 4
  %1832 = icmp eq i64 %1831, %1750
  br i1 %1832, label %1833, label %1814, !llvm.loop !76

1833:                                             ; preds = %1811, %1814, %1778, %1793
  %1834 = shl i64 %1742, 31
  %1835 = add i64 %1834, -4294967296
  %1836 = ashr i64 %1835, 32
  %1837 = getelementptr inbounds i16, ptr %1747, i64 %1836
  %1838 = load i16, ptr %1837, align 2, !tbaa !45
  br label %1839

1839:                                             ; preds = %1731, %1833
  %1840 = phi i64 [ %1743, %1833 ], [ 0, %1731 ]
  %1841 = phi i16 [ %1838, %1833 ], [ -1, %1731 ]
  %1842 = and i64 %1840, 4294967295
  %1843 = getelementptr inbounds i16, ptr %1747, i64 %1842
  store i16 %1841, ptr %1843, align 2, !tbaa !45
  %1844 = trunc i64 %1743 to i16
  %1845 = add i16 %1844, 1
  %1846 = sext i32 %1740 to i64
  %1847 = getelementptr inbounds i16, ptr %1200, i64 %1846
  store i16 %1845, ptr %1847, align 2, !tbaa !45
  %1848 = add nsw i32 %1744, 2
  %1849 = add nsw i32 %1848, %1740
  %1850 = ptrtoint ptr %1716 to i64
  %1851 = sub i64 %1850, %669
  %1852 = lshr exact i64 %1851, 1
  %1853 = trunc i64 %1852 to i32
  %1854 = add nsw i32 %1849, 1
  %1855 = sext i32 %1854 to i64
  %1856 = getelementptr i16, ptr %1200, i64 %1855
  %1857 = icmp sgt i32 %1853, 0
  br i1 %1857, label %1858, label %1948

1858:                                             ; preds = %1839
  %1859 = and i64 %1852, 4294967295
  %1860 = icmp ult i64 %1859, 8
  br i1 %1860, label %1904, label %1861

1861:                                             ; preds = %1858
  %1862 = shl nsw i64 %1855, 1
  %1863 = add i64 %1862, %1201
  %1864 = sub i64 %1863, %669
  %1865 = icmp ult i64 %1864, 128
  br i1 %1865, label %1904, label %1866

1866:                                             ; preds = %1861
  %1867 = icmp ult i64 %1859, 64
  br i1 %1867, label %1891, label %1868

1868:                                             ; preds = %1866
  %1869 = and i64 %1852, 63
  %1870 = sub nsw i64 %1859, %1869
  br label %1871

1871:                                             ; preds = %1871, %1868
  %1872 = phi i64 [ 0, %1868 ], [ %1885, %1871 ]
  %1873 = getelementptr inbounds i16, ptr %378, i64 %1872
  %1874 = load <16 x i16>, ptr %1873, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1873, i64 16
  %1876 = load <16 x i16>, ptr %1875, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1873, i64 32
  %1878 = load <16 x i16>, ptr %1877, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1873, i64 48
  %1880 = load <16 x i16>, ptr %1879, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1856, i64 %1872
  store <16 x i16> %1874, ptr %1881, align 2, !tbaa !45
  %1882 = getelementptr inbounds i16, ptr %1881, i64 16
  store <16 x i16> %1876, ptr %1882, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1881, i64 32
  store <16 x i16> %1878, ptr %1883, align 2, !tbaa !45
  %1884 = getelementptr inbounds i16, ptr %1881, i64 48
  store <16 x i16> %1880, ptr %1884, align 2, !tbaa !45
  %1885 = add nuw i64 %1872, 64
  %1886 = icmp eq i64 %1885, %1870
  br i1 %1886, label %1887, label %1871, !llvm.loop !77

1887:                                             ; preds = %1871
  %1888 = icmp eq i64 %1869, 0
  br i1 %1888, label %1942, label %1889

1889:                                             ; preds = %1887
  %1890 = icmp ult i64 %1869, 8
  br i1 %1890, label %1904, label %1891

1891:                                             ; preds = %1866, %1889
  %1892 = phi i64 [ %1870, %1889 ], [ 0, %1866 ]
  %1893 = and i64 %1852, 7
  %1894 = sub nsw i64 %1859, %1893
  br label %1895

1895:                                             ; preds = %1895, %1891
  %1896 = phi i64 [ %1892, %1891 ], [ %1900, %1895 ]
  %1897 = getelementptr inbounds i16, ptr %378, i64 %1896
  %1898 = load <8 x i16>, ptr %1897, align 2, !tbaa !45
  %1899 = getelementptr inbounds i16, ptr %1856, i64 %1896
  store <8 x i16> %1898, ptr %1899, align 2, !tbaa !45
  %1900 = add nuw i64 %1896, 8
  %1901 = icmp eq i64 %1900, %1894
  br i1 %1901, label %1902, label %1895, !llvm.loop !78

1902:                                             ; preds = %1895
  %1903 = icmp eq i64 %1893, 0
  br i1 %1903, label %1942, label %1904

1904:                                             ; preds = %1861, %1858, %1889, %1902
  %1905 = phi i64 [ 0, %1858 ], [ 0, %1861 ], [ %1870, %1889 ], [ %1894, %1902 ]
  %1906 = sub i64 %1852, %1905
  %1907 = xor i64 %1905, -1
  %1908 = add nsw i64 %1859, %1907
  %1909 = and i64 %1906, 3
  %1910 = icmp eq i64 %1909, 0
  br i1 %1910, label %1920, label %1911

1911:                                             ; preds = %1904, %1911
  %1912 = phi i64 [ %1917, %1911 ], [ %1905, %1904 ]
  %1913 = phi i64 [ %1918, %1911 ], [ 0, %1904 ]
  %1914 = getelementptr inbounds i16, ptr %378, i64 %1912
  %1915 = load i16, ptr %1914, align 2, !tbaa !45
  %1916 = getelementptr inbounds i16, ptr %1856, i64 %1912
  store i16 %1915, ptr %1916, align 2, !tbaa !45
  %1917 = add nuw nsw i64 %1912, 1
  %1918 = add i64 %1913, 1
  %1919 = icmp eq i64 %1918, %1909
  br i1 %1919, label %1920, label %1911, !llvm.loop !79

1920:                                             ; preds = %1911, %1904
  %1921 = phi i64 [ %1905, %1904 ], [ %1917, %1911 ]
  %1922 = icmp ult i64 %1908, 3
  br i1 %1922, label %1942, label %1923

1923:                                             ; preds = %1920, %1923
  %1924 = phi i64 [ %1940, %1923 ], [ %1921, %1920 ]
  %1925 = getelementptr inbounds i16, ptr %378, i64 %1924
  %1926 = load i16, ptr %1925, align 2, !tbaa !45
  %1927 = getelementptr inbounds i16, ptr %1856, i64 %1924
  store i16 %1926, ptr %1927, align 2, !tbaa !45
  %1928 = add nuw nsw i64 %1924, 1
  %1929 = getelementptr inbounds i16, ptr %378, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1856, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1924, 2
  %1933 = getelementptr inbounds i16, ptr %378, i64 %1932
  %1934 = load i16, ptr %1933, align 2, !tbaa !45
  %1935 = getelementptr inbounds i16, ptr %1856, i64 %1932
  store i16 %1934, ptr %1935, align 2, !tbaa !45
  %1936 = add nuw nsw i64 %1924, 3
  %1937 = getelementptr inbounds i16, ptr %378, i64 %1936
  %1938 = load i16, ptr %1937, align 2, !tbaa !45
  %1939 = getelementptr inbounds i16, ptr %1856, i64 %1936
  store i16 %1938, ptr %1939, align 2, !tbaa !45
  %1940 = add nuw nsw i64 %1924, 4
  %1941 = icmp eq i64 %1940, %1859
  br i1 %1941, label %1942, label %1923, !llvm.loop !80

1942:                                             ; preds = %1920, %1923, %1887, %1902
  %1943 = shl i64 %1851, 31
  %1944 = add i64 %1943, -4294967296
  %1945 = ashr i64 %1944, 32
  %1946 = getelementptr inbounds i16, ptr %1856, i64 %1945
  %1947 = load i16, ptr %1946, align 2, !tbaa !45
  br label %1948

1948:                                             ; preds = %1839, %1942
  %1949 = phi i64 [ %1852, %1942 ], [ 0, %1839 ]
  %1950 = phi i16 [ %1947, %1942 ], [ -1, %1839 ]
  %1951 = and i64 %1949, 4294967295
  %1952 = getelementptr inbounds i16, ptr %1856, i64 %1951
  store i16 %1950, ptr %1952, align 2, !tbaa !45
  %1953 = trunc i64 %1852 to i16
  %1954 = add i16 %1953, 1
  %1955 = sext i32 %1849 to i64
  %1956 = getelementptr inbounds i16, ptr %1200, i64 %1955
  store i16 %1954, ptr %1956, align 2, !tbaa !45
  %1957 = add i32 %1853, 3
  %1958 = add i32 %1957, %1849
  %1959 = select i1 %145, i32 1, i32 %1958
  store i32 %1959, ptr %17, align 8, !tbaa !19
  br label %1988

1960:                                             ; preds = %707
  %1961 = load ptr, ptr %12, align 8, !tbaa !47
  %1962 = load i32, ptr %17, align 8, !tbaa !19
  %1963 = add i32 %1962, 1
  %1964 = sext i32 %1963 to i64
  %1965 = getelementptr inbounds i16, ptr %1961, i64 %1964
  %1966 = sext i32 %1962 to i64
  %1967 = getelementptr inbounds i16, ptr %1961, i64 %1966
  %1968 = load i16, ptr %1967, align 2, !tbaa !45
  %1969 = zext i16 %1968 to i32
  %1970 = add i32 %1963, %1969
  %1971 = add nsw i32 %1969, -1
  %1972 = sext i32 %1970 to i64
  %1973 = getelementptr inbounds i16, ptr %1961, i64 %1972
  %1974 = load i16, ptr %1973, align 2, !tbaa !45
  %1975 = zext i16 %1974 to i32
  %1976 = add nuw nsw i32 %1975, 1
  %1977 = add nsw i32 %1976, %1970
  %1978 = add nsw i32 %1975, -1
  %1979 = add i32 %1977, 1
  %1980 = sext i32 %1979 to i64
  %1981 = getelementptr inbounds i16, ptr %1961, i64 %1980
  %1982 = sext i32 %1977 to i64
  %1983 = getelementptr inbounds i16, ptr %1961, i64 %1982
  %1984 = load i16, ptr %1983, align 2, !tbaa !45
  %1985 = zext i16 %1984 to i32
  %1986 = add i32 %1979, %1985
  store i32 %1986, ptr %17, align 8, !tbaa !19
  %1987 = add nsw i32 %1985, -1
  br label %1988

1988:                                             ; preds = %1948, %1960
  %1989 = phi i32 [ %1978, %1960 ], [ %1744, %1948 ]
  %1990 = phi ptr [ %1981, %1960 ], [ %1856, %1948 ]
  %1991 = phi i32 [ %1987, %1960 ], [ %1853, %1948 ]
  %1992 = phi i32 [ %1971, %1960 ], [ %1723, %1948 ]
  %1993 = phi ptr [ %1965, %1960 ], [ %1204, %1948 ]
  %1994 = phi i32 [ %687, %1960 ], [ %1165, %1948 ]
  %1995 = phi ptr [ %686, %1960 ], [ %974, %1948 ]
  %1996 = phi ptr [ %685, %1960 ], [ %975, %1948 ]
  %1997 = phi ptr [ %684, %1960 ], [ %976, %1948 ]
  %1998 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1999 = icmp eq i32 %1998, 0
  %2000 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2001 = icmp ne i32 %2000, 0
  %2002 = select i1 %1999, i1 true, i1 %2001
  br i1 %2002, label %2007, label %2003

2003:                                             ; preds = %1988
  %2004 = load i8, ptr %714, align 2, !tbaa !52
  %2005 = icmp eq i8 %2004, 1
  %2006 = select i1 %2005, double 1.000000e+00, double -1.000000e+00
  br label %2007

2007:                                             ; preds = %1988, %2003
  %2008 = phi double [ %2006, %2003 ], [ 0.000000e+00, %1988 ]
  %2009 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %692, i32 1
  %2010 = load float, ptr %2009, align 8, !tbaa !81
  %2011 = fpext float %2010 to double
  %2012 = fmul double %2011, 0x4074C104816F0069
  %2013 = fmul double %32, %2012
  %2014 = fmul double %28, %2013
  %2015 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %692, i32 2
  %2016 = load i16, ptr %2015, align 4, !tbaa !82
  %2017 = sext i16 %2016 to i32
  %2018 = load ptr, ptr %670, align 8, !tbaa !83
  %2019 = load i32, ptr %671, align 8, !tbaa !85
  %2020 = shl nsw i32 %2017, 1
  %2021 = mul i32 %2020, %2019
  %2022 = zext i32 %2021 to i64
  %2023 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2018, i64 %2022
  %2024 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2025 = extractelement <2 x double> %710, i64 0
  %2026 = extractelement <2 x double> %710, i64 1
  %2027 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2024, double noundef %2025, double noundef %2026, double noundef %713, ptr noundef %44, ptr noundef nonnull %1993, i32 noundef %1992, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2028 = icmp sgt i32 %2027, 0
  br i1 %2028, label %2029, label %2215

2029:                                             ; preds = %2007
  %2030 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2031 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2032 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2033 = mul nsw i32 %2032, %716
  %2034 = mul i32 %2031, 3
  %2035 = mul nsw i32 %728, 3
  %2036 = sext i32 %2035 to i64
  %2037 = add nsw i32 %2035, 1
  %2038 = sext i32 %2037 to i64
  %2039 = add nsw i32 %2035, 2
  %2040 = sext i32 %2039 to i64
  %2041 = zext i32 %2027 to i64
  br label %2042

2042:                                             ; preds = %2029, %2042
  %2043 = phi i64 [ 0, %2029 ], [ %2213, %2042 ]
  %2044 = phi double [ 0.000000e+00, %2029 ], [ %2158, %2042 ]
  %2045 = phi <2 x double> [ %689, %2029 ], [ %2150, %2042 ]
  %2046 = phi <2 x double> [ %690, %2029 ], [ %2143, %2042 ]
  %2047 = phi <2 x double> [ %691, %2029 ], [ %2156, %2042 ]
  %2048 = phi <2 x double> [ zeroinitializer, %2029 ], [ %2152, %2042 ]
  %2049 = shl nuw nsw i64 %2043, 1
  %2050 = getelementptr inbounds i32, ptr %144, i64 %2049
  %2051 = load i32, ptr %2050, align 4, !tbaa !5
  %2052 = ashr i32 %2051, 14
  %2053 = add nsw i32 %2052, %37
  %2054 = getelementptr inbounds i16, ptr %97, i64 %2043
  %2055 = load i16, ptr %2054, align 2, !tbaa !45
  %2056 = zext i16 %2055 to i64
  %2057 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2056
  %2058 = getelementptr inbounds double, ptr %143, i64 %2043
  %2059 = load double, ptr %2058, align 8, !tbaa !15
  %2060 = sext i32 %2053 to i64
  %2061 = getelementptr inbounds double, ptr %2030, i64 %2060
  %2062 = load double, ptr %2061, align 8, !tbaa !15
  %2063 = fsub double %2059, %2062
  %2064 = shl nsw i32 %2053, 4
  %2065 = sext i32 %2064 to i64
  %2066 = getelementptr inbounds double, ptr %31, i64 %2065
  %2067 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2056, i32 2
  %2068 = load i16, ptr %2067, align 4, !tbaa !82
  %2069 = sext i16 %2068 to i32
  %2070 = shl nsw i32 %2069, 1
  %2071 = sext i32 %2070 to i64
  %2072 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2023, i64 %2071
  %2073 = getelementptr inbounds %class.Vector, ptr %651, i64 %2056
  %2074 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2056, i32 1
  %2075 = load float, ptr %2074, align 8, !tbaa !81
  %2076 = fpext float %2075 to double
  %2077 = fmul double %2014, %2076
  %2078 = load <2 x double>, ptr %2057, align 8, !tbaa !15
  %2079 = fsub <2 x double> %710, %2078
  %2080 = getelementptr inbounds %class.Vector, ptr %2057, i64 0, i32 2
  %2081 = load double, ptr %2080, align 8, !tbaa !50
  %2082 = fsub double %713, %2081
  %2083 = load double, ptr %2072, align 8, !tbaa !86
  %2084 = fmul double %32, %2083
  %2085 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2023, i64 %2071, i32 1
  %2086 = load double, ptr %2085, align 8, !tbaa !88
  %2087 = load double, ptr %2066, align 8, !tbaa !15
  %2088 = getelementptr inbounds double, ptr %2066, i64 2
  %2089 = load double, ptr %2088, align 8, !tbaa !15
  %2090 = fmul double %2086, %672
  %2091 = fmul double %2090, %2089
  %2092 = tail call double @llvm.fmuladd.f64(double %2084, double %2087, double %2091)
  %2093 = getelementptr inbounds double, ptr %2066, i64 1
  %2094 = load double, ptr %2093, align 8, !tbaa !15
  %2095 = getelementptr inbounds double, ptr %2066, i64 3
  %2096 = load double, ptr %2095, align 8, !tbaa !15
  %2097 = fmul double %2090, %2096
  %2098 = tail call double @llvm.fmuladd.f64(double %2084, double %2094, double %2097)
  %2099 = getelementptr inbounds double, ptr %2066, i64 4
  %2100 = load double, ptr %2099, align 8, !tbaa !15
  %2101 = getelementptr inbounds double, ptr %2066, i64 6
  %2102 = load double, ptr %2101, align 8, !tbaa !15
  %2103 = fmul double %2090, %2102
  %2104 = tail call double @llvm.fmuladd.f64(double %2084, double %2100, double %2103)
  %2105 = tail call double @llvm.fmuladd.f64(double %2063, double %2092, double %2098)
  %2106 = tail call double @llvm.fmuladd.f64(double %2105, double %2063, double %2104)
  %2107 = fmul double %2008, %2106
  %2108 = load <2 x double>, ptr %673, align 8, !tbaa !15
  %2109 = insertelement <2 x double> poison, double %2107, i64 0
  %2110 = shufflevector <2 x double> %2109, <2 x double> poison, <2 x i32> zeroinitializer
  %2111 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2110, <2 x double> %2079, <2 x double> %2108)
  store <2 x double> %2111, ptr %673, align 8, !tbaa !15
  %2112 = load double, ptr %674, align 8, !tbaa !15
  %2113 = tail call double @llvm.fmuladd.f64(double %2107, double %2082, double %2112)
  store double %2113, ptr %674, align 8, !tbaa !15
  %2114 = getelementptr inbounds double, ptr %2066, i64 8
  %2115 = load double, ptr %2114, align 8, !tbaa !15
  %2116 = fmul double %2077, %2115
  %2117 = getelementptr inbounds double, ptr %2066, i64 9
  %2118 = load double, ptr %2117, align 8, !tbaa !15
  %2119 = fmul double %2077, %2118
  %2120 = getelementptr inbounds double, ptr %2066, i64 10
  %2121 = load double, ptr %2120, align 8, !tbaa !15
  %2122 = fmul double %2077, %2121
  %2123 = tail call double @llvm.fmuladd.f64(double %2063, double %2116, double %2119)
  %2124 = tail call double @llvm.fmuladd.f64(double %2123, double %2063, double %2122)
  %2125 = fmul double %2008, %2124
  %2126 = load <2 x double>, ptr %675, align 8, !tbaa !15
  %2127 = insertelement <2 x double> poison, double %2125, i64 0
  %2128 = shufflevector <2 x double> %2127, <2 x double> poison, <2 x i32> zeroinitializer
  %2129 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2128, <2 x double> %2079, <2 x double> %2126)
  store <2 x double> %2129, ptr %675, align 8, !tbaa !15
  %2130 = load double, ptr %676, align 8, !tbaa !15
  %2131 = tail call double @llvm.fmuladd.f64(double %2125, double %2082, double %2130)
  store double %2131, ptr %676, align 8, !tbaa !15
  %2132 = fadd double %2092, %2116
  %2133 = fadd double %2098, %2119
  %2134 = fadd double %2104, %2122
  %2135 = tail call double @llvm.fmuladd.f64(double %2063, double %2132, double %2133)
  %2136 = tail call double @llvm.fmuladd.f64(double %2135, double %2063, double %2134)
  %2137 = extractelement <2 x double> %2079, i64 1
  %2138 = fmul double %2137, %2136
  %2139 = insertelement <2 x double> poison, double %2138, i64 0
  %2140 = shufflevector <2 x double> %2139, <2 x double> poison, <2 x i32> zeroinitializer
  %2141 = shufflevector <2 x double> %2079, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2142 = insertelement <2 x double> %2141, double %2082, i64 1
  %2143 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2140, <2 x double> %2142, <2 x double> %2046)
  %2144 = insertelement <2 x double> %2141, double %2082, i64 0
  %2145 = insertelement <2 x double> poison, double %2136, i64 0
  %2146 = shufflevector <2 x double> %2145, <2 x double> poison, <2 x i32> zeroinitializer
  %2147 = fmul <2 x double> %2144, %2146
  %2148 = shufflevector <2 x double> %2147, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2149 = shufflevector <2 x double> %2147, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2150 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2149, <2 x double> %2079, <2 x double> %2045)
  %2151 = insertelement <2 x double> %2148, double %2138, i64 1
  %2152 = fadd <2 x double> %2048, %2151
  %2153 = load <2 x double>, ptr %2073, align 8, !tbaa !15
  %2154 = fsub <2 x double> %2153, %2151
  store <2 x double> %2154, ptr %2073, align 8, !tbaa !15
  %2155 = shufflevector <2 x double> %2144, <2 x double> poison, <2 x i32> zeroinitializer
  %2156 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2147, <2 x double> %2155, <2 x double> %2047)
  %2157 = extractelement <2 x double> %2147, i64 0
  %2158 = fadd double %2044, %2157
  %2159 = getelementptr inbounds %class.Vector, ptr %651, i64 %2056, i32 2
  %2160 = load double, ptr %2159, align 8, !tbaa !89
  %2161 = fsub double %2160, %2157
  store double %2161, ptr %2159, align 8, !tbaa !89
  %2162 = load double, ptr %2080, align 8, !tbaa !50
  %2163 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2164 = fsub double %2162, %2163
  %2165 = fmul double %10, %2164
  %2166 = tail call double @llvm.floor.f64(double %2165)
  %2167 = fptosi double %2166 to i32
  %2168 = icmp slt i32 %2167, 0
  %2169 = select i1 %2168, i32 %2031, i32 0
  %2170 = icmp sgt i32 %2031, %2167
  %2171 = select i1 %2170, i32 0, i32 %2031
  %2172 = sub i32 %2167, %2171
  %2173 = add i32 %2172, %2169
  %2174 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2056, i32 3
  %2175 = load i8, ptr %2174, align 2, !tbaa !52
  %2176 = zext i8 %2175 to i32
  %2177 = shufflevector <2 x double> %2147, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2178 = fmul <2 x double> %2079, %2177
  %2179 = extractelement <2 x double> %2178, i64 0
  %2180 = fmul double %2137, %2138
  %2181 = fmul double %2082, %2157
  %2182 = add nsw i32 %2033, %2176
  %2183 = mul i32 %2034, %2182
  %2184 = sext i32 %2183 to i64
  %2185 = getelementptr inbounds double, ptr %8, i64 %2184
  %2186 = fmul double %2179, 5.000000e-01
  %2187 = fmul double %2180, 5.000000e-01
  %2188 = fmul double %2181, 5.000000e-01
  %2189 = getelementptr inbounds double, ptr %2185, i64 %2036
  %2190 = load double, ptr %2189, align 8, !tbaa !15
  %2191 = fadd double %2186, %2190
  store double %2191, ptr %2189, align 8, !tbaa !15
  %2192 = getelementptr inbounds double, ptr %2185, i64 %2038
  %2193 = load double, ptr %2192, align 8, !tbaa !15
  %2194 = fadd double %2187, %2193
  store double %2194, ptr %2192, align 8, !tbaa !15
  %2195 = getelementptr inbounds double, ptr %2185, i64 %2040
  %2196 = load double, ptr %2195, align 8, !tbaa !15
  %2197 = fadd double %2188, %2196
  store double %2197, ptr %2195, align 8, !tbaa !15
  %2198 = mul nsw i32 %2173, 3
  %2199 = sext i32 %2198 to i64
  %2200 = getelementptr inbounds double, ptr %2185, i64 %2199
  %2201 = load double, ptr %2200, align 8, !tbaa !15
  %2202 = fadd double %2186, %2201
  store double %2202, ptr %2200, align 8, !tbaa !15
  %2203 = add nsw i32 %2198, 1
  %2204 = sext i32 %2203 to i64
  %2205 = getelementptr inbounds double, ptr %2185, i64 %2204
  %2206 = load double, ptr %2205, align 8, !tbaa !15
  %2207 = fadd double %2187, %2206
  store double %2207, ptr %2205, align 8, !tbaa !15
  %2208 = add nsw i32 %2198, 2
  %2209 = sext i32 %2208 to i64
  %2210 = getelementptr inbounds double, ptr %2185, i64 %2209
  %2211 = load double, ptr %2210, align 8, !tbaa !15
  %2212 = fadd double %2188, %2211
  store double %2212, ptr %2210, align 8, !tbaa !15
  %2213 = add nuw nsw i64 %2043, 1
  %2214 = icmp eq i64 %2213, %2041
  br i1 %2214, label %2215, label %2042

2215:                                             ; preds = %2042, %2007
  %2216 = phi double [ 0.000000e+00, %2007 ], [ %2158, %2042 ]
  %2217 = phi <2 x double> [ %689, %2007 ], [ %2150, %2042 ]
  %2218 = phi <2 x double> [ %690, %2007 ], [ %2143, %2042 ]
  %2219 = phi <2 x double> [ %691, %2007 ], [ %2156, %2042 ]
  %2220 = phi <2 x double> [ zeroinitializer, %2007 ], [ %2152, %2042 ]
  %2221 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2222 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2221, double noundef %2025, double noundef %2026, double noundef %713, ptr noundef %44, ptr noundef %1990, i32 noundef %1991, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2223 = icmp sgt i32 %2222, 0
  br i1 %2223, label %2224, label %2412

2224:                                             ; preds = %2215
  %2225 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2226 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2227 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2228 = mul nsw i32 %2227, %716
  %2229 = mul i32 %2226, 3
  %2230 = mul nsw i32 %728, 3
  %2231 = sext i32 %2230 to i64
  %2232 = add nsw i32 %2230, 1
  %2233 = sext i32 %2232 to i64
  %2234 = add nsw i32 %2230, 2
  %2235 = sext i32 %2234 to i64
  %2236 = zext i32 %2222 to i64
  br label %2237

2237:                                             ; preds = %2224, %2237
  %2238 = phi i64 [ 0, %2224 ], [ %2410, %2237 ]
  %2239 = phi double [ %2216, %2224 ], [ %2355, %2237 ]
  %2240 = phi <2 x double> [ %2217, %2224 ], [ %2347, %2237 ]
  %2241 = phi <2 x double> [ %2218, %2224 ], [ %2340, %2237 ]
  %2242 = phi <2 x double> [ %2219, %2224 ], [ %2353, %2237 ]
  %2243 = phi <2 x double> [ %2220, %2224 ], [ %2349, %2237 ]
  %2244 = shl nuw nsw i64 %2238, 1
  %2245 = getelementptr inbounds i32, ptr %144, i64 %2244
  %2246 = load i32, ptr %2245, align 4, !tbaa !5
  %2247 = ashr i32 %2246, 14
  %2248 = add nsw i32 %2247, %37
  %2249 = getelementptr inbounds i16, ptr %97, i64 %2238
  %2250 = load i16, ptr %2249, align 2, !tbaa !45
  %2251 = zext i16 %2250 to i64
  %2252 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2251
  %2253 = getelementptr inbounds double, ptr %143, i64 %2238
  %2254 = load double, ptr %2253, align 8, !tbaa !15
  %2255 = sext i32 %2248 to i64
  %2256 = getelementptr inbounds double, ptr %2225, i64 %2255
  %2257 = load double, ptr %2256, align 8, !tbaa !15
  %2258 = fsub double %2254, %2257
  %2259 = shl nsw i32 %2248, 4
  %2260 = sext i32 %2259 to i64
  %2261 = getelementptr inbounds double, ptr %31, i64 %2260
  %2262 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2251, i32 2
  %2263 = load i16, ptr %2262, align 4, !tbaa !82
  %2264 = sext i16 %2263 to i32
  %2265 = shl nsw i32 %2264, 1
  %2266 = sext i32 %2265 to i64
  %2267 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2023, i64 %2266
  %2268 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2267, i64 1
  %2269 = getelementptr inbounds %class.Vector, ptr %651, i64 %2251
  %2270 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2251, i32 1
  %2271 = load float, ptr %2270, align 8, !tbaa !81
  %2272 = fpext float %2271 to double
  %2273 = fmul double %2014, %2272
  %2274 = load <2 x double>, ptr %2252, align 8, !tbaa !15
  %2275 = fsub <2 x double> %710, %2274
  %2276 = getelementptr inbounds %class.Vector, ptr %2252, i64 0, i32 2
  %2277 = load double, ptr %2276, align 8, !tbaa !50
  %2278 = fsub double %713, %2277
  %2279 = load double, ptr %2268, align 8, !tbaa !86
  %2280 = fmul double %32, %2279
  %2281 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2267, i64 1, i32 1
  %2282 = load double, ptr %2281, align 8, !tbaa !88
  %2283 = load double, ptr %2261, align 8, !tbaa !15
  %2284 = getelementptr inbounds double, ptr %2261, i64 2
  %2285 = load double, ptr %2284, align 8, !tbaa !15
  %2286 = fmul double %2282, %672
  %2287 = fmul double %2286, %2285
  %2288 = tail call double @llvm.fmuladd.f64(double %2280, double %2283, double %2287)
  %2289 = getelementptr inbounds double, ptr %2261, i64 1
  %2290 = load double, ptr %2289, align 8, !tbaa !15
  %2291 = getelementptr inbounds double, ptr %2261, i64 3
  %2292 = load double, ptr %2291, align 8, !tbaa !15
  %2293 = fmul double %2286, %2292
  %2294 = tail call double @llvm.fmuladd.f64(double %2280, double %2290, double %2293)
  %2295 = getelementptr inbounds double, ptr %2261, i64 4
  %2296 = load double, ptr %2295, align 8, !tbaa !15
  %2297 = getelementptr inbounds double, ptr %2261, i64 6
  %2298 = load double, ptr %2297, align 8, !tbaa !15
  %2299 = fmul double %2286, %2298
  %2300 = tail call double @llvm.fmuladd.f64(double %2280, double %2296, double %2299)
  %2301 = tail call double @llvm.fmuladd.f64(double %2258, double %2288, double %2294)
  %2302 = tail call double @llvm.fmuladd.f64(double %2301, double %2258, double %2300)
  %2303 = fmul double %2008, %2302
  %2304 = load <2 x double>, ptr %673, align 8, !tbaa !15
  %2305 = insertelement <2 x double> poison, double %2303, i64 0
  %2306 = shufflevector <2 x double> %2305, <2 x double> poison, <2 x i32> zeroinitializer
  %2307 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2306, <2 x double> %2275, <2 x double> %2304)
  store <2 x double> %2307, ptr %673, align 8, !tbaa !15
  %2308 = load double, ptr %674, align 8, !tbaa !15
  %2309 = tail call double @llvm.fmuladd.f64(double %2303, double %2278, double %2308)
  store double %2309, ptr %674, align 8, !tbaa !15
  %2310 = fmul double %678, %2273
  %2311 = getelementptr inbounds double, ptr %2261, i64 8
  %2312 = load double, ptr %2311, align 8, !tbaa !15
  %2313 = fmul double %2310, %2312
  %2314 = getelementptr inbounds double, ptr %2261, i64 9
  %2315 = load double, ptr %2314, align 8, !tbaa !15
  %2316 = fmul double %2310, %2315
  %2317 = getelementptr inbounds double, ptr %2261, i64 10
  %2318 = load double, ptr %2317, align 8, !tbaa !15
  %2319 = fmul double %2310, %2318
  %2320 = tail call double @llvm.fmuladd.f64(double %2258, double %2313, double %2316)
  %2321 = tail call double @llvm.fmuladd.f64(double %2320, double %2258, double %2319)
  %2322 = fmul double %2008, %2321
  %2323 = load <2 x double>, ptr %675, align 8, !tbaa !15
  %2324 = insertelement <2 x double> poison, double %2322, i64 0
  %2325 = shufflevector <2 x double> %2324, <2 x double> poison, <2 x i32> zeroinitializer
  %2326 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2325, <2 x double> %2275, <2 x double> %2323)
  store <2 x double> %2326, ptr %675, align 8, !tbaa !15
  %2327 = load double, ptr %676, align 8, !tbaa !15
  %2328 = tail call double @llvm.fmuladd.f64(double %2322, double %2278, double %2327)
  store double %2328, ptr %676, align 8, !tbaa !15
  %2329 = fadd double %2288, %2313
  %2330 = fadd double %2294, %2316
  %2331 = fadd double %2300, %2319
  %2332 = tail call double @llvm.fmuladd.f64(double %2258, double %2329, double %2330)
  %2333 = tail call double @llvm.fmuladd.f64(double %2332, double %2258, double %2331)
  %2334 = extractelement <2 x double> %2275, i64 1
  %2335 = fmul double %2334, %2333
  %2336 = insertelement <2 x double> poison, double %2335, i64 0
  %2337 = shufflevector <2 x double> %2336, <2 x double> poison, <2 x i32> zeroinitializer
  %2338 = shufflevector <2 x double> %2275, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2339 = insertelement <2 x double> %2338, double %2278, i64 1
  %2340 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2337, <2 x double> %2339, <2 x double> %2241)
  %2341 = insertelement <2 x double> %2338, double %2278, i64 0
  %2342 = insertelement <2 x double> poison, double %2333, i64 0
  %2343 = shufflevector <2 x double> %2342, <2 x double> poison, <2 x i32> zeroinitializer
  %2344 = fmul <2 x double> %2341, %2343
  %2345 = shufflevector <2 x double> %2344, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2346 = shufflevector <2 x double> %2344, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2347 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2346, <2 x double> %2275, <2 x double> %2240)
  %2348 = insertelement <2 x double> %2345, double %2335, i64 1
  %2349 = fadd <2 x double> %2243, %2348
  %2350 = load <2 x double>, ptr %2269, align 8, !tbaa !15
  %2351 = fsub <2 x double> %2350, %2348
  store <2 x double> %2351, ptr %2269, align 8, !tbaa !15
  %2352 = shufflevector <2 x double> %2341, <2 x double> poison, <2 x i32> zeroinitializer
  %2353 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2344, <2 x double> %2352, <2 x double> %2242)
  %2354 = extractelement <2 x double> %2344, i64 0
  %2355 = fadd double %2239, %2354
  %2356 = getelementptr inbounds %class.Vector, ptr %651, i64 %2251, i32 2
  %2357 = load double, ptr %2356, align 8, !tbaa !89
  %2358 = fsub double %2357, %2354
  store double %2358, ptr %2356, align 8, !tbaa !89
  %2359 = load double, ptr %2276, align 8, !tbaa !50
  %2360 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2361 = fsub double %2359, %2360
  %2362 = fmul double %10, %2361
  %2363 = tail call double @llvm.floor.f64(double %2362)
  %2364 = fptosi double %2363 to i32
  %2365 = icmp slt i32 %2364, 0
  %2366 = select i1 %2365, i32 %2226, i32 0
  %2367 = icmp sgt i32 %2226, %2364
  %2368 = select i1 %2367, i32 0, i32 %2226
  %2369 = sub i32 %2364, %2368
  %2370 = add i32 %2369, %2366
  %2371 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2251, i32 3
  %2372 = load i8, ptr %2371, align 2, !tbaa !52
  %2373 = zext i8 %2372 to i32
  %2374 = shufflevector <2 x double> %2344, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2375 = fmul <2 x double> %2275, %2374
  %2376 = extractelement <2 x double> %2375, i64 0
  %2377 = fmul double %2334, %2335
  %2378 = fmul double %2278, %2354
  %2379 = add nsw i32 %2228, %2373
  %2380 = mul i32 %2229, %2379
  %2381 = sext i32 %2380 to i64
  %2382 = getelementptr inbounds double, ptr %8, i64 %2381
  %2383 = fmul double %2376, 5.000000e-01
  %2384 = fmul double %2377, 5.000000e-01
  %2385 = fmul double %2378, 5.000000e-01
  %2386 = getelementptr inbounds double, ptr %2382, i64 %2231
  %2387 = load double, ptr %2386, align 8, !tbaa !15
  %2388 = fadd double %2383, %2387
  store double %2388, ptr %2386, align 8, !tbaa !15
  %2389 = getelementptr inbounds double, ptr %2382, i64 %2233
  %2390 = load double, ptr %2389, align 8, !tbaa !15
  %2391 = fadd double %2384, %2390
  store double %2391, ptr %2389, align 8, !tbaa !15
  %2392 = getelementptr inbounds double, ptr %2382, i64 %2235
  %2393 = load double, ptr %2392, align 8, !tbaa !15
  %2394 = fadd double %2385, %2393
  store double %2394, ptr %2392, align 8, !tbaa !15
  %2395 = mul nsw i32 %2370, 3
  %2396 = sext i32 %2395 to i64
  %2397 = getelementptr inbounds double, ptr %2382, i64 %2396
  %2398 = load double, ptr %2397, align 8, !tbaa !15
  %2399 = fadd double %2383, %2398
  store double %2399, ptr %2397, align 8, !tbaa !15
  %2400 = add nsw i32 %2395, 1
  %2401 = sext i32 %2400 to i64
  %2402 = getelementptr inbounds double, ptr %2382, i64 %2401
  %2403 = load double, ptr %2402, align 8, !tbaa !15
  %2404 = fadd double %2384, %2403
  store double %2404, ptr %2402, align 8, !tbaa !15
  %2405 = add nsw i32 %2395, 2
  %2406 = sext i32 %2405 to i64
  %2407 = getelementptr inbounds double, ptr %2382, i64 %2406
  %2408 = load double, ptr %2407, align 8, !tbaa !15
  %2409 = fadd double %2385, %2408
  store double %2409, ptr %2407, align 8, !tbaa !15
  %2410 = add nuw nsw i64 %2238, 1
  %2411 = icmp eq i64 %2410, %2236
  br i1 %2411, label %2412, label %2237

2412:                                             ; preds = %2237, %2215
  %2413 = phi double [ %2216, %2215 ], [ %2355, %2237 ]
  %2414 = phi <2 x double> [ %2217, %2215 ], [ %2347, %2237 ]
  %2415 = phi <2 x double> [ %2218, %2215 ], [ %2340, %2237 ]
  %2416 = phi <2 x double> [ %2219, %2215 ], [ %2353, %2237 ]
  %2417 = phi <2 x double> [ %2220, %2215 ], [ %2349, %2237 ]
  %2418 = add i32 %1989, %682
  %2419 = add i32 %2418, %2222
  %2420 = getelementptr inbounds %class.Vector, ptr %652, i64 %692
  %2421 = load <2 x double>, ptr %2420, align 8, !tbaa !15
  %2422 = fadd <2 x double> %2417, %2421
  store <2 x double> %2422, ptr %2420, align 8, !tbaa !15
  %2423 = getelementptr inbounds %class.Vector, ptr %652, i64 %692, i32 2
  %2424 = load double, ptr %2423, align 8, !tbaa !89
  %2425 = fadd double %2413, %2424
  store double %2425, ptr %2423, align 8, !tbaa !89
  br i1 %147, label %2428, label %2426

2426:                                             ; preds = %2412
  %2427 = add nsw i32 %683, 1
  br label %2436

2428:                                             ; preds = %2412
  %2429 = load ptr, ptr %12, align 8, !tbaa !47
  %2430 = load i32, ptr %17, align 8, !tbaa !19
  %2431 = add nsw i32 %2430, 1
  store i32 %2431, ptr %17, align 8, !tbaa !19
  %2432 = sext i32 %2430 to i64
  %2433 = getelementptr inbounds i16, ptr %2429, i64 %2432
  %2434 = load i16, ptr %2433, align 2, !tbaa !45
  %2435 = zext i16 %2434 to i32
  br label %2436

2436:                                             ; preds = %1263, %1222, %1151, %1602, %2428, %2426, %704
  %2437 = phi i32 [ %705, %704 ], [ %708, %2428 ], [ %708, %2426 ], [ %708, %1602 ], [ %708, %1151 ], [ %708, %1222 ], [ %708, %1263 ]
  %2438 = phi i32 [ %687, %704 ], [ %1994, %2428 ], [ %1994, %2426 ], [ %1165, %1602 ], [ 0, %1151 ], [ %1165, %1222 ], [ %1165, %1263 ]
  %2439 = phi ptr [ %686, %704 ], [ %1995, %2428 ], [ %1995, %2426 ], [ %974, %1602 ], [ %974, %1151 ], [ %974, %1222 ], [ %974, %1263 ]
  %2440 = phi ptr [ %685, %704 ], [ %1996, %2428 ], [ %1996, %2426 ], [ %975, %1602 ], [ %975, %1151 ], [ %975, %1222 ], [ %975, %1263 ]
  %2441 = phi ptr [ %684, %704 ], [ %1997, %2428 ], [ %1997, %2426 ], [ %976, %1602 ], [ %976, %1151 ], [ %976, %1222 ], [ %976, %1263 ]
  %2442 = phi i32 [ %706, %704 ], [ %2435, %2428 ], [ %2427, %2426 ], [ %1603, %1602 ], [ %1155, %1151 ], [ %1223, %1222 ], [ %1264, %1263 ]
  %2443 = phi i32 [ %682, %704 ], [ %2419, %2428 ], [ %2419, %2426 ], [ %682, %1602 ], [ %682, %1151 ], [ %682, %1222 ], [ %682, %1263 ]
  %2444 = phi <2 x double> [ %689, %704 ], [ %2414, %2428 ], [ %2414, %2426 ], [ %689, %1602 ], [ %689, %1151 ], [ %689, %1222 ], [ %689, %1263 ]
  %2445 = phi <2 x double> [ %690, %704 ], [ %2415, %2428 ], [ %2415, %2426 ], [ %690, %1602 ], [ %690, %1151 ], [ %690, %1222 ], [ %690, %1263 ]
  %2446 = phi <2 x double> [ %691, %704 ], [ %2416, %2428 ], [ %2416, %2426 ], [ %691, %1602 ], [ %691, %1151 ], [ %691, %1222 ], [ %691, %1263 ]
  %2447 = icmp slt i32 %2442, %39
  br i1 %2447, label %681, label %2448

2448:                                             ; preds = %2436, %648
  %2449 = phi ptr [ null, %648 ], [ %2441, %2436 ]
  %2450 = phi i32 [ %655, %648 ], [ %2442, %2436 ]
  %2451 = phi i32 [ 0, %648 ], [ %2443, %2436 ]
  %2452 = phi <2 x double> [ zeroinitializer, %648 ], [ %2444, %2436 ]
  %2453 = phi <2 x double> [ zeroinitializer, %648 ], [ %2445, %2436 ]
  %2454 = phi <2 x double> [ zeroinitializer, %648 ], [ %2446, %2436 ]
  br i1 %145, label %2462, label %2455

2455:                                             ; preds = %2448
  %2456 = trunc i32 %2450 to i16
  %2457 = load ptr, ptr %12, align 8, !tbaa !47
  %2458 = load i32, ptr %17, align 8, !tbaa !19
  %2459 = add nsw i32 %2458, -1
  %2460 = sext i32 %2459 to i64
  %2461 = getelementptr inbounds i16, ptr %2457, i64 %2460
  store i16 %2456, ptr %2461, align 2, !tbaa !45
  br label %2462

2462:                                             ; preds = %2455, %2448
  %2463 = sitofp i32 %2451 to double
  %2464 = getelementptr inbounds double, ptr %6, i64 22
  %2465 = load double, ptr %2464, align 8, !tbaa !15
  %2466 = fadd double %2465, %2463
  store double %2466, ptr %2464, align 8, !tbaa !15
  %2467 = getelementptr inbounds double, ptr %6, i64 3
  %2468 = load <4 x double>, ptr %2467, align 8, !tbaa !15
  %2469 = shufflevector <2 x double> %2452, <2 x double> %2454, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2470 = shufflevector <4 x double> %2469, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2471 = fadd <4 x double> %2470, %2468
  store <4 x double> %2471, ptr %2467, align 8, !tbaa !15
  %2472 = getelementptr inbounds double, ptr %6, i64 7
  %2473 = load <4 x double>, ptr %2472, align 8, !tbaa !15
  %2474 = shufflevector <2 x double> %2453, <2 x double> %2454, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2475 = shufflevector <4 x double> %2474, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2476 = fadd <4 x double> %2475, %2473
  store <4 x double> %2476, ptr %2472, align 8, !tbaa !15
  %2477 = getelementptr inbounds double, ptr %6, i64 11
  %2478 = load double, ptr %2477, align 8, !tbaa !15
  %2479 = extractelement <2 x double> %2454, i64 0
  %2480 = fadd double %2479, %2478
  store double %2480, ptr %2477, align 8, !tbaa !15
  %2481 = icmp eq ptr %2449, null
  br i1 %2481, label %2483, label %2482

2482:                                             ; preds = %2462
  tail call void @_ZdaPv(ptr noundef nonnull %2449) #10
  br label %2483

2483:                                             ; preds = %2462, %2482, %1
  ret void
}

declare void @_Z8NAMD_bugPKc(ptr noundef) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #2

; Function Attrs: nobuiltin allocsize(0)
declare noundef nonnull ptr @_Znam(i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #2

; Function Attrs: inlinehint nounwind sspstrong uwtable
define linkonce_odr dso_local noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %0, double noundef %1, double noundef %2, double noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, ptr noundef %7, double noundef %8, ptr noundef %9) local_unnamed_addr #5 comdat {
  %11 = fadd double %0, %8
  %12 = icmp slt i32 %6, 1
  br i1 %12, label %218, label %13

13:                                               ; preds = %10
  %14 = icmp ugt i32 %6, 16
  br i1 %14, label %15, label %164

15:                                               ; preds = %13
  %16 = add nsw i32 %6, -4
  %17 = getelementptr inbounds i16, ptr %5, i64 3
  %18 = load i16, ptr %17, align 2, !tbaa !45
  %19 = zext i16 %18 to i64
  %20 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %19
  %21 = getelementptr inbounds %class.Vector, ptr %20, i64 0, i32 2
  %22 = load double, ptr %21, align 8, !tbaa !50
  %23 = getelementptr inbounds i16, ptr %5, i64 2
  %24 = load i16, ptr %23, align 2, !tbaa !45
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %25
  %27 = getelementptr inbounds %class.Vector, ptr %26, i64 0, i32 2
  %28 = load double, ptr %27, align 8, !tbaa !50
  %29 = getelementptr inbounds i16, ptr %5, i64 1
  %30 = load i16, ptr %29, align 2, !tbaa !45
  %31 = zext i16 %30 to i64
  %32 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %31
  %33 = getelementptr inbounds %class.Vector, ptr %32, i64 0, i32 2
  %34 = load double, ptr %33, align 8, !tbaa !50
  %35 = load i16, ptr %5, align 2, !tbaa !45
  %36 = zext i16 %35 to i64
  %37 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %36
  %38 = getelementptr inbounds %class.Vector, ptr %37, i64 0, i32 2
  %39 = load double, ptr %38, align 8, !tbaa !50
  %40 = getelementptr inbounds %class.Vector, ptr %20, i64 0, i32 1
  %41 = load double, ptr %40, align 8, !tbaa !68
  %42 = getelementptr inbounds %class.Vector, ptr %26, i64 0, i32 1
  %43 = load double, ptr %42, align 8, !tbaa !68
  %44 = getelementptr inbounds %class.Vector, ptr %32, i64 0, i32 1
  %45 = load double, ptr %44, align 8, !tbaa !68
  %46 = getelementptr inbounds %class.Vector, ptr %37, i64 0, i32 1
  %47 = load double, ptr %46, align 8, !tbaa !68
  %48 = load double, ptr %20, align 8, !tbaa !69
  %49 = load double, ptr %26, align 8, !tbaa !69
  %50 = load double, ptr %32, align 8, !tbaa !69
  %51 = load double, ptr %37, align 8, !tbaa !69
  %52 = zext i32 %16 to i64
  br label %53

53:                                               ; preds = %15, %53
  %54 = phi i64 [ 4, %15 ], [ %159, %53 ]
  %55 = phi i32 [ 0, %15 ], [ %158, %53 ]
  %56 = phi i16 [ %35, %15 ], [ %73, %53 ]
  %57 = phi i16 [ %30, %15 ], [ %76, %53 ]
  %58 = phi i16 [ %24, %15 ], [ %79, %53 ]
  %59 = phi i16 [ %18, %15 ], [ %82, %53 ]
  %60 = phi double [ %51, %15 ], [ %109, %53 ]
  %61 = phi double [ %50, %15 ], [ %112, %53 ]
  %62 = phi double [ %49, %15 ], [ %115, %53 ]
  %63 = phi double [ %48, %15 ], [ %118, %53 ]
  %64 = phi double [ %47, %15 ], [ %120, %53 ]
  %65 = phi double [ %45, %15 ], [ %122, %53 ]
  %66 = phi double [ %43, %15 ], [ %124, %53 ]
  %67 = phi double [ %41, %15 ], [ %126, %53 ]
  %68 = phi double [ %22, %15 ], [ %134, %53 ]
  %69 = phi double [ %28, %15 ], [ %132, %53 ]
  %70 = phi double [ %34, %15 ], [ %130, %53 ]
  %71 = phi double [ %39, %15 ], [ %128, %53 ]
  %72 = getelementptr inbounds i16, ptr %5, i64 %54
  %73 = load i16, ptr %72, align 2, !tbaa !45
  %74 = or i64 %54, 1
  %75 = getelementptr inbounds i16, ptr %5, i64 %74
  %76 = load i16, ptr %75, align 2, !tbaa !45
  %77 = or i64 %54, 2
  %78 = getelementptr inbounds i16, ptr %5, i64 %77
  %79 = load i16, ptr %78, align 2, !tbaa !45
  %80 = or i64 %54, 3
  %81 = getelementptr inbounds i16, ptr %5, i64 %80
  %82 = load i16, ptr %81, align 2, !tbaa !45
  %83 = fsub double %1, %60
  %84 = fsub double %1, %61
  %85 = fsub double %1, %62
  %86 = fsub double %1, %63
  %87 = tail call double @llvm.fmuladd.f64(double %83, double %83, double %8)
  %88 = tail call double @llvm.fmuladd.f64(double %84, double %84, double %8)
  %89 = tail call double @llvm.fmuladd.f64(double %85, double %85, double %8)
  %90 = tail call double @llvm.fmuladd.f64(double %86, double %86, double %8)
  %91 = fsub double %2, %64
  %92 = fsub double %2, %65
  %93 = fsub double %2, %66
  %94 = fsub double %2, %67
  %95 = tail call double @llvm.fmuladd.f64(double %91, double %91, double %87)
  %96 = tail call double @llvm.fmuladd.f64(double %92, double %92, double %88)
  %97 = tail call double @llvm.fmuladd.f64(double %93, double %93, double %89)
  %98 = tail call double @llvm.fmuladd.f64(double %94, double %94, double %90)
  %99 = fsub double %3, %71
  %100 = fsub double %3, %70
  %101 = fsub double %3, %69
  %102 = fsub double %3, %68
  %103 = tail call double @llvm.fmuladd.f64(double %99, double %99, double %95)
  %104 = tail call double @llvm.fmuladd.f64(double %100, double %100, double %96)
  %105 = tail call double @llvm.fmuladd.f64(double %101, double %101, double %97)
  %106 = tail call double @llvm.fmuladd.f64(double %102, double %102, double %98)
  %107 = zext i16 %73 to i64
  %108 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %107
  %109 = load double, ptr %108, align 8, !tbaa !69
  %110 = zext i16 %76 to i64
  %111 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %110
  %112 = load double, ptr %111, align 8, !tbaa !69
  %113 = zext i16 %79 to i64
  %114 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %113
  %115 = load double, ptr %114, align 8, !tbaa !69
  %116 = zext i16 %82 to i64
  %117 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %116
  %118 = load double, ptr %117, align 8, !tbaa !69
  %119 = getelementptr inbounds %class.Vector, ptr %108, i64 0, i32 1
  %120 = load double, ptr %119, align 8, !tbaa !68
  %121 = getelementptr inbounds %class.Vector, ptr %111, i64 0, i32 1
  %122 = load double, ptr %121, align 8, !tbaa !68
  %123 = getelementptr inbounds %class.Vector, ptr %114, i64 0, i32 1
  %124 = load double, ptr %123, align 8, !tbaa !68
  %125 = getelementptr inbounds %class.Vector, ptr %117, i64 0, i32 1
  %126 = load double, ptr %125, align 8, !tbaa !68
  %127 = getelementptr inbounds %class.Vector, ptr %108, i64 0, i32 2
  %128 = load double, ptr %127, align 8, !tbaa !50
  %129 = getelementptr inbounds %class.Vector, ptr %111, i64 0, i32 2
  %130 = load double, ptr %129, align 8, !tbaa !50
  %131 = getelementptr inbounds %class.Vector, ptr %114, i64 0, i32 2
  %132 = load double, ptr %131, align 8, !tbaa !50
  %133 = getelementptr inbounds %class.Vector, ptr %117, i64 0, i32 2
  %134 = load double, ptr %133, align 8, !tbaa !50
  %135 = fcmp olt double %103, %11
  %136 = fcmp olt double %104, %11
  %137 = fcmp olt double %105, %11
  %138 = fcmp olt double %106, %11
  %139 = sext i32 %55 to i64
  %140 = getelementptr inbounds i16, ptr %7, i64 %139
  store i16 %56, ptr %140, align 2, !tbaa !45
  %141 = getelementptr inbounds double, ptr %9, i64 %139
  store double %103, ptr %141, align 8, !tbaa !15
  %142 = zext i1 %135 to i32
  %143 = add nsw i32 %55, %142
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i16, ptr %7, i64 %144
  store i16 %57, ptr %145, align 2, !tbaa !45
  %146 = getelementptr inbounds double, ptr %9, i64 %144
  store double %104, ptr %146, align 8, !tbaa !15
  %147 = zext i1 %136 to i32
  %148 = add nsw i32 %143, %147
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i16, ptr %7, i64 %149
  store i16 %58, ptr %150, align 2, !tbaa !45
  %151 = getelementptr inbounds double, ptr %9, i64 %149
  store double %105, ptr %151, align 8, !tbaa !15
  %152 = zext i1 %137 to i32
  %153 = add nsw i32 %148, %152
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i16, ptr %7, i64 %154
  store i16 %59, ptr %155, align 2, !tbaa !45
  %156 = getelementptr inbounds double, ptr %9, i64 %154
  store double %106, ptr %156, align 8, !tbaa !15
  %157 = zext i1 %138 to i32
  %158 = add nsw i32 %153, %157
  %159 = add nuw nsw i64 %54, 4
  %160 = icmp ult i64 %159, %52
  br i1 %160, label %53, label %161

161:                                              ; preds = %53
  %162 = trunc i64 %54 to i32
  %163 = sext i32 %158 to i64
  br label %164

164:                                              ; preds = %161, %13
  %165 = phi i64 [ %163, %161 ], [ 0, %13 ]
  %166 = phi i32 [ %162, %161 ], [ 0, %13 ]
  %167 = getelementptr inbounds i16, ptr %7, i64 %165
  %168 = icmp slt i32 %166, %6
  br i1 %168, label %169, label %211

169:                                              ; preds = %164
  %170 = zext i32 %166 to i64
  %171 = getelementptr inbounds i16, ptr %5, i64 %170
  %172 = load i16, ptr %171, align 2, !tbaa !45
  %173 = zext i16 %172 to i64
  %174 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %173
  %175 = getelementptr inbounds %class.Vector, ptr %174, i64 0, i32 1
  %176 = load <2 x double>, ptr %175, align 8, !tbaa !15
  %177 = load double, ptr %174, align 8, !tbaa !69
  %178 = getelementptr inbounds double, ptr %9, i64 %165
  %179 = zext i32 %6 to i64
  br label %180

180:                                              ; preds = %169, %207
  %181 = phi i64 [ %170, %169 ], [ %187, %207 ]
  %182 = phi ptr [ %167, %169 ], [ %209, %207 ]
  %183 = phi double [ %177, %169 ], [ %194, %207 ]
  %184 = phi i16 [ %172, %169 ], [ %189, %207 ]
  %185 = phi ptr [ %178, %169 ], [ %208, %207 ]
  %186 = phi <2 x double> [ %176, %169 ], [ %202, %207 ]
  %187 = add nuw nsw i64 %181, 1
  %188 = getelementptr inbounds i16, ptr %5, i64 %187
  %189 = load i16, ptr %188, align 2, !tbaa !45
  %190 = fsub double %1, %183
  %191 = tail call double @llvm.fmuladd.f64(double %190, double %190, double %8)
  %192 = zext i16 %189 to i64
  %193 = getelementptr inbounds %struct.CompAtom, ptr %4, i64 %192
  %194 = load double, ptr %193, align 8, !tbaa !69
  %195 = extractelement <2 x double> %186, i64 0
  %196 = fsub double %2, %195
  %197 = tail call double @llvm.fmuladd.f64(double %196, double %196, double %191)
  %198 = getelementptr inbounds %class.Vector, ptr %193, i64 0, i32 1
  %199 = extractelement <2 x double> %186, i64 1
  %200 = fsub double %3, %199
  %201 = tail call double @llvm.fmuladd.f64(double %200, double %200, double %197)
  %202 = load <2 x double>, ptr %198, align 8, !tbaa !15
  %203 = fcmp ugt double %201, %11
  br i1 %203, label %207, label %204

204:                                              ; preds = %180
  store i16 %184, ptr %182, align 2, !tbaa !45
  %205 = getelementptr inbounds i16, ptr %182, i64 1
  store double %201, ptr %185, align 8, !tbaa !15
  %206 = getelementptr inbounds double, ptr %185, i64 1
  br label %207

207:                                              ; preds = %204, %180
  %208 = phi ptr [ %206, %204 ], [ %185, %180 ]
  %209 = phi ptr [ %205, %204 ], [ %182, %180 ]
  %210 = icmp eq i64 %187, %179
  br i1 %210, label %211, label %180

211:                                              ; preds = %207, %164
  %212 = phi ptr [ %167, %164 ], [ %209, %207 ]
  %213 = ptrtoint ptr %212 to i64
  %214 = ptrtoint ptr %7 to i64
  %215 = sub i64 %213, %214
  %216 = lshr exact i64 %215, 1
  %217 = trunc i64 %216 to i32
  br label %218

218:                                              ; preds = %10, %211
  %219 = phi i32 [ %217, %211 ], [ 0, %10 ]
  ret i32 %219
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(ptr noundef) local_unnamed_addr #6

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil22calc_pair_energy_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2549

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %35 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %36 = shl i32 %35, 6
  %37 = add i32 %36, -65472
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %39 = load i32, ptr %38, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %41 = load i32, ptr %40, align 4, !tbaa !5
  %42 = load ptr, ptr %0, align 8, !tbaa !24
  %43 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !24
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = add nsw i32 %41, 5
  %52 = getelementptr inbounds %class.ResizeArray, ptr %50, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !26
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 2
  %55 = load i32, ptr %54, align 8, !tbaa !28
  %56 = icmp slt i32 %55, %51
  br i1 %56, label %57, label %95

57:                                               ; preds = %4
  %58 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 3
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = icmp slt i32 %59, %51
  br i1 %60, label %61, label %95

61:                                               ; preds = %57
  %62 = sitofp i32 %59 to float
  %63 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 5
  %64 = load float, ptr %63, align 4, !tbaa !32
  %65 = fmul float %64, %62
  %66 = fptosi float %65 to i32
  %67 = tail call i32 @llvm.smax.i32(i32 %66, i32 %51)
  %68 = sub nsw i32 %67, %59
  %69 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 6
  %70 = load i32, ptr %69, align 8, !tbaa !33
  %71 = icmp slt i32 %68, %70
  %72 = add nsw i32 %70, %59
  %73 = select i1 %71, i32 %72, i32 %67
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 1
  %76 = add nsw i64 %75, 31
  %77 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %76) #9
  %78 = getelementptr inbounds i8, ptr %77, i64 31
  %79 = ptrtoint ptr %78 to i64
  %80 = and i64 %79, 31
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, ptr %78, i64 %81
  %83 = load ptr, ptr %53, align 8, !tbaa !34
  %84 = sext i32 %55 to i64
  %85 = shl nsw i64 %84, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %82, ptr align 1 %83, i64 %85, i1 false)
  %86 = icmp eq i32 %59, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %61
  %88 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  %89 = load ptr, ptr %88, align 8, !tbaa !35
  %90 = icmp eq ptr %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZdaPv(ptr noundef nonnull %89) #10
  br label %92

92:                                               ; preds = %91, %87, %61
  %93 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  store ptr %77, ptr %93, align 8, !tbaa !35
  store ptr %82, ptr %53, align 8, !tbaa !34
  store i32 %73, ptr %58, align 4, !tbaa !31
  %94 = load ptr, ptr %52, align 8, !tbaa !26
  br label %95

95:                                               ; preds = %4, %57, %92
  %96 = phi ptr [ %53, %4 ], [ %53, %57 ], [ %94, %92 ]
  store i32 %51, ptr %54, align 8, !tbaa !28
  %97 = load ptr, ptr %96, align 8, !tbaa !34
  %98 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 1, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !36
  %100 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 2
  %101 = load i32, ptr %100, align 8, !tbaa !38
  %102 = icmp slt i32 %101, %51
  br i1 %102, label %103, label %141

103:                                              ; preds = %95
  %104 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 3
  %105 = load i32, ptr %104, align 4, !tbaa !40
  %106 = icmp slt i32 %105, %51
  br i1 %106, label %107, label %141

107:                                              ; preds = %103
  %108 = sitofp i32 %105 to float
  %109 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 5
  %110 = load float, ptr %109, align 4, !tbaa !41
  %111 = fmul float %110, %108
  %112 = fptosi float %111 to i32
  %113 = tail call i32 @llvm.smax.i32(i32 %112, i32 %51)
  %114 = sub nsw i32 %113, %105
  %115 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 6
  %116 = load i32, ptr %115, align 8, !tbaa !42
  %117 = icmp slt i32 %114, %116
  %118 = add nsw i32 %116, %105
  %119 = select i1 %117, i32 %118, i32 %113
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add nsw i64 %121, 31
  %123 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %122) #9
  %124 = getelementptr inbounds i8, ptr %123, i64 31
  %125 = ptrtoint ptr %124 to i64
  %126 = and i64 %125, 31
  %127 = sub nsw i64 0, %126
  %128 = getelementptr inbounds i8, ptr %124, i64 %127
  %129 = load ptr, ptr %99, align 8, !tbaa !43
  %130 = sext i32 %101 to i64
  %131 = shl nsw i64 %130, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %128, ptr align 1 %129, i64 %131, i1 false)
  %132 = icmp eq i32 %105, 0
  br i1 %132, label %138, label %133

133:                                              ; preds = %107
  %134 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  %135 = load ptr, ptr %134, align 8, !tbaa !44
  %136 = icmp eq ptr %135, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  tail call void @_ZdaPv(ptr noundef nonnull %135) #10
  br label %138

138:                                              ; preds = %137, %133, %107
  %139 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  store ptr %123, ptr %139, align 8, !tbaa !44
  store ptr %128, ptr %99, align 8, !tbaa !43
  store i32 %119, ptr %104, align 4, !tbaa !40
  %140 = load ptr, ptr %98, align 8, !tbaa !36
  br label %141

141:                                              ; preds = %95, %103, %138
  %142 = phi ptr [ %99, %95 ], [ %99, %103 ], [ %140, %138 ]
  store i32 %51, ptr %100, align 8, !tbaa !38
  %143 = load ptr, ptr %142, align 8, !tbaa !43
  %144 = getelementptr inbounds i32, ptr %143, i64 1
  %145 = icmp eq i32 %14, 0
  %146 = icmp ne i32 %16, 0
  %147 = select i1 %145, i1 %146, i1 false
  %148 = select i1 %147, i32 0, i32 %51
  %149 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 2, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !26
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 2
  %152 = load i32, ptr %151, align 8, !tbaa !28
  %153 = icmp slt i32 %152, %148
  br i1 %153, label %154, label %192

154:                                              ; preds = %141
  %155 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 3
  %156 = load i32, ptr %155, align 4, !tbaa !31
  %157 = icmp slt i32 %156, %148
  br i1 %157, label %158, label %192

158:                                              ; preds = %154
  %159 = sitofp i32 %156 to float
  %160 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 5
  %161 = load float, ptr %160, align 4, !tbaa !32
  %162 = fmul float %161, %159
  %163 = fptosi float %162 to i32
  %164 = tail call i32 @llvm.smax.i32(i32 %163, i32 %148)
  %165 = sub nsw i32 %164, %156
  %166 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 6
  %167 = load i32, ptr %166, align 8, !tbaa !33
  %168 = icmp slt i32 %165, %167
  %169 = add nsw i32 %167, %156
  %170 = select i1 %168, i32 %169, i32 %164
  %171 = sext i32 %170 to i64
  %172 = shl nsw i64 %171, 1
  %173 = add nsw i64 %172, 31
  %174 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %173) #9
  %175 = getelementptr inbounds i8, ptr %174, i64 31
  %176 = ptrtoint ptr %175 to i64
  %177 = and i64 %176, 31
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds i8, ptr %175, i64 %178
  %180 = load ptr, ptr %150, align 8, !tbaa !34
  %181 = sext i32 %152 to i64
  %182 = shl nsw i64 %181, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %179, ptr align 1 %180, i64 %182, i1 false)
  %183 = icmp eq i32 %156, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %158
  %185 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !35
  %187 = icmp eq ptr %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZdaPv(ptr noundef nonnull %186) #10
  br label %189

189:                                              ; preds = %188, %184, %158
  %190 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  store ptr %174, ptr %190, align 8, !tbaa !35
  store ptr %179, ptr %150, align 8, !tbaa !34
  store i32 %170, ptr %155, align 4, !tbaa !31
  %191 = load ptr, ptr %149, align 8, !tbaa !26
  br label %192

192:                                              ; preds = %141, %154, %189
  %193 = phi ptr [ %150, %141 ], [ %150, %154 ], [ %191, %189 ]
  store i32 %148, ptr %151, align 8, !tbaa !28
  %194 = load ptr, ptr %193, align 8, !tbaa !34
  %195 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 3, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !26
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 2
  %198 = load i32, ptr %197, align 8, !tbaa !28
  %199 = icmp slt i32 %198, %148
  br i1 %199, label %200, label %238

200:                                              ; preds = %192
  %201 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 3
  %202 = load i32, ptr %201, align 4, !tbaa !31
  %203 = icmp slt i32 %202, %148
  br i1 %203, label %204, label %238

204:                                              ; preds = %200
  %205 = sitofp i32 %202 to float
  %206 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 5
  %207 = load float, ptr %206, align 4, !tbaa !32
  %208 = fmul float %207, %205
  %209 = fptosi float %208 to i32
  %210 = tail call i32 @llvm.smax.i32(i32 %209, i32 %148)
  %211 = sub nsw i32 %210, %202
  %212 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 6
  %213 = load i32, ptr %212, align 8, !tbaa !33
  %214 = icmp slt i32 %211, %213
  %215 = add nsw i32 %213, %202
  %216 = select i1 %214, i32 %215, i32 %210
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 1
  %219 = add nsw i64 %218, 31
  %220 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %219) #9
  %221 = getelementptr inbounds i8, ptr %220, i64 31
  %222 = ptrtoint ptr %221 to i64
  %223 = and i64 %222, 31
  %224 = sub nsw i64 0, %223
  %225 = getelementptr inbounds i8, ptr %221, i64 %224
  %226 = load ptr, ptr %196, align 8, !tbaa !34
  %227 = sext i32 %198 to i64
  %228 = shl nsw i64 %227, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %225, ptr align 1 %226, i64 %228, i1 false)
  %229 = icmp eq i32 %202, 0
  br i1 %229, label %235, label %230

230:                                              ; preds = %204
  %231 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  %232 = load ptr, ptr %231, align 8, !tbaa !35
  %233 = icmp eq ptr %232, null
  br i1 %233, label %235, label %234

234:                                              ; preds = %230
  tail call void @_ZdaPv(ptr noundef nonnull %232) #10
  br label %235

235:                                              ; preds = %234, %230, %204
  %236 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  store ptr %220, ptr %236, align 8, !tbaa !35
  store ptr %225, ptr %196, align 8, !tbaa !34
  store i32 %216, ptr %201, align 4, !tbaa !31
  %237 = load ptr, ptr %195, align 8, !tbaa !26
  br label %238

238:                                              ; preds = %192, %200, %235
  %239 = phi ptr [ %196, %192 ], [ %196, %200 ], [ %237, %235 ]
  store i32 %148, ptr %197, align 8, !tbaa !28
  %240 = load ptr, ptr %239, align 8, !tbaa !34
  %241 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 4, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !26
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 2
  %244 = load i32, ptr %243, align 8, !tbaa !28
  %245 = icmp slt i32 %244, %148
  br i1 %245, label %246, label %284

246:                                              ; preds = %238
  %247 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 3
  %248 = load i32, ptr %247, align 4, !tbaa !31
  %249 = icmp slt i32 %248, %148
  br i1 %249, label %250, label %284

250:                                              ; preds = %246
  %251 = sitofp i32 %248 to float
  %252 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 5
  %253 = load float, ptr %252, align 4, !tbaa !32
  %254 = fmul float %253, %251
  %255 = fptosi float %254 to i32
  %256 = tail call i32 @llvm.smax.i32(i32 %255, i32 %148)
  %257 = sub nsw i32 %256, %248
  %258 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 6
  %259 = load i32, ptr %258, align 8, !tbaa !33
  %260 = icmp slt i32 %257, %259
  %261 = add nsw i32 %259, %248
  %262 = select i1 %260, i32 %261, i32 %256
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 1
  %265 = add nsw i64 %264, 31
  %266 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %265) #9
  %267 = getelementptr inbounds i8, ptr %266, i64 31
  %268 = ptrtoint ptr %267 to i64
  %269 = and i64 %268, 31
  %270 = sub nsw i64 0, %269
  %271 = getelementptr inbounds i8, ptr %267, i64 %270
  %272 = load ptr, ptr %242, align 8, !tbaa !34
  %273 = sext i32 %244 to i64
  %274 = shl nsw i64 %273, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %271, ptr align 1 %272, i64 %274, i1 false)
  %275 = icmp eq i32 %248, 0
  br i1 %275, label %281, label %276

276:                                              ; preds = %250
  %277 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  %278 = load ptr, ptr %277, align 8, !tbaa !35
  %279 = icmp eq ptr %278, null
  br i1 %279, label %281, label %280

280:                                              ; preds = %276
  tail call void @_ZdaPv(ptr noundef nonnull %278) #10
  br label %281

281:                                              ; preds = %280, %276, %250
  %282 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  store ptr %266, ptr %282, align 8, !tbaa !35
  store ptr %271, ptr %242, align 8, !tbaa !34
  store i32 %262, ptr %247, align 4, !tbaa !31
  %283 = load ptr, ptr %241, align 8, !tbaa !26
  br label %284

284:                                              ; preds = %238, %246, %281
  %285 = phi ptr [ %242, %238 ], [ %242, %246 ], [ %283, %281 ]
  store i32 %148, ptr %243, align 8, !tbaa !28
  %286 = load ptr, ptr %285, align 8, !tbaa !34
  %287 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 5, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !26
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 2
  %290 = load i32, ptr %289, align 8, !tbaa !28
  %291 = icmp slt i32 %290, %148
  br i1 %291, label %292, label %330

292:                                              ; preds = %284
  %293 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 3
  %294 = load i32, ptr %293, align 4, !tbaa !31
  %295 = icmp slt i32 %294, %148
  br i1 %295, label %296, label %330

296:                                              ; preds = %292
  %297 = sitofp i32 %294 to float
  %298 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 5
  %299 = load float, ptr %298, align 4, !tbaa !32
  %300 = fmul float %299, %297
  %301 = fptosi float %300 to i32
  %302 = tail call i32 @llvm.smax.i32(i32 %301, i32 %148)
  %303 = sub nsw i32 %302, %294
  %304 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 6
  %305 = load i32, ptr %304, align 8, !tbaa !33
  %306 = icmp slt i32 %303, %305
  %307 = add nsw i32 %305, %294
  %308 = select i1 %306, i32 %307, i32 %302
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 1
  %311 = add nsw i64 %310, 31
  %312 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %311) #9
  %313 = getelementptr inbounds i8, ptr %312, i64 31
  %314 = ptrtoint ptr %313 to i64
  %315 = and i64 %314, 31
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds i8, ptr %313, i64 %316
  %318 = load ptr, ptr %288, align 8, !tbaa !34
  %319 = sext i32 %290 to i64
  %320 = shl nsw i64 %319, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %317, ptr align 1 %318, i64 %320, i1 false)
  %321 = icmp eq i32 %294, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %296
  %323 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  %324 = load ptr, ptr %323, align 8, !tbaa !35
  %325 = icmp eq ptr %324, null
  br i1 %325, label %327, label %326

326:                                              ; preds = %322
  tail call void @_ZdaPv(ptr noundef nonnull %324) #10
  br label %327

327:                                              ; preds = %326, %322, %296
  %328 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  store ptr %312, ptr %328, align 8, !tbaa !35
  store ptr %317, ptr %288, align 8, !tbaa !34
  store i32 %308, ptr %293, align 4, !tbaa !31
  %329 = load ptr, ptr %287, align 8, !tbaa !26
  br label %330

330:                                              ; preds = %284, %292, %327
  %331 = phi ptr [ %288, %284 ], [ %288, %292 ], [ %329, %327 ]
  store i32 %148, ptr %289, align 8, !tbaa !28
  %332 = load ptr, ptr %331, align 8, !tbaa !34
  %333 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 6, i32 1
  %334 = load ptr, ptr %333, align 8, !tbaa !26
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 2
  %336 = load i32, ptr %335, align 8, !tbaa !28
  %337 = icmp slt i32 %336, %148
  br i1 %337, label %338, label %376

338:                                              ; preds = %330
  %339 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 3
  %340 = load i32, ptr %339, align 4, !tbaa !31
  %341 = icmp slt i32 %340, %148
  br i1 %341, label %342, label %376

342:                                              ; preds = %338
  %343 = sitofp i32 %340 to float
  %344 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 5
  %345 = load float, ptr %344, align 4, !tbaa !32
  %346 = fmul float %345, %343
  %347 = fptosi float %346 to i32
  %348 = tail call i32 @llvm.smax.i32(i32 %347, i32 %148)
  %349 = sub nsw i32 %348, %340
  %350 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 6
  %351 = load i32, ptr %350, align 8, !tbaa !33
  %352 = icmp slt i32 %349, %351
  %353 = add nsw i32 %351, %340
  %354 = select i1 %352, i32 %353, i32 %348
  %355 = sext i32 %354 to i64
  %356 = shl nsw i64 %355, 1
  %357 = add nsw i64 %356, 31
  %358 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %357) #9
  %359 = getelementptr inbounds i8, ptr %358, i64 31
  %360 = ptrtoint ptr %359 to i64
  %361 = and i64 %360, 31
  %362 = sub nsw i64 0, %361
  %363 = getelementptr inbounds i8, ptr %359, i64 %362
  %364 = load ptr, ptr %334, align 8, !tbaa !34
  %365 = sext i32 %336 to i64
  %366 = shl nsw i64 %365, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %363, ptr align 1 %364, i64 %366, i1 false)
  %367 = icmp eq i32 %340, 0
  br i1 %367, label %373, label %368

368:                                              ; preds = %342
  %369 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  %370 = load ptr, ptr %369, align 8, !tbaa !35
  %371 = icmp eq ptr %370, null
  br i1 %371, label %373, label %372

372:                                              ; preds = %368
  tail call void @_ZdaPv(ptr noundef nonnull %370) #10
  br label %373

373:                                              ; preds = %372, %368, %342
  %374 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  store ptr %358, ptr %374, align 8, !tbaa !35
  store ptr %363, ptr %334, align 8, !tbaa !34
  store i32 %354, ptr %339, align 4, !tbaa !31
  %375 = load ptr, ptr %333, align 8, !tbaa !26
  br label %376

376:                                              ; preds = %330, %338, %373
  %377 = phi ptr [ %334, %330 ], [ %334, %338 ], [ %375, %373 ]
  store i32 %148, ptr %335, align 8, !tbaa !28
  %378 = load ptr, ptr %377, align 8, !tbaa !34
  %379 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 15, i32 1
  %380 = load ptr, ptr %379, align 8, !tbaa !26
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 2
  %382 = load i32, ptr %381, align 8, !tbaa !28
  %383 = icmp slt i32 %382, %148
  br i1 %383, label %384, label %422

384:                                              ; preds = %376
  %385 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 3
  %386 = load i32, ptr %385, align 4, !tbaa !31
  %387 = icmp slt i32 %386, %148
  br i1 %387, label %388, label %422

388:                                              ; preds = %384
  %389 = sitofp i32 %386 to float
  %390 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 5
  %391 = load float, ptr %390, align 4, !tbaa !32
  %392 = fmul float %391, %389
  %393 = fptosi float %392 to i32
  %394 = tail call i32 @llvm.smax.i32(i32 %393, i32 %148)
  %395 = sub nsw i32 %394, %386
  %396 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 6
  %397 = load i32, ptr %396, align 8, !tbaa !33
  %398 = icmp slt i32 %395, %397
  %399 = add nsw i32 %397, %386
  %400 = select i1 %398, i32 %399, i32 %394
  %401 = sext i32 %400 to i64
  %402 = shl nsw i64 %401, 1
  %403 = add nsw i64 %402, 31
  %404 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %403) #9
  %405 = getelementptr inbounds i8, ptr %404, i64 31
  %406 = ptrtoint ptr %405 to i64
  %407 = and i64 %406, 31
  %408 = sub nsw i64 0, %407
  %409 = getelementptr inbounds i8, ptr %405, i64 %408
  %410 = load ptr, ptr %380, align 8, !tbaa !34
  %411 = sext i32 %382 to i64
  %412 = shl nsw i64 %411, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %409, ptr align 1 %410, i64 %412, i1 false)
  %413 = icmp eq i32 %386, 0
  br i1 %413, label %419, label %414

414:                                              ; preds = %388
  %415 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  %416 = load ptr, ptr %415, align 8, !tbaa !35
  %417 = icmp eq ptr %416, null
  br i1 %417, label %419, label %418

418:                                              ; preds = %414
  tail call void @_ZdaPv(ptr noundef nonnull %416) #10
  br label %419

419:                                              ; preds = %418, %414, %388
  %420 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  store ptr %404, ptr %420, align 8, !tbaa !35
  store ptr %409, ptr %380, align 8, !tbaa !34
  store i32 %400, ptr %385, align 4, !tbaa !31
  %421 = load ptr, ptr %379, align 8, !tbaa !26
  br label %422

422:                                              ; preds = %376, %384, %419
  %423 = phi ptr [ %380, %376 ], [ %380, %384 ], [ %421, %419 ]
  store i32 %148, ptr %381, align 8, !tbaa !28
  %424 = load ptr, ptr %423, align 8, !tbaa !34
  %425 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 16, i32 1
  %426 = load ptr, ptr %425, align 8, !tbaa !26
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 2
  %428 = load i32, ptr %427, align 8, !tbaa !28
  %429 = icmp slt i32 %428, %148
  br i1 %429, label %430, label %468

430:                                              ; preds = %422
  %431 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 3
  %432 = load i32, ptr %431, align 4, !tbaa !31
  %433 = icmp slt i32 %432, %148
  br i1 %433, label %434, label %468

434:                                              ; preds = %430
  %435 = sitofp i32 %432 to float
  %436 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 5
  %437 = load float, ptr %436, align 4, !tbaa !32
  %438 = fmul float %437, %435
  %439 = fptosi float %438 to i32
  %440 = tail call i32 @llvm.smax.i32(i32 %439, i32 %148)
  %441 = sub nsw i32 %440, %432
  %442 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 6
  %443 = load i32, ptr %442, align 8, !tbaa !33
  %444 = icmp slt i32 %441, %443
  %445 = add nsw i32 %443, %432
  %446 = select i1 %444, i32 %445, i32 %440
  %447 = sext i32 %446 to i64
  %448 = shl nsw i64 %447, 1
  %449 = add nsw i64 %448, 31
  %450 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %449) #9
  %451 = getelementptr inbounds i8, ptr %450, i64 31
  %452 = ptrtoint ptr %451 to i64
  %453 = and i64 %452, 31
  %454 = sub nsw i64 0, %453
  %455 = getelementptr inbounds i8, ptr %451, i64 %454
  %456 = load ptr, ptr %426, align 8, !tbaa !34
  %457 = sext i32 %428 to i64
  %458 = shl nsw i64 %457, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %455, ptr align 1 %456, i64 %458, i1 false)
  %459 = icmp eq i32 %432, 0
  br i1 %459, label %465, label %460

460:                                              ; preds = %434
  %461 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  %462 = load ptr, ptr %461, align 8, !tbaa !35
  %463 = icmp eq ptr %462, null
  br i1 %463, label %465, label %464

464:                                              ; preds = %460
  tail call void @_ZdaPv(ptr noundef nonnull %462) #10
  br label %465

465:                                              ; preds = %464, %460, %434
  %466 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  store ptr %450, ptr %466, align 8, !tbaa !35
  store ptr %455, ptr %426, align 8, !tbaa !34
  store i32 %446, ptr %431, align 4, !tbaa !31
  %467 = load ptr, ptr %425, align 8, !tbaa !26
  br label %468

468:                                              ; preds = %422, %430, %465
  %469 = phi ptr [ %426, %422 ], [ %426, %430 ], [ %467, %465 ]
  store i32 %148, ptr %427, align 8, !tbaa !28
  %470 = load ptr, ptr %469, align 8, !tbaa !34
  br i1 %147, label %603, label %471

471:                                              ; preds = %468
  %472 = icmp sgt i32 %41, 0
  br i1 %472, label %473, label %615

473:                                              ; preds = %471
  %474 = zext i32 %41 to i64
  %475 = and i64 %474, 1
  %476 = icmp eq i32 %41, 1
  br i1 %476, label %509, label %477

477:                                              ; preds = %473
  %478 = and i64 %474, 4294967294
  br label %479

479:                                              ; preds = %504, %477
  %480 = phi i64 [ 0, %477 ], [ %506, %504 ]
  %481 = phi i32 [ 0, %477 ], [ %505, %504 ]
  %482 = phi i64 [ 0, %477 ], [ %507, %504 ]
  %483 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %480, i32 4
  %484 = load i8, ptr %483, align 1
  %485 = and i8 %484, 7
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %492, label %487

487:                                              ; preds = %479
  %488 = trunc i64 %480 to i16
  %489 = add nsw i32 %481, 1
  %490 = sext i32 %481 to i64
  %491 = getelementptr inbounds i16, ptr %194, i64 %490
  store i16 %488, ptr %491, align 2, !tbaa !45
  br label %492

492:                                              ; preds = %479, %487
  %493 = phi i32 [ %489, %487 ], [ %481, %479 ]
  %494 = or i64 %480, 1
  %495 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %494, i32 4
  %496 = load i8, ptr %495, align 1
  %497 = and i8 %496, 7
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %504, label %499

499:                                              ; preds = %492
  %500 = trunc i64 %494 to i16
  %501 = add nsw i32 %493, 1
  %502 = sext i32 %493 to i64
  %503 = getelementptr inbounds i16, ptr %194, i64 %502
  store i16 %500, ptr %503, align 2, !tbaa !45
  br label %504

504:                                              ; preds = %499, %492
  %505 = phi i32 [ %501, %499 ], [ %493, %492 ]
  %506 = add nuw nsw i64 %480, 2
  %507 = add i64 %482, 2
  %508 = icmp eq i64 %507, %478
  br i1 %508, label %509, label %479

509:                                              ; preds = %504, %473
  %510 = phi i32 [ undef, %473 ], [ %505, %504 ]
  %511 = phi i64 [ 0, %473 ], [ %506, %504 ]
  %512 = phi i32 [ 0, %473 ], [ %505, %504 ]
  %513 = icmp eq i64 %475, 0
  br i1 %513, label %524, label %514

514:                                              ; preds = %509
  %515 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %511, i32 4
  %516 = load i8, ptr %515, align 1
  %517 = and i8 %516, 7
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %524, label %519

519:                                              ; preds = %514
  %520 = trunc i64 %511 to i16
  %521 = add nsw i32 %512, 1
  %522 = sext i32 %512 to i64
  %523 = getelementptr inbounds i16, ptr %194, i64 %522
  store i16 %520, ptr %523, align 2, !tbaa !45
  br label %524

524:                                              ; preds = %514, %519, %509
  %525 = phi i32 [ %510, %509 ], [ %521, %519 ], [ %512, %514 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %534, label %527

527:                                              ; preds = %524
  %528 = add nsw i32 %525, -1
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i16, ptr %194, i64 %529
  %531 = load i16, ptr %530, align 2, !tbaa !45
  %532 = sext i32 %525 to i64
  %533 = getelementptr inbounds i16, ptr %194, i64 %532
  store i16 %531, ptr %533, align 2, !tbaa !45
  br label %534

534:                                              ; preds = %527, %524
  %535 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %536 = icmp ne i32 %535, 0
  %537 = icmp sgt i32 %525, 0
  %538 = and i1 %536, %537
  br i1 %538, label %539, label %615

539:                                              ; preds = %534
  %540 = zext i32 %525 to i64
  %541 = and i64 %540, 1
  %542 = icmp eq i32 %525, 1
  br i1 %542, label %577, label %543

543:                                              ; preds = %539
  %544 = and i64 %540, 4294967294
  br label %545

545:                                              ; preds = %572, %543
  %546 = phi i64 [ 0, %543 ], [ %574, %572 ]
  %547 = phi i32 [ 0, %543 ], [ %573, %572 ]
  %548 = phi i64 [ 0, %543 ], [ %575, %572 ]
  %549 = getelementptr inbounds i16, ptr %194, i64 %546
  %550 = load i16, ptr %549, align 2, !tbaa !45
  %551 = zext i16 %550 to i64
  %552 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %551
  %553 = load i32, ptr %552, align 4
  %554 = icmp sgt i32 %553, -1
  br i1 %554, label %555, label %559

555:                                              ; preds = %545
  %556 = add nsw i32 %547, 1
  %557 = sext i32 %547 to i64
  %558 = getelementptr inbounds i16, ptr %240, i64 %557
  store i16 %550, ptr %558, align 2, !tbaa !45
  br label %559

559:                                              ; preds = %545, %555
  %560 = phi i32 [ %547, %545 ], [ %556, %555 ]
  %561 = or i64 %546, 1
  %562 = getelementptr inbounds i16, ptr %194, i64 %561
  %563 = load i16, ptr %562, align 2, !tbaa !45
  %564 = zext i16 %563 to i64
  %565 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %564
  %566 = load i32, ptr %565, align 4
  %567 = icmp sgt i32 %566, -1
  br i1 %567, label %568, label %572

568:                                              ; preds = %559
  %569 = add nsw i32 %560, 1
  %570 = sext i32 %560 to i64
  %571 = getelementptr inbounds i16, ptr %240, i64 %570
  store i16 %563, ptr %571, align 2, !tbaa !45
  br label %572

572:                                              ; preds = %568, %559
  %573 = phi i32 [ %560, %559 ], [ %569, %568 ]
  %574 = add nuw nsw i64 %546, 2
  %575 = add i64 %548, 2
  %576 = icmp eq i64 %575, %544
  br i1 %576, label %577, label %545

577:                                              ; preds = %572, %539
  %578 = phi i32 [ undef, %539 ], [ %573, %572 ]
  %579 = phi i64 [ 0, %539 ], [ %574, %572 ]
  %580 = phi i32 [ 0, %539 ], [ %573, %572 ]
  %581 = icmp eq i64 %541, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %577
  %583 = getelementptr inbounds i16, ptr %194, i64 %579
  %584 = load i16, ptr %583, align 2, !tbaa !45
  %585 = zext i16 %584 to i64
  %586 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %585
  %587 = load i32, ptr %586, align 4
  %588 = icmp sgt i32 %587, -1
  br i1 %588, label %589, label %593

589:                                              ; preds = %582
  %590 = add nsw i32 %580, 1
  %591 = sext i32 %580 to i64
  %592 = getelementptr inbounds i16, ptr %240, i64 %591
  store i16 %584, ptr %592, align 2, !tbaa !45
  br label %593

593:                                              ; preds = %582, %589, %577
  %594 = phi i32 [ %578, %577 ], [ %580, %582 ], [ %590, %589 ]
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %615, label %596

596:                                              ; preds = %593
  %597 = add nsw i32 %594, -1
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, ptr %240, i64 %598
  %600 = load i16, ptr %599, align 2, !tbaa !45
  %601 = sext i32 %594 to i64
  %602 = getelementptr inbounds i16, ptr %240, i64 %601
  store i16 %600, ptr %602, align 2, !tbaa !45
  br label %615

603:                                              ; preds = %468
  %604 = load ptr, ptr %12, align 8, !tbaa !47
  %605 = load i32, ptr %17, align 8, !tbaa !19
  %606 = add nsw i32 %605, 1
  store i32 %606, ptr %17, align 8, !tbaa !19
  %607 = sext i32 %605 to i64
  %608 = getelementptr inbounds i16, ptr %604, i64 %607
  %609 = load i16, ptr %608, align 2, !tbaa !45
  %610 = zext i16 %609 to i32
  %611 = icmp eq i32 %39, %610
  br i1 %611, label %632, label %612

612:                                              ; preds = %603
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %613 = load ptr, ptr %12, align 8, !tbaa !47
  %614 = load i32, ptr %17, align 8, !tbaa !19
  br label %632

615:                                              ; preds = %471, %596, %593, %534
  %616 = phi i32 [ %525, %596 ], [ %525, %593 ], [ %525, %534 ], [ 0, %471 ]
  %617 = phi i32 [ %594, %596 ], [ 0, %593 ], [ 0, %534 ], [ 0, %471 ]
  %618 = load i32, ptr %17, align 8, !tbaa !19
  %619 = trunc i32 %39 to i16
  %620 = load ptr, ptr %12, align 8, !tbaa !47
  %621 = sext i32 %618 to i64
  %622 = getelementptr inbounds i16, ptr %620, i64 %621
  store i16 %619, ptr %622, align 2, !tbaa !45
  %623 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %624 = load i32, ptr %623, align 4, !tbaa !48
  %625 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %626 = load i32, ptr %625, align 4, !tbaa !49
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %628 = load ptr, ptr %627, align 8, !tbaa !24
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %630 = load ptr, ptr %629, align 8, !tbaa !24
  %631 = add nsw i32 %618, 2
  store i32 %631, ptr %17, align 8, !tbaa !19
  br label %648

632:                                              ; preds = %612, %603
  %633 = phi i32 [ %606, %603 ], [ %614, %612 ]
  %634 = phi ptr [ %604, %603 ], [ %613, %612 ]
  %635 = sext i32 %633 to i64
  %636 = getelementptr inbounds i16, ptr %634, i64 %635
  %637 = load i16, ptr %636, align 2, !tbaa !45
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  %640 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %641 = load i32, ptr %640, align 4, !tbaa !49
  %642 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %643 = load ptr, ptr %642, align 8, !tbaa !24
  %644 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %645 = load ptr, ptr %644, align 8, !tbaa !24
  %646 = add nsw i32 %633, 1
  store i32 %646, ptr %17, align 8, !tbaa !19
  %647 = zext i16 %637 to i32
  br label %648

648:                                              ; preds = %632, %615
  %649 = phi i32 [ %639, %632 ], [ %624, %615 ]
  %650 = phi i32 [ %641, %632 ], [ %626, %615 ]
  %651 = phi ptr [ %643, %632 ], [ %628, %615 ]
  %652 = phi ptr [ %645, %632 ], [ %630, %615 ]
  %653 = phi i32 [ 0, %632 ], [ %617, %615 ]
  %654 = phi i32 [ 0, %632 ], [ %616, %615 ]
  %655 = phi i32 [ %647, %632 ], [ 0, %615 ]
  %656 = add nsw i32 %650, -1
  %657 = icmp slt i32 %655, %39
  br i1 %657, label %658, label %2506

658:                                              ; preds = %648
  %659 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %660 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %661 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %662 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %663 = ptrtoint ptr %424 to i64
  %664 = add nsw i32 %41, 10
  %665 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %666 = ptrtoint ptr %470 to i64
  %667 = getelementptr inbounds i16, ptr %424, i64 1
  %668 = ptrtoint ptr %332 to i64
  %669 = ptrtoint ptr %378 to i64
  %670 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %671 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %672 = fneg double %32
  %673 = getelementptr inbounds double, ptr %6, i64 26
  %674 = getelementptr inbounds double, ptr %6, i64 28
  %675 = getelementptr inbounds double, ptr %6, i64 29
  %676 = getelementptr inbounds double, ptr %6, i64 31
  %677 = fadd double %33, -1.000000e+00
  %678 = fadd double %677, 1.000000e+00
  %679 = insertelement <2 x double> poison, double %27, i64 0
  %680 = shufflevector <2 x double> %679, <2 x double> poison, <2 x i32> zeroinitializer
  br label %681

681:                                              ; preds = %658, %2493
  %682 = phi i32 [ 0, %658 ], [ %2500, %2493 ]
  %683 = phi i32 [ %655, %658 ], [ %2499, %2493 ]
  %684 = phi ptr [ null, %658 ], [ %2498, %2493 ]
  %685 = phi ptr [ null, %658 ], [ %2497, %2493 ]
  %686 = phi ptr [ null, %658 ], [ %2496, %2493 ]
  %687 = phi i32 [ 0, %658 ], [ %2495, %2493 ]
  %688 = phi i32 [ %649, %658 ], [ %2494, %2493 ]
  %689 = phi <2 x double> [ zeroinitializer, %658 ], [ %2501, %2493 ]
  %690 = phi <2 x double> [ zeroinitializer, %658 ], [ %2502, %2493 ]
  %691 = phi <2 x double> [ zeroinitializer, %658 ], [ %2503, %2493 ]
  %692 = phi <2 x double> [ zeroinitializer, %658 ], [ %2504, %2493 ]
  %693 = sext i32 %683 to i64
  %694 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %693
  %695 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %693
  br i1 %147, label %708, label %696

696:                                              ; preds = %681
  %697 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %693, i32 4
  %698 = load i8, ptr %697, align 1
  %699 = lshr i8 %698, 3
  %700 = and i8 %699, 15
  %701 = zext i8 %700 to i32
  %702 = icmp eq i8 %700, 0
  br i1 %702, label %708, label %703

703:                                              ; preds = %696
  %704 = icmp eq i32 %688, 0
  br i1 %704, label %708, label %705

705:                                              ; preds = %703
  %706 = add nsw i32 %688, -1
  %707 = add nsw i32 %683, %701
  br label %2493

708:                                              ; preds = %703, %696, %681
  %709 = phi i32 [ %688, %681 ], [ %688, %696 ], [ %656, %703 ]
  %710 = load <2 x double>, ptr %694, align 8, !tbaa !15
  %711 = fadd <2 x double> %19, %710
  %712 = getelementptr inbounds %class.Vector, ptr %694, i64 0, i32 2
  %713 = load double, ptr %712, align 8, !tbaa !50
  %714 = fadd double %21, %713
  %715 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %693, i32 3
  %716 = load i8, ptr %715, align 2, !tbaa !52
  %717 = zext i8 %716 to i32
  %718 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %719 = fsub double %713, %718
  %720 = fmul double %10, %719
  %721 = tail call double @llvm.floor.f64(double %720)
  %722 = fptosi double %721 to i32
  %723 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %724 = icmp slt i32 %722, 0
  %725 = select i1 %724, i32 %723, i32 0
  %726 = icmp sgt i32 %723, %722
  %727 = select i1 %726, i32 0, i32 %723
  %728 = sub i32 %722, %727
  %729 = add i32 %728, %725
  br i1 %147, label %1961, label %730

730:                                              ; preds = %708
  %731 = load i32, ptr %695, align 4
  %732 = shl i32 %731, 2
  %733 = ashr exact i32 %732, 2
  %734 = load ptr, ptr %659, align 8, !tbaa !53
  %735 = sext i32 %733 to i64
  %736 = getelementptr inbounds %class.ExclusionCheck, ptr %734, i64 %735
  %737 = load i32, ptr %736, align 8, !tbaa !55
  %738 = getelementptr inbounds %class.ExclusionCheck, ptr %734, i64 %735, i32 1
  %739 = load i32, ptr %738, align 4, !tbaa !57
  %740 = getelementptr inbounds %class.ExclusionCheck, ptr %734, i64 %735, i32 2
  %741 = load ptr, ptr %740, align 8, !tbaa !58
  %742 = icmp eq ptr %741, null
  br i1 %742, label %747, label %743

743:                                              ; preds = %730
  %744 = sext i32 %737 to i64
  %745 = sub nsw i64 0, %744
  %746 = getelementptr inbounds i8, ptr %741, i64 %745
  br label %973

747:                                              ; preds = %730
  %748 = icmp eq ptr %684, null
  br i1 %748, label %836, label %749

749:                                              ; preds = %747
  %750 = load i32, ptr %685, align 4, !tbaa !5
  %751 = icmp slt i32 %750, 1
  br i1 %751, label %799, label %752

752:                                              ; preds = %749
  %753 = add nuw i32 %750, 1
  %754 = zext i32 %753 to i64
  %755 = add nsw i64 %754, -1
  %756 = add nsw i64 %754, -2
  %757 = and i64 %755, 3
  %758 = icmp ult i64 %756, 3
  br i1 %758, label %786, label %759

759:                                              ; preds = %752
  %760 = and i64 %755, -4
  br label %761

761:                                              ; preds = %761, %759
  %762 = phi i64 [ 1, %759 ], [ %783, %761 ]
  %763 = phi i64 [ 0, %759 ], [ %784, %761 ]
  %764 = getelementptr inbounds i32, ptr %685, i64 %762
  %765 = load i32, ptr %764, align 4, !tbaa !5
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i8, ptr %684, i64 %766
  store i8 0, ptr %767, align 1, !tbaa !59
  %768 = add nuw nsw i64 %762, 1
  %769 = getelementptr inbounds i32, ptr %685, i64 %768
  %770 = load i32, ptr %769, align 4, !tbaa !5
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i8, ptr %684, i64 %771
  store i8 0, ptr %772, align 1, !tbaa !59
  %773 = add nuw nsw i64 %762, 2
  %774 = getelementptr inbounds i32, ptr %685, i64 %773
  %775 = load i32, ptr %774, align 4, !tbaa !5
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i8, ptr %684, i64 %776
  store i8 0, ptr %777, align 1, !tbaa !59
  %778 = add nuw nsw i64 %762, 3
  %779 = getelementptr inbounds i32, ptr %685, i64 %778
  %780 = load i32, ptr %779, align 4, !tbaa !5
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i8, ptr %684, i64 %781
  store i8 0, ptr %782, align 1, !tbaa !59
  %783 = add nuw nsw i64 %762, 4
  %784 = add i64 %763, 4
  %785 = icmp eq i64 %784, %760
  br i1 %785, label %786, label %761

786:                                              ; preds = %761, %752
  %787 = phi i64 [ 1, %752 ], [ %783, %761 ]
  %788 = icmp eq i64 %757, 0
  br i1 %788, label %799, label %789

789:                                              ; preds = %786, %789
  %790 = phi i64 [ %796, %789 ], [ %787, %786 ]
  %791 = phi i64 [ %797, %789 ], [ 0, %786 ]
  %792 = getelementptr inbounds i32, ptr %685, i64 %790
  %793 = load i32, ptr %792, align 4, !tbaa !5
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds i8, ptr %684, i64 %794
  store i8 0, ptr %795, align 1, !tbaa !59
  %796 = add nuw nsw i64 %790, 1
  %797 = add i64 %791, 1
  %798 = icmp eq i64 %797, %757
  br i1 %798, label %799, label %789, !llvm.loop !90

799:                                              ; preds = %786, %789, %749
  %800 = load i32, ptr %686, align 4, !tbaa !5
  %801 = icmp slt i32 %800, 1
  br i1 %801, label %856, label %802

802:                                              ; preds = %799
  %803 = add nuw i32 %800, 1
  %804 = zext i32 %803 to i64
  %805 = add nsw i64 %804, -1
  %806 = add nsw i64 %804, -2
  %807 = and i64 %805, 3
  %808 = icmp ult i64 %806, 3
  br i1 %808, label %843, label %809

809:                                              ; preds = %802
  %810 = and i64 %805, -4
  br label %811

811:                                              ; preds = %811, %809
  %812 = phi i64 [ 1, %809 ], [ %833, %811 ]
  %813 = phi i64 [ 0, %809 ], [ %834, %811 ]
  %814 = getelementptr inbounds i32, ptr %686, i64 %812
  %815 = load i32, ptr %814, align 4, !tbaa !5
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i8, ptr %684, i64 %816
  store i8 0, ptr %817, align 1, !tbaa !59
  %818 = add nuw nsw i64 %812, 1
  %819 = getelementptr inbounds i32, ptr %686, i64 %818
  %820 = load i32, ptr %819, align 4, !tbaa !5
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds i8, ptr %684, i64 %821
  store i8 0, ptr %822, align 1, !tbaa !59
  %823 = add nuw nsw i64 %812, 2
  %824 = getelementptr inbounds i32, ptr %686, i64 %823
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i8, ptr %684, i64 %826
  store i8 0, ptr %827, align 1, !tbaa !59
  %828 = add nuw nsw i64 %812, 3
  %829 = getelementptr inbounds i32, ptr %686, i64 %828
  %830 = load i32, ptr %829, align 4, !tbaa !5
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i8, ptr %684, i64 %831
  store i8 0, ptr %832, align 1, !tbaa !59
  %833 = add nuw nsw i64 %812, 4
  %834 = add i64 %813, 4
  %835 = icmp eq i64 %834, %810
  br i1 %835, label %843, label %811

836:                                              ; preds = %747
  %837 = load i32, ptr %660, align 8, !tbaa !62
  %838 = tail call i32 @llvm.smax.i32(i32 %837, i32 -1)
  %839 = sext i32 %838 to i64
  %840 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %839) #9
  %841 = load i32, ptr %660, align 8, !tbaa !62
  %842 = sext i32 %841 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %840, i8 0, i64 %842, i1 false)
  br label %856

843:                                              ; preds = %811, %802
  %844 = phi i64 [ 1, %802 ], [ %833, %811 ]
  %845 = icmp eq i64 %807, 0
  br i1 %845, label %856, label %846

846:                                              ; preds = %843, %846
  %847 = phi i64 [ %853, %846 ], [ %844, %843 ]
  %848 = phi i64 [ %854, %846 ], [ 0, %843 ]
  %849 = getelementptr inbounds i32, ptr %686, i64 %847
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i8, ptr %684, i64 %851
  store i8 0, ptr %852, align 1, !tbaa !59
  %853 = add nuw nsw i64 %847, 1
  %854 = add i64 %848, 1
  %855 = icmp eq i64 %854, %807
  br i1 %855, label %856, label %846, !llvm.loop !91

856:                                              ; preds = %843, %846, %799, %836
  %857 = phi ptr [ %840, %836 ], [ %684, %799 ], [ %684, %846 ], [ %684, %843 ]
  %858 = load i32, ptr %695, align 4
  %859 = shl i32 %858, 2
  %860 = ashr exact i32 %859, 2
  %861 = load ptr, ptr %661, align 8, !tbaa !64
  %862 = sext i32 %860 to i64
  %863 = getelementptr inbounds ptr, ptr %861, i64 %862
  %864 = load ptr, ptr %863, align 8, !tbaa !24
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = icmp slt i32 %865, 1
  br i1 %866, label %919, label %867

867:                                              ; preds = %856
  %868 = add nuw i32 %865, 1
  %869 = zext i32 %868 to i64
  %870 = add nsw i64 %869, -1
  %871 = add nsw i64 %869, -2
  %872 = and i64 %870, 3
  %873 = icmp ult i64 %871, 3
  br i1 %873, label %901, label %874

874:                                              ; preds = %867
  %875 = and i64 %870, -4
  br label %876

876:                                              ; preds = %876, %874
  %877 = phi i64 [ 1, %874 ], [ %898, %876 ]
  %878 = phi i64 [ 0, %874 ], [ %899, %876 ]
  %879 = getelementptr inbounds i32, ptr %864, i64 %877
  %880 = load i32, ptr %879, align 4, !tbaa !5
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i8, ptr %857, i64 %881
  store i8 1, ptr %882, align 1, !tbaa !59
  %883 = add nuw nsw i64 %877, 1
  %884 = getelementptr inbounds i32, ptr %864, i64 %883
  %885 = load i32, ptr %884, align 4, !tbaa !5
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i8, ptr %857, i64 %886
  store i8 1, ptr %887, align 1, !tbaa !59
  %888 = add nuw nsw i64 %877, 2
  %889 = getelementptr inbounds i32, ptr %864, i64 %888
  %890 = load i32, ptr %889, align 4, !tbaa !5
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds i8, ptr %857, i64 %891
  store i8 1, ptr %892, align 1, !tbaa !59
  %893 = add nuw nsw i64 %877, 3
  %894 = getelementptr inbounds i32, ptr %864, i64 %893
  %895 = load i32, ptr %894, align 4, !tbaa !5
  %896 = sext i32 %895 to i64
  %897 = getelementptr inbounds i8, ptr %857, i64 %896
  store i8 1, ptr %897, align 1, !tbaa !59
  %898 = add nuw nsw i64 %877, 4
  %899 = add i64 %878, 4
  %900 = icmp eq i64 %899, %875
  br i1 %900, label %901, label %876

901:                                              ; preds = %876, %867
  %902 = phi i64 [ 1, %867 ], [ %898, %876 ]
  %903 = icmp eq i64 %872, 0
  br i1 %903, label %914, label %904

904:                                              ; preds = %901, %904
  %905 = phi i64 [ %911, %904 ], [ %902, %901 ]
  %906 = phi i64 [ %912, %904 ], [ 0, %901 ]
  %907 = getelementptr inbounds i32, ptr %864, i64 %905
  %908 = load i32, ptr %907, align 4, !tbaa !5
  %909 = sext i32 %908 to i64
  %910 = getelementptr inbounds i8, ptr %857, i64 %909
  store i8 1, ptr %910, align 1, !tbaa !59
  %911 = add nuw nsw i64 %905, 1
  %912 = add i64 %906, 1
  %913 = icmp eq i64 %912, %872
  br i1 %913, label %914, label %904, !llvm.loop !92

914:                                              ; preds = %904, %901
  %915 = load i32, ptr %695, align 4
  %916 = shl i32 %915, 2
  %917 = ashr exact i32 %916, 2
  %918 = sext i32 %917 to i64
  br label %919

919:                                              ; preds = %914, %856
  %920 = phi i64 [ %918, %914 ], [ %862, %856 ]
  %921 = load ptr, ptr %662, align 8, !tbaa !66
  %922 = getelementptr inbounds ptr, ptr %921, i64 %920
  %923 = load ptr, ptr %922, align 8, !tbaa !24
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = icmp slt i32 %924, 1
  br i1 %925, label %973, label %926

926:                                              ; preds = %919
  %927 = add nuw i32 %924, 1
  %928 = zext i32 %927 to i64
  %929 = add nsw i64 %928, -1
  %930 = add nsw i64 %928, -2
  %931 = and i64 %929, 3
  %932 = icmp ult i64 %930, 3
  br i1 %932, label %960, label %933

933:                                              ; preds = %926
  %934 = and i64 %929, -4
  br label %935

935:                                              ; preds = %935, %933
  %936 = phi i64 [ 1, %933 ], [ %957, %935 ]
  %937 = phi i64 [ 0, %933 ], [ %958, %935 ]
  %938 = getelementptr inbounds i32, ptr %923, i64 %936
  %939 = load i32, ptr %938, align 4, !tbaa !5
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds i8, ptr %857, i64 %940
  store i8 2, ptr %941, align 1, !tbaa !59
  %942 = add nuw nsw i64 %936, 1
  %943 = getelementptr inbounds i32, ptr %923, i64 %942
  %944 = load i32, ptr %943, align 4, !tbaa !5
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds i8, ptr %857, i64 %945
  store i8 2, ptr %946, align 1, !tbaa !59
  %947 = add nuw nsw i64 %936, 2
  %948 = getelementptr inbounds i32, ptr %923, i64 %947
  %949 = load i32, ptr %948, align 4, !tbaa !5
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds i8, ptr %857, i64 %950
  store i8 2, ptr %951, align 1, !tbaa !59
  %952 = add nuw nsw i64 %936, 3
  %953 = getelementptr inbounds i32, ptr %923, i64 %952
  %954 = load i32, ptr %953, align 4, !tbaa !5
  %955 = sext i32 %954 to i64
  %956 = getelementptr inbounds i8, ptr %857, i64 %955
  store i8 2, ptr %956, align 1, !tbaa !59
  %957 = add nuw nsw i64 %936, 4
  %958 = add i64 %937, 4
  %959 = icmp eq i64 %958, %934
  br i1 %959, label %960, label %935

960:                                              ; preds = %935, %926
  %961 = phi i64 [ 1, %926 ], [ %957, %935 ]
  %962 = icmp eq i64 %931, 0
  br i1 %962, label %973, label %963

963:                                              ; preds = %960, %963
  %964 = phi i64 [ %970, %963 ], [ %961, %960 ]
  %965 = phi i64 [ %971, %963 ], [ 0, %960 ]
  %966 = getelementptr inbounds i32, ptr %923, i64 %964
  %967 = load i32, ptr %966, align 4, !tbaa !5
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds i8, ptr %857, i64 %968
  store i8 2, ptr %969, align 1, !tbaa !59
  %970 = add nuw nsw i64 %964, 1
  %971 = add i64 %965, 1
  %972 = icmp eq i64 %971, %931
  br i1 %972, label %973, label %963, !llvm.loop !93

973:                                              ; preds = %960, %963, %919, %743
  %974 = phi ptr [ %746, %743 ], [ %857, %919 ], [ %857, %963 ], [ %857, %960 ]
  %975 = phi ptr [ %686, %743 ], [ %923, %919 ], [ %923, %963 ], [ %923, %960 ]
  %976 = phi ptr [ %685, %743 ], [ %864, %919 ], [ %864, %963 ], [ %864, %960 ]
  %977 = phi ptr [ %684, %743 ], [ %857, %919 ], [ %857, %963 ], [ %857, %960 ]
  %978 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %693, i32 4
  %979 = load i8, ptr %978, align 1
  %980 = and i8 %979, 7
  %981 = icmp eq i8 %980, 0
  %982 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %981, label %1165, label %983

983:                                              ; preds = %973
  %984 = icmp eq i32 %982, 0
  br i1 %984, label %991, label %985

985:                                              ; preds = %983
  %986 = load i32, ptr %695, align 4
  %987 = freeze i32 %986
  %988 = icmp slt i32 %987, 0
  %989 = select i1 %988, ptr %240, ptr %194
  %990 = select i1 %988, i32 %653, i32 %654
  br label %991

991:                                              ; preds = %985, %983
  %992 = phi ptr [ %194, %983 ], [ %989, %985 ]
  %993 = phi i32 [ %654, %983 ], [ %990, %985 ]
  %994 = icmp sgt i32 %993, 0
  br i1 %994, label %995, label %1146

995:                                              ; preds = %991
  %996 = icmp ugt i32 %993, 6
  br i1 %996, label %997, label %1081

997:                                              ; preds = %995
  %998 = add nsw i32 %993, -2
  %999 = getelementptr inbounds i16, ptr %992, i64 1
  %1000 = load i16, ptr %999, align 2, !tbaa !45
  %1001 = zext i16 %1000 to i64
  %1002 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1001
  %1003 = getelementptr inbounds %class.Vector, ptr %1002, i64 0, i32 2
  %1004 = load double, ptr %1003, align 8, !tbaa !50
  %1005 = load i16, ptr %992, align 2, !tbaa !45
  %1006 = zext i16 %1005 to i64
  %1007 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1006
  %1008 = getelementptr inbounds %class.Vector, ptr %1007, i64 0, i32 2
  %1009 = load double, ptr %1008, align 8, !tbaa !50
  %1010 = getelementptr inbounds %class.Vector, ptr %1002, i64 0, i32 1
  %1011 = load double, ptr %1010, align 8, !tbaa !68
  %1012 = getelementptr inbounds %class.Vector, ptr %1007, i64 0, i32 1
  %1013 = load double, ptr %1012, align 8, !tbaa !68
  %1014 = load double, ptr %1002, align 8, !tbaa !69
  %1015 = load double, ptr %1007, align 8, !tbaa !69
  %1016 = zext i32 %998 to i64
  %1017 = insertelement <2 x double> poison, double %1004, i64 0
  %1018 = insertelement <2 x double> %1017, double %1009, i64 1
  %1019 = insertelement <2 x double> poison, double %1011, i64 0
  %1020 = insertelement <2 x double> %1019, double %1013, i64 1
  %1021 = insertelement <2 x double> poison, double %1014, i64 0
  %1022 = insertelement <2 x double> %1021, double %1015, i64 1
  %1023 = insertelement <2 x double> poison, double %714, i64 0
  %1024 = shufflevector <2 x double> %1023, <2 x double> poison, <2 x i32> zeroinitializer
  %1025 = shufflevector <2 x double> %711, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1026 = shufflevector <2 x double> %711, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1027

1027:                                             ; preds = %997, %1027
  %1028 = phi i64 [ 2, %997 ], [ %1071, %1027 ]
  %1029 = phi i32 [ 0, %997 ], [ %1070, %1027 ]
  %1030 = phi i16 [ %1005, %997 ], [ %1037, %1027 ]
  %1031 = phi i16 [ %1000, %997 ], [ %1040, %1027 ]
  %1032 = phi <2 x double> [ %1018, %997 ], [ %1074, %1027 ]
  %1033 = phi <2 x double> [ %1020, %997 ], [ %1076, %1027 ]
  %1034 = phi <2 x double> [ %1022, %997 ], [ %1078, %1027 ]
  %1035 = fsub <2 x double> %1024, %1032
  %1036 = getelementptr inbounds i16, ptr %992, i64 %1028
  %1037 = load i16, ptr %1036, align 2, !tbaa !45
  %1038 = or i64 %1028, 1
  %1039 = getelementptr inbounds i16, ptr %992, i64 %1038
  %1040 = load i16, ptr %1039, align 2, !tbaa !45
  %1041 = zext i16 %1037 to i64
  %1042 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1041
  %1043 = load double, ptr %1042, align 8, !tbaa !69
  %1044 = zext i16 %1040 to i64
  %1045 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1044
  %1046 = load double, ptr %1045, align 8, !tbaa !69
  %1047 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 1
  %1048 = load double, ptr %1047, align 8, !tbaa !68
  %1049 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 1
  %1050 = load double, ptr %1049, align 8, !tbaa !68
  %1051 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 2
  %1052 = load double, ptr %1051, align 8, !tbaa !50
  %1053 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 2
  %1054 = load double, ptr %1053, align 8, !tbaa !50
  %1055 = fsub <2 x double> %1026, %1034
  %1056 = fmul <2 x double> %1055, %1055
  %1057 = fsub <2 x double> %1025, %1033
  %1058 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1057, <2 x double> %1057, <2 x double> %1056)
  %1059 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1035, <2 x double> %1035, <2 x double> %1058)
  %1060 = fcmp olt <2 x double> %1059, %680
  %1061 = zext i32 %1029 to i64
  %1062 = getelementptr inbounds i16, ptr %286, i64 %1061
  store i16 %1030, ptr %1062, align 2, !tbaa !45
  %1063 = extractelement <2 x i1> %1060, i64 1
  %1064 = zext i1 %1063 to i32
  %1065 = add nuw nsw i32 %1029, %1064
  %1066 = zext i32 %1065 to i64
  %1067 = getelementptr inbounds i16, ptr %286, i64 %1066
  store i16 %1031, ptr %1067, align 2, !tbaa !45
  %1068 = extractelement <2 x i1> %1060, i64 0
  %1069 = zext i1 %1068 to i32
  %1070 = add i32 %1065, %1069
  %1071 = add nuw nsw i64 %1028, 2
  %1072 = icmp ult i64 %1071, %1016
  %1073 = insertelement <2 x double> poison, double %1054, i64 0
  %1074 = insertelement <2 x double> %1073, double %1052, i64 1
  %1075 = insertelement <2 x double> poison, double %1050, i64 0
  %1076 = insertelement <2 x double> %1075, double %1048, i64 1
  %1077 = insertelement <2 x double> poison, double %1046, i64 0
  %1078 = insertelement <2 x double> %1077, double %1043, i64 1
  br i1 %1072, label %1027, label %1079

1079:                                             ; preds = %1027
  %1080 = trunc i64 %1028 to i32
  br label %1081

1081:                                             ; preds = %1079, %995
  %1082 = phi i32 [ %1070, %1079 ], [ 0, %995 ]
  %1083 = phi i32 [ %1080, %1079 ], [ 0, %995 ]
  %1084 = icmp slt i32 %1083, %993
  br i1 %1084, label %1085, label %1090

1085:                                             ; preds = %1081
  %1086 = zext i32 %1083 to i64
  %1087 = zext i32 %993 to i64
  %1088 = extractelement <2 x double> %711, i64 0
  %1089 = extractelement <2 x double> %711, i64 1
  br label %1095

1090:                                             ; preds = %1118, %1081
  %1091 = phi i32 [ %1082, %1081 ], [ %1119, %1118 ]
  %1092 = icmp sgt i32 %1091, 0
  br i1 %1092, label %1093, label %1146

1093:                                             ; preds = %1090
  %1094 = zext i32 %1091 to i64
  br label %1122

1095:                                             ; preds = %1085, %1118
  %1096 = phi i64 [ %1086, %1085 ], [ %1120, %1118 ]
  %1097 = phi i32 [ %1082, %1085 ], [ %1119, %1118 ]
  %1098 = getelementptr inbounds i16, ptr %992, i64 %1096
  %1099 = load i16, ptr %1098, align 2, !tbaa !45
  %1100 = zext i16 %1099 to i64
  %1101 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1100
  %1102 = load double, ptr %1101, align 8, !tbaa !69
  %1103 = getelementptr inbounds %class.Vector, ptr %1101, i64 0, i32 1
  %1104 = load double, ptr %1103, align 8, !tbaa !68
  %1105 = getelementptr inbounds %class.Vector, ptr %1101, i64 0, i32 2
  %1106 = load double, ptr %1105, align 8, !tbaa !50
  %1107 = fsub double %1088, %1102
  %1108 = fmul double %1107, %1107
  %1109 = fsub double %1089, %1104
  %1110 = tail call double @llvm.fmuladd.f64(double %1109, double %1109, double %1108)
  %1111 = fsub double %714, %1106
  %1112 = tail call double @llvm.fmuladd.f64(double %1111, double %1111, double %1110)
  %1113 = fcmp ugt double %1112, %27
  br i1 %1113, label %1118, label %1114

1114:                                             ; preds = %1095
  %1115 = add nsw i32 %1097, 1
  %1116 = sext i32 %1097 to i64
  %1117 = getelementptr inbounds i16, ptr %286, i64 %1116
  store i16 %1099, ptr %1117, align 2, !tbaa !45
  br label %1118

1118:                                             ; preds = %1114, %1095
  %1119 = phi i32 [ %1115, %1114 ], [ %1097, %1095 ]
  %1120 = add nuw nsw i64 %1096, 1
  %1121 = icmp eq i64 %1120, %1087
  br i1 %1121, label %1090, label %1095

1122:                                             ; preds = %1093, %1139
  %1123 = phi i64 [ 0, %1093 ], [ %1142, %1139 ]
  %1124 = phi ptr [ %424, %1093 ], [ %1141, %1139 ]
  %1125 = getelementptr inbounds i16, ptr %286, i64 %1123
  %1126 = load i16, ptr %1125, align 2, !tbaa !45
  %1127 = zext i16 %1126 to i64
  %1128 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1127, i32 4
  %1129 = load i8, ptr %1128, align 1
  %1130 = and i8 %1129, 7
  store i16 %1126, ptr %1124, align 2, !tbaa !45
  %1131 = getelementptr inbounds i16, ptr %1124, i64 1
  %1132 = insertelement <2 x i16> poison, i16 %1126, i64 0
  %1133 = shufflevector <2 x i16> %1132, <2 x i16> poison, <2 x i32> zeroinitializer
  %1134 = add <2 x i16> %1133, <i16 1, i16 2>
  store <2 x i16> %1134, ptr %1131, align 2, !tbaa !45
  %1135 = icmp ult i8 %1130, 4
  br i1 %1135, label %1139, label %1136

1136:                                             ; preds = %1122
  %1137 = add <2 x i16> %1133, <i16 3, i16 4>
  %1138 = getelementptr inbounds i16, ptr %1124, i64 3
  store <2 x i16> %1137, ptr %1138, align 2, !tbaa !45
  br label %1139

1139:                                             ; preds = %1136, %1122
  %1140 = zext i8 %1130 to i64
  %1141 = getelementptr inbounds i16, ptr %1124, i64 %1140
  %1142 = add nuw nsw i64 %1123, 1
  %1143 = icmp eq i64 %1142, %1094
  br i1 %1143, label %1144, label %1122

1144:                                             ; preds = %1139
  %1145 = ptrtoint ptr %1141 to i64
  br label %1146

1146:                                             ; preds = %1144, %1090, %991
  %1147 = phi i64 [ %1145, %1144 ], [ %663, %1090 ], [ %663, %991 ]
  %1148 = sub i64 %1147, %663
  %1149 = lshr exact i64 %1148, 1
  %1150 = trunc i64 %1149 to i32
  %1151 = icmp eq i32 %1150, 0
  br i1 %1151, label %1152, label %1157

1152:                                             ; preds = %1146
  %1153 = load i8, ptr %978, align 1
  %1154 = and i8 %1153, 7
  %1155 = zext i8 %1154 to i32
  %1156 = add nsw i32 %683, %1155
  br label %2493

1157:                                             ; preds = %1146
  %1158 = shl i64 %1148, 31
  %1159 = add i64 %1158, -4294967296
  %1160 = ashr i64 %1159, 32
  %1161 = getelementptr inbounds i16, ptr %424, i64 %1160
  %1162 = load i16, ptr %1161, align 2, !tbaa !45
  %1163 = ashr i64 %1158, 32
  %1164 = getelementptr inbounds i16, ptr %424, i64 %1163
  store i16 %1162, ptr %1164, align 2, !tbaa !45
  br label %1165

1165:                                             ; preds = %1157, %973
  %1166 = phi i32 [ %1150, %1157 ], [ %687, %973 ]
  %1167 = icmp eq i32 %982, 0
  br i1 %1167, label %1172, label %1168

1168:                                             ; preds = %1165
  %1169 = load i32, ptr %695, align 4
  %1170 = and i32 %1169, 1073741824
  %1171 = icmp ne i32 %1170, 0
  br label %1172

1172:                                             ; preds = %1168, %1165
  %1173 = phi i1 [ false, %1165 ], [ %1171, %1168 ]
  %1174 = load i32, ptr %17, align 8, !tbaa !19
  %1175 = add nsw i32 %664, %1174
  %1176 = load i32, ptr %665, align 4, !tbaa !70
  %1177 = icmp sgt i32 %1176, %1175
  br i1 %1177, label %1193, label %1178

1178:                                             ; preds = %1172, %1178
  %1179 = phi i32 [ %1181, %1178 ], [ %1176, %1172 ]
  %1180 = ashr i32 %1179, 1
  %1181 = add nsw i32 %1180, %1179
  %1182 = icmp sgt i32 %1181, %1175
  br i1 %1182, label %1183, label %1178

1183:                                             ; preds = %1178
  %1184 = sext i32 %1181 to i64
  %1185 = icmp slt i32 %1181, 0
  %1186 = shl nsw i64 %1184, 1
  %1187 = select i1 %1185, i64 -1, i64 %1186
  %1188 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1187) #9
  %1189 = load ptr, ptr %12, align 8, !tbaa !47
  %1190 = sext i32 %1174 to i64
  %1191 = shl nsw i64 %1190, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1188, ptr align 2 %1189, i64 %1191, i1 false)
  %1192 = icmp eq ptr %1189, null
  br i1 %1192, label %1197, label %1195

1193:                                             ; preds = %1172
  %1194 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1199

1195:                                             ; preds = %1183
  tail call void @_ZdaPv(ptr noundef nonnull %1189) #10
  %1196 = load i32, ptr %17, align 8, !tbaa !19
  br label %1197

1197:                                             ; preds = %1195, %1183
  %1198 = phi i32 [ %1196, %1195 ], [ %1174, %1183 ]
  store ptr %1188, ptr %12, align 8, !tbaa !47
  store i32 %1181, ptr %665, align 4, !tbaa !70
  br label %1199

1199:                                             ; preds = %1193, %1197
  %1200 = phi i32 [ %1174, %1193 ], [ %1198, %1197 ]
  %1201 = phi ptr [ %1194, %1193 ], [ %1188, %1197 ]
  %1202 = ptrtoint ptr %1201 to i64
  %1203 = add nsw i32 %1200, 1
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i16, ptr %1201, i64 %1204
  %1206 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1207 = icmp eq i32 %1206, 0
  br i1 %1207, label %1388, label %1208

1208:                                             ; preds = %1199
  %1209 = load i8, ptr %715, align 2, !tbaa !52
  %1210 = zext i8 %1209 to i32
  %1211 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1212 = icmp eq i32 %1211, 0
  br i1 %1212, label %1253, label %1213

1213:                                             ; preds = %1208
  %1214 = icmp eq i8 %1209, 1
  br i1 %1214, label %1215, label %1223

1215:                                             ; preds = %1213
  %1216 = icmp sgt i32 %1166, 0
  br i1 %1216, label %1217, label %1328

1217:                                             ; preds = %1215
  %1218 = zext i32 %1166 to i64
  %1219 = and i64 %1218, 1
  %1220 = icmp eq i32 %1166, 1
  br i1 %1220, label %1314, label %1221

1221:                                             ; preds = %1217
  %1222 = and i64 %1218, 4294967294
  br label %1225

1223:                                             ; preds = %1213
  %1224 = add nsw i32 %683, 1
  br label %2493

1225:                                             ; preds = %1248, %1221
  %1226 = phi i64 [ 0, %1221 ], [ %1250, %1248 ]
  %1227 = phi ptr [ %470, %1221 ], [ %1249, %1248 ]
  %1228 = phi i64 [ 0, %1221 ], [ %1251, %1248 ]
  %1229 = getelementptr inbounds i16, ptr %424, i64 %1226
  %1230 = load i16, ptr %1229, align 2, !tbaa !45
  %1231 = zext i16 %1230 to i64
  %1232 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1231, i32 3
  %1233 = load i8, ptr %1232, align 2, !tbaa !52
  %1234 = icmp eq i8 %1233, 1
  br i1 %1234, label %1235, label %1237

1235:                                             ; preds = %1225
  %1236 = getelementptr inbounds i16, ptr %1227, i64 1
  store i16 %1230, ptr %1227, align 2, !tbaa !45
  br label %1237

1237:                                             ; preds = %1235, %1225
  %1238 = phi ptr [ %1236, %1235 ], [ %1227, %1225 ]
  %1239 = or i64 %1226, 1
  %1240 = getelementptr inbounds i16, ptr %424, i64 %1239
  %1241 = load i16, ptr %1240, align 2, !tbaa !45
  %1242 = zext i16 %1241 to i64
  %1243 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1242, i32 3
  %1244 = load i8, ptr %1243, align 2, !tbaa !52
  %1245 = icmp eq i8 %1244, 1
  br i1 %1245, label %1246, label %1248

1246:                                             ; preds = %1237
  %1247 = getelementptr inbounds i16, ptr %1238, i64 1
  store i16 %1241, ptr %1238, align 2, !tbaa !45
  br label %1248

1248:                                             ; preds = %1246, %1237
  %1249 = phi ptr [ %1247, %1246 ], [ %1238, %1237 ]
  %1250 = add nuw nsw i64 %1226, 2
  %1251 = add i64 %1228, 2
  %1252 = icmp eq i64 %1251, %1222
  br i1 %1252, label %1314, label %1225

1253:                                             ; preds = %1208
  %1254 = add i8 %1209, -3
  %1255 = icmp ult i8 %1254, -2
  br i1 %1255, label %1264, label %1256

1256:                                             ; preds = %1253
  %1257 = icmp sgt i32 %1166, 0
  br i1 %1257, label %1258, label %1328

1258:                                             ; preds = %1256
  %1259 = zext i32 %1166 to i64
  %1260 = and i64 %1259, 1
  %1261 = icmp eq i32 %1166, 1
  br i1 %1261, label %1298, label %1262

1262:                                             ; preds = %1258
  %1263 = and i64 %1259, 4294967294
  br label %1266

1264:                                             ; preds = %1253
  %1265 = add nsw i32 %683, 1
  br label %2493

1266:                                             ; preds = %1293, %1262
  %1267 = phi i64 [ 0, %1262 ], [ %1295, %1293 ]
  %1268 = phi ptr [ %470, %1262 ], [ %1294, %1293 ]
  %1269 = phi i64 [ 0, %1262 ], [ %1296, %1293 ]
  %1270 = getelementptr inbounds i16, ptr %424, i64 %1267
  %1271 = load i16, ptr %1270, align 2, !tbaa !45
  %1272 = zext i16 %1271 to i64
  %1273 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1272, i32 3
  %1274 = load i8, ptr %1273, align 2, !tbaa !52
  %1275 = zext i8 %1274 to i32
  %1276 = add nuw nsw i32 %1275, %1210
  %1277 = icmp eq i32 %1276, 3
  br i1 %1277, label %1278, label %1280

1278:                                             ; preds = %1266
  %1279 = getelementptr inbounds i16, ptr %1268, i64 1
  store i16 %1271, ptr %1268, align 2, !tbaa !45
  br label %1280

1280:                                             ; preds = %1278, %1266
  %1281 = phi ptr [ %1279, %1278 ], [ %1268, %1266 ]
  %1282 = or i64 %1267, 1
  %1283 = getelementptr inbounds i16, ptr %424, i64 %1282
  %1284 = load i16, ptr %1283, align 2, !tbaa !45
  %1285 = zext i16 %1284 to i64
  %1286 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1285, i32 3
  %1287 = load i8, ptr %1286, align 2, !tbaa !52
  %1288 = zext i8 %1287 to i32
  %1289 = add nuw nsw i32 %1288, %1210
  %1290 = icmp eq i32 %1289, 3
  br i1 %1290, label %1291, label %1293

1291:                                             ; preds = %1280
  %1292 = getelementptr inbounds i16, ptr %1281, i64 1
  store i16 %1284, ptr %1281, align 2, !tbaa !45
  br label %1293

1293:                                             ; preds = %1291, %1280
  %1294 = phi ptr [ %1292, %1291 ], [ %1281, %1280 ]
  %1295 = add nuw nsw i64 %1267, 2
  %1296 = add i64 %1269, 2
  %1297 = icmp eq i64 %1296, %1263
  br i1 %1297, label %1298, label %1266

1298:                                             ; preds = %1293, %1258
  %1299 = phi ptr [ undef, %1258 ], [ %1294, %1293 ]
  %1300 = phi i64 [ 0, %1258 ], [ %1295, %1293 ]
  %1301 = phi ptr [ %470, %1258 ], [ %1294, %1293 ]
  %1302 = icmp eq i64 %1260, 0
  br i1 %1302, label %1328, label %1303

1303:                                             ; preds = %1298
  %1304 = getelementptr inbounds i16, ptr %424, i64 %1300
  %1305 = load i16, ptr %1304, align 2, !tbaa !45
  %1306 = zext i16 %1305 to i64
  %1307 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1306, i32 3
  %1308 = load i8, ptr %1307, align 2, !tbaa !52
  %1309 = zext i8 %1308 to i32
  %1310 = add nuw nsw i32 %1309, %1210
  %1311 = icmp eq i32 %1310, 3
  br i1 %1311, label %1312, label %1328

1312:                                             ; preds = %1303
  %1313 = getelementptr inbounds i16, ptr %1301, i64 1
  store i16 %1305, ptr %1301, align 2, !tbaa !45
  br label %1328

1314:                                             ; preds = %1248, %1217
  %1315 = phi ptr [ undef, %1217 ], [ %1249, %1248 ]
  %1316 = phi i64 [ 0, %1217 ], [ %1250, %1248 ]
  %1317 = phi ptr [ %470, %1217 ], [ %1249, %1248 ]
  %1318 = icmp eq i64 %1219, 0
  br i1 %1318, label %1328, label %1319

1319:                                             ; preds = %1314
  %1320 = getelementptr inbounds i16, ptr %424, i64 %1316
  %1321 = load i16, ptr %1320, align 2, !tbaa !45
  %1322 = zext i16 %1321 to i64
  %1323 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1322, i32 3
  %1324 = load i8, ptr %1323, align 2, !tbaa !52
  %1325 = icmp eq i8 %1324, 1
  br i1 %1325, label %1326, label %1328

1326:                                             ; preds = %1319
  %1327 = getelementptr inbounds i16, ptr %1317, i64 1
  store i16 %1321, ptr %1317, align 2, !tbaa !45
  br label %1328

1328:                                             ; preds = %1314, %1326, %1319, %1298, %1312, %1303, %1215, %1256
  %1329 = phi ptr [ %470, %1256 ], [ %470, %1215 ], [ %1299, %1298 ], [ %1313, %1312 ], [ %1301, %1303 ], [ %1315, %1314 ], [ %1327, %1326 ], [ %1317, %1319 ]
  %1330 = ptrtoint ptr %1329 to i64
  %1331 = sub i64 %1330, %666
  %1332 = lshr exact i64 %1331, 1
  %1333 = trunc i64 %1332 to i32
  %1334 = icmp sgt i32 %1333, 0
  br i1 %1334, label %1335, label %1597

1335:                                             ; preds = %1328
  %1336 = and i64 %1332, 4294967295
  %1337 = extractelement <2 x double> %711, i64 0
  %1338 = extractelement <2 x double> %711, i64 1
  br label %1339

1339:                                             ; preds = %1335, %1383
  %1340 = phi i64 [ 0, %1335 ], [ %1386, %1383 ]
  %1341 = phi ptr [ %470, %1335 ], [ %1385, %1383 ]
  %1342 = phi ptr [ %1205, %1335 ], [ %1384, %1383 ]
  %1343 = getelementptr inbounds i16, ptr %470, i64 %1340
  %1344 = load i16, ptr %1343, align 2, !tbaa !45
  %1345 = zext i16 %1344 to i64
  %1346 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1345
  %1347 = load double, ptr %1346, align 8, !tbaa !69
  %1348 = fsub double %1337, %1347
  %1349 = fmul double %1348, %1348
  %1350 = getelementptr inbounds %class.Vector, ptr %1346, i64 0, i32 1
  %1351 = load double, ptr %1350, align 8, !tbaa !68
  %1352 = fsub double %1338, %1351
  %1353 = tail call double @llvm.fmuladd.f64(double %1352, double %1352, double %1349)
  %1354 = getelementptr inbounds %class.Vector, ptr %1346, i64 0, i32 2
  %1355 = load double, ptr %1354, align 8, !tbaa !50
  %1356 = fsub double %714, %1355
  %1357 = tail call double @llvm.fmuladd.f64(double %1356, double %1356, double %1353)
  br i1 %1173, label %1358, label %1365

1358:                                             ; preds = %1339
  %1359 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1345
  %1360 = load i32, ptr %1359, align 4
  %1361 = and i32 %1360, 1073741824
  %1362 = icmp ne i32 %1361, 0
  %1363 = fcmp ugt double %1357, %24
  %1364 = select i1 %1362, i1 true, i1 %1363
  br i1 %1364, label %1383, label %1370

1365:                                             ; preds = %1339
  %1366 = fcmp ugt double %1357, %24
  br i1 %1366, label %1383, label %1367

1367:                                             ; preds = %1365
  %1368 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1345
  %1369 = load i32, ptr %1368, align 4
  br label %1370

1370:                                             ; preds = %1367, %1358
  %1371 = phi i32 [ %1369, %1367 ], [ %1360, %1358 ]
  %1372 = shl i32 %1371, 2
  %1373 = ashr exact i32 %1372, 2
  %1374 = icmp slt i32 %1373, %737
  %1375 = icmp sgt i32 %1373, %739
  %1376 = select i1 %1374, i1 true, i1 %1375
  %1377 = select i1 %1376, ptr %1342, ptr %1341
  %1378 = zext i1 %1376 to i64
  %1379 = getelementptr inbounds i16, ptr %1342, i64 %1378
  %1380 = xor i1 %1376, true
  %1381 = zext i1 %1380 to i64
  %1382 = getelementptr inbounds i16, ptr %1341, i64 %1381
  store i16 %1344, ptr %1377, align 2, !tbaa !45
  br label %1383

1383:                                             ; preds = %1370, %1365, %1358
  %1384 = phi ptr [ %1342, %1358 ], [ %1342, %1365 ], [ %1379, %1370 ]
  %1385 = phi ptr [ %1341, %1358 ], [ %1341, %1365 ], [ %1382, %1370 ]
  %1386 = add nuw nsw i64 %1340, 1
  %1387 = icmp eq i64 %1386, %1336
  br i1 %1387, label %1597, label %1339

1388:                                             ; preds = %1199
  %1389 = icmp sgt i32 %1166, 0
  br i1 %1173, label %1390, label %1437

1390:                                             ; preds = %1388
  br i1 %1389, label %1391, label %1597

1391:                                             ; preds = %1390
  %1392 = zext i32 %1166 to i64
  %1393 = extractelement <2 x double> %711, i64 0
  %1394 = extractelement <2 x double> %711, i64 1
  br label %1395

1395:                                             ; preds = %1391, %1432
  %1396 = phi i64 [ 0, %1391 ], [ %1435, %1432 ]
  %1397 = phi ptr [ %470, %1391 ], [ %1434, %1432 ]
  %1398 = phi ptr [ %1205, %1391 ], [ %1433, %1432 ]
  %1399 = getelementptr inbounds i16, ptr %424, i64 %1396
  %1400 = load i16, ptr %1399, align 2, !tbaa !45
  %1401 = zext i16 %1400 to i64
  %1402 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1401
  %1403 = load i32, ptr %1402, align 4
  %1404 = and i32 %1403, 1073741824
  %1405 = icmp eq i32 %1404, 0
  br i1 %1405, label %1406, label %1432

1406:                                             ; preds = %1395
  %1407 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1401
  %1408 = getelementptr inbounds %class.Vector, ptr %1407, i64 0, i32 2
  %1409 = load double, ptr %1408, align 8, !tbaa !50
  %1410 = fsub double %714, %1409
  %1411 = getelementptr inbounds %class.Vector, ptr %1407, i64 0, i32 1
  %1412 = load double, ptr %1411, align 8, !tbaa !68
  %1413 = fsub double %1394, %1412
  %1414 = load double, ptr %1407, align 8, !tbaa !69
  %1415 = fsub double %1393, %1414
  %1416 = fmul double %1415, %1415
  %1417 = tail call double @llvm.fmuladd.f64(double %1413, double %1413, double %1416)
  %1418 = tail call double @llvm.fmuladd.f64(double %1410, double %1410, double %1417)
  %1419 = fcmp ugt double %1418, %24
  br i1 %1419, label %1432, label %1420

1420:                                             ; preds = %1406
  %1421 = shl i32 %1403, 2
  %1422 = ashr exact i32 %1421, 2
  %1423 = icmp slt i32 %1422, %737
  %1424 = icmp sgt i32 %1422, %739
  %1425 = select i1 %1423, i1 true, i1 %1424
  %1426 = select i1 %1425, ptr %1398, ptr %1397
  %1427 = zext i1 %1425 to i64
  %1428 = getelementptr inbounds i16, ptr %1398, i64 %1427
  %1429 = xor i1 %1425, true
  %1430 = zext i1 %1429 to i64
  %1431 = getelementptr inbounds i16, ptr %1397, i64 %1430
  store i16 %1400, ptr %1426, align 2, !tbaa !45
  br label %1432

1432:                                             ; preds = %1420, %1406, %1395
  %1433 = phi ptr [ %1398, %1395 ], [ %1398, %1406 ], [ %1428, %1420 ]
  %1434 = phi ptr [ %1397, %1395 ], [ %1397, %1406 ], [ %1431, %1420 ]
  %1435 = add nuw nsw i64 %1396, 1
  %1436 = icmp eq i64 %1435, %1392
  br i1 %1436, label %1597, label %1395

1437:                                             ; preds = %1388
  br i1 %1389, label %1438, label %1597

1438:                                             ; preds = %1437
  %1439 = icmp ugt i32 %1166, 6
  br i1 %1439, label %1440, label %1548

1440:                                             ; preds = %1438
  %1441 = add nsw i32 %1166, -2
  %1442 = load i16, ptr %424, align 2, !tbaa !45
  %1443 = zext i16 %1442 to i64
  %1444 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1443
  %1445 = load i32, ptr %1444, align 4
  %1446 = load i16, ptr %667, align 2, !tbaa !45
  %1447 = zext i16 %1446 to i64
  %1448 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1447
  %1449 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 2
  %1450 = load double, ptr %1449, align 8, !tbaa !50
  %1451 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1443
  %1452 = getelementptr inbounds %class.Vector, ptr %1451, i64 0, i32 2
  %1453 = load double, ptr %1452, align 8, !tbaa !50
  %1454 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 1
  %1455 = load double, ptr %1454, align 8, !tbaa !68
  %1456 = getelementptr inbounds %class.Vector, ptr %1451, i64 0, i32 1
  %1457 = load double, ptr %1456, align 8, !tbaa !68
  %1458 = load double, ptr %1448, align 8, !tbaa !69
  %1459 = load double, ptr %1451, align 8, !tbaa !69
  %1460 = zext i32 %1441 to i64
  %1461 = extractelement <2 x double> %711, i64 0
  %1462 = extractelement <2 x double> %711, i64 1
  br label %1463

1463:                                             ; preds = %1440, %1541
  %1464 = phi i64 [ 2, %1440 ], [ %1544, %1541 ]
  %1465 = phi i64 [ %1447, %1440 ], [ %1501, %1541 ]
  %1466 = phi i32 [ %1445, %1440 ], [ %1529, %1541 ]
  %1467 = phi ptr [ %470, %1440 ], [ %1543, %1541 ]
  %1468 = phi ptr [ %1205, %1440 ], [ %1542, %1541 ]
  %1469 = phi i16 [ %1442, %1440 ], [ %1494, %1541 ]
  %1470 = phi i16 [ %1446, %1440 ], [ %1497, %1541 ]
  %1471 = phi double [ %1459, %1440 ], [ %1500, %1541 ]
  %1472 = phi double [ %1458, %1440 ], [ %1503, %1541 ]
  %1473 = phi double [ %1457, %1440 ], [ %1505, %1541 ]
  %1474 = phi double [ %1455, %1440 ], [ %1507, %1541 ]
  %1475 = phi double [ %1453, %1440 ], [ %1509, %1541 ]
  %1476 = phi double [ %1450, %1440 ], [ %1511, %1541 ]
  %1477 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1465
  %1478 = load i32, ptr %1477, align 4
  %1479 = shl i32 %1478, 2
  %1480 = ashr exact i32 %1479, 2
  %1481 = fsub double %1461, %1471
  %1482 = fsub double %1461, %1472
  %1483 = fmul double %1481, %1481
  %1484 = fmul double %1482, %1482
  %1485 = fsub double %1462, %1473
  %1486 = fsub double %1462, %1474
  %1487 = tail call double @llvm.fmuladd.f64(double %1485, double %1485, double %1483)
  %1488 = tail call double @llvm.fmuladd.f64(double %1486, double %1486, double %1484)
  %1489 = fsub double %714, %1475
  %1490 = fsub double %714, %1476
  %1491 = tail call double @llvm.fmuladd.f64(double %1489, double %1489, double %1487)
  %1492 = tail call double @llvm.fmuladd.f64(double %1490, double %1490, double %1488)
  %1493 = getelementptr inbounds i16, ptr %424, i64 %1464
  %1494 = load i16, ptr %1493, align 2, !tbaa !45
  %1495 = or i64 %1464, 1
  %1496 = getelementptr inbounds i16, ptr %424, i64 %1495
  %1497 = load i16, ptr %1496, align 2, !tbaa !45
  %1498 = zext i16 %1494 to i64
  %1499 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1498
  %1500 = load double, ptr %1499, align 8, !tbaa !69
  %1501 = zext i16 %1497 to i64
  %1502 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1501
  %1503 = load double, ptr %1502, align 8, !tbaa !69
  %1504 = getelementptr inbounds %class.Vector, ptr %1499, i64 0, i32 1
  %1505 = load double, ptr %1504, align 8, !tbaa !68
  %1506 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 1
  %1507 = load double, ptr %1506, align 8, !tbaa !68
  %1508 = getelementptr inbounds %class.Vector, ptr %1499, i64 0, i32 2
  %1509 = load double, ptr %1508, align 8, !tbaa !50
  %1510 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 2
  %1511 = load double, ptr %1510, align 8, !tbaa !50
  %1512 = fcmp ugt double %1491, %24
  br i1 %1512, label %1525, label %1513

1513:                                             ; preds = %1463
  %1514 = shl i32 %1466, 2
  %1515 = ashr exact i32 %1514, 2
  %1516 = icmp slt i32 %1515, %737
  %1517 = icmp sgt i32 %1515, %739
  %1518 = select i1 %1516, i1 true, i1 %1517
  %1519 = select i1 %1518, ptr %1468, ptr %1467
  %1520 = zext i1 %1518 to i64
  %1521 = getelementptr inbounds i16, ptr %1468, i64 %1520
  %1522 = xor i1 %1518, true
  %1523 = zext i1 %1522 to i64
  %1524 = getelementptr inbounds i16, ptr %1467, i64 %1523
  store i16 %1469, ptr %1519, align 2, !tbaa !45
  br label %1525

1525:                                             ; preds = %1513, %1463
  %1526 = phi ptr [ %1468, %1463 ], [ %1521, %1513 ]
  %1527 = phi ptr [ %1467, %1463 ], [ %1524, %1513 ]
  %1528 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1498
  %1529 = load i32, ptr %1528, align 4
  %1530 = fcmp ugt double %1492, %24
  br i1 %1530, label %1541, label %1531

1531:                                             ; preds = %1525
  %1532 = icmp slt i32 %1480, %737
  %1533 = icmp sgt i32 %1480, %739
  %1534 = select i1 %1532, i1 true, i1 %1533
  %1535 = select i1 %1534, ptr %1526, ptr %1527
  %1536 = zext i1 %1534 to i64
  %1537 = getelementptr inbounds i16, ptr %1526, i64 %1536
  %1538 = xor i1 %1534, true
  %1539 = zext i1 %1538 to i64
  %1540 = getelementptr inbounds i16, ptr %1527, i64 %1539
  store i16 %1470, ptr %1535, align 2, !tbaa !45
  br label %1541

1541:                                             ; preds = %1531, %1525
  %1542 = phi ptr [ %1526, %1525 ], [ %1537, %1531 ]
  %1543 = phi ptr [ %1527, %1525 ], [ %1540, %1531 ]
  %1544 = add nuw nsw i64 %1464, 2
  %1545 = icmp ult i64 %1544, %1460
  br i1 %1545, label %1463, label %1546

1546:                                             ; preds = %1541
  %1547 = trunc i64 %1464 to i32
  br label %1548

1548:                                             ; preds = %1546, %1438
  %1549 = phi i32 [ %1547, %1546 ], [ 0, %1438 ]
  %1550 = phi ptr [ %1542, %1546 ], [ %1205, %1438 ]
  %1551 = phi ptr [ %1543, %1546 ], [ %470, %1438 ]
  %1552 = icmp slt i32 %1549, %1166
  br i1 %1552, label %1553, label %1597

1553:                                             ; preds = %1548
  %1554 = zext i32 %1549 to i64
  %1555 = zext i32 %1166 to i64
  %1556 = extractelement <2 x double> %711, i64 0
  %1557 = extractelement <2 x double> %711, i64 1
  br label %1558

1558:                                             ; preds = %1553, %1592
  %1559 = phi i64 [ %1554, %1553 ], [ %1595, %1592 ]
  %1560 = phi ptr [ %1551, %1553 ], [ %1594, %1592 ]
  %1561 = phi ptr [ %1550, %1553 ], [ %1593, %1592 ]
  %1562 = getelementptr inbounds i16, ptr %424, i64 %1559
  %1563 = load i16, ptr %1562, align 2, !tbaa !45
  %1564 = zext i16 %1563 to i64
  %1565 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1564
  %1566 = load double, ptr %1565, align 8, !tbaa !69
  %1567 = getelementptr inbounds %class.Vector, ptr %1565, i64 0, i32 1
  %1568 = load double, ptr %1567, align 8, !tbaa !68
  %1569 = getelementptr inbounds %class.Vector, ptr %1565, i64 0, i32 2
  %1570 = load double, ptr %1569, align 8, !tbaa !50
  %1571 = fsub double %1556, %1566
  %1572 = fmul double %1571, %1571
  %1573 = fsub double %1557, %1568
  %1574 = tail call double @llvm.fmuladd.f64(double %1573, double %1573, double %1572)
  %1575 = fsub double %714, %1570
  %1576 = tail call double @llvm.fmuladd.f64(double %1575, double %1575, double %1574)
  %1577 = fcmp ugt double %1576, %24
  br i1 %1577, label %1592, label %1578

1578:                                             ; preds = %1558
  %1579 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1564
  %1580 = load i32, ptr %1579, align 4
  %1581 = shl i32 %1580, 2
  %1582 = ashr exact i32 %1581, 2
  %1583 = icmp slt i32 %1582, %737
  %1584 = icmp sgt i32 %1582, %739
  %1585 = select i1 %1583, i1 true, i1 %1584
  %1586 = select i1 %1585, ptr %1561, ptr %1560
  %1587 = zext i1 %1585 to i64
  %1588 = getelementptr inbounds i16, ptr %1561, i64 %1587
  %1589 = xor i1 %1585, true
  %1590 = zext i1 %1589 to i64
  %1591 = getelementptr inbounds i16, ptr %1560, i64 %1590
  store i16 %1563, ptr %1586, align 2, !tbaa !45
  br label %1592

1592:                                             ; preds = %1578, %1558
  %1593 = phi ptr [ %1561, %1558 ], [ %1588, %1578 ]
  %1594 = phi ptr [ %1560, %1558 ], [ %1591, %1578 ]
  %1595 = add nuw nsw i64 %1559, 1
  %1596 = icmp eq i64 %1595, %1555
  br i1 %1596, label %1597, label %1558

1597:                                             ; preds = %1383, %1592, %1432, %1328, %1548, %1390, %1437
  %1598 = phi ptr [ %1205, %1437 ], [ %1205, %1390 ], [ %1550, %1548 ], [ %1205, %1328 ], [ %1433, %1432 ], [ %1593, %1592 ], [ %1384, %1383 ]
  %1599 = phi ptr [ %470, %1437 ], [ %470, %1390 ], [ %1551, %1548 ], [ %470, %1328 ], [ %1434, %1432 ], [ %1594, %1592 ], [ %1385, %1383 ]
  %1600 = icmp eq ptr %1598, %1205
  %1601 = icmp eq ptr %1599, %470
  %1602 = select i1 %1600, i1 %1601, i1 false
  br i1 %1602, label %1603, label %1605

1603:                                             ; preds = %1597
  %1604 = add nsw i32 %683, 1
  br label %2493

1605:                                             ; preds = %1597
  %1606 = trunc i32 %683 to i16
  %1607 = load i32, ptr %17, align 8, !tbaa !19
  %1608 = add nsw i32 %1607, -1
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i16, ptr %1201, i64 %1609
  store i16 %1606, ptr %1610, align 2, !tbaa !45
  %1611 = ptrtoint ptr %1599 to i64
  %1612 = sub i64 %1611, %666
  %1613 = lshr exact i64 %1612, 1
  %1614 = trunc i64 %1613 to i32
  %1615 = icmp sgt i32 %1614, 0
  br i1 %1615, label %1616, label %1716

1616:                                             ; preds = %1605
  %1617 = and i64 %1613, 4294967295
  %1618 = and i64 %1613, 1
  %1619 = icmp eq i64 %1617, 1
  br i1 %1619, label %1684, label %1620

1620:                                             ; preds = %1616
  %1621 = sub nsw i64 %1617, %1618
  br label %1622

1622:                                             ; preds = %1677, %1620
  %1623 = phi i64 [ 0, %1620 ], [ %1681, %1677 ]
  %1624 = phi ptr [ %1598, %1620 ], [ %1680, %1677 ]
  %1625 = phi ptr [ %332, %1620 ], [ %1679, %1677 ]
  %1626 = phi ptr [ %378, %1620 ], [ %1678, %1677 ]
  %1627 = phi i64 [ 0, %1620 ], [ %1682, %1677 ]
  %1628 = getelementptr inbounds i16, ptr %470, i64 %1623
  %1629 = load i16, ptr %1628, align 2, !tbaa !45
  %1630 = zext i16 %1629 to i64
  %1631 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1630
  %1632 = load i32, ptr %1631, align 4
  %1633 = shl i32 %1632, 2
  %1634 = ashr exact i32 %1633, 2
  %1635 = sext i32 %1634 to i64
  %1636 = getelementptr inbounds i8, ptr %974, i64 %1635
  %1637 = load i8, ptr %1636, align 1, !tbaa !59
  %1638 = sext i8 %1637 to i32
  switch i32 %1638, label %1650 [
    i32 0, label %1639
    i32 1, label %1641
    i32 2, label %1643
  ]

1639:                                             ; preds = %1622
  %1640 = getelementptr inbounds i16, ptr %1624, i64 1
  br label %1645

1641:                                             ; preds = %1622
  %1642 = getelementptr inbounds i16, ptr %1625, i64 1
  br label %1645

1643:                                             ; preds = %1622
  %1644 = getelementptr inbounds i16, ptr %1626, i64 1
  br label %1645

1645:                                             ; preds = %1639, %1641, %1643
  %1646 = phi ptr [ %1626, %1643 ], [ %1625, %1641 ], [ %1624, %1639 ]
  %1647 = phi ptr [ %1644, %1643 ], [ %1626, %1641 ], [ %1626, %1639 ]
  %1648 = phi ptr [ %1625, %1643 ], [ %1642, %1641 ], [ %1625, %1639 ]
  %1649 = phi ptr [ %1624, %1643 ], [ %1624, %1641 ], [ %1640, %1639 ]
  store i16 %1629, ptr %1646, align 2, !tbaa !45
  br label %1650

1650:                                             ; preds = %1645, %1622
  %1651 = phi ptr [ %1626, %1622 ], [ %1647, %1645 ]
  %1652 = phi ptr [ %1625, %1622 ], [ %1648, %1645 ]
  %1653 = phi ptr [ %1624, %1622 ], [ %1649, %1645 ]
  %1654 = or i64 %1623, 1
  %1655 = getelementptr inbounds i16, ptr %470, i64 %1654
  %1656 = load i16, ptr %1655, align 2, !tbaa !45
  %1657 = zext i16 %1656 to i64
  %1658 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1657
  %1659 = load i32, ptr %1658, align 4
  %1660 = shl i32 %1659, 2
  %1661 = ashr exact i32 %1660, 2
  %1662 = sext i32 %1661 to i64
  %1663 = getelementptr inbounds i8, ptr %974, i64 %1662
  %1664 = load i8, ptr %1663, align 1, !tbaa !59
  %1665 = sext i8 %1664 to i32
  switch i32 %1665, label %1677 [
    i32 0, label %1670
    i32 1, label %1668
    i32 2, label %1666
  ]

1666:                                             ; preds = %1650
  %1667 = getelementptr inbounds i16, ptr %1651, i64 1
  br label %1672

1668:                                             ; preds = %1650
  %1669 = getelementptr inbounds i16, ptr %1652, i64 1
  br label %1672

1670:                                             ; preds = %1650
  %1671 = getelementptr inbounds i16, ptr %1653, i64 1
  br label %1672

1672:                                             ; preds = %1670, %1668, %1666
  %1673 = phi ptr [ %1651, %1666 ], [ %1652, %1668 ], [ %1653, %1670 ]
  %1674 = phi ptr [ %1667, %1666 ], [ %1651, %1668 ], [ %1651, %1670 ]
  %1675 = phi ptr [ %1652, %1666 ], [ %1669, %1668 ], [ %1652, %1670 ]
  %1676 = phi ptr [ %1653, %1666 ], [ %1653, %1668 ], [ %1671, %1670 ]
  store i16 %1656, ptr %1673, align 2, !tbaa !45
  br label %1677

1677:                                             ; preds = %1672, %1650
  %1678 = phi ptr [ %1651, %1650 ], [ %1674, %1672 ]
  %1679 = phi ptr [ %1652, %1650 ], [ %1675, %1672 ]
  %1680 = phi ptr [ %1653, %1650 ], [ %1676, %1672 ]
  %1681 = add nuw nsw i64 %1623, 2
  %1682 = add i64 %1627, 2
  %1683 = icmp eq i64 %1682, %1621
  br i1 %1683, label %1684, label %1622

1684:                                             ; preds = %1677, %1616
  %1685 = phi ptr [ undef, %1616 ], [ %1678, %1677 ]
  %1686 = phi ptr [ undef, %1616 ], [ %1679, %1677 ]
  %1687 = phi ptr [ undef, %1616 ], [ %1680, %1677 ]
  %1688 = phi i64 [ 0, %1616 ], [ %1681, %1677 ]
  %1689 = phi ptr [ %1598, %1616 ], [ %1680, %1677 ]
  %1690 = phi ptr [ %332, %1616 ], [ %1679, %1677 ]
  %1691 = phi ptr [ %378, %1616 ], [ %1678, %1677 ]
  %1692 = icmp eq i64 %1618, 0
  br i1 %1692, label %1716, label %1693

1693:                                             ; preds = %1684
  %1694 = getelementptr inbounds i16, ptr %470, i64 %1688
  %1695 = load i16, ptr %1694, align 2, !tbaa !45
  %1696 = zext i16 %1695 to i64
  %1697 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1696
  %1698 = load i32, ptr %1697, align 4
  %1699 = shl i32 %1698, 2
  %1700 = ashr exact i32 %1699, 2
  %1701 = sext i32 %1700 to i64
  %1702 = getelementptr inbounds i8, ptr %974, i64 %1701
  %1703 = load i8, ptr %1702, align 1, !tbaa !59
  %1704 = sext i8 %1703 to i32
  switch i32 %1704, label %1716 [
    i32 0, label %1709
    i32 1, label %1707
    i32 2, label %1705
  ]

1705:                                             ; preds = %1693
  %1706 = getelementptr inbounds i16, ptr %1691, i64 1
  br label %1711

1707:                                             ; preds = %1693
  %1708 = getelementptr inbounds i16, ptr %1690, i64 1
  br label %1711

1709:                                             ; preds = %1693
  %1710 = getelementptr inbounds i16, ptr %1689, i64 1
  br label %1711

1711:                                             ; preds = %1709, %1707, %1705
  %1712 = phi ptr [ %1691, %1705 ], [ %1690, %1707 ], [ %1689, %1709 ]
  %1713 = phi ptr [ %1706, %1705 ], [ %1691, %1707 ], [ %1691, %1709 ]
  %1714 = phi ptr [ %1690, %1705 ], [ %1708, %1707 ], [ %1690, %1709 ]
  %1715 = phi ptr [ %1689, %1705 ], [ %1689, %1707 ], [ %1710, %1709 ]
  store i16 %1695, ptr %1712, align 2, !tbaa !45
  br label %1716

1716:                                             ; preds = %1684, %1711, %1693, %1605
  %1717 = phi ptr [ %378, %1605 ], [ %1685, %1684 ], [ %1691, %1693 ], [ %1713, %1711 ]
  %1718 = phi ptr [ %332, %1605 ], [ %1686, %1684 ], [ %1690, %1693 ], [ %1714, %1711 ]
  %1719 = phi ptr [ %1598, %1605 ], [ %1687, %1684 ], [ %1689, %1693 ], [ %1715, %1711 ]
  %1720 = ptrtoint ptr %1719 to i64
  %1721 = ptrtoint ptr %1205 to i64
  %1722 = sub i64 %1720, %1721
  %1723 = lshr exact i64 %1722, 1
  %1724 = trunc i64 %1723 to i32
  %1725 = icmp eq i32 %1724, 0
  %1726 = shl i64 %1722, 31
  br i1 %1725, label %1732, label %1727

1727:                                             ; preds = %1716
  %1728 = add i64 %1726, -4294967296
  %1729 = ashr i64 %1728, 32
  %1730 = getelementptr inbounds i16, ptr %1205, i64 %1729
  %1731 = load i16, ptr %1730, align 2, !tbaa !45
  br label %1732

1732:                                             ; preds = %1716, %1727
  %1733 = phi i16 [ %1731, %1727 ], [ -1, %1716 ]
  %1734 = ashr i64 %1726, 32
  %1735 = getelementptr inbounds i16, ptr %1205, i64 %1734
  store i16 %1733, ptr %1735, align 2, !tbaa !45
  %1736 = trunc i64 %1723 to i16
  %1737 = add i16 %1736, 1
  %1738 = sext i32 %1607 to i64
  %1739 = getelementptr inbounds i16, ptr %1201, i64 %1738
  store i16 %1737, ptr %1739, align 2, !tbaa !45
  %1740 = add i32 %1607, 2
  %1741 = add i32 %1740, %1724
  %1742 = ptrtoint ptr %1718 to i64
  %1743 = sub i64 %1742, %668
  %1744 = lshr exact i64 %1743, 1
  %1745 = trunc i64 %1744 to i32
  %1746 = add nsw i32 %1741, 1
  %1747 = sext i32 %1746 to i64
  %1748 = getelementptr i16, ptr %1201, i64 %1747
  %1749 = icmp sgt i32 %1745, 0
  br i1 %1749, label %1750, label %1840

1750:                                             ; preds = %1732
  %1751 = and i64 %1744, 4294967295
  %1752 = icmp ult i64 %1751, 8
  br i1 %1752, label %1796, label %1753

1753:                                             ; preds = %1750
  %1754 = shl nsw i64 %1747, 1
  %1755 = add i64 %1754, %1202
  %1756 = sub i64 %1755, %668
  %1757 = icmp ult i64 %1756, 128
  br i1 %1757, label %1796, label %1758

1758:                                             ; preds = %1753
  %1759 = icmp ult i64 %1751, 64
  br i1 %1759, label %1783, label %1760

1760:                                             ; preds = %1758
  %1761 = and i64 %1744, 63
  %1762 = sub nsw i64 %1751, %1761
  br label %1763

1763:                                             ; preds = %1763, %1760
  %1764 = phi i64 [ 0, %1760 ], [ %1777, %1763 ]
  %1765 = getelementptr inbounds i16, ptr %332, i64 %1764
  %1766 = load <16 x i16>, ptr %1765, align 2, !tbaa !45
  %1767 = getelementptr inbounds i16, ptr %1765, i64 16
  %1768 = load <16 x i16>, ptr %1767, align 2, !tbaa !45
  %1769 = getelementptr inbounds i16, ptr %1765, i64 32
  %1770 = load <16 x i16>, ptr %1769, align 2, !tbaa !45
  %1771 = getelementptr inbounds i16, ptr %1765, i64 48
  %1772 = load <16 x i16>, ptr %1771, align 2, !tbaa !45
  %1773 = getelementptr inbounds i16, ptr %1748, i64 %1764
  store <16 x i16> %1766, ptr %1773, align 2, !tbaa !45
  %1774 = getelementptr inbounds i16, ptr %1773, i64 16
  store <16 x i16> %1768, ptr %1774, align 2, !tbaa !45
  %1775 = getelementptr inbounds i16, ptr %1773, i64 32
  store <16 x i16> %1770, ptr %1775, align 2, !tbaa !45
  %1776 = getelementptr inbounds i16, ptr %1773, i64 48
  store <16 x i16> %1772, ptr %1776, align 2, !tbaa !45
  %1777 = add nuw i64 %1764, 64
  %1778 = icmp eq i64 %1777, %1762
  br i1 %1778, label %1779, label %1763, !llvm.loop !94

1779:                                             ; preds = %1763
  %1780 = icmp eq i64 %1761, 0
  br i1 %1780, label %1834, label %1781

1781:                                             ; preds = %1779
  %1782 = icmp ult i64 %1761, 8
  br i1 %1782, label %1796, label %1783

1783:                                             ; preds = %1758, %1781
  %1784 = phi i64 [ %1762, %1781 ], [ 0, %1758 ]
  %1785 = and i64 %1744, 7
  %1786 = sub nsw i64 %1751, %1785
  br label %1787

1787:                                             ; preds = %1787, %1783
  %1788 = phi i64 [ %1784, %1783 ], [ %1792, %1787 ]
  %1789 = getelementptr inbounds i16, ptr %332, i64 %1788
  %1790 = load <8 x i16>, ptr %1789, align 2, !tbaa !45
  %1791 = getelementptr inbounds i16, ptr %1748, i64 %1788
  store <8 x i16> %1790, ptr %1791, align 2, !tbaa !45
  %1792 = add nuw i64 %1788, 8
  %1793 = icmp eq i64 %1792, %1786
  br i1 %1793, label %1794, label %1787, !llvm.loop !95

1794:                                             ; preds = %1787
  %1795 = icmp eq i64 %1785, 0
  br i1 %1795, label %1834, label %1796

1796:                                             ; preds = %1753, %1750, %1781, %1794
  %1797 = phi i64 [ 0, %1750 ], [ 0, %1753 ], [ %1762, %1781 ], [ %1786, %1794 ]
  %1798 = sub i64 %1744, %1797
  %1799 = xor i64 %1797, -1
  %1800 = add nsw i64 %1751, %1799
  %1801 = and i64 %1798, 3
  %1802 = icmp eq i64 %1801, 0
  br i1 %1802, label %1812, label %1803

1803:                                             ; preds = %1796, %1803
  %1804 = phi i64 [ %1809, %1803 ], [ %1797, %1796 ]
  %1805 = phi i64 [ %1810, %1803 ], [ 0, %1796 ]
  %1806 = getelementptr inbounds i16, ptr %332, i64 %1804
  %1807 = load i16, ptr %1806, align 2, !tbaa !45
  %1808 = getelementptr inbounds i16, ptr %1748, i64 %1804
  store i16 %1807, ptr %1808, align 2, !tbaa !45
  %1809 = add nuw nsw i64 %1804, 1
  %1810 = add i64 %1805, 1
  %1811 = icmp eq i64 %1810, %1801
  br i1 %1811, label %1812, label %1803, !llvm.loop !96

1812:                                             ; preds = %1803, %1796
  %1813 = phi i64 [ %1797, %1796 ], [ %1809, %1803 ]
  %1814 = icmp ult i64 %1800, 3
  br i1 %1814, label %1834, label %1815

1815:                                             ; preds = %1812, %1815
  %1816 = phi i64 [ %1832, %1815 ], [ %1813, %1812 ]
  %1817 = getelementptr inbounds i16, ptr %332, i64 %1816
  %1818 = load i16, ptr %1817, align 2, !tbaa !45
  %1819 = getelementptr inbounds i16, ptr %1748, i64 %1816
  store i16 %1818, ptr %1819, align 2, !tbaa !45
  %1820 = add nuw nsw i64 %1816, 1
  %1821 = getelementptr inbounds i16, ptr %332, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !45
  %1823 = getelementptr inbounds i16, ptr %1748, i64 %1820
  store i16 %1822, ptr %1823, align 2, !tbaa !45
  %1824 = add nuw nsw i64 %1816, 2
  %1825 = getelementptr inbounds i16, ptr %332, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !45
  %1827 = getelementptr inbounds i16, ptr %1748, i64 %1824
  store i16 %1826, ptr %1827, align 2, !tbaa !45
  %1828 = add nuw nsw i64 %1816, 3
  %1829 = getelementptr inbounds i16, ptr %332, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !45
  %1831 = getelementptr inbounds i16, ptr %1748, i64 %1828
  store i16 %1830, ptr %1831, align 2, !tbaa !45
  %1832 = add nuw nsw i64 %1816, 4
  %1833 = icmp eq i64 %1832, %1751
  br i1 %1833, label %1834, label %1815, !llvm.loop !97

1834:                                             ; preds = %1812, %1815, %1779, %1794
  %1835 = shl i64 %1743, 31
  %1836 = add i64 %1835, -4294967296
  %1837 = ashr i64 %1836, 32
  %1838 = getelementptr inbounds i16, ptr %1748, i64 %1837
  %1839 = load i16, ptr %1838, align 2, !tbaa !45
  br label %1840

1840:                                             ; preds = %1732, %1834
  %1841 = phi i64 [ %1744, %1834 ], [ 0, %1732 ]
  %1842 = phi i16 [ %1839, %1834 ], [ -1, %1732 ]
  %1843 = and i64 %1841, 4294967295
  %1844 = getelementptr inbounds i16, ptr %1748, i64 %1843
  store i16 %1842, ptr %1844, align 2, !tbaa !45
  %1845 = trunc i64 %1744 to i16
  %1846 = add i16 %1845, 1
  %1847 = sext i32 %1741 to i64
  %1848 = getelementptr inbounds i16, ptr %1201, i64 %1847
  store i16 %1846, ptr %1848, align 2, !tbaa !45
  %1849 = add nsw i32 %1745, 2
  %1850 = add nsw i32 %1849, %1741
  %1851 = ptrtoint ptr %1717 to i64
  %1852 = sub i64 %1851, %669
  %1853 = lshr exact i64 %1852, 1
  %1854 = trunc i64 %1853 to i32
  %1855 = add nsw i32 %1850, 1
  %1856 = sext i32 %1855 to i64
  %1857 = getelementptr i16, ptr %1201, i64 %1856
  %1858 = icmp sgt i32 %1854, 0
  br i1 %1858, label %1859, label %1949

1859:                                             ; preds = %1840
  %1860 = and i64 %1853, 4294967295
  %1861 = icmp ult i64 %1860, 8
  br i1 %1861, label %1905, label %1862

1862:                                             ; preds = %1859
  %1863 = shl nsw i64 %1856, 1
  %1864 = add i64 %1863, %1202
  %1865 = sub i64 %1864, %669
  %1866 = icmp ult i64 %1865, 128
  br i1 %1866, label %1905, label %1867

1867:                                             ; preds = %1862
  %1868 = icmp ult i64 %1860, 64
  br i1 %1868, label %1892, label %1869

1869:                                             ; preds = %1867
  %1870 = and i64 %1853, 63
  %1871 = sub nsw i64 %1860, %1870
  br label %1872

1872:                                             ; preds = %1872, %1869
  %1873 = phi i64 [ 0, %1869 ], [ %1886, %1872 ]
  %1874 = getelementptr inbounds i16, ptr %378, i64 %1873
  %1875 = load <16 x i16>, ptr %1874, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1874, i64 16
  %1877 = load <16 x i16>, ptr %1876, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1874, i64 32
  %1879 = load <16 x i16>, ptr %1878, align 2, !tbaa !45
  %1880 = getelementptr inbounds i16, ptr %1874, i64 48
  %1881 = load <16 x i16>, ptr %1880, align 2, !tbaa !45
  %1882 = getelementptr inbounds i16, ptr %1857, i64 %1873
  store <16 x i16> %1875, ptr %1882, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1882, i64 16
  store <16 x i16> %1877, ptr %1883, align 2, !tbaa !45
  %1884 = getelementptr inbounds i16, ptr %1882, i64 32
  store <16 x i16> %1879, ptr %1884, align 2, !tbaa !45
  %1885 = getelementptr inbounds i16, ptr %1882, i64 48
  store <16 x i16> %1881, ptr %1885, align 2, !tbaa !45
  %1886 = add nuw i64 %1873, 64
  %1887 = icmp eq i64 %1886, %1871
  br i1 %1887, label %1888, label %1872, !llvm.loop !98

1888:                                             ; preds = %1872
  %1889 = icmp eq i64 %1870, 0
  br i1 %1889, label %1943, label %1890

1890:                                             ; preds = %1888
  %1891 = icmp ult i64 %1870, 8
  br i1 %1891, label %1905, label %1892

1892:                                             ; preds = %1867, %1890
  %1893 = phi i64 [ %1871, %1890 ], [ 0, %1867 ]
  %1894 = and i64 %1853, 7
  %1895 = sub nsw i64 %1860, %1894
  br label %1896

1896:                                             ; preds = %1896, %1892
  %1897 = phi i64 [ %1893, %1892 ], [ %1901, %1896 ]
  %1898 = getelementptr inbounds i16, ptr %378, i64 %1897
  %1899 = load <8 x i16>, ptr %1898, align 2, !tbaa !45
  %1900 = getelementptr inbounds i16, ptr %1857, i64 %1897
  store <8 x i16> %1899, ptr %1900, align 2, !tbaa !45
  %1901 = add nuw i64 %1897, 8
  %1902 = icmp eq i64 %1901, %1895
  br i1 %1902, label %1903, label %1896, !llvm.loop !99

1903:                                             ; preds = %1896
  %1904 = icmp eq i64 %1894, 0
  br i1 %1904, label %1943, label %1905

1905:                                             ; preds = %1862, %1859, %1890, %1903
  %1906 = phi i64 [ 0, %1859 ], [ 0, %1862 ], [ %1871, %1890 ], [ %1895, %1903 ]
  %1907 = sub i64 %1853, %1906
  %1908 = xor i64 %1906, -1
  %1909 = add nsw i64 %1860, %1908
  %1910 = and i64 %1907, 3
  %1911 = icmp eq i64 %1910, 0
  br i1 %1911, label %1921, label %1912

1912:                                             ; preds = %1905, %1912
  %1913 = phi i64 [ %1918, %1912 ], [ %1906, %1905 ]
  %1914 = phi i64 [ %1919, %1912 ], [ 0, %1905 ]
  %1915 = getelementptr inbounds i16, ptr %378, i64 %1913
  %1916 = load i16, ptr %1915, align 2, !tbaa !45
  %1917 = getelementptr inbounds i16, ptr %1857, i64 %1913
  store i16 %1916, ptr %1917, align 2, !tbaa !45
  %1918 = add nuw nsw i64 %1913, 1
  %1919 = add i64 %1914, 1
  %1920 = icmp eq i64 %1919, %1910
  br i1 %1920, label %1921, label %1912, !llvm.loop !100

1921:                                             ; preds = %1912, %1905
  %1922 = phi i64 [ %1906, %1905 ], [ %1918, %1912 ]
  %1923 = icmp ult i64 %1909, 3
  br i1 %1923, label %1943, label %1924

1924:                                             ; preds = %1921, %1924
  %1925 = phi i64 [ %1941, %1924 ], [ %1922, %1921 ]
  %1926 = getelementptr inbounds i16, ptr %378, i64 %1925
  %1927 = load i16, ptr %1926, align 2, !tbaa !45
  %1928 = getelementptr inbounds i16, ptr %1857, i64 %1925
  store i16 %1927, ptr %1928, align 2, !tbaa !45
  %1929 = add nuw nsw i64 %1925, 1
  %1930 = getelementptr inbounds i16, ptr %378, i64 %1929
  %1931 = load i16, ptr %1930, align 2, !tbaa !45
  %1932 = getelementptr inbounds i16, ptr %1857, i64 %1929
  store i16 %1931, ptr %1932, align 2, !tbaa !45
  %1933 = add nuw nsw i64 %1925, 2
  %1934 = getelementptr inbounds i16, ptr %378, i64 %1933
  %1935 = load i16, ptr %1934, align 2, !tbaa !45
  %1936 = getelementptr inbounds i16, ptr %1857, i64 %1933
  store i16 %1935, ptr %1936, align 2, !tbaa !45
  %1937 = add nuw nsw i64 %1925, 3
  %1938 = getelementptr inbounds i16, ptr %378, i64 %1937
  %1939 = load i16, ptr %1938, align 2, !tbaa !45
  %1940 = getelementptr inbounds i16, ptr %1857, i64 %1937
  store i16 %1939, ptr %1940, align 2, !tbaa !45
  %1941 = add nuw nsw i64 %1925, 4
  %1942 = icmp eq i64 %1941, %1860
  br i1 %1942, label %1943, label %1924, !llvm.loop !101

1943:                                             ; preds = %1921, %1924, %1888, %1903
  %1944 = shl i64 %1852, 31
  %1945 = add i64 %1944, -4294967296
  %1946 = ashr i64 %1945, 32
  %1947 = getelementptr inbounds i16, ptr %1857, i64 %1946
  %1948 = load i16, ptr %1947, align 2, !tbaa !45
  br label %1949

1949:                                             ; preds = %1840, %1943
  %1950 = phi i64 [ %1853, %1943 ], [ 0, %1840 ]
  %1951 = phi i16 [ %1948, %1943 ], [ -1, %1840 ]
  %1952 = and i64 %1950, 4294967295
  %1953 = getelementptr inbounds i16, ptr %1857, i64 %1952
  store i16 %1951, ptr %1953, align 2, !tbaa !45
  %1954 = trunc i64 %1853 to i16
  %1955 = add i16 %1954, 1
  %1956 = sext i32 %1850 to i64
  %1957 = getelementptr inbounds i16, ptr %1201, i64 %1956
  store i16 %1955, ptr %1957, align 2, !tbaa !45
  %1958 = add i32 %1854, 3
  %1959 = add i32 %1958, %1850
  %1960 = select i1 %145, i32 1, i32 %1959
  store i32 %1960, ptr %17, align 8, !tbaa !19
  br label %1989

1961:                                             ; preds = %708
  %1962 = load ptr, ptr %12, align 8, !tbaa !47
  %1963 = load i32, ptr %17, align 8, !tbaa !19
  %1964 = add i32 %1963, 1
  %1965 = sext i32 %1964 to i64
  %1966 = getelementptr inbounds i16, ptr %1962, i64 %1965
  %1967 = sext i32 %1963 to i64
  %1968 = getelementptr inbounds i16, ptr %1962, i64 %1967
  %1969 = load i16, ptr %1968, align 2, !tbaa !45
  %1970 = zext i16 %1969 to i32
  %1971 = add i32 %1964, %1970
  %1972 = add nsw i32 %1970, -1
  %1973 = sext i32 %1971 to i64
  %1974 = getelementptr inbounds i16, ptr %1962, i64 %1973
  %1975 = load i16, ptr %1974, align 2, !tbaa !45
  %1976 = zext i16 %1975 to i32
  %1977 = add nuw nsw i32 %1976, 1
  %1978 = add nsw i32 %1977, %1971
  %1979 = add nsw i32 %1976, -1
  %1980 = add i32 %1978, 1
  %1981 = sext i32 %1980 to i64
  %1982 = getelementptr inbounds i16, ptr %1962, i64 %1981
  %1983 = sext i32 %1978 to i64
  %1984 = getelementptr inbounds i16, ptr %1962, i64 %1983
  %1985 = load i16, ptr %1984, align 2, !tbaa !45
  %1986 = zext i16 %1985 to i32
  %1987 = add i32 %1980, %1986
  store i32 %1987, ptr %17, align 8, !tbaa !19
  %1988 = add nsw i32 %1986, -1
  br label %1989

1989:                                             ; preds = %1949, %1961
  %1990 = phi i32 [ %1979, %1961 ], [ %1745, %1949 ]
  %1991 = phi ptr [ %1982, %1961 ], [ %1857, %1949 ]
  %1992 = phi i32 [ %1988, %1961 ], [ %1854, %1949 ]
  %1993 = phi i32 [ %1972, %1961 ], [ %1724, %1949 ]
  %1994 = phi ptr [ %1966, %1961 ], [ %1205, %1949 ]
  %1995 = phi i32 [ %687, %1961 ], [ %1166, %1949 ]
  %1996 = phi ptr [ %686, %1961 ], [ %975, %1949 ]
  %1997 = phi ptr [ %685, %1961 ], [ %976, %1949 ]
  %1998 = phi ptr [ %684, %1961 ], [ %977, %1949 ]
  %1999 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %2000 = icmp eq i32 %1999, 0
  %2001 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2002 = icmp ne i32 %2001, 0
  %2003 = select i1 %2000, i1 true, i1 %2002
  br i1 %2003, label %2008, label %2004

2004:                                             ; preds = %1989
  %2005 = load i8, ptr %715, align 2, !tbaa !52
  %2006 = icmp eq i8 %2005, 1
  %2007 = select i1 %2006, double 1.000000e+00, double -1.000000e+00
  br label %2008

2008:                                             ; preds = %1989, %2004
  %2009 = phi double [ %2007, %2004 ], [ 0.000000e+00, %1989 ]
  %2010 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %693, i32 1
  %2011 = load float, ptr %2010, align 8, !tbaa !81
  %2012 = fpext float %2011 to double
  %2013 = fmul double %2012, 0x4074C104816F0069
  %2014 = fmul double %32, %2013
  %2015 = fmul double %28, %2014
  %2016 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %693, i32 2
  %2017 = load i16, ptr %2016, align 4, !tbaa !82
  %2018 = sext i16 %2017 to i32
  %2019 = load ptr, ptr %670, align 8, !tbaa !83
  %2020 = load i32, ptr %671, align 8, !tbaa !85
  %2021 = shl nsw i32 %2018, 1
  %2022 = mul i32 %2021, %2020
  %2023 = zext i32 %2022 to i64
  %2024 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2019, i64 %2023
  %2025 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2026 = extractelement <2 x double> %711, i64 0
  %2027 = extractelement <2 x double> %711, i64 1
  %2028 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2025, double noundef %2026, double noundef %2027, double noundef %714, ptr noundef %44, ptr noundef nonnull %1994, i32 noundef %1993, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2029 = icmp sgt i32 %2028, 0
  br i1 %2029, label %2030, label %2243

2030:                                             ; preds = %2008
  %2031 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2032 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2033 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2034 = mul nsw i32 %2033, %717
  %2035 = mul i32 %2032, 3
  %2036 = mul nsw i32 %729, 3
  %2037 = sext i32 %2036 to i64
  %2038 = add nsw i32 %2036, 1
  %2039 = sext i32 %2038 to i64
  %2040 = add nsw i32 %2036, 2
  %2041 = sext i32 %2040 to i64
  %2042 = zext i32 %2028 to i64
  br label %2043

2043:                                             ; preds = %2030, %2043
  %2044 = phi i64 [ 0, %2030 ], [ %2241, %2043 ]
  %2045 = phi double [ 0.000000e+00, %2030 ], [ %2186, %2043 ]
  %2046 = phi <2 x double> [ %689, %2030 ], [ %2178, %2043 ]
  %2047 = phi <2 x double> [ %690, %2030 ], [ %2171, %2043 ]
  %2048 = phi <2 x double> [ %691, %2030 ], [ %2150, %2043 ]
  %2049 = phi <2 x double> [ %692, %2030 ], [ %2184, %2043 ]
  %2050 = phi <2 x double> [ zeroinitializer, %2030 ], [ %2180, %2043 ]
  %2051 = shl nuw nsw i64 %2044, 1
  %2052 = getelementptr inbounds i32, ptr %144, i64 %2051
  %2053 = load i32, ptr %2052, align 4, !tbaa !5
  %2054 = ashr i32 %2053, 14
  %2055 = add nsw i32 %2054, %37
  %2056 = getelementptr inbounds i16, ptr %97, i64 %2044
  %2057 = load i16, ptr %2056, align 2, !tbaa !45
  %2058 = zext i16 %2057 to i64
  %2059 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2058
  %2060 = getelementptr inbounds double, ptr %143, i64 %2044
  %2061 = load double, ptr %2060, align 8, !tbaa !15
  %2062 = sext i32 %2055 to i64
  %2063 = getelementptr inbounds double, ptr %2031, i64 %2062
  %2064 = load double, ptr %2063, align 8, !tbaa !15
  %2065 = fsub double %2061, %2064
  %2066 = shl nsw i32 %2055, 4
  %2067 = sext i32 %2066 to i64
  %2068 = getelementptr inbounds double, ptr %31, i64 %2067
  %2069 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2058, i32 2
  %2070 = load i16, ptr %2069, align 4, !tbaa !82
  %2071 = sext i16 %2070 to i32
  %2072 = shl nsw i32 %2071, 1
  %2073 = sext i32 %2072 to i64
  %2074 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2024, i64 %2073
  %2075 = getelementptr inbounds %class.Vector, ptr %651, i64 %2058
  %2076 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2058, i32 1
  %2077 = load float, ptr %2076, align 8, !tbaa !81
  %2078 = fpext float %2077 to double
  %2079 = fmul double %2015, %2078
  %2080 = load <2 x double>, ptr %2059, align 8, !tbaa !15
  %2081 = fsub <2 x double> %711, %2080
  %2082 = getelementptr inbounds %class.Vector, ptr %2059, i64 0, i32 2
  %2083 = load double, ptr %2082, align 8, !tbaa !50
  %2084 = fsub double %714, %2083
  %2085 = load double, ptr %2074, align 8, !tbaa !86
  %2086 = fmul double %32, %2085
  %2087 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2024, i64 %2073, i32 1
  %2088 = load double, ptr %2087, align 8, !tbaa !88
  %2089 = load double, ptr %2068, align 8, !tbaa !15
  %2090 = getelementptr inbounds double, ptr %2068, i64 2
  %2091 = load double, ptr %2090, align 8, !tbaa !15
  %2092 = fmul double %2088, %672
  %2093 = fmul double %2092, %2091
  %2094 = tail call double @llvm.fmuladd.f64(double %2086, double %2089, double %2093)
  %2095 = getelementptr inbounds double, ptr %2068, i64 1
  %2096 = load double, ptr %2095, align 8, !tbaa !15
  %2097 = getelementptr inbounds double, ptr %2068, i64 3
  %2098 = load double, ptr %2097, align 8, !tbaa !15
  %2099 = fmul double %2092, %2098
  %2100 = tail call double @llvm.fmuladd.f64(double %2086, double %2096, double %2099)
  %2101 = getelementptr inbounds double, ptr %2068, i64 4
  %2102 = load double, ptr %2101, align 8, !tbaa !15
  %2103 = getelementptr inbounds double, ptr %2068, i64 6
  %2104 = load double, ptr %2103, align 8, !tbaa !15
  %2105 = fmul double %2092, %2104
  %2106 = tail call double @llvm.fmuladd.f64(double %2086, double %2102, double %2105)
  %2107 = getelementptr inbounds double, ptr %2068, i64 5
  %2108 = load double, ptr %2107, align 8, !tbaa !15
  %2109 = getelementptr inbounds double, ptr %2068, i64 7
  %2110 = load double, ptr %2109, align 8, !tbaa !15
  %2111 = fmul double %2092, %2110
  %2112 = tail call double @llvm.fmuladd.f64(double %2086, double %2108, double %2111)
  %2113 = tail call double @llvm.fmuladd.f64(double %2065, double %2094, double %2100)
  %2114 = tail call double @llvm.fmuladd.f64(double %2113, double %2065, double %2106)
  %2115 = fmul double %2009, %2114
  %2116 = load <2 x double>, ptr %673, align 8, !tbaa !15
  %2117 = insertelement <2 x double> poison, double %2115, i64 0
  %2118 = shufflevector <2 x double> %2117, <2 x double> poison, <2 x i32> zeroinitializer
  %2119 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2118, <2 x double> %2081, <2 x double> %2116)
  store <2 x double> %2119, ptr %673, align 8, !tbaa !15
  %2120 = load double, ptr %674, align 8, !tbaa !15
  %2121 = tail call double @llvm.fmuladd.f64(double %2115, double %2084, double %2120)
  store double %2121, ptr %674, align 8, !tbaa !15
  %2122 = getelementptr inbounds double, ptr %2068, i64 8
  %2123 = load double, ptr %2122, align 8, !tbaa !15
  %2124 = fmul double %2079, %2123
  %2125 = getelementptr inbounds double, ptr %2068, i64 9
  %2126 = load double, ptr %2125, align 8, !tbaa !15
  %2127 = fmul double %2079, %2126
  %2128 = getelementptr inbounds double, ptr %2068, i64 10
  %2129 = load double, ptr %2128, align 8, !tbaa !15
  %2130 = fmul double %2079, %2129
  %2131 = getelementptr inbounds double, ptr %2068, i64 11
  %2132 = load double, ptr %2131, align 8, !tbaa !15
  %2133 = fmul double %2079, %2132
  %2134 = insertelement <2 x double> poison, double %2065, i64 0
  %2135 = shufflevector <2 x double> %2134, <2 x double> poison, <2 x i32> zeroinitializer
  %2136 = insertelement <2 x double> poison, double %2124, i64 0
  %2137 = insertelement <2 x double> %2136, double %2094, i64 1
  %2138 = fmul <2 x double> %2135, %2137
  %2139 = insertelement <2 x double> poison, double %2127, i64 0
  %2140 = insertelement <2 x double> %2139, double %2100, i64 1
  %2141 = fmul <2 x double> %2140, <double 2.500000e-01, double 2.500000e-01>
  %2142 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2138, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2141)
  %2143 = insertelement <2 x double> poison, double %2130, i64 0
  %2144 = insertelement <2 x double> %2143, double %2106, i64 1
  %2145 = fmul <2 x double> %2144, <double 5.000000e-01, double 5.000000e-01>
  %2146 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2142, <2 x double> %2135, <2 x double> %2145)
  %2147 = insertelement <2 x double> poison, double %2133, i64 0
  %2148 = insertelement <2 x double> %2147, double %2112, i64 1
  %2149 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2146, <2 x double> %2135, <2 x double> %2148)
  %2150 = fsub <2 x double> %2048, %2149
  %2151 = tail call double @llvm.fmuladd.f64(double %2065, double %2124, double %2127)
  %2152 = tail call double @llvm.fmuladd.f64(double %2151, double %2065, double %2130)
  %2153 = fmul double %2009, %2152
  %2154 = load <2 x double>, ptr %675, align 8, !tbaa !15
  %2155 = insertelement <2 x double> poison, double %2153, i64 0
  %2156 = shufflevector <2 x double> %2155, <2 x double> poison, <2 x i32> zeroinitializer
  %2157 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2156, <2 x double> %2081, <2 x double> %2154)
  store <2 x double> %2157, ptr %675, align 8, !tbaa !15
  %2158 = load double, ptr %676, align 8, !tbaa !15
  %2159 = tail call double @llvm.fmuladd.f64(double %2153, double %2084, double %2158)
  store double %2159, ptr %676, align 8, !tbaa !15
  %2160 = fadd double %2094, %2124
  %2161 = fadd double %2100, %2127
  %2162 = fadd double %2106, %2130
  %2163 = tail call double @llvm.fmuladd.f64(double %2065, double %2160, double %2161)
  %2164 = tail call double @llvm.fmuladd.f64(double %2163, double %2065, double %2162)
  %2165 = extractelement <2 x double> %2081, i64 1
  %2166 = fmul double %2165, %2164
  %2167 = insertelement <2 x double> poison, double %2166, i64 0
  %2168 = shufflevector <2 x double> %2167, <2 x double> poison, <2 x i32> zeroinitializer
  %2169 = shufflevector <2 x double> %2081, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2170 = insertelement <2 x double> %2169, double %2084, i64 1
  %2171 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2168, <2 x double> %2170, <2 x double> %2047)
  %2172 = insertelement <2 x double> %2169, double %2084, i64 0
  %2173 = insertelement <2 x double> poison, double %2164, i64 0
  %2174 = shufflevector <2 x double> %2173, <2 x double> poison, <2 x i32> zeroinitializer
  %2175 = fmul <2 x double> %2172, %2174
  %2176 = shufflevector <2 x double> %2175, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2177 = shufflevector <2 x double> %2175, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2178 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2177, <2 x double> %2081, <2 x double> %2046)
  %2179 = insertelement <2 x double> %2176, double %2166, i64 1
  %2180 = fadd <2 x double> %2050, %2179
  %2181 = load <2 x double>, ptr %2075, align 8, !tbaa !15
  %2182 = fsub <2 x double> %2181, %2179
  store <2 x double> %2182, ptr %2075, align 8, !tbaa !15
  %2183 = shufflevector <2 x double> %2172, <2 x double> poison, <2 x i32> zeroinitializer
  %2184 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2175, <2 x double> %2183, <2 x double> %2049)
  %2185 = extractelement <2 x double> %2175, i64 0
  %2186 = fadd double %2045, %2185
  %2187 = getelementptr inbounds %class.Vector, ptr %651, i64 %2058, i32 2
  %2188 = load double, ptr %2187, align 8, !tbaa !89
  %2189 = fsub double %2188, %2185
  store double %2189, ptr %2187, align 8, !tbaa !89
  %2190 = load double, ptr %2082, align 8, !tbaa !50
  %2191 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2192 = fsub double %2190, %2191
  %2193 = fmul double %10, %2192
  %2194 = tail call double @llvm.floor.f64(double %2193)
  %2195 = fptosi double %2194 to i32
  %2196 = icmp slt i32 %2195, 0
  %2197 = select i1 %2196, i32 %2032, i32 0
  %2198 = icmp sgt i32 %2032, %2195
  %2199 = select i1 %2198, i32 0, i32 %2032
  %2200 = sub i32 %2195, %2199
  %2201 = add i32 %2200, %2197
  %2202 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2058, i32 3
  %2203 = load i8, ptr %2202, align 2, !tbaa !52
  %2204 = zext i8 %2203 to i32
  %2205 = shufflevector <2 x double> %2175, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2206 = fmul <2 x double> %2081, %2205
  %2207 = extractelement <2 x double> %2206, i64 0
  %2208 = fmul double %2165, %2166
  %2209 = fmul double %2084, %2185
  %2210 = add nsw i32 %2034, %2204
  %2211 = mul i32 %2035, %2210
  %2212 = sext i32 %2211 to i64
  %2213 = getelementptr inbounds double, ptr %8, i64 %2212
  %2214 = fmul double %2207, 5.000000e-01
  %2215 = fmul double %2208, 5.000000e-01
  %2216 = fmul double %2209, 5.000000e-01
  %2217 = getelementptr inbounds double, ptr %2213, i64 %2037
  %2218 = load double, ptr %2217, align 8, !tbaa !15
  %2219 = fadd double %2214, %2218
  store double %2219, ptr %2217, align 8, !tbaa !15
  %2220 = getelementptr inbounds double, ptr %2213, i64 %2039
  %2221 = load double, ptr %2220, align 8, !tbaa !15
  %2222 = fadd double %2215, %2221
  store double %2222, ptr %2220, align 8, !tbaa !15
  %2223 = getelementptr inbounds double, ptr %2213, i64 %2041
  %2224 = load double, ptr %2223, align 8, !tbaa !15
  %2225 = fadd double %2216, %2224
  store double %2225, ptr %2223, align 8, !tbaa !15
  %2226 = mul nsw i32 %2201, 3
  %2227 = sext i32 %2226 to i64
  %2228 = getelementptr inbounds double, ptr %2213, i64 %2227
  %2229 = load double, ptr %2228, align 8, !tbaa !15
  %2230 = fadd double %2214, %2229
  store double %2230, ptr %2228, align 8, !tbaa !15
  %2231 = add nsw i32 %2226, 1
  %2232 = sext i32 %2231 to i64
  %2233 = getelementptr inbounds double, ptr %2213, i64 %2232
  %2234 = load double, ptr %2233, align 8, !tbaa !15
  %2235 = fadd double %2215, %2234
  store double %2235, ptr %2233, align 8, !tbaa !15
  %2236 = add nsw i32 %2226, 2
  %2237 = sext i32 %2236 to i64
  %2238 = getelementptr inbounds double, ptr %2213, i64 %2237
  %2239 = load double, ptr %2238, align 8, !tbaa !15
  %2240 = fadd double %2216, %2239
  store double %2240, ptr %2238, align 8, !tbaa !15
  %2241 = add nuw nsw i64 %2044, 1
  %2242 = icmp eq i64 %2241, %2042
  br i1 %2242, label %2243, label %2043

2243:                                             ; preds = %2043, %2008
  %2244 = phi double [ 0.000000e+00, %2008 ], [ %2186, %2043 ]
  %2245 = phi <2 x double> [ %689, %2008 ], [ %2178, %2043 ]
  %2246 = phi <2 x double> [ %690, %2008 ], [ %2171, %2043 ]
  %2247 = phi <2 x double> [ %691, %2008 ], [ %2150, %2043 ]
  %2248 = phi <2 x double> [ %692, %2008 ], [ %2184, %2043 ]
  %2249 = phi <2 x double> [ zeroinitializer, %2008 ], [ %2180, %2043 ]
  %2250 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2251 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2250, double noundef %2026, double noundef %2027, double noundef %714, ptr noundef %44, ptr noundef %1991, i32 noundef %1992, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2252 = icmp sgt i32 %2251, 0
  br i1 %2252, label %2253, label %2468

2253:                                             ; preds = %2243
  %2254 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2255 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2256 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2257 = mul nsw i32 %2256, %717
  %2258 = mul i32 %2255, 3
  %2259 = mul nsw i32 %729, 3
  %2260 = sext i32 %2259 to i64
  %2261 = add nsw i32 %2259, 1
  %2262 = sext i32 %2261 to i64
  %2263 = add nsw i32 %2259, 2
  %2264 = sext i32 %2263 to i64
  %2265 = zext i32 %2251 to i64
  br label %2266

2266:                                             ; preds = %2253, %2266
  %2267 = phi i64 [ 0, %2253 ], [ %2466, %2266 ]
  %2268 = phi double [ %2244, %2253 ], [ %2411, %2266 ]
  %2269 = phi <2 x double> [ %2245, %2253 ], [ %2403, %2266 ]
  %2270 = phi <2 x double> [ %2246, %2253 ], [ %2396, %2266 ]
  %2271 = phi <2 x double> [ %2247, %2253 ], [ %2375, %2266 ]
  %2272 = phi <2 x double> [ %2248, %2253 ], [ %2409, %2266 ]
  %2273 = phi <2 x double> [ %2249, %2253 ], [ %2405, %2266 ]
  %2274 = shl nuw nsw i64 %2267, 1
  %2275 = getelementptr inbounds i32, ptr %144, i64 %2274
  %2276 = load i32, ptr %2275, align 4, !tbaa !5
  %2277 = ashr i32 %2276, 14
  %2278 = add nsw i32 %2277, %37
  %2279 = getelementptr inbounds i16, ptr %97, i64 %2267
  %2280 = load i16, ptr %2279, align 2, !tbaa !45
  %2281 = zext i16 %2280 to i64
  %2282 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2281
  %2283 = getelementptr inbounds double, ptr %143, i64 %2267
  %2284 = load double, ptr %2283, align 8, !tbaa !15
  %2285 = sext i32 %2278 to i64
  %2286 = getelementptr inbounds double, ptr %2254, i64 %2285
  %2287 = load double, ptr %2286, align 8, !tbaa !15
  %2288 = fsub double %2284, %2287
  %2289 = shl nsw i32 %2278, 4
  %2290 = sext i32 %2289 to i64
  %2291 = getelementptr inbounds double, ptr %31, i64 %2290
  %2292 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2281, i32 2
  %2293 = load i16, ptr %2292, align 4, !tbaa !82
  %2294 = sext i16 %2293 to i32
  %2295 = shl nsw i32 %2294, 1
  %2296 = sext i32 %2295 to i64
  %2297 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2024, i64 %2296
  %2298 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2297, i64 1
  %2299 = getelementptr inbounds %class.Vector, ptr %651, i64 %2281
  %2300 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2281, i32 1
  %2301 = load float, ptr %2300, align 8, !tbaa !81
  %2302 = fpext float %2301 to double
  %2303 = fmul double %2015, %2302
  %2304 = load <2 x double>, ptr %2282, align 8, !tbaa !15
  %2305 = fsub <2 x double> %711, %2304
  %2306 = getelementptr inbounds %class.Vector, ptr %2282, i64 0, i32 2
  %2307 = load double, ptr %2306, align 8, !tbaa !50
  %2308 = fsub double %714, %2307
  %2309 = load double, ptr %2298, align 8, !tbaa !86
  %2310 = fmul double %32, %2309
  %2311 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2297, i64 1, i32 1
  %2312 = load double, ptr %2311, align 8, !tbaa !88
  %2313 = load double, ptr %2291, align 8, !tbaa !15
  %2314 = getelementptr inbounds double, ptr %2291, i64 2
  %2315 = load double, ptr %2314, align 8, !tbaa !15
  %2316 = fmul double %2312, %672
  %2317 = fmul double %2316, %2315
  %2318 = tail call double @llvm.fmuladd.f64(double %2310, double %2313, double %2317)
  %2319 = getelementptr inbounds double, ptr %2291, i64 1
  %2320 = load double, ptr %2319, align 8, !tbaa !15
  %2321 = getelementptr inbounds double, ptr %2291, i64 3
  %2322 = load double, ptr %2321, align 8, !tbaa !15
  %2323 = fmul double %2316, %2322
  %2324 = tail call double @llvm.fmuladd.f64(double %2310, double %2320, double %2323)
  %2325 = getelementptr inbounds double, ptr %2291, i64 4
  %2326 = load double, ptr %2325, align 8, !tbaa !15
  %2327 = getelementptr inbounds double, ptr %2291, i64 6
  %2328 = load double, ptr %2327, align 8, !tbaa !15
  %2329 = fmul double %2316, %2328
  %2330 = tail call double @llvm.fmuladd.f64(double %2310, double %2326, double %2329)
  %2331 = getelementptr inbounds double, ptr %2291, i64 5
  %2332 = load double, ptr %2331, align 8, !tbaa !15
  %2333 = getelementptr inbounds double, ptr %2291, i64 7
  %2334 = load double, ptr %2333, align 8, !tbaa !15
  %2335 = fmul double %2316, %2334
  %2336 = tail call double @llvm.fmuladd.f64(double %2310, double %2332, double %2335)
  %2337 = tail call double @llvm.fmuladd.f64(double %2288, double %2318, double %2324)
  %2338 = tail call double @llvm.fmuladd.f64(double %2337, double %2288, double %2330)
  %2339 = fmul double %2009, %2338
  %2340 = load <2 x double>, ptr %673, align 8, !tbaa !15
  %2341 = insertelement <2 x double> poison, double %2339, i64 0
  %2342 = shufflevector <2 x double> %2341, <2 x double> poison, <2 x i32> zeroinitializer
  %2343 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2342, <2 x double> %2305, <2 x double> %2340)
  store <2 x double> %2343, ptr %673, align 8, !tbaa !15
  %2344 = load double, ptr %674, align 8, !tbaa !15
  %2345 = tail call double @llvm.fmuladd.f64(double %2339, double %2308, double %2344)
  store double %2345, ptr %674, align 8, !tbaa !15
  %2346 = fmul double %678, %2303
  %2347 = getelementptr inbounds double, ptr %2291, i64 8
  %2348 = load double, ptr %2347, align 8, !tbaa !15
  %2349 = fmul double %2346, %2348
  %2350 = getelementptr inbounds double, ptr %2291, i64 9
  %2351 = load double, ptr %2350, align 8, !tbaa !15
  %2352 = fmul double %2346, %2351
  %2353 = getelementptr inbounds double, ptr %2291, i64 10
  %2354 = load double, ptr %2353, align 8, !tbaa !15
  %2355 = fmul double %2346, %2354
  %2356 = getelementptr inbounds double, ptr %2291, i64 11
  %2357 = load double, ptr %2356, align 8, !tbaa !15
  %2358 = fmul double %2346, %2357
  %2359 = insertelement <2 x double> poison, double %2288, i64 0
  %2360 = shufflevector <2 x double> %2359, <2 x double> poison, <2 x i32> zeroinitializer
  %2361 = insertelement <2 x double> poison, double %2349, i64 0
  %2362 = insertelement <2 x double> %2361, double %2318, i64 1
  %2363 = fmul <2 x double> %2360, %2362
  %2364 = insertelement <2 x double> poison, double %2352, i64 0
  %2365 = insertelement <2 x double> %2364, double %2324, i64 1
  %2366 = fmul <2 x double> %2365, <double 2.500000e-01, double 2.500000e-01>
  %2367 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2363, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2366)
  %2368 = insertelement <2 x double> poison, double %2355, i64 0
  %2369 = insertelement <2 x double> %2368, double %2330, i64 1
  %2370 = fmul <2 x double> %2369, <double 5.000000e-01, double 5.000000e-01>
  %2371 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2367, <2 x double> %2360, <2 x double> %2370)
  %2372 = insertelement <2 x double> poison, double %2358, i64 0
  %2373 = insertelement <2 x double> %2372, double %2336, i64 1
  %2374 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2371, <2 x double> %2360, <2 x double> %2373)
  %2375 = fsub <2 x double> %2271, %2374
  %2376 = tail call double @llvm.fmuladd.f64(double %2288, double %2349, double %2352)
  %2377 = tail call double @llvm.fmuladd.f64(double %2376, double %2288, double %2355)
  %2378 = fmul double %2009, %2377
  %2379 = load <2 x double>, ptr %675, align 8, !tbaa !15
  %2380 = insertelement <2 x double> poison, double %2378, i64 0
  %2381 = shufflevector <2 x double> %2380, <2 x double> poison, <2 x i32> zeroinitializer
  %2382 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2381, <2 x double> %2305, <2 x double> %2379)
  store <2 x double> %2382, ptr %675, align 8, !tbaa !15
  %2383 = load double, ptr %676, align 8, !tbaa !15
  %2384 = tail call double @llvm.fmuladd.f64(double %2378, double %2308, double %2383)
  store double %2384, ptr %676, align 8, !tbaa !15
  %2385 = fadd double %2318, %2349
  %2386 = fadd double %2324, %2352
  %2387 = fadd double %2330, %2355
  %2388 = tail call double @llvm.fmuladd.f64(double %2288, double %2385, double %2386)
  %2389 = tail call double @llvm.fmuladd.f64(double %2388, double %2288, double %2387)
  %2390 = extractelement <2 x double> %2305, i64 1
  %2391 = fmul double %2390, %2389
  %2392 = insertelement <2 x double> poison, double %2391, i64 0
  %2393 = shufflevector <2 x double> %2392, <2 x double> poison, <2 x i32> zeroinitializer
  %2394 = shufflevector <2 x double> %2305, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2395 = insertelement <2 x double> %2394, double %2308, i64 1
  %2396 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2393, <2 x double> %2395, <2 x double> %2270)
  %2397 = insertelement <2 x double> %2394, double %2308, i64 0
  %2398 = insertelement <2 x double> poison, double %2389, i64 0
  %2399 = shufflevector <2 x double> %2398, <2 x double> poison, <2 x i32> zeroinitializer
  %2400 = fmul <2 x double> %2397, %2399
  %2401 = shufflevector <2 x double> %2400, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2402 = shufflevector <2 x double> %2400, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2403 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2402, <2 x double> %2305, <2 x double> %2269)
  %2404 = insertelement <2 x double> %2401, double %2391, i64 1
  %2405 = fadd <2 x double> %2273, %2404
  %2406 = load <2 x double>, ptr %2299, align 8, !tbaa !15
  %2407 = fsub <2 x double> %2406, %2404
  store <2 x double> %2407, ptr %2299, align 8, !tbaa !15
  %2408 = shufflevector <2 x double> %2397, <2 x double> poison, <2 x i32> zeroinitializer
  %2409 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2400, <2 x double> %2408, <2 x double> %2272)
  %2410 = extractelement <2 x double> %2400, i64 0
  %2411 = fadd double %2268, %2410
  %2412 = getelementptr inbounds %class.Vector, ptr %651, i64 %2281, i32 2
  %2413 = load double, ptr %2412, align 8, !tbaa !89
  %2414 = fsub double %2413, %2410
  store double %2414, ptr %2412, align 8, !tbaa !89
  %2415 = load double, ptr %2306, align 8, !tbaa !50
  %2416 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2417 = fsub double %2415, %2416
  %2418 = fmul double %10, %2417
  %2419 = tail call double @llvm.floor.f64(double %2418)
  %2420 = fptosi double %2419 to i32
  %2421 = icmp slt i32 %2420, 0
  %2422 = select i1 %2421, i32 %2255, i32 0
  %2423 = icmp sgt i32 %2255, %2420
  %2424 = select i1 %2423, i32 0, i32 %2255
  %2425 = sub i32 %2420, %2424
  %2426 = add i32 %2425, %2422
  %2427 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2281, i32 3
  %2428 = load i8, ptr %2427, align 2, !tbaa !52
  %2429 = zext i8 %2428 to i32
  %2430 = shufflevector <2 x double> %2400, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2431 = fmul <2 x double> %2305, %2430
  %2432 = extractelement <2 x double> %2431, i64 0
  %2433 = fmul double %2390, %2391
  %2434 = fmul double %2308, %2410
  %2435 = add nsw i32 %2257, %2429
  %2436 = mul i32 %2258, %2435
  %2437 = sext i32 %2436 to i64
  %2438 = getelementptr inbounds double, ptr %8, i64 %2437
  %2439 = fmul double %2432, 5.000000e-01
  %2440 = fmul double %2433, 5.000000e-01
  %2441 = fmul double %2434, 5.000000e-01
  %2442 = getelementptr inbounds double, ptr %2438, i64 %2260
  %2443 = load double, ptr %2442, align 8, !tbaa !15
  %2444 = fadd double %2439, %2443
  store double %2444, ptr %2442, align 8, !tbaa !15
  %2445 = getelementptr inbounds double, ptr %2438, i64 %2262
  %2446 = load double, ptr %2445, align 8, !tbaa !15
  %2447 = fadd double %2440, %2446
  store double %2447, ptr %2445, align 8, !tbaa !15
  %2448 = getelementptr inbounds double, ptr %2438, i64 %2264
  %2449 = load double, ptr %2448, align 8, !tbaa !15
  %2450 = fadd double %2441, %2449
  store double %2450, ptr %2448, align 8, !tbaa !15
  %2451 = mul nsw i32 %2426, 3
  %2452 = sext i32 %2451 to i64
  %2453 = getelementptr inbounds double, ptr %2438, i64 %2452
  %2454 = load double, ptr %2453, align 8, !tbaa !15
  %2455 = fadd double %2439, %2454
  store double %2455, ptr %2453, align 8, !tbaa !15
  %2456 = add nsw i32 %2451, 1
  %2457 = sext i32 %2456 to i64
  %2458 = getelementptr inbounds double, ptr %2438, i64 %2457
  %2459 = load double, ptr %2458, align 8, !tbaa !15
  %2460 = fadd double %2440, %2459
  store double %2460, ptr %2458, align 8, !tbaa !15
  %2461 = add nsw i32 %2451, 2
  %2462 = sext i32 %2461 to i64
  %2463 = getelementptr inbounds double, ptr %2438, i64 %2462
  %2464 = load double, ptr %2463, align 8, !tbaa !15
  %2465 = fadd double %2441, %2464
  store double %2465, ptr %2463, align 8, !tbaa !15
  %2466 = add nuw nsw i64 %2267, 1
  %2467 = icmp eq i64 %2466, %2265
  br i1 %2467, label %2468, label %2266

2468:                                             ; preds = %2266, %2243
  %2469 = phi double [ %2244, %2243 ], [ %2411, %2266 ]
  %2470 = phi <2 x double> [ %2245, %2243 ], [ %2403, %2266 ]
  %2471 = phi <2 x double> [ %2246, %2243 ], [ %2396, %2266 ]
  %2472 = phi <2 x double> [ %2247, %2243 ], [ %2375, %2266 ]
  %2473 = phi <2 x double> [ %2248, %2243 ], [ %2409, %2266 ]
  %2474 = phi <2 x double> [ %2249, %2243 ], [ %2405, %2266 ]
  %2475 = add i32 %1990, %682
  %2476 = add i32 %2475, %2251
  %2477 = getelementptr inbounds %class.Vector, ptr %652, i64 %693
  %2478 = load <2 x double>, ptr %2477, align 8, !tbaa !15
  %2479 = fadd <2 x double> %2474, %2478
  store <2 x double> %2479, ptr %2477, align 8, !tbaa !15
  %2480 = getelementptr inbounds %class.Vector, ptr %652, i64 %693, i32 2
  %2481 = load double, ptr %2480, align 8, !tbaa !89
  %2482 = fadd double %2469, %2481
  store double %2482, ptr %2480, align 8, !tbaa !89
  br i1 %147, label %2485, label %2483

2483:                                             ; preds = %2468
  %2484 = add nsw i32 %683, 1
  br label %2493

2485:                                             ; preds = %2468
  %2486 = load ptr, ptr %12, align 8, !tbaa !47
  %2487 = load i32, ptr %17, align 8, !tbaa !19
  %2488 = add nsw i32 %2487, 1
  store i32 %2488, ptr %17, align 8, !tbaa !19
  %2489 = sext i32 %2487 to i64
  %2490 = getelementptr inbounds i16, ptr %2486, i64 %2489
  %2491 = load i16, ptr %2490, align 2, !tbaa !45
  %2492 = zext i16 %2491 to i32
  br label %2493

2493:                                             ; preds = %1264, %1223, %1152, %1603, %2485, %2483, %705
  %2494 = phi i32 [ %706, %705 ], [ %709, %2485 ], [ %709, %2483 ], [ %709, %1603 ], [ %709, %1152 ], [ %709, %1223 ], [ %709, %1264 ]
  %2495 = phi i32 [ %687, %705 ], [ %1995, %2485 ], [ %1995, %2483 ], [ %1166, %1603 ], [ 0, %1152 ], [ %1166, %1223 ], [ %1166, %1264 ]
  %2496 = phi ptr [ %686, %705 ], [ %1996, %2485 ], [ %1996, %2483 ], [ %975, %1603 ], [ %975, %1152 ], [ %975, %1223 ], [ %975, %1264 ]
  %2497 = phi ptr [ %685, %705 ], [ %1997, %2485 ], [ %1997, %2483 ], [ %976, %1603 ], [ %976, %1152 ], [ %976, %1223 ], [ %976, %1264 ]
  %2498 = phi ptr [ %684, %705 ], [ %1998, %2485 ], [ %1998, %2483 ], [ %977, %1603 ], [ %977, %1152 ], [ %977, %1223 ], [ %977, %1264 ]
  %2499 = phi i32 [ %707, %705 ], [ %2492, %2485 ], [ %2484, %2483 ], [ %1604, %1603 ], [ %1156, %1152 ], [ %1224, %1223 ], [ %1265, %1264 ]
  %2500 = phi i32 [ %682, %705 ], [ %2476, %2485 ], [ %2476, %2483 ], [ %682, %1603 ], [ %682, %1152 ], [ %682, %1223 ], [ %682, %1264 ]
  %2501 = phi <2 x double> [ %689, %705 ], [ %2470, %2485 ], [ %2470, %2483 ], [ %689, %1603 ], [ %689, %1152 ], [ %689, %1223 ], [ %689, %1264 ]
  %2502 = phi <2 x double> [ %690, %705 ], [ %2471, %2485 ], [ %2471, %2483 ], [ %690, %1603 ], [ %690, %1152 ], [ %690, %1223 ], [ %690, %1264 ]
  %2503 = phi <2 x double> [ %691, %705 ], [ %2472, %2485 ], [ %2472, %2483 ], [ %691, %1603 ], [ %691, %1152 ], [ %691, %1223 ], [ %691, %1264 ]
  %2504 = phi <2 x double> [ %692, %705 ], [ %2473, %2485 ], [ %2473, %2483 ], [ %692, %1603 ], [ %692, %1152 ], [ %692, %1223 ], [ %692, %1264 ]
  %2505 = icmp slt i32 %2499, %39
  br i1 %2505, label %681, label %2506

2506:                                             ; preds = %2493, %648
  %2507 = phi ptr [ null, %648 ], [ %2498, %2493 ]
  %2508 = phi i32 [ %655, %648 ], [ %2499, %2493 ]
  %2509 = phi i32 [ 0, %648 ], [ %2500, %2493 ]
  %2510 = phi <2 x double> [ zeroinitializer, %648 ], [ %2501, %2493 ]
  %2511 = phi <2 x double> [ zeroinitializer, %648 ], [ %2502, %2493 ]
  %2512 = phi <2 x double> [ zeroinitializer, %648 ], [ %2503, %2493 ]
  %2513 = phi <2 x double> [ zeroinitializer, %648 ], [ %2504, %2493 ]
  br i1 %145, label %2521, label %2514

2514:                                             ; preds = %2506
  %2515 = trunc i32 %2508 to i16
  %2516 = load ptr, ptr %12, align 8, !tbaa !47
  %2517 = load i32, ptr %17, align 8, !tbaa !19
  %2518 = add nsw i32 %2517, -1
  %2519 = sext i32 %2518 to i64
  %2520 = getelementptr inbounds i16, ptr %2516, i64 %2519
  store i16 %2515, ptr %2520, align 2, !tbaa !45
  br label %2521

2521:                                             ; preds = %2514, %2506
  %2522 = sitofp i32 %2509 to double
  %2523 = getelementptr inbounds double, ptr %6, i64 22
  %2524 = load double, ptr %2523, align 8, !tbaa !15
  %2525 = fadd double %2524, %2522
  store double %2525, ptr %2523, align 8, !tbaa !15
  %2526 = getelementptr inbounds double, ptr %6, i64 2
  %2527 = load double, ptr %2526, align 8, !tbaa !15
  %2528 = extractelement <2 x double> %2512, i64 1
  %2529 = fadd double %2528, %2527
  store double %2529, ptr %2526, align 8, !tbaa !15
  %2530 = load double, ptr %6, align 8, !tbaa !15
  %2531 = extractelement <2 x double> %2512, i64 0
  %2532 = fadd double %2531, %2530
  store double %2532, ptr %6, align 8, !tbaa !15
  %2533 = getelementptr inbounds double, ptr %6, i64 3
  %2534 = load <4 x double>, ptr %2533, align 8, !tbaa !15
  %2535 = shufflevector <2 x double> %2510, <2 x double> %2513, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2536 = shufflevector <4 x double> %2535, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2537 = fadd <4 x double> %2536, %2534
  store <4 x double> %2537, ptr %2533, align 8, !tbaa !15
  %2538 = getelementptr inbounds double, ptr %6, i64 7
  %2539 = load <4 x double>, ptr %2538, align 8, !tbaa !15
  %2540 = shufflevector <2 x double> %2511, <2 x double> %2513, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2541 = shufflevector <4 x double> %2540, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2542 = fadd <4 x double> %2541, %2539
  store <4 x double> %2542, ptr %2538, align 8, !tbaa !15
  %2543 = getelementptr inbounds double, ptr %6, i64 11
  %2544 = load double, ptr %2543, align 8, !tbaa !15
  %2545 = extractelement <2 x double> %2513, i64 0
  %2546 = fadd double %2545, %2544
  store double %2546, ptr %2543, align 8, !tbaa !15
  %2547 = icmp eq ptr %2507, null
  br i1 %2547, label %2549, label %2548

2548:                                             ; preds = %2521
  tail call void @_ZdaPv(ptr noundef nonnull %2507) #10
  br label %2549

2549:                                             ; preds = %2521, %2548, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil25calc_pair_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2859

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %35 = fsub double 1.000000e+00, %34
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %37 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %38 = shl i32 %37, 6
  %39 = add i32 %38, -65472
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !5
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !5
  %44 = load ptr, ptr %0, align 8, !tbaa !24
  %45 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !24
  %51 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %52 = load ptr, ptr %51, align 8, !tbaa !25
  %53 = add nsw i32 %43, 5
  %54 = getelementptr inbounds %class.ResizeArray, ptr %52, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !26
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 2
  %57 = load i32, ptr %56, align 8, !tbaa !28
  %58 = icmp slt i32 %57, %53
  br i1 %58, label %59, label %97

59:                                               ; preds = %4
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 3
  %61 = load i32, ptr %60, align 4, !tbaa !31
  %62 = icmp slt i32 %61, %53
  br i1 %62, label %63, label %97

63:                                               ; preds = %59
  %64 = sitofp i32 %61 to float
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 5
  %66 = load float, ptr %65, align 4, !tbaa !32
  %67 = fmul float %66, %64
  %68 = fptosi float %67 to i32
  %69 = tail call i32 @llvm.smax.i32(i32 %68, i32 %53)
  %70 = sub nsw i32 %69, %61
  %71 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 6
  %72 = load i32, ptr %71, align 8, !tbaa !33
  %73 = icmp slt i32 %70, %72
  %74 = add nsw i32 %72, %61
  %75 = select i1 %73, i32 %74, i32 %69
  %76 = sext i32 %75 to i64
  %77 = shl nsw i64 %76, 1
  %78 = add nsw i64 %77, 31
  %79 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %78) #9
  %80 = getelementptr inbounds i8, ptr %79, i64 31
  %81 = ptrtoint ptr %80 to i64
  %82 = and i64 %81, 31
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds i8, ptr %80, i64 %83
  %85 = load ptr, ptr %55, align 8, !tbaa !34
  %86 = sext i32 %57 to i64
  %87 = shl nsw i64 %86, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %84, ptr align 1 %85, i64 %87, i1 false)
  %88 = icmp eq i32 %61, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %63
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !35
  %92 = icmp eq ptr %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %89
  tail call void @_ZdaPv(ptr noundef nonnull %91) #10
  br label %94

94:                                               ; preds = %93, %89, %63
  %95 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  store ptr %79, ptr %95, align 8, !tbaa !35
  store ptr %84, ptr %55, align 8, !tbaa !34
  store i32 %75, ptr %60, align 4, !tbaa !31
  %96 = load ptr, ptr %54, align 8, !tbaa !26
  br label %97

97:                                               ; preds = %4, %59, %94
  %98 = phi ptr [ %55, %4 ], [ %55, %59 ], [ %96, %94 ]
  store i32 %53, ptr %56, align 8, !tbaa !28
  %99 = load ptr, ptr %98, align 8, !tbaa !34
  %100 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 1, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !36
  %102 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 2
  %103 = load i32, ptr %102, align 8, !tbaa !38
  %104 = icmp slt i32 %103, %53
  br i1 %104, label %105, label %143

105:                                              ; preds = %97
  %106 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 3
  %107 = load i32, ptr %106, align 4, !tbaa !40
  %108 = icmp slt i32 %107, %53
  br i1 %108, label %109, label %143

109:                                              ; preds = %105
  %110 = sitofp i32 %107 to float
  %111 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 5
  %112 = load float, ptr %111, align 4, !tbaa !41
  %113 = fmul float %112, %110
  %114 = fptosi float %113 to i32
  %115 = tail call i32 @llvm.smax.i32(i32 %114, i32 %53)
  %116 = sub nsw i32 %115, %107
  %117 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 6
  %118 = load i32, ptr %117, align 8, !tbaa !42
  %119 = icmp slt i32 %116, %118
  %120 = add nsw i32 %118, %107
  %121 = select i1 %119, i32 %120, i32 %115
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 3
  %124 = add nsw i64 %123, 31
  %125 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %124) #9
  %126 = getelementptr inbounds i8, ptr %125, i64 31
  %127 = ptrtoint ptr %126 to i64
  %128 = and i64 %127, 31
  %129 = sub nsw i64 0, %128
  %130 = getelementptr inbounds i8, ptr %126, i64 %129
  %131 = load ptr, ptr %101, align 8, !tbaa !43
  %132 = sext i32 %103 to i64
  %133 = shl nsw i64 %132, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %130, ptr align 1 %131, i64 %133, i1 false)
  %134 = icmp eq i32 %107, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %109
  %136 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !44
  %138 = icmp eq ptr %137, null
  br i1 %138, label %140, label %139

139:                                              ; preds = %135
  tail call void @_ZdaPv(ptr noundef nonnull %137) #10
  br label %140

140:                                              ; preds = %139, %135, %109
  %141 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  store ptr %125, ptr %141, align 8, !tbaa !44
  store ptr %130, ptr %101, align 8, !tbaa !43
  store i32 %121, ptr %106, align 4, !tbaa !40
  %142 = load ptr, ptr %100, align 8, !tbaa !36
  br label %143

143:                                              ; preds = %97, %105, %140
  %144 = phi ptr [ %101, %97 ], [ %101, %105 ], [ %142, %140 ]
  store i32 %53, ptr %102, align 8, !tbaa !38
  %145 = load ptr, ptr %144, align 8, !tbaa !43
  %146 = getelementptr inbounds i32, ptr %145, i64 1
  %147 = icmp eq i32 %14, 0
  %148 = icmp ne i32 %16, 0
  %149 = select i1 %147, i1 %148, i1 false
  %150 = select i1 %149, i32 0, i32 %53
  %151 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 2, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !26
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 2
  %154 = load i32, ptr %153, align 8, !tbaa !28
  %155 = icmp slt i32 %154, %150
  br i1 %155, label %156, label %194

156:                                              ; preds = %143
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 3
  %158 = load i32, ptr %157, align 4, !tbaa !31
  %159 = icmp slt i32 %158, %150
  br i1 %159, label %160, label %194

160:                                              ; preds = %156
  %161 = sitofp i32 %158 to float
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 5
  %163 = load float, ptr %162, align 4, !tbaa !32
  %164 = fmul float %163, %161
  %165 = fptosi float %164 to i32
  %166 = tail call i32 @llvm.smax.i32(i32 %165, i32 %150)
  %167 = sub nsw i32 %166, %158
  %168 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 6
  %169 = load i32, ptr %168, align 8, !tbaa !33
  %170 = icmp slt i32 %167, %169
  %171 = add nsw i32 %169, %158
  %172 = select i1 %170, i32 %171, i32 %166
  %173 = sext i32 %172 to i64
  %174 = shl nsw i64 %173, 1
  %175 = add nsw i64 %174, 31
  %176 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %175) #9
  %177 = getelementptr inbounds i8, ptr %176, i64 31
  %178 = ptrtoint ptr %177 to i64
  %179 = and i64 %178, 31
  %180 = sub nsw i64 0, %179
  %181 = getelementptr inbounds i8, ptr %177, i64 %180
  %182 = load ptr, ptr %152, align 8, !tbaa !34
  %183 = sext i32 %154 to i64
  %184 = shl nsw i64 %183, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %181, ptr align 1 %182, i64 %184, i1 false)
  %185 = icmp eq i32 %158, 0
  br i1 %185, label %191, label %186

186:                                              ; preds = %160
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  %188 = load ptr, ptr %187, align 8, !tbaa !35
  %189 = icmp eq ptr %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZdaPv(ptr noundef nonnull %188) #10
  br label %191

191:                                              ; preds = %190, %186, %160
  %192 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  store ptr %176, ptr %192, align 8, !tbaa !35
  store ptr %181, ptr %152, align 8, !tbaa !34
  store i32 %172, ptr %157, align 4, !tbaa !31
  %193 = load ptr, ptr %151, align 8, !tbaa !26
  br label %194

194:                                              ; preds = %143, %156, %191
  %195 = phi ptr [ %152, %143 ], [ %152, %156 ], [ %193, %191 ]
  store i32 %150, ptr %153, align 8, !tbaa !28
  %196 = load ptr, ptr %195, align 8, !tbaa !34
  %197 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 3, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !26
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 2
  %200 = load i32, ptr %199, align 8, !tbaa !28
  %201 = icmp slt i32 %200, %150
  br i1 %201, label %202, label %240

202:                                              ; preds = %194
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 3
  %204 = load i32, ptr %203, align 4, !tbaa !31
  %205 = icmp slt i32 %204, %150
  br i1 %205, label %206, label %240

206:                                              ; preds = %202
  %207 = sitofp i32 %204 to float
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 5
  %209 = load float, ptr %208, align 4, !tbaa !32
  %210 = fmul float %209, %207
  %211 = fptosi float %210 to i32
  %212 = tail call i32 @llvm.smax.i32(i32 %211, i32 %150)
  %213 = sub nsw i32 %212, %204
  %214 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 6
  %215 = load i32, ptr %214, align 8, !tbaa !33
  %216 = icmp slt i32 %213, %215
  %217 = add nsw i32 %215, %204
  %218 = select i1 %216, i32 %217, i32 %212
  %219 = sext i32 %218 to i64
  %220 = shl nsw i64 %219, 1
  %221 = add nsw i64 %220, 31
  %222 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %221) #9
  %223 = getelementptr inbounds i8, ptr %222, i64 31
  %224 = ptrtoint ptr %223 to i64
  %225 = and i64 %224, 31
  %226 = sub nsw i64 0, %225
  %227 = getelementptr inbounds i8, ptr %223, i64 %226
  %228 = load ptr, ptr %198, align 8, !tbaa !34
  %229 = sext i32 %200 to i64
  %230 = shl nsw i64 %229, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %227, ptr align 1 %228, i64 %230, i1 false)
  %231 = icmp eq i32 %204, 0
  br i1 %231, label %237, label %232

232:                                              ; preds = %206
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  %234 = load ptr, ptr %233, align 8, !tbaa !35
  %235 = icmp eq ptr %234, null
  br i1 %235, label %237, label %236

236:                                              ; preds = %232
  tail call void @_ZdaPv(ptr noundef nonnull %234) #10
  br label %237

237:                                              ; preds = %236, %232, %206
  %238 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  store ptr %222, ptr %238, align 8, !tbaa !35
  store ptr %227, ptr %198, align 8, !tbaa !34
  store i32 %218, ptr %203, align 4, !tbaa !31
  %239 = load ptr, ptr %197, align 8, !tbaa !26
  br label %240

240:                                              ; preds = %194, %202, %237
  %241 = phi ptr [ %198, %194 ], [ %198, %202 ], [ %239, %237 ]
  store i32 %150, ptr %199, align 8, !tbaa !28
  %242 = load ptr, ptr %241, align 8, !tbaa !34
  %243 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 4, i32 1
  %244 = load ptr, ptr %243, align 8, !tbaa !26
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 2
  %246 = load i32, ptr %245, align 8, !tbaa !28
  %247 = icmp slt i32 %246, %150
  br i1 %247, label %248, label %286

248:                                              ; preds = %240
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 3
  %250 = load i32, ptr %249, align 4, !tbaa !31
  %251 = icmp slt i32 %250, %150
  br i1 %251, label %252, label %286

252:                                              ; preds = %248
  %253 = sitofp i32 %250 to float
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 5
  %255 = load float, ptr %254, align 4, !tbaa !32
  %256 = fmul float %255, %253
  %257 = fptosi float %256 to i32
  %258 = tail call i32 @llvm.smax.i32(i32 %257, i32 %150)
  %259 = sub nsw i32 %258, %250
  %260 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 6
  %261 = load i32, ptr %260, align 8, !tbaa !33
  %262 = icmp slt i32 %259, %261
  %263 = add nsw i32 %261, %250
  %264 = select i1 %262, i32 %263, i32 %258
  %265 = sext i32 %264 to i64
  %266 = shl nsw i64 %265, 1
  %267 = add nsw i64 %266, 31
  %268 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %267) #9
  %269 = getelementptr inbounds i8, ptr %268, i64 31
  %270 = ptrtoint ptr %269 to i64
  %271 = and i64 %270, 31
  %272 = sub nsw i64 0, %271
  %273 = getelementptr inbounds i8, ptr %269, i64 %272
  %274 = load ptr, ptr %244, align 8, !tbaa !34
  %275 = sext i32 %246 to i64
  %276 = shl nsw i64 %275, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %273, ptr align 1 %274, i64 %276, i1 false)
  %277 = icmp eq i32 %250, 0
  br i1 %277, label %283, label %278

278:                                              ; preds = %252
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !35
  %281 = icmp eq ptr %280, null
  br i1 %281, label %283, label %282

282:                                              ; preds = %278
  tail call void @_ZdaPv(ptr noundef nonnull %280) #10
  br label %283

283:                                              ; preds = %282, %278, %252
  %284 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  store ptr %268, ptr %284, align 8, !tbaa !35
  store ptr %273, ptr %244, align 8, !tbaa !34
  store i32 %264, ptr %249, align 4, !tbaa !31
  %285 = load ptr, ptr %243, align 8, !tbaa !26
  br label %286

286:                                              ; preds = %240, %248, %283
  %287 = phi ptr [ %244, %240 ], [ %244, %248 ], [ %285, %283 ]
  store i32 %150, ptr %245, align 8, !tbaa !28
  %288 = load ptr, ptr %287, align 8, !tbaa !34
  %289 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 5, i32 1
  %290 = load ptr, ptr %289, align 8, !tbaa !26
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 2
  %292 = load i32, ptr %291, align 8, !tbaa !28
  %293 = icmp slt i32 %292, %150
  br i1 %293, label %294, label %332

294:                                              ; preds = %286
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 3
  %296 = load i32, ptr %295, align 4, !tbaa !31
  %297 = icmp slt i32 %296, %150
  br i1 %297, label %298, label %332

298:                                              ; preds = %294
  %299 = sitofp i32 %296 to float
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 5
  %301 = load float, ptr %300, align 4, !tbaa !32
  %302 = fmul float %301, %299
  %303 = fptosi float %302 to i32
  %304 = tail call i32 @llvm.smax.i32(i32 %303, i32 %150)
  %305 = sub nsw i32 %304, %296
  %306 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 6
  %307 = load i32, ptr %306, align 8, !tbaa !33
  %308 = icmp slt i32 %305, %307
  %309 = add nsw i32 %307, %296
  %310 = select i1 %308, i32 %309, i32 %304
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 1
  %313 = add nsw i64 %312, 31
  %314 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %313) #9
  %315 = getelementptr inbounds i8, ptr %314, i64 31
  %316 = ptrtoint ptr %315 to i64
  %317 = and i64 %316, 31
  %318 = sub nsw i64 0, %317
  %319 = getelementptr inbounds i8, ptr %315, i64 %318
  %320 = load ptr, ptr %290, align 8, !tbaa !34
  %321 = sext i32 %292 to i64
  %322 = shl nsw i64 %321, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %319, ptr align 1 %320, i64 %322, i1 false)
  %323 = icmp eq i32 %296, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %298
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !35
  %327 = icmp eq ptr %326, null
  br i1 %327, label %329, label %328

328:                                              ; preds = %324
  tail call void @_ZdaPv(ptr noundef nonnull %326) #10
  br label %329

329:                                              ; preds = %328, %324, %298
  %330 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  store ptr %314, ptr %330, align 8, !tbaa !35
  store ptr %319, ptr %290, align 8, !tbaa !34
  store i32 %310, ptr %295, align 4, !tbaa !31
  %331 = load ptr, ptr %289, align 8, !tbaa !26
  br label %332

332:                                              ; preds = %286, %294, %329
  %333 = phi ptr [ %290, %286 ], [ %290, %294 ], [ %331, %329 ]
  store i32 %150, ptr %291, align 8, !tbaa !28
  %334 = load ptr, ptr %333, align 8, !tbaa !34
  %335 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 6, i32 1
  %336 = load ptr, ptr %335, align 8, !tbaa !26
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 2
  %338 = load i32, ptr %337, align 8, !tbaa !28
  %339 = icmp slt i32 %338, %150
  br i1 %339, label %340, label %378

340:                                              ; preds = %332
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 3
  %342 = load i32, ptr %341, align 4, !tbaa !31
  %343 = icmp slt i32 %342, %150
  br i1 %343, label %344, label %378

344:                                              ; preds = %340
  %345 = sitofp i32 %342 to float
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 5
  %347 = load float, ptr %346, align 4, !tbaa !32
  %348 = fmul float %347, %345
  %349 = fptosi float %348 to i32
  %350 = tail call i32 @llvm.smax.i32(i32 %349, i32 %150)
  %351 = sub nsw i32 %350, %342
  %352 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 6
  %353 = load i32, ptr %352, align 8, !tbaa !33
  %354 = icmp slt i32 %351, %353
  %355 = add nsw i32 %353, %342
  %356 = select i1 %354, i32 %355, i32 %350
  %357 = sext i32 %356 to i64
  %358 = shl nsw i64 %357, 1
  %359 = add nsw i64 %358, 31
  %360 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %359) #9
  %361 = getelementptr inbounds i8, ptr %360, i64 31
  %362 = ptrtoint ptr %361 to i64
  %363 = and i64 %362, 31
  %364 = sub nsw i64 0, %363
  %365 = getelementptr inbounds i8, ptr %361, i64 %364
  %366 = load ptr, ptr %336, align 8, !tbaa !34
  %367 = sext i32 %338 to i64
  %368 = shl nsw i64 %367, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %365, ptr align 1 %366, i64 %368, i1 false)
  %369 = icmp eq i32 %342, 0
  br i1 %369, label %375, label %370

370:                                              ; preds = %344
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !35
  %373 = icmp eq ptr %372, null
  br i1 %373, label %375, label %374

374:                                              ; preds = %370
  tail call void @_ZdaPv(ptr noundef nonnull %372) #10
  br label %375

375:                                              ; preds = %374, %370, %344
  %376 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  store ptr %360, ptr %376, align 8, !tbaa !35
  store ptr %365, ptr %336, align 8, !tbaa !34
  store i32 %356, ptr %341, align 4, !tbaa !31
  %377 = load ptr, ptr %335, align 8, !tbaa !26
  br label %378

378:                                              ; preds = %332, %340, %375
  %379 = phi ptr [ %336, %332 ], [ %336, %340 ], [ %377, %375 ]
  store i32 %150, ptr %337, align 8, !tbaa !28
  %380 = load ptr, ptr %379, align 8, !tbaa !34
  %381 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 15, i32 1
  %382 = load ptr, ptr %381, align 8, !tbaa !26
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 2
  %384 = load i32, ptr %383, align 8, !tbaa !28
  %385 = icmp slt i32 %384, %150
  br i1 %385, label %386, label %424

386:                                              ; preds = %378
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 3
  %388 = load i32, ptr %387, align 4, !tbaa !31
  %389 = icmp slt i32 %388, %150
  br i1 %389, label %390, label %424

390:                                              ; preds = %386
  %391 = sitofp i32 %388 to float
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 5
  %393 = load float, ptr %392, align 4, !tbaa !32
  %394 = fmul float %393, %391
  %395 = fptosi float %394 to i32
  %396 = tail call i32 @llvm.smax.i32(i32 %395, i32 %150)
  %397 = sub nsw i32 %396, %388
  %398 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 6
  %399 = load i32, ptr %398, align 8, !tbaa !33
  %400 = icmp slt i32 %397, %399
  %401 = add nsw i32 %399, %388
  %402 = select i1 %400, i32 %401, i32 %396
  %403 = sext i32 %402 to i64
  %404 = shl nsw i64 %403, 1
  %405 = add nsw i64 %404, 31
  %406 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %405) #9
  %407 = getelementptr inbounds i8, ptr %406, i64 31
  %408 = ptrtoint ptr %407 to i64
  %409 = and i64 %408, 31
  %410 = sub nsw i64 0, %409
  %411 = getelementptr inbounds i8, ptr %407, i64 %410
  %412 = load ptr, ptr %382, align 8, !tbaa !34
  %413 = sext i32 %384 to i64
  %414 = shl nsw i64 %413, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %411, ptr align 1 %412, i64 %414, i1 false)
  %415 = icmp eq i32 %388, 0
  br i1 %415, label %421, label %416

416:                                              ; preds = %390
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  %418 = load ptr, ptr %417, align 8, !tbaa !35
  %419 = icmp eq ptr %418, null
  br i1 %419, label %421, label %420

420:                                              ; preds = %416
  tail call void @_ZdaPv(ptr noundef nonnull %418) #10
  br label %421

421:                                              ; preds = %420, %416, %390
  %422 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  store ptr %406, ptr %422, align 8, !tbaa !35
  store ptr %411, ptr %382, align 8, !tbaa !34
  store i32 %402, ptr %387, align 4, !tbaa !31
  %423 = load ptr, ptr %381, align 8, !tbaa !26
  br label %424

424:                                              ; preds = %378, %386, %421
  %425 = phi ptr [ %382, %378 ], [ %382, %386 ], [ %423, %421 ]
  store i32 %150, ptr %383, align 8, !tbaa !28
  %426 = load ptr, ptr %425, align 8, !tbaa !34
  %427 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 16, i32 1
  %428 = load ptr, ptr %427, align 8, !tbaa !26
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 2
  %430 = load i32, ptr %429, align 8, !tbaa !28
  %431 = icmp slt i32 %430, %150
  br i1 %431, label %432, label %470

432:                                              ; preds = %424
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 3
  %434 = load i32, ptr %433, align 4, !tbaa !31
  %435 = icmp slt i32 %434, %150
  br i1 %435, label %436, label %470

436:                                              ; preds = %432
  %437 = sitofp i32 %434 to float
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 5
  %439 = load float, ptr %438, align 4, !tbaa !32
  %440 = fmul float %439, %437
  %441 = fptosi float %440 to i32
  %442 = tail call i32 @llvm.smax.i32(i32 %441, i32 %150)
  %443 = sub nsw i32 %442, %434
  %444 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 6
  %445 = load i32, ptr %444, align 8, !tbaa !33
  %446 = icmp slt i32 %443, %445
  %447 = add nsw i32 %445, %434
  %448 = select i1 %446, i32 %447, i32 %442
  %449 = sext i32 %448 to i64
  %450 = shl nsw i64 %449, 1
  %451 = add nsw i64 %450, 31
  %452 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %451) #9
  %453 = getelementptr inbounds i8, ptr %452, i64 31
  %454 = ptrtoint ptr %453 to i64
  %455 = and i64 %454, 31
  %456 = sub nsw i64 0, %455
  %457 = getelementptr inbounds i8, ptr %453, i64 %456
  %458 = load ptr, ptr %428, align 8, !tbaa !34
  %459 = sext i32 %430 to i64
  %460 = shl nsw i64 %459, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %457, ptr align 1 %458, i64 %460, i1 false)
  %461 = icmp eq i32 %434, 0
  br i1 %461, label %467, label %462

462:                                              ; preds = %436
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  %464 = load ptr, ptr %463, align 8, !tbaa !35
  %465 = icmp eq ptr %464, null
  br i1 %465, label %467, label %466

466:                                              ; preds = %462
  tail call void @_ZdaPv(ptr noundef nonnull %464) #10
  br label %467

467:                                              ; preds = %466, %462, %436
  %468 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  store ptr %452, ptr %468, align 8, !tbaa !35
  store ptr %457, ptr %428, align 8, !tbaa !34
  store i32 %448, ptr %433, align 4, !tbaa !31
  %469 = load ptr, ptr %427, align 8, !tbaa !26
  br label %470

470:                                              ; preds = %424, %432, %467
  %471 = phi ptr [ %428, %424 ], [ %428, %432 ], [ %469, %467 ]
  store i32 %150, ptr %429, align 8, !tbaa !28
  %472 = load ptr, ptr %471, align 8, !tbaa !34
  br i1 %149, label %614, label %473

473:                                              ; preds = %470
  %474 = icmp sgt i32 %43, 0
  br i1 %474, label %475, label %605

475:                                              ; preds = %473
  %476 = zext i32 %43 to i64
  %477 = and i64 %476, 1
  %478 = icmp eq i32 %43, 1
  br i1 %478, label %511, label %479

479:                                              ; preds = %475
  %480 = and i64 %476, 4294967294
  br label %481

481:                                              ; preds = %506, %479
  %482 = phi i64 [ 0, %479 ], [ %508, %506 ]
  %483 = phi i32 [ 0, %479 ], [ %507, %506 ]
  %484 = phi i64 [ 0, %479 ], [ %509, %506 ]
  %485 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %482, i32 4
  %486 = load i8, ptr %485, align 1
  %487 = and i8 %486, 7
  %488 = icmp eq i8 %487, 0
  br i1 %488, label %494, label %489

489:                                              ; preds = %481
  %490 = trunc i64 %482 to i16
  %491 = add nsw i32 %483, 1
  %492 = sext i32 %483 to i64
  %493 = getelementptr inbounds i16, ptr %196, i64 %492
  store i16 %490, ptr %493, align 2, !tbaa !45
  br label %494

494:                                              ; preds = %481, %489
  %495 = phi i32 [ %491, %489 ], [ %483, %481 ]
  %496 = or i64 %482, 1
  %497 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %496, i32 4
  %498 = load i8, ptr %497, align 1
  %499 = and i8 %498, 7
  %500 = icmp eq i8 %499, 0
  br i1 %500, label %506, label %501

501:                                              ; preds = %494
  %502 = trunc i64 %496 to i16
  %503 = add nsw i32 %495, 1
  %504 = sext i32 %495 to i64
  %505 = getelementptr inbounds i16, ptr %196, i64 %504
  store i16 %502, ptr %505, align 2, !tbaa !45
  br label %506

506:                                              ; preds = %501, %494
  %507 = phi i32 [ %503, %501 ], [ %495, %494 ]
  %508 = add nuw nsw i64 %482, 2
  %509 = add i64 %484, 2
  %510 = icmp eq i64 %509, %480
  br i1 %510, label %511, label %481

511:                                              ; preds = %506, %475
  %512 = phi i32 [ undef, %475 ], [ %507, %506 ]
  %513 = phi i64 [ 0, %475 ], [ %508, %506 ]
  %514 = phi i32 [ 0, %475 ], [ %507, %506 ]
  %515 = icmp eq i64 %477, 0
  br i1 %515, label %526, label %516

516:                                              ; preds = %511
  %517 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %513, i32 4
  %518 = load i8, ptr %517, align 1
  %519 = and i8 %518, 7
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %526, label %521

521:                                              ; preds = %516
  %522 = trunc i64 %513 to i16
  %523 = add nsw i32 %514, 1
  %524 = sext i32 %514 to i64
  %525 = getelementptr inbounds i16, ptr %196, i64 %524
  store i16 %522, ptr %525, align 2, !tbaa !45
  br label %526

526:                                              ; preds = %516, %521, %511
  %527 = phi i32 [ %512, %511 ], [ %523, %521 ], [ %514, %516 ]
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %536, label %529

529:                                              ; preds = %526
  %530 = add nsw i32 %527, -1
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i16, ptr %196, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !45
  %534 = sext i32 %527 to i64
  %535 = getelementptr inbounds i16, ptr %196, i64 %534
  store i16 %533, ptr %535, align 2, !tbaa !45
  br label %536

536:                                              ; preds = %529, %526
  %537 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %538 = icmp ne i32 %537, 0
  %539 = icmp sgt i32 %527, 0
  %540 = and i1 %538, %539
  br i1 %540, label %541, label %605

541:                                              ; preds = %536
  %542 = zext i32 %527 to i64
  %543 = and i64 %542, 1
  %544 = icmp eq i32 %527, 1
  br i1 %544, label %579, label %545

545:                                              ; preds = %541
  %546 = and i64 %542, 4294967294
  br label %547

547:                                              ; preds = %574, %545
  %548 = phi i64 [ 0, %545 ], [ %576, %574 ]
  %549 = phi i32 [ 0, %545 ], [ %575, %574 ]
  %550 = phi i64 [ 0, %545 ], [ %577, %574 ]
  %551 = getelementptr inbounds i16, ptr %196, i64 %548
  %552 = load i16, ptr %551, align 2, !tbaa !45
  %553 = zext i16 %552 to i64
  %554 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %553
  %555 = load i32, ptr %554, align 4
  %556 = icmp sgt i32 %555, -1
  br i1 %556, label %557, label %561

557:                                              ; preds = %547
  %558 = add nsw i32 %549, 1
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds i16, ptr %242, i64 %559
  store i16 %552, ptr %560, align 2, !tbaa !45
  br label %561

561:                                              ; preds = %547, %557
  %562 = phi i32 [ %549, %547 ], [ %558, %557 ]
  %563 = or i64 %548, 1
  %564 = getelementptr inbounds i16, ptr %196, i64 %563
  %565 = load i16, ptr %564, align 2, !tbaa !45
  %566 = zext i16 %565 to i64
  %567 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %566
  %568 = load i32, ptr %567, align 4
  %569 = icmp sgt i32 %568, -1
  br i1 %569, label %570, label %574

570:                                              ; preds = %561
  %571 = add nsw i32 %562, 1
  %572 = sext i32 %562 to i64
  %573 = getelementptr inbounds i16, ptr %242, i64 %572
  store i16 %565, ptr %573, align 2, !tbaa !45
  br label %574

574:                                              ; preds = %570, %561
  %575 = phi i32 [ %562, %561 ], [ %571, %570 ]
  %576 = add nuw nsw i64 %548, 2
  %577 = add i64 %550, 2
  %578 = icmp eq i64 %577, %546
  br i1 %578, label %579, label %547

579:                                              ; preds = %574, %541
  %580 = phi i32 [ undef, %541 ], [ %575, %574 ]
  %581 = phi i64 [ 0, %541 ], [ %576, %574 ]
  %582 = phi i32 [ 0, %541 ], [ %575, %574 ]
  %583 = icmp eq i64 %543, 0
  br i1 %583, label %595, label %584

584:                                              ; preds = %579
  %585 = getelementptr inbounds i16, ptr %196, i64 %581
  %586 = load i16, ptr %585, align 2, !tbaa !45
  %587 = zext i16 %586 to i64
  %588 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %587
  %589 = load i32, ptr %588, align 4
  %590 = icmp sgt i32 %589, -1
  br i1 %590, label %591, label %595

591:                                              ; preds = %584
  %592 = add nsw i32 %582, 1
  %593 = sext i32 %582 to i64
  %594 = getelementptr inbounds i16, ptr %242, i64 %593
  store i16 %586, ptr %594, align 2, !tbaa !45
  br label %595

595:                                              ; preds = %584, %591, %579
  %596 = phi i32 [ %580, %579 ], [ %582, %584 ], [ %592, %591 ]
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %605, label %598

598:                                              ; preds = %595
  %599 = add nsw i32 %596, -1
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i16, ptr %242, i64 %600
  %602 = load i16, ptr %601, align 2, !tbaa !45
  %603 = sext i32 %596 to i64
  %604 = getelementptr inbounds i16, ptr %242, i64 %603
  store i16 %602, ptr %604, align 2, !tbaa !45
  br label %605

605:                                              ; preds = %473, %536, %598, %595
  %606 = phi i32 [ %527, %598 ], [ %527, %595 ], [ %527, %536 ], [ 0, %473 ]
  %607 = phi i32 [ %596, %598 ], [ 0, %595 ], [ 0, %536 ], [ 0, %473 ]
  %608 = load i32, ptr %17, align 8, !tbaa !19
  %609 = add nsw i32 %608, 1
  store i32 %609, ptr %17, align 8, !tbaa !19
  %610 = trunc i32 %41 to i16
  %611 = load ptr, ptr %12, align 8, !tbaa !47
  %612 = sext i32 %608 to i64
  %613 = getelementptr inbounds i16, ptr %611, i64 %612
  store i16 %610, ptr %613, align 2, !tbaa !45
  br label %624

614:                                              ; preds = %470
  %615 = load ptr, ptr %12, align 8, !tbaa !47
  %616 = load i32, ptr %17, align 8, !tbaa !19
  %617 = add nsw i32 %616, 1
  store i32 %617, ptr %17, align 8, !tbaa !19
  %618 = sext i32 %616 to i64
  %619 = getelementptr inbounds i16, ptr %615, i64 %618
  %620 = load i16, ptr %619, align 2, !tbaa !45
  %621 = zext i16 %620 to i32
  %622 = icmp eq i32 %41, %621
  br i1 %622, label %624, label %623

623:                                              ; preds = %614
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %624

624:                                              ; preds = %614, %623, %605
  %625 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %606, %605 ]
  %626 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %607, %605 ]
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %628 = load ptr, ptr %627, align 8, !tbaa !24
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %630 = load ptr, ptr %629, align 8, !tbaa !24
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %632 = load ptr, ptr %631, align 8, !tbaa !24
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %634 = load ptr, ptr %633, align 8, !tbaa !24
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %636 = load i32, ptr %635, align 4, !tbaa !49
  %637 = add nsw i32 %636, -1
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  br i1 %149, label %642, label %640

640:                                              ; preds = %624
  %641 = load i32, ptr %17, align 8, !tbaa !19
  br label %649

642:                                              ; preds = %624
  %643 = load ptr, ptr %12, align 8, !tbaa !47
  %644 = load i32, ptr %17, align 8, !tbaa !19
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds i16, ptr %643, i64 %645
  %647 = load i16, ptr %646, align 2, !tbaa !45
  %648 = zext i16 %647 to i32
  br label %649

649:                                              ; preds = %642, %640
  %650 = phi i32 [ %644, %642 ], [ %641, %640 ]
  %651 = phi i32 [ %648, %642 ], [ 0, %640 ]
  %652 = add nsw i32 %650, 1
  store i32 %652, ptr %17, align 8
  %653 = icmp slt i32 %651, %41
  br i1 %653, label %654, label %2807

654:                                              ; preds = %649
  %655 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %656 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %657 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %658 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %659 = ptrtoint ptr %426 to i64
  %660 = add nsw i32 %43, 10
  %661 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %662 = ptrtoint ptr %472 to i64
  %663 = getelementptr inbounds i16, ptr %426, i64 1
  %664 = ptrtoint ptr %334 to i64
  %665 = ptrtoint ptr %380 to i64
  %666 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %667 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %668 = fneg double %33
  %669 = getelementptr inbounds double, ptr %6, i64 26
  %670 = getelementptr inbounds double, ptr %6, i64 28
  %671 = getelementptr inbounds double, ptr %6, i64 29
  %672 = getelementptr inbounds double, ptr %6, i64 30
  %673 = getelementptr inbounds double, ptr %6, i64 31
  %674 = fsub double 1.000000e+00, %35
  %675 = fmul double %35, 2.000000e+00
  %676 = fmul double %35, 4.000000e+00
  %677 = fmul double %35, 6.000000e+00
  %678 = insertelement <2 x double> poison, double %27, i64 0
  %679 = shufflevector <2 x double> %678, <2 x double> poison, <2 x i32> zeroinitializer
  br label %680

680:                                              ; preds = %654, %2792
  %681 = phi i32 [ 0, %654 ], [ %2799, %2792 ]
  %682 = phi i32 [ %651, %654 ], [ %2798, %2792 ]
  %683 = phi ptr [ null, %654 ], [ %2797, %2792 ]
  %684 = phi ptr [ null, %654 ], [ %2796, %2792 ]
  %685 = phi ptr [ null, %654 ], [ %2795, %2792 ]
  %686 = phi i32 [ 0, %654 ], [ %2794, %2792 ]
  %687 = phi i32 [ %639, %654 ], [ %2793, %2792 ]
  %688 = phi <2 x double> [ zeroinitializer, %654 ], [ %2800, %2792 ]
  %689 = phi <2 x double> [ zeroinitializer, %654 ], [ %2801, %2792 ]
  %690 = phi <2 x double> [ zeroinitializer, %654 ], [ %2802, %2792 ]
  %691 = phi <2 x double> [ zeroinitializer, %654 ], [ %2803, %2792 ]
  %692 = phi <2 x double> [ zeroinitializer, %654 ], [ %2804, %2792 ]
  %693 = phi <2 x double> [ zeroinitializer, %654 ], [ %2805, %2792 ]
  %694 = sext i32 %682 to i64
  %695 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %694
  %696 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %694
  br i1 %149, label %709, label %697

697:                                              ; preds = %680
  %698 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %694, i32 4
  %699 = load i8, ptr %698, align 1
  %700 = lshr i8 %699, 3
  %701 = and i8 %700, 15
  %702 = zext i8 %701 to i32
  %703 = icmp eq i8 %701, 0
  br i1 %703, label %709, label %704

704:                                              ; preds = %697
  %705 = icmp eq i32 %687, 0
  br i1 %705, label %709, label %706

706:                                              ; preds = %704
  %707 = add nsw i32 %687, -1
  %708 = add nsw i32 %682, %702
  br label %2792

709:                                              ; preds = %704, %697, %680
  %710 = phi i32 [ %687, %680 ], [ %687, %697 ], [ %637, %704 ]
  %711 = load <2 x double>, ptr %695, align 8, !tbaa !15
  %712 = fadd <2 x double> %19, %711
  %713 = getelementptr inbounds %class.Vector, ptr %695, i64 0, i32 2
  %714 = load double, ptr %713, align 8, !tbaa !50
  %715 = fadd double %21, %714
  %716 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %694, i32 3
  %717 = load i8, ptr %716, align 2, !tbaa !52
  %718 = zext i8 %717 to i32
  %719 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %720 = fsub double %714, %719
  %721 = fmul double %10, %720
  %722 = tail call double @llvm.floor.f64(double %721)
  %723 = fptosi double %722 to i32
  %724 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %725 = icmp slt i32 %723, 0
  %726 = select i1 %725, i32 %724, i32 0
  %727 = icmp sgt i32 %724, %723
  %728 = select i1 %727, i32 0, i32 %724
  %729 = sub i32 %723, %728
  %730 = add i32 %729, %726
  br i1 %149, label %1962, label %731

731:                                              ; preds = %709
  %732 = load i32, ptr %696, align 4
  %733 = shl i32 %732, 2
  %734 = ashr exact i32 %733, 2
  %735 = load ptr, ptr %655, align 8, !tbaa !53
  %736 = sext i32 %734 to i64
  %737 = getelementptr inbounds %class.ExclusionCheck, ptr %735, i64 %736
  %738 = load i32, ptr %737, align 8, !tbaa !55
  %739 = getelementptr inbounds %class.ExclusionCheck, ptr %735, i64 %736, i32 1
  %740 = load i32, ptr %739, align 4, !tbaa !57
  %741 = getelementptr inbounds %class.ExclusionCheck, ptr %735, i64 %736, i32 2
  %742 = load ptr, ptr %741, align 8, !tbaa !58
  %743 = icmp eq ptr %742, null
  br i1 %743, label %748, label %744

744:                                              ; preds = %731
  %745 = sext i32 %738 to i64
  %746 = sub nsw i64 0, %745
  %747 = getelementptr inbounds i8, ptr %742, i64 %746
  br label %974

748:                                              ; preds = %731
  %749 = icmp eq ptr %683, null
  br i1 %749, label %837, label %750

750:                                              ; preds = %748
  %751 = load i32, ptr %684, align 4, !tbaa !5
  %752 = icmp slt i32 %751, 1
  br i1 %752, label %800, label %753

753:                                              ; preds = %750
  %754 = add nuw i32 %751, 1
  %755 = zext i32 %754 to i64
  %756 = add nsw i64 %755, -1
  %757 = add nsw i64 %755, -2
  %758 = and i64 %756, 3
  %759 = icmp ult i64 %757, 3
  br i1 %759, label %787, label %760

760:                                              ; preds = %753
  %761 = and i64 %756, -4
  br label %762

762:                                              ; preds = %762, %760
  %763 = phi i64 [ 1, %760 ], [ %784, %762 ]
  %764 = phi i64 [ 0, %760 ], [ %785, %762 ]
  %765 = getelementptr inbounds i32, ptr %684, i64 %763
  %766 = load i32, ptr %765, align 4, !tbaa !5
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds i8, ptr %683, i64 %767
  store i8 0, ptr %768, align 1, !tbaa !59
  %769 = add nuw nsw i64 %763, 1
  %770 = getelementptr inbounds i32, ptr %684, i64 %769
  %771 = load i32, ptr %770, align 4, !tbaa !5
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds i8, ptr %683, i64 %772
  store i8 0, ptr %773, align 1, !tbaa !59
  %774 = add nuw nsw i64 %763, 2
  %775 = getelementptr inbounds i32, ptr %684, i64 %774
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %683, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !59
  %779 = add nuw nsw i64 %763, 3
  %780 = getelementptr inbounds i32, ptr %684, i64 %779
  %781 = load i32, ptr %780, align 4, !tbaa !5
  %782 = sext i32 %781 to i64
  %783 = getelementptr inbounds i8, ptr %683, i64 %782
  store i8 0, ptr %783, align 1, !tbaa !59
  %784 = add nuw nsw i64 %763, 4
  %785 = add i64 %764, 4
  %786 = icmp eq i64 %785, %761
  br i1 %786, label %787, label %762

787:                                              ; preds = %762, %753
  %788 = phi i64 [ 1, %753 ], [ %784, %762 ]
  %789 = icmp eq i64 %758, 0
  br i1 %789, label %800, label %790

790:                                              ; preds = %787, %790
  %791 = phi i64 [ %797, %790 ], [ %788, %787 ]
  %792 = phi i64 [ %798, %790 ], [ 0, %787 ]
  %793 = getelementptr inbounds i32, ptr %684, i64 %791
  %794 = load i32, ptr %793, align 4, !tbaa !5
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds i8, ptr %683, i64 %795
  store i8 0, ptr %796, align 1, !tbaa !59
  %797 = add nuw nsw i64 %791, 1
  %798 = add i64 %792, 1
  %799 = icmp eq i64 %798, %758
  br i1 %799, label %800, label %790, !llvm.loop !102

800:                                              ; preds = %787, %790, %750
  %801 = load i32, ptr %685, align 4, !tbaa !5
  %802 = icmp slt i32 %801, 1
  br i1 %802, label %857, label %803

803:                                              ; preds = %800
  %804 = add nuw i32 %801, 1
  %805 = zext i32 %804 to i64
  %806 = add nsw i64 %805, -1
  %807 = add nsw i64 %805, -2
  %808 = and i64 %806, 3
  %809 = icmp ult i64 %807, 3
  br i1 %809, label %844, label %810

810:                                              ; preds = %803
  %811 = and i64 %806, -4
  br label %812

812:                                              ; preds = %812, %810
  %813 = phi i64 [ 1, %810 ], [ %834, %812 ]
  %814 = phi i64 [ 0, %810 ], [ %835, %812 ]
  %815 = getelementptr inbounds i32, ptr %685, i64 %813
  %816 = load i32, ptr %815, align 4, !tbaa !5
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i8, ptr %683, i64 %817
  store i8 0, ptr %818, align 1, !tbaa !59
  %819 = add nuw nsw i64 %813, 1
  %820 = getelementptr inbounds i32, ptr %685, i64 %819
  %821 = load i32, ptr %820, align 4, !tbaa !5
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds i8, ptr %683, i64 %822
  store i8 0, ptr %823, align 1, !tbaa !59
  %824 = add nuw nsw i64 %813, 2
  %825 = getelementptr inbounds i32, ptr %685, i64 %824
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i8, ptr %683, i64 %827
  store i8 0, ptr %828, align 1, !tbaa !59
  %829 = add nuw nsw i64 %813, 3
  %830 = getelementptr inbounds i32, ptr %685, i64 %829
  %831 = load i32, ptr %830, align 4, !tbaa !5
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds i8, ptr %683, i64 %832
  store i8 0, ptr %833, align 1, !tbaa !59
  %834 = add nuw nsw i64 %813, 4
  %835 = add i64 %814, 4
  %836 = icmp eq i64 %835, %811
  br i1 %836, label %844, label %812

837:                                              ; preds = %748
  %838 = load i32, ptr %656, align 8, !tbaa !62
  %839 = tail call i32 @llvm.smax.i32(i32 %838, i32 -1)
  %840 = sext i32 %839 to i64
  %841 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %840) #9
  %842 = load i32, ptr %656, align 8, !tbaa !62
  %843 = sext i32 %842 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %841, i8 0, i64 %843, i1 false)
  br label %857

844:                                              ; preds = %812, %803
  %845 = phi i64 [ 1, %803 ], [ %834, %812 ]
  %846 = icmp eq i64 %808, 0
  br i1 %846, label %857, label %847

847:                                              ; preds = %844, %847
  %848 = phi i64 [ %854, %847 ], [ %845, %844 ]
  %849 = phi i64 [ %855, %847 ], [ 0, %844 ]
  %850 = getelementptr inbounds i32, ptr %685, i64 %848
  %851 = load i32, ptr %850, align 4, !tbaa !5
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i8, ptr %683, i64 %852
  store i8 0, ptr %853, align 1, !tbaa !59
  %854 = add nuw nsw i64 %848, 1
  %855 = add i64 %849, 1
  %856 = icmp eq i64 %855, %808
  br i1 %856, label %857, label %847, !llvm.loop !103

857:                                              ; preds = %844, %847, %800, %837
  %858 = phi ptr [ %841, %837 ], [ %683, %800 ], [ %683, %847 ], [ %683, %844 ]
  %859 = load i32, ptr %696, align 4
  %860 = shl i32 %859, 2
  %861 = ashr exact i32 %860, 2
  %862 = load ptr, ptr %657, align 8, !tbaa !64
  %863 = sext i32 %861 to i64
  %864 = getelementptr inbounds ptr, ptr %862, i64 %863
  %865 = load ptr, ptr %864, align 8, !tbaa !24
  %866 = load i32, ptr %865, align 4, !tbaa !5
  %867 = icmp slt i32 %866, 1
  br i1 %867, label %920, label %868

868:                                              ; preds = %857
  %869 = add nuw i32 %866, 1
  %870 = zext i32 %869 to i64
  %871 = add nsw i64 %870, -1
  %872 = add nsw i64 %870, -2
  %873 = and i64 %871, 3
  %874 = icmp ult i64 %872, 3
  br i1 %874, label %902, label %875

875:                                              ; preds = %868
  %876 = and i64 %871, -4
  br label %877

877:                                              ; preds = %877, %875
  %878 = phi i64 [ 1, %875 ], [ %899, %877 ]
  %879 = phi i64 [ 0, %875 ], [ %900, %877 ]
  %880 = getelementptr inbounds i32, ptr %865, i64 %878
  %881 = load i32, ptr %880, align 4, !tbaa !5
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, ptr %858, i64 %882
  store i8 1, ptr %883, align 1, !tbaa !59
  %884 = add nuw nsw i64 %878, 1
  %885 = getelementptr inbounds i32, ptr %865, i64 %884
  %886 = load i32, ptr %885, align 4, !tbaa !5
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds i8, ptr %858, i64 %887
  store i8 1, ptr %888, align 1, !tbaa !59
  %889 = add nuw nsw i64 %878, 2
  %890 = getelementptr inbounds i32, ptr %865, i64 %889
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i8, ptr %858, i64 %892
  store i8 1, ptr %893, align 1, !tbaa !59
  %894 = add nuw nsw i64 %878, 3
  %895 = getelementptr inbounds i32, ptr %865, i64 %894
  %896 = load i32, ptr %895, align 4, !tbaa !5
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds i8, ptr %858, i64 %897
  store i8 1, ptr %898, align 1, !tbaa !59
  %899 = add nuw nsw i64 %878, 4
  %900 = add i64 %879, 4
  %901 = icmp eq i64 %900, %876
  br i1 %901, label %902, label %877

902:                                              ; preds = %877, %868
  %903 = phi i64 [ 1, %868 ], [ %899, %877 ]
  %904 = icmp eq i64 %873, 0
  br i1 %904, label %915, label %905

905:                                              ; preds = %902, %905
  %906 = phi i64 [ %912, %905 ], [ %903, %902 ]
  %907 = phi i64 [ %913, %905 ], [ 0, %902 ]
  %908 = getelementptr inbounds i32, ptr %865, i64 %906
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = sext i32 %909 to i64
  %911 = getelementptr inbounds i8, ptr %858, i64 %910
  store i8 1, ptr %911, align 1, !tbaa !59
  %912 = add nuw nsw i64 %906, 1
  %913 = add i64 %907, 1
  %914 = icmp eq i64 %913, %873
  br i1 %914, label %915, label %905, !llvm.loop !104

915:                                              ; preds = %905, %902
  %916 = load i32, ptr %696, align 4
  %917 = shl i32 %916, 2
  %918 = ashr exact i32 %917, 2
  %919 = sext i32 %918 to i64
  br label %920

920:                                              ; preds = %915, %857
  %921 = phi i64 [ %919, %915 ], [ %863, %857 ]
  %922 = load ptr, ptr %658, align 8, !tbaa !66
  %923 = getelementptr inbounds ptr, ptr %922, i64 %921
  %924 = load ptr, ptr %923, align 8, !tbaa !24
  %925 = load i32, ptr %924, align 4, !tbaa !5
  %926 = icmp slt i32 %925, 1
  br i1 %926, label %974, label %927

927:                                              ; preds = %920
  %928 = add nuw i32 %925, 1
  %929 = zext i32 %928 to i64
  %930 = add nsw i64 %929, -1
  %931 = add nsw i64 %929, -2
  %932 = and i64 %930, 3
  %933 = icmp ult i64 %931, 3
  br i1 %933, label %961, label %934

934:                                              ; preds = %927
  %935 = and i64 %930, -4
  br label %936

936:                                              ; preds = %936, %934
  %937 = phi i64 [ 1, %934 ], [ %958, %936 ]
  %938 = phi i64 [ 0, %934 ], [ %959, %936 ]
  %939 = getelementptr inbounds i32, ptr %924, i64 %937
  %940 = load i32, ptr %939, align 4, !tbaa !5
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i8, ptr %858, i64 %941
  store i8 2, ptr %942, align 1, !tbaa !59
  %943 = add nuw nsw i64 %937, 1
  %944 = getelementptr inbounds i32, ptr %924, i64 %943
  %945 = load i32, ptr %944, align 4, !tbaa !5
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i8, ptr %858, i64 %946
  store i8 2, ptr %947, align 1, !tbaa !59
  %948 = add nuw nsw i64 %937, 2
  %949 = getelementptr inbounds i32, ptr %924, i64 %948
  %950 = load i32, ptr %949, align 4, !tbaa !5
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i8, ptr %858, i64 %951
  store i8 2, ptr %952, align 1, !tbaa !59
  %953 = add nuw nsw i64 %937, 3
  %954 = getelementptr inbounds i32, ptr %924, i64 %953
  %955 = load i32, ptr %954, align 4, !tbaa !5
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds i8, ptr %858, i64 %956
  store i8 2, ptr %957, align 1, !tbaa !59
  %958 = add nuw nsw i64 %937, 4
  %959 = add i64 %938, 4
  %960 = icmp eq i64 %959, %935
  br i1 %960, label %961, label %936

961:                                              ; preds = %936, %927
  %962 = phi i64 [ 1, %927 ], [ %958, %936 ]
  %963 = icmp eq i64 %932, 0
  br i1 %963, label %974, label %964

964:                                              ; preds = %961, %964
  %965 = phi i64 [ %971, %964 ], [ %962, %961 ]
  %966 = phi i64 [ %972, %964 ], [ 0, %961 ]
  %967 = getelementptr inbounds i32, ptr %924, i64 %965
  %968 = load i32, ptr %967, align 4, !tbaa !5
  %969 = sext i32 %968 to i64
  %970 = getelementptr inbounds i8, ptr %858, i64 %969
  store i8 2, ptr %970, align 1, !tbaa !59
  %971 = add nuw nsw i64 %965, 1
  %972 = add i64 %966, 1
  %973 = icmp eq i64 %972, %932
  br i1 %973, label %974, label %964, !llvm.loop !105

974:                                              ; preds = %961, %964, %920, %744
  %975 = phi ptr [ %747, %744 ], [ %858, %920 ], [ %858, %964 ], [ %858, %961 ]
  %976 = phi ptr [ %685, %744 ], [ %924, %920 ], [ %924, %964 ], [ %924, %961 ]
  %977 = phi ptr [ %684, %744 ], [ %865, %920 ], [ %865, %964 ], [ %865, %961 ]
  %978 = phi ptr [ %683, %744 ], [ %858, %920 ], [ %858, %964 ], [ %858, %961 ]
  %979 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %694, i32 4
  %980 = load i8, ptr %979, align 1
  %981 = and i8 %980, 7
  %982 = icmp eq i8 %981, 0
  %983 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %982, label %1166, label %984

984:                                              ; preds = %974
  %985 = icmp eq i32 %983, 0
  br i1 %985, label %992, label %986

986:                                              ; preds = %984
  %987 = load i32, ptr %696, align 4
  %988 = freeze i32 %987
  %989 = icmp slt i32 %988, 0
  %990 = select i1 %989, ptr %242, ptr %196
  %991 = select i1 %989, i32 %626, i32 %625
  br label %992

992:                                              ; preds = %986, %984
  %993 = phi ptr [ %196, %984 ], [ %990, %986 ]
  %994 = phi i32 [ %625, %984 ], [ %991, %986 ]
  %995 = icmp sgt i32 %994, 0
  br i1 %995, label %996, label %1147

996:                                              ; preds = %992
  %997 = icmp ugt i32 %994, 6
  br i1 %997, label %998, label %1082

998:                                              ; preds = %996
  %999 = add nsw i32 %994, -2
  %1000 = getelementptr inbounds i16, ptr %993, i64 1
  %1001 = load i16, ptr %1000, align 2, !tbaa !45
  %1002 = zext i16 %1001 to i64
  %1003 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1002
  %1004 = getelementptr inbounds %class.Vector, ptr %1003, i64 0, i32 2
  %1005 = load double, ptr %1004, align 8, !tbaa !50
  %1006 = load i16, ptr %993, align 2, !tbaa !45
  %1007 = zext i16 %1006 to i64
  %1008 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1007
  %1009 = getelementptr inbounds %class.Vector, ptr %1008, i64 0, i32 2
  %1010 = load double, ptr %1009, align 8, !tbaa !50
  %1011 = getelementptr inbounds %class.Vector, ptr %1003, i64 0, i32 1
  %1012 = load double, ptr %1011, align 8, !tbaa !68
  %1013 = getelementptr inbounds %class.Vector, ptr %1008, i64 0, i32 1
  %1014 = load double, ptr %1013, align 8, !tbaa !68
  %1015 = load double, ptr %1003, align 8, !tbaa !69
  %1016 = load double, ptr %1008, align 8, !tbaa !69
  %1017 = zext i32 %999 to i64
  %1018 = insertelement <2 x double> poison, double %1005, i64 0
  %1019 = insertelement <2 x double> %1018, double %1010, i64 1
  %1020 = insertelement <2 x double> poison, double %1012, i64 0
  %1021 = insertelement <2 x double> %1020, double %1014, i64 1
  %1022 = insertelement <2 x double> poison, double %1015, i64 0
  %1023 = insertelement <2 x double> %1022, double %1016, i64 1
  %1024 = insertelement <2 x double> poison, double %715, i64 0
  %1025 = shufflevector <2 x double> %1024, <2 x double> poison, <2 x i32> zeroinitializer
  %1026 = shufflevector <2 x double> %712, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1027 = shufflevector <2 x double> %712, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1028

1028:                                             ; preds = %998, %1028
  %1029 = phi i64 [ 2, %998 ], [ %1072, %1028 ]
  %1030 = phi i32 [ 0, %998 ], [ %1071, %1028 ]
  %1031 = phi i16 [ %1006, %998 ], [ %1038, %1028 ]
  %1032 = phi i16 [ %1001, %998 ], [ %1041, %1028 ]
  %1033 = phi <2 x double> [ %1019, %998 ], [ %1075, %1028 ]
  %1034 = phi <2 x double> [ %1021, %998 ], [ %1077, %1028 ]
  %1035 = phi <2 x double> [ %1023, %998 ], [ %1079, %1028 ]
  %1036 = fsub <2 x double> %1025, %1033
  %1037 = getelementptr inbounds i16, ptr %993, i64 %1029
  %1038 = load i16, ptr %1037, align 2, !tbaa !45
  %1039 = or i64 %1029, 1
  %1040 = getelementptr inbounds i16, ptr %993, i64 %1039
  %1041 = load i16, ptr %1040, align 2, !tbaa !45
  %1042 = zext i16 %1038 to i64
  %1043 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1042
  %1044 = load double, ptr %1043, align 8, !tbaa !69
  %1045 = zext i16 %1041 to i64
  %1046 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1045
  %1047 = load double, ptr %1046, align 8, !tbaa !69
  %1048 = getelementptr inbounds %class.Vector, ptr %1043, i64 0, i32 1
  %1049 = load double, ptr %1048, align 8, !tbaa !68
  %1050 = getelementptr inbounds %class.Vector, ptr %1046, i64 0, i32 1
  %1051 = load double, ptr %1050, align 8, !tbaa !68
  %1052 = getelementptr inbounds %class.Vector, ptr %1043, i64 0, i32 2
  %1053 = load double, ptr %1052, align 8, !tbaa !50
  %1054 = getelementptr inbounds %class.Vector, ptr %1046, i64 0, i32 2
  %1055 = load double, ptr %1054, align 8, !tbaa !50
  %1056 = fsub <2 x double> %1027, %1035
  %1057 = fmul <2 x double> %1056, %1056
  %1058 = fsub <2 x double> %1026, %1034
  %1059 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1058, <2 x double> %1058, <2 x double> %1057)
  %1060 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1036, <2 x double> %1036, <2 x double> %1059)
  %1061 = fcmp olt <2 x double> %1060, %679
  %1062 = zext i32 %1030 to i64
  %1063 = getelementptr inbounds i16, ptr %288, i64 %1062
  store i16 %1031, ptr %1063, align 2, !tbaa !45
  %1064 = extractelement <2 x i1> %1061, i64 1
  %1065 = zext i1 %1064 to i32
  %1066 = add nuw nsw i32 %1030, %1065
  %1067 = zext i32 %1066 to i64
  %1068 = getelementptr inbounds i16, ptr %288, i64 %1067
  store i16 %1032, ptr %1068, align 2, !tbaa !45
  %1069 = extractelement <2 x i1> %1061, i64 0
  %1070 = zext i1 %1069 to i32
  %1071 = add i32 %1066, %1070
  %1072 = add nuw nsw i64 %1029, 2
  %1073 = icmp ult i64 %1072, %1017
  %1074 = insertelement <2 x double> poison, double %1055, i64 0
  %1075 = insertelement <2 x double> %1074, double %1053, i64 1
  %1076 = insertelement <2 x double> poison, double %1051, i64 0
  %1077 = insertelement <2 x double> %1076, double %1049, i64 1
  %1078 = insertelement <2 x double> poison, double %1047, i64 0
  %1079 = insertelement <2 x double> %1078, double %1044, i64 1
  br i1 %1073, label %1028, label %1080

1080:                                             ; preds = %1028
  %1081 = trunc i64 %1029 to i32
  br label %1082

1082:                                             ; preds = %1080, %996
  %1083 = phi i32 [ %1071, %1080 ], [ 0, %996 ]
  %1084 = phi i32 [ %1081, %1080 ], [ 0, %996 ]
  %1085 = icmp slt i32 %1084, %994
  br i1 %1085, label %1086, label %1091

1086:                                             ; preds = %1082
  %1087 = zext i32 %1084 to i64
  %1088 = zext i32 %994 to i64
  %1089 = extractelement <2 x double> %712, i64 0
  %1090 = extractelement <2 x double> %712, i64 1
  br label %1096

1091:                                             ; preds = %1119, %1082
  %1092 = phi i32 [ %1083, %1082 ], [ %1120, %1119 ]
  %1093 = icmp sgt i32 %1092, 0
  br i1 %1093, label %1094, label %1147

1094:                                             ; preds = %1091
  %1095 = zext i32 %1092 to i64
  br label %1123

1096:                                             ; preds = %1086, %1119
  %1097 = phi i64 [ %1087, %1086 ], [ %1121, %1119 ]
  %1098 = phi i32 [ %1083, %1086 ], [ %1120, %1119 ]
  %1099 = getelementptr inbounds i16, ptr %993, i64 %1097
  %1100 = load i16, ptr %1099, align 2, !tbaa !45
  %1101 = zext i16 %1100 to i64
  %1102 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1101
  %1103 = load double, ptr %1102, align 8, !tbaa !69
  %1104 = getelementptr inbounds %class.Vector, ptr %1102, i64 0, i32 1
  %1105 = load double, ptr %1104, align 8, !tbaa !68
  %1106 = getelementptr inbounds %class.Vector, ptr %1102, i64 0, i32 2
  %1107 = load double, ptr %1106, align 8, !tbaa !50
  %1108 = fsub double %1089, %1103
  %1109 = fmul double %1108, %1108
  %1110 = fsub double %1090, %1105
  %1111 = tail call double @llvm.fmuladd.f64(double %1110, double %1110, double %1109)
  %1112 = fsub double %715, %1107
  %1113 = tail call double @llvm.fmuladd.f64(double %1112, double %1112, double %1111)
  %1114 = fcmp ugt double %1113, %27
  br i1 %1114, label %1119, label %1115

1115:                                             ; preds = %1096
  %1116 = add nsw i32 %1098, 1
  %1117 = sext i32 %1098 to i64
  %1118 = getelementptr inbounds i16, ptr %288, i64 %1117
  store i16 %1100, ptr %1118, align 2, !tbaa !45
  br label %1119

1119:                                             ; preds = %1115, %1096
  %1120 = phi i32 [ %1116, %1115 ], [ %1098, %1096 ]
  %1121 = add nuw nsw i64 %1097, 1
  %1122 = icmp eq i64 %1121, %1088
  br i1 %1122, label %1091, label %1096

1123:                                             ; preds = %1094, %1140
  %1124 = phi i64 [ 0, %1094 ], [ %1143, %1140 ]
  %1125 = phi ptr [ %426, %1094 ], [ %1142, %1140 ]
  %1126 = getelementptr inbounds i16, ptr %288, i64 %1124
  %1127 = load i16, ptr %1126, align 2, !tbaa !45
  %1128 = zext i16 %1127 to i64
  %1129 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1128, i32 4
  %1130 = load i8, ptr %1129, align 1
  %1131 = and i8 %1130, 7
  store i16 %1127, ptr %1125, align 2, !tbaa !45
  %1132 = getelementptr inbounds i16, ptr %1125, i64 1
  %1133 = insertelement <2 x i16> poison, i16 %1127, i64 0
  %1134 = shufflevector <2 x i16> %1133, <2 x i16> poison, <2 x i32> zeroinitializer
  %1135 = add <2 x i16> %1134, <i16 1, i16 2>
  store <2 x i16> %1135, ptr %1132, align 2, !tbaa !45
  %1136 = icmp ult i8 %1131, 4
  br i1 %1136, label %1140, label %1137

1137:                                             ; preds = %1123
  %1138 = add <2 x i16> %1134, <i16 3, i16 4>
  %1139 = getelementptr inbounds i16, ptr %1125, i64 3
  store <2 x i16> %1138, ptr %1139, align 2, !tbaa !45
  br label %1140

1140:                                             ; preds = %1137, %1123
  %1141 = zext i8 %1131 to i64
  %1142 = getelementptr inbounds i16, ptr %1125, i64 %1141
  %1143 = add nuw nsw i64 %1124, 1
  %1144 = icmp eq i64 %1143, %1095
  br i1 %1144, label %1145, label %1123

1145:                                             ; preds = %1140
  %1146 = ptrtoint ptr %1142 to i64
  br label %1147

1147:                                             ; preds = %1145, %1091, %992
  %1148 = phi i64 [ %1146, %1145 ], [ %659, %1091 ], [ %659, %992 ]
  %1149 = sub i64 %1148, %659
  %1150 = lshr exact i64 %1149, 1
  %1151 = trunc i64 %1150 to i32
  %1152 = icmp eq i32 %1151, 0
  br i1 %1152, label %1153, label %1158

1153:                                             ; preds = %1147
  %1154 = load i8, ptr %979, align 1
  %1155 = and i8 %1154, 7
  %1156 = zext i8 %1155 to i32
  %1157 = add nsw i32 %682, %1156
  br label %2792

1158:                                             ; preds = %1147
  %1159 = shl i64 %1149, 31
  %1160 = add i64 %1159, -4294967296
  %1161 = ashr i64 %1160, 32
  %1162 = getelementptr inbounds i16, ptr %426, i64 %1161
  %1163 = load i16, ptr %1162, align 2, !tbaa !45
  %1164 = ashr i64 %1159, 32
  %1165 = getelementptr inbounds i16, ptr %426, i64 %1164
  store i16 %1163, ptr %1165, align 2, !tbaa !45
  br label %1166

1166:                                             ; preds = %1158, %974
  %1167 = phi i32 [ %1151, %1158 ], [ %686, %974 ]
  %1168 = icmp eq i32 %983, 0
  br i1 %1168, label %1173, label %1169

1169:                                             ; preds = %1166
  %1170 = load i32, ptr %696, align 4
  %1171 = and i32 %1170, 1073741824
  %1172 = icmp ne i32 %1171, 0
  br label %1173

1173:                                             ; preds = %1169, %1166
  %1174 = phi i1 [ false, %1166 ], [ %1172, %1169 ]
  %1175 = load i32, ptr %17, align 8, !tbaa !19
  %1176 = add nsw i32 %660, %1175
  %1177 = load i32, ptr %661, align 4, !tbaa !70
  %1178 = icmp sgt i32 %1177, %1176
  br i1 %1178, label %1194, label %1179

1179:                                             ; preds = %1173, %1179
  %1180 = phi i32 [ %1182, %1179 ], [ %1177, %1173 ]
  %1181 = ashr i32 %1180, 1
  %1182 = add nsw i32 %1181, %1180
  %1183 = icmp sgt i32 %1182, %1176
  br i1 %1183, label %1184, label %1179

1184:                                             ; preds = %1179
  %1185 = sext i32 %1182 to i64
  %1186 = icmp slt i32 %1182, 0
  %1187 = shl nsw i64 %1185, 1
  %1188 = select i1 %1186, i64 -1, i64 %1187
  %1189 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1188) #9
  %1190 = load ptr, ptr %12, align 8, !tbaa !47
  %1191 = sext i32 %1175 to i64
  %1192 = shl nsw i64 %1191, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1189, ptr align 2 %1190, i64 %1192, i1 false)
  %1193 = icmp eq ptr %1190, null
  br i1 %1193, label %1198, label %1196

1194:                                             ; preds = %1173
  %1195 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1200

1196:                                             ; preds = %1184
  tail call void @_ZdaPv(ptr noundef nonnull %1190) #10
  %1197 = load i32, ptr %17, align 8, !tbaa !19
  br label %1198

1198:                                             ; preds = %1196, %1184
  %1199 = phi i32 [ %1197, %1196 ], [ %1175, %1184 ]
  store ptr %1189, ptr %12, align 8, !tbaa !47
  store i32 %1182, ptr %661, align 4, !tbaa !70
  br label %1200

1200:                                             ; preds = %1194, %1198
  %1201 = phi i32 [ %1175, %1194 ], [ %1199, %1198 ]
  %1202 = phi ptr [ %1195, %1194 ], [ %1189, %1198 ]
  %1203 = ptrtoint ptr %1202 to i64
  %1204 = add nsw i32 %1201, 1
  %1205 = sext i32 %1204 to i64
  %1206 = getelementptr inbounds i16, ptr %1202, i64 %1205
  %1207 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1208 = icmp eq i32 %1207, 0
  br i1 %1208, label %1389, label %1209

1209:                                             ; preds = %1200
  %1210 = load i8, ptr %716, align 2, !tbaa !52
  %1211 = zext i8 %1210 to i32
  %1212 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1213 = icmp eq i32 %1212, 0
  br i1 %1213, label %1254, label %1214

1214:                                             ; preds = %1209
  %1215 = icmp eq i8 %1210, 1
  br i1 %1215, label %1216, label %1224

1216:                                             ; preds = %1214
  %1217 = icmp sgt i32 %1167, 0
  br i1 %1217, label %1218, label %1329

1218:                                             ; preds = %1216
  %1219 = zext i32 %1167 to i64
  %1220 = and i64 %1219, 1
  %1221 = icmp eq i32 %1167, 1
  br i1 %1221, label %1315, label %1222

1222:                                             ; preds = %1218
  %1223 = and i64 %1219, 4294967294
  br label %1226

1224:                                             ; preds = %1214
  %1225 = add nsw i32 %682, 1
  br label %2792

1226:                                             ; preds = %1249, %1222
  %1227 = phi i64 [ 0, %1222 ], [ %1251, %1249 ]
  %1228 = phi ptr [ %472, %1222 ], [ %1250, %1249 ]
  %1229 = phi i64 [ 0, %1222 ], [ %1252, %1249 ]
  %1230 = getelementptr inbounds i16, ptr %426, i64 %1227
  %1231 = load i16, ptr %1230, align 2, !tbaa !45
  %1232 = zext i16 %1231 to i64
  %1233 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1232, i32 3
  %1234 = load i8, ptr %1233, align 2, !tbaa !52
  %1235 = icmp eq i8 %1234, 1
  br i1 %1235, label %1236, label %1238

1236:                                             ; preds = %1226
  %1237 = getelementptr inbounds i16, ptr %1228, i64 1
  store i16 %1231, ptr %1228, align 2, !tbaa !45
  br label %1238

1238:                                             ; preds = %1236, %1226
  %1239 = phi ptr [ %1237, %1236 ], [ %1228, %1226 ]
  %1240 = or i64 %1227, 1
  %1241 = getelementptr inbounds i16, ptr %426, i64 %1240
  %1242 = load i16, ptr %1241, align 2, !tbaa !45
  %1243 = zext i16 %1242 to i64
  %1244 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1243, i32 3
  %1245 = load i8, ptr %1244, align 2, !tbaa !52
  %1246 = icmp eq i8 %1245, 1
  br i1 %1246, label %1247, label %1249

1247:                                             ; preds = %1238
  %1248 = getelementptr inbounds i16, ptr %1239, i64 1
  store i16 %1242, ptr %1239, align 2, !tbaa !45
  br label %1249

1249:                                             ; preds = %1247, %1238
  %1250 = phi ptr [ %1248, %1247 ], [ %1239, %1238 ]
  %1251 = add nuw nsw i64 %1227, 2
  %1252 = add i64 %1229, 2
  %1253 = icmp eq i64 %1252, %1223
  br i1 %1253, label %1315, label %1226

1254:                                             ; preds = %1209
  %1255 = add i8 %1210, -3
  %1256 = icmp ult i8 %1255, -2
  br i1 %1256, label %1265, label %1257

1257:                                             ; preds = %1254
  %1258 = icmp sgt i32 %1167, 0
  br i1 %1258, label %1259, label %1329

1259:                                             ; preds = %1257
  %1260 = zext i32 %1167 to i64
  %1261 = and i64 %1260, 1
  %1262 = icmp eq i32 %1167, 1
  br i1 %1262, label %1299, label %1263

1263:                                             ; preds = %1259
  %1264 = and i64 %1260, 4294967294
  br label %1267

1265:                                             ; preds = %1254
  %1266 = add nsw i32 %682, 1
  br label %2792

1267:                                             ; preds = %1294, %1263
  %1268 = phi i64 [ 0, %1263 ], [ %1296, %1294 ]
  %1269 = phi ptr [ %472, %1263 ], [ %1295, %1294 ]
  %1270 = phi i64 [ 0, %1263 ], [ %1297, %1294 ]
  %1271 = getelementptr inbounds i16, ptr %426, i64 %1268
  %1272 = load i16, ptr %1271, align 2, !tbaa !45
  %1273 = zext i16 %1272 to i64
  %1274 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1273, i32 3
  %1275 = load i8, ptr %1274, align 2, !tbaa !52
  %1276 = zext i8 %1275 to i32
  %1277 = add nuw nsw i32 %1276, %1211
  %1278 = icmp eq i32 %1277, 3
  br i1 %1278, label %1279, label %1281

1279:                                             ; preds = %1267
  %1280 = getelementptr inbounds i16, ptr %1269, i64 1
  store i16 %1272, ptr %1269, align 2, !tbaa !45
  br label %1281

1281:                                             ; preds = %1279, %1267
  %1282 = phi ptr [ %1280, %1279 ], [ %1269, %1267 ]
  %1283 = or i64 %1268, 1
  %1284 = getelementptr inbounds i16, ptr %426, i64 %1283
  %1285 = load i16, ptr %1284, align 2, !tbaa !45
  %1286 = zext i16 %1285 to i64
  %1287 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1286, i32 3
  %1288 = load i8, ptr %1287, align 2, !tbaa !52
  %1289 = zext i8 %1288 to i32
  %1290 = add nuw nsw i32 %1289, %1211
  %1291 = icmp eq i32 %1290, 3
  br i1 %1291, label %1292, label %1294

1292:                                             ; preds = %1281
  %1293 = getelementptr inbounds i16, ptr %1282, i64 1
  store i16 %1285, ptr %1282, align 2, !tbaa !45
  br label %1294

1294:                                             ; preds = %1292, %1281
  %1295 = phi ptr [ %1293, %1292 ], [ %1282, %1281 ]
  %1296 = add nuw nsw i64 %1268, 2
  %1297 = add i64 %1270, 2
  %1298 = icmp eq i64 %1297, %1264
  br i1 %1298, label %1299, label %1267

1299:                                             ; preds = %1294, %1259
  %1300 = phi ptr [ undef, %1259 ], [ %1295, %1294 ]
  %1301 = phi i64 [ 0, %1259 ], [ %1296, %1294 ]
  %1302 = phi ptr [ %472, %1259 ], [ %1295, %1294 ]
  %1303 = icmp eq i64 %1261, 0
  br i1 %1303, label %1329, label %1304

1304:                                             ; preds = %1299
  %1305 = getelementptr inbounds i16, ptr %426, i64 %1301
  %1306 = load i16, ptr %1305, align 2, !tbaa !45
  %1307 = zext i16 %1306 to i64
  %1308 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1307, i32 3
  %1309 = load i8, ptr %1308, align 2, !tbaa !52
  %1310 = zext i8 %1309 to i32
  %1311 = add nuw nsw i32 %1310, %1211
  %1312 = icmp eq i32 %1311, 3
  br i1 %1312, label %1313, label %1329

1313:                                             ; preds = %1304
  %1314 = getelementptr inbounds i16, ptr %1302, i64 1
  store i16 %1306, ptr %1302, align 2, !tbaa !45
  br label %1329

1315:                                             ; preds = %1249, %1218
  %1316 = phi ptr [ undef, %1218 ], [ %1250, %1249 ]
  %1317 = phi i64 [ 0, %1218 ], [ %1251, %1249 ]
  %1318 = phi ptr [ %472, %1218 ], [ %1250, %1249 ]
  %1319 = icmp eq i64 %1220, 0
  br i1 %1319, label %1329, label %1320

1320:                                             ; preds = %1315
  %1321 = getelementptr inbounds i16, ptr %426, i64 %1317
  %1322 = load i16, ptr %1321, align 2, !tbaa !45
  %1323 = zext i16 %1322 to i64
  %1324 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1323, i32 3
  %1325 = load i8, ptr %1324, align 2, !tbaa !52
  %1326 = icmp eq i8 %1325, 1
  br i1 %1326, label %1327, label %1329

1327:                                             ; preds = %1320
  %1328 = getelementptr inbounds i16, ptr %1318, i64 1
  store i16 %1322, ptr %1318, align 2, !tbaa !45
  br label %1329

1329:                                             ; preds = %1315, %1327, %1320, %1299, %1313, %1304, %1216, %1257
  %1330 = phi ptr [ %472, %1257 ], [ %472, %1216 ], [ %1300, %1299 ], [ %1314, %1313 ], [ %1302, %1304 ], [ %1316, %1315 ], [ %1328, %1327 ], [ %1318, %1320 ]
  %1331 = ptrtoint ptr %1330 to i64
  %1332 = sub i64 %1331, %662
  %1333 = lshr exact i64 %1332, 1
  %1334 = trunc i64 %1333 to i32
  %1335 = icmp sgt i32 %1334, 0
  br i1 %1335, label %1336, label %1598

1336:                                             ; preds = %1329
  %1337 = and i64 %1333, 4294967295
  %1338 = extractelement <2 x double> %712, i64 0
  %1339 = extractelement <2 x double> %712, i64 1
  br label %1340

1340:                                             ; preds = %1336, %1384
  %1341 = phi i64 [ 0, %1336 ], [ %1387, %1384 ]
  %1342 = phi ptr [ %472, %1336 ], [ %1386, %1384 ]
  %1343 = phi ptr [ %1206, %1336 ], [ %1385, %1384 ]
  %1344 = getelementptr inbounds i16, ptr %472, i64 %1341
  %1345 = load i16, ptr %1344, align 2, !tbaa !45
  %1346 = zext i16 %1345 to i64
  %1347 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1346
  %1348 = load double, ptr %1347, align 8, !tbaa !69
  %1349 = fsub double %1338, %1348
  %1350 = fmul double %1349, %1349
  %1351 = getelementptr inbounds %class.Vector, ptr %1347, i64 0, i32 1
  %1352 = load double, ptr %1351, align 8, !tbaa !68
  %1353 = fsub double %1339, %1352
  %1354 = tail call double @llvm.fmuladd.f64(double %1353, double %1353, double %1350)
  %1355 = getelementptr inbounds %class.Vector, ptr %1347, i64 0, i32 2
  %1356 = load double, ptr %1355, align 8, !tbaa !50
  %1357 = fsub double %715, %1356
  %1358 = tail call double @llvm.fmuladd.f64(double %1357, double %1357, double %1354)
  br i1 %1174, label %1359, label %1366

1359:                                             ; preds = %1340
  %1360 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1346
  %1361 = load i32, ptr %1360, align 4
  %1362 = and i32 %1361, 1073741824
  %1363 = icmp ne i32 %1362, 0
  %1364 = fcmp ugt double %1358, %24
  %1365 = select i1 %1363, i1 true, i1 %1364
  br i1 %1365, label %1384, label %1371

1366:                                             ; preds = %1340
  %1367 = fcmp ugt double %1358, %24
  br i1 %1367, label %1384, label %1368

1368:                                             ; preds = %1366
  %1369 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1346
  %1370 = load i32, ptr %1369, align 4
  br label %1371

1371:                                             ; preds = %1368, %1359
  %1372 = phi i32 [ %1370, %1368 ], [ %1361, %1359 ]
  %1373 = shl i32 %1372, 2
  %1374 = ashr exact i32 %1373, 2
  %1375 = icmp slt i32 %1374, %738
  %1376 = icmp sgt i32 %1374, %740
  %1377 = select i1 %1375, i1 true, i1 %1376
  %1378 = select i1 %1377, ptr %1343, ptr %1342
  %1379 = zext i1 %1377 to i64
  %1380 = getelementptr inbounds i16, ptr %1343, i64 %1379
  %1381 = xor i1 %1377, true
  %1382 = zext i1 %1381 to i64
  %1383 = getelementptr inbounds i16, ptr %1342, i64 %1382
  store i16 %1345, ptr %1378, align 2, !tbaa !45
  br label %1384

1384:                                             ; preds = %1371, %1366, %1359
  %1385 = phi ptr [ %1343, %1359 ], [ %1343, %1366 ], [ %1380, %1371 ]
  %1386 = phi ptr [ %1342, %1359 ], [ %1342, %1366 ], [ %1383, %1371 ]
  %1387 = add nuw nsw i64 %1341, 1
  %1388 = icmp eq i64 %1387, %1337
  br i1 %1388, label %1598, label %1340

1389:                                             ; preds = %1200
  %1390 = icmp sgt i32 %1167, 0
  br i1 %1174, label %1391, label %1438

1391:                                             ; preds = %1389
  br i1 %1390, label %1392, label %1598

1392:                                             ; preds = %1391
  %1393 = zext i32 %1167 to i64
  %1394 = extractelement <2 x double> %712, i64 0
  %1395 = extractelement <2 x double> %712, i64 1
  br label %1396

1396:                                             ; preds = %1392, %1433
  %1397 = phi i64 [ 0, %1392 ], [ %1436, %1433 ]
  %1398 = phi ptr [ %472, %1392 ], [ %1435, %1433 ]
  %1399 = phi ptr [ %1206, %1392 ], [ %1434, %1433 ]
  %1400 = getelementptr inbounds i16, ptr %426, i64 %1397
  %1401 = load i16, ptr %1400, align 2, !tbaa !45
  %1402 = zext i16 %1401 to i64
  %1403 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1402
  %1404 = load i32, ptr %1403, align 4
  %1405 = and i32 %1404, 1073741824
  %1406 = icmp eq i32 %1405, 0
  br i1 %1406, label %1407, label %1433

1407:                                             ; preds = %1396
  %1408 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1402
  %1409 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 2
  %1410 = load double, ptr %1409, align 8, !tbaa !50
  %1411 = fsub double %715, %1410
  %1412 = getelementptr inbounds %class.Vector, ptr %1408, i64 0, i32 1
  %1413 = load double, ptr %1412, align 8, !tbaa !68
  %1414 = fsub double %1395, %1413
  %1415 = load double, ptr %1408, align 8, !tbaa !69
  %1416 = fsub double %1394, %1415
  %1417 = fmul double %1416, %1416
  %1418 = tail call double @llvm.fmuladd.f64(double %1414, double %1414, double %1417)
  %1419 = tail call double @llvm.fmuladd.f64(double %1411, double %1411, double %1418)
  %1420 = fcmp ugt double %1419, %24
  br i1 %1420, label %1433, label %1421

1421:                                             ; preds = %1407
  %1422 = shl i32 %1404, 2
  %1423 = ashr exact i32 %1422, 2
  %1424 = icmp slt i32 %1423, %738
  %1425 = icmp sgt i32 %1423, %740
  %1426 = select i1 %1424, i1 true, i1 %1425
  %1427 = select i1 %1426, ptr %1399, ptr %1398
  %1428 = zext i1 %1426 to i64
  %1429 = getelementptr inbounds i16, ptr %1399, i64 %1428
  %1430 = xor i1 %1426, true
  %1431 = zext i1 %1430 to i64
  %1432 = getelementptr inbounds i16, ptr %1398, i64 %1431
  store i16 %1401, ptr %1427, align 2, !tbaa !45
  br label %1433

1433:                                             ; preds = %1421, %1407, %1396
  %1434 = phi ptr [ %1399, %1396 ], [ %1399, %1407 ], [ %1429, %1421 ]
  %1435 = phi ptr [ %1398, %1396 ], [ %1398, %1407 ], [ %1432, %1421 ]
  %1436 = add nuw nsw i64 %1397, 1
  %1437 = icmp eq i64 %1436, %1393
  br i1 %1437, label %1598, label %1396

1438:                                             ; preds = %1389
  br i1 %1390, label %1439, label %1598

1439:                                             ; preds = %1438
  %1440 = icmp ugt i32 %1167, 6
  br i1 %1440, label %1441, label %1549

1441:                                             ; preds = %1439
  %1442 = add nsw i32 %1167, -2
  %1443 = load i16, ptr %426, align 2, !tbaa !45
  %1444 = zext i16 %1443 to i64
  %1445 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1444
  %1446 = load i32, ptr %1445, align 4
  %1447 = load i16, ptr %663, align 2, !tbaa !45
  %1448 = zext i16 %1447 to i64
  %1449 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1448
  %1450 = getelementptr inbounds %class.Vector, ptr %1449, i64 0, i32 2
  %1451 = load double, ptr %1450, align 8, !tbaa !50
  %1452 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1444
  %1453 = getelementptr inbounds %class.Vector, ptr %1452, i64 0, i32 2
  %1454 = load double, ptr %1453, align 8, !tbaa !50
  %1455 = getelementptr inbounds %class.Vector, ptr %1449, i64 0, i32 1
  %1456 = load double, ptr %1455, align 8, !tbaa !68
  %1457 = getelementptr inbounds %class.Vector, ptr %1452, i64 0, i32 1
  %1458 = load double, ptr %1457, align 8, !tbaa !68
  %1459 = load double, ptr %1449, align 8, !tbaa !69
  %1460 = load double, ptr %1452, align 8, !tbaa !69
  %1461 = zext i32 %1442 to i64
  %1462 = extractelement <2 x double> %712, i64 0
  %1463 = extractelement <2 x double> %712, i64 1
  br label %1464

1464:                                             ; preds = %1441, %1542
  %1465 = phi i64 [ 2, %1441 ], [ %1545, %1542 ]
  %1466 = phi i64 [ %1448, %1441 ], [ %1502, %1542 ]
  %1467 = phi i32 [ %1446, %1441 ], [ %1530, %1542 ]
  %1468 = phi ptr [ %472, %1441 ], [ %1544, %1542 ]
  %1469 = phi ptr [ %1206, %1441 ], [ %1543, %1542 ]
  %1470 = phi i16 [ %1443, %1441 ], [ %1495, %1542 ]
  %1471 = phi i16 [ %1447, %1441 ], [ %1498, %1542 ]
  %1472 = phi double [ %1460, %1441 ], [ %1501, %1542 ]
  %1473 = phi double [ %1459, %1441 ], [ %1504, %1542 ]
  %1474 = phi double [ %1458, %1441 ], [ %1506, %1542 ]
  %1475 = phi double [ %1456, %1441 ], [ %1508, %1542 ]
  %1476 = phi double [ %1454, %1441 ], [ %1510, %1542 ]
  %1477 = phi double [ %1451, %1441 ], [ %1512, %1542 ]
  %1478 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1466
  %1479 = load i32, ptr %1478, align 4
  %1480 = shl i32 %1479, 2
  %1481 = ashr exact i32 %1480, 2
  %1482 = fsub double %1462, %1472
  %1483 = fsub double %1462, %1473
  %1484 = fmul double %1482, %1482
  %1485 = fmul double %1483, %1483
  %1486 = fsub double %1463, %1474
  %1487 = fsub double %1463, %1475
  %1488 = tail call double @llvm.fmuladd.f64(double %1486, double %1486, double %1484)
  %1489 = tail call double @llvm.fmuladd.f64(double %1487, double %1487, double %1485)
  %1490 = fsub double %715, %1476
  %1491 = fsub double %715, %1477
  %1492 = tail call double @llvm.fmuladd.f64(double %1490, double %1490, double %1488)
  %1493 = tail call double @llvm.fmuladd.f64(double %1491, double %1491, double %1489)
  %1494 = getelementptr inbounds i16, ptr %426, i64 %1465
  %1495 = load i16, ptr %1494, align 2, !tbaa !45
  %1496 = or i64 %1465, 1
  %1497 = getelementptr inbounds i16, ptr %426, i64 %1496
  %1498 = load i16, ptr %1497, align 2, !tbaa !45
  %1499 = zext i16 %1495 to i64
  %1500 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1499
  %1501 = load double, ptr %1500, align 8, !tbaa !69
  %1502 = zext i16 %1498 to i64
  %1503 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1502
  %1504 = load double, ptr %1503, align 8, !tbaa !69
  %1505 = getelementptr inbounds %class.Vector, ptr %1500, i64 0, i32 1
  %1506 = load double, ptr %1505, align 8, !tbaa !68
  %1507 = getelementptr inbounds %class.Vector, ptr %1503, i64 0, i32 1
  %1508 = load double, ptr %1507, align 8, !tbaa !68
  %1509 = getelementptr inbounds %class.Vector, ptr %1500, i64 0, i32 2
  %1510 = load double, ptr %1509, align 8, !tbaa !50
  %1511 = getelementptr inbounds %class.Vector, ptr %1503, i64 0, i32 2
  %1512 = load double, ptr %1511, align 8, !tbaa !50
  %1513 = fcmp ugt double %1492, %24
  br i1 %1513, label %1526, label %1514

1514:                                             ; preds = %1464
  %1515 = shl i32 %1467, 2
  %1516 = ashr exact i32 %1515, 2
  %1517 = icmp slt i32 %1516, %738
  %1518 = icmp sgt i32 %1516, %740
  %1519 = select i1 %1517, i1 true, i1 %1518
  %1520 = select i1 %1519, ptr %1469, ptr %1468
  %1521 = zext i1 %1519 to i64
  %1522 = getelementptr inbounds i16, ptr %1469, i64 %1521
  %1523 = xor i1 %1519, true
  %1524 = zext i1 %1523 to i64
  %1525 = getelementptr inbounds i16, ptr %1468, i64 %1524
  store i16 %1470, ptr %1520, align 2, !tbaa !45
  br label %1526

1526:                                             ; preds = %1514, %1464
  %1527 = phi ptr [ %1469, %1464 ], [ %1522, %1514 ]
  %1528 = phi ptr [ %1468, %1464 ], [ %1525, %1514 ]
  %1529 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1499
  %1530 = load i32, ptr %1529, align 4
  %1531 = fcmp ugt double %1493, %24
  br i1 %1531, label %1542, label %1532

1532:                                             ; preds = %1526
  %1533 = icmp slt i32 %1481, %738
  %1534 = icmp sgt i32 %1481, %740
  %1535 = select i1 %1533, i1 true, i1 %1534
  %1536 = select i1 %1535, ptr %1527, ptr %1528
  %1537 = zext i1 %1535 to i64
  %1538 = getelementptr inbounds i16, ptr %1527, i64 %1537
  %1539 = xor i1 %1535, true
  %1540 = zext i1 %1539 to i64
  %1541 = getelementptr inbounds i16, ptr %1528, i64 %1540
  store i16 %1471, ptr %1536, align 2, !tbaa !45
  br label %1542

1542:                                             ; preds = %1532, %1526
  %1543 = phi ptr [ %1527, %1526 ], [ %1538, %1532 ]
  %1544 = phi ptr [ %1528, %1526 ], [ %1541, %1532 ]
  %1545 = add nuw nsw i64 %1465, 2
  %1546 = icmp ult i64 %1545, %1461
  br i1 %1546, label %1464, label %1547

1547:                                             ; preds = %1542
  %1548 = trunc i64 %1465 to i32
  br label %1549

1549:                                             ; preds = %1547, %1439
  %1550 = phi i32 [ %1548, %1547 ], [ 0, %1439 ]
  %1551 = phi ptr [ %1543, %1547 ], [ %1206, %1439 ]
  %1552 = phi ptr [ %1544, %1547 ], [ %472, %1439 ]
  %1553 = icmp slt i32 %1550, %1167
  br i1 %1553, label %1554, label %1598

1554:                                             ; preds = %1549
  %1555 = zext i32 %1550 to i64
  %1556 = zext i32 %1167 to i64
  %1557 = extractelement <2 x double> %712, i64 0
  %1558 = extractelement <2 x double> %712, i64 1
  br label %1559

1559:                                             ; preds = %1554, %1593
  %1560 = phi i64 [ %1555, %1554 ], [ %1596, %1593 ]
  %1561 = phi ptr [ %1552, %1554 ], [ %1595, %1593 ]
  %1562 = phi ptr [ %1551, %1554 ], [ %1594, %1593 ]
  %1563 = getelementptr inbounds i16, ptr %426, i64 %1560
  %1564 = load i16, ptr %1563, align 2, !tbaa !45
  %1565 = zext i16 %1564 to i64
  %1566 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1565
  %1567 = load double, ptr %1566, align 8, !tbaa !69
  %1568 = getelementptr inbounds %class.Vector, ptr %1566, i64 0, i32 1
  %1569 = load double, ptr %1568, align 8, !tbaa !68
  %1570 = getelementptr inbounds %class.Vector, ptr %1566, i64 0, i32 2
  %1571 = load double, ptr %1570, align 8, !tbaa !50
  %1572 = fsub double %1557, %1567
  %1573 = fmul double %1572, %1572
  %1574 = fsub double %1558, %1569
  %1575 = tail call double @llvm.fmuladd.f64(double %1574, double %1574, double %1573)
  %1576 = fsub double %715, %1571
  %1577 = tail call double @llvm.fmuladd.f64(double %1576, double %1576, double %1575)
  %1578 = fcmp ugt double %1577, %24
  br i1 %1578, label %1593, label %1579

1579:                                             ; preds = %1559
  %1580 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1565
  %1581 = load i32, ptr %1580, align 4
  %1582 = shl i32 %1581, 2
  %1583 = ashr exact i32 %1582, 2
  %1584 = icmp slt i32 %1583, %738
  %1585 = icmp sgt i32 %1583, %740
  %1586 = select i1 %1584, i1 true, i1 %1585
  %1587 = select i1 %1586, ptr %1562, ptr %1561
  %1588 = zext i1 %1586 to i64
  %1589 = getelementptr inbounds i16, ptr %1562, i64 %1588
  %1590 = xor i1 %1586, true
  %1591 = zext i1 %1590 to i64
  %1592 = getelementptr inbounds i16, ptr %1561, i64 %1591
  store i16 %1564, ptr %1587, align 2, !tbaa !45
  br label %1593

1593:                                             ; preds = %1579, %1559
  %1594 = phi ptr [ %1562, %1559 ], [ %1589, %1579 ]
  %1595 = phi ptr [ %1561, %1559 ], [ %1592, %1579 ]
  %1596 = add nuw nsw i64 %1560, 1
  %1597 = icmp eq i64 %1596, %1556
  br i1 %1597, label %1598, label %1559

1598:                                             ; preds = %1384, %1593, %1433, %1329, %1549, %1391, %1438
  %1599 = phi ptr [ %1206, %1438 ], [ %1206, %1391 ], [ %1551, %1549 ], [ %1206, %1329 ], [ %1434, %1433 ], [ %1594, %1593 ], [ %1385, %1384 ]
  %1600 = phi ptr [ %472, %1438 ], [ %472, %1391 ], [ %1552, %1549 ], [ %472, %1329 ], [ %1435, %1433 ], [ %1595, %1593 ], [ %1386, %1384 ]
  %1601 = icmp eq ptr %1599, %1206
  %1602 = icmp eq ptr %1600, %472
  %1603 = select i1 %1601, i1 %1602, i1 false
  br i1 %1603, label %1604, label %1606

1604:                                             ; preds = %1598
  %1605 = add nsw i32 %682, 1
  br label %2792

1606:                                             ; preds = %1598
  %1607 = trunc i32 %682 to i16
  %1608 = load i32, ptr %17, align 8, !tbaa !19
  %1609 = add nsw i32 %1608, -1
  %1610 = sext i32 %1609 to i64
  %1611 = getelementptr inbounds i16, ptr %1202, i64 %1610
  store i16 %1607, ptr %1611, align 2, !tbaa !45
  %1612 = ptrtoint ptr %1600 to i64
  %1613 = sub i64 %1612, %662
  %1614 = lshr exact i64 %1613, 1
  %1615 = trunc i64 %1614 to i32
  %1616 = icmp sgt i32 %1615, 0
  br i1 %1616, label %1617, label %1717

1617:                                             ; preds = %1606
  %1618 = and i64 %1614, 4294967295
  %1619 = and i64 %1614, 1
  %1620 = icmp eq i64 %1618, 1
  br i1 %1620, label %1685, label %1621

1621:                                             ; preds = %1617
  %1622 = sub nsw i64 %1618, %1619
  br label %1623

1623:                                             ; preds = %1678, %1621
  %1624 = phi i64 [ 0, %1621 ], [ %1682, %1678 ]
  %1625 = phi ptr [ %1599, %1621 ], [ %1681, %1678 ]
  %1626 = phi ptr [ %334, %1621 ], [ %1680, %1678 ]
  %1627 = phi ptr [ %380, %1621 ], [ %1679, %1678 ]
  %1628 = phi i64 [ 0, %1621 ], [ %1683, %1678 ]
  %1629 = getelementptr inbounds i16, ptr %472, i64 %1624
  %1630 = load i16, ptr %1629, align 2, !tbaa !45
  %1631 = zext i16 %1630 to i64
  %1632 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1631
  %1633 = load i32, ptr %1632, align 4
  %1634 = shl i32 %1633, 2
  %1635 = ashr exact i32 %1634, 2
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds i8, ptr %975, i64 %1636
  %1638 = load i8, ptr %1637, align 1, !tbaa !59
  %1639 = sext i8 %1638 to i32
  switch i32 %1639, label %1651 [
    i32 0, label %1640
    i32 1, label %1642
    i32 2, label %1644
  ]

1640:                                             ; preds = %1623
  %1641 = getelementptr inbounds i16, ptr %1625, i64 1
  br label %1646

1642:                                             ; preds = %1623
  %1643 = getelementptr inbounds i16, ptr %1626, i64 1
  br label %1646

1644:                                             ; preds = %1623
  %1645 = getelementptr inbounds i16, ptr %1627, i64 1
  br label %1646

1646:                                             ; preds = %1640, %1642, %1644
  %1647 = phi ptr [ %1627, %1644 ], [ %1626, %1642 ], [ %1625, %1640 ]
  %1648 = phi ptr [ %1645, %1644 ], [ %1627, %1642 ], [ %1627, %1640 ]
  %1649 = phi ptr [ %1626, %1644 ], [ %1643, %1642 ], [ %1626, %1640 ]
  %1650 = phi ptr [ %1625, %1644 ], [ %1625, %1642 ], [ %1641, %1640 ]
  store i16 %1630, ptr %1647, align 2, !tbaa !45
  br label %1651

1651:                                             ; preds = %1646, %1623
  %1652 = phi ptr [ %1627, %1623 ], [ %1648, %1646 ]
  %1653 = phi ptr [ %1626, %1623 ], [ %1649, %1646 ]
  %1654 = phi ptr [ %1625, %1623 ], [ %1650, %1646 ]
  %1655 = or i64 %1624, 1
  %1656 = getelementptr inbounds i16, ptr %472, i64 %1655
  %1657 = load i16, ptr %1656, align 2, !tbaa !45
  %1658 = zext i16 %1657 to i64
  %1659 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1658
  %1660 = load i32, ptr %1659, align 4
  %1661 = shl i32 %1660, 2
  %1662 = ashr exact i32 %1661, 2
  %1663 = sext i32 %1662 to i64
  %1664 = getelementptr inbounds i8, ptr %975, i64 %1663
  %1665 = load i8, ptr %1664, align 1, !tbaa !59
  %1666 = sext i8 %1665 to i32
  switch i32 %1666, label %1678 [
    i32 0, label %1671
    i32 1, label %1669
    i32 2, label %1667
  ]

1667:                                             ; preds = %1651
  %1668 = getelementptr inbounds i16, ptr %1652, i64 1
  br label %1673

1669:                                             ; preds = %1651
  %1670 = getelementptr inbounds i16, ptr %1653, i64 1
  br label %1673

1671:                                             ; preds = %1651
  %1672 = getelementptr inbounds i16, ptr %1654, i64 1
  br label %1673

1673:                                             ; preds = %1671, %1669, %1667
  %1674 = phi ptr [ %1652, %1667 ], [ %1653, %1669 ], [ %1654, %1671 ]
  %1675 = phi ptr [ %1668, %1667 ], [ %1652, %1669 ], [ %1652, %1671 ]
  %1676 = phi ptr [ %1653, %1667 ], [ %1670, %1669 ], [ %1653, %1671 ]
  %1677 = phi ptr [ %1654, %1667 ], [ %1654, %1669 ], [ %1672, %1671 ]
  store i16 %1657, ptr %1674, align 2, !tbaa !45
  br label %1678

1678:                                             ; preds = %1673, %1651
  %1679 = phi ptr [ %1652, %1651 ], [ %1675, %1673 ]
  %1680 = phi ptr [ %1653, %1651 ], [ %1676, %1673 ]
  %1681 = phi ptr [ %1654, %1651 ], [ %1677, %1673 ]
  %1682 = add nuw nsw i64 %1624, 2
  %1683 = add i64 %1628, 2
  %1684 = icmp eq i64 %1683, %1622
  br i1 %1684, label %1685, label %1623

1685:                                             ; preds = %1678, %1617
  %1686 = phi ptr [ undef, %1617 ], [ %1679, %1678 ]
  %1687 = phi ptr [ undef, %1617 ], [ %1680, %1678 ]
  %1688 = phi ptr [ undef, %1617 ], [ %1681, %1678 ]
  %1689 = phi i64 [ 0, %1617 ], [ %1682, %1678 ]
  %1690 = phi ptr [ %1599, %1617 ], [ %1681, %1678 ]
  %1691 = phi ptr [ %334, %1617 ], [ %1680, %1678 ]
  %1692 = phi ptr [ %380, %1617 ], [ %1679, %1678 ]
  %1693 = icmp eq i64 %1619, 0
  br i1 %1693, label %1717, label %1694

1694:                                             ; preds = %1685
  %1695 = getelementptr inbounds i16, ptr %472, i64 %1689
  %1696 = load i16, ptr %1695, align 2, !tbaa !45
  %1697 = zext i16 %1696 to i64
  %1698 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1697
  %1699 = load i32, ptr %1698, align 4
  %1700 = shl i32 %1699, 2
  %1701 = ashr exact i32 %1700, 2
  %1702 = sext i32 %1701 to i64
  %1703 = getelementptr inbounds i8, ptr %975, i64 %1702
  %1704 = load i8, ptr %1703, align 1, !tbaa !59
  %1705 = sext i8 %1704 to i32
  switch i32 %1705, label %1717 [
    i32 0, label %1710
    i32 1, label %1708
    i32 2, label %1706
  ]

1706:                                             ; preds = %1694
  %1707 = getelementptr inbounds i16, ptr %1692, i64 1
  br label %1712

1708:                                             ; preds = %1694
  %1709 = getelementptr inbounds i16, ptr %1691, i64 1
  br label %1712

1710:                                             ; preds = %1694
  %1711 = getelementptr inbounds i16, ptr %1690, i64 1
  br label %1712

1712:                                             ; preds = %1710, %1708, %1706
  %1713 = phi ptr [ %1692, %1706 ], [ %1691, %1708 ], [ %1690, %1710 ]
  %1714 = phi ptr [ %1707, %1706 ], [ %1692, %1708 ], [ %1692, %1710 ]
  %1715 = phi ptr [ %1691, %1706 ], [ %1709, %1708 ], [ %1691, %1710 ]
  %1716 = phi ptr [ %1690, %1706 ], [ %1690, %1708 ], [ %1711, %1710 ]
  store i16 %1696, ptr %1713, align 2, !tbaa !45
  br label %1717

1717:                                             ; preds = %1685, %1712, %1694, %1606
  %1718 = phi ptr [ %380, %1606 ], [ %1686, %1685 ], [ %1692, %1694 ], [ %1714, %1712 ]
  %1719 = phi ptr [ %334, %1606 ], [ %1687, %1685 ], [ %1691, %1694 ], [ %1715, %1712 ]
  %1720 = phi ptr [ %1599, %1606 ], [ %1688, %1685 ], [ %1690, %1694 ], [ %1716, %1712 ]
  %1721 = ptrtoint ptr %1720 to i64
  %1722 = ptrtoint ptr %1206 to i64
  %1723 = sub i64 %1721, %1722
  %1724 = lshr exact i64 %1723, 1
  %1725 = trunc i64 %1724 to i32
  %1726 = icmp eq i32 %1725, 0
  %1727 = shl i64 %1723, 31
  br i1 %1726, label %1733, label %1728

1728:                                             ; preds = %1717
  %1729 = add i64 %1727, -4294967296
  %1730 = ashr i64 %1729, 32
  %1731 = getelementptr inbounds i16, ptr %1206, i64 %1730
  %1732 = load i16, ptr %1731, align 2, !tbaa !45
  br label %1733

1733:                                             ; preds = %1717, %1728
  %1734 = phi i16 [ %1732, %1728 ], [ -1, %1717 ]
  %1735 = ashr i64 %1727, 32
  %1736 = getelementptr inbounds i16, ptr %1206, i64 %1735
  store i16 %1734, ptr %1736, align 2, !tbaa !45
  %1737 = trunc i64 %1724 to i16
  %1738 = add i16 %1737, 1
  %1739 = sext i32 %1608 to i64
  %1740 = getelementptr inbounds i16, ptr %1202, i64 %1739
  store i16 %1738, ptr %1740, align 2, !tbaa !45
  %1741 = add i32 %1608, 2
  %1742 = add i32 %1741, %1725
  %1743 = ptrtoint ptr %1719 to i64
  %1744 = sub i64 %1743, %664
  %1745 = lshr exact i64 %1744, 1
  %1746 = trunc i64 %1745 to i32
  %1747 = add nsw i32 %1742, 1
  %1748 = sext i32 %1747 to i64
  %1749 = getelementptr i16, ptr %1202, i64 %1748
  %1750 = icmp sgt i32 %1746, 0
  br i1 %1750, label %1751, label %1841

1751:                                             ; preds = %1733
  %1752 = and i64 %1745, 4294967295
  %1753 = icmp ult i64 %1752, 8
  br i1 %1753, label %1797, label %1754

1754:                                             ; preds = %1751
  %1755 = shl nsw i64 %1748, 1
  %1756 = add i64 %1755, %1203
  %1757 = sub i64 %1756, %664
  %1758 = icmp ult i64 %1757, 128
  br i1 %1758, label %1797, label %1759

1759:                                             ; preds = %1754
  %1760 = icmp ult i64 %1752, 64
  br i1 %1760, label %1784, label %1761

1761:                                             ; preds = %1759
  %1762 = and i64 %1745, 63
  %1763 = sub nsw i64 %1752, %1762
  br label %1764

1764:                                             ; preds = %1764, %1761
  %1765 = phi i64 [ 0, %1761 ], [ %1778, %1764 ]
  %1766 = getelementptr inbounds i16, ptr %334, i64 %1765
  %1767 = load <16 x i16>, ptr %1766, align 2, !tbaa !45
  %1768 = getelementptr inbounds i16, ptr %1766, i64 16
  %1769 = load <16 x i16>, ptr %1768, align 2, !tbaa !45
  %1770 = getelementptr inbounds i16, ptr %1766, i64 32
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !45
  %1772 = getelementptr inbounds i16, ptr %1766, i64 48
  %1773 = load <16 x i16>, ptr %1772, align 2, !tbaa !45
  %1774 = getelementptr inbounds i16, ptr %1749, i64 %1765
  store <16 x i16> %1767, ptr %1774, align 2, !tbaa !45
  %1775 = getelementptr inbounds i16, ptr %1774, i64 16
  store <16 x i16> %1769, ptr %1775, align 2, !tbaa !45
  %1776 = getelementptr inbounds i16, ptr %1774, i64 32
  store <16 x i16> %1771, ptr %1776, align 2, !tbaa !45
  %1777 = getelementptr inbounds i16, ptr %1774, i64 48
  store <16 x i16> %1773, ptr %1777, align 2, !tbaa !45
  %1778 = add nuw i64 %1765, 64
  %1779 = icmp eq i64 %1778, %1763
  br i1 %1779, label %1780, label %1764, !llvm.loop !106

1780:                                             ; preds = %1764
  %1781 = icmp eq i64 %1762, 0
  br i1 %1781, label %1835, label %1782

1782:                                             ; preds = %1780
  %1783 = icmp ult i64 %1762, 8
  br i1 %1783, label %1797, label %1784

1784:                                             ; preds = %1759, %1782
  %1785 = phi i64 [ %1763, %1782 ], [ 0, %1759 ]
  %1786 = and i64 %1745, 7
  %1787 = sub nsw i64 %1752, %1786
  br label %1788

1788:                                             ; preds = %1788, %1784
  %1789 = phi i64 [ %1785, %1784 ], [ %1793, %1788 ]
  %1790 = getelementptr inbounds i16, ptr %334, i64 %1789
  %1791 = load <8 x i16>, ptr %1790, align 2, !tbaa !45
  %1792 = getelementptr inbounds i16, ptr %1749, i64 %1789
  store <8 x i16> %1791, ptr %1792, align 2, !tbaa !45
  %1793 = add nuw i64 %1789, 8
  %1794 = icmp eq i64 %1793, %1787
  br i1 %1794, label %1795, label %1788, !llvm.loop !107

1795:                                             ; preds = %1788
  %1796 = icmp eq i64 %1786, 0
  br i1 %1796, label %1835, label %1797

1797:                                             ; preds = %1754, %1751, %1782, %1795
  %1798 = phi i64 [ 0, %1751 ], [ 0, %1754 ], [ %1763, %1782 ], [ %1787, %1795 ]
  %1799 = sub i64 %1745, %1798
  %1800 = xor i64 %1798, -1
  %1801 = add nsw i64 %1752, %1800
  %1802 = and i64 %1799, 3
  %1803 = icmp eq i64 %1802, 0
  br i1 %1803, label %1813, label %1804

1804:                                             ; preds = %1797, %1804
  %1805 = phi i64 [ %1810, %1804 ], [ %1798, %1797 ]
  %1806 = phi i64 [ %1811, %1804 ], [ 0, %1797 ]
  %1807 = getelementptr inbounds i16, ptr %334, i64 %1805
  %1808 = load i16, ptr %1807, align 2, !tbaa !45
  %1809 = getelementptr inbounds i16, ptr %1749, i64 %1805
  store i16 %1808, ptr %1809, align 2, !tbaa !45
  %1810 = add nuw nsw i64 %1805, 1
  %1811 = add i64 %1806, 1
  %1812 = icmp eq i64 %1811, %1802
  br i1 %1812, label %1813, label %1804, !llvm.loop !108

1813:                                             ; preds = %1804, %1797
  %1814 = phi i64 [ %1798, %1797 ], [ %1810, %1804 ]
  %1815 = icmp ult i64 %1801, 3
  br i1 %1815, label %1835, label %1816

1816:                                             ; preds = %1813, %1816
  %1817 = phi i64 [ %1833, %1816 ], [ %1814, %1813 ]
  %1818 = getelementptr inbounds i16, ptr %334, i64 %1817
  %1819 = load i16, ptr %1818, align 2, !tbaa !45
  %1820 = getelementptr inbounds i16, ptr %1749, i64 %1817
  store i16 %1819, ptr %1820, align 2, !tbaa !45
  %1821 = add nuw nsw i64 %1817, 1
  %1822 = getelementptr inbounds i16, ptr %334, i64 %1821
  %1823 = load i16, ptr %1822, align 2, !tbaa !45
  %1824 = getelementptr inbounds i16, ptr %1749, i64 %1821
  store i16 %1823, ptr %1824, align 2, !tbaa !45
  %1825 = add nuw nsw i64 %1817, 2
  %1826 = getelementptr inbounds i16, ptr %334, i64 %1825
  %1827 = load i16, ptr %1826, align 2, !tbaa !45
  %1828 = getelementptr inbounds i16, ptr %1749, i64 %1825
  store i16 %1827, ptr %1828, align 2, !tbaa !45
  %1829 = add nuw nsw i64 %1817, 3
  %1830 = getelementptr inbounds i16, ptr %334, i64 %1829
  %1831 = load i16, ptr %1830, align 2, !tbaa !45
  %1832 = getelementptr inbounds i16, ptr %1749, i64 %1829
  store i16 %1831, ptr %1832, align 2, !tbaa !45
  %1833 = add nuw nsw i64 %1817, 4
  %1834 = icmp eq i64 %1833, %1752
  br i1 %1834, label %1835, label %1816, !llvm.loop !109

1835:                                             ; preds = %1813, %1816, %1780, %1795
  %1836 = shl i64 %1744, 31
  %1837 = add i64 %1836, -4294967296
  %1838 = ashr i64 %1837, 32
  %1839 = getelementptr inbounds i16, ptr %1749, i64 %1838
  %1840 = load i16, ptr %1839, align 2, !tbaa !45
  br label %1841

1841:                                             ; preds = %1733, %1835
  %1842 = phi i64 [ %1745, %1835 ], [ 0, %1733 ]
  %1843 = phi i16 [ %1840, %1835 ], [ -1, %1733 ]
  %1844 = and i64 %1842, 4294967295
  %1845 = getelementptr inbounds i16, ptr %1749, i64 %1844
  store i16 %1843, ptr %1845, align 2, !tbaa !45
  %1846 = trunc i64 %1745 to i16
  %1847 = add i16 %1846, 1
  %1848 = sext i32 %1742 to i64
  %1849 = getelementptr inbounds i16, ptr %1202, i64 %1848
  store i16 %1847, ptr %1849, align 2, !tbaa !45
  %1850 = add nsw i32 %1746, 2
  %1851 = add nsw i32 %1850, %1742
  %1852 = ptrtoint ptr %1718 to i64
  %1853 = sub i64 %1852, %665
  %1854 = lshr exact i64 %1853, 1
  %1855 = trunc i64 %1854 to i32
  %1856 = add nsw i32 %1851, 1
  %1857 = sext i32 %1856 to i64
  %1858 = getelementptr i16, ptr %1202, i64 %1857
  %1859 = icmp sgt i32 %1855, 0
  br i1 %1859, label %1860, label %1950

1860:                                             ; preds = %1841
  %1861 = and i64 %1854, 4294967295
  %1862 = icmp ult i64 %1861, 8
  br i1 %1862, label %1906, label %1863

1863:                                             ; preds = %1860
  %1864 = shl nsw i64 %1857, 1
  %1865 = add i64 %1864, %1203
  %1866 = sub i64 %1865, %665
  %1867 = icmp ult i64 %1866, 128
  br i1 %1867, label %1906, label %1868

1868:                                             ; preds = %1863
  %1869 = icmp ult i64 %1861, 64
  br i1 %1869, label %1893, label %1870

1870:                                             ; preds = %1868
  %1871 = and i64 %1854, 63
  %1872 = sub nsw i64 %1861, %1871
  br label %1873

1873:                                             ; preds = %1873, %1870
  %1874 = phi i64 [ 0, %1870 ], [ %1887, %1873 ]
  %1875 = getelementptr inbounds i16, ptr %380, i64 %1874
  %1876 = load <16 x i16>, ptr %1875, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1875, i64 16
  %1878 = load <16 x i16>, ptr %1877, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1875, i64 32
  %1880 = load <16 x i16>, ptr %1879, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1875, i64 48
  %1882 = load <16 x i16>, ptr %1881, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1858, i64 %1874
  store <16 x i16> %1876, ptr %1883, align 2, !tbaa !45
  %1884 = getelementptr inbounds i16, ptr %1883, i64 16
  store <16 x i16> %1878, ptr %1884, align 2, !tbaa !45
  %1885 = getelementptr inbounds i16, ptr %1883, i64 32
  store <16 x i16> %1880, ptr %1885, align 2, !tbaa !45
  %1886 = getelementptr inbounds i16, ptr %1883, i64 48
  store <16 x i16> %1882, ptr %1886, align 2, !tbaa !45
  %1887 = add nuw i64 %1874, 64
  %1888 = icmp eq i64 %1887, %1872
  br i1 %1888, label %1889, label %1873, !llvm.loop !110

1889:                                             ; preds = %1873
  %1890 = icmp eq i64 %1871, 0
  br i1 %1890, label %1944, label %1891

1891:                                             ; preds = %1889
  %1892 = icmp ult i64 %1871, 8
  br i1 %1892, label %1906, label %1893

1893:                                             ; preds = %1868, %1891
  %1894 = phi i64 [ %1872, %1891 ], [ 0, %1868 ]
  %1895 = and i64 %1854, 7
  %1896 = sub nsw i64 %1861, %1895
  br label %1897

1897:                                             ; preds = %1897, %1893
  %1898 = phi i64 [ %1894, %1893 ], [ %1902, %1897 ]
  %1899 = getelementptr inbounds i16, ptr %380, i64 %1898
  %1900 = load <8 x i16>, ptr %1899, align 2, !tbaa !45
  %1901 = getelementptr inbounds i16, ptr %1858, i64 %1898
  store <8 x i16> %1900, ptr %1901, align 2, !tbaa !45
  %1902 = add nuw i64 %1898, 8
  %1903 = icmp eq i64 %1902, %1896
  br i1 %1903, label %1904, label %1897, !llvm.loop !111

1904:                                             ; preds = %1897
  %1905 = icmp eq i64 %1895, 0
  br i1 %1905, label %1944, label %1906

1906:                                             ; preds = %1863, %1860, %1891, %1904
  %1907 = phi i64 [ 0, %1860 ], [ 0, %1863 ], [ %1872, %1891 ], [ %1896, %1904 ]
  %1908 = sub i64 %1854, %1907
  %1909 = xor i64 %1907, -1
  %1910 = add nsw i64 %1861, %1909
  %1911 = and i64 %1908, 3
  %1912 = icmp eq i64 %1911, 0
  br i1 %1912, label %1922, label %1913

1913:                                             ; preds = %1906, %1913
  %1914 = phi i64 [ %1919, %1913 ], [ %1907, %1906 ]
  %1915 = phi i64 [ %1920, %1913 ], [ 0, %1906 ]
  %1916 = getelementptr inbounds i16, ptr %380, i64 %1914
  %1917 = load i16, ptr %1916, align 2, !tbaa !45
  %1918 = getelementptr inbounds i16, ptr %1858, i64 %1914
  store i16 %1917, ptr %1918, align 2, !tbaa !45
  %1919 = add nuw nsw i64 %1914, 1
  %1920 = add i64 %1915, 1
  %1921 = icmp eq i64 %1920, %1911
  br i1 %1921, label %1922, label %1913, !llvm.loop !112

1922:                                             ; preds = %1913, %1906
  %1923 = phi i64 [ %1907, %1906 ], [ %1919, %1913 ]
  %1924 = icmp ult i64 %1910, 3
  br i1 %1924, label %1944, label %1925

1925:                                             ; preds = %1922, %1925
  %1926 = phi i64 [ %1942, %1925 ], [ %1923, %1922 ]
  %1927 = getelementptr inbounds i16, ptr %380, i64 %1926
  %1928 = load i16, ptr %1927, align 2, !tbaa !45
  %1929 = getelementptr inbounds i16, ptr %1858, i64 %1926
  store i16 %1928, ptr %1929, align 2, !tbaa !45
  %1930 = add nuw nsw i64 %1926, 1
  %1931 = getelementptr inbounds i16, ptr %380, i64 %1930
  %1932 = load i16, ptr %1931, align 2, !tbaa !45
  %1933 = getelementptr inbounds i16, ptr %1858, i64 %1930
  store i16 %1932, ptr %1933, align 2, !tbaa !45
  %1934 = add nuw nsw i64 %1926, 2
  %1935 = getelementptr inbounds i16, ptr %380, i64 %1934
  %1936 = load i16, ptr %1935, align 2, !tbaa !45
  %1937 = getelementptr inbounds i16, ptr %1858, i64 %1934
  store i16 %1936, ptr %1937, align 2, !tbaa !45
  %1938 = add nuw nsw i64 %1926, 3
  %1939 = getelementptr inbounds i16, ptr %380, i64 %1938
  %1940 = load i16, ptr %1939, align 2, !tbaa !45
  %1941 = getelementptr inbounds i16, ptr %1858, i64 %1938
  store i16 %1940, ptr %1941, align 2, !tbaa !45
  %1942 = add nuw nsw i64 %1926, 4
  %1943 = icmp eq i64 %1942, %1861
  br i1 %1943, label %1944, label %1925, !llvm.loop !113

1944:                                             ; preds = %1922, %1925, %1889, %1904
  %1945 = shl i64 %1853, 31
  %1946 = add i64 %1945, -4294967296
  %1947 = ashr i64 %1946, 32
  %1948 = getelementptr inbounds i16, ptr %1858, i64 %1947
  %1949 = load i16, ptr %1948, align 2, !tbaa !45
  br label %1950

1950:                                             ; preds = %1841, %1944
  %1951 = phi i64 [ %1854, %1944 ], [ 0, %1841 ]
  %1952 = phi i16 [ %1949, %1944 ], [ -1, %1841 ]
  %1953 = and i64 %1951, 4294967295
  %1954 = getelementptr inbounds i16, ptr %1858, i64 %1953
  store i16 %1952, ptr %1954, align 2, !tbaa !45
  %1955 = trunc i64 %1854 to i16
  %1956 = add i16 %1955, 1
  %1957 = sext i32 %1851 to i64
  %1958 = getelementptr inbounds i16, ptr %1202, i64 %1957
  store i16 %1956, ptr %1958, align 2, !tbaa !45
  %1959 = add i32 %1855, 3
  %1960 = add i32 %1959, %1851
  %1961 = select i1 %147, i32 1, i32 %1960
  store i32 %1961, ptr %17, align 8, !tbaa !19
  br label %1992

1962:                                             ; preds = %709
  %1963 = load ptr, ptr %12, align 8, !tbaa !47
  %1964 = load i32, ptr %17, align 8, !tbaa !19
  %1965 = add i32 %1964, 1
  %1966 = sext i32 %1965 to i64
  %1967 = getelementptr inbounds i16, ptr %1963, i64 %1966
  %1968 = sext i32 %1964 to i64
  %1969 = getelementptr inbounds i16, ptr %1963, i64 %1968
  %1970 = load i16, ptr %1969, align 2, !tbaa !45
  %1971 = zext i16 %1970 to i32
  %1972 = add i32 %1965, %1971
  %1973 = add nsw i32 %1971, -1
  %1974 = add i32 %1972, 1
  %1975 = sext i32 %1974 to i64
  %1976 = getelementptr inbounds i16, ptr %1963, i64 %1975
  %1977 = sext i32 %1972 to i64
  %1978 = getelementptr inbounds i16, ptr %1963, i64 %1977
  %1979 = load i16, ptr %1978, align 2, !tbaa !45
  %1980 = zext i16 %1979 to i32
  %1981 = add i32 %1974, %1980
  %1982 = add nsw i32 %1980, -1
  %1983 = add i32 %1981, 1
  %1984 = sext i32 %1983 to i64
  %1985 = getelementptr inbounds i16, ptr %1963, i64 %1984
  %1986 = sext i32 %1981 to i64
  %1987 = getelementptr inbounds i16, ptr %1963, i64 %1986
  %1988 = load i16, ptr %1987, align 2, !tbaa !45
  %1989 = zext i16 %1988 to i32
  %1990 = add i32 %1983, %1989
  store i32 %1990, ptr %17, align 8, !tbaa !19
  %1991 = add nsw i32 %1989, -1
  br label %1992

1992:                                             ; preds = %1950, %1962
  %1993 = phi i32 [ %1991, %1962 ], [ %1855, %1950 ]
  %1994 = phi ptr [ %1985, %1962 ], [ %1858, %1950 ]
  %1995 = phi i32 [ %1982, %1962 ], [ %1746, %1950 ]
  %1996 = phi ptr [ %1976, %1962 ], [ %1749, %1950 ]
  %1997 = phi i32 [ %1973, %1962 ], [ %1725, %1950 ]
  %1998 = phi ptr [ %1967, %1962 ], [ %1206, %1950 ]
  %1999 = phi i32 [ %686, %1962 ], [ %1167, %1950 ]
  %2000 = phi ptr [ %685, %1962 ], [ %976, %1950 ]
  %2001 = phi ptr [ %684, %1962 ], [ %977, %1950 ]
  %2002 = phi ptr [ %683, %1962 ], [ %978, %1950 ]
  %2003 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %2004 = icmp eq i32 %2003, 0
  %2005 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2006 = icmp ne i32 %2005, 0
  %2007 = select i1 %2004, i1 true, i1 %2006
  br i1 %2007, label %2012, label %2008

2008:                                             ; preds = %1992
  %2009 = load i8, ptr %716, align 2, !tbaa !52
  %2010 = icmp eq i8 %2009, 1
  %2011 = select i1 %2010, double 1.000000e+00, double -1.000000e+00
  br label %2012

2012:                                             ; preds = %1992, %2008
  %2013 = phi double [ %2011, %2008 ], [ 0.000000e+00, %1992 ]
  %2014 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %694, i32 1
  %2015 = load float, ptr %2014, align 8, !tbaa !81
  %2016 = fpext float %2015 to double
  %2017 = fmul double %2016, 0x4074C104816F0069
  %2018 = fmul double %33, %2017
  %2019 = fmul double %28, %2018
  %2020 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %694, i32 2
  %2021 = load i16, ptr %2020, align 4, !tbaa !82
  %2022 = sext i16 %2021 to i32
  %2023 = load ptr, ptr %666, align 8, !tbaa !83
  %2024 = load i32, ptr %667, align 8, !tbaa !85
  %2025 = shl nsw i32 %2022, 1
  %2026 = mul i32 %2025, %2024
  %2027 = zext i32 %2026 to i64
  %2028 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2023, i64 %2027
  %2029 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2030 = extractelement <2 x double> %712, i64 0
  %2031 = extractelement <2 x double> %712, i64 1
  %2032 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2029, double noundef %2030, double noundef %2031, double noundef %715, ptr noundef %46, ptr noundef nonnull %1998, i32 noundef %1997, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2033 = icmp sgt i32 %2032, 0
  br i1 %2033, label %2034, label %2299

2034:                                             ; preds = %2012
  %2035 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2036 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2037 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2038 = mul nsw i32 %2037, %718
  %2039 = mul i32 %2036, 3
  %2040 = mul nsw i32 %730, 3
  %2041 = sext i32 %2040 to i64
  %2042 = add nsw i32 %2040, 1
  %2043 = sext i32 %2042 to i64
  %2044 = add nsw i32 %2040, 2
  %2045 = sext i32 %2044 to i64
  %2046 = zext i32 %2032 to i64
  br label %2047

2047:                                             ; preds = %2034, %2047
  %2048 = phi i64 [ 0, %2034 ], [ %2297, %2047 ]
  %2049 = phi double [ 0.000000e+00, %2034 ], [ %2170, %2047 ]
  %2050 = phi double [ 0.000000e+00, %2034 ], [ %2259, %2047 ]
  %2051 = phi <2 x double> [ %688, %2034 ], [ %2162, %2047 ]
  %2052 = phi <2 x double> [ %689, %2034 ], [ %2155, %2047 ]
  %2053 = phi <2 x double> [ %690, %2034 ], [ %2252, %2047 ]
  %2054 = phi <2 x double> [ %691, %2034 ], [ %2246, %2047 ]
  %2055 = phi <2 x double> [ %692, %2034 ], [ %2168, %2047 ]
  %2056 = phi <2 x double> [ %693, %2034 ], [ %2257, %2047 ]
  %2057 = phi <2 x double> [ zeroinitializer, %2034 ], [ %2164, %2047 ]
  %2058 = phi <2 x double> [ zeroinitializer, %2034 ], [ %2254, %2047 ]
  %2059 = shl nuw nsw i64 %2048, 1
  %2060 = getelementptr inbounds i32, ptr %146, i64 %2059
  %2061 = load i32, ptr %2060, align 4, !tbaa !5
  %2062 = ashr i32 %2061, 14
  %2063 = add nsw i32 %2062, %39
  %2064 = getelementptr inbounds i16, ptr %99, i64 %2048
  %2065 = load i16, ptr %2064, align 2, !tbaa !45
  %2066 = zext i16 %2065 to i64
  %2067 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2066
  %2068 = getelementptr inbounds double, ptr %145, i64 %2048
  %2069 = load double, ptr %2068, align 8, !tbaa !15
  %2070 = sext i32 %2063 to i64
  %2071 = getelementptr inbounds double, ptr %2035, i64 %2070
  %2072 = load double, ptr %2071, align 8, !tbaa !15
  %2073 = fsub double %2069, %2072
  %2074 = shl nsw i32 %2063, 4
  %2075 = sext i32 %2074 to i64
  %2076 = getelementptr inbounds double, ptr %31, i64 %2075
  %2077 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2066, i32 2
  %2078 = load i16, ptr %2077, align 4, !tbaa !82
  %2079 = sext i16 %2078 to i32
  %2080 = shl nsw i32 %2079, 1
  %2081 = sext i32 %2080 to i64
  %2082 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2028, i64 %2081
  %2083 = getelementptr inbounds %class.Vector, ptr %630, i64 %2066
  %2084 = getelementptr inbounds %class.Vector, ptr %634, i64 %2066
  %2085 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2066, i32 1
  %2086 = load float, ptr %2085, align 8, !tbaa !81
  %2087 = fpext float %2086 to double
  %2088 = fmul double %2019, %2087
  %2089 = load <2 x double>, ptr %2067, align 8, !tbaa !15
  %2090 = fsub <2 x double> %712, %2089
  %2091 = getelementptr inbounds %class.Vector, ptr %2067, i64 0, i32 2
  %2092 = load double, ptr %2091, align 8, !tbaa !50
  %2093 = fsub double %715, %2092
  %2094 = load double, ptr %2082, align 8, !tbaa !86
  %2095 = fmul double %33, %2094
  %2096 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2028, i64 %2081, i32 1
  %2097 = load double, ptr %2096, align 8, !tbaa !88
  %2098 = load double, ptr %2076, align 8, !tbaa !15
  %2099 = getelementptr inbounds double, ptr %2076, i64 2
  %2100 = load double, ptr %2099, align 8, !tbaa !15
  %2101 = fmul double %2097, %668
  %2102 = fmul double %2101, %2100
  %2103 = tail call double @llvm.fmuladd.f64(double %2095, double %2098, double %2102)
  %2104 = getelementptr inbounds double, ptr %2076, i64 1
  %2105 = load double, ptr %2104, align 8, !tbaa !15
  %2106 = getelementptr inbounds double, ptr %2076, i64 3
  %2107 = load double, ptr %2106, align 8, !tbaa !15
  %2108 = fmul double %2101, %2107
  %2109 = tail call double @llvm.fmuladd.f64(double %2095, double %2105, double %2108)
  %2110 = getelementptr inbounds double, ptr %2076, i64 4
  %2111 = load double, ptr %2110, align 8, !tbaa !15
  %2112 = getelementptr inbounds double, ptr %2076, i64 6
  %2113 = load double, ptr %2112, align 8, !tbaa !15
  %2114 = fmul double %2101, %2113
  %2115 = tail call double @llvm.fmuladd.f64(double %2095, double %2111, double %2114)
  %2116 = tail call double @llvm.fmuladd.f64(double %2073, double %2103, double %2109)
  %2117 = tail call double @llvm.fmuladd.f64(double %2116, double %2073, double %2115)
  %2118 = fmul double %2013, %2117
  %2119 = load <2 x double>, ptr %669, align 8, !tbaa !15
  %2120 = insertelement <2 x double> poison, double %2118, i64 0
  %2121 = shufflevector <2 x double> %2120, <2 x double> poison, <2 x i32> zeroinitializer
  %2122 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2121, <2 x double> %2090, <2 x double> %2119)
  store <2 x double> %2122, ptr %669, align 8, !tbaa !15
  %2123 = load double, ptr %670, align 8, !tbaa !15
  %2124 = tail call double @llvm.fmuladd.f64(double %2118, double %2093, double %2123)
  store double %2124, ptr %670, align 8, !tbaa !15
  %2125 = getelementptr inbounds double, ptr %2076, i64 8
  %2126 = load double, ptr %2125, align 8, !tbaa !15
  %2127 = fmul double %2088, %2126
  %2128 = getelementptr inbounds double, ptr %2076, i64 9
  %2129 = load double, ptr %2128, align 8, !tbaa !15
  %2130 = fmul double %2088, %2129
  %2131 = getelementptr inbounds double, ptr %2076, i64 10
  %2132 = load double, ptr %2131, align 8, !tbaa !15
  %2133 = fmul double %2088, %2132
  %2134 = tail call double @llvm.fmuladd.f64(double %2073, double %2127, double %2130)
  %2135 = tail call double @llvm.fmuladd.f64(double %2134, double %2073, double %2133)
  %2136 = fmul double %2013, %2135
  %2137 = load double, ptr %671, align 8, !tbaa !15
  %2138 = extractelement <2 x double> %2090, i64 0
  %2139 = tail call double @llvm.fmuladd.f64(double %2136, double %2138, double %2137)
  store double %2139, ptr %671, align 8, !tbaa !15
  %2140 = load double, ptr %672, align 8, !tbaa !15
  %2141 = extractelement <2 x double> %2090, i64 1
  %2142 = tail call double @llvm.fmuladd.f64(double %2136, double %2141, double %2140)
  store double %2142, ptr %672, align 8, !tbaa !15
  %2143 = load double, ptr %673, align 8, !tbaa !15
  %2144 = tail call double @llvm.fmuladd.f64(double %2136, double %2093, double %2143)
  store double %2144, ptr %673, align 8, !tbaa !15
  %2145 = fadd double %2103, %2127
  %2146 = fadd double %2109, %2130
  %2147 = fadd double %2115, %2133
  %2148 = tail call double @llvm.fmuladd.f64(double %2073, double %2145, double %2146)
  %2149 = tail call double @llvm.fmuladd.f64(double %2148, double %2073, double %2147)
  %2150 = fmul double %2141, %2149
  %2151 = insertelement <2 x double> poison, double %2150, i64 0
  %2152 = shufflevector <2 x double> %2151, <2 x double> poison, <2 x i32> zeroinitializer
  %2153 = shufflevector <2 x double> %2090, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2154 = insertelement <2 x double> %2153, double %2093, i64 1
  %2155 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2152, <2 x double> %2154, <2 x double> %2052)
  %2156 = insertelement <2 x double> %2153, double %2093, i64 0
  %2157 = insertelement <2 x double> poison, double %2149, i64 0
  %2158 = shufflevector <2 x double> %2157, <2 x double> poison, <2 x i32> zeroinitializer
  %2159 = fmul <2 x double> %2156, %2158
  %2160 = shufflevector <2 x double> %2159, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2161 = shufflevector <2 x double> %2159, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2162 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2161, <2 x double> %2090, <2 x double> %2051)
  %2163 = insertelement <2 x double> %2160, double %2150, i64 1
  %2164 = fadd <2 x double> %2057, %2163
  %2165 = load <2 x double>, ptr %2083, align 8, !tbaa !15
  %2166 = fsub <2 x double> %2165, %2163
  store <2 x double> %2166, ptr %2083, align 8, !tbaa !15
  %2167 = shufflevector <2 x double> %2156, <2 x double> poison, <2 x i32> zeroinitializer
  %2168 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2159, <2 x double> %2167, <2 x double> %2055)
  %2169 = extractelement <2 x double> %2159, i64 0
  %2170 = fadd double %2049, %2169
  %2171 = getelementptr inbounds %class.Vector, ptr %630, i64 %2066, i32 2
  %2172 = load double, ptr %2171, align 8, !tbaa !89
  %2173 = fsub double %2172, %2169
  store double %2173, ptr %2171, align 8, !tbaa !89
  %2174 = load double, ptr %2091, align 8, !tbaa !50
  %2175 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2176 = fsub double %2174, %2175
  %2177 = fmul double %10, %2176
  %2178 = tail call double @llvm.floor.f64(double %2177)
  %2179 = fptosi double %2178 to i32
  %2180 = icmp slt i32 %2179, 0
  %2181 = select i1 %2180, i32 %2036, i32 0
  %2182 = icmp sgt i32 %2036, %2179
  %2183 = select i1 %2182, i32 0, i32 %2036
  %2184 = sub i32 %2179, %2183
  %2185 = add i32 %2184, %2181
  %2186 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2066, i32 3
  %2187 = load i8, ptr %2186, align 2, !tbaa !52
  %2188 = zext i8 %2187 to i32
  %2189 = shufflevector <2 x double> %2159, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2190 = fmul <2 x double> %2090, %2189
  %2191 = extractelement <2 x double> %2190, i64 0
  %2192 = fmul double %2141, %2150
  %2193 = fmul double %2093, %2169
  %2194 = add nsw i32 %2038, %2188
  %2195 = mul i32 %2039, %2194
  %2196 = sext i32 %2195 to i64
  %2197 = getelementptr inbounds double, ptr %8, i64 %2196
  %2198 = fmul double %2191, 5.000000e-01
  %2199 = fmul double %2192, 5.000000e-01
  %2200 = fmul double %2193, 5.000000e-01
  %2201 = getelementptr inbounds double, ptr %2197, i64 %2041
  %2202 = load double, ptr %2201, align 8, !tbaa !15
  %2203 = fadd double %2198, %2202
  store double %2203, ptr %2201, align 8, !tbaa !15
  %2204 = getelementptr inbounds double, ptr %2197, i64 %2043
  %2205 = load double, ptr %2204, align 8, !tbaa !15
  %2206 = fadd double %2199, %2205
  store double %2206, ptr %2204, align 8, !tbaa !15
  %2207 = getelementptr inbounds double, ptr %2197, i64 %2045
  %2208 = load double, ptr %2207, align 8, !tbaa !15
  %2209 = fadd double %2200, %2208
  store double %2209, ptr %2207, align 8, !tbaa !15
  %2210 = mul nsw i32 %2185, 3
  %2211 = sext i32 %2210 to i64
  %2212 = getelementptr inbounds double, ptr %2197, i64 %2211
  %2213 = load double, ptr %2212, align 8, !tbaa !15
  %2214 = fadd double %2198, %2213
  store double %2214, ptr %2212, align 8, !tbaa !15
  %2215 = add nsw i32 %2210, 1
  %2216 = sext i32 %2215 to i64
  %2217 = getelementptr inbounds double, ptr %2197, i64 %2216
  %2218 = load double, ptr %2217, align 8, !tbaa !15
  %2219 = fadd double %2199, %2218
  store double %2219, ptr %2217, align 8, !tbaa !15
  %2220 = add nsw i32 %2210, 2
  %2221 = sext i32 %2220 to i64
  %2222 = getelementptr inbounds double, ptr %2197, i64 %2221
  %2223 = load double, ptr %2222, align 8, !tbaa !15
  %2224 = fadd double %2200, %2223
  store double %2224, ptr %2222, align 8, !tbaa !15
  %2225 = getelementptr inbounds double, ptr %2076, i64 12
  %2226 = load double, ptr %2225, align 8, !tbaa !15
  %2227 = getelementptr inbounds double, ptr %2076, i64 13
  %2228 = load double, ptr %2227, align 8, !tbaa !15
  %2229 = getelementptr inbounds double, ptr %2076, i64 14
  %2230 = load double, ptr %2229, align 8, !tbaa !15
  %2231 = fmul double %2088, %2226
  %2232 = fmul double %2088, %2228
  %2233 = fmul double %2088, %2230
  %2234 = tail call double @llvm.fmuladd.f64(double %2073, double %2231, double %2232)
  %2235 = tail call double @llvm.fmuladd.f64(double %2234, double %2073, double %2233)
  %2236 = fmul double %2013, %2235
  %2237 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2238 = insertelement <2 x double> poison, double %2236, i64 0
  %2239 = shufflevector <2 x double> %2238, <2 x double> poison, <2 x i32> zeroinitializer
  %2240 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2239, <2 x double> %2090, <2 x double> %2237)
  store <2 x double> %2240, ptr %671, align 8, !tbaa !15
  %2241 = load double, ptr %673, align 8, !tbaa !15
  %2242 = tail call double @llvm.fmuladd.f64(double %2236, double %2093, double %2241)
  store double %2242, ptr %673, align 8, !tbaa !15
  %2243 = fmul double %2141, %2235
  %2244 = insertelement <2 x double> poison, double %2243, i64 0
  %2245 = shufflevector <2 x double> %2244, <2 x double> poison, <2 x i32> zeroinitializer
  %2246 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2245, <2 x double> %2154, <2 x double> %2054)
  %2247 = insertelement <2 x double> poison, double %2235, i64 0
  %2248 = shufflevector <2 x double> %2247, <2 x double> poison, <2 x i32> zeroinitializer
  %2249 = fmul <2 x double> %2156, %2248
  %2250 = shufflevector <2 x double> %2249, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2251 = shufflevector <2 x double> %2249, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2252 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2251, <2 x double> %2090, <2 x double> %2053)
  %2253 = insertelement <2 x double> %2250, double %2243, i64 1
  %2254 = fadd <2 x double> %2058, %2253
  %2255 = load <2 x double>, ptr %2084, align 8, !tbaa !15
  %2256 = fsub <2 x double> %2255, %2253
  store <2 x double> %2256, ptr %2084, align 8, !tbaa !15
  %2257 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2249, <2 x double> %2167, <2 x double> %2056)
  %2258 = extractelement <2 x double> %2249, i64 0
  %2259 = fadd double %2050, %2258
  %2260 = getelementptr inbounds %class.Vector, ptr %634, i64 %2066, i32 2
  %2261 = load double, ptr %2260, align 8, !tbaa !89
  %2262 = fsub double %2261, %2258
  store double %2262, ptr %2260, align 8, !tbaa !89
  %2263 = load double, ptr %2091, align 8, !tbaa !50
  %2264 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2265 = fsub double %2263, %2264
  %2266 = fmul double %10, %2265
  %2267 = tail call double @llvm.floor.f64(double %2266)
  %2268 = fptosi double %2267 to i32
  %2269 = icmp slt i32 %2268, 0
  %2270 = select i1 %2269, i32 %2036, i32 0
  %2271 = icmp sgt i32 %2036, %2268
  %2272 = select i1 %2271, i32 0, i32 %2036
  %2273 = sub i32 %2268, %2272
  %2274 = add i32 %2273, %2270
  %2275 = fmul double %2093, %2258
  %2276 = fmul double %2275, 5.000000e-01
  %2277 = load double, ptr %2201, align 8, !tbaa !15
  %2278 = load double, ptr %2204, align 8, !tbaa !15
  %2279 = load double, ptr %2207, align 8, !tbaa !15
  %2280 = fadd double %2276, %2279
  store double %2280, ptr %2207, align 8, !tbaa !15
  %2281 = mul nsw i32 %2274, 3
  %2282 = sext i32 %2281 to i64
  %2283 = getelementptr inbounds double, ptr %2197, i64 %2282
  %2284 = fmul <2 x double> %2090, %2253
  %2285 = fmul <2 x double> %2284, <double 5.000000e-01, double 5.000000e-01>
  %2286 = extractelement <2 x double> %2285, i64 0
  %2287 = fadd double %2286, %2277
  store double %2287, ptr %2201, align 8, !tbaa !15
  %2288 = extractelement <2 x double> %2285, i64 1
  %2289 = fadd double %2288, %2278
  store double %2289, ptr %2204, align 8, !tbaa !15
  %2290 = load <2 x double>, ptr %2283, align 8, !tbaa !15
  %2291 = fadd <2 x double> %2285, %2290
  store <2 x double> %2291, ptr %2283, align 8, !tbaa !15
  %2292 = add nsw i32 %2281, 2
  %2293 = sext i32 %2292 to i64
  %2294 = getelementptr inbounds double, ptr %2197, i64 %2293
  %2295 = load double, ptr %2294, align 8, !tbaa !15
  %2296 = fadd double %2276, %2295
  store double %2296, ptr %2294, align 8, !tbaa !15
  %2297 = add nuw nsw i64 %2048, 1
  %2298 = icmp eq i64 %2297, %2046
  br i1 %2298, label %2299, label %2047

2299:                                             ; preds = %2047, %2012
  %2300 = phi double [ 0.000000e+00, %2012 ], [ %2259, %2047 ]
  %2301 = phi double [ 0.000000e+00, %2012 ], [ %2170, %2047 ]
  %2302 = phi <2 x double> [ %688, %2012 ], [ %2162, %2047 ]
  %2303 = phi <2 x double> [ %689, %2012 ], [ %2155, %2047 ]
  %2304 = phi <2 x double> [ %690, %2012 ], [ %2252, %2047 ]
  %2305 = phi <2 x double> [ %691, %2012 ], [ %2246, %2047 ]
  %2306 = phi <2 x double> [ %692, %2012 ], [ %2168, %2047 ]
  %2307 = phi <2 x double> [ %693, %2012 ], [ %2257, %2047 ]
  %2308 = phi <2 x double> [ zeroinitializer, %2012 ], [ %2164, %2047 ]
  %2309 = phi <2 x double> [ zeroinitializer, %2012 ], [ %2254, %2047 ]
  %2310 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2311 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2310, double noundef %2030, double noundef %2031, double noundef %715, ptr noundef %46, ptr noundef %1994, i32 noundef %1993, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2312 = add nsw i32 %2311, %681
  %2313 = icmp sgt i32 %2311, 0
  br i1 %2313, label %2314, label %2593

2314:                                             ; preds = %2299
  %2315 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2316 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2317 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2318 = mul nsw i32 %2317, %718
  %2319 = mul i32 %2316, 3
  %2320 = mul nsw i32 %730, 3
  %2321 = sext i32 %2320 to i64
  %2322 = add nsw i32 %2320, 1
  %2323 = sext i32 %2322 to i64
  %2324 = add nsw i32 %2320, 2
  %2325 = sext i32 %2324 to i64
  %2326 = zext i32 %2311 to i64
  br label %2327

2327:                                             ; preds = %2314, %2327
  %2328 = phi i64 [ 0, %2314 ], [ %2591, %2327 ]
  %2329 = phi double [ %2301, %2314 ], [ %2452, %2327 ]
  %2330 = phi double [ %2300, %2314 ], [ %2553, %2327 ]
  %2331 = phi <2 x double> [ %2302, %2314 ], [ %2444, %2327 ]
  %2332 = phi <2 x double> [ %2303, %2314 ], [ %2437, %2327 ]
  %2333 = phi <2 x double> [ %2304, %2314 ], [ %2546, %2327 ]
  %2334 = phi <2 x double> [ %2305, %2314 ], [ %2540, %2327 ]
  %2335 = phi <2 x double> [ %2306, %2314 ], [ %2450, %2327 ]
  %2336 = phi <2 x double> [ %2307, %2314 ], [ %2551, %2327 ]
  %2337 = phi <2 x double> [ %2308, %2314 ], [ %2446, %2327 ]
  %2338 = phi <2 x double> [ %2309, %2314 ], [ %2548, %2327 ]
  %2339 = shl nuw nsw i64 %2328, 1
  %2340 = getelementptr inbounds i32, ptr %146, i64 %2339
  %2341 = load i32, ptr %2340, align 4, !tbaa !5
  %2342 = ashr i32 %2341, 14
  %2343 = add nsw i32 %2342, %39
  %2344 = getelementptr inbounds i16, ptr %99, i64 %2328
  %2345 = load i16, ptr %2344, align 2, !tbaa !45
  %2346 = zext i16 %2345 to i64
  %2347 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2346
  %2348 = getelementptr inbounds double, ptr %145, i64 %2328
  %2349 = load double, ptr %2348, align 8, !tbaa !15
  %2350 = sext i32 %2343 to i64
  %2351 = getelementptr inbounds double, ptr %2315, i64 %2350
  %2352 = load double, ptr %2351, align 8, !tbaa !15
  %2353 = fsub double %2349, %2352
  %2354 = shl nsw i32 %2343, 4
  %2355 = sext i32 %2354 to i64
  %2356 = getelementptr inbounds double, ptr %31, i64 %2355
  %2357 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2346, i32 2
  %2358 = load i16, ptr %2357, align 4, !tbaa !82
  %2359 = sext i16 %2358 to i32
  %2360 = shl nsw i32 %2359, 1
  %2361 = sext i32 %2360 to i64
  %2362 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2028, i64 %2361
  %2363 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2362, i64 1
  %2364 = getelementptr inbounds %class.Vector, ptr %630, i64 %2346
  %2365 = getelementptr inbounds %class.Vector, ptr %634, i64 %2346
  %2366 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2346, i32 1
  %2367 = load float, ptr %2366, align 8, !tbaa !81
  %2368 = fpext float %2367 to double
  %2369 = fmul double %2019, %2368
  %2370 = load <2 x double>, ptr %2347, align 8, !tbaa !15
  %2371 = fsub <2 x double> %712, %2370
  %2372 = getelementptr inbounds %class.Vector, ptr %2347, i64 0, i32 2
  %2373 = load double, ptr %2372, align 8, !tbaa !50
  %2374 = fsub double %715, %2373
  %2375 = load double, ptr %2363, align 8, !tbaa !86
  %2376 = fmul double %33, %2375
  %2377 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2362, i64 1, i32 1
  %2378 = load double, ptr %2377, align 8, !tbaa !88
  %2379 = load double, ptr %2356, align 8, !tbaa !15
  %2380 = getelementptr inbounds double, ptr %2356, i64 2
  %2381 = load double, ptr %2380, align 8, !tbaa !15
  %2382 = fmul double %2378, %668
  %2383 = fmul double %2382, %2381
  %2384 = tail call double @llvm.fmuladd.f64(double %2376, double %2379, double %2383)
  %2385 = getelementptr inbounds double, ptr %2356, i64 1
  %2386 = load double, ptr %2385, align 8, !tbaa !15
  %2387 = getelementptr inbounds double, ptr %2356, i64 3
  %2388 = load double, ptr %2387, align 8, !tbaa !15
  %2389 = fmul double %2382, %2388
  %2390 = tail call double @llvm.fmuladd.f64(double %2376, double %2386, double %2389)
  %2391 = getelementptr inbounds double, ptr %2356, i64 4
  %2392 = load double, ptr %2391, align 8, !tbaa !15
  %2393 = getelementptr inbounds double, ptr %2356, i64 6
  %2394 = load double, ptr %2393, align 8, !tbaa !15
  %2395 = fmul double %2382, %2394
  %2396 = tail call double @llvm.fmuladd.f64(double %2376, double %2392, double %2395)
  %2397 = tail call double @llvm.fmuladd.f64(double %2353, double %2384, double %2390)
  %2398 = tail call double @llvm.fmuladd.f64(double %2397, double %2353, double %2396)
  %2399 = fmul double %2013, %2398
  %2400 = load <2 x double>, ptr %669, align 8, !tbaa !15
  %2401 = insertelement <2 x double> poison, double %2399, i64 0
  %2402 = shufflevector <2 x double> %2401, <2 x double> poison, <2 x i32> zeroinitializer
  %2403 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2402, <2 x double> %2371, <2 x double> %2400)
  store <2 x double> %2403, ptr %669, align 8, !tbaa !15
  %2404 = load double, ptr %670, align 8, !tbaa !15
  %2405 = tail call double @llvm.fmuladd.f64(double %2399, double %2374, double %2404)
  store double %2405, ptr %670, align 8, !tbaa !15
  %2406 = fmul double %674, %2369
  %2407 = getelementptr inbounds double, ptr %2356, i64 8
  %2408 = load double, ptr %2407, align 8, !tbaa !15
  %2409 = fmul double %2406, %2408
  %2410 = getelementptr inbounds double, ptr %2356, i64 9
  %2411 = load double, ptr %2410, align 8, !tbaa !15
  %2412 = fmul double %2406, %2411
  %2413 = getelementptr inbounds double, ptr %2356, i64 10
  %2414 = load double, ptr %2413, align 8, !tbaa !15
  %2415 = fmul double %2406, %2414
  %2416 = tail call double @llvm.fmuladd.f64(double %2353, double %2409, double %2412)
  %2417 = tail call double @llvm.fmuladd.f64(double %2416, double %2353, double %2415)
  %2418 = fmul double %2013, %2417
  %2419 = load double, ptr %671, align 8, !tbaa !15
  %2420 = extractelement <2 x double> %2371, i64 0
  %2421 = tail call double @llvm.fmuladd.f64(double %2418, double %2420, double %2419)
  store double %2421, ptr %671, align 8, !tbaa !15
  %2422 = load double, ptr %672, align 8, !tbaa !15
  %2423 = extractelement <2 x double> %2371, i64 1
  %2424 = tail call double @llvm.fmuladd.f64(double %2418, double %2423, double %2422)
  store double %2424, ptr %672, align 8, !tbaa !15
  %2425 = load double, ptr %673, align 8, !tbaa !15
  %2426 = tail call double @llvm.fmuladd.f64(double %2418, double %2374, double %2425)
  store double %2426, ptr %673, align 8, !tbaa !15
  %2427 = fadd double %2384, %2409
  %2428 = fadd double %2390, %2412
  %2429 = fadd double %2396, %2415
  %2430 = tail call double @llvm.fmuladd.f64(double %2353, double %2427, double %2428)
  %2431 = tail call double @llvm.fmuladd.f64(double %2430, double %2353, double %2429)
  %2432 = fmul double %2423, %2431
  %2433 = insertelement <2 x double> poison, double %2432, i64 0
  %2434 = shufflevector <2 x double> %2433, <2 x double> poison, <2 x i32> zeroinitializer
  %2435 = shufflevector <2 x double> %2371, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2436 = insertelement <2 x double> %2435, double %2374, i64 1
  %2437 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2434, <2 x double> %2436, <2 x double> %2332)
  %2438 = insertelement <2 x double> %2435, double %2374, i64 0
  %2439 = insertelement <2 x double> poison, double %2431, i64 0
  %2440 = shufflevector <2 x double> %2439, <2 x double> poison, <2 x i32> zeroinitializer
  %2441 = fmul <2 x double> %2438, %2440
  %2442 = shufflevector <2 x double> %2441, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2443 = shufflevector <2 x double> %2441, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2444 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2443, <2 x double> %2371, <2 x double> %2331)
  %2445 = insertelement <2 x double> %2442, double %2432, i64 1
  %2446 = fadd <2 x double> %2337, %2445
  %2447 = load <2 x double>, ptr %2364, align 8, !tbaa !15
  %2448 = fsub <2 x double> %2447, %2445
  store <2 x double> %2448, ptr %2364, align 8, !tbaa !15
  %2449 = shufflevector <2 x double> %2438, <2 x double> poison, <2 x i32> zeroinitializer
  %2450 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2441, <2 x double> %2449, <2 x double> %2335)
  %2451 = extractelement <2 x double> %2441, i64 0
  %2452 = fadd double %2329, %2451
  %2453 = getelementptr inbounds %class.Vector, ptr %630, i64 %2346, i32 2
  %2454 = load double, ptr %2453, align 8, !tbaa !89
  %2455 = fsub double %2454, %2451
  store double %2455, ptr %2453, align 8, !tbaa !89
  %2456 = load double, ptr %2372, align 8, !tbaa !50
  %2457 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2458 = fsub double %2456, %2457
  %2459 = fmul double %10, %2458
  %2460 = tail call double @llvm.floor.f64(double %2459)
  %2461 = fptosi double %2460 to i32
  %2462 = icmp slt i32 %2461, 0
  %2463 = select i1 %2462, i32 %2316, i32 0
  %2464 = icmp sgt i32 %2316, %2461
  %2465 = select i1 %2464, i32 0, i32 %2316
  %2466 = sub i32 %2461, %2465
  %2467 = add i32 %2466, %2463
  %2468 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2346, i32 3
  %2469 = load i8, ptr %2468, align 2, !tbaa !52
  %2470 = zext i8 %2469 to i32
  %2471 = shufflevector <2 x double> %2441, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2472 = fmul <2 x double> %2371, %2471
  %2473 = extractelement <2 x double> %2472, i64 0
  %2474 = fmul double %2423, %2432
  %2475 = fmul double %2374, %2451
  %2476 = add nsw i32 %2318, %2470
  %2477 = mul i32 %2319, %2476
  %2478 = sext i32 %2477 to i64
  %2479 = getelementptr inbounds double, ptr %8, i64 %2478
  %2480 = fmul double %2473, 5.000000e-01
  %2481 = fmul double %2474, 5.000000e-01
  %2482 = fmul double %2475, 5.000000e-01
  %2483 = getelementptr inbounds double, ptr %2479, i64 %2321
  %2484 = load double, ptr %2483, align 8, !tbaa !15
  %2485 = fadd double %2480, %2484
  store double %2485, ptr %2483, align 8, !tbaa !15
  %2486 = getelementptr inbounds double, ptr %2479, i64 %2323
  %2487 = load double, ptr %2486, align 8, !tbaa !15
  %2488 = fadd double %2481, %2487
  store double %2488, ptr %2486, align 8, !tbaa !15
  %2489 = getelementptr inbounds double, ptr %2479, i64 %2325
  %2490 = load double, ptr %2489, align 8, !tbaa !15
  %2491 = fadd double %2482, %2490
  store double %2491, ptr %2489, align 8, !tbaa !15
  %2492 = mul nsw i32 %2467, 3
  %2493 = sext i32 %2492 to i64
  %2494 = getelementptr inbounds double, ptr %2479, i64 %2493
  %2495 = load double, ptr %2494, align 8, !tbaa !15
  %2496 = fadd double %2480, %2495
  store double %2496, ptr %2494, align 8, !tbaa !15
  %2497 = add nsw i32 %2492, 1
  %2498 = sext i32 %2497 to i64
  %2499 = getelementptr inbounds double, ptr %2479, i64 %2498
  %2500 = load double, ptr %2499, align 8, !tbaa !15
  %2501 = fadd double %2481, %2500
  store double %2501, ptr %2499, align 8, !tbaa !15
  %2502 = add nsw i32 %2492, 2
  %2503 = sext i32 %2502 to i64
  %2504 = getelementptr inbounds double, ptr %2479, i64 %2503
  %2505 = load double, ptr %2504, align 8, !tbaa !15
  %2506 = fadd double %2482, %2505
  store double %2506, ptr %2504, align 8, !tbaa !15
  %2507 = shl nsw i32 %2343, 2
  %2508 = sext i32 %2507 to i64
  %2509 = getelementptr inbounds double, ptr %32, i64 %2508
  %2510 = getelementptr inbounds double, ptr %2356, i64 12
  %2511 = load double, ptr %2510, align 8, !tbaa !15
  %2512 = getelementptr inbounds double, ptr %2356, i64 13
  %2513 = load double, ptr %2512, align 8, !tbaa !15
  %2514 = getelementptr inbounds double, ptr %2356, i64 14
  %2515 = load double, ptr %2514, align 8, !tbaa !15
  %2516 = getelementptr inbounds double, ptr %2509, i64 1
  %2517 = load double, ptr %2516, align 8, !tbaa !15
  %2518 = tail call double @llvm.fmuladd.f64(double %675, double %2517, double %2515)
  %2519 = getelementptr inbounds double, ptr %2509, i64 2
  %2520 = load double, ptr %2519, align 8, !tbaa !15
  %2521 = tail call double @llvm.fmuladd.f64(double %676, double %2520, double %2513)
  %2522 = getelementptr inbounds double, ptr %2509, i64 3
  %2523 = load double, ptr %2522, align 8, !tbaa !15
  %2524 = tail call double @llvm.fmuladd.f64(double %677, double %2523, double %2511)
  %2525 = fmul double %2369, %2524
  %2526 = fmul double %2369, %2521
  %2527 = fmul double %2369, %2518
  %2528 = tail call double @llvm.fmuladd.f64(double %2353, double %2525, double %2526)
  %2529 = tail call double @llvm.fmuladd.f64(double %2528, double %2353, double %2527)
  %2530 = fmul double %2013, %2529
  %2531 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2532 = insertelement <2 x double> poison, double %2530, i64 0
  %2533 = shufflevector <2 x double> %2532, <2 x double> poison, <2 x i32> zeroinitializer
  %2534 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2533, <2 x double> %2371, <2 x double> %2531)
  store <2 x double> %2534, ptr %671, align 8, !tbaa !15
  %2535 = load double, ptr %673, align 8, !tbaa !15
  %2536 = tail call double @llvm.fmuladd.f64(double %2530, double %2374, double %2535)
  store double %2536, ptr %673, align 8, !tbaa !15
  %2537 = fmul double %2423, %2529
  %2538 = insertelement <2 x double> poison, double %2537, i64 0
  %2539 = shufflevector <2 x double> %2538, <2 x double> poison, <2 x i32> zeroinitializer
  %2540 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2539, <2 x double> %2436, <2 x double> %2334)
  %2541 = insertelement <2 x double> poison, double %2529, i64 0
  %2542 = shufflevector <2 x double> %2541, <2 x double> poison, <2 x i32> zeroinitializer
  %2543 = fmul <2 x double> %2438, %2542
  %2544 = shufflevector <2 x double> %2543, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2545 = shufflevector <2 x double> %2543, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2546 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2545, <2 x double> %2371, <2 x double> %2333)
  %2547 = insertelement <2 x double> %2544, double %2537, i64 1
  %2548 = fadd <2 x double> %2338, %2547
  %2549 = load <2 x double>, ptr %2365, align 8, !tbaa !15
  %2550 = fsub <2 x double> %2549, %2547
  store <2 x double> %2550, ptr %2365, align 8, !tbaa !15
  %2551 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2543, <2 x double> %2449, <2 x double> %2336)
  %2552 = extractelement <2 x double> %2543, i64 0
  %2553 = fadd double %2330, %2552
  %2554 = getelementptr inbounds %class.Vector, ptr %634, i64 %2346, i32 2
  %2555 = load double, ptr %2554, align 8, !tbaa !89
  %2556 = fsub double %2555, %2552
  store double %2556, ptr %2554, align 8, !tbaa !89
  %2557 = load double, ptr %2372, align 8, !tbaa !50
  %2558 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2559 = fsub double %2557, %2558
  %2560 = fmul double %10, %2559
  %2561 = tail call double @llvm.floor.f64(double %2560)
  %2562 = fptosi double %2561 to i32
  %2563 = icmp slt i32 %2562, 0
  %2564 = select i1 %2563, i32 %2316, i32 0
  %2565 = icmp sgt i32 %2316, %2562
  %2566 = select i1 %2565, i32 0, i32 %2316
  %2567 = sub i32 %2562, %2566
  %2568 = add i32 %2567, %2564
  %2569 = fmul double %2374, %2552
  %2570 = fmul double %2569, 5.000000e-01
  %2571 = load double, ptr %2483, align 8, !tbaa !15
  %2572 = load double, ptr %2486, align 8, !tbaa !15
  %2573 = load double, ptr %2489, align 8, !tbaa !15
  %2574 = fadd double %2570, %2573
  store double %2574, ptr %2489, align 8, !tbaa !15
  %2575 = mul nsw i32 %2568, 3
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds double, ptr %2479, i64 %2576
  %2578 = fmul <2 x double> %2371, %2547
  %2579 = fmul <2 x double> %2578, <double 5.000000e-01, double 5.000000e-01>
  %2580 = extractelement <2 x double> %2579, i64 0
  %2581 = fadd double %2580, %2571
  store double %2581, ptr %2483, align 8, !tbaa !15
  %2582 = extractelement <2 x double> %2579, i64 1
  %2583 = fadd double %2582, %2572
  store double %2583, ptr %2486, align 8, !tbaa !15
  %2584 = load <2 x double>, ptr %2577, align 8, !tbaa !15
  %2585 = fadd <2 x double> %2579, %2584
  store <2 x double> %2585, ptr %2577, align 8, !tbaa !15
  %2586 = add nsw i32 %2575, 2
  %2587 = sext i32 %2586 to i64
  %2588 = getelementptr inbounds double, ptr %2479, i64 %2587
  %2589 = load double, ptr %2588, align 8, !tbaa !15
  %2590 = fadd double %2570, %2589
  store double %2590, ptr %2588, align 8, !tbaa !15
  %2591 = add nuw nsw i64 %2328, 1
  %2592 = icmp eq i64 %2591, %2326
  br i1 %2592, label %2593, label %2327

2593:                                             ; preds = %2327, %2299
  %2594 = phi double [ %2300, %2299 ], [ %2553, %2327 ]
  %2595 = phi double [ %2301, %2299 ], [ %2452, %2327 ]
  %2596 = phi <2 x double> [ %2302, %2299 ], [ %2444, %2327 ]
  %2597 = phi <2 x double> [ %2303, %2299 ], [ %2437, %2327 ]
  %2598 = phi <2 x double> [ %2304, %2299 ], [ %2546, %2327 ]
  %2599 = phi <2 x double> [ %2305, %2299 ], [ %2540, %2327 ]
  %2600 = phi <2 x double> [ %2306, %2299 ], [ %2450, %2327 ]
  %2601 = phi <2 x double> [ %2307, %2299 ], [ %2551, %2327 ]
  %2602 = phi <2 x double> [ %2308, %2299 ], [ %2446, %2327 ]
  %2603 = phi <2 x double> [ %2309, %2299 ], [ %2548, %2327 ]
  %2604 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2605 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2604, double noundef %2030, double noundef %2031, double noundef %715, ptr noundef %46, ptr noundef %1996, i32 noundef %1995, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2606 = add nsw i32 %2312, %2605
  %2607 = icmp sgt i32 %2605, 0
  br i1 %2607, label %2608, label %2764

2608:                                             ; preds = %2593
  %2609 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2610 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2611 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2612 = mul nsw i32 %2611, %718
  %2613 = mul i32 %2610, 3
  %2614 = mul nsw i32 %730, 3
  %2615 = sext i32 %2614 to i64
  %2616 = add nsw i32 %2614, 1
  %2617 = sext i32 %2616 to i64
  %2618 = add nsw i32 %2614, 2
  %2619 = sext i32 %2618 to i64
  %2620 = zext i32 %2605 to i64
  br label %2621

2621:                                             ; preds = %2608, %2621
  %2622 = phi i64 [ 0, %2608 ], [ %2762, %2621 ]
  %2623 = phi double [ %2594, %2608 ], [ %2707, %2621 ]
  %2624 = phi <2 x double> [ %2598, %2608 ], [ %2699, %2621 ]
  %2625 = phi <2 x double> [ %2599, %2608 ], [ %2692, %2621 ]
  %2626 = phi <2 x double> [ %2601, %2608 ], [ %2705, %2621 ]
  %2627 = phi <2 x double> [ %2603, %2608 ], [ %2701, %2621 ]
  %2628 = shl nuw nsw i64 %2622, 1
  %2629 = getelementptr inbounds i32, ptr %146, i64 %2628
  %2630 = load i32, ptr %2629, align 4, !tbaa !5
  %2631 = ashr i32 %2630, 14
  %2632 = add nsw i32 %2631, %39
  %2633 = getelementptr inbounds i16, ptr %99, i64 %2622
  %2634 = load i16, ptr %2633, align 2, !tbaa !45
  %2635 = zext i16 %2634 to i64
  %2636 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2635
  %2637 = getelementptr inbounds double, ptr %145, i64 %2622
  %2638 = load double, ptr %2637, align 8, !tbaa !15
  %2639 = sext i32 %2632 to i64
  %2640 = getelementptr inbounds double, ptr %2609, i64 %2639
  %2641 = load double, ptr %2640, align 8, !tbaa !15
  %2642 = fsub double %2638, %2641
  %2643 = shl nsw i32 %2632, 4
  %2644 = sext i32 %2643 to i64
  %2645 = getelementptr inbounds double, ptr %31, i64 %2644
  %2646 = getelementptr inbounds %class.Vector, ptr %634, i64 %2635
  %2647 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2635, i32 1
  %2648 = load float, ptr %2647, align 8, !tbaa !81
  %2649 = fpext float %2648 to double
  %2650 = fmul double %2019, %2649
  %2651 = load <2 x double>, ptr %2636, align 8, !tbaa !15
  %2652 = fsub <2 x double> %712, %2651
  %2653 = getelementptr inbounds %class.Vector, ptr %2636, i64 0, i32 2
  %2654 = load double, ptr %2653, align 8, !tbaa !50
  %2655 = fsub double %715, %2654
  %2656 = shl nsw i32 %2632, 2
  %2657 = sext i32 %2656 to i64
  %2658 = getelementptr inbounds double, ptr %32, i64 %2657
  %2659 = getelementptr inbounds double, ptr %2645, i64 12
  %2660 = load double, ptr %2659, align 8, !tbaa !15
  %2661 = getelementptr inbounds double, ptr %2645, i64 13
  %2662 = load double, ptr %2661, align 8, !tbaa !15
  %2663 = getelementptr inbounds double, ptr %2645, i64 14
  %2664 = load double, ptr %2663, align 8, !tbaa !15
  %2665 = getelementptr inbounds double, ptr %2658, i64 1
  %2666 = load double, ptr %2665, align 8, !tbaa !15
  %2667 = tail call double @llvm.fmuladd.f64(double %2666, double 2.000000e+00, double %2664)
  %2668 = getelementptr inbounds double, ptr %2658, i64 2
  %2669 = load double, ptr %2668, align 8, !tbaa !15
  %2670 = tail call double @llvm.fmuladd.f64(double %2669, double 4.000000e+00, double %2662)
  %2671 = getelementptr inbounds double, ptr %2658, i64 3
  %2672 = load double, ptr %2671, align 8, !tbaa !15
  %2673 = tail call double @llvm.fmuladd.f64(double %2672, double 6.000000e+00, double %2660)
  %2674 = fmul double %2650, %2673
  %2675 = fmul double %2650, %2670
  %2676 = fmul double %2650, %2667
  %2677 = tail call double @llvm.fmuladd.f64(double %2642, double %2674, double %2675)
  %2678 = tail call double @llvm.fmuladd.f64(double %2677, double %2642, double %2676)
  %2679 = fmul double %2013, %2678
  %2680 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2681 = insertelement <2 x double> poison, double %2679, i64 0
  %2682 = shufflevector <2 x double> %2681, <2 x double> poison, <2 x i32> zeroinitializer
  %2683 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2682, <2 x double> %2652, <2 x double> %2680)
  store <2 x double> %2683, ptr %671, align 8, !tbaa !15
  %2684 = load double, ptr %673, align 8, !tbaa !15
  %2685 = tail call double @llvm.fmuladd.f64(double %2679, double %2655, double %2684)
  store double %2685, ptr %673, align 8, !tbaa !15
  %2686 = extractelement <2 x double> %2652, i64 1
  %2687 = fmul double %2686, %2678
  %2688 = insertelement <2 x double> poison, double %2687, i64 0
  %2689 = shufflevector <2 x double> %2688, <2 x double> poison, <2 x i32> zeroinitializer
  %2690 = shufflevector <2 x double> %2652, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2691 = insertelement <2 x double> %2690, double %2655, i64 1
  %2692 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2689, <2 x double> %2691, <2 x double> %2625)
  %2693 = insertelement <2 x double> %2690, double %2655, i64 0
  %2694 = insertelement <2 x double> poison, double %2678, i64 0
  %2695 = shufflevector <2 x double> %2694, <2 x double> poison, <2 x i32> zeroinitializer
  %2696 = fmul <2 x double> %2693, %2695
  %2697 = shufflevector <2 x double> %2696, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2698 = shufflevector <2 x double> %2696, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2699 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2698, <2 x double> %2652, <2 x double> %2624)
  %2700 = insertelement <2 x double> %2697, double %2687, i64 1
  %2701 = fadd <2 x double> %2627, %2700
  %2702 = load <2 x double>, ptr %2646, align 8, !tbaa !15
  %2703 = fsub <2 x double> %2702, %2700
  store <2 x double> %2703, ptr %2646, align 8, !tbaa !15
  %2704 = shufflevector <2 x double> %2693, <2 x double> poison, <2 x i32> zeroinitializer
  %2705 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2696, <2 x double> %2704, <2 x double> %2626)
  %2706 = extractelement <2 x double> %2696, i64 0
  %2707 = fadd double %2623, %2706
  %2708 = getelementptr inbounds %class.Vector, ptr %634, i64 %2635, i32 2
  %2709 = load double, ptr %2708, align 8, !tbaa !89
  %2710 = fsub double %2709, %2706
  store double %2710, ptr %2708, align 8, !tbaa !89
  %2711 = load double, ptr %2653, align 8, !tbaa !50
  %2712 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2713 = fsub double %2711, %2712
  %2714 = fmul double %10, %2713
  %2715 = tail call double @llvm.floor.f64(double %2714)
  %2716 = fptosi double %2715 to i32
  %2717 = icmp slt i32 %2716, 0
  %2718 = select i1 %2717, i32 %2610, i32 0
  %2719 = icmp sgt i32 %2610, %2716
  %2720 = select i1 %2719, i32 0, i32 %2610
  %2721 = sub i32 %2716, %2720
  %2722 = add i32 %2721, %2718
  %2723 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2635, i32 3
  %2724 = load i8, ptr %2723, align 2, !tbaa !52
  %2725 = zext i8 %2724 to i32
  %2726 = shufflevector <2 x double> %2696, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2727 = fmul <2 x double> %2652, %2726
  %2728 = extractelement <2 x double> %2727, i64 0
  %2729 = fmul double %2686, %2687
  %2730 = fmul double %2655, %2706
  %2731 = add nsw i32 %2612, %2725
  %2732 = mul i32 %2613, %2731
  %2733 = sext i32 %2732 to i64
  %2734 = getelementptr inbounds double, ptr %8, i64 %2733
  %2735 = fmul double %2728, 5.000000e-01
  %2736 = fmul double %2729, 5.000000e-01
  %2737 = fmul double %2730, 5.000000e-01
  %2738 = getelementptr inbounds double, ptr %2734, i64 %2615
  %2739 = load double, ptr %2738, align 8, !tbaa !15
  %2740 = fadd double %2735, %2739
  store double %2740, ptr %2738, align 8, !tbaa !15
  %2741 = getelementptr inbounds double, ptr %2734, i64 %2617
  %2742 = load double, ptr %2741, align 8, !tbaa !15
  %2743 = fadd double %2736, %2742
  store double %2743, ptr %2741, align 8, !tbaa !15
  %2744 = getelementptr inbounds double, ptr %2734, i64 %2619
  %2745 = load double, ptr %2744, align 8, !tbaa !15
  %2746 = fadd double %2737, %2745
  store double %2746, ptr %2744, align 8, !tbaa !15
  %2747 = mul nsw i32 %2722, 3
  %2748 = sext i32 %2747 to i64
  %2749 = getelementptr inbounds double, ptr %2734, i64 %2748
  %2750 = load double, ptr %2749, align 8, !tbaa !15
  %2751 = fadd double %2735, %2750
  store double %2751, ptr %2749, align 8, !tbaa !15
  %2752 = add nsw i32 %2747, 1
  %2753 = sext i32 %2752 to i64
  %2754 = getelementptr inbounds double, ptr %2734, i64 %2753
  %2755 = load double, ptr %2754, align 8, !tbaa !15
  %2756 = fadd double %2736, %2755
  store double %2756, ptr %2754, align 8, !tbaa !15
  %2757 = add nsw i32 %2747, 2
  %2758 = sext i32 %2757 to i64
  %2759 = getelementptr inbounds double, ptr %2734, i64 %2758
  %2760 = load double, ptr %2759, align 8, !tbaa !15
  %2761 = fadd double %2737, %2760
  store double %2761, ptr %2759, align 8, !tbaa !15
  %2762 = add nuw nsw i64 %2622, 1
  %2763 = icmp eq i64 %2762, %2620
  br i1 %2763, label %2764, label %2621

2764:                                             ; preds = %2621, %2593
  %2765 = phi double [ %2594, %2593 ], [ %2707, %2621 ]
  %2766 = phi <2 x double> [ %2598, %2593 ], [ %2699, %2621 ]
  %2767 = phi <2 x double> [ %2599, %2593 ], [ %2692, %2621 ]
  %2768 = phi <2 x double> [ %2601, %2593 ], [ %2705, %2621 ]
  %2769 = phi <2 x double> [ %2603, %2593 ], [ %2701, %2621 ]
  %2770 = getelementptr inbounds %class.Vector, ptr %628, i64 %694
  %2771 = load <2 x double>, ptr %2770, align 8, !tbaa !15
  %2772 = fadd <2 x double> %2602, %2771
  store <2 x double> %2772, ptr %2770, align 8, !tbaa !15
  %2773 = getelementptr inbounds %class.Vector, ptr %628, i64 %694, i32 2
  %2774 = load double, ptr %2773, align 8, !tbaa !89
  %2775 = fadd double %2595, %2774
  store double %2775, ptr %2773, align 8, !tbaa !89
  %2776 = getelementptr inbounds %class.Vector, ptr %632, i64 %694
  %2777 = load <2 x double>, ptr %2776, align 8, !tbaa !15
  %2778 = fadd <2 x double> %2769, %2777
  store <2 x double> %2778, ptr %2776, align 8, !tbaa !15
  %2779 = getelementptr inbounds %class.Vector, ptr %632, i64 %694, i32 2
  %2780 = load double, ptr %2779, align 8, !tbaa !89
  %2781 = fadd double %2765, %2780
  store double %2781, ptr %2779, align 8, !tbaa !89
  br i1 %149, label %2784, label %2782

2782:                                             ; preds = %2764
  %2783 = add nsw i32 %682, 1
  br label %2792

2784:                                             ; preds = %2764
  %2785 = load ptr, ptr %12, align 8, !tbaa !47
  %2786 = load i32, ptr %17, align 8, !tbaa !19
  %2787 = add nsw i32 %2786, 1
  store i32 %2787, ptr %17, align 8, !tbaa !19
  %2788 = sext i32 %2786 to i64
  %2789 = getelementptr inbounds i16, ptr %2785, i64 %2788
  %2790 = load i16, ptr %2789, align 2, !tbaa !45
  %2791 = zext i16 %2790 to i32
  br label %2792

2792:                                             ; preds = %1265, %1224, %1153, %1604, %2784, %2782, %706
  %2793 = phi i32 [ %707, %706 ], [ %710, %2784 ], [ %710, %2782 ], [ %710, %1604 ], [ %710, %1153 ], [ %710, %1224 ], [ %710, %1265 ]
  %2794 = phi i32 [ %686, %706 ], [ %1999, %2784 ], [ %1999, %2782 ], [ %1167, %1604 ], [ 0, %1153 ], [ %1167, %1224 ], [ %1167, %1265 ]
  %2795 = phi ptr [ %685, %706 ], [ %2000, %2784 ], [ %2000, %2782 ], [ %976, %1604 ], [ %976, %1153 ], [ %976, %1224 ], [ %976, %1265 ]
  %2796 = phi ptr [ %684, %706 ], [ %2001, %2784 ], [ %2001, %2782 ], [ %977, %1604 ], [ %977, %1153 ], [ %977, %1224 ], [ %977, %1265 ]
  %2797 = phi ptr [ %683, %706 ], [ %2002, %2784 ], [ %2002, %2782 ], [ %978, %1604 ], [ %978, %1153 ], [ %978, %1224 ], [ %978, %1265 ]
  %2798 = phi i32 [ %708, %706 ], [ %2791, %2784 ], [ %2783, %2782 ], [ %1605, %1604 ], [ %1157, %1153 ], [ %1225, %1224 ], [ %1266, %1265 ]
  %2799 = phi i32 [ %681, %706 ], [ %2606, %2784 ], [ %2606, %2782 ], [ %681, %1604 ], [ %681, %1153 ], [ %681, %1224 ], [ %681, %1265 ]
  %2800 = phi <2 x double> [ %688, %706 ], [ %2596, %2784 ], [ %2596, %2782 ], [ %688, %1604 ], [ %688, %1153 ], [ %688, %1224 ], [ %688, %1265 ]
  %2801 = phi <2 x double> [ %689, %706 ], [ %2597, %2784 ], [ %2597, %2782 ], [ %689, %1604 ], [ %689, %1153 ], [ %689, %1224 ], [ %689, %1265 ]
  %2802 = phi <2 x double> [ %690, %706 ], [ %2766, %2784 ], [ %2766, %2782 ], [ %690, %1604 ], [ %690, %1153 ], [ %690, %1224 ], [ %690, %1265 ]
  %2803 = phi <2 x double> [ %691, %706 ], [ %2767, %2784 ], [ %2767, %2782 ], [ %691, %1604 ], [ %691, %1153 ], [ %691, %1224 ], [ %691, %1265 ]
  %2804 = phi <2 x double> [ %692, %706 ], [ %2600, %2784 ], [ %2600, %2782 ], [ %692, %1604 ], [ %692, %1153 ], [ %692, %1224 ], [ %692, %1265 ]
  %2805 = phi <2 x double> [ %693, %706 ], [ %2768, %2784 ], [ %2768, %2782 ], [ %693, %1604 ], [ %693, %1153 ], [ %693, %1224 ], [ %693, %1265 ]
  %2806 = icmp slt i32 %2798, %41
  br i1 %2806, label %680, label %2807

2807:                                             ; preds = %2792, %649
  %2808 = phi ptr [ null, %649 ], [ %2797, %2792 ]
  %2809 = phi i32 [ %651, %649 ], [ %2798, %2792 ]
  %2810 = phi i32 [ 0, %649 ], [ %2799, %2792 ]
  %2811 = phi <2 x double> [ zeroinitializer, %649 ], [ %2800, %2792 ]
  %2812 = phi <2 x double> [ zeroinitializer, %649 ], [ %2801, %2792 ]
  %2813 = phi <2 x double> [ zeroinitializer, %649 ], [ %2802, %2792 ]
  %2814 = phi <2 x double> [ zeroinitializer, %649 ], [ %2803, %2792 ]
  %2815 = phi <2 x double> [ zeroinitializer, %649 ], [ %2804, %2792 ]
  %2816 = phi <2 x double> [ zeroinitializer, %649 ], [ %2805, %2792 ]
  br i1 %147, label %2824, label %2817

2817:                                             ; preds = %2807
  %2818 = trunc i32 %2809 to i16
  %2819 = load ptr, ptr %12, align 8, !tbaa !47
  %2820 = load i32, ptr %17, align 8, !tbaa !19
  %2821 = add nsw i32 %2820, -1
  %2822 = sext i32 %2821 to i64
  %2823 = getelementptr inbounds i16, ptr %2819, i64 %2822
  store i16 %2818, ptr %2823, align 2, !tbaa !45
  br label %2824

2824:                                             ; preds = %2817, %2807
  %2825 = sitofp i32 %2810 to double
  %2826 = getelementptr inbounds double, ptr %6, i64 22
  %2827 = load double, ptr %2826, align 8, !tbaa !15
  %2828 = fadd double %2827, %2825
  store double %2828, ptr %2826, align 8, !tbaa !15
  %2829 = getelementptr inbounds double, ptr %6, i64 3
  %2830 = load <4 x double>, ptr %2829, align 8, !tbaa !15
  %2831 = shufflevector <2 x double> %2811, <2 x double> %2815, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2832 = shufflevector <4 x double> %2831, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2833 = fadd <4 x double> %2832, %2830
  store <4 x double> %2833, ptr %2829, align 8, !tbaa !15
  %2834 = getelementptr inbounds double, ptr %6, i64 7
  %2835 = load <4 x double>, ptr %2834, align 8, !tbaa !15
  %2836 = shufflevector <2 x double> %2812, <2 x double> %2815, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2837 = shufflevector <4 x double> %2836, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2838 = fadd <4 x double> %2837, %2835
  store <4 x double> %2838, ptr %2834, align 8, !tbaa !15
  %2839 = getelementptr inbounds double, ptr %6, i64 11
  %2840 = load double, ptr %2839, align 8, !tbaa !15
  %2841 = extractelement <2 x double> %2815, i64 0
  %2842 = fadd double %2841, %2840
  store double %2842, ptr %2839, align 8, !tbaa !15
  %2843 = getelementptr inbounds double, ptr %6, i64 12
  %2844 = load <4 x double>, ptr %2843, align 8, !tbaa !15
  %2845 = shufflevector <2 x double> %2813, <2 x double> %2816, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2846 = shufflevector <4 x double> %2845, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2847 = fadd <4 x double> %2846, %2844
  store <4 x double> %2847, ptr %2843, align 8, !tbaa !15
  %2848 = getelementptr inbounds double, ptr %6, i64 16
  %2849 = load <4 x double>, ptr %2848, align 8, !tbaa !15
  %2850 = shufflevector <2 x double> %2814, <2 x double> %2816, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2851 = shufflevector <4 x double> %2850, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2852 = fadd <4 x double> %2851, %2849
  store <4 x double> %2852, ptr %2848, align 8, !tbaa !15
  %2853 = getelementptr inbounds double, ptr %6, i64 20
  %2854 = load double, ptr %2853, align 8, !tbaa !15
  %2855 = extractelement <2 x double> %2816, i64 0
  %2856 = fadd double %2855, %2854
  store double %2856, ptr %2853, align 8, !tbaa !15
  %2857 = icmp eq ptr %2808, null
  br i1 %2857, label %2859, label %2858

2858:                                             ; preds = %2824
  tail call void @_ZdaPv(ptr noundef nonnull %2808) #10
  br label %2859

2859:                                             ; preds = %2824, %2858, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil32calc_pair_energy_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2971

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %35 = fsub double 1.000000e+00, %34
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %37 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %38 = shl i32 %37, 6
  %39 = add i32 %38, -65472
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !5
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !5
  %44 = load ptr, ptr %0, align 8, !tbaa !24
  %45 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !24
  %51 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %52 = load ptr, ptr %51, align 8, !tbaa !25
  %53 = add nsw i32 %43, 5
  %54 = getelementptr inbounds %class.ResizeArray, ptr %52, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !26
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 2
  %57 = load i32, ptr %56, align 8, !tbaa !28
  %58 = icmp slt i32 %57, %53
  br i1 %58, label %59, label %97

59:                                               ; preds = %4
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 3
  %61 = load i32, ptr %60, align 4, !tbaa !31
  %62 = icmp slt i32 %61, %53
  br i1 %62, label %63, label %97

63:                                               ; preds = %59
  %64 = sitofp i32 %61 to float
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 5
  %66 = load float, ptr %65, align 4, !tbaa !32
  %67 = fmul float %66, %64
  %68 = fptosi float %67 to i32
  %69 = tail call i32 @llvm.smax.i32(i32 %68, i32 %53)
  %70 = sub nsw i32 %69, %61
  %71 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 6
  %72 = load i32, ptr %71, align 8, !tbaa !33
  %73 = icmp slt i32 %70, %72
  %74 = add nsw i32 %72, %61
  %75 = select i1 %73, i32 %74, i32 %69
  %76 = sext i32 %75 to i64
  %77 = shl nsw i64 %76, 1
  %78 = add nsw i64 %77, 31
  %79 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %78) #9
  %80 = getelementptr inbounds i8, ptr %79, i64 31
  %81 = ptrtoint ptr %80 to i64
  %82 = and i64 %81, 31
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds i8, ptr %80, i64 %83
  %85 = load ptr, ptr %55, align 8, !tbaa !34
  %86 = sext i32 %57 to i64
  %87 = shl nsw i64 %86, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %84, ptr align 1 %85, i64 %87, i1 false)
  %88 = icmp eq i32 %61, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %63
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !35
  %92 = icmp eq ptr %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %89
  tail call void @_ZdaPv(ptr noundef nonnull %91) #10
  br label %94

94:                                               ; preds = %93, %89, %63
  %95 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  store ptr %79, ptr %95, align 8, !tbaa !35
  store ptr %84, ptr %55, align 8, !tbaa !34
  store i32 %75, ptr %60, align 4, !tbaa !31
  %96 = load ptr, ptr %54, align 8, !tbaa !26
  br label %97

97:                                               ; preds = %4, %59, %94
  %98 = phi ptr [ %55, %4 ], [ %55, %59 ], [ %96, %94 ]
  store i32 %53, ptr %56, align 8, !tbaa !28
  %99 = load ptr, ptr %98, align 8, !tbaa !34
  %100 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 1, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !36
  %102 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 2
  %103 = load i32, ptr %102, align 8, !tbaa !38
  %104 = icmp slt i32 %103, %53
  br i1 %104, label %105, label %143

105:                                              ; preds = %97
  %106 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 3
  %107 = load i32, ptr %106, align 4, !tbaa !40
  %108 = icmp slt i32 %107, %53
  br i1 %108, label %109, label %143

109:                                              ; preds = %105
  %110 = sitofp i32 %107 to float
  %111 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 5
  %112 = load float, ptr %111, align 4, !tbaa !41
  %113 = fmul float %112, %110
  %114 = fptosi float %113 to i32
  %115 = tail call i32 @llvm.smax.i32(i32 %114, i32 %53)
  %116 = sub nsw i32 %115, %107
  %117 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 6
  %118 = load i32, ptr %117, align 8, !tbaa !42
  %119 = icmp slt i32 %116, %118
  %120 = add nsw i32 %118, %107
  %121 = select i1 %119, i32 %120, i32 %115
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 3
  %124 = add nsw i64 %123, 31
  %125 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %124) #9
  %126 = getelementptr inbounds i8, ptr %125, i64 31
  %127 = ptrtoint ptr %126 to i64
  %128 = and i64 %127, 31
  %129 = sub nsw i64 0, %128
  %130 = getelementptr inbounds i8, ptr %126, i64 %129
  %131 = load ptr, ptr %101, align 8, !tbaa !43
  %132 = sext i32 %103 to i64
  %133 = shl nsw i64 %132, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %130, ptr align 1 %131, i64 %133, i1 false)
  %134 = icmp eq i32 %107, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %109
  %136 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !44
  %138 = icmp eq ptr %137, null
  br i1 %138, label %140, label %139

139:                                              ; preds = %135
  tail call void @_ZdaPv(ptr noundef nonnull %137) #10
  br label %140

140:                                              ; preds = %139, %135, %109
  %141 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  store ptr %125, ptr %141, align 8, !tbaa !44
  store ptr %130, ptr %101, align 8, !tbaa !43
  store i32 %121, ptr %106, align 4, !tbaa !40
  %142 = load ptr, ptr %100, align 8, !tbaa !36
  br label %143

143:                                              ; preds = %97, %105, %140
  %144 = phi ptr [ %101, %97 ], [ %101, %105 ], [ %142, %140 ]
  store i32 %53, ptr %102, align 8, !tbaa !38
  %145 = load ptr, ptr %144, align 8, !tbaa !43
  %146 = getelementptr inbounds i32, ptr %145, i64 1
  %147 = icmp eq i32 %14, 0
  %148 = icmp ne i32 %16, 0
  %149 = select i1 %147, i1 %148, i1 false
  %150 = select i1 %149, i32 0, i32 %53
  %151 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 2, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !26
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 2
  %154 = load i32, ptr %153, align 8, !tbaa !28
  %155 = icmp slt i32 %154, %150
  br i1 %155, label %156, label %194

156:                                              ; preds = %143
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 3
  %158 = load i32, ptr %157, align 4, !tbaa !31
  %159 = icmp slt i32 %158, %150
  br i1 %159, label %160, label %194

160:                                              ; preds = %156
  %161 = sitofp i32 %158 to float
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 5
  %163 = load float, ptr %162, align 4, !tbaa !32
  %164 = fmul float %163, %161
  %165 = fptosi float %164 to i32
  %166 = tail call i32 @llvm.smax.i32(i32 %165, i32 %150)
  %167 = sub nsw i32 %166, %158
  %168 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 6
  %169 = load i32, ptr %168, align 8, !tbaa !33
  %170 = icmp slt i32 %167, %169
  %171 = add nsw i32 %169, %158
  %172 = select i1 %170, i32 %171, i32 %166
  %173 = sext i32 %172 to i64
  %174 = shl nsw i64 %173, 1
  %175 = add nsw i64 %174, 31
  %176 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %175) #9
  %177 = getelementptr inbounds i8, ptr %176, i64 31
  %178 = ptrtoint ptr %177 to i64
  %179 = and i64 %178, 31
  %180 = sub nsw i64 0, %179
  %181 = getelementptr inbounds i8, ptr %177, i64 %180
  %182 = load ptr, ptr %152, align 8, !tbaa !34
  %183 = sext i32 %154 to i64
  %184 = shl nsw i64 %183, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %181, ptr align 1 %182, i64 %184, i1 false)
  %185 = icmp eq i32 %158, 0
  br i1 %185, label %191, label %186

186:                                              ; preds = %160
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  %188 = load ptr, ptr %187, align 8, !tbaa !35
  %189 = icmp eq ptr %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZdaPv(ptr noundef nonnull %188) #10
  br label %191

191:                                              ; preds = %190, %186, %160
  %192 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  store ptr %176, ptr %192, align 8, !tbaa !35
  store ptr %181, ptr %152, align 8, !tbaa !34
  store i32 %172, ptr %157, align 4, !tbaa !31
  %193 = load ptr, ptr %151, align 8, !tbaa !26
  br label %194

194:                                              ; preds = %143, %156, %191
  %195 = phi ptr [ %152, %143 ], [ %152, %156 ], [ %193, %191 ]
  store i32 %150, ptr %153, align 8, !tbaa !28
  %196 = load ptr, ptr %195, align 8, !tbaa !34
  %197 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 3, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !26
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 2
  %200 = load i32, ptr %199, align 8, !tbaa !28
  %201 = icmp slt i32 %200, %150
  br i1 %201, label %202, label %240

202:                                              ; preds = %194
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 3
  %204 = load i32, ptr %203, align 4, !tbaa !31
  %205 = icmp slt i32 %204, %150
  br i1 %205, label %206, label %240

206:                                              ; preds = %202
  %207 = sitofp i32 %204 to float
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 5
  %209 = load float, ptr %208, align 4, !tbaa !32
  %210 = fmul float %209, %207
  %211 = fptosi float %210 to i32
  %212 = tail call i32 @llvm.smax.i32(i32 %211, i32 %150)
  %213 = sub nsw i32 %212, %204
  %214 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 6
  %215 = load i32, ptr %214, align 8, !tbaa !33
  %216 = icmp slt i32 %213, %215
  %217 = add nsw i32 %215, %204
  %218 = select i1 %216, i32 %217, i32 %212
  %219 = sext i32 %218 to i64
  %220 = shl nsw i64 %219, 1
  %221 = add nsw i64 %220, 31
  %222 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %221) #9
  %223 = getelementptr inbounds i8, ptr %222, i64 31
  %224 = ptrtoint ptr %223 to i64
  %225 = and i64 %224, 31
  %226 = sub nsw i64 0, %225
  %227 = getelementptr inbounds i8, ptr %223, i64 %226
  %228 = load ptr, ptr %198, align 8, !tbaa !34
  %229 = sext i32 %200 to i64
  %230 = shl nsw i64 %229, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %227, ptr align 1 %228, i64 %230, i1 false)
  %231 = icmp eq i32 %204, 0
  br i1 %231, label %237, label %232

232:                                              ; preds = %206
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  %234 = load ptr, ptr %233, align 8, !tbaa !35
  %235 = icmp eq ptr %234, null
  br i1 %235, label %237, label %236

236:                                              ; preds = %232
  tail call void @_ZdaPv(ptr noundef nonnull %234) #10
  br label %237

237:                                              ; preds = %236, %232, %206
  %238 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  store ptr %222, ptr %238, align 8, !tbaa !35
  store ptr %227, ptr %198, align 8, !tbaa !34
  store i32 %218, ptr %203, align 4, !tbaa !31
  %239 = load ptr, ptr %197, align 8, !tbaa !26
  br label %240

240:                                              ; preds = %194, %202, %237
  %241 = phi ptr [ %198, %194 ], [ %198, %202 ], [ %239, %237 ]
  store i32 %150, ptr %199, align 8, !tbaa !28
  %242 = load ptr, ptr %241, align 8, !tbaa !34
  %243 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 4, i32 1
  %244 = load ptr, ptr %243, align 8, !tbaa !26
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 2
  %246 = load i32, ptr %245, align 8, !tbaa !28
  %247 = icmp slt i32 %246, %150
  br i1 %247, label %248, label %286

248:                                              ; preds = %240
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 3
  %250 = load i32, ptr %249, align 4, !tbaa !31
  %251 = icmp slt i32 %250, %150
  br i1 %251, label %252, label %286

252:                                              ; preds = %248
  %253 = sitofp i32 %250 to float
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 5
  %255 = load float, ptr %254, align 4, !tbaa !32
  %256 = fmul float %255, %253
  %257 = fptosi float %256 to i32
  %258 = tail call i32 @llvm.smax.i32(i32 %257, i32 %150)
  %259 = sub nsw i32 %258, %250
  %260 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 6
  %261 = load i32, ptr %260, align 8, !tbaa !33
  %262 = icmp slt i32 %259, %261
  %263 = add nsw i32 %261, %250
  %264 = select i1 %262, i32 %263, i32 %258
  %265 = sext i32 %264 to i64
  %266 = shl nsw i64 %265, 1
  %267 = add nsw i64 %266, 31
  %268 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %267) #9
  %269 = getelementptr inbounds i8, ptr %268, i64 31
  %270 = ptrtoint ptr %269 to i64
  %271 = and i64 %270, 31
  %272 = sub nsw i64 0, %271
  %273 = getelementptr inbounds i8, ptr %269, i64 %272
  %274 = load ptr, ptr %244, align 8, !tbaa !34
  %275 = sext i32 %246 to i64
  %276 = shl nsw i64 %275, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %273, ptr align 1 %274, i64 %276, i1 false)
  %277 = icmp eq i32 %250, 0
  br i1 %277, label %283, label %278

278:                                              ; preds = %252
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !35
  %281 = icmp eq ptr %280, null
  br i1 %281, label %283, label %282

282:                                              ; preds = %278
  tail call void @_ZdaPv(ptr noundef nonnull %280) #10
  br label %283

283:                                              ; preds = %282, %278, %252
  %284 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  store ptr %268, ptr %284, align 8, !tbaa !35
  store ptr %273, ptr %244, align 8, !tbaa !34
  store i32 %264, ptr %249, align 4, !tbaa !31
  %285 = load ptr, ptr %243, align 8, !tbaa !26
  br label %286

286:                                              ; preds = %240, %248, %283
  %287 = phi ptr [ %244, %240 ], [ %244, %248 ], [ %285, %283 ]
  store i32 %150, ptr %245, align 8, !tbaa !28
  %288 = load ptr, ptr %287, align 8, !tbaa !34
  %289 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 5, i32 1
  %290 = load ptr, ptr %289, align 8, !tbaa !26
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 2
  %292 = load i32, ptr %291, align 8, !tbaa !28
  %293 = icmp slt i32 %292, %150
  br i1 %293, label %294, label %332

294:                                              ; preds = %286
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 3
  %296 = load i32, ptr %295, align 4, !tbaa !31
  %297 = icmp slt i32 %296, %150
  br i1 %297, label %298, label %332

298:                                              ; preds = %294
  %299 = sitofp i32 %296 to float
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 5
  %301 = load float, ptr %300, align 4, !tbaa !32
  %302 = fmul float %301, %299
  %303 = fptosi float %302 to i32
  %304 = tail call i32 @llvm.smax.i32(i32 %303, i32 %150)
  %305 = sub nsw i32 %304, %296
  %306 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 6
  %307 = load i32, ptr %306, align 8, !tbaa !33
  %308 = icmp slt i32 %305, %307
  %309 = add nsw i32 %307, %296
  %310 = select i1 %308, i32 %309, i32 %304
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 1
  %313 = add nsw i64 %312, 31
  %314 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %313) #9
  %315 = getelementptr inbounds i8, ptr %314, i64 31
  %316 = ptrtoint ptr %315 to i64
  %317 = and i64 %316, 31
  %318 = sub nsw i64 0, %317
  %319 = getelementptr inbounds i8, ptr %315, i64 %318
  %320 = load ptr, ptr %290, align 8, !tbaa !34
  %321 = sext i32 %292 to i64
  %322 = shl nsw i64 %321, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %319, ptr align 1 %320, i64 %322, i1 false)
  %323 = icmp eq i32 %296, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %298
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !35
  %327 = icmp eq ptr %326, null
  br i1 %327, label %329, label %328

328:                                              ; preds = %324
  tail call void @_ZdaPv(ptr noundef nonnull %326) #10
  br label %329

329:                                              ; preds = %328, %324, %298
  %330 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  store ptr %314, ptr %330, align 8, !tbaa !35
  store ptr %319, ptr %290, align 8, !tbaa !34
  store i32 %310, ptr %295, align 4, !tbaa !31
  %331 = load ptr, ptr %289, align 8, !tbaa !26
  br label %332

332:                                              ; preds = %286, %294, %329
  %333 = phi ptr [ %290, %286 ], [ %290, %294 ], [ %331, %329 ]
  store i32 %150, ptr %291, align 8, !tbaa !28
  %334 = load ptr, ptr %333, align 8, !tbaa !34
  %335 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 6, i32 1
  %336 = load ptr, ptr %335, align 8, !tbaa !26
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 2
  %338 = load i32, ptr %337, align 8, !tbaa !28
  %339 = icmp slt i32 %338, %150
  br i1 %339, label %340, label %378

340:                                              ; preds = %332
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 3
  %342 = load i32, ptr %341, align 4, !tbaa !31
  %343 = icmp slt i32 %342, %150
  br i1 %343, label %344, label %378

344:                                              ; preds = %340
  %345 = sitofp i32 %342 to float
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 5
  %347 = load float, ptr %346, align 4, !tbaa !32
  %348 = fmul float %347, %345
  %349 = fptosi float %348 to i32
  %350 = tail call i32 @llvm.smax.i32(i32 %349, i32 %150)
  %351 = sub nsw i32 %350, %342
  %352 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 6
  %353 = load i32, ptr %352, align 8, !tbaa !33
  %354 = icmp slt i32 %351, %353
  %355 = add nsw i32 %353, %342
  %356 = select i1 %354, i32 %355, i32 %350
  %357 = sext i32 %356 to i64
  %358 = shl nsw i64 %357, 1
  %359 = add nsw i64 %358, 31
  %360 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %359) #9
  %361 = getelementptr inbounds i8, ptr %360, i64 31
  %362 = ptrtoint ptr %361 to i64
  %363 = and i64 %362, 31
  %364 = sub nsw i64 0, %363
  %365 = getelementptr inbounds i8, ptr %361, i64 %364
  %366 = load ptr, ptr %336, align 8, !tbaa !34
  %367 = sext i32 %338 to i64
  %368 = shl nsw i64 %367, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %365, ptr align 1 %366, i64 %368, i1 false)
  %369 = icmp eq i32 %342, 0
  br i1 %369, label %375, label %370

370:                                              ; preds = %344
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !35
  %373 = icmp eq ptr %372, null
  br i1 %373, label %375, label %374

374:                                              ; preds = %370
  tail call void @_ZdaPv(ptr noundef nonnull %372) #10
  br label %375

375:                                              ; preds = %374, %370, %344
  %376 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  store ptr %360, ptr %376, align 8, !tbaa !35
  store ptr %365, ptr %336, align 8, !tbaa !34
  store i32 %356, ptr %341, align 4, !tbaa !31
  %377 = load ptr, ptr %335, align 8, !tbaa !26
  br label %378

378:                                              ; preds = %332, %340, %375
  %379 = phi ptr [ %336, %332 ], [ %336, %340 ], [ %377, %375 ]
  store i32 %150, ptr %337, align 8, !tbaa !28
  %380 = load ptr, ptr %379, align 8, !tbaa !34
  %381 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 15, i32 1
  %382 = load ptr, ptr %381, align 8, !tbaa !26
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 2
  %384 = load i32, ptr %383, align 8, !tbaa !28
  %385 = icmp slt i32 %384, %150
  br i1 %385, label %386, label %424

386:                                              ; preds = %378
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 3
  %388 = load i32, ptr %387, align 4, !tbaa !31
  %389 = icmp slt i32 %388, %150
  br i1 %389, label %390, label %424

390:                                              ; preds = %386
  %391 = sitofp i32 %388 to float
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 5
  %393 = load float, ptr %392, align 4, !tbaa !32
  %394 = fmul float %393, %391
  %395 = fptosi float %394 to i32
  %396 = tail call i32 @llvm.smax.i32(i32 %395, i32 %150)
  %397 = sub nsw i32 %396, %388
  %398 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 6
  %399 = load i32, ptr %398, align 8, !tbaa !33
  %400 = icmp slt i32 %397, %399
  %401 = add nsw i32 %399, %388
  %402 = select i1 %400, i32 %401, i32 %396
  %403 = sext i32 %402 to i64
  %404 = shl nsw i64 %403, 1
  %405 = add nsw i64 %404, 31
  %406 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %405) #9
  %407 = getelementptr inbounds i8, ptr %406, i64 31
  %408 = ptrtoint ptr %407 to i64
  %409 = and i64 %408, 31
  %410 = sub nsw i64 0, %409
  %411 = getelementptr inbounds i8, ptr %407, i64 %410
  %412 = load ptr, ptr %382, align 8, !tbaa !34
  %413 = sext i32 %384 to i64
  %414 = shl nsw i64 %413, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %411, ptr align 1 %412, i64 %414, i1 false)
  %415 = icmp eq i32 %388, 0
  br i1 %415, label %421, label %416

416:                                              ; preds = %390
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  %418 = load ptr, ptr %417, align 8, !tbaa !35
  %419 = icmp eq ptr %418, null
  br i1 %419, label %421, label %420

420:                                              ; preds = %416
  tail call void @_ZdaPv(ptr noundef nonnull %418) #10
  br label %421

421:                                              ; preds = %420, %416, %390
  %422 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  store ptr %406, ptr %422, align 8, !tbaa !35
  store ptr %411, ptr %382, align 8, !tbaa !34
  store i32 %402, ptr %387, align 4, !tbaa !31
  %423 = load ptr, ptr %381, align 8, !tbaa !26
  br label %424

424:                                              ; preds = %378, %386, %421
  %425 = phi ptr [ %382, %378 ], [ %382, %386 ], [ %423, %421 ]
  store i32 %150, ptr %383, align 8, !tbaa !28
  %426 = load ptr, ptr %425, align 8, !tbaa !34
  %427 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 16, i32 1
  %428 = load ptr, ptr %427, align 8, !tbaa !26
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 2
  %430 = load i32, ptr %429, align 8, !tbaa !28
  %431 = icmp slt i32 %430, %150
  br i1 %431, label %432, label %470

432:                                              ; preds = %424
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 3
  %434 = load i32, ptr %433, align 4, !tbaa !31
  %435 = icmp slt i32 %434, %150
  br i1 %435, label %436, label %470

436:                                              ; preds = %432
  %437 = sitofp i32 %434 to float
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 5
  %439 = load float, ptr %438, align 4, !tbaa !32
  %440 = fmul float %439, %437
  %441 = fptosi float %440 to i32
  %442 = tail call i32 @llvm.smax.i32(i32 %441, i32 %150)
  %443 = sub nsw i32 %442, %434
  %444 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 6
  %445 = load i32, ptr %444, align 8, !tbaa !33
  %446 = icmp slt i32 %443, %445
  %447 = add nsw i32 %445, %434
  %448 = select i1 %446, i32 %447, i32 %442
  %449 = sext i32 %448 to i64
  %450 = shl nsw i64 %449, 1
  %451 = add nsw i64 %450, 31
  %452 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %451) #9
  %453 = getelementptr inbounds i8, ptr %452, i64 31
  %454 = ptrtoint ptr %453 to i64
  %455 = and i64 %454, 31
  %456 = sub nsw i64 0, %455
  %457 = getelementptr inbounds i8, ptr %453, i64 %456
  %458 = load ptr, ptr %428, align 8, !tbaa !34
  %459 = sext i32 %430 to i64
  %460 = shl nsw i64 %459, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %457, ptr align 1 %458, i64 %460, i1 false)
  %461 = icmp eq i32 %434, 0
  br i1 %461, label %467, label %462

462:                                              ; preds = %436
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  %464 = load ptr, ptr %463, align 8, !tbaa !35
  %465 = icmp eq ptr %464, null
  br i1 %465, label %467, label %466

466:                                              ; preds = %462
  tail call void @_ZdaPv(ptr noundef nonnull %464) #10
  br label %467

467:                                              ; preds = %466, %462, %436
  %468 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  store ptr %452, ptr %468, align 8, !tbaa !35
  store ptr %457, ptr %428, align 8, !tbaa !34
  store i32 %448, ptr %433, align 4, !tbaa !31
  %469 = load ptr, ptr %427, align 8, !tbaa !26
  br label %470

470:                                              ; preds = %424, %432, %467
  %471 = phi ptr [ %428, %424 ], [ %428, %432 ], [ %469, %467 ]
  store i32 %150, ptr %429, align 8, !tbaa !28
  %472 = load ptr, ptr %471, align 8, !tbaa !34
  br i1 %149, label %614, label %473

473:                                              ; preds = %470
  %474 = icmp sgt i32 %43, 0
  br i1 %474, label %475, label %605

475:                                              ; preds = %473
  %476 = zext i32 %43 to i64
  %477 = and i64 %476, 1
  %478 = icmp eq i32 %43, 1
  br i1 %478, label %511, label %479

479:                                              ; preds = %475
  %480 = and i64 %476, 4294967294
  br label %481

481:                                              ; preds = %506, %479
  %482 = phi i64 [ 0, %479 ], [ %508, %506 ]
  %483 = phi i32 [ 0, %479 ], [ %507, %506 ]
  %484 = phi i64 [ 0, %479 ], [ %509, %506 ]
  %485 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %482, i32 4
  %486 = load i8, ptr %485, align 1
  %487 = and i8 %486, 7
  %488 = icmp eq i8 %487, 0
  br i1 %488, label %494, label %489

489:                                              ; preds = %481
  %490 = trunc i64 %482 to i16
  %491 = add nsw i32 %483, 1
  %492 = sext i32 %483 to i64
  %493 = getelementptr inbounds i16, ptr %196, i64 %492
  store i16 %490, ptr %493, align 2, !tbaa !45
  br label %494

494:                                              ; preds = %481, %489
  %495 = phi i32 [ %491, %489 ], [ %483, %481 ]
  %496 = or i64 %482, 1
  %497 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %496, i32 4
  %498 = load i8, ptr %497, align 1
  %499 = and i8 %498, 7
  %500 = icmp eq i8 %499, 0
  br i1 %500, label %506, label %501

501:                                              ; preds = %494
  %502 = trunc i64 %496 to i16
  %503 = add nsw i32 %495, 1
  %504 = sext i32 %495 to i64
  %505 = getelementptr inbounds i16, ptr %196, i64 %504
  store i16 %502, ptr %505, align 2, !tbaa !45
  br label %506

506:                                              ; preds = %501, %494
  %507 = phi i32 [ %503, %501 ], [ %495, %494 ]
  %508 = add nuw nsw i64 %482, 2
  %509 = add i64 %484, 2
  %510 = icmp eq i64 %509, %480
  br i1 %510, label %511, label %481

511:                                              ; preds = %506, %475
  %512 = phi i32 [ undef, %475 ], [ %507, %506 ]
  %513 = phi i64 [ 0, %475 ], [ %508, %506 ]
  %514 = phi i32 [ 0, %475 ], [ %507, %506 ]
  %515 = icmp eq i64 %477, 0
  br i1 %515, label %526, label %516

516:                                              ; preds = %511
  %517 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %513, i32 4
  %518 = load i8, ptr %517, align 1
  %519 = and i8 %518, 7
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %526, label %521

521:                                              ; preds = %516
  %522 = trunc i64 %513 to i16
  %523 = add nsw i32 %514, 1
  %524 = sext i32 %514 to i64
  %525 = getelementptr inbounds i16, ptr %196, i64 %524
  store i16 %522, ptr %525, align 2, !tbaa !45
  br label %526

526:                                              ; preds = %516, %521, %511
  %527 = phi i32 [ %512, %511 ], [ %523, %521 ], [ %514, %516 ]
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %536, label %529

529:                                              ; preds = %526
  %530 = add nsw i32 %527, -1
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i16, ptr %196, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !45
  %534 = sext i32 %527 to i64
  %535 = getelementptr inbounds i16, ptr %196, i64 %534
  store i16 %533, ptr %535, align 2, !tbaa !45
  br label %536

536:                                              ; preds = %529, %526
  %537 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %538 = icmp ne i32 %537, 0
  %539 = icmp sgt i32 %527, 0
  %540 = and i1 %538, %539
  br i1 %540, label %541, label %605

541:                                              ; preds = %536
  %542 = zext i32 %527 to i64
  %543 = and i64 %542, 1
  %544 = icmp eq i32 %527, 1
  br i1 %544, label %579, label %545

545:                                              ; preds = %541
  %546 = and i64 %542, 4294967294
  br label %547

547:                                              ; preds = %574, %545
  %548 = phi i64 [ 0, %545 ], [ %576, %574 ]
  %549 = phi i32 [ 0, %545 ], [ %575, %574 ]
  %550 = phi i64 [ 0, %545 ], [ %577, %574 ]
  %551 = getelementptr inbounds i16, ptr %196, i64 %548
  %552 = load i16, ptr %551, align 2, !tbaa !45
  %553 = zext i16 %552 to i64
  %554 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %553
  %555 = load i32, ptr %554, align 4
  %556 = icmp sgt i32 %555, -1
  br i1 %556, label %557, label %561

557:                                              ; preds = %547
  %558 = add nsw i32 %549, 1
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds i16, ptr %242, i64 %559
  store i16 %552, ptr %560, align 2, !tbaa !45
  br label %561

561:                                              ; preds = %547, %557
  %562 = phi i32 [ %549, %547 ], [ %558, %557 ]
  %563 = or i64 %548, 1
  %564 = getelementptr inbounds i16, ptr %196, i64 %563
  %565 = load i16, ptr %564, align 2, !tbaa !45
  %566 = zext i16 %565 to i64
  %567 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %566
  %568 = load i32, ptr %567, align 4
  %569 = icmp sgt i32 %568, -1
  br i1 %569, label %570, label %574

570:                                              ; preds = %561
  %571 = add nsw i32 %562, 1
  %572 = sext i32 %562 to i64
  %573 = getelementptr inbounds i16, ptr %242, i64 %572
  store i16 %565, ptr %573, align 2, !tbaa !45
  br label %574

574:                                              ; preds = %570, %561
  %575 = phi i32 [ %562, %561 ], [ %571, %570 ]
  %576 = add nuw nsw i64 %548, 2
  %577 = add i64 %550, 2
  %578 = icmp eq i64 %577, %546
  br i1 %578, label %579, label %547

579:                                              ; preds = %574, %541
  %580 = phi i32 [ undef, %541 ], [ %575, %574 ]
  %581 = phi i64 [ 0, %541 ], [ %576, %574 ]
  %582 = phi i32 [ 0, %541 ], [ %575, %574 ]
  %583 = icmp eq i64 %543, 0
  br i1 %583, label %595, label %584

584:                                              ; preds = %579
  %585 = getelementptr inbounds i16, ptr %196, i64 %581
  %586 = load i16, ptr %585, align 2, !tbaa !45
  %587 = zext i16 %586 to i64
  %588 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %587
  %589 = load i32, ptr %588, align 4
  %590 = icmp sgt i32 %589, -1
  br i1 %590, label %591, label %595

591:                                              ; preds = %584
  %592 = add nsw i32 %582, 1
  %593 = sext i32 %582 to i64
  %594 = getelementptr inbounds i16, ptr %242, i64 %593
  store i16 %586, ptr %594, align 2, !tbaa !45
  br label %595

595:                                              ; preds = %584, %591, %579
  %596 = phi i32 [ %580, %579 ], [ %582, %584 ], [ %592, %591 ]
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %605, label %598

598:                                              ; preds = %595
  %599 = add nsw i32 %596, -1
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i16, ptr %242, i64 %600
  %602 = load i16, ptr %601, align 2, !tbaa !45
  %603 = sext i32 %596 to i64
  %604 = getelementptr inbounds i16, ptr %242, i64 %603
  store i16 %602, ptr %604, align 2, !tbaa !45
  br label %605

605:                                              ; preds = %473, %536, %598, %595
  %606 = phi i32 [ %527, %598 ], [ %527, %595 ], [ %527, %536 ], [ 0, %473 ]
  %607 = phi i32 [ %596, %598 ], [ 0, %595 ], [ 0, %536 ], [ 0, %473 ]
  %608 = load i32, ptr %17, align 8, !tbaa !19
  %609 = add nsw i32 %608, 1
  store i32 %609, ptr %17, align 8, !tbaa !19
  %610 = trunc i32 %41 to i16
  %611 = load ptr, ptr %12, align 8, !tbaa !47
  %612 = sext i32 %608 to i64
  %613 = getelementptr inbounds i16, ptr %611, i64 %612
  store i16 %610, ptr %613, align 2, !tbaa !45
  br label %624

614:                                              ; preds = %470
  %615 = load ptr, ptr %12, align 8, !tbaa !47
  %616 = load i32, ptr %17, align 8, !tbaa !19
  %617 = add nsw i32 %616, 1
  store i32 %617, ptr %17, align 8, !tbaa !19
  %618 = sext i32 %616 to i64
  %619 = getelementptr inbounds i16, ptr %615, i64 %618
  %620 = load i16, ptr %619, align 2, !tbaa !45
  %621 = zext i16 %620 to i32
  %622 = icmp eq i32 %41, %621
  br i1 %622, label %624, label %623

623:                                              ; preds = %614
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %624

624:                                              ; preds = %614, %623, %605
  %625 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %606, %605 ]
  %626 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %607, %605 ]
  %627 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %628 = load ptr, ptr %627, align 8, !tbaa !24
  %629 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3, i64 1
  %630 = load ptr, ptr %629, align 8, !tbaa !24
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %632 = load ptr, ptr %631, align 8, !tbaa !24
  %633 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %634 = load ptr, ptr %633, align 8, !tbaa !24
  %635 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %636 = load i32, ptr %635, align 4, !tbaa !49
  %637 = add nsw i32 %636, -1
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  br i1 %149, label %642, label %640

640:                                              ; preds = %624
  %641 = load i32, ptr %17, align 8, !tbaa !19
  br label %649

642:                                              ; preds = %624
  %643 = load ptr, ptr %12, align 8, !tbaa !47
  %644 = load i32, ptr %17, align 8, !tbaa !19
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds i16, ptr %643, i64 %645
  %647 = load i16, ptr %646, align 2, !tbaa !45
  %648 = zext i16 %647 to i32
  br label %649

649:                                              ; preds = %642, %640
  %650 = phi i32 [ %644, %642 ], [ %641, %640 ]
  %651 = phi i32 [ %648, %642 ], [ 0, %640 ]
  %652 = add nsw i32 %650, 1
  store i32 %652, ptr %17, align 8
  %653 = icmp slt i32 %651, %41
  br i1 %653, label %654, label %2907

654:                                              ; preds = %649
  %655 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %656 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %657 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %658 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %659 = ptrtoint ptr %426 to i64
  %660 = add nsw i32 %43, 10
  %661 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %662 = ptrtoint ptr %472 to i64
  %663 = getelementptr inbounds i16, ptr %426, i64 1
  %664 = ptrtoint ptr %334 to i64
  %665 = ptrtoint ptr %380 to i64
  %666 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %667 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %668 = fneg double %33
  %669 = getelementptr inbounds double, ptr %6, i64 26
  %670 = getelementptr inbounds double, ptr %6, i64 28
  %671 = getelementptr inbounds double, ptr %6, i64 29
  %672 = getelementptr inbounds double, ptr %6, i64 30
  %673 = getelementptr inbounds double, ptr %6, i64 31
  %674 = fsub double 1.000000e+00, %35
  %675 = fmul double %35, 2.000000e+00
  %676 = fmul double %35, 4.000000e+00
  %677 = fmul double %35, 6.000000e+00
  %678 = insertelement <2 x double> poison, double %27, i64 0
  %679 = shufflevector <2 x double> %678, <2 x double> poison, <2 x i32> zeroinitializer
  br label %680

680:                                              ; preds = %654, %2890
  %681 = phi i32 [ 0, %654 ], [ %2898, %2890 ]
  %682 = phi double [ 0.000000e+00, %654 ], [ %2897, %2890 ]
  %683 = phi i32 [ %651, %654 ], [ %2896, %2890 ]
  %684 = phi ptr [ null, %654 ], [ %2895, %2890 ]
  %685 = phi ptr [ null, %654 ], [ %2894, %2890 ]
  %686 = phi ptr [ null, %654 ], [ %2893, %2890 ]
  %687 = phi i32 [ 0, %654 ], [ %2892, %2890 ]
  %688 = phi i32 [ %639, %654 ], [ %2891, %2890 ]
  %689 = phi <2 x double> [ zeroinitializer, %654 ], [ %2899, %2890 ]
  %690 = phi <2 x double> [ zeroinitializer, %654 ], [ %2900, %2890 ]
  %691 = phi <2 x double> [ zeroinitializer, %654 ], [ %2901, %2890 ]
  %692 = phi <2 x double> [ zeroinitializer, %654 ], [ %2902, %2890 ]
  %693 = phi <2 x double> [ zeroinitializer, %654 ], [ %2903, %2890 ]
  %694 = phi <2 x double> [ zeroinitializer, %654 ], [ %2904, %2890 ]
  %695 = phi <2 x double> [ zeroinitializer, %654 ], [ %2905, %2890 ]
  %696 = sext i32 %683 to i64
  %697 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %696
  %698 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %696
  br i1 %149, label %711, label %699

699:                                              ; preds = %680
  %700 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %696, i32 4
  %701 = load i8, ptr %700, align 1
  %702 = lshr i8 %701, 3
  %703 = and i8 %702, 15
  %704 = zext i8 %703 to i32
  %705 = icmp eq i8 %703, 0
  br i1 %705, label %711, label %706

706:                                              ; preds = %699
  %707 = icmp eq i32 %688, 0
  br i1 %707, label %711, label %708

708:                                              ; preds = %706
  %709 = add nsw i32 %688, -1
  %710 = add nsw i32 %683, %704
  br label %2890

711:                                              ; preds = %706, %699, %680
  %712 = phi i32 [ %688, %680 ], [ %688, %699 ], [ %637, %706 ]
  %713 = load <2 x double>, ptr %697, align 8, !tbaa !15
  %714 = fadd <2 x double> %19, %713
  %715 = getelementptr inbounds %class.Vector, ptr %697, i64 0, i32 2
  %716 = load double, ptr %715, align 8, !tbaa !50
  %717 = fadd double %21, %716
  %718 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %696, i32 3
  %719 = load i8, ptr %718, align 2, !tbaa !52
  %720 = zext i8 %719 to i32
  %721 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %722 = fsub double %716, %721
  %723 = fmul double %10, %722
  %724 = tail call double @llvm.floor.f64(double %723)
  %725 = fptosi double %724 to i32
  %726 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %727 = icmp slt i32 %725, 0
  %728 = select i1 %727, i32 %726, i32 0
  %729 = icmp sgt i32 %726, %725
  %730 = select i1 %729, i32 0, i32 %726
  %731 = sub i32 %725, %730
  %732 = add i32 %731, %728
  br i1 %149, label %1964, label %733

733:                                              ; preds = %711
  %734 = load i32, ptr %698, align 4
  %735 = shl i32 %734, 2
  %736 = ashr exact i32 %735, 2
  %737 = load ptr, ptr %655, align 8, !tbaa !53
  %738 = sext i32 %736 to i64
  %739 = getelementptr inbounds %class.ExclusionCheck, ptr %737, i64 %738
  %740 = load i32, ptr %739, align 8, !tbaa !55
  %741 = getelementptr inbounds %class.ExclusionCheck, ptr %737, i64 %738, i32 1
  %742 = load i32, ptr %741, align 4, !tbaa !57
  %743 = getelementptr inbounds %class.ExclusionCheck, ptr %737, i64 %738, i32 2
  %744 = load ptr, ptr %743, align 8, !tbaa !58
  %745 = icmp eq ptr %744, null
  br i1 %745, label %750, label %746

746:                                              ; preds = %733
  %747 = sext i32 %740 to i64
  %748 = sub nsw i64 0, %747
  %749 = getelementptr inbounds i8, ptr %744, i64 %748
  br label %976

750:                                              ; preds = %733
  %751 = icmp eq ptr %684, null
  br i1 %751, label %839, label %752

752:                                              ; preds = %750
  %753 = load i32, ptr %685, align 4, !tbaa !5
  %754 = icmp slt i32 %753, 1
  br i1 %754, label %802, label %755

755:                                              ; preds = %752
  %756 = add nuw i32 %753, 1
  %757 = zext i32 %756 to i64
  %758 = add nsw i64 %757, -1
  %759 = add nsw i64 %757, -2
  %760 = and i64 %758, 3
  %761 = icmp ult i64 %759, 3
  br i1 %761, label %789, label %762

762:                                              ; preds = %755
  %763 = and i64 %758, -4
  br label %764

764:                                              ; preds = %764, %762
  %765 = phi i64 [ 1, %762 ], [ %786, %764 ]
  %766 = phi i64 [ 0, %762 ], [ %787, %764 ]
  %767 = getelementptr inbounds i32, ptr %685, i64 %765
  %768 = load i32, ptr %767, align 4, !tbaa !5
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i8, ptr %684, i64 %769
  store i8 0, ptr %770, align 1, !tbaa !59
  %771 = add nuw nsw i64 %765, 1
  %772 = getelementptr inbounds i32, ptr %685, i64 %771
  %773 = load i32, ptr %772, align 4, !tbaa !5
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i8, ptr %684, i64 %774
  store i8 0, ptr %775, align 1, !tbaa !59
  %776 = add nuw nsw i64 %765, 2
  %777 = getelementptr inbounds i32, ptr %685, i64 %776
  %778 = load i32, ptr %777, align 4, !tbaa !5
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds i8, ptr %684, i64 %779
  store i8 0, ptr %780, align 1, !tbaa !59
  %781 = add nuw nsw i64 %765, 3
  %782 = getelementptr inbounds i32, ptr %685, i64 %781
  %783 = load i32, ptr %782, align 4, !tbaa !5
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds i8, ptr %684, i64 %784
  store i8 0, ptr %785, align 1, !tbaa !59
  %786 = add nuw nsw i64 %765, 4
  %787 = add i64 %766, 4
  %788 = icmp eq i64 %787, %763
  br i1 %788, label %789, label %764

789:                                              ; preds = %764, %755
  %790 = phi i64 [ 1, %755 ], [ %786, %764 ]
  %791 = icmp eq i64 %760, 0
  br i1 %791, label %802, label %792

792:                                              ; preds = %789, %792
  %793 = phi i64 [ %799, %792 ], [ %790, %789 ]
  %794 = phi i64 [ %800, %792 ], [ 0, %789 ]
  %795 = getelementptr inbounds i32, ptr %685, i64 %793
  %796 = load i32, ptr %795, align 4, !tbaa !5
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds i8, ptr %684, i64 %797
  store i8 0, ptr %798, align 1, !tbaa !59
  %799 = add nuw nsw i64 %793, 1
  %800 = add i64 %794, 1
  %801 = icmp eq i64 %800, %760
  br i1 %801, label %802, label %792, !llvm.loop !114

802:                                              ; preds = %789, %792, %752
  %803 = load i32, ptr %686, align 4, !tbaa !5
  %804 = icmp slt i32 %803, 1
  br i1 %804, label %859, label %805

805:                                              ; preds = %802
  %806 = add nuw i32 %803, 1
  %807 = zext i32 %806 to i64
  %808 = add nsw i64 %807, -1
  %809 = add nsw i64 %807, -2
  %810 = and i64 %808, 3
  %811 = icmp ult i64 %809, 3
  br i1 %811, label %846, label %812

812:                                              ; preds = %805
  %813 = and i64 %808, -4
  br label %814

814:                                              ; preds = %814, %812
  %815 = phi i64 [ 1, %812 ], [ %836, %814 ]
  %816 = phi i64 [ 0, %812 ], [ %837, %814 ]
  %817 = getelementptr inbounds i32, ptr %686, i64 %815
  %818 = load i32, ptr %817, align 4, !tbaa !5
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds i8, ptr %684, i64 %819
  store i8 0, ptr %820, align 1, !tbaa !59
  %821 = add nuw nsw i64 %815, 1
  %822 = getelementptr inbounds i32, ptr %686, i64 %821
  %823 = load i32, ptr %822, align 4, !tbaa !5
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds i8, ptr %684, i64 %824
  store i8 0, ptr %825, align 1, !tbaa !59
  %826 = add nuw nsw i64 %815, 2
  %827 = getelementptr inbounds i32, ptr %686, i64 %826
  %828 = load i32, ptr %827, align 4, !tbaa !5
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds i8, ptr %684, i64 %829
  store i8 0, ptr %830, align 1, !tbaa !59
  %831 = add nuw nsw i64 %815, 3
  %832 = getelementptr inbounds i32, ptr %686, i64 %831
  %833 = load i32, ptr %832, align 4, !tbaa !5
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i8, ptr %684, i64 %834
  store i8 0, ptr %835, align 1, !tbaa !59
  %836 = add nuw nsw i64 %815, 4
  %837 = add i64 %816, 4
  %838 = icmp eq i64 %837, %813
  br i1 %838, label %846, label %814

839:                                              ; preds = %750
  %840 = load i32, ptr %656, align 8, !tbaa !62
  %841 = tail call i32 @llvm.smax.i32(i32 %840, i32 -1)
  %842 = sext i32 %841 to i64
  %843 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %842) #9
  %844 = load i32, ptr %656, align 8, !tbaa !62
  %845 = sext i32 %844 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %843, i8 0, i64 %845, i1 false)
  br label %859

846:                                              ; preds = %814, %805
  %847 = phi i64 [ 1, %805 ], [ %836, %814 ]
  %848 = icmp eq i64 %810, 0
  br i1 %848, label %859, label %849

849:                                              ; preds = %846, %849
  %850 = phi i64 [ %856, %849 ], [ %847, %846 ]
  %851 = phi i64 [ %857, %849 ], [ 0, %846 ]
  %852 = getelementptr inbounds i32, ptr %686, i64 %850
  %853 = load i32, ptr %852, align 4, !tbaa !5
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds i8, ptr %684, i64 %854
  store i8 0, ptr %855, align 1, !tbaa !59
  %856 = add nuw nsw i64 %850, 1
  %857 = add i64 %851, 1
  %858 = icmp eq i64 %857, %810
  br i1 %858, label %859, label %849, !llvm.loop !115

859:                                              ; preds = %846, %849, %802, %839
  %860 = phi ptr [ %843, %839 ], [ %684, %802 ], [ %684, %849 ], [ %684, %846 ]
  %861 = load i32, ptr %698, align 4
  %862 = shl i32 %861, 2
  %863 = ashr exact i32 %862, 2
  %864 = load ptr, ptr %657, align 8, !tbaa !64
  %865 = sext i32 %863 to i64
  %866 = getelementptr inbounds ptr, ptr %864, i64 %865
  %867 = load ptr, ptr %866, align 8, !tbaa !24
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = icmp slt i32 %868, 1
  br i1 %869, label %922, label %870

870:                                              ; preds = %859
  %871 = add nuw i32 %868, 1
  %872 = zext i32 %871 to i64
  %873 = add nsw i64 %872, -1
  %874 = add nsw i64 %872, -2
  %875 = and i64 %873, 3
  %876 = icmp ult i64 %874, 3
  br i1 %876, label %904, label %877

877:                                              ; preds = %870
  %878 = and i64 %873, -4
  br label %879

879:                                              ; preds = %879, %877
  %880 = phi i64 [ 1, %877 ], [ %901, %879 ]
  %881 = phi i64 [ 0, %877 ], [ %902, %879 ]
  %882 = getelementptr inbounds i32, ptr %867, i64 %880
  %883 = load i32, ptr %882, align 4, !tbaa !5
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i8, ptr %860, i64 %884
  store i8 1, ptr %885, align 1, !tbaa !59
  %886 = add nuw nsw i64 %880, 1
  %887 = getelementptr inbounds i32, ptr %867, i64 %886
  %888 = load i32, ptr %887, align 4, !tbaa !5
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds i8, ptr %860, i64 %889
  store i8 1, ptr %890, align 1, !tbaa !59
  %891 = add nuw nsw i64 %880, 2
  %892 = getelementptr inbounds i32, ptr %867, i64 %891
  %893 = load i32, ptr %892, align 4, !tbaa !5
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds i8, ptr %860, i64 %894
  store i8 1, ptr %895, align 1, !tbaa !59
  %896 = add nuw nsw i64 %880, 3
  %897 = getelementptr inbounds i32, ptr %867, i64 %896
  %898 = load i32, ptr %897, align 4, !tbaa !5
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds i8, ptr %860, i64 %899
  store i8 1, ptr %900, align 1, !tbaa !59
  %901 = add nuw nsw i64 %880, 4
  %902 = add i64 %881, 4
  %903 = icmp eq i64 %902, %878
  br i1 %903, label %904, label %879

904:                                              ; preds = %879, %870
  %905 = phi i64 [ 1, %870 ], [ %901, %879 ]
  %906 = icmp eq i64 %875, 0
  br i1 %906, label %917, label %907

907:                                              ; preds = %904, %907
  %908 = phi i64 [ %914, %907 ], [ %905, %904 ]
  %909 = phi i64 [ %915, %907 ], [ 0, %904 ]
  %910 = getelementptr inbounds i32, ptr %867, i64 %908
  %911 = load i32, ptr %910, align 4, !tbaa !5
  %912 = sext i32 %911 to i64
  %913 = getelementptr inbounds i8, ptr %860, i64 %912
  store i8 1, ptr %913, align 1, !tbaa !59
  %914 = add nuw nsw i64 %908, 1
  %915 = add i64 %909, 1
  %916 = icmp eq i64 %915, %875
  br i1 %916, label %917, label %907, !llvm.loop !116

917:                                              ; preds = %907, %904
  %918 = load i32, ptr %698, align 4
  %919 = shl i32 %918, 2
  %920 = ashr exact i32 %919, 2
  %921 = sext i32 %920 to i64
  br label %922

922:                                              ; preds = %917, %859
  %923 = phi i64 [ %921, %917 ], [ %865, %859 ]
  %924 = load ptr, ptr %658, align 8, !tbaa !66
  %925 = getelementptr inbounds ptr, ptr %924, i64 %923
  %926 = load ptr, ptr %925, align 8, !tbaa !24
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = icmp slt i32 %927, 1
  br i1 %928, label %976, label %929

929:                                              ; preds = %922
  %930 = add nuw i32 %927, 1
  %931 = zext i32 %930 to i64
  %932 = add nsw i64 %931, -1
  %933 = add nsw i64 %931, -2
  %934 = and i64 %932, 3
  %935 = icmp ult i64 %933, 3
  br i1 %935, label %963, label %936

936:                                              ; preds = %929
  %937 = and i64 %932, -4
  br label %938

938:                                              ; preds = %938, %936
  %939 = phi i64 [ 1, %936 ], [ %960, %938 ]
  %940 = phi i64 [ 0, %936 ], [ %961, %938 ]
  %941 = getelementptr inbounds i32, ptr %926, i64 %939
  %942 = load i32, ptr %941, align 4, !tbaa !5
  %943 = sext i32 %942 to i64
  %944 = getelementptr inbounds i8, ptr %860, i64 %943
  store i8 2, ptr %944, align 1, !tbaa !59
  %945 = add nuw nsw i64 %939, 1
  %946 = getelementptr inbounds i32, ptr %926, i64 %945
  %947 = load i32, ptr %946, align 4, !tbaa !5
  %948 = sext i32 %947 to i64
  %949 = getelementptr inbounds i8, ptr %860, i64 %948
  store i8 2, ptr %949, align 1, !tbaa !59
  %950 = add nuw nsw i64 %939, 2
  %951 = getelementptr inbounds i32, ptr %926, i64 %950
  %952 = load i32, ptr %951, align 4, !tbaa !5
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i8, ptr %860, i64 %953
  store i8 2, ptr %954, align 1, !tbaa !59
  %955 = add nuw nsw i64 %939, 3
  %956 = getelementptr inbounds i32, ptr %926, i64 %955
  %957 = load i32, ptr %956, align 4, !tbaa !5
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds i8, ptr %860, i64 %958
  store i8 2, ptr %959, align 1, !tbaa !59
  %960 = add nuw nsw i64 %939, 4
  %961 = add i64 %940, 4
  %962 = icmp eq i64 %961, %937
  br i1 %962, label %963, label %938

963:                                              ; preds = %938, %929
  %964 = phi i64 [ 1, %929 ], [ %960, %938 ]
  %965 = icmp eq i64 %934, 0
  br i1 %965, label %976, label %966

966:                                              ; preds = %963, %966
  %967 = phi i64 [ %973, %966 ], [ %964, %963 ]
  %968 = phi i64 [ %974, %966 ], [ 0, %963 ]
  %969 = getelementptr inbounds i32, ptr %926, i64 %967
  %970 = load i32, ptr %969, align 4, !tbaa !5
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds i8, ptr %860, i64 %971
  store i8 2, ptr %972, align 1, !tbaa !59
  %973 = add nuw nsw i64 %967, 1
  %974 = add i64 %968, 1
  %975 = icmp eq i64 %974, %934
  br i1 %975, label %976, label %966, !llvm.loop !117

976:                                              ; preds = %963, %966, %922, %746
  %977 = phi ptr [ %749, %746 ], [ %860, %922 ], [ %860, %966 ], [ %860, %963 ]
  %978 = phi ptr [ %686, %746 ], [ %926, %922 ], [ %926, %966 ], [ %926, %963 ]
  %979 = phi ptr [ %685, %746 ], [ %867, %922 ], [ %867, %966 ], [ %867, %963 ]
  %980 = phi ptr [ %684, %746 ], [ %860, %922 ], [ %860, %966 ], [ %860, %963 ]
  %981 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %696, i32 4
  %982 = load i8, ptr %981, align 1
  %983 = and i8 %982, 7
  %984 = icmp eq i8 %983, 0
  %985 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %984, label %1168, label %986

986:                                              ; preds = %976
  %987 = icmp eq i32 %985, 0
  br i1 %987, label %994, label %988

988:                                              ; preds = %986
  %989 = load i32, ptr %698, align 4
  %990 = freeze i32 %989
  %991 = icmp slt i32 %990, 0
  %992 = select i1 %991, ptr %242, ptr %196
  %993 = select i1 %991, i32 %626, i32 %625
  br label %994

994:                                              ; preds = %988, %986
  %995 = phi ptr [ %196, %986 ], [ %992, %988 ]
  %996 = phi i32 [ %625, %986 ], [ %993, %988 ]
  %997 = icmp sgt i32 %996, 0
  br i1 %997, label %998, label %1149

998:                                              ; preds = %994
  %999 = icmp ugt i32 %996, 6
  br i1 %999, label %1000, label %1084

1000:                                             ; preds = %998
  %1001 = add nsw i32 %996, -2
  %1002 = getelementptr inbounds i16, ptr %995, i64 1
  %1003 = load i16, ptr %1002, align 2, !tbaa !45
  %1004 = zext i16 %1003 to i64
  %1005 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1004
  %1006 = getelementptr inbounds %class.Vector, ptr %1005, i64 0, i32 2
  %1007 = load double, ptr %1006, align 8, !tbaa !50
  %1008 = load i16, ptr %995, align 2, !tbaa !45
  %1009 = zext i16 %1008 to i64
  %1010 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1009
  %1011 = getelementptr inbounds %class.Vector, ptr %1010, i64 0, i32 2
  %1012 = load double, ptr %1011, align 8, !tbaa !50
  %1013 = getelementptr inbounds %class.Vector, ptr %1005, i64 0, i32 1
  %1014 = load double, ptr %1013, align 8, !tbaa !68
  %1015 = getelementptr inbounds %class.Vector, ptr %1010, i64 0, i32 1
  %1016 = load double, ptr %1015, align 8, !tbaa !68
  %1017 = load double, ptr %1005, align 8, !tbaa !69
  %1018 = load double, ptr %1010, align 8, !tbaa !69
  %1019 = zext i32 %1001 to i64
  %1020 = insertelement <2 x double> poison, double %1007, i64 0
  %1021 = insertelement <2 x double> %1020, double %1012, i64 1
  %1022 = insertelement <2 x double> poison, double %1014, i64 0
  %1023 = insertelement <2 x double> %1022, double %1016, i64 1
  %1024 = insertelement <2 x double> poison, double %1017, i64 0
  %1025 = insertelement <2 x double> %1024, double %1018, i64 1
  %1026 = insertelement <2 x double> poison, double %717, i64 0
  %1027 = shufflevector <2 x double> %1026, <2 x double> poison, <2 x i32> zeroinitializer
  %1028 = shufflevector <2 x double> %714, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1029 = shufflevector <2 x double> %714, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1030

1030:                                             ; preds = %1000, %1030
  %1031 = phi i64 [ 2, %1000 ], [ %1074, %1030 ]
  %1032 = phi i32 [ 0, %1000 ], [ %1073, %1030 ]
  %1033 = phi i16 [ %1008, %1000 ], [ %1040, %1030 ]
  %1034 = phi i16 [ %1003, %1000 ], [ %1043, %1030 ]
  %1035 = phi <2 x double> [ %1021, %1000 ], [ %1077, %1030 ]
  %1036 = phi <2 x double> [ %1023, %1000 ], [ %1079, %1030 ]
  %1037 = phi <2 x double> [ %1025, %1000 ], [ %1081, %1030 ]
  %1038 = fsub <2 x double> %1027, %1035
  %1039 = getelementptr inbounds i16, ptr %995, i64 %1031
  %1040 = load i16, ptr %1039, align 2, !tbaa !45
  %1041 = or i64 %1031, 1
  %1042 = getelementptr inbounds i16, ptr %995, i64 %1041
  %1043 = load i16, ptr %1042, align 2, !tbaa !45
  %1044 = zext i16 %1040 to i64
  %1045 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1044
  %1046 = load double, ptr %1045, align 8, !tbaa !69
  %1047 = zext i16 %1043 to i64
  %1048 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1047
  %1049 = load double, ptr %1048, align 8, !tbaa !69
  %1050 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 1
  %1051 = load double, ptr %1050, align 8, !tbaa !68
  %1052 = getelementptr inbounds %class.Vector, ptr %1048, i64 0, i32 1
  %1053 = load double, ptr %1052, align 8, !tbaa !68
  %1054 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 2
  %1055 = load double, ptr %1054, align 8, !tbaa !50
  %1056 = getelementptr inbounds %class.Vector, ptr %1048, i64 0, i32 2
  %1057 = load double, ptr %1056, align 8, !tbaa !50
  %1058 = fsub <2 x double> %1029, %1037
  %1059 = fmul <2 x double> %1058, %1058
  %1060 = fsub <2 x double> %1028, %1036
  %1061 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1060, <2 x double> %1060, <2 x double> %1059)
  %1062 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1038, <2 x double> %1038, <2 x double> %1061)
  %1063 = fcmp olt <2 x double> %1062, %679
  %1064 = zext i32 %1032 to i64
  %1065 = getelementptr inbounds i16, ptr %288, i64 %1064
  store i16 %1033, ptr %1065, align 2, !tbaa !45
  %1066 = extractelement <2 x i1> %1063, i64 1
  %1067 = zext i1 %1066 to i32
  %1068 = add nuw nsw i32 %1032, %1067
  %1069 = zext i32 %1068 to i64
  %1070 = getelementptr inbounds i16, ptr %288, i64 %1069
  store i16 %1034, ptr %1070, align 2, !tbaa !45
  %1071 = extractelement <2 x i1> %1063, i64 0
  %1072 = zext i1 %1071 to i32
  %1073 = add i32 %1068, %1072
  %1074 = add nuw nsw i64 %1031, 2
  %1075 = icmp ult i64 %1074, %1019
  %1076 = insertelement <2 x double> poison, double %1057, i64 0
  %1077 = insertelement <2 x double> %1076, double %1055, i64 1
  %1078 = insertelement <2 x double> poison, double %1053, i64 0
  %1079 = insertelement <2 x double> %1078, double %1051, i64 1
  %1080 = insertelement <2 x double> poison, double %1049, i64 0
  %1081 = insertelement <2 x double> %1080, double %1046, i64 1
  br i1 %1075, label %1030, label %1082

1082:                                             ; preds = %1030
  %1083 = trunc i64 %1031 to i32
  br label %1084

1084:                                             ; preds = %1082, %998
  %1085 = phi i32 [ %1073, %1082 ], [ 0, %998 ]
  %1086 = phi i32 [ %1083, %1082 ], [ 0, %998 ]
  %1087 = icmp slt i32 %1086, %996
  br i1 %1087, label %1088, label %1093

1088:                                             ; preds = %1084
  %1089 = zext i32 %1086 to i64
  %1090 = zext i32 %996 to i64
  %1091 = extractelement <2 x double> %714, i64 0
  %1092 = extractelement <2 x double> %714, i64 1
  br label %1098

1093:                                             ; preds = %1121, %1084
  %1094 = phi i32 [ %1085, %1084 ], [ %1122, %1121 ]
  %1095 = icmp sgt i32 %1094, 0
  br i1 %1095, label %1096, label %1149

1096:                                             ; preds = %1093
  %1097 = zext i32 %1094 to i64
  br label %1125

1098:                                             ; preds = %1088, %1121
  %1099 = phi i64 [ %1089, %1088 ], [ %1123, %1121 ]
  %1100 = phi i32 [ %1085, %1088 ], [ %1122, %1121 ]
  %1101 = getelementptr inbounds i16, ptr %995, i64 %1099
  %1102 = load i16, ptr %1101, align 2, !tbaa !45
  %1103 = zext i16 %1102 to i64
  %1104 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1103
  %1105 = load double, ptr %1104, align 8, !tbaa !69
  %1106 = getelementptr inbounds %class.Vector, ptr %1104, i64 0, i32 1
  %1107 = load double, ptr %1106, align 8, !tbaa !68
  %1108 = getelementptr inbounds %class.Vector, ptr %1104, i64 0, i32 2
  %1109 = load double, ptr %1108, align 8, !tbaa !50
  %1110 = fsub double %1091, %1105
  %1111 = fmul double %1110, %1110
  %1112 = fsub double %1092, %1107
  %1113 = tail call double @llvm.fmuladd.f64(double %1112, double %1112, double %1111)
  %1114 = fsub double %717, %1109
  %1115 = tail call double @llvm.fmuladd.f64(double %1114, double %1114, double %1113)
  %1116 = fcmp ugt double %1115, %27
  br i1 %1116, label %1121, label %1117

1117:                                             ; preds = %1098
  %1118 = add nsw i32 %1100, 1
  %1119 = sext i32 %1100 to i64
  %1120 = getelementptr inbounds i16, ptr %288, i64 %1119
  store i16 %1102, ptr %1120, align 2, !tbaa !45
  br label %1121

1121:                                             ; preds = %1117, %1098
  %1122 = phi i32 [ %1118, %1117 ], [ %1100, %1098 ]
  %1123 = add nuw nsw i64 %1099, 1
  %1124 = icmp eq i64 %1123, %1090
  br i1 %1124, label %1093, label %1098

1125:                                             ; preds = %1096, %1142
  %1126 = phi i64 [ 0, %1096 ], [ %1145, %1142 ]
  %1127 = phi ptr [ %426, %1096 ], [ %1144, %1142 ]
  %1128 = getelementptr inbounds i16, ptr %288, i64 %1126
  %1129 = load i16, ptr %1128, align 2, !tbaa !45
  %1130 = zext i16 %1129 to i64
  %1131 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1130, i32 4
  %1132 = load i8, ptr %1131, align 1
  %1133 = and i8 %1132, 7
  store i16 %1129, ptr %1127, align 2, !tbaa !45
  %1134 = getelementptr inbounds i16, ptr %1127, i64 1
  %1135 = insertelement <2 x i16> poison, i16 %1129, i64 0
  %1136 = shufflevector <2 x i16> %1135, <2 x i16> poison, <2 x i32> zeroinitializer
  %1137 = add <2 x i16> %1136, <i16 1, i16 2>
  store <2 x i16> %1137, ptr %1134, align 2, !tbaa !45
  %1138 = icmp ult i8 %1133, 4
  br i1 %1138, label %1142, label %1139

1139:                                             ; preds = %1125
  %1140 = add <2 x i16> %1136, <i16 3, i16 4>
  %1141 = getelementptr inbounds i16, ptr %1127, i64 3
  store <2 x i16> %1140, ptr %1141, align 2, !tbaa !45
  br label %1142

1142:                                             ; preds = %1139, %1125
  %1143 = zext i8 %1133 to i64
  %1144 = getelementptr inbounds i16, ptr %1127, i64 %1143
  %1145 = add nuw nsw i64 %1126, 1
  %1146 = icmp eq i64 %1145, %1097
  br i1 %1146, label %1147, label %1125

1147:                                             ; preds = %1142
  %1148 = ptrtoint ptr %1144 to i64
  br label %1149

1149:                                             ; preds = %1147, %1093, %994
  %1150 = phi i64 [ %1148, %1147 ], [ %659, %1093 ], [ %659, %994 ]
  %1151 = sub i64 %1150, %659
  %1152 = lshr exact i64 %1151, 1
  %1153 = trunc i64 %1152 to i32
  %1154 = icmp eq i32 %1153, 0
  br i1 %1154, label %1155, label %1160

1155:                                             ; preds = %1149
  %1156 = load i8, ptr %981, align 1
  %1157 = and i8 %1156, 7
  %1158 = zext i8 %1157 to i32
  %1159 = add nsw i32 %683, %1158
  br label %2890

1160:                                             ; preds = %1149
  %1161 = shl i64 %1151, 31
  %1162 = add i64 %1161, -4294967296
  %1163 = ashr i64 %1162, 32
  %1164 = getelementptr inbounds i16, ptr %426, i64 %1163
  %1165 = load i16, ptr %1164, align 2, !tbaa !45
  %1166 = ashr i64 %1161, 32
  %1167 = getelementptr inbounds i16, ptr %426, i64 %1166
  store i16 %1165, ptr %1167, align 2, !tbaa !45
  br label %1168

1168:                                             ; preds = %1160, %976
  %1169 = phi i32 [ %1153, %1160 ], [ %687, %976 ]
  %1170 = icmp eq i32 %985, 0
  br i1 %1170, label %1175, label %1171

1171:                                             ; preds = %1168
  %1172 = load i32, ptr %698, align 4
  %1173 = and i32 %1172, 1073741824
  %1174 = icmp ne i32 %1173, 0
  br label %1175

1175:                                             ; preds = %1171, %1168
  %1176 = phi i1 [ false, %1168 ], [ %1174, %1171 ]
  %1177 = load i32, ptr %17, align 8, !tbaa !19
  %1178 = add nsw i32 %660, %1177
  %1179 = load i32, ptr %661, align 4, !tbaa !70
  %1180 = icmp sgt i32 %1179, %1178
  br i1 %1180, label %1196, label %1181

1181:                                             ; preds = %1175, %1181
  %1182 = phi i32 [ %1184, %1181 ], [ %1179, %1175 ]
  %1183 = ashr i32 %1182, 1
  %1184 = add nsw i32 %1183, %1182
  %1185 = icmp sgt i32 %1184, %1178
  br i1 %1185, label %1186, label %1181

1186:                                             ; preds = %1181
  %1187 = sext i32 %1184 to i64
  %1188 = icmp slt i32 %1184, 0
  %1189 = shl nsw i64 %1187, 1
  %1190 = select i1 %1188, i64 -1, i64 %1189
  %1191 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1190) #9
  %1192 = load ptr, ptr %12, align 8, !tbaa !47
  %1193 = sext i32 %1177 to i64
  %1194 = shl nsw i64 %1193, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1191, ptr align 2 %1192, i64 %1194, i1 false)
  %1195 = icmp eq ptr %1192, null
  br i1 %1195, label %1200, label %1198

1196:                                             ; preds = %1175
  %1197 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1202

1198:                                             ; preds = %1186
  tail call void @_ZdaPv(ptr noundef nonnull %1192) #10
  %1199 = load i32, ptr %17, align 8, !tbaa !19
  br label %1200

1200:                                             ; preds = %1198, %1186
  %1201 = phi i32 [ %1199, %1198 ], [ %1177, %1186 ]
  store ptr %1191, ptr %12, align 8, !tbaa !47
  store i32 %1184, ptr %661, align 4, !tbaa !70
  br label %1202

1202:                                             ; preds = %1196, %1200
  %1203 = phi i32 [ %1177, %1196 ], [ %1201, %1200 ]
  %1204 = phi ptr [ %1197, %1196 ], [ %1191, %1200 ]
  %1205 = ptrtoint ptr %1204 to i64
  %1206 = add nsw i32 %1203, 1
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i16, ptr %1204, i64 %1207
  %1209 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1210 = icmp eq i32 %1209, 0
  br i1 %1210, label %1391, label %1211

1211:                                             ; preds = %1202
  %1212 = load i8, ptr %718, align 2, !tbaa !52
  %1213 = zext i8 %1212 to i32
  %1214 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1215 = icmp eq i32 %1214, 0
  br i1 %1215, label %1256, label %1216

1216:                                             ; preds = %1211
  %1217 = icmp eq i8 %1212, 1
  br i1 %1217, label %1218, label %1226

1218:                                             ; preds = %1216
  %1219 = icmp sgt i32 %1169, 0
  br i1 %1219, label %1220, label %1331

1220:                                             ; preds = %1218
  %1221 = zext i32 %1169 to i64
  %1222 = and i64 %1221, 1
  %1223 = icmp eq i32 %1169, 1
  br i1 %1223, label %1317, label %1224

1224:                                             ; preds = %1220
  %1225 = and i64 %1221, 4294967294
  br label %1228

1226:                                             ; preds = %1216
  %1227 = add nsw i32 %683, 1
  br label %2890

1228:                                             ; preds = %1251, %1224
  %1229 = phi i64 [ 0, %1224 ], [ %1253, %1251 ]
  %1230 = phi ptr [ %472, %1224 ], [ %1252, %1251 ]
  %1231 = phi i64 [ 0, %1224 ], [ %1254, %1251 ]
  %1232 = getelementptr inbounds i16, ptr %426, i64 %1229
  %1233 = load i16, ptr %1232, align 2, !tbaa !45
  %1234 = zext i16 %1233 to i64
  %1235 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1234, i32 3
  %1236 = load i8, ptr %1235, align 2, !tbaa !52
  %1237 = icmp eq i8 %1236, 1
  br i1 %1237, label %1238, label %1240

1238:                                             ; preds = %1228
  %1239 = getelementptr inbounds i16, ptr %1230, i64 1
  store i16 %1233, ptr %1230, align 2, !tbaa !45
  br label %1240

1240:                                             ; preds = %1238, %1228
  %1241 = phi ptr [ %1239, %1238 ], [ %1230, %1228 ]
  %1242 = or i64 %1229, 1
  %1243 = getelementptr inbounds i16, ptr %426, i64 %1242
  %1244 = load i16, ptr %1243, align 2, !tbaa !45
  %1245 = zext i16 %1244 to i64
  %1246 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1245, i32 3
  %1247 = load i8, ptr %1246, align 2, !tbaa !52
  %1248 = icmp eq i8 %1247, 1
  br i1 %1248, label %1249, label %1251

1249:                                             ; preds = %1240
  %1250 = getelementptr inbounds i16, ptr %1241, i64 1
  store i16 %1244, ptr %1241, align 2, !tbaa !45
  br label %1251

1251:                                             ; preds = %1249, %1240
  %1252 = phi ptr [ %1250, %1249 ], [ %1241, %1240 ]
  %1253 = add nuw nsw i64 %1229, 2
  %1254 = add i64 %1231, 2
  %1255 = icmp eq i64 %1254, %1225
  br i1 %1255, label %1317, label %1228

1256:                                             ; preds = %1211
  %1257 = add i8 %1212, -3
  %1258 = icmp ult i8 %1257, -2
  br i1 %1258, label %1267, label %1259

1259:                                             ; preds = %1256
  %1260 = icmp sgt i32 %1169, 0
  br i1 %1260, label %1261, label %1331

1261:                                             ; preds = %1259
  %1262 = zext i32 %1169 to i64
  %1263 = and i64 %1262, 1
  %1264 = icmp eq i32 %1169, 1
  br i1 %1264, label %1301, label %1265

1265:                                             ; preds = %1261
  %1266 = and i64 %1262, 4294967294
  br label %1269

1267:                                             ; preds = %1256
  %1268 = add nsw i32 %683, 1
  br label %2890

1269:                                             ; preds = %1296, %1265
  %1270 = phi i64 [ 0, %1265 ], [ %1298, %1296 ]
  %1271 = phi ptr [ %472, %1265 ], [ %1297, %1296 ]
  %1272 = phi i64 [ 0, %1265 ], [ %1299, %1296 ]
  %1273 = getelementptr inbounds i16, ptr %426, i64 %1270
  %1274 = load i16, ptr %1273, align 2, !tbaa !45
  %1275 = zext i16 %1274 to i64
  %1276 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1275, i32 3
  %1277 = load i8, ptr %1276, align 2, !tbaa !52
  %1278 = zext i8 %1277 to i32
  %1279 = add nuw nsw i32 %1278, %1213
  %1280 = icmp eq i32 %1279, 3
  br i1 %1280, label %1281, label %1283

1281:                                             ; preds = %1269
  %1282 = getelementptr inbounds i16, ptr %1271, i64 1
  store i16 %1274, ptr %1271, align 2, !tbaa !45
  br label %1283

1283:                                             ; preds = %1281, %1269
  %1284 = phi ptr [ %1282, %1281 ], [ %1271, %1269 ]
  %1285 = or i64 %1270, 1
  %1286 = getelementptr inbounds i16, ptr %426, i64 %1285
  %1287 = load i16, ptr %1286, align 2, !tbaa !45
  %1288 = zext i16 %1287 to i64
  %1289 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1288, i32 3
  %1290 = load i8, ptr %1289, align 2, !tbaa !52
  %1291 = zext i8 %1290 to i32
  %1292 = add nuw nsw i32 %1291, %1213
  %1293 = icmp eq i32 %1292, 3
  br i1 %1293, label %1294, label %1296

1294:                                             ; preds = %1283
  %1295 = getelementptr inbounds i16, ptr %1284, i64 1
  store i16 %1287, ptr %1284, align 2, !tbaa !45
  br label %1296

1296:                                             ; preds = %1294, %1283
  %1297 = phi ptr [ %1295, %1294 ], [ %1284, %1283 ]
  %1298 = add nuw nsw i64 %1270, 2
  %1299 = add i64 %1272, 2
  %1300 = icmp eq i64 %1299, %1266
  br i1 %1300, label %1301, label %1269

1301:                                             ; preds = %1296, %1261
  %1302 = phi ptr [ undef, %1261 ], [ %1297, %1296 ]
  %1303 = phi i64 [ 0, %1261 ], [ %1298, %1296 ]
  %1304 = phi ptr [ %472, %1261 ], [ %1297, %1296 ]
  %1305 = icmp eq i64 %1263, 0
  br i1 %1305, label %1331, label %1306

1306:                                             ; preds = %1301
  %1307 = getelementptr inbounds i16, ptr %426, i64 %1303
  %1308 = load i16, ptr %1307, align 2, !tbaa !45
  %1309 = zext i16 %1308 to i64
  %1310 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1309, i32 3
  %1311 = load i8, ptr %1310, align 2, !tbaa !52
  %1312 = zext i8 %1311 to i32
  %1313 = add nuw nsw i32 %1312, %1213
  %1314 = icmp eq i32 %1313, 3
  br i1 %1314, label %1315, label %1331

1315:                                             ; preds = %1306
  %1316 = getelementptr inbounds i16, ptr %1304, i64 1
  store i16 %1308, ptr %1304, align 2, !tbaa !45
  br label %1331

1317:                                             ; preds = %1251, %1220
  %1318 = phi ptr [ undef, %1220 ], [ %1252, %1251 ]
  %1319 = phi i64 [ 0, %1220 ], [ %1253, %1251 ]
  %1320 = phi ptr [ %472, %1220 ], [ %1252, %1251 ]
  %1321 = icmp eq i64 %1222, 0
  br i1 %1321, label %1331, label %1322

1322:                                             ; preds = %1317
  %1323 = getelementptr inbounds i16, ptr %426, i64 %1319
  %1324 = load i16, ptr %1323, align 2, !tbaa !45
  %1325 = zext i16 %1324 to i64
  %1326 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1325, i32 3
  %1327 = load i8, ptr %1326, align 2, !tbaa !52
  %1328 = icmp eq i8 %1327, 1
  br i1 %1328, label %1329, label %1331

1329:                                             ; preds = %1322
  %1330 = getelementptr inbounds i16, ptr %1320, i64 1
  store i16 %1324, ptr %1320, align 2, !tbaa !45
  br label %1331

1331:                                             ; preds = %1317, %1329, %1322, %1301, %1315, %1306, %1218, %1259
  %1332 = phi ptr [ %472, %1259 ], [ %472, %1218 ], [ %1302, %1301 ], [ %1316, %1315 ], [ %1304, %1306 ], [ %1318, %1317 ], [ %1330, %1329 ], [ %1320, %1322 ]
  %1333 = ptrtoint ptr %1332 to i64
  %1334 = sub i64 %1333, %662
  %1335 = lshr exact i64 %1334, 1
  %1336 = trunc i64 %1335 to i32
  %1337 = icmp sgt i32 %1336, 0
  br i1 %1337, label %1338, label %1600

1338:                                             ; preds = %1331
  %1339 = and i64 %1335, 4294967295
  %1340 = extractelement <2 x double> %714, i64 0
  %1341 = extractelement <2 x double> %714, i64 1
  br label %1342

1342:                                             ; preds = %1338, %1386
  %1343 = phi i64 [ 0, %1338 ], [ %1389, %1386 ]
  %1344 = phi ptr [ %472, %1338 ], [ %1388, %1386 ]
  %1345 = phi ptr [ %1208, %1338 ], [ %1387, %1386 ]
  %1346 = getelementptr inbounds i16, ptr %472, i64 %1343
  %1347 = load i16, ptr %1346, align 2, !tbaa !45
  %1348 = zext i16 %1347 to i64
  %1349 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1348
  %1350 = load double, ptr %1349, align 8, !tbaa !69
  %1351 = fsub double %1340, %1350
  %1352 = fmul double %1351, %1351
  %1353 = getelementptr inbounds %class.Vector, ptr %1349, i64 0, i32 1
  %1354 = load double, ptr %1353, align 8, !tbaa !68
  %1355 = fsub double %1341, %1354
  %1356 = tail call double @llvm.fmuladd.f64(double %1355, double %1355, double %1352)
  %1357 = getelementptr inbounds %class.Vector, ptr %1349, i64 0, i32 2
  %1358 = load double, ptr %1357, align 8, !tbaa !50
  %1359 = fsub double %717, %1358
  %1360 = tail call double @llvm.fmuladd.f64(double %1359, double %1359, double %1356)
  br i1 %1176, label %1361, label %1368

1361:                                             ; preds = %1342
  %1362 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1348
  %1363 = load i32, ptr %1362, align 4
  %1364 = and i32 %1363, 1073741824
  %1365 = icmp ne i32 %1364, 0
  %1366 = fcmp ugt double %1360, %24
  %1367 = select i1 %1365, i1 true, i1 %1366
  br i1 %1367, label %1386, label %1373

1368:                                             ; preds = %1342
  %1369 = fcmp ugt double %1360, %24
  br i1 %1369, label %1386, label %1370

1370:                                             ; preds = %1368
  %1371 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1348
  %1372 = load i32, ptr %1371, align 4
  br label %1373

1373:                                             ; preds = %1370, %1361
  %1374 = phi i32 [ %1372, %1370 ], [ %1363, %1361 ]
  %1375 = shl i32 %1374, 2
  %1376 = ashr exact i32 %1375, 2
  %1377 = icmp slt i32 %1376, %740
  %1378 = icmp sgt i32 %1376, %742
  %1379 = select i1 %1377, i1 true, i1 %1378
  %1380 = select i1 %1379, ptr %1345, ptr %1344
  %1381 = zext i1 %1379 to i64
  %1382 = getelementptr inbounds i16, ptr %1345, i64 %1381
  %1383 = xor i1 %1379, true
  %1384 = zext i1 %1383 to i64
  %1385 = getelementptr inbounds i16, ptr %1344, i64 %1384
  store i16 %1347, ptr %1380, align 2, !tbaa !45
  br label %1386

1386:                                             ; preds = %1373, %1368, %1361
  %1387 = phi ptr [ %1345, %1361 ], [ %1345, %1368 ], [ %1382, %1373 ]
  %1388 = phi ptr [ %1344, %1361 ], [ %1344, %1368 ], [ %1385, %1373 ]
  %1389 = add nuw nsw i64 %1343, 1
  %1390 = icmp eq i64 %1389, %1339
  br i1 %1390, label %1600, label %1342

1391:                                             ; preds = %1202
  %1392 = icmp sgt i32 %1169, 0
  br i1 %1176, label %1393, label %1440

1393:                                             ; preds = %1391
  br i1 %1392, label %1394, label %1600

1394:                                             ; preds = %1393
  %1395 = zext i32 %1169 to i64
  %1396 = extractelement <2 x double> %714, i64 0
  %1397 = extractelement <2 x double> %714, i64 1
  br label %1398

1398:                                             ; preds = %1394, %1435
  %1399 = phi i64 [ 0, %1394 ], [ %1438, %1435 ]
  %1400 = phi ptr [ %472, %1394 ], [ %1437, %1435 ]
  %1401 = phi ptr [ %1208, %1394 ], [ %1436, %1435 ]
  %1402 = getelementptr inbounds i16, ptr %426, i64 %1399
  %1403 = load i16, ptr %1402, align 2, !tbaa !45
  %1404 = zext i16 %1403 to i64
  %1405 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1404
  %1406 = load i32, ptr %1405, align 4
  %1407 = and i32 %1406, 1073741824
  %1408 = icmp eq i32 %1407, 0
  br i1 %1408, label %1409, label %1435

1409:                                             ; preds = %1398
  %1410 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1404
  %1411 = getelementptr inbounds %class.Vector, ptr %1410, i64 0, i32 2
  %1412 = load double, ptr %1411, align 8, !tbaa !50
  %1413 = fsub double %717, %1412
  %1414 = getelementptr inbounds %class.Vector, ptr %1410, i64 0, i32 1
  %1415 = load double, ptr %1414, align 8, !tbaa !68
  %1416 = fsub double %1397, %1415
  %1417 = load double, ptr %1410, align 8, !tbaa !69
  %1418 = fsub double %1396, %1417
  %1419 = fmul double %1418, %1418
  %1420 = tail call double @llvm.fmuladd.f64(double %1416, double %1416, double %1419)
  %1421 = tail call double @llvm.fmuladd.f64(double %1413, double %1413, double %1420)
  %1422 = fcmp ugt double %1421, %24
  br i1 %1422, label %1435, label %1423

1423:                                             ; preds = %1409
  %1424 = shl i32 %1406, 2
  %1425 = ashr exact i32 %1424, 2
  %1426 = icmp slt i32 %1425, %740
  %1427 = icmp sgt i32 %1425, %742
  %1428 = select i1 %1426, i1 true, i1 %1427
  %1429 = select i1 %1428, ptr %1401, ptr %1400
  %1430 = zext i1 %1428 to i64
  %1431 = getelementptr inbounds i16, ptr %1401, i64 %1430
  %1432 = xor i1 %1428, true
  %1433 = zext i1 %1432 to i64
  %1434 = getelementptr inbounds i16, ptr %1400, i64 %1433
  store i16 %1403, ptr %1429, align 2, !tbaa !45
  br label %1435

1435:                                             ; preds = %1423, %1409, %1398
  %1436 = phi ptr [ %1401, %1398 ], [ %1401, %1409 ], [ %1431, %1423 ]
  %1437 = phi ptr [ %1400, %1398 ], [ %1400, %1409 ], [ %1434, %1423 ]
  %1438 = add nuw nsw i64 %1399, 1
  %1439 = icmp eq i64 %1438, %1395
  br i1 %1439, label %1600, label %1398

1440:                                             ; preds = %1391
  br i1 %1392, label %1441, label %1600

1441:                                             ; preds = %1440
  %1442 = icmp ugt i32 %1169, 6
  br i1 %1442, label %1443, label %1551

1443:                                             ; preds = %1441
  %1444 = add nsw i32 %1169, -2
  %1445 = load i16, ptr %426, align 2, !tbaa !45
  %1446 = zext i16 %1445 to i64
  %1447 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1446
  %1448 = load i32, ptr %1447, align 4
  %1449 = load i16, ptr %663, align 2, !tbaa !45
  %1450 = zext i16 %1449 to i64
  %1451 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1450
  %1452 = getelementptr inbounds %class.Vector, ptr %1451, i64 0, i32 2
  %1453 = load double, ptr %1452, align 8, !tbaa !50
  %1454 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1446
  %1455 = getelementptr inbounds %class.Vector, ptr %1454, i64 0, i32 2
  %1456 = load double, ptr %1455, align 8, !tbaa !50
  %1457 = getelementptr inbounds %class.Vector, ptr %1451, i64 0, i32 1
  %1458 = load double, ptr %1457, align 8, !tbaa !68
  %1459 = getelementptr inbounds %class.Vector, ptr %1454, i64 0, i32 1
  %1460 = load double, ptr %1459, align 8, !tbaa !68
  %1461 = load double, ptr %1451, align 8, !tbaa !69
  %1462 = load double, ptr %1454, align 8, !tbaa !69
  %1463 = zext i32 %1444 to i64
  %1464 = extractelement <2 x double> %714, i64 0
  %1465 = extractelement <2 x double> %714, i64 1
  br label %1466

1466:                                             ; preds = %1443, %1544
  %1467 = phi i64 [ 2, %1443 ], [ %1547, %1544 ]
  %1468 = phi i64 [ %1450, %1443 ], [ %1504, %1544 ]
  %1469 = phi i32 [ %1448, %1443 ], [ %1532, %1544 ]
  %1470 = phi ptr [ %472, %1443 ], [ %1546, %1544 ]
  %1471 = phi ptr [ %1208, %1443 ], [ %1545, %1544 ]
  %1472 = phi i16 [ %1445, %1443 ], [ %1497, %1544 ]
  %1473 = phi i16 [ %1449, %1443 ], [ %1500, %1544 ]
  %1474 = phi double [ %1462, %1443 ], [ %1503, %1544 ]
  %1475 = phi double [ %1461, %1443 ], [ %1506, %1544 ]
  %1476 = phi double [ %1460, %1443 ], [ %1508, %1544 ]
  %1477 = phi double [ %1458, %1443 ], [ %1510, %1544 ]
  %1478 = phi double [ %1456, %1443 ], [ %1512, %1544 ]
  %1479 = phi double [ %1453, %1443 ], [ %1514, %1544 ]
  %1480 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1468
  %1481 = load i32, ptr %1480, align 4
  %1482 = shl i32 %1481, 2
  %1483 = ashr exact i32 %1482, 2
  %1484 = fsub double %1464, %1474
  %1485 = fsub double %1464, %1475
  %1486 = fmul double %1484, %1484
  %1487 = fmul double %1485, %1485
  %1488 = fsub double %1465, %1476
  %1489 = fsub double %1465, %1477
  %1490 = tail call double @llvm.fmuladd.f64(double %1488, double %1488, double %1486)
  %1491 = tail call double @llvm.fmuladd.f64(double %1489, double %1489, double %1487)
  %1492 = fsub double %717, %1478
  %1493 = fsub double %717, %1479
  %1494 = tail call double @llvm.fmuladd.f64(double %1492, double %1492, double %1490)
  %1495 = tail call double @llvm.fmuladd.f64(double %1493, double %1493, double %1491)
  %1496 = getelementptr inbounds i16, ptr %426, i64 %1467
  %1497 = load i16, ptr %1496, align 2, !tbaa !45
  %1498 = or i64 %1467, 1
  %1499 = getelementptr inbounds i16, ptr %426, i64 %1498
  %1500 = load i16, ptr %1499, align 2, !tbaa !45
  %1501 = zext i16 %1497 to i64
  %1502 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1501
  %1503 = load double, ptr %1502, align 8, !tbaa !69
  %1504 = zext i16 %1500 to i64
  %1505 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1504
  %1506 = load double, ptr %1505, align 8, !tbaa !69
  %1507 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 1
  %1508 = load double, ptr %1507, align 8, !tbaa !68
  %1509 = getelementptr inbounds %class.Vector, ptr %1505, i64 0, i32 1
  %1510 = load double, ptr %1509, align 8, !tbaa !68
  %1511 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 2
  %1512 = load double, ptr %1511, align 8, !tbaa !50
  %1513 = getelementptr inbounds %class.Vector, ptr %1505, i64 0, i32 2
  %1514 = load double, ptr %1513, align 8, !tbaa !50
  %1515 = fcmp ugt double %1494, %24
  br i1 %1515, label %1528, label %1516

1516:                                             ; preds = %1466
  %1517 = shl i32 %1469, 2
  %1518 = ashr exact i32 %1517, 2
  %1519 = icmp slt i32 %1518, %740
  %1520 = icmp sgt i32 %1518, %742
  %1521 = select i1 %1519, i1 true, i1 %1520
  %1522 = select i1 %1521, ptr %1471, ptr %1470
  %1523 = zext i1 %1521 to i64
  %1524 = getelementptr inbounds i16, ptr %1471, i64 %1523
  %1525 = xor i1 %1521, true
  %1526 = zext i1 %1525 to i64
  %1527 = getelementptr inbounds i16, ptr %1470, i64 %1526
  store i16 %1472, ptr %1522, align 2, !tbaa !45
  br label %1528

1528:                                             ; preds = %1516, %1466
  %1529 = phi ptr [ %1471, %1466 ], [ %1524, %1516 ]
  %1530 = phi ptr [ %1470, %1466 ], [ %1527, %1516 ]
  %1531 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1501
  %1532 = load i32, ptr %1531, align 4
  %1533 = fcmp ugt double %1495, %24
  br i1 %1533, label %1544, label %1534

1534:                                             ; preds = %1528
  %1535 = icmp slt i32 %1483, %740
  %1536 = icmp sgt i32 %1483, %742
  %1537 = select i1 %1535, i1 true, i1 %1536
  %1538 = select i1 %1537, ptr %1529, ptr %1530
  %1539 = zext i1 %1537 to i64
  %1540 = getelementptr inbounds i16, ptr %1529, i64 %1539
  %1541 = xor i1 %1537, true
  %1542 = zext i1 %1541 to i64
  %1543 = getelementptr inbounds i16, ptr %1530, i64 %1542
  store i16 %1473, ptr %1538, align 2, !tbaa !45
  br label %1544

1544:                                             ; preds = %1534, %1528
  %1545 = phi ptr [ %1529, %1528 ], [ %1540, %1534 ]
  %1546 = phi ptr [ %1530, %1528 ], [ %1543, %1534 ]
  %1547 = add nuw nsw i64 %1467, 2
  %1548 = icmp ult i64 %1547, %1463
  br i1 %1548, label %1466, label %1549

1549:                                             ; preds = %1544
  %1550 = trunc i64 %1467 to i32
  br label %1551

1551:                                             ; preds = %1549, %1441
  %1552 = phi i32 [ %1550, %1549 ], [ 0, %1441 ]
  %1553 = phi ptr [ %1545, %1549 ], [ %1208, %1441 ]
  %1554 = phi ptr [ %1546, %1549 ], [ %472, %1441 ]
  %1555 = icmp slt i32 %1552, %1169
  br i1 %1555, label %1556, label %1600

1556:                                             ; preds = %1551
  %1557 = zext i32 %1552 to i64
  %1558 = zext i32 %1169 to i64
  %1559 = extractelement <2 x double> %714, i64 0
  %1560 = extractelement <2 x double> %714, i64 1
  br label %1561

1561:                                             ; preds = %1556, %1595
  %1562 = phi i64 [ %1557, %1556 ], [ %1598, %1595 ]
  %1563 = phi ptr [ %1554, %1556 ], [ %1597, %1595 ]
  %1564 = phi ptr [ %1553, %1556 ], [ %1596, %1595 ]
  %1565 = getelementptr inbounds i16, ptr %426, i64 %1562
  %1566 = load i16, ptr %1565, align 2, !tbaa !45
  %1567 = zext i16 %1566 to i64
  %1568 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1567
  %1569 = load double, ptr %1568, align 8, !tbaa !69
  %1570 = getelementptr inbounds %class.Vector, ptr %1568, i64 0, i32 1
  %1571 = load double, ptr %1570, align 8, !tbaa !68
  %1572 = getelementptr inbounds %class.Vector, ptr %1568, i64 0, i32 2
  %1573 = load double, ptr %1572, align 8, !tbaa !50
  %1574 = fsub double %1559, %1569
  %1575 = fmul double %1574, %1574
  %1576 = fsub double %1560, %1571
  %1577 = tail call double @llvm.fmuladd.f64(double %1576, double %1576, double %1575)
  %1578 = fsub double %717, %1573
  %1579 = tail call double @llvm.fmuladd.f64(double %1578, double %1578, double %1577)
  %1580 = fcmp ugt double %1579, %24
  br i1 %1580, label %1595, label %1581

1581:                                             ; preds = %1561
  %1582 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1567
  %1583 = load i32, ptr %1582, align 4
  %1584 = shl i32 %1583, 2
  %1585 = ashr exact i32 %1584, 2
  %1586 = icmp slt i32 %1585, %740
  %1587 = icmp sgt i32 %1585, %742
  %1588 = select i1 %1586, i1 true, i1 %1587
  %1589 = select i1 %1588, ptr %1564, ptr %1563
  %1590 = zext i1 %1588 to i64
  %1591 = getelementptr inbounds i16, ptr %1564, i64 %1590
  %1592 = xor i1 %1588, true
  %1593 = zext i1 %1592 to i64
  %1594 = getelementptr inbounds i16, ptr %1563, i64 %1593
  store i16 %1566, ptr %1589, align 2, !tbaa !45
  br label %1595

1595:                                             ; preds = %1581, %1561
  %1596 = phi ptr [ %1564, %1561 ], [ %1591, %1581 ]
  %1597 = phi ptr [ %1563, %1561 ], [ %1594, %1581 ]
  %1598 = add nuw nsw i64 %1562, 1
  %1599 = icmp eq i64 %1598, %1558
  br i1 %1599, label %1600, label %1561

1600:                                             ; preds = %1386, %1595, %1435, %1331, %1551, %1393, %1440
  %1601 = phi ptr [ %1208, %1440 ], [ %1208, %1393 ], [ %1553, %1551 ], [ %1208, %1331 ], [ %1436, %1435 ], [ %1596, %1595 ], [ %1387, %1386 ]
  %1602 = phi ptr [ %472, %1440 ], [ %472, %1393 ], [ %1554, %1551 ], [ %472, %1331 ], [ %1437, %1435 ], [ %1597, %1595 ], [ %1388, %1386 ]
  %1603 = icmp eq ptr %1601, %1208
  %1604 = icmp eq ptr %1602, %472
  %1605 = select i1 %1603, i1 %1604, i1 false
  br i1 %1605, label %1606, label %1608

1606:                                             ; preds = %1600
  %1607 = add nsw i32 %683, 1
  br label %2890

1608:                                             ; preds = %1600
  %1609 = trunc i32 %683 to i16
  %1610 = load i32, ptr %17, align 8, !tbaa !19
  %1611 = add nsw i32 %1610, -1
  %1612 = sext i32 %1611 to i64
  %1613 = getelementptr inbounds i16, ptr %1204, i64 %1612
  store i16 %1609, ptr %1613, align 2, !tbaa !45
  %1614 = ptrtoint ptr %1602 to i64
  %1615 = sub i64 %1614, %662
  %1616 = lshr exact i64 %1615, 1
  %1617 = trunc i64 %1616 to i32
  %1618 = icmp sgt i32 %1617, 0
  br i1 %1618, label %1619, label %1719

1619:                                             ; preds = %1608
  %1620 = and i64 %1616, 4294967295
  %1621 = and i64 %1616, 1
  %1622 = icmp eq i64 %1620, 1
  br i1 %1622, label %1687, label %1623

1623:                                             ; preds = %1619
  %1624 = sub nsw i64 %1620, %1621
  br label %1625

1625:                                             ; preds = %1680, %1623
  %1626 = phi i64 [ 0, %1623 ], [ %1684, %1680 ]
  %1627 = phi ptr [ %1601, %1623 ], [ %1683, %1680 ]
  %1628 = phi ptr [ %334, %1623 ], [ %1682, %1680 ]
  %1629 = phi ptr [ %380, %1623 ], [ %1681, %1680 ]
  %1630 = phi i64 [ 0, %1623 ], [ %1685, %1680 ]
  %1631 = getelementptr inbounds i16, ptr %472, i64 %1626
  %1632 = load i16, ptr %1631, align 2, !tbaa !45
  %1633 = zext i16 %1632 to i64
  %1634 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1633
  %1635 = load i32, ptr %1634, align 4
  %1636 = shl i32 %1635, 2
  %1637 = ashr exact i32 %1636, 2
  %1638 = sext i32 %1637 to i64
  %1639 = getelementptr inbounds i8, ptr %977, i64 %1638
  %1640 = load i8, ptr %1639, align 1, !tbaa !59
  %1641 = sext i8 %1640 to i32
  switch i32 %1641, label %1653 [
    i32 0, label %1642
    i32 1, label %1644
    i32 2, label %1646
  ]

1642:                                             ; preds = %1625
  %1643 = getelementptr inbounds i16, ptr %1627, i64 1
  br label %1648

1644:                                             ; preds = %1625
  %1645 = getelementptr inbounds i16, ptr %1628, i64 1
  br label %1648

1646:                                             ; preds = %1625
  %1647 = getelementptr inbounds i16, ptr %1629, i64 1
  br label %1648

1648:                                             ; preds = %1642, %1644, %1646
  %1649 = phi ptr [ %1629, %1646 ], [ %1628, %1644 ], [ %1627, %1642 ]
  %1650 = phi ptr [ %1647, %1646 ], [ %1629, %1644 ], [ %1629, %1642 ]
  %1651 = phi ptr [ %1628, %1646 ], [ %1645, %1644 ], [ %1628, %1642 ]
  %1652 = phi ptr [ %1627, %1646 ], [ %1627, %1644 ], [ %1643, %1642 ]
  store i16 %1632, ptr %1649, align 2, !tbaa !45
  br label %1653

1653:                                             ; preds = %1648, %1625
  %1654 = phi ptr [ %1629, %1625 ], [ %1650, %1648 ]
  %1655 = phi ptr [ %1628, %1625 ], [ %1651, %1648 ]
  %1656 = phi ptr [ %1627, %1625 ], [ %1652, %1648 ]
  %1657 = or i64 %1626, 1
  %1658 = getelementptr inbounds i16, ptr %472, i64 %1657
  %1659 = load i16, ptr %1658, align 2, !tbaa !45
  %1660 = zext i16 %1659 to i64
  %1661 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1660
  %1662 = load i32, ptr %1661, align 4
  %1663 = shl i32 %1662, 2
  %1664 = ashr exact i32 %1663, 2
  %1665 = sext i32 %1664 to i64
  %1666 = getelementptr inbounds i8, ptr %977, i64 %1665
  %1667 = load i8, ptr %1666, align 1, !tbaa !59
  %1668 = sext i8 %1667 to i32
  switch i32 %1668, label %1680 [
    i32 0, label %1673
    i32 1, label %1671
    i32 2, label %1669
  ]

1669:                                             ; preds = %1653
  %1670 = getelementptr inbounds i16, ptr %1654, i64 1
  br label %1675

1671:                                             ; preds = %1653
  %1672 = getelementptr inbounds i16, ptr %1655, i64 1
  br label %1675

1673:                                             ; preds = %1653
  %1674 = getelementptr inbounds i16, ptr %1656, i64 1
  br label %1675

1675:                                             ; preds = %1673, %1671, %1669
  %1676 = phi ptr [ %1654, %1669 ], [ %1655, %1671 ], [ %1656, %1673 ]
  %1677 = phi ptr [ %1670, %1669 ], [ %1654, %1671 ], [ %1654, %1673 ]
  %1678 = phi ptr [ %1655, %1669 ], [ %1672, %1671 ], [ %1655, %1673 ]
  %1679 = phi ptr [ %1656, %1669 ], [ %1656, %1671 ], [ %1674, %1673 ]
  store i16 %1659, ptr %1676, align 2, !tbaa !45
  br label %1680

1680:                                             ; preds = %1675, %1653
  %1681 = phi ptr [ %1654, %1653 ], [ %1677, %1675 ]
  %1682 = phi ptr [ %1655, %1653 ], [ %1678, %1675 ]
  %1683 = phi ptr [ %1656, %1653 ], [ %1679, %1675 ]
  %1684 = add nuw nsw i64 %1626, 2
  %1685 = add i64 %1630, 2
  %1686 = icmp eq i64 %1685, %1624
  br i1 %1686, label %1687, label %1625

1687:                                             ; preds = %1680, %1619
  %1688 = phi ptr [ undef, %1619 ], [ %1681, %1680 ]
  %1689 = phi ptr [ undef, %1619 ], [ %1682, %1680 ]
  %1690 = phi ptr [ undef, %1619 ], [ %1683, %1680 ]
  %1691 = phi i64 [ 0, %1619 ], [ %1684, %1680 ]
  %1692 = phi ptr [ %1601, %1619 ], [ %1683, %1680 ]
  %1693 = phi ptr [ %334, %1619 ], [ %1682, %1680 ]
  %1694 = phi ptr [ %380, %1619 ], [ %1681, %1680 ]
  %1695 = icmp eq i64 %1621, 0
  br i1 %1695, label %1719, label %1696

1696:                                             ; preds = %1687
  %1697 = getelementptr inbounds i16, ptr %472, i64 %1691
  %1698 = load i16, ptr %1697, align 2, !tbaa !45
  %1699 = zext i16 %1698 to i64
  %1700 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1699
  %1701 = load i32, ptr %1700, align 4
  %1702 = shl i32 %1701, 2
  %1703 = ashr exact i32 %1702, 2
  %1704 = sext i32 %1703 to i64
  %1705 = getelementptr inbounds i8, ptr %977, i64 %1704
  %1706 = load i8, ptr %1705, align 1, !tbaa !59
  %1707 = sext i8 %1706 to i32
  switch i32 %1707, label %1719 [
    i32 0, label %1712
    i32 1, label %1710
    i32 2, label %1708
  ]

1708:                                             ; preds = %1696
  %1709 = getelementptr inbounds i16, ptr %1694, i64 1
  br label %1714

1710:                                             ; preds = %1696
  %1711 = getelementptr inbounds i16, ptr %1693, i64 1
  br label %1714

1712:                                             ; preds = %1696
  %1713 = getelementptr inbounds i16, ptr %1692, i64 1
  br label %1714

1714:                                             ; preds = %1712, %1710, %1708
  %1715 = phi ptr [ %1694, %1708 ], [ %1693, %1710 ], [ %1692, %1712 ]
  %1716 = phi ptr [ %1709, %1708 ], [ %1694, %1710 ], [ %1694, %1712 ]
  %1717 = phi ptr [ %1693, %1708 ], [ %1711, %1710 ], [ %1693, %1712 ]
  %1718 = phi ptr [ %1692, %1708 ], [ %1692, %1710 ], [ %1713, %1712 ]
  store i16 %1698, ptr %1715, align 2, !tbaa !45
  br label %1719

1719:                                             ; preds = %1687, %1714, %1696, %1608
  %1720 = phi ptr [ %380, %1608 ], [ %1688, %1687 ], [ %1694, %1696 ], [ %1716, %1714 ]
  %1721 = phi ptr [ %334, %1608 ], [ %1689, %1687 ], [ %1693, %1696 ], [ %1717, %1714 ]
  %1722 = phi ptr [ %1601, %1608 ], [ %1690, %1687 ], [ %1692, %1696 ], [ %1718, %1714 ]
  %1723 = ptrtoint ptr %1722 to i64
  %1724 = ptrtoint ptr %1208 to i64
  %1725 = sub i64 %1723, %1724
  %1726 = lshr exact i64 %1725, 1
  %1727 = trunc i64 %1726 to i32
  %1728 = icmp eq i32 %1727, 0
  %1729 = shl i64 %1725, 31
  br i1 %1728, label %1735, label %1730

1730:                                             ; preds = %1719
  %1731 = add i64 %1729, -4294967296
  %1732 = ashr i64 %1731, 32
  %1733 = getelementptr inbounds i16, ptr %1208, i64 %1732
  %1734 = load i16, ptr %1733, align 2, !tbaa !45
  br label %1735

1735:                                             ; preds = %1719, %1730
  %1736 = phi i16 [ %1734, %1730 ], [ -1, %1719 ]
  %1737 = ashr i64 %1729, 32
  %1738 = getelementptr inbounds i16, ptr %1208, i64 %1737
  store i16 %1736, ptr %1738, align 2, !tbaa !45
  %1739 = trunc i64 %1726 to i16
  %1740 = add i16 %1739, 1
  %1741 = sext i32 %1610 to i64
  %1742 = getelementptr inbounds i16, ptr %1204, i64 %1741
  store i16 %1740, ptr %1742, align 2, !tbaa !45
  %1743 = add i32 %1610, 2
  %1744 = add i32 %1743, %1727
  %1745 = ptrtoint ptr %1721 to i64
  %1746 = sub i64 %1745, %664
  %1747 = lshr exact i64 %1746, 1
  %1748 = trunc i64 %1747 to i32
  %1749 = add nsw i32 %1744, 1
  %1750 = sext i32 %1749 to i64
  %1751 = getelementptr i16, ptr %1204, i64 %1750
  %1752 = icmp sgt i32 %1748, 0
  br i1 %1752, label %1753, label %1843

1753:                                             ; preds = %1735
  %1754 = and i64 %1747, 4294967295
  %1755 = icmp ult i64 %1754, 8
  br i1 %1755, label %1799, label %1756

1756:                                             ; preds = %1753
  %1757 = shl nsw i64 %1750, 1
  %1758 = add i64 %1757, %1205
  %1759 = sub i64 %1758, %664
  %1760 = icmp ult i64 %1759, 128
  br i1 %1760, label %1799, label %1761

1761:                                             ; preds = %1756
  %1762 = icmp ult i64 %1754, 64
  br i1 %1762, label %1786, label %1763

1763:                                             ; preds = %1761
  %1764 = and i64 %1747, 63
  %1765 = sub nsw i64 %1754, %1764
  br label %1766

1766:                                             ; preds = %1766, %1763
  %1767 = phi i64 [ 0, %1763 ], [ %1780, %1766 ]
  %1768 = getelementptr inbounds i16, ptr %334, i64 %1767
  %1769 = load <16 x i16>, ptr %1768, align 2, !tbaa !45
  %1770 = getelementptr inbounds i16, ptr %1768, i64 16
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !45
  %1772 = getelementptr inbounds i16, ptr %1768, i64 32
  %1773 = load <16 x i16>, ptr %1772, align 2, !tbaa !45
  %1774 = getelementptr inbounds i16, ptr %1768, i64 48
  %1775 = load <16 x i16>, ptr %1774, align 2, !tbaa !45
  %1776 = getelementptr inbounds i16, ptr %1751, i64 %1767
  store <16 x i16> %1769, ptr %1776, align 2, !tbaa !45
  %1777 = getelementptr inbounds i16, ptr %1776, i64 16
  store <16 x i16> %1771, ptr %1777, align 2, !tbaa !45
  %1778 = getelementptr inbounds i16, ptr %1776, i64 32
  store <16 x i16> %1773, ptr %1778, align 2, !tbaa !45
  %1779 = getelementptr inbounds i16, ptr %1776, i64 48
  store <16 x i16> %1775, ptr %1779, align 2, !tbaa !45
  %1780 = add nuw i64 %1767, 64
  %1781 = icmp eq i64 %1780, %1765
  br i1 %1781, label %1782, label %1766, !llvm.loop !118

1782:                                             ; preds = %1766
  %1783 = icmp eq i64 %1764, 0
  br i1 %1783, label %1837, label %1784

1784:                                             ; preds = %1782
  %1785 = icmp ult i64 %1764, 8
  br i1 %1785, label %1799, label %1786

1786:                                             ; preds = %1761, %1784
  %1787 = phi i64 [ %1765, %1784 ], [ 0, %1761 ]
  %1788 = and i64 %1747, 7
  %1789 = sub nsw i64 %1754, %1788
  br label %1790

1790:                                             ; preds = %1790, %1786
  %1791 = phi i64 [ %1787, %1786 ], [ %1795, %1790 ]
  %1792 = getelementptr inbounds i16, ptr %334, i64 %1791
  %1793 = load <8 x i16>, ptr %1792, align 2, !tbaa !45
  %1794 = getelementptr inbounds i16, ptr %1751, i64 %1791
  store <8 x i16> %1793, ptr %1794, align 2, !tbaa !45
  %1795 = add nuw i64 %1791, 8
  %1796 = icmp eq i64 %1795, %1789
  br i1 %1796, label %1797, label %1790, !llvm.loop !119

1797:                                             ; preds = %1790
  %1798 = icmp eq i64 %1788, 0
  br i1 %1798, label %1837, label %1799

1799:                                             ; preds = %1756, %1753, %1784, %1797
  %1800 = phi i64 [ 0, %1753 ], [ 0, %1756 ], [ %1765, %1784 ], [ %1789, %1797 ]
  %1801 = sub i64 %1747, %1800
  %1802 = xor i64 %1800, -1
  %1803 = add nsw i64 %1754, %1802
  %1804 = and i64 %1801, 3
  %1805 = icmp eq i64 %1804, 0
  br i1 %1805, label %1815, label %1806

1806:                                             ; preds = %1799, %1806
  %1807 = phi i64 [ %1812, %1806 ], [ %1800, %1799 ]
  %1808 = phi i64 [ %1813, %1806 ], [ 0, %1799 ]
  %1809 = getelementptr inbounds i16, ptr %334, i64 %1807
  %1810 = load i16, ptr %1809, align 2, !tbaa !45
  %1811 = getelementptr inbounds i16, ptr %1751, i64 %1807
  store i16 %1810, ptr %1811, align 2, !tbaa !45
  %1812 = add nuw nsw i64 %1807, 1
  %1813 = add i64 %1808, 1
  %1814 = icmp eq i64 %1813, %1804
  br i1 %1814, label %1815, label %1806, !llvm.loop !120

1815:                                             ; preds = %1806, %1799
  %1816 = phi i64 [ %1800, %1799 ], [ %1812, %1806 ]
  %1817 = icmp ult i64 %1803, 3
  br i1 %1817, label %1837, label %1818

1818:                                             ; preds = %1815, %1818
  %1819 = phi i64 [ %1835, %1818 ], [ %1816, %1815 ]
  %1820 = getelementptr inbounds i16, ptr %334, i64 %1819
  %1821 = load i16, ptr %1820, align 2, !tbaa !45
  %1822 = getelementptr inbounds i16, ptr %1751, i64 %1819
  store i16 %1821, ptr %1822, align 2, !tbaa !45
  %1823 = add nuw nsw i64 %1819, 1
  %1824 = getelementptr inbounds i16, ptr %334, i64 %1823
  %1825 = load i16, ptr %1824, align 2, !tbaa !45
  %1826 = getelementptr inbounds i16, ptr %1751, i64 %1823
  store i16 %1825, ptr %1826, align 2, !tbaa !45
  %1827 = add nuw nsw i64 %1819, 2
  %1828 = getelementptr inbounds i16, ptr %334, i64 %1827
  %1829 = load i16, ptr %1828, align 2, !tbaa !45
  %1830 = getelementptr inbounds i16, ptr %1751, i64 %1827
  store i16 %1829, ptr %1830, align 2, !tbaa !45
  %1831 = add nuw nsw i64 %1819, 3
  %1832 = getelementptr inbounds i16, ptr %334, i64 %1831
  %1833 = load i16, ptr %1832, align 2, !tbaa !45
  %1834 = getelementptr inbounds i16, ptr %1751, i64 %1831
  store i16 %1833, ptr %1834, align 2, !tbaa !45
  %1835 = add nuw nsw i64 %1819, 4
  %1836 = icmp eq i64 %1835, %1754
  br i1 %1836, label %1837, label %1818, !llvm.loop !121

1837:                                             ; preds = %1815, %1818, %1782, %1797
  %1838 = shl i64 %1746, 31
  %1839 = add i64 %1838, -4294967296
  %1840 = ashr i64 %1839, 32
  %1841 = getelementptr inbounds i16, ptr %1751, i64 %1840
  %1842 = load i16, ptr %1841, align 2, !tbaa !45
  br label %1843

1843:                                             ; preds = %1735, %1837
  %1844 = phi i64 [ %1747, %1837 ], [ 0, %1735 ]
  %1845 = phi i16 [ %1842, %1837 ], [ -1, %1735 ]
  %1846 = and i64 %1844, 4294967295
  %1847 = getelementptr inbounds i16, ptr %1751, i64 %1846
  store i16 %1845, ptr %1847, align 2, !tbaa !45
  %1848 = trunc i64 %1747 to i16
  %1849 = add i16 %1848, 1
  %1850 = sext i32 %1744 to i64
  %1851 = getelementptr inbounds i16, ptr %1204, i64 %1850
  store i16 %1849, ptr %1851, align 2, !tbaa !45
  %1852 = add nsw i32 %1748, 2
  %1853 = add nsw i32 %1852, %1744
  %1854 = ptrtoint ptr %1720 to i64
  %1855 = sub i64 %1854, %665
  %1856 = lshr exact i64 %1855, 1
  %1857 = trunc i64 %1856 to i32
  %1858 = add nsw i32 %1853, 1
  %1859 = sext i32 %1858 to i64
  %1860 = getelementptr i16, ptr %1204, i64 %1859
  %1861 = icmp sgt i32 %1857, 0
  br i1 %1861, label %1862, label %1952

1862:                                             ; preds = %1843
  %1863 = and i64 %1856, 4294967295
  %1864 = icmp ult i64 %1863, 8
  br i1 %1864, label %1908, label %1865

1865:                                             ; preds = %1862
  %1866 = shl nsw i64 %1859, 1
  %1867 = add i64 %1866, %1205
  %1868 = sub i64 %1867, %665
  %1869 = icmp ult i64 %1868, 128
  br i1 %1869, label %1908, label %1870

1870:                                             ; preds = %1865
  %1871 = icmp ult i64 %1863, 64
  br i1 %1871, label %1895, label %1872

1872:                                             ; preds = %1870
  %1873 = and i64 %1856, 63
  %1874 = sub nsw i64 %1863, %1873
  br label %1875

1875:                                             ; preds = %1875, %1872
  %1876 = phi i64 [ 0, %1872 ], [ %1889, %1875 ]
  %1877 = getelementptr inbounds i16, ptr %380, i64 %1876
  %1878 = load <16 x i16>, ptr %1877, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1877, i64 16
  %1880 = load <16 x i16>, ptr %1879, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1877, i64 32
  %1882 = load <16 x i16>, ptr %1881, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1877, i64 48
  %1884 = load <16 x i16>, ptr %1883, align 2, !tbaa !45
  %1885 = getelementptr inbounds i16, ptr %1860, i64 %1876
  store <16 x i16> %1878, ptr %1885, align 2, !tbaa !45
  %1886 = getelementptr inbounds i16, ptr %1885, i64 16
  store <16 x i16> %1880, ptr %1886, align 2, !tbaa !45
  %1887 = getelementptr inbounds i16, ptr %1885, i64 32
  store <16 x i16> %1882, ptr %1887, align 2, !tbaa !45
  %1888 = getelementptr inbounds i16, ptr %1885, i64 48
  store <16 x i16> %1884, ptr %1888, align 2, !tbaa !45
  %1889 = add nuw i64 %1876, 64
  %1890 = icmp eq i64 %1889, %1874
  br i1 %1890, label %1891, label %1875, !llvm.loop !122

1891:                                             ; preds = %1875
  %1892 = icmp eq i64 %1873, 0
  br i1 %1892, label %1946, label %1893

1893:                                             ; preds = %1891
  %1894 = icmp ult i64 %1873, 8
  br i1 %1894, label %1908, label %1895

1895:                                             ; preds = %1870, %1893
  %1896 = phi i64 [ %1874, %1893 ], [ 0, %1870 ]
  %1897 = and i64 %1856, 7
  %1898 = sub nsw i64 %1863, %1897
  br label %1899

1899:                                             ; preds = %1899, %1895
  %1900 = phi i64 [ %1896, %1895 ], [ %1904, %1899 ]
  %1901 = getelementptr inbounds i16, ptr %380, i64 %1900
  %1902 = load <8 x i16>, ptr %1901, align 2, !tbaa !45
  %1903 = getelementptr inbounds i16, ptr %1860, i64 %1900
  store <8 x i16> %1902, ptr %1903, align 2, !tbaa !45
  %1904 = add nuw i64 %1900, 8
  %1905 = icmp eq i64 %1904, %1898
  br i1 %1905, label %1906, label %1899, !llvm.loop !123

1906:                                             ; preds = %1899
  %1907 = icmp eq i64 %1897, 0
  br i1 %1907, label %1946, label %1908

1908:                                             ; preds = %1865, %1862, %1893, %1906
  %1909 = phi i64 [ 0, %1862 ], [ 0, %1865 ], [ %1874, %1893 ], [ %1898, %1906 ]
  %1910 = sub i64 %1856, %1909
  %1911 = xor i64 %1909, -1
  %1912 = add nsw i64 %1863, %1911
  %1913 = and i64 %1910, 3
  %1914 = icmp eq i64 %1913, 0
  br i1 %1914, label %1924, label %1915

1915:                                             ; preds = %1908, %1915
  %1916 = phi i64 [ %1921, %1915 ], [ %1909, %1908 ]
  %1917 = phi i64 [ %1922, %1915 ], [ 0, %1908 ]
  %1918 = getelementptr inbounds i16, ptr %380, i64 %1916
  %1919 = load i16, ptr %1918, align 2, !tbaa !45
  %1920 = getelementptr inbounds i16, ptr %1860, i64 %1916
  store i16 %1919, ptr %1920, align 2, !tbaa !45
  %1921 = add nuw nsw i64 %1916, 1
  %1922 = add i64 %1917, 1
  %1923 = icmp eq i64 %1922, %1913
  br i1 %1923, label %1924, label %1915, !llvm.loop !124

1924:                                             ; preds = %1915, %1908
  %1925 = phi i64 [ %1909, %1908 ], [ %1921, %1915 ]
  %1926 = icmp ult i64 %1912, 3
  br i1 %1926, label %1946, label %1927

1927:                                             ; preds = %1924, %1927
  %1928 = phi i64 [ %1944, %1927 ], [ %1925, %1924 ]
  %1929 = getelementptr inbounds i16, ptr %380, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1860, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1928, 1
  %1933 = getelementptr inbounds i16, ptr %380, i64 %1932
  %1934 = load i16, ptr %1933, align 2, !tbaa !45
  %1935 = getelementptr inbounds i16, ptr %1860, i64 %1932
  store i16 %1934, ptr %1935, align 2, !tbaa !45
  %1936 = add nuw nsw i64 %1928, 2
  %1937 = getelementptr inbounds i16, ptr %380, i64 %1936
  %1938 = load i16, ptr %1937, align 2, !tbaa !45
  %1939 = getelementptr inbounds i16, ptr %1860, i64 %1936
  store i16 %1938, ptr %1939, align 2, !tbaa !45
  %1940 = add nuw nsw i64 %1928, 3
  %1941 = getelementptr inbounds i16, ptr %380, i64 %1940
  %1942 = load i16, ptr %1941, align 2, !tbaa !45
  %1943 = getelementptr inbounds i16, ptr %1860, i64 %1940
  store i16 %1942, ptr %1943, align 2, !tbaa !45
  %1944 = add nuw nsw i64 %1928, 4
  %1945 = icmp eq i64 %1944, %1863
  br i1 %1945, label %1946, label %1927, !llvm.loop !125

1946:                                             ; preds = %1924, %1927, %1891, %1906
  %1947 = shl i64 %1855, 31
  %1948 = add i64 %1947, -4294967296
  %1949 = ashr i64 %1948, 32
  %1950 = getelementptr inbounds i16, ptr %1860, i64 %1949
  %1951 = load i16, ptr %1950, align 2, !tbaa !45
  br label %1952

1952:                                             ; preds = %1843, %1946
  %1953 = phi i64 [ %1856, %1946 ], [ 0, %1843 ]
  %1954 = phi i16 [ %1951, %1946 ], [ -1, %1843 ]
  %1955 = and i64 %1953, 4294967295
  %1956 = getelementptr inbounds i16, ptr %1860, i64 %1955
  store i16 %1954, ptr %1956, align 2, !tbaa !45
  %1957 = trunc i64 %1856 to i16
  %1958 = add i16 %1957, 1
  %1959 = sext i32 %1853 to i64
  %1960 = getelementptr inbounds i16, ptr %1204, i64 %1959
  store i16 %1958, ptr %1960, align 2, !tbaa !45
  %1961 = add i32 %1857, 3
  %1962 = add i32 %1961, %1853
  %1963 = select i1 %147, i32 1, i32 %1962
  store i32 %1963, ptr %17, align 8, !tbaa !19
  br label %1994

1964:                                             ; preds = %711
  %1965 = load ptr, ptr %12, align 8, !tbaa !47
  %1966 = load i32, ptr %17, align 8, !tbaa !19
  %1967 = add i32 %1966, 1
  %1968 = sext i32 %1967 to i64
  %1969 = getelementptr inbounds i16, ptr %1965, i64 %1968
  %1970 = sext i32 %1966 to i64
  %1971 = getelementptr inbounds i16, ptr %1965, i64 %1970
  %1972 = load i16, ptr %1971, align 2, !tbaa !45
  %1973 = zext i16 %1972 to i32
  %1974 = add i32 %1967, %1973
  %1975 = add nsw i32 %1973, -1
  %1976 = add i32 %1974, 1
  %1977 = sext i32 %1976 to i64
  %1978 = getelementptr inbounds i16, ptr %1965, i64 %1977
  %1979 = sext i32 %1974 to i64
  %1980 = getelementptr inbounds i16, ptr %1965, i64 %1979
  %1981 = load i16, ptr %1980, align 2, !tbaa !45
  %1982 = zext i16 %1981 to i32
  %1983 = add i32 %1976, %1982
  %1984 = add nsw i32 %1982, -1
  %1985 = add i32 %1983, 1
  %1986 = sext i32 %1985 to i64
  %1987 = getelementptr inbounds i16, ptr %1965, i64 %1986
  %1988 = sext i32 %1983 to i64
  %1989 = getelementptr inbounds i16, ptr %1965, i64 %1988
  %1990 = load i16, ptr %1989, align 2, !tbaa !45
  %1991 = zext i16 %1990 to i32
  %1992 = add i32 %1985, %1991
  store i32 %1992, ptr %17, align 8, !tbaa !19
  %1993 = add nsw i32 %1991, -1
  br label %1994

1994:                                             ; preds = %1952, %1964
  %1995 = phi i32 [ %1993, %1964 ], [ %1857, %1952 ]
  %1996 = phi ptr [ %1987, %1964 ], [ %1860, %1952 ]
  %1997 = phi i32 [ %1984, %1964 ], [ %1748, %1952 ]
  %1998 = phi ptr [ %1978, %1964 ], [ %1751, %1952 ]
  %1999 = phi i32 [ %1975, %1964 ], [ %1727, %1952 ]
  %2000 = phi ptr [ %1969, %1964 ], [ %1208, %1952 ]
  %2001 = phi i32 [ %687, %1964 ], [ %1169, %1952 ]
  %2002 = phi ptr [ %686, %1964 ], [ %978, %1952 ]
  %2003 = phi ptr [ %685, %1964 ], [ %979, %1952 ]
  %2004 = phi ptr [ %684, %1964 ], [ %980, %1952 ]
  %2005 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %2006 = icmp eq i32 %2005, 0
  %2007 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2008 = icmp ne i32 %2007, 0
  %2009 = select i1 %2006, i1 true, i1 %2008
  br i1 %2009, label %2014, label %2010

2010:                                             ; preds = %1994
  %2011 = load i8, ptr %718, align 2, !tbaa !52
  %2012 = icmp eq i8 %2011, 1
  %2013 = select i1 %2012, double 1.000000e+00, double -1.000000e+00
  br label %2014

2014:                                             ; preds = %1994, %2010
  %2015 = phi double [ %2013, %2010 ], [ 0.000000e+00, %1994 ]
  %2016 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %696, i32 1
  %2017 = load float, ptr %2016, align 8, !tbaa !81
  %2018 = fpext float %2017 to double
  %2019 = fmul double %2018, 0x4074C104816F0069
  %2020 = fmul double %33, %2019
  %2021 = fmul double %28, %2020
  %2022 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %696, i32 2
  %2023 = load i16, ptr %2022, align 4, !tbaa !82
  %2024 = sext i16 %2023 to i32
  %2025 = load ptr, ptr %666, align 8, !tbaa !83
  %2026 = load i32, ptr %667, align 8, !tbaa !85
  %2027 = shl nsw i32 %2024, 1
  %2028 = mul i32 %2027, %2026
  %2029 = zext i32 %2028 to i64
  %2030 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2025, i64 %2029
  %2031 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2032 = extractelement <2 x double> %714, i64 0
  %2033 = extractelement <2 x double> %714, i64 1
  %2034 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2031, double noundef %2032, double noundef %2033, double noundef %717, ptr noundef %46, ptr noundef nonnull %2000, i32 noundef %1999, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2035 = icmp sgt i32 %2034, 0
  br i1 %2035, label %2036, label %2339

2036:                                             ; preds = %2014
  %2037 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2038 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2039 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2040 = mul nsw i32 %2039, %720
  %2041 = mul i32 %2038, 3
  %2042 = mul nsw i32 %732, 3
  %2043 = sext i32 %2042 to i64
  %2044 = add nsw i32 %2042, 1
  %2045 = sext i32 %2044 to i64
  %2046 = add nsw i32 %2042, 2
  %2047 = sext i32 %2046 to i64
  %2048 = zext i32 %2034 to i64
  br label %2049

2049:                                             ; preds = %2036, %2049
  %2050 = phi i64 [ 0, %2036 ], [ %2337, %2049 ]
  %2051 = phi double [ %682, %2036 ], [ %2273, %2049 ]
  %2052 = phi double [ 0.000000e+00, %2036 ], [ %2200, %2049 ]
  %2053 = phi double [ 0.000000e+00, %2036 ], [ %2299, %2049 ]
  %2054 = phi <2 x double> [ %689, %2036 ], [ %2192, %2049 ]
  %2055 = phi <2 x double> [ %690, %2036 ], [ %2185, %2049 ]
  %2056 = phi <2 x double> [ %691, %2036 ], [ %2292, %2049 ]
  %2057 = phi <2 x double> [ %692, %2036 ], [ %2286, %2049 ]
  %2058 = phi <2 x double> [ %693, %2036 ], [ %2163, %2049 ]
  %2059 = phi <2 x double> [ %694, %2036 ], [ %2198, %2049 ]
  %2060 = phi <2 x double> [ %695, %2036 ], [ %2297, %2049 ]
  %2061 = phi <2 x double> [ zeroinitializer, %2036 ], [ %2194, %2049 ]
  %2062 = phi <2 x double> [ zeroinitializer, %2036 ], [ %2294, %2049 ]
  %2063 = shl nuw nsw i64 %2050, 1
  %2064 = getelementptr inbounds i32, ptr %146, i64 %2063
  %2065 = load i32, ptr %2064, align 4, !tbaa !5
  %2066 = ashr i32 %2065, 14
  %2067 = add nsw i32 %2066, %39
  %2068 = getelementptr inbounds i16, ptr %99, i64 %2050
  %2069 = load i16, ptr %2068, align 2, !tbaa !45
  %2070 = zext i16 %2069 to i64
  %2071 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2070
  %2072 = getelementptr inbounds double, ptr %145, i64 %2050
  %2073 = load double, ptr %2072, align 8, !tbaa !15
  %2074 = sext i32 %2067 to i64
  %2075 = getelementptr inbounds double, ptr %2037, i64 %2074
  %2076 = load double, ptr %2075, align 8, !tbaa !15
  %2077 = fsub double %2073, %2076
  %2078 = shl nsw i32 %2067, 4
  %2079 = sext i32 %2078 to i64
  %2080 = getelementptr inbounds double, ptr %31, i64 %2079
  %2081 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2070, i32 2
  %2082 = load i16, ptr %2081, align 4, !tbaa !82
  %2083 = sext i16 %2082 to i32
  %2084 = shl nsw i32 %2083, 1
  %2085 = sext i32 %2084 to i64
  %2086 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2030, i64 %2085
  %2087 = getelementptr inbounds %class.Vector, ptr %630, i64 %2070
  %2088 = getelementptr inbounds %class.Vector, ptr %634, i64 %2070
  %2089 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2070, i32 1
  %2090 = load float, ptr %2089, align 8, !tbaa !81
  %2091 = fpext float %2090 to double
  %2092 = fmul double %2021, %2091
  %2093 = load <2 x double>, ptr %2071, align 8, !tbaa !15
  %2094 = fsub <2 x double> %714, %2093
  %2095 = getelementptr inbounds %class.Vector, ptr %2071, i64 0, i32 2
  %2096 = load double, ptr %2095, align 8, !tbaa !50
  %2097 = fsub double %717, %2096
  %2098 = load double, ptr %2086, align 8, !tbaa !86
  %2099 = fmul double %33, %2098
  %2100 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2030, i64 %2085, i32 1
  %2101 = load double, ptr %2100, align 8, !tbaa !88
  %2102 = load double, ptr %2080, align 8, !tbaa !15
  %2103 = getelementptr inbounds double, ptr %2080, i64 2
  %2104 = load double, ptr %2103, align 8, !tbaa !15
  %2105 = fmul double %2101, %668
  %2106 = fmul double %2105, %2104
  %2107 = tail call double @llvm.fmuladd.f64(double %2099, double %2102, double %2106)
  %2108 = getelementptr inbounds double, ptr %2080, i64 1
  %2109 = load double, ptr %2108, align 8, !tbaa !15
  %2110 = getelementptr inbounds double, ptr %2080, i64 3
  %2111 = load double, ptr %2110, align 8, !tbaa !15
  %2112 = fmul double %2105, %2111
  %2113 = tail call double @llvm.fmuladd.f64(double %2099, double %2109, double %2112)
  %2114 = getelementptr inbounds double, ptr %2080, i64 4
  %2115 = load double, ptr %2114, align 8, !tbaa !15
  %2116 = getelementptr inbounds double, ptr %2080, i64 6
  %2117 = load double, ptr %2116, align 8, !tbaa !15
  %2118 = fmul double %2105, %2117
  %2119 = tail call double @llvm.fmuladd.f64(double %2099, double %2115, double %2118)
  %2120 = getelementptr inbounds double, ptr %2080, i64 5
  %2121 = load double, ptr %2120, align 8, !tbaa !15
  %2122 = getelementptr inbounds double, ptr %2080, i64 7
  %2123 = load double, ptr %2122, align 8, !tbaa !15
  %2124 = fmul double %2105, %2123
  %2125 = tail call double @llvm.fmuladd.f64(double %2099, double %2121, double %2124)
  %2126 = tail call double @llvm.fmuladd.f64(double %2077, double %2107, double %2113)
  %2127 = tail call double @llvm.fmuladd.f64(double %2126, double %2077, double %2119)
  %2128 = fmul double %2015, %2127
  %2129 = load <2 x double>, ptr %669, align 8, !tbaa !15
  %2130 = insertelement <2 x double> poison, double %2128, i64 0
  %2131 = shufflevector <2 x double> %2130, <2 x double> poison, <2 x i32> zeroinitializer
  %2132 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2131, <2 x double> %2094, <2 x double> %2129)
  store <2 x double> %2132, ptr %669, align 8, !tbaa !15
  %2133 = load double, ptr %670, align 8, !tbaa !15
  %2134 = tail call double @llvm.fmuladd.f64(double %2128, double %2097, double %2133)
  store double %2134, ptr %670, align 8, !tbaa !15
  %2135 = getelementptr inbounds double, ptr %2080, i64 8
  %2136 = load double, ptr %2135, align 8, !tbaa !15
  %2137 = fmul double %2092, %2136
  %2138 = getelementptr inbounds double, ptr %2080, i64 9
  %2139 = load double, ptr %2138, align 8, !tbaa !15
  %2140 = fmul double %2092, %2139
  %2141 = getelementptr inbounds double, ptr %2080, i64 10
  %2142 = load double, ptr %2141, align 8, !tbaa !15
  %2143 = fmul double %2092, %2142
  %2144 = getelementptr inbounds double, ptr %2080, i64 11
  %2145 = load double, ptr %2144, align 8, !tbaa !15
  %2146 = fmul double %2092, %2145
  %2147 = insertelement <2 x double> poison, double %2077, i64 0
  %2148 = shufflevector <2 x double> %2147, <2 x double> poison, <2 x i32> zeroinitializer
  %2149 = insertelement <2 x double> poison, double %2137, i64 0
  %2150 = insertelement <2 x double> %2149, double %2107, i64 1
  %2151 = fmul <2 x double> %2148, %2150
  %2152 = insertelement <2 x double> poison, double %2140, i64 0
  %2153 = insertelement <2 x double> %2152, double %2113, i64 1
  %2154 = fmul <2 x double> %2153, <double 2.500000e-01, double 2.500000e-01>
  %2155 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2151, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2154)
  %2156 = insertelement <2 x double> poison, double %2143, i64 0
  %2157 = insertelement <2 x double> %2156, double %2119, i64 1
  %2158 = fmul <2 x double> %2157, <double 5.000000e-01, double 5.000000e-01>
  %2159 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2155, <2 x double> %2148, <2 x double> %2158)
  %2160 = insertelement <2 x double> poison, double %2146, i64 0
  %2161 = insertelement <2 x double> %2160, double %2125, i64 1
  %2162 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2159, <2 x double> %2148, <2 x double> %2161)
  %2163 = fsub <2 x double> %2058, %2162
  %2164 = tail call double @llvm.fmuladd.f64(double %2077, double %2137, double %2140)
  %2165 = tail call double @llvm.fmuladd.f64(double %2164, double %2077, double %2143)
  %2166 = fmul double %2015, %2165
  %2167 = load double, ptr %671, align 8, !tbaa !15
  %2168 = extractelement <2 x double> %2094, i64 0
  %2169 = tail call double @llvm.fmuladd.f64(double %2166, double %2168, double %2167)
  store double %2169, ptr %671, align 8, !tbaa !15
  %2170 = load double, ptr %672, align 8, !tbaa !15
  %2171 = extractelement <2 x double> %2094, i64 1
  %2172 = tail call double @llvm.fmuladd.f64(double %2166, double %2171, double %2170)
  store double %2172, ptr %672, align 8, !tbaa !15
  %2173 = load double, ptr %673, align 8, !tbaa !15
  %2174 = tail call double @llvm.fmuladd.f64(double %2166, double %2097, double %2173)
  store double %2174, ptr %673, align 8, !tbaa !15
  %2175 = fadd double %2107, %2137
  %2176 = fadd double %2113, %2140
  %2177 = fadd double %2119, %2143
  %2178 = tail call double @llvm.fmuladd.f64(double %2077, double %2175, double %2176)
  %2179 = tail call double @llvm.fmuladd.f64(double %2178, double %2077, double %2177)
  %2180 = fmul double %2171, %2179
  %2181 = insertelement <2 x double> poison, double %2180, i64 0
  %2182 = shufflevector <2 x double> %2181, <2 x double> poison, <2 x i32> zeroinitializer
  %2183 = shufflevector <2 x double> %2094, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2184 = insertelement <2 x double> %2183, double %2097, i64 1
  %2185 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2182, <2 x double> %2184, <2 x double> %2055)
  %2186 = insertelement <2 x double> %2183, double %2097, i64 0
  %2187 = insertelement <2 x double> poison, double %2179, i64 0
  %2188 = shufflevector <2 x double> %2187, <2 x double> poison, <2 x i32> zeroinitializer
  %2189 = fmul <2 x double> %2186, %2188
  %2190 = shufflevector <2 x double> %2189, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2191 = shufflevector <2 x double> %2189, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2192 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2191, <2 x double> %2094, <2 x double> %2054)
  %2193 = insertelement <2 x double> %2190, double %2180, i64 1
  %2194 = fadd <2 x double> %2061, %2193
  %2195 = load <2 x double>, ptr %2087, align 8, !tbaa !15
  %2196 = fsub <2 x double> %2195, %2193
  store <2 x double> %2196, ptr %2087, align 8, !tbaa !15
  %2197 = shufflevector <2 x double> %2186, <2 x double> poison, <2 x i32> zeroinitializer
  %2198 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2189, <2 x double> %2197, <2 x double> %2059)
  %2199 = extractelement <2 x double> %2189, i64 0
  %2200 = fadd double %2052, %2199
  %2201 = getelementptr inbounds %class.Vector, ptr %630, i64 %2070, i32 2
  %2202 = load double, ptr %2201, align 8, !tbaa !89
  %2203 = fsub double %2202, %2199
  store double %2203, ptr %2201, align 8, !tbaa !89
  %2204 = load double, ptr %2095, align 8, !tbaa !50
  %2205 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2206 = fsub double %2204, %2205
  %2207 = fmul double %10, %2206
  %2208 = tail call double @llvm.floor.f64(double %2207)
  %2209 = fptosi double %2208 to i32
  %2210 = icmp slt i32 %2209, 0
  %2211 = select i1 %2210, i32 %2038, i32 0
  %2212 = icmp sgt i32 %2038, %2209
  %2213 = select i1 %2212, i32 0, i32 %2038
  %2214 = sub i32 %2209, %2213
  %2215 = add i32 %2214, %2211
  %2216 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2070, i32 3
  %2217 = load i8, ptr %2216, align 2, !tbaa !52
  %2218 = zext i8 %2217 to i32
  %2219 = shufflevector <2 x double> %2189, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2220 = fmul <2 x double> %2094, %2219
  %2221 = extractelement <2 x double> %2220, i64 0
  %2222 = fmul double %2171, %2180
  %2223 = fmul double %2097, %2199
  %2224 = add nsw i32 %2040, %2218
  %2225 = mul i32 %2041, %2224
  %2226 = sext i32 %2225 to i64
  %2227 = getelementptr inbounds double, ptr %8, i64 %2226
  %2228 = fmul double %2221, 5.000000e-01
  %2229 = fmul double %2222, 5.000000e-01
  %2230 = fmul double %2223, 5.000000e-01
  %2231 = getelementptr inbounds double, ptr %2227, i64 %2043
  %2232 = load double, ptr %2231, align 8, !tbaa !15
  %2233 = fadd double %2228, %2232
  store double %2233, ptr %2231, align 8, !tbaa !15
  %2234 = getelementptr inbounds double, ptr %2227, i64 %2045
  %2235 = load double, ptr %2234, align 8, !tbaa !15
  %2236 = fadd double %2229, %2235
  store double %2236, ptr %2234, align 8, !tbaa !15
  %2237 = getelementptr inbounds double, ptr %2227, i64 %2047
  %2238 = load double, ptr %2237, align 8, !tbaa !15
  %2239 = fadd double %2230, %2238
  store double %2239, ptr %2237, align 8, !tbaa !15
  %2240 = mul nsw i32 %2215, 3
  %2241 = sext i32 %2240 to i64
  %2242 = getelementptr inbounds double, ptr %2227, i64 %2241
  %2243 = load double, ptr %2242, align 8, !tbaa !15
  %2244 = fadd double %2228, %2243
  store double %2244, ptr %2242, align 8, !tbaa !15
  %2245 = add nsw i32 %2240, 1
  %2246 = sext i32 %2245 to i64
  %2247 = getelementptr inbounds double, ptr %2227, i64 %2246
  %2248 = load double, ptr %2247, align 8, !tbaa !15
  %2249 = fadd double %2229, %2248
  store double %2249, ptr %2247, align 8, !tbaa !15
  %2250 = add nsw i32 %2240, 2
  %2251 = sext i32 %2250 to i64
  %2252 = getelementptr inbounds double, ptr %2227, i64 %2251
  %2253 = load double, ptr %2252, align 8, !tbaa !15
  %2254 = fadd double %2230, %2253
  store double %2254, ptr %2252, align 8, !tbaa !15
  %2255 = getelementptr inbounds double, ptr %2080, i64 12
  %2256 = load double, ptr %2255, align 8, !tbaa !15
  %2257 = getelementptr inbounds double, ptr %2080, i64 13
  %2258 = load double, ptr %2257, align 8, !tbaa !15
  %2259 = getelementptr inbounds double, ptr %2080, i64 14
  %2260 = load double, ptr %2259, align 8, !tbaa !15
  %2261 = getelementptr inbounds double, ptr %2080, i64 15
  %2262 = load double, ptr %2261, align 8, !tbaa !15
  %2263 = fmul double %2092, %2256
  %2264 = fmul double %2092, %2258
  %2265 = fmul double %2092, %2260
  %2266 = fmul double %2092, %2262
  %2267 = fmul double %2077, %2263
  %2268 = fmul double %2264, 2.500000e-01
  %2269 = tail call double @llvm.fmuladd.f64(double %2267, double 0x3FC5555555555555, double %2268)
  %2270 = fmul double %2265, 5.000000e-01
  %2271 = tail call double @llvm.fmuladd.f64(double %2269, double %2077, double %2270)
  %2272 = tail call double @llvm.fmuladd.f64(double %2271, double %2077, double %2266)
  %2273 = fsub double %2051, %2272
  %2274 = tail call double @llvm.fmuladd.f64(double %2077, double %2263, double %2264)
  %2275 = tail call double @llvm.fmuladd.f64(double %2274, double %2077, double %2265)
  %2276 = fmul double %2015, %2275
  %2277 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2278 = insertelement <2 x double> poison, double %2276, i64 0
  %2279 = shufflevector <2 x double> %2278, <2 x double> poison, <2 x i32> zeroinitializer
  %2280 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2279, <2 x double> %2094, <2 x double> %2277)
  store <2 x double> %2280, ptr %671, align 8, !tbaa !15
  %2281 = load double, ptr %673, align 8, !tbaa !15
  %2282 = tail call double @llvm.fmuladd.f64(double %2276, double %2097, double %2281)
  store double %2282, ptr %673, align 8, !tbaa !15
  %2283 = fmul double %2171, %2275
  %2284 = insertelement <2 x double> poison, double %2283, i64 0
  %2285 = shufflevector <2 x double> %2284, <2 x double> poison, <2 x i32> zeroinitializer
  %2286 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2285, <2 x double> %2184, <2 x double> %2057)
  %2287 = insertelement <2 x double> poison, double %2275, i64 0
  %2288 = shufflevector <2 x double> %2287, <2 x double> poison, <2 x i32> zeroinitializer
  %2289 = fmul <2 x double> %2186, %2288
  %2290 = shufflevector <2 x double> %2289, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2291 = shufflevector <2 x double> %2289, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2292 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2291, <2 x double> %2094, <2 x double> %2056)
  %2293 = insertelement <2 x double> %2290, double %2283, i64 1
  %2294 = fadd <2 x double> %2062, %2293
  %2295 = load <2 x double>, ptr %2088, align 8, !tbaa !15
  %2296 = fsub <2 x double> %2295, %2293
  store <2 x double> %2296, ptr %2088, align 8, !tbaa !15
  %2297 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2289, <2 x double> %2197, <2 x double> %2060)
  %2298 = extractelement <2 x double> %2289, i64 0
  %2299 = fadd double %2053, %2298
  %2300 = getelementptr inbounds %class.Vector, ptr %634, i64 %2070, i32 2
  %2301 = load double, ptr %2300, align 8, !tbaa !89
  %2302 = fsub double %2301, %2298
  store double %2302, ptr %2300, align 8, !tbaa !89
  %2303 = load double, ptr %2095, align 8, !tbaa !50
  %2304 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2305 = fsub double %2303, %2304
  %2306 = fmul double %10, %2305
  %2307 = tail call double @llvm.floor.f64(double %2306)
  %2308 = fptosi double %2307 to i32
  %2309 = icmp slt i32 %2308, 0
  %2310 = select i1 %2309, i32 %2038, i32 0
  %2311 = icmp sgt i32 %2038, %2308
  %2312 = select i1 %2311, i32 0, i32 %2038
  %2313 = sub i32 %2308, %2312
  %2314 = add i32 %2313, %2310
  %2315 = fmul double %2097, %2298
  %2316 = fmul double %2315, 5.000000e-01
  %2317 = load double, ptr %2231, align 8, !tbaa !15
  %2318 = load double, ptr %2234, align 8, !tbaa !15
  %2319 = load double, ptr %2237, align 8, !tbaa !15
  %2320 = fadd double %2316, %2319
  store double %2320, ptr %2237, align 8, !tbaa !15
  %2321 = mul nsw i32 %2314, 3
  %2322 = sext i32 %2321 to i64
  %2323 = getelementptr inbounds double, ptr %2227, i64 %2322
  %2324 = fmul <2 x double> %2094, %2293
  %2325 = fmul <2 x double> %2324, <double 5.000000e-01, double 5.000000e-01>
  %2326 = extractelement <2 x double> %2325, i64 0
  %2327 = fadd double %2326, %2317
  store double %2327, ptr %2231, align 8, !tbaa !15
  %2328 = extractelement <2 x double> %2325, i64 1
  %2329 = fadd double %2328, %2318
  store double %2329, ptr %2234, align 8, !tbaa !15
  %2330 = load <2 x double>, ptr %2323, align 8, !tbaa !15
  %2331 = fadd <2 x double> %2325, %2330
  store <2 x double> %2331, ptr %2323, align 8, !tbaa !15
  %2332 = add nsw i32 %2321, 2
  %2333 = sext i32 %2332 to i64
  %2334 = getelementptr inbounds double, ptr %2227, i64 %2333
  %2335 = load double, ptr %2334, align 8, !tbaa !15
  %2336 = fadd double %2316, %2335
  store double %2336, ptr %2334, align 8, !tbaa !15
  %2337 = add nuw nsw i64 %2050, 1
  %2338 = icmp eq i64 %2337, %2048
  br i1 %2338, label %2339, label %2049

2339:                                             ; preds = %2049, %2014
  %2340 = phi double [ 0.000000e+00, %2014 ], [ %2299, %2049 ]
  %2341 = phi double [ 0.000000e+00, %2014 ], [ %2200, %2049 ]
  %2342 = phi double [ %682, %2014 ], [ %2273, %2049 ]
  %2343 = phi <2 x double> [ %689, %2014 ], [ %2192, %2049 ]
  %2344 = phi <2 x double> [ %690, %2014 ], [ %2185, %2049 ]
  %2345 = phi <2 x double> [ %691, %2014 ], [ %2292, %2049 ]
  %2346 = phi <2 x double> [ %692, %2014 ], [ %2286, %2049 ]
  %2347 = phi <2 x double> [ %693, %2014 ], [ %2163, %2049 ]
  %2348 = phi <2 x double> [ %694, %2014 ], [ %2198, %2049 ]
  %2349 = phi <2 x double> [ %695, %2014 ], [ %2297, %2049 ]
  %2350 = phi <2 x double> [ zeroinitializer, %2014 ], [ %2194, %2049 ]
  %2351 = phi <2 x double> [ zeroinitializer, %2014 ], [ %2294, %2049 ]
  %2352 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2353 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2352, double noundef %2032, double noundef %2033, double noundef %717, ptr noundef %46, ptr noundef %1996, i32 noundef %1995, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2354 = add nsw i32 %2353, %681
  %2355 = icmp sgt i32 %2353, 0
  br i1 %2355, label %2356, label %2675

2356:                                             ; preds = %2339
  %2357 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2358 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2359 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2360 = mul nsw i32 %2359, %720
  %2361 = mul i32 %2358, 3
  %2362 = mul nsw i32 %732, 3
  %2363 = sext i32 %2362 to i64
  %2364 = add nsw i32 %2362, 1
  %2365 = sext i32 %2364 to i64
  %2366 = add nsw i32 %2362, 2
  %2367 = sext i32 %2366 to i64
  %2368 = zext i32 %2353 to i64
  br label %2369

2369:                                             ; preds = %2356, %2369
  %2370 = phi i64 [ 0, %2356 ], [ %2673, %2369 ]
  %2371 = phi double [ %2342, %2356 ], [ %2609, %2369 ]
  %2372 = phi double [ %2341, %2356 ], [ %2522, %2369 ]
  %2373 = phi double [ %2340, %2356 ], [ %2635, %2369 ]
  %2374 = phi <2 x double> [ %2343, %2356 ], [ %2514, %2369 ]
  %2375 = phi <2 x double> [ %2344, %2356 ], [ %2507, %2369 ]
  %2376 = phi <2 x double> [ %2345, %2356 ], [ %2628, %2369 ]
  %2377 = phi <2 x double> [ %2346, %2356 ], [ %2622, %2369 ]
  %2378 = phi <2 x double> [ %2347, %2356 ], [ %2485, %2369 ]
  %2379 = phi <2 x double> [ %2348, %2356 ], [ %2520, %2369 ]
  %2380 = phi <2 x double> [ %2349, %2356 ], [ %2633, %2369 ]
  %2381 = phi <2 x double> [ %2350, %2356 ], [ %2516, %2369 ]
  %2382 = phi <2 x double> [ %2351, %2356 ], [ %2630, %2369 ]
  %2383 = shl nuw nsw i64 %2370, 1
  %2384 = getelementptr inbounds i32, ptr %146, i64 %2383
  %2385 = load i32, ptr %2384, align 4, !tbaa !5
  %2386 = ashr i32 %2385, 14
  %2387 = add nsw i32 %2386, %39
  %2388 = getelementptr inbounds i16, ptr %99, i64 %2370
  %2389 = load i16, ptr %2388, align 2, !tbaa !45
  %2390 = zext i16 %2389 to i64
  %2391 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2390
  %2392 = getelementptr inbounds double, ptr %145, i64 %2370
  %2393 = load double, ptr %2392, align 8, !tbaa !15
  %2394 = sext i32 %2387 to i64
  %2395 = getelementptr inbounds double, ptr %2357, i64 %2394
  %2396 = load double, ptr %2395, align 8, !tbaa !15
  %2397 = fsub double %2393, %2396
  %2398 = shl nsw i32 %2387, 4
  %2399 = sext i32 %2398 to i64
  %2400 = getelementptr inbounds double, ptr %31, i64 %2399
  %2401 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2390, i32 2
  %2402 = load i16, ptr %2401, align 4, !tbaa !82
  %2403 = sext i16 %2402 to i32
  %2404 = shl nsw i32 %2403, 1
  %2405 = sext i32 %2404 to i64
  %2406 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2030, i64 %2405
  %2407 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2406, i64 1
  %2408 = getelementptr inbounds %class.Vector, ptr %630, i64 %2390
  %2409 = getelementptr inbounds %class.Vector, ptr %634, i64 %2390
  %2410 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2390, i32 1
  %2411 = load float, ptr %2410, align 8, !tbaa !81
  %2412 = fpext float %2411 to double
  %2413 = fmul double %2021, %2412
  %2414 = load <2 x double>, ptr %2391, align 8, !tbaa !15
  %2415 = fsub <2 x double> %714, %2414
  %2416 = getelementptr inbounds %class.Vector, ptr %2391, i64 0, i32 2
  %2417 = load double, ptr %2416, align 8, !tbaa !50
  %2418 = fsub double %717, %2417
  %2419 = load double, ptr %2407, align 8, !tbaa !86
  %2420 = fmul double %33, %2419
  %2421 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2406, i64 1, i32 1
  %2422 = load double, ptr %2421, align 8, !tbaa !88
  %2423 = load double, ptr %2400, align 8, !tbaa !15
  %2424 = getelementptr inbounds double, ptr %2400, i64 2
  %2425 = load double, ptr %2424, align 8, !tbaa !15
  %2426 = fmul double %2422, %668
  %2427 = fmul double %2426, %2425
  %2428 = tail call double @llvm.fmuladd.f64(double %2420, double %2423, double %2427)
  %2429 = getelementptr inbounds double, ptr %2400, i64 1
  %2430 = load double, ptr %2429, align 8, !tbaa !15
  %2431 = getelementptr inbounds double, ptr %2400, i64 3
  %2432 = load double, ptr %2431, align 8, !tbaa !15
  %2433 = fmul double %2426, %2432
  %2434 = tail call double @llvm.fmuladd.f64(double %2420, double %2430, double %2433)
  %2435 = getelementptr inbounds double, ptr %2400, i64 4
  %2436 = load double, ptr %2435, align 8, !tbaa !15
  %2437 = getelementptr inbounds double, ptr %2400, i64 6
  %2438 = load double, ptr %2437, align 8, !tbaa !15
  %2439 = fmul double %2426, %2438
  %2440 = tail call double @llvm.fmuladd.f64(double %2420, double %2436, double %2439)
  %2441 = getelementptr inbounds double, ptr %2400, i64 5
  %2442 = load double, ptr %2441, align 8, !tbaa !15
  %2443 = getelementptr inbounds double, ptr %2400, i64 7
  %2444 = load double, ptr %2443, align 8, !tbaa !15
  %2445 = fmul double %2426, %2444
  %2446 = tail call double @llvm.fmuladd.f64(double %2420, double %2442, double %2445)
  %2447 = tail call double @llvm.fmuladd.f64(double %2397, double %2428, double %2434)
  %2448 = tail call double @llvm.fmuladd.f64(double %2447, double %2397, double %2440)
  %2449 = fmul double %2015, %2448
  %2450 = load <2 x double>, ptr %669, align 8, !tbaa !15
  %2451 = insertelement <2 x double> poison, double %2449, i64 0
  %2452 = shufflevector <2 x double> %2451, <2 x double> poison, <2 x i32> zeroinitializer
  %2453 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2452, <2 x double> %2415, <2 x double> %2450)
  store <2 x double> %2453, ptr %669, align 8, !tbaa !15
  %2454 = load double, ptr %670, align 8, !tbaa !15
  %2455 = tail call double @llvm.fmuladd.f64(double %2449, double %2418, double %2454)
  store double %2455, ptr %670, align 8, !tbaa !15
  %2456 = fmul double %674, %2413
  %2457 = getelementptr inbounds double, ptr %2400, i64 8
  %2458 = load double, ptr %2457, align 8, !tbaa !15
  %2459 = fmul double %2456, %2458
  %2460 = getelementptr inbounds double, ptr %2400, i64 9
  %2461 = load double, ptr %2460, align 8, !tbaa !15
  %2462 = fmul double %2456, %2461
  %2463 = getelementptr inbounds double, ptr %2400, i64 10
  %2464 = load double, ptr %2463, align 8, !tbaa !15
  %2465 = fmul double %2456, %2464
  %2466 = getelementptr inbounds double, ptr %2400, i64 11
  %2467 = load double, ptr %2466, align 8, !tbaa !15
  %2468 = fmul double %2456, %2467
  %2469 = insertelement <2 x double> poison, double %2397, i64 0
  %2470 = shufflevector <2 x double> %2469, <2 x double> poison, <2 x i32> zeroinitializer
  %2471 = insertelement <2 x double> poison, double %2459, i64 0
  %2472 = insertelement <2 x double> %2471, double %2428, i64 1
  %2473 = fmul <2 x double> %2470, %2472
  %2474 = insertelement <2 x double> poison, double %2462, i64 0
  %2475 = insertelement <2 x double> %2474, double %2434, i64 1
  %2476 = fmul <2 x double> %2475, <double 2.500000e-01, double 2.500000e-01>
  %2477 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2473, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2476)
  %2478 = insertelement <2 x double> poison, double %2465, i64 0
  %2479 = insertelement <2 x double> %2478, double %2440, i64 1
  %2480 = fmul <2 x double> %2479, <double 5.000000e-01, double 5.000000e-01>
  %2481 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2477, <2 x double> %2470, <2 x double> %2480)
  %2482 = insertelement <2 x double> poison, double %2468, i64 0
  %2483 = insertelement <2 x double> %2482, double %2446, i64 1
  %2484 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2481, <2 x double> %2470, <2 x double> %2483)
  %2485 = fsub <2 x double> %2378, %2484
  %2486 = tail call double @llvm.fmuladd.f64(double %2397, double %2459, double %2462)
  %2487 = tail call double @llvm.fmuladd.f64(double %2486, double %2397, double %2465)
  %2488 = fmul double %2015, %2487
  %2489 = load double, ptr %671, align 8, !tbaa !15
  %2490 = extractelement <2 x double> %2415, i64 0
  %2491 = tail call double @llvm.fmuladd.f64(double %2488, double %2490, double %2489)
  store double %2491, ptr %671, align 8, !tbaa !15
  %2492 = load double, ptr %672, align 8, !tbaa !15
  %2493 = extractelement <2 x double> %2415, i64 1
  %2494 = tail call double @llvm.fmuladd.f64(double %2488, double %2493, double %2492)
  store double %2494, ptr %672, align 8, !tbaa !15
  %2495 = load double, ptr %673, align 8, !tbaa !15
  %2496 = tail call double @llvm.fmuladd.f64(double %2488, double %2418, double %2495)
  store double %2496, ptr %673, align 8, !tbaa !15
  %2497 = fadd double %2428, %2459
  %2498 = fadd double %2434, %2462
  %2499 = fadd double %2440, %2465
  %2500 = tail call double @llvm.fmuladd.f64(double %2397, double %2497, double %2498)
  %2501 = tail call double @llvm.fmuladd.f64(double %2500, double %2397, double %2499)
  %2502 = fmul double %2493, %2501
  %2503 = insertelement <2 x double> poison, double %2502, i64 0
  %2504 = shufflevector <2 x double> %2503, <2 x double> poison, <2 x i32> zeroinitializer
  %2505 = shufflevector <2 x double> %2415, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2506 = insertelement <2 x double> %2505, double %2418, i64 1
  %2507 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2504, <2 x double> %2506, <2 x double> %2375)
  %2508 = insertelement <2 x double> %2505, double %2418, i64 0
  %2509 = insertelement <2 x double> poison, double %2501, i64 0
  %2510 = shufflevector <2 x double> %2509, <2 x double> poison, <2 x i32> zeroinitializer
  %2511 = fmul <2 x double> %2508, %2510
  %2512 = shufflevector <2 x double> %2511, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2513 = shufflevector <2 x double> %2511, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2514 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2513, <2 x double> %2415, <2 x double> %2374)
  %2515 = insertelement <2 x double> %2512, double %2502, i64 1
  %2516 = fadd <2 x double> %2381, %2515
  %2517 = load <2 x double>, ptr %2408, align 8, !tbaa !15
  %2518 = fsub <2 x double> %2517, %2515
  store <2 x double> %2518, ptr %2408, align 8, !tbaa !15
  %2519 = shufflevector <2 x double> %2508, <2 x double> poison, <2 x i32> zeroinitializer
  %2520 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2511, <2 x double> %2519, <2 x double> %2379)
  %2521 = extractelement <2 x double> %2511, i64 0
  %2522 = fadd double %2372, %2521
  %2523 = getelementptr inbounds %class.Vector, ptr %630, i64 %2390, i32 2
  %2524 = load double, ptr %2523, align 8, !tbaa !89
  %2525 = fsub double %2524, %2521
  store double %2525, ptr %2523, align 8, !tbaa !89
  %2526 = load double, ptr %2416, align 8, !tbaa !50
  %2527 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2528 = fsub double %2526, %2527
  %2529 = fmul double %10, %2528
  %2530 = tail call double @llvm.floor.f64(double %2529)
  %2531 = fptosi double %2530 to i32
  %2532 = icmp slt i32 %2531, 0
  %2533 = select i1 %2532, i32 %2358, i32 0
  %2534 = icmp sgt i32 %2358, %2531
  %2535 = select i1 %2534, i32 0, i32 %2358
  %2536 = sub i32 %2531, %2535
  %2537 = add i32 %2536, %2533
  %2538 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2390, i32 3
  %2539 = load i8, ptr %2538, align 2, !tbaa !52
  %2540 = zext i8 %2539 to i32
  %2541 = shufflevector <2 x double> %2511, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2542 = fmul <2 x double> %2415, %2541
  %2543 = extractelement <2 x double> %2542, i64 0
  %2544 = fmul double %2493, %2502
  %2545 = fmul double %2418, %2521
  %2546 = add nsw i32 %2360, %2540
  %2547 = mul i32 %2361, %2546
  %2548 = sext i32 %2547 to i64
  %2549 = getelementptr inbounds double, ptr %8, i64 %2548
  %2550 = fmul double %2543, 5.000000e-01
  %2551 = fmul double %2544, 5.000000e-01
  %2552 = fmul double %2545, 5.000000e-01
  %2553 = getelementptr inbounds double, ptr %2549, i64 %2363
  %2554 = load double, ptr %2553, align 8, !tbaa !15
  %2555 = fadd double %2550, %2554
  store double %2555, ptr %2553, align 8, !tbaa !15
  %2556 = getelementptr inbounds double, ptr %2549, i64 %2365
  %2557 = load double, ptr %2556, align 8, !tbaa !15
  %2558 = fadd double %2551, %2557
  store double %2558, ptr %2556, align 8, !tbaa !15
  %2559 = getelementptr inbounds double, ptr %2549, i64 %2367
  %2560 = load double, ptr %2559, align 8, !tbaa !15
  %2561 = fadd double %2552, %2560
  store double %2561, ptr %2559, align 8, !tbaa !15
  %2562 = mul nsw i32 %2537, 3
  %2563 = sext i32 %2562 to i64
  %2564 = getelementptr inbounds double, ptr %2549, i64 %2563
  %2565 = load double, ptr %2564, align 8, !tbaa !15
  %2566 = fadd double %2550, %2565
  store double %2566, ptr %2564, align 8, !tbaa !15
  %2567 = add nsw i32 %2562, 1
  %2568 = sext i32 %2567 to i64
  %2569 = getelementptr inbounds double, ptr %2549, i64 %2568
  %2570 = load double, ptr %2569, align 8, !tbaa !15
  %2571 = fadd double %2551, %2570
  store double %2571, ptr %2569, align 8, !tbaa !15
  %2572 = add nsw i32 %2562, 2
  %2573 = sext i32 %2572 to i64
  %2574 = getelementptr inbounds double, ptr %2549, i64 %2573
  %2575 = load double, ptr %2574, align 8, !tbaa !15
  %2576 = fadd double %2552, %2575
  store double %2576, ptr %2574, align 8, !tbaa !15
  %2577 = shl nsw i32 %2387, 2
  %2578 = sext i32 %2577 to i64
  %2579 = getelementptr inbounds double, ptr %32, i64 %2578
  %2580 = getelementptr inbounds double, ptr %2400, i64 12
  %2581 = load double, ptr %2580, align 8, !tbaa !15
  %2582 = getelementptr inbounds double, ptr %2400, i64 13
  %2583 = load double, ptr %2582, align 8, !tbaa !15
  %2584 = getelementptr inbounds double, ptr %2400, i64 14
  %2585 = load double, ptr %2584, align 8, !tbaa !15
  %2586 = getelementptr inbounds double, ptr %2400, i64 15
  %2587 = load double, ptr %2586, align 8, !tbaa !15
  %2588 = load double, ptr %2579, align 8, !tbaa !15
  %2589 = tail call double @llvm.fmuladd.f64(double %35, double %2588, double %2587)
  %2590 = getelementptr inbounds double, ptr %2579, i64 1
  %2591 = load double, ptr %2590, align 8, !tbaa !15
  %2592 = tail call double @llvm.fmuladd.f64(double %675, double %2591, double %2585)
  %2593 = getelementptr inbounds double, ptr %2579, i64 2
  %2594 = load double, ptr %2593, align 8, !tbaa !15
  %2595 = tail call double @llvm.fmuladd.f64(double %676, double %2594, double %2583)
  %2596 = getelementptr inbounds double, ptr %2579, i64 3
  %2597 = load double, ptr %2596, align 8, !tbaa !15
  %2598 = tail call double @llvm.fmuladd.f64(double %677, double %2597, double %2581)
  %2599 = fmul double %2413, %2598
  %2600 = fmul double %2413, %2595
  %2601 = fmul double %2413, %2592
  %2602 = fmul double %2413, %2589
  %2603 = fmul double %2397, %2599
  %2604 = fmul double %2600, 2.500000e-01
  %2605 = tail call double @llvm.fmuladd.f64(double %2603, double 0x3FC5555555555555, double %2604)
  %2606 = fmul double %2601, 5.000000e-01
  %2607 = tail call double @llvm.fmuladd.f64(double %2605, double %2397, double %2606)
  %2608 = tail call double @llvm.fmuladd.f64(double %2607, double %2397, double %2602)
  %2609 = fsub double %2371, %2608
  %2610 = tail call double @llvm.fmuladd.f64(double %2397, double %2599, double %2600)
  %2611 = tail call double @llvm.fmuladd.f64(double %2610, double %2397, double %2601)
  %2612 = fmul double %2015, %2611
  %2613 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2614 = insertelement <2 x double> poison, double %2612, i64 0
  %2615 = shufflevector <2 x double> %2614, <2 x double> poison, <2 x i32> zeroinitializer
  %2616 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2615, <2 x double> %2415, <2 x double> %2613)
  store <2 x double> %2616, ptr %671, align 8, !tbaa !15
  %2617 = load double, ptr %673, align 8, !tbaa !15
  %2618 = tail call double @llvm.fmuladd.f64(double %2612, double %2418, double %2617)
  store double %2618, ptr %673, align 8, !tbaa !15
  %2619 = fmul double %2493, %2611
  %2620 = insertelement <2 x double> poison, double %2619, i64 0
  %2621 = shufflevector <2 x double> %2620, <2 x double> poison, <2 x i32> zeroinitializer
  %2622 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2621, <2 x double> %2506, <2 x double> %2377)
  %2623 = insertelement <2 x double> poison, double %2611, i64 0
  %2624 = shufflevector <2 x double> %2623, <2 x double> poison, <2 x i32> zeroinitializer
  %2625 = fmul <2 x double> %2508, %2624
  %2626 = shufflevector <2 x double> %2625, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2627 = shufflevector <2 x double> %2625, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2628 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2627, <2 x double> %2415, <2 x double> %2376)
  %2629 = insertelement <2 x double> %2626, double %2619, i64 1
  %2630 = fadd <2 x double> %2382, %2629
  %2631 = load <2 x double>, ptr %2409, align 8, !tbaa !15
  %2632 = fsub <2 x double> %2631, %2629
  store <2 x double> %2632, ptr %2409, align 8, !tbaa !15
  %2633 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2625, <2 x double> %2519, <2 x double> %2380)
  %2634 = extractelement <2 x double> %2625, i64 0
  %2635 = fadd double %2373, %2634
  %2636 = getelementptr inbounds %class.Vector, ptr %634, i64 %2390, i32 2
  %2637 = load double, ptr %2636, align 8, !tbaa !89
  %2638 = fsub double %2637, %2634
  store double %2638, ptr %2636, align 8, !tbaa !89
  %2639 = load double, ptr %2416, align 8, !tbaa !50
  %2640 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2641 = fsub double %2639, %2640
  %2642 = fmul double %10, %2641
  %2643 = tail call double @llvm.floor.f64(double %2642)
  %2644 = fptosi double %2643 to i32
  %2645 = icmp slt i32 %2644, 0
  %2646 = select i1 %2645, i32 %2358, i32 0
  %2647 = icmp sgt i32 %2358, %2644
  %2648 = select i1 %2647, i32 0, i32 %2358
  %2649 = sub i32 %2644, %2648
  %2650 = add i32 %2649, %2646
  %2651 = fmul double %2418, %2634
  %2652 = fmul double %2651, 5.000000e-01
  %2653 = load double, ptr %2553, align 8, !tbaa !15
  %2654 = load double, ptr %2556, align 8, !tbaa !15
  %2655 = load double, ptr %2559, align 8, !tbaa !15
  %2656 = fadd double %2652, %2655
  store double %2656, ptr %2559, align 8, !tbaa !15
  %2657 = mul nsw i32 %2650, 3
  %2658 = sext i32 %2657 to i64
  %2659 = getelementptr inbounds double, ptr %2549, i64 %2658
  %2660 = fmul <2 x double> %2415, %2629
  %2661 = fmul <2 x double> %2660, <double 5.000000e-01, double 5.000000e-01>
  %2662 = extractelement <2 x double> %2661, i64 0
  %2663 = fadd double %2662, %2653
  store double %2663, ptr %2553, align 8, !tbaa !15
  %2664 = extractelement <2 x double> %2661, i64 1
  %2665 = fadd double %2664, %2654
  store double %2665, ptr %2556, align 8, !tbaa !15
  %2666 = load <2 x double>, ptr %2659, align 8, !tbaa !15
  %2667 = fadd <2 x double> %2661, %2666
  store <2 x double> %2667, ptr %2659, align 8, !tbaa !15
  %2668 = add nsw i32 %2657, 2
  %2669 = sext i32 %2668 to i64
  %2670 = getelementptr inbounds double, ptr %2549, i64 %2669
  %2671 = load double, ptr %2670, align 8, !tbaa !15
  %2672 = fadd double %2652, %2671
  store double %2672, ptr %2670, align 8, !tbaa !15
  %2673 = add nuw nsw i64 %2370, 1
  %2674 = icmp eq i64 %2673, %2368
  br i1 %2674, label %2675, label %2369

2675:                                             ; preds = %2369, %2339
  %2676 = phi double [ %2340, %2339 ], [ %2635, %2369 ]
  %2677 = phi double [ %2341, %2339 ], [ %2522, %2369 ]
  %2678 = phi double [ %2342, %2339 ], [ %2609, %2369 ]
  %2679 = phi <2 x double> [ %2343, %2339 ], [ %2514, %2369 ]
  %2680 = phi <2 x double> [ %2344, %2339 ], [ %2507, %2369 ]
  %2681 = phi <2 x double> [ %2345, %2339 ], [ %2628, %2369 ]
  %2682 = phi <2 x double> [ %2346, %2339 ], [ %2622, %2369 ]
  %2683 = phi <2 x double> [ %2347, %2339 ], [ %2485, %2369 ]
  %2684 = phi <2 x double> [ %2348, %2339 ], [ %2520, %2369 ]
  %2685 = phi <2 x double> [ %2349, %2339 ], [ %2633, %2369 ]
  %2686 = phi <2 x double> [ %2350, %2339 ], [ %2516, %2369 ]
  %2687 = phi <2 x double> [ %2351, %2339 ], [ %2630, %2369 ]
  %2688 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2689 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2688, double noundef %2032, double noundef %2033, double noundef %717, ptr noundef %46, ptr noundef %1998, i32 noundef %1997, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2690 = add nsw i32 %2354, %2689
  %2691 = icmp sgt i32 %2689, 0
  br i1 %2691, label %2692, label %2861

2692:                                             ; preds = %2675
  %2693 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2694 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2695 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2696 = mul nsw i32 %2695, %720
  %2697 = mul i32 %2694, 3
  %2698 = mul nsw i32 %732, 3
  %2699 = sext i32 %2698 to i64
  %2700 = add nsw i32 %2698, 1
  %2701 = sext i32 %2700 to i64
  %2702 = add nsw i32 %2698, 2
  %2703 = sext i32 %2702 to i64
  %2704 = zext i32 %2689 to i64
  br label %2705

2705:                                             ; preds = %2692, %2705
  %2706 = phi i64 [ 0, %2692 ], [ %2859, %2705 ]
  %2707 = phi double [ %2678, %2692 ], [ %2773, %2705 ]
  %2708 = phi double [ %2676, %2692 ], [ %2804, %2705 ]
  %2709 = phi <2 x double> [ %2681, %2692 ], [ %2796, %2705 ]
  %2710 = phi <2 x double> [ %2682, %2692 ], [ %2789, %2705 ]
  %2711 = phi <2 x double> [ %2685, %2692 ], [ %2802, %2705 ]
  %2712 = phi <2 x double> [ %2687, %2692 ], [ %2798, %2705 ]
  %2713 = shl nuw nsw i64 %2706, 1
  %2714 = getelementptr inbounds i32, ptr %146, i64 %2713
  %2715 = load i32, ptr %2714, align 4, !tbaa !5
  %2716 = ashr i32 %2715, 14
  %2717 = add nsw i32 %2716, %39
  %2718 = getelementptr inbounds i16, ptr %99, i64 %2706
  %2719 = load i16, ptr %2718, align 2, !tbaa !45
  %2720 = zext i16 %2719 to i64
  %2721 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2720
  %2722 = getelementptr inbounds double, ptr %145, i64 %2706
  %2723 = load double, ptr %2722, align 8, !tbaa !15
  %2724 = sext i32 %2717 to i64
  %2725 = getelementptr inbounds double, ptr %2693, i64 %2724
  %2726 = load double, ptr %2725, align 8, !tbaa !15
  %2727 = fsub double %2723, %2726
  %2728 = shl nsw i32 %2717, 4
  %2729 = sext i32 %2728 to i64
  %2730 = getelementptr inbounds double, ptr %31, i64 %2729
  %2731 = getelementptr inbounds %class.Vector, ptr %634, i64 %2720
  %2732 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2720, i32 1
  %2733 = load float, ptr %2732, align 8, !tbaa !81
  %2734 = fpext float %2733 to double
  %2735 = fmul double %2021, %2734
  %2736 = load <2 x double>, ptr %2721, align 8, !tbaa !15
  %2737 = fsub <2 x double> %714, %2736
  %2738 = getelementptr inbounds %class.Vector, ptr %2721, i64 0, i32 2
  %2739 = load double, ptr %2738, align 8, !tbaa !50
  %2740 = fsub double %717, %2739
  %2741 = shl nsw i32 %2717, 2
  %2742 = sext i32 %2741 to i64
  %2743 = getelementptr inbounds double, ptr %32, i64 %2742
  %2744 = getelementptr inbounds double, ptr %2730, i64 12
  %2745 = load double, ptr %2744, align 8, !tbaa !15
  %2746 = getelementptr inbounds double, ptr %2730, i64 13
  %2747 = load double, ptr %2746, align 8, !tbaa !15
  %2748 = getelementptr inbounds double, ptr %2730, i64 14
  %2749 = load double, ptr %2748, align 8, !tbaa !15
  %2750 = getelementptr inbounds double, ptr %2730, i64 15
  %2751 = load double, ptr %2750, align 8, !tbaa !15
  %2752 = load double, ptr %2743, align 8, !tbaa !15
  %2753 = fadd double %2751, %2752
  %2754 = getelementptr inbounds double, ptr %2743, i64 1
  %2755 = load double, ptr %2754, align 8, !tbaa !15
  %2756 = tail call double @llvm.fmuladd.f64(double %2755, double 2.000000e+00, double %2749)
  %2757 = getelementptr inbounds double, ptr %2743, i64 2
  %2758 = load double, ptr %2757, align 8, !tbaa !15
  %2759 = tail call double @llvm.fmuladd.f64(double %2758, double 4.000000e+00, double %2747)
  %2760 = getelementptr inbounds double, ptr %2743, i64 3
  %2761 = load double, ptr %2760, align 8, !tbaa !15
  %2762 = tail call double @llvm.fmuladd.f64(double %2761, double 6.000000e+00, double %2745)
  %2763 = fmul double %2735, %2762
  %2764 = fmul double %2735, %2759
  %2765 = fmul double %2735, %2756
  %2766 = fmul double %2735, %2753
  %2767 = fmul double %2727, %2763
  %2768 = fmul double %2764, 2.500000e-01
  %2769 = tail call double @llvm.fmuladd.f64(double %2767, double 0x3FC5555555555555, double %2768)
  %2770 = fmul double %2765, 5.000000e-01
  %2771 = tail call double @llvm.fmuladd.f64(double %2769, double %2727, double %2770)
  %2772 = tail call double @llvm.fmuladd.f64(double %2771, double %2727, double %2766)
  %2773 = fsub double %2707, %2772
  %2774 = tail call double @llvm.fmuladd.f64(double %2727, double %2763, double %2764)
  %2775 = tail call double @llvm.fmuladd.f64(double %2774, double %2727, double %2765)
  %2776 = fmul double %2015, %2775
  %2777 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2778 = insertelement <2 x double> poison, double %2776, i64 0
  %2779 = shufflevector <2 x double> %2778, <2 x double> poison, <2 x i32> zeroinitializer
  %2780 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2779, <2 x double> %2737, <2 x double> %2777)
  store <2 x double> %2780, ptr %671, align 8, !tbaa !15
  %2781 = load double, ptr %673, align 8, !tbaa !15
  %2782 = tail call double @llvm.fmuladd.f64(double %2776, double %2740, double %2781)
  store double %2782, ptr %673, align 8, !tbaa !15
  %2783 = extractelement <2 x double> %2737, i64 1
  %2784 = fmul double %2783, %2775
  %2785 = insertelement <2 x double> poison, double %2784, i64 0
  %2786 = shufflevector <2 x double> %2785, <2 x double> poison, <2 x i32> zeroinitializer
  %2787 = shufflevector <2 x double> %2737, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2788 = insertelement <2 x double> %2787, double %2740, i64 1
  %2789 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2786, <2 x double> %2788, <2 x double> %2710)
  %2790 = insertelement <2 x double> %2787, double %2740, i64 0
  %2791 = insertelement <2 x double> poison, double %2775, i64 0
  %2792 = shufflevector <2 x double> %2791, <2 x double> poison, <2 x i32> zeroinitializer
  %2793 = fmul <2 x double> %2790, %2792
  %2794 = shufflevector <2 x double> %2793, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2795 = shufflevector <2 x double> %2793, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2796 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2795, <2 x double> %2737, <2 x double> %2709)
  %2797 = insertelement <2 x double> %2794, double %2784, i64 1
  %2798 = fadd <2 x double> %2712, %2797
  %2799 = load <2 x double>, ptr %2731, align 8, !tbaa !15
  %2800 = fsub <2 x double> %2799, %2797
  store <2 x double> %2800, ptr %2731, align 8, !tbaa !15
  %2801 = shufflevector <2 x double> %2790, <2 x double> poison, <2 x i32> zeroinitializer
  %2802 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2793, <2 x double> %2801, <2 x double> %2711)
  %2803 = extractelement <2 x double> %2793, i64 0
  %2804 = fadd double %2708, %2803
  %2805 = getelementptr inbounds %class.Vector, ptr %634, i64 %2720, i32 2
  %2806 = load double, ptr %2805, align 8, !tbaa !89
  %2807 = fsub double %2806, %2803
  store double %2807, ptr %2805, align 8, !tbaa !89
  %2808 = load double, ptr %2738, align 8, !tbaa !50
  %2809 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2810 = fsub double %2808, %2809
  %2811 = fmul double %10, %2810
  %2812 = tail call double @llvm.floor.f64(double %2811)
  %2813 = fptosi double %2812 to i32
  %2814 = icmp slt i32 %2813, 0
  %2815 = select i1 %2814, i32 %2694, i32 0
  %2816 = icmp sgt i32 %2694, %2813
  %2817 = select i1 %2816, i32 0, i32 %2694
  %2818 = sub i32 %2813, %2817
  %2819 = add i32 %2818, %2815
  %2820 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2720, i32 3
  %2821 = load i8, ptr %2820, align 2, !tbaa !52
  %2822 = zext i8 %2821 to i32
  %2823 = shufflevector <2 x double> %2793, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2824 = fmul <2 x double> %2737, %2823
  %2825 = extractelement <2 x double> %2824, i64 0
  %2826 = fmul double %2783, %2784
  %2827 = fmul double %2740, %2803
  %2828 = add nsw i32 %2696, %2822
  %2829 = mul i32 %2697, %2828
  %2830 = sext i32 %2829 to i64
  %2831 = getelementptr inbounds double, ptr %8, i64 %2830
  %2832 = fmul double %2825, 5.000000e-01
  %2833 = fmul double %2826, 5.000000e-01
  %2834 = fmul double %2827, 5.000000e-01
  %2835 = getelementptr inbounds double, ptr %2831, i64 %2699
  %2836 = load double, ptr %2835, align 8, !tbaa !15
  %2837 = fadd double %2832, %2836
  store double %2837, ptr %2835, align 8, !tbaa !15
  %2838 = getelementptr inbounds double, ptr %2831, i64 %2701
  %2839 = load double, ptr %2838, align 8, !tbaa !15
  %2840 = fadd double %2833, %2839
  store double %2840, ptr %2838, align 8, !tbaa !15
  %2841 = getelementptr inbounds double, ptr %2831, i64 %2703
  %2842 = load double, ptr %2841, align 8, !tbaa !15
  %2843 = fadd double %2834, %2842
  store double %2843, ptr %2841, align 8, !tbaa !15
  %2844 = mul nsw i32 %2819, 3
  %2845 = sext i32 %2844 to i64
  %2846 = getelementptr inbounds double, ptr %2831, i64 %2845
  %2847 = load double, ptr %2846, align 8, !tbaa !15
  %2848 = fadd double %2832, %2847
  store double %2848, ptr %2846, align 8, !tbaa !15
  %2849 = add nsw i32 %2844, 1
  %2850 = sext i32 %2849 to i64
  %2851 = getelementptr inbounds double, ptr %2831, i64 %2850
  %2852 = load double, ptr %2851, align 8, !tbaa !15
  %2853 = fadd double %2833, %2852
  store double %2853, ptr %2851, align 8, !tbaa !15
  %2854 = add nsw i32 %2844, 2
  %2855 = sext i32 %2854 to i64
  %2856 = getelementptr inbounds double, ptr %2831, i64 %2855
  %2857 = load double, ptr %2856, align 8, !tbaa !15
  %2858 = fadd double %2834, %2857
  store double %2858, ptr %2856, align 8, !tbaa !15
  %2859 = add nuw nsw i64 %2706, 1
  %2860 = icmp eq i64 %2859, %2704
  br i1 %2860, label %2861, label %2705

2861:                                             ; preds = %2705, %2675
  %2862 = phi double [ %2676, %2675 ], [ %2804, %2705 ]
  %2863 = phi double [ %2678, %2675 ], [ %2773, %2705 ]
  %2864 = phi <2 x double> [ %2681, %2675 ], [ %2796, %2705 ]
  %2865 = phi <2 x double> [ %2682, %2675 ], [ %2789, %2705 ]
  %2866 = phi <2 x double> [ %2685, %2675 ], [ %2802, %2705 ]
  %2867 = phi <2 x double> [ %2687, %2675 ], [ %2798, %2705 ]
  %2868 = getelementptr inbounds %class.Vector, ptr %628, i64 %696
  %2869 = load <2 x double>, ptr %2868, align 8, !tbaa !15
  %2870 = fadd <2 x double> %2686, %2869
  store <2 x double> %2870, ptr %2868, align 8, !tbaa !15
  %2871 = getelementptr inbounds %class.Vector, ptr %628, i64 %696, i32 2
  %2872 = load double, ptr %2871, align 8, !tbaa !89
  %2873 = fadd double %2677, %2872
  store double %2873, ptr %2871, align 8, !tbaa !89
  %2874 = getelementptr inbounds %class.Vector, ptr %632, i64 %696
  %2875 = load <2 x double>, ptr %2874, align 8, !tbaa !15
  %2876 = fadd <2 x double> %2867, %2875
  store <2 x double> %2876, ptr %2874, align 8, !tbaa !15
  %2877 = getelementptr inbounds %class.Vector, ptr %632, i64 %696, i32 2
  %2878 = load double, ptr %2877, align 8, !tbaa !89
  %2879 = fadd double %2862, %2878
  store double %2879, ptr %2877, align 8, !tbaa !89
  br i1 %149, label %2882, label %2880

2880:                                             ; preds = %2861
  %2881 = add nsw i32 %683, 1
  br label %2890

2882:                                             ; preds = %2861
  %2883 = load ptr, ptr %12, align 8, !tbaa !47
  %2884 = load i32, ptr %17, align 8, !tbaa !19
  %2885 = add nsw i32 %2884, 1
  store i32 %2885, ptr %17, align 8, !tbaa !19
  %2886 = sext i32 %2884 to i64
  %2887 = getelementptr inbounds i16, ptr %2883, i64 %2886
  %2888 = load i16, ptr %2887, align 2, !tbaa !45
  %2889 = zext i16 %2888 to i32
  br label %2890

2890:                                             ; preds = %1267, %1226, %1155, %1606, %2882, %2880, %708
  %2891 = phi i32 [ %709, %708 ], [ %712, %2882 ], [ %712, %2880 ], [ %712, %1606 ], [ %712, %1155 ], [ %712, %1226 ], [ %712, %1267 ]
  %2892 = phi i32 [ %687, %708 ], [ %2001, %2882 ], [ %2001, %2880 ], [ %1169, %1606 ], [ 0, %1155 ], [ %1169, %1226 ], [ %1169, %1267 ]
  %2893 = phi ptr [ %686, %708 ], [ %2002, %2882 ], [ %2002, %2880 ], [ %978, %1606 ], [ %978, %1155 ], [ %978, %1226 ], [ %978, %1267 ]
  %2894 = phi ptr [ %685, %708 ], [ %2003, %2882 ], [ %2003, %2880 ], [ %979, %1606 ], [ %979, %1155 ], [ %979, %1226 ], [ %979, %1267 ]
  %2895 = phi ptr [ %684, %708 ], [ %2004, %2882 ], [ %2004, %2880 ], [ %980, %1606 ], [ %980, %1155 ], [ %980, %1226 ], [ %980, %1267 ]
  %2896 = phi i32 [ %710, %708 ], [ %2889, %2882 ], [ %2881, %2880 ], [ %1607, %1606 ], [ %1159, %1155 ], [ %1227, %1226 ], [ %1268, %1267 ]
  %2897 = phi double [ %682, %708 ], [ %2863, %2882 ], [ %2863, %2880 ], [ %682, %1606 ], [ %682, %1155 ], [ %682, %1226 ], [ %682, %1267 ]
  %2898 = phi i32 [ %681, %708 ], [ %2690, %2882 ], [ %2690, %2880 ], [ %681, %1606 ], [ %681, %1155 ], [ %681, %1226 ], [ %681, %1267 ]
  %2899 = phi <2 x double> [ %689, %708 ], [ %2679, %2882 ], [ %2679, %2880 ], [ %689, %1606 ], [ %689, %1155 ], [ %689, %1226 ], [ %689, %1267 ]
  %2900 = phi <2 x double> [ %690, %708 ], [ %2680, %2882 ], [ %2680, %2880 ], [ %690, %1606 ], [ %690, %1155 ], [ %690, %1226 ], [ %690, %1267 ]
  %2901 = phi <2 x double> [ %691, %708 ], [ %2864, %2882 ], [ %2864, %2880 ], [ %691, %1606 ], [ %691, %1155 ], [ %691, %1226 ], [ %691, %1267 ]
  %2902 = phi <2 x double> [ %692, %708 ], [ %2865, %2882 ], [ %2865, %2880 ], [ %692, %1606 ], [ %692, %1155 ], [ %692, %1226 ], [ %692, %1267 ]
  %2903 = phi <2 x double> [ %693, %708 ], [ %2683, %2882 ], [ %2683, %2880 ], [ %693, %1606 ], [ %693, %1155 ], [ %693, %1226 ], [ %693, %1267 ]
  %2904 = phi <2 x double> [ %694, %708 ], [ %2684, %2882 ], [ %2684, %2880 ], [ %694, %1606 ], [ %694, %1155 ], [ %694, %1226 ], [ %694, %1267 ]
  %2905 = phi <2 x double> [ %695, %708 ], [ %2866, %2882 ], [ %2866, %2880 ], [ %695, %1606 ], [ %695, %1155 ], [ %695, %1226 ], [ %695, %1267 ]
  %2906 = icmp slt i32 %2896, %41
  br i1 %2906, label %680, label %2907

2907:                                             ; preds = %2890, %649
  %2908 = phi ptr [ null, %649 ], [ %2895, %2890 ]
  %2909 = phi i32 [ %651, %649 ], [ %2896, %2890 ]
  %2910 = phi double [ 0.000000e+00, %649 ], [ %2897, %2890 ]
  %2911 = phi i32 [ 0, %649 ], [ %2898, %2890 ]
  %2912 = phi <2 x double> [ zeroinitializer, %649 ], [ %2899, %2890 ]
  %2913 = phi <2 x double> [ zeroinitializer, %649 ], [ %2900, %2890 ]
  %2914 = phi <2 x double> [ zeroinitializer, %649 ], [ %2901, %2890 ]
  %2915 = phi <2 x double> [ zeroinitializer, %649 ], [ %2902, %2890 ]
  %2916 = phi <2 x double> [ zeroinitializer, %649 ], [ %2903, %2890 ]
  %2917 = phi <2 x double> [ zeroinitializer, %649 ], [ %2904, %2890 ]
  %2918 = phi <2 x double> [ zeroinitializer, %649 ], [ %2905, %2890 ]
  br i1 %147, label %2926, label %2919

2919:                                             ; preds = %2907
  %2920 = trunc i32 %2909 to i16
  %2921 = load ptr, ptr %12, align 8, !tbaa !47
  %2922 = load i32, ptr %17, align 8, !tbaa !19
  %2923 = add nsw i32 %2922, -1
  %2924 = sext i32 %2923 to i64
  %2925 = getelementptr inbounds i16, ptr %2921, i64 %2924
  store i16 %2920, ptr %2925, align 2, !tbaa !45
  br label %2926

2926:                                             ; preds = %2919, %2907
  %2927 = sitofp i32 %2911 to double
  %2928 = getelementptr inbounds double, ptr %6, i64 22
  %2929 = load double, ptr %2928, align 8, !tbaa !15
  %2930 = fadd double %2929, %2927
  store double %2930, ptr %2928, align 8, !tbaa !15
  %2931 = getelementptr inbounds double, ptr %6, i64 2
  %2932 = load double, ptr %2931, align 8, !tbaa !15
  %2933 = extractelement <2 x double> %2916, i64 1
  %2934 = fadd double %2933, %2932
  store double %2934, ptr %2931, align 8, !tbaa !15
  %2935 = load double, ptr %6, align 8, !tbaa !15
  %2936 = extractelement <2 x double> %2916, i64 0
  %2937 = fadd double %2936, %2935
  store double %2937, ptr %6, align 8, !tbaa !15
  %2938 = getelementptr inbounds double, ptr %6, i64 3
  %2939 = load <4 x double>, ptr %2938, align 8, !tbaa !15
  %2940 = shufflevector <2 x double> %2912, <2 x double> %2917, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2941 = shufflevector <4 x double> %2940, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2942 = fadd <4 x double> %2941, %2939
  store <4 x double> %2942, ptr %2938, align 8, !tbaa !15
  %2943 = getelementptr inbounds double, ptr %6, i64 7
  %2944 = load <4 x double>, ptr %2943, align 8, !tbaa !15
  %2945 = shufflevector <2 x double> %2913, <2 x double> %2917, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2946 = shufflevector <4 x double> %2945, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2947 = fadd <4 x double> %2946, %2944
  store <4 x double> %2947, ptr %2943, align 8, !tbaa !15
  %2948 = getelementptr inbounds double, ptr %6, i64 11
  %2949 = load double, ptr %2948, align 8, !tbaa !15
  %2950 = extractelement <2 x double> %2917, i64 0
  %2951 = fadd double %2950, %2949
  store double %2951, ptr %2948, align 8, !tbaa !15
  %2952 = getelementptr inbounds double, ptr %6, i64 1
  %2953 = load double, ptr %2952, align 8, !tbaa !15
  %2954 = fadd double %2910, %2953
  store double %2954, ptr %2952, align 8, !tbaa !15
  %2955 = getelementptr inbounds double, ptr %6, i64 12
  %2956 = load <4 x double>, ptr %2955, align 8, !tbaa !15
  %2957 = shufflevector <2 x double> %2914, <2 x double> %2918, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2958 = shufflevector <4 x double> %2957, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2959 = fadd <4 x double> %2958, %2956
  store <4 x double> %2959, ptr %2955, align 8, !tbaa !15
  %2960 = getelementptr inbounds double, ptr %6, i64 16
  %2961 = load <4 x double>, ptr %2960, align 8, !tbaa !15
  %2962 = shufflevector <2 x double> %2915, <2 x double> %2918, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2963 = shufflevector <4 x double> %2962, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2964 = fadd <4 x double> %2963, %2961
  store <4 x double> %2964, ptr %2960, align 8, !tbaa !15
  %2965 = getelementptr inbounds double, ptr %6, i64 20
  %2966 = load double, ptr %2965, align 8, !tbaa !15
  %2967 = extractelement <2 x double> %2918, i64 0
  %2968 = fadd double %2967, %2966
  store double %2968, ptr %2965, align 8, !tbaa !15
  %2969 = icmp eq ptr %2908, null
  br i1 %2969, label %2971, label %2970

2970:                                             ; preds = %2926
  tail call void @_ZdaPv(ptr noundef nonnull %2908) #10
  br label %2971

2971:                                             ; preds = %2926, %2970, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil31calc_pair_merge_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2656

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %604, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %616

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %616

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %616, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %616

604:                                              ; preds = %469
  %605 = load ptr, ptr %12, align 8, !tbaa !47
  %606 = load i32, ptr %17, align 8, !tbaa !19
  %607 = add nsw i32 %606, 1
  store i32 %607, ptr %17, align 8, !tbaa !19
  %608 = sext i32 %606 to i64
  %609 = getelementptr inbounds i16, ptr %605, i64 %608
  %610 = load i16, ptr %609, align 2, !tbaa !45
  %611 = zext i16 %610 to i32
  %612 = icmp eq i32 %40, %611
  br i1 %612, label %633, label %613

613:                                              ; preds = %604
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  br label %633

616:                                              ; preds = %472, %597, %594, %535
  %617 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %618 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %619 = load i32, ptr %17, align 8, !tbaa !19
  %620 = trunc i32 %40 to i16
  %621 = load ptr, ptr %12, align 8, !tbaa !47
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds i16, ptr %621, i64 %622
  store i16 %620, ptr %623, align 2, !tbaa !45
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %625 = load i32, ptr %624, align 4, !tbaa !48
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %627 = load i32, ptr %626, align 4, !tbaa !49
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %629 = load ptr, ptr %628, align 8, !tbaa !24
  %630 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %631 = load ptr, ptr %630, align 8, !tbaa !24
  %632 = add nsw i32 %619, 2
  store i32 %632, ptr %17, align 8, !tbaa !19
  br label %649

633:                                              ; preds = %613, %604
  %634 = phi i32 [ %607, %604 ], [ %615, %613 ]
  %635 = phi ptr [ %605, %604 ], [ %614, %613 ]
  %636 = sext i32 %634 to i64
  %637 = getelementptr inbounds i16, ptr %635, i64 %636
  %638 = load i16, ptr %637, align 2, !tbaa !45
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !48
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %642 = load i32, ptr %641, align 4, !tbaa !49
  %643 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %644 = load ptr, ptr %643, align 8, !tbaa !24
  %645 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %646 = load ptr, ptr %645, align 8, !tbaa !24
  %647 = add nsw i32 %634, 1
  store i32 %647, ptr %17, align 8, !tbaa !19
  %648 = zext i16 %638 to i32
  br label %649

649:                                              ; preds = %633, %616
  %650 = phi i32 [ %640, %633 ], [ %625, %616 ]
  %651 = phi i32 [ %642, %633 ], [ %627, %616 ]
  %652 = phi ptr [ %644, %633 ], [ %629, %616 ]
  %653 = phi ptr [ %646, %633 ], [ %631, %616 ]
  %654 = phi i32 [ 0, %633 ], [ %618, %616 ]
  %655 = phi i32 [ 0, %633 ], [ %617, %616 ]
  %656 = phi i32 [ %648, %633 ], [ 0, %616 ]
  %657 = add nsw i32 %651, -1
  %658 = icmp slt i32 %656, %40
  br i1 %658, label %659, label %2621

659:                                              ; preds = %649
  %660 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %661 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %662 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %663 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %664 = ptrtoint ptr %425 to i64
  %665 = add nsw i32 %42, 10
  %666 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %667 = ptrtoint ptr %471 to i64
  %668 = getelementptr inbounds i16, ptr %425, i64 1
  %669 = ptrtoint ptr %333 to i64
  %670 = ptrtoint ptr %379 to i64
  %671 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %672 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %673 = fneg double %32
  %674 = getelementptr inbounds double, ptr %6, i64 26
  %675 = getelementptr inbounds double, ptr %6, i64 28
  %676 = getelementptr inbounds double, ptr %6, i64 29
  %677 = getelementptr inbounds double, ptr %6, i64 31
  %678 = fneg double %34
  %679 = insertelement <2 x double> poison, double %27, i64 0
  %680 = shufflevector <2 x double> %679, <2 x double> poison, <2 x i32> zeroinitializer
  br label %681

681:                                              ; preds = %659, %2609
  %682 = phi i32 [ 0, %659 ], [ %2616, %2609 ]
  %683 = phi i32 [ %656, %659 ], [ %2615, %2609 ]
  %684 = phi ptr [ null, %659 ], [ %2614, %2609 ]
  %685 = phi ptr [ null, %659 ], [ %2613, %2609 ]
  %686 = phi ptr [ null, %659 ], [ %2612, %2609 ]
  %687 = phi i32 [ 0, %659 ], [ %2611, %2609 ]
  %688 = phi i32 [ %650, %659 ], [ %2610, %2609 ]
  %689 = phi <2 x double> [ zeroinitializer, %659 ], [ %2617, %2609 ]
  %690 = phi <2 x double> [ zeroinitializer, %659 ], [ %2618, %2609 ]
  %691 = phi <2 x double> [ zeroinitializer, %659 ], [ %2619, %2609 ]
  %692 = sext i32 %683 to i64
  %693 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %692
  %694 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %692
  br i1 %148, label %707, label %695

695:                                              ; preds = %681
  %696 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %692, i32 4
  %697 = load i8, ptr %696, align 1
  %698 = lshr i8 %697, 3
  %699 = and i8 %698, 15
  %700 = zext i8 %699 to i32
  %701 = icmp eq i8 %699, 0
  br i1 %701, label %707, label %702

702:                                              ; preds = %695
  %703 = icmp eq i32 %688, 0
  br i1 %703, label %707, label %704

704:                                              ; preds = %702
  %705 = add nsw i32 %688, -1
  %706 = add nsw i32 %683, %700
  br label %2609

707:                                              ; preds = %702, %695, %681
  %708 = phi i32 [ %688, %681 ], [ %688, %695 ], [ %657, %702 ]
  %709 = load <2 x double>, ptr %693, align 8, !tbaa !15
  %710 = fadd <2 x double> %19, %709
  %711 = getelementptr inbounds %class.Vector, ptr %693, i64 0, i32 2
  %712 = load double, ptr %711, align 8, !tbaa !50
  %713 = fadd double %21, %712
  %714 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %692, i32 3
  %715 = load i8, ptr %714, align 2, !tbaa !52
  %716 = zext i8 %715 to i32
  %717 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %718 = fsub double %712, %717
  %719 = fmul double %10, %718
  %720 = tail call double @llvm.floor.f64(double %719)
  %721 = fptosi double %720 to i32
  %722 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %723 = icmp slt i32 %721, 0
  %724 = select i1 %723, i32 %722, i32 0
  %725 = icmp sgt i32 %722, %721
  %726 = select i1 %725, i32 0, i32 %722
  %727 = sub i32 %721, %726
  %728 = add i32 %727, %724
  br i1 %148, label %1960, label %729

729:                                              ; preds = %707
  %730 = load i32, ptr %694, align 4
  %731 = shl i32 %730, 2
  %732 = ashr exact i32 %731, 2
  %733 = load ptr, ptr %660, align 8, !tbaa !53
  %734 = sext i32 %732 to i64
  %735 = getelementptr inbounds %class.ExclusionCheck, ptr %733, i64 %734
  %736 = load i32, ptr %735, align 8, !tbaa !55
  %737 = getelementptr inbounds %class.ExclusionCheck, ptr %733, i64 %734, i32 1
  %738 = load i32, ptr %737, align 4, !tbaa !57
  %739 = getelementptr inbounds %class.ExclusionCheck, ptr %733, i64 %734, i32 2
  %740 = load ptr, ptr %739, align 8, !tbaa !58
  %741 = icmp eq ptr %740, null
  br i1 %741, label %746, label %742

742:                                              ; preds = %729
  %743 = sext i32 %736 to i64
  %744 = sub nsw i64 0, %743
  %745 = getelementptr inbounds i8, ptr %740, i64 %744
  br label %972

746:                                              ; preds = %729
  %747 = icmp eq ptr %684, null
  br i1 %747, label %835, label %748

748:                                              ; preds = %746
  %749 = load i32, ptr %685, align 4, !tbaa !5
  %750 = icmp slt i32 %749, 1
  br i1 %750, label %798, label %751

751:                                              ; preds = %748
  %752 = add nuw i32 %749, 1
  %753 = zext i32 %752 to i64
  %754 = add nsw i64 %753, -1
  %755 = add nsw i64 %753, -2
  %756 = and i64 %754, 3
  %757 = icmp ult i64 %755, 3
  br i1 %757, label %785, label %758

758:                                              ; preds = %751
  %759 = and i64 %754, -4
  br label %760

760:                                              ; preds = %760, %758
  %761 = phi i64 [ 1, %758 ], [ %782, %760 ]
  %762 = phi i64 [ 0, %758 ], [ %783, %760 ]
  %763 = getelementptr inbounds i32, ptr %685, i64 %761
  %764 = load i32, ptr %763, align 4, !tbaa !5
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, ptr %684, i64 %765
  store i8 0, ptr %766, align 1, !tbaa !59
  %767 = add nuw nsw i64 %761, 1
  %768 = getelementptr inbounds i32, ptr %685, i64 %767
  %769 = load i32, ptr %768, align 4, !tbaa !5
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, ptr %684, i64 %770
  store i8 0, ptr %771, align 1, !tbaa !59
  %772 = add nuw nsw i64 %761, 2
  %773 = getelementptr inbounds i32, ptr %685, i64 %772
  %774 = load i32, ptr %773, align 4, !tbaa !5
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, ptr %684, i64 %775
  store i8 0, ptr %776, align 1, !tbaa !59
  %777 = add nuw nsw i64 %761, 3
  %778 = getelementptr inbounds i32, ptr %685, i64 %777
  %779 = load i32, ptr %778, align 4, !tbaa !5
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, ptr %684, i64 %780
  store i8 0, ptr %781, align 1, !tbaa !59
  %782 = add nuw nsw i64 %761, 4
  %783 = add i64 %762, 4
  %784 = icmp eq i64 %783, %759
  br i1 %784, label %785, label %760

785:                                              ; preds = %760, %751
  %786 = phi i64 [ 1, %751 ], [ %782, %760 ]
  %787 = icmp eq i64 %756, 0
  br i1 %787, label %798, label %788

788:                                              ; preds = %785, %788
  %789 = phi i64 [ %795, %788 ], [ %786, %785 ]
  %790 = phi i64 [ %796, %788 ], [ 0, %785 ]
  %791 = getelementptr inbounds i32, ptr %685, i64 %789
  %792 = load i32, ptr %791, align 4, !tbaa !5
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, ptr %684, i64 %793
  store i8 0, ptr %794, align 1, !tbaa !59
  %795 = add nuw nsw i64 %789, 1
  %796 = add i64 %790, 1
  %797 = icmp eq i64 %796, %756
  br i1 %797, label %798, label %788, !llvm.loop !126

798:                                              ; preds = %785, %788, %748
  %799 = load i32, ptr %686, align 4, !tbaa !5
  %800 = icmp slt i32 %799, 1
  br i1 %800, label %855, label %801

801:                                              ; preds = %798
  %802 = add nuw i32 %799, 1
  %803 = zext i32 %802 to i64
  %804 = add nsw i64 %803, -1
  %805 = add nsw i64 %803, -2
  %806 = and i64 %804, 3
  %807 = icmp ult i64 %805, 3
  br i1 %807, label %842, label %808

808:                                              ; preds = %801
  %809 = and i64 %804, -4
  br label %810

810:                                              ; preds = %810, %808
  %811 = phi i64 [ 1, %808 ], [ %832, %810 ]
  %812 = phi i64 [ 0, %808 ], [ %833, %810 ]
  %813 = getelementptr inbounds i32, ptr %686, i64 %811
  %814 = load i32, ptr %813, align 4, !tbaa !5
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds i8, ptr %684, i64 %815
  store i8 0, ptr %816, align 1, !tbaa !59
  %817 = add nuw nsw i64 %811, 1
  %818 = getelementptr inbounds i32, ptr %686, i64 %817
  %819 = load i32, ptr %818, align 4, !tbaa !5
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i8, ptr %684, i64 %820
  store i8 0, ptr %821, align 1, !tbaa !59
  %822 = add nuw nsw i64 %811, 2
  %823 = getelementptr inbounds i32, ptr %686, i64 %822
  %824 = load i32, ptr %823, align 4, !tbaa !5
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i8, ptr %684, i64 %825
  store i8 0, ptr %826, align 1, !tbaa !59
  %827 = add nuw nsw i64 %811, 3
  %828 = getelementptr inbounds i32, ptr %686, i64 %827
  %829 = load i32, ptr %828, align 4, !tbaa !5
  %830 = sext i32 %829 to i64
  %831 = getelementptr inbounds i8, ptr %684, i64 %830
  store i8 0, ptr %831, align 1, !tbaa !59
  %832 = add nuw nsw i64 %811, 4
  %833 = add i64 %812, 4
  %834 = icmp eq i64 %833, %809
  br i1 %834, label %842, label %810

835:                                              ; preds = %746
  %836 = load i32, ptr %661, align 8, !tbaa !62
  %837 = tail call i32 @llvm.smax.i32(i32 %836, i32 -1)
  %838 = sext i32 %837 to i64
  %839 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %838) #9
  %840 = load i32, ptr %661, align 8, !tbaa !62
  %841 = sext i32 %840 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %839, i8 0, i64 %841, i1 false)
  br label %855

842:                                              ; preds = %810, %801
  %843 = phi i64 [ 1, %801 ], [ %832, %810 ]
  %844 = icmp eq i64 %806, 0
  br i1 %844, label %855, label %845

845:                                              ; preds = %842, %845
  %846 = phi i64 [ %852, %845 ], [ %843, %842 ]
  %847 = phi i64 [ %853, %845 ], [ 0, %842 ]
  %848 = getelementptr inbounds i32, ptr %686, i64 %846
  %849 = load i32, ptr %848, align 4, !tbaa !5
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds i8, ptr %684, i64 %850
  store i8 0, ptr %851, align 1, !tbaa !59
  %852 = add nuw nsw i64 %846, 1
  %853 = add i64 %847, 1
  %854 = icmp eq i64 %853, %806
  br i1 %854, label %855, label %845, !llvm.loop !127

855:                                              ; preds = %842, %845, %798, %835
  %856 = phi ptr [ %839, %835 ], [ %684, %798 ], [ %684, %845 ], [ %684, %842 ]
  %857 = load i32, ptr %694, align 4
  %858 = shl i32 %857, 2
  %859 = ashr exact i32 %858, 2
  %860 = load ptr, ptr %662, align 8, !tbaa !64
  %861 = sext i32 %859 to i64
  %862 = getelementptr inbounds ptr, ptr %860, i64 %861
  %863 = load ptr, ptr %862, align 8, !tbaa !24
  %864 = load i32, ptr %863, align 4, !tbaa !5
  %865 = icmp slt i32 %864, 1
  br i1 %865, label %918, label %866

866:                                              ; preds = %855
  %867 = add nuw i32 %864, 1
  %868 = zext i32 %867 to i64
  %869 = add nsw i64 %868, -1
  %870 = add nsw i64 %868, -2
  %871 = and i64 %869, 3
  %872 = icmp ult i64 %870, 3
  br i1 %872, label %900, label %873

873:                                              ; preds = %866
  %874 = and i64 %869, -4
  br label %875

875:                                              ; preds = %875, %873
  %876 = phi i64 [ 1, %873 ], [ %897, %875 ]
  %877 = phi i64 [ 0, %873 ], [ %898, %875 ]
  %878 = getelementptr inbounds i32, ptr %863, i64 %876
  %879 = load i32, ptr %878, align 4, !tbaa !5
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds i8, ptr %856, i64 %880
  store i8 1, ptr %881, align 1, !tbaa !59
  %882 = add nuw nsw i64 %876, 1
  %883 = getelementptr inbounds i32, ptr %863, i64 %882
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, ptr %856, i64 %885
  store i8 1, ptr %886, align 1, !tbaa !59
  %887 = add nuw nsw i64 %876, 2
  %888 = getelementptr inbounds i32, ptr %863, i64 %887
  %889 = load i32, ptr %888, align 4, !tbaa !5
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i8, ptr %856, i64 %890
  store i8 1, ptr %891, align 1, !tbaa !59
  %892 = add nuw nsw i64 %876, 3
  %893 = getelementptr inbounds i32, ptr %863, i64 %892
  %894 = load i32, ptr %893, align 4, !tbaa !5
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds i8, ptr %856, i64 %895
  store i8 1, ptr %896, align 1, !tbaa !59
  %897 = add nuw nsw i64 %876, 4
  %898 = add i64 %877, 4
  %899 = icmp eq i64 %898, %874
  br i1 %899, label %900, label %875

900:                                              ; preds = %875, %866
  %901 = phi i64 [ 1, %866 ], [ %897, %875 ]
  %902 = icmp eq i64 %871, 0
  br i1 %902, label %913, label %903

903:                                              ; preds = %900, %903
  %904 = phi i64 [ %910, %903 ], [ %901, %900 ]
  %905 = phi i64 [ %911, %903 ], [ 0, %900 ]
  %906 = getelementptr inbounds i32, ptr %863, i64 %904
  %907 = load i32, ptr %906, align 4, !tbaa !5
  %908 = sext i32 %907 to i64
  %909 = getelementptr inbounds i8, ptr %856, i64 %908
  store i8 1, ptr %909, align 1, !tbaa !59
  %910 = add nuw nsw i64 %904, 1
  %911 = add i64 %905, 1
  %912 = icmp eq i64 %911, %871
  br i1 %912, label %913, label %903, !llvm.loop !128

913:                                              ; preds = %903, %900
  %914 = load i32, ptr %694, align 4
  %915 = shl i32 %914, 2
  %916 = ashr exact i32 %915, 2
  %917 = sext i32 %916 to i64
  br label %918

918:                                              ; preds = %913, %855
  %919 = phi i64 [ %917, %913 ], [ %861, %855 ]
  %920 = load ptr, ptr %663, align 8, !tbaa !66
  %921 = getelementptr inbounds ptr, ptr %920, i64 %919
  %922 = load ptr, ptr %921, align 8, !tbaa !24
  %923 = load i32, ptr %922, align 4, !tbaa !5
  %924 = icmp slt i32 %923, 1
  br i1 %924, label %972, label %925

925:                                              ; preds = %918
  %926 = add nuw i32 %923, 1
  %927 = zext i32 %926 to i64
  %928 = add nsw i64 %927, -1
  %929 = add nsw i64 %927, -2
  %930 = and i64 %928, 3
  %931 = icmp ult i64 %929, 3
  br i1 %931, label %959, label %932

932:                                              ; preds = %925
  %933 = and i64 %928, -4
  br label %934

934:                                              ; preds = %934, %932
  %935 = phi i64 [ 1, %932 ], [ %956, %934 ]
  %936 = phi i64 [ 0, %932 ], [ %957, %934 ]
  %937 = getelementptr inbounds i32, ptr %922, i64 %935
  %938 = load i32, ptr %937, align 4, !tbaa !5
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i8, ptr %856, i64 %939
  store i8 2, ptr %940, align 1, !tbaa !59
  %941 = add nuw nsw i64 %935, 1
  %942 = getelementptr inbounds i32, ptr %922, i64 %941
  %943 = load i32, ptr %942, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i8, ptr %856, i64 %944
  store i8 2, ptr %945, align 1, !tbaa !59
  %946 = add nuw nsw i64 %935, 2
  %947 = getelementptr inbounds i32, ptr %922, i64 %946
  %948 = load i32, ptr %947, align 4, !tbaa !5
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i8, ptr %856, i64 %949
  store i8 2, ptr %950, align 1, !tbaa !59
  %951 = add nuw nsw i64 %935, 3
  %952 = getelementptr inbounds i32, ptr %922, i64 %951
  %953 = load i32, ptr %952, align 4, !tbaa !5
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i8, ptr %856, i64 %954
  store i8 2, ptr %955, align 1, !tbaa !59
  %956 = add nuw nsw i64 %935, 4
  %957 = add i64 %936, 4
  %958 = icmp eq i64 %957, %933
  br i1 %958, label %959, label %934

959:                                              ; preds = %934, %925
  %960 = phi i64 [ 1, %925 ], [ %956, %934 ]
  %961 = icmp eq i64 %930, 0
  br i1 %961, label %972, label %962

962:                                              ; preds = %959, %962
  %963 = phi i64 [ %969, %962 ], [ %960, %959 ]
  %964 = phi i64 [ %970, %962 ], [ 0, %959 ]
  %965 = getelementptr inbounds i32, ptr %922, i64 %963
  %966 = load i32, ptr %965, align 4, !tbaa !5
  %967 = sext i32 %966 to i64
  %968 = getelementptr inbounds i8, ptr %856, i64 %967
  store i8 2, ptr %968, align 1, !tbaa !59
  %969 = add nuw nsw i64 %963, 1
  %970 = add i64 %964, 1
  %971 = icmp eq i64 %970, %930
  br i1 %971, label %972, label %962, !llvm.loop !129

972:                                              ; preds = %959, %962, %918, %742
  %973 = phi ptr [ %745, %742 ], [ %856, %918 ], [ %856, %962 ], [ %856, %959 ]
  %974 = phi ptr [ %686, %742 ], [ %922, %918 ], [ %922, %962 ], [ %922, %959 ]
  %975 = phi ptr [ %685, %742 ], [ %863, %918 ], [ %863, %962 ], [ %863, %959 ]
  %976 = phi ptr [ %684, %742 ], [ %856, %918 ], [ %856, %962 ], [ %856, %959 ]
  %977 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %692, i32 4
  %978 = load i8, ptr %977, align 1
  %979 = and i8 %978, 7
  %980 = icmp eq i8 %979, 0
  %981 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %980, label %1164, label %982

982:                                              ; preds = %972
  %983 = icmp eq i32 %981, 0
  br i1 %983, label %990, label %984

984:                                              ; preds = %982
  %985 = load i32, ptr %694, align 4
  %986 = freeze i32 %985
  %987 = icmp slt i32 %986, 0
  %988 = select i1 %987, ptr %241, ptr %195
  %989 = select i1 %987, i32 %654, i32 %655
  br label %990

990:                                              ; preds = %984, %982
  %991 = phi ptr [ %195, %982 ], [ %988, %984 ]
  %992 = phi i32 [ %655, %982 ], [ %989, %984 ]
  %993 = icmp sgt i32 %992, 0
  br i1 %993, label %994, label %1145

994:                                              ; preds = %990
  %995 = icmp ugt i32 %992, 6
  br i1 %995, label %996, label %1080

996:                                              ; preds = %994
  %997 = add nsw i32 %992, -2
  %998 = getelementptr inbounds i16, ptr %991, i64 1
  %999 = load i16, ptr %998, align 2, !tbaa !45
  %1000 = zext i16 %999 to i64
  %1001 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1000
  %1002 = getelementptr inbounds %class.Vector, ptr %1001, i64 0, i32 2
  %1003 = load double, ptr %1002, align 8, !tbaa !50
  %1004 = load i16, ptr %991, align 2, !tbaa !45
  %1005 = zext i16 %1004 to i64
  %1006 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1005
  %1007 = getelementptr inbounds %class.Vector, ptr %1006, i64 0, i32 2
  %1008 = load double, ptr %1007, align 8, !tbaa !50
  %1009 = getelementptr inbounds %class.Vector, ptr %1001, i64 0, i32 1
  %1010 = load double, ptr %1009, align 8, !tbaa !68
  %1011 = getelementptr inbounds %class.Vector, ptr %1006, i64 0, i32 1
  %1012 = load double, ptr %1011, align 8, !tbaa !68
  %1013 = load double, ptr %1001, align 8, !tbaa !69
  %1014 = load double, ptr %1006, align 8, !tbaa !69
  %1015 = zext i32 %997 to i64
  %1016 = insertelement <2 x double> poison, double %1003, i64 0
  %1017 = insertelement <2 x double> %1016, double %1008, i64 1
  %1018 = insertelement <2 x double> poison, double %1010, i64 0
  %1019 = insertelement <2 x double> %1018, double %1012, i64 1
  %1020 = insertelement <2 x double> poison, double %1013, i64 0
  %1021 = insertelement <2 x double> %1020, double %1014, i64 1
  %1022 = insertelement <2 x double> poison, double %713, i64 0
  %1023 = shufflevector <2 x double> %1022, <2 x double> poison, <2 x i32> zeroinitializer
  %1024 = shufflevector <2 x double> %710, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1025 = shufflevector <2 x double> %710, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1026

1026:                                             ; preds = %996, %1026
  %1027 = phi i64 [ 2, %996 ], [ %1070, %1026 ]
  %1028 = phi i32 [ 0, %996 ], [ %1069, %1026 ]
  %1029 = phi i16 [ %1004, %996 ], [ %1036, %1026 ]
  %1030 = phi i16 [ %999, %996 ], [ %1039, %1026 ]
  %1031 = phi <2 x double> [ %1017, %996 ], [ %1073, %1026 ]
  %1032 = phi <2 x double> [ %1019, %996 ], [ %1075, %1026 ]
  %1033 = phi <2 x double> [ %1021, %996 ], [ %1077, %1026 ]
  %1034 = fsub <2 x double> %1023, %1031
  %1035 = getelementptr inbounds i16, ptr %991, i64 %1027
  %1036 = load i16, ptr %1035, align 2, !tbaa !45
  %1037 = or i64 %1027, 1
  %1038 = getelementptr inbounds i16, ptr %991, i64 %1037
  %1039 = load i16, ptr %1038, align 2, !tbaa !45
  %1040 = zext i16 %1036 to i64
  %1041 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1040
  %1042 = load double, ptr %1041, align 8, !tbaa !69
  %1043 = zext i16 %1039 to i64
  %1044 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1043
  %1045 = load double, ptr %1044, align 8, !tbaa !69
  %1046 = getelementptr inbounds %class.Vector, ptr %1041, i64 0, i32 1
  %1047 = load double, ptr %1046, align 8, !tbaa !68
  %1048 = getelementptr inbounds %class.Vector, ptr %1044, i64 0, i32 1
  %1049 = load double, ptr %1048, align 8, !tbaa !68
  %1050 = getelementptr inbounds %class.Vector, ptr %1041, i64 0, i32 2
  %1051 = load double, ptr %1050, align 8, !tbaa !50
  %1052 = getelementptr inbounds %class.Vector, ptr %1044, i64 0, i32 2
  %1053 = load double, ptr %1052, align 8, !tbaa !50
  %1054 = fsub <2 x double> %1025, %1033
  %1055 = fmul <2 x double> %1054, %1054
  %1056 = fsub <2 x double> %1024, %1032
  %1057 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1056, <2 x double> %1056, <2 x double> %1055)
  %1058 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1034, <2 x double> %1034, <2 x double> %1057)
  %1059 = fcmp olt <2 x double> %1058, %680
  %1060 = zext i32 %1028 to i64
  %1061 = getelementptr inbounds i16, ptr %287, i64 %1060
  store i16 %1029, ptr %1061, align 2, !tbaa !45
  %1062 = extractelement <2 x i1> %1059, i64 1
  %1063 = zext i1 %1062 to i32
  %1064 = add nuw nsw i32 %1028, %1063
  %1065 = zext i32 %1064 to i64
  %1066 = getelementptr inbounds i16, ptr %287, i64 %1065
  store i16 %1030, ptr %1066, align 2, !tbaa !45
  %1067 = extractelement <2 x i1> %1059, i64 0
  %1068 = zext i1 %1067 to i32
  %1069 = add i32 %1064, %1068
  %1070 = add nuw nsw i64 %1027, 2
  %1071 = icmp ult i64 %1070, %1015
  %1072 = insertelement <2 x double> poison, double %1053, i64 0
  %1073 = insertelement <2 x double> %1072, double %1051, i64 1
  %1074 = insertelement <2 x double> poison, double %1049, i64 0
  %1075 = insertelement <2 x double> %1074, double %1047, i64 1
  %1076 = insertelement <2 x double> poison, double %1045, i64 0
  %1077 = insertelement <2 x double> %1076, double %1042, i64 1
  br i1 %1071, label %1026, label %1078

1078:                                             ; preds = %1026
  %1079 = trunc i64 %1027 to i32
  br label %1080

1080:                                             ; preds = %1078, %994
  %1081 = phi i32 [ %1069, %1078 ], [ 0, %994 ]
  %1082 = phi i32 [ %1079, %1078 ], [ 0, %994 ]
  %1083 = icmp slt i32 %1082, %992
  br i1 %1083, label %1084, label %1089

1084:                                             ; preds = %1080
  %1085 = zext i32 %1082 to i64
  %1086 = zext i32 %992 to i64
  %1087 = extractelement <2 x double> %710, i64 0
  %1088 = extractelement <2 x double> %710, i64 1
  br label %1094

1089:                                             ; preds = %1117, %1080
  %1090 = phi i32 [ %1081, %1080 ], [ %1118, %1117 ]
  %1091 = icmp sgt i32 %1090, 0
  br i1 %1091, label %1092, label %1145

1092:                                             ; preds = %1089
  %1093 = zext i32 %1090 to i64
  br label %1121

1094:                                             ; preds = %1084, %1117
  %1095 = phi i64 [ %1085, %1084 ], [ %1119, %1117 ]
  %1096 = phi i32 [ %1081, %1084 ], [ %1118, %1117 ]
  %1097 = getelementptr inbounds i16, ptr %991, i64 %1095
  %1098 = load i16, ptr %1097, align 2, !tbaa !45
  %1099 = zext i16 %1098 to i64
  %1100 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1099
  %1101 = load double, ptr %1100, align 8, !tbaa !69
  %1102 = getelementptr inbounds %class.Vector, ptr %1100, i64 0, i32 1
  %1103 = load double, ptr %1102, align 8, !tbaa !68
  %1104 = getelementptr inbounds %class.Vector, ptr %1100, i64 0, i32 2
  %1105 = load double, ptr %1104, align 8, !tbaa !50
  %1106 = fsub double %1087, %1101
  %1107 = fmul double %1106, %1106
  %1108 = fsub double %1088, %1103
  %1109 = tail call double @llvm.fmuladd.f64(double %1108, double %1108, double %1107)
  %1110 = fsub double %713, %1105
  %1111 = tail call double @llvm.fmuladd.f64(double %1110, double %1110, double %1109)
  %1112 = fcmp ugt double %1111, %27
  br i1 %1112, label %1117, label %1113

1113:                                             ; preds = %1094
  %1114 = add nsw i32 %1096, 1
  %1115 = sext i32 %1096 to i64
  %1116 = getelementptr inbounds i16, ptr %287, i64 %1115
  store i16 %1098, ptr %1116, align 2, !tbaa !45
  br label %1117

1117:                                             ; preds = %1113, %1094
  %1118 = phi i32 [ %1114, %1113 ], [ %1096, %1094 ]
  %1119 = add nuw nsw i64 %1095, 1
  %1120 = icmp eq i64 %1119, %1086
  br i1 %1120, label %1089, label %1094

1121:                                             ; preds = %1092, %1138
  %1122 = phi i64 [ 0, %1092 ], [ %1141, %1138 ]
  %1123 = phi ptr [ %425, %1092 ], [ %1140, %1138 ]
  %1124 = getelementptr inbounds i16, ptr %287, i64 %1122
  %1125 = load i16, ptr %1124, align 2, !tbaa !45
  %1126 = zext i16 %1125 to i64
  %1127 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1126, i32 4
  %1128 = load i8, ptr %1127, align 1
  %1129 = and i8 %1128, 7
  store i16 %1125, ptr %1123, align 2, !tbaa !45
  %1130 = getelementptr inbounds i16, ptr %1123, i64 1
  %1131 = insertelement <2 x i16> poison, i16 %1125, i64 0
  %1132 = shufflevector <2 x i16> %1131, <2 x i16> poison, <2 x i32> zeroinitializer
  %1133 = add <2 x i16> %1132, <i16 1, i16 2>
  store <2 x i16> %1133, ptr %1130, align 2, !tbaa !45
  %1134 = icmp ult i8 %1129, 4
  br i1 %1134, label %1138, label %1135

1135:                                             ; preds = %1121
  %1136 = add <2 x i16> %1132, <i16 3, i16 4>
  %1137 = getelementptr inbounds i16, ptr %1123, i64 3
  store <2 x i16> %1136, ptr %1137, align 2, !tbaa !45
  br label %1138

1138:                                             ; preds = %1135, %1121
  %1139 = zext i8 %1129 to i64
  %1140 = getelementptr inbounds i16, ptr %1123, i64 %1139
  %1141 = add nuw nsw i64 %1122, 1
  %1142 = icmp eq i64 %1141, %1093
  br i1 %1142, label %1143, label %1121

1143:                                             ; preds = %1138
  %1144 = ptrtoint ptr %1140 to i64
  br label %1145

1145:                                             ; preds = %1143, %1089, %990
  %1146 = phi i64 [ %1144, %1143 ], [ %664, %1089 ], [ %664, %990 ]
  %1147 = sub i64 %1146, %664
  %1148 = lshr exact i64 %1147, 1
  %1149 = trunc i64 %1148 to i32
  %1150 = icmp eq i32 %1149, 0
  br i1 %1150, label %1151, label %1156

1151:                                             ; preds = %1145
  %1152 = load i8, ptr %977, align 1
  %1153 = and i8 %1152, 7
  %1154 = zext i8 %1153 to i32
  %1155 = add nsw i32 %683, %1154
  br label %2609

1156:                                             ; preds = %1145
  %1157 = shl i64 %1147, 31
  %1158 = add i64 %1157, -4294967296
  %1159 = ashr i64 %1158, 32
  %1160 = getelementptr inbounds i16, ptr %425, i64 %1159
  %1161 = load i16, ptr %1160, align 2, !tbaa !45
  %1162 = ashr i64 %1157, 32
  %1163 = getelementptr inbounds i16, ptr %425, i64 %1162
  store i16 %1161, ptr %1163, align 2, !tbaa !45
  br label %1164

1164:                                             ; preds = %1156, %972
  %1165 = phi i32 [ %1149, %1156 ], [ %687, %972 ]
  %1166 = icmp eq i32 %981, 0
  br i1 %1166, label %1171, label %1167

1167:                                             ; preds = %1164
  %1168 = load i32, ptr %694, align 4
  %1169 = and i32 %1168, 1073741824
  %1170 = icmp ne i32 %1169, 0
  br label %1171

1171:                                             ; preds = %1167, %1164
  %1172 = phi i1 [ false, %1164 ], [ %1170, %1167 ]
  %1173 = load i32, ptr %17, align 8, !tbaa !19
  %1174 = add nsw i32 %665, %1173
  %1175 = load i32, ptr %666, align 4, !tbaa !70
  %1176 = icmp sgt i32 %1175, %1174
  br i1 %1176, label %1192, label %1177

1177:                                             ; preds = %1171, %1177
  %1178 = phi i32 [ %1180, %1177 ], [ %1175, %1171 ]
  %1179 = ashr i32 %1178, 1
  %1180 = add nsw i32 %1179, %1178
  %1181 = icmp sgt i32 %1180, %1174
  br i1 %1181, label %1182, label %1177

1182:                                             ; preds = %1177
  %1183 = sext i32 %1180 to i64
  %1184 = icmp slt i32 %1180, 0
  %1185 = shl nsw i64 %1183, 1
  %1186 = select i1 %1184, i64 -1, i64 %1185
  %1187 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1186) #9
  %1188 = load ptr, ptr %12, align 8, !tbaa !47
  %1189 = sext i32 %1173 to i64
  %1190 = shl nsw i64 %1189, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1187, ptr align 2 %1188, i64 %1190, i1 false)
  %1191 = icmp eq ptr %1188, null
  br i1 %1191, label %1196, label %1194

1192:                                             ; preds = %1171
  %1193 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1198

1194:                                             ; preds = %1182
  tail call void @_ZdaPv(ptr noundef nonnull %1188) #10
  %1195 = load i32, ptr %17, align 8, !tbaa !19
  br label %1196

1196:                                             ; preds = %1194, %1182
  %1197 = phi i32 [ %1195, %1194 ], [ %1173, %1182 ]
  store ptr %1187, ptr %12, align 8, !tbaa !47
  store i32 %1180, ptr %666, align 4, !tbaa !70
  br label %1198

1198:                                             ; preds = %1192, %1196
  %1199 = phi i32 [ %1173, %1192 ], [ %1197, %1196 ]
  %1200 = phi ptr [ %1193, %1192 ], [ %1187, %1196 ]
  %1201 = ptrtoint ptr %1200 to i64
  %1202 = add nsw i32 %1199, 1
  %1203 = sext i32 %1202 to i64
  %1204 = getelementptr inbounds i16, ptr %1200, i64 %1203
  %1205 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1206 = icmp eq i32 %1205, 0
  br i1 %1206, label %1387, label %1207

1207:                                             ; preds = %1198
  %1208 = load i8, ptr %714, align 2, !tbaa !52
  %1209 = zext i8 %1208 to i32
  %1210 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1211 = icmp eq i32 %1210, 0
  br i1 %1211, label %1252, label %1212

1212:                                             ; preds = %1207
  %1213 = icmp eq i8 %1208, 1
  br i1 %1213, label %1214, label %1222

1214:                                             ; preds = %1212
  %1215 = icmp sgt i32 %1165, 0
  br i1 %1215, label %1216, label %1327

1216:                                             ; preds = %1214
  %1217 = zext i32 %1165 to i64
  %1218 = and i64 %1217, 1
  %1219 = icmp eq i32 %1165, 1
  br i1 %1219, label %1313, label %1220

1220:                                             ; preds = %1216
  %1221 = and i64 %1217, 4294967294
  br label %1224

1222:                                             ; preds = %1212
  %1223 = add nsw i32 %683, 1
  br label %2609

1224:                                             ; preds = %1247, %1220
  %1225 = phi i64 [ 0, %1220 ], [ %1249, %1247 ]
  %1226 = phi ptr [ %471, %1220 ], [ %1248, %1247 ]
  %1227 = phi i64 [ 0, %1220 ], [ %1250, %1247 ]
  %1228 = getelementptr inbounds i16, ptr %425, i64 %1225
  %1229 = load i16, ptr %1228, align 2, !tbaa !45
  %1230 = zext i16 %1229 to i64
  %1231 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1230, i32 3
  %1232 = load i8, ptr %1231, align 2, !tbaa !52
  %1233 = icmp eq i8 %1232, 1
  br i1 %1233, label %1234, label %1236

1234:                                             ; preds = %1224
  %1235 = getelementptr inbounds i16, ptr %1226, i64 1
  store i16 %1229, ptr %1226, align 2, !tbaa !45
  br label %1236

1236:                                             ; preds = %1234, %1224
  %1237 = phi ptr [ %1235, %1234 ], [ %1226, %1224 ]
  %1238 = or i64 %1225, 1
  %1239 = getelementptr inbounds i16, ptr %425, i64 %1238
  %1240 = load i16, ptr %1239, align 2, !tbaa !45
  %1241 = zext i16 %1240 to i64
  %1242 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1241, i32 3
  %1243 = load i8, ptr %1242, align 2, !tbaa !52
  %1244 = icmp eq i8 %1243, 1
  br i1 %1244, label %1245, label %1247

1245:                                             ; preds = %1236
  %1246 = getelementptr inbounds i16, ptr %1237, i64 1
  store i16 %1240, ptr %1237, align 2, !tbaa !45
  br label %1247

1247:                                             ; preds = %1245, %1236
  %1248 = phi ptr [ %1246, %1245 ], [ %1237, %1236 ]
  %1249 = add nuw nsw i64 %1225, 2
  %1250 = add i64 %1227, 2
  %1251 = icmp eq i64 %1250, %1221
  br i1 %1251, label %1313, label %1224

1252:                                             ; preds = %1207
  %1253 = add i8 %1208, -3
  %1254 = icmp ult i8 %1253, -2
  br i1 %1254, label %1263, label %1255

1255:                                             ; preds = %1252
  %1256 = icmp sgt i32 %1165, 0
  br i1 %1256, label %1257, label %1327

1257:                                             ; preds = %1255
  %1258 = zext i32 %1165 to i64
  %1259 = and i64 %1258, 1
  %1260 = icmp eq i32 %1165, 1
  br i1 %1260, label %1297, label %1261

1261:                                             ; preds = %1257
  %1262 = and i64 %1258, 4294967294
  br label %1265

1263:                                             ; preds = %1252
  %1264 = add nsw i32 %683, 1
  br label %2609

1265:                                             ; preds = %1292, %1261
  %1266 = phi i64 [ 0, %1261 ], [ %1294, %1292 ]
  %1267 = phi ptr [ %471, %1261 ], [ %1293, %1292 ]
  %1268 = phi i64 [ 0, %1261 ], [ %1295, %1292 ]
  %1269 = getelementptr inbounds i16, ptr %425, i64 %1266
  %1270 = load i16, ptr %1269, align 2, !tbaa !45
  %1271 = zext i16 %1270 to i64
  %1272 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1271, i32 3
  %1273 = load i8, ptr %1272, align 2, !tbaa !52
  %1274 = zext i8 %1273 to i32
  %1275 = add nuw nsw i32 %1274, %1209
  %1276 = icmp eq i32 %1275, 3
  br i1 %1276, label %1277, label %1279

1277:                                             ; preds = %1265
  %1278 = getelementptr inbounds i16, ptr %1267, i64 1
  store i16 %1270, ptr %1267, align 2, !tbaa !45
  br label %1279

1279:                                             ; preds = %1277, %1265
  %1280 = phi ptr [ %1278, %1277 ], [ %1267, %1265 ]
  %1281 = or i64 %1266, 1
  %1282 = getelementptr inbounds i16, ptr %425, i64 %1281
  %1283 = load i16, ptr %1282, align 2, !tbaa !45
  %1284 = zext i16 %1283 to i64
  %1285 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1284, i32 3
  %1286 = load i8, ptr %1285, align 2, !tbaa !52
  %1287 = zext i8 %1286 to i32
  %1288 = add nuw nsw i32 %1287, %1209
  %1289 = icmp eq i32 %1288, 3
  br i1 %1289, label %1290, label %1292

1290:                                             ; preds = %1279
  %1291 = getelementptr inbounds i16, ptr %1280, i64 1
  store i16 %1283, ptr %1280, align 2, !tbaa !45
  br label %1292

1292:                                             ; preds = %1290, %1279
  %1293 = phi ptr [ %1291, %1290 ], [ %1280, %1279 ]
  %1294 = add nuw nsw i64 %1266, 2
  %1295 = add i64 %1268, 2
  %1296 = icmp eq i64 %1295, %1262
  br i1 %1296, label %1297, label %1265

1297:                                             ; preds = %1292, %1257
  %1298 = phi ptr [ undef, %1257 ], [ %1293, %1292 ]
  %1299 = phi i64 [ 0, %1257 ], [ %1294, %1292 ]
  %1300 = phi ptr [ %471, %1257 ], [ %1293, %1292 ]
  %1301 = icmp eq i64 %1259, 0
  br i1 %1301, label %1327, label %1302

1302:                                             ; preds = %1297
  %1303 = getelementptr inbounds i16, ptr %425, i64 %1299
  %1304 = load i16, ptr %1303, align 2, !tbaa !45
  %1305 = zext i16 %1304 to i64
  %1306 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1305, i32 3
  %1307 = load i8, ptr %1306, align 2, !tbaa !52
  %1308 = zext i8 %1307 to i32
  %1309 = add nuw nsw i32 %1308, %1209
  %1310 = icmp eq i32 %1309, 3
  br i1 %1310, label %1311, label %1327

1311:                                             ; preds = %1302
  %1312 = getelementptr inbounds i16, ptr %1300, i64 1
  store i16 %1304, ptr %1300, align 2, !tbaa !45
  br label %1327

1313:                                             ; preds = %1247, %1216
  %1314 = phi ptr [ undef, %1216 ], [ %1248, %1247 ]
  %1315 = phi i64 [ 0, %1216 ], [ %1249, %1247 ]
  %1316 = phi ptr [ %471, %1216 ], [ %1248, %1247 ]
  %1317 = icmp eq i64 %1218, 0
  br i1 %1317, label %1327, label %1318

1318:                                             ; preds = %1313
  %1319 = getelementptr inbounds i16, ptr %425, i64 %1315
  %1320 = load i16, ptr %1319, align 2, !tbaa !45
  %1321 = zext i16 %1320 to i64
  %1322 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1321, i32 3
  %1323 = load i8, ptr %1322, align 2, !tbaa !52
  %1324 = icmp eq i8 %1323, 1
  br i1 %1324, label %1325, label %1327

1325:                                             ; preds = %1318
  %1326 = getelementptr inbounds i16, ptr %1316, i64 1
  store i16 %1320, ptr %1316, align 2, !tbaa !45
  br label %1327

1327:                                             ; preds = %1313, %1325, %1318, %1297, %1311, %1302, %1214, %1255
  %1328 = phi ptr [ %471, %1255 ], [ %471, %1214 ], [ %1298, %1297 ], [ %1312, %1311 ], [ %1300, %1302 ], [ %1314, %1313 ], [ %1326, %1325 ], [ %1316, %1318 ]
  %1329 = ptrtoint ptr %1328 to i64
  %1330 = sub i64 %1329, %667
  %1331 = lshr exact i64 %1330, 1
  %1332 = trunc i64 %1331 to i32
  %1333 = icmp sgt i32 %1332, 0
  br i1 %1333, label %1334, label %1596

1334:                                             ; preds = %1327
  %1335 = and i64 %1331, 4294967295
  %1336 = extractelement <2 x double> %710, i64 0
  %1337 = extractelement <2 x double> %710, i64 1
  br label %1338

1338:                                             ; preds = %1334, %1382
  %1339 = phi i64 [ 0, %1334 ], [ %1385, %1382 ]
  %1340 = phi ptr [ %471, %1334 ], [ %1384, %1382 ]
  %1341 = phi ptr [ %1204, %1334 ], [ %1383, %1382 ]
  %1342 = getelementptr inbounds i16, ptr %471, i64 %1339
  %1343 = load i16, ptr %1342, align 2, !tbaa !45
  %1344 = zext i16 %1343 to i64
  %1345 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1344
  %1346 = load double, ptr %1345, align 8, !tbaa !69
  %1347 = fsub double %1336, %1346
  %1348 = fmul double %1347, %1347
  %1349 = getelementptr inbounds %class.Vector, ptr %1345, i64 0, i32 1
  %1350 = load double, ptr %1349, align 8, !tbaa !68
  %1351 = fsub double %1337, %1350
  %1352 = tail call double @llvm.fmuladd.f64(double %1351, double %1351, double %1348)
  %1353 = getelementptr inbounds %class.Vector, ptr %1345, i64 0, i32 2
  %1354 = load double, ptr %1353, align 8, !tbaa !50
  %1355 = fsub double %713, %1354
  %1356 = tail call double @llvm.fmuladd.f64(double %1355, double %1355, double %1352)
  br i1 %1172, label %1357, label %1364

1357:                                             ; preds = %1338
  %1358 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1344
  %1359 = load i32, ptr %1358, align 4
  %1360 = and i32 %1359, 1073741824
  %1361 = icmp ne i32 %1360, 0
  %1362 = fcmp ugt double %1356, %24
  %1363 = select i1 %1361, i1 true, i1 %1362
  br i1 %1363, label %1382, label %1369

1364:                                             ; preds = %1338
  %1365 = fcmp ugt double %1356, %24
  br i1 %1365, label %1382, label %1366

1366:                                             ; preds = %1364
  %1367 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1344
  %1368 = load i32, ptr %1367, align 4
  br label %1369

1369:                                             ; preds = %1366, %1357
  %1370 = phi i32 [ %1368, %1366 ], [ %1359, %1357 ]
  %1371 = shl i32 %1370, 2
  %1372 = ashr exact i32 %1371, 2
  %1373 = icmp slt i32 %1372, %736
  %1374 = icmp sgt i32 %1372, %738
  %1375 = select i1 %1373, i1 true, i1 %1374
  %1376 = select i1 %1375, ptr %1341, ptr %1340
  %1377 = zext i1 %1375 to i64
  %1378 = getelementptr inbounds i16, ptr %1341, i64 %1377
  %1379 = xor i1 %1375, true
  %1380 = zext i1 %1379 to i64
  %1381 = getelementptr inbounds i16, ptr %1340, i64 %1380
  store i16 %1343, ptr %1376, align 2, !tbaa !45
  br label %1382

1382:                                             ; preds = %1369, %1364, %1357
  %1383 = phi ptr [ %1341, %1357 ], [ %1341, %1364 ], [ %1378, %1369 ]
  %1384 = phi ptr [ %1340, %1357 ], [ %1340, %1364 ], [ %1381, %1369 ]
  %1385 = add nuw nsw i64 %1339, 1
  %1386 = icmp eq i64 %1385, %1335
  br i1 %1386, label %1596, label %1338

1387:                                             ; preds = %1198
  %1388 = icmp sgt i32 %1165, 0
  br i1 %1172, label %1389, label %1436

1389:                                             ; preds = %1387
  br i1 %1388, label %1390, label %1596

1390:                                             ; preds = %1389
  %1391 = zext i32 %1165 to i64
  %1392 = extractelement <2 x double> %710, i64 0
  %1393 = extractelement <2 x double> %710, i64 1
  br label %1394

1394:                                             ; preds = %1390, %1431
  %1395 = phi i64 [ 0, %1390 ], [ %1434, %1431 ]
  %1396 = phi ptr [ %471, %1390 ], [ %1433, %1431 ]
  %1397 = phi ptr [ %1204, %1390 ], [ %1432, %1431 ]
  %1398 = getelementptr inbounds i16, ptr %425, i64 %1395
  %1399 = load i16, ptr %1398, align 2, !tbaa !45
  %1400 = zext i16 %1399 to i64
  %1401 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1400
  %1402 = load i32, ptr %1401, align 4
  %1403 = and i32 %1402, 1073741824
  %1404 = icmp eq i32 %1403, 0
  br i1 %1404, label %1405, label %1431

1405:                                             ; preds = %1394
  %1406 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1400
  %1407 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 2
  %1408 = load double, ptr %1407, align 8, !tbaa !50
  %1409 = fsub double %713, %1408
  %1410 = getelementptr inbounds %class.Vector, ptr %1406, i64 0, i32 1
  %1411 = load double, ptr %1410, align 8, !tbaa !68
  %1412 = fsub double %1393, %1411
  %1413 = load double, ptr %1406, align 8, !tbaa !69
  %1414 = fsub double %1392, %1413
  %1415 = fmul double %1414, %1414
  %1416 = tail call double @llvm.fmuladd.f64(double %1412, double %1412, double %1415)
  %1417 = tail call double @llvm.fmuladd.f64(double %1409, double %1409, double %1416)
  %1418 = fcmp ugt double %1417, %24
  br i1 %1418, label %1431, label %1419

1419:                                             ; preds = %1405
  %1420 = shl i32 %1402, 2
  %1421 = ashr exact i32 %1420, 2
  %1422 = icmp slt i32 %1421, %736
  %1423 = icmp sgt i32 %1421, %738
  %1424 = select i1 %1422, i1 true, i1 %1423
  %1425 = select i1 %1424, ptr %1397, ptr %1396
  %1426 = zext i1 %1424 to i64
  %1427 = getelementptr inbounds i16, ptr %1397, i64 %1426
  %1428 = xor i1 %1424, true
  %1429 = zext i1 %1428 to i64
  %1430 = getelementptr inbounds i16, ptr %1396, i64 %1429
  store i16 %1399, ptr %1425, align 2, !tbaa !45
  br label %1431

1431:                                             ; preds = %1419, %1405, %1394
  %1432 = phi ptr [ %1397, %1394 ], [ %1397, %1405 ], [ %1427, %1419 ]
  %1433 = phi ptr [ %1396, %1394 ], [ %1396, %1405 ], [ %1430, %1419 ]
  %1434 = add nuw nsw i64 %1395, 1
  %1435 = icmp eq i64 %1434, %1391
  br i1 %1435, label %1596, label %1394

1436:                                             ; preds = %1387
  br i1 %1388, label %1437, label %1596

1437:                                             ; preds = %1436
  %1438 = icmp ugt i32 %1165, 6
  br i1 %1438, label %1439, label %1547

1439:                                             ; preds = %1437
  %1440 = add nsw i32 %1165, -2
  %1441 = load i16, ptr %425, align 2, !tbaa !45
  %1442 = zext i16 %1441 to i64
  %1443 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1442
  %1444 = load i32, ptr %1443, align 4
  %1445 = load i16, ptr %668, align 2, !tbaa !45
  %1446 = zext i16 %1445 to i64
  %1447 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1446
  %1448 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 2
  %1449 = load double, ptr %1448, align 8, !tbaa !50
  %1450 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1442
  %1451 = getelementptr inbounds %class.Vector, ptr %1450, i64 0, i32 2
  %1452 = load double, ptr %1451, align 8, !tbaa !50
  %1453 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 1
  %1454 = load double, ptr %1453, align 8, !tbaa !68
  %1455 = getelementptr inbounds %class.Vector, ptr %1450, i64 0, i32 1
  %1456 = load double, ptr %1455, align 8, !tbaa !68
  %1457 = load double, ptr %1447, align 8, !tbaa !69
  %1458 = load double, ptr %1450, align 8, !tbaa !69
  %1459 = zext i32 %1440 to i64
  %1460 = extractelement <2 x double> %710, i64 0
  %1461 = extractelement <2 x double> %710, i64 1
  br label %1462

1462:                                             ; preds = %1439, %1540
  %1463 = phi i64 [ 2, %1439 ], [ %1543, %1540 ]
  %1464 = phi i64 [ %1446, %1439 ], [ %1500, %1540 ]
  %1465 = phi i32 [ %1444, %1439 ], [ %1528, %1540 ]
  %1466 = phi ptr [ %471, %1439 ], [ %1542, %1540 ]
  %1467 = phi ptr [ %1204, %1439 ], [ %1541, %1540 ]
  %1468 = phi i16 [ %1441, %1439 ], [ %1493, %1540 ]
  %1469 = phi i16 [ %1445, %1439 ], [ %1496, %1540 ]
  %1470 = phi double [ %1458, %1439 ], [ %1499, %1540 ]
  %1471 = phi double [ %1457, %1439 ], [ %1502, %1540 ]
  %1472 = phi double [ %1456, %1439 ], [ %1504, %1540 ]
  %1473 = phi double [ %1454, %1439 ], [ %1506, %1540 ]
  %1474 = phi double [ %1452, %1439 ], [ %1508, %1540 ]
  %1475 = phi double [ %1449, %1439 ], [ %1510, %1540 ]
  %1476 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1464
  %1477 = load i32, ptr %1476, align 4
  %1478 = shl i32 %1477, 2
  %1479 = ashr exact i32 %1478, 2
  %1480 = fsub double %1460, %1470
  %1481 = fsub double %1460, %1471
  %1482 = fmul double %1480, %1480
  %1483 = fmul double %1481, %1481
  %1484 = fsub double %1461, %1472
  %1485 = fsub double %1461, %1473
  %1486 = tail call double @llvm.fmuladd.f64(double %1484, double %1484, double %1482)
  %1487 = tail call double @llvm.fmuladd.f64(double %1485, double %1485, double %1483)
  %1488 = fsub double %713, %1474
  %1489 = fsub double %713, %1475
  %1490 = tail call double @llvm.fmuladd.f64(double %1488, double %1488, double %1486)
  %1491 = tail call double @llvm.fmuladd.f64(double %1489, double %1489, double %1487)
  %1492 = getelementptr inbounds i16, ptr %425, i64 %1463
  %1493 = load i16, ptr %1492, align 2, !tbaa !45
  %1494 = or i64 %1463, 1
  %1495 = getelementptr inbounds i16, ptr %425, i64 %1494
  %1496 = load i16, ptr %1495, align 2, !tbaa !45
  %1497 = zext i16 %1493 to i64
  %1498 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1497
  %1499 = load double, ptr %1498, align 8, !tbaa !69
  %1500 = zext i16 %1496 to i64
  %1501 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1500
  %1502 = load double, ptr %1501, align 8, !tbaa !69
  %1503 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 1
  %1504 = load double, ptr %1503, align 8, !tbaa !68
  %1505 = getelementptr inbounds %class.Vector, ptr %1501, i64 0, i32 1
  %1506 = load double, ptr %1505, align 8, !tbaa !68
  %1507 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 2
  %1508 = load double, ptr %1507, align 8, !tbaa !50
  %1509 = getelementptr inbounds %class.Vector, ptr %1501, i64 0, i32 2
  %1510 = load double, ptr %1509, align 8, !tbaa !50
  %1511 = fcmp ugt double %1490, %24
  br i1 %1511, label %1524, label %1512

1512:                                             ; preds = %1462
  %1513 = shl i32 %1465, 2
  %1514 = ashr exact i32 %1513, 2
  %1515 = icmp slt i32 %1514, %736
  %1516 = icmp sgt i32 %1514, %738
  %1517 = select i1 %1515, i1 true, i1 %1516
  %1518 = select i1 %1517, ptr %1467, ptr %1466
  %1519 = zext i1 %1517 to i64
  %1520 = getelementptr inbounds i16, ptr %1467, i64 %1519
  %1521 = xor i1 %1517, true
  %1522 = zext i1 %1521 to i64
  %1523 = getelementptr inbounds i16, ptr %1466, i64 %1522
  store i16 %1468, ptr %1518, align 2, !tbaa !45
  br label %1524

1524:                                             ; preds = %1512, %1462
  %1525 = phi ptr [ %1467, %1462 ], [ %1520, %1512 ]
  %1526 = phi ptr [ %1466, %1462 ], [ %1523, %1512 ]
  %1527 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1497
  %1528 = load i32, ptr %1527, align 4
  %1529 = fcmp ugt double %1491, %24
  br i1 %1529, label %1540, label %1530

1530:                                             ; preds = %1524
  %1531 = icmp slt i32 %1479, %736
  %1532 = icmp sgt i32 %1479, %738
  %1533 = select i1 %1531, i1 true, i1 %1532
  %1534 = select i1 %1533, ptr %1525, ptr %1526
  %1535 = zext i1 %1533 to i64
  %1536 = getelementptr inbounds i16, ptr %1525, i64 %1535
  %1537 = xor i1 %1533, true
  %1538 = zext i1 %1537 to i64
  %1539 = getelementptr inbounds i16, ptr %1526, i64 %1538
  store i16 %1469, ptr %1534, align 2, !tbaa !45
  br label %1540

1540:                                             ; preds = %1530, %1524
  %1541 = phi ptr [ %1525, %1524 ], [ %1536, %1530 ]
  %1542 = phi ptr [ %1526, %1524 ], [ %1539, %1530 ]
  %1543 = add nuw nsw i64 %1463, 2
  %1544 = icmp ult i64 %1543, %1459
  br i1 %1544, label %1462, label %1545

1545:                                             ; preds = %1540
  %1546 = trunc i64 %1463 to i32
  br label %1547

1547:                                             ; preds = %1545, %1437
  %1548 = phi i32 [ %1546, %1545 ], [ 0, %1437 ]
  %1549 = phi ptr [ %1541, %1545 ], [ %1204, %1437 ]
  %1550 = phi ptr [ %1542, %1545 ], [ %471, %1437 ]
  %1551 = icmp slt i32 %1548, %1165
  br i1 %1551, label %1552, label %1596

1552:                                             ; preds = %1547
  %1553 = zext i32 %1548 to i64
  %1554 = zext i32 %1165 to i64
  %1555 = extractelement <2 x double> %710, i64 0
  %1556 = extractelement <2 x double> %710, i64 1
  br label %1557

1557:                                             ; preds = %1552, %1591
  %1558 = phi i64 [ %1553, %1552 ], [ %1594, %1591 ]
  %1559 = phi ptr [ %1550, %1552 ], [ %1593, %1591 ]
  %1560 = phi ptr [ %1549, %1552 ], [ %1592, %1591 ]
  %1561 = getelementptr inbounds i16, ptr %425, i64 %1558
  %1562 = load i16, ptr %1561, align 2, !tbaa !45
  %1563 = zext i16 %1562 to i64
  %1564 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1563
  %1565 = load double, ptr %1564, align 8, !tbaa !69
  %1566 = getelementptr inbounds %class.Vector, ptr %1564, i64 0, i32 1
  %1567 = load double, ptr %1566, align 8, !tbaa !68
  %1568 = getelementptr inbounds %class.Vector, ptr %1564, i64 0, i32 2
  %1569 = load double, ptr %1568, align 8, !tbaa !50
  %1570 = fsub double %1555, %1565
  %1571 = fmul double %1570, %1570
  %1572 = fsub double %1556, %1567
  %1573 = tail call double @llvm.fmuladd.f64(double %1572, double %1572, double %1571)
  %1574 = fsub double %713, %1569
  %1575 = tail call double @llvm.fmuladd.f64(double %1574, double %1574, double %1573)
  %1576 = fcmp ugt double %1575, %24
  br i1 %1576, label %1591, label %1577

1577:                                             ; preds = %1557
  %1578 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1563
  %1579 = load i32, ptr %1578, align 4
  %1580 = shl i32 %1579, 2
  %1581 = ashr exact i32 %1580, 2
  %1582 = icmp slt i32 %1581, %736
  %1583 = icmp sgt i32 %1581, %738
  %1584 = select i1 %1582, i1 true, i1 %1583
  %1585 = select i1 %1584, ptr %1560, ptr %1559
  %1586 = zext i1 %1584 to i64
  %1587 = getelementptr inbounds i16, ptr %1560, i64 %1586
  %1588 = xor i1 %1584, true
  %1589 = zext i1 %1588 to i64
  %1590 = getelementptr inbounds i16, ptr %1559, i64 %1589
  store i16 %1562, ptr %1585, align 2, !tbaa !45
  br label %1591

1591:                                             ; preds = %1577, %1557
  %1592 = phi ptr [ %1560, %1557 ], [ %1587, %1577 ]
  %1593 = phi ptr [ %1559, %1557 ], [ %1590, %1577 ]
  %1594 = add nuw nsw i64 %1558, 1
  %1595 = icmp eq i64 %1594, %1554
  br i1 %1595, label %1596, label %1557

1596:                                             ; preds = %1382, %1591, %1431, %1327, %1547, %1389, %1436
  %1597 = phi ptr [ %1204, %1436 ], [ %1204, %1389 ], [ %1549, %1547 ], [ %1204, %1327 ], [ %1432, %1431 ], [ %1592, %1591 ], [ %1383, %1382 ]
  %1598 = phi ptr [ %471, %1436 ], [ %471, %1389 ], [ %1550, %1547 ], [ %471, %1327 ], [ %1433, %1431 ], [ %1593, %1591 ], [ %1384, %1382 ]
  %1599 = icmp eq ptr %1597, %1204
  %1600 = icmp eq ptr %1598, %471
  %1601 = select i1 %1599, i1 %1600, i1 false
  br i1 %1601, label %1602, label %1604

1602:                                             ; preds = %1596
  %1603 = add nsw i32 %683, 1
  br label %2609

1604:                                             ; preds = %1596
  %1605 = trunc i32 %683 to i16
  %1606 = load i32, ptr %17, align 8, !tbaa !19
  %1607 = add nsw i32 %1606, -1
  %1608 = sext i32 %1607 to i64
  %1609 = getelementptr inbounds i16, ptr %1200, i64 %1608
  store i16 %1605, ptr %1609, align 2, !tbaa !45
  %1610 = ptrtoint ptr %1598 to i64
  %1611 = sub i64 %1610, %667
  %1612 = lshr exact i64 %1611, 1
  %1613 = trunc i64 %1612 to i32
  %1614 = icmp sgt i32 %1613, 0
  br i1 %1614, label %1615, label %1715

1615:                                             ; preds = %1604
  %1616 = and i64 %1612, 4294967295
  %1617 = and i64 %1612, 1
  %1618 = icmp eq i64 %1616, 1
  br i1 %1618, label %1683, label %1619

1619:                                             ; preds = %1615
  %1620 = sub nsw i64 %1616, %1617
  br label %1621

1621:                                             ; preds = %1676, %1619
  %1622 = phi i64 [ 0, %1619 ], [ %1680, %1676 ]
  %1623 = phi ptr [ %1597, %1619 ], [ %1679, %1676 ]
  %1624 = phi ptr [ %333, %1619 ], [ %1678, %1676 ]
  %1625 = phi ptr [ %379, %1619 ], [ %1677, %1676 ]
  %1626 = phi i64 [ 0, %1619 ], [ %1681, %1676 ]
  %1627 = getelementptr inbounds i16, ptr %471, i64 %1622
  %1628 = load i16, ptr %1627, align 2, !tbaa !45
  %1629 = zext i16 %1628 to i64
  %1630 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1629
  %1631 = load i32, ptr %1630, align 4
  %1632 = shl i32 %1631, 2
  %1633 = ashr exact i32 %1632, 2
  %1634 = sext i32 %1633 to i64
  %1635 = getelementptr inbounds i8, ptr %973, i64 %1634
  %1636 = load i8, ptr %1635, align 1, !tbaa !59
  %1637 = sext i8 %1636 to i32
  switch i32 %1637, label %1649 [
    i32 0, label %1638
    i32 1, label %1640
    i32 2, label %1642
  ]

1638:                                             ; preds = %1621
  %1639 = getelementptr inbounds i16, ptr %1623, i64 1
  br label %1644

1640:                                             ; preds = %1621
  %1641 = getelementptr inbounds i16, ptr %1624, i64 1
  br label %1644

1642:                                             ; preds = %1621
  %1643 = getelementptr inbounds i16, ptr %1625, i64 1
  br label %1644

1644:                                             ; preds = %1638, %1640, %1642
  %1645 = phi ptr [ %1625, %1642 ], [ %1624, %1640 ], [ %1623, %1638 ]
  %1646 = phi ptr [ %1643, %1642 ], [ %1625, %1640 ], [ %1625, %1638 ]
  %1647 = phi ptr [ %1624, %1642 ], [ %1641, %1640 ], [ %1624, %1638 ]
  %1648 = phi ptr [ %1623, %1642 ], [ %1623, %1640 ], [ %1639, %1638 ]
  store i16 %1628, ptr %1645, align 2, !tbaa !45
  br label %1649

1649:                                             ; preds = %1644, %1621
  %1650 = phi ptr [ %1625, %1621 ], [ %1646, %1644 ]
  %1651 = phi ptr [ %1624, %1621 ], [ %1647, %1644 ]
  %1652 = phi ptr [ %1623, %1621 ], [ %1648, %1644 ]
  %1653 = or i64 %1622, 1
  %1654 = getelementptr inbounds i16, ptr %471, i64 %1653
  %1655 = load i16, ptr %1654, align 2, !tbaa !45
  %1656 = zext i16 %1655 to i64
  %1657 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1656
  %1658 = load i32, ptr %1657, align 4
  %1659 = shl i32 %1658, 2
  %1660 = ashr exact i32 %1659, 2
  %1661 = sext i32 %1660 to i64
  %1662 = getelementptr inbounds i8, ptr %973, i64 %1661
  %1663 = load i8, ptr %1662, align 1, !tbaa !59
  %1664 = sext i8 %1663 to i32
  switch i32 %1664, label %1676 [
    i32 0, label %1669
    i32 1, label %1667
    i32 2, label %1665
  ]

1665:                                             ; preds = %1649
  %1666 = getelementptr inbounds i16, ptr %1650, i64 1
  br label %1671

1667:                                             ; preds = %1649
  %1668 = getelementptr inbounds i16, ptr %1651, i64 1
  br label %1671

1669:                                             ; preds = %1649
  %1670 = getelementptr inbounds i16, ptr %1652, i64 1
  br label %1671

1671:                                             ; preds = %1669, %1667, %1665
  %1672 = phi ptr [ %1650, %1665 ], [ %1651, %1667 ], [ %1652, %1669 ]
  %1673 = phi ptr [ %1666, %1665 ], [ %1650, %1667 ], [ %1650, %1669 ]
  %1674 = phi ptr [ %1651, %1665 ], [ %1668, %1667 ], [ %1651, %1669 ]
  %1675 = phi ptr [ %1652, %1665 ], [ %1652, %1667 ], [ %1670, %1669 ]
  store i16 %1655, ptr %1672, align 2, !tbaa !45
  br label %1676

1676:                                             ; preds = %1671, %1649
  %1677 = phi ptr [ %1650, %1649 ], [ %1673, %1671 ]
  %1678 = phi ptr [ %1651, %1649 ], [ %1674, %1671 ]
  %1679 = phi ptr [ %1652, %1649 ], [ %1675, %1671 ]
  %1680 = add nuw nsw i64 %1622, 2
  %1681 = add i64 %1626, 2
  %1682 = icmp eq i64 %1681, %1620
  br i1 %1682, label %1683, label %1621

1683:                                             ; preds = %1676, %1615
  %1684 = phi ptr [ undef, %1615 ], [ %1677, %1676 ]
  %1685 = phi ptr [ undef, %1615 ], [ %1678, %1676 ]
  %1686 = phi ptr [ undef, %1615 ], [ %1679, %1676 ]
  %1687 = phi i64 [ 0, %1615 ], [ %1680, %1676 ]
  %1688 = phi ptr [ %1597, %1615 ], [ %1679, %1676 ]
  %1689 = phi ptr [ %333, %1615 ], [ %1678, %1676 ]
  %1690 = phi ptr [ %379, %1615 ], [ %1677, %1676 ]
  %1691 = icmp eq i64 %1617, 0
  br i1 %1691, label %1715, label %1692

1692:                                             ; preds = %1683
  %1693 = getelementptr inbounds i16, ptr %471, i64 %1687
  %1694 = load i16, ptr %1693, align 2, !tbaa !45
  %1695 = zext i16 %1694 to i64
  %1696 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1695
  %1697 = load i32, ptr %1696, align 4
  %1698 = shl i32 %1697, 2
  %1699 = ashr exact i32 %1698, 2
  %1700 = sext i32 %1699 to i64
  %1701 = getelementptr inbounds i8, ptr %973, i64 %1700
  %1702 = load i8, ptr %1701, align 1, !tbaa !59
  %1703 = sext i8 %1702 to i32
  switch i32 %1703, label %1715 [
    i32 0, label %1708
    i32 1, label %1706
    i32 2, label %1704
  ]

1704:                                             ; preds = %1692
  %1705 = getelementptr inbounds i16, ptr %1690, i64 1
  br label %1710

1706:                                             ; preds = %1692
  %1707 = getelementptr inbounds i16, ptr %1689, i64 1
  br label %1710

1708:                                             ; preds = %1692
  %1709 = getelementptr inbounds i16, ptr %1688, i64 1
  br label %1710

1710:                                             ; preds = %1708, %1706, %1704
  %1711 = phi ptr [ %1690, %1704 ], [ %1689, %1706 ], [ %1688, %1708 ]
  %1712 = phi ptr [ %1705, %1704 ], [ %1690, %1706 ], [ %1690, %1708 ]
  %1713 = phi ptr [ %1689, %1704 ], [ %1707, %1706 ], [ %1689, %1708 ]
  %1714 = phi ptr [ %1688, %1704 ], [ %1688, %1706 ], [ %1709, %1708 ]
  store i16 %1694, ptr %1711, align 2, !tbaa !45
  br label %1715

1715:                                             ; preds = %1683, %1710, %1692, %1604
  %1716 = phi ptr [ %379, %1604 ], [ %1684, %1683 ], [ %1690, %1692 ], [ %1712, %1710 ]
  %1717 = phi ptr [ %333, %1604 ], [ %1685, %1683 ], [ %1689, %1692 ], [ %1713, %1710 ]
  %1718 = phi ptr [ %1597, %1604 ], [ %1686, %1683 ], [ %1688, %1692 ], [ %1714, %1710 ]
  %1719 = ptrtoint ptr %1718 to i64
  %1720 = ptrtoint ptr %1204 to i64
  %1721 = sub i64 %1719, %1720
  %1722 = lshr exact i64 %1721, 1
  %1723 = trunc i64 %1722 to i32
  %1724 = icmp eq i32 %1723, 0
  %1725 = shl i64 %1721, 31
  br i1 %1724, label %1731, label %1726

1726:                                             ; preds = %1715
  %1727 = add i64 %1725, -4294967296
  %1728 = ashr i64 %1727, 32
  %1729 = getelementptr inbounds i16, ptr %1204, i64 %1728
  %1730 = load i16, ptr %1729, align 2, !tbaa !45
  br label %1731

1731:                                             ; preds = %1715, %1726
  %1732 = phi i16 [ %1730, %1726 ], [ -1, %1715 ]
  %1733 = ashr i64 %1725, 32
  %1734 = getelementptr inbounds i16, ptr %1204, i64 %1733
  store i16 %1732, ptr %1734, align 2, !tbaa !45
  %1735 = trunc i64 %1722 to i16
  %1736 = add i16 %1735, 1
  %1737 = sext i32 %1606 to i64
  %1738 = getelementptr inbounds i16, ptr %1200, i64 %1737
  store i16 %1736, ptr %1738, align 2, !tbaa !45
  %1739 = add i32 %1606, 2
  %1740 = add i32 %1739, %1723
  %1741 = ptrtoint ptr %1717 to i64
  %1742 = sub i64 %1741, %669
  %1743 = lshr exact i64 %1742, 1
  %1744 = trunc i64 %1743 to i32
  %1745 = add nsw i32 %1740, 1
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr i16, ptr %1200, i64 %1746
  %1748 = icmp sgt i32 %1744, 0
  br i1 %1748, label %1749, label %1839

1749:                                             ; preds = %1731
  %1750 = and i64 %1743, 4294967295
  %1751 = icmp ult i64 %1750, 8
  br i1 %1751, label %1795, label %1752

1752:                                             ; preds = %1749
  %1753 = shl nsw i64 %1746, 1
  %1754 = add i64 %1753, %1201
  %1755 = sub i64 %1754, %669
  %1756 = icmp ult i64 %1755, 128
  br i1 %1756, label %1795, label %1757

1757:                                             ; preds = %1752
  %1758 = icmp ult i64 %1750, 64
  br i1 %1758, label %1782, label %1759

1759:                                             ; preds = %1757
  %1760 = and i64 %1743, 63
  %1761 = sub nsw i64 %1750, %1760
  br label %1762

1762:                                             ; preds = %1762, %1759
  %1763 = phi i64 [ 0, %1759 ], [ %1776, %1762 ]
  %1764 = getelementptr inbounds i16, ptr %333, i64 %1763
  %1765 = load <16 x i16>, ptr %1764, align 2, !tbaa !45
  %1766 = getelementptr inbounds i16, ptr %1764, i64 16
  %1767 = load <16 x i16>, ptr %1766, align 2, !tbaa !45
  %1768 = getelementptr inbounds i16, ptr %1764, i64 32
  %1769 = load <16 x i16>, ptr %1768, align 2, !tbaa !45
  %1770 = getelementptr inbounds i16, ptr %1764, i64 48
  %1771 = load <16 x i16>, ptr %1770, align 2, !tbaa !45
  %1772 = getelementptr inbounds i16, ptr %1747, i64 %1763
  store <16 x i16> %1765, ptr %1772, align 2, !tbaa !45
  %1773 = getelementptr inbounds i16, ptr %1772, i64 16
  store <16 x i16> %1767, ptr %1773, align 2, !tbaa !45
  %1774 = getelementptr inbounds i16, ptr %1772, i64 32
  store <16 x i16> %1769, ptr %1774, align 2, !tbaa !45
  %1775 = getelementptr inbounds i16, ptr %1772, i64 48
  store <16 x i16> %1771, ptr %1775, align 2, !tbaa !45
  %1776 = add nuw i64 %1763, 64
  %1777 = icmp eq i64 %1776, %1761
  br i1 %1777, label %1778, label %1762, !llvm.loop !130

1778:                                             ; preds = %1762
  %1779 = icmp eq i64 %1760, 0
  br i1 %1779, label %1833, label %1780

1780:                                             ; preds = %1778
  %1781 = icmp ult i64 %1760, 8
  br i1 %1781, label %1795, label %1782

1782:                                             ; preds = %1757, %1780
  %1783 = phi i64 [ %1761, %1780 ], [ 0, %1757 ]
  %1784 = and i64 %1743, 7
  %1785 = sub nsw i64 %1750, %1784
  br label %1786

1786:                                             ; preds = %1786, %1782
  %1787 = phi i64 [ %1783, %1782 ], [ %1791, %1786 ]
  %1788 = getelementptr inbounds i16, ptr %333, i64 %1787
  %1789 = load <8 x i16>, ptr %1788, align 2, !tbaa !45
  %1790 = getelementptr inbounds i16, ptr %1747, i64 %1787
  store <8 x i16> %1789, ptr %1790, align 2, !tbaa !45
  %1791 = add nuw i64 %1787, 8
  %1792 = icmp eq i64 %1791, %1785
  br i1 %1792, label %1793, label %1786, !llvm.loop !131

1793:                                             ; preds = %1786
  %1794 = icmp eq i64 %1784, 0
  br i1 %1794, label %1833, label %1795

1795:                                             ; preds = %1752, %1749, %1780, %1793
  %1796 = phi i64 [ 0, %1749 ], [ 0, %1752 ], [ %1761, %1780 ], [ %1785, %1793 ]
  %1797 = sub i64 %1743, %1796
  %1798 = xor i64 %1796, -1
  %1799 = add nsw i64 %1750, %1798
  %1800 = and i64 %1797, 3
  %1801 = icmp eq i64 %1800, 0
  br i1 %1801, label %1811, label %1802

1802:                                             ; preds = %1795, %1802
  %1803 = phi i64 [ %1808, %1802 ], [ %1796, %1795 ]
  %1804 = phi i64 [ %1809, %1802 ], [ 0, %1795 ]
  %1805 = getelementptr inbounds i16, ptr %333, i64 %1803
  %1806 = load i16, ptr %1805, align 2, !tbaa !45
  %1807 = getelementptr inbounds i16, ptr %1747, i64 %1803
  store i16 %1806, ptr %1807, align 2, !tbaa !45
  %1808 = add nuw nsw i64 %1803, 1
  %1809 = add i64 %1804, 1
  %1810 = icmp eq i64 %1809, %1800
  br i1 %1810, label %1811, label %1802, !llvm.loop !132

1811:                                             ; preds = %1802, %1795
  %1812 = phi i64 [ %1796, %1795 ], [ %1808, %1802 ]
  %1813 = icmp ult i64 %1799, 3
  br i1 %1813, label %1833, label %1814

1814:                                             ; preds = %1811, %1814
  %1815 = phi i64 [ %1831, %1814 ], [ %1812, %1811 ]
  %1816 = getelementptr inbounds i16, ptr %333, i64 %1815
  %1817 = load i16, ptr %1816, align 2, !tbaa !45
  %1818 = getelementptr inbounds i16, ptr %1747, i64 %1815
  store i16 %1817, ptr %1818, align 2, !tbaa !45
  %1819 = add nuw nsw i64 %1815, 1
  %1820 = getelementptr inbounds i16, ptr %333, i64 %1819
  %1821 = load i16, ptr %1820, align 2, !tbaa !45
  %1822 = getelementptr inbounds i16, ptr %1747, i64 %1819
  store i16 %1821, ptr %1822, align 2, !tbaa !45
  %1823 = add nuw nsw i64 %1815, 2
  %1824 = getelementptr inbounds i16, ptr %333, i64 %1823
  %1825 = load i16, ptr %1824, align 2, !tbaa !45
  %1826 = getelementptr inbounds i16, ptr %1747, i64 %1823
  store i16 %1825, ptr %1826, align 2, !tbaa !45
  %1827 = add nuw nsw i64 %1815, 3
  %1828 = getelementptr inbounds i16, ptr %333, i64 %1827
  %1829 = load i16, ptr %1828, align 2, !tbaa !45
  %1830 = getelementptr inbounds i16, ptr %1747, i64 %1827
  store i16 %1829, ptr %1830, align 2, !tbaa !45
  %1831 = add nuw nsw i64 %1815, 4
  %1832 = icmp eq i64 %1831, %1750
  br i1 %1832, label %1833, label %1814, !llvm.loop !133

1833:                                             ; preds = %1811, %1814, %1778, %1793
  %1834 = shl i64 %1742, 31
  %1835 = add i64 %1834, -4294967296
  %1836 = ashr i64 %1835, 32
  %1837 = getelementptr inbounds i16, ptr %1747, i64 %1836
  %1838 = load i16, ptr %1837, align 2, !tbaa !45
  br label %1839

1839:                                             ; preds = %1731, %1833
  %1840 = phi i64 [ %1743, %1833 ], [ 0, %1731 ]
  %1841 = phi i16 [ %1838, %1833 ], [ -1, %1731 ]
  %1842 = and i64 %1840, 4294967295
  %1843 = getelementptr inbounds i16, ptr %1747, i64 %1842
  store i16 %1841, ptr %1843, align 2, !tbaa !45
  %1844 = trunc i64 %1743 to i16
  %1845 = add i16 %1844, 1
  %1846 = sext i32 %1740 to i64
  %1847 = getelementptr inbounds i16, ptr %1200, i64 %1846
  store i16 %1845, ptr %1847, align 2, !tbaa !45
  %1848 = add nsw i32 %1744, 2
  %1849 = add nsw i32 %1848, %1740
  %1850 = ptrtoint ptr %1716 to i64
  %1851 = sub i64 %1850, %670
  %1852 = lshr exact i64 %1851, 1
  %1853 = trunc i64 %1852 to i32
  %1854 = add nsw i32 %1849, 1
  %1855 = sext i32 %1854 to i64
  %1856 = getelementptr i16, ptr %1200, i64 %1855
  %1857 = icmp sgt i32 %1853, 0
  br i1 %1857, label %1858, label %1948

1858:                                             ; preds = %1839
  %1859 = and i64 %1852, 4294967295
  %1860 = icmp ult i64 %1859, 8
  br i1 %1860, label %1904, label %1861

1861:                                             ; preds = %1858
  %1862 = shl nsw i64 %1855, 1
  %1863 = add i64 %1862, %1201
  %1864 = sub i64 %1863, %670
  %1865 = icmp ult i64 %1864, 128
  br i1 %1865, label %1904, label %1866

1866:                                             ; preds = %1861
  %1867 = icmp ult i64 %1859, 64
  br i1 %1867, label %1891, label %1868

1868:                                             ; preds = %1866
  %1869 = and i64 %1852, 63
  %1870 = sub nsw i64 %1859, %1869
  br label %1871

1871:                                             ; preds = %1871, %1868
  %1872 = phi i64 [ 0, %1868 ], [ %1885, %1871 ]
  %1873 = getelementptr inbounds i16, ptr %379, i64 %1872
  %1874 = load <16 x i16>, ptr %1873, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1873, i64 16
  %1876 = load <16 x i16>, ptr %1875, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1873, i64 32
  %1878 = load <16 x i16>, ptr %1877, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1873, i64 48
  %1880 = load <16 x i16>, ptr %1879, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1856, i64 %1872
  store <16 x i16> %1874, ptr %1881, align 2, !tbaa !45
  %1882 = getelementptr inbounds i16, ptr %1881, i64 16
  store <16 x i16> %1876, ptr %1882, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1881, i64 32
  store <16 x i16> %1878, ptr %1883, align 2, !tbaa !45
  %1884 = getelementptr inbounds i16, ptr %1881, i64 48
  store <16 x i16> %1880, ptr %1884, align 2, !tbaa !45
  %1885 = add nuw i64 %1872, 64
  %1886 = icmp eq i64 %1885, %1870
  br i1 %1886, label %1887, label %1871, !llvm.loop !134

1887:                                             ; preds = %1871
  %1888 = icmp eq i64 %1869, 0
  br i1 %1888, label %1942, label %1889

1889:                                             ; preds = %1887
  %1890 = icmp ult i64 %1869, 8
  br i1 %1890, label %1904, label %1891

1891:                                             ; preds = %1866, %1889
  %1892 = phi i64 [ %1870, %1889 ], [ 0, %1866 ]
  %1893 = and i64 %1852, 7
  %1894 = sub nsw i64 %1859, %1893
  br label %1895

1895:                                             ; preds = %1895, %1891
  %1896 = phi i64 [ %1892, %1891 ], [ %1900, %1895 ]
  %1897 = getelementptr inbounds i16, ptr %379, i64 %1896
  %1898 = load <8 x i16>, ptr %1897, align 2, !tbaa !45
  %1899 = getelementptr inbounds i16, ptr %1856, i64 %1896
  store <8 x i16> %1898, ptr %1899, align 2, !tbaa !45
  %1900 = add nuw i64 %1896, 8
  %1901 = icmp eq i64 %1900, %1894
  br i1 %1901, label %1902, label %1895, !llvm.loop !135

1902:                                             ; preds = %1895
  %1903 = icmp eq i64 %1893, 0
  br i1 %1903, label %1942, label %1904

1904:                                             ; preds = %1861, %1858, %1889, %1902
  %1905 = phi i64 [ 0, %1858 ], [ 0, %1861 ], [ %1870, %1889 ], [ %1894, %1902 ]
  %1906 = sub i64 %1852, %1905
  %1907 = xor i64 %1905, -1
  %1908 = add nsw i64 %1859, %1907
  %1909 = and i64 %1906, 3
  %1910 = icmp eq i64 %1909, 0
  br i1 %1910, label %1920, label %1911

1911:                                             ; preds = %1904, %1911
  %1912 = phi i64 [ %1917, %1911 ], [ %1905, %1904 ]
  %1913 = phi i64 [ %1918, %1911 ], [ 0, %1904 ]
  %1914 = getelementptr inbounds i16, ptr %379, i64 %1912
  %1915 = load i16, ptr %1914, align 2, !tbaa !45
  %1916 = getelementptr inbounds i16, ptr %1856, i64 %1912
  store i16 %1915, ptr %1916, align 2, !tbaa !45
  %1917 = add nuw nsw i64 %1912, 1
  %1918 = add i64 %1913, 1
  %1919 = icmp eq i64 %1918, %1909
  br i1 %1919, label %1920, label %1911, !llvm.loop !136

1920:                                             ; preds = %1911, %1904
  %1921 = phi i64 [ %1905, %1904 ], [ %1917, %1911 ]
  %1922 = icmp ult i64 %1908, 3
  br i1 %1922, label %1942, label %1923

1923:                                             ; preds = %1920, %1923
  %1924 = phi i64 [ %1940, %1923 ], [ %1921, %1920 ]
  %1925 = getelementptr inbounds i16, ptr %379, i64 %1924
  %1926 = load i16, ptr %1925, align 2, !tbaa !45
  %1927 = getelementptr inbounds i16, ptr %1856, i64 %1924
  store i16 %1926, ptr %1927, align 2, !tbaa !45
  %1928 = add nuw nsw i64 %1924, 1
  %1929 = getelementptr inbounds i16, ptr %379, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1856, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1924, 2
  %1933 = getelementptr inbounds i16, ptr %379, i64 %1932
  %1934 = load i16, ptr %1933, align 2, !tbaa !45
  %1935 = getelementptr inbounds i16, ptr %1856, i64 %1932
  store i16 %1934, ptr %1935, align 2, !tbaa !45
  %1936 = add nuw nsw i64 %1924, 3
  %1937 = getelementptr inbounds i16, ptr %379, i64 %1936
  %1938 = load i16, ptr %1937, align 2, !tbaa !45
  %1939 = getelementptr inbounds i16, ptr %1856, i64 %1936
  store i16 %1938, ptr %1939, align 2, !tbaa !45
  %1940 = add nuw nsw i64 %1924, 4
  %1941 = icmp eq i64 %1940, %1859
  br i1 %1941, label %1942, label %1923, !llvm.loop !137

1942:                                             ; preds = %1920, %1923, %1887, %1902
  %1943 = shl i64 %1851, 31
  %1944 = add i64 %1943, -4294967296
  %1945 = ashr i64 %1944, 32
  %1946 = getelementptr inbounds i16, ptr %1856, i64 %1945
  %1947 = load i16, ptr %1946, align 2, !tbaa !45
  br label %1948

1948:                                             ; preds = %1839, %1942
  %1949 = phi i64 [ %1852, %1942 ], [ 0, %1839 ]
  %1950 = phi i16 [ %1947, %1942 ], [ -1, %1839 ]
  %1951 = and i64 %1949, 4294967295
  %1952 = getelementptr inbounds i16, ptr %1856, i64 %1951
  store i16 %1950, ptr %1952, align 2, !tbaa !45
  %1953 = trunc i64 %1852 to i16
  %1954 = add i16 %1953, 1
  %1955 = sext i32 %1849 to i64
  %1956 = getelementptr inbounds i16, ptr %1200, i64 %1955
  store i16 %1954, ptr %1956, align 2, !tbaa !45
  %1957 = add i32 %1853, 3
  %1958 = add i32 %1957, %1849
  %1959 = select i1 %146, i32 1, i32 %1958
  store i32 %1959, ptr %17, align 8, !tbaa !19
  br label %1990

1960:                                             ; preds = %707
  %1961 = load ptr, ptr %12, align 8, !tbaa !47
  %1962 = load i32, ptr %17, align 8, !tbaa !19
  %1963 = add i32 %1962, 1
  %1964 = sext i32 %1963 to i64
  %1965 = getelementptr inbounds i16, ptr %1961, i64 %1964
  %1966 = sext i32 %1962 to i64
  %1967 = getelementptr inbounds i16, ptr %1961, i64 %1966
  %1968 = load i16, ptr %1967, align 2, !tbaa !45
  %1969 = zext i16 %1968 to i32
  %1970 = add i32 %1963, %1969
  %1971 = add nsw i32 %1969, -1
  %1972 = add i32 %1970, 1
  %1973 = sext i32 %1972 to i64
  %1974 = getelementptr inbounds i16, ptr %1961, i64 %1973
  %1975 = sext i32 %1970 to i64
  %1976 = getelementptr inbounds i16, ptr %1961, i64 %1975
  %1977 = load i16, ptr %1976, align 2, !tbaa !45
  %1978 = zext i16 %1977 to i32
  %1979 = add i32 %1972, %1978
  %1980 = add nsw i32 %1978, -1
  %1981 = add i32 %1979, 1
  %1982 = sext i32 %1981 to i64
  %1983 = getelementptr inbounds i16, ptr %1961, i64 %1982
  %1984 = sext i32 %1979 to i64
  %1985 = getelementptr inbounds i16, ptr %1961, i64 %1984
  %1986 = load i16, ptr %1985, align 2, !tbaa !45
  %1987 = zext i16 %1986 to i32
  %1988 = add i32 %1981, %1987
  store i32 %1988, ptr %17, align 8, !tbaa !19
  %1989 = add nsw i32 %1987, -1
  br label %1990

1990:                                             ; preds = %1948, %1960
  %1991 = phi i32 [ %1980, %1960 ], [ %1744, %1948 ]
  %1992 = phi ptr [ %1983, %1960 ], [ %1856, %1948 ]
  %1993 = phi i32 [ %1989, %1960 ], [ %1853, %1948 ]
  %1994 = phi ptr [ %1974, %1960 ], [ %1747, %1948 ]
  %1995 = phi i32 [ %1971, %1960 ], [ %1723, %1948 ]
  %1996 = phi ptr [ %1965, %1960 ], [ %1204, %1948 ]
  %1997 = phi i32 [ %687, %1960 ], [ %1165, %1948 ]
  %1998 = phi ptr [ %686, %1960 ], [ %974, %1948 ]
  %1999 = phi ptr [ %685, %1960 ], [ %975, %1948 ]
  %2000 = phi ptr [ %684, %1960 ], [ %976, %1948 ]
  %2001 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %2002 = icmp eq i32 %2001, 0
  %2003 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2004 = icmp ne i32 %2003, 0
  %2005 = select i1 %2002, i1 true, i1 %2004
  br i1 %2005, label %2010, label %2006

2006:                                             ; preds = %1990
  %2007 = load i8, ptr %714, align 2, !tbaa !52
  %2008 = icmp eq i8 %2007, 1
  %2009 = select i1 %2008, double 1.000000e+00, double -1.000000e+00
  br label %2010

2010:                                             ; preds = %1990, %2006
  %2011 = phi double [ %2009, %2006 ], [ 0.000000e+00, %1990 ]
  %2012 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %692, i32 1
  %2013 = load float, ptr %2012, align 8, !tbaa !81
  %2014 = fpext float %2013 to double
  %2015 = fmul double %2014, 0x4074C104816F0069
  %2016 = fmul double %32, %2015
  %2017 = fmul double %28, %2016
  %2018 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %692, i32 2
  %2019 = load i16, ptr %2018, align 4, !tbaa !82
  %2020 = sext i16 %2019 to i32
  %2021 = load ptr, ptr %671, align 8, !tbaa !83
  %2022 = load i32, ptr %672, align 8, !tbaa !85
  %2023 = shl nsw i32 %2020, 1
  %2024 = mul i32 %2023, %2022
  %2025 = zext i32 %2024 to i64
  %2026 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2021, i64 %2025
  %2027 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2028 = extractelement <2 x double> %710, i64 0
  %2029 = extractelement <2 x double> %710, i64 1
  %2030 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2027, double noundef %2028, double noundef %2029, double noundef %713, ptr noundef %45, ptr noundef nonnull %1996, i32 noundef %1995, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2031 = icmp sgt i32 %2030, 0
  br i1 %2031, label %2032, label %2218

2032:                                             ; preds = %2010
  %2033 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2034 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2035 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2036 = mul nsw i32 %2035, %716
  %2037 = mul i32 %2034, 3
  %2038 = mul nsw i32 %728, 3
  %2039 = sext i32 %2038 to i64
  %2040 = add nsw i32 %2038, 1
  %2041 = sext i32 %2040 to i64
  %2042 = add nsw i32 %2038, 2
  %2043 = sext i32 %2042 to i64
  %2044 = zext i32 %2030 to i64
  br label %2045

2045:                                             ; preds = %2032, %2045
  %2046 = phi i64 [ 0, %2032 ], [ %2216, %2045 ]
  %2047 = phi double [ 0.000000e+00, %2032 ], [ %2161, %2045 ]
  %2048 = phi <2 x double> [ %689, %2032 ], [ %2153, %2045 ]
  %2049 = phi <2 x double> [ %690, %2032 ], [ %2146, %2045 ]
  %2050 = phi <2 x double> [ %691, %2032 ], [ %2159, %2045 ]
  %2051 = phi <2 x double> [ zeroinitializer, %2032 ], [ %2155, %2045 ]
  %2052 = shl nuw nsw i64 %2046, 1
  %2053 = getelementptr inbounds i32, ptr %145, i64 %2052
  %2054 = load i32, ptr %2053, align 4, !tbaa !5
  %2055 = ashr i32 %2054, 14
  %2056 = add nsw i32 %2055, %38
  %2057 = getelementptr inbounds i16, ptr %98, i64 %2046
  %2058 = load i16, ptr %2057, align 2, !tbaa !45
  %2059 = zext i16 %2058 to i64
  %2060 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2059
  %2061 = getelementptr inbounds double, ptr %144, i64 %2046
  %2062 = load double, ptr %2061, align 8, !tbaa !15
  %2063 = sext i32 %2056 to i64
  %2064 = getelementptr inbounds double, ptr %2033, i64 %2063
  %2065 = load double, ptr %2064, align 8, !tbaa !15
  %2066 = fsub double %2062, %2065
  %2067 = shl nsw i32 %2056, 4
  %2068 = sext i32 %2067 to i64
  %2069 = getelementptr inbounds double, ptr %31, i64 %2068
  %2070 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2059, i32 2
  %2071 = load i16, ptr %2070, align 4, !tbaa !82
  %2072 = sext i16 %2071 to i32
  %2073 = shl nsw i32 %2072, 1
  %2074 = sext i32 %2073 to i64
  %2075 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2026, i64 %2074
  %2076 = getelementptr inbounds %class.Vector, ptr %652, i64 %2059
  %2077 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2059, i32 1
  %2078 = load float, ptr %2077, align 8, !tbaa !81
  %2079 = fpext float %2078 to double
  %2080 = fmul double %2017, %2079
  %2081 = load <2 x double>, ptr %2060, align 8, !tbaa !15
  %2082 = fsub <2 x double> %710, %2081
  %2083 = getelementptr inbounds %class.Vector, ptr %2060, i64 0, i32 2
  %2084 = load double, ptr %2083, align 8, !tbaa !50
  %2085 = fsub double %713, %2084
  %2086 = load double, ptr %2075, align 8, !tbaa !86
  %2087 = fmul double %32, %2086
  %2088 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2026, i64 %2074, i32 1
  %2089 = load double, ptr %2088, align 8, !tbaa !88
  %2090 = load double, ptr %2069, align 8, !tbaa !15
  %2091 = getelementptr inbounds double, ptr %2069, i64 2
  %2092 = load double, ptr %2091, align 8, !tbaa !15
  %2093 = fmul double %2089, %673
  %2094 = fmul double %2093, %2092
  %2095 = tail call double @llvm.fmuladd.f64(double %2087, double %2090, double %2094)
  %2096 = getelementptr inbounds double, ptr %2069, i64 1
  %2097 = load double, ptr %2096, align 8, !tbaa !15
  %2098 = getelementptr inbounds double, ptr %2069, i64 3
  %2099 = load double, ptr %2098, align 8, !tbaa !15
  %2100 = fmul double %2093, %2099
  %2101 = tail call double @llvm.fmuladd.f64(double %2087, double %2097, double %2100)
  %2102 = getelementptr inbounds double, ptr %2069, i64 4
  %2103 = load double, ptr %2102, align 8, !tbaa !15
  %2104 = getelementptr inbounds double, ptr %2069, i64 6
  %2105 = load double, ptr %2104, align 8, !tbaa !15
  %2106 = fmul double %2093, %2105
  %2107 = tail call double @llvm.fmuladd.f64(double %2087, double %2103, double %2106)
  %2108 = tail call double @llvm.fmuladd.f64(double %2066, double %2095, double %2101)
  %2109 = tail call double @llvm.fmuladd.f64(double %2108, double %2066, double %2107)
  %2110 = fmul double %2011, %2109
  %2111 = load <2 x double>, ptr %674, align 8, !tbaa !15
  %2112 = insertelement <2 x double> poison, double %2110, i64 0
  %2113 = shufflevector <2 x double> %2112, <2 x double> poison, <2 x i32> zeroinitializer
  %2114 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2113, <2 x double> %2082, <2 x double> %2111)
  store <2 x double> %2114, ptr %674, align 8, !tbaa !15
  %2115 = load double, ptr %675, align 8, !tbaa !15
  %2116 = tail call double @llvm.fmuladd.f64(double %2110, double %2085, double %2115)
  store double %2116, ptr %675, align 8, !tbaa !15
  %2117 = getelementptr inbounds double, ptr %2069, i64 8
  %2118 = load double, ptr %2117, align 8, !tbaa !15
  %2119 = getelementptr inbounds double, ptr %2069, i64 9
  %2120 = load double, ptr %2119, align 8, !tbaa !15
  %2121 = getelementptr inbounds double, ptr %2069, i64 10
  %2122 = load double, ptr %2121, align 8, !tbaa !15
  %2123 = fmul double %2080, %2118
  %2124 = fmul double %2080, %2120
  %2125 = fmul double %2080, %2122
  %2126 = tail call double @llvm.fmuladd.f64(double %2066, double %2123, double %2124)
  %2127 = tail call double @llvm.fmuladd.f64(double %2126, double %2066, double %2125)
  %2128 = fmul double %2011, %2127
  %2129 = load <2 x double>, ptr %676, align 8, !tbaa !15
  %2130 = insertelement <2 x double> poison, double %2128, i64 0
  %2131 = shufflevector <2 x double> %2130, <2 x double> poison, <2 x i32> zeroinitializer
  %2132 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2131, <2 x double> %2082, <2 x double> %2129)
  store <2 x double> %2132, ptr %676, align 8, !tbaa !15
  %2133 = load double, ptr %677, align 8, !tbaa !15
  %2134 = tail call double @llvm.fmuladd.f64(double %2128, double %2085, double %2133)
  store double %2134, ptr %677, align 8, !tbaa !15
  %2135 = fadd double %2095, %2123
  %2136 = fadd double %2101, %2124
  %2137 = fadd double %2107, %2125
  %2138 = tail call double @llvm.fmuladd.f64(double %2066, double %2135, double %2136)
  %2139 = tail call double @llvm.fmuladd.f64(double %2138, double %2066, double %2137)
  %2140 = extractelement <2 x double> %2082, i64 1
  %2141 = fmul double %2140, %2139
  %2142 = insertelement <2 x double> poison, double %2141, i64 0
  %2143 = shufflevector <2 x double> %2142, <2 x double> poison, <2 x i32> zeroinitializer
  %2144 = shufflevector <2 x double> %2082, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2145 = insertelement <2 x double> %2144, double %2085, i64 1
  %2146 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2143, <2 x double> %2145, <2 x double> %2049)
  %2147 = insertelement <2 x double> %2144, double %2085, i64 0
  %2148 = insertelement <2 x double> poison, double %2139, i64 0
  %2149 = shufflevector <2 x double> %2148, <2 x double> poison, <2 x i32> zeroinitializer
  %2150 = fmul <2 x double> %2147, %2149
  %2151 = shufflevector <2 x double> %2150, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2152 = shufflevector <2 x double> %2150, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2153 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2152, <2 x double> %2082, <2 x double> %2048)
  %2154 = insertelement <2 x double> %2151, double %2141, i64 1
  %2155 = fadd <2 x double> %2051, %2154
  %2156 = load <2 x double>, ptr %2076, align 8, !tbaa !15
  %2157 = fsub <2 x double> %2156, %2154
  store <2 x double> %2157, ptr %2076, align 8, !tbaa !15
  %2158 = shufflevector <2 x double> %2147, <2 x double> poison, <2 x i32> zeroinitializer
  %2159 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2150, <2 x double> %2158, <2 x double> %2050)
  %2160 = extractelement <2 x double> %2150, i64 0
  %2161 = fadd double %2047, %2160
  %2162 = getelementptr inbounds %class.Vector, ptr %652, i64 %2059, i32 2
  %2163 = load double, ptr %2162, align 8, !tbaa !89
  %2164 = fsub double %2163, %2160
  store double %2164, ptr %2162, align 8, !tbaa !89
  %2165 = load double, ptr %2083, align 8, !tbaa !50
  %2166 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2167 = fsub double %2165, %2166
  %2168 = fmul double %10, %2167
  %2169 = tail call double @llvm.floor.f64(double %2168)
  %2170 = fptosi double %2169 to i32
  %2171 = icmp slt i32 %2170, 0
  %2172 = select i1 %2171, i32 %2034, i32 0
  %2173 = icmp sgt i32 %2034, %2170
  %2174 = select i1 %2173, i32 0, i32 %2034
  %2175 = sub i32 %2170, %2174
  %2176 = add i32 %2175, %2172
  %2177 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2059, i32 3
  %2178 = load i8, ptr %2177, align 2, !tbaa !52
  %2179 = zext i8 %2178 to i32
  %2180 = shufflevector <2 x double> %2150, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2181 = fmul <2 x double> %2082, %2180
  %2182 = extractelement <2 x double> %2181, i64 0
  %2183 = fmul double %2140, %2141
  %2184 = fmul double %2085, %2160
  %2185 = add nsw i32 %2036, %2179
  %2186 = mul i32 %2037, %2185
  %2187 = sext i32 %2186 to i64
  %2188 = getelementptr inbounds double, ptr %8, i64 %2187
  %2189 = fmul double %2182, 5.000000e-01
  %2190 = fmul double %2183, 5.000000e-01
  %2191 = fmul double %2184, 5.000000e-01
  %2192 = getelementptr inbounds double, ptr %2188, i64 %2039
  %2193 = load double, ptr %2192, align 8, !tbaa !15
  %2194 = fadd double %2189, %2193
  store double %2194, ptr %2192, align 8, !tbaa !15
  %2195 = getelementptr inbounds double, ptr %2188, i64 %2041
  %2196 = load double, ptr %2195, align 8, !tbaa !15
  %2197 = fadd double %2190, %2196
  store double %2197, ptr %2195, align 8, !tbaa !15
  %2198 = getelementptr inbounds double, ptr %2188, i64 %2043
  %2199 = load double, ptr %2198, align 8, !tbaa !15
  %2200 = fadd double %2191, %2199
  store double %2200, ptr %2198, align 8, !tbaa !15
  %2201 = mul nsw i32 %2176, 3
  %2202 = sext i32 %2201 to i64
  %2203 = getelementptr inbounds double, ptr %2188, i64 %2202
  %2204 = load double, ptr %2203, align 8, !tbaa !15
  %2205 = fadd double %2189, %2204
  store double %2205, ptr %2203, align 8, !tbaa !15
  %2206 = add nsw i32 %2201, 1
  %2207 = sext i32 %2206 to i64
  %2208 = getelementptr inbounds double, ptr %2188, i64 %2207
  %2209 = load double, ptr %2208, align 8, !tbaa !15
  %2210 = fadd double %2190, %2209
  store double %2210, ptr %2208, align 8, !tbaa !15
  %2211 = add nsw i32 %2201, 2
  %2212 = sext i32 %2211 to i64
  %2213 = getelementptr inbounds double, ptr %2188, i64 %2212
  %2214 = load double, ptr %2213, align 8, !tbaa !15
  %2215 = fadd double %2191, %2214
  store double %2215, ptr %2213, align 8, !tbaa !15
  %2216 = add nuw nsw i64 %2046, 1
  %2217 = icmp eq i64 %2216, %2044
  br i1 %2217, label %2218, label %2045

2218:                                             ; preds = %2045, %2010
  %2219 = phi double [ 0.000000e+00, %2010 ], [ %2161, %2045 ]
  %2220 = phi <2 x double> [ %689, %2010 ], [ %2153, %2045 ]
  %2221 = phi <2 x double> [ %690, %2010 ], [ %2146, %2045 ]
  %2222 = phi <2 x double> [ %691, %2010 ], [ %2159, %2045 ]
  %2223 = phi <2 x double> [ zeroinitializer, %2010 ], [ %2155, %2045 ]
  %2224 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2225 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2224, double noundef %2028, double noundef %2029, double noundef %713, ptr noundef %45, ptr noundef %1992, i32 noundef %1993, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2226 = add nsw i32 %2225, %682
  %2227 = icmp sgt i32 %2225, 0
  br i1 %2227, label %2228, label %2424

2228:                                             ; preds = %2218
  %2229 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2230 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2231 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2232 = mul nsw i32 %2231, %716
  %2233 = mul i32 %2230, 3
  %2234 = mul nsw i32 %728, 3
  %2235 = sext i32 %2234 to i64
  %2236 = add nsw i32 %2234, 1
  %2237 = sext i32 %2236 to i64
  %2238 = add nsw i32 %2234, 2
  %2239 = sext i32 %2238 to i64
  %2240 = zext i32 %2225 to i64
  br label %2241

2241:                                             ; preds = %2228, %2241
  %2242 = phi i64 [ 0, %2228 ], [ %2422, %2241 ]
  %2243 = phi double [ %2219, %2228 ], [ %2367, %2241 ]
  %2244 = phi <2 x double> [ %2220, %2228 ], [ %2359, %2241 ]
  %2245 = phi <2 x double> [ %2221, %2228 ], [ %2352, %2241 ]
  %2246 = phi <2 x double> [ %2222, %2228 ], [ %2365, %2241 ]
  %2247 = phi <2 x double> [ %2223, %2228 ], [ %2361, %2241 ]
  %2248 = shl nuw nsw i64 %2242, 1
  %2249 = getelementptr inbounds i32, ptr %145, i64 %2248
  %2250 = load i32, ptr %2249, align 4, !tbaa !5
  %2251 = ashr i32 %2250, 14
  %2252 = add nsw i32 %2251, %38
  %2253 = getelementptr inbounds i16, ptr %98, i64 %2242
  %2254 = load i16, ptr %2253, align 2, !tbaa !45
  %2255 = zext i16 %2254 to i64
  %2256 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2255
  %2257 = getelementptr inbounds double, ptr %144, i64 %2242
  %2258 = load double, ptr %2257, align 8, !tbaa !15
  %2259 = sext i32 %2252 to i64
  %2260 = getelementptr inbounds double, ptr %2229, i64 %2259
  %2261 = load double, ptr %2260, align 8, !tbaa !15
  %2262 = fsub double %2258, %2261
  %2263 = shl nsw i32 %2252, 4
  %2264 = sext i32 %2263 to i64
  %2265 = getelementptr inbounds double, ptr %31, i64 %2264
  %2266 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2255, i32 2
  %2267 = load i16, ptr %2266, align 4, !tbaa !82
  %2268 = sext i16 %2267 to i32
  %2269 = shl nsw i32 %2268, 1
  %2270 = sext i32 %2269 to i64
  %2271 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2026, i64 %2270
  %2272 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2271, i64 1
  %2273 = getelementptr inbounds %class.Vector, ptr %652, i64 %2255
  %2274 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2255, i32 1
  %2275 = load float, ptr %2274, align 8, !tbaa !81
  %2276 = fpext float %2275 to double
  %2277 = fmul double %2017, %2276
  %2278 = load <2 x double>, ptr %2256, align 8, !tbaa !15
  %2279 = fsub <2 x double> %710, %2278
  %2280 = getelementptr inbounds %class.Vector, ptr %2256, i64 0, i32 2
  %2281 = load double, ptr %2280, align 8, !tbaa !50
  %2282 = fsub double %713, %2281
  %2283 = load double, ptr %2272, align 8, !tbaa !86
  %2284 = fmul double %32, %2283
  %2285 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2271, i64 1, i32 1
  %2286 = load double, ptr %2285, align 8, !tbaa !88
  %2287 = load double, ptr %2265, align 8, !tbaa !15
  %2288 = getelementptr inbounds double, ptr %2265, i64 2
  %2289 = load double, ptr %2288, align 8, !tbaa !15
  %2290 = fmul double %2286, %673
  %2291 = fmul double %2290, %2289
  %2292 = tail call double @llvm.fmuladd.f64(double %2284, double %2287, double %2291)
  %2293 = getelementptr inbounds double, ptr %2265, i64 1
  %2294 = load double, ptr %2293, align 8, !tbaa !15
  %2295 = getelementptr inbounds double, ptr %2265, i64 3
  %2296 = load double, ptr %2295, align 8, !tbaa !15
  %2297 = fmul double %2290, %2296
  %2298 = tail call double @llvm.fmuladd.f64(double %2284, double %2294, double %2297)
  %2299 = getelementptr inbounds double, ptr %2265, i64 4
  %2300 = load double, ptr %2299, align 8, !tbaa !15
  %2301 = getelementptr inbounds double, ptr %2265, i64 6
  %2302 = load double, ptr %2301, align 8, !tbaa !15
  %2303 = fmul double %2290, %2302
  %2304 = tail call double @llvm.fmuladd.f64(double %2284, double %2300, double %2303)
  %2305 = tail call double @llvm.fmuladd.f64(double %2262, double %2292, double %2298)
  %2306 = tail call double @llvm.fmuladd.f64(double %2305, double %2262, double %2304)
  %2307 = fmul double %2011, %2306
  %2308 = load <2 x double>, ptr %674, align 8, !tbaa !15
  %2309 = insertelement <2 x double> poison, double %2307, i64 0
  %2310 = shufflevector <2 x double> %2309, <2 x double> poison, <2 x i32> zeroinitializer
  %2311 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2310, <2 x double> %2279, <2 x double> %2308)
  store <2 x double> %2311, ptr %674, align 8, !tbaa !15
  %2312 = load double, ptr %675, align 8, !tbaa !15
  %2313 = tail call double @llvm.fmuladd.f64(double %2307, double %2282, double %2312)
  store double %2313, ptr %675, align 8, !tbaa !15
  %2314 = getelementptr inbounds double, ptr %2265, i64 8
  %2315 = load double, ptr %2314, align 8, !tbaa !15
  %2316 = getelementptr inbounds double, ptr %2265, i64 9
  %2317 = load double, ptr %2316, align 8, !tbaa !15
  %2318 = getelementptr inbounds double, ptr %2265, i64 10
  %2319 = load double, ptr %2318, align 8, !tbaa !15
  %2320 = getelementptr inbounds double, ptr %2265, i64 12
  %2321 = load double, ptr %2320, align 8, !tbaa !15
  %2322 = tail call double @llvm.fmuladd.f64(double %678, double %2321, double %2315)
  %2323 = getelementptr inbounds double, ptr %2265, i64 13
  %2324 = load double, ptr %2323, align 8, !tbaa !15
  %2325 = tail call double @llvm.fmuladd.f64(double %678, double %2324, double %2317)
  %2326 = getelementptr inbounds double, ptr %2265, i64 14
  %2327 = load double, ptr %2326, align 8, !tbaa !15
  %2328 = tail call double @llvm.fmuladd.f64(double %678, double %2327, double %2319)
  %2329 = fmul double %2277, %2322
  %2330 = fmul double %2277, %2325
  %2331 = fmul double %2277, %2328
  %2332 = tail call double @llvm.fmuladd.f64(double %2262, double %2329, double %2330)
  %2333 = tail call double @llvm.fmuladd.f64(double %2332, double %2262, double %2331)
  %2334 = fmul double %2011, %2333
  %2335 = load <2 x double>, ptr %676, align 8, !tbaa !15
  %2336 = insertelement <2 x double> poison, double %2334, i64 0
  %2337 = shufflevector <2 x double> %2336, <2 x double> poison, <2 x i32> zeroinitializer
  %2338 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2337, <2 x double> %2279, <2 x double> %2335)
  store <2 x double> %2338, ptr %676, align 8, !tbaa !15
  %2339 = load double, ptr %677, align 8, !tbaa !15
  %2340 = tail call double @llvm.fmuladd.f64(double %2334, double %2282, double %2339)
  store double %2340, ptr %677, align 8, !tbaa !15
  %2341 = fadd double %2292, %2329
  %2342 = fadd double %2298, %2330
  %2343 = fadd double %2304, %2331
  %2344 = tail call double @llvm.fmuladd.f64(double %2262, double %2341, double %2342)
  %2345 = tail call double @llvm.fmuladd.f64(double %2344, double %2262, double %2343)
  %2346 = extractelement <2 x double> %2279, i64 1
  %2347 = fmul double %2346, %2345
  %2348 = insertelement <2 x double> poison, double %2347, i64 0
  %2349 = shufflevector <2 x double> %2348, <2 x double> poison, <2 x i32> zeroinitializer
  %2350 = shufflevector <2 x double> %2279, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2351 = insertelement <2 x double> %2350, double %2282, i64 1
  %2352 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2349, <2 x double> %2351, <2 x double> %2245)
  %2353 = insertelement <2 x double> %2350, double %2282, i64 0
  %2354 = insertelement <2 x double> poison, double %2345, i64 0
  %2355 = shufflevector <2 x double> %2354, <2 x double> poison, <2 x i32> zeroinitializer
  %2356 = fmul <2 x double> %2353, %2355
  %2357 = shufflevector <2 x double> %2356, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2358 = shufflevector <2 x double> %2356, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2359 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2358, <2 x double> %2279, <2 x double> %2244)
  %2360 = insertelement <2 x double> %2357, double %2347, i64 1
  %2361 = fadd <2 x double> %2247, %2360
  %2362 = load <2 x double>, ptr %2273, align 8, !tbaa !15
  %2363 = fsub <2 x double> %2362, %2360
  store <2 x double> %2363, ptr %2273, align 8, !tbaa !15
  %2364 = shufflevector <2 x double> %2353, <2 x double> poison, <2 x i32> zeroinitializer
  %2365 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2356, <2 x double> %2364, <2 x double> %2246)
  %2366 = extractelement <2 x double> %2356, i64 0
  %2367 = fadd double %2243, %2366
  %2368 = getelementptr inbounds %class.Vector, ptr %652, i64 %2255, i32 2
  %2369 = load double, ptr %2368, align 8, !tbaa !89
  %2370 = fsub double %2369, %2366
  store double %2370, ptr %2368, align 8, !tbaa !89
  %2371 = load double, ptr %2280, align 8, !tbaa !50
  %2372 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2373 = fsub double %2371, %2372
  %2374 = fmul double %10, %2373
  %2375 = tail call double @llvm.floor.f64(double %2374)
  %2376 = fptosi double %2375 to i32
  %2377 = icmp slt i32 %2376, 0
  %2378 = select i1 %2377, i32 %2230, i32 0
  %2379 = icmp sgt i32 %2230, %2376
  %2380 = select i1 %2379, i32 0, i32 %2230
  %2381 = sub i32 %2376, %2380
  %2382 = add i32 %2381, %2378
  %2383 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2255, i32 3
  %2384 = load i8, ptr %2383, align 2, !tbaa !52
  %2385 = zext i8 %2384 to i32
  %2386 = shufflevector <2 x double> %2356, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2387 = fmul <2 x double> %2279, %2386
  %2388 = extractelement <2 x double> %2387, i64 0
  %2389 = fmul double %2346, %2347
  %2390 = fmul double %2282, %2366
  %2391 = add nsw i32 %2232, %2385
  %2392 = mul i32 %2233, %2391
  %2393 = sext i32 %2392 to i64
  %2394 = getelementptr inbounds double, ptr %8, i64 %2393
  %2395 = fmul double %2388, 5.000000e-01
  %2396 = fmul double %2389, 5.000000e-01
  %2397 = fmul double %2390, 5.000000e-01
  %2398 = getelementptr inbounds double, ptr %2394, i64 %2235
  %2399 = load double, ptr %2398, align 8, !tbaa !15
  %2400 = fadd double %2395, %2399
  store double %2400, ptr %2398, align 8, !tbaa !15
  %2401 = getelementptr inbounds double, ptr %2394, i64 %2237
  %2402 = load double, ptr %2401, align 8, !tbaa !15
  %2403 = fadd double %2396, %2402
  store double %2403, ptr %2401, align 8, !tbaa !15
  %2404 = getelementptr inbounds double, ptr %2394, i64 %2239
  %2405 = load double, ptr %2404, align 8, !tbaa !15
  %2406 = fadd double %2397, %2405
  store double %2406, ptr %2404, align 8, !tbaa !15
  %2407 = mul nsw i32 %2382, 3
  %2408 = sext i32 %2407 to i64
  %2409 = getelementptr inbounds double, ptr %2394, i64 %2408
  %2410 = load double, ptr %2409, align 8, !tbaa !15
  %2411 = fadd double %2395, %2410
  store double %2411, ptr %2409, align 8, !tbaa !15
  %2412 = add nsw i32 %2407, 1
  %2413 = sext i32 %2412 to i64
  %2414 = getelementptr inbounds double, ptr %2394, i64 %2413
  %2415 = load double, ptr %2414, align 8, !tbaa !15
  %2416 = fadd double %2396, %2415
  store double %2416, ptr %2414, align 8, !tbaa !15
  %2417 = add nsw i32 %2407, 2
  %2418 = sext i32 %2417 to i64
  %2419 = getelementptr inbounds double, ptr %2394, i64 %2418
  %2420 = load double, ptr %2419, align 8, !tbaa !15
  %2421 = fadd double %2397, %2420
  store double %2421, ptr %2419, align 8, !tbaa !15
  %2422 = add nuw nsw i64 %2242, 1
  %2423 = icmp eq i64 %2422, %2240
  br i1 %2423, label %2424, label %2241

2424:                                             ; preds = %2241, %2218
  %2425 = phi double [ %2219, %2218 ], [ %2367, %2241 ]
  %2426 = phi <2 x double> [ %2220, %2218 ], [ %2359, %2241 ]
  %2427 = phi <2 x double> [ %2221, %2218 ], [ %2352, %2241 ]
  %2428 = phi <2 x double> [ %2222, %2218 ], [ %2365, %2241 ]
  %2429 = phi <2 x double> [ %2223, %2218 ], [ %2361, %2241 ]
  %2430 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2431 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2430, double noundef %2028, double noundef %2029, double noundef %713, ptr noundef %45, ptr noundef %1994, i32 noundef %1991, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2432 = add nsw i32 %2226, %2431
  %2433 = icmp sgt i32 %2431, 0
  br i1 %2433, label %2434, label %2587

2434:                                             ; preds = %2424
  %2435 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2436 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2437 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2438 = mul nsw i32 %2437, %716
  %2439 = mul i32 %2436, 3
  %2440 = mul nsw i32 %728, 3
  %2441 = sext i32 %2440 to i64
  %2442 = add nsw i32 %2440, 1
  %2443 = sext i32 %2442 to i64
  %2444 = add nsw i32 %2440, 2
  %2445 = sext i32 %2444 to i64
  %2446 = zext i32 %2431 to i64
  br label %2447

2447:                                             ; preds = %2434, %2447
  %2448 = phi i64 [ 0, %2434 ], [ %2585, %2447 ]
  %2449 = phi double [ %2425, %2434 ], [ %2530, %2447 ]
  %2450 = phi <2 x double> [ %2426, %2434 ], [ %2522, %2447 ]
  %2451 = phi <2 x double> [ %2427, %2434 ], [ %2515, %2447 ]
  %2452 = phi <2 x double> [ %2428, %2434 ], [ %2528, %2447 ]
  %2453 = phi <2 x double> [ %2429, %2434 ], [ %2524, %2447 ]
  %2454 = shl nuw nsw i64 %2448, 1
  %2455 = getelementptr inbounds i32, ptr %145, i64 %2454
  %2456 = load i32, ptr %2455, align 4, !tbaa !5
  %2457 = ashr i32 %2456, 14
  %2458 = add nsw i32 %2457, %38
  %2459 = getelementptr inbounds i16, ptr %98, i64 %2448
  %2460 = load i16, ptr %2459, align 2, !tbaa !45
  %2461 = zext i16 %2460 to i64
  %2462 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2461
  %2463 = getelementptr inbounds double, ptr %144, i64 %2448
  %2464 = load double, ptr %2463, align 8, !tbaa !15
  %2465 = sext i32 %2458 to i64
  %2466 = getelementptr inbounds double, ptr %2435, i64 %2465
  %2467 = load double, ptr %2466, align 8, !tbaa !15
  %2468 = fsub double %2464, %2467
  %2469 = shl nsw i32 %2458, 4
  %2470 = sext i32 %2469 to i64
  %2471 = getelementptr inbounds double, ptr %31, i64 %2470
  %2472 = getelementptr inbounds %class.Vector, ptr %652, i64 %2461
  %2473 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2461, i32 1
  %2474 = load float, ptr %2473, align 8, !tbaa !81
  %2475 = fpext float %2474 to double
  %2476 = fmul double %2017, %2475
  %2477 = load <2 x double>, ptr %2462, align 8, !tbaa !15
  %2478 = fsub <2 x double> %710, %2477
  %2479 = getelementptr inbounds %class.Vector, ptr %2462, i64 0, i32 2
  %2480 = load double, ptr %2479, align 8, !tbaa !50
  %2481 = fsub double %713, %2480
  %2482 = getelementptr inbounds double, ptr %2471, i64 8
  %2483 = load double, ptr %2482, align 8, !tbaa !15
  %2484 = getelementptr inbounds double, ptr %2471, i64 9
  %2485 = load double, ptr %2484, align 8, !tbaa !15
  %2486 = getelementptr inbounds double, ptr %2471, i64 10
  %2487 = load double, ptr %2486, align 8, !tbaa !15
  %2488 = getelementptr inbounds double, ptr %2471, i64 12
  %2489 = load double, ptr %2488, align 8, !tbaa !15
  %2490 = fsub double %2483, %2489
  %2491 = getelementptr inbounds double, ptr %2471, i64 13
  %2492 = load double, ptr %2491, align 8, !tbaa !15
  %2493 = fsub double %2485, %2492
  %2494 = getelementptr inbounds double, ptr %2471, i64 14
  %2495 = load double, ptr %2494, align 8, !tbaa !15
  %2496 = fsub double %2487, %2495
  %2497 = fmul double %2476, %2490
  %2498 = fmul double %2476, %2493
  %2499 = fmul double %2476, %2496
  %2500 = tail call double @llvm.fmuladd.f64(double %2468, double %2497, double %2498)
  %2501 = tail call double @llvm.fmuladd.f64(double %2500, double %2468, double %2499)
  %2502 = fmul double %2011, %2501
  %2503 = load <2 x double>, ptr %676, align 8, !tbaa !15
  %2504 = insertelement <2 x double> poison, double %2502, i64 0
  %2505 = shufflevector <2 x double> %2504, <2 x double> poison, <2 x i32> zeroinitializer
  %2506 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2505, <2 x double> %2478, <2 x double> %2503)
  store <2 x double> %2506, ptr %676, align 8, !tbaa !15
  %2507 = load double, ptr %677, align 8, !tbaa !15
  %2508 = tail call double @llvm.fmuladd.f64(double %2502, double %2481, double %2507)
  store double %2508, ptr %677, align 8, !tbaa !15
  %2509 = extractelement <2 x double> %2478, i64 1
  %2510 = fmul double %2509, %2501
  %2511 = insertelement <2 x double> poison, double %2510, i64 0
  %2512 = shufflevector <2 x double> %2511, <2 x double> poison, <2 x i32> zeroinitializer
  %2513 = shufflevector <2 x double> %2478, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2514 = insertelement <2 x double> %2513, double %2481, i64 1
  %2515 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2512, <2 x double> %2514, <2 x double> %2451)
  %2516 = insertelement <2 x double> %2513, double %2481, i64 0
  %2517 = insertelement <2 x double> poison, double %2501, i64 0
  %2518 = shufflevector <2 x double> %2517, <2 x double> poison, <2 x i32> zeroinitializer
  %2519 = fmul <2 x double> %2516, %2518
  %2520 = shufflevector <2 x double> %2519, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2521 = shufflevector <2 x double> %2519, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2522 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2521, <2 x double> %2478, <2 x double> %2450)
  %2523 = insertelement <2 x double> %2520, double %2510, i64 1
  %2524 = fadd <2 x double> %2453, %2523
  %2525 = load <2 x double>, ptr %2472, align 8, !tbaa !15
  %2526 = fsub <2 x double> %2525, %2523
  store <2 x double> %2526, ptr %2472, align 8, !tbaa !15
  %2527 = shufflevector <2 x double> %2516, <2 x double> poison, <2 x i32> zeroinitializer
  %2528 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2519, <2 x double> %2527, <2 x double> %2452)
  %2529 = extractelement <2 x double> %2519, i64 0
  %2530 = fadd double %2449, %2529
  %2531 = getelementptr inbounds %class.Vector, ptr %652, i64 %2461, i32 2
  %2532 = load double, ptr %2531, align 8, !tbaa !89
  %2533 = fsub double %2532, %2529
  store double %2533, ptr %2531, align 8, !tbaa !89
  %2534 = load double, ptr %2479, align 8, !tbaa !50
  %2535 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2536 = fsub double %2534, %2535
  %2537 = fmul double %10, %2536
  %2538 = tail call double @llvm.floor.f64(double %2537)
  %2539 = fptosi double %2538 to i32
  %2540 = icmp slt i32 %2539, 0
  %2541 = select i1 %2540, i32 %2436, i32 0
  %2542 = icmp sgt i32 %2436, %2539
  %2543 = select i1 %2542, i32 0, i32 %2436
  %2544 = sub i32 %2539, %2543
  %2545 = add i32 %2544, %2541
  %2546 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2461, i32 3
  %2547 = load i8, ptr %2546, align 2, !tbaa !52
  %2548 = zext i8 %2547 to i32
  %2549 = shufflevector <2 x double> %2519, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2550 = fmul <2 x double> %2478, %2549
  %2551 = extractelement <2 x double> %2550, i64 0
  %2552 = fmul double %2509, %2510
  %2553 = fmul double %2481, %2529
  %2554 = add nsw i32 %2438, %2548
  %2555 = mul i32 %2439, %2554
  %2556 = sext i32 %2555 to i64
  %2557 = getelementptr inbounds double, ptr %8, i64 %2556
  %2558 = fmul double %2551, 5.000000e-01
  %2559 = fmul double %2552, 5.000000e-01
  %2560 = fmul double %2553, 5.000000e-01
  %2561 = getelementptr inbounds double, ptr %2557, i64 %2441
  %2562 = load double, ptr %2561, align 8, !tbaa !15
  %2563 = fadd double %2558, %2562
  store double %2563, ptr %2561, align 8, !tbaa !15
  %2564 = getelementptr inbounds double, ptr %2557, i64 %2443
  %2565 = load double, ptr %2564, align 8, !tbaa !15
  %2566 = fadd double %2559, %2565
  store double %2566, ptr %2564, align 8, !tbaa !15
  %2567 = getelementptr inbounds double, ptr %2557, i64 %2445
  %2568 = load double, ptr %2567, align 8, !tbaa !15
  %2569 = fadd double %2560, %2568
  store double %2569, ptr %2567, align 8, !tbaa !15
  %2570 = mul nsw i32 %2545, 3
  %2571 = sext i32 %2570 to i64
  %2572 = getelementptr inbounds double, ptr %2557, i64 %2571
  %2573 = load double, ptr %2572, align 8, !tbaa !15
  %2574 = fadd double %2558, %2573
  store double %2574, ptr %2572, align 8, !tbaa !15
  %2575 = add nsw i32 %2570, 1
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds double, ptr %2557, i64 %2576
  %2578 = load double, ptr %2577, align 8, !tbaa !15
  %2579 = fadd double %2559, %2578
  store double %2579, ptr %2577, align 8, !tbaa !15
  %2580 = add nsw i32 %2570, 2
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds double, ptr %2557, i64 %2581
  %2583 = load double, ptr %2582, align 8, !tbaa !15
  %2584 = fadd double %2560, %2583
  store double %2584, ptr %2582, align 8, !tbaa !15
  %2585 = add nuw nsw i64 %2448, 1
  %2586 = icmp eq i64 %2585, %2446
  br i1 %2586, label %2587, label %2447

2587:                                             ; preds = %2447, %2424
  %2588 = phi double [ %2425, %2424 ], [ %2530, %2447 ]
  %2589 = phi <2 x double> [ %2426, %2424 ], [ %2522, %2447 ]
  %2590 = phi <2 x double> [ %2427, %2424 ], [ %2515, %2447 ]
  %2591 = phi <2 x double> [ %2428, %2424 ], [ %2528, %2447 ]
  %2592 = phi <2 x double> [ %2429, %2424 ], [ %2524, %2447 ]
  %2593 = getelementptr inbounds %class.Vector, ptr %653, i64 %692
  %2594 = load <2 x double>, ptr %2593, align 8, !tbaa !15
  %2595 = fadd <2 x double> %2592, %2594
  store <2 x double> %2595, ptr %2593, align 8, !tbaa !15
  %2596 = getelementptr inbounds %class.Vector, ptr %653, i64 %692, i32 2
  %2597 = load double, ptr %2596, align 8, !tbaa !89
  %2598 = fadd double %2588, %2597
  store double %2598, ptr %2596, align 8, !tbaa !89
  br i1 %148, label %2601, label %2599

2599:                                             ; preds = %2587
  %2600 = add nsw i32 %683, 1
  br label %2609

2601:                                             ; preds = %2587
  %2602 = load ptr, ptr %12, align 8, !tbaa !47
  %2603 = load i32, ptr %17, align 8, !tbaa !19
  %2604 = add nsw i32 %2603, 1
  store i32 %2604, ptr %17, align 8, !tbaa !19
  %2605 = sext i32 %2603 to i64
  %2606 = getelementptr inbounds i16, ptr %2602, i64 %2605
  %2607 = load i16, ptr %2606, align 2, !tbaa !45
  %2608 = zext i16 %2607 to i32
  br label %2609

2609:                                             ; preds = %1263, %1222, %1151, %1602, %2601, %2599, %704
  %2610 = phi i32 [ %705, %704 ], [ %708, %2601 ], [ %708, %2599 ], [ %708, %1602 ], [ %708, %1151 ], [ %708, %1222 ], [ %708, %1263 ]
  %2611 = phi i32 [ %687, %704 ], [ %1997, %2601 ], [ %1997, %2599 ], [ %1165, %1602 ], [ 0, %1151 ], [ %1165, %1222 ], [ %1165, %1263 ]
  %2612 = phi ptr [ %686, %704 ], [ %1998, %2601 ], [ %1998, %2599 ], [ %974, %1602 ], [ %974, %1151 ], [ %974, %1222 ], [ %974, %1263 ]
  %2613 = phi ptr [ %685, %704 ], [ %1999, %2601 ], [ %1999, %2599 ], [ %975, %1602 ], [ %975, %1151 ], [ %975, %1222 ], [ %975, %1263 ]
  %2614 = phi ptr [ %684, %704 ], [ %2000, %2601 ], [ %2000, %2599 ], [ %976, %1602 ], [ %976, %1151 ], [ %976, %1222 ], [ %976, %1263 ]
  %2615 = phi i32 [ %706, %704 ], [ %2608, %2601 ], [ %2600, %2599 ], [ %1603, %1602 ], [ %1155, %1151 ], [ %1223, %1222 ], [ %1264, %1263 ]
  %2616 = phi i32 [ %682, %704 ], [ %2432, %2601 ], [ %2432, %2599 ], [ %682, %1602 ], [ %682, %1151 ], [ %682, %1222 ], [ %682, %1263 ]
  %2617 = phi <2 x double> [ %689, %704 ], [ %2589, %2601 ], [ %2589, %2599 ], [ %689, %1602 ], [ %689, %1151 ], [ %689, %1222 ], [ %689, %1263 ]
  %2618 = phi <2 x double> [ %690, %704 ], [ %2590, %2601 ], [ %2590, %2599 ], [ %690, %1602 ], [ %690, %1151 ], [ %690, %1222 ], [ %690, %1263 ]
  %2619 = phi <2 x double> [ %691, %704 ], [ %2591, %2601 ], [ %2591, %2599 ], [ %691, %1602 ], [ %691, %1151 ], [ %691, %1222 ], [ %691, %1263 ]
  %2620 = icmp slt i32 %2615, %40
  br i1 %2620, label %681, label %2621

2621:                                             ; preds = %2609, %649
  %2622 = phi ptr [ null, %649 ], [ %2614, %2609 ]
  %2623 = phi i32 [ %656, %649 ], [ %2615, %2609 ]
  %2624 = phi i32 [ 0, %649 ], [ %2616, %2609 ]
  %2625 = phi <2 x double> [ zeroinitializer, %649 ], [ %2617, %2609 ]
  %2626 = phi <2 x double> [ zeroinitializer, %649 ], [ %2618, %2609 ]
  %2627 = phi <2 x double> [ zeroinitializer, %649 ], [ %2619, %2609 ]
  br i1 %146, label %2635, label %2628

2628:                                             ; preds = %2621
  %2629 = trunc i32 %2623 to i16
  %2630 = load ptr, ptr %12, align 8, !tbaa !47
  %2631 = load i32, ptr %17, align 8, !tbaa !19
  %2632 = add nsw i32 %2631, -1
  %2633 = sext i32 %2632 to i64
  %2634 = getelementptr inbounds i16, ptr %2630, i64 %2633
  store i16 %2629, ptr %2634, align 2, !tbaa !45
  br label %2635

2635:                                             ; preds = %2628, %2621
  %2636 = sitofp i32 %2624 to double
  %2637 = getelementptr inbounds double, ptr %6, i64 22
  %2638 = load double, ptr %2637, align 8, !tbaa !15
  %2639 = fadd double %2638, %2636
  store double %2639, ptr %2637, align 8, !tbaa !15
  %2640 = getelementptr inbounds double, ptr %6, i64 12
  %2641 = load <4 x double>, ptr %2640, align 8, !tbaa !15
  %2642 = shufflevector <2 x double> %2625, <2 x double> %2627, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2643 = shufflevector <4 x double> %2642, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2644 = fadd <4 x double> %2643, %2641
  store <4 x double> %2644, ptr %2640, align 8, !tbaa !15
  %2645 = getelementptr inbounds double, ptr %6, i64 16
  %2646 = load <4 x double>, ptr %2645, align 8, !tbaa !15
  %2647 = shufflevector <2 x double> %2626, <2 x double> %2627, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2648 = shufflevector <4 x double> %2647, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2649 = fadd <4 x double> %2648, %2646
  store <4 x double> %2649, ptr %2645, align 8, !tbaa !15
  %2650 = getelementptr inbounds double, ptr %6, i64 20
  %2651 = load double, ptr %2650, align 8, !tbaa !15
  %2652 = extractelement <2 x double> %2627, i64 0
  %2653 = fadd double %2652, %2651
  store double %2653, ptr %2650, align 8, !tbaa !15
  %2654 = icmp eq ptr %2622, null
  br i1 %2654, label %2656, label %2655

2655:                                             ; preds = %2635
  tail call void @_ZdaPv(ptr noundef nonnull %2622) #10
  br label %2656

2656:                                             ; preds = %2635, %2655, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil38calc_pair_energy_merge_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2746

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %604, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %616

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %616

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %616, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %616

604:                                              ; preds = %469
  %605 = load ptr, ptr %12, align 8, !tbaa !47
  %606 = load i32, ptr %17, align 8, !tbaa !19
  %607 = add nsw i32 %606, 1
  store i32 %607, ptr %17, align 8, !tbaa !19
  %608 = sext i32 %606 to i64
  %609 = getelementptr inbounds i16, ptr %605, i64 %608
  %610 = load i16, ptr %609, align 2, !tbaa !45
  %611 = zext i16 %610 to i32
  %612 = icmp eq i32 %40, %611
  br i1 %612, label %633, label %613

613:                                              ; preds = %604
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  br label %633

616:                                              ; preds = %472, %597, %594, %535
  %617 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %618 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %619 = load i32, ptr %17, align 8, !tbaa !19
  %620 = trunc i32 %40 to i16
  %621 = load ptr, ptr %12, align 8, !tbaa !47
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds i16, ptr %621, i64 %622
  store i16 %620, ptr %623, align 2, !tbaa !45
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %625 = load i32, ptr %624, align 4, !tbaa !48
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %627 = load i32, ptr %626, align 4, !tbaa !49
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %629 = load ptr, ptr %628, align 8, !tbaa !24
  %630 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %631 = load ptr, ptr %630, align 8, !tbaa !24
  %632 = add nsw i32 %619, 2
  store i32 %632, ptr %17, align 8, !tbaa !19
  br label %649

633:                                              ; preds = %613, %604
  %634 = phi i32 [ %607, %604 ], [ %615, %613 ]
  %635 = phi ptr [ %605, %604 ], [ %614, %613 ]
  %636 = sext i32 %634 to i64
  %637 = getelementptr inbounds i16, ptr %635, i64 %636
  %638 = load i16, ptr %637, align 2, !tbaa !45
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !48
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %642 = load i32, ptr %641, align 4, !tbaa !49
  %643 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %644 = load ptr, ptr %643, align 8, !tbaa !24
  %645 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %646 = load ptr, ptr %645, align 8, !tbaa !24
  %647 = add nsw i32 %634, 1
  store i32 %647, ptr %17, align 8, !tbaa !19
  %648 = zext i16 %638 to i32
  br label %649

649:                                              ; preds = %633, %616
  %650 = phi i32 [ %640, %633 ], [ %625, %616 ]
  %651 = phi i32 [ %642, %633 ], [ %627, %616 ]
  %652 = phi ptr [ %644, %633 ], [ %629, %616 ]
  %653 = phi ptr [ %646, %633 ], [ %631, %616 ]
  %654 = phi i32 [ 0, %633 ], [ %618, %616 ]
  %655 = phi i32 [ 0, %633 ], [ %617, %616 ]
  %656 = phi i32 [ %648, %633 ], [ 0, %616 ]
  %657 = add nsw i32 %651, -1
  %658 = icmp slt i32 %656, %40
  br i1 %658, label %659, label %2703

659:                                              ; preds = %649
  %660 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %661 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %662 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %663 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %664 = ptrtoint ptr %425 to i64
  %665 = add nsw i32 %42, 10
  %666 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %667 = ptrtoint ptr %471 to i64
  %668 = getelementptr inbounds i16, ptr %425, i64 1
  %669 = ptrtoint ptr %333 to i64
  %670 = ptrtoint ptr %379 to i64
  %671 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %672 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %673 = fneg double %32
  %674 = getelementptr inbounds double, ptr %6, i64 26
  %675 = getelementptr inbounds double, ptr %6, i64 28
  %676 = getelementptr inbounds double, ptr %6, i64 29
  %677 = getelementptr inbounds double, ptr %6, i64 31
  %678 = fneg double %34
  %679 = insertelement <2 x double> poison, double %27, i64 0
  %680 = shufflevector <2 x double> %679, <2 x double> poison, <2 x i32> zeroinitializer
  br label %681

681:                                              ; preds = %659, %2687
  %682 = phi i32 [ 0, %659 ], [ %2694, %2687 ]
  %683 = phi i32 [ %656, %659 ], [ %2693, %2687 ]
  %684 = phi ptr [ null, %659 ], [ %2692, %2687 ]
  %685 = phi ptr [ null, %659 ], [ %2691, %2687 ]
  %686 = phi ptr [ null, %659 ], [ %2690, %2687 ]
  %687 = phi i32 [ 0, %659 ], [ %2689, %2687 ]
  %688 = phi i32 [ %650, %659 ], [ %2688, %2687 ]
  %689 = phi <2 x double> [ zeroinitializer, %659 ], [ %2695, %2687 ]
  %690 = phi <2 x double> [ zeroinitializer, %659 ], [ %2696, %2687 ]
  %691 = phi <2 x double> [ zeroinitializer, %659 ], [ %2697, %2687 ]
  %692 = phi <2 x double> [ zeroinitializer, %659 ], [ %2698, %2687 ]
  %693 = sext i32 %683 to i64
  %694 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %693
  %695 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %693
  br i1 %148, label %708, label %696

696:                                              ; preds = %681
  %697 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %693, i32 4
  %698 = load i8, ptr %697, align 1
  %699 = lshr i8 %698, 3
  %700 = and i8 %699, 15
  %701 = zext i8 %700 to i32
  %702 = icmp eq i8 %700, 0
  br i1 %702, label %708, label %703

703:                                              ; preds = %696
  %704 = icmp eq i32 %688, 0
  br i1 %704, label %708, label %705

705:                                              ; preds = %703
  %706 = add nsw i32 %688, -1
  %707 = add nsw i32 %683, %701
  br label %2687

708:                                              ; preds = %703, %696, %681
  %709 = phi i32 [ %688, %681 ], [ %688, %696 ], [ %657, %703 ]
  %710 = load <2 x double>, ptr %694, align 8, !tbaa !15
  %711 = fadd <2 x double> %19, %710
  %712 = getelementptr inbounds %class.Vector, ptr %694, i64 0, i32 2
  %713 = load double, ptr %712, align 8, !tbaa !50
  %714 = fadd double %21, %713
  %715 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %693, i32 3
  %716 = load i8, ptr %715, align 2, !tbaa !52
  %717 = zext i8 %716 to i32
  %718 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %719 = fsub double %713, %718
  %720 = fmul double %10, %719
  %721 = tail call double @llvm.floor.f64(double %720)
  %722 = fptosi double %721 to i32
  %723 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %724 = icmp slt i32 %722, 0
  %725 = select i1 %724, i32 %723, i32 0
  %726 = icmp sgt i32 %723, %722
  %727 = select i1 %726, i32 0, i32 %723
  %728 = sub i32 %722, %727
  %729 = add i32 %728, %725
  br i1 %148, label %1961, label %730

730:                                              ; preds = %708
  %731 = load i32, ptr %695, align 4
  %732 = shl i32 %731, 2
  %733 = ashr exact i32 %732, 2
  %734 = load ptr, ptr %660, align 8, !tbaa !53
  %735 = sext i32 %733 to i64
  %736 = getelementptr inbounds %class.ExclusionCheck, ptr %734, i64 %735
  %737 = load i32, ptr %736, align 8, !tbaa !55
  %738 = getelementptr inbounds %class.ExclusionCheck, ptr %734, i64 %735, i32 1
  %739 = load i32, ptr %738, align 4, !tbaa !57
  %740 = getelementptr inbounds %class.ExclusionCheck, ptr %734, i64 %735, i32 2
  %741 = load ptr, ptr %740, align 8, !tbaa !58
  %742 = icmp eq ptr %741, null
  br i1 %742, label %747, label %743

743:                                              ; preds = %730
  %744 = sext i32 %737 to i64
  %745 = sub nsw i64 0, %744
  %746 = getelementptr inbounds i8, ptr %741, i64 %745
  br label %973

747:                                              ; preds = %730
  %748 = icmp eq ptr %684, null
  br i1 %748, label %836, label %749

749:                                              ; preds = %747
  %750 = load i32, ptr %685, align 4, !tbaa !5
  %751 = icmp slt i32 %750, 1
  br i1 %751, label %799, label %752

752:                                              ; preds = %749
  %753 = add nuw i32 %750, 1
  %754 = zext i32 %753 to i64
  %755 = add nsw i64 %754, -1
  %756 = add nsw i64 %754, -2
  %757 = and i64 %755, 3
  %758 = icmp ult i64 %756, 3
  br i1 %758, label %786, label %759

759:                                              ; preds = %752
  %760 = and i64 %755, -4
  br label %761

761:                                              ; preds = %761, %759
  %762 = phi i64 [ 1, %759 ], [ %783, %761 ]
  %763 = phi i64 [ 0, %759 ], [ %784, %761 ]
  %764 = getelementptr inbounds i32, ptr %685, i64 %762
  %765 = load i32, ptr %764, align 4, !tbaa !5
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i8, ptr %684, i64 %766
  store i8 0, ptr %767, align 1, !tbaa !59
  %768 = add nuw nsw i64 %762, 1
  %769 = getelementptr inbounds i32, ptr %685, i64 %768
  %770 = load i32, ptr %769, align 4, !tbaa !5
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i8, ptr %684, i64 %771
  store i8 0, ptr %772, align 1, !tbaa !59
  %773 = add nuw nsw i64 %762, 2
  %774 = getelementptr inbounds i32, ptr %685, i64 %773
  %775 = load i32, ptr %774, align 4, !tbaa !5
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i8, ptr %684, i64 %776
  store i8 0, ptr %777, align 1, !tbaa !59
  %778 = add nuw nsw i64 %762, 3
  %779 = getelementptr inbounds i32, ptr %685, i64 %778
  %780 = load i32, ptr %779, align 4, !tbaa !5
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i8, ptr %684, i64 %781
  store i8 0, ptr %782, align 1, !tbaa !59
  %783 = add nuw nsw i64 %762, 4
  %784 = add i64 %763, 4
  %785 = icmp eq i64 %784, %760
  br i1 %785, label %786, label %761

786:                                              ; preds = %761, %752
  %787 = phi i64 [ 1, %752 ], [ %783, %761 ]
  %788 = icmp eq i64 %757, 0
  br i1 %788, label %799, label %789

789:                                              ; preds = %786, %789
  %790 = phi i64 [ %796, %789 ], [ %787, %786 ]
  %791 = phi i64 [ %797, %789 ], [ 0, %786 ]
  %792 = getelementptr inbounds i32, ptr %685, i64 %790
  %793 = load i32, ptr %792, align 4, !tbaa !5
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds i8, ptr %684, i64 %794
  store i8 0, ptr %795, align 1, !tbaa !59
  %796 = add nuw nsw i64 %790, 1
  %797 = add i64 %791, 1
  %798 = icmp eq i64 %797, %757
  br i1 %798, label %799, label %789, !llvm.loop !138

799:                                              ; preds = %786, %789, %749
  %800 = load i32, ptr %686, align 4, !tbaa !5
  %801 = icmp slt i32 %800, 1
  br i1 %801, label %856, label %802

802:                                              ; preds = %799
  %803 = add nuw i32 %800, 1
  %804 = zext i32 %803 to i64
  %805 = add nsw i64 %804, -1
  %806 = add nsw i64 %804, -2
  %807 = and i64 %805, 3
  %808 = icmp ult i64 %806, 3
  br i1 %808, label %843, label %809

809:                                              ; preds = %802
  %810 = and i64 %805, -4
  br label %811

811:                                              ; preds = %811, %809
  %812 = phi i64 [ 1, %809 ], [ %833, %811 ]
  %813 = phi i64 [ 0, %809 ], [ %834, %811 ]
  %814 = getelementptr inbounds i32, ptr %686, i64 %812
  %815 = load i32, ptr %814, align 4, !tbaa !5
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i8, ptr %684, i64 %816
  store i8 0, ptr %817, align 1, !tbaa !59
  %818 = add nuw nsw i64 %812, 1
  %819 = getelementptr inbounds i32, ptr %686, i64 %818
  %820 = load i32, ptr %819, align 4, !tbaa !5
  %821 = sext i32 %820 to i64
  %822 = getelementptr inbounds i8, ptr %684, i64 %821
  store i8 0, ptr %822, align 1, !tbaa !59
  %823 = add nuw nsw i64 %812, 2
  %824 = getelementptr inbounds i32, ptr %686, i64 %823
  %825 = load i32, ptr %824, align 4, !tbaa !5
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds i8, ptr %684, i64 %826
  store i8 0, ptr %827, align 1, !tbaa !59
  %828 = add nuw nsw i64 %812, 3
  %829 = getelementptr inbounds i32, ptr %686, i64 %828
  %830 = load i32, ptr %829, align 4, !tbaa !5
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds i8, ptr %684, i64 %831
  store i8 0, ptr %832, align 1, !tbaa !59
  %833 = add nuw nsw i64 %812, 4
  %834 = add i64 %813, 4
  %835 = icmp eq i64 %834, %810
  br i1 %835, label %843, label %811

836:                                              ; preds = %747
  %837 = load i32, ptr %661, align 8, !tbaa !62
  %838 = tail call i32 @llvm.smax.i32(i32 %837, i32 -1)
  %839 = sext i32 %838 to i64
  %840 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %839) #9
  %841 = load i32, ptr %661, align 8, !tbaa !62
  %842 = sext i32 %841 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %840, i8 0, i64 %842, i1 false)
  br label %856

843:                                              ; preds = %811, %802
  %844 = phi i64 [ 1, %802 ], [ %833, %811 ]
  %845 = icmp eq i64 %807, 0
  br i1 %845, label %856, label %846

846:                                              ; preds = %843, %846
  %847 = phi i64 [ %853, %846 ], [ %844, %843 ]
  %848 = phi i64 [ %854, %846 ], [ 0, %843 ]
  %849 = getelementptr inbounds i32, ptr %686, i64 %847
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = sext i32 %850 to i64
  %852 = getelementptr inbounds i8, ptr %684, i64 %851
  store i8 0, ptr %852, align 1, !tbaa !59
  %853 = add nuw nsw i64 %847, 1
  %854 = add i64 %848, 1
  %855 = icmp eq i64 %854, %807
  br i1 %855, label %856, label %846, !llvm.loop !139

856:                                              ; preds = %843, %846, %799, %836
  %857 = phi ptr [ %840, %836 ], [ %684, %799 ], [ %684, %846 ], [ %684, %843 ]
  %858 = load i32, ptr %695, align 4
  %859 = shl i32 %858, 2
  %860 = ashr exact i32 %859, 2
  %861 = load ptr, ptr %662, align 8, !tbaa !64
  %862 = sext i32 %860 to i64
  %863 = getelementptr inbounds ptr, ptr %861, i64 %862
  %864 = load ptr, ptr %863, align 8, !tbaa !24
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = icmp slt i32 %865, 1
  br i1 %866, label %919, label %867

867:                                              ; preds = %856
  %868 = add nuw i32 %865, 1
  %869 = zext i32 %868 to i64
  %870 = add nsw i64 %869, -1
  %871 = add nsw i64 %869, -2
  %872 = and i64 %870, 3
  %873 = icmp ult i64 %871, 3
  br i1 %873, label %901, label %874

874:                                              ; preds = %867
  %875 = and i64 %870, -4
  br label %876

876:                                              ; preds = %876, %874
  %877 = phi i64 [ 1, %874 ], [ %898, %876 ]
  %878 = phi i64 [ 0, %874 ], [ %899, %876 ]
  %879 = getelementptr inbounds i32, ptr %864, i64 %877
  %880 = load i32, ptr %879, align 4, !tbaa !5
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i8, ptr %857, i64 %881
  store i8 1, ptr %882, align 1, !tbaa !59
  %883 = add nuw nsw i64 %877, 1
  %884 = getelementptr inbounds i32, ptr %864, i64 %883
  %885 = load i32, ptr %884, align 4, !tbaa !5
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds i8, ptr %857, i64 %886
  store i8 1, ptr %887, align 1, !tbaa !59
  %888 = add nuw nsw i64 %877, 2
  %889 = getelementptr inbounds i32, ptr %864, i64 %888
  %890 = load i32, ptr %889, align 4, !tbaa !5
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds i8, ptr %857, i64 %891
  store i8 1, ptr %892, align 1, !tbaa !59
  %893 = add nuw nsw i64 %877, 3
  %894 = getelementptr inbounds i32, ptr %864, i64 %893
  %895 = load i32, ptr %894, align 4, !tbaa !5
  %896 = sext i32 %895 to i64
  %897 = getelementptr inbounds i8, ptr %857, i64 %896
  store i8 1, ptr %897, align 1, !tbaa !59
  %898 = add nuw nsw i64 %877, 4
  %899 = add i64 %878, 4
  %900 = icmp eq i64 %899, %875
  br i1 %900, label %901, label %876

901:                                              ; preds = %876, %867
  %902 = phi i64 [ 1, %867 ], [ %898, %876 ]
  %903 = icmp eq i64 %872, 0
  br i1 %903, label %914, label %904

904:                                              ; preds = %901, %904
  %905 = phi i64 [ %911, %904 ], [ %902, %901 ]
  %906 = phi i64 [ %912, %904 ], [ 0, %901 ]
  %907 = getelementptr inbounds i32, ptr %864, i64 %905
  %908 = load i32, ptr %907, align 4, !tbaa !5
  %909 = sext i32 %908 to i64
  %910 = getelementptr inbounds i8, ptr %857, i64 %909
  store i8 1, ptr %910, align 1, !tbaa !59
  %911 = add nuw nsw i64 %905, 1
  %912 = add i64 %906, 1
  %913 = icmp eq i64 %912, %872
  br i1 %913, label %914, label %904, !llvm.loop !140

914:                                              ; preds = %904, %901
  %915 = load i32, ptr %695, align 4
  %916 = shl i32 %915, 2
  %917 = ashr exact i32 %916, 2
  %918 = sext i32 %917 to i64
  br label %919

919:                                              ; preds = %914, %856
  %920 = phi i64 [ %918, %914 ], [ %862, %856 ]
  %921 = load ptr, ptr %663, align 8, !tbaa !66
  %922 = getelementptr inbounds ptr, ptr %921, i64 %920
  %923 = load ptr, ptr %922, align 8, !tbaa !24
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = icmp slt i32 %924, 1
  br i1 %925, label %973, label %926

926:                                              ; preds = %919
  %927 = add nuw i32 %924, 1
  %928 = zext i32 %927 to i64
  %929 = add nsw i64 %928, -1
  %930 = add nsw i64 %928, -2
  %931 = and i64 %929, 3
  %932 = icmp ult i64 %930, 3
  br i1 %932, label %960, label %933

933:                                              ; preds = %926
  %934 = and i64 %929, -4
  br label %935

935:                                              ; preds = %935, %933
  %936 = phi i64 [ 1, %933 ], [ %957, %935 ]
  %937 = phi i64 [ 0, %933 ], [ %958, %935 ]
  %938 = getelementptr inbounds i32, ptr %923, i64 %936
  %939 = load i32, ptr %938, align 4, !tbaa !5
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds i8, ptr %857, i64 %940
  store i8 2, ptr %941, align 1, !tbaa !59
  %942 = add nuw nsw i64 %936, 1
  %943 = getelementptr inbounds i32, ptr %923, i64 %942
  %944 = load i32, ptr %943, align 4, !tbaa !5
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds i8, ptr %857, i64 %945
  store i8 2, ptr %946, align 1, !tbaa !59
  %947 = add nuw nsw i64 %936, 2
  %948 = getelementptr inbounds i32, ptr %923, i64 %947
  %949 = load i32, ptr %948, align 4, !tbaa !5
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds i8, ptr %857, i64 %950
  store i8 2, ptr %951, align 1, !tbaa !59
  %952 = add nuw nsw i64 %936, 3
  %953 = getelementptr inbounds i32, ptr %923, i64 %952
  %954 = load i32, ptr %953, align 4, !tbaa !5
  %955 = sext i32 %954 to i64
  %956 = getelementptr inbounds i8, ptr %857, i64 %955
  store i8 2, ptr %956, align 1, !tbaa !59
  %957 = add nuw nsw i64 %936, 4
  %958 = add i64 %937, 4
  %959 = icmp eq i64 %958, %934
  br i1 %959, label %960, label %935

960:                                              ; preds = %935, %926
  %961 = phi i64 [ 1, %926 ], [ %957, %935 ]
  %962 = icmp eq i64 %931, 0
  br i1 %962, label %973, label %963

963:                                              ; preds = %960, %963
  %964 = phi i64 [ %970, %963 ], [ %961, %960 ]
  %965 = phi i64 [ %971, %963 ], [ 0, %960 ]
  %966 = getelementptr inbounds i32, ptr %923, i64 %964
  %967 = load i32, ptr %966, align 4, !tbaa !5
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds i8, ptr %857, i64 %968
  store i8 2, ptr %969, align 1, !tbaa !59
  %970 = add nuw nsw i64 %964, 1
  %971 = add i64 %965, 1
  %972 = icmp eq i64 %971, %931
  br i1 %972, label %973, label %963, !llvm.loop !141

973:                                              ; preds = %960, %963, %919, %743
  %974 = phi ptr [ %746, %743 ], [ %857, %919 ], [ %857, %963 ], [ %857, %960 ]
  %975 = phi ptr [ %686, %743 ], [ %923, %919 ], [ %923, %963 ], [ %923, %960 ]
  %976 = phi ptr [ %685, %743 ], [ %864, %919 ], [ %864, %963 ], [ %864, %960 ]
  %977 = phi ptr [ %684, %743 ], [ %857, %919 ], [ %857, %963 ], [ %857, %960 ]
  %978 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %693, i32 4
  %979 = load i8, ptr %978, align 1
  %980 = and i8 %979, 7
  %981 = icmp eq i8 %980, 0
  %982 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %981, label %1165, label %983

983:                                              ; preds = %973
  %984 = icmp eq i32 %982, 0
  br i1 %984, label %991, label %985

985:                                              ; preds = %983
  %986 = load i32, ptr %695, align 4
  %987 = freeze i32 %986
  %988 = icmp slt i32 %987, 0
  %989 = select i1 %988, ptr %241, ptr %195
  %990 = select i1 %988, i32 %654, i32 %655
  br label %991

991:                                              ; preds = %985, %983
  %992 = phi ptr [ %195, %983 ], [ %989, %985 ]
  %993 = phi i32 [ %655, %983 ], [ %990, %985 ]
  %994 = icmp sgt i32 %993, 0
  br i1 %994, label %995, label %1146

995:                                              ; preds = %991
  %996 = icmp ugt i32 %993, 6
  br i1 %996, label %997, label %1081

997:                                              ; preds = %995
  %998 = add nsw i32 %993, -2
  %999 = getelementptr inbounds i16, ptr %992, i64 1
  %1000 = load i16, ptr %999, align 2, !tbaa !45
  %1001 = zext i16 %1000 to i64
  %1002 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1001
  %1003 = getelementptr inbounds %class.Vector, ptr %1002, i64 0, i32 2
  %1004 = load double, ptr %1003, align 8, !tbaa !50
  %1005 = load i16, ptr %992, align 2, !tbaa !45
  %1006 = zext i16 %1005 to i64
  %1007 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1006
  %1008 = getelementptr inbounds %class.Vector, ptr %1007, i64 0, i32 2
  %1009 = load double, ptr %1008, align 8, !tbaa !50
  %1010 = getelementptr inbounds %class.Vector, ptr %1002, i64 0, i32 1
  %1011 = load double, ptr %1010, align 8, !tbaa !68
  %1012 = getelementptr inbounds %class.Vector, ptr %1007, i64 0, i32 1
  %1013 = load double, ptr %1012, align 8, !tbaa !68
  %1014 = load double, ptr %1002, align 8, !tbaa !69
  %1015 = load double, ptr %1007, align 8, !tbaa !69
  %1016 = zext i32 %998 to i64
  %1017 = insertelement <2 x double> poison, double %1004, i64 0
  %1018 = insertelement <2 x double> %1017, double %1009, i64 1
  %1019 = insertelement <2 x double> poison, double %1011, i64 0
  %1020 = insertelement <2 x double> %1019, double %1013, i64 1
  %1021 = insertelement <2 x double> poison, double %1014, i64 0
  %1022 = insertelement <2 x double> %1021, double %1015, i64 1
  %1023 = insertelement <2 x double> poison, double %714, i64 0
  %1024 = shufflevector <2 x double> %1023, <2 x double> poison, <2 x i32> zeroinitializer
  %1025 = shufflevector <2 x double> %711, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1026 = shufflevector <2 x double> %711, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1027

1027:                                             ; preds = %997, %1027
  %1028 = phi i64 [ 2, %997 ], [ %1071, %1027 ]
  %1029 = phi i32 [ 0, %997 ], [ %1070, %1027 ]
  %1030 = phi i16 [ %1005, %997 ], [ %1037, %1027 ]
  %1031 = phi i16 [ %1000, %997 ], [ %1040, %1027 ]
  %1032 = phi <2 x double> [ %1018, %997 ], [ %1074, %1027 ]
  %1033 = phi <2 x double> [ %1020, %997 ], [ %1076, %1027 ]
  %1034 = phi <2 x double> [ %1022, %997 ], [ %1078, %1027 ]
  %1035 = fsub <2 x double> %1024, %1032
  %1036 = getelementptr inbounds i16, ptr %992, i64 %1028
  %1037 = load i16, ptr %1036, align 2, !tbaa !45
  %1038 = or i64 %1028, 1
  %1039 = getelementptr inbounds i16, ptr %992, i64 %1038
  %1040 = load i16, ptr %1039, align 2, !tbaa !45
  %1041 = zext i16 %1037 to i64
  %1042 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1041
  %1043 = load double, ptr %1042, align 8, !tbaa !69
  %1044 = zext i16 %1040 to i64
  %1045 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1044
  %1046 = load double, ptr %1045, align 8, !tbaa !69
  %1047 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 1
  %1048 = load double, ptr %1047, align 8, !tbaa !68
  %1049 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 1
  %1050 = load double, ptr %1049, align 8, !tbaa !68
  %1051 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 2
  %1052 = load double, ptr %1051, align 8, !tbaa !50
  %1053 = getelementptr inbounds %class.Vector, ptr %1045, i64 0, i32 2
  %1054 = load double, ptr %1053, align 8, !tbaa !50
  %1055 = fsub <2 x double> %1026, %1034
  %1056 = fmul <2 x double> %1055, %1055
  %1057 = fsub <2 x double> %1025, %1033
  %1058 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1057, <2 x double> %1057, <2 x double> %1056)
  %1059 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1035, <2 x double> %1035, <2 x double> %1058)
  %1060 = fcmp olt <2 x double> %1059, %680
  %1061 = zext i32 %1029 to i64
  %1062 = getelementptr inbounds i16, ptr %287, i64 %1061
  store i16 %1030, ptr %1062, align 2, !tbaa !45
  %1063 = extractelement <2 x i1> %1060, i64 1
  %1064 = zext i1 %1063 to i32
  %1065 = add nuw nsw i32 %1029, %1064
  %1066 = zext i32 %1065 to i64
  %1067 = getelementptr inbounds i16, ptr %287, i64 %1066
  store i16 %1031, ptr %1067, align 2, !tbaa !45
  %1068 = extractelement <2 x i1> %1060, i64 0
  %1069 = zext i1 %1068 to i32
  %1070 = add i32 %1065, %1069
  %1071 = add nuw nsw i64 %1028, 2
  %1072 = icmp ult i64 %1071, %1016
  %1073 = insertelement <2 x double> poison, double %1054, i64 0
  %1074 = insertelement <2 x double> %1073, double %1052, i64 1
  %1075 = insertelement <2 x double> poison, double %1050, i64 0
  %1076 = insertelement <2 x double> %1075, double %1048, i64 1
  %1077 = insertelement <2 x double> poison, double %1046, i64 0
  %1078 = insertelement <2 x double> %1077, double %1043, i64 1
  br i1 %1072, label %1027, label %1079

1079:                                             ; preds = %1027
  %1080 = trunc i64 %1028 to i32
  br label %1081

1081:                                             ; preds = %1079, %995
  %1082 = phi i32 [ %1070, %1079 ], [ 0, %995 ]
  %1083 = phi i32 [ %1080, %1079 ], [ 0, %995 ]
  %1084 = icmp slt i32 %1083, %993
  br i1 %1084, label %1085, label %1090

1085:                                             ; preds = %1081
  %1086 = zext i32 %1083 to i64
  %1087 = zext i32 %993 to i64
  %1088 = extractelement <2 x double> %711, i64 0
  %1089 = extractelement <2 x double> %711, i64 1
  br label %1095

1090:                                             ; preds = %1118, %1081
  %1091 = phi i32 [ %1082, %1081 ], [ %1119, %1118 ]
  %1092 = icmp sgt i32 %1091, 0
  br i1 %1092, label %1093, label %1146

1093:                                             ; preds = %1090
  %1094 = zext i32 %1091 to i64
  br label %1122

1095:                                             ; preds = %1085, %1118
  %1096 = phi i64 [ %1086, %1085 ], [ %1120, %1118 ]
  %1097 = phi i32 [ %1082, %1085 ], [ %1119, %1118 ]
  %1098 = getelementptr inbounds i16, ptr %992, i64 %1096
  %1099 = load i16, ptr %1098, align 2, !tbaa !45
  %1100 = zext i16 %1099 to i64
  %1101 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1100
  %1102 = load double, ptr %1101, align 8, !tbaa !69
  %1103 = getelementptr inbounds %class.Vector, ptr %1101, i64 0, i32 1
  %1104 = load double, ptr %1103, align 8, !tbaa !68
  %1105 = getelementptr inbounds %class.Vector, ptr %1101, i64 0, i32 2
  %1106 = load double, ptr %1105, align 8, !tbaa !50
  %1107 = fsub double %1088, %1102
  %1108 = fmul double %1107, %1107
  %1109 = fsub double %1089, %1104
  %1110 = tail call double @llvm.fmuladd.f64(double %1109, double %1109, double %1108)
  %1111 = fsub double %714, %1106
  %1112 = tail call double @llvm.fmuladd.f64(double %1111, double %1111, double %1110)
  %1113 = fcmp ugt double %1112, %27
  br i1 %1113, label %1118, label %1114

1114:                                             ; preds = %1095
  %1115 = add nsw i32 %1097, 1
  %1116 = sext i32 %1097 to i64
  %1117 = getelementptr inbounds i16, ptr %287, i64 %1116
  store i16 %1099, ptr %1117, align 2, !tbaa !45
  br label %1118

1118:                                             ; preds = %1114, %1095
  %1119 = phi i32 [ %1115, %1114 ], [ %1097, %1095 ]
  %1120 = add nuw nsw i64 %1096, 1
  %1121 = icmp eq i64 %1120, %1087
  br i1 %1121, label %1090, label %1095

1122:                                             ; preds = %1093, %1139
  %1123 = phi i64 [ 0, %1093 ], [ %1142, %1139 ]
  %1124 = phi ptr [ %425, %1093 ], [ %1141, %1139 ]
  %1125 = getelementptr inbounds i16, ptr %287, i64 %1123
  %1126 = load i16, ptr %1125, align 2, !tbaa !45
  %1127 = zext i16 %1126 to i64
  %1128 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1127, i32 4
  %1129 = load i8, ptr %1128, align 1
  %1130 = and i8 %1129, 7
  store i16 %1126, ptr %1124, align 2, !tbaa !45
  %1131 = getelementptr inbounds i16, ptr %1124, i64 1
  %1132 = insertelement <2 x i16> poison, i16 %1126, i64 0
  %1133 = shufflevector <2 x i16> %1132, <2 x i16> poison, <2 x i32> zeroinitializer
  %1134 = add <2 x i16> %1133, <i16 1, i16 2>
  store <2 x i16> %1134, ptr %1131, align 2, !tbaa !45
  %1135 = icmp ult i8 %1130, 4
  br i1 %1135, label %1139, label %1136

1136:                                             ; preds = %1122
  %1137 = add <2 x i16> %1133, <i16 3, i16 4>
  %1138 = getelementptr inbounds i16, ptr %1124, i64 3
  store <2 x i16> %1137, ptr %1138, align 2, !tbaa !45
  br label %1139

1139:                                             ; preds = %1136, %1122
  %1140 = zext i8 %1130 to i64
  %1141 = getelementptr inbounds i16, ptr %1124, i64 %1140
  %1142 = add nuw nsw i64 %1123, 1
  %1143 = icmp eq i64 %1142, %1094
  br i1 %1143, label %1144, label %1122

1144:                                             ; preds = %1139
  %1145 = ptrtoint ptr %1141 to i64
  br label %1146

1146:                                             ; preds = %1144, %1090, %991
  %1147 = phi i64 [ %1145, %1144 ], [ %664, %1090 ], [ %664, %991 ]
  %1148 = sub i64 %1147, %664
  %1149 = lshr exact i64 %1148, 1
  %1150 = trunc i64 %1149 to i32
  %1151 = icmp eq i32 %1150, 0
  br i1 %1151, label %1152, label %1157

1152:                                             ; preds = %1146
  %1153 = load i8, ptr %978, align 1
  %1154 = and i8 %1153, 7
  %1155 = zext i8 %1154 to i32
  %1156 = add nsw i32 %683, %1155
  br label %2687

1157:                                             ; preds = %1146
  %1158 = shl i64 %1148, 31
  %1159 = add i64 %1158, -4294967296
  %1160 = ashr i64 %1159, 32
  %1161 = getelementptr inbounds i16, ptr %425, i64 %1160
  %1162 = load i16, ptr %1161, align 2, !tbaa !45
  %1163 = ashr i64 %1158, 32
  %1164 = getelementptr inbounds i16, ptr %425, i64 %1163
  store i16 %1162, ptr %1164, align 2, !tbaa !45
  br label %1165

1165:                                             ; preds = %1157, %973
  %1166 = phi i32 [ %1150, %1157 ], [ %687, %973 ]
  %1167 = icmp eq i32 %982, 0
  br i1 %1167, label %1172, label %1168

1168:                                             ; preds = %1165
  %1169 = load i32, ptr %695, align 4
  %1170 = and i32 %1169, 1073741824
  %1171 = icmp ne i32 %1170, 0
  br label %1172

1172:                                             ; preds = %1168, %1165
  %1173 = phi i1 [ false, %1165 ], [ %1171, %1168 ]
  %1174 = load i32, ptr %17, align 8, !tbaa !19
  %1175 = add nsw i32 %665, %1174
  %1176 = load i32, ptr %666, align 4, !tbaa !70
  %1177 = icmp sgt i32 %1176, %1175
  br i1 %1177, label %1193, label %1178

1178:                                             ; preds = %1172, %1178
  %1179 = phi i32 [ %1181, %1178 ], [ %1176, %1172 ]
  %1180 = ashr i32 %1179, 1
  %1181 = add nsw i32 %1180, %1179
  %1182 = icmp sgt i32 %1181, %1175
  br i1 %1182, label %1183, label %1178

1183:                                             ; preds = %1178
  %1184 = sext i32 %1181 to i64
  %1185 = icmp slt i32 %1181, 0
  %1186 = shl nsw i64 %1184, 1
  %1187 = select i1 %1185, i64 -1, i64 %1186
  %1188 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1187) #9
  %1189 = load ptr, ptr %12, align 8, !tbaa !47
  %1190 = sext i32 %1174 to i64
  %1191 = shl nsw i64 %1190, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1188, ptr align 2 %1189, i64 %1191, i1 false)
  %1192 = icmp eq ptr %1189, null
  br i1 %1192, label %1197, label %1195

1193:                                             ; preds = %1172
  %1194 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1199

1195:                                             ; preds = %1183
  tail call void @_ZdaPv(ptr noundef nonnull %1189) #10
  %1196 = load i32, ptr %17, align 8, !tbaa !19
  br label %1197

1197:                                             ; preds = %1195, %1183
  %1198 = phi i32 [ %1196, %1195 ], [ %1174, %1183 ]
  store ptr %1188, ptr %12, align 8, !tbaa !47
  store i32 %1181, ptr %666, align 4, !tbaa !70
  br label %1199

1199:                                             ; preds = %1193, %1197
  %1200 = phi i32 [ %1174, %1193 ], [ %1198, %1197 ]
  %1201 = phi ptr [ %1194, %1193 ], [ %1188, %1197 ]
  %1202 = ptrtoint ptr %1201 to i64
  %1203 = add nsw i32 %1200, 1
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i16, ptr %1201, i64 %1204
  %1206 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1207 = icmp eq i32 %1206, 0
  br i1 %1207, label %1388, label %1208

1208:                                             ; preds = %1199
  %1209 = load i8, ptr %715, align 2, !tbaa !52
  %1210 = zext i8 %1209 to i32
  %1211 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1212 = icmp eq i32 %1211, 0
  br i1 %1212, label %1253, label %1213

1213:                                             ; preds = %1208
  %1214 = icmp eq i8 %1209, 1
  br i1 %1214, label %1215, label %1223

1215:                                             ; preds = %1213
  %1216 = icmp sgt i32 %1166, 0
  br i1 %1216, label %1217, label %1328

1217:                                             ; preds = %1215
  %1218 = zext i32 %1166 to i64
  %1219 = and i64 %1218, 1
  %1220 = icmp eq i32 %1166, 1
  br i1 %1220, label %1314, label %1221

1221:                                             ; preds = %1217
  %1222 = and i64 %1218, 4294967294
  br label %1225

1223:                                             ; preds = %1213
  %1224 = add nsw i32 %683, 1
  br label %2687

1225:                                             ; preds = %1248, %1221
  %1226 = phi i64 [ 0, %1221 ], [ %1250, %1248 ]
  %1227 = phi ptr [ %471, %1221 ], [ %1249, %1248 ]
  %1228 = phi i64 [ 0, %1221 ], [ %1251, %1248 ]
  %1229 = getelementptr inbounds i16, ptr %425, i64 %1226
  %1230 = load i16, ptr %1229, align 2, !tbaa !45
  %1231 = zext i16 %1230 to i64
  %1232 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1231, i32 3
  %1233 = load i8, ptr %1232, align 2, !tbaa !52
  %1234 = icmp eq i8 %1233, 1
  br i1 %1234, label %1235, label %1237

1235:                                             ; preds = %1225
  %1236 = getelementptr inbounds i16, ptr %1227, i64 1
  store i16 %1230, ptr %1227, align 2, !tbaa !45
  br label %1237

1237:                                             ; preds = %1235, %1225
  %1238 = phi ptr [ %1236, %1235 ], [ %1227, %1225 ]
  %1239 = or i64 %1226, 1
  %1240 = getelementptr inbounds i16, ptr %425, i64 %1239
  %1241 = load i16, ptr %1240, align 2, !tbaa !45
  %1242 = zext i16 %1241 to i64
  %1243 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1242, i32 3
  %1244 = load i8, ptr %1243, align 2, !tbaa !52
  %1245 = icmp eq i8 %1244, 1
  br i1 %1245, label %1246, label %1248

1246:                                             ; preds = %1237
  %1247 = getelementptr inbounds i16, ptr %1238, i64 1
  store i16 %1241, ptr %1238, align 2, !tbaa !45
  br label %1248

1248:                                             ; preds = %1246, %1237
  %1249 = phi ptr [ %1247, %1246 ], [ %1238, %1237 ]
  %1250 = add nuw nsw i64 %1226, 2
  %1251 = add i64 %1228, 2
  %1252 = icmp eq i64 %1251, %1222
  br i1 %1252, label %1314, label %1225

1253:                                             ; preds = %1208
  %1254 = add i8 %1209, -3
  %1255 = icmp ult i8 %1254, -2
  br i1 %1255, label %1264, label %1256

1256:                                             ; preds = %1253
  %1257 = icmp sgt i32 %1166, 0
  br i1 %1257, label %1258, label %1328

1258:                                             ; preds = %1256
  %1259 = zext i32 %1166 to i64
  %1260 = and i64 %1259, 1
  %1261 = icmp eq i32 %1166, 1
  br i1 %1261, label %1298, label %1262

1262:                                             ; preds = %1258
  %1263 = and i64 %1259, 4294967294
  br label %1266

1264:                                             ; preds = %1253
  %1265 = add nsw i32 %683, 1
  br label %2687

1266:                                             ; preds = %1293, %1262
  %1267 = phi i64 [ 0, %1262 ], [ %1295, %1293 ]
  %1268 = phi ptr [ %471, %1262 ], [ %1294, %1293 ]
  %1269 = phi i64 [ 0, %1262 ], [ %1296, %1293 ]
  %1270 = getelementptr inbounds i16, ptr %425, i64 %1267
  %1271 = load i16, ptr %1270, align 2, !tbaa !45
  %1272 = zext i16 %1271 to i64
  %1273 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1272, i32 3
  %1274 = load i8, ptr %1273, align 2, !tbaa !52
  %1275 = zext i8 %1274 to i32
  %1276 = add nuw nsw i32 %1275, %1210
  %1277 = icmp eq i32 %1276, 3
  br i1 %1277, label %1278, label %1280

1278:                                             ; preds = %1266
  %1279 = getelementptr inbounds i16, ptr %1268, i64 1
  store i16 %1271, ptr %1268, align 2, !tbaa !45
  br label %1280

1280:                                             ; preds = %1278, %1266
  %1281 = phi ptr [ %1279, %1278 ], [ %1268, %1266 ]
  %1282 = or i64 %1267, 1
  %1283 = getelementptr inbounds i16, ptr %425, i64 %1282
  %1284 = load i16, ptr %1283, align 2, !tbaa !45
  %1285 = zext i16 %1284 to i64
  %1286 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1285, i32 3
  %1287 = load i8, ptr %1286, align 2, !tbaa !52
  %1288 = zext i8 %1287 to i32
  %1289 = add nuw nsw i32 %1288, %1210
  %1290 = icmp eq i32 %1289, 3
  br i1 %1290, label %1291, label %1293

1291:                                             ; preds = %1280
  %1292 = getelementptr inbounds i16, ptr %1281, i64 1
  store i16 %1284, ptr %1281, align 2, !tbaa !45
  br label %1293

1293:                                             ; preds = %1291, %1280
  %1294 = phi ptr [ %1292, %1291 ], [ %1281, %1280 ]
  %1295 = add nuw nsw i64 %1267, 2
  %1296 = add i64 %1269, 2
  %1297 = icmp eq i64 %1296, %1263
  br i1 %1297, label %1298, label %1266

1298:                                             ; preds = %1293, %1258
  %1299 = phi ptr [ undef, %1258 ], [ %1294, %1293 ]
  %1300 = phi i64 [ 0, %1258 ], [ %1295, %1293 ]
  %1301 = phi ptr [ %471, %1258 ], [ %1294, %1293 ]
  %1302 = icmp eq i64 %1260, 0
  br i1 %1302, label %1328, label %1303

1303:                                             ; preds = %1298
  %1304 = getelementptr inbounds i16, ptr %425, i64 %1300
  %1305 = load i16, ptr %1304, align 2, !tbaa !45
  %1306 = zext i16 %1305 to i64
  %1307 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1306, i32 3
  %1308 = load i8, ptr %1307, align 2, !tbaa !52
  %1309 = zext i8 %1308 to i32
  %1310 = add nuw nsw i32 %1309, %1210
  %1311 = icmp eq i32 %1310, 3
  br i1 %1311, label %1312, label %1328

1312:                                             ; preds = %1303
  %1313 = getelementptr inbounds i16, ptr %1301, i64 1
  store i16 %1305, ptr %1301, align 2, !tbaa !45
  br label %1328

1314:                                             ; preds = %1248, %1217
  %1315 = phi ptr [ undef, %1217 ], [ %1249, %1248 ]
  %1316 = phi i64 [ 0, %1217 ], [ %1250, %1248 ]
  %1317 = phi ptr [ %471, %1217 ], [ %1249, %1248 ]
  %1318 = icmp eq i64 %1219, 0
  br i1 %1318, label %1328, label %1319

1319:                                             ; preds = %1314
  %1320 = getelementptr inbounds i16, ptr %425, i64 %1316
  %1321 = load i16, ptr %1320, align 2, !tbaa !45
  %1322 = zext i16 %1321 to i64
  %1323 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1322, i32 3
  %1324 = load i8, ptr %1323, align 2, !tbaa !52
  %1325 = icmp eq i8 %1324, 1
  br i1 %1325, label %1326, label %1328

1326:                                             ; preds = %1319
  %1327 = getelementptr inbounds i16, ptr %1317, i64 1
  store i16 %1321, ptr %1317, align 2, !tbaa !45
  br label %1328

1328:                                             ; preds = %1314, %1326, %1319, %1298, %1312, %1303, %1215, %1256
  %1329 = phi ptr [ %471, %1256 ], [ %471, %1215 ], [ %1299, %1298 ], [ %1313, %1312 ], [ %1301, %1303 ], [ %1315, %1314 ], [ %1327, %1326 ], [ %1317, %1319 ]
  %1330 = ptrtoint ptr %1329 to i64
  %1331 = sub i64 %1330, %667
  %1332 = lshr exact i64 %1331, 1
  %1333 = trunc i64 %1332 to i32
  %1334 = icmp sgt i32 %1333, 0
  br i1 %1334, label %1335, label %1597

1335:                                             ; preds = %1328
  %1336 = and i64 %1332, 4294967295
  %1337 = extractelement <2 x double> %711, i64 0
  %1338 = extractelement <2 x double> %711, i64 1
  br label %1339

1339:                                             ; preds = %1335, %1383
  %1340 = phi i64 [ 0, %1335 ], [ %1386, %1383 ]
  %1341 = phi ptr [ %471, %1335 ], [ %1385, %1383 ]
  %1342 = phi ptr [ %1205, %1335 ], [ %1384, %1383 ]
  %1343 = getelementptr inbounds i16, ptr %471, i64 %1340
  %1344 = load i16, ptr %1343, align 2, !tbaa !45
  %1345 = zext i16 %1344 to i64
  %1346 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1345
  %1347 = load double, ptr %1346, align 8, !tbaa !69
  %1348 = fsub double %1337, %1347
  %1349 = fmul double %1348, %1348
  %1350 = getelementptr inbounds %class.Vector, ptr %1346, i64 0, i32 1
  %1351 = load double, ptr %1350, align 8, !tbaa !68
  %1352 = fsub double %1338, %1351
  %1353 = tail call double @llvm.fmuladd.f64(double %1352, double %1352, double %1349)
  %1354 = getelementptr inbounds %class.Vector, ptr %1346, i64 0, i32 2
  %1355 = load double, ptr %1354, align 8, !tbaa !50
  %1356 = fsub double %714, %1355
  %1357 = tail call double @llvm.fmuladd.f64(double %1356, double %1356, double %1353)
  br i1 %1173, label %1358, label %1365

1358:                                             ; preds = %1339
  %1359 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1345
  %1360 = load i32, ptr %1359, align 4
  %1361 = and i32 %1360, 1073741824
  %1362 = icmp ne i32 %1361, 0
  %1363 = fcmp ugt double %1357, %24
  %1364 = select i1 %1362, i1 true, i1 %1363
  br i1 %1364, label %1383, label %1370

1365:                                             ; preds = %1339
  %1366 = fcmp ugt double %1357, %24
  br i1 %1366, label %1383, label %1367

1367:                                             ; preds = %1365
  %1368 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1345
  %1369 = load i32, ptr %1368, align 4
  br label %1370

1370:                                             ; preds = %1367, %1358
  %1371 = phi i32 [ %1369, %1367 ], [ %1360, %1358 ]
  %1372 = shl i32 %1371, 2
  %1373 = ashr exact i32 %1372, 2
  %1374 = icmp slt i32 %1373, %737
  %1375 = icmp sgt i32 %1373, %739
  %1376 = select i1 %1374, i1 true, i1 %1375
  %1377 = select i1 %1376, ptr %1342, ptr %1341
  %1378 = zext i1 %1376 to i64
  %1379 = getelementptr inbounds i16, ptr %1342, i64 %1378
  %1380 = xor i1 %1376, true
  %1381 = zext i1 %1380 to i64
  %1382 = getelementptr inbounds i16, ptr %1341, i64 %1381
  store i16 %1344, ptr %1377, align 2, !tbaa !45
  br label %1383

1383:                                             ; preds = %1370, %1365, %1358
  %1384 = phi ptr [ %1342, %1358 ], [ %1342, %1365 ], [ %1379, %1370 ]
  %1385 = phi ptr [ %1341, %1358 ], [ %1341, %1365 ], [ %1382, %1370 ]
  %1386 = add nuw nsw i64 %1340, 1
  %1387 = icmp eq i64 %1386, %1336
  br i1 %1387, label %1597, label %1339

1388:                                             ; preds = %1199
  %1389 = icmp sgt i32 %1166, 0
  br i1 %1173, label %1390, label %1437

1390:                                             ; preds = %1388
  br i1 %1389, label %1391, label %1597

1391:                                             ; preds = %1390
  %1392 = zext i32 %1166 to i64
  %1393 = extractelement <2 x double> %711, i64 0
  %1394 = extractelement <2 x double> %711, i64 1
  br label %1395

1395:                                             ; preds = %1391, %1432
  %1396 = phi i64 [ 0, %1391 ], [ %1435, %1432 ]
  %1397 = phi ptr [ %471, %1391 ], [ %1434, %1432 ]
  %1398 = phi ptr [ %1205, %1391 ], [ %1433, %1432 ]
  %1399 = getelementptr inbounds i16, ptr %425, i64 %1396
  %1400 = load i16, ptr %1399, align 2, !tbaa !45
  %1401 = zext i16 %1400 to i64
  %1402 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1401
  %1403 = load i32, ptr %1402, align 4
  %1404 = and i32 %1403, 1073741824
  %1405 = icmp eq i32 %1404, 0
  br i1 %1405, label %1406, label %1432

1406:                                             ; preds = %1395
  %1407 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1401
  %1408 = getelementptr inbounds %class.Vector, ptr %1407, i64 0, i32 2
  %1409 = load double, ptr %1408, align 8, !tbaa !50
  %1410 = fsub double %714, %1409
  %1411 = getelementptr inbounds %class.Vector, ptr %1407, i64 0, i32 1
  %1412 = load double, ptr %1411, align 8, !tbaa !68
  %1413 = fsub double %1394, %1412
  %1414 = load double, ptr %1407, align 8, !tbaa !69
  %1415 = fsub double %1393, %1414
  %1416 = fmul double %1415, %1415
  %1417 = tail call double @llvm.fmuladd.f64(double %1413, double %1413, double %1416)
  %1418 = tail call double @llvm.fmuladd.f64(double %1410, double %1410, double %1417)
  %1419 = fcmp ugt double %1418, %24
  br i1 %1419, label %1432, label %1420

1420:                                             ; preds = %1406
  %1421 = shl i32 %1403, 2
  %1422 = ashr exact i32 %1421, 2
  %1423 = icmp slt i32 %1422, %737
  %1424 = icmp sgt i32 %1422, %739
  %1425 = select i1 %1423, i1 true, i1 %1424
  %1426 = select i1 %1425, ptr %1398, ptr %1397
  %1427 = zext i1 %1425 to i64
  %1428 = getelementptr inbounds i16, ptr %1398, i64 %1427
  %1429 = xor i1 %1425, true
  %1430 = zext i1 %1429 to i64
  %1431 = getelementptr inbounds i16, ptr %1397, i64 %1430
  store i16 %1400, ptr %1426, align 2, !tbaa !45
  br label %1432

1432:                                             ; preds = %1420, %1406, %1395
  %1433 = phi ptr [ %1398, %1395 ], [ %1398, %1406 ], [ %1428, %1420 ]
  %1434 = phi ptr [ %1397, %1395 ], [ %1397, %1406 ], [ %1431, %1420 ]
  %1435 = add nuw nsw i64 %1396, 1
  %1436 = icmp eq i64 %1435, %1392
  br i1 %1436, label %1597, label %1395

1437:                                             ; preds = %1388
  br i1 %1389, label %1438, label %1597

1438:                                             ; preds = %1437
  %1439 = icmp ugt i32 %1166, 6
  br i1 %1439, label %1440, label %1548

1440:                                             ; preds = %1438
  %1441 = add nsw i32 %1166, -2
  %1442 = load i16, ptr %425, align 2, !tbaa !45
  %1443 = zext i16 %1442 to i64
  %1444 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1443
  %1445 = load i32, ptr %1444, align 4
  %1446 = load i16, ptr %668, align 2, !tbaa !45
  %1447 = zext i16 %1446 to i64
  %1448 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1447
  %1449 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 2
  %1450 = load double, ptr %1449, align 8, !tbaa !50
  %1451 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1443
  %1452 = getelementptr inbounds %class.Vector, ptr %1451, i64 0, i32 2
  %1453 = load double, ptr %1452, align 8, !tbaa !50
  %1454 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 1
  %1455 = load double, ptr %1454, align 8, !tbaa !68
  %1456 = getelementptr inbounds %class.Vector, ptr %1451, i64 0, i32 1
  %1457 = load double, ptr %1456, align 8, !tbaa !68
  %1458 = load double, ptr %1448, align 8, !tbaa !69
  %1459 = load double, ptr %1451, align 8, !tbaa !69
  %1460 = zext i32 %1441 to i64
  %1461 = extractelement <2 x double> %711, i64 0
  %1462 = extractelement <2 x double> %711, i64 1
  br label %1463

1463:                                             ; preds = %1440, %1541
  %1464 = phi i64 [ 2, %1440 ], [ %1544, %1541 ]
  %1465 = phi i64 [ %1447, %1440 ], [ %1501, %1541 ]
  %1466 = phi i32 [ %1445, %1440 ], [ %1529, %1541 ]
  %1467 = phi ptr [ %471, %1440 ], [ %1543, %1541 ]
  %1468 = phi ptr [ %1205, %1440 ], [ %1542, %1541 ]
  %1469 = phi i16 [ %1442, %1440 ], [ %1494, %1541 ]
  %1470 = phi i16 [ %1446, %1440 ], [ %1497, %1541 ]
  %1471 = phi double [ %1459, %1440 ], [ %1500, %1541 ]
  %1472 = phi double [ %1458, %1440 ], [ %1503, %1541 ]
  %1473 = phi double [ %1457, %1440 ], [ %1505, %1541 ]
  %1474 = phi double [ %1455, %1440 ], [ %1507, %1541 ]
  %1475 = phi double [ %1453, %1440 ], [ %1509, %1541 ]
  %1476 = phi double [ %1450, %1440 ], [ %1511, %1541 ]
  %1477 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1465
  %1478 = load i32, ptr %1477, align 4
  %1479 = shl i32 %1478, 2
  %1480 = ashr exact i32 %1479, 2
  %1481 = fsub double %1461, %1471
  %1482 = fsub double %1461, %1472
  %1483 = fmul double %1481, %1481
  %1484 = fmul double %1482, %1482
  %1485 = fsub double %1462, %1473
  %1486 = fsub double %1462, %1474
  %1487 = tail call double @llvm.fmuladd.f64(double %1485, double %1485, double %1483)
  %1488 = tail call double @llvm.fmuladd.f64(double %1486, double %1486, double %1484)
  %1489 = fsub double %714, %1475
  %1490 = fsub double %714, %1476
  %1491 = tail call double @llvm.fmuladd.f64(double %1489, double %1489, double %1487)
  %1492 = tail call double @llvm.fmuladd.f64(double %1490, double %1490, double %1488)
  %1493 = getelementptr inbounds i16, ptr %425, i64 %1464
  %1494 = load i16, ptr %1493, align 2, !tbaa !45
  %1495 = or i64 %1464, 1
  %1496 = getelementptr inbounds i16, ptr %425, i64 %1495
  %1497 = load i16, ptr %1496, align 2, !tbaa !45
  %1498 = zext i16 %1494 to i64
  %1499 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1498
  %1500 = load double, ptr %1499, align 8, !tbaa !69
  %1501 = zext i16 %1497 to i64
  %1502 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1501
  %1503 = load double, ptr %1502, align 8, !tbaa !69
  %1504 = getelementptr inbounds %class.Vector, ptr %1499, i64 0, i32 1
  %1505 = load double, ptr %1504, align 8, !tbaa !68
  %1506 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 1
  %1507 = load double, ptr %1506, align 8, !tbaa !68
  %1508 = getelementptr inbounds %class.Vector, ptr %1499, i64 0, i32 2
  %1509 = load double, ptr %1508, align 8, !tbaa !50
  %1510 = getelementptr inbounds %class.Vector, ptr %1502, i64 0, i32 2
  %1511 = load double, ptr %1510, align 8, !tbaa !50
  %1512 = fcmp ugt double %1491, %24
  br i1 %1512, label %1525, label %1513

1513:                                             ; preds = %1463
  %1514 = shl i32 %1466, 2
  %1515 = ashr exact i32 %1514, 2
  %1516 = icmp slt i32 %1515, %737
  %1517 = icmp sgt i32 %1515, %739
  %1518 = select i1 %1516, i1 true, i1 %1517
  %1519 = select i1 %1518, ptr %1468, ptr %1467
  %1520 = zext i1 %1518 to i64
  %1521 = getelementptr inbounds i16, ptr %1468, i64 %1520
  %1522 = xor i1 %1518, true
  %1523 = zext i1 %1522 to i64
  %1524 = getelementptr inbounds i16, ptr %1467, i64 %1523
  store i16 %1469, ptr %1519, align 2, !tbaa !45
  br label %1525

1525:                                             ; preds = %1513, %1463
  %1526 = phi ptr [ %1468, %1463 ], [ %1521, %1513 ]
  %1527 = phi ptr [ %1467, %1463 ], [ %1524, %1513 ]
  %1528 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1498
  %1529 = load i32, ptr %1528, align 4
  %1530 = fcmp ugt double %1492, %24
  br i1 %1530, label %1541, label %1531

1531:                                             ; preds = %1525
  %1532 = icmp slt i32 %1480, %737
  %1533 = icmp sgt i32 %1480, %739
  %1534 = select i1 %1532, i1 true, i1 %1533
  %1535 = select i1 %1534, ptr %1526, ptr %1527
  %1536 = zext i1 %1534 to i64
  %1537 = getelementptr inbounds i16, ptr %1526, i64 %1536
  %1538 = xor i1 %1534, true
  %1539 = zext i1 %1538 to i64
  %1540 = getelementptr inbounds i16, ptr %1527, i64 %1539
  store i16 %1470, ptr %1535, align 2, !tbaa !45
  br label %1541

1541:                                             ; preds = %1531, %1525
  %1542 = phi ptr [ %1526, %1525 ], [ %1537, %1531 ]
  %1543 = phi ptr [ %1527, %1525 ], [ %1540, %1531 ]
  %1544 = add nuw nsw i64 %1464, 2
  %1545 = icmp ult i64 %1544, %1460
  br i1 %1545, label %1463, label %1546

1546:                                             ; preds = %1541
  %1547 = trunc i64 %1464 to i32
  br label %1548

1548:                                             ; preds = %1546, %1438
  %1549 = phi i32 [ %1547, %1546 ], [ 0, %1438 ]
  %1550 = phi ptr [ %1542, %1546 ], [ %1205, %1438 ]
  %1551 = phi ptr [ %1543, %1546 ], [ %471, %1438 ]
  %1552 = icmp slt i32 %1549, %1166
  br i1 %1552, label %1553, label %1597

1553:                                             ; preds = %1548
  %1554 = zext i32 %1549 to i64
  %1555 = zext i32 %1166 to i64
  %1556 = extractelement <2 x double> %711, i64 0
  %1557 = extractelement <2 x double> %711, i64 1
  br label %1558

1558:                                             ; preds = %1553, %1592
  %1559 = phi i64 [ %1554, %1553 ], [ %1595, %1592 ]
  %1560 = phi ptr [ %1551, %1553 ], [ %1594, %1592 ]
  %1561 = phi ptr [ %1550, %1553 ], [ %1593, %1592 ]
  %1562 = getelementptr inbounds i16, ptr %425, i64 %1559
  %1563 = load i16, ptr %1562, align 2, !tbaa !45
  %1564 = zext i16 %1563 to i64
  %1565 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1564
  %1566 = load double, ptr %1565, align 8, !tbaa !69
  %1567 = getelementptr inbounds %class.Vector, ptr %1565, i64 0, i32 1
  %1568 = load double, ptr %1567, align 8, !tbaa !68
  %1569 = getelementptr inbounds %class.Vector, ptr %1565, i64 0, i32 2
  %1570 = load double, ptr %1569, align 8, !tbaa !50
  %1571 = fsub double %1556, %1566
  %1572 = fmul double %1571, %1571
  %1573 = fsub double %1557, %1568
  %1574 = tail call double @llvm.fmuladd.f64(double %1573, double %1573, double %1572)
  %1575 = fsub double %714, %1570
  %1576 = tail call double @llvm.fmuladd.f64(double %1575, double %1575, double %1574)
  %1577 = fcmp ugt double %1576, %24
  br i1 %1577, label %1592, label %1578

1578:                                             ; preds = %1558
  %1579 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1564
  %1580 = load i32, ptr %1579, align 4
  %1581 = shl i32 %1580, 2
  %1582 = ashr exact i32 %1581, 2
  %1583 = icmp slt i32 %1582, %737
  %1584 = icmp sgt i32 %1582, %739
  %1585 = select i1 %1583, i1 true, i1 %1584
  %1586 = select i1 %1585, ptr %1561, ptr %1560
  %1587 = zext i1 %1585 to i64
  %1588 = getelementptr inbounds i16, ptr %1561, i64 %1587
  %1589 = xor i1 %1585, true
  %1590 = zext i1 %1589 to i64
  %1591 = getelementptr inbounds i16, ptr %1560, i64 %1590
  store i16 %1563, ptr %1586, align 2, !tbaa !45
  br label %1592

1592:                                             ; preds = %1578, %1558
  %1593 = phi ptr [ %1561, %1558 ], [ %1588, %1578 ]
  %1594 = phi ptr [ %1560, %1558 ], [ %1591, %1578 ]
  %1595 = add nuw nsw i64 %1559, 1
  %1596 = icmp eq i64 %1595, %1555
  br i1 %1596, label %1597, label %1558

1597:                                             ; preds = %1383, %1592, %1432, %1328, %1548, %1390, %1437
  %1598 = phi ptr [ %1205, %1437 ], [ %1205, %1390 ], [ %1550, %1548 ], [ %1205, %1328 ], [ %1433, %1432 ], [ %1593, %1592 ], [ %1384, %1383 ]
  %1599 = phi ptr [ %471, %1437 ], [ %471, %1390 ], [ %1551, %1548 ], [ %471, %1328 ], [ %1434, %1432 ], [ %1594, %1592 ], [ %1385, %1383 ]
  %1600 = icmp eq ptr %1598, %1205
  %1601 = icmp eq ptr %1599, %471
  %1602 = select i1 %1600, i1 %1601, i1 false
  br i1 %1602, label %1603, label %1605

1603:                                             ; preds = %1597
  %1604 = add nsw i32 %683, 1
  br label %2687

1605:                                             ; preds = %1597
  %1606 = trunc i32 %683 to i16
  %1607 = load i32, ptr %17, align 8, !tbaa !19
  %1608 = add nsw i32 %1607, -1
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i16, ptr %1201, i64 %1609
  store i16 %1606, ptr %1610, align 2, !tbaa !45
  %1611 = ptrtoint ptr %1599 to i64
  %1612 = sub i64 %1611, %667
  %1613 = lshr exact i64 %1612, 1
  %1614 = trunc i64 %1613 to i32
  %1615 = icmp sgt i32 %1614, 0
  br i1 %1615, label %1616, label %1716

1616:                                             ; preds = %1605
  %1617 = and i64 %1613, 4294967295
  %1618 = and i64 %1613, 1
  %1619 = icmp eq i64 %1617, 1
  br i1 %1619, label %1684, label %1620

1620:                                             ; preds = %1616
  %1621 = sub nsw i64 %1617, %1618
  br label %1622

1622:                                             ; preds = %1677, %1620
  %1623 = phi i64 [ 0, %1620 ], [ %1681, %1677 ]
  %1624 = phi ptr [ %1598, %1620 ], [ %1680, %1677 ]
  %1625 = phi ptr [ %333, %1620 ], [ %1679, %1677 ]
  %1626 = phi ptr [ %379, %1620 ], [ %1678, %1677 ]
  %1627 = phi i64 [ 0, %1620 ], [ %1682, %1677 ]
  %1628 = getelementptr inbounds i16, ptr %471, i64 %1623
  %1629 = load i16, ptr %1628, align 2, !tbaa !45
  %1630 = zext i16 %1629 to i64
  %1631 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1630
  %1632 = load i32, ptr %1631, align 4
  %1633 = shl i32 %1632, 2
  %1634 = ashr exact i32 %1633, 2
  %1635 = sext i32 %1634 to i64
  %1636 = getelementptr inbounds i8, ptr %974, i64 %1635
  %1637 = load i8, ptr %1636, align 1, !tbaa !59
  %1638 = sext i8 %1637 to i32
  switch i32 %1638, label %1650 [
    i32 0, label %1639
    i32 1, label %1641
    i32 2, label %1643
  ]

1639:                                             ; preds = %1622
  %1640 = getelementptr inbounds i16, ptr %1624, i64 1
  br label %1645

1641:                                             ; preds = %1622
  %1642 = getelementptr inbounds i16, ptr %1625, i64 1
  br label %1645

1643:                                             ; preds = %1622
  %1644 = getelementptr inbounds i16, ptr %1626, i64 1
  br label %1645

1645:                                             ; preds = %1639, %1641, %1643
  %1646 = phi ptr [ %1626, %1643 ], [ %1625, %1641 ], [ %1624, %1639 ]
  %1647 = phi ptr [ %1644, %1643 ], [ %1626, %1641 ], [ %1626, %1639 ]
  %1648 = phi ptr [ %1625, %1643 ], [ %1642, %1641 ], [ %1625, %1639 ]
  %1649 = phi ptr [ %1624, %1643 ], [ %1624, %1641 ], [ %1640, %1639 ]
  store i16 %1629, ptr %1646, align 2, !tbaa !45
  br label %1650

1650:                                             ; preds = %1645, %1622
  %1651 = phi ptr [ %1626, %1622 ], [ %1647, %1645 ]
  %1652 = phi ptr [ %1625, %1622 ], [ %1648, %1645 ]
  %1653 = phi ptr [ %1624, %1622 ], [ %1649, %1645 ]
  %1654 = or i64 %1623, 1
  %1655 = getelementptr inbounds i16, ptr %471, i64 %1654
  %1656 = load i16, ptr %1655, align 2, !tbaa !45
  %1657 = zext i16 %1656 to i64
  %1658 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1657
  %1659 = load i32, ptr %1658, align 4
  %1660 = shl i32 %1659, 2
  %1661 = ashr exact i32 %1660, 2
  %1662 = sext i32 %1661 to i64
  %1663 = getelementptr inbounds i8, ptr %974, i64 %1662
  %1664 = load i8, ptr %1663, align 1, !tbaa !59
  %1665 = sext i8 %1664 to i32
  switch i32 %1665, label %1677 [
    i32 0, label %1670
    i32 1, label %1668
    i32 2, label %1666
  ]

1666:                                             ; preds = %1650
  %1667 = getelementptr inbounds i16, ptr %1651, i64 1
  br label %1672

1668:                                             ; preds = %1650
  %1669 = getelementptr inbounds i16, ptr %1652, i64 1
  br label %1672

1670:                                             ; preds = %1650
  %1671 = getelementptr inbounds i16, ptr %1653, i64 1
  br label %1672

1672:                                             ; preds = %1670, %1668, %1666
  %1673 = phi ptr [ %1651, %1666 ], [ %1652, %1668 ], [ %1653, %1670 ]
  %1674 = phi ptr [ %1667, %1666 ], [ %1651, %1668 ], [ %1651, %1670 ]
  %1675 = phi ptr [ %1652, %1666 ], [ %1669, %1668 ], [ %1652, %1670 ]
  %1676 = phi ptr [ %1653, %1666 ], [ %1653, %1668 ], [ %1671, %1670 ]
  store i16 %1656, ptr %1673, align 2, !tbaa !45
  br label %1677

1677:                                             ; preds = %1672, %1650
  %1678 = phi ptr [ %1651, %1650 ], [ %1674, %1672 ]
  %1679 = phi ptr [ %1652, %1650 ], [ %1675, %1672 ]
  %1680 = phi ptr [ %1653, %1650 ], [ %1676, %1672 ]
  %1681 = add nuw nsw i64 %1623, 2
  %1682 = add i64 %1627, 2
  %1683 = icmp eq i64 %1682, %1621
  br i1 %1683, label %1684, label %1622

1684:                                             ; preds = %1677, %1616
  %1685 = phi ptr [ undef, %1616 ], [ %1678, %1677 ]
  %1686 = phi ptr [ undef, %1616 ], [ %1679, %1677 ]
  %1687 = phi ptr [ undef, %1616 ], [ %1680, %1677 ]
  %1688 = phi i64 [ 0, %1616 ], [ %1681, %1677 ]
  %1689 = phi ptr [ %1598, %1616 ], [ %1680, %1677 ]
  %1690 = phi ptr [ %333, %1616 ], [ %1679, %1677 ]
  %1691 = phi ptr [ %379, %1616 ], [ %1678, %1677 ]
  %1692 = icmp eq i64 %1618, 0
  br i1 %1692, label %1716, label %1693

1693:                                             ; preds = %1684
  %1694 = getelementptr inbounds i16, ptr %471, i64 %1688
  %1695 = load i16, ptr %1694, align 2, !tbaa !45
  %1696 = zext i16 %1695 to i64
  %1697 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1696
  %1698 = load i32, ptr %1697, align 4
  %1699 = shl i32 %1698, 2
  %1700 = ashr exact i32 %1699, 2
  %1701 = sext i32 %1700 to i64
  %1702 = getelementptr inbounds i8, ptr %974, i64 %1701
  %1703 = load i8, ptr %1702, align 1, !tbaa !59
  %1704 = sext i8 %1703 to i32
  switch i32 %1704, label %1716 [
    i32 0, label %1709
    i32 1, label %1707
    i32 2, label %1705
  ]

1705:                                             ; preds = %1693
  %1706 = getelementptr inbounds i16, ptr %1691, i64 1
  br label %1711

1707:                                             ; preds = %1693
  %1708 = getelementptr inbounds i16, ptr %1690, i64 1
  br label %1711

1709:                                             ; preds = %1693
  %1710 = getelementptr inbounds i16, ptr %1689, i64 1
  br label %1711

1711:                                             ; preds = %1709, %1707, %1705
  %1712 = phi ptr [ %1691, %1705 ], [ %1690, %1707 ], [ %1689, %1709 ]
  %1713 = phi ptr [ %1706, %1705 ], [ %1691, %1707 ], [ %1691, %1709 ]
  %1714 = phi ptr [ %1690, %1705 ], [ %1708, %1707 ], [ %1690, %1709 ]
  %1715 = phi ptr [ %1689, %1705 ], [ %1689, %1707 ], [ %1710, %1709 ]
  store i16 %1695, ptr %1712, align 2, !tbaa !45
  br label %1716

1716:                                             ; preds = %1684, %1711, %1693, %1605
  %1717 = phi ptr [ %379, %1605 ], [ %1685, %1684 ], [ %1691, %1693 ], [ %1713, %1711 ]
  %1718 = phi ptr [ %333, %1605 ], [ %1686, %1684 ], [ %1690, %1693 ], [ %1714, %1711 ]
  %1719 = phi ptr [ %1598, %1605 ], [ %1687, %1684 ], [ %1689, %1693 ], [ %1715, %1711 ]
  %1720 = ptrtoint ptr %1719 to i64
  %1721 = ptrtoint ptr %1205 to i64
  %1722 = sub i64 %1720, %1721
  %1723 = lshr exact i64 %1722, 1
  %1724 = trunc i64 %1723 to i32
  %1725 = icmp eq i32 %1724, 0
  %1726 = shl i64 %1722, 31
  br i1 %1725, label %1732, label %1727

1727:                                             ; preds = %1716
  %1728 = add i64 %1726, -4294967296
  %1729 = ashr i64 %1728, 32
  %1730 = getelementptr inbounds i16, ptr %1205, i64 %1729
  %1731 = load i16, ptr %1730, align 2, !tbaa !45
  br label %1732

1732:                                             ; preds = %1716, %1727
  %1733 = phi i16 [ %1731, %1727 ], [ -1, %1716 ]
  %1734 = ashr i64 %1726, 32
  %1735 = getelementptr inbounds i16, ptr %1205, i64 %1734
  store i16 %1733, ptr %1735, align 2, !tbaa !45
  %1736 = trunc i64 %1723 to i16
  %1737 = add i16 %1736, 1
  %1738 = sext i32 %1607 to i64
  %1739 = getelementptr inbounds i16, ptr %1201, i64 %1738
  store i16 %1737, ptr %1739, align 2, !tbaa !45
  %1740 = add i32 %1607, 2
  %1741 = add i32 %1740, %1724
  %1742 = ptrtoint ptr %1718 to i64
  %1743 = sub i64 %1742, %669
  %1744 = lshr exact i64 %1743, 1
  %1745 = trunc i64 %1744 to i32
  %1746 = add nsw i32 %1741, 1
  %1747 = sext i32 %1746 to i64
  %1748 = getelementptr i16, ptr %1201, i64 %1747
  %1749 = icmp sgt i32 %1745, 0
  br i1 %1749, label %1750, label %1840

1750:                                             ; preds = %1732
  %1751 = and i64 %1744, 4294967295
  %1752 = icmp ult i64 %1751, 8
  br i1 %1752, label %1796, label %1753

1753:                                             ; preds = %1750
  %1754 = shl nsw i64 %1747, 1
  %1755 = add i64 %1754, %1202
  %1756 = sub i64 %1755, %669
  %1757 = icmp ult i64 %1756, 128
  br i1 %1757, label %1796, label %1758

1758:                                             ; preds = %1753
  %1759 = icmp ult i64 %1751, 64
  br i1 %1759, label %1783, label %1760

1760:                                             ; preds = %1758
  %1761 = and i64 %1744, 63
  %1762 = sub nsw i64 %1751, %1761
  br label %1763

1763:                                             ; preds = %1763, %1760
  %1764 = phi i64 [ 0, %1760 ], [ %1777, %1763 ]
  %1765 = getelementptr inbounds i16, ptr %333, i64 %1764
  %1766 = load <16 x i16>, ptr %1765, align 2, !tbaa !45
  %1767 = getelementptr inbounds i16, ptr %1765, i64 16
  %1768 = load <16 x i16>, ptr %1767, align 2, !tbaa !45
  %1769 = getelementptr inbounds i16, ptr %1765, i64 32
  %1770 = load <16 x i16>, ptr %1769, align 2, !tbaa !45
  %1771 = getelementptr inbounds i16, ptr %1765, i64 48
  %1772 = load <16 x i16>, ptr %1771, align 2, !tbaa !45
  %1773 = getelementptr inbounds i16, ptr %1748, i64 %1764
  store <16 x i16> %1766, ptr %1773, align 2, !tbaa !45
  %1774 = getelementptr inbounds i16, ptr %1773, i64 16
  store <16 x i16> %1768, ptr %1774, align 2, !tbaa !45
  %1775 = getelementptr inbounds i16, ptr %1773, i64 32
  store <16 x i16> %1770, ptr %1775, align 2, !tbaa !45
  %1776 = getelementptr inbounds i16, ptr %1773, i64 48
  store <16 x i16> %1772, ptr %1776, align 2, !tbaa !45
  %1777 = add nuw i64 %1764, 64
  %1778 = icmp eq i64 %1777, %1762
  br i1 %1778, label %1779, label %1763, !llvm.loop !142

1779:                                             ; preds = %1763
  %1780 = icmp eq i64 %1761, 0
  br i1 %1780, label %1834, label %1781

1781:                                             ; preds = %1779
  %1782 = icmp ult i64 %1761, 8
  br i1 %1782, label %1796, label %1783

1783:                                             ; preds = %1758, %1781
  %1784 = phi i64 [ %1762, %1781 ], [ 0, %1758 ]
  %1785 = and i64 %1744, 7
  %1786 = sub nsw i64 %1751, %1785
  br label %1787

1787:                                             ; preds = %1787, %1783
  %1788 = phi i64 [ %1784, %1783 ], [ %1792, %1787 ]
  %1789 = getelementptr inbounds i16, ptr %333, i64 %1788
  %1790 = load <8 x i16>, ptr %1789, align 2, !tbaa !45
  %1791 = getelementptr inbounds i16, ptr %1748, i64 %1788
  store <8 x i16> %1790, ptr %1791, align 2, !tbaa !45
  %1792 = add nuw i64 %1788, 8
  %1793 = icmp eq i64 %1792, %1786
  br i1 %1793, label %1794, label %1787, !llvm.loop !143

1794:                                             ; preds = %1787
  %1795 = icmp eq i64 %1785, 0
  br i1 %1795, label %1834, label %1796

1796:                                             ; preds = %1753, %1750, %1781, %1794
  %1797 = phi i64 [ 0, %1750 ], [ 0, %1753 ], [ %1762, %1781 ], [ %1786, %1794 ]
  %1798 = sub i64 %1744, %1797
  %1799 = xor i64 %1797, -1
  %1800 = add nsw i64 %1751, %1799
  %1801 = and i64 %1798, 3
  %1802 = icmp eq i64 %1801, 0
  br i1 %1802, label %1812, label %1803

1803:                                             ; preds = %1796, %1803
  %1804 = phi i64 [ %1809, %1803 ], [ %1797, %1796 ]
  %1805 = phi i64 [ %1810, %1803 ], [ 0, %1796 ]
  %1806 = getelementptr inbounds i16, ptr %333, i64 %1804
  %1807 = load i16, ptr %1806, align 2, !tbaa !45
  %1808 = getelementptr inbounds i16, ptr %1748, i64 %1804
  store i16 %1807, ptr %1808, align 2, !tbaa !45
  %1809 = add nuw nsw i64 %1804, 1
  %1810 = add i64 %1805, 1
  %1811 = icmp eq i64 %1810, %1801
  br i1 %1811, label %1812, label %1803, !llvm.loop !144

1812:                                             ; preds = %1803, %1796
  %1813 = phi i64 [ %1797, %1796 ], [ %1809, %1803 ]
  %1814 = icmp ult i64 %1800, 3
  br i1 %1814, label %1834, label %1815

1815:                                             ; preds = %1812, %1815
  %1816 = phi i64 [ %1832, %1815 ], [ %1813, %1812 ]
  %1817 = getelementptr inbounds i16, ptr %333, i64 %1816
  %1818 = load i16, ptr %1817, align 2, !tbaa !45
  %1819 = getelementptr inbounds i16, ptr %1748, i64 %1816
  store i16 %1818, ptr %1819, align 2, !tbaa !45
  %1820 = add nuw nsw i64 %1816, 1
  %1821 = getelementptr inbounds i16, ptr %333, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !45
  %1823 = getelementptr inbounds i16, ptr %1748, i64 %1820
  store i16 %1822, ptr %1823, align 2, !tbaa !45
  %1824 = add nuw nsw i64 %1816, 2
  %1825 = getelementptr inbounds i16, ptr %333, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !45
  %1827 = getelementptr inbounds i16, ptr %1748, i64 %1824
  store i16 %1826, ptr %1827, align 2, !tbaa !45
  %1828 = add nuw nsw i64 %1816, 3
  %1829 = getelementptr inbounds i16, ptr %333, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !45
  %1831 = getelementptr inbounds i16, ptr %1748, i64 %1828
  store i16 %1830, ptr %1831, align 2, !tbaa !45
  %1832 = add nuw nsw i64 %1816, 4
  %1833 = icmp eq i64 %1832, %1751
  br i1 %1833, label %1834, label %1815, !llvm.loop !145

1834:                                             ; preds = %1812, %1815, %1779, %1794
  %1835 = shl i64 %1743, 31
  %1836 = add i64 %1835, -4294967296
  %1837 = ashr i64 %1836, 32
  %1838 = getelementptr inbounds i16, ptr %1748, i64 %1837
  %1839 = load i16, ptr %1838, align 2, !tbaa !45
  br label %1840

1840:                                             ; preds = %1732, %1834
  %1841 = phi i64 [ %1744, %1834 ], [ 0, %1732 ]
  %1842 = phi i16 [ %1839, %1834 ], [ -1, %1732 ]
  %1843 = and i64 %1841, 4294967295
  %1844 = getelementptr inbounds i16, ptr %1748, i64 %1843
  store i16 %1842, ptr %1844, align 2, !tbaa !45
  %1845 = trunc i64 %1744 to i16
  %1846 = add i16 %1845, 1
  %1847 = sext i32 %1741 to i64
  %1848 = getelementptr inbounds i16, ptr %1201, i64 %1847
  store i16 %1846, ptr %1848, align 2, !tbaa !45
  %1849 = add nsw i32 %1745, 2
  %1850 = add nsw i32 %1849, %1741
  %1851 = ptrtoint ptr %1717 to i64
  %1852 = sub i64 %1851, %670
  %1853 = lshr exact i64 %1852, 1
  %1854 = trunc i64 %1853 to i32
  %1855 = add nsw i32 %1850, 1
  %1856 = sext i32 %1855 to i64
  %1857 = getelementptr i16, ptr %1201, i64 %1856
  %1858 = icmp sgt i32 %1854, 0
  br i1 %1858, label %1859, label %1949

1859:                                             ; preds = %1840
  %1860 = and i64 %1853, 4294967295
  %1861 = icmp ult i64 %1860, 8
  br i1 %1861, label %1905, label %1862

1862:                                             ; preds = %1859
  %1863 = shl nsw i64 %1856, 1
  %1864 = add i64 %1863, %1202
  %1865 = sub i64 %1864, %670
  %1866 = icmp ult i64 %1865, 128
  br i1 %1866, label %1905, label %1867

1867:                                             ; preds = %1862
  %1868 = icmp ult i64 %1860, 64
  br i1 %1868, label %1892, label %1869

1869:                                             ; preds = %1867
  %1870 = and i64 %1853, 63
  %1871 = sub nsw i64 %1860, %1870
  br label %1872

1872:                                             ; preds = %1872, %1869
  %1873 = phi i64 [ 0, %1869 ], [ %1886, %1872 ]
  %1874 = getelementptr inbounds i16, ptr %379, i64 %1873
  %1875 = load <16 x i16>, ptr %1874, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1874, i64 16
  %1877 = load <16 x i16>, ptr %1876, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1874, i64 32
  %1879 = load <16 x i16>, ptr %1878, align 2, !tbaa !45
  %1880 = getelementptr inbounds i16, ptr %1874, i64 48
  %1881 = load <16 x i16>, ptr %1880, align 2, !tbaa !45
  %1882 = getelementptr inbounds i16, ptr %1857, i64 %1873
  store <16 x i16> %1875, ptr %1882, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1882, i64 16
  store <16 x i16> %1877, ptr %1883, align 2, !tbaa !45
  %1884 = getelementptr inbounds i16, ptr %1882, i64 32
  store <16 x i16> %1879, ptr %1884, align 2, !tbaa !45
  %1885 = getelementptr inbounds i16, ptr %1882, i64 48
  store <16 x i16> %1881, ptr %1885, align 2, !tbaa !45
  %1886 = add nuw i64 %1873, 64
  %1887 = icmp eq i64 %1886, %1871
  br i1 %1887, label %1888, label %1872, !llvm.loop !146

1888:                                             ; preds = %1872
  %1889 = icmp eq i64 %1870, 0
  br i1 %1889, label %1943, label %1890

1890:                                             ; preds = %1888
  %1891 = icmp ult i64 %1870, 8
  br i1 %1891, label %1905, label %1892

1892:                                             ; preds = %1867, %1890
  %1893 = phi i64 [ %1871, %1890 ], [ 0, %1867 ]
  %1894 = and i64 %1853, 7
  %1895 = sub nsw i64 %1860, %1894
  br label %1896

1896:                                             ; preds = %1896, %1892
  %1897 = phi i64 [ %1893, %1892 ], [ %1901, %1896 ]
  %1898 = getelementptr inbounds i16, ptr %379, i64 %1897
  %1899 = load <8 x i16>, ptr %1898, align 2, !tbaa !45
  %1900 = getelementptr inbounds i16, ptr %1857, i64 %1897
  store <8 x i16> %1899, ptr %1900, align 2, !tbaa !45
  %1901 = add nuw i64 %1897, 8
  %1902 = icmp eq i64 %1901, %1895
  br i1 %1902, label %1903, label %1896, !llvm.loop !147

1903:                                             ; preds = %1896
  %1904 = icmp eq i64 %1894, 0
  br i1 %1904, label %1943, label %1905

1905:                                             ; preds = %1862, %1859, %1890, %1903
  %1906 = phi i64 [ 0, %1859 ], [ 0, %1862 ], [ %1871, %1890 ], [ %1895, %1903 ]
  %1907 = sub i64 %1853, %1906
  %1908 = xor i64 %1906, -1
  %1909 = add nsw i64 %1860, %1908
  %1910 = and i64 %1907, 3
  %1911 = icmp eq i64 %1910, 0
  br i1 %1911, label %1921, label %1912

1912:                                             ; preds = %1905, %1912
  %1913 = phi i64 [ %1918, %1912 ], [ %1906, %1905 ]
  %1914 = phi i64 [ %1919, %1912 ], [ 0, %1905 ]
  %1915 = getelementptr inbounds i16, ptr %379, i64 %1913
  %1916 = load i16, ptr %1915, align 2, !tbaa !45
  %1917 = getelementptr inbounds i16, ptr %1857, i64 %1913
  store i16 %1916, ptr %1917, align 2, !tbaa !45
  %1918 = add nuw nsw i64 %1913, 1
  %1919 = add i64 %1914, 1
  %1920 = icmp eq i64 %1919, %1910
  br i1 %1920, label %1921, label %1912, !llvm.loop !148

1921:                                             ; preds = %1912, %1905
  %1922 = phi i64 [ %1906, %1905 ], [ %1918, %1912 ]
  %1923 = icmp ult i64 %1909, 3
  br i1 %1923, label %1943, label %1924

1924:                                             ; preds = %1921, %1924
  %1925 = phi i64 [ %1941, %1924 ], [ %1922, %1921 ]
  %1926 = getelementptr inbounds i16, ptr %379, i64 %1925
  %1927 = load i16, ptr %1926, align 2, !tbaa !45
  %1928 = getelementptr inbounds i16, ptr %1857, i64 %1925
  store i16 %1927, ptr %1928, align 2, !tbaa !45
  %1929 = add nuw nsw i64 %1925, 1
  %1930 = getelementptr inbounds i16, ptr %379, i64 %1929
  %1931 = load i16, ptr %1930, align 2, !tbaa !45
  %1932 = getelementptr inbounds i16, ptr %1857, i64 %1929
  store i16 %1931, ptr %1932, align 2, !tbaa !45
  %1933 = add nuw nsw i64 %1925, 2
  %1934 = getelementptr inbounds i16, ptr %379, i64 %1933
  %1935 = load i16, ptr %1934, align 2, !tbaa !45
  %1936 = getelementptr inbounds i16, ptr %1857, i64 %1933
  store i16 %1935, ptr %1936, align 2, !tbaa !45
  %1937 = add nuw nsw i64 %1925, 3
  %1938 = getelementptr inbounds i16, ptr %379, i64 %1937
  %1939 = load i16, ptr %1938, align 2, !tbaa !45
  %1940 = getelementptr inbounds i16, ptr %1857, i64 %1937
  store i16 %1939, ptr %1940, align 2, !tbaa !45
  %1941 = add nuw nsw i64 %1925, 4
  %1942 = icmp eq i64 %1941, %1860
  br i1 %1942, label %1943, label %1924, !llvm.loop !149

1943:                                             ; preds = %1921, %1924, %1888, %1903
  %1944 = shl i64 %1852, 31
  %1945 = add i64 %1944, -4294967296
  %1946 = ashr i64 %1945, 32
  %1947 = getelementptr inbounds i16, ptr %1857, i64 %1946
  %1948 = load i16, ptr %1947, align 2, !tbaa !45
  br label %1949

1949:                                             ; preds = %1840, %1943
  %1950 = phi i64 [ %1853, %1943 ], [ 0, %1840 ]
  %1951 = phi i16 [ %1948, %1943 ], [ -1, %1840 ]
  %1952 = and i64 %1950, 4294967295
  %1953 = getelementptr inbounds i16, ptr %1857, i64 %1952
  store i16 %1951, ptr %1953, align 2, !tbaa !45
  %1954 = trunc i64 %1853 to i16
  %1955 = add i16 %1954, 1
  %1956 = sext i32 %1850 to i64
  %1957 = getelementptr inbounds i16, ptr %1201, i64 %1956
  store i16 %1955, ptr %1957, align 2, !tbaa !45
  %1958 = add i32 %1854, 3
  %1959 = add i32 %1958, %1850
  %1960 = select i1 %146, i32 1, i32 %1959
  store i32 %1960, ptr %17, align 8, !tbaa !19
  br label %1991

1961:                                             ; preds = %708
  %1962 = load ptr, ptr %12, align 8, !tbaa !47
  %1963 = load i32, ptr %17, align 8, !tbaa !19
  %1964 = add i32 %1963, 1
  %1965 = sext i32 %1964 to i64
  %1966 = getelementptr inbounds i16, ptr %1962, i64 %1965
  %1967 = sext i32 %1963 to i64
  %1968 = getelementptr inbounds i16, ptr %1962, i64 %1967
  %1969 = load i16, ptr %1968, align 2, !tbaa !45
  %1970 = zext i16 %1969 to i32
  %1971 = add i32 %1964, %1970
  %1972 = add nsw i32 %1970, -1
  %1973 = add i32 %1971, 1
  %1974 = sext i32 %1973 to i64
  %1975 = getelementptr inbounds i16, ptr %1962, i64 %1974
  %1976 = sext i32 %1971 to i64
  %1977 = getelementptr inbounds i16, ptr %1962, i64 %1976
  %1978 = load i16, ptr %1977, align 2, !tbaa !45
  %1979 = zext i16 %1978 to i32
  %1980 = add i32 %1973, %1979
  %1981 = add nsw i32 %1979, -1
  %1982 = add i32 %1980, 1
  %1983 = sext i32 %1982 to i64
  %1984 = getelementptr inbounds i16, ptr %1962, i64 %1983
  %1985 = sext i32 %1980 to i64
  %1986 = getelementptr inbounds i16, ptr %1962, i64 %1985
  %1987 = load i16, ptr %1986, align 2, !tbaa !45
  %1988 = zext i16 %1987 to i32
  %1989 = add i32 %1982, %1988
  store i32 %1989, ptr %17, align 8, !tbaa !19
  %1990 = add nsw i32 %1988, -1
  br label %1991

1991:                                             ; preds = %1949, %1961
  %1992 = phi i32 [ %1981, %1961 ], [ %1745, %1949 ]
  %1993 = phi ptr [ %1984, %1961 ], [ %1857, %1949 ]
  %1994 = phi i32 [ %1990, %1961 ], [ %1854, %1949 ]
  %1995 = phi ptr [ %1975, %1961 ], [ %1748, %1949 ]
  %1996 = phi i32 [ %1972, %1961 ], [ %1724, %1949 ]
  %1997 = phi ptr [ %1966, %1961 ], [ %1205, %1949 ]
  %1998 = phi i32 [ %687, %1961 ], [ %1166, %1949 ]
  %1999 = phi ptr [ %686, %1961 ], [ %975, %1949 ]
  %2000 = phi ptr [ %685, %1961 ], [ %976, %1949 ]
  %2001 = phi ptr [ %684, %1961 ], [ %977, %1949 ]
  %2002 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %2003 = icmp eq i32 %2002, 0
  %2004 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2005 = icmp ne i32 %2004, 0
  %2006 = select i1 %2003, i1 true, i1 %2005
  br i1 %2006, label %2011, label %2007

2007:                                             ; preds = %1991
  %2008 = load i8, ptr %715, align 2, !tbaa !52
  %2009 = icmp eq i8 %2008, 1
  %2010 = select i1 %2009, double 1.000000e+00, double -1.000000e+00
  br label %2011

2011:                                             ; preds = %1991, %2007
  %2012 = phi double [ %2010, %2007 ], [ 0.000000e+00, %1991 ]
  %2013 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %693, i32 1
  %2014 = load float, ptr %2013, align 8, !tbaa !81
  %2015 = fpext float %2014 to double
  %2016 = fmul double %2015, 0x4074C104816F0069
  %2017 = fmul double %32, %2016
  %2018 = fmul double %28, %2017
  %2019 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %693, i32 2
  %2020 = load i16, ptr %2019, align 4, !tbaa !82
  %2021 = sext i16 %2020 to i32
  %2022 = load ptr, ptr %671, align 8, !tbaa !83
  %2023 = load i32, ptr %672, align 8, !tbaa !85
  %2024 = shl nsw i32 %2021, 1
  %2025 = mul i32 %2024, %2023
  %2026 = zext i32 %2025 to i64
  %2027 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2022, i64 %2026
  %2028 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2029 = extractelement <2 x double> %711, i64 0
  %2030 = extractelement <2 x double> %711, i64 1
  %2031 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2028, double noundef %2029, double noundef %2030, double noundef %714, ptr noundef %45, ptr noundef nonnull %1997, i32 noundef %1996, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2032 = icmp sgt i32 %2031, 0
  br i1 %2032, label %2033, label %2246

2033:                                             ; preds = %2011
  %2034 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2035 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2036 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2037 = mul nsw i32 %2036, %717
  %2038 = mul i32 %2035, 3
  %2039 = mul nsw i32 %729, 3
  %2040 = sext i32 %2039 to i64
  %2041 = add nsw i32 %2039, 1
  %2042 = sext i32 %2041 to i64
  %2043 = add nsw i32 %2039, 2
  %2044 = sext i32 %2043 to i64
  %2045 = zext i32 %2031 to i64
  br label %2046

2046:                                             ; preds = %2033, %2046
  %2047 = phi i64 [ 0, %2033 ], [ %2244, %2046 ]
  %2048 = phi double [ 0.000000e+00, %2033 ], [ %2189, %2046 ]
  %2049 = phi <2 x double> [ %689, %2033 ], [ %2181, %2046 ]
  %2050 = phi <2 x double> [ %690, %2033 ], [ %2174, %2046 ]
  %2051 = phi <2 x double> [ %691, %2033 ], [ %2187, %2046 ]
  %2052 = phi <2 x double> [ zeroinitializer, %2033 ], [ %2183, %2046 ]
  %2053 = phi <2 x double> [ %692, %2033 ], [ %2153, %2046 ]
  %2054 = shl nuw nsw i64 %2047, 1
  %2055 = getelementptr inbounds i32, ptr %145, i64 %2054
  %2056 = load i32, ptr %2055, align 4, !tbaa !5
  %2057 = ashr i32 %2056, 14
  %2058 = add nsw i32 %2057, %38
  %2059 = getelementptr inbounds i16, ptr %98, i64 %2047
  %2060 = load i16, ptr %2059, align 2, !tbaa !45
  %2061 = zext i16 %2060 to i64
  %2062 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2061
  %2063 = getelementptr inbounds double, ptr %144, i64 %2047
  %2064 = load double, ptr %2063, align 8, !tbaa !15
  %2065 = sext i32 %2058 to i64
  %2066 = getelementptr inbounds double, ptr %2034, i64 %2065
  %2067 = load double, ptr %2066, align 8, !tbaa !15
  %2068 = fsub double %2064, %2067
  %2069 = shl nsw i32 %2058, 4
  %2070 = sext i32 %2069 to i64
  %2071 = getelementptr inbounds double, ptr %31, i64 %2070
  %2072 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2061, i32 2
  %2073 = load i16, ptr %2072, align 4, !tbaa !82
  %2074 = sext i16 %2073 to i32
  %2075 = shl nsw i32 %2074, 1
  %2076 = sext i32 %2075 to i64
  %2077 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2027, i64 %2076
  %2078 = getelementptr inbounds %class.Vector, ptr %652, i64 %2061
  %2079 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2061, i32 1
  %2080 = load float, ptr %2079, align 8, !tbaa !81
  %2081 = fpext float %2080 to double
  %2082 = fmul double %2018, %2081
  %2083 = load <2 x double>, ptr %2062, align 8, !tbaa !15
  %2084 = fsub <2 x double> %711, %2083
  %2085 = getelementptr inbounds %class.Vector, ptr %2062, i64 0, i32 2
  %2086 = load double, ptr %2085, align 8, !tbaa !50
  %2087 = fsub double %714, %2086
  %2088 = load double, ptr %2077, align 8, !tbaa !86
  %2089 = fmul double %32, %2088
  %2090 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2027, i64 %2076, i32 1
  %2091 = load double, ptr %2090, align 8, !tbaa !88
  %2092 = load double, ptr %2071, align 8, !tbaa !15
  %2093 = getelementptr inbounds double, ptr %2071, i64 2
  %2094 = load double, ptr %2093, align 8, !tbaa !15
  %2095 = fmul double %2091, %673
  %2096 = fmul double %2095, %2094
  %2097 = tail call double @llvm.fmuladd.f64(double %2089, double %2092, double %2096)
  %2098 = getelementptr inbounds double, ptr %2071, i64 1
  %2099 = load double, ptr %2098, align 8, !tbaa !15
  %2100 = getelementptr inbounds double, ptr %2071, i64 3
  %2101 = load double, ptr %2100, align 8, !tbaa !15
  %2102 = fmul double %2095, %2101
  %2103 = tail call double @llvm.fmuladd.f64(double %2089, double %2099, double %2102)
  %2104 = getelementptr inbounds double, ptr %2071, i64 4
  %2105 = load double, ptr %2104, align 8, !tbaa !15
  %2106 = getelementptr inbounds double, ptr %2071, i64 6
  %2107 = load double, ptr %2106, align 8, !tbaa !15
  %2108 = fmul double %2095, %2107
  %2109 = tail call double @llvm.fmuladd.f64(double %2089, double %2105, double %2108)
  %2110 = getelementptr inbounds double, ptr %2071, i64 5
  %2111 = load double, ptr %2110, align 8, !tbaa !15
  %2112 = getelementptr inbounds double, ptr %2071, i64 7
  %2113 = load double, ptr %2112, align 8, !tbaa !15
  %2114 = fmul double %2095, %2113
  %2115 = tail call double @llvm.fmuladd.f64(double %2089, double %2111, double %2114)
  %2116 = tail call double @llvm.fmuladd.f64(double %2068, double %2097, double %2103)
  %2117 = tail call double @llvm.fmuladd.f64(double %2116, double %2068, double %2109)
  %2118 = fmul double %2012, %2117
  %2119 = load <2 x double>, ptr %674, align 8, !tbaa !15
  %2120 = insertelement <2 x double> poison, double %2118, i64 0
  %2121 = shufflevector <2 x double> %2120, <2 x double> poison, <2 x i32> zeroinitializer
  %2122 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2121, <2 x double> %2084, <2 x double> %2119)
  store <2 x double> %2122, ptr %674, align 8, !tbaa !15
  %2123 = load double, ptr %675, align 8, !tbaa !15
  %2124 = tail call double @llvm.fmuladd.f64(double %2118, double %2087, double %2123)
  store double %2124, ptr %675, align 8, !tbaa !15
  %2125 = getelementptr inbounds double, ptr %2071, i64 8
  %2126 = load double, ptr %2125, align 8, !tbaa !15
  %2127 = getelementptr inbounds double, ptr %2071, i64 9
  %2128 = load double, ptr %2127, align 8, !tbaa !15
  %2129 = getelementptr inbounds double, ptr %2071, i64 10
  %2130 = load double, ptr %2129, align 8, !tbaa !15
  %2131 = getelementptr inbounds double, ptr %2071, i64 11
  %2132 = load double, ptr %2131, align 8, !tbaa !15
  %2133 = fmul double %2082, %2126
  %2134 = fmul double %2082, %2128
  %2135 = fmul double %2082, %2130
  %2136 = fmul double %2082, %2132
  %2137 = insertelement <2 x double> poison, double %2068, i64 0
  %2138 = shufflevector <2 x double> %2137, <2 x double> poison, <2 x i32> zeroinitializer
  %2139 = insertelement <2 x double> poison, double %2097, i64 0
  %2140 = insertelement <2 x double> %2139, double %2133, i64 1
  %2141 = fmul <2 x double> %2138, %2140
  %2142 = insertelement <2 x double> poison, double %2103, i64 0
  %2143 = insertelement <2 x double> %2142, double %2134, i64 1
  %2144 = fmul <2 x double> %2143, <double 2.500000e-01, double 2.500000e-01>
  %2145 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2141, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2144)
  %2146 = insertelement <2 x double> poison, double %2109, i64 0
  %2147 = insertelement <2 x double> %2146, double %2135, i64 1
  %2148 = fmul <2 x double> %2147, <double 5.000000e-01, double 5.000000e-01>
  %2149 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2145, <2 x double> %2138, <2 x double> %2148)
  %2150 = insertelement <2 x double> poison, double %2115, i64 0
  %2151 = insertelement <2 x double> %2150, double %2136, i64 1
  %2152 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2149, <2 x double> %2138, <2 x double> %2151)
  %2153 = fsub <2 x double> %2053, %2152
  %2154 = tail call double @llvm.fmuladd.f64(double %2068, double %2133, double %2134)
  %2155 = tail call double @llvm.fmuladd.f64(double %2154, double %2068, double %2135)
  %2156 = fmul double %2012, %2155
  %2157 = load <2 x double>, ptr %676, align 8, !tbaa !15
  %2158 = insertelement <2 x double> poison, double %2156, i64 0
  %2159 = shufflevector <2 x double> %2158, <2 x double> poison, <2 x i32> zeroinitializer
  %2160 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2159, <2 x double> %2084, <2 x double> %2157)
  store <2 x double> %2160, ptr %676, align 8, !tbaa !15
  %2161 = load double, ptr %677, align 8, !tbaa !15
  %2162 = tail call double @llvm.fmuladd.f64(double %2156, double %2087, double %2161)
  store double %2162, ptr %677, align 8, !tbaa !15
  %2163 = fadd double %2097, %2133
  %2164 = fadd double %2103, %2134
  %2165 = fadd double %2109, %2135
  %2166 = tail call double @llvm.fmuladd.f64(double %2068, double %2163, double %2164)
  %2167 = tail call double @llvm.fmuladd.f64(double %2166, double %2068, double %2165)
  %2168 = extractelement <2 x double> %2084, i64 1
  %2169 = fmul double %2168, %2167
  %2170 = insertelement <2 x double> poison, double %2169, i64 0
  %2171 = shufflevector <2 x double> %2170, <2 x double> poison, <2 x i32> zeroinitializer
  %2172 = shufflevector <2 x double> %2084, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2173 = insertelement <2 x double> %2172, double %2087, i64 1
  %2174 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2171, <2 x double> %2173, <2 x double> %2050)
  %2175 = insertelement <2 x double> %2172, double %2087, i64 0
  %2176 = insertelement <2 x double> poison, double %2167, i64 0
  %2177 = shufflevector <2 x double> %2176, <2 x double> poison, <2 x i32> zeroinitializer
  %2178 = fmul <2 x double> %2175, %2177
  %2179 = shufflevector <2 x double> %2178, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2180 = shufflevector <2 x double> %2178, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2181 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2180, <2 x double> %2084, <2 x double> %2049)
  %2182 = insertelement <2 x double> %2179, double %2169, i64 1
  %2183 = fadd <2 x double> %2052, %2182
  %2184 = load <2 x double>, ptr %2078, align 8, !tbaa !15
  %2185 = fsub <2 x double> %2184, %2182
  store <2 x double> %2185, ptr %2078, align 8, !tbaa !15
  %2186 = shufflevector <2 x double> %2175, <2 x double> poison, <2 x i32> zeroinitializer
  %2187 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2178, <2 x double> %2186, <2 x double> %2051)
  %2188 = extractelement <2 x double> %2178, i64 0
  %2189 = fadd double %2048, %2188
  %2190 = getelementptr inbounds %class.Vector, ptr %652, i64 %2061, i32 2
  %2191 = load double, ptr %2190, align 8, !tbaa !89
  %2192 = fsub double %2191, %2188
  store double %2192, ptr %2190, align 8, !tbaa !89
  %2193 = load double, ptr %2085, align 8, !tbaa !50
  %2194 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2195 = fsub double %2193, %2194
  %2196 = fmul double %10, %2195
  %2197 = tail call double @llvm.floor.f64(double %2196)
  %2198 = fptosi double %2197 to i32
  %2199 = icmp slt i32 %2198, 0
  %2200 = select i1 %2199, i32 %2035, i32 0
  %2201 = icmp sgt i32 %2035, %2198
  %2202 = select i1 %2201, i32 0, i32 %2035
  %2203 = sub i32 %2198, %2202
  %2204 = add i32 %2203, %2200
  %2205 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2061, i32 3
  %2206 = load i8, ptr %2205, align 2, !tbaa !52
  %2207 = zext i8 %2206 to i32
  %2208 = shufflevector <2 x double> %2178, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2209 = fmul <2 x double> %2084, %2208
  %2210 = extractelement <2 x double> %2209, i64 0
  %2211 = fmul double %2168, %2169
  %2212 = fmul double %2087, %2188
  %2213 = add nsw i32 %2037, %2207
  %2214 = mul i32 %2038, %2213
  %2215 = sext i32 %2214 to i64
  %2216 = getelementptr inbounds double, ptr %8, i64 %2215
  %2217 = fmul double %2210, 5.000000e-01
  %2218 = fmul double %2211, 5.000000e-01
  %2219 = fmul double %2212, 5.000000e-01
  %2220 = getelementptr inbounds double, ptr %2216, i64 %2040
  %2221 = load double, ptr %2220, align 8, !tbaa !15
  %2222 = fadd double %2217, %2221
  store double %2222, ptr %2220, align 8, !tbaa !15
  %2223 = getelementptr inbounds double, ptr %2216, i64 %2042
  %2224 = load double, ptr %2223, align 8, !tbaa !15
  %2225 = fadd double %2218, %2224
  store double %2225, ptr %2223, align 8, !tbaa !15
  %2226 = getelementptr inbounds double, ptr %2216, i64 %2044
  %2227 = load double, ptr %2226, align 8, !tbaa !15
  %2228 = fadd double %2219, %2227
  store double %2228, ptr %2226, align 8, !tbaa !15
  %2229 = mul nsw i32 %2204, 3
  %2230 = sext i32 %2229 to i64
  %2231 = getelementptr inbounds double, ptr %2216, i64 %2230
  %2232 = load double, ptr %2231, align 8, !tbaa !15
  %2233 = fadd double %2217, %2232
  store double %2233, ptr %2231, align 8, !tbaa !15
  %2234 = add nsw i32 %2229, 1
  %2235 = sext i32 %2234 to i64
  %2236 = getelementptr inbounds double, ptr %2216, i64 %2235
  %2237 = load double, ptr %2236, align 8, !tbaa !15
  %2238 = fadd double %2218, %2237
  store double %2238, ptr %2236, align 8, !tbaa !15
  %2239 = add nsw i32 %2229, 2
  %2240 = sext i32 %2239 to i64
  %2241 = getelementptr inbounds double, ptr %2216, i64 %2240
  %2242 = load double, ptr %2241, align 8, !tbaa !15
  %2243 = fadd double %2219, %2242
  store double %2243, ptr %2241, align 8, !tbaa !15
  %2244 = add nuw nsw i64 %2047, 1
  %2245 = icmp eq i64 %2244, %2045
  br i1 %2245, label %2246, label %2046

2246:                                             ; preds = %2046, %2011
  %2247 = phi double [ 0.000000e+00, %2011 ], [ %2189, %2046 ]
  %2248 = phi <2 x double> [ %689, %2011 ], [ %2181, %2046 ]
  %2249 = phi <2 x double> [ %690, %2011 ], [ %2174, %2046 ]
  %2250 = phi <2 x double> [ %691, %2011 ], [ %2187, %2046 ]
  %2251 = phi <2 x double> [ zeroinitializer, %2011 ], [ %2183, %2046 ]
  %2252 = phi <2 x double> [ %692, %2011 ], [ %2153, %2046 ]
  %2253 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2254 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2253, double noundef %2029, double noundef %2030, double noundef %714, ptr noundef %45, ptr noundef %1993, i32 noundef %1994, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2255 = add nsw i32 %2254, %682
  %2256 = icmp sgt i32 %2254, 0
  br i1 %2256, label %2257, label %2483

2257:                                             ; preds = %2246
  %2258 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2259 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2260 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2261 = mul nsw i32 %2260, %717
  %2262 = mul i32 %2259, 3
  %2263 = mul nsw i32 %729, 3
  %2264 = sext i32 %2263 to i64
  %2265 = add nsw i32 %2263, 1
  %2266 = sext i32 %2265 to i64
  %2267 = add nsw i32 %2263, 2
  %2268 = sext i32 %2267 to i64
  %2269 = zext i32 %2254 to i64
  br label %2270

2270:                                             ; preds = %2257, %2270
  %2271 = phi i64 [ 0, %2257 ], [ %2481, %2270 ]
  %2272 = phi double [ %2247, %2257 ], [ %2426, %2270 ]
  %2273 = phi <2 x double> [ %2248, %2257 ], [ %2418, %2270 ]
  %2274 = phi <2 x double> [ %2249, %2257 ], [ %2411, %2270 ]
  %2275 = phi <2 x double> [ %2250, %2257 ], [ %2424, %2270 ]
  %2276 = phi <2 x double> [ %2251, %2257 ], [ %2420, %2270 ]
  %2277 = phi <2 x double> [ %2252, %2257 ], [ %2390, %2270 ]
  %2278 = shl nuw nsw i64 %2271, 1
  %2279 = getelementptr inbounds i32, ptr %145, i64 %2278
  %2280 = load i32, ptr %2279, align 4, !tbaa !5
  %2281 = ashr i32 %2280, 14
  %2282 = add nsw i32 %2281, %38
  %2283 = getelementptr inbounds i16, ptr %98, i64 %2271
  %2284 = load i16, ptr %2283, align 2, !tbaa !45
  %2285 = zext i16 %2284 to i64
  %2286 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2285
  %2287 = getelementptr inbounds double, ptr %144, i64 %2271
  %2288 = load double, ptr %2287, align 8, !tbaa !15
  %2289 = sext i32 %2282 to i64
  %2290 = getelementptr inbounds double, ptr %2258, i64 %2289
  %2291 = load double, ptr %2290, align 8, !tbaa !15
  %2292 = fsub double %2288, %2291
  %2293 = shl nsw i32 %2282, 4
  %2294 = sext i32 %2293 to i64
  %2295 = getelementptr inbounds double, ptr %31, i64 %2294
  %2296 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2285, i32 2
  %2297 = load i16, ptr %2296, align 4, !tbaa !82
  %2298 = sext i16 %2297 to i32
  %2299 = shl nsw i32 %2298, 1
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2027, i64 %2300
  %2302 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2301, i64 1
  %2303 = getelementptr inbounds %class.Vector, ptr %652, i64 %2285
  %2304 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2285, i32 1
  %2305 = load float, ptr %2304, align 8, !tbaa !81
  %2306 = fpext float %2305 to double
  %2307 = fmul double %2018, %2306
  %2308 = load <2 x double>, ptr %2286, align 8, !tbaa !15
  %2309 = fsub <2 x double> %711, %2308
  %2310 = getelementptr inbounds %class.Vector, ptr %2286, i64 0, i32 2
  %2311 = load double, ptr %2310, align 8, !tbaa !50
  %2312 = fsub double %714, %2311
  %2313 = load double, ptr %2302, align 8, !tbaa !86
  %2314 = fmul double %32, %2313
  %2315 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2301, i64 1, i32 1
  %2316 = load double, ptr %2315, align 8, !tbaa !88
  %2317 = load double, ptr %2295, align 8, !tbaa !15
  %2318 = getelementptr inbounds double, ptr %2295, i64 2
  %2319 = load double, ptr %2318, align 8, !tbaa !15
  %2320 = fmul double %2316, %673
  %2321 = fmul double %2320, %2319
  %2322 = tail call double @llvm.fmuladd.f64(double %2314, double %2317, double %2321)
  %2323 = getelementptr inbounds double, ptr %2295, i64 1
  %2324 = load double, ptr %2323, align 8, !tbaa !15
  %2325 = getelementptr inbounds double, ptr %2295, i64 3
  %2326 = load double, ptr %2325, align 8, !tbaa !15
  %2327 = fmul double %2320, %2326
  %2328 = tail call double @llvm.fmuladd.f64(double %2314, double %2324, double %2327)
  %2329 = getelementptr inbounds double, ptr %2295, i64 4
  %2330 = load double, ptr %2329, align 8, !tbaa !15
  %2331 = getelementptr inbounds double, ptr %2295, i64 6
  %2332 = load double, ptr %2331, align 8, !tbaa !15
  %2333 = fmul double %2320, %2332
  %2334 = tail call double @llvm.fmuladd.f64(double %2314, double %2330, double %2333)
  %2335 = getelementptr inbounds double, ptr %2295, i64 5
  %2336 = load double, ptr %2335, align 8, !tbaa !15
  %2337 = getelementptr inbounds double, ptr %2295, i64 7
  %2338 = load double, ptr %2337, align 8, !tbaa !15
  %2339 = fmul double %2320, %2338
  %2340 = tail call double @llvm.fmuladd.f64(double %2314, double %2336, double %2339)
  %2341 = tail call double @llvm.fmuladd.f64(double %2292, double %2322, double %2328)
  %2342 = tail call double @llvm.fmuladd.f64(double %2341, double %2292, double %2334)
  %2343 = fmul double %2012, %2342
  %2344 = load <2 x double>, ptr %674, align 8, !tbaa !15
  %2345 = insertelement <2 x double> poison, double %2343, i64 0
  %2346 = shufflevector <2 x double> %2345, <2 x double> poison, <2 x i32> zeroinitializer
  %2347 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2346, <2 x double> %2309, <2 x double> %2344)
  store <2 x double> %2347, ptr %674, align 8, !tbaa !15
  %2348 = load double, ptr %675, align 8, !tbaa !15
  %2349 = tail call double @llvm.fmuladd.f64(double %2343, double %2312, double %2348)
  store double %2349, ptr %675, align 8, !tbaa !15
  %2350 = getelementptr inbounds double, ptr %2295, i64 8
  %2351 = load double, ptr %2350, align 8, !tbaa !15
  %2352 = getelementptr inbounds double, ptr %2295, i64 9
  %2353 = load double, ptr %2352, align 8, !tbaa !15
  %2354 = getelementptr inbounds double, ptr %2295, i64 10
  %2355 = load double, ptr %2354, align 8, !tbaa !15
  %2356 = getelementptr inbounds double, ptr %2295, i64 11
  %2357 = load double, ptr %2356, align 8, !tbaa !15
  %2358 = getelementptr inbounds double, ptr %2295, i64 12
  %2359 = load double, ptr %2358, align 8, !tbaa !15
  %2360 = tail call double @llvm.fmuladd.f64(double %678, double %2359, double %2351)
  %2361 = getelementptr inbounds double, ptr %2295, i64 13
  %2362 = load double, ptr %2361, align 8, !tbaa !15
  %2363 = tail call double @llvm.fmuladd.f64(double %678, double %2362, double %2353)
  %2364 = getelementptr inbounds double, ptr %2295, i64 14
  %2365 = load double, ptr %2364, align 8, !tbaa !15
  %2366 = tail call double @llvm.fmuladd.f64(double %678, double %2365, double %2355)
  %2367 = getelementptr inbounds double, ptr %2295, i64 15
  %2368 = load double, ptr %2367, align 8, !tbaa !15
  %2369 = tail call double @llvm.fmuladd.f64(double %678, double %2368, double %2357)
  %2370 = fmul double %2307, %2360
  %2371 = fmul double %2307, %2363
  %2372 = fmul double %2307, %2366
  %2373 = fmul double %2307, %2369
  %2374 = insertelement <2 x double> poison, double %2292, i64 0
  %2375 = shufflevector <2 x double> %2374, <2 x double> poison, <2 x i32> zeroinitializer
  %2376 = insertelement <2 x double> poison, double %2322, i64 0
  %2377 = insertelement <2 x double> %2376, double %2370, i64 1
  %2378 = fmul <2 x double> %2375, %2377
  %2379 = insertelement <2 x double> poison, double %2328, i64 0
  %2380 = insertelement <2 x double> %2379, double %2371, i64 1
  %2381 = fmul <2 x double> %2380, <double 2.500000e-01, double 2.500000e-01>
  %2382 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2378, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2381)
  %2383 = insertelement <2 x double> poison, double %2334, i64 0
  %2384 = insertelement <2 x double> %2383, double %2372, i64 1
  %2385 = fmul <2 x double> %2384, <double 5.000000e-01, double 5.000000e-01>
  %2386 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2382, <2 x double> %2375, <2 x double> %2385)
  %2387 = insertelement <2 x double> poison, double %2340, i64 0
  %2388 = insertelement <2 x double> %2387, double %2373, i64 1
  %2389 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2386, <2 x double> %2375, <2 x double> %2388)
  %2390 = fsub <2 x double> %2277, %2389
  %2391 = tail call double @llvm.fmuladd.f64(double %2292, double %2370, double %2371)
  %2392 = tail call double @llvm.fmuladd.f64(double %2391, double %2292, double %2372)
  %2393 = fmul double %2012, %2392
  %2394 = load <2 x double>, ptr %676, align 8, !tbaa !15
  %2395 = insertelement <2 x double> poison, double %2393, i64 0
  %2396 = shufflevector <2 x double> %2395, <2 x double> poison, <2 x i32> zeroinitializer
  %2397 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2396, <2 x double> %2309, <2 x double> %2394)
  store <2 x double> %2397, ptr %676, align 8, !tbaa !15
  %2398 = load double, ptr %677, align 8, !tbaa !15
  %2399 = tail call double @llvm.fmuladd.f64(double %2393, double %2312, double %2398)
  store double %2399, ptr %677, align 8, !tbaa !15
  %2400 = fadd double %2322, %2370
  %2401 = fadd double %2328, %2371
  %2402 = fadd double %2334, %2372
  %2403 = tail call double @llvm.fmuladd.f64(double %2292, double %2400, double %2401)
  %2404 = tail call double @llvm.fmuladd.f64(double %2403, double %2292, double %2402)
  %2405 = extractelement <2 x double> %2309, i64 1
  %2406 = fmul double %2405, %2404
  %2407 = insertelement <2 x double> poison, double %2406, i64 0
  %2408 = shufflevector <2 x double> %2407, <2 x double> poison, <2 x i32> zeroinitializer
  %2409 = shufflevector <2 x double> %2309, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2410 = insertelement <2 x double> %2409, double %2312, i64 1
  %2411 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2408, <2 x double> %2410, <2 x double> %2274)
  %2412 = insertelement <2 x double> %2409, double %2312, i64 0
  %2413 = insertelement <2 x double> poison, double %2404, i64 0
  %2414 = shufflevector <2 x double> %2413, <2 x double> poison, <2 x i32> zeroinitializer
  %2415 = fmul <2 x double> %2412, %2414
  %2416 = shufflevector <2 x double> %2415, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2417 = shufflevector <2 x double> %2415, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2418 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2417, <2 x double> %2309, <2 x double> %2273)
  %2419 = insertelement <2 x double> %2416, double %2406, i64 1
  %2420 = fadd <2 x double> %2276, %2419
  %2421 = load <2 x double>, ptr %2303, align 8, !tbaa !15
  %2422 = fsub <2 x double> %2421, %2419
  store <2 x double> %2422, ptr %2303, align 8, !tbaa !15
  %2423 = shufflevector <2 x double> %2412, <2 x double> poison, <2 x i32> zeroinitializer
  %2424 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2415, <2 x double> %2423, <2 x double> %2275)
  %2425 = extractelement <2 x double> %2415, i64 0
  %2426 = fadd double %2272, %2425
  %2427 = getelementptr inbounds %class.Vector, ptr %652, i64 %2285, i32 2
  %2428 = load double, ptr %2427, align 8, !tbaa !89
  %2429 = fsub double %2428, %2425
  store double %2429, ptr %2427, align 8, !tbaa !89
  %2430 = load double, ptr %2310, align 8, !tbaa !50
  %2431 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2432 = fsub double %2430, %2431
  %2433 = fmul double %10, %2432
  %2434 = tail call double @llvm.floor.f64(double %2433)
  %2435 = fptosi double %2434 to i32
  %2436 = icmp slt i32 %2435, 0
  %2437 = select i1 %2436, i32 %2259, i32 0
  %2438 = icmp sgt i32 %2259, %2435
  %2439 = select i1 %2438, i32 0, i32 %2259
  %2440 = sub i32 %2435, %2439
  %2441 = add i32 %2440, %2437
  %2442 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2285, i32 3
  %2443 = load i8, ptr %2442, align 2, !tbaa !52
  %2444 = zext i8 %2443 to i32
  %2445 = shufflevector <2 x double> %2415, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2446 = fmul <2 x double> %2309, %2445
  %2447 = extractelement <2 x double> %2446, i64 0
  %2448 = fmul double %2405, %2406
  %2449 = fmul double %2312, %2425
  %2450 = add nsw i32 %2261, %2444
  %2451 = mul i32 %2262, %2450
  %2452 = sext i32 %2451 to i64
  %2453 = getelementptr inbounds double, ptr %8, i64 %2452
  %2454 = fmul double %2447, 5.000000e-01
  %2455 = fmul double %2448, 5.000000e-01
  %2456 = fmul double %2449, 5.000000e-01
  %2457 = getelementptr inbounds double, ptr %2453, i64 %2264
  %2458 = load double, ptr %2457, align 8, !tbaa !15
  %2459 = fadd double %2454, %2458
  store double %2459, ptr %2457, align 8, !tbaa !15
  %2460 = getelementptr inbounds double, ptr %2453, i64 %2266
  %2461 = load double, ptr %2460, align 8, !tbaa !15
  %2462 = fadd double %2455, %2461
  store double %2462, ptr %2460, align 8, !tbaa !15
  %2463 = getelementptr inbounds double, ptr %2453, i64 %2268
  %2464 = load double, ptr %2463, align 8, !tbaa !15
  %2465 = fadd double %2456, %2464
  store double %2465, ptr %2463, align 8, !tbaa !15
  %2466 = mul nsw i32 %2441, 3
  %2467 = sext i32 %2466 to i64
  %2468 = getelementptr inbounds double, ptr %2453, i64 %2467
  %2469 = load double, ptr %2468, align 8, !tbaa !15
  %2470 = fadd double %2454, %2469
  store double %2470, ptr %2468, align 8, !tbaa !15
  %2471 = add nsw i32 %2466, 1
  %2472 = sext i32 %2471 to i64
  %2473 = getelementptr inbounds double, ptr %2453, i64 %2472
  %2474 = load double, ptr %2473, align 8, !tbaa !15
  %2475 = fadd double %2455, %2474
  store double %2475, ptr %2473, align 8, !tbaa !15
  %2476 = add nsw i32 %2466, 2
  %2477 = sext i32 %2476 to i64
  %2478 = getelementptr inbounds double, ptr %2453, i64 %2477
  %2479 = load double, ptr %2478, align 8, !tbaa !15
  %2480 = fadd double %2456, %2479
  store double %2480, ptr %2478, align 8, !tbaa !15
  %2481 = add nuw nsw i64 %2271, 1
  %2482 = icmp eq i64 %2481, %2269
  br i1 %2482, label %2483, label %2270

2483:                                             ; preds = %2270, %2246
  %2484 = phi double [ %2247, %2246 ], [ %2426, %2270 ]
  %2485 = phi <2 x double> [ %2248, %2246 ], [ %2418, %2270 ]
  %2486 = phi <2 x double> [ %2249, %2246 ], [ %2411, %2270 ]
  %2487 = phi <2 x double> [ %2250, %2246 ], [ %2424, %2270 ]
  %2488 = phi <2 x double> [ %2251, %2246 ], [ %2420, %2270 ]
  %2489 = phi <2 x double> [ %2252, %2246 ], [ %2390, %2270 ]
  %2490 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2491 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2490, double noundef %2029, double noundef %2030, double noundef %714, ptr noundef %45, ptr noundef %1995, i32 noundef %1992, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2492 = add nsw i32 %2255, %2491
  %2493 = icmp sgt i32 %2491, 0
  %2494 = extractelement <2 x double> %2489, i64 1
  br i1 %2493, label %2495, label %2662

2495:                                             ; preds = %2483
  %2496 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2497 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2498 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2499 = mul nsw i32 %2498, %717
  %2500 = mul i32 %2497, 3
  %2501 = mul nsw i32 %729, 3
  %2502 = sext i32 %2501 to i64
  %2503 = add nsw i32 %2501, 1
  %2504 = sext i32 %2503 to i64
  %2505 = add nsw i32 %2501, 2
  %2506 = sext i32 %2505 to i64
  %2507 = zext i32 %2491 to i64
  br label %2508

2508:                                             ; preds = %2495, %2508
  %2509 = phi i64 [ 0, %2495 ], [ %2660, %2508 ]
  %2510 = phi double [ %2494, %2495 ], [ %2574, %2508 ]
  %2511 = phi double [ %2484, %2495 ], [ %2605, %2508 ]
  %2512 = phi <2 x double> [ %2485, %2495 ], [ %2597, %2508 ]
  %2513 = phi <2 x double> [ %2486, %2495 ], [ %2590, %2508 ]
  %2514 = phi <2 x double> [ %2487, %2495 ], [ %2603, %2508 ]
  %2515 = phi <2 x double> [ %2488, %2495 ], [ %2599, %2508 ]
  %2516 = shl nuw nsw i64 %2509, 1
  %2517 = getelementptr inbounds i32, ptr %145, i64 %2516
  %2518 = load i32, ptr %2517, align 4, !tbaa !5
  %2519 = ashr i32 %2518, 14
  %2520 = add nsw i32 %2519, %38
  %2521 = getelementptr inbounds i16, ptr %98, i64 %2509
  %2522 = load i16, ptr %2521, align 2, !tbaa !45
  %2523 = zext i16 %2522 to i64
  %2524 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2523
  %2525 = getelementptr inbounds double, ptr %144, i64 %2509
  %2526 = load double, ptr %2525, align 8, !tbaa !15
  %2527 = sext i32 %2520 to i64
  %2528 = getelementptr inbounds double, ptr %2496, i64 %2527
  %2529 = load double, ptr %2528, align 8, !tbaa !15
  %2530 = fsub double %2526, %2529
  %2531 = shl nsw i32 %2520, 4
  %2532 = sext i32 %2531 to i64
  %2533 = getelementptr inbounds double, ptr %31, i64 %2532
  %2534 = getelementptr inbounds %class.Vector, ptr %652, i64 %2523
  %2535 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2523, i32 1
  %2536 = load float, ptr %2535, align 8, !tbaa !81
  %2537 = fpext float %2536 to double
  %2538 = fmul double %2018, %2537
  %2539 = load <2 x double>, ptr %2524, align 8, !tbaa !15
  %2540 = fsub <2 x double> %711, %2539
  %2541 = getelementptr inbounds %class.Vector, ptr %2524, i64 0, i32 2
  %2542 = load double, ptr %2541, align 8, !tbaa !50
  %2543 = fsub double %714, %2542
  %2544 = getelementptr inbounds double, ptr %2533, i64 8
  %2545 = load double, ptr %2544, align 8, !tbaa !15
  %2546 = getelementptr inbounds double, ptr %2533, i64 9
  %2547 = load double, ptr %2546, align 8, !tbaa !15
  %2548 = getelementptr inbounds double, ptr %2533, i64 10
  %2549 = load double, ptr %2548, align 8, !tbaa !15
  %2550 = getelementptr inbounds double, ptr %2533, i64 11
  %2551 = load double, ptr %2550, align 8, !tbaa !15
  %2552 = getelementptr inbounds double, ptr %2533, i64 12
  %2553 = load double, ptr %2552, align 8, !tbaa !15
  %2554 = fsub double %2545, %2553
  %2555 = getelementptr inbounds double, ptr %2533, i64 13
  %2556 = load double, ptr %2555, align 8, !tbaa !15
  %2557 = fsub double %2547, %2556
  %2558 = getelementptr inbounds double, ptr %2533, i64 14
  %2559 = load double, ptr %2558, align 8, !tbaa !15
  %2560 = fsub double %2549, %2559
  %2561 = getelementptr inbounds double, ptr %2533, i64 15
  %2562 = load double, ptr %2561, align 8, !tbaa !15
  %2563 = fsub double %2551, %2562
  %2564 = fmul double %2538, %2554
  %2565 = fmul double %2538, %2557
  %2566 = fmul double %2538, %2560
  %2567 = fmul double %2538, %2563
  %2568 = fmul double %2530, %2564
  %2569 = fmul double %2565, 2.500000e-01
  %2570 = tail call double @llvm.fmuladd.f64(double %2568, double 0x3FC5555555555555, double %2569)
  %2571 = fmul double %2566, 5.000000e-01
  %2572 = tail call double @llvm.fmuladd.f64(double %2570, double %2530, double %2571)
  %2573 = tail call double @llvm.fmuladd.f64(double %2572, double %2530, double %2567)
  %2574 = fsub double %2510, %2573
  %2575 = tail call double @llvm.fmuladd.f64(double %2530, double %2564, double %2565)
  %2576 = tail call double @llvm.fmuladd.f64(double %2575, double %2530, double %2566)
  %2577 = fmul double %2012, %2576
  %2578 = load <2 x double>, ptr %676, align 8, !tbaa !15
  %2579 = insertelement <2 x double> poison, double %2577, i64 0
  %2580 = shufflevector <2 x double> %2579, <2 x double> poison, <2 x i32> zeroinitializer
  %2581 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2580, <2 x double> %2540, <2 x double> %2578)
  store <2 x double> %2581, ptr %676, align 8, !tbaa !15
  %2582 = load double, ptr %677, align 8, !tbaa !15
  %2583 = tail call double @llvm.fmuladd.f64(double %2577, double %2543, double %2582)
  store double %2583, ptr %677, align 8, !tbaa !15
  %2584 = extractelement <2 x double> %2540, i64 1
  %2585 = fmul double %2584, %2576
  %2586 = insertelement <2 x double> poison, double %2585, i64 0
  %2587 = shufflevector <2 x double> %2586, <2 x double> poison, <2 x i32> zeroinitializer
  %2588 = shufflevector <2 x double> %2540, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2589 = insertelement <2 x double> %2588, double %2543, i64 1
  %2590 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2587, <2 x double> %2589, <2 x double> %2513)
  %2591 = insertelement <2 x double> %2588, double %2543, i64 0
  %2592 = insertelement <2 x double> poison, double %2576, i64 0
  %2593 = shufflevector <2 x double> %2592, <2 x double> poison, <2 x i32> zeroinitializer
  %2594 = fmul <2 x double> %2591, %2593
  %2595 = shufflevector <2 x double> %2594, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2596 = shufflevector <2 x double> %2594, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2597 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2596, <2 x double> %2540, <2 x double> %2512)
  %2598 = insertelement <2 x double> %2595, double %2585, i64 1
  %2599 = fadd <2 x double> %2515, %2598
  %2600 = load <2 x double>, ptr %2534, align 8, !tbaa !15
  %2601 = fsub <2 x double> %2600, %2598
  store <2 x double> %2601, ptr %2534, align 8, !tbaa !15
  %2602 = shufflevector <2 x double> %2591, <2 x double> poison, <2 x i32> zeroinitializer
  %2603 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2594, <2 x double> %2602, <2 x double> %2514)
  %2604 = extractelement <2 x double> %2594, i64 0
  %2605 = fadd double %2511, %2604
  %2606 = getelementptr inbounds %class.Vector, ptr %652, i64 %2523, i32 2
  %2607 = load double, ptr %2606, align 8, !tbaa !89
  %2608 = fsub double %2607, %2604
  store double %2608, ptr %2606, align 8, !tbaa !89
  %2609 = load double, ptr %2541, align 8, !tbaa !50
  %2610 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2611 = fsub double %2609, %2610
  %2612 = fmul double %10, %2611
  %2613 = tail call double @llvm.floor.f64(double %2612)
  %2614 = fptosi double %2613 to i32
  %2615 = icmp slt i32 %2614, 0
  %2616 = select i1 %2615, i32 %2497, i32 0
  %2617 = icmp sgt i32 %2497, %2614
  %2618 = select i1 %2617, i32 0, i32 %2497
  %2619 = sub i32 %2614, %2618
  %2620 = add i32 %2619, %2616
  %2621 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2523, i32 3
  %2622 = load i8, ptr %2621, align 2, !tbaa !52
  %2623 = zext i8 %2622 to i32
  %2624 = shufflevector <2 x double> %2594, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2625 = fmul <2 x double> %2540, %2624
  %2626 = extractelement <2 x double> %2625, i64 0
  %2627 = fmul double %2584, %2585
  %2628 = fmul double %2543, %2604
  %2629 = add nsw i32 %2499, %2623
  %2630 = mul i32 %2500, %2629
  %2631 = sext i32 %2630 to i64
  %2632 = getelementptr inbounds double, ptr %8, i64 %2631
  %2633 = fmul double %2626, 5.000000e-01
  %2634 = fmul double %2627, 5.000000e-01
  %2635 = fmul double %2628, 5.000000e-01
  %2636 = getelementptr inbounds double, ptr %2632, i64 %2502
  %2637 = load double, ptr %2636, align 8, !tbaa !15
  %2638 = fadd double %2633, %2637
  store double %2638, ptr %2636, align 8, !tbaa !15
  %2639 = getelementptr inbounds double, ptr %2632, i64 %2504
  %2640 = load double, ptr %2639, align 8, !tbaa !15
  %2641 = fadd double %2634, %2640
  store double %2641, ptr %2639, align 8, !tbaa !15
  %2642 = getelementptr inbounds double, ptr %2632, i64 %2506
  %2643 = load double, ptr %2642, align 8, !tbaa !15
  %2644 = fadd double %2635, %2643
  store double %2644, ptr %2642, align 8, !tbaa !15
  %2645 = mul nsw i32 %2620, 3
  %2646 = sext i32 %2645 to i64
  %2647 = getelementptr inbounds double, ptr %2632, i64 %2646
  %2648 = load double, ptr %2647, align 8, !tbaa !15
  %2649 = fadd double %2633, %2648
  store double %2649, ptr %2647, align 8, !tbaa !15
  %2650 = add nsw i32 %2645, 1
  %2651 = sext i32 %2650 to i64
  %2652 = getelementptr inbounds double, ptr %2632, i64 %2651
  %2653 = load double, ptr %2652, align 8, !tbaa !15
  %2654 = fadd double %2634, %2653
  store double %2654, ptr %2652, align 8, !tbaa !15
  %2655 = add nsw i32 %2645, 2
  %2656 = sext i32 %2655 to i64
  %2657 = getelementptr inbounds double, ptr %2632, i64 %2656
  %2658 = load double, ptr %2657, align 8, !tbaa !15
  %2659 = fadd double %2635, %2658
  store double %2659, ptr %2657, align 8, !tbaa !15
  %2660 = add nuw nsw i64 %2509, 1
  %2661 = icmp eq i64 %2660, %2507
  br i1 %2661, label %2662, label %2508

2662:                                             ; preds = %2508, %2483
  %2663 = phi double [ %2484, %2483 ], [ %2605, %2508 ]
  %2664 = phi double [ %2494, %2483 ], [ %2574, %2508 ]
  %2665 = phi <2 x double> [ %2485, %2483 ], [ %2597, %2508 ]
  %2666 = phi <2 x double> [ %2486, %2483 ], [ %2590, %2508 ]
  %2667 = phi <2 x double> [ %2487, %2483 ], [ %2603, %2508 ]
  %2668 = phi <2 x double> [ %2488, %2483 ], [ %2599, %2508 ]
  %2669 = getelementptr inbounds %class.Vector, ptr %653, i64 %693
  %2670 = load <2 x double>, ptr %2669, align 8, !tbaa !15
  %2671 = fadd <2 x double> %2668, %2670
  store <2 x double> %2671, ptr %2669, align 8, !tbaa !15
  %2672 = getelementptr inbounds %class.Vector, ptr %653, i64 %693, i32 2
  %2673 = load double, ptr %2672, align 8, !tbaa !89
  %2674 = fadd double %2663, %2673
  store double %2674, ptr %2672, align 8, !tbaa !89
  br i1 %148, label %2678, label %2675

2675:                                             ; preds = %2662
  %2676 = add nsw i32 %683, 1
  %2677 = insertelement <2 x double> %2489, double %2664, i64 1
  br label %2687

2678:                                             ; preds = %2662
  %2679 = load ptr, ptr %12, align 8, !tbaa !47
  %2680 = load i32, ptr %17, align 8, !tbaa !19
  %2681 = add nsw i32 %2680, 1
  store i32 %2681, ptr %17, align 8, !tbaa !19
  %2682 = sext i32 %2680 to i64
  %2683 = getelementptr inbounds i16, ptr %2679, i64 %2682
  %2684 = load i16, ptr %2683, align 2, !tbaa !45
  %2685 = zext i16 %2684 to i32
  %2686 = insertelement <2 x double> %2489, double %2664, i64 1
  br label %2687

2687:                                             ; preds = %1264, %1223, %1152, %1603, %2678, %2675, %705
  %2688 = phi i32 [ %706, %705 ], [ %709, %2678 ], [ %709, %2675 ], [ %709, %1603 ], [ %709, %1152 ], [ %709, %1223 ], [ %709, %1264 ]
  %2689 = phi i32 [ %687, %705 ], [ %1998, %2678 ], [ %1998, %2675 ], [ %1166, %1603 ], [ 0, %1152 ], [ %1166, %1223 ], [ %1166, %1264 ]
  %2690 = phi ptr [ %686, %705 ], [ %1999, %2678 ], [ %1999, %2675 ], [ %975, %1603 ], [ %975, %1152 ], [ %975, %1223 ], [ %975, %1264 ]
  %2691 = phi ptr [ %685, %705 ], [ %2000, %2678 ], [ %2000, %2675 ], [ %976, %1603 ], [ %976, %1152 ], [ %976, %1223 ], [ %976, %1264 ]
  %2692 = phi ptr [ %684, %705 ], [ %2001, %2678 ], [ %2001, %2675 ], [ %977, %1603 ], [ %977, %1152 ], [ %977, %1223 ], [ %977, %1264 ]
  %2693 = phi i32 [ %707, %705 ], [ %2685, %2678 ], [ %2676, %2675 ], [ %1604, %1603 ], [ %1156, %1152 ], [ %1224, %1223 ], [ %1265, %1264 ]
  %2694 = phi i32 [ %682, %705 ], [ %2492, %2678 ], [ %2492, %2675 ], [ %682, %1603 ], [ %682, %1152 ], [ %682, %1223 ], [ %682, %1264 ]
  %2695 = phi <2 x double> [ %689, %705 ], [ %2665, %2678 ], [ %2665, %2675 ], [ %689, %1603 ], [ %689, %1152 ], [ %689, %1223 ], [ %689, %1264 ]
  %2696 = phi <2 x double> [ %690, %705 ], [ %2666, %2678 ], [ %2666, %2675 ], [ %690, %1603 ], [ %690, %1152 ], [ %690, %1223 ], [ %690, %1264 ]
  %2697 = phi <2 x double> [ %691, %705 ], [ %2667, %2678 ], [ %2667, %2675 ], [ %691, %1603 ], [ %691, %1152 ], [ %691, %1223 ], [ %691, %1264 ]
  %2698 = phi <2 x double> [ %692, %705 ], [ %2686, %2678 ], [ %2677, %2675 ], [ %692, %1603 ], [ %692, %1152 ], [ %692, %1223 ], [ %692, %1264 ]
  %2699 = icmp slt i32 %2693, %40
  br i1 %2699, label %681, label %2700

2700:                                             ; preds = %2687
  %2701 = extractelement <2 x double> %2698, i64 1
  %2702 = extractelement <2 x double> %2698, i64 0
  br label %2703

2703:                                             ; preds = %2700, %649
  %2704 = phi ptr [ null, %649 ], [ %2692, %2700 ]
  %2705 = phi i32 [ %656, %649 ], [ %2693, %2700 ]
  %2706 = phi double [ 0.000000e+00, %649 ], [ %2701, %2700 ]
  %2707 = phi double [ 0.000000e+00, %649 ], [ %2702, %2700 ]
  %2708 = phi i32 [ 0, %649 ], [ %2694, %2700 ]
  %2709 = phi <2 x double> [ zeroinitializer, %649 ], [ %2695, %2700 ]
  %2710 = phi <2 x double> [ zeroinitializer, %649 ], [ %2696, %2700 ]
  %2711 = phi <2 x double> [ zeroinitializer, %649 ], [ %2697, %2700 ]
  br i1 %146, label %2719, label %2712

2712:                                             ; preds = %2703
  %2713 = trunc i32 %2705 to i16
  %2714 = load ptr, ptr %12, align 8, !tbaa !47
  %2715 = load i32, ptr %17, align 8, !tbaa !19
  %2716 = add nsw i32 %2715, -1
  %2717 = sext i32 %2716 to i64
  %2718 = getelementptr inbounds i16, ptr %2714, i64 %2717
  store i16 %2713, ptr %2718, align 2, !tbaa !45
  br label %2719

2719:                                             ; preds = %2712, %2703
  %2720 = sitofp i32 %2708 to double
  %2721 = getelementptr inbounds double, ptr %6, i64 22
  %2722 = load double, ptr %2721, align 8, !tbaa !15
  %2723 = fadd double %2722, %2720
  store double %2723, ptr %2721, align 8, !tbaa !15
  %2724 = getelementptr inbounds double, ptr %6, i64 2
  %2725 = load double, ptr %2724, align 8, !tbaa !15
  %2726 = fadd double %2707, %2725
  store double %2726, ptr %2724, align 8, !tbaa !15
  %2727 = getelementptr inbounds double, ptr %6, i64 1
  %2728 = load double, ptr %2727, align 8, !tbaa !15
  %2729 = fadd double %2706, %2728
  store double %2729, ptr %2727, align 8, !tbaa !15
  %2730 = getelementptr inbounds double, ptr %6, i64 12
  %2731 = load <4 x double>, ptr %2730, align 8, !tbaa !15
  %2732 = shufflevector <2 x double> %2709, <2 x double> %2711, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2733 = shufflevector <4 x double> %2732, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2734 = fadd <4 x double> %2733, %2731
  store <4 x double> %2734, ptr %2730, align 8, !tbaa !15
  %2735 = getelementptr inbounds double, ptr %6, i64 16
  %2736 = load <4 x double>, ptr %2735, align 8, !tbaa !15
  %2737 = shufflevector <2 x double> %2710, <2 x double> %2711, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2738 = shufflevector <4 x double> %2737, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2739 = fadd <4 x double> %2738, %2736
  store <4 x double> %2739, ptr %2735, align 8, !tbaa !15
  %2740 = getelementptr inbounds double, ptr %6, i64 20
  %2741 = load double, ptr %2740, align 8, !tbaa !15
  %2742 = extractelement <2 x double> %2711, i64 0
  %2743 = fadd double %2742, %2741
  store double %2743, ptr %2740, align 8, !tbaa !15
  %2744 = icmp eq ptr %2704, null
  br i1 %2744, label %2746, label %2745

2745:                                             ; preds = %2719
  tail call void @_ZdaPv(ptr noundef nonnull %2704) #10
  br label %2746

2746:                                             ; preds = %2719, %2745, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil30calc_pair_slow_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2565

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %604, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %616

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %616

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %616, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %616

604:                                              ; preds = %469
  %605 = load ptr, ptr %12, align 8, !tbaa !47
  %606 = load i32, ptr %17, align 8, !tbaa !19
  %607 = add nsw i32 %606, 1
  store i32 %607, ptr %17, align 8, !tbaa !19
  %608 = sext i32 %606 to i64
  %609 = getelementptr inbounds i16, ptr %605, i64 %608
  %610 = load i16, ptr %609, align 2, !tbaa !45
  %611 = zext i16 %610 to i32
  %612 = icmp eq i32 %40, %611
  br i1 %612, label %633, label %613

613:                                              ; preds = %604
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  br label %633

616:                                              ; preds = %472, %597, %594, %535
  %617 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %618 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %619 = load i32, ptr %17, align 8, !tbaa !19
  %620 = trunc i32 %40 to i16
  %621 = load ptr, ptr %12, align 8, !tbaa !47
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds i16, ptr %621, i64 %622
  store i16 %620, ptr %623, align 2, !tbaa !45
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %625 = load i32, ptr %624, align 4, !tbaa !48
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %627 = load i32, ptr %626, align 4, !tbaa !49
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %629 = load ptr, ptr %628, align 8, !tbaa !24
  %630 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %631 = load ptr, ptr %630, align 8, !tbaa !24
  %632 = add nsw i32 %619, 2
  store i32 %632, ptr %17, align 8, !tbaa !19
  br label %649

633:                                              ; preds = %613, %604
  %634 = phi i32 [ %607, %604 ], [ %615, %613 ]
  %635 = phi ptr [ %605, %604 ], [ %614, %613 ]
  %636 = sext i32 %634 to i64
  %637 = getelementptr inbounds i16, ptr %635, i64 %636
  %638 = load i16, ptr %637, align 2, !tbaa !45
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !48
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %642 = load i32, ptr %641, align 4, !tbaa !49
  %643 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %644 = load ptr, ptr %643, align 8, !tbaa !24
  %645 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %646 = load ptr, ptr %645, align 8, !tbaa !24
  %647 = add nsw i32 %634, 1
  store i32 %647, ptr %17, align 8, !tbaa !19
  %648 = zext i16 %638 to i32
  br label %649

649:                                              ; preds = %633, %616
  %650 = phi i32 [ %640, %633 ], [ %625, %616 ]
  %651 = phi i32 [ %642, %633 ], [ %627, %616 ]
  %652 = phi ptr [ %644, %633 ], [ %629, %616 ]
  %653 = phi ptr [ %646, %633 ], [ %631, %616 ]
  %654 = phi i32 [ 0, %633 ], [ %618, %616 ]
  %655 = phi i32 [ 0, %633 ], [ %617, %616 ]
  %656 = phi i32 [ %648, %633 ], [ 0, %616 ]
  %657 = add nsw i32 %651, -1
  %658 = icmp slt i32 %656, %40
  br i1 %658, label %659, label %2530

659:                                              ; preds = %649
  %660 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 1
  %661 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 4
  %662 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 2
  %663 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 3
  %664 = ptrtoint ptr %425 to i64
  %665 = add nsw i32 %42, 10
  %666 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %667 = ptrtoint ptr %471 to i64
  %668 = getelementptr inbounds i16, ptr %425, i64 1
  %669 = ptrtoint ptr %333 to i64
  %670 = ptrtoint ptr %379 to i64
  %671 = getelementptr inbounds double, ptr %6, i64 29
  %672 = getelementptr inbounds double, ptr %6, i64 31
  %673 = fmul double %34, 2.000000e+00
  %674 = fmul double %34, 4.000000e+00
  %675 = fmul double %34, 6.000000e+00
  %676 = insertelement <2 x double> poison, double %27, i64 0
  %677 = shufflevector <2 x double> %676, <2 x double> poison, <2 x i32> zeroinitializer
  br label %678

678:                                              ; preds = %659, %2518
  %679 = phi i32 [ 0, %659 ], [ %2525, %2518 ]
  %680 = phi i32 [ %656, %659 ], [ %2524, %2518 ]
  %681 = phi ptr [ null, %659 ], [ %2523, %2518 ]
  %682 = phi ptr [ null, %659 ], [ %2522, %2518 ]
  %683 = phi ptr [ null, %659 ], [ %2521, %2518 ]
  %684 = phi i32 [ 0, %659 ], [ %2520, %2518 ]
  %685 = phi i32 [ %650, %659 ], [ %2519, %2518 ]
  %686 = phi <2 x double> [ zeroinitializer, %659 ], [ %2526, %2518 ]
  %687 = phi <2 x double> [ zeroinitializer, %659 ], [ %2527, %2518 ]
  %688 = phi <2 x double> [ zeroinitializer, %659 ], [ %2528, %2518 ]
  %689 = sext i32 %680 to i64
  %690 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %689
  %691 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %689
  br i1 %148, label %704, label %692

692:                                              ; preds = %678
  %693 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %689, i32 4
  %694 = load i8, ptr %693, align 1
  %695 = lshr i8 %694, 3
  %696 = and i8 %695, 15
  %697 = zext i8 %696 to i32
  %698 = icmp eq i8 %696, 0
  br i1 %698, label %704, label %699

699:                                              ; preds = %692
  %700 = icmp eq i32 %685, 0
  br i1 %700, label %704, label %701

701:                                              ; preds = %699
  %702 = add nsw i32 %685, -1
  %703 = add nsw i32 %680, %697
  br label %2518

704:                                              ; preds = %699, %692, %678
  %705 = phi i32 [ %685, %678 ], [ %685, %692 ], [ %657, %699 ]
  %706 = load <2 x double>, ptr %690, align 8, !tbaa !15
  %707 = fadd <2 x double> %19, %706
  %708 = getelementptr inbounds %class.Vector, ptr %690, i64 0, i32 2
  %709 = load double, ptr %708, align 8, !tbaa !50
  %710 = fadd double %21, %709
  %711 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %689, i32 3
  %712 = load i8, ptr %711, align 2, !tbaa !52
  %713 = zext i8 %712 to i32
  %714 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %715 = fsub double %709, %714
  %716 = fmul double %10, %715
  %717 = tail call double @llvm.floor.f64(double %716)
  %718 = fptosi double %717 to i32
  %719 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %720 = icmp slt i32 %718, 0
  %721 = select i1 %720, i32 %719, i32 0
  %722 = icmp sgt i32 %719, %718
  %723 = select i1 %722, i32 0, i32 %719
  %724 = sub i32 %718, %723
  %725 = add i32 %724, %721
  br i1 %148, label %1957, label %726

726:                                              ; preds = %704
  %727 = load i32, ptr %691, align 4
  %728 = shl i32 %727, 2
  %729 = ashr exact i32 %728, 2
  %730 = load ptr, ptr %660, align 8, !tbaa !53
  %731 = sext i32 %729 to i64
  %732 = getelementptr inbounds %class.ExclusionCheck, ptr %730, i64 %731
  %733 = load i32, ptr %732, align 8, !tbaa !55
  %734 = getelementptr inbounds %class.ExclusionCheck, ptr %730, i64 %731, i32 1
  %735 = load i32, ptr %734, align 4, !tbaa !57
  %736 = getelementptr inbounds %class.ExclusionCheck, ptr %730, i64 %731, i32 2
  %737 = load ptr, ptr %736, align 8, !tbaa !58
  %738 = icmp eq ptr %737, null
  br i1 %738, label %743, label %739

739:                                              ; preds = %726
  %740 = sext i32 %733 to i64
  %741 = sub nsw i64 0, %740
  %742 = getelementptr inbounds i8, ptr %737, i64 %741
  br label %969

743:                                              ; preds = %726
  %744 = icmp eq ptr %681, null
  br i1 %744, label %832, label %745

745:                                              ; preds = %743
  %746 = load i32, ptr %682, align 4, !tbaa !5
  %747 = icmp slt i32 %746, 1
  br i1 %747, label %795, label %748

748:                                              ; preds = %745
  %749 = add nuw i32 %746, 1
  %750 = zext i32 %749 to i64
  %751 = add nsw i64 %750, -1
  %752 = add nsw i64 %750, -2
  %753 = and i64 %751, 3
  %754 = icmp ult i64 %752, 3
  br i1 %754, label %782, label %755

755:                                              ; preds = %748
  %756 = and i64 %751, -4
  br label %757

757:                                              ; preds = %757, %755
  %758 = phi i64 [ 1, %755 ], [ %779, %757 ]
  %759 = phi i64 [ 0, %755 ], [ %780, %757 ]
  %760 = getelementptr inbounds i32, ptr %682, i64 %758
  %761 = load i32, ptr %760, align 4, !tbaa !5
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8, ptr %681, i64 %762
  store i8 0, ptr %763, align 1, !tbaa !59
  %764 = add nuw nsw i64 %758, 1
  %765 = getelementptr inbounds i32, ptr %682, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !5
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds i8, ptr %681, i64 %767
  store i8 0, ptr %768, align 1, !tbaa !59
  %769 = add nuw nsw i64 %758, 2
  %770 = getelementptr inbounds i32, ptr %682, i64 %769
  %771 = load i32, ptr %770, align 4, !tbaa !5
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds i8, ptr %681, i64 %772
  store i8 0, ptr %773, align 1, !tbaa !59
  %774 = add nuw nsw i64 %758, 3
  %775 = getelementptr inbounds i32, ptr %682, i64 %774
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %681, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !59
  %779 = add nuw nsw i64 %758, 4
  %780 = add i64 %759, 4
  %781 = icmp eq i64 %780, %756
  br i1 %781, label %782, label %757

782:                                              ; preds = %757, %748
  %783 = phi i64 [ 1, %748 ], [ %779, %757 ]
  %784 = icmp eq i64 %753, 0
  br i1 %784, label %795, label %785

785:                                              ; preds = %782, %785
  %786 = phi i64 [ %792, %785 ], [ %783, %782 ]
  %787 = phi i64 [ %793, %785 ], [ 0, %782 ]
  %788 = getelementptr inbounds i32, ptr %682, i64 %786
  %789 = load i32, ptr %788, align 4, !tbaa !5
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, ptr %681, i64 %790
  store i8 0, ptr %791, align 1, !tbaa !59
  %792 = add nuw nsw i64 %786, 1
  %793 = add i64 %787, 1
  %794 = icmp eq i64 %793, %753
  br i1 %794, label %795, label %785, !llvm.loop !150

795:                                              ; preds = %782, %785, %745
  %796 = load i32, ptr %683, align 4, !tbaa !5
  %797 = icmp slt i32 %796, 1
  br i1 %797, label %852, label %798

798:                                              ; preds = %795
  %799 = add nuw i32 %796, 1
  %800 = zext i32 %799 to i64
  %801 = add nsw i64 %800, -1
  %802 = add nsw i64 %800, -2
  %803 = and i64 %801, 3
  %804 = icmp ult i64 %802, 3
  br i1 %804, label %839, label %805

805:                                              ; preds = %798
  %806 = and i64 %801, -4
  br label %807

807:                                              ; preds = %807, %805
  %808 = phi i64 [ 1, %805 ], [ %829, %807 ]
  %809 = phi i64 [ 0, %805 ], [ %830, %807 ]
  %810 = getelementptr inbounds i32, ptr %683, i64 %808
  %811 = load i32, ptr %810, align 4, !tbaa !5
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i8, ptr %681, i64 %812
  store i8 0, ptr %813, align 1, !tbaa !59
  %814 = add nuw nsw i64 %808, 1
  %815 = getelementptr inbounds i32, ptr %683, i64 %814
  %816 = load i32, ptr %815, align 4, !tbaa !5
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i8, ptr %681, i64 %817
  store i8 0, ptr %818, align 1, !tbaa !59
  %819 = add nuw nsw i64 %808, 2
  %820 = getelementptr inbounds i32, ptr %683, i64 %819
  %821 = load i32, ptr %820, align 4, !tbaa !5
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds i8, ptr %681, i64 %822
  store i8 0, ptr %823, align 1, !tbaa !59
  %824 = add nuw nsw i64 %808, 3
  %825 = getelementptr inbounds i32, ptr %683, i64 %824
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i8, ptr %681, i64 %827
  store i8 0, ptr %828, align 1, !tbaa !59
  %829 = add nuw nsw i64 %808, 4
  %830 = add i64 %809, 4
  %831 = icmp eq i64 %830, %806
  br i1 %831, label %839, label %807

832:                                              ; preds = %743
  %833 = load i32, ptr %661, align 8, !tbaa !62
  %834 = tail call i32 @llvm.smax.i32(i32 %833, i32 -1)
  %835 = sext i32 %834 to i64
  %836 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %835) #9
  %837 = load i32, ptr %661, align 8, !tbaa !62
  %838 = sext i32 %837 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %836, i8 0, i64 %838, i1 false)
  br label %852

839:                                              ; preds = %807, %798
  %840 = phi i64 [ 1, %798 ], [ %829, %807 ]
  %841 = icmp eq i64 %803, 0
  br i1 %841, label %852, label %842

842:                                              ; preds = %839, %842
  %843 = phi i64 [ %849, %842 ], [ %840, %839 ]
  %844 = phi i64 [ %850, %842 ], [ 0, %839 ]
  %845 = getelementptr inbounds i32, ptr %683, i64 %843
  %846 = load i32, ptr %845, align 4, !tbaa !5
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i8, ptr %681, i64 %847
  store i8 0, ptr %848, align 1, !tbaa !59
  %849 = add nuw nsw i64 %843, 1
  %850 = add i64 %844, 1
  %851 = icmp eq i64 %850, %803
  br i1 %851, label %852, label %842, !llvm.loop !151

852:                                              ; preds = %839, %842, %795, %832
  %853 = phi ptr [ %836, %832 ], [ %681, %795 ], [ %681, %842 ], [ %681, %839 ]
  %854 = load i32, ptr %691, align 4
  %855 = shl i32 %854, 2
  %856 = ashr exact i32 %855, 2
  %857 = load ptr, ptr %662, align 8, !tbaa !64
  %858 = sext i32 %856 to i64
  %859 = getelementptr inbounds ptr, ptr %857, i64 %858
  %860 = load ptr, ptr %859, align 8, !tbaa !24
  %861 = load i32, ptr %860, align 4, !tbaa !5
  %862 = icmp slt i32 %861, 1
  br i1 %862, label %915, label %863

863:                                              ; preds = %852
  %864 = add nuw i32 %861, 1
  %865 = zext i32 %864 to i64
  %866 = add nsw i64 %865, -1
  %867 = add nsw i64 %865, -2
  %868 = and i64 %866, 3
  %869 = icmp ult i64 %867, 3
  br i1 %869, label %897, label %870

870:                                              ; preds = %863
  %871 = and i64 %866, -4
  br label %872

872:                                              ; preds = %872, %870
  %873 = phi i64 [ 1, %870 ], [ %894, %872 ]
  %874 = phi i64 [ 0, %870 ], [ %895, %872 ]
  %875 = getelementptr inbounds i32, ptr %860, i64 %873
  %876 = load i32, ptr %875, align 4, !tbaa !5
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i8, ptr %853, i64 %877
  store i8 1, ptr %878, align 1, !tbaa !59
  %879 = add nuw nsw i64 %873, 1
  %880 = getelementptr inbounds i32, ptr %860, i64 %879
  %881 = load i32, ptr %880, align 4, !tbaa !5
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, ptr %853, i64 %882
  store i8 1, ptr %883, align 1, !tbaa !59
  %884 = add nuw nsw i64 %873, 2
  %885 = getelementptr inbounds i32, ptr %860, i64 %884
  %886 = load i32, ptr %885, align 4, !tbaa !5
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds i8, ptr %853, i64 %887
  store i8 1, ptr %888, align 1, !tbaa !59
  %889 = add nuw nsw i64 %873, 3
  %890 = getelementptr inbounds i32, ptr %860, i64 %889
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i8, ptr %853, i64 %892
  store i8 1, ptr %893, align 1, !tbaa !59
  %894 = add nuw nsw i64 %873, 4
  %895 = add i64 %874, 4
  %896 = icmp eq i64 %895, %871
  br i1 %896, label %897, label %872

897:                                              ; preds = %872, %863
  %898 = phi i64 [ 1, %863 ], [ %894, %872 ]
  %899 = icmp eq i64 %868, 0
  br i1 %899, label %910, label %900

900:                                              ; preds = %897, %900
  %901 = phi i64 [ %907, %900 ], [ %898, %897 ]
  %902 = phi i64 [ %908, %900 ], [ 0, %897 ]
  %903 = getelementptr inbounds i32, ptr %860, i64 %901
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds i8, ptr %853, i64 %905
  store i8 1, ptr %906, align 1, !tbaa !59
  %907 = add nuw nsw i64 %901, 1
  %908 = add i64 %902, 1
  %909 = icmp eq i64 %908, %868
  br i1 %909, label %910, label %900, !llvm.loop !152

910:                                              ; preds = %900, %897
  %911 = load i32, ptr %691, align 4
  %912 = shl i32 %911, 2
  %913 = ashr exact i32 %912, 2
  %914 = sext i32 %913 to i64
  br label %915

915:                                              ; preds = %910, %852
  %916 = phi i64 [ %914, %910 ], [ %858, %852 ]
  %917 = load ptr, ptr %663, align 8, !tbaa !66
  %918 = getelementptr inbounds ptr, ptr %917, i64 %916
  %919 = load ptr, ptr %918, align 8, !tbaa !24
  %920 = load i32, ptr %919, align 4, !tbaa !5
  %921 = icmp slt i32 %920, 1
  br i1 %921, label %969, label %922

922:                                              ; preds = %915
  %923 = add nuw i32 %920, 1
  %924 = zext i32 %923 to i64
  %925 = add nsw i64 %924, -1
  %926 = add nsw i64 %924, -2
  %927 = and i64 %925, 3
  %928 = icmp ult i64 %926, 3
  br i1 %928, label %956, label %929

929:                                              ; preds = %922
  %930 = and i64 %925, -4
  br label %931

931:                                              ; preds = %931, %929
  %932 = phi i64 [ 1, %929 ], [ %953, %931 ]
  %933 = phi i64 [ 0, %929 ], [ %954, %931 ]
  %934 = getelementptr inbounds i32, ptr %919, i64 %932
  %935 = load i32, ptr %934, align 4, !tbaa !5
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i8, ptr %853, i64 %936
  store i8 2, ptr %937, align 1, !tbaa !59
  %938 = add nuw nsw i64 %932, 1
  %939 = getelementptr inbounds i32, ptr %919, i64 %938
  %940 = load i32, ptr %939, align 4, !tbaa !5
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i8, ptr %853, i64 %941
  store i8 2, ptr %942, align 1, !tbaa !59
  %943 = add nuw nsw i64 %932, 2
  %944 = getelementptr inbounds i32, ptr %919, i64 %943
  %945 = load i32, ptr %944, align 4, !tbaa !5
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i8, ptr %853, i64 %946
  store i8 2, ptr %947, align 1, !tbaa !59
  %948 = add nuw nsw i64 %932, 3
  %949 = getelementptr inbounds i32, ptr %919, i64 %948
  %950 = load i32, ptr %949, align 4, !tbaa !5
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i8, ptr %853, i64 %951
  store i8 2, ptr %952, align 1, !tbaa !59
  %953 = add nuw nsw i64 %932, 4
  %954 = add i64 %933, 4
  %955 = icmp eq i64 %954, %930
  br i1 %955, label %956, label %931

956:                                              ; preds = %931, %922
  %957 = phi i64 [ 1, %922 ], [ %953, %931 ]
  %958 = icmp eq i64 %927, 0
  br i1 %958, label %969, label %959

959:                                              ; preds = %956, %959
  %960 = phi i64 [ %966, %959 ], [ %957, %956 ]
  %961 = phi i64 [ %967, %959 ], [ 0, %956 ]
  %962 = getelementptr inbounds i32, ptr %919, i64 %960
  %963 = load i32, ptr %962, align 4, !tbaa !5
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds i8, ptr %853, i64 %964
  store i8 2, ptr %965, align 1, !tbaa !59
  %966 = add nuw nsw i64 %960, 1
  %967 = add i64 %961, 1
  %968 = icmp eq i64 %967, %927
  br i1 %968, label %969, label %959, !llvm.loop !153

969:                                              ; preds = %956, %959, %915, %739
  %970 = phi ptr [ %742, %739 ], [ %853, %915 ], [ %853, %959 ], [ %853, %956 ]
  %971 = phi ptr [ %683, %739 ], [ %919, %915 ], [ %919, %959 ], [ %919, %956 ]
  %972 = phi ptr [ %682, %739 ], [ %860, %915 ], [ %860, %959 ], [ %860, %956 ]
  %973 = phi ptr [ %681, %739 ], [ %853, %915 ], [ %853, %959 ], [ %853, %956 ]
  %974 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %689, i32 4
  %975 = load i8, ptr %974, align 1
  %976 = and i8 %975, 7
  %977 = icmp eq i8 %976, 0
  %978 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %977, label %1161, label %979

979:                                              ; preds = %969
  %980 = icmp eq i32 %978, 0
  br i1 %980, label %987, label %981

981:                                              ; preds = %979
  %982 = load i32, ptr %691, align 4
  %983 = freeze i32 %982
  %984 = icmp slt i32 %983, 0
  %985 = select i1 %984, ptr %241, ptr %195
  %986 = select i1 %984, i32 %654, i32 %655
  br label %987

987:                                              ; preds = %981, %979
  %988 = phi ptr [ %195, %979 ], [ %985, %981 ]
  %989 = phi i32 [ %655, %979 ], [ %986, %981 ]
  %990 = icmp sgt i32 %989, 0
  br i1 %990, label %991, label %1142

991:                                              ; preds = %987
  %992 = icmp ugt i32 %989, 6
  br i1 %992, label %993, label %1077

993:                                              ; preds = %991
  %994 = add nsw i32 %989, -2
  %995 = getelementptr inbounds i16, ptr %988, i64 1
  %996 = load i16, ptr %995, align 2, !tbaa !45
  %997 = zext i16 %996 to i64
  %998 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %997
  %999 = getelementptr inbounds %class.Vector, ptr %998, i64 0, i32 2
  %1000 = load double, ptr %999, align 8, !tbaa !50
  %1001 = load i16, ptr %988, align 2, !tbaa !45
  %1002 = zext i16 %1001 to i64
  %1003 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1002
  %1004 = getelementptr inbounds %class.Vector, ptr %1003, i64 0, i32 2
  %1005 = load double, ptr %1004, align 8, !tbaa !50
  %1006 = getelementptr inbounds %class.Vector, ptr %998, i64 0, i32 1
  %1007 = load double, ptr %1006, align 8, !tbaa !68
  %1008 = getelementptr inbounds %class.Vector, ptr %1003, i64 0, i32 1
  %1009 = load double, ptr %1008, align 8, !tbaa !68
  %1010 = load double, ptr %998, align 8, !tbaa !69
  %1011 = load double, ptr %1003, align 8, !tbaa !69
  %1012 = zext i32 %994 to i64
  %1013 = insertelement <2 x double> poison, double %1000, i64 0
  %1014 = insertelement <2 x double> %1013, double %1005, i64 1
  %1015 = insertelement <2 x double> poison, double %1007, i64 0
  %1016 = insertelement <2 x double> %1015, double %1009, i64 1
  %1017 = insertelement <2 x double> poison, double %1010, i64 0
  %1018 = insertelement <2 x double> %1017, double %1011, i64 1
  %1019 = insertelement <2 x double> poison, double %710, i64 0
  %1020 = shufflevector <2 x double> %1019, <2 x double> poison, <2 x i32> zeroinitializer
  %1021 = shufflevector <2 x double> %707, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1022 = shufflevector <2 x double> %707, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1023

1023:                                             ; preds = %993, %1023
  %1024 = phi i64 [ 2, %993 ], [ %1067, %1023 ]
  %1025 = phi i32 [ 0, %993 ], [ %1066, %1023 ]
  %1026 = phi i16 [ %1001, %993 ], [ %1033, %1023 ]
  %1027 = phi i16 [ %996, %993 ], [ %1036, %1023 ]
  %1028 = phi <2 x double> [ %1014, %993 ], [ %1070, %1023 ]
  %1029 = phi <2 x double> [ %1016, %993 ], [ %1072, %1023 ]
  %1030 = phi <2 x double> [ %1018, %993 ], [ %1074, %1023 ]
  %1031 = fsub <2 x double> %1020, %1028
  %1032 = getelementptr inbounds i16, ptr %988, i64 %1024
  %1033 = load i16, ptr %1032, align 2, !tbaa !45
  %1034 = or i64 %1024, 1
  %1035 = getelementptr inbounds i16, ptr %988, i64 %1034
  %1036 = load i16, ptr %1035, align 2, !tbaa !45
  %1037 = zext i16 %1033 to i64
  %1038 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1037
  %1039 = load double, ptr %1038, align 8, !tbaa !69
  %1040 = zext i16 %1036 to i64
  %1041 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1040
  %1042 = load double, ptr %1041, align 8, !tbaa !69
  %1043 = getelementptr inbounds %class.Vector, ptr %1038, i64 0, i32 1
  %1044 = load double, ptr %1043, align 8, !tbaa !68
  %1045 = getelementptr inbounds %class.Vector, ptr %1041, i64 0, i32 1
  %1046 = load double, ptr %1045, align 8, !tbaa !68
  %1047 = getelementptr inbounds %class.Vector, ptr %1038, i64 0, i32 2
  %1048 = load double, ptr %1047, align 8, !tbaa !50
  %1049 = getelementptr inbounds %class.Vector, ptr %1041, i64 0, i32 2
  %1050 = load double, ptr %1049, align 8, !tbaa !50
  %1051 = fsub <2 x double> %1022, %1030
  %1052 = fmul <2 x double> %1051, %1051
  %1053 = fsub <2 x double> %1021, %1029
  %1054 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1053, <2 x double> %1053, <2 x double> %1052)
  %1055 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1031, <2 x double> %1031, <2 x double> %1054)
  %1056 = fcmp olt <2 x double> %1055, %677
  %1057 = zext i32 %1025 to i64
  %1058 = getelementptr inbounds i16, ptr %287, i64 %1057
  store i16 %1026, ptr %1058, align 2, !tbaa !45
  %1059 = extractelement <2 x i1> %1056, i64 1
  %1060 = zext i1 %1059 to i32
  %1061 = add nuw nsw i32 %1025, %1060
  %1062 = zext i32 %1061 to i64
  %1063 = getelementptr inbounds i16, ptr %287, i64 %1062
  store i16 %1027, ptr %1063, align 2, !tbaa !45
  %1064 = extractelement <2 x i1> %1056, i64 0
  %1065 = zext i1 %1064 to i32
  %1066 = add i32 %1061, %1065
  %1067 = add nuw nsw i64 %1024, 2
  %1068 = icmp ult i64 %1067, %1012
  %1069 = insertelement <2 x double> poison, double %1050, i64 0
  %1070 = insertelement <2 x double> %1069, double %1048, i64 1
  %1071 = insertelement <2 x double> poison, double %1046, i64 0
  %1072 = insertelement <2 x double> %1071, double %1044, i64 1
  %1073 = insertelement <2 x double> poison, double %1042, i64 0
  %1074 = insertelement <2 x double> %1073, double %1039, i64 1
  br i1 %1068, label %1023, label %1075

1075:                                             ; preds = %1023
  %1076 = trunc i64 %1024 to i32
  br label %1077

1077:                                             ; preds = %1075, %991
  %1078 = phi i32 [ %1066, %1075 ], [ 0, %991 ]
  %1079 = phi i32 [ %1076, %1075 ], [ 0, %991 ]
  %1080 = icmp slt i32 %1079, %989
  br i1 %1080, label %1081, label %1086

1081:                                             ; preds = %1077
  %1082 = zext i32 %1079 to i64
  %1083 = zext i32 %989 to i64
  %1084 = extractelement <2 x double> %707, i64 0
  %1085 = extractelement <2 x double> %707, i64 1
  br label %1091

1086:                                             ; preds = %1114, %1077
  %1087 = phi i32 [ %1078, %1077 ], [ %1115, %1114 ]
  %1088 = icmp sgt i32 %1087, 0
  br i1 %1088, label %1089, label %1142

1089:                                             ; preds = %1086
  %1090 = zext i32 %1087 to i64
  br label %1118

1091:                                             ; preds = %1081, %1114
  %1092 = phi i64 [ %1082, %1081 ], [ %1116, %1114 ]
  %1093 = phi i32 [ %1078, %1081 ], [ %1115, %1114 ]
  %1094 = getelementptr inbounds i16, ptr %988, i64 %1092
  %1095 = load i16, ptr %1094, align 2, !tbaa !45
  %1096 = zext i16 %1095 to i64
  %1097 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1096
  %1098 = load double, ptr %1097, align 8, !tbaa !69
  %1099 = getelementptr inbounds %class.Vector, ptr %1097, i64 0, i32 1
  %1100 = load double, ptr %1099, align 8, !tbaa !68
  %1101 = getelementptr inbounds %class.Vector, ptr %1097, i64 0, i32 2
  %1102 = load double, ptr %1101, align 8, !tbaa !50
  %1103 = fsub double %1084, %1098
  %1104 = fmul double %1103, %1103
  %1105 = fsub double %1085, %1100
  %1106 = tail call double @llvm.fmuladd.f64(double %1105, double %1105, double %1104)
  %1107 = fsub double %710, %1102
  %1108 = tail call double @llvm.fmuladd.f64(double %1107, double %1107, double %1106)
  %1109 = fcmp ugt double %1108, %27
  br i1 %1109, label %1114, label %1110

1110:                                             ; preds = %1091
  %1111 = add nsw i32 %1093, 1
  %1112 = sext i32 %1093 to i64
  %1113 = getelementptr inbounds i16, ptr %287, i64 %1112
  store i16 %1095, ptr %1113, align 2, !tbaa !45
  br label %1114

1114:                                             ; preds = %1110, %1091
  %1115 = phi i32 [ %1111, %1110 ], [ %1093, %1091 ]
  %1116 = add nuw nsw i64 %1092, 1
  %1117 = icmp eq i64 %1116, %1083
  br i1 %1117, label %1086, label %1091

1118:                                             ; preds = %1089, %1135
  %1119 = phi i64 [ 0, %1089 ], [ %1138, %1135 ]
  %1120 = phi ptr [ %425, %1089 ], [ %1137, %1135 ]
  %1121 = getelementptr inbounds i16, ptr %287, i64 %1119
  %1122 = load i16, ptr %1121, align 2, !tbaa !45
  %1123 = zext i16 %1122 to i64
  %1124 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1123, i32 4
  %1125 = load i8, ptr %1124, align 1
  %1126 = and i8 %1125, 7
  store i16 %1122, ptr %1120, align 2, !tbaa !45
  %1127 = getelementptr inbounds i16, ptr %1120, i64 1
  %1128 = insertelement <2 x i16> poison, i16 %1122, i64 0
  %1129 = shufflevector <2 x i16> %1128, <2 x i16> poison, <2 x i32> zeroinitializer
  %1130 = add <2 x i16> %1129, <i16 1, i16 2>
  store <2 x i16> %1130, ptr %1127, align 2, !tbaa !45
  %1131 = icmp ult i8 %1126, 4
  br i1 %1131, label %1135, label %1132

1132:                                             ; preds = %1118
  %1133 = add <2 x i16> %1129, <i16 3, i16 4>
  %1134 = getelementptr inbounds i16, ptr %1120, i64 3
  store <2 x i16> %1133, ptr %1134, align 2, !tbaa !45
  br label %1135

1135:                                             ; preds = %1132, %1118
  %1136 = zext i8 %1126 to i64
  %1137 = getelementptr inbounds i16, ptr %1120, i64 %1136
  %1138 = add nuw nsw i64 %1119, 1
  %1139 = icmp eq i64 %1138, %1090
  br i1 %1139, label %1140, label %1118

1140:                                             ; preds = %1135
  %1141 = ptrtoint ptr %1137 to i64
  br label %1142

1142:                                             ; preds = %1140, %1086, %987
  %1143 = phi i64 [ %1141, %1140 ], [ %664, %1086 ], [ %664, %987 ]
  %1144 = sub i64 %1143, %664
  %1145 = lshr exact i64 %1144, 1
  %1146 = trunc i64 %1145 to i32
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1148, label %1153

1148:                                             ; preds = %1142
  %1149 = load i8, ptr %974, align 1
  %1150 = and i8 %1149, 7
  %1151 = zext i8 %1150 to i32
  %1152 = add nsw i32 %680, %1151
  br label %2518

1153:                                             ; preds = %1142
  %1154 = shl i64 %1144, 31
  %1155 = add i64 %1154, -4294967296
  %1156 = ashr i64 %1155, 32
  %1157 = getelementptr inbounds i16, ptr %425, i64 %1156
  %1158 = load i16, ptr %1157, align 2, !tbaa !45
  %1159 = ashr i64 %1154, 32
  %1160 = getelementptr inbounds i16, ptr %425, i64 %1159
  store i16 %1158, ptr %1160, align 2, !tbaa !45
  br label %1161

1161:                                             ; preds = %1153, %969
  %1162 = phi i32 [ %1146, %1153 ], [ %684, %969 ]
  %1163 = icmp eq i32 %978, 0
  br i1 %1163, label %1168, label %1164

1164:                                             ; preds = %1161
  %1165 = load i32, ptr %691, align 4
  %1166 = and i32 %1165, 1073741824
  %1167 = icmp ne i32 %1166, 0
  br label %1168

1168:                                             ; preds = %1164, %1161
  %1169 = phi i1 [ false, %1161 ], [ %1167, %1164 ]
  %1170 = load i32, ptr %17, align 8, !tbaa !19
  %1171 = add nsw i32 %665, %1170
  %1172 = load i32, ptr %666, align 4, !tbaa !70
  %1173 = icmp sgt i32 %1172, %1171
  br i1 %1173, label %1189, label %1174

1174:                                             ; preds = %1168, %1174
  %1175 = phi i32 [ %1177, %1174 ], [ %1172, %1168 ]
  %1176 = ashr i32 %1175, 1
  %1177 = add nsw i32 %1176, %1175
  %1178 = icmp sgt i32 %1177, %1171
  br i1 %1178, label %1179, label %1174

1179:                                             ; preds = %1174
  %1180 = sext i32 %1177 to i64
  %1181 = icmp slt i32 %1177, 0
  %1182 = shl nsw i64 %1180, 1
  %1183 = select i1 %1181, i64 -1, i64 %1182
  %1184 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1183) #9
  %1185 = load ptr, ptr %12, align 8, !tbaa !47
  %1186 = sext i32 %1170 to i64
  %1187 = shl nsw i64 %1186, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1184, ptr align 2 %1185, i64 %1187, i1 false)
  %1188 = icmp eq ptr %1185, null
  br i1 %1188, label %1193, label %1191

1189:                                             ; preds = %1168
  %1190 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1195

1191:                                             ; preds = %1179
  tail call void @_ZdaPv(ptr noundef nonnull %1185) #10
  %1192 = load i32, ptr %17, align 8, !tbaa !19
  br label %1193

1193:                                             ; preds = %1191, %1179
  %1194 = phi i32 [ %1192, %1191 ], [ %1170, %1179 ]
  store ptr %1184, ptr %12, align 8, !tbaa !47
  store i32 %1177, ptr %666, align 4, !tbaa !70
  br label %1195

1195:                                             ; preds = %1189, %1193
  %1196 = phi i32 [ %1170, %1189 ], [ %1194, %1193 ]
  %1197 = phi ptr [ %1190, %1189 ], [ %1184, %1193 ]
  %1198 = ptrtoint ptr %1197 to i64
  %1199 = add nsw i32 %1196, 1
  %1200 = sext i32 %1199 to i64
  %1201 = getelementptr inbounds i16, ptr %1197, i64 %1200
  %1202 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1203 = icmp eq i32 %1202, 0
  br i1 %1203, label %1384, label %1204

1204:                                             ; preds = %1195
  %1205 = load i8, ptr %711, align 2, !tbaa !52
  %1206 = zext i8 %1205 to i32
  %1207 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1208 = icmp eq i32 %1207, 0
  br i1 %1208, label %1249, label %1209

1209:                                             ; preds = %1204
  %1210 = icmp eq i8 %1205, 1
  br i1 %1210, label %1211, label %1219

1211:                                             ; preds = %1209
  %1212 = icmp sgt i32 %1162, 0
  br i1 %1212, label %1213, label %1324

1213:                                             ; preds = %1211
  %1214 = zext i32 %1162 to i64
  %1215 = and i64 %1214, 1
  %1216 = icmp eq i32 %1162, 1
  br i1 %1216, label %1310, label %1217

1217:                                             ; preds = %1213
  %1218 = and i64 %1214, 4294967294
  br label %1221

1219:                                             ; preds = %1209
  %1220 = add nsw i32 %680, 1
  br label %2518

1221:                                             ; preds = %1244, %1217
  %1222 = phi i64 [ 0, %1217 ], [ %1246, %1244 ]
  %1223 = phi ptr [ %471, %1217 ], [ %1245, %1244 ]
  %1224 = phi i64 [ 0, %1217 ], [ %1247, %1244 ]
  %1225 = getelementptr inbounds i16, ptr %425, i64 %1222
  %1226 = load i16, ptr %1225, align 2, !tbaa !45
  %1227 = zext i16 %1226 to i64
  %1228 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1227, i32 3
  %1229 = load i8, ptr %1228, align 2, !tbaa !52
  %1230 = icmp eq i8 %1229, 1
  br i1 %1230, label %1231, label %1233

1231:                                             ; preds = %1221
  %1232 = getelementptr inbounds i16, ptr %1223, i64 1
  store i16 %1226, ptr %1223, align 2, !tbaa !45
  br label %1233

1233:                                             ; preds = %1231, %1221
  %1234 = phi ptr [ %1232, %1231 ], [ %1223, %1221 ]
  %1235 = or i64 %1222, 1
  %1236 = getelementptr inbounds i16, ptr %425, i64 %1235
  %1237 = load i16, ptr %1236, align 2, !tbaa !45
  %1238 = zext i16 %1237 to i64
  %1239 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1238, i32 3
  %1240 = load i8, ptr %1239, align 2, !tbaa !52
  %1241 = icmp eq i8 %1240, 1
  br i1 %1241, label %1242, label %1244

1242:                                             ; preds = %1233
  %1243 = getelementptr inbounds i16, ptr %1234, i64 1
  store i16 %1237, ptr %1234, align 2, !tbaa !45
  br label %1244

1244:                                             ; preds = %1242, %1233
  %1245 = phi ptr [ %1243, %1242 ], [ %1234, %1233 ]
  %1246 = add nuw nsw i64 %1222, 2
  %1247 = add i64 %1224, 2
  %1248 = icmp eq i64 %1247, %1218
  br i1 %1248, label %1310, label %1221

1249:                                             ; preds = %1204
  %1250 = add i8 %1205, -3
  %1251 = icmp ult i8 %1250, -2
  br i1 %1251, label %1260, label %1252

1252:                                             ; preds = %1249
  %1253 = icmp sgt i32 %1162, 0
  br i1 %1253, label %1254, label %1324

1254:                                             ; preds = %1252
  %1255 = zext i32 %1162 to i64
  %1256 = and i64 %1255, 1
  %1257 = icmp eq i32 %1162, 1
  br i1 %1257, label %1294, label %1258

1258:                                             ; preds = %1254
  %1259 = and i64 %1255, 4294967294
  br label %1262

1260:                                             ; preds = %1249
  %1261 = add nsw i32 %680, 1
  br label %2518

1262:                                             ; preds = %1289, %1258
  %1263 = phi i64 [ 0, %1258 ], [ %1291, %1289 ]
  %1264 = phi ptr [ %471, %1258 ], [ %1290, %1289 ]
  %1265 = phi i64 [ 0, %1258 ], [ %1292, %1289 ]
  %1266 = getelementptr inbounds i16, ptr %425, i64 %1263
  %1267 = load i16, ptr %1266, align 2, !tbaa !45
  %1268 = zext i16 %1267 to i64
  %1269 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1268, i32 3
  %1270 = load i8, ptr %1269, align 2, !tbaa !52
  %1271 = zext i8 %1270 to i32
  %1272 = add nuw nsw i32 %1271, %1206
  %1273 = icmp eq i32 %1272, 3
  br i1 %1273, label %1274, label %1276

1274:                                             ; preds = %1262
  %1275 = getelementptr inbounds i16, ptr %1264, i64 1
  store i16 %1267, ptr %1264, align 2, !tbaa !45
  br label %1276

1276:                                             ; preds = %1274, %1262
  %1277 = phi ptr [ %1275, %1274 ], [ %1264, %1262 ]
  %1278 = or i64 %1263, 1
  %1279 = getelementptr inbounds i16, ptr %425, i64 %1278
  %1280 = load i16, ptr %1279, align 2, !tbaa !45
  %1281 = zext i16 %1280 to i64
  %1282 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1281, i32 3
  %1283 = load i8, ptr %1282, align 2, !tbaa !52
  %1284 = zext i8 %1283 to i32
  %1285 = add nuw nsw i32 %1284, %1206
  %1286 = icmp eq i32 %1285, 3
  br i1 %1286, label %1287, label %1289

1287:                                             ; preds = %1276
  %1288 = getelementptr inbounds i16, ptr %1277, i64 1
  store i16 %1280, ptr %1277, align 2, !tbaa !45
  br label %1289

1289:                                             ; preds = %1287, %1276
  %1290 = phi ptr [ %1288, %1287 ], [ %1277, %1276 ]
  %1291 = add nuw nsw i64 %1263, 2
  %1292 = add i64 %1265, 2
  %1293 = icmp eq i64 %1292, %1259
  br i1 %1293, label %1294, label %1262

1294:                                             ; preds = %1289, %1254
  %1295 = phi ptr [ undef, %1254 ], [ %1290, %1289 ]
  %1296 = phi i64 [ 0, %1254 ], [ %1291, %1289 ]
  %1297 = phi ptr [ %471, %1254 ], [ %1290, %1289 ]
  %1298 = icmp eq i64 %1256, 0
  br i1 %1298, label %1324, label %1299

1299:                                             ; preds = %1294
  %1300 = getelementptr inbounds i16, ptr %425, i64 %1296
  %1301 = load i16, ptr %1300, align 2, !tbaa !45
  %1302 = zext i16 %1301 to i64
  %1303 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1302, i32 3
  %1304 = load i8, ptr %1303, align 2, !tbaa !52
  %1305 = zext i8 %1304 to i32
  %1306 = add nuw nsw i32 %1305, %1206
  %1307 = icmp eq i32 %1306, 3
  br i1 %1307, label %1308, label %1324

1308:                                             ; preds = %1299
  %1309 = getelementptr inbounds i16, ptr %1297, i64 1
  store i16 %1301, ptr %1297, align 2, !tbaa !45
  br label %1324

1310:                                             ; preds = %1244, %1213
  %1311 = phi ptr [ undef, %1213 ], [ %1245, %1244 ]
  %1312 = phi i64 [ 0, %1213 ], [ %1246, %1244 ]
  %1313 = phi ptr [ %471, %1213 ], [ %1245, %1244 ]
  %1314 = icmp eq i64 %1215, 0
  br i1 %1314, label %1324, label %1315

1315:                                             ; preds = %1310
  %1316 = getelementptr inbounds i16, ptr %425, i64 %1312
  %1317 = load i16, ptr %1316, align 2, !tbaa !45
  %1318 = zext i16 %1317 to i64
  %1319 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1318, i32 3
  %1320 = load i8, ptr %1319, align 2, !tbaa !52
  %1321 = icmp eq i8 %1320, 1
  br i1 %1321, label %1322, label %1324

1322:                                             ; preds = %1315
  %1323 = getelementptr inbounds i16, ptr %1313, i64 1
  store i16 %1317, ptr %1313, align 2, !tbaa !45
  br label %1324

1324:                                             ; preds = %1310, %1322, %1315, %1294, %1308, %1299, %1211, %1252
  %1325 = phi ptr [ %471, %1252 ], [ %471, %1211 ], [ %1295, %1294 ], [ %1309, %1308 ], [ %1297, %1299 ], [ %1311, %1310 ], [ %1323, %1322 ], [ %1313, %1315 ]
  %1326 = ptrtoint ptr %1325 to i64
  %1327 = sub i64 %1326, %667
  %1328 = lshr exact i64 %1327, 1
  %1329 = trunc i64 %1328 to i32
  %1330 = icmp sgt i32 %1329, 0
  br i1 %1330, label %1331, label %1593

1331:                                             ; preds = %1324
  %1332 = and i64 %1328, 4294967295
  %1333 = extractelement <2 x double> %707, i64 0
  %1334 = extractelement <2 x double> %707, i64 1
  br label %1335

1335:                                             ; preds = %1331, %1379
  %1336 = phi i64 [ 0, %1331 ], [ %1382, %1379 ]
  %1337 = phi ptr [ %471, %1331 ], [ %1381, %1379 ]
  %1338 = phi ptr [ %1201, %1331 ], [ %1380, %1379 ]
  %1339 = getelementptr inbounds i16, ptr %471, i64 %1336
  %1340 = load i16, ptr %1339, align 2, !tbaa !45
  %1341 = zext i16 %1340 to i64
  %1342 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1341
  %1343 = load double, ptr %1342, align 8, !tbaa !69
  %1344 = fsub double %1333, %1343
  %1345 = fmul double %1344, %1344
  %1346 = getelementptr inbounds %class.Vector, ptr %1342, i64 0, i32 1
  %1347 = load double, ptr %1346, align 8, !tbaa !68
  %1348 = fsub double %1334, %1347
  %1349 = tail call double @llvm.fmuladd.f64(double %1348, double %1348, double %1345)
  %1350 = getelementptr inbounds %class.Vector, ptr %1342, i64 0, i32 2
  %1351 = load double, ptr %1350, align 8, !tbaa !50
  %1352 = fsub double %710, %1351
  %1353 = tail call double @llvm.fmuladd.f64(double %1352, double %1352, double %1349)
  br i1 %1169, label %1354, label %1361

1354:                                             ; preds = %1335
  %1355 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1341
  %1356 = load i32, ptr %1355, align 4
  %1357 = and i32 %1356, 1073741824
  %1358 = icmp ne i32 %1357, 0
  %1359 = fcmp ugt double %1353, %24
  %1360 = select i1 %1358, i1 true, i1 %1359
  br i1 %1360, label %1379, label %1366

1361:                                             ; preds = %1335
  %1362 = fcmp ugt double %1353, %24
  br i1 %1362, label %1379, label %1363

1363:                                             ; preds = %1361
  %1364 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1341
  %1365 = load i32, ptr %1364, align 4
  br label %1366

1366:                                             ; preds = %1363, %1354
  %1367 = phi i32 [ %1365, %1363 ], [ %1356, %1354 ]
  %1368 = shl i32 %1367, 2
  %1369 = ashr exact i32 %1368, 2
  %1370 = icmp slt i32 %1369, %733
  %1371 = icmp sgt i32 %1369, %735
  %1372 = select i1 %1370, i1 true, i1 %1371
  %1373 = select i1 %1372, ptr %1338, ptr %1337
  %1374 = zext i1 %1372 to i64
  %1375 = getelementptr inbounds i16, ptr %1338, i64 %1374
  %1376 = xor i1 %1372, true
  %1377 = zext i1 %1376 to i64
  %1378 = getelementptr inbounds i16, ptr %1337, i64 %1377
  store i16 %1340, ptr %1373, align 2, !tbaa !45
  br label %1379

1379:                                             ; preds = %1366, %1361, %1354
  %1380 = phi ptr [ %1338, %1354 ], [ %1338, %1361 ], [ %1375, %1366 ]
  %1381 = phi ptr [ %1337, %1354 ], [ %1337, %1361 ], [ %1378, %1366 ]
  %1382 = add nuw nsw i64 %1336, 1
  %1383 = icmp eq i64 %1382, %1332
  br i1 %1383, label %1593, label %1335

1384:                                             ; preds = %1195
  %1385 = icmp sgt i32 %1162, 0
  br i1 %1169, label %1386, label %1433

1386:                                             ; preds = %1384
  br i1 %1385, label %1387, label %1593

1387:                                             ; preds = %1386
  %1388 = zext i32 %1162 to i64
  %1389 = extractelement <2 x double> %707, i64 0
  %1390 = extractelement <2 x double> %707, i64 1
  br label %1391

1391:                                             ; preds = %1387, %1428
  %1392 = phi i64 [ 0, %1387 ], [ %1431, %1428 ]
  %1393 = phi ptr [ %471, %1387 ], [ %1430, %1428 ]
  %1394 = phi ptr [ %1201, %1387 ], [ %1429, %1428 ]
  %1395 = getelementptr inbounds i16, ptr %425, i64 %1392
  %1396 = load i16, ptr %1395, align 2, !tbaa !45
  %1397 = zext i16 %1396 to i64
  %1398 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1397
  %1399 = load i32, ptr %1398, align 4
  %1400 = and i32 %1399, 1073741824
  %1401 = icmp eq i32 %1400, 0
  br i1 %1401, label %1402, label %1428

1402:                                             ; preds = %1391
  %1403 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1397
  %1404 = getelementptr inbounds %class.Vector, ptr %1403, i64 0, i32 2
  %1405 = load double, ptr %1404, align 8, !tbaa !50
  %1406 = fsub double %710, %1405
  %1407 = getelementptr inbounds %class.Vector, ptr %1403, i64 0, i32 1
  %1408 = load double, ptr %1407, align 8, !tbaa !68
  %1409 = fsub double %1390, %1408
  %1410 = load double, ptr %1403, align 8, !tbaa !69
  %1411 = fsub double %1389, %1410
  %1412 = fmul double %1411, %1411
  %1413 = tail call double @llvm.fmuladd.f64(double %1409, double %1409, double %1412)
  %1414 = tail call double @llvm.fmuladd.f64(double %1406, double %1406, double %1413)
  %1415 = fcmp ugt double %1414, %24
  br i1 %1415, label %1428, label %1416

1416:                                             ; preds = %1402
  %1417 = shl i32 %1399, 2
  %1418 = ashr exact i32 %1417, 2
  %1419 = icmp slt i32 %1418, %733
  %1420 = icmp sgt i32 %1418, %735
  %1421 = select i1 %1419, i1 true, i1 %1420
  %1422 = select i1 %1421, ptr %1394, ptr %1393
  %1423 = zext i1 %1421 to i64
  %1424 = getelementptr inbounds i16, ptr %1394, i64 %1423
  %1425 = xor i1 %1421, true
  %1426 = zext i1 %1425 to i64
  %1427 = getelementptr inbounds i16, ptr %1393, i64 %1426
  store i16 %1396, ptr %1422, align 2, !tbaa !45
  br label %1428

1428:                                             ; preds = %1416, %1402, %1391
  %1429 = phi ptr [ %1394, %1391 ], [ %1394, %1402 ], [ %1424, %1416 ]
  %1430 = phi ptr [ %1393, %1391 ], [ %1393, %1402 ], [ %1427, %1416 ]
  %1431 = add nuw nsw i64 %1392, 1
  %1432 = icmp eq i64 %1431, %1388
  br i1 %1432, label %1593, label %1391

1433:                                             ; preds = %1384
  br i1 %1385, label %1434, label %1593

1434:                                             ; preds = %1433
  %1435 = icmp ugt i32 %1162, 6
  br i1 %1435, label %1436, label %1544

1436:                                             ; preds = %1434
  %1437 = add nsw i32 %1162, -2
  %1438 = load i16, ptr %425, align 2, !tbaa !45
  %1439 = zext i16 %1438 to i64
  %1440 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1439
  %1441 = load i32, ptr %1440, align 4
  %1442 = load i16, ptr %668, align 2, !tbaa !45
  %1443 = zext i16 %1442 to i64
  %1444 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1443
  %1445 = getelementptr inbounds %class.Vector, ptr %1444, i64 0, i32 2
  %1446 = load double, ptr %1445, align 8, !tbaa !50
  %1447 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1439
  %1448 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 2
  %1449 = load double, ptr %1448, align 8, !tbaa !50
  %1450 = getelementptr inbounds %class.Vector, ptr %1444, i64 0, i32 1
  %1451 = load double, ptr %1450, align 8, !tbaa !68
  %1452 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 1
  %1453 = load double, ptr %1452, align 8, !tbaa !68
  %1454 = load double, ptr %1444, align 8, !tbaa !69
  %1455 = load double, ptr %1447, align 8, !tbaa !69
  %1456 = zext i32 %1437 to i64
  %1457 = extractelement <2 x double> %707, i64 0
  %1458 = extractelement <2 x double> %707, i64 1
  br label %1459

1459:                                             ; preds = %1436, %1537
  %1460 = phi i64 [ 2, %1436 ], [ %1540, %1537 ]
  %1461 = phi i64 [ %1443, %1436 ], [ %1497, %1537 ]
  %1462 = phi i32 [ %1441, %1436 ], [ %1525, %1537 ]
  %1463 = phi ptr [ %471, %1436 ], [ %1539, %1537 ]
  %1464 = phi ptr [ %1201, %1436 ], [ %1538, %1537 ]
  %1465 = phi i16 [ %1438, %1436 ], [ %1490, %1537 ]
  %1466 = phi i16 [ %1442, %1436 ], [ %1493, %1537 ]
  %1467 = phi double [ %1455, %1436 ], [ %1496, %1537 ]
  %1468 = phi double [ %1454, %1436 ], [ %1499, %1537 ]
  %1469 = phi double [ %1453, %1436 ], [ %1501, %1537 ]
  %1470 = phi double [ %1451, %1436 ], [ %1503, %1537 ]
  %1471 = phi double [ %1449, %1436 ], [ %1505, %1537 ]
  %1472 = phi double [ %1446, %1436 ], [ %1507, %1537 ]
  %1473 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1461
  %1474 = load i32, ptr %1473, align 4
  %1475 = shl i32 %1474, 2
  %1476 = ashr exact i32 %1475, 2
  %1477 = fsub double %1457, %1467
  %1478 = fsub double %1457, %1468
  %1479 = fmul double %1477, %1477
  %1480 = fmul double %1478, %1478
  %1481 = fsub double %1458, %1469
  %1482 = fsub double %1458, %1470
  %1483 = tail call double @llvm.fmuladd.f64(double %1481, double %1481, double %1479)
  %1484 = tail call double @llvm.fmuladd.f64(double %1482, double %1482, double %1480)
  %1485 = fsub double %710, %1471
  %1486 = fsub double %710, %1472
  %1487 = tail call double @llvm.fmuladd.f64(double %1485, double %1485, double %1483)
  %1488 = tail call double @llvm.fmuladd.f64(double %1486, double %1486, double %1484)
  %1489 = getelementptr inbounds i16, ptr %425, i64 %1460
  %1490 = load i16, ptr %1489, align 2, !tbaa !45
  %1491 = or i64 %1460, 1
  %1492 = getelementptr inbounds i16, ptr %425, i64 %1491
  %1493 = load i16, ptr %1492, align 2, !tbaa !45
  %1494 = zext i16 %1490 to i64
  %1495 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1494
  %1496 = load double, ptr %1495, align 8, !tbaa !69
  %1497 = zext i16 %1493 to i64
  %1498 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1497
  %1499 = load double, ptr %1498, align 8, !tbaa !69
  %1500 = getelementptr inbounds %class.Vector, ptr %1495, i64 0, i32 1
  %1501 = load double, ptr %1500, align 8, !tbaa !68
  %1502 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 1
  %1503 = load double, ptr %1502, align 8, !tbaa !68
  %1504 = getelementptr inbounds %class.Vector, ptr %1495, i64 0, i32 2
  %1505 = load double, ptr %1504, align 8, !tbaa !50
  %1506 = getelementptr inbounds %class.Vector, ptr %1498, i64 0, i32 2
  %1507 = load double, ptr %1506, align 8, !tbaa !50
  %1508 = fcmp ugt double %1487, %24
  br i1 %1508, label %1521, label %1509

1509:                                             ; preds = %1459
  %1510 = shl i32 %1462, 2
  %1511 = ashr exact i32 %1510, 2
  %1512 = icmp slt i32 %1511, %733
  %1513 = icmp sgt i32 %1511, %735
  %1514 = select i1 %1512, i1 true, i1 %1513
  %1515 = select i1 %1514, ptr %1464, ptr %1463
  %1516 = zext i1 %1514 to i64
  %1517 = getelementptr inbounds i16, ptr %1464, i64 %1516
  %1518 = xor i1 %1514, true
  %1519 = zext i1 %1518 to i64
  %1520 = getelementptr inbounds i16, ptr %1463, i64 %1519
  store i16 %1465, ptr %1515, align 2, !tbaa !45
  br label %1521

1521:                                             ; preds = %1509, %1459
  %1522 = phi ptr [ %1464, %1459 ], [ %1517, %1509 ]
  %1523 = phi ptr [ %1463, %1459 ], [ %1520, %1509 ]
  %1524 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1494
  %1525 = load i32, ptr %1524, align 4
  %1526 = fcmp ugt double %1488, %24
  br i1 %1526, label %1537, label %1527

1527:                                             ; preds = %1521
  %1528 = icmp slt i32 %1476, %733
  %1529 = icmp sgt i32 %1476, %735
  %1530 = select i1 %1528, i1 true, i1 %1529
  %1531 = select i1 %1530, ptr %1522, ptr %1523
  %1532 = zext i1 %1530 to i64
  %1533 = getelementptr inbounds i16, ptr %1522, i64 %1532
  %1534 = xor i1 %1530, true
  %1535 = zext i1 %1534 to i64
  %1536 = getelementptr inbounds i16, ptr %1523, i64 %1535
  store i16 %1466, ptr %1531, align 2, !tbaa !45
  br label %1537

1537:                                             ; preds = %1527, %1521
  %1538 = phi ptr [ %1522, %1521 ], [ %1533, %1527 ]
  %1539 = phi ptr [ %1523, %1521 ], [ %1536, %1527 ]
  %1540 = add nuw nsw i64 %1460, 2
  %1541 = icmp ult i64 %1540, %1456
  br i1 %1541, label %1459, label %1542

1542:                                             ; preds = %1537
  %1543 = trunc i64 %1460 to i32
  br label %1544

1544:                                             ; preds = %1542, %1434
  %1545 = phi i32 [ %1543, %1542 ], [ 0, %1434 ]
  %1546 = phi ptr [ %1538, %1542 ], [ %1201, %1434 ]
  %1547 = phi ptr [ %1539, %1542 ], [ %471, %1434 ]
  %1548 = icmp slt i32 %1545, %1162
  br i1 %1548, label %1549, label %1593

1549:                                             ; preds = %1544
  %1550 = zext i32 %1545 to i64
  %1551 = zext i32 %1162 to i64
  %1552 = extractelement <2 x double> %707, i64 0
  %1553 = extractelement <2 x double> %707, i64 1
  br label %1554

1554:                                             ; preds = %1549, %1588
  %1555 = phi i64 [ %1550, %1549 ], [ %1591, %1588 ]
  %1556 = phi ptr [ %1547, %1549 ], [ %1590, %1588 ]
  %1557 = phi ptr [ %1546, %1549 ], [ %1589, %1588 ]
  %1558 = getelementptr inbounds i16, ptr %425, i64 %1555
  %1559 = load i16, ptr %1558, align 2, !tbaa !45
  %1560 = zext i16 %1559 to i64
  %1561 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1560
  %1562 = load double, ptr %1561, align 8, !tbaa !69
  %1563 = getelementptr inbounds %class.Vector, ptr %1561, i64 0, i32 1
  %1564 = load double, ptr %1563, align 8, !tbaa !68
  %1565 = getelementptr inbounds %class.Vector, ptr %1561, i64 0, i32 2
  %1566 = load double, ptr %1565, align 8, !tbaa !50
  %1567 = fsub double %1552, %1562
  %1568 = fmul double %1567, %1567
  %1569 = fsub double %1553, %1564
  %1570 = tail call double @llvm.fmuladd.f64(double %1569, double %1569, double %1568)
  %1571 = fsub double %710, %1566
  %1572 = tail call double @llvm.fmuladd.f64(double %1571, double %1571, double %1570)
  %1573 = fcmp ugt double %1572, %24
  br i1 %1573, label %1588, label %1574

1574:                                             ; preds = %1554
  %1575 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1560
  %1576 = load i32, ptr %1575, align 4
  %1577 = shl i32 %1576, 2
  %1578 = ashr exact i32 %1577, 2
  %1579 = icmp slt i32 %1578, %733
  %1580 = icmp sgt i32 %1578, %735
  %1581 = select i1 %1579, i1 true, i1 %1580
  %1582 = select i1 %1581, ptr %1557, ptr %1556
  %1583 = zext i1 %1581 to i64
  %1584 = getelementptr inbounds i16, ptr %1557, i64 %1583
  %1585 = xor i1 %1581, true
  %1586 = zext i1 %1585 to i64
  %1587 = getelementptr inbounds i16, ptr %1556, i64 %1586
  store i16 %1559, ptr %1582, align 2, !tbaa !45
  br label %1588

1588:                                             ; preds = %1574, %1554
  %1589 = phi ptr [ %1557, %1554 ], [ %1584, %1574 ]
  %1590 = phi ptr [ %1556, %1554 ], [ %1587, %1574 ]
  %1591 = add nuw nsw i64 %1555, 1
  %1592 = icmp eq i64 %1591, %1551
  br i1 %1592, label %1593, label %1554

1593:                                             ; preds = %1379, %1588, %1428, %1324, %1544, %1386, %1433
  %1594 = phi ptr [ %1201, %1433 ], [ %1201, %1386 ], [ %1546, %1544 ], [ %1201, %1324 ], [ %1429, %1428 ], [ %1589, %1588 ], [ %1380, %1379 ]
  %1595 = phi ptr [ %471, %1433 ], [ %471, %1386 ], [ %1547, %1544 ], [ %471, %1324 ], [ %1430, %1428 ], [ %1590, %1588 ], [ %1381, %1379 ]
  %1596 = icmp eq ptr %1594, %1201
  %1597 = icmp eq ptr %1595, %471
  %1598 = select i1 %1596, i1 %1597, i1 false
  br i1 %1598, label %1599, label %1601

1599:                                             ; preds = %1593
  %1600 = add nsw i32 %680, 1
  br label %2518

1601:                                             ; preds = %1593
  %1602 = trunc i32 %680 to i16
  %1603 = load i32, ptr %17, align 8, !tbaa !19
  %1604 = add nsw i32 %1603, -1
  %1605 = sext i32 %1604 to i64
  %1606 = getelementptr inbounds i16, ptr %1197, i64 %1605
  store i16 %1602, ptr %1606, align 2, !tbaa !45
  %1607 = ptrtoint ptr %1595 to i64
  %1608 = sub i64 %1607, %667
  %1609 = lshr exact i64 %1608, 1
  %1610 = trunc i64 %1609 to i32
  %1611 = icmp sgt i32 %1610, 0
  br i1 %1611, label %1612, label %1712

1612:                                             ; preds = %1601
  %1613 = and i64 %1609, 4294967295
  %1614 = and i64 %1609, 1
  %1615 = icmp eq i64 %1613, 1
  br i1 %1615, label %1680, label %1616

1616:                                             ; preds = %1612
  %1617 = sub nsw i64 %1613, %1614
  br label %1618

1618:                                             ; preds = %1673, %1616
  %1619 = phi i64 [ 0, %1616 ], [ %1677, %1673 ]
  %1620 = phi ptr [ %1594, %1616 ], [ %1676, %1673 ]
  %1621 = phi ptr [ %333, %1616 ], [ %1675, %1673 ]
  %1622 = phi ptr [ %379, %1616 ], [ %1674, %1673 ]
  %1623 = phi i64 [ 0, %1616 ], [ %1678, %1673 ]
  %1624 = getelementptr inbounds i16, ptr %471, i64 %1619
  %1625 = load i16, ptr %1624, align 2, !tbaa !45
  %1626 = zext i16 %1625 to i64
  %1627 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1626
  %1628 = load i32, ptr %1627, align 4
  %1629 = shl i32 %1628, 2
  %1630 = ashr exact i32 %1629, 2
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds i8, ptr %970, i64 %1631
  %1633 = load i8, ptr %1632, align 1, !tbaa !59
  %1634 = sext i8 %1633 to i32
  switch i32 %1634, label %1646 [
    i32 0, label %1635
    i32 1, label %1637
    i32 2, label %1639
  ]

1635:                                             ; preds = %1618
  %1636 = getelementptr inbounds i16, ptr %1620, i64 1
  br label %1641

1637:                                             ; preds = %1618
  %1638 = getelementptr inbounds i16, ptr %1621, i64 1
  br label %1641

1639:                                             ; preds = %1618
  %1640 = getelementptr inbounds i16, ptr %1622, i64 1
  br label %1641

1641:                                             ; preds = %1635, %1637, %1639
  %1642 = phi ptr [ %1622, %1639 ], [ %1621, %1637 ], [ %1620, %1635 ]
  %1643 = phi ptr [ %1640, %1639 ], [ %1622, %1637 ], [ %1622, %1635 ]
  %1644 = phi ptr [ %1621, %1639 ], [ %1638, %1637 ], [ %1621, %1635 ]
  %1645 = phi ptr [ %1620, %1639 ], [ %1620, %1637 ], [ %1636, %1635 ]
  store i16 %1625, ptr %1642, align 2, !tbaa !45
  br label %1646

1646:                                             ; preds = %1641, %1618
  %1647 = phi ptr [ %1622, %1618 ], [ %1643, %1641 ]
  %1648 = phi ptr [ %1621, %1618 ], [ %1644, %1641 ]
  %1649 = phi ptr [ %1620, %1618 ], [ %1645, %1641 ]
  %1650 = or i64 %1619, 1
  %1651 = getelementptr inbounds i16, ptr %471, i64 %1650
  %1652 = load i16, ptr %1651, align 2, !tbaa !45
  %1653 = zext i16 %1652 to i64
  %1654 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1653
  %1655 = load i32, ptr %1654, align 4
  %1656 = shl i32 %1655, 2
  %1657 = ashr exact i32 %1656, 2
  %1658 = sext i32 %1657 to i64
  %1659 = getelementptr inbounds i8, ptr %970, i64 %1658
  %1660 = load i8, ptr %1659, align 1, !tbaa !59
  %1661 = sext i8 %1660 to i32
  switch i32 %1661, label %1673 [
    i32 0, label %1666
    i32 1, label %1664
    i32 2, label %1662
  ]

1662:                                             ; preds = %1646
  %1663 = getelementptr inbounds i16, ptr %1647, i64 1
  br label %1668

1664:                                             ; preds = %1646
  %1665 = getelementptr inbounds i16, ptr %1648, i64 1
  br label %1668

1666:                                             ; preds = %1646
  %1667 = getelementptr inbounds i16, ptr %1649, i64 1
  br label %1668

1668:                                             ; preds = %1666, %1664, %1662
  %1669 = phi ptr [ %1647, %1662 ], [ %1648, %1664 ], [ %1649, %1666 ]
  %1670 = phi ptr [ %1663, %1662 ], [ %1647, %1664 ], [ %1647, %1666 ]
  %1671 = phi ptr [ %1648, %1662 ], [ %1665, %1664 ], [ %1648, %1666 ]
  %1672 = phi ptr [ %1649, %1662 ], [ %1649, %1664 ], [ %1667, %1666 ]
  store i16 %1652, ptr %1669, align 2, !tbaa !45
  br label %1673

1673:                                             ; preds = %1668, %1646
  %1674 = phi ptr [ %1647, %1646 ], [ %1670, %1668 ]
  %1675 = phi ptr [ %1648, %1646 ], [ %1671, %1668 ]
  %1676 = phi ptr [ %1649, %1646 ], [ %1672, %1668 ]
  %1677 = add nuw nsw i64 %1619, 2
  %1678 = add i64 %1623, 2
  %1679 = icmp eq i64 %1678, %1617
  br i1 %1679, label %1680, label %1618

1680:                                             ; preds = %1673, %1612
  %1681 = phi ptr [ undef, %1612 ], [ %1674, %1673 ]
  %1682 = phi ptr [ undef, %1612 ], [ %1675, %1673 ]
  %1683 = phi ptr [ undef, %1612 ], [ %1676, %1673 ]
  %1684 = phi i64 [ 0, %1612 ], [ %1677, %1673 ]
  %1685 = phi ptr [ %1594, %1612 ], [ %1676, %1673 ]
  %1686 = phi ptr [ %333, %1612 ], [ %1675, %1673 ]
  %1687 = phi ptr [ %379, %1612 ], [ %1674, %1673 ]
  %1688 = icmp eq i64 %1614, 0
  br i1 %1688, label %1712, label %1689

1689:                                             ; preds = %1680
  %1690 = getelementptr inbounds i16, ptr %471, i64 %1684
  %1691 = load i16, ptr %1690, align 2, !tbaa !45
  %1692 = zext i16 %1691 to i64
  %1693 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1692
  %1694 = load i32, ptr %1693, align 4
  %1695 = shl i32 %1694, 2
  %1696 = ashr exact i32 %1695, 2
  %1697 = sext i32 %1696 to i64
  %1698 = getelementptr inbounds i8, ptr %970, i64 %1697
  %1699 = load i8, ptr %1698, align 1, !tbaa !59
  %1700 = sext i8 %1699 to i32
  switch i32 %1700, label %1712 [
    i32 0, label %1705
    i32 1, label %1703
    i32 2, label %1701
  ]

1701:                                             ; preds = %1689
  %1702 = getelementptr inbounds i16, ptr %1687, i64 1
  br label %1707

1703:                                             ; preds = %1689
  %1704 = getelementptr inbounds i16, ptr %1686, i64 1
  br label %1707

1705:                                             ; preds = %1689
  %1706 = getelementptr inbounds i16, ptr %1685, i64 1
  br label %1707

1707:                                             ; preds = %1705, %1703, %1701
  %1708 = phi ptr [ %1687, %1701 ], [ %1686, %1703 ], [ %1685, %1705 ]
  %1709 = phi ptr [ %1702, %1701 ], [ %1687, %1703 ], [ %1687, %1705 ]
  %1710 = phi ptr [ %1686, %1701 ], [ %1704, %1703 ], [ %1686, %1705 ]
  %1711 = phi ptr [ %1685, %1701 ], [ %1685, %1703 ], [ %1706, %1705 ]
  store i16 %1691, ptr %1708, align 2, !tbaa !45
  br label %1712

1712:                                             ; preds = %1680, %1707, %1689, %1601
  %1713 = phi ptr [ %379, %1601 ], [ %1681, %1680 ], [ %1687, %1689 ], [ %1709, %1707 ]
  %1714 = phi ptr [ %333, %1601 ], [ %1682, %1680 ], [ %1686, %1689 ], [ %1710, %1707 ]
  %1715 = phi ptr [ %1594, %1601 ], [ %1683, %1680 ], [ %1685, %1689 ], [ %1711, %1707 ]
  %1716 = ptrtoint ptr %1715 to i64
  %1717 = ptrtoint ptr %1201 to i64
  %1718 = sub i64 %1716, %1717
  %1719 = lshr exact i64 %1718, 1
  %1720 = trunc i64 %1719 to i32
  %1721 = icmp eq i32 %1720, 0
  %1722 = shl i64 %1718, 31
  br i1 %1721, label %1728, label %1723

1723:                                             ; preds = %1712
  %1724 = add i64 %1722, -4294967296
  %1725 = ashr i64 %1724, 32
  %1726 = getelementptr inbounds i16, ptr %1201, i64 %1725
  %1727 = load i16, ptr %1726, align 2, !tbaa !45
  br label %1728

1728:                                             ; preds = %1712, %1723
  %1729 = phi i16 [ %1727, %1723 ], [ -1, %1712 ]
  %1730 = ashr i64 %1722, 32
  %1731 = getelementptr inbounds i16, ptr %1201, i64 %1730
  store i16 %1729, ptr %1731, align 2, !tbaa !45
  %1732 = trunc i64 %1719 to i16
  %1733 = add i16 %1732, 1
  %1734 = sext i32 %1603 to i64
  %1735 = getelementptr inbounds i16, ptr %1197, i64 %1734
  store i16 %1733, ptr %1735, align 2, !tbaa !45
  %1736 = add i32 %1603, 2
  %1737 = add i32 %1736, %1720
  %1738 = ptrtoint ptr %1714 to i64
  %1739 = sub i64 %1738, %669
  %1740 = lshr exact i64 %1739, 1
  %1741 = trunc i64 %1740 to i32
  %1742 = add nsw i32 %1737, 1
  %1743 = sext i32 %1742 to i64
  %1744 = getelementptr i16, ptr %1197, i64 %1743
  %1745 = icmp sgt i32 %1741, 0
  br i1 %1745, label %1746, label %1836

1746:                                             ; preds = %1728
  %1747 = and i64 %1740, 4294967295
  %1748 = icmp ult i64 %1747, 8
  br i1 %1748, label %1792, label %1749

1749:                                             ; preds = %1746
  %1750 = shl nsw i64 %1743, 1
  %1751 = add i64 %1750, %1198
  %1752 = sub i64 %1751, %669
  %1753 = icmp ult i64 %1752, 128
  br i1 %1753, label %1792, label %1754

1754:                                             ; preds = %1749
  %1755 = icmp ult i64 %1747, 64
  br i1 %1755, label %1779, label %1756

1756:                                             ; preds = %1754
  %1757 = and i64 %1740, 63
  %1758 = sub nsw i64 %1747, %1757
  br label %1759

1759:                                             ; preds = %1759, %1756
  %1760 = phi i64 [ 0, %1756 ], [ %1773, %1759 ]
  %1761 = getelementptr inbounds i16, ptr %333, i64 %1760
  %1762 = load <16 x i16>, ptr %1761, align 2, !tbaa !45
  %1763 = getelementptr inbounds i16, ptr %1761, i64 16
  %1764 = load <16 x i16>, ptr %1763, align 2, !tbaa !45
  %1765 = getelementptr inbounds i16, ptr %1761, i64 32
  %1766 = load <16 x i16>, ptr %1765, align 2, !tbaa !45
  %1767 = getelementptr inbounds i16, ptr %1761, i64 48
  %1768 = load <16 x i16>, ptr %1767, align 2, !tbaa !45
  %1769 = getelementptr inbounds i16, ptr %1744, i64 %1760
  store <16 x i16> %1762, ptr %1769, align 2, !tbaa !45
  %1770 = getelementptr inbounds i16, ptr %1769, i64 16
  store <16 x i16> %1764, ptr %1770, align 2, !tbaa !45
  %1771 = getelementptr inbounds i16, ptr %1769, i64 32
  store <16 x i16> %1766, ptr %1771, align 2, !tbaa !45
  %1772 = getelementptr inbounds i16, ptr %1769, i64 48
  store <16 x i16> %1768, ptr %1772, align 2, !tbaa !45
  %1773 = add nuw i64 %1760, 64
  %1774 = icmp eq i64 %1773, %1758
  br i1 %1774, label %1775, label %1759, !llvm.loop !154

1775:                                             ; preds = %1759
  %1776 = icmp eq i64 %1757, 0
  br i1 %1776, label %1830, label %1777

1777:                                             ; preds = %1775
  %1778 = icmp ult i64 %1757, 8
  br i1 %1778, label %1792, label %1779

1779:                                             ; preds = %1754, %1777
  %1780 = phi i64 [ %1758, %1777 ], [ 0, %1754 ]
  %1781 = and i64 %1740, 7
  %1782 = sub nsw i64 %1747, %1781
  br label %1783

1783:                                             ; preds = %1783, %1779
  %1784 = phi i64 [ %1780, %1779 ], [ %1788, %1783 ]
  %1785 = getelementptr inbounds i16, ptr %333, i64 %1784
  %1786 = load <8 x i16>, ptr %1785, align 2, !tbaa !45
  %1787 = getelementptr inbounds i16, ptr %1744, i64 %1784
  store <8 x i16> %1786, ptr %1787, align 2, !tbaa !45
  %1788 = add nuw i64 %1784, 8
  %1789 = icmp eq i64 %1788, %1782
  br i1 %1789, label %1790, label %1783, !llvm.loop !155

1790:                                             ; preds = %1783
  %1791 = icmp eq i64 %1781, 0
  br i1 %1791, label %1830, label %1792

1792:                                             ; preds = %1749, %1746, %1777, %1790
  %1793 = phi i64 [ 0, %1746 ], [ 0, %1749 ], [ %1758, %1777 ], [ %1782, %1790 ]
  %1794 = sub i64 %1740, %1793
  %1795 = xor i64 %1793, -1
  %1796 = add nsw i64 %1747, %1795
  %1797 = and i64 %1794, 3
  %1798 = icmp eq i64 %1797, 0
  br i1 %1798, label %1808, label %1799

1799:                                             ; preds = %1792, %1799
  %1800 = phi i64 [ %1805, %1799 ], [ %1793, %1792 ]
  %1801 = phi i64 [ %1806, %1799 ], [ 0, %1792 ]
  %1802 = getelementptr inbounds i16, ptr %333, i64 %1800
  %1803 = load i16, ptr %1802, align 2, !tbaa !45
  %1804 = getelementptr inbounds i16, ptr %1744, i64 %1800
  store i16 %1803, ptr %1804, align 2, !tbaa !45
  %1805 = add nuw nsw i64 %1800, 1
  %1806 = add i64 %1801, 1
  %1807 = icmp eq i64 %1806, %1797
  br i1 %1807, label %1808, label %1799, !llvm.loop !156

1808:                                             ; preds = %1799, %1792
  %1809 = phi i64 [ %1793, %1792 ], [ %1805, %1799 ]
  %1810 = icmp ult i64 %1796, 3
  br i1 %1810, label %1830, label %1811

1811:                                             ; preds = %1808, %1811
  %1812 = phi i64 [ %1828, %1811 ], [ %1809, %1808 ]
  %1813 = getelementptr inbounds i16, ptr %333, i64 %1812
  %1814 = load i16, ptr %1813, align 2, !tbaa !45
  %1815 = getelementptr inbounds i16, ptr %1744, i64 %1812
  store i16 %1814, ptr %1815, align 2, !tbaa !45
  %1816 = add nuw nsw i64 %1812, 1
  %1817 = getelementptr inbounds i16, ptr %333, i64 %1816
  %1818 = load i16, ptr %1817, align 2, !tbaa !45
  %1819 = getelementptr inbounds i16, ptr %1744, i64 %1816
  store i16 %1818, ptr %1819, align 2, !tbaa !45
  %1820 = add nuw nsw i64 %1812, 2
  %1821 = getelementptr inbounds i16, ptr %333, i64 %1820
  %1822 = load i16, ptr %1821, align 2, !tbaa !45
  %1823 = getelementptr inbounds i16, ptr %1744, i64 %1820
  store i16 %1822, ptr %1823, align 2, !tbaa !45
  %1824 = add nuw nsw i64 %1812, 3
  %1825 = getelementptr inbounds i16, ptr %333, i64 %1824
  %1826 = load i16, ptr %1825, align 2, !tbaa !45
  %1827 = getelementptr inbounds i16, ptr %1744, i64 %1824
  store i16 %1826, ptr %1827, align 2, !tbaa !45
  %1828 = add nuw nsw i64 %1812, 4
  %1829 = icmp eq i64 %1828, %1747
  br i1 %1829, label %1830, label %1811, !llvm.loop !157

1830:                                             ; preds = %1808, %1811, %1775, %1790
  %1831 = shl i64 %1739, 31
  %1832 = add i64 %1831, -4294967296
  %1833 = ashr i64 %1832, 32
  %1834 = getelementptr inbounds i16, ptr %1744, i64 %1833
  %1835 = load i16, ptr %1834, align 2, !tbaa !45
  br label %1836

1836:                                             ; preds = %1728, %1830
  %1837 = phi i64 [ %1740, %1830 ], [ 0, %1728 ]
  %1838 = phi i16 [ %1835, %1830 ], [ -1, %1728 ]
  %1839 = and i64 %1837, 4294967295
  %1840 = getelementptr inbounds i16, ptr %1744, i64 %1839
  store i16 %1838, ptr %1840, align 2, !tbaa !45
  %1841 = trunc i64 %1740 to i16
  %1842 = add i16 %1841, 1
  %1843 = sext i32 %1737 to i64
  %1844 = getelementptr inbounds i16, ptr %1197, i64 %1843
  store i16 %1842, ptr %1844, align 2, !tbaa !45
  %1845 = add nsw i32 %1741, 2
  %1846 = add nsw i32 %1845, %1737
  %1847 = ptrtoint ptr %1713 to i64
  %1848 = sub i64 %1847, %670
  %1849 = lshr exact i64 %1848, 1
  %1850 = trunc i64 %1849 to i32
  %1851 = add nsw i32 %1846, 1
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr i16, ptr %1197, i64 %1852
  %1854 = icmp sgt i32 %1850, 0
  br i1 %1854, label %1855, label %1945

1855:                                             ; preds = %1836
  %1856 = and i64 %1849, 4294967295
  %1857 = icmp ult i64 %1856, 8
  br i1 %1857, label %1901, label %1858

1858:                                             ; preds = %1855
  %1859 = shl nsw i64 %1852, 1
  %1860 = add i64 %1859, %1198
  %1861 = sub i64 %1860, %670
  %1862 = icmp ult i64 %1861, 128
  br i1 %1862, label %1901, label %1863

1863:                                             ; preds = %1858
  %1864 = icmp ult i64 %1856, 64
  br i1 %1864, label %1888, label %1865

1865:                                             ; preds = %1863
  %1866 = and i64 %1849, 63
  %1867 = sub nsw i64 %1856, %1866
  br label %1868

1868:                                             ; preds = %1868, %1865
  %1869 = phi i64 [ 0, %1865 ], [ %1882, %1868 ]
  %1870 = getelementptr inbounds i16, ptr %379, i64 %1869
  %1871 = load <16 x i16>, ptr %1870, align 2, !tbaa !45
  %1872 = getelementptr inbounds i16, ptr %1870, i64 16
  %1873 = load <16 x i16>, ptr %1872, align 2, !tbaa !45
  %1874 = getelementptr inbounds i16, ptr %1870, i64 32
  %1875 = load <16 x i16>, ptr %1874, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1870, i64 48
  %1877 = load <16 x i16>, ptr %1876, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1853, i64 %1869
  store <16 x i16> %1871, ptr %1878, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1878, i64 16
  store <16 x i16> %1873, ptr %1879, align 2, !tbaa !45
  %1880 = getelementptr inbounds i16, ptr %1878, i64 32
  store <16 x i16> %1875, ptr %1880, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1878, i64 48
  store <16 x i16> %1877, ptr %1881, align 2, !tbaa !45
  %1882 = add nuw i64 %1869, 64
  %1883 = icmp eq i64 %1882, %1867
  br i1 %1883, label %1884, label %1868, !llvm.loop !158

1884:                                             ; preds = %1868
  %1885 = icmp eq i64 %1866, 0
  br i1 %1885, label %1939, label %1886

1886:                                             ; preds = %1884
  %1887 = icmp ult i64 %1866, 8
  br i1 %1887, label %1901, label %1888

1888:                                             ; preds = %1863, %1886
  %1889 = phi i64 [ %1867, %1886 ], [ 0, %1863 ]
  %1890 = and i64 %1849, 7
  %1891 = sub nsw i64 %1856, %1890
  br label %1892

1892:                                             ; preds = %1892, %1888
  %1893 = phi i64 [ %1889, %1888 ], [ %1897, %1892 ]
  %1894 = getelementptr inbounds i16, ptr %379, i64 %1893
  %1895 = load <8 x i16>, ptr %1894, align 2, !tbaa !45
  %1896 = getelementptr inbounds i16, ptr %1853, i64 %1893
  store <8 x i16> %1895, ptr %1896, align 2, !tbaa !45
  %1897 = add nuw i64 %1893, 8
  %1898 = icmp eq i64 %1897, %1891
  br i1 %1898, label %1899, label %1892, !llvm.loop !159

1899:                                             ; preds = %1892
  %1900 = icmp eq i64 %1890, 0
  br i1 %1900, label %1939, label %1901

1901:                                             ; preds = %1858, %1855, %1886, %1899
  %1902 = phi i64 [ 0, %1855 ], [ 0, %1858 ], [ %1867, %1886 ], [ %1891, %1899 ]
  %1903 = sub i64 %1849, %1902
  %1904 = xor i64 %1902, -1
  %1905 = add nsw i64 %1856, %1904
  %1906 = and i64 %1903, 3
  %1907 = icmp eq i64 %1906, 0
  br i1 %1907, label %1917, label %1908

1908:                                             ; preds = %1901, %1908
  %1909 = phi i64 [ %1914, %1908 ], [ %1902, %1901 ]
  %1910 = phi i64 [ %1915, %1908 ], [ 0, %1901 ]
  %1911 = getelementptr inbounds i16, ptr %379, i64 %1909
  %1912 = load i16, ptr %1911, align 2, !tbaa !45
  %1913 = getelementptr inbounds i16, ptr %1853, i64 %1909
  store i16 %1912, ptr %1913, align 2, !tbaa !45
  %1914 = add nuw nsw i64 %1909, 1
  %1915 = add i64 %1910, 1
  %1916 = icmp eq i64 %1915, %1906
  br i1 %1916, label %1917, label %1908, !llvm.loop !160

1917:                                             ; preds = %1908, %1901
  %1918 = phi i64 [ %1902, %1901 ], [ %1914, %1908 ]
  %1919 = icmp ult i64 %1905, 3
  br i1 %1919, label %1939, label %1920

1920:                                             ; preds = %1917, %1920
  %1921 = phi i64 [ %1937, %1920 ], [ %1918, %1917 ]
  %1922 = getelementptr inbounds i16, ptr %379, i64 %1921
  %1923 = load i16, ptr %1922, align 2, !tbaa !45
  %1924 = getelementptr inbounds i16, ptr %1853, i64 %1921
  store i16 %1923, ptr %1924, align 2, !tbaa !45
  %1925 = add nuw nsw i64 %1921, 1
  %1926 = getelementptr inbounds i16, ptr %379, i64 %1925
  %1927 = load i16, ptr %1926, align 2, !tbaa !45
  %1928 = getelementptr inbounds i16, ptr %1853, i64 %1925
  store i16 %1927, ptr %1928, align 2, !tbaa !45
  %1929 = add nuw nsw i64 %1921, 2
  %1930 = getelementptr inbounds i16, ptr %379, i64 %1929
  %1931 = load i16, ptr %1930, align 2, !tbaa !45
  %1932 = getelementptr inbounds i16, ptr %1853, i64 %1929
  store i16 %1931, ptr %1932, align 2, !tbaa !45
  %1933 = add nuw nsw i64 %1921, 3
  %1934 = getelementptr inbounds i16, ptr %379, i64 %1933
  %1935 = load i16, ptr %1934, align 2, !tbaa !45
  %1936 = getelementptr inbounds i16, ptr %1853, i64 %1933
  store i16 %1935, ptr %1936, align 2, !tbaa !45
  %1937 = add nuw nsw i64 %1921, 4
  %1938 = icmp eq i64 %1937, %1856
  br i1 %1938, label %1939, label %1920, !llvm.loop !161

1939:                                             ; preds = %1917, %1920, %1884, %1899
  %1940 = shl i64 %1848, 31
  %1941 = add i64 %1940, -4294967296
  %1942 = ashr i64 %1941, 32
  %1943 = getelementptr inbounds i16, ptr %1853, i64 %1942
  %1944 = load i16, ptr %1943, align 2, !tbaa !45
  br label %1945

1945:                                             ; preds = %1836, %1939
  %1946 = phi i64 [ %1849, %1939 ], [ 0, %1836 ]
  %1947 = phi i16 [ %1944, %1939 ], [ -1, %1836 ]
  %1948 = and i64 %1946, 4294967295
  %1949 = getelementptr inbounds i16, ptr %1853, i64 %1948
  store i16 %1947, ptr %1949, align 2, !tbaa !45
  %1950 = trunc i64 %1849 to i16
  %1951 = add i16 %1950, 1
  %1952 = sext i32 %1846 to i64
  %1953 = getelementptr inbounds i16, ptr %1197, i64 %1952
  store i16 %1951, ptr %1953, align 2, !tbaa !45
  %1954 = add i32 %1850, 3
  %1955 = add i32 %1954, %1846
  %1956 = select i1 %146, i32 1, i32 %1955
  store i32 %1956, ptr %17, align 8, !tbaa !19
  br label %1987

1957:                                             ; preds = %704
  %1958 = load ptr, ptr %12, align 8, !tbaa !47
  %1959 = load i32, ptr %17, align 8, !tbaa !19
  %1960 = add i32 %1959, 1
  %1961 = sext i32 %1960 to i64
  %1962 = getelementptr inbounds i16, ptr %1958, i64 %1961
  %1963 = sext i32 %1959 to i64
  %1964 = getelementptr inbounds i16, ptr %1958, i64 %1963
  %1965 = load i16, ptr %1964, align 2, !tbaa !45
  %1966 = zext i16 %1965 to i32
  %1967 = add i32 %1960, %1966
  %1968 = add nsw i32 %1966, -1
  %1969 = add i32 %1967, 1
  %1970 = sext i32 %1969 to i64
  %1971 = getelementptr inbounds i16, ptr %1958, i64 %1970
  %1972 = sext i32 %1967 to i64
  %1973 = getelementptr inbounds i16, ptr %1958, i64 %1972
  %1974 = load i16, ptr %1973, align 2, !tbaa !45
  %1975 = zext i16 %1974 to i32
  %1976 = add i32 %1969, %1975
  %1977 = add nsw i32 %1975, -1
  %1978 = add i32 %1976, 1
  %1979 = sext i32 %1978 to i64
  %1980 = getelementptr inbounds i16, ptr %1958, i64 %1979
  %1981 = sext i32 %1976 to i64
  %1982 = getelementptr inbounds i16, ptr %1958, i64 %1981
  %1983 = load i16, ptr %1982, align 2, !tbaa !45
  %1984 = zext i16 %1983 to i32
  %1985 = add i32 %1978, %1984
  store i32 %1985, ptr %17, align 8, !tbaa !19
  %1986 = add nsw i32 %1984, -1
  br label %1987

1987:                                             ; preds = %1945, %1957
  %1988 = phi i32 [ %1977, %1957 ], [ %1741, %1945 ]
  %1989 = phi ptr [ %1980, %1957 ], [ %1853, %1945 ]
  %1990 = phi i32 [ %1986, %1957 ], [ %1850, %1945 ]
  %1991 = phi ptr [ %1971, %1957 ], [ %1744, %1945 ]
  %1992 = phi i32 [ %1968, %1957 ], [ %1720, %1945 ]
  %1993 = phi ptr [ %1962, %1957 ], [ %1201, %1945 ]
  %1994 = phi i32 [ %684, %1957 ], [ %1162, %1945 ]
  %1995 = phi ptr [ %683, %1957 ], [ %971, %1945 ]
  %1996 = phi ptr [ %682, %1957 ], [ %972, %1945 ]
  %1997 = phi ptr [ %681, %1957 ], [ %973, %1945 ]
  %1998 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1999 = icmp eq i32 %1998, 0
  %2000 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2001 = icmp ne i32 %2000, 0
  %2002 = select i1 %1999, i1 true, i1 %2001
  br i1 %2002, label %2007, label %2003

2003:                                             ; preds = %1987
  %2004 = load i8, ptr %711, align 2, !tbaa !52
  %2005 = icmp eq i8 %2004, 1
  %2006 = select i1 %2005, double 1.000000e+00, double -1.000000e+00
  br label %2007

2007:                                             ; preds = %1987, %2003
  %2008 = phi double [ %2006, %2003 ], [ 0.000000e+00, %1987 ]
  %2009 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %689, i32 1
  %2010 = load float, ptr %2009, align 8, !tbaa !81
  %2011 = fpext float %2010 to double
  %2012 = fmul double %2011, 0x4074C104816F0069
  %2013 = fmul double %32, %2012
  %2014 = fmul double %28, %2013
  %2015 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2016 = extractelement <2 x double> %707, i64 0
  %2017 = extractelement <2 x double> %707, i64 1
  %2018 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2015, double noundef %2016, double noundef %2017, double noundef %710, ptr noundef %45, ptr noundef nonnull %1993, i32 noundef %1992, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2019 = icmp sgt i32 %2018, 0
  br i1 %2019, label %2020, label %2164

2020:                                             ; preds = %2007
  %2021 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2022 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2023 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2024 = mul nsw i32 %2023, %713
  %2025 = mul i32 %2022, 3
  %2026 = mul nsw i32 %725, 3
  %2027 = sext i32 %2026 to i64
  %2028 = add nsw i32 %2026, 1
  %2029 = sext i32 %2028 to i64
  %2030 = add nsw i32 %2026, 2
  %2031 = sext i32 %2030 to i64
  %2032 = zext i32 %2018 to i64
  br label %2033

2033:                                             ; preds = %2020, %2033
  %2034 = phi i64 [ 0, %2020 ], [ %2162, %2033 ]
  %2035 = phi double [ 0.000000e+00, %2020 ], [ %2107, %2033 ]
  %2036 = phi <2 x double> [ %686, %2020 ], [ %2099, %2033 ]
  %2037 = phi <2 x double> [ %687, %2020 ], [ %2092, %2033 ]
  %2038 = phi <2 x double> [ %688, %2020 ], [ %2105, %2033 ]
  %2039 = phi <2 x double> [ zeroinitializer, %2020 ], [ %2101, %2033 ]
  %2040 = shl nuw nsw i64 %2034, 1
  %2041 = getelementptr inbounds i32, ptr %145, i64 %2040
  %2042 = load i32, ptr %2041, align 4, !tbaa !5
  %2043 = ashr i32 %2042, 14
  %2044 = add nsw i32 %2043, %38
  %2045 = getelementptr inbounds i16, ptr %98, i64 %2034
  %2046 = load i16, ptr %2045, align 2, !tbaa !45
  %2047 = zext i16 %2046 to i64
  %2048 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2047
  %2049 = getelementptr inbounds double, ptr %144, i64 %2034
  %2050 = load double, ptr %2049, align 8, !tbaa !15
  %2051 = sext i32 %2044 to i64
  %2052 = getelementptr inbounds double, ptr %2021, i64 %2051
  %2053 = load double, ptr %2052, align 8, !tbaa !15
  %2054 = fsub double %2050, %2053
  %2055 = shl nsw i32 %2044, 4
  %2056 = sext i32 %2055 to i64
  %2057 = getelementptr inbounds double, ptr %30, i64 %2056
  %2058 = getelementptr inbounds %class.Vector, ptr %652, i64 %2047
  %2059 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2047, i32 1
  %2060 = load float, ptr %2059, align 8, !tbaa !81
  %2061 = fpext float %2060 to double
  %2062 = fmul double %2014, %2061
  %2063 = load <2 x double>, ptr %2048, align 8, !tbaa !15
  %2064 = fsub <2 x double> %707, %2063
  %2065 = getelementptr inbounds %class.Vector, ptr %2048, i64 0, i32 2
  %2066 = load double, ptr %2065, align 8, !tbaa !50
  %2067 = fsub double %710, %2066
  %2068 = getelementptr inbounds double, ptr %2057, i64 12
  %2069 = load double, ptr %2068, align 8, !tbaa !15
  %2070 = getelementptr inbounds double, ptr %2057, i64 13
  %2071 = load double, ptr %2070, align 8, !tbaa !15
  %2072 = getelementptr inbounds double, ptr %2057, i64 14
  %2073 = load double, ptr %2072, align 8, !tbaa !15
  %2074 = fmul double %2062, %2069
  %2075 = fmul double %2062, %2071
  %2076 = fmul double %2062, %2073
  %2077 = tail call double @llvm.fmuladd.f64(double %2054, double %2074, double %2075)
  %2078 = tail call double @llvm.fmuladd.f64(double %2077, double %2054, double %2076)
  %2079 = fmul double %2008, %2078
  %2080 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2081 = insertelement <2 x double> poison, double %2079, i64 0
  %2082 = shufflevector <2 x double> %2081, <2 x double> poison, <2 x i32> zeroinitializer
  %2083 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2082, <2 x double> %2064, <2 x double> %2080)
  store <2 x double> %2083, ptr %671, align 8, !tbaa !15
  %2084 = load double, ptr %672, align 8, !tbaa !15
  %2085 = tail call double @llvm.fmuladd.f64(double %2079, double %2067, double %2084)
  store double %2085, ptr %672, align 8, !tbaa !15
  %2086 = extractelement <2 x double> %2064, i64 1
  %2087 = fmul double %2086, %2078
  %2088 = insertelement <2 x double> poison, double %2087, i64 0
  %2089 = shufflevector <2 x double> %2088, <2 x double> poison, <2 x i32> zeroinitializer
  %2090 = shufflevector <2 x double> %2064, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2091 = insertelement <2 x double> %2090, double %2067, i64 1
  %2092 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2089, <2 x double> %2091, <2 x double> %2037)
  %2093 = insertelement <2 x double> %2090, double %2067, i64 0
  %2094 = insertelement <2 x double> poison, double %2078, i64 0
  %2095 = shufflevector <2 x double> %2094, <2 x double> poison, <2 x i32> zeroinitializer
  %2096 = fmul <2 x double> %2093, %2095
  %2097 = shufflevector <2 x double> %2096, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2098 = shufflevector <2 x double> %2096, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2099 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2098, <2 x double> %2064, <2 x double> %2036)
  %2100 = insertelement <2 x double> %2097, double %2087, i64 1
  %2101 = fadd <2 x double> %2039, %2100
  %2102 = load <2 x double>, ptr %2058, align 8, !tbaa !15
  %2103 = fsub <2 x double> %2102, %2100
  store <2 x double> %2103, ptr %2058, align 8, !tbaa !15
  %2104 = shufflevector <2 x double> %2093, <2 x double> poison, <2 x i32> zeroinitializer
  %2105 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2096, <2 x double> %2104, <2 x double> %2038)
  %2106 = extractelement <2 x double> %2096, i64 0
  %2107 = fadd double %2035, %2106
  %2108 = getelementptr inbounds %class.Vector, ptr %652, i64 %2047, i32 2
  %2109 = load double, ptr %2108, align 8, !tbaa !89
  %2110 = fsub double %2109, %2106
  store double %2110, ptr %2108, align 8, !tbaa !89
  %2111 = load double, ptr %2065, align 8, !tbaa !50
  %2112 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2113 = fsub double %2111, %2112
  %2114 = fmul double %10, %2113
  %2115 = tail call double @llvm.floor.f64(double %2114)
  %2116 = fptosi double %2115 to i32
  %2117 = icmp slt i32 %2116, 0
  %2118 = select i1 %2117, i32 %2022, i32 0
  %2119 = icmp sgt i32 %2022, %2116
  %2120 = select i1 %2119, i32 0, i32 %2022
  %2121 = sub i32 %2116, %2120
  %2122 = add i32 %2121, %2118
  %2123 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2047, i32 3
  %2124 = load i8, ptr %2123, align 2, !tbaa !52
  %2125 = zext i8 %2124 to i32
  %2126 = shufflevector <2 x double> %2096, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2127 = fmul <2 x double> %2064, %2126
  %2128 = extractelement <2 x double> %2127, i64 0
  %2129 = fmul double %2086, %2087
  %2130 = fmul double %2067, %2106
  %2131 = add nsw i32 %2024, %2125
  %2132 = mul i32 %2025, %2131
  %2133 = sext i32 %2132 to i64
  %2134 = getelementptr inbounds double, ptr %8, i64 %2133
  %2135 = fmul double %2128, 5.000000e-01
  %2136 = fmul double %2129, 5.000000e-01
  %2137 = fmul double %2130, 5.000000e-01
  %2138 = getelementptr inbounds double, ptr %2134, i64 %2027
  %2139 = load double, ptr %2138, align 8, !tbaa !15
  %2140 = fadd double %2135, %2139
  store double %2140, ptr %2138, align 8, !tbaa !15
  %2141 = getelementptr inbounds double, ptr %2134, i64 %2029
  %2142 = load double, ptr %2141, align 8, !tbaa !15
  %2143 = fadd double %2136, %2142
  store double %2143, ptr %2141, align 8, !tbaa !15
  %2144 = getelementptr inbounds double, ptr %2134, i64 %2031
  %2145 = load double, ptr %2144, align 8, !tbaa !15
  %2146 = fadd double %2137, %2145
  store double %2146, ptr %2144, align 8, !tbaa !15
  %2147 = mul nsw i32 %2122, 3
  %2148 = sext i32 %2147 to i64
  %2149 = getelementptr inbounds double, ptr %2134, i64 %2148
  %2150 = load double, ptr %2149, align 8, !tbaa !15
  %2151 = fadd double %2135, %2150
  store double %2151, ptr %2149, align 8, !tbaa !15
  %2152 = add nsw i32 %2147, 1
  %2153 = sext i32 %2152 to i64
  %2154 = getelementptr inbounds double, ptr %2134, i64 %2153
  %2155 = load double, ptr %2154, align 8, !tbaa !15
  %2156 = fadd double %2136, %2155
  store double %2156, ptr %2154, align 8, !tbaa !15
  %2157 = add nsw i32 %2147, 2
  %2158 = sext i32 %2157 to i64
  %2159 = getelementptr inbounds double, ptr %2134, i64 %2158
  %2160 = load double, ptr %2159, align 8, !tbaa !15
  %2161 = fadd double %2137, %2160
  store double %2161, ptr %2159, align 8, !tbaa !15
  %2162 = add nuw nsw i64 %2034, 1
  %2163 = icmp eq i64 %2162, %2032
  br i1 %2163, label %2164, label %2033

2164:                                             ; preds = %2033, %2007
  %2165 = phi double [ 0.000000e+00, %2007 ], [ %2107, %2033 ]
  %2166 = phi <2 x double> [ %686, %2007 ], [ %2099, %2033 ]
  %2167 = phi <2 x double> [ %687, %2007 ], [ %2092, %2033 ]
  %2168 = phi <2 x double> [ %688, %2007 ], [ %2105, %2033 ]
  %2169 = phi <2 x double> [ zeroinitializer, %2007 ], [ %2101, %2033 ]
  %2170 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2171 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2170, double noundef %2016, double noundef %2017, double noundef %710, ptr noundef %45, ptr noundef %1989, i32 noundef %1990, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2172 = add nsw i32 %2171, %679
  %2173 = icmp sgt i32 %2171, 0
  br i1 %2173, label %2174, label %2330

2174:                                             ; preds = %2164
  %2175 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2176 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2177 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2178 = mul nsw i32 %2177, %713
  %2179 = mul i32 %2176, 3
  %2180 = mul nsw i32 %725, 3
  %2181 = sext i32 %2180 to i64
  %2182 = add nsw i32 %2180, 1
  %2183 = sext i32 %2182 to i64
  %2184 = add nsw i32 %2180, 2
  %2185 = sext i32 %2184 to i64
  %2186 = zext i32 %2171 to i64
  br label %2187

2187:                                             ; preds = %2174, %2187
  %2188 = phi i64 [ 0, %2174 ], [ %2328, %2187 ]
  %2189 = phi double [ %2165, %2174 ], [ %2273, %2187 ]
  %2190 = phi <2 x double> [ %2166, %2174 ], [ %2265, %2187 ]
  %2191 = phi <2 x double> [ %2167, %2174 ], [ %2258, %2187 ]
  %2192 = phi <2 x double> [ %2168, %2174 ], [ %2271, %2187 ]
  %2193 = phi <2 x double> [ %2169, %2174 ], [ %2267, %2187 ]
  %2194 = shl nuw nsw i64 %2188, 1
  %2195 = getelementptr inbounds i32, ptr %145, i64 %2194
  %2196 = load i32, ptr %2195, align 4, !tbaa !5
  %2197 = ashr i32 %2196, 14
  %2198 = add nsw i32 %2197, %38
  %2199 = getelementptr inbounds i16, ptr %98, i64 %2188
  %2200 = load i16, ptr %2199, align 2, !tbaa !45
  %2201 = zext i16 %2200 to i64
  %2202 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2201
  %2203 = getelementptr inbounds double, ptr %144, i64 %2188
  %2204 = load double, ptr %2203, align 8, !tbaa !15
  %2205 = sext i32 %2198 to i64
  %2206 = getelementptr inbounds double, ptr %2175, i64 %2205
  %2207 = load double, ptr %2206, align 8, !tbaa !15
  %2208 = fsub double %2204, %2207
  %2209 = shl nsw i32 %2198, 4
  %2210 = sext i32 %2209 to i64
  %2211 = getelementptr inbounds double, ptr %30, i64 %2210
  %2212 = getelementptr inbounds %class.Vector, ptr %652, i64 %2201
  %2213 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2201, i32 1
  %2214 = load float, ptr %2213, align 8, !tbaa !81
  %2215 = fpext float %2214 to double
  %2216 = fmul double %2014, %2215
  %2217 = load <2 x double>, ptr %2202, align 8, !tbaa !15
  %2218 = fsub <2 x double> %707, %2217
  %2219 = getelementptr inbounds %class.Vector, ptr %2202, i64 0, i32 2
  %2220 = load double, ptr %2219, align 8, !tbaa !50
  %2221 = fsub double %710, %2220
  %2222 = shl nsw i32 %2198, 2
  %2223 = sext i32 %2222 to i64
  %2224 = getelementptr inbounds double, ptr %31, i64 %2223
  %2225 = getelementptr inbounds double, ptr %2211, i64 12
  %2226 = load double, ptr %2225, align 8, !tbaa !15
  %2227 = getelementptr inbounds double, ptr %2211, i64 13
  %2228 = load double, ptr %2227, align 8, !tbaa !15
  %2229 = getelementptr inbounds double, ptr %2211, i64 14
  %2230 = load double, ptr %2229, align 8, !tbaa !15
  %2231 = getelementptr inbounds double, ptr %2224, i64 1
  %2232 = load double, ptr %2231, align 8, !tbaa !15
  %2233 = tail call double @llvm.fmuladd.f64(double %673, double %2232, double %2230)
  %2234 = getelementptr inbounds double, ptr %2224, i64 2
  %2235 = load double, ptr %2234, align 8, !tbaa !15
  %2236 = tail call double @llvm.fmuladd.f64(double %674, double %2235, double %2228)
  %2237 = getelementptr inbounds double, ptr %2224, i64 3
  %2238 = load double, ptr %2237, align 8, !tbaa !15
  %2239 = tail call double @llvm.fmuladd.f64(double %675, double %2238, double %2226)
  %2240 = fmul double %2216, %2239
  %2241 = fmul double %2216, %2236
  %2242 = fmul double %2216, %2233
  %2243 = tail call double @llvm.fmuladd.f64(double %2208, double %2240, double %2241)
  %2244 = tail call double @llvm.fmuladd.f64(double %2243, double %2208, double %2242)
  %2245 = fmul double %2008, %2244
  %2246 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2247 = insertelement <2 x double> poison, double %2245, i64 0
  %2248 = shufflevector <2 x double> %2247, <2 x double> poison, <2 x i32> zeroinitializer
  %2249 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2248, <2 x double> %2218, <2 x double> %2246)
  store <2 x double> %2249, ptr %671, align 8, !tbaa !15
  %2250 = load double, ptr %672, align 8, !tbaa !15
  %2251 = tail call double @llvm.fmuladd.f64(double %2245, double %2221, double %2250)
  store double %2251, ptr %672, align 8, !tbaa !15
  %2252 = extractelement <2 x double> %2218, i64 1
  %2253 = fmul double %2252, %2244
  %2254 = insertelement <2 x double> poison, double %2253, i64 0
  %2255 = shufflevector <2 x double> %2254, <2 x double> poison, <2 x i32> zeroinitializer
  %2256 = shufflevector <2 x double> %2218, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2257 = insertelement <2 x double> %2256, double %2221, i64 1
  %2258 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2255, <2 x double> %2257, <2 x double> %2191)
  %2259 = insertelement <2 x double> %2256, double %2221, i64 0
  %2260 = insertelement <2 x double> poison, double %2244, i64 0
  %2261 = shufflevector <2 x double> %2260, <2 x double> poison, <2 x i32> zeroinitializer
  %2262 = fmul <2 x double> %2259, %2261
  %2263 = shufflevector <2 x double> %2262, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2264 = shufflevector <2 x double> %2262, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2265 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2264, <2 x double> %2218, <2 x double> %2190)
  %2266 = insertelement <2 x double> %2263, double %2253, i64 1
  %2267 = fadd <2 x double> %2193, %2266
  %2268 = load <2 x double>, ptr %2212, align 8, !tbaa !15
  %2269 = fsub <2 x double> %2268, %2266
  store <2 x double> %2269, ptr %2212, align 8, !tbaa !15
  %2270 = shufflevector <2 x double> %2259, <2 x double> poison, <2 x i32> zeroinitializer
  %2271 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2262, <2 x double> %2270, <2 x double> %2192)
  %2272 = extractelement <2 x double> %2262, i64 0
  %2273 = fadd double %2189, %2272
  %2274 = getelementptr inbounds %class.Vector, ptr %652, i64 %2201, i32 2
  %2275 = load double, ptr %2274, align 8, !tbaa !89
  %2276 = fsub double %2275, %2272
  store double %2276, ptr %2274, align 8, !tbaa !89
  %2277 = load double, ptr %2219, align 8, !tbaa !50
  %2278 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2279 = fsub double %2277, %2278
  %2280 = fmul double %10, %2279
  %2281 = tail call double @llvm.floor.f64(double %2280)
  %2282 = fptosi double %2281 to i32
  %2283 = icmp slt i32 %2282, 0
  %2284 = select i1 %2283, i32 %2176, i32 0
  %2285 = icmp sgt i32 %2176, %2282
  %2286 = select i1 %2285, i32 0, i32 %2176
  %2287 = sub i32 %2282, %2286
  %2288 = add i32 %2287, %2284
  %2289 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2201, i32 3
  %2290 = load i8, ptr %2289, align 2, !tbaa !52
  %2291 = zext i8 %2290 to i32
  %2292 = shufflevector <2 x double> %2262, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2293 = fmul <2 x double> %2218, %2292
  %2294 = extractelement <2 x double> %2293, i64 0
  %2295 = fmul double %2252, %2253
  %2296 = fmul double %2221, %2272
  %2297 = add nsw i32 %2178, %2291
  %2298 = mul i32 %2179, %2297
  %2299 = sext i32 %2298 to i64
  %2300 = getelementptr inbounds double, ptr %8, i64 %2299
  %2301 = fmul double %2294, 5.000000e-01
  %2302 = fmul double %2295, 5.000000e-01
  %2303 = fmul double %2296, 5.000000e-01
  %2304 = getelementptr inbounds double, ptr %2300, i64 %2181
  %2305 = load double, ptr %2304, align 8, !tbaa !15
  %2306 = fadd double %2301, %2305
  store double %2306, ptr %2304, align 8, !tbaa !15
  %2307 = getelementptr inbounds double, ptr %2300, i64 %2183
  %2308 = load double, ptr %2307, align 8, !tbaa !15
  %2309 = fadd double %2302, %2308
  store double %2309, ptr %2307, align 8, !tbaa !15
  %2310 = getelementptr inbounds double, ptr %2300, i64 %2185
  %2311 = load double, ptr %2310, align 8, !tbaa !15
  %2312 = fadd double %2303, %2311
  store double %2312, ptr %2310, align 8, !tbaa !15
  %2313 = mul nsw i32 %2288, 3
  %2314 = sext i32 %2313 to i64
  %2315 = getelementptr inbounds double, ptr %2300, i64 %2314
  %2316 = load double, ptr %2315, align 8, !tbaa !15
  %2317 = fadd double %2301, %2316
  store double %2317, ptr %2315, align 8, !tbaa !15
  %2318 = add nsw i32 %2313, 1
  %2319 = sext i32 %2318 to i64
  %2320 = getelementptr inbounds double, ptr %2300, i64 %2319
  %2321 = load double, ptr %2320, align 8, !tbaa !15
  %2322 = fadd double %2302, %2321
  store double %2322, ptr %2320, align 8, !tbaa !15
  %2323 = add nsw i32 %2313, 2
  %2324 = sext i32 %2323 to i64
  %2325 = getelementptr inbounds double, ptr %2300, i64 %2324
  %2326 = load double, ptr %2325, align 8, !tbaa !15
  %2327 = fadd double %2303, %2326
  store double %2327, ptr %2325, align 8, !tbaa !15
  %2328 = add nuw nsw i64 %2188, 1
  %2329 = icmp eq i64 %2328, %2186
  br i1 %2329, label %2330, label %2187

2330:                                             ; preds = %2187, %2164
  %2331 = phi double [ %2165, %2164 ], [ %2273, %2187 ]
  %2332 = phi <2 x double> [ %2166, %2164 ], [ %2265, %2187 ]
  %2333 = phi <2 x double> [ %2167, %2164 ], [ %2258, %2187 ]
  %2334 = phi <2 x double> [ %2168, %2164 ], [ %2271, %2187 ]
  %2335 = phi <2 x double> [ %2169, %2164 ], [ %2267, %2187 ]
  %2336 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2337 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2336, double noundef %2016, double noundef %2017, double noundef %710, ptr noundef %45, ptr noundef %1991, i32 noundef %1988, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2338 = add nsw i32 %2172, %2337
  %2339 = icmp sgt i32 %2337, 0
  br i1 %2339, label %2340, label %2496

2340:                                             ; preds = %2330
  %2341 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2342 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2343 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2344 = mul nsw i32 %2343, %713
  %2345 = mul i32 %2342, 3
  %2346 = mul nsw i32 %725, 3
  %2347 = sext i32 %2346 to i64
  %2348 = add nsw i32 %2346, 1
  %2349 = sext i32 %2348 to i64
  %2350 = add nsw i32 %2346, 2
  %2351 = sext i32 %2350 to i64
  %2352 = zext i32 %2337 to i64
  br label %2353

2353:                                             ; preds = %2340, %2353
  %2354 = phi i64 [ 0, %2340 ], [ %2494, %2353 ]
  %2355 = phi double [ %2331, %2340 ], [ %2439, %2353 ]
  %2356 = phi <2 x double> [ %2332, %2340 ], [ %2431, %2353 ]
  %2357 = phi <2 x double> [ %2333, %2340 ], [ %2424, %2353 ]
  %2358 = phi <2 x double> [ %2334, %2340 ], [ %2437, %2353 ]
  %2359 = phi <2 x double> [ %2335, %2340 ], [ %2433, %2353 ]
  %2360 = shl nuw nsw i64 %2354, 1
  %2361 = getelementptr inbounds i32, ptr %145, i64 %2360
  %2362 = load i32, ptr %2361, align 4, !tbaa !5
  %2363 = ashr i32 %2362, 14
  %2364 = add nsw i32 %2363, %38
  %2365 = getelementptr inbounds i16, ptr %98, i64 %2354
  %2366 = load i16, ptr %2365, align 2, !tbaa !45
  %2367 = zext i16 %2366 to i64
  %2368 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2367
  %2369 = getelementptr inbounds double, ptr %144, i64 %2354
  %2370 = load double, ptr %2369, align 8, !tbaa !15
  %2371 = sext i32 %2364 to i64
  %2372 = getelementptr inbounds double, ptr %2341, i64 %2371
  %2373 = load double, ptr %2372, align 8, !tbaa !15
  %2374 = fsub double %2370, %2373
  %2375 = shl nsw i32 %2364, 4
  %2376 = sext i32 %2375 to i64
  %2377 = getelementptr inbounds double, ptr %30, i64 %2376
  %2378 = getelementptr inbounds %class.Vector, ptr %652, i64 %2367
  %2379 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2367, i32 1
  %2380 = load float, ptr %2379, align 8, !tbaa !81
  %2381 = fpext float %2380 to double
  %2382 = fmul double %2014, %2381
  %2383 = load <2 x double>, ptr %2368, align 8, !tbaa !15
  %2384 = fsub <2 x double> %707, %2383
  %2385 = getelementptr inbounds %class.Vector, ptr %2368, i64 0, i32 2
  %2386 = load double, ptr %2385, align 8, !tbaa !50
  %2387 = fsub double %710, %2386
  %2388 = shl nsw i32 %2364, 2
  %2389 = sext i32 %2388 to i64
  %2390 = getelementptr inbounds double, ptr %31, i64 %2389
  %2391 = getelementptr inbounds double, ptr %2377, i64 12
  %2392 = load double, ptr %2391, align 8, !tbaa !15
  %2393 = getelementptr inbounds double, ptr %2377, i64 13
  %2394 = load double, ptr %2393, align 8, !tbaa !15
  %2395 = getelementptr inbounds double, ptr %2377, i64 14
  %2396 = load double, ptr %2395, align 8, !tbaa !15
  %2397 = getelementptr inbounds double, ptr %2390, i64 1
  %2398 = load double, ptr %2397, align 8, !tbaa !15
  %2399 = tail call double @llvm.fmuladd.f64(double %2398, double 2.000000e+00, double %2396)
  %2400 = getelementptr inbounds double, ptr %2390, i64 2
  %2401 = load double, ptr %2400, align 8, !tbaa !15
  %2402 = tail call double @llvm.fmuladd.f64(double %2401, double 4.000000e+00, double %2394)
  %2403 = getelementptr inbounds double, ptr %2390, i64 3
  %2404 = load double, ptr %2403, align 8, !tbaa !15
  %2405 = tail call double @llvm.fmuladd.f64(double %2404, double 6.000000e+00, double %2392)
  %2406 = fmul double %2382, %2405
  %2407 = fmul double %2382, %2402
  %2408 = fmul double %2382, %2399
  %2409 = tail call double @llvm.fmuladd.f64(double %2374, double %2406, double %2407)
  %2410 = tail call double @llvm.fmuladd.f64(double %2409, double %2374, double %2408)
  %2411 = fmul double %2008, %2410
  %2412 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2413 = insertelement <2 x double> poison, double %2411, i64 0
  %2414 = shufflevector <2 x double> %2413, <2 x double> poison, <2 x i32> zeroinitializer
  %2415 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2414, <2 x double> %2384, <2 x double> %2412)
  store <2 x double> %2415, ptr %671, align 8, !tbaa !15
  %2416 = load double, ptr %672, align 8, !tbaa !15
  %2417 = tail call double @llvm.fmuladd.f64(double %2411, double %2387, double %2416)
  store double %2417, ptr %672, align 8, !tbaa !15
  %2418 = extractelement <2 x double> %2384, i64 1
  %2419 = fmul double %2418, %2410
  %2420 = insertelement <2 x double> poison, double %2419, i64 0
  %2421 = shufflevector <2 x double> %2420, <2 x double> poison, <2 x i32> zeroinitializer
  %2422 = shufflevector <2 x double> %2384, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2423 = insertelement <2 x double> %2422, double %2387, i64 1
  %2424 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2421, <2 x double> %2423, <2 x double> %2357)
  %2425 = insertelement <2 x double> %2422, double %2387, i64 0
  %2426 = insertelement <2 x double> poison, double %2410, i64 0
  %2427 = shufflevector <2 x double> %2426, <2 x double> poison, <2 x i32> zeroinitializer
  %2428 = fmul <2 x double> %2425, %2427
  %2429 = shufflevector <2 x double> %2428, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2430 = shufflevector <2 x double> %2428, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2431 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2430, <2 x double> %2384, <2 x double> %2356)
  %2432 = insertelement <2 x double> %2429, double %2419, i64 1
  %2433 = fadd <2 x double> %2359, %2432
  %2434 = load <2 x double>, ptr %2378, align 8, !tbaa !15
  %2435 = fsub <2 x double> %2434, %2432
  store <2 x double> %2435, ptr %2378, align 8, !tbaa !15
  %2436 = shufflevector <2 x double> %2425, <2 x double> poison, <2 x i32> zeroinitializer
  %2437 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2428, <2 x double> %2436, <2 x double> %2358)
  %2438 = extractelement <2 x double> %2428, i64 0
  %2439 = fadd double %2355, %2438
  %2440 = getelementptr inbounds %class.Vector, ptr %652, i64 %2367, i32 2
  %2441 = load double, ptr %2440, align 8, !tbaa !89
  %2442 = fsub double %2441, %2438
  store double %2442, ptr %2440, align 8, !tbaa !89
  %2443 = load double, ptr %2385, align 8, !tbaa !50
  %2444 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2445 = fsub double %2443, %2444
  %2446 = fmul double %10, %2445
  %2447 = tail call double @llvm.floor.f64(double %2446)
  %2448 = fptosi double %2447 to i32
  %2449 = icmp slt i32 %2448, 0
  %2450 = select i1 %2449, i32 %2342, i32 0
  %2451 = icmp sgt i32 %2342, %2448
  %2452 = select i1 %2451, i32 0, i32 %2342
  %2453 = sub i32 %2448, %2452
  %2454 = add i32 %2453, %2450
  %2455 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2367, i32 3
  %2456 = load i8, ptr %2455, align 2, !tbaa !52
  %2457 = zext i8 %2456 to i32
  %2458 = shufflevector <2 x double> %2428, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2459 = fmul <2 x double> %2384, %2458
  %2460 = extractelement <2 x double> %2459, i64 0
  %2461 = fmul double %2418, %2419
  %2462 = fmul double %2387, %2438
  %2463 = add nsw i32 %2344, %2457
  %2464 = mul i32 %2345, %2463
  %2465 = sext i32 %2464 to i64
  %2466 = getelementptr inbounds double, ptr %8, i64 %2465
  %2467 = fmul double %2460, 5.000000e-01
  %2468 = fmul double %2461, 5.000000e-01
  %2469 = fmul double %2462, 5.000000e-01
  %2470 = getelementptr inbounds double, ptr %2466, i64 %2347
  %2471 = load double, ptr %2470, align 8, !tbaa !15
  %2472 = fadd double %2467, %2471
  store double %2472, ptr %2470, align 8, !tbaa !15
  %2473 = getelementptr inbounds double, ptr %2466, i64 %2349
  %2474 = load double, ptr %2473, align 8, !tbaa !15
  %2475 = fadd double %2468, %2474
  store double %2475, ptr %2473, align 8, !tbaa !15
  %2476 = getelementptr inbounds double, ptr %2466, i64 %2351
  %2477 = load double, ptr %2476, align 8, !tbaa !15
  %2478 = fadd double %2469, %2477
  store double %2478, ptr %2476, align 8, !tbaa !15
  %2479 = mul nsw i32 %2454, 3
  %2480 = sext i32 %2479 to i64
  %2481 = getelementptr inbounds double, ptr %2466, i64 %2480
  %2482 = load double, ptr %2481, align 8, !tbaa !15
  %2483 = fadd double %2467, %2482
  store double %2483, ptr %2481, align 8, !tbaa !15
  %2484 = add nsw i32 %2479, 1
  %2485 = sext i32 %2484 to i64
  %2486 = getelementptr inbounds double, ptr %2466, i64 %2485
  %2487 = load double, ptr %2486, align 8, !tbaa !15
  %2488 = fadd double %2468, %2487
  store double %2488, ptr %2486, align 8, !tbaa !15
  %2489 = add nsw i32 %2479, 2
  %2490 = sext i32 %2489 to i64
  %2491 = getelementptr inbounds double, ptr %2466, i64 %2490
  %2492 = load double, ptr %2491, align 8, !tbaa !15
  %2493 = fadd double %2469, %2492
  store double %2493, ptr %2491, align 8, !tbaa !15
  %2494 = add nuw nsw i64 %2354, 1
  %2495 = icmp eq i64 %2494, %2352
  br i1 %2495, label %2496, label %2353

2496:                                             ; preds = %2353, %2330
  %2497 = phi double [ %2331, %2330 ], [ %2439, %2353 ]
  %2498 = phi <2 x double> [ %2332, %2330 ], [ %2431, %2353 ]
  %2499 = phi <2 x double> [ %2333, %2330 ], [ %2424, %2353 ]
  %2500 = phi <2 x double> [ %2334, %2330 ], [ %2437, %2353 ]
  %2501 = phi <2 x double> [ %2335, %2330 ], [ %2433, %2353 ]
  %2502 = getelementptr inbounds %class.Vector, ptr %653, i64 %689
  %2503 = load <2 x double>, ptr %2502, align 8, !tbaa !15
  %2504 = fadd <2 x double> %2501, %2503
  store <2 x double> %2504, ptr %2502, align 8, !tbaa !15
  %2505 = getelementptr inbounds %class.Vector, ptr %653, i64 %689, i32 2
  %2506 = load double, ptr %2505, align 8, !tbaa !89
  %2507 = fadd double %2497, %2506
  store double %2507, ptr %2505, align 8, !tbaa !89
  br i1 %148, label %2510, label %2508

2508:                                             ; preds = %2496
  %2509 = add nsw i32 %680, 1
  br label %2518

2510:                                             ; preds = %2496
  %2511 = load ptr, ptr %12, align 8, !tbaa !47
  %2512 = load i32, ptr %17, align 8, !tbaa !19
  %2513 = add nsw i32 %2512, 1
  store i32 %2513, ptr %17, align 8, !tbaa !19
  %2514 = sext i32 %2512 to i64
  %2515 = getelementptr inbounds i16, ptr %2511, i64 %2514
  %2516 = load i16, ptr %2515, align 2, !tbaa !45
  %2517 = zext i16 %2516 to i32
  br label %2518

2518:                                             ; preds = %1260, %1219, %1148, %1599, %2510, %2508, %701
  %2519 = phi i32 [ %702, %701 ], [ %705, %2510 ], [ %705, %2508 ], [ %705, %1599 ], [ %705, %1148 ], [ %705, %1219 ], [ %705, %1260 ]
  %2520 = phi i32 [ %684, %701 ], [ %1994, %2510 ], [ %1994, %2508 ], [ %1162, %1599 ], [ 0, %1148 ], [ %1162, %1219 ], [ %1162, %1260 ]
  %2521 = phi ptr [ %683, %701 ], [ %1995, %2510 ], [ %1995, %2508 ], [ %971, %1599 ], [ %971, %1148 ], [ %971, %1219 ], [ %971, %1260 ]
  %2522 = phi ptr [ %682, %701 ], [ %1996, %2510 ], [ %1996, %2508 ], [ %972, %1599 ], [ %972, %1148 ], [ %972, %1219 ], [ %972, %1260 ]
  %2523 = phi ptr [ %681, %701 ], [ %1997, %2510 ], [ %1997, %2508 ], [ %973, %1599 ], [ %973, %1148 ], [ %973, %1219 ], [ %973, %1260 ]
  %2524 = phi i32 [ %703, %701 ], [ %2517, %2510 ], [ %2509, %2508 ], [ %1600, %1599 ], [ %1152, %1148 ], [ %1220, %1219 ], [ %1261, %1260 ]
  %2525 = phi i32 [ %679, %701 ], [ %2338, %2510 ], [ %2338, %2508 ], [ %679, %1599 ], [ %679, %1148 ], [ %679, %1219 ], [ %679, %1260 ]
  %2526 = phi <2 x double> [ %686, %701 ], [ %2498, %2510 ], [ %2498, %2508 ], [ %686, %1599 ], [ %686, %1148 ], [ %686, %1219 ], [ %686, %1260 ]
  %2527 = phi <2 x double> [ %687, %701 ], [ %2499, %2510 ], [ %2499, %2508 ], [ %687, %1599 ], [ %687, %1148 ], [ %687, %1219 ], [ %687, %1260 ]
  %2528 = phi <2 x double> [ %688, %701 ], [ %2500, %2510 ], [ %2500, %2508 ], [ %688, %1599 ], [ %688, %1148 ], [ %688, %1219 ], [ %688, %1260 ]
  %2529 = icmp slt i32 %2524, %40
  br i1 %2529, label %678, label %2530

2530:                                             ; preds = %2518, %649
  %2531 = phi ptr [ null, %649 ], [ %2523, %2518 ]
  %2532 = phi i32 [ %656, %649 ], [ %2524, %2518 ]
  %2533 = phi i32 [ 0, %649 ], [ %2525, %2518 ]
  %2534 = phi <2 x double> [ zeroinitializer, %649 ], [ %2526, %2518 ]
  %2535 = phi <2 x double> [ zeroinitializer, %649 ], [ %2527, %2518 ]
  %2536 = phi <2 x double> [ zeroinitializer, %649 ], [ %2528, %2518 ]
  br i1 %146, label %2544, label %2537

2537:                                             ; preds = %2530
  %2538 = trunc i32 %2532 to i16
  %2539 = load ptr, ptr %12, align 8, !tbaa !47
  %2540 = load i32, ptr %17, align 8, !tbaa !19
  %2541 = add nsw i32 %2540, -1
  %2542 = sext i32 %2541 to i64
  %2543 = getelementptr inbounds i16, ptr %2539, i64 %2542
  store i16 %2538, ptr %2543, align 2, !tbaa !45
  br label %2544

2544:                                             ; preds = %2537, %2530
  %2545 = sitofp i32 %2533 to double
  %2546 = getelementptr inbounds double, ptr %6, i64 22
  %2547 = load double, ptr %2546, align 8, !tbaa !15
  %2548 = fadd double %2547, %2545
  store double %2548, ptr %2546, align 8, !tbaa !15
  %2549 = getelementptr inbounds double, ptr %6, i64 12
  %2550 = load <4 x double>, ptr %2549, align 8, !tbaa !15
  %2551 = shufflevector <2 x double> %2534, <2 x double> %2536, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2552 = shufflevector <4 x double> %2551, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2553 = fadd <4 x double> %2552, %2550
  store <4 x double> %2553, ptr %2549, align 8, !tbaa !15
  %2554 = getelementptr inbounds double, ptr %6, i64 16
  %2555 = load <4 x double>, ptr %2554, align 8, !tbaa !15
  %2556 = shufflevector <2 x double> %2535, <2 x double> %2536, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2557 = shufflevector <4 x double> %2556, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2558 = fadd <4 x double> %2557, %2555
  store <4 x double> %2558, ptr %2554, align 8, !tbaa !15
  %2559 = getelementptr inbounds double, ptr %6, i64 20
  %2560 = load double, ptr %2559, align 8, !tbaa !15
  %2561 = extractelement <2 x double> %2536, i64 0
  %2562 = fadd double %2561, %2560
  store double %2562, ptr %2559, align 8, !tbaa !15
  %2563 = icmp eq ptr %2531, null
  br i1 %2563, label %2565, label %2564

2564:                                             ; preds = %2544
  tail call void @_ZdaPv(ptr noundef nonnull %2531) #10
  br label %2565

2565:                                             ; preds = %2544, %2564, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil37calc_pair_energy_slow_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2611

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %604, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %616

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %616

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %616, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %616

604:                                              ; preds = %469
  %605 = load ptr, ptr %12, align 8, !tbaa !47
  %606 = load i32, ptr %17, align 8, !tbaa !19
  %607 = add nsw i32 %606, 1
  store i32 %607, ptr %17, align 8, !tbaa !19
  %608 = sext i32 %606 to i64
  %609 = getelementptr inbounds i16, ptr %605, i64 %608
  %610 = load i16, ptr %609, align 2, !tbaa !45
  %611 = zext i16 %610 to i32
  %612 = icmp eq i32 %40, %611
  br i1 %612, label %633, label %613

613:                                              ; preds = %604
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  br label %633

616:                                              ; preds = %472, %597, %594, %535
  %617 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %618 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %619 = load i32, ptr %17, align 8, !tbaa !19
  %620 = trunc i32 %40 to i16
  %621 = load ptr, ptr %12, align 8, !tbaa !47
  %622 = sext i32 %619 to i64
  %623 = getelementptr inbounds i16, ptr %621, i64 %622
  store i16 %620, ptr %623, align 2, !tbaa !45
  %624 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %625 = load i32, ptr %624, align 4, !tbaa !48
  %626 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %627 = load i32, ptr %626, align 4, !tbaa !49
  %628 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %629 = load ptr, ptr %628, align 8, !tbaa !24
  %630 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %631 = load ptr, ptr %630, align 8, !tbaa !24
  %632 = add nsw i32 %619, 2
  store i32 %632, ptr %17, align 8, !tbaa !19
  br label %649

633:                                              ; preds = %613, %604
  %634 = phi i32 [ %607, %604 ], [ %615, %613 ]
  %635 = phi ptr [ %605, %604 ], [ %614, %613 ]
  %636 = sext i32 %634 to i64
  %637 = getelementptr inbounds i16, ptr %635, i64 %636
  %638 = load i16, ptr %637, align 2, !tbaa !45
  %639 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %640 = load i32, ptr %639, align 4, !tbaa !48
  %641 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %642 = load i32, ptr %641, align 4, !tbaa !49
  %643 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4, i64 1
  %644 = load ptr, ptr %643, align 8, !tbaa !24
  %645 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %646 = load ptr, ptr %645, align 8, !tbaa !24
  %647 = add nsw i32 %634, 1
  store i32 %647, ptr %17, align 8, !tbaa !19
  %648 = zext i16 %638 to i32
  br label %649

649:                                              ; preds = %633, %616
  %650 = phi i32 [ %640, %633 ], [ %625, %616 ]
  %651 = phi i32 [ %642, %633 ], [ %627, %616 ]
  %652 = phi ptr [ %644, %633 ], [ %629, %616 ]
  %653 = phi ptr [ %646, %633 ], [ %631, %616 ]
  %654 = phi i32 [ 0, %633 ], [ %618, %616 ]
  %655 = phi i32 [ 0, %633 ], [ %617, %616 ]
  %656 = phi i32 [ %648, %633 ], [ 0, %616 ]
  %657 = add nsw i32 %651, -1
  %658 = icmp slt i32 %656, %40
  br i1 %658, label %659, label %2572

659:                                              ; preds = %649
  %660 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 1
  %661 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 4
  %662 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 2
  %663 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 3
  %664 = ptrtoint ptr %425 to i64
  %665 = add nsw i32 %42, 10
  %666 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %667 = ptrtoint ptr %471 to i64
  %668 = getelementptr inbounds i16, ptr %425, i64 1
  %669 = ptrtoint ptr %333 to i64
  %670 = ptrtoint ptr %379 to i64
  %671 = getelementptr inbounds double, ptr %6, i64 29
  %672 = getelementptr inbounds double, ptr %6, i64 31
  %673 = fmul double %34, 2.000000e+00
  %674 = fmul double %34, 4.000000e+00
  %675 = fmul double %34, 6.000000e+00
  %676 = insertelement <2 x double> poison, double %27, i64 0
  %677 = shufflevector <2 x double> %676, <2 x double> poison, <2 x i32> zeroinitializer
  br label %678

678:                                              ; preds = %659, %2559
  %679 = phi i32 [ 0, %659 ], [ %2567, %2559 ]
  %680 = phi double [ 0.000000e+00, %659 ], [ %2566, %2559 ]
  %681 = phi i32 [ %656, %659 ], [ %2565, %2559 ]
  %682 = phi ptr [ null, %659 ], [ %2564, %2559 ]
  %683 = phi ptr [ null, %659 ], [ %2563, %2559 ]
  %684 = phi ptr [ null, %659 ], [ %2562, %2559 ]
  %685 = phi i32 [ 0, %659 ], [ %2561, %2559 ]
  %686 = phi i32 [ %650, %659 ], [ %2560, %2559 ]
  %687 = phi <2 x double> [ zeroinitializer, %659 ], [ %2568, %2559 ]
  %688 = phi <2 x double> [ zeroinitializer, %659 ], [ %2569, %2559 ]
  %689 = phi <2 x double> [ zeroinitializer, %659 ], [ %2570, %2559 ]
  %690 = sext i32 %681 to i64
  %691 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %690
  %692 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %690
  br i1 %148, label %705, label %693

693:                                              ; preds = %678
  %694 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %690, i32 4
  %695 = load i8, ptr %694, align 1
  %696 = lshr i8 %695, 3
  %697 = and i8 %696, 15
  %698 = zext i8 %697 to i32
  %699 = icmp eq i8 %697, 0
  br i1 %699, label %705, label %700

700:                                              ; preds = %693
  %701 = icmp eq i32 %686, 0
  br i1 %701, label %705, label %702

702:                                              ; preds = %700
  %703 = add nsw i32 %686, -1
  %704 = add nsw i32 %681, %698
  br label %2559

705:                                              ; preds = %700, %693, %678
  %706 = phi i32 [ %686, %678 ], [ %686, %693 ], [ %657, %700 ]
  %707 = load <2 x double>, ptr %691, align 8, !tbaa !15
  %708 = fadd <2 x double> %19, %707
  %709 = getelementptr inbounds %class.Vector, ptr %691, i64 0, i32 2
  %710 = load double, ptr %709, align 8, !tbaa !50
  %711 = fadd double %21, %710
  %712 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %690, i32 3
  %713 = load i8, ptr %712, align 2, !tbaa !52
  %714 = zext i8 %713 to i32
  %715 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %716 = fsub double %710, %715
  %717 = fmul double %10, %716
  %718 = tail call double @llvm.floor.f64(double %717)
  %719 = fptosi double %718 to i32
  %720 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %721 = icmp slt i32 %719, 0
  %722 = select i1 %721, i32 %720, i32 0
  %723 = icmp sgt i32 %720, %719
  %724 = select i1 %723, i32 0, i32 %720
  %725 = sub i32 %719, %724
  %726 = add i32 %725, %722
  br i1 %148, label %1958, label %727

727:                                              ; preds = %705
  %728 = load i32, ptr %692, align 4
  %729 = shl i32 %728, 2
  %730 = ashr exact i32 %729, 2
  %731 = load ptr, ptr %660, align 8, !tbaa !53
  %732 = sext i32 %730 to i64
  %733 = getelementptr inbounds %class.ExclusionCheck, ptr %731, i64 %732
  %734 = load i32, ptr %733, align 8, !tbaa !55
  %735 = getelementptr inbounds %class.ExclusionCheck, ptr %731, i64 %732, i32 1
  %736 = load i32, ptr %735, align 4, !tbaa !57
  %737 = getelementptr inbounds %class.ExclusionCheck, ptr %731, i64 %732, i32 2
  %738 = load ptr, ptr %737, align 8, !tbaa !58
  %739 = icmp eq ptr %738, null
  br i1 %739, label %744, label %740

740:                                              ; preds = %727
  %741 = sext i32 %734 to i64
  %742 = sub nsw i64 0, %741
  %743 = getelementptr inbounds i8, ptr %738, i64 %742
  br label %970

744:                                              ; preds = %727
  %745 = icmp eq ptr %682, null
  br i1 %745, label %833, label %746

746:                                              ; preds = %744
  %747 = load i32, ptr %683, align 4, !tbaa !5
  %748 = icmp slt i32 %747, 1
  br i1 %748, label %796, label %749

749:                                              ; preds = %746
  %750 = add nuw i32 %747, 1
  %751 = zext i32 %750 to i64
  %752 = add nsw i64 %751, -1
  %753 = add nsw i64 %751, -2
  %754 = and i64 %752, 3
  %755 = icmp ult i64 %753, 3
  br i1 %755, label %783, label %756

756:                                              ; preds = %749
  %757 = and i64 %752, -4
  br label %758

758:                                              ; preds = %758, %756
  %759 = phi i64 [ 1, %756 ], [ %780, %758 ]
  %760 = phi i64 [ 0, %756 ], [ %781, %758 ]
  %761 = getelementptr inbounds i32, ptr %683, i64 %759
  %762 = load i32, ptr %761, align 4, !tbaa !5
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds i8, ptr %682, i64 %763
  store i8 0, ptr %764, align 1, !tbaa !59
  %765 = add nuw nsw i64 %759, 1
  %766 = getelementptr inbounds i32, ptr %683, i64 %765
  %767 = load i32, ptr %766, align 4, !tbaa !5
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds i8, ptr %682, i64 %768
  store i8 0, ptr %769, align 1, !tbaa !59
  %770 = add nuw nsw i64 %759, 2
  %771 = getelementptr inbounds i32, ptr %683, i64 %770
  %772 = load i32, ptr %771, align 4, !tbaa !5
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds i8, ptr %682, i64 %773
  store i8 0, ptr %774, align 1, !tbaa !59
  %775 = add nuw nsw i64 %759, 3
  %776 = getelementptr inbounds i32, ptr %683, i64 %775
  %777 = load i32, ptr %776, align 4, !tbaa !5
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds i8, ptr %682, i64 %778
  store i8 0, ptr %779, align 1, !tbaa !59
  %780 = add nuw nsw i64 %759, 4
  %781 = add i64 %760, 4
  %782 = icmp eq i64 %781, %757
  br i1 %782, label %783, label %758

783:                                              ; preds = %758, %749
  %784 = phi i64 [ 1, %749 ], [ %780, %758 ]
  %785 = icmp eq i64 %754, 0
  br i1 %785, label %796, label %786

786:                                              ; preds = %783, %786
  %787 = phi i64 [ %793, %786 ], [ %784, %783 ]
  %788 = phi i64 [ %794, %786 ], [ 0, %783 ]
  %789 = getelementptr inbounds i32, ptr %683, i64 %787
  %790 = load i32, ptr %789, align 4, !tbaa !5
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i8, ptr %682, i64 %791
  store i8 0, ptr %792, align 1, !tbaa !59
  %793 = add nuw nsw i64 %787, 1
  %794 = add i64 %788, 1
  %795 = icmp eq i64 %794, %754
  br i1 %795, label %796, label %786, !llvm.loop !162

796:                                              ; preds = %783, %786, %746
  %797 = load i32, ptr %684, align 4, !tbaa !5
  %798 = icmp slt i32 %797, 1
  br i1 %798, label %853, label %799

799:                                              ; preds = %796
  %800 = add nuw i32 %797, 1
  %801 = zext i32 %800 to i64
  %802 = add nsw i64 %801, -1
  %803 = add nsw i64 %801, -2
  %804 = and i64 %802, 3
  %805 = icmp ult i64 %803, 3
  br i1 %805, label %840, label %806

806:                                              ; preds = %799
  %807 = and i64 %802, -4
  br label %808

808:                                              ; preds = %808, %806
  %809 = phi i64 [ 1, %806 ], [ %830, %808 ]
  %810 = phi i64 [ 0, %806 ], [ %831, %808 ]
  %811 = getelementptr inbounds i32, ptr %684, i64 %809
  %812 = load i32, ptr %811, align 4, !tbaa !5
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i8, ptr %682, i64 %813
  store i8 0, ptr %814, align 1, !tbaa !59
  %815 = add nuw nsw i64 %809, 1
  %816 = getelementptr inbounds i32, ptr %684, i64 %815
  %817 = load i32, ptr %816, align 4, !tbaa !5
  %818 = sext i32 %817 to i64
  %819 = getelementptr inbounds i8, ptr %682, i64 %818
  store i8 0, ptr %819, align 1, !tbaa !59
  %820 = add nuw nsw i64 %809, 2
  %821 = getelementptr inbounds i32, ptr %684, i64 %820
  %822 = load i32, ptr %821, align 4, !tbaa !5
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds i8, ptr %682, i64 %823
  store i8 0, ptr %824, align 1, !tbaa !59
  %825 = add nuw nsw i64 %809, 3
  %826 = getelementptr inbounds i32, ptr %684, i64 %825
  %827 = load i32, ptr %826, align 4, !tbaa !5
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds i8, ptr %682, i64 %828
  store i8 0, ptr %829, align 1, !tbaa !59
  %830 = add nuw nsw i64 %809, 4
  %831 = add i64 %810, 4
  %832 = icmp eq i64 %831, %807
  br i1 %832, label %840, label %808

833:                                              ; preds = %744
  %834 = load i32, ptr %661, align 8, !tbaa !62
  %835 = tail call i32 @llvm.smax.i32(i32 %834, i32 -1)
  %836 = sext i32 %835 to i64
  %837 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %836) #9
  %838 = load i32, ptr %661, align 8, !tbaa !62
  %839 = sext i32 %838 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %837, i8 0, i64 %839, i1 false)
  br label %853

840:                                              ; preds = %808, %799
  %841 = phi i64 [ 1, %799 ], [ %830, %808 ]
  %842 = icmp eq i64 %804, 0
  br i1 %842, label %853, label %843

843:                                              ; preds = %840, %843
  %844 = phi i64 [ %850, %843 ], [ %841, %840 ]
  %845 = phi i64 [ %851, %843 ], [ 0, %840 ]
  %846 = getelementptr inbounds i32, ptr %684, i64 %844
  %847 = load i32, ptr %846, align 4, !tbaa !5
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i8, ptr %682, i64 %848
  store i8 0, ptr %849, align 1, !tbaa !59
  %850 = add nuw nsw i64 %844, 1
  %851 = add i64 %845, 1
  %852 = icmp eq i64 %851, %804
  br i1 %852, label %853, label %843, !llvm.loop !163

853:                                              ; preds = %840, %843, %796, %833
  %854 = phi ptr [ %837, %833 ], [ %682, %796 ], [ %682, %843 ], [ %682, %840 ]
  %855 = load i32, ptr %692, align 4
  %856 = shl i32 %855, 2
  %857 = ashr exact i32 %856, 2
  %858 = load ptr, ptr %662, align 8, !tbaa !64
  %859 = sext i32 %857 to i64
  %860 = getelementptr inbounds ptr, ptr %858, i64 %859
  %861 = load ptr, ptr %860, align 8, !tbaa !24
  %862 = load i32, ptr %861, align 4, !tbaa !5
  %863 = icmp slt i32 %862, 1
  br i1 %863, label %916, label %864

864:                                              ; preds = %853
  %865 = add nuw i32 %862, 1
  %866 = zext i32 %865 to i64
  %867 = add nsw i64 %866, -1
  %868 = add nsw i64 %866, -2
  %869 = and i64 %867, 3
  %870 = icmp ult i64 %868, 3
  br i1 %870, label %898, label %871

871:                                              ; preds = %864
  %872 = and i64 %867, -4
  br label %873

873:                                              ; preds = %873, %871
  %874 = phi i64 [ 1, %871 ], [ %895, %873 ]
  %875 = phi i64 [ 0, %871 ], [ %896, %873 ]
  %876 = getelementptr inbounds i32, ptr %861, i64 %874
  %877 = load i32, ptr %876, align 4, !tbaa !5
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds i8, ptr %854, i64 %878
  store i8 1, ptr %879, align 1, !tbaa !59
  %880 = add nuw nsw i64 %874, 1
  %881 = getelementptr inbounds i32, ptr %861, i64 %880
  %882 = load i32, ptr %881, align 4, !tbaa !5
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i8, ptr %854, i64 %883
  store i8 1, ptr %884, align 1, !tbaa !59
  %885 = add nuw nsw i64 %874, 2
  %886 = getelementptr inbounds i32, ptr %861, i64 %885
  %887 = load i32, ptr %886, align 4, !tbaa !5
  %888 = sext i32 %887 to i64
  %889 = getelementptr inbounds i8, ptr %854, i64 %888
  store i8 1, ptr %889, align 1, !tbaa !59
  %890 = add nuw nsw i64 %874, 3
  %891 = getelementptr inbounds i32, ptr %861, i64 %890
  %892 = load i32, ptr %891, align 4, !tbaa !5
  %893 = sext i32 %892 to i64
  %894 = getelementptr inbounds i8, ptr %854, i64 %893
  store i8 1, ptr %894, align 1, !tbaa !59
  %895 = add nuw nsw i64 %874, 4
  %896 = add i64 %875, 4
  %897 = icmp eq i64 %896, %872
  br i1 %897, label %898, label %873

898:                                              ; preds = %873, %864
  %899 = phi i64 [ 1, %864 ], [ %895, %873 ]
  %900 = icmp eq i64 %869, 0
  br i1 %900, label %911, label %901

901:                                              ; preds = %898, %901
  %902 = phi i64 [ %908, %901 ], [ %899, %898 ]
  %903 = phi i64 [ %909, %901 ], [ 0, %898 ]
  %904 = getelementptr inbounds i32, ptr %861, i64 %902
  %905 = load i32, ptr %904, align 4, !tbaa !5
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds i8, ptr %854, i64 %906
  store i8 1, ptr %907, align 1, !tbaa !59
  %908 = add nuw nsw i64 %902, 1
  %909 = add i64 %903, 1
  %910 = icmp eq i64 %909, %869
  br i1 %910, label %911, label %901, !llvm.loop !164

911:                                              ; preds = %901, %898
  %912 = load i32, ptr %692, align 4
  %913 = shl i32 %912, 2
  %914 = ashr exact i32 %913, 2
  %915 = sext i32 %914 to i64
  br label %916

916:                                              ; preds = %911, %853
  %917 = phi i64 [ %915, %911 ], [ %859, %853 ]
  %918 = load ptr, ptr %663, align 8, !tbaa !66
  %919 = getelementptr inbounds ptr, ptr %918, i64 %917
  %920 = load ptr, ptr %919, align 8, !tbaa !24
  %921 = load i32, ptr %920, align 4, !tbaa !5
  %922 = icmp slt i32 %921, 1
  br i1 %922, label %970, label %923

923:                                              ; preds = %916
  %924 = add nuw i32 %921, 1
  %925 = zext i32 %924 to i64
  %926 = add nsw i64 %925, -1
  %927 = add nsw i64 %925, -2
  %928 = and i64 %926, 3
  %929 = icmp ult i64 %927, 3
  br i1 %929, label %957, label %930

930:                                              ; preds = %923
  %931 = and i64 %926, -4
  br label %932

932:                                              ; preds = %932, %930
  %933 = phi i64 [ 1, %930 ], [ %954, %932 ]
  %934 = phi i64 [ 0, %930 ], [ %955, %932 ]
  %935 = getelementptr inbounds i32, ptr %920, i64 %933
  %936 = load i32, ptr %935, align 4, !tbaa !5
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds i8, ptr %854, i64 %937
  store i8 2, ptr %938, align 1, !tbaa !59
  %939 = add nuw nsw i64 %933, 1
  %940 = getelementptr inbounds i32, ptr %920, i64 %939
  %941 = load i32, ptr %940, align 4, !tbaa !5
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds i8, ptr %854, i64 %942
  store i8 2, ptr %943, align 1, !tbaa !59
  %944 = add nuw nsw i64 %933, 2
  %945 = getelementptr inbounds i32, ptr %920, i64 %944
  %946 = load i32, ptr %945, align 4, !tbaa !5
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i8, ptr %854, i64 %947
  store i8 2, ptr %948, align 1, !tbaa !59
  %949 = add nuw nsw i64 %933, 3
  %950 = getelementptr inbounds i32, ptr %920, i64 %949
  %951 = load i32, ptr %950, align 4, !tbaa !5
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds i8, ptr %854, i64 %952
  store i8 2, ptr %953, align 1, !tbaa !59
  %954 = add nuw nsw i64 %933, 4
  %955 = add i64 %934, 4
  %956 = icmp eq i64 %955, %931
  br i1 %956, label %957, label %932

957:                                              ; preds = %932, %923
  %958 = phi i64 [ 1, %923 ], [ %954, %932 ]
  %959 = icmp eq i64 %928, 0
  br i1 %959, label %970, label %960

960:                                              ; preds = %957, %960
  %961 = phi i64 [ %967, %960 ], [ %958, %957 ]
  %962 = phi i64 [ %968, %960 ], [ 0, %957 ]
  %963 = getelementptr inbounds i32, ptr %920, i64 %961
  %964 = load i32, ptr %963, align 4, !tbaa !5
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds i8, ptr %854, i64 %965
  store i8 2, ptr %966, align 1, !tbaa !59
  %967 = add nuw nsw i64 %961, 1
  %968 = add i64 %962, 1
  %969 = icmp eq i64 %968, %928
  br i1 %969, label %970, label %960, !llvm.loop !165

970:                                              ; preds = %957, %960, %916, %740
  %971 = phi ptr [ %743, %740 ], [ %854, %916 ], [ %854, %960 ], [ %854, %957 ]
  %972 = phi ptr [ %684, %740 ], [ %920, %916 ], [ %920, %960 ], [ %920, %957 ]
  %973 = phi ptr [ %683, %740 ], [ %861, %916 ], [ %861, %960 ], [ %861, %957 ]
  %974 = phi ptr [ %682, %740 ], [ %854, %916 ], [ %854, %960 ], [ %854, %957 ]
  %975 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %690, i32 4
  %976 = load i8, ptr %975, align 1
  %977 = and i8 %976, 7
  %978 = icmp eq i8 %977, 0
  %979 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br i1 %978, label %1162, label %980

980:                                              ; preds = %970
  %981 = icmp eq i32 %979, 0
  br i1 %981, label %988, label %982

982:                                              ; preds = %980
  %983 = load i32, ptr %692, align 4
  %984 = freeze i32 %983
  %985 = icmp slt i32 %984, 0
  %986 = select i1 %985, ptr %241, ptr %195
  %987 = select i1 %985, i32 %654, i32 %655
  br label %988

988:                                              ; preds = %982, %980
  %989 = phi ptr [ %195, %980 ], [ %986, %982 ]
  %990 = phi i32 [ %655, %980 ], [ %987, %982 ]
  %991 = icmp sgt i32 %990, 0
  br i1 %991, label %992, label %1143

992:                                              ; preds = %988
  %993 = icmp ugt i32 %990, 6
  br i1 %993, label %994, label %1078

994:                                              ; preds = %992
  %995 = add nsw i32 %990, -2
  %996 = getelementptr inbounds i16, ptr %989, i64 1
  %997 = load i16, ptr %996, align 2, !tbaa !45
  %998 = zext i16 %997 to i64
  %999 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %998
  %1000 = getelementptr inbounds %class.Vector, ptr %999, i64 0, i32 2
  %1001 = load double, ptr %1000, align 8, !tbaa !50
  %1002 = load i16, ptr %989, align 2, !tbaa !45
  %1003 = zext i16 %1002 to i64
  %1004 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1003
  %1005 = getelementptr inbounds %class.Vector, ptr %1004, i64 0, i32 2
  %1006 = load double, ptr %1005, align 8, !tbaa !50
  %1007 = getelementptr inbounds %class.Vector, ptr %999, i64 0, i32 1
  %1008 = load double, ptr %1007, align 8, !tbaa !68
  %1009 = getelementptr inbounds %class.Vector, ptr %1004, i64 0, i32 1
  %1010 = load double, ptr %1009, align 8, !tbaa !68
  %1011 = load double, ptr %999, align 8, !tbaa !69
  %1012 = load double, ptr %1004, align 8, !tbaa !69
  %1013 = zext i32 %995 to i64
  %1014 = insertelement <2 x double> poison, double %1001, i64 0
  %1015 = insertelement <2 x double> %1014, double %1006, i64 1
  %1016 = insertelement <2 x double> poison, double %1008, i64 0
  %1017 = insertelement <2 x double> %1016, double %1010, i64 1
  %1018 = insertelement <2 x double> poison, double %1011, i64 0
  %1019 = insertelement <2 x double> %1018, double %1012, i64 1
  %1020 = insertelement <2 x double> poison, double %711, i64 0
  %1021 = shufflevector <2 x double> %1020, <2 x double> poison, <2 x i32> zeroinitializer
  %1022 = shufflevector <2 x double> %708, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1023 = shufflevector <2 x double> %708, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1024

1024:                                             ; preds = %994, %1024
  %1025 = phi i64 [ 2, %994 ], [ %1068, %1024 ]
  %1026 = phi i32 [ 0, %994 ], [ %1067, %1024 ]
  %1027 = phi i16 [ %1002, %994 ], [ %1034, %1024 ]
  %1028 = phi i16 [ %997, %994 ], [ %1037, %1024 ]
  %1029 = phi <2 x double> [ %1015, %994 ], [ %1071, %1024 ]
  %1030 = phi <2 x double> [ %1017, %994 ], [ %1073, %1024 ]
  %1031 = phi <2 x double> [ %1019, %994 ], [ %1075, %1024 ]
  %1032 = fsub <2 x double> %1021, %1029
  %1033 = getelementptr inbounds i16, ptr %989, i64 %1025
  %1034 = load i16, ptr %1033, align 2, !tbaa !45
  %1035 = or i64 %1025, 1
  %1036 = getelementptr inbounds i16, ptr %989, i64 %1035
  %1037 = load i16, ptr %1036, align 2, !tbaa !45
  %1038 = zext i16 %1034 to i64
  %1039 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1038
  %1040 = load double, ptr %1039, align 8, !tbaa !69
  %1041 = zext i16 %1037 to i64
  %1042 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1041
  %1043 = load double, ptr %1042, align 8, !tbaa !69
  %1044 = getelementptr inbounds %class.Vector, ptr %1039, i64 0, i32 1
  %1045 = load double, ptr %1044, align 8, !tbaa !68
  %1046 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 1
  %1047 = load double, ptr %1046, align 8, !tbaa !68
  %1048 = getelementptr inbounds %class.Vector, ptr %1039, i64 0, i32 2
  %1049 = load double, ptr %1048, align 8, !tbaa !50
  %1050 = getelementptr inbounds %class.Vector, ptr %1042, i64 0, i32 2
  %1051 = load double, ptr %1050, align 8, !tbaa !50
  %1052 = fsub <2 x double> %1023, %1031
  %1053 = fmul <2 x double> %1052, %1052
  %1054 = fsub <2 x double> %1022, %1030
  %1055 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1054, <2 x double> %1054, <2 x double> %1053)
  %1056 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1032, <2 x double> %1032, <2 x double> %1055)
  %1057 = fcmp olt <2 x double> %1056, %677
  %1058 = zext i32 %1026 to i64
  %1059 = getelementptr inbounds i16, ptr %287, i64 %1058
  store i16 %1027, ptr %1059, align 2, !tbaa !45
  %1060 = extractelement <2 x i1> %1057, i64 1
  %1061 = zext i1 %1060 to i32
  %1062 = add nuw nsw i32 %1026, %1061
  %1063 = zext i32 %1062 to i64
  %1064 = getelementptr inbounds i16, ptr %287, i64 %1063
  store i16 %1028, ptr %1064, align 2, !tbaa !45
  %1065 = extractelement <2 x i1> %1057, i64 0
  %1066 = zext i1 %1065 to i32
  %1067 = add i32 %1062, %1066
  %1068 = add nuw nsw i64 %1025, 2
  %1069 = icmp ult i64 %1068, %1013
  %1070 = insertelement <2 x double> poison, double %1051, i64 0
  %1071 = insertelement <2 x double> %1070, double %1049, i64 1
  %1072 = insertelement <2 x double> poison, double %1047, i64 0
  %1073 = insertelement <2 x double> %1072, double %1045, i64 1
  %1074 = insertelement <2 x double> poison, double %1043, i64 0
  %1075 = insertelement <2 x double> %1074, double %1040, i64 1
  br i1 %1069, label %1024, label %1076

1076:                                             ; preds = %1024
  %1077 = trunc i64 %1025 to i32
  br label %1078

1078:                                             ; preds = %1076, %992
  %1079 = phi i32 [ %1067, %1076 ], [ 0, %992 ]
  %1080 = phi i32 [ %1077, %1076 ], [ 0, %992 ]
  %1081 = icmp slt i32 %1080, %990
  br i1 %1081, label %1082, label %1087

1082:                                             ; preds = %1078
  %1083 = zext i32 %1080 to i64
  %1084 = zext i32 %990 to i64
  %1085 = extractelement <2 x double> %708, i64 0
  %1086 = extractelement <2 x double> %708, i64 1
  br label %1092

1087:                                             ; preds = %1115, %1078
  %1088 = phi i32 [ %1079, %1078 ], [ %1116, %1115 ]
  %1089 = icmp sgt i32 %1088, 0
  br i1 %1089, label %1090, label %1143

1090:                                             ; preds = %1087
  %1091 = zext i32 %1088 to i64
  br label %1119

1092:                                             ; preds = %1082, %1115
  %1093 = phi i64 [ %1083, %1082 ], [ %1117, %1115 ]
  %1094 = phi i32 [ %1079, %1082 ], [ %1116, %1115 ]
  %1095 = getelementptr inbounds i16, ptr %989, i64 %1093
  %1096 = load i16, ptr %1095, align 2, !tbaa !45
  %1097 = zext i16 %1096 to i64
  %1098 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1097
  %1099 = load double, ptr %1098, align 8, !tbaa !69
  %1100 = getelementptr inbounds %class.Vector, ptr %1098, i64 0, i32 1
  %1101 = load double, ptr %1100, align 8, !tbaa !68
  %1102 = getelementptr inbounds %class.Vector, ptr %1098, i64 0, i32 2
  %1103 = load double, ptr %1102, align 8, !tbaa !50
  %1104 = fsub double %1085, %1099
  %1105 = fmul double %1104, %1104
  %1106 = fsub double %1086, %1101
  %1107 = tail call double @llvm.fmuladd.f64(double %1106, double %1106, double %1105)
  %1108 = fsub double %711, %1103
  %1109 = tail call double @llvm.fmuladd.f64(double %1108, double %1108, double %1107)
  %1110 = fcmp ugt double %1109, %27
  br i1 %1110, label %1115, label %1111

1111:                                             ; preds = %1092
  %1112 = add nsw i32 %1094, 1
  %1113 = sext i32 %1094 to i64
  %1114 = getelementptr inbounds i16, ptr %287, i64 %1113
  store i16 %1096, ptr %1114, align 2, !tbaa !45
  br label %1115

1115:                                             ; preds = %1111, %1092
  %1116 = phi i32 [ %1112, %1111 ], [ %1094, %1092 ]
  %1117 = add nuw nsw i64 %1093, 1
  %1118 = icmp eq i64 %1117, %1084
  br i1 %1118, label %1087, label %1092

1119:                                             ; preds = %1090, %1136
  %1120 = phi i64 [ 0, %1090 ], [ %1139, %1136 ]
  %1121 = phi ptr [ %425, %1090 ], [ %1138, %1136 ]
  %1122 = getelementptr inbounds i16, ptr %287, i64 %1120
  %1123 = load i16, ptr %1122, align 2, !tbaa !45
  %1124 = zext i16 %1123 to i64
  %1125 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1124, i32 4
  %1126 = load i8, ptr %1125, align 1
  %1127 = and i8 %1126, 7
  store i16 %1123, ptr %1121, align 2, !tbaa !45
  %1128 = getelementptr inbounds i16, ptr %1121, i64 1
  %1129 = insertelement <2 x i16> poison, i16 %1123, i64 0
  %1130 = shufflevector <2 x i16> %1129, <2 x i16> poison, <2 x i32> zeroinitializer
  %1131 = add <2 x i16> %1130, <i16 1, i16 2>
  store <2 x i16> %1131, ptr %1128, align 2, !tbaa !45
  %1132 = icmp ult i8 %1127, 4
  br i1 %1132, label %1136, label %1133

1133:                                             ; preds = %1119
  %1134 = add <2 x i16> %1130, <i16 3, i16 4>
  %1135 = getelementptr inbounds i16, ptr %1121, i64 3
  store <2 x i16> %1134, ptr %1135, align 2, !tbaa !45
  br label %1136

1136:                                             ; preds = %1133, %1119
  %1137 = zext i8 %1127 to i64
  %1138 = getelementptr inbounds i16, ptr %1121, i64 %1137
  %1139 = add nuw nsw i64 %1120, 1
  %1140 = icmp eq i64 %1139, %1091
  br i1 %1140, label %1141, label %1119

1141:                                             ; preds = %1136
  %1142 = ptrtoint ptr %1138 to i64
  br label %1143

1143:                                             ; preds = %1141, %1087, %988
  %1144 = phi i64 [ %1142, %1141 ], [ %664, %1087 ], [ %664, %988 ]
  %1145 = sub i64 %1144, %664
  %1146 = lshr exact i64 %1145, 1
  %1147 = trunc i64 %1146 to i32
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1149, label %1154

1149:                                             ; preds = %1143
  %1150 = load i8, ptr %975, align 1
  %1151 = and i8 %1150, 7
  %1152 = zext i8 %1151 to i32
  %1153 = add nsw i32 %681, %1152
  br label %2559

1154:                                             ; preds = %1143
  %1155 = shl i64 %1145, 31
  %1156 = add i64 %1155, -4294967296
  %1157 = ashr i64 %1156, 32
  %1158 = getelementptr inbounds i16, ptr %425, i64 %1157
  %1159 = load i16, ptr %1158, align 2, !tbaa !45
  %1160 = ashr i64 %1155, 32
  %1161 = getelementptr inbounds i16, ptr %425, i64 %1160
  store i16 %1159, ptr %1161, align 2, !tbaa !45
  br label %1162

1162:                                             ; preds = %1154, %970
  %1163 = phi i32 [ %1147, %1154 ], [ %685, %970 ]
  %1164 = icmp eq i32 %979, 0
  br i1 %1164, label %1169, label %1165

1165:                                             ; preds = %1162
  %1166 = load i32, ptr %692, align 4
  %1167 = and i32 %1166, 1073741824
  %1168 = icmp ne i32 %1167, 0
  br label %1169

1169:                                             ; preds = %1165, %1162
  %1170 = phi i1 [ false, %1162 ], [ %1168, %1165 ]
  %1171 = load i32, ptr %17, align 8, !tbaa !19
  %1172 = add nsw i32 %665, %1171
  %1173 = load i32, ptr %666, align 4, !tbaa !70
  %1174 = icmp sgt i32 %1173, %1172
  br i1 %1174, label %1190, label %1175

1175:                                             ; preds = %1169, %1175
  %1176 = phi i32 [ %1178, %1175 ], [ %1173, %1169 ]
  %1177 = ashr i32 %1176, 1
  %1178 = add nsw i32 %1177, %1176
  %1179 = icmp sgt i32 %1178, %1172
  br i1 %1179, label %1180, label %1175

1180:                                             ; preds = %1175
  %1181 = sext i32 %1178 to i64
  %1182 = icmp slt i32 %1178, 0
  %1183 = shl nsw i64 %1181, 1
  %1184 = select i1 %1182, i64 -1, i64 %1183
  %1185 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1184) #9
  %1186 = load ptr, ptr %12, align 8, !tbaa !47
  %1187 = sext i32 %1171 to i64
  %1188 = shl nsw i64 %1187, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1185, ptr align 2 %1186, i64 %1188, i1 false)
  %1189 = icmp eq ptr %1186, null
  br i1 %1189, label %1194, label %1192

1190:                                             ; preds = %1169
  %1191 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1196

1192:                                             ; preds = %1180
  tail call void @_ZdaPv(ptr noundef nonnull %1186) #10
  %1193 = load i32, ptr %17, align 8, !tbaa !19
  br label %1194

1194:                                             ; preds = %1192, %1180
  %1195 = phi i32 [ %1193, %1192 ], [ %1171, %1180 ]
  store ptr %1185, ptr %12, align 8, !tbaa !47
  store i32 %1178, ptr %666, align 4, !tbaa !70
  br label %1196

1196:                                             ; preds = %1190, %1194
  %1197 = phi i32 [ %1171, %1190 ], [ %1195, %1194 ]
  %1198 = phi ptr [ %1191, %1190 ], [ %1185, %1194 ]
  %1199 = ptrtoint ptr %1198 to i64
  %1200 = add nsw i32 %1197, 1
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds i16, ptr %1198, i64 %1201
  %1203 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1204 = icmp eq i32 %1203, 0
  br i1 %1204, label %1385, label %1205

1205:                                             ; preds = %1196
  %1206 = load i8, ptr %712, align 2, !tbaa !52
  %1207 = zext i8 %1206 to i32
  %1208 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1209 = icmp eq i32 %1208, 0
  br i1 %1209, label %1250, label %1210

1210:                                             ; preds = %1205
  %1211 = icmp eq i8 %1206, 1
  br i1 %1211, label %1212, label %1220

1212:                                             ; preds = %1210
  %1213 = icmp sgt i32 %1163, 0
  br i1 %1213, label %1214, label %1325

1214:                                             ; preds = %1212
  %1215 = zext i32 %1163 to i64
  %1216 = and i64 %1215, 1
  %1217 = icmp eq i32 %1163, 1
  br i1 %1217, label %1311, label %1218

1218:                                             ; preds = %1214
  %1219 = and i64 %1215, 4294967294
  br label %1222

1220:                                             ; preds = %1210
  %1221 = add nsw i32 %681, 1
  br label %2559

1222:                                             ; preds = %1245, %1218
  %1223 = phi i64 [ 0, %1218 ], [ %1247, %1245 ]
  %1224 = phi ptr [ %471, %1218 ], [ %1246, %1245 ]
  %1225 = phi i64 [ 0, %1218 ], [ %1248, %1245 ]
  %1226 = getelementptr inbounds i16, ptr %425, i64 %1223
  %1227 = load i16, ptr %1226, align 2, !tbaa !45
  %1228 = zext i16 %1227 to i64
  %1229 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1228, i32 3
  %1230 = load i8, ptr %1229, align 2, !tbaa !52
  %1231 = icmp eq i8 %1230, 1
  br i1 %1231, label %1232, label %1234

1232:                                             ; preds = %1222
  %1233 = getelementptr inbounds i16, ptr %1224, i64 1
  store i16 %1227, ptr %1224, align 2, !tbaa !45
  br label %1234

1234:                                             ; preds = %1232, %1222
  %1235 = phi ptr [ %1233, %1232 ], [ %1224, %1222 ]
  %1236 = or i64 %1223, 1
  %1237 = getelementptr inbounds i16, ptr %425, i64 %1236
  %1238 = load i16, ptr %1237, align 2, !tbaa !45
  %1239 = zext i16 %1238 to i64
  %1240 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1239, i32 3
  %1241 = load i8, ptr %1240, align 2, !tbaa !52
  %1242 = icmp eq i8 %1241, 1
  br i1 %1242, label %1243, label %1245

1243:                                             ; preds = %1234
  %1244 = getelementptr inbounds i16, ptr %1235, i64 1
  store i16 %1238, ptr %1235, align 2, !tbaa !45
  br label %1245

1245:                                             ; preds = %1243, %1234
  %1246 = phi ptr [ %1244, %1243 ], [ %1235, %1234 ]
  %1247 = add nuw nsw i64 %1223, 2
  %1248 = add i64 %1225, 2
  %1249 = icmp eq i64 %1248, %1219
  br i1 %1249, label %1311, label %1222

1250:                                             ; preds = %1205
  %1251 = add i8 %1206, -3
  %1252 = icmp ult i8 %1251, -2
  br i1 %1252, label %1261, label %1253

1253:                                             ; preds = %1250
  %1254 = icmp sgt i32 %1163, 0
  br i1 %1254, label %1255, label %1325

1255:                                             ; preds = %1253
  %1256 = zext i32 %1163 to i64
  %1257 = and i64 %1256, 1
  %1258 = icmp eq i32 %1163, 1
  br i1 %1258, label %1295, label %1259

1259:                                             ; preds = %1255
  %1260 = and i64 %1256, 4294967294
  br label %1263

1261:                                             ; preds = %1250
  %1262 = add nsw i32 %681, 1
  br label %2559

1263:                                             ; preds = %1290, %1259
  %1264 = phi i64 [ 0, %1259 ], [ %1292, %1290 ]
  %1265 = phi ptr [ %471, %1259 ], [ %1291, %1290 ]
  %1266 = phi i64 [ 0, %1259 ], [ %1293, %1290 ]
  %1267 = getelementptr inbounds i16, ptr %425, i64 %1264
  %1268 = load i16, ptr %1267, align 2, !tbaa !45
  %1269 = zext i16 %1268 to i64
  %1270 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1269, i32 3
  %1271 = load i8, ptr %1270, align 2, !tbaa !52
  %1272 = zext i8 %1271 to i32
  %1273 = add nuw nsw i32 %1272, %1207
  %1274 = icmp eq i32 %1273, 3
  br i1 %1274, label %1275, label %1277

1275:                                             ; preds = %1263
  %1276 = getelementptr inbounds i16, ptr %1265, i64 1
  store i16 %1268, ptr %1265, align 2, !tbaa !45
  br label %1277

1277:                                             ; preds = %1275, %1263
  %1278 = phi ptr [ %1276, %1275 ], [ %1265, %1263 ]
  %1279 = or i64 %1264, 1
  %1280 = getelementptr inbounds i16, ptr %425, i64 %1279
  %1281 = load i16, ptr %1280, align 2, !tbaa !45
  %1282 = zext i16 %1281 to i64
  %1283 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1282, i32 3
  %1284 = load i8, ptr %1283, align 2, !tbaa !52
  %1285 = zext i8 %1284 to i32
  %1286 = add nuw nsw i32 %1285, %1207
  %1287 = icmp eq i32 %1286, 3
  br i1 %1287, label %1288, label %1290

1288:                                             ; preds = %1277
  %1289 = getelementptr inbounds i16, ptr %1278, i64 1
  store i16 %1281, ptr %1278, align 2, !tbaa !45
  br label %1290

1290:                                             ; preds = %1288, %1277
  %1291 = phi ptr [ %1289, %1288 ], [ %1278, %1277 ]
  %1292 = add nuw nsw i64 %1264, 2
  %1293 = add i64 %1266, 2
  %1294 = icmp eq i64 %1293, %1260
  br i1 %1294, label %1295, label %1263

1295:                                             ; preds = %1290, %1255
  %1296 = phi ptr [ undef, %1255 ], [ %1291, %1290 ]
  %1297 = phi i64 [ 0, %1255 ], [ %1292, %1290 ]
  %1298 = phi ptr [ %471, %1255 ], [ %1291, %1290 ]
  %1299 = icmp eq i64 %1257, 0
  br i1 %1299, label %1325, label %1300

1300:                                             ; preds = %1295
  %1301 = getelementptr inbounds i16, ptr %425, i64 %1297
  %1302 = load i16, ptr %1301, align 2, !tbaa !45
  %1303 = zext i16 %1302 to i64
  %1304 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1303, i32 3
  %1305 = load i8, ptr %1304, align 2, !tbaa !52
  %1306 = zext i8 %1305 to i32
  %1307 = add nuw nsw i32 %1306, %1207
  %1308 = icmp eq i32 %1307, 3
  br i1 %1308, label %1309, label %1325

1309:                                             ; preds = %1300
  %1310 = getelementptr inbounds i16, ptr %1298, i64 1
  store i16 %1302, ptr %1298, align 2, !tbaa !45
  br label %1325

1311:                                             ; preds = %1245, %1214
  %1312 = phi ptr [ undef, %1214 ], [ %1246, %1245 ]
  %1313 = phi i64 [ 0, %1214 ], [ %1247, %1245 ]
  %1314 = phi ptr [ %471, %1214 ], [ %1246, %1245 ]
  %1315 = icmp eq i64 %1216, 0
  br i1 %1315, label %1325, label %1316

1316:                                             ; preds = %1311
  %1317 = getelementptr inbounds i16, ptr %425, i64 %1313
  %1318 = load i16, ptr %1317, align 2, !tbaa !45
  %1319 = zext i16 %1318 to i64
  %1320 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1319, i32 3
  %1321 = load i8, ptr %1320, align 2, !tbaa !52
  %1322 = icmp eq i8 %1321, 1
  br i1 %1322, label %1323, label %1325

1323:                                             ; preds = %1316
  %1324 = getelementptr inbounds i16, ptr %1314, i64 1
  store i16 %1318, ptr %1314, align 2, !tbaa !45
  br label %1325

1325:                                             ; preds = %1311, %1323, %1316, %1295, %1309, %1300, %1212, %1253
  %1326 = phi ptr [ %471, %1253 ], [ %471, %1212 ], [ %1296, %1295 ], [ %1310, %1309 ], [ %1298, %1300 ], [ %1312, %1311 ], [ %1324, %1323 ], [ %1314, %1316 ]
  %1327 = ptrtoint ptr %1326 to i64
  %1328 = sub i64 %1327, %667
  %1329 = lshr exact i64 %1328, 1
  %1330 = trunc i64 %1329 to i32
  %1331 = icmp sgt i32 %1330, 0
  br i1 %1331, label %1332, label %1594

1332:                                             ; preds = %1325
  %1333 = and i64 %1329, 4294967295
  %1334 = extractelement <2 x double> %708, i64 0
  %1335 = extractelement <2 x double> %708, i64 1
  br label %1336

1336:                                             ; preds = %1332, %1380
  %1337 = phi i64 [ 0, %1332 ], [ %1383, %1380 ]
  %1338 = phi ptr [ %471, %1332 ], [ %1382, %1380 ]
  %1339 = phi ptr [ %1202, %1332 ], [ %1381, %1380 ]
  %1340 = getelementptr inbounds i16, ptr %471, i64 %1337
  %1341 = load i16, ptr %1340, align 2, !tbaa !45
  %1342 = zext i16 %1341 to i64
  %1343 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1342
  %1344 = load double, ptr %1343, align 8, !tbaa !69
  %1345 = fsub double %1334, %1344
  %1346 = fmul double %1345, %1345
  %1347 = getelementptr inbounds %class.Vector, ptr %1343, i64 0, i32 1
  %1348 = load double, ptr %1347, align 8, !tbaa !68
  %1349 = fsub double %1335, %1348
  %1350 = tail call double @llvm.fmuladd.f64(double %1349, double %1349, double %1346)
  %1351 = getelementptr inbounds %class.Vector, ptr %1343, i64 0, i32 2
  %1352 = load double, ptr %1351, align 8, !tbaa !50
  %1353 = fsub double %711, %1352
  %1354 = tail call double @llvm.fmuladd.f64(double %1353, double %1353, double %1350)
  br i1 %1170, label %1355, label %1362

1355:                                             ; preds = %1336
  %1356 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1342
  %1357 = load i32, ptr %1356, align 4
  %1358 = and i32 %1357, 1073741824
  %1359 = icmp ne i32 %1358, 0
  %1360 = fcmp ugt double %1354, %24
  %1361 = select i1 %1359, i1 true, i1 %1360
  br i1 %1361, label %1380, label %1367

1362:                                             ; preds = %1336
  %1363 = fcmp ugt double %1354, %24
  br i1 %1363, label %1380, label %1364

1364:                                             ; preds = %1362
  %1365 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1342
  %1366 = load i32, ptr %1365, align 4
  br label %1367

1367:                                             ; preds = %1364, %1355
  %1368 = phi i32 [ %1366, %1364 ], [ %1357, %1355 ]
  %1369 = shl i32 %1368, 2
  %1370 = ashr exact i32 %1369, 2
  %1371 = icmp slt i32 %1370, %734
  %1372 = icmp sgt i32 %1370, %736
  %1373 = select i1 %1371, i1 true, i1 %1372
  %1374 = select i1 %1373, ptr %1339, ptr %1338
  %1375 = zext i1 %1373 to i64
  %1376 = getelementptr inbounds i16, ptr %1339, i64 %1375
  %1377 = xor i1 %1373, true
  %1378 = zext i1 %1377 to i64
  %1379 = getelementptr inbounds i16, ptr %1338, i64 %1378
  store i16 %1341, ptr %1374, align 2, !tbaa !45
  br label %1380

1380:                                             ; preds = %1367, %1362, %1355
  %1381 = phi ptr [ %1339, %1355 ], [ %1339, %1362 ], [ %1376, %1367 ]
  %1382 = phi ptr [ %1338, %1355 ], [ %1338, %1362 ], [ %1379, %1367 ]
  %1383 = add nuw nsw i64 %1337, 1
  %1384 = icmp eq i64 %1383, %1333
  br i1 %1384, label %1594, label %1336

1385:                                             ; preds = %1196
  %1386 = icmp sgt i32 %1163, 0
  br i1 %1170, label %1387, label %1434

1387:                                             ; preds = %1385
  br i1 %1386, label %1388, label %1594

1388:                                             ; preds = %1387
  %1389 = zext i32 %1163 to i64
  %1390 = extractelement <2 x double> %708, i64 0
  %1391 = extractelement <2 x double> %708, i64 1
  br label %1392

1392:                                             ; preds = %1388, %1429
  %1393 = phi i64 [ 0, %1388 ], [ %1432, %1429 ]
  %1394 = phi ptr [ %471, %1388 ], [ %1431, %1429 ]
  %1395 = phi ptr [ %1202, %1388 ], [ %1430, %1429 ]
  %1396 = getelementptr inbounds i16, ptr %425, i64 %1393
  %1397 = load i16, ptr %1396, align 2, !tbaa !45
  %1398 = zext i16 %1397 to i64
  %1399 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1398
  %1400 = load i32, ptr %1399, align 4
  %1401 = and i32 %1400, 1073741824
  %1402 = icmp eq i32 %1401, 0
  br i1 %1402, label %1403, label %1429

1403:                                             ; preds = %1392
  %1404 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1398
  %1405 = getelementptr inbounds %class.Vector, ptr %1404, i64 0, i32 2
  %1406 = load double, ptr %1405, align 8, !tbaa !50
  %1407 = fsub double %711, %1406
  %1408 = getelementptr inbounds %class.Vector, ptr %1404, i64 0, i32 1
  %1409 = load double, ptr %1408, align 8, !tbaa !68
  %1410 = fsub double %1391, %1409
  %1411 = load double, ptr %1404, align 8, !tbaa !69
  %1412 = fsub double %1390, %1411
  %1413 = fmul double %1412, %1412
  %1414 = tail call double @llvm.fmuladd.f64(double %1410, double %1410, double %1413)
  %1415 = tail call double @llvm.fmuladd.f64(double %1407, double %1407, double %1414)
  %1416 = fcmp ugt double %1415, %24
  br i1 %1416, label %1429, label %1417

1417:                                             ; preds = %1403
  %1418 = shl i32 %1400, 2
  %1419 = ashr exact i32 %1418, 2
  %1420 = icmp slt i32 %1419, %734
  %1421 = icmp sgt i32 %1419, %736
  %1422 = select i1 %1420, i1 true, i1 %1421
  %1423 = select i1 %1422, ptr %1395, ptr %1394
  %1424 = zext i1 %1422 to i64
  %1425 = getelementptr inbounds i16, ptr %1395, i64 %1424
  %1426 = xor i1 %1422, true
  %1427 = zext i1 %1426 to i64
  %1428 = getelementptr inbounds i16, ptr %1394, i64 %1427
  store i16 %1397, ptr %1423, align 2, !tbaa !45
  br label %1429

1429:                                             ; preds = %1417, %1403, %1392
  %1430 = phi ptr [ %1395, %1392 ], [ %1395, %1403 ], [ %1425, %1417 ]
  %1431 = phi ptr [ %1394, %1392 ], [ %1394, %1403 ], [ %1428, %1417 ]
  %1432 = add nuw nsw i64 %1393, 1
  %1433 = icmp eq i64 %1432, %1389
  br i1 %1433, label %1594, label %1392

1434:                                             ; preds = %1385
  br i1 %1386, label %1435, label %1594

1435:                                             ; preds = %1434
  %1436 = icmp ugt i32 %1163, 6
  br i1 %1436, label %1437, label %1545

1437:                                             ; preds = %1435
  %1438 = add nsw i32 %1163, -2
  %1439 = load i16, ptr %425, align 2, !tbaa !45
  %1440 = zext i16 %1439 to i64
  %1441 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1440
  %1442 = load i32, ptr %1441, align 4
  %1443 = load i16, ptr %668, align 2, !tbaa !45
  %1444 = zext i16 %1443 to i64
  %1445 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1444
  %1446 = getelementptr inbounds %class.Vector, ptr %1445, i64 0, i32 2
  %1447 = load double, ptr %1446, align 8, !tbaa !50
  %1448 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1440
  %1449 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 2
  %1450 = load double, ptr %1449, align 8, !tbaa !50
  %1451 = getelementptr inbounds %class.Vector, ptr %1445, i64 0, i32 1
  %1452 = load double, ptr %1451, align 8, !tbaa !68
  %1453 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 1
  %1454 = load double, ptr %1453, align 8, !tbaa !68
  %1455 = load double, ptr %1445, align 8, !tbaa !69
  %1456 = load double, ptr %1448, align 8, !tbaa !69
  %1457 = zext i32 %1438 to i64
  %1458 = extractelement <2 x double> %708, i64 0
  %1459 = extractelement <2 x double> %708, i64 1
  br label %1460

1460:                                             ; preds = %1437, %1538
  %1461 = phi i64 [ 2, %1437 ], [ %1541, %1538 ]
  %1462 = phi i64 [ %1444, %1437 ], [ %1498, %1538 ]
  %1463 = phi i32 [ %1442, %1437 ], [ %1526, %1538 ]
  %1464 = phi ptr [ %471, %1437 ], [ %1540, %1538 ]
  %1465 = phi ptr [ %1202, %1437 ], [ %1539, %1538 ]
  %1466 = phi i16 [ %1439, %1437 ], [ %1491, %1538 ]
  %1467 = phi i16 [ %1443, %1437 ], [ %1494, %1538 ]
  %1468 = phi double [ %1456, %1437 ], [ %1497, %1538 ]
  %1469 = phi double [ %1455, %1437 ], [ %1500, %1538 ]
  %1470 = phi double [ %1454, %1437 ], [ %1502, %1538 ]
  %1471 = phi double [ %1452, %1437 ], [ %1504, %1538 ]
  %1472 = phi double [ %1450, %1437 ], [ %1506, %1538 ]
  %1473 = phi double [ %1447, %1437 ], [ %1508, %1538 ]
  %1474 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1462
  %1475 = load i32, ptr %1474, align 4
  %1476 = shl i32 %1475, 2
  %1477 = ashr exact i32 %1476, 2
  %1478 = fsub double %1458, %1468
  %1479 = fsub double %1458, %1469
  %1480 = fmul double %1478, %1478
  %1481 = fmul double %1479, %1479
  %1482 = fsub double %1459, %1470
  %1483 = fsub double %1459, %1471
  %1484 = tail call double @llvm.fmuladd.f64(double %1482, double %1482, double %1480)
  %1485 = tail call double @llvm.fmuladd.f64(double %1483, double %1483, double %1481)
  %1486 = fsub double %711, %1472
  %1487 = fsub double %711, %1473
  %1488 = tail call double @llvm.fmuladd.f64(double %1486, double %1486, double %1484)
  %1489 = tail call double @llvm.fmuladd.f64(double %1487, double %1487, double %1485)
  %1490 = getelementptr inbounds i16, ptr %425, i64 %1461
  %1491 = load i16, ptr %1490, align 2, !tbaa !45
  %1492 = or i64 %1461, 1
  %1493 = getelementptr inbounds i16, ptr %425, i64 %1492
  %1494 = load i16, ptr %1493, align 2, !tbaa !45
  %1495 = zext i16 %1491 to i64
  %1496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1495
  %1497 = load double, ptr %1496, align 8, !tbaa !69
  %1498 = zext i16 %1494 to i64
  %1499 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1498
  %1500 = load double, ptr %1499, align 8, !tbaa !69
  %1501 = getelementptr inbounds %class.Vector, ptr %1496, i64 0, i32 1
  %1502 = load double, ptr %1501, align 8, !tbaa !68
  %1503 = getelementptr inbounds %class.Vector, ptr %1499, i64 0, i32 1
  %1504 = load double, ptr %1503, align 8, !tbaa !68
  %1505 = getelementptr inbounds %class.Vector, ptr %1496, i64 0, i32 2
  %1506 = load double, ptr %1505, align 8, !tbaa !50
  %1507 = getelementptr inbounds %class.Vector, ptr %1499, i64 0, i32 2
  %1508 = load double, ptr %1507, align 8, !tbaa !50
  %1509 = fcmp ugt double %1488, %24
  br i1 %1509, label %1522, label %1510

1510:                                             ; preds = %1460
  %1511 = shl i32 %1463, 2
  %1512 = ashr exact i32 %1511, 2
  %1513 = icmp slt i32 %1512, %734
  %1514 = icmp sgt i32 %1512, %736
  %1515 = select i1 %1513, i1 true, i1 %1514
  %1516 = select i1 %1515, ptr %1465, ptr %1464
  %1517 = zext i1 %1515 to i64
  %1518 = getelementptr inbounds i16, ptr %1465, i64 %1517
  %1519 = xor i1 %1515, true
  %1520 = zext i1 %1519 to i64
  %1521 = getelementptr inbounds i16, ptr %1464, i64 %1520
  store i16 %1466, ptr %1516, align 2, !tbaa !45
  br label %1522

1522:                                             ; preds = %1510, %1460
  %1523 = phi ptr [ %1465, %1460 ], [ %1518, %1510 ]
  %1524 = phi ptr [ %1464, %1460 ], [ %1521, %1510 ]
  %1525 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1495
  %1526 = load i32, ptr %1525, align 4
  %1527 = fcmp ugt double %1489, %24
  br i1 %1527, label %1538, label %1528

1528:                                             ; preds = %1522
  %1529 = icmp slt i32 %1477, %734
  %1530 = icmp sgt i32 %1477, %736
  %1531 = select i1 %1529, i1 true, i1 %1530
  %1532 = select i1 %1531, ptr %1523, ptr %1524
  %1533 = zext i1 %1531 to i64
  %1534 = getelementptr inbounds i16, ptr %1523, i64 %1533
  %1535 = xor i1 %1531, true
  %1536 = zext i1 %1535 to i64
  %1537 = getelementptr inbounds i16, ptr %1524, i64 %1536
  store i16 %1467, ptr %1532, align 2, !tbaa !45
  br label %1538

1538:                                             ; preds = %1528, %1522
  %1539 = phi ptr [ %1523, %1522 ], [ %1534, %1528 ]
  %1540 = phi ptr [ %1524, %1522 ], [ %1537, %1528 ]
  %1541 = add nuw nsw i64 %1461, 2
  %1542 = icmp ult i64 %1541, %1457
  br i1 %1542, label %1460, label %1543

1543:                                             ; preds = %1538
  %1544 = trunc i64 %1461 to i32
  br label %1545

1545:                                             ; preds = %1543, %1435
  %1546 = phi i32 [ %1544, %1543 ], [ 0, %1435 ]
  %1547 = phi ptr [ %1539, %1543 ], [ %1202, %1435 ]
  %1548 = phi ptr [ %1540, %1543 ], [ %471, %1435 ]
  %1549 = icmp slt i32 %1546, %1163
  br i1 %1549, label %1550, label %1594

1550:                                             ; preds = %1545
  %1551 = zext i32 %1546 to i64
  %1552 = zext i32 %1163 to i64
  %1553 = extractelement <2 x double> %708, i64 0
  %1554 = extractelement <2 x double> %708, i64 1
  br label %1555

1555:                                             ; preds = %1550, %1589
  %1556 = phi i64 [ %1551, %1550 ], [ %1592, %1589 ]
  %1557 = phi ptr [ %1548, %1550 ], [ %1591, %1589 ]
  %1558 = phi ptr [ %1547, %1550 ], [ %1590, %1589 ]
  %1559 = getelementptr inbounds i16, ptr %425, i64 %1556
  %1560 = load i16, ptr %1559, align 2, !tbaa !45
  %1561 = zext i16 %1560 to i64
  %1562 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1561
  %1563 = load double, ptr %1562, align 8, !tbaa !69
  %1564 = getelementptr inbounds %class.Vector, ptr %1562, i64 0, i32 1
  %1565 = load double, ptr %1564, align 8, !tbaa !68
  %1566 = getelementptr inbounds %class.Vector, ptr %1562, i64 0, i32 2
  %1567 = load double, ptr %1566, align 8, !tbaa !50
  %1568 = fsub double %1553, %1563
  %1569 = fmul double %1568, %1568
  %1570 = fsub double %1554, %1565
  %1571 = tail call double @llvm.fmuladd.f64(double %1570, double %1570, double %1569)
  %1572 = fsub double %711, %1567
  %1573 = tail call double @llvm.fmuladd.f64(double %1572, double %1572, double %1571)
  %1574 = fcmp ugt double %1573, %24
  br i1 %1574, label %1589, label %1575

1575:                                             ; preds = %1555
  %1576 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1561
  %1577 = load i32, ptr %1576, align 4
  %1578 = shl i32 %1577, 2
  %1579 = ashr exact i32 %1578, 2
  %1580 = icmp slt i32 %1579, %734
  %1581 = icmp sgt i32 %1579, %736
  %1582 = select i1 %1580, i1 true, i1 %1581
  %1583 = select i1 %1582, ptr %1558, ptr %1557
  %1584 = zext i1 %1582 to i64
  %1585 = getelementptr inbounds i16, ptr %1558, i64 %1584
  %1586 = xor i1 %1582, true
  %1587 = zext i1 %1586 to i64
  %1588 = getelementptr inbounds i16, ptr %1557, i64 %1587
  store i16 %1560, ptr %1583, align 2, !tbaa !45
  br label %1589

1589:                                             ; preds = %1575, %1555
  %1590 = phi ptr [ %1558, %1555 ], [ %1585, %1575 ]
  %1591 = phi ptr [ %1557, %1555 ], [ %1588, %1575 ]
  %1592 = add nuw nsw i64 %1556, 1
  %1593 = icmp eq i64 %1592, %1552
  br i1 %1593, label %1594, label %1555

1594:                                             ; preds = %1380, %1589, %1429, %1325, %1545, %1387, %1434
  %1595 = phi ptr [ %1202, %1434 ], [ %1202, %1387 ], [ %1547, %1545 ], [ %1202, %1325 ], [ %1430, %1429 ], [ %1590, %1589 ], [ %1381, %1380 ]
  %1596 = phi ptr [ %471, %1434 ], [ %471, %1387 ], [ %1548, %1545 ], [ %471, %1325 ], [ %1431, %1429 ], [ %1591, %1589 ], [ %1382, %1380 ]
  %1597 = icmp eq ptr %1595, %1202
  %1598 = icmp eq ptr %1596, %471
  %1599 = select i1 %1597, i1 %1598, i1 false
  br i1 %1599, label %1600, label %1602

1600:                                             ; preds = %1594
  %1601 = add nsw i32 %681, 1
  br label %2559

1602:                                             ; preds = %1594
  %1603 = trunc i32 %681 to i16
  %1604 = load i32, ptr %17, align 8, !tbaa !19
  %1605 = add nsw i32 %1604, -1
  %1606 = sext i32 %1605 to i64
  %1607 = getelementptr inbounds i16, ptr %1198, i64 %1606
  store i16 %1603, ptr %1607, align 2, !tbaa !45
  %1608 = ptrtoint ptr %1596 to i64
  %1609 = sub i64 %1608, %667
  %1610 = lshr exact i64 %1609, 1
  %1611 = trunc i64 %1610 to i32
  %1612 = icmp sgt i32 %1611, 0
  br i1 %1612, label %1613, label %1713

1613:                                             ; preds = %1602
  %1614 = and i64 %1610, 4294967295
  %1615 = and i64 %1610, 1
  %1616 = icmp eq i64 %1614, 1
  br i1 %1616, label %1681, label %1617

1617:                                             ; preds = %1613
  %1618 = sub nsw i64 %1614, %1615
  br label %1619

1619:                                             ; preds = %1674, %1617
  %1620 = phi i64 [ 0, %1617 ], [ %1678, %1674 ]
  %1621 = phi ptr [ %1595, %1617 ], [ %1677, %1674 ]
  %1622 = phi ptr [ %333, %1617 ], [ %1676, %1674 ]
  %1623 = phi ptr [ %379, %1617 ], [ %1675, %1674 ]
  %1624 = phi i64 [ 0, %1617 ], [ %1679, %1674 ]
  %1625 = getelementptr inbounds i16, ptr %471, i64 %1620
  %1626 = load i16, ptr %1625, align 2, !tbaa !45
  %1627 = zext i16 %1626 to i64
  %1628 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1627
  %1629 = load i32, ptr %1628, align 4
  %1630 = shl i32 %1629, 2
  %1631 = ashr exact i32 %1630, 2
  %1632 = sext i32 %1631 to i64
  %1633 = getelementptr inbounds i8, ptr %971, i64 %1632
  %1634 = load i8, ptr %1633, align 1, !tbaa !59
  %1635 = sext i8 %1634 to i32
  switch i32 %1635, label %1647 [
    i32 0, label %1636
    i32 1, label %1638
    i32 2, label %1640
  ]

1636:                                             ; preds = %1619
  %1637 = getelementptr inbounds i16, ptr %1621, i64 1
  br label %1642

1638:                                             ; preds = %1619
  %1639 = getelementptr inbounds i16, ptr %1622, i64 1
  br label %1642

1640:                                             ; preds = %1619
  %1641 = getelementptr inbounds i16, ptr %1623, i64 1
  br label %1642

1642:                                             ; preds = %1636, %1638, %1640
  %1643 = phi ptr [ %1623, %1640 ], [ %1622, %1638 ], [ %1621, %1636 ]
  %1644 = phi ptr [ %1641, %1640 ], [ %1623, %1638 ], [ %1623, %1636 ]
  %1645 = phi ptr [ %1622, %1640 ], [ %1639, %1638 ], [ %1622, %1636 ]
  %1646 = phi ptr [ %1621, %1640 ], [ %1621, %1638 ], [ %1637, %1636 ]
  store i16 %1626, ptr %1643, align 2, !tbaa !45
  br label %1647

1647:                                             ; preds = %1642, %1619
  %1648 = phi ptr [ %1623, %1619 ], [ %1644, %1642 ]
  %1649 = phi ptr [ %1622, %1619 ], [ %1645, %1642 ]
  %1650 = phi ptr [ %1621, %1619 ], [ %1646, %1642 ]
  %1651 = or i64 %1620, 1
  %1652 = getelementptr inbounds i16, ptr %471, i64 %1651
  %1653 = load i16, ptr %1652, align 2, !tbaa !45
  %1654 = zext i16 %1653 to i64
  %1655 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1654
  %1656 = load i32, ptr %1655, align 4
  %1657 = shl i32 %1656, 2
  %1658 = ashr exact i32 %1657, 2
  %1659 = sext i32 %1658 to i64
  %1660 = getelementptr inbounds i8, ptr %971, i64 %1659
  %1661 = load i8, ptr %1660, align 1, !tbaa !59
  %1662 = sext i8 %1661 to i32
  switch i32 %1662, label %1674 [
    i32 0, label %1667
    i32 1, label %1665
    i32 2, label %1663
  ]

1663:                                             ; preds = %1647
  %1664 = getelementptr inbounds i16, ptr %1648, i64 1
  br label %1669

1665:                                             ; preds = %1647
  %1666 = getelementptr inbounds i16, ptr %1649, i64 1
  br label %1669

1667:                                             ; preds = %1647
  %1668 = getelementptr inbounds i16, ptr %1650, i64 1
  br label %1669

1669:                                             ; preds = %1667, %1665, %1663
  %1670 = phi ptr [ %1648, %1663 ], [ %1649, %1665 ], [ %1650, %1667 ]
  %1671 = phi ptr [ %1664, %1663 ], [ %1648, %1665 ], [ %1648, %1667 ]
  %1672 = phi ptr [ %1649, %1663 ], [ %1666, %1665 ], [ %1649, %1667 ]
  %1673 = phi ptr [ %1650, %1663 ], [ %1650, %1665 ], [ %1668, %1667 ]
  store i16 %1653, ptr %1670, align 2, !tbaa !45
  br label %1674

1674:                                             ; preds = %1669, %1647
  %1675 = phi ptr [ %1648, %1647 ], [ %1671, %1669 ]
  %1676 = phi ptr [ %1649, %1647 ], [ %1672, %1669 ]
  %1677 = phi ptr [ %1650, %1647 ], [ %1673, %1669 ]
  %1678 = add nuw nsw i64 %1620, 2
  %1679 = add i64 %1624, 2
  %1680 = icmp eq i64 %1679, %1618
  br i1 %1680, label %1681, label %1619

1681:                                             ; preds = %1674, %1613
  %1682 = phi ptr [ undef, %1613 ], [ %1675, %1674 ]
  %1683 = phi ptr [ undef, %1613 ], [ %1676, %1674 ]
  %1684 = phi ptr [ undef, %1613 ], [ %1677, %1674 ]
  %1685 = phi i64 [ 0, %1613 ], [ %1678, %1674 ]
  %1686 = phi ptr [ %1595, %1613 ], [ %1677, %1674 ]
  %1687 = phi ptr [ %333, %1613 ], [ %1676, %1674 ]
  %1688 = phi ptr [ %379, %1613 ], [ %1675, %1674 ]
  %1689 = icmp eq i64 %1615, 0
  br i1 %1689, label %1713, label %1690

1690:                                             ; preds = %1681
  %1691 = getelementptr inbounds i16, ptr %471, i64 %1685
  %1692 = load i16, ptr %1691, align 2, !tbaa !45
  %1693 = zext i16 %1692 to i64
  %1694 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1693
  %1695 = load i32, ptr %1694, align 4
  %1696 = shl i32 %1695, 2
  %1697 = ashr exact i32 %1696, 2
  %1698 = sext i32 %1697 to i64
  %1699 = getelementptr inbounds i8, ptr %971, i64 %1698
  %1700 = load i8, ptr %1699, align 1, !tbaa !59
  %1701 = sext i8 %1700 to i32
  switch i32 %1701, label %1713 [
    i32 0, label %1706
    i32 1, label %1704
    i32 2, label %1702
  ]

1702:                                             ; preds = %1690
  %1703 = getelementptr inbounds i16, ptr %1688, i64 1
  br label %1708

1704:                                             ; preds = %1690
  %1705 = getelementptr inbounds i16, ptr %1687, i64 1
  br label %1708

1706:                                             ; preds = %1690
  %1707 = getelementptr inbounds i16, ptr %1686, i64 1
  br label %1708

1708:                                             ; preds = %1706, %1704, %1702
  %1709 = phi ptr [ %1688, %1702 ], [ %1687, %1704 ], [ %1686, %1706 ]
  %1710 = phi ptr [ %1703, %1702 ], [ %1688, %1704 ], [ %1688, %1706 ]
  %1711 = phi ptr [ %1687, %1702 ], [ %1705, %1704 ], [ %1687, %1706 ]
  %1712 = phi ptr [ %1686, %1702 ], [ %1686, %1704 ], [ %1707, %1706 ]
  store i16 %1692, ptr %1709, align 2, !tbaa !45
  br label %1713

1713:                                             ; preds = %1681, %1708, %1690, %1602
  %1714 = phi ptr [ %379, %1602 ], [ %1682, %1681 ], [ %1688, %1690 ], [ %1710, %1708 ]
  %1715 = phi ptr [ %333, %1602 ], [ %1683, %1681 ], [ %1687, %1690 ], [ %1711, %1708 ]
  %1716 = phi ptr [ %1595, %1602 ], [ %1684, %1681 ], [ %1686, %1690 ], [ %1712, %1708 ]
  %1717 = ptrtoint ptr %1716 to i64
  %1718 = ptrtoint ptr %1202 to i64
  %1719 = sub i64 %1717, %1718
  %1720 = lshr exact i64 %1719, 1
  %1721 = trunc i64 %1720 to i32
  %1722 = icmp eq i32 %1721, 0
  %1723 = shl i64 %1719, 31
  br i1 %1722, label %1729, label %1724

1724:                                             ; preds = %1713
  %1725 = add i64 %1723, -4294967296
  %1726 = ashr i64 %1725, 32
  %1727 = getelementptr inbounds i16, ptr %1202, i64 %1726
  %1728 = load i16, ptr %1727, align 2, !tbaa !45
  br label %1729

1729:                                             ; preds = %1713, %1724
  %1730 = phi i16 [ %1728, %1724 ], [ -1, %1713 ]
  %1731 = ashr i64 %1723, 32
  %1732 = getelementptr inbounds i16, ptr %1202, i64 %1731
  store i16 %1730, ptr %1732, align 2, !tbaa !45
  %1733 = trunc i64 %1720 to i16
  %1734 = add i16 %1733, 1
  %1735 = sext i32 %1604 to i64
  %1736 = getelementptr inbounds i16, ptr %1198, i64 %1735
  store i16 %1734, ptr %1736, align 2, !tbaa !45
  %1737 = add i32 %1604, 2
  %1738 = add i32 %1737, %1721
  %1739 = ptrtoint ptr %1715 to i64
  %1740 = sub i64 %1739, %669
  %1741 = lshr exact i64 %1740, 1
  %1742 = trunc i64 %1741 to i32
  %1743 = add nsw i32 %1738, 1
  %1744 = sext i32 %1743 to i64
  %1745 = getelementptr i16, ptr %1198, i64 %1744
  %1746 = icmp sgt i32 %1742, 0
  br i1 %1746, label %1747, label %1837

1747:                                             ; preds = %1729
  %1748 = and i64 %1741, 4294967295
  %1749 = icmp ult i64 %1748, 8
  br i1 %1749, label %1793, label %1750

1750:                                             ; preds = %1747
  %1751 = shl nsw i64 %1744, 1
  %1752 = add i64 %1751, %1199
  %1753 = sub i64 %1752, %669
  %1754 = icmp ult i64 %1753, 128
  br i1 %1754, label %1793, label %1755

1755:                                             ; preds = %1750
  %1756 = icmp ult i64 %1748, 64
  br i1 %1756, label %1780, label %1757

1757:                                             ; preds = %1755
  %1758 = and i64 %1741, 63
  %1759 = sub nsw i64 %1748, %1758
  br label %1760

1760:                                             ; preds = %1760, %1757
  %1761 = phi i64 [ 0, %1757 ], [ %1774, %1760 ]
  %1762 = getelementptr inbounds i16, ptr %333, i64 %1761
  %1763 = load <16 x i16>, ptr %1762, align 2, !tbaa !45
  %1764 = getelementptr inbounds i16, ptr %1762, i64 16
  %1765 = load <16 x i16>, ptr %1764, align 2, !tbaa !45
  %1766 = getelementptr inbounds i16, ptr %1762, i64 32
  %1767 = load <16 x i16>, ptr %1766, align 2, !tbaa !45
  %1768 = getelementptr inbounds i16, ptr %1762, i64 48
  %1769 = load <16 x i16>, ptr %1768, align 2, !tbaa !45
  %1770 = getelementptr inbounds i16, ptr %1745, i64 %1761
  store <16 x i16> %1763, ptr %1770, align 2, !tbaa !45
  %1771 = getelementptr inbounds i16, ptr %1770, i64 16
  store <16 x i16> %1765, ptr %1771, align 2, !tbaa !45
  %1772 = getelementptr inbounds i16, ptr %1770, i64 32
  store <16 x i16> %1767, ptr %1772, align 2, !tbaa !45
  %1773 = getelementptr inbounds i16, ptr %1770, i64 48
  store <16 x i16> %1769, ptr %1773, align 2, !tbaa !45
  %1774 = add nuw i64 %1761, 64
  %1775 = icmp eq i64 %1774, %1759
  br i1 %1775, label %1776, label %1760, !llvm.loop !166

1776:                                             ; preds = %1760
  %1777 = icmp eq i64 %1758, 0
  br i1 %1777, label %1831, label %1778

1778:                                             ; preds = %1776
  %1779 = icmp ult i64 %1758, 8
  br i1 %1779, label %1793, label %1780

1780:                                             ; preds = %1755, %1778
  %1781 = phi i64 [ %1759, %1778 ], [ 0, %1755 ]
  %1782 = and i64 %1741, 7
  %1783 = sub nsw i64 %1748, %1782
  br label %1784

1784:                                             ; preds = %1784, %1780
  %1785 = phi i64 [ %1781, %1780 ], [ %1789, %1784 ]
  %1786 = getelementptr inbounds i16, ptr %333, i64 %1785
  %1787 = load <8 x i16>, ptr %1786, align 2, !tbaa !45
  %1788 = getelementptr inbounds i16, ptr %1745, i64 %1785
  store <8 x i16> %1787, ptr %1788, align 2, !tbaa !45
  %1789 = add nuw i64 %1785, 8
  %1790 = icmp eq i64 %1789, %1783
  br i1 %1790, label %1791, label %1784, !llvm.loop !167

1791:                                             ; preds = %1784
  %1792 = icmp eq i64 %1782, 0
  br i1 %1792, label %1831, label %1793

1793:                                             ; preds = %1750, %1747, %1778, %1791
  %1794 = phi i64 [ 0, %1747 ], [ 0, %1750 ], [ %1759, %1778 ], [ %1783, %1791 ]
  %1795 = sub i64 %1741, %1794
  %1796 = xor i64 %1794, -1
  %1797 = add nsw i64 %1748, %1796
  %1798 = and i64 %1795, 3
  %1799 = icmp eq i64 %1798, 0
  br i1 %1799, label %1809, label %1800

1800:                                             ; preds = %1793, %1800
  %1801 = phi i64 [ %1806, %1800 ], [ %1794, %1793 ]
  %1802 = phi i64 [ %1807, %1800 ], [ 0, %1793 ]
  %1803 = getelementptr inbounds i16, ptr %333, i64 %1801
  %1804 = load i16, ptr %1803, align 2, !tbaa !45
  %1805 = getelementptr inbounds i16, ptr %1745, i64 %1801
  store i16 %1804, ptr %1805, align 2, !tbaa !45
  %1806 = add nuw nsw i64 %1801, 1
  %1807 = add i64 %1802, 1
  %1808 = icmp eq i64 %1807, %1798
  br i1 %1808, label %1809, label %1800, !llvm.loop !168

1809:                                             ; preds = %1800, %1793
  %1810 = phi i64 [ %1794, %1793 ], [ %1806, %1800 ]
  %1811 = icmp ult i64 %1797, 3
  br i1 %1811, label %1831, label %1812

1812:                                             ; preds = %1809, %1812
  %1813 = phi i64 [ %1829, %1812 ], [ %1810, %1809 ]
  %1814 = getelementptr inbounds i16, ptr %333, i64 %1813
  %1815 = load i16, ptr %1814, align 2, !tbaa !45
  %1816 = getelementptr inbounds i16, ptr %1745, i64 %1813
  store i16 %1815, ptr %1816, align 2, !tbaa !45
  %1817 = add nuw nsw i64 %1813, 1
  %1818 = getelementptr inbounds i16, ptr %333, i64 %1817
  %1819 = load i16, ptr %1818, align 2, !tbaa !45
  %1820 = getelementptr inbounds i16, ptr %1745, i64 %1817
  store i16 %1819, ptr %1820, align 2, !tbaa !45
  %1821 = add nuw nsw i64 %1813, 2
  %1822 = getelementptr inbounds i16, ptr %333, i64 %1821
  %1823 = load i16, ptr %1822, align 2, !tbaa !45
  %1824 = getelementptr inbounds i16, ptr %1745, i64 %1821
  store i16 %1823, ptr %1824, align 2, !tbaa !45
  %1825 = add nuw nsw i64 %1813, 3
  %1826 = getelementptr inbounds i16, ptr %333, i64 %1825
  %1827 = load i16, ptr %1826, align 2, !tbaa !45
  %1828 = getelementptr inbounds i16, ptr %1745, i64 %1825
  store i16 %1827, ptr %1828, align 2, !tbaa !45
  %1829 = add nuw nsw i64 %1813, 4
  %1830 = icmp eq i64 %1829, %1748
  br i1 %1830, label %1831, label %1812, !llvm.loop !169

1831:                                             ; preds = %1809, %1812, %1776, %1791
  %1832 = shl i64 %1740, 31
  %1833 = add i64 %1832, -4294967296
  %1834 = ashr i64 %1833, 32
  %1835 = getelementptr inbounds i16, ptr %1745, i64 %1834
  %1836 = load i16, ptr %1835, align 2, !tbaa !45
  br label %1837

1837:                                             ; preds = %1729, %1831
  %1838 = phi i64 [ %1741, %1831 ], [ 0, %1729 ]
  %1839 = phi i16 [ %1836, %1831 ], [ -1, %1729 ]
  %1840 = and i64 %1838, 4294967295
  %1841 = getelementptr inbounds i16, ptr %1745, i64 %1840
  store i16 %1839, ptr %1841, align 2, !tbaa !45
  %1842 = trunc i64 %1741 to i16
  %1843 = add i16 %1842, 1
  %1844 = sext i32 %1738 to i64
  %1845 = getelementptr inbounds i16, ptr %1198, i64 %1844
  store i16 %1843, ptr %1845, align 2, !tbaa !45
  %1846 = add nsw i32 %1742, 2
  %1847 = add nsw i32 %1846, %1738
  %1848 = ptrtoint ptr %1714 to i64
  %1849 = sub i64 %1848, %670
  %1850 = lshr exact i64 %1849, 1
  %1851 = trunc i64 %1850 to i32
  %1852 = add nsw i32 %1847, 1
  %1853 = sext i32 %1852 to i64
  %1854 = getelementptr i16, ptr %1198, i64 %1853
  %1855 = icmp sgt i32 %1851, 0
  br i1 %1855, label %1856, label %1946

1856:                                             ; preds = %1837
  %1857 = and i64 %1850, 4294967295
  %1858 = icmp ult i64 %1857, 8
  br i1 %1858, label %1902, label %1859

1859:                                             ; preds = %1856
  %1860 = shl nsw i64 %1853, 1
  %1861 = add i64 %1860, %1199
  %1862 = sub i64 %1861, %670
  %1863 = icmp ult i64 %1862, 128
  br i1 %1863, label %1902, label %1864

1864:                                             ; preds = %1859
  %1865 = icmp ult i64 %1857, 64
  br i1 %1865, label %1889, label %1866

1866:                                             ; preds = %1864
  %1867 = and i64 %1850, 63
  %1868 = sub nsw i64 %1857, %1867
  br label %1869

1869:                                             ; preds = %1869, %1866
  %1870 = phi i64 [ 0, %1866 ], [ %1883, %1869 ]
  %1871 = getelementptr inbounds i16, ptr %379, i64 %1870
  %1872 = load <16 x i16>, ptr %1871, align 2, !tbaa !45
  %1873 = getelementptr inbounds i16, ptr %1871, i64 16
  %1874 = load <16 x i16>, ptr %1873, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1871, i64 32
  %1876 = load <16 x i16>, ptr %1875, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1871, i64 48
  %1878 = load <16 x i16>, ptr %1877, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1854, i64 %1870
  store <16 x i16> %1872, ptr %1879, align 2, !tbaa !45
  %1880 = getelementptr inbounds i16, ptr %1879, i64 16
  store <16 x i16> %1874, ptr %1880, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1879, i64 32
  store <16 x i16> %1876, ptr %1881, align 2, !tbaa !45
  %1882 = getelementptr inbounds i16, ptr %1879, i64 48
  store <16 x i16> %1878, ptr %1882, align 2, !tbaa !45
  %1883 = add nuw i64 %1870, 64
  %1884 = icmp eq i64 %1883, %1868
  br i1 %1884, label %1885, label %1869, !llvm.loop !170

1885:                                             ; preds = %1869
  %1886 = icmp eq i64 %1867, 0
  br i1 %1886, label %1940, label %1887

1887:                                             ; preds = %1885
  %1888 = icmp ult i64 %1867, 8
  br i1 %1888, label %1902, label %1889

1889:                                             ; preds = %1864, %1887
  %1890 = phi i64 [ %1868, %1887 ], [ 0, %1864 ]
  %1891 = and i64 %1850, 7
  %1892 = sub nsw i64 %1857, %1891
  br label %1893

1893:                                             ; preds = %1893, %1889
  %1894 = phi i64 [ %1890, %1889 ], [ %1898, %1893 ]
  %1895 = getelementptr inbounds i16, ptr %379, i64 %1894
  %1896 = load <8 x i16>, ptr %1895, align 2, !tbaa !45
  %1897 = getelementptr inbounds i16, ptr %1854, i64 %1894
  store <8 x i16> %1896, ptr %1897, align 2, !tbaa !45
  %1898 = add nuw i64 %1894, 8
  %1899 = icmp eq i64 %1898, %1892
  br i1 %1899, label %1900, label %1893, !llvm.loop !171

1900:                                             ; preds = %1893
  %1901 = icmp eq i64 %1891, 0
  br i1 %1901, label %1940, label %1902

1902:                                             ; preds = %1859, %1856, %1887, %1900
  %1903 = phi i64 [ 0, %1856 ], [ 0, %1859 ], [ %1868, %1887 ], [ %1892, %1900 ]
  %1904 = sub i64 %1850, %1903
  %1905 = xor i64 %1903, -1
  %1906 = add nsw i64 %1857, %1905
  %1907 = and i64 %1904, 3
  %1908 = icmp eq i64 %1907, 0
  br i1 %1908, label %1918, label %1909

1909:                                             ; preds = %1902, %1909
  %1910 = phi i64 [ %1915, %1909 ], [ %1903, %1902 ]
  %1911 = phi i64 [ %1916, %1909 ], [ 0, %1902 ]
  %1912 = getelementptr inbounds i16, ptr %379, i64 %1910
  %1913 = load i16, ptr %1912, align 2, !tbaa !45
  %1914 = getelementptr inbounds i16, ptr %1854, i64 %1910
  store i16 %1913, ptr %1914, align 2, !tbaa !45
  %1915 = add nuw nsw i64 %1910, 1
  %1916 = add i64 %1911, 1
  %1917 = icmp eq i64 %1916, %1907
  br i1 %1917, label %1918, label %1909, !llvm.loop !172

1918:                                             ; preds = %1909, %1902
  %1919 = phi i64 [ %1903, %1902 ], [ %1915, %1909 ]
  %1920 = icmp ult i64 %1906, 3
  br i1 %1920, label %1940, label %1921

1921:                                             ; preds = %1918, %1921
  %1922 = phi i64 [ %1938, %1921 ], [ %1919, %1918 ]
  %1923 = getelementptr inbounds i16, ptr %379, i64 %1922
  %1924 = load i16, ptr %1923, align 2, !tbaa !45
  %1925 = getelementptr inbounds i16, ptr %1854, i64 %1922
  store i16 %1924, ptr %1925, align 2, !tbaa !45
  %1926 = add nuw nsw i64 %1922, 1
  %1927 = getelementptr inbounds i16, ptr %379, i64 %1926
  %1928 = load i16, ptr %1927, align 2, !tbaa !45
  %1929 = getelementptr inbounds i16, ptr %1854, i64 %1926
  store i16 %1928, ptr %1929, align 2, !tbaa !45
  %1930 = add nuw nsw i64 %1922, 2
  %1931 = getelementptr inbounds i16, ptr %379, i64 %1930
  %1932 = load i16, ptr %1931, align 2, !tbaa !45
  %1933 = getelementptr inbounds i16, ptr %1854, i64 %1930
  store i16 %1932, ptr %1933, align 2, !tbaa !45
  %1934 = add nuw nsw i64 %1922, 3
  %1935 = getelementptr inbounds i16, ptr %379, i64 %1934
  %1936 = load i16, ptr %1935, align 2, !tbaa !45
  %1937 = getelementptr inbounds i16, ptr %1854, i64 %1934
  store i16 %1936, ptr %1937, align 2, !tbaa !45
  %1938 = add nuw nsw i64 %1922, 4
  %1939 = icmp eq i64 %1938, %1857
  br i1 %1939, label %1940, label %1921, !llvm.loop !173

1940:                                             ; preds = %1918, %1921, %1885, %1900
  %1941 = shl i64 %1849, 31
  %1942 = add i64 %1941, -4294967296
  %1943 = ashr i64 %1942, 32
  %1944 = getelementptr inbounds i16, ptr %1854, i64 %1943
  %1945 = load i16, ptr %1944, align 2, !tbaa !45
  br label %1946

1946:                                             ; preds = %1837, %1940
  %1947 = phi i64 [ %1850, %1940 ], [ 0, %1837 ]
  %1948 = phi i16 [ %1945, %1940 ], [ -1, %1837 ]
  %1949 = and i64 %1947, 4294967295
  %1950 = getelementptr inbounds i16, ptr %1854, i64 %1949
  store i16 %1948, ptr %1950, align 2, !tbaa !45
  %1951 = trunc i64 %1850 to i16
  %1952 = add i16 %1951, 1
  %1953 = sext i32 %1847 to i64
  %1954 = getelementptr inbounds i16, ptr %1198, i64 %1953
  store i16 %1952, ptr %1954, align 2, !tbaa !45
  %1955 = add i32 %1851, 3
  %1956 = add i32 %1955, %1847
  %1957 = select i1 %146, i32 1, i32 %1956
  store i32 %1957, ptr %17, align 8, !tbaa !19
  br label %1988

1958:                                             ; preds = %705
  %1959 = load ptr, ptr %12, align 8, !tbaa !47
  %1960 = load i32, ptr %17, align 8, !tbaa !19
  %1961 = add i32 %1960, 1
  %1962 = sext i32 %1961 to i64
  %1963 = getelementptr inbounds i16, ptr %1959, i64 %1962
  %1964 = sext i32 %1960 to i64
  %1965 = getelementptr inbounds i16, ptr %1959, i64 %1964
  %1966 = load i16, ptr %1965, align 2, !tbaa !45
  %1967 = zext i16 %1966 to i32
  %1968 = add i32 %1961, %1967
  %1969 = add nsw i32 %1967, -1
  %1970 = add i32 %1968, 1
  %1971 = sext i32 %1970 to i64
  %1972 = getelementptr inbounds i16, ptr %1959, i64 %1971
  %1973 = sext i32 %1968 to i64
  %1974 = getelementptr inbounds i16, ptr %1959, i64 %1973
  %1975 = load i16, ptr %1974, align 2, !tbaa !45
  %1976 = zext i16 %1975 to i32
  %1977 = add i32 %1970, %1976
  %1978 = add nsw i32 %1976, -1
  %1979 = add i32 %1977, 1
  %1980 = sext i32 %1979 to i64
  %1981 = getelementptr inbounds i16, ptr %1959, i64 %1980
  %1982 = sext i32 %1977 to i64
  %1983 = getelementptr inbounds i16, ptr %1959, i64 %1982
  %1984 = load i16, ptr %1983, align 2, !tbaa !45
  %1985 = zext i16 %1984 to i32
  %1986 = add i32 %1979, %1985
  store i32 %1986, ptr %17, align 8, !tbaa !19
  %1987 = add nsw i32 %1985, -1
  br label %1988

1988:                                             ; preds = %1946, %1958
  %1989 = phi i32 [ %1978, %1958 ], [ %1742, %1946 ]
  %1990 = phi ptr [ %1981, %1958 ], [ %1854, %1946 ]
  %1991 = phi i32 [ %1987, %1958 ], [ %1851, %1946 ]
  %1992 = phi ptr [ %1972, %1958 ], [ %1745, %1946 ]
  %1993 = phi i32 [ %1969, %1958 ], [ %1721, %1946 ]
  %1994 = phi ptr [ %1963, %1958 ], [ %1202, %1946 ]
  %1995 = phi i32 [ %685, %1958 ], [ %1163, %1946 ]
  %1996 = phi ptr [ %684, %1958 ], [ %972, %1946 ]
  %1997 = phi ptr [ %683, %1958 ], [ %973, %1946 ]
  %1998 = phi ptr [ %682, %1958 ], [ %974, %1946 ]
  %1999 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %2000 = icmp eq i32 %1999, 0
  %2001 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2002 = icmp ne i32 %2001, 0
  %2003 = select i1 %2000, i1 true, i1 %2002
  br i1 %2003, label %2008, label %2004

2004:                                             ; preds = %1988
  %2005 = load i8, ptr %712, align 2, !tbaa !52
  %2006 = icmp eq i8 %2005, 1
  %2007 = select i1 %2006, double 1.000000e+00, double -1.000000e+00
  br label %2008

2008:                                             ; preds = %1988, %2004
  %2009 = phi double [ %2007, %2004 ], [ 0.000000e+00, %1988 ]
  %2010 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %690, i32 1
  %2011 = load float, ptr %2010, align 8, !tbaa !81
  %2012 = fpext float %2011 to double
  %2013 = fmul double %2012, 0x4074C104816F0069
  %2014 = fmul double %32, %2013
  %2015 = fmul double %28, %2014
  %2016 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2017 = extractelement <2 x double> %708, i64 0
  %2018 = extractelement <2 x double> %708, i64 1
  %2019 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2016, double noundef %2017, double noundef %2018, double noundef %711, ptr noundef %45, ptr noundef nonnull %1994, i32 noundef %1993, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2020 = icmp sgt i32 %2019, 0
  br i1 %2020, label %2021, label %2176

2021:                                             ; preds = %2008
  %2022 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2023 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2024 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2025 = mul nsw i32 %2024, %714
  %2026 = mul i32 %2023, 3
  %2027 = mul nsw i32 %726, 3
  %2028 = sext i32 %2027 to i64
  %2029 = add nsw i32 %2027, 1
  %2030 = sext i32 %2029 to i64
  %2031 = add nsw i32 %2027, 2
  %2032 = sext i32 %2031 to i64
  %2033 = zext i32 %2019 to i64
  br label %2034

2034:                                             ; preds = %2021, %2034
  %2035 = phi i64 [ 0, %2021 ], [ %2174, %2034 ]
  %2036 = phi double [ %680, %2021 ], [ %2088, %2034 ]
  %2037 = phi double [ 0.000000e+00, %2021 ], [ %2119, %2034 ]
  %2038 = phi <2 x double> [ %687, %2021 ], [ %2111, %2034 ]
  %2039 = phi <2 x double> [ %688, %2021 ], [ %2104, %2034 ]
  %2040 = phi <2 x double> [ %689, %2021 ], [ %2117, %2034 ]
  %2041 = phi <2 x double> [ zeroinitializer, %2021 ], [ %2113, %2034 ]
  %2042 = shl nuw nsw i64 %2035, 1
  %2043 = getelementptr inbounds i32, ptr %145, i64 %2042
  %2044 = load i32, ptr %2043, align 4, !tbaa !5
  %2045 = ashr i32 %2044, 14
  %2046 = add nsw i32 %2045, %38
  %2047 = getelementptr inbounds i16, ptr %98, i64 %2035
  %2048 = load i16, ptr %2047, align 2, !tbaa !45
  %2049 = zext i16 %2048 to i64
  %2050 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2049
  %2051 = getelementptr inbounds double, ptr %144, i64 %2035
  %2052 = load double, ptr %2051, align 8, !tbaa !15
  %2053 = sext i32 %2046 to i64
  %2054 = getelementptr inbounds double, ptr %2022, i64 %2053
  %2055 = load double, ptr %2054, align 8, !tbaa !15
  %2056 = fsub double %2052, %2055
  %2057 = shl nsw i32 %2046, 4
  %2058 = sext i32 %2057 to i64
  %2059 = getelementptr inbounds double, ptr %30, i64 %2058
  %2060 = getelementptr inbounds %class.Vector, ptr %652, i64 %2049
  %2061 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2049, i32 1
  %2062 = load float, ptr %2061, align 8, !tbaa !81
  %2063 = fpext float %2062 to double
  %2064 = fmul double %2015, %2063
  %2065 = load <2 x double>, ptr %2050, align 8, !tbaa !15
  %2066 = fsub <2 x double> %708, %2065
  %2067 = getelementptr inbounds %class.Vector, ptr %2050, i64 0, i32 2
  %2068 = load double, ptr %2067, align 8, !tbaa !50
  %2069 = fsub double %711, %2068
  %2070 = getelementptr inbounds double, ptr %2059, i64 12
  %2071 = load double, ptr %2070, align 8, !tbaa !15
  %2072 = getelementptr inbounds double, ptr %2059, i64 13
  %2073 = load double, ptr %2072, align 8, !tbaa !15
  %2074 = getelementptr inbounds double, ptr %2059, i64 14
  %2075 = load double, ptr %2074, align 8, !tbaa !15
  %2076 = getelementptr inbounds double, ptr %2059, i64 15
  %2077 = load double, ptr %2076, align 8, !tbaa !15
  %2078 = fmul double %2064, %2071
  %2079 = fmul double %2064, %2073
  %2080 = fmul double %2064, %2075
  %2081 = fmul double %2064, %2077
  %2082 = fmul double %2056, %2078
  %2083 = fmul double %2079, 2.500000e-01
  %2084 = tail call double @llvm.fmuladd.f64(double %2082, double 0x3FC5555555555555, double %2083)
  %2085 = fmul double %2080, 5.000000e-01
  %2086 = tail call double @llvm.fmuladd.f64(double %2084, double %2056, double %2085)
  %2087 = tail call double @llvm.fmuladd.f64(double %2086, double %2056, double %2081)
  %2088 = fsub double %2036, %2087
  %2089 = tail call double @llvm.fmuladd.f64(double %2056, double %2078, double %2079)
  %2090 = tail call double @llvm.fmuladd.f64(double %2089, double %2056, double %2080)
  %2091 = fmul double %2009, %2090
  %2092 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2093 = insertelement <2 x double> poison, double %2091, i64 0
  %2094 = shufflevector <2 x double> %2093, <2 x double> poison, <2 x i32> zeroinitializer
  %2095 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2094, <2 x double> %2066, <2 x double> %2092)
  store <2 x double> %2095, ptr %671, align 8, !tbaa !15
  %2096 = load double, ptr %672, align 8, !tbaa !15
  %2097 = tail call double @llvm.fmuladd.f64(double %2091, double %2069, double %2096)
  store double %2097, ptr %672, align 8, !tbaa !15
  %2098 = extractelement <2 x double> %2066, i64 1
  %2099 = fmul double %2098, %2090
  %2100 = insertelement <2 x double> poison, double %2099, i64 0
  %2101 = shufflevector <2 x double> %2100, <2 x double> poison, <2 x i32> zeroinitializer
  %2102 = shufflevector <2 x double> %2066, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2103 = insertelement <2 x double> %2102, double %2069, i64 1
  %2104 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2101, <2 x double> %2103, <2 x double> %2039)
  %2105 = insertelement <2 x double> %2102, double %2069, i64 0
  %2106 = insertelement <2 x double> poison, double %2090, i64 0
  %2107 = shufflevector <2 x double> %2106, <2 x double> poison, <2 x i32> zeroinitializer
  %2108 = fmul <2 x double> %2105, %2107
  %2109 = shufflevector <2 x double> %2108, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2110 = shufflevector <2 x double> %2108, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2111 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2110, <2 x double> %2066, <2 x double> %2038)
  %2112 = insertelement <2 x double> %2109, double %2099, i64 1
  %2113 = fadd <2 x double> %2041, %2112
  %2114 = load <2 x double>, ptr %2060, align 8, !tbaa !15
  %2115 = fsub <2 x double> %2114, %2112
  store <2 x double> %2115, ptr %2060, align 8, !tbaa !15
  %2116 = shufflevector <2 x double> %2105, <2 x double> poison, <2 x i32> zeroinitializer
  %2117 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2108, <2 x double> %2116, <2 x double> %2040)
  %2118 = extractelement <2 x double> %2108, i64 0
  %2119 = fadd double %2037, %2118
  %2120 = getelementptr inbounds %class.Vector, ptr %652, i64 %2049, i32 2
  %2121 = load double, ptr %2120, align 8, !tbaa !89
  %2122 = fsub double %2121, %2118
  store double %2122, ptr %2120, align 8, !tbaa !89
  %2123 = load double, ptr %2067, align 8, !tbaa !50
  %2124 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2125 = fsub double %2123, %2124
  %2126 = fmul double %10, %2125
  %2127 = tail call double @llvm.floor.f64(double %2126)
  %2128 = fptosi double %2127 to i32
  %2129 = icmp slt i32 %2128, 0
  %2130 = select i1 %2129, i32 %2023, i32 0
  %2131 = icmp sgt i32 %2023, %2128
  %2132 = select i1 %2131, i32 0, i32 %2023
  %2133 = sub i32 %2128, %2132
  %2134 = add i32 %2133, %2130
  %2135 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2049, i32 3
  %2136 = load i8, ptr %2135, align 2, !tbaa !52
  %2137 = zext i8 %2136 to i32
  %2138 = shufflevector <2 x double> %2108, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2139 = fmul <2 x double> %2066, %2138
  %2140 = extractelement <2 x double> %2139, i64 0
  %2141 = fmul double %2098, %2099
  %2142 = fmul double %2069, %2118
  %2143 = add nsw i32 %2025, %2137
  %2144 = mul i32 %2026, %2143
  %2145 = sext i32 %2144 to i64
  %2146 = getelementptr inbounds double, ptr %8, i64 %2145
  %2147 = fmul double %2140, 5.000000e-01
  %2148 = fmul double %2141, 5.000000e-01
  %2149 = fmul double %2142, 5.000000e-01
  %2150 = getelementptr inbounds double, ptr %2146, i64 %2028
  %2151 = load double, ptr %2150, align 8, !tbaa !15
  %2152 = fadd double %2147, %2151
  store double %2152, ptr %2150, align 8, !tbaa !15
  %2153 = getelementptr inbounds double, ptr %2146, i64 %2030
  %2154 = load double, ptr %2153, align 8, !tbaa !15
  %2155 = fadd double %2148, %2154
  store double %2155, ptr %2153, align 8, !tbaa !15
  %2156 = getelementptr inbounds double, ptr %2146, i64 %2032
  %2157 = load double, ptr %2156, align 8, !tbaa !15
  %2158 = fadd double %2149, %2157
  store double %2158, ptr %2156, align 8, !tbaa !15
  %2159 = mul nsw i32 %2134, 3
  %2160 = sext i32 %2159 to i64
  %2161 = getelementptr inbounds double, ptr %2146, i64 %2160
  %2162 = load double, ptr %2161, align 8, !tbaa !15
  %2163 = fadd double %2147, %2162
  store double %2163, ptr %2161, align 8, !tbaa !15
  %2164 = add nsw i32 %2159, 1
  %2165 = sext i32 %2164 to i64
  %2166 = getelementptr inbounds double, ptr %2146, i64 %2165
  %2167 = load double, ptr %2166, align 8, !tbaa !15
  %2168 = fadd double %2148, %2167
  store double %2168, ptr %2166, align 8, !tbaa !15
  %2169 = add nsw i32 %2159, 2
  %2170 = sext i32 %2169 to i64
  %2171 = getelementptr inbounds double, ptr %2146, i64 %2170
  %2172 = load double, ptr %2171, align 8, !tbaa !15
  %2173 = fadd double %2149, %2172
  store double %2173, ptr %2171, align 8, !tbaa !15
  %2174 = add nuw nsw i64 %2035, 1
  %2175 = icmp eq i64 %2174, %2033
  br i1 %2175, label %2176, label %2034

2176:                                             ; preds = %2034, %2008
  %2177 = phi double [ 0.000000e+00, %2008 ], [ %2119, %2034 ]
  %2178 = phi double [ %680, %2008 ], [ %2088, %2034 ]
  %2179 = phi <2 x double> [ %687, %2008 ], [ %2111, %2034 ]
  %2180 = phi <2 x double> [ %688, %2008 ], [ %2104, %2034 ]
  %2181 = phi <2 x double> [ %689, %2008 ], [ %2117, %2034 ]
  %2182 = phi <2 x double> [ zeroinitializer, %2008 ], [ %2113, %2034 ]
  %2183 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2184 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2183, double noundef %2017, double noundef %2018, double noundef %711, ptr noundef %45, ptr noundef %1990, i32 noundef %1991, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2185 = add nsw i32 %2184, %679
  %2186 = icmp sgt i32 %2184, 0
  br i1 %2186, label %2187, label %2356

2187:                                             ; preds = %2176
  %2188 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2189 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2190 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2191 = mul nsw i32 %2190, %714
  %2192 = mul i32 %2189, 3
  %2193 = mul nsw i32 %726, 3
  %2194 = sext i32 %2193 to i64
  %2195 = add nsw i32 %2193, 1
  %2196 = sext i32 %2195 to i64
  %2197 = add nsw i32 %2193, 2
  %2198 = sext i32 %2197 to i64
  %2199 = zext i32 %2184 to i64
  br label %2200

2200:                                             ; preds = %2187, %2200
  %2201 = phi i64 [ 0, %2187 ], [ %2354, %2200 ]
  %2202 = phi double [ %2178, %2187 ], [ %2268, %2200 ]
  %2203 = phi double [ %2177, %2187 ], [ %2299, %2200 ]
  %2204 = phi <2 x double> [ %2179, %2187 ], [ %2291, %2200 ]
  %2205 = phi <2 x double> [ %2180, %2187 ], [ %2284, %2200 ]
  %2206 = phi <2 x double> [ %2181, %2187 ], [ %2297, %2200 ]
  %2207 = phi <2 x double> [ %2182, %2187 ], [ %2293, %2200 ]
  %2208 = shl nuw nsw i64 %2201, 1
  %2209 = getelementptr inbounds i32, ptr %145, i64 %2208
  %2210 = load i32, ptr %2209, align 4, !tbaa !5
  %2211 = ashr i32 %2210, 14
  %2212 = add nsw i32 %2211, %38
  %2213 = getelementptr inbounds i16, ptr %98, i64 %2201
  %2214 = load i16, ptr %2213, align 2, !tbaa !45
  %2215 = zext i16 %2214 to i64
  %2216 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2215
  %2217 = getelementptr inbounds double, ptr %144, i64 %2201
  %2218 = load double, ptr %2217, align 8, !tbaa !15
  %2219 = sext i32 %2212 to i64
  %2220 = getelementptr inbounds double, ptr %2188, i64 %2219
  %2221 = load double, ptr %2220, align 8, !tbaa !15
  %2222 = fsub double %2218, %2221
  %2223 = shl nsw i32 %2212, 4
  %2224 = sext i32 %2223 to i64
  %2225 = getelementptr inbounds double, ptr %30, i64 %2224
  %2226 = getelementptr inbounds %class.Vector, ptr %652, i64 %2215
  %2227 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2215, i32 1
  %2228 = load float, ptr %2227, align 8, !tbaa !81
  %2229 = fpext float %2228 to double
  %2230 = fmul double %2015, %2229
  %2231 = load <2 x double>, ptr %2216, align 8, !tbaa !15
  %2232 = fsub <2 x double> %708, %2231
  %2233 = getelementptr inbounds %class.Vector, ptr %2216, i64 0, i32 2
  %2234 = load double, ptr %2233, align 8, !tbaa !50
  %2235 = fsub double %711, %2234
  %2236 = shl nsw i32 %2212, 2
  %2237 = sext i32 %2236 to i64
  %2238 = getelementptr inbounds double, ptr %31, i64 %2237
  %2239 = getelementptr inbounds double, ptr %2225, i64 12
  %2240 = load double, ptr %2239, align 8, !tbaa !15
  %2241 = getelementptr inbounds double, ptr %2225, i64 13
  %2242 = load double, ptr %2241, align 8, !tbaa !15
  %2243 = getelementptr inbounds double, ptr %2225, i64 14
  %2244 = load double, ptr %2243, align 8, !tbaa !15
  %2245 = getelementptr inbounds double, ptr %2225, i64 15
  %2246 = load double, ptr %2245, align 8, !tbaa !15
  %2247 = load double, ptr %2238, align 8, !tbaa !15
  %2248 = tail call double @llvm.fmuladd.f64(double %34, double %2247, double %2246)
  %2249 = getelementptr inbounds double, ptr %2238, i64 1
  %2250 = load double, ptr %2249, align 8, !tbaa !15
  %2251 = tail call double @llvm.fmuladd.f64(double %673, double %2250, double %2244)
  %2252 = getelementptr inbounds double, ptr %2238, i64 2
  %2253 = load double, ptr %2252, align 8, !tbaa !15
  %2254 = tail call double @llvm.fmuladd.f64(double %674, double %2253, double %2242)
  %2255 = getelementptr inbounds double, ptr %2238, i64 3
  %2256 = load double, ptr %2255, align 8, !tbaa !15
  %2257 = tail call double @llvm.fmuladd.f64(double %675, double %2256, double %2240)
  %2258 = fmul double %2230, %2257
  %2259 = fmul double %2230, %2254
  %2260 = fmul double %2230, %2251
  %2261 = fmul double %2230, %2248
  %2262 = fmul double %2222, %2258
  %2263 = fmul double %2259, 2.500000e-01
  %2264 = tail call double @llvm.fmuladd.f64(double %2262, double 0x3FC5555555555555, double %2263)
  %2265 = fmul double %2260, 5.000000e-01
  %2266 = tail call double @llvm.fmuladd.f64(double %2264, double %2222, double %2265)
  %2267 = tail call double @llvm.fmuladd.f64(double %2266, double %2222, double %2261)
  %2268 = fsub double %2202, %2267
  %2269 = tail call double @llvm.fmuladd.f64(double %2222, double %2258, double %2259)
  %2270 = tail call double @llvm.fmuladd.f64(double %2269, double %2222, double %2260)
  %2271 = fmul double %2009, %2270
  %2272 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2273 = insertelement <2 x double> poison, double %2271, i64 0
  %2274 = shufflevector <2 x double> %2273, <2 x double> poison, <2 x i32> zeroinitializer
  %2275 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2274, <2 x double> %2232, <2 x double> %2272)
  store <2 x double> %2275, ptr %671, align 8, !tbaa !15
  %2276 = load double, ptr %672, align 8, !tbaa !15
  %2277 = tail call double @llvm.fmuladd.f64(double %2271, double %2235, double %2276)
  store double %2277, ptr %672, align 8, !tbaa !15
  %2278 = extractelement <2 x double> %2232, i64 1
  %2279 = fmul double %2278, %2270
  %2280 = insertelement <2 x double> poison, double %2279, i64 0
  %2281 = shufflevector <2 x double> %2280, <2 x double> poison, <2 x i32> zeroinitializer
  %2282 = shufflevector <2 x double> %2232, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2283 = insertelement <2 x double> %2282, double %2235, i64 1
  %2284 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2281, <2 x double> %2283, <2 x double> %2205)
  %2285 = insertelement <2 x double> %2282, double %2235, i64 0
  %2286 = insertelement <2 x double> poison, double %2270, i64 0
  %2287 = shufflevector <2 x double> %2286, <2 x double> poison, <2 x i32> zeroinitializer
  %2288 = fmul <2 x double> %2285, %2287
  %2289 = shufflevector <2 x double> %2288, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2290 = shufflevector <2 x double> %2288, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2291 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2290, <2 x double> %2232, <2 x double> %2204)
  %2292 = insertelement <2 x double> %2289, double %2279, i64 1
  %2293 = fadd <2 x double> %2207, %2292
  %2294 = load <2 x double>, ptr %2226, align 8, !tbaa !15
  %2295 = fsub <2 x double> %2294, %2292
  store <2 x double> %2295, ptr %2226, align 8, !tbaa !15
  %2296 = shufflevector <2 x double> %2285, <2 x double> poison, <2 x i32> zeroinitializer
  %2297 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2288, <2 x double> %2296, <2 x double> %2206)
  %2298 = extractelement <2 x double> %2288, i64 0
  %2299 = fadd double %2203, %2298
  %2300 = getelementptr inbounds %class.Vector, ptr %652, i64 %2215, i32 2
  %2301 = load double, ptr %2300, align 8, !tbaa !89
  %2302 = fsub double %2301, %2298
  store double %2302, ptr %2300, align 8, !tbaa !89
  %2303 = load double, ptr %2233, align 8, !tbaa !50
  %2304 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2305 = fsub double %2303, %2304
  %2306 = fmul double %10, %2305
  %2307 = tail call double @llvm.floor.f64(double %2306)
  %2308 = fptosi double %2307 to i32
  %2309 = icmp slt i32 %2308, 0
  %2310 = select i1 %2309, i32 %2189, i32 0
  %2311 = icmp sgt i32 %2189, %2308
  %2312 = select i1 %2311, i32 0, i32 %2189
  %2313 = sub i32 %2308, %2312
  %2314 = add i32 %2313, %2310
  %2315 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2215, i32 3
  %2316 = load i8, ptr %2315, align 2, !tbaa !52
  %2317 = zext i8 %2316 to i32
  %2318 = shufflevector <2 x double> %2288, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2319 = fmul <2 x double> %2232, %2318
  %2320 = extractelement <2 x double> %2319, i64 0
  %2321 = fmul double %2278, %2279
  %2322 = fmul double %2235, %2298
  %2323 = add nsw i32 %2191, %2317
  %2324 = mul i32 %2192, %2323
  %2325 = sext i32 %2324 to i64
  %2326 = getelementptr inbounds double, ptr %8, i64 %2325
  %2327 = fmul double %2320, 5.000000e-01
  %2328 = fmul double %2321, 5.000000e-01
  %2329 = fmul double %2322, 5.000000e-01
  %2330 = getelementptr inbounds double, ptr %2326, i64 %2194
  %2331 = load double, ptr %2330, align 8, !tbaa !15
  %2332 = fadd double %2327, %2331
  store double %2332, ptr %2330, align 8, !tbaa !15
  %2333 = getelementptr inbounds double, ptr %2326, i64 %2196
  %2334 = load double, ptr %2333, align 8, !tbaa !15
  %2335 = fadd double %2328, %2334
  store double %2335, ptr %2333, align 8, !tbaa !15
  %2336 = getelementptr inbounds double, ptr %2326, i64 %2198
  %2337 = load double, ptr %2336, align 8, !tbaa !15
  %2338 = fadd double %2329, %2337
  store double %2338, ptr %2336, align 8, !tbaa !15
  %2339 = mul nsw i32 %2314, 3
  %2340 = sext i32 %2339 to i64
  %2341 = getelementptr inbounds double, ptr %2326, i64 %2340
  %2342 = load double, ptr %2341, align 8, !tbaa !15
  %2343 = fadd double %2327, %2342
  store double %2343, ptr %2341, align 8, !tbaa !15
  %2344 = add nsw i32 %2339, 1
  %2345 = sext i32 %2344 to i64
  %2346 = getelementptr inbounds double, ptr %2326, i64 %2345
  %2347 = load double, ptr %2346, align 8, !tbaa !15
  %2348 = fadd double %2328, %2347
  store double %2348, ptr %2346, align 8, !tbaa !15
  %2349 = add nsw i32 %2339, 2
  %2350 = sext i32 %2349 to i64
  %2351 = getelementptr inbounds double, ptr %2326, i64 %2350
  %2352 = load double, ptr %2351, align 8, !tbaa !15
  %2353 = fadd double %2329, %2352
  store double %2353, ptr %2351, align 8, !tbaa !15
  %2354 = add nuw nsw i64 %2201, 1
  %2355 = icmp eq i64 %2354, %2199
  br i1 %2355, label %2356, label %2200

2356:                                             ; preds = %2200, %2176
  %2357 = phi double [ %2177, %2176 ], [ %2299, %2200 ]
  %2358 = phi double [ %2178, %2176 ], [ %2268, %2200 ]
  %2359 = phi <2 x double> [ %2179, %2176 ], [ %2291, %2200 ]
  %2360 = phi <2 x double> [ %2180, %2176 ], [ %2284, %2200 ]
  %2361 = phi <2 x double> [ %2181, %2176 ], [ %2297, %2200 ]
  %2362 = phi <2 x double> [ %2182, %2176 ], [ %2293, %2200 ]
  %2363 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2364 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2363, double noundef %2017, double noundef %2018, double noundef %711, ptr noundef %45, ptr noundef %1992, i32 noundef %1989, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2365 = add nsw i32 %2185, %2364
  %2366 = icmp sgt i32 %2364, 0
  br i1 %2366, label %2367, label %2536

2367:                                             ; preds = %2356
  %2368 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2369 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2370 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2371 = mul nsw i32 %2370, %714
  %2372 = mul i32 %2369, 3
  %2373 = mul nsw i32 %726, 3
  %2374 = sext i32 %2373 to i64
  %2375 = add nsw i32 %2373, 1
  %2376 = sext i32 %2375 to i64
  %2377 = add nsw i32 %2373, 2
  %2378 = sext i32 %2377 to i64
  %2379 = zext i32 %2364 to i64
  br label %2380

2380:                                             ; preds = %2367, %2380
  %2381 = phi i64 [ 0, %2367 ], [ %2534, %2380 ]
  %2382 = phi double [ %2358, %2367 ], [ %2448, %2380 ]
  %2383 = phi double [ %2357, %2367 ], [ %2479, %2380 ]
  %2384 = phi <2 x double> [ %2359, %2367 ], [ %2471, %2380 ]
  %2385 = phi <2 x double> [ %2360, %2367 ], [ %2464, %2380 ]
  %2386 = phi <2 x double> [ %2361, %2367 ], [ %2477, %2380 ]
  %2387 = phi <2 x double> [ %2362, %2367 ], [ %2473, %2380 ]
  %2388 = shl nuw nsw i64 %2381, 1
  %2389 = getelementptr inbounds i32, ptr %145, i64 %2388
  %2390 = load i32, ptr %2389, align 4, !tbaa !5
  %2391 = ashr i32 %2390, 14
  %2392 = add nsw i32 %2391, %38
  %2393 = getelementptr inbounds i16, ptr %98, i64 %2381
  %2394 = load i16, ptr %2393, align 2, !tbaa !45
  %2395 = zext i16 %2394 to i64
  %2396 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2395
  %2397 = getelementptr inbounds double, ptr %144, i64 %2381
  %2398 = load double, ptr %2397, align 8, !tbaa !15
  %2399 = sext i32 %2392 to i64
  %2400 = getelementptr inbounds double, ptr %2368, i64 %2399
  %2401 = load double, ptr %2400, align 8, !tbaa !15
  %2402 = fsub double %2398, %2401
  %2403 = shl nsw i32 %2392, 4
  %2404 = sext i32 %2403 to i64
  %2405 = getelementptr inbounds double, ptr %30, i64 %2404
  %2406 = getelementptr inbounds %class.Vector, ptr %652, i64 %2395
  %2407 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2395, i32 1
  %2408 = load float, ptr %2407, align 8, !tbaa !81
  %2409 = fpext float %2408 to double
  %2410 = fmul double %2015, %2409
  %2411 = load <2 x double>, ptr %2396, align 8, !tbaa !15
  %2412 = fsub <2 x double> %708, %2411
  %2413 = getelementptr inbounds %class.Vector, ptr %2396, i64 0, i32 2
  %2414 = load double, ptr %2413, align 8, !tbaa !50
  %2415 = fsub double %711, %2414
  %2416 = shl nsw i32 %2392, 2
  %2417 = sext i32 %2416 to i64
  %2418 = getelementptr inbounds double, ptr %31, i64 %2417
  %2419 = getelementptr inbounds double, ptr %2405, i64 12
  %2420 = load double, ptr %2419, align 8, !tbaa !15
  %2421 = getelementptr inbounds double, ptr %2405, i64 13
  %2422 = load double, ptr %2421, align 8, !tbaa !15
  %2423 = getelementptr inbounds double, ptr %2405, i64 14
  %2424 = load double, ptr %2423, align 8, !tbaa !15
  %2425 = getelementptr inbounds double, ptr %2405, i64 15
  %2426 = load double, ptr %2425, align 8, !tbaa !15
  %2427 = load double, ptr %2418, align 8, !tbaa !15
  %2428 = fadd double %2426, %2427
  %2429 = getelementptr inbounds double, ptr %2418, i64 1
  %2430 = load double, ptr %2429, align 8, !tbaa !15
  %2431 = tail call double @llvm.fmuladd.f64(double %2430, double 2.000000e+00, double %2424)
  %2432 = getelementptr inbounds double, ptr %2418, i64 2
  %2433 = load double, ptr %2432, align 8, !tbaa !15
  %2434 = tail call double @llvm.fmuladd.f64(double %2433, double 4.000000e+00, double %2422)
  %2435 = getelementptr inbounds double, ptr %2418, i64 3
  %2436 = load double, ptr %2435, align 8, !tbaa !15
  %2437 = tail call double @llvm.fmuladd.f64(double %2436, double 6.000000e+00, double %2420)
  %2438 = fmul double %2410, %2437
  %2439 = fmul double %2410, %2434
  %2440 = fmul double %2410, %2431
  %2441 = fmul double %2410, %2428
  %2442 = fmul double %2402, %2438
  %2443 = fmul double %2439, 2.500000e-01
  %2444 = tail call double @llvm.fmuladd.f64(double %2442, double 0x3FC5555555555555, double %2443)
  %2445 = fmul double %2440, 5.000000e-01
  %2446 = tail call double @llvm.fmuladd.f64(double %2444, double %2402, double %2445)
  %2447 = tail call double @llvm.fmuladd.f64(double %2446, double %2402, double %2441)
  %2448 = fsub double %2382, %2447
  %2449 = tail call double @llvm.fmuladd.f64(double %2402, double %2438, double %2439)
  %2450 = tail call double @llvm.fmuladd.f64(double %2449, double %2402, double %2440)
  %2451 = fmul double %2009, %2450
  %2452 = load <2 x double>, ptr %671, align 8, !tbaa !15
  %2453 = insertelement <2 x double> poison, double %2451, i64 0
  %2454 = shufflevector <2 x double> %2453, <2 x double> poison, <2 x i32> zeroinitializer
  %2455 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2454, <2 x double> %2412, <2 x double> %2452)
  store <2 x double> %2455, ptr %671, align 8, !tbaa !15
  %2456 = load double, ptr %672, align 8, !tbaa !15
  %2457 = tail call double @llvm.fmuladd.f64(double %2451, double %2415, double %2456)
  store double %2457, ptr %672, align 8, !tbaa !15
  %2458 = extractelement <2 x double> %2412, i64 1
  %2459 = fmul double %2458, %2450
  %2460 = insertelement <2 x double> poison, double %2459, i64 0
  %2461 = shufflevector <2 x double> %2460, <2 x double> poison, <2 x i32> zeroinitializer
  %2462 = shufflevector <2 x double> %2412, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %2463 = insertelement <2 x double> %2462, double %2415, i64 1
  %2464 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2461, <2 x double> %2463, <2 x double> %2385)
  %2465 = insertelement <2 x double> %2462, double %2415, i64 0
  %2466 = insertelement <2 x double> poison, double %2450, i64 0
  %2467 = shufflevector <2 x double> %2466, <2 x double> poison, <2 x i32> zeroinitializer
  %2468 = fmul <2 x double> %2465, %2467
  %2469 = shufflevector <2 x double> %2468, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2470 = shufflevector <2 x double> %2468, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %2471 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2470, <2 x double> %2412, <2 x double> %2384)
  %2472 = insertelement <2 x double> %2469, double %2459, i64 1
  %2473 = fadd <2 x double> %2387, %2472
  %2474 = load <2 x double>, ptr %2406, align 8, !tbaa !15
  %2475 = fsub <2 x double> %2474, %2472
  store <2 x double> %2475, ptr %2406, align 8, !tbaa !15
  %2476 = shufflevector <2 x double> %2465, <2 x double> poison, <2 x i32> zeroinitializer
  %2477 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2468, <2 x double> %2476, <2 x double> %2386)
  %2478 = extractelement <2 x double> %2468, i64 0
  %2479 = fadd double %2383, %2478
  %2480 = getelementptr inbounds %class.Vector, ptr %652, i64 %2395, i32 2
  %2481 = load double, ptr %2480, align 8, !tbaa !89
  %2482 = fsub double %2481, %2478
  store double %2482, ptr %2480, align 8, !tbaa !89
  %2483 = load double, ptr %2413, align 8, !tbaa !50
  %2484 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2485 = fsub double %2483, %2484
  %2486 = fmul double %10, %2485
  %2487 = tail call double @llvm.floor.f64(double %2486)
  %2488 = fptosi double %2487 to i32
  %2489 = icmp slt i32 %2488, 0
  %2490 = select i1 %2489, i32 %2369, i32 0
  %2491 = icmp sgt i32 %2369, %2488
  %2492 = select i1 %2491, i32 0, i32 %2369
  %2493 = sub i32 %2488, %2492
  %2494 = add i32 %2493, %2490
  %2495 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2395, i32 3
  %2496 = load i8, ptr %2495, align 2, !tbaa !52
  %2497 = zext i8 %2496 to i32
  %2498 = shufflevector <2 x double> %2468, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2499 = fmul <2 x double> %2412, %2498
  %2500 = extractelement <2 x double> %2499, i64 0
  %2501 = fmul double %2458, %2459
  %2502 = fmul double %2415, %2478
  %2503 = add nsw i32 %2371, %2497
  %2504 = mul i32 %2372, %2503
  %2505 = sext i32 %2504 to i64
  %2506 = getelementptr inbounds double, ptr %8, i64 %2505
  %2507 = fmul double %2500, 5.000000e-01
  %2508 = fmul double %2501, 5.000000e-01
  %2509 = fmul double %2502, 5.000000e-01
  %2510 = getelementptr inbounds double, ptr %2506, i64 %2374
  %2511 = load double, ptr %2510, align 8, !tbaa !15
  %2512 = fadd double %2507, %2511
  store double %2512, ptr %2510, align 8, !tbaa !15
  %2513 = getelementptr inbounds double, ptr %2506, i64 %2376
  %2514 = load double, ptr %2513, align 8, !tbaa !15
  %2515 = fadd double %2508, %2514
  store double %2515, ptr %2513, align 8, !tbaa !15
  %2516 = getelementptr inbounds double, ptr %2506, i64 %2378
  %2517 = load double, ptr %2516, align 8, !tbaa !15
  %2518 = fadd double %2509, %2517
  store double %2518, ptr %2516, align 8, !tbaa !15
  %2519 = mul nsw i32 %2494, 3
  %2520 = sext i32 %2519 to i64
  %2521 = getelementptr inbounds double, ptr %2506, i64 %2520
  %2522 = load double, ptr %2521, align 8, !tbaa !15
  %2523 = fadd double %2507, %2522
  store double %2523, ptr %2521, align 8, !tbaa !15
  %2524 = add nsw i32 %2519, 1
  %2525 = sext i32 %2524 to i64
  %2526 = getelementptr inbounds double, ptr %2506, i64 %2525
  %2527 = load double, ptr %2526, align 8, !tbaa !15
  %2528 = fadd double %2508, %2527
  store double %2528, ptr %2526, align 8, !tbaa !15
  %2529 = add nsw i32 %2519, 2
  %2530 = sext i32 %2529 to i64
  %2531 = getelementptr inbounds double, ptr %2506, i64 %2530
  %2532 = load double, ptr %2531, align 8, !tbaa !15
  %2533 = fadd double %2509, %2532
  store double %2533, ptr %2531, align 8, !tbaa !15
  %2534 = add nuw nsw i64 %2381, 1
  %2535 = icmp eq i64 %2534, %2379
  br i1 %2535, label %2536, label %2380

2536:                                             ; preds = %2380, %2356
  %2537 = phi double [ %2357, %2356 ], [ %2479, %2380 ]
  %2538 = phi double [ %2358, %2356 ], [ %2448, %2380 ]
  %2539 = phi <2 x double> [ %2359, %2356 ], [ %2471, %2380 ]
  %2540 = phi <2 x double> [ %2360, %2356 ], [ %2464, %2380 ]
  %2541 = phi <2 x double> [ %2361, %2356 ], [ %2477, %2380 ]
  %2542 = phi <2 x double> [ %2362, %2356 ], [ %2473, %2380 ]
  %2543 = getelementptr inbounds %class.Vector, ptr %653, i64 %690
  %2544 = load <2 x double>, ptr %2543, align 8, !tbaa !15
  %2545 = fadd <2 x double> %2542, %2544
  store <2 x double> %2545, ptr %2543, align 8, !tbaa !15
  %2546 = getelementptr inbounds %class.Vector, ptr %653, i64 %690, i32 2
  %2547 = load double, ptr %2546, align 8, !tbaa !89
  %2548 = fadd double %2537, %2547
  store double %2548, ptr %2546, align 8, !tbaa !89
  br i1 %148, label %2551, label %2549

2549:                                             ; preds = %2536
  %2550 = add nsw i32 %681, 1
  br label %2559

2551:                                             ; preds = %2536
  %2552 = load ptr, ptr %12, align 8, !tbaa !47
  %2553 = load i32, ptr %17, align 8, !tbaa !19
  %2554 = add nsw i32 %2553, 1
  store i32 %2554, ptr %17, align 8, !tbaa !19
  %2555 = sext i32 %2553 to i64
  %2556 = getelementptr inbounds i16, ptr %2552, i64 %2555
  %2557 = load i16, ptr %2556, align 2, !tbaa !45
  %2558 = zext i16 %2557 to i32
  br label %2559

2559:                                             ; preds = %1261, %1220, %1149, %1600, %2551, %2549, %702
  %2560 = phi i32 [ %703, %702 ], [ %706, %2551 ], [ %706, %2549 ], [ %706, %1600 ], [ %706, %1149 ], [ %706, %1220 ], [ %706, %1261 ]
  %2561 = phi i32 [ %685, %702 ], [ %1995, %2551 ], [ %1995, %2549 ], [ %1163, %1600 ], [ 0, %1149 ], [ %1163, %1220 ], [ %1163, %1261 ]
  %2562 = phi ptr [ %684, %702 ], [ %1996, %2551 ], [ %1996, %2549 ], [ %972, %1600 ], [ %972, %1149 ], [ %972, %1220 ], [ %972, %1261 ]
  %2563 = phi ptr [ %683, %702 ], [ %1997, %2551 ], [ %1997, %2549 ], [ %973, %1600 ], [ %973, %1149 ], [ %973, %1220 ], [ %973, %1261 ]
  %2564 = phi ptr [ %682, %702 ], [ %1998, %2551 ], [ %1998, %2549 ], [ %974, %1600 ], [ %974, %1149 ], [ %974, %1220 ], [ %974, %1261 ]
  %2565 = phi i32 [ %704, %702 ], [ %2558, %2551 ], [ %2550, %2549 ], [ %1601, %1600 ], [ %1153, %1149 ], [ %1221, %1220 ], [ %1262, %1261 ]
  %2566 = phi double [ %680, %702 ], [ %2538, %2551 ], [ %2538, %2549 ], [ %680, %1600 ], [ %680, %1149 ], [ %680, %1220 ], [ %680, %1261 ]
  %2567 = phi i32 [ %679, %702 ], [ %2365, %2551 ], [ %2365, %2549 ], [ %679, %1600 ], [ %679, %1149 ], [ %679, %1220 ], [ %679, %1261 ]
  %2568 = phi <2 x double> [ %687, %702 ], [ %2539, %2551 ], [ %2539, %2549 ], [ %687, %1600 ], [ %687, %1149 ], [ %687, %1220 ], [ %687, %1261 ]
  %2569 = phi <2 x double> [ %688, %702 ], [ %2540, %2551 ], [ %2540, %2549 ], [ %688, %1600 ], [ %688, %1149 ], [ %688, %1220 ], [ %688, %1261 ]
  %2570 = phi <2 x double> [ %689, %702 ], [ %2541, %2551 ], [ %2541, %2549 ], [ %689, %1600 ], [ %689, %1149 ], [ %689, %1220 ], [ %689, %1261 ]
  %2571 = icmp slt i32 %2565, %40
  br i1 %2571, label %678, label %2572

2572:                                             ; preds = %2559, %649
  %2573 = phi ptr [ null, %649 ], [ %2564, %2559 ]
  %2574 = phi i32 [ %656, %649 ], [ %2565, %2559 ]
  %2575 = phi double [ 0.000000e+00, %649 ], [ %2566, %2559 ]
  %2576 = phi i32 [ 0, %649 ], [ %2567, %2559 ]
  %2577 = phi <2 x double> [ zeroinitializer, %649 ], [ %2568, %2559 ]
  %2578 = phi <2 x double> [ zeroinitializer, %649 ], [ %2569, %2559 ]
  %2579 = phi <2 x double> [ zeroinitializer, %649 ], [ %2570, %2559 ]
  br i1 %146, label %2587, label %2580

2580:                                             ; preds = %2572
  %2581 = trunc i32 %2574 to i16
  %2582 = load ptr, ptr %12, align 8, !tbaa !47
  %2583 = load i32, ptr %17, align 8, !tbaa !19
  %2584 = add nsw i32 %2583, -1
  %2585 = sext i32 %2584 to i64
  %2586 = getelementptr inbounds i16, ptr %2582, i64 %2585
  store i16 %2581, ptr %2586, align 2, !tbaa !45
  br label %2587

2587:                                             ; preds = %2580, %2572
  %2588 = sitofp i32 %2576 to double
  %2589 = getelementptr inbounds double, ptr %6, i64 22
  %2590 = load double, ptr %2589, align 8, !tbaa !15
  %2591 = fadd double %2590, %2588
  store double %2591, ptr %2589, align 8, !tbaa !15
  %2592 = getelementptr inbounds double, ptr %6, i64 1
  %2593 = load double, ptr %2592, align 8, !tbaa !15
  %2594 = fadd double %2575, %2593
  store double %2594, ptr %2592, align 8, !tbaa !15
  %2595 = getelementptr inbounds double, ptr %6, i64 12
  %2596 = load <4 x double>, ptr %2595, align 8, !tbaa !15
  %2597 = shufflevector <2 x double> %2577, <2 x double> %2579, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2598 = shufflevector <4 x double> %2597, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2599 = fadd <4 x double> %2598, %2596
  store <4 x double> %2599, ptr %2595, align 8, !tbaa !15
  %2600 = getelementptr inbounds double, ptr %6, i64 16
  %2601 = load <4 x double>, ptr %2600, align 8, !tbaa !15
  %2602 = shufflevector <2 x double> %2578, <2 x double> %2579, <4 x i32> <i32 0, i32 1, i32 3, i32 poison>
  %2603 = shufflevector <4 x double> %2602, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2604 = fadd <4 x double> %2603, %2601
  store <4 x double> %2604, ptr %2600, align 8, !tbaa !15
  %2605 = getelementptr inbounds double, ptr %6, i64 20
  %2606 = load double, ptr %2605, align 8, !tbaa !15
  %2607 = extractelement <2 x double> %2579, i64 0
  %2608 = fadd double %2607, %2606
  store double %2608, ptr %2605, align 8, !tbaa !15
  %2609 = icmp eq ptr %2573, null
  br i1 %2609, label %2611, label %2610

2610:                                             ; preds = %2587
  tail call void @_ZdaPv(ptr noundef nonnull %2573) #10
  br label %2611

2611:                                             ; preds = %2587, %2610, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil15calc_self_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2573

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %35 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %36 = shl i32 %35, 6
  %37 = add i32 %36, -65472
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %39 = load i32, ptr %38, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %41 = load i32, ptr %40, align 4, !tbaa !5
  %42 = load ptr, ptr %0, align 8, !tbaa !24
  %43 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !24
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = add nsw i32 %41, 5
  %52 = getelementptr inbounds %class.ResizeArray, ptr %50, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !26
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 2
  %55 = load i32, ptr %54, align 8, !tbaa !28
  %56 = icmp slt i32 %55, %51
  br i1 %56, label %57, label %95

57:                                               ; preds = %4
  %58 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 3
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = icmp slt i32 %59, %51
  br i1 %60, label %61, label %95

61:                                               ; preds = %57
  %62 = sitofp i32 %59 to float
  %63 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 5
  %64 = load float, ptr %63, align 4, !tbaa !32
  %65 = fmul float %64, %62
  %66 = fptosi float %65 to i32
  %67 = tail call i32 @llvm.smax.i32(i32 %66, i32 %51)
  %68 = sub nsw i32 %67, %59
  %69 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 6
  %70 = load i32, ptr %69, align 8, !tbaa !33
  %71 = icmp slt i32 %68, %70
  %72 = add nsw i32 %70, %59
  %73 = select i1 %71, i32 %72, i32 %67
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 1
  %76 = add nsw i64 %75, 31
  %77 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %76) #9
  %78 = getelementptr inbounds i8, ptr %77, i64 31
  %79 = ptrtoint ptr %78 to i64
  %80 = and i64 %79, 31
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, ptr %78, i64 %81
  %83 = load ptr, ptr %53, align 8, !tbaa !34
  %84 = sext i32 %55 to i64
  %85 = shl nsw i64 %84, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %82, ptr align 1 %83, i64 %85, i1 false)
  %86 = icmp eq i32 %59, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %61
  %88 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  %89 = load ptr, ptr %88, align 8, !tbaa !35
  %90 = icmp eq ptr %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZdaPv(ptr noundef nonnull %89) #10
  br label %92

92:                                               ; preds = %91, %87, %61
  %93 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  store ptr %77, ptr %93, align 8, !tbaa !35
  store ptr %82, ptr %53, align 8, !tbaa !34
  store i32 %73, ptr %58, align 4, !tbaa !31
  %94 = load ptr, ptr %52, align 8, !tbaa !26
  br label %95

95:                                               ; preds = %4, %57, %92
  %96 = phi ptr [ %53, %4 ], [ %53, %57 ], [ %94, %92 ]
  store i32 %51, ptr %54, align 8, !tbaa !28
  %97 = load ptr, ptr %96, align 8, !tbaa !34
  %98 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 1, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !36
  %100 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 2
  %101 = load i32, ptr %100, align 8, !tbaa !38
  %102 = icmp slt i32 %101, %51
  br i1 %102, label %103, label %141

103:                                              ; preds = %95
  %104 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 3
  %105 = load i32, ptr %104, align 4, !tbaa !40
  %106 = icmp slt i32 %105, %51
  br i1 %106, label %107, label %141

107:                                              ; preds = %103
  %108 = sitofp i32 %105 to float
  %109 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 5
  %110 = load float, ptr %109, align 4, !tbaa !41
  %111 = fmul float %110, %108
  %112 = fptosi float %111 to i32
  %113 = tail call i32 @llvm.smax.i32(i32 %112, i32 %51)
  %114 = sub nsw i32 %113, %105
  %115 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 6
  %116 = load i32, ptr %115, align 8, !tbaa !42
  %117 = icmp slt i32 %114, %116
  %118 = add nsw i32 %116, %105
  %119 = select i1 %117, i32 %118, i32 %113
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add nsw i64 %121, 31
  %123 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %122) #9
  %124 = getelementptr inbounds i8, ptr %123, i64 31
  %125 = ptrtoint ptr %124 to i64
  %126 = and i64 %125, 31
  %127 = sub nsw i64 0, %126
  %128 = getelementptr inbounds i8, ptr %124, i64 %127
  %129 = load ptr, ptr %99, align 8, !tbaa !43
  %130 = sext i32 %101 to i64
  %131 = shl nsw i64 %130, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %128, ptr align 1 %129, i64 %131, i1 false)
  %132 = icmp eq i32 %105, 0
  br i1 %132, label %138, label %133

133:                                              ; preds = %107
  %134 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  %135 = load ptr, ptr %134, align 8, !tbaa !44
  %136 = icmp eq ptr %135, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  tail call void @_ZdaPv(ptr noundef nonnull %135) #10
  br label %138

138:                                              ; preds = %137, %133, %107
  %139 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  store ptr %123, ptr %139, align 8, !tbaa !44
  store ptr %128, ptr %99, align 8, !tbaa !43
  store i32 %119, ptr %104, align 4, !tbaa !40
  %140 = load ptr, ptr %98, align 8, !tbaa !36
  br label %141

141:                                              ; preds = %95, %103, %138
  %142 = phi ptr [ %99, %95 ], [ %99, %103 ], [ %140, %138 ]
  store i32 %51, ptr %100, align 8, !tbaa !38
  %143 = load ptr, ptr %142, align 8, !tbaa !43
  %144 = getelementptr inbounds i32, ptr %143, i64 1
  %145 = icmp eq i32 %14, 0
  %146 = icmp ne i32 %16, 0
  %147 = select i1 %145, i1 %146, i1 false
  %148 = select i1 %147, i32 0, i32 %51
  %149 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 2, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !26
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 2
  %152 = load i32, ptr %151, align 8, !tbaa !28
  %153 = icmp slt i32 %152, %148
  br i1 %153, label %154, label %192

154:                                              ; preds = %141
  %155 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 3
  %156 = load i32, ptr %155, align 4, !tbaa !31
  %157 = icmp slt i32 %156, %148
  br i1 %157, label %158, label %192

158:                                              ; preds = %154
  %159 = sitofp i32 %156 to float
  %160 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 5
  %161 = load float, ptr %160, align 4, !tbaa !32
  %162 = fmul float %161, %159
  %163 = fptosi float %162 to i32
  %164 = tail call i32 @llvm.smax.i32(i32 %163, i32 %148)
  %165 = sub nsw i32 %164, %156
  %166 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 6
  %167 = load i32, ptr %166, align 8, !tbaa !33
  %168 = icmp slt i32 %165, %167
  %169 = add nsw i32 %167, %156
  %170 = select i1 %168, i32 %169, i32 %164
  %171 = sext i32 %170 to i64
  %172 = shl nsw i64 %171, 1
  %173 = add nsw i64 %172, 31
  %174 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %173) #9
  %175 = getelementptr inbounds i8, ptr %174, i64 31
  %176 = ptrtoint ptr %175 to i64
  %177 = and i64 %176, 31
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds i8, ptr %175, i64 %178
  %180 = load ptr, ptr %150, align 8, !tbaa !34
  %181 = sext i32 %152 to i64
  %182 = shl nsw i64 %181, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %179, ptr align 1 %180, i64 %182, i1 false)
  %183 = icmp eq i32 %156, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %158
  %185 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !35
  %187 = icmp eq ptr %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZdaPv(ptr noundef nonnull %186) #10
  br label %189

189:                                              ; preds = %188, %184, %158
  %190 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  store ptr %174, ptr %190, align 8, !tbaa !35
  store ptr %179, ptr %150, align 8, !tbaa !34
  store i32 %170, ptr %155, align 4, !tbaa !31
  %191 = load ptr, ptr %149, align 8, !tbaa !26
  br label %192

192:                                              ; preds = %141, %154, %189
  %193 = phi ptr [ %150, %141 ], [ %150, %154 ], [ %191, %189 ]
  store i32 %148, ptr %151, align 8, !tbaa !28
  %194 = load ptr, ptr %193, align 8, !tbaa !34
  %195 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 3, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !26
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 2
  %198 = load i32, ptr %197, align 8, !tbaa !28
  %199 = icmp slt i32 %198, %148
  br i1 %199, label %200, label %238

200:                                              ; preds = %192
  %201 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 3
  %202 = load i32, ptr %201, align 4, !tbaa !31
  %203 = icmp slt i32 %202, %148
  br i1 %203, label %204, label %238

204:                                              ; preds = %200
  %205 = sitofp i32 %202 to float
  %206 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 5
  %207 = load float, ptr %206, align 4, !tbaa !32
  %208 = fmul float %207, %205
  %209 = fptosi float %208 to i32
  %210 = tail call i32 @llvm.smax.i32(i32 %209, i32 %148)
  %211 = sub nsw i32 %210, %202
  %212 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 6
  %213 = load i32, ptr %212, align 8, !tbaa !33
  %214 = icmp slt i32 %211, %213
  %215 = add nsw i32 %213, %202
  %216 = select i1 %214, i32 %215, i32 %210
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 1
  %219 = add nsw i64 %218, 31
  %220 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %219) #9
  %221 = getelementptr inbounds i8, ptr %220, i64 31
  %222 = ptrtoint ptr %221 to i64
  %223 = and i64 %222, 31
  %224 = sub nsw i64 0, %223
  %225 = getelementptr inbounds i8, ptr %221, i64 %224
  %226 = load ptr, ptr %196, align 8, !tbaa !34
  %227 = sext i32 %198 to i64
  %228 = shl nsw i64 %227, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %225, ptr align 1 %226, i64 %228, i1 false)
  %229 = icmp eq i32 %202, 0
  br i1 %229, label %235, label %230

230:                                              ; preds = %204
  %231 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  %232 = load ptr, ptr %231, align 8, !tbaa !35
  %233 = icmp eq ptr %232, null
  br i1 %233, label %235, label %234

234:                                              ; preds = %230
  tail call void @_ZdaPv(ptr noundef nonnull %232) #10
  br label %235

235:                                              ; preds = %234, %230, %204
  %236 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  store ptr %220, ptr %236, align 8, !tbaa !35
  store ptr %225, ptr %196, align 8, !tbaa !34
  store i32 %216, ptr %201, align 4, !tbaa !31
  %237 = load ptr, ptr %195, align 8, !tbaa !26
  br label %238

238:                                              ; preds = %192, %200, %235
  %239 = phi ptr [ %196, %192 ], [ %196, %200 ], [ %237, %235 ]
  store i32 %148, ptr %197, align 8, !tbaa !28
  %240 = load ptr, ptr %239, align 8, !tbaa !34
  %241 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 4, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !26
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 2
  %244 = load i32, ptr %243, align 8, !tbaa !28
  %245 = icmp slt i32 %244, %148
  br i1 %245, label %246, label %284

246:                                              ; preds = %238
  %247 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 3
  %248 = load i32, ptr %247, align 4, !tbaa !31
  %249 = icmp slt i32 %248, %148
  br i1 %249, label %250, label %284

250:                                              ; preds = %246
  %251 = sitofp i32 %248 to float
  %252 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 5
  %253 = load float, ptr %252, align 4, !tbaa !32
  %254 = fmul float %253, %251
  %255 = fptosi float %254 to i32
  %256 = tail call i32 @llvm.smax.i32(i32 %255, i32 %148)
  %257 = sub nsw i32 %256, %248
  %258 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 6
  %259 = load i32, ptr %258, align 8, !tbaa !33
  %260 = icmp slt i32 %257, %259
  %261 = add nsw i32 %259, %248
  %262 = select i1 %260, i32 %261, i32 %256
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 1
  %265 = add nsw i64 %264, 31
  %266 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %265) #9
  %267 = getelementptr inbounds i8, ptr %266, i64 31
  %268 = ptrtoint ptr %267 to i64
  %269 = and i64 %268, 31
  %270 = sub nsw i64 0, %269
  %271 = getelementptr inbounds i8, ptr %267, i64 %270
  %272 = load ptr, ptr %242, align 8, !tbaa !34
  %273 = sext i32 %244 to i64
  %274 = shl nsw i64 %273, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %271, ptr align 1 %272, i64 %274, i1 false)
  %275 = icmp eq i32 %248, 0
  br i1 %275, label %281, label %276

276:                                              ; preds = %250
  %277 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  %278 = load ptr, ptr %277, align 8, !tbaa !35
  %279 = icmp eq ptr %278, null
  br i1 %279, label %281, label %280

280:                                              ; preds = %276
  tail call void @_ZdaPv(ptr noundef nonnull %278) #10
  br label %281

281:                                              ; preds = %280, %276, %250
  %282 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  store ptr %266, ptr %282, align 8, !tbaa !35
  store ptr %271, ptr %242, align 8, !tbaa !34
  store i32 %262, ptr %247, align 4, !tbaa !31
  %283 = load ptr, ptr %241, align 8, !tbaa !26
  br label %284

284:                                              ; preds = %238, %246, %281
  %285 = phi ptr [ %242, %238 ], [ %242, %246 ], [ %283, %281 ]
  store i32 %148, ptr %243, align 8, !tbaa !28
  %286 = load ptr, ptr %285, align 8, !tbaa !34
  %287 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 5, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !26
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 2
  %290 = load i32, ptr %289, align 8, !tbaa !28
  %291 = icmp slt i32 %290, %148
  br i1 %291, label %292, label %330

292:                                              ; preds = %284
  %293 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 3
  %294 = load i32, ptr %293, align 4, !tbaa !31
  %295 = icmp slt i32 %294, %148
  br i1 %295, label %296, label %330

296:                                              ; preds = %292
  %297 = sitofp i32 %294 to float
  %298 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 5
  %299 = load float, ptr %298, align 4, !tbaa !32
  %300 = fmul float %299, %297
  %301 = fptosi float %300 to i32
  %302 = tail call i32 @llvm.smax.i32(i32 %301, i32 %148)
  %303 = sub nsw i32 %302, %294
  %304 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 6
  %305 = load i32, ptr %304, align 8, !tbaa !33
  %306 = icmp slt i32 %303, %305
  %307 = add nsw i32 %305, %294
  %308 = select i1 %306, i32 %307, i32 %302
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 1
  %311 = add nsw i64 %310, 31
  %312 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %311) #9
  %313 = getelementptr inbounds i8, ptr %312, i64 31
  %314 = ptrtoint ptr %313 to i64
  %315 = and i64 %314, 31
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds i8, ptr %313, i64 %316
  %318 = load ptr, ptr %288, align 8, !tbaa !34
  %319 = sext i32 %290 to i64
  %320 = shl nsw i64 %319, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %317, ptr align 1 %318, i64 %320, i1 false)
  %321 = icmp eq i32 %294, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %296
  %323 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  %324 = load ptr, ptr %323, align 8, !tbaa !35
  %325 = icmp eq ptr %324, null
  br i1 %325, label %327, label %326

326:                                              ; preds = %322
  tail call void @_ZdaPv(ptr noundef nonnull %324) #10
  br label %327

327:                                              ; preds = %326, %322, %296
  %328 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  store ptr %312, ptr %328, align 8, !tbaa !35
  store ptr %317, ptr %288, align 8, !tbaa !34
  store i32 %308, ptr %293, align 4, !tbaa !31
  %329 = load ptr, ptr %287, align 8, !tbaa !26
  br label %330

330:                                              ; preds = %284, %292, %327
  %331 = phi ptr [ %288, %284 ], [ %288, %292 ], [ %329, %327 ]
  store i32 %148, ptr %289, align 8, !tbaa !28
  %332 = load ptr, ptr %331, align 8, !tbaa !34
  %333 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 6, i32 1
  %334 = load ptr, ptr %333, align 8, !tbaa !26
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 2
  %336 = load i32, ptr %335, align 8, !tbaa !28
  %337 = icmp slt i32 %336, %148
  br i1 %337, label %338, label %376

338:                                              ; preds = %330
  %339 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 3
  %340 = load i32, ptr %339, align 4, !tbaa !31
  %341 = icmp slt i32 %340, %148
  br i1 %341, label %342, label %376

342:                                              ; preds = %338
  %343 = sitofp i32 %340 to float
  %344 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 5
  %345 = load float, ptr %344, align 4, !tbaa !32
  %346 = fmul float %345, %343
  %347 = fptosi float %346 to i32
  %348 = tail call i32 @llvm.smax.i32(i32 %347, i32 %148)
  %349 = sub nsw i32 %348, %340
  %350 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 6
  %351 = load i32, ptr %350, align 8, !tbaa !33
  %352 = icmp slt i32 %349, %351
  %353 = add nsw i32 %351, %340
  %354 = select i1 %352, i32 %353, i32 %348
  %355 = sext i32 %354 to i64
  %356 = shl nsw i64 %355, 1
  %357 = add nsw i64 %356, 31
  %358 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %357) #9
  %359 = getelementptr inbounds i8, ptr %358, i64 31
  %360 = ptrtoint ptr %359 to i64
  %361 = and i64 %360, 31
  %362 = sub nsw i64 0, %361
  %363 = getelementptr inbounds i8, ptr %359, i64 %362
  %364 = load ptr, ptr %334, align 8, !tbaa !34
  %365 = sext i32 %336 to i64
  %366 = shl nsw i64 %365, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %363, ptr align 1 %364, i64 %366, i1 false)
  %367 = icmp eq i32 %340, 0
  br i1 %367, label %373, label %368

368:                                              ; preds = %342
  %369 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  %370 = load ptr, ptr %369, align 8, !tbaa !35
  %371 = icmp eq ptr %370, null
  br i1 %371, label %373, label %372

372:                                              ; preds = %368
  tail call void @_ZdaPv(ptr noundef nonnull %370) #10
  br label %373

373:                                              ; preds = %372, %368, %342
  %374 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  store ptr %358, ptr %374, align 8, !tbaa !35
  store ptr %363, ptr %334, align 8, !tbaa !34
  store i32 %354, ptr %339, align 4, !tbaa !31
  %375 = load ptr, ptr %333, align 8, !tbaa !26
  br label %376

376:                                              ; preds = %330, %338, %373
  %377 = phi ptr [ %334, %330 ], [ %334, %338 ], [ %375, %373 ]
  store i32 %148, ptr %335, align 8, !tbaa !28
  %378 = load ptr, ptr %377, align 8, !tbaa !34
  %379 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 15, i32 1
  %380 = load ptr, ptr %379, align 8, !tbaa !26
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 2
  %382 = load i32, ptr %381, align 8, !tbaa !28
  %383 = icmp slt i32 %382, %148
  br i1 %383, label %384, label %422

384:                                              ; preds = %376
  %385 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 3
  %386 = load i32, ptr %385, align 4, !tbaa !31
  %387 = icmp slt i32 %386, %148
  br i1 %387, label %388, label %422

388:                                              ; preds = %384
  %389 = sitofp i32 %386 to float
  %390 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 5
  %391 = load float, ptr %390, align 4, !tbaa !32
  %392 = fmul float %391, %389
  %393 = fptosi float %392 to i32
  %394 = tail call i32 @llvm.smax.i32(i32 %393, i32 %148)
  %395 = sub nsw i32 %394, %386
  %396 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 6
  %397 = load i32, ptr %396, align 8, !tbaa !33
  %398 = icmp slt i32 %395, %397
  %399 = add nsw i32 %397, %386
  %400 = select i1 %398, i32 %399, i32 %394
  %401 = sext i32 %400 to i64
  %402 = shl nsw i64 %401, 1
  %403 = add nsw i64 %402, 31
  %404 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %403) #9
  %405 = getelementptr inbounds i8, ptr %404, i64 31
  %406 = ptrtoint ptr %405 to i64
  %407 = and i64 %406, 31
  %408 = sub nsw i64 0, %407
  %409 = getelementptr inbounds i8, ptr %405, i64 %408
  %410 = load ptr, ptr %380, align 8, !tbaa !34
  %411 = sext i32 %382 to i64
  %412 = shl nsw i64 %411, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %409, ptr align 1 %410, i64 %412, i1 false)
  %413 = icmp eq i32 %386, 0
  br i1 %413, label %419, label %414

414:                                              ; preds = %388
  %415 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  %416 = load ptr, ptr %415, align 8, !tbaa !35
  %417 = icmp eq ptr %416, null
  br i1 %417, label %419, label %418

418:                                              ; preds = %414
  tail call void @_ZdaPv(ptr noundef nonnull %416) #10
  br label %419

419:                                              ; preds = %418, %414, %388
  %420 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  store ptr %404, ptr %420, align 8, !tbaa !35
  store ptr %409, ptr %380, align 8, !tbaa !34
  store i32 %400, ptr %385, align 4, !tbaa !31
  %421 = load ptr, ptr %379, align 8, !tbaa !26
  br label %422

422:                                              ; preds = %376, %384, %419
  %423 = phi ptr [ %380, %376 ], [ %380, %384 ], [ %421, %419 ]
  store i32 %148, ptr %381, align 8, !tbaa !28
  %424 = load ptr, ptr %423, align 8, !tbaa !34
  %425 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 16, i32 1
  %426 = load ptr, ptr %425, align 8, !tbaa !26
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 2
  %428 = load i32, ptr %427, align 8, !tbaa !28
  %429 = icmp slt i32 %428, %148
  br i1 %429, label %430, label %468

430:                                              ; preds = %422
  %431 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 3
  %432 = load i32, ptr %431, align 4, !tbaa !31
  %433 = icmp slt i32 %432, %148
  br i1 %433, label %434, label %468

434:                                              ; preds = %430
  %435 = sitofp i32 %432 to float
  %436 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 5
  %437 = load float, ptr %436, align 4, !tbaa !32
  %438 = fmul float %437, %435
  %439 = fptosi float %438 to i32
  %440 = tail call i32 @llvm.smax.i32(i32 %439, i32 %148)
  %441 = sub nsw i32 %440, %432
  %442 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 6
  %443 = load i32, ptr %442, align 8, !tbaa !33
  %444 = icmp slt i32 %441, %443
  %445 = add nsw i32 %443, %432
  %446 = select i1 %444, i32 %445, i32 %440
  %447 = sext i32 %446 to i64
  %448 = shl nsw i64 %447, 1
  %449 = add nsw i64 %448, 31
  %450 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %449) #9
  %451 = getelementptr inbounds i8, ptr %450, i64 31
  %452 = ptrtoint ptr %451 to i64
  %453 = and i64 %452, 31
  %454 = sub nsw i64 0, %453
  %455 = getelementptr inbounds i8, ptr %451, i64 %454
  %456 = load ptr, ptr %426, align 8, !tbaa !34
  %457 = sext i32 %428 to i64
  %458 = shl nsw i64 %457, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %455, ptr align 1 %456, i64 %458, i1 false)
  %459 = icmp eq i32 %432, 0
  br i1 %459, label %465, label %460

460:                                              ; preds = %434
  %461 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  %462 = load ptr, ptr %461, align 8, !tbaa !35
  %463 = icmp eq ptr %462, null
  br i1 %463, label %465, label %464

464:                                              ; preds = %460
  tail call void @_ZdaPv(ptr noundef nonnull %462) #10
  br label %465

465:                                              ; preds = %464, %460, %434
  %466 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  store ptr %450, ptr %466, align 8, !tbaa !35
  store ptr %455, ptr %426, align 8, !tbaa !34
  store i32 %446, ptr %431, align 4, !tbaa !31
  %467 = load ptr, ptr %425, align 8, !tbaa !26
  br label %468

468:                                              ; preds = %422, %430, %465
  %469 = phi ptr [ %426, %422 ], [ %426, %430 ], [ %467, %465 ]
  store i32 %148, ptr %427, align 8, !tbaa !28
  %470 = load ptr, ptr %469, align 8, !tbaa !34
  br i1 %147, label %612, label %471

471:                                              ; preds = %468
  %472 = icmp sgt i32 %41, 0
  br i1 %472, label %473, label %603

473:                                              ; preds = %471
  %474 = zext i32 %41 to i64
  %475 = and i64 %474, 1
  %476 = icmp eq i32 %41, 1
  br i1 %476, label %509, label %477

477:                                              ; preds = %473
  %478 = and i64 %474, 4294967294
  br label %479

479:                                              ; preds = %504, %477
  %480 = phi i64 [ 0, %477 ], [ %506, %504 ]
  %481 = phi i32 [ 0, %477 ], [ %505, %504 ]
  %482 = phi i64 [ 0, %477 ], [ %507, %504 ]
  %483 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %480, i32 4
  %484 = load i8, ptr %483, align 1
  %485 = and i8 %484, 7
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %492, label %487

487:                                              ; preds = %479
  %488 = trunc i64 %480 to i16
  %489 = add nsw i32 %481, 1
  %490 = sext i32 %481 to i64
  %491 = getelementptr inbounds i16, ptr %194, i64 %490
  store i16 %488, ptr %491, align 2, !tbaa !45
  br label %492

492:                                              ; preds = %479, %487
  %493 = phi i32 [ %489, %487 ], [ %481, %479 ]
  %494 = or i64 %480, 1
  %495 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %494, i32 4
  %496 = load i8, ptr %495, align 1
  %497 = and i8 %496, 7
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %504, label %499

499:                                              ; preds = %492
  %500 = trunc i64 %494 to i16
  %501 = add nsw i32 %493, 1
  %502 = sext i32 %493 to i64
  %503 = getelementptr inbounds i16, ptr %194, i64 %502
  store i16 %500, ptr %503, align 2, !tbaa !45
  br label %504

504:                                              ; preds = %499, %492
  %505 = phi i32 [ %501, %499 ], [ %493, %492 ]
  %506 = add nuw nsw i64 %480, 2
  %507 = add i64 %482, 2
  %508 = icmp eq i64 %507, %478
  br i1 %508, label %509, label %479

509:                                              ; preds = %504, %473
  %510 = phi i32 [ undef, %473 ], [ %505, %504 ]
  %511 = phi i64 [ 0, %473 ], [ %506, %504 ]
  %512 = phi i32 [ 0, %473 ], [ %505, %504 ]
  %513 = icmp eq i64 %475, 0
  br i1 %513, label %524, label %514

514:                                              ; preds = %509
  %515 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %511, i32 4
  %516 = load i8, ptr %515, align 1
  %517 = and i8 %516, 7
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %524, label %519

519:                                              ; preds = %514
  %520 = trunc i64 %511 to i16
  %521 = add nsw i32 %512, 1
  %522 = sext i32 %512 to i64
  %523 = getelementptr inbounds i16, ptr %194, i64 %522
  store i16 %520, ptr %523, align 2, !tbaa !45
  br label %524

524:                                              ; preds = %514, %519, %509
  %525 = phi i32 [ %510, %509 ], [ %521, %519 ], [ %512, %514 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %534, label %527

527:                                              ; preds = %524
  %528 = add nsw i32 %525, -1
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i16, ptr %194, i64 %529
  %531 = load i16, ptr %530, align 2, !tbaa !45
  %532 = sext i32 %525 to i64
  %533 = getelementptr inbounds i16, ptr %194, i64 %532
  store i16 %531, ptr %533, align 2, !tbaa !45
  br label %534

534:                                              ; preds = %527, %524
  %535 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %536 = icmp ne i32 %535, 0
  %537 = icmp sgt i32 %525, 0
  %538 = and i1 %536, %537
  br i1 %538, label %539, label %603

539:                                              ; preds = %534
  %540 = zext i32 %525 to i64
  %541 = and i64 %540, 1
  %542 = icmp eq i32 %525, 1
  br i1 %542, label %577, label %543

543:                                              ; preds = %539
  %544 = and i64 %540, 4294967294
  br label %545

545:                                              ; preds = %572, %543
  %546 = phi i64 [ 0, %543 ], [ %574, %572 ]
  %547 = phi i32 [ 0, %543 ], [ %573, %572 ]
  %548 = phi i64 [ 0, %543 ], [ %575, %572 ]
  %549 = getelementptr inbounds i16, ptr %194, i64 %546
  %550 = load i16, ptr %549, align 2, !tbaa !45
  %551 = zext i16 %550 to i64
  %552 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %551
  %553 = load i32, ptr %552, align 4
  %554 = icmp sgt i32 %553, -1
  br i1 %554, label %555, label %559

555:                                              ; preds = %545
  %556 = add nsw i32 %547, 1
  %557 = sext i32 %547 to i64
  %558 = getelementptr inbounds i16, ptr %240, i64 %557
  store i16 %550, ptr %558, align 2, !tbaa !45
  br label %559

559:                                              ; preds = %545, %555
  %560 = phi i32 [ %547, %545 ], [ %556, %555 ]
  %561 = or i64 %546, 1
  %562 = getelementptr inbounds i16, ptr %194, i64 %561
  %563 = load i16, ptr %562, align 2, !tbaa !45
  %564 = zext i16 %563 to i64
  %565 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %564
  %566 = load i32, ptr %565, align 4
  %567 = icmp sgt i32 %566, -1
  br i1 %567, label %568, label %572

568:                                              ; preds = %559
  %569 = add nsw i32 %560, 1
  %570 = sext i32 %560 to i64
  %571 = getelementptr inbounds i16, ptr %240, i64 %570
  store i16 %563, ptr %571, align 2, !tbaa !45
  br label %572

572:                                              ; preds = %568, %559
  %573 = phi i32 [ %560, %559 ], [ %569, %568 ]
  %574 = add nuw nsw i64 %546, 2
  %575 = add i64 %548, 2
  %576 = icmp eq i64 %575, %544
  br i1 %576, label %577, label %545

577:                                              ; preds = %572, %539
  %578 = phi i32 [ undef, %539 ], [ %573, %572 ]
  %579 = phi i64 [ 0, %539 ], [ %574, %572 ]
  %580 = phi i32 [ 0, %539 ], [ %573, %572 ]
  %581 = icmp eq i64 %541, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %577
  %583 = getelementptr inbounds i16, ptr %194, i64 %579
  %584 = load i16, ptr %583, align 2, !tbaa !45
  %585 = zext i16 %584 to i64
  %586 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %585
  %587 = load i32, ptr %586, align 4
  %588 = icmp sgt i32 %587, -1
  br i1 %588, label %589, label %593

589:                                              ; preds = %582
  %590 = add nsw i32 %580, 1
  %591 = sext i32 %580 to i64
  %592 = getelementptr inbounds i16, ptr %240, i64 %591
  store i16 %584, ptr %592, align 2, !tbaa !45
  br label %593

593:                                              ; preds = %582, %589, %577
  %594 = phi i32 [ %578, %577 ], [ %580, %582 ], [ %590, %589 ]
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %603, label %596

596:                                              ; preds = %593
  %597 = add nsw i32 %594, -1
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, ptr %240, i64 %598
  %600 = load i16, ptr %599, align 2, !tbaa !45
  %601 = sext i32 %594 to i64
  %602 = getelementptr inbounds i16, ptr %240, i64 %601
  store i16 %600, ptr %602, align 2, !tbaa !45
  br label %603

603:                                              ; preds = %471, %534, %596, %593
  %604 = phi i32 [ %525, %596 ], [ %525, %593 ], [ %525, %534 ], [ 0, %471 ]
  %605 = phi i32 [ %594, %596 ], [ 0, %593 ], [ 0, %534 ], [ 0, %471 ]
  %606 = load i32, ptr %17, align 8, !tbaa !19
  %607 = add nsw i32 %606, 1
  store i32 %607, ptr %17, align 8, !tbaa !19
  %608 = trunc i32 %39 to i16
  %609 = load ptr, ptr %12, align 8, !tbaa !47
  %610 = sext i32 %606 to i64
  %611 = getelementptr inbounds i16, ptr %609, i64 %610
  store i16 %608, ptr %611, align 2, !tbaa !45
  br label %622

612:                                              ; preds = %468
  %613 = load ptr, ptr %12, align 8, !tbaa !47
  %614 = load i32, ptr %17, align 8, !tbaa !19
  %615 = add nsw i32 %614, 1
  store i32 %615, ptr %17, align 8, !tbaa !19
  %616 = sext i32 %614 to i64
  %617 = getelementptr inbounds i16, ptr %613, i64 %616
  %618 = load i16, ptr %617, align 2, !tbaa !45
  %619 = zext i16 %618 to i32
  %620 = icmp eq i32 %39, %619
  br i1 %620, label %622, label %621

621:                                              ; preds = %612
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %622

622:                                              ; preds = %612, %621, %603
  %623 = phi i32 [ 0, %621 ], [ 0, %612 ], [ %604, %603 ]
  %624 = phi i32 [ 0, %621 ], [ 0, %612 ], [ %605, %603 ]
  %625 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 17, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %626, i32 noundef %39)
  %627 = load ptr, ptr %625, align 8, !tbaa !174
  %628 = load ptr, ptr %627, align 8, !tbaa !176
  %629 = sext i32 %39 to i64
  %630 = mul nsw i64 %629, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %628, i8 0, i64 %630, i1 false)
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %632 = load i32, ptr %631, align 4, !tbaa !49
  %633 = add nsw i32 %632, -1
  %634 = add nsw i32 %39, -1
  %635 = icmp sgt i32 %39, 1
  br i1 %635, label %636, label %2508

636:                                              ; preds = %622
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %640 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %641 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %642 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %643 = ptrtoint ptr %424 to i64
  %644 = add nsw i32 %41, 10
  %645 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %646 = ptrtoint ptr %470 to i64
  %647 = ptrtoint ptr %332 to i64
  %648 = ptrtoint ptr %378 to i64
  %649 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %650 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %651 = fneg double %32
  %652 = getelementptr inbounds double, ptr %6, i64 26
  %653 = getelementptr inbounds double, ptr %6, i64 28
  %654 = getelementptr inbounds double, ptr %6, i64 29
  %655 = getelementptr inbounds double, ptr %6, i64 31
  %656 = fadd double %33, -1.000000e+00
  %657 = fadd double %656, 1.000000e+00
  %658 = sext i32 %623 to i64
  %659 = sext i32 %624 to i64
  %660 = insertelement <2 x double> poison, double %27, i64 0
  %661 = shufflevector <2 x double> %660, <2 x double> poison, <2 x i32> zeroinitializer
  %662 = getelementptr inbounds i16, ptr %470, i64 1
  %663 = getelementptr inbounds i16, ptr %470, i64 1
  br label %664

664:                                              ; preds = %636, %2494
  %665 = phi i32 [ 0, %636 ], [ %2505, %2494 ]
  %666 = phi i32 [ 0, %636 ], [ %2506, %2494 ]
  %667 = phi ptr [ null, %636 ], [ %2503, %2494 ]
  %668 = phi ptr [ null, %636 ], [ %2502, %2494 ]
  %669 = phi ptr [ null, %636 ], [ %2501, %2494 ]
  %670 = phi i32 [ 0, %636 ], [ %2500, %2494 ]
  %671 = phi i32 [ 0, %636 ], [ %2499, %2494 ]
  %672 = phi i32 [ 0, %636 ], [ %2498, %2494 ]
  %673 = phi i32 [ 0, %636 ], [ %2497, %2494 ]
  %674 = phi i32 [ 0, %636 ], [ %2496, %2494 ]
  %675 = phi i32 [ %638, %636 ], [ %2495, %2494 ]
  %676 = sext i32 %666 to i64
  %677 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %676
  %678 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %676
  %679 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %676, i32 4
  %680 = load i8, ptr %679, align 1
  %681 = lshr i8 %680, 3
  %682 = and i8 %681, 15
  %683 = zext i8 %682 to i32
  %684 = icmp eq i8 %682, 0
  br i1 %684, label %691, label %685

685:                                              ; preds = %664
  %686 = icmp eq i32 %675, 0
  br i1 %686, label %691, label %687

687:                                              ; preds = %685
  %688 = add nsw i32 %675, -1
  %689 = add nsw i32 %666, -1
  %690 = add i32 %689, %683
  br label %2494

691:                                              ; preds = %685, %664
  %692 = phi i32 [ %675, %664 ], [ %633, %685 ]
  %693 = load <2 x double>, ptr %677, align 8, !tbaa !15
  %694 = fadd <2 x double> %19, %693
  %695 = getelementptr inbounds %class.Vector, ptr %677, i64 0, i32 2
  %696 = load double, ptr %695, align 8, !tbaa !50
  %697 = fadd double %21, %696
  %698 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %676, i32 3
  %699 = load i8, ptr %698, align 2, !tbaa !52
  %700 = zext i8 %699 to i32
  %701 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %702 = fsub double %696, %701
  %703 = fmul double %10, %702
  %704 = tail call double @llvm.floor.f64(double %703)
  %705 = fptosi double %704 to i32
  %706 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %707 = icmp slt i32 %705, 0
  %708 = select i1 %707, i32 %706, i32 0
  %709 = icmp sgt i32 %706, %705
  %710 = select i1 %709, i32 0, i32 %706
  %711 = sub i32 %705, %710
  %712 = add i32 %711, %708
  %713 = add nsw i32 %666, %683
  %714 = select i1 %684, i32 %670, i32 %713
  br i1 %147, label %2064, label %715

715:                                              ; preds = %691
  %716 = load i32, ptr %678, align 4
  %717 = shl i32 %716, 2
  %718 = ashr exact i32 %717, 2
  %719 = load ptr, ptr %639, align 8, !tbaa !53
  %720 = sext i32 %718 to i64
  %721 = getelementptr inbounds %class.ExclusionCheck, ptr %719, i64 %720
  %722 = load i32, ptr %721, align 8, !tbaa !55
  %723 = getelementptr inbounds %class.ExclusionCheck, ptr %719, i64 %720, i32 1
  %724 = load i32, ptr %723, align 4, !tbaa !57
  %725 = getelementptr inbounds %class.ExclusionCheck, ptr %719, i64 %720, i32 2
  %726 = load ptr, ptr %725, align 8, !tbaa !58
  %727 = icmp eq ptr %726, null
  br i1 %727, label %732, label %728

728:                                              ; preds = %715
  %729 = sext i32 %722 to i64
  %730 = sub nsw i64 0, %729
  %731 = getelementptr inbounds i8, ptr %726, i64 %730
  br label %958

732:                                              ; preds = %715
  %733 = icmp eq ptr %667, null
  br i1 %733, label %821, label %734

734:                                              ; preds = %732
  %735 = load i32, ptr %668, align 4, !tbaa !5
  %736 = icmp slt i32 %735, 1
  br i1 %736, label %784, label %737

737:                                              ; preds = %734
  %738 = add nuw i32 %735, 1
  %739 = zext i32 %738 to i64
  %740 = add nsw i64 %739, -1
  %741 = add nsw i64 %739, -2
  %742 = and i64 %740, 3
  %743 = icmp ult i64 %741, 3
  br i1 %743, label %771, label %744

744:                                              ; preds = %737
  %745 = and i64 %740, -4
  br label %746

746:                                              ; preds = %746, %744
  %747 = phi i64 [ 1, %744 ], [ %768, %746 ]
  %748 = phi i64 [ 0, %744 ], [ %769, %746 ]
  %749 = getelementptr inbounds i32, ptr %668, i64 %747
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %667, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !59
  %753 = add nuw nsw i64 %747, 1
  %754 = getelementptr inbounds i32, ptr %668, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %667, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !59
  %758 = add nuw nsw i64 %747, 2
  %759 = getelementptr inbounds i32, ptr %668, i64 %758
  %760 = load i32, ptr %759, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i8, ptr %667, i64 %761
  store i8 0, ptr %762, align 1, !tbaa !59
  %763 = add nuw nsw i64 %747, 3
  %764 = getelementptr inbounds i32, ptr %668, i64 %763
  %765 = load i32, ptr %764, align 4, !tbaa !5
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i8, ptr %667, i64 %766
  store i8 0, ptr %767, align 1, !tbaa !59
  %768 = add nuw nsw i64 %747, 4
  %769 = add i64 %748, 4
  %770 = icmp eq i64 %769, %745
  br i1 %770, label %771, label %746

771:                                              ; preds = %746, %737
  %772 = phi i64 [ 1, %737 ], [ %768, %746 ]
  %773 = icmp eq i64 %742, 0
  br i1 %773, label %784, label %774

774:                                              ; preds = %771, %774
  %775 = phi i64 [ %781, %774 ], [ %772, %771 ]
  %776 = phi i64 [ %782, %774 ], [ 0, %771 ]
  %777 = getelementptr inbounds i32, ptr %668, i64 %775
  %778 = load i32, ptr %777, align 4, !tbaa !5
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds i8, ptr %667, i64 %779
  store i8 0, ptr %780, align 1, !tbaa !59
  %781 = add nuw nsw i64 %775, 1
  %782 = add i64 %776, 1
  %783 = icmp eq i64 %782, %742
  br i1 %783, label %784, label %774, !llvm.loop !178

784:                                              ; preds = %771, %774, %734
  %785 = load i32, ptr %669, align 4, !tbaa !5
  %786 = icmp slt i32 %785, 1
  br i1 %786, label %841, label %787

787:                                              ; preds = %784
  %788 = add nuw i32 %785, 1
  %789 = zext i32 %788 to i64
  %790 = add nsw i64 %789, -1
  %791 = add nsw i64 %789, -2
  %792 = and i64 %790, 3
  %793 = icmp ult i64 %791, 3
  br i1 %793, label %828, label %794

794:                                              ; preds = %787
  %795 = and i64 %790, -4
  br label %796

796:                                              ; preds = %796, %794
  %797 = phi i64 [ 1, %794 ], [ %818, %796 ]
  %798 = phi i64 [ 0, %794 ], [ %819, %796 ]
  %799 = getelementptr inbounds i32, ptr %669, i64 %797
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %667, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !59
  %803 = add nuw nsw i64 %797, 1
  %804 = getelementptr inbounds i32, ptr %669, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %667, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !59
  %808 = add nuw nsw i64 %797, 2
  %809 = getelementptr inbounds i32, ptr %669, i64 %808
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %667, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !59
  %813 = add nuw nsw i64 %797, 3
  %814 = getelementptr inbounds i32, ptr %669, i64 %813
  %815 = load i32, ptr %814, align 4, !tbaa !5
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i8, ptr %667, i64 %816
  store i8 0, ptr %817, align 1, !tbaa !59
  %818 = add nuw nsw i64 %797, 4
  %819 = add i64 %798, 4
  %820 = icmp eq i64 %819, %795
  br i1 %820, label %828, label %796

821:                                              ; preds = %732
  %822 = load i32, ptr %640, align 8, !tbaa !62
  %823 = tail call i32 @llvm.smax.i32(i32 %822, i32 -1)
  %824 = sext i32 %823 to i64
  %825 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %824) #9
  %826 = load i32, ptr %640, align 8, !tbaa !62
  %827 = sext i32 %826 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %825, i8 0, i64 %827, i1 false)
  br label %841

828:                                              ; preds = %796, %787
  %829 = phi i64 [ 1, %787 ], [ %818, %796 ]
  %830 = icmp eq i64 %792, 0
  br i1 %830, label %841, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %838, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %839, %831 ], [ 0, %828 ]
  %834 = getelementptr inbounds i32, ptr %669, i64 %832
  %835 = load i32, ptr %834, align 4, !tbaa !5
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds i8, ptr %667, i64 %836
  store i8 0, ptr %837, align 1, !tbaa !59
  %838 = add nuw nsw i64 %832, 1
  %839 = add i64 %833, 1
  %840 = icmp eq i64 %839, %792
  br i1 %840, label %841, label %831, !llvm.loop !179

841:                                              ; preds = %828, %831, %784, %821
  %842 = phi ptr [ %825, %821 ], [ %667, %784 ], [ %667, %831 ], [ %667, %828 ]
  %843 = load i32, ptr %678, align 4
  %844 = shl i32 %843, 2
  %845 = ashr exact i32 %844, 2
  %846 = load ptr, ptr %641, align 8, !tbaa !64
  %847 = sext i32 %845 to i64
  %848 = getelementptr inbounds ptr, ptr %846, i64 %847
  %849 = load ptr, ptr %848, align 8, !tbaa !24
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = icmp slt i32 %850, 1
  br i1 %851, label %904, label %852

852:                                              ; preds = %841
  %853 = add nuw i32 %850, 1
  %854 = zext i32 %853 to i64
  %855 = add nsw i64 %854, -1
  %856 = add nsw i64 %854, -2
  %857 = and i64 %855, 3
  %858 = icmp ult i64 %856, 3
  br i1 %858, label %886, label %859

859:                                              ; preds = %852
  %860 = and i64 %855, -4
  br label %861

861:                                              ; preds = %861, %859
  %862 = phi i64 [ 1, %859 ], [ %883, %861 ]
  %863 = phi i64 [ 0, %859 ], [ %884, %861 ]
  %864 = getelementptr inbounds i32, ptr %849, i64 %862
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %842, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !59
  %868 = add nuw nsw i64 %862, 1
  %869 = getelementptr inbounds i32, ptr %849, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %842, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !59
  %873 = add nuw nsw i64 %862, 2
  %874 = getelementptr inbounds i32, ptr %849, i64 %873
  %875 = load i32, ptr %874, align 4, !tbaa !5
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i8, ptr %842, i64 %876
  store i8 1, ptr %877, align 1, !tbaa !59
  %878 = add nuw nsw i64 %862, 3
  %879 = getelementptr inbounds i32, ptr %849, i64 %878
  %880 = load i32, ptr %879, align 4, !tbaa !5
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i8, ptr %842, i64 %881
  store i8 1, ptr %882, align 1, !tbaa !59
  %883 = add nuw nsw i64 %862, 4
  %884 = add i64 %863, 4
  %885 = icmp eq i64 %884, %860
  br i1 %885, label %886, label %861

886:                                              ; preds = %861, %852
  %887 = phi i64 [ 1, %852 ], [ %883, %861 ]
  %888 = icmp eq i64 %857, 0
  br i1 %888, label %899, label %889

889:                                              ; preds = %886, %889
  %890 = phi i64 [ %896, %889 ], [ %887, %886 ]
  %891 = phi i64 [ %897, %889 ], [ 0, %886 ]
  %892 = getelementptr inbounds i32, ptr %849, i64 %890
  %893 = load i32, ptr %892, align 4, !tbaa !5
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds i8, ptr %842, i64 %894
  store i8 1, ptr %895, align 1, !tbaa !59
  %896 = add nuw nsw i64 %890, 1
  %897 = add i64 %891, 1
  %898 = icmp eq i64 %897, %857
  br i1 %898, label %899, label %889, !llvm.loop !180

899:                                              ; preds = %889, %886
  %900 = load i32, ptr %678, align 4
  %901 = shl i32 %900, 2
  %902 = ashr exact i32 %901, 2
  %903 = sext i32 %902 to i64
  br label %904

904:                                              ; preds = %899, %841
  %905 = phi i64 [ %903, %899 ], [ %847, %841 ]
  %906 = load ptr, ptr %642, align 8, !tbaa !66
  %907 = getelementptr inbounds ptr, ptr %906, i64 %905
  %908 = load ptr, ptr %907, align 8, !tbaa !24
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = icmp slt i32 %909, 1
  br i1 %910, label %958, label %911

911:                                              ; preds = %904
  %912 = add nuw i32 %909, 1
  %913 = zext i32 %912 to i64
  %914 = add nsw i64 %913, -1
  %915 = add nsw i64 %913, -2
  %916 = and i64 %914, 3
  %917 = icmp ult i64 %915, 3
  br i1 %917, label %945, label %918

918:                                              ; preds = %911
  %919 = and i64 %914, -4
  br label %920

920:                                              ; preds = %920, %918
  %921 = phi i64 [ 1, %918 ], [ %942, %920 ]
  %922 = phi i64 [ 0, %918 ], [ %943, %920 ]
  %923 = getelementptr inbounds i32, ptr %908, i64 %921
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %842, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !59
  %927 = add nuw nsw i64 %921, 1
  %928 = getelementptr inbounds i32, ptr %908, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %842, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !59
  %932 = add nuw nsw i64 %921, 2
  %933 = getelementptr inbounds i32, ptr %908, i64 %932
  %934 = load i32, ptr %933, align 4, !tbaa !5
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, ptr %842, i64 %935
  store i8 2, ptr %936, align 1, !tbaa !59
  %937 = add nuw nsw i64 %921, 3
  %938 = getelementptr inbounds i32, ptr %908, i64 %937
  %939 = load i32, ptr %938, align 4, !tbaa !5
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds i8, ptr %842, i64 %940
  store i8 2, ptr %941, align 1, !tbaa !59
  %942 = add nuw nsw i64 %921, 4
  %943 = add i64 %922, 4
  %944 = icmp eq i64 %943, %919
  br i1 %944, label %945, label %920

945:                                              ; preds = %920, %911
  %946 = phi i64 [ 1, %911 ], [ %942, %920 ]
  %947 = icmp eq i64 %916, 0
  br i1 %947, label %958, label %948

948:                                              ; preds = %945, %948
  %949 = phi i64 [ %955, %948 ], [ %946, %945 ]
  %950 = phi i64 [ %956, %948 ], [ 0, %945 ]
  %951 = getelementptr inbounds i32, ptr %908, i64 %949
  %952 = load i32, ptr %951, align 4, !tbaa !5
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i8, ptr %842, i64 %953
  store i8 2, ptr %954, align 1, !tbaa !59
  %955 = add nuw nsw i64 %949, 1
  %956 = add i64 %950, 1
  %957 = icmp eq i64 %956, %916
  br i1 %957, label %958, label %948, !llvm.loop !181

958:                                              ; preds = %945, %948, %904, %728
  %959 = phi ptr [ %731, %728 ], [ %842, %904 ], [ %842, %948 ], [ %842, %945 ]
  %960 = phi ptr [ %669, %728 ], [ %908, %904 ], [ %908, %948 ], [ %908, %945 ]
  %961 = phi ptr [ %668, %728 ], [ %849, %904 ], [ %849, %948 ], [ %849, %945 ]
  %962 = phi ptr [ %667, %728 ], [ %842, %904 ], [ %842, %948 ], [ %842, %945 ]
  %963 = load i8, ptr %679, align 1
  %964 = and i8 %963, 7
  %965 = icmp eq i8 %964, 0
  br i1 %965, label %1259, label %966

966:                                              ; preds = %958
  %967 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %968 = icmp eq i32 %967, 0
  br i1 %968, label %972, label %969

969:                                              ; preds = %966
  %970 = load i32, ptr %678, align 4
  %971 = icmp slt i32 %970, 0
  br label %972

972:                                              ; preds = %969, %966
  %973 = phi i1 [ false, %966 ], [ %971, %969 ]
  %974 = and i8 %963, 120
  %975 = icmp eq i8 %974, 0
  br i1 %975, label %1007, label %976

976:                                              ; preds = %972
  %977 = icmp slt i32 %671, %623
  br i1 %977, label %978, label %991

978:                                              ; preds = %976
  %979 = sext i32 %671 to i64
  br label %980

980:                                              ; preds = %978, %986
  %981 = phi i64 [ %979, %978 ], [ %987, %986 ]
  %982 = getelementptr inbounds i16, ptr %194, i64 %981
  %983 = load i16, ptr %982, align 2, !tbaa !45
  %984 = zext i16 %983 to i32
  %985 = icmp sgt i32 %714, %984
  br i1 %985, label %986, label %989

986:                                              ; preds = %980
  %987 = add nsw i64 %981, 1
  %988 = icmp eq i64 %987, %658
  br i1 %988, label %991, label %980

989:                                              ; preds = %980
  %990 = trunc i64 %981 to i32
  br label %991

991:                                              ; preds = %986, %989, %976
  %992 = phi i32 [ %671, %976 ], [ %990, %989 ], [ %623, %986 ]
  %993 = icmp slt i32 %672, %624
  br i1 %993, label %994, label %1007

994:                                              ; preds = %991
  %995 = sext i32 %672 to i64
  br label %996

996:                                              ; preds = %994, %1002
  %997 = phi i64 [ %995, %994 ], [ %1003, %1002 ]
  %998 = getelementptr inbounds i16, ptr %240, i64 %997
  %999 = load i16, ptr %998, align 2, !tbaa !45
  %1000 = zext i16 %999 to i32
  %1001 = icmp sgt i32 %714, %1000
  br i1 %1001, label %1002, label %1005

1002:                                             ; preds = %996
  %1003 = add nsw i64 %997, 1
  %1004 = icmp eq i64 %1003, %659
  br i1 %1004, label %1007, label %996

1005:                                             ; preds = %996
  %1006 = trunc i64 %997 to i32
  br label %1007

1007:                                             ; preds = %1002, %1005, %991, %972
  %1008 = phi i32 [ %672, %972 ], [ %672, %991 ], [ %1006, %1005 ], [ %624, %1002 ]
  %1009 = phi i32 [ %671, %972 ], [ %992, %991 ], [ %992, %1005 ], [ %992, %1002 ]
  %1010 = add nsw i32 %666, 1
  %1011 = icmp slt i32 %1010, %714
  br i1 %1011, label %1012, label %1077

1012:                                             ; preds = %1007
  %1013 = xor i32 %666, -1
  %1014 = add i32 %714, %1013
  %1015 = zext i32 %1014 to i64
  %1016 = icmp ult i32 %1014, 8
  br i1 %1016, label %1066, label %1017

1017:                                             ; preds = %1012
  %1018 = icmp ult i32 %1014, 64
  br i1 %1018, label %1047, label %1019

1019:                                             ; preds = %1017
  %1020 = and i64 %1015, 4294967232
  %1021 = trunc i32 %1010 to i16
  %1022 = insertelement <16 x i16> poison, i16 %1021, i64 0
  %1023 = shufflevector <16 x i16> %1022, <16 x i16> poison, <16 x i32> zeroinitializer
  %1024 = add <16 x i16> %1023, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1025 = trunc i64 %1020 to i32
  %1026 = add i32 %1010, %1025
  br label %1027

1027:                                             ; preds = %1027, %1019
  %1028 = phi i64 [ 0, %1019 ], [ %1037, %1027 ]
  %1029 = phi <16 x i16> [ %1024, %1019 ], [ %1038, %1027 ]
  %1030 = add <16 x i16> %1029, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1031 = add <16 x i16> %1029, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1032 = add <16 x i16> %1029, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1033 = getelementptr inbounds i16, ptr %424, i64 %1028
  store <16 x i16> %1029, ptr %1033, align 2, !tbaa !45
  %1034 = getelementptr inbounds i16, ptr %1033, i64 16
  store <16 x i16> %1030, ptr %1034, align 2, !tbaa !45
  %1035 = getelementptr inbounds i16, ptr %1033, i64 32
  store <16 x i16> %1031, ptr %1035, align 2, !tbaa !45
  %1036 = getelementptr inbounds i16, ptr %1033, i64 48
  store <16 x i16> %1032, ptr %1036, align 2, !tbaa !45
  %1037 = add nuw i64 %1028, 64
  %1038 = add <16 x i16> %1029, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1039 = icmp eq i64 %1037, %1020
  br i1 %1039, label %1040, label %1027, !llvm.loop !182

1040:                                             ; preds = %1027
  %1041 = icmp eq i64 %1020, %1015
  br i1 %1041, label %1077, label %1042

1042:                                             ; preds = %1040
  %1043 = trunc i64 %1020 to i32
  %1044 = add i32 %1010, %1043
  %1045 = and i64 %1015, 56
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1066, label %1047

1047:                                             ; preds = %1017, %1042
  %1048 = phi i32 [ %1026, %1042 ], [ %1010, %1017 ]
  %1049 = phi i64 [ %1020, %1042 ], [ 0, %1017 ]
  %1050 = and i64 %1015, 4294967288
  %1051 = trunc i64 %1050 to i32
  %1052 = add i32 %1010, %1051
  %1053 = trunc i32 %1048 to i16
  %1054 = insertelement <8 x i16> poison, i16 %1053, i64 0
  %1055 = shufflevector <8 x i16> %1054, <8 x i16> poison, <8 x i32> zeroinitializer
  %1056 = add <8 x i16> %1055, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1057

1057:                                             ; preds = %1057, %1047
  %1058 = phi i64 [ %1049, %1047 ], [ %1061, %1057 ]
  %1059 = phi <8 x i16> [ %1056, %1047 ], [ %1062, %1057 ]
  %1060 = getelementptr inbounds i16, ptr %424, i64 %1058
  store <8 x i16> %1059, ptr %1060, align 2, !tbaa !45
  %1061 = add nuw i64 %1058, 8
  %1062 = add <8 x i16> %1059, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1063 = icmp eq i64 %1061, %1050
  br i1 %1063, label %1064, label %1057, !llvm.loop !183

1064:                                             ; preds = %1057
  %1065 = icmp eq i64 %1050, %1015
  br i1 %1065, label %1077, label %1066

1066:                                             ; preds = %1012, %1042, %1064
  %1067 = phi i64 [ 0, %1012 ], [ %1020, %1042 ], [ %1050, %1064 ]
  %1068 = phi i32 [ %1010, %1012 ], [ %1044, %1042 ], [ %1052, %1064 ]
  br label %1069

1069:                                             ; preds = %1066, %1069
  %1070 = phi i64 [ %1073, %1069 ], [ %1067, %1066 ]
  %1071 = phi i32 [ %1075, %1069 ], [ %1068, %1066 ]
  %1072 = trunc i32 %1071 to i16
  %1073 = add nuw nsw i64 %1070, 1
  %1074 = getelementptr inbounds i16, ptr %424, i64 %1070
  store i16 %1072, ptr %1074, align 2, !tbaa !45
  %1075 = add nsw i32 %1071, 1
  %1076 = icmp eq i64 %1073, %1015
  br i1 %1076, label %1077, label %1069, !llvm.loop !184

1077:                                             ; preds = %1069, %1040, %1064, %1007
  %1078 = phi i32 [ 0, %1007 ], [ %1014, %1064 ], [ %1014, %1040 ], [ %1014, %1069 ]
  %1079 = zext i32 %1078 to i64
  %1080 = getelementptr inbounds i16, ptr %424, i64 %1079
  %1081 = select i1 %973, ptr %240, ptr %194
  %1082 = select i1 %973, i32 %1008, i32 %1009
  %1083 = select i1 %973, i32 %624, i32 %623
  %1084 = icmp slt i32 %1082, %1083
  br i1 %1084, label %1085, label %1244

1085:                                             ; preds = %1077
  %1086 = sub nsw i32 %1083, %1082
  %1087 = icmp sgt i32 %1086, 6
  br i1 %1087, label %1088, label %1181

1088:                                             ; preds = %1085
  %1089 = add nsw i32 %1083, -2
  %1090 = add nsw i32 %1082, 2
  %1091 = icmp slt i32 %1090, %1089
  br i1 %1091, label %1092, label %1181

1092:                                             ; preds = %1088
  %1093 = add nsw i32 %1082, 1
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds i16, ptr %1081, i64 %1094
  %1096 = load i16, ptr %1095, align 2, !tbaa !45
  %1097 = zext i16 %1096 to i64
  %1098 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1097
  %1099 = getelementptr inbounds %class.Vector, ptr %1098, i64 0, i32 2
  %1100 = load double, ptr %1099, align 8, !tbaa !50
  %1101 = sext i32 %1082 to i64
  %1102 = getelementptr inbounds i16, ptr %1081, i64 %1101
  %1103 = load i16, ptr %1102, align 2, !tbaa !45
  %1104 = zext i16 %1103 to i64
  %1105 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1104
  %1106 = getelementptr inbounds %class.Vector, ptr %1105, i64 0, i32 2
  %1107 = load double, ptr %1106, align 8, !tbaa !50
  %1108 = getelementptr inbounds %class.Vector, ptr %1098, i64 0, i32 1
  %1109 = load double, ptr %1108, align 8, !tbaa !68
  %1110 = getelementptr inbounds %class.Vector, ptr %1105, i64 0, i32 1
  %1111 = load double, ptr %1110, align 8, !tbaa !68
  %1112 = load double, ptr %1098, align 8, !tbaa !69
  %1113 = load double, ptr %1105, align 8, !tbaa !69
  %1114 = sext i32 %1090 to i64
  %1115 = sext i32 %1089 to i64
  %1116 = insertelement <2 x double> poison, double %1100, i64 0
  %1117 = insertelement <2 x double> %1116, double %1107, i64 1
  %1118 = insertelement <2 x double> poison, double %1109, i64 0
  %1119 = insertelement <2 x double> %1118, double %1111, i64 1
  %1120 = insertelement <2 x double> poison, double %1112, i64 0
  %1121 = insertelement <2 x double> %1120, double %1113, i64 1
  %1122 = insertelement <2 x double> poison, double %697, i64 0
  %1123 = shufflevector <2 x double> %1122, <2 x double> poison, <2 x i32> zeroinitializer
  %1124 = shufflevector <2 x double> %694, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1125 = shufflevector <2 x double> %694, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1126

1126:                                             ; preds = %1092, %1126
  %1127 = phi i64 [ %1114, %1092 ], [ %1172, %1126 ]
  %1128 = phi i32 [ %1082, %1092 ], [ %1174, %1126 ]
  %1129 = phi i32 [ 0, %1092 ], [ %1171, %1126 ]
  %1130 = phi i16 [ %1103, %1092 ], [ %1137, %1126 ]
  %1131 = phi i16 [ %1096, %1092 ], [ %1141, %1126 ]
  %1132 = phi <2 x double> [ %1117, %1092 ], [ %1176, %1126 ]
  %1133 = phi <2 x double> [ %1119, %1092 ], [ %1178, %1126 ]
  %1134 = phi <2 x double> [ %1121, %1092 ], [ %1180, %1126 ]
  %1135 = fsub <2 x double> %1123, %1132
  %1136 = getelementptr inbounds i16, ptr %1081, i64 %1127
  %1137 = load i16, ptr %1136, align 2, !tbaa !45
  %1138 = add nsw i32 %1128, 3
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds i16, ptr %1081, i64 %1139
  %1141 = load i16, ptr %1140, align 2, !tbaa !45
  %1142 = zext i16 %1137 to i64
  %1143 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1142
  %1144 = load double, ptr %1143, align 8, !tbaa !69
  %1145 = zext i16 %1141 to i64
  %1146 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1145
  %1147 = load double, ptr %1146, align 8, !tbaa !69
  %1148 = getelementptr inbounds %class.Vector, ptr %1143, i64 0, i32 1
  %1149 = load double, ptr %1148, align 8, !tbaa !68
  %1150 = getelementptr inbounds %class.Vector, ptr %1146, i64 0, i32 1
  %1151 = load double, ptr %1150, align 8, !tbaa !68
  %1152 = getelementptr inbounds %class.Vector, ptr %1143, i64 0, i32 2
  %1153 = load double, ptr %1152, align 8, !tbaa !50
  %1154 = getelementptr inbounds %class.Vector, ptr %1146, i64 0, i32 2
  %1155 = load double, ptr %1154, align 8, !tbaa !50
  %1156 = fsub <2 x double> %1125, %1134
  %1157 = fmul <2 x double> %1156, %1156
  %1158 = fsub <2 x double> %1124, %1133
  %1159 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1158, <2 x double> %1158, <2 x double> %1157)
  %1160 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1135, <2 x double> %1135, <2 x double> %1159)
  %1161 = fcmp olt <2 x double> %1160, %661
  %1162 = zext i32 %1129 to i64
  %1163 = getelementptr inbounds i16, ptr %286, i64 %1162
  store i16 %1130, ptr %1163, align 2, !tbaa !45
  %1164 = extractelement <2 x i1> %1161, i64 1
  %1165 = zext i1 %1164 to i32
  %1166 = add nuw nsw i32 %1129, %1165
  %1167 = zext i32 %1166 to i64
  %1168 = getelementptr inbounds i16, ptr %286, i64 %1167
  store i16 %1131, ptr %1168, align 2, !tbaa !45
  %1169 = extractelement <2 x i1> %1161, i64 0
  %1170 = zext i1 %1169 to i32
  %1171 = add i32 %1166, %1170
  %1172 = add nsw i64 %1127, 2
  %1173 = icmp slt i64 %1172, %1115
  %1174 = trunc i64 %1127 to i32
  %1175 = insertelement <2 x double> poison, double %1155, i64 0
  %1176 = insertelement <2 x double> %1175, double %1153, i64 1
  %1177 = insertelement <2 x double> poison, double %1151, i64 0
  %1178 = insertelement <2 x double> %1177, double %1149, i64 1
  %1179 = insertelement <2 x double> poison, double %1147, i64 0
  %1180 = insertelement <2 x double> %1179, double %1144, i64 1
  br i1 %1173, label %1126, label %1181

1181:                                             ; preds = %1126, %1088, %1085
  %1182 = phi i32 [ 0, %1085 ], [ 0, %1088 ], [ %1171, %1126 ]
  %1183 = phi i32 [ %1082, %1085 ], [ %1082, %1088 ], [ %1174, %1126 ]
  %1184 = icmp slt i32 %1183, %1083
  br i1 %1184, label %1185, label %1190

1185:                                             ; preds = %1181
  %1186 = sext i32 %1183 to i64
  %1187 = sext i32 %1083 to i64
  %1188 = extractelement <2 x double> %694, i64 0
  %1189 = extractelement <2 x double> %694, i64 1
  br label %1195

1190:                                             ; preds = %1218, %1181
  %1191 = phi i32 [ %1182, %1181 ], [ %1219, %1218 ]
  %1192 = icmp sgt i32 %1191, 0
  br i1 %1192, label %1193, label %1244

1193:                                             ; preds = %1190
  %1194 = zext i32 %1191 to i64
  br label %1222

1195:                                             ; preds = %1185, %1218
  %1196 = phi i64 [ %1186, %1185 ], [ %1220, %1218 ]
  %1197 = phi i32 [ %1182, %1185 ], [ %1219, %1218 ]
  %1198 = getelementptr inbounds i16, ptr %1081, i64 %1196
  %1199 = load i16, ptr %1198, align 2, !tbaa !45
  %1200 = zext i16 %1199 to i64
  %1201 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1200
  %1202 = load double, ptr %1201, align 8, !tbaa !69
  %1203 = getelementptr inbounds %class.Vector, ptr %1201, i64 0, i32 1
  %1204 = load double, ptr %1203, align 8, !tbaa !68
  %1205 = getelementptr inbounds %class.Vector, ptr %1201, i64 0, i32 2
  %1206 = load double, ptr %1205, align 8, !tbaa !50
  %1207 = fsub double %1188, %1202
  %1208 = fmul double %1207, %1207
  %1209 = fsub double %1189, %1204
  %1210 = tail call double @llvm.fmuladd.f64(double %1209, double %1209, double %1208)
  %1211 = fsub double %697, %1206
  %1212 = tail call double @llvm.fmuladd.f64(double %1211, double %1211, double %1210)
  %1213 = fcmp ugt double %1212, %27
  br i1 %1213, label %1218, label %1214

1214:                                             ; preds = %1195
  %1215 = add nsw i32 %1197, 1
  %1216 = sext i32 %1197 to i64
  %1217 = getelementptr inbounds i16, ptr %286, i64 %1216
  store i16 %1199, ptr %1217, align 2, !tbaa !45
  br label %1218

1218:                                             ; preds = %1214, %1195
  %1219 = phi i32 [ %1215, %1214 ], [ %1197, %1195 ]
  %1220 = add nsw i64 %1196, 1
  %1221 = icmp eq i64 %1220, %1187
  br i1 %1221, label %1190, label %1195

1222:                                             ; preds = %1193, %1239
  %1223 = phi i64 [ 0, %1193 ], [ %1242, %1239 ]
  %1224 = phi ptr [ %1080, %1193 ], [ %1241, %1239 ]
  %1225 = getelementptr inbounds i16, ptr %286, i64 %1223
  %1226 = load i16, ptr %1225, align 2, !tbaa !45
  %1227 = zext i16 %1226 to i64
  %1228 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1227, i32 4
  %1229 = load i8, ptr %1228, align 1
  %1230 = and i8 %1229, 7
  store i16 %1226, ptr %1224, align 2, !tbaa !45
  %1231 = getelementptr inbounds i16, ptr %1224, i64 1
  %1232 = insertelement <2 x i16> poison, i16 %1226, i64 0
  %1233 = shufflevector <2 x i16> %1232, <2 x i16> poison, <2 x i32> zeroinitializer
  %1234 = add <2 x i16> %1233, <i16 1, i16 2>
  store <2 x i16> %1234, ptr %1231, align 2, !tbaa !45
  %1235 = icmp ult i8 %1230, 4
  br i1 %1235, label %1239, label %1236

1236:                                             ; preds = %1222
  %1237 = add <2 x i16> %1233, <i16 3, i16 4>
  %1238 = getelementptr inbounds i16, ptr %1224, i64 3
  store <2 x i16> %1237, ptr %1238, align 2, !tbaa !45
  br label %1239

1239:                                             ; preds = %1236, %1222
  %1240 = zext i8 %1230 to i64
  %1241 = getelementptr inbounds i16, ptr %1224, i64 %1240
  %1242 = add nuw nsw i64 %1223, 1
  %1243 = icmp eq i64 %1242, %1194
  br i1 %1243, label %1244, label %1222

1244:                                             ; preds = %1239, %1190, %1077
  %1245 = phi ptr [ %1080, %1077 ], [ %1080, %1190 ], [ %1241, %1239 ]
  %1246 = ptrtoint ptr %1245 to i64
  %1247 = sub i64 %1246, %643
  %1248 = lshr exact i64 %1247, 1
  %1249 = trunc i64 %1248 to i32
  %1250 = icmp eq i32 %1249, 0
  br i1 %1250, label %1262, label %1251

1251:                                             ; preds = %1244
  %1252 = shl i64 %1247, 31
  %1253 = add i64 %1252, -4294967296
  %1254 = ashr i64 %1253, 32
  %1255 = getelementptr inbounds i16, ptr %424, i64 %1254
  %1256 = load i16, ptr %1255, align 2, !tbaa !45
  %1257 = ashr i64 %1252, 32
  %1258 = getelementptr inbounds i16, ptr %424, i64 %1257
  store i16 %1256, ptr %1258, align 2, !tbaa !45
  br label %1262

1259:                                             ; preds = %958
  %1260 = add nsw i32 %674, 1
  %1261 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1262

1262:                                             ; preds = %1244, %1251, %1259
  %1263 = phi i32 [ %1261, %1259 ], [ %967, %1251 ], [ %967, %1244 ]
  %1264 = phi i32 [ %1260, %1259 ], [ 0, %1251 ], [ 0, %1244 ]
  %1265 = phi i32 [ %673, %1259 ], [ %1249, %1251 ], [ 0, %1244 ]
  %1266 = phi i32 [ %672, %1259 ], [ %1008, %1251 ], [ %1008, %1244 ]
  %1267 = phi i32 [ %671, %1259 ], [ %1009, %1251 ], [ %1009, %1244 ]
  %1268 = icmp eq i32 %1263, 0
  br i1 %1268, label %1273, label %1269

1269:                                             ; preds = %1262
  %1270 = load i32, ptr %678, align 4
  %1271 = and i32 %1270, 1073741824
  %1272 = icmp ne i32 %1271, 0
  br label %1273

1273:                                             ; preds = %1269, %1262
  %1274 = phi i1 [ false, %1262 ], [ %1272, %1269 ]
  %1275 = load i32, ptr %17, align 8, !tbaa !19
  %1276 = add nsw i32 %644, %1275
  %1277 = load i32, ptr %645, align 4, !tbaa !70
  %1278 = icmp sgt i32 %1277, %1276
  br i1 %1278, label %1294, label %1279

1279:                                             ; preds = %1273, %1279
  %1280 = phi i32 [ %1282, %1279 ], [ %1277, %1273 ]
  %1281 = ashr i32 %1280, 1
  %1282 = add nsw i32 %1281, %1280
  %1283 = icmp sgt i32 %1282, %1276
  br i1 %1283, label %1284, label %1279

1284:                                             ; preds = %1279
  %1285 = sext i32 %1282 to i64
  %1286 = icmp slt i32 %1282, 0
  %1287 = shl nsw i64 %1285, 1
  %1288 = select i1 %1286, i64 -1, i64 %1287
  %1289 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1288) #9
  %1290 = load ptr, ptr %12, align 8, !tbaa !47
  %1291 = sext i32 %1275 to i64
  %1292 = shl nsw i64 %1291, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1289, ptr align 2 %1290, i64 %1292, i1 false)
  %1293 = icmp eq ptr %1290, null
  br i1 %1293, label %1298, label %1296

1294:                                             ; preds = %1273
  %1295 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1300

1296:                                             ; preds = %1284
  tail call void @_ZdaPv(ptr noundef nonnull %1290) #10
  %1297 = load i32, ptr %17, align 8, !tbaa !19
  br label %1298

1298:                                             ; preds = %1296, %1284
  %1299 = phi i32 [ %1297, %1296 ], [ %1275, %1284 ]
  store ptr %1289, ptr %12, align 8, !tbaa !47
  store i32 %1282, ptr %645, align 4, !tbaa !70
  br label %1300

1300:                                             ; preds = %1294, %1298
  %1301 = phi i32 [ %1275, %1294 ], [ %1299, %1298 ]
  %1302 = phi ptr [ %1295, %1294 ], [ %1289, %1298 ]
  %1303 = ptrtoint ptr %1302 to i64
  %1304 = add nsw i32 %1301, 1
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds i16, ptr %1302, i64 %1305
  %1307 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1308 = icmp eq i32 %1307, 0
  br i1 %1308, label %1489, label %1309

1309:                                             ; preds = %1300
  %1310 = load i8, ptr %698, align 2, !tbaa !52
  %1311 = zext i8 %1310 to i32
  %1312 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1313 = icmp eq i32 %1312, 0
  br i1 %1313, label %1368, label %1314

1314:                                             ; preds = %1309
  %1315 = icmp eq i8 %1310, 1
  br i1 %1315, label %1316, label %2494

1316:                                             ; preds = %1314
  %1317 = icmp slt i32 %1264, %1265
  br i1 %1317, label %1318, label %1429

1318:                                             ; preds = %1316
  %1319 = sext i32 %1264 to i64
  %1320 = sext i32 %1265 to i64
  %1321 = sub nsw i64 %1320, %1319
  %1322 = xor i64 %1319, -1
  %1323 = and i64 %1321, 1
  %1324 = icmp eq i64 %1323, 0
  br i1 %1324, label %1336, label %1325

1325:                                             ; preds = %1318
  %1326 = getelementptr inbounds i16, ptr %424, i64 %1319
  %1327 = load i16, ptr %1326, align 2, !tbaa !45
  %1328 = zext i16 %1327 to i64
  %1329 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1328, i32 3
  %1330 = load i8, ptr %1329, align 2, !tbaa !52
  %1331 = icmp eq i8 %1330, 1
  br i1 %1331, label %1332, label %1333

1332:                                             ; preds = %1325
  store i16 %1327, ptr %470, align 2, !tbaa !45
  br label %1333

1333:                                             ; preds = %1332, %1325
  %1334 = phi ptr [ %662, %1332 ], [ %470, %1325 ]
  %1335 = add nsw i64 %1319, 1
  br label %1336

1336:                                             ; preds = %1333, %1318
  %1337 = phi ptr [ undef, %1318 ], [ %1334, %1333 ]
  %1338 = phi i64 [ %1319, %1318 ], [ %1335, %1333 ]
  %1339 = phi ptr [ %470, %1318 ], [ %1334, %1333 ]
  %1340 = sub nsw i64 0, %1320
  %1341 = icmp eq i64 %1322, %1340
  br i1 %1341, label %1429, label %1342

1342:                                             ; preds = %1336, %1364
  %1343 = phi i64 [ %1366, %1364 ], [ %1338, %1336 ]
  %1344 = phi ptr [ %1365, %1364 ], [ %1339, %1336 ]
  %1345 = getelementptr inbounds i16, ptr %424, i64 %1343
  %1346 = load i16, ptr %1345, align 2, !tbaa !45
  %1347 = zext i16 %1346 to i64
  %1348 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1347, i32 3
  %1349 = load i8, ptr %1348, align 2, !tbaa !52
  %1350 = icmp eq i8 %1349, 1
  br i1 %1350, label %1351, label %1353

1351:                                             ; preds = %1342
  %1352 = getelementptr inbounds i16, ptr %1344, i64 1
  store i16 %1346, ptr %1344, align 2, !tbaa !45
  br label %1353

1353:                                             ; preds = %1351, %1342
  %1354 = phi ptr [ %1352, %1351 ], [ %1344, %1342 ]
  %1355 = add nsw i64 %1343, 1
  %1356 = getelementptr inbounds i16, ptr %424, i64 %1355
  %1357 = load i16, ptr %1356, align 2, !tbaa !45
  %1358 = zext i16 %1357 to i64
  %1359 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1358, i32 3
  %1360 = load i8, ptr %1359, align 2, !tbaa !52
  %1361 = icmp eq i8 %1360, 1
  br i1 %1361, label %1362, label %1364

1362:                                             ; preds = %1353
  %1363 = getelementptr inbounds i16, ptr %1354, i64 1
  store i16 %1357, ptr %1354, align 2, !tbaa !45
  br label %1364

1364:                                             ; preds = %1362, %1353
  %1365 = phi ptr [ %1363, %1362 ], [ %1354, %1353 ]
  %1366 = add nsw i64 %1343, 2
  %1367 = icmp eq i64 %1366, %1320
  br i1 %1367, label %1429, label %1342

1368:                                             ; preds = %1309
  %1369 = add i8 %1310, -3
  %1370 = icmp ult i8 %1369, -2
  br i1 %1370, label %2494, label %1371

1371:                                             ; preds = %1368
  %1372 = icmp slt i32 %1264, %1265
  br i1 %1372, label %1373, label %1429

1373:                                             ; preds = %1371
  %1374 = sext i32 %1264 to i64
  %1375 = sext i32 %1265 to i64
  %1376 = sub nsw i64 %1375, %1374
  %1377 = xor i64 %1374, -1
  %1378 = and i64 %1376, 1
  %1379 = icmp eq i64 %1378, 0
  br i1 %1379, label %1393, label %1380

1380:                                             ; preds = %1373
  %1381 = getelementptr inbounds i16, ptr %424, i64 %1374
  %1382 = load i16, ptr %1381, align 2, !tbaa !45
  %1383 = zext i16 %1382 to i64
  %1384 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1383, i32 3
  %1385 = load i8, ptr %1384, align 2, !tbaa !52
  %1386 = zext i8 %1385 to i32
  %1387 = add nuw nsw i32 %1386, %1311
  %1388 = icmp eq i32 %1387, 3
  br i1 %1388, label %1389, label %1390

1389:                                             ; preds = %1380
  store i16 %1382, ptr %470, align 2, !tbaa !45
  br label %1390

1390:                                             ; preds = %1389, %1380
  %1391 = phi ptr [ %663, %1389 ], [ %470, %1380 ]
  %1392 = add nsw i64 %1374, 1
  br label %1393

1393:                                             ; preds = %1390, %1373
  %1394 = phi ptr [ undef, %1373 ], [ %1391, %1390 ]
  %1395 = phi i64 [ %1374, %1373 ], [ %1392, %1390 ]
  %1396 = phi ptr [ %470, %1373 ], [ %1391, %1390 ]
  %1397 = sub nsw i64 0, %1375
  %1398 = icmp eq i64 %1377, %1397
  br i1 %1398, label %1429, label %1399

1399:                                             ; preds = %1393, %1425
  %1400 = phi i64 [ %1427, %1425 ], [ %1395, %1393 ]
  %1401 = phi ptr [ %1426, %1425 ], [ %1396, %1393 ]
  %1402 = getelementptr inbounds i16, ptr %424, i64 %1400
  %1403 = load i16, ptr %1402, align 2, !tbaa !45
  %1404 = zext i16 %1403 to i64
  %1405 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1404, i32 3
  %1406 = load i8, ptr %1405, align 2, !tbaa !52
  %1407 = zext i8 %1406 to i32
  %1408 = add nuw nsw i32 %1407, %1311
  %1409 = icmp eq i32 %1408, 3
  br i1 %1409, label %1410, label %1412

1410:                                             ; preds = %1399
  %1411 = getelementptr inbounds i16, ptr %1401, i64 1
  store i16 %1403, ptr %1401, align 2, !tbaa !45
  br label %1412

1412:                                             ; preds = %1410, %1399
  %1413 = phi ptr [ %1411, %1410 ], [ %1401, %1399 ]
  %1414 = add nsw i64 %1400, 1
  %1415 = getelementptr inbounds i16, ptr %424, i64 %1414
  %1416 = load i16, ptr %1415, align 2, !tbaa !45
  %1417 = zext i16 %1416 to i64
  %1418 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1417, i32 3
  %1419 = load i8, ptr %1418, align 2, !tbaa !52
  %1420 = zext i8 %1419 to i32
  %1421 = add nuw nsw i32 %1420, %1311
  %1422 = icmp eq i32 %1421, 3
  br i1 %1422, label %1423, label %1425

1423:                                             ; preds = %1412
  %1424 = getelementptr inbounds i16, ptr %1413, i64 1
  store i16 %1416, ptr %1413, align 2, !tbaa !45
  br label %1425

1425:                                             ; preds = %1423, %1412
  %1426 = phi ptr [ %1424, %1423 ], [ %1413, %1412 ]
  %1427 = add nsw i64 %1400, 2
  %1428 = icmp eq i64 %1427, %1375
  br i1 %1428, label %1429, label %1399

1429:                                             ; preds = %1336, %1364, %1393, %1425, %1316, %1371
  %1430 = phi ptr [ %470, %1371 ], [ %470, %1316 ], [ %1394, %1393 ], [ %1426, %1425 ], [ %1337, %1336 ], [ %1365, %1364 ]
  %1431 = ptrtoint ptr %1430 to i64
  %1432 = sub i64 %1431, %646
  %1433 = lshr exact i64 %1432, 1
  %1434 = trunc i64 %1433 to i32
  %1435 = icmp sgt i32 %1434, 0
  br i1 %1435, label %1436, label %1710

1436:                                             ; preds = %1429
  %1437 = and i64 %1433, 4294967295
  %1438 = extractelement <2 x double> %694, i64 0
  %1439 = extractelement <2 x double> %694, i64 1
  br label %1440

1440:                                             ; preds = %1436, %1484
  %1441 = phi i64 [ 0, %1436 ], [ %1487, %1484 ]
  %1442 = phi ptr [ %470, %1436 ], [ %1486, %1484 ]
  %1443 = phi ptr [ %1306, %1436 ], [ %1485, %1484 ]
  %1444 = getelementptr inbounds i16, ptr %470, i64 %1441
  %1445 = load i16, ptr %1444, align 2, !tbaa !45
  %1446 = zext i16 %1445 to i64
  %1447 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1446
  %1448 = load double, ptr %1447, align 8, !tbaa !69
  %1449 = fsub double %1438, %1448
  %1450 = fmul double %1449, %1449
  %1451 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 1
  %1452 = load double, ptr %1451, align 8, !tbaa !68
  %1453 = fsub double %1439, %1452
  %1454 = tail call double @llvm.fmuladd.f64(double %1453, double %1453, double %1450)
  %1455 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 2
  %1456 = load double, ptr %1455, align 8, !tbaa !50
  %1457 = fsub double %697, %1456
  %1458 = tail call double @llvm.fmuladd.f64(double %1457, double %1457, double %1454)
  br i1 %1274, label %1459, label %1466

1459:                                             ; preds = %1440
  %1460 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1446
  %1461 = load i32, ptr %1460, align 4
  %1462 = and i32 %1461, 1073741824
  %1463 = icmp ne i32 %1462, 0
  %1464 = fcmp ugt double %1458, %24
  %1465 = select i1 %1463, i1 true, i1 %1464
  br i1 %1465, label %1484, label %1471

1466:                                             ; preds = %1440
  %1467 = fcmp ugt double %1458, %24
  br i1 %1467, label %1484, label %1468

1468:                                             ; preds = %1466
  %1469 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1446
  %1470 = load i32, ptr %1469, align 4
  br label %1471

1471:                                             ; preds = %1468, %1459
  %1472 = phi i32 [ %1470, %1468 ], [ %1461, %1459 ]
  %1473 = shl i32 %1472, 2
  %1474 = ashr exact i32 %1473, 2
  %1475 = icmp slt i32 %1474, %722
  %1476 = icmp sgt i32 %1474, %724
  %1477 = select i1 %1475, i1 true, i1 %1476
  %1478 = select i1 %1477, ptr %1443, ptr %1442
  %1479 = zext i1 %1477 to i64
  %1480 = getelementptr inbounds i16, ptr %1443, i64 %1479
  %1481 = xor i1 %1477, true
  %1482 = zext i1 %1481 to i64
  %1483 = getelementptr inbounds i16, ptr %1442, i64 %1482
  store i16 %1445, ptr %1478, align 2, !tbaa !45
  br label %1484

1484:                                             ; preds = %1471, %1466, %1459
  %1485 = phi ptr [ %1443, %1459 ], [ %1443, %1466 ], [ %1480, %1471 ]
  %1486 = phi ptr [ %1442, %1459 ], [ %1442, %1466 ], [ %1483, %1471 ]
  %1487 = add nuw nsw i64 %1441, 1
  %1488 = icmp eq i64 %1487, %1437
  br i1 %1488, label %1710, label %1440

1489:                                             ; preds = %1300
  %1490 = icmp slt i32 %1264, %1265
  br i1 %1274, label %1491, label %1539

1491:                                             ; preds = %1489
  br i1 %1490, label %1492, label %1710

1492:                                             ; preds = %1491
  %1493 = sext i32 %1264 to i64
  %1494 = sext i32 %1265 to i64
  %1495 = extractelement <2 x double> %694, i64 0
  %1496 = extractelement <2 x double> %694, i64 1
  br label %1497

1497:                                             ; preds = %1492, %1534
  %1498 = phi i64 [ %1493, %1492 ], [ %1537, %1534 ]
  %1499 = phi ptr [ %470, %1492 ], [ %1536, %1534 ]
  %1500 = phi ptr [ %1306, %1492 ], [ %1535, %1534 ]
  %1501 = getelementptr inbounds i16, ptr %424, i64 %1498
  %1502 = load i16, ptr %1501, align 2, !tbaa !45
  %1503 = zext i16 %1502 to i64
  %1504 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1503
  %1505 = load i32, ptr %1504, align 4
  %1506 = and i32 %1505, 1073741824
  %1507 = icmp eq i32 %1506, 0
  br i1 %1507, label %1508, label %1534

1508:                                             ; preds = %1497
  %1509 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1503
  %1510 = getelementptr inbounds %class.Vector, ptr %1509, i64 0, i32 2
  %1511 = load double, ptr %1510, align 8, !tbaa !50
  %1512 = fsub double %697, %1511
  %1513 = getelementptr inbounds %class.Vector, ptr %1509, i64 0, i32 1
  %1514 = load double, ptr %1513, align 8, !tbaa !68
  %1515 = fsub double %1496, %1514
  %1516 = load double, ptr %1509, align 8, !tbaa !69
  %1517 = fsub double %1495, %1516
  %1518 = fmul double %1517, %1517
  %1519 = tail call double @llvm.fmuladd.f64(double %1515, double %1515, double %1518)
  %1520 = tail call double @llvm.fmuladd.f64(double %1512, double %1512, double %1519)
  %1521 = fcmp ugt double %1520, %24
  br i1 %1521, label %1534, label %1522

1522:                                             ; preds = %1508
  %1523 = shl i32 %1505, 2
  %1524 = ashr exact i32 %1523, 2
  %1525 = icmp slt i32 %1524, %722
  %1526 = icmp sgt i32 %1524, %724
  %1527 = select i1 %1525, i1 true, i1 %1526
  %1528 = select i1 %1527, ptr %1500, ptr %1499
  %1529 = zext i1 %1527 to i64
  %1530 = getelementptr inbounds i16, ptr %1500, i64 %1529
  %1531 = xor i1 %1527, true
  %1532 = zext i1 %1531 to i64
  %1533 = getelementptr inbounds i16, ptr %1499, i64 %1532
  store i16 %1502, ptr %1528, align 2, !tbaa !45
  br label %1534

1534:                                             ; preds = %1522, %1508, %1497
  %1535 = phi ptr [ %1500, %1497 ], [ %1500, %1508 ], [ %1530, %1522 ]
  %1536 = phi ptr [ %1499, %1497 ], [ %1499, %1508 ], [ %1533, %1522 ]
  %1537 = add nsw i64 %1498, 1
  %1538 = icmp eq i64 %1537, %1494
  br i1 %1538, label %1710, label %1497

1539:                                             ; preds = %1489
  br i1 %1490, label %1540, label %1710

1540:                                             ; preds = %1539
  %1541 = sub nsw i32 %1265, %1264
  %1542 = icmp sgt i32 %1541, 6
  br i1 %1542, label %1543, label %1661

1543:                                             ; preds = %1540
  %1544 = add nsw i32 %1265, -2
  %1545 = add nsw i32 %1264, 2
  %1546 = icmp slt i32 %1545, %1544
  br i1 %1546, label %1547, label %1661

1547:                                             ; preds = %1543
  %1548 = sext i32 %1264 to i64
  %1549 = getelementptr inbounds i16, ptr %424, i64 %1548
  %1550 = load i16, ptr %1549, align 2, !tbaa !45
  %1551 = zext i16 %1550 to i64
  %1552 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1551
  %1553 = load i32, ptr %1552, align 4
  %1554 = add nsw i32 %1264, 1
  %1555 = sext i32 %1554 to i64
  %1556 = getelementptr inbounds i16, ptr %424, i64 %1555
  %1557 = load i16, ptr %1556, align 2, !tbaa !45
  %1558 = zext i16 %1557 to i64
  %1559 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1558
  %1560 = getelementptr inbounds %class.Vector, ptr %1559, i64 0, i32 2
  %1561 = load double, ptr %1560, align 8, !tbaa !50
  %1562 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1551
  %1563 = getelementptr inbounds %class.Vector, ptr %1562, i64 0, i32 2
  %1564 = load double, ptr %1563, align 8, !tbaa !50
  %1565 = getelementptr inbounds %class.Vector, ptr %1559, i64 0, i32 1
  %1566 = load double, ptr %1565, align 8, !tbaa !68
  %1567 = getelementptr inbounds %class.Vector, ptr %1562, i64 0, i32 1
  %1568 = load double, ptr %1567, align 8, !tbaa !68
  %1569 = load double, ptr %1559, align 8, !tbaa !69
  %1570 = load double, ptr %1562, align 8, !tbaa !69
  %1571 = sext i32 %1545 to i64
  %1572 = sext i32 %1544 to i64
  %1573 = extractelement <2 x double> %694, i64 0
  %1574 = extractelement <2 x double> %694, i64 1
  br label %1575

1575:                                             ; preds = %1547, %1655
  %1576 = phi i64 [ %1571, %1547 ], [ %1658, %1655 ]
  %1577 = phi i64 [ %1558, %1547 ], [ %1615, %1655 ]
  %1578 = phi i32 [ %1553, %1547 ], [ %1643, %1655 ]
  %1579 = phi ptr [ %470, %1547 ], [ %1657, %1655 ]
  %1580 = phi ptr [ %1306, %1547 ], [ %1656, %1655 ]
  %1581 = phi i32 [ %1264, %1547 ], [ %1660, %1655 ]
  %1582 = phi i16 [ %1550, %1547 ], [ %1607, %1655 ]
  %1583 = phi i16 [ %1557, %1547 ], [ %1611, %1655 ]
  %1584 = phi double [ %1570, %1547 ], [ %1614, %1655 ]
  %1585 = phi double [ %1569, %1547 ], [ %1617, %1655 ]
  %1586 = phi double [ %1568, %1547 ], [ %1619, %1655 ]
  %1587 = phi double [ %1566, %1547 ], [ %1621, %1655 ]
  %1588 = phi double [ %1564, %1547 ], [ %1623, %1655 ]
  %1589 = phi double [ %1561, %1547 ], [ %1625, %1655 ]
  %1590 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1577
  %1591 = load i32, ptr %1590, align 4
  %1592 = shl i32 %1591, 2
  %1593 = ashr exact i32 %1592, 2
  %1594 = fsub double %1573, %1584
  %1595 = fsub double %1573, %1585
  %1596 = fmul double %1594, %1594
  %1597 = fmul double %1595, %1595
  %1598 = fsub double %1574, %1586
  %1599 = fsub double %1574, %1587
  %1600 = tail call double @llvm.fmuladd.f64(double %1598, double %1598, double %1596)
  %1601 = tail call double @llvm.fmuladd.f64(double %1599, double %1599, double %1597)
  %1602 = fsub double %697, %1588
  %1603 = fsub double %697, %1589
  %1604 = tail call double @llvm.fmuladd.f64(double %1602, double %1602, double %1600)
  %1605 = tail call double @llvm.fmuladd.f64(double %1603, double %1603, double %1601)
  %1606 = getelementptr inbounds i16, ptr %424, i64 %1576
  %1607 = load i16, ptr %1606, align 2, !tbaa !45
  %1608 = add nsw i32 %1581, 3
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i16, ptr %424, i64 %1609
  %1611 = load i16, ptr %1610, align 2, !tbaa !45
  %1612 = zext i16 %1607 to i64
  %1613 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1612
  %1614 = load double, ptr %1613, align 8, !tbaa !69
  %1615 = zext i16 %1611 to i64
  %1616 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1615
  %1617 = load double, ptr %1616, align 8, !tbaa !69
  %1618 = getelementptr inbounds %class.Vector, ptr %1613, i64 0, i32 1
  %1619 = load double, ptr %1618, align 8, !tbaa !68
  %1620 = getelementptr inbounds %class.Vector, ptr %1616, i64 0, i32 1
  %1621 = load double, ptr %1620, align 8, !tbaa !68
  %1622 = getelementptr inbounds %class.Vector, ptr %1613, i64 0, i32 2
  %1623 = load double, ptr %1622, align 8, !tbaa !50
  %1624 = getelementptr inbounds %class.Vector, ptr %1616, i64 0, i32 2
  %1625 = load double, ptr %1624, align 8, !tbaa !50
  %1626 = fcmp ugt double %1604, %24
  br i1 %1626, label %1639, label %1627

1627:                                             ; preds = %1575
  %1628 = shl i32 %1578, 2
  %1629 = ashr exact i32 %1628, 2
  %1630 = icmp slt i32 %1629, %722
  %1631 = icmp sgt i32 %1629, %724
  %1632 = select i1 %1630, i1 true, i1 %1631
  %1633 = select i1 %1632, ptr %1580, ptr %1579
  %1634 = zext i1 %1632 to i64
  %1635 = getelementptr inbounds i16, ptr %1580, i64 %1634
  %1636 = xor i1 %1632, true
  %1637 = zext i1 %1636 to i64
  %1638 = getelementptr inbounds i16, ptr %1579, i64 %1637
  store i16 %1582, ptr %1633, align 2, !tbaa !45
  br label %1639

1639:                                             ; preds = %1627, %1575
  %1640 = phi ptr [ %1580, %1575 ], [ %1635, %1627 ]
  %1641 = phi ptr [ %1579, %1575 ], [ %1638, %1627 ]
  %1642 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1612
  %1643 = load i32, ptr %1642, align 4
  %1644 = fcmp ugt double %1605, %24
  br i1 %1644, label %1655, label %1645

1645:                                             ; preds = %1639
  %1646 = icmp slt i32 %1593, %722
  %1647 = icmp sgt i32 %1593, %724
  %1648 = select i1 %1646, i1 true, i1 %1647
  %1649 = select i1 %1648, ptr %1640, ptr %1641
  %1650 = zext i1 %1648 to i64
  %1651 = getelementptr inbounds i16, ptr %1640, i64 %1650
  %1652 = xor i1 %1648, true
  %1653 = zext i1 %1652 to i64
  %1654 = getelementptr inbounds i16, ptr %1641, i64 %1653
  store i16 %1583, ptr %1649, align 2, !tbaa !45
  br label %1655

1655:                                             ; preds = %1645, %1639
  %1656 = phi ptr [ %1640, %1639 ], [ %1651, %1645 ]
  %1657 = phi ptr [ %1641, %1639 ], [ %1654, %1645 ]
  %1658 = add nsw i64 %1576, 2
  %1659 = icmp slt i64 %1658, %1572
  %1660 = trunc i64 %1576 to i32
  br i1 %1659, label %1575, label %1661

1661:                                             ; preds = %1655, %1543, %1540
  %1662 = phi i32 [ %1264, %1540 ], [ %1264, %1543 ], [ %1660, %1655 ]
  %1663 = phi ptr [ %1306, %1540 ], [ %1306, %1543 ], [ %1656, %1655 ]
  %1664 = phi ptr [ %470, %1540 ], [ %470, %1543 ], [ %1657, %1655 ]
  %1665 = icmp slt i32 %1662, %1265
  br i1 %1665, label %1666, label %1710

1666:                                             ; preds = %1661
  %1667 = sext i32 %1662 to i64
  %1668 = sext i32 %1265 to i64
  %1669 = extractelement <2 x double> %694, i64 0
  %1670 = extractelement <2 x double> %694, i64 1
  br label %1671

1671:                                             ; preds = %1666, %1705
  %1672 = phi i64 [ %1667, %1666 ], [ %1708, %1705 ]
  %1673 = phi ptr [ %1664, %1666 ], [ %1707, %1705 ]
  %1674 = phi ptr [ %1663, %1666 ], [ %1706, %1705 ]
  %1675 = getelementptr inbounds i16, ptr %424, i64 %1672
  %1676 = load i16, ptr %1675, align 2, !tbaa !45
  %1677 = zext i16 %1676 to i64
  %1678 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1677
  %1679 = load double, ptr %1678, align 8, !tbaa !69
  %1680 = getelementptr inbounds %class.Vector, ptr %1678, i64 0, i32 1
  %1681 = load double, ptr %1680, align 8, !tbaa !68
  %1682 = getelementptr inbounds %class.Vector, ptr %1678, i64 0, i32 2
  %1683 = load double, ptr %1682, align 8, !tbaa !50
  %1684 = fsub double %1669, %1679
  %1685 = fmul double %1684, %1684
  %1686 = fsub double %1670, %1681
  %1687 = tail call double @llvm.fmuladd.f64(double %1686, double %1686, double %1685)
  %1688 = fsub double %697, %1683
  %1689 = tail call double @llvm.fmuladd.f64(double %1688, double %1688, double %1687)
  %1690 = fcmp ugt double %1689, %24
  br i1 %1690, label %1705, label %1691

1691:                                             ; preds = %1671
  %1692 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1677
  %1693 = load i32, ptr %1692, align 4
  %1694 = shl i32 %1693, 2
  %1695 = ashr exact i32 %1694, 2
  %1696 = icmp slt i32 %1695, %722
  %1697 = icmp sgt i32 %1695, %724
  %1698 = select i1 %1696, i1 true, i1 %1697
  %1699 = select i1 %1698, ptr %1674, ptr %1673
  %1700 = zext i1 %1698 to i64
  %1701 = getelementptr inbounds i16, ptr %1674, i64 %1700
  %1702 = xor i1 %1698, true
  %1703 = zext i1 %1702 to i64
  %1704 = getelementptr inbounds i16, ptr %1673, i64 %1703
  store i16 %1676, ptr %1699, align 2, !tbaa !45
  br label %1705

1705:                                             ; preds = %1691, %1671
  %1706 = phi ptr [ %1674, %1671 ], [ %1701, %1691 ]
  %1707 = phi ptr [ %1673, %1671 ], [ %1704, %1691 ]
  %1708 = add nsw i64 %1672, 1
  %1709 = icmp eq i64 %1708, %1668
  br i1 %1709, label %1710, label %1671

1710:                                             ; preds = %1484, %1705, %1534, %1429, %1661, %1491, %1539
  %1711 = phi ptr [ %1306, %1539 ], [ %1306, %1491 ], [ %1663, %1661 ], [ %1306, %1429 ], [ %1535, %1534 ], [ %1706, %1705 ], [ %1485, %1484 ]
  %1712 = phi ptr [ %470, %1539 ], [ %470, %1491 ], [ %1664, %1661 ], [ %470, %1429 ], [ %1536, %1534 ], [ %1707, %1705 ], [ %1486, %1484 ]
  %1713 = ptrtoint ptr %1712 to i64
  %1714 = sub i64 %1713, %646
  %1715 = lshr exact i64 %1714, 1
  %1716 = trunc i64 %1715 to i32
  %1717 = icmp sgt i32 %1716, 0
  br i1 %1717, label %1718, label %1818

1718:                                             ; preds = %1710
  %1719 = and i64 %1715, 4294967295
  %1720 = and i64 %1715, 1
  %1721 = icmp eq i64 %1719, 1
  br i1 %1721, label %1786, label %1722

1722:                                             ; preds = %1718
  %1723 = sub nsw i64 %1719, %1720
  br label %1724

1724:                                             ; preds = %1779, %1722
  %1725 = phi i64 [ 0, %1722 ], [ %1783, %1779 ]
  %1726 = phi ptr [ %1711, %1722 ], [ %1782, %1779 ]
  %1727 = phi ptr [ %332, %1722 ], [ %1781, %1779 ]
  %1728 = phi ptr [ %378, %1722 ], [ %1780, %1779 ]
  %1729 = phi i64 [ 0, %1722 ], [ %1784, %1779 ]
  %1730 = getelementptr inbounds i16, ptr %470, i64 %1725
  %1731 = load i16, ptr %1730, align 2, !tbaa !45
  %1732 = zext i16 %1731 to i64
  %1733 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1732
  %1734 = load i32, ptr %1733, align 4
  %1735 = shl i32 %1734, 2
  %1736 = ashr exact i32 %1735, 2
  %1737 = sext i32 %1736 to i64
  %1738 = getelementptr inbounds i8, ptr %959, i64 %1737
  %1739 = load i8, ptr %1738, align 1, !tbaa !59
  %1740 = sext i8 %1739 to i32
  switch i32 %1740, label %1752 [
    i32 0, label %1741
    i32 1, label %1743
    i32 2, label %1745
  ]

1741:                                             ; preds = %1724
  %1742 = getelementptr inbounds i16, ptr %1726, i64 1
  br label %1747

1743:                                             ; preds = %1724
  %1744 = getelementptr inbounds i16, ptr %1727, i64 1
  br label %1747

1745:                                             ; preds = %1724
  %1746 = getelementptr inbounds i16, ptr %1728, i64 1
  br label %1747

1747:                                             ; preds = %1741, %1743, %1745
  %1748 = phi ptr [ %1728, %1745 ], [ %1727, %1743 ], [ %1726, %1741 ]
  %1749 = phi ptr [ %1746, %1745 ], [ %1728, %1743 ], [ %1728, %1741 ]
  %1750 = phi ptr [ %1727, %1745 ], [ %1744, %1743 ], [ %1727, %1741 ]
  %1751 = phi ptr [ %1726, %1745 ], [ %1726, %1743 ], [ %1742, %1741 ]
  store i16 %1731, ptr %1748, align 2, !tbaa !45
  br label %1752

1752:                                             ; preds = %1747, %1724
  %1753 = phi ptr [ %1728, %1724 ], [ %1749, %1747 ]
  %1754 = phi ptr [ %1727, %1724 ], [ %1750, %1747 ]
  %1755 = phi ptr [ %1726, %1724 ], [ %1751, %1747 ]
  %1756 = or i64 %1725, 1
  %1757 = getelementptr inbounds i16, ptr %470, i64 %1756
  %1758 = load i16, ptr %1757, align 2, !tbaa !45
  %1759 = zext i16 %1758 to i64
  %1760 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1759
  %1761 = load i32, ptr %1760, align 4
  %1762 = shl i32 %1761, 2
  %1763 = ashr exact i32 %1762, 2
  %1764 = sext i32 %1763 to i64
  %1765 = getelementptr inbounds i8, ptr %959, i64 %1764
  %1766 = load i8, ptr %1765, align 1, !tbaa !59
  %1767 = sext i8 %1766 to i32
  switch i32 %1767, label %1779 [
    i32 0, label %1772
    i32 1, label %1770
    i32 2, label %1768
  ]

1768:                                             ; preds = %1752
  %1769 = getelementptr inbounds i16, ptr %1753, i64 1
  br label %1774

1770:                                             ; preds = %1752
  %1771 = getelementptr inbounds i16, ptr %1754, i64 1
  br label %1774

1772:                                             ; preds = %1752
  %1773 = getelementptr inbounds i16, ptr %1755, i64 1
  br label %1774

1774:                                             ; preds = %1772, %1770, %1768
  %1775 = phi ptr [ %1753, %1768 ], [ %1754, %1770 ], [ %1755, %1772 ]
  %1776 = phi ptr [ %1769, %1768 ], [ %1753, %1770 ], [ %1753, %1772 ]
  %1777 = phi ptr [ %1754, %1768 ], [ %1771, %1770 ], [ %1754, %1772 ]
  %1778 = phi ptr [ %1755, %1768 ], [ %1755, %1770 ], [ %1773, %1772 ]
  store i16 %1758, ptr %1775, align 2, !tbaa !45
  br label %1779

1779:                                             ; preds = %1774, %1752
  %1780 = phi ptr [ %1753, %1752 ], [ %1776, %1774 ]
  %1781 = phi ptr [ %1754, %1752 ], [ %1777, %1774 ]
  %1782 = phi ptr [ %1755, %1752 ], [ %1778, %1774 ]
  %1783 = add nuw nsw i64 %1725, 2
  %1784 = add i64 %1729, 2
  %1785 = icmp eq i64 %1784, %1723
  br i1 %1785, label %1786, label %1724

1786:                                             ; preds = %1779, %1718
  %1787 = phi ptr [ undef, %1718 ], [ %1780, %1779 ]
  %1788 = phi ptr [ undef, %1718 ], [ %1781, %1779 ]
  %1789 = phi ptr [ undef, %1718 ], [ %1782, %1779 ]
  %1790 = phi i64 [ 0, %1718 ], [ %1783, %1779 ]
  %1791 = phi ptr [ %1711, %1718 ], [ %1782, %1779 ]
  %1792 = phi ptr [ %332, %1718 ], [ %1781, %1779 ]
  %1793 = phi ptr [ %378, %1718 ], [ %1780, %1779 ]
  %1794 = icmp eq i64 %1720, 0
  br i1 %1794, label %1818, label %1795

1795:                                             ; preds = %1786
  %1796 = getelementptr inbounds i16, ptr %470, i64 %1790
  %1797 = load i16, ptr %1796, align 2, !tbaa !45
  %1798 = zext i16 %1797 to i64
  %1799 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1798
  %1800 = load i32, ptr %1799, align 4
  %1801 = shl i32 %1800, 2
  %1802 = ashr exact i32 %1801, 2
  %1803 = sext i32 %1802 to i64
  %1804 = getelementptr inbounds i8, ptr %959, i64 %1803
  %1805 = load i8, ptr %1804, align 1, !tbaa !59
  %1806 = sext i8 %1805 to i32
  switch i32 %1806, label %1818 [
    i32 0, label %1811
    i32 1, label %1809
    i32 2, label %1807
  ]

1807:                                             ; preds = %1795
  %1808 = getelementptr inbounds i16, ptr %1793, i64 1
  br label %1813

1809:                                             ; preds = %1795
  %1810 = getelementptr inbounds i16, ptr %1792, i64 1
  br label %1813

1811:                                             ; preds = %1795
  %1812 = getelementptr inbounds i16, ptr %1791, i64 1
  br label %1813

1813:                                             ; preds = %1811, %1809, %1807
  %1814 = phi ptr [ %1793, %1807 ], [ %1792, %1809 ], [ %1791, %1811 ]
  %1815 = phi ptr [ %1808, %1807 ], [ %1793, %1809 ], [ %1793, %1811 ]
  %1816 = phi ptr [ %1792, %1807 ], [ %1810, %1809 ], [ %1792, %1811 ]
  %1817 = phi ptr [ %1791, %1807 ], [ %1791, %1809 ], [ %1812, %1811 ]
  store i16 %1797, ptr %1814, align 2, !tbaa !45
  br label %1818

1818:                                             ; preds = %1786, %1813, %1795, %1710
  %1819 = phi ptr [ %378, %1710 ], [ %1787, %1786 ], [ %1793, %1795 ], [ %1815, %1813 ]
  %1820 = phi ptr [ %332, %1710 ], [ %1788, %1786 ], [ %1792, %1795 ], [ %1816, %1813 ]
  %1821 = phi ptr [ %1711, %1710 ], [ %1789, %1786 ], [ %1791, %1795 ], [ %1817, %1813 ]
  %1822 = ptrtoint ptr %1821 to i64
  %1823 = ptrtoint ptr %1306 to i64
  %1824 = sub i64 %1822, %1823
  %1825 = lshr exact i64 %1824, 1
  %1826 = trunc i64 %1825 to i32
  %1827 = icmp eq i32 %1826, 0
  %1828 = shl i64 %1824, 31
  br i1 %1827, label %1834, label %1829

1829:                                             ; preds = %1818
  %1830 = add i64 %1828, -4294967296
  %1831 = ashr i64 %1830, 32
  %1832 = getelementptr inbounds i16, ptr %1306, i64 %1831
  %1833 = load i16, ptr %1832, align 2, !tbaa !45
  br label %1834

1834:                                             ; preds = %1818, %1829
  %1835 = phi i16 [ %1833, %1829 ], [ -1, %1818 ]
  %1836 = ashr i64 %1828, 32
  %1837 = getelementptr inbounds i16, ptr %1306, i64 %1836
  store i16 %1835, ptr %1837, align 2, !tbaa !45
  %1838 = trunc i64 %1825 to i16
  %1839 = add i16 %1838, 1
  %1840 = load i32, ptr %17, align 8, !tbaa !19
  %1841 = sext i32 %1840 to i64
  %1842 = getelementptr inbounds i16, ptr %1302, i64 %1841
  store i16 %1839, ptr %1842, align 2, !tbaa !45
  %1843 = add nsw i32 %1826, 2
  %1844 = add nsw i32 %1843, %1840
  %1845 = ptrtoint ptr %1820 to i64
  %1846 = sub i64 %1845, %647
  %1847 = lshr exact i64 %1846, 1
  %1848 = trunc i64 %1847 to i32
  %1849 = add nsw i32 %1844, 1
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr i16, ptr %1302, i64 %1850
  %1852 = icmp sgt i32 %1848, 0
  br i1 %1852, label %1853, label %1943

1853:                                             ; preds = %1834
  %1854 = and i64 %1847, 4294967295
  %1855 = icmp ult i64 %1854, 8
  br i1 %1855, label %1899, label %1856

1856:                                             ; preds = %1853
  %1857 = shl nsw i64 %1850, 1
  %1858 = add i64 %1857, %1303
  %1859 = sub i64 %1858, %647
  %1860 = icmp ult i64 %1859, 128
  br i1 %1860, label %1899, label %1861

1861:                                             ; preds = %1856
  %1862 = icmp ult i64 %1854, 64
  br i1 %1862, label %1886, label %1863

1863:                                             ; preds = %1861
  %1864 = and i64 %1847, 63
  %1865 = sub nsw i64 %1854, %1864
  br label %1866

1866:                                             ; preds = %1866, %1863
  %1867 = phi i64 [ 0, %1863 ], [ %1880, %1866 ]
  %1868 = getelementptr inbounds i16, ptr %332, i64 %1867
  %1869 = load <16 x i16>, ptr %1868, align 2, !tbaa !45
  %1870 = getelementptr inbounds i16, ptr %1868, i64 16
  %1871 = load <16 x i16>, ptr %1870, align 2, !tbaa !45
  %1872 = getelementptr inbounds i16, ptr %1868, i64 32
  %1873 = load <16 x i16>, ptr %1872, align 2, !tbaa !45
  %1874 = getelementptr inbounds i16, ptr %1868, i64 48
  %1875 = load <16 x i16>, ptr %1874, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1851, i64 %1867
  store <16 x i16> %1869, ptr %1876, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1876, i64 16
  store <16 x i16> %1871, ptr %1877, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1876, i64 32
  store <16 x i16> %1873, ptr %1878, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1876, i64 48
  store <16 x i16> %1875, ptr %1879, align 2, !tbaa !45
  %1880 = add nuw i64 %1867, 64
  %1881 = icmp eq i64 %1880, %1865
  br i1 %1881, label %1882, label %1866, !llvm.loop !185

1882:                                             ; preds = %1866
  %1883 = icmp eq i64 %1864, 0
  br i1 %1883, label %1937, label %1884

1884:                                             ; preds = %1882
  %1885 = icmp ult i64 %1864, 8
  br i1 %1885, label %1899, label %1886

1886:                                             ; preds = %1861, %1884
  %1887 = phi i64 [ %1865, %1884 ], [ 0, %1861 ]
  %1888 = and i64 %1847, 7
  %1889 = sub nsw i64 %1854, %1888
  br label %1890

1890:                                             ; preds = %1890, %1886
  %1891 = phi i64 [ %1887, %1886 ], [ %1895, %1890 ]
  %1892 = getelementptr inbounds i16, ptr %332, i64 %1891
  %1893 = load <8 x i16>, ptr %1892, align 2, !tbaa !45
  %1894 = getelementptr inbounds i16, ptr %1851, i64 %1891
  store <8 x i16> %1893, ptr %1894, align 2, !tbaa !45
  %1895 = add nuw i64 %1891, 8
  %1896 = icmp eq i64 %1895, %1889
  br i1 %1896, label %1897, label %1890, !llvm.loop !186

1897:                                             ; preds = %1890
  %1898 = icmp eq i64 %1888, 0
  br i1 %1898, label %1937, label %1899

1899:                                             ; preds = %1856, %1853, %1884, %1897
  %1900 = phi i64 [ 0, %1853 ], [ 0, %1856 ], [ %1865, %1884 ], [ %1889, %1897 ]
  %1901 = sub i64 %1847, %1900
  %1902 = xor i64 %1900, -1
  %1903 = add nsw i64 %1854, %1902
  %1904 = and i64 %1901, 3
  %1905 = icmp eq i64 %1904, 0
  br i1 %1905, label %1915, label %1906

1906:                                             ; preds = %1899, %1906
  %1907 = phi i64 [ %1912, %1906 ], [ %1900, %1899 ]
  %1908 = phi i64 [ %1913, %1906 ], [ 0, %1899 ]
  %1909 = getelementptr inbounds i16, ptr %332, i64 %1907
  %1910 = load i16, ptr %1909, align 2, !tbaa !45
  %1911 = getelementptr inbounds i16, ptr %1851, i64 %1907
  store i16 %1910, ptr %1911, align 2, !tbaa !45
  %1912 = add nuw nsw i64 %1907, 1
  %1913 = add i64 %1908, 1
  %1914 = icmp eq i64 %1913, %1904
  br i1 %1914, label %1915, label %1906, !llvm.loop !187

1915:                                             ; preds = %1906, %1899
  %1916 = phi i64 [ %1900, %1899 ], [ %1912, %1906 ]
  %1917 = icmp ult i64 %1903, 3
  br i1 %1917, label %1937, label %1918

1918:                                             ; preds = %1915, %1918
  %1919 = phi i64 [ %1935, %1918 ], [ %1916, %1915 ]
  %1920 = getelementptr inbounds i16, ptr %332, i64 %1919
  %1921 = load i16, ptr %1920, align 2, !tbaa !45
  %1922 = getelementptr inbounds i16, ptr %1851, i64 %1919
  store i16 %1921, ptr %1922, align 2, !tbaa !45
  %1923 = add nuw nsw i64 %1919, 1
  %1924 = getelementptr inbounds i16, ptr %332, i64 %1923
  %1925 = load i16, ptr %1924, align 2, !tbaa !45
  %1926 = getelementptr inbounds i16, ptr %1851, i64 %1923
  store i16 %1925, ptr %1926, align 2, !tbaa !45
  %1927 = add nuw nsw i64 %1919, 2
  %1928 = getelementptr inbounds i16, ptr %332, i64 %1927
  %1929 = load i16, ptr %1928, align 2, !tbaa !45
  %1930 = getelementptr inbounds i16, ptr %1851, i64 %1927
  store i16 %1929, ptr %1930, align 2, !tbaa !45
  %1931 = add nuw nsw i64 %1919, 3
  %1932 = getelementptr inbounds i16, ptr %332, i64 %1931
  %1933 = load i16, ptr %1932, align 2, !tbaa !45
  %1934 = getelementptr inbounds i16, ptr %1851, i64 %1931
  store i16 %1933, ptr %1934, align 2, !tbaa !45
  %1935 = add nuw nsw i64 %1919, 4
  %1936 = icmp eq i64 %1935, %1854
  br i1 %1936, label %1937, label %1918, !llvm.loop !188

1937:                                             ; preds = %1915, %1918, %1882, %1897
  %1938 = shl i64 %1846, 31
  %1939 = add i64 %1938, -4294967296
  %1940 = ashr i64 %1939, 32
  %1941 = getelementptr inbounds i16, ptr %1851, i64 %1940
  %1942 = load i16, ptr %1941, align 2, !tbaa !45
  br label %1943

1943:                                             ; preds = %1834, %1937
  %1944 = phi i64 [ %1847, %1937 ], [ 0, %1834 ]
  %1945 = phi i16 [ %1942, %1937 ], [ -1, %1834 ]
  %1946 = and i64 %1944, 4294967295
  %1947 = getelementptr inbounds i16, ptr %1851, i64 %1946
  store i16 %1945, ptr %1947, align 2, !tbaa !45
  %1948 = trunc i64 %1847 to i16
  %1949 = add i16 %1948, 1
  %1950 = sext i32 %1844 to i64
  %1951 = getelementptr inbounds i16, ptr %1302, i64 %1950
  store i16 %1949, ptr %1951, align 2, !tbaa !45
  %1952 = add nsw i32 %1848, 2
  %1953 = add nsw i32 %1952, %1844
  %1954 = ptrtoint ptr %1819 to i64
  %1955 = sub i64 %1954, %648
  %1956 = lshr exact i64 %1955, 1
  %1957 = trunc i64 %1956 to i32
  %1958 = add nsw i32 %1953, 1
  %1959 = sext i32 %1958 to i64
  %1960 = getelementptr i16, ptr %1302, i64 %1959
  %1961 = icmp sgt i32 %1957, 0
  br i1 %1961, label %1962, label %2052

1962:                                             ; preds = %1943
  %1963 = and i64 %1956, 4294967295
  %1964 = icmp ult i64 %1963, 8
  br i1 %1964, label %2008, label %1965

1965:                                             ; preds = %1962
  %1966 = shl nsw i64 %1959, 1
  %1967 = add i64 %1966, %1303
  %1968 = sub i64 %1967, %648
  %1969 = icmp ult i64 %1968, 128
  br i1 %1969, label %2008, label %1970

1970:                                             ; preds = %1965
  %1971 = icmp ult i64 %1963, 64
  br i1 %1971, label %1995, label %1972

1972:                                             ; preds = %1970
  %1973 = and i64 %1956, 63
  %1974 = sub nsw i64 %1963, %1973
  br label %1975

1975:                                             ; preds = %1975, %1972
  %1976 = phi i64 [ 0, %1972 ], [ %1989, %1975 ]
  %1977 = getelementptr inbounds i16, ptr %378, i64 %1976
  %1978 = load <16 x i16>, ptr %1977, align 2, !tbaa !45
  %1979 = getelementptr inbounds i16, ptr %1977, i64 16
  %1980 = load <16 x i16>, ptr %1979, align 2, !tbaa !45
  %1981 = getelementptr inbounds i16, ptr %1977, i64 32
  %1982 = load <16 x i16>, ptr %1981, align 2, !tbaa !45
  %1983 = getelementptr inbounds i16, ptr %1977, i64 48
  %1984 = load <16 x i16>, ptr %1983, align 2, !tbaa !45
  %1985 = getelementptr inbounds i16, ptr %1960, i64 %1976
  store <16 x i16> %1978, ptr %1985, align 2, !tbaa !45
  %1986 = getelementptr inbounds i16, ptr %1985, i64 16
  store <16 x i16> %1980, ptr %1986, align 2, !tbaa !45
  %1987 = getelementptr inbounds i16, ptr %1985, i64 32
  store <16 x i16> %1982, ptr %1987, align 2, !tbaa !45
  %1988 = getelementptr inbounds i16, ptr %1985, i64 48
  store <16 x i16> %1984, ptr %1988, align 2, !tbaa !45
  %1989 = add nuw i64 %1976, 64
  %1990 = icmp eq i64 %1989, %1974
  br i1 %1990, label %1991, label %1975, !llvm.loop !189

1991:                                             ; preds = %1975
  %1992 = icmp eq i64 %1973, 0
  br i1 %1992, label %2046, label %1993

1993:                                             ; preds = %1991
  %1994 = icmp ult i64 %1973, 8
  br i1 %1994, label %2008, label %1995

1995:                                             ; preds = %1970, %1993
  %1996 = phi i64 [ %1974, %1993 ], [ 0, %1970 ]
  %1997 = and i64 %1956, 7
  %1998 = sub nsw i64 %1963, %1997
  br label %1999

1999:                                             ; preds = %1999, %1995
  %2000 = phi i64 [ %1996, %1995 ], [ %2004, %1999 ]
  %2001 = getelementptr inbounds i16, ptr %378, i64 %2000
  %2002 = load <8 x i16>, ptr %2001, align 2, !tbaa !45
  %2003 = getelementptr inbounds i16, ptr %1960, i64 %2000
  store <8 x i16> %2002, ptr %2003, align 2, !tbaa !45
  %2004 = add nuw i64 %2000, 8
  %2005 = icmp eq i64 %2004, %1998
  br i1 %2005, label %2006, label %1999, !llvm.loop !190

2006:                                             ; preds = %1999
  %2007 = icmp eq i64 %1997, 0
  br i1 %2007, label %2046, label %2008

2008:                                             ; preds = %1965, %1962, %1993, %2006
  %2009 = phi i64 [ 0, %1962 ], [ 0, %1965 ], [ %1974, %1993 ], [ %1998, %2006 ]
  %2010 = sub i64 %1956, %2009
  %2011 = xor i64 %2009, -1
  %2012 = add nsw i64 %1963, %2011
  %2013 = and i64 %2010, 3
  %2014 = icmp eq i64 %2013, 0
  br i1 %2014, label %2024, label %2015

2015:                                             ; preds = %2008, %2015
  %2016 = phi i64 [ %2021, %2015 ], [ %2009, %2008 ]
  %2017 = phi i64 [ %2022, %2015 ], [ 0, %2008 ]
  %2018 = getelementptr inbounds i16, ptr %378, i64 %2016
  %2019 = load i16, ptr %2018, align 2, !tbaa !45
  %2020 = getelementptr inbounds i16, ptr %1960, i64 %2016
  store i16 %2019, ptr %2020, align 2, !tbaa !45
  %2021 = add nuw nsw i64 %2016, 1
  %2022 = add i64 %2017, 1
  %2023 = icmp eq i64 %2022, %2013
  br i1 %2023, label %2024, label %2015, !llvm.loop !191

2024:                                             ; preds = %2015, %2008
  %2025 = phi i64 [ %2009, %2008 ], [ %2021, %2015 ]
  %2026 = icmp ult i64 %2012, 3
  br i1 %2026, label %2046, label %2027

2027:                                             ; preds = %2024, %2027
  %2028 = phi i64 [ %2044, %2027 ], [ %2025, %2024 ]
  %2029 = getelementptr inbounds i16, ptr %378, i64 %2028
  %2030 = load i16, ptr %2029, align 2, !tbaa !45
  %2031 = getelementptr inbounds i16, ptr %1960, i64 %2028
  store i16 %2030, ptr %2031, align 2, !tbaa !45
  %2032 = add nuw nsw i64 %2028, 1
  %2033 = getelementptr inbounds i16, ptr %378, i64 %2032
  %2034 = load i16, ptr %2033, align 2, !tbaa !45
  %2035 = getelementptr inbounds i16, ptr %1960, i64 %2032
  store i16 %2034, ptr %2035, align 2, !tbaa !45
  %2036 = add nuw nsw i64 %2028, 2
  %2037 = getelementptr inbounds i16, ptr %378, i64 %2036
  %2038 = load i16, ptr %2037, align 2, !tbaa !45
  %2039 = getelementptr inbounds i16, ptr %1960, i64 %2036
  store i16 %2038, ptr %2039, align 2, !tbaa !45
  %2040 = add nuw nsw i64 %2028, 3
  %2041 = getelementptr inbounds i16, ptr %378, i64 %2040
  %2042 = load i16, ptr %2041, align 2, !tbaa !45
  %2043 = getelementptr inbounds i16, ptr %1960, i64 %2040
  store i16 %2042, ptr %2043, align 2, !tbaa !45
  %2044 = add nuw nsw i64 %2028, 4
  %2045 = icmp eq i64 %2044, %1963
  br i1 %2045, label %2046, label %2027, !llvm.loop !192

2046:                                             ; preds = %2024, %2027, %1991, %2006
  %2047 = shl i64 %1955, 31
  %2048 = add i64 %2047, -4294967296
  %2049 = ashr i64 %2048, 32
  %2050 = getelementptr inbounds i16, ptr %1960, i64 %2049
  %2051 = load i16, ptr %2050, align 2, !tbaa !45
  br label %2052

2052:                                             ; preds = %1943, %2046
  %2053 = phi i64 [ %1956, %2046 ], [ 0, %1943 ]
  %2054 = phi i16 [ %2051, %2046 ], [ -1, %1943 ]
  %2055 = and i64 %2053, 4294967295
  %2056 = getelementptr inbounds i16, ptr %1960, i64 %2055
  store i16 %2054, ptr %2056, align 2, !tbaa !45
  %2057 = trunc i64 %1956 to i16
  %2058 = add i16 %2057, 1
  %2059 = sext i32 %1953 to i64
  %2060 = getelementptr inbounds i16, ptr %1302, i64 %2059
  store i16 %2058, ptr %2060, align 2, !tbaa !45
  %2061 = add nsw i32 %1957, 2
  %2062 = add nsw i32 %2061, %1953
  %2063 = select i1 %145, i32 0, i32 %2062
  store i32 %2063, ptr %17, align 8
  br label %2093

2064:                                             ; preds = %691
  %2065 = load ptr, ptr %12, align 8, !tbaa !47
  %2066 = load i32, ptr %17, align 8, !tbaa !19
  %2067 = add i32 %2066, 1
  %2068 = sext i32 %2067 to i64
  %2069 = getelementptr inbounds i16, ptr %2065, i64 %2068
  %2070 = sext i32 %2066 to i64
  %2071 = getelementptr inbounds i16, ptr %2065, i64 %2070
  %2072 = load i16, ptr %2071, align 2, !tbaa !45
  %2073 = zext i16 %2072 to i32
  %2074 = add i32 %2067, %2073
  %2075 = add nsw i32 %2073, -1
  %2076 = sext i32 %2074 to i64
  %2077 = getelementptr inbounds i16, ptr %2065, i64 %2076
  %2078 = load i16, ptr %2077, align 2, !tbaa !45
  %2079 = zext i16 %2078 to i32
  %2080 = add nuw nsw i32 %2079, 1
  %2081 = add nsw i32 %2080, %2074
  %2082 = add nsw i32 %2079, -1
  %2083 = add i32 %2081, 1
  %2084 = sext i32 %2083 to i64
  %2085 = getelementptr inbounds i16, ptr %2065, i64 %2084
  %2086 = sext i32 %2081 to i64
  %2087 = getelementptr inbounds i16, ptr %2065, i64 %2086
  %2088 = load i16, ptr %2087, align 2, !tbaa !45
  %2089 = zext i16 %2088 to i32
  %2090 = add i32 %2083, %2089
  store i32 %2090, ptr %17, align 8, !tbaa !19
  %2091 = add nsw i32 %2089, -1
  %2092 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2093

2093:                                             ; preds = %2052, %2064
  %2094 = phi i32 [ %2092, %2064 ], [ %1307, %2052 ]
  %2095 = phi i32 [ %2082, %2064 ], [ %1848, %2052 ]
  %2096 = phi ptr [ %2085, %2064 ], [ %1960, %2052 ]
  %2097 = phi i32 [ %2091, %2064 ], [ %1957, %2052 ]
  %2098 = phi i32 [ %2075, %2064 ], [ %1826, %2052 ]
  %2099 = phi ptr [ %2069, %2064 ], [ %1306, %2052 ]
  %2100 = phi i32 [ %674, %2064 ], [ %1264, %2052 ]
  %2101 = phi i32 [ %673, %2064 ], [ %1265, %2052 ]
  %2102 = phi i32 [ %672, %2064 ], [ %1266, %2052 ]
  %2103 = phi i32 [ %671, %2064 ], [ %1267, %2052 ]
  %2104 = phi ptr [ %669, %2064 ], [ %960, %2052 ]
  %2105 = phi ptr [ %668, %2064 ], [ %961, %2052 ]
  %2106 = phi ptr [ %667, %2064 ], [ %962, %2052 ]
  %2107 = icmp eq i32 %2094, 0
  %2108 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2109 = icmp ne i32 %2108, 0
  %2110 = select i1 %2107, i1 true, i1 %2109
  br i1 %2110, label %2115, label %2111

2111:                                             ; preds = %2093
  %2112 = load i8, ptr %698, align 2, !tbaa !52
  %2113 = icmp eq i8 %2112, 1
  %2114 = select i1 %2113, double 1.000000e+00, double -1.000000e+00
  br label %2115

2115:                                             ; preds = %2093, %2111
  %2116 = phi double [ %2114, %2111 ], [ 0.000000e+00, %2093 ]
  %2117 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %676, i32 1
  %2118 = load float, ptr %2117, align 8, !tbaa !81
  %2119 = fpext float %2118 to double
  %2120 = fmul double %2119, 0x4074C104816F0069
  %2121 = fmul double %32, %2120
  %2122 = fmul double %28, %2121
  %2123 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %676, i32 2
  %2124 = load i16, ptr %2123, align 4, !tbaa !82
  %2125 = sext i16 %2124 to i32
  %2126 = load ptr, ptr %649, align 8, !tbaa !83
  %2127 = load i32, ptr %650, align 8, !tbaa !85
  %2128 = shl nsw i32 %2125, 1
  %2129 = mul i32 %2128, %2127
  %2130 = zext i32 %2129 to i64
  %2131 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2126, i64 %2130
  %2132 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2133 = extractelement <2 x double> %694, i64 0
  %2134 = extractelement <2 x double> %694, i64 1
  %2135 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2132, double noundef %2133, double noundef %2134, double noundef %697, ptr noundef %44, ptr noundef nonnull %2099, i32 noundef %2098, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2136 = icmp sgt i32 %2135, 0
  br i1 %2136, label %2137, label %2306

2137:                                             ; preds = %2115
  %2138 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2139 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2140 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2141 = mul nsw i32 %2140, %700
  %2142 = mul i32 %2139, 3
  %2143 = mul nsw i32 %712, 3
  %2144 = sext i32 %2143 to i64
  %2145 = add nsw i32 %2143, 1
  %2146 = sext i32 %2145 to i64
  %2147 = add nsw i32 %2143, 2
  %2148 = sext i32 %2147 to i64
  %2149 = zext i32 %2135 to i64
  br label %2150

2150:                                             ; preds = %2137, %2150
  %2151 = phi i64 [ 0, %2137 ], [ %2304, %2150 ]
  %2152 = phi double [ 0.000000e+00, %2137 ], [ %2249, %2150 ]
  %2153 = phi <2 x double> [ zeroinitializer, %2137 ], [ %2245, %2150 ]
  %2154 = shl nuw nsw i64 %2151, 1
  %2155 = getelementptr inbounds i32, ptr %144, i64 %2154
  %2156 = load i32, ptr %2155, align 4, !tbaa !5
  %2157 = ashr i32 %2156, 14
  %2158 = add nsw i32 %2157, %37
  %2159 = getelementptr inbounds i16, ptr %97, i64 %2151
  %2160 = load i16, ptr %2159, align 2, !tbaa !45
  %2161 = zext i16 %2160 to i64
  %2162 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2161
  %2163 = getelementptr inbounds double, ptr %143, i64 %2151
  %2164 = load double, ptr %2163, align 8, !tbaa !15
  %2165 = sext i32 %2158 to i64
  %2166 = getelementptr inbounds double, ptr %2138, i64 %2165
  %2167 = load double, ptr %2166, align 8, !tbaa !15
  %2168 = fsub double %2164, %2167
  %2169 = shl nsw i32 %2158, 4
  %2170 = sext i32 %2169 to i64
  %2171 = getelementptr inbounds double, ptr %31, i64 %2170
  %2172 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2161, i32 2
  %2173 = load i16, ptr %2172, align 4, !tbaa !82
  %2174 = sext i16 %2173 to i32
  %2175 = shl nsw i32 %2174, 1
  %2176 = sext i32 %2175 to i64
  %2177 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2131, i64 %2176
  %2178 = getelementptr inbounds %class.Vector, ptr %628, i64 %2161
  %2179 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2161, i32 1
  %2180 = load float, ptr %2179, align 8, !tbaa !81
  %2181 = fpext float %2180 to double
  %2182 = fmul double %2122, %2181
  %2183 = getelementptr inbounds %class.Vector, ptr %2162, i64 0, i32 2
  %2184 = load double, ptr %2183, align 8, !tbaa !50
  %2185 = fsub double %697, %2184
  %2186 = load double, ptr %2177, align 8, !tbaa !86
  %2187 = fmul double %32, %2186
  %2188 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2131, i64 %2176, i32 1
  %2189 = load double, ptr %2188, align 8, !tbaa !88
  %2190 = load double, ptr %2171, align 8, !tbaa !15
  %2191 = getelementptr inbounds double, ptr %2171, i64 2
  %2192 = load double, ptr %2191, align 8, !tbaa !15
  %2193 = fmul double %2189, %651
  %2194 = fmul double %2193, %2192
  %2195 = tail call double @llvm.fmuladd.f64(double %2187, double %2190, double %2194)
  %2196 = getelementptr inbounds double, ptr %2171, i64 1
  %2197 = load double, ptr %2196, align 8, !tbaa !15
  %2198 = getelementptr inbounds double, ptr %2171, i64 3
  %2199 = load double, ptr %2198, align 8, !tbaa !15
  %2200 = fmul double %2193, %2199
  %2201 = tail call double @llvm.fmuladd.f64(double %2187, double %2197, double %2200)
  %2202 = getelementptr inbounds double, ptr %2171, i64 4
  %2203 = load double, ptr %2202, align 8, !tbaa !15
  %2204 = getelementptr inbounds double, ptr %2171, i64 6
  %2205 = load double, ptr %2204, align 8, !tbaa !15
  %2206 = fmul double %2193, %2205
  %2207 = tail call double @llvm.fmuladd.f64(double %2187, double %2203, double %2206)
  %2208 = tail call double @llvm.fmuladd.f64(double %2168, double %2195, double %2201)
  %2209 = tail call double @llvm.fmuladd.f64(double %2208, double %2168, double %2207)
  %2210 = fmul double %2116, %2209
  %2211 = load double, ptr %653, align 8, !tbaa !15
  %2212 = tail call double @llvm.fmuladd.f64(double %2210, double %2185, double %2211)
  %2213 = getelementptr inbounds double, ptr %2171, i64 8
  %2214 = getelementptr inbounds double, ptr %2171, i64 9
  %2215 = getelementptr inbounds double, ptr %2171, i64 10
  %2216 = load double, ptr %655, align 8, !tbaa !15
  %2217 = load <2 x double>, ptr %2162, align 8, !tbaa !15
  %2218 = fsub <2 x double> %694, %2217
  %2219 = load <2 x double>, ptr %652, align 8, !tbaa !15
  %2220 = insertelement <2 x double> poison, double %2210, i64 0
  %2221 = shufflevector <2 x double> %2220, <2 x double> poison, <2 x i32> zeroinitializer
  %2222 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2221, <2 x double> %2218, <2 x double> %2219)
  store <2 x double> %2222, ptr %652, align 8, !tbaa !15
  store double %2212, ptr %653, align 8, !tbaa !15
  %2223 = load double, ptr %2213, align 8, !tbaa !15
  %2224 = fmul double %2182, %2223
  %2225 = load double, ptr %2214, align 8, !tbaa !15
  %2226 = fmul double %2182, %2225
  %2227 = load double, ptr %2215, align 8, !tbaa !15
  %2228 = fmul double %2182, %2227
  %2229 = tail call double @llvm.fmuladd.f64(double %2168, double %2224, double %2226)
  %2230 = tail call double @llvm.fmuladd.f64(double %2229, double %2168, double %2228)
  %2231 = fmul double %2116, %2230
  %2232 = load <2 x double>, ptr %654, align 8, !tbaa !15
  %2233 = insertelement <2 x double> poison, double %2231, i64 0
  %2234 = shufflevector <2 x double> %2233, <2 x double> poison, <2 x i32> zeroinitializer
  %2235 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2234, <2 x double> %2218, <2 x double> %2232)
  store <2 x double> %2235, ptr %654, align 8, !tbaa !15
  %2236 = tail call double @llvm.fmuladd.f64(double %2231, double %2185, double %2216)
  store double %2236, ptr %655, align 8, !tbaa !15
  %2237 = fadd double %2195, %2224
  %2238 = fadd double %2201, %2226
  %2239 = fadd double %2207, %2228
  %2240 = tail call double @llvm.fmuladd.f64(double %2168, double %2237, double %2238)
  %2241 = tail call double @llvm.fmuladd.f64(double %2240, double %2168, double %2239)
  %2242 = insertelement <2 x double> poison, double %2241, i64 0
  %2243 = shufflevector <2 x double> %2242, <2 x double> poison, <2 x i32> zeroinitializer
  %2244 = fmul <2 x double> %2218, %2243
  %2245 = fadd <2 x double> %2153, %2244
  %2246 = load <2 x double>, ptr %2178, align 8, !tbaa !15
  %2247 = fsub <2 x double> %2246, %2244
  store <2 x double> %2247, ptr %2178, align 8, !tbaa !15
  %2248 = fmul double %2185, %2241
  %2249 = fadd double %2152, %2248
  %2250 = getelementptr inbounds %class.Vector, ptr %628, i64 %2161, i32 2
  %2251 = load double, ptr %2250, align 8, !tbaa !89
  %2252 = fsub double %2251, %2248
  store double %2252, ptr %2250, align 8, !tbaa !89
  %2253 = load double, ptr %2183, align 8, !tbaa !50
  %2254 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2255 = fsub double %2253, %2254
  %2256 = fmul double %10, %2255
  %2257 = tail call double @llvm.floor.f64(double %2256)
  %2258 = fptosi double %2257 to i32
  %2259 = icmp slt i32 %2258, 0
  %2260 = select i1 %2259, i32 %2139, i32 0
  %2261 = icmp sgt i32 %2139, %2258
  %2262 = select i1 %2261, i32 0, i32 %2139
  %2263 = sub i32 %2258, %2262
  %2264 = add i32 %2263, %2260
  %2265 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2161, i32 3
  %2266 = load i8, ptr %2265, align 2, !tbaa !52
  %2267 = zext i8 %2266 to i32
  %2268 = fmul <2 x double> %2218, %2244
  %2269 = extractelement <2 x double> %2268, i64 0
  %2270 = fmul <2 x double> %2218, %2244
  %2271 = extractelement <2 x double> %2270, i64 1
  %2272 = fmul double %2185, %2248
  %2273 = add nsw i32 %2141, %2267
  %2274 = mul i32 %2142, %2273
  %2275 = sext i32 %2274 to i64
  %2276 = getelementptr inbounds double, ptr %8, i64 %2275
  %2277 = fmul double %2269, 5.000000e-01
  %2278 = fmul double %2271, 5.000000e-01
  %2279 = fmul double %2272, 5.000000e-01
  %2280 = getelementptr inbounds double, ptr %2276, i64 %2144
  %2281 = load double, ptr %2280, align 8, !tbaa !15
  %2282 = fadd double %2277, %2281
  store double %2282, ptr %2280, align 8, !tbaa !15
  %2283 = getelementptr inbounds double, ptr %2276, i64 %2146
  %2284 = load double, ptr %2283, align 8, !tbaa !15
  %2285 = fadd double %2278, %2284
  store double %2285, ptr %2283, align 8, !tbaa !15
  %2286 = getelementptr inbounds double, ptr %2276, i64 %2148
  %2287 = load double, ptr %2286, align 8, !tbaa !15
  %2288 = fadd double %2279, %2287
  store double %2288, ptr %2286, align 8, !tbaa !15
  %2289 = mul nsw i32 %2264, 3
  %2290 = sext i32 %2289 to i64
  %2291 = getelementptr inbounds double, ptr %2276, i64 %2290
  %2292 = load double, ptr %2291, align 8, !tbaa !15
  %2293 = fadd double %2277, %2292
  store double %2293, ptr %2291, align 8, !tbaa !15
  %2294 = add nsw i32 %2289, 1
  %2295 = sext i32 %2294 to i64
  %2296 = getelementptr inbounds double, ptr %2276, i64 %2295
  %2297 = load double, ptr %2296, align 8, !tbaa !15
  %2298 = fadd double %2278, %2297
  store double %2298, ptr %2296, align 8, !tbaa !15
  %2299 = add nsw i32 %2289, 2
  %2300 = sext i32 %2299 to i64
  %2301 = getelementptr inbounds double, ptr %2276, i64 %2300
  %2302 = load double, ptr %2301, align 8, !tbaa !15
  %2303 = fadd double %2279, %2302
  store double %2303, ptr %2301, align 8, !tbaa !15
  %2304 = add nuw nsw i64 %2151, 1
  %2305 = icmp eq i64 %2304, %2149
  br i1 %2305, label %2306, label %2150

2306:                                             ; preds = %2150, %2115
  %2307 = phi double [ 0.000000e+00, %2115 ], [ %2249, %2150 ]
  %2308 = phi <2 x double> [ zeroinitializer, %2115 ], [ %2245, %2150 ]
  %2309 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2310 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2309, double noundef %2133, double noundef %2134, double noundef %697, ptr noundef %44, ptr noundef %2096, i32 noundef %2097, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2311 = icmp sgt i32 %2310, 0
  br i1 %2311, label %2312, label %2483

2312:                                             ; preds = %2306
  %2313 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2314 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2315 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2316 = mul nsw i32 %2315, %700
  %2317 = mul i32 %2314, 3
  %2318 = mul nsw i32 %712, 3
  %2319 = sext i32 %2318 to i64
  %2320 = add nsw i32 %2318, 1
  %2321 = sext i32 %2320 to i64
  %2322 = add nsw i32 %2318, 2
  %2323 = sext i32 %2322 to i64
  %2324 = zext i32 %2310 to i64
  br label %2325

2325:                                             ; preds = %2312, %2325
  %2326 = phi i64 [ 0, %2312 ], [ %2481, %2325 ]
  %2327 = phi double [ %2307, %2312 ], [ %2426, %2325 ]
  %2328 = phi <2 x double> [ %2308, %2312 ], [ %2422, %2325 ]
  %2329 = shl nuw nsw i64 %2326, 1
  %2330 = getelementptr inbounds i32, ptr %144, i64 %2329
  %2331 = load i32, ptr %2330, align 4, !tbaa !5
  %2332 = ashr i32 %2331, 14
  %2333 = add nsw i32 %2332, %37
  %2334 = getelementptr inbounds i16, ptr %97, i64 %2326
  %2335 = load i16, ptr %2334, align 2, !tbaa !45
  %2336 = zext i16 %2335 to i64
  %2337 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2336
  %2338 = getelementptr inbounds double, ptr %143, i64 %2326
  %2339 = load double, ptr %2338, align 8, !tbaa !15
  %2340 = sext i32 %2333 to i64
  %2341 = getelementptr inbounds double, ptr %2313, i64 %2340
  %2342 = load double, ptr %2341, align 8, !tbaa !15
  %2343 = fsub double %2339, %2342
  %2344 = shl nsw i32 %2333, 4
  %2345 = sext i32 %2344 to i64
  %2346 = getelementptr inbounds double, ptr %31, i64 %2345
  %2347 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2336, i32 2
  %2348 = load i16, ptr %2347, align 4, !tbaa !82
  %2349 = sext i16 %2348 to i32
  %2350 = shl nsw i32 %2349, 1
  %2351 = sext i32 %2350 to i64
  %2352 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2131, i64 %2351
  %2353 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2352, i64 1
  %2354 = getelementptr inbounds %class.Vector, ptr %628, i64 %2336
  %2355 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2336, i32 1
  %2356 = load float, ptr %2355, align 8, !tbaa !81
  %2357 = fpext float %2356 to double
  %2358 = fmul double %2122, %2357
  %2359 = getelementptr inbounds %class.Vector, ptr %2337, i64 0, i32 2
  %2360 = load double, ptr %2359, align 8, !tbaa !50
  %2361 = fsub double %697, %2360
  %2362 = load double, ptr %2353, align 8, !tbaa !86
  %2363 = fmul double %32, %2362
  %2364 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2352, i64 1, i32 1
  %2365 = load double, ptr %2364, align 8, !tbaa !88
  %2366 = load double, ptr %2346, align 8, !tbaa !15
  %2367 = getelementptr inbounds double, ptr %2346, i64 2
  %2368 = load double, ptr %2367, align 8, !tbaa !15
  %2369 = fmul double %2365, %651
  %2370 = fmul double %2369, %2368
  %2371 = tail call double @llvm.fmuladd.f64(double %2363, double %2366, double %2370)
  %2372 = getelementptr inbounds double, ptr %2346, i64 1
  %2373 = load double, ptr %2372, align 8, !tbaa !15
  %2374 = getelementptr inbounds double, ptr %2346, i64 3
  %2375 = load double, ptr %2374, align 8, !tbaa !15
  %2376 = fmul double %2369, %2375
  %2377 = tail call double @llvm.fmuladd.f64(double %2363, double %2373, double %2376)
  %2378 = getelementptr inbounds double, ptr %2346, i64 4
  %2379 = load double, ptr %2378, align 8, !tbaa !15
  %2380 = getelementptr inbounds double, ptr %2346, i64 6
  %2381 = load double, ptr %2380, align 8, !tbaa !15
  %2382 = fmul double %2369, %2381
  %2383 = tail call double @llvm.fmuladd.f64(double %2363, double %2379, double %2382)
  %2384 = tail call double @llvm.fmuladd.f64(double %2343, double %2371, double %2377)
  %2385 = tail call double @llvm.fmuladd.f64(double %2384, double %2343, double %2383)
  %2386 = fmul double %2116, %2385
  %2387 = load double, ptr %653, align 8, !tbaa !15
  %2388 = tail call double @llvm.fmuladd.f64(double %2386, double %2361, double %2387)
  %2389 = fmul double %657, %2358
  %2390 = getelementptr inbounds double, ptr %2346, i64 8
  %2391 = getelementptr inbounds double, ptr %2346, i64 9
  %2392 = getelementptr inbounds double, ptr %2346, i64 10
  %2393 = load double, ptr %655, align 8, !tbaa !15
  %2394 = load <2 x double>, ptr %2337, align 8, !tbaa !15
  %2395 = fsub <2 x double> %694, %2394
  %2396 = load <2 x double>, ptr %652, align 8, !tbaa !15
  %2397 = insertelement <2 x double> poison, double %2386, i64 0
  %2398 = shufflevector <2 x double> %2397, <2 x double> poison, <2 x i32> zeroinitializer
  %2399 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2398, <2 x double> %2395, <2 x double> %2396)
  store <2 x double> %2399, ptr %652, align 8, !tbaa !15
  store double %2388, ptr %653, align 8, !tbaa !15
  %2400 = load double, ptr %2390, align 8, !tbaa !15
  %2401 = fmul double %2389, %2400
  %2402 = load double, ptr %2391, align 8, !tbaa !15
  %2403 = fmul double %2389, %2402
  %2404 = load double, ptr %2392, align 8, !tbaa !15
  %2405 = fmul double %2389, %2404
  %2406 = tail call double @llvm.fmuladd.f64(double %2343, double %2401, double %2403)
  %2407 = tail call double @llvm.fmuladd.f64(double %2406, double %2343, double %2405)
  %2408 = fmul double %2116, %2407
  %2409 = load <2 x double>, ptr %654, align 8, !tbaa !15
  %2410 = insertelement <2 x double> poison, double %2408, i64 0
  %2411 = shufflevector <2 x double> %2410, <2 x double> poison, <2 x i32> zeroinitializer
  %2412 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2411, <2 x double> %2395, <2 x double> %2409)
  store <2 x double> %2412, ptr %654, align 8, !tbaa !15
  %2413 = tail call double @llvm.fmuladd.f64(double %2408, double %2361, double %2393)
  store double %2413, ptr %655, align 8, !tbaa !15
  %2414 = fadd double %2371, %2401
  %2415 = fadd double %2377, %2403
  %2416 = fadd double %2383, %2405
  %2417 = tail call double @llvm.fmuladd.f64(double %2343, double %2414, double %2415)
  %2418 = tail call double @llvm.fmuladd.f64(double %2417, double %2343, double %2416)
  %2419 = insertelement <2 x double> poison, double %2418, i64 0
  %2420 = shufflevector <2 x double> %2419, <2 x double> poison, <2 x i32> zeroinitializer
  %2421 = fmul <2 x double> %2395, %2420
  %2422 = fadd <2 x double> %2328, %2421
  %2423 = load <2 x double>, ptr %2354, align 8, !tbaa !15
  %2424 = fsub <2 x double> %2423, %2421
  store <2 x double> %2424, ptr %2354, align 8, !tbaa !15
  %2425 = fmul double %2361, %2418
  %2426 = fadd double %2327, %2425
  %2427 = getelementptr inbounds %class.Vector, ptr %628, i64 %2336, i32 2
  %2428 = load double, ptr %2427, align 8, !tbaa !89
  %2429 = fsub double %2428, %2425
  store double %2429, ptr %2427, align 8, !tbaa !89
  %2430 = load double, ptr %2359, align 8, !tbaa !50
  %2431 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2432 = fsub double %2430, %2431
  %2433 = fmul double %10, %2432
  %2434 = tail call double @llvm.floor.f64(double %2433)
  %2435 = fptosi double %2434 to i32
  %2436 = icmp slt i32 %2435, 0
  %2437 = select i1 %2436, i32 %2314, i32 0
  %2438 = icmp sgt i32 %2314, %2435
  %2439 = select i1 %2438, i32 0, i32 %2314
  %2440 = sub i32 %2435, %2439
  %2441 = add i32 %2440, %2437
  %2442 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2336, i32 3
  %2443 = load i8, ptr %2442, align 2, !tbaa !52
  %2444 = zext i8 %2443 to i32
  %2445 = fmul <2 x double> %2395, %2421
  %2446 = extractelement <2 x double> %2445, i64 0
  %2447 = fmul <2 x double> %2395, %2421
  %2448 = extractelement <2 x double> %2447, i64 1
  %2449 = fmul double %2361, %2425
  %2450 = add nsw i32 %2316, %2444
  %2451 = mul i32 %2317, %2450
  %2452 = sext i32 %2451 to i64
  %2453 = getelementptr inbounds double, ptr %8, i64 %2452
  %2454 = fmul double %2446, 5.000000e-01
  %2455 = fmul double %2448, 5.000000e-01
  %2456 = fmul double %2449, 5.000000e-01
  %2457 = getelementptr inbounds double, ptr %2453, i64 %2319
  %2458 = load double, ptr %2457, align 8, !tbaa !15
  %2459 = fadd double %2454, %2458
  store double %2459, ptr %2457, align 8, !tbaa !15
  %2460 = getelementptr inbounds double, ptr %2453, i64 %2321
  %2461 = load double, ptr %2460, align 8, !tbaa !15
  %2462 = fadd double %2455, %2461
  store double %2462, ptr %2460, align 8, !tbaa !15
  %2463 = getelementptr inbounds double, ptr %2453, i64 %2323
  %2464 = load double, ptr %2463, align 8, !tbaa !15
  %2465 = fadd double %2456, %2464
  store double %2465, ptr %2463, align 8, !tbaa !15
  %2466 = mul nsw i32 %2441, 3
  %2467 = sext i32 %2466 to i64
  %2468 = getelementptr inbounds double, ptr %2453, i64 %2467
  %2469 = load double, ptr %2468, align 8, !tbaa !15
  %2470 = fadd double %2454, %2469
  store double %2470, ptr %2468, align 8, !tbaa !15
  %2471 = add nsw i32 %2466, 1
  %2472 = sext i32 %2471 to i64
  %2473 = getelementptr inbounds double, ptr %2453, i64 %2472
  %2474 = load double, ptr %2473, align 8, !tbaa !15
  %2475 = fadd double %2455, %2474
  store double %2475, ptr %2473, align 8, !tbaa !15
  %2476 = add nsw i32 %2466, 2
  %2477 = sext i32 %2476 to i64
  %2478 = getelementptr inbounds double, ptr %2453, i64 %2477
  %2479 = load double, ptr %2478, align 8, !tbaa !15
  %2480 = fadd double %2456, %2479
  store double %2480, ptr %2478, align 8, !tbaa !15
  %2481 = add nuw nsw i64 %2326, 1
  %2482 = icmp eq i64 %2481, %2324
  br i1 %2482, label %2483, label %2325

2483:                                             ; preds = %2325, %2306
  %2484 = phi double [ %2307, %2306 ], [ %2426, %2325 ]
  %2485 = phi <2 x double> [ %2308, %2306 ], [ %2422, %2325 ]
  %2486 = add i32 %2095, %665
  %2487 = add i32 %2486, %2310
  %2488 = getelementptr inbounds %class.Vector, ptr %628, i64 %676
  %2489 = load <2 x double>, ptr %2488, align 8, !tbaa !15
  %2490 = fadd <2 x double> %2485, %2489
  store <2 x double> %2490, ptr %2488, align 8, !tbaa !15
  %2491 = getelementptr inbounds %class.Vector, ptr %628, i64 %676, i32 2
  %2492 = load double, ptr %2491, align 8, !tbaa !89
  %2493 = fadd double %2484, %2492
  store double %2493, ptr %2491, align 8, !tbaa !89
  br label %2494

2494:                                             ; preds = %2483, %1314, %1368, %687
  %2495 = phi i32 [ %688, %687 ], [ %692, %2483 ], [ %692, %1314 ], [ %692, %1368 ]
  %2496 = phi i32 [ %674, %687 ], [ %2100, %2483 ], [ %1264, %1314 ], [ %1264, %1368 ]
  %2497 = phi i32 [ %673, %687 ], [ %2101, %2483 ], [ %1265, %1314 ], [ %1265, %1368 ]
  %2498 = phi i32 [ %672, %687 ], [ %2102, %2483 ], [ %1266, %1314 ], [ %1266, %1368 ]
  %2499 = phi i32 [ %671, %687 ], [ %2103, %2483 ], [ %1267, %1314 ], [ %1267, %1368 ]
  %2500 = phi i32 [ %670, %687 ], [ %714, %2483 ], [ %714, %1314 ], [ %714, %1368 ]
  %2501 = phi ptr [ %669, %687 ], [ %2104, %2483 ], [ %960, %1314 ], [ %960, %1368 ]
  %2502 = phi ptr [ %668, %687 ], [ %2105, %2483 ], [ %961, %1314 ], [ %961, %1368 ]
  %2503 = phi ptr [ %667, %687 ], [ %2106, %2483 ], [ %962, %1314 ], [ %962, %1368 ]
  %2504 = phi i32 [ %690, %687 ], [ %666, %2483 ], [ %666, %1314 ], [ %666, %1368 ]
  %2505 = phi i32 [ %665, %687 ], [ %2487, %2483 ], [ %665, %1314 ], [ %665, %1368 ]
  %2506 = add nsw i32 %2504, 1
  %2507 = icmp slt i32 %2506, %634
  br i1 %2507, label %664, label %2508

2508:                                             ; preds = %2494, %622
  %2509 = phi ptr [ null, %622 ], [ %2503, %2494 ]
  %2510 = phi i32 [ 0, %622 ], [ %2505, %2494 ]
  %2511 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2512 = load ptr, ptr %2511, align 8, !tbaa !24
  %2513 = icmp sgt i32 %39, 0
  br i1 %2513, label %2514, label %2516

2514:                                             ; preds = %2508
  %2515 = zext i32 %39 to i64
  br label %2539

2516:                                             ; preds = %2539, %2508
  %2517 = phi <4 x double> [ zeroinitializer, %2508 ], [ %2569, %2539 ]
  %2518 = phi <2 x double> [ zeroinitializer, %2508 ], [ %2564, %2539 ]
  %2519 = sitofp i32 %2510 to double
  %2520 = getelementptr inbounds double, ptr %6, i64 22
  %2521 = load double, ptr %2520, align 8, !tbaa !15
  %2522 = fadd double %2521, %2519
  store double %2522, ptr %2520, align 8, !tbaa !15
  %2523 = getelementptr inbounds double, ptr %6, i64 3
  %2524 = load <4 x double>, ptr %2523, align 8, !tbaa !15
  %2525 = shufflevector <2 x double> %2518, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2526 = shufflevector <4 x double> %2525, <4 x double> %2517, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2527 = shufflevector <4 x double> %2526, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2528 = fadd <4 x double> %2527, %2524
  store <4 x double> %2528, ptr %2523, align 8, !tbaa !15
  %2529 = getelementptr inbounds double, ptr %6, i64 7
  %2530 = load <4 x double>, ptr %2529, align 8, !tbaa !15
  %2531 = shufflevector <4 x double> %2517, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2532 = shufflevector <4 x double> %2531, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2533 = fadd <4 x double> %2532, %2530
  store <4 x double> %2533, ptr %2529, align 8, !tbaa !15
  %2534 = getelementptr inbounds double, ptr %6, i64 11
  %2535 = load double, ptr %2534, align 8, !tbaa !15
  %2536 = extractelement <4 x double> %2517, i64 0
  %2537 = fadd double %2536, %2535
  store double %2537, ptr %2534, align 8, !tbaa !15
  %2538 = icmp eq ptr %2509, null
  br i1 %2538, label %2573, label %2572

2539:                                             ; preds = %2514, %2539
  %2540 = phi i64 [ 0, %2514 ], [ %2570, %2539 ]
  %2541 = phi <4 x double> [ zeroinitializer, %2514 ], [ %2569, %2539 ]
  %2542 = phi <2 x double> [ zeroinitializer, %2514 ], [ %2564, %2539 ]
  %2543 = getelementptr inbounds %class.Vector, ptr %628, i64 %2540
  %2544 = getelementptr inbounds %class.Vector, ptr %2512, i64 %2540
  %2545 = getelementptr inbounds %class.Vector, ptr %628, i64 %2540, i32 1
  %2546 = load <2 x double>, ptr %2543, align 8, !tbaa !15
  %2547 = load <2 x double>, ptr %2544, align 8, !tbaa !15
  %2548 = fadd <2 x double> %2546, %2547
  store <2 x double> %2548, ptr %2544, align 8, !tbaa !15
  %2549 = getelementptr inbounds %class.Vector, ptr %628, i64 %2540, i32 2
  %2550 = load double, ptr %2549, align 8, !tbaa !89
  %2551 = getelementptr inbounds %class.Vector, ptr %2512, i64 %2540, i32 2
  %2552 = load double, ptr %2551, align 8, !tbaa !89
  %2553 = fadd double %2550, %2552
  store double %2553, ptr %2551, align 8, !tbaa !89
  %2554 = load double, ptr %2543, align 8, !tbaa !193
  %2555 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2540
  %2556 = load double, ptr %2555, align 8, !tbaa !69
  %2557 = getelementptr inbounds %class.Vector, ptr %2555, i64 0, i32 1
  %2558 = load <2 x double>, ptr %2557, align 8, !tbaa !15
  %2559 = shufflevector <2 x double> %2558, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2560 = insertelement <2 x double> poison, double %2554, i64 0
  %2561 = shufflevector <2 x double> %2560, <2 x double> poison, <2 x i32> zeroinitializer
  %2562 = shufflevector <2 x double> %2558, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2563 = insertelement <2 x double> %2562, double %2556, i64 0
  %2564 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2561, <2 x double> %2563, <2 x double> %2542)
  %2565 = load <2 x double>, ptr %2545, align 8, !tbaa !15
  %2566 = shufflevector <2 x double> %2565, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2567 = insertelement <4 x double> %2566, double %2554, i64 3
  %2568 = shufflevector <4 x double> %2567, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2569 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2568, <4 x double> %2559, <4 x double> %2541)
  %2570 = add nuw nsw i64 %2540, 1
  %2571 = icmp eq i64 %2570, %2515
  br i1 %2571, label %2516, label %2539

2572:                                             ; preds = %2516
  tail call void @_ZdaPv(ptr noundef nonnull %2509) #10
  br label %2573

2573:                                             ; preds = %2516, %2572, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil22calc_self_energy_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2632

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %35 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %36 = shl i32 %35, 6
  %37 = add i32 %36, -65472
  %38 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %39 = load i32, ptr %38, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %41 = load i32, ptr %40, align 4, !tbaa !5
  %42 = load ptr, ptr %0, align 8, !tbaa !24
  %43 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !24
  %45 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %50 = load ptr, ptr %49, align 8, !tbaa !25
  %51 = add nsw i32 %41, 5
  %52 = getelementptr inbounds %class.ResizeArray, ptr %50, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !26
  %54 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 2
  %55 = load i32, ptr %54, align 8, !tbaa !28
  %56 = icmp slt i32 %55, %51
  br i1 %56, label %57, label %95

57:                                               ; preds = %4
  %58 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 3
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = icmp slt i32 %59, %51
  br i1 %60, label %61, label %95

61:                                               ; preds = %57
  %62 = sitofp i32 %59 to float
  %63 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 5
  %64 = load float, ptr %63, align 4, !tbaa !32
  %65 = fmul float %64, %62
  %66 = fptosi float %65 to i32
  %67 = tail call i32 @llvm.smax.i32(i32 %66, i32 %51)
  %68 = sub nsw i32 %67, %59
  %69 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 6
  %70 = load i32, ptr %69, align 8, !tbaa !33
  %71 = icmp slt i32 %68, %70
  %72 = add nsw i32 %70, %59
  %73 = select i1 %71, i32 %72, i32 %67
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 1
  %76 = add nsw i64 %75, 31
  %77 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %76) #9
  %78 = getelementptr inbounds i8, ptr %77, i64 31
  %79 = ptrtoint ptr %78 to i64
  %80 = and i64 %79, 31
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, ptr %78, i64 %81
  %83 = load ptr, ptr %53, align 8, !tbaa !34
  %84 = sext i32 %55 to i64
  %85 = shl nsw i64 %84, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %82, ptr align 1 %83, i64 %85, i1 false)
  %86 = icmp eq i32 %59, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %61
  %88 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  %89 = load ptr, ptr %88, align 8, !tbaa !35
  %90 = icmp eq ptr %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZdaPv(ptr noundef nonnull %89) #10
  br label %92

92:                                               ; preds = %91, %87, %61
  %93 = getelementptr inbounds %class.ResizeArrayRaw, ptr %53, i64 0, i32 1
  store ptr %77, ptr %93, align 8, !tbaa !35
  store ptr %82, ptr %53, align 8, !tbaa !34
  store i32 %73, ptr %58, align 4, !tbaa !31
  %94 = load ptr, ptr %52, align 8, !tbaa !26
  br label %95

95:                                               ; preds = %4, %57, %92
  %96 = phi ptr [ %53, %4 ], [ %53, %57 ], [ %94, %92 ]
  store i32 %51, ptr %54, align 8, !tbaa !28
  %97 = load ptr, ptr %96, align 8, !tbaa !34
  %98 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 1, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !36
  %100 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 2
  %101 = load i32, ptr %100, align 8, !tbaa !38
  %102 = icmp slt i32 %101, %51
  br i1 %102, label %103, label %141

103:                                              ; preds = %95
  %104 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 3
  %105 = load i32, ptr %104, align 4, !tbaa !40
  %106 = icmp slt i32 %105, %51
  br i1 %106, label %107, label %141

107:                                              ; preds = %103
  %108 = sitofp i32 %105 to float
  %109 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 5
  %110 = load float, ptr %109, align 4, !tbaa !41
  %111 = fmul float %110, %108
  %112 = fptosi float %111 to i32
  %113 = tail call i32 @llvm.smax.i32(i32 %112, i32 %51)
  %114 = sub nsw i32 %113, %105
  %115 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 6
  %116 = load i32, ptr %115, align 8, !tbaa !42
  %117 = icmp slt i32 %114, %116
  %118 = add nsw i32 %116, %105
  %119 = select i1 %117, i32 %118, i32 %113
  %120 = sext i32 %119 to i64
  %121 = shl nsw i64 %120, 3
  %122 = add nsw i64 %121, 31
  %123 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %122) #9
  %124 = getelementptr inbounds i8, ptr %123, i64 31
  %125 = ptrtoint ptr %124 to i64
  %126 = and i64 %125, 31
  %127 = sub nsw i64 0, %126
  %128 = getelementptr inbounds i8, ptr %124, i64 %127
  %129 = load ptr, ptr %99, align 8, !tbaa !43
  %130 = sext i32 %101 to i64
  %131 = shl nsw i64 %130, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %128, ptr align 1 %129, i64 %131, i1 false)
  %132 = icmp eq i32 %105, 0
  br i1 %132, label %138, label %133

133:                                              ; preds = %107
  %134 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  %135 = load ptr, ptr %134, align 8, !tbaa !44
  %136 = icmp eq ptr %135, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  tail call void @_ZdaPv(ptr noundef nonnull %135) #10
  br label %138

138:                                              ; preds = %137, %133, %107
  %139 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %99, i64 0, i32 1
  store ptr %123, ptr %139, align 8, !tbaa !44
  store ptr %128, ptr %99, align 8, !tbaa !43
  store i32 %119, ptr %104, align 4, !tbaa !40
  %140 = load ptr, ptr %98, align 8, !tbaa !36
  br label %141

141:                                              ; preds = %95, %103, %138
  %142 = phi ptr [ %99, %95 ], [ %99, %103 ], [ %140, %138 ]
  store i32 %51, ptr %100, align 8, !tbaa !38
  %143 = load ptr, ptr %142, align 8, !tbaa !43
  %144 = getelementptr inbounds i32, ptr %143, i64 1
  %145 = icmp eq i32 %14, 0
  %146 = icmp ne i32 %16, 0
  %147 = select i1 %145, i1 %146, i1 false
  %148 = select i1 %147, i32 0, i32 %51
  %149 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 2, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !26
  %151 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 2
  %152 = load i32, ptr %151, align 8, !tbaa !28
  %153 = icmp slt i32 %152, %148
  br i1 %153, label %154, label %192

154:                                              ; preds = %141
  %155 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 3
  %156 = load i32, ptr %155, align 4, !tbaa !31
  %157 = icmp slt i32 %156, %148
  br i1 %157, label %158, label %192

158:                                              ; preds = %154
  %159 = sitofp i32 %156 to float
  %160 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 5
  %161 = load float, ptr %160, align 4, !tbaa !32
  %162 = fmul float %161, %159
  %163 = fptosi float %162 to i32
  %164 = tail call i32 @llvm.smax.i32(i32 %163, i32 %148)
  %165 = sub nsw i32 %164, %156
  %166 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 6
  %167 = load i32, ptr %166, align 8, !tbaa !33
  %168 = icmp slt i32 %165, %167
  %169 = add nsw i32 %167, %156
  %170 = select i1 %168, i32 %169, i32 %164
  %171 = sext i32 %170 to i64
  %172 = shl nsw i64 %171, 1
  %173 = add nsw i64 %172, 31
  %174 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %173) #9
  %175 = getelementptr inbounds i8, ptr %174, i64 31
  %176 = ptrtoint ptr %175 to i64
  %177 = and i64 %176, 31
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds i8, ptr %175, i64 %178
  %180 = load ptr, ptr %150, align 8, !tbaa !34
  %181 = sext i32 %152 to i64
  %182 = shl nsw i64 %181, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %179, ptr align 1 %180, i64 %182, i1 false)
  %183 = icmp eq i32 %156, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %158
  %185 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !35
  %187 = icmp eq ptr %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @_ZdaPv(ptr noundef nonnull %186) #10
  br label %189

189:                                              ; preds = %188, %184, %158
  %190 = getelementptr inbounds %class.ResizeArrayRaw, ptr %150, i64 0, i32 1
  store ptr %174, ptr %190, align 8, !tbaa !35
  store ptr %179, ptr %150, align 8, !tbaa !34
  store i32 %170, ptr %155, align 4, !tbaa !31
  %191 = load ptr, ptr %149, align 8, !tbaa !26
  br label %192

192:                                              ; preds = %141, %154, %189
  %193 = phi ptr [ %150, %141 ], [ %150, %154 ], [ %191, %189 ]
  store i32 %148, ptr %151, align 8, !tbaa !28
  %194 = load ptr, ptr %193, align 8, !tbaa !34
  %195 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 3, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !26
  %197 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 2
  %198 = load i32, ptr %197, align 8, !tbaa !28
  %199 = icmp slt i32 %198, %148
  br i1 %199, label %200, label %238

200:                                              ; preds = %192
  %201 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 3
  %202 = load i32, ptr %201, align 4, !tbaa !31
  %203 = icmp slt i32 %202, %148
  br i1 %203, label %204, label %238

204:                                              ; preds = %200
  %205 = sitofp i32 %202 to float
  %206 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 5
  %207 = load float, ptr %206, align 4, !tbaa !32
  %208 = fmul float %207, %205
  %209 = fptosi float %208 to i32
  %210 = tail call i32 @llvm.smax.i32(i32 %209, i32 %148)
  %211 = sub nsw i32 %210, %202
  %212 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 6
  %213 = load i32, ptr %212, align 8, !tbaa !33
  %214 = icmp slt i32 %211, %213
  %215 = add nsw i32 %213, %202
  %216 = select i1 %214, i32 %215, i32 %210
  %217 = sext i32 %216 to i64
  %218 = shl nsw i64 %217, 1
  %219 = add nsw i64 %218, 31
  %220 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %219) #9
  %221 = getelementptr inbounds i8, ptr %220, i64 31
  %222 = ptrtoint ptr %221 to i64
  %223 = and i64 %222, 31
  %224 = sub nsw i64 0, %223
  %225 = getelementptr inbounds i8, ptr %221, i64 %224
  %226 = load ptr, ptr %196, align 8, !tbaa !34
  %227 = sext i32 %198 to i64
  %228 = shl nsw i64 %227, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %225, ptr align 1 %226, i64 %228, i1 false)
  %229 = icmp eq i32 %202, 0
  br i1 %229, label %235, label %230

230:                                              ; preds = %204
  %231 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  %232 = load ptr, ptr %231, align 8, !tbaa !35
  %233 = icmp eq ptr %232, null
  br i1 %233, label %235, label %234

234:                                              ; preds = %230
  tail call void @_ZdaPv(ptr noundef nonnull %232) #10
  br label %235

235:                                              ; preds = %234, %230, %204
  %236 = getelementptr inbounds %class.ResizeArrayRaw, ptr %196, i64 0, i32 1
  store ptr %220, ptr %236, align 8, !tbaa !35
  store ptr %225, ptr %196, align 8, !tbaa !34
  store i32 %216, ptr %201, align 4, !tbaa !31
  %237 = load ptr, ptr %195, align 8, !tbaa !26
  br label %238

238:                                              ; preds = %192, %200, %235
  %239 = phi ptr [ %196, %192 ], [ %196, %200 ], [ %237, %235 ]
  store i32 %148, ptr %197, align 8, !tbaa !28
  %240 = load ptr, ptr %239, align 8, !tbaa !34
  %241 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 4, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !26
  %243 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 2
  %244 = load i32, ptr %243, align 8, !tbaa !28
  %245 = icmp slt i32 %244, %148
  br i1 %245, label %246, label %284

246:                                              ; preds = %238
  %247 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 3
  %248 = load i32, ptr %247, align 4, !tbaa !31
  %249 = icmp slt i32 %248, %148
  br i1 %249, label %250, label %284

250:                                              ; preds = %246
  %251 = sitofp i32 %248 to float
  %252 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 5
  %253 = load float, ptr %252, align 4, !tbaa !32
  %254 = fmul float %253, %251
  %255 = fptosi float %254 to i32
  %256 = tail call i32 @llvm.smax.i32(i32 %255, i32 %148)
  %257 = sub nsw i32 %256, %248
  %258 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 6
  %259 = load i32, ptr %258, align 8, !tbaa !33
  %260 = icmp slt i32 %257, %259
  %261 = add nsw i32 %259, %248
  %262 = select i1 %260, i32 %261, i32 %256
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 1
  %265 = add nsw i64 %264, 31
  %266 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %265) #9
  %267 = getelementptr inbounds i8, ptr %266, i64 31
  %268 = ptrtoint ptr %267 to i64
  %269 = and i64 %268, 31
  %270 = sub nsw i64 0, %269
  %271 = getelementptr inbounds i8, ptr %267, i64 %270
  %272 = load ptr, ptr %242, align 8, !tbaa !34
  %273 = sext i32 %244 to i64
  %274 = shl nsw i64 %273, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %271, ptr align 1 %272, i64 %274, i1 false)
  %275 = icmp eq i32 %248, 0
  br i1 %275, label %281, label %276

276:                                              ; preds = %250
  %277 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  %278 = load ptr, ptr %277, align 8, !tbaa !35
  %279 = icmp eq ptr %278, null
  br i1 %279, label %281, label %280

280:                                              ; preds = %276
  tail call void @_ZdaPv(ptr noundef nonnull %278) #10
  br label %281

281:                                              ; preds = %280, %276, %250
  %282 = getelementptr inbounds %class.ResizeArrayRaw, ptr %242, i64 0, i32 1
  store ptr %266, ptr %282, align 8, !tbaa !35
  store ptr %271, ptr %242, align 8, !tbaa !34
  store i32 %262, ptr %247, align 4, !tbaa !31
  %283 = load ptr, ptr %241, align 8, !tbaa !26
  br label %284

284:                                              ; preds = %238, %246, %281
  %285 = phi ptr [ %242, %238 ], [ %242, %246 ], [ %283, %281 ]
  store i32 %148, ptr %243, align 8, !tbaa !28
  %286 = load ptr, ptr %285, align 8, !tbaa !34
  %287 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 5, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !26
  %289 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 2
  %290 = load i32, ptr %289, align 8, !tbaa !28
  %291 = icmp slt i32 %290, %148
  br i1 %291, label %292, label %330

292:                                              ; preds = %284
  %293 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 3
  %294 = load i32, ptr %293, align 4, !tbaa !31
  %295 = icmp slt i32 %294, %148
  br i1 %295, label %296, label %330

296:                                              ; preds = %292
  %297 = sitofp i32 %294 to float
  %298 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 5
  %299 = load float, ptr %298, align 4, !tbaa !32
  %300 = fmul float %299, %297
  %301 = fptosi float %300 to i32
  %302 = tail call i32 @llvm.smax.i32(i32 %301, i32 %148)
  %303 = sub nsw i32 %302, %294
  %304 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 6
  %305 = load i32, ptr %304, align 8, !tbaa !33
  %306 = icmp slt i32 %303, %305
  %307 = add nsw i32 %305, %294
  %308 = select i1 %306, i32 %307, i32 %302
  %309 = sext i32 %308 to i64
  %310 = shl nsw i64 %309, 1
  %311 = add nsw i64 %310, 31
  %312 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %311) #9
  %313 = getelementptr inbounds i8, ptr %312, i64 31
  %314 = ptrtoint ptr %313 to i64
  %315 = and i64 %314, 31
  %316 = sub nsw i64 0, %315
  %317 = getelementptr inbounds i8, ptr %313, i64 %316
  %318 = load ptr, ptr %288, align 8, !tbaa !34
  %319 = sext i32 %290 to i64
  %320 = shl nsw i64 %319, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %317, ptr align 1 %318, i64 %320, i1 false)
  %321 = icmp eq i32 %294, 0
  br i1 %321, label %327, label %322

322:                                              ; preds = %296
  %323 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  %324 = load ptr, ptr %323, align 8, !tbaa !35
  %325 = icmp eq ptr %324, null
  br i1 %325, label %327, label %326

326:                                              ; preds = %322
  tail call void @_ZdaPv(ptr noundef nonnull %324) #10
  br label %327

327:                                              ; preds = %326, %322, %296
  %328 = getelementptr inbounds %class.ResizeArrayRaw, ptr %288, i64 0, i32 1
  store ptr %312, ptr %328, align 8, !tbaa !35
  store ptr %317, ptr %288, align 8, !tbaa !34
  store i32 %308, ptr %293, align 4, !tbaa !31
  %329 = load ptr, ptr %287, align 8, !tbaa !26
  br label %330

330:                                              ; preds = %284, %292, %327
  %331 = phi ptr [ %288, %284 ], [ %288, %292 ], [ %329, %327 ]
  store i32 %148, ptr %289, align 8, !tbaa !28
  %332 = load ptr, ptr %331, align 8, !tbaa !34
  %333 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 6, i32 1
  %334 = load ptr, ptr %333, align 8, !tbaa !26
  %335 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 2
  %336 = load i32, ptr %335, align 8, !tbaa !28
  %337 = icmp slt i32 %336, %148
  br i1 %337, label %338, label %376

338:                                              ; preds = %330
  %339 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 3
  %340 = load i32, ptr %339, align 4, !tbaa !31
  %341 = icmp slt i32 %340, %148
  br i1 %341, label %342, label %376

342:                                              ; preds = %338
  %343 = sitofp i32 %340 to float
  %344 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 5
  %345 = load float, ptr %344, align 4, !tbaa !32
  %346 = fmul float %345, %343
  %347 = fptosi float %346 to i32
  %348 = tail call i32 @llvm.smax.i32(i32 %347, i32 %148)
  %349 = sub nsw i32 %348, %340
  %350 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 6
  %351 = load i32, ptr %350, align 8, !tbaa !33
  %352 = icmp slt i32 %349, %351
  %353 = add nsw i32 %351, %340
  %354 = select i1 %352, i32 %353, i32 %348
  %355 = sext i32 %354 to i64
  %356 = shl nsw i64 %355, 1
  %357 = add nsw i64 %356, 31
  %358 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %357) #9
  %359 = getelementptr inbounds i8, ptr %358, i64 31
  %360 = ptrtoint ptr %359 to i64
  %361 = and i64 %360, 31
  %362 = sub nsw i64 0, %361
  %363 = getelementptr inbounds i8, ptr %359, i64 %362
  %364 = load ptr, ptr %334, align 8, !tbaa !34
  %365 = sext i32 %336 to i64
  %366 = shl nsw i64 %365, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %363, ptr align 1 %364, i64 %366, i1 false)
  %367 = icmp eq i32 %340, 0
  br i1 %367, label %373, label %368

368:                                              ; preds = %342
  %369 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  %370 = load ptr, ptr %369, align 8, !tbaa !35
  %371 = icmp eq ptr %370, null
  br i1 %371, label %373, label %372

372:                                              ; preds = %368
  tail call void @_ZdaPv(ptr noundef nonnull %370) #10
  br label %373

373:                                              ; preds = %372, %368, %342
  %374 = getelementptr inbounds %class.ResizeArrayRaw, ptr %334, i64 0, i32 1
  store ptr %358, ptr %374, align 8, !tbaa !35
  store ptr %363, ptr %334, align 8, !tbaa !34
  store i32 %354, ptr %339, align 4, !tbaa !31
  %375 = load ptr, ptr %333, align 8, !tbaa !26
  br label %376

376:                                              ; preds = %330, %338, %373
  %377 = phi ptr [ %334, %330 ], [ %334, %338 ], [ %375, %373 ]
  store i32 %148, ptr %335, align 8, !tbaa !28
  %378 = load ptr, ptr %377, align 8, !tbaa !34
  %379 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 15, i32 1
  %380 = load ptr, ptr %379, align 8, !tbaa !26
  %381 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 2
  %382 = load i32, ptr %381, align 8, !tbaa !28
  %383 = icmp slt i32 %382, %148
  br i1 %383, label %384, label %422

384:                                              ; preds = %376
  %385 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 3
  %386 = load i32, ptr %385, align 4, !tbaa !31
  %387 = icmp slt i32 %386, %148
  br i1 %387, label %388, label %422

388:                                              ; preds = %384
  %389 = sitofp i32 %386 to float
  %390 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 5
  %391 = load float, ptr %390, align 4, !tbaa !32
  %392 = fmul float %391, %389
  %393 = fptosi float %392 to i32
  %394 = tail call i32 @llvm.smax.i32(i32 %393, i32 %148)
  %395 = sub nsw i32 %394, %386
  %396 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 6
  %397 = load i32, ptr %396, align 8, !tbaa !33
  %398 = icmp slt i32 %395, %397
  %399 = add nsw i32 %397, %386
  %400 = select i1 %398, i32 %399, i32 %394
  %401 = sext i32 %400 to i64
  %402 = shl nsw i64 %401, 1
  %403 = add nsw i64 %402, 31
  %404 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %403) #9
  %405 = getelementptr inbounds i8, ptr %404, i64 31
  %406 = ptrtoint ptr %405 to i64
  %407 = and i64 %406, 31
  %408 = sub nsw i64 0, %407
  %409 = getelementptr inbounds i8, ptr %405, i64 %408
  %410 = load ptr, ptr %380, align 8, !tbaa !34
  %411 = sext i32 %382 to i64
  %412 = shl nsw i64 %411, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %409, ptr align 1 %410, i64 %412, i1 false)
  %413 = icmp eq i32 %386, 0
  br i1 %413, label %419, label %414

414:                                              ; preds = %388
  %415 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  %416 = load ptr, ptr %415, align 8, !tbaa !35
  %417 = icmp eq ptr %416, null
  br i1 %417, label %419, label %418

418:                                              ; preds = %414
  tail call void @_ZdaPv(ptr noundef nonnull %416) #10
  br label %419

419:                                              ; preds = %418, %414, %388
  %420 = getelementptr inbounds %class.ResizeArrayRaw, ptr %380, i64 0, i32 1
  store ptr %404, ptr %420, align 8, !tbaa !35
  store ptr %409, ptr %380, align 8, !tbaa !34
  store i32 %400, ptr %385, align 4, !tbaa !31
  %421 = load ptr, ptr %379, align 8, !tbaa !26
  br label %422

422:                                              ; preds = %376, %384, %419
  %423 = phi ptr [ %380, %376 ], [ %380, %384 ], [ %421, %419 ]
  store i32 %148, ptr %381, align 8, !tbaa !28
  %424 = load ptr, ptr %423, align 8, !tbaa !34
  %425 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 16, i32 1
  %426 = load ptr, ptr %425, align 8, !tbaa !26
  %427 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 2
  %428 = load i32, ptr %427, align 8, !tbaa !28
  %429 = icmp slt i32 %428, %148
  br i1 %429, label %430, label %468

430:                                              ; preds = %422
  %431 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 3
  %432 = load i32, ptr %431, align 4, !tbaa !31
  %433 = icmp slt i32 %432, %148
  br i1 %433, label %434, label %468

434:                                              ; preds = %430
  %435 = sitofp i32 %432 to float
  %436 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 5
  %437 = load float, ptr %436, align 4, !tbaa !32
  %438 = fmul float %437, %435
  %439 = fptosi float %438 to i32
  %440 = tail call i32 @llvm.smax.i32(i32 %439, i32 %148)
  %441 = sub nsw i32 %440, %432
  %442 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 6
  %443 = load i32, ptr %442, align 8, !tbaa !33
  %444 = icmp slt i32 %441, %443
  %445 = add nsw i32 %443, %432
  %446 = select i1 %444, i32 %445, i32 %440
  %447 = sext i32 %446 to i64
  %448 = shl nsw i64 %447, 1
  %449 = add nsw i64 %448, 31
  %450 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %449) #9
  %451 = getelementptr inbounds i8, ptr %450, i64 31
  %452 = ptrtoint ptr %451 to i64
  %453 = and i64 %452, 31
  %454 = sub nsw i64 0, %453
  %455 = getelementptr inbounds i8, ptr %451, i64 %454
  %456 = load ptr, ptr %426, align 8, !tbaa !34
  %457 = sext i32 %428 to i64
  %458 = shl nsw i64 %457, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %455, ptr align 1 %456, i64 %458, i1 false)
  %459 = icmp eq i32 %432, 0
  br i1 %459, label %465, label %460

460:                                              ; preds = %434
  %461 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  %462 = load ptr, ptr %461, align 8, !tbaa !35
  %463 = icmp eq ptr %462, null
  br i1 %463, label %465, label %464

464:                                              ; preds = %460
  tail call void @_ZdaPv(ptr noundef nonnull %462) #10
  br label %465

465:                                              ; preds = %464, %460, %434
  %466 = getelementptr inbounds %class.ResizeArrayRaw, ptr %426, i64 0, i32 1
  store ptr %450, ptr %466, align 8, !tbaa !35
  store ptr %455, ptr %426, align 8, !tbaa !34
  store i32 %446, ptr %431, align 4, !tbaa !31
  %467 = load ptr, ptr %425, align 8, !tbaa !26
  br label %468

468:                                              ; preds = %422, %430, %465
  %469 = phi ptr [ %426, %422 ], [ %426, %430 ], [ %467, %465 ]
  store i32 %148, ptr %427, align 8, !tbaa !28
  %470 = load ptr, ptr %469, align 8, !tbaa !34
  br i1 %147, label %612, label %471

471:                                              ; preds = %468
  %472 = icmp sgt i32 %41, 0
  br i1 %472, label %473, label %603

473:                                              ; preds = %471
  %474 = zext i32 %41 to i64
  %475 = and i64 %474, 1
  %476 = icmp eq i32 %41, 1
  br i1 %476, label %509, label %477

477:                                              ; preds = %473
  %478 = and i64 %474, 4294967294
  br label %479

479:                                              ; preds = %504, %477
  %480 = phi i64 [ 0, %477 ], [ %506, %504 ]
  %481 = phi i32 [ 0, %477 ], [ %505, %504 ]
  %482 = phi i64 [ 0, %477 ], [ %507, %504 ]
  %483 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %480, i32 4
  %484 = load i8, ptr %483, align 1
  %485 = and i8 %484, 7
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %492, label %487

487:                                              ; preds = %479
  %488 = trunc i64 %480 to i16
  %489 = add nsw i32 %481, 1
  %490 = sext i32 %481 to i64
  %491 = getelementptr inbounds i16, ptr %194, i64 %490
  store i16 %488, ptr %491, align 2, !tbaa !45
  br label %492

492:                                              ; preds = %479, %487
  %493 = phi i32 [ %489, %487 ], [ %481, %479 ]
  %494 = or i64 %480, 1
  %495 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %494, i32 4
  %496 = load i8, ptr %495, align 1
  %497 = and i8 %496, 7
  %498 = icmp eq i8 %497, 0
  br i1 %498, label %504, label %499

499:                                              ; preds = %492
  %500 = trunc i64 %494 to i16
  %501 = add nsw i32 %493, 1
  %502 = sext i32 %493 to i64
  %503 = getelementptr inbounds i16, ptr %194, i64 %502
  store i16 %500, ptr %503, align 2, !tbaa !45
  br label %504

504:                                              ; preds = %499, %492
  %505 = phi i32 [ %501, %499 ], [ %493, %492 ]
  %506 = add nuw nsw i64 %480, 2
  %507 = add i64 %482, 2
  %508 = icmp eq i64 %507, %478
  br i1 %508, label %509, label %479

509:                                              ; preds = %504, %473
  %510 = phi i32 [ undef, %473 ], [ %505, %504 ]
  %511 = phi i64 [ 0, %473 ], [ %506, %504 ]
  %512 = phi i32 [ 0, %473 ], [ %505, %504 ]
  %513 = icmp eq i64 %475, 0
  br i1 %513, label %524, label %514

514:                                              ; preds = %509
  %515 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %511, i32 4
  %516 = load i8, ptr %515, align 1
  %517 = and i8 %516, 7
  %518 = icmp eq i8 %517, 0
  br i1 %518, label %524, label %519

519:                                              ; preds = %514
  %520 = trunc i64 %511 to i16
  %521 = add nsw i32 %512, 1
  %522 = sext i32 %512 to i64
  %523 = getelementptr inbounds i16, ptr %194, i64 %522
  store i16 %520, ptr %523, align 2, !tbaa !45
  br label %524

524:                                              ; preds = %514, %519, %509
  %525 = phi i32 [ %510, %509 ], [ %521, %519 ], [ %512, %514 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %534, label %527

527:                                              ; preds = %524
  %528 = add nsw i32 %525, -1
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i16, ptr %194, i64 %529
  %531 = load i16, ptr %530, align 2, !tbaa !45
  %532 = sext i32 %525 to i64
  %533 = getelementptr inbounds i16, ptr %194, i64 %532
  store i16 %531, ptr %533, align 2, !tbaa !45
  br label %534

534:                                              ; preds = %527, %524
  %535 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %536 = icmp ne i32 %535, 0
  %537 = icmp sgt i32 %525, 0
  %538 = and i1 %536, %537
  br i1 %538, label %539, label %603

539:                                              ; preds = %534
  %540 = zext i32 %525 to i64
  %541 = and i64 %540, 1
  %542 = icmp eq i32 %525, 1
  br i1 %542, label %577, label %543

543:                                              ; preds = %539
  %544 = and i64 %540, 4294967294
  br label %545

545:                                              ; preds = %572, %543
  %546 = phi i64 [ 0, %543 ], [ %574, %572 ]
  %547 = phi i32 [ 0, %543 ], [ %573, %572 ]
  %548 = phi i64 [ 0, %543 ], [ %575, %572 ]
  %549 = getelementptr inbounds i16, ptr %194, i64 %546
  %550 = load i16, ptr %549, align 2, !tbaa !45
  %551 = zext i16 %550 to i64
  %552 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %551
  %553 = load i32, ptr %552, align 4
  %554 = icmp sgt i32 %553, -1
  br i1 %554, label %555, label %559

555:                                              ; preds = %545
  %556 = add nsw i32 %547, 1
  %557 = sext i32 %547 to i64
  %558 = getelementptr inbounds i16, ptr %240, i64 %557
  store i16 %550, ptr %558, align 2, !tbaa !45
  br label %559

559:                                              ; preds = %545, %555
  %560 = phi i32 [ %547, %545 ], [ %556, %555 ]
  %561 = or i64 %546, 1
  %562 = getelementptr inbounds i16, ptr %194, i64 %561
  %563 = load i16, ptr %562, align 2, !tbaa !45
  %564 = zext i16 %563 to i64
  %565 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %564
  %566 = load i32, ptr %565, align 4
  %567 = icmp sgt i32 %566, -1
  br i1 %567, label %568, label %572

568:                                              ; preds = %559
  %569 = add nsw i32 %560, 1
  %570 = sext i32 %560 to i64
  %571 = getelementptr inbounds i16, ptr %240, i64 %570
  store i16 %563, ptr %571, align 2, !tbaa !45
  br label %572

572:                                              ; preds = %568, %559
  %573 = phi i32 [ %560, %559 ], [ %569, %568 ]
  %574 = add nuw nsw i64 %546, 2
  %575 = add i64 %548, 2
  %576 = icmp eq i64 %575, %544
  br i1 %576, label %577, label %545

577:                                              ; preds = %572, %539
  %578 = phi i32 [ undef, %539 ], [ %573, %572 ]
  %579 = phi i64 [ 0, %539 ], [ %574, %572 ]
  %580 = phi i32 [ 0, %539 ], [ %573, %572 ]
  %581 = icmp eq i64 %541, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %577
  %583 = getelementptr inbounds i16, ptr %194, i64 %579
  %584 = load i16, ptr %583, align 2, !tbaa !45
  %585 = zext i16 %584 to i64
  %586 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %585
  %587 = load i32, ptr %586, align 4
  %588 = icmp sgt i32 %587, -1
  br i1 %588, label %589, label %593

589:                                              ; preds = %582
  %590 = add nsw i32 %580, 1
  %591 = sext i32 %580 to i64
  %592 = getelementptr inbounds i16, ptr %240, i64 %591
  store i16 %584, ptr %592, align 2, !tbaa !45
  br label %593

593:                                              ; preds = %582, %589, %577
  %594 = phi i32 [ %578, %577 ], [ %580, %582 ], [ %590, %589 ]
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %603, label %596

596:                                              ; preds = %593
  %597 = add nsw i32 %594, -1
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i16, ptr %240, i64 %598
  %600 = load i16, ptr %599, align 2, !tbaa !45
  %601 = sext i32 %594 to i64
  %602 = getelementptr inbounds i16, ptr %240, i64 %601
  store i16 %600, ptr %602, align 2, !tbaa !45
  br label %603

603:                                              ; preds = %471, %534, %596, %593
  %604 = phi i32 [ %525, %596 ], [ %525, %593 ], [ %525, %534 ], [ 0, %471 ]
  %605 = phi i32 [ %594, %596 ], [ 0, %593 ], [ 0, %534 ], [ 0, %471 ]
  %606 = load i32, ptr %17, align 8, !tbaa !19
  %607 = add nsw i32 %606, 1
  store i32 %607, ptr %17, align 8, !tbaa !19
  %608 = trunc i32 %39 to i16
  %609 = load ptr, ptr %12, align 8, !tbaa !47
  %610 = sext i32 %606 to i64
  %611 = getelementptr inbounds i16, ptr %609, i64 %610
  store i16 %608, ptr %611, align 2, !tbaa !45
  br label %622

612:                                              ; preds = %468
  %613 = load ptr, ptr %12, align 8, !tbaa !47
  %614 = load i32, ptr %17, align 8, !tbaa !19
  %615 = add nsw i32 %614, 1
  store i32 %615, ptr %17, align 8, !tbaa !19
  %616 = sext i32 %614 to i64
  %617 = getelementptr inbounds i16, ptr %613, i64 %616
  %618 = load i16, ptr %617, align 2, !tbaa !45
  %619 = zext i16 %618 to i32
  %620 = icmp eq i32 %39, %619
  br i1 %620, label %622, label %621

621:                                              ; preds = %612
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %622

622:                                              ; preds = %612, %621, %603
  %623 = phi i32 [ 0, %621 ], [ 0, %612 ], [ %604, %603 ]
  %624 = phi i32 [ 0, %621 ], [ 0, %612 ], [ %605, %603 ]
  %625 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %50, i64 0, i32 17, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %626, i32 noundef %39)
  %627 = load ptr, ptr %625, align 8, !tbaa !174
  %628 = load ptr, ptr %627, align 8, !tbaa !176
  %629 = sext i32 %39 to i64
  %630 = mul nsw i64 %629, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %628, i8 0, i64 %630, i1 false)
  %631 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %632 = load i32, ptr %631, align 4, !tbaa !49
  %633 = add nsw i32 %632, -1
  %634 = add nsw i32 %39, -1
  %635 = icmp sgt i32 %39, 1
  br i1 %635, label %636, label %2566

636:                                              ; preds = %622
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %638 = load i32, ptr %637, align 4, !tbaa !48
  %639 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %640 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %641 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %642 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %643 = ptrtoint ptr %424 to i64
  %644 = add nsw i32 %41, 10
  %645 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %646 = ptrtoint ptr %470 to i64
  %647 = ptrtoint ptr %332 to i64
  %648 = ptrtoint ptr %378 to i64
  %649 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %650 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %651 = fneg double %32
  %652 = getelementptr inbounds double, ptr %6, i64 26
  %653 = getelementptr inbounds double, ptr %6, i64 28
  %654 = getelementptr inbounds double, ptr %6, i64 29
  %655 = getelementptr inbounds double, ptr %6, i64 31
  %656 = fadd double %33, -1.000000e+00
  %657 = fadd double %656, 1.000000e+00
  %658 = sext i32 %623 to i64
  %659 = sext i32 %624 to i64
  %660 = insertelement <2 x double> poison, double %27, i64 0
  %661 = shufflevector <2 x double> %660, <2 x double> poison, <2 x i32> zeroinitializer
  %662 = getelementptr inbounds i16, ptr %470, i64 1
  %663 = getelementptr inbounds i16, ptr %470, i64 1
  br label %664

664:                                              ; preds = %636, %2551
  %665 = phi i32 [ 0, %636 ], [ %2562, %2551 ]
  %666 = phi i32 [ 0, %636 ], [ %2564, %2551 ]
  %667 = phi ptr [ null, %636 ], [ %2560, %2551 ]
  %668 = phi ptr [ null, %636 ], [ %2559, %2551 ]
  %669 = phi ptr [ null, %636 ], [ %2558, %2551 ]
  %670 = phi i32 [ 0, %636 ], [ %2557, %2551 ]
  %671 = phi i32 [ 0, %636 ], [ %2556, %2551 ]
  %672 = phi i32 [ 0, %636 ], [ %2555, %2551 ]
  %673 = phi i32 [ 0, %636 ], [ %2554, %2551 ]
  %674 = phi i32 [ 0, %636 ], [ %2553, %2551 ]
  %675 = phi i32 [ %638, %636 ], [ %2552, %2551 ]
  %676 = phi <2 x double> [ zeroinitializer, %636 ], [ %2563, %2551 ]
  %677 = sext i32 %666 to i64
  %678 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %677
  %679 = getelementptr inbounds %struct.CompAtomExt, ptr %46, i64 %677
  %680 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %677, i32 4
  %681 = load i8, ptr %680, align 1
  %682 = lshr i8 %681, 3
  %683 = and i8 %682, 15
  %684 = zext i8 %683 to i32
  %685 = icmp eq i8 %683, 0
  br i1 %685, label %692, label %686

686:                                              ; preds = %664
  %687 = icmp eq i32 %675, 0
  br i1 %687, label %692, label %688

688:                                              ; preds = %686
  %689 = add nsw i32 %675, -1
  %690 = add nsw i32 %666, -1
  %691 = add i32 %690, %684
  br label %2551

692:                                              ; preds = %686, %664
  %693 = phi i32 [ %675, %664 ], [ %633, %686 ]
  %694 = load <2 x double>, ptr %678, align 8, !tbaa !15
  %695 = fadd <2 x double> %19, %694
  %696 = getelementptr inbounds %class.Vector, ptr %678, i64 0, i32 2
  %697 = load double, ptr %696, align 8, !tbaa !50
  %698 = fadd double %21, %697
  %699 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %677, i32 3
  %700 = load i8, ptr %699, align 2, !tbaa !52
  %701 = zext i8 %700 to i32
  %702 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %703 = fsub double %697, %702
  %704 = fmul double %10, %703
  %705 = tail call double @llvm.floor.f64(double %704)
  %706 = fptosi double %705 to i32
  %707 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %708 = icmp slt i32 %706, 0
  %709 = select i1 %708, i32 %707, i32 0
  %710 = icmp sgt i32 %707, %706
  %711 = select i1 %710, i32 0, i32 %707
  %712 = sub i32 %706, %711
  %713 = add i32 %712, %709
  %714 = add nsw i32 %666, %684
  %715 = select i1 %685, i32 %670, i32 %714
  br i1 %147, label %2065, label %716

716:                                              ; preds = %692
  %717 = load i32, ptr %679, align 4
  %718 = shl i32 %717, 2
  %719 = ashr exact i32 %718, 2
  %720 = load ptr, ptr %639, align 8, !tbaa !53
  %721 = sext i32 %719 to i64
  %722 = getelementptr inbounds %class.ExclusionCheck, ptr %720, i64 %721
  %723 = load i32, ptr %722, align 8, !tbaa !55
  %724 = getelementptr inbounds %class.ExclusionCheck, ptr %720, i64 %721, i32 1
  %725 = load i32, ptr %724, align 4, !tbaa !57
  %726 = getelementptr inbounds %class.ExclusionCheck, ptr %720, i64 %721, i32 2
  %727 = load ptr, ptr %726, align 8, !tbaa !58
  %728 = icmp eq ptr %727, null
  br i1 %728, label %733, label %729

729:                                              ; preds = %716
  %730 = sext i32 %723 to i64
  %731 = sub nsw i64 0, %730
  %732 = getelementptr inbounds i8, ptr %727, i64 %731
  br label %959

733:                                              ; preds = %716
  %734 = icmp eq ptr %667, null
  br i1 %734, label %822, label %735

735:                                              ; preds = %733
  %736 = load i32, ptr %668, align 4, !tbaa !5
  %737 = icmp slt i32 %736, 1
  br i1 %737, label %785, label %738

738:                                              ; preds = %735
  %739 = add nuw i32 %736, 1
  %740 = zext i32 %739 to i64
  %741 = add nsw i64 %740, -1
  %742 = add nsw i64 %740, -2
  %743 = and i64 %741, 3
  %744 = icmp ult i64 %742, 3
  br i1 %744, label %772, label %745

745:                                              ; preds = %738
  %746 = and i64 %741, -4
  br label %747

747:                                              ; preds = %747, %745
  %748 = phi i64 [ 1, %745 ], [ %769, %747 ]
  %749 = phi i64 [ 0, %745 ], [ %770, %747 ]
  %750 = getelementptr inbounds i32, ptr %668, i64 %748
  %751 = load i32, ptr %750, align 4, !tbaa !5
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds i8, ptr %667, i64 %752
  store i8 0, ptr %753, align 1, !tbaa !59
  %754 = add nuw nsw i64 %748, 1
  %755 = getelementptr inbounds i32, ptr %668, i64 %754
  %756 = load i32, ptr %755, align 4, !tbaa !5
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds i8, ptr %667, i64 %757
  store i8 0, ptr %758, align 1, !tbaa !59
  %759 = add nuw nsw i64 %748, 2
  %760 = getelementptr inbounds i32, ptr %668, i64 %759
  %761 = load i32, ptr %760, align 4, !tbaa !5
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8, ptr %667, i64 %762
  store i8 0, ptr %763, align 1, !tbaa !59
  %764 = add nuw nsw i64 %748, 3
  %765 = getelementptr inbounds i32, ptr %668, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !5
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds i8, ptr %667, i64 %767
  store i8 0, ptr %768, align 1, !tbaa !59
  %769 = add nuw nsw i64 %748, 4
  %770 = add i64 %749, 4
  %771 = icmp eq i64 %770, %746
  br i1 %771, label %772, label %747

772:                                              ; preds = %747, %738
  %773 = phi i64 [ 1, %738 ], [ %769, %747 ]
  %774 = icmp eq i64 %743, 0
  br i1 %774, label %785, label %775

775:                                              ; preds = %772, %775
  %776 = phi i64 [ %782, %775 ], [ %773, %772 ]
  %777 = phi i64 [ %783, %775 ], [ 0, %772 ]
  %778 = getelementptr inbounds i32, ptr %668, i64 %776
  %779 = load i32, ptr %778, align 4, !tbaa !5
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, ptr %667, i64 %780
  store i8 0, ptr %781, align 1, !tbaa !59
  %782 = add nuw nsw i64 %776, 1
  %783 = add i64 %777, 1
  %784 = icmp eq i64 %783, %743
  br i1 %784, label %785, label %775, !llvm.loop !194

785:                                              ; preds = %772, %775, %735
  %786 = load i32, ptr %669, align 4, !tbaa !5
  %787 = icmp slt i32 %786, 1
  br i1 %787, label %842, label %788

788:                                              ; preds = %785
  %789 = add nuw i32 %786, 1
  %790 = zext i32 %789 to i64
  %791 = add nsw i64 %790, -1
  %792 = add nsw i64 %790, -2
  %793 = and i64 %791, 3
  %794 = icmp ult i64 %792, 3
  br i1 %794, label %829, label %795

795:                                              ; preds = %788
  %796 = and i64 %791, -4
  br label %797

797:                                              ; preds = %797, %795
  %798 = phi i64 [ 1, %795 ], [ %819, %797 ]
  %799 = phi i64 [ 0, %795 ], [ %820, %797 ]
  %800 = getelementptr inbounds i32, ptr %669, i64 %798
  %801 = load i32, ptr %800, align 4, !tbaa !5
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, ptr %667, i64 %802
  store i8 0, ptr %803, align 1, !tbaa !59
  %804 = add nuw nsw i64 %798, 1
  %805 = getelementptr inbounds i32, ptr %669, i64 %804
  %806 = load i32, ptr %805, align 4, !tbaa !5
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i8, ptr %667, i64 %807
  store i8 0, ptr %808, align 1, !tbaa !59
  %809 = add nuw nsw i64 %798, 2
  %810 = getelementptr inbounds i32, ptr %669, i64 %809
  %811 = load i32, ptr %810, align 4, !tbaa !5
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i8, ptr %667, i64 %812
  store i8 0, ptr %813, align 1, !tbaa !59
  %814 = add nuw nsw i64 %798, 3
  %815 = getelementptr inbounds i32, ptr %669, i64 %814
  %816 = load i32, ptr %815, align 4, !tbaa !5
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i8, ptr %667, i64 %817
  store i8 0, ptr %818, align 1, !tbaa !59
  %819 = add nuw nsw i64 %798, 4
  %820 = add i64 %799, 4
  %821 = icmp eq i64 %820, %796
  br i1 %821, label %829, label %797

822:                                              ; preds = %733
  %823 = load i32, ptr %640, align 8, !tbaa !62
  %824 = tail call i32 @llvm.smax.i32(i32 %823, i32 -1)
  %825 = sext i32 %824 to i64
  %826 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %825) #9
  %827 = load i32, ptr %640, align 8, !tbaa !62
  %828 = sext i32 %827 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %826, i8 0, i64 %828, i1 false)
  br label %842

829:                                              ; preds = %797, %788
  %830 = phi i64 [ 1, %788 ], [ %819, %797 ]
  %831 = icmp eq i64 %793, 0
  br i1 %831, label %842, label %832

832:                                              ; preds = %829, %832
  %833 = phi i64 [ %839, %832 ], [ %830, %829 ]
  %834 = phi i64 [ %840, %832 ], [ 0, %829 ]
  %835 = getelementptr inbounds i32, ptr %669, i64 %833
  %836 = load i32, ptr %835, align 4, !tbaa !5
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds i8, ptr %667, i64 %837
  store i8 0, ptr %838, align 1, !tbaa !59
  %839 = add nuw nsw i64 %833, 1
  %840 = add i64 %834, 1
  %841 = icmp eq i64 %840, %793
  br i1 %841, label %842, label %832, !llvm.loop !195

842:                                              ; preds = %829, %832, %785, %822
  %843 = phi ptr [ %826, %822 ], [ %667, %785 ], [ %667, %832 ], [ %667, %829 ]
  %844 = load i32, ptr %679, align 4
  %845 = shl i32 %844, 2
  %846 = ashr exact i32 %845, 2
  %847 = load ptr, ptr %641, align 8, !tbaa !64
  %848 = sext i32 %846 to i64
  %849 = getelementptr inbounds ptr, ptr %847, i64 %848
  %850 = load ptr, ptr %849, align 8, !tbaa !24
  %851 = load i32, ptr %850, align 4, !tbaa !5
  %852 = icmp slt i32 %851, 1
  br i1 %852, label %905, label %853

853:                                              ; preds = %842
  %854 = add nuw i32 %851, 1
  %855 = zext i32 %854 to i64
  %856 = add nsw i64 %855, -1
  %857 = add nsw i64 %855, -2
  %858 = and i64 %856, 3
  %859 = icmp ult i64 %857, 3
  br i1 %859, label %887, label %860

860:                                              ; preds = %853
  %861 = and i64 %856, -4
  br label %862

862:                                              ; preds = %862, %860
  %863 = phi i64 [ 1, %860 ], [ %884, %862 ]
  %864 = phi i64 [ 0, %860 ], [ %885, %862 ]
  %865 = getelementptr inbounds i32, ptr %850, i64 %863
  %866 = load i32, ptr %865, align 4, !tbaa !5
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i8, ptr %843, i64 %867
  store i8 1, ptr %868, align 1, !tbaa !59
  %869 = add nuw nsw i64 %863, 1
  %870 = getelementptr inbounds i32, ptr %850, i64 %869
  %871 = load i32, ptr %870, align 4, !tbaa !5
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, ptr %843, i64 %872
  store i8 1, ptr %873, align 1, !tbaa !59
  %874 = add nuw nsw i64 %863, 2
  %875 = getelementptr inbounds i32, ptr %850, i64 %874
  %876 = load i32, ptr %875, align 4, !tbaa !5
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i8, ptr %843, i64 %877
  store i8 1, ptr %878, align 1, !tbaa !59
  %879 = add nuw nsw i64 %863, 3
  %880 = getelementptr inbounds i32, ptr %850, i64 %879
  %881 = load i32, ptr %880, align 4, !tbaa !5
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, ptr %843, i64 %882
  store i8 1, ptr %883, align 1, !tbaa !59
  %884 = add nuw nsw i64 %863, 4
  %885 = add i64 %864, 4
  %886 = icmp eq i64 %885, %861
  br i1 %886, label %887, label %862

887:                                              ; preds = %862, %853
  %888 = phi i64 [ 1, %853 ], [ %884, %862 ]
  %889 = icmp eq i64 %858, 0
  br i1 %889, label %900, label %890

890:                                              ; preds = %887, %890
  %891 = phi i64 [ %897, %890 ], [ %888, %887 ]
  %892 = phi i64 [ %898, %890 ], [ 0, %887 ]
  %893 = getelementptr inbounds i32, ptr %850, i64 %891
  %894 = load i32, ptr %893, align 4, !tbaa !5
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds i8, ptr %843, i64 %895
  store i8 1, ptr %896, align 1, !tbaa !59
  %897 = add nuw nsw i64 %891, 1
  %898 = add i64 %892, 1
  %899 = icmp eq i64 %898, %858
  br i1 %899, label %900, label %890, !llvm.loop !196

900:                                              ; preds = %890, %887
  %901 = load i32, ptr %679, align 4
  %902 = shl i32 %901, 2
  %903 = ashr exact i32 %902, 2
  %904 = sext i32 %903 to i64
  br label %905

905:                                              ; preds = %900, %842
  %906 = phi i64 [ %904, %900 ], [ %848, %842 ]
  %907 = load ptr, ptr %642, align 8, !tbaa !66
  %908 = getelementptr inbounds ptr, ptr %907, i64 %906
  %909 = load ptr, ptr %908, align 8, !tbaa !24
  %910 = load i32, ptr %909, align 4, !tbaa !5
  %911 = icmp slt i32 %910, 1
  br i1 %911, label %959, label %912

912:                                              ; preds = %905
  %913 = add nuw i32 %910, 1
  %914 = zext i32 %913 to i64
  %915 = add nsw i64 %914, -1
  %916 = add nsw i64 %914, -2
  %917 = and i64 %915, 3
  %918 = icmp ult i64 %916, 3
  br i1 %918, label %946, label %919

919:                                              ; preds = %912
  %920 = and i64 %915, -4
  br label %921

921:                                              ; preds = %921, %919
  %922 = phi i64 [ 1, %919 ], [ %943, %921 ]
  %923 = phi i64 [ 0, %919 ], [ %944, %921 ]
  %924 = getelementptr inbounds i32, ptr %909, i64 %922
  %925 = load i32, ptr %924, align 4, !tbaa !5
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds i8, ptr %843, i64 %926
  store i8 2, ptr %927, align 1, !tbaa !59
  %928 = add nuw nsw i64 %922, 1
  %929 = getelementptr inbounds i32, ptr %909, i64 %928
  %930 = load i32, ptr %929, align 4, !tbaa !5
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8, ptr %843, i64 %931
  store i8 2, ptr %932, align 1, !tbaa !59
  %933 = add nuw nsw i64 %922, 2
  %934 = getelementptr inbounds i32, ptr %909, i64 %933
  %935 = load i32, ptr %934, align 4, !tbaa !5
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i8, ptr %843, i64 %936
  store i8 2, ptr %937, align 1, !tbaa !59
  %938 = add nuw nsw i64 %922, 3
  %939 = getelementptr inbounds i32, ptr %909, i64 %938
  %940 = load i32, ptr %939, align 4, !tbaa !5
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i8, ptr %843, i64 %941
  store i8 2, ptr %942, align 1, !tbaa !59
  %943 = add nuw nsw i64 %922, 4
  %944 = add i64 %923, 4
  %945 = icmp eq i64 %944, %920
  br i1 %945, label %946, label %921

946:                                              ; preds = %921, %912
  %947 = phi i64 [ 1, %912 ], [ %943, %921 ]
  %948 = icmp eq i64 %917, 0
  br i1 %948, label %959, label %949

949:                                              ; preds = %946, %949
  %950 = phi i64 [ %956, %949 ], [ %947, %946 ]
  %951 = phi i64 [ %957, %949 ], [ 0, %946 ]
  %952 = getelementptr inbounds i32, ptr %909, i64 %950
  %953 = load i32, ptr %952, align 4, !tbaa !5
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i8, ptr %843, i64 %954
  store i8 2, ptr %955, align 1, !tbaa !59
  %956 = add nuw nsw i64 %950, 1
  %957 = add i64 %951, 1
  %958 = icmp eq i64 %957, %917
  br i1 %958, label %959, label %949, !llvm.loop !197

959:                                              ; preds = %946, %949, %905, %729
  %960 = phi ptr [ %732, %729 ], [ %843, %905 ], [ %843, %949 ], [ %843, %946 ]
  %961 = phi ptr [ %669, %729 ], [ %909, %905 ], [ %909, %949 ], [ %909, %946 ]
  %962 = phi ptr [ %668, %729 ], [ %850, %905 ], [ %850, %949 ], [ %850, %946 ]
  %963 = phi ptr [ %667, %729 ], [ %843, %905 ], [ %843, %949 ], [ %843, %946 ]
  %964 = load i8, ptr %680, align 1
  %965 = and i8 %964, 7
  %966 = icmp eq i8 %965, 0
  br i1 %966, label %1260, label %967

967:                                              ; preds = %959
  %968 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %973, label %970

970:                                              ; preds = %967
  %971 = load i32, ptr %679, align 4
  %972 = icmp slt i32 %971, 0
  br label %973

973:                                              ; preds = %970, %967
  %974 = phi i1 [ false, %967 ], [ %972, %970 ]
  %975 = and i8 %964, 120
  %976 = icmp eq i8 %975, 0
  br i1 %976, label %1008, label %977

977:                                              ; preds = %973
  %978 = icmp slt i32 %671, %623
  br i1 %978, label %979, label %992

979:                                              ; preds = %977
  %980 = sext i32 %671 to i64
  br label %981

981:                                              ; preds = %979, %987
  %982 = phi i64 [ %980, %979 ], [ %988, %987 ]
  %983 = getelementptr inbounds i16, ptr %194, i64 %982
  %984 = load i16, ptr %983, align 2, !tbaa !45
  %985 = zext i16 %984 to i32
  %986 = icmp sgt i32 %715, %985
  br i1 %986, label %987, label %990

987:                                              ; preds = %981
  %988 = add nsw i64 %982, 1
  %989 = icmp eq i64 %988, %658
  br i1 %989, label %992, label %981

990:                                              ; preds = %981
  %991 = trunc i64 %982 to i32
  br label %992

992:                                              ; preds = %987, %990, %977
  %993 = phi i32 [ %671, %977 ], [ %991, %990 ], [ %623, %987 ]
  %994 = icmp slt i32 %672, %624
  br i1 %994, label %995, label %1008

995:                                              ; preds = %992
  %996 = sext i32 %672 to i64
  br label %997

997:                                              ; preds = %995, %1003
  %998 = phi i64 [ %996, %995 ], [ %1004, %1003 ]
  %999 = getelementptr inbounds i16, ptr %240, i64 %998
  %1000 = load i16, ptr %999, align 2, !tbaa !45
  %1001 = zext i16 %1000 to i32
  %1002 = icmp sgt i32 %715, %1001
  br i1 %1002, label %1003, label %1006

1003:                                             ; preds = %997
  %1004 = add nsw i64 %998, 1
  %1005 = icmp eq i64 %1004, %659
  br i1 %1005, label %1008, label %997

1006:                                             ; preds = %997
  %1007 = trunc i64 %998 to i32
  br label %1008

1008:                                             ; preds = %1003, %1006, %992, %973
  %1009 = phi i32 [ %672, %973 ], [ %672, %992 ], [ %1007, %1006 ], [ %624, %1003 ]
  %1010 = phi i32 [ %671, %973 ], [ %993, %992 ], [ %993, %1006 ], [ %993, %1003 ]
  %1011 = add nsw i32 %666, 1
  %1012 = icmp slt i32 %1011, %715
  br i1 %1012, label %1013, label %1078

1013:                                             ; preds = %1008
  %1014 = xor i32 %666, -1
  %1015 = add i32 %715, %1014
  %1016 = zext i32 %1015 to i64
  %1017 = icmp ult i32 %1015, 8
  br i1 %1017, label %1067, label %1018

1018:                                             ; preds = %1013
  %1019 = icmp ult i32 %1015, 64
  br i1 %1019, label %1048, label %1020

1020:                                             ; preds = %1018
  %1021 = and i64 %1016, 4294967232
  %1022 = trunc i32 %1011 to i16
  %1023 = insertelement <16 x i16> poison, i16 %1022, i64 0
  %1024 = shufflevector <16 x i16> %1023, <16 x i16> poison, <16 x i32> zeroinitializer
  %1025 = add <16 x i16> %1024, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1026 = trunc i64 %1021 to i32
  %1027 = add i32 %1011, %1026
  br label %1028

1028:                                             ; preds = %1028, %1020
  %1029 = phi i64 [ 0, %1020 ], [ %1038, %1028 ]
  %1030 = phi <16 x i16> [ %1025, %1020 ], [ %1039, %1028 ]
  %1031 = add <16 x i16> %1030, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1032 = add <16 x i16> %1030, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1033 = add <16 x i16> %1030, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1034 = getelementptr inbounds i16, ptr %424, i64 %1029
  store <16 x i16> %1030, ptr %1034, align 2, !tbaa !45
  %1035 = getelementptr inbounds i16, ptr %1034, i64 16
  store <16 x i16> %1031, ptr %1035, align 2, !tbaa !45
  %1036 = getelementptr inbounds i16, ptr %1034, i64 32
  store <16 x i16> %1032, ptr %1036, align 2, !tbaa !45
  %1037 = getelementptr inbounds i16, ptr %1034, i64 48
  store <16 x i16> %1033, ptr %1037, align 2, !tbaa !45
  %1038 = add nuw i64 %1029, 64
  %1039 = add <16 x i16> %1030, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1040 = icmp eq i64 %1038, %1021
  br i1 %1040, label %1041, label %1028, !llvm.loop !198

1041:                                             ; preds = %1028
  %1042 = icmp eq i64 %1021, %1016
  br i1 %1042, label %1078, label %1043

1043:                                             ; preds = %1041
  %1044 = trunc i64 %1021 to i32
  %1045 = add i32 %1011, %1044
  %1046 = and i64 %1016, 56
  %1047 = icmp eq i64 %1046, 0
  br i1 %1047, label %1067, label %1048

1048:                                             ; preds = %1018, %1043
  %1049 = phi i32 [ %1027, %1043 ], [ %1011, %1018 ]
  %1050 = phi i64 [ %1021, %1043 ], [ 0, %1018 ]
  %1051 = and i64 %1016, 4294967288
  %1052 = trunc i64 %1051 to i32
  %1053 = add i32 %1011, %1052
  %1054 = trunc i32 %1049 to i16
  %1055 = insertelement <8 x i16> poison, i16 %1054, i64 0
  %1056 = shufflevector <8 x i16> %1055, <8 x i16> poison, <8 x i32> zeroinitializer
  %1057 = add <8 x i16> %1056, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1058

1058:                                             ; preds = %1058, %1048
  %1059 = phi i64 [ %1050, %1048 ], [ %1062, %1058 ]
  %1060 = phi <8 x i16> [ %1057, %1048 ], [ %1063, %1058 ]
  %1061 = getelementptr inbounds i16, ptr %424, i64 %1059
  store <8 x i16> %1060, ptr %1061, align 2, !tbaa !45
  %1062 = add nuw i64 %1059, 8
  %1063 = add <8 x i16> %1060, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1064 = icmp eq i64 %1062, %1051
  br i1 %1064, label %1065, label %1058, !llvm.loop !199

1065:                                             ; preds = %1058
  %1066 = icmp eq i64 %1051, %1016
  br i1 %1066, label %1078, label %1067

1067:                                             ; preds = %1013, %1043, %1065
  %1068 = phi i64 [ 0, %1013 ], [ %1021, %1043 ], [ %1051, %1065 ]
  %1069 = phi i32 [ %1011, %1013 ], [ %1045, %1043 ], [ %1053, %1065 ]
  br label %1070

1070:                                             ; preds = %1067, %1070
  %1071 = phi i64 [ %1074, %1070 ], [ %1068, %1067 ]
  %1072 = phi i32 [ %1076, %1070 ], [ %1069, %1067 ]
  %1073 = trunc i32 %1072 to i16
  %1074 = add nuw nsw i64 %1071, 1
  %1075 = getelementptr inbounds i16, ptr %424, i64 %1071
  store i16 %1073, ptr %1075, align 2, !tbaa !45
  %1076 = add nsw i32 %1072, 1
  %1077 = icmp eq i64 %1074, %1016
  br i1 %1077, label %1078, label %1070, !llvm.loop !200

1078:                                             ; preds = %1070, %1041, %1065, %1008
  %1079 = phi i32 [ 0, %1008 ], [ %1015, %1065 ], [ %1015, %1041 ], [ %1015, %1070 ]
  %1080 = zext i32 %1079 to i64
  %1081 = getelementptr inbounds i16, ptr %424, i64 %1080
  %1082 = select i1 %974, ptr %240, ptr %194
  %1083 = select i1 %974, i32 %1009, i32 %1010
  %1084 = select i1 %974, i32 %624, i32 %623
  %1085 = icmp slt i32 %1083, %1084
  br i1 %1085, label %1086, label %1245

1086:                                             ; preds = %1078
  %1087 = sub nsw i32 %1084, %1083
  %1088 = icmp sgt i32 %1087, 6
  br i1 %1088, label %1089, label %1182

1089:                                             ; preds = %1086
  %1090 = add nsw i32 %1084, -2
  %1091 = add nsw i32 %1083, 2
  %1092 = icmp slt i32 %1091, %1090
  br i1 %1092, label %1093, label %1182

1093:                                             ; preds = %1089
  %1094 = add nsw i32 %1083, 1
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds i16, ptr %1082, i64 %1095
  %1097 = load i16, ptr %1096, align 2, !tbaa !45
  %1098 = zext i16 %1097 to i64
  %1099 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1098
  %1100 = getelementptr inbounds %class.Vector, ptr %1099, i64 0, i32 2
  %1101 = load double, ptr %1100, align 8, !tbaa !50
  %1102 = sext i32 %1083 to i64
  %1103 = getelementptr inbounds i16, ptr %1082, i64 %1102
  %1104 = load i16, ptr %1103, align 2, !tbaa !45
  %1105 = zext i16 %1104 to i64
  %1106 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1105
  %1107 = getelementptr inbounds %class.Vector, ptr %1106, i64 0, i32 2
  %1108 = load double, ptr %1107, align 8, !tbaa !50
  %1109 = getelementptr inbounds %class.Vector, ptr %1099, i64 0, i32 1
  %1110 = load double, ptr %1109, align 8, !tbaa !68
  %1111 = getelementptr inbounds %class.Vector, ptr %1106, i64 0, i32 1
  %1112 = load double, ptr %1111, align 8, !tbaa !68
  %1113 = load double, ptr %1099, align 8, !tbaa !69
  %1114 = load double, ptr %1106, align 8, !tbaa !69
  %1115 = sext i32 %1091 to i64
  %1116 = sext i32 %1090 to i64
  %1117 = insertelement <2 x double> poison, double %1101, i64 0
  %1118 = insertelement <2 x double> %1117, double %1108, i64 1
  %1119 = insertelement <2 x double> poison, double %1110, i64 0
  %1120 = insertelement <2 x double> %1119, double %1112, i64 1
  %1121 = insertelement <2 x double> poison, double %1113, i64 0
  %1122 = insertelement <2 x double> %1121, double %1114, i64 1
  %1123 = insertelement <2 x double> poison, double %698, i64 0
  %1124 = shufflevector <2 x double> %1123, <2 x double> poison, <2 x i32> zeroinitializer
  %1125 = shufflevector <2 x double> %695, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1126 = shufflevector <2 x double> %695, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1127

1127:                                             ; preds = %1093, %1127
  %1128 = phi i64 [ %1115, %1093 ], [ %1173, %1127 ]
  %1129 = phi i32 [ %1083, %1093 ], [ %1175, %1127 ]
  %1130 = phi i32 [ 0, %1093 ], [ %1172, %1127 ]
  %1131 = phi i16 [ %1104, %1093 ], [ %1138, %1127 ]
  %1132 = phi i16 [ %1097, %1093 ], [ %1142, %1127 ]
  %1133 = phi <2 x double> [ %1118, %1093 ], [ %1177, %1127 ]
  %1134 = phi <2 x double> [ %1120, %1093 ], [ %1179, %1127 ]
  %1135 = phi <2 x double> [ %1122, %1093 ], [ %1181, %1127 ]
  %1136 = fsub <2 x double> %1124, %1133
  %1137 = getelementptr inbounds i16, ptr %1082, i64 %1128
  %1138 = load i16, ptr %1137, align 2, !tbaa !45
  %1139 = add nsw i32 %1129, 3
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds i16, ptr %1082, i64 %1140
  %1142 = load i16, ptr %1141, align 2, !tbaa !45
  %1143 = zext i16 %1138 to i64
  %1144 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1143
  %1145 = load double, ptr %1144, align 8, !tbaa !69
  %1146 = zext i16 %1142 to i64
  %1147 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1146
  %1148 = load double, ptr %1147, align 8, !tbaa !69
  %1149 = getelementptr inbounds %class.Vector, ptr %1144, i64 0, i32 1
  %1150 = load double, ptr %1149, align 8, !tbaa !68
  %1151 = getelementptr inbounds %class.Vector, ptr %1147, i64 0, i32 1
  %1152 = load double, ptr %1151, align 8, !tbaa !68
  %1153 = getelementptr inbounds %class.Vector, ptr %1144, i64 0, i32 2
  %1154 = load double, ptr %1153, align 8, !tbaa !50
  %1155 = getelementptr inbounds %class.Vector, ptr %1147, i64 0, i32 2
  %1156 = load double, ptr %1155, align 8, !tbaa !50
  %1157 = fsub <2 x double> %1126, %1135
  %1158 = fmul <2 x double> %1157, %1157
  %1159 = fsub <2 x double> %1125, %1134
  %1160 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1159, <2 x double> %1159, <2 x double> %1158)
  %1161 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1136, <2 x double> %1136, <2 x double> %1160)
  %1162 = fcmp olt <2 x double> %1161, %661
  %1163 = zext i32 %1130 to i64
  %1164 = getelementptr inbounds i16, ptr %286, i64 %1163
  store i16 %1131, ptr %1164, align 2, !tbaa !45
  %1165 = extractelement <2 x i1> %1162, i64 1
  %1166 = zext i1 %1165 to i32
  %1167 = add nuw nsw i32 %1130, %1166
  %1168 = zext i32 %1167 to i64
  %1169 = getelementptr inbounds i16, ptr %286, i64 %1168
  store i16 %1132, ptr %1169, align 2, !tbaa !45
  %1170 = extractelement <2 x i1> %1162, i64 0
  %1171 = zext i1 %1170 to i32
  %1172 = add i32 %1167, %1171
  %1173 = add nsw i64 %1128, 2
  %1174 = icmp slt i64 %1173, %1116
  %1175 = trunc i64 %1128 to i32
  %1176 = insertelement <2 x double> poison, double %1156, i64 0
  %1177 = insertelement <2 x double> %1176, double %1154, i64 1
  %1178 = insertelement <2 x double> poison, double %1152, i64 0
  %1179 = insertelement <2 x double> %1178, double %1150, i64 1
  %1180 = insertelement <2 x double> poison, double %1148, i64 0
  %1181 = insertelement <2 x double> %1180, double %1145, i64 1
  br i1 %1174, label %1127, label %1182

1182:                                             ; preds = %1127, %1089, %1086
  %1183 = phi i32 [ 0, %1086 ], [ 0, %1089 ], [ %1172, %1127 ]
  %1184 = phi i32 [ %1083, %1086 ], [ %1083, %1089 ], [ %1175, %1127 ]
  %1185 = icmp slt i32 %1184, %1084
  br i1 %1185, label %1186, label %1191

1186:                                             ; preds = %1182
  %1187 = sext i32 %1184 to i64
  %1188 = sext i32 %1084 to i64
  %1189 = extractelement <2 x double> %695, i64 0
  %1190 = extractelement <2 x double> %695, i64 1
  br label %1196

1191:                                             ; preds = %1219, %1182
  %1192 = phi i32 [ %1183, %1182 ], [ %1220, %1219 ]
  %1193 = icmp sgt i32 %1192, 0
  br i1 %1193, label %1194, label %1245

1194:                                             ; preds = %1191
  %1195 = zext i32 %1192 to i64
  br label %1223

1196:                                             ; preds = %1186, %1219
  %1197 = phi i64 [ %1187, %1186 ], [ %1221, %1219 ]
  %1198 = phi i32 [ %1183, %1186 ], [ %1220, %1219 ]
  %1199 = getelementptr inbounds i16, ptr %1082, i64 %1197
  %1200 = load i16, ptr %1199, align 2, !tbaa !45
  %1201 = zext i16 %1200 to i64
  %1202 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1201
  %1203 = load double, ptr %1202, align 8, !tbaa !69
  %1204 = getelementptr inbounds %class.Vector, ptr %1202, i64 0, i32 1
  %1205 = load double, ptr %1204, align 8, !tbaa !68
  %1206 = getelementptr inbounds %class.Vector, ptr %1202, i64 0, i32 2
  %1207 = load double, ptr %1206, align 8, !tbaa !50
  %1208 = fsub double %1189, %1203
  %1209 = fmul double %1208, %1208
  %1210 = fsub double %1190, %1205
  %1211 = tail call double @llvm.fmuladd.f64(double %1210, double %1210, double %1209)
  %1212 = fsub double %698, %1207
  %1213 = tail call double @llvm.fmuladd.f64(double %1212, double %1212, double %1211)
  %1214 = fcmp ugt double %1213, %27
  br i1 %1214, label %1219, label %1215

1215:                                             ; preds = %1196
  %1216 = add nsw i32 %1198, 1
  %1217 = sext i32 %1198 to i64
  %1218 = getelementptr inbounds i16, ptr %286, i64 %1217
  store i16 %1200, ptr %1218, align 2, !tbaa !45
  br label %1219

1219:                                             ; preds = %1215, %1196
  %1220 = phi i32 [ %1216, %1215 ], [ %1198, %1196 ]
  %1221 = add nsw i64 %1197, 1
  %1222 = icmp eq i64 %1221, %1188
  br i1 %1222, label %1191, label %1196

1223:                                             ; preds = %1194, %1240
  %1224 = phi i64 [ 0, %1194 ], [ %1243, %1240 ]
  %1225 = phi ptr [ %1081, %1194 ], [ %1242, %1240 ]
  %1226 = getelementptr inbounds i16, ptr %286, i64 %1224
  %1227 = load i16, ptr %1226, align 2, !tbaa !45
  %1228 = zext i16 %1227 to i64
  %1229 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1228, i32 4
  %1230 = load i8, ptr %1229, align 1
  %1231 = and i8 %1230, 7
  store i16 %1227, ptr %1225, align 2, !tbaa !45
  %1232 = getelementptr inbounds i16, ptr %1225, i64 1
  %1233 = insertelement <2 x i16> poison, i16 %1227, i64 0
  %1234 = shufflevector <2 x i16> %1233, <2 x i16> poison, <2 x i32> zeroinitializer
  %1235 = add <2 x i16> %1234, <i16 1, i16 2>
  store <2 x i16> %1235, ptr %1232, align 2, !tbaa !45
  %1236 = icmp ult i8 %1231, 4
  br i1 %1236, label %1240, label %1237

1237:                                             ; preds = %1223
  %1238 = add <2 x i16> %1234, <i16 3, i16 4>
  %1239 = getelementptr inbounds i16, ptr %1225, i64 3
  store <2 x i16> %1238, ptr %1239, align 2, !tbaa !45
  br label %1240

1240:                                             ; preds = %1237, %1223
  %1241 = zext i8 %1231 to i64
  %1242 = getelementptr inbounds i16, ptr %1225, i64 %1241
  %1243 = add nuw nsw i64 %1224, 1
  %1244 = icmp eq i64 %1243, %1195
  br i1 %1244, label %1245, label %1223

1245:                                             ; preds = %1240, %1191, %1078
  %1246 = phi ptr [ %1081, %1078 ], [ %1081, %1191 ], [ %1242, %1240 ]
  %1247 = ptrtoint ptr %1246 to i64
  %1248 = sub i64 %1247, %643
  %1249 = lshr exact i64 %1248, 1
  %1250 = trunc i64 %1249 to i32
  %1251 = icmp eq i32 %1250, 0
  br i1 %1251, label %1263, label %1252

1252:                                             ; preds = %1245
  %1253 = shl i64 %1248, 31
  %1254 = add i64 %1253, -4294967296
  %1255 = ashr i64 %1254, 32
  %1256 = getelementptr inbounds i16, ptr %424, i64 %1255
  %1257 = load i16, ptr %1256, align 2, !tbaa !45
  %1258 = ashr i64 %1253, 32
  %1259 = getelementptr inbounds i16, ptr %424, i64 %1258
  store i16 %1257, ptr %1259, align 2, !tbaa !45
  br label %1263

1260:                                             ; preds = %959
  %1261 = add nsw i32 %674, 1
  %1262 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1263

1263:                                             ; preds = %1245, %1252, %1260
  %1264 = phi i32 [ %1262, %1260 ], [ %968, %1252 ], [ %968, %1245 ]
  %1265 = phi i32 [ %1261, %1260 ], [ 0, %1252 ], [ 0, %1245 ]
  %1266 = phi i32 [ %673, %1260 ], [ %1250, %1252 ], [ 0, %1245 ]
  %1267 = phi i32 [ %672, %1260 ], [ %1009, %1252 ], [ %1009, %1245 ]
  %1268 = phi i32 [ %671, %1260 ], [ %1010, %1252 ], [ %1010, %1245 ]
  %1269 = icmp eq i32 %1264, 0
  br i1 %1269, label %1274, label %1270

1270:                                             ; preds = %1263
  %1271 = load i32, ptr %679, align 4
  %1272 = and i32 %1271, 1073741824
  %1273 = icmp ne i32 %1272, 0
  br label %1274

1274:                                             ; preds = %1270, %1263
  %1275 = phi i1 [ false, %1263 ], [ %1273, %1270 ]
  %1276 = load i32, ptr %17, align 8, !tbaa !19
  %1277 = add nsw i32 %644, %1276
  %1278 = load i32, ptr %645, align 4, !tbaa !70
  %1279 = icmp sgt i32 %1278, %1277
  br i1 %1279, label %1295, label %1280

1280:                                             ; preds = %1274, %1280
  %1281 = phi i32 [ %1283, %1280 ], [ %1278, %1274 ]
  %1282 = ashr i32 %1281, 1
  %1283 = add nsw i32 %1282, %1281
  %1284 = icmp sgt i32 %1283, %1277
  br i1 %1284, label %1285, label %1280

1285:                                             ; preds = %1280
  %1286 = sext i32 %1283 to i64
  %1287 = icmp slt i32 %1283, 0
  %1288 = shl nsw i64 %1286, 1
  %1289 = select i1 %1287, i64 -1, i64 %1288
  %1290 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1289) #9
  %1291 = load ptr, ptr %12, align 8, !tbaa !47
  %1292 = sext i32 %1276 to i64
  %1293 = shl nsw i64 %1292, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1290, ptr align 2 %1291, i64 %1293, i1 false)
  %1294 = icmp eq ptr %1291, null
  br i1 %1294, label %1299, label %1297

1295:                                             ; preds = %1274
  %1296 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1301

1297:                                             ; preds = %1285
  tail call void @_ZdaPv(ptr noundef nonnull %1291) #10
  %1298 = load i32, ptr %17, align 8, !tbaa !19
  br label %1299

1299:                                             ; preds = %1297, %1285
  %1300 = phi i32 [ %1298, %1297 ], [ %1276, %1285 ]
  store ptr %1290, ptr %12, align 8, !tbaa !47
  store i32 %1283, ptr %645, align 4, !tbaa !70
  br label %1301

1301:                                             ; preds = %1295, %1299
  %1302 = phi i32 [ %1276, %1295 ], [ %1300, %1299 ]
  %1303 = phi ptr [ %1296, %1295 ], [ %1290, %1299 ]
  %1304 = ptrtoint ptr %1303 to i64
  %1305 = add nsw i32 %1302, 1
  %1306 = sext i32 %1305 to i64
  %1307 = getelementptr inbounds i16, ptr %1303, i64 %1306
  %1308 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1309 = icmp eq i32 %1308, 0
  br i1 %1309, label %1490, label %1310

1310:                                             ; preds = %1301
  %1311 = load i8, ptr %699, align 2, !tbaa !52
  %1312 = zext i8 %1311 to i32
  %1313 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1314 = icmp eq i32 %1313, 0
  br i1 %1314, label %1369, label %1315

1315:                                             ; preds = %1310
  %1316 = icmp eq i8 %1311, 1
  br i1 %1316, label %1317, label %2551

1317:                                             ; preds = %1315
  %1318 = icmp slt i32 %1265, %1266
  br i1 %1318, label %1319, label %1430

1319:                                             ; preds = %1317
  %1320 = sext i32 %1265 to i64
  %1321 = sext i32 %1266 to i64
  %1322 = sub nsw i64 %1321, %1320
  %1323 = xor i64 %1320, -1
  %1324 = and i64 %1322, 1
  %1325 = icmp eq i64 %1324, 0
  br i1 %1325, label %1337, label %1326

1326:                                             ; preds = %1319
  %1327 = getelementptr inbounds i16, ptr %424, i64 %1320
  %1328 = load i16, ptr %1327, align 2, !tbaa !45
  %1329 = zext i16 %1328 to i64
  %1330 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1329, i32 3
  %1331 = load i8, ptr %1330, align 2, !tbaa !52
  %1332 = icmp eq i8 %1331, 1
  br i1 %1332, label %1333, label %1334

1333:                                             ; preds = %1326
  store i16 %1328, ptr %470, align 2, !tbaa !45
  br label %1334

1334:                                             ; preds = %1333, %1326
  %1335 = phi ptr [ %662, %1333 ], [ %470, %1326 ]
  %1336 = add nsw i64 %1320, 1
  br label %1337

1337:                                             ; preds = %1334, %1319
  %1338 = phi ptr [ undef, %1319 ], [ %1335, %1334 ]
  %1339 = phi i64 [ %1320, %1319 ], [ %1336, %1334 ]
  %1340 = phi ptr [ %470, %1319 ], [ %1335, %1334 ]
  %1341 = sub nsw i64 0, %1321
  %1342 = icmp eq i64 %1323, %1341
  br i1 %1342, label %1430, label %1343

1343:                                             ; preds = %1337, %1365
  %1344 = phi i64 [ %1367, %1365 ], [ %1339, %1337 ]
  %1345 = phi ptr [ %1366, %1365 ], [ %1340, %1337 ]
  %1346 = getelementptr inbounds i16, ptr %424, i64 %1344
  %1347 = load i16, ptr %1346, align 2, !tbaa !45
  %1348 = zext i16 %1347 to i64
  %1349 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1348, i32 3
  %1350 = load i8, ptr %1349, align 2, !tbaa !52
  %1351 = icmp eq i8 %1350, 1
  br i1 %1351, label %1352, label %1354

1352:                                             ; preds = %1343
  %1353 = getelementptr inbounds i16, ptr %1345, i64 1
  store i16 %1347, ptr %1345, align 2, !tbaa !45
  br label %1354

1354:                                             ; preds = %1352, %1343
  %1355 = phi ptr [ %1353, %1352 ], [ %1345, %1343 ]
  %1356 = add nsw i64 %1344, 1
  %1357 = getelementptr inbounds i16, ptr %424, i64 %1356
  %1358 = load i16, ptr %1357, align 2, !tbaa !45
  %1359 = zext i16 %1358 to i64
  %1360 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1359, i32 3
  %1361 = load i8, ptr %1360, align 2, !tbaa !52
  %1362 = icmp eq i8 %1361, 1
  br i1 %1362, label %1363, label %1365

1363:                                             ; preds = %1354
  %1364 = getelementptr inbounds i16, ptr %1355, i64 1
  store i16 %1358, ptr %1355, align 2, !tbaa !45
  br label %1365

1365:                                             ; preds = %1363, %1354
  %1366 = phi ptr [ %1364, %1363 ], [ %1355, %1354 ]
  %1367 = add nsw i64 %1344, 2
  %1368 = icmp eq i64 %1367, %1321
  br i1 %1368, label %1430, label %1343

1369:                                             ; preds = %1310
  %1370 = add i8 %1311, -3
  %1371 = icmp ult i8 %1370, -2
  br i1 %1371, label %2551, label %1372

1372:                                             ; preds = %1369
  %1373 = icmp slt i32 %1265, %1266
  br i1 %1373, label %1374, label %1430

1374:                                             ; preds = %1372
  %1375 = sext i32 %1265 to i64
  %1376 = sext i32 %1266 to i64
  %1377 = sub nsw i64 %1376, %1375
  %1378 = xor i64 %1375, -1
  %1379 = and i64 %1377, 1
  %1380 = icmp eq i64 %1379, 0
  br i1 %1380, label %1394, label %1381

1381:                                             ; preds = %1374
  %1382 = getelementptr inbounds i16, ptr %424, i64 %1375
  %1383 = load i16, ptr %1382, align 2, !tbaa !45
  %1384 = zext i16 %1383 to i64
  %1385 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1384, i32 3
  %1386 = load i8, ptr %1385, align 2, !tbaa !52
  %1387 = zext i8 %1386 to i32
  %1388 = add nuw nsw i32 %1387, %1312
  %1389 = icmp eq i32 %1388, 3
  br i1 %1389, label %1390, label %1391

1390:                                             ; preds = %1381
  store i16 %1383, ptr %470, align 2, !tbaa !45
  br label %1391

1391:                                             ; preds = %1390, %1381
  %1392 = phi ptr [ %663, %1390 ], [ %470, %1381 ]
  %1393 = add nsw i64 %1375, 1
  br label %1394

1394:                                             ; preds = %1391, %1374
  %1395 = phi ptr [ undef, %1374 ], [ %1392, %1391 ]
  %1396 = phi i64 [ %1375, %1374 ], [ %1393, %1391 ]
  %1397 = phi ptr [ %470, %1374 ], [ %1392, %1391 ]
  %1398 = sub nsw i64 0, %1376
  %1399 = icmp eq i64 %1378, %1398
  br i1 %1399, label %1430, label %1400

1400:                                             ; preds = %1394, %1426
  %1401 = phi i64 [ %1428, %1426 ], [ %1396, %1394 ]
  %1402 = phi ptr [ %1427, %1426 ], [ %1397, %1394 ]
  %1403 = getelementptr inbounds i16, ptr %424, i64 %1401
  %1404 = load i16, ptr %1403, align 2, !tbaa !45
  %1405 = zext i16 %1404 to i64
  %1406 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1405, i32 3
  %1407 = load i8, ptr %1406, align 2, !tbaa !52
  %1408 = zext i8 %1407 to i32
  %1409 = add nuw nsw i32 %1408, %1312
  %1410 = icmp eq i32 %1409, 3
  br i1 %1410, label %1411, label %1413

1411:                                             ; preds = %1400
  %1412 = getelementptr inbounds i16, ptr %1402, i64 1
  store i16 %1404, ptr %1402, align 2, !tbaa !45
  br label %1413

1413:                                             ; preds = %1411, %1400
  %1414 = phi ptr [ %1412, %1411 ], [ %1402, %1400 ]
  %1415 = add nsw i64 %1401, 1
  %1416 = getelementptr inbounds i16, ptr %424, i64 %1415
  %1417 = load i16, ptr %1416, align 2, !tbaa !45
  %1418 = zext i16 %1417 to i64
  %1419 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1418, i32 3
  %1420 = load i8, ptr %1419, align 2, !tbaa !52
  %1421 = zext i8 %1420 to i32
  %1422 = add nuw nsw i32 %1421, %1312
  %1423 = icmp eq i32 %1422, 3
  br i1 %1423, label %1424, label %1426

1424:                                             ; preds = %1413
  %1425 = getelementptr inbounds i16, ptr %1414, i64 1
  store i16 %1417, ptr %1414, align 2, !tbaa !45
  br label %1426

1426:                                             ; preds = %1424, %1413
  %1427 = phi ptr [ %1425, %1424 ], [ %1414, %1413 ]
  %1428 = add nsw i64 %1401, 2
  %1429 = icmp eq i64 %1428, %1376
  br i1 %1429, label %1430, label %1400

1430:                                             ; preds = %1337, %1365, %1394, %1426, %1317, %1372
  %1431 = phi ptr [ %470, %1372 ], [ %470, %1317 ], [ %1395, %1394 ], [ %1427, %1426 ], [ %1338, %1337 ], [ %1366, %1365 ]
  %1432 = ptrtoint ptr %1431 to i64
  %1433 = sub i64 %1432, %646
  %1434 = lshr exact i64 %1433, 1
  %1435 = trunc i64 %1434 to i32
  %1436 = icmp sgt i32 %1435, 0
  br i1 %1436, label %1437, label %1711

1437:                                             ; preds = %1430
  %1438 = and i64 %1434, 4294967295
  %1439 = extractelement <2 x double> %695, i64 0
  %1440 = extractelement <2 x double> %695, i64 1
  br label %1441

1441:                                             ; preds = %1437, %1485
  %1442 = phi i64 [ 0, %1437 ], [ %1488, %1485 ]
  %1443 = phi ptr [ %470, %1437 ], [ %1487, %1485 ]
  %1444 = phi ptr [ %1307, %1437 ], [ %1486, %1485 ]
  %1445 = getelementptr inbounds i16, ptr %470, i64 %1442
  %1446 = load i16, ptr %1445, align 2, !tbaa !45
  %1447 = zext i16 %1446 to i64
  %1448 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1447
  %1449 = load double, ptr %1448, align 8, !tbaa !69
  %1450 = fsub double %1439, %1449
  %1451 = fmul double %1450, %1450
  %1452 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 1
  %1453 = load double, ptr %1452, align 8, !tbaa !68
  %1454 = fsub double %1440, %1453
  %1455 = tail call double @llvm.fmuladd.f64(double %1454, double %1454, double %1451)
  %1456 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 2
  %1457 = load double, ptr %1456, align 8, !tbaa !50
  %1458 = fsub double %698, %1457
  %1459 = tail call double @llvm.fmuladd.f64(double %1458, double %1458, double %1455)
  br i1 %1275, label %1460, label %1467

1460:                                             ; preds = %1441
  %1461 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1447
  %1462 = load i32, ptr %1461, align 4
  %1463 = and i32 %1462, 1073741824
  %1464 = icmp ne i32 %1463, 0
  %1465 = fcmp ugt double %1459, %24
  %1466 = select i1 %1464, i1 true, i1 %1465
  br i1 %1466, label %1485, label %1472

1467:                                             ; preds = %1441
  %1468 = fcmp ugt double %1459, %24
  br i1 %1468, label %1485, label %1469

1469:                                             ; preds = %1467
  %1470 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1447
  %1471 = load i32, ptr %1470, align 4
  br label %1472

1472:                                             ; preds = %1469, %1460
  %1473 = phi i32 [ %1471, %1469 ], [ %1462, %1460 ]
  %1474 = shl i32 %1473, 2
  %1475 = ashr exact i32 %1474, 2
  %1476 = icmp slt i32 %1475, %723
  %1477 = icmp sgt i32 %1475, %725
  %1478 = select i1 %1476, i1 true, i1 %1477
  %1479 = select i1 %1478, ptr %1444, ptr %1443
  %1480 = zext i1 %1478 to i64
  %1481 = getelementptr inbounds i16, ptr %1444, i64 %1480
  %1482 = xor i1 %1478, true
  %1483 = zext i1 %1482 to i64
  %1484 = getelementptr inbounds i16, ptr %1443, i64 %1483
  store i16 %1446, ptr %1479, align 2, !tbaa !45
  br label %1485

1485:                                             ; preds = %1472, %1467, %1460
  %1486 = phi ptr [ %1444, %1460 ], [ %1444, %1467 ], [ %1481, %1472 ]
  %1487 = phi ptr [ %1443, %1460 ], [ %1443, %1467 ], [ %1484, %1472 ]
  %1488 = add nuw nsw i64 %1442, 1
  %1489 = icmp eq i64 %1488, %1438
  br i1 %1489, label %1711, label %1441

1490:                                             ; preds = %1301
  %1491 = icmp slt i32 %1265, %1266
  br i1 %1275, label %1492, label %1540

1492:                                             ; preds = %1490
  br i1 %1491, label %1493, label %1711

1493:                                             ; preds = %1492
  %1494 = sext i32 %1265 to i64
  %1495 = sext i32 %1266 to i64
  %1496 = extractelement <2 x double> %695, i64 0
  %1497 = extractelement <2 x double> %695, i64 1
  br label %1498

1498:                                             ; preds = %1493, %1535
  %1499 = phi i64 [ %1494, %1493 ], [ %1538, %1535 ]
  %1500 = phi ptr [ %470, %1493 ], [ %1537, %1535 ]
  %1501 = phi ptr [ %1307, %1493 ], [ %1536, %1535 ]
  %1502 = getelementptr inbounds i16, ptr %424, i64 %1499
  %1503 = load i16, ptr %1502, align 2, !tbaa !45
  %1504 = zext i16 %1503 to i64
  %1505 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1504
  %1506 = load i32, ptr %1505, align 4
  %1507 = and i32 %1506, 1073741824
  %1508 = icmp eq i32 %1507, 0
  br i1 %1508, label %1509, label %1535

1509:                                             ; preds = %1498
  %1510 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1504
  %1511 = getelementptr inbounds %class.Vector, ptr %1510, i64 0, i32 2
  %1512 = load double, ptr %1511, align 8, !tbaa !50
  %1513 = fsub double %698, %1512
  %1514 = getelementptr inbounds %class.Vector, ptr %1510, i64 0, i32 1
  %1515 = load double, ptr %1514, align 8, !tbaa !68
  %1516 = fsub double %1497, %1515
  %1517 = load double, ptr %1510, align 8, !tbaa !69
  %1518 = fsub double %1496, %1517
  %1519 = fmul double %1518, %1518
  %1520 = tail call double @llvm.fmuladd.f64(double %1516, double %1516, double %1519)
  %1521 = tail call double @llvm.fmuladd.f64(double %1513, double %1513, double %1520)
  %1522 = fcmp ugt double %1521, %24
  br i1 %1522, label %1535, label %1523

1523:                                             ; preds = %1509
  %1524 = shl i32 %1506, 2
  %1525 = ashr exact i32 %1524, 2
  %1526 = icmp slt i32 %1525, %723
  %1527 = icmp sgt i32 %1525, %725
  %1528 = select i1 %1526, i1 true, i1 %1527
  %1529 = select i1 %1528, ptr %1501, ptr %1500
  %1530 = zext i1 %1528 to i64
  %1531 = getelementptr inbounds i16, ptr %1501, i64 %1530
  %1532 = xor i1 %1528, true
  %1533 = zext i1 %1532 to i64
  %1534 = getelementptr inbounds i16, ptr %1500, i64 %1533
  store i16 %1503, ptr %1529, align 2, !tbaa !45
  br label %1535

1535:                                             ; preds = %1523, %1509, %1498
  %1536 = phi ptr [ %1501, %1498 ], [ %1501, %1509 ], [ %1531, %1523 ]
  %1537 = phi ptr [ %1500, %1498 ], [ %1500, %1509 ], [ %1534, %1523 ]
  %1538 = add nsw i64 %1499, 1
  %1539 = icmp eq i64 %1538, %1495
  br i1 %1539, label %1711, label %1498

1540:                                             ; preds = %1490
  br i1 %1491, label %1541, label %1711

1541:                                             ; preds = %1540
  %1542 = sub nsw i32 %1266, %1265
  %1543 = icmp sgt i32 %1542, 6
  br i1 %1543, label %1544, label %1662

1544:                                             ; preds = %1541
  %1545 = add nsw i32 %1266, -2
  %1546 = add nsw i32 %1265, 2
  %1547 = icmp slt i32 %1546, %1545
  br i1 %1547, label %1548, label %1662

1548:                                             ; preds = %1544
  %1549 = sext i32 %1265 to i64
  %1550 = getelementptr inbounds i16, ptr %424, i64 %1549
  %1551 = load i16, ptr %1550, align 2, !tbaa !45
  %1552 = zext i16 %1551 to i64
  %1553 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1552
  %1554 = load i32, ptr %1553, align 4
  %1555 = add nsw i32 %1265, 1
  %1556 = sext i32 %1555 to i64
  %1557 = getelementptr inbounds i16, ptr %424, i64 %1556
  %1558 = load i16, ptr %1557, align 2, !tbaa !45
  %1559 = zext i16 %1558 to i64
  %1560 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1559
  %1561 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 2
  %1562 = load double, ptr %1561, align 8, !tbaa !50
  %1563 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1552
  %1564 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 2
  %1565 = load double, ptr %1564, align 8, !tbaa !50
  %1566 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 1
  %1567 = load double, ptr %1566, align 8, !tbaa !68
  %1568 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 1
  %1569 = load double, ptr %1568, align 8, !tbaa !68
  %1570 = load double, ptr %1560, align 8, !tbaa !69
  %1571 = load double, ptr %1563, align 8, !tbaa !69
  %1572 = sext i32 %1546 to i64
  %1573 = sext i32 %1545 to i64
  %1574 = extractelement <2 x double> %695, i64 0
  %1575 = extractelement <2 x double> %695, i64 1
  br label %1576

1576:                                             ; preds = %1548, %1656
  %1577 = phi i64 [ %1572, %1548 ], [ %1659, %1656 ]
  %1578 = phi i64 [ %1559, %1548 ], [ %1616, %1656 ]
  %1579 = phi i32 [ %1554, %1548 ], [ %1644, %1656 ]
  %1580 = phi ptr [ %470, %1548 ], [ %1658, %1656 ]
  %1581 = phi ptr [ %1307, %1548 ], [ %1657, %1656 ]
  %1582 = phi i32 [ %1265, %1548 ], [ %1661, %1656 ]
  %1583 = phi i16 [ %1551, %1548 ], [ %1608, %1656 ]
  %1584 = phi i16 [ %1558, %1548 ], [ %1612, %1656 ]
  %1585 = phi double [ %1571, %1548 ], [ %1615, %1656 ]
  %1586 = phi double [ %1570, %1548 ], [ %1618, %1656 ]
  %1587 = phi double [ %1569, %1548 ], [ %1620, %1656 ]
  %1588 = phi double [ %1567, %1548 ], [ %1622, %1656 ]
  %1589 = phi double [ %1565, %1548 ], [ %1624, %1656 ]
  %1590 = phi double [ %1562, %1548 ], [ %1626, %1656 ]
  %1591 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1578
  %1592 = load i32, ptr %1591, align 4
  %1593 = shl i32 %1592, 2
  %1594 = ashr exact i32 %1593, 2
  %1595 = fsub double %1574, %1585
  %1596 = fsub double %1574, %1586
  %1597 = fmul double %1595, %1595
  %1598 = fmul double %1596, %1596
  %1599 = fsub double %1575, %1587
  %1600 = fsub double %1575, %1588
  %1601 = tail call double @llvm.fmuladd.f64(double %1599, double %1599, double %1597)
  %1602 = tail call double @llvm.fmuladd.f64(double %1600, double %1600, double %1598)
  %1603 = fsub double %698, %1589
  %1604 = fsub double %698, %1590
  %1605 = tail call double @llvm.fmuladd.f64(double %1603, double %1603, double %1601)
  %1606 = tail call double @llvm.fmuladd.f64(double %1604, double %1604, double %1602)
  %1607 = getelementptr inbounds i16, ptr %424, i64 %1577
  %1608 = load i16, ptr %1607, align 2, !tbaa !45
  %1609 = add nsw i32 %1582, 3
  %1610 = sext i32 %1609 to i64
  %1611 = getelementptr inbounds i16, ptr %424, i64 %1610
  %1612 = load i16, ptr %1611, align 2, !tbaa !45
  %1613 = zext i16 %1608 to i64
  %1614 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1613
  %1615 = load double, ptr %1614, align 8, !tbaa !69
  %1616 = zext i16 %1612 to i64
  %1617 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1616
  %1618 = load double, ptr %1617, align 8, !tbaa !69
  %1619 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 1
  %1620 = load double, ptr %1619, align 8, !tbaa !68
  %1621 = getelementptr inbounds %class.Vector, ptr %1617, i64 0, i32 1
  %1622 = load double, ptr %1621, align 8, !tbaa !68
  %1623 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 2
  %1624 = load double, ptr %1623, align 8, !tbaa !50
  %1625 = getelementptr inbounds %class.Vector, ptr %1617, i64 0, i32 2
  %1626 = load double, ptr %1625, align 8, !tbaa !50
  %1627 = fcmp ugt double %1605, %24
  br i1 %1627, label %1640, label %1628

1628:                                             ; preds = %1576
  %1629 = shl i32 %1579, 2
  %1630 = ashr exact i32 %1629, 2
  %1631 = icmp slt i32 %1630, %723
  %1632 = icmp sgt i32 %1630, %725
  %1633 = select i1 %1631, i1 true, i1 %1632
  %1634 = select i1 %1633, ptr %1581, ptr %1580
  %1635 = zext i1 %1633 to i64
  %1636 = getelementptr inbounds i16, ptr %1581, i64 %1635
  %1637 = xor i1 %1633, true
  %1638 = zext i1 %1637 to i64
  %1639 = getelementptr inbounds i16, ptr %1580, i64 %1638
  store i16 %1583, ptr %1634, align 2, !tbaa !45
  br label %1640

1640:                                             ; preds = %1628, %1576
  %1641 = phi ptr [ %1581, %1576 ], [ %1636, %1628 ]
  %1642 = phi ptr [ %1580, %1576 ], [ %1639, %1628 ]
  %1643 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1613
  %1644 = load i32, ptr %1643, align 4
  %1645 = fcmp ugt double %1606, %24
  br i1 %1645, label %1656, label %1646

1646:                                             ; preds = %1640
  %1647 = icmp slt i32 %1594, %723
  %1648 = icmp sgt i32 %1594, %725
  %1649 = select i1 %1647, i1 true, i1 %1648
  %1650 = select i1 %1649, ptr %1641, ptr %1642
  %1651 = zext i1 %1649 to i64
  %1652 = getelementptr inbounds i16, ptr %1641, i64 %1651
  %1653 = xor i1 %1649, true
  %1654 = zext i1 %1653 to i64
  %1655 = getelementptr inbounds i16, ptr %1642, i64 %1654
  store i16 %1584, ptr %1650, align 2, !tbaa !45
  br label %1656

1656:                                             ; preds = %1646, %1640
  %1657 = phi ptr [ %1641, %1640 ], [ %1652, %1646 ]
  %1658 = phi ptr [ %1642, %1640 ], [ %1655, %1646 ]
  %1659 = add nsw i64 %1577, 2
  %1660 = icmp slt i64 %1659, %1573
  %1661 = trunc i64 %1577 to i32
  br i1 %1660, label %1576, label %1662

1662:                                             ; preds = %1656, %1544, %1541
  %1663 = phi i32 [ %1265, %1541 ], [ %1265, %1544 ], [ %1661, %1656 ]
  %1664 = phi ptr [ %1307, %1541 ], [ %1307, %1544 ], [ %1657, %1656 ]
  %1665 = phi ptr [ %470, %1541 ], [ %470, %1544 ], [ %1658, %1656 ]
  %1666 = icmp slt i32 %1663, %1266
  br i1 %1666, label %1667, label %1711

1667:                                             ; preds = %1662
  %1668 = sext i32 %1663 to i64
  %1669 = sext i32 %1266 to i64
  %1670 = extractelement <2 x double> %695, i64 0
  %1671 = extractelement <2 x double> %695, i64 1
  br label %1672

1672:                                             ; preds = %1667, %1706
  %1673 = phi i64 [ %1668, %1667 ], [ %1709, %1706 ]
  %1674 = phi ptr [ %1665, %1667 ], [ %1708, %1706 ]
  %1675 = phi ptr [ %1664, %1667 ], [ %1707, %1706 ]
  %1676 = getelementptr inbounds i16, ptr %424, i64 %1673
  %1677 = load i16, ptr %1676, align 2, !tbaa !45
  %1678 = zext i16 %1677 to i64
  %1679 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %1678
  %1680 = load double, ptr %1679, align 8, !tbaa !69
  %1681 = getelementptr inbounds %class.Vector, ptr %1679, i64 0, i32 1
  %1682 = load double, ptr %1681, align 8, !tbaa !68
  %1683 = getelementptr inbounds %class.Vector, ptr %1679, i64 0, i32 2
  %1684 = load double, ptr %1683, align 8, !tbaa !50
  %1685 = fsub double %1670, %1680
  %1686 = fmul double %1685, %1685
  %1687 = fsub double %1671, %1682
  %1688 = tail call double @llvm.fmuladd.f64(double %1687, double %1687, double %1686)
  %1689 = fsub double %698, %1684
  %1690 = tail call double @llvm.fmuladd.f64(double %1689, double %1689, double %1688)
  %1691 = fcmp ugt double %1690, %24
  br i1 %1691, label %1706, label %1692

1692:                                             ; preds = %1672
  %1693 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1678
  %1694 = load i32, ptr %1693, align 4
  %1695 = shl i32 %1694, 2
  %1696 = ashr exact i32 %1695, 2
  %1697 = icmp slt i32 %1696, %723
  %1698 = icmp sgt i32 %1696, %725
  %1699 = select i1 %1697, i1 true, i1 %1698
  %1700 = select i1 %1699, ptr %1675, ptr %1674
  %1701 = zext i1 %1699 to i64
  %1702 = getelementptr inbounds i16, ptr %1675, i64 %1701
  %1703 = xor i1 %1699, true
  %1704 = zext i1 %1703 to i64
  %1705 = getelementptr inbounds i16, ptr %1674, i64 %1704
  store i16 %1677, ptr %1700, align 2, !tbaa !45
  br label %1706

1706:                                             ; preds = %1692, %1672
  %1707 = phi ptr [ %1675, %1672 ], [ %1702, %1692 ]
  %1708 = phi ptr [ %1674, %1672 ], [ %1705, %1692 ]
  %1709 = add nsw i64 %1673, 1
  %1710 = icmp eq i64 %1709, %1669
  br i1 %1710, label %1711, label %1672

1711:                                             ; preds = %1485, %1706, %1535, %1430, %1662, %1492, %1540
  %1712 = phi ptr [ %1307, %1540 ], [ %1307, %1492 ], [ %1664, %1662 ], [ %1307, %1430 ], [ %1536, %1535 ], [ %1707, %1706 ], [ %1486, %1485 ]
  %1713 = phi ptr [ %470, %1540 ], [ %470, %1492 ], [ %1665, %1662 ], [ %470, %1430 ], [ %1537, %1535 ], [ %1708, %1706 ], [ %1487, %1485 ]
  %1714 = ptrtoint ptr %1713 to i64
  %1715 = sub i64 %1714, %646
  %1716 = lshr exact i64 %1715, 1
  %1717 = trunc i64 %1716 to i32
  %1718 = icmp sgt i32 %1717, 0
  br i1 %1718, label %1719, label %1819

1719:                                             ; preds = %1711
  %1720 = and i64 %1716, 4294967295
  %1721 = and i64 %1716, 1
  %1722 = icmp eq i64 %1720, 1
  br i1 %1722, label %1787, label %1723

1723:                                             ; preds = %1719
  %1724 = sub nsw i64 %1720, %1721
  br label %1725

1725:                                             ; preds = %1780, %1723
  %1726 = phi i64 [ 0, %1723 ], [ %1784, %1780 ]
  %1727 = phi ptr [ %1712, %1723 ], [ %1783, %1780 ]
  %1728 = phi ptr [ %332, %1723 ], [ %1782, %1780 ]
  %1729 = phi ptr [ %378, %1723 ], [ %1781, %1780 ]
  %1730 = phi i64 [ 0, %1723 ], [ %1785, %1780 ]
  %1731 = getelementptr inbounds i16, ptr %470, i64 %1726
  %1732 = load i16, ptr %1731, align 2, !tbaa !45
  %1733 = zext i16 %1732 to i64
  %1734 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1733
  %1735 = load i32, ptr %1734, align 4
  %1736 = shl i32 %1735, 2
  %1737 = ashr exact i32 %1736, 2
  %1738 = sext i32 %1737 to i64
  %1739 = getelementptr inbounds i8, ptr %960, i64 %1738
  %1740 = load i8, ptr %1739, align 1, !tbaa !59
  %1741 = sext i8 %1740 to i32
  switch i32 %1741, label %1753 [
    i32 0, label %1742
    i32 1, label %1744
    i32 2, label %1746
  ]

1742:                                             ; preds = %1725
  %1743 = getelementptr inbounds i16, ptr %1727, i64 1
  br label %1748

1744:                                             ; preds = %1725
  %1745 = getelementptr inbounds i16, ptr %1728, i64 1
  br label %1748

1746:                                             ; preds = %1725
  %1747 = getelementptr inbounds i16, ptr %1729, i64 1
  br label %1748

1748:                                             ; preds = %1742, %1744, %1746
  %1749 = phi ptr [ %1729, %1746 ], [ %1728, %1744 ], [ %1727, %1742 ]
  %1750 = phi ptr [ %1747, %1746 ], [ %1729, %1744 ], [ %1729, %1742 ]
  %1751 = phi ptr [ %1728, %1746 ], [ %1745, %1744 ], [ %1728, %1742 ]
  %1752 = phi ptr [ %1727, %1746 ], [ %1727, %1744 ], [ %1743, %1742 ]
  store i16 %1732, ptr %1749, align 2, !tbaa !45
  br label %1753

1753:                                             ; preds = %1748, %1725
  %1754 = phi ptr [ %1729, %1725 ], [ %1750, %1748 ]
  %1755 = phi ptr [ %1728, %1725 ], [ %1751, %1748 ]
  %1756 = phi ptr [ %1727, %1725 ], [ %1752, %1748 ]
  %1757 = or i64 %1726, 1
  %1758 = getelementptr inbounds i16, ptr %470, i64 %1757
  %1759 = load i16, ptr %1758, align 2, !tbaa !45
  %1760 = zext i16 %1759 to i64
  %1761 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1760
  %1762 = load i32, ptr %1761, align 4
  %1763 = shl i32 %1762, 2
  %1764 = ashr exact i32 %1763, 2
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds i8, ptr %960, i64 %1765
  %1767 = load i8, ptr %1766, align 1, !tbaa !59
  %1768 = sext i8 %1767 to i32
  switch i32 %1768, label %1780 [
    i32 0, label %1773
    i32 1, label %1771
    i32 2, label %1769
  ]

1769:                                             ; preds = %1753
  %1770 = getelementptr inbounds i16, ptr %1754, i64 1
  br label %1775

1771:                                             ; preds = %1753
  %1772 = getelementptr inbounds i16, ptr %1755, i64 1
  br label %1775

1773:                                             ; preds = %1753
  %1774 = getelementptr inbounds i16, ptr %1756, i64 1
  br label %1775

1775:                                             ; preds = %1773, %1771, %1769
  %1776 = phi ptr [ %1754, %1769 ], [ %1755, %1771 ], [ %1756, %1773 ]
  %1777 = phi ptr [ %1770, %1769 ], [ %1754, %1771 ], [ %1754, %1773 ]
  %1778 = phi ptr [ %1755, %1769 ], [ %1772, %1771 ], [ %1755, %1773 ]
  %1779 = phi ptr [ %1756, %1769 ], [ %1756, %1771 ], [ %1774, %1773 ]
  store i16 %1759, ptr %1776, align 2, !tbaa !45
  br label %1780

1780:                                             ; preds = %1775, %1753
  %1781 = phi ptr [ %1754, %1753 ], [ %1777, %1775 ]
  %1782 = phi ptr [ %1755, %1753 ], [ %1778, %1775 ]
  %1783 = phi ptr [ %1756, %1753 ], [ %1779, %1775 ]
  %1784 = add nuw nsw i64 %1726, 2
  %1785 = add i64 %1730, 2
  %1786 = icmp eq i64 %1785, %1724
  br i1 %1786, label %1787, label %1725

1787:                                             ; preds = %1780, %1719
  %1788 = phi ptr [ undef, %1719 ], [ %1781, %1780 ]
  %1789 = phi ptr [ undef, %1719 ], [ %1782, %1780 ]
  %1790 = phi ptr [ undef, %1719 ], [ %1783, %1780 ]
  %1791 = phi i64 [ 0, %1719 ], [ %1784, %1780 ]
  %1792 = phi ptr [ %1712, %1719 ], [ %1783, %1780 ]
  %1793 = phi ptr [ %332, %1719 ], [ %1782, %1780 ]
  %1794 = phi ptr [ %378, %1719 ], [ %1781, %1780 ]
  %1795 = icmp eq i64 %1721, 0
  br i1 %1795, label %1819, label %1796

1796:                                             ; preds = %1787
  %1797 = getelementptr inbounds i16, ptr %470, i64 %1791
  %1798 = load i16, ptr %1797, align 2, !tbaa !45
  %1799 = zext i16 %1798 to i64
  %1800 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %1799
  %1801 = load i32, ptr %1800, align 4
  %1802 = shl i32 %1801, 2
  %1803 = ashr exact i32 %1802, 2
  %1804 = sext i32 %1803 to i64
  %1805 = getelementptr inbounds i8, ptr %960, i64 %1804
  %1806 = load i8, ptr %1805, align 1, !tbaa !59
  %1807 = sext i8 %1806 to i32
  switch i32 %1807, label %1819 [
    i32 0, label %1812
    i32 1, label %1810
    i32 2, label %1808
  ]

1808:                                             ; preds = %1796
  %1809 = getelementptr inbounds i16, ptr %1794, i64 1
  br label %1814

1810:                                             ; preds = %1796
  %1811 = getelementptr inbounds i16, ptr %1793, i64 1
  br label %1814

1812:                                             ; preds = %1796
  %1813 = getelementptr inbounds i16, ptr %1792, i64 1
  br label %1814

1814:                                             ; preds = %1812, %1810, %1808
  %1815 = phi ptr [ %1794, %1808 ], [ %1793, %1810 ], [ %1792, %1812 ]
  %1816 = phi ptr [ %1809, %1808 ], [ %1794, %1810 ], [ %1794, %1812 ]
  %1817 = phi ptr [ %1793, %1808 ], [ %1811, %1810 ], [ %1793, %1812 ]
  %1818 = phi ptr [ %1792, %1808 ], [ %1792, %1810 ], [ %1813, %1812 ]
  store i16 %1798, ptr %1815, align 2, !tbaa !45
  br label %1819

1819:                                             ; preds = %1787, %1814, %1796, %1711
  %1820 = phi ptr [ %378, %1711 ], [ %1788, %1787 ], [ %1794, %1796 ], [ %1816, %1814 ]
  %1821 = phi ptr [ %332, %1711 ], [ %1789, %1787 ], [ %1793, %1796 ], [ %1817, %1814 ]
  %1822 = phi ptr [ %1712, %1711 ], [ %1790, %1787 ], [ %1792, %1796 ], [ %1818, %1814 ]
  %1823 = ptrtoint ptr %1822 to i64
  %1824 = ptrtoint ptr %1307 to i64
  %1825 = sub i64 %1823, %1824
  %1826 = lshr exact i64 %1825, 1
  %1827 = trunc i64 %1826 to i32
  %1828 = icmp eq i32 %1827, 0
  %1829 = shl i64 %1825, 31
  br i1 %1828, label %1835, label %1830

1830:                                             ; preds = %1819
  %1831 = add i64 %1829, -4294967296
  %1832 = ashr i64 %1831, 32
  %1833 = getelementptr inbounds i16, ptr %1307, i64 %1832
  %1834 = load i16, ptr %1833, align 2, !tbaa !45
  br label %1835

1835:                                             ; preds = %1819, %1830
  %1836 = phi i16 [ %1834, %1830 ], [ -1, %1819 ]
  %1837 = ashr i64 %1829, 32
  %1838 = getelementptr inbounds i16, ptr %1307, i64 %1837
  store i16 %1836, ptr %1838, align 2, !tbaa !45
  %1839 = trunc i64 %1826 to i16
  %1840 = add i16 %1839, 1
  %1841 = load i32, ptr %17, align 8, !tbaa !19
  %1842 = sext i32 %1841 to i64
  %1843 = getelementptr inbounds i16, ptr %1303, i64 %1842
  store i16 %1840, ptr %1843, align 2, !tbaa !45
  %1844 = add nsw i32 %1827, 2
  %1845 = add nsw i32 %1844, %1841
  %1846 = ptrtoint ptr %1821 to i64
  %1847 = sub i64 %1846, %647
  %1848 = lshr exact i64 %1847, 1
  %1849 = trunc i64 %1848 to i32
  %1850 = add nsw i32 %1845, 1
  %1851 = sext i32 %1850 to i64
  %1852 = getelementptr i16, ptr %1303, i64 %1851
  %1853 = icmp sgt i32 %1849, 0
  br i1 %1853, label %1854, label %1944

1854:                                             ; preds = %1835
  %1855 = and i64 %1848, 4294967295
  %1856 = icmp ult i64 %1855, 8
  br i1 %1856, label %1900, label %1857

1857:                                             ; preds = %1854
  %1858 = shl nsw i64 %1851, 1
  %1859 = add i64 %1858, %1304
  %1860 = sub i64 %1859, %647
  %1861 = icmp ult i64 %1860, 128
  br i1 %1861, label %1900, label %1862

1862:                                             ; preds = %1857
  %1863 = icmp ult i64 %1855, 64
  br i1 %1863, label %1887, label %1864

1864:                                             ; preds = %1862
  %1865 = and i64 %1848, 63
  %1866 = sub nsw i64 %1855, %1865
  br label %1867

1867:                                             ; preds = %1867, %1864
  %1868 = phi i64 [ 0, %1864 ], [ %1881, %1867 ]
  %1869 = getelementptr inbounds i16, ptr %332, i64 %1868
  %1870 = load <16 x i16>, ptr %1869, align 2, !tbaa !45
  %1871 = getelementptr inbounds i16, ptr %1869, i64 16
  %1872 = load <16 x i16>, ptr %1871, align 2, !tbaa !45
  %1873 = getelementptr inbounds i16, ptr %1869, i64 32
  %1874 = load <16 x i16>, ptr %1873, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1869, i64 48
  %1876 = load <16 x i16>, ptr %1875, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1852, i64 %1868
  store <16 x i16> %1870, ptr %1877, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1877, i64 16
  store <16 x i16> %1872, ptr %1878, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1877, i64 32
  store <16 x i16> %1874, ptr %1879, align 2, !tbaa !45
  %1880 = getelementptr inbounds i16, ptr %1877, i64 48
  store <16 x i16> %1876, ptr %1880, align 2, !tbaa !45
  %1881 = add nuw i64 %1868, 64
  %1882 = icmp eq i64 %1881, %1866
  br i1 %1882, label %1883, label %1867, !llvm.loop !201

1883:                                             ; preds = %1867
  %1884 = icmp eq i64 %1865, 0
  br i1 %1884, label %1938, label %1885

1885:                                             ; preds = %1883
  %1886 = icmp ult i64 %1865, 8
  br i1 %1886, label %1900, label %1887

1887:                                             ; preds = %1862, %1885
  %1888 = phi i64 [ %1866, %1885 ], [ 0, %1862 ]
  %1889 = and i64 %1848, 7
  %1890 = sub nsw i64 %1855, %1889
  br label %1891

1891:                                             ; preds = %1891, %1887
  %1892 = phi i64 [ %1888, %1887 ], [ %1896, %1891 ]
  %1893 = getelementptr inbounds i16, ptr %332, i64 %1892
  %1894 = load <8 x i16>, ptr %1893, align 2, !tbaa !45
  %1895 = getelementptr inbounds i16, ptr %1852, i64 %1892
  store <8 x i16> %1894, ptr %1895, align 2, !tbaa !45
  %1896 = add nuw i64 %1892, 8
  %1897 = icmp eq i64 %1896, %1890
  br i1 %1897, label %1898, label %1891, !llvm.loop !202

1898:                                             ; preds = %1891
  %1899 = icmp eq i64 %1889, 0
  br i1 %1899, label %1938, label %1900

1900:                                             ; preds = %1857, %1854, %1885, %1898
  %1901 = phi i64 [ 0, %1854 ], [ 0, %1857 ], [ %1866, %1885 ], [ %1890, %1898 ]
  %1902 = sub i64 %1848, %1901
  %1903 = xor i64 %1901, -1
  %1904 = add nsw i64 %1855, %1903
  %1905 = and i64 %1902, 3
  %1906 = icmp eq i64 %1905, 0
  br i1 %1906, label %1916, label %1907

1907:                                             ; preds = %1900, %1907
  %1908 = phi i64 [ %1913, %1907 ], [ %1901, %1900 ]
  %1909 = phi i64 [ %1914, %1907 ], [ 0, %1900 ]
  %1910 = getelementptr inbounds i16, ptr %332, i64 %1908
  %1911 = load i16, ptr %1910, align 2, !tbaa !45
  %1912 = getelementptr inbounds i16, ptr %1852, i64 %1908
  store i16 %1911, ptr %1912, align 2, !tbaa !45
  %1913 = add nuw nsw i64 %1908, 1
  %1914 = add i64 %1909, 1
  %1915 = icmp eq i64 %1914, %1905
  br i1 %1915, label %1916, label %1907, !llvm.loop !203

1916:                                             ; preds = %1907, %1900
  %1917 = phi i64 [ %1901, %1900 ], [ %1913, %1907 ]
  %1918 = icmp ult i64 %1904, 3
  br i1 %1918, label %1938, label %1919

1919:                                             ; preds = %1916, %1919
  %1920 = phi i64 [ %1936, %1919 ], [ %1917, %1916 ]
  %1921 = getelementptr inbounds i16, ptr %332, i64 %1920
  %1922 = load i16, ptr %1921, align 2, !tbaa !45
  %1923 = getelementptr inbounds i16, ptr %1852, i64 %1920
  store i16 %1922, ptr %1923, align 2, !tbaa !45
  %1924 = add nuw nsw i64 %1920, 1
  %1925 = getelementptr inbounds i16, ptr %332, i64 %1924
  %1926 = load i16, ptr %1925, align 2, !tbaa !45
  %1927 = getelementptr inbounds i16, ptr %1852, i64 %1924
  store i16 %1926, ptr %1927, align 2, !tbaa !45
  %1928 = add nuw nsw i64 %1920, 2
  %1929 = getelementptr inbounds i16, ptr %332, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1852, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1920, 3
  %1933 = getelementptr inbounds i16, ptr %332, i64 %1932
  %1934 = load i16, ptr %1933, align 2, !tbaa !45
  %1935 = getelementptr inbounds i16, ptr %1852, i64 %1932
  store i16 %1934, ptr %1935, align 2, !tbaa !45
  %1936 = add nuw nsw i64 %1920, 4
  %1937 = icmp eq i64 %1936, %1855
  br i1 %1937, label %1938, label %1919, !llvm.loop !204

1938:                                             ; preds = %1916, %1919, %1883, %1898
  %1939 = shl i64 %1847, 31
  %1940 = add i64 %1939, -4294967296
  %1941 = ashr i64 %1940, 32
  %1942 = getelementptr inbounds i16, ptr %1852, i64 %1941
  %1943 = load i16, ptr %1942, align 2, !tbaa !45
  br label %1944

1944:                                             ; preds = %1835, %1938
  %1945 = phi i64 [ %1848, %1938 ], [ 0, %1835 ]
  %1946 = phi i16 [ %1943, %1938 ], [ -1, %1835 ]
  %1947 = and i64 %1945, 4294967295
  %1948 = getelementptr inbounds i16, ptr %1852, i64 %1947
  store i16 %1946, ptr %1948, align 2, !tbaa !45
  %1949 = trunc i64 %1848 to i16
  %1950 = add i16 %1949, 1
  %1951 = sext i32 %1845 to i64
  %1952 = getelementptr inbounds i16, ptr %1303, i64 %1951
  store i16 %1950, ptr %1952, align 2, !tbaa !45
  %1953 = add nsw i32 %1849, 2
  %1954 = add nsw i32 %1953, %1845
  %1955 = ptrtoint ptr %1820 to i64
  %1956 = sub i64 %1955, %648
  %1957 = lshr exact i64 %1956, 1
  %1958 = trunc i64 %1957 to i32
  %1959 = add nsw i32 %1954, 1
  %1960 = sext i32 %1959 to i64
  %1961 = getelementptr i16, ptr %1303, i64 %1960
  %1962 = icmp sgt i32 %1958, 0
  br i1 %1962, label %1963, label %2053

1963:                                             ; preds = %1944
  %1964 = and i64 %1957, 4294967295
  %1965 = icmp ult i64 %1964, 8
  br i1 %1965, label %2009, label %1966

1966:                                             ; preds = %1963
  %1967 = shl nsw i64 %1960, 1
  %1968 = add i64 %1967, %1304
  %1969 = sub i64 %1968, %648
  %1970 = icmp ult i64 %1969, 128
  br i1 %1970, label %2009, label %1971

1971:                                             ; preds = %1966
  %1972 = icmp ult i64 %1964, 64
  br i1 %1972, label %1996, label %1973

1973:                                             ; preds = %1971
  %1974 = and i64 %1957, 63
  %1975 = sub nsw i64 %1964, %1974
  br label %1976

1976:                                             ; preds = %1976, %1973
  %1977 = phi i64 [ 0, %1973 ], [ %1990, %1976 ]
  %1978 = getelementptr inbounds i16, ptr %378, i64 %1977
  %1979 = load <16 x i16>, ptr %1978, align 2, !tbaa !45
  %1980 = getelementptr inbounds i16, ptr %1978, i64 16
  %1981 = load <16 x i16>, ptr %1980, align 2, !tbaa !45
  %1982 = getelementptr inbounds i16, ptr %1978, i64 32
  %1983 = load <16 x i16>, ptr %1982, align 2, !tbaa !45
  %1984 = getelementptr inbounds i16, ptr %1978, i64 48
  %1985 = load <16 x i16>, ptr %1984, align 2, !tbaa !45
  %1986 = getelementptr inbounds i16, ptr %1961, i64 %1977
  store <16 x i16> %1979, ptr %1986, align 2, !tbaa !45
  %1987 = getelementptr inbounds i16, ptr %1986, i64 16
  store <16 x i16> %1981, ptr %1987, align 2, !tbaa !45
  %1988 = getelementptr inbounds i16, ptr %1986, i64 32
  store <16 x i16> %1983, ptr %1988, align 2, !tbaa !45
  %1989 = getelementptr inbounds i16, ptr %1986, i64 48
  store <16 x i16> %1985, ptr %1989, align 2, !tbaa !45
  %1990 = add nuw i64 %1977, 64
  %1991 = icmp eq i64 %1990, %1975
  br i1 %1991, label %1992, label %1976, !llvm.loop !205

1992:                                             ; preds = %1976
  %1993 = icmp eq i64 %1974, 0
  br i1 %1993, label %2047, label %1994

1994:                                             ; preds = %1992
  %1995 = icmp ult i64 %1974, 8
  br i1 %1995, label %2009, label %1996

1996:                                             ; preds = %1971, %1994
  %1997 = phi i64 [ %1975, %1994 ], [ 0, %1971 ]
  %1998 = and i64 %1957, 7
  %1999 = sub nsw i64 %1964, %1998
  br label %2000

2000:                                             ; preds = %2000, %1996
  %2001 = phi i64 [ %1997, %1996 ], [ %2005, %2000 ]
  %2002 = getelementptr inbounds i16, ptr %378, i64 %2001
  %2003 = load <8 x i16>, ptr %2002, align 2, !tbaa !45
  %2004 = getelementptr inbounds i16, ptr %1961, i64 %2001
  store <8 x i16> %2003, ptr %2004, align 2, !tbaa !45
  %2005 = add nuw i64 %2001, 8
  %2006 = icmp eq i64 %2005, %1999
  br i1 %2006, label %2007, label %2000, !llvm.loop !206

2007:                                             ; preds = %2000
  %2008 = icmp eq i64 %1998, 0
  br i1 %2008, label %2047, label %2009

2009:                                             ; preds = %1966, %1963, %1994, %2007
  %2010 = phi i64 [ 0, %1963 ], [ 0, %1966 ], [ %1975, %1994 ], [ %1999, %2007 ]
  %2011 = sub i64 %1957, %2010
  %2012 = xor i64 %2010, -1
  %2013 = add nsw i64 %1964, %2012
  %2014 = and i64 %2011, 3
  %2015 = icmp eq i64 %2014, 0
  br i1 %2015, label %2025, label %2016

2016:                                             ; preds = %2009, %2016
  %2017 = phi i64 [ %2022, %2016 ], [ %2010, %2009 ]
  %2018 = phi i64 [ %2023, %2016 ], [ 0, %2009 ]
  %2019 = getelementptr inbounds i16, ptr %378, i64 %2017
  %2020 = load i16, ptr %2019, align 2, !tbaa !45
  %2021 = getelementptr inbounds i16, ptr %1961, i64 %2017
  store i16 %2020, ptr %2021, align 2, !tbaa !45
  %2022 = add nuw nsw i64 %2017, 1
  %2023 = add i64 %2018, 1
  %2024 = icmp eq i64 %2023, %2014
  br i1 %2024, label %2025, label %2016, !llvm.loop !207

2025:                                             ; preds = %2016, %2009
  %2026 = phi i64 [ %2010, %2009 ], [ %2022, %2016 ]
  %2027 = icmp ult i64 %2013, 3
  br i1 %2027, label %2047, label %2028

2028:                                             ; preds = %2025, %2028
  %2029 = phi i64 [ %2045, %2028 ], [ %2026, %2025 ]
  %2030 = getelementptr inbounds i16, ptr %378, i64 %2029
  %2031 = load i16, ptr %2030, align 2, !tbaa !45
  %2032 = getelementptr inbounds i16, ptr %1961, i64 %2029
  store i16 %2031, ptr %2032, align 2, !tbaa !45
  %2033 = add nuw nsw i64 %2029, 1
  %2034 = getelementptr inbounds i16, ptr %378, i64 %2033
  %2035 = load i16, ptr %2034, align 2, !tbaa !45
  %2036 = getelementptr inbounds i16, ptr %1961, i64 %2033
  store i16 %2035, ptr %2036, align 2, !tbaa !45
  %2037 = add nuw nsw i64 %2029, 2
  %2038 = getelementptr inbounds i16, ptr %378, i64 %2037
  %2039 = load i16, ptr %2038, align 2, !tbaa !45
  %2040 = getelementptr inbounds i16, ptr %1961, i64 %2037
  store i16 %2039, ptr %2040, align 2, !tbaa !45
  %2041 = add nuw nsw i64 %2029, 3
  %2042 = getelementptr inbounds i16, ptr %378, i64 %2041
  %2043 = load i16, ptr %2042, align 2, !tbaa !45
  %2044 = getelementptr inbounds i16, ptr %1961, i64 %2041
  store i16 %2043, ptr %2044, align 2, !tbaa !45
  %2045 = add nuw nsw i64 %2029, 4
  %2046 = icmp eq i64 %2045, %1964
  br i1 %2046, label %2047, label %2028, !llvm.loop !208

2047:                                             ; preds = %2025, %2028, %1992, %2007
  %2048 = shl i64 %1956, 31
  %2049 = add i64 %2048, -4294967296
  %2050 = ashr i64 %2049, 32
  %2051 = getelementptr inbounds i16, ptr %1961, i64 %2050
  %2052 = load i16, ptr %2051, align 2, !tbaa !45
  br label %2053

2053:                                             ; preds = %1944, %2047
  %2054 = phi i64 [ %1957, %2047 ], [ 0, %1944 ]
  %2055 = phi i16 [ %2052, %2047 ], [ -1, %1944 ]
  %2056 = and i64 %2054, 4294967295
  %2057 = getelementptr inbounds i16, ptr %1961, i64 %2056
  store i16 %2055, ptr %2057, align 2, !tbaa !45
  %2058 = trunc i64 %1957 to i16
  %2059 = add i16 %2058, 1
  %2060 = sext i32 %1954 to i64
  %2061 = getelementptr inbounds i16, ptr %1303, i64 %2060
  store i16 %2059, ptr %2061, align 2, !tbaa !45
  %2062 = add nsw i32 %1958, 2
  %2063 = add nsw i32 %2062, %1954
  %2064 = select i1 %145, i32 0, i32 %2063
  store i32 %2064, ptr %17, align 8
  br label %2094

2065:                                             ; preds = %692
  %2066 = load ptr, ptr %12, align 8, !tbaa !47
  %2067 = load i32, ptr %17, align 8, !tbaa !19
  %2068 = add i32 %2067, 1
  %2069 = sext i32 %2068 to i64
  %2070 = getelementptr inbounds i16, ptr %2066, i64 %2069
  %2071 = sext i32 %2067 to i64
  %2072 = getelementptr inbounds i16, ptr %2066, i64 %2071
  %2073 = load i16, ptr %2072, align 2, !tbaa !45
  %2074 = zext i16 %2073 to i32
  %2075 = add i32 %2068, %2074
  %2076 = add nsw i32 %2074, -1
  %2077 = sext i32 %2075 to i64
  %2078 = getelementptr inbounds i16, ptr %2066, i64 %2077
  %2079 = load i16, ptr %2078, align 2, !tbaa !45
  %2080 = zext i16 %2079 to i32
  %2081 = add nuw nsw i32 %2080, 1
  %2082 = add nsw i32 %2081, %2075
  %2083 = add nsw i32 %2080, -1
  %2084 = add i32 %2082, 1
  %2085 = sext i32 %2084 to i64
  %2086 = getelementptr inbounds i16, ptr %2066, i64 %2085
  %2087 = sext i32 %2082 to i64
  %2088 = getelementptr inbounds i16, ptr %2066, i64 %2087
  %2089 = load i16, ptr %2088, align 2, !tbaa !45
  %2090 = zext i16 %2089 to i32
  %2091 = add i32 %2084, %2090
  store i32 %2091, ptr %17, align 8, !tbaa !19
  %2092 = add nsw i32 %2090, -1
  %2093 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2094

2094:                                             ; preds = %2053, %2065
  %2095 = phi i32 [ %2093, %2065 ], [ %1308, %2053 ]
  %2096 = phi i32 [ %2083, %2065 ], [ %1849, %2053 ]
  %2097 = phi ptr [ %2086, %2065 ], [ %1961, %2053 ]
  %2098 = phi i32 [ %2092, %2065 ], [ %1958, %2053 ]
  %2099 = phi i32 [ %2076, %2065 ], [ %1827, %2053 ]
  %2100 = phi ptr [ %2070, %2065 ], [ %1307, %2053 ]
  %2101 = phi i32 [ %674, %2065 ], [ %1265, %2053 ]
  %2102 = phi i32 [ %673, %2065 ], [ %1266, %2053 ]
  %2103 = phi i32 [ %672, %2065 ], [ %1267, %2053 ]
  %2104 = phi i32 [ %671, %2065 ], [ %1268, %2053 ]
  %2105 = phi ptr [ %669, %2065 ], [ %961, %2053 ]
  %2106 = phi ptr [ %668, %2065 ], [ %962, %2053 ]
  %2107 = phi ptr [ %667, %2065 ], [ %963, %2053 ]
  %2108 = icmp eq i32 %2095, 0
  %2109 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2110 = icmp ne i32 %2109, 0
  %2111 = select i1 %2108, i1 true, i1 %2110
  br i1 %2111, label %2116, label %2112

2112:                                             ; preds = %2094
  %2113 = load i8, ptr %699, align 2, !tbaa !52
  %2114 = icmp eq i8 %2113, 1
  %2115 = select i1 %2114, double 1.000000e+00, double -1.000000e+00
  br label %2116

2116:                                             ; preds = %2094, %2112
  %2117 = phi double [ %2115, %2112 ], [ 0.000000e+00, %2094 ]
  %2118 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %677, i32 1
  %2119 = load float, ptr %2118, align 8, !tbaa !81
  %2120 = fpext float %2119 to double
  %2121 = fmul double %2120, 0x4074C104816F0069
  %2122 = fmul double %32, %2121
  %2123 = fmul double %28, %2122
  %2124 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %677, i32 2
  %2125 = load i16, ptr %2124, align 4, !tbaa !82
  %2126 = sext i16 %2125 to i32
  %2127 = load ptr, ptr %649, align 8, !tbaa !83
  %2128 = load i32, ptr %650, align 8, !tbaa !85
  %2129 = shl nsw i32 %2126, 1
  %2130 = mul i32 %2129, %2128
  %2131 = zext i32 %2130 to i64
  %2132 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2127, i64 %2131
  %2133 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2134 = extractelement <2 x double> %695, i64 0
  %2135 = extractelement <2 x double> %695, i64 1
  %2136 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2133, double noundef %2134, double noundef %2135, double noundef %698, ptr noundef %44, ptr noundef nonnull %2100, i32 noundef %2099, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2137 = icmp sgt i32 %2136, 0
  br i1 %2137, label %2138, label %2334

2138:                                             ; preds = %2116
  %2139 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2140 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2141 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2142 = mul nsw i32 %2141, %701
  %2143 = mul i32 %2140, 3
  %2144 = mul nsw i32 %713, 3
  %2145 = sext i32 %2144 to i64
  %2146 = add nsw i32 %2144, 1
  %2147 = sext i32 %2146 to i64
  %2148 = add nsw i32 %2144, 2
  %2149 = sext i32 %2148 to i64
  %2150 = zext i32 %2136 to i64
  br label %2151

2151:                                             ; preds = %2138, %2151
  %2152 = phi i64 [ 0, %2138 ], [ %2332, %2151 ]
  %2153 = phi double [ 0.000000e+00, %2138 ], [ %2277, %2151 ]
  %2154 = phi <2 x double> [ %676, %2138 ], [ %2256, %2151 ]
  %2155 = phi <2 x double> [ zeroinitializer, %2138 ], [ %2273, %2151 ]
  %2156 = shl nuw nsw i64 %2152, 1
  %2157 = getelementptr inbounds i32, ptr %144, i64 %2156
  %2158 = load i32, ptr %2157, align 4, !tbaa !5
  %2159 = ashr i32 %2158, 14
  %2160 = add nsw i32 %2159, %37
  %2161 = getelementptr inbounds i16, ptr %97, i64 %2152
  %2162 = load i16, ptr %2161, align 2, !tbaa !45
  %2163 = zext i16 %2162 to i64
  %2164 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2163
  %2165 = getelementptr inbounds double, ptr %143, i64 %2152
  %2166 = load double, ptr %2165, align 8, !tbaa !15
  %2167 = sext i32 %2160 to i64
  %2168 = getelementptr inbounds double, ptr %2139, i64 %2167
  %2169 = load double, ptr %2168, align 8, !tbaa !15
  %2170 = fsub double %2166, %2169
  %2171 = shl nsw i32 %2160, 4
  %2172 = sext i32 %2171 to i64
  %2173 = getelementptr inbounds double, ptr %31, i64 %2172
  %2174 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2163, i32 2
  %2175 = load i16, ptr %2174, align 4, !tbaa !82
  %2176 = sext i16 %2175 to i32
  %2177 = shl nsw i32 %2176, 1
  %2178 = sext i32 %2177 to i64
  %2179 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2132, i64 %2178
  %2180 = getelementptr inbounds %class.Vector, ptr %628, i64 %2163
  %2181 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2163, i32 1
  %2182 = load float, ptr %2181, align 8, !tbaa !81
  %2183 = fpext float %2182 to double
  %2184 = fmul double %2123, %2183
  %2185 = getelementptr inbounds %class.Vector, ptr %2164, i64 0, i32 2
  %2186 = load double, ptr %2185, align 8, !tbaa !50
  %2187 = fsub double %698, %2186
  %2188 = load double, ptr %2179, align 8, !tbaa !86
  %2189 = fmul double %32, %2188
  %2190 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2132, i64 %2178, i32 1
  %2191 = load double, ptr %2190, align 8, !tbaa !88
  %2192 = load double, ptr %2173, align 8, !tbaa !15
  %2193 = getelementptr inbounds double, ptr %2173, i64 2
  %2194 = load double, ptr %2193, align 8, !tbaa !15
  %2195 = fmul double %2191, %651
  %2196 = fmul double %2195, %2194
  %2197 = tail call double @llvm.fmuladd.f64(double %2189, double %2192, double %2196)
  %2198 = getelementptr inbounds double, ptr %2173, i64 1
  %2199 = load double, ptr %2198, align 8, !tbaa !15
  %2200 = getelementptr inbounds double, ptr %2173, i64 3
  %2201 = load double, ptr %2200, align 8, !tbaa !15
  %2202 = fmul double %2195, %2201
  %2203 = tail call double @llvm.fmuladd.f64(double %2189, double %2199, double %2202)
  %2204 = getelementptr inbounds double, ptr %2173, i64 4
  %2205 = load double, ptr %2204, align 8, !tbaa !15
  %2206 = getelementptr inbounds double, ptr %2173, i64 6
  %2207 = load double, ptr %2206, align 8, !tbaa !15
  %2208 = fmul double %2195, %2207
  %2209 = tail call double @llvm.fmuladd.f64(double %2189, double %2205, double %2208)
  %2210 = getelementptr inbounds double, ptr %2173, i64 5
  %2211 = load double, ptr %2210, align 8, !tbaa !15
  %2212 = getelementptr inbounds double, ptr %2173, i64 7
  %2213 = load double, ptr %2212, align 8, !tbaa !15
  %2214 = fmul double %2195, %2213
  %2215 = tail call double @llvm.fmuladd.f64(double %2189, double %2211, double %2214)
  %2216 = tail call double @llvm.fmuladd.f64(double %2170, double %2197, double %2203)
  %2217 = tail call double @llvm.fmuladd.f64(double %2216, double %2170, double %2209)
  %2218 = fmul double %2117, %2217
  %2219 = load double, ptr %653, align 8, !tbaa !15
  %2220 = tail call double @llvm.fmuladd.f64(double %2218, double %2187, double %2219)
  %2221 = getelementptr inbounds double, ptr %2173, i64 8
  %2222 = getelementptr inbounds double, ptr %2173, i64 9
  %2223 = getelementptr inbounds double, ptr %2173, i64 10
  %2224 = getelementptr inbounds double, ptr %2173, i64 11
  %2225 = insertelement <2 x double> poison, double %2170, i64 0
  %2226 = shufflevector <2 x double> %2225, <2 x double> poison, <2 x i32> zeroinitializer
  %2227 = load double, ptr %655, align 8, !tbaa !15
  %2228 = load <2 x double>, ptr %2164, align 8, !tbaa !15
  %2229 = fsub <2 x double> %695, %2228
  %2230 = load <2 x double>, ptr %652, align 8, !tbaa !15
  %2231 = insertelement <2 x double> poison, double %2218, i64 0
  %2232 = shufflevector <2 x double> %2231, <2 x double> poison, <2 x i32> zeroinitializer
  %2233 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2232, <2 x double> %2229, <2 x double> %2230)
  store <2 x double> %2233, ptr %652, align 8, !tbaa !15
  store double %2220, ptr %653, align 8, !tbaa !15
  %2234 = load double, ptr %2221, align 8, !tbaa !15
  %2235 = fmul double %2184, %2234
  %2236 = load double, ptr %2222, align 8, !tbaa !15
  %2237 = fmul double %2184, %2236
  %2238 = load double, ptr %2223, align 8, !tbaa !15
  %2239 = fmul double %2184, %2238
  %2240 = load double, ptr %2224, align 8, !tbaa !15
  %2241 = fmul double %2184, %2240
  %2242 = insertelement <2 x double> poison, double %2235, i64 0
  %2243 = insertelement <2 x double> %2242, double %2197, i64 1
  %2244 = fmul <2 x double> %2226, %2243
  %2245 = insertelement <2 x double> poison, double %2237, i64 0
  %2246 = insertelement <2 x double> %2245, double %2203, i64 1
  %2247 = fmul <2 x double> %2246, <double 2.500000e-01, double 2.500000e-01>
  %2248 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2244, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2247)
  %2249 = insertelement <2 x double> poison, double %2239, i64 0
  %2250 = insertelement <2 x double> %2249, double %2209, i64 1
  %2251 = fmul <2 x double> %2250, <double 5.000000e-01, double 5.000000e-01>
  %2252 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2248, <2 x double> %2226, <2 x double> %2251)
  %2253 = insertelement <2 x double> poison, double %2241, i64 0
  %2254 = insertelement <2 x double> %2253, double %2215, i64 1
  %2255 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2252, <2 x double> %2226, <2 x double> %2254)
  %2256 = fsub <2 x double> %2154, %2255
  %2257 = tail call double @llvm.fmuladd.f64(double %2170, double %2235, double %2237)
  %2258 = tail call double @llvm.fmuladd.f64(double %2257, double %2170, double %2239)
  %2259 = fmul double %2117, %2258
  %2260 = load <2 x double>, ptr %654, align 8, !tbaa !15
  %2261 = insertelement <2 x double> poison, double %2259, i64 0
  %2262 = shufflevector <2 x double> %2261, <2 x double> poison, <2 x i32> zeroinitializer
  %2263 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2262, <2 x double> %2229, <2 x double> %2260)
  store <2 x double> %2263, ptr %654, align 8, !tbaa !15
  %2264 = tail call double @llvm.fmuladd.f64(double %2259, double %2187, double %2227)
  store double %2264, ptr %655, align 8, !tbaa !15
  %2265 = fadd double %2197, %2235
  %2266 = fadd double %2203, %2237
  %2267 = fadd double %2209, %2239
  %2268 = tail call double @llvm.fmuladd.f64(double %2170, double %2265, double %2266)
  %2269 = tail call double @llvm.fmuladd.f64(double %2268, double %2170, double %2267)
  %2270 = insertelement <2 x double> poison, double %2269, i64 0
  %2271 = shufflevector <2 x double> %2270, <2 x double> poison, <2 x i32> zeroinitializer
  %2272 = fmul <2 x double> %2229, %2271
  %2273 = fadd <2 x double> %2155, %2272
  %2274 = load <2 x double>, ptr %2180, align 8, !tbaa !15
  %2275 = fsub <2 x double> %2274, %2272
  store <2 x double> %2275, ptr %2180, align 8, !tbaa !15
  %2276 = fmul double %2187, %2269
  %2277 = fadd double %2153, %2276
  %2278 = getelementptr inbounds %class.Vector, ptr %628, i64 %2163, i32 2
  %2279 = load double, ptr %2278, align 8, !tbaa !89
  %2280 = fsub double %2279, %2276
  store double %2280, ptr %2278, align 8, !tbaa !89
  %2281 = load double, ptr %2185, align 8, !tbaa !50
  %2282 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2283 = fsub double %2281, %2282
  %2284 = fmul double %10, %2283
  %2285 = tail call double @llvm.floor.f64(double %2284)
  %2286 = fptosi double %2285 to i32
  %2287 = icmp slt i32 %2286, 0
  %2288 = select i1 %2287, i32 %2140, i32 0
  %2289 = icmp sgt i32 %2140, %2286
  %2290 = select i1 %2289, i32 0, i32 %2140
  %2291 = sub i32 %2286, %2290
  %2292 = add i32 %2291, %2288
  %2293 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2163, i32 3
  %2294 = load i8, ptr %2293, align 2, !tbaa !52
  %2295 = zext i8 %2294 to i32
  %2296 = fmul <2 x double> %2229, %2272
  %2297 = extractelement <2 x double> %2296, i64 0
  %2298 = fmul <2 x double> %2229, %2272
  %2299 = extractelement <2 x double> %2298, i64 1
  %2300 = fmul double %2187, %2276
  %2301 = add nsw i32 %2142, %2295
  %2302 = mul i32 %2143, %2301
  %2303 = sext i32 %2302 to i64
  %2304 = getelementptr inbounds double, ptr %8, i64 %2303
  %2305 = fmul double %2297, 5.000000e-01
  %2306 = fmul double %2299, 5.000000e-01
  %2307 = fmul double %2300, 5.000000e-01
  %2308 = getelementptr inbounds double, ptr %2304, i64 %2145
  %2309 = load double, ptr %2308, align 8, !tbaa !15
  %2310 = fadd double %2305, %2309
  store double %2310, ptr %2308, align 8, !tbaa !15
  %2311 = getelementptr inbounds double, ptr %2304, i64 %2147
  %2312 = load double, ptr %2311, align 8, !tbaa !15
  %2313 = fadd double %2306, %2312
  store double %2313, ptr %2311, align 8, !tbaa !15
  %2314 = getelementptr inbounds double, ptr %2304, i64 %2149
  %2315 = load double, ptr %2314, align 8, !tbaa !15
  %2316 = fadd double %2307, %2315
  store double %2316, ptr %2314, align 8, !tbaa !15
  %2317 = mul nsw i32 %2292, 3
  %2318 = sext i32 %2317 to i64
  %2319 = getelementptr inbounds double, ptr %2304, i64 %2318
  %2320 = load double, ptr %2319, align 8, !tbaa !15
  %2321 = fadd double %2305, %2320
  store double %2321, ptr %2319, align 8, !tbaa !15
  %2322 = add nsw i32 %2317, 1
  %2323 = sext i32 %2322 to i64
  %2324 = getelementptr inbounds double, ptr %2304, i64 %2323
  %2325 = load double, ptr %2324, align 8, !tbaa !15
  %2326 = fadd double %2306, %2325
  store double %2326, ptr %2324, align 8, !tbaa !15
  %2327 = add nsw i32 %2317, 2
  %2328 = sext i32 %2327 to i64
  %2329 = getelementptr inbounds double, ptr %2304, i64 %2328
  %2330 = load double, ptr %2329, align 8, !tbaa !15
  %2331 = fadd double %2307, %2330
  store double %2331, ptr %2329, align 8, !tbaa !15
  %2332 = add nuw nsw i64 %2152, 1
  %2333 = icmp eq i64 %2332, %2150
  br i1 %2333, label %2334, label %2151

2334:                                             ; preds = %2151, %2116
  %2335 = phi double [ 0.000000e+00, %2116 ], [ %2277, %2151 ]
  %2336 = phi <2 x double> [ %676, %2116 ], [ %2256, %2151 ]
  %2337 = phi <2 x double> [ zeroinitializer, %2116 ], [ %2273, %2151 ]
  %2338 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2339 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2338, double noundef %2134, double noundef %2135, double noundef %698, ptr noundef %44, ptr noundef %2097, i32 noundef %2098, ptr noundef %97, double noundef %34, ptr noundef %143)
  %2340 = icmp sgt i32 %2339, 0
  br i1 %2340, label %2341, label %2539

2341:                                             ; preds = %2334
  %2342 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2343 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2344 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2345 = mul nsw i32 %2344, %701
  %2346 = mul i32 %2343, 3
  %2347 = mul nsw i32 %713, 3
  %2348 = sext i32 %2347 to i64
  %2349 = add nsw i32 %2347, 1
  %2350 = sext i32 %2349 to i64
  %2351 = add nsw i32 %2347, 2
  %2352 = sext i32 %2351 to i64
  %2353 = zext i32 %2339 to i64
  br label %2354

2354:                                             ; preds = %2341, %2354
  %2355 = phi i64 [ 0, %2341 ], [ %2537, %2354 ]
  %2356 = phi double [ %2335, %2341 ], [ %2482, %2354 ]
  %2357 = phi <2 x double> [ %2336, %2341 ], [ %2461, %2354 ]
  %2358 = phi <2 x double> [ %2337, %2341 ], [ %2478, %2354 ]
  %2359 = shl nuw nsw i64 %2355, 1
  %2360 = getelementptr inbounds i32, ptr %144, i64 %2359
  %2361 = load i32, ptr %2360, align 4, !tbaa !5
  %2362 = ashr i32 %2361, 14
  %2363 = add nsw i32 %2362, %37
  %2364 = getelementptr inbounds i16, ptr %97, i64 %2355
  %2365 = load i16, ptr %2364, align 2, !tbaa !45
  %2366 = zext i16 %2365 to i64
  %2367 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2366
  %2368 = getelementptr inbounds double, ptr %143, i64 %2355
  %2369 = load double, ptr %2368, align 8, !tbaa !15
  %2370 = sext i32 %2363 to i64
  %2371 = getelementptr inbounds double, ptr %2342, i64 %2370
  %2372 = load double, ptr %2371, align 8, !tbaa !15
  %2373 = fsub double %2369, %2372
  %2374 = shl nsw i32 %2363, 4
  %2375 = sext i32 %2374 to i64
  %2376 = getelementptr inbounds double, ptr %31, i64 %2375
  %2377 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2366, i32 2
  %2378 = load i16, ptr %2377, align 4, !tbaa !82
  %2379 = sext i16 %2378 to i32
  %2380 = shl nsw i32 %2379, 1
  %2381 = sext i32 %2380 to i64
  %2382 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2132, i64 %2381
  %2383 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2382, i64 1
  %2384 = getelementptr inbounds %class.Vector, ptr %628, i64 %2366
  %2385 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2366, i32 1
  %2386 = load float, ptr %2385, align 8, !tbaa !81
  %2387 = fpext float %2386 to double
  %2388 = fmul double %2123, %2387
  %2389 = getelementptr inbounds %class.Vector, ptr %2367, i64 0, i32 2
  %2390 = load double, ptr %2389, align 8, !tbaa !50
  %2391 = fsub double %698, %2390
  %2392 = load double, ptr %2383, align 8, !tbaa !86
  %2393 = fmul double %32, %2392
  %2394 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2382, i64 1, i32 1
  %2395 = load double, ptr %2394, align 8, !tbaa !88
  %2396 = load double, ptr %2376, align 8, !tbaa !15
  %2397 = getelementptr inbounds double, ptr %2376, i64 2
  %2398 = load double, ptr %2397, align 8, !tbaa !15
  %2399 = fmul double %2395, %651
  %2400 = fmul double %2399, %2398
  %2401 = tail call double @llvm.fmuladd.f64(double %2393, double %2396, double %2400)
  %2402 = getelementptr inbounds double, ptr %2376, i64 1
  %2403 = load double, ptr %2402, align 8, !tbaa !15
  %2404 = getelementptr inbounds double, ptr %2376, i64 3
  %2405 = load double, ptr %2404, align 8, !tbaa !15
  %2406 = fmul double %2399, %2405
  %2407 = tail call double @llvm.fmuladd.f64(double %2393, double %2403, double %2406)
  %2408 = getelementptr inbounds double, ptr %2376, i64 4
  %2409 = load double, ptr %2408, align 8, !tbaa !15
  %2410 = getelementptr inbounds double, ptr %2376, i64 6
  %2411 = load double, ptr %2410, align 8, !tbaa !15
  %2412 = fmul double %2399, %2411
  %2413 = tail call double @llvm.fmuladd.f64(double %2393, double %2409, double %2412)
  %2414 = getelementptr inbounds double, ptr %2376, i64 5
  %2415 = load double, ptr %2414, align 8, !tbaa !15
  %2416 = getelementptr inbounds double, ptr %2376, i64 7
  %2417 = load double, ptr %2416, align 8, !tbaa !15
  %2418 = fmul double %2399, %2417
  %2419 = tail call double @llvm.fmuladd.f64(double %2393, double %2415, double %2418)
  %2420 = tail call double @llvm.fmuladd.f64(double %2373, double %2401, double %2407)
  %2421 = tail call double @llvm.fmuladd.f64(double %2420, double %2373, double %2413)
  %2422 = fmul double %2117, %2421
  %2423 = load double, ptr %653, align 8, !tbaa !15
  %2424 = tail call double @llvm.fmuladd.f64(double %2422, double %2391, double %2423)
  %2425 = fmul double %657, %2388
  %2426 = getelementptr inbounds double, ptr %2376, i64 8
  %2427 = getelementptr inbounds double, ptr %2376, i64 9
  %2428 = getelementptr inbounds double, ptr %2376, i64 10
  %2429 = getelementptr inbounds double, ptr %2376, i64 11
  %2430 = insertelement <2 x double> poison, double %2373, i64 0
  %2431 = shufflevector <2 x double> %2430, <2 x double> poison, <2 x i32> zeroinitializer
  %2432 = load double, ptr %655, align 8, !tbaa !15
  %2433 = load <2 x double>, ptr %2367, align 8, !tbaa !15
  %2434 = fsub <2 x double> %695, %2433
  %2435 = load <2 x double>, ptr %652, align 8, !tbaa !15
  %2436 = insertelement <2 x double> poison, double %2422, i64 0
  %2437 = shufflevector <2 x double> %2436, <2 x double> poison, <2 x i32> zeroinitializer
  %2438 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2437, <2 x double> %2434, <2 x double> %2435)
  store <2 x double> %2438, ptr %652, align 8, !tbaa !15
  store double %2424, ptr %653, align 8, !tbaa !15
  %2439 = load double, ptr %2426, align 8, !tbaa !15
  %2440 = fmul double %2425, %2439
  %2441 = load double, ptr %2427, align 8, !tbaa !15
  %2442 = fmul double %2425, %2441
  %2443 = load double, ptr %2428, align 8, !tbaa !15
  %2444 = fmul double %2425, %2443
  %2445 = load double, ptr %2429, align 8, !tbaa !15
  %2446 = fmul double %2425, %2445
  %2447 = insertelement <2 x double> poison, double %2440, i64 0
  %2448 = insertelement <2 x double> %2447, double %2401, i64 1
  %2449 = fmul <2 x double> %2431, %2448
  %2450 = insertelement <2 x double> poison, double %2442, i64 0
  %2451 = insertelement <2 x double> %2450, double %2407, i64 1
  %2452 = fmul <2 x double> %2451, <double 2.500000e-01, double 2.500000e-01>
  %2453 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2449, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2452)
  %2454 = insertelement <2 x double> poison, double %2444, i64 0
  %2455 = insertelement <2 x double> %2454, double %2413, i64 1
  %2456 = fmul <2 x double> %2455, <double 5.000000e-01, double 5.000000e-01>
  %2457 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2453, <2 x double> %2431, <2 x double> %2456)
  %2458 = insertelement <2 x double> poison, double %2446, i64 0
  %2459 = insertelement <2 x double> %2458, double %2419, i64 1
  %2460 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2457, <2 x double> %2431, <2 x double> %2459)
  %2461 = fsub <2 x double> %2357, %2460
  %2462 = tail call double @llvm.fmuladd.f64(double %2373, double %2440, double %2442)
  %2463 = tail call double @llvm.fmuladd.f64(double %2462, double %2373, double %2444)
  %2464 = fmul double %2117, %2463
  %2465 = load <2 x double>, ptr %654, align 8, !tbaa !15
  %2466 = insertelement <2 x double> poison, double %2464, i64 0
  %2467 = shufflevector <2 x double> %2466, <2 x double> poison, <2 x i32> zeroinitializer
  %2468 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2467, <2 x double> %2434, <2 x double> %2465)
  store <2 x double> %2468, ptr %654, align 8, !tbaa !15
  %2469 = tail call double @llvm.fmuladd.f64(double %2464, double %2391, double %2432)
  store double %2469, ptr %655, align 8, !tbaa !15
  %2470 = fadd double %2401, %2440
  %2471 = fadd double %2407, %2442
  %2472 = fadd double %2413, %2444
  %2473 = tail call double @llvm.fmuladd.f64(double %2373, double %2470, double %2471)
  %2474 = tail call double @llvm.fmuladd.f64(double %2473, double %2373, double %2472)
  %2475 = insertelement <2 x double> poison, double %2474, i64 0
  %2476 = shufflevector <2 x double> %2475, <2 x double> poison, <2 x i32> zeroinitializer
  %2477 = fmul <2 x double> %2434, %2476
  %2478 = fadd <2 x double> %2358, %2477
  %2479 = load <2 x double>, ptr %2384, align 8, !tbaa !15
  %2480 = fsub <2 x double> %2479, %2477
  store <2 x double> %2480, ptr %2384, align 8, !tbaa !15
  %2481 = fmul double %2391, %2474
  %2482 = fadd double %2356, %2481
  %2483 = getelementptr inbounds %class.Vector, ptr %628, i64 %2366, i32 2
  %2484 = load double, ptr %2483, align 8, !tbaa !89
  %2485 = fsub double %2484, %2481
  store double %2485, ptr %2483, align 8, !tbaa !89
  %2486 = load double, ptr %2389, align 8, !tbaa !50
  %2487 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2488 = fsub double %2486, %2487
  %2489 = fmul double %10, %2488
  %2490 = tail call double @llvm.floor.f64(double %2489)
  %2491 = fptosi double %2490 to i32
  %2492 = icmp slt i32 %2491, 0
  %2493 = select i1 %2492, i32 %2343, i32 0
  %2494 = icmp sgt i32 %2343, %2491
  %2495 = select i1 %2494, i32 0, i32 %2343
  %2496 = sub i32 %2491, %2495
  %2497 = add i32 %2496, %2493
  %2498 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2366, i32 3
  %2499 = load i8, ptr %2498, align 2, !tbaa !52
  %2500 = zext i8 %2499 to i32
  %2501 = fmul <2 x double> %2434, %2477
  %2502 = extractelement <2 x double> %2501, i64 0
  %2503 = fmul <2 x double> %2434, %2477
  %2504 = extractelement <2 x double> %2503, i64 1
  %2505 = fmul double %2391, %2481
  %2506 = add nsw i32 %2345, %2500
  %2507 = mul i32 %2346, %2506
  %2508 = sext i32 %2507 to i64
  %2509 = getelementptr inbounds double, ptr %8, i64 %2508
  %2510 = fmul double %2502, 5.000000e-01
  %2511 = fmul double %2504, 5.000000e-01
  %2512 = fmul double %2505, 5.000000e-01
  %2513 = getelementptr inbounds double, ptr %2509, i64 %2348
  %2514 = load double, ptr %2513, align 8, !tbaa !15
  %2515 = fadd double %2510, %2514
  store double %2515, ptr %2513, align 8, !tbaa !15
  %2516 = getelementptr inbounds double, ptr %2509, i64 %2350
  %2517 = load double, ptr %2516, align 8, !tbaa !15
  %2518 = fadd double %2511, %2517
  store double %2518, ptr %2516, align 8, !tbaa !15
  %2519 = getelementptr inbounds double, ptr %2509, i64 %2352
  %2520 = load double, ptr %2519, align 8, !tbaa !15
  %2521 = fadd double %2512, %2520
  store double %2521, ptr %2519, align 8, !tbaa !15
  %2522 = mul nsw i32 %2497, 3
  %2523 = sext i32 %2522 to i64
  %2524 = getelementptr inbounds double, ptr %2509, i64 %2523
  %2525 = load double, ptr %2524, align 8, !tbaa !15
  %2526 = fadd double %2510, %2525
  store double %2526, ptr %2524, align 8, !tbaa !15
  %2527 = add nsw i32 %2522, 1
  %2528 = sext i32 %2527 to i64
  %2529 = getelementptr inbounds double, ptr %2509, i64 %2528
  %2530 = load double, ptr %2529, align 8, !tbaa !15
  %2531 = fadd double %2511, %2530
  store double %2531, ptr %2529, align 8, !tbaa !15
  %2532 = add nsw i32 %2522, 2
  %2533 = sext i32 %2532 to i64
  %2534 = getelementptr inbounds double, ptr %2509, i64 %2533
  %2535 = load double, ptr %2534, align 8, !tbaa !15
  %2536 = fadd double %2512, %2535
  store double %2536, ptr %2534, align 8, !tbaa !15
  %2537 = add nuw nsw i64 %2355, 1
  %2538 = icmp eq i64 %2537, %2353
  br i1 %2538, label %2539, label %2354

2539:                                             ; preds = %2354, %2334
  %2540 = phi double [ %2335, %2334 ], [ %2482, %2354 ]
  %2541 = phi <2 x double> [ %2336, %2334 ], [ %2461, %2354 ]
  %2542 = phi <2 x double> [ %2337, %2334 ], [ %2478, %2354 ]
  %2543 = add i32 %2096, %665
  %2544 = add i32 %2543, %2339
  %2545 = getelementptr inbounds %class.Vector, ptr %628, i64 %677
  %2546 = load <2 x double>, ptr %2545, align 8, !tbaa !15
  %2547 = fadd <2 x double> %2542, %2546
  store <2 x double> %2547, ptr %2545, align 8, !tbaa !15
  %2548 = getelementptr inbounds %class.Vector, ptr %628, i64 %677, i32 2
  %2549 = load double, ptr %2548, align 8, !tbaa !89
  %2550 = fadd double %2540, %2549
  store double %2550, ptr %2548, align 8, !tbaa !89
  br label %2551

2551:                                             ; preds = %2539, %1315, %1369, %688
  %2552 = phi i32 [ %689, %688 ], [ %693, %2539 ], [ %693, %1315 ], [ %693, %1369 ]
  %2553 = phi i32 [ %674, %688 ], [ %2101, %2539 ], [ %1265, %1315 ], [ %1265, %1369 ]
  %2554 = phi i32 [ %673, %688 ], [ %2102, %2539 ], [ %1266, %1315 ], [ %1266, %1369 ]
  %2555 = phi i32 [ %672, %688 ], [ %2103, %2539 ], [ %1267, %1315 ], [ %1267, %1369 ]
  %2556 = phi i32 [ %671, %688 ], [ %2104, %2539 ], [ %1268, %1315 ], [ %1268, %1369 ]
  %2557 = phi i32 [ %670, %688 ], [ %715, %2539 ], [ %715, %1315 ], [ %715, %1369 ]
  %2558 = phi ptr [ %669, %688 ], [ %2105, %2539 ], [ %961, %1315 ], [ %961, %1369 ]
  %2559 = phi ptr [ %668, %688 ], [ %2106, %2539 ], [ %962, %1315 ], [ %962, %1369 ]
  %2560 = phi ptr [ %667, %688 ], [ %2107, %2539 ], [ %963, %1315 ], [ %963, %1369 ]
  %2561 = phi i32 [ %691, %688 ], [ %666, %2539 ], [ %666, %1315 ], [ %666, %1369 ]
  %2562 = phi i32 [ %665, %688 ], [ %2544, %2539 ], [ %665, %1315 ], [ %665, %1369 ]
  %2563 = phi <2 x double> [ %676, %688 ], [ %2541, %2539 ], [ %676, %1315 ], [ %676, %1369 ]
  %2564 = add nsw i32 %2561, 1
  %2565 = icmp slt i32 %2564, %634
  br i1 %2565, label %664, label %2566

2566:                                             ; preds = %2551, %622
  %2567 = phi ptr [ null, %622 ], [ %2560, %2551 ]
  %2568 = phi i32 [ 0, %622 ], [ %2562, %2551 ]
  %2569 = phi <2 x double> [ zeroinitializer, %622 ], [ %2563, %2551 ]
  %2570 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2571 = load ptr, ptr %2570, align 8, !tbaa !24
  %2572 = icmp sgt i32 %39, 0
  br i1 %2572, label %2573, label %2575

2573:                                             ; preds = %2566
  %2574 = zext i32 %39 to i64
  br label %2601

2575:                                             ; preds = %2601, %2566
  %2576 = phi <4 x double> [ zeroinitializer, %2566 ], [ %2622, %2601 ]
  %2577 = phi <2 x double> [ zeroinitializer, %2566 ], [ %2628, %2601 ]
  %2578 = sitofp i32 %2568 to double
  %2579 = getelementptr inbounds double, ptr %6, i64 22
  %2580 = load double, ptr %2579, align 8, !tbaa !15
  %2581 = fadd double %2580, %2578
  store double %2581, ptr %2579, align 8, !tbaa !15
  %2582 = getelementptr inbounds double, ptr %6, i64 2
  %2583 = load double, ptr %6, align 8, !tbaa !15
  %2584 = extractelement <2 x double> %2569, i64 0
  %2585 = fadd double %2584, %2583
  store double %2585, ptr %6, align 8, !tbaa !15
  %2586 = load <4 x double>, ptr %2582, align 8, !tbaa !15
  %2587 = shufflevector <2 x double> %2569, <2 x double> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
  %2588 = shufflevector <2 x double> %2577, <2 x double> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %2589 = shufflevector <4 x double> %2587, <4 x double> %2588, <4 x i32> <i32 0, i32 5, i32 poison, i32 poison>
  %2590 = shufflevector <4 x double> %2589, <4 x double> %2576, <4 x i32> <i32 0, i32 1, i32 4, i32 7>
  %2591 = fadd <4 x double> %2590, %2586
  store <4 x double> %2591, ptr %2582, align 8, !tbaa !15
  %2592 = getelementptr inbounds double, ptr %6, i64 6
  %2593 = load <4 x double>, ptr %2592, align 8, !tbaa !15
  %2594 = fadd <4 x double> %2576, %2593
  store <4 x double> %2594, ptr %2592, align 8, !tbaa !15
  %2595 = getelementptr inbounds double, ptr %6, i64 10
  %2596 = load <2 x double>, ptr %2595, align 8, !tbaa !15
  %2597 = shufflevector <4 x double> %2576, <4 x double> poison, <2 x i32> <i32 2, i32 poison>
  %2598 = shufflevector <2 x double> %2597, <2 x double> %2577, <2 x i32> <i32 0, i32 2>
  %2599 = fadd <2 x double> %2598, %2596
  store <2 x double> %2599, ptr %2595, align 8, !tbaa !15
  %2600 = icmp eq ptr %2567, null
  br i1 %2600, label %2632, label %2631

2601:                                             ; preds = %2573, %2601
  %2602 = phi i64 [ 0, %2573 ], [ %2629, %2601 ]
  %2603 = phi <4 x double> [ zeroinitializer, %2573 ], [ %2622, %2601 ]
  %2604 = phi <2 x double> [ zeroinitializer, %2573 ], [ %2628, %2601 ]
  %2605 = getelementptr inbounds %class.Vector, ptr %628, i64 %2602
  %2606 = getelementptr inbounds %class.Vector, ptr %2571, i64 %2602
  %2607 = load <2 x double>, ptr %2605, align 8, !tbaa !15
  %2608 = load <2 x double>, ptr %2606, align 8, !tbaa !15
  %2609 = fadd <2 x double> %2607, %2608
  store <2 x double> %2609, ptr %2606, align 8, !tbaa !15
  %2610 = getelementptr inbounds %class.Vector, ptr %628, i64 %2602, i32 2
  %2611 = load double, ptr %2610, align 8, !tbaa !89
  %2612 = getelementptr inbounds %class.Vector, ptr %2571, i64 %2602, i32 2
  %2613 = load double, ptr %2612, align 8, !tbaa !89
  %2614 = fadd double %2611, %2613
  store double %2614, ptr %2612, align 8, !tbaa !89
  %2615 = getelementptr inbounds %struct.CompAtom, ptr %42, i64 %2602
  %2616 = load double, ptr %2615, align 8, !tbaa !69
  %2617 = getelementptr inbounds %class.Vector, ptr %2615, i64 0, i32 1
  %2618 = load <2 x double>, ptr %2605, align 8, !tbaa !15
  %2619 = shufflevector <2 x double> %2618, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
  %2620 = load <2 x double>, ptr %2617, align 8, !tbaa !15
  %2621 = shufflevector <2 x double> %2620, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %2622 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2619, <4 x double> %2621, <4 x double> %2603)
  %2623 = load double, ptr %2610, align 8, !tbaa !89
  %2624 = shufflevector <2 x double> %2618, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2625 = insertelement <2 x double> %2624, double %2623, i64 0
  %2626 = shufflevector <2 x double> %2620, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2627 = insertelement <2 x double> %2626, double %2616, i64 1
  %2628 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2625, <2 x double> %2627, <2 x double> %2604)
  %2629 = add nuw nsw i64 %2602, 1
  %2630 = icmp eq i64 %2629, %2574
  br i1 %2630, label %2575, label %2601

2631:                                             ; preds = %2575
  tail call void @_ZdaPv(ptr noundef nonnull %2567) #10
  br label %2632

2632:                                             ; preds = %2575, %2631, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil25calc_self_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2943

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %35 = fsub double 1.000000e+00, %34
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %37 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %38 = shl i32 %37, 6
  %39 = add i32 %38, -65472
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !5
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !5
  %44 = load ptr, ptr %0, align 8, !tbaa !24
  %45 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !24
  %51 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %52 = load ptr, ptr %51, align 8, !tbaa !25
  %53 = add nsw i32 %43, 5
  %54 = getelementptr inbounds %class.ResizeArray, ptr %52, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !26
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 2
  %57 = load i32, ptr %56, align 8, !tbaa !28
  %58 = icmp slt i32 %57, %53
  br i1 %58, label %59, label %97

59:                                               ; preds = %4
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 3
  %61 = load i32, ptr %60, align 4, !tbaa !31
  %62 = icmp slt i32 %61, %53
  br i1 %62, label %63, label %97

63:                                               ; preds = %59
  %64 = sitofp i32 %61 to float
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 5
  %66 = load float, ptr %65, align 4, !tbaa !32
  %67 = fmul float %66, %64
  %68 = fptosi float %67 to i32
  %69 = tail call i32 @llvm.smax.i32(i32 %68, i32 %53)
  %70 = sub nsw i32 %69, %61
  %71 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 6
  %72 = load i32, ptr %71, align 8, !tbaa !33
  %73 = icmp slt i32 %70, %72
  %74 = add nsw i32 %72, %61
  %75 = select i1 %73, i32 %74, i32 %69
  %76 = sext i32 %75 to i64
  %77 = shl nsw i64 %76, 1
  %78 = add nsw i64 %77, 31
  %79 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %78) #9
  %80 = getelementptr inbounds i8, ptr %79, i64 31
  %81 = ptrtoint ptr %80 to i64
  %82 = and i64 %81, 31
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds i8, ptr %80, i64 %83
  %85 = load ptr, ptr %55, align 8, !tbaa !34
  %86 = sext i32 %57 to i64
  %87 = shl nsw i64 %86, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %84, ptr align 1 %85, i64 %87, i1 false)
  %88 = icmp eq i32 %61, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %63
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !35
  %92 = icmp eq ptr %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %89
  tail call void @_ZdaPv(ptr noundef nonnull %91) #10
  br label %94

94:                                               ; preds = %93, %89, %63
  %95 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  store ptr %79, ptr %95, align 8, !tbaa !35
  store ptr %84, ptr %55, align 8, !tbaa !34
  store i32 %75, ptr %60, align 4, !tbaa !31
  %96 = load ptr, ptr %54, align 8, !tbaa !26
  br label %97

97:                                               ; preds = %4, %59, %94
  %98 = phi ptr [ %55, %4 ], [ %55, %59 ], [ %96, %94 ]
  store i32 %53, ptr %56, align 8, !tbaa !28
  %99 = load ptr, ptr %98, align 8, !tbaa !34
  %100 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 1, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !36
  %102 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 2
  %103 = load i32, ptr %102, align 8, !tbaa !38
  %104 = icmp slt i32 %103, %53
  br i1 %104, label %105, label %143

105:                                              ; preds = %97
  %106 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 3
  %107 = load i32, ptr %106, align 4, !tbaa !40
  %108 = icmp slt i32 %107, %53
  br i1 %108, label %109, label %143

109:                                              ; preds = %105
  %110 = sitofp i32 %107 to float
  %111 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 5
  %112 = load float, ptr %111, align 4, !tbaa !41
  %113 = fmul float %112, %110
  %114 = fptosi float %113 to i32
  %115 = tail call i32 @llvm.smax.i32(i32 %114, i32 %53)
  %116 = sub nsw i32 %115, %107
  %117 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 6
  %118 = load i32, ptr %117, align 8, !tbaa !42
  %119 = icmp slt i32 %116, %118
  %120 = add nsw i32 %118, %107
  %121 = select i1 %119, i32 %120, i32 %115
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 3
  %124 = add nsw i64 %123, 31
  %125 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %124) #9
  %126 = getelementptr inbounds i8, ptr %125, i64 31
  %127 = ptrtoint ptr %126 to i64
  %128 = and i64 %127, 31
  %129 = sub nsw i64 0, %128
  %130 = getelementptr inbounds i8, ptr %126, i64 %129
  %131 = load ptr, ptr %101, align 8, !tbaa !43
  %132 = sext i32 %103 to i64
  %133 = shl nsw i64 %132, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %130, ptr align 1 %131, i64 %133, i1 false)
  %134 = icmp eq i32 %107, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %109
  %136 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !44
  %138 = icmp eq ptr %137, null
  br i1 %138, label %140, label %139

139:                                              ; preds = %135
  tail call void @_ZdaPv(ptr noundef nonnull %137) #10
  br label %140

140:                                              ; preds = %139, %135, %109
  %141 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  store ptr %125, ptr %141, align 8, !tbaa !44
  store ptr %130, ptr %101, align 8, !tbaa !43
  store i32 %121, ptr %106, align 4, !tbaa !40
  %142 = load ptr, ptr %100, align 8, !tbaa !36
  br label %143

143:                                              ; preds = %97, %105, %140
  %144 = phi ptr [ %101, %97 ], [ %101, %105 ], [ %142, %140 ]
  store i32 %53, ptr %102, align 8, !tbaa !38
  %145 = load ptr, ptr %144, align 8, !tbaa !43
  %146 = getelementptr inbounds i32, ptr %145, i64 1
  %147 = icmp eq i32 %14, 0
  %148 = icmp ne i32 %16, 0
  %149 = select i1 %147, i1 %148, i1 false
  %150 = select i1 %149, i32 0, i32 %53
  %151 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 2, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !26
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 2
  %154 = load i32, ptr %153, align 8, !tbaa !28
  %155 = icmp slt i32 %154, %150
  br i1 %155, label %156, label %194

156:                                              ; preds = %143
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 3
  %158 = load i32, ptr %157, align 4, !tbaa !31
  %159 = icmp slt i32 %158, %150
  br i1 %159, label %160, label %194

160:                                              ; preds = %156
  %161 = sitofp i32 %158 to float
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 5
  %163 = load float, ptr %162, align 4, !tbaa !32
  %164 = fmul float %163, %161
  %165 = fptosi float %164 to i32
  %166 = tail call i32 @llvm.smax.i32(i32 %165, i32 %150)
  %167 = sub nsw i32 %166, %158
  %168 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 6
  %169 = load i32, ptr %168, align 8, !tbaa !33
  %170 = icmp slt i32 %167, %169
  %171 = add nsw i32 %169, %158
  %172 = select i1 %170, i32 %171, i32 %166
  %173 = sext i32 %172 to i64
  %174 = shl nsw i64 %173, 1
  %175 = add nsw i64 %174, 31
  %176 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %175) #9
  %177 = getelementptr inbounds i8, ptr %176, i64 31
  %178 = ptrtoint ptr %177 to i64
  %179 = and i64 %178, 31
  %180 = sub nsw i64 0, %179
  %181 = getelementptr inbounds i8, ptr %177, i64 %180
  %182 = load ptr, ptr %152, align 8, !tbaa !34
  %183 = sext i32 %154 to i64
  %184 = shl nsw i64 %183, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %181, ptr align 1 %182, i64 %184, i1 false)
  %185 = icmp eq i32 %158, 0
  br i1 %185, label %191, label %186

186:                                              ; preds = %160
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  %188 = load ptr, ptr %187, align 8, !tbaa !35
  %189 = icmp eq ptr %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZdaPv(ptr noundef nonnull %188) #10
  br label %191

191:                                              ; preds = %190, %186, %160
  %192 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  store ptr %176, ptr %192, align 8, !tbaa !35
  store ptr %181, ptr %152, align 8, !tbaa !34
  store i32 %172, ptr %157, align 4, !tbaa !31
  %193 = load ptr, ptr %151, align 8, !tbaa !26
  br label %194

194:                                              ; preds = %143, %156, %191
  %195 = phi ptr [ %152, %143 ], [ %152, %156 ], [ %193, %191 ]
  store i32 %150, ptr %153, align 8, !tbaa !28
  %196 = load ptr, ptr %195, align 8, !tbaa !34
  %197 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 3, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !26
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 2
  %200 = load i32, ptr %199, align 8, !tbaa !28
  %201 = icmp slt i32 %200, %150
  br i1 %201, label %202, label %240

202:                                              ; preds = %194
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 3
  %204 = load i32, ptr %203, align 4, !tbaa !31
  %205 = icmp slt i32 %204, %150
  br i1 %205, label %206, label %240

206:                                              ; preds = %202
  %207 = sitofp i32 %204 to float
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 5
  %209 = load float, ptr %208, align 4, !tbaa !32
  %210 = fmul float %209, %207
  %211 = fptosi float %210 to i32
  %212 = tail call i32 @llvm.smax.i32(i32 %211, i32 %150)
  %213 = sub nsw i32 %212, %204
  %214 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 6
  %215 = load i32, ptr %214, align 8, !tbaa !33
  %216 = icmp slt i32 %213, %215
  %217 = add nsw i32 %215, %204
  %218 = select i1 %216, i32 %217, i32 %212
  %219 = sext i32 %218 to i64
  %220 = shl nsw i64 %219, 1
  %221 = add nsw i64 %220, 31
  %222 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %221) #9
  %223 = getelementptr inbounds i8, ptr %222, i64 31
  %224 = ptrtoint ptr %223 to i64
  %225 = and i64 %224, 31
  %226 = sub nsw i64 0, %225
  %227 = getelementptr inbounds i8, ptr %223, i64 %226
  %228 = load ptr, ptr %198, align 8, !tbaa !34
  %229 = sext i32 %200 to i64
  %230 = shl nsw i64 %229, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %227, ptr align 1 %228, i64 %230, i1 false)
  %231 = icmp eq i32 %204, 0
  br i1 %231, label %237, label %232

232:                                              ; preds = %206
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  %234 = load ptr, ptr %233, align 8, !tbaa !35
  %235 = icmp eq ptr %234, null
  br i1 %235, label %237, label %236

236:                                              ; preds = %232
  tail call void @_ZdaPv(ptr noundef nonnull %234) #10
  br label %237

237:                                              ; preds = %236, %232, %206
  %238 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  store ptr %222, ptr %238, align 8, !tbaa !35
  store ptr %227, ptr %198, align 8, !tbaa !34
  store i32 %218, ptr %203, align 4, !tbaa !31
  %239 = load ptr, ptr %197, align 8, !tbaa !26
  br label %240

240:                                              ; preds = %194, %202, %237
  %241 = phi ptr [ %198, %194 ], [ %198, %202 ], [ %239, %237 ]
  store i32 %150, ptr %199, align 8, !tbaa !28
  %242 = load ptr, ptr %241, align 8, !tbaa !34
  %243 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 4, i32 1
  %244 = load ptr, ptr %243, align 8, !tbaa !26
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 2
  %246 = load i32, ptr %245, align 8, !tbaa !28
  %247 = icmp slt i32 %246, %150
  br i1 %247, label %248, label %286

248:                                              ; preds = %240
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 3
  %250 = load i32, ptr %249, align 4, !tbaa !31
  %251 = icmp slt i32 %250, %150
  br i1 %251, label %252, label %286

252:                                              ; preds = %248
  %253 = sitofp i32 %250 to float
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 5
  %255 = load float, ptr %254, align 4, !tbaa !32
  %256 = fmul float %255, %253
  %257 = fptosi float %256 to i32
  %258 = tail call i32 @llvm.smax.i32(i32 %257, i32 %150)
  %259 = sub nsw i32 %258, %250
  %260 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 6
  %261 = load i32, ptr %260, align 8, !tbaa !33
  %262 = icmp slt i32 %259, %261
  %263 = add nsw i32 %261, %250
  %264 = select i1 %262, i32 %263, i32 %258
  %265 = sext i32 %264 to i64
  %266 = shl nsw i64 %265, 1
  %267 = add nsw i64 %266, 31
  %268 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %267) #9
  %269 = getelementptr inbounds i8, ptr %268, i64 31
  %270 = ptrtoint ptr %269 to i64
  %271 = and i64 %270, 31
  %272 = sub nsw i64 0, %271
  %273 = getelementptr inbounds i8, ptr %269, i64 %272
  %274 = load ptr, ptr %244, align 8, !tbaa !34
  %275 = sext i32 %246 to i64
  %276 = shl nsw i64 %275, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %273, ptr align 1 %274, i64 %276, i1 false)
  %277 = icmp eq i32 %250, 0
  br i1 %277, label %283, label %278

278:                                              ; preds = %252
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !35
  %281 = icmp eq ptr %280, null
  br i1 %281, label %283, label %282

282:                                              ; preds = %278
  tail call void @_ZdaPv(ptr noundef nonnull %280) #10
  br label %283

283:                                              ; preds = %282, %278, %252
  %284 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  store ptr %268, ptr %284, align 8, !tbaa !35
  store ptr %273, ptr %244, align 8, !tbaa !34
  store i32 %264, ptr %249, align 4, !tbaa !31
  %285 = load ptr, ptr %243, align 8, !tbaa !26
  br label %286

286:                                              ; preds = %240, %248, %283
  %287 = phi ptr [ %244, %240 ], [ %244, %248 ], [ %285, %283 ]
  store i32 %150, ptr %245, align 8, !tbaa !28
  %288 = load ptr, ptr %287, align 8, !tbaa !34
  %289 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 5, i32 1
  %290 = load ptr, ptr %289, align 8, !tbaa !26
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 2
  %292 = load i32, ptr %291, align 8, !tbaa !28
  %293 = icmp slt i32 %292, %150
  br i1 %293, label %294, label %332

294:                                              ; preds = %286
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 3
  %296 = load i32, ptr %295, align 4, !tbaa !31
  %297 = icmp slt i32 %296, %150
  br i1 %297, label %298, label %332

298:                                              ; preds = %294
  %299 = sitofp i32 %296 to float
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 5
  %301 = load float, ptr %300, align 4, !tbaa !32
  %302 = fmul float %301, %299
  %303 = fptosi float %302 to i32
  %304 = tail call i32 @llvm.smax.i32(i32 %303, i32 %150)
  %305 = sub nsw i32 %304, %296
  %306 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 6
  %307 = load i32, ptr %306, align 8, !tbaa !33
  %308 = icmp slt i32 %305, %307
  %309 = add nsw i32 %307, %296
  %310 = select i1 %308, i32 %309, i32 %304
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 1
  %313 = add nsw i64 %312, 31
  %314 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %313) #9
  %315 = getelementptr inbounds i8, ptr %314, i64 31
  %316 = ptrtoint ptr %315 to i64
  %317 = and i64 %316, 31
  %318 = sub nsw i64 0, %317
  %319 = getelementptr inbounds i8, ptr %315, i64 %318
  %320 = load ptr, ptr %290, align 8, !tbaa !34
  %321 = sext i32 %292 to i64
  %322 = shl nsw i64 %321, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %319, ptr align 1 %320, i64 %322, i1 false)
  %323 = icmp eq i32 %296, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %298
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !35
  %327 = icmp eq ptr %326, null
  br i1 %327, label %329, label %328

328:                                              ; preds = %324
  tail call void @_ZdaPv(ptr noundef nonnull %326) #10
  br label %329

329:                                              ; preds = %328, %324, %298
  %330 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  store ptr %314, ptr %330, align 8, !tbaa !35
  store ptr %319, ptr %290, align 8, !tbaa !34
  store i32 %310, ptr %295, align 4, !tbaa !31
  %331 = load ptr, ptr %289, align 8, !tbaa !26
  br label %332

332:                                              ; preds = %286, %294, %329
  %333 = phi ptr [ %290, %286 ], [ %290, %294 ], [ %331, %329 ]
  store i32 %150, ptr %291, align 8, !tbaa !28
  %334 = load ptr, ptr %333, align 8, !tbaa !34
  %335 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 6, i32 1
  %336 = load ptr, ptr %335, align 8, !tbaa !26
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 2
  %338 = load i32, ptr %337, align 8, !tbaa !28
  %339 = icmp slt i32 %338, %150
  br i1 %339, label %340, label %378

340:                                              ; preds = %332
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 3
  %342 = load i32, ptr %341, align 4, !tbaa !31
  %343 = icmp slt i32 %342, %150
  br i1 %343, label %344, label %378

344:                                              ; preds = %340
  %345 = sitofp i32 %342 to float
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 5
  %347 = load float, ptr %346, align 4, !tbaa !32
  %348 = fmul float %347, %345
  %349 = fptosi float %348 to i32
  %350 = tail call i32 @llvm.smax.i32(i32 %349, i32 %150)
  %351 = sub nsw i32 %350, %342
  %352 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 6
  %353 = load i32, ptr %352, align 8, !tbaa !33
  %354 = icmp slt i32 %351, %353
  %355 = add nsw i32 %353, %342
  %356 = select i1 %354, i32 %355, i32 %350
  %357 = sext i32 %356 to i64
  %358 = shl nsw i64 %357, 1
  %359 = add nsw i64 %358, 31
  %360 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %359) #9
  %361 = getelementptr inbounds i8, ptr %360, i64 31
  %362 = ptrtoint ptr %361 to i64
  %363 = and i64 %362, 31
  %364 = sub nsw i64 0, %363
  %365 = getelementptr inbounds i8, ptr %361, i64 %364
  %366 = load ptr, ptr %336, align 8, !tbaa !34
  %367 = sext i32 %338 to i64
  %368 = shl nsw i64 %367, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %365, ptr align 1 %366, i64 %368, i1 false)
  %369 = icmp eq i32 %342, 0
  br i1 %369, label %375, label %370

370:                                              ; preds = %344
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !35
  %373 = icmp eq ptr %372, null
  br i1 %373, label %375, label %374

374:                                              ; preds = %370
  tail call void @_ZdaPv(ptr noundef nonnull %372) #10
  br label %375

375:                                              ; preds = %374, %370, %344
  %376 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  store ptr %360, ptr %376, align 8, !tbaa !35
  store ptr %365, ptr %336, align 8, !tbaa !34
  store i32 %356, ptr %341, align 4, !tbaa !31
  %377 = load ptr, ptr %335, align 8, !tbaa !26
  br label %378

378:                                              ; preds = %332, %340, %375
  %379 = phi ptr [ %336, %332 ], [ %336, %340 ], [ %377, %375 ]
  store i32 %150, ptr %337, align 8, !tbaa !28
  %380 = load ptr, ptr %379, align 8, !tbaa !34
  %381 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 15, i32 1
  %382 = load ptr, ptr %381, align 8, !tbaa !26
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 2
  %384 = load i32, ptr %383, align 8, !tbaa !28
  %385 = icmp slt i32 %384, %150
  br i1 %385, label %386, label %424

386:                                              ; preds = %378
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 3
  %388 = load i32, ptr %387, align 4, !tbaa !31
  %389 = icmp slt i32 %388, %150
  br i1 %389, label %390, label %424

390:                                              ; preds = %386
  %391 = sitofp i32 %388 to float
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 5
  %393 = load float, ptr %392, align 4, !tbaa !32
  %394 = fmul float %393, %391
  %395 = fptosi float %394 to i32
  %396 = tail call i32 @llvm.smax.i32(i32 %395, i32 %150)
  %397 = sub nsw i32 %396, %388
  %398 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 6
  %399 = load i32, ptr %398, align 8, !tbaa !33
  %400 = icmp slt i32 %397, %399
  %401 = add nsw i32 %399, %388
  %402 = select i1 %400, i32 %401, i32 %396
  %403 = sext i32 %402 to i64
  %404 = shl nsw i64 %403, 1
  %405 = add nsw i64 %404, 31
  %406 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %405) #9
  %407 = getelementptr inbounds i8, ptr %406, i64 31
  %408 = ptrtoint ptr %407 to i64
  %409 = and i64 %408, 31
  %410 = sub nsw i64 0, %409
  %411 = getelementptr inbounds i8, ptr %407, i64 %410
  %412 = load ptr, ptr %382, align 8, !tbaa !34
  %413 = sext i32 %384 to i64
  %414 = shl nsw i64 %413, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %411, ptr align 1 %412, i64 %414, i1 false)
  %415 = icmp eq i32 %388, 0
  br i1 %415, label %421, label %416

416:                                              ; preds = %390
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  %418 = load ptr, ptr %417, align 8, !tbaa !35
  %419 = icmp eq ptr %418, null
  br i1 %419, label %421, label %420

420:                                              ; preds = %416
  tail call void @_ZdaPv(ptr noundef nonnull %418) #10
  br label %421

421:                                              ; preds = %420, %416, %390
  %422 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  store ptr %406, ptr %422, align 8, !tbaa !35
  store ptr %411, ptr %382, align 8, !tbaa !34
  store i32 %402, ptr %387, align 4, !tbaa !31
  %423 = load ptr, ptr %381, align 8, !tbaa !26
  br label %424

424:                                              ; preds = %378, %386, %421
  %425 = phi ptr [ %382, %378 ], [ %382, %386 ], [ %423, %421 ]
  store i32 %150, ptr %383, align 8, !tbaa !28
  %426 = load ptr, ptr %425, align 8, !tbaa !34
  %427 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 16, i32 1
  %428 = load ptr, ptr %427, align 8, !tbaa !26
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 2
  %430 = load i32, ptr %429, align 8, !tbaa !28
  %431 = icmp slt i32 %430, %150
  br i1 %431, label %432, label %470

432:                                              ; preds = %424
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 3
  %434 = load i32, ptr %433, align 4, !tbaa !31
  %435 = icmp slt i32 %434, %150
  br i1 %435, label %436, label %470

436:                                              ; preds = %432
  %437 = sitofp i32 %434 to float
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 5
  %439 = load float, ptr %438, align 4, !tbaa !32
  %440 = fmul float %439, %437
  %441 = fptosi float %440 to i32
  %442 = tail call i32 @llvm.smax.i32(i32 %441, i32 %150)
  %443 = sub nsw i32 %442, %434
  %444 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 6
  %445 = load i32, ptr %444, align 8, !tbaa !33
  %446 = icmp slt i32 %443, %445
  %447 = add nsw i32 %445, %434
  %448 = select i1 %446, i32 %447, i32 %442
  %449 = sext i32 %448 to i64
  %450 = shl nsw i64 %449, 1
  %451 = add nsw i64 %450, 31
  %452 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %451) #9
  %453 = getelementptr inbounds i8, ptr %452, i64 31
  %454 = ptrtoint ptr %453 to i64
  %455 = and i64 %454, 31
  %456 = sub nsw i64 0, %455
  %457 = getelementptr inbounds i8, ptr %453, i64 %456
  %458 = load ptr, ptr %428, align 8, !tbaa !34
  %459 = sext i32 %430 to i64
  %460 = shl nsw i64 %459, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %457, ptr align 1 %458, i64 %460, i1 false)
  %461 = icmp eq i32 %434, 0
  br i1 %461, label %467, label %462

462:                                              ; preds = %436
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  %464 = load ptr, ptr %463, align 8, !tbaa !35
  %465 = icmp eq ptr %464, null
  br i1 %465, label %467, label %466

466:                                              ; preds = %462
  tail call void @_ZdaPv(ptr noundef nonnull %464) #10
  br label %467

467:                                              ; preds = %466, %462, %436
  %468 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  store ptr %452, ptr %468, align 8, !tbaa !35
  store ptr %457, ptr %428, align 8, !tbaa !34
  store i32 %448, ptr %433, align 4, !tbaa !31
  %469 = load ptr, ptr %427, align 8, !tbaa !26
  br label %470

470:                                              ; preds = %424, %432, %467
  %471 = phi ptr [ %428, %424 ], [ %428, %432 ], [ %469, %467 ]
  store i32 %150, ptr %429, align 8, !tbaa !28
  %472 = load ptr, ptr %471, align 8, !tbaa !34
  br i1 %149, label %614, label %473

473:                                              ; preds = %470
  %474 = icmp sgt i32 %43, 0
  br i1 %474, label %475, label %605

475:                                              ; preds = %473
  %476 = zext i32 %43 to i64
  %477 = and i64 %476, 1
  %478 = icmp eq i32 %43, 1
  br i1 %478, label %511, label %479

479:                                              ; preds = %475
  %480 = and i64 %476, 4294967294
  br label %481

481:                                              ; preds = %506, %479
  %482 = phi i64 [ 0, %479 ], [ %508, %506 ]
  %483 = phi i32 [ 0, %479 ], [ %507, %506 ]
  %484 = phi i64 [ 0, %479 ], [ %509, %506 ]
  %485 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %482, i32 4
  %486 = load i8, ptr %485, align 1
  %487 = and i8 %486, 7
  %488 = icmp eq i8 %487, 0
  br i1 %488, label %494, label %489

489:                                              ; preds = %481
  %490 = trunc i64 %482 to i16
  %491 = add nsw i32 %483, 1
  %492 = sext i32 %483 to i64
  %493 = getelementptr inbounds i16, ptr %196, i64 %492
  store i16 %490, ptr %493, align 2, !tbaa !45
  br label %494

494:                                              ; preds = %481, %489
  %495 = phi i32 [ %491, %489 ], [ %483, %481 ]
  %496 = or i64 %482, 1
  %497 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %496, i32 4
  %498 = load i8, ptr %497, align 1
  %499 = and i8 %498, 7
  %500 = icmp eq i8 %499, 0
  br i1 %500, label %506, label %501

501:                                              ; preds = %494
  %502 = trunc i64 %496 to i16
  %503 = add nsw i32 %495, 1
  %504 = sext i32 %495 to i64
  %505 = getelementptr inbounds i16, ptr %196, i64 %504
  store i16 %502, ptr %505, align 2, !tbaa !45
  br label %506

506:                                              ; preds = %501, %494
  %507 = phi i32 [ %503, %501 ], [ %495, %494 ]
  %508 = add nuw nsw i64 %482, 2
  %509 = add i64 %484, 2
  %510 = icmp eq i64 %509, %480
  br i1 %510, label %511, label %481

511:                                              ; preds = %506, %475
  %512 = phi i32 [ undef, %475 ], [ %507, %506 ]
  %513 = phi i64 [ 0, %475 ], [ %508, %506 ]
  %514 = phi i32 [ 0, %475 ], [ %507, %506 ]
  %515 = icmp eq i64 %477, 0
  br i1 %515, label %526, label %516

516:                                              ; preds = %511
  %517 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %513, i32 4
  %518 = load i8, ptr %517, align 1
  %519 = and i8 %518, 7
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %526, label %521

521:                                              ; preds = %516
  %522 = trunc i64 %513 to i16
  %523 = add nsw i32 %514, 1
  %524 = sext i32 %514 to i64
  %525 = getelementptr inbounds i16, ptr %196, i64 %524
  store i16 %522, ptr %525, align 2, !tbaa !45
  br label %526

526:                                              ; preds = %516, %521, %511
  %527 = phi i32 [ %512, %511 ], [ %523, %521 ], [ %514, %516 ]
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %536, label %529

529:                                              ; preds = %526
  %530 = add nsw i32 %527, -1
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i16, ptr %196, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !45
  %534 = sext i32 %527 to i64
  %535 = getelementptr inbounds i16, ptr %196, i64 %534
  store i16 %533, ptr %535, align 2, !tbaa !45
  br label %536

536:                                              ; preds = %529, %526
  %537 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %538 = icmp ne i32 %537, 0
  %539 = icmp sgt i32 %527, 0
  %540 = and i1 %538, %539
  br i1 %540, label %541, label %605

541:                                              ; preds = %536
  %542 = zext i32 %527 to i64
  %543 = and i64 %542, 1
  %544 = icmp eq i32 %527, 1
  br i1 %544, label %579, label %545

545:                                              ; preds = %541
  %546 = and i64 %542, 4294967294
  br label %547

547:                                              ; preds = %574, %545
  %548 = phi i64 [ 0, %545 ], [ %576, %574 ]
  %549 = phi i32 [ 0, %545 ], [ %575, %574 ]
  %550 = phi i64 [ 0, %545 ], [ %577, %574 ]
  %551 = getelementptr inbounds i16, ptr %196, i64 %548
  %552 = load i16, ptr %551, align 2, !tbaa !45
  %553 = zext i16 %552 to i64
  %554 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %553
  %555 = load i32, ptr %554, align 4
  %556 = icmp sgt i32 %555, -1
  br i1 %556, label %557, label %561

557:                                              ; preds = %547
  %558 = add nsw i32 %549, 1
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds i16, ptr %242, i64 %559
  store i16 %552, ptr %560, align 2, !tbaa !45
  br label %561

561:                                              ; preds = %547, %557
  %562 = phi i32 [ %549, %547 ], [ %558, %557 ]
  %563 = or i64 %548, 1
  %564 = getelementptr inbounds i16, ptr %196, i64 %563
  %565 = load i16, ptr %564, align 2, !tbaa !45
  %566 = zext i16 %565 to i64
  %567 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %566
  %568 = load i32, ptr %567, align 4
  %569 = icmp sgt i32 %568, -1
  br i1 %569, label %570, label %574

570:                                              ; preds = %561
  %571 = add nsw i32 %562, 1
  %572 = sext i32 %562 to i64
  %573 = getelementptr inbounds i16, ptr %242, i64 %572
  store i16 %565, ptr %573, align 2, !tbaa !45
  br label %574

574:                                              ; preds = %570, %561
  %575 = phi i32 [ %562, %561 ], [ %571, %570 ]
  %576 = add nuw nsw i64 %548, 2
  %577 = add i64 %550, 2
  %578 = icmp eq i64 %577, %546
  br i1 %578, label %579, label %547

579:                                              ; preds = %574, %541
  %580 = phi i32 [ undef, %541 ], [ %575, %574 ]
  %581 = phi i64 [ 0, %541 ], [ %576, %574 ]
  %582 = phi i32 [ 0, %541 ], [ %575, %574 ]
  %583 = icmp eq i64 %543, 0
  br i1 %583, label %595, label %584

584:                                              ; preds = %579
  %585 = getelementptr inbounds i16, ptr %196, i64 %581
  %586 = load i16, ptr %585, align 2, !tbaa !45
  %587 = zext i16 %586 to i64
  %588 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %587
  %589 = load i32, ptr %588, align 4
  %590 = icmp sgt i32 %589, -1
  br i1 %590, label %591, label %595

591:                                              ; preds = %584
  %592 = add nsw i32 %582, 1
  %593 = sext i32 %582 to i64
  %594 = getelementptr inbounds i16, ptr %242, i64 %593
  store i16 %586, ptr %594, align 2, !tbaa !45
  br label %595

595:                                              ; preds = %584, %591, %579
  %596 = phi i32 [ %580, %579 ], [ %582, %584 ], [ %592, %591 ]
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %605, label %598

598:                                              ; preds = %595
  %599 = add nsw i32 %596, -1
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i16, ptr %242, i64 %600
  %602 = load i16, ptr %601, align 2, !tbaa !45
  %603 = sext i32 %596 to i64
  %604 = getelementptr inbounds i16, ptr %242, i64 %603
  store i16 %602, ptr %604, align 2, !tbaa !45
  br label %605

605:                                              ; preds = %473, %536, %598, %595
  %606 = phi i32 [ %527, %598 ], [ %527, %595 ], [ %527, %536 ], [ 0, %473 ]
  %607 = phi i32 [ %596, %598 ], [ 0, %595 ], [ 0, %536 ], [ 0, %473 ]
  %608 = load i32, ptr %17, align 8, !tbaa !19
  %609 = add nsw i32 %608, 1
  store i32 %609, ptr %17, align 8, !tbaa !19
  %610 = trunc i32 %41 to i16
  %611 = load ptr, ptr %12, align 8, !tbaa !47
  %612 = sext i32 %608 to i64
  %613 = getelementptr inbounds i16, ptr %611, i64 %612
  store i16 %610, ptr %613, align 2, !tbaa !45
  br label %624

614:                                              ; preds = %470
  %615 = load ptr, ptr %12, align 8, !tbaa !47
  %616 = load i32, ptr %17, align 8, !tbaa !19
  %617 = add nsw i32 %616, 1
  store i32 %617, ptr %17, align 8, !tbaa !19
  %618 = sext i32 %616 to i64
  %619 = getelementptr inbounds i16, ptr %615, i64 %618
  %620 = load i16, ptr %619, align 2, !tbaa !45
  %621 = zext i16 %620 to i32
  %622 = icmp eq i32 %41, %621
  br i1 %622, label %624, label %623

623:                                              ; preds = %614
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %624

624:                                              ; preds = %614, %623, %605
  %625 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %606, %605 ]
  %626 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %607, %605 ]
  %627 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 17, i32 1
  %628 = load ptr, ptr %627, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %628, i32 noundef %41)
  %629 = load ptr, ptr %627, align 8, !tbaa !174
  %630 = load ptr, ptr %629, align 8, !tbaa !176
  %631 = sext i32 %41 to i64
  %632 = mul nsw i64 %631, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %630, i8 0, i64 %632, i1 false)
  %633 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 18, i32 1
  %634 = load ptr, ptr %633, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %634, i32 noundef %41)
  %635 = load ptr, ptr %633, align 8, !tbaa !174
  %636 = load ptr, ptr %635, align 8, !tbaa !176
  tail call void @llvm.memset.p0.i64(ptr align 1 %636, i8 0, i64 %632, i1 false)
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !49
  %639 = add nsw i32 %638, -1
  %640 = add nsw i32 %41, -1
  %641 = icmp sgt i32 %41, 1
  br i1 %641, label %642, label %2823

642:                                              ; preds = %624
  %643 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %644 = load i32, ptr %643, align 4, !tbaa !48
  %645 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %646 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %647 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %648 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %649 = ptrtoint ptr %426 to i64
  %650 = add nsw i32 %43, 10
  %651 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %652 = ptrtoint ptr %472 to i64
  %653 = ptrtoint ptr %334 to i64
  %654 = ptrtoint ptr %380 to i64
  %655 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %656 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %657 = fneg double %33
  %658 = getelementptr inbounds double, ptr %6, i64 26
  %659 = getelementptr inbounds double, ptr %6, i64 28
  %660 = getelementptr inbounds double, ptr %6, i64 29
  %661 = getelementptr inbounds double, ptr %6, i64 30
  %662 = getelementptr inbounds double, ptr %6, i64 31
  %663 = fsub double 1.000000e+00, %35
  %664 = fmul double %35, 2.000000e+00
  %665 = fmul double %35, 4.000000e+00
  %666 = fmul double %35, 6.000000e+00
  %667 = sext i32 %625 to i64
  %668 = sext i32 %626 to i64
  %669 = insertelement <2 x double> poison, double %27, i64 0
  %670 = shufflevector <2 x double> %669, <2 x double> poison, <2 x i32> zeroinitializer
  %671 = getelementptr inbounds i16, ptr %472, i64 1
  %672 = getelementptr inbounds i16, ptr %472, i64 1
  br label %673

673:                                              ; preds = %642, %2809
  %674 = phi i32 [ 0, %642 ], [ %2820, %2809 ]
  %675 = phi i32 [ 0, %642 ], [ %2821, %2809 ]
  %676 = phi ptr [ null, %642 ], [ %2818, %2809 ]
  %677 = phi ptr [ null, %642 ], [ %2817, %2809 ]
  %678 = phi ptr [ null, %642 ], [ %2816, %2809 ]
  %679 = phi i32 [ 0, %642 ], [ %2815, %2809 ]
  %680 = phi i32 [ 0, %642 ], [ %2814, %2809 ]
  %681 = phi i32 [ 0, %642 ], [ %2813, %2809 ]
  %682 = phi i32 [ 0, %642 ], [ %2812, %2809 ]
  %683 = phi i32 [ 0, %642 ], [ %2811, %2809 ]
  %684 = phi i32 [ %644, %642 ], [ %2810, %2809 ]
  %685 = sext i32 %675 to i64
  %686 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %685
  %687 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %685
  %688 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %685, i32 4
  %689 = load i8, ptr %688, align 1
  %690 = lshr i8 %689, 3
  %691 = and i8 %690, 15
  %692 = zext i8 %691 to i32
  %693 = icmp eq i8 %691, 0
  br i1 %693, label %700, label %694

694:                                              ; preds = %673
  %695 = icmp eq i32 %684, 0
  br i1 %695, label %700, label %696

696:                                              ; preds = %694
  %697 = add nsw i32 %684, -1
  %698 = add nsw i32 %675, -1
  %699 = add i32 %698, %692
  br label %2809

700:                                              ; preds = %694, %673
  %701 = phi i32 [ %684, %673 ], [ %639, %694 ]
  %702 = load <2 x double>, ptr %686, align 8, !tbaa !15
  %703 = fadd <2 x double> %19, %702
  %704 = getelementptr inbounds %class.Vector, ptr %686, i64 0, i32 2
  %705 = load double, ptr %704, align 8, !tbaa !50
  %706 = fadd double %21, %705
  %707 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %685, i32 3
  %708 = load i8, ptr %707, align 2, !tbaa !52
  %709 = zext i8 %708 to i32
  %710 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %711 = fsub double %705, %710
  %712 = fmul double %10, %711
  %713 = tail call double @llvm.floor.f64(double %712)
  %714 = fptosi double %713 to i32
  %715 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %716 = icmp slt i32 %714, 0
  %717 = select i1 %716, i32 %715, i32 0
  %718 = icmp sgt i32 %715, %714
  %719 = select i1 %718, i32 0, i32 %715
  %720 = sub i32 %714, %719
  %721 = add i32 %720, %717
  %722 = add nsw i32 %675, %692
  %723 = select i1 %693, i32 %679, i32 %722
  br i1 %149, label %2073, label %724

724:                                              ; preds = %700
  %725 = load i32, ptr %687, align 4
  %726 = shl i32 %725, 2
  %727 = ashr exact i32 %726, 2
  %728 = load ptr, ptr %645, align 8, !tbaa !53
  %729 = sext i32 %727 to i64
  %730 = getelementptr inbounds %class.ExclusionCheck, ptr %728, i64 %729
  %731 = load i32, ptr %730, align 8, !tbaa !55
  %732 = getelementptr inbounds %class.ExclusionCheck, ptr %728, i64 %729, i32 1
  %733 = load i32, ptr %732, align 4, !tbaa !57
  %734 = getelementptr inbounds %class.ExclusionCheck, ptr %728, i64 %729, i32 2
  %735 = load ptr, ptr %734, align 8, !tbaa !58
  %736 = icmp eq ptr %735, null
  br i1 %736, label %741, label %737

737:                                              ; preds = %724
  %738 = sext i32 %731 to i64
  %739 = sub nsw i64 0, %738
  %740 = getelementptr inbounds i8, ptr %735, i64 %739
  br label %967

741:                                              ; preds = %724
  %742 = icmp eq ptr %676, null
  br i1 %742, label %830, label %743

743:                                              ; preds = %741
  %744 = load i32, ptr %677, align 4, !tbaa !5
  %745 = icmp slt i32 %744, 1
  br i1 %745, label %793, label %746

746:                                              ; preds = %743
  %747 = add nuw i32 %744, 1
  %748 = zext i32 %747 to i64
  %749 = add nsw i64 %748, -1
  %750 = add nsw i64 %748, -2
  %751 = and i64 %749, 3
  %752 = icmp ult i64 %750, 3
  br i1 %752, label %780, label %753

753:                                              ; preds = %746
  %754 = and i64 %749, -4
  br label %755

755:                                              ; preds = %755, %753
  %756 = phi i64 [ 1, %753 ], [ %777, %755 ]
  %757 = phi i64 [ 0, %753 ], [ %778, %755 ]
  %758 = getelementptr inbounds i32, ptr %677, i64 %756
  %759 = load i32, ptr %758, align 4, !tbaa !5
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds i8, ptr %676, i64 %760
  store i8 0, ptr %761, align 1, !tbaa !59
  %762 = add nuw nsw i64 %756, 1
  %763 = getelementptr inbounds i32, ptr %677, i64 %762
  %764 = load i32, ptr %763, align 4, !tbaa !5
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, ptr %676, i64 %765
  store i8 0, ptr %766, align 1, !tbaa !59
  %767 = add nuw nsw i64 %756, 2
  %768 = getelementptr inbounds i32, ptr %677, i64 %767
  %769 = load i32, ptr %768, align 4, !tbaa !5
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, ptr %676, i64 %770
  store i8 0, ptr %771, align 1, !tbaa !59
  %772 = add nuw nsw i64 %756, 3
  %773 = getelementptr inbounds i32, ptr %677, i64 %772
  %774 = load i32, ptr %773, align 4, !tbaa !5
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, ptr %676, i64 %775
  store i8 0, ptr %776, align 1, !tbaa !59
  %777 = add nuw nsw i64 %756, 4
  %778 = add i64 %757, 4
  %779 = icmp eq i64 %778, %754
  br i1 %779, label %780, label %755

780:                                              ; preds = %755, %746
  %781 = phi i64 [ 1, %746 ], [ %777, %755 ]
  %782 = icmp eq i64 %751, 0
  br i1 %782, label %793, label %783

783:                                              ; preds = %780, %783
  %784 = phi i64 [ %790, %783 ], [ %781, %780 ]
  %785 = phi i64 [ %791, %783 ], [ 0, %780 ]
  %786 = getelementptr inbounds i32, ptr %677, i64 %784
  %787 = load i32, ptr %786, align 4, !tbaa !5
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds i8, ptr %676, i64 %788
  store i8 0, ptr %789, align 1, !tbaa !59
  %790 = add nuw nsw i64 %784, 1
  %791 = add i64 %785, 1
  %792 = icmp eq i64 %791, %751
  br i1 %792, label %793, label %783, !llvm.loop !209

793:                                              ; preds = %780, %783, %743
  %794 = load i32, ptr %678, align 4, !tbaa !5
  %795 = icmp slt i32 %794, 1
  br i1 %795, label %850, label %796

796:                                              ; preds = %793
  %797 = add nuw i32 %794, 1
  %798 = zext i32 %797 to i64
  %799 = add nsw i64 %798, -1
  %800 = add nsw i64 %798, -2
  %801 = and i64 %799, 3
  %802 = icmp ult i64 %800, 3
  br i1 %802, label %837, label %803

803:                                              ; preds = %796
  %804 = and i64 %799, -4
  br label %805

805:                                              ; preds = %805, %803
  %806 = phi i64 [ 1, %803 ], [ %827, %805 ]
  %807 = phi i64 [ 0, %803 ], [ %828, %805 ]
  %808 = getelementptr inbounds i32, ptr %678, i64 %806
  %809 = load i32, ptr %808, align 4, !tbaa !5
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds i8, ptr %676, i64 %810
  store i8 0, ptr %811, align 1, !tbaa !59
  %812 = add nuw nsw i64 %806, 1
  %813 = getelementptr inbounds i32, ptr %678, i64 %812
  %814 = load i32, ptr %813, align 4, !tbaa !5
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds i8, ptr %676, i64 %815
  store i8 0, ptr %816, align 1, !tbaa !59
  %817 = add nuw nsw i64 %806, 2
  %818 = getelementptr inbounds i32, ptr %678, i64 %817
  %819 = load i32, ptr %818, align 4, !tbaa !5
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i8, ptr %676, i64 %820
  store i8 0, ptr %821, align 1, !tbaa !59
  %822 = add nuw nsw i64 %806, 3
  %823 = getelementptr inbounds i32, ptr %678, i64 %822
  %824 = load i32, ptr %823, align 4, !tbaa !5
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i8, ptr %676, i64 %825
  store i8 0, ptr %826, align 1, !tbaa !59
  %827 = add nuw nsw i64 %806, 4
  %828 = add i64 %807, 4
  %829 = icmp eq i64 %828, %804
  br i1 %829, label %837, label %805

830:                                              ; preds = %741
  %831 = load i32, ptr %646, align 8, !tbaa !62
  %832 = tail call i32 @llvm.smax.i32(i32 %831, i32 -1)
  %833 = sext i32 %832 to i64
  %834 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %833) #9
  %835 = load i32, ptr %646, align 8, !tbaa !62
  %836 = sext i32 %835 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %834, i8 0, i64 %836, i1 false)
  br label %850

837:                                              ; preds = %805, %796
  %838 = phi i64 [ 1, %796 ], [ %827, %805 ]
  %839 = icmp eq i64 %801, 0
  br i1 %839, label %850, label %840

840:                                              ; preds = %837, %840
  %841 = phi i64 [ %847, %840 ], [ %838, %837 ]
  %842 = phi i64 [ %848, %840 ], [ 0, %837 ]
  %843 = getelementptr inbounds i32, ptr %678, i64 %841
  %844 = load i32, ptr %843, align 4, !tbaa !5
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds i8, ptr %676, i64 %845
  store i8 0, ptr %846, align 1, !tbaa !59
  %847 = add nuw nsw i64 %841, 1
  %848 = add i64 %842, 1
  %849 = icmp eq i64 %848, %801
  br i1 %849, label %850, label %840, !llvm.loop !210

850:                                              ; preds = %837, %840, %793, %830
  %851 = phi ptr [ %834, %830 ], [ %676, %793 ], [ %676, %840 ], [ %676, %837 ]
  %852 = load i32, ptr %687, align 4
  %853 = shl i32 %852, 2
  %854 = ashr exact i32 %853, 2
  %855 = load ptr, ptr %647, align 8, !tbaa !64
  %856 = sext i32 %854 to i64
  %857 = getelementptr inbounds ptr, ptr %855, i64 %856
  %858 = load ptr, ptr %857, align 8, !tbaa !24
  %859 = load i32, ptr %858, align 4, !tbaa !5
  %860 = icmp slt i32 %859, 1
  br i1 %860, label %913, label %861

861:                                              ; preds = %850
  %862 = add nuw i32 %859, 1
  %863 = zext i32 %862 to i64
  %864 = add nsw i64 %863, -1
  %865 = add nsw i64 %863, -2
  %866 = and i64 %864, 3
  %867 = icmp ult i64 %865, 3
  br i1 %867, label %895, label %868

868:                                              ; preds = %861
  %869 = and i64 %864, -4
  br label %870

870:                                              ; preds = %870, %868
  %871 = phi i64 [ 1, %868 ], [ %892, %870 ]
  %872 = phi i64 [ 0, %868 ], [ %893, %870 ]
  %873 = getelementptr inbounds i32, ptr %858, i64 %871
  %874 = load i32, ptr %873, align 4, !tbaa !5
  %875 = sext i32 %874 to i64
  %876 = getelementptr inbounds i8, ptr %851, i64 %875
  store i8 1, ptr %876, align 1, !tbaa !59
  %877 = add nuw nsw i64 %871, 1
  %878 = getelementptr inbounds i32, ptr %858, i64 %877
  %879 = load i32, ptr %878, align 4, !tbaa !5
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds i8, ptr %851, i64 %880
  store i8 1, ptr %881, align 1, !tbaa !59
  %882 = add nuw nsw i64 %871, 2
  %883 = getelementptr inbounds i32, ptr %858, i64 %882
  %884 = load i32, ptr %883, align 4, !tbaa !5
  %885 = sext i32 %884 to i64
  %886 = getelementptr inbounds i8, ptr %851, i64 %885
  store i8 1, ptr %886, align 1, !tbaa !59
  %887 = add nuw nsw i64 %871, 3
  %888 = getelementptr inbounds i32, ptr %858, i64 %887
  %889 = load i32, ptr %888, align 4, !tbaa !5
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i8, ptr %851, i64 %890
  store i8 1, ptr %891, align 1, !tbaa !59
  %892 = add nuw nsw i64 %871, 4
  %893 = add i64 %872, 4
  %894 = icmp eq i64 %893, %869
  br i1 %894, label %895, label %870

895:                                              ; preds = %870, %861
  %896 = phi i64 [ 1, %861 ], [ %892, %870 ]
  %897 = icmp eq i64 %866, 0
  br i1 %897, label %908, label %898

898:                                              ; preds = %895, %898
  %899 = phi i64 [ %905, %898 ], [ %896, %895 ]
  %900 = phi i64 [ %906, %898 ], [ 0, %895 ]
  %901 = getelementptr inbounds i32, ptr %858, i64 %899
  %902 = load i32, ptr %901, align 4, !tbaa !5
  %903 = sext i32 %902 to i64
  %904 = getelementptr inbounds i8, ptr %851, i64 %903
  store i8 1, ptr %904, align 1, !tbaa !59
  %905 = add nuw nsw i64 %899, 1
  %906 = add i64 %900, 1
  %907 = icmp eq i64 %906, %866
  br i1 %907, label %908, label %898, !llvm.loop !211

908:                                              ; preds = %898, %895
  %909 = load i32, ptr %687, align 4
  %910 = shl i32 %909, 2
  %911 = ashr exact i32 %910, 2
  %912 = sext i32 %911 to i64
  br label %913

913:                                              ; preds = %908, %850
  %914 = phi i64 [ %912, %908 ], [ %856, %850 ]
  %915 = load ptr, ptr %648, align 8, !tbaa !66
  %916 = getelementptr inbounds ptr, ptr %915, i64 %914
  %917 = load ptr, ptr %916, align 8, !tbaa !24
  %918 = load i32, ptr %917, align 4, !tbaa !5
  %919 = icmp slt i32 %918, 1
  br i1 %919, label %967, label %920

920:                                              ; preds = %913
  %921 = add nuw i32 %918, 1
  %922 = zext i32 %921 to i64
  %923 = add nsw i64 %922, -1
  %924 = add nsw i64 %922, -2
  %925 = and i64 %923, 3
  %926 = icmp ult i64 %924, 3
  br i1 %926, label %954, label %927

927:                                              ; preds = %920
  %928 = and i64 %923, -4
  br label %929

929:                                              ; preds = %929, %927
  %930 = phi i64 [ 1, %927 ], [ %951, %929 ]
  %931 = phi i64 [ 0, %927 ], [ %952, %929 ]
  %932 = getelementptr inbounds i32, ptr %917, i64 %930
  %933 = load i32, ptr %932, align 4, !tbaa !5
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds i8, ptr %851, i64 %934
  store i8 2, ptr %935, align 1, !tbaa !59
  %936 = add nuw nsw i64 %930, 1
  %937 = getelementptr inbounds i32, ptr %917, i64 %936
  %938 = load i32, ptr %937, align 4, !tbaa !5
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i8, ptr %851, i64 %939
  store i8 2, ptr %940, align 1, !tbaa !59
  %941 = add nuw nsw i64 %930, 2
  %942 = getelementptr inbounds i32, ptr %917, i64 %941
  %943 = load i32, ptr %942, align 4, !tbaa !5
  %944 = sext i32 %943 to i64
  %945 = getelementptr inbounds i8, ptr %851, i64 %944
  store i8 2, ptr %945, align 1, !tbaa !59
  %946 = add nuw nsw i64 %930, 3
  %947 = getelementptr inbounds i32, ptr %917, i64 %946
  %948 = load i32, ptr %947, align 4, !tbaa !5
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds i8, ptr %851, i64 %949
  store i8 2, ptr %950, align 1, !tbaa !59
  %951 = add nuw nsw i64 %930, 4
  %952 = add i64 %931, 4
  %953 = icmp eq i64 %952, %928
  br i1 %953, label %954, label %929

954:                                              ; preds = %929, %920
  %955 = phi i64 [ 1, %920 ], [ %951, %929 ]
  %956 = icmp eq i64 %925, 0
  br i1 %956, label %967, label %957

957:                                              ; preds = %954, %957
  %958 = phi i64 [ %964, %957 ], [ %955, %954 ]
  %959 = phi i64 [ %965, %957 ], [ 0, %954 ]
  %960 = getelementptr inbounds i32, ptr %917, i64 %958
  %961 = load i32, ptr %960, align 4, !tbaa !5
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds i8, ptr %851, i64 %962
  store i8 2, ptr %963, align 1, !tbaa !59
  %964 = add nuw nsw i64 %958, 1
  %965 = add i64 %959, 1
  %966 = icmp eq i64 %965, %925
  br i1 %966, label %967, label %957, !llvm.loop !212

967:                                              ; preds = %954, %957, %913, %737
  %968 = phi ptr [ %740, %737 ], [ %851, %913 ], [ %851, %957 ], [ %851, %954 ]
  %969 = phi ptr [ %678, %737 ], [ %917, %913 ], [ %917, %957 ], [ %917, %954 ]
  %970 = phi ptr [ %677, %737 ], [ %858, %913 ], [ %858, %957 ], [ %858, %954 ]
  %971 = phi ptr [ %676, %737 ], [ %851, %913 ], [ %851, %957 ], [ %851, %954 ]
  %972 = load i8, ptr %688, align 1
  %973 = and i8 %972, 7
  %974 = icmp eq i8 %973, 0
  br i1 %974, label %1268, label %975

975:                                              ; preds = %967
  %976 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %977 = icmp eq i32 %976, 0
  br i1 %977, label %981, label %978

978:                                              ; preds = %975
  %979 = load i32, ptr %687, align 4
  %980 = icmp slt i32 %979, 0
  br label %981

981:                                              ; preds = %978, %975
  %982 = phi i1 [ false, %975 ], [ %980, %978 ]
  %983 = and i8 %972, 120
  %984 = icmp eq i8 %983, 0
  br i1 %984, label %1016, label %985

985:                                              ; preds = %981
  %986 = icmp slt i32 %680, %625
  br i1 %986, label %987, label %1000

987:                                              ; preds = %985
  %988 = sext i32 %680 to i64
  br label %989

989:                                              ; preds = %987, %995
  %990 = phi i64 [ %988, %987 ], [ %996, %995 ]
  %991 = getelementptr inbounds i16, ptr %196, i64 %990
  %992 = load i16, ptr %991, align 2, !tbaa !45
  %993 = zext i16 %992 to i32
  %994 = icmp sgt i32 %723, %993
  br i1 %994, label %995, label %998

995:                                              ; preds = %989
  %996 = add nsw i64 %990, 1
  %997 = icmp eq i64 %996, %667
  br i1 %997, label %1000, label %989

998:                                              ; preds = %989
  %999 = trunc i64 %990 to i32
  br label %1000

1000:                                             ; preds = %995, %998, %985
  %1001 = phi i32 [ %680, %985 ], [ %999, %998 ], [ %625, %995 ]
  %1002 = icmp slt i32 %681, %626
  br i1 %1002, label %1003, label %1016

1003:                                             ; preds = %1000
  %1004 = sext i32 %681 to i64
  br label %1005

1005:                                             ; preds = %1003, %1011
  %1006 = phi i64 [ %1004, %1003 ], [ %1012, %1011 ]
  %1007 = getelementptr inbounds i16, ptr %242, i64 %1006
  %1008 = load i16, ptr %1007, align 2, !tbaa !45
  %1009 = zext i16 %1008 to i32
  %1010 = icmp sgt i32 %723, %1009
  br i1 %1010, label %1011, label %1014

1011:                                             ; preds = %1005
  %1012 = add nsw i64 %1006, 1
  %1013 = icmp eq i64 %1012, %668
  br i1 %1013, label %1016, label %1005

1014:                                             ; preds = %1005
  %1015 = trunc i64 %1006 to i32
  br label %1016

1016:                                             ; preds = %1011, %1014, %1000, %981
  %1017 = phi i32 [ %681, %981 ], [ %681, %1000 ], [ %1015, %1014 ], [ %626, %1011 ]
  %1018 = phi i32 [ %680, %981 ], [ %1001, %1000 ], [ %1001, %1014 ], [ %1001, %1011 ]
  %1019 = add nsw i32 %675, 1
  %1020 = icmp slt i32 %1019, %723
  br i1 %1020, label %1021, label %1086

1021:                                             ; preds = %1016
  %1022 = xor i32 %675, -1
  %1023 = add i32 %723, %1022
  %1024 = zext i32 %1023 to i64
  %1025 = icmp ult i32 %1023, 8
  br i1 %1025, label %1075, label %1026

1026:                                             ; preds = %1021
  %1027 = icmp ult i32 %1023, 64
  br i1 %1027, label %1056, label %1028

1028:                                             ; preds = %1026
  %1029 = and i64 %1024, 4294967232
  %1030 = trunc i32 %1019 to i16
  %1031 = insertelement <16 x i16> poison, i16 %1030, i64 0
  %1032 = shufflevector <16 x i16> %1031, <16 x i16> poison, <16 x i32> zeroinitializer
  %1033 = add <16 x i16> %1032, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1034 = trunc i64 %1029 to i32
  %1035 = add i32 %1019, %1034
  br label %1036

1036:                                             ; preds = %1036, %1028
  %1037 = phi i64 [ 0, %1028 ], [ %1046, %1036 ]
  %1038 = phi <16 x i16> [ %1033, %1028 ], [ %1047, %1036 ]
  %1039 = add <16 x i16> %1038, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1040 = add <16 x i16> %1038, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1041 = add <16 x i16> %1038, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1042 = getelementptr inbounds i16, ptr %426, i64 %1037
  store <16 x i16> %1038, ptr %1042, align 2, !tbaa !45
  %1043 = getelementptr inbounds i16, ptr %1042, i64 16
  store <16 x i16> %1039, ptr %1043, align 2, !tbaa !45
  %1044 = getelementptr inbounds i16, ptr %1042, i64 32
  store <16 x i16> %1040, ptr %1044, align 2, !tbaa !45
  %1045 = getelementptr inbounds i16, ptr %1042, i64 48
  store <16 x i16> %1041, ptr %1045, align 2, !tbaa !45
  %1046 = add nuw i64 %1037, 64
  %1047 = add <16 x i16> %1038, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1048 = icmp eq i64 %1046, %1029
  br i1 %1048, label %1049, label %1036, !llvm.loop !213

1049:                                             ; preds = %1036
  %1050 = icmp eq i64 %1029, %1024
  br i1 %1050, label %1086, label %1051

1051:                                             ; preds = %1049
  %1052 = trunc i64 %1029 to i32
  %1053 = add i32 %1019, %1052
  %1054 = and i64 %1024, 56
  %1055 = icmp eq i64 %1054, 0
  br i1 %1055, label %1075, label %1056

1056:                                             ; preds = %1026, %1051
  %1057 = phi i32 [ %1035, %1051 ], [ %1019, %1026 ]
  %1058 = phi i64 [ %1029, %1051 ], [ 0, %1026 ]
  %1059 = and i64 %1024, 4294967288
  %1060 = trunc i64 %1059 to i32
  %1061 = add i32 %1019, %1060
  %1062 = trunc i32 %1057 to i16
  %1063 = insertelement <8 x i16> poison, i16 %1062, i64 0
  %1064 = shufflevector <8 x i16> %1063, <8 x i16> poison, <8 x i32> zeroinitializer
  %1065 = add <8 x i16> %1064, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1066

1066:                                             ; preds = %1066, %1056
  %1067 = phi i64 [ %1058, %1056 ], [ %1070, %1066 ]
  %1068 = phi <8 x i16> [ %1065, %1056 ], [ %1071, %1066 ]
  %1069 = getelementptr inbounds i16, ptr %426, i64 %1067
  store <8 x i16> %1068, ptr %1069, align 2, !tbaa !45
  %1070 = add nuw i64 %1067, 8
  %1071 = add <8 x i16> %1068, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1072 = icmp eq i64 %1070, %1059
  br i1 %1072, label %1073, label %1066, !llvm.loop !214

1073:                                             ; preds = %1066
  %1074 = icmp eq i64 %1059, %1024
  br i1 %1074, label %1086, label %1075

1075:                                             ; preds = %1021, %1051, %1073
  %1076 = phi i64 [ 0, %1021 ], [ %1029, %1051 ], [ %1059, %1073 ]
  %1077 = phi i32 [ %1019, %1021 ], [ %1053, %1051 ], [ %1061, %1073 ]
  br label %1078

1078:                                             ; preds = %1075, %1078
  %1079 = phi i64 [ %1082, %1078 ], [ %1076, %1075 ]
  %1080 = phi i32 [ %1084, %1078 ], [ %1077, %1075 ]
  %1081 = trunc i32 %1080 to i16
  %1082 = add nuw nsw i64 %1079, 1
  %1083 = getelementptr inbounds i16, ptr %426, i64 %1079
  store i16 %1081, ptr %1083, align 2, !tbaa !45
  %1084 = add nsw i32 %1080, 1
  %1085 = icmp eq i64 %1082, %1024
  br i1 %1085, label %1086, label %1078, !llvm.loop !215

1086:                                             ; preds = %1078, %1049, %1073, %1016
  %1087 = phi i32 [ 0, %1016 ], [ %1023, %1073 ], [ %1023, %1049 ], [ %1023, %1078 ]
  %1088 = zext i32 %1087 to i64
  %1089 = getelementptr inbounds i16, ptr %426, i64 %1088
  %1090 = select i1 %982, ptr %242, ptr %196
  %1091 = select i1 %982, i32 %1017, i32 %1018
  %1092 = select i1 %982, i32 %626, i32 %625
  %1093 = icmp slt i32 %1091, %1092
  br i1 %1093, label %1094, label %1253

1094:                                             ; preds = %1086
  %1095 = sub nsw i32 %1092, %1091
  %1096 = icmp sgt i32 %1095, 6
  br i1 %1096, label %1097, label %1190

1097:                                             ; preds = %1094
  %1098 = add nsw i32 %1092, -2
  %1099 = add nsw i32 %1091, 2
  %1100 = icmp slt i32 %1099, %1098
  br i1 %1100, label %1101, label %1190

1101:                                             ; preds = %1097
  %1102 = add nsw i32 %1091, 1
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds i16, ptr %1090, i64 %1103
  %1105 = load i16, ptr %1104, align 2, !tbaa !45
  %1106 = zext i16 %1105 to i64
  %1107 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1106
  %1108 = getelementptr inbounds %class.Vector, ptr %1107, i64 0, i32 2
  %1109 = load double, ptr %1108, align 8, !tbaa !50
  %1110 = sext i32 %1091 to i64
  %1111 = getelementptr inbounds i16, ptr %1090, i64 %1110
  %1112 = load i16, ptr %1111, align 2, !tbaa !45
  %1113 = zext i16 %1112 to i64
  %1114 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1113
  %1115 = getelementptr inbounds %class.Vector, ptr %1114, i64 0, i32 2
  %1116 = load double, ptr %1115, align 8, !tbaa !50
  %1117 = getelementptr inbounds %class.Vector, ptr %1107, i64 0, i32 1
  %1118 = load double, ptr %1117, align 8, !tbaa !68
  %1119 = getelementptr inbounds %class.Vector, ptr %1114, i64 0, i32 1
  %1120 = load double, ptr %1119, align 8, !tbaa !68
  %1121 = load double, ptr %1107, align 8, !tbaa !69
  %1122 = load double, ptr %1114, align 8, !tbaa !69
  %1123 = sext i32 %1099 to i64
  %1124 = sext i32 %1098 to i64
  %1125 = insertelement <2 x double> poison, double %1109, i64 0
  %1126 = insertelement <2 x double> %1125, double %1116, i64 1
  %1127 = insertelement <2 x double> poison, double %1118, i64 0
  %1128 = insertelement <2 x double> %1127, double %1120, i64 1
  %1129 = insertelement <2 x double> poison, double %1121, i64 0
  %1130 = insertelement <2 x double> %1129, double %1122, i64 1
  %1131 = insertelement <2 x double> poison, double %706, i64 0
  %1132 = shufflevector <2 x double> %1131, <2 x double> poison, <2 x i32> zeroinitializer
  %1133 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1134 = shufflevector <2 x double> %703, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1135

1135:                                             ; preds = %1101, %1135
  %1136 = phi i64 [ %1123, %1101 ], [ %1181, %1135 ]
  %1137 = phi i32 [ %1091, %1101 ], [ %1183, %1135 ]
  %1138 = phi i32 [ 0, %1101 ], [ %1180, %1135 ]
  %1139 = phi i16 [ %1112, %1101 ], [ %1146, %1135 ]
  %1140 = phi i16 [ %1105, %1101 ], [ %1150, %1135 ]
  %1141 = phi <2 x double> [ %1126, %1101 ], [ %1185, %1135 ]
  %1142 = phi <2 x double> [ %1128, %1101 ], [ %1187, %1135 ]
  %1143 = phi <2 x double> [ %1130, %1101 ], [ %1189, %1135 ]
  %1144 = fsub <2 x double> %1132, %1141
  %1145 = getelementptr inbounds i16, ptr %1090, i64 %1136
  %1146 = load i16, ptr %1145, align 2, !tbaa !45
  %1147 = add nsw i32 %1137, 3
  %1148 = sext i32 %1147 to i64
  %1149 = getelementptr inbounds i16, ptr %1090, i64 %1148
  %1150 = load i16, ptr %1149, align 2, !tbaa !45
  %1151 = zext i16 %1146 to i64
  %1152 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1151
  %1153 = load double, ptr %1152, align 8, !tbaa !69
  %1154 = zext i16 %1150 to i64
  %1155 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1154
  %1156 = load double, ptr %1155, align 8, !tbaa !69
  %1157 = getelementptr inbounds %class.Vector, ptr %1152, i64 0, i32 1
  %1158 = load double, ptr %1157, align 8, !tbaa !68
  %1159 = getelementptr inbounds %class.Vector, ptr %1155, i64 0, i32 1
  %1160 = load double, ptr %1159, align 8, !tbaa !68
  %1161 = getelementptr inbounds %class.Vector, ptr %1152, i64 0, i32 2
  %1162 = load double, ptr %1161, align 8, !tbaa !50
  %1163 = getelementptr inbounds %class.Vector, ptr %1155, i64 0, i32 2
  %1164 = load double, ptr %1163, align 8, !tbaa !50
  %1165 = fsub <2 x double> %1134, %1143
  %1166 = fmul <2 x double> %1165, %1165
  %1167 = fsub <2 x double> %1133, %1142
  %1168 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1167, <2 x double> %1167, <2 x double> %1166)
  %1169 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1144, <2 x double> %1144, <2 x double> %1168)
  %1170 = fcmp olt <2 x double> %1169, %670
  %1171 = zext i32 %1138 to i64
  %1172 = getelementptr inbounds i16, ptr %288, i64 %1171
  store i16 %1139, ptr %1172, align 2, !tbaa !45
  %1173 = extractelement <2 x i1> %1170, i64 1
  %1174 = zext i1 %1173 to i32
  %1175 = add nuw nsw i32 %1138, %1174
  %1176 = zext i32 %1175 to i64
  %1177 = getelementptr inbounds i16, ptr %288, i64 %1176
  store i16 %1140, ptr %1177, align 2, !tbaa !45
  %1178 = extractelement <2 x i1> %1170, i64 0
  %1179 = zext i1 %1178 to i32
  %1180 = add i32 %1175, %1179
  %1181 = add nsw i64 %1136, 2
  %1182 = icmp slt i64 %1181, %1124
  %1183 = trunc i64 %1136 to i32
  %1184 = insertelement <2 x double> poison, double %1164, i64 0
  %1185 = insertelement <2 x double> %1184, double %1162, i64 1
  %1186 = insertelement <2 x double> poison, double %1160, i64 0
  %1187 = insertelement <2 x double> %1186, double %1158, i64 1
  %1188 = insertelement <2 x double> poison, double %1156, i64 0
  %1189 = insertelement <2 x double> %1188, double %1153, i64 1
  br i1 %1182, label %1135, label %1190

1190:                                             ; preds = %1135, %1097, %1094
  %1191 = phi i32 [ 0, %1094 ], [ 0, %1097 ], [ %1180, %1135 ]
  %1192 = phi i32 [ %1091, %1094 ], [ %1091, %1097 ], [ %1183, %1135 ]
  %1193 = icmp slt i32 %1192, %1092
  br i1 %1193, label %1194, label %1199

1194:                                             ; preds = %1190
  %1195 = sext i32 %1192 to i64
  %1196 = sext i32 %1092 to i64
  %1197 = extractelement <2 x double> %703, i64 0
  %1198 = extractelement <2 x double> %703, i64 1
  br label %1204

1199:                                             ; preds = %1227, %1190
  %1200 = phi i32 [ %1191, %1190 ], [ %1228, %1227 ]
  %1201 = icmp sgt i32 %1200, 0
  br i1 %1201, label %1202, label %1253

1202:                                             ; preds = %1199
  %1203 = zext i32 %1200 to i64
  br label %1231

1204:                                             ; preds = %1194, %1227
  %1205 = phi i64 [ %1195, %1194 ], [ %1229, %1227 ]
  %1206 = phi i32 [ %1191, %1194 ], [ %1228, %1227 ]
  %1207 = getelementptr inbounds i16, ptr %1090, i64 %1205
  %1208 = load i16, ptr %1207, align 2, !tbaa !45
  %1209 = zext i16 %1208 to i64
  %1210 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1209
  %1211 = load double, ptr %1210, align 8, !tbaa !69
  %1212 = getelementptr inbounds %class.Vector, ptr %1210, i64 0, i32 1
  %1213 = load double, ptr %1212, align 8, !tbaa !68
  %1214 = getelementptr inbounds %class.Vector, ptr %1210, i64 0, i32 2
  %1215 = load double, ptr %1214, align 8, !tbaa !50
  %1216 = fsub double %1197, %1211
  %1217 = fmul double %1216, %1216
  %1218 = fsub double %1198, %1213
  %1219 = tail call double @llvm.fmuladd.f64(double %1218, double %1218, double %1217)
  %1220 = fsub double %706, %1215
  %1221 = tail call double @llvm.fmuladd.f64(double %1220, double %1220, double %1219)
  %1222 = fcmp ugt double %1221, %27
  br i1 %1222, label %1227, label %1223

1223:                                             ; preds = %1204
  %1224 = add nsw i32 %1206, 1
  %1225 = sext i32 %1206 to i64
  %1226 = getelementptr inbounds i16, ptr %288, i64 %1225
  store i16 %1208, ptr %1226, align 2, !tbaa !45
  br label %1227

1227:                                             ; preds = %1223, %1204
  %1228 = phi i32 [ %1224, %1223 ], [ %1206, %1204 ]
  %1229 = add nsw i64 %1205, 1
  %1230 = icmp eq i64 %1229, %1196
  br i1 %1230, label %1199, label %1204

1231:                                             ; preds = %1202, %1248
  %1232 = phi i64 [ 0, %1202 ], [ %1251, %1248 ]
  %1233 = phi ptr [ %1089, %1202 ], [ %1250, %1248 ]
  %1234 = getelementptr inbounds i16, ptr %288, i64 %1232
  %1235 = load i16, ptr %1234, align 2, !tbaa !45
  %1236 = zext i16 %1235 to i64
  %1237 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1236, i32 4
  %1238 = load i8, ptr %1237, align 1
  %1239 = and i8 %1238, 7
  store i16 %1235, ptr %1233, align 2, !tbaa !45
  %1240 = getelementptr inbounds i16, ptr %1233, i64 1
  %1241 = insertelement <2 x i16> poison, i16 %1235, i64 0
  %1242 = shufflevector <2 x i16> %1241, <2 x i16> poison, <2 x i32> zeroinitializer
  %1243 = add <2 x i16> %1242, <i16 1, i16 2>
  store <2 x i16> %1243, ptr %1240, align 2, !tbaa !45
  %1244 = icmp ult i8 %1239, 4
  br i1 %1244, label %1248, label %1245

1245:                                             ; preds = %1231
  %1246 = add <2 x i16> %1242, <i16 3, i16 4>
  %1247 = getelementptr inbounds i16, ptr %1233, i64 3
  store <2 x i16> %1246, ptr %1247, align 2, !tbaa !45
  br label %1248

1248:                                             ; preds = %1245, %1231
  %1249 = zext i8 %1239 to i64
  %1250 = getelementptr inbounds i16, ptr %1233, i64 %1249
  %1251 = add nuw nsw i64 %1232, 1
  %1252 = icmp eq i64 %1251, %1203
  br i1 %1252, label %1253, label %1231

1253:                                             ; preds = %1248, %1199, %1086
  %1254 = phi ptr [ %1089, %1086 ], [ %1089, %1199 ], [ %1250, %1248 ]
  %1255 = ptrtoint ptr %1254 to i64
  %1256 = sub i64 %1255, %649
  %1257 = lshr exact i64 %1256, 1
  %1258 = trunc i64 %1257 to i32
  %1259 = icmp eq i32 %1258, 0
  br i1 %1259, label %1271, label %1260

1260:                                             ; preds = %1253
  %1261 = shl i64 %1256, 31
  %1262 = add i64 %1261, -4294967296
  %1263 = ashr i64 %1262, 32
  %1264 = getelementptr inbounds i16, ptr %426, i64 %1263
  %1265 = load i16, ptr %1264, align 2, !tbaa !45
  %1266 = ashr i64 %1261, 32
  %1267 = getelementptr inbounds i16, ptr %426, i64 %1266
  store i16 %1265, ptr %1267, align 2, !tbaa !45
  br label %1271

1268:                                             ; preds = %967
  %1269 = add nsw i32 %683, 1
  %1270 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1271

1271:                                             ; preds = %1253, %1260, %1268
  %1272 = phi i32 [ %1270, %1268 ], [ %976, %1260 ], [ %976, %1253 ]
  %1273 = phi i32 [ %1269, %1268 ], [ 0, %1260 ], [ 0, %1253 ]
  %1274 = phi i32 [ %682, %1268 ], [ %1258, %1260 ], [ 0, %1253 ]
  %1275 = phi i32 [ %681, %1268 ], [ %1017, %1260 ], [ %1017, %1253 ]
  %1276 = phi i32 [ %680, %1268 ], [ %1018, %1260 ], [ %1018, %1253 ]
  %1277 = icmp eq i32 %1272, 0
  br i1 %1277, label %1282, label %1278

1278:                                             ; preds = %1271
  %1279 = load i32, ptr %687, align 4
  %1280 = and i32 %1279, 1073741824
  %1281 = icmp ne i32 %1280, 0
  br label %1282

1282:                                             ; preds = %1278, %1271
  %1283 = phi i1 [ false, %1271 ], [ %1281, %1278 ]
  %1284 = load i32, ptr %17, align 8, !tbaa !19
  %1285 = add nsw i32 %650, %1284
  %1286 = load i32, ptr %651, align 4, !tbaa !70
  %1287 = icmp sgt i32 %1286, %1285
  br i1 %1287, label %1303, label %1288

1288:                                             ; preds = %1282, %1288
  %1289 = phi i32 [ %1291, %1288 ], [ %1286, %1282 ]
  %1290 = ashr i32 %1289, 1
  %1291 = add nsw i32 %1290, %1289
  %1292 = icmp sgt i32 %1291, %1285
  br i1 %1292, label %1293, label %1288

1293:                                             ; preds = %1288
  %1294 = sext i32 %1291 to i64
  %1295 = icmp slt i32 %1291, 0
  %1296 = shl nsw i64 %1294, 1
  %1297 = select i1 %1295, i64 -1, i64 %1296
  %1298 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1297) #9
  %1299 = load ptr, ptr %12, align 8, !tbaa !47
  %1300 = sext i32 %1284 to i64
  %1301 = shl nsw i64 %1300, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1298, ptr align 2 %1299, i64 %1301, i1 false)
  %1302 = icmp eq ptr %1299, null
  br i1 %1302, label %1307, label %1305

1303:                                             ; preds = %1282
  %1304 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1309

1305:                                             ; preds = %1293
  tail call void @_ZdaPv(ptr noundef nonnull %1299) #10
  %1306 = load i32, ptr %17, align 8, !tbaa !19
  br label %1307

1307:                                             ; preds = %1305, %1293
  %1308 = phi i32 [ %1306, %1305 ], [ %1284, %1293 ]
  store ptr %1298, ptr %12, align 8, !tbaa !47
  store i32 %1291, ptr %651, align 4, !tbaa !70
  br label %1309

1309:                                             ; preds = %1303, %1307
  %1310 = phi i32 [ %1284, %1303 ], [ %1308, %1307 ]
  %1311 = phi ptr [ %1304, %1303 ], [ %1298, %1307 ]
  %1312 = ptrtoint ptr %1311 to i64
  %1313 = add nsw i32 %1310, 1
  %1314 = sext i32 %1313 to i64
  %1315 = getelementptr inbounds i16, ptr %1311, i64 %1314
  %1316 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1317 = icmp eq i32 %1316, 0
  br i1 %1317, label %1498, label %1318

1318:                                             ; preds = %1309
  %1319 = load i8, ptr %707, align 2, !tbaa !52
  %1320 = zext i8 %1319 to i32
  %1321 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1322 = icmp eq i32 %1321, 0
  br i1 %1322, label %1377, label %1323

1323:                                             ; preds = %1318
  %1324 = icmp eq i8 %1319, 1
  br i1 %1324, label %1325, label %2809

1325:                                             ; preds = %1323
  %1326 = icmp slt i32 %1273, %1274
  br i1 %1326, label %1327, label %1438

1327:                                             ; preds = %1325
  %1328 = sext i32 %1273 to i64
  %1329 = sext i32 %1274 to i64
  %1330 = sub nsw i64 %1329, %1328
  %1331 = xor i64 %1328, -1
  %1332 = and i64 %1330, 1
  %1333 = icmp eq i64 %1332, 0
  br i1 %1333, label %1345, label %1334

1334:                                             ; preds = %1327
  %1335 = getelementptr inbounds i16, ptr %426, i64 %1328
  %1336 = load i16, ptr %1335, align 2, !tbaa !45
  %1337 = zext i16 %1336 to i64
  %1338 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1337, i32 3
  %1339 = load i8, ptr %1338, align 2, !tbaa !52
  %1340 = icmp eq i8 %1339, 1
  br i1 %1340, label %1341, label %1342

1341:                                             ; preds = %1334
  store i16 %1336, ptr %472, align 2, !tbaa !45
  br label %1342

1342:                                             ; preds = %1341, %1334
  %1343 = phi ptr [ %671, %1341 ], [ %472, %1334 ]
  %1344 = add nsw i64 %1328, 1
  br label %1345

1345:                                             ; preds = %1342, %1327
  %1346 = phi ptr [ undef, %1327 ], [ %1343, %1342 ]
  %1347 = phi i64 [ %1328, %1327 ], [ %1344, %1342 ]
  %1348 = phi ptr [ %472, %1327 ], [ %1343, %1342 ]
  %1349 = sub nsw i64 0, %1329
  %1350 = icmp eq i64 %1331, %1349
  br i1 %1350, label %1438, label %1351

1351:                                             ; preds = %1345, %1373
  %1352 = phi i64 [ %1375, %1373 ], [ %1347, %1345 ]
  %1353 = phi ptr [ %1374, %1373 ], [ %1348, %1345 ]
  %1354 = getelementptr inbounds i16, ptr %426, i64 %1352
  %1355 = load i16, ptr %1354, align 2, !tbaa !45
  %1356 = zext i16 %1355 to i64
  %1357 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1356, i32 3
  %1358 = load i8, ptr %1357, align 2, !tbaa !52
  %1359 = icmp eq i8 %1358, 1
  br i1 %1359, label %1360, label %1362

1360:                                             ; preds = %1351
  %1361 = getelementptr inbounds i16, ptr %1353, i64 1
  store i16 %1355, ptr %1353, align 2, !tbaa !45
  br label %1362

1362:                                             ; preds = %1360, %1351
  %1363 = phi ptr [ %1361, %1360 ], [ %1353, %1351 ]
  %1364 = add nsw i64 %1352, 1
  %1365 = getelementptr inbounds i16, ptr %426, i64 %1364
  %1366 = load i16, ptr %1365, align 2, !tbaa !45
  %1367 = zext i16 %1366 to i64
  %1368 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1367, i32 3
  %1369 = load i8, ptr %1368, align 2, !tbaa !52
  %1370 = icmp eq i8 %1369, 1
  br i1 %1370, label %1371, label %1373

1371:                                             ; preds = %1362
  %1372 = getelementptr inbounds i16, ptr %1363, i64 1
  store i16 %1366, ptr %1363, align 2, !tbaa !45
  br label %1373

1373:                                             ; preds = %1371, %1362
  %1374 = phi ptr [ %1372, %1371 ], [ %1363, %1362 ]
  %1375 = add nsw i64 %1352, 2
  %1376 = icmp eq i64 %1375, %1329
  br i1 %1376, label %1438, label %1351

1377:                                             ; preds = %1318
  %1378 = add i8 %1319, -3
  %1379 = icmp ult i8 %1378, -2
  br i1 %1379, label %2809, label %1380

1380:                                             ; preds = %1377
  %1381 = icmp slt i32 %1273, %1274
  br i1 %1381, label %1382, label %1438

1382:                                             ; preds = %1380
  %1383 = sext i32 %1273 to i64
  %1384 = sext i32 %1274 to i64
  %1385 = sub nsw i64 %1384, %1383
  %1386 = xor i64 %1383, -1
  %1387 = and i64 %1385, 1
  %1388 = icmp eq i64 %1387, 0
  br i1 %1388, label %1402, label %1389

1389:                                             ; preds = %1382
  %1390 = getelementptr inbounds i16, ptr %426, i64 %1383
  %1391 = load i16, ptr %1390, align 2, !tbaa !45
  %1392 = zext i16 %1391 to i64
  %1393 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1392, i32 3
  %1394 = load i8, ptr %1393, align 2, !tbaa !52
  %1395 = zext i8 %1394 to i32
  %1396 = add nuw nsw i32 %1395, %1320
  %1397 = icmp eq i32 %1396, 3
  br i1 %1397, label %1398, label %1399

1398:                                             ; preds = %1389
  store i16 %1391, ptr %472, align 2, !tbaa !45
  br label %1399

1399:                                             ; preds = %1398, %1389
  %1400 = phi ptr [ %672, %1398 ], [ %472, %1389 ]
  %1401 = add nsw i64 %1383, 1
  br label %1402

1402:                                             ; preds = %1399, %1382
  %1403 = phi ptr [ undef, %1382 ], [ %1400, %1399 ]
  %1404 = phi i64 [ %1383, %1382 ], [ %1401, %1399 ]
  %1405 = phi ptr [ %472, %1382 ], [ %1400, %1399 ]
  %1406 = sub nsw i64 0, %1384
  %1407 = icmp eq i64 %1386, %1406
  br i1 %1407, label %1438, label %1408

1408:                                             ; preds = %1402, %1434
  %1409 = phi i64 [ %1436, %1434 ], [ %1404, %1402 ]
  %1410 = phi ptr [ %1435, %1434 ], [ %1405, %1402 ]
  %1411 = getelementptr inbounds i16, ptr %426, i64 %1409
  %1412 = load i16, ptr %1411, align 2, !tbaa !45
  %1413 = zext i16 %1412 to i64
  %1414 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1413, i32 3
  %1415 = load i8, ptr %1414, align 2, !tbaa !52
  %1416 = zext i8 %1415 to i32
  %1417 = add nuw nsw i32 %1416, %1320
  %1418 = icmp eq i32 %1417, 3
  br i1 %1418, label %1419, label %1421

1419:                                             ; preds = %1408
  %1420 = getelementptr inbounds i16, ptr %1410, i64 1
  store i16 %1412, ptr %1410, align 2, !tbaa !45
  br label %1421

1421:                                             ; preds = %1419, %1408
  %1422 = phi ptr [ %1420, %1419 ], [ %1410, %1408 ]
  %1423 = add nsw i64 %1409, 1
  %1424 = getelementptr inbounds i16, ptr %426, i64 %1423
  %1425 = load i16, ptr %1424, align 2, !tbaa !45
  %1426 = zext i16 %1425 to i64
  %1427 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1426, i32 3
  %1428 = load i8, ptr %1427, align 2, !tbaa !52
  %1429 = zext i8 %1428 to i32
  %1430 = add nuw nsw i32 %1429, %1320
  %1431 = icmp eq i32 %1430, 3
  br i1 %1431, label %1432, label %1434

1432:                                             ; preds = %1421
  %1433 = getelementptr inbounds i16, ptr %1422, i64 1
  store i16 %1425, ptr %1422, align 2, !tbaa !45
  br label %1434

1434:                                             ; preds = %1432, %1421
  %1435 = phi ptr [ %1433, %1432 ], [ %1422, %1421 ]
  %1436 = add nsw i64 %1409, 2
  %1437 = icmp eq i64 %1436, %1384
  br i1 %1437, label %1438, label %1408

1438:                                             ; preds = %1345, %1373, %1402, %1434, %1325, %1380
  %1439 = phi ptr [ %472, %1380 ], [ %472, %1325 ], [ %1403, %1402 ], [ %1435, %1434 ], [ %1346, %1345 ], [ %1374, %1373 ]
  %1440 = ptrtoint ptr %1439 to i64
  %1441 = sub i64 %1440, %652
  %1442 = lshr exact i64 %1441, 1
  %1443 = trunc i64 %1442 to i32
  %1444 = icmp sgt i32 %1443, 0
  br i1 %1444, label %1445, label %1719

1445:                                             ; preds = %1438
  %1446 = and i64 %1442, 4294967295
  %1447 = extractelement <2 x double> %703, i64 0
  %1448 = extractelement <2 x double> %703, i64 1
  br label %1449

1449:                                             ; preds = %1445, %1493
  %1450 = phi i64 [ 0, %1445 ], [ %1496, %1493 ]
  %1451 = phi ptr [ %472, %1445 ], [ %1495, %1493 ]
  %1452 = phi ptr [ %1315, %1445 ], [ %1494, %1493 ]
  %1453 = getelementptr inbounds i16, ptr %472, i64 %1450
  %1454 = load i16, ptr %1453, align 2, !tbaa !45
  %1455 = zext i16 %1454 to i64
  %1456 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1455
  %1457 = load double, ptr %1456, align 8, !tbaa !69
  %1458 = fsub double %1447, %1457
  %1459 = fmul double %1458, %1458
  %1460 = getelementptr inbounds %class.Vector, ptr %1456, i64 0, i32 1
  %1461 = load double, ptr %1460, align 8, !tbaa !68
  %1462 = fsub double %1448, %1461
  %1463 = tail call double @llvm.fmuladd.f64(double %1462, double %1462, double %1459)
  %1464 = getelementptr inbounds %class.Vector, ptr %1456, i64 0, i32 2
  %1465 = load double, ptr %1464, align 8, !tbaa !50
  %1466 = fsub double %706, %1465
  %1467 = tail call double @llvm.fmuladd.f64(double %1466, double %1466, double %1463)
  br i1 %1283, label %1468, label %1475

1468:                                             ; preds = %1449
  %1469 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1455
  %1470 = load i32, ptr %1469, align 4
  %1471 = and i32 %1470, 1073741824
  %1472 = icmp ne i32 %1471, 0
  %1473 = fcmp ugt double %1467, %24
  %1474 = select i1 %1472, i1 true, i1 %1473
  br i1 %1474, label %1493, label %1480

1475:                                             ; preds = %1449
  %1476 = fcmp ugt double %1467, %24
  br i1 %1476, label %1493, label %1477

1477:                                             ; preds = %1475
  %1478 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1455
  %1479 = load i32, ptr %1478, align 4
  br label %1480

1480:                                             ; preds = %1477, %1468
  %1481 = phi i32 [ %1479, %1477 ], [ %1470, %1468 ]
  %1482 = shl i32 %1481, 2
  %1483 = ashr exact i32 %1482, 2
  %1484 = icmp slt i32 %1483, %731
  %1485 = icmp sgt i32 %1483, %733
  %1486 = select i1 %1484, i1 true, i1 %1485
  %1487 = select i1 %1486, ptr %1452, ptr %1451
  %1488 = zext i1 %1486 to i64
  %1489 = getelementptr inbounds i16, ptr %1452, i64 %1488
  %1490 = xor i1 %1486, true
  %1491 = zext i1 %1490 to i64
  %1492 = getelementptr inbounds i16, ptr %1451, i64 %1491
  store i16 %1454, ptr %1487, align 2, !tbaa !45
  br label %1493

1493:                                             ; preds = %1480, %1475, %1468
  %1494 = phi ptr [ %1452, %1468 ], [ %1452, %1475 ], [ %1489, %1480 ]
  %1495 = phi ptr [ %1451, %1468 ], [ %1451, %1475 ], [ %1492, %1480 ]
  %1496 = add nuw nsw i64 %1450, 1
  %1497 = icmp eq i64 %1496, %1446
  br i1 %1497, label %1719, label %1449

1498:                                             ; preds = %1309
  %1499 = icmp slt i32 %1273, %1274
  br i1 %1283, label %1500, label %1548

1500:                                             ; preds = %1498
  br i1 %1499, label %1501, label %1719

1501:                                             ; preds = %1500
  %1502 = sext i32 %1273 to i64
  %1503 = sext i32 %1274 to i64
  %1504 = extractelement <2 x double> %703, i64 0
  %1505 = extractelement <2 x double> %703, i64 1
  br label %1506

1506:                                             ; preds = %1501, %1543
  %1507 = phi i64 [ %1502, %1501 ], [ %1546, %1543 ]
  %1508 = phi ptr [ %472, %1501 ], [ %1545, %1543 ]
  %1509 = phi ptr [ %1315, %1501 ], [ %1544, %1543 ]
  %1510 = getelementptr inbounds i16, ptr %426, i64 %1507
  %1511 = load i16, ptr %1510, align 2, !tbaa !45
  %1512 = zext i16 %1511 to i64
  %1513 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1512
  %1514 = load i32, ptr %1513, align 4
  %1515 = and i32 %1514, 1073741824
  %1516 = icmp eq i32 %1515, 0
  br i1 %1516, label %1517, label %1543

1517:                                             ; preds = %1506
  %1518 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1512
  %1519 = getelementptr inbounds %class.Vector, ptr %1518, i64 0, i32 2
  %1520 = load double, ptr %1519, align 8, !tbaa !50
  %1521 = fsub double %706, %1520
  %1522 = getelementptr inbounds %class.Vector, ptr %1518, i64 0, i32 1
  %1523 = load double, ptr %1522, align 8, !tbaa !68
  %1524 = fsub double %1505, %1523
  %1525 = load double, ptr %1518, align 8, !tbaa !69
  %1526 = fsub double %1504, %1525
  %1527 = fmul double %1526, %1526
  %1528 = tail call double @llvm.fmuladd.f64(double %1524, double %1524, double %1527)
  %1529 = tail call double @llvm.fmuladd.f64(double %1521, double %1521, double %1528)
  %1530 = fcmp ugt double %1529, %24
  br i1 %1530, label %1543, label %1531

1531:                                             ; preds = %1517
  %1532 = shl i32 %1514, 2
  %1533 = ashr exact i32 %1532, 2
  %1534 = icmp slt i32 %1533, %731
  %1535 = icmp sgt i32 %1533, %733
  %1536 = select i1 %1534, i1 true, i1 %1535
  %1537 = select i1 %1536, ptr %1509, ptr %1508
  %1538 = zext i1 %1536 to i64
  %1539 = getelementptr inbounds i16, ptr %1509, i64 %1538
  %1540 = xor i1 %1536, true
  %1541 = zext i1 %1540 to i64
  %1542 = getelementptr inbounds i16, ptr %1508, i64 %1541
  store i16 %1511, ptr %1537, align 2, !tbaa !45
  br label %1543

1543:                                             ; preds = %1531, %1517, %1506
  %1544 = phi ptr [ %1509, %1506 ], [ %1509, %1517 ], [ %1539, %1531 ]
  %1545 = phi ptr [ %1508, %1506 ], [ %1508, %1517 ], [ %1542, %1531 ]
  %1546 = add nsw i64 %1507, 1
  %1547 = icmp eq i64 %1546, %1503
  br i1 %1547, label %1719, label %1506

1548:                                             ; preds = %1498
  br i1 %1499, label %1549, label %1719

1549:                                             ; preds = %1548
  %1550 = sub nsw i32 %1274, %1273
  %1551 = icmp sgt i32 %1550, 6
  br i1 %1551, label %1552, label %1670

1552:                                             ; preds = %1549
  %1553 = add nsw i32 %1274, -2
  %1554 = add nsw i32 %1273, 2
  %1555 = icmp slt i32 %1554, %1553
  br i1 %1555, label %1556, label %1670

1556:                                             ; preds = %1552
  %1557 = sext i32 %1273 to i64
  %1558 = getelementptr inbounds i16, ptr %426, i64 %1557
  %1559 = load i16, ptr %1558, align 2, !tbaa !45
  %1560 = zext i16 %1559 to i64
  %1561 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1560
  %1562 = load i32, ptr %1561, align 4
  %1563 = add nsw i32 %1273, 1
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds i16, ptr %426, i64 %1564
  %1566 = load i16, ptr %1565, align 2, !tbaa !45
  %1567 = zext i16 %1566 to i64
  %1568 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1567
  %1569 = getelementptr inbounds %class.Vector, ptr %1568, i64 0, i32 2
  %1570 = load double, ptr %1569, align 8, !tbaa !50
  %1571 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1560
  %1572 = getelementptr inbounds %class.Vector, ptr %1571, i64 0, i32 2
  %1573 = load double, ptr %1572, align 8, !tbaa !50
  %1574 = getelementptr inbounds %class.Vector, ptr %1568, i64 0, i32 1
  %1575 = load double, ptr %1574, align 8, !tbaa !68
  %1576 = getelementptr inbounds %class.Vector, ptr %1571, i64 0, i32 1
  %1577 = load double, ptr %1576, align 8, !tbaa !68
  %1578 = load double, ptr %1568, align 8, !tbaa !69
  %1579 = load double, ptr %1571, align 8, !tbaa !69
  %1580 = sext i32 %1554 to i64
  %1581 = sext i32 %1553 to i64
  %1582 = extractelement <2 x double> %703, i64 0
  %1583 = extractelement <2 x double> %703, i64 1
  br label %1584

1584:                                             ; preds = %1556, %1664
  %1585 = phi i64 [ %1580, %1556 ], [ %1667, %1664 ]
  %1586 = phi i64 [ %1567, %1556 ], [ %1624, %1664 ]
  %1587 = phi i32 [ %1562, %1556 ], [ %1652, %1664 ]
  %1588 = phi ptr [ %472, %1556 ], [ %1666, %1664 ]
  %1589 = phi ptr [ %1315, %1556 ], [ %1665, %1664 ]
  %1590 = phi i32 [ %1273, %1556 ], [ %1669, %1664 ]
  %1591 = phi i16 [ %1559, %1556 ], [ %1616, %1664 ]
  %1592 = phi i16 [ %1566, %1556 ], [ %1620, %1664 ]
  %1593 = phi double [ %1579, %1556 ], [ %1623, %1664 ]
  %1594 = phi double [ %1578, %1556 ], [ %1626, %1664 ]
  %1595 = phi double [ %1577, %1556 ], [ %1628, %1664 ]
  %1596 = phi double [ %1575, %1556 ], [ %1630, %1664 ]
  %1597 = phi double [ %1573, %1556 ], [ %1632, %1664 ]
  %1598 = phi double [ %1570, %1556 ], [ %1634, %1664 ]
  %1599 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1586
  %1600 = load i32, ptr %1599, align 4
  %1601 = shl i32 %1600, 2
  %1602 = ashr exact i32 %1601, 2
  %1603 = fsub double %1582, %1593
  %1604 = fsub double %1582, %1594
  %1605 = fmul double %1603, %1603
  %1606 = fmul double %1604, %1604
  %1607 = fsub double %1583, %1595
  %1608 = fsub double %1583, %1596
  %1609 = tail call double @llvm.fmuladd.f64(double %1607, double %1607, double %1605)
  %1610 = tail call double @llvm.fmuladd.f64(double %1608, double %1608, double %1606)
  %1611 = fsub double %706, %1597
  %1612 = fsub double %706, %1598
  %1613 = tail call double @llvm.fmuladd.f64(double %1611, double %1611, double %1609)
  %1614 = tail call double @llvm.fmuladd.f64(double %1612, double %1612, double %1610)
  %1615 = getelementptr inbounds i16, ptr %426, i64 %1585
  %1616 = load i16, ptr %1615, align 2, !tbaa !45
  %1617 = add nsw i32 %1590, 3
  %1618 = sext i32 %1617 to i64
  %1619 = getelementptr inbounds i16, ptr %426, i64 %1618
  %1620 = load i16, ptr %1619, align 2, !tbaa !45
  %1621 = zext i16 %1616 to i64
  %1622 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1621
  %1623 = load double, ptr %1622, align 8, !tbaa !69
  %1624 = zext i16 %1620 to i64
  %1625 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1624
  %1626 = load double, ptr %1625, align 8, !tbaa !69
  %1627 = getelementptr inbounds %class.Vector, ptr %1622, i64 0, i32 1
  %1628 = load double, ptr %1627, align 8, !tbaa !68
  %1629 = getelementptr inbounds %class.Vector, ptr %1625, i64 0, i32 1
  %1630 = load double, ptr %1629, align 8, !tbaa !68
  %1631 = getelementptr inbounds %class.Vector, ptr %1622, i64 0, i32 2
  %1632 = load double, ptr %1631, align 8, !tbaa !50
  %1633 = getelementptr inbounds %class.Vector, ptr %1625, i64 0, i32 2
  %1634 = load double, ptr %1633, align 8, !tbaa !50
  %1635 = fcmp ugt double %1613, %24
  br i1 %1635, label %1648, label %1636

1636:                                             ; preds = %1584
  %1637 = shl i32 %1587, 2
  %1638 = ashr exact i32 %1637, 2
  %1639 = icmp slt i32 %1638, %731
  %1640 = icmp sgt i32 %1638, %733
  %1641 = select i1 %1639, i1 true, i1 %1640
  %1642 = select i1 %1641, ptr %1589, ptr %1588
  %1643 = zext i1 %1641 to i64
  %1644 = getelementptr inbounds i16, ptr %1589, i64 %1643
  %1645 = xor i1 %1641, true
  %1646 = zext i1 %1645 to i64
  %1647 = getelementptr inbounds i16, ptr %1588, i64 %1646
  store i16 %1591, ptr %1642, align 2, !tbaa !45
  br label %1648

1648:                                             ; preds = %1636, %1584
  %1649 = phi ptr [ %1589, %1584 ], [ %1644, %1636 ]
  %1650 = phi ptr [ %1588, %1584 ], [ %1647, %1636 ]
  %1651 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1621
  %1652 = load i32, ptr %1651, align 4
  %1653 = fcmp ugt double %1614, %24
  br i1 %1653, label %1664, label %1654

1654:                                             ; preds = %1648
  %1655 = icmp slt i32 %1602, %731
  %1656 = icmp sgt i32 %1602, %733
  %1657 = select i1 %1655, i1 true, i1 %1656
  %1658 = select i1 %1657, ptr %1649, ptr %1650
  %1659 = zext i1 %1657 to i64
  %1660 = getelementptr inbounds i16, ptr %1649, i64 %1659
  %1661 = xor i1 %1657, true
  %1662 = zext i1 %1661 to i64
  %1663 = getelementptr inbounds i16, ptr %1650, i64 %1662
  store i16 %1592, ptr %1658, align 2, !tbaa !45
  br label %1664

1664:                                             ; preds = %1654, %1648
  %1665 = phi ptr [ %1649, %1648 ], [ %1660, %1654 ]
  %1666 = phi ptr [ %1650, %1648 ], [ %1663, %1654 ]
  %1667 = add nsw i64 %1585, 2
  %1668 = icmp slt i64 %1667, %1581
  %1669 = trunc i64 %1585 to i32
  br i1 %1668, label %1584, label %1670

1670:                                             ; preds = %1664, %1552, %1549
  %1671 = phi i32 [ %1273, %1549 ], [ %1273, %1552 ], [ %1669, %1664 ]
  %1672 = phi ptr [ %1315, %1549 ], [ %1315, %1552 ], [ %1665, %1664 ]
  %1673 = phi ptr [ %472, %1549 ], [ %472, %1552 ], [ %1666, %1664 ]
  %1674 = icmp slt i32 %1671, %1274
  br i1 %1674, label %1675, label %1719

1675:                                             ; preds = %1670
  %1676 = sext i32 %1671 to i64
  %1677 = sext i32 %1274 to i64
  %1678 = extractelement <2 x double> %703, i64 0
  %1679 = extractelement <2 x double> %703, i64 1
  br label %1680

1680:                                             ; preds = %1675, %1714
  %1681 = phi i64 [ %1676, %1675 ], [ %1717, %1714 ]
  %1682 = phi ptr [ %1673, %1675 ], [ %1716, %1714 ]
  %1683 = phi ptr [ %1672, %1675 ], [ %1715, %1714 ]
  %1684 = getelementptr inbounds i16, ptr %426, i64 %1681
  %1685 = load i16, ptr %1684, align 2, !tbaa !45
  %1686 = zext i16 %1685 to i64
  %1687 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1686
  %1688 = load double, ptr %1687, align 8, !tbaa !69
  %1689 = getelementptr inbounds %class.Vector, ptr %1687, i64 0, i32 1
  %1690 = load double, ptr %1689, align 8, !tbaa !68
  %1691 = getelementptr inbounds %class.Vector, ptr %1687, i64 0, i32 2
  %1692 = load double, ptr %1691, align 8, !tbaa !50
  %1693 = fsub double %1678, %1688
  %1694 = fmul double %1693, %1693
  %1695 = fsub double %1679, %1690
  %1696 = tail call double @llvm.fmuladd.f64(double %1695, double %1695, double %1694)
  %1697 = fsub double %706, %1692
  %1698 = tail call double @llvm.fmuladd.f64(double %1697, double %1697, double %1696)
  %1699 = fcmp ugt double %1698, %24
  br i1 %1699, label %1714, label %1700

1700:                                             ; preds = %1680
  %1701 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1686
  %1702 = load i32, ptr %1701, align 4
  %1703 = shl i32 %1702, 2
  %1704 = ashr exact i32 %1703, 2
  %1705 = icmp slt i32 %1704, %731
  %1706 = icmp sgt i32 %1704, %733
  %1707 = select i1 %1705, i1 true, i1 %1706
  %1708 = select i1 %1707, ptr %1683, ptr %1682
  %1709 = zext i1 %1707 to i64
  %1710 = getelementptr inbounds i16, ptr %1683, i64 %1709
  %1711 = xor i1 %1707, true
  %1712 = zext i1 %1711 to i64
  %1713 = getelementptr inbounds i16, ptr %1682, i64 %1712
  store i16 %1685, ptr %1708, align 2, !tbaa !45
  br label %1714

1714:                                             ; preds = %1700, %1680
  %1715 = phi ptr [ %1683, %1680 ], [ %1710, %1700 ]
  %1716 = phi ptr [ %1682, %1680 ], [ %1713, %1700 ]
  %1717 = add nsw i64 %1681, 1
  %1718 = icmp eq i64 %1717, %1677
  br i1 %1718, label %1719, label %1680

1719:                                             ; preds = %1493, %1714, %1543, %1438, %1670, %1500, %1548
  %1720 = phi ptr [ %1315, %1548 ], [ %1315, %1500 ], [ %1672, %1670 ], [ %1315, %1438 ], [ %1544, %1543 ], [ %1715, %1714 ], [ %1494, %1493 ]
  %1721 = phi ptr [ %472, %1548 ], [ %472, %1500 ], [ %1673, %1670 ], [ %472, %1438 ], [ %1545, %1543 ], [ %1716, %1714 ], [ %1495, %1493 ]
  %1722 = ptrtoint ptr %1721 to i64
  %1723 = sub i64 %1722, %652
  %1724 = lshr exact i64 %1723, 1
  %1725 = trunc i64 %1724 to i32
  %1726 = icmp sgt i32 %1725, 0
  br i1 %1726, label %1727, label %1827

1727:                                             ; preds = %1719
  %1728 = and i64 %1724, 4294967295
  %1729 = and i64 %1724, 1
  %1730 = icmp eq i64 %1728, 1
  br i1 %1730, label %1795, label %1731

1731:                                             ; preds = %1727
  %1732 = sub nsw i64 %1728, %1729
  br label %1733

1733:                                             ; preds = %1788, %1731
  %1734 = phi i64 [ 0, %1731 ], [ %1792, %1788 ]
  %1735 = phi ptr [ %1720, %1731 ], [ %1791, %1788 ]
  %1736 = phi ptr [ %334, %1731 ], [ %1790, %1788 ]
  %1737 = phi ptr [ %380, %1731 ], [ %1789, %1788 ]
  %1738 = phi i64 [ 0, %1731 ], [ %1793, %1788 ]
  %1739 = getelementptr inbounds i16, ptr %472, i64 %1734
  %1740 = load i16, ptr %1739, align 2, !tbaa !45
  %1741 = zext i16 %1740 to i64
  %1742 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1741
  %1743 = load i32, ptr %1742, align 4
  %1744 = shl i32 %1743, 2
  %1745 = ashr exact i32 %1744, 2
  %1746 = sext i32 %1745 to i64
  %1747 = getelementptr inbounds i8, ptr %968, i64 %1746
  %1748 = load i8, ptr %1747, align 1, !tbaa !59
  %1749 = sext i8 %1748 to i32
  switch i32 %1749, label %1761 [
    i32 0, label %1750
    i32 1, label %1752
    i32 2, label %1754
  ]

1750:                                             ; preds = %1733
  %1751 = getelementptr inbounds i16, ptr %1735, i64 1
  br label %1756

1752:                                             ; preds = %1733
  %1753 = getelementptr inbounds i16, ptr %1736, i64 1
  br label %1756

1754:                                             ; preds = %1733
  %1755 = getelementptr inbounds i16, ptr %1737, i64 1
  br label %1756

1756:                                             ; preds = %1750, %1752, %1754
  %1757 = phi ptr [ %1737, %1754 ], [ %1736, %1752 ], [ %1735, %1750 ]
  %1758 = phi ptr [ %1755, %1754 ], [ %1737, %1752 ], [ %1737, %1750 ]
  %1759 = phi ptr [ %1736, %1754 ], [ %1753, %1752 ], [ %1736, %1750 ]
  %1760 = phi ptr [ %1735, %1754 ], [ %1735, %1752 ], [ %1751, %1750 ]
  store i16 %1740, ptr %1757, align 2, !tbaa !45
  br label %1761

1761:                                             ; preds = %1756, %1733
  %1762 = phi ptr [ %1737, %1733 ], [ %1758, %1756 ]
  %1763 = phi ptr [ %1736, %1733 ], [ %1759, %1756 ]
  %1764 = phi ptr [ %1735, %1733 ], [ %1760, %1756 ]
  %1765 = or i64 %1734, 1
  %1766 = getelementptr inbounds i16, ptr %472, i64 %1765
  %1767 = load i16, ptr %1766, align 2, !tbaa !45
  %1768 = zext i16 %1767 to i64
  %1769 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1768
  %1770 = load i32, ptr %1769, align 4
  %1771 = shl i32 %1770, 2
  %1772 = ashr exact i32 %1771, 2
  %1773 = sext i32 %1772 to i64
  %1774 = getelementptr inbounds i8, ptr %968, i64 %1773
  %1775 = load i8, ptr %1774, align 1, !tbaa !59
  %1776 = sext i8 %1775 to i32
  switch i32 %1776, label %1788 [
    i32 0, label %1781
    i32 1, label %1779
    i32 2, label %1777
  ]

1777:                                             ; preds = %1761
  %1778 = getelementptr inbounds i16, ptr %1762, i64 1
  br label %1783

1779:                                             ; preds = %1761
  %1780 = getelementptr inbounds i16, ptr %1763, i64 1
  br label %1783

1781:                                             ; preds = %1761
  %1782 = getelementptr inbounds i16, ptr %1764, i64 1
  br label %1783

1783:                                             ; preds = %1781, %1779, %1777
  %1784 = phi ptr [ %1762, %1777 ], [ %1763, %1779 ], [ %1764, %1781 ]
  %1785 = phi ptr [ %1778, %1777 ], [ %1762, %1779 ], [ %1762, %1781 ]
  %1786 = phi ptr [ %1763, %1777 ], [ %1780, %1779 ], [ %1763, %1781 ]
  %1787 = phi ptr [ %1764, %1777 ], [ %1764, %1779 ], [ %1782, %1781 ]
  store i16 %1767, ptr %1784, align 2, !tbaa !45
  br label %1788

1788:                                             ; preds = %1783, %1761
  %1789 = phi ptr [ %1762, %1761 ], [ %1785, %1783 ]
  %1790 = phi ptr [ %1763, %1761 ], [ %1786, %1783 ]
  %1791 = phi ptr [ %1764, %1761 ], [ %1787, %1783 ]
  %1792 = add nuw nsw i64 %1734, 2
  %1793 = add i64 %1738, 2
  %1794 = icmp eq i64 %1793, %1732
  br i1 %1794, label %1795, label %1733

1795:                                             ; preds = %1788, %1727
  %1796 = phi ptr [ undef, %1727 ], [ %1789, %1788 ]
  %1797 = phi ptr [ undef, %1727 ], [ %1790, %1788 ]
  %1798 = phi ptr [ undef, %1727 ], [ %1791, %1788 ]
  %1799 = phi i64 [ 0, %1727 ], [ %1792, %1788 ]
  %1800 = phi ptr [ %1720, %1727 ], [ %1791, %1788 ]
  %1801 = phi ptr [ %334, %1727 ], [ %1790, %1788 ]
  %1802 = phi ptr [ %380, %1727 ], [ %1789, %1788 ]
  %1803 = icmp eq i64 %1729, 0
  br i1 %1803, label %1827, label %1804

1804:                                             ; preds = %1795
  %1805 = getelementptr inbounds i16, ptr %472, i64 %1799
  %1806 = load i16, ptr %1805, align 2, !tbaa !45
  %1807 = zext i16 %1806 to i64
  %1808 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1807
  %1809 = load i32, ptr %1808, align 4
  %1810 = shl i32 %1809, 2
  %1811 = ashr exact i32 %1810, 2
  %1812 = sext i32 %1811 to i64
  %1813 = getelementptr inbounds i8, ptr %968, i64 %1812
  %1814 = load i8, ptr %1813, align 1, !tbaa !59
  %1815 = sext i8 %1814 to i32
  switch i32 %1815, label %1827 [
    i32 0, label %1820
    i32 1, label %1818
    i32 2, label %1816
  ]

1816:                                             ; preds = %1804
  %1817 = getelementptr inbounds i16, ptr %1802, i64 1
  br label %1822

1818:                                             ; preds = %1804
  %1819 = getelementptr inbounds i16, ptr %1801, i64 1
  br label %1822

1820:                                             ; preds = %1804
  %1821 = getelementptr inbounds i16, ptr %1800, i64 1
  br label %1822

1822:                                             ; preds = %1820, %1818, %1816
  %1823 = phi ptr [ %1802, %1816 ], [ %1801, %1818 ], [ %1800, %1820 ]
  %1824 = phi ptr [ %1817, %1816 ], [ %1802, %1818 ], [ %1802, %1820 ]
  %1825 = phi ptr [ %1801, %1816 ], [ %1819, %1818 ], [ %1801, %1820 ]
  %1826 = phi ptr [ %1800, %1816 ], [ %1800, %1818 ], [ %1821, %1820 ]
  store i16 %1806, ptr %1823, align 2, !tbaa !45
  br label %1827

1827:                                             ; preds = %1795, %1822, %1804, %1719
  %1828 = phi ptr [ %380, %1719 ], [ %1796, %1795 ], [ %1802, %1804 ], [ %1824, %1822 ]
  %1829 = phi ptr [ %334, %1719 ], [ %1797, %1795 ], [ %1801, %1804 ], [ %1825, %1822 ]
  %1830 = phi ptr [ %1720, %1719 ], [ %1798, %1795 ], [ %1800, %1804 ], [ %1826, %1822 ]
  %1831 = ptrtoint ptr %1830 to i64
  %1832 = ptrtoint ptr %1315 to i64
  %1833 = sub i64 %1831, %1832
  %1834 = lshr exact i64 %1833, 1
  %1835 = trunc i64 %1834 to i32
  %1836 = icmp eq i32 %1835, 0
  %1837 = shl i64 %1833, 31
  br i1 %1836, label %1843, label %1838

1838:                                             ; preds = %1827
  %1839 = add i64 %1837, -4294967296
  %1840 = ashr i64 %1839, 32
  %1841 = getelementptr inbounds i16, ptr %1315, i64 %1840
  %1842 = load i16, ptr %1841, align 2, !tbaa !45
  br label %1843

1843:                                             ; preds = %1827, %1838
  %1844 = phi i16 [ %1842, %1838 ], [ -1, %1827 ]
  %1845 = ashr i64 %1837, 32
  %1846 = getelementptr inbounds i16, ptr %1315, i64 %1845
  store i16 %1844, ptr %1846, align 2, !tbaa !45
  %1847 = trunc i64 %1834 to i16
  %1848 = add i16 %1847, 1
  %1849 = load i32, ptr %17, align 8, !tbaa !19
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds i16, ptr %1311, i64 %1850
  store i16 %1848, ptr %1851, align 2, !tbaa !45
  %1852 = add nsw i32 %1835, 2
  %1853 = add nsw i32 %1852, %1849
  %1854 = ptrtoint ptr %1829 to i64
  %1855 = sub i64 %1854, %653
  %1856 = lshr exact i64 %1855, 1
  %1857 = trunc i64 %1856 to i32
  %1858 = add nsw i32 %1853, 1
  %1859 = sext i32 %1858 to i64
  %1860 = getelementptr i16, ptr %1311, i64 %1859
  %1861 = icmp sgt i32 %1857, 0
  br i1 %1861, label %1862, label %1952

1862:                                             ; preds = %1843
  %1863 = and i64 %1856, 4294967295
  %1864 = icmp ult i64 %1863, 8
  br i1 %1864, label %1908, label %1865

1865:                                             ; preds = %1862
  %1866 = shl nsw i64 %1859, 1
  %1867 = add i64 %1866, %1312
  %1868 = sub i64 %1867, %653
  %1869 = icmp ult i64 %1868, 128
  br i1 %1869, label %1908, label %1870

1870:                                             ; preds = %1865
  %1871 = icmp ult i64 %1863, 64
  br i1 %1871, label %1895, label %1872

1872:                                             ; preds = %1870
  %1873 = and i64 %1856, 63
  %1874 = sub nsw i64 %1863, %1873
  br label %1875

1875:                                             ; preds = %1875, %1872
  %1876 = phi i64 [ 0, %1872 ], [ %1889, %1875 ]
  %1877 = getelementptr inbounds i16, ptr %334, i64 %1876
  %1878 = load <16 x i16>, ptr %1877, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1877, i64 16
  %1880 = load <16 x i16>, ptr %1879, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1877, i64 32
  %1882 = load <16 x i16>, ptr %1881, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1877, i64 48
  %1884 = load <16 x i16>, ptr %1883, align 2, !tbaa !45
  %1885 = getelementptr inbounds i16, ptr %1860, i64 %1876
  store <16 x i16> %1878, ptr %1885, align 2, !tbaa !45
  %1886 = getelementptr inbounds i16, ptr %1885, i64 16
  store <16 x i16> %1880, ptr %1886, align 2, !tbaa !45
  %1887 = getelementptr inbounds i16, ptr %1885, i64 32
  store <16 x i16> %1882, ptr %1887, align 2, !tbaa !45
  %1888 = getelementptr inbounds i16, ptr %1885, i64 48
  store <16 x i16> %1884, ptr %1888, align 2, !tbaa !45
  %1889 = add nuw i64 %1876, 64
  %1890 = icmp eq i64 %1889, %1874
  br i1 %1890, label %1891, label %1875, !llvm.loop !216

1891:                                             ; preds = %1875
  %1892 = icmp eq i64 %1873, 0
  br i1 %1892, label %1946, label %1893

1893:                                             ; preds = %1891
  %1894 = icmp ult i64 %1873, 8
  br i1 %1894, label %1908, label %1895

1895:                                             ; preds = %1870, %1893
  %1896 = phi i64 [ %1874, %1893 ], [ 0, %1870 ]
  %1897 = and i64 %1856, 7
  %1898 = sub nsw i64 %1863, %1897
  br label %1899

1899:                                             ; preds = %1899, %1895
  %1900 = phi i64 [ %1896, %1895 ], [ %1904, %1899 ]
  %1901 = getelementptr inbounds i16, ptr %334, i64 %1900
  %1902 = load <8 x i16>, ptr %1901, align 2, !tbaa !45
  %1903 = getelementptr inbounds i16, ptr %1860, i64 %1900
  store <8 x i16> %1902, ptr %1903, align 2, !tbaa !45
  %1904 = add nuw i64 %1900, 8
  %1905 = icmp eq i64 %1904, %1898
  br i1 %1905, label %1906, label %1899, !llvm.loop !217

1906:                                             ; preds = %1899
  %1907 = icmp eq i64 %1897, 0
  br i1 %1907, label %1946, label %1908

1908:                                             ; preds = %1865, %1862, %1893, %1906
  %1909 = phi i64 [ 0, %1862 ], [ 0, %1865 ], [ %1874, %1893 ], [ %1898, %1906 ]
  %1910 = sub i64 %1856, %1909
  %1911 = xor i64 %1909, -1
  %1912 = add nsw i64 %1863, %1911
  %1913 = and i64 %1910, 3
  %1914 = icmp eq i64 %1913, 0
  br i1 %1914, label %1924, label %1915

1915:                                             ; preds = %1908, %1915
  %1916 = phi i64 [ %1921, %1915 ], [ %1909, %1908 ]
  %1917 = phi i64 [ %1922, %1915 ], [ 0, %1908 ]
  %1918 = getelementptr inbounds i16, ptr %334, i64 %1916
  %1919 = load i16, ptr %1918, align 2, !tbaa !45
  %1920 = getelementptr inbounds i16, ptr %1860, i64 %1916
  store i16 %1919, ptr %1920, align 2, !tbaa !45
  %1921 = add nuw nsw i64 %1916, 1
  %1922 = add i64 %1917, 1
  %1923 = icmp eq i64 %1922, %1913
  br i1 %1923, label %1924, label %1915, !llvm.loop !218

1924:                                             ; preds = %1915, %1908
  %1925 = phi i64 [ %1909, %1908 ], [ %1921, %1915 ]
  %1926 = icmp ult i64 %1912, 3
  br i1 %1926, label %1946, label %1927

1927:                                             ; preds = %1924, %1927
  %1928 = phi i64 [ %1944, %1927 ], [ %1925, %1924 ]
  %1929 = getelementptr inbounds i16, ptr %334, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1860, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1928, 1
  %1933 = getelementptr inbounds i16, ptr %334, i64 %1932
  %1934 = load i16, ptr %1933, align 2, !tbaa !45
  %1935 = getelementptr inbounds i16, ptr %1860, i64 %1932
  store i16 %1934, ptr %1935, align 2, !tbaa !45
  %1936 = add nuw nsw i64 %1928, 2
  %1937 = getelementptr inbounds i16, ptr %334, i64 %1936
  %1938 = load i16, ptr %1937, align 2, !tbaa !45
  %1939 = getelementptr inbounds i16, ptr %1860, i64 %1936
  store i16 %1938, ptr %1939, align 2, !tbaa !45
  %1940 = add nuw nsw i64 %1928, 3
  %1941 = getelementptr inbounds i16, ptr %334, i64 %1940
  %1942 = load i16, ptr %1941, align 2, !tbaa !45
  %1943 = getelementptr inbounds i16, ptr %1860, i64 %1940
  store i16 %1942, ptr %1943, align 2, !tbaa !45
  %1944 = add nuw nsw i64 %1928, 4
  %1945 = icmp eq i64 %1944, %1863
  br i1 %1945, label %1946, label %1927, !llvm.loop !219

1946:                                             ; preds = %1924, %1927, %1891, %1906
  %1947 = shl i64 %1855, 31
  %1948 = add i64 %1947, -4294967296
  %1949 = ashr i64 %1948, 32
  %1950 = getelementptr inbounds i16, ptr %1860, i64 %1949
  %1951 = load i16, ptr %1950, align 2, !tbaa !45
  br label %1952

1952:                                             ; preds = %1843, %1946
  %1953 = phi i64 [ %1856, %1946 ], [ 0, %1843 ]
  %1954 = phi i16 [ %1951, %1946 ], [ -1, %1843 ]
  %1955 = and i64 %1953, 4294967295
  %1956 = getelementptr inbounds i16, ptr %1860, i64 %1955
  store i16 %1954, ptr %1956, align 2, !tbaa !45
  %1957 = trunc i64 %1856 to i16
  %1958 = add i16 %1957, 1
  %1959 = sext i32 %1853 to i64
  %1960 = getelementptr inbounds i16, ptr %1311, i64 %1959
  store i16 %1958, ptr %1960, align 2, !tbaa !45
  %1961 = add nsw i32 %1857, 2
  %1962 = add nsw i32 %1961, %1853
  %1963 = ptrtoint ptr %1828 to i64
  %1964 = sub i64 %1963, %654
  %1965 = lshr exact i64 %1964, 1
  %1966 = trunc i64 %1965 to i32
  %1967 = add nsw i32 %1962, 1
  %1968 = sext i32 %1967 to i64
  %1969 = getelementptr i16, ptr %1311, i64 %1968
  %1970 = icmp sgt i32 %1966, 0
  br i1 %1970, label %1971, label %2061

1971:                                             ; preds = %1952
  %1972 = and i64 %1965, 4294967295
  %1973 = icmp ult i64 %1972, 8
  br i1 %1973, label %2017, label %1974

1974:                                             ; preds = %1971
  %1975 = shl nsw i64 %1968, 1
  %1976 = add i64 %1975, %1312
  %1977 = sub i64 %1976, %654
  %1978 = icmp ult i64 %1977, 128
  br i1 %1978, label %2017, label %1979

1979:                                             ; preds = %1974
  %1980 = icmp ult i64 %1972, 64
  br i1 %1980, label %2004, label %1981

1981:                                             ; preds = %1979
  %1982 = and i64 %1965, 63
  %1983 = sub nsw i64 %1972, %1982
  br label %1984

1984:                                             ; preds = %1984, %1981
  %1985 = phi i64 [ 0, %1981 ], [ %1998, %1984 ]
  %1986 = getelementptr inbounds i16, ptr %380, i64 %1985
  %1987 = load <16 x i16>, ptr %1986, align 2, !tbaa !45
  %1988 = getelementptr inbounds i16, ptr %1986, i64 16
  %1989 = load <16 x i16>, ptr %1988, align 2, !tbaa !45
  %1990 = getelementptr inbounds i16, ptr %1986, i64 32
  %1991 = load <16 x i16>, ptr %1990, align 2, !tbaa !45
  %1992 = getelementptr inbounds i16, ptr %1986, i64 48
  %1993 = load <16 x i16>, ptr %1992, align 2, !tbaa !45
  %1994 = getelementptr inbounds i16, ptr %1969, i64 %1985
  store <16 x i16> %1987, ptr %1994, align 2, !tbaa !45
  %1995 = getelementptr inbounds i16, ptr %1994, i64 16
  store <16 x i16> %1989, ptr %1995, align 2, !tbaa !45
  %1996 = getelementptr inbounds i16, ptr %1994, i64 32
  store <16 x i16> %1991, ptr %1996, align 2, !tbaa !45
  %1997 = getelementptr inbounds i16, ptr %1994, i64 48
  store <16 x i16> %1993, ptr %1997, align 2, !tbaa !45
  %1998 = add nuw i64 %1985, 64
  %1999 = icmp eq i64 %1998, %1983
  br i1 %1999, label %2000, label %1984, !llvm.loop !220

2000:                                             ; preds = %1984
  %2001 = icmp eq i64 %1982, 0
  br i1 %2001, label %2055, label %2002

2002:                                             ; preds = %2000
  %2003 = icmp ult i64 %1982, 8
  br i1 %2003, label %2017, label %2004

2004:                                             ; preds = %1979, %2002
  %2005 = phi i64 [ %1983, %2002 ], [ 0, %1979 ]
  %2006 = and i64 %1965, 7
  %2007 = sub nsw i64 %1972, %2006
  br label %2008

2008:                                             ; preds = %2008, %2004
  %2009 = phi i64 [ %2005, %2004 ], [ %2013, %2008 ]
  %2010 = getelementptr inbounds i16, ptr %380, i64 %2009
  %2011 = load <8 x i16>, ptr %2010, align 2, !tbaa !45
  %2012 = getelementptr inbounds i16, ptr %1969, i64 %2009
  store <8 x i16> %2011, ptr %2012, align 2, !tbaa !45
  %2013 = add nuw i64 %2009, 8
  %2014 = icmp eq i64 %2013, %2007
  br i1 %2014, label %2015, label %2008, !llvm.loop !221

2015:                                             ; preds = %2008
  %2016 = icmp eq i64 %2006, 0
  br i1 %2016, label %2055, label %2017

2017:                                             ; preds = %1974, %1971, %2002, %2015
  %2018 = phi i64 [ 0, %1971 ], [ 0, %1974 ], [ %1983, %2002 ], [ %2007, %2015 ]
  %2019 = sub i64 %1965, %2018
  %2020 = xor i64 %2018, -1
  %2021 = add nsw i64 %1972, %2020
  %2022 = and i64 %2019, 3
  %2023 = icmp eq i64 %2022, 0
  br i1 %2023, label %2033, label %2024

2024:                                             ; preds = %2017, %2024
  %2025 = phi i64 [ %2030, %2024 ], [ %2018, %2017 ]
  %2026 = phi i64 [ %2031, %2024 ], [ 0, %2017 ]
  %2027 = getelementptr inbounds i16, ptr %380, i64 %2025
  %2028 = load i16, ptr %2027, align 2, !tbaa !45
  %2029 = getelementptr inbounds i16, ptr %1969, i64 %2025
  store i16 %2028, ptr %2029, align 2, !tbaa !45
  %2030 = add nuw nsw i64 %2025, 1
  %2031 = add i64 %2026, 1
  %2032 = icmp eq i64 %2031, %2022
  br i1 %2032, label %2033, label %2024, !llvm.loop !222

2033:                                             ; preds = %2024, %2017
  %2034 = phi i64 [ %2018, %2017 ], [ %2030, %2024 ]
  %2035 = icmp ult i64 %2021, 3
  br i1 %2035, label %2055, label %2036

2036:                                             ; preds = %2033, %2036
  %2037 = phi i64 [ %2053, %2036 ], [ %2034, %2033 ]
  %2038 = getelementptr inbounds i16, ptr %380, i64 %2037
  %2039 = load i16, ptr %2038, align 2, !tbaa !45
  %2040 = getelementptr inbounds i16, ptr %1969, i64 %2037
  store i16 %2039, ptr %2040, align 2, !tbaa !45
  %2041 = add nuw nsw i64 %2037, 1
  %2042 = getelementptr inbounds i16, ptr %380, i64 %2041
  %2043 = load i16, ptr %2042, align 2, !tbaa !45
  %2044 = getelementptr inbounds i16, ptr %1969, i64 %2041
  store i16 %2043, ptr %2044, align 2, !tbaa !45
  %2045 = add nuw nsw i64 %2037, 2
  %2046 = getelementptr inbounds i16, ptr %380, i64 %2045
  %2047 = load i16, ptr %2046, align 2, !tbaa !45
  %2048 = getelementptr inbounds i16, ptr %1969, i64 %2045
  store i16 %2047, ptr %2048, align 2, !tbaa !45
  %2049 = add nuw nsw i64 %2037, 3
  %2050 = getelementptr inbounds i16, ptr %380, i64 %2049
  %2051 = load i16, ptr %2050, align 2, !tbaa !45
  %2052 = getelementptr inbounds i16, ptr %1969, i64 %2049
  store i16 %2051, ptr %2052, align 2, !tbaa !45
  %2053 = add nuw nsw i64 %2037, 4
  %2054 = icmp eq i64 %2053, %1972
  br i1 %2054, label %2055, label %2036, !llvm.loop !223

2055:                                             ; preds = %2033, %2036, %2000, %2015
  %2056 = shl i64 %1964, 31
  %2057 = add i64 %2056, -4294967296
  %2058 = ashr i64 %2057, 32
  %2059 = getelementptr inbounds i16, ptr %1969, i64 %2058
  %2060 = load i16, ptr %2059, align 2, !tbaa !45
  br label %2061

2061:                                             ; preds = %1952, %2055
  %2062 = phi i64 [ %1965, %2055 ], [ 0, %1952 ]
  %2063 = phi i16 [ %2060, %2055 ], [ -1, %1952 ]
  %2064 = and i64 %2062, 4294967295
  %2065 = getelementptr inbounds i16, ptr %1969, i64 %2064
  store i16 %2063, ptr %2065, align 2, !tbaa !45
  %2066 = trunc i64 %1965 to i16
  %2067 = add i16 %2066, 1
  %2068 = sext i32 %1962 to i64
  %2069 = getelementptr inbounds i16, ptr %1311, i64 %2068
  store i16 %2067, ptr %2069, align 2, !tbaa !45
  %2070 = add nsw i32 %1966, 2
  %2071 = add nsw i32 %2070, %1962
  %2072 = select i1 %147, i32 0, i32 %2071
  store i32 %2072, ptr %17, align 8
  br label %2104

2073:                                             ; preds = %700
  %2074 = load ptr, ptr %12, align 8, !tbaa !47
  %2075 = load i32, ptr %17, align 8, !tbaa !19
  %2076 = add i32 %2075, 1
  %2077 = sext i32 %2076 to i64
  %2078 = getelementptr inbounds i16, ptr %2074, i64 %2077
  %2079 = sext i32 %2075 to i64
  %2080 = getelementptr inbounds i16, ptr %2074, i64 %2079
  %2081 = load i16, ptr %2080, align 2, !tbaa !45
  %2082 = zext i16 %2081 to i32
  %2083 = add i32 %2076, %2082
  %2084 = add nsw i32 %2082, -1
  %2085 = add i32 %2083, 1
  %2086 = sext i32 %2085 to i64
  %2087 = getelementptr inbounds i16, ptr %2074, i64 %2086
  %2088 = sext i32 %2083 to i64
  %2089 = getelementptr inbounds i16, ptr %2074, i64 %2088
  %2090 = load i16, ptr %2089, align 2, !tbaa !45
  %2091 = zext i16 %2090 to i32
  %2092 = add i32 %2085, %2091
  %2093 = add nsw i32 %2091, -1
  %2094 = add i32 %2092, 1
  %2095 = sext i32 %2094 to i64
  %2096 = getelementptr inbounds i16, ptr %2074, i64 %2095
  %2097 = sext i32 %2092 to i64
  %2098 = getelementptr inbounds i16, ptr %2074, i64 %2097
  %2099 = load i16, ptr %2098, align 2, !tbaa !45
  %2100 = zext i16 %2099 to i32
  %2101 = add i32 %2094, %2100
  store i32 %2101, ptr %17, align 8, !tbaa !19
  %2102 = add nsw i32 %2100, -1
  %2103 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2104

2104:                                             ; preds = %2061, %2073
  %2105 = phi i32 [ %2103, %2073 ], [ %1316, %2061 ]
  %2106 = phi i32 [ %2102, %2073 ], [ %1966, %2061 ]
  %2107 = phi ptr [ %2096, %2073 ], [ %1969, %2061 ]
  %2108 = phi i32 [ %2093, %2073 ], [ %1857, %2061 ]
  %2109 = phi ptr [ %2087, %2073 ], [ %1860, %2061 ]
  %2110 = phi i32 [ %2084, %2073 ], [ %1835, %2061 ]
  %2111 = phi ptr [ %2078, %2073 ], [ %1315, %2061 ]
  %2112 = phi i32 [ %683, %2073 ], [ %1273, %2061 ]
  %2113 = phi i32 [ %682, %2073 ], [ %1274, %2061 ]
  %2114 = phi i32 [ %681, %2073 ], [ %1275, %2061 ]
  %2115 = phi i32 [ %680, %2073 ], [ %1276, %2061 ]
  %2116 = phi ptr [ %678, %2073 ], [ %969, %2061 ]
  %2117 = phi ptr [ %677, %2073 ], [ %970, %2061 ]
  %2118 = phi ptr [ %676, %2073 ], [ %971, %2061 ]
  %2119 = icmp eq i32 %2105, 0
  %2120 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2121 = icmp ne i32 %2120, 0
  %2122 = select i1 %2119, i1 true, i1 %2121
  br i1 %2122, label %2127, label %2123

2123:                                             ; preds = %2104
  %2124 = load i8, ptr %707, align 2, !tbaa !52
  %2125 = icmp eq i8 %2124, 1
  %2126 = select i1 %2125, double 1.000000e+00, double -1.000000e+00
  br label %2127

2127:                                             ; preds = %2104, %2123
  %2128 = phi double [ %2126, %2123 ], [ 0.000000e+00, %2104 ]
  %2129 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %685, i32 1
  %2130 = load float, ptr %2129, align 8, !tbaa !81
  %2131 = fpext float %2130 to double
  %2132 = fmul double %2131, 0x4074C104816F0069
  %2133 = fmul double %33, %2132
  %2134 = fmul double %28, %2133
  %2135 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %685, i32 2
  %2136 = load i16, ptr %2135, align 4, !tbaa !82
  %2137 = sext i16 %2136 to i32
  %2138 = load ptr, ptr %655, align 8, !tbaa !83
  %2139 = load i32, ptr %656, align 8, !tbaa !85
  %2140 = shl nsw i32 %2137, 1
  %2141 = mul i32 %2140, %2139
  %2142 = zext i32 %2141 to i64
  %2143 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2138, i64 %2142
  %2144 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2145 = extractelement <2 x double> %703, i64 0
  %2146 = extractelement <2 x double> %703, i64 1
  %2147 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2144, double noundef %2145, double noundef %2146, double noundef %706, ptr noundef %46, ptr noundef nonnull %2111, i32 noundef %2110, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2148 = icmp sgt i32 %2147, 0
  br i1 %2148, label %2149, label %2386

2149:                                             ; preds = %2127
  %2150 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2151 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2152 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2153 = mul nsw i32 %2152, %709
  %2154 = mul i32 %2151, 3
  %2155 = mul nsw i32 %721, 3
  %2156 = sext i32 %2155 to i64
  %2157 = add nsw i32 %2155, 1
  %2158 = sext i32 %2157 to i64
  %2159 = add nsw i32 %2155, 2
  %2160 = sext i32 %2159 to i64
  %2161 = zext i32 %2147 to i64
  br label %2162

2162:                                             ; preds = %2149, %2162
  %2163 = phi i64 [ 0, %2149 ], [ %2384, %2162 ]
  %2164 = phi double [ 0.000000e+00, %2149 ], [ %2266, %2162 ]
  %2165 = phi double [ 0.000000e+00, %2149 ], [ %2346, %2162 ]
  %2166 = phi <2 x double> [ zeroinitializer, %2149 ], [ %2262, %2162 ]
  %2167 = phi <2 x double> [ zeroinitializer, %2149 ], [ %2342, %2162 ]
  %2168 = shl nuw nsw i64 %2163, 1
  %2169 = getelementptr inbounds i32, ptr %146, i64 %2168
  %2170 = load i32, ptr %2169, align 4, !tbaa !5
  %2171 = ashr i32 %2170, 14
  %2172 = add nsw i32 %2171, %39
  %2173 = getelementptr inbounds i16, ptr %99, i64 %2163
  %2174 = load i16, ptr %2173, align 2, !tbaa !45
  %2175 = zext i16 %2174 to i64
  %2176 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2175
  %2177 = getelementptr inbounds double, ptr %145, i64 %2163
  %2178 = load double, ptr %2177, align 8, !tbaa !15
  %2179 = sext i32 %2172 to i64
  %2180 = getelementptr inbounds double, ptr %2150, i64 %2179
  %2181 = load double, ptr %2180, align 8, !tbaa !15
  %2182 = fsub double %2178, %2181
  %2183 = shl nsw i32 %2172, 4
  %2184 = sext i32 %2183 to i64
  %2185 = getelementptr inbounds double, ptr %31, i64 %2184
  %2186 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2175, i32 2
  %2187 = load i16, ptr %2186, align 4, !tbaa !82
  %2188 = sext i16 %2187 to i32
  %2189 = shl nsw i32 %2188, 1
  %2190 = sext i32 %2189 to i64
  %2191 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2143, i64 %2190
  %2192 = getelementptr inbounds %class.Vector, ptr %630, i64 %2175
  %2193 = getelementptr inbounds %class.Vector, ptr %636, i64 %2175
  %2194 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2175, i32 1
  %2195 = load float, ptr %2194, align 8, !tbaa !81
  %2196 = fpext float %2195 to double
  %2197 = fmul double %2134, %2196
  %2198 = getelementptr inbounds %class.Vector, ptr %2176, i64 0, i32 2
  %2199 = load double, ptr %2198, align 8, !tbaa !50
  %2200 = fsub double %706, %2199
  %2201 = load double, ptr %2191, align 8, !tbaa !86
  %2202 = fmul double %33, %2201
  %2203 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2143, i64 %2190, i32 1
  %2204 = load double, ptr %2203, align 8, !tbaa !88
  %2205 = load double, ptr %2185, align 8, !tbaa !15
  %2206 = getelementptr inbounds double, ptr %2185, i64 2
  %2207 = load double, ptr %2206, align 8, !tbaa !15
  %2208 = fmul double %2204, %657
  %2209 = fmul double %2208, %2207
  %2210 = tail call double @llvm.fmuladd.f64(double %2202, double %2205, double %2209)
  %2211 = getelementptr inbounds double, ptr %2185, i64 1
  %2212 = load double, ptr %2211, align 8, !tbaa !15
  %2213 = getelementptr inbounds double, ptr %2185, i64 3
  %2214 = load double, ptr %2213, align 8, !tbaa !15
  %2215 = fmul double %2208, %2214
  %2216 = tail call double @llvm.fmuladd.f64(double %2202, double %2212, double %2215)
  %2217 = getelementptr inbounds double, ptr %2185, i64 4
  %2218 = load double, ptr %2217, align 8, !tbaa !15
  %2219 = getelementptr inbounds double, ptr %2185, i64 6
  %2220 = load double, ptr %2219, align 8, !tbaa !15
  %2221 = fmul double %2208, %2220
  %2222 = tail call double @llvm.fmuladd.f64(double %2202, double %2218, double %2221)
  %2223 = tail call double @llvm.fmuladd.f64(double %2182, double %2210, double %2216)
  %2224 = tail call double @llvm.fmuladd.f64(double %2223, double %2182, double %2222)
  %2225 = fmul double %2128, %2224
  %2226 = load double, ptr %659, align 8, !tbaa !15
  %2227 = tail call double @llvm.fmuladd.f64(double %2225, double %2200, double %2226)
  %2228 = getelementptr inbounds double, ptr %2185, i64 8
  %2229 = getelementptr inbounds double, ptr %2185, i64 9
  %2230 = getelementptr inbounds double, ptr %2185, i64 10
  %2231 = load double, ptr %660, align 8, !tbaa !15
  %2232 = load double, ptr %661, align 8, !tbaa !15
  %2233 = load double, ptr %662, align 8, !tbaa !15
  %2234 = load <2 x double>, ptr %2176, align 8, !tbaa !15
  %2235 = fsub <2 x double> %703, %2234
  %2236 = load <2 x double>, ptr %658, align 8, !tbaa !15
  %2237 = insertelement <2 x double> poison, double %2225, i64 0
  %2238 = shufflevector <2 x double> %2237, <2 x double> poison, <2 x i32> zeroinitializer
  %2239 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2238, <2 x double> %2235, <2 x double> %2236)
  store <2 x double> %2239, ptr %658, align 8, !tbaa !15
  store double %2227, ptr %659, align 8, !tbaa !15
  %2240 = load double, ptr %2228, align 8, !tbaa !15
  %2241 = fmul double %2197, %2240
  %2242 = load double, ptr %2229, align 8, !tbaa !15
  %2243 = fmul double %2197, %2242
  %2244 = load double, ptr %2230, align 8, !tbaa !15
  %2245 = fmul double %2197, %2244
  %2246 = tail call double @llvm.fmuladd.f64(double %2182, double %2241, double %2243)
  %2247 = tail call double @llvm.fmuladd.f64(double %2246, double %2182, double %2245)
  %2248 = fmul double %2128, %2247
  %2249 = extractelement <2 x double> %2235, i64 0
  %2250 = tail call double @llvm.fmuladd.f64(double %2248, double %2249, double %2231)
  store double %2250, ptr %660, align 8, !tbaa !15
  %2251 = extractelement <2 x double> %2235, i64 1
  %2252 = tail call double @llvm.fmuladd.f64(double %2248, double %2251, double %2232)
  store double %2252, ptr %661, align 8, !tbaa !15
  %2253 = tail call double @llvm.fmuladd.f64(double %2248, double %2200, double %2233)
  store double %2253, ptr %662, align 8, !tbaa !15
  %2254 = fadd double %2210, %2241
  %2255 = fadd double %2216, %2243
  %2256 = fadd double %2222, %2245
  %2257 = tail call double @llvm.fmuladd.f64(double %2182, double %2254, double %2255)
  %2258 = tail call double @llvm.fmuladd.f64(double %2257, double %2182, double %2256)
  %2259 = insertelement <2 x double> poison, double %2258, i64 0
  %2260 = shufflevector <2 x double> %2259, <2 x double> poison, <2 x i32> zeroinitializer
  %2261 = fmul <2 x double> %2235, %2260
  %2262 = fadd <2 x double> %2166, %2261
  %2263 = load <2 x double>, ptr %2192, align 8, !tbaa !15
  %2264 = fsub <2 x double> %2263, %2261
  store <2 x double> %2264, ptr %2192, align 8, !tbaa !15
  %2265 = fmul double %2200, %2258
  %2266 = fadd double %2164, %2265
  %2267 = getelementptr inbounds %class.Vector, ptr %630, i64 %2175, i32 2
  %2268 = load double, ptr %2267, align 8, !tbaa !89
  %2269 = fsub double %2268, %2265
  store double %2269, ptr %2267, align 8, !tbaa !89
  %2270 = load double, ptr %2198, align 8, !tbaa !50
  %2271 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2272 = fsub double %2270, %2271
  %2273 = fmul double %10, %2272
  %2274 = tail call double @llvm.floor.f64(double %2273)
  %2275 = fptosi double %2274 to i32
  %2276 = icmp slt i32 %2275, 0
  %2277 = select i1 %2276, i32 %2151, i32 0
  %2278 = icmp sgt i32 %2151, %2275
  %2279 = select i1 %2278, i32 0, i32 %2151
  %2280 = sub i32 %2275, %2279
  %2281 = add i32 %2280, %2277
  %2282 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2175, i32 3
  %2283 = load i8, ptr %2282, align 2, !tbaa !52
  %2284 = zext i8 %2283 to i32
  %2285 = fmul <2 x double> %2235, %2261
  %2286 = extractelement <2 x double> %2285, i64 0
  %2287 = fmul <2 x double> %2235, %2261
  %2288 = extractelement <2 x double> %2287, i64 1
  %2289 = fmul double %2200, %2265
  %2290 = add nsw i32 %2153, %2284
  %2291 = mul i32 %2154, %2290
  %2292 = sext i32 %2291 to i64
  %2293 = getelementptr inbounds double, ptr %8, i64 %2292
  %2294 = fmul double %2286, 5.000000e-01
  %2295 = fmul double %2288, 5.000000e-01
  %2296 = fmul double %2289, 5.000000e-01
  %2297 = getelementptr inbounds double, ptr %2293, i64 %2156
  %2298 = load double, ptr %2297, align 8, !tbaa !15
  %2299 = fadd double %2294, %2298
  store double %2299, ptr %2297, align 8, !tbaa !15
  %2300 = getelementptr inbounds double, ptr %2293, i64 %2158
  %2301 = load double, ptr %2300, align 8, !tbaa !15
  %2302 = fadd double %2295, %2301
  store double %2302, ptr %2300, align 8, !tbaa !15
  %2303 = getelementptr inbounds double, ptr %2293, i64 %2160
  %2304 = load double, ptr %2303, align 8, !tbaa !15
  %2305 = fadd double %2296, %2304
  store double %2305, ptr %2303, align 8, !tbaa !15
  %2306 = mul nsw i32 %2281, 3
  %2307 = sext i32 %2306 to i64
  %2308 = getelementptr inbounds double, ptr %2293, i64 %2307
  %2309 = load double, ptr %2308, align 8, !tbaa !15
  %2310 = fadd double %2294, %2309
  store double %2310, ptr %2308, align 8, !tbaa !15
  %2311 = add nsw i32 %2306, 1
  %2312 = sext i32 %2311 to i64
  %2313 = getelementptr inbounds double, ptr %2293, i64 %2312
  %2314 = load double, ptr %2313, align 8, !tbaa !15
  %2315 = fadd double %2295, %2314
  store double %2315, ptr %2313, align 8, !tbaa !15
  %2316 = add nsw i32 %2306, 2
  %2317 = sext i32 %2316 to i64
  %2318 = getelementptr inbounds double, ptr %2293, i64 %2317
  %2319 = load double, ptr %2318, align 8, !tbaa !15
  %2320 = fadd double %2296, %2319
  store double %2320, ptr %2318, align 8, !tbaa !15
  %2321 = getelementptr inbounds double, ptr %2185, i64 12
  %2322 = load double, ptr %2321, align 8, !tbaa !15
  %2323 = getelementptr inbounds double, ptr %2185, i64 13
  %2324 = load double, ptr %2323, align 8, !tbaa !15
  %2325 = getelementptr inbounds double, ptr %2185, i64 14
  %2326 = load double, ptr %2325, align 8, !tbaa !15
  %2327 = fmul double %2197, %2322
  %2328 = fmul double %2197, %2324
  %2329 = fmul double %2197, %2326
  %2330 = tail call double @llvm.fmuladd.f64(double %2182, double %2327, double %2328)
  %2331 = tail call double @llvm.fmuladd.f64(double %2330, double %2182, double %2329)
  %2332 = fmul double %2128, %2331
  %2333 = load <2 x double>, ptr %660, align 8, !tbaa !15
  %2334 = insertelement <2 x double> poison, double %2332, i64 0
  %2335 = shufflevector <2 x double> %2334, <2 x double> poison, <2 x i32> zeroinitializer
  %2336 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2335, <2 x double> %2235, <2 x double> %2333)
  store <2 x double> %2336, ptr %660, align 8, !tbaa !15
  %2337 = load double, ptr %662, align 8, !tbaa !15
  %2338 = tail call double @llvm.fmuladd.f64(double %2332, double %2200, double %2337)
  store double %2338, ptr %662, align 8, !tbaa !15
  %2339 = insertelement <2 x double> poison, double %2331, i64 0
  %2340 = shufflevector <2 x double> %2339, <2 x double> poison, <2 x i32> zeroinitializer
  %2341 = fmul <2 x double> %2235, %2340
  %2342 = fadd <2 x double> %2167, %2341
  %2343 = load <2 x double>, ptr %2193, align 8, !tbaa !15
  %2344 = fsub <2 x double> %2343, %2341
  store <2 x double> %2344, ptr %2193, align 8, !tbaa !15
  %2345 = fmul double %2200, %2331
  %2346 = fadd double %2165, %2345
  %2347 = getelementptr inbounds %class.Vector, ptr %636, i64 %2175, i32 2
  %2348 = load double, ptr %2347, align 8, !tbaa !89
  %2349 = fsub double %2348, %2345
  store double %2349, ptr %2347, align 8, !tbaa !89
  %2350 = load double, ptr %2198, align 8, !tbaa !50
  %2351 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2352 = fsub double %2350, %2351
  %2353 = fmul double %10, %2352
  %2354 = tail call double @llvm.floor.f64(double %2353)
  %2355 = fptosi double %2354 to i32
  %2356 = icmp slt i32 %2355, 0
  %2357 = select i1 %2356, i32 %2151, i32 0
  %2358 = icmp sgt i32 %2151, %2355
  %2359 = select i1 %2358, i32 0, i32 %2151
  %2360 = sub i32 %2355, %2359
  %2361 = add i32 %2360, %2357
  %2362 = fmul double %2200, %2345
  %2363 = fmul double %2362, 5.000000e-01
  %2364 = load double, ptr %2297, align 8, !tbaa !15
  %2365 = load double, ptr %2300, align 8, !tbaa !15
  %2366 = load double, ptr %2303, align 8, !tbaa !15
  %2367 = fadd double %2363, %2366
  store double %2367, ptr %2303, align 8, !tbaa !15
  %2368 = mul nsw i32 %2361, 3
  %2369 = sext i32 %2368 to i64
  %2370 = getelementptr inbounds double, ptr %2293, i64 %2369
  %2371 = fmul <2 x double> %2235, %2341
  %2372 = fmul <2 x double> %2371, <double 5.000000e-01, double 5.000000e-01>
  %2373 = extractelement <2 x double> %2372, i64 0
  %2374 = fadd double %2373, %2364
  store double %2374, ptr %2297, align 8, !tbaa !15
  %2375 = extractelement <2 x double> %2372, i64 1
  %2376 = fadd double %2375, %2365
  store double %2376, ptr %2300, align 8, !tbaa !15
  %2377 = load <2 x double>, ptr %2370, align 8, !tbaa !15
  %2378 = fadd <2 x double> %2372, %2377
  store <2 x double> %2378, ptr %2370, align 8, !tbaa !15
  %2379 = add nsw i32 %2368, 2
  %2380 = sext i32 %2379 to i64
  %2381 = getelementptr inbounds double, ptr %2293, i64 %2380
  %2382 = load double, ptr %2381, align 8, !tbaa !15
  %2383 = fadd double %2363, %2382
  store double %2383, ptr %2381, align 8, !tbaa !15
  %2384 = add nuw nsw i64 %2163, 1
  %2385 = icmp eq i64 %2384, %2161
  br i1 %2385, label %2386, label %2162

2386:                                             ; preds = %2162, %2127
  %2387 = phi double [ 0.000000e+00, %2127 ], [ %2346, %2162 ]
  %2388 = phi double [ 0.000000e+00, %2127 ], [ %2266, %2162 ]
  %2389 = phi <2 x double> [ zeroinitializer, %2127 ], [ %2262, %2162 ]
  %2390 = phi <2 x double> [ zeroinitializer, %2127 ], [ %2342, %2162 ]
  %2391 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2392 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2391, double noundef %2145, double noundef %2146, double noundef %706, ptr noundef %46, ptr noundef %2107, i32 noundef %2106, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2393 = add nsw i32 %2392, %674
  %2394 = icmp sgt i32 %2392, 0
  br i1 %2394, label %2395, label %2646

2395:                                             ; preds = %2386
  %2396 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2397 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2398 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2399 = mul nsw i32 %2398, %709
  %2400 = mul i32 %2397, 3
  %2401 = mul nsw i32 %721, 3
  %2402 = sext i32 %2401 to i64
  %2403 = add nsw i32 %2401, 1
  %2404 = sext i32 %2403 to i64
  %2405 = add nsw i32 %2401, 2
  %2406 = sext i32 %2405 to i64
  %2407 = zext i32 %2392 to i64
  br label %2408

2408:                                             ; preds = %2395, %2408
  %2409 = phi i64 [ 0, %2395 ], [ %2644, %2408 ]
  %2410 = phi double [ %2388, %2395 ], [ %2514, %2408 ]
  %2411 = phi double [ %2387, %2395 ], [ %2606, %2408 ]
  %2412 = phi <2 x double> [ %2389, %2395 ], [ %2510, %2408 ]
  %2413 = phi <2 x double> [ %2390, %2395 ], [ %2602, %2408 ]
  %2414 = shl nuw nsw i64 %2409, 1
  %2415 = getelementptr inbounds i32, ptr %146, i64 %2414
  %2416 = load i32, ptr %2415, align 4, !tbaa !5
  %2417 = ashr i32 %2416, 14
  %2418 = add nsw i32 %2417, %39
  %2419 = getelementptr inbounds i16, ptr %99, i64 %2409
  %2420 = load i16, ptr %2419, align 2, !tbaa !45
  %2421 = zext i16 %2420 to i64
  %2422 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2421
  %2423 = getelementptr inbounds double, ptr %145, i64 %2409
  %2424 = load double, ptr %2423, align 8, !tbaa !15
  %2425 = sext i32 %2418 to i64
  %2426 = getelementptr inbounds double, ptr %2396, i64 %2425
  %2427 = load double, ptr %2426, align 8, !tbaa !15
  %2428 = fsub double %2424, %2427
  %2429 = shl nsw i32 %2418, 4
  %2430 = sext i32 %2429 to i64
  %2431 = getelementptr inbounds double, ptr %31, i64 %2430
  %2432 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2421, i32 2
  %2433 = load i16, ptr %2432, align 4, !tbaa !82
  %2434 = sext i16 %2433 to i32
  %2435 = shl nsw i32 %2434, 1
  %2436 = sext i32 %2435 to i64
  %2437 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2143, i64 %2436
  %2438 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2437, i64 1
  %2439 = getelementptr inbounds %class.Vector, ptr %630, i64 %2421
  %2440 = getelementptr inbounds %class.Vector, ptr %636, i64 %2421
  %2441 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2421, i32 1
  %2442 = load float, ptr %2441, align 8, !tbaa !81
  %2443 = fpext float %2442 to double
  %2444 = fmul double %2134, %2443
  %2445 = getelementptr inbounds %class.Vector, ptr %2422, i64 0, i32 2
  %2446 = load double, ptr %2445, align 8, !tbaa !50
  %2447 = fsub double %706, %2446
  %2448 = load double, ptr %2438, align 8, !tbaa !86
  %2449 = fmul double %33, %2448
  %2450 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2437, i64 1, i32 1
  %2451 = load double, ptr %2450, align 8, !tbaa !88
  %2452 = load double, ptr %2431, align 8, !tbaa !15
  %2453 = getelementptr inbounds double, ptr %2431, i64 2
  %2454 = load double, ptr %2453, align 8, !tbaa !15
  %2455 = fmul double %2451, %657
  %2456 = fmul double %2455, %2454
  %2457 = tail call double @llvm.fmuladd.f64(double %2449, double %2452, double %2456)
  %2458 = getelementptr inbounds double, ptr %2431, i64 1
  %2459 = load double, ptr %2458, align 8, !tbaa !15
  %2460 = getelementptr inbounds double, ptr %2431, i64 3
  %2461 = load double, ptr %2460, align 8, !tbaa !15
  %2462 = fmul double %2455, %2461
  %2463 = tail call double @llvm.fmuladd.f64(double %2449, double %2459, double %2462)
  %2464 = getelementptr inbounds double, ptr %2431, i64 4
  %2465 = load double, ptr %2464, align 8, !tbaa !15
  %2466 = getelementptr inbounds double, ptr %2431, i64 6
  %2467 = load double, ptr %2466, align 8, !tbaa !15
  %2468 = fmul double %2455, %2467
  %2469 = tail call double @llvm.fmuladd.f64(double %2449, double %2465, double %2468)
  %2470 = tail call double @llvm.fmuladd.f64(double %2428, double %2457, double %2463)
  %2471 = tail call double @llvm.fmuladd.f64(double %2470, double %2428, double %2469)
  %2472 = fmul double %2128, %2471
  %2473 = load double, ptr %659, align 8, !tbaa !15
  %2474 = tail call double @llvm.fmuladd.f64(double %2472, double %2447, double %2473)
  %2475 = fmul double %663, %2444
  %2476 = getelementptr inbounds double, ptr %2431, i64 8
  %2477 = getelementptr inbounds double, ptr %2431, i64 9
  %2478 = getelementptr inbounds double, ptr %2431, i64 10
  %2479 = load double, ptr %660, align 8, !tbaa !15
  %2480 = load double, ptr %661, align 8, !tbaa !15
  %2481 = load double, ptr %662, align 8, !tbaa !15
  %2482 = load <2 x double>, ptr %2422, align 8, !tbaa !15
  %2483 = fsub <2 x double> %703, %2482
  %2484 = load <2 x double>, ptr %658, align 8, !tbaa !15
  %2485 = insertelement <2 x double> poison, double %2472, i64 0
  %2486 = shufflevector <2 x double> %2485, <2 x double> poison, <2 x i32> zeroinitializer
  %2487 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2486, <2 x double> %2483, <2 x double> %2484)
  store <2 x double> %2487, ptr %658, align 8, !tbaa !15
  store double %2474, ptr %659, align 8, !tbaa !15
  %2488 = load double, ptr %2476, align 8, !tbaa !15
  %2489 = fmul double %2475, %2488
  %2490 = load double, ptr %2477, align 8, !tbaa !15
  %2491 = fmul double %2475, %2490
  %2492 = load double, ptr %2478, align 8, !tbaa !15
  %2493 = fmul double %2475, %2492
  %2494 = tail call double @llvm.fmuladd.f64(double %2428, double %2489, double %2491)
  %2495 = tail call double @llvm.fmuladd.f64(double %2494, double %2428, double %2493)
  %2496 = fmul double %2128, %2495
  %2497 = extractelement <2 x double> %2483, i64 0
  %2498 = tail call double @llvm.fmuladd.f64(double %2496, double %2497, double %2479)
  store double %2498, ptr %660, align 8, !tbaa !15
  %2499 = extractelement <2 x double> %2483, i64 1
  %2500 = tail call double @llvm.fmuladd.f64(double %2496, double %2499, double %2480)
  store double %2500, ptr %661, align 8, !tbaa !15
  %2501 = tail call double @llvm.fmuladd.f64(double %2496, double %2447, double %2481)
  store double %2501, ptr %662, align 8, !tbaa !15
  %2502 = fadd double %2457, %2489
  %2503 = fadd double %2463, %2491
  %2504 = fadd double %2469, %2493
  %2505 = tail call double @llvm.fmuladd.f64(double %2428, double %2502, double %2503)
  %2506 = tail call double @llvm.fmuladd.f64(double %2505, double %2428, double %2504)
  %2507 = insertelement <2 x double> poison, double %2506, i64 0
  %2508 = shufflevector <2 x double> %2507, <2 x double> poison, <2 x i32> zeroinitializer
  %2509 = fmul <2 x double> %2483, %2508
  %2510 = fadd <2 x double> %2412, %2509
  %2511 = load <2 x double>, ptr %2439, align 8, !tbaa !15
  %2512 = fsub <2 x double> %2511, %2509
  store <2 x double> %2512, ptr %2439, align 8, !tbaa !15
  %2513 = fmul double %2447, %2506
  %2514 = fadd double %2410, %2513
  %2515 = getelementptr inbounds %class.Vector, ptr %630, i64 %2421, i32 2
  %2516 = load double, ptr %2515, align 8, !tbaa !89
  %2517 = fsub double %2516, %2513
  store double %2517, ptr %2515, align 8, !tbaa !89
  %2518 = load double, ptr %2445, align 8, !tbaa !50
  %2519 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2520 = fsub double %2518, %2519
  %2521 = fmul double %10, %2520
  %2522 = tail call double @llvm.floor.f64(double %2521)
  %2523 = fptosi double %2522 to i32
  %2524 = icmp slt i32 %2523, 0
  %2525 = select i1 %2524, i32 %2397, i32 0
  %2526 = icmp sgt i32 %2397, %2523
  %2527 = select i1 %2526, i32 0, i32 %2397
  %2528 = sub i32 %2523, %2527
  %2529 = add i32 %2528, %2525
  %2530 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2421, i32 3
  %2531 = load i8, ptr %2530, align 2, !tbaa !52
  %2532 = zext i8 %2531 to i32
  %2533 = fmul <2 x double> %2483, %2509
  %2534 = extractelement <2 x double> %2533, i64 0
  %2535 = fmul <2 x double> %2483, %2509
  %2536 = extractelement <2 x double> %2535, i64 1
  %2537 = fmul double %2447, %2513
  %2538 = add nsw i32 %2399, %2532
  %2539 = mul i32 %2400, %2538
  %2540 = sext i32 %2539 to i64
  %2541 = getelementptr inbounds double, ptr %8, i64 %2540
  %2542 = fmul double %2534, 5.000000e-01
  %2543 = fmul double %2536, 5.000000e-01
  %2544 = fmul double %2537, 5.000000e-01
  %2545 = getelementptr inbounds double, ptr %2541, i64 %2402
  %2546 = load double, ptr %2545, align 8, !tbaa !15
  %2547 = fadd double %2542, %2546
  store double %2547, ptr %2545, align 8, !tbaa !15
  %2548 = getelementptr inbounds double, ptr %2541, i64 %2404
  %2549 = load double, ptr %2548, align 8, !tbaa !15
  %2550 = fadd double %2543, %2549
  store double %2550, ptr %2548, align 8, !tbaa !15
  %2551 = getelementptr inbounds double, ptr %2541, i64 %2406
  %2552 = load double, ptr %2551, align 8, !tbaa !15
  %2553 = fadd double %2544, %2552
  store double %2553, ptr %2551, align 8, !tbaa !15
  %2554 = mul nsw i32 %2529, 3
  %2555 = sext i32 %2554 to i64
  %2556 = getelementptr inbounds double, ptr %2541, i64 %2555
  %2557 = load double, ptr %2556, align 8, !tbaa !15
  %2558 = fadd double %2542, %2557
  store double %2558, ptr %2556, align 8, !tbaa !15
  %2559 = add nsw i32 %2554, 1
  %2560 = sext i32 %2559 to i64
  %2561 = getelementptr inbounds double, ptr %2541, i64 %2560
  %2562 = load double, ptr %2561, align 8, !tbaa !15
  %2563 = fadd double %2543, %2562
  store double %2563, ptr %2561, align 8, !tbaa !15
  %2564 = add nsw i32 %2554, 2
  %2565 = sext i32 %2564 to i64
  %2566 = getelementptr inbounds double, ptr %2541, i64 %2565
  %2567 = load double, ptr %2566, align 8, !tbaa !15
  %2568 = fadd double %2544, %2567
  store double %2568, ptr %2566, align 8, !tbaa !15
  %2569 = shl nsw i32 %2418, 2
  %2570 = sext i32 %2569 to i64
  %2571 = getelementptr inbounds double, ptr %32, i64 %2570
  %2572 = getelementptr inbounds double, ptr %2431, i64 12
  %2573 = load double, ptr %2572, align 8, !tbaa !15
  %2574 = getelementptr inbounds double, ptr %2431, i64 13
  %2575 = load double, ptr %2574, align 8, !tbaa !15
  %2576 = getelementptr inbounds double, ptr %2431, i64 14
  %2577 = load double, ptr %2576, align 8, !tbaa !15
  %2578 = getelementptr inbounds double, ptr %2571, i64 1
  %2579 = load double, ptr %2578, align 8, !tbaa !15
  %2580 = tail call double @llvm.fmuladd.f64(double %664, double %2579, double %2577)
  %2581 = getelementptr inbounds double, ptr %2571, i64 2
  %2582 = load double, ptr %2581, align 8, !tbaa !15
  %2583 = tail call double @llvm.fmuladd.f64(double %665, double %2582, double %2575)
  %2584 = getelementptr inbounds double, ptr %2571, i64 3
  %2585 = load double, ptr %2584, align 8, !tbaa !15
  %2586 = tail call double @llvm.fmuladd.f64(double %666, double %2585, double %2573)
  %2587 = fmul double %2444, %2586
  %2588 = fmul double %2444, %2583
  %2589 = fmul double %2444, %2580
  %2590 = tail call double @llvm.fmuladd.f64(double %2428, double %2587, double %2588)
  %2591 = tail call double @llvm.fmuladd.f64(double %2590, double %2428, double %2589)
  %2592 = fmul double %2128, %2591
  %2593 = load <2 x double>, ptr %660, align 8, !tbaa !15
  %2594 = insertelement <2 x double> poison, double %2592, i64 0
  %2595 = shufflevector <2 x double> %2594, <2 x double> poison, <2 x i32> zeroinitializer
  %2596 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2595, <2 x double> %2483, <2 x double> %2593)
  store <2 x double> %2596, ptr %660, align 8, !tbaa !15
  %2597 = load double, ptr %662, align 8, !tbaa !15
  %2598 = tail call double @llvm.fmuladd.f64(double %2592, double %2447, double %2597)
  store double %2598, ptr %662, align 8, !tbaa !15
  %2599 = insertelement <2 x double> poison, double %2591, i64 0
  %2600 = shufflevector <2 x double> %2599, <2 x double> poison, <2 x i32> zeroinitializer
  %2601 = fmul <2 x double> %2483, %2600
  %2602 = fadd <2 x double> %2413, %2601
  %2603 = load <2 x double>, ptr %2440, align 8, !tbaa !15
  %2604 = fsub <2 x double> %2603, %2601
  store <2 x double> %2604, ptr %2440, align 8, !tbaa !15
  %2605 = fmul double %2447, %2591
  %2606 = fadd double %2411, %2605
  %2607 = getelementptr inbounds %class.Vector, ptr %636, i64 %2421, i32 2
  %2608 = load double, ptr %2607, align 8, !tbaa !89
  %2609 = fsub double %2608, %2605
  store double %2609, ptr %2607, align 8, !tbaa !89
  %2610 = load double, ptr %2445, align 8, !tbaa !50
  %2611 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2612 = fsub double %2610, %2611
  %2613 = fmul double %10, %2612
  %2614 = tail call double @llvm.floor.f64(double %2613)
  %2615 = fptosi double %2614 to i32
  %2616 = icmp slt i32 %2615, 0
  %2617 = select i1 %2616, i32 %2397, i32 0
  %2618 = icmp sgt i32 %2397, %2615
  %2619 = select i1 %2618, i32 0, i32 %2397
  %2620 = sub i32 %2615, %2619
  %2621 = add i32 %2620, %2617
  %2622 = fmul double %2447, %2605
  %2623 = fmul double %2622, 5.000000e-01
  %2624 = load double, ptr %2545, align 8, !tbaa !15
  %2625 = load double, ptr %2548, align 8, !tbaa !15
  %2626 = load double, ptr %2551, align 8, !tbaa !15
  %2627 = fadd double %2623, %2626
  store double %2627, ptr %2551, align 8, !tbaa !15
  %2628 = mul nsw i32 %2621, 3
  %2629 = sext i32 %2628 to i64
  %2630 = getelementptr inbounds double, ptr %2541, i64 %2629
  %2631 = fmul <2 x double> %2483, %2601
  %2632 = fmul <2 x double> %2631, <double 5.000000e-01, double 5.000000e-01>
  %2633 = extractelement <2 x double> %2632, i64 0
  %2634 = fadd double %2633, %2624
  store double %2634, ptr %2545, align 8, !tbaa !15
  %2635 = extractelement <2 x double> %2632, i64 1
  %2636 = fadd double %2635, %2625
  store double %2636, ptr %2548, align 8, !tbaa !15
  %2637 = load <2 x double>, ptr %2630, align 8, !tbaa !15
  %2638 = fadd <2 x double> %2632, %2637
  store <2 x double> %2638, ptr %2630, align 8, !tbaa !15
  %2639 = add nsw i32 %2628, 2
  %2640 = sext i32 %2639 to i64
  %2641 = getelementptr inbounds double, ptr %2541, i64 %2640
  %2642 = load double, ptr %2641, align 8, !tbaa !15
  %2643 = fadd double %2623, %2642
  store double %2643, ptr %2641, align 8, !tbaa !15
  %2644 = add nuw nsw i64 %2409, 1
  %2645 = icmp eq i64 %2644, %2407
  br i1 %2645, label %2646, label %2408

2646:                                             ; preds = %2408, %2386
  %2647 = phi double [ %2387, %2386 ], [ %2606, %2408 ]
  %2648 = phi double [ %2388, %2386 ], [ %2514, %2408 ]
  %2649 = phi <2 x double> [ %2389, %2386 ], [ %2510, %2408 ]
  %2650 = phi <2 x double> [ %2390, %2386 ], [ %2602, %2408 ]
  %2651 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2652 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2651, double noundef %2145, double noundef %2146, double noundef %706, ptr noundef %46, ptr noundef %2109, i32 noundef %2108, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2653 = add nsw i32 %2393, %2652
  %2654 = icmp sgt i32 %2652, 0
  br i1 %2654, label %2655, label %2794

2655:                                             ; preds = %2646
  %2656 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2657 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2658 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2659 = mul nsw i32 %2658, %709
  %2660 = mul i32 %2657, 3
  %2661 = mul nsw i32 %721, 3
  %2662 = sext i32 %2661 to i64
  %2663 = add nsw i32 %2661, 1
  %2664 = sext i32 %2663 to i64
  %2665 = add nsw i32 %2661, 2
  %2666 = sext i32 %2665 to i64
  %2667 = zext i32 %2652 to i64
  br label %2668

2668:                                             ; preds = %2655, %2668
  %2669 = phi i64 [ 0, %2655 ], [ %2792, %2668 ]
  %2670 = phi double [ %2647, %2655 ], [ %2737, %2668 ]
  %2671 = phi <2 x double> [ %2650, %2655 ], [ %2733, %2668 ]
  %2672 = shl nuw nsw i64 %2669, 1
  %2673 = getelementptr inbounds i32, ptr %146, i64 %2672
  %2674 = load i32, ptr %2673, align 4, !tbaa !5
  %2675 = ashr i32 %2674, 14
  %2676 = add nsw i32 %2675, %39
  %2677 = getelementptr inbounds i16, ptr %99, i64 %2669
  %2678 = load i16, ptr %2677, align 2, !tbaa !45
  %2679 = zext i16 %2678 to i64
  %2680 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2679
  %2681 = getelementptr inbounds double, ptr %145, i64 %2669
  %2682 = load double, ptr %2681, align 8, !tbaa !15
  %2683 = sext i32 %2676 to i64
  %2684 = getelementptr inbounds double, ptr %2656, i64 %2683
  %2685 = load double, ptr %2684, align 8, !tbaa !15
  %2686 = fsub double %2682, %2685
  %2687 = shl nsw i32 %2676, 4
  %2688 = sext i32 %2687 to i64
  %2689 = getelementptr inbounds double, ptr %31, i64 %2688
  %2690 = getelementptr inbounds %class.Vector, ptr %636, i64 %2679
  %2691 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2679, i32 1
  %2692 = load float, ptr %2691, align 8, !tbaa !81
  %2693 = fpext float %2692 to double
  %2694 = fmul double %2134, %2693
  %2695 = getelementptr inbounds %class.Vector, ptr %2680, i64 0, i32 2
  %2696 = load double, ptr %2695, align 8, !tbaa !50
  %2697 = fsub double %706, %2696
  %2698 = shl nsw i32 %2676, 2
  %2699 = sext i32 %2698 to i64
  %2700 = getelementptr inbounds double, ptr %32, i64 %2699
  %2701 = getelementptr inbounds double, ptr %2689, i64 12
  %2702 = load double, ptr %2701, align 8, !tbaa !15
  %2703 = getelementptr inbounds double, ptr %2689, i64 13
  %2704 = load double, ptr %2703, align 8, !tbaa !15
  %2705 = getelementptr inbounds double, ptr %2689, i64 14
  %2706 = load double, ptr %2705, align 8, !tbaa !15
  %2707 = getelementptr inbounds double, ptr %2700, i64 1
  %2708 = load double, ptr %2707, align 8, !tbaa !15
  %2709 = tail call double @llvm.fmuladd.f64(double %2708, double 2.000000e+00, double %2706)
  %2710 = getelementptr inbounds double, ptr %2700, i64 2
  %2711 = load double, ptr %2710, align 8, !tbaa !15
  %2712 = tail call double @llvm.fmuladd.f64(double %2711, double 4.000000e+00, double %2704)
  %2713 = getelementptr inbounds double, ptr %2700, i64 3
  %2714 = load double, ptr %2713, align 8, !tbaa !15
  %2715 = tail call double @llvm.fmuladd.f64(double %2714, double 6.000000e+00, double %2702)
  %2716 = fmul double %2694, %2715
  %2717 = fmul double %2694, %2712
  %2718 = fmul double %2694, %2709
  %2719 = tail call double @llvm.fmuladd.f64(double %2686, double %2716, double %2717)
  %2720 = tail call double @llvm.fmuladd.f64(double %2719, double %2686, double %2718)
  %2721 = fmul double %2128, %2720
  %2722 = load double, ptr %662, align 8, !tbaa !15
  %2723 = tail call double @llvm.fmuladd.f64(double %2721, double %2697, double %2722)
  %2724 = load <2 x double>, ptr %2680, align 8, !tbaa !15
  %2725 = fsub <2 x double> %703, %2724
  %2726 = load <2 x double>, ptr %660, align 8, !tbaa !15
  %2727 = insertelement <2 x double> poison, double %2721, i64 0
  %2728 = shufflevector <2 x double> %2727, <2 x double> poison, <2 x i32> zeroinitializer
  %2729 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2728, <2 x double> %2725, <2 x double> %2726)
  store <2 x double> %2729, ptr %660, align 8, !tbaa !15
  store double %2723, ptr %662, align 8, !tbaa !15
  %2730 = insertelement <2 x double> poison, double %2720, i64 0
  %2731 = shufflevector <2 x double> %2730, <2 x double> poison, <2 x i32> zeroinitializer
  %2732 = fmul <2 x double> %2725, %2731
  %2733 = fadd <2 x double> %2671, %2732
  %2734 = load <2 x double>, ptr %2690, align 8, !tbaa !15
  %2735 = fsub <2 x double> %2734, %2732
  store <2 x double> %2735, ptr %2690, align 8, !tbaa !15
  %2736 = fmul double %2697, %2720
  %2737 = fadd double %2670, %2736
  %2738 = getelementptr inbounds %class.Vector, ptr %636, i64 %2679, i32 2
  %2739 = load double, ptr %2738, align 8, !tbaa !89
  %2740 = fsub double %2739, %2736
  store double %2740, ptr %2738, align 8, !tbaa !89
  %2741 = load double, ptr %2695, align 8, !tbaa !50
  %2742 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2743 = fsub double %2741, %2742
  %2744 = fmul double %10, %2743
  %2745 = tail call double @llvm.floor.f64(double %2744)
  %2746 = fptosi double %2745 to i32
  %2747 = icmp slt i32 %2746, 0
  %2748 = select i1 %2747, i32 %2657, i32 0
  %2749 = icmp sgt i32 %2657, %2746
  %2750 = select i1 %2749, i32 0, i32 %2657
  %2751 = sub i32 %2746, %2750
  %2752 = add i32 %2751, %2748
  %2753 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2679, i32 3
  %2754 = load i8, ptr %2753, align 2, !tbaa !52
  %2755 = zext i8 %2754 to i32
  %2756 = fmul <2 x double> %2725, %2732
  %2757 = extractelement <2 x double> %2756, i64 0
  %2758 = fmul <2 x double> %2725, %2732
  %2759 = extractelement <2 x double> %2758, i64 1
  %2760 = fmul double %2697, %2736
  %2761 = add nsw i32 %2659, %2755
  %2762 = mul i32 %2660, %2761
  %2763 = sext i32 %2762 to i64
  %2764 = getelementptr inbounds double, ptr %8, i64 %2763
  %2765 = fmul double %2757, 5.000000e-01
  %2766 = fmul double %2759, 5.000000e-01
  %2767 = fmul double %2760, 5.000000e-01
  %2768 = getelementptr inbounds double, ptr %2764, i64 %2662
  %2769 = load double, ptr %2768, align 8, !tbaa !15
  %2770 = fadd double %2765, %2769
  store double %2770, ptr %2768, align 8, !tbaa !15
  %2771 = getelementptr inbounds double, ptr %2764, i64 %2664
  %2772 = load double, ptr %2771, align 8, !tbaa !15
  %2773 = fadd double %2766, %2772
  store double %2773, ptr %2771, align 8, !tbaa !15
  %2774 = getelementptr inbounds double, ptr %2764, i64 %2666
  %2775 = load double, ptr %2774, align 8, !tbaa !15
  %2776 = fadd double %2767, %2775
  store double %2776, ptr %2774, align 8, !tbaa !15
  %2777 = mul nsw i32 %2752, 3
  %2778 = sext i32 %2777 to i64
  %2779 = getelementptr inbounds double, ptr %2764, i64 %2778
  %2780 = load double, ptr %2779, align 8, !tbaa !15
  %2781 = fadd double %2765, %2780
  store double %2781, ptr %2779, align 8, !tbaa !15
  %2782 = add nsw i32 %2777, 1
  %2783 = sext i32 %2782 to i64
  %2784 = getelementptr inbounds double, ptr %2764, i64 %2783
  %2785 = load double, ptr %2784, align 8, !tbaa !15
  %2786 = fadd double %2766, %2785
  store double %2786, ptr %2784, align 8, !tbaa !15
  %2787 = add nsw i32 %2777, 2
  %2788 = sext i32 %2787 to i64
  %2789 = getelementptr inbounds double, ptr %2764, i64 %2788
  %2790 = load double, ptr %2789, align 8, !tbaa !15
  %2791 = fadd double %2767, %2790
  store double %2791, ptr %2789, align 8, !tbaa !15
  %2792 = add nuw nsw i64 %2669, 1
  %2793 = icmp eq i64 %2792, %2667
  br i1 %2793, label %2794, label %2668

2794:                                             ; preds = %2668, %2646
  %2795 = phi double [ %2647, %2646 ], [ %2737, %2668 ]
  %2796 = phi <2 x double> [ %2650, %2646 ], [ %2733, %2668 ]
  %2797 = getelementptr inbounds %class.Vector, ptr %630, i64 %685
  %2798 = load <2 x double>, ptr %2797, align 8, !tbaa !15
  %2799 = fadd <2 x double> %2649, %2798
  store <2 x double> %2799, ptr %2797, align 8, !tbaa !15
  %2800 = getelementptr inbounds %class.Vector, ptr %630, i64 %685, i32 2
  %2801 = load double, ptr %2800, align 8, !tbaa !89
  %2802 = fadd double %2648, %2801
  store double %2802, ptr %2800, align 8, !tbaa !89
  %2803 = getelementptr inbounds %class.Vector, ptr %636, i64 %685
  %2804 = load <2 x double>, ptr %2803, align 8, !tbaa !15
  %2805 = fadd <2 x double> %2796, %2804
  store <2 x double> %2805, ptr %2803, align 8, !tbaa !15
  %2806 = getelementptr inbounds %class.Vector, ptr %636, i64 %685, i32 2
  %2807 = load double, ptr %2806, align 8, !tbaa !89
  %2808 = fadd double %2795, %2807
  store double %2808, ptr %2806, align 8, !tbaa !89
  br label %2809

2809:                                             ; preds = %2794, %1323, %1377, %696
  %2810 = phi i32 [ %697, %696 ], [ %701, %2794 ], [ %701, %1323 ], [ %701, %1377 ]
  %2811 = phi i32 [ %683, %696 ], [ %2112, %2794 ], [ %1273, %1323 ], [ %1273, %1377 ]
  %2812 = phi i32 [ %682, %696 ], [ %2113, %2794 ], [ %1274, %1323 ], [ %1274, %1377 ]
  %2813 = phi i32 [ %681, %696 ], [ %2114, %2794 ], [ %1275, %1323 ], [ %1275, %1377 ]
  %2814 = phi i32 [ %680, %696 ], [ %2115, %2794 ], [ %1276, %1323 ], [ %1276, %1377 ]
  %2815 = phi i32 [ %679, %696 ], [ %723, %2794 ], [ %723, %1323 ], [ %723, %1377 ]
  %2816 = phi ptr [ %678, %696 ], [ %2116, %2794 ], [ %969, %1323 ], [ %969, %1377 ]
  %2817 = phi ptr [ %677, %696 ], [ %2117, %2794 ], [ %970, %1323 ], [ %970, %1377 ]
  %2818 = phi ptr [ %676, %696 ], [ %2118, %2794 ], [ %971, %1323 ], [ %971, %1377 ]
  %2819 = phi i32 [ %699, %696 ], [ %675, %2794 ], [ %675, %1323 ], [ %675, %1377 ]
  %2820 = phi i32 [ %674, %696 ], [ %2653, %2794 ], [ %674, %1323 ], [ %674, %1377 ]
  %2821 = add nsw i32 %2819, 1
  %2822 = icmp slt i32 %2821, %640
  br i1 %2822, label %673, label %2823

2823:                                             ; preds = %2809, %624
  %2824 = phi ptr [ null, %624 ], [ %2818, %2809 ]
  %2825 = phi i32 [ 0, %624 ], [ %2820, %2809 ]
  %2826 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2827 = load ptr, ptr %2826, align 8, !tbaa !24
  %2828 = icmp sgt i32 %41, 0
  br i1 %2828, label %2829, label %2870

2829:                                             ; preds = %2823
  %2830 = zext i32 %41 to i64
  br label %2838

2831:                                             ; preds = %2838
  %2832 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2833 = load ptr, ptr %2832, align 8, !tbaa !24
  %2834 = extractelement <2 x double> %2867, i64 0
  %2835 = extractelement <2 x double> %2867, i64 1
  br i1 %2828, label %2836, label %2870

2836:                                             ; preds = %2831
  %2837 = zext i32 %41 to i64
  br label %2909

2838:                                             ; preds = %2829, %2838
  %2839 = phi i64 [ 0, %2829 ], [ %2868, %2838 ]
  %2840 = phi <4 x double> [ zeroinitializer, %2829 ], [ %2861, %2838 ]
  %2841 = phi <2 x double> [ zeroinitializer, %2829 ], [ %2867, %2838 ]
  %2842 = getelementptr inbounds %class.Vector, ptr %630, i64 %2839
  %2843 = getelementptr inbounds %class.Vector, ptr %2827, i64 %2839
  %2844 = load <2 x double>, ptr %2842, align 8, !tbaa !15
  %2845 = load <2 x double>, ptr %2843, align 8, !tbaa !15
  %2846 = fadd <2 x double> %2844, %2845
  store <2 x double> %2846, ptr %2843, align 8, !tbaa !15
  %2847 = getelementptr inbounds %class.Vector, ptr %630, i64 %2839, i32 2
  %2848 = load double, ptr %2847, align 8, !tbaa !89
  %2849 = getelementptr inbounds %class.Vector, ptr %2827, i64 %2839, i32 2
  %2850 = load double, ptr %2849, align 8, !tbaa !89
  %2851 = fadd double %2848, %2850
  store double %2851, ptr %2849, align 8, !tbaa !89
  %2852 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2839
  %2853 = load <2 x double>, ptr %2852, align 8, !tbaa !15
  %2854 = getelementptr inbounds %class.Vector, ptr %2852, i64 0, i32 2
  %2855 = load double, ptr %2854, align 8, !tbaa !50
  %2856 = load <2 x double>, ptr %2842, align 8, !tbaa !15
  %2857 = shufflevector <2 x double> %2856, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %2858 = shufflevector <2 x double> %2853, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2859 = insertelement <4 x double> %2858, double %2855, i64 2
  %2860 = shufflevector <4 x double> %2859, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2861 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2857, <4 x double> %2860, <4 x double> %2840)
  %2862 = load double, ptr %2847, align 8, !tbaa !89
  %2863 = shufflevector <2 x double> %2856, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2864 = insertelement <2 x double> %2863, double %2862, i64 1
  %2865 = insertelement <2 x double> poison, double %2855, i64 0
  %2866 = shufflevector <2 x double> %2865, <2 x double> poison, <2 x i32> zeroinitializer
  %2867 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2864, <2 x double> %2866, <2 x double> %2841)
  %2868 = add nuw nsw i64 %2839, 1
  %2869 = icmp eq i64 %2868, %2830
  br i1 %2869, label %2831, label %2838

2870:                                             ; preds = %2909, %2823, %2831
  %2871 = phi double [ %2834, %2831 ], [ 0.000000e+00, %2823 ], [ %2834, %2909 ]
  %2872 = phi double [ %2835, %2831 ], [ 0.000000e+00, %2823 ], [ %2835, %2909 ]
  %2873 = phi <4 x double> [ zeroinitializer, %2831 ], [ zeroinitializer, %2823 ], [ %2939, %2909 ]
  %2874 = phi <4 x double> [ %2861, %2831 ], [ zeroinitializer, %2823 ], [ %2861, %2909 ]
  %2875 = phi <2 x double> [ zeroinitializer, %2831 ], [ zeroinitializer, %2823 ], [ %2934, %2909 ]
  %2876 = sitofp i32 %2825 to double
  %2877 = getelementptr inbounds double, ptr %6, i64 22
  %2878 = load double, ptr %2877, align 8, !tbaa !15
  %2879 = fadd double %2878, %2876
  store double %2879, ptr %2877, align 8, !tbaa !15
  %2880 = getelementptr inbounds double, ptr %6, i64 3
  %2881 = load <4 x double>, ptr %2880, align 8, !tbaa !15
  %2882 = shufflevector <4 x double> %2874, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2883 = fadd <4 x double> %2882, %2881
  store <4 x double> %2883, ptr %2880, align 8, !tbaa !15
  %2884 = getelementptr inbounds double, ptr %6, i64 7
  %2885 = load <4 x double>, ptr %2884, align 8, !tbaa !15
  %2886 = shufflevector <4 x double> %2874, <4 x double> poison, <4 x i32> <i32 3, i32 poison, i32 2, i32 poison>
  %2887 = insertelement <4 x double> %2886, double %2871, i64 1
  %2888 = shufflevector <4 x double> %2887, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2889 = fadd <4 x double> %2888, %2885
  store <4 x double> %2889, ptr %2884, align 8, !tbaa !15
  %2890 = getelementptr inbounds double, ptr %6, i64 11
  %2891 = load double, ptr %2890, align 8, !tbaa !15
  %2892 = fadd double %2872, %2891
  store double %2892, ptr %2890, align 8, !tbaa !15
  %2893 = getelementptr inbounds double, ptr %6, i64 12
  %2894 = load <4 x double>, ptr %2893, align 8, !tbaa !15
  %2895 = shufflevector <2 x double> %2875, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2896 = shufflevector <4 x double> %2895, <4 x double> %2873, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2897 = shufflevector <4 x double> %2896, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2898 = fadd <4 x double> %2897, %2894
  store <4 x double> %2898, ptr %2893, align 8, !tbaa !15
  %2899 = getelementptr inbounds double, ptr %6, i64 16
  %2900 = load <4 x double>, ptr %2899, align 8, !tbaa !15
  %2901 = shufflevector <4 x double> %2873, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2902 = shufflevector <4 x double> %2901, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2903 = fadd <4 x double> %2902, %2900
  store <4 x double> %2903, ptr %2899, align 8, !tbaa !15
  %2904 = getelementptr inbounds double, ptr %6, i64 20
  %2905 = load double, ptr %2904, align 8, !tbaa !15
  %2906 = extractelement <4 x double> %2873, i64 0
  %2907 = fadd double %2906, %2905
  store double %2907, ptr %2904, align 8, !tbaa !15
  %2908 = icmp eq ptr %2824, null
  br i1 %2908, label %2943, label %2942

2909:                                             ; preds = %2836, %2909
  %2910 = phi i64 [ 0, %2836 ], [ %2940, %2909 ]
  %2911 = phi <4 x double> [ zeroinitializer, %2836 ], [ %2939, %2909 ]
  %2912 = phi <2 x double> [ zeroinitializer, %2836 ], [ %2934, %2909 ]
  %2913 = getelementptr inbounds %class.Vector, ptr %636, i64 %2910
  %2914 = getelementptr inbounds %class.Vector, ptr %2833, i64 %2910
  %2915 = getelementptr inbounds %class.Vector, ptr %636, i64 %2910, i32 1
  %2916 = load <2 x double>, ptr %2913, align 8, !tbaa !15
  %2917 = load <2 x double>, ptr %2914, align 8, !tbaa !15
  %2918 = fadd <2 x double> %2916, %2917
  store <2 x double> %2918, ptr %2914, align 8, !tbaa !15
  %2919 = getelementptr inbounds %class.Vector, ptr %636, i64 %2910, i32 2
  %2920 = load double, ptr %2919, align 8, !tbaa !89
  %2921 = getelementptr inbounds %class.Vector, ptr %2833, i64 %2910, i32 2
  %2922 = load double, ptr %2921, align 8, !tbaa !89
  %2923 = fadd double %2920, %2922
  store double %2923, ptr %2921, align 8, !tbaa !89
  %2924 = load double, ptr %2913, align 8, !tbaa !193
  %2925 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2910
  %2926 = load double, ptr %2925, align 8, !tbaa !69
  %2927 = getelementptr inbounds %class.Vector, ptr %2925, i64 0, i32 1
  %2928 = load <2 x double>, ptr %2927, align 8, !tbaa !15
  %2929 = shufflevector <2 x double> %2928, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2930 = insertelement <2 x double> poison, double %2924, i64 0
  %2931 = shufflevector <2 x double> %2930, <2 x double> poison, <2 x i32> zeroinitializer
  %2932 = shufflevector <2 x double> %2928, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2933 = insertelement <2 x double> %2932, double %2926, i64 0
  %2934 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2931, <2 x double> %2933, <2 x double> %2912)
  %2935 = load <2 x double>, ptr %2915, align 8, !tbaa !15
  %2936 = shufflevector <2 x double> %2935, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2937 = insertelement <4 x double> %2936, double %2924, i64 3
  %2938 = shufflevector <4 x double> %2937, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2939 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2938, <4 x double> %2929, <4 x double> %2911)
  %2940 = add nuw nsw i64 %2910, 1
  %2941 = icmp eq i64 %2940, %2837
  br i1 %2941, label %2870, label %2909

2942:                                             ; preds = %2870
  tail call void @_ZdaPv(ptr noundef nonnull %2824) #10
  br label %2943

2943:                                             ; preds = %2870, %2942, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil32calc_self_energy_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %3039

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %32 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %34 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %35 = fsub double 1.000000e+00, %34
  %36 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %37 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %38 = shl i32 %37, 6
  %39 = add i32 %38, -65472
  %40 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !5
  %42 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %43 = load i32, ptr %42, align 4, !tbaa !5
  %44 = load ptr, ptr %0, align 8, !tbaa !24
  %45 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !24
  %49 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !24
  %51 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %52 = load ptr, ptr %51, align 8, !tbaa !25
  %53 = add nsw i32 %43, 5
  %54 = getelementptr inbounds %class.ResizeArray, ptr %52, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !26
  %56 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 2
  %57 = load i32, ptr %56, align 8, !tbaa !28
  %58 = icmp slt i32 %57, %53
  br i1 %58, label %59, label %97

59:                                               ; preds = %4
  %60 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 3
  %61 = load i32, ptr %60, align 4, !tbaa !31
  %62 = icmp slt i32 %61, %53
  br i1 %62, label %63, label %97

63:                                               ; preds = %59
  %64 = sitofp i32 %61 to float
  %65 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 5
  %66 = load float, ptr %65, align 4, !tbaa !32
  %67 = fmul float %66, %64
  %68 = fptosi float %67 to i32
  %69 = tail call i32 @llvm.smax.i32(i32 %68, i32 %53)
  %70 = sub nsw i32 %69, %61
  %71 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 6
  %72 = load i32, ptr %71, align 8, !tbaa !33
  %73 = icmp slt i32 %70, %72
  %74 = add nsw i32 %72, %61
  %75 = select i1 %73, i32 %74, i32 %69
  %76 = sext i32 %75 to i64
  %77 = shl nsw i64 %76, 1
  %78 = add nsw i64 %77, 31
  %79 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %78) #9
  %80 = getelementptr inbounds i8, ptr %79, i64 31
  %81 = ptrtoint ptr %80 to i64
  %82 = and i64 %81, 31
  %83 = sub nsw i64 0, %82
  %84 = getelementptr inbounds i8, ptr %80, i64 %83
  %85 = load ptr, ptr %55, align 8, !tbaa !34
  %86 = sext i32 %57 to i64
  %87 = shl nsw i64 %86, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %84, ptr align 1 %85, i64 %87, i1 false)
  %88 = icmp eq i32 %61, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %63
  %90 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !35
  %92 = icmp eq ptr %91, null
  br i1 %92, label %94, label %93

93:                                               ; preds = %89
  tail call void @_ZdaPv(ptr noundef nonnull %91) #10
  br label %94

94:                                               ; preds = %93, %89, %63
  %95 = getelementptr inbounds %class.ResizeArrayRaw, ptr %55, i64 0, i32 1
  store ptr %79, ptr %95, align 8, !tbaa !35
  store ptr %84, ptr %55, align 8, !tbaa !34
  store i32 %75, ptr %60, align 4, !tbaa !31
  %96 = load ptr, ptr %54, align 8, !tbaa !26
  br label %97

97:                                               ; preds = %4, %59, %94
  %98 = phi ptr [ %55, %4 ], [ %55, %59 ], [ %96, %94 ]
  store i32 %53, ptr %56, align 8, !tbaa !28
  %99 = load ptr, ptr %98, align 8, !tbaa !34
  %100 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 1, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !36
  %102 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 2
  %103 = load i32, ptr %102, align 8, !tbaa !38
  %104 = icmp slt i32 %103, %53
  br i1 %104, label %105, label %143

105:                                              ; preds = %97
  %106 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 3
  %107 = load i32, ptr %106, align 4, !tbaa !40
  %108 = icmp slt i32 %107, %53
  br i1 %108, label %109, label %143

109:                                              ; preds = %105
  %110 = sitofp i32 %107 to float
  %111 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 5
  %112 = load float, ptr %111, align 4, !tbaa !41
  %113 = fmul float %112, %110
  %114 = fptosi float %113 to i32
  %115 = tail call i32 @llvm.smax.i32(i32 %114, i32 %53)
  %116 = sub nsw i32 %115, %107
  %117 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 6
  %118 = load i32, ptr %117, align 8, !tbaa !42
  %119 = icmp slt i32 %116, %118
  %120 = add nsw i32 %118, %107
  %121 = select i1 %119, i32 %120, i32 %115
  %122 = sext i32 %121 to i64
  %123 = shl nsw i64 %122, 3
  %124 = add nsw i64 %123, 31
  %125 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %124) #9
  %126 = getelementptr inbounds i8, ptr %125, i64 31
  %127 = ptrtoint ptr %126 to i64
  %128 = and i64 %127, 31
  %129 = sub nsw i64 0, %128
  %130 = getelementptr inbounds i8, ptr %126, i64 %129
  %131 = load ptr, ptr %101, align 8, !tbaa !43
  %132 = sext i32 %103 to i64
  %133 = shl nsw i64 %132, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %130, ptr align 1 %131, i64 %133, i1 false)
  %134 = icmp eq i32 %107, 0
  br i1 %134, label %140, label %135

135:                                              ; preds = %109
  %136 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !44
  %138 = icmp eq ptr %137, null
  br i1 %138, label %140, label %139

139:                                              ; preds = %135
  tail call void @_ZdaPv(ptr noundef nonnull %137) #10
  br label %140

140:                                              ; preds = %139, %135, %109
  %141 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %101, i64 0, i32 1
  store ptr %125, ptr %141, align 8, !tbaa !44
  store ptr %130, ptr %101, align 8, !tbaa !43
  store i32 %121, ptr %106, align 4, !tbaa !40
  %142 = load ptr, ptr %100, align 8, !tbaa !36
  br label %143

143:                                              ; preds = %97, %105, %140
  %144 = phi ptr [ %101, %97 ], [ %101, %105 ], [ %142, %140 ]
  store i32 %53, ptr %102, align 8, !tbaa !38
  %145 = load ptr, ptr %144, align 8, !tbaa !43
  %146 = getelementptr inbounds i32, ptr %145, i64 1
  %147 = icmp eq i32 %14, 0
  %148 = icmp ne i32 %16, 0
  %149 = select i1 %147, i1 %148, i1 false
  %150 = select i1 %149, i32 0, i32 %53
  %151 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 2, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !26
  %153 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 2
  %154 = load i32, ptr %153, align 8, !tbaa !28
  %155 = icmp slt i32 %154, %150
  br i1 %155, label %156, label %194

156:                                              ; preds = %143
  %157 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 3
  %158 = load i32, ptr %157, align 4, !tbaa !31
  %159 = icmp slt i32 %158, %150
  br i1 %159, label %160, label %194

160:                                              ; preds = %156
  %161 = sitofp i32 %158 to float
  %162 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 5
  %163 = load float, ptr %162, align 4, !tbaa !32
  %164 = fmul float %163, %161
  %165 = fptosi float %164 to i32
  %166 = tail call i32 @llvm.smax.i32(i32 %165, i32 %150)
  %167 = sub nsw i32 %166, %158
  %168 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 6
  %169 = load i32, ptr %168, align 8, !tbaa !33
  %170 = icmp slt i32 %167, %169
  %171 = add nsw i32 %169, %158
  %172 = select i1 %170, i32 %171, i32 %166
  %173 = sext i32 %172 to i64
  %174 = shl nsw i64 %173, 1
  %175 = add nsw i64 %174, 31
  %176 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %175) #9
  %177 = getelementptr inbounds i8, ptr %176, i64 31
  %178 = ptrtoint ptr %177 to i64
  %179 = and i64 %178, 31
  %180 = sub nsw i64 0, %179
  %181 = getelementptr inbounds i8, ptr %177, i64 %180
  %182 = load ptr, ptr %152, align 8, !tbaa !34
  %183 = sext i32 %154 to i64
  %184 = shl nsw i64 %183, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %181, ptr align 1 %182, i64 %184, i1 false)
  %185 = icmp eq i32 %158, 0
  br i1 %185, label %191, label %186

186:                                              ; preds = %160
  %187 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  %188 = load ptr, ptr %187, align 8, !tbaa !35
  %189 = icmp eq ptr %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZdaPv(ptr noundef nonnull %188) #10
  br label %191

191:                                              ; preds = %190, %186, %160
  %192 = getelementptr inbounds %class.ResizeArrayRaw, ptr %152, i64 0, i32 1
  store ptr %176, ptr %192, align 8, !tbaa !35
  store ptr %181, ptr %152, align 8, !tbaa !34
  store i32 %172, ptr %157, align 4, !tbaa !31
  %193 = load ptr, ptr %151, align 8, !tbaa !26
  br label %194

194:                                              ; preds = %143, %156, %191
  %195 = phi ptr [ %152, %143 ], [ %152, %156 ], [ %193, %191 ]
  store i32 %150, ptr %153, align 8, !tbaa !28
  %196 = load ptr, ptr %195, align 8, !tbaa !34
  %197 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 3, i32 1
  %198 = load ptr, ptr %197, align 8, !tbaa !26
  %199 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 2
  %200 = load i32, ptr %199, align 8, !tbaa !28
  %201 = icmp slt i32 %200, %150
  br i1 %201, label %202, label %240

202:                                              ; preds = %194
  %203 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 3
  %204 = load i32, ptr %203, align 4, !tbaa !31
  %205 = icmp slt i32 %204, %150
  br i1 %205, label %206, label %240

206:                                              ; preds = %202
  %207 = sitofp i32 %204 to float
  %208 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 5
  %209 = load float, ptr %208, align 4, !tbaa !32
  %210 = fmul float %209, %207
  %211 = fptosi float %210 to i32
  %212 = tail call i32 @llvm.smax.i32(i32 %211, i32 %150)
  %213 = sub nsw i32 %212, %204
  %214 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 6
  %215 = load i32, ptr %214, align 8, !tbaa !33
  %216 = icmp slt i32 %213, %215
  %217 = add nsw i32 %215, %204
  %218 = select i1 %216, i32 %217, i32 %212
  %219 = sext i32 %218 to i64
  %220 = shl nsw i64 %219, 1
  %221 = add nsw i64 %220, 31
  %222 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %221) #9
  %223 = getelementptr inbounds i8, ptr %222, i64 31
  %224 = ptrtoint ptr %223 to i64
  %225 = and i64 %224, 31
  %226 = sub nsw i64 0, %225
  %227 = getelementptr inbounds i8, ptr %223, i64 %226
  %228 = load ptr, ptr %198, align 8, !tbaa !34
  %229 = sext i32 %200 to i64
  %230 = shl nsw i64 %229, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %227, ptr align 1 %228, i64 %230, i1 false)
  %231 = icmp eq i32 %204, 0
  br i1 %231, label %237, label %232

232:                                              ; preds = %206
  %233 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  %234 = load ptr, ptr %233, align 8, !tbaa !35
  %235 = icmp eq ptr %234, null
  br i1 %235, label %237, label %236

236:                                              ; preds = %232
  tail call void @_ZdaPv(ptr noundef nonnull %234) #10
  br label %237

237:                                              ; preds = %236, %232, %206
  %238 = getelementptr inbounds %class.ResizeArrayRaw, ptr %198, i64 0, i32 1
  store ptr %222, ptr %238, align 8, !tbaa !35
  store ptr %227, ptr %198, align 8, !tbaa !34
  store i32 %218, ptr %203, align 4, !tbaa !31
  %239 = load ptr, ptr %197, align 8, !tbaa !26
  br label %240

240:                                              ; preds = %194, %202, %237
  %241 = phi ptr [ %198, %194 ], [ %198, %202 ], [ %239, %237 ]
  store i32 %150, ptr %199, align 8, !tbaa !28
  %242 = load ptr, ptr %241, align 8, !tbaa !34
  %243 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 4, i32 1
  %244 = load ptr, ptr %243, align 8, !tbaa !26
  %245 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 2
  %246 = load i32, ptr %245, align 8, !tbaa !28
  %247 = icmp slt i32 %246, %150
  br i1 %247, label %248, label %286

248:                                              ; preds = %240
  %249 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 3
  %250 = load i32, ptr %249, align 4, !tbaa !31
  %251 = icmp slt i32 %250, %150
  br i1 %251, label %252, label %286

252:                                              ; preds = %248
  %253 = sitofp i32 %250 to float
  %254 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 5
  %255 = load float, ptr %254, align 4, !tbaa !32
  %256 = fmul float %255, %253
  %257 = fptosi float %256 to i32
  %258 = tail call i32 @llvm.smax.i32(i32 %257, i32 %150)
  %259 = sub nsw i32 %258, %250
  %260 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 6
  %261 = load i32, ptr %260, align 8, !tbaa !33
  %262 = icmp slt i32 %259, %261
  %263 = add nsw i32 %261, %250
  %264 = select i1 %262, i32 %263, i32 %258
  %265 = sext i32 %264 to i64
  %266 = shl nsw i64 %265, 1
  %267 = add nsw i64 %266, 31
  %268 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %267) #9
  %269 = getelementptr inbounds i8, ptr %268, i64 31
  %270 = ptrtoint ptr %269 to i64
  %271 = and i64 %270, 31
  %272 = sub nsw i64 0, %271
  %273 = getelementptr inbounds i8, ptr %269, i64 %272
  %274 = load ptr, ptr %244, align 8, !tbaa !34
  %275 = sext i32 %246 to i64
  %276 = shl nsw i64 %275, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %273, ptr align 1 %274, i64 %276, i1 false)
  %277 = icmp eq i32 %250, 0
  br i1 %277, label %283, label %278

278:                                              ; preds = %252
  %279 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !35
  %281 = icmp eq ptr %280, null
  br i1 %281, label %283, label %282

282:                                              ; preds = %278
  tail call void @_ZdaPv(ptr noundef nonnull %280) #10
  br label %283

283:                                              ; preds = %282, %278, %252
  %284 = getelementptr inbounds %class.ResizeArrayRaw, ptr %244, i64 0, i32 1
  store ptr %268, ptr %284, align 8, !tbaa !35
  store ptr %273, ptr %244, align 8, !tbaa !34
  store i32 %264, ptr %249, align 4, !tbaa !31
  %285 = load ptr, ptr %243, align 8, !tbaa !26
  br label %286

286:                                              ; preds = %240, %248, %283
  %287 = phi ptr [ %244, %240 ], [ %244, %248 ], [ %285, %283 ]
  store i32 %150, ptr %245, align 8, !tbaa !28
  %288 = load ptr, ptr %287, align 8, !tbaa !34
  %289 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 5, i32 1
  %290 = load ptr, ptr %289, align 8, !tbaa !26
  %291 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 2
  %292 = load i32, ptr %291, align 8, !tbaa !28
  %293 = icmp slt i32 %292, %150
  br i1 %293, label %294, label %332

294:                                              ; preds = %286
  %295 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 3
  %296 = load i32, ptr %295, align 4, !tbaa !31
  %297 = icmp slt i32 %296, %150
  br i1 %297, label %298, label %332

298:                                              ; preds = %294
  %299 = sitofp i32 %296 to float
  %300 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 5
  %301 = load float, ptr %300, align 4, !tbaa !32
  %302 = fmul float %301, %299
  %303 = fptosi float %302 to i32
  %304 = tail call i32 @llvm.smax.i32(i32 %303, i32 %150)
  %305 = sub nsw i32 %304, %296
  %306 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 6
  %307 = load i32, ptr %306, align 8, !tbaa !33
  %308 = icmp slt i32 %305, %307
  %309 = add nsw i32 %307, %296
  %310 = select i1 %308, i32 %309, i32 %304
  %311 = sext i32 %310 to i64
  %312 = shl nsw i64 %311, 1
  %313 = add nsw i64 %312, 31
  %314 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %313) #9
  %315 = getelementptr inbounds i8, ptr %314, i64 31
  %316 = ptrtoint ptr %315 to i64
  %317 = and i64 %316, 31
  %318 = sub nsw i64 0, %317
  %319 = getelementptr inbounds i8, ptr %315, i64 %318
  %320 = load ptr, ptr %290, align 8, !tbaa !34
  %321 = sext i32 %292 to i64
  %322 = shl nsw i64 %321, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %319, ptr align 1 %320, i64 %322, i1 false)
  %323 = icmp eq i32 %296, 0
  br i1 %323, label %329, label %324

324:                                              ; preds = %298
  %325 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !35
  %327 = icmp eq ptr %326, null
  br i1 %327, label %329, label %328

328:                                              ; preds = %324
  tail call void @_ZdaPv(ptr noundef nonnull %326) #10
  br label %329

329:                                              ; preds = %328, %324, %298
  %330 = getelementptr inbounds %class.ResizeArrayRaw, ptr %290, i64 0, i32 1
  store ptr %314, ptr %330, align 8, !tbaa !35
  store ptr %319, ptr %290, align 8, !tbaa !34
  store i32 %310, ptr %295, align 4, !tbaa !31
  %331 = load ptr, ptr %289, align 8, !tbaa !26
  br label %332

332:                                              ; preds = %286, %294, %329
  %333 = phi ptr [ %290, %286 ], [ %290, %294 ], [ %331, %329 ]
  store i32 %150, ptr %291, align 8, !tbaa !28
  %334 = load ptr, ptr %333, align 8, !tbaa !34
  %335 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 6, i32 1
  %336 = load ptr, ptr %335, align 8, !tbaa !26
  %337 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 2
  %338 = load i32, ptr %337, align 8, !tbaa !28
  %339 = icmp slt i32 %338, %150
  br i1 %339, label %340, label %378

340:                                              ; preds = %332
  %341 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 3
  %342 = load i32, ptr %341, align 4, !tbaa !31
  %343 = icmp slt i32 %342, %150
  br i1 %343, label %344, label %378

344:                                              ; preds = %340
  %345 = sitofp i32 %342 to float
  %346 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 5
  %347 = load float, ptr %346, align 4, !tbaa !32
  %348 = fmul float %347, %345
  %349 = fptosi float %348 to i32
  %350 = tail call i32 @llvm.smax.i32(i32 %349, i32 %150)
  %351 = sub nsw i32 %350, %342
  %352 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 6
  %353 = load i32, ptr %352, align 8, !tbaa !33
  %354 = icmp slt i32 %351, %353
  %355 = add nsw i32 %353, %342
  %356 = select i1 %354, i32 %355, i32 %350
  %357 = sext i32 %356 to i64
  %358 = shl nsw i64 %357, 1
  %359 = add nsw i64 %358, 31
  %360 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %359) #9
  %361 = getelementptr inbounds i8, ptr %360, i64 31
  %362 = ptrtoint ptr %361 to i64
  %363 = and i64 %362, 31
  %364 = sub nsw i64 0, %363
  %365 = getelementptr inbounds i8, ptr %361, i64 %364
  %366 = load ptr, ptr %336, align 8, !tbaa !34
  %367 = sext i32 %338 to i64
  %368 = shl nsw i64 %367, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %365, ptr align 1 %366, i64 %368, i1 false)
  %369 = icmp eq i32 %342, 0
  br i1 %369, label %375, label %370

370:                                              ; preds = %344
  %371 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !35
  %373 = icmp eq ptr %372, null
  br i1 %373, label %375, label %374

374:                                              ; preds = %370
  tail call void @_ZdaPv(ptr noundef nonnull %372) #10
  br label %375

375:                                              ; preds = %374, %370, %344
  %376 = getelementptr inbounds %class.ResizeArrayRaw, ptr %336, i64 0, i32 1
  store ptr %360, ptr %376, align 8, !tbaa !35
  store ptr %365, ptr %336, align 8, !tbaa !34
  store i32 %356, ptr %341, align 4, !tbaa !31
  %377 = load ptr, ptr %335, align 8, !tbaa !26
  br label %378

378:                                              ; preds = %332, %340, %375
  %379 = phi ptr [ %336, %332 ], [ %336, %340 ], [ %377, %375 ]
  store i32 %150, ptr %337, align 8, !tbaa !28
  %380 = load ptr, ptr %379, align 8, !tbaa !34
  %381 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 15, i32 1
  %382 = load ptr, ptr %381, align 8, !tbaa !26
  %383 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 2
  %384 = load i32, ptr %383, align 8, !tbaa !28
  %385 = icmp slt i32 %384, %150
  br i1 %385, label %386, label %424

386:                                              ; preds = %378
  %387 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 3
  %388 = load i32, ptr %387, align 4, !tbaa !31
  %389 = icmp slt i32 %388, %150
  br i1 %389, label %390, label %424

390:                                              ; preds = %386
  %391 = sitofp i32 %388 to float
  %392 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 5
  %393 = load float, ptr %392, align 4, !tbaa !32
  %394 = fmul float %393, %391
  %395 = fptosi float %394 to i32
  %396 = tail call i32 @llvm.smax.i32(i32 %395, i32 %150)
  %397 = sub nsw i32 %396, %388
  %398 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 6
  %399 = load i32, ptr %398, align 8, !tbaa !33
  %400 = icmp slt i32 %397, %399
  %401 = add nsw i32 %399, %388
  %402 = select i1 %400, i32 %401, i32 %396
  %403 = sext i32 %402 to i64
  %404 = shl nsw i64 %403, 1
  %405 = add nsw i64 %404, 31
  %406 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %405) #9
  %407 = getelementptr inbounds i8, ptr %406, i64 31
  %408 = ptrtoint ptr %407 to i64
  %409 = and i64 %408, 31
  %410 = sub nsw i64 0, %409
  %411 = getelementptr inbounds i8, ptr %407, i64 %410
  %412 = load ptr, ptr %382, align 8, !tbaa !34
  %413 = sext i32 %384 to i64
  %414 = shl nsw i64 %413, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %411, ptr align 1 %412, i64 %414, i1 false)
  %415 = icmp eq i32 %388, 0
  br i1 %415, label %421, label %416

416:                                              ; preds = %390
  %417 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  %418 = load ptr, ptr %417, align 8, !tbaa !35
  %419 = icmp eq ptr %418, null
  br i1 %419, label %421, label %420

420:                                              ; preds = %416
  tail call void @_ZdaPv(ptr noundef nonnull %418) #10
  br label %421

421:                                              ; preds = %420, %416, %390
  %422 = getelementptr inbounds %class.ResizeArrayRaw, ptr %382, i64 0, i32 1
  store ptr %406, ptr %422, align 8, !tbaa !35
  store ptr %411, ptr %382, align 8, !tbaa !34
  store i32 %402, ptr %387, align 4, !tbaa !31
  %423 = load ptr, ptr %381, align 8, !tbaa !26
  br label %424

424:                                              ; preds = %378, %386, %421
  %425 = phi ptr [ %382, %378 ], [ %382, %386 ], [ %423, %421 ]
  store i32 %150, ptr %383, align 8, !tbaa !28
  %426 = load ptr, ptr %425, align 8, !tbaa !34
  %427 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 16, i32 1
  %428 = load ptr, ptr %427, align 8, !tbaa !26
  %429 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 2
  %430 = load i32, ptr %429, align 8, !tbaa !28
  %431 = icmp slt i32 %430, %150
  br i1 %431, label %432, label %470

432:                                              ; preds = %424
  %433 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 3
  %434 = load i32, ptr %433, align 4, !tbaa !31
  %435 = icmp slt i32 %434, %150
  br i1 %435, label %436, label %470

436:                                              ; preds = %432
  %437 = sitofp i32 %434 to float
  %438 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 5
  %439 = load float, ptr %438, align 4, !tbaa !32
  %440 = fmul float %439, %437
  %441 = fptosi float %440 to i32
  %442 = tail call i32 @llvm.smax.i32(i32 %441, i32 %150)
  %443 = sub nsw i32 %442, %434
  %444 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 6
  %445 = load i32, ptr %444, align 8, !tbaa !33
  %446 = icmp slt i32 %443, %445
  %447 = add nsw i32 %445, %434
  %448 = select i1 %446, i32 %447, i32 %442
  %449 = sext i32 %448 to i64
  %450 = shl nsw i64 %449, 1
  %451 = add nsw i64 %450, 31
  %452 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %451) #9
  %453 = getelementptr inbounds i8, ptr %452, i64 31
  %454 = ptrtoint ptr %453 to i64
  %455 = and i64 %454, 31
  %456 = sub nsw i64 0, %455
  %457 = getelementptr inbounds i8, ptr %453, i64 %456
  %458 = load ptr, ptr %428, align 8, !tbaa !34
  %459 = sext i32 %430 to i64
  %460 = shl nsw i64 %459, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %457, ptr align 1 %458, i64 %460, i1 false)
  %461 = icmp eq i32 %434, 0
  br i1 %461, label %467, label %462

462:                                              ; preds = %436
  %463 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  %464 = load ptr, ptr %463, align 8, !tbaa !35
  %465 = icmp eq ptr %464, null
  br i1 %465, label %467, label %466

466:                                              ; preds = %462
  tail call void @_ZdaPv(ptr noundef nonnull %464) #10
  br label %467

467:                                              ; preds = %466, %462, %436
  %468 = getelementptr inbounds %class.ResizeArrayRaw, ptr %428, i64 0, i32 1
  store ptr %452, ptr %468, align 8, !tbaa !35
  store ptr %457, ptr %428, align 8, !tbaa !34
  store i32 %448, ptr %433, align 4, !tbaa !31
  %469 = load ptr, ptr %427, align 8, !tbaa !26
  br label %470

470:                                              ; preds = %424, %432, %467
  %471 = phi ptr [ %428, %424 ], [ %428, %432 ], [ %469, %467 ]
  store i32 %150, ptr %429, align 8, !tbaa !28
  %472 = load ptr, ptr %471, align 8, !tbaa !34
  br i1 %149, label %614, label %473

473:                                              ; preds = %470
  %474 = icmp sgt i32 %43, 0
  br i1 %474, label %475, label %605

475:                                              ; preds = %473
  %476 = zext i32 %43 to i64
  %477 = and i64 %476, 1
  %478 = icmp eq i32 %43, 1
  br i1 %478, label %511, label %479

479:                                              ; preds = %475
  %480 = and i64 %476, 4294967294
  br label %481

481:                                              ; preds = %506, %479
  %482 = phi i64 [ 0, %479 ], [ %508, %506 ]
  %483 = phi i32 [ 0, %479 ], [ %507, %506 ]
  %484 = phi i64 [ 0, %479 ], [ %509, %506 ]
  %485 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %482, i32 4
  %486 = load i8, ptr %485, align 1
  %487 = and i8 %486, 7
  %488 = icmp eq i8 %487, 0
  br i1 %488, label %494, label %489

489:                                              ; preds = %481
  %490 = trunc i64 %482 to i16
  %491 = add nsw i32 %483, 1
  %492 = sext i32 %483 to i64
  %493 = getelementptr inbounds i16, ptr %196, i64 %492
  store i16 %490, ptr %493, align 2, !tbaa !45
  br label %494

494:                                              ; preds = %481, %489
  %495 = phi i32 [ %491, %489 ], [ %483, %481 ]
  %496 = or i64 %482, 1
  %497 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %496, i32 4
  %498 = load i8, ptr %497, align 1
  %499 = and i8 %498, 7
  %500 = icmp eq i8 %499, 0
  br i1 %500, label %506, label %501

501:                                              ; preds = %494
  %502 = trunc i64 %496 to i16
  %503 = add nsw i32 %495, 1
  %504 = sext i32 %495 to i64
  %505 = getelementptr inbounds i16, ptr %196, i64 %504
  store i16 %502, ptr %505, align 2, !tbaa !45
  br label %506

506:                                              ; preds = %501, %494
  %507 = phi i32 [ %503, %501 ], [ %495, %494 ]
  %508 = add nuw nsw i64 %482, 2
  %509 = add i64 %484, 2
  %510 = icmp eq i64 %509, %480
  br i1 %510, label %511, label %481

511:                                              ; preds = %506, %475
  %512 = phi i32 [ undef, %475 ], [ %507, %506 ]
  %513 = phi i64 [ 0, %475 ], [ %508, %506 ]
  %514 = phi i32 [ 0, %475 ], [ %507, %506 ]
  %515 = icmp eq i64 %477, 0
  br i1 %515, label %526, label %516

516:                                              ; preds = %511
  %517 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %513, i32 4
  %518 = load i8, ptr %517, align 1
  %519 = and i8 %518, 7
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %526, label %521

521:                                              ; preds = %516
  %522 = trunc i64 %513 to i16
  %523 = add nsw i32 %514, 1
  %524 = sext i32 %514 to i64
  %525 = getelementptr inbounds i16, ptr %196, i64 %524
  store i16 %522, ptr %525, align 2, !tbaa !45
  br label %526

526:                                              ; preds = %516, %521, %511
  %527 = phi i32 [ %512, %511 ], [ %523, %521 ], [ %514, %516 ]
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %536, label %529

529:                                              ; preds = %526
  %530 = add nsw i32 %527, -1
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i16, ptr %196, i64 %531
  %533 = load i16, ptr %532, align 2, !tbaa !45
  %534 = sext i32 %527 to i64
  %535 = getelementptr inbounds i16, ptr %196, i64 %534
  store i16 %533, ptr %535, align 2, !tbaa !45
  br label %536

536:                                              ; preds = %529, %526
  %537 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %538 = icmp ne i32 %537, 0
  %539 = icmp sgt i32 %527, 0
  %540 = and i1 %538, %539
  br i1 %540, label %541, label %605

541:                                              ; preds = %536
  %542 = zext i32 %527 to i64
  %543 = and i64 %542, 1
  %544 = icmp eq i32 %527, 1
  br i1 %544, label %579, label %545

545:                                              ; preds = %541
  %546 = and i64 %542, 4294967294
  br label %547

547:                                              ; preds = %574, %545
  %548 = phi i64 [ 0, %545 ], [ %576, %574 ]
  %549 = phi i32 [ 0, %545 ], [ %575, %574 ]
  %550 = phi i64 [ 0, %545 ], [ %577, %574 ]
  %551 = getelementptr inbounds i16, ptr %196, i64 %548
  %552 = load i16, ptr %551, align 2, !tbaa !45
  %553 = zext i16 %552 to i64
  %554 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %553
  %555 = load i32, ptr %554, align 4
  %556 = icmp sgt i32 %555, -1
  br i1 %556, label %557, label %561

557:                                              ; preds = %547
  %558 = add nsw i32 %549, 1
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds i16, ptr %242, i64 %559
  store i16 %552, ptr %560, align 2, !tbaa !45
  br label %561

561:                                              ; preds = %547, %557
  %562 = phi i32 [ %549, %547 ], [ %558, %557 ]
  %563 = or i64 %548, 1
  %564 = getelementptr inbounds i16, ptr %196, i64 %563
  %565 = load i16, ptr %564, align 2, !tbaa !45
  %566 = zext i16 %565 to i64
  %567 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %566
  %568 = load i32, ptr %567, align 4
  %569 = icmp sgt i32 %568, -1
  br i1 %569, label %570, label %574

570:                                              ; preds = %561
  %571 = add nsw i32 %562, 1
  %572 = sext i32 %562 to i64
  %573 = getelementptr inbounds i16, ptr %242, i64 %572
  store i16 %565, ptr %573, align 2, !tbaa !45
  br label %574

574:                                              ; preds = %570, %561
  %575 = phi i32 [ %562, %561 ], [ %571, %570 ]
  %576 = add nuw nsw i64 %548, 2
  %577 = add i64 %550, 2
  %578 = icmp eq i64 %577, %546
  br i1 %578, label %579, label %547

579:                                              ; preds = %574, %541
  %580 = phi i32 [ undef, %541 ], [ %575, %574 ]
  %581 = phi i64 [ 0, %541 ], [ %576, %574 ]
  %582 = phi i32 [ 0, %541 ], [ %575, %574 ]
  %583 = icmp eq i64 %543, 0
  br i1 %583, label %595, label %584

584:                                              ; preds = %579
  %585 = getelementptr inbounds i16, ptr %196, i64 %581
  %586 = load i16, ptr %585, align 2, !tbaa !45
  %587 = zext i16 %586 to i64
  %588 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %587
  %589 = load i32, ptr %588, align 4
  %590 = icmp sgt i32 %589, -1
  br i1 %590, label %591, label %595

591:                                              ; preds = %584
  %592 = add nsw i32 %582, 1
  %593 = sext i32 %582 to i64
  %594 = getelementptr inbounds i16, ptr %242, i64 %593
  store i16 %586, ptr %594, align 2, !tbaa !45
  br label %595

595:                                              ; preds = %584, %591, %579
  %596 = phi i32 [ %580, %579 ], [ %582, %584 ], [ %592, %591 ]
  %597 = icmp eq i32 %596, 0
  br i1 %597, label %605, label %598

598:                                              ; preds = %595
  %599 = add nsw i32 %596, -1
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i16, ptr %242, i64 %600
  %602 = load i16, ptr %601, align 2, !tbaa !45
  %603 = sext i32 %596 to i64
  %604 = getelementptr inbounds i16, ptr %242, i64 %603
  store i16 %602, ptr %604, align 2, !tbaa !45
  br label %605

605:                                              ; preds = %473, %536, %598, %595
  %606 = phi i32 [ %527, %598 ], [ %527, %595 ], [ %527, %536 ], [ 0, %473 ]
  %607 = phi i32 [ %596, %598 ], [ 0, %595 ], [ 0, %536 ], [ 0, %473 ]
  %608 = load i32, ptr %17, align 8, !tbaa !19
  %609 = add nsw i32 %608, 1
  store i32 %609, ptr %17, align 8, !tbaa !19
  %610 = trunc i32 %41 to i16
  %611 = load ptr, ptr %12, align 8, !tbaa !47
  %612 = sext i32 %608 to i64
  %613 = getelementptr inbounds i16, ptr %611, i64 %612
  store i16 %610, ptr %613, align 2, !tbaa !45
  br label %624

614:                                              ; preds = %470
  %615 = load ptr, ptr %12, align 8, !tbaa !47
  %616 = load i32, ptr %17, align 8, !tbaa !19
  %617 = add nsw i32 %616, 1
  store i32 %617, ptr %17, align 8, !tbaa !19
  %618 = sext i32 %616 to i64
  %619 = getelementptr inbounds i16, ptr %615, i64 %618
  %620 = load i16, ptr %619, align 2, !tbaa !45
  %621 = zext i16 %620 to i32
  %622 = icmp eq i32 %41, %621
  br i1 %622, label %624, label %623

623:                                              ; preds = %614
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %624

624:                                              ; preds = %614, %623, %605
  %625 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %606, %605 ]
  %626 = phi i32 [ 0, %623 ], [ 0, %614 ], [ %607, %605 ]
  %627 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 17, i32 1
  %628 = load ptr, ptr %627, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %628, i32 noundef %41)
  %629 = load ptr, ptr %627, align 8, !tbaa !174
  %630 = load ptr, ptr %629, align 8, !tbaa !176
  %631 = sext i32 %41 to i64
  %632 = mul nsw i64 %631, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %630, i8 0, i64 %632, i1 false)
  %633 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %52, i64 0, i32 18, i32 1
  %634 = load ptr, ptr %633, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %634, i32 noundef %41)
  %635 = load ptr, ptr %633, align 8, !tbaa !174
  %636 = load ptr, ptr %635, align 8, !tbaa !176
  tail call void @llvm.memset.p0.i64(ptr align 1 %636, i8 0, i64 %632, i1 false)
  %637 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %638 = load i32, ptr %637, align 4, !tbaa !49
  %639 = add nsw i32 %638, -1
  %640 = add nsw i32 %41, -1
  %641 = icmp sgt i32 %41, 1
  br i1 %641, label %642, label %2913

642:                                              ; preds = %624
  %643 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %644 = load i32, ptr %643, align 4, !tbaa !48
  %645 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %646 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %647 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %648 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %649 = ptrtoint ptr %426 to i64
  %650 = add nsw i32 %43, 10
  %651 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %652 = ptrtoint ptr %472 to i64
  %653 = ptrtoint ptr %334 to i64
  %654 = ptrtoint ptr %380 to i64
  %655 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %656 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %657 = fneg double %33
  %658 = getelementptr inbounds double, ptr %6, i64 26
  %659 = getelementptr inbounds double, ptr %6, i64 28
  %660 = getelementptr inbounds double, ptr %6, i64 29
  %661 = getelementptr inbounds double, ptr %6, i64 30
  %662 = getelementptr inbounds double, ptr %6, i64 31
  %663 = fsub double 1.000000e+00, %35
  %664 = fmul double %35, 2.000000e+00
  %665 = fmul double %35, 4.000000e+00
  %666 = fmul double %35, 6.000000e+00
  %667 = sext i32 %625 to i64
  %668 = sext i32 %626 to i64
  %669 = insertelement <2 x double> poison, double %27, i64 0
  %670 = shufflevector <2 x double> %669, <2 x double> poison, <2 x i32> zeroinitializer
  %671 = getelementptr inbounds i16, ptr %472, i64 1
  %672 = getelementptr inbounds i16, ptr %472, i64 1
  br label %673

673:                                              ; preds = %642, %2897
  %674 = phi i32 [ 0, %642 ], [ %2909, %2897 ]
  %675 = phi double [ 0.000000e+00, %642 ], [ %2908, %2897 ]
  %676 = phi i32 [ 0, %642 ], [ %2911, %2897 ]
  %677 = phi ptr [ null, %642 ], [ %2906, %2897 ]
  %678 = phi ptr [ null, %642 ], [ %2905, %2897 ]
  %679 = phi ptr [ null, %642 ], [ %2904, %2897 ]
  %680 = phi i32 [ 0, %642 ], [ %2903, %2897 ]
  %681 = phi i32 [ 0, %642 ], [ %2902, %2897 ]
  %682 = phi i32 [ 0, %642 ], [ %2901, %2897 ]
  %683 = phi i32 [ 0, %642 ], [ %2900, %2897 ]
  %684 = phi i32 [ 0, %642 ], [ %2899, %2897 ]
  %685 = phi i32 [ %644, %642 ], [ %2898, %2897 ]
  %686 = phi <2 x double> [ zeroinitializer, %642 ], [ %2910, %2897 ]
  %687 = sext i32 %676 to i64
  %688 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %687
  %689 = getelementptr inbounds %struct.CompAtomExt, ptr %48, i64 %687
  %690 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %687, i32 4
  %691 = load i8, ptr %690, align 1
  %692 = lshr i8 %691, 3
  %693 = and i8 %692, 15
  %694 = zext i8 %693 to i32
  %695 = icmp eq i8 %693, 0
  br i1 %695, label %702, label %696

696:                                              ; preds = %673
  %697 = icmp eq i32 %685, 0
  br i1 %697, label %702, label %698

698:                                              ; preds = %696
  %699 = add nsw i32 %685, -1
  %700 = add nsw i32 %676, -1
  %701 = add i32 %700, %694
  br label %2897

702:                                              ; preds = %696, %673
  %703 = phi i32 [ %685, %673 ], [ %639, %696 ]
  %704 = load <2 x double>, ptr %688, align 8, !tbaa !15
  %705 = fadd <2 x double> %19, %704
  %706 = getelementptr inbounds %class.Vector, ptr %688, i64 0, i32 2
  %707 = load double, ptr %706, align 8, !tbaa !50
  %708 = fadd double %21, %707
  %709 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %687, i32 3
  %710 = load i8, ptr %709, align 2, !tbaa !52
  %711 = zext i8 %710 to i32
  %712 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %713 = fsub double %707, %712
  %714 = fmul double %10, %713
  %715 = tail call double @llvm.floor.f64(double %714)
  %716 = fptosi double %715 to i32
  %717 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %718 = icmp slt i32 %716, 0
  %719 = select i1 %718, i32 %717, i32 0
  %720 = icmp sgt i32 %717, %716
  %721 = select i1 %720, i32 0, i32 %717
  %722 = sub i32 %716, %721
  %723 = add i32 %722, %719
  %724 = add nsw i32 %676, %694
  %725 = select i1 %695, i32 %680, i32 %724
  br i1 %149, label %2075, label %726

726:                                              ; preds = %702
  %727 = load i32, ptr %689, align 4
  %728 = shl i32 %727, 2
  %729 = ashr exact i32 %728, 2
  %730 = load ptr, ptr %645, align 8, !tbaa !53
  %731 = sext i32 %729 to i64
  %732 = getelementptr inbounds %class.ExclusionCheck, ptr %730, i64 %731
  %733 = load i32, ptr %732, align 8, !tbaa !55
  %734 = getelementptr inbounds %class.ExclusionCheck, ptr %730, i64 %731, i32 1
  %735 = load i32, ptr %734, align 4, !tbaa !57
  %736 = getelementptr inbounds %class.ExclusionCheck, ptr %730, i64 %731, i32 2
  %737 = load ptr, ptr %736, align 8, !tbaa !58
  %738 = icmp eq ptr %737, null
  br i1 %738, label %743, label %739

739:                                              ; preds = %726
  %740 = sext i32 %733 to i64
  %741 = sub nsw i64 0, %740
  %742 = getelementptr inbounds i8, ptr %737, i64 %741
  br label %969

743:                                              ; preds = %726
  %744 = icmp eq ptr %677, null
  br i1 %744, label %832, label %745

745:                                              ; preds = %743
  %746 = load i32, ptr %678, align 4, !tbaa !5
  %747 = icmp slt i32 %746, 1
  br i1 %747, label %795, label %748

748:                                              ; preds = %745
  %749 = add nuw i32 %746, 1
  %750 = zext i32 %749 to i64
  %751 = add nsw i64 %750, -1
  %752 = add nsw i64 %750, -2
  %753 = and i64 %751, 3
  %754 = icmp ult i64 %752, 3
  br i1 %754, label %782, label %755

755:                                              ; preds = %748
  %756 = and i64 %751, -4
  br label %757

757:                                              ; preds = %757, %755
  %758 = phi i64 [ 1, %755 ], [ %779, %757 ]
  %759 = phi i64 [ 0, %755 ], [ %780, %757 ]
  %760 = getelementptr inbounds i32, ptr %678, i64 %758
  %761 = load i32, ptr %760, align 4, !tbaa !5
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8, ptr %677, i64 %762
  store i8 0, ptr %763, align 1, !tbaa !59
  %764 = add nuw nsw i64 %758, 1
  %765 = getelementptr inbounds i32, ptr %678, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !5
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds i8, ptr %677, i64 %767
  store i8 0, ptr %768, align 1, !tbaa !59
  %769 = add nuw nsw i64 %758, 2
  %770 = getelementptr inbounds i32, ptr %678, i64 %769
  %771 = load i32, ptr %770, align 4, !tbaa !5
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds i8, ptr %677, i64 %772
  store i8 0, ptr %773, align 1, !tbaa !59
  %774 = add nuw nsw i64 %758, 3
  %775 = getelementptr inbounds i32, ptr %678, i64 %774
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %677, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !59
  %779 = add nuw nsw i64 %758, 4
  %780 = add i64 %759, 4
  %781 = icmp eq i64 %780, %756
  br i1 %781, label %782, label %757

782:                                              ; preds = %757, %748
  %783 = phi i64 [ 1, %748 ], [ %779, %757 ]
  %784 = icmp eq i64 %753, 0
  br i1 %784, label %795, label %785

785:                                              ; preds = %782, %785
  %786 = phi i64 [ %792, %785 ], [ %783, %782 ]
  %787 = phi i64 [ %793, %785 ], [ 0, %782 ]
  %788 = getelementptr inbounds i32, ptr %678, i64 %786
  %789 = load i32, ptr %788, align 4, !tbaa !5
  %790 = sext i32 %789 to i64
  %791 = getelementptr inbounds i8, ptr %677, i64 %790
  store i8 0, ptr %791, align 1, !tbaa !59
  %792 = add nuw nsw i64 %786, 1
  %793 = add i64 %787, 1
  %794 = icmp eq i64 %793, %753
  br i1 %794, label %795, label %785, !llvm.loop !224

795:                                              ; preds = %782, %785, %745
  %796 = load i32, ptr %679, align 4, !tbaa !5
  %797 = icmp slt i32 %796, 1
  br i1 %797, label %852, label %798

798:                                              ; preds = %795
  %799 = add nuw i32 %796, 1
  %800 = zext i32 %799 to i64
  %801 = add nsw i64 %800, -1
  %802 = add nsw i64 %800, -2
  %803 = and i64 %801, 3
  %804 = icmp ult i64 %802, 3
  br i1 %804, label %839, label %805

805:                                              ; preds = %798
  %806 = and i64 %801, -4
  br label %807

807:                                              ; preds = %807, %805
  %808 = phi i64 [ 1, %805 ], [ %829, %807 ]
  %809 = phi i64 [ 0, %805 ], [ %830, %807 ]
  %810 = getelementptr inbounds i32, ptr %679, i64 %808
  %811 = load i32, ptr %810, align 4, !tbaa !5
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i8, ptr %677, i64 %812
  store i8 0, ptr %813, align 1, !tbaa !59
  %814 = add nuw nsw i64 %808, 1
  %815 = getelementptr inbounds i32, ptr %679, i64 %814
  %816 = load i32, ptr %815, align 4, !tbaa !5
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i8, ptr %677, i64 %817
  store i8 0, ptr %818, align 1, !tbaa !59
  %819 = add nuw nsw i64 %808, 2
  %820 = getelementptr inbounds i32, ptr %679, i64 %819
  %821 = load i32, ptr %820, align 4, !tbaa !5
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds i8, ptr %677, i64 %822
  store i8 0, ptr %823, align 1, !tbaa !59
  %824 = add nuw nsw i64 %808, 3
  %825 = getelementptr inbounds i32, ptr %679, i64 %824
  %826 = load i32, ptr %825, align 4, !tbaa !5
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i8, ptr %677, i64 %827
  store i8 0, ptr %828, align 1, !tbaa !59
  %829 = add nuw nsw i64 %808, 4
  %830 = add i64 %809, 4
  %831 = icmp eq i64 %830, %806
  br i1 %831, label %839, label %807

832:                                              ; preds = %743
  %833 = load i32, ptr %646, align 8, !tbaa !62
  %834 = tail call i32 @llvm.smax.i32(i32 %833, i32 -1)
  %835 = sext i32 %834 to i64
  %836 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %835) #9
  %837 = load i32, ptr %646, align 8, !tbaa !62
  %838 = sext i32 %837 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %836, i8 0, i64 %838, i1 false)
  br label %852

839:                                              ; preds = %807, %798
  %840 = phi i64 [ 1, %798 ], [ %829, %807 ]
  %841 = icmp eq i64 %803, 0
  br i1 %841, label %852, label %842

842:                                              ; preds = %839, %842
  %843 = phi i64 [ %849, %842 ], [ %840, %839 ]
  %844 = phi i64 [ %850, %842 ], [ 0, %839 ]
  %845 = getelementptr inbounds i32, ptr %679, i64 %843
  %846 = load i32, ptr %845, align 4, !tbaa !5
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i8, ptr %677, i64 %847
  store i8 0, ptr %848, align 1, !tbaa !59
  %849 = add nuw nsw i64 %843, 1
  %850 = add i64 %844, 1
  %851 = icmp eq i64 %850, %803
  br i1 %851, label %852, label %842, !llvm.loop !225

852:                                              ; preds = %839, %842, %795, %832
  %853 = phi ptr [ %836, %832 ], [ %677, %795 ], [ %677, %842 ], [ %677, %839 ]
  %854 = load i32, ptr %689, align 4
  %855 = shl i32 %854, 2
  %856 = ashr exact i32 %855, 2
  %857 = load ptr, ptr %647, align 8, !tbaa !64
  %858 = sext i32 %856 to i64
  %859 = getelementptr inbounds ptr, ptr %857, i64 %858
  %860 = load ptr, ptr %859, align 8, !tbaa !24
  %861 = load i32, ptr %860, align 4, !tbaa !5
  %862 = icmp slt i32 %861, 1
  br i1 %862, label %915, label %863

863:                                              ; preds = %852
  %864 = add nuw i32 %861, 1
  %865 = zext i32 %864 to i64
  %866 = add nsw i64 %865, -1
  %867 = add nsw i64 %865, -2
  %868 = and i64 %866, 3
  %869 = icmp ult i64 %867, 3
  br i1 %869, label %897, label %870

870:                                              ; preds = %863
  %871 = and i64 %866, -4
  br label %872

872:                                              ; preds = %872, %870
  %873 = phi i64 [ 1, %870 ], [ %894, %872 ]
  %874 = phi i64 [ 0, %870 ], [ %895, %872 ]
  %875 = getelementptr inbounds i32, ptr %860, i64 %873
  %876 = load i32, ptr %875, align 4, !tbaa !5
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i8, ptr %853, i64 %877
  store i8 1, ptr %878, align 1, !tbaa !59
  %879 = add nuw nsw i64 %873, 1
  %880 = getelementptr inbounds i32, ptr %860, i64 %879
  %881 = load i32, ptr %880, align 4, !tbaa !5
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, ptr %853, i64 %882
  store i8 1, ptr %883, align 1, !tbaa !59
  %884 = add nuw nsw i64 %873, 2
  %885 = getelementptr inbounds i32, ptr %860, i64 %884
  %886 = load i32, ptr %885, align 4, !tbaa !5
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds i8, ptr %853, i64 %887
  store i8 1, ptr %888, align 1, !tbaa !59
  %889 = add nuw nsw i64 %873, 3
  %890 = getelementptr inbounds i32, ptr %860, i64 %889
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i8, ptr %853, i64 %892
  store i8 1, ptr %893, align 1, !tbaa !59
  %894 = add nuw nsw i64 %873, 4
  %895 = add i64 %874, 4
  %896 = icmp eq i64 %895, %871
  br i1 %896, label %897, label %872

897:                                              ; preds = %872, %863
  %898 = phi i64 [ 1, %863 ], [ %894, %872 ]
  %899 = icmp eq i64 %868, 0
  br i1 %899, label %910, label %900

900:                                              ; preds = %897, %900
  %901 = phi i64 [ %907, %900 ], [ %898, %897 ]
  %902 = phi i64 [ %908, %900 ], [ 0, %897 ]
  %903 = getelementptr inbounds i32, ptr %860, i64 %901
  %904 = load i32, ptr %903, align 4, !tbaa !5
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds i8, ptr %853, i64 %905
  store i8 1, ptr %906, align 1, !tbaa !59
  %907 = add nuw nsw i64 %901, 1
  %908 = add i64 %902, 1
  %909 = icmp eq i64 %908, %868
  br i1 %909, label %910, label %900, !llvm.loop !226

910:                                              ; preds = %900, %897
  %911 = load i32, ptr %689, align 4
  %912 = shl i32 %911, 2
  %913 = ashr exact i32 %912, 2
  %914 = sext i32 %913 to i64
  br label %915

915:                                              ; preds = %910, %852
  %916 = phi i64 [ %914, %910 ], [ %858, %852 ]
  %917 = load ptr, ptr %648, align 8, !tbaa !66
  %918 = getelementptr inbounds ptr, ptr %917, i64 %916
  %919 = load ptr, ptr %918, align 8, !tbaa !24
  %920 = load i32, ptr %919, align 4, !tbaa !5
  %921 = icmp slt i32 %920, 1
  br i1 %921, label %969, label %922

922:                                              ; preds = %915
  %923 = add nuw i32 %920, 1
  %924 = zext i32 %923 to i64
  %925 = add nsw i64 %924, -1
  %926 = add nsw i64 %924, -2
  %927 = and i64 %925, 3
  %928 = icmp ult i64 %926, 3
  br i1 %928, label %956, label %929

929:                                              ; preds = %922
  %930 = and i64 %925, -4
  br label %931

931:                                              ; preds = %931, %929
  %932 = phi i64 [ 1, %929 ], [ %953, %931 ]
  %933 = phi i64 [ 0, %929 ], [ %954, %931 ]
  %934 = getelementptr inbounds i32, ptr %919, i64 %932
  %935 = load i32, ptr %934, align 4, !tbaa !5
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i8, ptr %853, i64 %936
  store i8 2, ptr %937, align 1, !tbaa !59
  %938 = add nuw nsw i64 %932, 1
  %939 = getelementptr inbounds i32, ptr %919, i64 %938
  %940 = load i32, ptr %939, align 4, !tbaa !5
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i8, ptr %853, i64 %941
  store i8 2, ptr %942, align 1, !tbaa !59
  %943 = add nuw nsw i64 %932, 2
  %944 = getelementptr inbounds i32, ptr %919, i64 %943
  %945 = load i32, ptr %944, align 4, !tbaa !5
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i8, ptr %853, i64 %946
  store i8 2, ptr %947, align 1, !tbaa !59
  %948 = add nuw nsw i64 %932, 3
  %949 = getelementptr inbounds i32, ptr %919, i64 %948
  %950 = load i32, ptr %949, align 4, !tbaa !5
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i8, ptr %853, i64 %951
  store i8 2, ptr %952, align 1, !tbaa !59
  %953 = add nuw nsw i64 %932, 4
  %954 = add i64 %933, 4
  %955 = icmp eq i64 %954, %930
  br i1 %955, label %956, label %931

956:                                              ; preds = %931, %922
  %957 = phi i64 [ 1, %922 ], [ %953, %931 ]
  %958 = icmp eq i64 %927, 0
  br i1 %958, label %969, label %959

959:                                              ; preds = %956, %959
  %960 = phi i64 [ %966, %959 ], [ %957, %956 ]
  %961 = phi i64 [ %967, %959 ], [ 0, %956 ]
  %962 = getelementptr inbounds i32, ptr %919, i64 %960
  %963 = load i32, ptr %962, align 4, !tbaa !5
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds i8, ptr %853, i64 %964
  store i8 2, ptr %965, align 1, !tbaa !59
  %966 = add nuw nsw i64 %960, 1
  %967 = add i64 %961, 1
  %968 = icmp eq i64 %967, %927
  br i1 %968, label %969, label %959, !llvm.loop !227

969:                                              ; preds = %956, %959, %915, %739
  %970 = phi ptr [ %742, %739 ], [ %853, %915 ], [ %853, %959 ], [ %853, %956 ]
  %971 = phi ptr [ %679, %739 ], [ %919, %915 ], [ %919, %959 ], [ %919, %956 ]
  %972 = phi ptr [ %678, %739 ], [ %860, %915 ], [ %860, %959 ], [ %860, %956 ]
  %973 = phi ptr [ %677, %739 ], [ %853, %915 ], [ %853, %959 ], [ %853, %956 ]
  %974 = load i8, ptr %690, align 1
  %975 = and i8 %974, 7
  %976 = icmp eq i8 %975, 0
  br i1 %976, label %1270, label %977

977:                                              ; preds = %969
  %978 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %979 = icmp eq i32 %978, 0
  br i1 %979, label %983, label %980

980:                                              ; preds = %977
  %981 = load i32, ptr %689, align 4
  %982 = icmp slt i32 %981, 0
  br label %983

983:                                              ; preds = %980, %977
  %984 = phi i1 [ false, %977 ], [ %982, %980 ]
  %985 = and i8 %974, 120
  %986 = icmp eq i8 %985, 0
  br i1 %986, label %1018, label %987

987:                                              ; preds = %983
  %988 = icmp slt i32 %681, %625
  br i1 %988, label %989, label %1002

989:                                              ; preds = %987
  %990 = sext i32 %681 to i64
  br label %991

991:                                              ; preds = %989, %997
  %992 = phi i64 [ %990, %989 ], [ %998, %997 ]
  %993 = getelementptr inbounds i16, ptr %196, i64 %992
  %994 = load i16, ptr %993, align 2, !tbaa !45
  %995 = zext i16 %994 to i32
  %996 = icmp sgt i32 %725, %995
  br i1 %996, label %997, label %1000

997:                                              ; preds = %991
  %998 = add nsw i64 %992, 1
  %999 = icmp eq i64 %998, %667
  br i1 %999, label %1002, label %991

1000:                                             ; preds = %991
  %1001 = trunc i64 %992 to i32
  br label %1002

1002:                                             ; preds = %997, %1000, %987
  %1003 = phi i32 [ %681, %987 ], [ %1001, %1000 ], [ %625, %997 ]
  %1004 = icmp slt i32 %682, %626
  br i1 %1004, label %1005, label %1018

1005:                                             ; preds = %1002
  %1006 = sext i32 %682 to i64
  br label %1007

1007:                                             ; preds = %1005, %1013
  %1008 = phi i64 [ %1006, %1005 ], [ %1014, %1013 ]
  %1009 = getelementptr inbounds i16, ptr %242, i64 %1008
  %1010 = load i16, ptr %1009, align 2, !tbaa !45
  %1011 = zext i16 %1010 to i32
  %1012 = icmp sgt i32 %725, %1011
  br i1 %1012, label %1013, label %1016

1013:                                             ; preds = %1007
  %1014 = add nsw i64 %1008, 1
  %1015 = icmp eq i64 %1014, %668
  br i1 %1015, label %1018, label %1007

1016:                                             ; preds = %1007
  %1017 = trunc i64 %1008 to i32
  br label %1018

1018:                                             ; preds = %1013, %1016, %1002, %983
  %1019 = phi i32 [ %682, %983 ], [ %682, %1002 ], [ %1017, %1016 ], [ %626, %1013 ]
  %1020 = phi i32 [ %681, %983 ], [ %1003, %1002 ], [ %1003, %1016 ], [ %1003, %1013 ]
  %1021 = add nsw i32 %676, 1
  %1022 = icmp slt i32 %1021, %725
  br i1 %1022, label %1023, label %1088

1023:                                             ; preds = %1018
  %1024 = xor i32 %676, -1
  %1025 = add i32 %725, %1024
  %1026 = zext i32 %1025 to i64
  %1027 = icmp ult i32 %1025, 8
  br i1 %1027, label %1077, label %1028

1028:                                             ; preds = %1023
  %1029 = icmp ult i32 %1025, 64
  br i1 %1029, label %1058, label %1030

1030:                                             ; preds = %1028
  %1031 = and i64 %1026, 4294967232
  %1032 = trunc i32 %1021 to i16
  %1033 = insertelement <16 x i16> poison, i16 %1032, i64 0
  %1034 = shufflevector <16 x i16> %1033, <16 x i16> poison, <16 x i32> zeroinitializer
  %1035 = add <16 x i16> %1034, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1036 = trunc i64 %1031 to i32
  %1037 = add i32 %1021, %1036
  br label %1038

1038:                                             ; preds = %1038, %1030
  %1039 = phi i64 [ 0, %1030 ], [ %1048, %1038 ]
  %1040 = phi <16 x i16> [ %1035, %1030 ], [ %1049, %1038 ]
  %1041 = add <16 x i16> %1040, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1042 = add <16 x i16> %1040, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1043 = add <16 x i16> %1040, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1044 = getelementptr inbounds i16, ptr %426, i64 %1039
  store <16 x i16> %1040, ptr %1044, align 2, !tbaa !45
  %1045 = getelementptr inbounds i16, ptr %1044, i64 16
  store <16 x i16> %1041, ptr %1045, align 2, !tbaa !45
  %1046 = getelementptr inbounds i16, ptr %1044, i64 32
  store <16 x i16> %1042, ptr %1046, align 2, !tbaa !45
  %1047 = getelementptr inbounds i16, ptr %1044, i64 48
  store <16 x i16> %1043, ptr %1047, align 2, !tbaa !45
  %1048 = add nuw i64 %1039, 64
  %1049 = add <16 x i16> %1040, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1050 = icmp eq i64 %1048, %1031
  br i1 %1050, label %1051, label %1038, !llvm.loop !228

1051:                                             ; preds = %1038
  %1052 = icmp eq i64 %1031, %1026
  br i1 %1052, label %1088, label %1053

1053:                                             ; preds = %1051
  %1054 = trunc i64 %1031 to i32
  %1055 = add i32 %1021, %1054
  %1056 = and i64 %1026, 56
  %1057 = icmp eq i64 %1056, 0
  br i1 %1057, label %1077, label %1058

1058:                                             ; preds = %1028, %1053
  %1059 = phi i32 [ %1037, %1053 ], [ %1021, %1028 ]
  %1060 = phi i64 [ %1031, %1053 ], [ 0, %1028 ]
  %1061 = and i64 %1026, 4294967288
  %1062 = trunc i64 %1061 to i32
  %1063 = add i32 %1021, %1062
  %1064 = trunc i32 %1059 to i16
  %1065 = insertelement <8 x i16> poison, i16 %1064, i64 0
  %1066 = shufflevector <8 x i16> %1065, <8 x i16> poison, <8 x i32> zeroinitializer
  %1067 = add <8 x i16> %1066, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1068

1068:                                             ; preds = %1068, %1058
  %1069 = phi i64 [ %1060, %1058 ], [ %1072, %1068 ]
  %1070 = phi <8 x i16> [ %1067, %1058 ], [ %1073, %1068 ]
  %1071 = getelementptr inbounds i16, ptr %426, i64 %1069
  store <8 x i16> %1070, ptr %1071, align 2, !tbaa !45
  %1072 = add nuw i64 %1069, 8
  %1073 = add <8 x i16> %1070, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1074 = icmp eq i64 %1072, %1061
  br i1 %1074, label %1075, label %1068, !llvm.loop !229

1075:                                             ; preds = %1068
  %1076 = icmp eq i64 %1061, %1026
  br i1 %1076, label %1088, label %1077

1077:                                             ; preds = %1023, %1053, %1075
  %1078 = phi i64 [ 0, %1023 ], [ %1031, %1053 ], [ %1061, %1075 ]
  %1079 = phi i32 [ %1021, %1023 ], [ %1055, %1053 ], [ %1063, %1075 ]
  br label %1080

1080:                                             ; preds = %1077, %1080
  %1081 = phi i64 [ %1084, %1080 ], [ %1078, %1077 ]
  %1082 = phi i32 [ %1086, %1080 ], [ %1079, %1077 ]
  %1083 = trunc i32 %1082 to i16
  %1084 = add nuw nsw i64 %1081, 1
  %1085 = getelementptr inbounds i16, ptr %426, i64 %1081
  store i16 %1083, ptr %1085, align 2, !tbaa !45
  %1086 = add nsw i32 %1082, 1
  %1087 = icmp eq i64 %1084, %1026
  br i1 %1087, label %1088, label %1080, !llvm.loop !230

1088:                                             ; preds = %1080, %1051, %1075, %1018
  %1089 = phi i32 [ 0, %1018 ], [ %1025, %1075 ], [ %1025, %1051 ], [ %1025, %1080 ]
  %1090 = zext i32 %1089 to i64
  %1091 = getelementptr inbounds i16, ptr %426, i64 %1090
  %1092 = select i1 %984, ptr %242, ptr %196
  %1093 = select i1 %984, i32 %1019, i32 %1020
  %1094 = select i1 %984, i32 %626, i32 %625
  %1095 = icmp slt i32 %1093, %1094
  br i1 %1095, label %1096, label %1255

1096:                                             ; preds = %1088
  %1097 = sub nsw i32 %1094, %1093
  %1098 = icmp sgt i32 %1097, 6
  br i1 %1098, label %1099, label %1192

1099:                                             ; preds = %1096
  %1100 = add nsw i32 %1094, -2
  %1101 = add nsw i32 %1093, 2
  %1102 = icmp slt i32 %1101, %1100
  br i1 %1102, label %1103, label %1192

1103:                                             ; preds = %1099
  %1104 = add nsw i32 %1093, 1
  %1105 = sext i32 %1104 to i64
  %1106 = getelementptr inbounds i16, ptr %1092, i64 %1105
  %1107 = load i16, ptr %1106, align 2, !tbaa !45
  %1108 = zext i16 %1107 to i64
  %1109 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1108
  %1110 = getelementptr inbounds %class.Vector, ptr %1109, i64 0, i32 2
  %1111 = load double, ptr %1110, align 8, !tbaa !50
  %1112 = sext i32 %1093 to i64
  %1113 = getelementptr inbounds i16, ptr %1092, i64 %1112
  %1114 = load i16, ptr %1113, align 2, !tbaa !45
  %1115 = zext i16 %1114 to i64
  %1116 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1115
  %1117 = getelementptr inbounds %class.Vector, ptr %1116, i64 0, i32 2
  %1118 = load double, ptr %1117, align 8, !tbaa !50
  %1119 = getelementptr inbounds %class.Vector, ptr %1109, i64 0, i32 1
  %1120 = load double, ptr %1119, align 8, !tbaa !68
  %1121 = getelementptr inbounds %class.Vector, ptr %1116, i64 0, i32 1
  %1122 = load double, ptr %1121, align 8, !tbaa !68
  %1123 = load double, ptr %1109, align 8, !tbaa !69
  %1124 = load double, ptr %1116, align 8, !tbaa !69
  %1125 = sext i32 %1101 to i64
  %1126 = sext i32 %1100 to i64
  %1127 = insertelement <2 x double> poison, double %1111, i64 0
  %1128 = insertelement <2 x double> %1127, double %1118, i64 1
  %1129 = insertelement <2 x double> poison, double %1120, i64 0
  %1130 = insertelement <2 x double> %1129, double %1122, i64 1
  %1131 = insertelement <2 x double> poison, double %1123, i64 0
  %1132 = insertelement <2 x double> %1131, double %1124, i64 1
  %1133 = insertelement <2 x double> poison, double %708, i64 0
  %1134 = shufflevector <2 x double> %1133, <2 x double> poison, <2 x i32> zeroinitializer
  %1135 = shufflevector <2 x double> %705, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1136 = shufflevector <2 x double> %705, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1137

1137:                                             ; preds = %1103, %1137
  %1138 = phi i64 [ %1125, %1103 ], [ %1183, %1137 ]
  %1139 = phi i32 [ %1093, %1103 ], [ %1185, %1137 ]
  %1140 = phi i32 [ 0, %1103 ], [ %1182, %1137 ]
  %1141 = phi i16 [ %1114, %1103 ], [ %1148, %1137 ]
  %1142 = phi i16 [ %1107, %1103 ], [ %1152, %1137 ]
  %1143 = phi <2 x double> [ %1128, %1103 ], [ %1187, %1137 ]
  %1144 = phi <2 x double> [ %1130, %1103 ], [ %1189, %1137 ]
  %1145 = phi <2 x double> [ %1132, %1103 ], [ %1191, %1137 ]
  %1146 = fsub <2 x double> %1134, %1143
  %1147 = getelementptr inbounds i16, ptr %1092, i64 %1138
  %1148 = load i16, ptr %1147, align 2, !tbaa !45
  %1149 = add nsw i32 %1139, 3
  %1150 = sext i32 %1149 to i64
  %1151 = getelementptr inbounds i16, ptr %1092, i64 %1150
  %1152 = load i16, ptr %1151, align 2, !tbaa !45
  %1153 = zext i16 %1148 to i64
  %1154 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1153
  %1155 = load double, ptr %1154, align 8, !tbaa !69
  %1156 = zext i16 %1152 to i64
  %1157 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1156
  %1158 = load double, ptr %1157, align 8, !tbaa !69
  %1159 = getelementptr inbounds %class.Vector, ptr %1154, i64 0, i32 1
  %1160 = load double, ptr %1159, align 8, !tbaa !68
  %1161 = getelementptr inbounds %class.Vector, ptr %1157, i64 0, i32 1
  %1162 = load double, ptr %1161, align 8, !tbaa !68
  %1163 = getelementptr inbounds %class.Vector, ptr %1154, i64 0, i32 2
  %1164 = load double, ptr %1163, align 8, !tbaa !50
  %1165 = getelementptr inbounds %class.Vector, ptr %1157, i64 0, i32 2
  %1166 = load double, ptr %1165, align 8, !tbaa !50
  %1167 = fsub <2 x double> %1136, %1145
  %1168 = fmul <2 x double> %1167, %1167
  %1169 = fsub <2 x double> %1135, %1144
  %1170 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1169, <2 x double> %1169, <2 x double> %1168)
  %1171 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1146, <2 x double> %1146, <2 x double> %1170)
  %1172 = fcmp olt <2 x double> %1171, %670
  %1173 = zext i32 %1140 to i64
  %1174 = getelementptr inbounds i16, ptr %288, i64 %1173
  store i16 %1141, ptr %1174, align 2, !tbaa !45
  %1175 = extractelement <2 x i1> %1172, i64 1
  %1176 = zext i1 %1175 to i32
  %1177 = add nuw nsw i32 %1140, %1176
  %1178 = zext i32 %1177 to i64
  %1179 = getelementptr inbounds i16, ptr %288, i64 %1178
  store i16 %1142, ptr %1179, align 2, !tbaa !45
  %1180 = extractelement <2 x i1> %1172, i64 0
  %1181 = zext i1 %1180 to i32
  %1182 = add i32 %1177, %1181
  %1183 = add nsw i64 %1138, 2
  %1184 = icmp slt i64 %1183, %1126
  %1185 = trunc i64 %1138 to i32
  %1186 = insertelement <2 x double> poison, double %1166, i64 0
  %1187 = insertelement <2 x double> %1186, double %1164, i64 1
  %1188 = insertelement <2 x double> poison, double %1162, i64 0
  %1189 = insertelement <2 x double> %1188, double %1160, i64 1
  %1190 = insertelement <2 x double> poison, double %1158, i64 0
  %1191 = insertelement <2 x double> %1190, double %1155, i64 1
  br i1 %1184, label %1137, label %1192

1192:                                             ; preds = %1137, %1099, %1096
  %1193 = phi i32 [ 0, %1096 ], [ 0, %1099 ], [ %1182, %1137 ]
  %1194 = phi i32 [ %1093, %1096 ], [ %1093, %1099 ], [ %1185, %1137 ]
  %1195 = icmp slt i32 %1194, %1094
  br i1 %1195, label %1196, label %1201

1196:                                             ; preds = %1192
  %1197 = sext i32 %1194 to i64
  %1198 = sext i32 %1094 to i64
  %1199 = extractelement <2 x double> %705, i64 0
  %1200 = extractelement <2 x double> %705, i64 1
  br label %1206

1201:                                             ; preds = %1229, %1192
  %1202 = phi i32 [ %1193, %1192 ], [ %1230, %1229 ]
  %1203 = icmp sgt i32 %1202, 0
  br i1 %1203, label %1204, label %1255

1204:                                             ; preds = %1201
  %1205 = zext i32 %1202 to i64
  br label %1233

1206:                                             ; preds = %1196, %1229
  %1207 = phi i64 [ %1197, %1196 ], [ %1231, %1229 ]
  %1208 = phi i32 [ %1193, %1196 ], [ %1230, %1229 ]
  %1209 = getelementptr inbounds i16, ptr %1092, i64 %1207
  %1210 = load i16, ptr %1209, align 2, !tbaa !45
  %1211 = zext i16 %1210 to i64
  %1212 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1211
  %1213 = load double, ptr %1212, align 8, !tbaa !69
  %1214 = getelementptr inbounds %class.Vector, ptr %1212, i64 0, i32 1
  %1215 = load double, ptr %1214, align 8, !tbaa !68
  %1216 = getelementptr inbounds %class.Vector, ptr %1212, i64 0, i32 2
  %1217 = load double, ptr %1216, align 8, !tbaa !50
  %1218 = fsub double %1199, %1213
  %1219 = fmul double %1218, %1218
  %1220 = fsub double %1200, %1215
  %1221 = tail call double @llvm.fmuladd.f64(double %1220, double %1220, double %1219)
  %1222 = fsub double %708, %1217
  %1223 = tail call double @llvm.fmuladd.f64(double %1222, double %1222, double %1221)
  %1224 = fcmp ugt double %1223, %27
  br i1 %1224, label %1229, label %1225

1225:                                             ; preds = %1206
  %1226 = add nsw i32 %1208, 1
  %1227 = sext i32 %1208 to i64
  %1228 = getelementptr inbounds i16, ptr %288, i64 %1227
  store i16 %1210, ptr %1228, align 2, !tbaa !45
  br label %1229

1229:                                             ; preds = %1225, %1206
  %1230 = phi i32 [ %1226, %1225 ], [ %1208, %1206 ]
  %1231 = add nsw i64 %1207, 1
  %1232 = icmp eq i64 %1231, %1198
  br i1 %1232, label %1201, label %1206

1233:                                             ; preds = %1204, %1250
  %1234 = phi i64 [ 0, %1204 ], [ %1253, %1250 ]
  %1235 = phi ptr [ %1091, %1204 ], [ %1252, %1250 ]
  %1236 = getelementptr inbounds i16, ptr %288, i64 %1234
  %1237 = load i16, ptr %1236, align 2, !tbaa !45
  %1238 = zext i16 %1237 to i64
  %1239 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1238, i32 4
  %1240 = load i8, ptr %1239, align 1
  %1241 = and i8 %1240, 7
  store i16 %1237, ptr %1235, align 2, !tbaa !45
  %1242 = getelementptr inbounds i16, ptr %1235, i64 1
  %1243 = insertelement <2 x i16> poison, i16 %1237, i64 0
  %1244 = shufflevector <2 x i16> %1243, <2 x i16> poison, <2 x i32> zeroinitializer
  %1245 = add <2 x i16> %1244, <i16 1, i16 2>
  store <2 x i16> %1245, ptr %1242, align 2, !tbaa !45
  %1246 = icmp ult i8 %1241, 4
  br i1 %1246, label %1250, label %1247

1247:                                             ; preds = %1233
  %1248 = add <2 x i16> %1244, <i16 3, i16 4>
  %1249 = getelementptr inbounds i16, ptr %1235, i64 3
  store <2 x i16> %1248, ptr %1249, align 2, !tbaa !45
  br label %1250

1250:                                             ; preds = %1247, %1233
  %1251 = zext i8 %1241 to i64
  %1252 = getelementptr inbounds i16, ptr %1235, i64 %1251
  %1253 = add nuw nsw i64 %1234, 1
  %1254 = icmp eq i64 %1253, %1205
  br i1 %1254, label %1255, label %1233

1255:                                             ; preds = %1250, %1201, %1088
  %1256 = phi ptr [ %1091, %1088 ], [ %1091, %1201 ], [ %1252, %1250 ]
  %1257 = ptrtoint ptr %1256 to i64
  %1258 = sub i64 %1257, %649
  %1259 = lshr exact i64 %1258, 1
  %1260 = trunc i64 %1259 to i32
  %1261 = icmp eq i32 %1260, 0
  br i1 %1261, label %1273, label %1262

1262:                                             ; preds = %1255
  %1263 = shl i64 %1258, 31
  %1264 = add i64 %1263, -4294967296
  %1265 = ashr i64 %1264, 32
  %1266 = getelementptr inbounds i16, ptr %426, i64 %1265
  %1267 = load i16, ptr %1266, align 2, !tbaa !45
  %1268 = ashr i64 %1263, 32
  %1269 = getelementptr inbounds i16, ptr %426, i64 %1268
  store i16 %1267, ptr %1269, align 2, !tbaa !45
  br label %1273

1270:                                             ; preds = %969
  %1271 = add nsw i32 %684, 1
  %1272 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1273

1273:                                             ; preds = %1255, %1262, %1270
  %1274 = phi i32 [ %1272, %1270 ], [ %978, %1262 ], [ %978, %1255 ]
  %1275 = phi i32 [ %1271, %1270 ], [ 0, %1262 ], [ 0, %1255 ]
  %1276 = phi i32 [ %683, %1270 ], [ %1260, %1262 ], [ 0, %1255 ]
  %1277 = phi i32 [ %682, %1270 ], [ %1019, %1262 ], [ %1019, %1255 ]
  %1278 = phi i32 [ %681, %1270 ], [ %1020, %1262 ], [ %1020, %1255 ]
  %1279 = icmp eq i32 %1274, 0
  br i1 %1279, label %1284, label %1280

1280:                                             ; preds = %1273
  %1281 = load i32, ptr %689, align 4
  %1282 = and i32 %1281, 1073741824
  %1283 = icmp ne i32 %1282, 0
  br label %1284

1284:                                             ; preds = %1280, %1273
  %1285 = phi i1 [ false, %1273 ], [ %1283, %1280 ]
  %1286 = load i32, ptr %17, align 8, !tbaa !19
  %1287 = add nsw i32 %650, %1286
  %1288 = load i32, ptr %651, align 4, !tbaa !70
  %1289 = icmp sgt i32 %1288, %1287
  br i1 %1289, label %1305, label %1290

1290:                                             ; preds = %1284, %1290
  %1291 = phi i32 [ %1293, %1290 ], [ %1288, %1284 ]
  %1292 = ashr i32 %1291, 1
  %1293 = add nsw i32 %1292, %1291
  %1294 = icmp sgt i32 %1293, %1287
  br i1 %1294, label %1295, label %1290

1295:                                             ; preds = %1290
  %1296 = sext i32 %1293 to i64
  %1297 = icmp slt i32 %1293, 0
  %1298 = shl nsw i64 %1296, 1
  %1299 = select i1 %1297, i64 -1, i64 %1298
  %1300 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1299) #9
  %1301 = load ptr, ptr %12, align 8, !tbaa !47
  %1302 = sext i32 %1286 to i64
  %1303 = shl nsw i64 %1302, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1300, ptr align 2 %1301, i64 %1303, i1 false)
  %1304 = icmp eq ptr %1301, null
  br i1 %1304, label %1309, label %1307

1305:                                             ; preds = %1284
  %1306 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1311

1307:                                             ; preds = %1295
  tail call void @_ZdaPv(ptr noundef nonnull %1301) #10
  %1308 = load i32, ptr %17, align 8, !tbaa !19
  br label %1309

1309:                                             ; preds = %1307, %1295
  %1310 = phi i32 [ %1308, %1307 ], [ %1286, %1295 ]
  store ptr %1300, ptr %12, align 8, !tbaa !47
  store i32 %1293, ptr %651, align 4, !tbaa !70
  br label %1311

1311:                                             ; preds = %1305, %1309
  %1312 = phi i32 [ %1286, %1305 ], [ %1310, %1309 ]
  %1313 = phi ptr [ %1306, %1305 ], [ %1300, %1309 ]
  %1314 = ptrtoint ptr %1313 to i64
  %1315 = add nsw i32 %1312, 1
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds i16, ptr %1313, i64 %1316
  %1318 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1319 = icmp eq i32 %1318, 0
  br i1 %1319, label %1500, label %1320

1320:                                             ; preds = %1311
  %1321 = load i8, ptr %709, align 2, !tbaa !52
  %1322 = zext i8 %1321 to i32
  %1323 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1324 = icmp eq i32 %1323, 0
  br i1 %1324, label %1379, label %1325

1325:                                             ; preds = %1320
  %1326 = icmp eq i8 %1321, 1
  br i1 %1326, label %1327, label %2897

1327:                                             ; preds = %1325
  %1328 = icmp slt i32 %1275, %1276
  br i1 %1328, label %1329, label %1440

1329:                                             ; preds = %1327
  %1330 = sext i32 %1275 to i64
  %1331 = sext i32 %1276 to i64
  %1332 = sub nsw i64 %1331, %1330
  %1333 = xor i64 %1330, -1
  %1334 = and i64 %1332, 1
  %1335 = icmp eq i64 %1334, 0
  br i1 %1335, label %1347, label %1336

1336:                                             ; preds = %1329
  %1337 = getelementptr inbounds i16, ptr %426, i64 %1330
  %1338 = load i16, ptr %1337, align 2, !tbaa !45
  %1339 = zext i16 %1338 to i64
  %1340 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1339, i32 3
  %1341 = load i8, ptr %1340, align 2, !tbaa !52
  %1342 = icmp eq i8 %1341, 1
  br i1 %1342, label %1343, label %1344

1343:                                             ; preds = %1336
  store i16 %1338, ptr %472, align 2, !tbaa !45
  br label %1344

1344:                                             ; preds = %1343, %1336
  %1345 = phi ptr [ %671, %1343 ], [ %472, %1336 ]
  %1346 = add nsw i64 %1330, 1
  br label %1347

1347:                                             ; preds = %1344, %1329
  %1348 = phi ptr [ undef, %1329 ], [ %1345, %1344 ]
  %1349 = phi i64 [ %1330, %1329 ], [ %1346, %1344 ]
  %1350 = phi ptr [ %472, %1329 ], [ %1345, %1344 ]
  %1351 = sub nsw i64 0, %1331
  %1352 = icmp eq i64 %1333, %1351
  br i1 %1352, label %1440, label %1353

1353:                                             ; preds = %1347, %1375
  %1354 = phi i64 [ %1377, %1375 ], [ %1349, %1347 ]
  %1355 = phi ptr [ %1376, %1375 ], [ %1350, %1347 ]
  %1356 = getelementptr inbounds i16, ptr %426, i64 %1354
  %1357 = load i16, ptr %1356, align 2, !tbaa !45
  %1358 = zext i16 %1357 to i64
  %1359 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1358, i32 3
  %1360 = load i8, ptr %1359, align 2, !tbaa !52
  %1361 = icmp eq i8 %1360, 1
  br i1 %1361, label %1362, label %1364

1362:                                             ; preds = %1353
  %1363 = getelementptr inbounds i16, ptr %1355, i64 1
  store i16 %1357, ptr %1355, align 2, !tbaa !45
  br label %1364

1364:                                             ; preds = %1362, %1353
  %1365 = phi ptr [ %1363, %1362 ], [ %1355, %1353 ]
  %1366 = add nsw i64 %1354, 1
  %1367 = getelementptr inbounds i16, ptr %426, i64 %1366
  %1368 = load i16, ptr %1367, align 2, !tbaa !45
  %1369 = zext i16 %1368 to i64
  %1370 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1369, i32 3
  %1371 = load i8, ptr %1370, align 2, !tbaa !52
  %1372 = icmp eq i8 %1371, 1
  br i1 %1372, label %1373, label %1375

1373:                                             ; preds = %1364
  %1374 = getelementptr inbounds i16, ptr %1365, i64 1
  store i16 %1368, ptr %1365, align 2, !tbaa !45
  br label %1375

1375:                                             ; preds = %1373, %1364
  %1376 = phi ptr [ %1374, %1373 ], [ %1365, %1364 ]
  %1377 = add nsw i64 %1354, 2
  %1378 = icmp eq i64 %1377, %1331
  br i1 %1378, label %1440, label %1353

1379:                                             ; preds = %1320
  %1380 = add i8 %1321, -3
  %1381 = icmp ult i8 %1380, -2
  br i1 %1381, label %2897, label %1382

1382:                                             ; preds = %1379
  %1383 = icmp slt i32 %1275, %1276
  br i1 %1383, label %1384, label %1440

1384:                                             ; preds = %1382
  %1385 = sext i32 %1275 to i64
  %1386 = sext i32 %1276 to i64
  %1387 = sub nsw i64 %1386, %1385
  %1388 = xor i64 %1385, -1
  %1389 = and i64 %1387, 1
  %1390 = icmp eq i64 %1389, 0
  br i1 %1390, label %1404, label %1391

1391:                                             ; preds = %1384
  %1392 = getelementptr inbounds i16, ptr %426, i64 %1385
  %1393 = load i16, ptr %1392, align 2, !tbaa !45
  %1394 = zext i16 %1393 to i64
  %1395 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1394, i32 3
  %1396 = load i8, ptr %1395, align 2, !tbaa !52
  %1397 = zext i8 %1396 to i32
  %1398 = add nuw nsw i32 %1397, %1322
  %1399 = icmp eq i32 %1398, 3
  br i1 %1399, label %1400, label %1401

1400:                                             ; preds = %1391
  store i16 %1393, ptr %472, align 2, !tbaa !45
  br label %1401

1401:                                             ; preds = %1400, %1391
  %1402 = phi ptr [ %672, %1400 ], [ %472, %1391 ]
  %1403 = add nsw i64 %1385, 1
  br label %1404

1404:                                             ; preds = %1401, %1384
  %1405 = phi ptr [ undef, %1384 ], [ %1402, %1401 ]
  %1406 = phi i64 [ %1385, %1384 ], [ %1403, %1401 ]
  %1407 = phi ptr [ %472, %1384 ], [ %1402, %1401 ]
  %1408 = sub nsw i64 0, %1386
  %1409 = icmp eq i64 %1388, %1408
  br i1 %1409, label %1440, label %1410

1410:                                             ; preds = %1404, %1436
  %1411 = phi i64 [ %1438, %1436 ], [ %1406, %1404 ]
  %1412 = phi ptr [ %1437, %1436 ], [ %1407, %1404 ]
  %1413 = getelementptr inbounds i16, ptr %426, i64 %1411
  %1414 = load i16, ptr %1413, align 2, !tbaa !45
  %1415 = zext i16 %1414 to i64
  %1416 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1415, i32 3
  %1417 = load i8, ptr %1416, align 2, !tbaa !52
  %1418 = zext i8 %1417 to i32
  %1419 = add nuw nsw i32 %1418, %1322
  %1420 = icmp eq i32 %1419, 3
  br i1 %1420, label %1421, label %1423

1421:                                             ; preds = %1410
  %1422 = getelementptr inbounds i16, ptr %1412, i64 1
  store i16 %1414, ptr %1412, align 2, !tbaa !45
  br label %1423

1423:                                             ; preds = %1421, %1410
  %1424 = phi ptr [ %1422, %1421 ], [ %1412, %1410 ]
  %1425 = add nsw i64 %1411, 1
  %1426 = getelementptr inbounds i16, ptr %426, i64 %1425
  %1427 = load i16, ptr %1426, align 2, !tbaa !45
  %1428 = zext i16 %1427 to i64
  %1429 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1428, i32 3
  %1430 = load i8, ptr %1429, align 2, !tbaa !52
  %1431 = zext i8 %1430 to i32
  %1432 = add nuw nsw i32 %1431, %1322
  %1433 = icmp eq i32 %1432, 3
  br i1 %1433, label %1434, label %1436

1434:                                             ; preds = %1423
  %1435 = getelementptr inbounds i16, ptr %1424, i64 1
  store i16 %1427, ptr %1424, align 2, !tbaa !45
  br label %1436

1436:                                             ; preds = %1434, %1423
  %1437 = phi ptr [ %1435, %1434 ], [ %1424, %1423 ]
  %1438 = add nsw i64 %1411, 2
  %1439 = icmp eq i64 %1438, %1386
  br i1 %1439, label %1440, label %1410

1440:                                             ; preds = %1347, %1375, %1404, %1436, %1327, %1382
  %1441 = phi ptr [ %472, %1382 ], [ %472, %1327 ], [ %1405, %1404 ], [ %1437, %1436 ], [ %1348, %1347 ], [ %1376, %1375 ]
  %1442 = ptrtoint ptr %1441 to i64
  %1443 = sub i64 %1442, %652
  %1444 = lshr exact i64 %1443, 1
  %1445 = trunc i64 %1444 to i32
  %1446 = icmp sgt i32 %1445, 0
  br i1 %1446, label %1447, label %1721

1447:                                             ; preds = %1440
  %1448 = and i64 %1444, 4294967295
  %1449 = extractelement <2 x double> %705, i64 0
  %1450 = extractelement <2 x double> %705, i64 1
  br label %1451

1451:                                             ; preds = %1447, %1495
  %1452 = phi i64 [ 0, %1447 ], [ %1498, %1495 ]
  %1453 = phi ptr [ %472, %1447 ], [ %1497, %1495 ]
  %1454 = phi ptr [ %1317, %1447 ], [ %1496, %1495 ]
  %1455 = getelementptr inbounds i16, ptr %472, i64 %1452
  %1456 = load i16, ptr %1455, align 2, !tbaa !45
  %1457 = zext i16 %1456 to i64
  %1458 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1457
  %1459 = load double, ptr %1458, align 8, !tbaa !69
  %1460 = fsub double %1449, %1459
  %1461 = fmul double %1460, %1460
  %1462 = getelementptr inbounds %class.Vector, ptr %1458, i64 0, i32 1
  %1463 = load double, ptr %1462, align 8, !tbaa !68
  %1464 = fsub double %1450, %1463
  %1465 = tail call double @llvm.fmuladd.f64(double %1464, double %1464, double %1461)
  %1466 = getelementptr inbounds %class.Vector, ptr %1458, i64 0, i32 2
  %1467 = load double, ptr %1466, align 8, !tbaa !50
  %1468 = fsub double %708, %1467
  %1469 = tail call double @llvm.fmuladd.f64(double %1468, double %1468, double %1465)
  br i1 %1285, label %1470, label %1477

1470:                                             ; preds = %1451
  %1471 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1457
  %1472 = load i32, ptr %1471, align 4
  %1473 = and i32 %1472, 1073741824
  %1474 = icmp ne i32 %1473, 0
  %1475 = fcmp ugt double %1469, %24
  %1476 = select i1 %1474, i1 true, i1 %1475
  br i1 %1476, label %1495, label %1482

1477:                                             ; preds = %1451
  %1478 = fcmp ugt double %1469, %24
  br i1 %1478, label %1495, label %1479

1479:                                             ; preds = %1477
  %1480 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1457
  %1481 = load i32, ptr %1480, align 4
  br label %1482

1482:                                             ; preds = %1479, %1470
  %1483 = phi i32 [ %1481, %1479 ], [ %1472, %1470 ]
  %1484 = shl i32 %1483, 2
  %1485 = ashr exact i32 %1484, 2
  %1486 = icmp slt i32 %1485, %733
  %1487 = icmp sgt i32 %1485, %735
  %1488 = select i1 %1486, i1 true, i1 %1487
  %1489 = select i1 %1488, ptr %1454, ptr %1453
  %1490 = zext i1 %1488 to i64
  %1491 = getelementptr inbounds i16, ptr %1454, i64 %1490
  %1492 = xor i1 %1488, true
  %1493 = zext i1 %1492 to i64
  %1494 = getelementptr inbounds i16, ptr %1453, i64 %1493
  store i16 %1456, ptr %1489, align 2, !tbaa !45
  br label %1495

1495:                                             ; preds = %1482, %1477, %1470
  %1496 = phi ptr [ %1454, %1470 ], [ %1454, %1477 ], [ %1491, %1482 ]
  %1497 = phi ptr [ %1453, %1470 ], [ %1453, %1477 ], [ %1494, %1482 ]
  %1498 = add nuw nsw i64 %1452, 1
  %1499 = icmp eq i64 %1498, %1448
  br i1 %1499, label %1721, label %1451

1500:                                             ; preds = %1311
  %1501 = icmp slt i32 %1275, %1276
  br i1 %1285, label %1502, label %1550

1502:                                             ; preds = %1500
  br i1 %1501, label %1503, label %1721

1503:                                             ; preds = %1502
  %1504 = sext i32 %1275 to i64
  %1505 = sext i32 %1276 to i64
  %1506 = extractelement <2 x double> %705, i64 0
  %1507 = extractelement <2 x double> %705, i64 1
  br label %1508

1508:                                             ; preds = %1503, %1545
  %1509 = phi i64 [ %1504, %1503 ], [ %1548, %1545 ]
  %1510 = phi ptr [ %472, %1503 ], [ %1547, %1545 ]
  %1511 = phi ptr [ %1317, %1503 ], [ %1546, %1545 ]
  %1512 = getelementptr inbounds i16, ptr %426, i64 %1509
  %1513 = load i16, ptr %1512, align 2, !tbaa !45
  %1514 = zext i16 %1513 to i64
  %1515 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1514
  %1516 = load i32, ptr %1515, align 4
  %1517 = and i32 %1516, 1073741824
  %1518 = icmp eq i32 %1517, 0
  br i1 %1518, label %1519, label %1545

1519:                                             ; preds = %1508
  %1520 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1514
  %1521 = getelementptr inbounds %class.Vector, ptr %1520, i64 0, i32 2
  %1522 = load double, ptr %1521, align 8, !tbaa !50
  %1523 = fsub double %708, %1522
  %1524 = getelementptr inbounds %class.Vector, ptr %1520, i64 0, i32 1
  %1525 = load double, ptr %1524, align 8, !tbaa !68
  %1526 = fsub double %1507, %1525
  %1527 = load double, ptr %1520, align 8, !tbaa !69
  %1528 = fsub double %1506, %1527
  %1529 = fmul double %1528, %1528
  %1530 = tail call double @llvm.fmuladd.f64(double %1526, double %1526, double %1529)
  %1531 = tail call double @llvm.fmuladd.f64(double %1523, double %1523, double %1530)
  %1532 = fcmp ugt double %1531, %24
  br i1 %1532, label %1545, label %1533

1533:                                             ; preds = %1519
  %1534 = shl i32 %1516, 2
  %1535 = ashr exact i32 %1534, 2
  %1536 = icmp slt i32 %1535, %733
  %1537 = icmp sgt i32 %1535, %735
  %1538 = select i1 %1536, i1 true, i1 %1537
  %1539 = select i1 %1538, ptr %1511, ptr %1510
  %1540 = zext i1 %1538 to i64
  %1541 = getelementptr inbounds i16, ptr %1511, i64 %1540
  %1542 = xor i1 %1538, true
  %1543 = zext i1 %1542 to i64
  %1544 = getelementptr inbounds i16, ptr %1510, i64 %1543
  store i16 %1513, ptr %1539, align 2, !tbaa !45
  br label %1545

1545:                                             ; preds = %1533, %1519, %1508
  %1546 = phi ptr [ %1511, %1508 ], [ %1511, %1519 ], [ %1541, %1533 ]
  %1547 = phi ptr [ %1510, %1508 ], [ %1510, %1519 ], [ %1544, %1533 ]
  %1548 = add nsw i64 %1509, 1
  %1549 = icmp eq i64 %1548, %1505
  br i1 %1549, label %1721, label %1508

1550:                                             ; preds = %1500
  br i1 %1501, label %1551, label %1721

1551:                                             ; preds = %1550
  %1552 = sub nsw i32 %1276, %1275
  %1553 = icmp sgt i32 %1552, 6
  br i1 %1553, label %1554, label %1672

1554:                                             ; preds = %1551
  %1555 = add nsw i32 %1276, -2
  %1556 = add nsw i32 %1275, 2
  %1557 = icmp slt i32 %1556, %1555
  br i1 %1557, label %1558, label %1672

1558:                                             ; preds = %1554
  %1559 = sext i32 %1275 to i64
  %1560 = getelementptr inbounds i16, ptr %426, i64 %1559
  %1561 = load i16, ptr %1560, align 2, !tbaa !45
  %1562 = zext i16 %1561 to i64
  %1563 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1562
  %1564 = load i32, ptr %1563, align 4
  %1565 = add nsw i32 %1275, 1
  %1566 = sext i32 %1565 to i64
  %1567 = getelementptr inbounds i16, ptr %426, i64 %1566
  %1568 = load i16, ptr %1567, align 2, !tbaa !45
  %1569 = zext i16 %1568 to i64
  %1570 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1569
  %1571 = getelementptr inbounds %class.Vector, ptr %1570, i64 0, i32 2
  %1572 = load double, ptr %1571, align 8, !tbaa !50
  %1573 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1562
  %1574 = getelementptr inbounds %class.Vector, ptr %1573, i64 0, i32 2
  %1575 = load double, ptr %1574, align 8, !tbaa !50
  %1576 = getelementptr inbounds %class.Vector, ptr %1570, i64 0, i32 1
  %1577 = load double, ptr %1576, align 8, !tbaa !68
  %1578 = getelementptr inbounds %class.Vector, ptr %1573, i64 0, i32 1
  %1579 = load double, ptr %1578, align 8, !tbaa !68
  %1580 = load double, ptr %1570, align 8, !tbaa !69
  %1581 = load double, ptr %1573, align 8, !tbaa !69
  %1582 = sext i32 %1556 to i64
  %1583 = sext i32 %1555 to i64
  %1584 = extractelement <2 x double> %705, i64 0
  %1585 = extractelement <2 x double> %705, i64 1
  br label %1586

1586:                                             ; preds = %1558, %1666
  %1587 = phi i64 [ %1582, %1558 ], [ %1669, %1666 ]
  %1588 = phi i64 [ %1569, %1558 ], [ %1626, %1666 ]
  %1589 = phi i32 [ %1564, %1558 ], [ %1654, %1666 ]
  %1590 = phi ptr [ %472, %1558 ], [ %1668, %1666 ]
  %1591 = phi ptr [ %1317, %1558 ], [ %1667, %1666 ]
  %1592 = phi i32 [ %1275, %1558 ], [ %1671, %1666 ]
  %1593 = phi i16 [ %1561, %1558 ], [ %1618, %1666 ]
  %1594 = phi i16 [ %1568, %1558 ], [ %1622, %1666 ]
  %1595 = phi double [ %1581, %1558 ], [ %1625, %1666 ]
  %1596 = phi double [ %1580, %1558 ], [ %1628, %1666 ]
  %1597 = phi double [ %1579, %1558 ], [ %1630, %1666 ]
  %1598 = phi double [ %1577, %1558 ], [ %1632, %1666 ]
  %1599 = phi double [ %1575, %1558 ], [ %1634, %1666 ]
  %1600 = phi double [ %1572, %1558 ], [ %1636, %1666 ]
  %1601 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1588
  %1602 = load i32, ptr %1601, align 4
  %1603 = shl i32 %1602, 2
  %1604 = ashr exact i32 %1603, 2
  %1605 = fsub double %1584, %1595
  %1606 = fsub double %1584, %1596
  %1607 = fmul double %1605, %1605
  %1608 = fmul double %1606, %1606
  %1609 = fsub double %1585, %1597
  %1610 = fsub double %1585, %1598
  %1611 = tail call double @llvm.fmuladd.f64(double %1609, double %1609, double %1607)
  %1612 = tail call double @llvm.fmuladd.f64(double %1610, double %1610, double %1608)
  %1613 = fsub double %708, %1599
  %1614 = fsub double %708, %1600
  %1615 = tail call double @llvm.fmuladd.f64(double %1613, double %1613, double %1611)
  %1616 = tail call double @llvm.fmuladd.f64(double %1614, double %1614, double %1612)
  %1617 = getelementptr inbounds i16, ptr %426, i64 %1587
  %1618 = load i16, ptr %1617, align 2, !tbaa !45
  %1619 = add nsw i32 %1592, 3
  %1620 = sext i32 %1619 to i64
  %1621 = getelementptr inbounds i16, ptr %426, i64 %1620
  %1622 = load i16, ptr %1621, align 2, !tbaa !45
  %1623 = zext i16 %1618 to i64
  %1624 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1623
  %1625 = load double, ptr %1624, align 8, !tbaa !69
  %1626 = zext i16 %1622 to i64
  %1627 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1626
  %1628 = load double, ptr %1627, align 8, !tbaa !69
  %1629 = getelementptr inbounds %class.Vector, ptr %1624, i64 0, i32 1
  %1630 = load double, ptr %1629, align 8, !tbaa !68
  %1631 = getelementptr inbounds %class.Vector, ptr %1627, i64 0, i32 1
  %1632 = load double, ptr %1631, align 8, !tbaa !68
  %1633 = getelementptr inbounds %class.Vector, ptr %1624, i64 0, i32 2
  %1634 = load double, ptr %1633, align 8, !tbaa !50
  %1635 = getelementptr inbounds %class.Vector, ptr %1627, i64 0, i32 2
  %1636 = load double, ptr %1635, align 8, !tbaa !50
  %1637 = fcmp ugt double %1615, %24
  br i1 %1637, label %1650, label %1638

1638:                                             ; preds = %1586
  %1639 = shl i32 %1589, 2
  %1640 = ashr exact i32 %1639, 2
  %1641 = icmp slt i32 %1640, %733
  %1642 = icmp sgt i32 %1640, %735
  %1643 = select i1 %1641, i1 true, i1 %1642
  %1644 = select i1 %1643, ptr %1591, ptr %1590
  %1645 = zext i1 %1643 to i64
  %1646 = getelementptr inbounds i16, ptr %1591, i64 %1645
  %1647 = xor i1 %1643, true
  %1648 = zext i1 %1647 to i64
  %1649 = getelementptr inbounds i16, ptr %1590, i64 %1648
  store i16 %1593, ptr %1644, align 2, !tbaa !45
  br label %1650

1650:                                             ; preds = %1638, %1586
  %1651 = phi ptr [ %1591, %1586 ], [ %1646, %1638 ]
  %1652 = phi ptr [ %1590, %1586 ], [ %1649, %1638 ]
  %1653 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1623
  %1654 = load i32, ptr %1653, align 4
  %1655 = fcmp ugt double %1616, %24
  br i1 %1655, label %1666, label %1656

1656:                                             ; preds = %1650
  %1657 = icmp slt i32 %1604, %733
  %1658 = icmp sgt i32 %1604, %735
  %1659 = select i1 %1657, i1 true, i1 %1658
  %1660 = select i1 %1659, ptr %1651, ptr %1652
  %1661 = zext i1 %1659 to i64
  %1662 = getelementptr inbounds i16, ptr %1651, i64 %1661
  %1663 = xor i1 %1659, true
  %1664 = zext i1 %1663 to i64
  %1665 = getelementptr inbounds i16, ptr %1652, i64 %1664
  store i16 %1594, ptr %1660, align 2, !tbaa !45
  br label %1666

1666:                                             ; preds = %1656, %1650
  %1667 = phi ptr [ %1651, %1650 ], [ %1662, %1656 ]
  %1668 = phi ptr [ %1652, %1650 ], [ %1665, %1656 ]
  %1669 = add nsw i64 %1587, 2
  %1670 = icmp slt i64 %1669, %1583
  %1671 = trunc i64 %1587 to i32
  br i1 %1670, label %1586, label %1672

1672:                                             ; preds = %1666, %1554, %1551
  %1673 = phi i32 [ %1275, %1551 ], [ %1275, %1554 ], [ %1671, %1666 ]
  %1674 = phi ptr [ %1317, %1551 ], [ %1317, %1554 ], [ %1667, %1666 ]
  %1675 = phi ptr [ %472, %1551 ], [ %472, %1554 ], [ %1668, %1666 ]
  %1676 = icmp slt i32 %1673, %1276
  br i1 %1676, label %1677, label %1721

1677:                                             ; preds = %1672
  %1678 = sext i32 %1673 to i64
  %1679 = sext i32 %1276 to i64
  %1680 = extractelement <2 x double> %705, i64 0
  %1681 = extractelement <2 x double> %705, i64 1
  br label %1682

1682:                                             ; preds = %1677, %1716
  %1683 = phi i64 [ %1678, %1677 ], [ %1719, %1716 ]
  %1684 = phi ptr [ %1675, %1677 ], [ %1718, %1716 ]
  %1685 = phi ptr [ %1674, %1677 ], [ %1717, %1716 ]
  %1686 = getelementptr inbounds i16, ptr %426, i64 %1683
  %1687 = load i16, ptr %1686, align 2, !tbaa !45
  %1688 = zext i16 %1687 to i64
  %1689 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %1688
  %1690 = load double, ptr %1689, align 8, !tbaa !69
  %1691 = getelementptr inbounds %class.Vector, ptr %1689, i64 0, i32 1
  %1692 = load double, ptr %1691, align 8, !tbaa !68
  %1693 = getelementptr inbounds %class.Vector, ptr %1689, i64 0, i32 2
  %1694 = load double, ptr %1693, align 8, !tbaa !50
  %1695 = fsub double %1680, %1690
  %1696 = fmul double %1695, %1695
  %1697 = fsub double %1681, %1692
  %1698 = tail call double @llvm.fmuladd.f64(double %1697, double %1697, double %1696)
  %1699 = fsub double %708, %1694
  %1700 = tail call double @llvm.fmuladd.f64(double %1699, double %1699, double %1698)
  %1701 = fcmp ugt double %1700, %24
  br i1 %1701, label %1716, label %1702

1702:                                             ; preds = %1682
  %1703 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1688
  %1704 = load i32, ptr %1703, align 4
  %1705 = shl i32 %1704, 2
  %1706 = ashr exact i32 %1705, 2
  %1707 = icmp slt i32 %1706, %733
  %1708 = icmp sgt i32 %1706, %735
  %1709 = select i1 %1707, i1 true, i1 %1708
  %1710 = select i1 %1709, ptr %1685, ptr %1684
  %1711 = zext i1 %1709 to i64
  %1712 = getelementptr inbounds i16, ptr %1685, i64 %1711
  %1713 = xor i1 %1709, true
  %1714 = zext i1 %1713 to i64
  %1715 = getelementptr inbounds i16, ptr %1684, i64 %1714
  store i16 %1687, ptr %1710, align 2, !tbaa !45
  br label %1716

1716:                                             ; preds = %1702, %1682
  %1717 = phi ptr [ %1685, %1682 ], [ %1712, %1702 ]
  %1718 = phi ptr [ %1684, %1682 ], [ %1715, %1702 ]
  %1719 = add nsw i64 %1683, 1
  %1720 = icmp eq i64 %1719, %1679
  br i1 %1720, label %1721, label %1682

1721:                                             ; preds = %1495, %1716, %1545, %1440, %1672, %1502, %1550
  %1722 = phi ptr [ %1317, %1550 ], [ %1317, %1502 ], [ %1674, %1672 ], [ %1317, %1440 ], [ %1546, %1545 ], [ %1717, %1716 ], [ %1496, %1495 ]
  %1723 = phi ptr [ %472, %1550 ], [ %472, %1502 ], [ %1675, %1672 ], [ %472, %1440 ], [ %1547, %1545 ], [ %1718, %1716 ], [ %1497, %1495 ]
  %1724 = ptrtoint ptr %1723 to i64
  %1725 = sub i64 %1724, %652
  %1726 = lshr exact i64 %1725, 1
  %1727 = trunc i64 %1726 to i32
  %1728 = icmp sgt i32 %1727, 0
  br i1 %1728, label %1729, label %1829

1729:                                             ; preds = %1721
  %1730 = and i64 %1726, 4294967295
  %1731 = and i64 %1726, 1
  %1732 = icmp eq i64 %1730, 1
  br i1 %1732, label %1797, label %1733

1733:                                             ; preds = %1729
  %1734 = sub nsw i64 %1730, %1731
  br label %1735

1735:                                             ; preds = %1790, %1733
  %1736 = phi i64 [ 0, %1733 ], [ %1794, %1790 ]
  %1737 = phi ptr [ %1722, %1733 ], [ %1793, %1790 ]
  %1738 = phi ptr [ %334, %1733 ], [ %1792, %1790 ]
  %1739 = phi ptr [ %380, %1733 ], [ %1791, %1790 ]
  %1740 = phi i64 [ 0, %1733 ], [ %1795, %1790 ]
  %1741 = getelementptr inbounds i16, ptr %472, i64 %1736
  %1742 = load i16, ptr %1741, align 2, !tbaa !45
  %1743 = zext i16 %1742 to i64
  %1744 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1743
  %1745 = load i32, ptr %1744, align 4
  %1746 = shl i32 %1745, 2
  %1747 = ashr exact i32 %1746, 2
  %1748 = sext i32 %1747 to i64
  %1749 = getelementptr inbounds i8, ptr %970, i64 %1748
  %1750 = load i8, ptr %1749, align 1, !tbaa !59
  %1751 = sext i8 %1750 to i32
  switch i32 %1751, label %1763 [
    i32 0, label %1752
    i32 1, label %1754
    i32 2, label %1756
  ]

1752:                                             ; preds = %1735
  %1753 = getelementptr inbounds i16, ptr %1737, i64 1
  br label %1758

1754:                                             ; preds = %1735
  %1755 = getelementptr inbounds i16, ptr %1738, i64 1
  br label %1758

1756:                                             ; preds = %1735
  %1757 = getelementptr inbounds i16, ptr %1739, i64 1
  br label %1758

1758:                                             ; preds = %1752, %1754, %1756
  %1759 = phi ptr [ %1739, %1756 ], [ %1738, %1754 ], [ %1737, %1752 ]
  %1760 = phi ptr [ %1757, %1756 ], [ %1739, %1754 ], [ %1739, %1752 ]
  %1761 = phi ptr [ %1738, %1756 ], [ %1755, %1754 ], [ %1738, %1752 ]
  %1762 = phi ptr [ %1737, %1756 ], [ %1737, %1754 ], [ %1753, %1752 ]
  store i16 %1742, ptr %1759, align 2, !tbaa !45
  br label %1763

1763:                                             ; preds = %1758, %1735
  %1764 = phi ptr [ %1739, %1735 ], [ %1760, %1758 ]
  %1765 = phi ptr [ %1738, %1735 ], [ %1761, %1758 ]
  %1766 = phi ptr [ %1737, %1735 ], [ %1762, %1758 ]
  %1767 = or i64 %1736, 1
  %1768 = getelementptr inbounds i16, ptr %472, i64 %1767
  %1769 = load i16, ptr %1768, align 2, !tbaa !45
  %1770 = zext i16 %1769 to i64
  %1771 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1770
  %1772 = load i32, ptr %1771, align 4
  %1773 = shl i32 %1772, 2
  %1774 = ashr exact i32 %1773, 2
  %1775 = sext i32 %1774 to i64
  %1776 = getelementptr inbounds i8, ptr %970, i64 %1775
  %1777 = load i8, ptr %1776, align 1, !tbaa !59
  %1778 = sext i8 %1777 to i32
  switch i32 %1778, label %1790 [
    i32 0, label %1783
    i32 1, label %1781
    i32 2, label %1779
  ]

1779:                                             ; preds = %1763
  %1780 = getelementptr inbounds i16, ptr %1764, i64 1
  br label %1785

1781:                                             ; preds = %1763
  %1782 = getelementptr inbounds i16, ptr %1765, i64 1
  br label %1785

1783:                                             ; preds = %1763
  %1784 = getelementptr inbounds i16, ptr %1766, i64 1
  br label %1785

1785:                                             ; preds = %1783, %1781, %1779
  %1786 = phi ptr [ %1764, %1779 ], [ %1765, %1781 ], [ %1766, %1783 ]
  %1787 = phi ptr [ %1780, %1779 ], [ %1764, %1781 ], [ %1764, %1783 ]
  %1788 = phi ptr [ %1765, %1779 ], [ %1782, %1781 ], [ %1765, %1783 ]
  %1789 = phi ptr [ %1766, %1779 ], [ %1766, %1781 ], [ %1784, %1783 ]
  store i16 %1769, ptr %1786, align 2, !tbaa !45
  br label %1790

1790:                                             ; preds = %1785, %1763
  %1791 = phi ptr [ %1764, %1763 ], [ %1787, %1785 ]
  %1792 = phi ptr [ %1765, %1763 ], [ %1788, %1785 ]
  %1793 = phi ptr [ %1766, %1763 ], [ %1789, %1785 ]
  %1794 = add nuw nsw i64 %1736, 2
  %1795 = add i64 %1740, 2
  %1796 = icmp eq i64 %1795, %1734
  br i1 %1796, label %1797, label %1735

1797:                                             ; preds = %1790, %1729
  %1798 = phi ptr [ undef, %1729 ], [ %1791, %1790 ]
  %1799 = phi ptr [ undef, %1729 ], [ %1792, %1790 ]
  %1800 = phi ptr [ undef, %1729 ], [ %1793, %1790 ]
  %1801 = phi i64 [ 0, %1729 ], [ %1794, %1790 ]
  %1802 = phi ptr [ %1722, %1729 ], [ %1793, %1790 ]
  %1803 = phi ptr [ %334, %1729 ], [ %1792, %1790 ]
  %1804 = phi ptr [ %380, %1729 ], [ %1791, %1790 ]
  %1805 = icmp eq i64 %1731, 0
  br i1 %1805, label %1829, label %1806

1806:                                             ; preds = %1797
  %1807 = getelementptr inbounds i16, ptr %472, i64 %1801
  %1808 = load i16, ptr %1807, align 2, !tbaa !45
  %1809 = zext i16 %1808 to i64
  %1810 = getelementptr inbounds %struct.CompAtomExt, ptr %50, i64 %1809
  %1811 = load i32, ptr %1810, align 4
  %1812 = shl i32 %1811, 2
  %1813 = ashr exact i32 %1812, 2
  %1814 = sext i32 %1813 to i64
  %1815 = getelementptr inbounds i8, ptr %970, i64 %1814
  %1816 = load i8, ptr %1815, align 1, !tbaa !59
  %1817 = sext i8 %1816 to i32
  switch i32 %1817, label %1829 [
    i32 0, label %1822
    i32 1, label %1820
    i32 2, label %1818
  ]

1818:                                             ; preds = %1806
  %1819 = getelementptr inbounds i16, ptr %1804, i64 1
  br label %1824

1820:                                             ; preds = %1806
  %1821 = getelementptr inbounds i16, ptr %1803, i64 1
  br label %1824

1822:                                             ; preds = %1806
  %1823 = getelementptr inbounds i16, ptr %1802, i64 1
  br label %1824

1824:                                             ; preds = %1822, %1820, %1818
  %1825 = phi ptr [ %1804, %1818 ], [ %1803, %1820 ], [ %1802, %1822 ]
  %1826 = phi ptr [ %1819, %1818 ], [ %1804, %1820 ], [ %1804, %1822 ]
  %1827 = phi ptr [ %1803, %1818 ], [ %1821, %1820 ], [ %1803, %1822 ]
  %1828 = phi ptr [ %1802, %1818 ], [ %1802, %1820 ], [ %1823, %1822 ]
  store i16 %1808, ptr %1825, align 2, !tbaa !45
  br label %1829

1829:                                             ; preds = %1797, %1824, %1806, %1721
  %1830 = phi ptr [ %380, %1721 ], [ %1798, %1797 ], [ %1804, %1806 ], [ %1826, %1824 ]
  %1831 = phi ptr [ %334, %1721 ], [ %1799, %1797 ], [ %1803, %1806 ], [ %1827, %1824 ]
  %1832 = phi ptr [ %1722, %1721 ], [ %1800, %1797 ], [ %1802, %1806 ], [ %1828, %1824 ]
  %1833 = ptrtoint ptr %1832 to i64
  %1834 = ptrtoint ptr %1317 to i64
  %1835 = sub i64 %1833, %1834
  %1836 = lshr exact i64 %1835, 1
  %1837 = trunc i64 %1836 to i32
  %1838 = icmp eq i32 %1837, 0
  %1839 = shl i64 %1835, 31
  br i1 %1838, label %1845, label %1840

1840:                                             ; preds = %1829
  %1841 = add i64 %1839, -4294967296
  %1842 = ashr i64 %1841, 32
  %1843 = getelementptr inbounds i16, ptr %1317, i64 %1842
  %1844 = load i16, ptr %1843, align 2, !tbaa !45
  br label %1845

1845:                                             ; preds = %1829, %1840
  %1846 = phi i16 [ %1844, %1840 ], [ -1, %1829 ]
  %1847 = ashr i64 %1839, 32
  %1848 = getelementptr inbounds i16, ptr %1317, i64 %1847
  store i16 %1846, ptr %1848, align 2, !tbaa !45
  %1849 = trunc i64 %1836 to i16
  %1850 = add i16 %1849, 1
  %1851 = load i32, ptr %17, align 8, !tbaa !19
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr inbounds i16, ptr %1313, i64 %1852
  store i16 %1850, ptr %1853, align 2, !tbaa !45
  %1854 = add nsw i32 %1837, 2
  %1855 = add nsw i32 %1854, %1851
  %1856 = ptrtoint ptr %1831 to i64
  %1857 = sub i64 %1856, %653
  %1858 = lshr exact i64 %1857, 1
  %1859 = trunc i64 %1858 to i32
  %1860 = add nsw i32 %1855, 1
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr i16, ptr %1313, i64 %1861
  %1863 = icmp sgt i32 %1859, 0
  br i1 %1863, label %1864, label %1954

1864:                                             ; preds = %1845
  %1865 = and i64 %1858, 4294967295
  %1866 = icmp ult i64 %1865, 8
  br i1 %1866, label %1910, label %1867

1867:                                             ; preds = %1864
  %1868 = shl nsw i64 %1861, 1
  %1869 = add i64 %1868, %1314
  %1870 = sub i64 %1869, %653
  %1871 = icmp ult i64 %1870, 128
  br i1 %1871, label %1910, label %1872

1872:                                             ; preds = %1867
  %1873 = icmp ult i64 %1865, 64
  br i1 %1873, label %1897, label %1874

1874:                                             ; preds = %1872
  %1875 = and i64 %1858, 63
  %1876 = sub nsw i64 %1865, %1875
  br label %1877

1877:                                             ; preds = %1877, %1874
  %1878 = phi i64 [ 0, %1874 ], [ %1891, %1877 ]
  %1879 = getelementptr inbounds i16, ptr %334, i64 %1878
  %1880 = load <16 x i16>, ptr %1879, align 2, !tbaa !45
  %1881 = getelementptr inbounds i16, ptr %1879, i64 16
  %1882 = load <16 x i16>, ptr %1881, align 2, !tbaa !45
  %1883 = getelementptr inbounds i16, ptr %1879, i64 32
  %1884 = load <16 x i16>, ptr %1883, align 2, !tbaa !45
  %1885 = getelementptr inbounds i16, ptr %1879, i64 48
  %1886 = load <16 x i16>, ptr %1885, align 2, !tbaa !45
  %1887 = getelementptr inbounds i16, ptr %1862, i64 %1878
  store <16 x i16> %1880, ptr %1887, align 2, !tbaa !45
  %1888 = getelementptr inbounds i16, ptr %1887, i64 16
  store <16 x i16> %1882, ptr %1888, align 2, !tbaa !45
  %1889 = getelementptr inbounds i16, ptr %1887, i64 32
  store <16 x i16> %1884, ptr %1889, align 2, !tbaa !45
  %1890 = getelementptr inbounds i16, ptr %1887, i64 48
  store <16 x i16> %1886, ptr %1890, align 2, !tbaa !45
  %1891 = add nuw i64 %1878, 64
  %1892 = icmp eq i64 %1891, %1876
  br i1 %1892, label %1893, label %1877, !llvm.loop !231

1893:                                             ; preds = %1877
  %1894 = icmp eq i64 %1875, 0
  br i1 %1894, label %1948, label %1895

1895:                                             ; preds = %1893
  %1896 = icmp ult i64 %1875, 8
  br i1 %1896, label %1910, label %1897

1897:                                             ; preds = %1872, %1895
  %1898 = phi i64 [ %1876, %1895 ], [ 0, %1872 ]
  %1899 = and i64 %1858, 7
  %1900 = sub nsw i64 %1865, %1899
  br label %1901

1901:                                             ; preds = %1901, %1897
  %1902 = phi i64 [ %1898, %1897 ], [ %1906, %1901 ]
  %1903 = getelementptr inbounds i16, ptr %334, i64 %1902
  %1904 = load <8 x i16>, ptr %1903, align 2, !tbaa !45
  %1905 = getelementptr inbounds i16, ptr %1862, i64 %1902
  store <8 x i16> %1904, ptr %1905, align 2, !tbaa !45
  %1906 = add nuw i64 %1902, 8
  %1907 = icmp eq i64 %1906, %1900
  br i1 %1907, label %1908, label %1901, !llvm.loop !232

1908:                                             ; preds = %1901
  %1909 = icmp eq i64 %1899, 0
  br i1 %1909, label %1948, label %1910

1910:                                             ; preds = %1867, %1864, %1895, %1908
  %1911 = phi i64 [ 0, %1864 ], [ 0, %1867 ], [ %1876, %1895 ], [ %1900, %1908 ]
  %1912 = sub i64 %1858, %1911
  %1913 = xor i64 %1911, -1
  %1914 = add nsw i64 %1865, %1913
  %1915 = and i64 %1912, 3
  %1916 = icmp eq i64 %1915, 0
  br i1 %1916, label %1926, label %1917

1917:                                             ; preds = %1910, %1917
  %1918 = phi i64 [ %1923, %1917 ], [ %1911, %1910 ]
  %1919 = phi i64 [ %1924, %1917 ], [ 0, %1910 ]
  %1920 = getelementptr inbounds i16, ptr %334, i64 %1918
  %1921 = load i16, ptr %1920, align 2, !tbaa !45
  %1922 = getelementptr inbounds i16, ptr %1862, i64 %1918
  store i16 %1921, ptr %1922, align 2, !tbaa !45
  %1923 = add nuw nsw i64 %1918, 1
  %1924 = add i64 %1919, 1
  %1925 = icmp eq i64 %1924, %1915
  br i1 %1925, label %1926, label %1917, !llvm.loop !233

1926:                                             ; preds = %1917, %1910
  %1927 = phi i64 [ %1911, %1910 ], [ %1923, %1917 ]
  %1928 = icmp ult i64 %1914, 3
  br i1 %1928, label %1948, label %1929

1929:                                             ; preds = %1926, %1929
  %1930 = phi i64 [ %1946, %1929 ], [ %1927, %1926 ]
  %1931 = getelementptr inbounds i16, ptr %334, i64 %1930
  %1932 = load i16, ptr %1931, align 2, !tbaa !45
  %1933 = getelementptr inbounds i16, ptr %1862, i64 %1930
  store i16 %1932, ptr %1933, align 2, !tbaa !45
  %1934 = add nuw nsw i64 %1930, 1
  %1935 = getelementptr inbounds i16, ptr %334, i64 %1934
  %1936 = load i16, ptr %1935, align 2, !tbaa !45
  %1937 = getelementptr inbounds i16, ptr %1862, i64 %1934
  store i16 %1936, ptr %1937, align 2, !tbaa !45
  %1938 = add nuw nsw i64 %1930, 2
  %1939 = getelementptr inbounds i16, ptr %334, i64 %1938
  %1940 = load i16, ptr %1939, align 2, !tbaa !45
  %1941 = getelementptr inbounds i16, ptr %1862, i64 %1938
  store i16 %1940, ptr %1941, align 2, !tbaa !45
  %1942 = add nuw nsw i64 %1930, 3
  %1943 = getelementptr inbounds i16, ptr %334, i64 %1942
  %1944 = load i16, ptr %1943, align 2, !tbaa !45
  %1945 = getelementptr inbounds i16, ptr %1862, i64 %1942
  store i16 %1944, ptr %1945, align 2, !tbaa !45
  %1946 = add nuw nsw i64 %1930, 4
  %1947 = icmp eq i64 %1946, %1865
  br i1 %1947, label %1948, label %1929, !llvm.loop !234

1948:                                             ; preds = %1926, %1929, %1893, %1908
  %1949 = shl i64 %1857, 31
  %1950 = add i64 %1949, -4294967296
  %1951 = ashr i64 %1950, 32
  %1952 = getelementptr inbounds i16, ptr %1862, i64 %1951
  %1953 = load i16, ptr %1952, align 2, !tbaa !45
  br label %1954

1954:                                             ; preds = %1845, %1948
  %1955 = phi i64 [ %1858, %1948 ], [ 0, %1845 ]
  %1956 = phi i16 [ %1953, %1948 ], [ -1, %1845 ]
  %1957 = and i64 %1955, 4294967295
  %1958 = getelementptr inbounds i16, ptr %1862, i64 %1957
  store i16 %1956, ptr %1958, align 2, !tbaa !45
  %1959 = trunc i64 %1858 to i16
  %1960 = add i16 %1959, 1
  %1961 = sext i32 %1855 to i64
  %1962 = getelementptr inbounds i16, ptr %1313, i64 %1961
  store i16 %1960, ptr %1962, align 2, !tbaa !45
  %1963 = add nsw i32 %1859, 2
  %1964 = add nsw i32 %1963, %1855
  %1965 = ptrtoint ptr %1830 to i64
  %1966 = sub i64 %1965, %654
  %1967 = lshr exact i64 %1966, 1
  %1968 = trunc i64 %1967 to i32
  %1969 = add nsw i32 %1964, 1
  %1970 = sext i32 %1969 to i64
  %1971 = getelementptr i16, ptr %1313, i64 %1970
  %1972 = icmp sgt i32 %1968, 0
  br i1 %1972, label %1973, label %2063

1973:                                             ; preds = %1954
  %1974 = and i64 %1967, 4294967295
  %1975 = icmp ult i64 %1974, 8
  br i1 %1975, label %2019, label %1976

1976:                                             ; preds = %1973
  %1977 = shl nsw i64 %1970, 1
  %1978 = add i64 %1977, %1314
  %1979 = sub i64 %1978, %654
  %1980 = icmp ult i64 %1979, 128
  br i1 %1980, label %2019, label %1981

1981:                                             ; preds = %1976
  %1982 = icmp ult i64 %1974, 64
  br i1 %1982, label %2006, label %1983

1983:                                             ; preds = %1981
  %1984 = and i64 %1967, 63
  %1985 = sub nsw i64 %1974, %1984
  br label %1986

1986:                                             ; preds = %1986, %1983
  %1987 = phi i64 [ 0, %1983 ], [ %2000, %1986 ]
  %1988 = getelementptr inbounds i16, ptr %380, i64 %1987
  %1989 = load <16 x i16>, ptr %1988, align 2, !tbaa !45
  %1990 = getelementptr inbounds i16, ptr %1988, i64 16
  %1991 = load <16 x i16>, ptr %1990, align 2, !tbaa !45
  %1992 = getelementptr inbounds i16, ptr %1988, i64 32
  %1993 = load <16 x i16>, ptr %1992, align 2, !tbaa !45
  %1994 = getelementptr inbounds i16, ptr %1988, i64 48
  %1995 = load <16 x i16>, ptr %1994, align 2, !tbaa !45
  %1996 = getelementptr inbounds i16, ptr %1971, i64 %1987
  store <16 x i16> %1989, ptr %1996, align 2, !tbaa !45
  %1997 = getelementptr inbounds i16, ptr %1996, i64 16
  store <16 x i16> %1991, ptr %1997, align 2, !tbaa !45
  %1998 = getelementptr inbounds i16, ptr %1996, i64 32
  store <16 x i16> %1993, ptr %1998, align 2, !tbaa !45
  %1999 = getelementptr inbounds i16, ptr %1996, i64 48
  store <16 x i16> %1995, ptr %1999, align 2, !tbaa !45
  %2000 = add nuw i64 %1987, 64
  %2001 = icmp eq i64 %2000, %1985
  br i1 %2001, label %2002, label %1986, !llvm.loop !235

2002:                                             ; preds = %1986
  %2003 = icmp eq i64 %1984, 0
  br i1 %2003, label %2057, label %2004

2004:                                             ; preds = %2002
  %2005 = icmp ult i64 %1984, 8
  br i1 %2005, label %2019, label %2006

2006:                                             ; preds = %1981, %2004
  %2007 = phi i64 [ %1985, %2004 ], [ 0, %1981 ]
  %2008 = and i64 %1967, 7
  %2009 = sub nsw i64 %1974, %2008
  br label %2010

2010:                                             ; preds = %2010, %2006
  %2011 = phi i64 [ %2007, %2006 ], [ %2015, %2010 ]
  %2012 = getelementptr inbounds i16, ptr %380, i64 %2011
  %2013 = load <8 x i16>, ptr %2012, align 2, !tbaa !45
  %2014 = getelementptr inbounds i16, ptr %1971, i64 %2011
  store <8 x i16> %2013, ptr %2014, align 2, !tbaa !45
  %2015 = add nuw i64 %2011, 8
  %2016 = icmp eq i64 %2015, %2009
  br i1 %2016, label %2017, label %2010, !llvm.loop !236

2017:                                             ; preds = %2010
  %2018 = icmp eq i64 %2008, 0
  br i1 %2018, label %2057, label %2019

2019:                                             ; preds = %1976, %1973, %2004, %2017
  %2020 = phi i64 [ 0, %1973 ], [ 0, %1976 ], [ %1985, %2004 ], [ %2009, %2017 ]
  %2021 = sub i64 %1967, %2020
  %2022 = xor i64 %2020, -1
  %2023 = add nsw i64 %1974, %2022
  %2024 = and i64 %2021, 3
  %2025 = icmp eq i64 %2024, 0
  br i1 %2025, label %2035, label %2026

2026:                                             ; preds = %2019, %2026
  %2027 = phi i64 [ %2032, %2026 ], [ %2020, %2019 ]
  %2028 = phi i64 [ %2033, %2026 ], [ 0, %2019 ]
  %2029 = getelementptr inbounds i16, ptr %380, i64 %2027
  %2030 = load i16, ptr %2029, align 2, !tbaa !45
  %2031 = getelementptr inbounds i16, ptr %1971, i64 %2027
  store i16 %2030, ptr %2031, align 2, !tbaa !45
  %2032 = add nuw nsw i64 %2027, 1
  %2033 = add i64 %2028, 1
  %2034 = icmp eq i64 %2033, %2024
  br i1 %2034, label %2035, label %2026, !llvm.loop !237

2035:                                             ; preds = %2026, %2019
  %2036 = phi i64 [ %2020, %2019 ], [ %2032, %2026 ]
  %2037 = icmp ult i64 %2023, 3
  br i1 %2037, label %2057, label %2038

2038:                                             ; preds = %2035, %2038
  %2039 = phi i64 [ %2055, %2038 ], [ %2036, %2035 ]
  %2040 = getelementptr inbounds i16, ptr %380, i64 %2039
  %2041 = load i16, ptr %2040, align 2, !tbaa !45
  %2042 = getelementptr inbounds i16, ptr %1971, i64 %2039
  store i16 %2041, ptr %2042, align 2, !tbaa !45
  %2043 = add nuw nsw i64 %2039, 1
  %2044 = getelementptr inbounds i16, ptr %380, i64 %2043
  %2045 = load i16, ptr %2044, align 2, !tbaa !45
  %2046 = getelementptr inbounds i16, ptr %1971, i64 %2043
  store i16 %2045, ptr %2046, align 2, !tbaa !45
  %2047 = add nuw nsw i64 %2039, 2
  %2048 = getelementptr inbounds i16, ptr %380, i64 %2047
  %2049 = load i16, ptr %2048, align 2, !tbaa !45
  %2050 = getelementptr inbounds i16, ptr %1971, i64 %2047
  store i16 %2049, ptr %2050, align 2, !tbaa !45
  %2051 = add nuw nsw i64 %2039, 3
  %2052 = getelementptr inbounds i16, ptr %380, i64 %2051
  %2053 = load i16, ptr %2052, align 2, !tbaa !45
  %2054 = getelementptr inbounds i16, ptr %1971, i64 %2051
  store i16 %2053, ptr %2054, align 2, !tbaa !45
  %2055 = add nuw nsw i64 %2039, 4
  %2056 = icmp eq i64 %2055, %1974
  br i1 %2056, label %2057, label %2038, !llvm.loop !238

2057:                                             ; preds = %2035, %2038, %2002, %2017
  %2058 = shl i64 %1966, 31
  %2059 = add i64 %2058, -4294967296
  %2060 = ashr i64 %2059, 32
  %2061 = getelementptr inbounds i16, ptr %1971, i64 %2060
  %2062 = load i16, ptr %2061, align 2, !tbaa !45
  br label %2063

2063:                                             ; preds = %1954, %2057
  %2064 = phi i64 [ %1967, %2057 ], [ 0, %1954 ]
  %2065 = phi i16 [ %2062, %2057 ], [ -1, %1954 ]
  %2066 = and i64 %2064, 4294967295
  %2067 = getelementptr inbounds i16, ptr %1971, i64 %2066
  store i16 %2065, ptr %2067, align 2, !tbaa !45
  %2068 = trunc i64 %1967 to i16
  %2069 = add i16 %2068, 1
  %2070 = sext i32 %1964 to i64
  %2071 = getelementptr inbounds i16, ptr %1313, i64 %2070
  store i16 %2069, ptr %2071, align 2, !tbaa !45
  %2072 = add nsw i32 %1968, 2
  %2073 = add nsw i32 %2072, %1964
  %2074 = select i1 %147, i32 0, i32 %2073
  store i32 %2074, ptr %17, align 8
  br label %2106

2075:                                             ; preds = %702
  %2076 = load ptr, ptr %12, align 8, !tbaa !47
  %2077 = load i32, ptr %17, align 8, !tbaa !19
  %2078 = add i32 %2077, 1
  %2079 = sext i32 %2078 to i64
  %2080 = getelementptr inbounds i16, ptr %2076, i64 %2079
  %2081 = sext i32 %2077 to i64
  %2082 = getelementptr inbounds i16, ptr %2076, i64 %2081
  %2083 = load i16, ptr %2082, align 2, !tbaa !45
  %2084 = zext i16 %2083 to i32
  %2085 = add i32 %2078, %2084
  %2086 = add nsw i32 %2084, -1
  %2087 = add i32 %2085, 1
  %2088 = sext i32 %2087 to i64
  %2089 = getelementptr inbounds i16, ptr %2076, i64 %2088
  %2090 = sext i32 %2085 to i64
  %2091 = getelementptr inbounds i16, ptr %2076, i64 %2090
  %2092 = load i16, ptr %2091, align 2, !tbaa !45
  %2093 = zext i16 %2092 to i32
  %2094 = add i32 %2087, %2093
  %2095 = add nsw i32 %2093, -1
  %2096 = add i32 %2094, 1
  %2097 = sext i32 %2096 to i64
  %2098 = getelementptr inbounds i16, ptr %2076, i64 %2097
  %2099 = sext i32 %2094 to i64
  %2100 = getelementptr inbounds i16, ptr %2076, i64 %2099
  %2101 = load i16, ptr %2100, align 2, !tbaa !45
  %2102 = zext i16 %2101 to i32
  %2103 = add i32 %2096, %2102
  store i32 %2103, ptr %17, align 8, !tbaa !19
  %2104 = add nsw i32 %2102, -1
  %2105 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2106

2106:                                             ; preds = %2063, %2075
  %2107 = phi i32 [ %2105, %2075 ], [ %1318, %2063 ]
  %2108 = phi i32 [ %2104, %2075 ], [ %1968, %2063 ]
  %2109 = phi ptr [ %2098, %2075 ], [ %1971, %2063 ]
  %2110 = phi i32 [ %2095, %2075 ], [ %1859, %2063 ]
  %2111 = phi ptr [ %2089, %2075 ], [ %1862, %2063 ]
  %2112 = phi i32 [ %2086, %2075 ], [ %1837, %2063 ]
  %2113 = phi ptr [ %2080, %2075 ], [ %1317, %2063 ]
  %2114 = phi i32 [ %684, %2075 ], [ %1275, %2063 ]
  %2115 = phi i32 [ %683, %2075 ], [ %1276, %2063 ]
  %2116 = phi i32 [ %682, %2075 ], [ %1277, %2063 ]
  %2117 = phi i32 [ %681, %2075 ], [ %1278, %2063 ]
  %2118 = phi ptr [ %679, %2075 ], [ %971, %2063 ]
  %2119 = phi ptr [ %678, %2075 ], [ %972, %2063 ]
  %2120 = phi ptr [ %677, %2075 ], [ %973, %2063 ]
  %2121 = icmp eq i32 %2107, 0
  %2122 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2123 = icmp ne i32 %2122, 0
  %2124 = select i1 %2121, i1 true, i1 %2123
  br i1 %2124, label %2129, label %2125

2125:                                             ; preds = %2106
  %2126 = load i8, ptr %709, align 2, !tbaa !52
  %2127 = icmp eq i8 %2126, 1
  %2128 = select i1 %2127, double 1.000000e+00, double -1.000000e+00
  br label %2129

2129:                                             ; preds = %2106, %2125
  %2130 = phi double [ %2128, %2125 ], [ 0.000000e+00, %2106 ]
  %2131 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %687, i32 1
  %2132 = load float, ptr %2131, align 8, !tbaa !81
  %2133 = fpext float %2132 to double
  %2134 = fmul double %2133, 0x4074C104816F0069
  %2135 = fmul double %33, %2134
  %2136 = fmul double %28, %2135
  %2137 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %687, i32 2
  %2138 = load i16, ptr %2137, align 4, !tbaa !82
  %2139 = sext i16 %2138 to i32
  %2140 = load ptr, ptr %655, align 8, !tbaa !83
  %2141 = load i32, ptr %656, align 8, !tbaa !85
  %2142 = shl nsw i32 %2139, 1
  %2143 = mul i32 %2142, %2141
  %2144 = zext i32 %2143 to i64
  %2145 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2140, i64 %2144
  %2146 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2147 = extractelement <2 x double> %705, i64 0
  %2148 = extractelement <2 x double> %705, i64 1
  %2149 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2146, double noundef %2147, double noundef %2148, double noundef %708, ptr noundef %46, ptr noundef nonnull %2113, i32 noundef %2112, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2150 = icmp sgt i32 %2149, 0
  br i1 %2150, label %2151, label %2420

2151:                                             ; preds = %2129
  %2152 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2153 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2154 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2155 = mul nsw i32 %2154, %711
  %2156 = mul i32 %2153, 3
  %2157 = mul nsw i32 %723, 3
  %2158 = sext i32 %2157 to i64
  %2159 = add nsw i32 %2157, 1
  %2160 = sext i32 %2159 to i64
  %2161 = add nsw i32 %2157, 2
  %2162 = sext i32 %2161 to i64
  %2163 = zext i32 %2149 to i64
  br label %2164

2164:                                             ; preds = %2151, %2164
  %2165 = phi i64 [ 0, %2151 ], [ %2418, %2164 ]
  %2166 = phi double [ %675, %2151 ], [ %2239, %2164 ]
  %2167 = phi double [ 0.000000e+00, %2151 ], [ %2362, %2164 ]
  %2168 = phi double [ 0.000000e+00, %2151 ], [ %2380, %2164 ]
  %2169 = phi <2 x double> [ zeroinitializer, %2151 ], [ %2361, %2164 ]
  %2170 = phi <2 x double> [ zeroinitializer, %2151 ], [ %2376, %2164 ]
  %2171 = phi <2 x double> [ %686, %2151 ], [ %2363, %2164 ]
  %2172 = shl nuw nsw i64 %2165, 1
  %2173 = getelementptr inbounds i32, ptr %146, i64 %2172
  %2174 = load i32, ptr %2173, align 4, !tbaa !5
  %2175 = ashr i32 %2174, 14
  %2176 = add nsw i32 %2175, %39
  %2177 = getelementptr inbounds i16, ptr %99, i64 %2165
  %2178 = load i16, ptr %2177, align 2, !tbaa !45
  %2179 = zext i16 %2178 to i64
  %2180 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2179
  %2181 = getelementptr inbounds double, ptr %145, i64 %2165
  %2182 = load double, ptr %2181, align 8, !tbaa !15
  %2183 = sext i32 %2176 to i64
  %2184 = getelementptr inbounds double, ptr %2152, i64 %2183
  %2185 = load double, ptr %2184, align 8, !tbaa !15
  %2186 = fsub double %2182, %2185
  %2187 = shl nsw i32 %2176, 4
  %2188 = sext i32 %2187 to i64
  %2189 = getelementptr inbounds double, ptr %31, i64 %2188
  %2190 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2179, i32 2
  %2191 = load i16, ptr %2190, align 4, !tbaa !82
  %2192 = sext i16 %2191 to i32
  %2193 = shl nsw i32 %2192, 1
  %2194 = sext i32 %2193 to i64
  %2195 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2145, i64 %2194
  %2196 = getelementptr inbounds %class.Vector, ptr %630, i64 %2179
  %2197 = getelementptr inbounds %class.Vector, ptr %636, i64 %2179
  %2198 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2179, i32 1
  %2199 = load float, ptr %2198, align 8, !tbaa !81
  %2200 = fpext float %2199 to double
  %2201 = fmul double %2136, %2200
  %2202 = getelementptr inbounds %class.Vector, ptr %2180, i64 0, i32 2
  %2203 = load double, ptr %2202, align 8, !tbaa !50
  %2204 = fsub double %708, %2203
  %2205 = load double, ptr %2195, align 8, !tbaa !86
  %2206 = fmul double %33, %2205
  %2207 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2145, i64 %2194, i32 1
  %2208 = load double, ptr %2207, align 8, !tbaa !88
  %2209 = load double, ptr %2189, align 8, !tbaa !15
  %2210 = getelementptr inbounds double, ptr %2189, i64 2
  %2211 = load double, ptr %2210, align 8, !tbaa !15
  %2212 = fmul double %2208, %657
  %2213 = fmul double %2212, %2211
  %2214 = tail call double @llvm.fmuladd.f64(double %2206, double %2209, double %2213)
  %2215 = getelementptr inbounds double, ptr %2189, i64 1
  %2216 = load double, ptr %2215, align 8, !tbaa !15
  %2217 = getelementptr inbounds double, ptr %2189, i64 3
  %2218 = load double, ptr %2217, align 8, !tbaa !15
  %2219 = fmul double %2212, %2218
  %2220 = tail call double @llvm.fmuladd.f64(double %2206, double %2216, double %2219)
  %2221 = getelementptr inbounds double, ptr %2189, i64 4
  %2222 = load double, ptr %2221, align 8, !tbaa !15
  %2223 = getelementptr inbounds double, ptr %2189, i64 6
  %2224 = load double, ptr %2223, align 8, !tbaa !15
  %2225 = fmul double %2212, %2224
  %2226 = tail call double @llvm.fmuladd.f64(double %2206, double %2222, double %2225)
  %2227 = getelementptr inbounds double, ptr %2189, i64 5
  %2228 = load double, ptr %2227, align 8, !tbaa !15
  %2229 = getelementptr inbounds double, ptr %2189, i64 7
  %2230 = load double, ptr %2229, align 8, !tbaa !15
  %2231 = fmul double %2212, %2230
  %2232 = tail call double @llvm.fmuladd.f64(double %2206, double %2228, double %2231)
  %2233 = fmul double %2186, %2214
  %2234 = fmul double %2220, 2.500000e-01
  %2235 = tail call double @llvm.fmuladd.f64(double %2233, double 0x3FC5555555555555, double %2234)
  %2236 = fmul double %2226, 5.000000e-01
  %2237 = tail call double @llvm.fmuladd.f64(double %2235, double %2186, double %2236)
  %2238 = tail call double @llvm.fmuladd.f64(double %2237, double %2186, double %2232)
  %2239 = fsub double %2166, %2238
  %2240 = tail call double @llvm.fmuladd.f64(double %2186, double %2214, double %2220)
  %2241 = tail call double @llvm.fmuladd.f64(double %2240, double %2186, double %2226)
  %2242 = fmul double %2130, %2241
  %2243 = load double, ptr %659, align 8, !tbaa !15
  %2244 = tail call double @llvm.fmuladd.f64(double %2242, double %2204, double %2243)
  %2245 = getelementptr inbounds double, ptr %2189, i64 8
  %2246 = getelementptr inbounds double, ptr %2189, i64 9
  %2247 = getelementptr inbounds double, ptr %2189, i64 10
  %2248 = getelementptr inbounds double, ptr %2189, i64 11
  %2249 = load double, ptr %660, align 8, !tbaa !15
  %2250 = load double, ptr %661, align 8, !tbaa !15
  %2251 = load double, ptr %662, align 8, !tbaa !15
  %2252 = load <2 x double>, ptr %2180, align 8, !tbaa !15
  %2253 = fsub <2 x double> %705, %2252
  %2254 = load <2 x double>, ptr %658, align 8, !tbaa !15
  %2255 = insertelement <2 x double> poison, double %2242, i64 0
  %2256 = shufflevector <2 x double> %2255, <2 x double> poison, <2 x i32> zeroinitializer
  %2257 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2256, <2 x double> %2253, <2 x double> %2254)
  store <2 x double> %2257, ptr %658, align 8, !tbaa !15
  store double %2244, ptr %659, align 8, !tbaa !15
  %2258 = load double, ptr %2245, align 8, !tbaa !15
  %2259 = load double, ptr %2246, align 8, !tbaa !15
  %2260 = load double, ptr %2247, align 8, !tbaa !15
  %2261 = load double, ptr %2248, align 8, !tbaa !15
  %2262 = getelementptr inbounds %class.Vector, ptr %630, i64 %2179, i32 2
  %2263 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2179, i32 3
  %2264 = load i8, ptr %2263, align 2, !tbaa !52
  %2265 = zext i8 %2264 to i32
  %2266 = add nsw i32 %2155, %2265
  %2267 = mul i32 %2156, %2266
  %2268 = sext i32 %2267 to i64
  %2269 = getelementptr inbounds double, ptr %8, i64 %2268
  %2270 = getelementptr inbounds double, ptr %2269, i64 %2158
  %2271 = getelementptr inbounds double, ptr %2269, i64 %2160
  %2272 = getelementptr inbounds double, ptr %2269, i64 %2162
  %2273 = getelementptr inbounds double, ptr %2189, i64 12
  %2274 = getelementptr inbounds double, ptr %2189, i64 13
  %2275 = getelementptr inbounds double, ptr %2189, i64 14
  %2276 = getelementptr inbounds double, ptr %2189, i64 15
  %2277 = fmul double %2201, %2258
  %2278 = fmul double %2201, %2259
  %2279 = fmul double %2201, %2260
  %2280 = tail call double @llvm.fmuladd.f64(double %2186, double %2277, double %2278)
  %2281 = tail call double @llvm.fmuladd.f64(double %2280, double %2186, double %2279)
  %2282 = fmul double %2130, %2281
  %2283 = extractelement <2 x double> %2253, i64 0
  %2284 = tail call double @llvm.fmuladd.f64(double %2282, double %2283, double %2249)
  store double %2284, ptr %660, align 8, !tbaa !15
  %2285 = extractelement <2 x double> %2253, i64 1
  %2286 = tail call double @llvm.fmuladd.f64(double %2282, double %2285, double %2250)
  store double %2286, ptr %661, align 8, !tbaa !15
  %2287 = tail call double @llvm.fmuladd.f64(double %2282, double %2204, double %2251)
  store double %2287, ptr %662, align 8, !tbaa !15
  %2288 = fadd double %2214, %2277
  %2289 = fadd double %2220, %2278
  %2290 = fadd double %2226, %2279
  %2291 = tail call double @llvm.fmuladd.f64(double %2186, double %2288, double %2289)
  %2292 = tail call double @llvm.fmuladd.f64(double %2291, double %2186, double %2290)
  %2293 = insertelement <2 x double> poison, double %2292, i64 0
  %2294 = shufflevector <2 x double> %2293, <2 x double> poison, <2 x i32> zeroinitializer
  %2295 = fmul <2 x double> %2253, %2294
  %2296 = load <2 x double>, ptr %2196, align 8, !tbaa !15
  %2297 = fsub <2 x double> %2296, %2295
  store <2 x double> %2297, ptr %2196, align 8, !tbaa !15
  %2298 = fmul double %2204, %2292
  %2299 = load double, ptr %2262, align 8, !tbaa !89
  %2300 = fsub double %2299, %2298
  store double %2300, ptr %2262, align 8, !tbaa !89
  %2301 = load double, ptr %2202, align 8, !tbaa !50
  %2302 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2303 = fsub double %2301, %2302
  %2304 = fmul double %10, %2303
  %2305 = tail call double @llvm.floor.f64(double %2304)
  %2306 = fptosi double %2305 to i32
  %2307 = icmp slt i32 %2306, 0
  %2308 = select i1 %2307, i32 %2153, i32 0
  %2309 = icmp sgt i32 %2153, %2306
  %2310 = select i1 %2309, i32 0, i32 %2153
  %2311 = sub i32 %2306, %2310
  %2312 = add i32 %2311, %2308
  %2313 = fmul double %2204, %2298
  %2314 = fmul double %2313, 5.000000e-01
  %2315 = load double, ptr %2270, align 8, !tbaa !15
  %2316 = load double, ptr %2271, align 8, !tbaa !15
  %2317 = load double, ptr %2272, align 8, !tbaa !15
  %2318 = fadd double %2314, %2317
  store double %2318, ptr %2272, align 8, !tbaa !15
  %2319 = mul nsw i32 %2312, 3
  %2320 = sext i32 %2319 to i64
  %2321 = getelementptr inbounds double, ptr %2269, i64 %2320
  %2322 = fmul <2 x double> %2253, %2295
  %2323 = fmul <2 x double> %2322, <double 5.000000e-01, double 5.000000e-01>
  %2324 = extractelement <2 x double> %2323, i64 0
  %2325 = fadd double %2324, %2315
  store double %2325, ptr %2270, align 8, !tbaa !15
  %2326 = extractelement <2 x double> %2323, i64 1
  %2327 = fadd double %2326, %2316
  store double %2327, ptr %2271, align 8, !tbaa !15
  %2328 = load <2 x double>, ptr %2321, align 8, !tbaa !15
  %2329 = fadd <2 x double> %2323, %2328
  store <2 x double> %2329, ptr %2321, align 8, !tbaa !15
  %2330 = add nsw i32 %2319, 2
  %2331 = sext i32 %2330 to i64
  %2332 = getelementptr inbounds double, ptr %2269, i64 %2331
  %2333 = load double, ptr %2332, align 8, !tbaa !15
  %2334 = fadd double %2314, %2333
  store double %2334, ptr %2332, align 8, !tbaa !15
  %2335 = load double, ptr %2273, align 8, !tbaa !15
  %2336 = load double, ptr %2274, align 8, !tbaa !15
  %2337 = load double, ptr %2275, align 8, !tbaa !15
  %2338 = load double, ptr %2276, align 8, !tbaa !15
  %2339 = fmul double %2201, %2335
  %2340 = fmul double %2201, %2336
  %2341 = fmul double %2201, %2337
  %2342 = insertelement <2 x double> poison, double %2201, i64 0
  %2343 = shufflevector <2 x double> %2342, <2 x double> poison, <2 x i32> zeroinitializer
  %2344 = insertelement <2 x double> poison, double %2261, i64 0
  %2345 = insertelement <2 x double> %2344, double %2338, i64 1
  %2346 = fmul <2 x double> %2343, %2345
  %2347 = insertelement <2 x double> poison, double %2186, i64 0
  %2348 = shufflevector <2 x double> %2347, <2 x double> poison, <2 x i32> zeroinitializer
  %2349 = insertelement <2 x double> poison, double %2277, i64 0
  %2350 = insertelement <2 x double> %2349, double %2339, i64 1
  %2351 = fmul <2 x double> %2348, %2350
  %2352 = insertelement <2 x double> poison, double %2278, i64 0
  %2353 = insertelement <2 x double> %2352, double %2340, i64 1
  %2354 = fmul <2 x double> %2353, <double 2.500000e-01, double 2.500000e-01>
  %2355 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2351, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2354)
  %2356 = insertelement <2 x double> poison, double %2279, i64 0
  %2357 = insertelement <2 x double> %2356, double %2341, i64 1
  %2358 = fmul <2 x double> %2357, <double 5.000000e-01, double 5.000000e-01>
  %2359 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2355, <2 x double> %2348, <2 x double> %2358)
  %2360 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2359, <2 x double> %2348, <2 x double> %2346)
  %2361 = fadd <2 x double> %2169, %2295
  %2362 = fadd double %2167, %2298
  %2363 = fsub <2 x double> %2171, %2360
  %2364 = tail call double @llvm.fmuladd.f64(double %2186, double %2339, double %2340)
  %2365 = tail call double @llvm.fmuladd.f64(double %2364, double %2186, double %2341)
  %2366 = fmul double %2130, %2365
  %2367 = load <2 x double>, ptr %660, align 8, !tbaa !15
  %2368 = insertelement <2 x double> poison, double %2366, i64 0
  %2369 = shufflevector <2 x double> %2368, <2 x double> poison, <2 x i32> zeroinitializer
  %2370 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2369, <2 x double> %2253, <2 x double> %2367)
  store <2 x double> %2370, ptr %660, align 8, !tbaa !15
  %2371 = load double, ptr %662, align 8, !tbaa !15
  %2372 = tail call double @llvm.fmuladd.f64(double %2366, double %2204, double %2371)
  store double %2372, ptr %662, align 8, !tbaa !15
  %2373 = insertelement <2 x double> poison, double %2365, i64 0
  %2374 = shufflevector <2 x double> %2373, <2 x double> poison, <2 x i32> zeroinitializer
  %2375 = fmul <2 x double> %2253, %2374
  %2376 = fadd <2 x double> %2170, %2375
  %2377 = load <2 x double>, ptr %2197, align 8, !tbaa !15
  %2378 = fsub <2 x double> %2377, %2375
  store <2 x double> %2378, ptr %2197, align 8, !tbaa !15
  %2379 = fmul double %2204, %2365
  %2380 = fadd double %2168, %2379
  %2381 = getelementptr inbounds %class.Vector, ptr %636, i64 %2179, i32 2
  %2382 = load double, ptr %2381, align 8, !tbaa !89
  %2383 = fsub double %2382, %2379
  store double %2383, ptr %2381, align 8, !tbaa !89
  %2384 = load double, ptr %2202, align 8, !tbaa !50
  %2385 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2386 = fsub double %2384, %2385
  %2387 = fmul double %10, %2386
  %2388 = tail call double @llvm.floor.f64(double %2387)
  %2389 = fptosi double %2388 to i32
  %2390 = icmp slt i32 %2389, 0
  %2391 = select i1 %2390, i32 %2153, i32 0
  %2392 = icmp sgt i32 %2153, %2389
  %2393 = select i1 %2392, i32 0, i32 %2153
  %2394 = sub i32 %2389, %2393
  %2395 = add i32 %2394, %2391
  %2396 = fmul double %2204, %2379
  %2397 = fmul double %2396, 5.000000e-01
  %2398 = load double, ptr %2270, align 8, !tbaa !15
  %2399 = load double, ptr %2271, align 8, !tbaa !15
  %2400 = load double, ptr %2272, align 8, !tbaa !15
  %2401 = fadd double %2397, %2400
  store double %2401, ptr %2272, align 8, !tbaa !15
  %2402 = mul nsw i32 %2395, 3
  %2403 = sext i32 %2402 to i64
  %2404 = getelementptr inbounds double, ptr %2269, i64 %2403
  %2405 = fmul <2 x double> %2253, %2375
  %2406 = fmul <2 x double> %2405, <double 5.000000e-01, double 5.000000e-01>
  %2407 = extractelement <2 x double> %2406, i64 0
  %2408 = fadd double %2407, %2398
  store double %2408, ptr %2270, align 8, !tbaa !15
  %2409 = extractelement <2 x double> %2406, i64 1
  %2410 = fadd double %2409, %2399
  store double %2410, ptr %2271, align 8, !tbaa !15
  %2411 = load <2 x double>, ptr %2404, align 8, !tbaa !15
  %2412 = fadd <2 x double> %2406, %2411
  store <2 x double> %2412, ptr %2404, align 8, !tbaa !15
  %2413 = add nsw i32 %2402, 2
  %2414 = sext i32 %2413 to i64
  %2415 = getelementptr inbounds double, ptr %2269, i64 %2414
  %2416 = load double, ptr %2415, align 8, !tbaa !15
  %2417 = fadd double %2397, %2416
  store double %2417, ptr %2415, align 8, !tbaa !15
  %2418 = add nuw nsw i64 %2165, 1
  %2419 = icmp eq i64 %2418, %2163
  br i1 %2419, label %2420, label %2164

2420:                                             ; preds = %2164, %2129
  %2421 = phi double [ 0.000000e+00, %2129 ], [ %2380, %2164 ]
  %2422 = phi double [ 0.000000e+00, %2129 ], [ %2362, %2164 ]
  %2423 = phi double [ %675, %2129 ], [ %2239, %2164 ]
  %2424 = phi <2 x double> [ zeroinitializer, %2129 ], [ %2361, %2164 ]
  %2425 = phi <2 x double> [ zeroinitializer, %2129 ], [ %2376, %2164 ]
  %2426 = phi <2 x double> [ %686, %2129 ], [ %2363, %2164 ]
  %2427 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2428 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2427, double noundef %2147, double noundef %2148, double noundef %708, ptr noundef %46, ptr noundef %2109, i32 noundef %2108, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2429 = add nsw i32 %2428, %674
  %2430 = icmp sgt i32 %2428, 0
  br i1 %2430, label %2431, label %2716

2431:                                             ; preds = %2420
  %2432 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2433 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2434 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2435 = mul nsw i32 %2434, %711
  %2436 = mul i32 %2433, 3
  %2437 = mul nsw i32 %723, 3
  %2438 = sext i32 %2437 to i64
  %2439 = add nsw i32 %2437, 1
  %2440 = sext i32 %2439 to i64
  %2441 = add nsw i32 %2437, 2
  %2442 = sext i32 %2441 to i64
  %2443 = zext i32 %2428 to i64
  br label %2444

2444:                                             ; preds = %2431, %2444
  %2445 = phi i64 [ 0, %2431 ], [ %2714, %2444 ]
  %2446 = phi double [ %2423, %2431 ], [ %2519, %2444 ]
  %2447 = phi double [ %2422, %2431 ], [ %2658, %2444 ]
  %2448 = phi double [ %2421, %2431 ], [ %2676, %2444 ]
  %2449 = phi <2 x double> [ %2424, %2431 ], [ %2657, %2444 ]
  %2450 = phi <2 x double> [ %2425, %2431 ], [ %2672, %2444 ]
  %2451 = phi <2 x double> [ %2426, %2431 ], [ %2659, %2444 ]
  %2452 = shl nuw nsw i64 %2445, 1
  %2453 = getelementptr inbounds i32, ptr %146, i64 %2452
  %2454 = load i32, ptr %2453, align 4, !tbaa !5
  %2455 = ashr i32 %2454, 14
  %2456 = add nsw i32 %2455, %39
  %2457 = getelementptr inbounds i16, ptr %99, i64 %2445
  %2458 = load i16, ptr %2457, align 2, !tbaa !45
  %2459 = zext i16 %2458 to i64
  %2460 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2459
  %2461 = getelementptr inbounds double, ptr %145, i64 %2445
  %2462 = load double, ptr %2461, align 8, !tbaa !15
  %2463 = sext i32 %2456 to i64
  %2464 = getelementptr inbounds double, ptr %2432, i64 %2463
  %2465 = load double, ptr %2464, align 8, !tbaa !15
  %2466 = fsub double %2462, %2465
  %2467 = shl nsw i32 %2456, 4
  %2468 = sext i32 %2467 to i64
  %2469 = getelementptr inbounds double, ptr %31, i64 %2468
  %2470 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2459, i32 2
  %2471 = load i16, ptr %2470, align 4, !tbaa !82
  %2472 = sext i16 %2471 to i32
  %2473 = shl nsw i32 %2472, 1
  %2474 = sext i32 %2473 to i64
  %2475 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2145, i64 %2474
  %2476 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2475, i64 1
  %2477 = getelementptr inbounds %class.Vector, ptr %630, i64 %2459
  %2478 = getelementptr inbounds %class.Vector, ptr %636, i64 %2459
  %2479 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2459, i32 1
  %2480 = load float, ptr %2479, align 8, !tbaa !81
  %2481 = fpext float %2480 to double
  %2482 = getelementptr inbounds %class.Vector, ptr %2460, i64 0, i32 2
  %2483 = load double, ptr %2482, align 8, !tbaa !50
  %2484 = fsub double %708, %2483
  %2485 = load double, ptr %2476, align 8, !tbaa !86
  %2486 = fmul double %33, %2485
  %2487 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2475, i64 1, i32 1
  %2488 = load double, ptr %2487, align 8, !tbaa !88
  %2489 = load double, ptr %2469, align 8, !tbaa !15
  %2490 = getelementptr inbounds double, ptr %2469, i64 2
  %2491 = load double, ptr %2490, align 8, !tbaa !15
  %2492 = fmul double %2488, %657
  %2493 = fmul double %2492, %2491
  %2494 = tail call double @llvm.fmuladd.f64(double %2486, double %2489, double %2493)
  %2495 = getelementptr inbounds double, ptr %2469, i64 1
  %2496 = load double, ptr %2495, align 8, !tbaa !15
  %2497 = getelementptr inbounds double, ptr %2469, i64 3
  %2498 = load double, ptr %2497, align 8, !tbaa !15
  %2499 = fmul double %2492, %2498
  %2500 = tail call double @llvm.fmuladd.f64(double %2486, double %2496, double %2499)
  %2501 = getelementptr inbounds double, ptr %2469, i64 4
  %2502 = load double, ptr %2501, align 8, !tbaa !15
  %2503 = getelementptr inbounds double, ptr %2469, i64 6
  %2504 = load double, ptr %2503, align 8, !tbaa !15
  %2505 = fmul double %2492, %2504
  %2506 = tail call double @llvm.fmuladd.f64(double %2486, double %2502, double %2505)
  %2507 = getelementptr inbounds double, ptr %2469, i64 5
  %2508 = load double, ptr %2507, align 8, !tbaa !15
  %2509 = getelementptr inbounds double, ptr %2469, i64 7
  %2510 = load double, ptr %2509, align 8, !tbaa !15
  %2511 = fmul double %2492, %2510
  %2512 = tail call double @llvm.fmuladd.f64(double %2486, double %2508, double %2511)
  %2513 = fmul double %2466, %2494
  %2514 = fmul double %2500, 2.500000e-01
  %2515 = tail call double @llvm.fmuladd.f64(double %2513, double 0x3FC5555555555555, double %2514)
  %2516 = fmul double %2506, 5.000000e-01
  %2517 = tail call double @llvm.fmuladd.f64(double %2515, double %2466, double %2516)
  %2518 = tail call double @llvm.fmuladd.f64(double %2517, double %2466, double %2512)
  %2519 = fsub double %2446, %2518
  %2520 = tail call double @llvm.fmuladd.f64(double %2466, double %2494, double %2500)
  %2521 = tail call double @llvm.fmuladd.f64(double %2520, double %2466, double %2506)
  %2522 = fmul double %2130, %2521
  %2523 = load double, ptr %659, align 8, !tbaa !15
  %2524 = tail call double @llvm.fmuladd.f64(double %2522, double %2484, double %2523)
  %2525 = getelementptr inbounds double, ptr %2469, i64 8
  %2526 = getelementptr inbounds double, ptr %2469, i64 9
  %2527 = getelementptr inbounds double, ptr %2469, i64 10
  %2528 = getelementptr inbounds double, ptr %2469, i64 11
  %2529 = load double, ptr %660, align 8, !tbaa !15
  %2530 = load double, ptr %661, align 8, !tbaa !15
  %2531 = load double, ptr %662, align 8, !tbaa !15
  %2532 = load <2 x double>, ptr %2460, align 8, !tbaa !15
  %2533 = fsub <2 x double> %705, %2532
  %2534 = load <2 x double>, ptr %658, align 8, !tbaa !15
  %2535 = insertelement <2 x double> poison, double %2522, i64 0
  %2536 = shufflevector <2 x double> %2535, <2 x double> poison, <2 x i32> zeroinitializer
  %2537 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2536, <2 x double> %2533, <2 x double> %2534)
  store <2 x double> %2537, ptr %658, align 8, !tbaa !15
  store double %2524, ptr %659, align 8, !tbaa !15
  %2538 = load double, ptr %2525, align 8, !tbaa !15
  %2539 = load double, ptr %2526, align 8, !tbaa !15
  %2540 = load double, ptr %2527, align 8, !tbaa !15
  %2541 = load double, ptr %2528, align 8, !tbaa !15
  %2542 = getelementptr inbounds %class.Vector, ptr %630, i64 %2459, i32 2
  %2543 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2459, i32 3
  %2544 = load i8, ptr %2543, align 2, !tbaa !52
  %2545 = zext i8 %2544 to i32
  %2546 = add nsw i32 %2435, %2545
  %2547 = mul i32 %2436, %2546
  %2548 = sext i32 %2547 to i64
  %2549 = getelementptr inbounds double, ptr %8, i64 %2548
  %2550 = getelementptr inbounds double, ptr %2549, i64 %2438
  %2551 = getelementptr inbounds double, ptr %2549, i64 %2440
  %2552 = getelementptr inbounds double, ptr %2549, i64 %2442
  %2553 = shl nsw i32 %2456, 2
  %2554 = sext i32 %2553 to i64
  %2555 = getelementptr inbounds double, ptr %32, i64 %2554
  %2556 = getelementptr inbounds double, ptr %2469, i64 12
  %2557 = getelementptr inbounds double, ptr %2469, i64 13
  %2558 = getelementptr inbounds double, ptr %2469, i64 14
  %2559 = getelementptr inbounds double, ptr %2469, i64 15
  %2560 = getelementptr inbounds double, ptr %2555, i64 1
  %2561 = getelementptr inbounds double, ptr %2555, i64 2
  %2562 = getelementptr inbounds double, ptr %2555, i64 3
  %2563 = fmul double %2136, %2481
  %2564 = fmul double %663, %2563
  %2565 = fmul double %2564, %2538
  %2566 = fmul double %2564, %2539
  %2567 = fmul double %2564, %2540
  %2568 = tail call double @llvm.fmuladd.f64(double %2466, double %2565, double %2566)
  %2569 = tail call double @llvm.fmuladd.f64(double %2568, double %2466, double %2567)
  %2570 = fmul double %2130, %2569
  %2571 = extractelement <2 x double> %2533, i64 0
  %2572 = tail call double @llvm.fmuladd.f64(double %2570, double %2571, double %2529)
  store double %2572, ptr %660, align 8, !tbaa !15
  %2573 = extractelement <2 x double> %2533, i64 1
  %2574 = tail call double @llvm.fmuladd.f64(double %2570, double %2573, double %2530)
  store double %2574, ptr %661, align 8, !tbaa !15
  %2575 = tail call double @llvm.fmuladd.f64(double %2570, double %2484, double %2531)
  store double %2575, ptr %662, align 8, !tbaa !15
  %2576 = fadd double %2494, %2565
  %2577 = fadd double %2500, %2566
  %2578 = fadd double %2506, %2567
  %2579 = tail call double @llvm.fmuladd.f64(double %2466, double %2576, double %2577)
  %2580 = tail call double @llvm.fmuladd.f64(double %2579, double %2466, double %2578)
  %2581 = insertelement <2 x double> poison, double %2580, i64 0
  %2582 = shufflevector <2 x double> %2581, <2 x double> poison, <2 x i32> zeroinitializer
  %2583 = fmul <2 x double> %2533, %2582
  %2584 = load <2 x double>, ptr %2477, align 8, !tbaa !15
  %2585 = fsub <2 x double> %2584, %2583
  store <2 x double> %2585, ptr %2477, align 8, !tbaa !15
  %2586 = fmul double %2484, %2580
  %2587 = load double, ptr %2542, align 8, !tbaa !89
  %2588 = fsub double %2587, %2586
  store double %2588, ptr %2542, align 8, !tbaa !89
  %2589 = load double, ptr %2482, align 8, !tbaa !50
  %2590 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2591 = fsub double %2589, %2590
  %2592 = fmul double %10, %2591
  %2593 = tail call double @llvm.floor.f64(double %2592)
  %2594 = fptosi double %2593 to i32
  %2595 = icmp slt i32 %2594, 0
  %2596 = select i1 %2595, i32 %2433, i32 0
  %2597 = icmp sgt i32 %2433, %2594
  %2598 = select i1 %2597, i32 0, i32 %2433
  %2599 = sub i32 %2594, %2598
  %2600 = add i32 %2599, %2596
  %2601 = fmul double %2484, %2586
  %2602 = fmul double %2601, 5.000000e-01
  %2603 = load double, ptr %2550, align 8, !tbaa !15
  %2604 = load double, ptr %2551, align 8, !tbaa !15
  %2605 = load double, ptr %2552, align 8, !tbaa !15
  %2606 = fadd double %2602, %2605
  store double %2606, ptr %2552, align 8, !tbaa !15
  %2607 = mul nsw i32 %2600, 3
  %2608 = sext i32 %2607 to i64
  %2609 = getelementptr inbounds double, ptr %2549, i64 %2608
  %2610 = fmul <2 x double> %2533, %2583
  %2611 = fmul <2 x double> %2610, <double 5.000000e-01, double 5.000000e-01>
  %2612 = extractelement <2 x double> %2611, i64 0
  %2613 = fadd double %2612, %2603
  store double %2613, ptr %2550, align 8, !tbaa !15
  %2614 = extractelement <2 x double> %2611, i64 1
  %2615 = fadd double %2614, %2604
  store double %2615, ptr %2551, align 8, !tbaa !15
  %2616 = load <2 x double>, ptr %2609, align 8, !tbaa !15
  %2617 = fadd <2 x double> %2611, %2616
  store <2 x double> %2617, ptr %2609, align 8, !tbaa !15
  %2618 = add nsw i32 %2607, 2
  %2619 = sext i32 %2618 to i64
  %2620 = getelementptr inbounds double, ptr %2549, i64 %2619
  %2621 = load double, ptr %2620, align 8, !tbaa !15
  %2622 = fadd double %2602, %2621
  store double %2622, ptr %2620, align 8, !tbaa !15
  %2623 = load double, ptr %2556, align 8, !tbaa !15
  %2624 = load double, ptr %2557, align 8, !tbaa !15
  %2625 = load double, ptr %2558, align 8, !tbaa !15
  %2626 = load double, ptr %2559, align 8, !tbaa !15
  %2627 = load double, ptr %2555, align 8, !tbaa !15
  %2628 = tail call double @llvm.fmuladd.f64(double %35, double %2627, double %2626)
  %2629 = load double, ptr %2560, align 8, !tbaa !15
  %2630 = tail call double @llvm.fmuladd.f64(double %664, double %2629, double %2625)
  %2631 = load double, ptr %2561, align 8, !tbaa !15
  %2632 = tail call double @llvm.fmuladd.f64(double %665, double %2631, double %2624)
  %2633 = load double, ptr %2562, align 8, !tbaa !15
  %2634 = tail call double @llvm.fmuladd.f64(double %666, double %2633, double %2623)
  %2635 = fmul double %2563, %2634
  %2636 = fmul double %2563, %2632
  %2637 = fmul double %2563, %2630
  %2638 = insertelement <2 x double> poison, double %2564, i64 0
  %2639 = insertelement <2 x double> %2638, double %2563, i64 1
  %2640 = insertelement <2 x double> poison, double %2541, i64 0
  %2641 = insertelement <2 x double> %2640, double %2628, i64 1
  %2642 = fmul <2 x double> %2639, %2641
  %2643 = insertelement <2 x double> poison, double %2466, i64 0
  %2644 = shufflevector <2 x double> %2643, <2 x double> poison, <2 x i32> zeroinitializer
  %2645 = insertelement <2 x double> poison, double %2565, i64 0
  %2646 = insertelement <2 x double> %2645, double %2635, i64 1
  %2647 = fmul <2 x double> %2644, %2646
  %2648 = insertelement <2 x double> poison, double %2566, i64 0
  %2649 = insertelement <2 x double> %2648, double %2636, i64 1
  %2650 = fmul <2 x double> %2649, <double 2.500000e-01, double 2.500000e-01>
  %2651 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2647, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2650)
  %2652 = insertelement <2 x double> poison, double %2567, i64 0
  %2653 = insertelement <2 x double> %2652, double %2637, i64 1
  %2654 = fmul <2 x double> %2653, <double 5.000000e-01, double 5.000000e-01>
  %2655 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2651, <2 x double> %2644, <2 x double> %2654)
  %2656 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2655, <2 x double> %2644, <2 x double> %2642)
  %2657 = fadd <2 x double> %2449, %2583
  %2658 = fadd double %2447, %2586
  %2659 = fsub <2 x double> %2451, %2656
  %2660 = tail call double @llvm.fmuladd.f64(double %2466, double %2635, double %2636)
  %2661 = tail call double @llvm.fmuladd.f64(double %2660, double %2466, double %2637)
  %2662 = fmul double %2130, %2661
  %2663 = load <2 x double>, ptr %660, align 8, !tbaa !15
  %2664 = insertelement <2 x double> poison, double %2662, i64 0
  %2665 = shufflevector <2 x double> %2664, <2 x double> poison, <2 x i32> zeroinitializer
  %2666 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2665, <2 x double> %2533, <2 x double> %2663)
  store <2 x double> %2666, ptr %660, align 8, !tbaa !15
  %2667 = load double, ptr %662, align 8, !tbaa !15
  %2668 = tail call double @llvm.fmuladd.f64(double %2662, double %2484, double %2667)
  store double %2668, ptr %662, align 8, !tbaa !15
  %2669 = insertelement <2 x double> poison, double %2661, i64 0
  %2670 = shufflevector <2 x double> %2669, <2 x double> poison, <2 x i32> zeroinitializer
  %2671 = fmul <2 x double> %2533, %2670
  %2672 = fadd <2 x double> %2450, %2671
  %2673 = load <2 x double>, ptr %2478, align 8, !tbaa !15
  %2674 = fsub <2 x double> %2673, %2671
  store <2 x double> %2674, ptr %2478, align 8, !tbaa !15
  %2675 = fmul double %2484, %2661
  %2676 = fadd double %2448, %2675
  %2677 = getelementptr inbounds %class.Vector, ptr %636, i64 %2459, i32 2
  %2678 = load double, ptr %2677, align 8, !tbaa !89
  %2679 = fsub double %2678, %2675
  store double %2679, ptr %2677, align 8, !tbaa !89
  %2680 = load double, ptr %2482, align 8, !tbaa !50
  %2681 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2682 = fsub double %2680, %2681
  %2683 = fmul double %10, %2682
  %2684 = tail call double @llvm.floor.f64(double %2683)
  %2685 = fptosi double %2684 to i32
  %2686 = icmp slt i32 %2685, 0
  %2687 = select i1 %2686, i32 %2433, i32 0
  %2688 = icmp sgt i32 %2433, %2685
  %2689 = select i1 %2688, i32 0, i32 %2433
  %2690 = sub i32 %2685, %2689
  %2691 = add i32 %2690, %2687
  %2692 = fmul double %2484, %2675
  %2693 = fmul double %2692, 5.000000e-01
  %2694 = load double, ptr %2550, align 8, !tbaa !15
  %2695 = load double, ptr %2551, align 8, !tbaa !15
  %2696 = load double, ptr %2552, align 8, !tbaa !15
  %2697 = fadd double %2693, %2696
  store double %2697, ptr %2552, align 8, !tbaa !15
  %2698 = mul nsw i32 %2691, 3
  %2699 = sext i32 %2698 to i64
  %2700 = getelementptr inbounds double, ptr %2549, i64 %2699
  %2701 = fmul <2 x double> %2533, %2671
  %2702 = fmul <2 x double> %2701, <double 5.000000e-01, double 5.000000e-01>
  %2703 = extractelement <2 x double> %2702, i64 0
  %2704 = fadd double %2703, %2694
  store double %2704, ptr %2550, align 8, !tbaa !15
  %2705 = extractelement <2 x double> %2702, i64 1
  %2706 = fadd double %2705, %2695
  store double %2706, ptr %2551, align 8, !tbaa !15
  %2707 = load <2 x double>, ptr %2700, align 8, !tbaa !15
  %2708 = fadd <2 x double> %2702, %2707
  store <2 x double> %2708, ptr %2700, align 8, !tbaa !15
  %2709 = add nsw i32 %2698, 2
  %2710 = sext i32 %2709 to i64
  %2711 = getelementptr inbounds double, ptr %2549, i64 %2710
  %2712 = load double, ptr %2711, align 8, !tbaa !15
  %2713 = fadd double %2693, %2712
  store double %2713, ptr %2711, align 8, !tbaa !15
  %2714 = add nuw nsw i64 %2445, 1
  %2715 = icmp eq i64 %2714, %2443
  br i1 %2715, label %2716, label %2444

2716:                                             ; preds = %2444, %2420
  %2717 = phi double [ %2421, %2420 ], [ %2676, %2444 ]
  %2718 = phi double [ %2422, %2420 ], [ %2658, %2444 ]
  %2719 = phi double [ %2423, %2420 ], [ %2519, %2444 ]
  %2720 = phi <2 x double> [ %2424, %2420 ], [ %2657, %2444 ]
  %2721 = phi <2 x double> [ %2425, %2420 ], [ %2672, %2444 ]
  %2722 = phi <2 x double> [ %2426, %2420 ], [ %2659, %2444 ]
  %2723 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2724 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2723, double noundef %2147, double noundef %2148, double noundef %708, ptr noundef %46, ptr noundef %2111, i32 noundef %2110, ptr noundef %99, double noundef %36, ptr noundef %145)
  %2725 = add nsw i32 %2429, %2724
  %2726 = icmp sgt i32 %2724, 0
  %2727 = extractelement <2 x double> %2722, i64 1
  br i1 %2726, label %2728, label %2880

2728:                                             ; preds = %2716
  %2729 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2730 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2731 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2732 = mul nsw i32 %2731, %711
  %2733 = mul i32 %2730, 3
  %2734 = mul nsw i32 %723, 3
  %2735 = sext i32 %2734 to i64
  %2736 = add nsw i32 %2734, 1
  %2737 = sext i32 %2736 to i64
  %2738 = add nsw i32 %2734, 2
  %2739 = sext i32 %2738 to i64
  %2740 = zext i32 %2724 to i64
  br label %2741

2741:                                             ; preds = %2728, %2741
  %2742 = phi i64 [ 0, %2728 ], [ %2878, %2741 ]
  %2743 = phi double [ %2727, %2728 ], [ %2804, %2741 ]
  %2744 = phi double [ %2717, %2728 ], [ %2823, %2741 ]
  %2745 = phi <2 x double> [ %2721, %2728 ], [ %2819, %2741 ]
  %2746 = shl nuw nsw i64 %2742, 1
  %2747 = getelementptr inbounds i32, ptr %146, i64 %2746
  %2748 = load i32, ptr %2747, align 4, !tbaa !5
  %2749 = ashr i32 %2748, 14
  %2750 = add nsw i32 %2749, %39
  %2751 = getelementptr inbounds i16, ptr %99, i64 %2742
  %2752 = load i16, ptr %2751, align 2, !tbaa !45
  %2753 = zext i16 %2752 to i64
  %2754 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2753
  %2755 = getelementptr inbounds double, ptr %145, i64 %2742
  %2756 = load double, ptr %2755, align 8, !tbaa !15
  %2757 = sext i32 %2750 to i64
  %2758 = getelementptr inbounds double, ptr %2729, i64 %2757
  %2759 = load double, ptr %2758, align 8, !tbaa !15
  %2760 = fsub double %2756, %2759
  %2761 = shl nsw i32 %2750, 4
  %2762 = sext i32 %2761 to i64
  %2763 = getelementptr inbounds double, ptr %31, i64 %2762
  %2764 = getelementptr inbounds %class.Vector, ptr %636, i64 %2753
  %2765 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2753, i32 1
  %2766 = load float, ptr %2765, align 8, !tbaa !81
  %2767 = fpext float %2766 to double
  %2768 = fmul double %2136, %2767
  %2769 = getelementptr inbounds %class.Vector, ptr %2754, i64 0, i32 2
  %2770 = load double, ptr %2769, align 8, !tbaa !50
  %2771 = fsub double %708, %2770
  %2772 = shl nsw i32 %2750, 2
  %2773 = sext i32 %2772 to i64
  %2774 = getelementptr inbounds double, ptr %32, i64 %2773
  %2775 = getelementptr inbounds double, ptr %2763, i64 12
  %2776 = load double, ptr %2775, align 8, !tbaa !15
  %2777 = getelementptr inbounds double, ptr %2763, i64 13
  %2778 = load double, ptr %2777, align 8, !tbaa !15
  %2779 = getelementptr inbounds double, ptr %2763, i64 14
  %2780 = load double, ptr %2779, align 8, !tbaa !15
  %2781 = getelementptr inbounds double, ptr %2763, i64 15
  %2782 = load double, ptr %2781, align 8, !tbaa !15
  %2783 = load double, ptr %2774, align 8, !tbaa !15
  %2784 = fadd double %2782, %2783
  %2785 = getelementptr inbounds double, ptr %2774, i64 1
  %2786 = load double, ptr %2785, align 8, !tbaa !15
  %2787 = tail call double @llvm.fmuladd.f64(double %2786, double 2.000000e+00, double %2780)
  %2788 = getelementptr inbounds double, ptr %2774, i64 2
  %2789 = load double, ptr %2788, align 8, !tbaa !15
  %2790 = tail call double @llvm.fmuladd.f64(double %2789, double 4.000000e+00, double %2778)
  %2791 = getelementptr inbounds double, ptr %2774, i64 3
  %2792 = load double, ptr %2791, align 8, !tbaa !15
  %2793 = tail call double @llvm.fmuladd.f64(double %2792, double 6.000000e+00, double %2776)
  %2794 = fmul double %2768, %2793
  %2795 = fmul double %2768, %2790
  %2796 = fmul double %2768, %2787
  %2797 = fmul double %2768, %2784
  %2798 = fmul double %2760, %2794
  %2799 = fmul double %2795, 2.500000e-01
  %2800 = tail call double @llvm.fmuladd.f64(double %2798, double 0x3FC5555555555555, double %2799)
  %2801 = fmul double %2796, 5.000000e-01
  %2802 = tail call double @llvm.fmuladd.f64(double %2800, double %2760, double %2801)
  %2803 = tail call double @llvm.fmuladd.f64(double %2802, double %2760, double %2797)
  %2804 = fsub double %2743, %2803
  %2805 = tail call double @llvm.fmuladd.f64(double %2760, double %2794, double %2795)
  %2806 = tail call double @llvm.fmuladd.f64(double %2805, double %2760, double %2796)
  %2807 = fmul double %2130, %2806
  %2808 = load double, ptr %662, align 8, !tbaa !15
  %2809 = tail call double @llvm.fmuladd.f64(double %2807, double %2771, double %2808)
  %2810 = load <2 x double>, ptr %2754, align 8, !tbaa !15
  %2811 = fsub <2 x double> %705, %2810
  %2812 = load <2 x double>, ptr %660, align 8, !tbaa !15
  %2813 = insertelement <2 x double> poison, double %2807, i64 0
  %2814 = shufflevector <2 x double> %2813, <2 x double> poison, <2 x i32> zeroinitializer
  %2815 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2814, <2 x double> %2811, <2 x double> %2812)
  store <2 x double> %2815, ptr %660, align 8, !tbaa !15
  store double %2809, ptr %662, align 8, !tbaa !15
  %2816 = insertelement <2 x double> poison, double %2806, i64 0
  %2817 = shufflevector <2 x double> %2816, <2 x double> poison, <2 x i32> zeroinitializer
  %2818 = fmul <2 x double> %2811, %2817
  %2819 = fadd <2 x double> %2745, %2818
  %2820 = load <2 x double>, ptr %2764, align 8, !tbaa !15
  %2821 = fsub <2 x double> %2820, %2818
  store <2 x double> %2821, ptr %2764, align 8, !tbaa !15
  %2822 = fmul double %2771, %2806
  %2823 = fadd double %2744, %2822
  %2824 = getelementptr inbounds %class.Vector, ptr %636, i64 %2753, i32 2
  %2825 = load double, ptr %2824, align 8, !tbaa !89
  %2826 = fsub double %2825, %2822
  store double %2826, ptr %2824, align 8, !tbaa !89
  %2827 = load double, ptr %2769, align 8, !tbaa !50
  %2828 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2829 = fsub double %2827, %2828
  %2830 = fmul double %10, %2829
  %2831 = tail call double @llvm.floor.f64(double %2830)
  %2832 = fptosi double %2831 to i32
  %2833 = icmp slt i32 %2832, 0
  %2834 = select i1 %2833, i32 %2730, i32 0
  %2835 = icmp sgt i32 %2730, %2832
  %2836 = select i1 %2835, i32 0, i32 %2730
  %2837 = sub i32 %2832, %2836
  %2838 = add i32 %2837, %2834
  %2839 = getelementptr inbounds %struct.CompAtom, ptr %46, i64 %2753, i32 3
  %2840 = load i8, ptr %2839, align 2, !tbaa !52
  %2841 = zext i8 %2840 to i32
  %2842 = fmul <2 x double> %2811, %2818
  %2843 = extractelement <2 x double> %2842, i64 0
  %2844 = fmul <2 x double> %2811, %2818
  %2845 = extractelement <2 x double> %2844, i64 1
  %2846 = fmul double %2771, %2822
  %2847 = add nsw i32 %2732, %2841
  %2848 = mul i32 %2733, %2847
  %2849 = sext i32 %2848 to i64
  %2850 = getelementptr inbounds double, ptr %8, i64 %2849
  %2851 = fmul double %2843, 5.000000e-01
  %2852 = fmul double %2845, 5.000000e-01
  %2853 = fmul double %2846, 5.000000e-01
  %2854 = getelementptr inbounds double, ptr %2850, i64 %2735
  %2855 = load double, ptr %2854, align 8, !tbaa !15
  %2856 = fadd double %2851, %2855
  store double %2856, ptr %2854, align 8, !tbaa !15
  %2857 = getelementptr inbounds double, ptr %2850, i64 %2737
  %2858 = load double, ptr %2857, align 8, !tbaa !15
  %2859 = fadd double %2852, %2858
  store double %2859, ptr %2857, align 8, !tbaa !15
  %2860 = getelementptr inbounds double, ptr %2850, i64 %2739
  %2861 = load double, ptr %2860, align 8, !tbaa !15
  %2862 = fadd double %2853, %2861
  store double %2862, ptr %2860, align 8, !tbaa !15
  %2863 = mul nsw i32 %2838, 3
  %2864 = sext i32 %2863 to i64
  %2865 = getelementptr inbounds double, ptr %2850, i64 %2864
  %2866 = load double, ptr %2865, align 8, !tbaa !15
  %2867 = fadd double %2851, %2866
  store double %2867, ptr %2865, align 8, !tbaa !15
  %2868 = add nsw i32 %2863, 1
  %2869 = sext i32 %2868 to i64
  %2870 = getelementptr inbounds double, ptr %2850, i64 %2869
  %2871 = load double, ptr %2870, align 8, !tbaa !15
  %2872 = fadd double %2852, %2871
  store double %2872, ptr %2870, align 8, !tbaa !15
  %2873 = add nsw i32 %2863, 2
  %2874 = sext i32 %2873 to i64
  %2875 = getelementptr inbounds double, ptr %2850, i64 %2874
  %2876 = load double, ptr %2875, align 8, !tbaa !15
  %2877 = fadd double %2853, %2876
  store double %2877, ptr %2875, align 8, !tbaa !15
  %2878 = add nuw nsw i64 %2742, 1
  %2879 = icmp eq i64 %2878, %2740
  br i1 %2879, label %2880, label %2741

2880:                                             ; preds = %2741, %2716
  %2881 = phi double [ %2717, %2716 ], [ %2823, %2741 ]
  %2882 = phi double [ %2727, %2716 ], [ %2804, %2741 ]
  %2883 = phi <2 x double> [ %2721, %2716 ], [ %2819, %2741 ]
  %2884 = getelementptr inbounds %class.Vector, ptr %630, i64 %687
  %2885 = load <2 x double>, ptr %2884, align 8, !tbaa !15
  %2886 = fadd <2 x double> %2720, %2885
  store <2 x double> %2886, ptr %2884, align 8, !tbaa !15
  %2887 = getelementptr inbounds %class.Vector, ptr %630, i64 %687, i32 2
  %2888 = load double, ptr %2887, align 8, !tbaa !89
  %2889 = fadd double %2718, %2888
  store double %2889, ptr %2887, align 8, !tbaa !89
  %2890 = getelementptr inbounds %class.Vector, ptr %636, i64 %687
  %2891 = load <2 x double>, ptr %2890, align 8, !tbaa !15
  %2892 = fadd <2 x double> %2883, %2891
  store <2 x double> %2892, ptr %2890, align 8, !tbaa !15
  %2893 = getelementptr inbounds %class.Vector, ptr %636, i64 %687, i32 2
  %2894 = load double, ptr %2893, align 8, !tbaa !89
  %2895 = fadd double %2881, %2894
  store double %2895, ptr %2893, align 8, !tbaa !89
  %2896 = insertelement <2 x double> %2722, double %2882, i64 1
  br label %2897

2897:                                             ; preds = %2880, %1325, %1379, %698
  %2898 = phi i32 [ %699, %698 ], [ %703, %2880 ], [ %703, %1325 ], [ %703, %1379 ]
  %2899 = phi i32 [ %684, %698 ], [ %2114, %2880 ], [ %1275, %1325 ], [ %1275, %1379 ]
  %2900 = phi i32 [ %683, %698 ], [ %2115, %2880 ], [ %1276, %1325 ], [ %1276, %1379 ]
  %2901 = phi i32 [ %682, %698 ], [ %2116, %2880 ], [ %1277, %1325 ], [ %1277, %1379 ]
  %2902 = phi i32 [ %681, %698 ], [ %2117, %2880 ], [ %1278, %1325 ], [ %1278, %1379 ]
  %2903 = phi i32 [ %680, %698 ], [ %725, %2880 ], [ %725, %1325 ], [ %725, %1379 ]
  %2904 = phi ptr [ %679, %698 ], [ %2118, %2880 ], [ %971, %1325 ], [ %971, %1379 ]
  %2905 = phi ptr [ %678, %698 ], [ %2119, %2880 ], [ %972, %1325 ], [ %972, %1379 ]
  %2906 = phi ptr [ %677, %698 ], [ %2120, %2880 ], [ %973, %1325 ], [ %973, %1379 ]
  %2907 = phi i32 [ %701, %698 ], [ %676, %2880 ], [ %676, %1325 ], [ %676, %1379 ]
  %2908 = phi double [ %675, %698 ], [ %2719, %2880 ], [ %675, %1325 ], [ %675, %1379 ]
  %2909 = phi i32 [ %674, %698 ], [ %2725, %2880 ], [ %674, %1325 ], [ %674, %1379 ]
  %2910 = phi <2 x double> [ %686, %698 ], [ %2896, %2880 ], [ %686, %1325 ], [ %686, %1379 ]
  %2911 = add nsw i32 %2907, 1
  %2912 = icmp slt i32 %2911, %640
  br i1 %2912, label %673, label %2913

2913:                                             ; preds = %2897, %624
  %2914 = phi ptr [ null, %624 ], [ %2906, %2897 ]
  %2915 = phi double [ 0.000000e+00, %624 ], [ %2908, %2897 ]
  %2916 = phi i32 [ 0, %624 ], [ %2909, %2897 ]
  %2917 = phi <2 x double> [ zeroinitializer, %624 ], [ %2910, %2897 ]
  %2918 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 3
  %2919 = load ptr, ptr %2918, align 8, !tbaa !24
  %2920 = icmp sgt i32 %41, 0
  br i1 %2920, label %2921, label %2962

2921:                                             ; preds = %2913
  %2922 = zext i32 %41 to i64
  br label %2930

2923:                                             ; preds = %2930
  %2924 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2925 = load ptr, ptr %2924, align 8, !tbaa !24
  %2926 = extractelement <2 x double> %2959, i64 0
  %2927 = extractelement <2 x double> %2959, i64 1
  br i1 %2920, label %2928, label %2962

2928:                                             ; preds = %2923
  %2929 = zext i32 %41 to i64
  br label %3005

2930:                                             ; preds = %2921, %2930
  %2931 = phi i64 [ 0, %2921 ], [ %2960, %2930 ]
  %2932 = phi <4 x double> [ zeroinitializer, %2921 ], [ %2953, %2930 ]
  %2933 = phi <2 x double> [ zeroinitializer, %2921 ], [ %2959, %2930 ]
  %2934 = getelementptr inbounds %class.Vector, ptr %630, i64 %2931
  %2935 = getelementptr inbounds %class.Vector, ptr %2919, i64 %2931
  %2936 = load <2 x double>, ptr %2934, align 8, !tbaa !15
  %2937 = load <2 x double>, ptr %2935, align 8, !tbaa !15
  %2938 = fadd <2 x double> %2936, %2937
  store <2 x double> %2938, ptr %2935, align 8, !tbaa !15
  %2939 = getelementptr inbounds %class.Vector, ptr %630, i64 %2931, i32 2
  %2940 = load double, ptr %2939, align 8, !tbaa !89
  %2941 = getelementptr inbounds %class.Vector, ptr %2919, i64 %2931, i32 2
  %2942 = load double, ptr %2941, align 8, !tbaa !89
  %2943 = fadd double %2940, %2942
  store double %2943, ptr %2941, align 8, !tbaa !89
  %2944 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %2931
  %2945 = load <2 x double>, ptr %2944, align 8, !tbaa !15
  %2946 = getelementptr inbounds %class.Vector, ptr %2944, i64 0, i32 2
  %2947 = load double, ptr %2946, align 8, !tbaa !50
  %2948 = load <2 x double>, ptr %2934, align 8, !tbaa !15
  %2949 = shufflevector <2 x double> %2948, <2 x double> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %2950 = shufflevector <2 x double> %2945, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2951 = insertelement <4 x double> %2950, double %2947, i64 2
  %2952 = shufflevector <4 x double> %2951, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2953 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2949, <4 x double> %2952, <4 x double> %2932)
  %2954 = load double, ptr %2939, align 8, !tbaa !89
  %2955 = shufflevector <2 x double> %2948, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %2956 = insertelement <2 x double> %2955, double %2954, i64 1
  %2957 = insertelement <2 x double> poison, double %2947, i64 0
  %2958 = shufflevector <2 x double> %2957, <2 x double> poison, <2 x i32> zeroinitializer
  %2959 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2956, <2 x double> %2958, <2 x double> %2933)
  %2960 = add nuw nsw i64 %2931, 1
  %2961 = icmp eq i64 %2960, %2922
  br i1 %2961, label %2923, label %2930

2962:                                             ; preds = %3005, %2913, %2923
  %2963 = phi double [ %2926, %2923 ], [ 0.000000e+00, %2913 ], [ %2926, %3005 ]
  %2964 = phi double [ %2927, %2923 ], [ 0.000000e+00, %2913 ], [ %2927, %3005 ]
  %2965 = phi <4 x double> [ zeroinitializer, %2923 ], [ zeroinitializer, %2913 ], [ %3035, %3005 ]
  %2966 = phi <4 x double> [ %2953, %2923 ], [ zeroinitializer, %2913 ], [ %2953, %3005 ]
  %2967 = phi <2 x double> [ zeroinitializer, %2923 ], [ zeroinitializer, %2913 ], [ %3030, %3005 ]
  %2968 = sitofp i32 %2916 to double
  %2969 = getelementptr inbounds double, ptr %6, i64 22
  %2970 = load double, ptr %2969, align 8, !tbaa !15
  %2971 = fadd double %2970, %2968
  store double %2971, ptr %2969, align 8, !tbaa !15
  %2972 = getelementptr inbounds double, ptr %6, i64 4
  %2973 = load <4 x double>, ptr %2972, align 8, !tbaa !15
  %2974 = shufflevector <4 x double> %2966, <4 x double> poison, <4 x i32> <i32 1, i32 2, i32 poison, i32 3>
  %2975 = shufflevector <4 x double> %2974, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %2976 = fadd <4 x double> %2975, %2973
  store <4 x double> %2976, ptr %2972, align 8, !tbaa !15
  %2977 = getelementptr inbounds double, ptr %6, i64 8
  %2978 = load <4 x double>, ptr %2977, align 8, !tbaa !15
  %2979 = insertelement <4 x double> poison, double %2963, i64 0
  %2980 = shufflevector <4 x double> %2979, <4 x double> %2966, <4 x i32> <i32 0, i32 6, i32 poison, i32 poison>
  %2981 = insertelement <4 x double> %2980, double %2964, i64 3
  %2982 = shufflevector <4 x double> %2981, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %2983 = fadd <4 x double> %2982, %2978
  store <4 x double> %2983, ptr %2977, align 8, !tbaa !15
  %2984 = load <4 x double>, ptr %6, align 8, !tbaa !15
  %2985 = shufflevector <2 x double> %2917, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2986 = insertelement <4 x double> %2985, double %2915, i64 2
  %2987 = shufflevector <4 x double> %2986, <4 x double> %2966, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
  %2988 = fadd <4 x double> %2987, %2984
  store <4 x double> %2988, ptr %6, align 8, !tbaa !15
  %2989 = getelementptr inbounds double, ptr %6, i64 12
  %2990 = load <4 x double>, ptr %2989, align 8, !tbaa !15
  %2991 = shufflevector <2 x double> %2967, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2992 = shufflevector <4 x double> %2991, <4 x double> %2965, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2993 = shufflevector <4 x double> %2992, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2994 = fadd <4 x double> %2993, %2990
  store <4 x double> %2994, ptr %2989, align 8, !tbaa !15
  %2995 = getelementptr inbounds double, ptr %6, i64 16
  %2996 = load <4 x double>, ptr %2995, align 8, !tbaa !15
  %2997 = shufflevector <4 x double> %2965, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2998 = shufflevector <4 x double> %2997, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2999 = fadd <4 x double> %2998, %2996
  store <4 x double> %2999, ptr %2995, align 8, !tbaa !15
  %3000 = getelementptr inbounds double, ptr %6, i64 20
  %3001 = load double, ptr %3000, align 8, !tbaa !15
  %3002 = extractelement <4 x double> %2965, i64 0
  %3003 = fadd double %3002, %3001
  store double %3003, ptr %3000, align 8, !tbaa !15
  %3004 = icmp eq ptr %2914, null
  br i1 %3004, label %3039, label %3038

3005:                                             ; preds = %2928, %3005
  %3006 = phi i64 [ 0, %2928 ], [ %3036, %3005 ]
  %3007 = phi <4 x double> [ zeroinitializer, %2928 ], [ %3035, %3005 ]
  %3008 = phi <2 x double> [ zeroinitializer, %2928 ], [ %3030, %3005 ]
  %3009 = getelementptr inbounds %class.Vector, ptr %636, i64 %3006
  %3010 = getelementptr inbounds %class.Vector, ptr %2925, i64 %3006
  %3011 = getelementptr inbounds %class.Vector, ptr %636, i64 %3006, i32 1
  %3012 = load <2 x double>, ptr %3009, align 8, !tbaa !15
  %3013 = load <2 x double>, ptr %3010, align 8, !tbaa !15
  %3014 = fadd <2 x double> %3012, %3013
  store <2 x double> %3014, ptr %3010, align 8, !tbaa !15
  %3015 = getelementptr inbounds %class.Vector, ptr %636, i64 %3006, i32 2
  %3016 = load double, ptr %3015, align 8, !tbaa !89
  %3017 = getelementptr inbounds %class.Vector, ptr %2925, i64 %3006, i32 2
  %3018 = load double, ptr %3017, align 8, !tbaa !89
  %3019 = fadd double %3016, %3018
  store double %3019, ptr %3017, align 8, !tbaa !89
  %3020 = load double, ptr %3009, align 8, !tbaa !193
  %3021 = getelementptr inbounds %struct.CompAtom, ptr %44, i64 %3006
  %3022 = load double, ptr %3021, align 8, !tbaa !69
  %3023 = getelementptr inbounds %class.Vector, ptr %3021, i64 0, i32 1
  %3024 = load <2 x double>, ptr %3023, align 8, !tbaa !15
  %3025 = shufflevector <2 x double> %3024, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %3026 = insertelement <2 x double> poison, double %3020, i64 0
  %3027 = shufflevector <2 x double> %3026, <2 x double> poison, <2 x i32> zeroinitializer
  %3028 = shufflevector <2 x double> %3024, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %3029 = insertelement <2 x double> %3028, double %3022, i64 0
  %3030 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %3027, <2 x double> %3029, <2 x double> %3008)
  %3031 = load <2 x double>, ptr %3011, align 8, !tbaa !15
  %3032 = shufflevector <2 x double> %3031, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %3033 = insertelement <4 x double> %3032, double %3020, i64 3
  %3034 = shufflevector <4 x double> %3033, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %3035 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %3034, <4 x double> %3025, <4 x double> %3007)
  %3036 = add nuw nsw i64 %3006, 1
  %3037 = icmp eq i64 %3036, %2929
  br i1 %3037, label %2962, label %3005

3038:                                             ; preds = %2962
  tail call void @_ZdaPv(ptr noundef nonnull %2914) #10
  br label %3039

3039:                                             ; preds = %2962, %3038, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil31calc_self_merge_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2726

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %613, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %604

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %604

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %604, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %604

604:                                              ; preds = %472, %535, %597, %594
  %605 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %606 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %607 = load i32, ptr %17, align 8, !tbaa !19
  %608 = add nsw i32 %607, 1
  store i32 %608, ptr %17, align 8, !tbaa !19
  %609 = trunc i32 %40 to i16
  %610 = load ptr, ptr %12, align 8, !tbaa !47
  %611 = sext i32 %607 to i64
  %612 = getelementptr inbounds i16, ptr %610, i64 %611
  store i16 %609, ptr %612, align 2, !tbaa !45
  br label %623

613:                                              ; preds = %469
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  %616 = add nsw i32 %615, 1
  store i32 %616, ptr %17, align 8, !tbaa !19
  %617 = sext i32 %615 to i64
  %618 = getelementptr inbounds i16, ptr %614, i64 %617
  %619 = load i16, ptr %618, align 2, !tbaa !45
  %620 = zext i16 %619 to i32
  %621 = icmp eq i32 %40, %620
  br i1 %621, label %623, label %622

622:                                              ; preds = %613
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %623

623:                                              ; preds = %613, %622, %604
  %624 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %605, %604 ]
  %625 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %606, %604 ]
  %626 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 18, i32 1
  %627 = load ptr, ptr %626, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %627, i32 noundef %40)
  %628 = load ptr, ptr %626, align 8, !tbaa !174
  %629 = load ptr, ptr %628, align 8, !tbaa !176
  %630 = sext i32 %40 to i64
  %631 = mul nsw i64 %630, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %629, i8 0, i64 %631, i1 false)
  %632 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %633 = load i32, ptr %632, align 4, !tbaa !49
  %634 = add nsw i32 %633, -1
  %635 = add nsw i32 %40, -1
  %636 = icmp sgt i32 %40, 1
  br i1 %636, label %637, label %2661

637:                                              ; preds = %623
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  %640 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %641 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %642 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %643 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %644 = ptrtoint ptr %425 to i64
  %645 = add nsw i32 %42, 10
  %646 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %647 = ptrtoint ptr %471 to i64
  %648 = ptrtoint ptr %333 to i64
  %649 = ptrtoint ptr %379 to i64
  %650 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %651 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %652 = fneg double %32
  %653 = getelementptr inbounds double, ptr %6, i64 26
  %654 = getelementptr inbounds double, ptr %6, i64 28
  %655 = getelementptr inbounds double, ptr %6, i64 29
  %656 = getelementptr inbounds double, ptr %6, i64 31
  %657 = fneg double %34
  %658 = sext i32 %624 to i64
  %659 = sext i32 %625 to i64
  %660 = insertelement <2 x double> poison, double %27, i64 0
  %661 = shufflevector <2 x double> %660, <2 x double> poison, <2 x i32> zeroinitializer
  %662 = getelementptr inbounds i16, ptr %471, i64 1
  %663 = getelementptr inbounds i16, ptr %471, i64 1
  br label %664

664:                                              ; preds = %637, %2647
  %665 = phi i32 [ 0, %637 ], [ %2658, %2647 ]
  %666 = phi i32 [ 0, %637 ], [ %2659, %2647 ]
  %667 = phi ptr [ null, %637 ], [ %2656, %2647 ]
  %668 = phi ptr [ null, %637 ], [ %2655, %2647 ]
  %669 = phi ptr [ null, %637 ], [ %2654, %2647 ]
  %670 = phi i32 [ 0, %637 ], [ %2653, %2647 ]
  %671 = phi i32 [ 0, %637 ], [ %2652, %2647 ]
  %672 = phi i32 [ 0, %637 ], [ %2651, %2647 ]
  %673 = phi i32 [ 0, %637 ], [ %2650, %2647 ]
  %674 = phi i32 [ 0, %637 ], [ %2649, %2647 ]
  %675 = phi i32 [ %639, %637 ], [ %2648, %2647 ]
  %676 = sext i32 %666 to i64
  %677 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %676
  %678 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %676
  %679 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %676, i32 4
  %680 = load i8, ptr %679, align 1
  %681 = lshr i8 %680, 3
  %682 = and i8 %681, 15
  %683 = zext i8 %682 to i32
  %684 = icmp eq i8 %682, 0
  br i1 %684, label %691, label %685

685:                                              ; preds = %664
  %686 = icmp eq i32 %675, 0
  br i1 %686, label %691, label %687

687:                                              ; preds = %685
  %688 = add nsw i32 %675, -1
  %689 = add nsw i32 %666, -1
  %690 = add i32 %689, %683
  br label %2647

691:                                              ; preds = %685, %664
  %692 = phi i32 [ %675, %664 ], [ %634, %685 ]
  %693 = load <2 x double>, ptr %677, align 8, !tbaa !15
  %694 = fadd <2 x double> %19, %693
  %695 = getelementptr inbounds %class.Vector, ptr %677, i64 0, i32 2
  %696 = load double, ptr %695, align 8, !tbaa !50
  %697 = fadd double %21, %696
  %698 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %676, i32 3
  %699 = load i8, ptr %698, align 2, !tbaa !52
  %700 = zext i8 %699 to i32
  %701 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %702 = fsub double %696, %701
  %703 = fmul double %10, %702
  %704 = tail call double @llvm.floor.f64(double %703)
  %705 = fptosi double %704 to i32
  %706 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %707 = icmp slt i32 %705, 0
  %708 = select i1 %707, i32 %706, i32 0
  %709 = icmp sgt i32 %706, %705
  %710 = select i1 %709, i32 0, i32 %706
  %711 = sub i32 %705, %710
  %712 = add i32 %711, %708
  %713 = add nsw i32 %666, %683
  %714 = select i1 %684, i32 %670, i32 %713
  br i1 %148, label %2064, label %715

715:                                              ; preds = %691
  %716 = load i32, ptr %678, align 4
  %717 = shl i32 %716, 2
  %718 = ashr exact i32 %717, 2
  %719 = load ptr, ptr %640, align 8, !tbaa !53
  %720 = sext i32 %718 to i64
  %721 = getelementptr inbounds %class.ExclusionCheck, ptr %719, i64 %720
  %722 = load i32, ptr %721, align 8, !tbaa !55
  %723 = getelementptr inbounds %class.ExclusionCheck, ptr %719, i64 %720, i32 1
  %724 = load i32, ptr %723, align 4, !tbaa !57
  %725 = getelementptr inbounds %class.ExclusionCheck, ptr %719, i64 %720, i32 2
  %726 = load ptr, ptr %725, align 8, !tbaa !58
  %727 = icmp eq ptr %726, null
  br i1 %727, label %732, label %728

728:                                              ; preds = %715
  %729 = sext i32 %722 to i64
  %730 = sub nsw i64 0, %729
  %731 = getelementptr inbounds i8, ptr %726, i64 %730
  br label %958

732:                                              ; preds = %715
  %733 = icmp eq ptr %667, null
  br i1 %733, label %821, label %734

734:                                              ; preds = %732
  %735 = load i32, ptr %668, align 4, !tbaa !5
  %736 = icmp slt i32 %735, 1
  br i1 %736, label %784, label %737

737:                                              ; preds = %734
  %738 = add nuw i32 %735, 1
  %739 = zext i32 %738 to i64
  %740 = add nsw i64 %739, -1
  %741 = add nsw i64 %739, -2
  %742 = and i64 %740, 3
  %743 = icmp ult i64 %741, 3
  br i1 %743, label %771, label %744

744:                                              ; preds = %737
  %745 = and i64 %740, -4
  br label %746

746:                                              ; preds = %746, %744
  %747 = phi i64 [ 1, %744 ], [ %768, %746 ]
  %748 = phi i64 [ 0, %744 ], [ %769, %746 ]
  %749 = getelementptr inbounds i32, ptr %668, i64 %747
  %750 = load i32, ptr %749, align 4, !tbaa !5
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i8, ptr %667, i64 %751
  store i8 0, ptr %752, align 1, !tbaa !59
  %753 = add nuw nsw i64 %747, 1
  %754 = getelementptr inbounds i32, ptr %668, i64 %753
  %755 = load i32, ptr %754, align 4, !tbaa !5
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i8, ptr %667, i64 %756
  store i8 0, ptr %757, align 1, !tbaa !59
  %758 = add nuw nsw i64 %747, 2
  %759 = getelementptr inbounds i32, ptr %668, i64 %758
  %760 = load i32, ptr %759, align 4, !tbaa !5
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i8, ptr %667, i64 %761
  store i8 0, ptr %762, align 1, !tbaa !59
  %763 = add nuw nsw i64 %747, 3
  %764 = getelementptr inbounds i32, ptr %668, i64 %763
  %765 = load i32, ptr %764, align 4, !tbaa !5
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i8, ptr %667, i64 %766
  store i8 0, ptr %767, align 1, !tbaa !59
  %768 = add nuw nsw i64 %747, 4
  %769 = add i64 %748, 4
  %770 = icmp eq i64 %769, %745
  br i1 %770, label %771, label %746

771:                                              ; preds = %746, %737
  %772 = phi i64 [ 1, %737 ], [ %768, %746 ]
  %773 = icmp eq i64 %742, 0
  br i1 %773, label %784, label %774

774:                                              ; preds = %771, %774
  %775 = phi i64 [ %781, %774 ], [ %772, %771 ]
  %776 = phi i64 [ %782, %774 ], [ 0, %771 ]
  %777 = getelementptr inbounds i32, ptr %668, i64 %775
  %778 = load i32, ptr %777, align 4, !tbaa !5
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds i8, ptr %667, i64 %779
  store i8 0, ptr %780, align 1, !tbaa !59
  %781 = add nuw nsw i64 %775, 1
  %782 = add i64 %776, 1
  %783 = icmp eq i64 %782, %742
  br i1 %783, label %784, label %774, !llvm.loop !239

784:                                              ; preds = %771, %774, %734
  %785 = load i32, ptr %669, align 4, !tbaa !5
  %786 = icmp slt i32 %785, 1
  br i1 %786, label %841, label %787

787:                                              ; preds = %784
  %788 = add nuw i32 %785, 1
  %789 = zext i32 %788 to i64
  %790 = add nsw i64 %789, -1
  %791 = add nsw i64 %789, -2
  %792 = and i64 %790, 3
  %793 = icmp ult i64 %791, 3
  br i1 %793, label %828, label %794

794:                                              ; preds = %787
  %795 = and i64 %790, -4
  br label %796

796:                                              ; preds = %796, %794
  %797 = phi i64 [ 1, %794 ], [ %818, %796 ]
  %798 = phi i64 [ 0, %794 ], [ %819, %796 ]
  %799 = getelementptr inbounds i32, ptr %669, i64 %797
  %800 = load i32, ptr %799, align 4, !tbaa !5
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i8, ptr %667, i64 %801
  store i8 0, ptr %802, align 1, !tbaa !59
  %803 = add nuw nsw i64 %797, 1
  %804 = getelementptr inbounds i32, ptr %669, i64 %803
  %805 = load i32, ptr %804, align 4, !tbaa !5
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i8, ptr %667, i64 %806
  store i8 0, ptr %807, align 1, !tbaa !59
  %808 = add nuw nsw i64 %797, 2
  %809 = getelementptr inbounds i32, ptr %669, i64 %808
  %810 = load i32, ptr %809, align 4, !tbaa !5
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i8, ptr %667, i64 %811
  store i8 0, ptr %812, align 1, !tbaa !59
  %813 = add nuw nsw i64 %797, 3
  %814 = getelementptr inbounds i32, ptr %669, i64 %813
  %815 = load i32, ptr %814, align 4, !tbaa !5
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i8, ptr %667, i64 %816
  store i8 0, ptr %817, align 1, !tbaa !59
  %818 = add nuw nsw i64 %797, 4
  %819 = add i64 %798, 4
  %820 = icmp eq i64 %819, %795
  br i1 %820, label %828, label %796

821:                                              ; preds = %732
  %822 = load i32, ptr %641, align 8, !tbaa !62
  %823 = tail call i32 @llvm.smax.i32(i32 %822, i32 -1)
  %824 = sext i32 %823 to i64
  %825 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %824) #9
  %826 = load i32, ptr %641, align 8, !tbaa !62
  %827 = sext i32 %826 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %825, i8 0, i64 %827, i1 false)
  br label %841

828:                                              ; preds = %796, %787
  %829 = phi i64 [ 1, %787 ], [ %818, %796 ]
  %830 = icmp eq i64 %792, 0
  br i1 %830, label %841, label %831

831:                                              ; preds = %828, %831
  %832 = phi i64 [ %838, %831 ], [ %829, %828 ]
  %833 = phi i64 [ %839, %831 ], [ 0, %828 ]
  %834 = getelementptr inbounds i32, ptr %669, i64 %832
  %835 = load i32, ptr %834, align 4, !tbaa !5
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds i8, ptr %667, i64 %836
  store i8 0, ptr %837, align 1, !tbaa !59
  %838 = add nuw nsw i64 %832, 1
  %839 = add i64 %833, 1
  %840 = icmp eq i64 %839, %792
  br i1 %840, label %841, label %831, !llvm.loop !240

841:                                              ; preds = %828, %831, %784, %821
  %842 = phi ptr [ %825, %821 ], [ %667, %784 ], [ %667, %831 ], [ %667, %828 ]
  %843 = load i32, ptr %678, align 4
  %844 = shl i32 %843, 2
  %845 = ashr exact i32 %844, 2
  %846 = load ptr, ptr %642, align 8, !tbaa !64
  %847 = sext i32 %845 to i64
  %848 = getelementptr inbounds ptr, ptr %846, i64 %847
  %849 = load ptr, ptr %848, align 8, !tbaa !24
  %850 = load i32, ptr %849, align 4, !tbaa !5
  %851 = icmp slt i32 %850, 1
  br i1 %851, label %904, label %852

852:                                              ; preds = %841
  %853 = add nuw i32 %850, 1
  %854 = zext i32 %853 to i64
  %855 = add nsw i64 %854, -1
  %856 = add nsw i64 %854, -2
  %857 = and i64 %855, 3
  %858 = icmp ult i64 %856, 3
  br i1 %858, label %886, label %859

859:                                              ; preds = %852
  %860 = and i64 %855, -4
  br label %861

861:                                              ; preds = %861, %859
  %862 = phi i64 [ 1, %859 ], [ %883, %861 ]
  %863 = phi i64 [ 0, %859 ], [ %884, %861 ]
  %864 = getelementptr inbounds i32, ptr %849, i64 %862
  %865 = load i32, ptr %864, align 4, !tbaa !5
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i8, ptr %842, i64 %866
  store i8 1, ptr %867, align 1, !tbaa !59
  %868 = add nuw nsw i64 %862, 1
  %869 = getelementptr inbounds i32, ptr %849, i64 %868
  %870 = load i32, ptr %869, align 4, !tbaa !5
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds i8, ptr %842, i64 %871
  store i8 1, ptr %872, align 1, !tbaa !59
  %873 = add nuw nsw i64 %862, 2
  %874 = getelementptr inbounds i32, ptr %849, i64 %873
  %875 = load i32, ptr %874, align 4, !tbaa !5
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i8, ptr %842, i64 %876
  store i8 1, ptr %877, align 1, !tbaa !59
  %878 = add nuw nsw i64 %862, 3
  %879 = getelementptr inbounds i32, ptr %849, i64 %878
  %880 = load i32, ptr %879, align 4, !tbaa !5
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i8, ptr %842, i64 %881
  store i8 1, ptr %882, align 1, !tbaa !59
  %883 = add nuw nsw i64 %862, 4
  %884 = add i64 %863, 4
  %885 = icmp eq i64 %884, %860
  br i1 %885, label %886, label %861

886:                                              ; preds = %861, %852
  %887 = phi i64 [ 1, %852 ], [ %883, %861 ]
  %888 = icmp eq i64 %857, 0
  br i1 %888, label %899, label %889

889:                                              ; preds = %886, %889
  %890 = phi i64 [ %896, %889 ], [ %887, %886 ]
  %891 = phi i64 [ %897, %889 ], [ 0, %886 ]
  %892 = getelementptr inbounds i32, ptr %849, i64 %890
  %893 = load i32, ptr %892, align 4, !tbaa !5
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds i8, ptr %842, i64 %894
  store i8 1, ptr %895, align 1, !tbaa !59
  %896 = add nuw nsw i64 %890, 1
  %897 = add i64 %891, 1
  %898 = icmp eq i64 %897, %857
  br i1 %898, label %899, label %889, !llvm.loop !241

899:                                              ; preds = %889, %886
  %900 = load i32, ptr %678, align 4
  %901 = shl i32 %900, 2
  %902 = ashr exact i32 %901, 2
  %903 = sext i32 %902 to i64
  br label %904

904:                                              ; preds = %899, %841
  %905 = phi i64 [ %903, %899 ], [ %847, %841 ]
  %906 = load ptr, ptr %643, align 8, !tbaa !66
  %907 = getelementptr inbounds ptr, ptr %906, i64 %905
  %908 = load ptr, ptr %907, align 8, !tbaa !24
  %909 = load i32, ptr %908, align 4, !tbaa !5
  %910 = icmp slt i32 %909, 1
  br i1 %910, label %958, label %911

911:                                              ; preds = %904
  %912 = add nuw i32 %909, 1
  %913 = zext i32 %912 to i64
  %914 = add nsw i64 %913, -1
  %915 = add nsw i64 %913, -2
  %916 = and i64 %914, 3
  %917 = icmp ult i64 %915, 3
  br i1 %917, label %945, label %918

918:                                              ; preds = %911
  %919 = and i64 %914, -4
  br label %920

920:                                              ; preds = %920, %918
  %921 = phi i64 [ 1, %918 ], [ %942, %920 ]
  %922 = phi i64 [ 0, %918 ], [ %943, %920 ]
  %923 = getelementptr inbounds i32, ptr %908, i64 %921
  %924 = load i32, ptr %923, align 4, !tbaa !5
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, ptr %842, i64 %925
  store i8 2, ptr %926, align 1, !tbaa !59
  %927 = add nuw nsw i64 %921, 1
  %928 = getelementptr inbounds i32, ptr %908, i64 %927
  %929 = load i32, ptr %928, align 4, !tbaa !5
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, ptr %842, i64 %930
  store i8 2, ptr %931, align 1, !tbaa !59
  %932 = add nuw nsw i64 %921, 2
  %933 = getelementptr inbounds i32, ptr %908, i64 %932
  %934 = load i32, ptr %933, align 4, !tbaa !5
  %935 = sext i32 %934 to i64
  %936 = getelementptr inbounds i8, ptr %842, i64 %935
  store i8 2, ptr %936, align 1, !tbaa !59
  %937 = add nuw nsw i64 %921, 3
  %938 = getelementptr inbounds i32, ptr %908, i64 %937
  %939 = load i32, ptr %938, align 4, !tbaa !5
  %940 = sext i32 %939 to i64
  %941 = getelementptr inbounds i8, ptr %842, i64 %940
  store i8 2, ptr %941, align 1, !tbaa !59
  %942 = add nuw nsw i64 %921, 4
  %943 = add i64 %922, 4
  %944 = icmp eq i64 %943, %919
  br i1 %944, label %945, label %920

945:                                              ; preds = %920, %911
  %946 = phi i64 [ 1, %911 ], [ %942, %920 ]
  %947 = icmp eq i64 %916, 0
  br i1 %947, label %958, label %948

948:                                              ; preds = %945, %948
  %949 = phi i64 [ %955, %948 ], [ %946, %945 ]
  %950 = phi i64 [ %956, %948 ], [ 0, %945 ]
  %951 = getelementptr inbounds i32, ptr %908, i64 %949
  %952 = load i32, ptr %951, align 4, !tbaa !5
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i8, ptr %842, i64 %953
  store i8 2, ptr %954, align 1, !tbaa !59
  %955 = add nuw nsw i64 %949, 1
  %956 = add i64 %950, 1
  %957 = icmp eq i64 %956, %916
  br i1 %957, label %958, label %948, !llvm.loop !242

958:                                              ; preds = %945, %948, %904, %728
  %959 = phi ptr [ %731, %728 ], [ %842, %904 ], [ %842, %948 ], [ %842, %945 ]
  %960 = phi ptr [ %669, %728 ], [ %908, %904 ], [ %908, %948 ], [ %908, %945 ]
  %961 = phi ptr [ %668, %728 ], [ %849, %904 ], [ %849, %948 ], [ %849, %945 ]
  %962 = phi ptr [ %667, %728 ], [ %842, %904 ], [ %842, %948 ], [ %842, %945 ]
  %963 = load i8, ptr %679, align 1
  %964 = and i8 %963, 7
  %965 = icmp eq i8 %964, 0
  br i1 %965, label %1259, label %966

966:                                              ; preds = %958
  %967 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %968 = icmp eq i32 %967, 0
  br i1 %968, label %972, label %969

969:                                              ; preds = %966
  %970 = load i32, ptr %678, align 4
  %971 = icmp slt i32 %970, 0
  br label %972

972:                                              ; preds = %969, %966
  %973 = phi i1 [ false, %966 ], [ %971, %969 ]
  %974 = and i8 %963, 120
  %975 = icmp eq i8 %974, 0
  br i1 %975, label %1007, label %976

976:                                              ; preds = %972
  %977 = icmp slt i32 %671, %624
  br i1 %977, label %978, label %991

978:                                              ; preds = %976
  %979 = sext i32 %671 to i64
  br label %980

980:                                              ; preds = %978, %986
  %981 = phi i64 [ %979, %978 ], [ %987, %986 ]
  %982 = getelementptr inbounds i16, ptr %195, i64 %981
  %983 = load i16, ptr %982, align 2, !tbaa !45
  %984 = zext i16 %983 to i32
  %985 = icmp sgt i32 %714, %984
  br i1 %985, label %986, label %989

986:                                              ; preds = %980
  %987 = add nsw i64 %981, 1
  %988 = icmp eq i64 %987, %658
  br i1 %988, label %991, label %980

989:                                              ; preds = %980
  %990 = trunc i64 %981 to i32
  br label %991

991:                                              ; preds = %986, %989, %976
  %992 = phi i32 [ %671, %976 ], [ %990, %989 ], [ %624, %986 ]
  %993 = icmp slt i32 %672, %625
  br i1 %993, label %994, label %1007

994:                                              ; preds = %991
  %995 = sext i32 %672 to i64
  br label %996

996:                                              ; preds = %994, %1002
  %997 = phi i64 [ %995, %994 ], [ %1003, %1002 ]
  %998 = getelementptr inbounds i16, ptr %241, i64 %997
  %999 = load i16, ptr %998, align 2, !tbaa !45
  %1000 = zext i16 %999 to i32
  %1001 = icmp sgt i32 %714, %1000
  br i1 %1001, label %1002, label %1005

1002:                                             ; preds = %996
  %1003 = add nsw i64 %997, 1
  %1004 = icmp eq i64 %1003, %659
  br i1 %1004, label %1007, label %996

1005:                                             ; preds = %996
  %1006 = trunc i64 %997 to i32
  br label %1007

1007:                                             ; preds = %1002, %1005, %991, %972
  %1008 = phi i32 [ %672, %972 ], [ %672, %991 ], [ %1006, %1005 ], [ %625, %1002 ]
  %1009 = phi i32 [ %671, %972 ], [ %992, %991 ], [ %992, %1005 ], [ %992, %1002 ]
  %1010 = add nsw i32 %666, 1
  %1011 = icmp slt i32 %1010, %714
  br i1 %1011, label %1012, label %1077

1012:                                             ; preds = %1007
  %1013 = xor i32 %666, -1
  %1014 = add i32 %714, %1013
  %1015 = zext i32 %1014 to i64
  %1016 = icmp ult i32 %1014, 8
  br i1 %1016, label %1066, label %1017

1017:                                             ; preds = %1012
  %1018 = icmp ult i32 %1014, 64
  br i1 %1018, label %1047, label %1019

1019:                                             ; preds = %1017
  %1020 = and i64 %1015, 4294967232
  %1021 = trunc i32 %1010 to i16
  %1022 = insertelement <16 x i16> poison, i16 %1021, i64 0
  %1023 = shufflevector <16 x i16> %1022, <16 x i16> poison, <16 x i32> zeroinitializer
  %1024 = add <16 x i16> %1023, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1025 = trunc i64 %1020 to i32
  %1026 = add i32 %1010, %1025
  br label %1027

1027:                                             ; preds = %1027, %1019
  %1028 = phi i64 [ 0, %1019 ], [ %1037, %1027 ]
  %1029 = phi <16 x i16> [ %1024, %1019 ], [ %1038, %1027 ]
  %1030 = add <16 x i16> %1029, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1031 = add <16 x i16> %1029, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1032 = add <16 x i16> %1029, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1033 = getelementptr inbounds i16, ptr %425, i64 %1028
  store <16 x i16> %1029, ptr %1033, align 2, !tbaa !45
  %1034 = getelementptr inbounds i16, ptr %1033, i64 16
  store <16 x i16> %1030, ptr %1034, align 2, !tbaa !45
  %1035 = getelementptr inbounds i16, ptr %1033, i64 32
  store <16 x i16> %1031, ptr %1035, align 2, !tbaa !45
  %1036 = getelementptr inbounds i16, ptr %1033, i64 48
  store <16 x i16> %1032, ptr %1036, align 2, !tbaa !45
  %1037 = add nuw i64 %1028, 64
  %1038 = add <16 x i16> %1029, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1039 = icmp eq i64 %1037, %1020
  br i1 %1039, label %1040, label %1027, !llvm.loop !243

1040:                                             ; preds = %1027
  %1041 = icmp eq i64 %1020, %1015
  br i1 %1041, label %1077, label %1042

1042:                                             ; preds = %1040
  %1043 = trunc i64 %1020 to i32
  %1044 = add i32 %1010, %1043
  %1045 = and i64 %1015, 56
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1066, label %1047

1047:                                             ; preds = %1017, %1042
  %1048 = phi i32 [ %1026, %1042 ], [ %1010, %1017 ]
  %1049 = phi i64 [ %1020, %1042 ], [ 0, %1017 ]
  %1050 = and i64 %1015, 4294967288
  %1051 = trunc i64 %1050 to i32
  %1052 = add i32 %1010, %1051
  %1053 = trunc i32 %1048 to i16
  %1054 = insertelement <8 x i16> poison, i16 %1053, i64 0
  %1055 = shufflevector <8 x i16> %1054, <8 x i16> poison, <8 x i32> zeroinitializer
  %1056 = add <8 x i16> %1055, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1057

1057:                                             ; preds = %1057, %1047
  %1058 = phi i64 [ %1049, %1047 ], [ %1061, %1057 ]
  %1059 = phi <8 x i16> [ %1056, %1047 ], [ %1062, %1057 ]
  %1060 = getelementptr inbounds i16, ptr %425, i64 %1058
  store <8 x i16> %1059, ptr %1060, align 2, !tbaa !45
  %1061 = add nuw i64 %1058, 8
  %1062 = add <8 x i16> %1059, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1063 = icmp eq i64 %1061, %1050
  br i1 %1063, label %1064, label %1057, !llvm.loop !244

1064:                                             ; preds = %1057
  %1065 = icmp eq i64 %1050, %1015
  br i1 %1065, label %1077, label %1066

1066:                                             ; preds = %1012, %1042, %1064
  %1067 = phi i64 [ 0, %1012 ], [ %1020, %1042 ], [ %1050, %1064 ]
  %1068 = phi i32 [ %1010, %1012 ], [ %1044, %1042 ], [ %1052, %1064 ]
  br label %1069

1069:                                             ; preds = %1066, %1069
  %1070 = phi i64 [ %1073, %1069 ], [ %1067, %1066 ]
  %1071 = phi i32 [ %1075, %1069 ], [ %1068, %1066 ]
  %1072 = trunc i32 %1071 to i16
  %1073 = add nuw nsw i64 %1070, 1
  %1074 = getelementptr inbounds i16, ptr %425, i64 %1070
  store i16 %1072, ptr %1074, align 2, !tbaa !45
  %1075 = add nsw i32 %1071, 1
  %1076 = icmp eq i64 %1073, %1015
  br i1 %1076, label %1077, label %1069, !llvm.loop !245

1077:                                             ; preds = %1069, %1040, %1064, %1007
  %1078 = phi i32 [ 0, %1007 ], [ %1014, %1064 ], [ %1014, %1040 ], [ %1014, %1069 ]
  %1079 = zext i32 %1078 to i64
  %1080 = getelementptr inbounds i16, ptr %425, i64 %1079
  %1081 = select i1 %973, ptr %241, ptr %195
  %1082 = select i1 %973, i32 %1008, i32 %1009
  %1083 = select i1 %973, i32 %625, i32 %624
  %1084 = icmp slt i32 %1082, %1083
  br i1 %1084, label %1085, label %1244

1085:                                             ; preds = %1077
  %1086 = sub nsw i32 %1083, %1082
  %1087 = icmp sgt i32 %1086, 6
  br i1 %1087, label %1088, label %1181

1088:                                             ; preds = %1085
  %1089 = add nsw i32 %1083, -2
  %1090 = add nsw i32 %1082, 2
  %1091 = icmp slt i32 %1090, %1089
  br i1 %1091, label %1092, label %1181

1092:                                             ; preds = %1088
  %1093 = add nsw i32 %1082, 1
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds i16, ptr %1081, i64 %1094
  %1096 = load i16, ptr %1095, align 2, !tbaa !45
  %1097 = zext i16 %1096 to i64
  %1098 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1097
  %1099 = getelementptr inbounds %class.Vector, ptr %1098, i64 0, i32 2
  %1100 = load double, ptr %1099, align 8, !tbaa !50
  %1101 = sext i32 %1082 to i64
  %1102 = getelementptr inbounds i16, ptr %1081, i64 %1101
  %1103 = load i16, ptr %1102, align 2, !tbaa !45
  %1104 = zext i16 %1103 to i64
  %1105 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1104
  %1106 = getelementptr inbounds %class.Vector, ptr %1105, i64 0, i32 2
  %1107 = load double, ptr %1106, align 8, !tbaa !50
  %1108 = getelementptr inbounds %class.Vector, ptr %1098, i64 0, i32 1
  %1109 = load double, ptr %1108, align 8, !tbaa !68
  %1110 = getelementptr inbounds %class.Vector, ptr %1105, i64 0, i32 1
  %1111 = load double, ptr %1110, align 8, !tbaa !68
  %1112 = load double, ptr %1098, align 8, !tbaa !69
  %1113 = load double, ptr %1105, align 8, !tbaa !69
  %1114 = sext i32 %1090 to i64
  %1115 = sext i32 %1089 to i64
  %1116 = insertelement <2 x double> poison, double %1100, i64 0
  %1117 = insertelement <2 x double> %1116, double %1107, i64 1
  %1118 = insertelement <2 x double> poison, double %1109, i64 0
  %1119 = insertelement <2 x double> %1118, double %1111, i64 1
  %1120 = insertelement <2 x double> poison, double %1112, i64 0
  %1121 = insertelement <2 x double> %1120, double %1113, i64 1
  %1122 = insertelement <2 x double> poison, double %697, i64 0
  %1123 = shufflevector <2 x double> %1122, <2 x double> poison, <2 x i32> zeroinitializer
  %1124 = shufflevector <2 x double> %694, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1125 = shufflevector <2 x double> %694, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1126

1126:                                             ; preds = %1092, %1126
  %1127 = phi i64 [ %1114, %1092 ], [ %1172, %1126 ]
  %1128 = phi i32 [ %1082, %1092 ], [ %1174, %1126 ]
  %1129 = phi i32 [ 0, %1092 ], [ %1171, %1126 ]
  %1130 = phi i16 [ %1103, %1092 ], [ %1137, %1126 ]
  %1131 = phi i16 [ %1096, %1092 ], [ %1141, %1126 ]
  %1132 = phi <2 x double> [ %1117, %1092 ], [ %1176, %1126 ]
  %1133 = phi <2 x double> [ %1119, %1092 ], [ %1178, %1126 ]
  %1134 = phi <2 x double> [ %1121, %1092 ], [ %1180, %1126 ]
  %1135 = fsub <2 x double> %1123, %1132
  %1136 = getelementptr inbounds i16, ptr %1081, i64 %1127
  %1137 = load i16, ptr %1136, align 2, !tbaa !45
  %1138 = add nsw i32 %1128, 3
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds i16, ptr %1081, i64 %1139
  %1141 = load i16, ptr %1140, align 2, !tbaa !45
  %1142 = zext i16 %1137 to i64
  %1143 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1142
  %1144 = load double, ptr %1143, align 8, !tbaa !69
  %1145 = zext i16 %1141 to i64
  %1146 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1145
  %1147 = load double, ptr %1146, align 8, !tbaa !69
  %1148 = getelementptr inbounds %class.Vector, ptr %1143, i64 0, i32 1
  %1149 = load double, ptr %1148, align 8, !tbaa !68
  %1150 = getelementptr inbounds %class.Vector, ptr %1146, i64 0, i32 1
  %1151 = load double, ptr %1150, align 8, !tbaa !68
  %1152 = getelementptr inbounds %class.Vector, ptr %1143, i64 0, i32 2
  %1153 = load double, ptr %1152, align 8, !tbaa !50
  %1154 = getelementptr inbounds %class.Vector, ptr %1146, i64 0, i32 2
  %1155 = load double, ptr %1154, align 8, !tbaa !50
  %1156 = fsub <2 x double> %1125, %1134
  %1157 = fmul <2 x double> %1156, %1156
  %1158 = fsub <2 x double> %1124, %1133
  %1159 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1158, <2 x double> %1158, <2 x double> %1157)
  %1160 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1135, <2 x double> %1135, <2 x double> %1159)
  %1161 = fcmp olt <2 x double> %1160, %661
  %1162 = zext i32 %1129 to i64
  %1163 = getelementptr inbounds i16, ptr %287, i64 %1162
  store i16 %1130, ptr %1163, align 2, !tbaa !45
  %1164 = extractelement <2 x i1> %1161, i64 1
  %1165 = zext i1 %1164 to i32
  %1166 = add nuw nsw i32 %1129, %1165
  %1167 = zext i32 %1166 to i64
  %1168 = getelementptr inbounds i16, ptr %287, i64 %1167
  store i16 %1131, ptr %1168, align 2, !tbaa !45
  %1169 = extractelement <2 x i1> %1161, i64 0
  %1170 = zext i1 %1169 to i32
  %1171 = add i32 %1166, %1170
  %1172 = add nsw i64 %1127, 2
  %1173 = icmp slt i64 %1172, %1115
  %1174 = trunc i64 %1127 to i32
  %1175 = insertelement <2 x double> poison, double %1155, i64 0
  %1176 = insertelement <2 x double> %1175, double %1153, i64 1
  %1177 = insertelement <2 x double> poison, double %1151, i64 0
  %1178 = insertelement <2 x double> %1177, double %1149, i64 1
  %1179 = insertelement <2 x double> poison, double %1147, i64 0
  %1180 = insertelement <2 x double> %1179, double %1144, i64 1
  br i1 %1173, label %1126, label %1181

1181:                                             ; preds = %1126, %1088, %1085
  %1182 = phi i32 [ 0, %1085 ], [ 0, %1088 ], [ %1171, %1126 ]
  %1183 = phi i32 [ %1082, %1085 ], [ %1082, %1088 ], [ %1174, %1126 ]
  %1184 = icmp slt i32 %1183, %1083
  br i1 %1184, label %1185, label %1190

1185:                                             ; preds = %1181
  %1186 = sext i32 %1183 to i64
  %1187 = sext i32 %1083 to i64
  %1188 = extractelement <2 x double> %694, i64 0
  %1189 = extractelement <2 x double> %694, i64 1
  br label %1195

1190:                                             ; preds = %1218, %1181
  %1191 = phi i32 [ %1182, %1181 ], [ %1219, %1218 ]
  %1192 = icmp sgt i32 %1191, 0
  br i1 %1192, label %1193, label %1244

1193:                                             ; preds = %1190
  %1194 = zext i32 %1191 to i64
  br label %1222

1195:                                             ; preds = %1185, %1218
  %1196 = phi i64 [ %1186, %1185 ], [ %1220, %1218 ]
  %1197 = phi i32 [ %1182, %1185 ], [ %1219, %1218 ]
  %1198 = getelementptr inbounds i16, ptr %1081, i64 %1196
  %1199 = load i16, ptr %1198, align 2, !tbaa !45
  %1200 = zext i16 %1199 to i64
  %1201 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1200
  %1202 = load double, ptr %1201, align 8, !tbaa !69
  %1203 = getelementptr inbounds %class.Vector, ptr %1201, i64 0, i32 1
  %1204 = load double, ptr %1203, align 8, !tbaa !68
  %1205 = getelementptr inbounds %class.Vector, ptr %1201, i64 0, i32 2
  %1206 = load double, ptr %1205, align 8, !tbaa !50
  %1207 = fsub double %1188, %1202
  %1208 = fmul double %1207, %1207
  %1209 = fsub double %1189, %1204
  %1210 = tail call double @llvm.fmuladd.f64(double %1209, double %1209, double %1208)
  %1211 = fsub double %697, %1206
  %1212 = tail call double @llvm.fmuladd.f64(double %1211, double %1211, double %1210)
  %1213 = fcmp ugt double %1212, %27
  br i1 %1213, label %1218, label %1214

1214:                                             ; preds = %1195
  %1215 = add nsw i32 %1197, 1
  %1216 = sext i32 %1197 to i64
  %1217 = getelementptr inbounds i16, ptr %287, i64 %1216
  store i16 %1199, ptr %1217, align 2, !tbaa !45
  br label %1218

1218:                                             ; preds = %1214, %1195
  %1219 = phi i32 [ %1215, %1214 ], [ %1197, %1195 ]
  %1220 = add nsw i64 %1196, 1
  %1221 = icmp eq i64 %1220, %1187
  br i1 %1221, label %1190, label %1195

1222:                                             ; preds = %1193, %1239
  %1223 = phi i64 [ 0, %1193 ], [ %1242, %1239 ]
  %1224 = phi ptr [ %1080, %1193 ], [ %1241, %1239 ]
  %1225 = getelementptr inbounds i16, ptr %287, i64 %1223
  %1226 = load i16, ptr %1225, align 2, !tbaa !45
  %1227 = zext i16 %1226 to i64
  %1228 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1227, i32 4
  %1229 = load i8, ptr %1228, align 1
  %1230 = and i8 %1229, 7
  store i16 %1226, ptr %1224, align 2, !tbaa !45
  %1231 = getelementptr inbounds i16, ptr %1224, i64 1
  %1232 = insertelement <2 x i16> poison, i16 %1226, i64 0
  %1233 = shufflevector <2 x i16> %1232, <2 x i16> poison, <2 x i32> zeroinitializer
  %1234 = add <2 x i16> %1233, <i16 1, i16 2>
  store <2 x i16> %1234, ptr %1231, align 2, !tbaa !45
  %1235 = icmp ult i8 %1230, 4
  br i1 %1235, label %1239, label %1236

1236:                                             ; preds = %1222
  %1237 = add <2 x i16> %1233, <i16 3, i16 4>
  %1238 = getelementptr inbounds i16, ptr %1224, i64 3
  store <2 x i16> %1237, ptr %1238, align 2, !tbaa !45
  br label %1239

1239:                                             ; preds = %1236, %1222
  %1240 = zext i8 %1230 to i64
  %1241 = getelementptr inbounds i16, ptr %1224, i64 %1240
  %1242 = add nuw nsw i64 %1223, 1
  %1243 = icmp eq i64 %1242, %1194
  br i1 %1243, label %1244, label %1222

1244:                                             ; preds = %1239, %1190, %1077
  %1245 = phi ptr [ %1080, %1077 ], [ %1080, %1190 ], [ %1241, %1239 ]
  %1246 = ptrtoint ptr %1245 to i64
  %1247 = sub i64 %1246, %644
  %1248 = lshr exact i64 %1247, 1
  %1249 = trunc i64 %1248 to i32
  %1250 = icmp eq i32 %1249, 0
  br i1 %1250, label %1262, label %1251

1251:                                             ; preds = %1244
  %1252 = shl i64 %1247, 31
  %1253 = add i64 %1252, -4294967296
  %1254 = ashr i64 %1253, 32
  %1255 = getelementptr inbounds i16, ptr %425, i64 %1254
  %1256 = load i16, ptr %1255, align 2, !tbaa !45
  %1257 = ashr i64 %1252, 32
  %1258 = getelementptr inbounds i16, ptr %425, i64 %1257
  store i16 %1256, ptr %1258, align 2, !tbaa !45
  br label %1262

1259:                                             ; preds = %958
  %1260 = add nsw i32 %674, 1
  %1261 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1262

1262:                                             ; preds = %1244, %1251, %1259
  %1263 = phi i32 [ %1261, %1259 ], [ %967, %1251 ], [ %967, %1244 ]
  %1264 = phi i32 [ %1260, %1259 ], [ 0, %1251 ], [ 0, %1244 ]
  %1265 = phi i32 [ %673, %1259 ], [ %1249, %1251 ], [ 0, %1244 ]
  %1266 = phi i32 [ %672, %1259 ], [ %1008, %1251 ], [ %1008, %1244 ]
  %1267 = phi i32 [ %671, %1259 ], [ %1009, %1251 ], [ %1009, %1244 ]
  %1268 = icmp eq i32 %1263, 0
  br i1 %1268, label %1273, label %1269

1269:                                             ; preds = %1262
  %1270 = load i32, ptr %678, align 4
  %1271 = and i32 %1270, 1073741824
  %1272 = icmp ne i32 %1271, 0
  br label %1273

1273:                                             ; preds = %1269, %1262
  %1274 = phi i1 [ false, %1262 ], [ %1272, %1269 ]
  %1275 = load i32, ptr %17, align 8, !tbaa !19
  %1276 = add nsw i32 %645, %1275
  %1277 = load i32, ptr %646, align 4, !tbaa !70
  %1278 = icmp sgt i32 %1277, %1276
  br i1 %1278, label %1294, label %1279

1279:                                             ; preds = %1273, %1279
  %1280 = phi i32 [ %1282, %1279 ], [ %1277, %1273 ]
  %1281 = ashr i32 %1280, 1
  %1282 = add nsw i32 %1281, %1280
  %1283 = icmp sgt i32 %1282, %1276
  br i1 %1283, label %1284, label %1279

1284:                                             ; preds = %1279
  %1285 = sext i32 %1282 to i64
  %1286 = icmp slt i32 %1282, 0
  %1287 = shl nsw i64 %1285, 1
  %1288 = select i1 %1286, i64 -1, i64 %1287
  %1289 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1288) #9
  %1290 = load ptr, ptr %12, align 8, !tbaa !47
  %1291 = sext i32 %1275 to i64
  %1292 = shl nsw i64 %1291, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1289, ptr align 2 %1290, i64 %1292, i1 false)
  %1293 = icmp eq ptr %1290, null
  br i1 %1293, label %1298, label %1296

1294:                                             ; preds = %1273
  %1295 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1300

1296:                                             ; preds = %1284
  tail call void @_ZdaPv(ptr noundef nonnull %1290) #10
  %1297 = load i32, ptr %17, align 8, !tbaa !19
  br label %1298

1298:                                             ; preds = %1296, %1284
  %1299 = phi i32 [ %1297, %1296 ], [ %1275, %1284 ]
  store ptr %1289, ptr %12, align 8, !tbaa !47
  store i32 %1282, ptr %646, align 4, !tbaa !70
  br label %1300

1300:                                             ; preds = %1294, %1298
  %1301 = phi i32 [ %1275, %1294 ], [ %1299, %1298 ]
  %1302 = phi ptr [ %1295, %1294 ], [ %1289, %1298 ]
  %1303 = ptrtoint ptr %1302 to i64
  %1304 = add nsw i32 %1301, 1
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds i16, ptr %1302, i64 %1305
  %1307 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1308 = icmp eq i32 %1307, 0
  br i1 %1308, label %1489, label %1309

1309:                                             ; preds = %1300
  %1310 = load i8, ptr %698, align 2, !tbaa !52
  %1311 = zext i8 %1310 to i32
  %1312 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1313 = icmp eq i32 %1312, 0
  br i1 %1313, label %1368, label %1314

1314:                                             ; preds = %1309
  %1315 = icmp eq i8 %1310, 1
  br i1 %1315, label %1316, label %2647

1316:                                             ; preds = %1314
  %1317 = icmp slt i32 %1264, %1265
  br i1 %1317, label %1318, label %1429

1318:                                             ; preds = %1316
  %1319 = sext i32 %1264 to i64
  %1320 = sext i32 %1265 to i64
  %1321 = sub nsw i64 %1320, %1319
  %1322 = xor i64 %1319, -1
  %1323 = and i64 %1321, 1
  %1324 = icmp eq i64 %1323, 0
  br i1 %1324, label %1336, label %1325

1325:                                             ; preds = %1318
  %1326 = getelementptr inbounds i16, ptr %425, i64 %1319
  %1327 = load i16, ptr %1326, align 2, !tbaa !45
  %1328 = zext i16 %1327 to i64
  %1329 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1328, i32 3
  %1330 = load i8, ptr %1329, align 2, !tbaa !52
  %1331 = icmp eq i8 %1330, 1
  br i1 %1331, label %1332, label %1333

1332:                                             ; preds = %1325
  store i16 %1327, ptr %471, align 2, !tbaa !45
  br label %1333

1333:                                             ; preds = %1332, %1325
  %1334 = phi ptr [ %662, %1332 ], [ %471, %1325 ]
  %1335 = add nsw i64 %1319, 1
  br label %1336

1336:                                             ; preds = %1333, %1318
  %1337 = phi ptr [ undef, %1318 ], [ %1334, %1333 ]
  %1338 = phi i64 [ %1319, %1318 ], [ %1335, %1333 ]
  %1339 = phi ptr [ %471, %1318 ], [ %1334, %1333 ]
  %1340 = sub nsw i64 0, %1320
  %1341 = icmp eq i64 %1322, %1340
  br i1 %1341, label %1429, label %1342

1342:                                             ; preds = %1336, %1364
  %1343 = phi i64 [ %1366, %1364 ], [ %1338, %1336 ]
  %1344 = phi ptr [ %1365, %1364 ], [ %1339, %1336 ]
  %1345 = getelementptr inbounds i16, ptr %425, i64 %1343
  %1346 = load i16, ptr %1345, align 2, !tbaa !45
  %1347 = zext i16 %1346 to i64
  %1348 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1347, i32 3
  %1349 = load i8, ptr %1348, align 2, !tbaa !52
  %1350 = icmp eq i8 %1349, 1
  br i1 %1350, label %1351, label %1353

1351:                                             ; preds = %1342
  %1352 = getelementptr inbounds i16, ptr %1344, i64 1
  store i16 %1346, ptr %1344, align 2, !tbaa !45
  br label %1353

1353:                                             ; preds = %1351, %1342
  %1354 = phi ptr [ %1352, %1351 ], [ %1344, %1342 ]
  %1355 = add nsw i64 %1343, 1
  %1356 = getelementptr inbounds i16, ptr %425, i64 %1355
  %1357 = load i16, ptr %1356, align 2, !tbaa !45
  %1358 = zext i16 %1357 to i64
  %1359 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1358, i32 3
  %1360 = load i8, ptr %1359, align 2, !tbaa !52
  %1361 = icmp eq i8 %1360, 1
  br i1 %1361, label %1362, label %1364

1362:                                             ; preds = %1353
  %1363 = getelementptr inbounds i16, ptr %1354, i64 1
  store i16 %1357, ptr %1354, align 2, !tbaa !45
  br label %1364

1364:                                             ; preds = %1362, %1353
  %1365 = phi ptr [ %1363, %1362 ], [ %1354, %1353 ]
  %1366 = add nsw i64 %1343, 2
  %1367 = icmp eq i64 %1366, %1320
  br i1 %1367, label %1429, label %1342

1368:                                             ; preds = %1309
  %1369 = add i8 %1310, -3
  %1370 = icmp ult i8 %1369, -2
  br i1 %1370, label %2647, label %1371

1371:                                             ; preds = %1368
  %1372 = icmp slt i32 %1264, %1265
  br i1 %1372, label %1373, label %1429

1373:                                             ; preds = %1371
  %1374 = sext i32 %1264 to i64
  %1375 = sext i32 %1265 to i64
  %1376 = sub nsw i64 %1375, %1374
  %1377 = xor i64 %1374, -1
  %1378 = and i64 %1376, 1
  %1379 = icmp eq i64 %1378, 0
  br i1 %1379, label %1393, label %1380

1380:                                             ; preds = %1373
  %1381 = getelementptr inbounds i16, ptr %425, i64 %1374
  %1382 = load i16, ptr %1381, align 2, !tbaa !45
  %1383 = zext i16 %1382 to i64
  %1384 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1383, i32 3
  %1385 = load i8, ptr %1384, align 2, !tbaa !52
  %1386 = zext i8 %1385 to i32
  %1387 = add nuw nsw i32 %1386, %1311
  %1388 = icmp eq i32 %1387, 3
  br i1 %1388, label %1389, label %1390

1389:                                             ; preds = %1380
  store i16 %1382, ptr %471, align 2, !tbaa !45
  br label %1390

1390:                                             ; preds = %1389, %1380
  %1391 = phi ptr [ %663, %1389 ], [ %471, %1380 ]
  %1392 = add nsw i64 %1374, 1
  br label %1393

1393:                                             ; preds = %1390, %1373
  %1394 = phi ptr [ undef, %1373 ], [ %1391, %1390 ]
  %1395 = phi i64 [ %1374, %1373 ], [ %1392, %1390 ]
  %1396 = phi ptr [ %471, %1373 ], [ %1391, %1390 ]
  %1397 = sub nsw i64 0, %1375
  %1398 = icmp eq i64 %1377, %1397
  br i1 %1398, label %1429, label %1399

1399:                                             ; preds = %1393, %1425
  %1400 = phi i64 [ %1427, %1425 ], [ %1395, %1393 ]
  %1401 = phi ptr [ %1426, %1425 ], [ %1396, %1393 ]
  %1402 = getelementptr inbounds i16, ptr %425, i64 %1400
  %1403 = load i16, ptr %1402, align 2, !tbaa !45
  %1404 = zext i16 %1403 to i64
  %1405 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1404, i32 3
  %1406 = load i8, ptr %1405, align 2, !tbaa !52
  %1407 = zext i8 %1406 to i32
  %1408 = add nuw nsw i32 %1407, %1311
  %1409 = icmp eq i32 %1408, 3
  br i1 %1409, label %1410, label %1412

1410:                                             ; preds = %1399
  %1411 = getelementptr inbounds i16, ptr %1401, i64 1
  store i16 %1403, ptr %1401, align 2, !tbaa !45
  br label %1412

1412:                                             ; preds = %1410, %1399
  %1413 = phi ptr [ %1411, %1410 ], [ %1401, %1399 ]
  %1414 = add nsw i64 %1400, 1
  %1415 = getelementptr inbounds i16, ptr %425, i64 %1414
  %1416 = load i16, ptr %1415, align 2, !tbaa !45
  %1417 = zext i16 %1416 to i64
  %1418 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1417, i32 3
  %1419 = load i8, ptr %1418, align 2, !tbaa !52
  %1420 = zext i8 %1419 to i32
  %1421 = add nuw nsw i32 %1420, %1311
  %1422 = icmp eq i32 %1421, 3
  br i1 %1422, label %1423, label %1425

1423:                                             ; preds = %1412
  %1424 = getelementptr inbounds i16, ptr %1413, i64 1
  store i16 %1416, ptr %1413, align 2, !tbaa !45
  br label %1425

1425:                                             ; preds = %1423, %1412
  %1426 = phi ptr [ %1424, %1423 ], [ %1413, %1412 ]
  %1427 = add nsw i64 %1400, 2
  %1428 = icmp eq i64 %1427, %1375
  br i1 %1428, label %1429, label %1399

1429:                                             ; preds = %1336, %1364, %1393, %1425, %1316, %1371
  %1430 = phi ptr [ %471, %1371 ], [ %471, %1316 ], [ %1394, %1393 ], [ %1426, %1425 ], [ %1337, %1336 ], [ %1365, %1364 ]
  %1431 = ptrtoint ptr %1430 to i64
  %1432 = sub i64 %1431, %647
  %1433 = lshr exact i64 %1432, 1
  %1434 = trunc i64 %1433 to i32
  %1435 = icmp sgt i32 %1434, 0
  br i1 %1435, label %1436, label %1710

1436:                                             ; preds = %1429
  %1437 = and i64 %1433, 4294967295
  %1438 = extractelement <2 x double> %694, i64 0
  %1439 = extractelement <2 x double> %694, i64 1
  br label %1440

1440:                                             ; preds = %1436, %1484
  %1441 = phi i64 [ 0, %1436 ], [ %1487, %1484 ]
  %1442 = phi ptr [ %471, %1436 ], [ %1486, %1484 ]
  %1443 = phi ptr [ %1306, %1436 ], [ %1485, %1484 ]
  %1444 = getelementptr inbounds i16, ptr %471, i64 %1441
  %1445 = load i16, ptr %1444, align 2, !tbaa !45
  %1446 = zext i16 %1445 to i64
  %1447 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1446
  %1448 = load double, ptr %1447, align 8, !tbaa !69
  %1449 = fsub double %1438, %1448
  %1450 = fmul double %1449, %1449
  %1451 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 1
  %1452 = load double, ptr %1451, align 8, !tbaa !68
  %1453 = fsub double %1439, %1452
  %1454 = tail call double @llvm.fmuladd.f64(double %1453, double %1453, double %1450)
  %1455 = getelementptr inbounds %class.Vector, ptr %1447, i64 0, i32 2
  %1456 = load double, ptr %1455, align 8, !tbaa !50
  %1457 = fsub double %697, %1456
  %1458 = tail call double @llvm.fmuladd.f64(double %1457, double %1457, double %1454)
  br i1 %1274, label %1459, label %1466

1459:                                             ; preds = %1440
  %1460 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1446
  %1461 = load i32, ptr %1460, align 4
  %1462 = and i32 %1461, 1073741824
  %1463 = icmp ne i32 %1462, 0
  %1464 = fcmp ugt double %1458, %24
  %1465 = select i1 %1463, i1 true, i1 %1464
  br i1 %1465, label %1484, label %1471

1466:                                             ; preds = %1440
  %1467 = fcmp ugt double %1458, %24
  br i1 %1467, label %1484, label %1468

1468:                                             ; preds = %1466
  %1469 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1446
  %1470 = load i32, ptr %1469, align 4
  br label %1471

1471:                                             ; preds = %1468, %1459
  %1472 = phi i32 [ %1470, %1468 ], [ %1461, %1459 ]
  %1473 = shl i32 %1472, 2
  %1474 = ashr exact i32 %1473, 2
  %1475 = icmp slt i32 %1474, %722
  %1476 = icmp sgt i32 %1474, %724
  %1477 = select i1 %1475, i1 true, i1 %1476
  %1478 = select i1 %1477, ptr %1443, ptr %1442
  %1479 = zext i1 %1477 to i64
  %1480 = getelementptr inbounds i16, ptr %1443, i64 %1479
  %1481 = xor i1 %1477, true
  %1482 = zext i1 %1481 to i64
  %1483 = getelementptr inbounds i16, ptr %1442, i64 %1482
  store i16 %1445, ptr %1478, align 2, !tbaa !45
  br label %1484

1484:                                             ; preds = %1471, %1466, %1459
  %1485 = phi ptr [ %1443, %1459 ], [ %1443, %1466 ], [ %1480, %1471 ]
  %1486 = phi ptr [ %1442, %1459 ], [ %1442, %1466 ], [ %1483, %1471 ]
  %1487 = add nuw nsw i64 %1441, 1
  %1488 = icmp eq i64 %1487, %1437
  br i1 %1488, label %1710, label %1440

1489:                                             ; preds = %1300
  %1490 = icmp slt i32 %1264, %1265
  br i1 %1274, label %1491, label %1539

1491:                                             ; preds = %1489
  br i1 %1490, label %1492, label %1710

1492:                                             ; preds = %1491
  %1493 = sext i32 %1264 to i64
  %1494 = sext i32 %1265 to i64
  %1495 = extractelement <2 x double> %694, i64 0
  %1496 = extractelement <2 x double> %694, i64 1
  br label %1497

1497:                                             ; preds = %1492, %1534
  %1498 = phi i64 [ %1493, %1492 ], [ %1537, %1534 ]
  %1499 = phi ptr [ %471, %1492 ], [ %1536, %1534 ]
  %1500 = phi ptr [ %1306, %1492 ], [ %1535, %1534 ]
  %1501 = getelementptr inbounds i16, ptr %425, i64 %1498
  %1502 = load i16, ptr %1501, align 2, !tbaa !45
  %1503 = zext i16 %1502 to i64
  %1504 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1503
  %1505 = load i32, ptr %1504, align 4
  %1506 = and i32 %1505, 1073741824
  %1507 = icmp eq i32 %1506, 0
  br i1 %1507, label %1508, label %1534

1508:                                             ; preds = %1497
  %1509 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1503
  %1510 = getelementptr inbounds %class.Vector, ptr %1509, i64 0, i32 2
  %1511 = load double, ptr %1510, align 8, !tbaa !50
  %1512 = fsub double %697, %1511
  %1513 = getelementptr inbounds %class.Vector, ptr %1509, i64 0, i32 1
  %1514 = load double, ptr %1513, align 8, !tbaa !68
  %1515 = fsub double %1496, %1514
  %1516 = load double, ptr %1509, align 8, !tbaa !69
  %1517 = fsub double %1495, %1516
  %1518 = fmul double %1517, %1517
  %1519 = tail call double @llvm.fmuladd.f64(double %1515, double %1515, double %1518)
  %1520 = tail call double @llvm.fmuladd.f64(double %1512, double %1512, double %1519)
  %1521 = fcmp ugt double %1520, %24
  br i1 %1521, label %1534, label %1522

1522:                                             ; preds = %1508
  %1523 = shl i32 %1505, 2
  %1524 = ashr exact i32 %1523, 2
  %1525 = icmp slt i32 %1524, %722
  %1526 = icmp sgt i32 %1524, %724
  %1527 = select i1 %1525, i1 true, i1 %1526
  %1528 = select i1 %1527, ptr %1500, ptr %1499
  %1529 = zext i1 %1527 to i64
  %1530 = getelementptr inbounds i16, ptr %1500, i64 %1529
  %1531 = xor i1 %1527, true
  %1532 = zext i1 %1531 to i64
  %1533 = getelementptr inbounds i16, ptr %1499, i64 %1532
  store i16 %1502, ptr %1528, align 2, !tbaa !45
  br label %1534

1534:                                             ; preds = %1522, %1508, %1497
  %1535 = phi ptr [ %1500, %1497 ], [ %1500, %1508 ], [ %1530, %1522 ]
  %1536 = phi ptr [ %1499, %1497 ], [ %1499, %1508 ], [ %1533, %1522 ]
  %1537 = add nsw i64 %1498, 1
  %1538 = icmp eq i64 %1537, %1494
  br i1 %1538, label %1710, label %1497

1539:                                             ; preds = %1489
  br i1 %1490, label %1540, label %1710

1540:                                             ; preds = %1539
  %1541 = sub nsw i32 %1265, %1264
  %1542 = icmp sgt i32 %1541, 6
  br i1 %1542, label %1543, label %1661

1543:                                             ; preds = %1540
  %1544 = add nsw i32 %1265, -2
  %1545 = add nsw i32 %1264, 2
  %1546 = icmp slt i32 %1545, %1544
  br i1 %1546, label %1547, label %1661

1547:                                             ; preds = %1543
  %1548 = sext i32 %1264 to i64
  %1549 = getelementptr inbounds i16, ptr %425, i64 %1548
  %1550 = load i16, ptr %1549, align 2, !tbaa !45
  %1551 = zext i16 %1550 to i64
  %1552 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1551
  %1553 = load i32, ptr %1552, align 4
  %1554 = add nsw i32 %1264, 1
  %1555 = sext i32 %1554 to i64
  %1556 = getelementptr inbounds i16, ptr %425, i64 %1555
  %1557 = load i16, ptr %1556, align 2, !tbaa !45
  %1558 = zext i16 %1557 to i64
  %1559 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1558
  %1560 = getelementptr inbounds %class.Vector, ptr %1559, i64 0, i32 2
  %1561 = load double, ptr %1560, align 8, !tbaa !50
  %1562 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1551
  %1563 = getelementptr inbounds %class.Vector, ptr %1562, i64 0, i32 2
  %1564 = load double, ptr %1563, align 8, !tbaa !50
  %1565 = getelementptr inbounds %class.Vector, ptr %1559, i64 0, i32 1
  %1566 = load double, ptr %1565, align 8, !tbaa !68
  %1567 = getelementptr inbounds %class.Vector, ptr %1562, i64 0, i32 1
  %1568 = load double, ptr %1567, align 8, !tbaa !68
  %1569 = load double, ptr %1559, align 8, !tbaa !69
  %1570 = load double, ptr %1562, align 8, !tbaa !69
  %1571 = sext i32 %1545 to i64
  %1572 = sext i32 %1544 to i64
  %1573 = extractelement <2 x double> %694, i64 0
  %1574 = extractelement <2 x double> %694, i64 1
  br label %1575

1575:                                             ; preds = %1547, %1655
  %1576 = phi i64 [ %1571, %1547 ], [ %1658, %1655 ]
  %1577 = phi i64 [ %1558, %1547 ], [ %1615, %1655 ]
  %1578 = phi i32 [ %1553, %1547 ], [ %1643, %1655 ]
  %1579 = phi ptr [ %471, %1547 ], [ %1657, %1655 ]
  %1580 = phi ptr [ %1306, %1547 ], [ %1656, %1655 ]
  %1581 = phi i32 [ %1264, %1547 ], [ %1660, %1655 ]
  %1582 = phi i16 [ %1550, %1547 ], [ %1607, %1655 ]
  %1583 = phi i16 [ %1557, %1547 ], [ %1611, %1655 ]
  %1584 = phi double [ %1570, %1547 ], [ %1614, %1655 ]
  %1585 = phi double [ %1569, %1547 ], [ %1617, %1655 ]
  %1586 = phi double [ %1568, %1547 ], [ %1619, %1655 ]
  %1587 = phi double [ %1566, %1547 ], [ %1621, %1655 ]
  %1588 = phi double [ %1564, %1547 ], [ %1623, %1655 ]
  %1589 = phi double [ %1561, %1547 ], [ %1625, %1655 ]
  %1590 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1577
  %1591 = load i32, ptr %1590, align 4
  %1592 = shl i32 %1591, 2
  %1593 = ashr exact i32 %1592, 2
  %1594 = fsub double %1573, %1584
  %1595 = fsub double %1573, %1585
  %1596 = fmul double %1594, %1594
  %1597 = fmul double %1595, %1595
  %1598 = fsub double %1574, %1586
  %1599 = fsub double %1574, %1587
  %1600 = tail call double @llvm.fmuladd.f64(double %1598, double %1598, double %1596)
  %1601 = tail call double @llvm.fmuladd.f64(double %1599, double %1599, double %1597)
  %1602 = fsub double %697, %1588
  %1603 = fsub double %697, %1589
  %1604 = tail call double @llvm.fmuladd.f64(double %1602, double %1602, double %1600)
  %1605 = tail call double @llvm.fmuladd.f64(double %1603, double %1603, double %1601)
  %1606 = getelementptr inbounds i16, ptr %425, i64 %1576
  %1607 = load i16, ptr %1606, align 2, !tbaa !45
  %1608 = add nsw i32 %1581, 3
  %1609 = sext i32 %1608 to i64
  %1610 = getelementptr inbounds i16, ptr %425, i64 %1609
  %1611 = load i16, ptr %1610, align 2, !tbaa !45
  %1612 = zext i16 %1607 to i64
  %1613 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1612
  %1614 = load double, ptr %1613, align 8, !tbaa !69
  %1615 = zext i16 %1611 to i64
  %1616 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1615
  %1617 = load double, ptr %1616, align 8, !tbaa !69
  %1618 = getelementptr inbounds %class.Vector, ptr %1613, i64 0, i32 1
  %1619 = load double, ptr %1618, align 8, !tbaa !68
  %1620 = getelementptr inbounds %class.Vector, ptr %1616, i64 0, i32 1
  %1621 = load double, ptr %1620, align 8, !tbaa !68
  %1622 = getelementptr inbounds %class.Vector, ptr %1613, i64 0, i32 2
  %1623 = load double, ptr %1622, align 8, !tbaa !50
  %1624 = getelementptr inbounds %class.Vector, ptr %1616, i64 0, i32 2
  %1625 = load double, ptr %1624, align 8, !tbaa !50
  %1626 = fcmp ugt double %1604, %24
  br i1 %1626, label %1639, label %1627

1627:                                             ; preds = %1575
  %1628 = shl i32 %1578, 2
  %1629 = ashr exact i32 %1628, 2
  %1630 = icmp slt i32 %1629, %722
  %1631 = icmp sgt i32 %1629, %724
  %1632 = select i1 %1630, i1 true, i1 %1631
  %1633 = select i1 %1632, ptr %1580, ptr %1579
  %1634 = zext i1 %1632 to i64
  %1635 = getelementptr inbounds i16, ptr %1580, i64 %1634
  %1636 = xor i1 %1632, true
  %1637 = zext i1 %1636 to i64
  %1638 = getelementptr inbounds i16, ptr %1579, i64 %1637
  store i16 %1582, ptr %1633, align 2, !tbaa !45
  br label %1639

1639:                                             ; preds = %1627, %1575
  %1640 = phi ptr [ %1580, %1575 ], [ %1635, %1627 ]
  %1641 = phi ptr [ %1579, %1575 ], [ %1638, %1627 ]
  %1642 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1612
  %1643 = load i32, ptr %1642, align 4
  %1644 = fcmp ugt double %1605, %24
  br i1 %1644, label %1655, label %1645

1645:                                             ; preds = %1639
  %1646 = icmp slt i32 %1593, %722
  %1647 = icmp sgt i32 %1593, %724
  %1648 = select i1 %1646, i1 true, i1 %1647
  %1649 = select i1 %1648, ptr %1640, ptr %1641
  %1650 = zext i1 %1648 to i64
  %1651 = getelementptr inbounds i16, ptr %1640, i64 %1650
  %1652 = xor i1 %1648, true
  %1653 = zext i1 %1652 to i64
  %1654 = getelementptr inbounds i16, ptr %1641, i64 %1653
  store i16 %1583, ptr %1649, align 2, !tbaa !45
  br label %1655

1655:                                             ; preds = %1645, %1639
  %1656 = phi ptr [ %1640, %1639 ], [ %1651, %1645 ]
  %1657 = phi ptr [ %1641, %1639 ], [ %1654, %1645 ]
  %1658 = add nsw i64 %1576, 2
  %1659 = icmp slt i64 %1658, %1572
  %1660 = trunc i64 %1576 to i32
  br i1 %1659, label %1575, label %1661

1661:                                             ; preds = %1655, %1543, %1540
  %1662 = phi i32 [ %1264, %1540 ], [ %1264, %1543 ], [ %1660, %1655 ]
  %1663 = phi ptr [ %1306, %1540 ], [ %1306, %1543 ], [ %1656, %1655 ]
  %1664 = phi ptr [ %471, %1540 ], [ %471, %1543 ], [ %1657, %1655 ]
  %1665 = icmp slt i32 %1662, %1265
  br i1 %1665, label %1666, label %1710

1666:                                             ; preds = %1661
  %1667 = sext i32 %1662 to i64
  %1668 = sext i32 %1265 to i64
  %1669 = extractelement <2 x double> %694, i64 0
  %1670 = extractelement <2 x double> %694, i64 1
  br label %1671

1671:                                             ; preds = %1666, %1705
  %1672 = phi i64 [ %1667, %1666 ], [ %1708, %1705 ]
  %1673 = phi ptr [ %1664, %1666 ], [ %1707, %1705 ]
  %1674 = phi ptr [ %1663, %1666 ], [ %1706, %1705 ]
  %1675 = getelementptr inbounds i16, ptr %425, i64 %1672
  %1676 = load i16, ptr %1675, align 2, !tbaa !45
  %1677 = zext i16 %1676 to i64
  %1678 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1677
  %1679 = load double, ptr %1678, align 8, !tbaa !69
  %1680 = getelementptr inbounds %class.Vector, ptr %1678, i64 0, i32 1
  %1681 = load double, ptr %1680, align 8, !tbaa !68
  %1682 = getelementptr inbounds %class.Vector, ptr %1678, i64 0, i32 2
  %1683 = load double, ptr %1682, align 8, !tbaa !50
  %1684 = fsub double %1669, %1679
  %1685 = fmul double %1684, %1684
  %1686 = fsub double %1670, %1681
  %1687 = tail call double @llvm.fmuladd.f64(double %1686, double %1686, double %1685)
  %1688 = fsub double %697, %1683
  %1689 = tail call double @llvm.fmuladd.f64(double %1688, double %1688, double %1687)
  %1690 = fcmp ugt double %1689, %24
  br i1 %1690, label %1705, label %1691

1691:                                             ; preds = %1671
  %1692 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1677
  %1693 = load i32, ptr %1692, align 4
  %1694 = shl i32 %1693, 2
  %1695 = ashr exact i32 %1694, 2
  %1696 = icmp slt i32 %1695, %722
  %1697 = icmp sgt i32 %1695, %724
  %1698 = select i1 %1696, i1 true, i1 %1697
  %1699 = select i1 %1698, ptr %1674, ptr %1673
  %1700 = zext i1 %1698 to i64
  %1701 = getelementptr inbounds i16, ptr %1674, i64 %1700
  %1702 = xor i1 %1698, true
  %1703 = zext i1 %1702 to i64
  %1704 = getelementptr inbounds i16, ptr %1673, i64 %1703
  store i16 %1676, ptr %1699, align 2, !tbaa !45
  br label %1705

1705:                                             ; preds = %1691, %1671
  %1706 = phi ptr [ %1674, %1671 ], [ %1701, %1691 ]
  %1707 = phi ptr [ %1673, %1671 ], [ %1704, %1691 ]
  %1708 = add nsw i64 %1672, 1
  %1709 = icmp eq i64 %1708, %1668
  br i1 %1709, label %1710, label %1671

1710:                                             ; preds = %1484, %1705, %1534, %1429, %1661, %1491, %1539
  %1711 = phi ptr [ %1306, %1539 ], [ %1306, %1491 ], [ %1663, %1661 ], [ %1306, %1429 ], [ %1535, %1534 ], [ %1706, %1705 ], [ %1485, %1484 ]
  %1712 = phi ptr [ %471, %1539 ], [ %471, %1491 ], [ %1664, %1661 ], [ %471, %1429 ], [ %1536, %1534 ], [ %1707, %1705 ], [ %1486, %1484 ]
  %1713 = ptrtoint ptr %1712 to i64
  %1714 = sub i64 %1713, %647
  %1715 = lshr exact i64 %1714, 1
  %1716 = trunc i64 %1715 to i32
  %1717 = icmp sgt i32 %1716, 0
  br i1 %1717, label %1718, label %1818

1718:                                             ; preds = %1710
  %1719 = and i64 %1715, 4294967295
  %1720 = and i64 %1715, 1
  %1721 = icmp eq i64 %1719, 1
  br i1 %1721, label %1786, label %1722

1722:                                             ; preds = %1718
  %1723 = sub nsw i64 %1719, %1720
  br label %1724

1724:                                             ; preds = %1779, %1722
  %1725 = phi i64 [ 0, %1722 ], [ %1783, %1779 ]
  %1726 = phi ptr [ %1711, %1722 ], [ %1782, %1779 ]
  %1727 = phi ptr [ %333, %1722 ], [ %1781, %1779 ]
  %1728 = phi ptr [ %379, %1722 ], [ %1780, %1779 ]
  %1729 = phi i64 [ 0, %1722 ], [ %1784, %1779 ]
  %1730 = getelementptr inbounds i16, ptr %471, i64 %1725
  %1731 = load i16, ptr %1730, align 2, !tbaa !45
  %1732 = zext i16 %1731 to i64
  %1733 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1732
  %1734 = load i32, ptr %1733, align 4
  %1735 = shl i32 %1734, 2
  %1736 = ashr exact i32 %1735, 2
  %1737 = sext i32 %1736 to i64
  %1738 = getelementptr inbounds i8, ptr %959, i64 %1737
  %1739 = load i8, ptr %1738, align 1, !tbaa !59
  %1740 = sext i8 %1739 to i32
  switch i32 %1740, label %1752 [
    i32 0, label %1741
    i32 1, label %1743
    i32 2, label %1745
  ]

1741:                                             ; preds = %1724
  %1742 = getelementptr inbounds i16, ptr %1726, i64 1
  br label %1747

1743:                                             ; preds = %1724
  %1744 = getelementptr inbounds i16, ptr %1727, i64 1
  br label %1747

1745:                                             ; preds = %1724
  %1746 = getelementptr inbounds i16, ptr %1728, i64 1
  br label %1747

1747:                                             ; preds = %1741, %1743, %1745
  %1748 = phi ptr [ %1728, %1745 ], [ %1727, %1743 ], [ %1726, %1741 ]
  %1749 = phi ptr [ %1746, %1745 ], [ %1728, %1743 ], [ %1728, %1741 ]
  %1750 = phi ptr [ %1727, %1745 ], [ %1744, %1743 ], [ %1727, %1741 ]
  %1751 = phi ptr [ %1726, %1745 ], [ %1726, %1743 ], [ %1742, %1741 ]
  store i16 %1731, ptr %1748, align 2, !tbaa !45
  br label %1752

1752:                                             ; preds = %1747, %1724
  %1753 = phi ptr [ %1728, %1724 ], [ %1749, %1747 ]
  %1754 = phi ptr [ %1727, %1724 ], [ %1750, %1747 ]
  %1755 = phi ptr [ %1726, %1724 ], [ %1751, %1747 ]
  %1756 = or i64 %1725, 1
  %1757 = getelementptr inbounds i16, ptr %471, i64 %1756
  %1758 = load i16, ptr %1757, align 2, !tbaa !45
  %1759 = zext i16 %1758 to i64
  %1760 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1759
  %1761 = load i32, ptr %1760, align 4
  %1762 = shl i32 %1761, 2
  %1763 = ashr exact i32 %1762, 2
  %1764 = sext i32 %1763 to i64
  %1765 = getelementptr inbounds i8, ptr %959, i64 %1764
  %1766 = load i8, ptr %1765, align 1, !tbaa !59
  %1767 = sext i8 %1766 to i32
  switch i32 %1767, label %1779 [
    i32 0, label %1772
    i32 1, label %1770
    i32 2, label %1768
  ]

1768:                                             ; preds = %1752
  %1769 = getelementptr inbounds i16, ptr %1753, i64 1
  br label %1774

1770:                                             ; preds = %1752
  %1771 = getelementptr inbounds i16, ptr %1754, i64 1
  br label %1774

1772:                                             ; preds = %1752
  %1773 = getelementptr inbounds i16, ptr %1755, i64 1
  br label %1774

1774:                                             ; preds = %1772, %1770, %1768
  %1775 = phi ptr [ %1753, %1768 ], [ %1754, %1770 ], [ %1755, %1772 ]
  %1776 = phi ptr [ %1769, %1768 ], [ %1753, %1770 ], [ %1753, %1772 ]
  %1777 = phi ptr [ %1754, %1768 ], [ %1771, %1770 ], [ %1754, %1772 ]
  %1778 = phi ptr [ %1755, %1768 ], [ %1755, %1770 ], [ %1773, %1772 ]
  store i16 %1758, ptr %1775, align 2, !tbaa !45
  br label %1779

1779:                                             ; preds = %1774, %1752
  %1780 = phi ptr [ %1753, %1752 ], [ %1776, %1774 ]
  %1781 = phi ptr [ %1754, %1752 ], [ %1777, %1774 ]
  %1782 = phi ptr [ %1755, %1752 ], [ %1778, %1774 ]
  %1783 = add nuw nsw i64 %1725, 2
  %1784 = add i64 %1729, 2
  %1785 = icmp eq i64 %1784, %1723
  br i1 %1785, label %1786, label %1724

1786:                                             ; preds = %1779, %1718
  %1787 = phi ptr [ undef, %1718 ], [ %1780, %1779 ]
  %1788 = phi ptr [ undef, %1718 ], [ %1781, %1779 ]
  %1789 = phi ptr [ undef, %1718 ], [ %1782, %1779 ]
  %1790 = phi i64 [ 0, %1718 ], [ %1783, %1779 ]
  %1791 = phi ptr [ %1711, %1718 ], [ %1782, %1779 ]
  %1792 = phi ptr [ %333, %1718 ], [ %1781, %1779 ]
  %1793 = phi ptr [ %379, %1718 ], [ %1780, %1779 ]
  %1794 = icmp eq i64 %1720, 0
  br i1 %1794, label %1818, label %1795

1795:                                             ; preds = %1786
  %1796 = getelementptr inbounds i16, ptr %471, i64 %1790
  %1797 = load i16, ptr %1796, align 2, !tbaa !45
  %1798 = zext i16 %1797 to i64
  %1799 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1798
  %1800 = load i32, ptr %1799, align 4
  %1801 = shl i32 %1800, 2
  %1802 = ashr exact i32 %1801, 2
  %1803 = sext i32 %1802 to i64
  %1804 = getelementptr inbounds i8, ptr %959, i64 %1803
  %1805 = load i8, ptr %1804, align 1, !tbaa !59
  %1806 = sext i8 %1805 to i32
  switch i32 %1806, label %1818 [
    i32 0, label %1811
    i32 1, label %1809
    i32 2, label %1807
  ]

1807:                                             ; preds = %1795
  %1808 = getelementptr inbounds i16, ptr %1793, i64 1
  br label %1813

1809:                                             ; preds = %1795
  %1810 = getelementptr inbounds i16, ptr %1792, i64 1
  br label %1813

1811:                                             ; preds = %1795
  %1812 = getelementptr inbounds i16, ptr %1791, i64 1
  br label %1813

1813:                                             ; preds = %1811, %1809, %1807
  %1814 = phi ptr [ %1793, %1807 ], [ %1792, %1809 ], [ %1791, %1811 ]
  %1815 = phi ptr [ %1808, %1807 ], [ %1793, %1809 ], [ %1793, %1811 ]
  %1816 = phi ptr [ %1792, %1807 ], [ %1810, %1809 ], [ %1792, %1811 ]
  %1817 = phi ptr [ %1791, %1807 ], [ %1791, %1809 ], [ %1812, %1811 ]
  store i16 %1797, ptr %1814, align 2, !tbaa !45
  br label %1818

1818:                                             ; preds = %1786, %1813, %1795, %1710
  %1819 = phi ptr [ %379, %1710 ], [ %1787, %1786 ], [ %1793, %1795 ], [ %1815, %1813 ]
  %1820 = phi ptr [ %333, %1710 ], [ %1788, %1786 ], [ %1792, %1795 ], [ %1816, %1813 ]
  %1821 = phi ptr [ %1711, %1710 ], [ %1789, %1786 ], [ %1791, %1795 ], [ %1817, %1813 ]
  %1822 = ptrtoint ptr %1821 to i64
  %1823 = ptrtoint ptr %1306 to i64
  %1824 = sub i64 %1822, %1823
  %1825 = lshr exact i64 %1824, 1
  %1826 = trunc i64 %1825 to i32
  %1827 = icmp eq i32 %1826, 0
  %1828 = shl i64 %1824, 31
  br i1 %1827, label %1834, label %1829

1829:                                             ; preds = %1818
  %1830 = add i64 %1828, -4294967296
  %1831 = ashr i64 %1830, 32
  %1832 = getelementptr inbounds i16, ptr %1306, i64 %1831
  %1833 = load i16, ptr %1832, align 2, !tbaa !45
  br label %1834

1834:                                             ; preds = %1818, %1829
  %1835 = phi i16 [ %1833, %1829 ], [ -1, %1818 ]
  %1836 = ashr i64 %1828, 32
  %1837 = getelementptr inbounds i16, ptr %1306, i64 %1836
  store i16 %1835, ptr %1837, align 2, !tbaa !45
  %1838 = trunc i64 %1825 to i16
  %1839 = add i16 %1838, 1
  %1840 = load i32, ptr %17, align 8, !tbaa !19
  %1841 = sext i32 %1840 to i64
  %1842 = getelementptr inbounds i16, ptr %1302, i64 %1841
  store i16 %1839, ptr %1842, align 2, !tbaa !45
  %1843 = add nsw i32 %1826, 2
  %1844 = add nsw i32 %1843, %1840
  %1845 = ptrtoint ptr %1820 to i64
  %1846 = sub i64 %1845, %648
  %1847 = lshr exact i64 %1846, 1
  %1848 = trunc i64 %1847 to i32
  %1849 = add nsw i32 %1844, 1
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr i16, ptr %1302, i64 %1850
  %1852 = icmp sgt i32 %1848, 0
  br i1 %1852, label %1853, label %1943

1853:                                             ; preds = %1834
  %1854 = and i64 %1847, 4294967295
  %1855 = icmp ult i64 %1854, 8
  br i1 %1855, label %1899, label %1856

1856:                                             ; preds = %1853
  %1857 = shl nsw i64 %1850, 1
  %1858 = add i64 %1857, %1303
  %1859 = sub i64 %1858, %648
  %1860 = icmp ult i64 %1859, 128
  br i1 %1860, label %1899, label %1861

1861:                                             ; preds = %1856
  %1862 = icmp ult i64 %1854, 64
  br i1 %1862, label %1886, label %1863

1863:                                             ; preds = %1861
  %1864 = and i64 %1847, 63
  %1865 = sub nsw i64 %1854, %1864
  br label %1866

1866:                                             ; preds = %1866, %1863
  %1867 = phi i64 [ 0, %1863 ], [ %1880, %1866 ]
  %1868 = getelementptr inbounds i16, ptr %333, i64 %1867
  %1869 = load <16 x i16>, ptr %1868, align 2, !tbaa !45
  %1870 = getelementptr inbounds i16, ptr %1868, i64 16
  %1871 = load <16 x i16>, ptr %1870, align 2, !tbaa !45
  %1872 = getelementptr inbounds i16, ptr %1868, i64 32
  %1873 = load <16 x i16>, ptr %1872, align 2, !tbaa !45
  %1874 = getelementptr inbounds i16, ptr %1868, i64 48
  %1875 = load <16 x i16>, ptr %1874, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1851, i64 %1867
  store <16 x i16> %1869, ptr %1876, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1876, i64 16
  store <16 x i16> %1871, ptr %1877, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1876, i64 32
  store <16 x i16> %1873, ptr %1878, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1876, i64 48
  store <16 x i16> %1875, ptr %1879, align 2, !tbaa !45
  %1880 = add nuw i64 %1867, 64
  %1881 = icmp eq i64 %1880, %1865
  br i1 %1881, label %1882, label %1866, !llvm.loop !246

1882:                                             ; preds = %1866
  %1883 = icmp eq i64 %1864, 0
  br i1 %1883, label %1937, label %1884

1884:                                             ; preds = %1882
  %1885 = icmp ult i64 %1864, 8
  br i1 %1885, label %1899, label %1886

1886:                                             ; preds = %1861, %1884
  %1887 = phi i64 [ %1865, %1884 ], [ 0, %1861 ]
  %1888 = and i64 %1847, 7
  %1889 = sub nsw i64 %1854, %1888
  br label %1890

1890:                                             ; preds = %1890, %1886
  %1891 = phi i64 [ %1887, %1886 ], [ %1895, %1890 ]
  %1892 = getelementptr inbounds i16, ptr %333, i64 %1891
  %1893 = load <8 x i16>, ptr %1892, align 2, !tbaa !45
  %1894 = getelementptr inbounds i16, ptr %1851, i64 %1891
  store <8 x i16> %1893, ptr %1894, align 2, !tbaa !45
  %1895 = add nuw i64 %1891, 8
  %1896 = icmp eq i64 %1895, %1889
  br i1 %1896, label %1897, label %1890, !llvm.loop !247

1897:                                             ; preds = %1890
  %1898 = icmp eq i64 %1888, 0
  br i1 %1898, label %1937, label %1899

1899:                                             ; preds = %1856, %1853, %1884, %1897
  %1900 = phi i64 [ 0, %1853 ], [ 0, %1856 ], [ %1865, %1884 ], [ %1889, %1897 ]
  %1901 = sub i64 %1847, %1900
  %1902 = xor i64 %1900, -1
  %1903 = add nsw i64 %1854, %1902
  %1904 = and i64 %1901, 3
  %1905 = icmp eq i64 %1904, 0
  br i1 %1905, label %1915, label %1906

1906:                                             ; preds = %1899, %1906
  %1907 = phi i64 [ %1912, %1906 ], [ %1900, %1899 ]
  %1908 = phi i64 [ %1913, %1906 ], [ 0, %1899 ]
  %1909 = getelementptr inbounds i16, ptr %333, i64 %1907
  %1910 = load i16, ptr %1909, align 2, !tbaa !45
  %1911 = getelementptr inbounds i16, ptr %1851, i64 %1907
  store i16 %1910, ptr %1911, align 2, !tbaa !45
  %1912 = add nuw nsw i64 %1907, 1
  %1913 = add i64 %1908, 1
  %1914 = icmp eq i64 %1913, %1904
  br i1 %1914, label %1915, label %1906, !llvm.loop !248

1915:                                             ; preds = %1906, %1899
  %1916 = phi i64 [ %1900, %1899 ], [ %1912, %1906 ]
  %1917 = icmp ult i64 %1903, 3
  br i1 %1917, label %1937, label %1918

1918:                                             ; preds = %1915, %1918
  %1919 = phi i64 [ %1935, %1918 ], [ %1916, %1915 ]
  %1920 = getelementptr inbounds i16, ptr %333, i64 %1919
  %1921 = load i16, ptr %1920, align 2, !tbaa !45
  %1922 = getelementptr inbounds i16, ptr %1851, i64 %1919
  store i16 %1921, ptr %1922, align 2, !tbaa !45
  %1923 = add nuw nsw i64 %1919, 1
  %1924 = getelementptr inbounds i16, ptr %333, i64 %1923
  %1925 = load i16, ptr %1924, align 2, !tbaa !45
  %1926 = getelementptr inbounds i16, ptr %1851, i64 %1923
  store i16 %1925, ptr %1926, align 2, !tbaa !45
  %1927 = add nuw nsw i64 %1919, 2
  %1928 = getelementptr inbounds i16, ptr %333, i64 %1927
  %1929 = load i16, ptr %1928, align 2, !tbaa !45
  %1930 = getelementptr inbounds i16, ptr %1851, i64 %1927
  store i16 %1929, ptr %1930, align 2, !tbaa !45
  %1931 = add nuw nsw i64 %1919, 3
  %1932 = getelementptr inbounds i16, ptr %333, i64 %1931
  %1933 = load i16, ptr %1932, align 2, !tbaa !45
  %1934 = getelementptr inbounds i16, ptr %1851, i64 %1931
  store i16 %1933, ptr %1934, align 2, !tbaa !45
  %1935 = add nuw nsw i64 %1919, 4
  %1936 = icmp eq i64 %1935, %1854
  br i1 %1936, label %1937, label %1918, !llvm.loop !249

1937:                                             ; preds = %1915, %1918, %1882, %1897
  %1938 = shl i64 %1846, 31
  %1939 = add i64 %1938, -4294967296
  %1940 = ashr i64 %1939, 32
  %1941 = getelementptr inbounds i16, ptr %1851, i64 %1940
  %1942 = load i16, ptr %1941, align 2, !tbaa !45
  br label %1943

1943:                                             ; preds = %1834, %1937
  %1944 = phi i64 [ %1847, %1937 ], [ 0, %1834 ]
  %1945 = phi i16 [ %1942, %1937 ], [ -1, %1834 ]
  %1946 = and i64 %1944, 4294967295
  %1947 = getelementptr inbounds i16, ptr %1851, i64 %1946
  store i16 %1945, ptr %1947, align 2, !tbaa !45
  %1948 = trunc i64 %1847 to i16
  %1949 = add i16 %1948, 1
  %1950 = sext i32 %1844 to i64
  %1951 = getelementptr inbounds i16, ptr %1302, i64 %1950
  store i16 %1949, ptr %1951, align 2, !tbaa !45
  %1952 = add nsw i32 %1848, 2
  %1953 = add nsw i32 %1952, %1844
  %1954 = ptrtoint ptr %1819 to i64
  %1955 = sub i64 %1954, %649
  %1956 = lshr exact i64 %1955, 1
  %1957 = trunc i64 %1956 to i32
  %1958 = add nsw i32 %1953, 1
  %1959 = sext i32 %1958 to i64
  %1960 = getelementptr i16, ptr %1302, i64 %1959
  %1961 = icmp sgt i32 %1957, 0
  br i1 %1961, label %1962, label %2052

1962:                                             ; preds = %1943
  %1963 = and i64 %1956, 4294967295
  %1964 = icmp ult i64 %1963, 8
  br i1 %1964, label %2008, label %1965

1965:                                             ; preds = %1962
  %1966 = shl nsw i64 %1959, 1
  %1967 = add i64 %1966, %1303
  %1968 = sub i64 %1967, %649
  %1969 = icmp ult i64 %1968, 128
  br i1 %1969, label %2008, label %1970

1970:                                             ; preds = %1965
  %1971 = icmp ult i64 %1963, 64
  br i1 %1971, label %1995, label %1972

1972:                                             ; preds = %1970
  %1973 = and i64 %1956, 63
  %1974 = sub nsw i64 %1963, %1973
  br label %1975

1975:                                             ; preds = %1975, %1972
  %1976 = phi i64 [ 0, %1972 ], [ %1989, %1975 ]
  %1977 = getelementptr inbounds i16, ptr %379, i64 %1976
  %1978 = load <16 x i16>, ptr %1977, align 2, !tbaa !45
  %1979 = getelementptr inbounds i16, ptr %1977, i64 16
  %1980 = load <16 x i16>, ptr %1979, align 2, !tbaa !45
  %1981 = getelementptr inbounds i16, ptr %1977, i64 32
  %1982 = load <16 x i16>, ptr %1981, align 2, !tbaa !45
  %1983 = getelementptr inbounds i16, ptr %1977, i64 48
  %1984 = load <16 x i16>, ptr %1983, align 2, !tbaa !45
  %1985 = getelementptr inbounds i16, ptr %1960, i64 %1976
  store <16 x i16> %1978, ptr %1985, align 2, !tbaa !45
  %1986 = getelementptr inbounds i16, ptr %1985, i64 16
  store <16 x i16> %1980, ptr %1986, align 2, !tbaa !45
  %1987 = getelementptr inbounds i16, ptr %1985, i64 32
  store <16 x i16> %1982, ptr %1987, align 2, !tbaa !45
  %1988 = getelementptr inbounds i16, ptr %1985, i64 48
  store <16 x i16> %1984, ptr %1988, align 2, !tbaa !45
  %1989 = add nuw i64 %1976, 64
  %1990 = icmp eq i64 %1989, %1974
  br i1 %1990, label %1991, label %1975, !llvm.loop !250

1991:                                             ; preds = %1975
  %1992 = icmp eq i64 %1973, 0
  br i1 %1992, label %2046, label %1993

1993:                                             ; preds = %1991
  %1994 = icmp ult i64 %1973, 8
  br i1 %1994, label %2008, label %1995

1995:                                             ; preds = %1970, %1993
  %1996 = phi i64 [ %1974, %1993 ], [ 0, %1970 ]
  %1997 = and i64 %1956, 7
  %1998 = sub nsw i64 %1963, %1997
  br label %1999

1999:                                             ; preds = %1999, %1995
  %2000 = phi i64 [ %1996, %1995 ], [ %2004, %1999 ]
  %2001 = getelementptr inbounds i16, ptr %379, i64 %2000
  %2002 = load <8 x i16>, ptr %2001, align 2, !tbaa !45
  %2003 = getelementptr inbounds i16, ptr %1960, i64 %2000
  store <8 x i16> %2002, ptr %2003, align 2, !tbaa !45
  %2004 = add nuw i64 %2000, 8
  %2005 = icmp eq i64 %2004, %1998
  br i1 %2005, label %2006, label %1999, !llvm.loop !251

2006:                                             ; preds = %1999
  %2007 = icmp eq i64 %1997, 0
  br i1 %2007, label %2046, label %2008

2008:                                             ; preds = %1965, %1962, %1993, %2006
  %2009 = phi i64 [ 0, %1962 ], [ 0, %1965 ], [ %1974, %1993 ], [ %1998, %2006 ]
  %2010 = sub i64 %1956, %2009
  %2011 = xor i64 %2009, -1
  %2012 = add nsw i64 %1963, %2011
  %2013 = and i64 %2010, 3
  %2014 = icmp eq i64 %2013, 0
  br i1 %2014, label %2024, label %2015

2015:                                             ; preds = %2008, %2015
  %2016 = phi i64 [ %2021, %2015 ], [ %2009, %2008 ]
  %2017 = phi i64 [ %2022, %2015 ], [ 0, %2008 ]
  %2018 = getelementptr inbounds i16, ptr %379, i64 %2016
  %2019 = load i16, ptr %2018, align 2, !tbaa !45
  %2020 = getelementptr inbounds i16, ptr %1960, i64 %2016
  store i16 %2019, ptr %2020, align 2, !tbaa !45
  %2021 = add nuw nsw i64 %2016, 1
  %2022 = add i64 %2017, 1
  %2023 = icmp eq i64 %2022, %2013
  br i1 %2023, label %2024, label %2015, !llvm.loop !252

2024:                                             ; preds = %2015, %2008
  %2025 = phi i64 [ %2009, %2008 ], [ %2021, %2015 ]
  %2026 = icmp ult i64 %2012, 3
  br i1 %2026, label %2046, label %2027

2027:                                             ; preds = %2024, %2027
  %2028 = phi i64 [ %2044, %2027 ], [ %2025, %2024 ]
  %2029 = getelementptr inbounds i16, ptr %379, i64 %2028
  %2030 = load i16, ptr %2029, align 2, !tbaa !45
  %2031 = getelementptr inbounds i16, ptr %1960, i64 %2028
  store i16 %2030, ptr %2031, align 2, !tbaa !45
  %2032 = add nuw nsw i64 %2028, 1
  %2033 = getelementptr inbounds i16, ptr %379, i64 %2032
  %2034 = load i16, ptr %2033, align 2, !tbaa !45
  %2035 = getelementptr inbounds i16, ptr %1960, i64 %2032
  store i16 %2034, ptr %2035, align 2, !tbaa !45
  %2036 = add nuw nsw i64 %2028, 2
  %2037 = getelementptr inbounds i16, ptr %379, i64 %2036
  %2038 = load i16, ptr %2037, align 2, !tbaa !45
  %2039 = getelementptr inbounds i16, ptr %1960, i64 %2036
  store i16 %2038, ptr %2039, align 2, !tbaa !45
  %2040 = add nuw nsw i64 %2028, 3
  %2041 = getelementptr inbounds i16, ptr %379, i64 %2040
  %2042 = load i16, ptr %2041, align 2, !tbaa !45
  %2043 = getelementptr inbounds i16, ptr %1960, i64 %2040
  store i16 %2042, ptr %2043, align 2, !tbaa !45
  %2044 = add nuw nsw i64 %2028, 4
  %2045 = icmp eq i64 %2044, %1963
  br i1 %2045, label %2046, label %2027, !llvm.loop !253

2046:                                             ; preds = %2024, %2027, %1991, %2006
  %2047 = shl i64 %1955, 31
  %2048 = add i64 %2047, -4294967296
  %2049 = ashr i64 %2048, 32
  %2050 = getelementptr inbounds i16, ptr %1960, i64 %2049
  %2051 = load i16, ptr %2050, align 2, !tbaa !45
  br label %2052

2052:                                             ; preds = %1943, %2046
  %2053 = phi i64 [ %1956, %2046 ], [ 0, %1943 ]
  %2054 = phi i16 [ %2051, %2046 ], [ -1, %1943 ]
  %2055 = and i64 %2053, 4294967295
  %2056 = getelementptr inbounds i16, ptr %1960, i64 %2055
  store i16 %2054, ptr %2056, align 2, !tbaa !45
  %2057 = trunc i64 %1956 to i16
  %2058 = add i16 %2057, 1
  %2059 = sext i32 %1953 to i64
  %2060 = getelementptr inbounds i16, ptr %1302, i64 %2059
  store i16 %2058, ptr %2060, align 2, !tbaa !45
  %2061 = add nsw i32 %1957, 2
  %2062 = add nsw i32 %2061, %1953
  %2063 = select i1 %146, i32 0, i32 %2062
  store i32 %2063, ptr %17, align 8
  br label %2095

2064:                                             ; preds = %691
  %2065 = load ptr, ptr %12, align 8, !tbaa !47
  %2066 = load i32, ptr %17, align 8, !tbaa !19
  %2067 = add i32 %2066, 1
  %2068 = sext i32 %2067 to i64
  %2069 = getelementptr inbounds i16, ptr %2065, i64 %2068
  %2070 = sext i32 %2066 to i64
  %2071 = getelementptr inbounds i16, ptr %2065, i64 %2070
  %2072 = load i16, ptr %2071, align 2, !tbaa !45
  %2073 = zext i16 %2072 to i32
  %2074 = add i32 %2067, %2073
  %2075 = add nsw i32 %2073, -1
  %2076 = add i32 %2074, 1
  %2077 = sext i32 %2076 to i64
  %2078 = getelementptr inbounds i16, ptr %2065, i64 %2077
  %2079 = sext i32 %2074 to i64
  %2080 = getelementptr inbounds i16, ptr %2065, i64 %2079
  %2081 = load i16, ptr %2080, align 2, !tbaa !45
  %2082 = zext i16 %2081 to i32
  %2083 = add i32 %2076, %2082
  %2084 = add nsw i32 %2082, -1
  %2085 = add i32 %2083, 1
  %2086 = sext i32 %2085 to i64
  %2087 = getelementptr inbounds i16, ptr %2065, i64 %2086
  %2088 = sext i32 %2083 to i64
  %2089 = getelementptr inbounds i16, ptr %2065, i64 %2088
  %2090 = load i16, ptr %2089, align 2, !tbaa !45
  %2091 = zext i16 %2090 to i32
  %2092 = add i32 %2085, %2091
  store i32 %2092, ptr %17, align 8, !tbaa !19
  %2093 = add nsw i32 %2091, -1
  %2094 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2095

2095:                                             ; preds = %2052, %2064
  %2096 = phi i32 [ %2094, %2064 ], [ %1307, %2052 ]
  %2097 = phi i32 [ %2084, %2064 ], [ %1848, %2052 ]
  %2098 = phi ptr [ %2087, %2064 ], [ %1960, %2052 ]
  %2099 = phi i32 [ %2093, %2064 ], [ %1957, %2052 ]
  %2100 = phi ptr [ %2078, %2064 ], [ %1851, %2052 ]
  %2101 = phi i32 [ %2075, %2064 ], [ %1826, %2052 ]
  %2102 = phi ptr [ %2069, %2064 ], [ %1306, %2052 ]
  %2103 = phi i32 [ %674, %2064 ], [ %1264, %2052 ]
  %2104 = phi i32 [ %673, %2064 ], [ %1265, %2052 ]
  %2105 = phi i32 [ %672, %2064 ], [ %1266, %2052 ]
  %2106 = phi i32 [ %671, %2064 ], [ %1267, %2052 ]
  %2107 = phi ptr [ %669, %2064 ], [ %960, %2052 ]
  %2108 = phi ptr [ %668, %2064 ], [ %961, %2052 ]
  %2109 = phi ptr [ %667, %2064 ], [ %962, %2052 ]
  %2110 = icmp eq i32 %2096, 0
  %2111 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2112 = icmp ne i32 %2111, 0
  %2113 = select i1 %2110, i1 true, i1 %2112
  br i1 %2113, label %2118, label %2114

2114:                                             ; preds = %2095
  %2115 = load i8, ptr %698, align 2, !tbaa !52
  %2116 = icmp eq i8 %2115, 1
  %2117 = select i1 %2116, double 1.000000e+00, double -1.000000e+00
  br label %2118

2118:                                             ; preds = %2095, %2114
  %2119 = phi double [ %2117, %2114 ], [ 0.000000e+00, %2095 ]
  %2120 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %676, i32 1
  %2121 = load float, ptr %2120, align 8, !tbaa !81
  %2122 = fpext float %2121 to double
  %2123 = fmul double %2122, 0x4074C104816F0069
  %2124 = fmul double %32, %2123
  %2125 = fmul double %28, %2124
  %2126 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %676, i32 2
  %2127 = load i16, ptr %2126, align 4, !tbaa !82
  %2128 = sext i16 %2127 to i32
  %2129 = load ptr, ptr %650, align 8, !tbaa !83
  %2130 = load i32, ptr %651, align 8, !tbaa !85
  %2131 = shl nsw i32 %2128, 1
  %2132 = mul i32 %2131, %2130
  %2133 = zext i32 %2132 to i64
  %2134 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2129, i64 %2133
  %2135 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2136 = extractelement <2 x double> %694, i64 0
  %2137 = extractelement <2 x double> %694, i64 1
  %2138 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2135, double noundef %2136, double noundef %2137, double noundef %697, ptr noundef %45, ptr noundef nonnull %2102, i32 noundef %2101, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2139 = icmp sgt i32 %2138, 0
  br i1 %2139, label %2140, label %2309

2140:                                             ; preds = %2118
  %2141 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2142 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2143 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2144 = mul nsw i32 %2143, %700
  %2145 = mul i32 %2142, 3
  %2146 = mul nsw i32 %712, 3
  %2147 = sext i32 %2146 to i64
  %2148 = add nsw i32 %2146, 1
  %2149 = sext i32 %2148 to i64
  %2150 = add nsw i32 %2146, 2
  %2151 = sext i32 %2150 to i64
  %2152 = zext i32 %2138 to i64
  br label %2153

2153:                                             ; preds = %2140, %2153
  %2154 = phi i64 [ 0, %2140 ], [ %2307, %2153 ]
  %2155 = phi double [ 0.000000e+00, %2140 ], [ %2252, %2153 ]
  %2156 = phi <2 x double> [ zeroinitializer, %2140 ], [ %2248, %2153 ]
  %2157 = shl nuw nsw i64 %2154, 1
  %2158 = getelementptr inbounds i32, ptr %145, i64 %2157
  %2159 = load i32, ptr %2158, align 4, !tbaa !5
  %2160 = ashr i32 %2159, 14
  %2161 = add nsw i32 %2160, %38
  %2162 = getelementptr inbounds i16, ptr %98, i64 %2154
  %2163 = load i16, ptr %2162, align 2, !tbaa !45
  %2164 = zext i16 %2163 to i64
  %2165 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2164
  %2166 = getelementptr inbounds double, ptr %144, i64 %2154
  %2167 = load double, ptr %2166, align 8, !tbaa !15
  %2168 = sext i32 %2161 to i64
  %2169 = getelementptr inbounds double, ptr %2141, i64 %2168
  %2170 = load double, ptr %2169, align 8, !tbaa !15
  %2171 = fsub double %2167, %2170
  %2172 = shl nsw i32 %2161, 4
  %2173 = sext i32 %2172 to i64
  %2174 = getelementptr inbounds double, ptr %31, i64 %2173
  %2175 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2164, i32 2
  %2176 = load i16, ptr %2175, align 4, !tbaa !82
  %2177 = sext i16 %2176 to i32
  %2178 = shl nsw i32 %2177, 1
  %2179 = sext i32 %2178 to i64
  %2180 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2134, i64 %2179
  %2181 = getelementptr inbounds %class.Vector, ptr %629, i64 %2164
  %2182 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2164, i32 1
  %2183 = load float, ptr %2182, align 8, !tbaa !81
  %2184 = fpext float %2183 to double
  %2185 = fmul double %2125, %2184
  %2186 = getelementptr inbounds %class.Vector, ptr %2165, i64 0, i32 2
  %2187 = load double, ptr %2186, align 8, !tbaa !50
  %2188 = fsub double %697, %2187
  %2189 = load double, ptr %2180, align 8, !tbaa !86
  %2190 = fmul double %32, %2189
  %2191 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2134, i64 %2179, i32 1
  %2192 = load double, ptr %2191, align 8, !tbaa !88
  %2193 = load double, ptr %2174, align 8, !tbaa !15
  %2194 = getelementptr inbounds double, ptr %2174, i64 2
  %2195 = load double, ptr %2194, align 8, !tbaa !15
  %2196 = fmul double %2192, %652
  %2197 = fmul double %2196, %2195
  %2198 = tail call double @llvm.fmuladd.f64(double %2190, double %2193, double %2197)
  %2199 = getelementptr inbounds double, ptr %2174, i64 1
  %2200 = load double, ptr %2199, align 8, !tbaa !15
  %2201 = getelementptr inbounds double, ptr %2174, i64 3
  %2202 = load double, ptr %2201, align 8, !tbaa !15
  %2203 = fmul double %2196, %2202
  %2204 = tail call double @llvm.fmuladd.f64(double %2190, double %2200, double %2203)
  %2205 = getelementptr inbounds double, ptr %2174, i64 4
  %2206 = load double, ptr %2205, align 8, !tbaa !15
  %2207 = getelementptr inbounds double, ptr %2174, i64 6
  %2208 = load double, ptr %2207, align 8, !tbaa !15
  %2209 = fmul double %2196, %2208
  %2210 = tail call double @llvm.fmuladd.f64(double %2190, double %2206, double %2209)
  %2211 = tail call double @llvm.fmuladd.f64(double %2171, double %2198, double %2204)
  %2212 = tail call double @llvm.fmuladd.f64(double %2211, double %2171, double %2210)
  %2213 = fmul double %2119, %2212
  %2214 = load double, ptr %654, align 8, !tbaa !15
  %2215 = tail call double @llvm.fmuladd.f64(double %2213, double %2188, double %2214)
  %2216 = getelementptr inbounds double, ptr %2174, i64 8
  %2217 = getelementptr inbounds double, ptr %2174, i64 9
  %2218 = getelementptr inbounds double, ptr %2174, i64 10
  %2219 = load double, ptr %656, align 8, !tbaa !15
  %2220 = load <2 x double>, ptr %2165, align 8, !tbaa !15
  %2221 = fsub <2 x double> %694, %2220
  %2222 = load <2 x double>, ptr %653, align 8, !tbaa !15
  %2223 = insertelement <2 x double> poison, double %2213, i64 0
  %2224 = shufflevector <2 x double> %2223, <2 x double> poison, <2 x i32> zeroinitializer
  %2225 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2224, <2 x double> %2221, <2 x double> %2222)
  store <2 x double> %2225, ptr %653, align 8, !tbaa !15
  store double %2215, ptr %654, align 8, !tbaa !15
  %2226 = load double, ptr %2216, align 8, !tbaa !15
  %2227 = load double, ptr %2217, align 8, !tbaa !15
  %2228 = load double, ptr %2218, align 8, !tbaa !15
  %2229 = fmul double %2185, %2226
  %2230 = fmul double %2185, %2227
  %2231 = fmul double %2185, %2228
  %2232 = tail call double @llvm.fmuladd.f64(double %2171, double %2229, double %2230)
  %2233 = tail call double @llvm.fmuladd.f64(double %2232, double %2171, double %2231)
  %2234 = fmul double %2119, %2233
  %2235 = load <2 x double>, ptr %655, align 8, !tbaa !15
  %2236 = insertelement <2 x double> poison, double %2234, i64 0
  %2237 = shufflevector <2 x double> %2236, <2 x double> poison, <2 x i32> zeroinitializer
  %2238 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2237, <2 x double> %2221, <2 x double> %2235)
  store <2 x double> %2238, ptr %655, align 8, !tbaa !15
  %2239 = tail call double @llvm.fmuladd.f64(double %2234, double %2188, double %2219)
  store double %2239, ptr %656, align 8, !tbaa !15
  %2240 = fadd double %2198, %2229
  %2241 = fadd double %2204, %2230
  %2242 = fadd double %2210, %2231
  %2243 = tail call double @llvm.fmuladd.f64(double %2171, double %2240, double %2241)
  %2244 = tail call double @llvm.fmuladd.f64(double %2243, double %2171, double %2242)
  %2245 = insertelement <2 x double> poison, double %2244, i64 0
  %2246 = shufflevector <2 x double> %2245, <2 x double> poison, <2 x i32> zeroinitializer
  %2247 = fmul <2 x double> %2221, %2246
  %2248 = fadd <2 x double> %2156, %2247
  %2249 = load <2 x double>, ptr %2181, align 8, !tbaa !15
  %2250 = fsub <2 x double> %2249, %2247
  store <2 x double> %2250, ptr %2181, align 8, !tbaa !15
  %2251 = fmul double %2188, %2244
  %2252 = fadd double %2155, %2251
  %2253 = getelementptr inbounds %class.Vector, ptr %629, i64 %2164, i32 2
  %2254 = load double, ptr %2253, align 8, !tbaa !89
  %2255 = fsub double %2254, %2251
  store double %2255, ptr %2253, align 8, !tbaa !89
  %2256 = load double, ptr %2186, align 8, !tbaa !50
  %2257 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2258 = fsub double %2256, %2257
  %2259 = fmul double %10, %2258
  %2260 = tail call double @llvm.floor.f64(double %2259)
  %2261 = fptosi double %2260 to i32
  %2262 = icmp slt i32 %2261, 0
  %2263 = select i1 %2262, i32 %2142, i32 0
  %2264 = icmp sgt i32 %2142, %2261
  %2265 = select i1 %2264, i32 0, i32 %2142
  %2266 = sub i32 %2261, %2265
  %2267 = add i32 %2266, %2263
  %2268 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2164, i32 3
  %2269 = load i8, ptr %2268, align 2, !tbaa !52
  %2270 = zext i8 %2269 to i32
  %2271 = fmul <2 x double> %2221, %2247
  %2272 = extractelement <2 x double> %2271, i64 0
  %2273 = fmul <2 x double> %2221, %2247
  %2274 = extractelement <2 x double> %2273, i64 1
  %2275 = fmul double %2188, %2251
  %2276 = add nsw i32 %2144, %2270
  %2277 = mul i32 %2145, %2276
  %2278 = sext i32 %2277 to i64
  %2279 = getelementptr inbounds double, ptr %8, i64 %2278
  %2280 = fmul double %2272, 5.000000e-01
  %2281 = fmul double %2274, 5.000000e-01
  %2282 = fmul double %2275, 5.000000e-01
  %2283 = getelementptr inbounds double, ptr %2279, i64 %2147
  %2284 = load double, ptr %2283, align 8, !tbaa !15
  %2285 = fadd double %2280, %2284
  store double %2285, ptr %2283, align 8, !tbaa !15
  %2286 = getelementptr inbounds double, ptr %2279, i64 %2149
  %2287 = load double, ptr %2286, align 8, !tbaa !15
  %2288 = fadd double %2281, %2287
  store double %2288, ptr %2286, align 8, !tbaa !15
  %2289 = getelementptr inbounds double, ptr %2279, i64 %2151
  %2290 = load double, ptr %2289, align 8, !tbaa !15
  %2291 = fadd double %2282, %2290
  store double %2291, ptr %2289, align 8, !tbaa !15
  %2292 = mul nsw i32 %2267, 3
  %2293 = sext i32 %2292 to i64
  %2294 = getelementptr inbounds double, ptr %2279, i64 %2293
  %2295 = load double, ptr %2294, align 8, !tbaa !15
  %2296 = fadd double %2280, %2295
  store double %2296, ptr %2294, align 8, !tbaa !15
  %2297 = add nsw i32 %2292, 1
  %2298 = sext i32 %2297 to i64
  %2299 = getelementptr inbounds double, ptr %2279, i64 %2298
  %2300 = load double, ptr %2299, align 8, !tbaa !15
  %2301 = fadd double %2281, %2300
  store double %2301, ptr %2299, align 8, !tbaa !15
  %2302 = add nsw i32 %2292, 2
  %2303 = sext i32 %2302 to i64
  %2304 = getelementptr inbounds double, ptr %2279, i64 %2303
  %2305 = load double, ptr %2304, align 8, !tbaa !15
  %2306 = fadd double %2282, %2305
  store double %2306, ptr %2304, align 8, !tbaa !15
  %2307 = add nuw nsw i64 %2154, 1
  %2308 = icmp eq i64 %2307, %2152
  br i1 %2308, label %2309, label %2153

2309:                                             ; preds = %2153, %2118
  %2310 = phi double [ 0.000000e+00, %2118 ], [ %2252, %2153 ]
  %2311 = phi <2 x double> [ zeroinitializer, %2118 ], [ %2248, %2153 ]
  %2312 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2313 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2312, double noundef %2136, double noundef %2137, double noundef %697, ptr noundef %45, ptr noundef %2098, i32 noundef %2099, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2314 = add nsw i32 %2313, %665
  %2315 = icmp sgt i32 %2313, 0
  br i1 %2315, label %2316, label %2495

2316:                                             ; preds = %2309
  %2317 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2318 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2319 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2320 = mul nsw i32 %2319, %700
  %2321 = mul i32 %2318, 3
  %2322 = mul nsw i32 %712, 3
  %2323 = sext i32 %2322 to i64
  %2324 = add nsw i32 %2322, 1
  %2325 = sext i32 %2324 to i64
  %2326 = add nsw i32 %2322, 2
  %2327 = sext i32 %2326 to i64
  %2328 = zext i32 %2313 to i64
  br label %2329

2329:                                             ; preds = %2316, %2329
  %2330 = phi i64 [ 0, %2316 ], [ %2493, %2329 ]
  %2331 = phi double [ %2310, %2316 ], [ %2438, %2329 ]
  %2332 = phi <2 x double> [ %2311, %2316 ], [ %2434, %2329 ]
  %2333 = shl nuw nsw i64 %2330, 1
  %2334 = getelementptr inbounds i32, ptr %145, i64 %2333
  %2335 = load i32, ptr %2334, align 4, !tbaa !5
  %2336 = ashr i32 %2335, 14
  %2337 = add nsw i32 %2336, %38
  %2338 = getelementptr inbounds i16, ptr %98, i64 %2330
  %2339 = load i16, ptr %2338, align 2, !tbaa !45
  %2340 = zext i16 %2339 to i64
  %2341 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2340
  %2342 = getelementptr inbounds double, ptr %144, i64 %2330
  %2343 = load double, ptr %2342, align 8, !tbaa !15
  %2344 = sext i32 %2337 to i64
  %2345 = getelementptr inbounds double, ptr %2317, i64 %2344
  %2346 = load double, ptr %2345, align 8, !tbaa !15
  %2347 = fsub double %2343, %2346
  %2348 = shl nsw i32 %2337, 4
  %2349 = sext i32 %2348 to i64
  %2350 = getelementptr inbounds double, ptr %31, i64 %2349
  %2351 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2340, i32 2
  %2352 = load i16, ptr %2351, align 4, !tbaa !82
  %2353 = sext i16 %2352 to i32
  %2354 = shl nsw i32 %2353, 1
  %2355 = sext i32 %2354 to i64
  %2356 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2134, i64 %2355
  %2357 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2356, i64 1
  %2358 = getelementptr inbounds %class.Vector, ptr %629, i64 %2340
  %2359 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2340, i32 1
  %2360 = load float, ptr %2359, align 8, !tbaa !81
  %2361 = fpext float %2360 to double
  %2362 = fmul double %2125, %2361
  %2363 = getelementptr inbounds %class.Vector, ptr %2341, i64 0, i32 2
  %2364 = load double, ptr %2363, align 8, !tbaa !50
  %2365 = fsub double %697, %2364
  %2366 = load double, ptr %2357, align 8, !tbaa !86
  %2367 = fmul double %32, %2366
  %2368 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2356, i64 1, i32 1
  %2369 = load double, ptr %2368, align 8, !tbaa !88
  %2370 = load double, ptr %2350, align 8, !tbaa !15
  %2371 = getelementptr inbounds double, ptr %2350, i64 2
  %2372 = load double, ptr %2371, align 8, !tbaa !15
  %2373 = fmul double %2369, %652
  %2374 = fmul double %2373, %2372
  %2375 = tail call double @llvm.fmuladd.f64(double %2367, double %2370, double %2374)
  %2376 = getelementptr inbounds double, ptr %2350, i64 1
  %2377 = load double, ptr %2376, align 8, !tbaa !15
  %2378 = getelementptr inbounds double, ptr %2350, i64 3
  %2379 = load double, ptr %2378, align 8, !tbaa !15
  %2380 = fmul double %2373, %2379
  %2381 = tail call double @llvm.fmuladd.f64(double %2367, double %2377, double %2380)
  %2382 = getelementptr inbounds double, ptr %2350, i64 4
  %2383 = load double, ptr %2382, align 8, !tbaa !15
  %2384 = getelementptr inbounds double, ptr %2350, i64 6
  %2385 = load double, ptr %2384, align 8, !tbaa !15
  %2386 = fmul double %2373, %2385
  %2387 = tail call double @llvm.fmuladd.f64(double %2367, double %2383, double %2386)
  %2388 = tail call double @llvm.fmuladd.f64(double %2347, double %2375, double %2381)
  %2389 = tail call double @llvm.fmuladd.f64(double %2388, double %2347, double %2387)
  %2390 = fmul double %2119, %2389
  %2391 = load double, ptr %654, align 8, !tbaa !15
  %2392 = tail call double @llvm.fmuladd.f64(double %2390, double %2365, double %2391)
  %2393 = getelementptr inbounds double, ptr %2350, i64 8
  %2394 = getelementptr inbounds double, ptr %2350, i64 9
  %2395 = getelementptr inbounds double, ptr %2350, i64 10
  %2396 = getelementptr inbounds double, ptr %2350, i64 12
  %2397 = getelementptr inbounds double, ptr %2350, i64 13
  %2398 = getelementptr inbounds double, ptr %2350, i64 14
  %2399 = load double, ptr %656, align 8, !tbaa !15
  %2400 = load <2 x double>, ptr %2341, align 8, !tbaa !15
  %2401 = fsub <2 x double> %694, %2400
  %2402 = load <2 x double>, ptr %653, align 8, !tbaa !15
  %2403 = insertelement <2 x double> poison, double %2390, i64 0
  %2404 = shufflevector <2 x double> %2403, <2 x double> poison, <2 x i32> zeroinitializer
  %2405 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2404, <2 x double> %2401, <2 x double> %2402)
  store <2 x double> %2405, ptr %653, align 8, !tbaa !15
  store double %2392, ptr %654, align 8, !tbaa !15
  %2406 = load double, ptr %2393, align 8, !tbaa !15
  %2407 = load double, ptr %2394, align 8, !tbaa !15
  %2408 = load double, ptr %2395, align 8, !tbaa !15
  %2409 = load double, ptr %2396, align 8, !tbaa !15
  %2410 = tail call double @llvm.fmuladd.f64(double %657, double %2409, double %2406)
  %2411 = load double, ptr %2397, align 8, !tbaa !15
  %2412 = tail call double @llvm.fmuladd.f64(double %657, double %2411, double %2407)
  %2413 = load double, ptr %2398, align 8, !tbaa !15
  %2414 = tail call double @llvm.fmuladd.f64(double %657, double %2413, double %2408)
  %2415 = fmul double %2362, %2410
  %2416 = fmul double %2362, %2412
  %2417 = fmul double %2362, %2414
  %2418 = tail call double @llvm.fmuladd.f64(double %2347, double %2415, double %2416)
  %2419 = tail call double @llvm.fmuladd.f64(double %2418, double %2347, double %2417)
  %2420 = fmul double %2119, %2419
  %2421 = load <2 x double>, ptr %655, align 8, !tbaa !15
  %2422 = insertelement <2 x double> poison, double %2420, i64 0
  %2423 = shufflevector <2 x double> %2422, <2 x double> poison, <2 x i32> zeroinitializer
  %2424 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2423, <2 x double> %2401, <2 x double> %2421)
  store <2 x double> %2424, ptr %655, align 8, !tbaa !15
  %2425 = tail call double @llvm.fmuladd.f64(double %2420, double %2365, double %2399)
  store double %2425, ptr %656, align 8, !tbaa !15
  %2426 = fadd double %2375, %2415
  %2427 = fadd double %2381, %2416
  %2428 = fadd double %2387, %2417
  %2429 = tail call double @llvm.fmuladd.f64(double %2347, double %2426, double %2427)
  %2430 = tail call double @llvm.fmuladd.f64(double %2429, double %2347, double %2428)
  %2431 = insertelement <2 x double> poison, double %2430, i64 0
  %2432 = shufflevector <2 x double> %2431, <2 x double> poison, <2 x i32> zeroinitializer
  %2433 = fmul <2 x double> %2401, %2432
  %2434 = fadd <2 x double> %2332, %2433
  %2435 = load <2 x double>, ptr %2358, align 8, !tbaa !15
  %2436 = fsub <2 x double> %2435, %2433
  store <2 x double> %2436, ptr %2358, align 8, !tbaa !15
  %2437 = fmul double %2365, %2430
  %2438 = fadd double %2331, %2437
  %2439 = getelementptr inbounds %class.Vector, ptr %629, i64 %2340, i32 2
  %2440 = load double, ptr %2439, align 8, !tbaa !89
  %2441 = fsub double %2440, %2437
  store double %2441, ptr %2439, align 8, !tbaa !89
  %2442 = load double, ptr %2363, align 8, !tbaa !50
  %2443 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2444 = fsub double %2442, %2443
  %2445 = fmul double %10, %2444
  %2446 = tail call double @llvm.floor.f64(double %2445)
  %2447 = fptosi double %2446 to i32
  %2448 = icmp slt i32 %2447, 0
  %2449 = select i1 %2448, i32 %2318, i32 0
  %2450 = icmp sgt i32 %2318, %2447
  %2451 = select i1 %2450, i32 0, i32 %2318
  %2452 = sub i32 %2447, %2451
  %2453 = add i32 %2452, %2449
  %2454 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2340, i32 3
  %2455 = load i8, ptr %2454, align 2, !tbaa !52
  %2456 = zext i8 %2455 to i32
  %2457 = fmul <2 x double> %2401, %2433
  %2458 = extractelement <2 x double> %2457, i64 0
  %2459 = fmul <2 x double> %2401, %2433
  %2460 = extractelement <2 x double> %2459, i64 1
  %2461 = fmul double %2365, %2437
  %2462 = add nsw i32 %2320, %2456
  %2463 = mul i32 %2321, %2462
  %2464 = sext i32 %2463 to i64
  %2465 = getelementptr inbounds double, ptr %8, i64 %2464
  %2466 = fmul double %2458, 5.000000e-01
  %2467 = fmul double %2460, 5.000000e-01
  %2468 = fmul double %2461, 5.000000e-01
  %2469 = getelementptr inbounds double, ptr %2465, i64 %2323
  %2470 = load double, ptr %2469, align 8, !tbaa !15
  %2471 = fadd double %2466, %2470
  store double %2471, ptr %2469, align 8, !tbaa !15
  %2472 = getelementptr inbounds double, ptr %2465, i64 %2325
  %2473 = load double, ptr %2472, align 8, !tbaa !15
  %2474 = fadd double %2467, %2473
  store double %2474, ptr %2472, align 8, !tbaa !15
  %2475 = getelementptr inbounds double, ptr %2465, i64 %2327
  %2476 = load double, ptr %2475, align 8, !tbaa !15
  %2477 = fadd double %2468, %2476
  store double %2477, ptr %2475, align 8, !tbaa !15
  %2478 = mul nsw i32 %2453, 3
  %2479 = sext i32 %2478 to i64
  %2480 = getelementptr inbounds double, ptr %2465, i64 %2479
  %2481 = load double, ptr %2480, align 8, !tbaa !15
  %2482 = fadd double %2466, %2481
  store double %2482, ptr %2480, align 8, !tbaa !15
  %2483 = add nsw i32 %2478, 1
  %2484 = sext i32 %2483 to i64
  %2485 = getelementptr inbounds double, ptr %2465, i64 %2484
  %2486 = load double, ptr %2485, align 8, !tbaa !15
  %2487 = fadd double %2467, %2486
  store double %2487, ptr %2485, align 8, !tbaa !15
  %2488 = add nsw i32 %2478, 2
  %2489 = sext i32 %2488 to i64
  %2490 = getelementptr inbounds double, ptr %2465, i64 %2489
  %2491 = load double, ptr %2490, align 8, !tbaa !15
  %2492 = fadd double %2468, %2491
  store double %2492, ptr %2490, align 8, !tbaa !15
  %2493 = add nuw nsw i64 %2330, 1
  %2494 = icmp eq i64 %2493, %2328
  br i1 %2494, label %2495, label %2329

2495:                                             ; preds = %2329, %2309
  %2496 = phi double [ %2310, %2309 ], [ %2438, %2329 ]
  %2497 = phi <2 x double> [ %2311, %2309 ], [ %2434, %2329 ]
  %2498 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2499 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2498, double noundef %2136, double noundef %2137, double noundef %697, ptr noundef %45, ptr noundef %2100, i32 noundef %2097, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2500 = add nsw i32 %2314, %2499
  %2501 = icmp sgt i32 %2499, 0
  br i1 %2501, label %2502, label %2638

2502:                                             ; preds = %2495
  %2503 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2504 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2505 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2506 = mul nsw i32 %2505, %700
  %2507 = mul i32 %2504, 3
  %2508 = mul nsw i32 %712, 3
  %2509 = sext i32 %2508 to i64
  %2510 = add nsw i32 %2508, 1
  %2511 = sext i32 %2510 to i64
  %2512 = add nsw i32 %2508, 2
  %2513 = sext i32 %2512 to i64
  %2514 = zext i32 %2499 to i64
  br label %2515

2515:                                             ; preds = %2502, %2515
  %2516 = phi i64 [ 0, %2502 ], [ %2636, %2515 ]
  %2517 = phi double [ %2496, %2502 ], [ %2581, %2515 ]
  %2518 = phi <2 x double> [ %2497, %2502 ], [ %2577, %2515 ]
  %2519 = shl nuw nsw i64 %2516, 1
  %2520 = getelementptr inbounds i32, ptr %145, i64 %2519
  %2521 = load i32, ptr %2520, align 4, !tbaa !5
  %2522 = ashr i32 %2521, 14
  %2523 = add nsw i32 %2522, %38
  %2524 = getelementptr inbounds i16, ptr %98, i64 %2516
  %2525 = load i16, ptr %2524, align 2, !tbaa !45
  %2526 = zext i16 %2525 to i64
  %2527 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2526
  %2528 = getelementptr inbounds double, ptr %144, i64 %2516
  %2529 = load double, ptr %2528, align 8, !tbaa !15
  %2530 = sext i32 %2523 to i64
  %2531 = getelementptr inbounds double, ptr %2503, i64 %2530
  %2532 = load double, ptr %2531, align 8, !tbaa !15
  %2533 = fsub double %2529, %2532
  %2534 = shl nsw i32 %2523, 4
  %2535 = sext i32 %2534 to i64
  %2536 = getelementptr inbounds double, ptr %31, i64 %2535
  %2537 = getelementptr inbounds %class.Vector, ptr %629, i64 %2526
  %2538 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2526, i32 1
  %2539 = load float, ptr %2538, align 8, !tbaa !81
  %2540 = fpext float %2539 to double
  %2541 = fmul double %2125, %2540
  %2542 = getelementptr inbounds %class.Vector, ptr %2527, i64 0, i32 2
  %2543 = load double, ptr %2542, align 8, !tbaa !50
  %2544 = fsub double %697, %2543
  %2545 = getelementptr inbounds double, ptr %2536, i64 8
  %2546 = load double, ptr %2545, align 8, !tbaa !15
  %2547 = getelementptr inbounds double, ptr %2536, i64 9
  %2548 = load double, ptr %2547, align 8, !tbaa !15
  %2549 = getelementptr inbounds double, ptr %2536, i64 10
  %2550 = load double, ptr %2549, align 8, !tbaa !15
  %2551 = getelementptr inbounds double, ptr %2536, i64 12
  %2552 = load double, ptr %2551, align 8, !tbaa !15
  %2553 = fsub double %2546, %2552
  %2554 = getelementptr inbounds double, ptr %2536, i64 13
  %2555 = load double, ptr %2554, align 8, !tbaa !15
  %2556 = fsub double %2548, %2555
  %2557 = getelementptr inbounds double, ptr %2536, i64 14
  %2558 = load double, ptr %2557, align 8, !tbaa !15
  %2559 = fsub double %2550, %2558
  %2560 = fmul double %2541, %2553
  %2561 = fmul double %2541, %2556
  %2562 = fmul double %2541, %2559
  %2563 = tail call double @llvm.fmuladd.f64(double %2533, double %2560, double %2561)
  %2564 = tail call double @llvm.fmuladd.f64(double %2563, double %2533, double %2562)
  %2565 = fmul double %2119, %2564
  %2566 = load double, ptr %656, align 8, !tbaa !15
  %2567 = tail call double @llvm.fmuladd.f64(double %2565, double %2544, double %2566)
  %2568 = load <2 x double>, ptr %2527, align 8, !tbaa !15
  %2569 = fsub <2 x double> %694, %2568
  %2570 = load <2 x double>, ptr %655, align 8, !tbaa !15
  %2571 = insertelement <2 x double> poison, double %2565, i64 0
  %2572 = shufflevector <2 x double> %2571, <2 x double> poison, <2 x i32> zeroinitializer
  %2573 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2572, <2 x double> %2569, <2 x double> %2570)
  store <2 x double> %2573, ptr %655, align 8, !tbaa !15
  store double %2567, ptr %656, align 8, !tbaa !15
  %2574 = insertelement <2 x double> poison, double %2564, i64 0
  %2575 = shufflevector <2 x double> %2574, <2 x double> poison, <2 x i32> zeroinitializer
  %2576 = fmul <2 x double> %2569, %2575
  %2577 = fadd <2 x double> %2518, %2576
  %2578 = load <2 x double>, ptr %2537, align 8, !tbaa !15
  %2579 = fsub <2 x double> %2578, %2576
  store <2 x double> %2579, ptr %2537, align 8, !tbaa !15
  %2580 = fmul double %2544, %2564
  %2581 = fadd double %2517, %2580
  %2582 = getelementptr inbounds %class.Vector, ptr %629, i64 %2526, i32 2
  %2583 = load double, ptr %2582, align 8, !tbaa !89
  %2584 = fsub double %2583, %2580
  store double %2584, ptr %2582, align 8, !tbaa !89
  %2585 = load double, ptr %2542, align 8, !tbaa !50
  %2586 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2587 = fsub double %2585, %2586
  %2588 = fmul double %10, %2587
  %2589 = tail call double @llvm.floor.f64(double %2588)
  %2590 = fptosi double %2589 to i32
  %2591 = icmp slt i32 %2590, 0
  %2592 = select i1 %2591, i32 %2504, i32 0
  %2593 = icmp sgt i32 %2504, %2590
  %2594 = select i1 %2593, i32 0, i32 %2504
  %2595 = sub i32 %2590, %2594
  %2596 = add i32 %2595, %2592
  %2597 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2526, i32 3
  %2598 = load i8, ptr %2597, align 2, !tbaa !52
  %2599 = zext i8 %2598 to i32
  %2600 = fmul <2 x double> %2569, %2576
  %2601 = extractelement <2 x double> %2600, i64 0
  %2602 = fmul <2 x double> %2569, %2576
  %2603 = extractelement <2 x double> %2602, i64 1
  %2604 = fmul double %2544, %2580
  %2605 = add nsw i32 %2506, %2599
  %2606 = mul i32 %2507, %2605
  %2607 = sext i32 %2606 to i64
  %2608 = getelementptr inbounds double, ptr %8, i64 %2607
  %2609 = fmul double %2601, 5.000000e-01
  %2610 = fmul double %2603, 5.000000e-01
  %2611 = fmul double %2604, 5.000000e-01
  %2612 = getelementptr inbounds double, ptr %2608, i64 %2509
  %2613 = load double, ptr %2612, align 8, !tbaa !15
  %2614 = fadd double %2609, %2613
  store double %2614, ptr %2612, align 8, !tbaa !15
  %2615 = getelementptr inbounds double, ptr %2608, i64 %2511
  %2616 = load double, ptr %2615, align 8, !tbaa !15
  %2617 = fadd double %2610, %2616
  store double %2617, ptr %2615, align 8, !tbaa !15
  %2618 = getelementptr inbounds double, ptr %2608, i64 %2513
  %2619 = load double, ptr %2618, align 8, !tbaa !15
  %2620 = fadd double %2611, %2619
  store double %2620, ptr %2618, align 8, !tbaa !15
  %2621 = mul nsw i32 %2596, 3
  %2622 = sext i32 %2621 to i64
  %2623 = getelementptr inbounds double, ptr %2608, i64 %2622
  %2624 = load double, ptr %2623, align 8, !tbaa !15
  %2625 = fadd double %2609, %2624
  store double %2625, ptr %2623, align 8, !tbaa !15
  %2626 = add nsw i32 %2621, 1
  %2627 = sext i32 %2626 to i64
  %2628 = getelementptr inbounds double, ptr %2608, i64 %2627
  %2629 = load double, ptr %2628, align 8, !tbaa !15
  %2630 = fadd double %2610, %2629
  store double %2630, ptr %2628, align 8, !tbaa !15
  %2631 = add nsw i32 %2621, 2
  %2632 = sext i32 %2631 to i64
  %2633 = getelementptr inbounds double, ptr %2608, i64 %2632
  %2634 = load double, ptr %2633, align 8, !tbaa !15
  %2635 = fadd double %2611, %2634
  store double %2635, ptr %2633, align 8, !tbaa !15
  %2636 = add nuw nsw i64 %2516, 1
  %2637 = icmp eq i64 %2636, %2514
  br i1 %2637, label %2638, label %2515

2638:                                             ; preds = %2515, %2495
  %2639 = phi double [ %2496, %2495 ], [ %2581, %2515 ]
  %2640 = phi <2 x double> [ %2497, %2495 ], [ %2577, %2515 ]
  %2641 = getelementptr inbounds %class.Vector, ptr %629, i64 %676
  %2642 = load <2 x double>, ptr %2641, align 8, !tbaa !15
  %2643 = fadd <2 x double> %2640, %2642
  store <2 x double> %2643, ptr %2641, align 8, !tbaa !15
  %2644 = getelementptr inbounds %class.Vector, ptr %629, i64 %676, i32 2
  %2645 = load double, ptr %2644, align 8, !tbaa !89
  %2646 = fadd double %2639, %2645
  store double %2646, ptr %2644, align 8, !tbaa !89
  br label %2647

2647:                                             ; preds = %2638, %1314, %1368, %687
  %2648 = phi i32 [ %688, %687 ], [ %692, %2638 ], [ %692, %1314 ], [ %692, %1368 ]
  %2649 = phi i32 [ %674, %687 ], [ %2103, %2638 ], [ %1264, %1314 ], [ %1264, %1368 ]
  %2650 = phi i32 [ %673, %687 ], [ %2104, %2638 ], [ %1265, %1314 ], [ %1265, %1368 ]
  %2651 = phi i32 [ %672, %687 ], [ %2105, %2638 ], [ %1266, %1314 ], [ %1266, %1368 ]
  %2652 = phi i32 [ %671, %687 ], [ %2106, %2638 ], [ %1267, %1314 ], [ %1267, %1368 ]
  %2653 = phi i32 [ %670, %687 ], [ %714, %2638 ], [ %714, %1314 ], [ %714, %1368 ]
  %2654 = phi ptr [ %669, %687 ], [ %2107, %2638 ], [ %960, %1314 ], [ %960, %1368 ]
  %2655 = phi ptr [ %668, %687 ], [ %2108, %2638 ], [ %961, %1314 ], [ %961, %1368 ]
  %2656 = phi ptr [ %667, %687 ], [ %2109, %2638 ], [ %962, %1314 ], [ %962, %1368 ]
  %2657 = phi i32 [ %690, %687 ], [ %666, %2638 ], [ %666, %1314 ], [ %666, %1368 ]
  %2658 = phi i32 [ %665, %687 ], [ %2500, %2638 ], [ %665, %1314 ], [ %665, %1368 ]
  %2659 = add nsw i32 %2657, 1
  %2660 = icmp slt i32 %2659, %635
  br i1 %2660, label %664, label %2661

2661:                                             ; preds = %2647, %623
  %2662 = phi ptr [ null, %623 ], [ %2656, %2647 ]
  %2663 = phi i32 [ 0, %623 ], [ %2658, %2647 ]
  %2664 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2665 = load ptr, ptr %2664, align 8, !tbaa !24
  %2666 = icmp sgt i32 %40, 0
  br i1 %2666, label %2667, label %2669

2667:                                             ; preds = %2661
  %2668 = zext i32 %40 to i64
  br label %2692

2669:                                             ; preds = %2692, %2661
  %2670 = phi <4 x double> [ zeroinitializer, %2661 ], [ %2722, %2692 ]
  %2671 = phi <2 x double> [ zeroinitializer, %2661 ], [ %2717, %2692 ]
  %2672 = sitofp i32 %2663 to double
  %2673 = getelementptr inbounds double, ptr %6, i64 22
  %2674 = load double, ptr %2673, align 8, !tbaa !15
  %2675 = fadd double %2674, %2672
  store double %2675, ptr %2673, align 8, !tbaa !15
  %2676 = getelementptr inbounds double, ptr %6, i64 12
  %2677 = load <4 x double>, ptr %2676, align 8, !tbaa !15
  %2678 = shufflevector <2 x double> %2671, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2679 = shufflevector <4 x double> %2678, <4 x double> %2670, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2680 = shufflevector <4 x double> %2679, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2681 = fadd <4 x double> %2680, %2677
  store <4 x double> %2681, ptr %2676, align 8, !tbaa !15
  %2682 = getelementptr inbounds double, ptr %6, i64 16
  %2683 = load <4 x double>, ptr %2682, align 8, !tbaa !15
  %2684 = shufflevector <4 x double> %2670, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2685 = shufflevector <4 x double> %2684, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2686 = fadd <4 x double> %2685, %2683
  store <4 x double> %2686, ptr %2682, align 8, !tbaa !15
  %2687 = getelementptr inbounds double, ptr %6, i64 20
  %2688 = load double, ptr %2687, align 8, !tbaa !15
  %2689 = extractelement <4 x double> %2670, i64 0
  %2690 = fadd double %2689, %2688
  store double %2690, ptr %2687, align 8, !tbaa !15
  %2691 = icmp eq ptr %2662, null
  br i1 %2691, label %2726, label %2725

2692:                                             ; preds = %2667, %2692
  %2693 = phi i64 [ 0, %2667 ], [ %2723, %2692 ]
  %2694 = phi <4 x double> [ zeroinitializer, %2667 ], [ %2722, %2692 ]
  %2695 = phi <2 x double> [ zeroinitializer, %2667 ], [ %2717, %2692 ]
  %2696 = getelementptr inbounds %class.Vector, ptr %629, i64 %2693
  %2697 = getelementptr inbounds %class.Vector, ptr %2665, i64 %2693
  %2698 = getelementptr inbounds %class.Vector, ptr %629, i64 %2693, i32 1
  %2699 = load <2 x double>, ptr %2696, align 8, !tbaa !15
  %2700 = load <2 x double>, ptr %2697, align 8, !tbaa !15
  %2701 = fadd <2 x double> %2699, %2700
  store <2 x double> %2701, ptr %2697, align 8, !tbaa !15
  %2702 = getelementptr inbounds %class.Vector, ptr %629, i64 %2693, i32 2
  %2703 = load double, ptr %2702, align 8, !tbaa !89
  %2704 = getelementptr inbounds %class.Vector, ptr %2665, i64 %2693, i32 2
  %2705 = load double, ptr %2704, align 8, !tbaa !89
  %2706 = fadd double %2703, %2705
  store double %2706, ptr %2704, align 8, !tbaa !89
  %2707 = load double, ptr %2696, align 8, !tbaa !193
  %2708 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %2693
  %2709 = load double, ptr %2708, align 8, !tbaa !69
  %2710 = getelementptr inbounds %class.Vector, ptr %2708, i64 0, i32 1
  %2711 = load <2 x double>, ptr %2710, align 8, !tbaa !15
  %2712 = shufflevector <2 x double> %2711, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2713 = insertelement <2 x double> poison, double %2707, i64 0
  %2714 = shufflevector <2 x double> %2713, <2 x double> poison, <2 x i32> zeroinitializer
  %2715 = shufflevector <2 x double> %2711, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2716 = insertelement <2 x double> %2715, double %2709, i64 0
  %2717 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2714, <2 x double> %2716, <2 x double> %2695)
  %2718 = load <2 x double>, ptr %2698, align 8, !tbaa !15
  %2719 = shufflevector <2 x double> %2718, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2720 = insertelement <4 x double> %2719, double %2707, i64 3
  %2721 = shufflevector <4 x double> %2720, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2722 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2721, <4 x double> %2712, <4 x double> %2694)
  %2723 = add nuw nsw i64 %2693, 1
  %2724 = icmp eq i64 %2723, %2668
  br i1 %2724, label %2669, label %2692

2725:                                             ; preds = %2669
  tail call void @_ZdaPv(ptr noundef nonnull %2662) #10
  br label %2726

2726:                                             ; preds = %2669, %2725, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil38calc_self_energy_merge_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2808

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil7ljTableE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil13table_noshortE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %613, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %604

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %604

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %604, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %604

604:                                              ; preds = %472, %535, %597, %594
  %605 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %606 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %607 = load i32, ptr %17, align 8, !tbaa !19
  %608 = add nsw i32 %607, 1
  store i32 %608, ptr %17, align 8, !tbaa !19
  %609 = trunc i32 %40 to i16
  %610 = load ptr, ptr %12, align 8, !tbaa !47
  %611 = sext i32 %607 to i64
  %612 = getelementptr inbounds i16, ptr %610, i64 %611
  store i16 %609, ptr %612, align 2, !tbaa !45
  br label %623

613:                                              ; preds = %469
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  %616 = add nsw i32 %615, 1
  store i32 %616, ptr %17, align 8, !tbaa !19
  %617 = sext i32 %615 to i64
  %618 = getelementptr inbounds i16, ptr %614, i64 %617
  %619 = load i16, ptr %618, align 2, !tbaa !45
  %620 = zext i16 %619 to i32
  %621 = icmp eq i32 %40, %620
  br i1 %621, label %623, label %622

622:                                              ; preds = %613
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %623

623:                                              ; preds = %613, %622, %604
  %624 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %605, %604 ]
  %625 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %606, %604 ]
  %626 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 18, i32 1
  %627 = load ptr, ptr %626, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %627, i32 noundef %40)
  %628 = load ptr, ptr %626, align 8, !tbaa !174
  %629 = load ptr, ptr %628, align 8, !tbaa !176
  %630 = sext i32 %40 to i64
  %631 = mul nsw i64 %630, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %629, i8 0, i64 %631, i1 false)
  %632 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %633 = load i32, ptr %632, align 4, !tbaa !49
  %634 = add nsw i32 %633, -1
  %635 = add nsw i32 %40, -1
  %636 = icmp sgt i32 %40, 1
  br i1 %636, label %637, label %2739

637:                                              ; preds = %623
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  %640 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 1
  %641 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 4
  %642 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 2
  %643 = getelementptr inbounds %class.Molecule, ptr %30, i64 0, i32 3
  %644 = ptrtoint ptr %425 to i64
  %645 = add nsw i32 %42, 10
  %646 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %647 = ptrtoint ptr %471 to i64
  %648 = ptrtoint ptr %333 to i64
  %649 = ptrtoint ptr %379 to i64
  %650 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 1
  %651 = getelementptr inbounds %class.LJTable, ptr %29, i64 0, i32 2
  %652 = fneg double %32
  %653 = getelementptr inbounds double, ptr %6, i64 26
  %654 = getelementptr inbounds double, ptr %6, i64 28
  %655 = getelementptr inbounds double, ptr %6, i64 29
  %656 = getelementptr inbounds double, ptr %6, i64 31
  %657 = fneg double %34
  %658 = sext i32 %624 to i64
  %659 = sext i32 %625 to i64
  %660 = insertelement <2 x double> poison, double %27, i64 0
  %661 = shufflevector <2 x double> %660, <2 x double> poison, <2 x i32> zeroinitializer
  %662 = getelementptr inbounds i16, ptr %471, i64 1
  %663 = getelementptr inbounds i16, ptr %471, i64 1
  br label %664

664:                                              ; preds = %637, %2724
  %665 = phi i32 [ 0, %637 ], [ %2735, %2724 ]
  %666 = phi i32 [ 0, %637 ], [ %2737, %2724 ]
  %667 = phi ptr [ null, %637 ], [ %2733, %2724 ]
  %668 = phi ptr [ null, %637 ], [ %2732, %2724 ]
  %669 = phi ptr [ null, %637 ], [ %2731, %2724 ]
  %670 = phi i32 [ 0, %637 ], [ %2730, %2724 ]
  %671 = phi i32 [ 0, %637 ], [ %2729, %2724 ]
  %672 = phi i32 [ 0, %637 ], [ %2728, %2724 ]
  %673 = phi i32 [ 0, %637 ], [ %2727, %2724 ]
  %674 = phi i32 [ 0, %637 ], [ %2726, %2724 ]
  %675 = phi i32 [ %639, %637 ], [ %2725, %2724 ]
  %676 = phi <2 x double> [ zeroinitializer, %637 ], [ %2736, %2724 ]
  %677 = sext i32 %666 to i64
  %678 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %677
  %679 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %677
  %680 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %677, i32 4
  %681 = load i8, ptr %680, align 1
  %682 = lshr i8 %681, 3
  %683 = and i8 %682, 15
  %684 = zext i8 %683 to i32
  %685 = icmp eq i8 %683, 0
  br i1 %685, label %692, label %686

686:                                              ; preds = %664
  %687 = icmp eq i32 %675, 0
  br i1 %687, label %692, label %688

688:                                              ; preds = %686
  %689 = add nsw i32 %675, -1
  %690 = add nsw i32 %666, -1
  %691 = add i32 %690, %684
  br label %2724

692:                                              ; preds = %686, %664
  %693 = phi i32 [ %675, %664 ], [ %634, %686 ]
  %694 = load <2 x double>, ptr %678, align 8, !tbaa !15
  %695 = fadd <2 x double> %19, %694
  %696 = getelementptr inbounds %class.Vector, ptr %678, i64 0, i32 2
  %697 = load double, ptr %696, align 8, !tbaa !50
  %698 = fadd double %21, %697
  %699 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %677, i32 3
  %700 = load i8, ptr %699, align 2, !tbaa !52
  %701 = zext i8 %700 to i32
  %702 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %703 = fsub double %697, %702
  %704 = fmul double %10, %703
  %705 = tail call double @llvm.floor.f64(double %704)
  %706 = fptosi double %705 to i32
  %707 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %708 = icmp slt i32 %706, 0
  %709 = select i1 %708, i32 %707, i32 0
  %710 = icmp sgt i32 %707, %706
  %711 = select i1 %710, i32 0, i32 %707
  %712 = sub i32 %706, %711
  %713 = add i32 %712, %709
  %714 = add nsw i32 %666, %684
  %715 = select i1 %685, i32 %670, i32 %714
  br i1 %148, label %2065, label %716

716:                                              ; preds = %692
  %717 = load i32, ptr %679, align 4
  %718 = shl i32 %717, 2
  %719 = ashr exact i32 %718, 2
  %720 = load ptr, ptr %640, align 8, !tbaa !53
  %721 = sext i32 %719 to i64
  %722 = getelementptr inbounds %class.ExclusionCheck, ptr %720, i64 %721
  %723 = load i32, ptr %722, align 8, !tbaa !55
  %724 = getelementptr inbounds %class.ExclusionCheck, ptr %720, i64 %721, i32 1
  %725 = load i32, ptr %724, align 4, !tbaa !57
  %726 = getelementptr inbounds %class.ExclusionCheck, ptr %720, i64 %721, i32 2
  %727 = load ptr, ptr %726, align 8, !tbaa !58
  %728 = icmp eq ptr %727, null
  br i1 %728, label %733, label %729

729:                                              ; preds = %716
  %730 = sext i32 %723 to i64
  %731 = sub nsw i64 0, %730
  %732 = getelementptr inbounds i8, ptr %727, i64 %731
  br label %959

733:                                              ; preds = %716
  %734 = icmp eq ptr %667, null
  br i1 %734, label %822, label %735

735:                                              ; preds = %733
  %736 = load i32, ptr %668, align 4, !tbaa !5
  %737 = icmp slt i32 %736, 1
  br i1 %737, label %785, label %738

738:                                              ; preds = %735
  %739 = add nuw i32 %736, 1
  %740 = zext i32 %739 to i64
  %741 = add nsw i64 %740, -1
  %742 = add nsw i64 %740, -2
  %743 = and i64 %741, 3
  %744 = icmp ult i64 %742, 3
  br i1 %744, label %772, label %745

745:                                              ; preds = %738
  %746 = and i64 %741, -4
  br label %747

747:                                              ; preds = %747, %745
  %748 = phi i64 [ 1, %745 ], [ %769, %747 ]
  %749 = phi i64 [ 0, %745 ], [ %770, %747 ]
  %750 = getelementptr inbounds i32, ptr %668, i64 %748
  %751 = load i32, ptr %750, align 4, !tbaa !5
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds i8, ptr %667, i64 %752
  store i8 0, ptr %753, align 1, !tbaa !59
  %754 = add nuw nsw i64 %748, 1
  %755 = getelementptr inbounds i32, ptr %668, i64 %754
  %756 = load i32, ptr %755, align 4, !tbaa !5
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds i8, ptr %667, i64 %757
  store i8 0, ptr %758, align 1, !tbaa !59
  %759 = add nuw nsw i64 %748, 2
  %760 = getelementptr inbounds i32, ptr %668, i64 %759
  %761 = load i32, ptr %760, align 4, !tbaa !5
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8, ptr %667, i64 %762
  store i8 0, ptr %763, align 1, !tbaa !59
  %764 = add nuw nsw i64 %748, 3
  %765 = getelementptr inbounds i32, ptr %668, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !5
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds i8, ptr %667, i64 %767
  store i8 0, ptr %768, align 1, !tbaa !59
  %769 = add nuw nsw i64 %748, 4
  %770 = add i64 %749, 4
  %771 = icmp eq i64 %770, %746
  br i1 %771, label %772, label %747

772:                                              ; preds = %747, %738
  %773 = phi i64 [ 1, %738 ], [ %769, %747 ]
  %774 = icmp eq i64 %743, 0
  br i1 %774, label %785, label %775

775:                                              ; preds = %772, %775
  %776 = phi i64 [ %782, %775 ], [ %773, %772 ]
  %777 = phi i64 [ %783, %775 ], [ 0, %772 ]
  %778 = getelementptr inbounds i32, ptr %668, i64 %776
  %779 = load i32, ptr %778, align 4, !tbaa !5
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds i8, ptr %667, i64 %780
  store i8 0, ptr %781, align 1, !tbaa !59
  %782 = add nuw nsw i64 %776, 1
  %783 = add i64 %777, 1
  %784 = icmp eq i64 %783, %743
  br i1 %784, label %785, label %775, !llvm.loop !254

785:                                              ; preds = %772, %775, %735
  %786 = load i32, ptr %669, align 4, !tbaa !5
  %787 = icmp slt i32 %786, 1
  br i1 %787, label %842, label %788

788:                                              ; preds = %785
  %789 = add nuw i32 %786, 1
  %790 = zext i32 %789 to i64
  %791 = add nsw i64 %790, -1
  %792 = add nsw i64 %790, -2
  %793 = and i64 %791, 3
  %794 = icmp ult i64 %792, 3
  br i1 %794, label %829, label %795

795:                                              ; preds = %788
  %796 = and i64 %791, -4
  br label %797

797:                                              ; preds = %797, %795
  %798 = phi i64 [ 1, %795 ], [ %819, %797 ]
  %799 = phi i64 [ 0, %795 ], [ %820, %797 ]
  %800 = getelementptr inbounds i32, ptr %669, i64 %798
  %801 = load i32, ptr %800, align 4, !tbaa !5
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, ptr %667, i64 %802
  store i8 0, ptr %803, align 1, !tbaa !59
  %804 = add nuw nsw i64 %798, 1
  %805 = getelementptr inbounds i32, ptr %669, i64 %804
  %806 = load i32, ptr %805, align 4, !tbaa !5
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i8, ptr %667, i64 %807
  store i8 0, ptr %808, align 1, !tbaa !59
  %809 = add nuw nsw i64 %798, 2
  %810 = getelementptr inbounds i32, ptr %669, i64 %809
  %811 = load i32, ptr %810, align 4, !tbaa !5
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i8, ptr %667, i64 %812
  store i8 0, ptr %813, align 1, !tbaa !59
  %814 = add nuw nsw i64 %798, 3
  %815 = getelementptr inbounds i32, ptr %669, i64 %814
  %816 = load i32, ptr %815, align 4, !tbaa !5
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i8, ptr %667, i64 %817
  store i8 0, ptr %818, align 1, !tbaa !59
  %819 = add nuw nsw i64 %798, 4
  %820 = add i64 %799, 4
  %821 = icmp eq i64 %820, %796
  br i1 %821, label %829, label %797

822:                                              ; preds = %733
  %823 = load i32, ptr %641, align 8, !tbaa !62
  %824 = tail call i32 @llvm.smax.i32(i32 %823, i32 -1)
  %825 = sext i32 %824 to i64
  %826 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %825) #9
  %827 = load i32, ptr %641, align 8, !tbaa !62
  %828 = sext i32 %827 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %826, i8 0, i64 %828, i1 false)
  br label %842

829:                                              ; preds = %797, %788
  %830 = phi i64 [ 1, %788 ], [ %819, %797 ]
  %831 = icmp eq i64 %793, 0
  br i1 %831, label %842, label %832

832:                                              ; preds = %829, %832
  %833 = phi i64 [ %839, %832 ], [ %830, %829 ]
  %834 = phi i64 [ %840, %832 ], [ 0, %829 ]
  %835 = getelementptr inbounds i32, ptr %669, i64 %833
  %836 = load i32, ptr %835, align 4, !tbaa !5
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds i8, ptr %667, i64 %837
  store i8 0, ptr %838, align 1, !tbaa !59
  %839 = add nuw nsw i64 %833, 1
  %840 = add i64 %834, 1
  %841 = icmp eq i64 %840, %793
  br i1 %841, label %842, label %832, !llvm.loop !255

842:                                              ; preds = %829, %832, %785, %822
  %843 = phi ptr [ %826, %822 ], [ %667, %785 ], [ %667, %832 ], [ %667, %829 ]
  %844 = load i32, ptr %679, align 4
  %845 = shl i32 %844, 2
  %846 = ashr exact i32 %845, 2
  %847 = load ptr, ptr %642, align 8, !tbaa !64
  %848 = sext i32 %846 to i64
  %849 = getelementptr inbounds ptr, ptr %847, i64 %848
  %850 = load ptr, ptr %849, align 8, !tbaa !24
  %851 = load i32, ptr %850, align 4, !tbaa !5
  %852 = icmp slt i32 %851, 1
  br i1 %852, label %905, label %853

853:                                              ; preds = %842
  %854 = add nuw i32 %851, 1
  %855 = zext i32 %854 to i64
  %856 = add nsw i64 %855, -1
  %857 = add nsw i64 %855, -2
  %858 = and i64 %856, 3
  %859 = icmp ult i64 %857, 3
  br i1 %859, label %887, label %860

860:                                              ; preds = %853
  %861 = and i64 %856, -4
  br label %862

862:                                              ; preds = %862, %860
  %863 = phi i64 [ 1, %860 ], [ %884, %862 ]
  %864 = phi i64 [ 0, %860 ], [ %885, %862 ]
  %865 = getelementptr inbounds i32, ptr %850, i64 %863
  %866 = load i32, ptr %865, align 4, !tbaa !5
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i8, ptr %843, i64 %867
  store i8 1, ptr %868, align 1, !tbaa !59
  %869 = add nuw nsw i64 %863, 1
  %870 = getelementptr inbounds i32, ptr %850, i64 %869
  %871 = load i32, ptr %870, align 4, !tbaa !5
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, ptr %843, i64 %872
  store i8 1, ptr %873, align 1, !tbaa !59
  %874 = add nuw nsw i64 %863, 2
  %875 = getelementptr inbounds i32, ptr %850, i64 %874
  %876 = load i32, ptr %875, align 4, !tbaa !5
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i8, ptr %843, i64 %877
  store i8 1, ptr %878, align 1, !tbaa !59
  %879 = add nuw nsw i64 %863, 3
  %880 = getelementptr inbounds i32, ptr %850, i64 %879
  %881 = load i32, ptr %880, align 4, !tbaa !5
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, ptr %843, i64 %882
  store i8 1, ptr %883, align 1, !tbaa !59
  %884 = add nuw nsw i64 %863, 4
  %885 = add i64 %864, 4
  %886 = icmp eq i64 %885, %861
  br i1 %886, label %887, label %862

887:                                              ; preds = %862, %853
  %888 = phi i64 [ 1, %853 ], [ %884, %862 ]
  %889 = icmp eq i64 %858, 0
  br i1 %889, label %900, label %890

890:                                              ; preds = %887, %890
  %891 = phi i64 [ %897, %890 ], [ %888, %887 ]
  %892 = phi i64 [ %898, %890 ], [ 0, %887 ]
  %893 = getelementptr inbounds i32, ptr %850, i64 %891
  %894 = load i32, ptr %893, align 4, !tbaa !5
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds i8, ptr %843, i64 %895
  store i8 1, ptr %896, align 1, !tbaa !59
  %897 = add nuw nsw i64 %891, 1
  %898 = add i64 %892, 1
  %899 = icmp eq i64 %898, %858
  br i1 %899, label %900, label %890, !llvm.loop !256

900:                                              ; preds = %890, %887
  %901 = load i32, ptr %679, align 4
  %902 = shl i32 %901, 2
  %903 = ashr exact i32 %902, 2
  %904 = sext i32 %903 to i64
  br label %905

905:                                              ; preds = %900, %842
  %906 = phi i64 [ %904, %900 ], [ %848, %842 ]
  %907 = load ptr, ptr %643, align 8, !tbaa !66
  %908 = getelementptr inbounds ptr, ptr %907, i64 %906
  %909 = load ptr, ptr %908, align 8, !tbaa !24
  %910 = load i32, ptr %909, align 4, !tbaa !5
  %911 = icmp slt i32 %910, 1
  br i1 %911, label %959, label %912

912:                                              ; preds = %905
  %913 = add nuw i32 %910, 1
  %914 = zext i32 %913 to i64
  %915 = add nsw i64 %914, -1
  %916 = add nsw i64 %914, -2
  %917 = and i64 %915, 3
  %918 = icmp ult i64 %916, 3
  br i1 %918, label %946, label %919

919:                                              ; preds = %912
  %920 = and i64 %915, -4
  br label %921

921:                                              ; preds = %921, %919
  %922 = phi i64 [ 1, %919 ], [ %943, %921 ]
  %923 = phi i64 [ 0, %919 ], [ %944, %921 ]
  %924 = getelementptr inbounds i32, ptr %909, i64 %922
  %925 = load i32, ptr %924, align 4, !tbaa !5
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds i8, ptr %843, i64 %926
  store i8 2, ptr %927, align 1, !tbaa !59
  %928 = add nuw nsw i64 %922, 1
  %929 = getelementptr inbounds i32, ptr %909, i64 %928
  %930 = load i32, ptr %929, align 4, !tbaa !5
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i8, ptr %843, i64 %931
  store i8 2, ptr %932, align 1, !tbaa !59
  %933 = add nuw nsw i64 %922, 2
  %934 = getelementptr inbounds i32, ptr %909, i64 %933
  %935 = load i32, ptr %934, align 4, !tbaa !5
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i8, ptr %843, i64 %936
  store i8 2, ptr %937, align 1, !tbaa !59
  %938 = add nuw nsw i64 %922, 3
  %939 = getelementptr inbounds i32, ptr %909, i64 %938
  %940 = load i32, ptr %939, align 4, !tbaa !5
  %941 = sext i32 %940 to i64
  %942 = getelementptr inbounds i8, ptr %843, i64 %941
  store i8 2, ptr %942, align 1, !tbaa !59
  %943 = add nuw nsw i64 %922, 4
  %944 = add i64 %923, 4
  %945 = icmp eq i64 %944, %920
  br i1 %945, label %946, label %921

946:                                              ; preds = %921, %912
  %947 = phi i64 [ 1, %912 ], [ %943, %921 ]
  %948 = icmp eq i64 %917, 0
  br i1 %948, label %959, label %949

949:                                              ; preds = %946, %949
  %950 = phi i64 [ %956, %949 ], [ %947, %946 ]
  %951 = phi i64 [ %957, %949 ], [ 0, %946 ]
  %952 = getelementptr inbounds i32, ptr %909, i64 %950
  %953 = load i32, ptr %952, align 4, !tbaa !5
  %954 = sext i32 %953 to i64
  %955 = getelementptr inbounds i8, ptr %843, i64 %954
  store i8 2, ptr %955, align 1, !tbaa !59
  %956 = add nuw nsw i64 %950, 1
  %957 = add i64 %951, 1
  %958 = icmp eq i64 %957, %917
  br i1 %958, label %959, label %949, !llvm.loop !257

959:                                              ; preds = %946, %949, %905, %729
  %960 = phi ptr [ %732, %729 ], [ %843, %905 ], [ %843, %949 ], [ %843, %946 ]
  %961 = phi ptr [ %669, %729 ], [ %909, %905 ], [ %909, %949 ], [ %909, %946 ]
  %962 = phi ptr [ %668, %729 ], [ %850, %905 ], [ %850, %949 ], [ %850, %946 ]
  %963 = phi ptr [ %667, %729 ], [ %843, %905 ], [ %843, %949 ], [ %843, %946 ]
  %964 = load i8, ptr %680, align 1
  %965 = and i8 %964, 7
  %966 = icmp eq i8 %965, 0
  br i1 %966, label %1260, label %967

967:                                              ; preds = %959
  %968 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %973, label %970

970:                                              ; preds = %967
  %971 = load i32, ptr %679, align 4
  %972 = icmp slt i32 %971, 0
  br label %973

973:                                              ; preds = %970, %967
  %974 = phi i1 [ false, %967 ], [ %972, %970 ]
  %975 = and i8 %964, 120
  %976 = icmp eq i8 %975, 0
  br i1 %976, label %1008, label %977

977:                                              ; preds = %973
  %978 = icmp slt i32 %671, %624
  br i1 %978, label %979, label %992

979:                                              ; preds = %977
  %980 = sext i32 %671 to i64
  br label %981

981:                                              ; preds = %979, %987
  %982 = phi i64 [ %980, %979 ], [ %988, %987 ]
  %983 = getelementptr inbounds i16, ptr %195, i64 %982
  %984 = load i16, ptr %983, align 2, !tbaa !45
  %985 = zext i16 %984 to i32
  %986 = icmp sgt i32 %715, %985
  br i1 %986, label %987, label %990

987:                                              ; preds = %981
  %988 = add nsw i64 %982, 1
  %989 = icmp eq i64 %988, %658
  br i1 %989, label %992, label %981

990:                                              ; preds = %981
  %991 = trunc i64 %982 to i32
  br label %992

992:                                              ; preds = %987, %990, %977
  %993 = phi i32 [ %671, %977 ], [ %991, %990 ], [ %624, %987 ]
  %994 = icmp slt i32 %672, %625
  br i1 %994, label %995, label %1008

995:                                              ; preds = %992
  %996 = sext i32 %672 to i64
  br label %997

997:                                              ; preds = %995, %1003
  %998 = phi i64 [ %996, %995 ], [ %1004, %1003 ]
  %999 = getelementptr inbounds i16, ptr %241, i64 %998
  %1000 = load i16, ptr %999, align 2, !tbaa !45
  %1001 = zext i16 %1000 to i32
  %1002 = icmp sgt i32 %715, %1001
  br i1 %1002, label %1003, label %1006

1003:                                             ; preds = %997
  %1004 = add nsw i64 %998, 1
  %1005 = icmp eq i64 %1004, %659
  br i1 %1005, label %1008, label %997

1006:                                             ; preds = %997
  %1007 = trunc i64 %998 to i32
  br label %1008

1008:                                             ; preds = %1003, %1006, %992, %973
  %1009 = phi i32 [ %672, %973 ], [ %672, %992 ], [ %1007, %1006 ], [ %625, %1003 ]
  %1010 = phi i32 [ %671, %973 ], [ %993, %992 ], [ %993, %1006 ], [ %993, %1003 ]
  %1011 = add nsw i32 %666, 1
  %1012 = icmp slt i32 %1011, %715
  br i1 %1012, label %1013, label %1078

1013:                                             ; preds = %1008
  %1014 = xor i32 %666, -1
  %1015 = add i32 %715, %1014
  %1016 = zext i32 %1015 to i64
  %1017 = icmp ult i32 %1015, 8
  br i1 %1017, label %1067, label %1018

1018:                                             ; preds = %1013
  %1019 = icmp ult i32 %1015, 64
  br i1 %1019, label %1048, label %1020

1020:                                             ; preds = %1018
  %1021 = and i64 %1016, 4294967232
  %1022 = trunc i32 %1011 to i16
  %1023 = insertelement <16 x i16> poison, i16 %1022, i64 0
  %1024 = shufflevector <16 x i16> %1023, <16 x i16> poison, <16 x i32> zeroinitializer
  %1025 = add <16 x i16> %1024, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1026 = trunc i64 %1021 to i32
  %1027 = add i32 %1011, %1026
  br label %1028

1028:                                             ; preds = %1028, %1020
  %1029 = phi i64 [ 0, %1020 ], [ %1038, %1028 ]
  %1030 = phi <16 x i16> [ %1025, %1020 ], [ %1039, %1028 ]
  %1031 = add <16 x i16> %1030, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1032 = add <16 x i16> %1030, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1033 = add <16 x i16> %1030, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1034 = getelementptr inbounds i16, ptr %425, i64 %1029
  store <16 x i16> %1030, ptr %1034, align 2, !tbaa !45
  %1035 = getelementptr inbounds i16, ptr %1034, i64 16
  store <16 x i16> %1031, ptr %1035, align 2, !tbaa !45
  %1036 = getelementptr inbounds i16, ptr %1034, i64 32
  store <16 x i16> %1032, ptr %1036, align 2, !tbaa !45
  %1037 = getelementptr inbounds i16, ptr %1034, i64 48
  store <16 x i16> %1033, ptr %1037, align 2, !tbaa !45
  %1038 = add nuw i64 %1029, 64
  %1039 = add <16 x i16> %1030, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1040 = icmp eq i64 %1038, %1021
  br i1 %1040, label %1041, label %1028, !llvm.loop !258

1041:                                             ; preds = %1028
  %1042 = icmp eq i64 %1021, %1016
  br i1 %1042, label %1078, label %1043

1043:                                             ; preds = %1041
  %1044 = trunc i64 %1021 to i32
  %1045 = add i32 %1011, %1044
  %1046 = and i64 %1016, 56
  %1047 = icmp eq i64 %1046, 0
  br i1 %1047, label %1067, label %1048

1048:                                             ; preds = %1018, %1043
  %1049 = phi i32 [ %1027, %1043 ], [ %1011, %1018 ]
  %1050 = phi i64 [ %1021, %1043 ], [ 0, %1018 ]
  %1051 = and i64 %1016, 4294967288
  %1052 = trunc i64 %1051 to i32
  %1053 = add i32 %1011, %1052
  %1054 = trunc i32 %1049 to i16
  %1055 = insertelement <8 x i16> poison, i16 %1054, i64 0
  %1056 = shufflevector <8 x i16> %1055, <8 x i16> poison, <8 x i32> zeroinitializer
  %1057 = add <8 x i16> %1056, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1058

1058:                                             ; preds = %1058, %1048
  %1059 = phi i64 [ %1050, %1048 ], [ %1062, %1058 ]
  %1060 = phi <8 x i16> [ %1057, %1048 ], [ %1063, %1058 ]
  %1061 = getelementptr inbounds i16, ptr %425, i64 %1059
  store <8 x i16> %1060, ptr %1061, align 2, !tbaa !45
  %1062 = add nuw i64 %1059, 8
  %1063 = add <8 x i16> %1060, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1064 = icmp eq i64 %1062, %1051
  br i1 %1064, label %1065, label %1058, !llvm.loop !259

1065:                                             ; preds = %1058
  %1066 = icmp eq i64 %1051, %1016
  br i1 %1066, label %1078, label %1067

1067:                                             ; preds = %1013, %1043, %1065
  %1068 = phi i64 [ 0, %1013 ], [ %1021, %1043 ], [ %1051, %1065 ]
  %1069 = phi i32 [ %1011, %1013 ], [ %1045, %1043 ], [ %1053, %1065 ]
  br label %1070

1070:                                             ; preds = %1067, %1070
  %1071 = phi i64 [ %1074, %1070 ], [ %1068, %1067 ]
  %1072 = phi i32 [ %1076, %1070 ], [ %1069, %1067 ]
  %1073 = trunc i32 %1072 to i16
  %1074 = add nuw nsw i64 %1071, 1
  %1075 = getelementptr inbounds i16, ptr %425, i64 %1071
  store i16 %1073, ptr %1075, align 2, !tbaa !45
  %1076 = add nsw i32 %1072, 1
  %1077 = icmp eq i64 %1074, %1016
  br i1 %1077, label %1078, label %1070, !llvm.loop !260

1078:                                             ; preds = %1070, %1041, %1065, %1008
  %1079 = phi i32 [ 0, %1008 ], [ %1015, %1065 ], [ %1015, %1041 ], [ %1015, %1070 ]
  %1080 = zext i32 %1079 to i64
  %1081 = getelementptr inbounds i16, ptr %425, i64 %1080
  %1082 = select i1 %974, ptr %241, ptr %195
  %1083 = select i1 %974, i32 %1009, i32 %1010
  %1084 = select i1 %974, i32 %625, i32 %624
  %1085 = icmp slt i32 %1083, %1084
  br i1 %1085, label %1086, label %1245

1086:                                             ; preds = %1078
  %1087 = sub nsw i32 %1084, %1083
  %1088 = icmp sgt i32 %1087, 6
  br i1 %1088, label %1089, label %1182

1089:                                             ; preds = %1086
  %1090 = add nsw i32 %1084, -2
  %1091 = add nsw i32 %1083, 2
  %1092 = icmp slt i32 %1091, %1090
  br i1 %1092, label %1093, label %1182

1093:                                             ; preds = %1089
  %1094 = add nsw i32 %1083, 1
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds i16, ptr %1082, i64 %1095
  %1097 = load i16, ptr %1096, align 2, !tbaa !45
  %1098 = zext i16 %1097 to i64
  %1099 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1098
  %1100 = getelementptr inbounds %class.Vector, ptr %1099, i64 0, i32 2
  %1101 = load double, ptr %1100, align 8, !tbaa !50
  %1102 = sext i32 %1083 to i64
  %1103 = getelementptr inbounds i16, ptr %1082, i64 %1102
  %1104 = load i16, ptr %1103, align 2, !tbaa !45
  %1105 = zext i16 %1104 to i64
  %1106 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1105
  %1107 = getelementptr inbounds %class.Vector, ptr %1106, i64 0, i32 2
  %1108 = load double, ptr %1107, align 8, !tbaa !50
  %1109 = getelementptr inbounds %class.Vector, ptr %1099, i64 0, i32 1
  %1110 = load double, ptr %1109, align 8, !tbaa !68
  %1111 = getelementptr inbounds %class.Vector, ptr %1106, i64 0, i32 1
  %1112 = load double, ptr %1111, align 8, !tbaa !68
  %1113 = load double, ptr %1099, align 8, !tbaa !69
  %1114 = load double, ptr %1106, align 8, !tbaa !69
  %1115 = sext i32 %1091 to i64
  %1116 = sext i32 %1090 to i64
  %1117 = insertelement <2 x double> poison, double %1101, i64 0
  %1118 = insertelement <2 x double> %1117, double %1108, i64 1
  %1119 = insertelement <2 x double> poison, double %1110, i64 0
  %1120 = insertelement <2 x double> %1119, double %1112, i64 1
  %1121 = insertelement <2 x double> poison, double %1113, i64 0
  %1122 = insertelement <2 x double> %1121, double %1114, i64 1
  %1123 = insertelement <2 x double> poison, double %698, i64 0
  %1124 = shufflevector <2 x double> %1123, <2 x double> poison, <2 x i32> zeroinitializer
  %1125 = shufflevector <2 x double> %695, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1126 = shufflevector <2 x double> %695, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1127

1127:                                             ; preds = %1093, %1127
  %1128 = phi i64 [ %1115, %1093 ], [ %1173, %1127 ]
  %1129 = phi i32 [ %1083, %1093 ], [ %1175, %1127 ]
  %1130 = phi i32 [ 0, %1093 ], [ %1172, %1127 ]
  %1131 = phi i16 [ %1104, %1093 ], [ %1138, %1127 ]
  %1132 = phi i16 [ %1097, %1093 ], [ %1142, %1127 ]
  %1133 = phi <2 x double> [ %1118, %1093 ], [ %1177, %1127 ]
  %1134 = phi <2 x double> [ %1120, %1093 ], [ %1179, %1127 ]
  %1135 = phi <2 x double> [ %1122, %1093 ], [ %1181, %1127 ]
  %1136 = fsub <2 x double> %1124, %1133
  %1137 = getelementptr inbounds i16, ptr %1082, i64 %1128
  %1138 = load i16, ptr %1137, align 2, !tbaa !45
  %1139 = add nsw i32 %1129, 3
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds i16, ptr %1082, i64 %1140
  %1142 = load i16, ptr %1141, align 2, !tbaa !45
  %1143 = zext i16 %1138 to i64
  %1144 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1143
  %1145 = load double, ptr %1144, align 8, !tbaa !69
  %1146 = zext i16 %1142 to i64
  %1147 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1146
  %1148 = load double, ptr %1147, align 8, !tbaa !69
  %1149 = getelementptr inbounds %class.Vector, ptr %1144, i64 0, i32 1
  %1150 = load double, ptr %1149, align 8, !tbaa !68
  %1151 = getelementptr inbounds %class.Vector, ptr %1147, i64 0, i32 1
  %1152 = load double, ptr %1151, align 8, !tbaa !68
  %1153 = getelementptr inbounds %class.Vector, ptr %1144, i64 0, i32 2
  %1154 = load double, ptr %1153, align 8, !tbaa !50
  %1155 = getelementptr inbounds %class.Vector, ptr %1147, i64 0, i32 2
  %1156 = load double, ptr %1155, align 8, !tbaa !50
  %1157 = fsub <2 x double> %1126, %1135
  %1158 = fmul <2 x double> %1157, %1157
  %1159 = fsub <2 x double> %1125, %1134
  %1160 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1159, <2 x double> %1159, <2 x double> %1158)
  %1161 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1136, <2 x double> %1136, <2 x double> %1160)
  %1162 = fcmp olt <2 x double> %1161, %661
  %1163 = zext i32 %1130 to i64
  %1164 = getelementptr inbounds i16, ptr %287, i64 %1163
  store i16 %1131, ptr %1164, align 2, !tbaa !45
  %1165 = extractelement <2 x i1> %1162, i64 1
  %1166 = zext i1 %1165 to i32
  %1167 = add nuw nsw i32 %1130, %1166
  %1168 = zext i32 %1167 to i64
  %1169 = getelementptr inbounds i16, ptr %287, i64 %1168
  store i16 %1132, ptr %1169, align 2, !tbaa !45
  %1170 = extractelement <2 x i1> %1162, i64 0
  %1171 = zext i1 %1170 to i32
  %1172 = add i32 %1167, %1171
  %1173 = add nsw i64 %1128, 2
  %1174 = icmp slt i64 %1173, %1116
  %1175 = trunc i64 %1128 to i32
  %1176 = insertelement <2 x double> poison, double %1156, i64 0
  %1177 = insertelement <2 x double> %1176, double %1154, i64 1
  %1178 = insertelement <2 x double> poison, double %1152, i64 0
  %1179 = insertelement <2 x double> %1178, double %1150, i64 1
  %1180 = insertelement <2 x double> poison, double %1148, i64 0
  %1181 = insertelement <2 x double> %1180, double %1145, i64 1
  br i1 %1174, label %1127, label %1182

1182:                                             ; preds = %1127, %1089, %1086
  %1183 = phi i32 [ 0, %1086 ], [ 0, %1089 ], [ %1172, %1127 ]
  %1184 = phi i32 [ %1083, %1086 ], [ %1083, %1089 ], [ %1175, %1127 ]
  %1185 = icmp slt i32 %1184, %1084
  br i1 %1185, label %1186, label %1191

1186:                                             ; preds = %1182
  %1187 = sext i32 %1184 to i64
  %1188 = sext i32 %1084 to i64
  %1189 = extractelement <2 x double> %695, i64 0
  %1190 = extractelement <2 x double> %695, i64 1
  br label %1196

1191:                                             ; preds = %1219, %1182
  %1192 = phi i32 [ %1183, %1182 ], [ %1220, %1219 ]
  %1193 = icmp sgt i32 %1192, 0
  br i1 %1193, label %1194, label %1245

1194:                                             ; preds = %1191
  %1195 = zext i32 %1192 to i64
  br label %1223

1196:                                             ; preds = %1186, %1219
  %1197 = phi i64 [ %1187, %1186 ], [ %1221, %1219 ]
  %1198 = phi i32 [ %1183, %1186 ], [ %1220, %1219 ]
  %1199 = getelementptr inbounds i16, ptr %1082, i64 %1197
  %1200 = load i16, ptr %1199, align 2, !tbaa !45
  %1201 = zext i16 %1200 to i64
  %1202 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1201
  %1203 = load double, ptr %1202, align 8, !tbaa !69
  %1204 = getelementptr inbounds %class.Vector, ptr %1202, i64 0, i32 1
  %1205 = load double, ptr %1204, align 8, !tbaa !68
  %1206 = getelementptr inbounds %class.Vector, ptr %1202, i64 0, i32 2
  %1207 = load double, ptr %1206, align 8, !tbaa !50
  %1208 = fsub double %1189, %1203
  %1209 = fmul double %1208, %1208
  %1210 = fsub double %1190, %1205
  %1211 = tail call double @llvm.fmuladd.f64(double %1210, double %1210, double %1209)
  %1212 = fsub double %698, %1207
  %1213 = tail call double @llvm.fmuladd.f64(double %1212, double %1212, double %1211)
  %1214 = fcmp ugt double %1213, %27
  br i1 %1214, label %1219, label %1215

1215:                                             ; preds = %1196
  %1216 = add nsw i32 %1198, 1
  %1217 = sext i32 %1198 to i64
  %1218 = getelementptr inbounds i16, ptr %287, i64 %1217
  store i16 %1200, ptr %1218, align 2, !tbaa !45
  br label %1219

1219:                                             ; preds = %1215, %1196
  %1220 = phi i32 [ %1216, %1215 ], [ %1198, %1196 ]
  %1221 = add nsw i64 %1197, 1
  %1222 = icmp eq i64 %1221, %1188
  br i1 %1222, label %1191, label %1196

1223:                                             ; preds = %1194, %1240
  %1224 = phi i64 [ 0, %1194 ], [ %1243, %1240 ]
  %1225 = phi ptr [ %1081, %1194 ], [ %1242, %1240 ]
  %1226 = getelementptr inbounds i16, ptr %287, i64 %1224
  %1227 = load i16, ptr %1226, align 2, !tbaa !45
  %1228 = zext i16 %1227 to i64
  %1229 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1228, i32 4
  %1230 = load i8, ptr %1229, align 1
  %1231 = and i8 %1230, 7
  store i16 %1227, ptr %1225, align 2, !tbaa !45
  %1232 = getelementptr inbounds i16, ptr %1225, i64 1
  %1233 = insertelement <2 x i16> poison, i16 %1227, i64 0
  %1234 = shufflevector <2 x i16> %1233, <2 x i16> poison, <2 x i32> zeroinitializer
  %1235 = add <2 x i16> %1234, <i16 1, i16 2>
  store <2 x i16> %1235, ptr %1232, align 2, !tbaa !45
  %1236 = icmp ult i8 %1231, 4
  br i1 %1236, label %1240, label %1237

1237:                                             ; preds = %1223
  %1238 = add <2 x i16> %1234, <i16 3, i16 4>
  %1239 = getelementptr inbounds i16, ptr %1225, i64 3
  store <2 x i16> %1238, ptr %1239, align 2, !tbaa !45
  br label %1240

1240:                                             ; preds = %1237, %1223
  %1241 = zext i8 %1231 to i64
  %1242 = getelementptr inbounds i16, ptr %1225, i64 %1241
  %1243 = add nuw nsw i64 %1224, 1
  %1244 = icmp eq i64 %1243, %1195
  br i1 %1244, label %1245, label %1223

1245:                                             ; preds = %1240, %1191, %1078
  %1246 = phi ptr [ %1081, %1078 ], [ %1081, %1191 ], [ %1242, %1240 ]
  %1247 = ptrtoint ptr %1246 to i64
  %1248 = sub i64 %1247, %644
  %1249 = lshr exact i64 %1248, 1
  %1250 = trunc i64 %1249 to i32
  %1251 = icmp eq i32 %1250, 0
  br i1 %1251, label %1263, label %1252

1252:                                             ; preds = %1245
  %1253 = shl i64 %1248, 31
  %1254 = add i64 %1253, -4294967296
  %1255 = ashr i64 %1254, 32
  %1256 = getelementptr inbounds i16, ptr %425, i64 %1255
  %1257 = load i16, ptr %1256, align 2, !tbaa !45
  %1258 = ashr i64 %1253, 32
  %1259 = getelementptr inbounds i16, ptr %425, i64 %1258
  store i16 %1257, ptr %1259, align 2, !tbaa !45
  br label %1263

1260:                                             ; preds = %959
  %1261 = add nsw i32 %674, 1
  %1262 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1263

1263:                                             ; preds = %1245, %1252, %1260
  %1264 = phi i32 [ %1262, %1260 ], [ %968, %1252 ], [ %968, %1245 ]
  %1265 = phi i32 [ %1261, %1260 ], [ 0, %1252 ], [ 0, %1245 ]
  %1266 = phi i32 [ %673, %1260 ], [ %1250, %1252 ], [ 0, %1245 ]
  %1267 = phi i32 [ %672, %1260 ], [ %1009, %1252 ], [ %1009, %1245 ]
  %1268 = phi i32 [ %671, %1260 ], [ %1010, %1252 ], [ %1010, %1245 ]
  %1269 = icmp eq i32 %1264, 0
  br i1 %1269, label %1274, label %1270

1270:                                             ; preds = %1263
  %1271 = load i32, ptr %679, align 4
  %1272 = and i32 %1271, 1073741824
  %1273 = icmp ne i32 %1272, 0
  br label %1274

1274:                                             ; preds = %1270, %1263
  %1275 = phi i1 [ false, %1263 ], [ %1273, %1270 ]
  %1276 = load i32, ptr %17, align 8, !tbaa !19
  %1277 = add nsw i32 %645, %1276
  %1278 = load i32, ptr %646, align 4, !tbaa !70
  %1279 = icmp sgt i32 %1278, %1277
  br i1 %1279, label %1295, label %1280

1280:                                             ; preds = %1274, %1280
  %1281 = phi i32 [ %1283, %1280 ], [ %1278, %1274 ]
  %1282 = ashr i32 %1281, 1
  %1283 = add nsw i32 %1282, %1281
  %1284 = icmp sgt i32 %1283, %1277
  br i1 %1284, label %1285, label %1280

1285:                                             ; preds = %1280
  %1286 = sext i32 %1283 to i64
  %1287 = icmp slt i32 %1283, 0
  %1288 = shl nsw i64 %1286, 1
  %1289 = select i1 %1287, i64 -1, i64 %1288
  %1290 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1289) #9
  %1291 = load ptr, ptr %12, align 8, !tbaa !47
  %1292 = sext i32 %1276 to i64
  %1293 = shl nsw i64 %1292, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1290, ptr align 2 %1291, i64 %1293, i1 false)
  %1294 = icmp eq ptr %1291, null
  br i1 %1294, label %1299, label %1297

1295:                                             ; preds = %1274
  %1296 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1301

1297:                                             ; preds = %1285
  tail call void @_ZdaPv(ptr noundef nonnull %1291) #10
  %1298 = load i32, ptr %17, align 8, !tbaa !19
  br label %1299

1299:                                             ; preds = %1297, %1285
  %1300 = phi i32 [ %1298, %1297 ], [ %1276, %1285 ]
  store ptr %1290, ptr %12, align 8, !tbaa !47
  store i32 %1283, ptr %646, align 4, !tbaa !70
  br label %1301

1301:                                             ; preds = %1295, %1299
  %1302 = phi i32 [ %1276, %1295 ], [ %1300, %1299 ]
  %1303 = phi ptr [ %1296, %1295 ], [ %1290, %1299 ]
  %1304 = ptrtoint ptr %1303 to i64
  %1305 = add nsw i32 %1302, 1
  %1306 = sext i32 %1305 to i64
  %1307 = getelementptr inbounds i16, ptr %1303, i64 %1306
  %1308 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1309 = icmp eq i32 %1308, 0
  br i1 %1309, label %1490, label %1310

1310:                                             ; preds = %1301
  %1311 = load i8, ptr %699, align 2, !tbaa !52
  %1312 = zext i8 %1311 to i32
  %1313 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1314 = icmp eq i32 %1313, 0
  br i1 %1314, label %1369, label %1315

1315:                                             ; preds = %1310
  %1316 = icmp eq i8 %1311, 1
  br i1 %1316, label %1317, label %2724

1317:                                             ; preds = %1315
  %1318 = icmp slt i32 %1265, %1266
  br i1 %1318, label %1319, label %1430

1319:                                             ; preds = %1317
  %1320 = sext i32 %1265 to i64
  %1321 = sext i32 %1266 to i64
  %1322 = sub nsw i64 %1321, %1320
  %1323 = xor i64 %1320, -1
  %1324 = and i64 %1322, 1
  %1325 = icmp eq i64 %1324, 0
  br i1 %1325, label %1337, label %1326

1326:                                             ; preds = %1319
  %1327 = getelementptr inbounds i16, ptr %425, i64 %1320
  %1328 = load i16, ptr %1327, align 2, !tbaa !45
  %1329 = zext i16 %1328 to i64
  %1330 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1329, i32 3
  %1331 = load i8, ptr %1330, align 2, !tbaa !52
  %1332 = icmp eq i8 %1331, 1
  br i1 %1332, label %1333, label %1334

1333:                                             ; preds = %1326
  store i16 %1328, ptr %471, align 2, !tbaa !45
  br label %1334

1334:                                             ; preds = %1333, %1326
  %1335 = phi ptr [ %662, %1333 ], [ %471, %1326 ]
  %1336 = add nsw i64 %1320, 1
  br label %1337

1337:                                             ; preds = %1334, %1319
  %1338 = phi ptr [ undef, %1319 ], [ %1335, %1334 ]
  %1339 = phi i64 [ %1320, %1319 ], [ %1336, %1334 ]
  %1340 = phi ptr [ %471, %1319 ], [ %1335, %1334 ]
  %1341 = sub nsw i64 0, %1321
  %1342 = icmp eq i64 %1323, %1341
  br i1 %1342, label %1430, label %1343

1343:                                             ; preds = %1337, %1365
  %1344 = phi i64 [ %1367, %1365 ], [ %1339, %1337 ]
  %1345 = phi ptr [ %1366, %1365 ], [ %1340, %1337 ]
  %1346 = getelementptr inbounds i16, ptr %425, i64 %1344
  %1347 = load i16, ptr %1346, align 2, !tbaa !45
  %1348 = zext i16 %1347 to i64
  %1349 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1348, i32 3
  %1350 = load i8, ptr %1349, align 2, !tbaa !52
  %1351 = icmp eq i8 %1350, 1
  br i1 %1351, label %1352, label %1354

1352:                                             ; preds = %1343
  %1353 = getelementptr inbounds i16, ptr %1345, i64 1
  store i16 %1347, ptr %1345, align 2, !tbaa !45
  br label %1354

1354:                                             ; preds = %1352, %1343
  %1355 = phi ptr [ %1353, %1352 ], [ %1345, %1343 ]
  %1356 = add nsw i64 %1344, 1
  %1357 = getelementptr inbounds i16, ptr %425, i64 %1356
  %1358 = load i16, ptr %1357, align 2, !tbaa !45
  %1359 = zext i16 %1358 to i64
  %1360 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1359, i32 3
  %1361 = load i8, ptr %1360, align 2, !tbaa !52
  %1362 = icmp eq i8 %1361, 1
  br i1 %1362, label %1363, label %1365

1363:                                             ; preds = %1354
  %1364 = getelementptr inbounds i16, ptr %1355, i64 1
  store i16 %1358, ptr %1355, align 2, !tbaa !45
  br label %1365

1365:                                             ; preds = %1363, %1354
  %1366 = phi ptr [ %1364, %1363 ], [ %1355, %1354 ]
  %1367 = add nsw i64 %1344, 2
  %1368 = icmp eq i64 %1367, %1321
  br i1 %1368, label %1430, label %1343

1369:                                             ; preds = %1310
  %1370 = add i8 %1311, -3
  %1371 = icmp ult i8 %1370, -2
  br i1 %1371, label %2724, label %1372

1372:                                             ; preds = %1369
  %1373 = icmp slt i32 %1265, %1266
  br i1 %1373, label %1374, label %1430

1374:                                             ; preds = %1372
  %1375 = sext i32 %1265 to i64
  %1376 = sext i32 %1266 to i64
  %1377 = sub nsw i64 %1376, %1375
  %1378 = xor i64 %1375, -1
  %1379 = and i64 %1377, 1
  %1380 = icmp eq i64 %1379, 0
  br i1 %1380, label %1394, label %1381

1381:                                             ; preds = %1374
  %1382 = getelementptr inbounds i16, ptr %425, i64 %1375
  %1383 = load i16, ptr %1382, align 2, !tbaa !45
  %1384 = zext i16 %1383 to i64
  %1385 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1384, i32 3
  %1386 = load i8, ptr %1385, align 2, !tbaa !52
  %1387 = zext i8 %1386 to i32
  %1388 = add nuw nsw i32 %1387, %1312
  %1389 = icmp eq i32 %1388, 3
  br i1 %1389, label %1390, label %1391

1390:                                             ; preds = %1381
  store i16 %1383, ptr %471, align 2, !tbaa !45
  br label %1391

1391:                                             ; preds = %1390, %1381
  %1392 = phi ptr [ %663, %1390 ], [ %471, %1381 ]
  %1393 = add nsw i64 %1375, 1
  br label %1394

1394:                                             ; preds = %1391, %1374
  %1395 = phi ptr [ undef, %1374 ], [ %1392, %1391 ]
  %1396 = phi i64 [ %1375, %1374 ], [ %1393, %1391 ]
  %1397 = phi ptr [ %471, %1374 ], [ %1392, %1391 ]
  %1398 = sub nsw i64 0, %1376
  %1399 = icmp eq i64 %1378, %1398
  br i1 %1399, label %1430, label %1400

1400:                                             ; preds = %1394, %1426
  %1401 = phi i64 [ %1428, %1426 ], [ %1396, %1394 ]
  %1402 = phi ptr [ %1427, %1426 ], [ %1397, %1394 ]
  %1403 = getelementptr inbounds i16, ptr %425, i64 %1401
  %1404 = load i16, ptr %1403, align 2, !tbaa !45
  %1405 = zext i16 %1404 to i64
  %1406 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1405, i32 3
  %1407 = load i8, ptr %1406, align 2, !tbaa !52
  %1408 = zext i8 %1407 to i32
  %1409 = add nuw nsw i32 %1408, %1312
  %1410 = icmp eq i32 %1409, 3
  br i1 %1410, label %1411, label %1413

1411:                                             ; preds = %1400
  %1412 = getelementptr inbounds i16, ptr %1402, i64 1
  store i16 %1404, ptr %1402, align 2, !tbaa !45
  br label %1413

1413:                                             ; preds = %1411, %1400
  %1414 = phi ptr [ %1412, %1411 ], [ %1402, %1400 ]
  %1415 = add nsw i64 %1401, 1
  %1416 = getelementptr inbounds i16, ptr %425, i64 %1415
  %1417 = load i16, ptr %1416, align 2, !tbaa !45
  %1418 = zext i16 %1417 to i64
  %1419 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1418, i32 3
  %1420 = load i8, ptr %1419, align 2, !tbaa !52
  %1421 = zext i8 %1420 to i32
  %1422 = add nuw nsw i32 %1421, %1312
  %1423 = icmp eq i32 %1422, 3
  br i1 %1423, label %1424, label %1426

1424:                                             ; preds = %1413
  %1425 = getelementptr inbounds i16, ptr %1414, i64 1
  store i16 %1417, ptr %1414, align 2, !tbaa !45
  br label %1426

1426:                                             ; preds = %1424, %1413
  %1427 = phi ptr [ %1425, %1424 ], [ %1414, %1413 ]
  %1428 = add nsw i64 %1401, 2
  %1429 = icmp eq i64 %1428, %1376
  br i1 %1429, label %1430, label %1400

1430:                                             ; preds = %1337, %1365, %1394, %1426, %1317, %1372
  %1431 = phi ptr [ %471, %1372 ], [ %471, %1317 ], [ %1395, %1394 ], [ %1427, %1426 ], [ %1338, %1337 ], [ %1366, %1365 ]
  %1432 = ptrtoint ptr %1431 to i64
  %1433 = sub i64 %1432, %647
  %1434 = lshr exact i64 %1433, 1
  %1435 = trunc i64 %1434 to i32
  %1436 = icmp sgt i32 %1435, 0
  br i1 %1436, label %1437, label %1711

1437:                                             ; preds = %1430
  %1438 = and i64 %1434, 4294967295
  %1439 = extractelement <2 x double> %695, i64 0
  %1440 = extractelement <2 x double> %695, i64 1
  br label %1441

1441:                                             ; preds = %1437, %1485
  %1442 = phi i64 [ 0, %1437 ], [ %1488, %1485 ]
  %1443 = phi ptr [ %471, %1437 ], [ %1487, %1485 ]
  %1444 = phi ptr [ %1307, %1437 ], [ %1486, %1485 ]
  %1445 = getelementptr inbounds i16, ptr %471, i64 %1442
  %1446 = load i16, ptr %1445, align 2, !tbaa !45
  %1447 = zext i16 %1446 to i64
  %1448 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1447
  %1449 = load double, ptr %1448, align 8, !tbaa !69
  %1450 = fsub double %1439, %1449
  %1451 = fmul double %1450, %1450
  %1452 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 1
  %1453 = load double, ptr %1452, align 8, !tbaa !68
  %1454 = fsub double %1440, %1453
  %1455 = tail call double @llvm.fmuladd.f64(double %1454, double %1454, double %1451)
  %1456 = getelementptr inbounds %class.Vector, ptr %1448, i64 0, i32 2
  %1457 = load double, ptr %1456, align 8, !tbaa !50
  %1458 = fsub double %698, %1457
  %1459 = tail call double @llvm.fmuladd.f64(double %1458, double %1458, double %1455)
  br i1 %1275, label %1460, label %1467

1460:                                             ; preds = %1441
  %1461 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1447
  %1462 = load i32, ptr %1461, align 4
  %1463 = and i32 %1462, 1073741824
  %1464 = icmp ne i32 %1463, 0
  %1465 = fcmp ugt double %1459, %24
  %1466 = select i1 %1464, i1 true, i1 %1465
  br i1 %1466, label %1485, label %1472

1467:                                             ; preds = %1441
  %1468 = fcmp ugt double %1459, %24
  br i1 %1468, label %1485, label %1469

1469:                                             ; preds = %1467
  %1470 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1447
  %1471 = load i32, ptr %1470, align 4
  br label %1472

1472:                                             ; preds = %1469, %1460
  %1473 = phi i32 [ %1471, %1469 ], [ %1462, %1460 ]
  %1474 = shl i32 %1473, 2
  %1475 = ashr exact i32 %1474, 2
  %1476 = icmp slt i32 %1475, %723
  %1477 = icmp sgt i32 %1475, %725
  %1478 = select i1 %1476, i1 true, i1 %1477
  %1479 = select i1 %1478, ptr %1444, ptr %1443
  %1480 = zext i1 %1478 to i64
  %1481 = getelementptr inbounds i16, ptr %1444, i64 %1480
  %1482 = xor i1 %1478, true
  %1483 = zext i1 %1482 to i64
  %1484 = getelementptr inbounds i16, ptr %1443, i64 %1483
  store i16 %1446, ptr %1479, align 2, !tbaa !45
  br label %1485

1485:                                             ; preds = %1472, %1467, %1460
  %1486 = phi ptr [ %1444, %1460 ], [ %1444, %1467 ], [ %1481, %1472 ]
  %1487 = phi ptr [ %1443, %1460 ], [ %1443, %1467 ], [ %1484, %1472 ]
  %1488 = add nuw nsw i64 %1442, 1
  %1489 = icmp eq i64 %1488, %1438
  br i1 %1489, label %1711, label %1441

1490:                                             ; preds = %1301
  %1491 = icmp slt i32 %1265, %1266
  br i1 %1275, label %1492, label %1540

1492:                                             ; preds = %1490
  br i1 %1491, label %1493, label %1711

1493:                                             ; preds = %1492
  %1494 = sext i32 %1265 to i64
  %1495 = sext i32 %1266 to i64
  %1496 = extractelement <2 x double> %695, i64 0
  %1497 = extractelement <2 x double> %695, i64 1
  br label %1498

1498:                                             ; preds = %1493, %1535
  %1499 = phi i64 [ %1494, %1493 ], [ %1538, %1535 ]
  %1500 = phi ptr [ %471, %1493 ], [ %1537, %1535 ]
  %1501 = phi ptr [ %1307, %1493 ], [ %1536, %1535 ]
  %1502 = getelementptr inbounds i16, ptr %425, i64 %1499
  %1503 = load i16, ptr %1502, align 2, !tbaa !45
  %1504 = zext i16 %1503 to i64
  %1505 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1504
  %1506 = load i32, ptr %1505, align 4
  %1507 = and i32 %1506, 1073741824
  %1508 = icmp eq i32 %1507, 0
  br i1 %1508, label %1509, label %1535

1509:                                             ; preds = %1498
  %1510 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1504
  %1511 = getelementptr inbounds %class.Vector, ptr %1510, i64 0, i32 2
  %1512 = load double, ptr %1511, align 8, !tbaa !50
  %1513 = fsub double %698, %1512
  %1514 = getelementptr inbounds %class.Vector, ptr %1510, i64 0, i32 1
  %1515 = load double, ptr %1514, align 8, !tbaa !68
  %1516 = fsub double %1497, %1515
  %1517 = load double, ptr %1510, align 8, !tbaa !69
  %1518 = fsub double %1496, %1517
  %1519 = fmul double %1518, %1518
  %1520 = tail call double @llvm.fmuladd.f64(double %1516, double %1516, double %1519)
  %1521 = tail call double @llvm.fmuladd.f64(double %1513, double %1513, double %1520)
  %1522 = fcmp ugt double %1521, %24
  br i1 %1522, label %1535, label %1523

1523:                                             ; preds = %1509
  %1524 = shl i32 %1506, 2
  %1525 = ashr exact i32 %1524, 2
  %1526 = icmp slt i32 %1525, %723
  %1527 = icmp sgt i32 %1525, %725
  %1528 = select i1 %1526, i1 true, i1 %1527
  %1529 = select i1 %1528, ptr %1501, ptr %1500
  %1530 = zext i1 %1528 to i64
  %1531 = getelementptr inbounds i16, ptr %1501, i64 %1530
  %1532 = xor i1 %1528, true
  %1533 = zext i1 %1532 to i64
  %1534 = getelementptr inbounds i16, ptr %1500, i64 %1533
  store i16 %1503, ptr %1529, align 2, !tbaa !45
  br label %1535

1535:                                             ; preds = %1523, %1509, %1498
  %1536 = phi ptr [ %1501, %1498 ], [ %1501, %1509 ], [ %1531, %1523 ]
  %1537 = phi ptr [ %1500, %1498 ], [ %1500, %1509 ], [ %1534, %1523 ]
  %1538 = add nsw i64 %1499, 1
  %1539 = icmp eq i64 %1538, %1495
  br i1 %1539, label %1711, label %1498

1540:                                             ; preds = %1490
  br i1 %1491, label %1541, label %1711

1541:                                             ; preds = %1540
  %1542 = sub nsw i32 %1266, %1265
  %1543 = icmp sgt i32 %1542, 6
  br i1 %1543, label %1544, label %1662

1544:                                             ; preds = %1541
  %1545 = add nsw i32 %1266, -2
  %1546 = add nsw i32 %1265, 2
  %1547 = icmp slt i32 %1546, %1545
  br i1 %1547, label %1548, label %1662

1548:                                             ; preds = %1544
  %1549 = sext i32 %1265 to i64
  %1550 = getelementptr inbounds i16, ptr %425, i64 %1549
  %1551 = load i16, ptr %1550, align 2, !tbaa !45
  %1552 = zext i16 %1551 to i64
  %1553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1552
  %1554 = load i32, ptr %1553, align 4
  %1555 = add nsw i32 %1265, 1
  %1556 = sext i32 %1555 to i64
  %1557 = getelementptr inbounds i16, ptr %425, i64 %1556
  %1558 = load i16, ptr %1557, align 2, !tbaa !45
  %1559 = zext i16 %1558 to i64
  %1560 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1559
  %1561 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 2
  %1562 = load double, ptr %1561, align 8, !tbaa !50
  %1563 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1552
  %1564 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 2
  %1565 = load double, ptr %1564, align 8, !tbaa !50
  %1566 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 1
  %1567 = load double, ptr %1566, align 8, !tbaa !68
  %1568 = getelementptr inbounds %class.Vector, ptr %1563, i64 0, i32 1
  %1569 = load double, ptr %1568, align 8, !tbaa !68
  %1570 = load double, ptr %1560, align 8, !tbaa !69
  %1571 = load double, ptr %1563, align 8, !tbaa !69
  %1572 = sext i32 %1546 to i64
  %1573 = sext i32 %1545 to i64
  %1574 = extractelement <2 x double> %695, i64 0
  %1575 = extractelement <2 x double> %695, i64 1
  br label %1576

1576:                                             ; preds = %1548, %1656
  %1577 = phi i64 [ %1572, %1548 ], [ %1659, %1656 ]
  %1578 = phi i64 [ %1559, %1548 ], [ %1616, %1656 ]
  %1579 = phi i32 [ %1554, %1548 ], [ %1644, %1656 ]
  %1580 = phi ptr [ %471, %1548 ], [ %1658, %1656 ]
  %1581 = phi ptr [ %1307, %1548 ], [ %1657, %1656 ]
  %1582 = phi i32 [ %1265, %1548 ], [ %1661, %1656 ]
  %1583 = phi i16 [ %1551, %1548 ], [ %1608, %1656 ]
  %1584 = phi i16 [ %1558, %1548 ], [ %1612, %1656 ]
  %1585 = phi double [ %1571, %1548 ], [ %1615, %1656 ]
  %1586 = phi double [ %1570, %1548 ], [ %1618, %1656 ]
  %1587 = phi double [ %1569, %1548 ], [ %1620, %1656 ]
  %1588 = phi double [ %1567, %1548 ], [ %1622, %1656 ]
  %1589 = phi double [ %1565, %1548 ], [ %1624, %1656 ]
  %1590 = phi double [ %1562, %1548 ], [ %1626, %1656 ]
  %1591 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1578
  %1592 = load i32, ptr %1591, align 4
  %1593 = shl i32 %1592, 2
  %1594 = ashr exact i32 %1593, 2
  %1595 = fsub double %1574, %1585
  %1596 = fsub double %1574, %1586
  %1597 = fmul double %1595, %1595
  %1598 = fmul double %1596, %1596
  %1599 = fsub double %1575, %1587
  %1600 = fsub double %1575, %1588
  %1601 = tail call double @llvm.fmuladd.f64(double %1599, double %1599, double %1597)
  %1602 = tail call double @llvm.fmuladd.f64(double %1600, double %1600, double %1598)
  %1603 = fsub double %698, %1589
  %1604 = fsub double %698, %1590
  %1605 = tail call double @llvm.fmuladd.f64(double %1603, double %1603, double %1601)
  %1606 = tail call double @llvm.fmuladd.f64(double %1604, double %1604, double %1602)
  %1607 = getelementptr inbounds i16, ptr %425, i64 %1577
  %1608 = load i16, ptr %1607, align 2, !tbaa !45
  %1609 = add nsw i32 %1582, 3
  %1610 = sext i32 %1609 to i64
  %1611 = getelementptr inbounds i16, ptr %425, i64 %1610
  %1612 = load i16, ptr %1611, align 2, !tbaa !45
  %1613 = zext i16 %1608 to i64
  %1614 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1613
  %1615 = load double, ptr %1614, align 8, !tbaa !69
  %1616 = zext i16 %1612 to i64
  %1617 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1616
  %1618 = load double, ptr %1617, align 8, !tbaa !69
  %1619 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 1
  %1620 = load double, ptr %1619, align 8, !tbaa !68
  %1621 = getelementptr inbounds %class.Vector, ptr %1617, i64 0, i32 1
  %1622 = load double, ptr %1621, align 8, !tbaa !68
  %1623 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 2
  %1624 = load double, ptr %1623, align 8, !tbaa !50
  %1625 = getelementptr inbounds %class.Vector, ptr %1617, i64 0, i32 2
  %1626 = load double, ptr %1625, align 8, !tbaa !50
  %1627 = fcmp ugt double %1605, %24
  br i1 %1627, label %1640, label %1628

1628:                                             ; preds = %1576
  %1629 = shl i32 %1579, 2
  %1630 = ashr exact i32 %1629, 2
  %1631 = icmp slt i32 %1630, %723
  %1632 = icmp sgt i32 %1630, %725
  %1633 = select i1 %1631, i1 true, i1 %1632
  %1634 = select i1 %1633, ptr %1581, ptr %1580
  %1635 = zext i1 %1633 to i64
  %1636 = getelementptr inbounds i16, ptr %1581, i64 %1635
  %1637 = xor i1 %1633, true
  %1638 = zext i1 %1637 to i64
  %1639 = getelementptr inbounds i16, ptr %1580, i64 %1638
  store i16 %1583, ptr %1634, align 2, !tbaa !45
  br label %1640

1640:                                             ; preds = %1628, %1576
  %1641 = phi ptr [ %1581, %1576 ], [ %1636, %1628 ]
  %1642 = phi ptr [ %1580, %1576 ], [ %1639, %1628 ]
  %1643 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1613
  %1644 = load i32, ptr %1643, align 4
  %1645 = fcmp ugt double %1606, %24
  br i1 %1645, label %1656, label %1646

1646:                                             ; preds = %1640
  %1647 = icmp slt i32 %1594, %723
  %1648 = icmp sgt i32 %1594, %725
  %1649 = select i1 %1647, i1 true, i1 %1648
  %1650 = select i1 %1649, ptr %1641, ptr %1642
  %1651 = zext i1 %1649 to i64
  %1652 = getelementptr inbounds i16, ptr %1641, i64 %1651
  %1653 = xor i1 %1649, true
  %1654 = zext i1 %1653 to i64
  %1655 = getelementptr inbounds i16, ptr %1642, i64 %1654
  store i16 %1584, ptr %1650, align 2, !tbaa !45
  br label %1656

1656:                                             ; preds = %1646, %1640
  %1657 = phi ptr [ %1641, %1640 ], [ %1652, %1646 ]
  %1658 = phi ptr [ %1642, %1640 ], [ %1655, %1646 ]
  %1659 = add nsw i64 %1577, 2
  %1660 = icmp slt i64 %1659, %1573
  %1661 = trunc i64 %1577 to i32
  br i1 %1660, label %1576, label %1662

1662:                                             ; preds = %1656, %1544, %1541
  %1663 = phi i32 [ %1265, %1541 ], [ %1265, %1544 ], [ %1661, %1656 ]
  %1664 = phi ptr [ %1307, %1541 ], [ %1307, %1544 ], [ %1657, %1656 ]
  %1665 = phi ptr [ %471, %1541 ], [ %471, %1544 ], [ %1658, %1656 ]
  %1666 = icmp slt i32 %1663, %1266
  br i1 %1666, label %1667, label %1711

1667:                                             ; preds = %1662
  %1668 = sext i32 %1663 to i64
  %1669 = sext i32 %1266 to i64
  %1670 = extractelement <2 x double> %695, i64 0
  %1671 = extractelement <2 x double> %695, i64 1
  br label %1672

1672:                                             ; preds = %1667, %1706
  %1673 = phi i64 [ %1668, %1667 ], [ %1709, %1706 ]
  %1674 = phi ptr [ %1665, %1667 ], [ %1708, %1706 ]
  %1675 = phi ptr [ %1664, %1667 ], [ %1707, %1706 ]
  %1676 = getelementptr inbounds i16, ptr %425, i64 %1673
  %1677 = load i16, ptr %1676, align 2, !tbaa !45
  %1678 = zext i16 %1677 to i64
  %1679 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1678
  %1680 = load double, ptr %1679, align 8, !tbaa !69
  %1681 = getelementptr inbounds %class.Vector, ptr %1679, i64 0, i32 1
  %1682 = load double, ptr %1681, align 8, !tbaa !68
  %1683 = getelementptr inbounds %class.Vector, ptr %1679, i64 0, i32 2
  %1684 = load double, ptr %1683, align 8, !tbaa !50
  %1685 = fsub double %1670, %1680
  %1686 = fmul double %1685, %1685
  %1687 = fsub double %1671, %1682
  %1688 = tail call double @llvm.fmuladd.f64(double %1687, double %1687, double %1686)
  %1689 = fsub double %698, %1684
  %1690 = tail call double @llvm.fmuladd.f64(double %1689, double %1689, double %1688)
  %1691 = fcmp ugt double %1690, %24
  br i1 %1691, label %1706, label %1692

1692:                                             ; preds = %1672
  %1693 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1678
  %1694 = load i32, ptr %1693, align 4
  %1695 = shl i32 %1694, 2
  %1696 = ashr exact i32 %1695, 2
  %1697 = icmp slt i32 %1696, %723
  %1698 = icmp sgt i32 %1696, %725
  %1699 = select i1 %1697, i1 true, i1 %1698
  %1700 = select i1 %1699, ptr %1675, ptr %1674
  %1701 = zext i1 %1699 to i64
  %1702 = getelementptr inbounds i16, ptr %1675, i64 %1701
  %1703 = xor i1 %1699, true
  %1704 = zext i1 %1703 to i64
  %1705 = getelementptr inbounds i16, ptr %1674, i64 %1704
  store i16 %1677, ptr %1700, align 2, !tbaa !45
  br label %1706

1706:                                             ; preds = %1692, %1672
  %1707 = phi ptr [ %1675, %1672 ], [ %1702, %1692 ]
  %1708 = phi ptr [ %1674, %1672 ], [ %1705, %1692 ]
  %1709 = add nsw i64 %1673, 1
  %1710 = icmp eq i64 %1709, %1669
  br i1 %1710, label %1711, label %1672

1711:                                             ; preds = %1485, %1706, %1535, %1430, %1662, %1492, %1540
  %1712 = phi ptr [ %1307, %1540 ], [ %1307, %1492 ], [ %1664, %1662 ], [ %1307, %1430 ], [ %1536, %1535 ], [ %1707, %1706 ], [ %1486, %1485 ]
  %1713 = phi ptr [ %471, %1540 ], [ %471, %1492 ], [ %1665, %1662 ], [ %471, %1430 ], [ %1537, %1535 ], [ %1708, %1706 ], [ %1487, %1485 ]
  %1714 = ptrtoint ptr %1713 to i64
  %1715 = sub i64 %1714, %647
  %1716 = lshr exact i64 %1715, 1
  %1717 = trunc i64 %1716 to i32
  %1718 = icmp sgt i32 %1717, 0
  br i1 %1718, label %1719, label %1819

1719:                                             ; preds = %1711
  %1720 = and i64 %1716, 4294967295
  %1721 = and i64 %1716, 1
  %1722 = icmp eq i64 %1720, 1
  br i1 %1722, label %1787, label %1723

1723:                                             ; preds = %1719
  %1724 = sub nsw i64 %1720, %1721
  br label %1725

1725:                                             ; preds = %1780, %1723
  %1726 = phi i64 [ 0, %1723 ], [ %1784, %1780 ]
  %1727 = phi ptr [ %1712, %1723 ], [ %1783, %1780 ]
  %1728 = phi ptr [ %333, %1723 ], [ %1782, %1780 ]
  %1729 = phi ptr [ %379, %1723 ], [ %1781, %1780 ]
  %1730 = phi i64 [ 0, %1723 ], [ %1785, %1780 ]
  %1731 = getelementptr inbounds i16, ptr %471, i64 %1726
  %1732 = load i16, ptr %1731, align 2, !tbaa !45
  %1733 = zext i16 %1732 to i64
  %1734 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1733
  %1735 = load i32, ptr %1734, align 4
  %1736 = shl i32 %1735, 2
  %1737 = ashr exact i32 %1736, 2
  %1738 = sext i32 %1737 to i64
  %1739 = getelementptr inbounds i8, ptr %960, i64 %1738
  %1740 = load i8, ptr %1739, align 1, !tbaa !59
  %1741 = sext i8 %1740 to i32
  switch i32 %1741, label %1753 [
    i32 0, label %1742
    i32 1, label %1744
    i32 2, label %1746
  ]

1742:                                             ; preds = %1725
  %1743 = getelementptr inbounds i16, ptr %1727, i64 1
  br label %1748

1744:                                             ; preds = %1725
  %1745 = getelementptr inbounds i16, ptr %1728, i64 1
  br label %1748

1746:                                             ; preds = %1725
  %1747 = getelementptr inbounds i16, ptr %1729, i64 1
  br label %1748

1748:                                             ; preds = %1742, %1744, %1746
  %1749 = phi ptr [ %1729, %1746 ], [ %1728, %1744 ], [ %1727, %1742 ]
  %1750 = phi ptr [ %1747, %1746 ], [ %1729, %1744 ], [ %1729, %1742 ]
  %1751 = phi ptr [ %1728, %1746 ], [ %1745, %1744 ], [ %1728, %1742 ]
  %1752 = phi ptr [ %1727, %1746 ], [ %1727, %1744 ], [ %1743, %1742 ]
  store i16 %1732, ptr %1749, align 2, !tbaa !45
  br label %1753

1753:                                             ; preds = %1748, %1725
  %1754 = phi ptr [ %1729, %1725 ], [ %1750, %1748 ]
  %1755 = phi ptr [ %1728, %1725 ], [ %1751, %1748 ]
  %1756 = phi ptr [ %1727, %1725 ], [ %1752, %1748 ]
  %1757 = or i64 %1726, 1
  %1758 = getelementptr inbounds i16, ptr %471, i64 %1757
  %1759 = load i16, ptr %1758, align 2, !tbaa !45
  %1760 = zext i16 %1759 to i64
  %1761 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1760
  %1762 = load i32, ptr %1761, align 4
  %1763 = shl i32 %1762, 2
  %1764 = ashr exact i32 %1763, 2
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds i8, ptr %960, i64 %1765
  %1767 = load i8, ptr %1766, align 1, !tbaa !59
  %1768 = sext i8 %1767 to i32
  switch i32 %1768, label %1780 [
    i32 0, label %1773
    i32 1, label %1771
    i32 2, label %1769
  ]

1769:                                             ; preds = %1753
  %1770 = getelementptr inbounds i16, ptr %1754, i64 1
  br label %1775

1771:                                             ; preds = %1753
  %1772 = getelementptr inbounds i16, ptr %1755, i64 1
  br label %1775

1773:                                             ; preds = %1753
  %1774 = getelementptr inbounds i16, ptr %1756, i64 1
  br label %1775

1775:                                             ; preds = %1773, %1771, %1769
  %1776 = phi ptr [ %1754, %1769 ], [ %1755, %1771 ], [ %1756, %1773 ]
  %1777 = phi ptr [ %1770, %1769 ], [ %1754, %1771 ], [ %1754, %1773 ]
  %1778 = phi ptr [ %1755, %1769 ], [ %1772, %1771 ], [ %1755, %1773 ]
  %1779 = phi ptr [ %1756, %1769 ], [ %1756, %1771 ], [ %1774, %1773 ]
  store i16 %1759, ptr %1776, align 2, !tbaa !45
  br label %1780

1780:                                             ; preds = %1775, %1753
  %1781 = phi ptr [ %1754, %1753 ], [ %1777, %1775 ]
  %1782 = phi ptr [ %1755, %1753 ], [ %1778, %1775 ]
  %1783 = phi ptr [ %1756, %1753 ], [ %1779, %1775 ]
  %1784 = add nuw nsw i64 %1726, 2
  %1785 = add i64 %1730, 2
  %1786 = icmp eq i64 %1785, %1724
  br i1 %1786, label %1787, label %1725

1787:                                             ; preds = %1780, %1719
  %1788 = phi ptr [ undef, %1719 ], [ %1781, %1780 ]
  %1789 = phi ptr [ undef, %1719 ], [ %1782, %1780 ]
  %1790 = phi ptr [ undef, %1719 ], [ %1783, %1780 ]
  %1791 = phi i64 [ 0, %1719 ], [ %1784, %1780 ]
  %1792 = phi ptr [ %1712, %1719 ], [ %1783, %1780 ]
  %1793 = phi ptr [ %333, %1719 ], [ %1782, %1780 ]
  %1794 = phi ptr [ %379, %1719 ], [ %1781, %1780 ]
  %1795 = icmp eq i64 %1721, 0
  br i1 %1795, label %1819, label %1796

1796:                                             ; preds = %1787
  %1797 = getelementptr inbounds i16, ptr %471, i64 %1791
  %1798 = load i16, ptr %1797, align 2, !tbaa !45
  %1799 = zext i16 %1798 to i64
  %1800 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1799
  %1801 = load i32, ptr %1800, align 4
  %1802 = shl i32 %1801, 2
  %1803 = ashr exact i32 %1802, 2
  %1804 = sext i32 %1803 to i64
  %1805 = getelementptr inbounds i8, ptr %960, i64 %1804
  %1806 = load i8, ptr %1805, align 1, !tbaa !59
  %1807 = sext i8 %1806 to i32
  switch i32 %1807, label %1819 [
    i32 0, label %1812
    i32 1, label %1810
    i32 2, label %1808
  ]

1808:                                             ; preds = %1796
  %1809 = getelementptr inbounds i16, ptr %1794, i64 1
  br label %1814

1810:                                             ; preds = %1796
  %1811 = getelementptr inbounds i16, ptr %1793, i64 1
  br label %1814

1812:                                             ; preds = %1796
  %1813 = getelementptr inbounds i16, ptr %1792, i64 1
  br label %1814

1814:                                             ; preds = %1812, %1810, %1808
  %1815 = phi ptr [ %1794, %1808 ], [ %1793, %1810 ], [ %1792, %1812 ]
  %1816 = phi ptr [ %1809, %1808 ], [ %1794, %1810 ], [ %1794, %1812 ]
  %1817 = phi ptr [ %1793, %1808 ], [ %1811, %1810 ], [ %1793, %1812 ]
  %1818 = phi ptr [ %1792, %1808 ], [ %1792, %1810 ], [ %1813, %1812 ]
  store i16 %1798, ptr %1815, align 2, !tbaa !45
  br label %1819

1819:                                             ; preds = %1787, %1814, %1796, %1711
  %1820 = phi ptr [ %379, %1711 ], [ %1788, %1787 ], [ %1794, %1796 ], [ %1816, %1814 ]
  %1821 = phi ptr [ %333, %1711 ], [ %1789, %1787 ], [ %1793, %1796 ], [ %1817, %1814 ]
  %1822 = phi ptr [ %1712, %1711 ], [ %1790, %1787 ], [ %1792, %1796 ], [ %1818, %1814 ]
  %1823 = ptrtoint ptr %1822 to i64
  %1824 = ptrtoint ptr %1307 to i64
  %1825 = sub i64 %1823, %1824
  %1826 = lshr exact i64 %1825, 1
  %1827 = trunc i64 %1826 to i32
  %1828 = icmp eq i32 %1827, 0
  %1829 = shl i64 %1825, 31
  br i1 %1828, label %1835, label %1830

1830:                                             ; preds = %1819
  %1831 = add i64 %1829, -4294967296
  %1832 = ashr i64 %1831, 32
  %1833 = getelementptr inbounds i16, ptr %1307, i64 %1832
  %1834 = load i16, ptr %1833, align 2, !tbaa !45
  br label %1835

1835:                                             ; preds = %1819, %1830
  %1836 = phi i16 [ %1834, %1830 ], [ -1, %1819 ]
  %1837 = ashr i64 %1829, 32
  %1838 = getelementptr inbounds i16, ptr %1307, i64 %1837
  store i16 %1836, ptr %1838, align 2, !tbaa !45
  %1839 = trunc i64 %1826 to i16
  %1840 = add i16 %1839, 1
  %1841 = load i32, ptr %17, align 8, !tbaa !19
  %1842 = sext i32 %1841 to i64
  %1843 = getelementptr inbounds i16, ptr %1303, i64 %1842
  store i16 %1840, ptr %1843, align 2, !tbaa !45
  %1844 = add nsw i32 %1827, 2
  %1845 = add nsw i32 %1844, %1841
  %1846 = ptrtoint ptr %1821 to i64
  %1847 = sub i64 %1846, %648
  %1848 = lshr exact i64 %1847, 1
  %1849 = trunc i64 %1848 to i32
  %1850 = add nsw i32 %1845, 1
  %1851 = sext i32 %1850 to i64
  %1852 = getelementptr i16, ptr %1303, i64 %1851
  %1853 = icmp sgt i32 %1849, 0
  br i1 %1853, label %1854, label %1944

1854:                                             ; preds = %1835
  %1855 = and i64 %1848, 4294967295
  %1856 = icmp ult i64 %1855, 8
  br i1 %1856, label %1900, label %1857

1857:                                             ; preds = %1854
  %1858 = shl nsw i64 %1851, 1
  %1859 = add i64 %1858, %1304
  %1860 = sub i64 %1859, %648
  %1861 = icmp ult i64 %1860, 128
  br i1 %1861, label %1900, label %1862

1862:                                             ; preds = %1857
  %1863 = icmp ult i64 %1855, 64
  br i1 %1863, label %1887, label %1864

1864:                                             ; preds = %1862
  %1865 = and i64 %1848, 63
  %1866 = sub nsw i64 %1855, %1865
  br label %1867

1867:                                             ; preds = %1867, %1864
  %1868 = phi i64 [ 0, %1864 ], [ %1881, %1867 ]
  %1869 = getelementptr inbounds i16, ptr %333, i64 %1868
  %1870 = load <16 x i16>, ptr %1869, align 2, !tbaa !45
  %1871 = getelementptr inbounds i16, ptr %1869, i64 16
  %1872 = load <16 x i16>, ptr %1871, align 2, !tbaa !45
  %1873 = getelementptr inbounds i16, ptr %1869, i64 32
  %1874 = load <16 x i16>, ptr %1873, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1869, i64 48
  %1876 = load <16 x i16>, ptr %1875, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1852, i64 %1868
  store <16 x i16> %1870, ptr %1877, align 2, !tbaa !45
  %1878 = getelementptr inbounds i16, ptr %1877, i64 16
  store <16 x i16> %1872, ptr %1878, align 2, !tbaa !45
  %1879 = getelementptr inbounds i16, ptr %1877, i64 32
  store <16 x i16> %1874, ptr %1879, align 2, !tbaa !45
  %1880 = getelementptr inbounds i16, ptr %1877, i64 48
  store <16 x i16> %1876, ptr %1880, align 2, !tbaa !45
  %1881 = add nuw i64 %1868, 64
  %1882 = icmp eq i64 %1881, %1866
  br i1 %1882, label %1883, label %1867, !llvm.loop !261

1883:                                             ; preds = %1867
  %1884 = icmp eq i64 %1865, 0
  br i1 %1884, label %1938, label %1885

1885:                                             ; preds = %1883
  %1886 = icmp ult i64 %1865, 8
  br i1 %1886, label %1900, label %1887

1887:                                             ; preds = %1862, %1885
  %1888 = phi i64 [ %1866, %1885 ], [ 0, %1862 ]
  %1889 = and i64 %1848, 7
  %1890 = sub nsw i64 %1855, %1889
  br label %1891

1891:                                             ; preds = %1891, %1887
  %1892 = phi i64 [ %1888, %1887 ], [ %1896, %1891 ]
  %1893 = getelementptr inbounds i16, ptr %333, i64 %1892
  %1894 = load <8 x i16>, ptr %1893, align 2, !tbaa !45
  %1895 = getelementptr inbounds i16, ptr %1852, i64 %1892
  store <8 x i16> %1894, ptr %1895, align 2, !tbaa !45
  %1896 = add nuw i64 %1892, 8
  %1897 = icmp eq i64 %1896, %1890
  br i1 %1897, label %1898, label %1891, !llvm.loop !262

1898:                                             ; preds = %1891
  %1899 = icmp eq i64 %1889, 0
  br i1 %1899, label %1938, label %1900

1900:                                             ; preds = %1857, %1854, %1885, %1898
  %1901 = phi i64 [ 0, %1854 ], [ 0, %1857 ], [ %1866, %1885 ], [ %1890, %1898 ]
  %1902 = sub i64 %1848, %1901
  %1903 = xor i64 %1901, -1
  %1904 = add nsw i64 %1855, %1903
  %1905 = and i64 %1902, 3
  %1906 = icmp eq i64 %1905, 0
  br i1 %1906, label %1916, label %1907

1907:                                             ; preds = %1900, %1907
  %1908 = phi i64 [ %1913, %1907 ], [ %1901, %1900 ]
  %1909 = phi i64 [ %1914, %1907 ], [ 0, %1900 ]
  %1910 = getelementptr inbounds i16, ptr %333, i64 %1908
  %1911 = load i16, ptr %1910, align 2, !tbaa !45
  %1912 = getelementptr inbounds i16, ptr %1852, i64 %1908
  store i16 %1911, ptr %1912, align 2, !tbaa !45
  %1913 = add nuw nsw i64 %1908, 1
  %1914 = add i64 %1909, 1
  %1915 = icmp eq i64 %1914, %1905
  br i1 %1915, label %1916, label %1907, !llvm.loop !263

1916:                                             ; preds = %1907, %1900
  %1917 = phi i64 [ %1901, %1900 ], [ %1913, %1907 ]
  %1918 = icmp ult i64 %1904, 3
  br i1 %1918, label %1938, label %1919

1919:                                             ; preds = %1916, %1919
  %1920 = phi i64 [ %1936, %1919 ], [ %1917, %1916 ]
  %1921 = getelementptr inbounds i16, ptr %333, i64 %1920
  %1922 = load i16, ptr %1921, align 2, !tbaa !45
  %1923 = getelementptr inbounds i16, ptr %1852, i64 %1920
  store i16 %1922, ptr %1923, align 2, !tbaa !45
  %1924 = add nuw nsw i64 %1920, 1
  %1925 = getelementptr inbounds i16, ptr %333, i64 %1924
  %1926 = load i16, ptr %1925, align 2, !tbaa !45
  %1927 = getelementptr inbounds i16, ptr %1852, i64 %1924
  store i16 %1926, ptr %1927, align 2, !tbaa !45
  %1928 = add nuw nsw i64 %1920, 2
  %1929 = getelementptr inbounds i16, ptr %333, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1852, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1920, 3
  %1933 = getelementptr inbounds i16, ptr %333, i64 %1932
  %1934 = load i16, ptr %1933, align 2, !tbaa !45
  %1935 = getelementptr inbounds i16, ptr %1852, i64 %1932
  store i16 %1934, ptr %1935, align 2, !tbaa !45
  %1936 = add nuw nsw i64 %1920, 4
  %1937 = icmp eq i64 %1936, %1855
  br i1 %1937, label %1938, label %1919, !llvm.loop !264

1938:                                             ; preds = %1916, %1919, %1883, %1898
  %1939 = shl i64 %1847, 31
  %1940 = add i64 %1939, -4294967296
  %1941 = ashr i64 %1940, 32
  %1942 = getelementptr inbounds i16, ptr %1852, i64 %1941
  %1943 = load i16, ptr %1942, align 2, !tbaa !45
  br label %1944

1944:                                             ; preds = %1835, %1938
  %1945 = phi i64 [ %1848, %1938 ], [ 0, %1835 ]
  %1946 = phi i16 [ %1943, %1938 ], [ -1, %1835 ]
  %1947 = and i64 %1945, 4294967295
  %1948 = getelementptr inbounds i16, ptr %1852, i64 %1947
  store i16 %1946, ptr %1948, align 2, !tbaa !45
  %1949 = trunc i64 %1848 to i16
  %1950 = add i16 %1949, 1
  %1951 = sext i32 %1845 to i64
  %1952 = getelementptr inbounds i16, ptr %1303, i64 %1951
  store i16 %1950, ptr %1952, align 2, !tbaa !45
  %1953 = add nsw i32 %1849, 2
  %1954 = add nsw i32 %1953, %1845
  %1955 = ptrtoint ptr %1820 to i64
  %1956 = sub i64 %1955, %649
  %1957 = lshr exact i64 %1956, 1
  %1958 = trunc i64 %1957 to i32
  %1959 = add nsw i32 %1954, 1
  %1960 = sext i32 %1959 to i64
  %1961 = getelementptr i16, ptr %1303, i64 %1960
  %1962 = icmp sgt i32 %1958, 0
  br i1 %1962, label %1963, label %2053

1963:                                             ; preds = %1944
  %1964 = and i64 %1957, 4294967295
  %1965 = icmp ult i64 %1964, 8
  br i1 %1965, label %2009, label %1966

1966:                                             ; preds = %1963
  %1967 = shl nsw i64 %1960, 1
  %1968 = add i64 %1967, %1304
  %1969 = sub i64 %1968, %649
  %1970 = icmp ult i64 %1969, 128
  br i1 %1970, label %2009, label %1971

1971:                                             ; preds = %1966
  %1972 = icmp ult i64 %1964, 64
  br i1 %1972, label %1996, label %1973

1973:                                             ; preds = %1971
  %1974 = and i64 %1957, 63
  %1975 = sub nsw i64 %1964, %1974
  br label %1976

1976:                                             ; preds = %1976, %1973
  %1977 = phi i64 [ 0, %1973 ], [ %1990, %1976 ]
  %1978 = getelementptr inbounds i16, ptr %379, i64 %1977
  %1979 = load <16 x i16>, ptr %1978, align 2, !tbaa !45
  %1980 = getelementptr inbounds i16, ptr %1978, i64 16
  %1981 = load <16 x i16>, ptr %1980, align 2, !tbaa !45
  %1982 = getelementptr inbounds i16, ptr %1978, i64 32
  %1983 = load <16 x i16>, ptr %1982, align 2, !tbaa !45
  %1984 = getelementptr inbounds i16, ptr %1978, i64 48
  %1985 = load <16 x i16>, ptr %1984, align 2, !tbaa !45
  %1986 = getelementptr inbounds i16, ptr %1961, i64 %1977
  store <16 x i16> %1979, ptr %1986, align 2, !tbaa !45
  %1987 = getelementptr inbounds i16, ptr %1986, i64 16
  store <16 x i16> %1981, ptr %1987, align 2, !tbaa !45
  %1988 = getelementptr inbounds i16, ptr %1986, i64 32
  store <16 x i16> %1983, ptr %1988, align 2, !tbaa !45
  %1989 = getelementptr inbounds i16, ptr %1986, i64 48
  store <16 x i16> %1985, ptr %1989, align 2, !tbaa !45
  %1990 = add nuw i64 %1977, 64
  %1991 = icmp eq i64 %1990, %1975
  br i1 %1991, label %1992, label %1976, !llvm.loop !265

1992:                                             ; preds = %1976
  %1993 = icmp eq i64 %1974, 0
  br i1 %1993, label %2047, label %1994

1994:                                             ; preds = %1992
  %1995 = icmp ult i64 %1974, 8
  br i1 %1995, label %2009, label %1996

1996:                                             ; preds = %1971, %1994
  %1997 = phi i64 [ %1975, %1994 ], [ 0, %1971 ]
  %1998 = and i64 %1957, 7
  %1999 = sub nsw i64 %1964, %1998
  br label %2000

2000:                                             ; preds = %2000, %1996
  %2001 = phi i64 [ %1997, %1996 ], [ %2005, %2000 ]
  %2002 = getelementptr inbounds i16, ptr %379, i64 %2001
  %2003 = load <8 x i16>, ptr %2002, align 2, !tbaa !45
  %2004 = getelementptr inbounds i16, ptr %1961, i64 %2001
  store <8 x i16> %2003, ptr %2004, align 2, !tbaa !45
  %2005 = add nuw i64 %2001, 8
  %2006 = icmp eq i64 %2005, %1999
  br i1 %2006, label %2007, label %2000, !llvm.loop !266

2007:                                             ; preds = %2000
  %2008 = icmp eq i64 %1998, 0
  br i1 %2008, label %2047, label %2009

2009:                                             ; preds = %1966, %1963, %1994, %2007
  %2010 = phi i64 [ 0, %1963 ], [ 0, %1966 ], [ %1975, %1994 ], [ %1999, %2007 ]
  %2011 = sub i64 %1957, %2010
  %2012 = xor i64 %2010, -1
  %2013 = add nsw i64 %1964, %2012
  %2014 = and i64 %2011, 3
  %2015 = icmp eq i64 %2014, 0
  br i1 %2015, label %2025, label %2016

2016:                                             ; preds = %2009, %2016
  %2017 = phi i64 [ %2022, %2016 ], [ %2010, %2009 ]
  %2018 = phi i64 [ %2023, %2016 ], [ 0, %2009 ]
  %2019 = getelementptr inbounds i16, ptr %379, i64 %2017
  %2020 = load i16, ptr %2019, align 2, !tbaa !45
  %2021 = getelementptr inbounds i16, ptr %1961, i64 %2017
  store i16 %2020, ptr %2021, align 2, !tbaa !45
  %2022 = add nuw nsw i64 %2017, 1
  %2023 = add i64 %2018, 1
  %2024 = icmp eq i64 %2023, %2014
  br i1 %2024, label %2025, label %2016, !llvm.loop !267

2025:                                             ; preds = %2016, %2009
  %2026 = phi i64 [ %2010, %2009 ], [ %2022, %2016 ]
  %2027 = icmp ult i64 %2013, 3
  br i1 %2027, label %2047, label %2028

2028:                                             ; preds = %2025, %2028
  %2029 = phi i64 [ %2045, %2028 ], [ %2026, %2025 ]
  %2030 = getelementptr inbounds i16, ptr %379, i64 %2029
  %2031 = load i16, ptr %2030, align 2, !tbaa !45
  %2032 = getelementptr inbounds i16, ptr %1961, i64 %2029
  store i16 %2031, ptr %2032, align 2, !tbaa !45
  %2033 = add nuw nsw i64 %2029, 1
  %2034 = getelementptr inbounds i16, ptr %379, i64 %2033
  %2035 = load i16, ptr %2034, align 2, !tbaa !45
  %2036 = getelementptr inbounds i16, ptr %1961, i64 %2033
  store i16 %2035, ptr %2036, align 2, !tbaa !45
  %2037 = add nuw nsw i64 %2029, 2
  %2038 = getelementptr inbounds i16, ptr %379, i64 %2037
  %2039 = load i16, ptr %2038, align 2, !tbaa !45
  %2040 = getelementptr inbounds i16, ptr %1961, i64 %2037
  store i16 %2039, ptr %2040, align 2, !tbaa !45
  %2041 = add nuw nsw i64 %2029, 3
  %2042 = getelementptr inbounds i16, ptr %379, i64 %2041
  %2043 = load i16, ptr %2042, align 2, !tbaa !45
  %2044 = getelementptr inbounds i16, ptr %1961, i64 %2041
  store i16 %2043, ptr %2044, align 2, !tbaa !45
  %2045 = add nuw nsw i64 %2029, 4
  %2046 = icmp eq i64 %2045, %1964
  br i1 %2046, label %2047, label %2028, !llvm.loop !268

2047:                                             ; preds = %2025, %2028, %1992, %2007
  %2048 = shl i64 %1956, 31
  %2049 = add i64 %2048, -4294967296
  %2050 = ashr i64 %2049, 32
  %2051 = getelementptr inbounds i16, ptr %1961, i64 %2050
  %2052 = load i16, ptr %2051, align 2, !tbaa !45
  br label %2053

2053:                                             ; preds = %1944, %2047
  %2054 = phi i64 [ %1957, %2047 ], [ 0, %1944 ]
  %2055 = phi i16 [ %2052, %2047 ], [ -1, %1944 ]
  %2056 = and i64 %2054, 4294967295
  %2057 = getelementptr inbounds i16, ptr %1961, i64 %2056
  store i16 %2055, ptr %2057, align 2, !tbaa !45
  %2058 = trunc i64 %1957 to i16
  %2059 = add i16 %2058, 1
  %2060 = sext i32 %1954 to i64
  %2061 = getelementptr inbounds i16, ptr %1303, i64 %2060
  store i16 %2059, ptr %2061, align 2, !tbaa !45
  %2062 = add nsw i32 %1958, 2
  %2063 = add nsw i32 %2062, %1954
  %2064 = select i1 %146, i32 0, i32 %2063
  store i32 %2064, ptr %17, align 8
  br label %2096

2065:                                             ; preds = %692
  %2066 = load ptr, ptr %12, align 8, !tbaa !47
  %2067 = load i32, ptr %17, align 8, !tbaa !19
  %2068 = add i32 %2067, 1
  %2069 = sext i32 %2068 to i64
  %2070 = getelementptr inbounds i16, ptr %2066, i64 %2069
  %2071 = sext i32 %2067 to i64
  %2072 = getelementptr inbounds i16, ptr %2066, i64 %2071
  %2073 = load i16, ptr %2072, align 2, !tbaa !45
  %2074 = zext i16 %2073 to i32
  %2075 = add i32 %2068, %2074
  %2076 = add nsw i32 %2074, -1
  %2077 = add i32 %2075, 1
  %2078 = sext i32 %2077 to i64
  %2079 = getelementptr inbounds i16, ptr %2066, i64 %2078
  %2080 = sext i32 %2075 to i64
  %2081 = getelementptr inbounds i16, ptr %2066, i64 %2080
  %2082 = load i16, ptr %2081, align 2, !tbaa !45
  %2083 = zext i16 %2082 to i32
  %2084 = add i32 %2077, %2083
  %2085 = add nsw i32 %2083, -1
  %2086 = add i32 %2084, 1
  %2087 = sext i32 %2086 to i64
  %2088 = getelementptr inbounds i16, ptr %2066, i64 %2087
  %2089 = sext i32 %2084 to i64
  %2090 = getelementptr inbounds i16, ptr %2066, i64 %2089
  %2091 = load i16, ptr %2090, align 2, !tbaa !45
  %2092 = zext i16 %2091 to i32
  %2093 = add i32 %2086, %2092
  store i32 %2093, ptr %17, align 8, !tbaa !19
  %2094 = add nsw i32 %2092, -1
  %2095 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2096

2096:                                             ; preds = %2053, %2065
  %2097 = phi i32 [ %2095, %2065 ], [ %1308, %2053 ]
  %2098 = phi i32 [ %2085, %2065 ], [ %1849, %2053 ]
  %2099 = phi ptr [ %2088, %2065 ], [ %1961, %2053 ]
  %2100 = phi i32 [ %2094, %2065 ], [ %1958, %2053 ]
  %2101 = phi ptr [ %2079, %2065 ], [ %1852, %2053 ]
  %2102 = phi i32 [ %2076, %2065 ], [ %1827, %2053 ]
  %2103 = phi ptr [ %2070, %2065 ], [ %1307, %2053 ]
  %2104 = phi i32 [ %674, %2065 ], [ %1265, %2053 ]
  %2105 = phi i32 [ %673, %2065 ], [ %1266, %2053 ]
  %2106 = phi i32 [ %672, %2065 ], [ %1267, %2053 ]
  %2107 = phi i32 [ %671, %2065 ], [ %1268, %2053 ]
  %2108 = phi ptr [ %669, %2065 ], [ %961, %2053 ]
  %2109 = phi ptr [ %668, %2065 ], [ %962, %2053 ]
  %2110 = phi ptr [ %667, %2065 ], [ %963, %2053 ]
  %2111 = icmp eq i32 %2097, 0
  %2112 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2113 = icmp ne i32 %2112, 0
  %2114 = select i1 %2111, i1 true, i1 %2113
  br i1 %2114, label %2119, label %2115

2115:                                             ; preds = %2096
  %2116 = load i8, ptr %699, align 2, !tbaa !52
  %2117 = icmp eq i8 %2116, 1
  %2118 = select i1 %2117, double 1.000000e+00, double -1.000000e+00
  br label %2119

2119:                                             ; preds = %2096, %2115
  %2120 = phi double [ %2118, %2115 ], [ 0.000000e+00, %2096 ]
  %2121 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %677, i32 1
  %2122 = load float, ptr %2121, align 8, !tbaa !81
  %2123 = fpext float %2122 to double
  %2124 = fmul double %2123, 0x4074C104816F0069
  %2125 = fmul double %32, %2124
  %2126 = fmul double %28, %2125
  %2127 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %677, i32 2
  %2128 = load i16, ptr %2127, align 4, !tbaa !82
  %2129 = sext i16 %2128 to i32
  %2130 = load ptr, ptr %650, align 8, !tbaa !83
  %2131 = load i32, ptr %651, align 8, !tbaa !85
  %2132 = shl nsw i32 %2129, 1
  %2133 = mul i32 %2132, %2131
  %2134 = zext i32 %2133 to i64
  %2135 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2130, i64 %2134
  %2136 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2137 = extractelement <2 x double> %695, i64 0
  %2138 = extractelement <2 x double> %695, i64 1
  %2139 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2136, double noundef %2137, double noundef %2138, double noundef %698, ptr noundef %45, ptr noundef nonnull %2103, i32 noundef %2102, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2140 = icmp sgt i32 %2139, 0
  br i1 %2140, label %2141, label %2337

2141:                                             ; preds = %2119
  %2142 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2143 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2144 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2145 = mul nsw i32 %2144, %701
  %2146 = mul i32 %2143, 3
  %2147 = mul nsw i32 %713, 3
  %2148 = sext i32 %2147 to i64
  %2149 = add nsw i32 %2147, 1
  %2150 = sext i32 %2149 to i64
  %2151 = add nsw i32 %2147, 2
  %2152 = sext i32 %2151 to i64
  %2153 = zext i32 %2139 to i64
  br label %2154

2154:                                             ; preds = %2141, %2154
  %2155 = phi i64 [ 0, %2141 ], [ %2335, %2154 ]
  %2156 = phi double [ 0.000000e+00, %2141 ], [ %2280, %2154 ]
  %2157 = phi <2 x double> [ zeroinitializer, %2141 ], [ %2276, %2154 ]
  %2158 = phi <2 x double> [ %676, %2141 ], [ %2259, %2154 ]
  %2159 = shl nuw nsw i64 %2155, 1
  %2160 = getelementptr inbounds i32, ptr %145, i64 %2159
  %2161 = load i32, ptr %2160, align 4, !tbaa !5
  %2162 = ashr i32 %2161, 14
  %2163 = add nsw i32 %2162, %38
  %2164 = getelementptr inbounds i16, ptr %98, i64 %2155
  %2165 = load i16, ptr %2164, align 2, !tbaa !45
  %2166 = zext i16 %2165 to i64
  %2167 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2166
  %2168 = getelementptr inbounds double, ptr %144, i64 %2155
  %2169 = load double, ptr %2168, align 8, !tbaa !15
  %2170 = sext i32 %2163 to i64
  %2171 = getelementptr inbounds double, ptr %2142, i64 %2170
  %2172 = load double, ptr %2171, align 8, !tbaa !15
  %2173 = fsub double %2169, %2172
  %2174 = shl nsw i32 %2163, 4
  %2175 = sext i32 %2174 to i64
  %2176 = getelementptr inbounds double, ptr %31, i64 %2175
  %2177 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2166, i32 2
  %2178 = load i16, ptr %2177, align 4, !tbaa !82
  %2179 = sext i16 %2178 to i32
  %2180 = shl nsw i32 %2179, 1
  %2181 = sext i32 %2180 to i64
  %2182 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2135, i64 %2181
  %2183 = getelementptr inbounds %class.Vector, ptr %629, i64 %2166
  %2184 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2166, i32 1
  %2185 = load float, ptr %2184, align 8, !tbaa !81
  %2186 = fpext float %2185 to double
  %2187 = fmul double %2126, %2186
  %2188 = getelementptr inbounds %class.Vector, ptr %2167, i64 0, i32 2
  %2189 = load double, ptr %2188, align 8, !tbaa !50
  %2190 = fsub double %698, %2189
  %2191 = load double, ptr %2182, align 8, !tbaa !86
  %2192 = fmul double %32, %2191
  %2193 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2135, i64 %2181, i32 1
  %2194 = load double, ptr %2193, align 8, !tbaa !88
  %2195 = load double, ptr %2176, align 8, !tbaa !15
  %2196 = getelementptr inbounds double, ptr %2176, i64 2
  %2197 = load double, ptr %2196, align 8, !tbaa !15
  %2198 = fmul double %2194, %652
  %2199 = fmul double %2198, %2197
  %2200 = tail call double @llvm.fmuladd.f64(double %2192, double %2195, double %2199)
  %2201 = getelementptr inbounds double, ptr %2176, i64 1
  %2202 = load double, ptr %2201, align 8, !tbaa !15
  %2203 = getelementptr inbounds double, ptr %2176, i64 3
  %2204 = load double, ptr %2203, align 8, !tbaa !15
  %2205 = fmul double %2198, %2204
  %2206 = tail call double @llvm.fmuladd.f64(double %2192, double %2202, double %2205)
  %2207 = getelementptr inbounds double, ptr %2176, i64 4
  %2208 = load double, ptr %2207, align 8, !tbaa !15
  %2209 = getelementptr inbounds double, ptr %2176, i64 6
  %2210 = load double, ptr %2209, align 8, !tbaa !15
  %2211 = fmul double %2198, %2210
  %2212 = tail call double @llvm.fmuladd.f64(double %2192, double %2208, double %2211)
  %2213 = getelementptr inbounds double, ptr %2176, i64 5
  %2214 = load double, ptr %2213, align 8, !tbaa !15
  %2215 = getelementptr inbounds double, ptr %2176, i64 7
  %2216 = load double, ptr %2215, align 8, !tbaa !15
  %2217 = fmul double %2198, %2216
  %2218 = tail call double @llvm.fmuladd.f64(double %2192, double %2214, double %2217)
  %2219 = tail call double @llvm.fmuladd.f64(double %2173, double %2200, double %2206)
  %2220 = tail call double @llvm.fmuladd.f64(double %2219, double %2173, double %2212)
  %2221 = fmul double %2120, %2220
  %2222 = load double, ptr %654, align 8, !tbaa !15
  %2223 = tail call double @llvm.fmuladd.f64(double %2221, double %2190, double %2222)
  %2224 = getelementptr inbounds double, ptr %2176, i64 8
  %2225 = getelementptr inbounds double, ptr %2176, i64 9
  %2226 = getelementptr inbounds double, ptr %2176, i64 10
  %2227 = getelementptr inbounds double, ptr %2176, i64 11
  %2228 = load double, ptr %656, align 8, !tbaa !15
  %2229 = load <2 x double>, ptr %2167, align 8, !tbaa !15
  %2230 = fsub <2 x double> %695, %2229
  %2231 = load <2 x double>, ptr %653, align 8, !tbaa !15
  %2232 = insertelement <2 x double> poison, double %2221, i64 0
  %2233 = shufflevector <2 x double> %2232, <2 x double> poison, <2 x i32> zeroinitializer
  %2234 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2233, <2 x double> %2230, <2 x double> %2231)
  store <2 x double> %2234, ptr %653, align 8, !tbaa !15
  store double %2223, ptr %654, align 8, !tbaa !15
  %2235 = load double, ptr %2224, align 8, !tbaa !15
  %2236 = load double, ptr %2225, align 8, !tbaa !15
  %2237 = load double, ptr %2226, align 8, !tbaa !15
  %2238 = load double, ptr %2227, align 8, !tbaa !15
  %2239 = fmul double %2187, %2235
  %2240 = fmul double %2187, %2236
  %2241 = fmul double %2187, %2237
  %2242 = fmul double %2187, %2238
  %2243 = insertelement <2 x double> poison, double %2173, i64 0
  %2244 = shufflevector <2 x double> %2243, <2 x double> poison, <2 x i32> zeroinitializer
  %2245 = insertelement <2 x double> poison, double %2239, i64 0
  %2246 = insertelement <2 x double> %2245, double %2200, i64 1
  %2247 = fmul <2 x double> %2244, %2246
  %2248 = insertelement <2 x double> poison, double %2240, i64 0
  %2249 = insertelement <2 x double> %2248, double %2206, i64 1
  %2250 = fmul <2 x double> %2249, <double 2.500000e-01, double 2.500000e-01>
  %2251 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2247, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2250)
  %2252 = insertelement <2 x double> poison, double %2241, i64 0
  %2253 = insertelement <2 x double> %2252, double %2212, i64 1
  %2254 = fmul <2 x double> %2253, <double 5.000000e-01, double 5.000000e-01>
  %2255 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2251, <2 x double> %2244, <2 x double> %2254)
  %2256 = insertelement <2 x double> poison, double %2242, i64 0
  %2257 = insertelement <2 x double> %2256, double %2218, i64 1
  %2258 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2255, <2 x double> %2244, <2 x double> %2257)
  %2259 = fsub <2 x double> %2158, %2258
  %2260 = tail call double @llvm.fmuladd.f64(double %2173, double %2239, double %2240)
  %2261 = tail call double @llvm.fmuladd.f64(double %2260, double %2173, double %2241)
  %2262 = fmul double %2120, %2261
  %2263 = load <2 x double>, ptr %655, align 8, !tbaa !15
  %2264 = insertelement <2 x double> poison, double %2262, i64 0
  %2265 = shufflevector <2 x double> %2264, <2 x double> poison, <2 x i32> zeroinitializer
  %2266 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2265, <2 x double> %2230, <2 x double> %2263)
  store <2 x double> %2266, ptr %655, align 8, !tbaa !15
  %2267 = tail call double @llvm.fmuladd.f64(double %2262, double %2190, double %2228)
  store double %2267, ptr %656, align 8, !tbaa !15
  %2268 = fadd double %2200, %2239
  %2269 = fadd double %2206, %2240
  %2270 = fadd double %2212, %2241
  %2271 = tail call double @llvm.fmuladd.f64(double %2173, double %2268, double %2269)
  %2272 = tail call double @llvm.fmuladd.f64(double %2271, double %2173, double %2270)
  %2273 = insertelement <2 x double> poison, double %2272, i64 0
  %2274 = shufflevector <2 x double> %2273, <2 x double> poison, <2 x i32> zeroinitializer
  %2275 = fmul <2 x double> %2230, %2274
  %2276 = fadd <2 x double> %2157, %2275
  %2277 = load <2 x double>, ptr %2183, align 8, !tbaa !15
  %2278 = fsub <2 x double> %2277, %2275
  store <2 x double> %2278, ptr %2183, align 8, !tbaa !15
  %2279 = fmul double %2190, %2272
  %2280 = fadd double %2156, %2279
  %2281 = getelementptr inbounds %class.Vector, ptr %629, i64 %2166, i32 2
  %2282 = load double, ptr %2281, align 8, !tbaa !89
  %2283 = fsub double %2282, %2279
  store double %2283, ptr %2281, align 8, !tbaa !89
  %2284 = load double, ptr %2188, align 8, !tbaa !50
  %2285 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2286 = fsub double %2284, %2285
  %2287 = fmul double %10, %2286
  %2288 = tail call double @llvm.floor.f64(double %2287)
  %2289 = fptosi double %2288 to i32
  %2290 = icmp slt i32 %2289, 0
  %2291 = select i1 %2290, i32 %2143, i32 0
  %2292 = icmp sgt i32 %2143, %2289
  %2293 = select i1 %2292, i32 0, i32 %2143
  %2294 = sub i32 %2289, %2293
  %2295 = add i32 %2294, %2291
  %2296 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2166, i32 3
  %2297 = load i8, ptr %2296, align 2, !tbaa !52
  %2298 = zext i8 %2297 to i32
  %2299 = fmul <2 x double> %2230, %2275
  %2300 = extractelement <2 x double> %2299, i64 0
  %2301 = fmul <2 x double> %2230, %2275
  %2302 = extractelement <2 x double> %2301, i64 1
  %2303 = fmul double %2190, %2279
  %2304 = add nsw i32 %2145, %2298
  %2305 = mul i32 %2146, %2304
  %2306 = sext i32 %2305 to i64
  %2307 = getelementptr inbounds double, ptr %8, i64 %2306
  %2308 = fmul double %2300, 5.000000e-01
  %2309 = fmul double %2302, 5.000000e-01
  %2310 = fmul double %2303, 5.000000e-01
  %2311 = getelementptr inbounds double, ptr %2307, i64 %2148
  %2312 = load double, ptr %2311, align 8, !tbaa !15
  %2313 = fadd double %2308, %2312
  store double %2313, ptr %2311, align 8, !tbaa !15
  %2314 = getelementptr inbounds double, ptr %2307, i64 %2150
  %2315 = load double, ptr %2314, align 8, !tbaa !15
  %2316 = fadd double %2309, %2315
  store double %2316, ptr %2314, align 8, !tbaa !15
  %2317 = getelementptr inbounds double, ptr %2307, i64 %2152
  %2318 = load double, ptr %2317, align 8, !tbaa !15
  %2319 = fadd double %2310, %2318
  store double %2319, ptr %2317, align 8, !tbaa !15
  %2320 = mul nsw i32 %2295, 3
  %2321 = sext i32 %2320 to i64
  %2322 = getelementptr inbounds double, ptr %2307, i64 %2321
  %2323 = load double, ptr %2322, align 8, !tbaa !15
  %2324 = fadd double %2308, %2323
  store double %2324, ptr %2322, align 8, !tbaa !15
  %2325 = add nsw i32 %2320, 1
  %2326 = sext i32 %2325 to i64
  %2327 = getelementptr inbounds double, ptr %2307, i64 %2326
  %2328 = load double, ptr %2327, align 8, !tbaa !15
  %2329 = fadd double %2309, %2328
  store double %2329, ptr %2327, align 8, !tbaa !15
  %2330 = add nsw i32 %2320, 2
  %2331 = sext i32 %2330 to i64
  %2332 = getelementptr inbounds double, ptr %2307, i64 %2331
  %2333 = load double, ptr %2332, align 8, !tbaa !15
  %2334 = fadd double %2310, %2333
  store double %2334, ptr %2332, align 8, !tbaa !15
  %2335 = add nuw nsw i64 %2155, 1
  %2336 = icmp eq i64 %2335, %2153
  br i1 %2336, label %2337, label %2154

2337:                                             ; preds = %2154, %2119
  %2338 = phi double [ 0.000000e+00, %2119 ], [ %2280, %2154 ]
  %2339 = phi <2 x double> [ zeroinitializer, %2119 ], [ %2276, %2154 ]
  %2340 = phi <2 x double> [ %676, %2119 ], [ %2259, %2154 ]
  %2341 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2342 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2341, double noundef %2137, double noundef %2138, double noundef %698, ptr noundef %45, ptr noundef %2099, i32 noundef %2100, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2343 = add nsw i32 %2342, %665
  %2344 = icmp sgt i32 %2342, 0
  br i1 %2344, label %2345, label %2554

2345:                                             ; preds = %2337
  %2346 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2347 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2348 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2349 = mul nsw i32 %2348, %701
  %2350 = mul i32 %2347, 3
  %2351 = mul nsw i32 %713, 3
  %2352 = sext i32 %2351 to i64
  %2353 = add nsw i32 %2351, 1
  %2354 = sext i32 %2353 to i64
  %2355 = add nsw i32 %2351, 2
  %2356 = sext i32 %2355 to i64
  %2357 = zext i32 %2342 to i64
  br label %2358

2358:                                             ; preds = %2345, %2358
  %2359 = phi i64 [ 0, %2345 ], [ %2552, %2358 ]
  %2360 = phi double [ %2338, %2345 ], [ %2497, %2358 ]
  %2361 = phi <2 x double> [ %2339, %2345 ], [ %2493, %2358 ]
  %2362 = phi <2 x double> [ %2340, %2345 ], [ %2476, %2358 ]
  %2363 = shl nuw nsw i64 %2359, 1
  %2364 = getelementptr inbounds i32, ptr %145, i64 %2363
  %2365 = load i32, ptr %2364, align 4, !tbaa !5
  %2366 = ashr i32 %2365, 14
  %2367 = add nsw i32 %2366, %38
  %2368 = getelementptr inbounds i16, ptr %98, i64 %2359
  %2369 = load i16, ptr %2368, align 2, !tbaa !45
  %2370 = zext i16 %2369 to i64
  %2371 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2370
  %2372 = getelementptr inbounds double, ptr %144, i64 %2359
  %2373 = load double, ptr %2372, align 8, !tbaa !15
  %2374 = sext i32 %2367 to i64
  %2375 = getelementptr inbounds double, ptr %2346, i64 %2374
  %2376 = load double, ptr %2375, align 8, !tbaa !15
  %2377 = fsub double %2373, %2376
  %2378 = shl nsw i32 %2367, 4
  %2379 = sext i32 %2378 to i64
  %2380 = getelementptr inbounds double, ptr %31, i64 %2379
  %2381 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2370, i32 2
  %2382 = load i16, ptr %2381, align 4, !tbaa !82
  %2383 = sext i16 %2382 to i32
  %2384 = shl nsw i32 %2383, 1
  %2385 = sext i32 %2384 to i64
  %2386 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2135, i64 %2385
  %2387 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2386, i64 1
  %2388 = getelementptr inbounds %class.Vector, ptr %629, i64 %2370
  %2389 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2370, i32 1
  %2390 = load float, ptr %2389, align 8, !tbaa !81
  %2391 = fpext float %2390 to double
  %2392 = fmul double %2126, %2391
  %2393 = getelementptr inbounds %class.Vector, ptr %2371, i64 0, i32 2
  %2394 = load double, ptr %2393, align 8, !tbaa !50
  %2395 = fsub double %698, %2394
  %2396 = load double, ptr %2387, align 8, !tbaa !86
  %2397 = fmul double %32, %2396
  %2398 = getelementptr inbounds %"struct.LJTable::TableEntry", ptr %2386, i64 1, i32 1
  %2399 = load double, ptr %2398, align 8, !tbaa !88
  %2400 = load double, ptr %2380, align 8, !tbaa !15
  %2401 = getelementptr inbounds double, ptr %2380, i64 2
  %2402 = load double, ptr %2401, align 8, !tbaa !15
  %2403 = fmul double %2399, %652
  %2404 = fmul double %2403, %2402
  %2405 = tail call double @llvm.fmuladd.f64(double %2397, double %2400, double %2404)
  %2406 = getelementptr inbounds double, ptr %2380, i64 1
  %2407 = load double, ptr %2406, align 8, !tbaa !15
  %2408 = getelementptr inbounds double, ptr %2380, i64 3
  %2409 = load double, ptr %2408, align 8, !tbaa !15
  %2410 = fmul double %2403, %2409
  %2411 = tail call double @llvm.fmuladd.f64(double %2397, double %2407, double %2410)
  %2412 = getelementptr inbounds double, ptr %2380, i64 4
  %2413 = load double, ptr %2412, align 8, !tbaa !15
  %2414 = getelementptr inbounds double, ptr %2380, i64 6
  %2415 = load double, ptr %2414, align 8, !tbaa !15
  %2416 = fmul double %2403, %2415
  %2417 = tail call double @llvm.fmuladd.f64(double %2397, double %2413, double %2416)
  %2418 = getelementptr inbounds double, ptr %2380, i64 5
  %2419 = load double, ptr %2418, align 8, !tbaa !15
  %2420 = getelementptr inbounds double, ptr %2380, i64 7
  %2421 = load double, ptr %2420, align 8, !tbaa !15
  %2422 = fmul double %2403, %2421
  %2423 = tail call double @llvm.fmuladd.f64(double %2397, double %2419, double %2422)
  %2424 = tail call double @llvm.fmuladd.f64(double %2377, double %2405, double %2411)
  %2425 = tail call double @llvm.fmuladd.f64(double %2424, double %2377, double %2417)
  %2426 = fmul double %2120, %2425
  %2427 = load double, ptr %654, align 8, !tbaa !15
  %2428 = tail call double @llvm.fmuladd.f64(double %2426, double %2395, double %2427)
  %2429 = getelementptr inbounds double, ptr %2380, i64 8
  %2430 = getelementptr inbounds double, ptr %2380, i64 9
  %2431 = getelementptr inbounds double, ptr %2380, i64 10
  %2432 = getelementptr inbounds double, ptr %2380, i64 11
  %2433 = getelementptr inbounds double, ptr %2380, i64 12
  %2434 = getelementptr inbounds double, ptr %2380, i64 13
  %2435 = getelementptr inbounds double, ptr %2380, i64 14
  %2436 = getelementptr inbounds double, ptr %2380, i64 15
  %2437 = load double, ptr %656, align 8, !tbaa !15
  %2438 = load <2 x double>, ptr %2371, align 8, !tbaa !15
  %2439 = fsub <2 x double> %695, %2438
  %2440 = load <2 x double>, ptr %653, align 8, !tbaa !15
  %2441 = insertelement <2 x double> poison, double %2426, i64 0
  %2442 = shufflevector <2 x double> %2441, <2 x double> poison, <2 x i32> zeroinitializer
  %2443 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2442, <2 x double> %2439, <2 x double> %2440)
  store <2 x double> %2443, ptr %653, align 8, !tbaa !15
  store double %2428, ptr %654, align 8, !tbaa !15
  %2444 = load double, ptr %2429, align 8, !tbaa !15
  %2445 = load double, ptr %2430, align 8, !tbaa !15
  %2446 = load double, ptr %2431, align 8, !tbaa !15
  %2447 = load double, ptr %2432, align 8, !tbaa !15
  %2448 = load double, ptr %2433, align 8, !tbaa !15
  %2449 = tail call double @llvm.fmuladd.f64(double %657, double %2448, double %2444)
  %2450 = load double, ptr %2434, align 8, !tbaa !15
  %2451 = tail call double @llvm.fmuladd.f64(double %657, double %2450, double %2445)
  %2452 = load double, ptr %2435, align 8, !tbaa !15
  %2453 = tail call double @llvm.fmuladd.f64(double %657, double %2452, double %2446)
  %2454 = load double, ptr %2436, align 8, !tbaa !15
  %2455 = tail call double @llvm.fmuladd.f64(double %657, double %2454, double %2447)
  %2456 = fmul double %2392, %2449
  %2457 = fmul double %2392, %2451
  %2458 = fmul double %2392, %2453
  %2459 = fmul double %2392, %2455
  %2460 = insertelement <2 x double> poison, double %2377, i64 0
  %2461 = shufflevector <2 x double> %2460, <2 x double> poison, <2 x i32> zeroinitializer
  %2462 = insertelement <2 x double> poison, double %2456, i64 0
  %2463 = insertelement <2 x double> %2462, double %2405, i64 1
  %2464 = fmul <2 x double> %2461, %2463
  %2465 = insertelement <2 x double> poison, double %2457, i64 0
  %2466 = insertelement <2 x double> %2465, double %2411, i64 1
  %2467 = fmul <2 x double> %2466, <double 2.500000e-01, double 2.500000e-01>
  %2468 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2464, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %2467)
  %2469 = insertelement <2 x double> poison, double %2458, i64 0
  %2470 = insertelement <2 x double> %2469, double %2417, i64 1
  %2471 = fmul <2 x double> %2470, <double 5.000000e-01, double 5.000000e-01>
  %2472 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2468, <2 x double> %2461, <2 x double> %2471)
  %2473 = insertelement <2 x double> poison, double %2459, i64 0
  %2474 = insertelement <2 x double> %2473, double %2423, i64 1
  %2475 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2472, <2 x double> %2461, <2 x double> %2474)
  %2476 = fsub <2 x double> %2362, %2475
  %2477 = tail call double @llvm.fmuladd.f64(double %2377, double %2456, double %2457)
  %2478 = tail call double @llvm.fmuladd.f64(double %2477, double %2377, double %2458)
  %2479 = fmul double %2120, %2478
  %2480 = load <2 x double>, ptr %655, align 8, !tbaa !15
  %2481 = insertelement <2 x double> poison, double %2479, i64 0
  %2482 = shufflevector <2 x double> %2481, <2 x double> poison, <2 x i32> zeroinitializer
  %2483 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2482, <2 x double> %2439, <2 x double> %2480)
  store <2 x double> %2483, ptr %655, align 8, !tbaa !15
  %2484 = tail call double @llvm.fmuladd.f64(double %2479, double %2395, double %2437)
  store double %2484, ptr %656, align 8, !tbaa !15
  %2485 = fadd double %2405, %2456
  %2486 = fadd double %2411, %2457
  %2487 = fadd double %2417, %2458
  %2488 = tail call double @llvm.fmuladd.f64(double %2377, double %2485, double %2486)
  %2489 = tail call double @llvm.fmuladd.f64(double %2488, double %2377, double %2487)
  %2490 = insertelement <2 x double> poison, double %2489, i64 0
  %2491 = shufflevector <2 x double> %2490, <2 x double> poison, <2 x i32> zeroinitializer
  %2492 = fmul <2 x double> %2439, %2491
  %2493 = fadd <2 x double> %2361, %2492
  %2494 = load <2 x double>, ptr %2388, align 8, !tbaa !15
  %2495 = fsub <2 x double> %2494, %2492
  store <2 x double> %2495, ptr %2388, align 8, !tbaa !15
  %2496 = fmul double %2395, %2489
  %2497 = fadd double %2360, %2496
  %2498 = getelementptr inbounds %class.Vector, ptr %629, i64 %2370, i32 2
  %2499 = load double, ptr %2498, align 8, !tbaa !89
  %2500 = fsub double %2499, %2496
  store double %2500, ptr %2498, align 8, !tbaa !89
  %2501 = load double, ptr %2393, align 8, !tbaa !50
  %2502 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2503 = fsub double %2501, %2502
  %2504 = fmul double %10, %2503
  %2505 = tail call double @llvm.floor.f64(double %2504)
  %2506 = fptosi double %2505 to i32
  %2507 = icmp slt i32 %2506, 0
  %2508 = select i1 %2507, i32 %2347, i32 0
  %2509 = icmp sgt i32 %2347, %2506
  %2510 = select i1 %2509, i32 0, i32 %2347
  %2511 = sub i32 %2506, %2510
  %2512 = add i32 %2511, %2508
  %2513 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2370, i32 3
  %2514 = load i8, ptr %2513, align 2, !tbaa !52
  %2515 = zext i8 %2514 to i32
  %2516 = fmul <2 x double> %2439, %2492
  %2517 = extractelement <2 x double> %2516, i64 0
  %2518 = fmul <2 x double> %2439, %2492
  %2519 = extractelement <2 x double> %2518, i64 1
  %2520 = fmul double %2395, %2496
  %2521 = add nsw i32 %2349, %2515
  %2522 = mul i32 %2350, %2521
  %2523 = sext i32 %2522 to i64
  %2524 = getelementptr inbounds double, ptr %8, i64 %2523
  %2525 = fmul double %2517, 5.000000e-01
  %2526 = fmul double %2519, 5.000000e-01
  %2527 = fmul double %2520, 5.000000e-01
  %2528 = getelementptr inbounds double, ptr %2524, i64 %2352
  %2529 = load double, ptr %2528, align 8, !tbaa !15
  %2530 = fadd double %2525, %2529
  store double %2530, ptr %2528, align 8, !tbaa !15
  %2531 = getelementptr inbounds double, ptr %2524, i64 %2354
  %2532 = load double, ptr %2531, align 8, !tbaa !15
  %2533 = fadd double %2526, %2532
  store double %2533, ptr %2531, align 8, !tbaa !15
  %2534 = getelementptr inbounds double, ptr %2524, i64 %2356
  %2535 = load double, ptr %2534, align 8, !tbaa !15
  %2536 = fadd double %2527, %2535
  store double %2536, ptr %2534, align 8, !tbaa !15
  %2537 = mul nsw i32 %2512, 3
  %2538 = sext i32 %2537 to i64
  %2539 = getelementptr inbounds double, ptr %2524, i64 %2538
  %2540 = load double, ptr %2539, align 8, !tbaa !15
  %2541 = fadd double %2525, %2540
  store double %2541, ptr %2539, align 8, !tbaa !15
  %2542 = add nsw i32 %2537, 1
  %2543 = sext i32 %2542 to i64
  %2544 = getelementptr inbounds double, ptr %2524, i64 %2543
  %2545 = load double, ptr %2544, align 8, !tbaa !15
  %2546 = fadd double %2526, %2545
  store double %2546, ptr %2544, align 8, !tbaa !15
  %2547 = add nsw i32 %2537, 2
  %2548 = sext i32 %2547 to i64
  %2549 = getelementptr inbounds double, ptr %2524, i64 %2548
  %2550 = load double, ptr %2549, align 8, !tbaa !15
  %2551 = fadd double %2527, %2550
  store double %2551, ptr %2549, align 8, !tbaa !15
  %2552 = add nuw nsw i64 %2359, 1
  %2553 = icmp eq i64 %2552, %2357
  br i1 %2553, label %2554, label %2358

2554:                                             ; preds = %2358, %2337
  %2555 = phi double [ %2338, %2337 ], [ %2497, %2358 ]
  %2556 = phi <2 x double> [ %2339, %2337 ], [ %2493, %2358 ]
  %2557 = phi <2 x double> [ %2340, %2337 ], [ %2476, %2358 ]
  %2558 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2559 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2558, double noundef %2137, double noundef %2138, double noundef %698, ptr noundef %45, ptr noundef %2101, i32 noundef %2098, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2560 = add nsw i32 %2343, %2559
  %2561 = icmp sgt i32 %2559, 0
  %2562 = extractelement <2 x double> %2557, i64 0
  br i1 %2561, label %2563, label %2713

2563:                                             ; preds = %2554
  %2564 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2565 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2566 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2567 = mul nsw i32 %2566, %701
  %2568 = mul i32 %2565, 3
  %2569 = mul nsw i32 %713, 3
  %2570 = sext i32 %2569 to i64
  %2571 = add nsw i32 %2569, 1
  %2572 = sext i32 %2571 to i64
  %2573 = add nsw i32 %2569, 2
  %2574 = sext i32 %2573 to i64
  %2575 = zext i32 %2559 to i64
  br label %2576

2576:                                             ; preds = %2563, %2576
  %2577 = phi i64 [ 0, %2563 ], [ %2711, %2576 ]
  %2578 = phi double [ %2562, %2563 ], [ %2637, %2576 ]
  %2579 = phi double [ %2555, %2563 ], [ %2656, %2576 ]
  %2580 = phi <2 x double> [ %2556, %2563 ], [ %2652, %2576 ]
  %2581 = shl nuw nsw i64 %2577, 1
  %2582 = getelementptr inbounds i32, ptr %145, i64 %2581
  %2583 = load i32, ptr %2582, align 4, !tbaa !5
  %2584 = ashr i32 %2583, 14
  %2585 = add nsw i32 %2584, %38
  %2586 = getelementptr inbounds i16, ptr %98, i64 %2577
  %2587 = load i16, ptr %2586, align 2, !tbaa !45
  %2588 = zext i16 %2587 to i64
  %2589 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2588
  %2590 = getelementptr inbounds double, ptr %144, i64 %2577
  %2591 = load double, ptr %2590, align 8, !tbaa !15
  %2592 = sext i32 %2585 to i64
  %2593 = getelementptr inbounds double, ptr %2564, i64 %2592
  %2594 = load double, ptr %2593, align 8, !tbaa !15
  %2595 = fsub double %2591, %2594
  %2596 = shl nsw i32 %2585, 4
  %2597 = sext i32 %2596 to i64
  %2598 = getelementptr inbounds double, ptr %31, i64 %2597
  %2599 = getelementptr inbounds %class.Vector, ptr %629, i64 %2588
  %2600 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2588, i32 1
  %2601 = load float, ptr %2600, align 8, !tbaa !81
  %2602 = fpext float %2601 to double
  %2603 = fmul double %2126, %2602
  %2604 = getelementptr inbounds %class.Vector, ptr %2589, i64 0, i32 2
  %2605 = load double, ptr %2604, align 8, !tbaa !50
  %2606 = fsub double %698, %2605
  %2607 = getelementptr inbounds double, ptr %2598, i64 8
  %2608 = load double, ptr %2607, align 8, !tbaa !15
  %2609 = getelementptr inbounds double, ptr %2598, i64 9
  %2610 = load double, ptr %2609, align 8, !tbaa !15
  %2611 = getelementptr inbounds double, ptr %2598, i64 10
  %2612 = load double, ptr %2611, align 8, !tbaa !15
  %2613 = getelementptr inbounds double, ptr %2598, i64 11
  %2614 = load double, ptr %2613, align 8, !tbaa !15
  %2615 = getelementptr inbounds double, ptr %2598, i64 12
  %2616 = load double, ptr %2615, align 8, !tbaa !15
  %2617 = fsub double %2608, %2616
  %2618 = getelementptr inbounds double, ptr %2598, i64 13
  %2619 = load double, ptr %2618, align 8, !tbaa !15
  %2620 = fsub double %2610, %2619
  %2621 = getelementptr inbounds double, ptr %2598, i64 14
  %2622 = load double, ptr %2621, align 8, !tbaa !15
  %2623 = fsub double %2612, %2622
  %2624 = getelementptr inbounds double, ptr %2598, i64 15
  %2625 = load double, ptr %2624, align 8, !tbaa !15
  %2626 = fsub double %2614, %2625
  %2627 = fmul double %2603, %2617
  %2628 = fmul double %2603, %2620
  %2629 = fmul double %2603, %2623
  %2630 = fmul double %2603, %2626
  %2631 = fmul double %2595, %2627
  %2632 = fmul double %2628, 2.500000e-01
  %2633 = tail call double @llvm.fmuladd.f64(double %2631, double 0x3FC5555555555555, double %2632)
  %2634 = fmul double %2629, 5.000000e-01
  %2635 = tail call double @llvm.fmuladd.f64(double %2633, double %2595, double %2634)
  %2636 = tail call double @llvm.fmuladd.f64(double %2635, double %2595, double %2630)
  %2637 = fsub double %2578, %2636
  %2638 = tail call double @llvm.fmuladd.f64(double %2595, double %2627, double %2628)
  %2639 = tail call double @llvm.fmuladd.f64(double %2638, double %2595, double %2629)
  %2640 = fmul double %2120, %2639
  %2641 = load double, ptr %656, align 8, !tbaa !15
  %2642 = tail call double @llvm.fmuladd.f64(double %2640, double %2606, double %2641)
  %2643 = load <2 x double>, ptr %2589, align 8, !tbaa !15
  %2644 = fsub <2 x double> %695, %2643
  %2645 = load <2 x double>, ptr %655, align 8, !tbaa !15
  %2646 = insertelement <2 x double> poison, double %2640, i64 0
  %2647 = shufflevector <2 x double> %2646, <2 x double> poison, <2 x i32> zeroinitializer
  %2648 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2647, <2 x double> %2644, <2 x double> %2645)
  store <2 x double> %2648, ptr %655, align 8, !tbaa !15
  store double %2642, ptr %656, align 8, !tbaa !15
  %2649 = insertelement <2 x double> poison, double %2639, i64 0
  %2650 = shufflevector <2 x double> %2649, <2 x double> poison, <2 x i32> zeroinitializer
  %2651 = fmul <2 x double> %2644, %2650
  %2652 = fadd <2 x double> %2580, %2651
  %2653 = load <2 x double>, ptr %2599, align 8, !tbaa !15
  %2654 = fsub <2 x double> %2653, %2651
  store <2 x double> %2654, ptr %2599, align 8, !tbaa !15
  %2655 = fmul double %2606, %2639
  %2656 = fadd double %2579, %2655
  %2657 = getelementptr inbounds %class.Vector, ptr %629, i64 %2588, i32 2
  %2658 = load double, ptr %2657, align 8, !tbaa !89
  %2659 = fsub double %2658, %2655
  store double %2659, ptr %2657, align 8, !tbaa !89
  %2660 = load double, ptr %2604, align 8, !tbaa !50
  %2661 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2662 = fsub double %2660, %2661
  %2663 = fmul double %10, %2662
  %2664 = tail call double @llvm.floor.f64(double %2663)
  %2665 = fptosi double %2664 to i32
  %2666 = icmp slt i32 %2665, 0
  %2667 = select i1 %2666, i32 %2565, i32 0
  %2668 = icmp sgt i32 %2565, %2665
  %2669 = select i1 %2668, i32 0, i32 %2565
  %2670 = sub i32 %2665, %2669
  %2671 = add i32 %2670, %2667
  %2672 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2588, i32 3
  %2673 = load i8, ptr %2672, align 2, !tbaa !52
  %2674 = zext i8 %2673 to i32
  %2675 = fmul <2 x double> %2644, %2651
  %2676 = extractelement <2 x double> %2675, i64 0
  %2677 = fmul <2 x double> %2644, %2651
  %2678 = extractelement <2 x double> %2677, i64 1
  %2679 = fmul double %2606, %2655
  %2680 = add nsw i32 %2567, %2674
  %2681 = mul i32 %2568, %2680
  %2682 = sext i32 %2681 to i64
  %2683 = getelementptr inbounds double, ptr %8, i64 %2682
  %2684 = fmul double %2676, 5.000000e-01
  %2685 = fmul double %2678, 5.000000e-01
  %2686 = fmul double %2679, 5.000000e-01
  %2687 = getelementptr inbounds double, ptr %2683, i64 %2570
  %2688 = load double, ptr %2687, align 8, !tbaa !15
  %2689 = fadd double %2684, %2688
  store double %2689, ptr %2687, align 8, !tbaa !15
  %2690 = getelementptr inbounds double, ptr %2683, i64 %2572
  %2691 = load double, ptr %2690, align 8, !tbaa !15
  %2692 = fadd double %2685, %2691
  store double %2692, ptr %2690, align 8, !tbaa !15
  %2693 = getelementptr inbounds double, ptr %2683, i64 %2574
  %2694 = load double, ptr %2693, align 8, !tbaa !15
  %2695 = fadd double %2686, %2694
  store double %2695, ptr %2693, align 8, !tbaa !15
  %2696 = mul nsw i32 %2671, 3
  %2697 = sext i32 %2696 to i64
  %2698 = getelementptr inbounds double, ptr %2683, i64 %2697
  %2699 = load double, ptr %2698, align 8, !tbaa !15
  %2700 = fadd double %2684, %2699
  store double %2700, ptr %2698, align 8, !tbaa !15
  %2701 = add nsw i32 %2696, 1
  %2702 = sext i32 %2701 to i64
  %2703 = getelementptr inbounds double, ptr %2683, i64 %2702
  %2704 = load double, ptr %2703, align 8, !tbaa !15
  %2705 = fadd double %2685, %2704
  store double %2705, ptr %2703, align 8, !tbaa !15
  %2706 = add nsw i32 %2696, 2
  %2707 = sext i32 %2706 to i64
  %2708 = getelementptr inbounds double, ptr %2683, i64 %2707
  %2709 = load double, ptr %2708, align 8, !tbaa !15
  %2710 = fadd double %2686, %2709
  store double %2710, ptr %2708, align 8, !tbaa !15
  %2711 = add nuw nsw i64 %2577, 1
  %2712 = icmp eq i64 %2711, %2575
  br i1 %2712, label %2713, label %2576

2713:                                             ; preds = %2576, %2554
  %2714 = phi double [ %2555, %2554 ], [ %2656, %2576 ]
  %2715 = phi double [ %2562, %2554 ], [ %2637, %2576 ]
  %2716 = phi <2 x double> [ %2556, %2554 ], [ %2652, %2576 ]
  %2717 = getelementptr inbounds %class.Vector, ptr %629, i64 %677
  %2718 = load <2 x double>, ptr %2717, align 8, !tbaa !15
  %2719 = fadd <2 x double> %2716, %2718
  store <2 x double> %2719, ptr %2717, align 8, !tbaa !15
  %2720 = getelementptr inbounds %class.Vector, ptr %629, i64 %677, i32 2
  %2721 = load double, ptr %2720, align 8, !tbaa !89
  %2722 = fadd double %2714, %2721
  store double %2722, ptr %2720, align 8, !tbaa !89
  %2723 = insertelement <2 x double> %2557, double %2715, i64 0
  br label %2724

2724:                                             ; preds = %2713, %1315, %1369, %688
  %2725 = phi i32 [ %689, %688 ], [ %693, %2713 ], [ %693, %1315 ], [ %693, %1369 ]
  %2726 = phi i32 [ %674, %688 ], [ %2104, %2713 ], [ %1265, %1315 ], [ %1265, %1369 ]
  %2727 = phi i32 [ %673, %688 ], [ %2105, %2713 ], [ %1266, %1315 ], [ %1266, %1369 ]
  %2728 = phi i32 [ %672, %688 ], [ %2106, %2713 ], [ %1267, %1315 ], [ %1267, %1369 ]
  %2729 = phi i32 [ %671, %688 ], [ %2107, %2713 ], [ %1268, %1315 ], [ %1268, %1369 ]
  %2730 = phi i32 [ %670, %688 ], [ %715, %2713 ], [ %715, %1315 ], [ %715, %1369 ]
  %2731 = phi ptr [ %669, %688 ], [ %2108, %2713 ], [ %961, %1315 ], [ %961, %1369 ]
  %2732 = phi ptr [ %668, %688 ], [ %2109, %2713 ], [ %962, %1315 ], [ %962, %1369 ]
  %2733 = phi ptr [ %667, %688 ], [ %2110, %2713 ], [ %963, %1315 ], [ %963, %1369 ]
  %2734 = phi i32 [ %691, %688 ], [ %666, %2713 ], [ %666, %1315 ], [ %666, %1369 ]
  %2735 = phi i32 [ %665, %688 ], [ %2560, %2713 ], [ %665, %1315 ], [ %665, %1369 ]
  %2736 = phi <2 x double> [ %676, %688 ], [ %2723, %2713 ], [ %676, %1315 ], [ %676, %1369 ]
  %2737 = add nsw i32 %2734, 1
  %2738 = icmp slt i32 %2737, %635
  br i1 %2738, label %664, label %2739

2739:                                             ; preds = %2724, %623
  %2740 = phi ptr [ null, %623 ], [ %2733, %2724 ]
  %2741 = phi i32 [ 0, %623 ], [ %2735, %2724 ]
  %2742 = phi <2 x double> [ zeroinitializer, %623 ], [ %2736, %2724 ]
  %2743 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2744 = load ptr, ptr %2743, align 8, !tbaa !24
  %2745 = icmp sgt i32 %40, 0
  br i1 %2745, label %2746, label %2748

2746:                                             ; preds = %2739
  %2747 = zext i32 %40 to i64
  br label %2774

2748:                                             ; preds = %2774, %2739
  %2749 = phi <4 x double> [ zeroinitializer, %2739 ], [ %2804, %2774 ]
  %2750 = phi <2 x double> [ zeroinitializer, %2739 ], [ %2799, %2774 ]
  %2751 = sitofp i32 %2741 to double
  %2752 = getelementptr inbounds double, ptr %6, i64 22
  %2753 = load double, ptr %2752, align 8, !tbaa !15
  %2754 = fadd double %2753, %2751
  store double %2754, ptr %2752, align 8, !tbaa !15
  %2755 = getelementptr inbounds double, ptr %6, i64 1
  %2756 = load <2 x double>, ptr %2755, align 8, !tbaa !15
  %2757 = fadd <2 x double> %2742, %2756
  store <2 x double> %2757, ptr %2755, align 8, !tbaa !15
  %2758 = getelementptr inbounds double, ptr %6, i64 12
  %2759 = load <4 x double>, ptr %2758, align 8, !tbaa !15
  %2760 = shufflevector <2 x double> %2750, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2761 = shufflevector <4 x double> %2760, <4 x double> %2749, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2762 = shufflevector <4 x double> %2761, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2763 = fadd <4 x double> %2762, %2759
  store <4 x double> %2763, ptr %2758, align 8, !tbaa !15
  %2764 = getelementptr inbounds double, ptr %6, i64 16
  %2765 = load <4 x double>, ptr %2764, align 8, !tbaa !15
  %2766 = shufflevector <4 x double> %2749, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2767 = shufflevector <4 x double> %2766, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2768 = fadd <4 x double> %2767, %2765
  store <4 x double> %2768, ptr %2764, align 8, !tbaa !15
  %2769 = getelementptr inbounds double, ptr %6, i64 20
  %2770 = load double, ptr %2769, align 8, !tbaa !15
  %2771 = extractelement <4 x double> %2749, i64 0
  %2772 = fadd double %2771, %2770
  store double %2772, ptr %2769, align 8, !tbaa !15
  %2773 = icmp eq ptr %2740, null
  br i1 %2773, label %2808, label %2807

2774:                                             ; preds = %2746, %2774
  %2775 = phi i64 [ 0, %2746 ], [ %2805, %2774 ]
  %2776 = phi <4 x double> [ zeroinitializer, %2746 ], [ %2804, %2774 ]
  %2777 = phi <2 x double> [ zeroinitializer, %2746 ], [ %2799, %2774 ]
  %2778 = getelementptr inbounds %class.Vector, ptr %629, i64 %2775
  %2779 = getelementptr inbounds %class.Vector, ptr %2744, i64 %2775
  %2780 = getelementptr inbounds %class.Vector, ptr %629, i64 %2775, i32 1
  %2781 = load <2 x double>, ptr %2778, align 8, !tbaa !15
  %2782 = load <2 x double>, ptr %2779, align 8, !tbaa !15
  %2783 = fadd <2 x double> %2781, %2782
  store <2 x double> %2783, ptr %2779, align 8, !tbaa !15
  %2784 = getelementptr inbounds %class.Vector, ptr %629, i64 %2775, i32 2
  %2785 = load double, ptr %2784, align 8, !tbaa !89
  %2786 = getelementptr inbounds %class.Vector, ptr %2744, i64 %2775, i32 2
  %2787 = load double, ptr %2786, align 8, !tbaa !89
  %2788 = fadd double %2785, %2787
  store double %2788, ptr %2786, align 8, !tbaa !89
  %2789 = load double, ptr %2778, align 8, !tbaa !193
  %2790 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %2775
  %2791 = load double, ptr %2790, align 8, !tbaa !69
  %2792 = getelementptr inbounds %class.Vector, ptr %2790, i64 0, i32 1
  %2793 = load <2 x double>, ptr %2792, align 8, !tbaa !15
  %2794 = shufflevector <2 x double> %2793, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2795 = insertelement <2 x double> poison, double %2789, i64 0
  %2796 = shufflevector <2 x double> %2795, <2 x double> poison, <2 x i32> zeroinitializer
  %2797 = shufflevector <2 x double> %2793, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2798 = insertelement <2 x double> %2797, double %2791, i64 0
  %2799 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2796, <2 x double> %2798, <2 x double> %2777)
  %2800 = load <2 x double>, ptr %2780, align 8, !tbaa !15
  %2801 = shufflevector <2 x double> %2800, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2802 = insertelement <4 x double> %2801, double %2789, i64 3
  %2803 = shufflevector <4 x double> %2802, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2804 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2803, <4 x double> %2794, <4 x double> %2776)
  %2805 = add nuw nsw i64 %2775, 1
  %2806 = icmp eq i64 %2805, %2747
  br i1 %2806, label %2748, label %2774

2807:                                             ; preds = %2748
  tail call void @_ZdaPv(ptr noundef nonnull %2740) #10
  br label %2808

2808:                                             ; preds = %2748, %2807, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil30calc_self_slow_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2635

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %613, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %604

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %604

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %604, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %604

604:                                              ; preds = %472, %535, %597, %594
  %605 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %606 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %607 = load i32, ptr %17, align 8, !tbaa !19
  %608 = add nsw i32 %607, 1
  store i32 %608, ptr %17, align 8, !tbaa !19
  %609 = trunc i32 %40 to i16
  %610 = load ptr, ptr %12, align 8, !tbaa !47
  %611 = sext i32 %607 to i64
  %612 = getelementptr inbounds i16, ptr %610, i64 %611
  store i16 %609, ptr %612, align 2, !tbaa !45
  br label %623

613:                                              ; preds = %469
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  %616 = add nsw i32 %615, 1
  store i32 %616, ptr %17, align 8, !tbaa !19
  %617 = sext i32 %615 to i64
  %618 = getelementptr inbounds i16, ptr %614, i64 %617
  %619 = load i16, ptr %618, align 2, !tbaa !45
  %620 = zext i16 %619 to i32
  %621 = icmp eq i32 %40, %620
  br i1 %621, label %623, label %622

622:                                              ; preds = %613
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %623

623:                                              ; preds = %613, %622, %604
  %624 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %605, %604 ]
  %625 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %606, %604 ]
  %626 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 18, i32 1
  %627 = load ptr, ptr %626, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %627, i32 noundef %40)
  %628 = load ptr, ptr %626, align 8, !tbaa !174
  %629 = load ptr, ptr %628, align 8, !tbaa !176
  %630 = sext i32 %40 to i64
  %631 = mul nsw i64 %630, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %629, i8 0, i64 %631, i1 false)
  %632 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %633 = load i32, ptr %632, align 4, !tbaa !49
  %634 = add nsw i32 %633, -1
  %635 = add nsw i32 %40, -1
  %636 = icmp sgt i32 %40, 1
  br i1 %636, label %637, label %2570

637:                                              ; preds = %623
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  %640 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 1
  %641 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 4
  %642 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 2
  %643 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 3
  %644 = ptrtoint ptr %425 to i64
  %645 = add nsw i32 %42, 10
  %646 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %647 = ptrtoint ptr %471 to i64
  %648 = ptrtoint ptr %333 to i64
  %649 = ptrtoint ptr %379 to i64
  %650 = getelementptr inbounds double, ptr %6, i64 29
  %651 = getelementptr inbounds double, ptr %6, i64 31
  %652 = fmul double %34, 2.000000e+00
  %653 = fmul double %34, 4.000000e+00
  %654 = fmul double %34, 6.000000e+00
  %655 = sext i32 %624 to i64
  %656 = sext i32 %625 to i64
  %657 = insertelement <2 x double> poison, double %27, i64 0
  %658 = shufflevector <2 x double> %657, <2 x double> poison, <2 x i32> zeroinitializer
  %659 = getelementptr inbounds i16, ptr %471, i64 1
  %660 = getelementptr inbounds i16, ptr %471, i64 1
  br label %661

661:                                              ; preds = %637, %2556
  %662 = phi i32 [ 0, %637 ], [ %2567, %2556 ]
  %663 = phi i32 [ 0, %637 ], [ %2568, %2556 ]
  %664 = phi ptr [ null, %637 ], [ %2565, %2556 ]
  %665 = phi ptr [ null, %637 ], [ %2564, %2556 ]
  %666 = phi ptr [ null, %637 ], [ %2563, %2556 ]
  %667 = phi i32 [ 0, %637 ], [ %2562, %2556 ]
  %668 = phi i32 [ 0, %637 ], [ %2561, %2556 ]
  %669 = phi i32 [ 0, %637 ], [ %2560, %2556 ]
  %670 = phi i32 [ 0, %637 ], [ %2559, %2556 ]
  %671 = phi i32 [ 0, %637 ], [ %2558, %2556 ]
  %672 = phi i32 [ %639, %637 ], [ %2557, %2556 ]
  %673 = sext i32 %663 to i64
  %674 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %673
  %675 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %673
  %676 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %673, i32 4
  %677 = load i8, ptr %676, align 1
  %678 = lshr i8 %677, 3
  %679 = and i8 %678, 15
  %680 = zext i8 %679 to i32
  %681 = icmp eq i8 %679, 0
  br i1 %681, label %688, label %682

682:                                              ; preds = %661
  %683 = icmp eq i32 %672, 0
  br i1 %683, label %688, label %684

684:                                              ; preds = %682
  %685 = add nsw i32 %672, -1
  %686 = add nsw i32 %663, -1
  %687 = add i32 %686, %680
  br label %2556

688:                                              ; preds = %682, %661
  %689 = phi i32 [ %672, %661 ], [ %634, %682 ]
  %690 = load <2 x double>, ptr %674, align 8, !tbaa !15
  %691 = fadd <2 x double> %19, %690
  %692 = getelementptr inbounds %class.Vector, ptr %674, i64 0, i32 2
  %693 = load double, ptr %692, align 8, !tbaa !50
  %694 = fadd double %21, %693
  %695 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %673, i32 3
  %696 = load i8, ptr %695, align 2, !tbaa !52
  %697 = zext i8 %696 to i32
  %698 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %699 = fsub double %693, %698
  %700 = fmul double %10, %699
  %701 = tail call double @llvm.floor.f64(double %700)
  %702 = fptosi double %701 to i32
  %703 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %704 = icmp slt i32 %702, 0
  %705 = select i1 %704, i32 %703, i32 0
  %706 = icmp sgt i32 %703, %702
  %707 = select i1 %706, i32 0, i32 %703
  %708 = sub i32 %702, %707
  %709 = add i32 %708, %705
  %710 = add nsw i32 %663, %680
  %711 = select i1 %681, i32 %667, i32 %710
  br i1 %148, label %2061, label %712

712:                                              ; preds = %688
  %713 = load i32, ptr %675, align 4
  %714 = shl i32 %713, 2
  %715 = ashr exact i32 %714, 2
  %716 = load ptr, ptr %640, align 8, !tbaa !53
  %717 = sext i32 %715 to i64
  %718 = getelementptr inbounds %class.ExclusionCheck, ptr %716, i64 %717
  %719 = load i32, ptr %718, align 8, !tbaa !55
  %720 = getelementptr inbounds %class.ExclusionCheck, ptr %716, i64 %717, i32 1
  %721 = load i32, ptr %720, align 4, !tbaa !57
  %722 = getelementptr inbounds %class.ExclusionCheck, ptr %716, i64 %717, i32 2
  %723 = load ptr, ptr %722, align 8, !tbaa !58
  %724 = icmp eq ptr %723, null
  br i1 %724, label %729, label %725

725:                                              ; preds = %712
  %726 = sext i32 %719 to i64
  %727 = sub nsw i64 0, %726
  %728 = getelementptr inbounds i8, ptr %723, i64 %727
  br label %955

729:                                              ; preds = %712
  %730 = icmp eq ptr %664, null
  br i1 %730, label %818, label %731

731:                                              ; preds = %729
  %732 = load i32, ptr %665, align 4, !tbaa !5
  %733 = icmp slt i32 %732, 1
  br i1 %733, label %781, label %734

734:                                              ; preds = %731
  %735 = add nuw i32 %732, 1
  %736 = zext i32 %735 to i64
  %737 = add nsw i64 %736, -1
  %738 = add nsw i64 %736, -2
  %739 = and i64 %737, 3
  %740 = icmp ult i64 %738, 3
  br i1 %740, label %768, label %741

741:                                              ; preds = %734
  %742 = and i64 %737, -4
  br label %743

743:                                              ; preds = %743, %741
  %744 = phi i64 [ 1, %741 ], [ %765, %743 ]
  %745 = phi i64 [ 0, %741 ], [ %766, %743 ]
  %746 = getelementptr inbounds i32, ptr %665, i64 %744
  %747 = load i32, ptr %746, align 4, !tbaa !5
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i8, ptr %664, i64 %748
  store i8 0, ptr %749, align 1, !tbaa !59
  %750 = add nuw nsw i64 %744, 1
  %751 = getelementptr inbounds i32, ptr %665, i64 %750
  %752 = load i32, ptr %751, align 4, !tbaa !5
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i8, ptr %664, i64 %753
  store i8 0, ptr %754, align 1, !tbaa !59
  %755 = add nuw nsw i64 %744, 2
  %756 = getelementptr inbounds i32, ptr %665, i64 %755
  %757 = load i32, ptr %756, align 4, !tbaa !5
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i8, ptr %664, i64 %758
  store i8 0, ptr %759, align 1, !tbaa !59
  %760 = add nuw nsw i64 %744, 3
  %761 = getelementptr inbounds i32, ptr %665, i64 %760
  %762 = load i32, ptr %761, align 4, !tbaa !5
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds i8, ptr %664, i64 %763
  store i8 0, ptr %764, align 1, !tbaa !59
  %765 = add nuw nsw i64 %744, 4
  %766 = add i64 %745, 4
  %767 = icmp eq i64 %766, %742
  br i1 %767, label %768, label %743

768:                                              ; preds = %743, %734
  %769 = phi i64 [ 1, %734 ], [ %765, %743 ]
  %770 = icmp eq i64 %739, 0
  br i1 %770, label %781, label %771

771:                                              ; preds = %768, %771
  %772 = phi i64 [ %778, %771 ], [ %769, %768 ]
  %773 = phi i64 [ %779, %771 ], [ 0, %768 ]
  %774 = getelementptr inbounds i32, ptr %665, i64 %772
  %775 = load i32, ptr %774, align 4, !tbaa !5
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i8, ptr %664, i64 %776
  store i8 0, ptr %777, align 1, !tbaa !59
  %778 = add nuw nsw i64 %772, 1
  %779 = add i64 %773, 1
  %780 = icmp eq i64 %779, %739
  br i1 %780, label %781, label %771, !llvm.loop !269

781:                                              ; preds = %768, %771, %731
  %782 = load i32, ptr %666, align 4, !tbaa !5
  %783 = icmp slt i32 %782, 1
  br i1 %783, label %838, label %784

784:                                              ; preds = %781
  %785 = add nuw i32 %782, 1
  %786 = zext i32 %785 to i64
  %787 = add nsw i64 %786, -1
  %788 = add nsw i64 %786, -2
  %789 = and i64 %787, 3
  %790 = icmp ult i64 %788, 3
  br i1 %790, label %825, label %791

791:                                              ; preds = %784
  %792 = and i64 %787, -4
  br label %793

793:                                              ; preds = %793, %791
  %794 = phi i64 [ 1, %791 ], [ %815, %793 ]
  %795 = phi i64 [ 0, %791 ], [ %816, %793 ]
  %796 = getelementptr inbounds i32, ptr %666, i64 %794
  %797 = load i32, ptr %796, align 4, !tbaa !5
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i8, ptr %664, i64 %798
  store i8 0, ptr %799, align 1, !tbaa !59
  %800 = add nuw nsw i64 %794, 1
  %801 = getelementptr inbounds i32, ptr %666, i64 %800
  %802 = load i32, ptr %801, align 4, !tbaa !5
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i8, ptr %664, i64 %803
  store i8 0, ptr %804, align 1, !tbaa !59
  %805 = add nuw nsw i64 %794, 2
  %806 = getelementptr inbounds i32, ptr %666, i64 %805
  %807 = load i32, ptr %806, align 4, !tbaa !5
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds i8, ptr %664, i64 %808
  store i8 0, ptr %809, align 1, !tbaa !59
  %810 = add nuw nsw i64 %794, 3
  %811 = getelementptr inbounds i32, ptr %666, i64 %810
  %812 = load i32, ptr %811, align 4, !tbaa !5
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i8, ptr %664, i64 %813
  store i8 0, ptr %814, align 1, !tbaa !59
  %815 = add nuw nsw i64 %794, 4
  %816 = add i64 %795, 4
  %817 = icmp eq i64 %816, %792
  br i1 %817, label %825, label %793

818:                                              ; preds = %729
  %819 = load i32, ptr %641, align 8, !tbaa !62
  %820 = tail call i32 @llvm.smax.i32(i32 %819, i32 -1)
  %821 = sext i32 %820 to i64
  %822 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %821) #9
  %823 = load i32, ptr %641, align 8, !tbaa !62
  %824 = sext i32 %823 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %822, i8 0, i64 %824, i1 false)
  br label %838

825:                                              ; preds = %793, %784
  %826 = phi i64 [ 1, %784 ], [ %815, %793 ]
  %827 = icmp eq i64 %789, 0
  br i1 %827, label %838, label %828

828:                                              ; preds = %825, %828
  %829 = phi i64 [ %835, %828 ], [ %826, %825 ]
  %830 = phi i64 [ %836, %828 ], [ 0, %825 ]
  %831 = getelementptr inbounds i32, ptr %666, i64 %829
  %832 = load i32, ptr %831, align 4, !tbaa !5
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds i8, ptr %664, i64 %833
  store i8 0, ptr %834, align 1, !tbaa !59
  %835 = add nuw nsw i64 %829, 1
  %836 = add i64 %830, 1
  %837 = icmp eq i64 %836, %789
  br i1 %837, label %838, label %828, !llvm.loop !270

838:                                              ; preds = %825, %828, %781, %818
  %839 = phi ptr [ %822, %818 ], [ %664, %781 ], [ %664, %828 ], [ %664, %825 ]
  %840 = load i32, ptr %675, align 4
  %841 = shl i32 %840, 2
  %842 = ashr exact i32 %841, 2
  %843 = load ptr, ptr %642, align 8, !tbaa !64
  %844 = sext i32 %842 to i64
  %845 = getelementptr inbounds ptr, ptr %843, i64 %844
  %846 = load ptr, ptr %845, align 8, !tbaa !24
  %847 = load i32, ptr %846, align 4, !tbaa !5
  %848 = icmp slt i32 %847, 1
  br i1 %848, label %901, label %849

849:                                              ; preds = %838
  %850 = add nuw i32 %847, 1
  %851 = zext i32 %850 to i64
  %852 = add nsw i64 %851, -1
  %853 = add nsw i64 %851, -2
  %854 = and i64 %852, 3
  %855 = icmp ult i64 %853, 3
  br i1 %855, label %883, label %856

856:                                              ; preds = %849
  %857 = and i64 %852, -4
  br label %858

858:                                              ; preds = %858, %856
  %859 = phi i64 [ 1, %856 ], [ %880, %858 ]
  %860 = phi i64 [ 0, %856 ], [ %881, %858 ]
  %861 = getelementptr inbounds i32, ptr %846, i64 %859
  %862 = load i32, ptr %861, align 4, !tbaa !5
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i8, ptr %839, i64 %863
  store i8 1, ptr %864, align 1, !tbaa !59
  %865 = add nuw nsw i64 %859, 1
  %866 = getelementptr inbounds i32, ptr %846, i64 %865
  %867 = load i32, ptr %866, align 4, !tbaa !5
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds i8, ptr %839, i64 %868
  store i8 1, ptr %869, align 1, !tbaa !59
  %870 = add nuw nsw i64 %859, 2
  %871 = getelementptr inbounds i32, ptr %846, i64 %870
  %872 = load i32, ptr %871, align 4, !tbaa !5
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds i8, ptr %839, i64 %873
  store i8 1, ptr %874, align 1, !tbaa !59
  %875 = add nuw nsw i64 %859, 3
  %876 = getelementptr inbounds i32, ptr %846, i64 %875
  %877 = load i32, ptr %876, align 4, !tbaa !5
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds i8, ptr %839, i64 %878
  store i8 1, ptr %879, align 1, !tbaa !59
  %880 = add nuw nsw i64 %859, 4
  %881 = add i64 %860, 4
  %882 = icmp eq i64 %881, %857
  br i1 %882, label %883, label %858

883:                                              ; preds = %858, %849
  %884 = phi i64 [ 1, %849 ], [ %880, %858 ]
  %885 = icmp eq i64 %854, 0
  br i1 %885, label %896, label %886

886:                                              ; preds = %883, %886
  %887 = phi i64 [ %893, %886 ], [ %884, %883 ]
  %888 = phi i64 [ %894, %886 ], [ 0, %883 ]
  %889 = getelementptr inbounds i32, ptr %846, i64 %887
  %890 = load i32, ptr %889, align 4, !tbaa !5
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds i8, ptr %839, i64 %891
  store i8 1, ptr %892, align 1, !tbaa !59
  %893 = add nuw nsw i64 %887, 1
  %894 = add i64 %888, 1
  %895 = icmp eq i64 %894, %854
  br i1 %895, label %896, label %886, !llvm.loop !271

896:                                              ; preds = %886, %883
  %897 = load i32, ptr %675, align 4
  %898 = shl i32 %897, 2
  %899 = ashr exact i32 %898, 2
  %900 = sext i32 %899 to i64
  br label %901

901:                                              ; preds = %896, %838
  %902 = phi i64 [ %900, %896 ], [ %844, %838 ]
  %903 = load ptr, ptr %643, align 8, !tbaa !66
  %904 = getelementptr inbounds ptr, ptr %903, i64 %902
  %905 = load ptr, ptr %904, align 8, !tbaa !24
  %906 = load i32, ptr %905, align 4, !tbaa !5
  %907 = icmp slt i32 %906, 1
  br i1 %907, label %955, label %908

908:                                              ; preds = %901
  %909 = add nuw i32 %906, 1
  %910 = zext i32 %909 to i64
  %911 = add nsw i64 %910, -1
  %912 = add nsw i64 %910, -2
  %913 = and i64 %911, 3
  %914 = icmp ult i64 %912, 3
  br i1 %914, label %942, label %915

915:                                              ; preds = %908
  %916 = and i64 %911, -4
  br label %917

917:                                              ; preds = %917, %915
  %918 = phi i64 [ 1, %915 ], [ %939, %917 ]
  %919 = phi i64 [ 0, %915 ], [ %940, %917 ]
  %920 = getelementptr inbounds i32, ptr %905, i64 %918
  %921 = load i32, ptr %920, align 4, !tbaa !5
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i8, ptr %839, i64 %922
  store i8 2, ptr %923, align 1, !tbaa !59
  %924 = add nuw nsw i64 %918, 1
  %925 = getelementptr inbounds i32, ptr %905, i64 %924
  %926 = load i32, ptr %925, align 4, !tbaa !5
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds i8, ptr %839, i64 %927
  store i8 2, ptr %928, align 1, !tbaa !59
  %929 = add nuw nsw i64 %918, 2
  %930 = getelementptr inbounds i32, ptr %905, i64 %929
  %931 = load i32, ptr %930, align 4, !tbaa !5
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i8, ptr %839, i64 %932
  store i8 2, ptr %933, align 1, !tbaa !59
  %934 = add nuw nsw i64 %918, 3
  %935 = getelementptr inbounds i32, ptr %905, i64 %934
  %936 = load i32, ptr %935, align 4, !tbaa !5
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds i8, ptr %839, i64 %937
  store i8 2, ptr %938, align 1, !tbaa !59
  %939 = add nuw nsw i64 %918, 4
  %940 = add i64 %919, 4
  %941 = icmp eq i64 %940, %916
  br i1 %941, label %942, label %917

942:                                              ; preds = %917, %908
  %943 = phi i64 [ 1, %908 ], [ %939, %917 ]
  %944 = icmp eq i64 %913, 0
  br i1 %944, label %955, label %945

945:                                              ; preds = %942, %945
  %946 = phi i64 [ %952, %945 ], [ %943, %942 ]
  %947 = phi i64 [ %953, %945 ], [ 0, %942 ]
  %948 = getelementptr inbounds i32, ptr %905, i64 %946
  %949 = load i32, ptr %948, align 4, !tbaa !5
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds i8, ptr %839, i64 %950
  store i8 2, ptr %951, align 1, !tbaa !59
  %952 = add nuw nsw i64 %946, 1
  %953 = add i64 %947, 1
  %954 = icmp eq i64 %953, %913
  br i1 %954, label %955, label %945, !llvm.loop !272

955:                                              ; preds = %942, %945, %901, %725
  %956 = phi ptr [ %728, %725 ], [ %839, %901 ], [ %839, %945 ], [ %839, %942 ]
  %957 = phi ptr [ %666, %725 ], [ %905, %901 ], [ %905, %945 ], [ %905, %942 ]
  %958 = phi ptr [ %665, %725 ], [ %846, %901 ], [ %846, %945 ], [ %846, %942 ]
  %959 = phi ptr [ %664, %725 ], [ %839, %901 ], [ %839, %945 ], [ %839, %942 ]
  %960 = load i8, ptr %676, align 1
  %961 = and i8 %960, 7
  %962 = icmp eq i8 %961, 0
  br i1 %962, label %1256, label %963

963:                                              ; preds = %955
  %964 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %969, label %966

966:                                              ; preds = %963
  %967 = load i32, ptr %675, align 4
  %968 = icmp slt i32 %967, 0
  br label %969

969:                                              ; preds = %966, %963
  %970 = phi i1 [ false, %963 ], [ %968, %966 ]
  %971 = and i8 %960, 120
  %972 = icmp eq i8 %971, 0
  br i1 %972, label %1004, label %973

973:                                              ; preds = %969
  %974 = icmp slt i32 %668, %624
  br i1 %974, label %975, label %988

975:                                              ; preds = %973
  %976 = sext i32 %668 to i64
  br label %977

977:                                              ; preds = %975, %983
  %978 = phi i64 [ %976, %975 ], [ %984, %983 ]
  %979 = getelementptr inbounds i16, ptr %195, i64 %978
  %980 = load i16, ptr %979, align 2, !tbaa !45
  %981 = zext i16 %980 to i32
  %982 = icmp sgt i32 %711, %981
  br i1 %982, label %983, label %986

983:                                              ; preds = %977
  %984 = add nsw i64 %978, 1
  %985 = icmp eq i64 %984, %655
  br i1 %985, label %988, label %977

986:                                              ; preds = %977
  %987 = trunc i64 %978 to i32
  br label %988

988:                                              ; preds = %983, %986, %973
  %989 = phi i32 [ %668, %973 ], [ %987, %986 ], [ %624, %983 ]
  %990 = icmp slt i32 %669, %625
  br i1 %990, label %991, label %1004

991:                                              ; preds = %988
  %992 = sext i32 %669 to i64
  br label %993

993:                                              ; preds = %991, %999
  %994 = phi i64 [ %992, %991 ], [ %1000, %999 ]
  %995 = getelementptr inbounds i16, ptr %241, i64 %994
  %996 = load i16, ptr %995, align 2, !tbaa !45
  %997 = zext i16 %996 to i32
  %998 = icmp sgt i32 %711, %997
  br i1 %998, label %999, label %1002

999:                                              ; preds = %993
  %1000 = add nsw i64 %994, 1
  %1001 = icmp eq i64 %1000, %656
  br i1 %1001, label %1004, label %993

1002:                                             ; preds = %993
  %1003 = trunc i64 %994 to i32
  br label %1004

1004:                                             ; preds = %999, %1002, %988, %969
  %1005 = phi i32 [ %669, %969 ], [ %669, %988 ], [ %1003, %1002 ], [ %625, %999 ]
  %1006 = phi i32 [ %668, %969 ], [ %989, %988 ], [ %989, %1002 ], [ %989, %999 ]
  %1007 = add nsw i32 %663, 1
  %1008 = icmp slt i32 %1007, %711
  br i1 %1008, label %1009, label %1074

1009:                                             ; preds = %1004
  %1010 = xor i32 %663, -1
  %1011 = add i32 %711, %1010
  %1012 = zext i32 %1011 to i64
  %1013 = icmp ult i32 %1011, 8
  br i1 %1013, label %1063, label %1014

1014:                                             ; preds = %1009
  %1015 = icmp ult i32 %1011, 64
  br i1 %1015, label %1044, label %1016

1016:                                             ; preds = %1014
  %1017 = and i64 %1012, 4294967232
  %1018 = trunc i32 %1007 to i16
  %1019 = insertelement <16 x i16> poison, i16 %1018, i64 0
  %1020 = shufflevector <16 x i16> %1019, <16 x i16> poison, <16 x i32> zeroinitializer
  %1021 = add <16 x i16> %1020, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1022 = trunc i64 %1017 to i32
  %1023 = add i32 %1007, %1022
  br label %1024

1024:                                             ; preds = %1024, %1016
  %1025 = phi i64 [ 0, %1016 ], [ %1034, %1024 ]
  %1026 = phi <16 x i16> [ %1021, %1016 ], [ %1035, %1024 ]
  %1027 = add <16 x i16> %1026, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1028 = add <16 x i16> %1026, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1029 = add <16 x i16> %1026, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1030 = getelementptr inbounds i16, ptr %425, i64 %1025
  store <16 x i16> %1026, ptr %1030, align 2, !tbaa !45
  %1031 = getelementptr inbounds i16, ptr %1030, i64 16
  store <16 x i16> %1027, ptr %1031, align 2, !tbaa !45
  %1032 = getelementptr inbounds i16, ptr %1030, i64 32
  store <16 x i16> %1028, ptr %1032, align 2, !tbaa !45
  %1033 = getelementptr inbounds i16, ptr %1030, i64 48
  store <16 x i16> %1029, ptr %1033, align 2, !tbaa !45
  %1034 = add nuw i64 %1025, 64
  %1035 = add <16 x i16> %1026, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1036 = icmp eq i64 %1034, %1017
  br i1 %1036, label %1037, label %1024, !llvm.loop !273

1037:                                             ; preds = %1024
  %1038 = icmp eq i64 %1017, %1012
  br i1 %1038, label %1074, label %1039

1039:                                             ; preds = %1037
  %1040 = trunc i64 %1017 to i32
  %1041 = add i32 %1007, %1040
  %1042 = and i64 %1012, 56
  %1043 = icmp eq i64 %1042, 0
  br i1 %1043, label %1063, label %1044

1044:                                             ; preds = %1014, %1039
  %1045 = phi i32 [ %1023, %1039 ], [ %1007, %1014 ]
  %1046 = phi i64 [ %1017, %1039 ], [ 0, %1014 ]
  %1047 = and i64 %1012, 4294967288
  %1048 = trunc i64 %1047 to i32
  %1049 = add i32 %1007, %1048
  %1050 = trunc i32 %1045 to i16
  %1051 = insertelement <8 x i16> poison, i16 %1050, i64 0
  %1052 = shufflevector <8 x i16> %1051, <8 x i16> poison, <8 x i32> zeroinitializer
  %1053 = add <8 x i16> %1052, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1054

1054:                                             ; preds = %1054, %1044
  %1055 = phi i64 [ %1046, %1044 ], [ %1058, %1054 ]
  %1056 = phi <8 x i16> [ %1053, %1044 ], [ %1059, %1054 ]
  %1057 = getelementptr inbounds i16, ptr %425, i64 %1055
  store <8 x i16> %1056, ptr %1057, align 2, !tbaa !45
  %1058 = add nuw i64 %1055, 8
  %1059 = add <8 x i16> %1056, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1060 = icmp eq i64 %1058, %1047
  br i1 %1060, label %1061, label %1054, !llvm.loop !274

1061:                                             ; preds = %1054
  %1062 = icmp eq i64 %1047, %1012
  br i1 %1062, label %1074, label %1063

1063:                                             ; preds = %1009, %1039, %1061
  %1064 = phi i64 [ 0, %1009 ], [ %1017, %1039 ], [ %1047, %1061 ]
  %1065 = phi i32 [ %1007, %1009 ], [ %1041, %1039 ], [ %1049, %1061 ]
  br label %1066

1066:                                             ; preds = %1063, %1066
  %1067 = phi i64 [ %1070, %1066 ], [ %1064, %1063 ]
  %1068 = phi i32 [ %1072, %1066 ], [ %1065, %1063 ]
  %1069 = trunc i32 %1068 to i16
  %1070 = add nuw nsw i64 %1067, 1
  %1071 = getelementptr inbounds i16, ptr %425, i64 %1067
  store i16 %1069, ptr %1071, align 2, !tbaa !45
  %1072 = add nsw i32 %1068, 1
  %1073 = icmp eq i64 %1070, %1012
  br i1 %1073, label %1074, label %1066, !llvm.loop !275

1074:                                             ; preds = %1066, %1037, %1061, %1004
  %1075 = phi i32 [ 0, %1004 ], [ %1011, %1061 ], [ %1011, %1037 ], [ %1011, %1066 ]
  %1076 = zext i32 %1075 to i64
  %1077 = getelementptr inbounds i16, ptr %425, i64 %1076
  %1078 = select i1 %970, ptr %241, ptr %195
  %1079 = select i1 %970, i32 %1005, i32 %1006
  %1080 = select i1 %970, i32 %625, i32 %624
  %1081 = icmp slt i32 %1079, %1080
  br i1 %1081, label %1082, label %1241

1082:                                             ; preds = %1074
  %1083 = sub nsw i32 %1080, %1079
  %1084 = icmp sgt i32 %1083, 6
  br i1 %1084, label %1085, label %1178

1085:                                             ; preds = %1082
  %1086 = add nsw i32 %1080, -2
  %1087 = add nsw i32 %1079, 2
  %1088 = icmp slt i32 %1087, %1086
  br i1 %1088, label %1089, label %1178

1089:                                             ; preds = %1085
  %1090 = add nsw i32 %1079, 1
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds i16, ptr %1078, i64 %1091
  %1093 = load i16, ptr %1092, align 2, !tbaa !45
  %1094 = zext i16 %1093 to i64
  %1095 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1094
  %1096 = getelementptr inbounds %class.Vector, ptr %1095, i64 0, i32 2
  %1097 = load double, ptr %1096, align 8, !tbaa !50
  %1098 = sext i32 %1079 to i64
  %1099 = getelementptr inbounds i16, ptr %1078, i64 %1098
  %1100 = load i16, ptr %1099, align 2, !tbaa !45
  %1101 = zext i16 %1100 to i64
  %1102 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1101
  %1103 = getelementptr inbounds %class.Vector, ptr %1102, i64 0, i32 2
  %1104 = load double, ptr %1103, align 8, !tbaa !50
  %1105 = getelementptr inbounds %class.Vector, ptr %1095, i64 0, i32 1
  %1106 = load double, ptr %1105, align 8, !tbaa !68
  %1107 = getelementptr inbounds %class.Vector, ptr %1102, i64 0, i32 1
  %1108 = load double, ptr %1107, align 8, !tbaa !68
  %1109 = load double, ptr %1095, align 8, !tbaa !69
  %1110 = load double, ptr %1102, align 8, !tbaa !69
  %1111 = sext i32 %1087 to i64
  %1112 = sext i32 %1086 to i64
  %1113 = insertelement <2 x double> poison, double %1097, i64 0
  %1114 = insertelement <2 x double> %1113, double %1104, i64 1
  %1115 = insertelement <2 x double> poison, double %1106, i64 0
  %1116 = insertelement <2 x double> %1115, double %1108, i64 1
  %1117 = insertelement <2 x double> poison, double %1109, i64 0
  %1118 = insertelement <2 x double> %1117, double %1110, i64 1
  %1119 = insertelement <2 x double> poison, double %694, i64 0
  %1120 = shufflevector <2 x double> %1119, <2 x double> poison, <2 x i32> zeroinitializer
  %1121 = shufflevector <2 x double> %691, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1122 = shufflevector <2 x double> %691, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1123

1123:                                             ; preds = %1089, %1123
  %1124 = phi i64 [ %1111, %1089 ], [ %1169, %1123 ]
  %1125 = phi i32 [ %1079, %1089 ], [ %1171, %1123 ]
  %1126 = phi i32 [ 0, %1089 ], [ %1168, %1123 ]
  %1127 = phi i16 [ %1100, %1089 ], [ %1134, %1123 ]
  %1128 = phi i16 [ %1093, %1089 ], [ %1138, %1123 ]
  %1129 = phi <2 x double> [ %1114, %1089 ], [ %1173, %1123 ]
  %1130 = phi <2 x double> [ %1116, %1089 ], [ %1175, %1123 ]
  %1131 = phi <2 x double> [ %1118, %1089 ], [ %1177, %1123 ]
  %1132 = fsub <2 x double> %1120, %1129
  %1133 = getelementptr inbounds i16, ptr %1078, i64 %1124
  %1134 = load i16, ptr %1133, align 2, !tbaa !45
  %1135 = add nsw i32 %1125, 3
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i16, ptr %1078, i64 %1136
  %1138 = load i16, ptr %1137, align 2, !tbaa !45
  %1139 = zext i16 %1134 to i64
  %1140 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1139
  %1141 = load double, ptr %1140, align 8, !tbaa !69
  %1142 = zext i16 %1138 to i64
  %1143 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1142
  %1144 = load double, ptr %1143, align 8, !tbaa !69
  %1145 = getelementptr inbounds %class.Vector, ptr %1140, i64 0, i32 1
  %1146 = load double, ptr %1145, align 8, !tbaa !68
  %1147 = getelementptr inbounds %class.Vector, ptr %1143, i64 0, i32 1
  %1148 = load double, ptr %1147, align 8, !tbaa !68
  %1149 = getelementptr inbounds %class.Vector, ptr %1140, i64 0, i32 2
  %1150 = load double, ptr %1149, align 8, !tbaa !50
  %1151 = getelementptr inbounds %class.Vector, ptr %1143, i64 0, i32 2
  %1152 = load double, ptr %1151, align 8, !tbaa !50
  %1153 = fsub <2 x double> %1122, %1131
  %1154 = fmul <2 x double> %1153, %1153
  %1155 = fsub <2 x double> %1121, %1130
  %1156 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1155, <2 x double> %1155, <2 x double> %1154)
  %1157 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1132, <2 x double> %1132, <2 x double> %1156)
  %1158 = fcmp olt <2 x double> %1157, %658
  %1159 = zext i32 %1126 to i64
  %1160 = getelementptr inbounds i16, ptr %287, i64 %1159
  store i16 %1127, ptr %1160, align 2, !tbaa !45
  %1161 = extractelement <2 x i1> %1158, i64 1
  %1162 = zext i1 %1161 to i32
  %1163 = add nuw nsw i32 %1126, %1162
  %1164 = zext i32 %1163 to i64
  %1165 = getelementptr inbounds i16, ptr %287, i64 %1164
  store i16 %1128, ptr %1165, align 2, !tbaa !45
  %1166 = extractelement <2 x i1> %1158, i64 0
  %1167 = zext i1 %1166 to i32
  %1168 = add i32 %1163, %1167
  %1169 = add nsw i64 %1124, 2
  %1170 = icmp slt i64 %1169, %1112
  %1171 = trunc i64 %1124 to i32
  %1172 = insertelement <2 x double> poison, double %1152, i64 0
  %1173 = insertelement <2 x double> %1172, double %1150, i64 1
  %1174 = insertelement <2 x double> poison, double %1148, i64 0
  %1175 = insertelement <2 x double> %1174, double %1146, i64 1
  %1176 = insertelement <2 x double> poison, double %1144, i64 0
  %1177 = insertelement <2 x double> %1176, double %1141, i64 1
  br i1 %1170, label %1123, label %1178

1178:                                             ; preds = %1123, %1085, %1082
  %1179 = phi i32 [ 0, %1082 ], [ 0, %1085 ], [ %1168, %1123 ]
  %1180 = phi i32 [ %1079, %1082 ], [ %1079, %1085 ], [ %1171, %1123 ]
  %1181 = icmp slt i32 %1180, %1080
  br i1 %1181, label %1182, label %1187

1182:                                             ; preds = %1178
  %1183 = sext i32 %1180 to i64
  %1184 = sext i32 %1080 to i64
  %1185 = extractelement <2 x double> %691, i64 0
  %1186 = extractelement <2 x double> %691, i64 1
  br label %1192

1187:                                             ; preds = %1215, %1178
  %1188 = phi i32 [ %1179, %1178 ], [ %1216, %1215 ]
  %1189 = icmp sgt i32 %1188, 0
  br i1 %1189, label %1190, label %1241

1190:                                             ; preds = %1187
  %1191 = zext i32 %1188 to i64
  br label %1219

1192:                                             ; preds = %1182, %1215
  %1193 = phi i64 [ %1183, %1182 ], [ %1217, %1215 ]
  %1194 = phi i32 [ %1179, %1182 ], [ %1216, %1215 ]
  %1195 = getelementptr inbounds i16, ptr %1078, i64 %1193
  %1196 = load i16, ptr %1195, align 2, !tbaa !45
  %1197 = zext i16 %1196 to i64
  %1198 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1197
  %1199 = load double, ptr %1198, align 8, !tbaa !69
  %1200 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 1
  %1201 = load double, ptr %1200, align 8, !tbaa !68
  %1202 = getelementptr inbounds %class.Vector, ptr %1198, i64 0, i32 2
  %1203 = load double, ptr %1202, align 8, !tbaa !50
  %1204 = fsub double %1185, %1199
  %1205 = fmul double %1204, %1204
  %1206 = fsub double %1186, %1201
  %1207 = tail call double @llvm.fmuladd.f64(double %1206, double %1206, double %1205)
  %1208 = fsub double %694, %1203
  %1209 = tail call double @llvm.fmuladd.f64(double %1208, double %1208, double %1207)
  %1210 = fcmp ugt double %1209, %27
  br i1 %1210, label %1215, label %1211

1211:                                             ; preds = %1192
  %1212 = add nsw i32 %1194, 1
  %1213 = sext i32 %1194 to i64
  %1214 = getelementptr inbounds i16, ptr %287, i64 %1213
  store i16 %1196, ptr %1214, align 2, !tbaa !45
  br label %1215

1215:                                             ; preds = %1211, %1192
  %1216 = phi i32 [ %1212, %1211 ], [ %1194, %1192 ]
  %1217 = add nsw i64 %1193, 1
  %1218 = icmp eq i64 %1217, %1184
  br i1 %1218, label %1187, label %1192

1219:                                             ; preds = %1190, %1236
  %1220 = phi i64 [ 0, %1190 ], [ %1239, %1236 ]
  %1221 = phi ptr [ %1077, %1190 ], [ %1238, %1236 ]
  %1222 = getelementptr inbounds i16, ptr %287, i64 %1220
  %1223 = load i16, ptr %1222, align 2, !tbaa !45
  %1224 = zext i16 %1223 to i64
  %1225 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1224, i32 4
  %1226 = load i8, ptr %1225, align 1
  %1227 = and i8 %1226, 7
  store i16 %1223, ptr %1221, align 2, !tbaa !45
  %1228 = getelementptr inbounds i16, ptr %1221, i64 1
  %1229 = insertelement <2 x i16> poison, i16 %1223, i64 0
  %1230 = shufflevector <2 x i16> %1229, <2 x i16> poison, <2 x i32> zeroinitializer
  %1231 = add <2 x i16> %1230, <i16 1, i16 2>
  store <2 x i16> %1231, ptr %1228, align 2, !tbaa !45
  %1232 = icmp ult i8 %1227, 4
  br i1 %1232, label %1236, label %1233

1233:                                             ; preds = %1219
  %1234 = add <2 x i16> %1230, <i16 3, i16 4>
  %1235 = getelementptr inbounds i16, ptr %1221, i64 3
  store <2 x i16> %1234, ptr %1235, align 2, !tbaa !45
  br label %1236

1236:                                             ; preds = %1233, %1219
  %1237 = zext i8 %1227 to i64
  %1238 = getelementptr inbounds i16, ptr %1221, i64 %1237
  %1239 = add nuw nsw i64 %1220, 1
  %1240 = icmp eq i64 %1239, %1191
  br i1 %1240, label %1241, label %1219

1241:                                             ; preds = %1236, %1187, %1074
  %1242 = phi ptr [ %1077, %1074 ], [ %1077, %1187 ], [ %1238, %1236 ]
  %1243 = ptrtoint ptr %1242 to i64
  %1244 = sub i64 %1243, %644
  %1245 = lshr exact i64 %1244, 1
  %1246 = trunc i64 %1245 to i32
  %1247 = icmp eq i32 %1246, 0
  br i1 %1247, label %1259, label %1248

1248:                                             ; preds = %1241
  %1249 = shl i64 %1244, 31
  %1250 = add i64 %1249, -4294967296
  %1251 = ashr i64 %1250, 32
  %1252 = getelementptr inbounds i16, ptr %425, i64 %1251
  %1253 = load i16, ptr %1252, align 2, !tbaa !45
  %1254 = ashr i64 %1249, 32
  %1255 = getelementptr inbounds i16, ptr %425, i64 %1254
  store i16 %1253, ptr %1255, align 2, !tbaa !45
  br label %1259

1256:                                             ; preds = %955
  %1257 = add nsw i32 %671, 1
  %1258 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1259

1259:                                             ; preds = %1241, %1248, %1256
  %1260 = phi i32 [ %1258, %1256 ], [ %964, %1248 ], [ %964, %1241 ]
  %1261 = phi i32 [ %1257, %1256 ], [ 0, %1248 ], [ 0, %1241 ]
  %1262 = phi i32 [ %670, %1256 ], [ %1246, %1248 ], [ 0, %1241 ]
  %1263 = phi i32 [ %669, %1256 ], [ %1005, %1248 ], [ %1005, %1241 ]
  %1264 = phi i32 [ %668, %1256 ], [ %1006, %1248 ], [ %1006, %1241 ]
  %1265 = icmp eq i32 %1260, 0
  br i1 %1265, label %1270, label %1266

1266:                                             ; preds = %1259
  %1267 = load i32, ptr %675, align 4
  %1268 = and i32 %1267, 1073741824
  %1269 = icmp ne i32 %1268, 0
  br label %1270

1270:                                             ; preds = %1266, %1259
  %1271 = phi i1 [ false, %1259 ], [ %1269, %1266 ]
  %1272 = load i32, ptr %17, align 8, !tbaa !19
  %1273 = add nsw i32 %645, %1272
  %1274 = load i32, ptr %646, align 4, !tbaa !70
  %1275 = icmp sgt i32 %1274, %1273
  br i1 %1275, label %1291, label %1276

1276:                                             ; preds = %1270, %1276
  %1277 = phi i32 [ %1279, %1276 ], [ %1274, %1270 ]
  %1278 = ashr i32 %1277, 1
  %1279 = add nsw i32 %1278, %1277
  %1280 = icmp sgt i32 %1279, %1273
  br i1 %1280, label %1281, label %1276

1281:                                             ; preds = %1276
  %1282 = sext i32 %1279 to i64
  %1283 = icmp slt i32 %1279, 0
  %1284 = shl nsw i64 %1282, 1
  %1285 = select i1 %1283, i64 -1, i64 %1284
  %1286 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1285) #9
  %1287 = load ptr, ptr %12, align 8, !tbaa !47
  %1288 = sext i32 %1272 to i64
  %1289 = shl nsw i64 %1288, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1286, ptr align 2 %1287, i64 %1289, i1 false)
  %1290 = icmp eq ptr %1287, null
  br i1 %1290, label %1295, label %1293

1291:                                             ; preds = %1270
  %1292 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1297

1293:                                             ; preds = %1281
  tail call void @_ZdaPv(ptr noundef nonnull %1287) #10
  %1294 = load i32, ptr %17, align 8, !tbaa !19
  br label %1295

1295:                                             ; preds = %1293, %1281
  %1296 = phi i32 [ %1294, %1293 ], [ %1272, %1281 ]
  store ptr %1286, ptr %12, align 8, !tbaa !47
  store i32 %1279, ptr %646, align 4, !tbaa !70
  br label %1297

1297:                                             ; preds = %1291, %1295
  %1298 = phi i32 [ %1272, %1291 ], [ %1296, %1295 ]
  %1299 = phi ptr [ %1292, %1291 ], [ %1286, %1295 ]
  %1300 = ptrtoint ptr %1299 to i64
  %1301 = add nsw i32 %1298, 1
  %1302 = sext i32 %1301 to i64
  %1303 = getelementptr inbounds i16, ptr %1299, i64 %1302
  %1304 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1305 = icmp eq i32 %1304, 0
  br i1 %1305, label %1486, label %1306

1306:                                             ; preds = %1297
  %1307 = load i8, ptr %695, align 2, !tbaa !52
  %1308 = zext i8 %1307 to i32
  %1309 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1310 = icmp eq i32 %1309, 0
  br i1 %1310, label %1365, label %1311

1311:                                             ; preds = %1306
  %1312 = icmp eq i8 %1307, 1
  br i1 %1312, label %1313, label %2556

1313:                                             ; preds = %1311
  %1314 = icmp slt i32 %1261, %1262
  br i1 %1314, label %1315, label %1426

1315:                                             ; preds = %1313
  %1316 = sext i32 %1261 to i64
  %1317 = sext i32 %1262 to i64
  %1318 = sub nsw i64 %1317, %1316
  %1319 = xor i64 %1316, -1
  %1320 = and i64 %1318, 1
  %1321 = icmp eq i64 %1320, 0
  br i1 %1321, label %1333, label %1322

1322:                                             ; preds = %1315
  %1323 = getelementptr inbounds i16, ptr %425, i64 %1316
  %1324 = load i16, ptr %1323, align 2, !tbaa !45
  %1325 = zext i16 %1324 to i64
  %1326 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1325, i32 3
  %1327 = load i8, ptr %1326, align 2, !tbaa !52
  %1328 = icmp eq i8 %1327, 1
  br i1 %1328, label %1329, label %1330

1329:                                             ; preds = %1322
  store i16 %1324, ptr %471, align 2, !tbaa !45
  br label %1330

1330:                                             ; preds = %1329, %1322
  %1331 = phi ptr [ %659, %1329 ], [ %471, %1322 ]
  %1332 = add nsw i64 %1316, 1
  br label %1333

1333:                                             ; preds = %1330, %1315
  %1334 = phi ptr [ undef, %1315 ], [ %1331, %1330 ]
  %1335 = phi i64 [ %1316, %1315 ], [ %1332, %1330 ]
  %1336 = phi ptr [ %471, %1315 ], [ %1331, %1330 ]
  %1337 = sub nsw i64 0, %1317
  %1338 = icmp eq i64 %1319, %1337
  br i1 %1338, label %1426, label %1339

1339:                                             ; preds = %1333, %1361
  %1340 = phi i64 [ %1363, %1361 ], [ %1335, %1333 ]
  %1341 = phi ptr [ %1362, %1361 ], [ %1336, %1333 ]
  %1342 = getelementptr inbounds i16, ptr %425, i64 %1340
  %1343 = load i16, ptr %1342, align 2, !tbaa !45
  %1344 = zext i16 %1343 to i64
  %1345 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1344, i32 3
  %1346 = load i8, ptr %1345, align 2, !tbaa !52
  %1347 = icmp eq i8 %1346, 1
  br i1 %1347, label %1348, label %1350

1348:                                             ; preds = %1339
  %1349 = getelementptr inbounds i16, ptr %1341, i64 1
  store i16 %1343, ptr %1341, align 2, !tbaa !45
  br label %1350

1350:                                             ; preds = %1348, %1339
  %1351 = phi ptr [ %1349, %1348 ], [ %1341, %1339 ]
  %1352 = add nsw i64 %1340, 1
  %1353 = getelementptr inbounds i16, ptr %425, i64 %1352
  %1354 = load i16, ptr %1353, align 2, !tbaa !45
  %1355 = zext i16 %1354 to i64
  %1356 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1355, i32 3
  %1357 = load i8, ptr %1356, align 2, !tbaa !52
  %1358 = icmp eq i8 %1357, 1
  br i1 %1358, label %1359, label %1361

1359:                                             ; preds = %1350
  %1360 = getelementptr inbounds i16, ptr %1351, i64 1
  store i16 %1354, ptr %1351, align 2, !tbaa !45
  br label %1361

1361:                                             ; preds = %1359, %1350
  %1362 = phi ptr [ %1360, %1359 ], [ %1351, %1350 ]
  %1363 = add nsw i64 %1340, 2
  %1364 = icmp eq i64 %1363, %1317
  br i1 %1364, label %1426, label %1339

1365:                                             ; preds = %1306
  %1366 = add i8 %1307, -3
  %1367 = icmp ult i8 %1366, -2
  br i1 %1367, label %2556, label %1368

1368:                                             ; preds = %1365
  %1369 = icmp slt i32 %1261, %1262
  br i1 %1369, label %1370, label %1426

1370:                                             ; preds = %1368
  %1371 = sext i32 %1261 to i64
  %1372 = sext i32 %1262 to i64
  %1373 = sub nsw i64 %1372, %1371
  %1374 = xor i64 %1371, -1
  %1375 = and i64 %1373, 1
  %1376 = icmp eq i64 %1375, 0
  br i1 %1376, label %1390, label %1377

1377:                                             ; preds = %1370
  %1378 = getelementptr inbounds i16, ptr %425, i64 %1371
  %1379 = load i16, ptr %1378, align 2, !tbaa !45
  %1380 = zext i16 %1379 to i64
  %1381 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1380, i32 3
  %1382 = load i8, ptr %1381, align 2, !tbaa !52
  %1383 = zext i8 %1382 to i32
  %1384 = add nuw nsw i32 %1383, %1308
  %1385 = icmp eq i32 %1384, 3
  br i1 %1385, label %1386, label %1387

1386:                                             ; preds = %1377
  store i16 %1379, ptr %471, align 2, !tbaa !45
  br label %1387

1387:                                             ; preds = %1386, %1377
  %1388 = phi ptr [ %660, %1386 ], [ %471, %1377 ]
  %1389 = add nsw i64 %1371, 1
  br label %1390

1390:                                             ; preds = %1387, %1370
  %1391 = phi ptr [ undef, %1370 ], [ %1388, %1387 ]
  %1392 = phi i64 [ %1371, %1370 ], [ %1389, %1387 ]
  %1393 = phi ptr [ %471, %1370 ], [ %1388, %1387 ]
  %1394 = sub nsw i64 0, %1372
  %1395 = icmp eq i64 %1374, %1394
  br i1 %1395, label %1426, label %1396

1396:                                             ; preds = %1390, %1422
  %1397 = phi i64 [ %1424, %1422 ], [ %1392, %1390 ]
  %1398 = phi ptr [ %1423, %1422 ], [ %1393, %1390 ]
  %1399 = getelementptr inbounds i16, ptr %425, i64 %1397
  %1400 = load i16, ptr %1399, align 2, !tbaa !45
  %1401 = zext i16 %1400 to i64
  %1402 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1401, i32 3
  %1403 = load i8, ptr %1402, align 2, !tbaa !52
  %1404 = zext i8 %1403 to i32
  %1405 = add nuw nsw i32 %1404, %1308
  %1406 = icmp eq i32 %1405, 3
  br i1 %1406, label %1407, label %1409

1407:                                             ; preds = %1396
  %1408 = getelementptr inbounds i16, ptr %1398, i64 1
  store i16 %1400, ptr %1398, align 2, !tbaa !45
  br label %1409

1409:                                             ; preds = %1407, %1396
  %1410 = phi ptr [ %1408, %1407 ], [ %1398, %1396 ]
  %1411 = add nsw i64 %1397, 1
  %1412 = getelementptr inbounds i16, ptr %425, i64 %1411
  %1413 = load i16, ptr %1412, align 2, !tbaa !45
  %1414 = zext i16 %1413 to i64
  %1415 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1414, i32 3
  %1416 = load i8, ptr %1415, align 2, !tbaa !52
  %1417 = zext i8 %1416 to i32
  %1418 = add nuw nsw i32 %1417, %1308
  %1419 = icmp eq i32 %1418, 3
  br i1 %1419, label %1420, label %1422

1420:                                             ; preds = %1409
  %1421 = getelementptr inbounds i16, ptr %1410, i64 1
  store i16 %1413, ptr %1410, align 2, !tbaa !45
  br label %1422

1422:                                             ; preds = %1420, %1409
  %1423 = phi ptr [ %1421, %1420 ], [ %1410, %1409 ]
  %1424 = add nsw i64 %1397, 2
  %1425 = icmp eq i64 %1424, %1372
  br i1 %1425, label %1426, label %1396

1426:                                             ; preds = %1333, %1361, %1390, %1422, %1313, %1368
  %1427 = phi ptr [ %471, %1368 ], [ %471, %1313 ], [ %1391, %1390 ], [ %1423, %1422 ], [ %1334, %1333 ], [ %1362, %1361 ]
  %1428 = ptrtoint ptr %1427 to i64
  %1429 = sub i64 %1428, %647
  %1430 = lshr exact i64 %1429, 1
  %1431 = trunc i64 %1430 to i32
  %1432 = icmp sgt i32 %1431, 0
  br i1 %1432, label %1433, label %1707

1433:                                             ; preds = %1426
  %1434 = and i64 %1430, 4294967295
  %1435 = extractelement <2 x double> %691, i64 0
  %1436 = extractelement <2 x double> %691, i64 1
  br label %1437

1437:                                             ; preds = %1433, %1481
  %1438 = phi i64 [ 0, %1433 ], [ %1484, %1481 ]
  %1439 = phi ptr [ %471, %1433 ], [ %1483, %1481 ]
  %1440 = phi ptr [ %1303, %1433 ], [ %1482, %1481 ]
  %1441 = getelementptr inbounds i16, ptr %471, i64 %1438
  %1442 = load i16, ptr %1441, align 2, !tbaa !45
  %1443 = zext i16 %1442 to i64
  %1444 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1443
  %1445 = load double, ptr %1444, align 8, !tbaa !69
  %1446 = fsub double %1435, %1445
  %1447 = fmul double %1446, %1446
  %1448 = getelementptr inbounds %class.Vector, ptr %1444, i64 0, i32 1
  %1449 = load double, ptr %1448, align 8, !tbaa !68
  %1450 = fsub double %1436, %1449
  %1451 = tail call double @llvm.fmuladd.f64(double %1450, double %1450, double %1447)
  %1452 = getelementptr inbounds %class.Vector, ptr %1444, i64 0, i32 2
  %1453 = load double, ptr %1452, align 8, !tbaa !50
  %1454 = fsub double %694, %1453
  %1455 = tail call double @llvm.fmuladd.f64(double %1454, double %1454, double %1451)
  br i1 %1271, label %1456, label %1463

1456:                                             ; preds = %1437
  %1457 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1443
  %1458 = load i32, ptr %1457, align 4
  %1459 = and i32 %1458, 1073741824
  %1460 = icmp ne i32 %1459, 0
  %1461 = fcmp ugt double %1455, %24
  %1462 = select i1 %1460, i1 true, i1 %1461
  br i1 %1462, label %1481, label %1468

1463:                                             ; preds = %1437
  %1464 = fcmp ugt double %1455, %24
  br i1 %1464, label %1481, label %1465

1465:                                             ; preds = %1463
  %1466 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1443
  %1467 = load i32, ptr %1466, align 4
  br label %1468

1468:                                             ; preds = %1465, %1456
  %1469 = phi i32 [ %1467, %1465 ], [ %1458, %1456 ]
  %1470 = shl i32 %1469, 2
  %1471 = ashr exact i32 %1470, 2
  %1472 = icmp slt i32 %1471, %719
  %1473 = icmp sgt i32 %1471, %721
  %1474 = select i1 %1472, i1 true, i1 %1473
  %1475 = select i1 %1474, ptr %1440, ptr %1439
  %1476 = zext i1 %1474 to i64
  %1477 = getelementptr inbounds i16, ptr %1440, i64 %1476
  %1478 = xor i1 %1474, true
  %1479 = zext i1 %1478 to i64
  %1480 = getelementptr inbounds i16, ptr %1439, i64 %1479
  store i16 %1442, ptr %1475, align 2, !tbaa !45
  br label %1481

1481:                                             ; preds = %1468, %1463, %1456
  %1482 = phi ptr [ %1440, %1456 ], [ %1440, %1463 ], [ %1477, %1468 ]
  %1483 = phi ptr [ %1439, %1456 ], [ %1439, %1463 ], [ %1480, %1468 ]
  %1484 = add nuw nsw i64 %1438, 1
  %1485 = icmp eq i64 %1484, %1434
  br i1 %1485, label %1707, label %1437

1486:                                             ; preds = %1297
  %1487 = icmp slt i32 %1261, %1262
  br i1 %1271, label %1488, label %1536

1488:                                             ; preds = %1486
  br i1 %1487, label %1489, label %1707

1489:                                             ; preds = %1488
  %1490 = sext i32 %1261 to i64
  %1491 = sext i32 %1262 to i64
  %1492 = extractelement <2 x double> %691, i64 0
  %1493 = extractelement <2 x double> %691, i64 1
  br label %1494

1494:                                             ; preds = %1489, %1531
  %1495 = phi i64 [ %1490, %1489 ], [ %1534, %1531 ]
  %1496 = phi ptr [ %471, %1489 ], [ %1533, %1531 ]
  %1497 = phi ptr [ %1303, %1489 ], [ %1532, %1531 ]
  %1498 = getelementptr inbounds i16, ptr %425, i64 %1495
  %1499 = load i16, ptr %1498, align 2, !tbaa !45
  %1500 = zext i16 %1499 to i64
  %1501 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1500
  %1502 = load i32, ptr %1501, align 4
  %1503 = and i32 %1502, 1073741824
  %1504 = icmp eq i32 %1503, 0
  br i1 %1504, label %1505, label %1531

1505:                                             ; preds = %1494
  %1506 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1500
  %1507 = getelementptr inbounds %class.Vector, ptr %1506, i64 0, i32 2
  %1508 = load double, ptr %1507, align 8, !tbaa !50
  %1509 = fsub double %694, %1508
  %1510 = getelementptr inbounds %class.Vector, ptr %1506, i64 0, i32 1
  %1511 = load double, ptr %1510, align 8, !tbaa !68
  %1512 = fsub double %1493, %1511
  %1513 = load double, ptr %1506, align 8, !tbaa !69
  %1514 = fsub double %1492, %1513
  %1515 = fmul double %1514, %1514
  %1516 = tail call double @llvm.fmuladd.f64(double %1512, double %1512, double %1515)
  %1517 = tail call double @llvm.fmuladd.f64(double %1509, double %1509, double %1516)
  %1518 = fcmp ugt double %1517, %24
  br i1 %1518, label %1531, label %1519

1519:                                             ; preds = %1505
  %1520 = shl i32 %1502, 2
  %1521 = ashr exact i32 %1520, 2
  %1522 = icmp slt i32 %1521, %719
  %1523 = icmp sgt i32 %1521, %721
  %1524 = select i1 %1522, i1 true, i1 %1523
  %1525 = select i1 %1524, ptr %1497, ptr %1496
  %1526 = zext i1 %1524 to i64
  %1527 = getelementptr inbounds i16, ptr %1497, i64 %1526
  %1528 = xor i1 %1524, true
  %1529 = zext i1 %1528 to i64
  %1530 = getelementptr inbounds i16, ptr %1496, i64 %1529
  store i16 %1499, ptr %1525, align 2, !tbaa !45
  br label %1531

1531:                                             ; preds = %1519, %1505, %1494
  %1532 = phi ptr [ %1497, %1494 ], [ %1497, %1505 ], [ %1527, %1519 ]
  %1533 = phi ptr [ %1496, %1494 ], [ %1496, %1505 ], [ %1530, %1519 ]
  %1534 = add nsw i64 %1495, 1
  %1535 = icmp eq i64 %1534, %1491
  br i1 %1535, label %1707, label %1494

1536:                                             ; preds = %1486
  br i1 %1487, label %1537, label %1707

1537:                                             ; preds = %1536
  %1538 = sub nsw i32 %1262, %1261
  %1539 = icmp sgt i32 %1538, 6
  br i1 %1539, label %1540, label %1658

1540:                                             ; preds = %1537
  %1541 = add nsw i32 %1262, -2
  %1542 = add nsw i32 %1261, 2
  %1543 = icmp slt i32 %1542, %1541
  br i1 %1543, label %1544, label %1658

1544:                                             ; preds = %1540
  %1545 = sext i32 %1261 to i64
  %1546 = getelementptr inbounds i16, ptr %425, i64 %1545
  %1547 = load i16, ptr %1546, align 2, !tbaa !45
  %1548 = zext i16 %1547 to i64
  %1549 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1548
  %1550 = load i32, ptr %1549, align 4
  %1551 = add nsw i32 %1261, 1
  %1552 = sext i32 %1551 to i64
  %1553 = getelementptr inbounds i16, ptr %425, i64 %1552
  %1554 = load i16, ptr %1553, align 2, !tbaa !45
  %1555 = zext i16 %1554 to i64
  %1556 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1555
  %1557 = getelementptr inbounds %class.Vector, ptr %1556, i64 0, i32 2
  %1558 = load double, ptr %1557, align 8, !tbaa !50
  %1559 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1548
  %1560 = getelementptr inbounds %class.Vector, ptr %1559, i64 0, i32 2
  %1561 = load double, ptr %1560, align 8, !tbaa !50
  %1562 = getelementptr inbounds %class.Vector, ptr %1556, i64 0, i32 1
  %1563 = load double, ptr %1562, align 8, !tbaa !68
  %1564 = getelementptr inbounds %class.Vector, ptr %1559, i64 0, i32 1
  %1565 = load double, ptr %1564, align 8, !tbaa !68
  %1566 = load double, ptr %1556, align 8, !tbaa !69
  %1567 = load double, ptr %1559, align 8, !tbaa !69
  %1568 = sext i32 %1542 to i64
  %1569 = sext i32 %1541 to i64
  %1570 = extractelement <2 x double> %691, i64 0
  %1571 = extractelement <2 x double> %691, i64 1
  br label %1572

1572:                                             ; preds = %1544, %1652
  %1573 = phi i64 [ %1568, %1544 ], [ %1655, %1652 ]
  %1574 = phi i64 [ %1555, %1544 ], [ %1612, %1652 ]
  %1575 = phi i32 [ %1550, %1544 ], [ %1640, %1652 ]
  %1576 = phi ptr [ %471, %1544 ], [ %1654, %1652 ]
  %1577 = phi ptr [ %1303, %1544 ], [ %1653, %1652 ]
  %1578 = phi i32 [ %1261, %1544 ], [ %1657, %1652 ]
  %1579 = phi i16 [ %1547, %1544 ], [ %1604, %1652 ]
  %1580 = phi i16 [ %1554, %1544 ], [ %1608, %1652 ]
  %1581 = phi double [ %1567, %1544 ], [ %1611, %1652 ]
  %1582 = phi double [ %1566, %1544 ], [ %1614, %1652 ]
  %1583 = phi double [ %1565, %1544 ], [ %1616, %1652 ]
  %1584 = phi double [ %1563, %1544 ], [ %1618, %1652 ]
  %1585 = phi double [ %1561, %1544 ], [ %1620, %1652 ]
  %1586 = phi double [ %1558, %1544 ], [ %1622, %1652 ]
  %1587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1574
  %1588 = load i32, ptr %1587, align 4
  %1589 = shl i32 %1588, 2
  %1590 = ashr exact i32 %1589, 2
  %1591 = fsub double %1570, %1581
  %1592 = fsub double %1570, %1582
  %1593 = fmul double %1591, %1591
  %1594 = fmul double %1592, %1592
  %1595 = fsub double %1571, %1583
  %1596 = fsub double %1571, %1584
  %1597 = tail call double @llvm.fmuladd.f64(double %1595, double %1595, double %1593)
  %1598 = tail call double @llvm.fmuladd.f64(double %1596, double %1596, double %1594)
  %1599 = fsub double %694, %1585
  %1600 = fsub double %694, %1586
  %1601 = tail call double @llvm.fmuladd.f64(double %1599, double %1599, double %1597)
  %1602 = tail call double @llvm.fmuladd.f64(double %1600, double %1600, double %1598)
  %1603 = getelementptr inbounds i16, ptr %425, i64 %1573
  %1604 = load i16, ptr %1603, align 2, !tbaa !45
  %1605 = add nsw i32 %1578, 3
  %1606 = sext i32 %1605 to i64
  %1607 = getelementptr inbounds i16, ptr %425, i64 %1606
  %1608 = load i16, ptr %1607, align 2, !tbaa !45
  %1609 = zext i16 %1604 to i64
  %1610 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1609
  %1611 = load double, ptr %1610, align 8, !tbaa !69
  %1612 = zext i16 %1608 to i64
  %1613 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1612
  %1614 = load double, ptr %1613, align 8, !tbaa !69
  %1615 = getelementptr inbounds %class.Vector, ptr %1610, i64 0, i32 1
  %1616 = load double, ptr %1615, align 8, !tbaa !68
  %1617 = getelementptr inbounds %class.Vector, ptr %1613, i64 0, i32 1
  %1618 = load double, ptr %1617, align 8, !tbaa !68
  %1619 = getelementptr inbounds %class.Vector, ptr %1610, i64 0, i32 2
  %1620 = load double, ptr %1619, align 8, !tbaa !50
  %1621 = getelementptr inbounds %class.Vector, ptr %1613, i64 0, i32 2
  %1622 = load double, ptr %1621, align 8, !tbaa !50
  %1623 = fcmp ugt double %1601, %24
  br i1 %1623, label %1636, label %1624

1624:                                             ; preds = %1572
  %1625 = shl i32 %1575, 2
  %1626 = ashr exact i32 %1625, 2
  %1627 = icmp slt i32 %1626, %719
  %1628 = icmp sgt i32 %1626, %721
  %1629 = select i1 %1627, i1 true, i1 %1628
  %1630 = select i1 %1629, ptr %1577, ptr %1576
  %1631 = zext i1 %1629 to i64
  %1632 = getelementptr inbounds i16, ptr %1577, i64 %1631
  %1633 = xor i1 %1629, true
  %1634 = zext i1 %1633 to i64
  %1635 = getelementptr inbounds i16, ptr %1576, i64 %1634
  store i16 %1579, ptr %1630, align 2, !tbaa !45
  br label %1636

1636:                                             ; preds = %1624, %1572
  %1637 = phi ptr [ %1577, %1572 ], [ %1632, %1624 ]
  %1638 = phi ptr [ %1576, %1572 ], [ %1635, %1624 ]
  %1639 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1609
  %1640 = load i32, ptr %1639, align 4
  %1641 = fcmp ugt double %1602, %24
  br i1 %1641, label %1652, label %1642

1642:                                             ; preds = %1636
  %1643 = icmp slt i32 %1590, %719
  %1644 = icmp sgt i32 %1590, %721
  %1645 = select i1 %1643, i1 true, i1 %1644
  %1646 = select i1 %1645, ptr %1637, ptr %1638
  %1647 = zext i1 %1645 to i64
  %1648 = getelementptr inbounds i16, ptr %1637, i64 %1647
  %1649 = xor i1 %1645, true
  %1650 = zext i1 %1649 to i64
  %1651 = getelementptr inbounds i16, ptr %1638, i64 %1650
  store i16 %1580, ptr %1646, align 2, !tbaa !45
  br label %1652

1652:                                             ; preds = %1642, %1636
  %1653 = phi ptr [ %1637, %1636 ], [ %1648, %1642 ]
  %1654 = phi ptr [ %1638, %1636 ], [ %1651, %1642 ]
  %1655 = add nsw i64 %1573, 2
  %1656 = icmp slt i64 %1655, %1569
  %1657 = trunc i64 %1573 to i32
  br i1 %1656, label %1572, label %1658

1658:                                             ; preds = %1652, %1540, %1537
  %1659 = phi i32 [ %1261, %1537 ], [ %1261, %1540 ], [ %1657, %1652 ]
  %1660 = phi ptr [ %1303, %1537 ], [ %1303, %1540 ], [ %1653, %1652 ]
  %1661 = phi ptr [ %471, %1537 ], [ %471, %1540 ], [ %1654, %1652 ]
  %1662 = icmp slt i32 %1659, %1262
  br i1 %1662, label %1663, label %1707

1663:                                             ; preds = %1658
  %1664 = sext i32 %1659 to i64
  %1665 = sext i32 %1262 to i64
  %1666 = extractelement <2 x double> %691, i64 0
  %1667 = extractelement <2 x double> %691, i64 1
  br label %1668

1668:                                             ; preds = %1663, %1702
  %1669 = phi i64 [ %1664, %1663 ], [ %1705, %1702 ]
  %1670 = phi ptr [ %1661, %1663 ], [ %1704, %1702 ]
  %1671 = phi ptr [ %1660, %1663 ], [ %1703, %1702 ]
  %1672 = getelementptr inbounds i16, ptr %425, i64 %1669
  %1673 = load i16, ptr %1672, align 2, !tbaa !45
  %1674 = zext i16 %1673 to i64
  %1675 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1674
  %1676 = load double, ptr %1675, align 8, !tbaa !69
  %1677 = getelementptr inbounds %class.Vector, ptr %1675, i64 0, i32 1
  %1678 = load double, ptr %1677, align 8, !tbaa !68
  %1679 = getelementptr inbounds %class.Vector, ptr %1675, i64 0, i32 2
  %1680 = load double, ptr %1679, align 8, !tbaa !50
  %1681 = fsub double %1666, %1676
  %1682 = fmul double %1681, %1681
  %1683 = fsub double %1667, %1678
  %1684 = tail call double @llvm.fmuladd.f64(double %1683, double %1683, double %1682)
  %1685 = fsub double %694, %1680
  %1686 = tail call double @llvm.fmuladd.f64(double %1685, double %1685, double %1684)
  %1687 = fcmp ugt double %1686, %24
  br i1 %1687, label %1702, label %1688

1688:                                             ; preds = %1668
  %1689 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1674
  %1690 = load i32, ptr %1689, align 4
  %1691 = shl i32 %1690, 2
  %1692 = ashr exact i32 %1691, 2
  %1693 = icmp slt i32 %1692, %719
  %1694 = icmp sgt i32 %1692, %721
  %1695 = select i1 %1693, i1 true, i1 %1694
  %1696 = select i1 %1695, ptr %1671, ptr %1670
  %1697 = zext i1 %1695 to i64
  %1698 = getelementptr inbounds i16, ptr %1671, i64 %1697
  %1699 = xor i1 %1695, true
  %1700 = zext i1 %1699 to i64
  %1701 = getelementptr inbounds i16, ptr %1670, i64 %1700
  store i16 %1673, ptr %1696, align 2, !tbaa !45
  br label %1702

1702:                                             ; preds = %1688, %1668
  %1703 = phi ptr [ %1671, %1668 ], [ %1698, %1688 ]
  %1704 = phi ptr [ %1670, %1668 ], [ %1701, %1688 ]
  %1705 = add nsw i64 %1669, 1
  %1706 = icmp eq i64 %1705, %1665
  br i1 %1706, label %1707, label %1668

1707:                                             ; preds = %1481, %1702, %1531, %1426, %1658, %1488, %1536
  %1708 = phi ptr [ %1303, %1536 ], [ %1303, %1488 ], [ %1660, %1658 ], [ %1303, %1426 ], [ %1532, %1531 ], [ %1703, %1702 ], [ %1482, %1481 ]
  %1709 = phi ptr [ %471, %1536 ], [ %471, %1488 ], [ %1661, %1658 ], [ %471, %1426 ], [ %1533, %1531 ], [ %1704, %1702 ], [ %1483, %1481 ]
  %1710 = ptrtoint ptr %1709 to i64
  %1711 = sub i64 %1710, %647
  %1712 = lshr exact i64 %1711, 1
  %1713 = trunc i64 %1712 to i32
  %1714 = icmp sgt i32 %1713, 0
  br i1 %1714, label %1715, label %1815

1715:                                             ; preds = %1707
  %1716 = and i64 %1712, 4294967295
  %1717 = and i64 %1712, 1
  %1718 = icmp eq i64 %1716, 1
  br i1 %1718, label %1783, label %1719

1719:                                             ; preds = %1715
  %1720 = sub nsw i64 %1716, %1717
  br label %1721

1721:                                             ; preds = %1776, %1719
  %1722 = phi i64 [ 0, %1719 ], [ %1780, %1776 ]
  %1723 = phi ptr [ %1708, %1719 ], [ %1779, %1776 ]
  %1724 = phi ptr [ %333, %1719 ], [ %1778, %1776 ]
  %1725 = phi ptr [ %379, %1719 ], [ %1777, %1776 ]
  %1726 = phi i64 [ 0, %1719 ], [ %1781, %1776 ]
  %1727 = getelementptr inbounds i16, ptr %471, i64 %1722
  %1728 = load i16, ptr %1727, align 2, !tbaa !45
  %1729 = zext i16 %1728 to i64
  %1730 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1729
  %1731 = load i32, ptr %1730, align 4
  %1732 = shl i32 %1731, 2
  %1733 = ashr exact i32 %1732, 2
  %1734 = sext i32 %1733 to i64
  %1735 = getelementptr inbounds i8, ptr %956, i64 %1734
  %1736 = load i8, ptr %1735, align 1, !tbaa !59
  %1737 = sext i8 %1736 to i32
  switch i32 %1737, label %1749 [
    i32 0, label %1738
    i32 1, label %1740
    i32 2, label %1742
  ]

1738:                                             ; preds = %1721
  %1739 = getelementptr inbounds i16, ptr %1723, i64 1
  br label %1744

1740:                                             ; preds = %1721
  %1741 = getelementptr inbounds i16, ptr %1724, i64 1
  br label %1744

1742:                                             ; preds = %1721
  %1743 = getelementptr inbounds i16, ptr %1725, i64 1
  br label %1744

1744:                                             ; preds = %1738, %1740, %1742
  %1745 = phi ptr [ %1725, %1742 ], [ %1724, %1740 ], [ %1723, %1738 ]
  %1746 = phi ptr [ %1743, %1742 ], [ %1725, %1740 ], [ %1725, %1738 ]
  %1747 = phi ptr [ %1724, %1742 ], [ %1741, %1740 ], [ %1724, %1738 ]
  %1748 = phi ptr [ %1723, %1742 ], [ %1723, %1740 ], [ %1739, %1738 ]
  store i16 %1728, ptr %1745, align 2, !tbaa !45
  br label %1749

1749:                                             ; preds = %1744, %1721
  %1750 = phi ptr [ %1725, %1721 ], [ %1746, %1744 ]
  %1751 = phi ptr [ %1724, %1721 ], [ %1747, %1744 ]
  %1752 = phi ptr [ %1723, %1721 ], [ %1748, %1744 ]
  %1753 = or i64 %1722, 1
  %1754 = getelementptr inbounds i16, ptr %471, i64 %1753
  %1755 = load i16, ptr %1754, align 2, !tbaa !45
  %1756 = zext i16 %1755 to i64
  %1757 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1756
  %1758 = load i32, ptr %1757, align 4
  %1759 = shl i32 %1758, 2
  %1760 = ashr exact i32 %1759, 2
  %1761 = sext i32 %1760 to i64
  %1762 = getelementptr inbounds i8, ptr %956, i64 %1761
  %1763 = load i8, ptr %1762, align 1, !tbaa !59
  %1764 = sext i8 %1763 to i32
  switch i32 %1764, label %1776 [
    i32 0, label %1769
    i32 1, label %1767
    i32 2, label %1765
  ]

1765:                                             ; preds = %1749
  %1766 = getelementptr inbounds i16, ptr %1750, i64 1
  br label %1771

1767:                                             ; preds = %1749
  %1768 = getelementptr inbounds i16, ptr %1751, i64 1
  br label %1771

1769:                                             ; preds = %1749
  %1770 = getelementptr inbounds i16, ptr %1752, i64 1
  br label %1771

1771:                                             ; preds = %1769, %1767, %1765
  %1772 = phi ptr [ %1750, %1765 ], [ %1751, %1767 ], [ %1752, %1769 ]
  %1773 = phi ptr [ %1766, %1765 ], [ %1750, %1767 ], [ %1750, %1769 ]
  %1774 = phi ptr [ %1751, %1765 ], [ %1768, %1767 ], [ %1751, %1769 ]
  %1775 = phi ptr [ %1752, %1765 ], [ %1752, %1767 ], [ %1770, %1769 ]
  store i16 %1755, ptr %1772, align 2, !tbaa !45
  br label %1776

1776:                                             ; preds = %1771, %1749
  %1777 = phi ptr [ %1750, %1749 ], [ %1773, %1771 ]
  %1778 = phi ptr [ %1751, %1749 ], [ %1774, %1771 ]
  %1779 = phi ptr [ %1752, %1749 ], [ %1775, %1771 ]
  %1780 = add nuw nsw i64 %1722, 2
  %1781 = add i64 %1726, 2
  %1782 = icmp eq i64 %1781, %1720
  br i1 %1782, label %1783, label %1721

1783:                                             ; preds = %1776, %1715
  %1784 = phi ptr [ undef, %1715 ], [ %1777, %1776 ]
  %1785 = phi ptr [ undef, %1715 ], [ %1778, %1776 ]
  %1786 = phi ptr [ undef, %1715 ], [ %1779, %1776 ]
  %1787 = phi i64 [ 0, %1715 ], [ %1780, %1776 ]
  %1788 = phi ptr [ %1708, %1715 ], [ %1779, %1776 ]
  %1789 = phi ptr [ %333, %1715 ], [ %1778, %1776 ]
  %1790 = phi ptr [ %379, %1715 ], [ %1777, %1776 ]
  %1791 = icmp eq i64 %1717, 0
  br i1 %1791, label %1815, label %1792

1792:                                             ; preds = %1783
  %1793 = getelementptr inbounds i16, ptr %471, i64 %1787
  %1794 = load i16, ptr %1793, align 2, !tbaa !45
  %1795 = zext i16 %1794 to i64
  %1796 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1795
  %1797 = load i32, ptr %1796, align 4
  %1798 = shl i32 %1797, 2
  %1799 = ashr exact i32 %1798, 2
  %1800 = sext i32 %1799 to i64
  %1801 = getelementptr inbounds i8, ptr %956, i64 %1800
  %1802 = load i8, ptr %1801, align 1, !tbaa !59
  %1803 = sext i8 %1802 to i32
  switch i32 %1803, label %1815 [
    i32 0, label %1808
    i32 1, label %1806
    i32 2, label %1804
  ]

1804:                                             ; preds = %1792
  %1805 = getelementptr inbounds i16, ptr %1790, i64 1
  br label %1810

1806:                                             ; preds = %1792
  %1807 = getelementptr inbounds i16, ptr %1789, i64 1
  br label %1810

1808:                                             ; preds = %1792
  %1809 = getelementptr inbounds i16, ptr %1788, i64 1
  br label %1810

1810:                                             ; preds = %1808, %1806, %1804
  %1811 = phi ptr [ %1790, %1804 ], [ %1789, %1806 ], [ %1788, %1808 ]
  %1812 = phi ptr [ %1805, %1804 ], [ %1790, %1806 ], [ %1790, %1808 ]
  %1813 = phi ptr [ %1789, %1804 ], [ %1807, %1806 ], [ %1789, %1808 ]
  %1814 = phi ptr [ %1788, %1804 ], [ %1788, %1806 ], [ %1809, %1808 ]
  store i16 %1794, ptr %1811, align 2, !tbaa !45
  br label %1815

1815:                                             ; preds = %1783, %1810, %1792, %1707
  %1816 = phi ptr [ %379, %1707 ], [ %1784, %1783 ], [ %1790, %1792 ], [ %1812, %1810 ]
  %1817 = phi ptr [ %333, %1707 ], [ %1785, %1783 ], [ %1789, %1792 ], [ %1813, %1810 ]
  %1818 = phi ptr [ %1708, %1707 ], [ %1786, %1783 ], [ %1788, %1792 ], [ %1814, %1810 ]
  %1819 = ptrtoint ptr %1818 to i64
  %1820 = ptrtoint ptr %1303 to i64
  %1821 = sub i64 %1819, %1820
  %1822 = lshr exact i64 %1821, 1
  %1823 = trunc i64 %1822 to i32
  %1824 = icmp eq i32 %1823, 0
  %1825 = shl i64 %1821, 31
  br i1 %1824, label %1831, label %1826

1826:                                             ; preds = %1815
  %1827 = add i64 %1825, -4294967296
  %1828 = ashr i64 %1827, 32
  %1829 = getelementptr inbounds i16, ptr %1303, i64 %1828
  %1830 = load i16, ptr %1829, align 2, !tbaa !45
  br label %1831

1831:                                             ; preds = %1815, %1826
  %1832 = phi i16 [ %1830, %1826 ], [ -1, %1815 ]
  %1833 = ashr i64 %1825, 32
  %1834 = getelementptr inbounds i16, ptr %1303, i64 %1833
  store i16 %1832, ptr %1834, align 2, !tbaa !45
  %1835 = trunc i64 %1822 to i16
  %1836 = add i16 %1835, 1
  %1837 = load i32, ptr %17, align 8, !tbaa !19
  %1838 = sext i32 %1837 to i64
  %1839 = getelementptr inbounds i16, ptr %1299, i64 %1838
  store i16 %1836, ptr %1839, align 2, !tbaa !45
  %1840 = add nsw i32 %1823, 2
  %1841 = add nsw i32 %1840, %1837
  %1842 = ptrtoint ptr %1817 to i64
  %1843 = sub i64 %1842, %648
  %1844 = lshr exact i64 %1843, 1
  %1845 = trunc i64 %1844 to i32
  %1846 = add nsw i32 %1841, 1
  %1847 = sext i32 %1846 to i64
  %1848 = getelementptr i16, ptr %1299, i64 %1847
  %1849 = icmp sgt i32 %1845, 0
  br i1 %1849, label %1850, label %1940

1850:                                             ; preds = %1831
  %1851 = and i64 %1844, 4294967295
  %1852 = icmp ult i64 %1851, 8
  br i1 %1852, label %1896, label %1853

1853:                                             ; preds = %1850
  %1854 = shl nsw i64 %1847, 1
  %1855 = add i64 %1854, %1300
  %1856 = sub i64 %1855, %648
  %1857 = icmp ult i64 %1856, 128
  br i1 %1857, label %1896, label %1858

1858:                                             ; preds = %1853
  %1859 = icmp ult i64 %1851, 64
  br i1 %1859, label %1883, label %1860

1860:                                             ; preds = %1858
  %1861 = and i64 %1844, 63
  %1862 = sub nsw i64 %1851, %1861
  br label %1863

1863:                                             ; preds = %1863, %1860
  %1864 = phi i64 [ 0, %1860 ], [ %1877, %1863 ]
  %1865 = getelementptr inbounds i16, ptr %333, i64 %1864
  %1866 = load <16 x i16>, ptr %1865, align 2, !tbaa !45
  %1867 = getelementptr inbounds i16, ptr %1865, i64 16
  %1868 = load <16 x i16>, ptr %1867, align 2, !tbaa !45
  %1869 = getelementptr inbounds i16, ptr %1865, i64 32
  %1870 = load <16 x i16>, ptr %1869, align 2, !tbaa !45
  %1871 = getelementptr inbounds i16, ptr %1865, i64 48
  %1872 = load <16 x i16>, ptr %1871, align 2, !tbaa !45
  %1873 = getelementptr inbounds i16, ptr %1848, i64 %1864
  store <16 x i16> %1866, ptr %1873, align 2, !tbaa !45
  %1874 = getelementptr inbounds i16, ptr %1873, i64 16
  store <16 x i16> %1868, ptr %1874, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1873, i64 32
  store <16 x i16> %1870, ptr %1875, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1873, i64 48
  store <16 x i16> %1872, ptr %1876, align 2, !tbaa !45
  %1877 = add nuw i64 %1864, 64
  %1878 = icmp eq i64 %1877, %1862
  br i1 %1878, label %1879, label %1863, !llvm.loop !276

1879:                                             ; preds = %1863
  %1880 = icmp eq i64 %1861, 0
  br i1 %1880, label %1934, label %1881

1881:                                             ; preds = %1879
  %1882 = icmp ult i64 %1861, 8
  br i1 %1882, label %1896, label %1883

1883:                                             ; preds = %1858, %1881
  %1884 = phi i64 [ %1862, %1881 ], [ 0, %1858 ]
  %1885 = and i64 %1844, 7
  %1886 = sub nsw i64 %1851, %1885
  br label %1887

1887:                                             ; preds = %1887, %1883
  %1888 = phi i64 [ %1884, %1883 ], [ %1892, %1887 ]
  %1889 = getelementptr inbounds i16, ptr %333, i64 %1888
  %1890 = load <8 x i16>, ptr %1889, align 2, !tbaa !45
  %1891 = getelementptr inbounds i16, ptr %1848, i64 %1888
  store <8 x i16> %1890, ptr %1891, align 2, !tbaa !45
  %1892 = add nuw i64 %1888, 8
  %1893 = icmp eq i64 %1892, %1886
  br i1 %1893, label %1894, label %1887, !llvm.loop !277

1894:                                             ; preds = %1887
  %1895 = icmp eq i64 %1885, 0
  br i1 %1895, label %1934, label %1896

1896:                                             ; preds = %1853, %1850, %1881, %1894
  %1897 = phi i64 [ 0, %1850 ], [ 0, %1853 ], [ %1862, %1881 ], [ %1886, %1894 ]
  %1898 = sub i64 %1844, %1897
  %1899 = xor i64 %1897, -1
  %1900 = add nsw i64 %1851, %1899
  %1901 = and i64 %1898, 3
  %1902 = icmp eq i64 %1901, 0
  br i1 %1902, label %1912, label %1903

1903:                                             ; preds = %1896, %1903
  %1904 = phi i64 [ %1909, %1903 ], [ %1897, %1896 ]
  %1905 = phi i64 [ %1910, %1903 ], [ 0, %1896 ]
  %1906 = getelementptr inbounds i16, ptr %333, i64 %1904
  %1907 = load i16, ptr %1906, align 2, !tbaa !45
  %1908 = getelementptr inbounds i16, ptr %1848, i64 %1904
  store i16 %1907, ptr %1908, align 2, !tbaa !45
  %1909 = add nuw nsw i64 %1904, 1
  %1910 = add i64 %1905, 1
  %1911 = icmp eq i64 %1910, %1901
  br i1 %1911, label %1912, label %1903, !llvm.loop !278

1912:                                             ; preds = %1903, %1896
  %1913 = phi i64 [ %1897, %1896 ], [ %1909, %1903 ]
  %1914 = icmp ult i64 %1900, 3
  br i1 %1914, label %1934, label %1915

1915:                                             ; preds = %1912, %1915
  %1916 = phi i64 [ %1932, %1915 ], [ %1913, %1912 ]
  %1917 = getelementptr inbounds i16, ptr %333, i64 %1916
  %1918 = load i16, ptr %1917, align 2, !tbaa !45
  %1919 = getelementptr inbounds i16, ptr %1848, i64 %1916
  store i16 %1918, ptr %1919, align 2, !tbaa !45
  %1920 = add nuw nsw i64 %1916, 1
  %1921 = getelementptr inbounds i16, ptr %333, i64 %1920
  %1922 = load i16, ptr %1921, align 2, !tbaa !45
  %1923 = getelementptr inbounds i16, ptr %1848, i64 %1920
  store i16 %1922, ptr %1923, align 2, !tbaa !45
  %1924 = add nuw nsw i64 %1916, 2
  %1925 = getelementptr inbounds i16, ptr %333, i64 %1924
  %1926 = load i16, ptr %1925, align 2, !tbaa !45
  %1927 = getelementptr inbounds i16, ptr %1848, i64 %1924
  store i16 %1926, ptr %1927, align 2, !tbaa !45
  %1928 = add nuw nsw i64 %1916, 3
  %1929 = getelementptr inbounds i16, ptr %333, i64 %1928
  %1930 = load i16, ptr %1929, align 2, !tbaa !45
  %1931 = getelementptr inbounds i16, ptr %1848, i64 %1928
  store i16 %1930, ptr %1931, align 2, !tbaa !45
  %1932 = add nuw nsw i64 %1916, 4
  %1933 = icmp eq i64 %1932, %1851
  br i1 %1933, label %1934, label %1915, !llvm.loop !279

1934:                                             ; preds = %1912, %1915, %1879, %1894
  %1935 = shl i64 %1843, 31
  %1936 = add i64 %1935, -4294967296
  %1937 = ashr i64 %1936, 32
  %1938 = getelementptr inbounds i16, ptr %1848, i64 %1937
  %1939 = load i16, ptr %1938, align 2, !tbaa !45
  br label %1940

1940:                                             ; preds = %1831, %1934
  %1941 = phi i64 [ %1844, %1934 ], [ 0, %1831 ]
  %1942 = phi i16 [ %1939, %1934 ], [ -1, %1831 ]
  %1943 = and i64 %1941, 4294967295
  %1944 = getelementptr inbounds i16, ptr %1848, i64 %1943
  store i16 %1942, ptr %1944, align 2, !tbaa !45
  %1945 = trunc i64 %1844 to i16
  %1946 = add i16 %1945, 1
  %1947 = sext i32 %1841 to i64
  %1948 = getelementptr inbounds i16, ptr %1299, i64 %1947
  store i16 %1946, ptr %1948, align 2, !tbaa !45
  %1949 = add nsw i32 %1845, 2
  %1950 = add nsw i32 %1949, %1841
  %1951 = ptrtoint ptr %1816 to i64
  %1952 = sub i64 %1951, %649
  %1953 = lshr exact i64 %1952, 1
  %1954 = trunc i64 %1953 to i32
  %1955 = add nsw i32 %1950, 1
  %1956 = sext i32 %1955 to i64
  %1957 = getelementptr i16, ptr %1299, i64 %1956
  %1958 = icmp sgt i32 %1954, 0
  br i1 %1958, label %1959, label %2049

1959:                                             ; preds = %1940
  %1960 = and i64 %1953, 4294967295
  %1961 = icmp ult i64 %1960, 8
  br i1 %1961, label %2005, label %1962

1962:                                             ; preds = %1959
  %1963 = shl nsw i64 %1956, 1
  %1964 = add i64 %1963, %1300
  %1965 = sub i64 %1964, %649
  %1966 = icmp ult i64 %1965, 128
  br i1 %1966, label %2005, label %1967

1967:                                             ; preds = %1962
  %1968 = icmp ult i64 %1960, 64
  br i1 %1968, label %1992, label %1969

1969:                                             ; preds = %1967
  %1970 = and i64 %1953, 63
  %1971 = sub nsw i64 %1960, %1970
  br label %1972

1972:                                             ; preds = %1972, %1969
  %1973 = phi i64 [ 0, %1969 ], [ %1986, %1972 ]
  %1974 = getelementptr inbounds i16, ptr %379, i64 %1973
  %1975 = load <16 x i16>, ptr %1974, align 2, !tbaa !45
  %1976 = getelementptr inbounds i16, ptr %1974, i64 16
  %1977 = load <16 x i16>, ptr %1976, align 2, !tbaa !45
  %1978 = getelementptr inbounds i16, ptr %1974, i64 32
  %1979 = load <16 x i16>, ptr %1978, align 2, !tbaa !45
  %1980 = getelementptr inbounds i16, ptr %1974, i64 48
  %1981 = load <16 x i16>, ptr %1980, align 2, !tbaa !45
  %1982 = getelementptr inbounds i16, ptr %1957, i64 %1973
  store <16 x i16> %1975, ptr %1982, align 2, !tbaa !45
  %1983 = getelementptr inbounds i16, ptr %1982, i64 16
  store <16 x i16> %1977, ptr %1983, align 2, !tbaa !45
  %1984 = getelementptr inbounds i16, ptr %1982, i64 32
  store <16 x i16> %1979, ptr %1984, align 2, !tbaa !45
  %1985 = getelementptr inbounds i16, ptr %1982, i64 48
  store <16 x i16> %1981, ptr %1985, align 2, !tbaa !45
  %1986 = add nuw i64 %1973, 64
  %1987 = icmp eq i64 %1986, %1971
  br i1 %1987, label %1988, label %1972, !llvm.loop !280

1988:                                             ; preds = %1972
  %1989 = icmp eq i64 %1970, 0
  br i1 %1989, label %2043, label %1990

1990:                                             ; preds = %1988
  %1991 = icmp ult i64 %1970, 8
  br i1 %1991, label %2005, label %1992

1992:                                             ; preds = %1967, %1990
  %1993 = phi i64 [ %1971, %1990 ], [ 0, %1967 ]
  %1994 = and i64 %1953, 7
  %1995 = sub nsw i64 %1960, %1994
  br label %1996

1996:                                             ; preds = %1996, %1992
  %1997 = phi i64 [ %1993, %1992 ], [ %2001, %1996 ]
  %1998 = getelementptr inbounds i16, ptr %379, i64 %1997
  %1999 = load <8 x i16>, ptr %1998, align 2, !tbaa !45
  %2000 = getelementptr inbounds i16, ptr %1957, i64 %1997
  store <8 x i16> %1999, ptr %2000, align 2, !tbaa !45
  %2001 = add nuw i64 %1997, 8
  %2002 = icmp eq i64 %2001, %1995
  br i1 %2002, label %2003, label %1996, !llvm.loop !281

2003:                                             ; preds = %1996
  %2004 = icmp eq i64 %1994, 0
  br i1 %2004, label %2043, label %2005

2005:                                             ; preds = %1962, %1959, %1990, %2003
  %2006 = phi i64 [ 0, %1959 ], [ 0, %1962 ], [ %1971, %1990 ], [ %1995, %2003 ]
  %2007 = sub i64 %1953, %2006
  %2008 = xor i64 %2006, -1
  %2009 = add nsw i64 %1960, %2008
  %2010 = and i64 %2007, 3
  %2011 = icmp eq i64 %2010, 0
  br i1 %2011, label %2021, label %2012

2012:                                             ; preds = %2005, %2012
  %2013 = phi i64 [ %2018, %2012 ], [ %2006, %2005 ]
  %2014 = phi i64 [ %2019, %2012 ], [ 0, %2005 ]
  %2015 = getelementptr inbounds i16, ptr %379, i64 %2013
  %2016 = load i16, ptr %2015, align 2, !tbaa !45
  %2017 = getelementptr inbounds i16, ptr %1957, i64 %2013
  store i16 %2016, ptr %2017, align 2, !tbaa !45
  %2018 = add nuw nsw i64 %2013, 1
  %2019 = add i64 %2014, 1
  %2020 = icmp eq i64 %2019, %2010
  br i1 %2020, label %2021, label %2012, !llvm.loop !282

2021:                                             ; preds = %2012, %2005
  %2022 = phi i64 [ %2006, %2005 ], [ %2018, %2012 ]
  %2023 = icmp ult i64 %2009, 3
  br i1 %2023, label %2043, label %2024

2024:                                             ; preds = %2021, %2024
  %2025 = phi i64 [ %2041, %2024 ], [ %2022, %2021 ]
  %2026 = getelementptr inbounds i16, ptr %379, i64 %2025
  %2027 = load i16, ptr %2026, align 2, !tbaa !45
  %2028 = getelementptr inbounds i16, ptr %1957, i64 %2025
  store i16 %2027, ptr %2028, align 2, !tbaa !45
  %2029 = add nuw nsw i64 %2025, 1
  %2030 = getelementptr inbounds i16, ptr %379, i64 %2029
  %2031 = load i16, ptr %2030, align 2, !tbaa !45
  %2032 = getelementptr inbounds i16, ptr %1957, i64 %2029
  store i16 %2031, ptr %2032, align 2, !tbaa !45
  %2033 = add nuw nsw i64 %2025, 2
  %2034 = getelementptr inbounds i16, ptr %379, i64 %2033
  %2035 = load i16, ptr %2034, align 2, !tbaa !45
  %2036 = getelementptr inbounds i16, ptr %1957, i64 %2033
  store i16 %2035, ptr %2036, align 2, !tbaa !45
  %2037 = add nuw nsw i64 %2025, 3
  %2038 = getelementptr inbounds i16, ptr %379, i64 %2037
  %2039 = load i16, ptr %2038, align 2, !tbaa !45
  %2040 = getelementptr inbounds i16, ptr %1957, i64 %2037
  store i16 %2039, ptr %2040, align 2, !tbaa !45
  %2041 = add nuw nsw i64 %2025, 4
  %2042 = icmp eq i64 %2041, %1960
  br i1 %2042, label %2043, label %2024, !llvm.loop !283

2043:                                             ; preds = %2021, %2024, %1988, %2003
  %2044 = shl i64 %1952, 31
  %2045 = add i64 %2044, -4294967296
  %2046 = ashr i64 %2045, 32
  %2047 = getelementptr inbounds i16, ptr %1957, i64 %2046
  %2048 = load i16, ptr %2047, align 2, !tbaa !45
  br label %2049

2049:                                             ; preds = %1940, %2043
  %2050 = phi i64 [ %1953, %2043 ], [ 0, %1940 ]
  %2051 = phi i16 [ %2048, %2043 ], [ -1, %1940 ]
  %2052 = and i64 %2050, 4294967295
  %2053 = getelementptr inbounds i16, ptr %1957, i64 %2052
  store i16 %2051, ptr %2053, align 2, !tbaa !45
  %2054 = trunc i64 %1953 to i16
  %2055 = add i16 %2054, 1
  %2056 = sext i32 %1950 to i64
  %2057 = getelementptr inbounds i16, ptr %1299, i64 %2056
  store i16 %2055, ptr %2057, align 2, !tbaa !45
  %2058 = add nsw i32 %1954, 2
  %2059 = add nsw i32 %2058, %1950
  %2060 = select i1 %146, i32 0, i32 %2059
  store i32 %2060, ptr %17, align 8
  br label %2092

2061:                                             ; preds = %688
  %2062 = load ptr, ptr %12, align 8, !tbaa !47
  %2063 = load i32, ptr %17, align 8, !tbaa !19
  %2064 = add i32 %2063, 1
  %2065 = sext i32 %2064 to i64
  %2066 = getelementptr inbounds i16, ptr %2062, i64 %2065
  %2067 = sext i32 %2063 to i64
  %2068 = getelementptr inbounds i16, ptr %2062, i64 %2067
  %2069 = load i16, ptr %2068, align 2, !tbaa !45
  %2070 = zext i16 %2069 to i32
  %2071 = add i32 %2064, %2070
  %2072 = add nsw i32 %2070, -1
  %2073 = add i32 %2071, 1
  %2074 = sext i32 %2073 to i64
  %2075 = getelementptr inbounds i16, ptr %2062, i64 %2074
  %2076 = sext i32 %2071 to i64
  %2077 = getelementptr inbounds i16, ptr %2062, i64 %2076
  %2078 = load i16, ptr %2077, align 2, !tbaa !45
  %2079 = zext i16 %2078 to i32
  %2080 = add i32 %2073, %2079
  %2081 = add nsw i32 %2079, -1
  %2082 = add i32 %2080, 1
  %2083 = sext i32 %2082 to i64
  %2084 = getelementptr inbounds i16, ptr %2062, i64 %2083
  %2085 = sext i32 %2080 to i64
  %2086 = getelementptr inbounds i16, ptr %2062, i64 %2085
  %2087 = load i16, ptr %2086, align 2, !tbaa !45
  %2088 = zext i16 %2087 to i32
  %2089 = add i32 %2082, %2088
  store i32 %2089, ptr %17, align 8, !tbaa !19
  %2090 = add nsw i32 %2088, -1
  %2091 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2092

2092:                                             ; preds = %2049, %2061
  %2093 = phi i32 [ %2091, %2061 ], [ %1304, %2049 ]
  %2094 = phi i32 [ %2081, %2061 ], [ %1845, %2049 ]
  %2095 = phi ptr [ %2084, %2061 ], [ %1957, %2049 ]
  %2096 = phi i32 [ %2090, %2061 ], [ %1954, %2049 ]
  %2097 = phi ptr [ %2075, %2061 ], [ %1848, %2049 ]
  %2098 = phi i32 [ %2072, %2061 ], [ %1823, %2049 ]
  %2099 = phi ptr [ %2066, %2061 ], [ %1303, %2049 ]
  %2100 = phi i32 [ %671, %2061 ], [ %1261, %2049 ]
  %2101 = phi i32 [ %670, %2061 ], [ %1262, %2049 ]
  %2102 = phi i32 [ %669, %2061 ], [ %1263, %2049 ]
  %2103 = phi i32 [ %668, %2061 ], [ %1264, %2049 ]
  %2104 = phi ptr [ %666, %2061 ], [ %957, %2049 ]
  %2105 = phi ptr [ %665, %2061 ], [ %958, %2049 ]
  %2106 = phi ptr [ %664, %2061 ], [ %959, %2049 ]
  %2107 = icmp eq i32 %2093, 0
  %2108 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2109 = icmp ne i32 %2108, 0
  %2110 = select i1 %2107, i1 true, i1 %2109
  br i1 %2110, label %2115, label %2111

2111:                                             ; preds = %2092
  %2112 = load i8, ptr %695, align 2, !tbaa !52
  %2113 = icmp eq i8 %2112, 1
  %2114 = select i1 %2113, double 1.000000e+00, double -1.000000e+00
  br label %2115

2115:                                             ; preds = %2092, %2111
  %2116 = phi double [ %2114, %2111 ], [ 0.000000e+00, %2092 ]
  %2117 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %673, i32 1
  %2118 = load float, ptr %2117, align 8, !tbaa !81
  %2119 = fpext float %2118 to double
  %2120 = fmul double %2119, 0x4074C104816F0069
  %2121 = fmul double %32, %2120
  %2122 = fmul double %28, %2121
  %2123 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2124 = extractelement <2 x double> %691, i64 0
  %2125 = extractelement <2 x double> %691, i64 1
  %2126 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2123, double noundef %2124, double noundef %2125, double noundef %694, ptr noundef %45, ptr noundef nonnull %2099, i32 noundef %2098, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2127 = icmp sgt i32 %2126, 0
  br i1 %2127, label %2128, label %2255

2128:                                             ; preds = %2115
  %2129 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2130 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2131 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2132 = mul nsw i32 %2131, %697
  %2133 = mul i32 %2130, 3
  %2134 = mul nsw i32 %709, 3
  %2135 = sext i32 %2134 to i64
  %2136 = add nsw i32 %2134, 1
  %2137 = sext i32 %2136 to i64
  %2138 = add nsw i32 %2134, 2
  %2139 = sext i32 %2138 to i64
  %2140 = zext i32 %2126 to i64
  br label %2141

2141:                                             ; preds = %2128, %2141
  %2142 = phi i64 [ 0, %2128 ], [ %2253, %2141 ]
  %2143 = phi double [ 0.000000e+00, %2128 ], [ %2198, %2141 ]
  %2144 = phi <2 x double> [ zeroinitializer, %2128 ], [ %2194, %2141 ]
  %2145 = shl nuw nsw i64 %2142, 1
  %2146 = getelementptr inbounds i32, ptr %145, i64 %2145
  %2147 = load i32, ptr %2146, align 4, !tbaa !5
  %2148 = ashr i32 %2147, 14
  %2149 = add nsw i32 %2148, %38
  %2150 = getelementptr inbounds i16, ptr %98, i64 %2142
  %2151 = load i16, ptr %2150, align 2, !tbaa !45
  %2152 = zext i16 %2151 to i64
  %2153 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2152
  %2154 = getelementptr inbounds double, ptr %144, i64 %2142
  %2155 = load double, ptr %2154, align 8, !tbaa !15
  %2156 = sext i32 %2149 to i64
  %2157 = getelementptr inbounds double, ptr %2129, i64 %2156
  %2158 = load double, ptr %2157, align 8, !tbaa !15
  %2159 = fsub double %2155, %2158
  %2160 = shl nsw i32 %2149, 4
  %2161 = sext i32 %2160 to i64
  %2162 = getelementptr inbounds double, ptr %30, i64 %2161
  %2163 = getelementptr inbounds %class.Vector, ptr %629, i64 %2152
  %2164 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2152, i32 1
  %2165 = load float, ptr %2164, align 8, !tbaa !81
  %2166 = fpext float %2165 to double
  %2167 = fmul double %2122, %2166
  %2168 = getelementptr inbounds %class.Vector, ptr %2153, i64 0, i32 2
  %2169 = load double, ptr %2168, align 8, !tbaa !50
  %2170 = fsub double %694, %2169
  %2171 = getelementptr inbounds double, ptr %2162, i64 12
  %2172 = load double, ptr %2171, align 8, !tbaa !15
  %2173 = getelementptr inbounds double, ptr %2162, i64 13
  %2174 = load double, ptr %2173, align 8, !tbaa !15
  %2175 = getelementptr inbounds double, ptr %2162, i64 14
  %2176 = load double, ptr %2175, align 8, !tbaa !15
  %2177 = fmul double %2167, %2172
  %2178 = fmul double %2167, %2174
  %2179 = fmul double %2167, %2176
  %2180 = tail call double @llvm.fmuladd.f64(double %2159, double %2177, double %2178)
  %2181 = tail call double @llvm.fmuladd.f64(double %2180, double %2159, double %2179)
  %2182 = fmul double %2116, %2181
  %2183 = load double, ptr %651, align 8, !tbaa !15
  %2184 = tail call double @llvm.fmuladd.f64(double %2182, double %2170, double %2183)
  %2185 = load <2 x double>, ptr %2153, align 8, !tbaa !15
  %2186 = fsub <2 x double> %691, %2185
  %2187 = load <2 x double>, ptr %650, align 8, !tbaa !15
  %2188 = insertelement <2 x double> poison, double %2182, i64 0
  %2189 = shufflevector <2 x double> %2188, <2 x double> poison, <2 x i32> zeroinitializer
  %2190 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2189, <2 x double> %2186, <2 x double> %2187)
  store <2 x double> %2190, ptr %650, align 8, !tbaa !15
  store double %2184, ptr %651, align 8, !tbaa !15
  %2191 = insertelement <2 x double> poison, double %2181, i64 0
  %2192 = shufflevector <2 x double> %2191, <2 x double> poison, <2 x i32> zeroinitializer
  %2193 = fmul <2 x double> %2186, %2192
  %2194 = fadd <2 x double> %2144, %2193
  %2195 = load <2 x double>, ptr %2163, align 8, !tbaa !15
  %2196 = fsub <2 x double> %2195, %2193
  store <2 x double> %2196, ptr %2163, align 8, !tbaa !15
  %2197 = fmul double %2170, %2181
  %2198 = fadd double %2143, %2197
  %2199 = getelementptr inbounds %class.Vector, ptr %629, i64 %2152, i32 2
  %2200 = load double, ptr %2199, align 8, !tbaa !89
  %2201 = fsub double %2200, %2197
  store double %2201, ptr %2199, align 8, !tbaa !89
  %2202 = load double, ptr %2168, align 8, !tbaa !50
  %2203 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2204 = fsub double %2202, %2203
  %2205 = fmul double %10, %2204
  %2206 = tail call double @llvm.floor.f64(double %2205)
  %2207 = fptosi double %2206 to i32
  %2208 = icmp slt i32 %2207, 0
  %2209 = select i1 %2208, i32 %2130, i32 0
  %2210 = icmp sgt i32 %2130, %2207
  %2211 = select i1 %2210, i32 0, i32 %2130
  %2212 = sub i32 %2207, %2211
  %2213 = add i32 %2212, %2209
  %2214 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2152, i32 3
  %2215 = load i8, ptr %2214, align 2, !tbaa !52
  %2216 = zext i8 %2215 to i32
  %2217 = fmul <2 x double> %2186, %2193
  %2218 = extractelement <2 x double> %2217, i64 0
  %2219 = fmul <2 x double> %2186, %2193
  %2220 = extractelement <2 x double> %2219, i64 1
  %2221 = fmul double %2170, %2197
  %2222 = add nsw i32 %2132, %2216
  %2223 = mul i32 %2133, %2222
  %2224 = sext i32 %2223 to i64
  %2225 = getelementptr inbounds double, ptr %8, i64 %2224
  %2226 = fmul double %2218, 5.000000e-01
  %2227 = fmul double %2220, 5.000000e-01
  %2228 = fmul double %2221, 5.000000e-01
  %2229 = getelementptr inbounds double, ptr %2225, i64 %2135
  %2230 = load double, ptr %2229, align 8, !tbaa !15
  %2231 = fadd double %2226, %2230
  store double %2231, ptr %2229, align 8, !tbaa !15
  %2232 = getelementptr inbounds double, ptr %2225, i64 %2137
  %2233 = load double, ptr %2232, align 8, !tbaa !15
  %2234 = fadd double %2227, %2233
  store double %2234, ptr %2232, align 8, !tbaa !15
  %2235 = getelementptr inbounds double, ptr %2225, i64 %2139
  %2236 = load double, ptr %2235, align 8, !tbaa !15
  %2237 = fadd double %2228, %2236
  store double %2237, ptr %2235, align 8, !tbaa !15
  %2238 = mul nsw i32 %2213, 3
  %2239 = sext i32 %2238 to i64
  %2240 = getelementptr inbounds double, ptr %2225, i64 %2239
  %2241 = load double, ptr %2240, align 8, !tbaa !15
  %2242 = fadd double %2226, %2241
  store double %2242, ptr %2240, align 8, !tbaa !15
  %2243 = add nsw i32 %2238, 1
  %2244 = sext i32 %2243 to i64
  %2245 = getelementptr inbounds double, ptr %2225, i64 %2244
  %2246 = load double, ptr %2245, align 8, !tbaa !15
  %2247 = fadd double %2227, %2246
  store double %2247, ptr %2245, align 8, !tbaa !15
  %2248 = add nsw i32 %2238, 2
  %2249 = sext i32 %2248 to i64
  %2250 = getelementptr inbounds double, ptr %2225, i64 %2249
  %2251 = load double, ptr %2250, align 8, !tbaa !15
  %2252 = fadd double %2228, %2251
  store double %2252, ptr %2250, align 8, !tbaa !15
  %2253 = add nuw nsw i64 %2142, 1
  %2254 = icmp eq i64 %2253, %2140
  br i1 %2254, label %2255, label %2141

2255:                                             ; preds = %2141, %2115
  %2256 = phi double [ 0.000000e+00, %2115 ], [ %2198, %2141 ]
  %2257 = phi <2 x double> [ zeroinitializer, %2115 ], [ %2194, %2141 ]
  %2258 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2259 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2258, double noundef %2124, double noundef %2125, double noundef %694, ptr noundef %45, ptr noundef %2095, i32 noundef %2096, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2260 = add nsw i32 %2259, %662
  %2261 = icmp sgt i32 %2259, 0
  br i1 %2261, label %2262, label %2401

2262:                                             ; preds = %2255
  %2263 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2264 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2265 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2266 = mul nsw i32 %2265, %697
  %2267 = mul i32 %2264, 3
  %2268 = mul nsw i32 %709, 3
  %2269 = sext i32 %2268 to i64
  %2270 = add nsw i32 %2268, 1
  %2271 = sext i32 %2270 to i64
  %2272 = add nsw i32 %2268, 2
  %2273 = sext i32 %2272 to i64
  %2274 = zext i32 %2259 to i64
  br label %2275

2275:                                             ; preds = %2262, %2275
  %2276 = phi i64 [ 0, %2262 ], [ %2399, %2275 ]
  %2277 = phi double [ %2256, %2262 ], [ %2344, %2275 ]
  %2278 = phi <2 x double> [ %2257, %2262 ], [ %2340, %2275 ]
  %2279 = shl nuw nsw i64 %2276, 1
  %2280 = getelementptr inbounds i32, ptr %145, i64 %2279
  %2281 = load i32, ptr %2280, align 4, !tbaa !5
  %2282 = ashr i32 %2281, 14
  %2283 = add nsw i32 %2282, %38
  %2284 = getelementptr inbounds i16, ptr %98, i64 %2276
  %2285 = load i16, ptr %2284, align 2, !tbaa !45
  %2286 = zext i16 %2285 to i64
  %2287 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2286
  %2288 = getelementptr inbounds double, ptr %144, i64 %2276
  %2289 = load double, ptr %2288, align 8, !tbaa !15
  %2290 = sext i32 %2283 to i64
  %2291 = getelementptr inbounds double, ptr %2263, i64 %2290
  %2292 = load double, ptr %2291, align 8, !tbaa !15
  %2293 = fsub double %2289, %2292
  %2294 = shl nsw i32 %2283, 4
  %2295 = sext i32 %2294 to i64
  %2296 = getelementptr inbounds double, ptr %30, i64 %2295
  %2297 = getelementptr inbounds %class.Vector, ptr %629, i64 %2286
  %2298 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2286, i32 1
  %2299 = load float, ptr %2298, align 8, !tbaa !81
  %2300 = fpext float %2299 to double
  %2301 = fmul double %2122, %2300
  %2302 = getelementptr inbounds %class.Vector, ptr %2287, i64 0, i32 2
  %2303 = load double, ptr %2302, align 8, !tbaa !50
  %2304 = fsub double %694, %2303
  %2305 = shl nsw i32 %2283, 2
  %2306 = sext i32 %2305 to i64
  %2307 = getelementptr inbounds double, ptr %31, i64 %2306
  %2308 = getelementptr inbounds double, ptr %2296, i64 12
  %2309 = load double, ptr %2308, align 8, !tbaa !15
  %2310 = getelementptr inbounds double, ptr %2296, i64 13
  %2311 = load double, ptr %2310, align 8, !tbaa !15
  %2312 = getelementptr inbounds double, ptr %2296, i64 14
  %2313 = load double, ptr %2312, align 8, !tbaa !15
  %2314 = getelementptr inbounds double, ptr %2307, i64 1
  %2315 = load double, ptr %2314, align 8, !tbaa !15
  %2316 = tail call double @llvm.fmuladd.f64(double %652, double %2315, double %2313)
  %2317 = getelementptr inbounds double, ptr %2307, i64 2
  %2318 = load double, ptr %2317, align 8, !tbaa !15
  %2319 = tail call double @llvm.fmuladd.f64(double %653, double %2318, double %2311)
  %2320 = getelementptr inbounds double, ptr %2307, i64 3
  %2321 = load double, ptr %2320, align 8, !tbaa !15
  %2322 = tail call double @llvm.fmuladd.f64(double %654, double %2321, double %2309)
  %2323 = fmul double %2301, %2322
  %2324 = fmul double %2301, %2319
  %2325 = fmul double %2301, %2316
  %2326 = tail call double @llvm.fmuladd.f64(double %2293, double %2323, double %2324)
  %2327 = tail call double @llvm.fmuladd.f64(double %2326, double %2293, double %2325)
  %2328 = fmul double %2116, %2327
  %2329 = load double, ptr %651, align 8, !tbaa !15
  %2330 = tail call double @llvm.fmuladd.f64(double %2328, double %2304, double %2329)
  %2331 = load <2 x double>, ptr %2287, align 8, !tbaa !15
  %2332 = fsub <2 x double> %691, %2331
  %2333 = load <2 x double>, ptr %650, align 8, !tbaa !15
  %2334 = insertelement <2 x double> poison, double %2328, i64 0
  %2335 = shufflevector <2 x double> %2334, <2 x double> poison, <2 x i32> zeroinitializer
  %2336 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2335, <2 x double> %2332, <2 x double> %2333)
  store <2 x double> %2336, ptr %650, align 8, !tbaa !15
  store double %2330, ptr %651, align 8, !tbaa !15
  %2337 = insertelement <2 x double> poison, double %2327, i64 0
  %2338 = shufflevector <2 x double> %2337, <2 x double> poison, <2 x i32> zeroinitializer
  %2339 = fmul <2 x double> %2332, %2338
  %2340 = fadd <2 x double> %2278, %2339
  %2341 = load <2 x double>, ptr %2297, align 8, !tbaa !15
  %2342 = fsub <2 x double> %2341, %2339
  store <2 x double> %2342, ptr %2297, align 8, !tbaa !15
  %2343 = fmul double %2304, %2327
  %2344 = fadd double %2277, %2343
  %2345 = getelementptr inbounds %class.Vector, ptr %629, i64 %2286, i32 2
  %2346 = load double, ptr %2345, align 8, !tbaa !89
  %2347 = fsub double %2346, %2343
  store double %2347, ptr %2345, align 8, !tbaa !89
  %2348 = load double, ptr %2302, align 8, !tbaa !50
  %2349 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2350 = fsub double %2348, %2349
  %2351 = fmul double %10, %2350
  %2352 = tail call double @llvm.floor.f64(double %2351)
  %2353 = fptosi double %2352 to i32
  %2354 = icmp slt i32 %2353, 0
  %2355 = select i1 %2354, i32 %2264, i32 0
  %2356 = icmp sgt i32 %2264, %2353
  %2357 = select i1 %2356, i32 0, i32 %2264
  %2358 = sub i32 %2353, %2357
  %2359 = add i32 %2358, %2355
  %2360 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2286, i32 3
  %2361 = load i8, ptr %2360, align 2, !tbaa !52
  %2362 = zext i8 %2361 to i32
  %2363 = fmul <2 x double> %2332, %2339
  %2364 = extractelement <2 x double> %2363, i64 0
  %2365 = fmul <2 x double> %2332, %2339
  %2366 = extractelement <2 x double> %2365, i64 1
  %2367 = fmul double %2304, %2343
  %2368 = add nsw i32 %2266, %2362
  %2369 = mul i32 %2267, %2368
  %2370 = sext i32 %2369 to i64
  %2371 = getelementptr inbounds double, ptr %8, i64 %2370
  %2372 = fmul double %2364, 5.000000e-01
  %2373 = fmul double %2366, 5.000000e-01
  %2374 = fmul double %2367, 5.000000e-01
  %2375 = getelementptr inbounds double, ptr %2371, i64 %2269
  %2376 = load double, ptr %2375, align 8, !tbaa !15
  %2377 = fadd double %2372, %2376
  store double %2377, ptr %2375, align 8, !tbaa !15
  %2378 = getelementptr inbounds double, ptr %2371, i64 %2271
  %2379 = load double, ptr %2378, align 8, !tbaa !15
  %2380 = fadd double %2373, %2379
  store double %2380, ptr %2378, align 8, !tbaa !15
  %2381 = getelementptr inbounds double, ptr %2371, i64 %2273
  %2382 = load double, ptr %2381, align 8, !tbaa !15
  %2383 = fadd double %2374, %2382
  store double %2383, ptr %2381, align 8, !tbaa !15
  %2384 = mul nsw i32 %2359, 3
  %2385 = sext i32 %2384 to i64
  %2386 = getelementptr inbounds double, ptr %2371, i64 %2385
  %2387 = load double, ptr %2386, align 8, !tbaa !15
  %2388 = fadd double %2372, %2387
  store double %2388, ptr %2386, align 8, !tbaa !15
  %2389 = add nsw i32 %2384, 1
  %2390 = sext i32 %2389 to i64
  %2391 = getelementptr inbounds double, ptr %2371, i64 %2390
  %2392 = load double, ptr %2391, align 8, !tbaa !15
  %2393 = fadd double %2373, %2392
  store double %2393, ptr %2391, align 8, !tbaa !15
  %2394 = add nsw i32 %2384, 2
  %2395 = sext i32 %2394 to i64
  %2396 = getelementptr inbounds double, ptr %2371, i64 %2395
  %2397 = load double, ptr %2396, align 8, !tbaa !15
  %2398 = fadd double %2374, %2397
  store double %2398, ptr %2396, align 8, !tbaa !15
  %2399 = add nuw nsw i64 %2276, 1
  %2400 = icmp eq i64 %2399, %2274
  br i1 %2400, label %2401, label %2275

2401:                                             ; preds = %2275, %2255
  %2402 = phi double [ %2256, %2255 ], [ %2344, %2275 ]
  %2403 = phi <2 x double> [ %2257, %2255 ], [ %2340, %2275 ]
  %2404 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2405 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2404, double noundef %2124, double noundef %2125, double noundef %694, ptr noundef %45, ptr noundef %2097, i32 noundef %2094, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2406 = add nsw i32 %2260, %2405
  %2407 = icmp sgt i32 %2405, 0
  br i1 %2407, label %2408, label %2547

2408:                                             ; preds = %2401
  %2409 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2410 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2411 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2412 = mul nsw i32 %2411, %697
  %2413 = mul i32 %2410, 3
  %2414 = mul nsw i32 %709, 3
  %2415 = sext i32 %2414 to i64
  %2416 = add nsw i32 %2414, 1
  %2417 = sext i32 %2416 to i64
  %2418 = add nsw i32 %2414, 2
  %2419 = sext i32 %2418 to i64
  %2420 = zext i32 %2405 to i64
  br label %2421

2421:                                             ; preds = %2408, %2421
  %2422 = phi i64 [ 0, %2408 ], [ %2545, %2421 ]
  %2423 = phi double [ %2402, %2408 ], [ %2490, %2421 ]
  %2424 = phi <2 x double> [ %2403, %2408 ], [ %2486, %2421 ]
  %2425 = shl nuw nsw i64 %2422, 1
  %2426 = getelementptr inbounds i32, ptr %145, i64 %2425
  %2427 = load i32, ptr %2426, align 4, !tbaa !5
  %2428 = ashr i32 %2427, 14
  %2429 = add nsw i32 %2428, %38
  %2430 = getelementptr inbounds i16, ptr %98, i64 %2422
  %2431 = load i16, ptr %2430, align 2, !tbaa !45
  %2432 = zext i16 %2431 to i64
  %2433 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2432
  %2434 = getelementptr inbounds double, ptr %144, i64 %2422
  %2435 = load double, ptr %2434, align 8, !tbaa !15
  %2436 = sext i32 %2429 to i64
  %2437 = getelementptr inbounds double, ptr %2409, i64 %2436
  %2438 = load double, ptr %2437, align 8, !tbaa !15
  %2439 = fsub double %2435, %2438
  %2440 = shl nsw i32 %2429, 4
  %2441 = sext i32 %2440 to i64
  %2442 = getelementptr inbounds double, ptr %30, i64 %2441
  %2443 = getelementptr inbounds %class.Vector, ptr %629, i64 %2432
  %2444 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2432, i32 1
  %2445 = load float, ptr %2444, align 8, !tbaa !81
  %2446 = fpext float %2445 to double
  %2447 = fmul double %2122, %2446
  %2448 = getelementptr inbounds %class.Vector, ptr %2433, i64 0, i32 2
  %2449 = load double, ptr %2448, align 8, !tbaa !50
  %2450 = fsub double %694, %2449
  %2451 = shl nsw i32 %2429, 2
  %2452 = sext i32 %2451 to i64
  %2453 = getelementptr inbounds double, ptr %31, i64 %2452
  %2454 = getelementptr inbounds double, ptr %2442, i64 12
  %2455 = load double, ptr %2454, align 8, !tbaa !15
  %2456 = getelementptr inbounds double, ptr %2442, i64 13
  %2457 = load double, ptr %2456, align 8, !tbaa !15
  %2458 = getelementptr inbounds double, ptr %2442, i64 14
  %2459 = load double, ptr %2458, align 8, !tbaa !15
  %2460 = getelementptr inbounds double, ptr %2453, i64 1
  %2461 = load double, ptr %2460, align 8, !tbaa !15
  %2462 = tail call double @llvm.fmuladd.f64(double %2461, double 2.000000e+00, double %2459)
  %2463 = getelementptr inbounds double, ptr %2453, i64 2
  %2464 = load double, ptr %2463, align 8, !tbaa !15
  %2465 = tail call double @llvm.fmuladd.f64(double %2464, double 4.000000e+00, double %2457)
  %2466 = getelementptr inbounds double, ptr %2453, i64 3
  %2467 = load double, ptr %2466, align 8, !tbaa !15
  %2468 = tail call double @llvm.fmuladd.f64(double %2467, double 6.000000e+00, double %2455)
  %2469 = fmul double %2447, %2468
  %2470 = fmul double %2447, %2465
  %2471 = fmul double %2447, %2462
  %2472 = tail call double @llvm.fmuladd.f64(double %2439, double %2469, double %2470)
  %2473 = tail call double @llvm.fmuladd.f64(double %2472, double %2439, double %2471)
  %2474 = fmul double %2116, %2473
  %2475 = load double, ptr %651, align 8, !tbaa !15
  %2476 = tail call double @llvm.fmuladd.f64(double %2474, double %2450, double %2475)
  %2477 = load <2 x double>, ptr %2433, align 8, !tbaa !15
  %2478 = fsub <2 x double> %691, %2477
  %2479 = load <2 x double>, ptr %650, align 8, !tbaa !15
  %2480 = insertelement <2 x double> poison, double %2474, i64 0
  %2481 = shufflevector <2 x double> %2480, <2 x double> poison, <2 x i32> zeroinitializer
  %2482 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2481, <2 x double> %2478, <2 x double> %2479)
  store <2 x double> %2482, ptr %650, align 8, !tbaa !15
  store double %2476, ptr %651, align 8, !tbaa !15
  %2483 = insertelement <2 x double> poison, double %2473, i64 0
  %2484 = shufflevector <2 x double> %2483, <2 x double> poison, <2 x i32> zeroinitializer
  %2485 = fmul <2 x double> %2478, %2484
  %2486 = fadd <2 x double> %2424, %2485
  %2487 = load <2 x double>, ptr %2443, align 8, !tbaa !15
  %2488 = fsub <2 x double> %2487, %2485
  store <2 x double> %2488, ptr %2443, align 8, !tbaa !15
  %2489 = fmul double %2450, %2473
  %2490 = fadd double %2423, %2489
  %2491 = getelementptr inbounds %class.Vector, ptr %629, i64 %2432, i32 2
  %2492 = load double, ptr %2491, align 8, !tbaa !89
  %2493 = fsub double %2492, %2489
  store double %2493, ptr %2491, align 8, !tbaa !89
  %2494 = load double, ptr %2448, align 8, !tbaa !50
  %2495 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2496 = fsub double %2494, %2495
  %2497 = fmul double %10, %2496
  %2498 = tail call double @llvm.floor.f64(double %2497)
  %2499 = fptosi double %2498 to i32
  %2500 = icmp slt i32 %2499, 0
  %2501 = select i1 %2500, i32 %2410, i32 0
  %2502 = icmp sgt i32 %2410, %2499
  %2503 = select i1 %2502, i32 0, i32 %2410
  %2504 = sub i32 %2499, %2503
  %2505 = add i32 %2504, %2501
  %2506 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2432, i32 3
  %2507 = load i8, ptr %2506, align 2, !tbaa !52
  %2508 = zext i8 %2507 to i32
  %2509 = fmul <2 x double> %2478, %2485
  %2510 = extractelement <2 x double> %2509, i64 0
  %2511 = fmul <2 x double> %2478, %2485
  %2512 = extractelement <2 x double> %2511, i64 1
  %2513 = fmul double %2450, %2489
  %2514 = add nsw i32 %2412, %2508
  %2515 = mul i32 %2413, %2514
  %2516 = sext i32 %2515 to i64
  %2517 = getelementptr inbounds double, ptr %8, i64 %2516
  %2518 = fmul double %2510, 5.000000e-01
  %2519 = fmul double %2512, 5.000000e-01
  %2520 = fmul double %2513, 5.000000e-01
  %2521 = getelementptr inbounds double, ptr %2517, i64 %2415
  %2522 = load double, ptr %2521, align 8, !tbaa !15
  %2523 = fadd double %2518, %2522
  store double %2523, ptr %2521, align 8, !tbaa !15
  %2524 = getelementptr inbounds double, ptr %2517, i64 %2417
  %2525 = load double, ptr %2524, align 8, !tbaa !15
  %2526 = fadd double %2519, %2525
  store double %2526, ptr %2524, align 8, !tbaa !15
  %2527 = getelementptr inbounds double, ptr %2517, i64 %2419
  %2528 = load double, ptr %2527, align 8, !tbaa !15
  %2529 = fadd double %2520, %2528
  store double %2529, ptr %2527, align 8, !tbaa !15
  %2530 = mul nsw i32 %2505, 3
  %2531 = sext i32 %2530 to i64
  %2532 = getelementptr inbounds double, ptr %2517, i64 %2531
  %2533 = load double, ptr %2532, align 8, !tbaa !15
  %2534 = fadd double %2518, %2533
  store double %2534, ptr %2532, align 8, !tbaa !15
  %2535 = add nsw i32 %2530, 1
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr inbounds double, ptr %2517, i64 %2536
  %2538 = load double, ptr %2537, align 8, !tbaa !15
  %2539 = fadd double %2519, %2538
  store double %2539, ptr %2537, align 8, !tbaa !15
  %2540 = add nsw i32 %2530, 2
  %2541 = sext i32 %2540 to i64
  %2542 = getelementptr inbounds double, ptr %2517, i64 %2541
  %2543 = load double, ptr %2542, align 8, !tbaa !15
  %2544 = fadd double %2520, %2543
  store double %2544, ptr %2542, align 8, !tbaa !15
  %2545 = add nuw nsw i64 %2422, 1
  %2546 = icmp eq i64 %2545, %2420
  br i1 %2546, label %2547, label %2421

2547:                                             ; preds = %2421, %2401
  %2548 = phi double [ %2402, %2401 ], [ %2490, %2421 ]
  %2549 = phi <2 x double> [ %2403, %2401 ], [ %2486, %2421 ]
  %2550 = getelementptr inbounds %class.Vector, ptr %629, i64 %673
  %2551 = load <2 x double>, ptr %2550, align 8, !tbaa !15
  %2552 = fadd <2 x double> %2549, %2551
  store <2 x double> %2552, ptr %2550, align 8, !tbaa !15
  %2553 = getelementptr inbounds %class.Vector, ptr %629, i64 %673, i32 2
  %2554 = load double, ptr %2553, align 8, !tbaa !89
  %2555 = fadd double %2548, %2554
  store double %2555, ptr %2553, align 8, !tbaa !89
  br label %2556

2556:                                             ; preds = %2547, %1311, %1365, %684
  %2557 = phi i32 [ %685, %684 ], [ %689, %2547 ], [ %689, %1311 ], [ %689, %1365 ]
  %2558 = phi i32 [ %671, %684 ], [ %2100, %2547 ], [ %1261, %1311 ], [ %1261, %1365 ]
  %2559 = phi i32 [ %670, %684 ], [ %2101, %2547 ], [ %1262, %1311 ], [ %1262, %1365 ]
  %2560 = phi i32 [ %669, %684 ], [ %2102, %2547 ], [ %1263, %1311 ], [ %1263, %1365 ]
  %2561 = phi i32 [ %668, %684 ], [ %2103, %2547 ], [ %1264, %1311 ], [ %1264, %1365 ]
  %2562 = phi i32 [ %667, %684 ], [ %711, %2547 ], [ %711, %1311 ], [ %711, %1365 ]
  %2563 = phi ptr [ %666, %684 ], [ %2104, %2547 ], [ %957, %1311 ], [ %957, %1365 ]
  %2564 = phi ptr [ %665, %684 ], [ %2105, %2547 ], [ %958, %1311 ], [ %958, %1365 ]
  %2565 = phi ptr [ %664, %684 ], [ %2106, %2547 ], [ %959, %1311 ], [ %959, %1365 ]
  %2566 = phi i32 [ %687, %684 ], [ %663, %2547 ], [ %663, %1311 ], [ %663, %1365 ]
  %2567 = phi i32 [ %662, %684 ], [ %2406, %2547 ], [ %662, %1311 ], [ %662, %1365 ]
  %2568 = add nsw i32 %2566, 1
  %2569 = icmp slt i32 %2568, %635
  br i1 %2569, label %661, label %2570

2570:                                             ; preds = %2556, %623
  %2571 = phi ptr [ null, %623 ], [ %2565, %2556 ]
  %2572 = phi i32 [ 0, %623 ], [ %2567, %2556 ]
  %2573 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2574 = load ptr, ptr %2573, align 8, !tbaa !24
  %2575 = icmp sgt i32 %40, 0
  br i1 %2575, label %2576, label %2578

2576:                                             ; preds = %2570
  %2577 = zext i32 %40 to i64
  br label %2601

2578:                                             ; preds = %2601, %2570
  %2579 = phi <4 x double> [ zeroinitializer, %2570 ], [ %2631, %2601 ]
  %2580 = phi <2 x double> [ zeroinitializer, %2570 ], [ %2626, %2601 ]
  %2581 = sitofp i32 %2572 to double
  %2582 = getelementptr inbounds double, ptr %6, i64 22
  %2583 = load double, ptr %2582, align 8, !tbaa !15
  %2584 = fadd double %2583, %2581
  store double %2584, ptr %2582, align 8, !tbaa !15
  %2585 = getelementptr inbounds double, ptr %6, i64 12
  %2586 = load <4 x double>, ptr %2585, align 8, !tbaa !15
  %2587 = shufflevector <2 x double> %2580, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2588 = shufflevector <4 x double> %2587, <4 x double> %2579, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2589 = shufflevector <4 x double> %2588, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2590 = fadd <4 x double> %2589, %2586
  store <4 x double> %2590, ptr %2585, align 8, !tbaa !15
  %2591 = getelementptr inbounds double, ptr %6, i64 16
  %2592 = load <4 x double>, ptr %2591, align 8, !tbaa !15
  %2593 = shufflevector <4 x double> %2579, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2594 = shufflevector <4 x double> %2593, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2595 = fadd <4 x double> %2594, %2592
  store <4 x double> %2595, ptr %2591, align 8, !tbaa !15
  %2596 = getelementptr inbounds double, ptr %6, i64 20
  %2597 = load double, ptr %2596, align 8, !tbaa !15
  %2598 = extractelement <4 x double> %2579, i64 0
  %2599 = fadd double %2598, %2597
  store double %2599, ptr %2596, align 8, !tbaa !15
  %2600 = icmp eq ptr %2571, null
  br i1 %2600, label %2635, label %2634

2601:                                             ; preds = %2576, %2601
  %2602 = phi i64 [ 0, %2576 ], [ %2632, %2601 ]
  %2603 = phi <4 x double> [ zeroinitializer, %2576 ], [ %2631, %2601 ]
  %2604 = phi <2 x double> [ zeroinitializer, %2576 ], [ %2626, %2601 ]
  %2605 = getelementptr inbounds %class.Vector, ptr %629, i64 %2602
  %2606 = getelementptr inbounds %class.Vector, ptr %2574, i64 %2602
  %2607 = getelementptr inbounds %class.Vector, ptr %629, i64 %2602, i32 1
  %2608 = load <2 x double>, ptr %2605, align 8, !tbaa !15
  %2609 = load <2 x double>, ptr %2606, align 8, !tbaa !15
  %2610 = fadd <2 x double> %2608, %2609
  store <2 x double> %2610, ptr %2606, align 8, !tbaa !15
  %2611 = getelementptr inbounds %class.Vector, ptr %629, i64 %2602, i32 2
  %2612 = load double, ptr %2611, align 8, !tbaa !89
  %2613 = getelementptr inbounds %class.Vector, ptr %2574, i64 %2602, i32 2
  %2614 = load double, ptr %2613, align 8, !tbaa !89
  %2615 = fadd double %2612, %2614
  store double %2615, ptr %2613, align 8, !tbaa !89
  %2616 = load double, ptr %2605, align 8, !tbaa !193
  %2617 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %2602
  %2618 = load double, ptr %2617, align 8, !tbaa !69
  %2619 = getelementptr inbounds %class.Vector, ptr %2617, i64 0, i32 1
  %2620 = load <2 x double>, ptr %2619, align 8, !tbaa !15
  %2621 = shufflevector <2 x double> %2620, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2622 = insertelement <2 x double> poison, double %2616, i64 0
  %2623 = shufflevector <2 x double> %2622, <2 x double> poison, <2 x i32> zeroinitializer
  %2624 = shufflevector <2 x double> %2620, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2625 = insertelement <2 x double> %2624, double %2618, i64 0
  %2626 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2623, <2 x double> %2625, <2 x double> %2604)
  %2627 = load <2 x double>, ptr %2607, align 8, !tbaa !15
  %2628 = shufflevector <2 x double> %2627, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2629 = insertelement <4 x double> %2628, double %2616, i64 3
  %2630 = shufflevector <4 x double> %2629, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2631 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2630, <4 x double> %2621, <4 x double> %2603)
  %2632 = add nuw nsw i64 %2602, 1
  %2633 = icmp eq i64 %2632, %2577
  br i1 %2633, label %2578, label %2601

2634:                                             ; preds = %2578
  tail call void @_ZdaPv(ptr noundef nonnull %2571) #10
  br label %2635

2635:                                             ; preds = %2578, %2634, %1
  ret void
}

; Function Attrs: sspstrong uwtable
define dso_local void @_ZN20ComputeNonbondedUtil37calc_self_energy_slow_fullelect_pprofEP9nonbonded(ptr nocapture noundef readonly %0) local_unnamed_addr #0 align 2 {
  %2 = load i32, ptr @_ZN20ComputeNonbondedUtil8commOnlyE, align 4, !tbaa !5
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %2681

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 7
  %6 = load ptr, ptr %5, align 8, !tbaa !9
  %7 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 8
  %8 = load ptr, ptr %7, align 8, !tbaa !14
  %9 = load double, ptr @_ZN20ComputeNonbondedUtil24pressureProfileThicknessE, align 8, !tbaa !15
  %10 = fdiv double 1.000000e+00, %9
  %11 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 10
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 11
  %14 = load i32, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 12
  %16 = load i32, ptr %15, align 4, !tbaa !18
  %17 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 1
  store i32 0, ptr %17, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6
  %19 = load <2 x double>, ptr %18, align 8, !tbaa !15
  %20 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 6, i32 2
  %21 = load double, ptr %20, align 8, !tbaa !21
  %22 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 13
  %23 = load double, ptr %22, align 8, !tbaa !22
  %24 = fmul double %23, %23
  %25 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 14
  %26 = load double, ptr %25, align 8, !tbaa !23
  %27 = fmul double %26, %26
  %28 = load double, ptr @_ZN20ComputeNonbondedUtil12dielectric_1E, align 8, !tbaa !15
  %29 = load ptr, ptr @_ZN20ComputeNonbondedUtil3molE, align 8, !tbaa !24
  %30 = load ptr, ptr @_ZN20ComputeNonbondedUtil11table_shortE, align 8, !tbaa !24
  %31 = load ptr, ptr @_ZN20ComputeNonbondedUtil10slow_tableE, align 8, !tbaa !24
  %32 = load double, ptr @_ZN20ComputeNonbondedUtil7scalingE, align 8, !tbaa !15
  %33 = load double, ptr @_ZN20ComputeNonbondedUtil7scale14E, align 8, !tbaa !15
  %34 = fsub double 1.000000e+00, %33
  %35 = load double, ptr @_ZN20ComputeNonbondedUtil8r2_deltaE, align 8, !tbaa !15
  %36 = load i32, ptr @_ZN20ComputeNonbondedUtil12r2_delta_expE, align 4, !tbaa !5
  %37 = shl i32 %36, 6
  %38 = add i32 %37, -65472
  %39 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5
  %40 = load i32, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 5, i64 1
  %42 = load i32, ptr %41, align 4, !tbaa !5
  %43 = load ptr, ptr %0, align 8, !tbaa !24
  %44 = getelementptr inbounds [2 x ptr], ptr %0, i64 0, i64 1
  %45 = load ptr, ptr %44, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  %48 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 1, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !24
  %50 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 9
  %51 = load ptr, ptr %50, align 8, !tbaa !25
  %52 = add nsw i32 %42, 5
  %53 = getelementptr inbounds %class.ResizeArray, ptr %51, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !26
  %55 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 2
  %56 = load i32, ptr %55, align 8, !tbaa !28
  %57 = icmp slt i32 %56, %52
  br i1 %57, label %58, label %96

58:                                               ; preds = %4
  %59 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 3
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = icmp slt i32 %60, %52
  br i1 %61, label %62, label %96

62:                                               ; preds = %58
  %63 = sitofp i32 %60 to float
  %64 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 5
  %65 = load float, ptr %64, align 4, !tbaa !32
  %66 = fmul float %65, %63
  %67 = fptosi float %66 to i32
  %68 = tail call i32 @llvm.smax.i32(i32 %67, i32 %52)
  %69 = sub nsw i32 %68, %60
  %70 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 6
  %71 = load i32, ptr %70, align 8, !tbaa !33
  %72 = icmp slt i32 %69, %71
  %73 = add nsw i32 %71, %60
  %74 = select i1 %72, i32 %73, i32 %68
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 1
  %77 = add nsw i64 %76, 31
  %78 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %77) #9
  %79 = getelementptr inbounds i8, ptr %78, i64 31
  %80 = ptrtoint ptr %79 to i64
  %81 = and i64 %80, 31
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds i8, ptr %79, i64 %82
  %84 = load ptr, ptr %54, align 8, !tbaa !34
  %85 = sext i32 %56 to i64
  %86 = shl nsw i64 %85, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %83, ptr align 1 %84, i64 %86, i1 false)
  %87 = icmp eq i32 %60, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %62
  %89 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !35
  %91 = icmp eq ptr %90, null
  br i1 %91, label %93, label %92

92:                                               ; preds = %88
  tail call void @_ZdaPv(ptr noundef nonnull %90) #10
  br label %93

93:                                               ; preds = %92, %88, %62
  %94 = getelementptr inbounds %class.ResizeArrayRaw, ptr %54, i64 0, i32 1
  store ptr %78, ptr %94, align 8, !tbaa !35
  store ptr %83, ptr %54, align 8, !tbaa !34
  store i32 %74, ptr %59, align 4, !tbaa !31
  %95 = load ptr, ptr %53, align 8, !tbaa !26
  br label %96

96:                                               ; preds = %4, %58, %93
  %97 = phi ptr [ %54, %4 ], [ %54, %58 ], [ %95, %93 ]
  store i32 %52, ptr %55, align 8, !tbaa !28
  %98 = load ptr, ptr %97, align 8, !tbaa !34
  %99 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 1, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !36
  %101 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 2
  %102 = load i32, ptr %101, align 8, !tbaa !38
  %103 = icmp slt i32 %102, %52
  br i1 %103, label %104, label %142

104:                                              ; preds = %96
  %105 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 3
  %106 = load i32, ptr %105, align 4, !tbaa !40
  %107 = icmp slt i32 %106, %52
  br i1 %107, label %108, label %142

108:                                              ; preds = %104
  %109 = sitofp i32 %106 to float
  %110 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 5
  %111 = load float, ptr %110, align 4, !tbaa !41
  %112 = fmul float %111, %109
  %113 = fptosi float %112 to i32
  %114 = tail call i32 @llvm.smax.i32(i32 %113, i32 %52)
  %115 = sub nsw i32 %114, %106
  %116 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 6
  %117 = load i32, ptr %116, align 8, !tbaa !42
  %118 = icmp slt i32 %115, %117
  %119 = add nsw i32 %117, %106
  %120 = select i1 %118, i32 %119, i32 %114
  %121 = sext i32 %120 to i64
  %122 = shl nsw i64 %121, 3
  %123 = add nsw i64 %122, 31
  %124 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %123) #9
  %125 = getelementptr inbounds i8, ptr %124, i64 31
  %126 = ptrtoint ptr %125 to i64
  %127 = and i64 %126, 31
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, ptr %125, i64 %128
  %130 = load ptr, ptr %100, align 8, !tbaa !43
  %131 = sext i32 %102 to i64
  %132 = shl nsw i64 %131, 3
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %129, ptr align 1 %130, i64 %132, i1 false)
  %133 = icmp eq i32 %106, 0
  br i1 %133, label %139, label %134

134:                                              ; preds = %108
  %135 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !44
  %137 = icmp eq ptr %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  tail call void @_ZdaPv(ptr noundef nonnull %136) #10
  br label %139

139:                                              ; preds = %138, %134, %108
  %140 = getelementptr inbounds %class.ResizeArrayRaw.17, ptr %100, i64 0, i32 1
  store ptr %124, ptr %140, align 8, !tbaa !44
  store ptr %129, ptr %100, align 8, !tbaa !43
  store i32 %120, ptr %105, align 4, !tbaa !40
  %141 = load ptr, ptr %99, align 8, !tbaa !36
  br label %142

142:                                              ; preds = %96, %104, %139
  %143 = phi ptr [ %100, %96 ], [ %100, %104 ], [ %141, %139 ]
  store i32 %52, ptr %101, align 8, !tbaa !38
  %144 = load ptr, ptr %143, align 8, !tbaa !43
  %145 = getelementptr inbounds i32, ptr %144, i64 1
  %146 = icmp eq i32 %14, 0
  %147 = icmp ne i32 %16, 0
  %148 = select i1 %146, i1 %147, i1 false
  %149 = select i1 %148, i32 0, i32 %52
  %150 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 2, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !26
  %152 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 2
  %153 = load i32, ptr %152, align 8, !tbaa !28
  %154 = icmp slt i32 %153, %149
  br i1 %154, label %155, label %193

155:                                              ; preds = %142
  %156 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 3
  %157 = load i32, ptr %156, align 4, !tbaa !31
  %158 = icmp slt i32 %157, %149
  br i1 %158, label %159, label %193

159:                                              ; preds = %155
  %160 = sitofp i32 %157 to float
  %161 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 5
  %162 = load float, ptr %161, align 4, !tbaa !32
  %163 = fmul float %162, %160
  %164 = fptosi float %163 to i32
  %165 = tail call i32 @llvm.smax.i32(i32 %164, i32 %149)
  %166 = sub nsw i32 %165, %157
  %167 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 6
  %168 = load i32, ptr %167, align 8, !tbaa !33
  %169 = icmp slt i32 %166, %168
  %170 = add nsw i32 %168, %157
  %171 = select i1 %169, i32 %170, i32 %165
  %172 = sext i32 %171 to i64
  %173 = shl nsw i64 %172, 1
  %174 = add nsw i64 %173, 31
  %175 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %174) #9
  %176 = getelementptr inbounds i8, ptr %175, i64 31
  %177 = ptrtoint ptr %176 to i64
  %178 = and i64 %177, 31
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, ptr %176, i64 %179
  %181 = load ptr, ptr %151, align 8, !tbaa !34
  %182 = sext i32 %153 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %180, ptr align 1 %181, i64 %183, i1 false)
  %184 = icmp eq i32 %157, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %159
  %186 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  %187 = load ptr, ptr %186, align 8, !tbaa !35
  %188 = icmp eq ptr %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %185
  tail call void @_ZdaPv(ptr noundef nonnull %187) #10
  br label %190

190:                                              ; preds = %189, %185, %159
  %191 = getelementptr inbounds %class.ResizeArrayRaw, ptr %151, i64 0, i32 1
  store ptr %175, ptr %191, align 8, !tbaa !35
  store ptr %180, ptr %151, align 8, !tbaa !34
  store i32 %171, ptr %156, align 4, !tbaa !31
  %192 = load ptr, ptr %150, align 8, !tbaa !26
  br label %193

193:                                              ; preds = %142, %155, %190
  %194 = phi ptr [ %151, %142 ], [ %151, %155 ], [ %192, %190 ]
  store i32 %149, ptr %152, align 8, !tbaa !28
  %195 = load ptr, ptr %194, align 8, !tbaa !34
  %196 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 3, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !26
  %198 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 2
  %199 = load i32, ptr %198, align 8, !tbaa !28
  %200 = icmp slt i32 %199, %149
  br i1 %200, label %201, label %239

201:                                              ; preds = %193
  %202 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 3
  %203 = load i32, ptr %202, align 4, !tbaa !31
  %204 = icmp slt i32 %203, %149
  br i1 %204, label %205, label %239

205:                                              ; preds = %201
  %206 = sitofp i32 %203 to float
  %207 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 5
  %208 = load float, ptr %207, align 4, !tbaa !32
  %209 = fmul float %208, %206
  %210 = fptosi float %209 to i32
  %211 = tail call i32 @llvm.smax.i32(i32 %210, i32 %149)
  %212 = sub nsw i32 %211, %203
  %213 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 6
  %214 = load i32, ptr %213, align 8, !tbaa !33
  %215 = icmp slt i32 %212, %214
  %216 = add nsw i32 %214, %203
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = sext i32 %217 to i64
  %219 = shl nsw i64 %218, 1
  %220 = add nsw i64 %219, 31
  %221 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %220) #9
  %222 = getelementptr inbounds i8, ptr %221, i64 31
  %223 = ptrtoint ptr %222 to i64
  %224 = and i64 %223, 31
  %225 = sub nsw i64 0, %224
  %226 = getelementptr inbounds i8, ptr %222, i64 %225
  %227 = load ptr, ptr %197, align 8, !tbaa !34
  %228 = sext i32 %199 to i64
  %229 = shl nsw i64 %228, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %226, ptr align 1 %227, i64 %229, i1 false)
  %230 = icmp eq i32 %203, 0
  br i1 %230, label %236, label %231

231:                                              ; preds = %205
  %232 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !35
  %234 = icmp eq ptr %233, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %231
  tail call void @_ZdaPv(ptr noundef nonnull %233) #10
  br label %236

236:                                              ; preds = %235, %231, %205
  %237 = getelementptr inbounds %class.ResizeArrayRaw, ptr %197, i64 0, i32 1
  store ptr %221, ptr %237, align 8, !tbaa !35
  store ptr %226, ptr %197, align 8, !tbaa !34
  store i32 %217, ptr %202, align 4, !tbaa !31
  %238 = load ptr, ptr %196, align 8, !tbaa !26
  br label %239

239:                                              ; preds = %193, %201, %236
  %240 = phi ptr [ %197, %193 ], [ %197, %201 ], [ %238, %236 ]
  store i32 %149, ptr %198, align 8, !tbaa !28
  %241 = load ptr, ptr %240, align 8, !tbaa !34
  %242 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 4, i32 1
  %243 = load ptr, ptr %242, align 8, !tbaa !26
  %244 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 2
  %245 = load i32, ptr %244, align 8, !tbaa !28
  %246 = icmp slt i32 %245, %149
  br i1 %246, label %247, label %285

247:                                              ; preds = %239
  %248 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 3
  %249 = load i32, ptr %248, align 4, !tbaa !31
  %250 = icmp slt i32 %249, %149
  br i1 %250, label %251, label %285

251:                                              ; preds = %247
  %252 = sitofp i32 %249 to float
  %253 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 5
  %254 = load float, ptr %253, align 4, !tbaa !32
  %255 = fmul float %254, %252
  %256 = fptosi float %255 to i32
  %257 = tail call i32 @llvm.smax.i32(i32 %256, i32 %149)
  %258 = sub nsw i32 %257, %249
  %259 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 6
  %260 = load i32, ptr %259, align 8, !tbaa !33
  %261 = icmp slt i32 %258, %260
  %262 = add nsw i32 %260, %249
  %263 = select i1 %261, i32 %262, i32 %257
  %264 = sext i32 %263 to i64
  %265 = shl nsw i64 %264, 1
  %266 = add nsw i64 %265, 31
  %267 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %266) #9
  %268 = getelementptr inbounds i8, ptr %267, i64 31
  %269 = ptrtoint ptr %268 to i64
  %270 = and i64 %269, 31
  %271 = sub nsw i64 0, %270
  %272 = getelementptr inbounds i8, ptr %268, i64 %271
  %273 = load ptr, ptr %243, align 8, !tbaa !34
  %274 = sext i32 %245 to i64
  %275 = shl nsw i64 %274, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %272, ptr align 1 %273, i64 %275, i1 false)
  %276 = icmp eq i32 %249, 0
  br i1 %276, label %282, label %277

277:                                              ; preds = %251
  %278 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !35
  %280 = icmp eq ptr %279, null
  br i1 %280, label %282, label %281

281:                                              ; preds = %277
  tail call void @_ZdaPv(ptr noundef nonnull %279) #10
  br label %282

282:                                              ; preds = %281, %277, %251
  %283 = getelementptr inbounds %class.ResizeArrayRaw, ptr %243, i64 0, i32 1
  store ptr %267, ptr %283, align 8, !tbaa !35
  store ptr %272, ptr %243, align 8, !tbaa !34
  store i32 %263, ptr %248, align 4, !tbaa !31
  %284 = load ptr, ptr %242, align 8, !tbaa !26
  br label %285

285:                                              ; preds = %239, %247, %282
  %286 = phi ptr [ %243, %239 ], [ %243, %247 ], [ %284, %282 ]
  store i32 %149, ptr %244, align 8, !tbaa !28
  %287 = load ptr, ptr %286, align 8, !tbaa !34
  %288 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 5, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !26
  %290 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 2
  %291 = load i32, ptr %290, align 8, !tbaa !28
  %292 = icmp slt i32 %291, %149
  br i1 %292, label %293, label %331

293:                                              ; preds = %285
  %294 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 3
  %295 = load i32, ptr %294, align 4, !tbaa !31
  %296 = icmp slt i32 %295, %149
  br i1 %296, label %297, label %331

297:                                              ; preds = %293
  %298 = sitofp i32 %295 to float
  %299 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 5
  %300 = load float, ptr %299, align 4, !tbaa !32
  %301 = fmul float %300, %298
  %302 = fptosi float %301 to i32
  %303 = tail call i32 @llvm.smax.i32(i32 %302, i32 %149)
  %304 = sub nsw i32 %303, %295
  %305 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 6
  %306 = load i32, ptr %305, align 8, !tbaa !33
  %307 = icmp slt i32 %304, %306
  %308 = add nsw i32 %306, %295
  %309 = select i1 %307, i32 %308, i32 %303
  %310 = sext i32 %309 to i64
  %311 = shl nsw i64 %310, 1
  %312 = add nsw i64 %311, 31
  %313 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %312) #9
  %314 = getelementptr inbounds i8, ptr %313, i64 31
  %315 = ptrtoint ptr %314 to i64
  %316 = and i64 %315, 31
  %317 = sub nsw i64 0, %316
  %318 = getelementptr inbounds i8, ptr %314, i64 %317
  %319 = load ptr, ptr %289, align 8, !tbaa !34
  %320 = sext i32 %291 to i64
  %321 = shl nsw i64 %320, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %318, ptr align 1 %319, i64 %321, i1 false)
  %322 = icmp eq i32 %295, 0
  br i1 %322, label %328, label %323

323:                                              ; preds = %297
  %324 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !35
  %326 = icmp eq ptr %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZdaPv(ptr noundef nonnull %325) #10
  br label %328

328:                                              ; preds = %327, %323, %297
  %329 = getelementptr inbounds %class.ResizeArrayRaw, ptr %289, i64 0, i32 1
  store ptr %313, ptr %329, align 8, !tbaa !35
  store ptr %318, ptr %289, align 8, !tbaa !34
  store i32 %309, ptr %294, align 4, !tbaa !31
  %330 = load ptr, ptr %288, align 8, !tbaa !26
  br label %331

331:                                              ; preds = %285, %293, %328
  %332 = phi ptr [ %289, %285 ], [ %289, %293 ], [ %330, %328 ]
  store i32 %149, ptr %290, align 8, !tbaa !28
  %333 = load ptr, ptr %332, align 8, !tbaa !34
  %334 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 6, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !26
  %336 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 2
  %337 = load i32, ptr %336, align 8, !tbaa !28
  %338 = icmp slt i32 %337, %149
  br i1 %338, label %339, label %377

339:                                              ; preds = %331
  %340 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 3
  %341 = load i32, ptr %340, align 4, !tbaa !31
  %342 = icmp slt i32 %341, %149
  br i1 %342, label %343, label %377

343:                                              ; preds = %339
  %344 = sitofp i32 %341 to float
  %345 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 5
  %346 = load float, ptr %345, align 4, !tbaa !32
  %347 = fmul float %346, %344
  %348 = fptosi float %347 to i32
  %349 = tail call i32 @llvm.smax.i32(i32 %348, i32 %149)
  %350 = sub nsw i32 %349, %341
  %351 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 6
  %352 = load i32, ptr %351, align 8, !tbaa !33
  %353 = icmp slt i32 %350, %352
  %354 = add nsw i32 %352, %341
  %355 = select i1 %353, i32 %354, i32 %349
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 1
  %358 = add nsw i64 %357, 31
  %359 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %358) #9
  %360 = getelementptr inbounds i8, ptr %359, i64 31
  %361 = ptrtoint ptr %360 to i64
  %362 = and i64 %361, 31
  %363 = sub nsw i64 0, %362
  %364 = getelementptr inbounds i8, ptr %360, i64 %363
  %365 = load ptr, ptr %335, align 8, !tbaa !34
  %366 = sext i32 %337 to i64
  %367 = shl nsw i64 %366, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %364, ptr align 1 %365, i64 %367, i1 false)
  %368 = icmp eq i32 %341, 0
  br i1 %368, label %374, label %369

369:                                              ; preds = %343
  %370 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  %371 = load ptr, ptr %370, align 8, !tbaa !35
  %372 = icmp eq ptr %371, null
  br i1 %372, label %374, label %373

373:                                              ; preds = %369
  tail call void @_ZdaPv(ptr noundef nonnull %371) #10
  br label %374

374:                                              ; preds = %373, %369, %343
  %375 = getelementptr inbounds %class.ResizeArrayRaw, ptr %335, i64 0, i32 1
  store ptr %359, ptr %375, align 8, !tbaa !35
  store ptr %364, ptr %335, align 8, !tbaa !34
  store i32 %355, ptr %340, align 4, !tbaa !31
  %376 = load ptr, ptr %334, align 8, !tbaa !26
  br label %377

377:                                              ; preds = %331, %339, %374
  %378 = phi ptr [ %335, %331 ], [ %335, %339 ], [ %376, %374 ]
  store i32 %149, ptr %336, align 8, !tbaa !28
  %379 = load ptr, ptr %378, align 8, !tbaa !34
  %380 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 15, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !26
  %382 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 2
  %383 = load i32, ptr %382, align 8, !tbaa !28
  %384 = icmp slt i32 %383, %149
  br i1 %384, label %385, label %423

385:                                              ; preds = %377
  %386 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 3
  %387 = load i32, ptr %386, align 4, !tbaa !31
  %388 = icmp slt i32 %387, %149
  br i1 %388, label %389, label %423

389:                                              ; preds = %385
  %390 = sitofp i32 %387 to float
  %391 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 5
  %392 = load float, ptr %391, align 4, !tbaa !32
  %393 = fmul float %392, %390
  %394 = fptosi float %393 to i32
  %395 = tail call i32 @llvm.smax.i32(i32 %394, i32 %149)
  %396 = sub nsw i32 %395, %387
  %397 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 6
  %398 = load i32, ptr %397, align 8, !tbaa !33
  %399 = icmp slt i32 %396, %398
  %400 = add nsw i32 %398, %387
  %401 = select i1 %399, i32 %400, i32 %395
  %402 = sext i32 %401 to i64
  %403 = shl nsw i64 %402, 1
  %404 = add nsw i64 %403, 31
  %405 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %404) #9
  %406 = getelementptr inbounds i8, ptr %405, i64 31
  %407 = ptrtoint ptr %406 to i64
  %408 = and i64 %407, 31
  %409 = sub nsw i64 0, %408
  %410 = getelementptr inbounds i8, ptr %406, i64 %409
  %411 = load ptr, ptr %381, align 8, !tbaa !34
  %412 = sext i32 %383 to i64
  %413 = shl nsw i64 %412, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %410, ptr align 1 %411, i64 %413, i1 false)
  %414 = icmp eq i32 %387, 0
  br i1 %414, label %420, label %415

415:                                              ; preds = %389
  %416 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !35
  %418 = icmp eq ptr %417, null
  br i1 %418, label %420, label %419

419:                                              ; preds = %415
  tail call void @_ZdaPv(ptr noundef nonnull %417) #10
  br label %420

420:                                              ; preds = %419, %415, %389
  %421 = getelementptr inbounds %class.ResizeArrayRaw, ptr %381, i64 0, i32 1
  store ptr %405, ptr %421, align 8, !tbaa !35
  store ptr %410, ptr %381, align 8, !tbaa !34
  store i32 %401, ptr %386, align 4, !tbaa !31
  %422 = load ptr, ptr %380, align 8, !tbaa !26
  br label %423

423:                                              ; preds = %377, %385, %420
  %424 = phi ptr [ %381, %377 ], [ %381, %385 ], [ %422, %420 ]
  store i32 %149, ptr %382, align 8, !tbaa !28
  %425 = load ptr, ptr %424, align 8, !tbaa !34
  %426 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 16, i32 1
  %427 = load ptr, ptr %426, align 8, !tbaa !26
  %428 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 2
  %429 = load i32, ptr %428, align 8, !tbaa !28
  %430 = icmp slt i32 %429, %149
  br i1 %430, label %431, label %469

431:                                              ; preds = %423
  %432 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 3
  %433 = load i32, ptr %432, align 4, !tbaa !31
  %434 = icmp slt i32 %433, %149
  br i1 %434, label %435, label %469

435:                                              ; preds = %431
  %436 = sitofp i32 %433 to float
  %437 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 5
  %438 = load float, ptr %437, align 4, !tbaa !32
  %439 = fmul float %438, %436
  %440 = fptosi float %439 to i32
  %441 = tail call i32 @llvm.smax.i32(i32 %440, i32 %149)
  %442 = sub nsw i32 %441, %433
  %443 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 6
  %444 = load i32, ptr %443, align 8, !tbaa !33
  %445 = icmp slt i32 %442, %444
  %446 = add nsw i32 %444, %433
  %447 = select i1 %445, i32 %446, i32 %441
  %448 = sext i32 %447 to i64
  %449 = shl nsw i64 %448, 1
  %450 = add nsw i64 %449, 31
  %451 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %450) #9
  %452 = getelementptr inbounds i8, ptr %451, i64 31
  %453 = ptrtoint ptr %452 to i64
  %454 = and i64 %453, 31
  %455 = sub nsw i64 0, %454
  %456 = getelementptr inbounds i8, ptr %452, i64 %455
  %457 = load ptr, ptr %427, align 8, !tbaa !34
  %458 = sext i32 %429 to i64
  %459 = shl nsw i64 %458, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %456, ptr align 1 %457, i64 %459, i1 false)
  %460 = icmp eq i32 %433, 0
  br i1 %460, label %466, label %461

461:                                              ; preds = %435
  %462 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !35
  %464 = icmp eq ptr %463, null
  br i1 %464, label %466, label %465

465:                                              ; preds = %461
  tail call void @_ZdaPv(ptr noundef nonnull %463) #10
  br label %466

466:                                              ; preds = %465, %461, %435
  %467 = getelementptr inbounds %class.ResizeArrayRaw, ptr %427, i64 0, i32 1
  store ptr %451, ptr %467, align 8, !tbaa !35
  store ptr %456, ptr %427, align 8, !tbaa !34
  store i32 %447, ptr %432, align 4, !tbaa !31
  %468 = load ptr, ptr %426, align 8, !tbaa !26
  br label %469

469:                                              ; preds = %423, %431, %466
  %470 = phi ptr [ %427, %423 ], [ %427, %431 ], [ %468, %466 ]
  store i32 %149, ptr %428, align 8, !tbaa !28
  %471 = load ptr, ptr %470, align 8, !tbaa !34
  br i1 %148, label %613, label %472

472:                                              ; preds = %469
  %473 = icmp sgt i32 %42, 0
  br i1 %473, label %474, label %604

474:                                              ; preds = %472
  %475 = zext i32 %42 to i64
  %476 = and i64 %475, 1
  %477 = icmp eq i32 %42, 1
  br i1 %477, label %510, label %478

478:                                              ; preds = %474
  %479 = and i64 %475, 4294967294
  br label %480

480:                                              ; preds = %505, %478
  %481 = phi i64 [ 0, %478 ], [ %507, %505 ]
  %482 = phi i32 [ 0, %478 ], [ %506, %505 ]
  %483 = phi i64 [ 0, %478 ], [ %508, %505 ]
  %484 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %481, i32 4
  %485 = load i8, ptr %484, align 1
  %486 = and i8 %485, 7
  %487 = icmp eq i8 %486, 0
  br i1 %487, label %493, label %488

488:                                              ; preds = %480
  %489 = trunc i64 %481 to i16
  %490 = add nsw i32 %482, 1
  %491 = sext i32 %482 to i64
  %492 = getelementptr inbounds i16, ptr %195, i64 %491
  store i16 %489, ptr %492, align 2, !tbaa !45
  br label %493

493:                                              ; preds = %480, %488
  %494 = phi i32 [ %490, %488 ], [ %482, %480 ]
  %495 = or i64 %481, 1
  %496 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %495, i32 4
  %497 = load i8, ptr %496, align 1
  %498 = and i8 %497, 7
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %505, label %500

500:                                              ; preds = %493
  %501 = trunc i64 %495 to i16
  %502 = add nsw i32 %494, 1
  %503 = sext i32 %494 to i64
  %504 = getelementptr inbounds i16, ptr %195, i64 %503
  store i16 %501, ptr %504, align 2, !tbaa !45
  br label %505

505:                                              ; preds = %500, %493
  %506 = phi i32 [ %502, %500 ], [ %494, %493 ]
  %507 = add nuw nsw i64 %481, 2
  %508 = add i64 %483, 2
  %509 = icmp eq i64 %508, %479
  br i1 %509, label %510, label %480

510:                                              ; preds = %505, %474
  %511 = phi i32 [ undef, %474 ], [ %506, %505 ]
  %512 = phi i64 [ 0, %474 ], [ %507, %505 ]
  %513 = phi i32 [ 0, %474 ], [ %506, %505 ]
  %514 = icmp eq i64 %476, 0
  br i1 %514, label %525, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %512, i32 4
  %517 = load i8, ptr %516, align 1
  %518 = and i8 %517, 7
  %519 = icmp eq i8 %518, 0
  br i1 %519, label %525, label %520

520:                                              ; preds = %515
  %521 = trunc i64 %512 to i16
  %522 = add nsw i32 %513, 1
  %523 = sext i32 %513 to i64
  %524 = getelementptr inbounds i16, ptr %195, i64 %523
  store i16 %521, ptr %524, align 2, !tbaa !45
  br label %525

525:                                              ; preds = %515, %520, %510
  %526 = phi i32 [ %511, %510 ], [ %522, %520 ], [ %513, %515 ]
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %535, label %528

528:                                              ; preds = %525
  %529 = add nsw i32 %526, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i16, ptr %195, i64 %530
  %532 = load i16, ptr %531, align 2, !tbaa !45
  %533 = sext i32 %526 to i64
  %534 = getelementptr inbounds i16, ptr %195, i64 %533
  store i16 %532, ptr %534, align 2, !tbaa !45
  br label %535

535:                                              ; preds = %528, %525
  %536 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %537 = icmp ne i32 %536, 0
  %538 = icmp sgt i32 %526, 0
  %539 = and i1 %537, %538
  br i1 %539, label %540, label %604

540:                                              ; preds = %535
  %541 = zext i32 %526 to i64
  %542 = and i64 %541, 1
  %543 = icmp eq i32 %526, 1
  br i1 %543, label %578, label %544

544:                                              ; preds = %540
  %545 = and i64 %541, 4294967294
  br label %546

546:                                              ; preds = %573, %544
  %547 = phi i64 [ 0, %544 ], [ %575, %573 ]
  %548 = phi i32 [ 0, %544 ], [ %574, %573 ]
  %549 = phi i64 [ 0, %544 ], [ %576, %573 ]
  %550 = getelementptr inbounds i16, ptr %195, i64 %547
  %551 = load i16, ptr %550, align 2, !tbaa !45
  %552 = zext i16 %551 to i64
  %553 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %552
  %554 = load i32, ptr %553, align 4
  %555 = icmp sgt i32 %554, -1
  br i1 %555, label %556, label %560

556:                                              ; preds = %546
  %557 = add nsw i32 %548, 1
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds i16, ptr %241, i64 %558
  store i16 %551, ptr %559, align 2, !tbaa !45
  br label %560

560:                                              ; preds = %546, %556
  %561 = phi i32 [ %548, %546 ], [ %557, %556 ]
  %562 = or i64 %547, 1
  %563 = getelementptr inbounds i16, ptr %195, i64 %562
  %564 = load i16, ptr %563, align 2, !tbaa !45
  %565 = zext i16 %564 to i64
  %566 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %565
  %567 = load i32, ptr %566, align 4
  %568 = icmp sgt i32 %567, -1
  br i1 %568, label %569, label %573

569:                                              ; preds = %560
  %570 = add nsw i32 %561, 1
  %571 = sext i32 %561 to i64
  %572 = getelementptr inbounds i16, ptr %241, i64 %571
  store i16 %564, ptr %572, align 2, !tbaa !45
  br label %573

573:                                              ; preds = %569, %560
  %574 = phi i32 [ %561, %560 ], [ %570, %569 ]
  %575 = add nuw nsw i64 %547, 2
  %576 = add i64 %549, 2
  %577 = icmp eq i64 %576, %545
  br i1 %577, label %578, label %546

578:                                              ; preds = %573, %540
  %579 = phi i32 [ undef, %540 ], [ %574, %573 ]
  %580 = phi i64 [ 0, %540 ], [ %575, %573 ]
  %581 = phi i32 [ 0, %540 ], [ %574, %573 ]
  %582 = icmp eq i64 %542, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %578
  %584 = getelementptr inbounds i16, ptr %195, i64 %580
  %585 = load i16, ptr %584, align 2, !tbaa !45
  %586 = zext i16 %585 to i64
  %587 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %586
  %588 = load i32, ptr %587, align 4
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %594

590:                                              ; preds = %583
  %591 = add nsw i32 %581, 1
  %592 = sext i32 %581 to i64
  %593 = getelementptr inbounds i16, ptr %241, i64 %592
  store i16 %585, ptr %593, align 2, !tbaa !45
  br label %594

594:                                              ; preds = %583, %590, %578
  %595 = phi i32 [ %579, %578 ], [ %581, %583 ], [ %591, %590 ]
  %596 = icmp eq i32 %595, 0
  br i1 %596, label %604, label %597

597:                                              ; preds = %594
  %598 = add nsw i32 %595, -1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, ptr %241, i64 %599
  %601 = load i16, ptr %600, align 2, !tbaa !45
  %602 = sext i32 %595 to i64
  %603 = getelementptr inbounds i16, ptr %241, i64 %602
  store i16 %601, ptr %603, align 2, !tbaa !45
  br label %604

604:                                              ; preds = %472, %535, %597, %594
  %605 = phi i32 [ %526, %597 ], [ %526, %594 ], [ %526, %535 ], [ 0, %472 ]
  %606 = phi i32 [ %595, %597 ], [ 0, %594 ], [ 0, %535 ], [ 0, %472 ]
  %607 = load i32, ptr %17, align 8, !tbaa !19
  %608 = add nsw i32 %607, 1
  store i32 %608, ptr %17, align 8, !tbaa !19
  %609 = trunc i32 %40 to i16
  %610 = load ptr, ptr %12, align 8, !tbaa !47
  %611 = sext i32 %607 to i64
  %612 = getelementptr inbounds i16, ptr %610, i64 %611
  store i16 %609, ptr %612, align 2, !tbaa !45
  br label %623

613:                                              ; preds = %469
  %614 = load ptr, ptr %12, align 8, !tbaa !47
  %615 = load i32, ptr %17, align 8, !tbaa !19
  %616 = add nsw i32 %615, 1
  store i32 %616, ptr %17, align 8, !tbaa !19
  %617 = sext i32 %615 to i64
  %618 = getelementptr inbounds i16, ptr %614, i64 %617
  %619 = load i16, ptr %618, align 2, !tbaa !45
  %620 = zext i16 %619 to i32
  %621 = icmp eq i32 %40, %620
  br i1 %621, label %623, label %622

622:                                              ; preds = %613
  tail call void @_Z8NAMD_bugPKc(ptr noundef nonnull @.str)
  br label %623

623:                                              ; preds = %613, %622, %604
  %624 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %605, %604 ]
  %625 = phi i32 [ 0, %622 ], [ 0, %613 ], [ %606, %604 ]
  %626 = getelementptr inbounds %class.ComputeNonbondedWorkArrays, ptr %51, i64 0, i32 18, i32 1
  %627 = load ptr, ptr %626, align 8, !tbaa !174
  tail call void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %627, i32 noundef %40)
  %628 = load ptr, ptr %626, align 8, !tbaa !174
  %629 = load ptr, ptr %628, align 8, !tbaa !176
  %630 = sext i32 %40 to i64
  %631 = mul nsw i64 %630, 24
  tail call void @llvm.memset.p0.i64(ptr align 1 %629, i8 0, i64 %631, i1 false)
  %632 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 18
  %633 = load i32, ptr %632, align 4, !tbaa !49
  %634 = add nsw i32 %633, -1
  %635 = add nsw i32 %40, -1
  %636 = icmp sgt i32 %40, 1
  br i1 %636, label %637, label %2612

637:                                              ; preds = %623
  %638 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 16
  %639 = load i32, ptr %638, align 4, !tbaa !48
  %640 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 1
  %641 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 4
  %642 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 2
  %643 = getelementptr inbounds %class.Molecule, ptr %29, i64 0, i32 3
  %644 = ptrtoint ptr %425 to i64
  %645 = add nsw i32 %42, 10
  %646 = getelementptr inbounds %class.Pairlists, ptr %12, i64 0, i32 2
  %647 = ptrtoint ptr %471 to i64
  %648 = ptrtoint ptr %333 to i64
  %649 = ptrtoint ptr %379 to i64
  %650 = getelementptr inbounds double, ptr %6, i64 29
  %651 = getelementptr inbounds double, ptr %6, i64 31
  %652 = fmul double %34, 2.000000e+00
  %653 = fmul double %34, 4.000000e+00
  %654 = fmul double %34, 6.000000e+00
  %655 = sext i32 %624 to i64
  %656 = sext i32 %625 to i64
  %657 = insertelement <2 x double> poison, double %27, i64 0
  %658 = shufflevector <2 x double> %657, <2 x double> poison, <2 x i32> zeroinitializer
  %659 = getelementptr inbounds i16, ptr %471, i64 1
  %660 = getelementptr inbounds i16, ptr %471, i64 1
  br label %661

661:                                              ; preds = %637, %2597
  %662 = phi i32 [ 0, %637 ], [ %2609, %2597 ]
  %663 = phi double [ 0.000000e+00, %637 ], [ %2608, %2597 ]
  %664 = phi i32 [ 0, %637 ], [ %2610, %2597 ]
  %665 = phi ptr [ null, %637 ], [ %2606, %2597 ]
  %666 = phi ptr [ null, %637 ], [ %2605, %2597 ]
  %667 = phi ptr [ null, %637 ], [ %2604, %2597 ]
  %668 = phi i32 [ 0, %637 ], [ %2603, %2597 ]
  %669 = phi i32 [ 0, %637 ], [ %2602, %2597 ]
  %670 = phi i32 [ 0, %637 ], [ %2601, %2597 ]
  %671 = phi i32 [ 0, %637 ], [ %2600, %2597 ]
  %672 = phi i32 [ 0, %637 ], [ %2599, %2597 ]
  %673 = phi i32 [ %639, %637 ], [ %2598, %2597 ]
  %674 = sext i32 %664 to i64
  %675 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %674
  %676 = getelementptr inbounds %struct.CompAtomExt, ptr %47, i64 %674
  %677 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %674, i32 4
  %678 = load i8, ptr %677, align 1
  %679 = lshr i8 %678, 3
  %680 = and i8 %679, 15
  %681 = zext i8 %680 to i32
  %682 = icmp eq i8 %680, 0
  br i1 %682, label %689, label %683

683:                                              ; preds = %661
  %684 = icmp eq i32 %673, 0
  br i1 %684, label %689, label %685

685:                                              ; preds = %683
  %686 = add nsw i32 %673, -1
  %687 = add nsw i32 %664, -1
  %688 = add i32 %687, %681
  br label %2597

689:                                              ; preds = %683, %661
  %690 = phi i32 [ %673, %661 ], [ %634, %683 ]
  %691 = load <2 x double>, ptr %675, align 8, !tbaa !15
  %692 = fadd <2 x double> %19, %691
  %693 = getelementptr inbounds %class.Vector, ptr %675, i64 0, i32 2
  %694 = load double, ptr %693, align 8, !tbaa !50
  %695 = fadd double %21, %694
  %696 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %674, i32 3
  %697 = load i8, ptr %696, align 2, !tbaa !52
  %698 = zext i8 %697 to i32
  %699 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %700 = fsub double %694, %699
  %701 = fmul double %10, %700
  %702 = tail call double @llvm.floor.f64(double %701)
  %703 = fptosi double %702 to i32
  %704 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %705 = icmp slt i32 %703, 0
  %706 = select i1 %705, i32 %704, i32 0
  %707 = icmp sgt i32 %704, %703
  %708 = select i1 %707, i32 0, i32 %704
  %709 = sub i32 %703, %708
  %710 = add i32 %709, %706
  %711 = add nsw i32 %664, %681
  %712 = select i1 %682, i32 %668, i32 %711
  br i1 %148, label %2062, label %713

713:                                              ; preds = %689
  %714 = load i32, ptr %676, align 4
  %715 = shl i32 %714, 2
  %716 = ashr exact i32 %715, 2
  %717 = load ptr, ptr %640, align 8, !tbaa !53
  %718 = sext i32 %716 to i64
  %719 = getelementptr inbounds %class.ExclusionCheck, ptr %717, i64 %718
  %720 = load i32, ptr %719, align 8, !tbaa !55
  %721 = getelementptr inbounds %class.ExclusionCheck, ptr %717, i64 %718, i32 1
  %722 = load i32, ptr %721, align 4, !tbaa !57
  %723 = getelementptr inbounds %class.ExclusionCheck, ptr %717, i64 %718, i32 2
  %724 = load ptr, ptr %723, align 8, !tbaa !58
  %725 = icmp eq ptr %724, null
  br i1 %725, label %730, label %726

726:                                              ; preds = %713
  %727 = sext i32 %720 to i64
  %728 = sub nsw i64 0, %727
  %729 = getelementptr inbounds i8, ptr %724, i64 %728
  br label %956

730:                                              ; preds = %713
  %731 = icmp eq ptr %665, null
  br i1 %731, label %819, label %732

732:                                              ; preds = %730
  %733 = load i32, ptr %666, align 4, !tbaa !5
  %734 = icmp slt i32 %733, 1
  br i1 %734, label %782, label %735

735:                                              ; preds = %732
  %736 = add nuw i32 %733, 1
  %737 = zext i32 %736 to i64
  %738 = add nsw i64 %737, -1
  %739 = add nsw i64 %737, -2
  %740 = and i64 %738, 3
  %741 = icmp ult i64 %739, 3
  br i1 %741, label %769, label %742

742:                                              ; preds = %735
  %743 = and i64 %738, -4
  br label %744

744:                                              ; preds = %744, %742
  %745 = phi i64 [ 1, %742 ], [ %766, %744 ]
  %746 = phi i64 [ 0, %742 ], [ %767, %744 ]
  %747 = getelementptr inbounds i32, ptr %666, i64 %745
  %748 = load i32, ptr %747, align 4, !tbaa !5
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i8, ptr %665, i64 %749
  store i8 0, ptr %750, align 1, !tbaa !59
  %751 = add nuw nsw i64 %745, 1
  %752 = getelementptr inbounds i32, ptr %666, i64 %751
  %753 = load i32, ptr %752, align 4, !tbaa !5
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i8, ptr %665, i64 %754
  store i8 0, ptr %755, align 1, !tbaa !59
  %756 = add nuw nsw i64 %745, 2
  %757 = getelementptr inbounds i32, ptr %666, i64 %756
  %758 = load i32, ptr %757, align 4, !tbaa !5
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i8, ptr %665, i64 %759
  store i8 0, ptr %760, align 1, !tbaa !59
  %761 = add nuw nsw i64 %745, 3
  %762 = getelementptr inbounds i32, ptr %666, i64 %761
  %763 = load i32, ptr %762, align 4, !tbaa !5
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i8, ptr %665, i64 %764
  store i8 0, ptr %765, align 1, !tbaa !59
  %766 = add nuw nsw i64 %745, 4
  %767 = add i64 %746, 4
  %768 = icmp eq i64 %767, %743
  br i1 %768, label %769, label %744

769:                                              ; preds = %744, %735
  %770 = phi i64 [ 1, %735 ], [ %766, %744 ]
  %771 = icmp eq i64 %740, 0
  br i1 %771, label %782, label %772

772:                                              ; preds = %769, %772
  %773 = phi i64 [ %779, %772 ], [ %770, %769 ]
  %774 = phi i64 [ %780, %772 ], [ 0, %769 ]
  %775 = getelementptr inbounds i32, ptr %666, i64 %773
  %776 = load i32, ptr %775, align 4, !tbaa !5
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds i8, ptr %665, i64 %777
  store i8 0, ptr %778, align 1, !tbaa !59
  %779 = add nuw nsw i64 %773, 1
  %780 = add i64 %774, 1
  %781 = icmp eq i64 %780, %740
  br i1 %781, label %782, label %772, !llvm.loop !284

782:                                              ; preds = %769, %772, %732
  %783 = load i32, ptr %667, align 4, !tbaa !5
  %784 = icmp slt i32 %783, 1
  br i1 %784, label %839, label %785

785:                                              ; preds = %782
  %786 = add nuw i32 %783, 1
  %787 = zext i32 %786 to i64
  %788 = add nsw i64 %787, -1
  %789 = add nsw i64 %787, -2
  %790 = and i64 %788, 3
  %791 = icmp ult i64 %789, 3
  br i1 %791, label %826, label %792

792:                                              ; preds = %785
  %793 = and i64 %788, -4
  br label %794

794:                                              ; preds = %794, %792
  %795 = phi i64 [ 1, %792 ], [ %816, %794 ]
  %796 = phi i64 [ 0, %792 ], [ %817, %794 ]
  %797 = getelementptr inbounds i32, ptr %667, i64 %795
  %798 = load i32, ptr %797, align 4, !tbaa !5
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i8, ptr %665, i64 %799
  store i8 0, ptr %800, align 1, !tbaa !59
  %801 = add nuw nsw i64 %795, 1
  %802 = getelementptr inbounds i32, ptr %667, i64 %801
  %803 = load i32, ptr %802, align 4, !tbaa !5
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i8, ptr %665, i64 %804
  store i8 0, ptr %805, align 1, !tbaa !59
  %806 = add nuw nsw i64 %795, 2
  %807 = getelementptr inbounds i32, ptr %667, i64 %806
  %808 = load i32, ptr %807, align 4, !tbaa !5
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds i8, ptr %665, i64 %809
  store i8 0, ptr %810, align 1, !tbaa !59
  %811 = add nuw nsw i64 %795, 3
  %812 = getelementptr inbounds i32, ptr %667, i64 %811
  %813 = load i32, ptr %812, align 4, !tbaa !5
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds i8, ptr %665, i64 %814
  store i8 0, ptr %815, align 1, !tbaa !59
  %816 = add nuw nsw i64 %795, 4
  %817 = add i64 %796, 4
  %818 = icmp eq i64 %817, %793
  br i1 %818, label %826, label %794

819:                                              ; preds = %730
  %820 = load i32, ptr %641, align 8, !tbaa !62
  %821 = tail call i32 @llvm.smax.i32(i32 %820, i32 -1)
  %822 = sext i32 %821 to i64
  %823 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %822) #9
  %824 = load i32, ptr %641, align 8, !tbaa !62
  %825 = sext i32 %824 to i64
  tail call void @llvm.memset.p0.i64(ptr nonnull align 1 %823, i8 0, i64 %825, i1 false)
  br label %839

826:                                              ; preds = %794, %785
  %827 = phi i64 [ 1, %785 ], [ %816, %794 ]
  %828 = icmp eq i64 %790, 0
  br i1 %828, label %839, label %829

829:                                              ; preds = %826, %829
  %830 = phi i64 [ %836, %829 ], [ %827, %826 ]
  %831 = phi i64 [ %837, %829 ], [ 0, %826 ]
  %832 = getelementptr inbounds i32, ptr %667, i64 %830
  %833 = load i32, ptr %832, align 4, !tbaa !5
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i8, ptr %665, i64 %834
  store i8 0, ptr %835, align 1, !tbaa !59
  %836 = add nuw nsw i64 %830, 1
  %837 = add i64 %831, 1
  %838 = icmp eq i64 %837, %790
  br i1 %838, label %839, label %829, !llvm.loop !285

839:                                              ; preds = %826, %829, %782, %819
  %840 = phi ptr [ %823, %819 ], [ %665, %782 ], [ %665, %829 ], [ %665, %826 ]
  %841 = load i32, ptr %676, align 4
  %842 = shl i32 %841, 2
  %843 = ashr exact i32 %842, 2
  %844 = load ptr, ptr %642, align 8, !tbaa !64
  %845 = sext i32 %843 to i64
  %846 = getelementptr inbounds ptr, ptr %844, i64 %845
  %847 = load ptr, ptr %846, align 8, !tbaa !24
  %848 = load i32, ptr %847, align 4, !tbaa !5
  %849 = icmp slt i32 %848, 1
  br i1 %849, label %902, label %850

850:                                              ; preds = %839
  %851 = add nuw i32 %848, 1
  %852 = zext i32 %851 to i64
  %853 = add nsw i64 %852, -1
  %854 = add nsw i64 %852, -2
  %855 = and i64 %853, 3
  %856 = icmp ult i64 %854, 3
  br i1 %856, label %884, label %857

857:                                              ; preds = %850
  %858 = and i64 %853, -4
  br label %859

859:                                              ; preds = %859, %857
  %860 = phi i64 [ 1, %857 ], [ %881, %859 ]
  %861 = phi i64 [ 0, %857 ], [ %882, %859 ]
  %862 = getelementptr inbounds i32, ptr %847, i64 %860
  %863 = load i32, ptr %862, align 4, !tbaa !5
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds i8, ptr %840, i64 %864
  store i8 1, ptr %865, align 1, !tbaa !59
  %866 = add nuw nsw i64 %860, 1
  %867 = getelementptr inbounds i32, ptr %847, i64 %866
  %868 = load i32, ptr %867, align 4, !tbaa !5
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, ptr %840, i64 %869
  store i8 1, ptr %870, align 1, !tbaa !59
  %871 = add nuw nsw i64 %860, 2
  %872 = getelementptr inbounds i32, ptr %847, i64 %871
  %873 = load i32, ptr %872, align 4, !tbaa !5
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds i8, ptr %840, i64 %874
  store i8 1, ptr %875, align 1, !tbaa !59
  %876 = add nuw nsw i64 %860, 3
  %877 = getelementptr inbounds i32, ptr %847, i64 %876
  %878 = load i32, ptr %877, align 4, !tbaa !5
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds i8, ptr %840, i64 %879
  store i8 1, ptr %880, align 1, !tbaa !59
  %881 = add nuw nsw i64 %860, 4
  %882 = add i64 %861, 4
  %883 = icmp eq i64 %882, %858
  br i1 %883, label %884, label %859

884:                                              ; preds = %859, %850
  %885 = phi i64 [ 1, %850 ], [ %881, %859 ]
  %886 = icmp eq i64 %855, 0
  br i1 %886, label %897, label %887

887:                                              ; preds = %884, %887
  %888 = phi i64 [ %894, %887 ], [ %885, %884 ]
  %889 = phi i64 [ %895, %887 ], [ 0, %884 ]
  %890 = getelementptr inbounds i32, ptr %847, i64 %888
  %891 = load i32, ptr %890, align 4, !tbaa !5
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i8, ptr %840, i64 %892
  store i8 1, ptr %893, align 1, !tbaa !59
  %894 = add nuw nsw i64 %888, 1
  %895 = add i64 %889, 1
  %896 = icmp eq i64 %895, %855
  br i1 %896, label %897, label %887, !llvm.loop !286

897:                                              ; preds = %887, %884
  %898 = load i32, ptr %676, align 4
  %899 = shl i32 %898, 2
  %900 = ashr exact i32 %899, 2
  %901 = sext i32 %900 to i64
  br label %902

902:                                              ; preds = %897, %839
  %903 = phi i64 [ %901, %897 ], [ %845, %839 ]
  %904 = load ptr, ptr %643, align 8, !tbaa !66
  %905 = getelementptr inbounds ptr, ptr %904, i64 %903
  %906 = load ptr, ptr %905, align 8, !tbaa !24
  %907 = load i32, ptr %906, align 4, !tbaa !5
  %908 = icmp slt i32 %907, 1
  br i1 %908, label %956, label %909

909:                                              ; preds = %902
  %910 = add nuw i32 %907, 1
  %911 = zext i32 %910 to i64
  %912 = add nsw i64 %911, -1
  %913 = add nsw i64 %911, -2
  %914 = and i64 %912, 3
  %915 = icmp ult i64 %913, 3
  br i1 %915, label %943, label %916

916:                                              ; preds = %909
  %917 = and i64 %912, -4
  br label %918

918:                                              ; preds = %918, %916
  %919 = phi i64 [ 1, %916 ], [ %940, %918 ]
  %920 = phi i64 [ 0, %916 ], [ %941, %918 ]
  %921 = getelementptr inbounds i32, ptr %906, i64 %919
  %922 = load i32, ptr %921, align 4, !tbaa !5
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i8, ptr %840, i64 %923
  store i8 2, ptr %924, align 1, !tbaa !59
  %925 = add nuw nsw i64 %919, 1
  %926 = getelementptr inbounds i32, ptr %906, i64 %925
  %927 = load i32, ptr %926, align 4, !tbaa !5
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds i8, ptr %840, i64 %928
  store i8 2, ptr %929, align 1, !tbaa !59
  %930 = add nuw nsw i64 %919, 2
  %931 = getelementptr inbounds i32, ptr %906, i64 %930
  %932 = load i32, ptr %931, align 4, !tbaa !5
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i8, ptr %840, i64 %933
  store i8 2, ptr %934, align 1, !tbaa !59
  %935 = add nuw nsw i64 %919, 3
  %936 = getelementptr inbounds i32, ptr %906, i64 %935
  %937 = load i32, ptr %936, align 4, !tbaa !5
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i8, ptr %840, i64 %938
  store i8 2, ptr %939, align 1, !tbaa !59
  %940 = add nuw nsw i64 %919, 4
  %941 = add i64 %920, 4
  %942 = icmp eq i64 %941, %917
  br i1 %942, label %943, label %918

943:                                              ; preds = %918, %909
  %944 = phi i64 [ 1, %909 ], [ %940, %918 ]
  %945 = icmp eq i64 %914, 0
  br i1 %945, label %956, label %946

946:                                              ; preds = %943, %946
  %947 = phi i64 [ %953, %946 ], [ %944, %943 ]
  %948 = phi i64 [ %954, %946 ], [ 0, %943 ]
  %949 = getelementptr inbounds i32, ptr %906, i64 %947
  %950 = load i32, ptr %949, align 4, !tbaa !5
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i8, ptr %840, i64 %951
  store i8 2, ptr %952, align 1, !tbaa !59
  %953 = add nuw nsw i64 %947, 1
  %954 = add i64 %948, 1
  %955 = icmp eq i64 %954, %914
  br i1 %955, label %956, label %946, !llvm.loop !287

956:                                              ; preds = %943, %946, %902, %726
  %957 = phi ptr [ %729, %726 ], [ %840, %902 ], [ %840, %946 ], [ %840, %943 ]
  %958 = phi ptr [ %667, %726 ], [ %906, %902 ], [ %906, %946 ], [ %906, %943 ]
  %959 = phi ptr [ %666, %726 ], [ %847, %902 ], [ %847, %946 ], [ %847, %943 ]
  %960 = phi ptr [ %665, %726 ], [ %840, %902 ], [ %840, %946 ], [ %840, %943 ]
  %961 = load i8, ptr %677, align 1
  %962 = and i8 %961, 7
  %963 = icmp eq i8 %962, 0
  br i1 %963, label %1257, label %964

964:                                              ; preds = %956
  %965 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  %966 = icmp eq i32 %965, 0
  br i1 %966, label %970, label %967

967:                                              ; preds = %964
  %968 = load i32, ptr %676, align 4
  %969 = icmp slt i32 %968, 0
  br label %970

970:                                              ; preds = %967, %964
  %971 = phi i1 [ false, %964 ], [ %969, %967 ]
  %972 = and i8 %961, 120
  %973 = icmp eq i8 %972, 0
  br i1 %973, label %1005, label %974

974:                                              ; preds = %970
  %975 = icmp slt i32 %669, %624
  br i1 %975, label %976, label %989

976:                                              ; preds = %974
  %977 = sext i32 %669 to i64
  br label %978

978:                                              ; preds = %976, %984
  %979 = phi i64 [ %977, %976 ], [ %985, %984 ]
  %980 = getelementptr inbounds i16, ptr %195, i64 %979
  %981 = load i16, ptr %980, align 2, !tbaa !45
  %982 = zext i16 %981 to i32
  %983 = icmp sgt i32 %712, %982
  br i1 %983, label %984, label %987

984:                                              ; preds = %978
  %985 = add nsw i64 %979, 1
  %986 = icmp eq i64 %985, %655
  br i1 %986, label %989, label %978

987:                                              ; preds = %978
  %988 = trunc i64 %979 to i32
  br label %989

989:                                              ; preds = %984, %987, %974
  %990 = phi i32 [ %669, %974 ], [ %988, %987 ], [ %624, %984 ]
  %991 = icmp slt i32 %670, %625
  br i1 %991, label %992, label %1005

992:                                              ; preds = %989
  %993 = sext i32 %670 to i64
  br label %994

994:                                              ; preds = %992, %1000
  %995 = phi i64 [ %993, %992 ], [ %1001, %1000 ]
  %996 = getelementptr inbounds i16, ptr %241, i64 %995
  %997 = load i16, ptr %996, align 2, !tbaa !45
  %998 = zext i16 %997 to i32
  %999 = icmp sgt i32 %712, %998
  br i1 %999, label %1000, label %1003

1000:                                             ; preds = %994
  %1001 = add nsw i64 %995, 1
  %1002 = icmp eq i64 %1001, %656
  br i1 %1002, label %1005, label %994

1003:                                             ; preds = %994
  %1004 = trunc i64 %995 to i32
  br label %1005

1005:                                             ; preds = %1000, %1003, %989, %970
  %1006 = phi i32 [ %670, %970 ], [ %670, %989 ], [ %1004, %1003 ], [ %625, %1000 ]
  %1007 = phi i32 [ %669, %970 ], [ %990, %989 ], [ %990, %1003 ], [ %990, %1000 ]
  %1008 = add nsw i32 %664, 1
  %1009 = icmp slt i32 %1008, %712
  br i1 %1009, label %1010, label %1075

1010:                                             ; preds = %1005
  %1011 = xor i32 %664, -1
  %1012 = add i32 %712, %1011
  %1013 = zext i32 %1012 to i64
  %1014 = icmp ult i32 %1012, 8
  br i1 %1014, label %1064, label %1015

1015:                                             ; preds = %1010
  %1016 = icmp ult i32 %1012, 64
  br i1 %1016, label %1045, label %1017

1017:                                             ; preds = %1015
  %1018 = and i64 %1013, 4294967232
  %1019 = trunc i32 %1008 to i16
  %1020 = insertelement <16 x i16> poison, i16 %1019, i64 0
  %1021 = shufflevector <16 x i16> %1020, <16 x i16> poison, <16 x i32> zeroinitializer
  %1022 = add <16 x i16> %1021, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>
  %1023 = trunc i64 %1018 to i32
  %1024 = add i32 %1008, %1023
  br label %1025

1025:                                             ; preds = %1025, %1017
  %1026 = phi i64 [ 0, %1017 ], [ %1035, %1025 ]
  %1027 = phi <16 x i16> [ %1022, %1017 ], [ %1036, %1025 ]
  %1028 = add <16 x i16> %1027, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %1029 = add <16 x i16> %1027, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %1030 = add <16 x i16> %1027, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %1031 = getelementptr inbounds i16, ptr %425, i64 %1026
  store <16 x i16> %1027, ptr %1031, align 2, !tbaa !45
  %1032 = getelementptr inbounds i16, ptr %1031, i64 16
  store <16 x i16> %1028, ptr %1032, align 2, !tbaa !45
  %1033 = getelementptr inbounds i16, ptr %1031, i64 32
  store <16 x i16> %1029, ptr %1033, align 2, !tbaa !45
  %1034 = getelementptr inbounds i16, ptr %1031, i64 48
  store <16 x i16> %1030, ptr %1034, align 2, !tbaa !45
  %1035 = add nuw i64 %1026, 64
  %1036 = add <16 x i16> %1027, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %1037 = icmp eq i64 %1035, %1018
  br i1 %1037, label %1038, label %1025, !llvm.loop !288

1038:                                             ; preds = %1025
  %1039 = icmp eq i64 %1018, %1013
  br i1 %1039, label %1075, label %1040

1040:                                             ; preds = %1038
  %1041 = trunc i64 %1018 to i32
  %1042 = add i32 %1008, %1041
  %1043 = and i64 %1013, 56
  %1044 = icmp eq i64 %1043, 0
  br i1 %1044, label %1064, label %1045

1045:                                             ; preds = %1015, %1040
  %1046 = phi i32 [ %1024, %1040 ], [ %1008, %1015 ]
  %1047 = phi i64 [ %1018, %1040 ], [ 0, %1015 ]
  %1048 = and i64 %1013, 4294967288
  %1049 = trunc i64 %1048 to i32
  %1050 = add i32 %1008, %1049
  %1051 = trunc i32 %1046 to i16
  %1052 = insertelement <8 x i16> poison, i16 %1051, i64 0
  %1053 = shufflevector <8 x i16> %1052, <8 x i16> poison, <8 x i32> zeroinitializer
  %1054 = add <8 x i16> %1053, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  br label %1055

1055:                                             ; preds = %1055, %1045
  %1056 = phi i64 [ %1047, %1045 ], [ %1059, %1055 ]
  %1057 = phi <8 x i16> [ %1054, %1045 ], [ %1060, %1055 ]
  %1058 = getelementptr inbounds i16, ptr %425, i64 %1056
  store <8 x i16> %1057, ptr %1058, align 2, !tbaa !45
  %1059 = add nuw i64 %1056, 8
  %1060 = add <8 x i16> %1057, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1061 = icmp eq i64 %1059, %1048
  br i1 %1061, label %1062, label %1055, !llvm.loop !289

1062:                                             ; preds = %1055
  %1063 = icmp eq i64 %1048, %1013
  br i1 %1063, label %1075, label %1064

1064:                                             ; preds = %1010, %1040, %1062
  %1065 = phi i64 [ 0, %1010 ], [ %1018, %1040 ], [ %1048, %1062 ]
  %1066 = phi i32 [ %1008, %1010 ], [ %1042, %1040 ], [ %1050, %1062 ]
  br label %1067

1067:                                             ; preds = %1064, %1067
  %1068 = phi i64 [ %1071, %1067 ], [ %1065, %1064 ]
  %1069 = phi i32 [ %1073, %1067 ], [ %1066, %1064 ]
  %1070 = trunc i32 %1069 to i16
  %1071 = add nuw nsw i64 %1068, 1
  %1072 = getelementptr inbounds i16, ptr %425, i64 %1068
  store i16 %1070, ptr %1072, align 2, !tbaa !45
  %1073 = add nsw i32 %1069, 1
  %1074 = icmp eq i64 %1071, %1013
  br i1 %1074, label %1075, label %1067, !llvm.loop !290

1075:                                             ; preds = %1067, %1038, %1062, %1005
  %1076 = phi i32 [ 0, %1005 ], [ %1012, %1062 ], [ %1012, %1038 ], [ %1012, %1067 ]
  %1077 = zext i32 %1076 to i64
  %1078 = getelementptr inbounds i16, ptr %425, i64 %1077
  %1079 = select i1 %971, ptr %241, ptr %195
  %1080 = select i1 %971, i32 %1006, i32 %1007
  %1081 = select i1 %971, i32 %625, i32 %624
  %1082 = icmp slt i32 %1080, %1081
  br i1 %1082, label %1083, label %1242

1083:                                             ; preds = %1075
  %1084 = sub nsw i32 %1081, %1080
  %1085 = icmp sgt i32 %1084, 6
  br i1 %1085, label %1086, label %1179

1086:                                             ; preds = %1083
  %1087 = add nsw i32 %1081, -2
  %1088 = add nsw i32 %1080, 2
  %1089 = icmp slt i32 %1088, %1087
  br i1 %1089, label %1090, label %1179

1090:                                             ; preds = %1086
  %1091 = add nsw i32 %1080, 1
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds i16, ptr %1079, i64 %1092
  %1094 = load i16, ptr %1093, align 2, !tbaa !45
  %1095 = zext i16 %1094 to i64
  %1096 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1095
  %1097 = getelementptr inbounds %class.Vector, ptr %1096, i64 0, i32 2
  %1098 = load double, ptr %1097, align 8, !tbaa !50
  %1099 = sext i32 %1080 to i64
  %1100 = getelementptr inbounds i16, ptr %1079, i64 %1099
  %1101 = load i16, ptr %1100, align 2, !tbaa !45
  %1102 = zext i16 %1101 to i64
  %1103 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1102
  %1104 = getelementptr inbounds %class.Vector, ptr %1103, i64 0, i32 2
  %1105 = load double, ptr %1104, align 8, !tbaa !50
  %1106 = getelementptr inbounds %class.Vector, ptr %1096, i64 0, i32 1
  %1107 = load double, ptr %1106, align 8, !tbaa !68
  %1108 = getelementptr inbounds %class.Vector, ptr %1103, i64 0, i32 1
  %1109 = load double, ptr %1108, align 8, !tbaa !68
  %1110 = load double, ptr %1096, align 8, !tbaa !69
  %1111 = load double, ptr %1103, align 8, !tbaa !69
  %1112 = sext i32 %1088 to i64
  %1113 = sext i32 %1087 to i64
  %1114 = insertelement <2 x double> poison, double %1098, i64 0
  %1115 = insertelement <2 x double> %1114, double %1105, i64 1
  %1116 = insertelement <2 x double> poison, double %1107, i64 0
  %1117 = insertelement <2 x double> %1116, double %1109, i64 1
  %1118 = insertelement <2 x double> poison, double %1110, i64 0
  %1119 = insertelement <2 x double> %1118, double %1111, i64 1
  %1120 = insertelement <2 x double> poison, double %695, i64 0
  %1121 = shufflevector <2 x double> %1120, <2 x double> poison, <2 x i32> zeroinitializer
  %1122 = shufflevector <2 x double> %692, <2 x double> poison, <2 x i32> <i32 1, i32 1>
  %1123 = shufflevector <2 x double> %692, <2 x double> poison, <2 x i32> zeroinitializer
  br label %1124

1124:                                             ; preds = %1090, %1124
  %1125 = phi i64 [ %1112, %1090 ], [ %1170, %1124 ]
  %1126 = phi i32 [ %1080, %1090 ], [ %1172, %1124 ]
  %1127 = phi i32 [ 0, %1090 ], [ %1169, %1124 ]
  %1128 = phi i16 [ %1101, %1090 ], [ %1135, %1124 ]
  %1129 = phi i16 [ %1094, %1090 ], [ %1139, %1124 ]
  %1130 = phi <2 x double> [ %1115, %1090 ], [ %1174, %1124 ]
  %1131 = phi <2 x double> [ %1117, %1090 ], [ %1176, %1124 ]
  %1132 = phi <2 x double> [ %1119, %1090 ], [ %1178, %1124 ]
  %1133 = fsub <2 x double> %1121, %1130
  %1134 = getelementptr inbounds i16, ptr %1079, i64 %1125
  %1135 = load i16, ptr %1134, align 2, !tbaa !45
  %1136 = add nsw i32 %1126, 3
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds i16, ptr %1079, i64 %1137
  %1139 = load i16, ptr %1138, align 2, !tbaa !45
  %1140 = zext i16 %1135 to i64
  %1141 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1140
  %1142 = load double, ptr %1141, align 8, !tbaa !69
  %1143 = zext i16 %1139 to i64
  %1144 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1143
  %1145 = load double, ptr %1144, align 8, !tbaa !69
  %1146 = getelementptr inbounds %class.Vector, ptr %1141, i64 0, i32 1
  %1147 = load double, ptr %1146, align 8, !tbaa !68
  %1148 = getelementptr inbounds %class.Vector, ptr %1144, i64 0, i32 1
  %1149 = load double, ptr %1148, align 8, !tbaa !68
  %1150 = getelementptr inbounds %class.Vector, ptr %1141, i64 0, i32 2
  %1151 = load double, ptr %1150, align 8, !tbaa !50
  %1152 = getelementptr inbounds %class.Vector, ptr %1144, i64 0, i32 2
  %1153 = load double, ptr %1152, align 8, !tbaa !50
  %1154 = fsub <2 x double> %1123, %1132
  %1155 = fmul <2 x double> %1154, %1154
  %1156 = fsub <2 x double> %1122, %1131
  %1157 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1156, <2 x double> %1156, <2 x double> %1155)
  %1158 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %1133, <2 x double> %1133, <2 x double> %1157)
  %1159 = fcmp olt <2 x double> %1158, %658
  %1160 = zext i32 %1127 to i64
  %1161 = getelementptr inbounds i16, ptr %287, i64 %1160
  store i16 %1128, ptr %1161, align 2, !tbaa !45
  %1162 = extractelement <2 x i1> %1159, i64 1
  %1163 = zext i1 %1162 to i32
  %1164 = add nuw nsw i32 %1127, %1163
  %1165 = zext i32 %1164 to i64
  %1166 = getelementptr inbounds i16, ptr %287, i64 %1165
  store i16 %1129, ptr %1166, align 2, !tbaa !45
  %1167 = extractelement <2 x i1> %1159, i64 0
  %1168 = zext i1 %1167 to i32
  %1169 = add i32 %1164, %1168
  %1170 = add nsw i64 %1125, 2
  %1171 = icmp slt i64 %1170, %1113
  %1172 = trunc i64 %1125 to i32
  %1173 = insertelement <2 x double> poison, double %1153, i64 0
  %1174 = insertelement <2 x double> %1173, double %1151, i64 1
  %1175 = insertelement <2 x double> poison, double %1149, i64 0
  %1176 = insertelement <2 x double> %1175, double %1147, i64 1
  %1177 = insertelement <2 x double> poison, double %1145, i64 0
  %1178 = insertelement <2 x double> %1177, double %1142, i64 1
  br i1 %1171, label %1124, label %1179

1179:                                             ; preds = %1124, %1086, %1083
  %1180 = phi i32 [ 0, %1083 ], [ 0, %1086 ], [ %1169, %1124 ]
  %1181 = phi i32 [ %1080, %1083 ], [ %1080, %1086 ], [ %1172, %1124 ]
  %1182 = icmp slt i32 %1181, %1081
  br i1 %1182, label %1183, label %1188

1183:                                             ; preds = %1179
  %1184 = sext i32 %1181 to i64
  %1185 = sext i32 %1081 to i64
  %1186 = extractelement <2 x double> %692, i64 0
  %1187 = extractelement <2 x double> %692, i64 1
  br label %1193

1188:                                             ; preds = %1216, %1179
  %1189 = phi i32 [ %1180, %1179 ], [ %1217, %1216 ]
  %1190 = icmp sgt i32 %1189, 0
  br i1 %1190, label %1191, label %1242

1191:                                             ; preds = %1188
  %1192 = zext i32 %1189 to i64
  br label %1220

1193:                                             ; preds = %1183, %1216
  %1194 = phi i64 [ %1184, %1183 ], [ %1218, %1216 ]
  %1195 = phi i32 [ %1180, %1183 ], [ %1217, %1216 ]
  %1196 = getelementptr inbounds i16, ptr %1079, i64 %1194
  %1197 = load i16, ptr %1196, align 2, !tbaa !45
  %1198 = zext i16 %1197 to i64
  %1199 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1198
  %1200 = load double, ptr %1199, align 8, !tbaa !69
  %1201 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 1
  %1202 = load double, ptr %1201, align 8, !tbaa !68
  %1203 = getelementptr inbounds %class.Vector, ptr %1199, i64 0, i32 2
  %1204 = load double, ptr %1203, align 8, !tbaa !50
  %1205 = fsub double %1186, %1200
  %1206 = fmul double %1205, %1205
  %1207 = fsub double %1187, %1202
  %1208 = tail call double @llvm.fmuladd.f64(double %1207, double %1207, double %1206)
  %1209 = fsub double %695, %1204
  %1210 = tail call double @llvm.fmuladd.f64(double %1209, double %1209, double %1208)
  %1211 = fcmp ugt double %1210, %27
  br i1 %1211, label %1216, label %1212

1212:                                             ; preds = %1193
  %1213 = add nsw i32 %1195, 1
  %1214 = sext i32 %1195 to i64
  %1215 = getelementptr inbounds i16, ptr %287, i64 %1214
  store i16 %1197, ptr %1215, align 2, !tbaa !45
  br label %1216

1216:                                             ; preds = %1212, %1193
  %1217 = phi i32 [ %1213, %1212 ], [ %1195, %1193 ]
  %1218 = add nsw i64 %1194, 1
  %1219 = icmp eq i64 %1218, %1185
  br i1 %1219, label %1188, label %1193

1220:                                             ; preds = %1191, %1237
  %1221 = phi i64 [ 0, %1191 ], [ %1240, %1237 ]
  %1222 = phi ptr [ %1078, %1191 ], [ %1239, %1237 ]
  %1223 = getelementptr inbounds i16, ptr %287, i64 %1221
  %1224 = load i16, ptr %1223, align 2, !tbaa !45
  %1225 = zext i16 %1224 to i64
  %1226 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1225, i32 4
  %1227 = load i8, ptr %1226, align 1
  %1228 = and i8 %1227, 7
  store i16 %1224, ptr %1222, align 2, !tbaa !45
  %1229 = getelementptr inbounds i16, ptr %1222, i64 1
  %1230 = insertelement <2 x i16> poison, i16 %1224, i64 0
  %1231 = shufflevector <2 x i16> %1230, <2 x i16> poison, <2 x i32> zeroinitializer
  %1232 = add <2 x i16> %1231, <i16 1, i16 2>
  store <2 x i16> %1232, ptr %1229, align 2, !tbaa !45
  %1233 = icmp ult i8 %1228, 4
  br i1 %1233, label %1237, label %1234

1234:                                             ; preds = %1220
  %1235 = add <2 x i16> %1231, <i16 3, i16 4>
  %1236 = getelementptr inbounds i16, ptr %1222, i64 3
  store <2 x i16> %1235, ptr %1236, align 2, !tbaa !45
  br label %1237

1237:                                             ; preds = %1234, %1220
  %1238 = zext i8 %1228 to i64
  %1239 = getelementptr inbounds i16, ptr %1222, i64 %1238
  %1240 = add nuw nsw i64 %1221, 1
  %1241 = icmp eq i64 %1240, %1192
  br i1 %1241, label %1242, label %1220

1242:                                             ; preds = %1237, %1188, %1075
  %1243 = phi ptr [ %1078, %1075 ], [ %1078, %1188 ], [ %1239, %1237 ]
  %1244 = ptrtoint ptr %1243 to i64
  %1245 = sub i64 %1244, %644
  %1246 = lshr exact i64 %1245, 1
  %1247 = trunc i64 %1246 to i32
  %1248 = icmp eq i32 %1247, 0
  br i1 %1248, label %1260, label %1249

1249:                                             ; preds = %1242
  %1250 = shl i64 %1245, 31
  %1251 = add i64 %1250, -4294967296
  %1252 = ashr i64 %1251, 32
  %1253 = getelementptr inbounds i16, ptr %425, i64 %1252
  %1254 = load i16, ptr %1253, align 2, !tbaa !45
  %1255 = ashr i64 %1250, 32
  %1256 = getelementptr inbounds i16, ptr %425, i64 %1255
  store i16 %1254, ptr %1256, align 2, !tbaa !45
  br label %1260

1257:                                             ; preds = %956
  %1258 = add nsw i32 %672, 1
  %1259 = load i32, ptr @_ZN20ComputeNonbondedUtil12fixedAtomsOnE, align 4, !tbaa !5
  br label %1260

1260:                                             ; preds = %1242, %1249, %1257
  %1261 = phi i32 [ %1259, %1257 ], [ %965, %1249 ], [ %965, %1242 ]
  %1262 = phi i32 [ %1258, %1257 ], [ 0, %1249 ], [ 0, %1242 ]
  %1263 = phi i32 [ %671, %1257 ], [ %1247, %1249 ], [ 0, %1242 ]
  %1264 = phi i32 [ %670, %1257 ], [ %1006, %1249 ], [ %1006, %1242 ]
  %1265 = phi i32 [ %669, %1257 ], [ %1007, %1249 ], [ %1007, %1242 ]
  %1266 = icmp eq i32 %1261, 0
  br i1 %1266, label %1271, label %1267

1267:                                             ; preds = %1260
  %1268 = load i32, ptr %676, align 4
  %1269 = and i32 %1268, 1073741824
  %1270 = icmp ne i32 %1269, 0
  br label %1271

1271:                                             ; preds = %1267, %1260
  %1272 = phi i1 [ false, %1260 ], [ %1270, %1267 ]
  %1273 = load i32, ptr %17, align 8, !tbaa !19
  %1274 = add nsw i32 %645, %1273
  %1275 = load i32, ptr %646, align 4, !tbaa !70
  %1276 = icmp sgt i32 %1275, %1274
  br i1 %1276, label %1292, label %1277

1277:                                             ; preds = %1271, %1277
  %1278 = phi i32 [ %1280, %1277 ], [ %1275, %1271 ]
  %1279 = ashr i32 %1278, 1
  %1280 = add nsw i32 %1279, %1278
  %1281 = icmp sgt i32 %1280, %1274
  br i1 %1281, label %1282, label %1277

1282:                                             ; preds = %1277
  %1283 = sext i32 %1280 to i64
  %1284 = icmp slt i32 %1280, 0
  %1285 = shl nsw i64 %1283, 1
  %1286 = select i1 %1284, i64 -1, i64 %1285
  %1287 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %1286) #9
  %1288 = load ptr, ptr %12, align 8, !tbaa !47
  %1289 = sext i32 %1273 to i64
  %1290 = shl nsw i64 %1289, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %1287, ptr align 2 %1288, i64 %1290, i1 false)
  %1291 = icmp eq ptr %1288, null
  br i1 %1291, label %1296, label %1294

1292:                                             ; preds = %1271
  %1293 = load ptr, ptr %12, align 8, !tbaa !47
  br label %1298

1294:                                             ; preds = %1282
  tail call void @_ZdaPv(ptr noundef nonnull %1288) #10
  %1295 = load i32, ptr %17, align 8, !tbaa !19
  br label %1296

1296:                                             ; preds = %1294, %1282
  %1297 = phi i32 [ %1295, %1294 ], [ %1273, %1282 ]
  store ptr %1287, ptr %12, align 8, !tbaa !47
  store i32 %1280, ptr %646, align 4, !tbaa !70
  br label %1298

1298:                                             ; preds = %1292, %1296
  %1299 = phi i32 [ %1273, %1292 ], [ %1297, %1296 ]
  %1300 = phi ptr [ %1293, %1292 ], [ %1287, %1296 ]
  %1301 = ptrtoint ptr %1300 to i64
  %1302 = add nsw i32 %1299, 1
  %1303 = sext i32 %1302 to i64
  %1304 = getelementptr inbounds i16, ptr %1300, i64 %1303
  %1305 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  %1306 = icmp eq i32 %1305, 0
  br i1 %1306, label %1487, label %1307

1307:                                             ; preds = %1298
  %1308 = load i8, ptr %696, align 2, !tbaa !52
  %1309 = zext i8 %1308 to i32
  %1310 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4, !tbaa !5
  %1311 = icmp eq i32 %1310, 0
  br i1 %1311, label %1366, label %1312

1312:                                             ; preds = %1307
  %1313 = icmp eq i8 %1308, 1
  br i1 %1313, label %1314, label %2597

1314:                                             ; preds = %1312
  %1315 = icmp slt i32 %1262, %1263
  br i1 %1315, label %1316, label %1427

1316:                                             ; preds = %1314
  %1317 = sext i32 %1262 to i64
  %1318 = sext i32 %1263 to i64
  %1319 = sub nsw i64 %1318, %1317
  %1320 = xor i64 %1317, -1
  %1321 = and i64 %1319, 1
  %1322 = icmp eq i64 %1321, 0
  br i1 %1322, label %1334, label %1323

1323:                                             ; preds = %1316
  %1324 = getelementptr inbounds i16, ptr %425, i64 %1317
  %1325 = load i16, ptr %1324, align 2, !tbaa !45
  %1326 = zext i16 %1325 to i64
  %1327 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1326, i32 3
  %1328 = load i8, ptr %1327, align 2, !tbaa !52
  %1329 = icmp eq i8 %1328, 1
  br i1 %1329, label %1330, label %1331

1330:                                             ; preds = %1323
  store i16 %1325, ptr %471, align 2, !tbaa !45
  br label %1331

1331:                                             ; preds = %1330, %1323
  %1332 = phi ptr [ %659, %1330 ], [ %471, %1323 ]
  %1333 = add nsw i64 %1317, 1
  br label %1334

1334:                                             ; preds = %1331, %1316
  %1335 = phi ptr [ undef, %1316 ], [ %1332, %1331 ]
  %1336 = phi i64 [ %1317, %1316 ], [ %1333, %1331 ]
  %1337 = phi ptr [ %471, %1316 ], [ %1332, %1331 ]
  %1338 = sub nsw i64 0, %1318
  %1339 = icmp eq i64 %1320, %1338
  br i1 %1339, label %1427, label %1340

1340:                                             ; preds = %1334, %1362
  %1341 = phi i64 [ %1364, %1362 ], [ %1336, %1334 ]
  %1342 = phi ptr [ %1363, %1362 ], [ %1337, %1334 ]
  %1343 = getelementptr inbounds i16, ptr %425, i64 %1341
  %1344 = load i16, ptr %1343, align 2, !tbaa !45
  %1345 = zext i16 %1344 to i64
  %1346 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1345, i32 3
  %1347 = load i8, ptr %1346, align 2, !tbaa !52
  %1348 = icmp eq i8 %1347, 1
  br i1 %1348, label %1349, label %1351

1349:                                             ; preds = %1340
  %1350 = getelementptr inbounds i16, ptr %1342, i64 1
  store i16 %1344, ptr %1342, align 2, !tbaa !45
  br label %1351

1351:                                             ; preds = %1349, %1340
  %1352 = phi ptr [ %1350, %1349 ], [ %1342, %1340 ]
  %1353 = add nsw i64 %1341, 1
  %1354 = getelementptr inbounds i16, ptr %425, i64 %1353
  %1355 = load i16, ptr %1354, align 2, !tbaa !45
  %1356 = zext i16 %1355 to i64
  %1357 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1356, i32 3
  %1358 = load i8, ptr %1357, align 2, !tbaa !52
  %1359 = icmp eq i8 %1358, 1
  br i1 %1359, label %1360, label %1362

1360:                                             ; preds = %1351
  %1361 = getelementptr inbounds i16, ptr %1352, i64 1
  store i16 %1355, ptr %1352, align 2, !tbaa !45
  br label %1362

1362:                                             ; preds = %1360, %1351
  %1363 = phi ptr [ %1361, %1360 ], [ %1352, %1351 ]
  %1364 = add nsw i64 %1341, 2
  %1365 = icmp eq i64 %1364, %1318
  br i1 %1365, label %1427, label %1340

1366:                                             ; preds = %1307
  %1367 = add i8 %1308, -3
  %1368 = icmp ult i8 %1367, -2
  br i1 %1368, label %2597, label %1369

1369:                                             ; preds = %1366
  %1370 = icmp slt i32 %1262, %1263
  br i1 %1370, label %1371, label %1427

1371:                                             ; preds = %1369
  %1372 = sext i32 %1262 to i64
  %1373 = sext i32 %1263 to i64
  %1374 = sub nsw i64 %1373, %1372
  %1375 = xor i64 %1372, -1
  %1376 = and i64 %1374, 1
  %1377 = icmp eq i64 %1376, 0
  br i1 %1377, label %1391, label %1378

1378:                                             ; preds = %1371
  %1379 = getelementptr inbounds i16, ptr %425, i64 %1372
  %1380 = load i16, ptr %1379, align 2, !tbaa !45
  %1381 = zext i16 %1380 to i64
  %1382 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1381, i32 3
  %1383 = load i8, ptr %1382, align 2, !tbaa !52
  %1384 = zext i8 %1383 to i32
  %1385 = add nuw nsw i32 %1384, %1309
  %1386 = icmp eq i32 %1385, 3
  br i1 %1386, label %1387, label %1388

1387:                                             ; preds = %1378
  store i16 %1380, ptr %471, align 2, !tbaa !45
  br label %1388

1388:                                             ; preds = %1387, %1378
  %1389 = phi ptr [ %660, %1387 ], [ %471, %1378 ]
  %1390 = add nsw i64 %1372, 1
  br label %1391

1391:                                             ; preds = %1388, %1371
  %1392 = phi ptr [ undef, %1371 ], [ %1389, %1388 ]
  %1393 = phi i64 [ %1372, %1371 ], [ %1390, %1388 ]
  %1394 = phi ptr [ %471, %1371 ], [ %1389, %1388 ]
  %1395 = sub nsw i64 0, %1373
  %1396 = icmp eq i64 %1375, %1395
  br i1 %1396, label %1427, label %1397

1397:                                             ; preds = %1391, %1423
  %1398 = phi i64 [ %1425, %1423 ], [ %1393, %1391 ]
  %1399 = phi ptr [ %1424, %1423 ], [ %1394, %1391 ]
  %1400 = getelementptr inbounds i16, ptr %425, i64 %1398
  %1401 = load i16, ptr %1400, align 2, !tbaa !45
  %1402 = zext i16 %1401 to i64
  %1403 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1402, i32 3
  %1404 = load i8, ptr %1403, align 2, !tbaa !52
  %1405 = zext i8 %1404 to i32
  %1406 = add nuw nsw i32 %1405, %1309
  %1407 = icmp eq i32 %1406, 3
  br i1 %1407, label %1408, label %1410

1408:                                             ; preds = %1397
  %1409 = getelementptr inbounds i16, ptr %1399, i64 1
  store i16 %1401, ptr %1399, align 2, !tbaa !45
  br label %1410

1410:                                             ; preds = %1408, %1397
  %1411 = phi ptr [ %1409, %1408 ], [ %1399, %1397 ]
  %1412 = add nsw i64 %1398, 1
  %1413 = getelementptr inbounds i16, ptr %425, i64 %1412
  %1414 = load i16, ptr %1413, align 2, !tbaa !45
  %1415 = zext i16 %1414 to i64
  %1416 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1415, i32 3
  %1417 = load i8, ptr %1416, align 2, !tbaa !52
  %1418 = zext i8 %1417 to i32
  %1419 = add nuw nsw i32 %1418, %1309
  %1420 = icmp eq i32 %1419, 3
  br i1 %1420, label %1421, label %1423

1421:                                             ; preds = %1410
  %1422 = getelementptr inbounds i16, ptr %1411, i64 1
  store i16 %1414, ptr %1411, align 2, !tbaa !45
  br label %1423

1423:                                             ; preds = %1421, %1410
  %1424 = phi ptr [ %1422, %1421 ], [ %1411, %1410 ]
  %1425 = add nsw i64 %1398, 2
  %1426 = icmp eq i64 %1425, %1373
  br i1 %1426, label %1427, label %1397

1427:                                             ; preds = %1334, %1362, %1391, %1423, %1314, %1369
  %1428 = phi ptr [ %471, %1369 ], [ %471, %1314 ], [ %1392, %1391 ], [ %1424, %1423 ], [ %1335, %1334 ], [ %1363, %1362 ]
  %1429 = ptrtoint ptr %1428 to i64
  %1430 = sub i64 %1429, %647
  %1431 = lshr exact i64 %1430, 1
  %1432 = trunc i64 %1431 to i32
  %1433 = icmp sgt i32 %1432, 0
  br i1 %1433, label %1434, label %1708

1434:                                             ; preds = %1427
  %1435 = and i64 %1431, 4294967295
  %1436 = extractelement <2 x double> %692, i64 0
  %1437 = extractelement <2 x double> %692, i64 1
  br label %1438

1438:                                             ; preds = %1434, %1482
  %1439 = phi i64 [ 0, %1434 ], [ %1485, %1482 ]
  %1440 = phi ptr [ %471, %1434 ], [ %1484, %1482 ]
  %1441 = phi ptr [ %1304, %1434 ], [ %1483, %1482 ]
  %1442 = getelementptr inbounds i16, ptr %471, i64 %1439
  %1443 = load i16, ptr %1442, align 2, !tbaa !45
  %1444 = zext i16 %1443 to i64
  %1445 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1444
  %1446 = load double, ptr %1445, align 8, !tbaa !69
  %1447 = fsub double %1436, %1446
  %1448 = fmul double %1447, %1447
  %1449 = getelementptr inbounds %class.Vector, ptr %1445, i64 0, i32 1
  %1450 = load double, ptr %1449, align 8, !tbaa !68
  %1451 = fsub double %1437, %1450
  %1452 = tail call double @llvm.fmuladd.f64(double %1451, double %1451, double %1448)
  %1453 = getelementptr inbounds %class.Vector, ptr %1445, i64 0, i32 2
  %1454 = load double, ptr %1453, align 8, !tbaa !50
  %1455 = fsub double %695, %1454
  %1456 = tail call double @llvm.fmuladd.f64(double %1455, double %1455, double %1452)
  br i1 %1272, label %1457, label %1464

1457:                                             ; preds = %1438
  %1458 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1444
  %1459 = load i32, ptr %1458, align 4
  %1460 = and i32 %1459, 1073741824
  %1461 = icmp ne i32 %1460, 0
  %1462 = fcmp ugt double %1456, %24
  %1463 = select i1 %1461, i1 true, i1 %1462
  br i1 %1463, label %1482, label %1469

1464:                                             ; preds = %1438
  %1465 = fcmp ugt double %1456, %24
  br i1 %1465, label %1482, label %1466

1466:                                             ; preds = %1464
  %1467 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1444
  %1468 = load i32, ptr %1467, align 4
  br label %1469

1469:                                             ; preds = %1466, %1457
  %1470 = phi i32 [ %1468, %1466 ], [ %1459, %1457 ]
  %1471 = shl i32 %1470, 2
  %1472 = ashr exact i32 %1471, 2
  %1473 = icmp slt i32 %1472, %720
  %1474 = icmp sgt i32 %1472, %722
  %1475 = select i1 %1473, i1 true, i1 %1474
  %1476 = select i1 %1475, ptr %1441, ptr %1440
  %1477 = zext i1 %1475 to i64
  %1478 = getelementptr inbounds i16, ptr %1441, i64 %1477
  %1479 = xor i1 %1475, true
  %1480 = zext i1 %1479 to i64
  %1481 = getelementptr inbounds i16, ptr %1440, i64 %1480
  store i16 %1443, ptr %1476, align 2, !tbaa !45
  br label %1482

1482:                                             ; preds = %1469, %1464, %1457
  %1483 = phi ptr [ %1441, %1457 ], [ %1441, %1464 ], [ %1478, %1469 ]
  %1484 = phi ptr [ %1440, %1457 ], [ %1440, %1464 ], [ %1481, %1469 ]
  %1485 = add nuw nsw i64 %1439, 1
  %1486 = icmp eq i64 %1485, %1435
  br i1 %1486, label %1708, label %1438

1487:                                             ; preds = %1298
  %1488 = icmp slt i32 %1262, %1263
  br i1 %1272, label %1489, label %1537

1489:                                             ; preds = %1487
  br i1 %1488, label %1490, label %1708

1490:                                             ; preds = %1489
  %1491 = sext i32 %1262 to i64
  %1492 = sext i32 %1263 to i64
  %1493 = extractelement <2 x double> %692, i64 0
  %1494 = extractelement <2 x double> %692, i64 1
  br label %1495

1495:                                             ; preds = %1490, %1532
  %1496 = phi i64 [ %1491, %1490 ], [ %1535, %1532 ]
  %1497 = phi ptr [ %471, %1490 ], [ %1534, %1532 ]
  %1498 = phi ptr [ %1304, %1490 ], [ %1533, %1532 ]
  %1499 = getelementptr inbounds i16, ptr %425, i64 %1496
  %1500 = load i16, ptr %1499, align 2, !tbaa !45
  %1501 = zext i16 %1500 to i64
  %1502 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1501
  %1503 = load i32, ptr %1502, align 4
  %1504 = and i32 %1503, 1073741824
  %1505 = icmp eq i32 %1504, 0
  br i1 %1505, label %1506, label %1532

1506:                                             ; preds = %1495
  %1507 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1501
  %1508 = getelementptr inbounds %class.Vector, ptr %1507, i64 0, i32 2
  %1509 = load double, ptr %1508, align 8, !tbaa !50
  %1510 = fsub double %695, %1509
  %1511 = getelementptr inbounds %class.Vector, ptr %1507, i64 0, i32 1
  %1512 = load double, ptr %1511, align 8, !tbaa !68
  %1513 = fsub double %1494, %1512
  %1514 = load double, ptr %1507, align 8, !tbaa !69
  %1515 = fsub double %1493, %1514
  %1516 = fmul double %1515, %1515
  %1517 = tail call double @llvm.fmuladd.f64(double %1513, double %1513, double %1516)
  %1518 = tail call double @llvm.fmuladd.f64(double %1510, double %1510, double %1517)
  %1519 = fcmp ugt double %1518, %24
  br i1 %1519, label %1532, label %1520

1520:                                             ; preds = %1506
  %1521 = shl i32 %1503, 2
  %1522 = ashr exact i32 %1521, 2
  %1523 = icmp slt i32 %1522, %720
  %1524 = icmp sgt i32 %1522, %722
  %1525 = select i1 %1523, i1 true, i1 %1524
  %1526 = select i1 %1525, ptr %1498, ptr %1497
  %1527 = zext i1 %1525 to i64
  %1528 = getelementptr inbounds i16, ptr %1498, i64 %1527
  %1529 = xor i1 %1525, true
  %1530 = zext i1 %1529 to i64
  %1531 = getelementptr inbounds i16, ptr %1497, i64 %1530
  store i16 %1500, ptr %1526, align 2, !tbaa !45
  br label %1532

1532:                                             ; preds = %1520, %1506, %1495
  %1533 = phi ptr [ %1498, %1495 ], [ %1498, %1506 ], [ %1528, %1520 ]
  %1534 = phi ptr [ %1497, %1495 ], [ %1497, %1506 ], [ %1531, %1520 ]
  %1535 = add nsw i64 %1496, 1
  %1536 = icmp eq i64 %1535, %1492
  br i1 %1536, label %1708, label %1495

1537:                                             ; preds = %1487
  br i1 %1488, label %1538, label %1708

1538:                                             ; preds = %1537
  %1539 = sub nsw i32 %1263, %1262
  %1540 = icmp sgt i32 %1539, 6
  br i1 %1540, label %1541, label %1659

1541:                                             ; preds = %1538
  %1542 = add nsw i32 %1263, -2
  %1543 = add nsw i32 %1262, 2
  %1544 = icmp slt i32 %1543, %1542
  br i1 %1544, label %1545, label %1659

1545:                                             ; preds = %1541
  %1546 = sext i32 %1262 to i64
  %1547 = getelementptr inbounds i16, ptr %425, i64 %1546
  %1548 = load i16, ptr %1547, align 2, !tbaa !45
  %1549 = zext i16 %1548 to i64
  %1550 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1549
  %1551 = load i32, ptr %1550, align 4
  %1552 = add nsw i32 %1262, 1
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds i16, ptr %425, i64 %1553
  %1555 = load i16, ptr %1554, align 2, !tbaa !45
  %1556 = zext i16 %1555 to i64
  %1557 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1556
  %1558 = getelementptr inbounds %class.Vector, ptr %1557, i64 0, i32 2
  %1559 = load double, ptr %1558, align 8, !tbaa !50
  %1560 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1549
  %1561 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 2
  %1562 = load double, ptr %1561, align 8, !tbaa !50
  %1563 = getelementptr inbounds %class.Vector, ptr %1557, i64 0, i32 1
  %1564 = load double, ptr %1563, align 8, !tbaa !68
  %1565 = getelementptr inbounds %class.Vector, ptr %1560, i64 0, i32 1
  %1566 = load double, ptr %1565, align 8, !tbaa !68
  %1567 = load double, ptr %1557, align 8, !tbaa !69
  %1568 = load double, ptr %1560, align 8, !tbaa !69
  %1569 = sext i32 %1543 to i64
  %1570 = sext i32 %1542 to i64
  %1571 = extractelement <2 x double> %692, i64 0
  %1572 = extractelement <2 x double> %692, i64 1
  br label %1573

1573:                                             ; preds = %1545, %1653
  %1574 = phi i64 [ %1569, %1545 ], [ %1656, %1653 ]
  %1575 = phi i64 [ %1556, %1545 ], [ %1613, %1653 ]
  %1576 = phi i32 [ %1551, %1545 ], [ %1641, %1653 ]
  %1577 = phi ptr [ %471, %1545 ], [ %1655, %1653 ]
  %1578 = phi ptr [ %1304, %1545 ], [ %1654, %1653 ]
  %1579 = phi i32 [ %1262, %1545 ], [ %1658, %1653 ]
  %1580 = phi i16 [ %1548, %1545 ], [ %1605, %1653 ]
  %1581 = phi i16 [ %1555, %1545 ], [ %1609, %1653 ]
  %1582 = phi double [ %1568, %1545 ], [ %1612, %1653 ]
  %1583 = phi double [ %1567, %1545 ], [ %1615, %1653 ]
  %1584 = phi double [ %1566, %1545 ], [ %1617, %1653 ]
  %1585 = phi double [ %1564, %1545 ], [ %1619, %1653 ]
  %1586 = phi double [ %1562, %1545 ], [ %1621, %1653 ]
  %1587 = phi double [ %1559, %1545 ], [ %1623, %1653 ]
  %1588 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1575
  %1589 = load i32, ptr %1588, align 4
  %1590 = shl i32 %1589, 2
  %1591 = ashr exact i32 %1590, 2
  %1592 = fsub double %1571, %1582
  %1593 = fsub double %1571, %1583
  %1594 = fmul double %1592, %1592
  %1595 = fmul double %1593, %1593
  %1596 = fsub double %1572, %1584
  %1597 = fsub double %1572, %1585
  %1598 = tail call double @llvm.fmuladd.f64(double %1596, double %1596, double %1594)
  %1599 = tail call double @llvm.fmuladd.f64(double %1597, double %1597, double %1595)
  %1600 = fsub double %695, %1586
  %1601 = fsub double %695, %1587
  %1602 = tail call double @llvm.fmuladd.f64(double %1600, double %1600, double %1598)
  %1603 = tail call double @llvm.fmuladd.f64(double %1601, double %1601, double %1599)
  %1604 = getelementptr inbounds i16, ptr %425, i64 %1574
  %1605 = load i16, ptr %1604, align 2, !tbaa !45
  %1606 = add nsw i32 %1579, 3
  %1607 = sext i32 %1606 to i64
  %1608 = getelementptr inbounds i16, ptr %425, i64 %1607
  %1609 = load i16, ptr %1608, align 2, !tbaa !45
  %1610 = zext i16 %1605 to i64
  %1611 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1610
  %1612 = load double, ptr %1611, align 8, !tbaa !69
  %1613 = zext i16 %1609 to i64
  %1614 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1613
  %1615 = load double, ptr %1614, align 8, !tbaa !69
  %1616 = getelementptr inbounds %class.Vector, ptr %1611, i64 0, i32 1
  %1617 = load double, ptr %1616, align 8, !tbaa !68
  %1618 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 1
  %1619 = load double, ptr %1618, align 8, !tbaa !68
  %1620 = getelementptr inbounds %class.Vector, ptr %1611, i64 0, i32 2
  %1621 = load double, ptr %1620, align 8, !tbaa !50
  %1622 = getelementptr inbounds %class.Vector, ptr %1614, i64 0, i32 2
  %1623 = load double, ptr %1622, align 8, !tbaa !50
  %1624 = fcmp ugt double %1602, %24
  br i1 %1624, label %1637, label %1625

1625:                                             ; preds = %1573
  %1626 = shl i32 %1576, 2
  %1627 = ashr exact i32 %1626, 2
  %1628 = icmp slt i32 %1627, %720
  %1629 = icmp sgt i32 %1627, %722
  %1630 = select i1 %1628, i1 true, i1 %1629
  %1631 = select i1 %1630, ptr %1578, ptr %1577
  %1632 = zext i1 %1630 to i64
  %1633 = getelementptr inbounds i16, ptr %1578, i64 %1632
  %1634 = xor i1 %1630, true
  %1635 = zext i1 %1634 to i64
  %1636 = getelementptr inbounds i16, ptr %1577, i64 %1635
  store i16 %1580, ptr %1631, align 2, !tbaa !45
  br label %1637

1637:                                             ; preds = %1625, %1573
  %1638 = phi ptr [ %1578, %1573 ], [ %1633, %1625 ]
  %1639 = phi ptr [ %1577, %1573 ], [ %1636, %1625 ]
  %1640 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1610
  %1641 = load i32, ptr %1640, align 4
  %1642 = fcmp ugt double %1603, %24
  br i1 %1642, label %1653, label %1643

1643:                                             ; preds = %1637
  %1644 = icmp slt i32 %1591, %720
  %1645 = icmp sgt i32 %1591, %722
  %1646 = select i1 %1644, i1 true, i1 %1645
  %1647 = select i1 %1646, ptr %1638, ptr %1639
  %1648 = zext i1 %1646 to i64
  %1649 = getelementptr inbounds i16, ptr %1638, i64 %1648
  %1650 = xor i1 %1646, true
  %1651 = zext i1 %1650 to i64
  %1652 = getelementptr inbounds i16, ptr %1639, i64 %1651
  store i16 %1581, ptr %1647, align 2, !tbaa !45
  br label %1653

1653:                                             ; preds = %1643, %1637
  %1654 = phi ptr [ %1638, %1637 ], [ %1649, %1643 ]
  %1655 = phi ptr [ %1639, %1637 ], [ %1652, %1643 ]
  %1656 = add nsw i64 %1574, 2
  %1657 = icmp slt i64 %1656, %1570
  %1658 = trunc i64 %1574 to i32
  br i1 %1657, label %1573, label %1659

1659:                                             ; preds = %1653, %1541, %1538
  %1660 = phi i32 [ %1262, %1538 ], [ %1262, %1541 ], [ %1658, %1653 ]
  %1661 = phi ptr [ %1304, %1538 ], [ %1304, %1541 ], [ %1654, %1653 ]
  %1662 = phi ptr [ %471, %1538 ], [ %471, %1541 ], [ %1655, %1653 ]
  %1663 = icmp slt i32 %1660, %1263
  br i1 %1663, label %1664, label %1708

1664:                                             ; preds = %1659
  %1665 = sext i32 %1660 to i64
  %1666 = sext i32 %1263 to i64
  %1667 = extractelement <2 x double> %692, i64 0
  %1668 = extractelement <2 x double> %692, i64 1
  br label %1669

1669:                                             ; preds = %1664, %1703
  %1670 = phi i64 [ %1665, %1664 ], [ %1706, %1703 ]
  %1671 = phi ptr [ %1662, %1664 ], [ %1705, %1703 ]
  %1672 = phi ptr [ %1661, %1664 ], [ %1704, %1703 ]
  %1673 = getelementptr inbounds i16, ptr %425, i64 %1670
  %1674 = load i16, ptr %1673, align 2, !tbaa !45
  %1675 = zext i16 %1674 to i64
  %1676 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %1675
  %1677 = load double, ptr %1676, align 8, !tbaa !69
  %1678 = getelementptr inbounds %class.Vector, ptr %1676, i64 0, i32 1
  %1679 = load double, ptr %1678, align 8, !tbaa !68
  %1680 = getelementptr inbounds %class.Vector, ptr %1676, i64 0, i32 2
  %1681 = load double, ptr %1680, align 8, !tbaa !50
  %1682 = fsub double %1667, %1677
  %1683 = fmul double %1682, %1682
  %1684 = fsub double %1668, %1679
  %1685 = tail call double @llvm.fmuladd.f64(double %1684, double %1684, double %1683)
  %1686 = fsub double %695, %1681
  %1687 = tail call double @llvm.fmuladd.f64(double %1686, double %1686, double %1685)
  %1688 = fcmp ugt double %1687, %24
  br i1 %1688, label %1703, label %1689

1689:                                             ; preds = %1669
  %1690 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1675
  %1691 = load i32, ptr %1690, align 4
  %1692 = shl i32 %1691, 2
  %1693 = ashr exact i32 %1692, 2
  %1694 = icmp slt i32 %1693, %720
  %1695 = icmp sgt i32 %1693, %722
  %1696 = select i1 %1694, i1 true, i1 %1695
  %1697 = select i1 %1696, ptr %1672, ptr %1671
  %1698 = zext i1 %1696 to i64
  %1699 = getelementptr inbounds i16, ptr %1672, i64 %1698
  %1700 = xor i1 %1696, true
  %1701 = zext i1 %1700 to i64
  %1702 = getelementptr inbounds i16, ptr %1671, i64 %1701
  store i16 %1674, ptr %1697, align 2, !tbaa !45
  br label %1703

1703:                                             ; preds = %1689, %1669
  %1704 = phi ptr [ %1672, %1669 ], [ %1699, %1689 ]
  %1705 = phi ptr [ %1671, %1669 ], [ %1702, %1689 ]
  %1706 = add nsw i64 %1670, 1
  %1707 = icmp eq i64 %1706, %1666
  br i1 %1707, label %1708, label %1669

1708:                                             ; preds = %1482, %1703, %1532, %1427, %1659, %1489, %1537
  %1709 = phi ptr [ %1304, %1537 ], [ %1304, %1489 ], [ %1661, %1659 ], [ %1304, %1427 ], [ %1533, %1532 ], [ %1704, %1703 ], [ %1483, %1482 ]
  %1710 = phi ptr [ %471, %1537 ], [ %471, %1489 ], [ %1662, %1659 ], [ %471, %1427 ], [ %1534, %1532 ], [ %1705, %1703 ], [ %1484, %1482 ]
  %1711 = ptrtoint ptr %1710 to i64
  %1712 = sub i64 %1711, %647
  %1713 = lshr exact i64 %1712, 1
  %1714 = trunc i64 %1713 to i32
  %1715 = icmp sgt i32 %1714, 0
  br i1 %1715, label %1716, label %1816

1716:                                             ; preds = %1708
  %1717 = and i64 %1713, 4294967295
  %1718 = and i64 %1713, 1
  %1719 = icmp eq i64 %1717, 1
  br i1 %1719, label %1784, label %1720

1720:                                             ; preds = %1716
  %1721 = sub nsw i64 %1717, %1718
  br label %1722

1722:                                             ; preds = %1777, %1720
  %1723 = phi i64 [ 0, %1720 ], [ %1781, %1777 ]
  %1724 = phi ptr [ %1709, %1720 ], [ %1780, %1777 ]
  %1725 = phi ptr [ %333, %1720 ], [ %1779, %1777 ]
  %1726 = phi ptr [ %379, %1720 ], [ %1778, %1777 ]
  %1727 = phi i64 [ 0, %1720 ], [ %1782, %1777 ]
  %1728 = getelementptr inbounds i16, ptr %471, i64 %1723
  %1729 = load i16, ptr %1728, align 2, !tbaa !45
  %1730 = zext i16 %1729 to i64
  %1731 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1730
  %1732 = load i32, ptr %1731, align 4
  %1733 = shl i32 %1732, 2
  %1734 = ashr exact i32 %1733, 2
  %1735 = sext i32 %1734 to i64
  %1736 = getelementptr inbounds i8, ptr %957, i64 %1735
  %1737 = load i8, ptr %1736, align 1, !tbaa !59
  %1738 = sext i8 %1737 to i32
  switch i32 %1738, label %1750 [
    i32 0, label %1739
    i32 1, label %1741
    i32 2, label %1743
  ]

1739:                                             ; preds = %1722
  %1740 = getelementptr inbounds i16, ptr %1724, i64 1
  br label %1745

1741:                                             ; preds = %1722
  %1742 = getelementptr inbounds i16, ptr %1725, i64 1
  br label %1745

1743:                                             ; preds = %1722
  %1744 = getelementptr inbounds i16, ptr %1726, i64 1
  br label %1745

1745:                                             ; preds = %1739, %1741, %1743
  %1746 = phi ptr [ %1726, %1743 ], [ %1725, %1741 ], [ %1724, %1739 ]
  %1747 = phi ptr [ %1744, %1743 ], [ %1726, %1741 ], [ %1726, %1739 ]
  %1748 = phi ptr [ %1725, %1743 ], [ %1742, %1741 ], [ %1725, %1739 ]
  %1749 = phi ptr [ %1724, %1743 ], [ %1724, %1741 ], [ %1740, %1739 ]
  store i16 %1729, ptr %1746, align 2, !tbaa !45
  br label %1750

1750:                                             ; preds = %1745, %1722
  %1751 = phi ptr [ %1726, %1722 ], [ %1747, %1745 ]
  %1752 = phi ptr [ %1725, %1722 ], [ %1748, %1745 ]
  %1753 = phi ptr [ %1724, %1722 ], [ %1749, %1745 ]
  %1754 = or i64 %1723, 1
  %1755 = getelementptr inbounds i16, ptr %471, i64 %1754
  %1756 = load i16, ptr %1755, align 2, !tbaa !45
  %1757 = zext i16 %1756 to i64
  %1758 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1757
  %1759 = load i32, ptr %1758, align 4
  %1760 = shl i32 %1759, 2
  %1761 = ashr exact i32 %1760, 2
  %1762 = sext i32 %1761 to i64
  %1763 = getelementptr inbounds i8, ptr %957, i64 %1762
  %1764 = load i8, ptr %1763, align 1, !tbaa !59
  %1765 = sext i8 %1764 to i32
  switch i32 %1765, label %1777 [
    i32 0, label %1770
    i32 1, label %1768
    i32 2, label %1766
  ]

1766:                                             ; preds = %1750
  %1767 = getelementptr inbounds i16, ptr %1751, i64 1
  br label %1772

1768:                                             ; preds = %1750
  %1769 = getelementptr inbounds i16, ptr %1752, i64 1
  br label %1772

1770:                                             ; preds = %1750
  %1771 = getelementptr inbounds i16, ptr %1753, i64 1
  br label %1772

1772:                                             ; preds = %1770, %1768, %1766
  %1773 = phi ptr [ %1751, %1766 ], [ %1752, %1768 ], [ %1753, %1770 ]
  %1774 = phi ptr [ %1767, %1766 ], [ %1751, %1768 ], [ %1751, %1770 ]
  %1775 = phi ptr [ %1752, %1766 ], [ %1769, %1768 ], [ %1752, %1770 ]
  %1776 = phi ptr [ %1753, %1766 ], [ %1753, %1768 ], [ %1771, %1770 ]
  store i16 %1756, ptr %1773, align 2, !tbaa !45
  br label %1777

1777:                                             ; preds = %1772, %1750
  %1778 = phi ptr [ %1751, %1750 ], [ %1774, %1772 ]
  %1779 = phi ptr [ %1752, %1750 ], [ %1775, %1772 ]
  %1780 = phi ptr [ %1753, %1750 ], [ %1776, %1772 ]
  %1781 = add nuw nsw i64 %1723, 2
  %1782 = add i64 %1727, 2
  %1783 = icmp eq i64 %1782, %1721
  br i1 %1783, label %1784, label %1722

1784:                                             ; preds = %1777, %1716
  %1785 = phi ptr [ undef, %1716 ], [ %1778, %1777 ]
  %1786 = phi ptr [ undef, %1716 ], [ %1779, %1777 ]
  %1787 = phi ptr [ undef, %1716 ], [ %1780, %1777 ]
  %1788 = phi i64 [ 0, %1716 ], [ %1781, %1777 ]
  %1789 = phi ptr [ %1709, %1716 ], [ %1780, %1777 ]
  %1790 = phi ptr [ %333, %1716 ], [ %1779, %1777 ]
  %1791 = phi ptr [ %379, %1716 ], [ %1778, %1777 ]
  %1792 = icmp eq i64 %1718, 0
  br i1 %1792, label %1816, label %1793

1793:                                             ; preds = %1784
  %1794 = getelementptr inbounds i16, ptr %471, i64 %1788
  %1795 = load i16, ptr %1794, align 2, !tbaa !45
  %1796 = zext i16 %1795 to i64
  %1797 = getelementptr inbounds %struct.CompAtomExt, ptr %49, i64 %1796
  %1798 = load i32, ptr %1797, align 4
  %1799 = shl i32 %1798, 2
  %1800 = ashr exact i32 %1799, 2
  %1801 = sext i32 %1800 to i64
  %1802 = getelementptr inbounds i8, ptr %957, i64 %1801
  %1803 = load i8, ptr %1802, align 1, !tbaa !59
  %1804 = sext i8 %1803 to i32
  switch i32 %1804, label %1816 [
    i32 0, label %1809
    i32 1, label %1807
    i32 2, label %1805
  ]

1805:                                             ; preds = %1793
  %1806 = getelementptr inbounds i16, ptr %1791, i64 1
  br label %1811

1807:                                             ; preds = %1793
  %1808 = getelementptr inbounds i16, ptr %1790, i64 1
  br label %1811

1809:                                             ; preds = %1793
  %1810 = getelementptr inbounds i16, ptr %1789, i64 1
  br label %1811

1811:                                             ; preds = %1809, %1807, %1805
  %1812 = phi ptr [ %1791, %1805 ], [ %1790, %1807 ], [ %1789, %1809 ]
  %1813 = phi ptr [ %1806, %1805 ], [ %1791, %1807 ], [ %1791, %1809 ]
  %1814 = phi ptr [ %1790, %1805 ], [ %1808, %1807 ], [ %1790, %1809 ]
  %1815 = phi ptr [ %1789, %1805 ], [ %1789, %1807 ], [ %1810, %1809 ]
  store i16 %1795, ptr %1812, align 2, !tbaa !45
  br label %1816

1816:                                             ; preds = %1784, %1811, %1793, %1708
  %1817 = phi ptr [ %379, %1708 ], [ %1785, %1784 ], [ %1791, %1793 ], [ %1813, %1811 ]
  %1818 = phi ptr [ %333, %1708 ], [ %1786, %1784 ], [ %1790, %1793 ], [ %1814, %1811 ]
  %1819 = phi ptr [ %1709, %1708 ], [ %1787, %1784 ], [ %1789, %1793 ], [ %1815, %1811 ]
  %1820 = ptrtoint ptr %1819 to i64
  %1821 = ptrtoint ptr %1304 to i64
  %1822 = sub i64 %1820, %1821
  %1823 = lshr exact i64 %1822, 1
  %1824 = trunc i64 %1823 to i32
  %1825 = icmp eq i32 %1824, 0
  %1826 = shl i64 %1822, 31
  br i1 %1825, label %1832, label %1827

1827:                                             ; preds = %1816
  %1828 = add i64 %1826, -4294967296
  %1829 = ashr i64 %1828, 32
  %1830 = getelementptr inbounds i16, ptr %1304, i64 %1829
  %1831 = load i16, ptr %1830, align 2, !tbaa !45
  br label %1832

1832:                                             ; preds = %1816, %1827
  %1833 = phi i16 [ %1831, %1827 ], [ -1, %1816 ]
  %1834 = ashr i64 %1826, 32
  %1835 = getelementptr inbounds i16, ptr %1304, i64 %1834
  store i16 %1833, ptr %1835, align 2, !tbaa !45
  %1836 = trunc i64 %1823 to i16
  %1837 = add i16 %1836, 1
  %1838 = load i32, ptr %17, align 8, !tbaa !19
  %1839 = sext i32 %1838 to i64
  %1840 = getelementptr inbounds i16, ptr %1300, i64 %1839
  store i16 %1837, ptr %1840, align 2, !tbaa !45
  %1841 = add nsw i32 %1824, 2
  %1842 = add nsw i32 %1841, %1838
  %1843 = ptrtoint ptr %1818 to i64
  %1844 = sub i64 %1843, %648
  %1845 = lshr exact i64 %1844, 1
  %1846 = trunc i64 %1845 to i32
  %1847 = add nsw i32 %1842, 1
  %1848 = sext i32 %1847 to i64
  %1849 = getelementptr i16, ptr %1300, i64 %1848
  %1850 = icmp sgt i32 %1846, 0
  br i1 %1850, label %1851, label %1941

1851:                                             ; preds = %1832
  %1852 = and i64 %1845, 4294967295
  %1853 = icmp ult i64 %1852, 8
  br i1 %1853, label %1897, label %1854

1854:                                             ; preds = %1851
  %1855 = shl nsw i64 %1848, 1
  %1856 = add i64 %1855, %1301
  %1857 = sub i64 %1856, %648
  %1858 = icmp ult i64 %1857, 128
  br i1 %1858, label %1897, label %1859

1859:                                             ; preds = %1854
  %1860 = icmp ult i64 %1852, 64
  br i1 %1860, label %1884, label %1861

1861:                                             ; preds = %1859
  %1862 = and i64 %1845, 63
  %1863 = sub nsw i64 %1852, %1862
  br label %1864

1864:                                             ; preds = %1864, %1861
  %1865 = phi i64 [ 0, %1861 ], [ %1878, %1864 ]
  %1866 = getelementptr inbounds i16, ptr %333, i64 %1865
  %1867 = load <16 x i16>, ptr %1866, align 2, !tbaa !45
  %1868 = getelementptr inbounds i16, ptr %1866, i64 16
  %1869 = load <16 x i16>, ptr %1868, align 2, !tbaa !45
  %1870 = getelementptr inbounds i16, ptr %1866, i64 32
  %1871 = load <16 x i16>, ptr %1870, align 2, !tbaa !45
  %1872 = getelementptr inbounds i16, ptr %1866, i64 48
  %1873 = load <16 x i16>, ptr %1872, align 2, !tbaa !45
  %1874 = getelementptr inbounds i16, ptr %1849, i64 %1865
  store <16 x i16> %1867, ptr %1874, align 2, !tbaa !45
  %1875 = getelementptr inbounds i16, ptr %1874, i64 16
  store <16 x i16> %1869, ptr %1875, align 2, !tbaa !45
  %1876 = getelementptr inbounds i16, ptr %1874, i64 32
  store <16 x i16> %1871, ptr %1876, align 2, !tbaa !45
  %1877 = getelementptr inbounds i16, ptr %1874, i64 48
  store <16 x i16> %1873, ptr %1877, align 2, !tbaa !45
  %1878 = add nuw i64 %1865, 64
  %1879 = icmp eq i64 %1878, %1863
  br i1 %1879, label %1880, label %1864, !llvm.loop !291

1880:                                             ; preds = %1864
  %1881 = icmp eq i64 %1862, 0
  br i1 %1881, label %1935, label %1882

1882:                                             ; preds = %1880
  %1883 = icmp ult i64 %1862, 8
  br i1 %1883, label %1897, label %1884

1884:                                             ; preds = %1859, %1882
  %1885 = phi i64 [ %1863, %1882 ], [ 0, %1859 ]
  %1886 = and i64 %1845, 7
  %1887 = sub nsw i64 %1852, %1886
  br label %1888

1888:                                             ; preds = %1888, %1884
  %1889 = phi i64 [ %1885, %1884 ], [ %1893, %1888 ]
  %1890 = getelementptr inbounds i16, ptr %333, i64 %1889
  %1891 = load <8 x i16>, ptr %1890, align 2, !tbaa !45
  %1892 = getelementptr inbounds i16, ptr %1849, i64 %1889
  store <8 x i16> %1891, ptr %1892, align 2, !tbaa !45
  %1893 = add nuw i64 %1889, 8
  %1894 = icmp eq i64 %1893, %1887
  br i1 %1894, label %1895, label %1888, !llvm.loop !292

1895:                                             ; preds = %1888
  %1896 = icmp eq i64 %1886, 0
  br i1 %1896, label %1935, label %1897

1897:                                             ; preds = %1854, %1851, %1882, %1895
  %1898 = phi i64 [ 0, %1851 ], [ 0, %1854 ], [ %1863, %1882 ], [ %1887, %1895 ]
  %1899 = sub i64 %1845, %1898
  %1900 = xor i64 %1898, -1
  %1901 = add nsw i64 %1852, %1900
  %1902 = and i64 %1899, 3
  %1903 = icmp eq i64 %1902, 0
  br i1 %1903, label %1913, label %1904

1904:                                             ; preds = %1897, %1904
  %1905 = phi i64 [ %1910, %1904 ], [ %1898, %1897 ]
  %1906 = phi i64 [ %1911, %1904 ], [ 0, %1897 ]
  %1907 = getelementptr inbounds i16, ptr %333, i64 %1905
  %1908 = load i16, ptr %1907, align 2, !tbaa !45
  %1909 = getelementptr inbounds i16, ptr %1849, i64 %1905
  store i16 %1908, ptr %1909, align 2, !tbaa !45
  %1910 = add nuw nsw i64 %1905, 1
  %1911 = add i64 %1906, 1
  %1912 = icmp eq i64 %1911, %1902
  br i1 %1912, label %1913, label %1904, !llvm.loop !293

1913:                                             ; preds = %1904, %1897
  %1914 = phi i64 [ %1898, %1897 ], [ %1910, %1904 ]
  %1915 = icmp ult i64 %1901, 3
  br i1 %1915, label %1935, label %1916

1916:                                             ; preds = %1913, %1916
  %1917 = phi i64 [ %1933, %1916 ], [ %1914, %1913 ]
  %1918 = getelementptr inbounds i16, ptr %333, i64 %1917
  %1919 = load i16, ptr %1918, align 2, !tbaa !45
  %1920 = getelementptr inbounds i16, ptr %1849, i64 %1917
  store i16 %1919, ptr %1920, align 2, !tbaa !45
  %1921 = add nuw nsw i64 %1917, 1
  %1922 = getelementptr inbounds i16, ptr %333, i64 %1921
  %1923 = load i16, ptr %1922, align 2, !tbaa !45
  %1924 = getelementptr inbounds i16, ptr %1849, i64 %1921
  store i16 %1923, ptr %1924, align 2, !tbaa !45
  %1925 = add nuw nsw i64 %1917, 2
  %1926 = getelementptr inbounds i16, ptr %333, i64 %1925
  %1927 = load i16, ptr %1926, align 2, !tbaa !45
  %1928 = getelementptr inbounds i16, ptr %1849, i64 %1925
  store i16 %1927, ptr %1928, align 2, !tbaa !45
  %1929 = add nuw nsw i64 %1917, 3
  %1930 = getelementptr inbounds i16, ptr %333, i64 %1929
  %1931 = load i16, ptr %1930, align 2, !tbaa !45
  %1932 = getelementptr inbounds i16, ptr %1849, i64 %1929
  store i16 %1931, ptr %1932, align 2, !tbaa !45
  %1933 = add nuw nsw i64 %1917, 4
  %1934 = icmp eq i64 %1933, %1852
  br i1 %1934, label %1935, label %1916, !llvm.loop !294

1935:                                             ; preds = %1913, %1916, %1880, %1895
  %1936 = shl i64 %1844, 31
  %1937 = add i64 %1936, -4294967296
  %1938 = ashr i64 %1937, 32
  %1939 = getelementptr inbounds i16, ptr %1849, i64 %1938
  %1940 = load i16, ptr %1939, align 2, !tbaa !45
  br label %1941

1941:                                             ; preds = %1832, %1935
  %1942 = phi i64 [ %1845, %1935 ], [ 0, %1832 ]
  %1943 = phi i16 [ %1940, %1935 ], [ -1, %1832 ]
  %1944 = and i64 %1942, 4294967295
  %1945 = getelementptr inbounds i16, ptr %1849, i64 %1944
  store i16 %1943, ptr %1945, align 2, !tbaa !45
  %1946 = trunc i64 %1845 to i16
  %1947 = add i16 %1946, 1
  %1948 = sext i32 %1842 to i64
  %1949 = getelementptr inbounds i16, ptr %1300, i64 %1948
  store i16 %1947, ptr %1949, align 2, !tbaa !45
  %1950 = add nsw i32 %1846, 2
  %1951 = add nsw i32 %1950, %1842
  %1952 = ptrtoint ptr %1817 to i64
  %1953 = sub i64 %1952, %649
  %1954 = lshr exact i64 %1953, 1
  %1955 = trunc i64 %1954 to i32
  %1956 = add nsw i32 %1951, 1
  %1957 = sext i32 %1956 to i64
  %1958 = getelementptr i16, ptr %1300, i64 %1957
  %1959 = icmp sgt i32 %1955, 0
  br i1 %1959, label %1960, label %2050

1960:                                             ; preds = %1941
  %1961 = and i64 %1954, 4294967295
  %1962 = icmp ult i64 %1961, 8
  br i1 %1962, label %2006, label %1963

1963:                                             ; preds = %1960
  %1964 = shl nsw i64 %1957, 1
  %1965 = add i64 %1964, %1301
  %1966 = sub i64 %1965, %649
  %1967 = icmp ult i64 %1966, 128
  br i1 %1967, label %2006, label %1968

1968:                                             ; preds = %1963
  %1969 = icmp ult i64 %1961, 64
  br i1 %1969, label %1993, label %1970

1970:                                             ; preds = %1968
  %1971 = and i64 %1954, 63
  %1972 = sub nsw i64 %1961, %1971
  br label %1973

1973:                                             ; preds = %1973, %1970
  %1974 = phi i64 [ 0, %1970 ], [ %1987, %1973 ]
  %1975 = getelementptr inbounds i16, ptr %379, i64 %1974
  %1976 = load <16 x i16>, ptr %1975, align 2, !tbaa !45
  %1977 = getelementptr inbounds i16, ptr %1975, i64 16
  %1978 = load <16 x i16>, ptr %1977, align 2, !tbaa !45
  %1979 = getelementptr inbounds i16, ptr %1975, i64 32
  %1980 = load <16 x i16>, ptr %1979, align 2, !tbaa !45
  %1981 = getelementptr inbounds i16, ptr %1975, i64 48
  %1982 = load <16 x i16>, ptr %1981, align 2, !tbaa !45
  %1983 = getelementptr inbounds i16, ptr %1958, i64 %1974
  store <16 x i16> %1976, ptr %1983, align 2, !tbaa !45
  %1984 = getelementptr inbounds i16, ptr %1983, i64 16
  store <16 x i16> %1978, ptr %1984, align 2, !tbaa !45
  %1985 = getelementptr inbounds i16, ptr %1983, i64 32
  store <16 x i16> %1980, ptr %1985, align 2, !tbaa !45
  %1986 = getelementptr inbounds i16, ptr %1983, i64 48
  store <16 x i16> %1982, ptr %1986, align 2, !tbaa !45
  %1987 = add nuw i64 %1974, 64
  %1988 = icmp eq i64 %1987, %1972
  br i1 %1988, label %1989, label %1973, !llvm.loop !295

1989:                                             ; preds = %1973
  %1990 = icmp eq i64 %1971, 0
  br i1 %1990, label %2044, label %1991

1991:                                             ; preds = %1989
  %1992 = icmp ult i64 %1971, 8
  br i1 %1992, label %2006, label %1993

1993:                                             ; preds = %1968, %1991
  %1994 = phi i64 [ %1972, %1991 ], [ 0, %1968 ]
  %1995 = and i64 %1954, 7
  %1996 = sub nsw i64 %1961, %1995
  br label %1997

1997:                                             ; preds = %1997, %1993
  %1998 = phi i64 [ %1994, %1993 ], [ %2002, %1997 ]
  %1999 = getelementptr inbounds i16, ptr %379, i64 %1998
  %2000 = load <8 x i16>, ptr %1999, align 2, !tbaa !45
  %2001 = getelementptr inbounds i16, ptr %1958, i64 %1998
  store <8 x i16> %2000, ptr %2001, align 2, !tbaa !45
  %2002 = add nuw i64 %1998, 8
  %2003 = icmp eq i64 %2002, %1996
  br i1 %2003, label %2004, label %1997, !llvm.loop !296

2004:                                             ; preds = %1997
  %2005 = icmp eq i64 %1995, 0
  br i1 %2005, label %2044, label %2006

2006:                                             ; preds = %1963, %1960, %1991, %2004
  %2007 = phi i64 [ 0, %1960 ], [ 0, %1963 ], [ %1972, %1991 ], [ %1996, %2004 ]
  %2008 = sub i64 %1954, %2007
  %2009 = xor i64 %2007, -1
  %2010 = add nsw i64 %1961, %2009
  %2011 = and i64 %2008, 3
  %2012 = icmp eq i64 %2011, 0
  br i1 %2012, label %2022, label %2013

2013:                                             ; preds = %2006, %2013
  %2014 = phi i64 [ %2019, %2013 ], [ %2007, %2006 ]
  %2015 = phi i64 [ %2020, %2013 ], [ 0, %2006 ]
  %2016 = getelementptr inbounds i16, ptr %379, i64 %2014
  %2017 = load i16, ptr %2016, align 2, !tbaa !45
  %2018 = getelementptr inbounds i16, ptr %1958, i64 %2014
  store i16 %2017, ptr %2018, align 2, !tbaa !45
  %2019 = add nuw nsw i64 %2014, 1
  %2020 = add i64 %2015, 1
  %2021 = icmp eq i64 %2020, %2011
  br i1 %2021, label %2022, label %2013, !llvm.loop !297

2022:                                             ; preds = %2013, %2006
  %2023 = phi i64 [ %2007, %2006 ], [ %2019, %2013 ]
  %2024 = icmp ult i64 %2010, 3
  br i1 %2024, label %2044, label %2025

2025:                                             ; preds = %2022, %2025
  %2026 = phi i64 [ %2042, %2025 ], [ %2023, %2022 ]
  %2027 = getelementptr inbounds i16, ptr %379, i64 %2026
  %2028 = load i16, ptr %2027, align 2, !tbaa !45
  %2029 = getelementptr inbounds i16, ptr %1958, i64 %2026
  store i16 %2028, ptr %2029, align 2, !tbaa !45
  %2030 = add nuw nsw i64 %2026, 1
  %2031 = getelementptr inbounds i16, ptr %379, i64 %2030
  %2032 = load i16, ptr %2031, align 2, !tbaa !45
  %2033 = getelementptr inbounds i16, ptr %1958, i64 %2030
  store i16 %2032, ptr %2033, align 2, !tbaa !45
  %2034 = add nuw nsw i64 %2026, 2
  %2035 = getelementptr inbounds i16, ptr %379, i64 %2034
  %2036 = load i16, ptr %2035, align 2, !tbaa !45
  %2037 = getelementptr inbounds i16, ptr %1958, i64 %2034
  store i16 %2036, ptr %2037, align 2, !tbaa !45
  %2038 = add nuw nsw i64 %2026, 3
  %2039 = getelementptr inbounds i16, ptr %379, i64 %2038
  %2040 = load i16, ptr %2039, align 2, !tbaa !45
  %2041 = getelementptr inbounds i16, ptr %1958, i64 %2038
  store i16 %2040, ptr %2041, align 2, !tbaa !45
  %2042 = add nuw nsw i64 %2026, 4
  %2043 = icmp eq i64 %2042, %1961
  br i1 %2043, label %2044, label %2025, !llvm.loop !298

2044:                                             ; preds = %2022, %2025, %1989, %2004
  %2045 = shl i64 %1953, 31
  %2046 = add i64 %2045, -4294967296
  %2047 = ashr i64 %2046, 32
  %2048 = getelementptr inbounds i16, ptr %1958, i64 %2047
  %2049 = load i16, ptr %2048, align 2, !tbaa !45
  br label %2050

2050:                                             ; preds = %1941, %2044
  %2051 = phi i64 [ %1954, %2044 ], [ 0, %1941 ]
  %2052 = phi i16 [ %2049, %2044 ], [ -1, %1941 ]
  %2053 = and i64 %2051, 4294967295
  %2054 = getelementptr inbounds i16, ptr %1958, i64 %2053
  store i16 %2052, ptr %2054, align 2, !tbaa !45
  %2055 = trunc i64 %1954 to i16
  %2056 = add i16 %2055, 1
  %2057 = sext i32 %1951 to i64
  %2058 = getelementptr inbounds i16, ptr %1300, i64 %2057
  store i16 %2056, ptr %2058, align 2, !tbaa !45
  %2059 = add nsw i32 %1955, 2
  %2060 = add nsw i32 %2059, %1951
  %2061 = select i1 %146, i32 0, i32 %2060
  store i32 %2061, ptr %17, align 8
  br label %2093

2062:                                             ; preds = %689
  %2063 = load ptr, ptr %12, align 8, !tbaa !47
  %2064 = load i32, ptr %17, align 8, !tbaa !19
  %2065 = add i32 %2064, 1
  %2066 = sext i32 %2065 to i64
  %2067 = getelementptr inbounds i16, ptr %2063, i64 %2066
  %2068 = sext i32 %2064 to i64
  %2069 = getelementptr inbounds i16, ptr %2063, i64 %2068
  %2070 = load i16, ptr %2069, align 2, !tbaa !45
  %2071 = zext i16 %2070 to i32
  %2072 = add i32 %2065, %2071
  %2073 = add nsw i32 %2071, -1
  %2074 = add i32 %2072, 1
  %2075 = sext i32 %2074 to i64
  %2076 = getelementptr inbounds i16, ptr %2063, i64 %2075
  %2077 = sext i32 %2072 to i64
  %2078 = getelementptr inbounds i16, ptr %2063, i64 %2077
  %2079 = load i16, ptr %2078, align 2, !tbaa !45
  %2080 = zext i16 %2079 to i32
  %2081 = add i32 %2074, %2080
  %2082 = add nsw i32 %2080, -1
  %2083 = add i32 %2081, 1
  %2084 = sext i32 %2083 to i64
  %2085 = getelementptr inbounds i16, ptr %2063, i64 %2084
  %2086 = sext i32 %2081 to i64
  %2087 = getelementptr inbounds i16, ptr %2063, i64 %2086
  %2088 = load i16, ptr %2087, align 2, !tbaa !45
  %2089 = zext i16 %2088 to i32
  %2090 = add i32 %2083, %2089
  store i32 %2090, ptr %17, align 8, !tbaa !19
  %2091 = add nsw i32 %2089, -1
  %2092 = load i32, ptr @_ZN20ComputeNonbondedUtil17pairInteractionOnE, align 4, !tbaa !5
  br label %2093

2093:                                             ; preds = %2050, %2062
  %2094 = phi i32 [ %2092, %2062 ], [ %1305, %2050 ]
  %2095 = phi i32 [ %2082, %2062 ], [ %1846, %2050 ]
  %2096 = phi ptr [ %2085, %2062 ], [ %1958, %2050 ]
  %2097 = phi i32 [ %2091, %2062 ], [ %1955, %2050 ]
  %2098 = phi ptr [ %2076, %2062 ], [ %1849, %2050 ]
  %2099 = phi i32 [ %2073, %2062 ], [ %1824, %2050 ]
  %2100 = phi ptr [ %2067, %2062 ], [ %1304, %2050 ]
  %2101 = phi i32 [ %672, %2062 ], [ %1262, %2050 ]
  %2102 = phi i32 [ %671, %2062 ], [ %1263, %2050 ]
  %2103 = phi i32 [ %670, %2062 ], [ %1264, %2050 ]
  %2104 = phi i32 [ %669, %2062 ], [ %1265, %2050 ]
  %2105 = phi ptr [ %667, %2062 ], [ %958, %2050 ]
  %2106 = phi ptr [ %666, %2062 ], [ %959, %2050 ]
  %2107 = phi ptr [ %665, %2062 ], [ %960, %2050 ]
  %2108 = icmp eq i32 %2094, 0
  %2109 = load i32, ptr @_ZN20ComputeNonbondedUtil19pairInteractionSelfE, align 4
  %2110 = icmp ne i32 %2109, 0
  %2111 = select i1 %2108, i1 true, i1 %2110
  br i1 %2111, label %2116, label %2112

2112:                                             ; preds = %2093
  %2113 = load i8, ptr %696, align 2, !tbaa !52
  %2114 = icmp eq i8 %2113, 1
  %2115 = select i1 %2114, double 1.000000e+00, double -1.000000e+00
  br label %2116

2116:                                             ; preds = %2093, %2112
  %2117 = phi double [ %2115, %2112 ], [ 0.000000e+00, %2093 ]
  %2118 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %674, i32 1
  %2119 = load float, ptr %2118, align 8, !tbaa !81
  %2120 = fpext float %2119 to double
  %2121 = fmul double %2120, 0x4074C104816F0069
  %2122 = fmul double %32, %2121
  %2123 = fmul double %28, %2122
  %2124 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2125 = extractelement <2 x double> %692, i64 0
  %2126 = extractelement <2 x double> %692, i64 1
  %2127 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2124, double noundef %2125, double noundef %2126, double noundef %695, ptr noundef %45, ptr noundef nonnull %2100, i32 noundef %2099, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2128 = icmp sgt i32 %2127, 0
  br i1 %2128, label %2129, label %2267

2129:                                             ; preds = %2116
  %2130 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2131 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2132 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2133 = mul nsw i32 %2132, %698
  %2134 = mul i32 %2131, 3
  %2135 = mul nsw i32 %710, 3
  %2136 = sext i32 %2135 to i64
  %2137 = add nsw i32 %2135, 1
  %2138 = sext i32 %2137 to i64
  %2139 = add nsw i32 %2135, 2
  %2140 = sext i32 %2139 to i64
  %2141 = zext i32 %2127 to i64
  br label %2142

2142:                                             ; preds = %2129, %2142
  %2143 = phi i64 [ 0, %2129 ], [ %2265, %2142 ]
  %2144 = phi double [ %663, %2129 ], [ %2191, %2142 ]
  %2145 = phi double [ 0.000000e+00, %2129 ], [ %2210, %2142 ]
  %2146 = phi <2 x double> [ zeroinitializer, %2129 ], [ %2206, %2142 ]
  %2147 = shl nuw nsw i64 %2143, 1
  %2148 = getelementptr inbounds i32, ptr %145, i64 %2147
  %2149 = load i32, ptr %2148, align 4, !tbaa !5
  %2150 = ashr i32 %2149, 14
  %2151 = add nsw i32 %2150, %38
  %2152 = getelementptr inbounds i16, ptr %98, i64 %2143
  %2153 = load i16, ptr %2152, align 2, !tbaa !45
  %2154 = zext i16 %2153 to i64
  %2155 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2154
  %2156 = getelementptr inbounds double, ptr %144, i64 %2143
  %2157 = load double, ptr %2156, align 8, !tbaa !15
  %2158 = sext i32 %2151 to i64
  %2159 = getelementptr inbounds double, ptr %2130, i64 %2158
  %2160 = load double, ptr %2159, align 8, !tbaa !15
  %2161 = fsub double %2157, %2160
  %2162 = shl nsw i32 %2151, 4
  %2163 = sext i32 %2162 to i64
  %2164 = getelementptr inbounds double, ptr %30, i64 %2163
  %2165 = getelementptr inbounds %class.Vector, ptr %629, i64 %2154
  %2166 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2154, i32 1
  %2167 = load float, ptr %2166, align 8, !tbaa !81
  %2168 = fpext float %2167 to double
  %2169 = fmul double %2123, %2168
  %2170 = getelementptr inbounds %class.Vector, ptr %2155, i64 0, i32 2
  %2171 = load double, ptr %2170, align 8, !tbaa !50
  %2172 = fsub double %695, %2171
  %2173 = getelementptr inbounds double, ptr %2164, i64 12
  %2174 = load double, ptr %2173, align 8, !tbaa !15
  %2175 = getelementptr inbounds double, ptr %2164, i64 13
  %2176 = load double, ptr %2175, align 8, !tbaa !15
  %2177 = getelementptr inbounds double, ptr %2164, i64 14
  %2178 = load double, ptr %2177, align 8, !tbaa !15
  %2179 = getelementptr inbounds double, ptr %2164, i64 15
  %2180 = load double, ptr %2179, align 8, !tbaa !15
  %2181 = fmul double %2169, %2174
  %2182 = fmul double %2169, %2176
  %2183 = fmul double %2169, %2178
  %2184 = fmul double %2169, %2180
  %2185 = fmul double %2161, %2181
  %2186 = fmul double %2182, 2.500000e-01
  %2187 = tail call double @llvm.fmuladd.f64(double %2185, double 0x3FC5555555555555, double %2186)
  %2188 = fmul double %2183, 5.000000e-01
  %2189 = tail call double @llvm.fmuladd.f64(double %2187, double %2161, double %2188)
  %2190 = tail call double @llvm.fmuladd.f64(double %2189, double %2161, double %2184)
  %2191 = fsub double %2144, %2190
  %2192 = tail call double @llvm.fmuladd.f64(double %2161, double %2181, double %2182)
  %2193 = tail call double @llvm.fmuladd.f64(double %2192, double %2161, double %2183)
  %2194 = fmul double %2117, %2193
  %2195 = load double, ptr %651, align 8, !tbaa !15
  %2196 = tail call double @llvm.fmuladd.f64(double %2194, double %2172, double %2195)
  %2197 = load <2 x double>, ptr %2155, align 8, !tbaa !15
  %2198 = fsub <2 x double> %692, %2197
  %2199 = load <2 x double>, ptr %650, align 8, !tbaa !15
  %2200 = insertelement <2 x double> poison, double %2194, i64 0
  %2201 = shufflevector <2 x double> %2200, <2 x double> poison, <2 x i32> zeroinitializer
  %2202 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2201, <2 x double> %2198, <2 x double> %2199)
  store <2 x double> %2202, ptr %650, align 8, !tbaa !15
  store double %2196, ptr %651, align 8, !tbaa !15
  %2203 = insertelement <2 x double> poison, double %2193, i64 0
  %2204 = shufflevector <2 x double> %2203, <2 x double> poison, <2 x i32> zeroinitializer
  %2205 = fmul <2 x double> %2198, %2204
  %2206 = fadd <2 x double> %2146, %2205
  %2207 = load <2 x double>, ptr %2165, align 8, !tbaa !15
  %2208 = fsub <2 x double> %2207, %2205
  store <2 x double> %2208, ptr %2165, align 8, !tbaa !15
  %2209 = fmul double %2172, %2193
  %2210 = fadd double %2145, %2209
  %2211 = getelementptr inbounds %class.Vector, ptr %629, i64 %2154, i32 2
  %2212 = load double, ptr %2211, align 8, !tbaa !89
  %2213 = fsub double %2212, %2209
  store double %2213, ptr %2211, align 8, !tbaa !89
  %2214 = load double, ptr %2170, align 8, !tbaa !50
  %2215 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2216 = fsub double %2214, %2215
  %2217 = fmul double %10, %2216
  %2218 = tail call double @llvm.floor.f64(double %2217)
  %2219 = fptosi double %2218 to i32
  %2220 = icmp slt i32 %2219, 0
  %2221 = select i1 %2220, i32 %2131, i32 0
  %2222 = icmp sgt i32 %2131, %2219
  %2223 = select i1 %2222, i32 0, i32 %2131
  %2224 = sub i32 %2219, %2223
  %2225 = add i32 %2224, %2221
  %2226 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2154, i32 3
  %2227 = load i8, ptr %2226, align 2, !tbaa !52
  %2228 = zext i8 %2227 to i32
  %2229 = fmul <2 x double> %2198, %2205
  %2230 = extractelement <2 x double> %2229, i64 0
  %2231 = fmul <2 x double> %2198, %2205
  %2232 = extractelement <2 x double> %2231, i64 1
  %2233 = fmul double %2172, %2209
  %2234 = add nsw i32 %2133, %2228
  %2235 = mul i32 %2134, %2234
  %2236 = sext i32 %2235 to i64
  %2237 = getelementptr inbounds double, ptr %8, i64 %2236
  %2238 = fmul double %2230, 5.000000e-01
  %2239 = fmul double %2232, 5.000000e-01
  %2240 = fmul double %2233, 5.000000e-01
  %2241 = getelementptr inbounds double, ptr %2237, i64 %2136
  %2242 = load double, ptr %2241, align 8, !tbaa !15
  %2243 = fadd double %2238, %2242
  store double %2243, ptr %2241, align 8, !tbaa !15
  %2244 = getelementptr inbounds double, ptr %2237, i64 %2138
  %2245 = load double, ptr %2244, align 8, !tbaa !15
  %2246 = fadd double %2239, %2245
  store double %2246, ptr %2244, align 8, !tbaa !15
  %2247 = getelementptr inbounds double, ptr %2237, i64 %2140
  %2248 = load double, ptr %2247, align 8, !tbaa !15
  %2249 = fadd double %2240, %2248
  store double %2249, ptr %2247, align 8, !tbaa !15
  %2250 = mul nsw i32 %2225, 3
  %2251 = sext i32 %2250 to i64
  %2252 = getelementptr inbounds double, ptr %2237, i64 %2251
  %2253 = load double, ptr %2252, align 8, !tbaa !15
  %2254 = fadd double %2238, %2253
  store double %2254, ptr %2252, align 8, !tbaa !15
  %2255 = add nsw i32 %2250, 1
  %2256 = sext i32 %2255 to i64
  %2257 = getelementptr inbounds double, ptr %2237, i64 %2256
  %2258 = load double, ptr %2257, align 8, !tbaa !15
  %2259 = fadd double %2239, %2258
  store double %2259, ptr %2257, align 8, !tbaa !15
  %2260 = add nsw i32 %2250, 2
  %2261 = sext i32 %2260 to i64
  %2262 = getelementptr inbounds double, ptr %2237, i64 %2261
  %2263 = load double, ptr %2262, align 8, !tbaa !15
  %2264 = fadd double %2240, %2263
  store double %2264, ptr %2262, align 8, !tbaa !15
  %2265 = add nuw nsw i64 %2143, 1
  %2266 = icmp eq i64 %2265, %2141
  br i1 %2266, label %2267, label %2142

2267:                                             ; preds = %2142, %2116
  %2268 = phi double [ 0.000000e+00, %2116 ], [ %2210, %2142 ]
  %2269 = phi double [ %663, %2116 ], [ %2191, %2142 ]
  %2270 = phi <2 x double> [ zeroinitializer, %2116 ], [ %2206, %2142 ]
  %2271 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2272 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2271, double noundef %2125, double noundef %2126, double noundef %695, ptr noundef %45, ptr noundef %2096, i32 noundef %2097, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2273 = add nsw i32 %2272, %662
  %2274 = icmp sgt i32 %2272, 0
  br i1 %2274, label %2275, label %2427

2275:                                             ; preds = %2267
  %2276 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2277 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2278 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2279 = mul nsw i32 %2278, %698
  %2280 = mul i32 %2277, 3
  %2281 = mul nsw i32 %710, 3
  %2282 = sext i32 %2281 to i64
  %2283 = add nsw i32 %2281, 1
  %2284 = sext i32 %2283 to i64
  %2285 = add nsw i32 %2281, 2
  %2286 = sext i32 %2285 to i64
  %2287 = zext i32 %2272 to i64
  br label %2288

2288:                                             ; preds = %2275, %2288
  %2289 = phi i64 [ 0, %2275 ], [ %2425, %2288 ]
  %2290 = phi double [ %2269, %2275 ], [ %2351, %2288 ]
  %2291 = phi double [ %2268, %2275 ], [ %2370, %2288 ]
  %2292 = phi <2 x double> [ %2270, %2275 ], [ %2366, %2288 ]
  %2293 = shl nuw nsw i64 %2289, 1
  %2294 = getelementptr inbounds i32, ptr %145, i64 %2293
  %2295 = load i32, ptr %2294, align 4, !tbaa !5
  %2296 = ashr i32 %2295, 14
  %2297 = add nsw i32 %2296, %38
  %2298 = getelementptr inbounds i16, ptr %98, i64 %2289
  %2299 = load i16, ptr %2298, align 2, !tbaa !45
  %2300 = zext i16 %2299 to i64
  %2301 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2300
  %2302 = getelementptr inbounds double, ptr %144, i64 %2289
  %2303 = load double, ptr %2302, align 8, !tbaa !15
  %2304 = sext i32 %2297 to i64
  %2305 = getelementptr inbounds double, ptr %2276, i64 %2304
  %2306 = load double, ptr %2305, align 8, !tbaa !15
  %2307 = fsub double %2303, %2306
  %2308 = shl nsw i32 %2297, 4
  %2309 = sext i32 %2308 to i64
  %2310 = getelementptr inbounds double, ptr %30, i64 %2309
  %2311 = getelementptr inbounds %class.Vector, ptr %629, i64 %2300
  %2312 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2300, i32 1
  %2313 = load float, ptr %2312, align 8, !tbaa !81
  %2314 = fpext float %2313 to double
  %2315 = fmul double %2123, %2314
  %2316 = getelementptr inbounds %class.Vector, ptr %2301, i64 0, i32 2
  %2317 = load double, ptr %2316, align 8, !tbaa !50
  %2318 = fsub double %695, %2317
  %2319 = shl nsw i32 %2297, 2
  %2320 = sext i32 %2319 to i64
  %2321 = getelementptr inbounds double, ptr %31, i64 %2320
  %2322 = getelementptr inbounds double, ptr %2310, i64 12
  %2323 = load double, ptr %2322, align 8, !tbaa !15
  %2324 = getelementptr inbounds double, ptr %2310, i64 13
  %2325 = load double, ptr %2324, align 8, !tbaa !15
  %2326 = getelementptr inbounds double, ptr %2310, i64 14
  %2327 = load double, ptr %2326, align 8, !tbaa !15
  %2328 = getelementptr inbounds double, ptr %2310, i64 15
  %2329 = load double, ptr %2328, align 8, !tbaa !15
  %2330 = load double, ptr %2321, align 8, !tbaa !15
  %2331 = tail call double @llvm.fmuladd.f64(double %34, double %2330, double %2329)
  %2332 = getelementptr inbounds double, ptr %2321, i64 1
  %2333 = load double, ptr %2332, align 8, !tbaa !15
  %2334 = tail call double @llvm.fmuladd.f64(double %652, double %2333, double %2327)
  %2335 = getelementptr inbounds double, ptr %2321, i64 2
  %2336 = load double, ptr %2335, align 8, !tbaa !15
  %2337 = tail call double @llvm.fmuladd.f64(double %653, double %2336, double %2325)
  %2338 = getelementptr inbounds double, ptr %2321, i64 3
  %2339 = load double, ptr %2338, align 8, !tbaa !15
  %2340 = tail call double @llvm.fmuladd.f64(double %654, double %2339, double %2323)
  %2341 = fmul double %2315, %2340
  %2342 = fmul double %2315, %2337
  %2343 = fmul double %2315, %2334
  %2344 = fmul double %2315, %2331
  %2345 = fmul double %2307, %2341
  %2346 = fmul double %2342, 2.500000e-01
  %2347 = tail call double @llvm.fmuladd.f64(double %2345, double 0x3FC5555555555555, double %2346)
  %2348 = fmul double %2343, 5.000000e-01
  %2349 = tail call double @llvm.fmuladd.f64(double %2347, double %2307, double %2348)
  %2350 = tail call double @llvm.fmuladd.f64(double %2349, double %2307, double %2344)
  %2351 = fsub double %2290, %2350
  %2352 = tail call double @llvm.fmuladd.f64(double %2307, double %2341, double %2342)
  %2353 = tail call double @llvm.fmuladd.f64(double %2352, double %2307, double %2343)
  %2354 = fmul double %2117, %2353
  %2355 = load double, ptr %651, align 8, !tbaa !15
  %2356 = tail call double @llvm.fmuladd.f64(double %2354, double %2318, double %2355)
  %2357 = load <2 x double>, ptr %2301, align 8, !tbaa !15
  %2358 = fsub <2 x double> %692, %2357
  %2359 = load <2 x double>, ptr %650, align 8, !tbaa !15
  %2360 = insertelement <2 x double> poison, double %2354, i64 0
  %2361 = shufflevector <2 x double> %2360, <2 x double> poison, <2 x i32> zeroinitializer
  %2362 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2361, <2 x double> %2358, <2 x double> %2359)
  store <2 x double> %2362, ptr %650, align 8, !tbaa !15
  store double %2356, ptr %651, align 8, !tbaa !15
  %2363 = insertelement <2 x double> poison, double %2353, i64 0
  %2364 = shufflevector <2 x double> %2363, <2 x double> poison, <2 x i32> zeroinitializer
  %2365 = fmul <2 x double> %2358, %2364
  %2366 = fadd <2 x double> %2292, %2365
  %2367 = load <2 x double>, ptr %2311, align 8, !tbaa !15
  %2368 = fsub <2 x double> %2367, %2365
  store <2 x double> %2368, ptr %2311, align 8, !tbaa !15
  %2369 = fmul double %2318, %2353
  %2370 = fadd double %2291, %2369
  %2371 = getelementptr inbounds %class.Vector, ptr %629, i64 %2300, i32 2
  %2372 = load double, ptr %2371, align 8, !tbaa !89
  %2373 = fsub double %2372, %2369
  store double %2373, ptr %2371, align 8, !tbaa !89
  %2374 = load double, ptr %2316, align 8, !tbaa !50
  %2375 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2376 = fsub double %2374, %2375
  %2377 = fmul double %10, %2376
  %2378 = tail call double @llvm.floor.f64(double %2377)
  %2379 = fptosi double %2378 to i32
  %2380 = icmp slt i32 %2379, 0
  %2381 = select i1 %2380, i32 %2277, i32 0
  %2382 = icmp sgt i32 %2277, %2379
  %2383 = select i1 %2382, i32 0, i32 %2277
  %2384 = sub i32 %2379, %2383
  %2385 = add i32 %2384, %2381
  %2386 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2300, i32 3
  %2387 = load i8, ptr %2386, align 2, !tbaa !52
  %2388 = zext i8 %2387 to i32
  %2389 = fmul <2 x double> %2358, %2365
  %2390 = extractelement <2 x double> %2389, i64 0
  %2391 = fmul <2 x double> %2358, %2365
  %2392 = extractelement <2 x double> %2391, i64 1
  %2393 = fmul double %2318, %2369
  %2394 = add nsw i32 %2279, %2388
  %2395 = mul i32 %2280, %2394
  %2396 = sext i32 %2395 to i64
  %2397 = getelementptr inbounds double, ptr %8, i64 %2396
  %2398 = fmul double %2390, 5.000000e-01
  %2399 = fmul double %2392, 5.000000e-01
  %2400 = fmul double %2393, 5.000000e-01
  %2401 = getelementptr inbounds double, ptr %2397, i64 %2282
  %2402 = load double, ptr %2401, align 8, !tbaa !15
  %2403 = fadd double %2398, %2402
  store double %2403, ptr %2401, align 8, !tbaa !15
  %2404 = getelementptr inbounds double, ptr %2397, i64 %2284
  %2405 = load double, ptr %2404, align 8, !tbaa !15
  %2406 = fadd double %2399, %2405
  store double %2406, ptr %2404, align 8, !tbaa !15
  %2407 = getelementptr inbounds double, ptr %2397, i64 %2286
  %2408 = load double, ptr %2407, align 8, !tbaa !15
  %2409 = fadd double %2400, %2408
  store double %2409, ptr %2407, align 8, !tbaa !15
  %2410 = mul nsw i32 %2385, 3
  %2411 = sext i32 %2410 to i64
  %2412 = getelementptr inbounds double, ptr %2397, i64 %2411
  %2413 = load double, ptr %2412, align 8, !tbaa !15
  %2414 = fadd double %2398, %2413
  store double %2414, ptr %2412, align 8, !tbaa !15
  %2415 = add nsw i32 %2410, 1
  %2416 = sext i32 %2415 to i64
  %2417 = getelementptr inbounds double, ptr %2397, i64 %2416
  %2418 = load double, ptr %2417, align 8, !tbaa !15
  %2419 = fadd double %2399, %2418
  store double %2419, ptr %2417, align 8, !tbaa !15
  %2420 = add nsw i32 %2410, 2
  %2421 = sext i32 %2420 to i64
  %2422 = getelementptr inbounds double, ptr %2397, i64 %2421
  %2423 = load double, ptr %2422, align 8, !tbaa !15
  %2424 = fadd double %2400, %2423
  store double %2424, ptr %2422, align 8, !tbaa !15
  %2425 = add nuw nsw i64 %2289, 1
  %2426 = icmp eq i64 %2425, %2287
  br i1 %2426, label %2427, label %2288

2427:                                             ; preds = %2288, %2267
  %2428 = phi double [ %2268, %2267 ], [ %2370, %2288 ]
  %2429 = phi double [ %2269, %2267 ], [ %2351, %2288 ]
  %2430 = phi <2 x double> [ %2270, %2267 ], [ %2366, %2288 ]
  %2431 = load double, ptr @_ZN20ComputeNonbondedUtil7cutoff2E, align 8, !tbaa !15
  %2432 = tail call noundef i32 @_Z22pairlist_from_pairlistddddPK8CompAtomPKtiPtdPd(double noundef %2431, double noundef %2125, double noundef %2126, double noundef %695, ptr noundef %45, ptr noundef %2098, i32 noundef %2095, ptr noundef %98, double noundef %35, ptr noundef %144)
  %2433 = add nsw i32 %2273, %2432
  %2434 = icmp sgt i32 %2432, 0
  br i1 %2434, label %2435, label %2587

2435:                                             ; preds = %2427
  %2436 = load ptr, ptr @_ZN20ComputeNonbondedUtil8r2_tableE, align 8, !tbaa !24
  %2437 = load i32, ptr @_ZN20ComputeNonbondedUtil20pressureProfileSlabsE, align 4, !tbaa !5
  %2438 = load i32, ptr @_ZN20ComputeNonbondedUtil24pressureProfileAtomTypesE, align 4, !tbaa !5
  %2439 = mul nsw i32 %2438, %698
  %2440 = mul i32 %2437, 3
  %2441 = mul nsw i32 %710, 3
  %2442 = sext i32 %2441 to i64
  %2443 = add nsw i32 %2441, 1
  %2444 = sext i32 %2443 to i64
  %2445 = add nsw i32 %2441, 2
  %2446 = sext i32 %2445 to i64
  %2447 = zext i32 %2432 to i64
  br label %2448

2448:                                             ; preds = %2435, %2448
  %2449 = phi i64 [ 0, %2435 ], [ %2585, %2448 ]
  %2450 = phi double [ %2429, %2435 ], [ %2511, %2448 ]
  %2451 = phi double [ %2428, %2435 ], [ %2530, %2448 ]
  %2452 = phi <2 x double> [ %2430, %2435 ], [ %2526, %2448 ]
  %2453 = shl nuw nsw i64 %2449, 1
  %2454 = getelementptr inbounds i32, ptr %145, i64 %2453
  %2455 = load i32, ptr %2454, align 4, !tbaa !5
  %2456 = ashr i32 %2455, 14
  %2457 = add nsw i32 %2456, %38
  %2458 = getelementptr inbounds i16, ptr %98, i64 %2449
  %2459 = load i16, ptr %2458, align 2, !tbaa !45
  %2460 = zext i16 %2459 to i64
  %2461 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2460
  %2462 = getelementptr inbounds double, ptr %144, i64 %2449
  %2463 = load double, ptr %2462, align 8, !tbaa !15
  %2464 = sext i32 %2457 to i64
  %2465 = getelementptr inbounds double, ptr %2436, i64 %2464
  %2466 = load double, ptr %2465, align 8, !tbaa !15
  %2467 = fsub double %2463, %2466
  %2468 = shl nsw i32 %2457, 4
  %2469 = sext i32 %2468 to i64
  %2470 = getelementptr inbounds double, ptr %30, i64 %2469
  %2471 = getelementptr inbounds %class.Vector, ptr %629, i64 %2460
  %2472 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2460, i32 1
  %2473 = load float, ptr %2472, align 8, !tbaa !81
  %2474 = fpext float %2473 to double
  %2475 = fmul double %2123, %2474
  %2476 = getelementptr inbounds %class.Vector, ptr %2461, i64 0, i32 2
  %2477 = load double, ptr %2476, align 8, !tbaa !50
  %2478 = fsub double %695, %2477
  %2479 = shl nsw i32 %2457, 2
  %2480 = sext i32 %2479 to i64
  %2481 = getelementptr inbounds double, ptr %31, i64 %2480
  %2482 = getelementptr inbounds double, ptr %2470, i64 12
  %2483 = load double, ptr %2482, align 8, !tbaa !15
  %2484 = getelementptr inbounds double, ptr %2470, i64 13
  %2485 = load double, ptr %2484, align 8, !tbaa !15
  %2486 = getelementptr inbounds double, ptr %2470, i64 14
  %2487 = load double, ptr %2486, align 8, !tbaa !15
  %2488 = getelementptr inbounds double, ptr %2470, i64 15
  %2489 = load double, ptr %2488, align 8, !tbaa !15
  %2490 = load double, ptr %2481, align 8, !tbaa !15
  %2491 = fadd double %2489, %2490
  %2492 = getelementptr inbounds double, ptr %2481, i64 1
  %2493 = load double, ptr %2492, align 8, !tbaa !15
  %2494 = tail call double @llvm.fmuladd.f64(double %2493, double 2.000000e+00, double %2487)
  %2495 = getelementptr inbounds double, ptr %2481, i64 2
  %2496 = load double, ptr %2495, align 8, !tbaa !15
  %2497 = tail call double @llvm.fmuladd.f64(double %2496, double 4.000000e+00, double %2485)
  %2498 = getelementptr inbounds double, ptr %2481, i64 3
  %2499 = load double, ptr %2498, align 8, !tbaa !15
  %2500 = tail call double @llvm.fmuladd.f64(double %2499, double 6.000000e+00, double %2483)
  %2501 = fmul double %2475, %2500
  %2502 = fmul double %2475, %2497
  %2503 = fmul double %2475, %2494
  %2504 = fmul double %2475, %2491
  %2505 = fmul double %2467, %2501
  %2506 = fmul double %2502, 2.500000e-01
  %2507 = tail call double @llvm.fmuladd.f64(double %2505, double 0x3FC5555555555555, double %2506)
  %2508 = fmul double %2503, 5.000000e-01
  %2509 = tail call double @llvm.fmuladd.f64(double %2507, double %2467, double %2508)
  %2510 = tail call double @llvm.fmuladd.f64(double %2509, double %2467, double %2504)
  %2511 = fsub double %2450, %2510
  %2512 = tail call double @llvm.fmuladd.f64(double %2467, double %2501, double %2502)
  %2513 = tail call double @llvm.fmuladd.f64(double %2512, double %2467, double %2503)
  %2514 = fmul double %2117, %2513
  %2515 = load double, ptr %651, align 8, !tbaa !15
  %2516 = tail call double @llvm.fmuladd.f64(double %2514, double %2478, double %2515)
  %2517 = load <2 x double>, ptr %2461, align 8, !tbaa !15
  %2518 = fsub <2 x double> %692, %2517
  %2519 = load <2 x double>, ptr %650, align 8, !tbaa !15
  %2520 = insertelement <2 x double> poison, double %2514, i64 0
  %2521 = shufflevector <2 x double> %2520, <2 x double> poison, <2 x i32> zeroinitializer
  %2522 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2521, <2 x double> %2518, <2 x double> %2519)
  store <2 x double> %2522, ptr %650, align 8, !tbaa !15
  store double %2516, ptr %651, align 8, !tbaa !15
  %2523 = insertelement <2 x double> poison, double %2513, i64 0
  %2524 = shufflevector <2 x double> %2523, <2 x double> poison, <2 x i32> zeroinitializer
  %2525 = fmul <2 x double> %2518, %2524
  %2526 = fadd <2 x double> %2452, %2525
  %2527 = load <2 x double>, ptr %2471, align 8, !tbaa !15
  %2528 = fsub <2 x double> %2527, %2525
  store <2 x double> %2528, ptr %2471, align 8, !tbaa !15
  %2529 = fmul double %2478, %2513
  %2530 = fadd double %2451, %2529
  %2531 = getelementptr inbounds %class.Vector, ptr %629, i64 %2460, i32 2
  %2532 = load double, ptr %2531, align 8, !tbaa !89
  %2533 = fsub double %2532, %2529
  store double %2533, ptr %2531, align 8, !tbaa !89
  %2534 = load double, ptr %2476, align 8, !tbaa !50
  %2535 = load double, ptr @_ZN20ComputeNonbondedUtil18pressureProfileMinE, align 8, !tbaa !15
  %2536 = fsub double %2534, %2535
  %2537 = fmul double %10, %2536
  %2538 = tail call double @llvm.floor.f64(double %2537)
  %2539 = fptosi double %2538 to i32
  %2540 = icmp slt i32 %2539, 0
  %2541 = select i1 %2540, i32 %2437, i32 0
  %2542 = icmp sgt i32 %2437, %2539
  %2543 = select i1 %2542, i32 0, i32 %2437
  %2544 = sub i32 %2539, %2543
  %2545 = add i32 %2544, %2541
  %2546 = getelementptr inbounds %struct.CompAtom, ptr %45, i64 %2460, i32 3
  %2547 = load i8, ptr %2546, align 2, !tbaa !52
  %2548 = zext i8 %2547 to i32
  %2549 = fmul <2 x double> %2518, %2525
  %2550 = extractelement <2 x double> %2549, i64 0
  %2551 = fmul <2 x double> %2518, %2525
  %2552 = extractelement <2 x double> %2551, i64 1
  %2553 = fmul double %2478, %2529
  %2554 = add nsw i32 %2439, %2548
  %2555 = mul i32 %2440, %2554
  %2556 = sext i32 %2555 to i64
  %2557 = getelementptr inbounds double, ptr %8, i64 %2556
  %2558 = fmul double %2550, 5.000000e-01
  %2559 = fmul double %2552, 5.000000e-01
  %2560 = fmul double %2553, 5.000000e-01
  %2561 = getelementptr inbounds double, ptr %2557, i64 %2442
  %2562 = load double, ptr %2561, align 8, !tbaa !15
  %2563 = fadd double %2558, %2562
  store double %2563, ptr %2561, align 8, !tbaa !15
  %2564 = getelementptr inbounds double, ptr %2557, i64 %2444
  %2565 = load double, ptr %2564, align 8, !tbaa !15
  %2566 = fadd double %2559, %2565
  store double %2566, ptr %2564, align 8, !tbaa !15
  %2567 = getelementptr inbounds double, ptr %2557, i64 %2446
  %2568 = load double, ptr %2567, align 8, !tbaa !15
  %2569 = fadd double %2560, %2568
  store double %2569, ptr %2567, align 8, !tbaa !15
  %2570 = mul nsw i32 %2545, 3
  %2571 = sext i32 %2570 to i64
  %2572 = getelementptr inbounds double, ptr %2557, i64 %2571
  %2573 = load double, ptr %2572, align 8, !tbaa !15
  %2574 = fadd double %2558, %2573
  store double %2574, ptr %2572, align 8, !tbaa !15
  %2575 = add nsw i32 %2570, 1
  %2576 = sext i32 %2575 to i64
  %2577 = getelementptr inbounds double, ptr %2557, i64 %2576
  %2578 = load double, ptr %2577, align 8, !tbaa !15
  %2579 = fadd double %2559, %2578
  store double %2579, ptr %2577, align 8, !tbaa !15
  %2580 = add nsw i32 %2570, 2
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds double, ptr %2557, i64 %2581
  %2583 = load double, ptr %2582, align 8, !tbaa !15
  %2584 = fadd double %2560, %2583
  store double %2584, ptr %2582, align 8, !tbaa !15
  %2585 = add nuw nsw i64 %2449, 1
  %2586 = icmp eq i64 %2585, %2447
  br i1 %2586, label %2587, label %2448

2587:                                             ; preds = %2448, %2427
  %2588 = phi double [ %2428, %2427 ], [ %2530, %2448 ]
  %2589 = phi double [ %2429, %2427 ], [ %2511, %2448 ]
  %2590 = phi <2 x double> [ %2430, %2427 ], [ %2526, %2448 ]
  %2591 = getelementptr inbounds %class.Vector, ptr %629, i64 %674
  %2592 = load <2 x double>, ptr %2591, align 8, !tbaa !15
  %2593 = fadd <2 x double> %2590, %2592
  store <2 x double> %2593, ptr %2591, align 8, !tbaa !15
  %2594 = getelementptr inbounds %class.Vector, ptr %629, i64 %674, i32 2
  %2595 = load double, ptr %2594, align 8, !tbaa !89
  %2596 = fadd double %2588, %2595
  store double %2596, ptr %2594, align 8, !tbaa !89
  br label %2597

2597:                                             ; preds = %2587, %1312, %1366, %685
  %2598 = phi i32 [ %686, %685 ], [ %690, %2587 ], [ %690, %1312 ], [ %690, %1366 ]
  %2599 = phi i32 [ %672, %685 ], [ %2101, %2587 ], [ %1262, %1312 ], [ %1262, %1366 ]
  %2600 = phi i32 [ %671, %685 ], [ %2102, %2587 ], [ %1263, %1312 ], [ %1263, %1366 ]
  %2601 = phi i32 [ %670, %685 ], [ %2103, %2587 ], [ %1264, %1312 ], [ %1264, %1366 ]
  %2602 = phi i32 [ %669, %685 ], [ %2104, %2587 ], [ %1265, %1312 ], [ %1265, %1366 ]
  %2603 = phi i32 [ %668, %685 ], [ %712, %2587 ], [ %712, %1312 ], [ %712, %1366 ]
  %2604 = phi ptr [ %667, %685 ], [ %2105, %2587 ], [ %958, %1312 ], [ %958, %1366 ]
  %2605 = phi ptr [ %666, %685 ], [ %2106, %2587 ], [ %959, %1312 ], [ %959, %1366 ]
  %2606 = phi ptr [ %665, %685 ], [ %2107, %2587 ], [ %960, %1312 ], [ %960, %1366 ]
  %2607 = phi i32 [ %688, %685 ], [ %664, %2587 ], [ %664, %1312 ], [ %664, %1366 ]
  %2608 = phi double [ %663, %685 ], [ %2589, %2587 ], [ %663, %1312 ], [ %663, %1366 ]
  %2609 = phi i32 [ %662, %685 ], [ %2433, %2587 ], [ %662, %1312 ], [ %662, %1366 ]
  %2610 = add nsw i32 %2607, 1
  %2611 = icmp slt i32 %2610, %635
  br i1 %2611, label %661, label %2612

2612:                                             ; preds = %2597, %623
  %2613 = phi ptr [ null, %623 ], [ %2606, %2597 ]
  %2614 = phi double [ 0.000000e+00, %623 ], [ %2608, %2597 ]
  %2615 = phi i32 [ 0, %623 ], [ %2609, %2597 ]
  %2616 = getelementptr inbounds %struct.nonbonded, ptr %0, i64 0, i32 4
  %2617 = load ptr, ptr %2616, align 8, !tbaa !24
  %2618 = icmp sgt i32 %40, 0
  br i1 %2618, label %2619, label %2621

2619:                                             ; preds = %2612
  %2620 = zext i32 %40 to i64
  br label %2647

2621:                                             ; preds = %2647, %2612
  %2622 = phi <4 x double> [ zeroinitializer, %2612 ], [ %2677, %2647 ]
  %2623 = phi <2 x double> [ zeroinitializer, %2612 ], [ %2672, %2647 ]
  %2624 = sitofp i32 %2615 to double
  %2625 = getelementptr inbounds double, ptr %6, i64 22
  %2626 = load double, ptr %2625, align 8, !tbaa !15
  %2627 = fadd double %2626, %2624
  store double %2627, ptr %2625, align 8, !tbaa !15
  %2628 = getelementptr inbounds double, ptr %6, i64 1
  %2629 = load double, ptr %2628, align 8, !tbaa !15
  %2630 = fadd double %2614, %2629
  store double %2630, ptr %2628, align 8, !tbaa !15
  %2631 = getelementptr inbounds double, ptr %6, i64 12
  %2632 = load <4 x double>, ptr %2631, align 8, !tbaa !15
  %2633 = shufflevector <2 x double> %2623, <2 x double> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %2634 = shufflevector <4 x double> %2633, <4 x double> %2622, <4 x i32> <i32 0, i32 1, i32 7, i32 poison>
  %2635 = shufflevector <4 x double> %2634, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2636 = fadd <4 x double> %2635, %2632
  store <4 x double> %2636, ptr %2631, align 8, !tbaa !15
  %2637 = getelementptr inbounds double, ptr %6, i64 16
  %2638 = load <4 x double>, ptr %2637, align 8, !tbaa !15
  %2639 = shufflevector <4 x double> %2622, <4 x double> poison, <4 x i32> <i32 2, i32 1, i32 3, i32 poison>
  %2640 = shufflevector <4 x double> %2639, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %2641 = fadd <4 x double> %2640, %2638
  store <4 x double> %2641, ptr %2637, align 8, !tbaa !15
  %2642 = getelementptr inbounds double, ptr %6, i64 20
  %2643 = load double, ptr %2642, align 8, !tbaa !15
  %2644 = extractelement <4 x double> %2622, i64 0
  %2645 = fadd double %2644, %2643
  store double %2645, ptr %2642, align 8, !tbaa !15
  %2646 = icmp eq ptr %2613, null
  br i1 %2646, label %2681, label %2680

2647:                                             ; preds = %2619, %2647
  %2648 = phi i64 [ 0, %2619 ], [ %2678, %2647 ]
  %2649 = phi <4 x double> [ zeroinitializer, %2619 ], [ %2677, %2647 ]
  %2650 = phi <2 x double> [ zeroinitializer, %2619 ], [ %2672, %2647 ]
  %2651 = getelementptr inbounds %class.Vector, ptr %629, i64 %2648
  %2652 = getelementptr inbounds %class.Vector, ptr %2617, i64 %2648
  %2653 = getelementptr inbounds %class.Vector, ptr %629, i64 %2648, i32 1
  %2654 = load <2 x double>, ptr %2651, align 8, !tbaa !15
  %2655 = load <2 x double>, ptr %2652, align 8, !tbaa !15
  %2656 = fadd <2 x double> %2654, %2655
  store <2 x double> %2656, ptr %2652, align 8, !tbaa !15
  %2657 = getelementptr inbounds %class.Vector, ptr %629, i64 %2648, i32 2
  %2658 = load double, ptr %2657, align 8, !tbaa !89
  %2659 = getelementptr inbounds %class.Vector, ptr %2617, i64 %2648, i32 2
  %2660 = load double, ptr %2659, align 8, !tbaa !89
  %2661 = fadd double %2658, %2660
  store double %2661, ptr %2659, align 8, !tbaa !89
  %2662 = load double, ptr %2651, align 8, !tbaa !193
  %2663 = getelementptr inbounds %struct.CompAtom, ptr %43, i64 %2648
  %2664 = load double, ptr %2663, align 8, !tbaa !69
  %2665 = getelementptr inbounds %class.Vector, ptr %2663, i64 0, i32 1
  %2666 = load <2 x double>, ptr %2665, align 8, !tbaa !15
  %2667 = shufflevector <2 x double> %2666, <2 x double> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 1>
  %2668 = insertelement <2 x double> poison, double %2662, i64 0
  %2669 = shufflevector <2 x double> %2668, <2 x double> poison, <2 x i32> zeroinitializer
  %2670 = shufflevector <2 x double> %2666, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %2671 = insertelement <2 x double> %2670, double %2664, i64 0
  %2672 = tail call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %2669, <2 x double> %2671, <2 x double> %2650)
  %2673 = load <2 x double>, ptr %2653, align 8, !tbaa !15
  %2674 = shufflevector <2 x double> %2673, <2 x double> poison, <4 x i32> <i32 1, i32 0, i32 poison, i32 poison>
  %2675 = insertelement <4 x double> %2674, double %2662, i64 3
  %2676 = shufflevector <4 x double> %2675, <4 x double> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 3>
  %2677 = tail call <4 x double> @llvm.fmuladd.v4f64(<4 x double> %2676, <4 x double> %2667, <4 x double> %2649)
  %2678 = add nuw nsw i64 %2648, 1
  %2679 = icmp eq i64 %2678, %2620
  br i1 %2679, label %2621, label %2647

2680:                                             ; preds = %2621
  tail call void @_ZdaPv(ptr noundef nonnull %2613) #10
  br label %2681

2681:                                             ; preds = %2621, %2680, %1
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #7

; Function Attrs: sspstrong uwtable
define linkonce_odr dso_local void @_ZN14ResizeArrayRawI6VectorE6resizeEi(ptr noundef nonnull align 8 dereferenceable(36) %0, i32 noundef %1) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.ResizeArrayRaw.19, ptr %0, i64 0, i32 2
  %4 = load i32, ptr %3, align 8, !tbaa !299
  %5 = icmp slt i32 %4, %1
  br i1 %5, label %6, label %79

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.ResizeArrayRaw.19, ptr %0, i64 0, i32 3
  %8 = load i32, ptr %7, align 4, !tbaa !300
  %9 = icmp slt i32 %8, %1
  br i1 %9, label %10, label %45

10:                                               ; preds = %6
  %11 = sitofp i32 %8 to float
  %12 = getelementptr inbounds %class.ResizeArrayRaw.19, ptr %0, i64 0, i32 5
  %13 = load float, ptr %12, align 4, !tbaa !301
  %14 = fmul float %13, %11
  %15 = fptosi float %14 to i32
  %16 = tail call i32 @llvm.smax.i32(i32 %15, i32 %1)
  %17 = sub nsw i32 %16, %8
  %18 = getelementptr inbounds %class.ResizeArrayRaw.19, ptr %0, i64 0, i32 6
  %19 = load i32, ptr %18, align 8, !tbaa !302
  %20 = icmp slt i32 %17, %19
  %21 = add nsw i32 %19, %8
  %22 = select i1 %20, i32 %21, i32 %16
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %23, 24
  %25 = add nsw i64 %24, 31
  %26 = tail call noalias noundef nonnull ptr @_Znam(i64 noundef %25) #9
  %27 = getelementptr inbounds i8, ptr %26, i64 31
  %28 = ptrtoint ptr %27 to i64
  %29 = and i64 %28, 31
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds i8, ptr %27, i64 %30
  %32 = load ptr, ptr %0, align 8, !tbaa !176
  %33 = sext i32 %4 to i64
  %34 = mul nsw i64 %33, 24
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %31, ptr align 1 %32, i64 %34, i1 false)
  %35 = icmp eq i32 %8, 0
  br i1 %35, label %42, label %36

36:                                               ; preds = %10
  %37 = getelementptr inbounds %class.ResizeArrayRaw.19, ptr %0, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !303
  %39 = icmp eq ptr %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  tail call void @_ZdaPv(ptr noundef nonnull %38) #10
  %41 = load i32, ptr %3, align 8, !tbaa !299
  br label %42

42:                                               ; preds = %40, %36, %10
  %43 = phi i32 [ %41, %40 ], [ %4, %36 ], [ %4, %10 ]
  %44 = getelementptr inbounds %class.ResizeArrayRaw.19, ptr %0, i64 0, i32 1
  store ptr %26, ptr %44, align 8, !tbaa !303
  store ptr %31, ptr %0, align 8, !tbaa !176
  store i32 %22, ptr %7, align 4, !tbaa !300
  br label %45

45:                                               ; preds = %6, %42
  %46 = phi i32 [ %4, %6 ], [ %43, %42 ]
  %47 = icmp slt i32 %46, %1
  br i1 %47, label %48, label %79

48:                                               ; preds = %45
  %49 = load ptr, ptr %0, align 8, !tbaa !176
  %50 = sext i32 %46 to i64
  %51 = sext i32 %1 to i64
  %52 = sub nsw i64 %51, %50
  %53 = icmp ult i64 %52, 8
  br i1 %53, label %71, label %54

54:                                               ; preds = %48
  %55 = and i64 %52, -8
  %56 = add nsw i64 %55, %50
  br label %57

57:                                               ; preds = %57, %54
  %58 = phi i64 [ 0, %54 ], [ %67, %57 ]
  %59 = add i64 %58, %50
  %60 = add i64 %59, 2
  %61 = add i64 %59, 4
  %62 = add i64 %59, 6
  %63 = getelementptr inbounds %class.Vector, ptr %49, i64 %59
  %64 = getelementptr inbounds %class.Vector, ptr %49, i64 %60
  %65 = getelementptr inbounds %class.Vector, ptr %49, i64 %61
  %66 = getelementptr inbounds %class.Vector, ptr %49, i64 %62
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %63, align 8, !tbaa !15
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %64, align 8, !tbaa !15
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %65, align 8, !tbaa !15
  store <6 x double> <double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04, double -9.999900e+04>, ptr %66, align 8, !tbaa !15
  %67 = add nuw i64 %58, 8
  %68 = icmp eq i64 %67, %55
  br i1 %68, label %69, label %57, !llvm.loop !304

69:                                               ; preds = %57
  %70 = icmp eq i64 %52, %55
  br i1 %70, label %79, label %71

71:                                               ; preds = %48, %69
  %72 = phi i64 [ %50, %48 ], [ %56, %69 ]
  br label %73

73:                                               ; preds = %71, %73
  %74 = phi i64 [ %77, %73 ], [ %72, %71 ]
  %75 = getelementptr inbounds %class.Vector, ptr %49, i64 %74
  store <2 x double> <double -9.999900e+04, double -9.999900e+04>, ptr %75, align 8, !tbaa !15
  %76 = getelementptr inbounds %class.Vector, ptr %49, i64 %74, i32 2
  store double -9.999900e+04, ptr %76, align 8, !tbaa !89
  %77 = add nsw i64 %74, 1
  %78 = icmp eq i64 %77, %51
  br i1 %78, label %79, label %73, !llvm.loop !305

79:                                               ; preds = %73, %69, %2, %45
  store i32 %1, ptr %3, align 8, !tbaa !299
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x double> @llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x double> @llvm.fmuladd.v4f64(<4 x double>, <4 x double>, <4 x double>) #8

attributes #0 = { sspstrong uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nobuiltin allocsize(0) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { inlinehint nounwind sspstrong uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #6 = { nobuiltin nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" }
attributes #7 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #8 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #9 = { builtin allocsize(0) }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !13, i64 112}
!10 = !{!"_ZTS9nonbonded", !7, i64 0, !7, i64 16, !7, i64 32, !7, i64 48, !7, i64 64, !7, i64 80, !11, i64 88, !13, i64 112, !13, i64 120, !13, i64 128, !13, i64 136, !6, i64 144, !6, i64 148, !12, i64 152, !12, i64 160, !6, i64 168, !6, i64 172, !6, i64 176, !6, i64 180}
!11 = !{!"_ZTS6Vector", !12, i64 0, !12, i64 8, !12, i64 16}
!12 = !{!"double", !7, i64 0}
!13 = !{!"any pointer", !7, i64 0}
!14 = !{!10, !13, i64 120}
!15 = !{!12, !12, i64 0}
!16 = !{!10, !13, i64 136}
!17 = !{!10, !6, i64 144}
!18 = !{!10, !6, i64 148}
!19 = !{!20, !6, i64 8}
!20 = !{!"_ZTS9Pairlists", !13, i64 0, !6, i64 8, !6, i64 12}
!21 = !{!10, !12, i64 104}
!22 = !{!10, !12, i64 152}
!23 = !{!10, !12, i64 160}
!24 = !{!13, !13, i64 0}
!25 = !{!10, !13, i64 128}
!26 = !{!27, !13, i64 8}
!27 = !{!"_ZTS11ResizeArrayItE", !13, i64 8}
!28 = !{!29, !6, i64 16}
!29 = !{!"_ZTS14ResizeArrayRawItE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !30, i64 28, !6, i64 32}
!30 = !{!"float", !7, i64 0}
!31 = !{!29, !6, i64 20}
!32 = !{!29, !30, i64 28}
!33 = !{!29, !6, i64 32}
!34 = !{!29, !13, i64 0}
!35 = !{!29, !13, i64 8}
!36 = !{!37, !13, i64 8}
!37 = !{!"_ZTS11ResizeArrayIdE", !13, i64 8}
!38 = !{!39, !6, i64 16}
!39 = !{!"_ZTS14ResizeArrayRawIdE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !30, i64 28, !6, i64 32}
!40 = !{!39, !6, i64 20}
!41 = !{!39, !30, i64 28}
!42 = !{!39, !6, i64 32}
!43 = !{!39, !13, i64 0}
!44 = !{!39, !13, i64 8}
!45 = !{!46, !46, i64 0}
!46 = !{!"short", !7, i64 0}
!47 = !{!20, !13, i64 0}
!48 = !{!10, !6, i64 172}
!49 = !{!10, !6, i64 180}
!50 = !{!51, !12, i64 16}
!51 = !{!"_ZTS8CompAtom", !11, i64 0, !30, i64 24, !46, i64 28, !7, i64 30, !6, i64 31, !6, i64 31, !6, i64 31}
!52 = !{!51, !7, i64 30}
!53 = !{!54, !13, i64 8}
!54 = !{!"_ZTS8Molecule", !13, i64 0, !13, i64 8, !13, i64 16, !13, i64 24, !6, i64 32, !6, i64 36, !13, i64 40}
!55 = !{!56, !6, i64 0}
!56 = !{!"_ZTS14ExclusionCheck", !6, i64 0, !6, i64 4, !13, i64 8}
!57 = !{!56, !6, i64 4}
!58 = !{!56, !13, i64 8}
!59 = !{!7, !7, i64 0}
!60 = distinct !{!60, !61}
!61 = !{!"llvm.loop.unroll.disable"}
!62 = !{!54, !6, i64 32}
!63 = distinct !{!63, !61}
!64 = !{!54, !13, i64 16}
!65 = distinct !{!65, !61}
!66 = !{!54, !13, i64 24}
!67 = distinct !{!67, !61}
!68 = !{!51, !12, i64 8}
!69 = !{!51, !12, i64 0}
!70 = !{!20, !6, i64 12}
!71 = distinct !{!71, !72, !73}
!72 = !{!"llvm.loop.isvectorized", i32 1}
!73 = !{!"llvm.loop.unroll.runtime.disable"}
!74 = distinct !{!74, !72, !73}
!75 = distinct !{!75, !61}
!76 = distinct !{!76, !72}
!77 = distinct !{!77, !72, !73}
!78 = distinct !{!78, !72, !73}
!79 = distinct !{!79, !61}
!80 = distinct !{!80, !72}
!81 = !{!51, !30, i64 24}
!82 = !{!51, !46, i64 28}
!83 = !{!84, !13, i64 8}
!84 = !{!"_ZTS7LJTable", !13, i64 0, !13, i64 8, !6, i64 16}
!85 = !{!84, !6, i64 16}
!86 = !{!87, !12, i64 0}
!87 = !{!"_ZTSN7LJTable10TableEntryE", !12, i64 0, !12, i64 8}
!88 = !{!87, !12, i64 8}
!89 = !{!11, !12, i64 16}
!90 = distinct !{!90, !61}
!91 = distinct !{!91, !61}
!92 = distinct !{!92, !61}
!93 = distinct !{!93, !61}
!94 = distinct !{!94, !72, !73}
!95 = distinct !{!95, !72, !73}
!96 = distinct !{!96, !61}
!97 = distinct !{!97, !72}
!98 = distinct !{!98, !72, !73}
!99 = distinct !{!99, !72, !73}
!100 = distinct !{!100, !61}
!101 = distinct !{!101, !72}
!102 = distinct !{!102, !61}
!103 = distinct !{!103, !61}
!104 = distinct !{!104, !61}
!105 = distinct !{!105, !61}
!106 = distinct !{!106, !72, !73}
!107 = distinct !{!107, !72, !73}
!108 = distinct !{!108, !61}
!109 = distinct !{!109, !72}
!110 = distinct !{!110, !72, !73}
!111 = distinct !{!111, !72, !73}
!112 = distinct !{!112, !61}
!113 = distinct !{!113, !72}
!114 = distinct !{!114, !61}
!115 = distinct !{!115, !61}
!116 = distinct !{!116, !61}
!117 = distinct !{!117, !61}
!118 = distinct !{!118, !72, !73}
!119 = distinct !{!119, !72, !73}
!120 = distinct !{!120, !61}
!121 = distinct !{!121, !72}
!122 = distinct !{!122, !72, !73}
!123 = distinct !{!123, !72, !73}
!124 = distinct !{!124, !61}
!125 = distinct !{!125, !72}
!126 = distinct !{!126, !61}
!127 = distinct !{!127, !61}
!128 = distinct !{!128, !61}
!129 = distinct !{!129, !61}
!130 = distinct !{!130, !72, !73}
!131 = distinct !{!131, !72, !73}
!132 = distinct !{!132, !61}
!133 = distinct !{!133, !72}
!134 = distinct !{!134, !72, !73}
!135 = distinct !{!135, !72, !73}
!136 = distinct !{!136, !61}
!137 = distinct !{!137, !72}
!138 = distinct !{!138, !61}
!139 = distinct !{!139, !61}
!140 = distinct !{!140, !61}
!141 = distinct !{!141, !61}
!142 = distinct !{!142, !72, !73}
!143 = distinct !{!143, !72, !73}
!144 = distinct !{!144, !61}
!145 = distinct !{!145, !72}
!146 = distinct !{!146, !72, !73}
!147 = distinct !{!147, !72, !73}
!148 = distinct !{!148, !61}
!149 = distinct !{!149, !72}
!150 = distinct !{!150, !61}
!151 = distinct !{!151, !61}
!152 = distinct !{!152, !61}
!153 = distinct !{!153, !61}
!154 = distinct !{!154, !72, !73}
!155 = distinct !{!155, !72, !73}
!156 = distinct !{!156, !61}
!157 = distinct !{!157, !72}
!158 = distinct !{!158, !72, !73}
!159 = distinct !{!159, !72, !73}
!160 = distinct !{!160, !61}
!161 = distinct !{!161, !72}
!162 = distinct !{!162, !61}
!163 = distinct !{!163, !61}
!164 = distinct !{!164, !61}
!165 = distinct !{!165, !61}
!166 = distinct !{!166, !72, !73}
!167 = distinct !{!167, !72, !73}
!168 = distinct !{!168, !61}
!169 = distinct !{!169, !72}
!170 = distinct !{!170, !72, !73}
!171 = distinct !{!171, !72, !73}
!172 = distinct !{!172, !61}
!173 = distinct !{!173, !72}
!174 = !{!175, !13, i64 8}
!175 = !{!"_ZTS11ResizeArrayI6VectorE", !13, i64 8}
!176 = !{!177, !13, i64 0}
!177 = !{!"_ZTS14ResizeArrayRawI6VectorE", !13, i64 0, !13, i64 8, !6, i64 16, !6, i64 20, !6, i64 24, !30, i64 28, !6, i64 32}
!178 = distinct !{!178, !61}
!179 = distinct !{!179, !61}
!180 = distinct !{!180, !61}
!181 = distinct !{!181, !61}
!182 = distinct !{!182, !72, !73}
!183 = distinct !{!183, !72, !73}
!184 = distinct !{!184, !73, !72}
!185 = distinct !{!185, !72, !73}
!186 = distinct !{!186, !72, !73}
!187 = distinct !{!187, !61}
!188 = distinct !{!188, !72}
!189 = distinct !{!189, !72, !73}
!190 = distinct !{!190, !72, !73}
!191 = distinct !{!191, !61}
!192 = distinct !{!192, !72}
!193 = !{!11, !12, i64 0}
!194 = distinct !{!194, !61}
!195 = distinct !{!195, !61}
!196 = distinct !{!196, !61}
!197 = distinct !{!197, !61}
!198 = distinct !{!198, !72, !73}
!199 = distinct !{!199, !72, !73}
!200 = distinct !{!200, !73, !72}
!201 = distinct !{!201, !72, !73}
!202 = distinct !{!202, !72, !73}
!203 = distinct !{!203, !61}
!204 = distinct !{!204, !72}
!205 = distinct !{!205, !72, !73}
!206 = distinct !{!206, !72, !73}
!207 = distinct !{!207, !61}
!208 = distinct !{!208, !72}
!209 = distinct !{!209, !61}
!210 = distinct !{!210, !61}
!211 = distinct !{!211, !61}
!212 = distinct !{!212, !61}
!213 = distinct !{!213, !72, !73}
!214 = distinct !{!214, !72, !73}
!215 = distinct !{!215, !73, !72}
!216 = distinct !{!216, !72, !73}
!217 = distinct !{!217, !72, !73}
!218 = distinct !{!218, !61}
!219 = distinct !{!219, !72}
!220 = distinct !{!220, !72, !73}
!221 = distinct !{!221, !72, !73}
!222 = distinct !{!222, !61}
!223 = distinct !{!223, !72}
!224 = distinct !{!224, !61}
!225 = distinct !{!225, !61}
!226 = distinct !{!226, !61}
!227 = distinct !{!227, !61}
!228 = distinct !{!228, !72, !73}
!229 = distinct !{!229, !72, !73}
!230 = distinct !{!230, !73, !72}
!231 = distinct !{!231, !72, !73}
!232 = distinct !{!232, !72, !73}
!233 = distinct !{!233, !61}
!234 = distinct !{!234, !72}
!235 = distinct !{!235, !72, !73}
!236 = distinct !{!236, !72, !73}
!237 = distinct !{!237, !61}
!238 = distinct !{!238, !72}
!239 = distinct !{!239, !61}
!240 = distinct !{!240, !61}
!241 = distinct !{!241, !61}
!242 = distinct !{!242, !61}
!243 = distinct !{!243, !72, !73}
!244 = distinct !{!244, !72, !73}
!245 = distinct !{!245, !73, !72}
!246 = distinct !{!246, !72, !73}
!247 = distinct !{!247, !72, !73}
!248 = distinct !{!248, !61}
!249 = distinct !{!249, !72}
!250 = distinct !{!250, !72, !73}
!251 = distinct !{!251, !72, !73}
!252 = distinct !{!252, !61}
!253 = distinct !{!253, !72}
!254 = distinct !{!254, !61}
!255 = distinct !{!255, !61}
!256 = distinct !{!256, !61}
!257 = distinct !{!257, !61}
!258 = distinct !{!258, !72, !73}
!259 = distinct !{!259, !72, !73}
!260 = distinct !{!260, !73, !72}
!261 = distinct !{!261, !72, !73}
!262 = distinct !{!262, !72, !73}
!263 = distinct !{!263, !61}
!264 = distinct !{!264, !72}
!265 = distinct !{!265, !72, !73}
!266 = distinct !{!266, !72, !73}
!267 = distinct !{!267, !61}
!268 = distinct !{!268, !72}
!269 = distinct !{!269, !61}
!270 = distinct !{!270, !61}
!271 = distinct !{!271, !61}
!272 = distinct !{!272, !61}
!273 = distinct !{!273, !72, !73}
!274 = distinct !{!274, !72, !73}
!275 = distinct !{!275, !73, !72}
!276 = distinct !{!276, !72, !73}
!277 = distinct !{!277, !72, !73}
!278 = distinct !{!278, !61}
!279 = distinct !{!279, !72}
!280 = distinct !{!280, !72, !73}
!281 = distinct !{!281, !72, !73}
!282 = distinct !{!282, !61}
!283 = distinct !{!283, !72}
!284 = distinct !{!284, !61}
!285 = distinct !{!285, !61}
!286 = distinct !{!286, !61}
!287 = distinct !{!287, !61}
!288 = distinct !{!288, !72, !73}
!289 = distinct !{!289, !72, !73}
!290 = distinct !{!290, !73, !72}
!291 = distinct !{!291, !72, !73}
!292 = distinct !{!292, !72, !73}
!293 = distinct !{!293, !61}
!294 = distinct !{!294, !72}
!295 = distinct !{!295, !72, !73}
!296 = distinct !{!296, !72, !73}
!297 = distinct !{!297, !61}
!298 = distinct !{!298, !72}
!299 = !{!177, !6, i64 16}
!300 = !{!177, !6, i64 20}
!301 = !{!177, !30, i64 28}
!302 = !{!177, !6, i64 32}
!303 = !{!177, !13, i64 8}
!304 = distinct !{!304, !72, !73}
!305 = distinct !{!305, !73, !72}
